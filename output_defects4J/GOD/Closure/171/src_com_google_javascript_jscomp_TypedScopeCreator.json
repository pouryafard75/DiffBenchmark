{
  "matchedElements" : [
 {
    "left" : "class : TypedScopeCreator",
    "right" : "class : TypedScopeCreator",
    "info" : "TypeDeclaration[4820-79890]:TypeDeclaration[4820-79979]"
  }, {
    "left" : "DELEGATE_PROXY_SUFFIX",
    "right" : "DELEGATE_PROXY_SUFFIX",
    "info" : "FieldDeclaration[5375-5549]:FieldDeclaration[5375-5549]"
  }, {
    "left" : "MALFORMED_TYPEDEF",
    "right" : "MALFORMED_TYPEDEF",
    "info" : "FieldDeclaration[5553-5730]:FieldDeclaration[5553-5730]"
  }, {
    "left" : "ENUM_INITIALIZER",
    "right" : "ENUM_INITIALIZER",
    "info" : "FieldDeclaration[5734-5921]:FieldDeclaration[5734-5921]"
  }, {
    "left" : "CTOR_INITIALIZER",
    "right" : "CTOR_INITIALIZER",
    "info" : "FieldDeclaration[5925-6109]:FieldDeclaration[5925-6109]"
  }, {
    "left" : "IFACE_INITIALIZER",
    "right" : "IFACE_INITIALIZER",
    "info" : "FieldDeclaration[6113-6298]:FieldDeclaration[6113-6298]"
  }, {
    "left" : "CONSTRUCTOR_EXPECTED",
    "right" : "CONSTRUCTOR_EXPECTED",
    "info" : "FieldDeclaration[6302-6481]:FieldDeclaration[6302-6481]"
  }, {
    "left" : "UNKNOWN_LENDS",
    "right" : "UNKNOWN_LENDS",
    "info" : "FieldDeclaration[6485-6655]:FieldDeclaration[6485-6655]"
  }, {
    "left" : "LENDS_ON_NON_OBJECT",
    "right" : "LENDS_ON_NON_OBJECT",
    "info" : "FieldDeclaration[6659-6849]:FieldDeclaration[6659-6849]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[6853-6893]:FieldDeclaration[6853-6893]"
  }, {
    "left" : "typeParsingErrorReporter",
    "right" : "typeParsingErrorReporter",
    "info" : "FieldDeclaration[6896-6949]:FieldDeclaration[6896-6949]"
  }, {
    "left" : "validator",
    "right" : "validator",
    "info" : "FieldDeclaration[6952-6990]:FieldDeclaration[6952-6990]"
  }, {
    "left" : "codingConvention",
    "right" : "codingConvention",
    "info" : "FieldDeclaration[6993-7041]:FieldDeclaration[6993-7041]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[7044-7086]:FieldDeclaration[7044-7086]"
  }, {
    "left" : "delegateProxyPrototypes",
    "right" : "delegateProxyPrototypes",
    "info" : "FieldDeclaration[7089-7167]:FieldDeclaration[7089-7167]"
  }, {
    "left" : "delegateCallingConventions",
    "right" : "delegateCallingConventions",
    "info" : "FieldDeclaration[7170-7257]:FieldDeclaration[7170-7257]"
  }, {
    "left" : "functionAnalysisResults",
    "right" : "functionAnalysisResults",
    "info" : "FieldDeclaration[7310-7405]:FieldDeclaration[7310-7405]"
  }, {
    "left" : "unknownType",
    "right" : "unknownType",
    "info" : "FieldDeclaration[7430-7467]:FieldDeclaration[7430-7467]"
  }, {
    "left" : "class : DeferredSetType",
    "right" : "class : DeferredSetType",
    "info" : "TypeDeclaration[7471-8144]:TypeDeclaration[7471-8144]"
  }, {
    "left" : "node",
    "right" : "node",
    "info" : "FieldDeclaration[7650-7666]:FieldDeclaration[7650-7666]"
  }, {
    "left" : "type",
    "right" : "type",
    "info" : "FieldDeclaration[7671-7689]:FieldDeclaration[7671-7689]"
  }, {
    "left" : "package DeferredSetType(node , type )",
    "right" : "package DeferredSetType(node , type )",
    "info" : "MethodDeclaration[7695-8032]:MethodDeclaration[7695-8032]"
  }, {
    "left" : "package resolve(scope ) : void",
    "right" : "package resolve(scope ) : void",
    "info" : "MethodDeclaration[8038-8140]:MethodDeclaration[8038-8140]"
  }, {
    "left" : "package TypedScopeCreator(compiler )",
    "right" : "package TypedScopeCreator(compiler )",
    "info" : "MethodDeclaration[8148-8250]:MethodDeclaration[8148-8250]"
  }, {
    "left" : "package TypedScopeCreator(compiler , codingConvention )",
    "right" : "package TypedScopeCreator(compiler , codingConvention )",
    "info" : "MethodDeclaration[8254-8663]:MethodDeclaration[8254-8663]"
  }, {
    "left" : "public createScope(root , parent ) : ",
    "right" : "public createScope(root , parent ) : ",
    "info" : "MethodDeclaration[8667-11114]:MethodDeclaration[8667-11114]"
  }, {
    "left" : "package patchGlobalScope(globalScope , scriptRoot ) : void",
    "right" : "package patchGlobalScope(globalScope , scriptRoot ) : void",
    "info" : "MethodDeclaration[11118-13086]:MethodDeclaration[11118-13086]"
  }, {
    "left" : "package createInitialScope(root ) : ",
    "right" : "package createInitialScope(root ) : ",
    "info" : "MethodDeclaration[13090-14603]:MethodDeclaration[13090-14603]"
  }, {
    "left" : "private declareNativeFunctionType(scope , tId ) : void",
    "right" : "private declareNativeFunctionType(scope , tId ) : void",
    "info" : "MethodDeclaration[14607-14911]:MethodDeclaration[14607-14911]"
  }, {
    "left" : "private declareNativeValueType(scope , name , tId ) : void",
    "right" : "private declareNativeValueType(scope , name , tId ) : void",
    "info" : "MethodDeclaration[14915-15075]:MethodDeclaration[14915-15075]"
  }, {
    "left" : "private declareNativeType(scope , name , t ) : void",
    "right" : "private declareNativeType(scope , name , t ) : void",
    "info" : "MethodDeclaration[15079-15198]:MethodDeclaration[15079-15198]"
  }, {
    "left" : "class : DiscoverEnumsAndTypedefs",
    "right" : "class : DiscoverEnumsAndTypedefs",
    "info" : "TypeDeclaration[15202-16591]:TypeDeclaration[15202-16591]"
  }, {
    "left" : "registry",
    "right" : "registry",
    "info" : "FieldDeclaration[15301-15339]:FieldDeclaration[15301-15339]"
  }, {
    "left" : "package DiscoverEnumsAndTypedefs(registry )",
    "right" : "package DiscoverEnumsAndTypedefs(registry )",
    "info" : "MethodDeclaration[15345-15434]:MethodDeclaration[15345-15434]"
  }, {
    "left" : "public visit(t , node , parent ) : void",
    "right" : "public visit(t , node , parent ) : void",
    "info" : "MethodDeclaration[15440-16165]:MethodDeclaration[15440-16165]"
  }, {
    "left" : "private identifyNameNode(nameNode , info ) : void",
    "right" : "private identifyNameNode(nameNode , info ) : void",
    "info" : "MethodDeclaration[16171-16587]:MethodDeclaration[16171-16587]"
  }, {
    "left" : "private getNativeType(nativeType ) : ",
    "right" : "private getNativeType(nativeType ) : ",
    "info" : "MethodDeclaration[16595-16705]:MethodDeclaration[16595-16705]"
  }, {
    "left" : "class : AbstractScopeBuilder",
    "right" : "class : AbstractScopeBuilder",
    "info" : "TypeDeclaration[16709-69654]:TypeDeclaration[16709-69743]"
  }, {
    "left" : "scope",
    "right" : "scope",
    "info" : "FieldDeclaration[16820-16892]:FieldDeclaration[16820-16892]"
  }, {
    "left" : "deferredSetTypes",
    "right" : "deferredSetTypes",
    "info" : "FieldDeclaration[16898-16982]:FieldDeclaration[16898-16982]"
  }, {
    "left" : "nonExternFunctions",
    "right" : "nonExternFunctions",
    "info" : "FieldDeclaration[16988-17142]:FieldDeclaration[16988-17142]"
  }, {
    "left" : "lentObjectLiterals",
    "right" : "lentObjectLiterals",
    "info" : "FieldDeclaration[17148-17604]:FieldDeclaration[17148-17604]"
  }, {
    "left" : "stubDeclarations",
    "right" : "stubDeclarations",
    "info" : "FieldDeclaration[17610-17864]:FieldDeclaration[17610-17864]"
  }, {
    "left" : "sourceName",
    "right" : "sourceName",
    "info" : "FieldDeclaration[17870-17965]:FieldDeclaration[17870-17965]"
  }, {
    "left" : "inputId",
    "right" : "inputId",
    "info" : "FieldDeclaration[17971-18051]:FieldDeclaration[17971-18051]"
  }, {
    "left" : "private AbstractScopeBuilder(scope )",
    "right" : "private AbstractScopeBuilder(scope )",
    "info" : "MethodDeclaration[18057-18132]:MethodDeclaration[18057-18132]"
  }, {
    "left" : "package setDeferredType(node , type ) : void",
    "right" : "package setDeferredType(node , type ) : void",
    "info" : "MethodDeclaration[18138-18251]:MethodDeclaration[18138-18251]"
  }, {
    "left" : "public resolveTypes() : void",
    "right" : "public resolveTypes() : void",
    "info" : "MethodDeclaration[18257-18778]:MethodDeclaration[18257-18778]"
  }, {
    "left" : "public shouldTraverse(t , n , parent ) : boolean",
    "right" : "public shouldTraverse(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[18784-19816]:MethodDeclaration[18784-19816]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[19822-21552]:MethodDeclaration[19822-21552]"
  }, {
    "left" : "private attachLiteralTypes(n ) : void",
    "right" : "private attachLiteralTypes(n ) : void",
    "info" : "MethodDeclaration[21558-22746]:MethodDeclaration[21558-22746]"
  }, {
    "left" : "private defineObjectLiteral(objectLit ) : void",
    "right" : "private defineObjectLiteral(objectLit ) : void",
    "info" : "MethodDeclaration[22752-24391]:MethodDeclaration[22752-24391]"
  }, {
    "left" : "package processObjectLitProperties(objLit , objLitType , declareOnOwner boolean) : void",
    "right" : "package processObjectLitProperties(objLit , objLitType , declareOnOwner boolean) : void",
    "info" : "MethodDeclaration[24397-26070]:MethodDeclaration[24397-26070]"
  }, {
    "left" : "private getDeclaredTypeInAnnotation(node , info ) : ",
    "right" : "private getDeclaredTypeInAnnotation(node , info ) : ",
    "info" : "MethodDeclaration[26076-27664]:MethodDeclaration[26076-27664]"
  }, {
    "left" : "package assertDefinitionNode(n , type int) : void",
    "right" : "package assertDefinitionNode(n , type int) : void",
    "info" : "MethodDeclaration[27670-27970]:MethodDeclaration[27670-27970]"
  }, {
    "left" : "package defineCatch(n ) : void",
    "right" : "package defineCatch(n ) : void",
    "info" : "MethodDeclaration[27976-28261]:MethodDeclaration[27976-28261]"
  }, {
    "left" : "package defineVar(n ) : void",
    "right" : "package defineVar(n ) : void",
    "info" : "MethodDeclaration[28267-28852]:MethodDeclaration[28267-28852]"
  }, {
    "left" : "package defineFunctionLiteral(n ) : void",
    "right" : "package defineFunctionLiteral(n ) : void",
    "info" : "MethodDeclaration[28858-29746]:MethodDeclaration[28858-29746]"
  }, {
    "left" : "private defineName(name , var , info ) : void",
    "right" : "private defineName(name , var , info ) : void",
    "info" : "MethodDeclaration[29752-30460]:MethodDeclaration[29752-30460]"
  }, {
    "left" : "private shouldUseFunctionLiteralType(type , info , lValue ) : boolean",
    "right" : "private shouldUseFunctionLiteralType(type , info , lValue ) : boolean",
    "info" : "MethodDeclaration[30466-31120]:MethodDeclaration[30466-31120]"
  }, {
    "left" : "private createFunctionTypeFromNodes(rValue , name , info , lvalueNode ) : ",
    "right" : "private createFunctionTypeFromNodes(rValue , name , info , lvalueNode ) : ",
    "info" : "MethodDeclaration[31126-36710]:MethodDeclaration[31126-36710]"
  }, {
    "left" : "private getPrototypeOwnerType(ownerType ) : ",
    "right" : "private getPrototypeOwnerType(ownerType ) : ",
    "info" : "MethodDeclaration[36716-36928]:MethodDeclaration[36716-36928]"
  }, {
    "left" : "private findOverriddenFunction(ownerType , propName , typeMap ) : ",
    "right" : "private findOverriddenFunction(ownerType , propName , typeMap ) : ",
    "info" : "MethodDeclaration[36934-38096]:MethodDeclaration[36934-38096]"
  }, {
    "left" : "private createEnumTypeFromNodes(rValue , name , info , lValueNode ) : ",
    "right" : "private createEnumTypeFromNodes(rValue , name , info , lValueNode ) : ",
    "info" : "MethodDeclaration[38102-40422]:MethodDeclaration[38102-40422]"
  }, {
    "left" : "private defineSlot(name , parent , type ) : void",
    "right" : "private defineSlot(name , parent , type ) : void",
    "info" : "MethodDeclaration[40428-40952]:MethodDeclaration[40428-40952]"
  }, {
    "left" : "package defineSlot(n , parent , type , inferred boolean) : void",
    "right" : "package defineSlot(n , parent , type , inferred boolean) : void",
    "info" : "MethodDeclaration[40958-42136]:MethodDeclaration[40958-42136]"
  }, {
    "left" : "package defineSlot(n , parent , variableName , type , inferred boolean) : void",
    "right" : "package defineSlot(n , parent , variableName , type , inferred boolean) : void",
    "info" : "MethodDeclaration[42143-46415]:MethodDeclaration[42143-46415]"
  }, {
    "left" : "private finishConstructorDefinition(n , variableName , fnType , scopeToDeclareIn , input , newVar ) : void",
    "right" : "private finishConstructorDefinition(n , variableName , fnType , scopeToDeclareIn , input , newVar ) : void",
    "info" : "MethodDeclaration[46421-48355]:MethodDeclaration[46421-48355]"
  }, {
    "left" : "private isQnameRootedInGlobalScope(n ) : boolean",
    "right" : "private isQnameRootedInGlobalScope(n ) : boolean",
    "info" : "MethodDeclaration[48361-48601]:MethodDeclaration[48361-48601]"
  }, {
    "left" : "private getQnameRootScope(n ) : ",
    "right" : "private getQnameRootScope(n ) : ",
    "info" : "MethodDeclaration[48607-48954]:MethodDeclaration[48607-48954]"
  }, {
    "left" : "private getDeclaredType(info , lValue , rValue ) : ",
    "right" : "private getDeclaredType(info , lValue , rValue ) : ",
    "info" : "MethodDeclaration[48960-51645]:MethodDeclaration[48960-51645]"
  }, {
    "left" : "private getFunctionType(v ) : ",
    "right" : "private getFunctionType(v ) : ",
    "info" : "MethodDeclaration[51651-51862]:MethodDeclaration[51651-51862]"
  }, {
    "left" : "private checkForCallingConventionDefiningCalls(n , delegateCallingConventions ...) : void",
    "right" : "private checkForCallingConventionDefiningCalls(n , delegateCallingConventions ...) : void",
    "info" : "MethodDeclaration[51868-52183]:MethodDeclaration[51868-52183]"
  }, {
    "left" : "private checkForClassDefiningCalls(t , n ) : void",
    "right" : "private checkForClassDefiningCalls(t , n ) : void",
    "info" : "MethodDeclaration[52189-55395]:MethodDeclaration[52189-55395]"
  }, {
    "left" : "private applyDelegateRelationship(delegateRelationship ) : void",
    "right" : "private applyDelegateRelationship(delegateRelationship ) : void",
    "info" : "MethodDeclaration[55401-57318]:MethodDeclaration[55401-57318]"
  }, {
    "left" : "package maybeDeclareQualifiedName(t , info , n , parent , rhsValue ) : void",
    "right" : "package maybeDeclareQualifiedName(t , info , n , parent , rhsValue ) : void",
    "info" : "MethodDeclaration[57324-62398]:MethodDeclaration[57324-62398]"
  }, {
    "left" : "private isQualifiedNameInferred(qName , n , info , rhsValue , valueType ) : boolean",
    "right" : "private isQualifiedNameInferred(qName , n , info , rhsValue , valueType ) : boolean",
    "info" : "MethodDeclaration[62404-65008]:MethodDeclaration[62404-65097]"
  }, {
    "left" : "private isConstantSymbol(info , node ) : boolean",
    "right" : "private isConstantSymbol(info , node ) : boolean",
    "info" : "MethodDeclaration[65014-65542]:MethodDeclaration[65103-65631]"
  }, {
    "left" : "private getObjectSlot(slotName ) : ",
    "right" : "private getObjectSlot(slotName ) : ",
    "info" : "MethodDeclaration[65548-66096]:MethodDeclaration[65637-66185]"
  }, {
    "left" : "package resolveStubDeclarations() : void",
    "right" : "package resolveStubDeclarations() : void",
    "info" : "MethodDeclaration[66102-67334]:MethodDeclaration[66191-67423]"
  }, {
    "left" : "class : CollectProperties",
    "right" : "class : CollectProperties",
    "info" : "TypeDeclaration[67340-69625]:TypeDeclaration[67429-69714]"
  }, {
    "left" : "thisType",
    "right" : "thisType",
    "info" : "FieldDeclaration[67561-67591]:FieldDeclaration[67650-67680]"
  }, {
    "left" : "package CollectProperties(thisType )",
    "right" : "package CollectProperties(thisType )",
    "info" : "MethodDeclaration[67599-67677]:MethodDeclaration[67688-67766]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[67685-68162]:MethodDeclaration[67774-68251]"
  }, {
    "left" : "private maybeCollectMember(member , nodeWithJsDocInfo , value ) : void",
    "right" : "private maybeCollectMember(member , nodeWithJsDocInfo , value ) : void",
    "info" : "MethodDeclaration[68170-69619]:MethodDeclaration[68259-69708]"
  }, {
    "left" : "class : StubDeclaration",
    "right" : "class : StubDeclaration",
    "info" : "TypeDeclaration[69658-70047]:TypeDeclaration[69747-70136]"
  }, {
    "left" : "node",
    "right" : "node",
    "info" : "FieldDeclaration[69773-69797]:FieldDeclaration[69862-69886]"
  }, {
    "left" : "isExtern",
    "right" : "isExtern",
    "info" : "FieldDeclaration[69802-69833]:FieldDeclaration[69891-69922]"
  }, {
    "left" : "ownerName",
    "right" : "ownerName",
    "info" : "FieldDeclaration[69838-69869]:FieldDeclaration[69927-69958]"
  }, {
    "left" : "private StubDeclaration(node , isExtern boolean, ownerName )",
    "right" : "private StubDeclaration(node , isExtern boolean, ownerName )",
    "info" : "MethodDeclaration[69875-70043]:MethodDeclaration[69964-70132]"
  }, {
    "left" : "class : GlobalScopeBuilder",
    "right" : "class : GlobalScopeBuilder",
    "info" : "TypeDeclaration[70051-72247]:TypeDeclaration[70140-72336]"
  }, {
    "left" : "private GlobalScopeBuilder(scope )",
    "right" : "private GlobalScopeBuilder(scope )",
    "info" : "MethodDeclaration[70237-70304]:MethodDeclaration[70326-70393]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[70310-70884]:MethodDeclaration[70399-70973]"
  }, {
    "left" : "package maybeDeclareQualifiedName(t , info , n , parent , rhsValue ) : void",
    "right" : "package maybeDeclareQualifiedName(t , info , n , parent , rhsValue ) : void",
    "info" : "MethodDeclaration[70890-71132]:MethodDeclaration[70979-71221]"
  }, {
    "left" : "private checkForTypedef(t , candidate , info ) : void",
    "right" : "private checkForTypedef(t , candidate , info ) : void",
    "info" : "MethodDeclaration[71138-72243]:MethodDeclaration[71227-72332]"
  }, {
    "left" : "class : LocalScopeBuilder",
    "right" : "class : LocalScopeBuilder",
    "info" : "TypeDeclaration[72277-76631]:TypeDeclaration[72366-76720]"
  }, {
    "left" : "private LocalScopeBuilder(scope )",
    "right" : "private LocalScopeBuilder(scope )",
    "info" : "MethodDeclaration[72452-72585]:MethodDeclaration[72541-72674]"
  }, {
    "left" : "package build() : void",
    "right" : "package build() : void",
    "info" : "MethodDeclaration[72591-73396]:MethodDeclaration[72680-73485]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[73402-73953]:MethodDeclaration[73491-74042]"
  }, {
    "left" : "private handleFunctionInputs(fnNode ) : void",
    "right" : "private handleFunctionInputs(fnNode ) : void",
    "info" : "MethodDeclaration[73959-74824]:MethodDeclaration[74048-74913]"
  }, {
    "left" : "private declareArguments(functionNode ) : void",
    "right" : "private declareArguments(functionNode ) : void",
    "info" : "MethodDeclaration[74830-76603]:MethodDeclaration[74919-76692]"
  }, {
    "left" : "class : FirstOrderFunctionAnalyzer",
    "right" : "class : FirstOrderFunctionAnalyzer",
    "info" : "TypeDeclaration[76660-79597]:TypeDeclaration[76749-79686]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[76928-76968]:FieldDeclaration[77017-77057]"
  }, {
    "left" : "data",
    "right" : "data",
    "info" : "FieldDeclaration[76973-77023]:FieldDeclaration[77062-77112]"
  }, {
    "left" : "package FirstOrderFunctionAnalyzer(compiler , outParam )",
    "right" : "package FirstOrderFunctionAnalyzer(compiler , outParam )",
    "info" : "MethodDeclaration[77029-77200]:MethodDeclaration[77118-77289]"
  }, {
    "left" : "public process(externs , root ) : void",
    "right" : "public process(externs , root ) : void",
    "info" : "MethodDeclaration[77206-77473]:MethodDeclaration[77295-77562]"
  }, {
    "left" : "public enterScope(t ) : void",
    "right" : "public enterScope(t ) : void",
    "info" : "MethodDeclaration[77479-77660]:MethodDeclaration[77568-77749]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[77666-79593]:MethodDeclaration[77755-79682]"
  }, {
    "left" : "private getFunctionAnalysisResults(n ) : ",
    "right" : "private getFunctionAnalysisResults(n ) : ",
    "info" : "MethodDeclaration[79601-79888]:MethodDeclaration[79690-79977]"
  } ],
  "mappings" : [
 {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[5317-5322]:Modifier[5317-5322]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[5323-5328]:TYPE_DECLARATION_KIND[5323-5328]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7614-7621]:Modifier[7614-7621]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7622-7627]:TYPE_DECLARATION_KIND[7622-7627]"
  }, {
    "left" : "DeferredSetType",
    "right" : "DeferredSetType",
    "info" : "SimpleName[7695-7710]:SimpleName[7695-7710]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[7711-7720]:SingleVariableDeclaration[7711-7720]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[7722-7733]:SingleVariableDeclaration[7722-7733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7735-8032]:Block[7735-8032]"
  }, {
    "left" : "Preconditions.checkNotNull(node);",
    "right" : "Preconditions.checkNotNull(node);",
    "info" : "ExpressionStatement[7743-7776]:ExpressionStatement[7743-7776]"
  }, {
    "left" : "Preconditions.checkNotNull(type);",
    "right" : "Preconditions.checkNotNull(type);",
    "info" : "ExpressionStatement[7783-7816]:ExpressionStatement[7783-7816]"
  }, {
    "left" : "this.node = node;",
    "right" : "this.node = node;",
    "info" : "ExpressionStatement[7823-7840]:ExpressionStatement[7823-7840]"
  }, {
    "left" : "this.type = type;",
    "right" : "this.type = type;",
    "info" : "ExpressionStatement[7847-7864]:ExpressionStatement[7847-7864]"
  }, {
    "left" : "node.setJSType(type);",
    "right" : "node.setJSType(type);",
    "info" : "ExpressionStatement[8005-8026]:ExpressionStatement[8005-8026]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8038-8042]:PrimitiveType[8038-8042]"
  }, {
    "left" : "resolve",
    "right" : "resolve",
    "info" : "SimpleName[8043-8050]:SimpleName[8043-8050]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[8051-8062]:SingleVariableDeclaration[8051-8062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8064-8140]:Block[8064-8140]"
  }, {
    "left" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
    "right" : "node.setJSType(type.resolve(typeParsingErrorReporter, scope));",
    "info" : "ExpressionStatement[8072-8134]:ExpressionStatement[8072-8134]"
  }, {
    "left" : "TypedScopeCreator",
    "right" : "TypedScopeCreator",
    "info" : "SimpleName[8148-8165]:SimpleName[8148-8165]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[8166-8191]:SingleVariableDeclaration[8166-8191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8193-8250]:Block[8193-8250]"
  }, {
    "left" : "this(compiler, compiler.getCodingConvention());",
    "right" : "this(compiler, compiler.getCodingConvention());",
    "info" : "ConstructorInvocation[8199-8246]:ConstructorInvocation[8199-8246]"
  }, {
    "left" : "TypedScopeCreator",
    "right" : "TypedScopeCreator",
    "info" : "SimpleName[8254-8271]:SimpleName[8254-8271]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[8272-8297]:SingleVariableDeclaration[8272-8297]"
  }, {
    "left" : "CodingConvention codingConvention",
    "right" : "CodingConvention codingConvention",
    "info" : "SingleVariableDeclaration[8305-8338]:SingleVariableDeclaration[8305-8338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8340-8663]:Block[8340-8663]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[8346-8371]:ExpressionStatement[8346-8371]"
  }, {
    "left" : "this.validator = compiler.getTypeValidator();",
    "right" : "this.validator = compiler.getTypeValidator();",
    "info" : "ExpressionStatement[8376-8421]:ExpressionStatement[8376-8421]"
  }, {
    "left" : "this.codingConvention = codingConvention;",
    "right" : "this.codingConvention = codingConvention;",
    "info" : "ExpressionStatement[8426-8467]:ExpressionStatement[8426-8467]"
  }, {
    "left" : "this.typeRegistry = compiler.getTypeRegistry();",
    "right" : "this.typeRegistry = compiler.getTypeRegistry();",
    "info" : "ExpressionStatement[8472-8519]:ExpressionStatement[8472-8519]"
  }, {
    "left" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
    "right" : "this.typeParsingErrorReporter = typeRegistry.getErrorReporter();",
    "info" : "ExpressionStatement[8524-8588]:ExpressionStatement[8524-8588]"
  }, {
    "left" : "this.unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
    "right" : "this.unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[8593-8659]:ExpressionStatement[8593-8659]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8804-8813]:MarkerAnnotation[8804-8813]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8816-8822]:Modifier[8816-8822]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[8823-8828]:SimpleType[8823-8828]"
  }, {
    "left" : "createScope",
    "right" : "createScope",
    "info" : "SimpleName[8829-8840]:SimpleName[8829-8840]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[8841-8850]:SingleVariableDeclaration[8841-8850]"
  }, {
    "left" : "Scope parent",
    "right" : "Scope parent",
    "info" : "SingleVariableDeclaration[8852-8864]:SingleVariableDeclaration[8852-8864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8866-11114]:Block[8866-11114]"
  }, {
    "left" : "Scope newScope = null;",
    "right" : "Scope newScope = null;",
    "info" : "VariableDeclarationStatement[9061-9083]:VariableDeclarationStatement[9061-9083]"
  }, {
    "left" : "AbstractScopeBuilder scopeBuilder = null;",
    "right" : "AbstractScopeBuilder scopeBuilder = null;",
    "info" : "VariableDeclarationStatement[9088-9129]:VariableDeclarationStatement[9088-9129]"
  }, {
    "left" : "if (parent == null)",
    "right" : "if (parent == null)",
    "info" : "IfStatement[9134-10169]:IfStatement[9134-10169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9154-9964]:Block[9154-9964]"
  }, {
    "left" : "JSType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
    "right" : "JSType globalThis =\n          typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
    "info" : "VariableDeclarationStatement[9162-9251]:VariableDeclarationStatement[9162-9251]"
  }, {
    "left" : "root.setJSType(globalThis);",
    "right" : "root.setJSType(globalThis);",
    "info" : "ExpressionStatement[9359-9386]:ExpressionStatement[9359-9386]"
  }, {
    "left" : "root.getFirstChild().setJSType(globalThis);",
    "right" : "root.getFirstChild().setJSType(globalThis);",
    "info" : "ExpressionStatement[9393-9436]:ExpressionStatement[9393-9436]"
  }, {
    "left" : "root.getLastChild().setJSType(globalThis);",
    "right" : "root.getLastChild().setJSType(globalThis);",
    "info" : "ExpressionStatement[9443-9485]:ExpressionStatement[9443-9485]"
  }, {
    "left" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
    "right" : "(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))\n          .process(root.getFirstChild(), root.getLastChild());",
    "info" : "ExpressionStatement[9551-9681]:ExpressionStatement[9551-9681]"
  }, {
    "left" : "newScope = createInitialScope(root);",
    "right" : "newScope = createInitialScope(root);",
    "info" : "ExpressionStatement[9740-9776]:ExpressionStatement[9740-9776]"
  }, {
    "left" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
    "right" : "GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);",
    "info" : "VariableDeclarationStatement[9784-9857]:VariableDeclarationStatement[9784-9857]"
  }, {
    "left" : "scopeBuilder = globalScopeBuilder;",
    "right" : "scopeBuilder = globalScopeBuilder;",
    "info" : "ExpressionStatement[9864-9898]:ExpressionStatement[9864-9898]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
    "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
    "info" : "ExpressionStatement[9905-9958]:ExpressionStatement[9905-9958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9970-10169]:Block[9970-10169]"
  }, {
    "left" : "newScope = new Scope(parent, root);",
    "right" : "newScope = new Scope(parent, root);",
    "info" : "ExpressionStatement[9978-10013]:ExpressionStatement[9978-10013]"
  }, {
    "left" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
    "right" : "LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);",
    "info" : "VariableDeclarationStatement[10020-10090]:VariableDeclarationStatement[10020-10090]"
  }, {
    "left" : "scopeBuilder = localScopeBuilder;",
    "right" : "scopeBuilder = localScopeBuilder;",
    "info" : "ExpressionStatement[10097-10130]:ExpressionStatement[10097-10130]"
  }, {
    "left" : "localScopeBuilder.build();",
    "right" : "localScopeBuilder.build();",
    "info" : "ExpressionStatement[10137-10163]:ExpressionStatement[10137-10163]"
  }, {
    "left" : "scopeBuilder.resolveStubDeclarations();",
    "right" : "scopeBuilder.resolveStubDeclarations();",
    "info" : "ExpressionStatement[10175-10214]:ExpressionStatement[10175-10214]"
  }, {
    "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
    "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
    "info" : "EnhancedForStatement[10382-10850]:EnhancedForStatement[10382-10850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10440-10850]:Block[10440-10850]"
  }, {
    "left" : "JSType type = functionNode.getJSType();",
    "right" : "JSType type = functionNode.getJSType();",
    "info" : "VariableDeclarationStatement[10448-10487]:VariableDeclarationStatement[10448-10487]"
  }, {
    "left" : "if (type != null && type.isFunctionType())",
    "right" : "if (type != null && type.isFunctionType())",
    "info" : "IfStatement[10494-10844]:IfStatement[10494-10844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10537-10844]:Block[10537-10844]"
  }, {
    "left" : "FunctionType fnType = type.toMaybeFunctionType();",
    "right" : "FunctionType fnType = type.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[10547-10596]:VariableDeclarationStatement[10547-10596]"
  }, {
    "left" : "JSType fnThisType = fnType.getTypeOfThis();",
    "right" : "JSType fnThisType = fnType.getTypeOfThis();",
    "info" : "VariableDeclarationStatement[10605-10648]:VariableDeclarationStatement[10605-10648]"
  }, {
    "left" : "if (!fnThisType.isUnknownType())",
    "right" : "if (!fnThisType.isUnknownType())",
    "info" : "IfStatement[10657-10836]:IfStatement[10657-10836]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10690-10836]:Block[10690-10836]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
    "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n              scopeBuilder.new CollectProperties(fnThisType));",
    "info" : "ExpressionStatement[10702-10826]:ExpressionStatement[10702-10826]"
  }, {
    "left" : "if (parent == null)",
    "right" : "if (parent == null)",
    "info" : "IfStatement[10856-11044]:IfStatement[10856-11044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10876-11044]:Block[10876-11044]"
  }, {
    "left" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
    "right" : "codingConvention.defineDelegateProxyPrototypeProperties(\n          typeRegistry, newScope, delegateProxyPrototypes,\n          delegateCallingConventions);",
    "info" : "ExpressionStatement[10884-11038]:ExpressionStatement[10884-11038]"
  }, {
    "left" : "newScope.setTypeResolver(scopeBuilder);",
    "right" : "newScope.setTypeResolver(scopeBuilder);",
    "info" : "ExpressionStatement[11050-11089]:ExpressionStatement[11050-11089]"
  }, {
    "left" : "return newScope;",
    "right" : "return newScope;",
    "info" : "ReturnStatement[11094-11110]:ReturnStatement[11094-11110]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11403-11407]:PrimitiveType[11403-11407]"
  }, {
    "left" : "patchGlobalScope",
    "right" : "patchGlobalScope",
    "info" : "SimpleName[11408-11424]:SimpleName[11408-11424]"
  }, {
    "left" : "Scope globalScope",
    "right" : "Scope globalScope",
    "info" : "SingleVariableDeclaration[11425-11442]:SingleVariableDeclaration[11425-11442]"
  }, {
    "left" : "Node scriptRoot",
    "right" : "Node scriptRoot",
    "info" : "SingleVariableDeclaration[11444-11459]:SingleVariableDeclaration[11444-11459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11461-13086]:Block[11461-13086]"
  }, {
    "left" : "Preconditions.checkState(scriptRoot.isScript());",
    "right" : "Preconditions.checkState(scriptRoot.isScript());",
    "info" : "ExpressionStatement[11616-11664]:ExpressionStatement[11616-11664]"
  }, {
    "left" : "Preconditions.checkNotNull(globalScope);",
    "right" : "Preconditions.checkNotNull(globalScope);",
    "info" : "ExpressionStatement[11669-11709]:ExpressionStatement[11669-11709]"
  }, {
    "left" : "Preconditions.checkState(globalScope.isGlobal());",
    "right" : "Preconditions.checkState(globalScope.isGlobal());",
    "info" : "ExpressionStatement[11714-11763]:ExpressionStatement[11714-11763]"
  }, {
    "left" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
    "right" : "String scriptName = NodeUtil.getSourceName(scriptRoot);",
    "info" : "VariableDeclarationStatement[11769-11824]:VariableDeclarationStatement[11769-11824]"
  }, {
    "left" : "Preconditions.checkNotNull(scriptName);",
    "right" : "Preconditions.checkNotNull(scriptName);",
    "info" : "ExpressionStatement[11829-11868]:ExpressionStatement[11829-11868]"
  }, {
    "left" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
    "right" : "for (Node node : ImmutableList.copyOf(functionAnalysisResults.keySet()))",
    "info" : "EnhancedForStatement[11873-12068]:EnhancedForStatement[11873-12068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11946-12068]:Block[11946-12068]"
  }, {
    "left" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
    "right" : "if (scriptName.equals(NodeUtil.getSourceName(node)))",
    "info" : "IfStatement[11954-12062]:IfStatement[11954-12062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12007-12062]:Block[12007-12062]"
  }, {
    "left" : "functionAnalysisResults.remove(node);",
    "right" : "functionAnalysisResults.remove(node);",
    "info" : "ExpressionStatement[12017-12054]:ExpressionStatement[12017-12054]"
  }, {
    "left" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
    "right" : "(new FirstOrderFunctionAnalyzer(\n        compiler, functionAnalysisResults)).process(null, scriptRoot);",
    "info" : "ExpressionStatement[12074-12177]:ExpressionStatement[12074-12177]"
  }, {
    "left" : "Iterator<Var> varIter = globalScope.getVars();",
    "right" : "Iterator<Var> varIter = globalScope.getVars();",
    "info" : "VariableDeclarationStatement[12480-12526]:VariableDeclarationStatement[12480-12526]"
  }, {
    "left" : "List<Var> varsToRemove = Lists.newArrayList();",
    "right" : "List<Var> varsToRemove = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[12531-12577]:VariableDeclarationStatement[12531-12577]"
  }, {
    "left" : "while (varIter.hasNext())",
    "right" : "while (varIter.hasNext())",
    "info" : "WhileStatement[12582-12746]:WhileStatement[12582-12746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12608-12746]:Block[12608-12746]"
  }, {
    "left" : "Var oldVar = varIter.next();",
    "right" : "Var oldVar = varIter.next();",
    "info" : "VariableDeclarationStatement[12616-12644]:VariableDeclarationStatement[12616-12644]"
  }, {
    "left" : "if (scriptName.equals(oldVar.getInputName()))",
    "right" : "if (scriptName.equals(oldVar.getInputName()))",
    "info" : "IfStatement[12651-12740]:IfStatement[12651-12740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12697-12740]:Block[12697-12740]"
  }, {
    "left" : "varsToRemove.add(oldVar);",
    "right" : "varsToRemove.add(oldVar);",
    "info" : "ExpressionStatement[12707-12732]:ExpressionStatement[12707-12732]"
  }, {
    "left" : "for (Var var : varsToRemove)",
    "right" : "for (Var var : varsToRemove)",
    "info" : "EnhancedForStatement[12751-12901]:EnhancedForStatement[12751-12901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12780-12901]:Block[12780-12901]"
  }, {
    "left" : "globalScope.undeclare(var);",
    "right" : "globalScope.undeclare(var);",
    "info" : "ExpressionStatement[12788-12815]:ExpressionStatement[12788-12815]"
  }, {
    "left" : "globalScope.getTypeOfThis().toObjectType().removeProperty(var.getName());",
    "right" : "globalScope.getTypeOfThis().toObjectType().removeProperty(var.getName());",
    "info" : "ExpressionStatement[12822-12895]:ExpressionStatement[12822-12895]"
  }, {
    "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
    "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(globalScope);",
    "info" : "VariableDeclarationStatement[12948-13018]:VariableDeclarationStatement[12948-13018]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
    "right" : "NodeTraversal.traverse(compiler, scriptRoot, scopeBuilder);",
    "info" : "ExpressionStatement[13023-13082]:ExpressionStatement[13023-13082]"
  }, {
    "left" : "@VisibleForTesting",
    "right" : "@VisibleForTesting",
    "info" : "MarkerAnnotation[13218-13236]:MarkerAnnotation[13218-13236]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[13239-13244]:SimpleType[13239-13244]"
  }, {
    "left" : "createInitialScope",
    "right" : "createInitialScope",
    "info" : "SimpleName[13245-13263]:SimpleName[13245-13263]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[13264-13273]:SingleVariableDeclaration[13264-13273]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13275-14603]:Block[13275-14603]"
  }, {
    "left" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
    "right" : "NodeTraversal.traverse(\n        compiler, root, new DiscoverEnumsAndTypedefs(typeRegistry));",
    "info" : "ExpressionStatement[13282-13374]:ExpressionStatement[13282-13374]"
  }, {
    "left" : "Scope s = Scope.createGlobalScope(root);",
    "right" : "Scope s = Scope.createGlobalScope(root);",
    "info" : "VariableDeclarationStatement[13380-13420]:VariableDeclarationStatement[13380-13420]"
  }, {
    "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13425-13475]:ExpressionStatement[13425-13475]"
  }, {
    "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13480-13539]:ExpressionStatement[13480-13539]"
  }, {
    "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13544-13593]:ExpressionStatement[13544-13593]"
  }, {
    "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13598-13648]:ExpressionStatement[13598-13648]"
  }, {
    "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13653-13708]:ExpressionStatement[13653-13708]"
  }, {
    "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13713-13766]:ExpressionStatement[13713-13766]"
  }, {
    "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13771-13829]:ExpressionStatement[13771-13829]"
  }, {
    "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13834-13885]:ExpressionStatement[13834-13885]"
  }, {
    "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13890-13946]:ExpressionStatement[13890-13946]"
  }, {
    "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[13951-14011]:ExpressionStatement[13951-14011]"
  }, {
    "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[14016-14067]:ExpressionStatement[14016-14067]"
  }, {
    "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[14072-14130]:ExpressionStatement[14072-14130]"
  }, {
    "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[14135-14192]:ExpressionStatement[14135-14192]"
  }, {
    "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[14197-14252]:ExpressionStatement[14197-14252]"
  }, {
    "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
    "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
    "info" : "ExpressionStatement[14257-14311]:ExpressionStatement[14257-14311]"
  }, {
    "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
    "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
    "info" : "ExpressionStatement[14316-14366]:ExpressionStatement[14316-14366]"
  }, {
    "left" : "declareNativeValueType(s, \"ActiveXObject\", FUNCTION_INSTANCE_TYPE);",
    "right" : "declareNativeValueType(s, \"ActiveXObject\", FUNCTION_INSTANCE_TYPE);",
    "info" : "ExpressionStatement[14517-14584]:ExpressionStatement[14517-14584]"
  }, {
    "left" : "return s;",
    "right" : "return s;",
    "info" : "ReturnStatement[14590-14599]:ReturnStatement[14590-14599]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14607-14614]:Modifier[14607-14614]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14615-14619]:PrimitiveType[14615-14619]"
  }, {
    "left" : "declareNativeFunctionType",
    "right" : "declareNativeFunctionType",
    "info" : "SimpleName[14620-14645]:SimpleName[14620-14645]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[14646-14657]:SingleVariableDeclaration[14646-14657]"
  }, {
    "left" : "JSTypeNative tId",
    "right" : "JSTypeNative tId",
    "info" : "SingleVariableDeclaration[14659-14675]:SingleVariableDeclaration[14659-14675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14677-14911]:Block[14677-14911]"
  }, {
    "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
    "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
    "info" : "VariableDeclarationStatement[14683-14740]:VariableDeclarationStatement[14683-14740]"
  }, {
    "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
    "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
    "info" : "ExpressionStatement[14745-14813]:ExpressionStatement[14745-14813]"
  }, {
    "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
    "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
    "info" : "ExpressionStatement[14818-14907]:ExpressionStatement[14818-14907]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14915-14922]:Modifier[14915-14922]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14923-14927]:PrimitiveType[14923-14927]"
  }, {
    "left" : "declareNativeValueType",
    "right" : "declareNativeValueType",
    "info" : "SimpleName[14928-14950]:SimpleName[14928-14950]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[14951-14962]:SingleVariableDeclaration[14951-14962]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[14964-14975]:SingleVariableDeclaration[14964-14975]"
  }, {
    "left" : "JSTypeNative tId",
    "right" : "JSTypeNative tId",
    "info" : "SingleVariableDeclaration[14983-14999]:SingleVariableDeclaration[14983-14999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15001-15075]:Block[15001-15075]"
  }, {
    "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
    "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
    "info" : "ExpressionStatement[15007-15071]:ExpressionStatement[15007-15071]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15079-15086]:Modifier[15079-15086]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15087-15091]:PrimitiveType[15087-15091]"
  }, {
    "left" : "declareNativeType",
    "right" : "declareNativeType",
    "info" : "SimpleName[15092-15109]:SimpleName[15092-15109]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[15110-15121]:SingleVariableDeclaration[15110-15121]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[15123-15134]:SingleVariableDeclaration[15123-15134]"
  }, {
    "left" : "JSType t",
    "right" : "JSType t",
    "info" : "SingleVariableDeclaration[15136-15144]:SingleVariableDeclaration[15136-15144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15146-15198]:Block[15146-15198]"
  }, {
    "left" : "scope.declare(name, null, t, null, false);",
    "right" : "scope.declare(name, null, t, null, false);",
    "info" : "ExpressionStatement[15152-15194]:ExpressionStatement[15152-15194]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15202-15209]:Modifier[15202-15209]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15210-15216]:Modifier[15210-15216]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[15217-15222]:TYPE_DECLARATION_KIND[15217-15222]"
  }, {
    "left" : "DiscoverEnumsAndTypedefs",
    "right" : "DiscoverEnumsAndTypedefs",
    "info" : "SimpleName[15345-15369]:SimpleName[15345-15369]"
  }, {
    "left" : "JSTypeRegistry registry",
    "right" : "JSTypeRegistry registry",
    "info" : "SingleVariableDeclaration[15370-15393]:SingleVariableDeclaration[15370-15393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15395-15434]:Block[15395-15434]"
  }, {
    "left" : "this.registry = registry;",
    "right" : "this.registry = registry;",
    "info" : "ExpressionStatement[15403-15428]:ExpressionStatement[15403-15428]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[15440-15449]:MarkerAnnotation[15440-15449]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15454-15460]:Modifier[15454-15460]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15461-15465]:PrimitiveType[15461-15465]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[15466-15471]:SimpleName[15466-15471]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[15472-15487]:SingleVariableDeclaration[15472-15487]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[15489-15498]:SingleVariableDeclaration[15489-15498]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[15500-15511]:SingleVariableDeclaration[15500-15511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15513-16165]:Block[15513-16165]"
  }, {
    "left" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
    "right" : "switch (node.getType()) {\n        case Token.VAR:\n          for (Node child = node.getFirstChild();\n               child != null; child = child.getNext()) {\n            identifyNameNode(\n                child, NodeUtil.getBestJSDocInfo(child));\n          }\n          break;\n        case Token.EXPR_RESULT:\n          Node firstChild = node.getFirstChild();\n          if (firstChild.isAssign()) {\n            identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getJSDocInfo());\n          } else {\n            identifyNameNode(\n                firstChild, firstChild.getJSDocInfo());\n          }\n          break;\n      }",
    "info" : "SwitchStatement[15521-16159]:SwitchStatement[15521-16159]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[15555-15570]:SwitchCase[15555-15570]"
  }, {
    "left" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
    "right" : "for (Node child = node.getFirstChild();\n               child != null; child = child.getNext())",
    "info" : "ForStatement[15581-15777]:ForStatement[15581-15777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15676-15777]:Block[15676-15777]"
  }, {
    "left" : "identifyNameNode(\n                child, NodeUtil.getBestJSDocInfo(child));",
    "right" : "identifyNameNode(\n                child, NodeUtil.getBestJSDocInfo(child));",
    "info" : "ExpressionStatement[15690-15765]:ExpressionStatement[15690-15765]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[15788-15794]:BreakStatement[15788-15794]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[15803-15826]:SwitchCase[15803-15826]"
  }, {
    "left" : "Node firstChild = node.getFirstChild();",
    "right" : "Node firstChild = node.getFirstChild();",
    "info" : "VariableDeclarationStatement[15837-15876]:VariableDeclarationStatement[15837-15876]"
  }, {
    "left" : "if (firstChild.isAssign())",
    "right" : "if (firstChild.isAssign())",
    "info" : "IfStatement[15887-16134]:IfStatement[15887-16134]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15914-16029]:Block[15914-16029]"
  }, {
    "left" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getJSDocInfo());",
    "right" : "identifyNameNode(\n                firstChild.getFirstChild(), firstChild.getJSDocInfo());",
    "info" : "ExpressionStatement[15928-16017]:ExpressionStatement[15928-16017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16035-16134]:Block[16035-16134]"
  }, {
    "left" : "identifyNameNode(\n                firstChild, firstChild.getJSDocInfo());",
    "right" : "identifyNameNode(\n                firstChild, firstChild.getJSDocInfo());",
    "info" : "ExpressionStatement[16049-16122]:ExpressionStatement[16049-16122]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16145-16151]:BreakStatement[16145-16151]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16171-16178]:Modifier[16171-16178]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16179-16183]:PrimitiveType[16179-16183]"
  }, {
    "left" : "identifyNameNode",
    "right" : "identifyNameNode",
    "info" : "SimpleName[16184-16200]:SimpleName[16184-16200]"
  }, {
    "left" : "Node nameNode",
    "right" : "Node nameNode",
    "info" : "SingleVariableDeclaration[16210-16223]:SingleVariableDeclaration[16210-16223]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[16225-16239]:SingleVariableDeclaration[16225-16239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16241-16587]:Block[16241-16587]"
  }, {
    "left" : "if (nameNode.isQualifiedName())",
    "right" : "if (nameNode.isQualifiedName())",
    "info" : "IfStatement[16249-16581]:IfStatement[16249-16581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16281-16581]:Block[16281-16581]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[16291-16573]:IfStatement[16291-16573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16309-16573]:Block[16309-16573]"
  }, {
    "left" : "if (info.hasEnumParameterType())",
    "right" : "if (info.hasEnumParameterType())",
    "info" : "IfStatement[16321-16563]:IfStatement[16321-16563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16354-16442]:Block[16354-16442]"
  }, {
    "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
    "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
    "info" : "ExpressionStatement[16368-16430]:ExpressionStatement[16368-16430]"
  }, {
    "left" : "if (info.hasTypedefType())",
    "right" : "if (info.hasTypedefType())",
    "info" : "IfStatement[16448-16563]:IfStatement[16448-16563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16475-16563]:Block[16475-16563]"
  }, {
    "left" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
    "right" : "registry.identifyNonNullableName(nameNode.getQualifiedName());",
    "info" : "ExpressionStatement[16489-16551]:ExpressionStatement[16489-16551]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16595-16602]:Modifier[16595-16602]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[16603-16609]:SimpleType[16603-16609]"
  }, {
    "left" : "getNativeType",
    "right" : "getNativeType",
    "info" : "SimpleName[16610-16623]:SimpleName[16610-16623]"
  }, {
    "left" : "JSTypeNative nativeType",
    "right" : "JSTypeNative nativeType",
    "info" : "SingleVariableDeclaration[16624-16647]:SingleVariableDeclaration[16624-16647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16649-16705]:Block[16649-16705]"
  }, {
    "left" : "return typeRegistry.getNativeType(nativeType);",
    "right" : "return typeRegistry.getNativeType(nativeType);",
    "info" : "ReturnStatement[16655-16701]:ReturnStatement[16655-16701]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16709-16716]:Modifier[16709-16716]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[16717-16725]:Modifier[16717-16725]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[16726-16731]:TYPE_DECLARATION_KIND[16726-16731]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18057-18064]:Modifier[18057-18064]"
  }, {
    "left" : "AbstractScopeBuilder",
    "right" : "AbstractScopeBuilder",
    "info" : "SimpleName[18065-18085]:SimpleName[18065-18085]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[18086-18097]:SingleVariableDeclaration[18086-18097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18099-18132]:Block[18099-18132]"
  }, {
    "left" : "this.scope = scope;",
    "right" : "this.scope = scope;",
    "info" : "ExpressionStatement[18107-18126]:ExpressionStatement[18107-18126]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18138-18142]:PrimitiveType[18138-18142]"
  }, {
    "left" : "setDeferredType",
    "right" : "setDeferredType",
    "info" : "SimpleName[18143-18158]:SimpleName[18143-18158]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[18159-18168]:SingleVariableDeclaration[18159-18168]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[18170-18181]:SingleVariableDeclaration[18170-18181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18183-18251]:Block[18183-18251]"
  }, {
    "left" : "deferredSetTypes.add(new DeferredSetType(node, type));",
    "right" : "deferredSetTypes.add(new DeferredSetType(node, type));",
    "info" : "ExpressionStatement[18191-18245]:ExpressionStatement[18191-18245]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18257-18266]:MarkerAnnotation[18257-18266]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18271-18277]:Modifier[18271-18277]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18278-18282]:PrimitiveType[18278-18282]"
  }, {
    "left" : "resolveTypes",
    "right" : "resolveTypes",
    "info" : "SimpleName[18283-18295]:SimpleName[18283-18295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18298-18778]:Block[18298-18778]"
  }, {
    "left" : "for (DeferredSetType deferred : deferredSetTypes)",
    "right" : "for (DeferredSetType deferred : deferredSetTypes)",
    "info" : "EnhancedForStatement[18355-18447]:EnhancedForStatement[18355-18447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18405-18447]:Block[18405-18447]"
  }, {
    "left" : "deferred.resolve(scope);",
    "right" : "deferred.resolve(scope);",
    "info" : "ExpressionStatement[18415-18439]:ExpressionStatement[18415-18439]"
  }, {
    "left" : "Iterator<Var> vars = scope.getVars();",
    "right" : "Iterator<Var> vars = scope.getVars();",
    "info" : "VariableDeclarationStatement[18510-18547]:VariableDeclarationStatement[18510-18547]"
  }, {
    "left" : "while (vars.hasNext())",
    "right" : "while (vars.hasNext())",
    "info" : "WhileStatement[18554-18645]:WhileStatement[18554-18645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18577-18645]:Block[18577-18645]"
  }, {
    "left" : "vars.next().resolveType(typeParsingErrorReporter);",
    "right" : "vars.next().resolveType(typeParsingErrorReporter);",
    "info" : "ExpressionStatement[18587-18637]:ExpressionStatement[18587-18637]"
  }, {
    "left" : "typeRegistry.resolveTypesInScope(scope);",
    "right" : "typeRegistry.resolveTypesInScope(scope);",
    "info" : "ExpressionStatement[18732-18772]:ExpressionStatement[18732-18772]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18784-18793]:MarkerAnnotation[18784-18793]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18798-18804]:Modifier[18798-18804]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[18805-18810]:Modifier[18805-18810]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18811-18818]:PrimitiveType[18811-18818]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[18819-18833]:SimpleName[18819-18833]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[18834-18849]:SingleVariableDeclaration[18834-18849]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[18851-18857]:SingleVariableDeclaration[18851-18857]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[18859-18870]:SingleVariableDeclaration[18859-18870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18872-19816]:Block[18872-19816]"
  }, {
    "left" : "inputId = t.getInputId();",
    "right" : "inputId = t.getInputId();",
    "info" : "ExpressionStatement[18880-18905]:ExpressionStatement[18880-18905]"
  }, {
    "left" : "if (n.isFunction() ||\n          n.isScript())",
    "right" : "if (n.isFunction() ||\n          n.isScript())",
    "info" : "IfStatement[18912-19060]:IfStatement[18912-19060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18958-19060]:Block[18958-19060]"
  }, {
    "left" : "Preconditions.checkNotNull(inputId);",
    "right" : "Preconditions.checkNotNull(inputId);",
    "info" : "ExpressionStatement[18968-19004]:ExpressionStatement[18968-19004]"
  }, {
    "left" : "sourceName = NodeUtil.getSourceName(n);",
    "right" : "sourceName = NodeUtil.getSourceName(n);",
    "info" : "ExpressionStatement[19013-19052]:ExpressionStatement[19013-19052]"
  }, {
    "left" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
    "right" : "boolean descend = parent == null || !parent.isFunction() ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
    "info" : "VariableDeclarationStatement[19192-19323]:VariableDeclarationStatement[19192-19323]"
  }, {
    "left" : "if (descend)",
    "right" : "if (descend)",
    "info" : "IfStatement[19331-19787]:IfStatement[19331-19787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19344-19787]:Block[19344-19787]"
  }, {
    "left" : "if (NodeUtil.isStatementParent(n))",
    "right" : "if (NodeUtil.isStatementParent(n))",
    "info" : "IfStatement[19480-19779]:IfStatement[19480-19779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19515-19779]:Block[19515-19779]"
  }, {
    "left" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild();\n               child != null;\n               child = child.getNext())",
    "info" : "ForStatement[19527-19769]:ForStatement[19527-19769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19634-19769]:Block[19634-19769]"
  }, {
    "left" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
    "right" : "if (NodeUtil.isHoistedFunctionDeclaration(child))",
    "info" : "IfStatement[19648-19757]:IfStatement[19648-19757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19698-19757]:Block[19698-19757]"
  }, {
    "left" : "defineFunctionLiteral(child);",
    "right" : "defineFunctionLiteral(child);",
    "info" : "ExpressionStatement[19714-19743]:ExpressionStatement[19714-19743]"
  }, {
    "left" : "return descend;",
    "right" : "return descend;",
    "info" : "ReturnStatement[19795-19810]:ReturnStatement[19795-19810]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19822-19831]:MarkerAnnotation[19822-19831]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19836-19842]:Modifier[19836-19842]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19843-19847]:PrimitiveType[19843-19847]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[19848-19853]:SimpleName[19848-19853]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[19854-19869]:SingleVariableDeclaration[19854-19869]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[19871-19877]:SingleVariableDeclaration[19871-19877]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[19879-19890]:SingleVariableDeclaration[19879-19890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19892-21552]:Block[19892-21552]"
  }, {
    "left" : "inputId = t.getInputId();",
    "right" : "inputId = t.getInputId();",
    "info" : "ExpressionStatement[19900-19925]:ExpressionStatement[19900-19925]"
  }, {
    "left" : "attachLiteralTypes(n);",
    "right" : "attachLiteralTypes(n);",
    "info" : "ExpressionStatement[19932-19954]:ExpressionStatement[19932-19954]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n);\n          break;\n\n        case Token.VAR:\n          defineVar(n);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
    "right" : "switch (n.getType()) {\n        case Token.CALL:\n          checkForClassDefiningCalls(t, n);\n          checkForCallingConventionDefiningCalls(n, delegateCallingConventions);\n          break;\n\n        case Token.FUNCTION:\n          if (t.getInput() == null || !t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // Hoisted functions are handled during pre-traversal.\n          if (!NodeUtil.isHoistedFunctionDeclaration(n)) {\n            defineFunctionLiteral(n);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          defineCatch(n);\n          break;\n\n        case Token.VAR:\n          defineVar(n);\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.isExprResult() &&\n              n.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
    "info" : "SwitchStatement[19962-21238]:SwitchStatement[19962-21238]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[19993-20009]:SwitchCase[19993-20009]"
  }, {
    "left" : "checkForClassDefiningCalls(t, n);",
    "right" : "checkForClassDefiningCalls(t, n);",
    "info" : "ExpressionStatement[20020-20053]:ExpressionStatement[20020-20053]"
  }, {
    "left" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
    "right" : "checkForCallingConventionDefiningCalls(n, delegateCallingConventions);",
    "info" : "ExpressionStatement[20064-20134]:ExpressionStatement[20064-20134]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20145-20151]:BreakStatement[20145-20151]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[20161-20181]:SwitchCase[20161-20181]"
  }, {
    "left" : "if (t.getInput() == null || !t.getInput().isExtern())",
    "right" : "if (t.getInput() == null || !t.getInput().isExtern())",
    "info" : "IfStatement[20192-20298]:IfStatement[20192-20298]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20246-20298]:Block[20246-20298]"
  }, {
    "left" : "nonExternFunctions.add(n);",
    "right" : "nonExternFunctions.add(n);",
    "info" : "ExpressionStatement[20260-20286]:ExpressionStatement[20260-20286]"
  }, {
    "left" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
    "right" : "if (!NodeUtil.isHoistedFunctionDeclaration(n))",
    "info" : "IfStatement[20375-20473]:IfStatement[20375-20473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20422-20473]:Block[20422-20473]"
  }, {
    "left" : "defineFunctionLiteral(n);",
    "right" : "defineFunctionLiteral(n);",
    "info" : "ExpressionStatement[20436-20461]:ExpressionStatement[20436-20461]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20484-20490]:BreakStatement[20484-20490]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[20500-20518]:SwitchCase[20500-20518]"
  }, {
    "left" : "Node firstChild = n.getFirstChild();",
    "right" : "Node firstChild = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[20579-20615]:VariableDeclarationStatement[20579-20615]"
  }, {
    "left" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
    "right" : "if (firstChild.isGetProp() &&\n              firstChild.isQualifiedName())",
    "info" : "IfStatement[20626-20826]:IfStatement[20626-20826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20700-20826]:Block[20700-20826]"
  }, {
    "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
    "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
    "info" : "ExpressionStatement[20714-20814]:ExpressionStatement[20714-20814]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20837-20843]:BreakStatement[20837-20843]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[20853-20870]:SwitchCase[20853-20870]"
  }, {
    "left" : "defineCatch(n);",
    "right" : "defineCatch(n);",
    "info" : "ExpressionStatement[20881-20896]:ExpressionStatement[20881-20896]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20907-20913]:BreakStatement[20907-20913]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[20923-20938]:SwitchCase[20923-20938]"
  }, {
    "left" : "defineVar(n);",
    "right" : "defineVar(n);",
    "info" : "ExpressionStatement[20949-20962]:ExpressionStatement[20949-20962]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20973-20979]:BreakStatement[20973-20979]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[20989-21008]:SwitchCase[20989-21008]"
  }, {
    "left" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
    "right" : "if (parent.isExprResult() &&\n              n.isQualifiedName())",
    "info" : "IfStatement[21059-21213]:IfStatement[21059-21213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21123-21213]:Block[21123-21213]"
  }, {
    "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
    "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
    "info" : "ExpressionStatement[21137-21201]:ExpressionStatement[21137-21201]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21224-21230]:BreakStatement[21224-21230]"
  }, {
    "left" : "if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null)",
    "right" : "if (n.getParent() != null && NodeUtil.isStatement(n) &&\n          lentObjectLiterals != null)",
    "info" : "IfStatement[21309-21546]:IfStatement[21309-21546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21403-21546]:Block[21403-21546]"
  }, {
    "left" : "for (Node objLit : lentObjectLiterals)",
    "right" : "for (Node objLit : lentObjectLiterals)",
    "info" : "EnhancedForStatement[21413-21502]:EnhancedForStatement[21413-21502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21452-21502]:Block[21452-21502]"
  }, {
    "left" : "defineObjectLiteral(objLit);",
    "right" : "defineObjectLiteral(objLit);",
    "info" : "ExpressionStatement[21464-21492]:ExpressionStatement[21464-21492]"
  }, {
    "left" : "lentObjectLiterals.clear();",
    "right" : "lentObjectLiterals.clear();",
    "info" : "ExpressionStatement[21511-21538]:ExpressionStatement[21511-21538]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21558-21565]:Modifier[21558-21565]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[21566-21570]:PrimitiveType[21566-21570]"
  }, {
    "left" : "attachLiteralTypes",
    "right" : "attachLiteralTypes",
    "info" : "SimpleName[21571-21589]:SimpleName[21571-21589]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[21590-21596]:SingleVariableDeclaration[21590-21596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21598-22746]:Block[21598-22746]"
  }, {
    "left" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
    "right" : "switch (n.getType()) {\n        case Token.NULL:\n          n.setJSType(getNativeType(NULL_TYPE));\n          break;\n\n        case Token.VOID:\n          n.setJSType(getNativeType(VOID_TYPE));\n          break;\n\n        case Token.STRING:\n          n.setJSType(getNativeType(STRING_TYPE));\n          break;\n\n        case Token.NUMBER:\n          n.setJSType(getNativeType(NUMBER_TYPE));\n          break;\n\n        case Token.TRUE:\n        case Token.FALSE:\n          n.setJSType(getNativeType(BOOLEAN_TYPE));\n          break;\n\n        case Token.REGEXP:\n          n.setJSType(getNativeType(REGEXP_TYPE));\n          break;\n\n        case Token.OBJECTLIT:\n          JSDocInfo info = n.getJSDocInfo();\n          if (info != null &&\n              info.getLendsName() != null) {\n            if (lentObjectLiterals == null) {\n              lentObjectLiterals = Lists.newArrayList();\n            }\n            lentObjectLiterals.add(n);\n          } else {\n            defineObjectLiteral(n);\n          }\n          break;\n\n          // NOTE(nicksantos): If we ever support Array tuples,\n          // we will need to put ARRAYLIT here as well.\n      }",
    "info" : "SwitchStatement[21606-22740]:SwitchStatement[21606-22740]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[21637-21653]:SwitchCase[21637-21653]"
  }, {
    "left" : "n.setJSType(getNativeType(NULL_TYPE));",
    "right" : "n.setJSType(getNativeType(NULL_TYPE));",
    "info" : "ExpressionStatement[21664-21702]:ExpressionStatement[21664-21702]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21713-21719]:BreakStatement[21713-21719]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[21729-21745]:SwitchCase[21729-21745]"
  }, {
    "left" : "n.setJSType(getNativeType(VOID_TYPE));",
    "right" : "n.setJSType(getNativeType(VOID_TYPE));",
    "info" : "ExpressionStatement[21756-21794]:ExpressionStatement[21756-21794]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21805-21811]:BreakStatement[21805-21811]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[21821-21839]:SwitchCase[21821-21839]"
  }, {
    "left" : "n.setJSType(getNativeType(STRING_TYPE));",
    "right" : "n.setJSType(getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[21850-21890]:ExpressionStatement[21850-21890]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21901-21907]:BreakStatement[21901-21907]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[21917-21935]:SwitchCase[21917-21935]"
  }, {
    "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "info" : "ExpressionStatement[21946-21986]:ExpressionStatement[21946-21986]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21997-22003]:BreakStatement[21997-22003]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[22013-22029]:SwitchCase[22013-22029]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[22038-22055]:SwitchCase[22038-22055]"
  }, {
    "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
    "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
    "info" : "ExpressionStatement[22066-22107]:ExpressionStatement[22066-22107]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22118-22124]:BreakStatement[22118-22124]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[22134-22152]:SwitchCase[22134-22152]"
  }, {
    "left" : "n.setJSType(getNativeType(REGEXP_TYPE));",
    "right" : "n.setJSType(getNativeType(REGEXP_TYPE));",
    "info" : "ExpressionStatement[22163-22203]:ExpressionStatement[22163-22203]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22214-22220]:BreakStatement[22214-22220]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[22230-22251]:SwitchCase[22230-22251]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[22262-22296]:VariableDeclarationStatement[22262-22296]"
  }, {
    "left" : "if (info != null &&\n              info.getLendsName() != null)",
    "right" : "if (info != null &&\n              info.getLendsName() != null)",
    "info" : "IfStatement[22307-22594]:IfStatement[22307-22594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22370-22539]:Block[22370-22539]"
  }, {
    "left" : "if (lentObjectLiterals == null)",
    "right" : "if (lentObjectLiterals == null)",
    "info" : "IfStatement[22384-22488]:IfStatement[22384-22488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22416-22488]:Block[22416-22488]"
  }, {
    "left" : "lentObjectLiterals = Lists.newArrayList();",
    "right" : "lentObjectLiterals = Lists.newArrayList();",
    "info" : "ExpressionStatement[22432-22474]:ExpressionStatement[22432-22474]"
  }, {
    "left" : "lentObjectLiterals.add(n);",
    "right" : "lentObjectLiterals.add(n);",
    "info" : "ExpressionStatement[22501-22527]:ExpressionStatement[22501-22527]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22545-22594]:Block[22545-22594]"
  }, {
    "left" : "defineObjectLiteral(n);",
    "right" : "defineObjectLiteral(n);",
    "info" : "ExpressionStatement[22559-22582]:ExpressionStatement[22559-22582]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22605-22611]:BreakStatement[22605-22611]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22752-22759]:Modifier[22752-22759]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22760-22764]:PrimitiveType[22760-22764]"
  }, {
    "left" : "defineObjectLiteral",
    "right" : "defineObjectLiteral",
    "info" : "SimpleName[22765-22784]:SimpleName[22765-22784]"
  }, {
    "left" : "Node objectLit",
    "right" : "Node objectLit",
    "info" : "SingleVariableDeclaration[22785-22799]:SingleVariableDeclaration[22785-22799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22801-24391]:Block[22801-24391]"
  }, {
    "left" : "JSType type = null;",
    "right" : "JSType type = null;",
    "info" : "VariableDeclarationStatement[22848-22867]:VariableDeclarationStatement[22848-22867]"
  }, {
    "left" : "JSDocInfo info = objectLit.getJSDocInfo();",
    "right" : "JSDocInfo info = objectLit.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[22874-22916]:VariableDeclarationStatement[22874-22916]"
  }, {
    "left" : "if (info != null && info.getLendsName() != null)",
    "right" : "if (info != null && info.getLendsName() != null)",
    "info" : "IfStatement[22923-23673]:IfStatement[22923-23673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22972-23673]:Block[22972-23673]"
  }, {
    "left" : "String lendsName = info.getLendsName();",
    "right" : "String lendsName = info.getLendsName();",
    "info" : "VariableDeclarationStatement[22982-23021]:VariableDeclarationStatement[22982-23021]"
  }, {
    "left" : "Var lendsVar = scope.getVar(lendsName);",
    "right" : "Var lendsVar = scope.getVar(lendsName);",
    "info" : "VariableDeclarationStatement[23030-23069]:VariableDeclarationStatement[23030-23069]"
  }, {
    "left" : "if (lendsVar == null)",
    "right" : "if (lendsVar == null)",
    "info" : "IfStatement[23078-23665]:IfStatement[23078-23665]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23100-23216]:Block[23100-23216]"
  }, {
    "left" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
    "right" : "compiler.report(\n              JSError.make(sourceName, objectLit, UNKNOWN_LENDS, lendsName));",
    "info" : "ExpressionStatement[23112-23206]:ExpressionStatement[23112-23206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23222-23665]:Block[23222-23665]"
  }, {
    "left" : "type = lendsVar.getType();",
    "right" : "type = lendsVar.getType();",
    "info" : "ExpressionStatement[23234-23260]:ExpressionStatement[23234-23260]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[23271-23334]:IfStatement[23271-23334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23289-23334]:Block[23289-23334]"
  }, {
    "left" : "type = unknownType;",
    "right" : "type = unknownType;",
    "info" : "ExpressionStatement[23303-23322]:ExpressionStatement[23303-23322]"
  }, {
    "left" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
    "right" : "if (!type.isSubtype(typeRegistry.getNativeType(OBJECT_TYPE)))",
    "info" : "IfStatement[23345-23655]:IfStatement[23345-23655]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23407-23597]:Block[23407-23597]"
  }, {
    "left" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
    "right" : "compiler.report(\n                JSError.make(sourceName, objectLit, LENDS_ON_NON_OBJECT,\n                    lendsName, type.toString()));",
    "info" : "ExpressionStatement[23421-23560]:ExpressionStatement[23421-23560]"
  }, {
    "left" : "type = null;",
    "right" : "type = null;",
    "info" : "ExpressionStatement[23573-23585]:ExpressionStatement[23573-23585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23603-23655]:Block[23603-23655]"
  }, {
    "left" : "objectLit.setJSType(type);",
    "right" : "objectLit.setJSType(type);",
    "info" : "ExpressionStatement[23617-23643]:ExpressionStatement[23617-23643]"
  }, {
    "left" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
    "right" : "info = NodeUtil.getBestJSDocInfo(objectLit);",
    "info" : "ExpressionStatement[23681-23725]:ExpressionStatement[23681-23725]"
  }, {
    "left" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
    "right" : "Node lValue = NodeUtil.getBestLValue(objectLit);",
    "info" : "VariableDeclarationStatement[23732-23780]:VariableDeclarationStatement[23732-23780]"
  }, {
    "left" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
    "right" : "String lValueName = NodeUtil.getBestLValueName(lValue);",
    "info" : "VariableDeclarationStatement[23787-23842]:VariableDeclarationStatement[23787-23842]"
  }, {
    "left" : "boolean createdEnumType = false;",
    "right" : "boolean createdEnumType = false;",
    "info" : "VariableDeclarationStatement[23849-23881]:VariableDeclarationStatement[23849-23881]"
  }, {
    "left" : "if (info != null && info.hasEnumParameterType())",
    "right" : "if (info != null && info.hasEnumParameterType())",
    "info" : "IfStatement[23888-24055]:IfStatement[23888-24055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23937-24055]:Block[23937-24055]"
  }, {
    "left" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
    "right" : "type = createEnumTypeFromNodes(objectLit, lValueName, info, lValue);",
    "info" : "ExpressionStatement[23947-24015]:ExpressionStatement[23947-24015]"
  }, {
    "left" : "createdEnumType = true;",
    "right" : "createdEnumType = true;",
    "info" : "ExpressionStatement[24024-24047]:ExpressionStatement[24024-24047]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[24063-24151]:IfStatement[24063-24151]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24081-24151]:Block[24081-24151]"
  }, {
    "left" : "type = typeRegistry.createAnonymousObjectType(info);",
    "right" : "type = typeRegistry.createAnonymousObjectType(info);",
    "info" : "ExpressionStatement[24091-24143]:ExpressionStatement[24091-24143]"
  }, {
    "left" : "setDeferredType(objectLit, type);",
    "right" : "setDeferredType(objectLit, type);",
    "info" : "ExpressionStatement[24159-24192]:ExpressionStatement[24159-24192]"
  }, {
    "left" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
    "right" : "processObjectLitProperties(\n          objectLit, ObjectType.cast(objectLit.getJSType()), !createdEnumType);",
    "info" : "ExpressionStatement[24278-24385]:ExpressionStatement[24278-24385]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[24783-24787]:PrimitiveType[24783-24787]"
  }, {
    "left" : "processObjectLitProperties",
    "right" : "processObjectLitProperties",
    "info" : "SimpleName[24788-24814]:SimpleName[24788-24814]"
  }, {
    "left" : "Node objLit",
    "right" : "Node objLit",
    "info" : "SingleVariableDeclaration[24824-24835]:SingleVariableDeclaration[24824-24835]"
  }, {
    "left" : "ObjectType objLitType",
    "right" : "ObjectType objLitType",
    "info" : "SingleVariableDeclaration[24837-24858]:SingleVariableDeclaration[24837-24858]"
  }, {
    "left" : "boolean declareOnOwner",
    "right" : "boolean declareOnOwner",
    "info" : "SingleVariableDeclaration[24868-24890]:SingleVariableDeclaration[24868-24890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24892-26070]:Block[24892-26070]"
  }, {
    "left" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
    "right" : "for (Node keyNode = objLit.getFirstChild(); keyNode != null;\n           keyNode = keyNode.getNext())",
    "info" : "ForStatement[24900-26064]:ForStatement[24900-26064]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25001-26064]:Block[25001-26064]"
  }, {
    "left" : "Node value = keyNode.getFirstChild();",
    "right" : "Node value = keyNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[25011-25048]:VariableDeclarationStatement[25011-25048]"
  }, {
    "left" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
    "right" : "String memberName = NodeUtil.getObjectLitKeyName(keyNode);",
    "info" : "VariableDeclarationStatement[25057-25115]:VariableDeclarationStatement[25057-25115]"
  }, {
    "left" : "JSDocInfo info = keyNode.getJSDocInfo();",
    "right" : "JSDocInfo info = keyNode.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[25124-25164]:VariableDeclarationStatement[25124-25164]"
  }, {
    "left" : "JSType valueType = getDeclaredType(info, keyNode, value);",
    "right" : "JSType valueType = getDeclaredType(info, keyNode, value);",
    "info" : "VariableDeclarationStatement[25173-25230]:VariableDeclarationStatement[25173-25230]"
  }, {
    "left" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
    "right" : "JSType keyType =  objLitType.isEnumType() ?\n            objLitType.toMaybeEnumType().getElementsType() :\n            NodeUtil.getObjectLitKeyTypeFromValueType(keyNode, valueType);",
    "info" : "VariableDeclarationStatement[25239-25418]:VariableDeclarationStatement[25239-25418]"
  }, {
    "left" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
    "right" : "String qualifiedName = NodeUtil.getBestLValueName(keyNode);",
    "info" : "VariableDeclarationStatement[25533-25592]:VariableDeclarationStatement[25533-25592]"
  }, {
    "left" : "if (qualifiedName != null)",
    "right" : "if (qualifiedName != null)",
    "info" : "IfStatement[25601-25841]:IfStatement[25601-25841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25628-25758]:Block[25628-25758]"
  }, {
    "left" : "boolean inferred = keyType == null;",
    "right" : "boolean inferred = keyType == null;",
    "info" : "VariableDeclarationStatement[25640-25675]:VariableDeclarationStatement[25640-25675]"
  }, {
    "left" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
    "right" : "defineSlot(keyNode, objLit, qualifiedName, keyType, inferred);",
    "info" : "ExpressionStatement[25686-25748]:ExpressionStatement[25686-25748]"
  }, {
    "left" : "if (keyType != null)",
    "right" : "if (keyType != null)",
    "info" : "IfStatement[25764-25841]:IfStatement[25764-25841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25785-25841]:Block[25785-25841]"
  }, {
    "left" : "setDeferredType(keyNode, keyType);",
    "right" : "setDeferredType(keyNode, keyType);",
    "info" : "ExpressionStatement[25797-25831]:ExpressionStatement[25797-25831]"
  }, {
    "left" : "if (keyType != null && objLitType != null && declareOnOwner)",
    "right" : "if (keyType != null && objLitType != null && declareOnOwner)",
    "info" : "IfStatement[25851-26056]:IfStatement[25851-26056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25912-26056]:Block[25912-26056]"
  }, {
    "left" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
    "right" : "objLitType.defineDeclaredProperty(memberName, keyType, keyNode);",
    "info" : "ExpressionStatement[25982-26046]:ExpressionStatement[25982-26046]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26306-26313]:Modifier[26306-26313]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[26314-26320]:SimpleType[26314-26320]"
  }, {
    "left" : "getDeclaredTypeInAnnotation",
    "right" : "getDeclaredTypeInAnnotation",
    "info" : "SimpleName[26321-26348]:SimpleName[26321-26348]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[26349-26358]:SingleVariableDeclaration[26349-26358]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[26360-26374]:SingleVariableDeclaration[26360-26374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26376-27664]:Block[26376-27664]"
  }, {
    "left" : "JSType jsType = null;",
    "right" : "JSType jsType = null;",
    "info" : "VariableDeclarationStatement[26384-26405]:VariableDeclarationStatement[26384-26405]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[26412-27637]:IfStatement[26412-27637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26430-27637]:Block[26430-27637]"
  }, {
    "left" : "if (info.hasType())",
    "right" : "if (info.hasType())",
    "info" : "IfStatement[26440-27629]:IfStatement[26440-27629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26460-27415]:Block[26460-27415]"
  }, {
    "left" : "ImmutableList<TemplateType> ownerTypeKeys = ImmutableList.of();",
    "right" : "ImmutableList<TemplateType> ownerTypeKeys = ImmutableList.of();",
    "info" : "VariableDeclarationStatement[26473-26536]:VariableDeclarationStatement[26473-26536]"
  }, {
    "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(node);",
    "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(node);",
    "info" : "VariableDeclarationStatement[26547-26598]:VariableDeclarationStatement[26547-26598]"
  }, {
    "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
    "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
    "info" : "VariableDeclarationStatement[26609-26666]:VariableDeclarationStatement[26609-26666]"
  }, {
    "left" : "ObjectType ownerType = null;",
    "right" : "ObjectType ownerType = null;",
    "info" : "VariableDeclarationStatement[26677-26705]:VariableDeclarationStatement[26677-26705]"
  }, {
    "left" : "if (ownerName != null)",
    "right" : "if (ownerName != null)",
    "info" : "IfStatement[26716-27116]:IfStatement[26716-27116]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26739-27116]:Block[26739-27116]"
  }, {
    "left" : "Var ownerVar = scope.getVar(ownerName);",
    "right" : "Var ownerVar = scope.getVar(ownerName);",
    "info" : "VariableDeclarationStatement[26753-26792]:VariableDeclarationStatement[26753-26792]"
  }, {
    "left" : "if (ownerVar != null)",
    "right" : "if (ownerVar != null)",
    "info" : "IfStatement[26805-27104]:IfStatement[26805-27104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26827-27104]:Block[26827-27104]"
  }, {
    "left" : "ownerType = getPrototypeOwnerType(\n                  ObjectType.cast(ownerVar.getType()));",
    "right" : "ownerType = getPrototypeOwnerType(\n                  ObjectType.cast(ownerVar.getType()));",
    "info" : "ExpressionStatement[26843-26933]:ExpressionStatement[26843-26933]"
  }, {
    "left" : "if (ownerType != null)",
    "right" : "if (ownerType != null)",
    "info" : "IfStatement[26948-27090]:IfStatement[26948-27090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26971-27090]:Block[26971-27090]"
  }, {
    "left" : "ownerTypeKeys =\n                    ownerType.getTemplateTypeMap().getTemplateKeys();",
    "right" : "ownerTypeKeys =\n                    ownerType.getTemplateTypeMap().getTemplateKeys();",
    "info" : "ExpressionStatement[26989-27074]:ExpressionStatement[26989-27074]"
  }, {
    "left" : "if (!ownerTypeKeys.isEmpty())",
    "right" : "if (!ownerTypeKeys.isEmpty())",
    "info" : "IfStatement[27128-27233]:IfStatement[27128-27233]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27158-27233]:Block[27158-27233]"
  }, {
    "left" : "typeRegistry.setTemplateTypeNames(ownerTypeKeys);",
    "right" : "typeRegistry.setTemplateTypeNames(ownerTypeKeys);",
    "info" : "ExpressionStatement[27172-27221]:ExpressionStatement[27172-27221]"
  }, {
    "left" : "jsType = info.getType().evaluate(scope, typeRegistry);",
    "right" : "jsType = info.getType().evaluate(scope, typeRegistry);",
    "info" : "ExpressionStatement[27245-27299]:ExpressionStatement[27245-27299]"
  }, {
    "left" : "if (!ownerTypeKeys.isEmpty())",
    "right" : "if (!ownerTypeKeys.isEmpty())",
    "info" : "IfStatement[27311-27405]:IfStatement[27311-27405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27341-27405]:Block[27341-27405]"
  }, {
    "left" : "typeRegistry.clearTemplateTypeNames();",
    "right" : "typeRegistry.clearTemplateTypeNames();",
    "info" : "ExpressionStatement[27355-27393]:ExpressionStatement[27355-27393]"
  }, {
    "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
    "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
    "info" : "IfStatement[27421-27629]:IfStatement[27421-27629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27478-27629]:Block[27478-27629]"
  }, {
    "left" : "String fnName = node.getQualifiedName();",
    "right" : "String fnName = node.getQualifiedName();",
    "info" : "VariableDeclarationStatement[27490-27530]:VariableDeclarationStatement[27490-27530]"
  }, {
    "left" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
    "right" : "jsType = createFunctionTypeFromNodes(\n              null, fnName, info, node);",
    "info" : "ExpressionStatement[27541-27619]:ExpressionStatement[27541-27619]"
  }, {
    "left" : "return jsType;",
    "right" : "return jsType;",
    "info" : "ReturnStatement[27644-27658]:ReturnStatement[27644-27658]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27814-27818]:PrimitiveType[27814-27818]"
  }, {
    "left" : "assertDefinitionNode",
    "right" : "assertDefinitionNode",
    "info" : "SimpleName[27819-27839]:SimpleName[27819-27839]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[27840-27846]:SingleVariableDeclaration[27840-27846]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[27848-27856]:SingleVariableDeclaration[27848-27856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27858-27970]:Block[27858-27970]"
  }, {
    "left" : "Preconditions.checkState(sourceName != null);",
    "right" : "Preconditions.checkState(sourceName != null);",
    "info" : "ExpressionStatement[27866-27911]:ExpressionStatement[27866-27911]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == type);",
    "right" : "Preconditions.checkState(n.getType() == type);",
    "info" : "ExpressionStatement[27918-27964]:ExpressionStatement[27918-27964]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28026-28030]:PrimitiveType[28026-28030]"
  }, {
    "left" : "defineCatch",
    "right" : "defineCatch",
    "info" : "SimpleName[28031-28042]:SimpleName[28031-28042]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[28043-28049]:SingleVariableDeclaration[28043-28049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28051-28261]:Block[28051-28261]"
  }, {
    "left" : "assertDefinitionNode(n, Token.CATCH);",
    "right" : "assertDefinitionNode(n, Token.CATCH);",
    "info" : "ExpressionStatement[28059-28096]:ExpressionStatement[28059-28096]"
  }, {
    "left" : "Node catchName = n.getFirstChild();",
    "right" : "Node catchName = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[28103-28138]:VariableDeclarationStatement[28103-28138]"
  }, {
    "left" : "defineSlot(catchName, n,\n          getDeclaredType(\n              catchName.getJSDocInfo(), catchName, null));",
    "right" : "defineSlot(catchName, n,\n          getDeclaredType(\n              catchName.getJSDocInfo(), catchName, null));",
    "info" : "ExpressionStatement[28145-28255]:ExpressionStatement[28145-28255]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28320-28324]:PrimitiveType[28320-28324]"
  }, {
    "left" : "defineVar",
    "right" : "defineVar",
    "info" : "SimpleName[28325-28334]:SimpleName[28325-28334]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[28335-28341]:SingleVariableDeclaration[28335-28341]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28343-28852]:Block[28343-28852]"
  }, {
    "left" : "assertDefinitionNode(n, Token.VAR);",
    "right" : "assertDefinitionNode(n, Token.VAR);",
    "info" : "ExpressionStatement[28351-28386]:ExpressionStatement[28351-28386]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[28393-28427]:VariableDeclarationStatement[28393-28427]"
  }, {
    "left" : "if (n.hasMoreThanOneChild())",
    "right" : "if (n.hasMoreThanOneChild())",
    "info" : "IfStatement[28434-28846]:IfStatement[28434-28846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28463-28718]:Block[28463-28718]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[28473-28607]:IfStatement[28473-28607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28491-28607]:Block[28491-28607]"
  }, {
    "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
    "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
    "info" : "ExpressionStatement[28534-28597]:ExpressionStatement[28534-28597]"
  }, {
    "left" : "for (Node name : n.children())",
    "right" : "for (Node name : n.children())",
    "info" : "EnhancedForStatement[28616-28710]:EnhancedForStatement[28616-28710]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28647-28710]:Block[28647-28710]"
  }, {
    "left" : "defineName(name, n, name.getJSDocInfo());",
    "right" : "defineName(name, n, name.getJSDocInfo());",
    "info" : "ExpressionStatement[28659-28700]:ExpressionStatement[28659-28700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28724-28846]:Block[28724-28846]"
  }, {
    "left" : "Node name = n.getFirstChild();",
    "right" : "Node name = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[28734-28764]:VariableDeclarationStatement[28734-28764]"
  }, {
    "left" : "defineName(name, n, (info != null) ? info : name.getJSDocInfo());",
    "right" : "defineName(name, n, (info != null) ? info : name.getJSDocInfo());",
    "info" : "ExpressionStatement[28773-28838]:ExpressionStatement[28773-28838]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28909-28913]:PrimitiveType[28909-28913]"
  }, {
    "left" : "defineFunctionLiteral",
    "right" : "defineFunctionLiteral",
    "info" : "SimpleName[28914-28935]:SimpleName[28914-28935]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[28936-28942]:SingleVariableDeclaration[28936-28942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28944-29746]:Block[28944-29746]"
  }, {
    "left" : "assertDefinitionNode(n, Token.FUNCTION);",
    "right" : "assertDefinitionNode(n, Token.FUNCTION);",
    "info" : "ExpressionStatement[28952-28992]:ExpressionStatement[28952-28992]"
  }, {
    "left" : "Node lValue = NodeUtil.getBestLValue(n);",
    "right" : "Node lValue = NodeUtil.getBestLValue(n);",
    "info" : "VariableDeclarationStatement[29107-29147]:VariableDeclarationStatement[29107-29147]"
  }, {
    "left" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
    "right" : "JSDocInfo info = NodeUtil.getBestJSDocInfo(n);",
    "info" : "VariableDeclarationStatement[29154-29200]:VariableDeclarationStatement[29154-29200]"
  }, {
    "left" : "String functionName = NodeUtil.getBestLValueName(lValue);",
    "right" : "String functionName = NodeUtil.getBestLValueName(lValue);",
    "info" : "VariableDeclarationStatement[29207-29264]:VariableDeclarationStatement[29207-29264]"
  }, {
    "left" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
    "right" : "FunctionType functionType =\n          createFunctionTypeFromNodes(n, functionName, info, lValue);",
    "info" : "VariableDeclarationStatement[29271-29368]:VariableDeclarationStatement[29271-29368]"
  }, {
    "left" : "setDeferredType(n, functionType);",
    "right" : "setDeferredType(n, functionType);",
    "info" : "ExpressionStatement[29434-29467]:ExpressionStatement[29434-29467]"
  }, {
    "left" : "if (NodeUtil.isFunctionDeclaration(n))",
    "right" : "if (NodeUtil.isFunctionDeclaration(n))",
    "info" : "IfStatement[29636-29740]:IfStatement[29636-29740]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29675-29740]:Block[29675-29740]"
  }, {
    "left" : "defineSlot(n.getFirstChild(), n, functionType);",
    "right" : "defineSlot(n.getFirstChild(), n, functionType);",
    "info" : "ExpressionStatement[29685-29732]:ExpressionStatement[29685-29732]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30093-30100]:Modifier[30093-30100]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30101-30105]:PrimitiveType[30101-30105]"
  }, {
    "left" : "defineName",
    "right" : "defineName",
    "info" : "SimpleName[30106-30116]:SimpleName[30106-30116]"
  }, {
    "left" : "Node name",
    "right" : "Node name",
    "info" : "SingleVariableDeclaration[30117-30126]:SingleVariableDeclaration[30117-30126]"
  }, {
    "left" : "Node var",
    "right" : "Node var",
    "info" : "SingleVariableDeclaration[30128-30136]:SingleVariableDeclaration[30128-30136]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[30138-30152]:SingleVariableDeclaration[30138-30152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30154-30460]:Block[30154-30460]"
  }, {
    "left" : "Node value = name.getFirstChild();",
    "right" : "Node value = name.getFirstChild();",
    "info" : "VariableDeclarationStatement[30162-30196]:VariableDeclarationStatement[30162-30196]"
  }, {
    "left" : "JSType type = getDeclaredType(info, name, value);",
    "right" : "JSType type = getDeclaredType(info, name, value);",
    "info" : "VariableDeclarationStatement[30229-30278]:VariableDeclarationStatement[30229-30278]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[30285-30419]:IfStatement[30285-30419]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30303-30419]:Block[30303-30419]"
  }, {
    "left" : "type = name.isFromExterns() ? unknownType : null;",
    "right" : "type = name.isFromExterns() ? unknownType : null;",
    "info" : "ExpressionStatement[30362-30411]:ExpressionStatement[30362-30411]"
  }, {
    "left" : "defineSlot(name, var, type);",
    "right" : "defineSlot(name, var, type);",
    "info" : "ExpressionStatement[30426-30454]:ExpressionStatement[30426-30454]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30790-30797]:Modifier[30790-30797]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30798-30805]:PrimitiveType[30798-30805]"
  }, {
    "left" : "shouldUseFunctionLiteralType",
    "right" : "shouldUseFunctionLiteralType",
    "info" : "SimpleName[30806-30834]:SimpleName[30806-30834]"
  }, {
    "left" : "FunctionType type",
    "right" : "FunctionType type",
    "info" : "SingleVariableDeclaration[30844-30861]:SingleVariableDeclaration[30844-30861]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[30863-30877]:SingleVariableDeclaration[30863-30877]"
  }, {
    "left" : "Node lValue",
    "right" : "Node lValue",
    "info" : "SingleVariableDeclaration[30879-30890]:SingleVariableDeclaration[30879-30890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30892-31120]:Block[30892-31120]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[30900-30948]:IfStatement[30900-30948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30918-30948]:Block[30918-30948]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30928-30940]:ReturnStatement[30928-30940]"
  }, {
    "left" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue))",
    "right" : "if (lValue != null &&\n          NodeUtil.isObjectLitKey(lValue))",
    "info" : "IfStatement[30955-31051]:IfStatement[30955-31051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31020-31051]:Block[31020-31051]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[31030-31043]:ReturnStatement[31030-31043]"
  }, {
    "left" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
    "right" : "return scope.isGlobal() || !type.isReturnTypeInferred();",
    "info" : "ReturnStatement[31058-31114]:ReturnStatement[31058-31114]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[32147-32154]:Modifier[32147-32154]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[32155-32167]:SimpleType[32155-32167]"
  }, {
    "left" : "createFunctionTypeFromNodes",
    "right" : "createFunctionTypeFromNodes",
    "info" : "SimpleName[32168-32195]:SimpleName[32168-32195]"
  }, {
    "left" : "@Nullable Node rValue",
    "right" : "@Nullable Node rValue",
    "info" : "SingleVariableDeclaration[32205-32226]:SingleVariableDeclaration[32205-32226]"
  }, {
    "left" : "@Nullable String name",
    "right" : "@Nullable String name",
    "info" : "SingleVariableDeclaration[32236-32257]:SingleVariableDeclaration[32236-32257]"
  }, {
    "left" : "@Nullable JSDocInfo info",
    "right" : "@Nullable JSDocInfo info",
    "info" : "SingleVariableDeclaration[32267-32291]:SingleVariableDeclaration[32267-32291]"
  }, {
    "left" : "@Nullable Node lvalueNode",
    "right" : "@Nullable Node lvalueNode",
    "info" : "SingleVariableDeclaration[32301-32326]:SingleVariableDeclaration[32301-32326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32328-36710]:Block[32328-36710]"
  }, {
    "left" : "FunctionType functionType = null;",
    "right" : "FunctionType functionType = null;",
    "info" : "VariableDeclarationStatement[32337-32370]:VariableDeclarationStatement[32337-32370]"
  }, {
    "left" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
    "right" : "if (rValue != null && rValue.isQualifiedName() && scope.isGlobal())",
    "info" : "IfStatement[32452-33095]:IfStatement[32452-33095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32520-33095]:Block[32520-33095]"
  }, {
    "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
    "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
    "info" : "VariableDeclarationStatement[32530-32580]:VariableDeclarationStatement[32530-32580]"
  }, {
    "left" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
    "right" : "if (var != null && var.getType() != null &&\n            var.getType().isFunctionType())",
    "info" : "IfStatement[32589-33087]:IfStatement[32589-33087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32677-33087]:Block[32677-33087]"
  }, {
    "left" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
    "right" : "FunctionType aliasedType  = var.getType().toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[32689-32753]:VariableDeclarationStatement[32689-32753]"
  }, {
    "left" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
    "right" : "if ((aliasedType.isConstructor() || aliasedType.isInterface()) &&\n              !aliasedType.isNativeObjectType())",
    "info" : "IfStatement[32764-33077]:IfStatement[32764-33077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32879-33077]:Block[32879-33077]"
  }, {
    "left" : "functionType = aliasedType;",
    "right" : "functionType = aliasedType;",
    "info" : "ExpressionStatement[32893-32920]:ExpressionStatement[32893-32920]"
  }, {
    "left" : "if (name != null && scope.isGlobal())",
    "right" : "if (name != null && scope.isGlobal())",
    "info" : "IfStatement[32934-33065]:IfStatement[32934-33065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32972-33065]:Block[32972-33065]"
  }, {
    "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
    "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
    "info" : "ExpressionStatement[32988-33051]:ExpressionStatement[32988-33051]"
  }, {
    "left" : "if (functionType == null)",
    "right" : "if (functionType == null)",
    "info" : "IfStatement[33103-36658]:IfStatement[33103-36658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33129-36658]:Block[33129-36658]"
  }, {
    "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
    "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
    "info" : "VariableDeclarationStatement[33139-33193]:VariableDeclarationStatement[33139-33193]"
  }, {
    "left" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
    "right" : "boolean isFnLiteral =\n            rValue != null && rValue.isFunction();",
    "info" : "VariableDeclarationStatement[33202-33274]:VariableDeclarationStatement[33202-33274]"
  }, {
    "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
    "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
    "info" : "VariableDeclarationStatement[33283-33325]:VariableDeclarationStatement[33283-33325]"
  }, {
    "left" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
    "right" : "Node parametersNode = isFnLiteral ?\n            rValue.getFirstChild().getNext() : null;",
    "info" : "VariableDeclarationStatement[33334-33422]:VariableDeclarationStatement[33334-33422]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[33432-33829]:IfStatement[33432-33829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33468-33829]:Block[33468-33829]"
  }, {
    "left" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
    "right" : "JSType type = info.getType().evaluate(scope, typeRegistry);",
    "info" : "VariableDeclarationStatement[33480-33539]:VariableDeclarationStatement[33480-33539]"
  }, {
    "left" : "type = type.restrictByNotNullOrUndefined();",
    "right" : "type = type.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[33625-33668]:ExpressionStatement[33625-33668]"
  }, {
    "left" : "if (type.isFunctionType())",
    "right" : "if (type.isFunctionType())",
    "info" : "IfStatement[33679-33819]:IfStatement[33679-33819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33706-33819]:Block[33706-33819]"
  }, {
    "left" : "functionType = type.toMaybeFunctionType();",
    "right" : "functionType = type.toMaybeFunctionType();",
    "info" : "ExpressionStatement[33720-33762]:ExpressionStatement[33720-33762]"
  }, {
    "left" : "functionType.setJSDocInfo(info);",
    "right" : "functionType.setJSDocInfo(info);",
    "info" : "ExpressionStatement[33775-33807]:ExpressionStatement[33775-33807]"
  }, {
    "left" : "if (functionType == null)",
    "right" : "if (functionType == null)",
    "info" : "IfStatement[33839-36650]:IfStatement[33839-36650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33865-36650]:Block[33865-36650]"
  }, {
    "left" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
    "right" : "Node ownerNode = NodeUtil.getBestLValueOwner(lvalueNode);",
    "info" : "VariableDeclarationStatement[33932-33989]:VariableDeclarationStatement[33932-33989]"
  }, {
    "left" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
    "right" : "String ownerName = NodeUtil.getBestLValueName(ownerNode);",
    "info" : "VariableDeclarationStatement[34000-34057]:VariableDeclarationStatement[34000-34057]"
  }, {
    "left" : "Var ownerVar = null;",
    "right" : "Var ownerVar = null;",
    "info" : "VariableDeclarationStatement[34068-34088]:VariableDeclarationStatement[34068-34088]"
  }, {
    "left" : "String propName = null;",
    "right" : "String propName = null;",
    "info" : "VariableDeclarationStatement[34099-34122]:VariableDeclarationStatement[34099-34122]"
  }, {
    "left" : "ObjectType ownerType = null;",
    "right" : "ObjectType ownerType = null;",
    "info" : "VariableDeclarationStatement[34133-34161]:VariableDeclarationStatement[34133-34161]"
  }, {
    "left" : "if (ownerName != null)",
    "right" : "if (ownerName != null)",
    "info" : "IfStatement[34172-34480]:IfStatement[34172-34480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34195-34480]:Block[34195-34480]"
  }, {
    "left" : "ownerVar = scope.getVar(ownerName);",
    "right" : "ownerVar = scope.getVar(ownerName);",
    "info" : "ExpressionStatement[34209-34244]:ExpressionStatement[34209-34244]"
  }, {
    "left" : "if (ownerVar != null)",
    "right" : "if (ownerVar != null)",
    "info" : "IfStatement[34257-34357]:IfStatement[34257-34357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34279-34357]:Block[34279-34357]"
  }, {
    "left" : "ownerType = ObjectType.cast(ownerVar.getType());",
    "right" : "ownerType = ObjectType.cast(ownerVar.getType());",
    "info" : "ExpressionStatement[34295-34343]:ExpressionStatement[34295-34343]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[34370-34468]:IfStatement[34370-34468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34388-34468]:Block[34388-34468]"
  }, {
    "left" : "propName = name.substring(ownerName.length() + 1);",
    "right" : "propName = name.substring(ownerName.length() + 1);",
    "info" : "ExpressionStatement[34404-34454]:ExpressionStatement[34404-34454]"
  }, {
    "left" : "ObjectType prototypeOwner = getPrototypeOwnerType(ownerType);",
    "right" : "ObjectType prototypeOwner = getPrototypeOwnerType(ownerType);",
    "info" : "VariableDeclarationStatement[34492-34553]:VariableDeclarationStatement[34492-34553]"
  }, {
    "left" : "TemplateTypeMap prototypeOwnerTypeMap = null;",
    "right" : "TemplateTypeMap prototypeOwnerTypeMap = null;",
    "info" : "VariableDeclarationStatement[34564-34609]:VariableDeclarationStatement[34564-34609]"
  }, {
    "left" : "if (prototypeOwner != null &&\n              prototypeOwner.getTypeOfThis() != null)",
    "right" : "if (prototypeOwner != null &&\n              prototypeOwner.getTypeOfThis() != null)",
    "info" : "IfStatement[34620-34826]:IfStatement[34620-34826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34704-34826]:Block[34704-34826]"
  }, {
    "left" : "prototypeOwnerTypeMap =\n                  prototypeOwner.getTypeOfThis().getTemplateTypeMap();",
    "right" : "prototypeOwnerTypeMap =\n                  prototypeOwner.getTypeOfThis().getTemplateTypeMap();",
    "info" : "ExpressionStatement[34720-34814]:ExpressionStatement[34720-34814]"
  }, {
    "left" : "FunctionType overriddenType = null;",
    "right" : "FunctionType overriddenType = null;",
    "info" : "VariableDeclarationStatement[34838-34873]:VariableDeclarationStatement[34838-34873]"
  }, {
    "left" : "if (ownerType != null && propName != null)",
    "right" : "if (ownerType != null && propName != null)",
    "info" : "IfStatement[34884-35054]:IfStatement[34884-35054]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34927-35054]:Block[34927-35054]"
  }, {
    "left" : "overriddenType = findOverriddenFunction(\n                ownerType, propName, prototypeOwnerTypeMap);",
    "right" : "overriddenType = findOverriddenFunction(\n                ownerType, propName, prototypeOwnerTypeMap);",
    "info" : "ExpressionStatement[34941-35042]:ExpressionStatement[34941-35042]"
  }, {
    "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenType, parametersNode)\n              .inferTemplateTypeName(info, prototypeOwner)\n              .inferReturnType(info)\n              .inferInheritance(info);",
    "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                  scope)\n              .setContents(getFunctionAnalysisResults(fnRoot))\n              .inferFromOverriddenFunction(overriddenType, parametersNode)\n              .inferTemplateTypeName(info, prototypeOwner)\n              .inferReturnType(info)\n              .inferInheritance(info);",
    "info" : "VariableDeclarationStatement[35066-35470]:VariableDeclarationStatement[35066-35470]"
  }, {
    "left" : "boolean searchedForThisType = false;",
    "right" : "boolean searchedForThisType = false;",
    "info" : "VariableDeclarationStatement[35519-35555]:VariableDeclarationStatement[35519-35555]"
  }, {
    "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType() &&\n              ownerType.getOwnerFunction().hasInstanceType())",
    "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType() &&\n              ownerType.getOwnerFunction().hasInstanceType())",
    "info" : "IfStatement[35566-36422]:IfStatement[35566-36422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35692-35851]:Block[35692-35851]"
  }, {
    "left" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
    "right" : "builder.inferThisType(\n                info, ownerType.getOwnerFunction().getInstanceType());",
    "info" : "ExpressionStatement[35706-35799]:ExpressionStatement[35706-35799]"
  }, {
    "left" : "searchedForThisType = true;",
    "right" : "searchedForThisType = true;",
    "info" : "ExpressionStatement[35812-35839]:ExpressionStatement[35812-35839]"
  }, {
    "left" : "if (ownerNode != null && ownerNode.isThis())",
    "right" : "if (ownerNode != null && ownerNode.isThis())",
    "info" : "IfStatement[35857-36422]:IfStatement[35857-36422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35902-36422]:Block[35902-36422]"
  }, {
    "left" : "JSType injectedThisType = ownerNode.getJSType();",
    "right" : "JSType injectedThisType = ownerNode.getJSType();",
    "info" : "VariableDeclarationStatement[36163-36211]:VariableDeclarationStatement[36163-36211]"
  }, {
    "left" : "builder.inferThisType(\n                info,\n                injectedThisType == null ?\n                scope.getTypeOfThis() : injectedThisType);",
    "right" : "builder.inferThisType(\n                info,\n                injectedThisType == null ?\n                scope.getTypeOfThis() : injectedThisType);",
    "info" : "ExpressionStatement[36224-36370]:ExpressionStatement[36224-36370]"
  }, {
    "left" : "searchedForThisType = true;",
    "right" : "searchedForThisType = true;",
    "info" : "ExpressionStatement[36383-36410]:ExpressionStatement[36383-36410]"
  }, {
    "left" : "if (!searchedForThisType)",
    "right" : "if (!searchedForThisType)",
    "info" : "IfStatement[36434-36514]:IfStatement[36434-36514]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36460-36514]:Block[36460-36514]"
  }, {
    "left" : "builder.inferThisType(info);",
    "right" : "builder.inferThisType(info);",
    "info" : "ExpressionStatement[36474-36502]:ExpressionStatement[36474-36502]"
  }, {
    "left" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
    "right" : "functionType = builder\n              .inferParameterTypes(parametersNode, info)\n              .buildAndRegister();",
    "info" : "ExpressionStatement[36526-36640]:ExpressionStatement[36526-36640]"
  }, {
    "left" : "return functionType;",
    "right" : "return functionType;",
    "info" : "ReturnStatement[36684-36704]:ReturnStatement[36684-36704]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36716-36723]:Modifier[36716-36723]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[36724-36734]:SimpleType[36724-36734]"
  }, {
    "left" : "getPrototypeOwnerType",
    "right" : "getPrototypeOwnerType",
    "info" : "SimpleName[36735-36756]:SimpleName[36735-36756]"
  }, {
    "left" : "ObjectType ownerType",
    "right" : "ObjectType ownerType",
    "info" : "SingleVariableDeclaration[36757-36777]:SingleVariableDeclaration[36757-36777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36779-36928]:Block[36779-36928]"
  }, {
    "left" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
    "right" : "if (ownerType != null && ownerType.isFunctionPrototypeType())",
    "info" : "IfStatement[36787-36903]:IfStatement[36787-36903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36849-36903]:Block[36849-36903]"
  }, {
    "left" : "return ownerType.getOwnerFunction();",
    "right" : "return ownerType.getOwnerFunction();",
    "info" : "ReturnStatement[36859-36895]:ReturnStatement[36859-36895]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[36910-36922]:ReturnStatement[36910-36922]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37021-37028]:Modifier[37021-37028]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[37029-37041]:SimpleType[37029-37041]"
  }, {
    "left" : "findOverriddenFunction",
    "right" : "findOverriddenFunction",
    "info" : "SimpleName[37042-37064]:SimpleName[37042-37064]"
  }, {
    "left" : "ObjectType ownerType",
    "right" : "ObjectType ownerType",
    "info" : "SingleVariableDeclaration[37074-37094]:SingleVariableDeclaration[37074-37094]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[37096-37111]:SingleVariableDeclaration[37096-37111]"
  }, {
    "left" : "TemplateTypeMap typeMap",
    "right" : "TemplateTypeMap typeMap",
    "info" : "SingleVariableDeclaration[37113-37136]:SingleVariableDeclaration[37113-37136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37138-38096]:Block[37138-38096]"
  }, {
    "left" : "FunctionType result = null;",
    "right" : "FunctionType result = null;",
    "info" : "VariableDeclarationStatement[37146-37173]:VariableDeclarationStatement[37146-37173]"
  }, {
    "left" : "JSType propType = ownerType.getPropertyType(propName);",
    "right" : "JSType propType = ownerType.getPropertyType(propName);",
    "info" : "VariableDeclarationStatement[37267-37321]:VariableDeclarationStatement[37267-37321]"
  }, {
    "left" : "if (propType != null && propType.isFunctionType())",
    "right" : "if (propType != null && propType.isFunctionType())",
    "info" : "IfStatement[37328-37859]:IfStatement[37328-37859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37379-37438]:Block[37379-37438]"
  }, {
    "left" : "result =  propType.toMaybeFunctionType();",
    "right" : "result =  propType.toMaybeFunctionType();",
    "info" : "ExpressionStatement[37389-37430]:ExpressionStatement[37389-37430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37444-37859]:Block[37444-37859]"
  }, {
    "left" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
    "right" : "for (ObjectType iface :\n                 ownerType.getCtorImplementedInterfaces())",
    "info" : "EnhancedForStatement[37556-37851]:EnhancedForStatement[37556-37851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37639-37851]:Block[37639-37851]"
  }, {
    "left" : "propType = iface.getPropertyType(propName);",
    "right" : "propType = iface.getPropertyType(propName);",
    "info" : "ExpressionStatement[37651-37694]:ExpressionStatement[37651-37694]"
  }, {
    "left" : "if (propType != null && propType.isFunctionType())",
    "right" : "if (propType != null && propType.isFunctionType())",
    "info" : "IfStatement[37705-37841]:IfStatement[37705-37841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37756-37841]:Block[37756-37841]"
  }, {
    "left" : "result = propType.toMaybeFunctionType();",
    "right" : "result = propType.toMaybeFunctionType();",
    "info" : "ExpressionStatement[37770-37810]:ExpressionStatement[37770-37810]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[37823-37829]:BreakStatement[37823-37829]"
  }, {
    "left" : "if (result != null && typeMap != null && !typeMap.isEmpty())",
    "right" : "if (result != null && typeMap != null && !typeMap.isEmpty())",
    "info" : "IfStatement[37867-38068]:IfStatement[37867-38068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37928-38068]:Block[37928-38068]"
  }, {
    "left" : "result = result.visit(\n            new TemplateTypeMapReplacer(typeRegistry, typeMap))\n            .toMaybeFunctionType();",
    "right" : "result = result.visit(\n            new TemplateTypeMapReplacer(typeRegistry, typeMap))\n            .toMaybeFunctionType();",
    "info" : "ExpressionStatement[37938-38060]:ExpressionStatement[37938-38060]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[38076-38090]:ReturnStatement[38076-38090]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38786-38793]:Modifier[38786-38793]"
  }, {
    "left" : "EnumType",
    "right" : "EnumType",
    "info" : "SimpleType[38794-38802]:SimpleType[38794-38802]"
  }, {
    "left" : "createEnumTypeFromNodes",
    "right" : "createEnumTypeFromNodes",
    "info" : "SimpleName[38803-38826]:SimpleName[38803-38826]"
  }, {
    "left" : "Node rValue",
    "right" : "Node rValue",
    "info" : "SingleVariableDeclaration[38827-38838]:SingleVariableDeclaration[38827-38838]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[38840-38851]:SingleVariableDeclaration[38840-38851]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[38861-38875]:SingleVariableDeclaration[38861-38875]"
  }, {
    "left" : "Node lValueNode",
    "right" : "Node lValueNode",
    "info" : "SingleVariableDeclaration[38877-38892]:SingleVariableDeclaration[38877-38892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38894-40422]:Block[38894-40422]"
  }, {
    "left" : "Preconditions.checkNotNull(info);",
    "right" : "Preconditions.checkNotNull(info);",
    "info" : "ExpressionStatement[38902-38935]:ExpressionStatement[38902-38935]"
  }, {
    "left" : "Preconditions.checkState(info.hasEnumParameterType());",
    "right" : "Preconditions.checkState(info.hasEnumParameterType());",
    "info" : "ExpressionStatement[38942-38996]:ExpressionStatement[38942-38996]"
  }, {
    "left" : "EnumType enumType = null;",
    "right" : "EnumType enumType = null;",
    "info" : "VariableDeclarationStatement[39004-39029]:VariableDeclarationStatement[39004-39029]"
  }, {
    "left" : "if (rValue != null && rValue.isQualifiedName())",
    "right" : "if (rValue != null && rValue.isQualifiedName())",
    "info" : "IfStatement[39036-39308]:IfStatement[39036-39308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39084-39308]:Block[39084-39308]"
  }, {
    "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
    "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
    "info" : "VariableDeclarationStatement[39129-39179]:VariableDeclarationStatement[39129-39179]"
  }, {
    "left" : "if (var != null && var.getType() instanceof EnumType)",
    "right" : "if (var != null && var.getType() instanceof EnumType)",
    "info" : "IfStatement[39188-39300]:IfStatement[39188-39300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39242-39300]:Block[39242-39300]"
  }, {
    "left" : "enumType = (EnumType) var.getType();",
    "right" : "enumType = (EnumType) var.getType();",
    "info" : "ExpressionStatement[39254-39290]:ExpressionStatement[39254-39290]"
  }, {
    "left" : "if (enumType == null)",
    "right" : "if (enumType == null)",
    "info" : "IfStatement[39316-40269]:IfStatement[39316-40269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39338-40269]:Block[39338-40269]"
  }, {
    "left" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
    "right" : "JSType elementsType =\n            info.getEnumParameterType().evaluate(scope, typeRegistry);",
    "info" : "VariableDeclarationStatement[39348-39440]:VariableDeclarationStatement[39348-39440]"
  }, {
    "left" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
    "right" : "enumType = typeRegistry.createEnumType(name, rValue, elementsType);",
    "info" : "ExpressionStatement[39449-39516]:ExpressionStatement[39449-39516]"
  }, {
    "left" : "if (rValue != null && rValue.isObjectLit())",
    "right" : "if (rValue != null && rValue.isObjectLit())",
    "info" : "IfStatement[39526-40261]:IfStatement[39526-40261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39570-40261]:Block[39570-40261]"
  }, {
    "left" : "Node key = rValue.getFirstChild();",
    "right" : "Node key = rValue.getFirstChild();",
    "info" : "VariableDeclarationStatement[39617-39651]:VariableDeclarationStatement[39617-39651]"
  }, {
    "left" : "while (key != null)",
    "right" : "while (key != null)",
    "info" : "WhileStatement[39662-40251]:WhileStatement[39662-40251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39682-40251]:Block[39682-40251]"
  }, {
    "left" : "String keyName = NodeUtil.getStringValue(key);",
    "right" : "String keyName = NodeUtil.getStringValue(key);",
    "info" : "VariableDeclarationStatement[39696-39742]:VariableDeclarationStatement[39696-39742]"
  }, {
    "left" : "if (keyName == null)",
    "right" : "if (keyName == null)",
    "info" : "IfStatement[39755-40206]:IfStatement[39755-40206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39776-39956]:Block[39776-39956]"
  }, {
    "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
    "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
    "info" : "ExpressionStatement[39848-39942]:ExpressionStatement[39848-39942]"
  }, {
    "left" : "if (!codingConvention.isValidEnumKey(keyName))",
    "right" : "if (!codingConvention.isValidEnumKey(keyName))",
    "info" : "IfStatement[39962-40206]:IfStatement[39962-40206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40009-40133]:Block[40009-40133]"
  }, {
    "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
    "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
    "info" : "ExpressionStatement[40025-40119]:ExpressionStatement[40025-40119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40139-40206]:Block[40139-40206]"
  }, {
    "left" : "enumType.defineElement(keyName, key);",
    "right" : "enumType.defineElement(keyName, key);",
    "info" : "ExpressionStatement[40155-40192]:ExpressionStatement[40155-40192]"
  }, {
    "left" : "key = key.getNext();",
    "right" : "key = key.getNext();",
    "info" : "ExpressionStatement[40219-40239]:ExpressionStatement[40219-40239]"
  }, {
    "left" : "if (name != null && scope.isGlobal())",
    "right" : "if (name != null && scope.isGlobal())",
    "info" : "IfStatement[40277-40392]:IfStatement[40277-40392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40315-40392]:Block[40315-40392]"
  }, {
    "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
    "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
    "info" : "ExpressionStatement[40325-40384]:ExpressionStatement[40325-40384]"
  }, {
    "left" : "return enumType;",
    "right" : "return enumType;",
    "info" : "ReturnStatement[40400-40416]:ReturnStatement[40400-40416]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40832-40839]:Modifier[40832-40839]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40840-40844]:PrimitiveType[40840-40844]"
  }, {
    "left" : "defineSlot",
    "right" : "defineSlot",
    "info" : "SimpleName[40845-40855]:SimpleName[40845-40855]"
  }, {
    "left" : "Node name",
    "right" : "Node name",
    "info" : "SingleVariableDeclaration[40856-40865]:SingleVariableDeclaration[40856-40865]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[40867-40878]:SingleVariableDeclaration[40867-40878]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[40880-40891]:SingleVariableDeclaration[40880-40891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40893-40952]:Block[40893-40952]"
  }, {
    "left" : "defineSlot(name, parent, type, type == null);",
    "right" : "defineSlot(name, parent, type, type == null);",
    "info" : "ExpressionStatement[40901-40946]:ExpressionStatement[40901-40946]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[41441-41445]:PrimitiveType[41441-41445]"
  }, {
    "left" : "defineSlot",
    "right" : "defineSlot",
    "info" : "SimpleName[41446-41456]:SimpleName[41446-41456]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41457-41463]:SingleVariableDeclaration[41457-41463]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[41465-41476]:SingleVariableDeclaration[41465-41476]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[41478-41489]:SingleVariableDeclaration[41478-41489]"
  }, {
    "left" : "boolean inferred",
    "right" : "boolean inferred",
    "info" : "SingleVariableDeclaration[41491-41507]:SingleVariableDeclaration[41491-41507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41509-42136]:Block[41509-42136]"
  }, {
    "left" : "Preconditions.checkArgument(inferred || type != null);",
    "right" : "Preconditions.checkArgument(inferred || type != null);",
    "info" : "ExpressionStatement[41517-41571]:ExpressionStatement[41517-41571]"
  }, {
    "left" : "if (n.isName())",
    "right" : "if (n.isName())",
    "info" : "IfStatement[41716-42063]:IfStatement[41716-42063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41732-41910]:Block[41732-41910]"
  }, {
    "left" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
    "right" : "Preconditions.checkArgument(\n            parent.isFunction() ||\n            parent.isVar() ||\n            parent.isParamList() ||\n            parent.isCatch());",
    "info" : "ExpressionStatement[41742-41902]:ExpressionStatement[41742-41902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41916-42063]:Block[41916-42063]"
  }, {
    "left" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
    "right" : "Preconditions.checkArgument(\n            n.isGetProp() &&\n            (parent.isAssign() ||\n             parent.isExprResult()));",
    "info" : "ExpressionStatement[41926-42055]:ExpressionStatement[41926-42055]"
  }, {
    "left" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
    "right" : "defineSlot(n, parent, n.getQualifiedName(), type, inferred);",
    "info" : "ExpressionStatement[42070-42130]:ExpressionStatement[42070-42130]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42572-42576]:PrimitiveType[42572-42576]"
  }, {
    "left" : "defineSlot",
    "right" : "defineSlot",
    "info" : "SimpleName[42577-42587]:SimpleName[42577-42587]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42588-42594]:SingleVariableDeclaration[42588-42594]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[42596-42607]:SingleVariableDeclaration[42596-42607]"
  }, {
    "left" : "String variableName",
    "right" : "String variableName",
    "info" : "SingleVariableDeclaration[42609-42628]:SingleVariableDeclaration[42609-42628]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[42638-42649]:SingleVariableDeclaration[42638-42649]"
  }, {
    "left" : "boolean inferred",
    "right" : "boolean inferred",
    "info" : "SingleVariableDeclaration[42651-42667]:SingleVariableDeclaration[42651-42667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42669-46415]:Block[42669-46415]"
  }, {
    "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
    "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
    "info" : "ExpressionStatement[42677-42730]:ExpressionStatement[42677-42730]"
  }, {
    "left" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
    "right" : "boolean isGlobalVar = n.isName() && scope.isGlobal();",
    "info" : "VariableDeclarationStatement[42738-42791]:VariableDeclarationStatement[42738-42791]"
  }, {
    "left" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
    "right" : "boolean shouldDeclareOnGlobalThis =\n          isGlobalVar &&\n          (parent.isVar() ||\n           parent.isFunction());",
    "info" : "VariableDeclarationStatement[42798-42920]:VariableDeclarationStatement[42798-42920]"
  }, {
    "left" : "Scope scopeToDeclareIn = scope;",
    "right" : "Scope scopeToDeclareIn = scope;",
    "info" : "VariableDeclarationStatement[43128-43159]:VariableDeclarationStatement[43128-43159]"
  }, {
    "left" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
    "right" : "if (n.isGetProp() && !scope.isGlobal() &&\n          isQnameRootedInGlobalScope(n))",
    "info" : "IfStatement[43166-43547]:IfStatement[43166-43547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43249-43547]:Block[43249-43547]"
  }, {
    "left" : "Scope globalScope = scope.getGlobalScope();",
    "right" : "Scope globalScope = scope.getGlobalScope();",
    "info" : "VariableDeclarationStatement[43259-43302]:VariableDeclarationStatement[43259-43302]"
  }, {
    "left" : "if (!globalScope.isDeclared(variableName, false))",
    "right" : "if (!globalScope.isDeclared(variableName, false))",
    "info" : "IfStatement[43425-43539]:IfStatement[43425-43539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43475-43539]:Block[43475-43539]"
  }, {
    "left" : "scopeToDeclareIn = scope.getGlobalScope();",
    "right" : "scopeToDeclareIn = scope.getGlobalScope();",
    "info" : "ExpressionStatement[43487-43529]:ExpressionStatement[43487-43529]"
  }, {
    "left" : "Var newVar = null;",
    "right" : "Var newVar = null;",
    "info" : "VariableDeclarationStatement[43672-43690]:VariableDeclarationStatement[43672-43690]"
  }, {
    "left" : "CompilerInput input = compiler.getInput(inputId);",
    "right" : "CompilerInput input = compiler.getInput(inputId);",
    "info" : "VariableDeclarationStatement[43734-43783]:VariableDeclarationStatement[43734-43783]"
  }, {
    "left" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
    "right" : "if (scopeToDeclareIn.isDeclared(variableName, false))",
    "info" : "IfStatement[43790-44596]:IfStatement[43790-44596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43844-44037]:Block[43844-44037]"
  }, {
    "left" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
    "right" : "Var oldVar = scopeToDeclareIn.getVar(variableName);",
    "info" : "VariableDeclarationStatement[43854-43905]:VariableDeclarationStatement[43854-43905]"
  }, {
    "left" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
    "right" : "newVar = validator.expectUndeclaredVariable(\n            sourceName, input, n, parent, oldVar, variableName, type);",
    "info" : "ExpressionStatement[43914-44029]:ExpressionStatement[43914-44029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44043-44596]:Block[44043-44596]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[44053-44118]:IfStatement[44053-44118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44071-44118]:Block[44071-44118]"
  }, {
    "left" : "setDeferredType(n, type);",
    "right" : "setDeferredType(n, type);",
    "info" : "ExpressionStatement[44083-44108]:ExpressionStatement[44083-44108]"
  }, {
    "left" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
    "right" : "newVar =\n          scopeToDeclareIn.declare(variableName, n, type, input, inferred);",
    "info" : "ExpressionStatement[44128-44212]:ExpressionStatement[44128-44212]"
  }, {
    "left" : "if (type instanceof EnumType)",
    "right" : "if (type instanceof EnumType)",
    "info" : "IfStatement[44222-44588]:IfStatement[44222-44588]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44252-44588]:Block[44252-44588]"
  }, {
    "left" : "Node initialValue = newVar.getInitialValue();",
    "right" : "Node initialValue = newVar.getInitialValue();",
    "info" : "VariableDeclarationStatement[44264-44309]:VariableDeclarationStatement[44264-44309]"
  }, {
    "left" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
    "right" : "boolean isValidValue = initialValue != null &&\n              (initialValue.isObjectLit() ||\n               initialValue.isQualifiedName());",
    "info" : "VariableDeclarationStatement[44320-44459]:VariableDeclarationStatement[44320-44459]"
  }, {
    "left" : "if (!isValidValue)",
    "right" : "if (!isValidValue)",
    "info" : "IfStatement[44470-44578]:IfStatement[44470-44578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44489-44578]:Block[44489-44578]"
  }, {
    "left" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
    "right" : "compiler.report(JSError.make(sourceName, n, ENUM_INITIALIZER));",
    "info" : "ExpressionStatement[44503-44566]:ExpressionStatement[44503-44566]"
  }, {
    "left" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
    "right" : "FunctionType fnType = JSType.toMaybeFunctionType(type);",
    "info" : "VariableDeclarationStatement[44681-44736]:VariableDeclarationStatement[44681-44736]"
  }, {
    "left" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
    "right" : "if (fnType != null &&\n          // We don't want to look at empty function types.\n          !type.isEmptyType())",
    "info" : "IfStatement[44743-45472]:IfStatement[44743-45472]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44856-45472]:Block[44856-45472]"
  }, {
    "left" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            variableName.equals(fnType.getReferenceName()))",
    "right" : "if ((fnType.isConstructor() || fnType.isInterface()) &&\n            variableName.equals(fnType.getReferenceName()))",
    "info" : "IfStatement[45202-45464]:IfStatement[45202-45464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45318-45464]:Block[45318-45464]"
  }, {
    "left" : "finishConstructorDefinition(n, variableName, fnType, scopeToDeclareIn,\n                                      input, newVar);",
    "right" : "finishConstructorDefinition(n, variableName, fnType, scopeToDeclareIn,\n                                      input, newVar);",
    "info" : "ExpressionStatement[45330-45454]:ExpressionStatement[45330-45454]"
  }, {
    "left" : "if (shouldDeclareOnGlobalThis)",
    "right" : "if (shouldDeclareOnGlobalThis)",
    "info" : "IfStatement[45480-45907]:IfStatement[45480-45907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45511-45907]:Block[45511-45907]"
  }, {
    "left" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
    "right" : "ObjectType globalThis =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS);",
    "info" : "VariableDeclarationStatement[45521-45603]:VariableDeclarationStatement[45521-45603]"
  }, {
    "left" : "if (inferred)",
    "right" : "if (inferred)",
    "info" : "IfStatement[45612-45899]:IfStatement[45612-45899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45626-45814]:Block[45626-45814]"
  }, {
    "left" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
    "right" : "globalThis.defineInferredProperty(variableName,\n              type == null ?\n              getNativeType(JSTypeNative.NO_TYPE) :\n              type,\n              n);",
    "info" : "ExpressionStatement[45638-45804]:ExpressionStatement[45638-45804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45820-45899]:Block[45820-45899]"
  }, {
    "left" : "globalThis.defineDeclaredProperty(variableName, type, n);",
    "right" : "globalThis.defineDeclaredProperty(variableName, type, n);",
    "info" : "ExpressionStatement[45832-45889]:ExpressionStatement[45832-45889]"
  }, {
    "left" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
    "right" : "if (isGlobalVar && \"Window\".equals(variableName)\n          && type != null\n          && type.isFunctionType()\n          && type.isConstructor())",
    "info" : "IfStatement[45915-46409]:IfStatement[45915-46409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46060-46409]:Block[46060-46409]"
  }, {
    "left" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
    "right" : "FunctionType globalThisCtor =\n            typeRegistry.getNativeObjectType(GLOBAL_THIS).getConstructor();",
    "info" : "VariableDeclarationStatement[46070-46175]:VariableDeclarationStatement[46070-46175]"
  }, {
    "left" : "globalThisCtor.getInstanceType().clearCachedValues();",
    "right" : "globalThisCtor.getInstanceType().clearCachedValues();",
    "info" : "ExpressionStatement[46184-46237]:ExpressionStatement[46184-46237]"
  }, {
    "left" : "globalThisCtor.getPrototype().clearCachedValues();",
    "right" : "globalThisCtor.getPrototype().clearCachedValues();",
    "info" : "ExpressionStatement[46246-46296]:ExpressionStatement[46246-46296]"
  }, {
    "left" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
    "right" : "globalThisCtor\n            .setPrototypeBasedOn((type.toMaybeFunctionType()).getInstanceType());",
    "info" : "ExpressionStatement[46305-46401]:ExpressionStatement[46305-46401]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46421-46428]:Modifier[46421-46428]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[46429-46433]:PrimitiveType[46429-46433]"
  }, {
    "left" : "finishConstructorDefinition",
    "right" : "finishConstructorDefinition",
    "info" : "SimpleName[46434-46461]:SimpleName[46434-46461]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46471-46477]:SingleVariableDeclaration[46471-46477]"
  }, {
    "left" : "String variableName",
    "right" : "String variableName",
    "info" : "SingleVariableDeclaration[46479-46498]:SingleVariableDeclaration[46479-46498]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[46500-46519]:SingleVariableDeclaration[46500-46519]"
  }, {
    "left" : "Scope scopeToDeclareIn",
    "right" : "Scope scopeToDeclareIn",
    "info" : "SingleVariableDeclaration[46529-46551]:SingleVariableDeclaration[46529-46551]"
  }, {
    "left" : "CompilerInput input",
    "right" : "CompilerInput input",
    "info" : "SingleVariableDeclaration[46553-46572]:SingleVariableDeclaration[46553-46572]"
  }, {
    "left" : "Var newVar",
    "right" : "Var newVar",
    "info" : "SingleVariableDeclaration[46574-46584]:SingleVariableDeclaration[46574-46584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46586-48355]:Block[46586-48355]"
  }, {
    "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
    "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[46645-46709]:VariableDeclarationStatement[46645-46709]"
  }, {
    "left" : "Property prototypeSlot = fnType.getSlot(\"prototype\");",
    "right" : "Property prototypeSlot = fnType.getSlot(\"prototype\");",
    "info" : "VariableDeclarationStatement[46716-46769]:VariableDeclarationStatement[46716-46769]"
  }, {
    "left" : "prototypeSlot.setNode(n);",
    "right" : "prototypeSlot.setNode(n);",
    "info" : "ExpressionStatement[47194-47219]:ExpressionStatement[47194-47219]"
  }, {
    "left" : "String prototypeName = variableName + \".prototype\";",
    "right" : "String prototypeName = variableName + \".prototype\";",
    "info" : "VariableDeclarationStatement[47227-47278]:VariableDeclarationStatement[47227-47278]"
  }, {
    "left" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
    "right" : "Var prototypeVar = scopeToDeclareIn.getVar(prototypeName);",
    "info" : "VariableDeclarationStatement[47494-47552]:VariableDeclarationStatement[47494-47552]"
  }, {
    "left" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
    "right" : "if (prototypeVar != null && prototypeVar.scope == scopeToDeclareIn)",
    "info" : "IfStatement[47559-47686]:IfStatement[47559-47686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47627-47686]:Block[47627-47686]"
  }, {
    "left" : "scopeToDeclareIn.undeclare(prototypeVar);",
    "right" : "scopeToDeclareIn.undeclare(prototypeVar);",
    "info" : "ExpressionStatement[47637-47678]:ExpressionStatement[47637-47678]"
  }, {
    "left" : "scopeToDeclareIn.declare(prototypeName,\n          n, prototypeSlot.getType(), input,\n          /* declared iff there's an explicit supertype */\n          superClassCtor == null ||\n          superClassCtor.getInstanceType().isEquivalentTo(\n              getNativeType(OBJECT_TYPE)));",
    "right" : "scopeToDeclareIn.declare(prototypeName,\n          n, prototypeSlot.getType(), input,\n          /* declared iff there's an explicit supertype */\n          superClassCtor == null ||\n          superClassCtor.getInstanceType().isEquivalentTo(\n              getNativeType(OBJECT_TYPE)));",
    "info" : "ExpressionStatement[47694-47976]:ExpressionStatement[47694-47976]"
  }, {
    "left" : "if (newVar.getInitialValue() == null &&\n          !n.isFromExterns())",
    "right" : "if (newVar.getInitialValue() == null &&\n          !n.isFromExterns())",
    "info" : "IfStatement[48078-48349]:IfStatement[48078-48349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48148-48349]:Block[48148-48349]"
  }, {
    "left" : "compiler.report(\n            JSError.make(sourceName, n,\n                fnType.isConstructor() ?\n                CTOR_INITIALIZER : IFACE_INITIALIZER,\n                variableName));",
    "right" : "compiler.report(\n            JSError.make(sourceName, n,\n                fnType.isConstructor() ?\n                CTOR_INITIALIZER : IFACE_INITIALIZER,\n                variableName));",
    "info" : "ExpressionStatement[48158-48341]:ExpressionStatement[48158-48341]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48453-48460]:Modifier[48453-48460]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[48461-48468]:PrimitiveType[48461-48468]"
  }, {
    "left" : "isQnameRootedInGlobalScope",
    "right" : "isQnameRootedInGlobalScope",
    "info" : "SimpleName[48469-48495]:SimpleName[48469-48495]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48496-48502]:SingleVariableDeclaration[48496-48502]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48504-48601]:Block[48504-48601]"
  }, {
    "left" : "Scope scope = getQnameRootScope(n);",
    "right" : "Scope scope = getQnameRootScope(n);",
    "info" : "VariableDeclarationStatement[48512-48547]:VariableDeclarationStatement[48512-48547]"
  }, {
    "left" : "return scope != null && scope.isGlobal();",
    "right" : "return scope != null && scope.isGlobal();",
    "info" : "ReturnStatement[48554-48595]:ReturnStatement[48554-48595]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48679-48686]:Modifier[48679-48686]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[48687-48692]:SimpleType[48687-48692]"
  }, {
    "left" : "getQnameRootScope",
    "right" : "getQnameRootScope",
    "info" : "SimpleName[48693-48710]:SimpleName[48693-48710]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48711-48717]:SingleVariableDeclaration[48711-48717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48719-48954]:Block[48719-48954]"
  }, {
    "left" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
    "right" : "Node root = NodeUtil.getRootOfQualifiedName(n);",
    "info" : "VariableDeclarationStatement[48727-48774]:VariableDeclarationStatement[48727-48774]"
  }, {
    "left" : "if (root.isName())",
    "right" : "if (root.isName())",
    "info" : "IfStatement[48781-48929]:IfStatement[48781-48929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48800-48929]:Block[48800-48929]"
  }, {
    "left" : "Var var = scope.getVar(root.getString());",
    "right" : "Var var = scope.getVar(root.getString());",
    "info" : "VariableDeclarationStatement[48810-48851]:VariableDeclarationStatement[48810-48851]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[48860-48921]:IfStatement[48860-48921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48877-48921]:Block[48877-48921]"
  }, {
    "left" : "return var.getScope();",
    "right" : "return var.getScope();",
    "info" : "ReturnStatement[48889-48911]:ReturnStatement[48889-48911]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[48936-48948]:ReturnStatement[48936-48948]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49302-49309]:Modifier[49302-49309]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[49310-49316]:SimpleType[49310-49316]"
  }, {
    "left" : "getDeclaredType",
    "right" : "getDeclaredType",
    "info" : "SimpleName[49317-49332]:SimpleName[49317-49332]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[49333-49347]:SingleVariableDeclaration[49333-49347]"
  }, {
    "left" : "Node lValue",
    "right" : "Node lValue",
    "info" : "SingleVariableDeclaration[49349-49360]:SingleVariableDeclaration[49349-49360]"
  }, {
    "left" : "@Nullable Node rValue",
    "right" : "@Nullable Node rValue",
    "info" : "SingleVariableDeclaration[49370-49391]:SingleVariableDeclaration[49370-49391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49393-51645]:Block[49393-51645]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[49401-50213]:IfStatement[49401-50213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49437-49504]:Block[49437-49504]"
  }, {
    "left" : "return getDeclaredTypeInAnnotation(lValue, info);",
    "right" : "return getDeclaredTypeInAnnotation(lValue, info);",
    "info" : "ReturnStatement[49447-49496]:ReturnStatement[49447-49496]"
  }, {
    "left" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
    "right" : "if (rValue != null && rValue.isFunction() &&\n          shouldUseFunctionLiteralType(\n              JSType.toMaybeFunctionType(rValue.getJSType()), info, lValue))",
    "info" : "IfStatement[49510-50213]:IfStatement[49510-50213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49672-49716]:Block[49672-49716]"
  }, {
    "left" : "return rValue.getJSType();",
    "right" : "return rValue.getJSType();",
    "info" : "ReturnStatement[49682-49708]:ReturnStatement[49682-49708]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[49722-50213]:IfStatement[49722-50213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49740-50213]:Block[49740-50213]"
  }, {
    "left" : "if (info.hasEnumParameterType())",
    "right" : "if (info.hasEnumParameterType())",
    "info" : "IfStatement[49750-50205]:IfStatement[49750-50205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49783-50030]:Block[49783-50030]"
  }, {
    "left" : "if (rValue != null && rValue.isObjectLit())",
    "right" : "if (rValue != null && rValue.isObjectLit())",
    "info" : "IfStatement[49795-50020]:IfStatement[49795-50020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49839-49891]:Block[49839-49891]"
  }, {
    "left" : "return rValue.getJSType();",
    "right" : "return rValue.getJSType();",
    "info" : "ReturnStatement[49853-49879]:ReturnStatement[49853-49879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49897-50020]:Block[49897-50020]"
  }, {
    "left" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
    "right" : "return createEnumTypeFromNodes(\n                rValue, lValue.getQualifiedName(), info, lValue);",
    "info" : "ReturnStatement[49911-50008]:ReturnStatement[49911-50008]"
  }, {
    "left" : "if (info.isConstructor() || info.isInterface())",
    "right" : "if (info.isConstructor() || info.isInterface())",
    "info" : "IfStatement[50036-50205]:IfStatement[50036-50205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50084-50205]:Block[50084-50205]"
  }, {
    "left" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
    "right" : "return createFunctionTypeFromNodes(\n              rValue, lValue.getQualifiedName(), info, lValue);",
    "info" : "ReturnStatement[50096-50195]:ReturnStatement[50096-50195]"
  }, {
    "left" : "if (isConstantSymbol(info, lValue))",
    "right" : "if (isConstantSymbol(info, lValue))",
    "info" : "IfStatement[50285-51582]:IfStatement[50285-51582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50321-51582]:Block[50321-51582]"
  }, {
    "left" : "if (rValue != null)",
    "right" : "if (rValue != null)",
    "info" : "IfStatement[50331-51574]:IfStatement[50331-51574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50351-51574]:Block[50351-51574]"
  }, {
    "left" : "JSDocInfo rValueInfo = rValue.getJSDocInfo();",
    "right" : "JSDocInfo rValueInfo = rValue.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[50363-50408]:VariableDeclarationStatement[50363-50408]"
  }, {
    "left" : "if (rValueInfo != null && rValueInfo.hasType())",
    "right" : "if (rValueInfo != null && rValueInfo.hasType())",
    "info" : "IfStatement[50419-51564]:IfStatement[50419-51564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50467-50627]:Block[50467-50627]"
  }, {
    "left" : "return rValueInfo.getType().evaluate(scope, typeRegistry);",
    "right" : "return rValueInfo.getType().evaluate(scope, typeRegistry);",
    "info" : "ReturnStatement[50557-50615]:ReturnStatement[50557-50615]"
  }, {
    "left" : "if (rValue.getJSType() != null\n              && !rValue.getJSType().isUnknownType())",
    "right" : "if (rValue.getJSType() != null\n              && !rValue.getJSType().isUnknownType())",
    "info" : "IfStatement[50633-51564]:IfStatement[50633-51564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50718-50890]:Block[50718-50890]"
  }, {
    "left" : "return rValue.getJSType();",
    "right" : "return rValue.getJSType();",
    "info" : "ReturnStatement[50852-50878]:ReturnStatement[50852-50878]"
  }, {
    "left" : "if (rValue.isOr())",
    "right" : "if (rValue.isOr())",
    "info" : "IfStatement[50896-51564]:IfStatement[50896-51564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50915-51564]:Block[50915-51564]"
  }, {
    "left" : "Node firstClause = rValue.getFirstChild();",
    "right" : "Node firstClause = rValue.getFirstChild();",
    "info" : "VariableDeclarationStatement[51107-51149]:VariableDeclarationStatement[51107-51149]"
  }, {
    "left" : "Node secondClause = firstClause.getNext();",
    "right" : "Node secondClause = firstClause.getNext();",
    "info" : "VariableDeclarationStatement[51162-51204]:VariableDeclarationStatement[51162-51204]"
  }, {
    "left" : "boolean namesMatch = firstClause.isName()\n                && lValue.isName()\n                && firstClause.getString().equals(lValue.getString());",
    "right" : "boolean namesMatch = firstClause.isName()\n                && lValue.isName()\n                && firstClause.getString().equals(lValue.getString());",
    "info" : "VariableDeclarationStatement[51217-51364]:VariableDeclarationStatement[51217-51364]"
  }, {
    "left" : "if (namesMatch && secondClause.getJSType() != null\n                && !secondClause.getJSType().isUnknownType())",
    "right" : "if (namesMatch && secondClause.getJSType() != null\n                && !secondClause.getJSType().isUnknownType())",
    "info" : "IfStatement[51377-51552]:IfStatement[51377-51552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51490-51552]:Block[51490-51552]"
  }, {
    "left" : "return secondClause.getJSType();",
    "right" : "return secondClause.getJSType();",
    "info" : "ReturnStatement[51506-51538]:ReturnStatement[51506-51538]"
  }, {
    "left" : "return getDeclaredTypeInAnnotation(lValue, info);",
    "right" : "return getDeclaredTypeInAnnotation(lValue, info);",
    "info" : "ReturnStatement[51590-51639]:ReturnStatement[51590-51639]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51651-51658]:Modifier[51651-51658]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[51659-51671]:SimpleType[51659-51671]"
  }, {
    "left" : "getFunctionType",
    "right" : "getFunctionType",
    "info" : "SimpleName[51672-51687]:SimpleName[51672-51687]"
  }, {
    "left" : "@Nullable Var v",
    "right" : "@Nullable Var v",
    "info" : "SingleVariableDeclaration[51688-51703]:SingleVariableDeclaration[51688-51703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51705-51862]:Block[51705-51862]"
  }, {
    "left" : "JSType t = v == null ? null : v.getType();",
    "right" : "JSType t = v == null ? null : v.getType();",
    "info" : "VariableDeclarationStatement[51713-51755]:VariableDeclarationStatement[51713-51755]"
  }, {
    "left" : "ObjectType o = t == null ? null : t.dereference();",
    "right" : "ObjectType o = t == null ? null : t.dereference();",
    "info" : "VariableDeclarationStatement[51762-51812]:VariableDeclarationStatement[51762-51812]"
  }, {
    "left" : "return JSType.toMaybeFunctionType(o);",
    "right" : "return JSType.toMaybeFunctionType(o);",
    "info" : "ReturnStatement[51819-51856]:ReturnStatement[51819-51856]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51955-51962]:Modifier[51955-51962]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[51963-51967]:PrimitiveType[51963-51967]"
  }, {
    "left" : "checkForCallingConventionDefiningCalls",
    "right" : "checkForCallingConventionDefiningCalls",
    "info" : "SimpleName[51968-52006]:SimpleName[51968-52006]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52016-52022]:SingleVariableDeclaration[52016-52022]"
  }, {
    "left" : "Map<String, String> delegateCallingConventions",
    "right" : "Map<String, String> delegateCallingConventions",
    "info" : "SingleVariableDeclaration[52024-52070]:SingleVariableDeclaration[52024-52070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52072-52183]:Block[52072-52183]"
  }, {
    "left" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
    "right" : "codingConvention.checkForCallingConventionDefiningCalls(n,\n          delegateCallingConventions);",
    "info" : "ExpressionStatement[52080-52177]:ExpressionStatement[52080-52177]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52386-52393]:Modifier[52386-52393]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52394-52398]:PrimitiveType[52394-52398]"
  }, {
    "left" : "checkForClassDefiningCalls",
    "right" : "checkForClassDefiningCalls",
    "info" : "SimpleName[52399-52425]:SimpleName[52399-52425]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[52426-52441]:SingleVariableDeclaration[52426-52441]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52443-52449]:SingleVariableDeclaration[52443-52449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52451-55395]:Block[52451-55395]"
  }, {
    "left" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
    "right" : "SubclassRelationship relationship =\n          codingConvention.getClassesDefinedByCall(n);",
    "info" : "VariableDeclarationStatement[52459-52549]:VariableDeclarationStatement[52459-52549]"
  }, {
    "left" : "if (relationship != null)",
    "right" : "if (relationship != null)",
    "info" : "IfStatement[52556-53725]:IfStatement[52556-53725]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52582-53725]:Block[52582-53725]"
  }, {
    "left" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
    "right" : "FunctionType superCtor = getFunctionType(\n            scope.getVar(relationship.superclassName));",
    "info" : "VariableDeclarationStatement[52592-52689]:VariableDeclarationStatement[52592-52689]"
  }, {
    "left" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
    "right" : "FunctionType subCtor = getFunctionType(\n            scope.getVar(relationship.subclassName));",
    "info" : "VariableDeclarationStatement[52698-52791]:VariableDeclarationStatement[52698-52791]"
  }, {
    "left" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
    "right" : "if (superCtor != null && superCtor.isConstructor() &&\n            subCtor != null && subCtor.isConstructor())",
    "info" : "IfStatement[52800-53717]:IfStatement[52800-53717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52910-53717]:Block[52910-53717]"
  }, {
    "left" : "ObjectType superClass = superCtor.getInstanceType();",
    "right" : "ObjectType superClass = superCtor.getInstanceType();",
    "info" : "VariableDeclarationStatement[52922-52974]:VariableDeclarationStatement[52922-52974]"
  }, {
    "left" : "ObjectType subClass = subCtor.getInstanceType();",
    "right" : "ObjectType subClass = subCtor.getInstanceType();",
    "info" : "VariableDeclarationStatement[52985-53033]:VariableDeclarationStatement[52985-53033]"
  }, {
    "left" : "superCtor = superClass.getConstructor();",
    "right" : "superCtor = superClass.getConstructor();",
    "info" : "ExpressionStatement[53231-53271]:ExpressionStatement[53231-53271]"
  }, {
    "left" : "subCtor = subClass.getConstructor();",
    "right" : "subCtor = subClass.getConstructor();",
    "info" : "ExpressionStatement[53282-53318]:ExpressionStatement[53282-53318]"
  }, {
    "left" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
    "right" : "if (relationship.type == SubclassType.INHERITS &&\n              !superClass.isEmptyType() && !subClass.isEmptyType())",
    "info" : "IfStatement[53330-53528]:IfStatement[53330-53528]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53448-53528]:Block[53448-53528]"
  }, {
    "left" : "validator.expectSuperType(t, n, superClass, subClass);",
    "right" : "validator.expectSuperType(t, n, superClass, subClass);",
    "info" : "ExpressionStatement[53462-53516]:ExpressionStatement[53462-53516]"
  }, {
    "left" : "if (superCtor != null && subCtor != null)",
    "right" : "if (superCtor != null && subCtor != null)",
    "info" : "IfStatement[53540-53707]:IfStatement[53540-53707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53582-53707]:Block[53582-53707]"
  }, {
    "left" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
    "right" : "codingConvention.applySubclassRelationship(\n                superCtor, subCtor, relationship.type);",
    "info" : "ExpressionStatement[53596-53695]:ExpressionStatement[53596-53695]"
  }, {
    "left" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
    "right" : "String singletonGetterClassName =\n          codingConvention.getSingletonGetterClassName(n);",
    "info" : "VariableDeclarationStatement[53733-53825]:VariableDeclarationStatement[53733-53825]"
  }, {
    "left" : "if (singletonGetterClassName != null)",
    "right" : "if (singletonGetterClassName != null)",
    "info" : "IfStatement[53832-54355]:IfStatement[53832-54355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53870-54355]:Block[53870-54355]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
    "right" : "ObjectType objectType = ObjectType.cast(\n            typeRegistry.getType(singletonGetterClassName));",
    "info" : "VariableDeclarationStatement[53880-53981]:VariableDeclarationStatement[53880-53981]"
  }, {
    "left" : "if (objectType != null)",
    "right" : "if (objectType != null)",
    "info" : "IfStatement[53990-54347]:IfStatement[53990-54347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54014-54347]:Block[54014-54347]"
  }, {
    "left" : "FunctionType functionType = objectType.getConstructor();",
    "right" : "FunctionType functionType = objectType.getConstructor();",
    "info" : "VariableDeclarationStatement[54026-54082]:VariableDeclarationStatement[54026-54082]"
  }, {
    "left" : "if (functionType != null)",
    "right" : "if (functionType != null)",
    "info" : "IfStatement[54094-54337]:IfStatement[54094-54337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54120-54337]:Block[54120-54337]"
  }, {
    "left" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
    "right" : "FunctionType getterType =\n                typeRegistry.createFunctionType(objectType);",
    "info" : "VariableDeclarationStatement[54134-54220]:VariableDeclarationStatement[54134-54220]"
  }, {
    "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
    "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                objectType);",
    "info" : "ExpressionStatement[54233-54325]:ExpressionStatement[54233-54325]"
  }, {
    "left" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
    "right" : "DelegateRelationship delegateRelationship =\n          codingConvention.getDelegateRelationship(n);",
    "info" : "VariableDeclarationStatement[54363-54461]:VariableDeclarationStatement[54363-54461]"
  }, {
    "left" : "if (delegateRelationship != null)",
    "right" : "if (delegateRelationship != null)",
    "info" : "IfStatement[54468-54568]:IfStatement[54468-54568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54502-54568]:Block[54502-54568]"
  }, {
    "left" : "applyDelegateRelationship(delegateRelationship);",
    "right" : "applyDelegateRelationship(delegateRelationship);",
    "info" : "ExpressionStatement[54512-54560]:ExpressionStatement[54512-54560]"
  }, {
    "left" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(n);",
    "right" : "ObjectLiteralCast objectLiteralCast =\n          codingConvention.getObjectLiteralCast(n);",
    "info" : "VariableDeclarationStatement[54576-54665]:VariableDeclarationStatement[54576-54665]"
  }, {
    "left" : "if (objectLiteralCast != null)",
    "right" : "if (objectLiteralCast != null)",
    "info" : "IfStatement[54672-55389]:IfStatement[54672-55389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54703-55389]:Block[54703-55389]"
  }, {
    "left" : "if (objectLiteralCast.diagnosticType == null)",
    "right" : "if (objectLiteralCast.diagnosticType == null)",
    "info" : "IfStatement[54713-55381]:IfStatement[54713-55381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54759-55249]:Block[54759-55249]"
  }, {
    "left" : "ObjectType type = ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));",
    "right" : "ObjectType type = ObjectType.cast(\n              typeRegistry.getType(objectLiteralCast.typeName));",
    "info" : "VariableDeclarationStatement[54771-54870]:VariableDeclarationStatement[54771-54870]"
  }, {
    "left" : "if (type != null && type.getConstructor() != null)",
    "right" : "if (type != null && type.getConstructor() != null)",
    "info" : "IfStatement[54881-55239]:IfStatement[54881-55239]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54932-55113]:Block[54932-55113]"
  }, {
    "left" : "setDeferredType(objectLiteralCast.objectNode, type);",
    "right" : "setDeferredType(objectLiteralCast.objectNode, type);",
    "info" : "ExpressionStatement[54946-54998]:ExpressionStatement[54946-54998]"
  }, {
    "left" : "objectLiteralCast.objectNode.putBooleanProp(\n                Node.REFLECTED_OBJECT, true);",
    "right" : "objectLiteralCast.objectNode.putBooleanProp(\n                Node.REFLECTED_OBJECT, true);",
    "info" : "ExpressionStatement[55011-55101]:ExpressionStatement[55011-55101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55119-55239]:Block[55119-55239]"
  }, {
    "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));",
    "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                    CONSTRUCTOR_EXPECTED));",
    "info" : "ExpressionStatement[55133-55227]:ExpressionStatement[55133-55227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55255-55381]:Block[55255-55381]"
  }, {
    "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));",
    "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                  objectLiteralCast.diagnosticType));",
    "info" : "ExpressionStatement[55267-55371]:ExpressionStatement[55267-55371]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[55479-55486]:Modifier[55479-55486]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[55487-55491]:PrimitiveType[55487-55491]"
  }, {
    "left" : "applyDelegateRelationship",
    "right" : "applyDelegateRelationship",
    "info" : "SimpleName[55492-55517]:SimpleName[55492-55517]"
  }, {
    "left" : "DelegateRelationship delegateRelationship",
    "right" : "DelegateRelationship delegateRelationship",
    "info" : "SingleVariableDeclaration[55527-55568]:SingleVariableDeclaration[55527-55568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55570-57318]:Block[55570-57318]"
  }, {
    "left" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
    "right" : "ObjectType delegatorObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegator));",
    "info" : "VariableDeclarationStatement[55578-55688]:VariableDeclarationStatement[55578-55688]"
  }, {
    "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
    "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n          typeRegistry.getType(delegateRelationship.delegateBase));",
    "info" : "VariableDeclarationStatement[55695-55811]:VariableDeclarationStatement[55695-55811]"
  }, {
    "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
    "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n          typeRegistry.getType(codingConvention.getDelegateSuperclassName()));",
    "info" : "VariableDeclarationStatement[55818-55946]:VariableDeclarationStatement[55818-55946]"
  }, {
    "left" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
    "right" : "if (delegatorObject != null &&\n          delegateBaseObject != null &&\n          delegateSuperObject != null)",
    "info" : "IfStatement[55953-57312]:IfStatement[55953-57312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56063-57312]:Block[56063-57312]"
  }, {
    "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
    "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
    "info" : "VariableDeclarationStatement[56073-56135]:VariableDeclarationStatement[56073-56135]"
  }, {
    "left" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
    "right" : "FunctionType delegateBaseCtor = delegateBaseObject.getConstructor();",
    "info" : "VariableDeclarationStatement[56144-56212]:VariableDeclarationStatement[56144-56212]"
  }, {
    "left" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
    "right" : "FunctionType delegateSuperCtor = delegateSuperObject.getConstructor();",
    "info" : "VariableDeclarationStatement[56221-56291]:VariableDeclarationStatement[56221-56291]"
  }, {
    "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
    "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n            delegateSuperCtor != null)",
    "info" : "IfStatement[56301-57304]:IfStatement[56301-57304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56397-57304]:Block[56397-57304]"
  }, {
    "left" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
    "right" : "FunctionParamBuilder functionParamBuilder =\n              new FunctionParamBuilder(typeRegistry);",
    "info" : "VariableDeclarationStatement[56409-56506]:VariableDeclarationStatement[56409-56506]"
  }, {
    "left" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
    "right" : "functionParamBuilder.addRequiredParams(\n              getNativeType(U2U_CONSTRUCTOR_TYPE));",
    "info" : "ExpressionStatement[56517-56608]:ExpressionStatement[56517-56608]"
  }, {
    "left" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
    "right" : "FunctionType findDelegate = typeRegistry.createFunctionType(\n              typeRegistry.createDefaultObjectUnion(delegateBaseObject),\n              functionParamBuilder.build());",
    "info" : "VariableDeclarationStatement[56619-56797]:VariableDeclarationStatement[56619-56797]"
  }, {
    "left" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null, null);",
    "right" : "FunctionType delegateProxy = typeRegistry.createConstructorType(\n              delegateBaseObject.getReferenceName() + DELEGATE_PROXY_SUFFIX,\n              null, null, null, null);",
    "info" : "VariableDeclarationStatement[56809-56989]:VariableDeclarationStatement[56809-56989]"
  }, {
    "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
    "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseObject);",
    "info" : "ExpressionStatement[57000-57054]:ExpressionStatement[57000-57054]"
  }, {
    "left" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
    "right" : "codingConvention.applyDelegateRelationship(\n              delegateSuperObject, delegateBaseObject, delegatorObject,\n              delegateProxy, findDelegate);",
    "info" : "ExpressionStatement[57066-57225]:ExpressionStatement[57066-57225]"
  }, {
    "left" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
    "right" : "delegateProxyPrototypes.add(delegateProxy.getPrototype());",
    "info" : "ExpressionStatement[57236-57294]:ExpressionStatement[57236-57294]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57747-57751]:PrimitiveType[57747-57751]"
  }, {
    "left" : "maybeDeclareQualifiedName",
    "right" : "maybeDeclareQualifiedName",
    "info" : "SimpleName[57752-57777]:SimpleName[57752-57777]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[57778-57793]:SingleVariableDeclaration[57778-57793]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[57795-57809]:SingleVariableDeclaration[57795-57809]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[57819-57825]:SingleVariableDeclaration[57819-57825]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[57827-57838]:SingleVariableDeclaration[57827-57838]"
  }, {
    "left" : "Node rhsValue",
    "right" : "Node rhsValue",
    "info" : "SingleVariableDeclaration[57840-57853]:SingleVariableDeclaration[57840-57853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57855-62398]:Block[57855-62398]"
  }, {
    "left" : "Node ownerNode = n.getFirstChild();",
    "right" : "Node ownerNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[57863-57898]:VariableDeclarationStatement[57863-57898]"
  }, {
    "left" : "String ownerName = ownerNode.getQualifiedName();",
    "right" : "String ownerName = ownerNode.getQualifiedName();",
    "info" : "VariableDeclarationStatement[57905-57953]:VariableDeclarationStatement[57905-57953]"
  }, {
    "left" : "String qName = n.getQualifiedName();",
    "right" : "String qName = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[57960-57996]:VariableDeclarationStatement[57960-57996]"
  }, {
    "left" : "String propName = n.getLastChild().getString();",
    "right" : "String propName = n.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[58003-58050]:VariableDeclarationStatement[58003-58050]"
  }, {
    "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
    "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
    "info" : "ExpressionStatement[58057-58121]:ExpressionStatement[58057-58121]"
  }, {
    "left" : "JSType valueType = getDeclaredType(info, n, rhsValue);",
    "right" : "JSType valueType = getDeclaredType(info, n, rhsValue);",
    "info" : "VariableDeclarationStatement[58778-58832]:VariableDeclarationStatement[58778-58832]"
  }, {
    "left" : "if (valueType == null && rhsValue != null)",
    "right" : "if (valueType == null && rhsValue != null)",
    "info" : "IfStatement[58839-58968]:IfStatement[58839-58968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58882-58968]:Block[58882-58968]"
  }, {
    "left" : "valueType = rhsValue.getJSType();",
    "right" : "valueType = rhsValue.getJSType();",
    "info" : "ExpressionStatement[58927-58960]:ExpressionStatement[58927-58960]"
  }, {
    "left" : "if (\"prototype\".equals(propName))",
    "right" : "if (\"prototype\".equals(propName))",
    "info" : "IfStatement[59211-60421]:IfStatement[59211-60421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59245-60421]:Block[59245-60421]"
  }, {
    "left" : "Var qVar = scope.getVar(qName);",
    "right" : "Var qVar = scope.getVar(qName);",
    "info" : "VariableDeclarationStatement[59255-59286]:VariableDeclarationStatement[59255-59286]"
  }, {
    "left" : "if (qVar != null)",
    "right" : "if (qVar != null)",
    "info" : "IfStatement[59295-60413]:IfStatement[59295-60413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59313-60413]:Block[59313-60413]"
  }, {
    "left" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
    "right" : "ObjectType qVarType = ObjectType.cast(qVar.getType());",
    "info" : "VariableDeclarationStatement[59642-59696]:VariableDeclarationStatement[59642-59696]"
  }, {
    "left" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
    "right" : "if (qVarType != null &&\n              rhsValue != null &&\n              rhsValue.isObjectLit())",
    "info" : "IfStatement[59707-60359]:IfStatement[59707-60359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59803-59937]:Block[59803-59937]"
  }, {
    "left" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
    "right" : "typeRegistry.resetImplicitPrototype(\n                rhsValue.getJSType(), qVarType.getImplicitPrototype());",
    "info" : "ExpressionStatement[59817-59925]:ExpressionStatement[59817-59925]"
  }, {
    "left" : "if (!qVar.isTypeInferred())",
    "right" : "if (!qVar.isTypeInferred())",
    "info" : "IfStatement[59943-60359]:IfStatement[59943-60359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59971-60359]:Block[59971-60359]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[60340-60347]:ReturnStatement[60340-60347]"
  }, {
    "left" : "qVar.getScope().undeclare(qVar);",
    "right" : "qVar.getScope().undeclare(qVar);",
    "info" : "ExpressionStatement[60371-60403]:ExpressionStatement[60371-60403]"
  }, {
    "left" : "if (valueType == null)",
    "right" : "if (valueType == null)",
    "info" : "IfStatement[60429-60684]:IfStatement[60429-60684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60452-60684]:Block[60452-60684]"
  }, {
    "left" : "if (parent.isExprResult())",
    "right" : "if (parent.isExprResult())",
    "info" : "IfStatement[60462-60659]:IfStatement[60462-60659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60489-60659]:Block[60489-60659]"
  }, {
    "left" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
    "right" : "stubDeclarations.add(new StubDeclaration(\n              n,\n              t.getInput() != null && t.getInput().isExtern(),\n              ownerName));",
    "info" : "ExpressionStatement[60501-60649]:ExpressionStatement[60501-60649]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[60669-60676]:ReturnStatement[60669-60676]"
  }, {
    "left" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
    "right" : "boolean inferred = isQualifiedNameInferred(\n          qName, n, info, rhsValue, valueType);",
    "info" : "VariableDeclarationStatement[60692-60783]:VariableDeclarationStatement[60692-60783]"
  }, {
    "left" : "if (!inferred)",
    "right" : "if (!inferred)",
    "info" : "IfStatement[60790-62392]:IfStatement[60790-62392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60805-61661]:Block[60805-61661]"
  }, {
    "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "info" : "VariableDeclarationStatement[60815-60863]:VariableDeclarationStatement[60815-60863]"
  }, {
    "left" : "if (ownerType != null)",
    "right" : "if (ownerType != null)",
    "info" : "IfStatement[60872-61468]:IfStatement[60872-61468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60895-61468]:Block[60895-61468]"
  }, {
    "left" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
    "right" : "boolean isExtern = t.getInput() != null && t.getInput().isExtern();",
    "info" : "VariableDeclarationStatement[61008-61075]:VariableDeclarationStatement[61008-61075]"
  }, {
    "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
    "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
    "info" : "IfStatement[61086-61458]:IfStatement[61086-61458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61301-61458]:Block[61301-61458]"
  }, {
    "left" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
    "right" : "ownerType.defineDeclaredProperty(propName, valueType, n);",
    "info" : "ExpressionStatement[61389-61446]:ExpressionStatement[61389-61446]"
  }, {
    "left" : "defineSlot(n, parent, valueType, inferred);",
    "right" : "defineSlot(n, parent, valueType, inferred);",
    "info" : "ExpressionStatement[61610-61653]:ExpressionStatement[61610-61653]"
  }, {
    "left" : "if (rhsValue != null && rhsValue.isTrue())",
    "right" : "if (rhsValue != null && rhsValue.isTrue())",
    "info" : "IfStatement[61667-62392]:IfStatement[61667-62392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61710-62392]:Block[61710-62392]"
  }, {
    "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "info" : "VariableDeclarationStatement[61786-61834]:VariableDeclarationStatement[61786-61834]"
  }, {
    "left" : "FunctionType ownerFnType = JSType.toMaybeFunctionType(ownerType);",
    "right" : "FunctionType ownerFnType = JSType.toMaybeFunctionType(ownerType);",
    "info" : "VariableDeclarationStatement[61843-61908]:VariableDeclarationStatement[61843-61908]"
  }, {
    "left" : "if (ownerFnType != null)",
    "right" : "if (ownerFnType != null)",
    "info" : "IfStatement[61917-62384]:IfStatement[61917-62384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61942-62384]:Block[61942-62384]"
  }, {
    "left" : "JSType ownerTypeOfThis = ownerFnType.getTypeOfThis();",
    "right" : "JSType ownerTypeOfThis = ownerFnType.getTypeOfThis();",
    "info" : "VariableDeclarationStatement[61954-62007]:VariableDeclarationStatement[61954-62007]"
  }, {
    "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
    "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
    "info" : "VariableDeclarationStatement[62018-62085]:VariableDeclarationStatement[62018-62085]"
  }, {
    "left" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
    "right" : "JSType delegateType = delegateName == null ?\n              null : typeRegistry.getType(delegateName);",
    "info" : "VariableDeclarationStatement[62096-62197]:VariableDeclarationStatement[62096-62197]"
  }, {
    "left" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
    "right" : "if (delegateType != null &&\n              ownerTypeOfThis.isSubtype(delegateType))",
    "info" : "IfStatement[62208-62374]:IfStatement[62208-62374]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62291-62374]:Block[62291-62374]"
  }, {
    "left" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
    "right" : "defineSlot(n, parent, getNativeType(BOOLEAN_TYPE), true);",
    "info" : "ExpressionStatement[62305-62362]:ExpressionStatement[62305-62362]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[63431-63438]:Modifier[63431-63438]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63439-63446]:PrimitiveType[63439-63446]"
  }, {
    "left" : "isQualifiedNameInferred",
    "right" : "isQualifiedNameInferred",
    "info" : "SimpleName[63447-63470]:SimpleName[63447-63470]"
  }, {
    "left" : "String qName",
    "right" : "String qName",
    "info" : "SingleVariableDeclaration[63480-63492]:SingleVariableDeclaration[63480-63492]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[63494-63500]:SingleVariableDeclaration[63494-63500]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[63502-63516]:SingleVariableDeclaration[63502-63516]"
  }, {
    "left" : "Node rhsValue",
    "right" : "Node rhsValue",
    "info" : "SingleVariableDeclaration[63526-63539]:SingleVariableDeclaration[63526-63539]"
  }, {
    "left" : "JSType valueType",
    "right" : "JSType valueType",
    "info" : "SingleVariableDeclaration[63541-63557]:SingleVariableDeclaration[63541-63557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63559-65008]:Block[63559-65097]"
  }, {
    "left" : "if (valueType == null)",
    "right" : "if (valueType == null)",
    "info" : "IfStatement[63567-63620]:IfStatement[63567-63620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63590-63620]:Block[63590-63620]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[63600-63612]:ReturnStatement[63600-63612]"
  }, {
    "left" : "boolean inferred = true;",
    "right" : "boolean inferred = true;",
    "info" : "VariableDeclarationStatement[63674-63698]:VariableDeclarationStatement[63763-63787]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[63705-63990]:IfStatement[63794-64079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63723-63990]:Block[63812-64079]"
  }, {
    "left" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (isConstantSymbol(info, n) && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
    "right" : "inferred = !(info.hasType()\n            || info.hasEnumParameterType()\n            || (isConstantSymbol(info, n) && valueType != null\n                && !valueType.isUnknownType())\n            || FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
    "info" : "ExpressionStatement[63733-63982]:ExpressionStatement[63822-64071]"
  }, {
    "left" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
    "right" : "if (inferred && rhsValue != null && rhsValue.isFunction())",
    "info" : "IfStatement[63998-64979]:IfStatement[64087-65068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64057-64979]:Block[64146-65068]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[64067-64971]:IfStatement[64156-65060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64085-64120]:Block[64174-64209]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[64097-64110]:ReturnStatement[64186-64199]"
  }, {
    "left" : "if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName())",
    "right" : "if (!scope.isDeclared(qName, false) &&\n            n.isUnscopedQualifiedName())",
    "info" : "IfStatement[64126-64971]:IfStatement[64215-65060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64206-64971]:Block[64295-65060]"
  }, {
    "left" : "for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent())",
    "right" : "for (Node current = n.getParent();\n               !(current.isScript() || current.isFunction());\n               current = current.getParent())",
    "info" : "ForStatement[64341-64594]:ForStatement[64430-64683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64484-64594]:Block[64573-64683]"
  }, {
    "left" : "if (NodeUtil.isControlStructure(current))",
    "right" : "if (NodeUtil.isControlStructure(current))",
    "info" : "IfStatement[64498-64582]:IfStatement[64587-64671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64540-64582]:Block[64629-64671]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[64556-64568]:ReturnStatement[64645-64657]"
  }, {
    "left" : "AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());",
    "right" : "AstFunctionContents contents =\n              getFunctionAnalysisResults(scope.getRootNode());",
    "info" : "VariableDeclarationStatement[64726-64819]:VariableDeclarationStatement[64815-64908]"
  }, {
    "left" : "if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName))",
    "right" : "if (contents == null ||\n              !contents.getEscapedQualifiedNames().contains(qName))",
    "info" : "IfStatement[64830-64961]:IfStatement[64919-65050]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64922-64961]:Block[65011-65050]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[64936-64949]:ReturnStatement[65025-65038]"
  }, {
    "left" : "return inferred;",
    "right" : "return inferred;",
    "info" : "ReturnStatement[64986-65002]:ReturnStatement[65075-65091]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[65014-65021]:Modifier[65103-65110]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[65022-65029]:PrimitiveType[65111-65118]"
  }, {
    "left" : "isConstantSymbol",
    "right" : "isConstantSymbol",
    "info" : "SimpleName[65030-65046]:SimpleName[65119-65135]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[65047-65061]:SingleVariableDeclaration[65136-65150]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[65063-65072]:SingleVariableDeclaration[65152-65161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65074-65542]:Block[65163-65631]"
  }, {
    "left" : "if (info != null && info.isConstant())",
    "right" : "if (info != null && info.isConstant())",
    "info" : "IfStatement[65082-65151]:IfStatement[65171-65240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65121-65151]:Block[65210-65240]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[65131-65143]:ReturnStatement[65220-65232]"
  }, {
    "left" : "switch (node.getType()) {\n        case Token.NAME:\n          return NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node, node.getParent());\n        case Token.GETPROP:\n          return node.isQualifiedName() && NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node.getLastChild(), node);\n      }",
    "right" : "switch (node.getType()) {\n        case Token.NAME:\n          return NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node, node.getParent());\n        case Token.GETPROP:\n          return node.isQualifiedName() && NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node.getLastChild(), node);\n      }",
    "info" : "SwitchStatement[65159-65516]:SwitchStatement[65248-65605]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[65193-65209]:SwitchCase[65282-65298]"
  }, {
    "left" : "return NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node, node.getParent());",
    "right" : "return NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node, node.getParent());",
    "info" : "ReturnStatement[65220-65330]:ReturnStatement[65309-65419]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[65339-65358]:SwitchCase[65428-65447]"
  }, {
    "left" : "return node.isQualifiedName() && NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node.getLastChild(), node);",
    "right" : "return node.isQualifiedName() && NodeUtil.isConstantByConvention(\n              compiler.getCodingConvention(), node.getLastChild(), node);",
    "info" : "ReturnStatement[65369-65508]:ReturnStatement[65458-65597]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[65523-65536]:ReturnStatement[65612-65625]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[65768-65775]:Modifier[65857-65864]"
  }, {
    "left" : "ObjectType",
    "right" : "ObjectType",
    "info" : "SimpleType[65776-65786]:SimpleType[65865-65875]"
  }, {
    "left" : "getObjectSlot",
    "right" : "getObjectSlot",
    "info" : "SimpleName[65787-65800]:SimpleName[65876-65889]"
  }, {
    "left" : "String slotName",
    "right" : "String slotName",
    "info" : "SingleVariableDeclaration[65801-65816]:SingleVariableDeclaration[65890-65905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65818-66096]:Block[65907-66185]"
  }, {
    "left" : "Var ownerVar = scope.getVar(slotName);",
    "right" : "Var ownerVar = scope.getVar(slotName);",
    "info" : "VariableDeclarationStatement[65826-65864]:VariableDeclarationStatement[65915-65953]"
  }, {
    "left" : "if (ownerVar != null)",
    "right" : "if (ownerVar != null)",
    "info" : "IfStatement[65871-66071]:IfStatement[65960-66160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65893-66071]:Block[65982-66160]"
  }, {
    "left" : "JSType ownerVarType = ownerVar.getType();",
    "right" : "JSType ownerVarType = ownerVar.getType();",
    "info" : "VariableDeclarationStatement[65903-65944]:VariableDeclarationStatement[65992-66033]"
  }, {
    "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
    "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
    "info" : "ReturnStatement[65953-66063]:ReturnStatement[66042-66152]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[66078-66090]:ReturnStatement[66167-66179]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[66233-66237]:PrimitiveType[66322-66326]"
  }, {
    "left" : "resolveStubDeclarations",
    "right" : "resolveStubDeclarations",
    "info" : "SimpleName[66238-66261]:SimpleName[66327-66350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66264-67334]:Block[66353-67423]"
  }, {
    "left" : "for (StubDeclaration stub : stubDeclarations)",
    "right" : "for (StubDeclaration stub : stubDeclarations)",
    "info" : "EnhancedForStatement[66272-67328]:EnhancedForStatement[66361-67417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66318-67328]:Block[66407-67417]"
  }, {
    "left" : "Node n = stub.node;",
    "right" : "Node n = stub.node;",
    "info" : "VariableDeclarationStatement[66328-66347]:VariableDeclarationStatement[66417-66436]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[66356-66384]:VariableDeclarationStatement[66445-66473]"
  }, {
    "left" : "String qName = n.getQualifiedName();",
    "right" : "String qName = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[66393-66429]:VariableDeclarationStatement[66482-66518]"
  }, {
    "left" : "String propName = n.getLastChild().getString();",
    "right" : "String propName = n.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[66438-66485]:VariableDeclarationStatement[66527-66574]"
  }, {
    "left" : "String ownerName = stub.ownerName;",
    "right" : "String ownerName = stub.ownerName;",
    "info" : "VariableDeclarationStatement[66494-66528]:VariableDeclarationStatement[66583-66617]"
  }, {
    "left" : "boolean isExtern = stub.isExtern;",
    "right" : "boolean isExtern = stub.isExtern;",
    "info" : "VariableDeclarationStatement[66537-66570]:VariableDeclarationStatement[66626-66659]"
  }, {
    "left" : "if (scope.isDeclared(qName, false))",
    "right" : "if (scope.isDeclared(qName, false))",
    "info" : "IfStatement[66580-66647]:IfStatement[66669-66736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66616-66647]:Block[66705-66736]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[66628-66637]:ContinueStatement[66717-66726]"
  }, {
    "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
    "info" : "VariableDeclarationStatement[66764-66812]:VariableDeclarationStatement[66853-66901]"
  }, {
    "left" : "defineSlot(n, parent, unknownType, true);",
    "right" : "defineSlot(n, parent, unknownType, true);",
    "info" : "ExpressionStatement[66821-66862]:ExpressionStatement[66910-66951]"
  }, {
    "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
    "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
    "info" : "IfStatement[66872-67320]:IfStatement[66961-67409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66960-67186]:Block[67049-67275]"
  }, {
    "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
    "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, n);",
    "info" : "ExpressionStatement[67102-67176]:ExpressionStatement[67191-67265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67192-67320]:Block[67281-67409]"
  }, {
    "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
    "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
    "info" : "ExpressionStatement[67204-67310]:ExpressionStatement[67293-67399]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[67466-67473]:Modifier[67555-67562]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[67474-67479]:Modifier[67563-67568]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[67480-67485]:TYPE_DECLARATION_KIND[67569-67574]"
  }, {
    "left" : "CollectProperties",
    "right" : "CollectProperties",
    "info" : "SimpleName[67599-67616]:SimpleName[67688-67705]"
  }, {
    "left" : "JSType thisType",
    "right" : "JSType thisType",
    "info" : "SingleVariableDeclaration[67617-67632]:SingleVariableDeclaration[67706-67721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67634-67677]:Block[67723-67766]"
  }, {
    "left" : "this.thisType = thisType;",
    "right" : "this.thisType = thisType;",
    "info" : "ExpressionStatement[67644-67669]:ExpressionStatement[67733-67758]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[67685-67694]:MarkerAnnotation[67774-67783]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[67701-67707]:Modifier[67790-67796]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[67708-67712]:PrimitiveType[67797-67801]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[67713-67718]:SimpleName[67802-67807]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[67719-67734]:SingleVariableDeclaration[67808-67823]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[67736-67742]:SingleVariableDeclaration[67825-67831]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[67744-67755]:SingleVariableDeclaration[67833-67844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67757-68162]:Block[67846-68251]"
  }, {
    "left" : "if (n.isExprResult())",
    "right" : "if (n.isExprResult())",
    "info" : "IfStatement[67767-68154]:IfStatement[67856-68243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67789-68154]:Block[67878-68243]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[67801-67832]:VariableDeclarationStatement[67890-67921]"
  }, {
    "left" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(child, child, null);\n              break;\n          }",
    "right" : "switch (child.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(child.getFirstChild(), child,\n                  child.getLastChild());\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(child, child, null);\n              break;\n          }",
    "info" : "SwitchStatement[67843-68144]:SwitchStatement[67932-68233]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[67882-67900]:SwitchCase[67971-67989]"
  }, {
    "left" : "maybeCollectMember(child.getFirstChild(), child,\n                  child.getLastChild());",
    "right" : "maybeCollectMember(child.getFirstChild(), child,\n                  child.getLastChild());",
    "info" : "ExpressionStatement[67915-68004]:ExpressionStatement[68004-68093]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[68019-68025]:BreakStatement[68108-68114]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[68038-68057]:SwitchCase[68127-68146]"
  }, {
    "left" : "maybeCollectMember(child, child, null);",
    "right" : "maybeCollectMember(child, child, null);",
    "info" : "ExpressionStatement[68072-68111]:ExpressionStatement[68161-68200]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[68126-68132]:BreakStatement[68215-68221]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[68170-68177]:Modifier[68259-68266]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[68178-68182]:PrimitiveType[68267-68271]"
  }, {
    "left" : "maybeCollectMember",
    "right" : "maybeCollectMember",
    "info" : "SimpleName[68183-68201]:SimpleName[68272-68290]"
  }, {
    "left" : "Node member",
    "right" : "Node member",
    "info" : "SingleVariableDeclaration[68202-68213]:SingleVariableDeclaration[68291-68302]"
  }, {
    "left" : "Node nodeWithJsDocInfo",
    "right" : "Node nodeWithJsDocInfo",
    "info" : "SingleVariableDeclaration[68225-68247]:SingleVariableDeclaration[68314-68336]"
  }, {
    "left" : "@Nullable Node value",
    "right" : "@Nullable Node value",
    "info" : "SingleVariableDeclaration[68249-68269]:SingleVariableDeclaration[68338-68358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68271-69619]:Block[68360-69708]"
  }, {
    "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
    "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[68281-68331]:VariableDeclarationStatement[68370-68420]"
  }, {
    "left" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
    "right" : "if (info == null ||\n            !member.isGetProp() ||\n            !member.getFirstChild().isThis())",
    "info" : "IfStatement[68527-68657]:IfStatement[68616-68746]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68628-68657]:Block[68717-68746]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[68640-68647]:ReturnStatement[68729-68736]"
  }, {
    "left" : "member.getFirstChild().setJSType(thisType);",
    "right" : "member.getFirstChild().setJSType(thisType);",
    "info" : "ExpressionStatement[68667-68710]:ExpressionStatement[68756-68799]"
  }, {
    "left" : "JSType thisObjectType = thisType.toObjectType();",
    "right" : "JSType thisObjectType = thisType.toObjectType();",
    "info" : "VariableDeclarationStatement[68873-68921]:VariableDeclarationStatement[68962-69010]"
  }, {
    "left" : "if (thisObjectType != null)",
    "right" : "if (thisObjectType != null)",
    "info" : "IfStatement[68930-69134]:IfStatement[69019-69223]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68958-69134]:Block[69047-69223]"
  }, {
    "left" : "ImmutableList<TemplateType> keys =\n              thisObjectType.getTemplateTypeMap().getTemplateKeys();",
    "right" : "ImmutableList<TemplateType> keys =\n              thisObjectType.getTemplateTypeMap().getTemplateKeys();",
    "info" : "VariableDeclarationStatement[68970-69073]:VariableDeclarationStatement[69059-69162]"
  }, {
    "left" : "typeRegistry.setTemplateTypeNames(keys);",
    "right" : "typeRegistry.setTemplateTypeNames(keys);",
    "info" : "ExpressionStatement[69084-69124]:ExpressionStatement[69173-69213]"
  }, {
    "left" : "JSType jsType = getDeclaredType(info, member, value);",
    "right" : "JSType jsType = getDeclaredType(info, member, value);",
    "info" : "VariableDeclarationStatement[69144-69197]:VariableDeclarationStatement[69233-69286]"
  }, {
    "left" : "if (thisObjectType != null)",
    "right" : "if (thisObjectType != null)",
    "info" : "IfStatement[69207-69295]:IfStatement[69296-69384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69235-69295]:Block[69324-69384]"
  }, {
    "left" : "typeRegistry.clearTemplateTypeNames();",
    "right" : "typeRegistry.clearTemplateTypeNames();",
    "info" : "ExpressionStatement[69247-69285]:ExpressionStatement[69336-69374]"
  }, {
    "left" : "Node name = member.getLastChild();",
    "right" : "Node name = member.getLastChild();",
    "info" : "VariableDeclarationStatement[69305-69339]:VariableDeclarationStatement[69394-69428]"
  }, {
    "left" : "if (jsType != null &&\n            (name.isName() || name.isString()) &&\n            thisType.toObjectType() != null)",
    "right" : "if (jsType != null &&\n            (name.isName() || name.isString()) &&\n            thisType.toObjectType() != null)",
    "info" : "IfStatement[69348-69611]:IfStatement[69437-69700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69465-69611]:Block[69554-69700]"
  }, {
    "left" : "thisType.toObjectType().defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
    "right" : "thisType.toObjectType().defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              member);",
    "info" : "ExpressionStatement[69477-69601]:ExpressionStatement[69566-69690]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[69724-69731]:Modifier[69813-69820]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69732-69738]:Modifier[69821-69827]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[69739-69744]:Modifier[69828-69833]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[69745-69750]:TYPE_DECLARATION_KIND[69834-69839]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[69875-69882]:Modifier[69964-69971]"
  }, {
    "left" : "StubDeclaration",
    "right" : "StubDeclaration",
    "info" : "SimpleName[69883-69898]:SimpleName[69972-69987]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[69899-69908]:SingleVariableDeclaration[69988-69997]"
  }, {
    "left" : "boolean isExtern",
    "right" : "boolean isExtern",
    "info" : "SingleVariableDeclaration[69910-69926]:SingleVariableDeclaration[69999-70015]"
  }, {
    "left" : "String ownerName",
    "right" : "String ownerName",
    "info" : "SingleVariableDeclaration[69928-69944]:SingleVariableDeclaration[70017-70033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69946-70043]:Block[70035-70132]"
  }, {
    "left" : "this.node = node;",
    "right" : "this.node = node;",
    "info" : "ExpressionStatement[69954-69971]:ExpressionStatement[70043-70060]"
  }, {
    "left" : "this.isExtern = isExtern;",
    "right" : "this.isExtern = isExtern;",
    "info" : "ExpressionStatement[69978-70003]:ExpressionStatement[70067-70092]"
  }, {
    "left" : "this.ownerName = ownerName;",
    "right" : "this.ownerName = ownerName;",
    "info" : "ExpressionStatement[70010-70037]:ExpressionStatement[70099-70126]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[70162-70169]:Modifier[70251-70258]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[70170-70175]:Modifier[70259-70264]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[70176-70181]:TYPE_DECLARATION_KIND[70265-70270]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[70237-70244]:Modifier[70326-70333]"
  }, {
    "left" : "GlobalScopeBuilder",
    "right" : "GlobalScopeBuilder",
    "info" : "SimpleName[70245-70263]:SimpleName[70334-70352]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[70264-70275]:SingleVariableDeclaration[70353-70364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70277-70304]:Block[70366-70393]"
  }, {
    "left" : "super(scope);",
    "right" : "super(scope);",
    "info" : "SuperConstructorInvocation[70285-70298]:SuperConstructorInvocation[70374-70387]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[70554-70563]:MarkerAnnotation[70643-70652]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[70564-70570]:Modifier[70653-70659]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[70571-70575]:PrimitiveType[70660-70664]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[70576-70581]:SimpleName[70665-70670]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[70582-70597]:SingleVariableDeclaration[70671-70686]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[70599-70605]:SingleVariableDeclaration[70688-70694]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[70607-70618]:SingleVariableDeclaration[70696-70707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70620-70884]:Block[70709-70973]"
  }, {
    "left" : "super.visit(t, n, parent);",
    "right" : "super.visit(t, n, parent);",
    "info" : "ExpressionStatement[70628-70654]:ExpressionStatement[70717-70743]"
  }, {
    "left" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
    "right" : "switch (n.getType()) {\n\n        case Token.VAR:\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n      }",
    "info" : "SwitchStatement[70662-70878]:SwitchStatement[70751-70967]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[70694-70709]:SwitchCase[70783-70798]"
  }, {
    "left" : "if (n.hasOneChild())",
    "right" : "if (n.hasOneChild())",
    "info" : "IfStatement[70750-70853]:IfStatement[70839-70942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70771-70853]:Block[70860-70942]"
  }, {
    "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
    "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
    "info" : "ExpressionStatement[70785-70841]:ExpressionStatement[70874-70930]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[70864-70870]:BreakStatement[70953-70959]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[70890-70899]:MarkerAnnotation[70979-70988]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[70904-70908]:PrimitiveType[70993-70997]"
  }, {
    "left" : "maybeDeclareQualifiedName",
    "right" : "maybeDeclareQualifiedName",
    "info" : "SimpleName[70909-70934]:SimpleName[70998-71023]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[70944-70959]:SingleVariableDeclaration[71033-71048]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[70961-70975]:SingleVariableDeclaration[71050-71064]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[70985-70991]:SingleVariableDeclaration[71074-71080]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[70993-71004]:SingleVariableDeclaration[71082-71093]"
  }, {
    "left" : "Node rhsValue",
    "right" : "Node rhsValue",
    "info" : "SingleVariableDeclaration[71006-71019]:SingleVariableDeclaration[71095-71108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71021-71132]:Block[71110-71221]"
  }, {
    "left" : "checkForTypedef(t, n, info);",
    "right" : "checkForTypedef(t, n, info);",
    "info" : "ExpressionStatement[71029-71057]:ExpressionStatement[71118-71146]"
  }, {
    "left" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
    "right" : "super.maybeDeclareQualifiedName(t, info, n, parent, rhsValue);",
    "info" : "ExpressionStatement[71064-71126]:ExpressionStatement[71153-71215]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[71299-71306]:Modifier[71388-71395]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[71307-71311]:PrimitiveType[71396-71400]"
  }, {
    "left" : "checkForTypedef",
    "right" : "checkForTypedef",
    "info" : "SimpleName[71312-71327]:SimpleName[71401-71416]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[71337-71352]:SingleVariableDeclaration[71426-71441]"
  }, {
    "left" : "Node candidate",
    "right" : "Node candidate",
    "info" : "SingleVariableDeclaration[71354-71368]:SingleVariableDeclaration[71443-71457]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[71370-71384]:SingleVariableDeclaration[71459-71473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71386-72243]:Block[71475-72332]"
  }, {
    "left" : "if (info == null || !info.hasTypedefType())",
    "right" : "if (info == null || !info.hasTypedefType())",
    "info" : "IfStatement[71394-71463]:IfStatement[71483-71552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71438-71463]:Block[71527-71552]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[71448-71455]:ReturnStatement[71537-71544]"
  }, {
    "left" : "String typedef = candidate.getQualifiedName();",
    "right" : "String typedef = candidate.getQualifiedName();",
    "info" : "VariableDeclarationStatement[71471-71517]:VariableDeclarationStatement[71560-71606]"
  }, {
    "left" : "if (typedef == null)",
    "right" : "if (typedef == null)",
    "info" : "IfStatement[71524-71570]:IfStatement[71613-71659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71545-71570]:Block[71634-71659]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[71555-71562]:ReturnStatement[71644-71651]"
  }, {
    "left" : "typeRegistry.declareType(typedef, unknownType);",
    "right" : "typeRegistry.declareType(typedef, unknownType);",
    "info" : "ExpressionStatement[71745-71792]:ExpressionStatement[71834-71881]"
  }, {
    "left" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
    "right" : "JSType realType = info.getTypedefType().evaluate(scope, typeRegistry);",
    "info" : "VariableDeclarationStatement[71800-71870]:VariableDeclarationStatement[71889-71959]"
  }, {
    "left" : "if (realType == null)",
    "right" : "if (realType == null)",
    "info" : "IfStatement[71877-72035]:IfStatement[71966-72124]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71899-72035]:Block[71988-72124]"
  }, {
    "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
    "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
    "info" : "ExpressionStatement[71909-72027]:ExpressionStatement[71998-72116]"
  }, {
    "left" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
    "right" : "typeRegistry.overwriteDeclaredType(typedef, realType);",
    "info" : "ExpressionStatement[72043-72097]:ExpressionStatement[72132-72186]"
  }, {
    "left" : "if (candidate.isGetProp())",
    "right" : "if (candidate.isGetProp())",
    "info" : "IfStatement[72104-72237]:IfStatement[72193-72326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72131-72237]:Block[72220-72326]"
  }, {
    "left" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
    "right" : "defineSlot(candidate, candidate.getParent(),\n            getNativeType(NO_TYPE), false);",
    "info" : "ExpressionStatement[72141-72229]:ExpressionStatement[72230-72318]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[72379-72386]:Modifier[72468-72475]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[72387-72392]:Modifier[72476-72481]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[72393-72398]:TYPE_DECLARATION_KIND[72482-72487]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[72519-72526]:Modifier[72608-72615]"
  }, {
    "left" : "LocalScopeBuilder",
    "right" : "LocalScopeBuilder",
    "info" : "SimpleName[72527-72544]:SimpleName[72616-72633]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[72545-72556]:SingleVariableDeclaration[72634-72645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72558-72585]:Block[72647-72674]"
  }, {
    "left" : "super(scope);",
    "right" : "super(scope);",
    "info" : "SuperConstructorInvocation[72566-72579]:SuperConstructorInvocation[72655-72668]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[72652-72656]:PrimitiveType[72741-72745]"
  }, {
    "left" : "build",
    "right" : "build",
    "info" : "SimpleName[72657-72662]:SimpleName[72746-72751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72665-73396]:Block[72754-73485]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
    "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
    "info" : "ExpressionStatement[72673-72733]:ExpressionStatement[72762-72822]"
  }, {
    "left" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
    "right" : "AstFunctionContents contents =\n          getFunctionAnalysisResults(scope.getRootNode());",
    "info" : "VariableDeclarationStatement[72741-72830]:VariableDeclarationStatement[72830-72919]"
  }, {
    "left" : "if (contents != null)",
    "right" : "if (contents != null)",
    "info" : "IfStatement[72837-73390]:IfStatement[72926-73479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72859-73390]:Block[72948-73479]"
  }, {
    "left" : "for (String varName : contents.getEscapedVarNames())",
    "right" : "for (String varName : contents.getEscapedVarNames())",
    "info" : "EnhancedForStatement[72869-73060]:EnhancedForStatement[72958-73149]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72922-73060]:Block[73011-73149]"
  }, {
    "left" : "Var v = scope.getVar(varName);",
    "right" : "Var v = scope.getVar(varName);",
    "info" : "VariableDeclarationStatement[72934-72964]:VariableDeclarationStatement[73023-73053]"
  }, {
    "left" : "Preconditions.checkState(v.getScope() == scope);",
    "right" : "Preconditions.checkState(v.getScope() == scope);",
    "info" : "ExpressionStatement[72975-73023]:ExpressionStatement[73064-73112]"
  }, {
    "left" : "v.markEscaped();",
    "right" : "v.markEscaped();",
    "info" : "ExpressionStatement[73034-73050]:ExpressionStatement[73123-73139]"
  }, {
    "left" : "for (Multiset.Entry<String> entry :\n                 contents.getAssignedNameCounts().entrySet())",
    "right" : "for (Multiset.Entry<String> entry :\n                 contents.getAssignedNameCounts().entrySet())",
    "info" : "EnhancedForStatement[73070-73382]:EnhancedForStatement[73159-73471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73168-73382]:Block[73257-73471]"
  }, {
    "left" : "Var v = scope.getVar(entry.getElement());",
    "right" : "Var v = scope.getVar(entry.getElement());",
    "info" : "VariableDeclarationStatement[73180-73221]:VariableDeclarationStatement[73269-73310]"
  }, {
    "left" : "Preconditions.checkState(v.getScope() == scope);",
    "right" : "Preconditions.checkState(v.getScope() == scope);",
    "info" : "ExpressionStatement[73232-73280]:ExpressionStatement[73321-73369]"
  }, {
    "left" : "if (entry.getCount() == 1)",
    "right" : "if (entry.getCount() == 1)",
    "info" : "IfStatement[73291-73372]:IfStatement[73380-73461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73318-73372]:Block[73407-73461]"
  }, {
    "left" : "v.markAssignedExactlyOnce();",
    "right" : "v.markAssignedExactlyOnce();",
    "info" : "ExpressionStatement[73332-73360]:ExpressionStatement[73421-73449]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[73660-73669]:MarkerAnnotation[73749-73758]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[73670-73676]:Modifier[73759-73765]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[73677-73681]:PrimitiveType[73766-73770]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[73682-73687]:SimpleName[73771-73776]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[73688-73703]:SingleVariableDeclaration[73777-73792]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[73705-73711]:SingleVariableDeclaration[73794-73800]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[73713-73724]:SingleVariableDeclaration[73802-73813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73726-73953]:Block[73815-74042]"
  }, {
    "left" : "if (n == scope.getRootNode())",
    "right" : "if (n == scope.getRootNode())",
    "info" : "IfStatement[73734-73789]:IfStatement[73823-73878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73764-73789]:Block[73853-73878]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[73774-73781]:ReturnStatement[73863-73870]"
  }, {
    "left" : "if (n.isParamList() && parent == scope.getRootNode())",
    "right" : "if (n.isParamList() && parent == scope.getRootNode())",
    "info" : "IfStatement[73796-73913]:IfStatement[73885-74002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73850-73913]:Block[73939-74002]"
  }, {
    "left" : "handleFunctionInputs(parent);",
    "right" : "handleFunctionInputs(parent);",
    "info" : "ExpressionStatement[73860-73889]:ExpressionStatement[73949-73978]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[73898-73905]:ReturnStatement[73987-73994]"
  }, {
    "left" : "super.visit(t, n, parent);",
    "right" : "super.visit(t, n, parent);",
    "info" : "ExpressionStatement[73921-73947]:ExpressionStatement[74010-74036]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[74021-74028]:Modifier[74110-74117]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[74029-74033]:PrimitiveType[74118-74122]"
  }, {
    "left" : "handleFunctionInputs",
    "right" : "handleFunctionInputs",
    "info" : "SimpleName[74034-74054]:SimpleName[74123-74143]"
  }, {
    "left" : "Node fnNode",
    "right" : "Node fnNode",
    "info" : "SingleVariableDeclaration[74055-74066]:SingleVariableDeclaration[74144-74155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74068-74824]:Block[74157-74913]"
  }, {
    "left" : "Node fnNameNode = fnNode.getFirstChild();",
    "right" : "Node fnNameNode = fnNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[74112-74153]:VariableDeclarationStatement[74201-74242]"
  }, {
    "left" : "String fnName = fnNameNode.getString();",
    "right" : "String fnName = fnNameNode.getString();",
    "info" : "VariableDeclarationStatement[74160-74199]:VariableDeclarationStatement[74249-74288]"
  }, {
    "left" : "if (!fnName.isEmpty())",
    "right" : "if (!fnName.isEmpty())",
    "info" : "IfStatement[74206-74785]:IfStatement[74295-74874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74229-74785]:Block[74318-74874]"
  }, {
    "left" : "Scope.Var fnVar = scope.getVar(fnName);",
    "right" : "Scope.Var fnVar = scope.getVar(fnName);",
    "info" : "VariableDeclarationStatement[74239-74278]:VariableDeclarationStatement[74328-74367]"
  }, {
    "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
    "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
    "info" : "IfStatement[74287-74777]:IfStatement[74376-74866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74697-74777]:Block[74786-74866]"
  }, {
    "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
    "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
    "info" : "ExpressionStatement[74709-74767]:ExpressionStatement[74798-74856]"
  }, {
    "left" : "declareArguments(fnNode);",
    "right" : "declareArguments(fnNode);",
    "info" : "ExpressionStatement[74793-74818]:ExpressionStatement[74882-74907]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[74893-74900]:Modifier[74982-74989]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[74901-74905]:PrimitiveType[74990-74994]"
  }, {
    "left" : "declareArguments",
    "right" : "declareArguments",
    "info" : "SimpleName[74906-74922]:SimpleName[74995-75011]"
  }, {
    "left" : "Node functionNode",
    "right" : "Node functionNode",
    "info" : "SingleVariableDeclaration[74923-74940]:SingleVariableDeclaration[75012-75029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74942-76603]:Block[75031-76692]"
  }, {
    "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
    "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
    "info" : "VariableDeclarationStatement[74950-75010]:VariableDeclarationStatement[75039-75099]"
  }, {
    "left" : "Node iifeArgumentNode = null;",
    "right" : "Node iifeArgumentNode = null;",
    "info" : "VariableDeclarationStatement[75017-75046]:VariableDeclarationStatement[75106-75135]"
  }, {
    "left" : "if (NodeUtil.isCallOrNewTarget(functionNode))",
    "right" : "if (NodeUtil.isCallOrNewTarget(functionNode))",
    "info" : "IfStatement[75054-75160]:IfStatement[75143-75249]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75100-75160]:Block[75189-75249]"
  }, {
    "left" : "iifeArgumentNode = functionNode.getNext();",
    "right" : "iifeArgumentNode = functionNode.getNext();",
    "info" : "ExpressionStatement[75110-75152]:ExpressionStatement[75199-75241]"
  }, {
    "left" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
    "right" : "FunctionType functionType =\n          JSType.toMaybeFunctionType(functionNode.getJSType());",
    "info" : "VariableDeclarationStatement[75168-75259]:VariableDeclarationStatement[75257-75348]"
  }, {
    "left" : "if (functionType != null)",
    "right" : "if (functionType != null)",
    "info" : "IfStatement[75266-76597]:IfStatement[75355-76686]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75292-76597]:Block[75381-76686]"
  }, {
    "left" : "Node jsDocParameters = functionType.getParametersNode();",
    "right" : "Node jsDocParameters = functionType.getParametersNode();",
    "info" : "VariableDeclarationStatement[75302-75358]:VariableDeclarationStatement[75391-75447]"
  }, {
    "left" : "if (jsDocParameters != null)",
    "right" : "if (jsDocParameters != null)",
    "info" : "IfStatement[75367-76589]:IfStatement[75456-76678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75396-76589]:Block[75485-76678]"
  }, {
    "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
    "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
    "info" : "VariableDeclarationStatement[75408-75462]:VariableDeclarationStatement[75497-75551]"
  }, {
    "left" : "for (Node astParameter : astParameters.children())",
    "right" : "for (Node astParameter : astParameters.children())",
    "info" : "EnhancedForStatement[75473-76579]:EnhancedForStatement[75562-76668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75524-76579]:Block[75613-76668]"
  }, {
    "left" : "JSType paramType = jsDocParameter == null ?\n                unknownType : jsDocParameter.getJSType();",
    "right" : "JSType paramType = jsDocParameter == null ?\n                unknownType : jsDocParameter.getJSType();",
    "info" : "VariableDeclarationStatement[75538-75639]:VariableDeclarationStatement[75627-75728]"
  }, {
    "left" : "boolean inferred = paramType == null || paramType == unknownType;",
    "right" : "boolean inferred = paramType == null || paramType == unknownType;",
    "info" : "VariableDeclarationStatement[75652-75717]:VariableDeclarationStatement[75741-75806]"
  }, {
    "left" : "if (iifeArgumentNode != null && inferred)",
    "right" : "if (iifeArgumentNode != null && inferred)",
    "info" : "IfStatement[75731-76169]:IfStatement[75820-76258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75773-76169]:Block[75862-76258]"
  }, {
    "left" : "String argumentName = iifeArgumentNode.getQualifiedName();",
    "right" : "String argumentName = iifeArgumentNode.getQualifiedName();",
    "info" : "VariableDeclarationStatement[75789-75847]:VariableDeclarationStatement[75878-75936]"
  }, {
    "left" : "Var argumentVar =\n                  argumentName == null || scope.getParent() == null\n                  ? null : scope.getParent().getVar(argumentName);",
    "right" : "Var argumentVar =\n                  argumentName == null || scope.getParent() == null\n                  ? null : scope.getParent().getVar(argumentName);",
    "info" : "VariableDeclarationStatement[75862-76014]:VariableDeclarationStatement[75951-76103]"
  }, {
    "left" : "if (argumentVar != null && !argumentVar.isTypeInferred())",
    "right" : "if (argumentVar != null && !argumentVar.isTypeInferred())",
    "info" : "IfStatement[76029-76155]:IfStatement[76118-76244]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76087-76155]:Block[76176-76244]"
  }, {
    "left" : "paramType = argumentVar.getType();",
    "right" : "paramType = argumentVar.getType();",
    "info" : "ExpressionStatement[76105-76139]:ExpressionStatement[76194-76228]"
  }, {
    "left" : "if (paramType == null)",
    "right" : "if (paramType == null)",
    "info" : "IfStatement[76183-76260]:IfStatement[76272-76349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76206-76260]:Block[76295-76349]"
  }, {
    "left" : "paramType = unknownType;",
    "right" : "paramType = unknownType;",
    "info" : "ExpressionStatement[76222-76246]:ExpressionStatement[76311-76335]"
  }, {
    "left" : "defineSlot(astParameter, functionNode, paramType, inferred);",
    "right" : "defineSlot(astParameter, functionNode, paramType, inferred);",
    "info" : "ExpressionStatement[76274-76334]:ExpressionStatement[76363-76423]"
  }, {
    "left" : "if (jsDocParameter != null)",
    "right" : "if (jsDocParameter != null)",
    "info" : "IfStatement[76348-76448]:IfStatement[76437-76537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76376-76448]:Block[76465-76537]"
  }, {
    "left" : "jsDocParameter = jsDocParameter.getNext();",
    "right" : "jsDocParameter = jsDocParameter.getNext();",
    "info" : "ExpressionStatement[76392-76434]:ExpressionStatement[76481-76523]"
  }, {
    "left" : "if (iifeArgumentNode != null)",
    "right" : "if (iifeArgumentNode != null)",
    "info" : "IfStatement[76461-76567]:IfStatement[76550-76656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[76491-76567]:Block[76580-76656]"
  }, {
    "left" : "iifeArgumentNode = iifeArgumentNode.getNext();",
    "right" : "iifeArgumentNode = iifeArgumentNode.getNext();",
    "info" : "ExpressionStatement[76507-76553]:ExpressionStatement[76596-76642]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[76813-76820]:Modifier[76902-76909]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[76821-76827]:Modifier[76910-76916]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[76828-76833]:TYPE_DECLARATION_KIND[76917-76922]"
  }, {
    "left" : "FirstOrderFunctionAnalyzer",
    "right" : "FirstOrderFunctionAnalyzer",
    "info" : "SimpleName[77029-77055]:SimpleName[77118-77144]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[77065-77090]:SingleVariableDeclaration[77154-77179]"
  }, {
    "left" : "Map<Node, AstFunctionContents> outParam",
    "right" : "Map<Node, AstFunctionContents> outParam",
    "info" : "SingleVariableDeclaration[77092-77131]:SingleVariableDeclaration[77181-77220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77133-77200]:Block[77222-77289]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[77141-77166]:ExpressionStatement[77230-77255]"
  }, {
    "left" : "this.data = outParam;",
    "right" : "this.data = outParam;",
    "info" : "ExpressionStatement[77173-77194]:ExpressionStatement[77262-77283]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[77206-77215]:MarkerAnnotation[77295-77304]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[77216-77222]:Modifier[77305-77311]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[77223-77227]:PrimitiveType[77312-77316]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[77228-77235]:SimpleName[77317-77324]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[77236-77248]:SingleVariableDeclaration[77325-77337]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[77250-77259]:SingleVariableDeclaration[77339-77348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77261-77473]:Block[77350-77562]"
  }, {
    "left" : "if (externs == null)",
    "right" : "if (externs == null)",
    "info" : "IfStatement[77269-77467]:IfStatement[77358-77556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77290-77353]:Block[77379-77442]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, this);",
    "right" : "NodeTraversal.traverse(compiler, root, this);",
    "info" : "ExpressionStatement[77300-77345]:ExpressionStatement[77389-77434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77359-77467]:Block[77448-77556]"
  }, {
    "left" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
    "right" : "NodeTraversal.traverseRoots(\n            compiler, ImmutableList.of(externs, root), this);",
    "info" : "ExpressionStatement[77369-77459]:ExpressionStatement[77458-77548]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[77479-77488]:MarkerAnnotation[77568-77577]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[77489-77495]:Modifier[77578-77584]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[77496-77500]:PrimitiveType[77585-77589]"
  }, {
    "left" : "enterScope",
    "right" : "enterScope",
    "info" : "SimpleName[77501-77511]:SimpleName[77590-77600]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[77512-77527]:SingleVariableDeclaration[77601-77616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77529-77660]:Block[77618-77749]"
  }, {
    "left" : "if (!t.inGlobalScope())",
    "right" : "if (!t.inGlobalScope())",
    "info" : "IfStatement[77537-77654]:IfStatement[77626-77743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77561-77654]:Block[77650-77743]"
  }, {
    "left" : "Node n = t.getScopeRoot();",
    "right" : "Node n = t.getScopeRoot();",
    "info" : "VariableDeclarationStatement[77571-77597]:VariableDeclarationStatement[77660-77686]"
  }, {
    "left" : "data.put(n, new AstFunctionContents(n));",
    "right" : "data.put(n, new AstFunctionContents(n));",
    "info" : "ExpressionStatement[77606-77646]:ExpressionStatement[77695-77735]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[77666-77675]:MarkerAnnotation[77755-77764]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[77676-77682]:Modifier[77765-77771]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[77683-77687]:PrimitiveType[77772-77776]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[77688-77693]:SimpleName[77777-77782]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[77694-77709]:SingleVariableDeclaration[77783-77798]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[77711-77717]:SingleVariableDeclaration[77800-77806]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[77719-77730]:SingleVariableDeclaration[77808-77819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77732-79593]:Block[77821-79682]"
  }, {
    "left" : "if (t.inGlobalScope())",
    "right" : "if (t.inGlobalScope())",
    "info" : "IfStatement[77740-77788]:IfStatement[77829-77877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77763-77788]:Block[77852-77877]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[77773-77780]:ReturnStatement[77862-77869]"
  }, {
    "left" : "if (n.isReturn() && n.getFirstChild() != null)",
    "right" : "if (n.isReturn() && n.getFirstChild() != null)",
    "info" : "IfStatement[77796-77911]:IfStatement[77885-78000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77843-77911]:Block[77932-78000]"
  }, {
    "left" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
    "right" : "data.get(t.getScopeRoot()).recordNonEmptyReturn();",
    "info" : "ExpressionStatement[77853-77903]:ExpressionStatement[77942-77992]"
  }, {
    "left" : "if (t.getScopeDepth() <= 1)",
    "right" : "if (t.getScopeDepth() <= 1)",
    "info" : "IfStatement[77919-78363]:IfStatement[78008-78452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[77947-78363]:Block[78036-78452]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[78348-78355]:ReturnStatement[78437-78444]"
  }, {
    "left" : "if (n.isName() && NodeUtil.isLValue(n) &&\n          // Be careful of bleeding functions, which create variables\n          // in the inner scope, not the scope where the name appears.\n          !NodeUtil.isBleedingFunctionName(n))",
    "right" : "if (n.isName() && NodeUtil.isLValue(n) &&\n          // Be careful of bleeding functions, which create variables\n          // in the inner scope, not the scope where the name appears.\n          !NodeUtil.isBleedingFunctionName(n))",
    "info" : "IfStatement[78371-79587]:IfStatement[78460-79676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78601-79075]:Block[78690-79164]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[78611-78639]:VariableDeclarationStatement[78700-78728]"
  }, {
    "left" : "Scope scope = t.getScope();",
    "right" : "Scope scope = t.getScope();",
    "info" : "VariableDeclarationStatement[78648-78675]:VariableDeclarationStatement[78737-78764]"
  }, {
    "left" : "Var var = scope.getVar(name);",
    "right" : "Var var = scope.getVar(name);",
    "info" : "VariableDeclarationStatement[78684-78713]:VariableDeclarationStatement[78773-78802]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[78722-79067]:IfStatement[78811-79156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78739-79067]:Block[78828-79156]"
  }, {
    "left" : "Scope ownerScope = var.getScope();",
    "right" : "Scope ownerScope = var.getScope();",
    "info" : "VariableDeclarationStatement[78751-78785]:VariableDeclarationStatement[78840-78874]"
  }, {
    "left" : "if (ownerScope.isLocal())",
    "right" : "if (ownerScope.isLocal())",
    "info" : "IfStatement[78796-78908]:IfStatement[78885-78997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78822-78908]:Block[78911-78997]"
  }, {
    "left" : "data.get(ownerScope.getRootNode()).recordAssignedName(name);",
    "right" : "data.get(ownerScope.getRootNode()).recordAssignedName(name);",
    "info" : "ExpressionStatement[78836-78896]:ExpressionStatement[78925-78985]"
  }, {
    "left" : "if (scope != ownerScope && ownerScope.isLocal())",
    "right" : "if (scope != ownerScope && ownerScope.isLocal())",
    "info" : "IfStatement[78920-79057]:IfStatement[79009-79146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[78969-79057]:Block[79058-79146]"
  }, {
    "left" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
    "right" : "data.get(ownerScope.getRootNode()).recordEscapedVarName(name);",
    "info" : "ExpressionStatement[78983-79045]:ExpressionStatement[79072-79134]"
  }, {
    "left" : "if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n))",
    "right" : "if (n.isGetProp() && n.isUnscopedQualifiedName() &&\n          NodeUtil.isLValue(n))",
    "info" : "IfStatement[79081-79587]:IfStatement[79170-79676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79165-79587]:Block[79254-79676]"
  }, {
    "left" : "String name = NodeUtil.getRootOfQualifiedName(n).getString();",
    "right" : "String name = NodeUtil.getRootOfQualifiedName(n).getString();",
    "info" : "VariableDeclarationStatement[79175-79236]:VariableDeclarationStatement[79264-79325]"
  }, {
    "left" : "Scope scope = t.getScope();",
    "right" : "Scope scope = t.getScope();",
    "info" : "VariableDeclarationStatement[79245-79272]:VariableDeclarationStatement[79334-79361]"
  }, {
    "left" : "Var var = scope.getVar(name);",
    "right" : "Var var = scope.getVar(name);",
    "info" : "VariableDeclarationStatement[79281-79310]:VariableDeclarationStatement[79370-79399]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[79319-79579]:IfStatement[79408-79668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79336-79579]:Block[79425-79668]"
  }, {
    "left" : "Scope ownerScope = var.getScope();",
    "right" : "Scope ownerScope = var.getScope();",
    "info" : "VariableDeclarationStatement[79348-79382]:VariableDeclarationStatement[79437-79471]"
  }, {
    "left" : "if (scope != ownerScope && ownerScope.isLocal())",
    "right" : "if (scope != ownerScope && ownerScope.isLocal())",
    "info" : "IfStatement[79393-79569]:IfStatement[79482-79658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79442-79569]:Block[79531-79658]"
  }, {
    "left" : "data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());",
    "right" : "data.get(ownerScope.getRootNode())\n                .recordEscapedQualifiedName(n.getQualifiedName());",
    "info" : "ExpressionStatement[79456-79557]:ExpressionStatement[79545-79646]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[79601-79608]:Modifier[79690-79697]"
  }, {
    "left" : "AstFunctionContents",
    "right" : "AstFunctionContents",
    "info" : "SimpleType[79609-79628]:SimpleType[79698-79717]"
  }, {
    "left" : "getFunctionAnalysisResults",
    "right" : "getFunctionAnalysisResults",
    "info" : "SimpleName[79629-79655]:SimpleName[79718-79744]"
  }, {
    "left" : "@Nullable Node n",
    "right" : "@Nullable Node n",
    "info" : "SingleVariableDeclaration[79656-79672]:SingleVariableDeclaration[79745-79761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79674-79888]:Block[79763-79977]"
  }, {
    "left" : "if (n == null)",
    "right" : "if (n == null)",
    "info" : "IfStatement[79680-79721]:IfStatement[79769-79810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[79695-79721]:Block[79784-79810]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[79703-79715]:ReturnStatement[79792-79804]"
  }, {
    "left" : "return functionAnalysisResults.get(n);",
    "right" : "return functionAnalysisResults.get(n);",
    "info" : "ReturnStatement[79846-79884]:ReturnStatement[79935-79973]"
  } ]
}