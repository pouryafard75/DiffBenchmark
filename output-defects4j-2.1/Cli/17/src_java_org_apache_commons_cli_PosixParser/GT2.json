{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PosixParser",
      "right" : "PosixParser",
      "info" : "TypeDeclaration[941-10574]:TypeDeclaration[941-10597]"
    }, {
      "left" : "private List tokens = new ArrayList();",
      "right" : "private List tokens = new ArrayList();",
      "info" : "FieldDeclaration[1216-1293]:FieldDeclaration[1216-1293]"
    }, {
      "left" : "private boolean eatTheRest;",
      "right" : "private boolean eatTheRest;",
      "info" : "FieldDeclaration[1299-1375]:FieldDeclaration[1299-1375]"
    }, {
      "left" : "private Option currentOption;",
      "right" : "private Option currentOption;",
      "info" : "FieldDeclaration[1381-1451]:FieldDeclaration[1381-1451]"
    }, {
      "left" : "private Options options;",
      "right" : "private Options options;",
      "info" : "FieldDeclaration[1457-1517]:FieldDeclaration[1457-1517]"
    }, {
      "left" : "private void init()",
      "right" : "private void init()",
      "info" : "MethodDeclaration[1523-1845]:MethodDeclaration[1523-1845]"
    }, {
      "left" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "right" : "protected String[] flatten(Options options, String[] arguments, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[1851-5900]:MethodDeclaration[1851-5900]"
    }, {
      "left" : "private void gobble(Iterator iter)",
      "right" : "private void gobble(Iterator iter)",
      "info" : "MethodDeclaration[5906-6243]:MethodDeclaration[5906-6243]"
    }, {
      "left" : "private void process(String value)",
      "right" : "private void process(String value)",
      "info" : "MethodDeclaration[6249-7386]:MethodDeclaration[6249-7386]"
    }, {
      "left" : "private void processSingleHyphen(String hyphen)",
      "right" : "private void processSingleHyphen(String hyphen)",
      "info" : "MethodDeclaration[7392-7631]:MethodDeclaration[7392-7631]"
    }, {
      "left" : "private void processOptionToken(String token, boolean stopAtNonOption)",
      "right" : "private void processOptionToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[7637-8486]:MethodDeclaration[7637-8486]"
    }, {
      "left" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "right" : "protected void burstToken(String token, boolean stopAtNonOption)",
      "info" : "MethodDeclaration[8492-10572]:MethodDeclaration[8492-10595]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1756-1845]:Block[1756-1845]"
    }, {
      "left" : "eatTheRest = false;",
      "right" : "eatTheRest = false;",
      "info" : "ExpressionStatement[1766-1785]:ExpressionStatement[1766-1785]"
    }, {
      "left" : "tokens.clear();",
      "right" : "tokens.clear();",
      "info" : "ExpressionStatement[1794-1809]:ExpressionStatement[1794-1809]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[1818-1839]:ExpressionStatement[1818-1839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4071-5900]:Block[4071-5900]"
    }, {
      "left" : "init();",
      "right" : "init();",
      "info" : "ExpressionStatement[4081-4088]:ExpressionStatement[4081-4088]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[4097-4120]:ExpressionStatement[4097-4120]"
    }, {
      "left" : "Iterator iter = Arrays.asList(arguments).iterator();",
      "right" : "Iterator iter = Arrays.asList(arguments).iterator();",
      "info" : "VariableDeclarationStatement[4181-4233]:VariableDeclarationStatement[4181-4233]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[4286-5824]:WhileStatement[4286-5824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4317-5824]:Block[4317-5824]"
    }, {
      "left" : "String token = (String) iter.next();",
      "right" : "String token = (String) iter.next();",
      "info" : "VariableDeclarationStatement[4378-4414]:VariableDeclarationStatement[4378-4414]"
    }, {
      "left" : "if (token.startsWith(\"--\"))",
      "right" : "if (token.startsWith(\"--\"))",
      "info" : "IfStatement[4464-5787]:IfStatement[4464-5787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4504-4858]:Block[4504-4858]"
    }, {
      "left" : "if (token.indexOf('=') != -1)",
      "right" : "if (token.indexOf('=') != -1)",
      "info" : "IfStatement[4522-4844]:IfStatement[4522-4844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4568-4748]:Block[4568-4748]"
    }, {
      "left" : "tokens.add(token.substring(0, token.indexOf('=')));",
      "right" : "tokens.add(token.substring(0, token.indexOf('=')));",
      "info" : "ExpressionStatement[4590-4641]:ExpressionStatement[4590-4641]"
    }, {
      "left" : "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));",
      "right" : "tokens.add(token.substring(token.indexOf('=') + 1, token.length()));",
      "info" : "ExpressionStatement[4662-4730]:ExpressionStatement[4662-4730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4786-4844]:Block[4786-4844]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[4808-4826]:ExpressionStatement[4808-4826]"
    }, {
      "left" : "if (\"-\".equals(token))",
      "right" : "if (\"-\".equals(token))",
      "info" : "IfStatement[4906-5787]:IfStatement[4906-5787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-5000]:Block[4941-5000]"
    }, {
      "left" : "processSingleHyphen(token);",
      "right" : "processSingleHyphen(token);",
      "info" : "ExpressionStatement[4959-4986]:ExpressionStatement[4959-4986]"
    }, {
      "left" : "if (token.startsWith(\"-\"))",
      "right" : "if (token.startsWith(\"-\"))",
      "info" : "IfStatement[5018-5787]:IfStatement[5018-5787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5057-5537]:Block[5057-5537]"
    }, {
      "left" : "int tokenLength = token.length();",
      "right" : "int tokenLength = token.length();",
      "info" : "VariableDeclarationStatement[5075-5108]:VariableDeclarationStatement[5075-5108]"
    }, {
      "left" : "if (tokenLength == 2)",
      "right" : "if (tokenLength == 2)",
      "info" : "IfStatement[5126-5523]:IfStatement[5126-5523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5164-5247]:Block[5164-5247]"
    }, {
      "left" : "processOptionToken(token, stopAtNonOption);",
      "right" : "processOptionToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5186-5229]:ExpressionStatement[5186-5229]"
    }, {
      "left" : "if (options.hasOption(token))",
      "right" : "if (options.hasOption(token))",
      "info" : "IfStatement[5269-5523]:IfStatement[5269-5523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5315-5373]:Block[5315-5373]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[5337-5355]:ExpressionStatement[5337-5355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5448-5523]:Block[5448-5523]"
    }, {
      "left" : "burstToken(token, stopAtNonOption);",
      "right" : "burstToken(token, stopAtNonOption);",
      "info" : "ExpressionStatement[5470-5505]:ExpressionStatement[5470-5505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5567-5787]:Block[5567-5787]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[5585-5773]:IfStatement[5585-5773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5622-5677]:Block[5622-5677]"
    }, {
      "left" : "process(token);",
      "right" : "process(token);",
      "info" : "ExpressionStatement[5644-5659]:ExpressionStatement[5644-5659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5715-5773]:Block[5715-5773]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[5737-5755]:ExpressionStatement[5737-5755]"
    }, {
      "left" : "gobble(iter);",
      "right" : "gobble(iter);",
      "info" : "ExpressionStatement[5801-5814]:ExpressionStatement[5801-5814]"
    }, {
      "left" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "right" : "return (String[]) tokens.toArray(new String[tokens.size()]);",
      "info" : "ReturnStatement[5834-5894]:ReturnStatement[5834-5894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6088-6243]:Block[6088-6243]"
    }, {
      "left" : "if (eatTheRest)",
      "right" : "if (eatTheRest)",
      "info" : "IfStatement[6098-6237]:IfStatement[6098-6237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6122-6237]:Block[6122-6237]"
    }, {
      "left" : "while (iter.hasNext())",
      "right" : "while (iter.hasNext())",
      "info" : "WhileStatement[6136-6227]:WhileStatement[6136-6227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6171-6227]:Block[6171-6227]"
    }, {
      "left" : "tokens.add(iter.next());",
      "right" : "tokens.add(iter.next());",
      "info" : "ExpressionStatement[6189-6213]:ExpressionStatement[6189-6213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6923-7386]:Block[6923-7386]"
    }, {
      "left" : "if (currentOption != null && currentOption.hasArg())",
      "right" : "if (currentOption != null && currentOption.hasArg())",
      "info" : "IfStatement[6933-7380]:IfStatement[6933-7380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6994-7255]:Block[6994-7255]"
    }, {
      "left" : "if (currentOption.hasArg())",
      "right" : "if (currentOption.hasArg())",
      "info" : "IfStatement[7008-7245]:IfStatement[7008-7245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7048-7136]:Block[7048-7136]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7066-7084]:ExpressionStatement[7066-7084]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[7101-7122]:ExpressionStatement[7101-7122]"
    }, {
      "left" : "if (currentOption.hasArgs())",
      "right" : "if (currentOption.hasArgs())",
      "info" : "IfStatement[7154-7245]:IfStatement[7154-7245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7195-7245]:Block[7195-7245]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7213-7231]:ExpressionStatement[7213-7231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7277-7380]:Block[7277-7380]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[7291-7309]:ExpressionStatement[7291-7309]"
    }, {
      "left" : "tokens.add(\"--\");",
      "right" : "tokens.add(\"--\");",
      "info" : "ExpressionStatement[7322-7339]:ExpressionStatement[7322-7339]"
    }, {
      "left" : "tokens.add(value);",
      "right" : "tokens.add(value);",
      "info" : "ExpressionStatement[7352-7370]:ExpressionStatement[7352-7370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7596-7631]:Block[7596-7631]"
    }, {
      "left" : "tokens.add(hyphen);",
      "right" : "tokens.add(hyphen);",
      "info" : "ExpressionStatement[7606-7625]:ExpressionStatement[7606-7625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8241-8486]:Block[8241-8486]"
    }, {
      "left" : "if (this.options.hasOption(token))",
      "right" : "if (this.options.hasOption(token))",
      "info" : "IfStatement[8251-8480]:IfStatement[8251-8480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8294-8395]:Block[8294-8395]"
    }, {
      "left" : "currentOption = this.options.getOption(token);",
      "right" : "currentOption = this.options.getOption(token);",
      "info" : "ExpressionStatement[8308-8354]:ExpressionStatement[8308-8354]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[8367-8385]:ExpressionStatement[8367-8385]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[8409-8480]:IfStatement[8409-8480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8438-8480]:Block[8438-8480]"
    }, {
      "left" : "eatTheRest = true;",
      "right" : "eatTheRest = true;",
      "info" : "ExpressionStatement[8452-8470]:ExpressionStatement[8452-8470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9868-10572]:Block[9868-10595]"
    }, {
      "left" : "for (int i = 1; i < token.length(); i++)",
      "right" : "for (int i = 1; i < token.length(); i++)",
      "info" : "ForStatement[9878-10566]:ForStatement[9878-10589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9927-10566]:Block[9927-10589]"
    }, {
      "left" : "String ch = String.valueOf(token.charAt(i));",
      "right" : "String ch = String.valueOf(token.charAt(i));",
      "info" : "VariableDeclarationStatement[9941-9985]:VariableDeclarationStatement[9941-9985]"
    }, {
      "left" : "if (options.hasOption(ch))",
      "right" : "if (options.hasOption(ch))",
      "info" : "IfStatement[9999-10556]:IfStatement[9999-10579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10038-10342]:Block[10038-10342]"
    }, {
      "left" : "tokens.add(\"-\" + ch);",
      "right" : "tokens.add(\"-\" + ch);",
      "info" : "ExpressionStatement[10056-10077]:ExpressionStatement[10056-10077]"
    }, {
      "left" : "currentOption = options.getOption(ch);",
      "right" : "currentOption = options.getOption(ch);",
      "info" : "ExpressionStatement[10094-10132]:ExpressionStatement[10094-10132]"
    }, {
      "left" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "right" : "if (currentOption.hasArg() && (token.length() != (i + 1)))",
      "info" : "IfStatement[10150-10328]:IfStatement[10150-10328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10225-10328]:Block[10225-10328]"
    }, {
      "left" : "tokens.add(token.substring(i + 1));",
      "right" : "tokens.add(token.substring(i + 1));",
      "info" : "ExpressionStatement[10247-10282]:ExpressionStatement[10247-10282]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10304-10310]:BreakStatement[10304-10310]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[10360-10556]:IfStatement[10360-10579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10393-10453]:Block[10393-10476]"
    }, {
      "left" : "process(token.substring(i));",
      "right" : "process(token.substring(i));",
      "info" : "ExpressionStatement[10411-10439]:ExpressionStatement[10411-10439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10483-10556]:Block[10506-10579]"
    }, {
      "left" : "tokens.add(token);",
      "right" : "tokens.add(token);",
      "info" : "ExpressionStatement[10501-10519]:ExpressionStatement[10524-10542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10536-10542]:BreakStatement[10559-10565]"
    } ]
  },
  "interFileMappings" : { }
}