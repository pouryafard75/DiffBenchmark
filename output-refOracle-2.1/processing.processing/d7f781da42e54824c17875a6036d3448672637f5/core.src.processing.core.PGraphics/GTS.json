{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PGraphics",
      "right" : "PGraphics",
      "info" : "TypeDeclaration[1351-261313]:TypeDeclaration[1351-261891]"
    }, {
      "left" : "public int pixelCount;",
      "right" : "public int pixelCount;",
      "info" : "FieldDeclaration[7913-7935]:FieldDeclaration[7913-7935]"
    }, {
      "left" : "public int smooth;",
      "right" : "public int smooth;",
      "info" : "FieldDeclaration[8076-8094]:FieldDeclaration[8076-8094]"
    }, {
      "left" : "protected boolean settingsInited;",
      "right" : "protected boolean settingsInited;",
      "info" : "FieldDeclaration[8216-8249]:FieldDeclaration[8216-8249]"
    }, {
      "left" : "protected boolean reapplySettings;",
      "right" : "protected boolean reapplySettings;",
      "info" : "FieldDeclaration[8317-8351]:FieldDeclaration[8317-8351]"
    }, {
      "left" : "protected PGraphics raw;",
      "right" : "protected PGraphics raw;",
      "info" : "FieldDeclaration[8431-8455]:FieldDeclaration[8431-8455]"
    }, {
      "left" : "protected String path;",
      "right" : "protected String path;",
      "info" : "FieldDeclaration[8522-8609]:FieldDeclaration[8522-8609]"
    }, {
      "left" : "protected boolean primaryGraphics;",
      "right" : "protected boolean primaryGraphics;",
      "info" : "FieldDeclaration[8613-8785]:FieldDeclaration[8613-8785]"
    }, {
      "left" : "protected boolean[] hints = new boolean[HINT_COUNT];",
      "right" : "protected boolean[] hints = new boolean[HINT_COUNT];",
      "info" : "FieldDeclaration[9009-9565]:FieldDeclaration[9009-9565]"
    }, {
      "left" : "protected WeakHashMap<PImage, Object> cacheMap =\n    new WeakHashMap<PImage, Object>();",
      "right" : "protected WeakHashMap<PImage, Object> cacheMap =\n    new WeakHashMap<PImage, Object>();",
      "info" : "FieldDeclaration[9632-10031]:FieldDeclaration[9632-10031]"
    }, {
      "left" : "static public final int R = 3;",
      "right" : "static public final int R = 3;",
      "info" : "FieldDeclaration[10372-10402]:FieldDeclaration[10372-10402]"
    }, {
      "left" : "static public final int G = 4;",
      "right" : "static public final int G = 4;",
      "info" : "FieldDeclaration[10436-10466]:FieldDeclaration[10436-10466]"
    }, {
      "left" : "static public final int B = 5;",
      "right" : "static public final int B = 5;",
      "info" : "FieldDeclaration[10510-10540]:FieldDeclaration[10510-10540]"
    }, {
      "left" : "static public final int A = 6;",
      "right" : "static public final int A = 6;",
      "info" : "FieldDeclaration[10578-10608]:FieldDeclaration[10578-10608]"
    }, {
      "left" : "static public final int U = 7;",
      "right" : "static public final int U = 7;",
      "info" : "FieldDeclaration[10612-10642]:FieldDeclaration[10612-10642]"
    }, {
      "left" : "static public final int V = 8;",
      "right" : "static public final int V = 8;",
      "info" : "FieldDeclaration[10656-10686]:FieldDeclaration[10656-10686]"
    }, {
      "left" : "static public final int NX = 9;",
      "right" : "static public final int NX = 9;",
      "info" : "FieldDeclaration[10690-10721]:FieldDeclaration[10690-10721]"
    }, {
      "left" : "static public final int NY = 10;",
      "right" : "static public final int NY = 10;",
      "info" : "FieldDeclaration[10734-10766]:FieldDeclaration[10734-10766]"
    }, {
      "left" : "static public final int NZ = 11;",
      "right" : "static public final int NZ = 11;",
      "info" : "FieldDeclaration[10769-10801]:FieldDeclaration[10769-10801]"
    }, {
      "left" : "static public final int EDGE = 12;",
      "right" : "static public final int EDGE = 12;",
      "info" : "FieldDeclaration[10805-10839]:FieldDeclaration[10805-10839]"
    }, {
      "left" : "static public final int SR = 13;",
      "right" : "static public final int SR = 13;",
      "info" : "FieldDeclaration[10856-10916]:FieldDeclaration[10856-10916]"
    }, {
      "left" : "static public final int SG = 14;",
      "right" : "static public final int SG = 14;",
      "info" : "FieldDeclaration[10919-10951]:FieldDeclaration[10919-10951]"
    }, {
      "left" : "static public final int SB = 15;",
      "right" : "static public final int SB = 15;",
      "info" : "FieldDeclaration[10954-10986]:FieldDeclaration[10954-10986]"
    }, {
      "left" : "static public final int SA = 16;",
      "right" : "static public final int SA = 16;",
      "info" : "FieldDeclaration[10989-11021]:FieldDeclaration[10989-11021]"
    }, {
      "left" : "static public final int SW = 17;",
      "right" : "static public final int SW = 17;",
      "info" : "FieldDeclaration[11025-11080]:FieldDeclaration[11025-11080]"
    }, {
      "left" : "static public final int TX = 18;",
      "right" : "static public final int TX = 18;",
      "info" : "FieldDeclaration[11118-11150]:FieldDeclaration[11118-11150]"
    }, {
      "left" : "static public final int TY = 19;",
      "right" : "static public final int TY = 19;",
      "info" : "FieldDeclaration[11173-11205]:FieldDeclaration[11173-11205]"
    }, {
      "left" : "static public final int TZ = 20;",
      "right" : "static public final int TZ = 20;",
      "info" : "FieldDeclaration[11208-11240]:FieldDeclaration[11208-11240]"
    }, {
      "left" : "static public final int VX = 21;",
      "right" : "static public final int VX = 21;",
      "info" : "FieldDeclaration[11244-11276]:FieldDeclaration[11244-11276]"
    }, {
      "left" : "static public final int VY = 22;",
      "right" : "static public final int VY = 22;",
      "info" : "FieldDeclaration[11300-11332]:FieldDeclaration[11300-11332]"
    }, {
      "left" : "static public final int VZ = 23;",
      "right" : "static public final int VZ = 23;",
      "info" : "FieldDeclaration[11335-11367]:FieldDeclaration[11335-11367]"
    }, {
      "left" : "static public final int VW = 24;",
      "right" : "static public final int VW = 24;",
      "info" : "FieldDeclaration[11370-11402]:FieldDeclaration[11370-11402]"
    }, {
      "left" : "static public final int AR = 25;",
      "right" : "static public final int AR = 25;",
      "info" : "FieldDeclaration[11537-11569]:FieldDeclaration[11537-11569]"
    }, {
      "left" : "static public final int AG = 26;",
      "right" : "static public final int AG = 26;",
      "info" : "FieldDeclaration[11572-11604]:FieldDeclaration[11572-11604]"
    }, {
      "left" : "static public final int AB = 27;",
      "right" : "static public final int AB = 27;",
      "info" : "FieldDeclaration[11607-11639]:FieldDeclaration[11607-11639]"
    }, {
      "left" : "static public final int DR = 3;",
      "right" : "static public final int DR = 3;",
      "info" : "FieldDeclaration[11677-11708]:FieldDeclaration[11677-11708]"
    }, {
      "left" : "static public final int DG = 4;",
      "right" : "static public final int DG = 4;",
      "info" : "FieldDeclaration[11772-11803]:FieldDeclaration[11772-11803]"
    }, {
      "left" : "static public final int DB = 5;",
      "right" : "static public final int DB = 5;",
      "info" : "FieldDeclaration[11806-11837]:FieldDeclaration[11806-11837]"
    }, {
      "left" : "static public final int DA = 6;",
      "right" : "static public final int DA = 6;",
      "info" : "FieldDeclaration[11840-11871]:FieldDeclaration[11840-11871]"
    }, {
      "left" : "static public final int SPR = 28;",
      "right" : "static public final int SPR = 28;",
      "info" : "FieldDeclaration[11913-11946]:FieldDeclaration[11913-11946]"
    }, {
      "left" : "static public final int SPG = 29;",
      "right" : "static public final int SPG = 29;",
      "info" : "FieldDeclaration[11949-11982]:FieldDeclaration[11949-11982]"
    }, {
      "left" : "static public final int SPB = 30;",
      "right" : "static public final int SPB = 30;",
      "info" : "FieldDeclaration[11985-12018]:FieldDeclaration[11985-12018]"
    }, {
      "left" : "static public final int SHINE = 31;",
      "right" : "static public final int SHINE = 31;",
      "info" : "FieldDeclaration[12022-12057]:FieldDeclaration[12022-12057]"
    }, {
      "left" : "static public final int ER = 32;",
      "right" : "static public final int ER = 32;",
      "info" : "FieldDeclaration[12099-12131]:FieldDeclaration[12099-12131]"
    }, {
      "left" : "static public final int EG = 33;",
      "right" : "static public final int EG = 33;",
      "info" : "FieldDeclaration[12134-12166]:FieldDeclaration[12134-12166]"
    }, {
      "left" : "static public final int EB = 34;",
      "right" : "static public final int EB = 34;",
      "info" : "FieldDeclaration[12169-12201]:FieldDeclaration[12169-12201]"
    }, {
      "left" : "static public final int BEEN_LIT = 35;",
      "right" : "static public final int BEEN_LIT = 35;",
      "info" : "FieldDeclaration[12239-12277]:FieldDeclaration[12239-12277]"
    }, {
      "left" : "static public final int HAS_NORMAL = 36;",
      "right" : "static public final int HAS_NORMAL = 36;",
      "info" : "FieldDeclaration[12329-12369]:FieldDeclaration[12329-12369]"
    }, {
      "left" : "static public final int VERTEX_FIELD_COUNT = 37;",
      "right" : "static public final int VERTEX_FIELD_COUNT = 37;",
      "info" : "FieldDeclaration[12373-12421]:FieldDeclaration[12373-12421]"
    }, {
      "left" : "public int colorMode;",
      "right" : "public int colorMode;",
      "info" : "FieldDeclaration[12586-12638]:FieldDeclaration[12586-12638]"
    }, {
      "left" : "public float colorModeX;",
      "right" : "public float colorModeX;",
      "info" : "FieldDeclaration[12652-12729]:FieldDeclaration[12652-12729]"
    }, {
      "left" : "public float colorModeY;",
      "right" : "public float colorModeY;",
      "info" : "FieldDeclaration[12743-12829]:FieldDeclaration[12743-12829]"
    }, {
      "left" : "public float colorModeZ;",
      "right" : "public float colorModeZ;",
      "info" : "FieldDeclaration[12843-12923]:FieldDeclaration[12843-12923]"
    }, {
      "left" : "public float colorModeA;",
      "right" : "public float colorModeA;",
      "info" : "FieldDeclaration[12937-13007]:FieldDeclaration[12937-13007]"
    }, {
      "left" : "boolean colorModeScale;",
      "right" : "boolean colorModeScale;",
      "info" : "FieldDeclaration[13021-13094]:FieldDeclaration[13021-13094]"
    }, {
      "left" : "boolean colorModeDefault;",
      "right" : "boolean colorModeDefault;",
      "info" : "FieldDeclaration[13109-13171]:FieldDeclaration[13109-13171]"
    }, {
      "left" : "public boolean tint;",
      "right" : "public boolean tint;",
      "info" : "FieldDeclaration[13277-13653]:FieldDeclaration[13277-13653]"
    }, {
      "left" : "public int tintColor;",
      "right" : "public int tintColor;",
      "info" : "FieldDeclaration[13657-13722]:FieldDeclaration[13657-13722]"
    }, {
      "left" : "protected boolean tintAlpha;",
      "right" : "protected boolean tintAlpha;",
      "info" : "FieldDeclaration[13726-13754]:FieldDeclaration[13726-13754]"
    }, {
      "left" : "protected float tintR, tintG, tintB, tintA;",
      "right" : "protected float tintR, tintG, tintB, tintA;",
      "info" : "FieldDeclaration[13757-13800]:FieldDeclaration[13757-13800]"
    }, {
      "left" : "protected int tintRi, tintGi, tintBi, tintAi;",
      "right" : "protected int tintRi, tintGi, tintBi, tintAi;",
      "info" : "FieldDeclaration[13803-13848]:FieldDeclaration[13803-13848]"
    }, {
      "left" : "public boolean fill;",
      "right" : "public boolean fill;",
      "info" : "FieldDeclaration[13932-14000]:FieldDeclaration[13932-14000]"
    }, {
      "left" : "public int fillColor = 0xffFFFFFF;",
      "right" : "public int fillColor = 0xffFFFFFF;",
      "info" : "FieldDeclaration[14004-14082]:FieldDeclaration[14004-14082]"
    }, {
      "left" : "protected boolean fillAlpha;",
      "right" : "protected boolean fillAlpha;",
      "info" : "FieldDeclaration[14086-14114]:FieldDeclaration[14086-14114]"
    }, {
      "left" : "protected float fillR, fillG, fillB, fillA;",
      "right" : "protected float fillR, fillG, fillB, fillA;",
      "info" : "FieldDeclaration[14117-14160]:FieldDeclaration[14117-14160]"
    }, {
      "left" : "protected int fillRi, fillGi, fillBi, fillAi;",
      "right" : "protected int fillRi, fillGi, fillBi, fillAi;",
      "info" : "FieldDeclaration[14163-14208]:FieldDeclaration[14163-14208]"
    }, {
      "left" : "public boolean stroke;",
      "right" : "public boolean stroke;",
      "info" : "FieldDeclaration[14294-14366]:FieldDeclaration[14294-14366]"
    }, {
      "left" : "public int strokeColor = 0xff000000;",
      "right" : "public int strokeColor = 0xff000000;",
      "info" : "FieldDeclaration[14370-14452]:FieldDeclaration[14370-14452]"
    }, {
      "left" : "protected boolean strokeAlpha;",
      "right" : "protected boolean strokeAlpha;",
      "info" : "FieldDeclaration[14456-14486]:FieldDeclaration[14456-14486]"
    }, {
      "left" : "protected float strokeR, strokeG, strokeB, strokeA;",
      "right" : "protected float strokeR, strokeG, strokeB, strokeA;",
      "info" : "FieldDeclaration[14489-14540]:FieldDeclaration[14489-14540]"
    }, {
      "left" : "protected int strokeRi, strokeGi, strokeBi, strokeAi;",
      "right" : "protected int strokeRi, strokeGi, strokeBi, strokeAi;",
      "info" : "FieldDeclaration[14543-14596]:FieldDeclaration[14543-14596]"
    }, {
      "left" : "static protected final float DEFAULT_STROKE_WEIGHT = 1;",
      "right" : "static protected final float DEFAULT_STROKE_WEIGHT = 1;",
      "info" : "FieldDeclaration[14698-14753]:FieldDeclaration[14698-14753]"
    }, {
      "left" : "static protected final int DEFAULT_STROKE_JOIN = MITER;",
      "right" : "static protected final int DEFAULT_STROKE_JOIN = MITER;",
      "info" : "FieldDeclaration[14756-14811]:FieldDeclaration[14756-14811]"
    }, {
      "left" : "static protected final int DEFAULT_STROKE_CAP = ROUND;",
      "right" : "static protected final int DEFAULT_STROKE_CAP = ROUND;",
      "info" : "FieldDeclaration[14814-14868]:FieldDeclaration[14814-14868]"
    }, {
      "left" : "public float strokeWeight = DEFAULT_STROKE_WEIGHT;",
      "right" : "public float strokeWeight = DEFAULT_STROKE_WEIGHT;",
      "info" : "FieldDeclaration[14872-15109]:FieldDeclaration[14872-15109]"
    }, {
      "left" : "public int strokeJoin = DEFAULT_STROKE_JOIN;",
      "right" : "public int strokeJoin = DEFAULT_STROKE_JOIN;",
      "info" : "FieldDeclaration[15113-15356]:FieldDeclaration[15113-15356]"
    }, {
      "left" : "public int strokeCap = DEFAULT_STROKE_CAP;",
      "right" : "public int strokeCap = DEFAULT_STROKE_CAP;",
      "info" : "FieldDeclaration[15360-15599]:FieldDeclaration[15360-15599]"
    }, {
      "left" : "public int rectMode;",
      "right" : "public int rectMode;",
      "info" : "FieldDeclaration[15742-15805]:FieldDeclaration[15742-15805]"
    }, {
      "left" : "public int ellipseMode;",
      "right" : "public int ellipseMode;",
      "info" : "FieldDeclaration[15809-15878]:FieldDeclaration[15809-15878]"
    }, {
      "left" : "public int shapeMode;",
      "right" : "public int shapeMode;",
      "info" : "FieldDeclaration[15882-15957]:FieldDeclaration[15882-15957]"
    }, {
      "left" : "public int imageMode = CORNER;",
      "right" : "public int imageMode = CORNER;",
      "info" : "FieldDeclaration[15961-16040]:FieldDeclaration[15961-16040]"
    }, {
      "left" : "public PFont textFont;",
      "right" : "public PFont textFont;",
      "info" : "FieldDeclaration[16138-16203]:FieldDeclaration[16138-16203]"
    }, {
      "left" : "public int textAlign = LEFT;",
      "right" : "public int textAlign = LEFT;",
      "info" : "FieldDeclaration[16207-16279]:FieldDeclaration[16207-16279]"
    }, {
      "left" : "public int textAlignY = BASELINE;",
      "right" : "public int textAlignY = BASELINE;",
      "info" : "FieldDeclaration[16283-16373]:FieldDeclaration[16283-16373]"
    }, {
      "left" : "public int textMode = MODEL;",
      "right" : "public int textMode = MODEL;",
      "info" : "FieldDeclaration[16377-16448]:FieldDeclaration[16377-16448]"
    }, {
      "left" : "public float textSize;",
      "right" : "public float textSize;",
      "info" : "FieldDeclaration[16452-16517]:FieldDeclaration[16452-16517]"
    }, {
      "left" : "public float textLeading;",
      "right" : "public float textLeading;",
      "info" : "FieldDeclaration[16521-16592]:FieldDeclaration[16521-16592]"
    }, {
      "left" : "public int ambientColor;",
      "right" : "public int ambientColor;",
      "info" : "FieldDeclaration[16771-16795]:FieldDeclaration[16877-16901]"
    }, {
      "left" : "public float ambientR, ambientG, ambientB;",
      "right" : "public float ambientR, ambientG, ambientB;",
      "info" : "FieldDeclaration[16798-16840]:FieldDeclaration[16904-16946]"
    }, {
      "left" : "public boolean setAmbient;",
      "right" : "public boolean setAmbient;",
      "info" : "FieldDeclaration[16843-16869]:FieldDeclaration[16949-16975]"
    }, {
      "left" : "public int specularColor;",
      "right" : "public int specularColor;",
      "info" : "FieldDeclaration[16873-16898]:FieldDeclaration[16979-17004]"
    }, {
      "left" : "public float specularR, specularG, specularB;",
      "right" : "public float specularR, specularG, specularB;",
      "info" : "FieldDeclaration[16901-16946]:FieldDeclaration[17007-17052]"
    }, {
      "left" : "public int emissiveColor;",
      "right" : "public int emissiveColor;",
      "info" : "FieldDeclaration[16950-16975]:FieldDeclaration[17056-17081]"
    }, {
      "left" : "public float emissiveR, emissiveG, emissiveB;",
      "right" : "public float emissiveR, emissiveG, emissiveB;",
      "info" : "FieldDeclaration[16978-17023]:FieldDeclaration[17084-17129]"
    }, {
      "left" : "public float shininess;",
      "right" : "public float shininess;",
      "info" : "FieldDeclaration[17027-17050]:FieldDeclaration[17133-17156]"
    }, {
      "left" : "static final int STYLE_STACK_DEPTH = 64;",
      "right" : "static final int STYLE_STACK_DEPTH = 64;",
      "info" : "FieldDeclaration[17073-17113]:FieldDeclaration[17179-17219]"
    }, {
      "left" : "PStyle[] styleStack = new PStyle[STYLE_STACK_DEPTH];",
      "right" : "PStyle[] styleStack = new PStyle[STYLE_STACK_DEPTH];",
      "info" : "FieldDeclaration[17116-17168]:FieldDeclaration[17222-17274]"
    }, {
      "left" : "int styleStackDepth;",
      "right" : "int styleStackDepth;",
      "info" : "FieldDeclaration[17171-17191]:FieldDeclaration[17277-17297]"
    }, {
      "left" : "public int backgroundColor = 0xffCCCCCC;",
      "right" : "public int backgroundColor = 0xffCCCCCC;",
      "info" : "FieldDeclaration[17261-17363]:FieldDeclaration[17367-17469]"
    }, {
      "left" : "protected boolean backgroundAlpha;",
      "right" : "protected boolean backgroundAlpha;",
      "info" : "FieldDeclaration[17367-17401]:FieldDeclaration[17473-17507]"
    }, {
      "left" : "protected float backgroundR, backgroundG, backgroundB, backgroundA;",
      "right" : "protected float backgroundR, backgroundG, backgroundB, backgroundA;",
      "info" : "FieldDeclaration[17404-17471]:FieldDeclaration[17510-17577]"
    }, {
      "left" : "protected int backgroundRi, backgroundGi, backgroundBi, backgroundAi;",
      "right" : "protected int backgroundRi, backgroundGi, backgroundBi, backgroundAi;",
      "info" : "FieldDeclaration[17474-17543]:FieldDeclaration[17580-17649]"
    }, {
      "left" : "protected int blendMode;",
      "right" : "protected int blendMode;",
      "info" : "FieldDeclaration[17548-17608]:FieldDeclaration[17894-17954]"
    }, {
      "left" : "//  PMatrix matrix;\n//  public float m00, m01, m02, m03;\n//  public float m10, m11, m12, m13;\n//  public float m20, m21, m22, m23;\n//  public float m30, m31, m32, m33;\n\n//  static final int MATRIX_STACK_DEPTH = 32;\n//  float[][] matrixStack = new float[MATRIX_STACK_DEPTH][16];\n//  float[][] matrixInvStack = new float[MATRIX_STACK_DEPTH][16];\n//  int matrixStackDepth;\n\n  static final int MATRIX_STACK_DEPTH = 32;",
      "right" : "//  PMatrix matrix;\n//  public float m00, m01, m02, m03;\n//  public float m10, m11, m12, m13;\n//  public float m20, m21, m22, m23;\n//  public float m30, m31, m32, m33;\n\n//  static final int MATRIX_STACK_DEPTH = 32;\n//  float[][] matrixStack = new float[MATRIX_STACK_DEPTH][16];\n//  float[][] matrixInvStack = new float[MATRIX_STACK_DEPTH][16];\n//  int matrixStackDepth;\n\n  static final int MATRIX_STACK_DEPTH = 32;",
      "info" : "FieldDeclaration[17676-18243]:FieldDeclaration[18022-18589]"
    }, {
      "left" : "public Image image;",
      "right" : "public Image image;",
      "info" : "FieldDeclaration[18310-18557]:FieldDeclaration[18888-19135]"
    }, {
      "left" : "protected PSurface surface;",
      "right" : "protected PSurface surface;",
      "info" : "FieldDeclaration[18561-18634]:FieldDeclaration[19139-19212]"
    }, {
      "left" : "protected float calcR, calcG, calcB, calcA;",
      "right" : "protected float calcR, calcG, calcB, calcA;",
      "info" : "FieldDeclaration[18745-18788]:FieldDeclaration[19323-19366]"
    }, {
      "left" : "protected int calcRi, calcGi, calcBi, calcAi;",
      "right" : "protected int calcRi, calcGi, calcBi, calcAi;",
      "info" : "FieldDeclaration[18791-18836]:FieldDeclaration[19369-19414]"
    }, {
      "left" : "protected int calcColor;",
      "right" : "protected int calcColor;",
      "info" : "FieldDeclaration[18839-18863]:FieldDeclaration[19417-19441]"
    }, {
      "left" : "protected boolean calcAlpha;",
      "right" : "protected boolean calcAlpha;",
      "info" : "FieldDeclaration[18866-18894]:FieldDeclaration[19444-19472]"
    }, {
      "left" : "int cacheHsbKey;",
      "right" : "int cacheHsbKey;",
      "info" : "FieldDeclaration[18898-18959]:FieldDeclaration[19476-19537]"
    }, {
      "left" : "float[] cacheHsbValue = new float[3];",
      "right" : "float[] cacheHsbValue = new float[3];",
      "info" : "FieldDeclaration[18962-19045]:FieldDeclaration[19540-19623]"
    }, {
      "left" : "protected int shape;",
      "right" : "protected int shape;",
      "info" : "FieldDeclaration[19112-19235]:FieldDeclaration[19690-19813]"
    }, {
      "left" : "public static final int DEFAULT_VERTICES = 512;",
      "right" : "public static final int DEFAULT_VERTICES = 512;",
      "info" : "FieldDeclaration[19253-19300]:FieldDeclaration[19831-19878]"
    }, {
      "left" : "protected float vertices[][] =\n    new float[DEFAULT_VERTICES][VERTEX_FIELD_COUNT];",
      "right" : "protected float vertices[][] =\n    new float[DEFAULT_VERTICES][VERTEX_FIELD_COUNT];",
      "info" : "FieldDeclaration[19303-19386]:FieldDeclaration[19881-19964]"
    }, {
      "left" : "protected int vertexCount;",
      "right" : "protected int vertexCount;",
      "info" : "FieldDeclaration[19389-19415]:FieldDeclaration[19967-19993]"
    }, {
      "left" : "protected boolean bezierInited = false;",
      "right" : "protected boolean bezierInited = false;",
      "info" : "FieldDeclaration[19510-19549]:FieldDeclaration[20088-20127]"
    }, {
      "left" : "public int bezierDetail = 20;",
      "right" : "public int bezierDetail = 20;",
      "info" : "FieldDeclaration[19552-19581]:FieldDeclaration[20130-20159]"
    }, {
      "left" : "protected PMatrix3D bezierBasisMatrix =\n    new PMatrix3D(-1,  3, -3,  1,\n                   3, -6,  3,  0,\n                  -3,  3,  0,  0,\n                   1,  0,  0,  0);",
      "right" : "protected PMatrix3D bezierBasisMatrix =\n    new PMatrix3D(-1,  3, -3,  1,\n                   3, -6,  3,  0,\n                  -3,  3,  0,  0,\n                   1,  0,  0,  0);",
      "info" : "FieldDeclaration[19639-19815]:FieldDeclaration[20217-20393]"
    }, {
      "left" : "protected PMatrix3D bezierDrawMatrix;",
      "right" : "protected PMatrix3D bezierDrawMatrix;",
      "info" : "FieldDeclaration[19864-19901]:FieldDeclaration[20442-20479]"
    }, {
      "left" : "protected boolean curveInited = false;",
      "right" : "protected boolean curveInited = false;",
      "info" : "FieldDeclaration[19968-20006]:FieldDeclaration[20546-20584]"
    }, {
      "left" : "public int curveDetail = 20;",
      "right" : "public int curveDetail = 20;",
      "info" : "FieldDeclaration[20009-20037]:FieldDeclaration[20587-20615]"
    }, {
      "left" : "public float curveTightness = 0;",
      "right" : "public float curveTightness = 0;",
      "info" : "FieldDeclaration[20040-20072]:FieldDeclaration[20618-20650]"
    }, {
      "left" : "protected PMatrix3D curveBasisMatrix;",
      "right" : "protected PMatrix3D curveBasisMatrix;",
      "info" : "FieldDeclaration[20140-20177]:FieldDeclaration[20718-20755]"
    }, {
      "left" : "protected PMatrix3D curveDrawMatrix;",
      "right" : "protected PMatrix3D curveDrawMatrix;",
      "info" : "FieldDeclaration[20180-20216]:FieldDeclaration[20758-20794]"
    }, {
      "left" : "protected PMatrix3D bezierBasisInverse;",
      "right" : "protected PMatrix3D bezierBasisInverse;",
      "info" : "FieldDeclaration[20220-20259]:FieldDeclaration[20798-20837]"
    }, {
      "left" : "protected PMatrix3D curveToBezierMatrix;",
      "right" : "protected PMatrix3D curveToBezierMatrix;",
      "info" : "FieldDeclaration[20262-20302]:FieldDeclaration[20840-20880]"
    }, {
      "left" : "protected float curveVertices[][];",
      "right" : "protected float curveVertices[][];",
      "info" : "FieldDeclaration[20391-20425]:FieldDeclaration[20969-21003]"
    }, {
      "left" : "protected int curveVertexCount;",
      "right" : "protected int curveVertexCount;",
      "info" : "FieldDeclaration[20428-20459]:FieldDeclaration[21006-21037]"
    }, {
      "left" : "static final protected float sinLUT[];",
      "right" : "static final protected float sinLUT[];",
      "info" : "FieldDeclaration[20866-20904]:FieldDeclaration[21444-21482]"
    }, {
      "left" : "static final protected float cosLUT[];",
      "right" : "static final protected float cosLUT[];",
      "info" : "FieldDeclaration[20907-20945]:FieldDeclaration[21485-21523]"
    }, {
      "left" : "static final protected float SINCOS_PRECISION = 0.5f;",
      "right" : "static final protected float SINCOS_PRECISION = 0.5f;",
      "info" : "FieldDeclaration[20948-21001]:FieldDeclaration[21526-21579]"
    }, {
      "left" : "static final protected int SINCOS_LENGTH = (int) (360f / SINCOS_PRECISION);",
      "right" : "static final protected int SINCOS_LENGTH = (int) (360f / SINCOS_PRECISION);",
      "info" : "FieldDeclaration[21004-21079]:FieldDeclaration[21582-21657]"
    }, {
      "left" : "protected char[] textBuffer = new char[8 * 1024];",
      "right" : "protected char[] textBuffer = new char[8 * 1024];",
      "info" : "FieldDeclaration[21748-21898]:FieldDeclaration[22326-22476]"
    }, {
      "left" : "protected char[] textWidthBuffer = new char[8 * 1024];",
      "right" : "protected char[] textWidthBuffer = new char[8 * 1024];",
      "info" : "FieldDeclaration[21901-21955]:FieldDeclaration[22479-22533]"
    }, {
      "left" : "protected int textBreakCount;",
      "right" : "protected int textBreakCount;",
      "info" : "FieldDeclaration[21959-21988]:FieldDeclaration[22537-22566]"
    }, {
      "left" : "protected int[] textBreakStart;",
      "right" : "protected int[] textBreakStart;",
      "info" : "FieldDeclaration[21991-22022]:FieldDeclaration[22569-22600]"
    }, {
      "left" : "protected int[] textBreakStop;",
      "right" : "protected int[] textBreakStop;",
      "info" : "FieldDeclaration[22025-22055]:FieldDeclaration[22603-22633]"
    }, {
      "left" : "public boolean edge = true;",
      "right" : "public boolean edge = true;",
      "info" : "FieldDeclaration[22122-22149]:FieldDeclaration[22700-22727]"
    }, {
      "left" : "static protected final int NORMAL_MODE_AUTO = 0;",
      "right" : "static protected final int NORMAL_MODE_AUTO = 0;",
      "info" : "FieldDeclaration[22253-22301]:FieldDeclaration[22831-22879]"
    }, {
      "left" : "static protected final int NORMAL_MODE_SHAPE = 1;",
      "right" : "static protected final int NORMAL_MODE_SHAPE = 1;",
      "info" : "FieldDeclaration[22350-22399]:FieldDeclaration[22928-22977]"
    }, {
      "left" : "static protected final int NORMAL_MODE_VERTEX = 2;",
      "right" : "static protected final int NORMAL_MODE_VERTEX = 2;",
      "info" : "FieldDeclaration[22448-22498]:FieldDeclaration[23026-23076]"
    }, {
      "left" : "protected int normalMode;",
      "right" : "protected int normalMode;",
      "info" : "FieldDeclaration[22564-22589]:FieldDeclaration[23142-23167]"
    }, {
      "left" : "protected boolean autoNormal;",
      "right" : "protected boolean autoNormal;",
      "info" : "FieldDeclaration[22694-22723]:FieldDeclaration[23272-23301]"
    }, {
      "left" : "public float normalX, normalY, normalZ;",
      "right" : "public float normalX, normalY, normalZ;",
      "info" : "FieldDeclaration[22727-22798]:FieldDeclaration[23305-23376]"
    }, {
      "left" : "public int textureMode = IMAGE;",
      "right" : "public int textureMode = IMAGE;",
      "info" : "FieldDeclaration[22865-23053]:FieldDeclaration[23443-23631]"
    }, {
      "left" : "public float textureU;",
      "right" : "public float textureU;",
      "info" : "FieldDeclaration[23057-23210]:FieldDeclaration[23635-23788]"
    }, {
      "left" : "public float textureV;",
      "right" : "public float textureV;",
      "info" : "FieldDeclaration[23214-23297]:FieldDeclaration[23792-23875]"
    }, {
      "left" : "public PImage textureImage;",
      "right" : "public PImage textureImage;",
      "info" : "FieldDeclaration[23301-23375]:FieldDeclaration[23879-23953]"
    }, {
      "left" : "protected float sphereX[], sphereY[], sphereZ[];",
      "right" : "protected float sphereX[], sphereY[], sphereZ[];",
      "info" : "FieldDeclaration[23576-23624]:FieldDeclaration[24154-24202]"
    }, {
      "left" : "public int sphereDetailU = 0;",
      "right" : "public int sphereDetailU = 0;",
      "info" : "FieldDeclaration[23702-23731]:FieldDeclaration[24280-24309]"
    }, {
      "left" : "public int sphereDetailV = 0;",
      "right" : "public int sphereDetailV = 0;",
      "info" : "FieldDeclaration[23816-23845]:FieldDeclaration[24394-24423]"
    }, {
      "left" : "public PGraphics()",
      "right" : "public PGraphics()",
      "info" : "MethodDeclaration[24226-24287]:MethodDeclaration[24804-24865]"
    }, {
      "left" : "public void setParent(PApplet parent)",
      "right" : "public void setParent(PApplet parent)",
      "info" : "MethodDeclaration[24292-24588]:MethodDeclaration[24870-25166]"
    }, {
      "left" : "public void setPrimary(boolean primary)",
      "right" : "public void setPrimary(boolean primary)",
      "info" : "MethodDeclaration[24593-25136]:MethodDeclaration[25171-25714]"
    }, {
      "left" : "public void setPath(String path)",
      "right" : "public void setPath(String path)",
      "info" : "MethodDeclaration[25141-25212]:MethodDeclaration[25719-25790]"
    }, {
      "left" : "public void setSize(int w, int h)",
      "right" : "public void setSize(int w, int h)",
      "info" : "MethodDeclaration[25308-26222]:MethodDeclaration[25886-26800]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[26414-26705]:MethodDeclaration[26992-27283]"
    }, {
      "left" : "public PSurface createSurface()",
      "right" : "public PSurface createSurface()",
      "info" : "MethodDeclaration[26710-26802]:MethodDeclaration[27288-27380]"
    }, {
      "left" : "public void setCache(PImage image, Object storage)",
      "right" : "public void setCache(PImage image, Object storage)",
      "info" : "MethodDeclaration[26913-27480]:MethodDeclaration[27491-28058]"
    }, {
      "left" : "public Object getCache(PImage image)",
      "right" : "public Object getCache(PImage image)",
      "info" : "MethodDeclaration[27485-28014]:MethodDeclaration[28063-28592]"
    }, {
      "left" : "public void removeCache(PImage image)",
      "right" : "public void removeCache(PImage image)",
      "info" : "MethodDeclaration[28019-28270]:MethodDeclaration[28597-28848]"
    }, {
      "left" : "public boolean canDraw()",
      "right" : "public boolean canDraw()",
      "info" : "MethodDeclaration[28355-28496]:MethodDeclaration[28933-29074]"
    }, {
      "left" : "public void beginDraw()",
      "right" : "public void beginDraw()",
      "info" : "MethodDeclaration[28764-29248]:MethodDeclaration[29342-29826]"
    }, {
      "left" : "public void endDraw()",
      "right" : "public void endDraw()",
      "info" : "MethodDeclaration[29253-29705]:MethodDeclaration[29831-30283]"
    }, {
      "left" : "public PGL beginPGL()",
      "right" : "public PGL beginPGL()",
      "info" : "MethodDeclaration[29710-29788]:MethodDeclaration[30288-30366]"
    }, {
      "left" : "public void endPGL()",
      "right" : "public void endPGL()",
      "info" : "MethodDeclaration[29793-29851]:MethodDeclaration[30371-30429]"
    }, {
      "left" : "public void flush()",
      "right" : "public void flush()",
      "info" : "MethodDeclaration[29856-29932]:MethodDeclaration[30434-30510]"
    }, {
      "left" : "protected void checkSettings()",
      "right" : "protected void checkSettings()",
      "info" : "MethodDeclaration[29937-30061]:MethodDeclaration[30515-30639]"
    }, {
      "left" : "protected void defaultSettings()",
      "right" : "protected void defaultSettings()",
      "info" : "MethodDeclaration[30066-31960]:MethodDeclaration[30644-32538]"
    }, {
      "left" : "protected void reapplySettings()",
      "right" : "protected void reapplySettings()",
      "info" : "MethodDeclaration[31965-34157]:MethodDeclaration[32543-34735]"
    }, {
      "left" : "public void hint(int which)",
      "right" : "public void hint(int which)",
      "info" : "MethodDeclaration[34311-38110]:MethodDeclaration[34889-38688]"
    }, {
      "left" : "public void beginShape()",
      "right" : "public void beginShape()",
      "info" : "MethodDeclaration[38201-38307]:MethodDeclaration[38779-38885]"
    }, {
      "left" : "public void beginShape(int kind)",
      "right" : "public void beginShape(int kind)",
      "info" : "MethodDeclaration[38312-40446]:MethodDeclaration[38890-41024]"
    }, {
      "left" : "public void edge(boolean edge)",
      "right" : "public void edge(boolean edge)",
      "info" : "MethodDeclaration[40451-40644]:MethodDeclaration[41029-41222]"
    }, {
      "left" : "public void normal(float nx, float ny, float nz)",
      "right" : "public void normal(float nx, float ny, float nz)",
      "info" : "MethodDeclaration[40649-41916]:MethodDeclaration[41227-42494]"
    }, {
      "left" : "public void attrib(String name, float... values)",
      "right" : "public void attrib(String name, float... values)",
      "info" : "MethodDeclaration[41921-42009]:MethodDeclaration[42499-42587]"
    }, {
      "left" : "public void attrib(String name, int... values)",
      "right" : "public void attrib(String name, int... values)",
      "info" : "MethodDeclaration[42014-42100]:MethodDeclaration[42592-42678]"
    }, {
      "left" : "public void attrib(String name, boolean... values)",
      "right" : "public void attrib(String name, boolean... values)",
      "info" : "MethodDeclaration[42105-42195]:MethodDeclaration[42683-42773]"
    }, {
      "left" : "public void textureMode(int mode)",
      "right" : "public void textureMode(int mode)",
      "info" : "MethodDeclaration[42200-43122]:MethodDeclaration[42778-43700]"
    }, {
      "left" : "public void textureWrap(int wrap)",
      "right" : "public void textureWrap(int wrap)",
      "info" : "MethodDeclaration[43126-43510]:MethodDeclaration[43704-44088]"
    }, {
      "left" : "public void texture(PImage image)",
      "right" : "public void texture(PImage image)",
      "info" : "MethodDeclaration[43515-44323]:MethodDeclaration[44093-44901]"
    }, {
      "left" : "public void noTexture()",
      "right" : "public void noTexture()",
      "info" : "MethodDeclaration[44328-44501]:MethodDeclaration[44906-45079]"
    }, {
      "left" : "protected void vertexCheck()",
      "right" : "protected void vertexCheck()",
      "info" : "MethodDeclaration[44506-44742]:MethodDeclaration[45084-45320]"
    }, {
      "left" : "public void vertex(float x, float y)",
      "right" : "public void vertex(float x, float y)",
      "info" : "MethodDeclaration[44747-46372]:MethodDeclaration[45325-46950]"
    }, {
      "left" : "public void vertex(float x, float y, float z)",
      "right" : "public void vertex(float x, float y, float z)",
      "info" : "MethodDeclaration[46377-49182]:MethodDeclaration[46955-49760]"
    }, {
      "left" : "public void vertex(float[] v)",
      "right" : "public void vertex(float[] v)",
      "info" : "MethodDeclaration[49187-49589]:MethodDeclaration[49765-50167]"
    }, {
      "left" : "public void vertex(float x, float y, float u, float v)",
      "right" : "public void vertex(float x, float y, float u, float v)",
      "info" : "MethodDeclaration[49594-49697]:MethodDeclaration[50172-50275]"
    }, {
      "left" : "public void vertex(float x, float y, float z, float u, float v)",
      "right" : "public void vertex(float x, float y, float z, float u, float v)",
      "info" : "MethodDeclaration[49699-51382]:MethodDeclaration[50277-51960]"
    }, {
      "left" : "protected void vertexTexture(float u, float v)",
      "right" : "protected void vertexTexture(float u, float v)",
      "info" : "MethodDeclaration[51660-52831]:MethodDeclaration[52238-53409]"
    }, {
      "left" : "public void beginContour()",
      "right" : "public void beginContour()",
      "info" : "MethodDeclaration[53077-53187]:MethodDeclaration[53655-53765]"
    }, {
      "left" : "public void endContour()",
      "right" : "public void endContour()",
      "info" : "MethodDeclaration[53192-53298]:MethodDeclaration[53770-53876]"
    }, {
      "left" : "public void endShape()",
      "right" : "public void endShape()",
      "info" : "MethodDeclaration[53303-53351]:MethodDeclaration[53881-53929]"
    }, {
      "left" : "public void endShape(int mode)",
      "right" : "public void endShape(int mode)",
      "info" : "MethodDeclaration[53356-54021]:MethodDeclaration[53934-54599]"
    }, {
      "left" : "public PShape loadShape(String filename)",
      "right" : "public PShape loadShape(String filename)",
      "info" : "MethodDeclaration[54110-54337]:MethodDeclaration[54688-54915]"
    }, {
      "left" : "public PShape loadShape(String filename, String options)",
      "right" : "public PShape loadShape(String filename, String options)",
      "info" : "MethodDeclaration[54342-54485]:MethodDeclaration[54920-55063]"
    }, {
      "left" : "public PShape createShape()",
      "right" : "public PShape createShape()",
      "info" : "MethodDeclaration[54579-54904]:MethodDeclaration[55157-55482]"
    }, {
      "left" : "public PShape createShape(int type)",
      "right" : "public PShape createShape(int type)",
      "info" : "MethodDeclaration[54988-55384]:MethodDeclaration[55566-55962]"
    }, {
      "left" : "protected PShape createShapeFamily(int type)",
      "right" : "protected PShape createShapeFamily(int type)",
      "info" : "MethodDeclaration[55389-55614]:MethodDeclaration[55967-56192]"
    }, {
      "left" : "public PShape createShape(int kind, float... p)",
      "right" : "public PShape createShape(int kind, float... p)",
      "info" : "MethodDeclaration[55619-58426]:MethodDeclaration[56197-59004]"
    }, {
      "left" : "protected PShape createShapePrimitive(int kind, float... p)",
      "right" : "protected PShape createShapePrimitive(int kind, float... p)",
      "info" : "MethodDeclaration[58431-58671]:MethodDeclaration[59009-59249]"
    }, {
      "left" : "public PShader loadShader(String fragFilename)",
      "right" : "public PShader loadShader(String fragFilename)",
      "info" : "MethodDeclaration[58757-59137]:MethodDeclaration[59335-59715]"
    }, {
      "left" : "public PShader loadShader(String fragFilename, String vertFilename)",
      "right" : "public PShader loadShader(String fragFilename, String vertFilename)",
      "info" : "MethodDeclaration[59142-59334]:MethodDeclaration[59720-59912]"
    }, {
      "left" : "public void shader(PShader shader)",
      "right" : "public void shader(PShader shader)",
      "info" : "MethodDeclaration[59339-59667]:MethodDeclaration[59917-60245]"
    }, {
      "left" : "public void shader(PShader shader, int kind)",
      "right" : "public void shader(PShader shader, int kind)",
      "info" : "MethodDeclaration[59672-59836]:MethodDeclaration[60250-60414]"
    }, {
      "left" : "public void resetShader()",
      "right" : "public void resetShader()",
      "info" : "MethodDeclaration[59841-60131]:MethodDeclaration[60419-60709]"
    }, {
      "left" : "public void resetShader(int kind)",
      "right" : "public void resetShader(int kind)",
      "info" : "MethodDeclaration[60136-60294]:MethodDeclaration[60714-60872]"
    }, {
      "left" : "public void filter(PShader shader)",
      "right" : "public void filter(PShader shader)",
      "info" : "MethodDeclaration[60299-60433]:MethodDeclaration[60877-61011]"
    }, {
      "left" : "public void clip(float a, float b, float c, float d)",
      "right" : "public void clip(float a, float b, float c, float d)",
      "info" : "MethodDeclaration[60769-61535]:MethodDeclaration[61347-62113]"
    }, {
      "left" : "protected void clipImpl(float x1, float y1, float x2, float y2)",
      "right" : "protected void clipImpl(float x1, float y1, float x2, float y2)",
      "info" : "MethodDeclaration[61540-61641]:MethodDeclaration[62118-62219]"
    }, {
      "left" : "public void noClip()",
      "right" : "public void noClip()",
      "info" : "MethodDeclaration[61687-61747]:MethodDeclaration[62265-62325]"
    }, {
      "left" : "public void blendMode(int mode)",
      "right" : "public void blendMode(int mode)",
      "info" : "MethodDeclaration[61831-62168]:MethodDeclaration[62409-62746]"
    }, {
      "left" : "protected void blendModeImpl()",
      "right" : "protected void blendModeImpl()",
      "info" : "MethodDeclaration[62173-62284]:MethodDeclaration[62751-62862]"
    }, {
      "left" : "protected void bezierVertexCheck()",
      "right" : "protected void bezierVertexCheck()",
      "info" : "MethodDeclaration[62392-62475]:MethodDeclaration[62970-63053]"
    }, {
      "left" : "protected void bezierVertexCheck(int shape, int vertexCount)",
      "right" : "protected void bezierVertexCheck(int shape, int vertexCount)",
      "info" : "MethodDeclaration[62480-62949]:MethodDeclaration[63058-63527]"
    }, {
      "left" : "public void bezierVertex(float x2, float y2,\n                           float x3, float y3,\n                           float x4, float y4)",
      "right" : "public void bezierVertex(float x2, float y2,\n                           float x3, float y3,\n                           float x4, float y4)",
      "info" : "MethodDeclaration[62954-63910]:MethodDeclaration[63532-64488]"
    }, {
      "left" : "public void bezierVertex(float x2, float y2, float z2,\n                           float x3, float y3, float z3,\n                           float x4, float y4, float z4)",
      "right" : "public void bezierVertex(float x2, float y2, float z2,\n                           float x3, float y3, float z3,\n                           float x4, float y4, float z4)",
      "info" : "MethodDeclaration[63912-66779]:MethodDeclaration[64490-67357]"
    }, {
      "left" : "public void quadraticVertex(float cx, float cy,\n                              float x3, float y3)",
      "right" : "public void quadraticVertex(float cx, float cy,\n                              float x3, float y3)",
      "info" : "MethodDeclaration[66783-67680]:MethodDeclaration[67361-68258]"
    }, {
      "left" : "public void quadraticVertex(float cx, float cy, float cz,\n                              float x3, float y3, float z3)",
      "right" : "public void quadraticVertex(float cx, float cy, float cz,\n                              float x3, float y3, float z3)",
      "info" : "MethodDeclaration[67684-68243]:MethodDeclaration[68262-68821]"
    }, {
      "left" : "protected void curveVertexCheck()",
      "right" : "protected void curveVertexCheck()",
      "info" : "MethodDeclaration[68247-68315]:MethodDeclaration[68825-68893]"
    }, {
      "left" : "protected void curveVertexCheck(int shape)",
      "right" : "protected void curveVertexCheck(int shape)",
      "info" : "MethodDeclaration[68319-69157]:MethodDeclaration[68897-69735]"
    }, {
      "left" : "public void curveVertex(float x, float y)",
      "right" : "public void curveVertex(float x, float y)",
      "info" : "MethodDeclaration[69160-71352]:MethodDeclaration[69738-71930]"
    }, {
      "left" : "public void curveVertex(float x, float y, float z)",
      "right" : "public void curveVertex(float x, float y, float z)",
      "info" : "MethodDeclaration[71356-72473]:MethodDeclaration[71934-73051]"
    }, {
      "left" : "protected void curveVertexSegment(float x1, float y1,\n                                    float x2, float y2,\n                                    float x3, float y3,\n                                    float x4, float y4)",
      "right" : "protected void curveVertexSegment(float x1, float y1,\n                                    float x2, float y2,\n                                    float x3, float y3,\n                                    float x4, float y4)",
      "info" : "MethodDeclaration[72478-73725]:MethodDeclaration[73056-74303]"
    }, {
      "left" : "protected void curveVertexSegment(float x1, float y1, float z1,\n                                    float x2, float y2, float z2,\n                                    float x3, float y3, float z3,\n                                    float x4, float y4, float z4)",
      "right" : "protected void curveVertexSegment(float x1, float y1, float z1,\n                                    float x2, float y2, float z2,\n                                    float x3, float y3, float z3,\n                                    float x4, float y4, float z4)",
      "info" : "MethodDeclaration[73730-75323]:MethodDeclaration[74308-75901]"
    }, {
      "left" : "public void point(float x, float y)",
      "right" : "public void point(float x, float y)",
      "info" : "MethodDeclaration[75447-76164]:MethodDeclaration[76025-76742]"
    }, {
      "left" : "public void point(float x, float y, float z)",
      "right" : "public void point(float x, float y, float z)",
      "info" : "MethodDeclaration[76168-76331]:MethodDeclaration[76746-76909]"
    }, {
      "left" : "public void line(float x1, float y1, float x2, float y2)",
      "right" : "public void line(float x1, float y1, float x2, float y2)",
      "info" : "MethodDeclaration[76335-77623]:MethodDeclaration[76913-78201]"
    }, {
      "left" : "public void line(float x1, float y1, float z1,\n                   float x2, float y2, float z2)",
      "right" : "public void line(float x1, float y1, float z1,\n                   float x2, float y2, float z2)",
      "info" : "MethodDeclaration[77627-77922]:MethodDeclaration[78205-78500]"
    }, {
      "left" : "public void triangle(float x1, float y1, float x2, float y2,\n                       float x3, float y3)",
      "right" : "public void triangle(float x1, float y1, float x2, float y2,\n                       float x3, float y3)",
      "info" : "MethodDeclaration[77926-78809]:MethodDeclaration[78504-79387]"
    }, {
      "left" : "public void quad(float x1, float y1, float x2, float y2,\n                   float x3, float y3, float x4, float y4)",
      "right" : "public void quad(float x1, float y1, float x2, float y2,\n                   float x3, float y3, float x4, float y4)",
      "info" : "MethodDeclaration[78814-79901]:MethodDeclaration[79392-80479]"
    }, {
      "left" : "public void rectMode(int mode)",
      "right" : "public void rectMode(int mode)",
      "info" : "MethodDeclaration[79984-81322]:MethodDeclaration[80562-81900]"
    }, {
      "left" : "public void rect(float a, float b, float c, float d)",
      "right" : "public void rect(float a, float b, float c, float d)",
      "info" : "MethodDeclaration[81327-82777]:MethodDeclaration[81905-83355]"
    }, {
      "left" : "protected void rectImpl(float x1, float y1, float x2, float y2)",
      "right" : "protected void rectImpl(float x1, float y1, float x2, float y2)",
      "info" : "MethodDeclaration[82782-82896]:MethodDeclaration[83360-83474]"
    }, {
      "left" : "public void rect(float a, float b, float c, float d, float r)",
      "right" : "public void rect(float a, float b, float c, float d, float r)",
      "info" : "MethodDeclaration[83584-83738]:MethodDeclaration[84162-84316]"
    }, {
      "left" : "public void rect(float a, float b, float c, float d,\n                   float tl, float tr, float br, float bl)",
      "right" : "public void rect(float a, float b, float c, float d,\n                   float tl, float tr, float br, float bl)",
      "info" : "MethodDeclaration[83742-84906]:MethodDeclaration[84320-85484]"
    }, {
      "left" : "protected void rectImpl(float x1, float y1, float x2, float y2,\n                          float tl, float tr, float br, float bl)",
      "right" : "protected void rectImpl(float x1, float y1, float x2, float y2,\n                          float tl, float tr, float br, float bl)",
      "info" : "MethodDeclaration[84911-85636]:MethodDeclaration[85489-86214]"
    }, {
      "left" : "public void ellipseMode(int mode)",
      "right" : "public void ellipseMode(int mode)",
      "info" : "MethodDeclaration[85731-86816]:MethodDeclaration[86309-87394]"
    }, {
      "left" : "public void ellipse(float a, float b, float c, float d)",
      "right" : "public void ellipse(float a, float b, float c, float d)",
      "info" : "MethodDeclaration[86821-88109]:MethodDeclaration[87399-88687]"
    }, {
      "left" : "protected void ellipseImpl(float x, float y, float w, float h)",
      "right" : "protected void ellipseImpl(float x, float y, float w, float h)",
      "info" : "MethodDeclaration[88114-88182]:MethodDeclaration[88692-88760]"
    }, {
      "left" : "public void arc(float a, float b, float c, float d,\n                  float start, float stop)",
      "right" : "public void arc(float a, float b, float c, float d,\n                  float start, float stop)",
      "info" : "MethodDeclaration[88187-89295]:MethodDeclaration[88765-89873]"
    }, {
      "left" : "public void arc(float a, float b, float c, float d,\n                  float start, float stop, int mode)",
      "right" : "public void arc(float a, float b, float c, float d,\n                  float start, float stop, int mode)",
      "info" : "MethodDeclaration[89354-90340]:MethodDeclaration[89932-90918]"
    }, {
      "left" : "protected void arcImpl(float x, float y, float w, float h,\n                         float start, float stop, int mode)",
      "right" : "protected void arcImpl(float x, float y, float w, float h,\n                         float start, float stop, int mode)",
      "info" : "MethodDeclaration[90470-90880]:MethodDeclaration[91048-91458]"
    }, {
      "left" : "public void box(float size)",
      "right" : "public void box(float size)",
      "info" : "MethodDeclaration[90961-91352]:MethodDeclaration[91539-91930]"
    }, {
      "left" : "public void box(float w, float h, float d)",
      "right" : "public void box(float w, float h, float d)",
      "info" : "MethodDeclaration[91357-92630]:MethodDeclaration[91935-93208]"
    }, {
      "left" : "public void sphereDetail(int res)",
      "right" : "public void sphereDetail(int res)",
      "info" : "MethodDeclaration[92715-94026]:MethodDeclaration[93293-94604]"
    }, {
      "left" : "public void sphereDetail(int ures, int vres)",
      "right" : "public void sphereDetail(int ures, int vres)",
      "info" : "MethodDeclaration[94031-95527]:MethodDeclaration[94609-96105]"
    }, {
      "left" : "public void sphere(float r)",
      "right" : "public void sphere(float r)",
      "info" : "MethodDeclaration[95532-98422]:MethodDeclaration[96110-99000]"
    }, {
      "left" : "public float bezierPoint(float a, float b, float c, float d, float t)",
      "right" : "public float bezierPoint(float a, float b, float c, float d, float t)",
      "info" : "MethodDeclaration[98507-100292]:MethodDeclaration[99085-100870]"
    }, {
      "left" : "public float bezierTangent(float a, float b, float c, float d, float t)",
      "right" : "public float bezierTangent(float a, float b, float c, float d, float t)",
      "info" : "MethodDeclaration[100297-101377]:MethodDeclaration[100875-101955]"
    }, {
      "left" : "protected void bezierInitCheck()",
      "right" : "protected void bezierInitCheck()",
      "info" : "MethodDeclaration[101382-101471]:MethodDeclaration[101960-102049]"
    }, {
      "left" : "protected void bezierInit()",
      "right" : "protected void bezierInit()",
      "info" : "MethodDeclaration[101476-101645]:MethodDeclaration[102054-102223]"
    }, {
      "left" : "public void bezierDetail(int detail)",
      "right" : "public void bezierDetail(int detail)",
      "info" : "MethodDeclaration[101650-102804]:MethodDeclaration[102228-103382]"
    }, {
      "left" : "public void bezier(float x1, float y1,\n                     float x2, float y2,\n                     float x3, float y3,\n                     float x4, float y4)",
      "right" : "public void bezier(float x1, float y1,\n                     float x2, float y2,\n                     float x3, float y3,\n                     float x4, float y4)",
      "info" : "MethodDeclaration[102810-103073]:MethodDeclaration[103388-103651]"
    }, {
      "left" : "public void bezier(float x1, float y1, float z1,\n                     float x2, float y2, float z2,\n                     float x3, float y3, float z3,\n                     float x4, float y4, float z4)",
      "right" : "public void bezier(float x1, float y1, float z1,\n                     float x2, float y2, float z2,\n                     float x3, float y3, float z3,\n                     float x4, float y4, float z4)",
      "info" : "MethodDeclaration[103077-105774]:MethodDeclaration[103655-106352]"
    }, {
      "left" : "public float curvePoint(float a, float b, float c, float d, float t)",
      "right" : "public float curvePoint(float a, float b, float c, float d, float t)",
      "info" : "MethodDeclaration[105870-107260]:MethodDeclaration[106448-107838]"
    }, {
      "left" : "public float curveTangent(float a, float b, float c, float d, float t)",
      "right" : "public float curveTangent(float a, float b, float c, float d, float t)",
      "info" : "MethodDeclaration[107265-108631]:MethodDeclaration[107843-109209]"
    }, {
      "left" : "public void curveDetail(int detail)",
      "right" : "public void curveDetail(int detail)",
      "info" : "MethodDeclaration[108636-109295]:MethodDeclaration[109214-109873]"
    }, {
      "left" : "public void curveTightness(float tightness)",
      "right" : "public void curveTightness(float tightness)",
      "info" : "MethodDeclaration[109300-110295]:MethodDeclaration[109878-110873]"
    }, {
      "left" : "protected void curveInitCheck()",
      "right" : "protected void curveInitCheck()",
      "info" : "MethodDeclaration[110300-110386]:MethodDeclaration[110878-110964]"
    }, {
      "left" : "protected void curveInit()",
      "right" : "protected void curveInit()",
      "info" : "MethodDeclaration[110391-112156]:MethodDeclaration[110969-112734]"
    }, {
      "left" : "public void curve(float x1, float y1,\n                    float x2, float y2,\n                    float x3, float y3,\n                    float x4, float y4)",
      "right" : "public void curve(float x1, float y1,\n                    float x2, float y2,\n                    float x3, float y3,\n                    float x4, float y4)",
      "info" : "MethodDeclaration[112161-114307]:MethodDeclaration[112739-114885]"
    }, {
      "left" : "public void curve(float x1, float y1, float z1,\n                    float x2, float y2, float z2,\n                    float x3, float y3, float z3,\n                    float x4, float y4, float z4)",
      "right" : "public void curve(float x1, float y1, float z1,\n                    float x2, float y2, float z2,\n                    float x3, float y3, float z3,\n                    float x4, float y4, float z4)",
      "info" : "MethodDeclaration[114312-114892]:MethodDeclaration[114890-115470]"
    }, {
      "left" : "protected void splineForward(int segments, PMatrix3D matrix)",
      "right" : "protected void splineForward(int segments, PMatrix3D matrix)",
      "info" : "MethodDeclaration[115034-115729]:MethodDeclaration[115612-116307]"
    }, {
      "left" : "public void smooth()",
      "right" : "public void smooth()",
      "info" : "MethodDeclaration[115818-115870]:MethodDeclaration[116396-116448]"
    }, {
      "left" : "public void smooth(int quality)",
      "right" : "public void smooth(int quality)",
      "info" : "MethodDeclaration[115875-116293]:MethodDeclaration[116453-116871]"
    }, {
      "left" : "public void noSmooth()",
      "right" : "public void noSmooth()",
      "info" : "MethodDeclaration[116298-116352]:MethodDeclaration[116876-116930]"
    }, {
      "left" : "private void smoothWarning(String method)",
      "right" : "private void smoothWarning(String method)",
      "info" : "MethodDeclaration[116357-116483]:MethodDeclaration[116935-117061]"
    }, {
      "left" : "public void imageMode(int mode)",
      "right" : "public void imageMode(int mode)",
      "info" : "MethodDeclaration[116568-117939]:MethodDeclaration[117146-118517]"
    }, {
      "left" : "public void image(PImage img, float a, float b)",
      "right" : "public void image(PImage img, float a, float b)",
      "info" : "MethodDeclaration[117944-120225]:MethodDeclaration[118522-120803]"
    }, {
      "left" : "public void image(PImage img, float a, float b, float c, float d)",
      "right" : "public void image(PImage img, float a, float b, float c, float d)",
      "info" : "MethodDeclaration[120229-120452]:MethodDeclaration[120807-121030]"
    }, {
      "left" : "public void image(PImage img,\n                    float a, float b, float c, float d,\n                    int u1, int v1, int u2, int v2)",
      "right" : "public void image(PImage img,\n                    float a, float b, float c, float d,\n                    int u1, int v1, int u2, int v2)",
      "info" : "MethodDeclaration[120457-121880]:MethodDeclaration[121035-122458]"
    }, {
      "left" : "protected void imageImpl(PImage img,\n                           float x1, float y1, float x2, float y2,\n                           int u1, int v1, int u2, int v2)",
      "right" : "protected void imageImpl(PImage img,\n                           float x1, float y1, float x2, float y2,\n                           int u1, int v1, int u2, int v2)",
      "info" : "MethodDeclaration[121885-123226]:MethodDeclaration[122463-123804]"
    }, {
      "left" : "public void shapeMode(int mode)",
      "right" : "public void shapeMode(int mode)",
      "info" : "MethodDeclaration[123310-124411]:MethodDeclaration[123888-124989]"
    }, {
      "left" : "public void shape(PShape shape)",
      "right" : "public void shape(PShape shape)",
      "info" : "MethodDeclaration[124416-124909]:MethodDeclaration[124994-125487]"
    }, {
      "left" : "public void shape(PShape shape, float x, float y)",
      "right" : "public void shape(PShape shape, float x, float y)",
      "info" : "MethodDeclaration[124915-126679]:MethodDeclaration[125493-127257]"
    }, {
      "left" : "protected void shape(PShape shape, float x, float y, float z)",
      "right" : "protected void shape(PShape shape, float x, float y, float z)",
      "info" : "MethodDeclaration[126705-126805]:MethodDeclaration[127283-127383]"
    }, {
      "left" : "public void shape(PShape shape, float a, float b, float c, float d)",
      "right" : "public void shape(PShape shape, float a, float b, float c, float d)",
      "info" : "MethodDeclaration[126810-127793]:MethodDeclaration[127388-128371]"
    }, {
      "left" : "protected void shape(PShape shape, float x, float y, float z, float c, float d, float e)",
      "right" : "protected void shape(PShape shape, float x, float y, float z, float c, float d, float e)",
      "info" : "MethodDeclaration[127819-127946]:MethodDeclaration[128397-128524]"
    }, {
      "left" : "public void textAlign(int alignX)",
      "right" : "public void textAlign(int alignX)",
      "info" : "MethodDeclaration[128035-128107]:MethodDeclaration[128613-128685]"
    }, {
      "left" : "public void textAlign(int alignX, int alignY)",
      "right" : "public void textAlign(int alignX, int alignY)",
      "info" : "MethodDeclaration[128112-130186]:MethodDeclaration[128690-130764]"
    }, {
      "left" : "public float textAscent()",
      "right" : "public float textAscent()",
      "info" : "MethodDeclaration[130191-130790]:MethodDeclaration[130769-131368]"
    }, {
      "left" : "public float textDescent()",
      "right" : "public float textDescent()",
      "info" : "MethodDeclaration[130795-131398]:MethodDeclaration[131373-131976]"
    }, {
      "left" : "public void textFont(PFont which)",
      "right" : "public void textFont(PFont which)",
      "info" : "MethodDeclaration[131403-134324]:MethodDeclaration[131981-134902]"
    }, {
      "left" : "public void textFont(PFont which, float size)",
      "right" : "public void textFont(PFont which, float size)",
      "info" : "MethodDeclaration[134329-134493]:MethodDeclaration[134907-135071]"
    }, {
      "left" : "public void textLeading(float leading)",
      "right" : "public void textLeading(float leading)",
      "info" : "MethodDeclaration[134498-135101]:MethodDeclaration[135076-135679]"
    }, {
      "left" : "public void textMode(int mode)",
      "right" : "public void textMode(int mode)",
      "info" : "MethodDeclaration[135106-137274]:MethodDeclaration[135684-137852]"
    }, {
      "left" : "protected boolean textModeCheck(int mode)",
      "right" : "protected boolean textModeCheck(int mode)",
      "info" : "MethodDeclaration[137279-137343]:MethodDeclaration[137857-137921]"
    }, {
      "left" : "public void textSize(float size)",
      "right" : "public void textSize(float size)",
      "info" : "MethodDeclaration[137348-138476]:MethodDeclaration[137926-139054]"
    }, {
      "left" : "public float textWidth(char c)",
      "right" : "public float textWidth(char c)",
      "info" : "MethodDeclaration[138545-138709]:MethodDeclaration[139123-139287]"
    }, {
      "left" : "public float textWidth(String str)",
      "right" : "public float textWidth(String str)",
      "info" : "MethodDeclaration[138714-139830]:MethodDeclaration[139292-140408]"
    }, {
      "left" : "public float textWidth(char[] chars, int start, int length)",
      "right" : "public float textWidth(char[] chars, int start, int length)",
      "info" : "MethodDeclaration[139835-139983]:MethodDeclaration[140413-140561]"
    }, {
      "left" : "protected float textWidthImpl(char buffer[], int start, int stop)",
      "right" : "protected float textWidthImpl(char buffer[], int start, int stop)",
      "info" : "MethodDeclaration[139988-140504]:MethodDeclaration[140566-141082]"
    }, {
      "left" : "public void text(char c, float x, float y)",
      "right" : "public void text(char c, float x, float y)",
      "info" : "MethodDeclaration[140573-142513]:MethodDeclaration[141151-143091]"
    }, {
      "left" : "public void text(char c, float x, float y, float z)",
      "right" : "public void text(char c, float x, float y, float z)",
      "info" : "MethodDeclaration[142518-142919]:MethodDeclaration[143096-143497]"
    }, {
      "left" : "public void text(String str, float x, float y)",
      "right" : "public void text(String str, float x, float y)",
      "info" : "MethodDeclaration[143074-143606]:MethodDeclaration[143652-144184]"
    }, {
      "left" : "public void text(char[] chars, int start, int stop, float x, float y)",
      "right" : "public void text(char[] chars, int start, int stop, float x, float y)",
      "info" : "MethodDeclaration[143611-145357]:MethodDeclaration[144189-145935]"
    }, {
      "left" : "public void text(String str, float x, float y, float z)",
      "right" : "public void text(String str, float x, float y, float z)",
      "info" : "MethodDeclaration[145362-145618]:MethodDeclaration[145940-146196]"
    }, {
      "left" : "public void text(char[] chars, int start, int stop,\n                   float x, float y, float z)",
      "right" : "public void text(char[] chars, int start, int stop,\n                   float x, float y, float z)",
      "info" : "MethodDeclaration[145623-145880]:MethodDeclaration[146201-146458]"
    }, {
      "left" : "public void text(String str, float x1, float y1, float x2, float y2)",
      "right" : "public void text(String str, float x1, float y1, float x2, float y2)",
      "info" : "MethodDeclaration[145885-150381]:MethodDeclaration[146463-150959]"
    }, {
      "left" : "protected boolean textSentence(char[] buffer, int start, int stop,\n                                 float boxWidth, float spaceWidth)",
      "right" : "protected boolean textSentence(char[] buffer, int start, int stop,\n                                 float boxWidth, float spaceWidth)",
      "info" : "MethodDeclaration[150386-152991]:MethodDeclaration[150964-153569]"
    }, {
      "left" : "protected void textSentenceBreak(int start, int stop)",
      "right" : "protected void textSentenceBreak(int start, int stop)",
      "info" : "MethodDeclaration[152996-153328]:MethodDeclaration[153574-153906]"
    }, {
      "left" : "public void text(int num, float x, float y)",
      "right" : "public void text(int num, float x, float y)",
      "info" : "MethodDeclaration[153594-153680]:MethodDeclaration[154172-154258]"
    }, {
      "left" : "public void text(int num, float x, float y, float z)",
      "right" : "public void text(int num, float x, float y, float z)",
      "info" : "MethodDeclaration[153685-153783]:MethodDeclaration[154263-154361]"
    }, {
      "left" : "public void text(float num, float x, float y)",
      "right" : "public void text(float num, float x, float y)",
      "info" : "MethodDeclaration[153788-154239]:MethodDeclaration[154366-154817]"
    }, {
      "left" : "public void text(float num, float x, float y, float z)",
      "right" : "public void text(float num, float x, float y, float z)",
      "info" : "MethodDeclaration[154244-154347]:MethodDeclaration[154822-154925]"
    }, {
      "left" : "protected void textLineAlignImpl(char buffer[], int start, int stop,\n                                   float x, float y)",
      "right" : "protected void textLineAlignImpl(char buffer[], int start, int stop,\n                                   float x, float y)",
      "info" : "MethodDeclaration[154583-155052]:MethodDeclaration[155161-155630]"
    }, {
      "left" : "protected void textLineImpl(char buffer[], int start, int stop,\n                              float x, float y)",
      "right" : "protected void textLineImpl(char buffer[], int start, int stop,\n                              float x, float y)",
      "info" : "MethodDeclaration[155057-155523]:MethodDeclaration[155635-156101]"
    }, {
      "left" : "protected void textCharImpl(char ch, float x, float y)",
      "right" : "protected void textCharImpl(char ch, float x, float y)",
      "info" : "MethodDeclaration[155528-156450]:MethodDeclaration[156106-157028]"
    }, {
      "left" : "protected void textCharModelImpl(PImage glyph,\n                                   float x1, float y1, //float z1,\n                                   float x2, float y2, //float z2,\n                                   int u2, int v2)",
      "right" : "protected void textCharModelImpl(PImage glyph,\n                                   float x1, float y1, //float z1,\n                                   float x2, float y2, //float z2,\n                                   int u2, int v2)",
      "info" : "MethodDeclaration[156455-157302]:MethodDeclaration[157033-157880]"
    }, {
      "left" : "public FontMetrics getFontMetrics(Font font)",
      "right" : "public FontMetrics getFontMetrics(Font font)",
      "info" : "MethodDeclaration[158709-159206]:MethodDeclaration[159287-159784]"
    }, {
      "left" : "public FontRenderContext getFontRenderContext(Font font)",
      "right" : "public FontRenderContext getFontRenderContext(Font font)",
      "info" : "MethodDeclaration[159211-159426]:MethodDeclaration[159789-160004]"
    }, {
      "left" : "public void pushMatrix()",
      "right" : "public void pushMatrix()",
      "info" : "MethodDeclaration[159518-160497]:MethodDeclaration[160096-161075]"
    }, {
      "left" : "public void popMatrix()",
      "right" : "public void popMatrix()",
      "info" : "MethodDeclaration[160502-161225]:MethodDeclaration[161080-161803]"
    }, {
      "left" : "public void translate(float x, float y)",
      "right" : "public void translate(float x, float y)",
      "info" : "MethodDeclaration[161327-162748]:MethodDeclaration[161905-163326]"
    }, {
      "left" : "public void translate(float x, float y, float z)",
      "right" : "public void translate(float x, float y, float z)",
      "info" : "MethodDeclaration[162753-162899]:MethodDeclaration[163331-163477]"
    }, {
      "left" : "public void rotate(float angle)",
      "right" : "public void rotate(float angle)",
      "info" : "MethodDeclaration[162904-164306]:MethodDeclaration[163482-164884]"
    }, {
      "left" : "public void rotateX(float angle)",
      "right" : "public void rotateX(float angle)",
      "info" : "MethodDeclaration[164311-165678]:MethodDeclaration[164889-166256]"
    }, {
      "left" : "public void rotateY(float angle)",
      "right" : "public void rotateY(float angle)",
      "info" : "MethodDeclaration[165683-167051]:MethodDeclaration[166261-167629]"
    }, {
      "left" : "public void rotateZ(float angle)",
      "right" : "public void rotateZ(float angle)",
      "info" : "MethodDeclaration[167056-168424]:MethodDeclaration[167634-169002]"
    }, {
      "left" : "public void rotate(float angle, float x, float y, float z)",
      "right" : "public void rotate(float angle, float x, float y, float z)",
      "info" : "MethodDeclaration[168429-168675]:MethodDeclaration[169007-169253]"
    }, {
      "left" : "public void scale(float s)",
      "right" : "public void scale(float s)",
      "info" : "MethodDeclaration[168680-170064]:MethodDeclaration[169258-170642]"
    }, {
      "left" : "public void scale(float x, float y)",
      "right" : "public void scale(float x, float y)",
      "info" : "MethodDeclaration[170069-170502]:MethodDeclaration[170647-171080]"
    }, {
      "left" : "public void scale(float x, float y, float z)",
      "right" : "public void scale(float x, float y, float z)",
      "info" : "MethodDeclaration[170507-170661]:MethodDeclaration[171085-171239]"
    }, {
      "left" : "public void shearX(float angle)",
      "right" : "public void shearX(float angle)",
      "info" : "MethodDeclaration[170666-172095]:MethodDeclaration[171244-172673]"
    }, {
      "left" : "public void shearY(float angle)",
      "right" : "public void shearY(float angle)",
      "info" : "MethodDeclaration[172100-173529]:MethodDeclaration[172678-174107]"
    }, {
      "left" : "public void resetMatrix()",
      "right" : "public void resetMatrix()",
      "info" : "MethodDeclaration[173625-174082]:MethodDeclaration[174203-174660]"
    }, {
      "left" : "public void applyMatrix(PMatrix source)",
      "right" : "public void applyMatrix(PMatrix source)",
      "info" : "MethodDeclaration[174086-174835]:MethodDeclaration[174664-175413]"
    }, {
      "left" : "public void applyMatrix(PMatrix2D source)",
      "right" : "public void applyMatrix(PMatrix2D source)",
      "info" : "MethodDeclaration[174840-174992]:MethodDeclaration[175418-175570]"
    }, {
      "left" : "public void applyMatrix(float n00, float n01, float n02,\n                          float n10, float n11, float n12)",
      "right" : "public void applyMatrix(float n00, float n01, float n02,\n                          float n10, float n11, float n12)",
      "info" : "MethodDeclaration[174997-175583]:MethodDeclaration[175575-176161]"
    }, {
      "left" : "public void applyMatrix(PMatrix3D source)",
      "right" : "public void applyMatrix(PMatrix3D source)",
      "info" : "MethodDeclaration[175587-175891]:MethodDeclaration[176165-176469]"
    }, {
      "left" : "public void applyMatrix(float n00, float n01, float n02, float n03,\n                          float n10, float n11, float n12, float n13,\n                          float n20, float n21, float n22, float n23,\n                          float n30, float n31, float n32, float n33)",
      "right" : "public void applyMatrix(float n00, float n01, float n02, float n03,\n                          float n10, float n11, float n12, float n13,\n                          float n20, float n21, float n22, float n23,\n                          float n30, float n31, float n32, float n33)",
      "info" : "MethodDeclaration[175896-176920]:MethodDeclaration[176474-177498]"
    }, {
      "left" : "public PMatrix getMatrix()",
      "right" : "public PMatrix getMatrix()",
      "info" : "MethodDeclaration[177020-177106]:MethodDeclaration[177598-177684]"
    }, {
      "left" : "public PMatrix2D getMatrix(PMatrix2D target)",
      "right" : "public PMatrix2D getMatrix(PMatrix2D target)",
      "info" : "MethodDeclaration[177111-177340]:MethodDeclaration[177689-177918]"
    }, {
      "left" : "public PMatrix3D getMatrix(PMatrix3D target)",
      "right" : "public PMatrix3D getMatrix(PMatrix3D target)",
      "info" : "MethodDeclaration[177345-177574]:MethodDeclaration[177923-178152]"
    }, {
      "left" : "public void setMatrix(PMatrix source)",
      "right" : "public void setMatrix(PMatrix source)",
      "info" : "MethodDeclaration[177579-177870]:MethodDeclaration[178157-178448]"
    }, {
      "left" : "public void setMatrix(PMatrix2D source)",
      "right" : "public void setMatrix(PMatrix2D source)",
      "info" : "MethodDeclaration[177875-178046]:MethodDeclaration[178453-178624]"
    }, {
      "left" : "public void setMatrix(PMatrix3D source)",
      "right" : "public void setMatrix(PMatrix3D source)",
      "info" : "MethodDeclaration[178051-178222]:MethodDeclaration[178629-178800]"
    }, {
      "left" : "public void printMatrix()",
      "right" : "public void printMatrix()",
      "info" : "MethodDeclaration[178227-178663]:MethodDeclaration[178805-179241]"
    }, {
      "left" : "public void beginCamera()",
      "right" : "public void beginCamera()",
      "info" : "MethodDeclaration[178747-180343]:MethodDeclaration[179325-180921]"
    }, {
      "left" : "public void endCamera()",
      "right" : "public void endCamera()",
      "info" : "MethodDeclaration[180347-180863]:MethodDeclaration[180925-181441]"
    }, {
      "left" : "public void camera()",
      "right" : "public void camera()",
      "info" : "MethodDeclaration[180867-181852]:MethodDeclaration[181445-182430]"
    }, {
      "left" : "public void camera(float eyeX, float eyeY, float eyeZ,\n                     float centerX, float centerY, float centerZ,\n                     float upX, float upY, float upZ)",
      "right" : "public void camera(float eyeX, float eyeY, float eyeZ,\n                     float centerX, float centerY, float centerZ,\n                     float upX, float upY, float upZ)",
      "info" : "MethodDeclaration[181854-182495]:MethodDeclaration[182432-183073]"
    }, {
      "left" : "public void printCamera()",
      "right" : "public void printCamera()",
      "info" : "MethodDeclaration[182497-182890]:MethodDeclaration[183075-183468]"
    }, {
      "left" : "public void ortho()",
      "right" : "public void ortho()",
      "info" : "MethodDeclaration[182979-183714]:MethodDeclaration[183557-184292]"
    }, {
      "left" : "public void ortho(float left, float right,\n                    float bottom, float top)",
      "right" : "public void ortho(float left, float right,\n                    float bottom, float top)",
      "info" : "MethodDeclaration[183718-184064]:MethodDeclaration[184296-184642]"
    }, {
      "left" : "public void ortho(float left, float right,\n                    float bottom, float top,\n                    float near, float far)",
      "right" : "public void ortho(float left, float right,\n                    float bottom, float top,\n                    float near, float far)",
      "info" : "MethodDeclaration[184068-184383]:MethodDeclaration[184646-184961]"
    }, {
      "left" : "public void perspective()",
      "right" : "public void perspective()",
      "info" : "MethodDeclaration[184387-185340]:MethodDeclaration[184965-185918]"
    }, {
      "left" : "public void perspective(float fovy, float aspect, float zNear, float zFar)",
      "right" : "public void perspective(float fovy, float aspect, float zNear, float zFar)",
      "info" : "MethodDeclaration[185344-185702]:MethodDeclaration[185922-186280]"
    }, {
      "left" : "public void frustum(float left, float right,\n                      float bottom, float top,\n                      float near, float far)",
      "right" : "public void frustum(float left, float right,\n                      float bottom, float top,\n                      float near, float far)",
      "info" : "MethodDeclaration[185706-186779]:MethodDeclaration[186284-187357]"
    }, {
      "left" : "public void printProjection()",
      "right" : "public void printProjection()",
      "info" : "MethodDeclaration[186783-187203]:MethodDeclaration[187361-187781]"
    }, {
      "left" : "public float screenX(float x, float y)",
      "right" : "public float screenX(float x, float y)",
      "info" : "MethodDeclaration[187300-187851]:MethodDeclaration[187878-188429]"
    }, {
      "left" : "public float screenY(float x, float y)",
      "right" : "public float screenY(float x, float y)",
      "info" : "MethodDeclaration[187856-188407]:MethodDeclaration[188434-188985]"
    }, {
      "left" : "public float screenX(float x, float y, float z)",
      "right" : "public float screenX(float x, float y, float z)",
      "info" : "MethodDeclaration[188412-188569]:MethodDeclaration[188990-189147]"
    }, {
      "left" : "public float screenY(float x, float y, float z)",
      "right" : "public float screenY(float x, float y, float z)",
      "info" : "MethodDeclaration[188574-188731]:MethodDeclaration[189152-189309]"
    }, {
      "left" : "public float screenZ(float x, float y, float z)",
      "right" : "public float screenZ(float x, float y, float z)",
      "info" : "MethodDeclaration[188737-189340]:MethodDeclaration[189315-189918]"
    }, {
      "left" : "public float modelX(float x, float y, float z)",
      "right" : "public float modelX(float x, float y, float z)",
      "info" : "MethodDeclaration[189345-190586]:MethodDeclaration[189923-191164]"
    }, {
      "left" : "public float modelY(float x, float y, float z)",
      "right" : "public float modelY(float x, float y, float z)",
      "info" : "MethodDeclaration[190591-191833]:MethodDeclaration[191169-192411]"
    }, {
      "left" : "public float modelZ(float x, float y, float z)",
      "right" : "public float modelZ(float x, float y, float z)",
      "info" : "MethodDeclaration[191838-193080]:MethodDeclaration[192416-193658]"
    }, {
      "left" : "public void pushStyle()",
      "right" : "public void pushStyle()",
      "info" : "MethodDeclaration[193164-194535]:MethodDeclaration[193742-195113]"
    }, {
      "left" : "public void popStyle()",
      "right" : "public void popStyle()",
      "info" : "MethodDeclaration[194539-195425]:MethodDeclaration[195117-196003]"
    }, {
      "left" : "public void style(PStyle s)",
      "right" : "public void style(PStyle s)",
      "info" : "MethodDeclaration[195430-197567]:MethodDeclaration[196008-198145]"
    }, {
      "left" : "public PStyle getStyle()",
      "right" : "public PStyle getStyle()",
      "info" : "MethodDeclaration[197572-197640]:MethodDeclaration[198150-198218]"
    }, {
      "left" : "public PStyle getStyle(PStyle s)",
      "right" : "public PStyle getStyle(PStyle s)",
      "info" : "MethodDeclaration[197645-198771]:MethodDeclaration[198223-199349]"
    }, {
      "left" : "public void strokeWeight(float weight)",
      "right" : "public void strokeWeight(float weight)",
      "info" : "MethodDeclaration[198872-199910]:MethodDeclaration[199450-200488]"
    }, {
      "left" : "public void strokeJoin(int join)",
      "right" : "public void strokeJoin(int join)",
      "info" : "MethodDeclaration[199914-200761]:MethodDeclaration[200492-201339]"
    }, {
      "left" : "public void strokeCap(int cap)",
      "right" : "public void strokeCap(int cap)",
      "info" : "MethodDeclaration[200765-201641]:MethodDeclaration[201343-202219]"
    }, {
      "left" : "public void noStroke()",
      "right" : "public void noStroke()",
      "info" : "MethodDeclaration[201733-202176]:MethodDeclaration[202311-202754]"
    }, {
      "left" : "public void stroke(int rgb)",
      "right" : "public void stroke(int rgb)",
      "info" : "MethodDeclaration[202181-203724]:MethodDeclaration[202759-204302]"
    }, {
      "left" : "public void stroke(int rgb, float alpha)",
      "right" : "public void stroke(int rgb, float alpha)",
      "info" : "MethodDeclaration[203729-203876]:MethodDeclaration[204307-204454]"
    }, {
      "left" : "public void stroke(float gray)",
      "right" : "public void stroke(float gray)",
      "info" : "MethodDeclaration[203881-204031]:MethodDeclaration[204459-204609]"
    }, {
      "left" : "public void stroke(float gray, float alpha)",
      "right" : "public void stroke(float gray, float alpha)",
      "info" : "MethodDeclaration[204036-204135]:MethodDeclaration[204614-204713]"
    }, {
      "left" : "public void stroke(float v1, float v2, float v3)",
      "right" : "public void stroke(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[204140-204497]:MethodDeclaration[204718-205075]"
    }, {
      "left" : "public void stroke(float v1, float v2, float v3, float alpha)",
      "right" : "public void stroke(float v1, float v2, float v3, float alpha)",
      "info" : "MethodDeclaration[204502-204625]:MethodDeclaration[205080-205203]"
    }, {
      "left" : "protected void strokeFromCalc()",
      "right" : "protected void strokeFromCalc()",
      "info" : "MethodDeclaration[204630-204920]:MethodDeclaration[205208-205498]"
    }, {
      "left" : "public void noTint()",
      "right" : "public void noTint()",
      "info" : "MethodDeclaration[205010-205458]:MethodDeclaration[205588-206036]"
    }, {
      "left" : "public void tint(int rgb)",
      "right" : "public void tint(int rgb)",
      "info" : "MethodDeclaration[205463-207030]:MethodDeclaration[206041-207608]"
    }, {
      "left" : "public void tint(int rgb, float alpha)",
      "right" : "public void tint(int rgb, float alpha)",
      "info" : "MethodDeclaration[207035-207177]:MethodDeclaration[207613-207755]"
    }, {
      "left" : "public void tint(float gray)",
      "right" : "public void tint(float gray)",
      "info" : "MethodDeclaration[207182-207328]:MethodDeclaration[207760-207906]"
    }, {
      "left" : "public void tint(float gray, float alpha)",
      "right" : "public void tint(float gray, float alpha)",
      "info" : "MethodDeclaration[207333-207428]:MethodDeclaration[207911-208006]"
    }, {
      "left" : "public void tint(float v1, float v2, float v3)",
      "right" : "public void tint(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[207430-207748]:MethodDeclaration[208008-208326]"
    }, {
      "left" : "public void tint(float v1, float v2, float v3, float alpha)",
      "right" : "public void tint(float v1, float v2, float v3, float alpha)",
      "info" : "MethodDeclaration[207753-207872]:MethodDeclaration[208331-208450]"
    }, {
      "left" : "protected void tintFromCalc()",
      "right" : "protected void tintFromCalc()",
      "info" : "MethodDeclaration[207877-208143]:MethodDeclaration[208455-208721]"
    }, {
      "left" : "public void noFill()",
      "right" : "public void noFill()",
      "info" : "MethodDeclaration[208233-208688]:MethodDeclaration[208811-209266]"
    }, {
      "left" : "public void fill(int rgb)",
      "right" : "public void fill(int rgb)",
      "info" : "MethodDeclaration[208693-210330]:MethodDeclaration[209271-210908]"
    }, {
      "left" : "public void fill(int rgb, float alpha)",
      "right" : "public void fill(int rgb, float alpha)",
      "info" : "MethodDeclaration[210334-210475]:MethodDeclaration[210912-211053]"
    }, {
      "left" : "public void fill(float gray)",
      "right" : "public void fill(float gray)",
      "info" : "MethodDeclaration[210480-210632]:MethodDeclaration[211058-211210]"
    }, {
      "left" : "public void fill(float gray, float alpha)",
      "right" : "public void fill(float gray, float alpha)",
      "info" : "MethodDeclaration[210637-210732]:MethodDeclaration[211215-211310]"
    }, {
      "left" : "public void fill(float v1, float v2, float v3)",
      "right" : "public void fill(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[210737-211063]:MethodDeclaration[211315-211641]"
    }, {
      "left" : "public void fill(float v1, float v2, float v3, float alpha)",
      "right" : "public void fill(float v1, float v2, float v3, float alpha)",
      "info" : "MethodDeclaration[211068-211187]:MethodDeclaration[211646-211765]"
    }, {
      "left" : "protected void fillFromCalc()",
      "right" : "protected void fillFromCalc()",
      "info" : "MethodDeclaration[211192-211458]:MethodDeclaration[211770-212036]"
    }, {
      "left" : "public void ambient(int rgb)",
      "right" : "public void ambient(int rgb)",
      "info" : "MethodDeclaration[211556-212696]:MethodDeclaration[212134-213274]"
    }, {
      "left" : "public void ambient(float gray)",
      "right" : "public void ambient(float gray)",
      "info" : "MethodDeclaration[212698-212852]:MethodDeclaration[213276-213430]"
    }, {
      "left" : "public void ambient(float v1, float v2, float v3)",
      "right" : "public void ambient(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[212854-213178]:MethodDeclaration[213432-213756]"
    }, {
      "left" : "protected void ambientFromCalc()",
      "right" : "protected void ambientFromCalc()",
      "info" : "MethodDeclaration[213183-213340]:MethodDeclaration[213761-213918]"
    }, {
      "left" : "public void specular(int rgb)",
      "right" : "public void specular(int rgb)",
      "info" : "MethodDeclaration[213344-214425]:MethodDeclaration[213922-215003]"
    }, {
      "left" : "public void specular(float gray)",
      "right" : "public void specular(float gray)",
      "info" : "MethodDeclaration[214428-214577]:MethodDeclaration[215006-215155]"
    }, {
      "left" : "public void specular(float v1, float v2, float v3)",
      "right" : "public void specular(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[214580-214906]:MethodDeclaration[215158-215484]"
    }, {
      "left" : "protected void specularFromCalc()",
      "right" : "protected void specularFromCalc()",
      "info" : "MethodDeclaration[214911-215050]:MethodDeclaration[215489-215628]"
    }, {
      "left" : "public void shininess(float shine)",
      "right" : "public void shininess(float shine)",
      "info" : "MethodDeclaration[215055-215680]:MethodDeclaration[215633-216258]"
    }, {
      "left" : "public void emissive(int rgb)",
      "right" : "public void emissive(int rgb)",
      "info" : "MethodDeclaration[215684-216529]:MethodDeclaration[216262-217107]"
    }, {
      "left" : "public void emissive(float gray)",
      "right" : "public void emissive(float gray)",
      "info" : "MethodDeclaration[216533-216686]:MethodDeclaration[217111-217264]"
    }, {
      "left" : "public void emissive(float v1, float v2, float v3)",
      "right" : "public void emissive(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[216690-217024]:MethodDeclaration[217268-217602]"
    }, {
      "left" : "protected void emissiveFromCalc()",
      "right" : "protected void emissiveFromCalc()",
      "info" : "MethodDeclaration[217029-217168]:MethodDeclaration[217607-217746]"
    }, {
      "left" : "public void lights()",
      "right" : "public void lights()",
      "info" : "MethodDeclaration[217473-218524]:MethodDeclaration[218051-219102]"
    }, {
      "left" : "public void noLights()",
      "right" : "public void noLights()",
      "info" : "MethodDeclaration[218528-219057]:MethodDeclaration[219106-219635]"
    }, {
      "left" : "public void ambientLight(float v1, float v2, float v3)",
      "right" : "public void ambientLight(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[219061-220411]:MethodDeclaration[219639-220989]"
    }, {
      "left" : "public void ambientLight(float v1, float v2, float v3,\n                           float x, float y, float z)",
      "right" : "public void ambientLight(float v1, float v2, float v3,\n                           float x, float y, float z)",
      "info" : "MethodDeclaration[220415-220700]:MethodDeclaration[220993-221278]"
    }, {
      "left" : "public void directionalLight(float v1, float v2, float v3,\n                               float nx, float ny, float nz)",
      "right" : "public void directionalLight(float v1, float v2, float v3,\n                               float nx, float ny, float nz)",
      "info" : "MethodDeclaration[220704-222499]:MethodDeclaration[221282-223077]"
    }, {
      "left" : "public void pointLight(float v1, float v2, float v3,\n                         float x, float y, float z)",
      "right" : "public void pointLight(float v1, float v2, float v3,\n                         float x, float y, float z)",
      "info" : "MethodDeclaration[222503-223901]:MethodDeclaration[223081-224479]"
    }, {
      "left" : "public void spotLight(float v1, float v2, float v3,\n                        float x, float y, float z,\n                        float nx, float ny, float nz,\n                        float angle, float concentration)",
      "right" : "public void spotLight(float v1, float v2, float v3,\n                        float x, float y, float z,\n                        float nx, float ny, float nz,\n                        float angle, float concentration)",
      "info" : "MethodDeclaration[223905-225768]:MethodDeclaration[224483-226346]"
    }, {
      "left" : "public void lightFalloff(float constant, float linear, float quadratic)",
      "right" : "public void lightFalloff(float constant, float linear, float quadratic)",
      "info" : "MethodDeclaration[225772-227429]:MethodDeclaration[226350-228007]"
    }, {
      "left" : "public void lightSpecular(float v1, float v2, float v3)",
      "right" : "public void lightSpecular(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[227433-228737]:MethodDeclaration[228011-229315]"
    }, {
      "left" : "public void background(int rgb)",
      "right" : "public void background(int rgb)",
      "info" : "MethodDeclaration[228827-230970]:MethodDeclaration[229405-231548]"
    }, {
      "left" : "public void background(int rgb, float alpha)",
      "right" : "public void background(int rgb, float alpha)",
      "info" : "MethodDeclaration[230975-231487]:MethodDeclaration[231553-232065]"
    }, {
      "left" : "public void background(float gray)",
      "right" : "public void background(float gray)",
      "info" : "MethodDeclaration[231492-231674]:MethodDeclaration[232070-232252]"
    }, {
      "left" : "public void background(float gray, float alpha)",
      "right" : "public void background(float gray, float alpha)",
      "info" : "MethodDeclaration[231679-231927]:MethodDeclaration[232257-232505]"
    }, {
      "left" : "public void background(float v1, float v2, float v3)",
      "right" : "public void background(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[231932-232306]:MethodDeclaration[232510-232884]"
    }, {
      "left" : "public void background(float v1, float v2, float v3, float alpha)",
      "right" : "public void background(float v1, float v2, float v3, float alpha)",
      "info" : "MethodDeclaration[232311-232442]:MethodDeclaration[232889-233020]"
    }, {
      "left" : "public void clear()",
      "right" : "public void clear()",
      "info" : "MethodDeclaration[232446-232538]:MethodDeclaration[233024-233116]"
    }, {
      "left" : "protected void backgroundFromCalc()",
      "right" : "protected void backgroundFromCalc()",
      "info" : "MethodDeclaration[232543-233084]:MethodDeclaration[233121-233662]"
    }, {
      "left" : "public void background(PImage image)",
      "right" : "public void background(PImage image)",
      "info" : "MethodDeclaration[233089-234189]:MethodDeclaration[233667-234767]"
    }, {
      "left" : "protected void backgroundImpl(PImage image)",
      "right" : "protected void backgroundImpl(PImage image)",
      "info" : "MethodDeclaration[234194-234458]:MethodDeclaration[234772-235036]"
    }, {
      "left" : "protected void backgroundImpl()",
      "right" : "protected void backgroundImpl()",
      "info" : "MethodDeclaration[234463-234915]:MethodDeclaration[235041-235493]"
    }, {
      "left" : "public void colorMode(int mode)",
      "right" : "public void colorMode(int mode)",
      "info" : "MethodDeclaration[235680-236743]:MethodDeclaration[236258-237321]"
    }, {
      "left" : "public void colorMode(int mode, float max)",
      "right" : "public void colorMode(int mode, float max)",
      "info" : "MethodDeclaration[236748-236894]:MethodDeclaration[237326-237472]"
    }, {
      "left" : "public void colorMode(int mode, float max1, float max2, float max3)",
      "right" : "public void colorMode(int mode, float max1, float max2, float max3)",
      "info" : "MethodDeclaration[236899-237286]:MethodDeclaration[237477-237864]"
    }, {
      "left" : "public void colorMode(int mode,\n                        float max1, float max2, float max3, float maxA)",
      "right" : "public void colorMode(int mode,\n                        float max1, float max2, float max3, float maxA)",
      "info" : "MethodDeclaration[237291-238001]:MethodDeclaration[237869-238579]"
    }, {
      "left" : "protected void colorCalc(int rgb)",
      "right" : "protected void colorCalc(int rgb)",
      "info" : "MethodDeclaration[238625-239730]:MethodDeclaration[239203-240308]"
    }, {
      "left" : "protected void colorCalc(int rgb, float alpha)",
      "right" : "protected void colorCalc(int rgb, float alpha)",
      "info" : "MethodDeclaration[239735-239951]:MethodDeclaration[240313-240529]"
    }, {
      "left" : "protected void colorCalc(float gray)",
      "right" : "protected void colorCalc(float gray)",
      "info" : "MethodDeclaration[239956-240031]:MethodDeclaration[240534-240609]"
    }, {
      "left" : "protected void colorCalc(float gray, float alpha)",
      "right" : "protected void colorCalc(float gray, float alpha)",
      "info" : "MethodDeclaration[240036-240623]:MethodDeclaration[240614-241201]"
    }, {
      "left" : "protected void colorCalc(float x, float y, float z)",
      "right" : "protected void colorCalc(float x, float y, float z)",
      "info" : "MethodDeclaration[240628-240721]:MethodDeclaration[241206-241299]"
    }, {
      "left" : "protected void colorCalc(float x, float y, float z, float a)",
      "right" : "protected void colorCalc(float x, float y, float z, float a)",
      "info" : "MethodDeclaration[240726-242397]:MethodDeclaration[241304-242975]"
    }, {
      "left" : "protected void colorCalcARGB(int argb, float alpha)",
      "right" : "protected void colorCalcARGB(int argb, float alpha)",
      "info" : "MethodDeclaration[242402-243387]:MethodDeclaration[242980-243965]"
    }, {
      "left" : "public final int color(int c)",
      "right" : "public final int color(int c)",
      "info" : "MethodDeclaration[243901-244376]:MethodDeclaration[244479-244954]"
    }, {
      "left" : "public final int color(float gray)",
      "right" : "public final int color(float gray)",
      "info" : "MethodDeclaration[244381-244475]:MethodDeclaration[244959-245053]"
    }, {
      "left" : "public final int color(int c, int alpha)",
      "right" : "public final int color(int c, int alpha)",
      "info" : "MethodDeclaration[244480-244955]:MethodDeclaration[245058-245533]"
    }, {
      "left" : "public final int color(int c, float alpha)",
      "right" : "public final int color(int c, float alpha)",
      "info" : "MethodDeclaration[244960-245242]:MethodDeclaration[245538-245820]"
    }, {
      "left" : "public final int color(float gray, float alpha)",
      "right" : "public final int color(float gray, float alpha)",
      "info" : "MethodDeclaration[245247-245361]:MethodDeclaration[245825-245939]"
    }, {
      "left" : "public final int color(int v1, int v2, int v3)",
      "right" : "public final int color(int v1, int v2, int v3)",
      "info" : "MethodDeclaration[245366-245478]:MethodDeclaration[245944-246056]"
    }, {
      "left" : "public final int color(float v1, float v2, float v3)",
      "right" : "public final int color(float v1, float v2, float v3)",
      "info" : "MethodDeclaration[245483-245601]:MethodDeclaration[246061-246179]"
    }, {
      "left" : "public final int color(int v1, int v2, int v3, int a)",
      "right" : "public final int color(int v1, int v2, int v3, int a)",
      "info" : "MethodDeclaration[245606-245728]:MethodDeclaration[246184-246306]"
    }, {
      "left" : "public final int color(float v1, float v2, float v3, float a)",
      "right" : "public final int color(float v1, float v2, float v3, float a)",
      "info" : "MethodDeclaration[245733-245863]:MethodDeclaration[246311-246441]"
    }, {
      "left" : "public final float alpha(int rgb)",
      "right" : "public final float alpha(int rgb)",
      "info" : "MethodDeclaration[246014-246625]:MethodDeclaration[246592-247203]"
    }, {
      "left" : "public final float red(int rgb)",
      "right" : "public final float red(int rgb)",
      "info" : "MethodDeclaration[246630-247825]:MethodDeclaration[247208-248403]"
    }, {
      "left" : "public final float green(int rgb)",
      "right" : "public final float green(int rgb)",
      "info" : "MethodDeclaration[247830-249038]:MethodDeclaration[248408-249616]"
    }, {
      "left" : "public final float blue(int rgb)",
      "right" : "public final float blue(int rgb)",
      "info" : "MethodDeclaration[249043-250227]:MethodDeclaration[249621-250805]"
    }, {
      "left" : "public final float hue(int rgb)",
      "right" : "public final float hue(int rgb)",
      "info" : "MethodDeclaration[250232-250921]:MethodDeclaration[250810-251499]"
    }, {
      "left" : "public final float saturation(int rgb)",
      "right" : "public final float saturation(int rgb)",
      "info" : "MethodDeclaration[250926-251629]:MethodDeclaration[251504-252207]"
    }, {
      "left" : "public final float brightness(int rgb)",
      "right" : "public final float brightness(int rgb)",
      "info" : "MethodDeclaration[251634-252342]:MethodDeclaration[252212-252920]"
    }, {
      "left" : "public int lerpColor(int c1, int c2, float amt)",
      "right" : "public int lerpColor(int c1, int c2, float amt)",
      "info" : "MethodDeclaration[252486-253297]:MethodDeclaration[253064-253875]"
    }, {
      "left" : "static float[] lerpColorHSB1;",
      "right" : "static float[] lerpColorHSB1;",
      "info" : "FieldDeclaration[253301-253330]:FieldDeclaration[253879-253908]"
    }, {
      "left" : "static float[] lerpColorHSB2;",
      "right" : "static float[] lerpColorHSB2;",
      "info" : "FieldDeclaration[253333-253362]:FieldDeclaration[253911-253940]"
    }, {
      "left" : "static public int lerpColor(int c1, int c2, float amt, int mode)",
      "right" : "static public int lerpColor(int c1, int c2, float amt, int mode)",
      "info" : "MethodDeclaration[253366-255930]:MethodDeclaration[253944-256508]"
    }, {
      "left" : "public void beginRaw(PGraphics rawGraphics)",
      "right" : "public void beginRaw(PGraphics rawGraphics)",
      "info" : "MethodDeclaration[256024-256233]:MethodDeclaration[256602-256811]"
    }, {
      "left" : "public void endRaw()",
      "right" : "public void endRaw()",
      "info" : "MethodDeclaration[256238-256637]:MethodDeclaration[256816-257215]"
    }, {
      "left" : "public boolean haveRaw()",
      "right" : "public boolean haveRaw()",
      "info" : "MethodDeclaration[256642-256706]:MethodDeclaration[257220-257284]"
    }, {
      "left" : "public PGraphics getRaw()",
      "right" : "public PGraphics getRaw()",
      "info" : "MethodDeclaration[256711-256768]:MethodDeclaration[257289-257346]"
    }, {
      "left" : "static protected HashMap<String, Object> warnings;",
      "right" : "static protected HashMap<String, Object> warnings;",
      "info" : "FieldDeclaration[256870-256920]:FieldDeclaration[257448-257498]"
    }, {
      "left" : "static public void showWarning(String msg)",
      "right" : "static public void showWarning(String msg)",
      "info" : "MethodDeclaration[256925-257349]:MethodDeclaration[257503-257927]"
    }, {
      "left" : "static public void showWarning(String msg, Object... args)",
      "right" : "static public void showWarning(String msg, Object... args)",
      "info" : "MethodDeclaration[257354-257542]:MethodDeclaration[257932-258120]"
    }, {
      "left" : "static public void showDepthWarning(String method)",
      "right" : "static public void showDepthWarning(String method)",
      "info" : "MethodDeclaration[257547-257860]:MethodDeclaration[258125-258438]"
    }, {
      "left" : "static public void showDepthWarningXYZ(String method)",
      "right" : "static public void showDepthWarningXYZ(String method)",
      "info" : "MethodDeclaration[257865-258365]:MethodDeclaration[258443-258943]"
    }, {
      "left" : "static public void showMethodWarning(String method)",
      "right" : "static public void showMethodWarning(String method)",
      "info" : "MethodDeclaration[258370-258580]:MethodDeclaration[258948-259158]"
    }, {
      "left" : "static public void showVariationWarning(String str)",
      "right" : "static public void showVariationWarning(String str)",
      "info" : "MethodDeclaration[258585-258915]:MethodDeclaration[259163-259493]"
    }, {
      "left" : "static public void showMissingWarning(String method)",
      "right" : "static public void showMissingWarning(String method)",
      "info" : "MethodDeclaration[258920-259316]:MethodDeclaration[259498-259894]"
    }, {
      "left" : "static public void showException(String msg)",
      "right" : "static public void showException(String msg)",
      "info" : "MethodDeclaration[259321-259641]:MethodDeclaration[259899-260219]"
    }, {
      "left" : "protected void defaultFontOrDeath(String method)",
      "right" : "protected void defaultFontOrDeath(String method)",
      "info" : "MethodDeclaration[259646-259828]:MethodDeclaration[260224-260406]"
    }, {
      "left" : "protected void defaultFontOrDeath(String method, float size)",
      "right" : "protected void defaultFontOrDeath(String method, float size)",
      "info" : "MethodDeclaration[259833-260270]:MethodDeclaration[260411-260848]"
    }, {
      "left" : "public boolean displayable()",
      "right" : "public boolean displayable()",
      "info" : "MethodDeclaration[260374-260800]:MethodDeclaration[260952-261378]"
    }, {
      "left" : "public boolean is2D()",
      "right" : "public boolean is2D()",
      "info" : "MethodDeclaration[260805-260945]:MethodDeclaration[261383-261523]"
    }, {
      "left" : "public boolean is3D()",
      "right" : "public boolean is3D()",
      "info" : "MethodDeclaration[260950-261092]:MethodDeclaration[261528-261670]"
    }, {
      "left" : "public boolean isGL()",
      "right" : "public boolean isGL()",
      "info" : "MethodDeclaration[261097-261249]:MethodDeclaration[261675-261827]"
    }, {
      "left" : "public boolean is2X()",
      "right" : "public boolean is2X()",
      "info" : "MethodDeclaration[261254-261311]:MethodDeclaration[261832-261889]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21089-21366]:Block[21667-21944]"
    }, {
      "left" : "sinLUT = new float[SINCOS_LENGTH];",
      "right" : "sinLUT = new float[SINCOS_LENGTH];",
      "info" : "ExpressionStatement[21095-21129]:ExpressionStatement[21673-21707]"
    }, {
      "left" : "cosLUT = new float[SINCOS_LENGTH];",
      "right" : "cosLUT = new float[SINCOS_LENGTH];",
      "info" : "ExpressionStatement[21134-21168]:ExpressionStatement[21712-21746]"
    }, {
      "left" : "for (int i = 0; i < SINCOS_LENGTH; i++)",
      "right" : "for (int i = 0; i < SINCOS_LENGTH; i++)",
      "info" : "ForStatement[21173-21362]:ForStatement[21751-21940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21213-21362]:Block[21791-21940]"
    }, {
      "left" : "sinLUT[i] = (float) Math.sin(i * DEG_TO_RAD * SINCOS_PRECISION);",
      "right" : "sinLUT[i] = (float) Math.sin(i * DEG_TO_RAD * SINCOS_PRECISION);",
      "info" : "ExpressionStatement[21221-21285]:ExpressionStatement[21799-21863]"
    }, {
      "left" : "cosLUT[i] = (float) Math.cos(i * DEG_TO_RAD * SINCOS_PRECISION);",
      "right" : "cosLUT[i] = (float) Math.cos(i * DEG_TO_RAD * SINCOS_PRECISION);",
      "info" : "ExpressionStatement[21292-21356]:ExpressionStatement[21870-21934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24245-24287]:Block[24823-24865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24330-24588]:Block[24908-25166]"
    }, {
      "left" : "this.parent = parent;",
      "right" : "this.parent = parent;",
      "info" : "ExpressionStatement[24347-24368]:ExpressionStatement[24925-24946]"
    }, {
      "left" : "smooth = parent.sketchSmooth();",
      "right" : "smooth = parent.sketchSmooth();",
      "info" : "ExpressionStatement[24505-24536]:ExpressionStatement[25083-25114]"
    }, {
      "left" : "pixelDensity = parent.sketchPixelDensity();",
      "right" : "pixelDensity = parent.sketchPixelDensity();",
      "info" : "ExpressionStatement[24541-24584]:ExpressionStatement[25119-25162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24836-25136]:Block[25414-25714]"
    }, {
      "left" : "this.primaryGraphics = primary;",
      "right" : "this.primaryGraphics = primary;",
      "info" : "ExpressionStatement[24853-24884]:ExpressionStatement[25431-25462]"
    }, {
      "left" : "if (primaryGraphics)",
      "right" : "if (primaryGraphics)",
      "info" : "IfStatement[25084-25132]:IfStatement[25662-25710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25105-25132]:Block[25683-25710]"
    }, {
      "left" : "format = RGB;",
      "right" : "format = RGB;",
      "info" : "ExpressionStatement[25113-25126]:ExpressionStatement[25691-25704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25174-25212]:Block[25752-25790]"
    }, {
      "left" : "this.path = path;",
      "right" : "this.path = path;",
      "info" : "ExpressionStatement[25191-25208]:ExpressionStatement[25769-25786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25914-26222]:Block[26492-26800]"
    }, {
      "left" : "width = w;",
      "right" : "width = w;",
      "info" : "ExpressionStatement[25931-25941]:ExpressionStatement[26509-26519]"
    }, {
      "left" : "height = h;",
      "right" : "height = h;",
      "info" : "ExpressionStatement[25946-25957]:ExpressionStatement[26524-26535]"
    }, {
      "left" : "pixelWidth = width * pixelDensity;",
      "right" : "pixelWidth = width * pixelDensity;",
      "info" : "ExpressionStatement[26032-26066]:ExpressionStatement[26610-26644]"
    }, {
      "left" : "pixelHeight = height * pixelDensity;",
      "right" : "pixelHeight = height * pixelDensity;",
      "info" : "ExpressionStatement[26071-26107]:ExpressionStatement[26649-26685]"
    }, {
      "left" : "reapplySettings = true;",
      "right" : "reapplySettings = true;",
      "info" : "ExpressionStatement[26195-26218]:ExpressionStatement[26773-26796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26689-26705]:Block[27267-27283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26742-26802]:Block[27320-27380]"
    }, {
      "left" : "return surface = new PSurfaceAWT(this);",
      "right" : "return surface = new PSurfaceAWT(this);",
      "info" : "ReturnStatement[26759-26798]:ReturnStatement[27337-27376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27430-27480]:Block[28008-28058]"
    }, {
      "left" : "cacheMap.put(image, storage);",
      "right" : "cacheMap.put(image, storage);",
      "info" : "ExpressionStatement[27447-27476]:ExpressionStatement[28025-28054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27966-28014]:Block[28544-28592]"
    }, {
      "left" : "return cacheMap.get(image);",
      "right" : "return cacheMap.get(image);",
      "info" : "ReturnStatement[27983-28010]:ReturnStatement[28561-28588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28226-28270]:Block[28804-28848]"
    }, {
      "left" : "cacheMap.remove(image);",
      "right" : "cacheMap.remove(image);",
      "info" : "ExpressionStatement[28243-28266]:ExpressionStatement[28821-28844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28463-28496]:Block[29041-29074]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28480-28492]:ReturnStatement[29058-29070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29232-29248]:Block[29810-29826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29689-29705]:Block[30267-30283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29732-29788]:Block[30310-30366]"
    }, {
      "left" : "showMethodWarning(\"beginGL\");",
      "right" : "showMethodWarning(\"beginGL\");",
      "info" : "ExpressionStatement[29738-29767]:ExpressionStatement[30316-30345]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29772-29784]:ReturnStatement[30350-30362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29814-29851]:Block[30392-30429]"
    }, {
      "left" : "showMethodWarning(\"endGL\");",
      "right" : "showMethodWarning(\"endGL\");",
      "info" : "ExpressionStatement[29820-29847]:ExpressionStatement[30398-30425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29876-29932]:Block[30454-30510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29968-30061]:Block[30546-30639]"
    }, {
      "left" : "if (!settingsInited)",
      "right" : "if (!settingsInited)",
      "info" : "IfStatement[29974-30013]:IfStatement[30552-30591]"
    }, {
      "left" : "defaultSettings();",
      "right" : "defaultSettings();",
      "info" : "ExpressionStatement[29995-30013]:ExpressionStatement[30573-30591]"
    }, {
      "left" : "if (reapplySettings)",
      "right" : "if (reapplySettings)",
      "info" : "IfStatement[30018-30057]:IfStatement[30596-30635]"
    }, {
      "left" : "reapplySettings();",
      "right" : "reapplySettings();",
      "info" : "ExpressionStatement[30039-30057]:ExpressionStatement[30617-30635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30495-31960]:Block[31073-32538]"
    }, {
      "left" : "colorMode(RGB, 255);",
      "right" : "colorMode(RGB, 255);",
      "info" : "ExpressionStatement[30719-30739]:ExpressionStatement[31297-31317]"
    }, {
      "left" : "fill(255);",
      "right" : "fill(255);",
      "info" : "ExpressionStatement[30744-30754]:ExpressionStatement[31322-31332]"
    }, {
      "left" : "stroke(0);",
      "right" : "stroke(0);",
      "info" : "ExpressionStatement[30759-30769]:ExpressionStatement[31337-31347]"
    }, {
      "left" : "strokeWeight(DEFAULT_STROKE_WEIGHT);",
      "right" : "strokeWeight(DEFAULT_STROKE_WEIGHT);",
      "info" : "ExpressionStatement[30915-30951]:ExpressionStatement[31493-31529]"
    }, {
      "left" : "strokeJoin(DEFAULT_STROKE_JOIN);",
      "right" : "strokeJoin(DEFAULT_STROKE_JOIN);",
      "info" : "ExpressionStatement[30956-30988]:ExpressionStatement[31534-31566]"
    }, {
      "left" : "strokeCap(DEFAULT_STROKE_CAP);",
      "right" : "strokeCap(DEFAULT_STROKE_CAP);",
      "info" : "ExpressionStatement[30993-31023]:ExpressionStatement[31571-31601]"
    }, {
      "left" : "shape = 0;",
      "right" : "shape = 0;",
      "info" : "ExpressionStatement[31053-31063]:ExpressionStatement[31631-31641]"
    }, {
      "left" : "rectMode(CORNER);",
      "right" : "rectMode(CORNER);",
      "info" : "ExpressionStatement[31069-31086]:ExpressionStatement[31647-31664]"
    }, {
      "left" : "ellipseMode(DIAMETER);",
      "right" : "ellipseMode(DIAMETER);",
      "info" : "ExpressionStatement[31091-31113]:ExpressionStatement[31669-31691]"
    }, {
      "left" : "autoNormal = true;",
      "right" : "autoNormal = true;",
      "info" : "ExpressionStatement[31119-31137]:ExpressionStatement[31697-31715]"
    }, {
      "left" : "textFont = null;",
      "right" : "textFont = null;",
      "info" : "ExpressionStatement[31166-31182]:ExpressionStatement[31744-31760]"
    }, {
      "left" : "textSize = 12;",
      "right" : "textSize = 12;",
      "info" : "ExpressionStatement[31187-31201]:ExpressionStatement[31765-31779]"
    }, {
      "left" : "textLeading = 14;",
      "right" : "textLeading = 14;",
      "info" : "ExpressionStatement[31206-31223]:ExpressionStatement[31784-31801]"
    }, {
      "left" : "textAlign = LEFT;",
      "right" : "textAlign = LEFT;",
      "info" : "ExpressionStatement[31228-31245]:ExpressionStatement[31806-31823]"
    }, {
      "left" : "textMode = MODEL;",
      "right" : "textMode = MODEL;",
      "info" : "ExpressionStatement[31250-31267]:ExpressionStatement[31828-31845]"
    }, {
      "left" : "if (primaryGraphics)",
      "right" : "if (primaryGraphics)",
      "info" : "IfStatement[31667-31809]:IfStatement[32245-32387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31688-31809]:Block[32266-32387]"
    }, {
      "left" : "background(backgroundColor);",
      "right" : "background(backgroundColor);",
      "info" : "ExpressionStatement[31775-31803]:ExpressionStatement[32353-32381]"
    }, {
      "left" : "blendMode(BLEND);",
      "right" : "blendMode(BLEND);",
      "info" : "ExpressionStatement[31815-31832]:ExpressionStatement[32393-32410]"
    }, {
      "left" : "settingsInited = true;",
      "right" : "settingsInited = true;",
      "info" : "ExpressionStatement[31838-31860]:ExpressionStatement[32416-32438]"
    }, {
      "left" : "reapplySettings = false;",
      "right" : "reapplySettings = false;",
      "info" : "ExpressionStatement[31932-31956]:ExpressionStatement[32510-32534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32522-34157]:Block[33100-34735]"
    }, {
      "left" : "if (!settingsInited)",
      "right" : "if (!settingsInited)",
      "info" : "IfStatement[32741-32769]:IfStatement[33319-33347]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[32762-32769]:ReturnStatement[33340-33347]"
    }, {
      "left" : "colorMode(colorMode, colorModeX, colorModeY, colorModeZ);",
      "right" : "colorMode(colorMode, colorModeX, colorModeY, colorModeZ);",
      "info" : "ExpressionStatement[32828-32885]:ExpressionStatement[33406-33463]"
    }, {
      "left" : "if (fill)",
      "right" : "if (fill)",
      "info" : "IfStatement[32890-33020]:IfStatement[33468-33598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32900-32991]:Block[33478-33569]"
    }, {
      "left" : "fill(fillColor);",
      "right" : "fill(fillColor);",
      "info" : "ExpressionStatement[32969-32985]:ExpressionStatement[33547-33563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32997-33020]:Block[33575-33598]"
    }, {
      "left" : "noFill();",
      "right" : "noFill();",
      "info" : "ExpressionStatement[33005-33014]:ExpressionStatement[33583-33592]"
    }, {
      "left" : "if (stroke)",
      "right" : "if (stroke)",
      "info" : "IfStatement[33025-33506]:IfStatement[33603-34084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33037-33475]:Block[33615-34053]"
    }, {
      "left" : "stroke(strokeColor);",
      "right" : "stroke(strokeColor);",
      "info" : "ExpressionStatement[33045-33065]:ExpressionStatement[33623-33643]"
    }, {
      "left" : "strokeWeight(strokeWeight);",
      "right" : "strokeWeight(strokeWeight);",
      "info" : "ExpressionStatement[33258-33285]:ExpressionStatement[33836-33863]"
    }, {
      "left" : "strokeCap(strokeCap);",
      "right" : "strokeCap(strokeCap);",
      "info" : "ExpressionStatement[33349-33370]:ExpressionStatement[33927-33948]"
    }, {
      "left" : "strokeJoin(strokeJoin);",
      "right" : "strokeJoin(strokeJoin);",
      "info" : "ExpressionStatement[33436-33459]:ExpressionStatement[34014-34037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33481-33506]:Block[34059-34084]"
    }, {
      "left" : "noStroke();",
      "right" : "noStroke();",
      "info" : "ExpressionStatement[33489-33500]:ExpressionStatement[34067-34078]"
    }, {
      "left" : "if (tint)",
      "right" : "if (tint)",
      "info" : "IfStatement[33511-33580]:IfStatement[34089-34158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33521-33551]:Block[34099-34129]"
    }, {
      "left" : "tint(tintColor);",
      "right" : "tint(tintColor);",
      "info" : "ExpressionStatement[33529-33545]:ExpressionStatement[34107-34123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33557-33580]:Block[34135-34158]"
    }, {
      "left" : "noTint();",
      "right" : "noTint();",
      "info" : "ExpressionStatement[33565-33574]:ExpressionStatement[34143-34152]"
    }, {
      "left" : "if (textFont != null)",
      "right" : "if (textFont != null)",
      "info" : "IfStatement[33725-34001]:IfStatement[34303-34579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33747-34001]:Block[34325-34579]"
    }, {
      "left" : "float saveLeading = textLeading;",
      "right" : "float saveLeading = textLeading;",
      "info" : "VariableDeclarationStatement[33895-33927]:VariableDeclarationStatement[34473-34505]"
    }, {
      "left" : "textFont(textFont, textSize);",
      "right" : "textFont(textFont, textSize);",
      "info" : "ExpressionStatement[33934-33963]:ExpressionStatement[34512-34541]"
    }, {
      "left" : "textLeading(saveLeading);",
      "right" : "textLeading(saveLeading);",
      "info" : "ExpressionStatement[33970-33995]:ExpressionStatement[34548-34573]"
    }, {
      "left" : "textMode(textMode);",
      "right" : "textMode(textMode);",
      "info" : "ExpressionStatement[34006-34025]:ExpressionStatement[34584-34603]"
    }, {
      "left" : "textAlign(textAlign, textAlignY);",
      "right" : "textAlign(textAlign, textAlignY);",
      "info" : "ExpressionStatement[34030-34063]:ExpressionStatement[34608-34641]"
    }, {
      "left" : "background(backgroundColor);",
      "right" : "background(backgroundColor);",
      "info" : "ExpressionStatement[34068-34096]:ExpressionStatement[34646-34674]"
    }, {
      "left" : "blendMode(blendMode);",
      "right" : "blendMode(blendMode);",
      "info" : "ExpressionStatement[34102-34123]:ExpressionStatement[34680-34701]"
    }, {
      "left" : "reapplySettings = false;",
      "right" : "reapplySettings = false;",
      "info" : "ExpressionStatement[34129-34153]:ExpressionStatement[34707-34731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37804-38110]:Block[38382-38688]"
    }, {
      "left" : "if (which == ENABLE_NATIVE_FONTS ||\n        which == DISABLE_NATIVE_FONTS)",
      "right" : "if (which == ENABLE_NATIVE_FONTS ||\n        which == DISABLE_NATIVE_FONTS)",
      "info" : "IfStatement[37810-38010]:IfStatement[38388-38588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37885-38010]:Block[38463-38588]"
    }, {
      "left" : "showWarning(\"hint(ENABLE_NATIVE_FONTS) no longer supported. \" +\n                  \"Use createFont() instead.\");",
      "right" : "showWarning(\"hint(ENABLE_NATIVE_FONTS) no longer supported. \" +\n                  \"Use createFont() instead.\");",
      "info" : "ExpressionStatement[37893-38004]:ExpressionStatement[38471-38582]"
    }, {
      "left" : "if (which > 0)",
      "right" : "if (which > 0)",
      "info" : "IfStatement[38015-38106]:IfStatement[38593-38684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38030-38064]:Block[38608-38642]"
    }, {
      "left" : "hints[which] = true;",
      "right" : "hints[which] = true;",
      "info" : "ExpressionStatement[38038-38058]:ExpressionStatement[38616-38636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38070-38106]:Block[38648-38684]"
    }, {
      "left" : "hints[-which] = false;",
      "right" : "hints[-which] = false;",
      "info" : "ExpressionStatement[38078-38100]:ExpressionStatement[38656-38678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38277-38307]:Block[38855-38885]"
    }, {
      "left" : "beginShape(POLYGON);",
      "right" : "beginShape(POLYGON);",
      "info" : "ExpressionStatement[38283-38303]:ExpressionStatement[38861-38881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40423-40446]:Block[41001-41024]"
    }, {
      "left" : "shape = kind;",
      "right" : "shape = kind;",
      "info" : "ExpressionStatement[40429-40442]:ExpressionStatement[41007-41020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40618-40644]:Block[41196-41222]"
    }, {
      "left" : "this.edge = edge;",
      "right" : "this.edge = edge;",
      "info" : "ExpressionStatement[40623-40640]:ExpressionStatement[41201-41218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41432-41916]:Block[42010-42494]"
    }, {
      "left" : "normalX = nx;",
      "right" : "normalX = nx;",
      "info" : "ExpressionStatement[41438-41451]:ExpressionStatement[42016-42029]"
    }, {
      "left" : "normalY = ny;",
      "right" : "normalY = ny;",
      "info" : "ExpressionStatement[41456-41469]:ExpressionStatement[42034-42047]"
    }, {
      "left" : "normalZ = nz;",
      "right" : "normalZ = nz;",
      "info" : "ExpressionStatement[41474-41487]:ExpressionStatement[42052-42065]"
    }, {
      "left" : "if (shape != 0)",
      "right" : "if (shape != 0)",
      "info" : "IfStatement[41617-41912]:IfStatement[42195-42490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41633-41912]:Block[42211-42490]"
    }, {
      "left" : "if (normalMode == NORMAL_MODE_AUTO)",
      "right" : "if (normalMode == NORMAL_MODE_AUTO)",
      "info" : "IfStatement[41641-41906]:IfStatement[42219-42484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41677-41768]:Block[42255-42346]"
    }, {
      "left" : "normalMode = NORMAL_MODE_SHAPE;",
      "right" : "normalMode = NORMAL_MODE_SHAPE;",
      "info" : "ExpressionStatement[41729-41760]:ExpressionStatement[42307-42338]"
    }, {
      "left" : "if (normalMode == NORMAL_MODE_SHAPE)",
      "right" : "if (normalMode == NORMAL_MODE_SHAPE)",
      "info" : "IfStatement[41774-41906]:IfStatement[42352-42484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41811-41906]:Block[42389-42484]"
    }, {
      "left" : "normalMode = NORMAL_MODE_VERTEX;",
      "right" : "normalMode = NORMAL_MODE_VERTEX;",
      "info" : "ExpressionStatement[41866-41898]:ExpressionStatement[42444-42476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41970-42009]:Block[42548-42587]"
    }, {
      "left" : "showMissingWarning(\"attrib\");",
      "right" : "showMissingWarning(\"attrib\");",
      "info" : "ExpressionStatement[41976-42005]:ExpressionStatement[42554-42583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42061-42100]:Block[42639-42678]"
    }, {
      "left" : "showMissingWarning(\"attrib\");",
      "right" : "showMissingWarning(\"attrib\");",
      "info" : "ExpressionStatement[42067-42096]:ExpressionStatement[42645-42674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42156-42195]:Block[42734-42773]"
    }, {
      "left" : "showMissingWarning(\"attrib\");",
      "right" : "showMissingWarning(\"attrib\");",
      "info" : "ExpressionStatement[42162-42191]:ExpressionStatement[42740-42769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42957-43122]:Block[43535-43700]"
    }, {
      "left" : "if (mode != IMAGE && mode != NORMAL)",
      "right" : "if (mode != IMAGE && mode != NORMAL)",
      "info" : "IfStatement[42963-43089]:IfStatement[43541-43667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43000-43089]:Block[43578-43667]"
    }, {
      "left" : "throw new RuntimeException(\"textureMode() only supports IMAGE and NORMAL\");",
      "right" : "throw new RuntimeException(\"textureMode() only supports IMAGE and NORMAL\");",
      "info" : "ThrowStatement[43008-43083]:ThrowStatement[43586-43661]"
    }, {
      "left" : "this.textureMode = mode;",
      "right" : "this.textureMode = mode;",
      "info" : "ExpressionStatement[43094-43118]:ExpressionStatement[43672-43696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43466-43510]:Block[44044-44088]"
    }, {
      "left" : "showMissingWarning(\"textureWrap\");",
      "right" : "showMissingWarning(\"textureWrap\");",
      "info" : "ExpressionStatement[43472-43506]:ExpressionStatement[44050-44084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44292-44323]:Block[44870-44901]"
    }, {
      "left" : "textureImage = image;",
      "right" : "textureImage = image;",
      "info" : "ExpressionStatement[44298-44319]:ExpressionStatement[44876-44897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44471-44501]:Block[45049-45079]"
    }, {
      "left" : "textureImage = null;",
      "right" : "textureImage = null;",
      "info" : "ExpressionStatement[44477-44497]:ExpressionStatement[45055-45075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44535-44742]:Block[45113-45320]"
    }, {
      "left" : "if (vertexCount == vertices.length)",
      "right" : "if (vertexCount == vertices.length)",
      "info" : "IfStatement[44541-44738]:IfStatement[45119-45316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44577-44738]:Block[45155-45316]"
    }, {
      "left" : "float temp[][] = new float[vertexCount << 1][VERTEX_FIELD_COUNT];",
      "right" : "float temp[][] = new float[vertexCount << 1][VERTEX_FIELD_COUNT];",
      "info" : "VariableDeclarationStatement[44585-44650]:VariableDeclarationStatement[45163-45228]"
    }, {
      "left" : "System.arraycopy(vertices, 0, temp, 0, vertexCount);",
      "right" : "System.arraycopy(vertices, 0, temp, 0, vertexCount);",
      "info" : "ExpressionStatement[44657-44709]:ExpressionStatement[45235-45287]"
    }, {
      "left" : "vertices = temp;",
      "right" : "vertices = temp;",
      "info" : "ExpressionStatement[44716-44732]:ExpressionStatement[45294-45310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44784-46372]:Block[45362-46950]"
    }, {
      "left" : "vertexCheck();",
      "right" : "vertexCheck();",
      "info" : "ExpressionStatement[44790-44804]:ExpressionStatement[45368-45382]"
    }, {
      "left" : "float[] vertex = vertices[vertexCount];",
      "right" : "float[] vertex = vertices[vertexCount];",
      "info" : "VariableDeclarationStatement[44809-44848]:VariableDeclarationStatement[45387-45426]"
    }, {
      "left" : "curveVertexCount = 0;",
      "right" : "curveVertexCount = 0;",
      "info" : "ExpressionStatement[44854-44875]:ExpressionStatement[45432-45453]"
    }, {
      "left" : "vertex[X] = x;",
      "right" : "vertex[X] = x;",
      "info" : "ExpressionStatement[44881-44895]:ExpressionStatement[45459-45473]"
    }, {
      "left" : "vertex[Y] = y;",
      "right" : "vertex[Y] = y;",
      "info" : "ExpressionStatement[44900-44914]:ExpressionStatement[45478-45492]"
    }, {
      "left" : "vertex[Z] = 0;",
      "right" : "vertex[Z] = 0;",
      "info" : "ExpressionStatement[44919-44933]:ExpressionStatement[45497-45511]"
    }, {
      "left" : "vertex[EDGE] = edge ? 1 : 0;",
      "right" : "vertex[EDGE] = edge ? 1 : 0;",
      "info" : "ExpressionStatement[44939-44967]:ExpressionStatement[45517-45545]"
    }, {
      "left" : "boolean textured = textureImage != null;",
      "right" : "boolean textured = textureImage != null;",
      "info" : "VariableDeclarationStatement[45107-45147]:VariableDeclarationStatement[45685-45725]"
    }, {
      "left" : "if (fill || textured)",
      "right" : "if (fill || textured)",
      "info" : "IfStatement[45152-45598]:IfStatement[45730-46176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45174-45598]:Block[45752-46176]"
    }, {
      "left" : "if (!textured)",
      "right" : "if (!textured)",
      "info" : "IfStatement[45182-45592]:IfStatement[45760-46170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45197-45314]:Block[45775-45892]"
    }, {
      "left" : "vertex[R] = fillR;",
      "right" : "vertex[R] = fillR;",
      "info" : "ExpressionStatement[45207-45225]:ExpressionStatement[45785-45803]"
    }, {
      "left" : "vertex[G] = fillG;",
      "right" : "vertex[G] = fillG;",
      "info" : "ExpressionStatement[45234-45252]:ExpressionStatement[45812-45830]"
    }, {
      "left" : "vertex[B] = fillB;",
      "right" : "vertex[B] = fillB;",
      "info" : "ExpressionStatement[45261-45279]:ExpressionStatement[45839-45857]"
    }, {
      "left" : "vertex[A] = fillA;",
      "right" : "vertex[A] = fillA;",
      "info" : "ExpressionStatement[45288-45306]:ExpressionStatement[45866-45884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45320-45592]:Block[45898-46170]"
    }, {
      "left" : "if (tint)",
      "right" : "if (tint)",
      "info" : "IfStatement[45330-45584]:IfStatement[45908-46162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45340-45467]:Block[45918-46045]"
    }, {
      "left" : "vertex[R] = tintR;",
      "right" : "vertex[R] = tintR;",
      "info" : "ExpressionStatement[45352-45370]:ExpressionStatement[45930-45948]"
    }, {
      "left" : "vertex[G] = tintG;",
      "right" : "vertex[G] = tintG;",
      "info" : "ExpressionStatement[45381-45399]:ExpressionStatement[45959-45977]"
    }, {
      "left" : "vertex[B] = tintB;",
      "right" : "vertex[B] = tintB;",
      "info" : "ExpressionStatement[45410-45428]:ExpressionStatement[45988-46006]"
    }, {
      "left" : "vertex[A] = tintA;",
      "right" : "vertex[A] = tintA;",
      "info" : "ExpressionStatement[45439-45457]:ExpressionStatement[46017-46035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45473-45584]:Block[46051-46162]"
    }, {
      "left" : "vertex[R] = 1;",
      "right" : "vertex[R] = 1;",
      "info" : "ExpressionStatement[45485-45499]:ExpressionStatement[46063-46077]"
    }, {
      "left" : "vertex[G] = 1;",
      "right" : "vertex[G] = 1;",
      "info" : "ExpressionStatement[45510-45524]:ExpressionStatement[46088-46102]"
    }, {
      "left" : "vertex[B] = 1;",
      "right" : "vertex[B] = 1;",
      "info" : "ExpressionStatement[45535-45549]:ExpressionStatement[46113-46127]"
    }, {
      "left" : "vertex[A] = 1;",
      "right" : "vertex[A] = 1;",
      "info" : "ExpressionStatement[45560-45574]:ExpressionStatement[46138-46152]"
    }, {
      "left" : "if (stroke)",
      "right" : "if (stroke)",
      "info" : "IfStatement[45604-45768]:IfStatement[46182-46346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45616-45768]:Block[46194-46346]"
    }, {
      "left" : "vertex[SR] = strokeR;",
      "right" : "vertex[SR] = strokeR;",
      "info" : "ExpressionStatement[45624-45645]:ExpressionStatement[46202-46223]"
    }, {
      "left" : "vertex[SG] = strokeG;",
      "right" : "vertex[SG] = strokeG;",
      "info" : "ExpressionStatement[45652-45673]:ExpressionStatement[46230-46251]"
    }, {
      "left" : "vertex[SB] = strokeB;",
      "right" : "vertex[SB] = strokeB;",
      "info" : "ExpressionStatement[45680-45701]:ExpressionStatement[46258-46279]"
    }, {
      "left" : "vertex[SA] = strokeA;",
      "right" : "vertex[SA] = strokeA;",
      "info" : "ExpressionStatement[45708-45729]:ExpressionStatement[46286-46307]"
    }, {
      "left" : "vertex[SW] = strokeWeight;",
      "right" : "vertex[SW] = strokeWeight;",
      "info" : "ExpressionStatement[45736-45762]:ExpressionStatement[46314-46340]"
    }, {
      "left" : "if (textured)",
      "right" : "if (textured)",
      "info" : "IfStatement[45774-45851]:IfStatement[46352-46429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45788-45851]:Block[46366-46429]"
    }, {
      "left" : "vertex[U] = textureU;",
      "right" : "vertex[U] = textureU;",
      "info" : "ExpressionStatement[45796-45817]:ExpressionStatement[46374-46395]"
    }, {
      "left" : "vertex[V] = textureV;",
      "right" : "vertex[V] = textureV;",
      "info" : "ExpressionStatement[45824-45845]:ExpressionStatement[46402-46423]"
    }, {
      "left" : "if (autoNormal)",
      "right" : "if (autoNormal)",
      "info" : "IfStatement[45857-46348]:IfStatement[46435-46926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45873-46305]:Block[46451-46883]"
    }, {
      "left" : "float norm2 = normalX * normalX + normalY * normalY + normalZ * normalZ;",
      "right" : "float norm2 = normalX * normalX + normalY * normalY + normalZ * normalZ;",
      "info" : "VariableDeclarationStatement[45881-45953]:VariableDeclarationStatement[46459-46531]"
    }, {
      "left" : "if (norm2 < EPSILON)",
      "right" : "if (norm2 < EPSILON)",
      "info" : "IfStatement[45960-46299]:IfStatement[46538-46877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45981-46022]:Block[46559-46600]"
    }, {
      "left" : "vertex[HAS_NORMAL] = 0;",
      "right" : "vertex[HAS_NORMAL] = 0;",
      "info" : "ExpressionStatement[45991-46014]:ExpressionStatement[46569-46592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46028-46299]:Block[46606-46877]"
    }, {
      "left" : "if (Math.abs(norm2 - 1) > EPSILON)",
      "right" : "if (Math.abs(norm2 - 1) > EPSILON)",
      "info" : "IfStatement[46038-46259]:IfStatement[46616-46837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46073-46259]:Block[46651-46837]"
    }, {
      "left" : "float norm = PApplet.sqrt(norm2);",
      "right" : "float norm = PApplet.sqrt(norm2);",
      "info" : "VariableDeclarationStatement[46135-46168]:VariableDeclarationStatement[46713-46746]"
    }, {
      "left" : "normalX /= norm;",
      "right" : "normalX /= norm;",
      "info" : "ExpressionStatement[46179-46195]:ExpressionStatement[46757-46773]"
    }, {
      "left" : "normalY /= norm;",
      "right" : "normalY /= norm;",
      "info" : "ExpressionStatement[46206-46222]:ExpressionStatement[46784-46800]"
    }, {
      "left" : "normalZ /= norm;",
      "right" : "normalZ /= norm;",
      "info" : "ExpressionStatement[46233-46249]:ExpressionStatement[46811-46827]"
    }, {
      "left" : "vertex[HAS_NORMAL] = 1;",
      "right" : "vertex[HAS_NORMAL] = 1;",
      "info" : "ExpressionStatement[46268-46291]:ExpressionStatement[46846-46869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46311-46348]:Block[46889-46926]"
    }, {
      "left" : "vertex[HAS_NORMAL] = 1;",
      "right" : "vertex[HAS_NORMAL] = 1;",
      "info" : "ExpressionStatement[46319-46342]:ExpressionStatement[46897-46920]"
    }, {
      "left" : "vertexCount++;",
      "right" : "vertexCount++;",
      "info" : "ExpressionStatement[46354-46368]:ExpressionStatement[46932-46946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46423-49182]:Block[47001-49760]"
    }, {
      "left" : "vertexCheck();",
      "right" : "vertexCheck();",
      "info" : "ExpressionStatement[46429-46443]:ExpressionStatement[47007-47021]"
    }, {
      "left" : "float[] vertex = vertices[vertexCount];",
      "right" : "float[] vertex = vertices[vertexCount];",
      "info" : "VariableDeclarationStatement[46448-46487]:VariableDeclarationStatement[47026-47065]"
    }, {
      "left" : "if (shape == POLYGON)",
      "right" : "if (shape == POLYGON)",
      "info" : "IfStatement[46736-47142]:IfStatement[47314-47720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46758-47142]:Block[47336-47720]"
    }, {
      "left" : "if (vertexCount > 0)",
      "right" : "if (vertexCount > 0)",
      "info" : "IfStatement[46766-47136]:IfStatement[47344-47714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46787-47136]:Block[47365-47714]"
    }, {
      "left" : "float pvertex[] = vertices[vertexCount-1];",
      "right" : "float pvertex[] = vertices[vertexCount-1];",
      "info" : "VariableDeclarationStatement[46797-46839]:VariableDeclarationStatement[47375-47417]"
    }, {
      "left" : "if ((Math.abs(pvertex[X] - x) < EPSILON) &&\n            (Math.abs(pvertex[Y] - y) < EPSILON) &&\n            (Math.abs(pvertex[Z] - z) < EPSILON))",
      "right" : "if ((Math.abs(pvertex[X] - x) < EPSILON) &&\n            (Math.abs(pvertex[Y] - y) < EPSILON) &&\n            (Math.abs(pvertex[Z] - z) < EPSILON))",
      "info" : "IfStatement[46848-47128]:IfStatement[47426-47706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46994-47128]:Block[47572-47706]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[47111-47118]:ReturnStatement[47689-47696]"
    }, {
      "left" : "curveVertexCount = 0;",
      "right" : "curveVertexCount = 0;",
      "info" : "ExpressionStatement[47352-47373]:ExpressionStatement[47930-47951]"
    }, {
      "left" : "vertex[X] = x;",
      "right" : "vertex[X] = x;",
      "info" : "ExpressionStatement[47379-47393]:ExpressionStatement[47957-47971]"
    }, {
      "left" : "vertex[Y] = y;",
      "right" : "vertex[Y] = y;",
      "info" : "ExpressionStatement[47398-47412]:ExpressionStatement[47976-47990]"
    }, {
      "left" : "vertex[Z] = z;",
      "right" : "vertex[Z] = z;",
      "info" : "ExpressionStatement[47417-47431]:ExpressionStatement[47995-48009]"
    }, {
      "left" : "vertex[EDGE] = edge ? 1 : 0;",
      "right" : "vertex[EDGE] = edge ? 1 : 0;",
      "info" : "ExpressionStatement[47437-47465]:ExpressionStatement[48015-48043]"
    }, {
      "left" : "boolean textured = textureImage != null;",
      "right" : "boolean textured = textureImage != null;",
      "info" : "VariableDeclarationStatement[47471-47511]:VariableDeclarationStatement[48049-48089]"
    }, {
      "left" : "if (fill || textured)",
      "right" : "if (fill || textured)",
      "info" : "IfStatement[47516-48302]:IfStatement[48094-48880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47538-48302]:Block[48116-48880]"
    }, {
      "left" : "if (!textured)",
      "right" : "if (!textured)",
      "info" : "IfStatement[47546-47956]:IfStatement[48124-48534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47561-47678]:Block[48139-48256]"
    }, {
      "left" : "vertex[R] = fillR;",
      "right" : "vertex[R] = fillR;",
      "info" : "ExpressionStatement[47571-47589]:ExpressionStatement[48149-48167]"
    }, {
      "left" : "vertex[G] = fillG;",
      "right" : "vertex[G] = fillG;",
      "info" : "ExpressionStatement[47598-47616]:ExpressionStatement[48176-48194]"
    }, {
      "left" : "vertex[B] = fillB;",
      "right" : "vertex[B] = fillB;",
      "info" : "ExpressionStatement[47625-47643]:ExpressionStatement[48203-48221]"
    }, {
      "left" : "vertex[A] = fillA;",
      "right" : "vertex[A] = fillA;",
      "info" : "ExpressionStatement[47652-47670]:ExpressionStatement[48230-48248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47684-47956]:Block[48262-48534]"
    }, {
      "left" : "if (tint)",
      "right" : "if (tint)",
      "info" : "IfStatement[47694-47948]:IfStatement[48272-48526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47704-47831]:Block[48282-48409]"
    }, {
      "left" : "vertex[R] = tintR;",
      "right" : "vertex[R] = tintR;",
      "info" : "ExpressionStatement[47716-47734]:ExpressionStatement[48294-48312]"
    }, {
      "left" : "vertex[G] = tintG;",
      "right" : "vertex[G] = tintG;",
      "info" : "ExpressionStatement[47745-47763]:ExpressionStatement[48323-48341]"
    }, {
      "left" : "vertex[B] = tintB;",
      "right" : "vertex[B] = tintB;",
      "info" : "ExpressionStatement[47774-47792]:ExpressionStatement[48352-48370]"
    }, {
      "left" : "vertex[A] = tintA;",
      "right" : "vertex[A] = tintA;",
      "info" : "ExpressionStatement[47803-47821]:ExpressionStatement[48381-48399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47837-47948]:Block[48415-48526]"
    }, {
      "left" : "vertex[R] = 1;",
      "right" : "vertex[R] = 1;",
      "info" : "ExpressionStatement[47849-47863]:ExpressionStatement[48427-48441]"
    }, {
      "left" : "vertex[G] = 1;",
      "right" : "vertex[G] = 1;",
      "info" : "ExpressionStatement[47874-47888]:ExpressionStatement[48452-48466]"
    }, {
      "left" : "vertex[B] = 1;",
      "right" : "vertex[B] = 1;",
      "info" : "ExpressionStatement[47899-47913]:ExpressionStatement[48477-48491]"
    }, {
      "left" : "vertex[A] = 1;",
      "right" : "vertex[A] = 1;",
      "info" : "ExpressionStatement[47924-47938]:ExpressionStatement[48502-48516]"
    }, {
      "left" : "vertex[AR] = ambientR;",
      "right" : "vertex[AR] = ambientR;",
      "info" : "ExpressionStatement[47964-47986]:ExpressionStatement[48542-48564]"
    }, {
      "left" : "vertex[AG] = ambientG;",
      "right" : "vertex[AG] = ambientG;",
      "info" : "ExpressionStatement[47993-48015]:ExpressionStatement[48571-48593]"
    }, {
      "left" : "vertex[AB] = ambientB;",
      "right" : "vertex[AB] = ambientB;",
      "info" : "ExpressionStatement[48022-48044]:ExpressionStatement[48600-48622]"
    }, {
      "left" : "vertex[SPR] = specularR;",
      "right" : "vertex[SPR] = specularR;",
      "info" : "ExpressionStatement[48052-48076]:ExpressionStatement[48630-48654]"
    }, {
      "left" : "vertex[SPG] = specularG;",
      "right" : "vertex[SPG] = specularG;",
      "info" : "ExpressionStatement[48083-48107]:ExpressionStatement[48661-48685]"
    }, {
      "left" : "vertex[SPB] = specularB;",
      "right" : "vertex[SPB] = specularB;",
      "info" : "ExpressionStatement[48114-48138]:ExpressionStatement[48692-48716]"
    }, {
      "left" : "vertex[SHINE] = shininess;",
      "right" : "vertex[SHINE] = shininess;",
      "info" : "ExpressionStatement[48179-48205]:ExpressionStatement[48757-48783]"
    }, {
      "left" : "vertex[ER] = emissiveR;",
      "right" : "vertex[ER] = emissiveR;",
      "info" : "ExpressionStatement[48213-48236]:ExpressionStatement[48791-48814]"
    }, {
      "left" : "vertex[EG] = emissiveG;",
      "right" : "vertex[EG] = emissiveG;",
      "info" : "ExpressionStatement[48243-48266]:ExpressionStatement[48821-48844]"
    }, {
      "left" : "vertex[EB] = emissiveB;",
      "right" : "vertex[EB] = emissiveB;",
      "info" : "ExpressionStatement[48273-48296]:ExpressionStatement[48851-48874]"
    }, {
      "left" : "if (stroke)",
      "right" : "if (stroke)",
      "info" : "IfStatement[48308-48472]:IfStatement[48886-49050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48320-48472]:Block[48898-49050]"
    }, {
      "left" : "vertex[SR] = strokeR;",
      "right" : "vertex[SR] = strokeR;",
      "info" : "ExpressionStatement[48328-48349]:ExpressionStatement[48906-48927]"
    }, {
      "left" : "vertex[SG] = strokeG;",
      "right" : "vertex[SG] = strokeG;",
      "info" : "ExpressionStatement[48356-48377]:ExpressionStatement[48934-48955]"
    }, {
      "left" : "vertex[SB] = strokeB;",
      "right" : "vertex[SB] = strokeB;",
      "info" : "ExpressionStatement[48384-48405]:ExpressionStatement[48962-48983]"
    }, {
      "left" : "vertex[SA] = strokeA;",
      "right" : "vertex[SA] = strokeA;",
      "info" : "ExpressionStatement[48412-48433]:ExpressionStatement[48990-49011]"
    }, {
      "left" : "vertex[SW] = strokeWeight;",
      "right" : "vertex[SW] = strokeWeight;",
      "info" : "ExpressionStatement[48440-48466]:ExpressionStatement[49018-49044]"
    }, {
      "left" : "if (textured)",
      "right" : "if (textured)",
      "info" : "IfStatement[48478-48555]:IfStatement[49056-49133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48492-48555]:Block[49070-49133]"
    }, {
      "left" : "vertex[U] = textureU;",
      "right" : "vertex[U] = textureU;",
      "info" : "ExpressionStatement[48500-48521]:ExpressionStatement[49078-49099]"
    }, {
      "left" : "vertex[V] = textureV;",
      "right" : "vertex[V] = textureV;",
      "info" : "ExpressionStatement[48528-48549]:ExpressionStatement[49106-49127]"
    }, {
      "left" : "if (autoNormal)",
      "right" : "if (autoNormal)",
      "info" : "IfStatement[48561-49052]:IfStatement[49139-49630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48577-49009]:Block[49155-49587]"
    }, {
      "left" : "float norm2 = normalX * normalX + normalY * normalY + normalZ * normalZ;",
      "right" : "float norm2 = normalX * normalX + normalY * normalY + normalZ * normalZ;",
      "info" : "VariableDeclarationStatement[48585-48657]:VariableDeclarationStatement[49163-49235]"
    }, {
      "left" : "if (norm2 < EPSILON)",
      "right" : "if (norm2 < EPSILON)",
      "info" : "IfStatement[48664-49003]:IfStatement[49242-49581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48685-48726]:Block[49263-49304]"
    }, {
      "left" : "vertex[HAS_NORMAL] = 0;",
      "right" : "vertex[HAS_NORMAL] = 0;",
      "info" : "ExpressionStatement[48695-48718]:ExpressionStatement[49273-49296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48732-49003]:Block[49310-49581]"
    }, {
      "left" : "if (Math.abs(norm2 - 1) > EPSILON)",
      "right" : "if (Math.abs(norm2 - 1) > EPSILON)",
      "info" : "IfStatement[48742-48963]:IfStatement[49320-49541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48777-48963]:Block[49355-49541]"
    }, {
      "left" : "float norm = PApplet.sqrt(norm2);",
      "right" : "float norm = PApplet.sqrt(norm2);",
      "info" : "VariableDeclarationStatement[48839-48872]:VariableDeclarationStatement[49417-49450]"
    }, {
      "left" : "normalX /= norm;",
      "right" : "normalX /= norm;",
      "info" : "ExpressionStatement[48883-48899]:ExpressionStatement[49461-49477]"
    }, {
      "left" : "normalY /= norm;",
      "right" : "normalY /= norm;",
      "info" : "ExpressionStatement[48910-48926]:ExpressionStatement[49488-49504]"
    }, {
      "left" : "normalZ /= norm;",
      "right" : "normalZ /= norm;",
      "info" : "ExpressionStatement[48937-48953]:ExpressionStatement[49515-49531]"
    }, {
      "left" : "vertex[HAS_NORMAL] = 1;",
      "right" : "vertex[HAS_NORMAL] = 1;",
      "info" : "ExpressionStatement[48972-48995]:ExpressionStatement[49550-49573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49015-49052]:Block[49593-49630]"
    }, {
      "left" : "vertex[HAS_NORMAL] = 1;",
      "right" : "vertex[HAS_NORMAL] = 1;",
      "info" : "ExpressionStatement[49023-49046]:ExpressionStatement[49601-49624]"
    }, {
      "left" : "vertex[NX] = normalX;",
      "right" : "vertex[NX] = normalX;",
      "info" : "ExpressionStatement[49058-49079]:ExpressionStatement[49636-49657]"
    }, {
      "left" : "vertex[NY] = normalY;",
      "right" : "vertex[NY] = normalY;",
      "info" : "ExpressionStatement[49084-49105]:ExpressionStatement[49662-49683]"
    }, {
      "left" : "vertex[NZ] = normalZ;",
      "right" : "vertex[NZ] = normalZ;",
      "info" : "ExpressionStatement[49110-49131]:ExpressionStatement[49688-49709]"
    }, {
      "left" : "vertex[BEEN_LIT] = 0;",
      "right" : "vertex[BEEN_LIT] = 0;",
      "info" : "ExpressionStatement[49137-49158]:ExpressionStatement[49715-49736]"
    }, {
      "left" : "vertexCount++;",
      "right" : "vertexCount++;",
      "info" : "ExpressionStatement[49164-49178]:ExpressionStatement[49742-49756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49417-49589]:Block[49995-50167]"
    }, {
      "left" : "vertexCheck();",
      "right" : "vertexCheck();",
      "info" : "ExpressionStatement[49423-49437]:ExpressionStatement[50001-50015]"
    }, {
      "left" : "curveVertexCount = 0;",
      "right" : "curveVertexCount = 0;",
      "info" : "ExpressionStatement[49442-49463]:ExpressionStatement[50020-50041]"
    }, {
      "left" : "float[] vertex = vertices[vertexCount];",
      "right" : "float[] vertex = vertices[vertexCount];",
      "info" : "VariableDeclarationStatement[49468-49507]:VariableDeclarationStatement[50046-50085]"
    }, {
      "left" : "System.arraycopy(v, 0, vertex, 0, VERTEX_FIELD_COUNT);",
      "right" : "System.arraycopy(v, 0, vertex, 0, VERTEX_FIELD_COUNT);",
      "info" : "ExpressionStatement[49512-49566]:ExpressionStatement[50090-50144]"
    }, {
      "left" : "vertexCount++;",
      "right" : "vertexCount++;",
      "info" : "ExpressionStatement[49571-49585]:ExpressionStatement[50149-50163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49649-49697]:Block[50227-50275]"
    }, {
      "left" : "vertexTexture(u, v);",
      "right" : "vertexTexture(u, v);",
      "info" : "ExpressionStatement[49655-49675]:ExpressionStatement[50233-50253]"
    }, {
      "left" : "vertex(x, y);",
      "right" : "vertex(x, y);",
      "info" : "ExpressionStatement[49680-49693]:ExpressionStatement[50258-50271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51331-51382]:Block[51909-51960]"
    }, {
      "left" : "vertexTexture(u, v);",
      "right" : "vertexTexture(u, v);",
      "info" : "ExpressionStatement[51337-51357]:ExpressionStatement[51915-51935]"
    }, {
      "left" : "vertex(x, y, z);",
      "right" : "vertex(x, y, z);",
      "info" : "ExpressionStatement[51362-51378]:ExpressionStatement[51940-51956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52342-52831]:Block[52920-53409]"
    }, {
      "left" : "if (textureImage == null)",
      "right" : "if (textureImage == null)",
      "info" : "IfStatement[52348-52533]:IfStatement[52926-53111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52374-52533]:Block[52952-53111]"
    }, {
      "left" : "throw new RuntimeException(\"You must first call texture() before \" +\n                                 \"using u and v coordinates with vertex()\");",
      "right" : "throw new RuntimeException(\"You must first call texture() before \" +\n                                 \"using u and v coordinates with vertex()\");",
      "info" : "ThrowStatement[52382-52527]:ThrowStatement[52960-53105]"
    }, {
      "left" : "if (textureMode == IMAGE)",
      "right" : "if (textureMode == IMAGE)",
      "info" : "IfStatement[52538-52634]:IfStatement[53116-53212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52564-52634]:Block[53142-53212]"
    }, {
      "left" : "u /= textureImage.width;",
      "right" : "u /= textureImage.width;",
      "info" : "ExpressionStatement[52572-52596]:ExpressionStatement[53150-53174]"
    }, {
      "left" : "v /= textureImage.height;",
      "right" : "v /= textureImage.height;",
      "info" : "ExpressionStatement[52603-52628]:ExpressionStatement[53181-53206]"
    }, {
      "left" : "textureU = u;",
      "right" : "textureU = u;",
      "info" : "ExpressionStatement[52640-52653]:ExpressionStatement[53218-53231]"
    }, {
      "left" : "textureV = v;",
      "right" : "textureV = v;",
      "info" : "ExpressionStatement[52658-52671]:ExpressionStatement[53236-53249]"
    }, {
      "left" : "if (textureU < 0)",
      "right" : "if (textureU < 0)",
      "info" : "IfStatement[52677-52749]:IfStatement[53255-53327]"
    }, {
      "left" : "textureU = 0;",
      "right" : "textureU = 0;",
      "info" : "ExpressionStatement[52695-52708]:ExpressionStatement[53273-53286]"
    }, {
      "left" : "if (textureU > 1)",
      "right" : "if (textureU > 1)",
      "info" : "IfStatement[52718-52749]:IfStatement[53296-53327]"
    }, {
      "left" : "textureU = 1;",
      "right" : "textureU = 1;",
      "info" : "ExpressionStatement[52736-52749]:ExpressionStatement[53314-53327]"
    }, {
      "left" : "if (textureV < 0)",
      "right" : "if (textureV < 0)",
      "info" : "IfStatement[52755-52827]:IfStatement[53333-53405]"
    }, {
      "left" : "textureV = 0;",
      "right" : "textureV = 0;",
      "info" : "ExpressionStatement[52773-52786]:ExpressionStatement[53351-53364]"
    }, {
      "left" : "if (textureV > 1)",
      "right" : "if (textureV > 1)",
      "info" : "IfStatement[52796-52827]:IfStatement[53374-53405]"
    }, {
      "left" : "textureV = 1;",
      "right" : "textureV = 1;",
      "info" : "ExpressionStatement[52814-52827]:ExpressionStatement[53392-53405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53142-53187]:Block[53720-53765]"
    }, {
      "left" : "showMissingWarning(\"beginContour\");",
      "right" : "showMissingWarning(\"beginContour\");",
      "info" : "ExpressionStatement[53148-53183]:ExpressionStatement[53726-53761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53255-53298]:Block[53833-53876]"
    }, {
      "left" : "showMissingWarning(\"endContour\");",
      "right" : "showMissingWarning(\"endContour\");",
      "info" : "ExpressionStatement[53261-53294]:ExpressionStatement[53839-53872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53326-53351]:Block[53904-53929]"
    }, {
      "left" : "endShape(OPEN);",
      "right" : "endShape(OPEN);",
      "info" : "ExpressionStatement[53332-53347]:ExpressionStatement[53910-53925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54016-54021]:Block[54594-54599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54294-54337]:Block[54872-54915]"
    }, {
      "left" : "return loadShape(filename, null);",
      "right" : "return loadShape(filename, null);",
      "info" : "ReturnStatement[54300-54333]:ReturnStatement[54878-54911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54426-54485]:Block[55004-55063]"
    }, {
      "left" : "showMissingWarning(\"loadShape\");",
      "right" : "showMissingWarning(\"loadShape\");",
      "info" : "ExpressionStatement[54432-54464]:ExpressionStatement[55010-55042]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54469-54481]:ReturnStatement[55047-55059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54719-54904]:Block[55297-55482]"
    }, {
      "left" : "return createShape(PShape.GEOMETRY);",
      "right" : "return createShape(PShape.GEOMETRY);",
      "info" : "ReturnStatement[54864-54900]:ReturnStatement[55442-55478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55024-55384]:Block[55602-55962]"
    }, {
      "left" : "if (type == PConstants.GROUP ||\n        type == PShape.PATH ||\n        type == PShape.GEOMETRY)",
      "right" : "if (type == PConstants.GROUP ||\n        type == PShape.PATH ||\n        type == PShape.GEOMETRY)",
      "info" : "IfStatement[55093-55234]:IfStatement[55671-55812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55189-55234]:Block[55767-55812]"
    }, {
      "left" : "return createShapeFamily(type);",
      "right" : "return createShapeFamily(type);",
      "info" : "ReturnStatement[55197-55228]:ReturnStatement[55775-55806]"
    }, {
      "left" : "final String msg =\n      \"Only GROUP, PShape.PATH, and PShape.GEOMETRY work with createShape()\";",
      "right" : "final String msg =\n      \"Only GROUP, PShape.PATH, and PShape.GEOMETRY work with createShape()\";",
      "info" : "VariableDeclarationStatement[55239-55335]:VariableDeclarationStatement[55817-55913]"
    }, {
      "left" : "throw new IllegalArgumentException(msg);",
      "right" : "throw new IllegalArgumentException(msg);",
      "info" : "ThrowStatement[55340-55380]:ThrowStatement[55918-55958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55513-55614]:Block[56091-56192]"
    }, {
      "left" : "return new PShape(this, type);",
      "right" : "return new PShape(this, type);",
      "info" : "ReturnStatement[55519-55549]:ReturnStatement[56097-56127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55818-58426]:Block[56396-59004]"
    }, {
      "left" : "int len = p.length;",
      "right" : "int len = p.length;",
      "info" : "VariableDeclarationStatement[55824-55843]:VariableDeclarationStatement[56402-56421]"
    }, {
      "left" : "if (kind == POINT)",
      "right" : "if (kind == POINT)",
      "info" : "IfStatement[55849-58336]:IfStatement[56427-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55868-56184]:Block[56446-56762]"
    }, {
      "left" : "if (is3D() && len != 2 && len != 3)",
      "right" : "if (is3D() && len != 2 && len != 3)",
      "info" : "IfStatement[55876-56133]:IfStatement[56454-56711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55912-56028]:Block[56490-56606]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(POINT, x, y) or createShape(POINT, x, y, z)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(POINT, x, y) or createShape(POINT, x, y, z)\");",
      "info" : "ThrowStatement[55922-56020]:ThrowStatement[56500-56598]"
    }, {
      "left" : "if (len != 2)",
      "right" : "if (len != 2)",
      "info" : "IfStatement[56034-56133]:IfStatement[56612-56711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56048-56133]:Block[56626-56711]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(POINT, x, y)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(POINT, x, y)\");",
      "info" : "ThrowStatement[56058-56125]:ThrowStatement[56636-56703]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[56140-56177]:ReturnStatement[56718-56755]"
    }, {
      "left" : "if (kind == LINE)",
      "right" : "if (kind == LINE)",
      "info" : "IfStatement[56190-58336]:IfStatement[56768-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56208-56556]:Block[56786-57134]"
    }, {
      "left" : "if (is3D() && len != 4 && len != 6)",
      "right" : "if (is3D() && len != 4 && len != 6)",
      "info" : "IfStatement[56216-56505]:IfStatement[56794-57083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56252-56391]:Block[56830-56969]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(LINE, x1, y1, x2, y2) or createShape(LINE, x1, y1, z1, x2, y2, z1)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(LINE, x1, y1, x2, y2) or createShape(LINE, x1, y1, z1, x2, y2, z1)\");",
      "info" : "ThrowStatement[56262-56383]:ThrowStatement[56840-56961]"
    }, {
      "left" : "if (len != 4)",
      "right" : "if (len != 4)",
      "info" : "IfStatement[56397-56505]:IfStatement[56975-57083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56411-56505]:Block[56989-57083]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(LINE, x1, y1, x2, y2)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(LINE, x1, y1, x2, y2)\");",
      "info" : "ThrowStatement[56421-56497]:ThrowStatement[56999-57075]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[56512-56549]:ReturnStatement[57090-57127]"
    }, {
      "left" : "if (kind == TRIANGLE)",
      "right" : "if (kind == TRIANGLE)",
      "info" : "IfStatement[56562-58336]:IfStatement[57140-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56584-56763]:Block[57162-57341]"
    }, {
      "left" : "if (len != 6)",
      "right" : "if (len != 6)",
      "info" : "IfStatement[56592-56712]:IfStatement[57170-57290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56606-56712]:Block[57184-57290]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(TRIANGLE, x1, y1, x2, y2, x3, y3)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(TRIANGLE, x1, y1, x2, y2, x3, y3)\");",
      "info" : "ThrowStatement[56616-56704]:ThrowStatement[57194-57282]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[56719-56756]:ReturnStatement[57297-57334]"
    }, {
      "left" : "if (kind == QUAD)",
      "right" : "if (kind == QUAD)",
      "info" : "IfStatement[56769-58336]:IfStatement[57347-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56787-56970]:Block[57365-57548]"
    }, {
      "left" : "if (len != 8)",
      "right" : "if (len != 8)",
      "info" : "IfStatement[56795-56919]:IfStatement[57373-57497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56809-56919]:Block[57387-57497]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(QUAD, x1, y1, x2, y2, x3, y3, x4, y4)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(QUAD, x1, y1, x2, y2, x3, y3, x4, y4)\");",
      "info" : "ThrowStatement[56819-56911]:ThrowStatement[57397-57489]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[56926-56963]:ReturnStatement[57504-57541]"
    }, {
      "left" : "if (kind == RECT)",
      "right" : "if (kind == RECT)",
      "info" : "IfStatement[56976-58336]:IfStatement[57554-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56994-57227]:Block[57572-57805]"
    }, {
      "left" : "if (len != 4 && len != 5 && len != 8 && len != 9)",
      "right" : "if (len != 4 && len != 5 && len != 8 && len != 9)",
      "info" : "IfStatement[57002-57176]:IfStatement[57580-57754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57052-57176]:Block[57630-57754]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Wrong number of parameters for createShape(RECT), see the reference\");",
      "right" : "throw new IllegalArgumentException(\"Wrong number of parameters for createShape(RECT), see the reference\");",
      "info" : "ThrowStatement[57062-57168]:ThrowStatement[57640-57746]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[57183-57220]:ReturnStatement[57761-57798]"
    }, {
      "left" : "if (kind == ELLIPSE)",
      "right" : "if (kind == ELLIPSE)",
      "info" : "IfStatement[57233-58336]:IfStatement[57811-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57254-57474]:Block[57832-58052]"
    }, {
      "left" : "if (len != 4 && len != 5)",
      "right" : "if (len != 4 && len != 5)",
      "info" : "IfStatement[57262-57423]:IfStatement[57840-58001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57288-57423]:Block[57866-58001]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(ELLIPSE, x, y, w, h) or createShape(ELLIPSE, x, y, w, h, mode)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(ELLIPSE, x, y, w, h) or createShape(ELLIPSE, x, y, w, h, mode)\");",
      "info" : "ThrowStatement[57298-57415]:ThrowStatement[57876-57993]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[57430-57467]:ReturnStatement[58008-58045]"
    }, {
      "left" : "if (kind == ARC)",
      "right" : "if (kind == ARC)",
      "info" : "IfStatement[57480-58336]:IfStatement[58058-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57497-57684]:Block[58075-58262]"
    }, {
      "left" : "if (len != 6 && len != 7)",
      "right" : "if (len != 6 && len != 7)",
      "info" : "IfStatement[57505-57633]:IfStatement[58083-58211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57531-57633]:Block[58109-58211]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(ARC, x, y, w, h, start, stop)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(ARC, x, y, w, h, start, stop)\");",
      "info" : "ThrowStatement[57541-57625]:ThrowStatement[58119-58203]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[57640-57677]:ReturnStatement[58218-58255]"
    }, {
      "left" : "if (kind == BOX)",
      "right" : "if (kind == BOX)",
      "info" : "IfStatement[57690-58336]:IfStatement[58268-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57707-58032]:Block[58285-58610]"
    }, {
      "left" : "if (!is3D())",
      "right" : "if (!is3D())",
      "info" : "IfStatement[57715-57981]:IfStatement[58293-58559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57728-57824]:Block[58306-58402]"
    }, {
      "left" : "throw new IllegalArgumentException(\"createShape(BOX) is not supported in 2D\");",
      "right" : "throw new IllegalArgumentException(\"createShape(BOX) is not supported in 2D\");",
      "info" : "ThrowStatement[57738-57816]:ThrowStatement[58316-58394]"
    }, {
      "left" : "if (len != 1 && len != 3)",
      "right" : "if (len != 1 && len != 3)",
      "info" : "IfStatement[57830-57981]:IfStatement[58408-58559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57856-57981]:Block[58434-58559]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(BOX, size) or createShape(BOX, width, height, depth)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(BOX, size) or createShape(BOX, width, height, depth)\");",
      "info" : "ThrowStatement[57866-57973]:ThrowStatement[58444-58551]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[57988-58025]:ReturnStatement[58566-58603]"
    }, {
      "left" : "if (kind == SPHERE)",
      "right" : "if (kind == SPHERE)",
      "info" : "IfStatement[58038-58336]:IfStatement[58616-58914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58058-58336]:Block[58636-58914]"
    }, {
      "left" : "if (!is3D())",
      "right" : "if (!is3D())",
      "info" : "IfStatement[58066-58286]:IfStatement[58644-58864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58079-58178]:Block[58657-58756]"
    }, {
      "left" : "throw new IllegalArgumentException(\"createShape(SPHERE) is not supported in 2D\");",
      "right" : "throw new IllegalArgumentException(\"createShape(SPHERE) is not supported in 2D\");",
      "info" : "ThrowStatement[58089-58170]:ThrowStatement[58667-58748]"
    }, {
      "left" : "if (len != 1)",
      "right" : "if (len != 1)",
      "info" : "IfStatement[58184-58286]:IfStatement[58762-58864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58198-58286]:Block[58776-58864]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Use createShape(SPHERE, radius)\");",
      "right" : "throw new IllegalArgumentException(\"Use createShape(SPHERE, radius)\");",
      "info" : "ThrowStatement[58208-58278]:ThrowStatement[58786-58856]"
    }, {
      "left" : "return createShapePrimitive(kind, p);",
      "right" : "return createShapePrimitive(kind, p);",
      "info" : "ReturnStatement[58293-58330]:ReturnStatement[58871-58908]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Unknown shape type passed to createShape()\");",
      "right" : "throw new IllegalArgumentException(\"Unknown shape type passed to createShape()\");",
      "info" : "ThrowStatement[58341-58422]:ThrowStatement[58919-59000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58567-58671]:Block[59145-59249]"
    }, {
      "left" : "return new PShape(this, kind, p);",
      "right" : "return new PShape(this, kind, p);",
      "info" : "ReturnStatement[58634-58667]:ReturnStatement[59212-59245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59077-59137]:Block[59655-59715]"
    }, {
      "left" : "showMissingWarning(\"loadShader\");",
      "right" : "showMissingWarning(\"loadShader\");",
      "info" : "ExpressionStatement[59083-59116]:ExpressionStatement[59661-59694]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[59121-59133]:ReturnStatement[59699-59711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59274-59334]:Block[59852-59912]"
    }, {
      "left" : "showMissingWarning(\"loadShader\");",
      "right" : "showMissingWarning(\"loadShader\");",
      "info" : "ExpressionStatement[59280-59313]:ExpressionStatement[59858-59891]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[59318-59330]:ReturnStatement[59896-59908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59628-59667]:Block[60206-60245]"
    }, {
      "left" : "showMissingWarning(\"shader\");",
      "right" : "showMissingWarning(\"shader\");",
      "info" : "ExpressionStatement[59634-59663]:ExpressionStatement[60212-60241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59797-59836]:Block[60375-60414]"
    }, {
      "left" : "showMissingWarning(\"shader\");",
      "right" : "showMissingWarning(\"shader\");",
      "info" : "ExpressionStatement[59803-59832]:ExpressionStatement[60381-60410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60087-60131]:Block[60665-60709]"
    }, {
      "left" : "showMissingWarning(\"resetShader\");",
      "right" : "showMissingWarning(\"resetShader\");",
      "info" : "ExpressionStatement[60093-60127]:ExpressionStatement[60671-60705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60250-60294]:Block[60828-60872]"
    }, {
      "left" : "showMissingWarning(\"resetShader\");",
      "right" : "showMissingWarning(\"resetShader\");",
      "info" : "ExpressionStatement[60256-60290]:ExpressionStatement[60834-60868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60394-60433]:Block[60972-61011]"
    }, {
      "left" : "showMissingWarning(\"filter\");",
      "right" : "showMissingWarning(\"filter\");",
      "info" : "ExpressionStatement[60400-60429]:ExpressionStatement[60978-61007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60822-61535]:Block[61400-62113]"
    }, {
      "left" : "if (imageMode == CORNER)",
      "right" : "if (imageMode == CORNER)",
      "info" : "IfStatement[60828-61531]:IfStatement[61406-62109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60853-61055]:Block[61431-61633]"
    }, {
      "left" : "if (c < 0)",
      "right" : "if (c < 0)",
      "info" : "IfStatement[60861-60932]:IfStatement[61439-61510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60872-60932]:Block[61450-61510]"
    }, {
      "left" : "a += c;",
      "right" : "a += c;",
      "info" : "ExpressionStatement[60909-60916]:ExpressionStatement[61487-61494]"
    }, {
      "left" : "c = -c;",
      "right" : "c = -c;",
      "info" : "ExpressionStatement[60917-60924]:ExpressionStatement[61495-61502]"
    }, {
      "left" : "if (d < 0)",
      "right" : "if (d < 0)",
      "info" : "IfStatement[60939-61011]:IfStatement[61517-61589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60950-61011]:Block[61528-61589]"
    }, {
      "left" : "b += d;",
      "right" : "b += d;",
      "info" : "ExpressionStatement[60988-60995]:ExpressionStatement[61566-61573]"
    }, {
      "left" : "d = -d;",
      "right" : "d = -d;",
      "info" : "ExpressionStatement[60996-61003]:ExpressionStatement[61574-61581]"
    }, {
      "left" : "clipImpl(a, b, a + c, b + d);",
      "right" : "clipImpl(a, b, a + c, b + d);",
      "info" : "ExpressionStatement[61019-61048]:ExpressionStatement[61597-61626]"
    }, {
      "left" : "if (imageMode == CORNERS)",
      "right" : "if (imageMode == CORNERS)",
      "info" : "IfStatement[61061-61531]:IfStatement[61639-62109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61087-61316]:Block[61665-61894]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[61095-61184]:IfStatement[61673-61762]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61106-61184]:Block[61684-61762]"
    }, {
      "left" : "float temp = a;",
      "right" : "float temp = a;",
      "info" : "VariableDeclarationStatement[61144-61159]:VariableDeclarationStatement[61722-61737]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[61160-61166]:ExpressionStatement[61738-61744]"
    }, {
      "left" : "c = temp;",
      "right" : "c = temp;",
      "info" : "ExpressionStatement[61167-61176]:ExpressionStatement[61745-61754]"
    }, {
      "left" : "if (d < b)",
      "right" : "if (d < b)",
      "info" : "IfStatement[61191-61280]:IfStatement[61769-61858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61202-61280]:Block[61780-61858]"
    }, {
      "left" : "float temp = b;",
      "right" : "float temp = b;",
      "info" : "VariableDeclarationStatement[61240-61255]:VariableDeclarationStatement[61818-61833]"
    }, {
      "left" : "b = d;",
      "right" : "b = d;",
      "info" : "ExpressionStatement[61256-61262]:ExpressionStatement[61834-61840]"
    }, {
      "left" : "d = temp;",
      "right" : "d = temp;",
      "info" : "ExpressionStatement[61263-61272]:ExpressionStatement[61841-61850]"
    }, {
      "left" : "clipImpl(a, b, c, d);",
      "right" : "clipImpl(a, b, c, d);",
      "info" : "ExpressionStatement[61288-61309]:ExpressionStatement[61866-61887]"
    }, {
      "left" : "if (imageMode == CENTER)",
      "right" : "if (imageMode == CENTER)",
      "info" : "IfStatement[61322-61531]:IfStatement[61900-62109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61347-61531]:Block[61925-62109]"
    }, {
      "left" : "if (c < 0)",
      "right" : "if (c < 0)",
      "info" : "IfStatement[61389-61407]:IfStatement[61967-61985]"
    }, {
      "left" : "c = -c;",
      "right" : "c = -c;",
      "info" : "ExpressionStatement[61400-61407]:ExpressionStatement[61978-61985]"
    }, {
      "left" : "if (d < 0)",
      "right" : "if (d < 0)",
      "info" : "IfStatement[61414-61432]:IfStatement[61992-62010]"
    }, {
      "left" : "d = -d;",
      "right" : "d = -d;",
      "info" : "ExpressionStatement[61425-61432]:ExpressionStatement[62003-62010]"
    }, {
      "left" : "float x1 = a - c/2;",
      "right" : "float x1 = a - c/2;",
      "info" : "VariableDeclarationStatement[61439-61458]:VariableDeclarationStatement[62017-62036]"
    }, {
      "left" : "float y1 = b - d/2;",
      "right" : "float y1 = b - d/2;",
      "info" : "VariableDeclarationStatement[61465-61484]:VariableDeclarationStatement[62043-62062]"
    }, {
      "left" : "clipImpl(x1, y1, x1 + c, y1 + d);",
      "right" : "clipImpl(x1, y1, x1 + c, y1 + d);",
      "info" : "ExpressionStatement[61492-61525]:ExpressionStatement[62070-62103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61604-61641]:Block[62182-62219]"
    }, {
      "left" : "showMissingWarning(\"clip\");",
      "right" : "showMissingWarning(\"clip\");",
      "info" : "ExpressionStatement[61610-61637]:ExpressionStatement[62188-62215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61708-61747]:Block[62286-62325]"
    }, {
      "left" : "showMissingWarning(\"noClip\");",
      "right" : "showMissingWarning(\"noClip\");",
      "info" : "ExpressionStatement[61714-61743]:ExpressionStatement[62292-62321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62115-62168]:Block[62693-62746]"
    }, {
      "left" : "this.blendMode = mode;",
      "right" : "this.blendMode = mode;",
      "info" : "ExpressionStatement[62121-62143]:ExpressionStatement[62699-62721]"
    }, {
      "left" : "blendModeImpl();",
      "right" : "blendModeImpl();",
      "info" : "ExpressionStatement[62148-62164]:ExpressionStatement[62726-62742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62204-62284]:Block[62782-62862]"
    }, {
      "left" : "if (blendMode != BLEND)",
      "right" : "if (blendMode != BLEND)",
      "info" : "IfStatement[62210-62280]:IfStatement[62788-62858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62234-62280]:Block[62812-62858]"
    }, {
      "left" : "showMissingWarning(\"blendMode\");",
      "right" : "showMissingWarning(\"blendMode\");",
      "info" : "ExpressionStatement[62242-62274]:ExpressionStatement[62820-62852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62427-62475]:Block[63005-63053]"
    }, {
      "left" : "bezierVertexCheck(shape, vertexCount);",
      "right" : "bezierVertexCheck(shape, vertexCount);",
      "info" : "ExpressionStatement[62433-62471]:ExpressionStatement[63011-63049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62541-62949]:Block[63119-63527]"
    }, {
      "left" : "if (shape == 0 || shape != POLYGON)",
      "right" : "if (shape == 0 || shape != POLYGON)",
      "info" : "IfStatement[62547-62757]:IfStatement[63125-63335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62583-62757]:Block[63161-63335]"
    }, {
      "left" : "throw new RuntimeException(\"beginShape() or beginShape(POLYGON) \" +\n                                 \"must be used before bezierVertex() or quadraticVertex()\");",
      "right" : "throw new RuntimeException(\"beginShape() or beginShape(POLYGON) \" +\n                                 \"must be used before bezierVertex() or quadraticVertex()\");",
      "info" : "ThrowStatement[62591-62751]:ThrowStatement[63169-63329]"
    }, {
      "left" : "if (vertexCount == 0)",
      "right" : "if (vertexCount == 0)",
      "info" : "IfStatement[62762-62945]:IfStatement[63340-63523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62784-62945]:Block[63362-63523]"
    }, {
      "left" : "throw new RuntimeException(\"vertex() must be used at least once \" +\n                                 \"before bezierVertex() or quadraticVertex()\");",
      "right" : "throw new RuntimeException(\"vertex() must be used at least once \" +\n                                 \"before bezierVertex() or quadraticVertex()\");",
      "info" : "ThrowStatement[62792-62939]:ThrowStatement[63370-63517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63093-63910]:Block[63671-64488]"
    }, {
      "left" : "bezierInitCheck();",
      "right" : "bezierInitCheck();",
      "info" : "ExpressionStatement[63099-63117]:ExpressionStatement[63677-63695]"
    }, {
      "left" : "bezierVertexCheck();",
      "right" : "bezierVertexCheck();",
      "info" : "ExpressionStatement[63122-63142]:ExpressionStatement[63700-63720]"
    }, {
      "left" : "PMatrix3D draw = bezierDrawMatrix;",
      "right" : "PMatrix3D draw = bezierDrawMatrix;",
      "info" : "VariableDeclarationStatement[63147-63181]:VariableDeclarationStatement[63725-63759]"
    }, {
      "left" : "float[] prev = vertices[vertexCount-1];",
      "right" : "float[] prev = vertices[vertexCount-1];",
      "info" : "VariableDeclarationStatement[63187-63226]:VariableDeclarationStatement[63765-63804]"
    }, {
      "left" : "float x1 = prev[X];",
      "right" : "float x1 = prev[X];",
      "info" : "VariableDeclarationStatement[63231-63250]:VariableDeclarationStatement[63809-63828]"
    }, {
      "left" : "float y1 = prev[Y];",
      "right" : "float y1 = prev[Y];",
      "info" : "VariableDeclarationStatement[63255-63274]:VariableDeclarationStatement[63833-63852]"
    }, {
      "left" : "float xplot1 = draw.m10*x1 + draw.m11*x2 + draw.m12*x3 + draw.m13*x4;",
      "right" : "float xplot1 = draw.m10*x1 + draw.m11*x2 + draw.m12*x3 + draw.m13*x4;",
      "info" : "VariableDeclarationStatement[63280-63349]:VariableDeclarationStatement[63858-63927]"
    }, {
      "left" : "float xplot2 = draw.m20*x1 + draw.m21*x2 + draw.m22*x3 + draw.m23*x4;",
      "right" : "float xplot2 = draw.m20*x1 + draw.m21*x2 + draw.m22*x3 + draw.m23*x4;",
      "info" : "VariableDeclarationStatement[63354-63423]:VariableDeclarationStatement[63932-64001]"
    }, {
      "left" : "float xplot3 = draw.m30*x1 + draw.m31*x2 + draw.m32*x3 + draw.m33*x4;",
      "right" : "float xplot3 = draw.m30*x1 + draw.m31*x2 + draw.m32*x3 + draw.m33*x4;",
      "info" : "VariableDeclarationStatement[63428-63497]:VariableDeclarationStatement[64006-64075]"
    }, {
      "left" : "float yplot1 = draw.m10*y1 + draw.m11*y2 + draw.m12*y3 + draw.m13*y4;",
      "right" : "float yplot1 = draw.m10*y1 + draw.m11*y2 + draw.m12*y3 + draw.m13*y4;",
      "info" : "VariableDeclarationStatement[63503-63572]:VariableDeclarationStatement[64081-64150]"
    }, {
      "left" : "float yplot2 = draw.m20*y1 + draw.m21*y2 + draw.m22*y3 + draw.m23*y4;",
      "right" : "float yplot2 = draw.m20*y1 + draw.m21*y2 + draw.m22*y3 + draw.m23*y4;",
      "info" : "VariableDeclarationStatement[63577-63646]:VariableDeclarationStatement[64155-64224]"
    }, {
      "left" : "float yplot3 = draw.m30*y1 + draw.m31*y2 + draw.m32*y3 + draw.m33*y4;",
      "right" : "float yplot3 = draw.m30*y1 + draw.m31*y2 + draw.m32*y3 + draw.m33*y4;",
      "info" : "VariableDeclarationStatement[63651-63720]:VariableDeclarationStatement[64229-64298]"
    }, {
      "left" : "for (int j = 0; j < bezierDetail; j++)",
      "right" : "for (int j = 0; j < bezierDetail; j++)",
      "info" : "ForStatement[63726-63906]:ForStatement[64304-64484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63765-63906]:Block[64343-64484]"
    }, {
      "left" : "x1 += xplot1;",
      "right" : "x1 += xplot1;",
      "info" : "ExpressionStatement[63773-63786]:ExpressionStatement[64351-64364]"
    }, {
      "left" : "xplot1 += xplot2;",
      "right" : "xplot1 += xplot2;",
      "info" : "ExpressionStatement[63787-63804]:ExpressionStatement[64365-64382]"
    }, {
      "left" : "xplot2 += xplot3;",
      "right" : "xplot2 += xplot3;",
      "info" : "ExpressionStatement[63805-63822]:ExpressionStatement[64383-64400]"
    }, {
      "left" : "y1 += yplot1;",
      "right" : "y1 += yplot1;",
      "info" : "ExpressionStatement[63829-63842]:ExpressionStatement[64407-64420]"
    }, {
      "left" : "yplot1 += yplot2;",
      "right" : "yplot1 += yplot2;",
      "info" : "ExpressionStatement[63843-63860]:ExpressionStatement[64421-64438]"
    }, {
      "left" : "yplot2 += yplot3;",
      "right" : "yplot2 += yplot3;",
      "info" : "ExpressionStatement[63861-63878]:ExpressionStatement[64439-64456]"
    }, {
      "left" : "vertex(x1, y1);",
      "right" : "vertex(x1, y1);",
      "info" : "ExpressionStatement[63885-63900]:ExpressionStatement[64463-64478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65655-66779]:Block[66233-67357]"
    }, {
      "left" : "bezierInitCheck();",
      "right" : "bezierInitCheck();",
      "info" : "ExpressionStatement[65661-65679]:ExpressionStatement[66239-66257]"
    }, {
      "left" : "bezierVertexCheck();",
      "right" : "bezierVertexCheck();",
      "info" : "ExpressionStatement[65684-65704]:ExpressionStatement[66262-66282]"
    }, {
      "left" : "PMatrix3D draw = bezierDrawMatrix;",
      "right" : "PMatrix3D draw = bezierDrawMatrix;",
      "info" : "VariableDeclarationStatement[65709-65743]:VariableDeclarationStatement[66287-66321]"
    }, {
      "left" : "float[] prev = vertices[vertexCount-1];",
      "right" : "float[] prev = vertices[vertexCount-1];",
      "info" : "VariableDeclarationStatement[65749-65788]:VariableDeclarationStatement[66327-66366]"
    }, {
      "left" : "float x1 = prev[X];",
      "right" : "float x1 = prev[X];",
      "info" : "VariableDeclarationStatement[65793-65812]:VariableDeclarationStatement[66371-66390]"
    }, {
      "left" : "float y1 = prev[Y];",
      "right" : "float y1 = prev[Y];",
      "info" : "VariableDeclarationStatement[65817-65836]:VariableDeclarationStatement[66395-66414]"
    }, {
      "left" : "float z1 = prev[Z];",
      "right" : "float z1 = prev[Z];",
      "info" : "VariableDeclarationStatement[65841-65860]:VariableDeclarationStatement[66419-66438]"
    }, {
      "left" : "float xplot1 = draw.m10*x1 + draw.m11*x2 + draw.m12*x3 + draw.m13*x4;",
      "right" : "float xplot1 = draw.m10*x1 + draw.m11*x2 + draw.m12*x3 + draw.m13*x4;",
      "info" : "VariableDeclarationStatement[65866-65935]:VariableDeclarationStatement[66444-66513]"
    }, {
      "left" : "float xplot2 = draw.m20*x1 + draw.m21*x2 + draw.m22*x3 + draw.m23*x4;",
      "right" : "float xplot2 = draw.m20*x1 + draw.m21*x2 + draw.m22*x3 + draw.m23*x4;",
      "info" : "VariableDeclarationStatement[65940-66009]:VariableDeclarationStatement[66518-66587]"
    }, {
      "left" : "float xplot3 = draw.m30*x1 + draw.m31*x2 + draw.m32*x3 + draw.m33*x4;",
      "right" : "float xplot3 = draw.m30*x1 + draw.m31*x2 + draw.m32*x3 + draw.m33*x4;",
      "info" : "VariableDeclarationStatement[66014-66083]:VariableDeclarationStatement[66592-66661]"
    }, {
      "left" : "float yplot1 = draw.m10*y1 + draw.m11*y2 + draw.m12*y3 + draw.m13*y4;",
      "right" : "float yplot1 = draw.m10*y1 + draw.m11*y2 + draw.m12*y3 + draw.m13*y4;",
      "info" : "VariableDeclarationStatement[66089-66158]:VariableDeclarationStatement[66667-66736]"
    }, {
      "left" : "float yplot2 = draw.m20*y1 + draw.m21*y2 + draw.m22*y3 + draw.m23*y4;",
      "right" : "float yplot2 = draw.m20*y1 + draw.m21*y2 + draw.m22*y3 + draw.m23*y4;",
      "info" : "VariableDeclarationStatement[66163-66232]:VariableDeclarationStatement[66741-66810]"
    }, {
      "left" : "float yplot3 = draw.m30*y1 + draw.m31*y2 + draw.m32*y3 + draw.m33*y4;",
      "right" : "float yplot3 = draw.m30*y1 + draw.m31*y2 + draw.m32*y3 + draw.m33*y4;",
      "info" : "VariableDeclarationStatement[66237-66306]:VariableDeclarationStatement[66815-66884]"
    }, {
      "left" : "float zplot1 = draw.m10*z1 + draw.m11*z2 + draw.m12*z3 + draw.m13*z4;",
      "right" : "float zplot1 = draw.m10*z1 + draw.m11*z2 + draw.m12*z3 + draw.m13*z4;",
      "info" : "VariableDeclarationStatement[66312-66381]:VariableDeclarationStatement[66890-66959]"
    }, {
      "left" : "float zplot2 = draw.m20*z1 + draw.m21*z2 + draw.m22*z3 + draw.m23*z4;",
      "right" : "float zplot2 = draw.m20*z1 + draw.m21*z2 + draw.m22*z3 + draw.m23*z4;",
      "info" : "VariableDeclarationStatement[66386-66455]:VariableDeclarationStatement[66964-67033]"
    }, {
      "left" : "float zplot3 = draw.m30*z1 + draw.m31*z2 + draw.m32*z3 + draw.m33*z4;",
      "right" : "float zplot3 = draw.m30*z1 + draw.m31*z2 + draw.m32*z3 + draw.m33*z4;",
      "info" : "VariableDeclarationStatement[66460-66529]:VariableDeclarationStatement[67038-67107]"
    }, {
      "left" : "for (int j = 0; j < bezierDetail; j++)",
      "right" : "for (int j = 0; j < bezierDetail; j++)",
      "info" : "ForStatement[66535-66775]:ForStatement[67113-67353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66574-66775]:Block[67152-67353]"
    }, {
      "left" : "x1 += xplot1;",
      "right" : "x1 += xplot1;",
      "info" : "ExpressionStatement[66582-66595]:ExpressionStatement[67160-67173]"
    }, {
      "left" : "xplot1 += xplot2;",
      "right" : "xplot1 += xplot2;",
      "info" : "ExpressionStatement[66596-66613]:ExpressionStatement[67174-67191]"
    }, {
      "left" : "xplot2 += xplot3;",
      "right" : "xplot2 += xplot3;",
      "info" : "ExpressionStatement[66614-66631]:ExpressionStatement[67192-67209]"
    }, {
      "left" : "y1 += yplot1;",
      "right" : "y1 += yplot1;",
      "info" : "ExpressionStatement[66638-66651]:ExpressionStatement[67216-67229]"
    }, {
      "left" : "yplot1 += yplot2;",
      "right" : "yplot1 += yplot2;",
      "info" : "ExpressionStatement[66652-66669]:ExpressionStatement[67230-67247]"
    }, {
      "left" : "yplot2 += yplot3;",
      "right" : "yplot2 += yplot3;",
      "info" : "ExpressionStatement[66670-66687]:ExpressionStatement[67248-67265]"
    }, {
      "left" : "z1 += zplot1;",
      "right" : "z1 += zplot1;",
      "info" : "ExpressionStatement[66694-66707]:ExpressionStatement[67272-67285]"
    }, {
      "left" : "zplot1 += zplot2;",
      "right" : "zplot1 += zplot2;",
      "info" : "ExpressionStatement[66708-66725]:ExpressionStatement[67286-67303]"
    }, {
      "left" : "zplot2 += zplot3;",
      "right" : "zplot2 += zplot3;",
      "info" : "ExpressionStatement[66726-66743]:ExpressionStatement[67304-67321]"
    }, {
      "left" : "vertex(x1, y1, z1);",
      "right" : "vertex(x1, y1, z1);",
      "info" : "ExpressionStatement[66750-66769]:ExpressionStatement[67328-67347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67430-67680]:Block[68008-68258]"
    }, {
      "left" : "float[] prev = vertices[vertexCount-1];",
      "right" : "float[] prev = vertices[vertexCount-1];",
      "info" : "VariableDeclarationStatement[67436-67475]:VariableDeclarationStatement[68014-68053]"
    }, {
      "left" : "float x1 = prev[X];",
      "right" : "float x1 = prev[X];",
      "info" : "VariableDeclarationStatement[67480-67499]:VariableDeclarationStatement[68058-68077]"
    }, {
      "left" : "float y1 = prev[Y];",
      "right" : "float y1 = prev[Y];",
      "info" : "VariableDeclarationStatement[67504-67523]:VariableDeclarationStatement[68082-68101]"
    }, {
      "left" : "bezierVertex(x1 + ((cx-x1)*2/3.0f), y1 + ((cy-y1)*2/3.0f),\n                 x3 + ((cx-x3)*2/3.0f), y3 + ((cy-y3)*2/3.0f),\n                 x3, y3);",
      "right" : "bezierVertex(x1 + ((cx-x1)*2/3.0f), y1 + ((cy-y1)*2/3.0f),\n                 x3 + ((cx-x3)*2/3.0f), y3 + ((cy-y3)*2/3.0f),\n                 x3, y3);",
      "info" : "ExpressionStatement[67529-67676]:ExpressionStatement[68107-68254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67919-68243]:Block[68497-68821]"
    }, {
      "left" : "float[] prev = vertices[vertexCount-1];",
      "right" : "float[] prev = vertices[vertexCount-1];",
      "info" : "VariableDeclarationStatement[67925-67964]:VariableDeclarationStatement[68503-68542]"
    }, {
      "left" : "float x1 = prev[X];",
      "right" : "float x1 = prev[X];",
      "info" : "VariableDeclarationStatement[67969-67988]:VariableDeclarationStatement[68547-68566]"
    }, {
      "left" : "float y1 = prev[Y];",
      "right" : "float y1 = prev[Y];",
      "info" : "VariableDeclarationStatement[67993-68012]:VariableDeclarationStatement[68571-68590]"
    }, {
      "left" : "float z1 = prev[Z];",
      "right" : "float z1 = prev[Z];",
      "info" : "VariableDeclarationStatement[68017-68036]:VariableDeclarationStatement[68595-68614]"
    }, {
      "left" : "bezierVertex(x1 + ((cx-x1)*2/3.0f), y1 + ((cy-y1)*2/3.0f), z1 + ((cz-z1)*2/3.0f),\n                 x3 + ((cx-x3)*2/3.0f), y3 + ((cy-y3)*2/3.0f), z3 + ((cz-z3)*2/3.0f),\n                 x3, y3, z3);",
      "right" : "bezierVertex(x1 + ((cx-x1)*2/3.0f), y1 + ((cy-y1)*2/3.0f), z1 + ((cz-z1)*2/3.0f),\n                 x3 + ((cx-x3)*2/3.0f), y3 + ((cy-y3)*2/3.0f), z3 + ((cz-z3)*2/3.0f),\n                 x3, y3, z3);",
      "info" : "ExpressionStatement[68042-68239]:ExpressionStatement[68620-68817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68281-68315]:Block[68859-68893]"
    }, {
      "left" : "curveVertexCheck(shape);",
      "right" : "curveVertexCheck(shape);",
      "info" : "ExpressionStatement[68287-68311]:ExpressionStatement[68865-68889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68526-69157]:Block[69104-69735]"
    }, {
      "left" : "if (shape != POLYGON)",
      "right" : "if (shape != POLYGON)",
      "info" : "IfStatement[68532-68706]:IfStatement[69110-69284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68554-68706]:Block[69132-69284]"
    }, {
      "left" : "throw new RuntimeException(\"You must use beginShape() or \" +\n                                 \"beginShape(POLYGON) before curveVertex()\");",
      "right" : "throw new RuntimeException(\"You must use beginShape() or \" +\n                                 \"beginShape(POLYGON) before curveVertex()\");",
      "info" : "ThrowStatement[68562-68700]:ThrowStatement[69140-69278]"
    }, {
      "left" : "if (curveVertices == null)",
      "right" : "if (curveVertices == null)",
      "info" : "IfStatement[68768-68843]:IfStatement[69346-69421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68795-68843]:Block[69373-69421]"
    }, {
      "left" : "curveVertices = new float[128][3];",
      "right" : "curveVertices = new float[128][3];",
      "info" : "ExpressionStatement[68803-68837]:ExpressionStatement[69381-69415]"
    }, {
      "left" : "if (curveVertexCount == curveVertices.length)",
      "right" : "if (curveVertexCount == curveVertices.length)",
      "info" : "IfStatement[68849-69131]:IfStatement[69427-69709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68895-69131]:Block[69473-69709]"
    }, {
      "left" : "float[][] temp = new float[curveVertexCount << 1][3];",
      "right" : "float[][] temp = new float[curveVertexCount << 1][3];",
      "info" : "VariableDeclarationStatement[68975-69028]:VariableDeclarationStatement[69553-69606]"
    }, {
      "left" : "System.arraycopy(curveVertices, 0, temp, 0, curveVertexCount);",
      "right" : "System.arraycopy(curveVertices, 0, temp, 0, curveVertexCount);",
      "info" : "ExpressionStatement[69035-69097]:ExpressionStatement[69613-69675]"
    }, {
      "left" : "curveVertices = temp;",
      "right" : "curveVertices = temp;",
      "info" : "ExpressionStatement[69104-69125]:ExpressionStatement[69682-69703]"
    }, {
      "left" : "curveInitCheck();",
      "right" : "curveInitCheck();",
      "info" : "ExpressionStatement[69136-69153]:ExpressionStatement[69714-69731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70614-71352]:Block[71192-71930]"
    }, {
      "left" : "curveVertexCheck();",
      "right" : "curveVertexCheck();",
      "info" : "ExpressionStatement[70620-70639]:ExpressionStatement[71198-71217]"
    }, {
      "left" : "float[] vertex = curveVertices[curveVertexCount];",
      "right" : "float[] vertex = curveVertices[curveVertexCount];",
      "info" : "VariableDeclarationStatement[70644-70693]:VariableDeclarationStatement[71222-71271]"
    }, {
      "left" : "vertex[X] = x;",
      "right" : "vertex[X] = x;",
      "info" : "ExpressionStatement[70698-70712]:ExpressionStatement[71276-71290]"
    }, {
      "left" : "vertex[Y] = y;",
      "right" : "vertex[Y] = y;",
      "info" : "ExpressionStatement[70717-70731]:ExpressionStatement[71295-71309]"
    }, {
      "left" : "curveVertexCount++;",
      "right" : "curveVertexCount++;",
      "info" : "ExpressionStatement[70736-70755]:ExpressionStatement[71314-71333]"
    }, {
      "left" : "if (curveVertexCount > 3)",
      "right" : "if (curveVertexCount > 3)",
      "info" : "IfStatement[70810-71348]:IfStatement[71388-71926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70836-71348]:Block[71414-71926]"
    }, {
      "left" : "curveVertexSegment(curveVertices[curveVertexCount-4][X],\n                         curveVertices[curveVertexCount-4][Y],\n                         curveVertices[curveVertexCount-3][X],\n                         curveVertices[curveVertexCount-3][Y],\n                         curveVertices[curveVertexCount-2][X],\n                         curveVertices[curveVertexCount-2][Y],\n                         curveVertices[curveVertexCount-1][X],\n                         curveVertices[curveVertexCount-1][Y]);",
      "right" : "curveVertexSegment(curveVertices[curveVertexCount-4][X],\n                         curveVertices[curveVertexCount-4][Y],\n                         curveVertices[curveVertexCount-3][X],\n                         curveVertices[curveVertexCount-3][Y],\n                         curveVertices[curveVertexCount-2][X],\n                         curveVertices[curveVertexCount-2][Y],\n                         curveVertices[curveVertexCount-1][X],\n                         curveVertices[curveVertexCount-1][Y]);",
      "info" : "ExpressionStatement[70844-71342]:ExpressionStatement[71422-71920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71464-72473]:Block[72042-73051]"
    }, {
      "left" : "curveVertexCheck();",
      "right" : "curveVertexCheck();",
      "info" : "ExpressionStatement[71470-71489]:ExpressionStatement[72048-72067]"
    }, {
      "left" : "float[] vertex = curveVertices[curveVertexCount];",
      "right" : "float[] vertex = curveVertices[curveVertexCount];",
      "info" : "VariableDeclarationStatement[71494-71543]:VariableDeclarationStatement[72072-72121]"
    }, {
      "left" : "vertex[X] = x;",
      "right" : "vertex[X] = x;",
      "info" : "ExpressionStatement[71548-71562]:ExpressionStatement[72126-72140]"
    }, {
      "left" : "vertex[Y] = y;",
      "right" : "vertex[Y] = y;",
      "info" : "ExpressionStatement[71567-71581]:ExpressionStatement[72145-72159]"
    }, {
      "left" : "vertex[Z] = z;",
      "right" : "vertex[Z] = z;",
      "info" : "ExpressionStatement[71586-71600]:ExpressionStatement[72164-72178]"
    }, {
      "left" : "curveVertexCount++;",
      "right" : "curveVertexCount++;",
      "info" : "ExpressionStatement[71605-71624]:ExpressionStatement[72183-72202]"
    }, {
      "left" : "if (curveVertexCount > 3)",
      "right" : "if (curveVertexCount > 3)",
      "info" : "IfStatement[71679-72469]:IfStatement[72257-73047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71705-72469]:Block[72283-73047]"
    }, {
      "left" : "curveVertexSegment(curveVertices[curveVertexCount-4][X],\n                         curveVertices[curveVertexCount-4][Y],\n                         curveVertices[curveVertexCount-4][Z],\n                         curveVertices[curveVertexCount-3][X],\n                         curveVertices[curveVertexCount-3][Y],\n                         curveVertices[curveVertexCount-3][Z],\n                         curveVertices[curveVertexCount-2][X],\n                         curveVertices[curveVertexCount-2][Y],\n                         curveVertices[curveVertexCount-2][Z],\n                         curveVertices[curveVertexCount-1][X],\n                         curveVertices[curveVertexCount-1][Y],\n                         curveVertices[curveVertexCount-1][Z]);",
      "right" : "curveVertexSegment(curveVertices[curveVertexCount-4][X],\n                         curveVertices[curveVertexCount-4][Y],\n                         curveVertices[curveVertexCount-4][Z],\n                         curveVertices[curveVertexCount-3][X],\n                         curveVertices[curveVertexCount-3][Y],\n                         curveVertices[curveVertexCount-3][Z],\n                         curveVertices[curveVertexCount-2][X],\n                         curveVertices[curveVertexCount-2][Y],\n                         curveVertices[curveVertexCount-2][Z],\n                         curveVertices[curveVertexCount-1][X],\n                         curveVertices[curveVertexCount-1][Y],\n                         curveVertices[curveVertexCount-1][Z]);",
      "info" : "ExpressionStatement[71713-72463]:ExpressionStatement[72291-73041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72860-73725]:Block[73438-74303]"
    }, {
      "left" : "float x0 = x2;",
      "right" : "float x0 = x2;",
      "info" : "VariableDeclarationStatement[72866-72880]:VariableDeclarationStatement[73444-73458]"
    }, {
      "left" : "float y0 = y2;",
      "right" : "float y0 = y2;",
      "info" : "VariableDeclarationStatement[72885-72899]:VariableDeclarationStatement[73463-73477]"
    }, {
      "left" : "PMatrix3D draw = curveDrawMatrix;",
      "right" : "PMatrix3D draw = curveDrawMatrix;",
      "info" : "VariableDeclarationStatement[72905-72938]:VariableDeclarationStatement[73483-73516]"
    }, {
      "left" : "float xplot1 = draw.m10*x1 + draw.m11*x2 + draw.m12*x3 + draw.m13*x4;",
      "right" : "float xplot1 = draw.m10*x1 + draw.m11*x2 + draw.m12*x3 + draw.m13*x4;",
      "info" : "VariableDeclarationStatement[72944-73013]:VariableDeclarationStatement[73522-73591]"
    }, {
      "left" : "float xplot2 = draw.m20*x1 + draw.m21*x2 + draw.m22*x3 + draw.m23*x4;",
      "right" : "float xplot2 = draw.m20*x1 + draw.m21*x2 + draw.m22*x3 + draw.m23*x4;",
      "info" : "VariableDeclarationStatement[73018-73087]:VariableDeclarationStatement[73596-73665]"
    }, {
      "left" : "float xplot3 = draw.m30*x1 + draw.m31*x2 + draw.m32*x3 + draw.m33*x4;",
      "right" : "float xplot3 = draw.m30*x1 + draw.m31*x2 + draw.m32*x3 + draw.m33*x4;",
      "info" : "VariableDeclarationStatement[73092-73161]:VariableDeclarationStatement[73670-73739]"
    }, {
      "left" : "float yplot1 = draw.m10*y1 + draw.m11*y2 + draw.m12*y3 + draw.m13*y4;",
      "right" : "float yplot1 = draw.m10*y1 + draw.m11*y2 + draw.m12*y3 + draw.m13*y4;",
      "info" : "VariableDeclarationStatement[73167-73236]:VariableDeclarationStatement[73745-73814]"
    }, {
      "left" : "float yplot2 = draw.m20*y1 + draw.m21*y2 + draw.m22*y3 + draw.m23*y4;",
      "right" : "float yplot2 = draw.m20*y1 + draw.m21*y2 + draw.m22*y3 + draw.m23*y4;",
      "info" : "VariableDeclarationStatement[73241-73310]:VariableDeclarationStatement[73819-73888]"
    }, {
      "left" : "float yplot3 = draw.m30*y1 + draw.m31*y2 + draw.m32*y3 + draw.m33*y4;",
      "right" : "float yplot3 = draw.m30*y1 + draw.m31*y2 + draw.m32*y3 + draw.m33*y4;",
      "info" : "VariableDeclarationStatement[73315-73384]:VariableDeclarationStatement[73893-73962]"
    }, {
      "left" : "int savedCount = curveVertexCount;",
      "right" : "int savedCount = curveVertexCount;",
      "info" : "VariableDeclarationStatement[73447-73481]:VariableDeclarationStatement[74025-74059]"
    }, {
      "left" : "vertex(x0, y0);",
      "right" : "vertex(x0, y0);",
      "info" : "ExpressionStatement[73487-73502]:ExpressionStatement[74065-74080]"
    }, {
      "left" : "for (int j = 0; j < curveDetail; j++)",
      "right" : "for (int j = 0; j < curveDetail; j++)",
      "info" : "ForStatement[73507-73686]:ForStatement[74085-74264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73545-73686]:Block[74123-74264]"
    }, {
      "left" : "x0 += xplot1;",
      "right" : "x0 += xplot1;",
      "info" : "ExpressionStatement[73553-73566]:ExpressionStatement[74131-74144]"
    }, {
      "left" : "xplot1 += xplot2;",
      "right" : "xplot1 += xplot2;",
      "info" : "ExpressionStatement[73567-73584]:ExpressionStatement[74145-74162]"
    }, {
      "left" : "xplot2 += xplot3;",
      "right" : "xplot2 += xplot3;",
      "info" : "ExpressionStatement[73585-73602]:ExpressionStatement[74163-74180]"
    }, {
      "left" : "y0 += yplot1;",
      "right" : "y0 += yplot1;",
      "info" : "ExpressionStatement[73609-73622]:ExpressionStatement[74187-74200]"
    }, {
      "left" : "yplot1 += yplot2;",
      "right" : "yplot1 += yplot2;",
      "info" : "ExpressionStatement[73623-73640]:ExpressionStatement[74201-74218]"
    }, {
      "left" : "yplot2 += yplot3;",
      "right" : "yplot2 += yplot3;",
      "info" : "ExpressionStatement[73641-73658]:ExpressionStatement[74219-74236]"
    }, {
      "left" : "vertex(x0, y0);",
      "right" : "vertex(x0, y0);",
      "info" : "ExpressionStatement[73665-73680]:ExpressionStatement[74243-74258]"
    }, {
      "left" : "curveVertexCount = savedCount;",
      "right" : "curveVertexCount = savedCount;",
      "info" : "ExpressionStatement[73691-73721]:ExpressionStatement[74269-74299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74152-75323]:Block[74730-75901]"
    }, {
      "left" : "float x0 = x2;",
      "right" : "float x0 = x2;",
      "info" : "VariableDeclarationStatement[74158-74172]:VariableDeclarationStatement[74736-74750]"
    }, {
      "left" : "float y0 = y2;",
      "right" : "float y0 = y2;",
      "info" : "VariableDeclarationStatement[74177-74191]:VariableDeclarationStatement[74755-74769]"
    }, {
      "left" : "float z0 = z2;",
      "right" : "float z0 = z2;",
      "info" : "VariableDeclarationStatement[74196-74210]:VariableDeclarationStatement[74774-74788]"
    }, {
      "left" : "PMatrix3D draw = curveDrawMatrix;",
      "right" : "PMatrix3D draw = curveDrawMatrix;",
      "info" : "VariableDeclarationStatement[74216-74249]:VariableDeclarationStatement[74794-74827]"
    }, {
      "left" : "float xplot1 = draw.m10*x1 + draw.m11*x2 + draw.m12*x3 + draw.m13*x4;",
      "right" : "float xplot1 = draw.m10*x1 + draw.m11*x2 + draw.m12*x3 + draw.m13*x4;",
      "info" : "VariableDeclarationStatement[74255-74324]:VariableDeclarationStatement[74833-74902]"
    }, {
      "left" : "float xplot2 = draw.m20*x1 + draw.m21*x2 + draw.m22*x3 + draw.m23*x4;",
      "right" : "float xplot2 = draw.m20*x1 + draw.m21*x2 + draw.m22*x3 + draw.m23*x4;",
      "info" : "VariableDeclarationStatement[74329-74398]:VariableDeclarationStatement[74907-74976]"
    }, {
      "left" : "float xplot3 = draw.m30*x1 + draw.m31*x2 + draw.m32*x3 + draw.m33*x4;",
      "right" : "float xplot3 = draw.m30*x1 + draw.m31*x2 + draw.m32*x3 + draw.m33*x4;",
      "info" : "VariableDeclarationStatement[74403-74472]:VariableDeclarationStatement[74981-75050]"
    }, {
      "left" : "float yplot1 = draw.m10*y1 + draw.m11*y2 + draw.m12*y3 + draw.m13*y4;",
      "right" : "float yplot1 = draw.m10*y1 + draw.m11*y2 + draw.m12*y3 + draw.m13*y4;",
      "info" : "VariableDeclarationStatement[74478-74547]:VariableDeclarationStatement[75056-75125]"
    }, {
      "left" : "float yplot2 = draw.m20*y1 + draw.m21*y2 + draw.m22*y3 + draw.m23*y4;",
      "right" : "float yplot2 = draw.m20*y1 + draw.m21*y2 + draw.m22*y3 + draw.m23*y4;",
      "info" : "VariableDeclarationStatement[74552-74621]:VariableDeclarationStatement[75130-75199]"
    }, {
      "left" : "float yplot3 = draw.m30*y1 + draw.m31*y2 + draw.m32*y3 + draw.m33*y4;",
      "right" : "float yplot3 = draw.m30*y1 + draw.m31*y2 + draw.m32*y3 + draw.m33*y4;",
      "info" : "VariableDeclarationStatement[74626-74695]:VariableDeclarationStatement[75204-75273]"
    }, {
      "left" : "int savedCount = curveVertexCount;",
      "right" : "int savedCount = curveVertexCount;",
      "info" : "VariableDeclarationStatement[74758-74792]:VariableDeclarationStatement[75336-75370]"
    }, {
      "left" : "float zplot1 = draw.m10*z1 + draw.m11*z2 + draw.m12*z3 + draw.m13*z4;",
      "right" : "float zplot1 = draw.m10*z1 + draw.m11*z2 + draw.m12*z3 + draw.m13*z4;",
      "info" : "VariableDeclarationStatement[74798-74867]:VariableDeclarationStatement[75376-75445]"
    }, {
      "left" : "float zplot2 = draw.m20*z1 + draw.m21*z2 + draw.m22*z3 + draw.m23*z4;",
      "right" : "float zplot2 = draw.m20*z1 + draw.m21*z2 + draw.m22*z3 + draw.m23*z4;",
      "info" : "VariableDeclarationStatement[74872-74941]:VariableDeclarationStatement[75450-75519]"
    }, {
      "left" : "float zplot3 = draw.m30*z1 + draw.m31*z2 + draw.m32*z3 + draw.m33*z4;",
      "right" : "float zplot3 = draw.m30*z1 + draw.m31*z2 + draw.m32*z3 + draw.m33*z4;",
      "info" : "VariableDeclarationStatement[74946-75015]:VariableDeclarationStatement[75524-75593]"
    }, {
      "left" : "vertex(x0, y0, z0);",
      "right" : "vertex(x0, y0, z0);",
      "info" : "ExpressionStatement[75021-75040]:ExpressionStatement[75599-75618]"
    }, {
      "left" : "for (int j = 0; j < curveDetail; j++)",
      "right" : "for (int j = 0; j < curveDetail; j++)",
      "info" : "ForStatement[75045-75284]:ForStatement[75623-75862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75083-75284]:Block[75661-75862]"
    }, {
      "left" : "x0 += xplot1;",
      "right" : "x0 += xplot1;",
      "info" : "ExpressionStatement[75091-75104]:ExpressionStatement[75669-75682]"
    }, {
      "left" : "xplot1 += xplot2;",
      "right" : "xplot1 += xplot2;",
      "info" : "ExpressionStatement[75105-75122]:ExpressionStatement[75683-75700]"
    }, {
      "left" : "xplot2 += xplot3;",
      "right" : "xplot2 += xplot3;",
      "info" : "ExpressionStatement[75123-75140]:ExpressionStatement[75701-75718]"
    }, {
      "left" : "y0 += yplot1;",
      "right" : "y0 += yplot1;",
      "info" : "ExpressionStatement[75147-75160]:ExpressionStatement[75725-75738]"
    }, {
      "left" : "yplot1 += yplot2;",
      "right" : "yplot1 += yplot2;",
      "info" : "ExpressionStatement[75161-75178]:ExpressionStatement[75739-75756]"
    }, {
      "left" : "yplot2 += yplot3;",
      "right" : "yplot2 += yplot3;",
      "info" : "ExpressionStatement[75179-75196]:ExpressionStatement[75757-75774]"
    }, {
      "left" : "z0 += zplot1;",
      "right" : "z0 += zplot1;",
      "info" : "ExpressionStatement[75203-75216]:ExpressionStatement[75781-75794]"
    }, {
      "left" : "zplot1 += zplot2;",
      "right" : "zplot1 += zplot2;",
      "info" : "ExpressionStatement[75217-75234]:ExpressionStatement[75795-75812]"
    }, {
      "left" : "zplot2 += zplot3;",
      "right" : "zplot2 += zplot3;",
      "info" : "ExpressionStatement[75235-75252]:ExpressionStatement[75813-75830]"
    }, {
      "left" : "vertex(x0, y0, z0);",
      "right" : "vertex(x0, y0, z0);",
      "info" : "ExpressionStatement[75259-75278]:ExpressionStatement[75837-75856]"
    }, {
      "left" : "curveVertexCount = savedCount;",
      "right" : "curveVertexCount = savedCount;",
      "info" : "ExpressionStatement[75289-75319]:ExpressionStatement[75867-75897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76101-76164]:Block[76679-76742]"
    }, {
      "left" : "beginShape(POINTS);",
      "right" : "beginShape(POINTS);",
      "info" : "ExpressionStatement[76107-76126]:ExpressionStatement[76685-76704]"
    }, {
      "left" : "vertex(x, y);",
      "right" : "vertex(x, y);",
      "info" : "ExpressionStatement[76131-76144]:ExpressionStatement[76709-76722]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[76149-76160]:ExpressionStatement[76727-76738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76265-76331]:Block[76843-76909]"
    }, {
      "left" : "beginShape(POINTS);",
      "right" : "beginShape(POINTS);",
      "info" : "ExpressionStatement[76271-76290]:ExpressionStatement[76849-76868]"
    }, {
      "left" : "vertex(x, y, z);",
      "right" : "vertex(x, y, z);",
      "info" : "ExpressionStatement[76295-76311]:ExpressionStatement[76873-76889]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[76316-76327]:ExpressionStatement[76894-76905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77539-77623]:Block[78117-78201]"
    }, {
      "left" : "beginShape(LINES);",
      "right" : "beginShape(LINES);",
      "info" : "ExpressionStatement[77545-77563]:ExpressionStatement[78123-78141]"
    }, {
      "left" : "vertex(x1, y1);",
      "right" : "vertex(x1, y1);",
      "info" : "ExpressionStatement[77568-77583]:ExpressionStatement[78146-78161]"
    }, {
      "left" : "vertex(x2, y2);",
      "right" : "vertex(x2, y2);",
      "info" : "ExpressionStatement[77588-77603]:ExpressionStatement[78166-78181]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[77608-77619]:ExpressionStatement[78186-78197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77830-77922]:Block[78408-78500]"
    }, {
      "left" : "beginShape(LINES);",
      "right" : "beginShape(LINES);",
      "info" : "ExpressionStatement[77836-77854]:ExpressionStatement[78414-78432]"
    }, {
      "left" : "vertex(x1, y1, z1);",
      "right" : "vertex(x1, y1, z1);",
      "info" : "ExpressionStatement[77859-77878]:ExpressionStatement[78437-78456]"
    }, {
      "left" : "vertex(x2, y2, z2);",
      "right" : "vertex(x2, y2, z2);",
      "info" : "ExpressionStatement[77883-77902]:ExpressionStatement[78461-78480]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[77907-77918]:ExpressionStatement[78485-78496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78701-78809]:Block[79279-79387]"
    }, {
      "left" : "beginShape(TRIANGLES);",
      "right" : "beginShape(TRIANGLES);",
      "info" : "ExpressionStatement[78707-78729]:ExpressionStatement[79285-79307]"
    }, {
      "left" : "vertex(x1, y1);",
      "right" : "vertex(x1, y1);",
      "info" : "ExpressionStatement[78734-78749]:ExpressionStatement[79312-79327]"
    }, {
      "left" : "vertex(x2, y2);",
      "right" : "vertex(x2, y2);",
      "info" : "ExpressionStatement[78754-78769]:ExpressionStatement[79332-79347]"
    }, {
      "left" : "vertex(x3, y3);",
      "right" : "vertex(x3, y3);",
      "info" : "ExpressionStatement[78774-78789]:ExpressionStatement[79352-79367]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[78794-78805]:ExpressionStatement[79372-79383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79777-79901]:Block[80355-80479]"
    }, {
      "left" : "beginShape(QUADS);",
      "right" : "beginShape(QUADS);",
      "info" : "ExpressionStatement[79783-79801]:ExpressionStatement[80361-80379]"
    }, {
      "left" : "vertex(x1, y1);",
      "right" : "vertex(x1, y1);",
      "info" : "ExpressionStatement[79806-79821]:ExpressionStatement[80384-80399]"
    }, {
      "left" : "vertex(x2, y2);",
      "right" : "vertex(x2, y2);",
      "info" : "ExpressionStatement[79826-79841]:ExpressionStatement[80404-80419]"
    }, {
      "left" : "vertex(x3, y3);",
      "right" : "vertex(x3, y3);",
      "info" : "ExpressionStatement[79846-79861]:ExpressionStatement[80424-80439]"
    }, {
      "left" : "vertex(x4, y4);",
      "right" : "vertex(x4, y4);",
      "info" : "ExpressionStatement[79866-79881]:ExpressionStatement[80444-80459]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[79886-79897]:ExpressionStatement[80464-80475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81296-81322]:Block[81874-81900]"
    }, {
      "left" : "rectMode = mode;",
      "right" : "rectMode = mode;",
      "info" : "ExpressionStatement[81302-81318]:ExpressionStatement[81880-81896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82169-82777]:Block[82747-83355]"
    }, {
      "left" : "float hradius, vradius;",
      "right" : "float hradius, vradius;",
      "info" : "VariableDeclarationStatement[82175-82198]:VariableDeclarationStatement[82753-82776]"
    }, {
      "left" : "switch (rectMode) {\n    case CORNERS:\n      break;\n    case CORNER:\n      c += a; d += b;\n      break;\n    case RADIUS:\n      hradius = c;\n      vradius = d;\n      c = a + hradius;\n      d = b + vradius;\n      a -= hradius;\n      b -= vradius;\n      break;\n    case CENTER:\n      hradius = c / 2.0f;\n      vradius = d / 2.0f;\n      c = a + hradius;\n      d = b + vradius;\n      a -= hradius;\n      b -= vradius;\n    }",
      "right" : "switch (rectMode) {\n    case CORNERS:\n      break;\n    case CORNER:\n      c += a; d += b;\n      break;\n    case RADIUS:\n      hradius = c;\n      vradius = d;\n      c = a + hradius;\n      d = b + vradius;\n      a -= hradius;\n      b -= vradius;\n      break;\n    case CENTER:\n      hradius = c / 2.0f;\n      vradius = d / 2.0f;\n      c = a + hradius;\n      d = b + vradius;\n      a -= hradius;\n      b -= vradius;\n    }",
      "info" : "SwitchStatement[82203-82620]:SwitchStatement[82781-83198]"
    }, {
      "left" : "case CORNERS:",
      "right" : "case CORNERS:",
      "info" : "SwitchCase[82227-82240]:SwitchCase[82805-82818]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82247-82253]:BreakStatement[82825-82831]"
    }, {
      "left" : "case CORNER:",
      "right" : "case CORNER:",
      "info" : "SwitchCase[82258-82270]:SwitchCase[82836-82848]"
    }, {
      "left" : "c += a;",
      "right" : "c += a;",
      "info" : "ExpressionStatement[82277-82284]:ExpressionStatement[82855-82862]"
    }, {
      "left" : "d += b;",
      "right" : "d += b;",
      "info" : "ExpressionStatement[82285-82292]:ExpressionStatement[82863-82870]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82299-82305]:BreakStatement[82877-82883]"
    }, {
      "left" : "case RADIUS:",
      "right" : "case RADIUS:",
      "info" : "SwitchCase[82310-82322]:SwitchCase[82888-82900]"
    }, {
      "left" : "hradius = c;",
      "right" : "hradius = c;",
      "info" : "ExpressionStatement[82329-82341]:ExpressionStatement[82907-82919]"
    }, {
      "left" : "vradius = d;",
      "right" : "vradius = d;",
      "info" : "ExpressionStatement[82348-82360]:ExpressionStatement[82926-82938]"
    }, {
      "left" : "c = a + hradius;",
      "right" : "c = a + hradius;",
      "info" : "ExpressionStatement[82367-82383]:ExpressionStatement[82945-82961]"
    }, {
      "left" : "d = b + vradius;",
      "right" : "d = b + vradius;",
      "info" : "ExpressionStatement[82390-82406]:ExpressionStatement[82968-82984]"
    }, {
      "left" : "a -= hradius;",
      "right" : "a -= hradius;",
      "info" : "ExpressionStatement[82413-82426]:ExpressionStatement[82991-83004]"
    }, {
      "left" : "b -= vradius;",
      "right" : "b -= vradius;",
      "info" : "ExpressionStatement[82433-82446]:ExpressionStatement[83011-83024]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[82453-82459]:BreakStatement[83031-83037]"
    }, {
      "left" : "case CENTER:",
      "right" : "case CENTER:",
      "info" : "SwitchCase[82464-82476]:SwitchCase[83042-83054]"
    }, {
      "left" : "hradius = c / 2.0f;",
      "right" : "hradius = c / 2.0f;",
      "info" : "ExpressionStatement[82483-82502]:ExpressionStatement[83061-83080]"
    }, {
      "left" : "vradius = d / 2.0f;",
      "right" : "vradius = d / 2.0f;",
      "info" : "ExpressionStatement[82509-82528]:ExpressionStatement[83087-83106]"
    }, {
      "left" : "c = a + hradius;",
      "right" : "c = a + hradius;",
      "info" : "ExpressionStatement[82535-82551]:ExpressionStatement[83113-83129]"
    }, {
      "left" : "d = b + vradius;",
      "right" : "d = b + vradius;",
      "info" : "ExpressionStatement[82558-82574]:ExpressionStatement[83136-83152]"
    }, {
      "left" : "a -= hradius;",
      "right" : "a -= hradius;",
      "info" : "ExpressionStatement[82581-82594]:ExpressionStatement[83159-83172]"
    }, {
      "left" : "b -= vradius;",
      "right" : "b -= vradius;",
      "info" : "ExpressionStatement[82601-82614]:ExpressionStatement[83179-83192]"
    }, {
      "left" : "if (a > c)",
      "right" : "if (a > c)",
      "info" : "IfStatement[82626-82683]:IfStatement[83204-83261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82637-82683]:Block[83215-83261]"
    }, {
      "left" : "float temp = a;",
      "right" : "float temp = a;",
      "info" : "VariableDeclarationStatement[82645-82660]:VariableDeclarationStatement[83223-83238]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[82661-82667]:ExpressionStatement[83239-83245]"
    }, {
      "left" : "c = temp;",
      "right" : "c = temp;",
      "info" : "ExpressionStatement[82668-82677]:ExpressionStatement[83246-83255]"
    }, {
      "left" : "if (b > d)",
      "right" : "if (b > d)",
      "info" : "IfStatement[82689-82746]:IfStatement[83267-83324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82700-82746]:Block[83278-83324]"
    }, {
      "left" : "float temp = b;",
      "right" : "float temp = b;",
      "info" : "VariableDeclarationStatement[82708-82723]:VariableDeclarationStatement[83286-83301]"
    }, {
      "left" : "b = d;",
      "right" : "b = d;",
      "info" : "ExpressionStatement[82724-82730]:ExpressionStatement[83302-83308]"
    }, {
      "left" : "d = temp;",
      "right" : "d = temp;",
      "info" : "ExpressionStatement[82731-82740]:ExpressionStatement[83309-83318]"
    }, {
      "left" : "rectImpl(a, b, c, d);",
      "right" : "rectImpl(a, b, c, d);",
      "info" : "ExpressionStatement[82752-82773]:ExpressionStatement[83330-83351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82846-82896]:Block[83424-83474]"
    }, {
      "left" : "quad(x1, y1,  x2, y1,  x2, y2,  x1, y2);",
      "right" : "quad(x1, y1,  x2, y1,  x2, y2,  x1, y2);",
      "info" : "ExpressionStatement[82852-82892]:ExpressionStatement[83430-83470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83699-83738]:Block[84277-84316]"
    }, {
      "left" : "rect(a, b, c, d, r, r, r, r);",
      "right" : "rect(a, b, c, d, r, r, r, r);",
      "info" : "ExpressionStatement[83705-83734]:ExpressionStatement[84283-84312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84042-84906]:Block[84620-85484]"
    }, {
      "left" : "float hradius, vradius;",
      "right" : "float hradius, vradius;",
      "info" : "VariableDeclarationStatement[84048-84071]:VariableDeclarationStatement[84626-84649]"
    }, {
      "left" : "switch (rectMode) {\n    case CORNERS:\n      break;\n    case CORNER:\n      c += a; d += b;\n      break;\n    case RADIUS:\n      hradius = c;\n      vradius = d;\n      c = a + hradius;\n      d = b + vradius;\n      a -= hradius;\n      b -= vradius;\n      break;\n    case CENTER:\n      hradius = c / 2.0f;\n      vradius = d / 2.0f;\n      c = a + hradius;\n      d = b + vradius;\n      a -= hradius;\n      b -= vradius;\n    }",
      "right" : "switch (rectMode) {\n    case CORNERS:\n      break;\n    case CORNER:\n      c += a; d += b;\n      break;\n    case RADIUS:\n      hradius = c;\n      vradius = d;\n      c = a + hradius;\n      d = b + vradius;\n      a -= hradius;\n      b -= vradius;\n      break;\n    case CENTER:\n      hradius = c / 2.0f;\n      vradius = d / 2.0f;\n      c = a + hradius;\n      d = b + vradius;\n      a -= hradius;\n      b -= vradius;\n    }",
      "info" : "SwitchStatement[84076-84493]:SwitchStatement[84654-85071]"
    }, {
      "left" : "case CORNERS:",
      "right" : "case CORNERS:",
      "info" : "SwitchCase[84100-84113]:SwitchCase[84678-84691]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[84120-84126]:BreakStatement[84698-84704]"
    }, {
      "left" : "case CORNER:",
      "right" : "case CORNER:",
      "info" : "SwitchCase[84131-84143]:SwitchCase[84709-84721]"
    }, {
      "left" : "c += a;",
      "right" : "c += a;",
      "info" : "ExpressionStatement[84150-84157]:ExpressionStatement[84728-84735]"
    }, {
      "left" : "d += b;",
      "right" : "d += b;",
      "info" : "ExpressionStatement[84158-84165]:ExpressionStatement[84736-84743]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[84172-84178]:BreakStatement[84750-84756]"
    }, {
      "left" : "case RADIUS:",
      "right" : "case RADIUS:",
      "info" : "SwitchCase[84183-84195]:SwitchCase[84761-84773]"
    }, {
      "left" : "hradius = c;",
      "right" : "hradius = c;",
      "info" : "ExpressionStatement[84202-84214]:ExpressionStatement[84780-84792]"
    }, {
      "left" : "vradius = d;",
      "right" : "vradius = d;",
      "info" : "ExpressionStatement[84221-84233]:ExpressionStatement[84799-84811]"
    }, {
      "left" : "c = a + hradius;",
      "right" : "c = a + hradius;",
      "info" : "ExpressionStatement[84240-84256]:ExpressionStatement[84818-84834]"
    }, {
      "left" : "d = b + vradius;",
      "right" : "d = b + vradius;",
      "info" : "ExpressionStatement[84263-84279]:ExpressionStatement[84841-84857]"
    }, {
      "left" : "a -= hradius;",
      "right" : "a -= hradius;",
      "info" : "ExpressionStatement[84286-84299]:ExpressionStatement[84864-84877]"
    }, {
      "left" : "b -= vradius;",
      "right" : "b -= vradius;",
      "info" : "ExpressionStatement[84306-84319]:ExpressionStatement[84884-84897]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[84326-84332]:BreakStatement[84904-84910]"
    }, {
      "left" : "case CENTER:",
      "right" : "case CENTER:",
      "info" : "SwitchCase[84337-84349]:SwitchCase[84915-84927]"
    }, {
      "left" : "hradius = c / 2.0f;",
      "right" : "hradius = c / 2.0f;",
      "info" : "ExpressionStatement[84356-84375]:ExpressionStatement[84934-84953]"
    }, {
      "left" : "vradius = d / 2.0f;",
      "right" : "vradius = d / 2.0f;",
      "info" : "ExpressionStatement[84382-84401]:ExpressionStatement[84960-84979]"
    }, {
      "left" : "c = a + hradius;",
      "right" : "c = a + hradius;",
      "info" : "ExpressionStatement[84408-84424]:ExpressionStatement[84986-85002]"
    }, {
      "left" : "d = b + vradius;",
      "right" : "d = b + vradius;",
      "info" : "ExpressionStatement[84431-84447]:ExpressionStatement[85009-85025]"
    }, {
      "left" : "a -= hradius;",
      "right" : "a -= hradius;",
      "info" : "ExpressionStatement[84454-84467]:ExpressionStatement[85032-85045]"
    }, {
      "left" : "b -= vradius;",
      "right" : "b -= vradius;",
      "info" : "ExpressionStatement[84474-84487]:ExpressionStatement[85052-85065]"
    }, {
      "left" : "if (a > c)",
      "right" : "if (a > c)",
      "info" : "IfStatement[84499-84556]:IfStatement[85077-85134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84510-84556]:Block[85088-85134]"
    }, {
      "left" : "float temp = a;",
      "right" : "float temp = a;",
      "info" : "VariableDeclarationStatement[84518-84533]:VariableDeclarationStatement[85096-85111]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[84534-84540]:ExpressionStatement[85112-85118]"
    }, {
      "left" : "c = temp;",
      "right" : "c = temp;",
      "info" : "ExpressionStatement[84541-84550]:ExpressionStatement[85119-85128]"
    }, {
      "left" : "if (b > d)",
      "right" : "if (b > d)",
      "info" : "IfStatement[84562-84619]:IfStatement[85140-85197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84573-84619]:Block[85151-85197]"
    }, {
      "left" : "float temp = b;",
      "right" : "float temp = b;",
      "info" : "VariableDeclarationStatement[84581-84596]:VariableDeclarationStatement[85159-85174]"
    }, {
      "left" : "b = d;",
      "right" : "b = d;",
      "info" : "ExpressionStatement[84597-84603]:ExpressionStatement[85175-85181]"
    }, {
      "left" : "d = temp;",
      "right" : "d = temp;",
      "info" : "ExpressionStatement[84604-84613]:ExpressionStatement[85182-85191]"
    }, {
      "left" : "float maxRounding = PApplet.min((c - a) / 2, (d - b) / 2);",
      "right" : "float maxRounding = PApplet.min((c - a) / 2, (d - b) / 2);",
      "info" : "VariableDeclarationStatement[84625-84683]:VariableDeclarationStatement[85203-85261]"
    }, {
      "left" : "if (tl > maxRounding)",
      "right" : "if (tl > maxRounding)",
      "info" : "IfStatement[84688-84727]:IfStatement[85266-85305]"
    }, {
      "left" : "tl = maxRounding;",
      "right" : "tl = maxRounding;",
      "info" : "ExpressionStatement[84710-84727]:ExpressionStatement[85288-85305]"
    }, {
      "left" : "if (tr > maxRounding)",
      "right" : "if (tr > maxRounding)",
      "info" : "IfStatement[84732-84771]:IfStatement[85310-85349]"
    }, {
      "left" : "tr = maxRounding;",
      "right" : "tr = maxRounding;",
      "info" : "ExpressionStatement[84754-84771]:ExpressionStatement[85332-85349]"
    }, {
      "left" : "if (br > maxRounding)",
      "right" : "if (br > maxRounding)",
      "info" : "IfStatement[84776-84815]:IfStatement[85354-85393]"
    }, {
      "left" : "br = maxRounding;",
      "right" : "br = maxRounding;",
      "info" : "ExpressionStatement[84798-84815]:ExpressionStatement[85376-85393]"
    }, {
      "left" : "if (bl > maxRounding)",
      "right" : "if (bl > maxRounding)",
      "info" : "IfStatement[84820-84859]:IfStatement[85398-85437]"
    }, {
      "left" : "bl = maxRounding;",
      "right" : "bl = maxRounding;",
      "info" : "ExpressionStatement[84842-84859]:ExpressionStatement[85420-85437]"
    }, {
      "left" : "rectImpl(a, b, c, d, tl, tr, br, bl);",
      "right" : "rectImpl(a, b, c, d, tl, tr, br, bl);",
      "info" : "ExpressionStatement[84865-84902]:ExpressionStatement[85443-85480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85041-85636]:Block[85619-86214]"
    }, {
      "left" : "beginShape();",
      "right" : "beginShape();",
      "info" : "ExpressionStatement[85047-85060]:ExpressionStatement[85625-85638]"
    }, {
      "left" : "if (tr != 0)",
      "right" : "if (tr != 0)",
      "info" : "IfStatement[85090-85212]:IfStatement[85668-85790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85103-85177]:Block[85681-85755]"
    }, {
      "left" : "vertex(x2-tr, y1);",
      "right" : "vertex(x2-tr, y1);",
      "info" : "ExpressionStatement[85111-85129]:ExpressionStatement[85689-85707]"
    }, {
      "left" : "quadraticVertex(x2, y1, x2, y1+tr);",
      "right" : "quadraticVertex(x2, y1, x2, y1+tr);",
      "info" : "ExpressionStatement[85136-85171]:ExpressionStatement[85714-85749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85183-85212]:Block[85761-85790]"
    }, {
      "left" : "vertex(x2, y1);",
      "right" : "vertex(x2, y1);",
      "info" : "ExpressionStatement[85191-85206]:ExpressionStatement[85769-85784]"
    }, {
      "left" : "if (br != 0)",
      "right" : "if (br != 0)",
      "info" : "IfStatement[85217-85339]:IfStatement[85795-85917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85230-85304]:Block[85808-85882]"
    }, {
      "left" : "vertex(x2, y2-br);",
      "right" : "vertex(x2, y2-br);",
      "info" : "ExpressionStatement[85238-85256]:ExpressionStatement[85816-85834]"
    }, {
      "left" : "quadraticVertex(x2, y2, x2-br, y2);",
      "right" : "quadraticVertex(x2, y2, x2-br, y2);",
      "info" : "ExpressionStatement[85263-85298]:ExpressionStatement[85841-85876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85310-85339]:Block[85888-85917]"
    }, {
      "left" : "vertex(x2, y2);",
      "right" : "vertex(x2, y2);",
      "info" : "ExpressionStatement[85318-85333]:ExpressionStatement[85896-85911]"
    }, {
      "left" : "if (bl != 0)",
      "right" : "if (bl != 0)",
      "info" : "IfStatement[85344-85466]:IfStatement[85922-86044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85357-85431]:Block[85935-86009]"
    }, {
      "left" : "vertex(x1+bl, y2);",
      "right" : "vertex(x1+bl, y2);",
      "info" : "ExpressionStatement[85365-85383]:ExpressionStatement[85943-85961]"
    }, {
      "left" : "quadraticVertex(x1, y2, x1, y2-bl);",
      "right" : "quadraticVertex(x1, y2, x1, y2-bl);",
      "info" : "ExpressionStatement[85390-85425]:ExpressionStatement[85968-86003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85437-85466]:Block[86015-86044]"
    }, {
      "left" : "vertex(x1, y2);",
      "right" : "vertex(x1, y2);",
      "info" : "ExpressionStatement[85445-85460]:ExpressionStatement[86023-86038]"
    }, {
      "left" : "if (tl != 0)",
      "right" : "if (tl != 0)",
      "info" : "IfStatement[85471-85593]:IfStatement[86049-86171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85484-85558]:Block[86062-86136]"
    }, {
      "left" : "vertex(x1, y1+tl);",
      "right" : "vertex(x1, y1+tl);",
      "info" : "ExpressionStatement[85492-85510]:ExpressionStatement[86070-86088]"
    }, {
      "left" : "quadraticVertex(x1, y1, x1+tl, y1);",
      "right" : "quadraticVertex(x1, y1, x1+tl, y1);",
      "info" : "ExpressionStatement[85517-85552]:ExpressionStatement[86095-86130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85564-85593]:Block[86142-86171]"
    }, {
      "left" : "vertex(x1, y1);",
      "right" : "vertex(x1, y1);",
      "info" : "ExpressionStatement[85572-85587]:ExpressionStatement[86150-86165]"
    }, {
      "left" : "endShape(CLOSE);",
      "right" : "endShape(CLOSE);",
      "info" : "ExpressionStatement[85616-85632]:ExpressionStatement[86194-86210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[86787-86816]:Block[87365-87394]"
    }, {
      "left" : "ellipseMode = mode;",
      "right" : "ellipseMode = mode;",
      "info" : "ExpressionStatement[86793-86812]:ExpressionStatement[87371-87390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87586-88109]:Block[88164-88687]"
    }, {
      "left" : "float x = a;",
      "right" : "float x = a;",
      "info" : "VariableDeclarationStatement[87592-87604]:VariableDeclarationStatement[88170-88182]"
    }, {
      "left" : "float y = b;",
      "right" : "float y = b;",
      "info" : "VariableDeclarationStatement[87609-87621]:VariableDeclarationStatement[88187-88199]"
    }, {
      "left" : "float w = c;",
      "right" : "float w = c;",
      "info" : "VariableDeclarationStatement[87626-87638]:VariableDeclarationStatement[88204-88216]"
    }, {
      "left" : "float h = d;",
      "right" : "float h = d;",
      "info" : "VariableDeclarationStatement[87643-87655]:VariableDeclarationStatement[88221-88233]"
    }, {
      "left" : "if (ellipseMode == CORNERS)",
      "right" : "if (ellipseMode == CORNERS)",
      "info" : "IfStatement[87661-87922]:IfStatement[88239-88500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87689-87731]:Block[88267-88309]"
    }, {
      "left" : "w = c - a;",
      "right" : "w = c - a;",
      "info" : "ExpressionStatement[87697-87707]:ExpressionStatement[88275-88285]"
    }, {
      "left" : "h = d - b;",
      "right" : "h = d - b;",
      "info" : "ExpressionStatement[87714-87724]:ExpressionStatement[88292-88302]"
    }, {
      "left" : "if (ellipseMode == RADIUS)",
      "right" : "if (ellipseMode == RADIUS)",
      "info" : "IfStatement[87737-87922]:IfStatement[88315-88500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87764-87840]:Block[88342-88418]"
    }, {
      "left" : "x = a - c;",
      "right" : "x = a - c;",
      "info" : "ExpressionStatement[87772-87782]:ExpressionStatement[88350-88360]"
    }, {
      "left" : "y = b - d;",
      "right" : "y = b - d;",
      "info" : "ExpressionStatement[87789-87799]:ExpressionStatement[88367-88377]"
    }, {
      "left" : "w = c * 2;",
      "right" : "w = c * 2;",
      "info" : "ExpressionStatement[87806-87816]:ExpressionStatement[88384-88394]"
    }, {
      "left" : "h = d * 2;",
      "right" : "h = d * 2;",
      "info" : "ExpressionStatement[87823-87833]:ExpressionStatement[88401-88411]"
    }, {
      "left" : "if (ellipseMode == DIAMETER)",
      "right" : "if (ellipseMode == DIAMETER)",
      "info" : "IfStatement[87846-87922]:IfStatement[88424-88500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87875-87922]:Block[88453-88500]"
    }, {
      "left" : "x = a - c/2f;",
      "right" : "x = a - c/2f;",
      "info" : "ExpressionStatement[87883-87896]:ExpressionStatement[88461-88474]"
    }, {
      "left" : "y = b - d/2f;",
      "right" : "y = b - d/2f;",
      "info" : "ExpressionStatement[87903-87916]:ExpressionStatement[88481-88494]"
    }, {
      "left" : "if (w < 0)",
      "right" : "if (w < 0)",
      "info" : "IfStatement[87928-87998]:IfStatement[88506-88576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[87939-87998]:Block[88517-88576]"
    }, {
      "left" : "x += w;",
      "right" : "x += w;",
      "info" : "ExpressionStatement[87971-87978]:ExpressionStatement[88549-88556]"
    }, {
      "left" : "w = -w;",
      "right" : "w = -w;",
      "info" : "ExpressionStatement[87985-87992]:ExpressionStatement[88563-88570]"
    }, {
      "left" : "if (h < 0)",
      "right" : "if (h < 0)",
      "info" : "IfStatement[88004-88075]:IfStatement[88582-88653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88015-88075]:Block[88593-88653]"
    }, {
      "left" : "y += h;",
      "right" : "y += h;",
      "info" : "ExpressionStatement[88048-88055]:ExpressionStatement[88626-88633]"
    }, {
      "left" : "h = -h;",
      "right" : "h = -h;",
      "info" : "ExpressionStatement[88062-88069]:ExpressionStatement[88640-88647]"
    }, {
      "left" : "ellipseImpl(x, y, w, h);",
      "right" : "ellipseImpl(x, y, w, h);",
      "info" : "ExpressionStatement[88081-88105]:ExpressionStatement[88659-88683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[88177-88182]:Block[88755-88760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89253-89295]:Block[89831-89873]"
    }, {
      "left" : "arc(a, b, c, d, start, stop, 0);",
      "right" : "arc(a, b, c, d, start, stop, 0);",
      "info" : "ExpressionStatement[89259-89291]:ExpressionStatement[89837-89869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89459-90340]:Block[90037-90918]"
    }, {
      "left" : "float x = a;",
      "right" : "float x = a;",
      "info" : "VariableDeclarationStatement[89465-89477]:VariableDeclarationStatement[90043-90055]"
    }, {
      "left" : "float y = b;",
      "right" : "float y = b;",
      "info" : "VariableDeclarationStatement[89482-89494]:VariableDeclarationStatement[90060-90072]"
    }, {
      "left" : "float w = c;",
      "right" : "float w = c;",
      "info" : "VariableDeclarationStatement[89499-89511]:VariableDeclarationStatement[90077-90089]"
    }, {
      "left" : "float h = d;",
      "right" : "float h = d;",
      "info" : "VariableDeclarationStatement[89516-89528]:VariableDeclarationStatement[90094-90106]"
    }, {
      "left" : "if (ellipseMode == CORNERS)",
      "right" : "if (ellipseMode == CORNERS)",
      "info" : "IfStatement[89534-89793]:IfStatement[90112-90371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89562-89604]:Block[90140-90182]"
    }, {
      "left" : "w = c - a;",
      "right" : "w = c - a;",
      "info" : "ExpressionStatement[89570-89580]:ExpressionStatement[90148-90158]"
    }, {
      "left" : "h = d - b;",
      "right" : "h = d - b;",
      "info" : "ExpressionStatement[89587-89597]:ExpressionStatement[90165-90175]"
    }, {
      "left" : "if (ellipseMode == RADIUS)",
      "right" : "if (ellipseMode == RADIUS)",
      "info" : "IfStatement[89610-89793]:IfStatement[90188-90371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89637-89713]:Block[90215-90291]"
    }, {
      "left" : "x = a - c;",
      "right" : "x = a - c;",
      "info" : "ExpressionStatement[89645-89655]:ExpressionStatement[90223-90233]"
    }, {
      "left" : "y = b - d;",
      "right" : "y = b - d;",
      "info" : "ExpressionStatement[89662-89672]:ExpressionStatement[90240-90250]"
    }, {
      "left" : "w = c * 2;",
      "right" : "w = c * 2;",
      "info" : "ExpressionStatement[89679-89689]:ExpressionStatement[90257-90267]"
    }, {
      "left" : "h = d * 2;",
      "right" : "h = d * 2;",
      "info" : "ExpressionStatement[89696-89706]:ExpressionStatement[90274-90284]"
    }, {
      "left" : "if (ellipseMode == CENTER)",
      "right" : "if (ellipseMode == CENTER)",
      "info" : "IfStatement[89719-89793]:IfStatement[90297-90371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89746-89793]:Block[90324-90371]"
    }, {
      "left" : "x = a - c/2f;",
      "right" : "x = a - c/2f;",
      "info" : "ExpressionStatement[89754-89767]:ExpressionStatement[90332-90345]"
    }, {
      "left" : "y = b - d/2f;",
      "right" : "y = b - d/2f;",
      "info" : "ExpressionStatement[89774-89787]:ExpressionStatement[90352-90365]"
    }, {
      "left" : "if (!Float.isInfinite(start) && !Float.isInfinite(stop))",
      "right" : "if (!Float.isInfinite(start) && !Float.isInfinite(stop))",
      "info" : "IfStatement[89857-90336]:IfStatement[90435-90914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89914-90336]:Block[90492-90914]"
    }, {
      "left" : "if (stop > start)",
      "right" : "if (stop > start)",
      "info" : "IfStatement[89965-90330]:IfStatement[90543-90908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[89983-90330]:Block[90561-90908]"
    }, {
      "left" : "while (start < 0)",
      "right" : "while (start < 0)",
      "info" : "WhileStatement[90052-90134]:WhileStatement[90630-90712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90070-90134]:Block[90648-90712]"
    }, {
      "left" : "start += TWO_PI;",
      "right" : "start += TWO_PI;",
      "info" : "ExpressionStatement[90082-90098]:ExpressionStatement[90660-90676]"
    }, {
      "left" : "stop += TWO_PI;",
      "right" : "stop += TWO_PI;",
      "info" : "ExpressionStatement[90109-90124]:ExpressionStatement[90687-90702]"
    }, {
      "left" : "if (stop - start > TWO_PI)",
      "right" : "if (stop - start > TWO_PI)",
      "info" : "IfStatement[90144-90274]:IfStatement[90722-90852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90171-90274]:Block[90749-90852]"
    }, {
      "left" : "stop = start + TWO_PI;",
      "right" : "stop = start + TWO_PI;",
      "info" : "ExpressionStatement[90242-90264]:ExpressionStatement[90820-90842]"
    }, {
      "left" : "arcImpl(x, y, w, h, start, stop, mode);",
      "right" : "arcImpl(x, y, w, h, start, stop, mode);",
      "info" : "ExpressionStatement[90283-90322]:ExpressionStatement[90861-90900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[90844-90880]:Block[91422-91458]"
    }, {
      "left" : "showMissingWarning(\"arc\");",
      "right" : "showMissingWarning(\"arc\");",
      "info" : "ExpressionStatement[90850-90876]:ExpressionStatement[91428-91454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91320-91352]:Block[91898-91930]"
    }, {
      "left" : "box(size, size, size);",
      "right" : "box(size, size, size);",
      "info" : "ExpressionStatement[91326-91348]:ExpressionStatement[91904-91926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[91574-92630]:Block[92152-93208]"
    }, {
      "left" : "float x1 = -w/2f;",
      "right" : "float x1 = -w/2f;",
      "info" : "VariableDeclarationStatement[91580-91597]:VariableDeclarationStatement[92158-92175]"
    }, {
      "left" : "float x2 = w/2f;",
      "right" : "float x2 = w/2f;",
      "info" : "VariableDeclarationStatement[91598-91614]:VariableDeclarationStatement[92176-92192]"
    }, {
      "left" : "float y1 = -h/2f;",
      "right" : "float y1 = -h/2f;",
      "info" : "VariableDeclarationStatement[91619-91636]:VariableDeclarationStatement[92197-92214]"
    }, {
      "left" : "float y2 = h/2f;",
      "right" : "float y2 = h/2f;",
      "info" : "VariableDeclarationStatement[91637-91653]:VariableDeclarationStatement[92215-92231]"
    }, {
      "left" : "float z1 = -d/2f;",
      "right" : "float z1 = -d/2f;",
      "info" : "VariableDeclarationStatement[91658-91675]:VariableDeclarationStatement[92236-92253]"
    }, {
      "left" : "float z2 = d/2f;",
      "right" : "float z2 = d/2f;",
      "info" : "VariableDeclarationStatement[91676-91692]:VariableDeclarationStatement[92254-92270]"
    }, {
      "left" : "beginShape(QUADS);",
      "right" : "beginShape(QUADS);",
      "info" : "ExpressionStatement[91805-91823]:ExpressionStatement[92383-92401]"
    }, {
      "left" : "normal(0, 0, 1);",
      "right" : "normal(0, 0, 1);",
      "info" : "ExpressionStatement[91842-91858]:ExpressionStatement[92420-92436]"
    }, {
      "left" : "vertex(x1, y1, z1);",
      "right" : "vertex(x1, y1, z1);",
      "info" : "ExpressionStatement[91863-91882]:ExpressionStatement[92441-92460]"
    }, {
      "left" : "vertex(x2, y1, z1);",
      "right" : "vertex(x2, y1, z1);",
      "info" : "ExpressionStatement[91887-91906]:ExpressionStatement[92465-92484]"
    }, {
      "left" : "vertex(x2, y2, z1);",
      "right" : "vertex(x2, y2, z1);",
      "info" : "ExpressionStatement[91911-91930]:ExpressionStatement[92489-92508]"
    }, {
      "left" : "vertex(x1, y2, z1);",
      "right" : "vertex(x1, y2, z1);",
      "info" : "ExpressionStatement[91935-91954]:ExpressionStatement[92513-92532]"
    }, {
      "left" : "normal(1, 0, 0);",
      "right" : "normal(1, 0, 0);",
      "info" : "ExpressionStatement[91973-91989]:ExpressionStatement[92551-92567]"
    }, {
      "left" : "vertex(x2, y1, z1);",
      "right" : "vertex(x2, y1, z1);",
      "info" : "ExpressionStatement[91994-92013]:ExpressionStatement[92572-92591]"
    }, {
      "left" : "vertex(x2, y1, z2);",
      "right" : "vertex(x2, y1, z2);",
      "info" : "ExpressionStatement[92018-92037]:ExpressionStatement[92596-92615]"
    }, {
      "left" : "vertex(x2, y2, z2);",
      "right" : "vertex(x2, y2, z2);",
      "info" : "ExpressionStatement[92042-92061]:ExpressionStatement[92620-92639]"
    }, {
      "left" : "vertex(x2, y2, z1);",
      "right" : "vertex(x2, y2, z1);",
      "info" : "ExpressionStatement[92066-92085]:ExpressionStatement[92644-92663]"
    }, {
      "left" : "normal(0, 0, -1);",
      "right" : "normal(0, 0, -1);",
      "info" : "ExpressionStatement[92103-92120]:ExpressionStatement[92681-92698]"
    }, {
      "left" : "vertex(x2, y1, z2);",
      "right" : "vertex(x2, y1, z2);",
      "info" : "ExpressionStatement[92125-92144]:ExpressionStatement[92703-92722]"
    }, {
      "left" : "vertex(x1, y1, z2);",
      "right" : "vertex(x1, y1, z2);",
      "info" : "ExpressionStatement[92149-92168]:ExpressionStatement[92727-92746]"
    }, {
      "left" : "vertex(x1, y2, z2);",
      "right" : "vertex(x1, y2, z2);",
      "info" : "ExpressionStatement[92173-92192]:ExpressionStatement[92751-92770]"
    }, {
      "left" : "vertex(x2, y2, z2);",
      "right" : "vertex(x2, y2, z2);",
      "info" : "ExpressionStatement[92197-92216]:ExpressionStatement[92775-92794]"
    }, {
      "left" : "normal(-1, 0, 0);",
      "right" : "normal(-1, 0, 0);",
      "info" : "ExpressionStatement[92234-92251]:ExpressionStatement[92812-92829]"
    }, {
      "left" : "vertex(x1, y1, z2);",
      "right" : "vertex(x1, y1, z2);",
      "info" : "ExpressionStatement[92256-92275]:ExpressionStatement[92834-92853]"
    }, {
      "left" : "vertex(x1, y1, z1);",
      "right" : "vertex(x1, y1, z1);",
      "info" : "ExpressionStatement[92280-92299]:ExpressionStatement[92858-92877]"
    }, {
      "left" : "vertex(x1, y2, z1);",
      "right" : "vertex(x1, y2, z1);",
      "info" : "ExpressionStatement[92304-92323]:ExpressionStatement[92882-92901]"
    }, {
      "left" : "vertex(x1, y2, z2);",
      "right" : "vertex(x1, y2, z2);",
      "info" : "ExpressionStatement[92328-92347]:ExpressionStatement[92906-92925]"
    }, {
      "left" : "normal(0, 1, 0);",
      "right" : "normal(0, 1, 0);",
      "info" : "ExpressionStatement[92364-92380]:ExpressionStatement[92942-92958]"
    }, {
      "left" : "vertex(x1, y1, z2);",
      "right" : "vertex(x1, y1, z2);",
      "info" : "ExpressionStatement[92385-92404]:ExpressionStatement[92963-92982]"
    }, {
      "left" : "vertex(x2, y1, z2);",
      "right" : "vertex(x2, y1, z2);",
      "info" : "ExpressionStatement[92409-92428]:ExpressionStatement[92987-93006]"
    }, {
      "left" : "vertex(x2, y1, z1);",
      "right" : "vertex(x2, y1, z1);",
      "info" : "ExpressionStatement[92433-92452]:ExpressionStatement[93011-93030]"
    }, {
      "left" : "vertex(x1, y1, z1);",
      "right" : "vertex(x1, y1, z1);",
      "info" : "ExpressionStatement[92457-92476]:ExpressionStatement[93035-93054]"
    }, {
      "left" : "normal(0, -1, 0);",
      "right" : "normal(0, -1, 0);",
      "info" : "ExpressionStatement[92496-92513]:ExpressionStatement[93074-93091]"
    }, {
      "left" : "vertex(x1, y2, z1);",
      "right" : "vertex(x1, y2, z1);",
      "info" : "ExpressionStatement[92518-92537]:ExpressionStatement[93096-93115]"
    }, {
      "left" : "vertex(x2, y2, z1);",
      "right" : "vertex(x2, y2, z1);",
      "info" : "ExpressionStatement[92542-92561]:ExpressionStatement[93120-93139]"
    }, {
      "left" : "vertex(x2, y2, z2);",
      "right" : "vertex(x2, y2, z2);",
      "info" : "ExpressionStatement[92566-92585]:ExpressionStatement[93144-93163]"
    }, {
      "left" : "vertex(x1, y2, z2);",
      "right" : "vertex(x1, y2, z2);",
      "info" : "ExpressionStatement[92590-92609]:ExpressionStatement[93168-93187]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[92615-92626]:ExpressionStatement[93193-93204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[93993-94026]:Block[94571-94604]"
    }, {
      "left" : "sphereDetail(res, res);",
      "right" : "sphereDetail(res, res);",
      "info" : "ExpressionStatement[93999-94022]:ExpressionStatement[94577-94600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94245-95527]:Block[94823-96105]"
    }, {
      "left" : "if (ures < 3)",
      "right" : "if (ures < 3)",
      "info" : "IfStatement[94251-94274]:IfStatement[94829-94852]"
    }, {
      "left" : "ures = 3;",
      "right" : "ures = 3;",
      "info" : "ExpressionStatement[94265-94274]:ExpressionStatement[94843-94852]"
    }, {
      "left" : "if (vres < 2)",
      "right" : "if (vres < 2)",
      "info" : "IfStatement[94302-94325]:IfStatement[94880-94903]"
    }, {
      "left" : "vres = 2;",
      "right" : "vres = 2;",
      "info" : "ExpressionStatement[94316-94325]:ExpressionStatement[94894-94903]"
    }, {
      "left" : "if ((ures == sphereDetailU) && (vres == sphereDetailV))",
      "right" : "if ((ures == sphereDetailU) && (vres == sphereDetailV))",
      "info" : "IfStatement[94353-94416]:IfStatement[94931-94994]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[94409-94416]:ReturnStatement[94987-94994]"
    }, {
      "left" : "float delta = (float)SINCOS_LENGTH/ures;",
      "right" : "float delta = (float)SINCOS_LENGTH/ures;",
      "info" : "VariableDeclarationStatement[94422-94462]:VariableDeclarationStatement[95000-95040]"
    }, {
      "left" : "float[] cx = new float[ures];",
      "right" : "float[] cx = new float[ures];",
      "info" : "VariableDeclarationStatement[94467-94496]:VariableDeclarationStatement[95045-95074]"
    }, {
      "left" : "float[] cz = new float[ures];",
      "right" : "float[] cz = new float[ures];",
      "info" : "VariableDeclarationStatement[94501-94530]:VariableDeclarationStatement[95079-95108]"
    }, {
      "left" : "for (int i = 0; i < ures; i++)",
      "right" : "for (int i = 0; i < ures; i++)",
      "info" : "ForStatement[94571-94719]:ForStatement[95149-95297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[94602-94719]:Block[95180-95297]"
    }, {
      "left" : "cx[i] = cosLUT[(int) (i*delta) % SINCOS_LENGTH];",
      "right" : "cx[i] = cosLUT[(int) (i*delta) % SINCOS_LENGTH];",
      "info" : "ExpressionStatement[94610-94658]:ExpressionStatement[95188-95236]"
    }, {
      "left" : "cz[i] = sinLUT[(int) (i*delta) % SINCOS_LENGTH];",
      "right" : "cz[i] = sinLUT[(int) (i*delta) % SINCOS_LENGTH];",
      "info" : "ExpressionStatement[94665-94713]:ExpressionStatement[95243-95291]"
    }, {
      "left" : "int vertCount = ures * (vres-1) + 2;",
      "right" : "int vertCount = ures * (vres-1) + 2;",
      "info" : "VariableDeclarationStatement[94791-94827]:VariableDeclarationStatement[95369-95405]"
    }, {
      "left" : "int currVert = 0;",
      "right" : "int currVert = 0;",
      "info" : "VariableDeclarationStatement[94832-94849]:VariableDeclarationStatement[95410-95427]"
    }, {
      "left" : "sphereX = new float[vertCount];",
      "right" : "sphereX = new float[vertCount];",
      "info" : "ExpressionStatement[94895-94926]:ExpressionStatement[95473-95504]"
    }, {
      "left" : "sphereY = new float[vertCount];",
      "right" : "sphereY = new float[vertCount];",
      "info" : "ExpressionStatement[94931-94962]:ExpressionStatement[95509-95540]"
    }, {
      "left" : "sphereZ = new float[vertCount];",
      "right" : "sphereZ = new float[vertCount];",
      "info" : "ExpressionStatement[94967-94998]:ExpressionStatement[95545-95576]"
    }, {
      "left" : "float angle_step = (SINCOS_LENGTH*0.5f)/vres;",
      "right" : "float angle_step = (SINCOS_LENGTH*0.5f)/vres;",
      "info" : "VariableDeclarationStatement[95004-95049]:VariableDeclarationStatement[95582-95627]"
    }, {
      "left" : "float angle = angle_step;",
      "right" : "float angle = angle_step;",
      "info" : "VariableDeclarationStatement[95054-95079]:VariableDeclarationStatement[95632-95657]"
    }, {
      "left" : "for (int i = 1; i < vres; i++)",
      "right" : "for (int i = 1; i < vres; i++)",
      "info" : "ForStatement[95110-95471]:ForStatement[95688-96049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95141-95471]:Block[95719-96049]"
    }, {
      "left" : "float curradius = sinLUT[(int) angle % SINCOS_LENGTH];",
      "right" : "float curradius = sinLUT[(int) angle % SINCOS_LENGTH];",
      "info" : "VariableDeclarationStatement[95149-95203]:VariableDeclarationStatement[95727-95781]"
    }, {
      "left" : "float currY = cosLUT[(int) angle % SINCOS_LENGTH];",
      "right" : "float currY = cosLUT[(int) angle % SINCOS_LENGTH];",
      "info" : "VariableDeclarationStatement[95210-95260]:VariableDeclarationStatement[95788-95838]"
    }, {
      "left" : "for (int j = 0; j < ures; j++)",
      "right" : "for (int j = 0; j < ures; j++)",
      "info" : "ForStatement[95267-95438]:ForStatement[95845-96016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[95298-95438]:Block[95876-96016]"
    }, {
      "left" : "sphereX[currVert] = cx[j] * curradius;",
      "right" : "sphereX[currVert] = cx[j] * curradius;",
      "info" : "ExpressionStatement[95308-95346]:ExpressionStatement[95886-95924]"
    }, {
      "left" : "sphereY[currVert] = currY;",
      "right" : "sphereY[currVert] = currY;",
      "info" : "ExpressionStatement[95355-95381]:ExpressionStatement[95933-95959]"
    }, {
      "left" : "sphereZ[currVert++] = cz[j] * curradius;",
      "right" : "sphereZ[currVert++] = cz[j] * curradius;",
      "info" : "ExpressionStatement[95390-95430]:ExpressionStatement[95968-96008]"
    }, {
      "left" : "angle += angle_step;",
      "right" : "angle += angle_step;",
      "info" : "ExpressionStatement[95445-95465]:ExpressionStatement[96023-96043]"
    }, {
      "left" : "sphereDetailU = ures;",
      "right" : "sphereDetailU = ures;",
      "info" : "ExpressionStatement[95476-95497]:ExpressionStatement[96054-96075]"
    }, {
      "left" : "sphereDetailV = vres;",
      "right" : "sphereDetailV = vres;",
      "info" : "ExpressionStatement[95502-95523]:ExpressionStatement[96080-96101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96540-98422]:Block[97118-99000]"
    }, {
      "left" : "if ((sphereDetailU < 3) || (sphereDetailV < 2))",
      "right" : "if ((sphereDetailU < 3) || (sphereDetailV < 2))",
      "info" : "IfStatement[96546-96625]:IfStatement[97124-97203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96594-96625]:Block[97172-97203]"
    }, {
      "left" : "sphereDetail(30);",
      "right" : "sphereDetail(30);",
      "info" : "ExpressionStatement[96602-96619]:ExpressionStatement[97180-97197]"
    }, {
      "left" : "edge(false);",
      "right" : "edge(false);",
      "info" : "ExpressionStatement[96631-96643]:ExpressionStatement[97209-97221]"
    }, {
      "left" : "beginShape(TRIANGLE_STRIP);",
      "right" : "beginShape(TRIANGLE_STRIP);",
      "info" : "ExpressionStatement[96682-96709]:ExpressionStatement[97260-97287]"
    }, {
      "left" : "for (int i = 0; i < sphereDetailU; i++)",
      "right" : "for (int i = 0; i < sphereDetailU; i++)",
      "info" : "ForStatement[96714-96921]:ForStatement[97292-97499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[96754-96921]:Block[97332-97499]"
    }, {
      "left" : "normal(0, -1, 0);",
      "right" : "normal(0, -1, 0);",
      "info" : "ExpressionStatement[96762-96779]:ExpressionStatement[97340-97357]"
    }, {
      "left" : "vertex(0, -r, 0);",
      "right" : "vertex(0, -r, 0);",
      "info" : "ExpressionStatement[96786-96803]:ExpressionStatement[97364-97381]"
    }, {
      "left" : "normal(sphereX[i], sphereY[i], sphereZ[i]);",
      "right" : "normal(sphereX[i], sphereY[i], sphereZ[i]);",
      "info" : "ExpressionStatement[96810-96853]:ExpressionStatement[97388-97431]"
    }, {
      "left" : "vertex(r * sphereX[i], r * sphereY[i], r * sphereZ[i]);",
      "right" : "vertex(r * sphereX[i], r * sphereY[i], r * sphereZ[i]);",
      "info" : "ExpressionStatement[96860-96915]:ExpressionStatement[97438-97493]"
    }, {
      "left" : "normal(0, -r, 0);",
      "right" : "normal(0, -r, 0);",
      "info" : "ExpressionStatement[96926-96943]:ExpressionStatement[97504-97521]"
    }, {
      "left" : "vertex(0, -r, 0);",
      "right" : "vertex(0, -r, 0);",
      "info" : "ExpressionStatement[96948-96965]:ExpressionStatement[97526-97543]"
    }, {
      "left" : "normal(sphereX[0], sphereY[0], sphereZ[0]);",
      "right" : "normal(sphereX[0], sphereY[0], sphereZ[0]);",
      "info" : "ExpressionStatement[96970-97013]:ExpressionStatement[97548-97591]"
    }, {
      "left" : "vertex(r * sphereX[0], r * sphereY[0], r * sphereZ[0]);",
      "right" : "vertex(r * sphereX[0], r * sphereY[0], r * sphereZ[0]);",
      "info" : "ExpressionStatement[97018-97073]:ExpressionStatement[97596-97651]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[97078-97089]:ExpressionStatement[97656-97667]"
    }, {
      "left" : "int v1,v11,v2;",
      "right" : "int v1,v11,v2;",
      "info" : "VariableDeclarationStatement[97095-97109]:VariableDeclarationStatement[97673-97687]"
    }, {
      "left" : "int voff = 0;",
      "right" : "int voff = 0;",
      "info" : "VariableDeclarationStatement[97135-97148]:VariableDeclarationStatement[97713-97726]"
    }, {
      "left" : "for (int i = 2; i < sphereDetailV; i++)",
      "right" : "for (int i = 2; i < sphereDetailV; i++)",
      "info" : "ForStatement[97153-97919]:ForStatement[97731-98497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97193-97919]:Block[97771-98497]"
    }, {
      "left" : "v1 = v11 = voff;",
      "right" : "v1 = v11 = voff;",
      "info" : "ExpressionStatement[97201-97217]:ExpressionStatement[97779-97795]"
    }, {
      "left" : "voff += sphereDetailU;",
      "right" : "voff += sphereDetailU;",
      "info" : "ExpressionStatement[97224-97246]:ExpressionStatement[97802-97824]"
    }, {
      "left" : "v2 = voff;",
      "right" : "v2 = voff;",
      "info" : "ExpressionStatement[97253-97263]:ExpressionStatement[97831-97841]"
    }, {
      "left" : "beginShape(TRIANGLE_STRIP);",
      "right" : "beginShape(TRIANGLE_STRIP);",
      "info" : "ExpressionStatement[97270-97297]:ExpressionStatement[97848-97875]"
    }, {
      "left" : "for (int j = 0; j < sphereDetailU; j++)",
      "right" : "for (int j = 0; j < sphereDetailU; j++)",
      "info" : "ForStatement[97304-97601]:ForStatement[97882-98179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[97344-97601]:Block[97922-98179]"
    }, {
      "left" : "normal(sphereX[v1], sphereY[v1], sphereZ[v1]);",
      "right" : "normal(sphereX[v1], sphereY[v1], sphereZ[v1]);",
      "info" : "ExpressionStatement[97354-97400]:ExpressionStatement[97932-97978]"
    }, {
      "left" : "vertex(r * sphereX[v1], r * sphereY[v1], r * sphereZ[v1++]);",
      "right" : "vertex(r * sphereX[v1], r * sphereY[v1], r * sphereZ[v1++]);",
      "info" : "ExpressionStatement[97409-97469]:ExpressionStatement[97987-98047]"
    }, {
      "left" : "normal(sphereX[v2], sphereY[v2], sphereZ[v2]);",
      "right" : "normal(sphereX[v2], sphereY[v2], sphereZ[v2]);",
      "info" : "ExpressionStatement[97478-97524]:ExpressionStatement[98056-98102]"
    }, {
      "left" : "vertex(r * sphereX[v2], r * sphereY[v2], r * sphereZ[v2++]);",
      "right" : "vertex(r * sphereX[v2], r * sphereY[v2], r * sphereZ[v2++]);",
      "info" : "ExpressionStatement[97533-97593]:ExpressionStatement[98111-98171]"
    }, {
      "left" : "v1 = v11;",
      "right" : "v1 = v11;",
      "info" : "ExpressionStatement[97633-97642]:ExpressionStatement[98211-98220]"
    }, {
      "left" : "v2 = voff;",
      "right" : "v2 = voff;",
      "info" : "ExpressionStatement[97649-97659]:ExpressionStatement[98227-98237]"
    }, {
      "left" : "normal(sphereX[v1], sphereY[v1], sphereZ[v1]);",
      "right" : "normal(sphereX[v1], sphereY[v1], sphereZ[v1]);",
      "info" : "ExpressionStatement[97666-97712]:ExpressionStatement[98244-98290]"
    }, {
      "left" : "vertex(r * sphereX[v1], r * sphereY[v1], r * sphereZ[v1]);",
      "right" : "vertex(r * sphereX[v1], r * sphereY[v1], r * sphereZ[v1]);",
      "info" : "ExpressionStatement[97719-97777]:ExpressionStatement[98297-98355]"
    }, {
      "left" : "normal(sphereX[v2], sphereY[v2], sphereZ[v2]);",
      "right" : "normal(sphereX[v2], sphereY[v2], sphereZ[v2]);",
      "info" : "ExpressionStatement[97784-97830]:ExpressionStatement[98362-98408]"
    }, {
      "left" : "vertex(r * sphereX[v2], r * sphereY[v2], r * sphereZ[v2]);",
      "right" : "vertex(r * sphereX[v2], r * sphereY[v2], r * sphereZ[v2]);",
      "info" : "ExpressionStatement[97837-97895]:ExpressionStatement[98415-98473]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[97902-97913]:ExpressionStatement[98480-98491]"
    }, {
      "left" : "beginShape(TRIANGLE_STRIP);",
      "right" : "beginShape(TRIANGLE_STRIP);",
      "info" : "ExpressionStatement[97953-97980]:ExpressionStatement[98531-98558]"
    }, {
      "left" : "for (int i = 0; i < sphereDetailU; i++)",
      "right" : "for (int i = 0; i < sphereDetailU; i++)",
      "info" : "ForStatement[97985-98217]:ForStatement[98563-98795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[98025-98217]:Block[98603-98795]"
    }, {
      "left" : "v2 = voff + i;",
      "right" : "v2 = voff + i;",
      "info" : "ExpressionStatement[98033-98047]:ExpressionStatement[98611-98625]"
    }, {
      "left" : "normal(sphereX[v2], sphereY[v2], sphereZ[v2]);",
      "right" : "normal(sphereX[v2], sphereY[v2], sphereZ[v2]);",
      "info" : "ExpressionStatement[98054-98100]:ExpressionStatement[98632-98678]"
    }, {
      "left" : "vertex(r * sphereX[v2], r * sphereY[v2], r * sphereZ[v2]);",
      "right" : "vertex(r * sphereX[v2], r * sphereY[v2], r * sphereZ[v2]);",
      "info" : "ExpressionStatement[98107-98165]:ExpressionStatement[98685-98743]"
    }, {
      "left" : "normal(0, 1, 0);",
      "right" : "normal(0, 1, 0);",
      "info" : "ExpressionStatement[98172-98188]:ExpressionStatement[98750-98766]"
    }, {
      "left" : "vertex(0, r, 0);",
      "right" : "vertex(0, r, 0);",
      "info" : "ExpressionStatement[98195-98211]:ExpressionStatement[98773-98789]"
    }, {
      "left" : "normal(sphereX[voff], sphereY[voff], sphereZ[voff]);",
      "right" : "normal(sphereX[voff], sphereY[voff], sphereZ[voff]);",
      "info" : "ExpressionStatement[98222-98274]:ExpressionStatement[98800-98852]"
    }, {
      "left" : "vertex(r * sphereX[voff], r * sphereY[voff], r * sphereZ[voff]);",
      "right" : "vertex(r * sphereX[voff], r * sphereY[voff], r * sphereZ[voff]);",
      "info" : "ExpressionStatement[98279-98343]:ExpressionStatement[98857-98921]"
    }, {
      "left" : "normal(0, 1, 0);",
      "right" : "normal(0, 1, 0);",
      "info" : "ExpressionStatement[98348-98364]:ExpressionStatement[98926-98942]"
    }, {
      "left" : "vertex(0, r, 0);",
      "right" : "vertex(0, r, 0);",
      "info" : "ExpressionStatement[98369-98385]:ExpressionStatement[98947-98963]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[98390-98401]:ExpressionStatement[98968-98979]"
    }, {
      "left" : "edge(true);",
      "right" : "edge(true);",
      "info" : "ExpressionStatement[98407-98418]:ExpressionStatement[98985-98996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[100202-100292]:Block[100780-100870]"
    }, {
      "left" : "float t1 = 1.0f - t;",
      "right" : "float t1 = 1.0f - t;",
      "info" : "VariableDeclarationStatement[100208-100228]:VariableDeclarationStatement[100786-100806]"
    }, {
      "left" : "return a*t1*t1*t1 + 3*b*t*t1*t1 + 3*c*t*t*t1 + d*t*t*t;",
      "right" : "return a*t1*t1*t1 + 3*b*t*t1*t1 + 3*c*t*t*t1 + d*t*t*t;",
      "info" : "ReturnStatement[100233-100288]:ReturnStatement[100811-100866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101280-101377]:Block[101858-101955]"
    }, {
      "left" : "return (3*t*t * (-a+3*b-3*c+d) +\n            6*t * (a-2*b+c) +\n            3 * (-a+b));",
      "right" : "return (3*t*t * (-a+3*b-3*c+d) +\n            6*t * (a-2*b+c) +\n            3 * (-a+b));",
      "info" : "ReturnStatement[101286-101373]:ReturnStatement[101864-101951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101415-101471]:Block[101993-102049]"
    }, {
      "left" : "if (!bezierInited)",
      "right" : "if (!bezierInited)",
      "info" : "IfStatement[101421-101467]:IfStatement[101999-102045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101440-101467]:Block[102018-102045]"
    }, {
      "left" : "bezierInit();",
      "right" : "bezierInit();",
      "info" : "ExpressionStatement[101448-101461]:ExpressionStatement[102026-102039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[101504-101645]:Block[102082-102223]"
    }, {
      "left" : "bezierDetail(bezierDetail);",
      "right" : "bezierDetail(bezierDetail);",
      "info" : "ExpressionStatement[101589-101616]:ExpressionStatement[102167-102194]"
    }, {
      "left" : "bezierInited = true;",
      "right" : "bezierInited = true;",
      "info" : "ExpressionStatement[101621-101641]:ExpressionStatement[102199-102219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102271-102804]:Block[102849-103382]"
    }, {
      "left" : "bezierDetail = detail;",
      "right" : "bezierDetail = detail;",
      "info" : "ExpressionStatement[102277-102299]:ExpressionStatement[102855-102877]"
    }, {
      "left" : "if (bezierDrawMatrix == null)",
      "right" : "if (bezierDrawMatrix == null)",
      "info" : "IfStatement[102305-102384]:IfStatement[102883-102962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102335-102384]:Block[102913-102962]"
    }, {
      "left" : "bezierDrawMatrix = new PMatrix3D();",
      "right" : "bezierDrawMatrix = new PMatrix3D();",
      "info" : "ExpressionStatement[102343-102378]:ExpressionStatement[102921-102956]"
    }, {
      "left" : "splineForward(detail, bezierDrawMatrix);",
      "right" : "splineForward(detail, bezierDrawMatrix);",
      "info" : "ExpressionStatement[102455-102495]:ExpressionStatement[103033-103073]"
    }, {
      "left" : "bezierDrawMatrix.apply(bezierBasisMatrix);",
      "right" : "bezierDrawMatrix.apply(bezierBasisMatrix);",
      "info" : "ExpressionStatement[102758-102800]:ExpressionStatement[103336-103378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[102972-103073]:Block[103550-103651]"
    }, {
      "left" : "beginShape();",
      "right" : "beginShape();",
      "info" : "ExpressionStatement[102978-102991]:ExpressionStatement[103556-103569]"
    }, {
      "left" : "vertex(x1, y1);",
      "right" : "vertex(x1, y1);",
      "info" : "ExpressionStatement[102996-103011]:ExpressionStatement[103574-103589]"
    }, {
      "left" : "bezierVertex(x2, y2, x3, y3, x4, y4);",
      "right" : "bezierVertex(x2, y2, x3, y3, x4, y4);",
      "info" : "ExpressionStatement[103016-103053]:ExpressionStatement[103594-103631]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[103058-103069]:ExpressionStatement[103636-103647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[105623-105774]:Block[106201-106352]"
    }, {
      "left" : "beginShape();",
      "right" : "beginShape();",
      "info" : "ExpressionStatement[105629-105642]:ExpressionStatement[106207-106220]"
    }, {
      "left" : "vertex(x1, y1, z1);",
      "right" : "vertex(x1, y1, z1);",
      "info" : "ExpressionStatement[105647-105666]:ExpressionStatement[106225-106244]"
    }, {
      "left" : "bezierVertex(x2, y2, z2,\n                 x3, y3, z3,\n                 x4, y4, z4);",
      "right" : "bezierVertex(x2, y2, z2,\n                 x3, y3, z3,\n                 x4, y4, z4);",
      "info" : "ExpressionStatement[105671-105754]:ExpressionStatement[106249-106332]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[105759-105770]:ExpressionStatement[106337-106348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[106848-107260]:Block[107426-107838]"
    }, {
      "left" : "curveInitCheck();",
      "right" : "curveInitCheck();",
      "info" : "ExpressionStatement[106854-106871]:ExpressionStatement[107432-107449]"
    }, {
      "left" : "float tt = t * t;",
      "right" : "float tt = t * t;",
      "info" : "VariableDeclarationStatement[106877-106894]:VariableDeclarationStatement[107455-107472]"
    }, {
      "left" : "float ttt = t * tt;",
      "right" : "float ttt = t * tt;",
      "info" : "VariableDeclarationStatement[106899-106918]:VariableDeclarationStatement[107477-107496]"
    }, {
      "left" : "PMatrix3D cb = curveBasisMatrix;",
      "right" : "PMatrix3D cb = curveBasisMatrix;",
      "info" : "VariableDeclarationStatement[106923-106955]:VariableDeclarationStatement[107501-107533]"
    }, {
      "left" : "return (a * (ttt*cb.m00 + tt*cb.m10 + t*cb.m20 + cb.m30) +\n            b * (ttt*cb.m01 + tt*cb.m11 + t*cb.m21 + cb.m31) +\n            c * (ttt*cb.m02 + tt*cb.m12 + t*cb.m22 + cb.m32) +\n            d * (ttt*cb.m03 + tt*cb.m13 + t*cb.m23 + cb.m33));",
      "right" : "return (a * (ttt*cb.m00 + tt*cb.m10 + t*cb.m20 + cb.m30) +\n            b * (ttt*cb.m01 + tt*cb.m11 + t*cb.m21 + cb.m31) +\n            c * (ttt*cb.m02 + tt*cb.m12 + t*cb.m22 + cb.m32) +\n            d * (ttt*cb.m03 + tt*cb.m13 + t*cb.m23 + cb.m33));",
      "info" : "ReturnStatement[107009-107256]:ReturnStatement[107587-107834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[108259-108631]:Block[108837-109209]"
    }, {
      "left" : "curveInitCheck();",
      "right" : "curveInitCheck();",
      "info" : "ExpressionStatement[108265-108282]:ExpressionStatement[108843-108860]"
    }, {
      "left" : "float tt3 = t * t * 3;",
      "right" : "float tt3 = t * t * 3;",
      "info" : "VariableDeclarationStatement[108288-108310]:VariableDeclarationStatement[108866-108888]"
    }, {
      "left" : "float t2 = t * 2;",
      "right" : "float t2 = t * 2;",
      "info" : "VariableDeclarationStatement[108315-108332]:VariableDeclarationStatement[108893-108910]"
    }, {
      "left" : "PMatrix3D cb = curveBasisMatrix;",
      "right" : "PMatrix3D cb = curveBasisMatrix;",
      "info" : "VariableDeclarationStatement[108337-108369]:VariableDeclarationStatement[108915-108947]"
    }, {
      "left" : "return (a * (tt3*cb.m00 + t2*cb.m10 + cb.m20) +\n            b * (tt3*cb.m01 + t2*cb.m11 + cb.m21) +\n            c * (tt3*cb.m02 + t2*cb.m12 + cb.m22) +\n            d * (tt3*cb.m03 + t2*cb.m13 + cb.m23) );",
      "right" : "return (a * (tt3*cb.m00 + t2*cb.m10 + cb.m20) +\n            b * (tt3*cb.m01 + t2*cb.m11 + cb.m21) +\n            c * (tt3*cb.m02 + t2*cb.m12 + cb.m22) +\n            d * (tt3*cb.m03 + t2*cb.m13 + cb.m23) );",
      "info" : "ReturnStatement[108423-108627]:ReturnStatement[109001-109205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[109247-109295]:Block[109825-109873]"
    }, {
      "left" : "curveDetail = detail;",
      "right" : "curveDetail = detail;",
      "info" : "ExpressionStatement[109253-109274]:ExpressionStatement[109831-109852]"
    }, {
      "left" : "curveInit();",
      "right" : "curveInit();",
      "info" : "ExpressionStatement[109279-109291]:ExpressionStatement[109857-109869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110241-110295]:Block[110819-110873]"
    }, {
      "left" : "curveTightness = tightness;",
      "right" : "curveTightness = tightness;",
      "info" : "ExpressionStatement[110247-110274]:ExpressionStatement[110825-110852]"
    }, {
      "left" : "curveInit();",
      "right" : "curveInit();",
      "info" : "ExpressionStatement[110279-110291]:ExpressionStatement[110857-110869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110332-110386]:Block[110910-110964]"
    }, {
      "left" : "if (!curveInited)",
      "right" : "if (!curveInited)",
      "info" : "IfStatement[110338-110382]:IfStatement[110916-110960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110356-110382]:Block[110934-110960]"
    }, {
      "left" : "curveInit();",
      "right" : "curveInit();",
      "info" : "ExpressionStatement[110364-110376]:ExpressionStatement[110942-110954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[110919-112156]:Block[111497-112734]"
    }, {
      "left" : "if (curveDrawMatrix == null)",
      "right" : "if (curveDrawMatrix == null)",
      "info" : "IfStatement[110980-111125]:IfStatement[111558-111703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111009-111125]:Block[111587-111703]"
    }, {
      "left" : "curveBasisMatrix = new PMatrix3D();",
      "right" : "curveBasisMatrix = new PMatrix3D();",
      "info" : "ExpressionStatement[111017-111052]:ExpressionStatement[111595-111630]"
    }, {
      "left" : "curveDrawMatrix = new PMatrix3D();",
      "right" : "curveDrawMatrix = new PMatrix3D();",
      "info" : "ExpressionStatement[111059-111093]:ExpressionStatement[111637-111671]"
    }, {
      "left" : "curveInited = true;",
      "right" : "curveInited = true;",
      "info" : "ExpressionStatement[111100-111119]:ExpressionStatement[111678-111697]"
    }, {
      "left" : "float s = curveTightness;",
      "right" : "float s = curveTightness;",
      "info" : "VariableDeclarationStatement[111131-111156]:VariableDeclarationStatement[111709-111734]"
    }, {
      "left" : "curveBasisMatrix.set((s-1)/2f, (s+3)/2f,  (-3-s)/2f, (1-s)/2f,\n                         (1-s),    (-5-s)/2f, (s+2),     (s-1)/2f,\n                         (s-1)/2f, 0,         (1-s)/2f,  0,\n                         0,        1,         0,         0);",
      "right" : "curveBasisMatrix.set((s-1)/2f, (s+3)/2f,  (-3-s)/2f, (1-s)/2f,\n                         (1-s),    (-5-s)/2f, (s+2),     (s-1)/2f,\n                         (s-1)/2f, 0,         (1-s)/2f,  0,\n                         0,        1,         0,         0);",
      "info" : "ExpressionStatement[111161-111411]:ExpressionStatement[111739-111989]"
    }, {
      "left" : "splineForward(curveDetail, curveDrawMatrix);",
      "right" : "splineForward(curveDetail, curveDrawMatrix);",
      "info" : "ExpressionStatement[111475-111519]:ExpressionStatement[112053-112097]"
    }, {
      "left" : "if (bezierBasisInverse == null)",
      "right" : "if (bezierBasisInverse == null)",
      "info" : "IfStatement[111525-111696]:IfStatement[112103-112274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[111557-111696]:Block[112135-112274]"
    }, {
      "left" : "bezierBasisInverse = bezierBasisMatrix.get();",
      "right" : "bezierBasisInverse = bezierBasisMatrix.get();",
      "info" : "ExpressionStatement[111565-111610]:ExpressionStatement[112143-112188]"
    }, {
      "left" : "bezierBasisInverse.invert();",
      "right" : "bezierBasisInverse.invert();",
      "info" : "ExpressionStatement[111617-111645]:ExpressionStatement[112195-112223]"
    }, {
      "left" : "curveToBezierMatrix = new PMatrix3D();",
      "right" : "curveToBezierMatrix = new PMatrix3D();",
      "info" : "ExpressionStatement[111652-111690]:ExpressionStatement[112230-112268]"
    }, {
      "left" : "curveToBezierMatrix.set(curveBasisMatrix);",
      "right" : "curveToBezierMatrix.set(curveBasisMatrix);",
      "info" : "ExpressionStatement[111884-111926]:ExpressionStatement[112462-112504]"
    }, {
      "left" : "curveToBezierMatrix.preApply(bezierBasisInverse);",
      "right" : "curveToBezierMatrix.preApply(bezierBasisInverse);",
      "info" : "ExpressionStatement[111931-111980]:ExpressionStatement[112509-112558]"
    }, {
      "left" : "curveDrawMatrix.apply(curveBasisMatrix);",
      "right" : "curveDrawMatrix.apply(curveBasisMatrix);",
      "info" : "ExpressionStatement[112112-112152]:ExpressionStatement[112690-112730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114168-114307]:Block[114746-114885]"
    }, {
      "left" : "beginShape();",
      "right" : "beginShape();",
      "info" : "ExpressionStatement[114174-114187]:ExpressionStatement[114752-114765]"
    }, {
      "left" : "curveVertex(x1, y1);",
      "right" : "curveVertex(x1, y1);",
      "info" : "ExpressionStatement[114192-114212]:ExpressionStatement[114770-114790]"
    }, {
      "left" : "curveVertex(x2, y2);",
      "right" : "curveVertex(x2, y2);",
      "info" : "ExpressionStatement[114217-114237]:ExpressionStatement[114795-114815]"
    }, {
      "left" : "curveVertex(x3, y3);",
      "right" : "curveVertex(x3, y3);",
      "info" : "ExpressionStatement[114242-114262]:ExpressionStatement[114820-114840]"
    }, {
      "left" : "curveVertex(x4, y4);",
      "right" : "curveVertex(x4, y4);",
      "info" : "ExpressionStatement[114267-114287]:ExpressionStatement[114845-114865]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[114292-114303]:ExpressionStatement[114870-114881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[114737-114892]:Block[115315-115470]"
    }, {
      "left" : "beginShape();",
      "right" : "beginShape();",
      "info" : "ExpressionStatement[114743-114756]:ExpressionStatement[115321-115334]"
    }, {
      "left" : "curveVertex(x1, y1, z1);",
      "right" : "curveVertex(x1, y1, z1);",
      "info" : "ExpressionStatement[114761-114785]:ExpressionStatement[115339-115363]"
    }, {
      "left" : "curveVertex(x2, y2, z2);",
      "right" : "curveVertex(x2, y2, z2);",
      "info" : "ExpressionStatement[114790-114814]:ExpressionStatement[115368-115392]"
    }, {
      "left" : "curveVertex(x3, y3, z3);",
      "right" : "curveVertex(x3, y3, z3);",
      "info" : "ExpressionStatement[114819-114843]:ExpressionStatement[115397-115421]"
    }, {
      "left" : "curveVertex(x4, y4, z4);",
      "right" : "curveVertex(x4, y4, z4);",
      "info" : "ExpressionStatement[114848-114872]:ExpressionStatement[115426-115450]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[114877-114888]:ExpressionStatement[115455-115466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115508-115729]:Block[116086-116307]"
    }, {
      "left" : "float f  = 1.0f / segments;",
      "right" : "float f  = 1.0f / segments;",
      "info" : "VariableDeclarationStatement[115514-115541]:VariableDeclarationStatement[116092-116119]"
    }, {
      "left" : "float ff = f * f;",
      "right" : "float ff = f * f;",
      "info" : "VariableDeclarationStatement[115546-115563]:VariableDeclarationStatement[116124-116141]"
    }, {
      "left" : "float fff = ff * f;",
      "right" : "float fff = ff * f;",
      "info" : "VariableDeclarationStatement[115568-115587]:VariableDeclarationStatement[116146-116165]"
    }, {
      "left" : "matrix.set(0,     0,    0, 1,\n               fff,   ff,   f, 0,\n               6*fff, 2*ff, 0, 0,\n               6*fff, 0,    0, 0);",
      "right" : "matrix.set(0,     0,    0, 1,\n               fff,   ff,   f, 0,\n               6*fff, 2*ff, 0, 0,\n               6*fff, 0,    0, 0);",
      "info" : "ExpressionStatement[115593-115725]:ExpressionStatement[116171-116303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115839-115870]:Block[116417-116448]"
    }, {
      "left" : "smooth(1);",
      "right" : "smooth(1);",
      "info" : "ExpressionStatement[115856-115866]:ExpressionStatement[116434-116444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115907-116293]:Block[116485-116871]"
    }, {
      "left" : "if (primaryGraphics)",
      "right" : "if (primaryGraphics)",
      "info" : "IfStatement[115924-116289]:IfStatement[116502-116867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115945-115982]:Block[116523-116560]"
    }, {
      "left" : "parent.smooth(quality);",
      "right" : "parent.smooth(quality);",
      "info" : "ExpressionStatement[115953-115976]:ExpressionStatement[116531-116554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[115988-116289]:Block[116566-116867]"
    }, {
      "left" : "if (settingsInited)",
      "right" : "if (settingsInited)",
      "info" : "IfStatement[116064-116283]:IfStatement[116642-116861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116084-116237]:Block[116662-116815]"
    }, {
      "left" : "if (this.smooth != quality)",
      "right" : "if (this.smooth != quality)",
      "info" : "IfStatement[116155-116229]:IfStatement[116733-116807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116183-116229]:Block[116761-116807]"
    }, {
      "left" : "smoothWarning(\"smooth\");",
      "right" : "smoothWarning(\"smooth\");",
      "info" : "ExpressionStatement[116195-116219]:ExpressionStatement[116773-116797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116243-116283]:Block[116821-116861]"
    }, {
      "left" : "this.smooth = quality;",
      "right" : "this.smooth = quality;",
      "info" : "ExpressionStatement[116253-116275]:ExpressionStatement[116831-116853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116321-116352]:Block[116899-116930]"
    }, {
      "left" : "smooth(0);",
      "right" : "smooth(0);",
      "info" : "ExpressionStatement[116338-116348]:ExpressionStatement[116916-116926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[116399-116483]:Block[116977-117061]"
    }, {
      "left" : "PGraphics.showWarning(\"%s() can only be used before beginDraw()\", method);",
      "right" : "PGraphics.showWarning(\"%s() can only be used before beginDraw()\", method);",
      "info" : "ExpressionStatement[116405-116479]:ExpressionStatement[116983-117057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117698-117939]:Block[118276-118517]"
    }, {
      "left" : "if ((mode == CORNER) || (mode == CORNERS) || (mode == CENTER))",
      "right" : "if ((mode == CORNER) || (mode == CORNERS) || (mode == CENTER))",
      "info" : "IfStatement[117704-117935]:IfStatement[118282-118513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117767-117798]:Block[118345-118376]"
    }, {
      "left" : "imageMode = mode;",
      "right" : "imageMode = mode;",
      "info" : "ExpressionStatement[117775-117792]:ExpressionStatement[118353-118370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[117804-117935]:Block[118382-118513]"
    }, {
      "left" : "String msg =\n        \"imageMode() only works with CORNER, CORNERS, or CENTER\";",
      "right" : "String msg =\n        \"imageMode() only works with CORNER, CORNERS, or CENTER\";",
      "info" : "VariableDeclarationStatement[117812-117890]:VariableDeclarationStatement[118390-118468]"
    }, {
      "left" : "throw new RuntimeException(msg);",
      "right" : "throw new RuntimeException(msg);",
      "info" : "ThrowStatement[117897-117929]:ThrowStatement[118475-118507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119623-120225]:Block[120201-120803]"
    }, {
      "left" : "if (img.width == -1 || img.height == -1)",
      "right" : "if (img.width == -1 || img.height == -1)",
      "info" : "IfStatement[119767-119815]:IfStatement[120345-120393]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[119808-119815]:ReturnStatement[120386-120393]"
    }, {
      "left" : "if (imageMode == CORNER || imageMode == CORNERS)",
      "right" : "if (imageMode == CORNER || imageMode == CORNERS)",
      "info" : "IfStatement[119821-120221]:IfStatement[120399-120799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[119870-119994]:Block[120448-120572]"
    }, {
      "left" : "imageImpl(img,\n                a, b, a+img.width, b+img.height,\n                0, 0, img.width, img.height);",
      "right" : "imageImpl(img,\n                a, b, a+img.width, b+img.height,\n                0, 0, img.width, img.height);",
      "info" : "ExpressionStatement[119878-119987]:ExpressionStatement[120456-120565]"
    }, {
      "left" : "if (imageMode == CENTER)",
      "right" : "if (imageMode == CENTER)",
      "info" : "IfStatement[120000-120221]:IfStatement[120578-120799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120025-120221]:Block[120603-120799]"
    }, {
      "left" : "float x1 = a - img.width/2;",
      "right" : "float x1 = a - img.width/2;",
      "info" : "VariableDeclarationStatement[120033-120060]:VariableDeclarationStatement[120611-120638]"
    }, {
      "left" : "float y1 = b - img.height/2;",
      "right" : "float y1 = b - img.height/2;",
      "info" : "VariableDeclarationStatement[120067-120095]:VariableDeclarationStatement[120645-120673]"
    }, {
      "left" : "imageImpl(img,\n                x1, y1, x1+img.width, y1+img.height,\n                0, 0, img.width, img.height);",
      "right" : "imageImpl(img,\n                x1, y1, x1+img.width, y1+img.height,\n                0, 0, img.width, img.height);",
      "info" : "ExpressionStatement[120102-120215]:ExpressionStatement[120680-120793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120390-120452]:Block[120968-121030]"
    }, {
      "left" : "image(img, a, b, c, d, 0, 0, img.width, img.height);",
      "right" : "image(img, a, b, c, d, 0, 0, img.width, img.height);",
      "info" : "ExpressionStatement[120396-120448]:ExpressionStatement[120974-121026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[120813-121880]:Block[121391-122458]"
    }, {
      "left" : "if (img.width == -1 || img.height == -1)",
      "right" : "if (img.width == -1 || img.height == -1)",
      "info" : "IfStatement[120957-121005]:IfStatement[121535-121583]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[120998-121005]:ReturnStatement[121576-121583]"
    }, {
      "left" : "if (imageMode == CORNER)",
      "right" : "if (imageMode == CORNER)",
      "info" : "IfStatement[121011-121876]:IfStatement[121589-122454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121036-121292]:Block[121614-121870]"
    }, {
      "left" : "if (c < 0)",
      "right" : "if (c < 0)",
      "info" : "IfStatement[121044-121115]:IfStatement[121622-121693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121055-121115]:Block[121633-121693]"
    }, {
      "left" : "a += c;",
      "right" : "a += c;",
      "info" : "ExpressionStatement[121092-121099]:ExpressionStatement[121670-121677]"
    }, {
      "left" : "c = -c;",
      "right" : "c = -c;",
      "info" : "ExpressionStatement[121100-121107]:ExpressionStatement[121678-121685]"
    }, {
      "left" : "if (d < 0)",
      "right" : "if (d < 0)",
      "info" : "IfStatement[121122-121194]:IfStatement[121700-121772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121133-121194]:Block[121711-121772]"
    }, {
      "left" : "b += d;",
      "right" : "b += d;",
      "info" : "ExpressionStatement[121171-121178]:ExpressionStatement[121749-121756]"
    }, {
      "left" : "d = -d;",
      "right" : "d = -d;",
      "info" : "ExpressionStatement[121179-121186]:ExpressionStatement[121757-121764]"
    }, {
      "left" : "imageImpl(img,\n                a, b, a + c, b + d,\n                u1, v1, u2, v2);",
      "right" : "imageImpl(img,\n                a, b, a + c, b + d,\n                u1, v1, u2, v2);",
      "info" : "ExpressionStatement[121202-121285]:ExpressionStatement[121780-121863]"
    }, {
      "left" : "if (imageMode == CORNERS)",
      "right" : "if (imageMode == CORNERS)",
      "info" : "IfStatement[121298-121876]:IfStatement[121876-122454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121324-121607]:Block[121902-122185]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[121332-121421]:IfStatement[121910-121999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121343-121421]:Block[121921-121999]"
    }, {
      "left" : "float temp = a;",
      "right" : "float temp = a;",
      "info" : "VariableDeclarationStatement[121381-121396]:VariableDeclarationStatement[121959-121974]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[121397-121403]:ExpressionStatement[121975-121981]"
    }, {
      "left" : "c = temp;",
      "right" : "c = temp;",
      "info" : "ExpressionStatement[121404-121413]:ExpressionStatement[121982-121991]"
    }, {
      "left" : "if (d < b)",
      "right" : "if (d < b)",
      "info" : "IfStatement[121428-121517]:IfStatement[122006-122095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121439-121517]:Block[122017-122095]"
    }, {
      "left" : "float temp = b;",
      "right" : "float temp = b;",
      "info" : "VariableDeclarationStatement[121477-121492]:VariableDeclarationStatement[122055-122070]"
    }, {
      "left" : "b = d;",
      "right" : "b = d;",
      "info" : "ExpressionStatement[121493-121499]:ExpressionStatement[122071-122077]"
    }, {
      "left" : "d = temp;",
      "right" : "d = temp;",
      "info" : "ExpressionStatement[121500-121509]:ExpressionStatement[122078-122087]"
    }, {
      "left" : "imageImpl(img,\n                a, b, c, d,\n                u1, v1, u2, v2);",
      "right" : "imageImpl(img,\n                a, b, c, d,\n                u1, v1, u2, v2);",
      "info" : "ExpressionStatement[121525-121600]:ExpressionStatement[122103-122178]"
    }, {
      "left" : "if (imageMode == CENTER)",
      "right" : "if (imageMode == CENTER)",
      "info" : "IfStatement[121613-121876]:IfStatement[122191-122454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[121638-121876]:Block[122216-122454]"
    }, {
      "left" : "if (c < 0)",
      "right" : "if (c < 0)",
      "info" : "IfStatement[121680-121698]:IfStatement[122258-122276]"
    }, {
      "left" : "c = -c;",
      "right" : "c = -c;",
      "info" : "ExpressionStatement[121691-121698]:ExpressionStatement[122269-122276]"
    }, {
      "left" : "if (d < 0)",
      "right" : "if (d < 0)",
      "info" : "IfStatement[121705-121723]:IfStatement[122283-122301]"
    }, {
      "left" : "d = -d;",
      "right" : "d = -d;",
      "info" : "ExpressionStatement[121716-121723]:ExpressionStatement[122294-122301]"
    }, {
      "left" : "float x1 = a - c/2;",
      "right" : "float x1 = a - c/2;",
      "info" : "VariableDeclarationStatement[121730-121749]:VariableDeclarationStatement[122308-122327]"
    }, {
      "left" : "float y1 = b - d/2;",
      "right" : "float y1 = b - d/2;",
      "info" : "VariableDeclarationStatement[121756-121775]:VariableDeclarationStatement[122334-122353]"
    }, {
      "left" : "imageImpl(img,\n                x1, y1, x1 + c, y1 + d,\n                u1, v1, u2, v2);",
      "right" : "imageImpl(img,\n                x1, y1, x1 + c, y1 + d,\n                u1, v1, u2, v2);",
      "info" : "ExpressionStatement[121783-121870]:ExpressionStatement[122361-122448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[122344-123226]:Block[122922-123804]"
    }, {
      "left" : "boolean savedStroke = stroke;",
      "right" : "boolean savedStroke = stroke;",
      "info" : "VariableDeclarationStatement[122350-122379]:VariableDeclarationStatement[122928-122957]"
    }, {
      "left" : "int savedTextureMode = textureMode;",
      "right" : "int savedTextureMode = textureMode;",
      "info" : "VariableDeclarationStatement[122416-122451]:VariableDeclarationStatement[122994-123029]"
    }, {
      "left" : "stroke = false;",
      "right" : "stroke = false;",
      "info" : "ExpressionStatement[122457-122472]:ExpressionStatement[123035-123050]"
    }, {
      "left" : "textureMode = IMAGE;",
      "right" : "textureMode = IMAGE;",
      "info" : "ExpressionStatement[122496-122516]:ExpressionStatement[123074-123094]"
    }, {
      "left" : "beginShape(QUADS);",
      "right" : "beginShape(QUADS);",
      "info" : "ExpressionStatement[122866-122884]:ExpressionStatement[123444-123462]"
    }, {
      "left" : "texture(img);",
      "right" : "texture(img);",
      "info" : "ExpressionStatement[122889-122902]:ExpressionStatement[123467-123480]"
    }, {
      "left" : "vertex(x1, y1, u1, v1);",
      "right" : "vertex(x1, y1, u1, v1);",
      "info" : "ExpressionStatement[122907-122930]:ExpressionStatement[123485-123508]"
    }, {
      "left" : "vertex(x1, y2, u1, v2);",
      "right" : "vertex(x1, y2, u1, v2);",
      "info" : "ExpressionStatement[122935-122958]:ExpressionStatement[123513-123536]"
    }, {
      "left" : "vertex(x2, y2, u2, v2);",
      "right" : "vertex(x2, y2, u2, v2);",
      "info" : "ExpressionStatement[122963-122986]:ExpressionStatement[123541-123564]"
    }, {
      "left" : "vertex(x2, y1, u2, v1);",
      "right" : "vertex(x2, y1, u2, v1);",
      "info" : "ExpressionStatement[122991-123014]:ExpressionStatement[123569-123592]"
    }, {
      "left" : "endShape();",
      "right" : "endShape();",
      "info" : "ExpressionStatement[123019-123030]:ExpressionStatement[123597-123608]"
    }, {
      "left" : "stroke = savedStroke;",
      "right" : "stroke = savedStroke;",
      "info" : "ExpressionStatement[123036-123057]:ExpressionStatement[123614-123635]"
    }, {
      "left" : "textureMode = savedTextureMode;",
      "right" : "textureMode = savedTextureMode;",
      "info" : "ExpressionStatement[123086-123117]:ExpressionStatement[123664-123695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124379-124411]:Block[124957-124989]"
    }, {
      "left" : "this.shapeMode = mode;",
      "right" : "this.shapeMode = mode;",
      "info" : "ExpressionStatement[124385-124407]:ExpressionStatement[124963-124985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124448-124909]:Block[125026-125487]"
    }, {
      "left" : "if (shape.isVisible())",
      "right" : "if (shape.isVisible())",
      "info" : "IfStatement[124454-124905]:IfStatement[125032-125483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124477-124905]:Block[125055-125483]"
    }, {
      "left" : "flush();",
      "right" : "flush();",
      "info" : "ExpressionStatement[124645-124653]:ExpressionStatement[125223-125231]"
    }, {
      "left" : "if (shapeMode == CENTER)",
      "right" : "if (shapeMode == CENTER)",
      "info" : "IfStatement[124661-124779]:IfStatement[125239-125357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124686-124779]:Block[125264-125357]"
    }, {
      "left" : "pushMatrix();",
      "right" : "pushMatrix();",
      "info" : "ExpressionStatement[124696-124709]:ExpressionStatement[125274-125287]"
    }, {
      "left" : "translate(-shape.getWidth()/2, -shape.getHeight()/2);",
      "right" : "translate(-shape.getWidth()/2, -shape.getHeight()/2);",
      "info" : "ExpressionStatement[124718-124771]:ExpressionStatement[125296-125349]"
    }, {
      "left" : "shape.draw(this);",
      "right" : "shape.draw(this);",
      "info" : "ExpressionStatement[124787-124804]:ExpressionStatement[125365-125382]"
    }, {
      "left" : "if (shapeMode == CENTER)",
      "right" : "if (shapeMode == CENTER)",
      "info" : "IfStatement[124844-124899]:IfStatement[125422-125477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[124869-124899]:Block[125447-125477]"
    }, {
      "left" : "popMatrix();",
      "right" : "popMatrix();",
      "info" : "ExpressionStatement[124879-124891]:ExpressionStatement[125457-125469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126308-126679]:Block[126886-127257]"
    }, {
      "left" : "if (shape.isVisible())",
      "right" : "if (shape.isVisible())",
      "info" : "IfStatement[126314-126675]:IfStatement[126892-127253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126337-126675]:Block[126915-127253]"
    }, {
      "left" : "flush();",
      "right" : "flush();",
      "info" : "ExpressionStatement[126392-126400]:ExpressionStatement[126970-126978]"
    }, {
      "left" : "pushMatrix();",
      "right" : "pushMatrix();",
      "info" : "ExpressionStatement[126408-126421]:ExpressionStatement[126986-126999]"
    }, {
      "left" : "if (shapeMode == CENTER)",
      "right" : "if (shapeMode == CENTER)",
      "info" : "IfStatement[126429-126625]:IfStatement[127007-127203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126454-126532]:Block[127032-127110]"
    }, {
      "left" : "translate(x - shape.getWidth()/2, y - shape.getHeight()/2);",
      "right" : "translate(x - shape.getWidth()/2, y - shape.getHeight()/2);",
      "info" : "ExpressionStatement[126464-126523]:ExpressionStatement[127042-127101]"
    }, {
      "left" : "if ((shapeMode == CORNER) || (shapeMode == CORNERS))",
      "right" : "if ((shapeMode == CORNER) || (shapeMode == CORNERS))",
      "info" : "IfStatement[126538-126625]:IfStatement[127116-127203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126591-126625]:Block[127169-127203]"
    }, {
      "left" : "translate(x, y);",
      "right" : "translate(x, y);",
      "info" : "ExpressionStatement[126601-126617]:ExpressionStatement[127179-127195]"
    }, {
      "left" : "shape.draw(this);",
      "right" : "shape.draw(this);",
      "info" : "ExpressionStatement[126632-126649]:ExpressionStatement[127210-127227]"
    }, {
      "left" : "popMatrix();",
      "right" : "popMatrix();",
      "info" : "ExpressionStatement[126657-126669]:ExpressionStatement[127235-127247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[126767-126805]:Block[127345-127383]"
    }, {
      "left" : "showMissingWarning(\"shape\");",
      "right" : "showMissingWarning(\"shape\");",
      "info" : "ExpressionStatement[126773-126801]:ExpressionStatement[127351-127379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127053-127793]:Block[127631-128371]"
    }, {
      "left" : "if (shape.isVisible())",
      "right" : "if (shape.isVisible())",
      "info" : "IfStatement[127059-127789]:IfStatement[127637-128367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127082-127789]:Block[127660-128367]"
    }, {
      "left" : "flush();",
      "right" : "flush();",
      "info" : "ExpressionStatement[127137-127145]:ExpressionStatement[127715-127723]"
    }, {
      "left" : "pushMatrix();",
      "right" : "pushMatrix();",
      "info" : "ExpressionStatement[127153-127166]:ExpressionStatement[127731-127744]"
    }, {
      "left" : "if (shapeMode == CENTER)",
      "right" : "if (shapeMode == CENTER)",
      "info" : "IfStatement[127174-127739]:IfStatement[127752-128317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127199-127367]:Block[127777-127945]"
    }, {
      "left" : "translate(a - c/2f, b - d/2f);",
      "right" : "translate(a - c/2f, b - d/2f);",
      "info" : "ExpressionStatement[127268-127298]:ExpressionStatement[127846-127876]"
    }, {
      "left" : "scale(c / shape.getWidth(), d / shape.getHeight());",
      "right" : "scale(c / shape.getWidth(), d / shape.getHeight());",
      "info" : "ExpressionStatement[127307-127358]:ExpressionStatement[127885-127936]"
    }, {
      "left" : "if (shapeMode == CORNER)",
      "right" : "if (shapeMode == CORNER)",
      "info" : "IfStatement[127373-127739]:IfStatement[127951-128317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127398-127493]:Block[127976-128071]"
    }, {
      "left" : "translate(a, b);",
      "right" : "translate(a, b);",
      "info" : "ExpressionStatement[127408-127424]:ExpressionStatement[127986-128002]"
    }, {
      "left" : "scale(c / shape.getWidth(), d / shape.getHeight());",
      "right" : "scale(c / shape.getWidth(), d / shape.getHeight());",
      "info" : "ExpressionStatement[127433-127484]:ExpressionStatement[128011-128062]"
    }, {
      "left" : "if (shapeMode == CORNERS)",
      "right" : "if (shapeMode == CORNERS)",
      "info" : "IfStatement[127499-127739]:IfStatement[128077-128317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127525-127739]:Block[128103-128317]"
    }, {
      "left" : "c -= a;",
      "right" : "c -= a;",
      "info" : "ExpressionStatement[127593-127600]:ExpressionStatement[128171-128178]"
    }, {
      "left" : "d -= b;",
      "right" : "d -= b;",
      "info" : "ExpressionStatement[127609-127616]:ExpressionStatement[128187-128194]"
    }, {
      "left" : "translate(a, b);",
      "right" : "translate(a, b);",
      "info" : "ExpressionStatement[127655-127671]:ExpressionStatement[128233-128249]"
    }, {
      "left" : "scale(c / shape.getWidth(), d / shape.getHeight());",
      "right" : "scale(c / shape.getWidth(), d / shape.getHeight());",
      "info" : "ExpressionStatement[127680-127731]:ExpressionStatement[128258-128309]"
    }, {
      "left" : "shape.draw(this);",
      "right" : "shape.draw(this);",
      "info" : "ExpressionStatement[127746-127763]:ExpressionStatement[128324-128341]"
    }, {
      "left" : "popMatrix();",
      "right" : "popMatrix();",
      "info" : "ExpressionStatement[127771-127783]:ExpressionStatement[128349-128361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[127908-127946]:Block[128486-128524]"
    }, {
      "left" : "showMissingWarning(\"shape\");",
      "right" : "showMissingWarning(\"shape\");",
      "info" : "ExpressionStatement[127914-127942]:ExpressionStatement[128492-128520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[128069-128107]:Block[128647-128685]"
    }, {
      "left" : "textAlign(alignX, BASELINE);",
      "right" : "textAlign(alignX, BASELINE);",
      "info" : "ExpressionStatement[128075-128103]:ExpressionStatement[128653-128681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130132-130186]:Block[130710-130764]"
    }, {
      "left" : "textAlign = alignX;",
      "right" : "textAlign = alignX;",
      "info" : "ExpressionStatement[130138-130157]:ExpressionStatement[130716-130735]"
    }, {
      "left" : "textAlignY = alignY;",
      "right" : "textAlignY = alignY;",
      "info" : "ExpressionStatement[130162-130182]:ExpressionStatement[130740-130760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130670-130790]:Block[131248-131368]"
    }, {
      "left" : "if (textFont == null)",
      "right" : "if (textFont == null)",
      "info" : "IfStatement[130676-130745]:IfStatement[131254-131323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[130698-130745]:Block[131276-131323]"
    }, {
      "left" : "defaultFontOrDeath(\"textAscent\");",
      "right" : "defaultFontOrDeath(\"textAscent\");",
      "info" : "ExpressionStatement[130706-130739]:ExpressionStatement[131284-131317]"
    }, {
      "left" : "return textFont.ascent() * textSize;",
      "right" : "return textFont.ascent() * textSize;",
      "info" : "ReturnStatement[130750-130786]:ReturnStatement[131328-131364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131276-131398]:Block[131854-131976]"
    }, {
      "left" : "if (textFont == null)",
      "right" : "if (textFont == null)",
      "info" : "IfStatement[131282-131352]:IfStatement[131860-131930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[131304-131352]:Block[131882-131930]"
    }, {
      "left" : "defaultFontOrDeath(\"textDescent\");",
      "right" : "defaultFontOrDeath(\"textDescent\");",
      "info" : "ExpressionStatement[131312-131346]:ExpressionStatement[131890-131924]"
    }, {
      "left" : "return textFont.descent() * textSize;",
      "right" : "return textFont.descent() * textSize;",
      "info" : "ReturnStatement[131357-131394]:ReturnStatement[131935-131972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132910-134324]:Block[133488-134902]"
    }, {
      "left" : "if (which != null)",
      "right" : "if (which != null)",
      "info" : "IfStatement[132916-134320]:IfStatement[133494-134898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[132935-134246]:Block[133513-134824]"
    }, {
      "left" : "textFont = which;",
      "right" : "textFont = which;",
      "info" : "ExpressionStatement[132943-132960]:ExpressionStatement[133521-133538]"
    }, {
      "left" : "textSize(which.getDefaultSize());",
      "right" : "textSize(which.getDefaultSize());",
      "info" : "ExpressionStatement[134206-134239]:ExpressionStatement[134784-134817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134252-134320]:Block[134830-134898]"
    }, {
      "left" : "throw new RuntimeException(ERROR_TEXTFONT_NULL_PFONT);",
      "right" : "throw new RuntimeException(ERROR_TEXTFONT_NULL_PFONT);",
      "info" : "ThrowStatement[134260-134314]:ThrowStatement[134838-134892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[134447-134493]:Block[135025-135071]"
    }, {
      "left" : "textFont(which);",
      "right" : "textFont(which);",
      "info" : "ExpressionStatement[134453-134469]:ExpressionStatement[135031-135047]"
    }, {
      "left" : "textSize(size);",
      "right" : "textSize(size);",
      "info" : "ExpressionStatement[134474-134489]:ExpressionStatement[135052-135067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[135069-135101]:Block[135647-135679]"
    }, {
      "left" : "textLeading = leading;",
      "right" : "textLeading = leading;",
      "info" : "ExpressionStatement[135075-135097]:ExpressionStatement[135653-135675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136628-137274]:Block[137206-137852]"
    }, {
      "left" : "if ((mode == LEFT) || (mode == RIGHT))",
      "right" : "if ((mode == LEFT) || (mode == RIGHT))",
      "info" : "IfStatement[136683-136823]:IfStatement[137261-137401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136722-136823]:Block[137300-137401]"
    }, {
      "left" : "showWarning(\"Since Processing 1.0 beta, textMode() is now textAlign().\");",
      "right" : "showWarning(\"Since Processing 1.0 beta, textMode() is now textAlign().\");",
      "info" : "ExpressionStatement[136730-136803]:ExpressionStatement[137308-137381]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[136810-136817]:ReturnStatement[137388-137395]"
    }, {
      "left" : "if (mode == SCREEN)",
      "right" : "if (mode == SCREEN)",
      "info" : "IfStatement[136828-136946]:IfStatement[137406-137524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136848-136946]:Block[137426-137524]"
    }, {
      "left" : "showWarning(\"textMode(SCREEN) has been removed from Processing 2.0.\");",
      "right" : "showWarning(\"textMode(SCREEN) has been removed from Processing 2.0.\");",
      "info" : "ExpressionStatement[136856-136926]:ExpressionStatement[137434-137504]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[136933-136940]:ReturnStatement[137511-137518]"
    }, {
      "left" : "if (textModeCheck(mode))",
      "right" : "if (textModeCheck(mode))",
      "info" : "IfStatement[136952-137270]:IfStatement[137530-137848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[136977-137007]:Block[137555-137585]"
    }, {
      "left" : "textMode = mode;",
      "right" : "textMode = mode;",
      "info" : "ExpressionStatement[136985-137001]:ExpressionStatement[137563-137579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137013-137270]:Block[137591-137848]"
    }, {
      "left" : "String modeStr = String.valueOf(mode);",
      "right" : "String modeStr = String.valueOf(mode);",
      "info" : "VariableDeclarationStatement[137021-137059]:VariableDeclarationStatement[137599-137637]"
    }, {
      "left" : "switch (mode) {\n        case MODEL: modeStr = \"MODEL\"; break;\n        case SHAPE: modeStr = \"SHAPE\"; break;\n      }",
      "right" : "switch (mode) {\n        case MODEL: modeStr = \"MODEL\"; break;\n        case SHAPE: modeStr = \"SHAPE\"; break;\n      }",
      "info" : "SwitchStatement[137066-137181]:SwitchStatement[137644-137759]"
    }, {
      "left" : "case MODEL:",
      "right" : "case MODEL:",
      "info" : "SwitchCase[137090-137101]:SwitchCase[137668-137679]"
    }, {
      "left" : "modeStr = \"MODEL\";",
      "right" : "modeStr = \"MODEL\";",
      "info" : "ExpressionStatement[137102-137120]:ExpressionStatement[137680-137698]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[137121-137127]:BreakStatement[137699-137705]"
    }, {
      "left" : "case SHAPE:",
      "right" : "case SHAPE:",
      "info" : "SwitchCase[137136-137147]:SwitchCase[137714-137725]"
    }, {
      "left" : "modeStr = \"SHAPE\";",
      "right" : "modeStr = \"SHAPE\";",
      "info" : "ExpressionStatement[137148-137166]:ExpressionStatement[137726-137744]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[137167-137173]:BreakStatement[137745-137751]"
    }, {
      "left" : "showWarning(\"textMode(\" + modeStr + \") is not supported by this renderer.\");",
      "right" : "showWarning(\"textMode(\" + modeStr + \") is not supported by this renderer.\");",
      "info" : "ExpressionStatement[137188-137264]:ExpressionStatement[137766-137842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137321-137343]:Block[137899-137921]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[137327-137339]:ReturnStatement[137905-137917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137877-138476]:Block[138455-139054]"
    }, {
      "left" : "if (size <= 0)",
      "right" : "if (size <= 0)",
      "info" : "IfStatement[137943-138314]:IfStatement[138521-138892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[137958-138314]:Block[138536-138892]"
    }, {
      "left" : "System.err.println(\"textSize(\" + size + \") ignored: \" +\n                         \"the text size must be larger than zero\");",
      "right" : "System.err.println(\"textSize(\" + size + \") ignored: \" +\n                         \"the text size must be larger than zero\");",
      "info" : "ExpressionStatement[138171-138294]:ExpressionStatement[138749-138872]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[138301-138308]:ReturnStatement[138879-138886]"
    }, {
      "left" : "if (textFont == null)",
      "right" : "if (textFont == null)",
      "info" : "IfStatement[138319-138392]:IfStatement[138897-138970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138341-138392]:Block[138919-138970]"
    }, {
      "left" : "defaultFontOrDeath(\"textSize\", size);",
      "right" : "defaultFontOrDeath(\"textSize\", size);",
      "info" : "ExpressionStatement[138349-138386]:ExpressionStatement[138927-138964]"
    }, {
      "left" : "textSize = size;",
      "right" : "textSize = size;",
      "info" : "ExpressionStatement[138397-138413]:ExpressionStatement[138975-138991]"
    }, {
      "left" : "textLeading = (textAscent() + textDescent()) * 1.275f;",
      "right" : "textLeading = (textAscent() + textDescent()) * 1.275f;",
      "info" : "ExpressionStatement[138418-138472]:ExpressionStatement[138996-139050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[138627-138709]:Block[139205-139287]"
    }, {
      "left" : "textWidthBuffer[0] = c;",
      "right" : "textWidthBuffer[0] = c;",
      "info" : "ExpressionStatement[138633-138656]:ExpressionStatement[139211-139234]"
    }, {
      "left" : "return textWidthImpl(textWidthBuffer, 0, 1);",
      "right" : "return textWidthImpl(textWidthBuffer, 0, 1);",
      "info" : "ReturnStatement[138661-138705]:ReturnStatement[139239-139283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139187-139830]:Block[139765-140408]"
    }, {
      "left" : "if (textFont == null)",
      "right" : "if (textFont == null)",
      "info" : "IfStatement[139193-139261]:IfStatement[139771-139839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139215-139261]:Block[139793-139839]"
    }, {
      "left" : "defaultFontOrDeath(\"textWidth\");",
      "right" : "defaultFontOrDeath(\"textWidth\");",
      "info" : "ExpressionStatement[139223-139255]:ExpressionStatement[139801-139833]"
    }, {
      "left" : "int length = str.length();",
      "right" : "int length = str.length();",
      "info" : "VariableDeclarationStatement[139267-139293]:VariableDeclarationStatement[139845-139871]"
    }, {
      "left" : "if (length > textWidthBuffer.length)",
      "right" : "if (length > textWidthBuffer.length)",
      "info" : "IfStatement[139298-139389]:IfStatement[139876-139967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139335-139389]:Block[139913-139967]"
    }, {
      "left" : "textWidthBuffer = new char[length + 10];",
      "right" : "textWidthBuffer = new char[length + 10];",
      "info" : "ExpressionStatement[139343-139383]:ExpressionStatement[139921-139961]"
    }, {
      "left" : "str.getChars(0, length, textWidthBuffer, 0);",
      "right" : "str.getChars(0, length, textWidthBuffer, 0);",
      "info" : "ExpressionStatement[139394-139438]:ExpressionStatement[139972-140016]"
    }, {
      "left" : "float wide = 0;",
      "right" : "float wide = 0;",
      "info" : "VariableDeclarationStatement[139444-139459]:VariableDeclarationStatement[140022-140037]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[139464-139478]:VariableDeclarationStatement[140042-140056]"
    }, {
      "left" : "int start = 0;",
      "right" : "int start = 0;",
      "info" : "VariableDeclarationStatement[139483-139497]:VariableDeclarationStatement[140061-140075]"
    }, {
      "left" : "while (index < length)",
      "right" : "while (index < length)",
      "info" : "WhileStatement[139503-139702]:WhileStatement[140081-140280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139526-139702]:Block[140104-140280]"
    }, {
      "left" : "if (textWidthBuffer[index] == '\\n')",
      "right" : "if (textWidthBuffer[index] == '\\n')",
      "info" : "IfStatement[139534-139681]:IfStatement[140112-140259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139570-139681]:Block[140148-140259]"
    }, {
      "left" : "wide = Math.max(wide, textWidthImpl(textWidthBuffer, start, index));",
      "right" : "wide = Math.max(wide, textWidthImpl(textWidthBuffer, start, index));",
      "info" : "ExpressionStatement[139580-139648]:ExpressionStatement[140158-140226]"
    }, {
      "left" : "start = index+1;",
      "right" : "start = index+1;",
      "info" : "ExpressionStatement[139657-139673]:ExpressionStatement[140235-140251]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[139688-139696]:ExpressionStatement[140266-140274]"
    }, {
      "left" : "if (start < length)",
      "right" : "if (start < length)",
      "info" : "IfStatement[139707-139809]:IfStatement[140285-140387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139727-139809]:Block[140305-140387]"
    }, {
      "left" : "wide = Math.max(wide, textWidthImpl(textWidthBuffer, start, index));",
      "right" : "wide = Math.max(wide, textWidthImpl(textWidthBuffer, start, index));",
      "info" : "ExpressionStatement[139735-139803]:ExpressionStatement[140313-140381]"
    }, {
      "left" : "return wide;",
      "right" : "return wide;",
      "info" : "ReturnStatement[139814-139826]:ReturnStatement[140392-140404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[139922-139983]:Block[140500-140561]"
    }, {
      "left" : "return textWidthImpl(chars, start, start + length);",
      "right" : "return textWidthImpl(chars, start, start + length);",
      "info" : "ReturnStatement[139928-139979]:ReturnStatement[140506-140557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140300-140504]:Block[140878-141082]"
    }, {
      "left" : "float wide = 0;",
      "right" : "float wide = 0;",
      "info" : "VariableDeclarationStatement[140306-140321]:VariableDeclarationStatement[140884-140899]"
    }, {
      "left" : "for (int i = start; i < stop; i++)",
      "right" : "for (int i = start; i < stop; i++)",
      "info" : "ForStatement[140326-140483]:ForStatement[140904-141061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[140361-140483]:Block[140939-141061]"
    }, {
      "left" : "wide += textFont.width(buffer[i]) * textSize;",
      "right" : "wide += textFont.width(buffer[i]) * textSize;",
      "info" : "ExpressionStatement[140432-140477]:ExpressionStatement[141010-141055]"
    }, {
      "left" : "return wide;",
      "right" : "return wide;",
      "info" : "ReturnStatement[140488-140500]:ReturnStatement[141066-141078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142112-142513]:Block[142690-143091]"
    }, {
      "left" : "if (textFont == null)",
      "right" : "if (textFont == null)",
      "info" : "IfStatement[142118-142181]:IfStatement[142696-142759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142140-142181]:Block[142718-142759]"
    }, {
      "left" : "defaultFontOrDeath(\"text\");",
      "right" : "defaultFontOrDeath(\"text\");",
      "info" : "ExpressionStatement[142148-142175]:ExpressionStatement[142726-142753]"
    }, {
      "left" : "if (textAlignY == CENTER)",
      "right" : "if (textAlignY == CENTER)",
      "info" : "IfStatement[142187-142438]:IfStatement[142765-143016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142213-142249]:Block[142791-142827]"
    }, {
      "left" : "y += textAscent() / 2;",
      "right" : "y += textAscent() / 2;",
      "info" : "ExpressionStatement[142221-142243]:ExpressionStatement[142799-142821]"
    }, {
      "left" : "if (textAlignY == TOP)",
      "right" : "if (textAlignY == TOP)",
      "info" : "IfStatement[142255-142438]:IfStatement[142833-143016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142278-142310]:Block[142856-142888]"
    }, {
      "left" : "y += textAscent();",
      "right" : "y += textAscent();",
      "info" : "ExpressionStatement[142286-142304]:ExpressionStatement[142864-142882]"
    }, {
      "left" : "if (textAlignY == BOTTOM)",
      "right" : "if (textAlignY == BOTTOM)",
      "info" : "IfStatement[142316-142438]:IfStatement[142894-143016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142342-142438]:Block[142920-143016]"
    }, {
      "left" : "y -= textDescent();",
      "right" : "y -= textDescent();",
      "info" : "ExpressionStatement[142350-142369]:ExpressionStatement[142928-142947]"
    }, {
      "left" : "textBuffer[0] = c;",
      "right" : "textBuffer[0] = c;",
      "info" : "ExpressionStatement[142444-142462]:ExpressionStatement[143022-143040]"
    }, {
      "left" : "textLineAlignImpl(textBuffer, 0, 1, x, y);",
      "right" : "textLineAlignImpl(textBuffer, 0, 1, x, y);",
      "info" : "ExpressionStatement[142467-142509]:ExpressionStatement[143045-143087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[142617-142919]:Block[143195-143497]"
    }, {
      "left" : "if (z != 0)",
      "right" : "if (z != 0)",
      "info" : "IfStatement[142787-142818]:IfStatement[143365-143396]"
    }, {
      "left" : "translate(0, 0, z);",
      "right" : "translate(0, 0, z);",
      "info" : "ExpressionStatement[142799-142818]:ExpressionStatement[143377-143396]"
    }, {
      "left" : "text(c, x, y);",
      "right" : "text(c, x, y);",
      "info" : "ExpressionStatement[142846-142860]:ExpressionStatement[143424-143438]"
    }, {
      "left" : "if (z != 0)",
      "right" : "if (z != 0)",
      "info" : "IfStatement[142883-142915]:IfStatement[143461-143493]"
    }, {
      "left" : "translate(0, 0, -z);",
      "right" : "translate(0, 0, -z);",
      "info" : "ExpressionStatement[142895-142915]:ExpressionStatement[143473-143493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143332-143606]:Block[143910-144184]"
    }, {
      "left" : "if (textFont == null)",
      "right" : "if (textFont == null)",
      "info" : "IfStatement[143338-143401]:IfStatement[143916-143979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143360-143401]:Block[143938-143979]"
    }, {
      "left" : "defaultFontOrDeath(\"text\");",
      "right" : "defaultFontOrDeath(\"text\");",
      "info" : "ExpressionStatement[143368-143395]:ExpressionStatement[143946-143973]"
    }, {
      "left" : "int length = str.length();",
      "right" : "int length = str.length();",
      "info" : "VariableDeclarationStatement[143407-143433]:VariableDeclarationStatement[143985-144011]"
    }, {
      "left" : "if (length > textBuffer.length)",
      "right" : "if (length > textBuffer.length)",
      "info" : "IfStatement[143438-143519]:IfStatement[144016-144097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[143470-143519]:Block[144048-144097]"
    }, {
      "left" : "textBuffer = new char[length + 10];",
      "right" : "textBuffer = new char[length + 10];",
      "info" : "ExpressionStatement[143478-143513]:ExpressionStatement[144056-144091]"
    }, {
      "left" : "str.getChars(0, length, textBuffer, 0);",
      "right" : "str.getChars(0, length, textBuffer, 0);",
      "info" : "ExpressionStatement[143524-143563]:ExpressionStatement[144102-144141]"
    }, {
      "left" : "text(textBuffer, 0, length, x, y);",
      "right" : "text(textBuffer, 0, length, x, y);",
      "info" : "ExpressionStatement[143568-143602]:ExpressionStatement[144146-144180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144118-145357]:Block[144696-145935]"
    }, {
      "left" : "float high = 0;",
      "right" : "float high = 0;",
      "info" : "VariableDeclarationStatement[144189-144204]:VariableDeclarationStatement[144767-144782]"
    }, {
      "left" : "for (int i = start; i < stop; i++)",
      "right" : "for (int i = start; i < stop; i++)",
      "info" : "ForStatement[144226-144335]:ForStatement[144804-144913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144261-144335]:Block[144839-144913]"
    }, {
      "left" : "if (chars[i] == '\\n')",
      "right" : "if (chars[i] == '\\n')",
      "info" : "IfStatement[144269-144329]:IfStatement[144847-144907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144291-144329]:Block[144869-144907]"
    }, {
      "left" : "high += textLeading;",
      "right" : "high += textLeading;",
      "info" : "ExpressionStatement[144301-144321]:ExpressionStatement[144879-144899]"
    }, {
      "left" : "if (textAlignY == CENTER)",
      "right" : "if (textAlignY == CENTER)",
      "info" : "IfStatement[144340-145008]:IfStatement[144918-145586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144366-144591]:Block[144944-145169]"
    }, {
      "left" : "y += (textAscent() - high)/2;",
      "right" : "y += (textAscent() - high)/2;",
      "info" : "ExpressionStatement[144556-144585]:ExpressionStatement[145134-145163]"
    }, {
      "left" : "if (textAlignY == TOP)",
      "right" : "if (textAlignY == TOP)",
      "info" : "IfStatement[144597-145008]:IfStatement[145175-145586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144620-144750]:Block[145198-145328]"
    }, {
      "left" : "y += textAscent();",
      "right" : "y += textAscent();",
      "info" : "ExpressionStatement[144726-144744]:ExpressionStatement[145304-145322]"
    }, {
      "left" : "if (textAlignY == BOTTOM)",
      "right" : "if (textAlignY == BOTTOM)",
      "info" : "IfStatement[144756-145008]:IfStatement[145334-145586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[144782-145008]:Block[145360-145586]"
    }, {
      "left" : "y -= textDescent() + high;",
      "right" : "y -= textDescent() + high;",
      "info" : "ExpressionStatement[144913-144939]:ExpressionStatement[145491-145517]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[145035-145049]:VariableDeclarationStatement[145613-145627]"
    }, {
      "left" : "while (index < stop)",
      "right" : "while (index < stop)",
      "info" : "WhileStatement[145054-145258]:WhileStatement[145632-145836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145075-145258]:Block[145653-145836]"
    }, {
      "left" : "if (chars[index] == '\\n')",
      "right" : "if (chars[index] == '\\n')",
      "info" : "IfStatement[145095-145237]:IfStatement[145673-145815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145121-145237]:Block[145699-145815]"
    }, {
      "left" : "textLineAlignImpl(chars, start, index, x, y);",
      "right" : "textLineAlignImpl(chars, start, index, x, y);",
      "info" : "ExpressionStatement[145131-145176]:ExpressionStatement[145709-145754]"
    }, {
      "left" : "start = index + 1;",
      "right" : "start = index + 1;",
      "info" : "ExpressionStatement[145185-145203]:ExpressionStatement[145763-145781]"
    }, {
      "left" : "y += textLeading;",
      "right" : "y += textLeading;",
      "info" : "ExpressionStatement[145212-145229]:ExpressionStatement[145790-145807]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[145244-145252]:ExpressionStatement[145822-145830]"
    }, {
      "left" : "if (start < stop)",
      "right" : "if (start < stop)",
      "info" : "IfStatement[145263-145353]:IfStatement[145841-145931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145281-145353]:Block[145859-145931]"
    }, {
      "left" : "textLineAlignImpl(chars, start, index, x, y);",
      "right" : "textLineAlignImpl(chars, start, index, x, y);",
      "info" : "ExpressionStatement[145302-145347]:ExpressionStatement[145880-145925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145474-145618]:Block[146052-146196]"
    }, {
      "left" : "if (z != 0)",
      "right" : "if (z != 0)",
      "info" : "IfStatement[145480-145511]:IfStatement[146058-146089]"
    }, {
      "left" : "translate(0, 0, z);",
      "right" : "translate(0, 0, z);",
      "info" : "ExpressionStatement[145492-145511]:ExpressionStatement[146070-146089]"
    }, {
      "left" : "text(str, x, y);",
      "right" : "text(str, x, y);",
      "info" : "ExpressionStatement[145527-145543]:ExpressionStatement[146105-146121]"
    }, {
      "left" : "if (z != 0)",
      "right" : "if (z != 0)",
      "info" : "IfStatement[145566-145598]:IfStatement[146144-146176]"
    }, {
      "left" : "translate(0, 0, -z);",
      "right" : "translate(0, 0, -z);",
      "info" : "ExpressionStatement[145578-145598]:ExpressionStatement[146156-146176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[145721-145880]:Block[146299-146458]"
    }, {
      "left" : "if (z != 0)",
      "right" : "if (z != 0)",
      "info" : "IfStatement[145727-145758]:IfStatement[146305-146336]"
    }, {
      "left" : "translate(0, 0, z);",
      "right" : "translate(0, 0, z);",
      "info" : "ExpressionStatement[145739-145758]:ExpressionStatement[146317-146336]"
    }, {
      "left" : "text(chars, start, stop, x, y);",
      "right" : "text(chars, start, stop, x, y);",
      "info" : "ExpressionStatement[145774-145805]:ExpressionStatement[146352-146383]"
    }, {
      "left" : "if (z != 0)",
      "right" : "if (z != 0)",
      "info" : "IfStatement[145828-145860]:IfStatement[146406-146438]"
    }, {
      "left" : "translate(0, 0, -z);",
      "right" : "translate(0, 0, -z);",
      "info" : "ExpressionStatement[145840-145860]:ExpressionStatement[146418-146438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146835-150381]:Block[147413-150959]"
    }, {
      "left" : "if (textFont == null)",
      "right" : "if (textFont == null)",
      "info" : "IfStatement[146841-146904]:IfStatement[147419-147482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[146863-146904]:Block[147441-147482]"
    }, {
      "left" : "defaultFontOrDeath(\"text\");",
      "right" : "defaultFontOrDeath(\"text\");",
      "info" : "ExpressionStatement[146871-146898]:ExpressionStatement[147449-147476]"
    }, {
      "left" : "float hradius, vradius;",
      "right" : "float hradius, vradius;",
      "info" : "VariableDeclarationStatement[146910-146933]:VariableDeclarationStatement[147488-147511]"
    }, {
      "left" : "switch (rectMode) {\n    case CORNER:\n      x2 += x1; y2 += y1;\n      break;\n    case RADIUS:\n      hradius = x2;\n      vradius = y2;\n      x2 = x1 + hradius;\n      y2 = y1 + vradius;\n      x1 -= hradius;\n      y1 -= vradius;\n      break;\n    case CENTER:\n      hradius = x2 / 2.0f;\n      vradius = y2 / 2.0f;\n      x2 = x1 + hradius;\n      y2 = y1 + vradius;\n      x1 -= hradius;\n      y1 -= vradius;\n    }",
      "right" : "switch (rectMode) {\n    case CORNER:\n      x2 += x1; y2 += y1;\n      break;\n    case RADIUS:\n      hradius = x2;\n      vradius = y2;\n      x2 = x1 + hradius;\n      y2 = y1 + vradius;\n      x1 -= hradius;\n      y1 -= vradius;\n      break;\n    case CENTER:\n      hradius = x2 / 2.0f;\n      vradius = y2 / 2.0f;\n      x2 = x1 + hradius;\n      y2 = y1 + vradius;\n      x1 -= hradius;\n      y1 -= vradius;\n    }",
      "info" : "SwitchStatement[146938-147344]:SwitchStatement[147516-147922]"
    }, {
      "left" : "case CORNER:",
      "right" : "case CORNER:",
      "info" : "SwitchCase[146962-146974]:SwitchCase[147540-147552]"
    }, {
      "left" : "x2 += x1;",
      "right" : "x2 += x1;",
      "info" : "ExpressionStatement[146981-146990]:ExpressionStatement[147559-147568]"
    }, {
      "left" : "y2 += y1;",
      "right" : "y2 += y1;",
      "info" : "ExpressionStatement[146991-147000]:ExpressionStatement[147569-147578]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[147007-147013]:BreakStatement[147585-147591]"
    }, {
      "left" : "case RADIUS:",
      "right" : "case RADIUS:",
      "info" : "SwitchCase[147018-147030]:SwitchCase[147596-147608]"
    }, {
      "left" : "hradius = x2;",
      "right" : "hradius = x2;",
      "info" : "ExpressionStatement[147037-147050]:ExpressionStatement[147615-147628]"
    }, {
      "left" : "vradius = y2;",
      "right" : "vradius = y2;",
      "info" : "ExpressionStatement[147057-147070]:ExpressionStatement[147635-147648]"
    }, {
      "left" : "x2 = x1 + hradius;",
      "right" : "x2 = x1 + hradius;",
      "info" : "ExpressionStatement[147077-147095]:ExpressionStatement[147655-147673]"
    }, {
      "left" : "y2 = y1 + vradius;",
      "right" : "y2 = y1 + vradius;",
      "info" : "ExpressionStatement[147102-147120]:ExpressionStatement[147680-147698]"
    }, {
      "left" : "x1 -= hradius;",
      "right" : "x1 -= hradius;",
      "info" : "ExpressionStatement[147127-147141]:ExpressionStatement[147705-147719]"
    }, {
      "left" : "y1 -= vradius;",
      "right" : "y1 -= vradius;",
      "info" : "ExpressionStatement[147148-147162]:ExpressionStatement[147726-147740]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[147169-147175]:BreakStatement[147747-147753]"
    }, {
      "left" : "case CENTER:",
      "right" : "case CENTER:",
      "info" : "SwitchCase[147180-147192]:SwitchCase[147758-147770]"
    }, {
      "left" : "hradius = x2 / 2.0f;",
      "right" : "hradius = x2 / 2.0f;",
      "info" : "ExpressionStatement[147199-147219]:ExpressionStatement[147777-147797]"
    }, {
      "left" : "vradius = y2 / 2.0f;",
      "right" : "vradius = y2 / 2.0f;",
      "info" : "ExpressionStatement[147226-147246]:ExpressionStatement[147804-147824]"
    }, {
      "left" : "x2 = x1 + hradius;",
      "right" : "x2 = x1 + hradius;",
      "info" : "ExpressionStatement[147253-147271]:ExpressionStatement[147831-147849]"
    }, {
      "left" : "y2 = y1 + vradius;",
      "right" : "y2 = y1 + vradius;",
      "info" : "ExpressionStatement[147278-147296]:ExpressionStatement[147856-147874]"
    }, {
      "left" : "x1 -= hradius;",
      "right" : "x1 -= hradius;",
      "info" : "ExpressionStatement[147303-147317]:ExpressionStatement[147881-147895]"
    }, {
      "left" : "y1 -= vradius;",
      "right" : "y1 -= vradius;",
      "info" : "ExpressionStatement[147324-147338]:ExpressionStatement[147902-147916]"
    }, {
      "left" : "if (x2 < x1)",
      "right" : "if (x2 < x1)",
      "info" : "IfStatement[147349-147412]:IfStatement[147927-147990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147362-147412]:Block[147940-147990]"
    }, {
      "left" : "float temp = x1;",
      "right" : "float temp = x1;",
      "info" : "VariableDeclarationStatement[147370-147386]:VariableDeclarationStatement[147948-147964]"
    }, {
      "left" : "x1 = x2;",
      "right" : "x1 = x2;",
      "info" : "ExpressionStatement[147387-147395]:ExpressionStatement[147965-147973]"
    }, {
      "left" : "x2 = temp;",
      "right" : "x2 = temp;",
      "info" : "ExpressionStatement[147396-147406]:ExpressionStatement[147974-147984]"
    }, {
      "left" : "if (y2 < y1)",
      "right" : "if (y2 < y1)",
      "info" : "IfStatement[147417-147480]:IfStatement[147995-148058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147430-147480]:Block[148008-148058]"
    }, {
      "left" : "float temp = y1;",
      "right" : "float temp = y1;",
      "info" : "VariableDeclarationStatement[147438-147454]:VariableDeclarationStatement[148016-148032]"
    }, {
      "left" : "y1 = y2;",
      "right" : "y1 = y2;",
      "info" : "ExpressionStatement[147455-147463]:ExpressionStatement[148033-148041]"
    }, {
      "left" : "y2 = temp;",
      "right" : "y2 = temp;",
      "info" : "ExpressionStatement[147464-147474]:ExpressionStatement[148042-148052]"
    }, {
      "left" : "float boxWidth = x2 - x1;",
      "right" : "float boxWidth = x2 - x1;",
      "info" : "VariableDeclarationStatement[147513-147538]:VariableDeclarationStatement[148091-148116]"
    }, {
      "left" : "float spaceWidth = textWidth(' ');",
      "right" : "float spaceWidth = textWidth(' ');",
      "info" : "VariableDeclarationStatement[147758-147792]:VariableDeclarationStatement[148336-148370]"
    }, {
      "left" : "if (textBreakStart == null)",
      "right" : "if (textBreakStart == null)",
      "info" : "IfStatement[147798-147904]:IfStatement[148376-148482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[147826-147904]:Block[148404-148482]"
    }, {
      "left" : "textBreakStart = new int[20];",
      "right" : "textBreakStart = new int[20];",
      "info" : "ExpressionStatement[147834-147863]:ExpressionStatement[148412-148441]"
    }, {
      "left" : "textBreakStop = new int[20];",
      "right" : "textBreakStop = new int[20];",
      "info" : "ExpressionStatement[147870-147898]:ExpressionStatement[148448-148476]"
    }, {
      "left" : "textBreakCount = 0;",
      "right" : "textBreakCount = 0;",
      "info" : "ExpressionStatement[147909-147928]:ExpressionStatement[148487-148506]"
    }, {
      "left" : "int length = str.length();",
      "right" : "int length = str.length();",
      "info" : "VariableDeclarationStatement[147934-147960]:VariableDeclarationStatement[148512-148538]"
    }, {
      "left" : "if (length + 1 > textBuffer.length)",
      "right" : "if (length + 1 > textBuffer.length)",
      "info" : "IfStatement[147965-148049]:IfStatement[148543-148627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148001-148049]:Block[148579-148627]"
    }, {
      "left" : "textBuffer = new char[length + 1];",
      "right" : "textBuffer = new char[length + 1];",
      "info" : "ExpressionStatement[148009-148043]:ExpressionStatement[148587-148621]"
    }, {
      "left" : "str.getChars(0, length, textBuffer, 0);",
      "right" : "str.getChars(0, length, textBuffer, 0);",
      "info" : "ExpressionStatement[148054-148093]:ExpressionStatement[148632-148671]"
    }, {
      "left" : "textBuffer[length++] = '\\n';",
      "right" : "textBuffer[length++] = '\\n';",
      "info" : "ExpressionStatement[148149-148177]:ExpressionStatement[148727-148755]"
    }, {
      "left" : "int sentenceStart = 0;",
      "right" : "int sentenceStart = 0;",
      "info" : "VariableDeclarationStatement[148183-148205]:VariableDeclarationStatement[148761-148783]"
    }, {
      "left" : "for (int i = 0; i < length; i++)",
      "right" : "for (int i = 0; i < length; i++)",
      "info" : "ForStatement[148210-148714]:ForStatement[148788-149292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148243-148714]:Block[148821-149292]"
    }, {
      "left" : "if (textBuffer[i] == '\\n')",
      "right" : "if (textBuffer[i] == '\\n')",
      "info" : "IfStatement[148251-148708]:IfStatement[148829-149286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148278-148708]:Block[148856-149286]"
    }, {
      "left" : "boolean legit =\n          textSentence(textBuffer, sentenceStart, i, boxWidth, spaceWidth);",
      "right" : "boolean legit =\n          textSentence(textBuffer, sentenceStart, i, boxWidth, spaceWidth);",
      "info" : "VariableDeclarationStatement[148430-148521]:VariableDeclarationStatement[149008-149099]"
    }, {
      "left" : "if (!legit)",
      "right" : "if (!legit)",
      "info" : "IfStatement[148530-148548]:IfStatement[149108-149126]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[148542-148548]:BreakStatement[149120-149126]"
    }, {
      "left" : "sentenceStart = i + 1;",
      "right" : "sentenceStart = i + 1;",
      "info" : "ExpressionStatement[148678-148700]:ExpressionStatement[149256-149278]"
    }, {
      "left" : "float lineX = x1;",
      "right" : "float lineX = x1;",
      "info" : "VariableDeclarationStatement[148849-148866]:VariableDeclarationStatement[149427-149444]"
    }, {
      "left" : "if (textAlign == CENTER)",
      "right" : "if (textAlign == CENTER)",
      "info" : "IfStatement[148880-149011]:IfStatement[149458-149589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148905-148947]:Block[149483-149525]"
    }, {
      "left" : "lineX = lineX + boxWidth/2f;",
      "right" : "lineX = lineX + boxWidth/2f;",
      "info" : "ExpressionStatement[148913-148941]:ExpressionStatement[149491-149519]"
    }, {
      "left" : "if (textAlign == RIGHT)",
      "right" : "if (textAlign == RIGHT)",
      "info" : "IfStatement[148953-149011]:IfStatement[149531-149589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[148977-149011]:Block[149555-149589]"
    }, {
      "left" : "lineX = x2;",
      "right" : "lineX = x2;",
      "info" : "ExpressionStatement[148985-148996]:ExpressionStatement[149563-149574]"
    }, {
      "left" : "float boxHeight = y2 - y1;",
      "right" : "float boxHeight = y2 - y1;",
      "info" : "VariableDeclarationStatement[149017-149043]:VariableDeclarationStatement[149595-149621]"
    }, {
      "left" : "float topAndBottom = textAscent() + textDescent();",
      "right" : "float topAndBottom = textAscent() + textDescent();",
      "info" : "VariableDeclarationStatement[149319-149369]:VariableDeclarationStatement[149897-149947]"
    }, {
      "left" : "int lineFitCount = 1 + PApplet.floor((boxHeight - topAndBottom) / textLeading);",
      "right" : "int lineFitCount = 1 + PApplet.floor((boxHeight - topAndBottom) / textLeading);",
      "info" : "VariableDeclarationStatement[149374-149453]:VariableDeclarationStatement[149952-150031]"
    }, {
      "left" : "int lineCount = Math.min(textBreakCount, lineFitCount);",
      "right" : "int lineCount = Math.min(textBreakCount, lineFitCount);",
      "info" : "VariableDeclarationStatement[149458-149513]:VariableDeclarationStatement[150036-150091]"
    }, {
      "left" : "if (textAlignY == CENTER)",
      "right" : "if (textAlignY == CENTER)",
      "info" : "IfStatement[149519-150377]:IfStatement[150097-150955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149545-149850]:Block[150123-150428]"
    }, {
      "left" : "float lineHigh = textAscent() + textLeading * (lineCount - 1);",
      "right" : "float lineHigh = textAscent() + textLeading * (lineCount - 1);",
      "info" : "VariableDeclarationStatement[149553-149615]:VariableDeclarationStatement[150131-150193]"
    }, {
      "left" : "float y = y1 + textAscent() + (boxHeight - lineHigh) / 2;",
      "right" : "float y = y1 + textAscent() + (boxHeight - lineHigh) / 2;",
      "info" : "VariableDeclarationStatement[149622-149679]:VariableDeclarationStatement[150200-150257]"
    }, {
      "left" : "for (int i = 0; i < lineCount; i++)",
      "right" : "for (int i = 0; i < lineCount; i++)",
      "info" : "ForStatement[149686-149843]:ForStatement[150264-150421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149722-149843]:Block[150300-150421]"
    }, {
      "left" : "textLineAlignImpl(textBuffer, textBreakStart[i], textBreakStop[i], lineX, y);",
      "right" : "textLineAlignImpl(textBuffer, textBreakStart[i], textBreakStop[i], lineX, y);",
      "info" : "ExpressionStatement[149732-149809]:ExpressionStatement[150310-150387]"
    }, {
      "left" : "y += textLeading;",
      "right" : "y += textLeading;",
      "info" : "ExpressionStatement[149818-149835]:ExpressionStatement[150396-150413]"
    }, {
      "left" : "if (textAlignY == BOTTOM)",
      "right" : "if (textAlignY == BOTTOM)",
      "info" : "IfStatement[149856-150377]:IfStatement[150434-150955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149882-150122]:Block[150460-150700]"
    }, {
      "left" : "float y = y2 - textDescent() - textLeading * (lineCount - 1);",
      "right" : "float y = y2 - textDescent() - textLeading * (lineCount - 1);",
      "info" : "VariableDeclarationStatement[149890-149951]:VariableDeclarationStatement[150468-150529]"
    }, {
      "left" : "for (int i = 0; i < lineCount; i++)",
      "right" : "for (int i = 0; i < lineCount; i++)",
      "info" : "ForStatement[149958-150115]:ForStatement[150536-150693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[149994-150115]:Block[150572-150693]"
    }, {
      "left" : "textLineAlignImpl(textBuffer, textBreakStart[i], textBreakStop[i], lineX, y);",
      "right" : "textLineAlignImpl(textBuffer, textBreakStart[i], textBreakStop[i], lineX, y);",
      "info" : "ExpressionStatement[150004-150081]:ExpressionStatement[150582-150659]"
    }, {
      "left" : "y += textLeading;",
      "right" : "y += textLeading;",
      "info" : "ExpressionStatement[150090-150107]:ExpressionStatement[150668-150685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150128-150377]:Block[150706-150955]"
    }, {
      "left" : "float y = y1 + textAscent();",
      "right" : "float y = y1 + textAscent();",
      "info" : "VariableDeclarationStatement[150179-150207]:VariableDeclarationStatement[150757-150785]"
    }, {
      "left" : "for (int i = 0; i < lineCount; i++)",
      "right" : "for (int i = 0; i < lineCount; i++)",
      "info" : "ForStatement[150214-150371]:ForStatement[150792-150949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150250-150371]:Block[150828-150949]"
    }, {
      "left" : "textLineAlignImpl(textBuffer, textBreakStart[i], textBreakStop[i], lineX, y);",
      "right" : "textLineAlignImpl(textBuffer, textBreakStart[i], textBreakStop[i], lineX, y);",
      "info" : "ExpressionStatement[150260-150337]:ExpressionStatement[150838-150915]"
    }, {
      "left" : "y += textLeading;",
      "right" : "y += textLeading;",
      "info" : "ExpressionStatement[150346-150363]:ExpressionStatement[150924-150941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150675-152991]:Block[151253-153569]"
    }, {
      "left" : "float runningX = 0;",
      "right" : "float runningX = 0;",
      "info" : "VariableDeclarationStatement[150681-150700]:VariableDeclarationStatement[151259-151278]"
    }, {
      "left" : "int lineStart = start;",
      "right" : "int lineStart = start;",
      "info" : "VariableDeclarationStatement[150847-150869]:VariableDeclarationStatement[151425-151447]"
    }, {
      "left" : "int wordStart = start;",
      "right" : "int wordStart = start;",
      "info" : "VariableDeclarationStatement[150874-150896]:VariableDeclarationStatement[151452-151474]"
    }, {
      "left" : "int index = start;",
      "right" : "int index = start;",
      "info" : "VariableDeclarationStatement[150901-150919]:VariableDeclarationStatement[151479-151497]"
    }, {
      "left" : "while (index <= stop)",
      "right" : "while (index <= stop)",
      "info" : "WhileStatement[150924-152954]:WhileStatement[151502-153532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[150946-152954]:Block[151524-153532]"
    }, {
      "left" : "if ((buffer[index] == ' ') || (index == stop))",
      "right" : "if ((buffer[index] == ' ') || (index == stop))",
      "info" : "IfStatement[151006-152948]:IfStatement[151584-153526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151053-152846]:Block[151631-153424]"
    }, {
      "left" : "float wordWidth = textWidthImpl(buffer, wordStart, index);",
      "right" : "float wordWidth = textWidthImpl(buffer, wordStart, index);",
      "info" : "VariableDeclarationStatement[151063-151121]:VariableDeclarationStatement[151641-151699]"
    }, {
      "left" : "if (runningX + wordWidth >= boxWidth)",
      "right" : "if (runningX + wordWidth >= boxWidth)",
      "info" : "IfStatement[151131-152838]:IfStatement[151709-153416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151169-152383]:Block[151747-152961]"
    }, {
      "left" : "if (runningX != 0)",
      "right" : "if (runningX != 0)",
      "info" : "IfStatement[151181-152290]:IfStatement[151759-152868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151200-151536]:Block[151778-152114]"
    }, {
      "left" : "index = wordStart;",
      "right" : "index = wordStart;",
      "info" : "ExpressionStatement[151287-151305]:ExpressionStatement[151865-151883]"
    }, {
      "left" : "textSentenceBreak(lineStart, index);",
      "right" : "textSentenceBreak(lineStart, index);",
      "info" : "ExpressionStatement[151318-151354]:ExpressionStatement[151896-151932]"
    }, {
      "left" : "while ((index < stop) && (buffer[index] == ' '))",
      "right" : "while ((index < stop) && (buffer[index] == ' '))",
      "info" : "WhileStatement[151437-151524]:WhileStatement[152015-152102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151486-151524]:Block[152064-152102]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[151502-151510]:ExpressionStatement[152080-152088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151542-152290]:Block[152120-152868]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[151809-152168]:DoStatement[152387-152746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151812-152138]:Block[152390-152716]"
    }, {
      "left" : "index--;",
      "right" : "index--;",
      "info" : "ExpressionStatement[151828-151836]:ExpressionStatement[152406-152414]"
    }, {
      "left" : "if (index == wordStart)",
      "right" : "if (index == wordStart)",
      "info" : "IfStatement[151851-152057]:IfStatement[152429-152635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[151875-152057]:Block[152453-152635]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[152015-152028]:ReturnStatement[152593-152606]"
    }, {
      "left" : "wordWidth = textWidthImpl(buffer, wordStart, index);",
      "right" : "wordWidth = textWidthImpl(buffer, wordStart, index);",
      "info" : "ExpressionStatement[152072-152124]:ExpressionStatement[152650-152702]"
    }, {
      "left" : "textSentenceBreak(lineStart, index);",
      "right" : "textSentenceBreak(lineStart, index);",
      "info" : "ExpressionStatement[152242-152278]:ExpressionStatement[152820-152856]"
    }, {
      "left" : "lineStart = index;",
      "right" : "lineStart = index;",
      "info" : "ExpressionStatement[152301-152319]:ExpressionStatement[152879-152897]"
    }, {
      "left" : "wordStart = index;",
      "right" : "wordStart = index;",
      "info" : "ExpressionStatement[152330-152348]:ExpressionStatement[152908-152926]"
    }, {
      "left" : "runningX = 0;",
      "right" : "runningX = 0;",
      "info" : "ExpressionStatement[152359-152372]:ExpressionStatement[152937-152950]"
    }, {
      "left" : "if (index == stop)",
      "right" : "if (index == stop)",
      "info" : "IfStatement[152389-152838]:IfStatement[152967-153416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152408-152626]:Block[152986-153204]"
    }, {
      "left" : "textSentenceBreak(lineStart, index);",
      "right" : "textSentenceBreak(lineStart, index);",
      "info" : "ExpressionStatement[152530-152566]:ExpressionStatement[153108-153144]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[152607-152615]:ExpressionStatement[153185-153193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152632-152838]:Block[153210-153416]"
    }, {
      "left" : "runningX += wordWidth;",
      "right" : "runningX += wordWidth;",
      "info" : "ExpressionStatement[152692-152714]:ExpressionStatement[153270-153292]"
    }, {
      "left" : "wordStart = index ;",
      "right" : "wordStart = index ;",
      "info" : "ExpressionStatement[152725-152744]:ExpressionStatement[153303-153322]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[152820-152828]:ExpressionStatement[153398-153406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[152852-152948]:Block[153430-153526]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[152900-152908]:ExpressionStatement[153478-153486]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[152975-152987]:ReturnStatement[153553-153565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153050-153328]:Block[153628-153906]"
    }, {
      "left" : "if (textBreakCount == textBreakStart.length)",
      "right" : "if (textBreakCount == textBreakStart.length)",
      "info" : "IfStatement[153056-153216]:IfStatement[153634-153794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153101-153216]:Block[153679-153794]"
    }, {
      "left" : "textBreakStart = PApplet.expand(textBreakStart);",
      "right" : "textBreakStart = PApplet.expand(textBreakStart);",
      "info" : "ExpressionStatement[153109-153157]:ExpressionStatement[153687-153735]"
    }, {
      "left" : "textBreakStop = PApplet.expand(textBreakStop);",
      "right" : "textBreakStop = PApplet.expand(textBreakStop);",
      "info" : "ExpressionStatement[153164-153210]:ExpressionStatement[153742-153788]"
    }, {
      "left" : "textBreakStart[textBreakCount] = start;",
      "right" : "textBreakStart[textBreakCount] = start;",
      "info" : "ExpressionStatement[153221-153260]:ExpressionStatement[153799-153838]"
    }, {
      "left" : "textBreakStop[textBreakCount] = stop;",
      "right" : "textBreakStop[textBreakCount] = stop;",
      "info" : "ExpressionStatement[153265-153302]:ExpressionStatement[153843-153880]"
    }, {
      "left" : "textBreakCount++;",
      "right" : "textBreakCount++;",
      "info" : "ExpressionStatement[153307-153324]:ExpressionStatement[153885-153902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153638-153680]:Block[154216-154258]"
    }, {
      "left" : "text(String.valueOf(num), x, y);",
      "right" : "text(String.valueOf(num), x, y);",
      "info" : "ExpressionStatement[153644-153676]:ExpressionStatement[154222-154254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[153738-153783]:Block[154316-154361]"
    }, {
      "left" : "text(String.valueOf(num), x, y, z);",
      "right" : "text(String.valueOf(num), x, y, z);",
      "info" : "ExpressionStatement[153744-153779]:ExpressionStatement[154322-154357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154194-154239]:Block[154772-154817]"
    }, {
      "left" : "text(PApplet.nfs(num, 0, 3), x, y);",
      "right" : "text(PApplet.nfs(num, 0, 3), x, y);",
      "info" : "ExpressionStatement[154200-154235]:ExpressionStatement[154778-154813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154299-154347]:Block[154877-154925]"
    }, {
      "left" : "text(PApplet.nfs(num, 0, 3), x, y, z);",
      "right" : "text(PApplet.nfs(num, 0, 3), x, y, z);",
      "info" : "ExpressionStatement[154305-154343]:ExpressionStatement[154883-154921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154827-155052]:Block[155405-155630]"
    }, {
      "left" : "if (textAlign == CENTER)",
      "right" : "if (textAlign == CENTER)",
      "info" : "IfStatement[154833-155002]:IfStatement[155411-155580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154858-154918]:Block[155436-155496]"
    }, {
      "left" : "x -= textWidthImpl(buffer, start, stop) / 2f;",
      "right" : "x -= textWidthImpl(buffer, start, stop) / 2f;",
      "info" : "ExpressionStatement[154866-154911]:ExpressionStatement[155444-155489]"
    }, {
      "left" : "if (textAlign == RIGHT)",
      "right" : "if (textAlign == RIGHT)",
      "info" : "IfStatement[154924-155002]:IfStatement[155502-155580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[154948-155002]:Block[155526-155580]"
    }, {
      "left" : "x -= textWidthImpl(buffer, start, stop);",
      "right" : "x -= textWidthImpl(buffer, start, stop);",
      "info" : "ExpressionStatement[154956-154996]:ExpressionStatement[155534-155574]"
    }, {
      "left" : "textLineImpl(buffer, start, stop, x, y);",
      "right" : "textLineImpl(buffer, start, stop, x, y);",
      "info" : "ExpressionStatement[155008-155048]:ExpressionStatement[155586-155626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155239-155523]:Block[155817-156101]"
    }, {
      "left" : "for (int index = start; index < stop; index++)",
      "right" : "for (int index = start; index < stop; index++)",
      "info" : "ForStatement[155245-155420]:ForStatement[155823-155998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155292-155420]:Block[155870-155998]"
    }, {
      "left" : "textCharImpl(buffer[index], x, y);",
      "right" : "textCharImpl(buffer[index], x, y);",
      "info" : "ExpressionStatement[155300-155334]:ExpressionStatement[155878-155912]"
    }, {
      "left" : "x += textWidth(buffer[index]);",
      "right" : "x += textWidth(buffer[index]);",
      "info" : "ExpressionStatement[155384-155414]:ExpressionStatement[155962-155992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155583-156450]:Block[156161-157028]"
    }, {
      "left" : "PFont.Glyph glyph = textFont.getGlyph(ch);",
      "right" : "PFont.Glyph glyph = textFont.getGlyph(ch);",
      "info" : "VariableDeclarationStatement[155604-155646]:VariableDeclarationStatement[156182-156224]"
    }, {
      "left" : "if (glyph != null)",
      "right" : "if (glyph != null)",
      "info" : "IfStatement[155651-156446]:IfStatement[156229-157024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155670-156307]:Block[156248-156885]"
    }, {
      "left" : "if (textMode == MODEL)",
      "right" : "if (textMode == MODEL)",
      "info" : "IfStatement[155678-156301]:IfStatement[156256-156879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[155701-156301]:Block[156279-156879]"
    }, {
      "left" : "float high    = glyph.height     / (float) textFont.getSize();",
      "right" : "float high    = glyph.height     / (float) textFont.getSize();",
      "info" : "VariableDeclarationStatement[155711-155773]:VariableDeclarationStatement[156289-156351]"
    }, {
      "left" : "float bwidth  = glyph.width      / (float) textFont.getSize();",
      "right" : "float bwidth  = glyph.width      / (float) textFont.getSize();",
      "info" : "VariableDeclarationStatement[155782-155844]:VariableDeclarationStatement[156360-156422]"
    }, {
      "left" : "float lextent = glyph.leftExtent / (float) textFont.getSize();",
      "right" : "float lextent = glyph.leftExtent / (float) textFont.getSize();",
      "info" : "VariableDeclarationStatement[155853-155915]:VariableDeclarationStatement[156431-156493]"
    }, {
      "left" : "float textent = glyph.topExtent  / (float) textFont.getSize();",
      "right" : "float textent = glyph.topExtent  / (float) textFont.getSize();",
      "info" : "VariableDeclarationStatement[155924-155986]:VariableDeclarationStatement[156502-156564]"
    }, {
      "left" : "float x1 = x + lextent * textSize;",
      "right" : "float x1 = x + lextent * textSize;",
      "info" : "VariableDeclarationStatement[155996-156030]:VariableDeclarationStatement[156574-156608]"
    }, {
      "left" : "float y1 = y - textent * textSize;",
      "right" : "float y1 = y - textent * textSize;",
      "info" : "VariableDeclarationStatement[156039-156073]:VariableDeclarationStatement[156617-156651]"
    }, {
      "left" : "float x2 = x1 + bwidth * textSize;",
      "right" : "float x2 = x1 + bwidth * textSize;",
      "info" : "VariableDeclarationStatement[156082-156116]:VariableDeclarationStatement[156660-156694]"
    }, {
      "left" : "float y2 = y1 + high * textSize;",
      "right" : "float y2 = y1 + high * textSize;",
      "info" : "VariableDeclarationStatement[156125-156157]:VariableDeclarationStatement[156703-156735]"
    }, {
      "left" : "textCharModelImpl(glyph.image,\n                          x1, y1, x2, y2,\n                          glyph.width, glyph.height);",
      "right" : "textCharModelImpl(glyph.image,\n                          x1, y1, x2, y2,\n                          glyph.width, glyph.height);",
      "info" : "ExpressionStatement[156167-156293]:ExpressionStatement[156745-156871]"
    }, {
      "left" : "if (ch != ' ' && ch != 127)",
      "right" : "if (ch != ' ' && ch != 127)",
      "info" : "IfStatement[156313-156446]:IfStatement[156891-157024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156341-156446]:Block[156919-157024]"
    }, {
      "left" : "showWarning(\"No glyph found for the \" + ch + \" (\\\\u\" + PApplet.hex(ch, 4) + \") character\");",
      "right" : "showWarning(\"No glyph found for the \" + ch + \" (\\\\u\" + PApplet.hex(ch, 4) + \") character\");",
      "info" : "ExpressionStatement[156349-156440]:ExpressionStatement[156927-157018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[156687-157302]:Block[157265-157880]"
    }, {
      "left" : "boolean savedTint = tint;",
      "right" : "boolean savedTint = tint;",
      "info" : "VariableDeclarationStatement[156693-156718]:VariableDeclarationStatement[157271-157296]"
    }, {
      "left" : "int savedTintColor = tintColor;",
      "right" : "int savedTintColor = tintColor;",
      "info" : "VariableDeclarationStatement[156723-156754]:VariableDeclarationStatement[157301-157332]"
    }, {
      "left" : "float savedTintR = tintR;",
      "right" : "float savedTintR = tintR;",
      "info" : "VariableDeclarationStatement[156759-156784]:VariableDeclarationStatement[157337-157362]"
    }, {
      "left" : "float savedTintG = tintG;",
      "right" : "float savedTintG = tintG;",
      "info" : "VariableDeclarationStatement[156789-156814]:VariableDeclarationStatement[157367-157392]"
    }, {
      "left" : "float savedTintB = tintB;",
      "right" : "float savedTintB = tintB;",
      "info" : "VariableDeclarationStatement[156819-156844]:VariableDeclarationStatement[157397-157422]"
    }, {
      "left" : "float savedTintA = tintA;",
      "right" : "float savedTintA = tintA;",
      "info" : "VariableDeclarationStatement[156849-156874]:VariableDeclarationStatement[157427-157452]"
    }, {
      "left" : "boolean savedTintAlpha = tintAlpha;",
      "right" : "boolean savedTintAlpha = tintAlpha;",
      "info" : "VariableDeclarationStatement[156879-156914]:VariableDeclarationStatement[157457-157492]"
    }, {
      "left" : "tint = true;",
      "right" : "tint = true;",
      "info" : "ExpressionStatement[156920-156932]:ExpressionStatement[157498-157510]"
    }, {
      "left" : "tintColor = fillColor;",
      "right" : "tintColor = fillColor;",
      "info" : "ExpressionStatement[156937-156959]:ExpressionStatement[157515-157537]"
    }, {
      "left" : "tintR = fillR;",
      "right" : "tintR = fillR;",
      "info" : "ExpressionStatement[156964-156978]:ExpressionStatement[157542-157556]"
    }, {
      "left" : "tintG = fillG;",
      "right" : "tintG = fillG;",
      "info" : "ExpressionStatement[156983-156997]:ExpressionStatement[157561-157575]"
    }, {
      "left" : "tintB = fillB;",
      "right" : "tintB = fillB;",
      "info" : "ExpressionStatement[157002-157016]:ExpressionStatement[157580-157594]"
    }, {
      "left" : "tintA = fillA;",
      "right" : "tintA = fillA;",
      "info" : "ExpressionStatement[157021-157035]:ExpressionStatement[157599-157613]"
    }, {
      "left" : "tintAlpha = fillAlpha;",
      "right" : "tintAlpha = fillAlpha;",
      "info" : "ExpressionStatement[157040-157062]:ExpressionStatement[157618-157640]"
    }, {
      "left" : "imageImpl(glyph, x1, y1, x2, y2, 0, 0, u2, v2);",
      "right" : "imageImpl(glyph, x1, y1, x2, y2, 0, 0, u2, v2);",
      "info" : "ExpressionStatement[157068-157115]:ExpressionStatement[157646-157693]"
    }, {
      "left" : "tint = savedTint;",
      "right" : "tint = savedTint;",
      "info" : "ExpressionStatement[157121-157138]:ExpressionStatement[157699-157716]"
    }, {
      "left" : "tintColor = savedTintColor;",
      "right" : "tintColor = savedTintColor;",
      "info" : "ExpressionStatement[157143-157170]:ExpressionStatement[157721-157748]"
    }, {
      "left" : "tintR = savedTintR;",
      "right" : "tintR = savedTintR;",
      "info" : "ExpressionStatement[157175-157194]:ExpressionStatement[157753-157772]"
    }, {
      "left" : "tintG = savedTintG;",
      "right" : "tintG = savedTintG;",
      "info" : "ExpressionStatement[157199-157218]:ExpressionStatement[157777-157796]"
    }, {
      "left" : "tintB = savedTintB;",
      "right" : "tintB = savedTintB;",
      "info" : "ExpressionStatement[157223-157242]:ExpressionStatement[157801-157820]"
    }, {
      "left" : "tintA = savedTintA;",
      "right" : "tintA = savedTintA;",
      "info" : "ExpressionStatement[157247-157266]:ExpressionStatement[157825-157844]"
    }, {
      "left" : "tintAlpha = savedTintAlpha;",
      "right" : "tintAlpha = savedTintAlpha;",
      "info" : "ExpressionStatement[157271-157298]:ExpressionStatement[157849-157876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[159007-159206]:Block[159585-159784]"
    }, {
      "left" : "Frame frame = parent.getFrame();",
      "right" : "Frame frame = parent.getFrame();",
      "info" : "VariableDeclarationStatement[159024-159056]:VariableDeclarationStatement[159602-159634]"
    }, {
      "left" : "if (frame != null)",
      "right" : "if (frame != null)",
      "info" : "IfStatement[159061-159141]:IfStatement[159639-159719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[159080-159141]:Block[159658-159719]"
    }, {
      "left" : "return frame.getToolkit().getFontMetrics(font);",
      "right" : "return frame.getToolkit().getFontMetrics(font);",
      "info" : "ReturnStatement[159088-159135]:ReturnStatement[159666-159713]"
    }, {
      "left" : "return Toolkit.getDefaultToolkit().getFontMetrics(font);",
      "right" : "return Toolkit.getDefaultToolkit().getFontMetrics(font);",
      "info" : "ReturnStatement[159146-159202]:ReturnStatement[159724-159780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[159354-159426]:Block[159932-160004]"
    }, {
      "left" : "return getFontMetrics(font).getFontRenderContext();",
      "right" : "return getFontMetrics(font).getFontRenderContext();",
      "info" : "ReturnStatement[159371-159422]:ReturnStatement[159949-160000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[160455-160497]:Block[161033-161075]"
    }, {
      "left" : "showMethodWarning(\"pushMatrix\");",
      "right" : "showMethodWarning(\"pushMatrix\");",
      "info" : "ExpressionStatement[160461-160493]:ExpressionStatement[161039-161071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[161184-161225]:Block[161762-161803]"
    }, {
      "left" : "showMethodWarning(\"popMatrix\");",
      "right" : "showMethodWarning(\"popMatrix\");",
      "info" : "ExpressionStatement[161190-161221]:ExpressionStatement[161768-161799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[162706-162748]:Block[163284-163326]"
    }, {
      "left" : "showMissingWarning(\"translate\");",
      "right" : "showMissingWarning(\"translate\");",
      "info" : "ExpressionStatement[162712-162744]:ExpressionStatement[163290-163322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[162857-162899]:Block[163435-163477]"
    }, {
      "left" : "showMissingWarning(\"translate\");",
      "right" : "showMissingWarning(\"translate\");",
      "info" : "ExpressionStatement[162863-162895]:ExpressionStatement[163441-163473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[164267-164306]:Block[164845-164884]"
    }, {
      "left" : "showMissingWarning(\"rotate\");",
      "right" : "showMissingWarning(\"rotate\");",
      "info" : "ExpressionStatement[164273-164302]:ExpressionStatement[164851-164880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[165639-165678]:Block[166217-166256]"
    }, {
      "left" : "showMethodWarning(\"rotateX\");",
      "right" : "showMethodWarning(\"rotateX\");",
      "info" : "ExpressionStatement[165645-165674]:ExpressionStatement[166223-166252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[167012-167051]:Block[167590-167629]"
    }, {
      "left" : "showMethodWarning(\"rotateY\");",
      "right" : "showMethodWarning(\"rotateY\");",
      "info" : "ExpressionStatement[167018-167047]:ExpressionStatement[167596-167625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168385-168424]:Block[168963-169002]"
    }, {
      "left" : "showMethodWarning(\"rotateZ\");",
      "right" : "showMethodWarning(\"rotateZ\");",
      "info" : "ExpressionStatement[168391-168420]:ExpressionStatement[168969-168998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[168636-168675]:Block[169214-169253]"
    }, {
      "left" : "showMissingWarning(\"rotate\");",
      "right" : "showMissingWarning(\"rotate\");",
      "info" : "ExpressionStatement[168642-168671]:ExpressionStatement[169220-169249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170026-170064]:Block[170604-170642]"
    }, {
      "left" : "showMissingWarning(\"scale\");",
      "right" : "showMissingWarning(\"scale\");",
      "info" : "ExpressionStatement[170032-170060]:ExpressionStatement[170610-170638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170464-170502]:Block[171042-171080]"
    }, {
      "left" : "showMissingWarning(\"scale\");",
      "right" : "showMissingWarning(\"scale\");",
      "info" : "ExpressionStatement[170470-170498]:ExpressionStatement[171048-171076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[170623-170661]:Block[171201-171239]"
    }, {
      "left" : "showMissingWarning(\"scale\");",
      "right" : "showMissingWarning(\"scale\");",
      "info" : "ExpressionStatement[170629-170657]:ExpressionStatement[171207-171235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[172056-172095]:Block[172634-172673]"
    }, {
      "left" : "showMissingWarning(\"shearX\");",
      "right" : "showMissingWarning(\"shearX\");",
      "info" : "ExpressionStatement[172062-172091]:ExpressionStatement[172640-172669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[173490-173529]:Block[174068-174107]"
    }, {
      "left" : "showMissingWarning(\"shearY\");",
      "right" : "showMissingWarning(\"shearY\");",
      "info" : "ExpressionStatement[173496-173525]:ExpressionStatement[174074-174103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174039-174082]:Block[174617-174660]"
    }, {
      "left" : "showMethodWarning(\"resetMatrix\");",
      "right" : "showMethodWarning(\"resetMatrix\");",
      "info" : "ExpressionStatement[174045-174078]:ExpressionStatement[174623-174656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174661-174835]:Block[175239-175413]"
    }, {
      "left" : "if (source instanceof PMatrix2D)",
      "right" : "if (source instanceof PMatrix2D)",
      "info" : "IfStatement[174667-174831]:IfStatement[175245-175409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174700-174746]:Block[175278-175324]"
    }, {
      "left" : "applyMatrix((PMatrix2D) source);",
      "right" : "applyMatrix((PMatrix2D) source);",
      "info" : "ExpressionStatement[174708-174740]:ExpressionStatement[175286-175318]"
    }, {
      "left" : "if (source instanceof PMatrix3D)",
      "right" : "if (source instanceof PMatrix3D)",
      "info" : "IfStatement[174752-174831]:IfStatement[175330-175409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174785-174831]:Block[175363-175409]"
    }, {
      "left" : "applyMatrix((PMatrix3D) source);",
      "right" : "applyMatrix((PMatrix3D) source);",
      "info" : "ExpressionStatement[174793-174825]:ExpressionStatement[175371-175403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[174882-174992]:Block[175460-175570]"
    }, {
      "left" : "applyMatrix(source.m00, source.m01, source.m02,\n                source.m10, source.m11, source.m12);",
      "right" : "applyMatrix(source.m00, source.m01, source.m02,\n                source.m10, source.m11, source.m12);",
      "info" : "ExpressionStatement[174888-174988]:ExpressionStatement[175466-175566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175539-175583]:Block[176117-176161]"
    }, {
      "left" : "showMissingWarning(\"applyMatrix\");",
      "right" : "showMissingWarning(\"applyMatrix\");",
      "info" : "ExpressionStatement[175545-175579]:ExpressionStatement[176123-176157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[175629-175891]:Block[176207-176469]"
    }, {
      "left" : "applyMatrix(source.m00, source.m01, source.m02, source.m03,\n                source.m10, source.m11, source.m12, source.m13,\n                source.m20, source.m21, source.m22, source.m23,\n                source.m30, source.m31, source.m32, source.m33);",
      "right" : "applyMatrix(source.m00, source.m01, source.m02, source.m03,\n                source.m10, source.m11, source.m12, source.m13,\n                source.m20, source.m21, source.m22, source.m23,\n                source.m30, source.m31, source.m32, source.m33);",
      "info" : "ExpressionStatement[175635-175887]:ExpressionStatement[176213-176465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[176876-176920]:Block[177454-177498]"
    }, {
      "left" : "showMissingWarning(\"applyMatrix\");",
      "right" : "showMissingWarning(\"applyMatrix\");",
      "info" : "ExpressionStatement[176882-176916]:ExpressionStatement[177460-177494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177047-177106]:Block[177625-177684]"
    }, {
      "left" : "showMissingWarning(\"getMatrix\");",
      "right" : "showMissingWarning(\"getMatrix\");",
      "info" : "ExpressionStatement[177053-177085]:ExpressionStatement[177631-177663]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[177090-177102]:ReturnStatement[177668-177680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177281-177340]:Block[177859-177918]"
    }, {
      "left" : "showMissingWarning(\"getMatrix\");",
      "right" : "showMissingWarning(\"getMatrix\");",
      "info" : "ExpressionStatement[177287-177319]:ExpressionStatement[177865-177897]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[177324-177336]:ReturnStatement[177902-177914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177515-177574]:Block[178093-178152]"
    }, {
      "left" : "showMissingWarning(\"getMatrix\");",
      "right" : "showMissingWarning(\"getMatrix\");",
      "info" : "ExpressionStatement[177521-177553]:ExpressionStatement[178099-178131]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[177558-177570]:ReturnStatement[178136-178148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177700-177870]:Block[178278-178448]"
    }, {
      "left" : "if (source instanceof PMatrix2D)",
      "right" : "if (source instanceof PMatrix2D)",
      "info" : "IfStatement[177706-177866]:IfStatement[178284-178444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177739-177783]:Block[178317-178361]"
    }, {
      "left" : "setMatrix((PMatrix2D) source);",
      "right" : "setMatrix((PMatrix2D) source);",
      "info" : "ExpressionStatement[177747-177777]:ExpressionStatement[178325-178355]"
    }, {
      "left" : "if (source instanceof PMatrix3D)",
      "right" : "if (source instanceof PMatrix3D)",
      "info" : "IfStatement[177789-177866]:IfStatement[178367-178444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[177822-177866]:Block[178400-178444]"
    }, {
      "left" : "setMatrix((PMatrix3D) source);",
      "right" : "setMatrix((PMatrix3D) source);",
      "info" : "ExpressionStatement[177830-177860]:ExpressionStatement[178408-178438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178004-178046]:Block[178582-178624]"
    }, {
      "left" : "showMissingWarning(\"setMatrix\");",
      "right" : "showMissingWarning(\"setMatrix\");",
      "info" : "ExpressionStatement[178010-178042]:ExpressionStatement[178588-178620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178180-178222]:Block[178758-178800]"
    }, {
      "left" : "showMissingWarning(\"setMatrix\");",
      "right" : "showMissingWarning(\"setMatrix\");",
      "info" : "ExpressionStatement[178186-178218]:ExpressionStatement[178764-178796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[178620-178663]:Block[179198-179241]"
    }, {
      "left" : "showMethodWarning(\"printMatrix\");",
      "right" : "showMethodWarning(\"printMatrix\");",
      "info" : "ExpressionStatement[178626-178659]:ExpressionStatement[179204-179237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[180300-180343]:Block[180878-180921]"
    }, {
      "left" : "showMethodWarning(\"beginCamera\");",
      "right" : "showMethodWarning(\"beginCamera\");",
      "info" : "ExpressionStatement[180306-180339]:ExpressionStatement[180884-180917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[180822-180863]:Block[181400-181441]"
    }, {
      "left" : "showMethodWarning(\"endCamera\");",
      "right" : "showMethodWarning(\"endCamera\");",
      "info" : "ExpressionStatement[180828-180859]:ExpressionStatement[181406-181437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[181813-181852]:Block[182391-182430]"
    }, {
      "left" : "showMissingWarning(\"camera\");",
      "right" : "showMissingWarning(\"camera\");",
      "info" : "ExpressionStatement[181819-181848]:ExpressionStatement[182397-182426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182456-182495]:Block[183034-183073]"
    }, {
      "left" : "showMissingWarning(\"camera\");",
      "right" : "showMissingWarning(\"camera\");",
      "info" : "ExpressionStatement[182462-182491]:ExpressionStatement[183040-183069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[182847-182890]:Block[183425-183468]"
    }, {
      "left" : "showMethodWarning(\"printCamera\");",
      "right" : "showMethodWarning(\"printCamera\");",
      "info" : "ExpressionStatement[182853-182886]:ExpressionStatement[183431-183464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[183676-183714]:Block[184254-184292]"
    }, {
      "left" : "showMissingWarning(\"ortho\");",
      "right" : "showMissingWarning(\"ortho\");",
      "info" : "ExpressionStatement[183682-183710]:ExpressionStatement[184260-184288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184026-184064]:Block[184604-184642]"
    }, {
      "left" : "showMissingWarning(\"ortho\");",
      "right" : "showMissingWarning(\"ortho\");",
      "info" : "ExpressionStatement[184032-184060]:ExpressionStatement[184610-184638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[184345-184383]:Block[184923-184961]"
    }, {
      "left" : "showMissingWarning(\"ortho\");",
      "right" : "showMissingWarning(\"ortho\");",
      "info" : "ExpressionStatement[184351-184379]:ExpressionStatement[184929-184957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[185296-185340]:Block[185874-185918]"
    }, {
      "left" : "showMissingWarning(\"perspective\");",
      "right" : "showMissingWarning(\"perspective\");",
      "info" : "ExpressionStatement[185302-185336]:ExpressionStatement[185880-185914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[185658-185702]:Block[186236-186280]"
    }, {
      "left" : "showMissingWarning(\"perspective\");",
      "right" : "showMissingWarning(\"perspective\");",
      "info" : "ExpressionStatement[185664-185698]:ExpressionStatement[186242-186276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[186740-186779]:Block[187318-187357]"
    }, {
      "left" : "showMethodWarning(\"frustum\");",
      "right" : "showMethodWarning(\"frustum\");",
      "info" : "ExpressionStatement[186746-186775]:ExpressionStatement[187324-187353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[187156-187203]:Block[187734-187781]"
    }, {
      "left" : "showMethodWarning(\"printProjection\");",
      "right" : "showMethodWarning(\"printProjection\");",
      "info" : "ExpressionStatement[187162-187199]:ExpressionStatement[187740-187777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[187797-187851]:Block[188375-188429]"
    }, {
      "left" : "showMissingWarning(\"screenX\");",
      "right" : "showMissingWarning(\"screenX\");",
      "info" : "ExpressionStatement[187803-187833]:ExpressionStatement[188381-188411]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[187838-187847]:ReturnStatement[188416-188425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[188353-188407]:Block[188931-188985]"
    }, {
      "left" : "showMissingWarning(\"screenY\");",
      "right" : "showMissingWarning(\"screenY\");",
      "info" : "ExpressionStatement[188359-188389]:ExpressionStatement[188937-188967]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[188394-188403]:ReturnStatement[188972-188981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[188515-188569]:Block[189093-189147]"
    }, {
      "left" : "showMissingWarning(\"screenX\");",
      "right" : "showMissingWarning(\"screenX\");",
      "info" : "ExpressionStatement[188521-188551]:ExpressionStatement[189099-189129]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[188556-188565]:ReturnStatement[189134-189143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[188677-188731]:Block[189255-189309]"
    }, {
      "left" : "showMissingWarning(\"screenY\");",
      "right" : "showMissingWarning(\"screenY\");",
      "info" : "ExpressionStatement[188683-188713]:ExpressionStatement[189261-189291]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[188718-188727]:ReturnStatement[189296-189305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[189286-189340]:Block[189864-189918]"
    }, {
      "left" : "showMissingWarning(\"screenZ\");",
      "right" : "showMissingWarning(\"screenZ\");",
      "info" : "ExpressionStatement[189292-189322]:ExpressionStatement[189870-189900]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[189327-189336]:ReturnStatement[189905-189914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[190533-190586]:Block[191111-191164]"
    }, {
      "left" : "showMissingWarning(\"modelX\");",
      "right" : "showMissingWarning(\"modelX\");",
      "info" : "ExpressionStatement[190539-190568]:ExpressionStatement[191117-191146]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[190573-190582]:ReturnStatement[191151-191160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[191780-191833]:Block[192358-192411]"
    }, {
      "left" : "showMissingWarning(\"modelY\");",
      "right" : "showMissingWarning(\"modelY\");",
      "info" : "ExpressionStatement[191786-191815]:ExpressionStatement[192364-192393]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[191820-191829]:ReturnStatement[192398-192407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[193027-193080]:Block[193605-193658]"
    }, {
      "left" : "showMissingWarning(\"modelZ\");",
      "right" : "showMissingWarning(\"modelZ\");",
      "info" : "ExpressionStatement[193033-193062]:ExpressionStatement[193611-193640]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[193067-193076]:ReturnStatement[193645-193654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194252-194535]:Block[194830-195113]"
    }, {
      "left" : "if (styleStackDepth == styleStack.length)",
      "right" : "if (styleStackDepth == styleStack.length)",
      "info" : "IfStatement[194258-194365]:IfStatement[194836-194943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194300-194365]:Block[194878-194943]"
    }, {
      "left" : "styleStack = (PStyle[]) PApplet.expand(styleStack);",
      "right" : "styleStack = (PStyle[]) PApplet.expand(styleStack);",
      "info" : "ExpressionStatement[194308-194359]:ExpressionStatement[194886-194937]"
    }, {
      "left" : "if (styleStack[styleStackDepth] == null)",
      "right" : "if (styleStack[styleStackDepth] == null)",
      "info" : "IfStatement[194370-194468]:IfStatement[194948-195046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[194411-194468]:Block[194989-195046]"
    }, {
      "left" : "styleStack[styleStackDepth] = new PStyle();",
      "right" : "styleStack[styleStackDepth] = new PStyle();",
      "info" : "ExpressionStatement[194419-194462]:ExpressionStatement[194997-195040]"
    }, {
      "left" : "PStyle s = styleStack[styleStackDepth++];",
      "right" : "PStyle s = styleStack[styleStackDepth++];",
      "info" : "VariableDeclarationStatement[194473-194514]:VariableDeclarationStatement[195051-195092]"
    }, {
      "left" : "getStyle(s);",
      "right" : "getStyle(s);",
      "info" : "ExpressionStatement[194519-194531]:ExpressionStatement[195097-195109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195235-195425]:Block[195813-196003]"
    }, {
      "left" : "if (styleStackDepth == 0)",
      "right" : "if (styleStackDepth == 0)",
      "info" : "IfStatement[195241-195358]:IfStatement[195819-195936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195267-195358]:Block[195845-195936]"
    }, {
      "left" : "throw new RuntimeException(\"Too many popStyle() without enough pushStyle()\");",
      "right" : "throw new RuntimeException(\"Too many popStyle() without enough pushStyle()\");",
      "info" : "ThrowStatement[195275-195352]:ThrowStatement[195853-195930]"
    }, {
      "left" : "styleStackDepth--;",
      "right" : "styleStackDepth--;",
      "info" : "ExpressionStatement[195363-195381]:ExpressionStatement[195941-195959]"
    }, {
      "left" : "style(styleStack[styleStackDepth]);",
      "right" : "style(styleStack[styleStackDepth]);",
      "info" : "ExpressionStatement[195386-195421]:ExpressionStatement[195964-195999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195458-197567]:Block[196036-198145]"
    }, {
      "left" : "imageMode(s.imageMode);",
      "right" : "imageMode(s.imageMode);",
      "info" : "ExpressionStatement[195558-195581]:ExpressionStatement[196136-196159]"
    }, {
      "left" : "rectMode(s.rectMode);",
      "right" : "rectMode(s.rectMode);",
      "info" : "ExpressionStatement[195586-195607]:ExpressionStatement[196164-196185]"
    }, {
      "left" : "ellipseMode(s.ellipseMode);",
      "right" : "ellipseMode(s.ellipseMode);",
      "info" : "ExpressionStatement[195612-195639]:ExpressionStatement[196190-196217]"
    }, {
      "left" : "shapeMode(s.shapeMode);",
      "right" : "shapeMode(s.shapeMode);",
      "info" : "ExpressionStatement[195644-195667]:ExpressionStatement[196222-196245]"
    }, {
      "left" : "blendMode(s.blendMode);",
      "right" : "blendMode(s.blendMode);",
      "info" : "ExpressionStatement[195673-195696]:ExpressionStatement[196251-196274]"
    }, {
      "left" : "if (s.tint)",
      "right" : "if (s.tint)",
      "info" : "IfStatement[195702-195775]:IfStatement[196280-196353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195714-195746]:Block[196292-196324]"
    }, {
      "left" : "tint(s.tintColor);",
      "right" : "tint(s.tintColor);",
      "info" : "ExpressionStatement[195722-195740]:ExpressionStatement[196300-196318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195752-195775]:Block[196330-196353]"
    }, {
      "left" : "noTint();",
      "right" : "noTint();",
      "info" : "ExpressionStatement[195760-195769]:ExpressionStatement[196338-196347]"
    }, {
      "left" : "if (s.fill)",
      "right" : "if (s.fill)",
      "info" : "IfStatement[195780-195853]:IfStatement[196358-196431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195792-195824]:Block[196370-196402]"
    }, {
      "left" : "fill(s.fillColor);",
      "right" : "fill(s.fillColor);",
      "info" : "ExpressionStatement[195800-195818]:ExpressionStatement[196378-196396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195830-195853]:Block[196408-196431]"
    }, {
      "left" : "noFill();",
      "right" : "noFill();",
      "info" : "ExpressionStatement[195838-195847]:ExpressionStatement[196416-196425]"
    }, {
      "left" : "if (s.stroke)",
      "right" : "if (s.stroke)",
      "info" : "IfStatement[195858-195939]:IfStatement[196436-196517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195872-195908]:Block[196450-196486]"
    }, {
      "left" : "stroke(s.strokeColor);",
      "right" : "stroke(s.strokeColor);",
      "info" : "ExpressionStatement[195880-195902]:ExpressionStatement[196458-196480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[195914-195939]:Block[196492-196517]"
    }, {
      "left" : "noStroke();",
      "right" : "noStroke();",
      "info" : "ExpressionStatement[195922-195933]:ExpressionStatement[196500-196511]"
    }, {
      "left" : "strokeWeight(s.strokeWeight);",
      "right" : "strokeWeight(s.strokeWeight);",
      "info" : "ExpressionStatement[195944-195973]:ExpressionStatement[196522-196551]"
    }, {
      "left" : "strokeCap(s.strokeCap);",
      "right" : "strokeCap(s.strokeCap);",
      "info" : "ExpressionStatement[195978-196001]:ExpressionStatement[196556-196579]"
    }, {
      "left" : "strokeJoin(s.strokeJoin);",
      "right" : "strokeJoin(s.strokeJoin);",
      "info" : "ExpressionStatement[196006-196031]:ExpressionStatement[196584-196609]"
    }, {
      "left" : "colorMode(RGB, 1);",
      "right" : "colorMode(RGB, 1);",
      "info" : "ExpressionStatement[196221-196239]:ExpressionStatement[196799-196817]"
    }, {
      "left" : "ambient(s.ambientR, s.ambientG, s.ambientB);",
      "right" : "ambient(s.ambientR, s.ambientG, s.ambientB);",
      "info" : "ExpressionStatement[196244-196288]:ExpressionStatement[196822-196866]"
    }, {
      "left" : "emissive(s.emissiveR, s.emissiveG, s.emissiveB);",
      "right" : "emissive(s.emissiveR, s.emissiveG, s.emissiveB);",
      "info" : "ExpressionStatement[196293-196341]:ExpressionStatement[196871-196919]"
    }, {
      "left" : "specular(s.specularR, s.specularG, s.specularB);",
      "right" : "specular(s.specularR, s.specularG, s.specularB);",
      "info" : "ExpressionStatement[196346-196394]:ExpressionStatement[196924-196972]"
    }, {
      "left" : "shininess(s.shininess);",
      "right" : "shininess(s.shininess);",
      "info" : "ExpressionStatement[196399-196422]:ExpressionStatement[196977-197000]"
    }, {
      "left" : "colorMode(s.colorMode,\n              s.colorModeX, s.colorModeY, s.colorModeZ, s.colorModeA);",
      "right" : "colorMode(s.colorMode,\n              s.colorModeX, s.colorModeY, s.colorModeZ, s.colorModeA);",
      "info" : "ExpressionStatement[196951-197044]:ExpressionStatement[197529-197622]"
    }, {
      "left" : "if (s.textFont != null)",
      "right" : "if (s.textFont != null)",
      "info" : "IfStatement[197345-197450]:IfStatement[197923-198028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197369-197450]:Block[197947-198028]"
    }, {
      "left" : "textFont(s.textFont, s.textSize);",
      "right" : "textFont(s.textFont, s.textSize);",
      "info" : "ExpressionStatement[197377-197410]:ExpressionStatement[197955-197988]"
    }, {
      "left" : "textLeading(s.textLeading);",
      "right" : "textLeading(s.textLeading);",
      "info" : "ExpressionStatement[197417-197444]:ExpressionStatement[197995-198022]"
    }, {
      "left" : "textAlign(s.textAlign, s.textAlignY);",
      "right" : "textAlign(s.textAlign, s.textAlignY);",
      "info" : "ExpressionStatement[197500-197537]:ExpressionStatement[198078-198115]"
    }, {
      "left" : "textMode(s.textMode);",
      "right" : "textMode(s.textMode);",
      "info" : "ExpressionStatement[197542-197563]:ExpressionStatement[198120-198141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197597-197640]:Block[198175-198218]"
    }, {
      "left" : "return getStyle(null);",
      "right" : "return getStyle(null);",
      "info" : "ReturnStatement[197614-197636]:ReturnStatement[198192-198214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197678-198771]:Block[198256-199349]"
    }, {
      "left" : "if (s == null)",
      "right" : "if (s == null)",
      "info" : "IfStatement[197695-197741]:IfStatement[198273-198319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[197710-197741]:Block[198288-198319]"
    }, {
      "left" : "s = new PStyle();",
      "right" : "s = new PStyle();",
      "info" : "ExpressionStatement[197718-197735]:ExpressionStatement[198296-198313]"
    }, {
      "left" : "s.imageMode = imageMode;",
      "right" : "s.imageMode = imageMode;",
      "info" : "ExpressionStatement[197747-197771]:ExpressionStatement[198325-198349]"
    }, {
      "left" : "s.rectMode = rectMode;",
      "right" : "s.rectMode = rectMode;",
      "info" : "ExpressionStatement[197776-197798]:ExpressionStatement[198354-198376]"
    }, {
      "left" : "s.ellipseMode = ellipseMode;",
      "right" : "s.ellipseMode = ellipseMode;",
      "info" : "ExpressionStatement[197803-197831]:ExpressionStatement[198381-198409]"
    }, {
      "left" : "s.shapeMode = shapeMode;",
      "right" : "s.shapeMode = shapeMode;",
      "info" : "ExpressionStatement[197836-197860]:ExpressionStatement[198414-198438]"
    }, {
      "left" : "s.blendMode = blendMode;",
      "right" : "s.blendMode = blendMode;",
      "info" : "ExpressionStatement[197866-197890]:ExpressionStatement[198444-198468]"
    }, {
      "left" : "s.colorMode = colorMode;",
      "right" : "s.colorMode = colorMode;",
      "info" : "ExpressionStatement[197896-197920]:ExpressionStatement[198474-198498]"
    }, {
      "left" : "s.colorModeX = colorModeX;",
      "right" : "s.colorModeX = colorModeX;",
      "info" : "ExpressionStatement[197925-197951]:ExpressionStatement[198503-198529]"
    }, {
      "left" : "s.colorModeY = colorModeY;",
      "right" : "s.colorModeY = colorModeY;",
      "info" : "ExpressionStatement[197956-197982]:ExpressionStatement[198534-198560]"
    }, {
      "left" : "s.colorModeZ = colorModeZ;",
      "right" : "s.colorModeZ = colorModeZ;",
      "info" : "ExpressionStatement[197987-198013]:ExpressionStatement[198565-198591]"
    }, {
      "left" : "s.colorModeA = colorModeA;",
      "right" : "s.colorModeA = colorModeA;",
      "info" : "ExpressionStatement[198018-198044]:ExpressionStatement[198596-198622]"
    }, {
      "left" : "s.tint = tint;",
      "right" : "s.tint = tint;",
      "info" : "ExpressionStatement[198050-198064]:ExpressionStatement[198628-198642]"
    }, {
      "left" : "s.tintColor = tintColor;",
      "right" : "s.tintColor = tintColor;",
      "info" : "ExpressionStatement[198069-198093]:ExpressionStatement[198647-198671]"
    }, {
      "left" : "s.fill = fill;",
      "right" : "s.fill = fill;",
      "info" : "ExpressionStatement[198098-198112]:ExpressionStatement[198676-198690]"
    }, {
      "left" : "s.fillColor = fillColor;",
      "right" : "s.fillColor = fillColor;",
      "info" : "ExpressionStatement[198117-198141]:ExpressionStatement[198695-198719]"
    }, {
      "left" : "s.stroke = stroke;",
      "right" : "s.stroke = stroke;",
      "info" : "ExpressionStatement[198146-198164]:ExpressionStatement[198724-198742]"
    }, {
      "left" : "s.strokeColor = strokeColor;",
      "right" : "s.strokeColor = strokeColor;",
      "info" : "ExpressionStatement[198169-198197]:ExpressionStatement[198747-198775]"
    }, {
      "left" : "s.strokeWeight = strokeWeight;",
      "right" : "s.strokeWeight = strokeWeight;",
      "info" : "ExpressionStatement[198202-198232]:ExpressionStatement[198780-198810]"
    }, {
      "left" : "s.strokeCap = strokeCap;",
      "right" : "s.strokeCap = strokeCap;",
      "info" : "ExpressionStatement[198237-198261]:ExpressionStatement[198815-198839]"
    }, {
      "left" : "s.strokeJoin = strokeJoin;",
      "right" : "s.strokeJoin = strokeJoin;",
      "info" : "ExpressionStatement[198266-198292]:ExpressionStatement[198844-198870]"
    }, {
      "left" : "s.ambientR = ambientR;",
      "right" : "s.ambientR = ambientR;",
      "info" : "ExpressionStatement[198298-198320]:ExpressionStatement[198876-198898]"
    }, {
      "left" : "s.ambientG = ambientG;",
      "right" : "s.ambientG = ambientG;",
      "info" : "ExpressionStatement[198325-198347]:ExpressionStatement[198903-198925]"
    }, {
      "left" : "s.ambientB = ambientB;",
      "right" : "s.ambientB = ambientB;",
      "info" : "ExpressionStatement[198352-198374]:ExpressionStatement[198930-198952]"
    }, {
      "left" : "s.specularR = specularR;",
      "right" : "s.specularR = specularR;",
      "info" : "ExpressionStatement[198379-198403]:ExpressionStatement[198957-198981]"
    }, {
      "left" : "s.specularG = specularG;",
      "right" : "s.specularG = specularG;",
      "info" : "ExpressionStatement[198408-198432]:ExpressionStatement[198986-199010]"
    }, {
      "left" : "s.specularB = specularB;",
      "right" : "s.specularB = specularB;",
      "info" : "ExpressionStatement[198437-198461]:ExpressionStatement[199015-199039]"
    }, {
      "left" : "s.emissiveR = emissiveR;",
      "right" : "s.emissiveR = emissiveR;",
      "info" : "ExpressionStatement[198466-198490]:ExpressionStatement[199044-199068]"
    }, {
      "left" : "s.emissiveG = emissiveG;",
      "right" : "s.emissiveG = emissiveG;",
      "info" : "ExpressionStatement[198495-198519]:ExpressionStatement[199073-199097]"
    }, {
      "left" : "s.emissiveB = emissiveB;",
      "right" : "s.emissiveB = emissiveB;",
      "info" : "ExpressionStatement[198524-198548]:ExpressionStatement[199102-199126]"
    }, {
      "left" : "s.shininess = shininess;",
      "right" : "s.shininess = shininess;",
      "info" : "ExpressionStatement[198553-198577]:ExpressionStatement[199131-199155]"
    }, {
      "left" : "s.textFont = textFont;",
      "right" : "s.textFont = textFont;",
      "info" : "ExpressionStatement[198583-198605]:ExpressionStatement[199161-199183]"
    }, {
      "left" : "s.textAlign = textAlign;",
      "right" : "s.textAlign = textAlign;",
      "info" : "ExpressionStatement[198610-198634]:ExpressionStatement[199188-199212]"
    }, {
      "left" : "s.textAlignY = textAlignY;",
      "right" : "s.textAlignY = textAlignY;",
      "info" : "ExpressionStatement[198639-198665]:ExpressionStatement[199217-199243]"
    }, {
      "left" : "s.textMode = textMode;",
      "right" : "s.textMode = textMode;",
      "info" : "ExpressionStatement[198670-198692]:ExpressionStatement[199248-199270]"
    }, {
      "left" : "s.textSize = textSize;",
      "right" : "s.textSize = textSize;",
      "info" : "ExpressionStatement[198697-198719]:ExpressionStatement[199275-199297]"
    }, {
      "left" : "s.textLeading = textLeading;",
      "right" : "s.textLeading = textLeading;",
      "info" : "ExpressionStatement[198724-198752]:ExpressionStatement[199302-199330]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[198758-198767]:ReturnStatement[199336-199345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[199878-199910]:Block[200456-200488]"
    }, {
      "left" : "strokeWeight = weight;",
      "right" : "strokeWeight = weight;",
      "info" : "ExpressionStatement[199884-199906]:ExpressionStatement[200462-200484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[200733-200761]:Block[201311-201339]"
    }, {
      "left" : "strokeJoin = join;",
      "right" : "strokeJoin = join;",
      "info" : "ExpressionStatement[200739-200757]:ExpressionStatement[201317-201335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[201615-201641]:Block[202193-202219]"
    }, {
      "left" : "strokeCap = cap;",
      "right" : "strokeCap = cap;",
      "info" : "ExpressionStatement[201621-201637]:ExpressionStatement[202199-202215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[202151-202176]:Block[202729-202754]"
    }, {
      "left" : "stroke = false;",
      "right" : "stroke = false;",
      "info" : "ExpressionStatement[202157-202172]:ExpressionStatement[202735-202750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[203677-203724]:Block[204255-204302]"
    }, {
      "left" : "colorCalc(rgb);",
      "right" : "colorCalc(rgb);",
      "info" : "ExpressionStatement[203683-203698]:ExpressionStatement[204261-204276]"
    }, {
      "left" : "strokeFromCalc();",
      "right" : "strokeFromCalc();",
      "info" : "ExpressionStatement[203703-203720]:ExpressionStatement[204281-204298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[203822-203876]:Block[204400-204454]"
    }, {
      "left" : "colorCalc(rgb, alpha);",
      "right" : "colorCalc(rgb, alpha);",
      "info" : "ExpressionStatement[203828-203850]:ExpressionStatement[204406-204428]"
    }, {
      "left" : "strokeFromCalc();",
      "right" : "strokeFromCalc();",
      "info" : "ExpressionStatement[203855-203872]:ExpressionStatement[204433-204450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[203983-204031]:Block[204561-204609]"
    }, {
      "left" : "colorCalc(gray);",
      "right" : "colorCalc(gray);",
      "info" : "ExpressionStatement[203989-204005]:ExpressionStatement[204567-204583]"
    }, {
      "left" : "strokeFromCalc();",
      "right" : "strokeFromCalc();",
      "info" : "ExpressionStatement[204010-204027]:ExpressionStatement[204588-204605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[204080-204135]:Block[204658-204713]"
    }, {
      "left" : "colorCalc(gray, alpha);",
      "right" : "colorCalc(gray, alpha);",
      "info" : "ExpressionStatement[204086-204109]:ExpressionStatement[204664-204687]"
    }, {
      "left" : "strokeFromCalc();",
      "right" : "strokeFromCalc();",
      "info" : "ExpressionStatement[204114-204131]:ExpressionStatement[204692-204709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[204443-204497]:Block[205021-205075]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[204449-204471]:ExpressionStatement[205027-205049]"
    }, {
      "left" : "strokeFromCalc();",
      "right" : "strokeFromCalc();",
      "info" : "ExpressionStatement[204476-204493]:ExpressionStatement[205054-205071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[204564-204625]:Block[205142-205203]"
    }, {
      "left" : "colorCalc(v1, v2, v3, alpha);",
      "right" : "colorCalc(v1, v2, v3, alpha);",
      "info" : "ExpressionStatement[204570-204599]:ExpressionStatement[205148-205177]"
    }, {
      "left" : "strokeFromCalc();",
      "right" : "strokeFromCalc();",
      "info" : "ExpressionStatement[204604-204621]:ExpressionStatement[205182-205199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[204662-204920]:Block[205240-205498]"
    }, {
      "left" : "stroke = true;",
      "right" : "stroke = true;",
      "info" : "ExpressionStatement[204668-204682]:ExpressionStatement[205246-205260]"
    }, {
      "left" : "strokeR = calcR;",
      "right" : "strokeR = calcR;",
      "info" : "ExpressionStatement[204687-204703]:ExpressionStatement[205265-205281]"
    }, {
      "left" : "strokeG = calcG;",
      "right" : "strokeG = calcG;",
      "info" : "ExpressionStatement[204708-204724]:ExpressionStatement[205286-205302]"
    }, {
      "left" : "strokeB = calcB;",
      "right" : "strokeB = calcB;",
      "info" : "ExpressionStatement[204729-204745]:ExpressionStatement[205307-205323]"
    }, {
      "left" : "strokeA = calcA;",
      "right" : "strokeA = calcA;",
      "info" : "ExpressionStatement[204750-204766]:ExpressionStatement[205328-205344]"
    }, {
      "left" : "strokeRi = calcRi;",
      "right" : "strokeRi = calcRi;",
      "info" : "ExpressionStatement[204771-204789]:ExpressionStatement[205349-205367]"
    }, {
      "left" : "strokeGi = calcGi;",
      "right" : "strokeGi = calcGi;",
      "info" : "ExpressionStatement[204794-204812]:ExpressionStatement[205372-205390]"
    }, {
      "left" : "strokeBi = calcBi;",
      "right" : "strokeBi = calcBi;",
      "info" : "ExpressionStatement[204817-204835]:ExpressionStatement[205395-205413]"
    }, {
      "left" : "strokeAi = calcAi;",
      "right" : "strokeAi = calcAi;",
      "info" : "ExpressionStatement[204840-204858]:ExpressionStatement[205418-205436]"
    }, {
      "left" : "strokeColor = calcColor;",
      "right" : "strokeColor = calcColor;",
      "info" : "ExpressionStatement[204863-204887]:ExpressionStatement[205441-205465]"
    }, {
      "left" : "strokeAlpha = calcAlpha;",
      "right" : "strokeAlpha = calcAlpha;",
      "info" : "ExpressionStatement[204892-204916]:ExpressionStatement[205470-205494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[205435-205458]:Block[206013-206036]"
    }, {
      "left" : "tint = false;",
      "right" : "tint = false;",
      "info" : "ExpressionStatement[205441-205454]:ExpressionStatement[206019-206032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[206985-207030]:Block[207563-207608]"
    }, {
      "left" : "colorCalc(rgb);",
      "right" : "colorCalc(rgb);",
      "info" : "ExpressionStatement[206991-207006]:ExpressionStatement[207569-207584]"
    }, {
      "left" : "tintFromCalc();",
      "right" : "tintFromCalc();",
      "info" : "ExpressionStatement[207011-207026]:ExpressionStatement[207589-207604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207125-207177]:Block[207703-207755]"
    }, {
      "left" : "colorCalc(rgb, alpha);",
      "right" : "colorCalc(rgb, alpha);",
      "info" : "ExpressionStatement[207131-207153]:ExpressionStatement[207709-207731]"
    }, {
      "left" : "tintFromCalc();",
      "right" : "tintFromCalc();",
      "info" : "ExpressionStatement[207158-207173]:ExpressionStatement[207736-207751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207282-207328]:Block[207860-207906]"
    }, {
      "left" : "colorCalc(gray);",
      "right" : "colorCalc(gray);",
      "info" : "ExpressionStatement[207288-207304]:ExpressionStatement[207866-207882]"
    }, {
      "left" : "tintFromCalc();",
      "right" : "tintFromCalc();",
      "info" : "ExpressionStatement[207309-207324]:ExpressionStatement[207887-207902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207375-207428]:Block[207953-208006]"
    }, {
      "left" : "colorCalc(gray, alpha);",
      "right" : "colorCalc(gray, alpha);",
      "info" : "ExpressionStatement[207381-207404]:ExpressionStatement[207959-207982]"
    }, {
      "left" : "tintFromCalc();",
      "right" : "tintFromCalc();",
      "info" : "ExpressionStatement[207409-207424]:ExpressionStatement[207987-208002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207696-207748]:Block[208274-208326]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[207702-207724]:ExpressionStatement[208280-208302]"
    }, {
      "left" : "tintFromCalc();",
      "right" : "tintFromCalc();",
      "info" : "ExpressionStatement[207729-207744]:ExpressionStatement[208307-208322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207813-207872]:Block[208391-208450]"
    }, {
      "left" : "colorCalc(v1, v2, v3, alpha);",
      "right" : "colorCalc(v1, v2, v3, alpha);",
      "info" : "ExpressionStatement[207819-207848]:ExpressionStatement[208397-208426]"
    }, {
      "left" : "tintFromCalc();",
      "right" : "tintFromCalc();",
      "info" : "ExpressionStatement[207853-207868]:ExpressionStatement[208431-208446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[207907-208143]:Block[208485-208721]"
    }, {
      "left" : "tint = true;",
      "right" : "tint = true;",
      "info" : "ExpressionStatement[207913-207925]:ExpressionStatement[208491-208503]"
    }, {
      "left" : "tintR = calcR;",
      "right" : "tintR = calcR;",
      "info" : "ExpressionStatement[207930-207944]:ExpressionStatement[208508-208522]"
    }, {
      "left" : "tintG = calcG;",
      "right" : "tintG = calcG;",
      "info" : "ExpressionStatement[207949-207963]:ExpressionStatement[208527-208541]"
    }, {
      "left" : "tintB = calcB;",
      "right" : "tintB = calcB;",
      "info" : "ExpressionStatement[207968-207982]:ExpressionStatement[208546-208560]"
    }, {
      "left" : "tintA = calcA;",
      "right" : "tintA = calcA;",
      "info" : "ExpressionStatement[207987-208001]:ExpressionStatement[208565-208579]"
    }, {
      "left" : "tintRi = calcRi;",
      "right" : "tintRi = calcRi;",
      "info" : "ExpressionStatement[208006-208022]:ExpressionStatement[208584-208600]"
    }, {
      "left" : "tintGi = calcGi;",
      "right" : "tintGi = calcGi;",
      "info" : "ExpressionStatement[208027-208043]:ExpressionStatement[208605-208621]"
    }, {
      "left" : "tintBi = calcBi;",
      "right" : "tintBi = calcBi;",
      "info" : "ExpressionStatement[208048-208064]:ExpressionStatement[208626-208642]"
    }, {
      "left" : "tintAi = calcAi;",
      "right" : "tintAi = calcAi;",
      "info" : "ExpressionStatement[208069-208085]:ExpressionStatement[208647-208663]"
    }, {
      "left" : "tintColor = calcColor;",
      "right" : "tintColor = calcColor;",
      "info" : "ExpressionStatement[208090-208112]:ExpressionStatement[208668-208690]"
    }, {
      "left" : "tintAlpha = calcAlpha;",
      "right" : "tintAlpha = calcAlpha;",
      "info" : "ExpressionStatement[208117-208139]:ExpressionStatement[208695-208717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[208665-208688]:Block[209243-209266]"
    }, {
      "left" : "fill = false;",
      "right" : "fill = false;",
      "info" : "ExpressionStatement[208671-208684]:ExpressionStatement[209249-209262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210285-210330]:Block[210863-210908]"
    }, {
      "left" : "colorCalc(rgb);",
      "right" : "colorCalc(rgb);",
      "info" : "ExpressionStatement[210291-210306]:ExpressionStatement[210869-210884]"
    }, {
      "left" : "fillFromCalc();",
      "right" : "fillFromCalc();",
      "info" : "ExpressionStatement[210311-210326]:ExpressionStatement[210889-210904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210423-210475]:Block[211001-211053]"
    }, {
      "left" : "colorCalc(rgb, alpha);",
      "right" : "colorCalc(rgb, alpha);",
      "info" : "ExpressionStatement[210429-210451]:ExpressionStatement[211007-211029]"
    }, {
      "left" : "fillFromCalc();",
      "right" : "fillFromCalc();",
      "info" : "ExpressionStatement[210456-210471]:ExpressionStatement[211034-211049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210586-210632]:Block[211164-211210]"
    }, {
      "left" : "colorCalc(gray);",
      "right" : "colorCalc(gray);",
      "info" : "ExpressionStatement[210592-210608]:ExpressionStatement[211170-211186]"
    }, {
      "left" : "fillFromCalc();",
      "right" : "fillFromCalc();",
      "info" : "ExpressionStatement[210613-210628]:ExpressionStatement[211191-211206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[210679-210732]:Block[211257-211310]"
    }, {
      "left" : "colorCalc(gray, alpha);",
      "right" : "colorCalc(gray, alpha);",
      "info" : "ExpressionStatement[210685-210708]:ExpressionStatement[211263-211286]"
    }, {
      "left" : "fillFromCalc();",
      "right" : "fillFromCalc();",
      "info" : "ExpressionStatement[210713-210728]:ExpressionStatement[211291-211306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[211011-211063]:Block[211589-211641]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[211017-211039]:ExpressionStatement[211595-211617]"
    }, {
      "left" : "fillFromCalc();",
      "right" : "fillFromCalc();",
      "info" : "ExpressionStatement[211044-211059]:ExpressionStatement[211622-211637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[211128-211187]:Block[211706-211765]"
    }, {
      "left" : "colorCalc(v1, v2, v3, alpha);",
      "right" : "colorCalc(v1, v2, v3, alpha);",
      "info" : "ExpressionStatement[211134-211163]:ExpressionStatement[211712-211741]"
    }, {
      "left" : "fillFromCalc();",
      "right" : "fillFromCalc();",
      "info" : "ExpressionStatement[211168-211183]:ExpressionStatement[211746-211761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[211222-211458]:Block[211800-212036]"
    }, {
      "left" : "fill = true;",
      "right" : "fill = true;",
      "info" : "ExpressionStatement[211228-211240]:ExpressionStatement[211806-211818]"
    }, {
      "left" : "fillR = calcR;",
      "right" : "fillR = calcR;",
      "info" : "ExpressionStatement[211245-211259]:ExpressionStatement[211823-211837]"
    }, {
      "left" : "fillG = calcG;",
      "right" : "fillG = calcG;",
      "info" : "ExpressionStatement[211264-211278]:ExpressionStatement[211842-211856]"
    }, {
      "left" : "fillB = calcB;",
      "right" : "fillB = calcB;",
      "info" : "ExpressionStatement[211283-211297]:ExpressionStatement[211861-211875]"
    }, {
      "left" : "fillA = calcA;",
      "right" : "fillA = calcA;",
      "info" : "ExpressionStatement[211302-211316]:ExpressionStatement[211880-211894]"
    }, {
      "left" : "fillRi = calcRi;",
      "right" : "fillRi = calcRi;",
      "info" : "ExpressionStatement[211321-211337]:ExpressionStatement[211899-211915]"
    }, {
      "left" : "fillGi = calcGi;",
      "right" : "fillGi = calcGi;",
      "info" : "ExpressionStatement[211342-211358]:ExpressionStatement[211920-211936]"
    }, {
      "left" : "fillBi = calcBi;",
      "right" : "fillBi = calcBi;",
      "info" : "ExpressionStatement[211363-211379]:ExpressionStatement[211941-211957]"
    }, {
      "left" : "fillAi = calcAi;",
      "right" : "fillAi = calcAi;",
      "info" : "ExpressionStatement[211384-211400]:ExpressionStatement[211962-211978]"
    }, {
      "left" : "fillColor = calcColor;",
      "right" : "fillColor = calcColor;",
      "info" : "ExpressionStatement[211405-211427]:ExpressionStatement[211983-212005]"
    }, {
      "left" : "fillAlpha = calcAlpha;",
      "right" : "fillAlpha = calcAlpha;",
      "info" : "ExpressionStatement[211432-211454]:ExpressionStatement[212010-212032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[212463-212696]:Block[213041-213274]"
    }, {
      "left" : "colorCalc(rgb);",
      "right" : "colorCalc(rgb);",
      "info" : "ExpressionStatement[212654-212669]:ExpressionStatement[213232-213247]"
    }, {
      "left" : "ambientFromCalc();",
      "right" : "ambientFromCalc();",
      "info" : "ExpressionStatement[212674-212692]:ExpressionStatement[213252-213270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[212803-212852]:Block[213381-213430]"
    }, {
      "left" : "colorCalc(gray);",
      "right" : "colorCalc(gray);",
      "info" : "ExpressionStatement[212809-212825]:ExpressionStatement[213387-213403]"
    }, {
      "left" : "ambientFromCalc();",
      "right" : "ambientFromCalc();",
      "info" : "ExpressionStatement[212830-212848]:ExpressionStatement[213408-213426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213123-213178]:Block[213701-213756]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[213129-213151]:ExpressionStatement[213707-213729]"
    }, {
      "left" : "ambientFromCalc();",
      "right" : "ambientFromCalc();",
      "info" : "ExpressionStatement[213156-213174]:ExpressionStatement[213734-213752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[213216-213340]:Block[213794-213918]"
    }, {
      "left" : "ambientColor = calcColor;",
      "right" : "ambientColor = calcColor;",
      "info" : "ExpressionStatement[213222-213247]:ExpressionStatement[213800-213825]"
    }, {
      "left" : "ambientR = calcR;",
      "right" : "ambientR = calcR;",
      "info" : "ExpressionStatement[213252-213269]:ExpressionStatement[213830-213847]"
    }, {
      "left" : "ambientG = calcG;",
      "right" : "ambientG = calcG;",
      "info" : "ExpressionStatement[213274-213291]:ExpressionStatement[213852-213869]"
    }, {
      "left" : "ambientB = calcB;",
      "right" : "ambientB = calcB;",
      "info" : "ExpressionStatement[213296-213313]:ExpressionStatement[213874-213891]"
    }, {
      "left" : "setAmbient = true;",
      "right" : "setAmbient = true;",
      "info" : "ExpressionStatement[213318-213336]:ExpressionStatement[213896-213914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[214189-214425]:Block[214767-215003]"
    }, {
      "left" : "colorCalc(rgb);",
      "right" : "colorCalc(rgb);",
      "info" : "ExpressionStatement[214382-214397]:ExpressionStatement[214960-214975]"
    }, {
      "left" : "specularFromCalc();",
      "right" : "specularFromCalc();",
      "info" : "ExpressionStatement[214402-214421]:ExpressionStatement[214980-214999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[214527-214577]:Block[215105-215155]"
    }, {
      "left" : "colorCalc(gray);",
      "right" : "colorCalc(gray);",
      "info" : "ExpressionStatement[214533-214549]:ExpressionStatement[215111-215127]"
    }, {
      "left" : "specularFromCalc();",
      "right" : "specularFromCalc();",
      "info" : "ExpressionStatement[214554-214573]:ExpressionStatement[215132-215151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[214850-214906]:Block[215428-215484]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[214856-214878]:ExpressionStatement[215434-215456]"
    }, {
      "left" : "specularFromCalc();",
      "right" : "specularFromCalc();",
      "info" : "ExpressionStatement[214883-214902]:ExpressionStatement[215461-215480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[214945-215050]:Block[215523-215628]"
    }, {
      "left" : "specularColor = calcColor;",
      "right" : "specularColor = calcColor;",
      "info" : "ExpressionStatement[214951-214977]:ExpressionStatement[215529-215555]"
    }, {
      "left" : "specularR = calcR;",
      "right" : "specularR = calcR;",
      "info" : "ExpressionStatement[214982-215000]:ExpressionStatement[215560-215578]"
    }, {
      "left" : "specularG = calcG;",
      "right" : "specularG = calcG;",
      "info" : "ExpressionStatement[215005-215023]:ExpressionStatement[215583-215601]"
    }, {
      "left" : "specularB = calcB;",
      "right" : "specularB = calcB;",
      "info" : "ExpressionStatement[215028-215046]:ExpressionStatement[215606-215624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[215652-215680]:Block[216230-216258]"
    }, {
      "left" : "shininess = shine;",
      "right" : "shininess = shine;",
      "info" : "ExpressionStatement[215658-215676]:ExpressionStatement[216236-216254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216293-216529]:Block[216871-217107]"
    }, {
      "left" : "colorCalc(rgb);",
      "right" : "colorCalc(rgb);",
      "info" : "ExpressionStatement[216486-216501]:ExpressionStatement[217064-217079]"
    }, {
      "left" : "emissiveFromCalc();",
      "right" : "emissiveFromCalc();",
      "info" : "ExpressionStatement[216506-216525]:ExpressionStatement[217084-217103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216636-216686]:Block[217214-217264]"
    }, {
      "left" : "colorCalc(gray);",
      "right" : "colorCalc(gray);",
      "info" : "ExpressionStatement[216642-216658]:ExpressionStatement[217220-217236]"
    }, {
      "left" : "emissiveFromCalc();",
      "right" : "emissiveFromCalc();",
      "info" : "ExpressionStatement[216663-216682]:ExpressionStatement[217241-217260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[216968-217024]:Block[217546-217602]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[216974-216996]:ExpressionStatement[217552-217574]"
    }, {
      "left" : "emissiveFromCalc();",
      "right" : "emissiveFromCalc();",
      "info" : "ExpressionStatement[217001-217020]:ExpressionStatement[217579-217598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[217063-217168]:Block[217641-217746]"
    }, {
      "left" : "emissiveColor = calcColor;",
      "right" : "emissiveColor = calcColor;",
      "info" : "ExpressionStatement[217069-217095]:ExpressionStatement[217647-217673]"
    }, {
      "left" : "emissiveR = calcR;",
      "right" : "emissiveR = calcR;",
      "info" : "ExpressionStatement[217100-217118]:ExpressionStatement[217678-217696]"
    }, {
      "left" : "emissiveG = calcG;",
      "right" : "emissiveG = calcG;",
      "info" : "ExpressionStatement[217123-217141]:ExpressionStatement[217701-217719]"
    }, {
      "left" : "emissiveB = calcB;",
      "right" : "emissiveB = calcB;",
      "info" : "ExpressionStatement[217146-217164]:ExpressionStatement[217724-217742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[218486-218524]:Block[219064-219102]"
    }, {
      "left" : "showMethodWarning(\"lights\");",
      "right" : "showMethodWarning(\"lights\");",
      "info" : "ExpressionStatement[218492-218520]:ExpressionStatement[219070-219098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[219017-219057]:Block[219595-219635]"
    }, {
      "left" : "showMethodWarning(\"noLights\");",
      "right" : "showMethodWarning(\"noLights\");",
      "info" : "ExpressionStatement[219023-219053]:ExpressionStatement[219601-219631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220367-220411]:Block[220945-220989]"
    }, {
      "left" : "showMethodWarning(\"ambientLight\");",
      "right" : "showMethodWarning(\"ambientLight\");",
      "info" : "ExpressionStatement[220373-220407]:ExpressionStatement[220951-220985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[220656-220700]:Block[221234-221278]"
    }, {
      "left" : "showMethodWarning(\"ambientLight\");",
      "right" : "showMethodWarning(\"ambientLight\");",
      "info" : "ExpressionStatement[220662-220696]:ExpressionStatement[221240-221274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[222451-222499]:Block[223029-223077]"
    }, {
      "left" : "showMethodWarning(\"directionalLight\");",
      "right" : "showMethodWarning(\"directionalLight\");",
      "info" : "ExpressionStatement[222457-222495]:ExpressionStatement[223035-223073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[223859-223901]:Block[224437-224479]"
    }, {
      "left" : "showMethodWarning(\"pointLight\");",
      "right" : "showMethodWarning(\"pointLight\");",
      "info" : "ExpressionStatement[223865-223897]:ExpressionStatement[224443-224475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[225727-225768]:Block[226305-226346]"
    }, {
      "left" : "showMethodWarning(\"spotLight\");",
      "right" : "showMethodWarning(\"spotLight\");",
      "info" : "ExpressionStatement[225733-225764]:ExpressionStatement[226311-226342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[227385-227429]:Block[227963-228007]"
    }, {
      "left" : "showMethodWarning(\"lightFalloff\");",
      "right" : "showMethodWarning(\"lightFalloff\");",
      "info" : "ExpressionStatement[227391-227425]:ExpressionStatement[227969-228003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[228692-228737]:Block[229270-229315]"
    }, {
      "left" : "showMethodWarning(\"lightSpecular\");",
      "right" : "showMethodWarning(\"lightSpecular\");",
      "info" : "ExpressionStatement[228698-228733]:ExpressionStatement[229276-229311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[230592-230970]:Block[231170-231548]"
    }, {
      "left" : "colorCalc(rgb);",
      "right" : "colorCalc(rgb);",
      "info" : "ExpressionStatement[230925-230940]:ExpressionStatement[231503-231518]"
    }, {
      "left" : "backgroundFromCalc();",
      "right" : "backgroundFromCalc();",
      "info" : "ExpressionStatement[230945-230966]:ExpressionStatement[231523-231544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[231076-231487]:Block[231654-232065]"
    }, {
      "left" : "colorCalc(rgb, alpha);",
      "right" : "colorCalc(rgb, alpha);",
      "info" : "ExpressionStatement[231435-231457]:ExpressionStatement[232013-232035]"
    }, {
      "left" : "backgroundFromCalc();",
      "right" : "backgroundFromCalc();",
      "info" : "ExpressionStatement[231462-231483]:ExpressionStatement[232040-232061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[231598-231674]:Block[232176-232252]"
    }, {
      "left" : "colorCalc(gray);",
      "right" : "colorCalc(gray);",
      "info" : "ExpressionStatement[231604-231620]:ExpressionStatement[232182-232198]"
    }, {
      "left" : "backgroundFromCalc();",
      "right" : "backgroundFromCalc();",
      "info" : "ExpressionStatement[231625-231646]:ExpressionStatement[232203-232224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[231727-231927]:Block[232305-232505]"
    }, {
      "left" : "if (format == RGB)",
      "right" : "if (format == RGB)",
      "info" : "IfStatement[231733-231923]:IfStatement[232311-232501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[231752-231826]:Block[232330-232404]"
    }, {
      "left" : "background(gray);",
      "right" : "background(gray);",
      "info" : "ExpressionStatement[231760-231777]:ExpressionStatement[232338-232355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[231832-231923]:Block[232410-232501]"
    }, {
      "left" : "colorCalc(gray, alpha);",
      "right" : "colorCalc(gray, alpha);",
      "info" : "ExpressionStatement[231840-231863]:ExpressionStatement[232418-232441]"
    }, {
      "left" : "backgroundFromCalc();",
      "right" : "backgroundFromCalc();",
      "info" : "ExpressionStatement[231870-231891]:ExpressionStatement[232448-232469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[232224-232306]:Block[232802-232884]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[232230-232252]:ExpressionStatement[232808-232830]"
    }, {
      "left" : "backgroundFromCalc();",
      "right" : "backgroundFromCalc();",
      "info" : "ExpressionStatement[232257-232278]:ExpressionStatement[232835-232856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[232377-232442]:Block[232955-233020]"
    }, {
      "left" : "colorCalc(v1, v2, v3, alpha);",
      "right" : "colorCalc(v1, v2, v3, alpha);",
      "info" : "ExpressionStatement[232383-232412]:ExpressionStatement[232961-232990]"
    }, {
      "left" : "backgroundFromCalc();",
      "right" : "backgroundFromCalc();",
      "info" : "ExpressionStatement[232417-232438]:ExpressionStatement[232995-233016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[232505-232538]:Block[233083-233116]"
    }, {
      "left" : "background(0, 0, 0, 0);",
      "right" : "background(0, 0, 0, 0);",
      "info" : "ExpressionStatement[232511-232534]:ExpressionStatement[233089-233112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[232579-233084]:Block[233157-233662]"
    }, {
      "left" : "backgroundR = calcR;",
      "right" : "backgroundR = calcR;",
      "info" : "ExpressionStatement[232585-232605]:ExpressionStatement[233163-233183]"
    }, {
      "left" : "backgroundG = calcG;",
      "right" : "backgroundG = calcG;",
      "info" : "ExpressionStatement[232610-232630]:ExpressionStatement[233188-233208]"
    }, {
      "left" : "backgroundB = calcB;",
      "right" : "backgroundB = calcB;",
      "info" : "ExpressionStatement[232635-232655]:ExpressionStatement[233213-233233]"
    }, {
      "left" : "backgroundA = (format == RGB) ? 1 : calcA;",
      "right" : "backgroundA = (format == RGB) ? 1 : calcA;",
      "info" : "ExpressionStatement[232791-232833]:ExpressionStatement[233369-233411]"
    }, {
      "left" : "backgroundRi = calcRi;",
      "right" : "backgroundRi = calcRi;",
      "info" : "ExpressionStatement[232838-232860]:ExpressionStatement[233416-233438]"
    }, {
      "left" : "backgroundGi = calcGi;",
      "right" : "backgroundGi = calcGi;",
      "info" : "ExpressionStatement[232865-232887]:ExpressionStatement[233443-233465]"
    }, {
      "left" : "backgroundBi = calcBi;",
      "right" : "backgroundBi = calcBi;",
      "info" : "ExpressionStatement[232892-232914]:ExpressionStatement[233470-233492]"
    }, {
      "left" : "backgroundAi = (format == RGB) ? 255 : calcAi;",
      "right" : "backgroundAi = (format == RGB) ? 255 : calcAi;",
      "info" : "ExpressionStatement[232919-232965]:ExpressionStatement[233497-233543]"
    }, {
      "left" : "backgroundAlpha = (format == RGB) ? false : calcAlpha;",
      "right" : "backgroundAlpha = (format == RGB) ? false : calcAlpha;",
      "info" : "ExpressionStatement[232970-233024]:ExpressionStatement[233548-233602]"
    }, {
      "left" : "backgroundColor = calcColor;",
      "right" : "backgroundColor = calcColor;",
      "info" : "ExpressionStatement[233029-233057]:ExpressionStatement[233607-233635]"
    }, {
      "left" : "backgroundImpl();",
      "right" : "backgroundImpl();",
      "info" : "ExpressionStatement[233063-233080]:ExpressionStatement[233641-233658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[233839-234189]:Block[234417-234767]"
    }, {
      "left" : "if ((image.width != width) || (image.height != height))",
      "right" : "if ((image.width != width) || (image.height != height))",
      "info" : "IfStatement[233845-233971]:IfStatement[234423-234549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[233901-233971]:Block[234479-234549]"
    }, {
      "left" : "throw new RuntimeException(ERROR_BACKGROUND_IMAGE_SIZE);",
      "right" : "throw new RuntimeException(ERROR_BACKGROUND_IMAGE_SIZE);",
      "info" : "ThrowStatement[233909-233965]:ThrowStatement[234487-234543]"
    }, {
      "left" : "if ((image.format != RGB) && (image.format != ARGB))",
      "right" : "if ((image.format != RGB) && (image.format != ARGB))",
      "info" : "IfStatement[233976-234101]:IfStatement[234554-234679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[234029-234101]:Block[234607-234679]"
    }, {
      "left" : "throw new RuntimeException(ERROR_BACKGROUND_IMAGE_FORMAT);",
      "right" : "throw new RuntimeException(ERROR_BACKGROUND_IMAGE_FORMAT);",
      "info" : "ThrowStatement[234037-234095]:ThrowStatement[234615-234673]"
    }, {
      "left" : "backgroundColor = 0;",
      "right" : "backgroundColor = 0;",
      "info" : "ExpressionStatement[234106-234126]:ExpressionStatement[234684-234704]"
    }, {
      "left" : "backgroundImpl(image);",
      "right" : "backgroundImpl(image);",
      "info" : "ExpressionStatement[234163-234185]:ExpressionStatement[234741-234763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[234399-234458]:Block[234977-235036]"
    }, {
      "left" : "set(0, 0, image);",
      "right" : "set(0, 0, image);",
      "info" : "ExpressionStatement[234437-234454]:ExpressionStatement[235015-235032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[234765-234915]:Block[235343-235493]"
    }, {
      "left" : "pushStyle();",
      "right" : "pushStyle();",
      "info" : "ExpressionStatement[234771-234783]:ExpressionStatement[235349-235361]"
    }, {
      "left" : "pushMatrix();",
      "right" : "pushMatrix();",
      "info" : "ExpressionStatement[234788-234801]:ExpressionStatement[235366-235379]"
    }, {
      "left" : "resetMatrix();",
      "right" : "resetMatrix();",
      "info" : "ExpressionStatement[234806-234820]:ExpressionStatement[235384-235398]"
    }, {
      "left" : "fill(backgroundColor);",
      "right" : "fill(backgroundColor);",
      "info" : "ExpressionStatement[234825-234847]:ExpressionStatement[235403-235425]"
    }, {
      "left" : "rect(0, 0, width, height);",
      "right" : "rect(0, 0, width, height);",
      "info" : "ExpressionStatement[234852-234878]:ExpressionStatement[235430-235456]"
    }, {
      "left" : "popMatrix();",
      "right" : "popMatrix();",
      "info" : "ExpressionStatement[234883-234895]:ExpressionStatement[235461-235473]"
    }, {
      "left" : "popStyle();",
      "right" : "popStyle();",
      "info" : "ExpressionStatement[234900-234911]:ExpressionStatement[235478-235489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[236669-236743]:Block[237247-237321]"
    }, {
      "left" : "colorMode(mode, colorModeX, colorModeY, colorModeZ, colorModeA);",
      "right" : "colorMode(mode, colorModeX, colorModeY, colorModeZ, colorModeA);",
      "info" : "ExpressionStatement[236675-236739]:ExpressionStatement[237253-237317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[236848-236894]:Block[237426-237472]"
    }, {
      "left" : "colorMode(mode, max, max, max, max);",
      "right" : "colorMode(mode, max, max, max, max);",
      "info" : "ExpressionStatement[236854-236890]:ExpressionStatement[237432-237468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[237230-237286]:Block[237808-237864]"
    }, {
      "left" : "colorMode(mode, max1, max2, max3, colorModeA);",
      "right" : "colorMode(mode, max1, max2, max3, colorModeA);",
      "info" : "ExpressionStatement[237236-237282]:ExpressionStatement[237814-237860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[237444-238001]:Block[238022-238579]"
    }, {
      "left" : "colorMode = mode;",
      "right" : "colorMode = mode;",
      "info" : "ExpressionStatement[237450-237467]:ExpressionStatement[238028-238045]"
    }, {
      "left" : "colorModeX = max1;",
      "right" : "colorModeX = max1;",
      "info" : "ExpressionStatement[237473-237491]:ExpressionStatement[238051-238069]"
    }, {
      "left" : "colorModeY = max2;",
      "right" : "colorModeY = max2;",
      "info" : "ExpressionStatement[237530-237548]:ExpressionStatement[238108-238126]"
    }, {
      "left" : "colorModeZ = max3;",
      "right" : "colorModeZ = max3;",
      "info" : "ExpressionStatement[237553-237571]:ExpressionStatement[238131-238149]"
    }, {
      "left" : "colorModeA = maxA;",
      "right" : "colorModeA = maxA;",
      "info" : "ExpressionStatement[237576-237594]:ExpressionStatement[238154-238172]"
    }, {
      "left" : "colorModeScale =\n      ((maxA != 1) || (max1 != max2) || (max2 != max3) || (max3 != maxA));",
      "right" : "colorModeScale =\n      ((maxA != 1) || (max1 != max2) || (max2 != max3) || (max3 != maxA));",
      "info" : "ExpressionStatement[237660-237751]:ExpressionStatement[238238-238329]"
    }, {
      "left" : "colorModeDefault = (colorMode == RGB) &&\n      (colorModeA == 255) && (colorModeX == 255) &&\n      (colorModeY == 255) && (colorModeZ == 255);",
      "right" : "colorModeDefault = (colorMode == RGB) &&\n      (colorModeA == 255) && (colorModeX == 255) &&\n      (colorModeY == 255) && (colorModeZ == 255);",
      "info" : "ExpressionStatement[237855-237997]:ExpressionStatement[238433-238575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239577-239730]:Block[240155-240308]"
    }, {
      "left" : "if (((rgb & 0xff000000) == 0) && (rgb <= colorModeX))",
      "right" : "if (((rgb & 0xff000000) == 0) && (rgb <= colorModeX))",
      "info" : "IfStatement[239583-239726]:IfStatement[240161-240304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239637-239675]:Block[240215-240253]"
    }, {
      "left" : "colorCalc((float) rgb);",
      "right" : "colorCalc((float) rgb);",
      "info" : "ExpressionStatement[239645-239668]:ExpressionStatement[240223-240246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239681-239726]:Block[240259-240304]"
    }, {
      "left" : "colorCalcARGB(rgb, colorModeA);",
      "right" : "colorCalcARGB(rgb, colorModeA);",
      "info" : "ExpressionStatement[239689-239720]:ExpressionStatement[240267-240298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239782-239951]:Block[240360-240529]"
    }, {
      "left" : "if (((rgb & 0xff000000) == 0) && (rgb <= colorModeX))",
      "right" : "if (((rgb & 0xff000000) == 0) && (rgb <= colorModeX))",
      "info" : "IfStatement[239788-239947]:IfStatement[240366-240525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239842-239901]:Block[240420-240479]"
    }, {
      "left" : "colorCalc((float) rgb, alpha);",
      "right" : "colorCalc((float) rgb, alpha);",
      "info" : "ExpressionStatement[239864-239894]:ExpressionStatement[240442-240472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239907-239947]:Block[240485-240525]"
    }, {
      "left" : "colorCalcARGB(rgb, alpha);",
      "right" : "colorCalcARGB(rgb, alpha);",
      "info" : "ExpressionStatement[239915-239941]:ExpressionStatement[240493-240519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[239993-240031]:Block[240571-240609]"
    }, {
      "left" : "colorCalc(gray, colorModeA);",
      "right" : "colorCalc(gray, colorModeA);",
      "info" : "ExpressionStatement[239999-240027]:ExpressionStatement[240577-240605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[240086-240623]:Block[240664-241201]"
    }, {
      "left" : "if (gray > colorModeX)",
      "right" : "if (gray > colorModeX)",
      "info" : "IfStatement[240092-240133]:IfStatement[240670-240711]"
    }, {
      "left" : "gray = colorModeX;",
      "right" : "gray = colorModeX;",
      "info" : "ExpressionStatement[240115-240133]:ExpressionStatement[240693-240711]"
    }, {
      "left" : "if (alpha > colorModeA)",
      "right" : "if (alpha > colorModeA)",
      "info" : "IfStatement[240138-240181]:IfStatement[240716-240759]"
    }, {
      "left" : "alpha = colorModeA;",
      "right" : "alpha = colorModeA;",
      "info" : "ExpressionStatement[240162-240181]:ExpressionStatement[240740-240759]"
    }, {
      "left" : "if (gray < 0)",
      "right" : "if (gray < 0)",
      "info" : "IfStatement[240187-240210]:IfStatement[240765-240788]"
    }, {
      "left" : "gray = 0;",
      "right" : "gray = 0;",
      "info" : "ExpressionStatement[240201-240210]:ExpressionStatement[240779-240788]"
    }, {
      "left" : "if (alpha < 0)",
      "right" : "if (alpha < 0)",
      "info" : "IfStatement[240215-240240]:IfStatement[240793-240818]"
    }, {
      "left" : "alpha = 0;",
      "right" : "alpha = 0;",
      "info" : "ExpressionStatement[240230-240240]:ExpressionStatement[240808-240818]"
    }, {
      "left" : "calcR = colorModeScale ? (gray / colorModeX) : gray;",
      "right" : "calcR = colorModeScale ? (gray / colorModeX) : gray;",
      "info" : "ExpressionStatement[240246-240298]:ExpressionStatement[240824-240876]"
    }, {
      "left" : "calcG = calcR;",
      "right" : "calcG = calcR;",
      "info" : "ExpressionStatement[240303-240317]:ExpressionStatement[240881-240895]"
    }, {
      "left" : "calcB = calcR;",
      "right" : "calcB = calcR;",
      "info" : "ExpressionStatement[240322-240336]:ExpressionStatement[240900-240914]"
    }, {
      "left" : "calcA = colorModeScale ? (alpha / colorModeA) : alpha;",
      "right" : "calcA = colorModeScale ? (alpha / colorModeA) : alpha;",
      "info" : "ExpressionStatement[240341-240395]:ExpressionStatement[240919-240973]"
    }, {
      "left" : "calcRi = (int)(calcR*255);",
      "right" : "calcRi = (int)(calcR*255);",
      "info" : "ExpressionStatement[240401-240427]:ExpressionStatement[240979-241005]"
    }, {
      "left" : "calcGi = (int)(calcG*255);",
      "right" : "calcGi = (int)(calcG*255);",
      "info" : "ExpressionStatement[240428-240454]:ExpressionStatement[241006-241032]"
    }, {
      "left" : "calcBi = (int)(calcB*255);",
      "right" : "calcBi = (int)(calcB*255);",
      "info" : "ExpressionStatement[240459-240485]:ExpressionStatement[241037-241063]"
    }, {
      "left" : "calcAi = (int)(calcA*255);",
      "right" : "calcAi = (int)(calcA*255);",
      "info" : "ExpressionStatement[240486-240512]:ExpressionStatement[241064-241090]"
    }, {
      "left" : "calcColor = (calcAi << 24) | (calcRi << 16) | (calcGi << 8) | calcBi;",
      "right" : "calcColor = (calcAi << 24) | (calcRi << 16) | (calcGi << 8) | calcBi;",
      "info" : "ExpressionStatement[240517-240586]:ExpressionStatement[241095-241164]"
    }, {
      "left" : "calcAlpha = (calcAi != 255);",
      "right" : "calcAlpha = (calcAi != 255);",
      "info" : "ExpressionStatement[240591-240619]:ExpressionStatement[241169-241197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[240680-240721]:Block[241258-241299]"
    }, {
      "left" : "colorCalc(x, y, z, colorModeA);",
      "right" : "colorCalc(x, y, z, colorModeA);",
      "info" : "ExpressionStatement[240686-240717]:ExpressionStatement[241264-241295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[240787-242397]:Block[241365-242975]"
    }, {
      "left" : "if (x > colorModeX)",
      "right" : "if (x > colorModeX)",
      "info" : "IfStatement[240793-240828]:IfStatement[241371-241406]"
    }, {
      "left" : "x = colorModeX;",
      "right" : "x = colorModeX;",
      "info" : "ExpressionStatement[240813-240828]:ExpressionStatement[241391-241406]"
    }, {
      "left" : "if (y > colorModeY)",
      "right" : "if (y > colorModeY)",
      "info" : "IfStatement[240833-240868]:IfStatement[241411-241446]"
    }, {
      "left" : "y = colorModeY;",
      "right" : "y = colorModeY;",
      "info" : "ExpressionStatement[240853-240868]:ExpressionStatement[241431-241446]"
    }, {
      "left" : "if (z > colorModeZ)",
      "right" : "if (z > colorModeZ)",
      "info" : "IfStatement[240873-240908]:IfStatement[241451-241486]"
    }, {
      "left" : "z = colorModeZ;",
      "right" : "z = colorModeZ;",
      "info" : "ExpressionStatement[240893-240908]:ExpressionStatement[241471-241486]"
    }, {
      "left" : "if (a > colorModeA)",
      "right" : "if (a > colorModeA)",
      "info" : "IfStatement[240913-240948]:IfStatement[241491-241526]"
    }, {
      "left" : "a = colorModeA;",
      "right" : "a = colorModeA;",
      "info" : "ExpressionStatement[240933-240948]:ExpressionStatement[241511-241526]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[240954-240971]:IfStatement[241532-241549]"
    }, {
      "left" : "x = 0;",
      "right" : "x = 0;",
      "info" : "ExpressionStatement[240965-240971]:ExpressionStatement[241543-241549]"
    }, {
      "left" : "if (y < 0)",
      "right" : "if (y < 0)",
      "info" : "IfStatement[240976-240993]:IfStatement[241554-241571]"
    }, {
      "left" : "y = 0;",
      "right" : "y = 0;",
      "info" : "ExpressionStatement[240987-240993]:ExpressionStatement[241565-241571]"
    }, {
      "left" : "if (z < 0)",
      "right" : "if (z < 0)",
      "info" : "IfStatement[240998-241015]:IfStatement[241576-241593]"
    }, {
      "left" : "z = 0;",
      "right" : "z = 0;",
      "info" : "ExpressionStatement[241009-241015]:ExpressionStatement[241587-241593]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[241020-241037]:IfStatement[241598-241615]"
    }, {
      "left" : "a = 0;",
      "right" : "a = 0;",
      "info" : "ExpressionStatement[241031-241037]:ExpressionStatement[241609-241615]"
    }, {
      "left" : "switch (colorMode) {\n    case RGB:\n      if (colorModeScale) {\n        calcR = x / colorModeX;\n        calcG = y / colorModeY;\n        calcB = z / colorModeZ;\n        calcA = a / colorModeA;\n      } else {\n        calcR = x; calcG = y; calcB = z; calcA = a;\n      }\n      break;\n\n    case HSB:\n      x /= colorModeX; // h\n      y /= colorModeY; // s\n      z /= colorModeZ; // b\n\n      calcA = colorModeScale ? (a/colorModeA) : a;\n\n      if (y == 0) {  // saturation == 0\n        calcR = calcG = calcB = z;\n\n      } else {\n        float which = (x - (int)x) * 6.0f;\n        float f = which - (int)which;\n        float p = z * (1.0f - y);\n        float q = z * (1.0f - y * f);\n        float t = z * (1.0f - (y * (1.0f - f)));\n\n        switch ((int)which) {\n        case 0: calcR = z; calcG = t; calcB = p; break;\n        case 1: calcR = q; calcG = z; calcB = p; break;\n        case 2: calcR = p; calcG = z; calcB = t; break;\n        case 3: calcR = p; calcG = q; calcB = z; break;\n        case 4: calcR = t; calcG = p; calcB = z; break;\n        case 5: calcR = z; calcG = p; calcB = q; break;\n        }\n      }\n      break;\n    }",
      "right" : "switch (colorMode) {\n    case RGB:\n      if (colorModeScale) {\n        calcR = x / colorModeX;\n        calcG = y / colorModeY;\n        calcB = z / colorModeZ;\n        calcA = a / colorModeA;\n      } else {\n        calcR = x; calcG = y; calcB = z; calcA = a;\n      }\n      break;\n\n    case HSB:\n      x /= colorModeX; // h\n      y /= colorModeY; // s\n      z /= colorModeZ; // b\n\n      calcA = colorModeScale ? (a/colorModeA) : a;\n\n      if (y == 0) {  // saturation == 0\n        calcR = calcG = calcB = z;\n\n      } else {\n        float which = (x - (int)x) * 6.0f;\n        float f = which - (int)which;\n        float p = z * (1.0f - y);\n        float q = z * (1.0f - y * f);\n        float t = z * (1.0f - (y * (1.0f - f)));\n\n        switch ((int)which) {\n        case 0: calcR = z; calcG = t; calcB = p; break;\n        case 1: calcR = q; calcG = z; calcB = p; break;\n        case 2: calcR = p; calcG = z; calcB = t; break;\n        case 3: calcR = p; calcG = q; calcB = z; break;\n        case 4: calcR = t; calcG = p; calcB = z; break;\n        case 5: calcR = z; calcG = p; calcB = q; break;\n        }\n      }\n      break;\n    }",
      "info" : "SwitchStatement[241043-242170]:SwitchStatement[241621-242748]"
    }, {
      "left" : "case RGB:",
      "right" : "case RGB:",
      "info" : "SwitchCase[241068-241077]:SwitchCase[241646-241655]"
    }, {
      "left" : "if (colorModeScale)",
      "right" : "if (colorModeScale)",
      "info" : "IfStatement[241084-241308]:IfStatement[241662-241886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[241104-241241]:Block[241682-241819]"
    }, {
      "left" : "calcR = x / colorModeX;",
      "right" : "calcR = x / colorModeX;",
      "info" : "ExpressionStatement[241114-241137]:ExpressionStatement[241692-241715]"
    }, {
      "left" : "calcG = y / colorModeY;",
      "right" : "calcG = y / colorModeY;",
      "info" : "ExpressionStatement[241146-241169]:ExpressionStatement[241724-241747]"
    }, {
      "left" : "calcB = z / colorModeZ;",
      "right" : "calcB = z / colorModeZ;",
      "info" : "ExpressionStatement[241178-241201]:ExpressionStatement[241756-241779]"
    }, {
      "left" : "calcA = a / colorModeA;",
      "right" : "calcA = a / colorModeA;",
      "info" : "ExpressionStatement[241210-241233]:ExpressionStatement[241788-241811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[241247-241308]:Block[241825-241886]"
    }, {
      "left" : "calcR = x;",
      "right" : "calcR = x;",
      "info" : "ExpressionStatement[241257-241267]:ExpressionStatement[241835-241845]"
    }, {
      "left" : "calcG = y;",
      "right" : "calcG = y;",
      "info" : "ExpressionStatement[241268-241278]:ExpressionStatement[241846-241856]"
    }, {
      "left" : "calcB = z;",
      "right" : "calcB = z;",
      "info" : "ExpressionStatement[241279-241289]:ExpressionStatement[241857-241867]"
    }, {
      "left" : "calcA = a;",
      "right" : "calcA = a;",
      "info" : "ExpressionStatement[241290-241300]:ExpressionStatement[241868-241878]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[241315-241321]:BreakStatement[241893-241899]"
    }, {
      "left" : "case HSB:",
      "right" : "case HSB:",
      "info" : "SwitchCase[241327-241336]:SwitchCase[241905-241914]"
    }, {
      "left" : "x /= colorModeX;",
      "right" : "x /= colorModeX;",
      "info" : "ExpressionStatement[241343-241359]:ExpressionStatement[241921-241937]"
    }, {
      "left" : "y /= colorModeY;",
      "right" : "y /= colorModeY;",
      "info" : "ExpressionStatement[241371-241387]:ExpressionStatement[241949-241965]"
    }, {
      "left" : "z /= colorModeZ;",
      "right" : "z /= colorModeZ;",
      "info" : "ExpressionStatement[241399-241415]:ExpressionStatement[241977-241993]"
    }, {
      "left" : "calcA = colorModeScale ? (a/colorModeA) : a;",
      "right" : "calcA = colorModeScale ? (a/colorModeA) : a;",
      "info" : "ExpressionStatement[241428-241472]:ExpressionStatement[242006-242050]"
    }, {
      "left" : "if (y == 0)",
      "right" : "if (y == 0)",
      "info" : "IfStatement[241480-242151]:IfStatement[242058-242729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[241492-241557]:Block[242070-242135]"
    }, {
      "left" : "calcR = calcG = calcB = z;",
      "right" : "calcR = calcG = calcB = z;",
      "info" : "ExpressionStatement[241522-241548]:ExpressionStatement[242100-242126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[241563-242151]:Block[242141-242729]"
    }, {
      "left" : "float which = (x - (int)x) * 6.0f;",
      "right" : "float which = (x - (int)x) * 6.0f;",
      "info" : "VariableDeclarationStatement[241573-241607]:VariableDeclarationStatement[242151-242185]"
    }, {
      "left" : "float f = which - (int)which;",
      "right" : "float f = which - (int)which;",
      "info" : "VariableDeclarationStatement[241616-241645]:VariableDeclarationStatement[242194-242223]"
    }, {
      "left" : "float p = z * (1.0f - y);",
      "right" : "float p = z * (1.0f - y);",
      "info" : "VariableDeclarationStatement[241654-241679]:VariableDeclarationStatement[242232-242257]"
    }, {
      "left" : "float q = z * (1.0f - y * f);",
      "right" : "float q = z * (1.0f - y * f);",
      "info" : "VariableDeclarationStatement[241688-241717]:VariableDeclarationStatement[242266-242295]"
    }, {
      "left" : "float t = z * (1.0f - (y * (1.0f - f)));",
      "right" : "float t = z * (1.0f - (y * (1.0f - f)));",
      "info" : "VariableDeclarationStatement[241726-241766]:VariableDeclarationStatement[242304-242344]"
    }, {
      "left" : "switch ((int)which) {\n        case 0: calcR = z; calcG = t; calcB = p; break;\n        case 1: calcR = q; calcG = z; calcB = p; break;\n        case 2: calcR = p; calcG = z; calcB = t; break;\n        case 3: calcR = p; calcG = q; calcB = z; break;\n        case 4: calcR = t; calcG = p; calcB = z; break;\n        case 5: calcR = z; calcG = p; calcB = q; break;\n        }",
      "right" : "switch ((int)which) {\n        case 0: calcR = z; calcG = t; calcB = p; break;\n        case 1: calcR = q; calcG = z; calcB = p; break;\n        case 2: calcR = p; calcG = z; calcB = t; break;\n        case 3: calcR = p; calcG = q; calcB = z; break;\n        case 4: calcR = t; calcG = p; calcB = z; break;\n        case 5: calcR = z; calcG = p; calcB = q; break;\n        }",
      "info" : "SwitchStatement[241776-242143]:SwitchStatement[242354-242721]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[241806-241813]:SwitchCase[242384-242391]"
    }, {
      "left" : "calcR = z;",
      "right" : "calcR = z;",
      "info" : "ExpressionStatement[241814-241824]:ExpressionStatement[242392-242402]"
    }, {
      "left" : "calcG = t;",
      "right" : "calcG = t;",
      "info" : "ExpressionStatement[241825-241835]:ExpressionStatement[242403-242413]"
    }, {
      "left" : "calcB = p;",
      "right" : "calcB = p;",
      "info" : "ExpressionStatement[241836-241846]:ExpressionStatement[242414-242424]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[241847-241853]:BreakStatement[242425-242431]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[241862-241869]:SwitchCase[242440-242447]"
    }, {
      "left" : "calcR = q;",
      "right" : "calcR = q;",
      "info" : "ExpressionStatement[241870-241880]:ExpressionStatement[242448-242458]"
    }, {
      "left" : "calcG = z;",
      "right" : "calcG = z;",
      "info" : "ExpressionStatement[241881-241891]:ExpressionStatement[242459-242469]"
    }, {
      "left" : "calcB = p;",
      "right" : "calcB = p;",
      "info" : "ExpressionStatement[241892-241902]:ExpressionStatement[242470-242480]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[241903-241909]:BreakStatement[242481-242487]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[241918-241925]:SwitchCase[242496-242503]"
    }, {
      "left" : "calcR = p;",
      "right" : "calcR = p;",
      "info" : "ExpressionStatement[241926-241936]:ExpressionStatement[242504-242514]"
    }, {
      "left" : "calcG = z;",
      "right" : "calcG = z;",
      "info" : "ExpressionStatement[241937-241947]:ExpressionStatement[242515-242525]"
    }, {
      "left" : "calcB = t;",
      "right" : "calcB = t;",
      "info" : "ExpressionStatement[241948-241958]:ExpressionStatement[242526-242536]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[241959-241965]:BreakStatement[242537-242543]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[241974-241981]:SwitchCase[242552-242559]"
    }, {
      "left" : "calcR = p;",
      "right" : "calcR = p;",
      "info" : "ExpressionStatement[241982-241992]:ExpressionStatement[242560-242570]"
    }, {
      "left" : "calcG = q;",
      "right" : "calcG = q;",
      "info" : "ExpressionStatement[241993-242003]:ExpressionStatement[242571-242581]"
    }, {
      "left" : "calcB = z;",
      "right" : "calcB = z;",
      "info" : "ExpressionStatement[242004-242014]:ExpressionStatement[242582-242592]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[242015-242021]:BreakStatement[242593-242599]"
    }, {
      "left" : "case 4:",
      "right" : "case 4:",
      "info" : "SwitchCase[242030-242037]:SwitchCase[242608-242615]"
    }, {
      "left" : "calcR = t;",
      "right" : "calcR = t;",
      "info" : "ExpressionStatement[242038-242048]:ExpressionStatement[242616-242626]"
    }, {
      "left" : "calcG = p;",
      "right" : "calcG = p;",
      "info" : "ExpressionStatement[242049-242059]:ExpressionStatement[242627-242637]"
    }, {
      "left" : "calcB = z;",
      "right" : "calcB = z;",
      "info" : "ExpressionStatement[242060-242070]:ExpressionStatement[242638-242648]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[242071-242077]:BreakStatement[242649-242655]"
    }, {
      "left" : "case 5:",
      "right" : "case 5:",
      "info" : "SwitchCase[242086-242093]:SwitchCase[242664-242671]"
    }, {
      "left" : "calcR = z;",
      "right" : "calcR = z;",
      "info" : "ExpressionStatement[242094-242104]:ExpressionStatement[242672-242682]"
    }, {
      "left" : "calcG = p;",
      "right" : "calcG = p;",
      "info" : "ExpressionStatement[242105-242115]:ExpressionStatement[242683-242693]"
    }, {
      "left" : "calcB = q;",
      "right" : "calcB = q;",
      "info" : "ExpressionStatement[242116-242126]:ExpressionStatement[242694-242704]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[242127-242133]:BreakStatement[242705-242711]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[242158-242164]:BreakStatement[242736-242742]"
    }, {
      "left" : "calcRi = (int)(255*calcR);",
      "right" : "calcRi = (int)(255*calcR);",
      "info" : "ExpressionStatement[242175-242201]:ExpressionStatement[242753-242779]"
    }, {
      "left" : "calcGi = (int)(255*calcG);",
      "right" : "calcGi = (int)(255*calcG);",
      "info" : "ExpressionStatement[242202-242228]:ExpressionStatement[242780-242806]"
    }, {
      "left" : "calcBi = (int)(255*calcB);",
      "right" : "calcBi = (int)(255*calcB);",
      "info" : "ExpressionStatement[242233-242259]:ExpressionStatement[242811-242837]"
    }, {
      "left" : "calcAi = (int)(255*calcA);",
      "right" : "calcAi = (int)(255*calcA);",
      "info" : "ExpressionStatement[242260-242286]:ExpressionStatement[242838-242864]"
    }, {
      "left" : "calcColor = (calcAi << 24) | (calcRi << 16) | (calcGi << 8) | calcBi;",
      "right" : "calcColor = (calcAi << 24) | (calcRi << 16) | (calcGi << 8) | calcBi;",
      "info" : "ExpressionStatement[242291-242360]:ExpressionStatement[242869-242938]"
    }, {
      "left" : "calcAlpha = (calcAi != 255);",
      "right" : "calcAlpha = (calcAi != 255);",
      "info" : "ExpressionStatement[242365-242393]:ExpressionStatement[242943-242971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242882-243387]:Block[243460-243965]"
    }, {
      "left" : "if (alpha == colorModeA)",
      "right" : "if (alpha == colorModeA)",
      "info" : "IfStatement[242888-243141]:IfStatement[243466-243719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242913-242980]:Block[243491-243558]"
    }, {
      "left" : "calcAi = (argb >> 24) & 0xff;",
      "right" : "calcAi = (argb >> 24) & 0xff;",
      "info" : "ExpressionStatement[242921-242950]:ExpressionStatement[243499-243528]"
    }, {
      "left" : "calcColor = argb;",
      "right" : "calcColor = argb;",
      "info" : "ExpressionStatement[242957-242974]:ExpressionStatement[243535-243552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[242986-243141]:Block[243564-243719]"
    }, {
      "left" : "calcAi = (int) (((argb >> 24) & 0xff) * PApplet.constrain((alpha / colorModeA), 0, 1));",
      "right" : "calcAi = (int) (((argb >> 24) & 0xff) * PApplet.constrain((alpha / colorModeA), 0, 1));",
      "info" : "ExpressionStatement[242994-243081]:ExpressionStatement[243572-243659]"
    }, {
      "left" : "calcColor = (calcAi << 24) | (argb & 0xFFFFFF);",
      "right" : "calcColor = (calcAi << 24) | (argb & 0xFFFFFF);",
      "info" : "ExpressionStatement[243088-243135]:ExpressionStatement[243666-243713]"
    }, {
      "left" : "calcRi = (argb >> 16) & 0xff;",
      "right" : "calcRi = (argb >> 16) & 0xff;",
      "info" : "ExpressionStatement[243146-243175]:ExpressionStatement[243724-243753]"
    }, {
      "left" : "calcGi = (argb >> 8) & 0xff;",
      "right" : "calcGi = (argb >> 8) & 0xff;",
      "info" : "ExpressionStatement[243180-243208]:ExpressionStatement[243758-243786]"
    }, {
      "left" : "calcBi = argb & 0xff;",
      "right" : "calcBi = argb & 0xff;",
      "info" : "ExpressionStatement[243213-243234]:ExpressionStatement[243791-243812]"
    }, {
      "left" : "calcA = calcAi / 255.0f;",
      "right" : "calcA = calcAi / 255.0f;",
      "info" : "ExpressionStatement[243239-243263]:ExpressionStatement[243817-243841]"
    }, {
      "left" : "calcR = calcRi / 255.0f;",
      "right" : "calcR = calcRi / 255.0f;",
      "info" : "ExpressionStatement[243268-243292]:ExpressionStatement[243846-243870]"
    }, {
      "left" : "calcG = calcGi / 255.0f;",
      "right" : "calcG = calcGi / 255.0f;",
      "info" : "ExpressionStatement[243297-243321]:ExpressionStatement[243875-243899]"
    }, {
      "left" : "calcB = calcBi / 255.0f;",
      "right" : "calcB = calcBi / 255.0f;",
      "info" : "ExpressionStatement[243326-243350]:ExpressionStatement[243904-243928]"
    }, {
      "left" : "calcAlpha = (calcAi != 255);",
      "right" : "calcAlpha = (calcAi != 255);",
      "info" : "ExpressionStatement[243355-243383]:ExpressionStatement[243933-243961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[243931-244376]:Block[244509-244954]"
    }, {
      "left" : "colorCalc(c);",
      "right" : "colorCalc(c);",
      "info" : "ExpressionStatement[244337-244350]:ExpressionStatement[244915-244928]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[244355-244372]:ReturnStatement[244933-244950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[244416-244475]:Block[244994-245053]"
    }, {
      "left" : "colorCalc(gray);",
      "right" : "colorCalc(gray);",
      "info" : "ExpressionStatement[244433-244449]:ExpressionStatement[245011-245027]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[244454-244471]:ReturnStatement[245032-245049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[244589-244955]:Block[245167-245533]"
    }, {
      "left" : "colorCalc(c, alpha);",
      "right" : "colorCalc(c, alpha);",
      "info" : "ExpressionStatement[244909-244929]:ExpressionStatement[245487-245507]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[244934-244951]:ReturnStatement[245512-245529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[245071-245242]:Block[245649-245820]"
    }, {
      "left" : "colorCalc(c, alpha);",
      "right" : "colorCalc(c, alpha);",
      "info" : "ExpressionStatement[245146-245166]:ExpressionStatement[245724-245744]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[245221-245238]:ReturnStatement[245799-245816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[245295-245361]:Block[245873-245939]"
    }, {
      "left" : "colorCalc(gray, alpha);",
      "right" : "colorCalc(gray, alpha);",
      "info" : "ExpressionStatement[245312-245335]:ExpressionStatement[245890-245913]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[245340-245357]:ReturnStatement[245918-245935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[245413-245478]:Block[245991-246056]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[245430-245452]:ExpressionStatement[246008-246030]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[245457-245474]:ReturnStatement[246035-246052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[245536-245601]:Block[246114-246179]"
    }, {
      "left" : "colorCalc(v1, v2, v3);",
      "right" : "colorCalc(v1, v2, v3);",
      "info" : "ExpressionStatement[245553-245575]:ExpressionStatement[246131-246153]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[245580-245597]:ReturnStatement[246158-246175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[245660-245728]:Block[246238-246306]"
    }, {
      "left" : "colorCalc(v1, v2, v3, a);",
      "right" : "colorCalc(v1, v2, v3, a);",
      "info" : "ExpressionStatement[245677-245702]:ExpressionStatement[246255-246280]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[245707-245724]:ReturnStatement[246285-246302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[245795-245863]:Block[246373-246441]"
    }, {
      "left" : "colorCalc(v1, v2, v3, a);",
      "right" : "colorCalc(v1, v2, v3, a);",
      "info" : "ExpressionStatement[245812-245837]:ExpressionStatement[246390-246415]"
    }, {
      "left" : "return calcColor;",
      "right" : "return calcColor;",
      "info" : "ReturnStatement[245842-245859]:ReturnStatement[246420-246437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[246490-246625]:Block[247068-247203]"
    }, {
      "left" : "float outgoing = (rgb >> 24) & 0xff;",
      "right" : "float outgoing = (rgb >> 24) & 0xff;",
      "info" : "VariableDeclarationStatement[246496-246532]:VariableDeclarationStatement[247074-247110]"
    }, {
      "left" : "if (colorModeA == 255)",
      "right" : "if (colorModeA == 255)",
      "info" : "IfStatement[246537-246576]:IfStatement[247115-247154]"
    }, {
      "left" : "return outgoing;",
      "right" : "return outgoing;",
      "info" : "ReturnStatement[246560-246576]:ReturnStatement[247138-247154]"
    }, {
      "left" : "return (outgoing / 255.0f) * colorModeA;",
      "right" : "return (outgoing / 255.0f) * colorModeA;",
      "info" : "ReturnStatement[246581-246621]:ReturnStatement[247159-247199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[247712-247825]:Block[248290-248403]"
    }, {
      "left" : "float c = (rgb >> 16) & 0xff;",
      "right" : "float c = (rgb >> 16) & 0xff;",
      "info" : "VariableDeclarationStatement[247718-247747]:VariableDeclarationStatement[248296-248325]"
    }, {
      "left" : "if (colorModeDefault)",
      "right" : "if (colorModeDefault)",
      "info" : "IfStatement[247752-247783]:IfStatement[248330-248361]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[247774-247783]:ReturnStatement[248352-248361]"
    }, {
      "left" : "return (c / 255.0f) * colorModeX;",
      "right" : "return (c / 255.0f) * colorModeX;",
      "info" : "ReturnStatement[247788-247821]:ReturnStatement[248366-248399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[248926-249038]:Block[249504-249616]"
    }, {
      "left" : "float c = (rgb >> 8) & 0xff;",
      "right" : "float c = (rgb >> 8) & 0xff;",
      "info" : "VariableDeclarationStatement[248932-248960]:VariableDeclarationStatement[249510-249538]"
    }, {
      "left" : "if (colorModeDefault)",
      "right" : "if (colorModeDefault)",
      "info" : "IfStatement[248965-248996]:IfStatement[249543-249574]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[248987-248996]:ReturnStatement[249565-249574]"
    }, {
      "left" : "return (c / 255.0f) * colorModeY;",
      "right" : "return (c / 255.0f) * colorModeY;",
      "info" : "ReturnStatement[249001-249034]:ReturnStatement[249579-249612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[250120-250227]:Block[250698-250805]"
    }, {
      "left" : "float c = (rgb) & 0xff;",
      "right" : "float c = (rgb) & 0xff;",
      "info" : "VariableDeclarationStatement[250126-250149]:VariableDeclarationStatement[250704-250727]"
    }, {
      "left" : "if (colorModeDefault)",
      "right" : "if (colorModeDefault)",
      "info" : "IfStatement[250154-250185]:IfStatement[250732-250763]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[250176-250185]:ReturnStatement[250754-250763]"
    }, {
      "left" : "return (c / 255.0f) * colorModeZ;",
      "right" : "return (c / 255.0f) * colorModeZ;",
      "info" : "ReturnStatement[250190-250223]:ReturnStatement[250768-250801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[250704-250921]:Block[251282-251499]"
    }, {
      "left" : "if (rgb != cacheHsbKey)",
      "right" : "if (rgb != cacheHsbKey)",
      "info" : "IfStatement[250710-250875]:IfStatement[251288-251453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[250734-250875]:Block[251312-251453]"
    }, {
      "left" : "Color.RGBtoHSB((rgb >> 16) & 0xff, (rgb >> 8) & 0xff,\n                     rgb & 0xff, cacheHsbValue);",
      "right" : "Color.RGBtoHSB((rgb >> 16) & 0xff, (rgb >> 8) & 0xff,\n                     rgb & 0xff, cacheHsbValue);",
      "info" : "ExpressionStatement[250742-250844]:ExpressionStatement[251320-251422]"
    }, {
      "left" : "cacheHsbKey = rgb;",
      "right" : "cacheHsbKey = rgb;",
      "info" : "ExpressionStatement[250851-250869]:ExpressionStatement[251429-251447]"
    }, {
      "left" : "return cacheHsbValue[0] * colorModeX;",
      "right" : "return cacheHsbValue[0] * colorModeX;",
      "info" : "ReturnStatement[250880-250917]:ReturnStatement[251458-251495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[251412-251629]:Block[251990-252207]"
    }, {
      "left" : "if (rgb != cacheHsbKey)",
      "right" : "if (rgb != cacheHsbKey)",
      "info" : "IfStatement[251418-251583]:IfStatement[251996-252161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[251442-251583]:Block[252020-252161]"
    }, {
      "left" : "Color.RGBtoHSB((rgb >> 16) & 0xff, (rgb >> 8) & 0xff,\n                     rgb & 0xff, cacheHsbValue);",
      "right" : "Color.RGBtoHSB((rgb >> 16) & 0xff, (rgb >> 8) & 0xff,\n                     rgb & 0xff, cacheHsbValue);",
      "info" : "ExpressionStatement[251450-251552]:ExpressionStatement[252028-252130]"
    }, {
      "left" : "cacheHsbKey = rgb;",
      "right" : "cacheHsbKey = rgb;",
      "info" : "ExpressionStatement[251559-251577]:ExpressionStatement[252137-252155]"
    }, {
      "left" : "return cacheHsbValue[1] * colorModeY;",
      "right" : "return cacheHsbValue[1] * colorModeY;",
      "info" : "ReturnStatement[251588-251625]:ReturnStatement[252166-252203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[252125-252342]:Block[252703-252920]"
    }, {
      "left" : "if (rgb != cacheHsbKey)",
      "right" : "if (rgb != cacheHsbKey)",
      "info" : "IfStatement[252131-252296]:IfStatement[252709-252874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[252155-252296]:Block[252733-252874]"
    }, {
      "left" : "Color.RGBtoHSB((rgb >> 16) & 0xff, (rgb >> 8) & 0xff,\n                     rgb & 0xff, cacheHsbValue);",
      "right" : "Color.RGBtoHSB((rgb >> 16) & 0xff, (rgb >> 8) & 0xff,\n                     rgb & 0xff, cacheHsbValue);",
      "info" : "ExpressionStatement[252163-252265]:ExpressionStatement[252741-252843]"
    }, {
      "left" : "cacheHsbKey = rgb;",
      "right" : "cacheHsbKey = rgb;",
      "info" : "ExpressionStatement[252272-252290]:ExpressionStatement[252850-252868]"
    }, {
      "left" : "return cacheHsbValue[2] * colorModeZ;",
      "right" : "return cacheHsbValue[2] * colorModeZ;",
      "info" : "ReturnStatement[252301-252338]:ReturnStatement[252879-252916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[253235-253297]:Block[253813-253875]"
    }, {
      "left" : "return lerpColor(c1, c2, amt, colorMode);",
      "right" : "return lerpColor(c1, c2, amt, colorMode);",
      "info" : "ReturnStatement[253252-253293]:ReturnStatement[253830-253871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[253590-255930]:Block[254168-256508]"
    }, {
      "left" : "if (amt < 0)",
      "right" : "if (amt < 0)",
      "info" : "IfStatement[253596-253617]:IfStatement[254174-254195]"
    }, {
      "left" : "amt = 0;",
      "right" : "amt = 0;",
      "info" : "ExpressionStatement[253609-253617]:ExpressionStatement[254187-254195]"
    }, {
      "left" : "if (amt > 1)",
      "right" : "if (amt > 1)",
      "info" : "IfStatement[253622-253643]:IfStatement[254200-254221]"
    }, {
      "left" : "amt = 1;",
      "right" : "amt = 1;",
      "info" : "ExpressionStatement[253635-253643]:ExpressionStatement[254213-254221]"
    }, {
      "left" : "if (mode == RGB)",
      "right" : "if (mode == RGB)",
      "info" : "IfStatement[253649-255912]:IfStatement[254227-256490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[253666-254164]:Block[254244-254742]"
    }, {
      "left" : "float a1 = ((c1 >> 24) & 0xff);",
      "right" : "float a1 = ((c1 >> 24) & 0xff);",
      "info" : "VariableDeclarationStatement[253674-253705]:VariableDeclarationStatement[254252-254283]"
    }, {
      "left" : "float r1 = (c1 >> 16) & 0xff;",
      "right" : "float r1 = (c1 >> 16) & 0xff;",
      "info" : "VariableDeclarationStatement[253712-253741]:VariableDeclarationStatement[254290-254319]"
    }, {
      "left" : "float g1 = (c1 >> 8) & 0xff;",
      "right" : "float g1 = (c1 >> 8) & 0xff;",
      "info" : "VariableDeclarationStatement[253748-253776]:VariableDeclarationStatement[254326-254354]"
    }, {
      "left" : "float b1 = c1 & 0xff;",
      "right" : "float b1 = c1 & 0xff;",
      "info" : "VariableDeclarationStatement[253783-253804]:VariableDeclarationStatement[254361-254382]"
    }, {
      "left" : "float a2 = (c2 >> 24) & 0xff;",
      "right" : "float a2 = (c2 >> 24) & 0xff;",
      "info" : "VariableDeclarationStatement[253811-253840]:VariableDeclarationStatement[254389-254418]"
    }, {
      "left" : "float r2 = (c2 >> 16) & 0xff;",
      "right" : "float r2 = (c2 >> 16) & 0xff;",
      "info" : "VariableDeclarationStatement[253847-253876]:VariableDeclarationStatement[254425-254454]"
    }, {
      "left" : "float g2 = (c2 >> 8) & 0xff;",
      "right" : "float g2 = (c2 >> 8) & 0xff;",
      "info" : "VariableDeclarationStatement[253883-253911]:VariableDeclarationStatement[254461-254489]"
    }, {
      "left" : "float b2 = c2 & 0xff;",
      "right" : "float b2 = c2 & 0xff;",
      "info" : "VariableDeclarationStatement[253918-253939]:VariableDeclarationStatement[254496-254517]"
    }, {
      "left" : "return ((PApplet.round(a1 + (a2-a1)*amt) << 24) |\n              (PApplet.round(r1 + (r2-r1)*amt) << 16) |\n              (PApplet.round(g1 + (g2-g1)*amt) << 8) |\n              (PApplet.round(b1 + (b2-b1)*amt)));",
      "right" : "return ((PApplet.round(a1 + (a2-a1)*amt) << 24) |\n              (PApplet.round(r1 + (r2-r1)*amt) << 16) |\n              (PApplet.round(g1 + (g2-g1)*amt) << 8) |\n              (PApplet.round(b1 + (b2-b1)*amt)));",
      "info" : "ReturnStatement[253947-254157]:ReturnStatement[254525-254735]"
    }, {
      "left" : "if (mode == HSB)",
      "right" : "if (mode == HSB)",
      "info" : "IfStatement[254170-255912]:IfStatement[254748-256490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[254187-255912]:Block[254765-256490]"
    }, {
      "left" : "if (lerpColorHSB1 == null)",
      "right" : "if (lerpColorHSB1 == null)",
      "info" : "IfStatement[254195-254307]:IfStatement[254773-254885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[254222-254307]:Block[254800-254885]"
    }, {
      "left" : "lerpColorHSB1 = new float[3];",
      "right" : "lerpColorHSB1 = new float[3];",
      "info" : "ExpressionStatement[254232-254261]:ExpressionStatement[254810-254839]"
    }, {
      "left" : "lerpColorHSB2 = new float[3];",
      "right" : "lerpColorHSB2 = new float[3];",
      "info" : "ExpressionStatement[254270-254299]:ExpressionStatement[254848-254877]"
    }, {
      "left" : "float a1 = (c1 >> 24) & 0xff;",
      "right" : "float a1 = (c1 >> 24) & 0xff;",
      "info" : "VariableDeclarationStatement[254315-254344]:VariableDeclarationStatement[254893-254922]"
    }, {
      "left" : "float a2 = (c2 >> 24) & 0xff;",
      "right" : "float a2 = (c2 >> 24) & 0xff;",
      "info" : "VariableDeclarationStatement[254351-254380]:VariableDeclarationStatement[254929-254958]"
    }, {
      "left" : "int alfa = (PApplet.round(a1 + (a2-a1)*amt)) << 24;",
      "right" : "int alfa = (PApplet.round(a1 + (a2-a1)*amt)) << 24;",
      "info" : "VariableDeclarationStatement[254387-254438]:VariableDeclarationStatement[254965-255016]"
    }, {
      "left" : "Color.RGBtoHSB((c1 >> 16) & 0xff, (c1 >> 8) & 0xff, c1 & 0xff,\n                     lerpColorHSB1);",
      "right" : "Color.RGBtoHSB((c1 >> 16) & 0xff, (c1 >> 8) & 0xff, c1 & 0xff,\n                     lerpColorHSB1);",
      "info" : "ExpressionStatement[254446-254545]:ExpressionStatement[255024-255123]"
    }, {
      "left" : "Color.RGBtoHSB((c2 >> 16) & 0xff, (c2 >> 8) & 0xff, c2 & 0xff,\n                     lerpColorHSB2);",
      "right" : "Color.RGBtoHSB((c2 >> 16) & 0xff, (c2 >> 8) & 0xff, c2 & 0xff,\n                     lerpColorHSB2);",
      "info" : "ExpressionStatement[254552-254651]:ExpressionStatement[255130-255229]"
    }, {
      "left" : "float ho = PApplet.lerp(lerpColorHSB1[0], lerpColorHSB2[0], amt);",
      "right" : "float ho = PApplet.lerp(lerpColorHSB1[0], lerpColorHSB2[0], amt);",
      "info" : "VariableDeclarationStatement[255635-255700]:VariableDeclarationStatement[256213-256278]"
    }, {
      "left" : "float so = PApplet.lerp(lerpColorHSB1[1], lerpColorHSB2[1], amt);",
      "right" : "float so = PApplet.lerp(lerpColorHSB1[1], lerpColorHSB2[1], amt);",
      "info" : "VariableDeclarationStatement[255707-255772]:VariableDeclarationStatement[256285-256350]"
    }, {
      "left" : "float bo = PApplet.lerp(lerpColorHSB1[2], lerpColorHSB2[2], amt);",
      "right" : "float bo = PApplet.lerp(lerpColorHSB1[2], lerpColorHSB2[2], amt);",
      "info" : "VariableDeclarationStatement[255779-255844]:VariableDeclarationStatement[256357-256422]"
    }, {
      "left" : "return alfa | (Color.HSBtoRGB(ho, so, bo) & 0xFFFFFF);",
      "right" : "return alfa | (Color.HSBtoRGB(ho, so, bo) & 0xFFFFFF);",
      "info" : "ReturnStatement[255852-255906]:ReturnStatement[256430-256484]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[255917-255926]:ReturnStatement[256495-256504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[256160-256233]:Block[256738-256811]"
    }, {
      "left" : "this.raw = rawGraphics;",
      "right" : "this.raw = rawGraphics;",
      "info" : "ExpressionStatement[256177-256200]:ExpressionStatement[256755-256778]"
    }, {
      "left" : "rawGraphics.beginDraw();",
      "right" : "rawGraphics.beginDraw();",
      "info" : "ExpressionStatement[256205-256229]:ExpressionStatement[256783-256807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[256259-256637]:Block[256837-257215]"
    }, {
      "left" : "if (raw != null)",
      "right" : "if (raw != null)",
      "info" : "IfStatement[256276-256633]:IfStatement[256854-257211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[256293-256633]:Block[256871-257211]"
    }, {
      "left" : "flush();",
      "right" : "flush();",
      "info" : "ExpressionStatement[256437-256445]:ExpressionStatement[257015-257023]"
    }, {
      "left" : "raw.endDraw();",
      "right" : "raw.endDraw();",
      "info" : "ExpressionStatement[256574-256588]:ExpressionStatement[257152-257166]"
    }, {
      "left" : "raw.dispose();",
      "right" : "raw.dispose();",
      "info" : "ExpressionStatement[256595-256609]:ExpressionStatement[257173-257187]"
    }, {
      "left" : "raw = null;",
      "right" : "raw = null;",
      "info" : "ExpressionStatement[256616-256627]:ExpressionStatement[257194-257205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[256667-256706]:Block[257245-257284]"
    }, {
      "left" : "return raw != null;",
      "right" : "return raw != null;",
      "info" : "ReturnStatement[256683-256702]:ReturnStatement[257261-257280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[256737-256768]:Block[257315-257346]"
    }, {
      "left" : "return raw;",
      "right" : "return raw;",
      "info" : "ReturnStatement[256753-256764]:ReturnStatement[257331-257342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[257137-257349]:Block[257715-257927]"
    }, {
      "left" : "if (warnings == null)",
      "right" : "if (warnings == null)",
      "info" : "IfStatement[257154-257231]:IfStatement[257732-257809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[257176-257231]:Block[257754-257809]"
    }, {
      "left" : "warnings = new HashMap<String, Object>();",
      "right" : "warnings = new HashMap<String, Object>();",
      "info" : "ExpressionStatement[257184-257225]:ExpressionStatement[257762-257803]"
    }, {
      "left" : "if (!warnings.containsKey(msg))",
      "right" : "if (!warnings.containsKey(msg))",
      "info" : "IfStatement[257236-257345]:IfStatement[257814-257923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[257268-257345]:Block[257846-257923]"
    }, {
      "left" : "System.err.println(msg);",
      "right" : "System.err.println(msg);",
      "info" : "ExpressionStatement[257276-257300]:ExpressionStatement[257854-257878]"
    }, {
      "left" : "warnings.put(msg, new Object());",
      "right" : "warnings.put(msg, new Object());",
      "info" : "ExpressionStatement[257307-257339]:ExpressionStatement[257885-257917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[257483-257542]:Block[258061-258120]"
    }, {
      "left" : "showWarning(String.format(msg, args));",
      "right" : "showWarning(String.format(msg, args));",
      "info" : "ExpressionStatement[257500-257538]:ExpressionStatement[258078-258116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[257738-257860]:Block[258316-258438]"
    }, {
      "left" : "showWarning(method + \"() can only be used with a renderer that \" +\n                \"supports 3D, such as P3D.\");",
      "right" : "showWarning(method + \"() can only be used with a renderer that \" +\n                \"supports 3D, such as P3D.\");",
      "info" : "ExpressionStatement[257744-257856]:ExpressionStatement[258322-258434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[258126-258365]:Block[258704-258943]"
    }, {
      "left" : "showWarning(method + \"() with x, y, and z coordinates \" +\n                \"can only be used with a renderer that \" +\n                \"supports 3D, such as P3D. \" +\n                \"Use a version without a z-coordinate instead.\");",
      "right" : "showWarning(method + \"() with x, y, and z coordinates \" +\n                \"can only be used with a renderer that \" +\n                \"supports 3D, such as P3D. \" +\n                \"Use a version without a z-coordinate instead.\");",
      "info" : "ExpressionStatement[258132-258361]:ExpressionStatement[258710-258939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[258506-258580]:Block[259084-259158]"
    }, {
      "left" : "showWarning(method + \"() is not available with this renderer.\");",
      "right" : "showWarning(method + \"() is not available with this renderer.\");",
      "info" : "ExpressionStatement[258512-258576]:ExpressionStatement[259090-259154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[258846-258915]:Block[259424-259493]"
    }, {
      "left" : "showWarning(str + \" is not available with this renderer.\");",
      "right" : "showWarning(str + \" is not available with this renderer.\");",
      "info" : "ExpressionStatement[258852-258911]:ExpressionStatement[259430-259489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[259184-259316]:Block[259762-259894]"
    }, {
      "left" : "showWarning(method + \"(), or this particular variation of it, \" +\n                \"is not available with this renderer.\");",
      "right" : "showWarning(method + \"(), or this particular variation of it, \" +\n                \"is not available with this renderer.\");",
      "info" : "ExpressionStatement[259190-259312]:ExpressionStatement[259768-259890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[259588-259641]:Block[260166-260219]"
    }, {
      "left" : "throw new RuntimeException(msg);",
      "right" : "throw new RuntimeException(msg);",
      "info" : "ThrowStatement[259605-259637]:ThrowStatement[260183-260215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[259787-259828]:Block[260365-260406]"
    }, {
      "left" : "defaultFontOrDeath(method, 12);",
      "right" : "defaultFontOrDeath(method, 12);",
      "info" : "ExpressionStatement[259793-259824]:ExpressionStatement[260371-260402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[260095-260270]:Block[260673-260848]"
    }, {
      "left" : "if (parent != null)",
      "right" : "if (parent != null)",
      "info" : "IfStatement[260101-260266]:IfStatement[260679-260844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[260121-260177]:Block[260699-260755]"
    }, {
      "left" : "textFont = parent.createDefaultFont(size);",
      "right" : "textFont = parent.createDefaultFont(size);",
      "info" : "ExpressionStatement[260129-260171]:ExpressionStatement[260707-260749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[260183-260266]:Block[260761-260844]"
    }, {
      "left" : "throw new RuntimeException(\"Use textFont() before \" + method + \"()\");",
      "right" : "throw new RuntimeException(\"Use textFont() before \" + method + \"()\");",
      "info" : "ThrowStatement[260191-260260]:ThrowStatement[260769-260838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[260767-260800]:Block[261345-261378]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[260784-260796]:ReturnStatement[261362-261374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[260912-260945]:Block[261490-261523]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[260929-260941]:ReturnStatement[261507-261519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[261058-261092]:Block[261636-261670]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[261075-261088]:ReturnStatement[261653-261666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[261215-261249]:Block[261793-261827]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[261232-261245]:ReturnStatement[261810-261823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[261276-261311]:Block[261854-261889]"
    }, {
      "left" : "return pixelDensity == 2;",
      "right" : "return pixelDensity == 2;",
      "info" : "ReturnStatement[261282-261307]:ReturnStatement[261860-261885]"
    } ]
  },
  "interFileMappings" : { }
}