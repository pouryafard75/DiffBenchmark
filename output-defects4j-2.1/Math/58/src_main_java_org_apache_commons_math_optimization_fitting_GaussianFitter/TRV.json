{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public GaussianFitter(DifferentiableMultivariateVectorialOptimizer optimizer)",
      "right" : "public GaussianFitter(DifferentiableMultivariateVectorialOptimizer optimizer)",
      "info" : "MethodDeclaration[2693-2946]:MethodDeclaration[2693-2946]"
    }, {
      "left" : "public double[] fit(double[] initialGuess)",
      "right" : "public double[] fit(double[] initialGuess)",
      "info" : "MethodDeclaration[2952-4463]:MethodDeclaration[2952-4463]"
    }, {
      "left" : "private final ParametricUnivariateRealFunction g = new Gaussian.Parametric();",
      "right" : "private final ParametricUnivariateRealFunction g = new Gaussian.Parametric();",
      "info" : "FieldDeclaration[3473-3550]:FieldDeclaration[3473-3550]"
    }, {
      "left" : "public double value(double x, double[] p)",
      "right" : "public double value(double x, double[] p)",
      "info" : "MethodDeclaration[3568-3909]:MethodDeclaration[3568-3909]"
    }, {
      "left" : "public double[] gradient(double x, double[] p)",
      "right" : "public double[] gradient(double x, double[] p)",
      "info" : "MethodDeclaration[3927-4404]:MethodDeclaration[3927-4404]"
    }, {
      "left" : "ParameterGuesser",
      "right" : "ParameterGuesser",
      "info" : "TypeDeclaration[4846-13598]:TypeDeclaration[4819-13571]"
    }, {
      "left" : "private final WeightedObservedPoint[] observations;",
      "right" : "private final WeightedObservedPoint[] observations;",
      "info" : "FieldDeclaration[5114-5197]:FieldDeclaration[5087-5170]"
    }, {
      "left" : "private double[] parameters;",
      "right" : "private double[] parameters;",
      "info" : "FieldDeclaration[5206-5279]:FieldDeclaration[5179-5252]"
    }, {
      "left" : "public ParameterGuesser(WeightedObservedPoint[] observations)",
      "right" : "public ParameterGuesser(WeightedObservedPoint[] observations)",
      "info" : "MethodDeclaration[5289-5867]:MethodDeclaration[5262-5840]"
    }, {
      "left" : "public double[] guess()",
      "right" : "public double[] guess()",
      "info" : "MethodDeclaration[5877-6222]:MethodDeclaration[5850-6195]"
    }, {
      "left" : "private double[] basicGuess(WeightedObservedPoint[] points)",
      "right" : "private double[] basicGuess(WeightedObservedPoint[] points)",
      "info" : "MethodDeclaration[6232-7381]:MethodDeclaration[6205-7354]"
    }, {
      "left" : "private int findMaxY(WeightedObservedPoint[] points)",
      "right" : "private int findMaxY(WeightedObservedPoint[] points)",
      "info" : "MethodDeclaration[7391-7902]:MethodDeclaration[7364-7875]"
    }, {
      "left" : "private double interpolateXAtY(WeightedObservedPoint[] points,\n                                       int startIdx, int idxStep, double y)\n            throws OutOfRangeException",
      "right" : "private double interpolateXAtY(WeightedObservedPoint[] points,\n                                       int startIdx, int idxStep, double y)\n            throws OutOfRangeException",
      "info" : "MethodDeclaration[7912-9451]:MethodDeclaration[7885-9424]"
    }, {
      "left" : "private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                   int startIdx, int idxStep, double y)\n            throws OutOfRangeException",
      "right" : "private WeightedObservedPoint[] getInterpolationPointsForY(WeightedObservedPoint[] points,\n                                                                   int startIdx, int idxStep, double y)\n            throws OutOfRangeException",
      "info" : "MethodDeclaration[9461-11423]:MethodDeclaration[9434-11396]"
    }, {
      "left" : "private boolean isBetween(double value, double boundary1, double boundary2)",
      "right" : "private boolean isBetween(double value, double boundary1, double boundary2)",
      "info" : "MethodDeclaration[11433-12115]:MethodDeclaration[11406-12088]"
    }, {
      "left" : "private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator()",
      "right" : "private Comparator<WeightedObservedPoint> createWeightedObservedPointComparator()",
      "info" : "MethodDeclaration[12125-13592]:MethodDeclaration[12098-13565]"
    }, {
      "left" : "public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2)",
      "right" : "public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2)",
      "info" : "MethodDeclaration[12497-13567]:MethodDeclaration[12470-13540]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2913-2946]:Block[2913-2946]"
    }, {
      "left" : "super(optimizer);",
      "right" : "super(optimizer);",
      "info" : "SuperConstructorInvocation[2923-2940]:SuperConstructorInvocation[2923-2940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3363-4463]:Block[3363-4463]"
    }, {
      "left" : "final ParametricUnivariateRealFunction f = new ParametricUnivariateRealFunction() {\n                private final ParametricUnivariateRealFunction g = new Gaussian.Parametric();\n\n                public double value(double x, double[] p) {\n                    double v = Double.POSITIVE_INFINITY;\n                    try {\n                        v = g.value(x, p);\n                    } catch (NotStrictlyPositiveException e) {\n                        // Do nothing.\n                    }\n                    return v;\n                }\n\n                public double[] gradient(double x, double[] p) {\n                    double[] v = { Double.POSITIVE_INFINITY,\n                                   Double.POSITIVE_INFINITY,\n                                   Double.POSITIVE_INFINITY };\n                    try {\n                        v = g.gradient(x, p);\n                    } catch (NotStrictlyPositiveException e) {\n                        // Do nothing.\n                    }\n                    return v;\n                }\n            };",
      "right" : "final ParametricUnivariateRealFunction f = new ParametricUnivariateRealFunction() {\n                private final ParametricUnivariateRealFunction g = new Gaussian.Parametric();\n\n                public double value(double x, double[] p) {\n                    double v = Double.POSITIVE_INFINITY;\n                    try {\n                        v = g.value(x, p);\n                    } catch (NotStrictlyPositiveException e) {\n                        // Do nothing.\n                    }\n                    return v;\n                }\n\n                public double[] gradient(double x, double[] p) {\n                    double[] v = { Double.POSITIVE_INFINITY,\n                                   Double.POSITIVE_INFINITY,\n                                   Double.POSITIVE_INFINITY };\n                    try {\n                        v = g.gradient(x, p);\n                    } catch (NotStrictlyPositiveException e) {\n                        // Do nothing.\n                    }\n                    return v;\n                }\n            };",
      "info" : "VariableDeclarationStatement[3373-4419]:VariableDeclarationStatement[3373-4419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3610-3909]:Block[3610-3909]"
    }, {
      "left" : "double v = Double.POSITIVE_INFINITY;",
      "right" : "double v = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[3632-3668]:VariableDeclarationStatement[3632-3668]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3689-3861]:TryStatement[3689-3861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3693-3759]:Block[3693-3759]"
    }, {
      "left" : "v = g.value(x, p);",
      "right" : "v = g.value(x, p);",
      "info" : "ExpressionStatement[3719-3737]:ExpressionStatement[3719-3737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3799-3861]:Block[3799-3861]"
    }, {
      "left" : "return v;",
      "right" : "return v;",
      "info" : "ReturnStatement[3882-3891]:ReturnStatement[3882-3891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3974-4404]:Block[3974-4404]"
    }, {
      "left" : "double[] v = { Double.POSITIVE_INFINITY,\n                                   Double.POSITIVE_INFINITY,\n                                   Double.POSITIVE_INFINITY };",
      "right" : "double[] v = { Double.POSITIVE_INFINITY,\n                                   Double.POSITIVE_INFINITY,\n                                   Double.POSITIVE_INFINITY };",
      "info" : "VariableDeclarationStatement[3996-4160]:VariableDeclarationStatement[3996-4160]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4181-4356]:TryStatement[4181-4356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4185-4254]:Block[4185-4254]"
    }, {
      "left" : "v = g.gradient(x, p);",
      "right" : "v = g.gradient(x, p);",
      "info" : "ExpressionStatement[4211-4232]:ExpressionStatement[4211-4232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4294-4356]:Block[4294-4356]"
    }, {
      "left" : "return v;",
      "right" : "return v;",
      "info" : "ReturnStatement[4377-4386]:ReturnStatement[4377-4386]"
    }, {
      "left" : "return fit(f, initialGuess);",
      "right" : "return fit(f, initialGuess);",
      "info" : "ReturnStatement[4429-4457]:ReturnStatement[4429-4457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5529-5867]:Block[5502-5840]"
    }, {
      "left" : "if (observations == null)",
      "right" : "if (observations == null)",
      "info" : "IfStatement[5543-5663]:IfStatement[5516-5636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5569-5663]:Block[5542-5636]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);",
      "right" : "throw new NullArgumentException(LocalizedFormats.INPUT_ARRAY);",
      "info" : "ThrowStatement[5587-5649]:ThrowStatement[5560-5622]"
    }, {
      "left" : "if (observations.length < 3)",
      "right" : "if (observations.length < 3)",
      "info" : "IfStatement[5676-5803]:IfStatement[5649-5776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5705-5803]:Block[5678-5776]"
    }, {
      "left" : "throw new NumberIsTooSmallException(observations.length, 3, true);",
      "right" : "throw new NumberIsTooSmallException(observations.length, 3, true);",
      "info" : "ThrowStatement[5723-5789]:ThrowStatement[5696-5762]"
    }, {
      "left" : "this.observations = observations.clone();",
      "right" : "this.observations = observations.clone();",
      "info" : "ExpressionStatement[5816-5857]:ExpressionStatement[5789-5830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6065-6222]:Block[6038-6195]"
    }, {
      "left" : "if (parameters == null)",
      "right" : "if (parameters == null)",
      "info" : "IfStatement[6079-6173]:IfStatement[6052-6146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6103-6173]:Block[6076-6146]"
    }, {
      "left" : "parameters = basicGuess(observations);",
      "right" : "parameters = basicGuess(observations);",
      "info" : "ExpressionStatement[6121-6159]:ExpressionStatement[6094-6132]"
    }, {
      "left" : "return parameters.clone();",
      "right" : "return parameters.clone();",
      "info" : "ReturnStatement[6186-6212]:ReturnStatement[6159-6185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6537-7381]:Block[6510-7354]"
    }, {
      "left" : "Arrays.sort(points, createWeightedObservedPointComparator());",
      "right" : "Arrays.sort(points, createWeightedObservedPointComparator());",
      "info" : "ExpressionStatement[6551-6612]:ExpressionStatement[6524-6585]"
    }, {
      "left" : "double[] params = new double[3];",
      "right" : "double[] params = new double[3];",
      "info" : "VariableDeclarationStatement[6625-6657]:VariableDeclarationStatement[6598-6630]"
    }, {
      "left" : "int maxYIdx = findMaxY(points);",
      "right" : "int maxYIdx = findMaxY(points);",
      "info" : "VariableDeclarationStatement[6671-6702]:VariableDeclarationStatement[6644-6675]"
    }, {
      "left" : "params[0] = points[maxYIdx].getY();",
      "right" : "params[0] = points[maxYIdx].getY();",
      "info" : "ExpressionStatement[6715-6750]:ExpressionStatement[6688-6723]"
    }, {
      "left" : "params[1] = points[maxYIdx].getX();",
      "right" : "params[1] = points[maxYIdx].getX();",
      "info" : "ExpressionStatement[6763-6798]:ExpressionStatement[6736-6771]"
    }, {
      "left" : "double fwhmApprox;",
      "right" : "double fwhmApprox;",
      "info" : "VariableDeclarationStatement[6812-6830]:VariableDeclarationStatement[6785-6803]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6843-7266]:TryStatement[6816-7239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6847-7138]:Block[6820-7111]"
    }, {
      "left" : "double halfY = params[0] + ((params[1] - params[0]) / 2.0);",
      "right" : "double halfY = params[0] + ((params[1] - params[0]) / 2.0);",
      "info" : "VariableDeclarationStatement[6865-6924]:VariableDeclarationStatement[6838-6897]"
    }, {
      "left" : "double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);",
      "right" : "double fwhmX1 = interpolateXAtY(points, maxYIdx, -1, halfY);",
      "info" : "VariableDeclarationStatement[6941-7001]:VariableDeclarationStatement[6914-6974]"
    }, {
      "left" : "double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);",
      "right" : "double fwhmX2 = interpolateXAtY(points, maxYIdx, +1, halfY);",
      "info" : "VariableDeclarationStatement[7018-7078]:VariableDeclarationStatement[6991-7051]"
    }, {
      "left" : "fwhmApprox = fwhmX2 - fwhmX1;",
      "right" : "fwhmApprox = fwhmX2 - fwhmX1;",
      "info" : "ExpressionStatement[7095-7124]:ExpressionStatement[7068-7097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7169-7266]:Block[7142-7239]"
    }, {
      "left" : "fwhmApprox = points[points.length - 1].getX() - points[0].getX();",
      "right" : "fwhmApprox = points[points.length - 1].getX() - points[0].getX();",
      "info" : "ExpressionStatement[7187-7252]:ExpressionStatement[7160-7225]"
    }, {
      "left" : "params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));",
      "right" : "params[2] = fwhmApprox / (2.0 * Math.sqrt(2.0 * Math.log(2.0)));",
      "info" : "ExpressionStatement[7279-7343]:ExpressionStatement[7252-7316]"
    }, {
      "left" : "return params;",
      "right" : "return params;",
      "info" : "ReturnStatement[7357-7371]:ReturnStatement[7330-7344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7650-7902]:Block[7623-7875]"
    }, {
      "left" : "int maxYIdx = 0;",
      "right" : "int maxYIdx = 0;",
      "info" : "VariableDeclarationStatement[7664-7680]:VariableDeclarationStatement[7637-7653]"
    }, {
      "left" : "for (int i = 1; i < points.length; i++)",
      "right" : "for (int i = 1; i < points.length; i++)",
      "info" : "ForStatement[7693-7864]:ForStatement[7666-7837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7733-7864]:Block[7706-7837]"
    }, {
      "left" : "if (points[i].getY() > points[maxYIdx].getY())",
      "right" : "if (points[i].getY() > points[maxYIdx].getY())",
      "info" : "IfStatement[7751-7850]:IfStatement[7724-7823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7798-7850]:Block[7771-7823]"
    }, {
      "left" : "maxYIdx = i;",
      "right" : "maxYIdx = i;",
      "info" : "ExpressionStatement[7820-7832]:ExpressionStatement[7793-7805]"
    }, {
      "left" : "return maxYIdx;",
      "right" : "return maxYIdx;",
      "info" : "ReturnStatement[7877-7892]:ReturnStatement[7850-7865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8784-9451]:Block[8757-9424]"
    }, {
      "left" : "if (idxStep == 0)",
      "right" : "if (idxStep == 0)",
      "info" : "IfStatement[8798-8874]:IfStatement[8771-8847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8816-8874]:Block[8789-8847]"
    }, {
      "left" : "throw new ZeroException();",
      "right" : "throw new ZeroException();",
      "info" : "ThrowStatement[8834-8860]:ThrowStatement[8807-8833]"
    }, {
      "left" : "WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);",
      "right" : "WeightedObservedPoint[] twoPoints = getInterpolationPointsForY(points, startIdx, idxStep, y);",
      "info" : "VariableDeclarationStatement[8887-8980]:VariableDeclarationStatement[8860-8953]"
    }, {
      "left" : "WeightedObservedPoint pointA = twoPoints[0];",
      "right" : "WeightedObservedPoint pointA = twoPoints[0];",
      "info" : "VariableDeclarationStatement[8993-9037]:VariableDeclarationStatement[8966-9010]"
    }, {
      "left" : "WeightedObservedPoint pointB = twoPoints[1];",
      "right" : "WeightedObservedPoint pointB = twoPoints[1];",
      "info" : "VariableDeclarationStatement[9050-9094]:VariableDeclarationStatement[9023-9067]"
    }, {
      "left" : "if (pointA.getY() == y)",
      "right" : "if (pointA.getY() == y)",
      "info" : "IfStatement[9107-9184]:IfStatement[9080-9157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9131-9184]:Block[9104-9157]"
    }, {
      "left" : "return pointA.getX();",
      "right" : "return pointA.getX();",
      "info" : "ReturnStatement[9149-9170]:ReturnStatement[9122-9143]"
    }, {
      "left" : "if (pointB.getY() == y)",
      "right" : "if (pointB.getY() == y)",
      "info" : "IfStatement[9197-9274]:IfStatement[9170-9247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9221-9274]:Block[9194-9247]"
    }, {
      "left" : "return pointB.getX();",
      "right" : "return pointB.getX();",
      "info" : "ReturnStatement[9239-9260]:ReturnStatement[9212-9233]"
    }, {
      "left" : "return pointA.getX() +\n                   (((y - pointA.getY()) * (pointB.getX() - pointA.getX())) /\n                    (pointB.getY() - pointA.getY()));",
      "right" : "return pointA.getX() +\n                   (((y - pointA.getY()) * (pointB.getX() - pointA.getX())) /\n                    (pointB.getY() - pointA.getY()));",
      "info" : "ReturnStatement[9287-9441]:ReturnStatement[9260-9414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10484-11423]:Block[10457-11396]"
    }, {
      "left" : "if (idxStep == 0)",
      "right" : "if (idxStep == 0)",
      "info" : "IfStatement[10498-10574]:IfStatement[10471-10547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10516-10574]:Block[10489-10547]"
    }, {
      "left" : "throw new ZeroException();",
      "right" : "throw new ZeroException();",
      "info" : "ThrowStatement[10534-10560]:ThrowStatement[10507-10533]"
    }, {
      "left" : "for (int i = startIdx;\n                 (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n                 i += idxStep)",
      "right" : "for (int i = startIdx;\n                 (idxStep < 0) ? (i + idxStep >= 0) : (i + idxStep < points.length);\n                 i += idxStep)",
      "info" : "ForStatement[10587-11067]:ForStatement[10560-11040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10726-11067]:Block[10699-11040]"
    }, {
      "left" : "if (isBetween(y, points[i].getY(), points[i + idxStep].getY()))",
      "right" : "if (isBetween(y, points[i].getY(), points[i + idxStep].getY()))",
      "info" : "IfStatement[10744-11053]:IfStatement[10717-11026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10808-11053]:Block[10781-11026]"
    }, {
      "left" : "return (idxStep < 0) ?\n                           new WeightedObservedPoint[] { points[i + idxStep], points[i] } :\n                           new WeightedObservedPoint[] { points[i], points[i + idxStep] };",
      "right" : "return (idxStep < 0) ?\n                           new WeightedObservedPoint[] { points[i + idxStep], points[i] } :\n                           new WeightedObservedPoint[] { points[i], points[i + idxStep] };",
      "info" : "ReturnStatement[10830-11035]:ReturnStatement[10803-11008]"
    }, {
      "left" : "double minY = Double.POSITIVE_INFINITY;",
      "right" : "double minY = Double.POSITIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[11081-11120]:VariableDeclarationStatement[11054-11093]"
    }, {
      "left" : "double maxY = Double.NEGATIVE_INFINITY;",
      "right" : "double maxY = Double.NEGATIVE_INFINITY;",
      "info" : "VariableDeclarationStatement[11133-11172]:VariableDeclarationStatement[11106-11145]"
    }, {
      "left" : "for (final WeightedObservedPoint point : points)",
      "right" : "for (final WeightedObservedPoint point : points)",
      "info" : "EnhancedForStatement[11185-11355]:EnhancedForStatement[11158-11328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11234-11355]:Block[11207-11328]"
    }, {
      "left" : "minY = Math.min(minY, point.getY());",
      "right" : "minY = Math.min(minY, point.getY());",
      "info" : "ExpressionStatement[11252-11288]:ExpressionStatement[11225-11261]"
    }, {
      "left" : "maxY = Math.max(maxY, point.getY());",
      "right" : "maxY = Math.max(maxY, point.getY());",
      "info" : "ExpressionStatement[11305-11341]:ExpressionStatement[11278-11314]"
    }, {
      "left" : "throw new OutOfRangeException(y, minY, maxY);",
      "right" : "throw new OutOfRangeException(y, minY, maxY);",
      "info" : "ThrowStatement[11368-11413]:ThrowStatement[11341-11386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11976-12115]:Block[11949-12088]"
    }, {
      "left" : "return (value >= boundary1 && value <= boundary2) ||\n                   (value >= boundary2 && value <= boundary1);",
      "right" : "return (value >= boundary1 && value <= boundary2) ||\n                   (value >= boundary2 && value <= boundary1);",
      "info" : "ReturnStatement[11990-12105]:ReturnStatement[11963-12078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12418-13592]:Block[12391-13565]"
    }, {
      "left" : "return new Comparator<WeightedObservedPoint>() {\n                public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n                    if (p1 == null && p2 == null) {\n                        return 0;\n                    }\n                    if (p1 == null) {\n                        return -1;\n                    }\n                    if (p2 == null) {\n                        return 1;\n                    }\n                    if (p1.getX() < p2.getX()) {\n                        return -1;\n                    }\n                    if (p1.getX() > p2.getX()) {\n                        return 1;\n                    }\n                    if (p1.getY() < p2.getY()) {\n                        return -1;\n                    }\n                    if (p1.getY() > p2.getY()) {\n                        return 1;\n                    }\n                    if (p1.getWeight() < p2.getWeight()) {\n                        return -1;\n                    }\n                    if (p1.getWeight() > p2.getWeight()) {\n                        return 1;\n                    }\n                    return 0;\n                }\n            };",
      "right" : "return new Comparator<WeightedObservedPoint>() {\n                public int compare(WeightedObservedPoint p1, WeightedObservedPoint p2) {\n                    if (p1 == null && p2 == null) {\n                        return 0;\n                    }\n                    if (p1 == null) {\n                        return -1;\n                    }\n                    if (p2 == null) {\n                        return 1;\n                    }\n                    if (p1.getX() < p2.getX()) {\n                        return -1;\n                    }\n                    if (p1.getX() > p2.getX()) {\n                        return 1;\n                    }\n                    if (p1.getY() < p2.getY()) {\n                        return -1;\n                    }\n                    if (p1.getY() > p2.getY()) {\n                        return 1;\n                    }\n                    if (p1.getWeight() < p2.getWeight()) {\n                        return -1;\n                    }\n                    if (p1.getWeight() > p2.getWeight()) {\n                        return 1;\n                    }\n                    return 0;\n                }\n            };",
      "info" : "ReturnStatement[12432-13582]:ReturnStatement[12405-13555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12568-13567]:Block[12541-13540]"
    }, {
      "left" : "if (p1 == null && p2 == null)",
      "right" : "if (p1 == null && p2 == null)",
      "info" : "IfStatement[12590-12677]:IfStatement[12563-12650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12620-12677]:Block[12593-12650]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[12646-12655]:ReturnStatement[12619-12628]"
    }, {
      "left" : "if (p1 == null)",
      "right" : "if (p1 == null)",
      "info" : "IfStatement[12698-12772]:IfStatement[12671-12745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12714-12772]:Block[12687-12745]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[12740-12750]:ReturnStatement[12713-12723]"
    }, {
      "left" : "if (p2 == null)",
      "right" : "if (p2 == null)",
      "info" : "IfStatement[12793-12866]:IfStatement[12766-12839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12809-12866]:Block[12782-12839]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[12835-12844]:ReturnStatement[12808-12817]"
    }, {
      "left" : "if (p1.getX() < p2.getX())",
      "right" : "if (p1.getX() < p2.getX())",
      "info" : "IfStatement[12887-12972]:IfStatement[12860-12945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12914-12972]:Block[12887-12945]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[12940-12950]:ReturnStatement[12913-12923]"
    }, {
      "left" : "if (p1.getX() > p2.getX())",
      "right" : "if (p1.getX() > p2.getX())",
      "info" : "IfStatement[12993-13077]:IfStatement[12966-13050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13020-13077]:Block[12993-13050]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[13046-13055]:ReturnStatement[13019-13028]"
    }, {
      "left" : "if (p1.getY() < p2.getY())",
      "right" : "if (p1.getY() < p2.getY())",
      "info" : "IfStatement[13098-13183]:IfStatement[13071-13156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13125-13183]:Block[13098-13156]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[13151-13161]:ReturnStatement[13124-13134]"
    }, {
      "left" : "if (p1.getY() > p2.getY())",
      "right" : "if (p1.getY() > p2.getY())",
      "info" : "IfStatement[13204-13288]:IfStatement[13177-13261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13231-13288]:Block[13204-13261]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[13257-13266]:ReturnStatement[13230-13239]"
    }, {
      "left" : "if (p1.getWeight() < p2.getWeight())",
      "right" : "if (p1.getWeight() < p2.getWeight())",
      "info" : "IfStatement[13309-13404]:IfStatement[13282-13377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13346-13404]:Block[13319-13377]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[13372-13382]:ReturnStatement[13345-13355]"
    }, {
      "left" : "if (p1.getWeight() > p2.getWeight())",
      "right" : "if (p1.getWeight() > p2.getWeight())",
      "info" : "IfStatement[13425-13519]:IfStatement[13398-13492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13462-13519]:Block[13435-13492]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[13488-13497]:ReturnStatement[13461-13470]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[13540-13549]:ReturnStatement[13513-13522]"
    } ]
  },
  "interFileMappings" : { }
}