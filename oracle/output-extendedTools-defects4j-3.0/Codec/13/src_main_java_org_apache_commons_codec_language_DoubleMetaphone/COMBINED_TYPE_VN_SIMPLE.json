{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DoubleMetaphone",
      "right" : "DoubleMetaphone",
      "info" : "TypeDeclaration[946-35932]:TypeDeclaration[998-35997]"
    }, {
      "left" : "private static final String VOWELS = \"AEIOUY\";",
      "right" : "private static final String VOWELS = \"AEIOUY\";",
      "info" : "FieldDeclaration[1787-1877]:FieldDeclaration[1839-1929]"
    }, {
      "left" : "private static final String[] SILENT_START =\n        { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
      "right" : "private static final String[] SILENT_START =\n        { \"GN\", \"KN\", \"PN\", \"WR\", \"PS\" };",
      "info" : "FieldDeclaration[1883-2039]:FieldDeclaration[1935-2091]"
    }, {
      "left" : "private static final String[] L_R_N_M_B_H_F_V_W_SPACE =\n        { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };",
      "right" : "private static final String[] L_R_N_M_B_H_F_V_W_SPACE =\n        { \"L\", \"R\", \"N\", \"M\", \"B\", \"H\", \"F\", \"V\", \"W\", \" \" };",
      "info" : "FieldDeclaration[2044-2161]:FieldDeclaration[2096-2213]"
    }, {
      "left" : "private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER =\n        { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };",
      "right" : "private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER =\n        { \"ES\", \"EP\", \"EB\", \"EL\", \"EY\", \"IB\", \"IL\", \"IN\", \"IE\", \"EI\", \"ER\" };",
      "info" : "FieldDeclaration[2166-2308]:FieldDeclaration[2218-2360]"
    }, {
      "left" : "private static final String[] L_T_K_S_N_M_B_Z =\n        { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };",
      "right" : "private static final String[] L_T_K_S_N_M_B_Z =\n        { \"L\", \"T\", \"K\", \"S\", \"N\", \"M\", \"B\", \"Z\" };",
      "info" : "FieldDeclaration[2313-2412]:FieldDeclaration[2365-2464]"
    }, {
      "left" : "private int maxCodeLen = 4;",
      "right" : "private int maxCodeLen = 4;",
      "info" : "FieldDeclaration[2418-2512]:FieldDeclaration[2470-2564]"
    }, {
      "left" : "public DoubleMetaphone()",
      "right" : "public DoubleMetaphone()",
      "info" : "MethodDeclaration[2518-2642]:MethodDeclaration[2570-2694]"
    }, {
      "left" : "public String doubleMetaphone(final String value)",
      "right" : "public String doubleMetaphone(final String value)",
      "info" : "MethodDeclaration[2648-2889]:MethodDeclaration[2700-2941]"
    }, {
      "left" : "public String doubleMetaphone(String value, final boolean alternate)",
      "right" : "public String doubleMetaphone(String value, final boolean alternate)",
      "info" : "MethodDeclaration[2895-6801]:MethodDeclaration[2947-6853]"
    }, {
      "left" : "public Object encode(final Object obj) throws EncoderException",
      "right" : "public Object encode(final Object obj) throws EncoderException",
      "info" : "MethodDeclaration[6807-7448]:MethodDeclaration[6859-7500]"
    }, {
      "left" : "public String encode(final String value)",
      "right" : "public String encode(final String value)",
      "info" : "MethodDeclaration[7454-7695]:MethodDeclaration[7506-7747]"
    }, {
      "left" : "public boolean isDoubleMetaphoneEqual(final String value1, final String value2)",
      "right" : "public boolean isDoubleMetaphoneEqual(final String value1, final String value2)",
      "info" : "MethodDeclaration[7701-8317]:MethodDeclaration[7753-8369]"
    }, {
      "left" : "public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate)",
      "right" : "public boolean isDoubleMetaphoneEqual(final String value1, final String value2, final boolean alternate)",
      "info" : "MethodDeclaration[8323-9040]:MethodDeclaration[8375-9105]"
    }, {
      "left" : "public int getMaxCodeLen()",
      "right" : "public int getMaxCodeLen()",
      "info" : "MethodDeclaration[9046-9178]:MethodDeclaration[9111-9243]"
    }, {
      "left" : "public void setMaxCodeLen(final int maxCodeLen)",
      "right" : "public void setMaxCodeLen(final int maxCodeLen)",
      "info" : "MethodDeclaration[9184-9368]:MethodDeclaration[9249-9433]"
    }, {
      "left" : "private int handleAEIOUY(final DoubleMetaphoneResult result, final int index)",
      "right" : "private int handleAEIOUY(final DoubleMetaphoneResult result, final int index)",
      "info" : "MethodDeclaration[9404-9654]:MethodDeclaration[9469-9719]"
    }, {
      "left" : "private int handleC(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleC(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[9660-11622]:MethodDeclaration[9725-11687]"
    }, {
      "left" : "private int handleCC(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleCC(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[11628-12442]:MethodDeclaration[11693-12507]"
    }, {
      "left" : "private int handleCH(final String value, final DoubleMetaphoneResult result, final int index)",
      "right" : "private int handleCH(final String value, final DoubleMetaphoneResult result, final int index)",
      "info" : "MethodDeclaration[12448-13428]:MethodDeclaration[12513-13493]"
    }, {
      "left" : "private int handleD(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleD(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[13434-14126]:MethodDeclaration[13499-14191]"
    }, {
      "left" : "private int handleG(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic)",
      "right" : "private int handleG(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic)",
      "info" : "MethodDeclaration[14132-16553]:MethodDeclaration[14197-16618]"
    }, {
      "left" : "private int handleGH(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleGH(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[16559-17815]:MethodDeclaration[16624-17880]"
    }, {
      "left" : "private int handleH(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleH(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[17821-18314]:MethodDeclaration[17886-18379]"
    }, {
      "left" : "private int handleJ(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic)",
      "right" : "private int handleJ(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic)",
      "info" : "MethodDeclaration[18320-19834]:MethodDeclaration[18385-19899]"
    }, {
      "left" : "private int handleL(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleL(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[19840-20308]:MethodDeclaration[19905-20373]"
    }, {
      "left" : "private int handleP(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleP(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[20314-20719]:MethodDeclaration[20379-20784]"
    }, {
      "left" : "private int handleR(final String value, final DoubleMetaphoneResult result, final int index,\n                        final boolean slavoGermanic)",
      "right" : "private int handleR(final String value, final DoubleMetaphoneResult result, final int index,\n                        final boolean slavoGermanic)",
      "info" : "MethodDeclaration[20725-21262]:MethodDeclaration[20790-21327]"
    }, {
      "left" : "private int handleS(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic)",
      "right" : "private int handleS(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic)",
      "info" : "MethodDeclaration[21268-23403]:MethodDeclaration[21333-23468]"
    }, {
      "left" : "private int handleSC(final String value, final DoubleMetaphoneResult result, final int index)",
      "right" : "private int handleSC(final String value, final DoubleMetaphoneResult result, final int index)",
      "info" : "MethodDeclaration[23409-24483]:MethodDeclaration[23474-24548]"
    }, {
      "left" : "private int handleT(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleT(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[24489-25476]:MethodDeclaration[24554-25541]"
    }, {
      "left" : "private int handleW(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleW(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[25482-26896]:MethodDeclaration[25547-26961]"
    }, {
      "left" : "private int handleX(final String value, final DoubleMetaphoneResult result, int index)",
      "right" : "private int handleX(final String value, final DoubleMetaphoneResult result, int index)",
      "info" : "MethodDeclaration[26902-27530]:MethodDeclaration[26967-27595]"
    }, {
      "left" : "private int handleZ(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic)",
      "right" : "private int handleZ(final String value, final DoubleMetaphoneResult result, int index,\n                        final boolean slavoGermanic)",
      "info" : "MethodDeclaration[27536-28288]:MethodDeclaration[27601-28353]"
    }, {
      "left" : "private boolean conditionC0(final String value, final int index)",
      "right" : "private boolean conditionC0(final String value, final int index)",
      "info" : "MethodDeclaration[28326-28947]:MethodDeclaration[28391-29012]"
    }, {
      "left" : "private boolean conditionCH0(final String value, final int index)",
      "right" : "private boolean conditionCH0(final String value, final int index)",
      "info" : "MethodDeclaration[28953-29440]:MethodDeclaration[29018-29505]"
    }, {
      "left" : "private boolean conditionCH1(final String value, final int index)",
      "right" : "private boolean conditionCH1(final String value, final int index)",
      "info" : "MethodDeclaration[29446-29999]:MethodDeclaration[29511-30064]"
    }, {
      "left" : "private boolean conditionL0(final String value, final int index)",
      "right" : "private boolean conditionL0(final String value, final int index)",
      "info" : "MethodDeclaration[30005-30551]:MethodDeclaration[30070-30616]"
    }, {
      "left" : "private boolean conditionM0(final String value, final int index)",
      "right" : "private boolean conditionM0(final String value, final int index)",
      "info" : "MethodDeclaration[30557-30909]:MethodDeclaration[30622-30974]"
    }, {
      "left" : "private boolean isSlavoGermanic(final String value)",
      "right" : "private boolean isSlavoGermanic(final String value)",
      "info" : "MethodDeclaration[30953-31327]:MethodDeclaration[31018-31392]"
    }, {
      "left" : "private boolean isVowel(final char ch)",
      "right" : "private boolean isVowel(final char ch)",
      "info" : "MethodDeclaration[31333-31499]:MethodDeclaration[31398-31564]"
    }, {
      "left" : "private boolean isSilentStart(final String value)",
      "right" : "private boolean isSilentStart(final String value)",
      "info" : "MethodDeclaration[31505-31987]:MethodDeclaration[31570-32052]"
    }, {
      "left" : "private String cleanInput(String input)",
      "right" : "private String cleanInput(String input)",
      "info" : "MethodDeclaration[31993-32305]:MethodDeclaration[32058-32370]"
    }, {
      "left" : "protected char charAt(final String value, final int index)",
      "right" : "protected char charAt(final String value, final int index)",
      "info" : "MethodDeclaration[32311-32708]:MethodDeclaration[32376-32773]"
    }, {
      "left" : "protected static boolean contains(final String value, final int start, final int length,\n                                      final String... criteria)",
      "right" : "protected static boolean contains(final String value, final int start, final int length,\n                                      final String... criteria)",
      "info" : "MethodDeclaration[32714-33449]:MethodDeclaration[32779-33514]"
    }, {
      "left" : "DoubleMetaphoneResult",
      "right" : "DoubleMetaphoneResult",
      "info" : "TypeDeclaration[33490-35930]:TypeDeclaration[33555-35995]"
    }, {
      "left" : "private final StringBuilder primary = new StringBuilder(getMaxCodeLen());",
      "right" : "private final StringBuilder primary = new StringBuilder(getMaxCodeLen());",
      "info" : "FieldDeclaration[33640-33713]:FieldDeclaration[33705-33778]"
    }, {
      "left" : "private final StringBuilder alternate = new StringBuilder(getMaxCodeLen());",
      "right" : "private final StringBuilder alternate = new StringBuilder(getMaxCodeLen());",
      "info" : "FieldDeclaration[33722-33797]:FieldDeclaration[33787-33862]"
    }, {
      "left" : "private final int maxLength;",
      "right" : "private final int maxLength;",
      "info" : "FieldDeclaration[33806-33834]:FieldDeclaration[33871-33899]"
    }, {
      "left" : "public DoubleMetaphoneResult(final int maxLength)",
      "right" : "public DoubleMetaphoneResult(final int maxLength)",
      "info" : "MethodDeclaration[33844-33945]:MethodDeclaration[33909-34010]"
    }, {
      "left" : "public void append(final char value)",
      "right" : "public void append(final char value)",
      "info" : "MethodDeclaration[33955-34073]:MethodDeclaration[34020-34138]"
    }, {
      "left" : "public void append(final char primary, final char alternate)",
      "right" : "public void append(final char primary, final char alternate)",
      "info" : "MethodDeclaration[34083-34231]:MethodDeclaration[34148-34296]"
    }, {
      "left" : "public void appendPrimary(final char value)",
      "right" : "public void appendPrimary(final char value)",
      "info" : "MethodDeclaration[34241-34412]:MethodDeclaration[34306-34477]"
    }, {
      "left" : "public void appendAlternate(final char value)",
      "right" : "public void appendAlternate(final char value)",
      "info" : "MethodDeclaration[34422-34599]:MethodDeclaration[34487-34664]"
    }, {
      "left" : "public void append(final String value)",
      "right" : "public void append(final String value)",
      "info" : "MethodDeclaration[34609-34729]:MethodDeclaration[34674-34794]"
    }, {
      "left" : "public void append(final String primary, final String alternate)",
      "right" : "public void append(final String primary, final String alternate)",
      "info" : "MethodDeclaration[34739-34891]:MethodDeclaration[34804-34956]"
    }, {
      "left" : "public void appendPrimary(final String value)",
      "right" : "public void appendPrimary(final String value)",
      "info" : "MethodDeclaration[34901-35223]:MethodDeclaration[34966-35288]"
    }, {
      "left" : "public void appendAlternate(final String value)",
      "right" : "public void appendAlternate(final String value)",
      "info" : "MethodDeclaration[35233-35563]:MethodDeclaration[35298-35628]"
    }, {
      "left" : "public String getPrimary()",
      "right" : "public String getPrimary()",
      "info" : "MethodDeclaration[35573-35655]:MethodDeclaration[35638-35720]"
    }, {
      "left" : "public String getAlternate()",
      "right" : "public String getAlternate()",
      "info" : "MethodDeclaration[35665-35751]:MethodDeclaration[35730-35816]"
    }, {
      "left" : "public boolean isComplete()",
      "right" : "public boolean isComplete()",
      "info" : "MethodDeclaration[35761-35924]:MethodDeclaration[35826-35989]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1726-1732]:Modifier[1778-1784]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1733-1738]:TYPE_DECLARATION_KIND[1785-1790]"
    }, {
      "left" : "DoubleMetaphone",
      "right" : "DoubleMetaphone",
      "info" : "SimpleName[1739-1754]:SimpleName[1791-1806]"
    }, {
      "left" : "StringEncoder",
      "right" : "StringEncoder",
      "info" : "SimpleType[1766-1779]:SimpleType[1818-1831]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2593-2599]:Modifier[2645-2651]"
    }, {
      "left" : "DoubleMetaphone",
      "right" : "DoubleMetaphone",
      "info" : "SimpleName[2600-2615]:SimpleName[2652-2667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2618-2642]:Block[2670-2694]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2628-2636]:SuperConstructorInvocation[2680-2688]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2786-2792]:Modifier[2838-2844]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2793-2799]:SimpleType[2845-2851]"
    }, {
      "left" : "doubleMetaphone",
      "right" : "doubleMetaphone",
      "info" : "SimpleName[2800-2815]:SimpleName[2852-2867]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[2816-2834]:SingleVariableDeclaration[2868-2886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2836-2889]:Block[2888-2941]"
    }, {
      "left" : "return doubleMetaphone(value, false);",
      "right" : "return doubleMetaphone(value, false);",
      "info" : "ReturnStatement[2846-2883]:ReturnStatement[2898-2935]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3119-3125]:Modifier[3171-3177]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3126-3132]:SimpleType[3178-3184]"
    }, {
      "left" : "doubleMetaphone",
      "right" : "doubleMetaphone",
      "info" : "SimpleName[3133-3148]:SimpleName[3185-3200]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[3149-3161]:SingleVariableDeclaration[3201-3213]"
    }, {
      "left" : "final boolean alternate",
      "right" : "final boolean alternate",
      "info" : "SingleVariableDeclaration[3163-3186]:SingleVariableDeclaration[3215-3238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3188-6801]:Block[3240-6853]"
    }, {
      "left" : "value = cleanInput(value);",
      "right" : "value = cleanInput(value);",
      "info" : "ExpressionStatement[3198-3224]:ExpressionStatement[3250-3276]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[3233-3288]:IfStatement[3285-3340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3252-3288]:Block[3304-3340]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3266-3278]:ReturnStatement[3318-3330]"
    }, {
      "left" : "final boolean slavoGermanic = isSlavoGermanic(value);",
      "right" : "final boolean slavoGermanic = isSlavoGermanic(value);",
      "info" : "VariableDeclarationStatement[3298-3351]:VariableDeclarationStatement[3350-3403]"
    }, {
      "left" : "int index = isSilentStart(value) ? 1 : 0;",
      "right" : "int index = isSilentStart(value) ? 1 : 0;",
      "info" : "VariableDeclarationStatement[3360-3401]:VariableDeclarationStatement[3412-3453]"
    }, {
      "left" : "final DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());",
      "right" : "final DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());",
      "info" : "VariableDeclarationStatement[3411-3496]:VariableDeclarationStatement[3463-3548]"
    }, {
      "left" : "while (!result.isComplete() && index <= value.length() - 1)",
      "right" : "while (!result.isComplete() && index <= value.length() - 1)",
      "info" : "WhileStatement[3506-6722]:WhileStatement[3558-6774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3566-6722]:Block[3618-6774]"
    }, {
      "left" : "switch (value.charAt(index)) {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n            case 'Y':\n                index = handleAEIOUY(result, index);\n                break;\n            case 'B':\n                result.append('P');\n                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n                break;\n            case '\\u00C7':\n                // A C with a Cedilla\n                result.append('S');\n                index++;\n                break;\n            case 'C':\n                index = handleC(value, result, index);\n                break;\n            case 'D':\n                index = handleD(value, result, index);\n                break;\n            case 'F':\n                result.append('F');\n                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n                break;\n            case 'G':\n                index = handleG(value, result, index, slavoGermanic);\n                break;\n            case 'H':\n                index = handleH(value, result, index);\n                break;\n            case 'J':\n                index = handleJ(value, result, index, slavoGermanic);\n                break;\n            case 'K':\n                result.append('K');\n                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n                break;\n            case 'L':\n                index = handleL(value, result, index);\n                break;\n            case 'M':\n                result.append('M');\n                index = conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case 'N':\n                result.append('N');\n                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n                break;\n            case '\\u00D1':\n                // N with a tilde (spanish ene)\n                result.append('N');\n                index++;\n                break;\n            case 'P':\n                index = handleP(value, result, index);\n                break;\n            case 'Q':\n                result.append('K');\n                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n                break;\n            case 'R':\n                index = handleR(value, result, index, slavoGermanic);\n                break;\n            case 'S':\n                index = handleS(value, result, index, slavoGermanic);\n                break;\n            case 'T':\n                index = handleT(value, result, index);\n                break;\n            case 'V':\n                result.append('F');\n                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n                break;\n            case 'W':\n                index = handleW(value, result, index);\n                break;\n            case 'X':\n                index = handleX(value, result, index);\n                break;\n            case 'Z':\n                index = handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n            }",
      "right" : "switch (value.charAt(index)) {\n            case 'A':\n            case 'E':\n            case 'I':\n            case 'O':\n            case 'U':\n            case 'Y':\n                index = handleAEIOUY(result, index);\n                break;\n            case 'B':\n                result.append('P');\n                index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;\n                break;\n            case '\\u00C7':\n                // A C with a Cedilla\n                result.append('S');\n                index++;\n                break;\n            case 'C':\n                index = handleC(value, result, index);\n                break;\n            case 'D':\n                index = handleD(value, result, index);\n                break;\n            case 'F':\n                result.append('F');\n                index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;\n                break;\n            case 'G':\n                index = handleG(value, result, index, slavoGermanic);\n                break;\n            case 'H':\n                index = handleH(value, result, index);\n                break;\n            case 'J':\n                index = handleJ(value, result, index, slavoGermanic);\n                break;\n            case 'K':\n                result.append('K');\n                index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;\n                break;\n            case 'L':\n                index = handleL(value, result, index);\n                break;\n            case 'M':\n                result.append('M');\n                index = conditionM0(value, index) ? index + 2 : index + 1;\n                break;\n            case 'N':\n                result.append('N');\n                index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;\n                break;\n            case '\\u00D1':\n                // N with a tilde (spanish ene)\n                result.append('N');\n                index++;\n                break;\n            case 'P':\n                index = handleP(value, result, index);\n                break;\n            case 'Q':\n                result.append('K');\n                index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;\n                break;\n            case 'R':\n                index = handleR(value, result, index, slavoGermanic);\n                break;\n            case 'S':\n                index = handleS(value, result, index, slavoGermanic);\n                break;\n            case 'T':\n                index = handleT(value, result, index);\n                break;\n            case 'V':\n                result.append('F');\n                index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;\n                break;\n            case 'W':\n                index = handleW(value, result, index);\n                break;\n            case 'X':\n                index = handleX(value, result, index);\n                break;\n            case 'Z':\n                index = handleZ(value, result, index, slavoGermanic);\n                break;\n            default:\n                index++;\n                break;\n            }",
      "info" : "SwitchStatement[3580-6712]:SwitchStatement[3632-6764]"
    }, {
      "left" : "case 'A':",
      "right" : "case 'A':",
      "info" : "SwitchCase[3623-3632]:SwitchCase[3675-3684]"
    }, {
      "left" : "case 'E':",
      "right" : "case 'E':",
      "info" : "SwitchCase[3645-3654]:SwitchCase[3697-3706]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[3667-3676]:SwitchCase[3719-3728]"
    }, {
      "left" : "case 'O':",
      "right" : "case 'O':",
      "info" : "SwitchCase[3689-3698]:SwitchCase[3741-3750]"
    }, {
      "left" : "case 'U':",
      "right" : "case 'U':",
      "info" : "SwitchCase[3711-3720]:SwitchCase[3763-3772]"
    }, {
      "left" : "case 'Y':",
      "right" : "case 'Y':",
      "info" : "SwitchCase[3733-3742]:SwitchCase[3785-3794]"
    }, {
      "left" : "index = handleAEIOUY(result, index);",
      "right" : "index = handleAEIOUY(result, index);",
      "info" : "ExpressionStatement[3759-3795]:ExpressionStatement[3811-3847]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3812-3818]:BreakStatement[3864-3870]"
    }, {
      "left" : "case 'B':",
      "right" : "case 'B':",
      "info" : "SwitchCase[3831-3840]:SwitchCase[3883-3892]"
    }, {
      "left" : "result.append('P');",
      "right" : "result.append('P');",
      "info" : "ExpressionStatement[3857-3876]:ExpressionStatement[3909-3928]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[3893-3957]:ExpressionStatement[3945-4009]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3974-3980]:BreakStatement[4026-4032]"
    }, {
      "left" : "case '\\u00C7':",
      "right" : "case '\\u00C7':",
      "info" : "SwitchCase[3993-4007]:SwitchCase[4045-4059]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[4062-4081]:ExpressionStatement[4114-4133]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[4098-4106]:ExpressionStatement[4150-4158]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4123-4129]:BreakStatement[4175-4181]"
    }, {
      "left" : "case 'C':",
      "right" : "case 'C':",
      "info" : "SwitchCase[4142-4151]:SwitchCase[4194-4203]"
    }, {
      "left" : "index = handleC(value, result, index);",
      "right" : "index = handleC(value, result, index);",
      "info" : "ExpressionStatement[4168-4206]:ExpressionStatement[4220-4258]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4223-4229]:BreakStatement[4275-4281]"
    }, {
      "left" : "case 'D':",
      "right" : "case 'D':",
      "info" : "SwitchCase[4242-4251]:SwitchCase[4294-4303]"
    }, {
      "left" : "index = handleD(value, result, index);",
      "right" : "index = handleD(value, result, index);",
      "info" : "ExpressionStatement[4268-4306]:ExpressionStatement[4320-4358]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4323-4329]:BreakStatement[4375-4381]"
    }, {
      "left" : "case 'F':",
      "right" : "case 'F':",
      "info" : "SwitchCase[4342-4351]:SwitchCase[4394-4403]"
    }, {
      "left" : "result.append('F');",
      "right" : "result.append('F');",
      "info" : "ExpressionStatement[4368-4387]:ExpressionStatement[4420-4439]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[4404-4468]:ExpressionStatement[4456-4520]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4485-4491]:BreakStatement[4537-4543]"
    }, {
      "left" : "case 'G':",
      "right" : "case 'G':",
      "info" : "SwitchCase[4504-4513]:SwitchCase[4556-4565]"
    }, {
      "left" : "index = handleG(value, result, index, slavoGermanic);",
      "right" : "index = handleG(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[4530-4583]:ExpressionStatement[4582-4635]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4600-4606]:BreakStatement[4652-4658]"
    }, {
      "left" : "case 'H':",
      "right" : "case 'H':",
      "info" : "SwitchCase[4619-4628]:SwitchCase[4671-4680]"
    }, {
      "left" : "index = handleH(value, result, index);",
      "right" : "index = handleH(value, result, index);",
      "info" : "ExpressionStatement[4645-4683]:ExpressionStatement[4697-4735]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4700-4706]:BreakStatement[4752-4758]"
    }, {
      "left" : "case 'J':",
      "right" : "case 'J':",
      "info" : "SwitchCase[4719-4728]:SwitchCase[4771-4780]"
    }, {
      "left" : "index = handleJ(value, result, index, slavoGermanic);",
      "right" : "index = handleJ(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[4745-4798]:ExpressionStatement[4797-4850]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4815-4821]:BreakStatement[4867-4873]"
    }, {
      "left" : "case 'K':",
      "right" : "case 'K':",
      "info" : "SwitchCase[4834-4843]:SwitchCase[4886-4895]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[4860-4879]:ExpressionStatement[4912-4931]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[4896-4960]:ExpressionStatement[4948-5012]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4977-4983]:BreakStatement[5029-5035]"
    }, {
      "left" : "case 'L':",
      "right" : "case 'L':",
      "info" : "SwitchCase[4996-5005]:SwitchCase[5048-5057]"
    }, {
      "left" : "index = handleL(value, result, index);",
      "right" : "index = handleL(value, result, index);",
      "info" : "ExpressionStatement[5022-5060]:ExpressionStatement[5074-5112]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5077-5083]:BreakStatement[5129-5135]"
    }, {
      "left" : "case 'M':",
      "right" : "case 'M':",
      "info" : "SwitchCase[5096-5105]:SwitchCase[5148-5157]"
    }, {
      "left" : "result.append('M');",
      "right" : "result.append('M');",
      "info" : "ExpressionStatement[5122-5141]:ExpressionStatement[5174-5193]"
    }, {
      "left" : "index = conditionM0(value, index) ? index + 2 : index + 1;",
      "right" : "index = conditionM0(value, index) ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[5158-5216]:ExpressionStatement[5210-5268]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5233-5239]:BreakStatement[5285-5291]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[5252-5261]:SwitchCase[5304-5313]"
    }, {
      "left" : "result.append('N');",
      "right" : "result.append('N');",
      "info" : "ExpressionStatement[5278-5297]:ExpressionStatement[5330-5349]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[5314-5378]:ExpressionStatement[5366-5430]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5395-5401]:BreakStatement[5447-5453]"
    }, {
      "left" : "case '\\u00D1':",
      "right" : "case '\\u00D1':",
      "info" : "SwitchCase[5414-5428]:SwitchCase[5466-5480]"
    }, {
      "left" : "result.append('N');",
      "right" : "result.append('N');",
      "info" : "ExpressionStatement[5493-5512]:ExpressionStatement[5545-5564]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[5529-5537]:ExpressionStatement[5581-5589]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5554-5560]:BreakStatement[5606-5612]"
    }, {
      "left" : "case 'P':",
      "right" : "case 'P':",
      "info" : "SwitchCase[5573-5582]:SwitchCase[5625-5634]"
    }, {
      "left" : "index = handleP(value, result, index);",
      "right" : "index = handleP(value, result, index);",
      "info" : "ExpressionStatement[5599-5637]:ExpressionStatement[5651-5689]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5654-5660]:BreakStatement[5706-5712]"
    }, {
      "left" : "case 'Q':",
      "right" : "case 'Q':",
      "info" : "SwitchCase[5673-5682]:SwitchCase[5725-5734]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[5699-5718]:ExpressionStatement[5751-5770]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'Q' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[5735-5799]:ExpressionStatement[5787-5851]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5816-5822]:BreakStatement[5868-5874]"
    }, {
      "left" : "case 'R':",
      "right" : "case 'R':",
      "info" : "SwitchCase[5835-5844]:SwitchCase[5887-5896]"
    }, {
      "left" : "index = handleR(value, result, index, slavoGermanic);",
      "right" : "index = handleR(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[5861-5914]:ExpressionStatement[5913-5966]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5931-5937]:BreakStatement[5983-5989]"
    }, {
      "left" : "case 'S':",
      "right" : "case 'S':",
      "info" : "SwitchCase[5950-5959]:SwitchCase[6002-6011]"
    }, {
      "left" : "index = handleS(value, result, index, slavoGermanic);",
      "right" : "index = handleS(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[5976-6029]:ExpressionStatement[6028-6081]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6046-6052]:BreakStatement[6098-6104]"
    }, {
      "left" : "case 'T':",
      "right" : "case 'T':",
      "info" : "SwitchCase[6065-6074]:SwitchCase[6117-6126]"
    }, {
      "left" : "index = handleT(value, result, index);",
      "right" : "index = handleT(value, result, index);",
      "info" : "ExpressionStatement[6091-6129]:ExpressionStatement[6143-6181]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6146-6152]:BreakStatement[6198-6204]"
    }, {
      "left" : "case 'V':",
      "right" : "case 'V':",
      "info" : "SwitchCase[6165-6174]:SwitchCase[6217-6226]"
    }, {
      "left" : "result.append('F');",
      "right" : "result.append('F');",
      "info" : "ExpressionStatement[6191-6210]:ExpressionStatement[6243-6262]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[6227-6291]:ExpressionStatement[6279-6343]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6308-6314]:BreakStatement[6360-6366]"
    }, {
      "left" : "case 'W':",
      "right" : "case 'W':",
      "info" : "SwitchCase[6327-6336]:SwitchCase[6379-6388]"
    }, {
      "left" : "index = handleW(value, result, index);",
      "right" : "index = handleW(value, result, index);",
      "info" : "ExpressionStatement[6353-6391]:ExpressionStatement[6405-6443]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6408-6414]:BreakStatement[6460-6466]"
    }, {
      "left" : "case 'X':",
      "right" : "case 'X':",
      "info" : "SwitchCase[6427-6436]:SwitchCase[6479-6488]"
    }, {
      "left" : "index = handleX(value, result, index);",
      "right" : "index = handleX(value, result, index);",
      "info" : "ExpressionStatement[6453-6491]:ExpressionStatement[6505-6543]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6508-6514]:BreakStatement[6560-6566]"
    }, {
      "left" : "case 'Z':",
      "right" : "case 'Z':",
      "info" : "SwitchCase[6527-6536]:SwitchCase[6579-6588]"
    }, {
      "left" : "index = handleZ(value, result, index, slavoGermanic);",
      "right" : "index = handleZ(value, result, index, slavoGermanic);",
      "info" : "ExpressionStatement[6553-6606]:ExpressionStatement[6605-6658]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6623-6629]:BreakStatement[6675-6681]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6642-6650]:SwitchCase[6694-6702]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[6667-6675]:ExpressionStatement[6719-6727]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6692-6698]:BreakStatement[6744-6750]"
    }, {
      "left" : "return alternate ? result.getAlternate() : result.getPrimary();",
      "right" : "return alternate ? result.getAlternate() : result.getPrimary();",
      "info" : "ReturnStatement[6732-6795]:ReturnStatement[6784-6847]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7170-7179]:MarkerAnnotation[7222-7231]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7184-7190]:Modifier[7236-7242]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[7191-7197]:SimpleType[7243-7249]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[7198-7204]:SimpleName[7250-7256]"
    }, {
      "left" : "final Object obj",
      "right" : "final Object obj",
      "info" : "SingleVariableDeclaration[7205-7221]:SingleVariableDeclaration[7257-7273]"
    }, {
      "left" : "EncoderException",
      "right" : "EncoderException",
      "info" : "SimpleType[7230-7246]:SimpleType[7282-7298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7247-7448]:Block[7299-7500]"
    }, {
      "left" : "if (!(obj instanceof String))",
      "right" : "if (!(obj instanceof String))",
      "info" : "IfStatement[7257-7396]:IfStatement[7309-7448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7287-7396]:Block[7339-7448]"
    }, {
      "left" : "throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\");",
      "right" : "throw new EncoderException(\"DoubleMetaphone encode parameter is not of type String\");",
      "info" : "ThrowStatement[7301-7386]:ThrowStatement[7353-7438]"
    }, {
      "left" : "return doubleMetaphone((String) obj);",
      "right" : "return doubleMetaphone((String) obj);",
      "info" : "ReturnStatement[7405-7442]:ReturnStatement[7457-7494]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7594-7603]:MarkerAnnotation[7646-7655]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7608-7614]:Modifier[7660-7666]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7615-7621]:SimpleType[7667-7673]"
    }, {
      "left" : "encode",
      "right" : "encode",
      "info" : "SimpleName[7622-7628]:SimpleName[7674-7680]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[7629-7647]:SingleVariableDeclaration[7681-7699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7649-7695]:Block[7701-7747]"
    }, {
      "left" : "return doubleMetaphone(value);",
      "right" : "return doubleMetaphone(value);",
      "info" : "ReturnStatement[7659-7689]:ReturnStatement[7711-7741]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8168-8174]:Modifier[8220-8226]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8175-8182]:PrimitiveType[8227-8234]"
    }, {
      "left" : "isDoubleMetaphoneEqual",
      "right" : "isDoubleMetaphoneEqual",
      "info" : "SimpleName[8183-8205]:SimpleName[8235-8257]"
    }, {
      "left" : "final String value1",
      "right" : "final String value1",
      "info" : "SingleVariableDeclaration[8206-8225]:SingleVariableDeclaration[8258-8277]"
    }, {
      "left" : "final String value2",
      "right" : "final String value2",
      "info" : "SingleVariableDeclaration[8227-8246]:SingleVariableDeclaration[8279-8298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8248-8317]:Block[8300-8369]"
    }, {
      "left" : "return isDoubleMetaphoneEqual(value1, value2, false);",
      "right" : "return isDoubleMetaphoneEqual(value1, value2, false);",
      "info" : "ReturnStatement[8258-8311]:ReturnStatement[8310-8363]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8834-8840]:Modifier[8886-8892]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8841-8848]:PrimitiveType[8893-8900]"
    }, {
      "left" : "isDoubleMetaphoneEqual",
      "right" : "isDoubleMetaphoneEqual",
      "info" : "SimpleName[8849-8871]:SimpleName[8901-8923]"
    }, {
      "left" : "final String value1",
      "right" : "final String value1",
      "info" : "SingleVariableDeclaration[8872-8891]:SingleVariableDeclaration[8924-8943]"
    }, {
      "left" : "final String value2",
      "right" : "final String value2",
      "info" : "SingleVariableDeclaration[8893-8912]:SingleVariableDeclaration[8945-8964]"
    }, {
      "left" : "final boolean alternate",
      "right" : "final boolean alternate",
      "info" : "SingleVariableDeclaration[8914-8937]:SingleVariableDeclaration[8966-8989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8939-9040]:Block[8991-9105]"
    }, {
      "left" : "return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));",
      "right" : "return StringUtils.equals(doubleMetaphone(value1, alternate), doubleMetaphone(value2, alternate));",
      "info" : "ReturnStatement[8949-9034]:ReturnStatement[9001-9099]"
    }, {
      "left" : "doubleMetaphone(value1, alternate)",
      "right" : "doubleMetaphone(value1, alternate)",
      "info" : "MethodInvocation[8956-8990]:MethodInvocation[9027-9061]"
    }, {
      "left" : "doubleMetaphone(value2, alternate)",
      "right" : "doubleMetaphone(value2, alternate)",
      "info" : "MethodInvocation[8998-9032]:MethodInvocation[9063-9097]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9112-9118]:Modifier[9177-9183]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9119-9122]:PrimitiveType[9184-9187]"
    }, {
      "left" : "getMaxCodeLen",
      "right" : "getMaxCodeLen",
      "info" : "SimpleName[9123-9136]:SimpleName[9188-9201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9139-9178]:Block[9204-9243]"
    }, {
      "left" : "return this.maxCodeLen;",
      "right" : "return this.maxCodeLen;",
      "info" : "ReturnStatement[9149-9172]:ReturnStatement[9214-9237]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9275-9281]:Modifier[9340-9346]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9282-9286]:PrimitiveType[9347-9351]"
    }, {
      "left" : "setMaxCodeLen",
      "right" : "setMaxCodeLen",
      "info" : "SimpleName[9287-9300]:SimpleName[9352-9365]"
    }, {
      "left" : "final int maxCodeLen",
      "right" : "final int maxCodeLen",
      "info" : "SingleVariableDeclaration[9301-9321]:SingleVariableDeclaration[9366-9386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9323-9368]:Block[9388-9433]"
    }, {
      "left" : "this.maxCodeLen = maxCodeLen;",
      "right" : "this.maxCodeLen = maxCodeLen;",
      "info" : "ExpressionStatement[9333-9362]:ExpressionStatement[9398-9427]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9475-9482]:Modifier[9540-9547]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9483-9486]:PrimitiveType[9548-9551]"
    }, {
      "left" : "handleAEIOUY",
      "right" : "handleAEIOUY",
      "info" : "SimpleName[9487-9499]:SimpleName[9552-9564]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[9500-9534]:SingleVariableDeclaration[9565-9599]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[9536-9551]:SingleVariableDeclaration[9601-9616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9553-9654]:Block[9618-9719]"
    }, {
      "left" : "if (index == 0)",
      "right" : "if (index == 0)",
      "info" : "IfStatement[9563-9622]:IfStatement[9628-9687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9579-9622]:Block[9644-9687]"
    }, {
      "left" : "result.append('A');",
      "right" : "result.append('A');",
      "info" : "ExpressionStatement[9593-9612]:ExpressionStatement[9658-9677]"
    }, {
      "left" : "return index + 1;",
      "right" : "return index + 1;",
      "info" : "ReturnStatement[9631-9648]:ReturnStatement[9696-9713]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9702-9709]:Modifier[9767-9774]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9710-9713]:PrimitiveType[9775-9778]"
    }, {
      "left" : "handleC",
      "right" : "handleC",
      "info" : "SimpleName[9714-9721]:SimpleName[9779-9786]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[9722-9740]:SingleVariableDeclaration[9787-9805]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[9742-9776]:SingleVariableDeclaration[9807-9841]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[9778-9787]:SingleVariableDeclaration[9843-9852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9789-11622]:Block[9854-11687]"
    }, {
      "left" : "if (conditionC0(value, index))",
      "right" : "if (conditionC0(value, index))",
      "info" : "IfStatement[9799-11593]:IfStatement[9864-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9830-9927]:Block[9895-9992]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[9874-9893]:ExpressionStatement[9939-9958]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[9906-9917]:ExpressionStatement[9971-9982]"
    }, {
      "left" : "if (index == 0 && contains(value, index, 6, \"CAESAR\"))",
      "right" : "if (index == 0 && contains(value, index, 6, \"CAESAR\"))",
      "info" : "IfStatement[9933-11593]:IfStatement[9998-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9988-10055]:Block[10053-10120]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[10002-10021]:ExpressionStatement[10067-10086]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[10034-10045]:ExpressionStatement[10099-10110]"
    }, {
      "left" : "if (contains(value, index, 2, \"CH\"))",
      "right" : "if (contains(value, index, 2, \"CH\"))",
      "info" : "IfStatement[10061-11593]:IfStatement[10126-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10098-10161]:Block[10163-10226]"
    }, {
      "left" : "index = handleCH(value, result, index);",
      "right" : "index = handleCH(value, result, index);",
      "info" : "ExpressionStatement[10112-10151]:ExpressionStatement[10177-10216]"
    }, {
      "left" : "if (contains(value, index, 2, \"CZ\") &&\n                   !contains(value, index - 2, 4, \"WICZ\"))",
      "right" : "if (contains(value, index, 2, \"CZ\") &&\n                   !contains(value, index - 2, 4, \"WICZ\"))",
      "info" : "IfStatement[10167-11593]:IfStatement[10232-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10265-10368]:Block[10330-10433]"
    }, {
      "left" : "result.append('S', 'X');",
      "right" : "result.append('S', 'X');",
      "info" : "ExpressionStatement[10310-10334]:ExpressionStatement[10375-10399]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[10347-10358]:ExpressionStatement[10412-10423]"
    }, {
      "left" : "if (contains(value, index + 1, 3, \"CIA\"))",
      "right" : "if (contains(value, index + 1, 3, \"CIA\"))",
      "info" : "IfStatement[10374-11593]:IfStatement[10439-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10416-10516]:Block[10481-10581]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[10463-10482]:ExpressionStatement[10528-10547]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[10495-10506]:ExpressionStatement[10560-10571]"
    }, {
      "left" : "if (contains(value, index, 2, \"CC\") &&\n                   !(index == 1 && charAt(value, 0) == 'M'))",
      "right" : "if (contains(value, index, 2, \"CC\") &&\n                   !(index == 1 && charAt(value, 0) == 'M'))",
      "info" : "IfStatement[10522-11593]:IfStatement[10587-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10622-10739]:Block[10687-10804]"
    }, {
      "left" : "return handleCC(value, result, index);",
      "right" : "return handleCC(value, result, index);",
      "info" : "ReturnStatement[10691-10729]:ReturnStatement[10756-10794]"
    }, {
      "left" : "if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\"))",
      "right" : "if (contains(value, index, 2, \"CK\", \"CG\", \"CQ\"))",
      "info" : "IfStatement[10745-11593]:IfStatement[10810-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10794-10861]:Block[10859-10926]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[10808-10827]:ExpressionStatement[10873-10892]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[10840-10851]:ExpressionStatement[10905-10916]"
    }, {
      "left" : "if (contains(value, index, 2, \"CI\", \"CE\", \"CY\"))",
      "right" : "if (contains(value, index, 2, \"CI\", \"CE\", \"CY\"))",
      "info" : "IfStatement[10867-11593]:IfStatement[10932-11658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10916-11171]:Block[10981-11236]"
    }, {
      "left" : "if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\"))",
      "right" : "if (contains(value, index, 3, \"CIO\", \"CIE\", \"CIA\"))",
      "info" : "IfStatement[10972-11137]:IfStatement[11037-11202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11024-11080]:Block[11089-11145]"
    }, {
      "left" : "result.append('S', 'X');",
      "right" : "result.append('S', 'X');",
      "info" : "ExpressionStatement[11042-11066]:ExpressionStatement[11107-11131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11086-11137]:Block[11151-11202]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[11104-11123]:ExpressionStatement[11169-11188]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[11150-11161]:ExpressionStatement[11215-11226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11177-11593]:Block[11242-11658]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[11191-11210]:ExpressionStatement[11256-11275]"
    }, {
      "left" : "if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\"))",
      "right" : "if (contains(value, index + 1, 2, \" C\", \" Q\", \" G\"))",
      "info" : "IfStatement[11223-11583]:IfStatement[11288-11648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11276-11369]:Block[11341-11434]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[11344-11355]:ExpressionStatement[11409-11420]"
    }, {
      "left" : "if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&\n                       !contains(value, index + 1, 2, \"CE\", \"CI\"))",
      "right" : "if (contains(value, index + 1, 1, \"C\", \"K\", \"Q\") &&\n                       !contains(value, index + 1, 2, \"CE\", \"CI\"))",
      "info" : "IfStatement[11375-11583]:IfStatement[11440-11648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11494-11537]:Block[11559-11602]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[11512-11523]:ExpressionStatement[11577-11588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11543-11583]:Block[11608-11648]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[11561-11569]:ExpressionStatement[11626-11634]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[11603-11616]:ReturnStatement[11668-11681]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11671-11678]:Modifier[11736-11743]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11679-11682]:PrimitiveType[11744-11747]"
    }, {
      "left" : "handleCC",
      "right" : "handleCC",
      "info" : "SimpleName[11683-11691]:SimpleName[11748-11756]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[11692-11710]:SingleVariableDeclaration[11757-11775]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[11712-11746]:SingleVariableDeclaration[11777-11811]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[11748-11757]:SingleVariableDeclaration[11813-11822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11759-12442]:Block[11824-12507]"
    }, {
      "left" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") &&\n            !contains(value, index + 2, 2, \"HU\"))",
      "right" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"H\") &&\n            !contains(value, index + 2, 2, \"HU\"))",
      "info" : "IfStatement[11769-12413]:IfStatement[11834-12478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11871-12320]:Block[11936-12385]"
    }, {
      "left" : "if ((index == 1 && charAt(value, index - 1) == 'A') ||\n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\"))",
      "right" : "if ((index == 1 && charAt(value, index - 1) == 'A') ||\n                contains(value, index - 1, 5, \"UCCEE\", \"UCCES\"))",
      "info" : "IfStatement[11938-12286]:IfStatement[12003-12351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12058-12168]:Block[12123-12233]"
    }, {
      "left" : "result.append(\"KS\");",
      "right" : "result.append(\"KS\");",
      "info" : "ExpressionStatement[12134-12154]:ExpressionStatement[12199-12219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12174-12286]:Block[12239-12351]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[12253-12272]:ExpressionStatement[12318-12337]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[12299-12310]:ExpressionStatement[12364-12375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12326-12413]:Block[12391-12478]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[12360-12379]:ExpressionStatement[12425-12444]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[12392-12403]:ExpressionStatement[12457-12468]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[12423-12436]:ReturnStatement[12488-12501]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12491-12498]:Modifier[12556-12563]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12499-12502]:PrimitiveType[12564-12567]"
    }, {
      "left" : "handleCH",
      "right" : "handleCH",
      "info" : "SimpleName[12503-12511]:SimpleName[12568-12576]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[12512-12530]:SingleVariableDeclaration[12577-12595]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[12532-12566]:SingleVariableDeclaration[12597-12631]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[12568-12583]:SingleVariableDeclaration[12633-12648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12585-13428]:Block[12650-13493]"
    }, {
      "left" : "if (index > 0 && contains(value, index, 4, \"CHAE\"))",
      "right" : "if (index > 0 && contains(value, index, 4, \"CHAE\"))",
      "info" : "IfStatement[12595-13422]:IfStatement[12660-13487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12647-12738]:Block[12712-12803]"
    }, {
      "left" : "result.append('K', 'X');",
      "right" : "result.append('K', 'X');",
      "info" : "ExpressionStatement[12674-12698]:ExpressionStatement[12739-12763]"
    }, {
      "left" : "return index + 2;",
      "right" : "return index + 2;",
      "info" : "ReturnStatement[12711-12728]:ReturnStatement[12776-12793]"
    }, {
      "left" : "if (conditionCH0(value, index))",
      "right" : "if (conditionCH0(value, index))",
      "info" : "IfStatement[12744-13422]:IfStatement[12809-13487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12776-12913]:Block[12841-12978]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[12854-12873]:ExpressionStatement[12919-12938]"
    }, {
      "left" : "return index + 2;",
      "right" : "return index + 2;",
      "info" : "ReturnStatement[12886-12903]:ReturnStatement[12951-12968]"
    }, {
      "left" : "if (conditionCH1(value, index))",
      "right" : "if (conditionCH1(value, index))",
      "info" : "IfStatement[12919-13422]:IfStatement[12984-13487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12951-13096]:Block[13016-13161]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[13037-13056]:ExpressionStatement[13102-13121]"
    }, {
      "left" : "return index + 2;",
      "right" : "return index + 2;",
      "info" : "ReturnStatement[13069-13086]:ReturnStatement[13134-13151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13102-13422]:Block[13167-13487]"
    }, {
      "left" : "if (index > 0)",
      "right" : "if (index > 0)",
      "info" : "IfStatement[13116-13382]:IfStatement[13181-13447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13131-13325]:Block[13196-13390]"
    }, {
      "left" : "if (contains(value, 0, 2, \"MC\"))",
      "right" : "if (contains(value, 0, 2, \"MC\"))",
      "info" : "IfStatement[13149-13311]:IfStatement[13214-13376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13182-13241]:Block[13247-13306]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[13204-13223]:ExpressionStatement[13269-13288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13247-13311]:Block[13312-13376]"
    }, {
      "left" : "result.append('X', 'K');",
      "right" : "result.append('X', 'K');",
      "info" : "ExpressionStatement[13269-13293]:ExpressionStatement[13334-13358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13331-13382]:Block[13396-13447]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[13349-13368]:ExpressionStatement[13414-13433]"
    }, {
      "left" : "return index + 2;",
      "right" : "return index + 2;",
      "info" : "ReturnStatement[13395-13412]:ReturnStatement[13460-13477]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13476-13483]:Modifier[13541-13548]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13484-13487]:PrimitiveType[13549-13552]"
    }, {
      "left" : "handleD",
      "right" : "handleD",
      "info" : "SimpleName[13488-13495]:SimpleName[13553-13560]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[13496-13514]:SingleVariableDeclaration[13561-13579]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[13516-13550]:SingleVariableDeclaration[13581-13615]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[13552-13561]:SingleVariableDeclaration[13617-13626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13563-14126]:Block[13628-14191]"
    }, {
      "left" : "if (contains(value, index, 2, \"DG\"))",
      "right" : "if (contains(value, index, 2, \"DG\"))",
      "info" : "IfStatement[13573-14098]:IfStatement[13638-14163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13610-13912]:Block[13675-13977]"
    }, {
      "left" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\"))",
      "right" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\"))",
      "info" : "IfStatement[13653-13902]:IfStatement[13718-13967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13703-13816]:Block[13768-13881]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[13721-13740]:ExpressionStatement[13786-13805]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[13757-13768]:ExpressionStatement[13822-13833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13822-13902]:Block[13887-13967]"
    }, {
      "left" : "result.append(\"TK\");",
      "right" : "result.append(\"TK\");",
      "info" : "ExpressionStatement[13840-13860]:ExpressionStatement[13905-13925]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[13877-13888]:ExpressionStatement[13942-13953]"
    }, {
      "left" : "if (contains(value, index, 2, \"DT\", \"DD\"))",
      "right" : "if (contains(value, index, 2, \"DT\", \"DD\"))",
      "info" : "IfStatement[13918-14098]:IfStatement[13983-14163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13961-14028]:Block[14026-14093]"
    }, {
      "left" : "result.append('T');",
      "right" : "result.append('T');",
      "info" : "ExpressionStatement[13975-13994]:ExpressionStatement[14040-14059]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[14007-14018]:ExpressionStatement[14072-14083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14034-14098]:Block[14099-14163]"
    }, {
      "left" : "result.append('T');",
      "right" : "result.append('T');",
      "info" : "ExpressionStatement[14048-14067]:ExpressionStatement[14113-14132]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[14080-14088]:ExpressionStatement[14145-14153]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[14107-14120]:ReturnStatement[14172-14185]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14174-14181]:Modifier[14239-14246]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14182-14185]:PrimitiveType[14247-14250]"
    }, {
      "left" : "handleG",
      "right" : "handleG",
      "info" : "SimpleName[14186-14193]:SimpleName[14251-14258]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[14194-14212]:SingleVariableDeclaration[14259-14277]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[14214-14248]:SingleVariableDeclaration[14279-14313]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[14250-14259]:SingleVariableDeclaration[14315-14324]"
    }, {
      "left" : "final boolean slavoGermanic",
      "right" : "final boolean slavoGermanic",
      "info" : "SingleVariableDeclaration[14285-14312]:SingleVariableDeclaration[14350-14377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14314-16553]:Block[14379-16618]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'H')",
      "right" : "if (charAt(value, index + 1) == 'H')",
      "info" : "IfStatement[14324-16525]:IfStatement[14389-16590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14361-14424]:Block[14426-14489]"
    }, {
      "left" : "index = handleGH(value, result, index);",
      "right" : "index = handleGH(value, result, index);",
      "info" : "ExpressionStatement[14375-14414]:ExpressionStatement[14440-14479]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'N')",
      "right" : "if (charAt(value, index + 1) == 'N')",
      "info" : "IfStatement[14430-16525]:IfStatement[14495-16590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14467-14881]:Block[14532-14946]"
    }, {
      "left" : "if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic)",
      "right" : "if (index == 1 && isVowel(charAt(value, 0)) && !slavoGermanic)",
      "info" : "IfStatement[14481-14840]:IfStatement[14546-14905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14544-14601]:Block[14609-14666]"
    }, {
      "left" : "result.append(\"KN\", \"N\");",
      "right" : "result.append(\"KN\", \"N\");",
      "info" : "ExpressionStatement[14562-14587]:ExpressionStatement[14627-14652]"
    }, {
      "left" : "if (!contains(value, index + 2, 2, \"EY\") &&\n                       charAt(value, index + 1) != 'Y' && !slavoGermanic)",
      "right" : "if (!contains(value, index + 2, 2, \"EY\") &&\n                       charAt(value, index + 1) != 'Y' && !slavoGermanic)",
      "info" : "IfStatement[14607-14840]:IfStatement[14672-14905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14725-14782]:Block[14790-14847]"
    }, {
      "left" : "result.append(\"N\", \"KN\");",
      "right" : "result.append(\"N\", \"KN\");",
      "info" : "ExpressionStatement[14743-14768]:ExpressionStatement[14808-14833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14788-14840]:Block[14853-14905]"
    }, {
      "left" : "result.append(\"KN\");",
      "right" : "result.append(\"KN\");",
      "info" : "ExpressionStatement[14806-14826]:ExpressionStatement[14871-14891]"
    }, {
      "left" : "index = index + 2;",
      "right" : "index = index + 2;",
      "info" : "ExpressionStatement[14853-14871]:ExpressionStatement[14918-14936]"
    }, {
      "left" : "if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic)",
      "right" : "if (contains(value, index + 1, 2, \"LI\") && !slavoGermanic)",
      "info" : "IfStatement[14887-16525]:IfStatement[14952-16590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14946-15019]:Block[15011-15084]"
    }, {
      "left" : "result.append(\"KL\", \"L\");",
      "right" : "result.append(\"KL\", \"L\");",
      "info" : "ExpressionStatement[14960-14985]:ExpressionStatement[15025-15050]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[14998-15009]:ExpressionStatement[15063-15074]"
    }, {
      "left" : "if (index == 0 &&\n                   (charAt(value, index + 1) == 'Y' ||\n                    contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER)))",
      "right" : "if (index == 0 &&\n                   (charAt(value, index + 1) == 'Y' ||\n                    contains(value, index + 1, 2, ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER)))",
      "info" : "IfStatement[15025-16525]:IfStatement[15090-16590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15184-15318]:Block[15249-15383]"
    }, {
      "left" : "result.append('K', 'J');",
      "right" : "result.append('K', 'J');",
      "info" : "ExpressionStatement[15260-15284]:ExpressionStatement[15325-15349]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[15297-15308]:ExpressionStatement[15362-15373]"
    }, {
      "left" : "if ((contains(value, index + 1, 2, \"ER\") ||\n                    charAt(value, index + 1) == 'Y') &&\n                   !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                   !contains(value, index - 1, 1, \"E\", \"I\") &&\n                   !contains(value, index - 1, 3, \"RGY\", \"OGY\"))",
      "right" : "if ((contains(value, index + 1, 2, \"ER\") ||\n                    charAt(value, index + 1) == 'Y') &&\n                   !contains(value, 0, 6, \"DANGER\", \"RANGER\", \"MANGER\") &&\n                   !contains(value, index - 1, 1, \"E\", \"I\") &&\n                   !contains(value, index - 1, 3, \"RGY\", \"OGY\"))",
      "info" : "IfStatement[15324-16525]:IfStatement[15389-16590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15627-15733]:Block[15692-15798]"
    }, {
      "left" : "result.append('K', 'J');",
      "right" : "result.append('K', 'J');",
      "info" : "ExpressionStatement[15675-15699]:ExpressionStatement[15740-15764]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[15712-15723]:ExpressionStatement[15777-15788]"
    }, {
      "left" : "if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") ||\n                   contains(value, index - 1, 4, \"AGGI\", \"OGGI\"))",
      "right" : "if (contains(value, index + 1, 1, \"E\", \"I\", \"Y\") ||\n                   contains(value, index - 1, 4, \"AGGI\", \"OGGI\"))",
      "info" : "IfStatement[15739-16525]:IfStatement[15804-16590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15857-16345]:Block[15922-16410]"
    }, {
      "left" : "if (contains(value, 0 ,4, \"VAN \", \"VON \") ||\n                contains(value, 0, 3, \"SCH\") ||\n                contains(value, index + 1, 2, \"ET\"))",
      "right" : "if (contains(value, 0 ,4, \"VAN \", \"VON \") ||\n                contains(value, 0, 3, \"SCH\") ||\n                contains(value, index + 1, 2, \"ET\"))",
      "info" : "IfStatement[15910-16311]:IfStatement[15975-16376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16056-16150]:Block[16121-16215]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[16117-16136]:ExpressionStatement[16182-16201]"
    }, {
      "left" : "if (contains(value, index + 1, 3, \"IER\"))",
      "right" : "if (contains(value, index + 1, 3, \"IER\"))",
      "info" : "IfStatement[16156-16311]:IfStatement[16221-16376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16198-16249]:Block[16263-16314]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[16216-16235]:ExpressionStatement[16281-16300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16255-16311]:Block[16320-16376]"
    }, {
      "left" : "result.append('J', 'K');",
      "right" : "result.append('J', 'K');",
      "info" : "ExpressionStatement[16273-16297]:ExpressionStatement[16338-16362]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[16324-16335]:ExpressionStatement[16389-16400]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'G')",
      "right" : "if (charAt(value, index + 1) == 'G')",
      "info" : "IfStatement[16351-16525]:IfStatement[16416-16590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16388-16455]:Block[16453-16520]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[16402-16413]:ExpressionStatement[16467-16478]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[16426-16445]:ExpressionStatement[16491-16510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16461-16525]:Block[16526-16590]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[16475-16483]:ExpressionStatement[16540-16548]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[16496-16515]:ExpressionStatement[16561-16580]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[16534-16547]:ReturnStatement[16599-16612]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16602-16609]:Modifier[16667-16674]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16610-16613]:PrimitiveType[16675-16678]"
    }, {
      "left" : "handleGH",
      "right" : "handleGH",
      "info" : "SimpleName[16614-16622]:SimpleName[16679-16687]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[16623-16641]:SingleVariableDeclaration[16688-16706]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[16643-16677]:SingleVariableDeclaration[16708-16742]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[16679-16688]:SingleVariableDeclaration[16744-16753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16690-17815]:Block[16755-17880]"
    }, {
      "left" : "if (index > 0 && !isVowel(charAt(value, index - 1)))",
      "right" : "if (index > 0 && !isVowel(charAt(value, index - 1)))",
      "info" : "IfStatement[16700-17787]:IfStatement[16765-17852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16753-16820]:Block[16818-16885]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[16767-16786]:ExpressionStatement[16832-16851]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[16799-16810]:ExpressionStatement[16864-16875]"
    }, {
      "left" : "if (index == 0)",
      "right" : "if (index == 0)",
      "info" : "IfStatement[16826-17787]:IfStatement[16891-17852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16842-17035]:Block[16907-17100]"
    }, {
      "left" : "if (charAt(value, index + 2) == 'I')",
      "right" : "if (charAt(value, index + 2) == 'I')",
      "info" : "IfStatement[16856-17001]:IfStatement[16921-17066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16893-16944]:Block[16958-17009]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[16911-16930]:ExpressionStatement[16976-16995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16950-17001]:Block[17015-17066]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[16968-16987]:ExpressionStatement[17033-17052]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[17014-17025]:ExpressionStatement[17079-17090]"
    }, {
      "left" : "if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 3 && contains(value, index - 4, 1, \"B\", \"H\")))",
      "right" : "if ((index > 1 && contains(value, index - 2, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 2 && contains(value, index - 3, 1, \"B\", \"H\", \"D\")) ||\n                   (index > 3 && contains(value, index - 4, 1, \"B\", \"H\")))",
      "info" : "IfStatement[17041-17787]:IfStatement[17106-17852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17265-17372]:Block[17330-17437]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[17351-17362]:ExpressionStatement[17416-17427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17378-17787]:Block[17443-17852]"
    }, {
      "left" : "if (index > 2 && charAt(value, index - 1) == 'U' &&\n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\"))",
      "right" : "if (index > 2 && charAt(value, index - 1) == 'U' &&\n                contains(value, index - 3, 1, \"C\", \"G\", \"L\", \"R\", \"T\"))",
      "info" : "IfStatement[17392-17753]:IfStatement[17457-17818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17516-17646]:Block[17581-17711]"
    }, {
      "left" : "result.append('F');",
      "right" : "result.append('F');",
      "info" : "ExpressionStatement[17613-17632]:ExpressionStatement[17678-17697]"
    }, {
      "left" : "if (index > 0 && charAt(value, index - 1) != 'I')",
      "right" : "if (index > 0 && charAt(value, index - 1) != 'I')",
      "info" : "IfStatement[17652-17753]:IfStatement[17717-17818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17702-17753]:Block[17767-17818]"
    }, {
      "left" : "result.append('K');",
      "right" : "result.append('K');",
      "info" : "ExpressionStatement[17720-17739]:ExpressionStatement[17785-17804]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[17766-17777]:ExpressionStatement[17831-17842]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[17796-17809]:ReturnStatement[17861-17874]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17863-17870]:Modifier[17928-17935]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17871-17874]:PrimitiveType[17936-17939]"
    }, {
      "left" : "handleH",
      "right" : "handleH",
      "info" : "SimpleName[17875-17882]:SimpleName[17940-17947]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[17883-17901]:SingleVariableDeclaration[17948-17966]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[17903-17937]:SingleVariableDeclaration[17968-18002]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[17939-17948]:SingleVariableDeclaration[18004-18013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17950-18314]:Block[18015-18379]"
    }, {
      "left" : "if ((index == 0 || isVowel(charAt(value, index - 1))) &&\n            isVowel(charAt(value, index + 1)))",
      "right" : "if ((index == 0 || isVowel(charAt(value, index - 1))) &&\n            isVowel(charAt(value, index + 1)))",
      "info" : "IfStatement[18032-18286]:IfStatement[18097-18351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18136-18248]:Block[18201-18313]"
    }, {
      "left" : "result.append('H');",
      "right" : "result.append('H');",
      "info" : "ExpressionStatement[18150-18169]:ExpressionStatement[18215-18234]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[18182-18193]:ExpressionStatement[18247-18258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18254-18286]:Block[18319-18351]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[18268-18276]:ExpressionStatement[18333-18341]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[18295-18308]:ReturnStatement[18360-18373]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18362-18369]:Modifier[18427-18434]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[18370-18373]:PrimitiveType[18435-18438]"
    }, {
      "left" : "handleJ",
      "right" : "handleJ",
      "info" : "SimpleName[18374-18381]:SimpleName[18439-18446]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[18382-18400]:SingleVariableDeclaration[18447-18465]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[18402-18436]:SingleVariableDeclaration[18467-18501]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[18438-18447]:SingleVariableDeclaration[18503-18512]"
    }, {
      "left" : "final boolean slavoGermanic",
      "right" : "final boolean slavoGermanic",
      "info" : "SingleVariableDeclaration[18473-18500]:SingleVariableDeclaration[18538-18565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18502-19834]:Block[18567-19899]"
    }, {
      "left" : "if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \"))",
      "right" : "if (contains(value, index, 4, \"JOSE\") || contains(value, 0, 4, \"SAN \"))",
      "info" : "IfStatement[18512-19806]:IfStatement[18577-19871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18584-18967]:Block[18649-19032]"
    }, {
      "left" : "if ((index == 0 && (charAt(value, index + 4) == ' ') ||\n                     value.length() == 4) || contains(value, 0, 4, \"SAN \"))",
      "right" : "if ((index == 0 && (charAt(value, index + 4) == ' ') ||\n                     value.length() == 4) || contains(value, 0, 4, \"SAN \"))",
      "info" : "IfStatement[18667-18928]:IfStatement[18732-18993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18799-18858]:Block[18864-18923]"
    }, {
      "left" : "result.append('H');",
      "right" : "result.append('H');",
      "info" : "ExpressionStatement[18821-18840]:ExpressionStatement[18886-18905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18864-18928]:Block[18929-18993]"
    }, {
      "left" : "result.append('J', 'H');",
      "right" : "result.append('J', 'H');",
      "info" : "ExpressionStatement[18886-18910]:ExpressionStatement[18951-18975]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[18945-18953]:ExpressionStatement[19010-19018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18973-19806]:Block[19038-19871]"
    }, {
      "left" : "if (index == 0 && !contains(value, index, 4, \"JOSE\"))",
      "right" : "if (index == 0 && !contains(value, index, 4, \"JOSE\"))",
      "info" : "IfStatement[18991-19632]:IfStatement[19056-19697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19045-19109]:Block[19110-19174]"
    }, {
      "left" : "result.append('J', 'A');",
      "right" : "result.append('J', 'A');",
      "info" : "ExpressionStatement[19067-19091]:ExpressionStatement[19132-19156]"
    }, {
      "left" : "if (isVowel(charAt(value, index - 1)) && !slavoGermanic &&\n                           (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O'))",
      "right" : "if (isVowel(charAt(value, index - 1)) && !slavoGermanic &&\n                           (charAt(value, index + 1) == 'A' || charAt(value, index + 1) == 'O'))",
      "info" : "IfStatement[19115-19632]:IfStatement[19180-19697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19271-19335]:Block[19336-19400]"
    }, {
      "left" : "result.append('J', 'H');",
      "right" : "result.append('J', 'H');",
      "info" : "ExpressionStatement[19293-19317]:ExpressionStatement[19358-19382]"
    }, {
      "left" : "if (index == value.length() - 1)",
      "right" : "if (index == value.length() - 1)",
      "info" : "IfStatement[19341-19632]:IfStatement[19406-19697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19374-19438]:Block[19439-19503]"
    }, {
      "left" : "result.append('J', ' ');",
      "right" : "result.append('J', ' ');",
      "info" : "ExpressionStatement[19396-19420]:ExpressionStatement[19461-19485]"
    }, {
      "left" : "if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) &&\n                           !contains(value, index - 1, 1, \"S\", \"K\", \"L\"))",
      "right" : "if (!contains(value, index + 1, 1, L_T_K_S_N_M_B_Z) &&\n                           !contains(value, index - 1, 1, \"S\", \"K\", \"L\"))",
      "info" : "IfStatement[19444-19632]:IfStatement[19509-19697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19573-19632]:Block[19638-19697]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[19595-19614]:ExpressionStatement[19660-19679]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'J')",
      "right" : "if (charAt(value, index + 1) == 'J')",
      "info" : "IfStatement[19650-19792]:IfStatement[19715-19857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19687-19738]:Block[19752-19803]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[19709-19720]:ExpressionStatement[19774-19785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19744-19792]:Block[19809-19857]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[19766-19774]:ExpressionStatement[19831-19839]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[19815-19828]:ReturnStatement[19880-19893]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19882-19889]:Modifier[19947-19954]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[19890-19893]:PrimitiveType[19955-19958]"
    }, {
      "left" : "handleL",
      "right" : "handleL",
      "info" : "SimpleName[19894-19901]:SimpleName[19959-19966]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[19902-19920]:SingleVariableDeclaration[19967-19985]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[19922-19956]:SingleVariableDeclaration[19987-20021]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[19958-19967]:SingleVariableDeclaration[20023-20032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19969-20308]:Block[20034-20373]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'L')",
      "right" : "if (charAt(value, index + 1) == 'L')",
      "info" : "IfStatement[19979-20280]:IfStatement[20044-20345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20016-20210]:Block[20081-20275]"
    }, {
      "left" : "if (conditionL0(value, index))",
      "right" : "if (conditionL0(value, index))",
      "info" : "IfStatement[20030-20176]:IfStatement[20095-20241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20061-20119]:Block[20126-20184]"
    }, {
      "left" : "result.appendPrimary('L');",
      "right" : "result.appendPrimary('L');",
      "info" : "ExpressionStatement[20079-20105]:ExpressionStatement[20144-20170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20125-20176]:Block[20190-20241]"
    }, {
      "left" : "result.append('L');",
      "right" : "result.append('L');",
      "info" : "ExpressionStatement[20143-20162]:ExpressionStatement[20208-20227]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[20189-20200]:ExpressionStatement[20254-20265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20216-20280]:Block[20281-20345]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[20230-20238]:ExpressionStatement[20295-20303]"
    }, {
      "left" : "result.append('L');",
      "right" : "result.append('L');",
      "info" : "ExpressionStatement[20251-20270]:ExpressionStatement[20316-20335]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[20289-20302]:ReturnStatement[20354-20367]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20356-20363]:Modifier[20421-20428]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20364-20367]:PrimitiveType[20429-20432]"
    }, {
      "left" : "handleP",
      "right" : "handleP",
      "info" : "SimpleName[20368-20375]:SimpleName[20433-20440]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[20376-20394]:SingleVariableDeclaration[20441-20459]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[20396-20430]:SingleVariableDeclaration[20461-20495]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[20432-20441]:SingleVariableDeclaration[20497-20506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20443-20719]:Block[20508-20784]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'H')",
      "right" : "if (charAt(value, index + 1) == 'H')",
      "info" : "IfStatement[20453-20691]:IfStatement[20518-20756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20490-20557]:Block[20555-20622]"
    }, {
      "left" : "result.append('F');",
      "right" : "result.append('F');",
      "info" : "ExpressionStatement[20504-20523]:ExpressionStatement[20569-20588]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[20536-20547]:ExpressionStatement[20601-20612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20563-20691]:Block[20628-20756]"
    }, {
      "left" : "result.append('P');",
      "right" : "result.append('P');",
      "info" : "ExpressionStatement[20577-20596]:ExpressionStatement[20642-20661]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"P\", \"B\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[20609-20681]:ExpressionStatement[20674-20746]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[20700-20713]:ReturnStatement[20765-20778]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20767-20774]:Modifier[20832-20839]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20775-20778]:PrimitiveType[20840-20843]"
    }, {
      "left" : "handleR",
      "right" : "handleR",
      "info" : "SimpleName[20779-20786]:SimpleName[20844-20851]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[20787-20805]:SingleVariableDeclaration[20852-20870]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[20807-20841]:SingleVariableDeclaration[20872-20906]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[20843-20858]:SingleVariableDeclaration[20908-20923]"
    }, {
      "left" : "final boolean slavoGermanic",
      "right" : "final boolean slavoGermanic",
      "info" : "SingleVariableDeclaration[20884-20911]:SingleVariableDeclaration[20949-20976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20913-21262]:Block[20978-21327]"
    }, {
      "left" : "if (index == value.length() - 1 && !slavoGermanic &&\n            contains(value, index - 2, 2, \"IE\") &&\n            !contains(value, index - 4, 2, \"ME\", \"MA\"))",
      "right" : "if (index == value.length() - 1 && !slavoGermanic &&\n            contains(value, index - 2, 2, \"IE\") &&\n            !contains(value, index - 4, 2, \"ME\", \"MA\"))",
      "info" : "IfStatement[20923-21184]:IfStatement[20988-21249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21083-21135]:Block[21148-21200]"
    }, {
      "left" : "result.appendAlternate('R');",
      "right" : "result.appendAlternate('R');",
      "info" : "ExpressionStatement[21097-21125]:ExpressionStatement[21162-21190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21141-21184]:Block[21206-21249]"
    }, {
      "left" : "result.append('R');",
      "right" : "result.append('R');",
      "info" : "ExpressionStatement[21155-21174]:ExpressionStatement[21220-21239]"
    }, {
      "left" : "return charAt(value, index + 1) == 'R' ? index + 2 : index + 1;",
      "right" : "return charAt(value, index + 1) == 'R' ? index + 2 : index + 1;",
      "info" : "ReturnStatement[21193-21256]:ReturnStatement[21258-21321]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21310-21317]:Modifier[21375-21382]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[21318-21321]:PrimitiveType[21383-21386]"
    }, {
      "left" : "handleS",
      "right" : "handleS",
      "info" : "SimpleName[21322-21329]:SimpleName[21387-21394]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[21330-21348]:SingleVariableDeclaration[21395-21413]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[21350-21384]:SingleVariableDeclaration[21415-21449]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[21386-21395]:SingleVariableDeclaration[21451-21460]"
    }, {
      "left" : "final boolean slavoGermanic",
      "right" : "final boolean slavoGermanic",
      "info" : "SingleVariableDeclaration[21421-21448]:SingleVariableDeclaration[21486-21513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21450-23403]:Block[21515-23468]"
    }, {
      "left" : "if (contains(value, index - 1, 3, \"ISL\", \"YSL\"))",
      "right" : "if (contains(value, index - 1, 3, \"ISL\", \"YSL\"))",
      "info" : "IfStatement[21460-23375]:IfStatement[21525-23440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21509-21618]:Block[21574-21683]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[21600-21608]:ExpressionStatement[21665-21673]"
    }, {
      "left" : "if (index == 0 && contains(value, index, 5, \"SUGAR\"))",
      "right" : "if (index == 0 && contains(value, index, 5, \"SUGAR\"))",
      "info" : "IfStatement[21624-23375]:IfStatement[21689-23440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21678-21791]:Block[21743-21856]"
    }, {
      "left" : "result.append('X', 'S');",
      "right" : "result.append('X', 'S');",
      "info" : "ExpressionStatement[21736-21760]:ExpressionStatement[21801-21825]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[21773-21781]:ExpressionStatement[21838-21846]"
    }, {
      "left" : "if (contains(value, index, 2, \"SH\"))",
      "right" : "if (contains(value, index, 2, \"SH\"))",
      "info" : "IfStatement[21797-23375]:IfStatement[21862-23440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21834-22092]:Block[21899-22157]"
    }, {
      "left" : "if (contains(value, index + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\"))",
      "right" : "if (contains(value, index + 1, 4, \"HEIM\", \"HOEK\", \"HOLM\", \"HOLZ\"))",
      "info" : "IfStatement[21848-22058]:IfStatement[21913-22123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21915-22001]:Block[21980-22066]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[21968-21987]:ExpressionStatement[22033-22052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22007-22058]:Block[22072-22123]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[22025-22044]:ExpressionStatement[22090-22109]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[22071-22082]:ExpressionStatement[22136-22147]"
    }, {
      "left" : "if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\"))",
      "right" : "if (contains(value, index, 3, \"SIO\", \"SIA\") || contains(value, index, 4, \"SIAN\"))",
      "info" : "IfStatement[22098-23375]:IfStatement[22163-23440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22180-22403]:Block[22245-22468]"
    }, {
      "left" : "if (slavoGermanic)",
      "right" : "if (slavoGermanic)",
      "info" : "IfStatement[22237-22369]:IfStatement[22302-22434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22256-22307]:Block[22321-22372]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[22274-22293]:ExpressionStatement[22339-22358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22313-22369]:Block[22378-22434]"
    }, {
      "left" : "result.append('S', 'X');",
      "right" : "result.append('S', 'X');",
      "info" : "ExpressionStatement[22331-22355]:ExpressionStatement[22396-22420]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[22382-22393]:ExpressionStatement[22447-22458]"
    }, {
      "left" : "if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) ||\n                   contains(value, index + 1, 1, \"Z\"))",
      "right" : "if ((index == 0 && contains(value, index + 1, 1, \"M\", \"N\", \"L\", \"W\")) ||\n                   contains(value, index + 1, 1, \"Z\"))",
      "info" : "IfStatement[22409-23375]:IfStatement[22474-23440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22537-22901]:Block[22602-22966]"
    }, {
      "left" : "result.append('S', 'X');",
      "right" : "result.append('S', 'X');",
      "info" : "ExpressionStatement[22787-22811]:ExpressionStatement[22852-22876]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"Z\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[22824-22891]:ExpressionStatement[22889-22956]"
    }, {
      "left" : "if (contains(value, index, 2, \"SC\"))",
      "right" : "if (contains(value, index, 2, \"SC\"))",
      "info" : "IfStatement[22907-23375]:IfStatement[22972-23440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22944-23007]:Block[23009-23072]"
    }, {
      "left" : "index = handleSC(value, result, index);",
      "right" : "index = handleSC(value, result, index);",
      "info" : "ExpressionStatement[22958-22997]:ExpressionStatement[23023-23062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23013-23375]:Block[23078-23440]"
    }, {
      "left" : "if (index == value.length() - 1 && contains(value, index - 2, 2, \"AI\", \"OI\"))",
      "right" : "if (index == value.length() - 1 && contains(value, index - 2, 2, \"AI\", \"OI\"))",
      "info" : "IfStatement[23027-23280]:IfStatement[23092-23345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23105-23223]:Block[23170-23288]"
    }, {
      "left" : "result.appendAlternate('S');",
      "right" : "result.appendAlternate('S');",
      "info" : "ExpressionStatement[23181-23209]:ExpressionStatement[23246-23274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23229-23280]:Block[23294-23345]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[23247-23266]:ExpressionStatement[23312-23331]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"S\", \"Z\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[23293-23365]:ExpressionStatement[23358-23430]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[23384-23397]:ReturnStatement[23449-23462]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23452-23459]:Modifier[23517-23524]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[23460-23463]:PrimitiveType[23525-23528]"
    }, {
      "left" : "handleSC",
      "right" : "handleSC",
      "info" : "SimpleName[23464-23472]:SimpleName[23529-23537]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[23473-23491]:SingleVariableDeclaration[23538-23556]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[23493-23527]:SingleVariableDeclaration[23558-23592]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[23529-23544]:SingleVariableDeclaration[23594-23609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23546-24483]:Block[23611-24548]"
    }, {
      "left" : "if (charAt(value, index + 2) == 'H')",
      "right" : "if (charAt(value, index + 2) == 'H')",
      "info" : "IfStatement[23556-24451]:IfStatement[23621-24516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23593-24302]:Block[23658-24367]"
    }, {
      "left" : "if (contains(value, index + 3, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\"))",
      "right" : "if (contains(value, index + 3, 2, \"OO\", \"ER\", \"EN\", \"UY\", \"ED\", \"EM\"))",
      "info" : "IfStatement[23648-24292]:IfStatement[23713-24357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23719-24052]:Block[23784-24117]"
    }, {
      "left" : "if (contains(value, index + 3, 2, \"ER\", \"EN\"))",
      "right" : "if (contains(value, index + 3, 2, \"ER\", \"EN\"))",
      "info" : "IfStatement[23803-24038]:IfStatement[23868-24103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23850-23972]:Block[23915-24037]"
    }, {
      "left" : "result.append(\"X\", \"SK\");",
      "right" : "result.append(\"X\", \"SK\");",
      "info" : "ExpressionStatement[23929-23954]:ExpressionStatement[23994-24019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23978-24038]:Block[24043-24103]"
    }, {
      "left" : "result.append(\"SK\");",
      "right" : "result.append(\"SK\");",
      "info" : "ExpressionStatement[24000-24020]:ExpressionStatement[24065-24085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24058-24292]:Block[24123-24357]"
    }, {
      "left" : "if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W')",
      "right" : "if (index == 0 && !isVowel(charAt(value, 3)) && charAt(value, 3) != 'W')",
      "info" : "IfStatement[24076-24278]:IfStatement[24141-24343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24149-24213]:Block[24214-24278]"
    }, {
      "left" : "result.append('X', 'S');",
      "right" : "result.append('X', 'S');",
      "info" : "ExpressionStatement[24171-24195]:ExpressionStatement[24236-24260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24219-24278]:Block[24284-24343]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[24241-24260]:ExpressionStatement[24306-24325]"
    }, {
      "left" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\"))",
      "right" : "if (contains(value, index + 2, 1, \"I\", \"E\", \"Y\"))",
      "info" : "IfStatement[24308-24451]:IfStatement[24373-24516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24358-24401]:Block[24423-24466]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[24372-24391]:ExpressionStatement[24437-24456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24407-24451]:Block[24472-24516]"
    }, {
      "left" : "result.append(\"SK\");",
      "right" : "result.append(\"SK\");",
      "info" : "ExpressionStatement[24421-24441]:ExpressionStatement[24486-24506]"
    }, {
      "left" : "return index + 3;",
      "right" : "return index + 3;",
      "info" : "ReturnStatement[24460-24477]:ReturnStatement[24525-24542]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24531-24538]:Modifier[24596-24603]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24539-24542]:PrimitiveType[24604-24607]"
    }, {
      "left" : "handleT",
      "right" : "handleT",
      "info" : "SimpleName[24543-24550]:SimpleName[24608-24615]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[24551-24569]:SingleVariableDeclaration[24616-24634]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[24571-24605]:SingleVariableDeclaration[24636-24670]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[24607-24616]:SingleVariableDeclaration[24672-24681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24618-25476]:Block[24683-25541]"
    }, {
      "left" : "if (contains(value, index, 4, \"TION\"))",
      "right" : "if (contains(value, index, 4, \"TION\"))",
      "info" : "IfStatement[24628-25448]:IfStatement[24693-25513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24667-24734]:Block[24732-24799]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[24681-24700]:ExpressionStatement[24746-24765]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[24713-24724]:ExpressionStatement[24778-24789]"
    }, {
      "left" : "if (contains(value, index, 3, \"TIA\", \"TCH\"))",
      "right" : "if (contains(value, index, 3, \"TIA\", \"TCH\"))",
      "info" : "IfStatement[24740-25448]:IfStatement[24805-25513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24785-24852]:Block[24850-24917]"
    }, {
      "left" : "result.append('X');",
      "right" : "result.append('X');",
      "info" : "ExpressionStatement[24799-24818]:ExpressionStatement[24864-24883]"
    }, {
      "left" : "index += 3;",
      "right" : "index += 3;",
      "info" : "ExpressionStatement[24831-24842]:ExpressionStatement[24896-24907]"
    }, {
      "left" : "if (contains(value, index, 2, \"TH\") || contains(value, index, 3, \"TTH\"))",
      "right" : "if (contains(value, index, 2, \"TH\") || contains(value, index, 3, \"TTH\"))",
      "info" : "IfStatement[24858-25448]:IfStatement[24923-25513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24931-25314]:Block[24996-25379]"
    }, {
      "left" : "if (contains(value, index + 2, 2, \"OM\", \"AM\") ||\n                //-- special case \"thomas\", \"thames\" or germanic --//\n                contains(value, 0, 4, \"VAN \", \"VON \") ||\n                contains(value, 0, 3, \"SCH\"))",
      "right" : "if (contains(value, index + 2, 2, \"OM\", \"AM\") ||\n                //-- special case \"thomas\", \"thames\" or germanic --//\n                contains(value, 0, 4, \"VAN \", \"VON \") ||\n                contains(value, 0, 3, \"SCH\"))",
      "info" : "IfStatement[24945-25280]:IfStatement[25010-25345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25167-25218]:Block[25232-25283]"
    }, {
      "left" : "result.append('T');",
      "right" : "result.append('T');",
      "info" : "ExpressionStatement[25185-25204]:ExpressionStatement[25250-25269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25224-25280]:Block[25289-25345]"
    }, {
      "left" : "result.append('0', 'T');",
      "right" : "result.append('0', 'T');",
      "info" : "ExpressionStatement[25242-25266]:ExpressionStatement[25307-25331]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[25293-25304]:ExpressionStatement[25358-25369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25320-25448]:Block[25385-25513]"
    }, {
      "left" : "result.append('T');",
      "right" : "result.append('T');",
      "info" : "ExpressionStatement[25334-25353]:ExpressionStatement[25399-25418]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"T\", \"D\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[25366-25438]:ExpressionStatement[25431-25503]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[25457-25470]:ReturnStatement[25522-25535]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25524-25531]:Modifier[25589-25596]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25532-25535]:PrimitiveType[25597-25600]"
    }, {
      "left" : "handleW",
      "right" : "handleW",
      "info" : "SimpleName[25536-25543]:SimpleName[25601-25608]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[25544-25562]:SingleVariableDeclaration[25609-25627]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[25564-25598]:SingleVariableDeclaration[25629-25663]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[25600-25609]:SingleVariableDeclaration[25665-25674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25611-26896]:Block[25676-26961]"
    }, {
      "left" : "if (contains(value, index, 2, \"WR\"))",
      "right" : "if (contains(value, index, 2, \"WR\"))",
      "info" : "IfStatement[25621-26868]:IfStatement[25686-26933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25658-25777]:Block[25723-25842]"
    }, {
      "left" : "result.append('R');",
      "right" : "result.append('R');",
      "info" : "ExpressionStatement[25724-25743]:ExpressionStatement[25789-25808]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[25756-25767]:ExpressionStatement[25821-25832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25783-26868]:Block[25848-26933]"
    }, {
      "left" : "if (index == 0 && (isVowel(charAt(value, index + 1)) ||\n                               contains(value, index, 2, \"WH\")))",
      "right" : "if (index == 0 && (isVowel(charAt(value, index + 1)) ||\n                               contains(value, index, 2, \"WH\")))",
      "info" : "IfStatement[25797-26858]:IfStatement[25862-26923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25918-26260]:Block[25983-26325]"
    }, {
      "left" : "if (isVowel(charAt(value, index + 1)))",
      "right" : "if (isVowel(charAt(value, index + 1)))",
      "info" : "IfStatement[25936-26221]:IfStatement[26001-26286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25975-26102]:Block[26040-26167]"
    }, {
      "left" : "result.append('A', 'F');",
      "right" : "result.append('A', 'F');",
      "info" : "ExpressionStatement[26060-26084]:ExpressionStatement[26125-26149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26108-26221]:Block[26173-26286]"
    }, {
      "left" : "result.append('A');",
      "right" : "result.append('A');",
      "info" : "ExpressionStatement[26184-26203]:ExpressionStatement[26249-26268]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[26238-26246]:ExpressionStatement[26303-26311]"
    }, {
      "left" : "if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n                       contains(value, index - 1, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                       contains(value, 0, 3, \"SCH\"))",
      "right" : "if ((index == value.length() - 1 && isVowel(charAt(value, index - 1))) ||\n                       contains(value, index - 1, 5, \"EWSKI\", \"EWSKY\", \"OWSKI\", \"OWSKY\") ||\n                       contains(value, 0, 3, \"SCH\"))",
      "info" : "IfStatement[26266-26858]:IfStatement[26331-26923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26485-26622]:Block[26550-26687]"
    }, {
      "left" : "result.appendAlternate('F');",
      "right" : "result.appendAlternate('F');",
      "info" : "ExpressionStatement[26555-26583]:ExpressionStatement[26620-26648]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[26600-26608]:ExpressionStatement[26665-26673]"
    }, {
      "left" : "if (contains(value, index, 4, \"WICZ\", \"WITZ\"))",
      "right" : "if (contains(value, index, 4, \"WICZ\", \"WITZ\"))",
      "info" : "IfStatement[26628-26858]:IfStatement[26693-26923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26675-26812]:Block[26740-26877]"
    }, {
      "left" : "result.append(\"TS\", \"FX\");",
      "right" : "result.append(\"TS\", \"FX\");",
      "info" : "ExpressionStatement[26744-26770]:ExpressionStatement[26809-26835]"
    }, {
      "left" : "index += 4;",
      "right" : "index += 4;",
      "info" : "ExpressionStatement[26787-26798]:ExpressionStatement[26852-26863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26818-26858]:Block[26883-26923]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[26836-26844]:ExpressionStatement[26901-26909]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[26877-26890]:ReturnStatement[26942-26955]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26944-26951]:Modifier[27009-27016]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[26952-26955]:PrimitiveType[27017-27020]"
    }, {
      "left" : "handleX",
      "right" : "handleX",
      "info" : "SimpleName[26956-26963]:SimpleName[27021-27028]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[26964-26982]:SingleVariableDeclaration[27029-27047]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[26984-27018]:SingleVariableDeclaration[27049-27083]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[27020-27029]:SingleVariableDeclaration[27085-27094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27031-27530]:Block[27096-27595]"
    }, {
      "left" : "if (index == 0)",
      "right" : "if (index == 0)",
      "info" : "IfStatement[27041-27502]:IfStatement[27106-27567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27057-27121]:Block[27122-27186]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[27071-27090]:ExpressionStatement[27136-27155]"
    }, {
      "left" : "index++;",
      "right" : "index++;",
      "info" : "ExpressionStatement[27103-27111]:ExpressionStatement[27168-27176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27127-27502]:Block[27192-27567]"
    }, {
      "left" : "if (!((index == value.length() - 1) &&\n                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") ||\n                   contains(value, index - 2, 2, \"AU\", \"OU\"))))",
      "right" : "if (!((index == value.length() - 1) &&\n                  (contains(value, index - 3, 3, \"IAU\", \"EAU\") ||\n                   contains(value, index - 2, 2, \"AU\", \"OU\"))))",
      "info" : "IfStatement[27141-27407]:IfStatement[27206-27472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27310-27407]:Block[27375-27472]"
    }, {
      "left" : "result.append(\"KS\");",
      "right" : "result.append(\"KS\");",
      "info" : "ExpressionStatement[27373-27393]:ExpressionStatement[27438-27458]"
    }, {
      "left" : "index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;",
      "right" : "index = contains(value, index + 1, 1, \"C\", \"X\") ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[27420-27492]:ExpressionStatement[27485-27557]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[27511-27524]:ReturnStatement[27576-27589]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27578-27585]:Modifier[27643-27650]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27586-27589]:PrimitiveType[27651-27654]"
    }, {
      "left" : "handleZ",
      "right" : "handleZ",
      "info" : "SimpleName[27590-27597]:SimpleName[27655-27662]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[27598-27616]:SingleVariableDeclaration[27663-27681]"
    }, {
      "left" : "final DoubleMetaphoneResult result",
      "right" : "final DoubleMetaphoneResult result",
      "info" : "SingleVariableDeclaration[27618-27652]:SingleVariableDeclaration[27683-27717]"
    }, {
      "left" : "int index",
      "right" : "int index",
      "info" : "SingleVariableDeclaration[27654-27663]:SingleVariableDeclaration[27719-27728]"
    }, {
      "left" : "final boolean slavoGermanic",
      "right" : "final boolean slavoGermanic",
      "info" : "SingleVariableDeclaration[27689-27716]:SingleVariableDeclaration[27754-27781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27718-28288]:Block[27783-28353]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'H')",
      "right" : "if (charAt(value, index + 1) == 'H')",
      "info" : "IfStatement[27728-28260]:IfStatement[27793-28325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27765-27901]:Block[27830-27966]"
    }, {
      "left" : "result.append('J');",
      "right" : "result.append('J');",
      "info" : "ExpressionStatement[27848-27867]:ExpressionStatement[27913-27932]"
    }, {
      "left" : "index += 2;",
      "right" : "index += 2;",
      "info" : "ExpressionStatement[27880-27891]:ExpressionStatement[27945-27956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27907-28260]:Block[27972-28325]"
    }, {
      "left" : "if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") ||\n                (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T')))",
      "right" : "if (contains(value, index + 1, 2, \"ZO\", \"ZI\", \"ZA\") ||\n                (slavoGermanic && (index > 0 && charAt(value, index - 1) != 'T')))",
      "info" : "IfStatement[27921-28173]:IfStatement[27986-28238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28059-28116]:Block[28124-28181]"
    }, {
      "left" : "result.append(\"S\", \"TS\");",
      "right" : "result.append(\"S\", \"TS\");",
      "info" : "ExpressionStatement[28077-28102]:ExpressionStatement[28142-28167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28122-28173]:Block[28187-28238]"
    }, {
      "left" : "result.append('S');",
      "right" : "result.append('S');",
      "info" : "ExpressionStatement[28140-28159]:ExpressionStatement[28205-28224]"
    }, {
      "left" : "index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1;",
      "right" : "index = charAt(value, index + 1) == 'Z' ? index + 2 : index + 1;",
      "info" : "ExpressionStatement[28186-28250]:ExpressionStatement[28251-28315]"
    }, {
      "left" : "return index;",
      "right" : "return index;",
      "info" : "ReturnStatement[28269-28282]:ReturnStatement[28334-28347]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28378-28385]:Modifier[28443-28450]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[28386-28393]:PrimitiveType[28451-28458]"
    }, {
      "left" : "conditionC0",
      "right" : "conditionC0",
      "info" : "SimpleName[28394-28405]:SimpleName[28459-28470]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[28406-28424]:SingleVariableDeclaration[28471-28489]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[28426-28441]:SingleVariableDeclaration[28491-28506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28443-28947]:Block[28508-29012]"
    }, {
      "left" : "if (contains(value, index, 4, \"CHIA\"))",
      "right" : "if (contains(value, index, 4, \"CHIA\"))",
      "info" : "IfStatement[28453-28941]:IfStatement[28518-29006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28492-28528]:Block[28557-28593]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[28506-28518]:ReturnStatement[28571-28583]"
    }, {
      "left" : "if (index <= 1)",
      "right" : "if (index <= 1)",
      "info" : "IfStatement[28534-28941]:IfStatement[28599-29006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28550-28587]:Block[28615-28652]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28564-28577]:ReturnStatement[28629-28642]"
    }, {
      "left" : "if (isVowel(charAt(value, index - 2)))",
      "right" : "if (isVowel(charAt(value, index - 2)))",
      "info" : "IfStatement[28593-28941]:IfStatement[28658-29006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28632-28669]:Block[28697-28734]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28646-28659]:ReturnStatement[28711-28724]"
    }, {
      "left" : "if (!contains(value, index - 1, 3, \"ACH\"))",
      "right" : "if (!contains(value, index - 1, 3, \"ACH\"))",
      "info" : "IfStatement[28675-28941]:IfStatement[28740-29006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28718-28755]:Block[28783-28820]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[28732-28745]:ReturnStatement[28797-28810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28761-28941]:Block[28826-29006]"
    }, {
      "left" : "final char c = charAt(value, index + 2);",
      "right" : "final char c = charAt(value, index + 2);",
      "info" : "VariableDeclarationStatement[28775-28815]:VariableDeclarationStatement[28840-28880]"
    }, {
      "left" : "return (c != 'I' && c != 'E') ||\n                    contains(value, index - 2, 6, \"BACHER\", \"MACHER\");",
      "right" : "return (c != 'I' && c != 'E') ||\n                    contains(value, index - 2, 6, \"BACHER\", \"MACHER\");",
      "info" : "ReturnStatement[28828-28931]:ReturnStatement[28893-28996]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29006-29013]:Modifier[29071-29078]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29014-29021]:PrimitiveType[29079-29086]"
    }, {
      "left" : "conditionCH0",
      "right" : "conditionCH0",
      "info" : "SimpleName[29022-29034]:SimpleName[29087-29099]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[29035-29053]:SingleVariableDeclaration[29100-29118]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[29055-29070]:SingleVariableDeclaration[29120-29135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29072-29440]:Block[29137-29505]"
    }, {
      "left" : "if (index != 0)",
      "right" : "if (index != 0)",
      "info" : "IfStatement[29082-29434]:IfStatement[29147-29499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29098-29135]:Block[29163-29200]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29112-29125]:ReturnStatement[29177-29190]"
    }, {
      "left" : "if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") &&\n                   !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\"))",
      "right" : "if (!contains(value, index + 1, 5, \"HARAC\", \"HARIS\") &&\n                   !contains(value, index + 1, 3, \"HOR\", \"HYM\", \"HIA\", \"HEM\"))",
      "info" : "IfStatement[29141-29434]:IfStatement[29206-29499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29276-29313]:Block[29341-29378]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29290-29303]:ReturnStatement[29355-29368]"
    }, {
      "left" : "if (contains(value, 0, 5, \"CHORE\"))",
      "right" : "if (contains(value, 0, 5, \"CHORE\"))",
      "info" : "IfStatement[29319-29434]:IfStatement[29384-29499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29355-29392]:Block[29420-29457]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[29369-29382]:ReturnStatement[29434-29447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29398-29434]:Block[29463-29499]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[29412-29424]:ReturnStatement[29477-29489]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29499-29506]:Modifier[29564-29571]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29507-29514]:PrimitiveType[29572-29579]"
    }, {
      "left" : "conditionCH1",
      "right" : "conditionCH1",
      "info" : "SimpleName[29515-29527]:SimpleName[29580-29592]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[29528-29546]:SingleVariableDeclaration[29593-29611]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[29548-29563]:SingleVariableDeclaration[29613-29628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29565-29999]:Block[29630-30064]"
    }, {
      "left" : "return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) ||\n                contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                contains(value, index + 2, 1, \"T\", \"S\") ||\n                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));",
      "right" : "return ((contains(value, 0, 4, \"VAN \", \"VON \") || contains(value, 0, 3, \"SCH\")) ||\n                contains(value, index - 2, 6, \"ORCHES\", \"ARCHIT\", \"ORCHID\") ||\n                contains(value, index + 2, 1, \"T\", \"S\") ||\n                ((contains(value, index - 1, 1, \"A\", \"O\", \"U\", \"E\") || index == 0) &&\n                 (contains(value, index + 2, 1, L_R_N_M_B_H_F_V_W_SPACE) || index + 1 == value.length() - 1)));",
      "info" : "ReturnStatement[29575-29993]:ReturnStatement[29640-30058]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30057-30064]:Modifier[30122-30129]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30065-30072]:PrimitiveType[30130-30137]"
    }, {
      "left" : "conditionL0",
      "right" : "conditionL0",
      "info" : "SimpleName[30073-30084]:SimpleName[30138-30149]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[30085-30103]:SingleVariableDeclaration[30150-30168]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[30105-30120]:SingleVariableDeclaration[30170-30185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30122-30551]:Block[30187-30616]"
    }, {
      "left" : "if (index == value.length() - 3 &&\n            contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\"))",
      "right" : "if (index == value.length() - 3 &&\n            contains(value, index - 1, 4, \"ILLO\", \"ILLA\", \"ALLE\"))",
      "info" : "IfStatement[30132-30545]:IfStatement[30197-30610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30234-30270]:Block[30299-30335]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30248-30260]:ReturnStatement[30313-30325]"
    }, {
      "left" : "if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") ||\n                    contains(value, value.length() - 1, 1, \"A\", \"O\")) &&\n                   contains(value, index - 1, 4, \"ALLE\"))",
      "right" : "if ((contains(value, value.length() - 2, 2, \"AS\", \"OS\") ||\n                    contains(value, value.length() - 1, 1, \"A\", \"O\")) &&\n                   contains(value, index - 1, 4, \"ALLE\"))",
      "info" : "IfStatement[30276-30545]:IfStatement[30341-30610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30466-30502]:Block[30531-30567]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30480-30492]:ReturnStatement[30545-30557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30508-30545]:Block[30573-30610]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[30522-30535]:ReturnStatement[30587-30600]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30609-30616]:Modifier[30674-30681]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30617-30624]:PrimitiveType[30682-30689]"
    }, {
      "left" : "conditionM0",
      "right" : "conditionM0",
      "info" : "SimpleName[30625-30636]:SimpleName[30690-30701]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[30637-30655]:SingleVariableDeclaration[30702-30720]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[30657-30672]:SingleVariableDeclaration[30722-30737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30674-30909]:Block[30739-30974]"
    }, {
      "left" : "if (charAt(value, index + 1) == 'M')",
      "right" : "if (charAt(value, index + 1) == 'M')",
      "info" : "IfStatement[30684-30757]:IfStatement[30749-30822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30721-30757]:Block[30786-30822]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[30735-30747]:ReturnStatement[30800-30812]"
    }, {
      "left" : "return contains(value, index - 1, 3, \"UMB\") &&\n               ((index + 1) == value.length() - 1 || contains(value, index + 2, 2, \"ER\"));",
      "right" : "return contains(value, index - 1, 3, \"UMB\") &&\n               ((index + 1) == value.length() - 1 || contains(value, index + 2, 2, \"ER\"));",
      "info" : "ReturnStatement[30766-30903]:ReturnStatement[30831-30968]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31131-31138]:Modifier[31196-31203]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31139-31146]:PrimitiveType[31204-31211]"
    }, {
      "left" : "isSlavoGermanic",
      "right" : "isSlavoGermanic",
      "info" : "SimpleName[31147-31162]:SimpleName[31212-31227]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[31163-31181]:SingleVariableDeclaration[31228-31246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31183-31327]:Block[31248-31392]"
    }, {
      "left" : "return value.indexOf('W') > -1 || value.indexOf('K') > -1 ||\n            value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;",
      "right" : "return value.indexOf('W') > -1 || value.indexOf('K') > -1 ||\n            value.indexOf(\"CZ\") > -1 || value.indexOf(\"WITZ\") > -1;",
      "info" : "ReturnStatement[31193-31321]:ReturnStatement[31258-31386]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31412-31419]:Modifier[31477-31484]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31420-31427]:PrimitiveType[31485-31492]"
    }, {
      "left" : "isVowel",
      "right" : "isVowel",
      "info" : "SimpleName[31428-31435]:SimpleName[31493-31500]"
    }, {
      "left" : "final char ch",
      "right" : "final char ch",
      "info" : "SingleVariableDeclaration[31436-31449]:SingleVariableDeclaration[31501-31514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31451-31499]:Block[31516-31564]"
    }, {
      "left" : "return VOWELS.indexOf(ch) != -1;",
      "right" : "return VOWELS.indexOf(ch) != -1;",
      "info" : "ReturnStatement[31461-31493]:ReturnStatement[31526-31558]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31700-31707]:Modifier[31765-31772]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31708-31715]:PrimitiveType[31773-31780]"
    }, {
      "left" : "isSilentStart",
      "right" : "isSilentStart",
      "info" : "SimpleName[31716-31729]:SimpleName[31781-31794]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[31730-31748]:SingleVariableDeclaration[31795-31813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31750-31987]:Block[31815-32052]"
    }, {
      "left" : "boolean result = false;",
      "right" : "boolean result = false;",
      "info" : "VariableDeclarationStatement[31760-31783]:VariableDeclarationStatement[31825-31848]"
    }, {
      "left" : "for (final String element : SILENT_START)",
      "right" : "for (final String element : SILENT_START)",
      "info" : "EnhancedForStatement[31792-31958]:EnhancedForStatement[31857-32023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31834-31958]:Block[31899-32023]"
    }, {
      "left" : "if (value.startsWith(element))",
      "right" : "if (value.startsWith(element))",
      "info" : "IfStatement[31848-31948]:IfStatement[31913-32013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31879-31948]:Block[31944-32013]"
    }, {
      "left" : "result = true;",
      "right" : "result = true;",
      "info" : "ExpressionStatement[31897-31911]:ExpressionStatement[31962-31976]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31928-31934]:BreakStatement[31993-31999]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[31967-31981]:ReturnStatement[32032-32046]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32034-32041]:Modifier[32099-32106]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32042-32048]:SimpleType[32107-32113]"
    }, {
      "left" : "cleanInput",
      "right" : "cleanInput",
      "info" : "SimpleName[32049-32059]:SimpleName[32114-32124]"
    }, {
      "left" : "String input",
      "right" : "String input",
      "info" : "SingleVariableDeclaration[32060-32072]:SingleVariableDeclaration[32125-32137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32074-32305]:Block[32139-32370]"
    }, {
      "left" : "if (input == null)",
      "right" : "if (input == null)",
      "info" : "IfStatement[32084-32139]:IfStatement[32149-32204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32103-32139]:Block[32168-32204]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32117-32129]:ReturnStatement[32182-32194]"
    }, {
      "left" : "input = input.trim();",
      "right" : "input = input.trim();",
      "info" : "ExpressionStatement[32148-32169]:ExpressionStatement[32213-32234]"
    }, {
      "left" : "if (input.length() == 0)",
      "right" : "if (input.length() == 0)",
      "info" : "IfStatement[32178-32239]:IfStatement[32243-32304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32203-32239]:Block[32268-32304]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32217-32229]:ReturnStatement[32282-32294]"
    }, {
      "left" : "return input.toUpperCase(java.util.Locale.ENGLISH);",
      "right" : "return input.toUpperCase(java.util.Locale.ENGLISH);",
      "info" : "ReturnStatement[32248-32299]:ReturnStatement[32313-32364]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32504-32513]:Modifier[32569-32578]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[32514-32518]:PrimitiveType[32579-32583]"
    }, {
      "left" : "charAt",
      "right" : "charAt",
      "info" : "SimpleName[32519-32525]:SimpleName[32584-32590]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[32526-32544]:SingleVariableDeclaration[32591-32609]"
    }, {
      "left" : "final int index",
      "right" : "final int index",
      "info" : "SingleVariableDeclaration[32546-32561]:SingleVariableDeclaration[32611-32626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32563-32708]:Block[32628-32773]"
    }, {
      "left" : "if (index < 0 || index >= value.length())",
      "right" : "if (index < 0 || index >= value.length())",
      "info" : "IfStatement[32573-32666]:IfStatement[32638-32731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32615-32666]:Block[32680-32731]"
    }, {
      "left" : "return Character.MIN_VALUE;",
      "right" : "return Character.MIN_VALUE;",
      "info" : "ReturnStatement[32629-32656]:ReturnStatement[32694-32721]"
    }, {
      "left" : "return value.charAt(index);",
      "right" : "return value.charAt(index);",
      "info" : "ReturnStatement[32675-32702]:ReturnStatement[32740-32767]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[32895-32904]:Modifier[32960-32969]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32905-32911]:Modifier[32970-32976]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32912-32919]:PrimitiveType[32977-32984]"
    }, {
      "left" : "contains",
      "right" : "contains",
      "info" : "SimpleName[32920-32928]:SimpleName[32985-32993]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[32929-32947]:SingleVariableDeclaration[32994-33012]"
    }, {
      "left" : "final int start",
      "right" : "final int start",
      "info" : "SingleVariableDeclaration[32949-32964]:SingleVariableDeclaration[33014-33029]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[32966-32982]:SingleVariableDeclaration[33031-33047]"
    }, {
      "left" : "final String... criteria",
      "right" : "final String... criteria",
      "info" : "SingleVariableDeclaration[33022-33046]:SingleVariableDeclaration[33087-33111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33048-33449]:Block[33113-33514]"
    }, {
      "left" : "boolean result = false;",
      "right" : "boolean result = false;",
      "info" : "VariableDeclarationStatement[33058-33081]:VariableDeclarationStatement[33123-33146]"
    }, {
      "left" : "if (start >= 0 && start + length <= value.length())",
      "right" : "if (start >= 0 && start + length <= value.length())",
      "info" : "IfStatement[33090-33420]:IfStatement[33155-33485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33142-33420]:Block[33207-33485]"
    }, {
      "left" : "final String target = value.substring(start, start + length);",
      "right" : "final String target = value.substring(start, start + length);",
      "info" : "VariableDeclarationStatement[33156-33217]:VariableDeclarationStatement[33221-33282]"
    }, {
      "left" : "for (final String element : criteria)",
      "right" : "for (final String element : criteria)",
      "info" : "EnhancedForStatement[33231-33410]:EnhancedForStatement[33296-33475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33269-33410]:Block[33334-33475]"
    }, {
      "left" : "if (target.equals(element))",
      "right" : "if (target.equals(element))",
      "info" : "IfStatement[33287-33396]:IfStatement[33352-33461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33315-33396]:Block[33380-33461]"
    }, {
      "left" : "result = true;",
      "right" : "result = true;",
      "info" : "ExpressionStatement[33337-33351]:ExpressionStatement[33402-33416]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33372-33378]:BreakStatement[33437-33443]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33429-33443]:ReturnStatement[33494-33508]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33594-33600]:Modifier[33659-33665]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[33601-33606]:TYPE_DECLARATION_KIND[33666-33671]"
    }, {
      "left" : "DoubleMetaphoneResult",
      "right" : "DoubleMetaphoneResult",
      "info" : "SimpleName[33607-33628]:SimpleName[33672-33693]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33844-33850]:Modifier[33909-33915]"
    }, {
      "left" : "DoubleMetaphoneResult",
      "right" : "DoubleMetaphoneResult",
      "info" : "SimpleName[33851-33872]:SimpleName[33916-33937]"
    }, {
      "left" : "final int maxLength",
      "right" : "final int maxLength",
      "info" : "SingleVariableDeclaration[33873-33892]:SingleVariableDeclaration[33938-33957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33894-33945]:Block[33959-34010]"
    }, {
      "left" : "this.maxLength = maxLength;",
      "right" : "this.maxLength = maxLength;",
      "info" : "ExpressionStatement[33908-33935]:ExpressionStatement[33973-34000]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33955-33961]:Modifier[34020-34026]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33962-33966]:PrimitiveType[34027-34031]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[33967-33973]:SimpleName[34032-34038]"
    }, {
      "left" : "final char value",
      "right" : "final char value",
      "info" : "SingleVariableDeclaration[33974-33990]:SingleVariableDeclaration[34039-34055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33992-34073]:Block[34057-34138]"
    }, {
      "left" : "appendPrimary(value);",
      "right" : "appendPrimary(value);",
      "info" : "ExpressionStatement[34006-34027]:ExpressionStatement[34071-34092]"
    }, {
      "left" : "appendAlternate(value);",
      "right" : "appendAlternate(value);",
      "info" : "ExpressionStatement[34040-34063]:ExpressionStatement[34105-34128]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34083-34089]:Modifier[34148-34154]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34090-34094]:PrimitiveType[34155-34159]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[34095-34101]:SimpleName[34160-34166]"
    }, {
      "left" : "final char primary",
      "right" : "final char primary",
      "info" : "SingleVariableDeclaration[34102-34120]:SingleVariableDeclaration[34167-34185]"
    }, {
      "left" : "final char alternate",
      "right" : "final char alternate",
      "info" : "SingleVariableDeclaration[34122-34142]:SingleVariableDeclaration[34187-34207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34144-34231]:Block[34209-34296]"
    }, {
      "left" : "appendPrimary(primary);",
      "right" : "appendPrimary(primary);",
      "info" : "ExpressionStatement[34158-34181]:ExpressionStatement[34223-34246]"
    }, {
      "left" : "appendAlternate(alternate);",
      "right" : "appendAlternate(alternate);",
      "info" : "ExpressionStatement[34194-34221]:ExpressionStatement[34259-34286]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34241-34247]:Modifier[34306-34312]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34248-34252]:PrimitiveType[34313-34317]"
    }, {
      "left" : "appendPrimary",
      "right" : "appendPrimary",
      "info" : "SimpleName[34253-34266]:SimpleName[34318-34331]"
    }, {
      "left" : "final char value",
      "right" : "final char value",
      "info" : "SingleVariableDeclaration[34267-34283]:SingleVariableDeclaration[34332-34348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34285-34412]:Block[34350-34477]"
    }, {
      "left" : "if (this.primary.length() < this.maxLength)",
      "right" : "if (this.primary.length() < this.maxLength)",
      "info" : "IfStatement[34299-34402]:IfStatement[34364-34467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34343-34402]:Block[34408-34467]"
    }, {
      "left" : "this.primary.append(value);",
      "right" : "this.primary.append(value);",
      "info" : "ExpressionStatement[34361-34388]:ExpressionStatement[34426-34453]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34422-34428]:Modifier[34487-34493]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34429-34433]:PrimitiveType[34494-34498]"
    }, {
      "left" : "appendAlternate",
      "right" : "appendAlternate",
      "info" : "SimpleName[34434-34449]:SimpleName[34499-34514]"
    }, {
      "left" : "final char value",
      "right" : "final char value",
      "info" : "SingleVariableDeclaration[34450-34466]:SingleVariableDeclaration[34515-34531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34468-34599]:Block[34533-34664]"
    }, {
      "left" : "if (this.alternate.length() < this.maxLength)",
      "right" : "if (this.alternate.length() < this.maxLength)",
      "info" : "IfStatement[34482-34589]:IfStatement[34547-34654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34528-34589]:Block[34593-34654]"
    }, {
      "left" : "this.alternate.append(value);",
      "right" : "this.alternate.append(value);",
      "info" : "ExpressionStatement[34546-34575]:ExpressionStatement[34611-34640]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34609-34615]:Modifier[34674-34680]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34616-34620]:PrimitiveType[34681-34685]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[34621-34627]:SimpleName[34686-34692]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[34628-34646]:SingleVariableDeclaration[34693-34711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34648-34729]:Block[34713-34794]"
    }, {
      "left" : "appendPrimary(value);",
      "right" : "appendPrimary(value);",
      "info" : "ExpressionStatement[34662-34683]:ExpressionStatement[34727-34748]"
    }, {
      "left" : "appendAlternate(value);",
      "right" : "appendAlternate(value);",
      "info" : "ExpressionStatement[34696-34719]:ExpressionStatement[34761-34784]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34739-34745]:Modifier[34804-34810]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34746-34750]:PrimitiveType[34811-34815]"
    }, {
      "left" : "append",
      "right" : "append",
      "info" : "SimpleName[34751-34757]:SimpleName[34816-34822]"
    }, {
      "left" : "final String primary",
      "right" : "final String primary",
      "info" : "SingleVariableDeclaration[34758-34778]:SingleVariableDeclaration[34823-34843]"
    }, {
      "left" : "final String alternate",
      "right" : "final String alternate",
      "info" : "SingleVariableDeclaration[34780-34802]:SingleVariableDeclaration[34845-34867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34804-34891]:Block[34869-34956]"
    }, {
      "left" : "appendPrimary(primary);",
      "right" : "appendPrimary(primary);",
      "info" : "ExpressionStatement[34818-34841]:ExpressionStatement[34883-34906]"
    }, {
      "left" : "appendAlternate(alternate);",
      "right" : "appendAlternate(alternate);",
      "info" : "ExpressionStatement[34854-34881]:ExpressionStatement[34919-34946]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34901-34907]:Modifier[34966-34972]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34908-34912]:PrimitiveType[34973-34977]"
    }, {
      "left" : "appendPrimary",
      "right" : "appendPrimary",
      "info" : "SimpleName[34913-34926]:SimpleName[34978-34991]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[34927-34945]:SingleVariableDeclaration[34992-35010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34947-35223]:Block[35012-35288]"
    }, {
      "left" : "final int addChars = this.maxLength - this.primary.length();",
      "right" : "final int addChars = this.maxLength - this.primary.length();",
      "info" : "VariableDeclarationStatement[34961-35021]:VariableDeclarationStatement[35026-35086]"
    }, {
      "left" : "if (value.length() <= addChars)",
      "right" : "if (value.length() <= addChars)",
      "info" : "IfStatement[35034-35213]:IfStatement[35099-35278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35066-35125]:Block[35131-35190]"
    }, {
      "left" : "this.primary.append(value);",
      "right" : "this.primary.append(value);",
      "info" : "ExpressionStatement[35084-35111]:ExpressionStatement[35149-35176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35131-35213]:Block[35196-35278]"
    }, {
      "left" : "this.primary.append(value.substring(0, addChars));",
      "right" : "this.primary.append(value.substring(0, addChars));",
      "info" : "ExpressionStatement[35149-35199]:ExpressionStatement[35214-35264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35233-35239]:Modifier[35298-35304]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35240-35244]:PrimitiveType[35305-35309]"
    }, {
      "left" : "appendAlternate",
      "right" : "appendAlternate",
      "info" : "SimpleName[35245-35260]:SimpleName[35310-35325]"
    }, {
      "left" : "final String value",
      "right" : "final String value",
      "info" : "SingleVariableDeclaration[35261-35279]:SingleVariableDeclaration[35326-35344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35281-35563]:Block[35346-35628]"
    }, {
      "left" : "final int addChars = this.maxLength - this.alternate.length();",
      "right" : "final int addChars = this.maxLength - this.alternate.length();",
      "info" : "VariableDeclarationStatement[35295-35357]:VariableDeclarationStatement[35360-35422]"
    }, {
      "left" : "if (value.length() <= addChars)",
      "right" : "if (value.length() <= addChars)",
      "info" : "IfStatement[35370-35553]:IfStatement[35435-35618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35402-35463]:Block[35467-35528]"
    }, {
      "left" : "this.alternate.append(value);",
      "right" : "this.alternate.append(value);",
      "info" : "ExpressionStatement[35420-35449]:ExpressionStatement[35485-35514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35469-35553]:Block[35534-35618]"
    }, {
      "left" : "this.alternate.append(value.substring(0, addChars));",
      "right" : "this.alternate.append(value.substring(0, addChars));",
      "info" : "ExpressionStatement[35487-35539]:ExpressionStatement[35552-35604]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35573-35579]:Modifier[35638-35644]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[35580-35586]:SimpleType[35645-35651]"
    }, {
      "left" : "getPrimary",
      "right" : "getPrimary",
      "info" : "SimpleName[35587-35597]:SimpleName[35652-35662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35600-35655]:Block[35665-35720]"
    }, {
      "left" : "return this.primary.toString();",
      "right" : "return this.primary.toString();",
      "info" : "ReturnStatement[35614-35645]:ReturnStatement[35679-35710]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35665-35671]:Modifier[35730-35736]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[35672-35678]:SimpleType[35737-35743]"
    }, {
      "left" : "getAlternate",
      "right" : "getAlternate",
      "info" : "SimpleName[35679-35691]:SimpleName[35744-35756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35694-35751]:Block[35759-35816]"
    }, {
      "left" : "return this.alternate.toString();",
      "right" : "return this.alternate.toString();",
      "info" : "ReturnStatement[35708-35741]:ReturnStatement[35773-35806]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35761-35767]:Modifier[35826-35832]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35768-35775]:PrimitiveType[35833-35840]"
    }, {
      "left" : "isComplete",
      "right" : "isComplete",
      "info" : "SimpleName[35776-35786]:SimpleName[35841-35851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35789-35924]:Block[35854-35989]"
    }, {
      "left" : "return this.primary.length() >= this.maxLength &&\n                   this.alternate.length() >= this.maxLength;",
      "right" : "return this.primary.length() >= this.maxLength &&\n                   this.alternate.length() >= this.maxLength;",
      "info" : "ReturnStatement[35803-35914]:ReturnStatement[35868-35979]"
    } ]
  },
  "interFileMappings" : { }
}