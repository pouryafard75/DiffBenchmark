{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ReaderBasedJsonParser",
      "right" : "ReaderBasedJsonParser",
      "info" : "TypeDeclaration[352-71300]:TypeDeclaration[352-71888]"
    }, {
      "left" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "right" : "protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();",
      "info" : "FieldDeclaration[725-797]:FieldDeclaration[725-797]"
    }, {
      "left" : "private final static int[] _icWS = CharTypes.getInputCodeWS();",
      "right" : "private final static int[] _icWS = CharTypes.getInputCodeWS();",
      "info" : "FieldDeclaration[873-935]:FieldDeclaration[873-935]"
    }, {
      "left" : "protected Reader _reader;",
      "right" : "protected Reader _reader;",
      "info" : "FieldDeclaration[1112-1318]:FieldDeclaration[1112-1318]"
    }, {
      "left" : "protected char[] _inputBuffer;",
      "right" : "protected char[] _inputBuffer;",
      "info" : "FieldDeclaration[1324-1478]:FieldDeclaration[1324-1478]"
    }, {
      "left" : "protected ObjectCodec _objectCodec;",
      "right" : "protected ObjectCodec _objectCodec;",
      "info" : "FieldDeclaration[1649-1684]:FieldDeclaration[1649-1684]"
    }, {
      "left" : "final protected CharsToNameCanonicalizer _symbols;",
      "right" : "final protected CharsToNameCanonicalizer _symbols;",
      "info" : "FieldDeclaration[1690-1740]:FieldDeclaration[1690-1740]"
    }, {
      "left" : "final protected int _hashSeed;",
      "right" : "final protected int _hashSeed;",
      "info" : "FieldDeclaration[1750-1780]:FieldDeclaration[1750-1780]"
    }, {
      "left" : "protected boolean _tokenIncomplete = false;",
      "right" : "protected boolean _tokenIncomplete = false;",
      "info" : "FieldDeclaration[1955-2191]:FieldDeclaration[1955-2191]"
    }, {
      "left" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n            ObjectCodec codec, CharsToNameCanonicalizer st)",
      "right" : "public ReaderBasedJsonParser(IOContext ctxt, int features, Reader r,\n            ObjectCodec codec, CharsToNameCanonicalizer st)",
      "info" : "MethodDeclaration[2363-2691]:MethodDeclaration[2363-2691]"
    }, {
      "left" : "public ObjectCodec getCodec()",
      "right" : "public ObjectCodec getCodec()",
      "info" : "MethodDeclaration[2880-2960]:MethodDeclaration[2880-2960]"
    }, {
      "left" : "public void setCodec(ObjectCodec c)",
      "right" : "public void setCodec(ObjectCodec c)",
      "info" : "MethodDeclaration[2966-3049]:MethodDeclaration[2966-3049]"
    }, {
      "left" : "public int releaseBuffered(Writer w) throws IOException",
      "right" : "public int releaseBuffered(Writer w) throws IOException",
      "info" : "MethodDeclaration[3059-3383]:MethodDeclaration[3059-3383]"
    }, {
      "left" : "public Object getInputSource()",
      "right" : "public Object getInputSource()",
      "info" : "MethodDeclaration[3389-3465]:MethodDeclaration[3389-3465]"
    }, {
      "left" : "protected boolean loadMore() throws IOException",
      "right" : "protected boolean loadMore() throws IOException",
      "info" : "MethodDeclaration[3471-4158]:MethodDeclaration[3471-4158]"
    }, {
      "left" : "protected char getNextChar(String eofMsg)\n        throws IOException, JsonParseException",
      "right" : "protected char getNextChar(String eofMsg)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[4164-4442]:MethodDeclaration[4164-4442]"
    }, {
      "left" : "protected void _closeInput() throws IOException",
      "right" : "protected void _closeInput() throws IOException",
      "info" : "MethodDeclaration[4448-5113]:MethodDeclaration[4448-5113]"
    }, {
      "left" : "protected void _releaseBuffers()\n        throws IOException",
      "right" : "protected void _releaseBuffers()\n        throws IOException",
      "info" : "MethodDeclaration[5119-5642]:MethodDeclaration[5119-5642]"
    }, {
      "left" : "public String getText()\n        throws IOException, JsonParseException",
      "right" : "public String getText()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[5831-6512]:MethodDeclaration[5831-6512]"
    }, {
      "left" : "public String getValueAsString() throws IOException, JsonParseException",
      "right" : "public String getValueAsString() throws IOException, JsonParseException",
      "info" : "MethodDeclaration[6608-7022]:MethodDeclaration[6608-7022]"
    }, {
      "left" : "public String getValueAsString(String defValue) throws IOException, JsonParseException",
      "right" : "public String getValueAsString(String defValue) throws IOException, JsonParseException",
      "info" : "MethodDeclaration[7050-7483]:MethodDeclaration[7050-7483]"
    }, {
      "left" : "protected String _getText2(JsonToken t)",
      "right" : "protected String _getText2(JsonToken t)",
      "info" : "MethodDeclaration[7498-7939]:MethodDeclaration[7498-7939]"
    }, {
      "left" : "public char[] getTextCharacters()\n        throws IOException, JsonParseException",
      "right" : "public char[] getTextCharacters()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[7945-9301]:MethodDeclaration[7945-9301]"
    }, {
      "left" : "public int getTextLength()\n        throws IOException, JsonParseException",
      "right" : "public int getTextLength()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[9307-10110]:MethodDeclaration[9307-10110]"
    }, {
      "left" : "public int getTextOffset() throws IOException, JsonParseException",
      "right" : "public int getTextOffset() throws IOException, JsonParseException",
      "info" : "MethodDeclaration[10116-10822]:MethodDeclaration[10116-10822]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[10828-12188]:MethodDeclaration[10828-12188]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n        throws IOException, JsonParseException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[12198-12860]:MethodDeclaration[12198-12860]"
    }, {
      "left" : "protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer)\n            throws IOException, JsonParseException",
      "right" : "protected int _readBinary(Base64Variant b64variant, OutputStream out, byte[] buffer)\n            throws IOException, JsonParseException",
      "info" : "MethodDeclaration[12866-18034]:MethodDeclaration[12866-18034]"
    }, {
      "left" : "public JsonToken nextToken()\n        throws IOException, JsonParseException",
      "right" : "public JsonToken nextToken()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[18209-22950]:MethodDeclaration[18209-22950]"
    }, {
      "left" : "private JsonToken _nextAfterName()",
      "right" : "private JsonToken _nextAfterName()",
      "info" : "MethodDeclaration[22956-23521]:MethodDeclaration[22956-23521]"
    }, {
      "left" : "public String nextTextValue()\n        throws IOException, JsonParseException",
      "right" : "public String nextTextValue()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[23716-24781]:MethodDeclaration[23716-24781]"
    }, {
      "left" : "public int nextIntValue(int defaultValue)\n        throws IOException, JsonParseException",
      "right" : "public int nextIntValue(int defaultValue)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[24837-25745]:MethodDeclaration[24837-25745]"
    }, {
      "left" : "public long nextLongValue(long defaultValue)\n        throws IOException, JsonParseException",
      "right" : "public long nextLongValue(long defaultValue)\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[25801-26753]:MethodDeclaration[25801-26753]"
    }, {
      "left" : "public Boolean nextBooleanValue()\n        throws IOException, JsonParseException",
      "right" : "public Boolean nextBooleanValue()\n        throws IOException, JsonParseException",
      "info" : "MethodDeclaration[26809-27890]:MethodDeclaration[26809-27890]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[27900-28015]:MethodDeclaration[27900-28015]"
    }, {
      "left" : "protected JsonToken _parseNumber(int ch) throws IOException",
      "right" : "protected JsonToken _parseNumber(int ch) throws IOException",
      "info" : "MethodDeclaration[28205-33466]:MethodDeclaration[28205-33562]"
    }, {
      "left" : "private JsonToken _parseNumber2(boolean negative) throws IOException",
      "right" : "private JsonToken _parseNumber2(boolean negative) throws IOException",
      "info" : "MethodDeclaration[33472-38007]:MethodDeclaration[33568-38198]"
    }, {
      "left" : "private char _verifyNoLeadingZeroes() throws IOException",
      "right" : "private char _verifyNoLeadingZeroes() throws IOException",
      "info" : "MethodDeclaration[38013-39297]:MethodDeclaration[38204-39488]"
    }, {
      "left" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException",
      "right" : "protected JsonToken _handleInvalidNumberStart(int ch, boolean negative) throws IOException",
      "info" : "MethodDeclaration[39303-40819]:MethodDeclaration[39494-41010]"
    }, {
      "left" : "// caller had pushed it back, before calling; reset\n    \n    \n\n    protected String _parseName(int i) throws IOException",
      "right" : "protected String _parseName(int i) throws IOException",
      "info" : "MethodDeclaration[40825-42541]:MethodDeclaration[41910-43129]"
    }, {
      "left" : "private String _parseName2(int startPtr, int hash, int endChar) throws IOException",
      "right" : "private String _parseName2(int startPtr, int hash, int endChar) throws IOException",
      "info" : "MethodDeclaration[42547-44563]:MethodDeclaration[43135-45151]"
    }, {
      "left" : "protected String _handleOddName(int i) throws IOException",
      "right" : "protected String _handleOddName(int i) throws IOException",
      "info" : "MethodDeclaration[44569-46936]:MethodDeclaration[45157-47524]"
    }, {
      "left" : "protected String _parseAposName() throws IOException",
      "right" : "protected String _parseAposName() throws IOException",
      "info" : "MethodDeclaration[46942-47925]:MethodDeclaration[47530-48513]"
    }, {
      "left" : "protected JsonToken _handleOddValue(int i) throws IOException",
      "right" : "protected JsonToken _handleOddValue(int i) throws IOException",
      "info" : "MethodDeclaration[47931-50133]:MethodDeclaration[48519-50721]"
    }, {
      "left" : "protected JsonToken _handleApos() throws IOException",
      "right" : "protected JsonToken _handleApos() throws IOException",
      "info" : "MethodDeclaration[50143-51606]:MethodDeclaration[50731-52194]"
    }, {
      "left" : "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException",
      "right" : "private String _handleOddName2(int startPtr, int hash, int[] codes) throws IOException",
      "info" : "MethodDeclaration[51616-53101]:MethodDeclaration[52204-53689]"
    }, {
      "left" : "protected void _finishString() throws IOException",
      "right" : "protected void _finishString() throws IOException",
      "info" : "MethodDeclaration[53109-54292]:MethodDeclaration[53697-54880]"
    }, {
      "left" : "protected void _finishString2() throws IOException",
      "right" : "protected void _finishString2() throws IOException",
      "info" : "MethodDeclaration[54298-55740]:MethodDeclaration[54886-56328]"
    }, {
      "left" : "protected void _skipString() throws IOException",
      "right" : "protected void _skipString() throws IOException",
      "info" : "MethodDeclaration[55746-57439]:MethodDeclaration[56334-58027]"
    }, {
      "left" : "protected void _skipCR() throws IOException",
      "right" : "protected void _skipCR() throws IOException",
      "info" : "MethodDeclaration[57632-58025]:MethodDeclaration[58220-58613]"
    }, {
      "left" : "private int _skipWS() throws IOException",
      "right" : "private int _skipWS() throws IOException",
      "info" : "MethodDeclaration[58031-59028]:MethodDeclaration[58619-59616]"
    }, {
      "left" : "private int _skipWSOrEnd() throws IOException",
      "right" : "private int _skipWSOrEnd() throws IOException",
      "info" : "MethodDeclaration[59034-59996]:MethodDeclaration[59622-60584]"
    }, {
      "left" : "private void _skipComment() throws IOException",
      "right" : "private void _skipComment() throws IOException",
      "info" : "MethodDeclaration[60002-60708]:MethodDeclaration[60590-61296]"
    }, {
      "left" : "private void _skipCComment() throws IOException",
      "right" : "private void _skipCComment() throws IOException",
      "info" : "MethodDeclaration[60714-61796]:MethodDeclaration[61302-62384]"
    }, {
      "left" : "private boolean _skipYAMLComment() throws IOException",
      "right" : "private boolean _skipYAMLComment() throws IOException",
      "info" : "MethodDeclaration[61802-62000]:MethodDeclaration[62390-62588]"
    }, {
      "left" : "private void _skipLine() throws IOException",
      "right" : "private void _skipLine() throws IOException",
      "info" : "MethodDeclaration[62010-62630]:MethodDeclaration[62598-63218]"
    }, {
      "left" : "protected char _decodeEscaped() throws IOException",
      "right" : "protected char _decodeEscaped() throws IOException",
      "info" : "MethodDeclaration[62636-64102]:MethodDeclaration[63224-64690]"
    }, {
      "left" : "protected void _matchToken(String matchStr, int i) throws IOException",
      "right" : "protected void _matchToken(String matchStr, int i) throws IOException",
      "info" : "MethodDeclaration[64112-65228]:MethodDeclaration[64700-65816]"
    }, {
      "left" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "right" : "protected byte[] _decodeBase64(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[65399-70169]:MethodDeclaration[65987-70757]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart) throws IOException",
      "info" : "MethodDeclaration[70342-70499]:MethodDeclaration[70930-71087]"
    }, {
      "left" : "protected void _reportInvalidToken(String matchedPart, String msg)\n        throws IOException",
      "right" : "protected void _reportInvalidToken(String matchedPart, String msg)\n        throws IOException",
      "info" : "MethodDeclaration[70509-71298]:MethodDeclaration[71097-71886]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2496-2691]:Block[2496-2691]"
    }, {
      "left" : "super(ctxt, features);",
      "right" : "super(ctxt, features);",
      "info" : "SuperConstructorInvocation[2506-2528]:SuperConstructorInvocation[2506-2528]"
    }, {
      "left" : "_reader = r;",
      "right" : "_reader = r;",
      "info" : "ExpressionStatement[2537-2549]:ExpressionStatement[2537-2549]"
    }, {
      "left" : "_inputBuffer = ctxt.allocTokenBuffer();",
      "right" : "_inputBuffer = ctxt.allocTokenBuffer();",
      "info" : "ExpressionStatement[2558-2597]:ExpressionStatement[2558-2597]"
    }, {
      "left" : "_objectCodec = codec;",
      "right" : "_objectCodec = codec;",
      "info" : "ExpressionStatement[2606-2627]:ExpressionStatement[2606-2627]"
    }, {
      "left" : "_symbols = st;",
      "right" : "_symbols = st;",
      "info" : "ExpressionStatement[2636-2650]:ExpressionStatement[2636-2650]"
    }, {
      "left" : "_hashSeed = st.hashSeed();",
      "right" : "_hashSeed = st.hashSeed();",
      "info" : "ExpressionStatement[2659-2685]:ExpressionStatement[2659-2685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2924-2960]:Block[2924-2960]"
    }, {
      "left" : "return _objectCodec;",
      "right" : "return _objectCodec;",
      "info" : "ReturnStatement[2934-2954]:ReturnStatement[2934-2954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3016-3049]:Block[3016-3049]"
    }, {
      "left" : "_objectCodec = c;",
      "right" : "_objectCodec = c;",
      "info" : "ExpressionStatement[3026-3043]:ExpressionStatement[3026-3043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3133-3383]:Block[3133-3383]"
    }, {
      "left" : "int count = _inputEnd - _inputPtr;",
      "right" : "int count = _inputEnd - _inputPtr;",
      "info" : "VariableDeclarationStatement[3143-3177]:VariableDeclarationStatement[3143-3177]"
    }, {
      "left" : "if (count < 1)",
      "right" : "if (count < 1)",
      "info" : "IfStatement[3186-3234]:IfStatement[3186-3234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3201-3234]:Block[3201-3234]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[3215-3224]:ReturnStatement[3215-3224]"
    }, {
      "left" : "int origPtr = _inputPtr;",
      "right" : "int origPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[3284-3308]:VariableDeclarationStatement[3284-3308]"
    }, {
      "left" : "w.write(_inputBuffer, origPtr, count);",
      "right" : "w.write(_inputBuffer, origPtr, count);",
      "info" : "ExpressionStatement[3317-3355]:ExpressionStatement[3317-3355]"
    }, {
      "left" : "return count;",
      "right" : "return count;",
      "info" : "ReturnStatement[3364-3377]:ReturnStatement[3364-3377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3434-3465]:Block[3434-3465]"
    }, {
      "left" : "return _reader;",
      "right" : "return _reader;",
      "info" : "ReturnStatement[3444-3459]:ReturnStatement[3444-3459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3537-4158]:Block[3537-4158]"
    }, {
      "left" : "_currInputProcessed += _inputEnd;",
      "right" : "_currInputProcessed += _inputEnd;",
      "info" : "ExpressionStatement[3547-3580]:ExpressionStatement[3547-3580]"
    }, {
      "left" : "_currInputRowStart -= _inputEnd;",
      "right" : "_currInputRowStart -= _inputEnd;",
      "info" : "ExpressionStatement[3589-3621]:ExpressionStatement[3589-3621]"
    }, {
      "left" : "if (_reader != null)",
      "right" : "if (_reader != null)",
      "info" : "IfStatement[3631-4130]:IfStatement[3631-4130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3652-4130]:Block[3652-4130]"
    }, {
      "left" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
      "right" : "int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);",
      "info" : "VariableDeclarationStatement[3666-3729]:VariableDeclarationStatement[3666-3729]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[3742-3867]:IfStatement[3742-3867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3757-3867]:Block[3757-3867]"
    }, {
      "left" : "_inputPtr = 0;",
      "right" : "_inputPtr = 0;",
      "info" : "ExpressionStatement[3775-3789]:ExpressionStatement[3775-3789]"
    }, {
      "left" : "_inputEnd = count;",
      "right" : "_inputEnd = count;",
      "info" : "ExpressionStatement[3806-3824]:ExpressionStatement[3806-3824]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3841-3853]:ReturnStatement[3841-3853]"
    }, {
      "left" : "_closeInput();",
      "right" : "_closeInput();",
      "info" : "ExpressionStatement[3908-3922]:ExpressionStatement[3908-3922]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[3987-4120]:IfStatement[3987-4120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4003-4120]:Block[4003-4120]"
    }, {
      "left" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
      "right" : "throw new IOException(\"Reader returned 0 characters when trying to read \"+_inputEnd);",
      "info" : "ThrowStatement[4021-4106]:ThrowStatement[4021-4106]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4139-4152]:ReturnStatement[4139-4152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4257-4442]:Block[4257-4442]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[4267-4394]:IfStatement[4267-4394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4295-4394]:Block[4295-4394]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[4309-4384]:IfStatement[4309-4384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4326-4384]:Block[4326-4384]"
    }, {
      "left" : "_reportInvalidEOF(eofMsg);",
      "right" : "_reportInvalidEOF(eofMsg);",
      "info" : "ExpressionStatement[4344-4370]:ExpressionStatement[4344-4370]"
    }, {
      "left" : "return _inputBuffer[_inputPtr++];",
      "right" : "return _inputBuffer[_inputPtr++];",
      "info" : "ReturnStatement[4403-4436]:ReturnStatement[4403-4436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4514-5113]:Block[4514-5113]"
    }, {
      "left" : "if (_reader != null)",
      "right" : "if (_reader != null)",
      "info" : "IfStatement[4910-5107]:IfStatement[4910-5107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4931-5107]:Block[4931-5107]"
    }, {
      "left" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "right" : "if (_ioContext.isResourceManaged() || isEnabled(Feature.AUTO_CLOSE_SOURCE))",
      "info" : "IfStatement[4945-5069]:IfStatement[4945-5069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5021-5069]:Block[5021-5069]"
    }, {
      "left" : "_reader.close();",
      "right" : "_reader.close();",
      "info" : "ExpressionStatement[5039-5055]:ExpressionStatement[5039-5055]"
    }, {
      "left" : "_reader = null;",
      "right" : "_reader = null;",
      "info" : "ExpressionStatement[5082-5097]:ExpressionStatement[5082-5097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5449-5642]:Block[5449-5642]"
    }, {
      "left" : "super._releaseBuffers();",
      "right" : "super._releaseBuffers();",
      "info" : "ExpressionStatement[5459-5483]:ExpressionStatement[5459-5483]"
    }, {
      "left" : "char[] buf = _inputBuffer;",
      "right" : "char[] buf = _inputBuffer;",
      "info" : "VariableDeclarationStatement[5492-5518]:VariableDeclarationStatement[5492-5518]"
    }, {
      "left" : "if (buf != null)",
      "right" : "if (buf != null)",
      "info" : "IfStatement[5527-5636]:IfStatement[5527-5636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5544-5636]:Block[5544-5636]"
    }, {
      "left" : "_inputBuffer = null;",
      "right" : "_inputBuffer = null;",
      "info" : "ExpressionStatement[5558-5578]:ExpressionStatement[5558-5578]"
    }, {
      "left" : "_ioContext.releaseTokenBuffer(buf);",
      "right" : "_ioContext.releaseTokenBuffer(buf);",
      "info" : "ExpressionStatement[5591-5626]:ExpressionStatement[5591-5626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6179-6512]:Block[6179-6512]"
    }, {
      "left" : "JsonToken t = _currToken;",
      "right" : "JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[6189-6214]:VariableDeclarationStatement[6189-6214]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[6223-6477]:IfStatement[6223-6477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6256-6477]:Block[6256-6477]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[6270-6416]:IfStatement[6270-6416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6292-6416]:Block[6292-6416]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[6310-6335]:ExpressionStatement[6310-6335]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[6352-6368]:ExpressionStatement[6352-6368]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[6429-6467]:ReturnStatement[6429-6467]"
    }, {
      "left" : "return _getText2(t);",
      "right" : "return _getText2(t);",
      "info" : "ReturnStatement[6486-6506]:ReturnStatement[6486-6506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6698-7022]:Block[6698-7022]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[6708-6971]:IfStatement[6708-6971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6750-6971]:Block[6750-6971]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[6764-6910]:IfStatement[6764-6910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6786-6910]:Block[6786-6910]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[6804-6829]:ExpressionStatement[6804-6829]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[6846-6862]:ExpressionStatement[6846-6862]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[6923-6961]:ReturnStatement[6923-6961]"
    }, {
      "left" : "return super.getValueAsString(null);",
      "right" : "return super.getValueAsString(null);",
      "info" : "ReturnStatement[6980-7016]:ReturnStatement[6980-7016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7155-7483]:Block[7155-7483]"
    }, {
      "left" : "if (_currToken == JsonToken.VALUE_STRING)",
      "right" : "if (_currToken == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[7165-7428]:IfStatement[7165-7428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7207-7428]:Block[7207-7428]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[7221-7367]:IfStatement[7221-7367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7243-7367]:Block[7243-7367]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[7261-7286]:ExpressionStatement[7261-7286]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[7303-7319]:ExpressionStatement[7303-7319]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[7380-7418]:ReturnStatement[7380-7418]"
    }, {
      "left" : "return super.getValueAsString(defValue);",
      "right" : "return super.getValueAsString(defValue);",
      "info" : "ReturnStatement[7437-7477]:ReturnStatement[7437-7477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7542-7939]:Block[7542-7939]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[7552-7603]:IfStatement[7552-7603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7567-7603]:Block[7567-7603]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7581-7593]:ReturnStatement[7581-7593]"
    }, {
      "left" : "switch (t) {\n        case FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case VALUE_STRING:\n            // fall through\n        case VALUE_NUMBER_INT:\n        case VALUE_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
      "right" : "switch (t) {\n        case FIELD_NAME:\n            return _parsingContext.getCurrentName();\n\n        case VALUE_STRING:\n            // fall through\n        case VALUE_NUMBER_INT:\n        case VALUE_NUMBER_FLOAT:\n            return _textBuffer.contentsAsString();\n        default:\n            return t.asString();\n        }",
      "info" : "SwitchStatement[7612-7933]:SwitchStatement[7612-7933]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[7633-7649]:SwitchCase[7633-7649]"
    }, {
      "left" : "return _parsingContext.getCurrentName();",
      "right" : "return _parsingContext.getCurrentName();",
      "info" : "ReturnStatement[7662-7702]:ReturnStatement[7662-7702]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[7712-7730]:SwitchCase[7712-7730]"
    }, {
      "left" : "case VALUE_NUMBER_INT:",
      "right" : "case VALUE_NUMBER_INT:",
      "info" : "SwitchCase[7767-7789]:SwitchCase[7767-7789]"
    }, {
      "left" : "case VALUE_NUMBER_FLOAT:",
      "right" : "case VALUE_NUMBER_FLOAT:",
      "info" : "SwitchCase[7798-7822]:SwitchCase[7798-7822]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[7835-7873]:ReturnStatement[7835-7873]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7882-7890]:SwitchCase[7882-7890]"
    }, {
      "left" : "return t.asString();",
      "right" : "return t.asString();",
      "info" : "ReturnStatement[7903-7923]:ReturnStatement[7903-7923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8044-9301]:Block[8044-9301]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[8054-9274]:IfStatement[8054-9274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8078-9274]:Block[8078-9274]"
    }, {
      "left" : "switch (_currToken) {\n                \n            case FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "right" : "switch (_currToken) {\n                \n            case FIELD_NAME:\n                if (!_nameCopied) {\n                    String name = _parsingContext.getCurrentName();\n                    int nameLen = name.length();\n                    if (_nameCopyBuffer == null) {\n                        _nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);\n                    } else if (_nameCopyBuffer.length < nameLen) {\n                        _nameCopyBuffer = new char[nameLen];\n                    }\n                    name.getChars(0, nameLen, _nameCopyBuffer, 0);\n                    _nameCopied = true;\n                }\n                return _nameCopyBuffer;\n    \n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.getTextBuffer();\n                \n            default:\n                return _currToken.asCharArray();\n            }",
      "info" : "SwitchStatement[8127-9264]:SwitchStatement[8127-9264]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[8178-8194]:SwitchCase[8178-8194]"
    }, {
      "left" : "if (!_nameCopied)",
      "right" : "if (!_nameCopied)",
      "info" : "IfStatement[8211-8756]:IfStatement[8211-8756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8229-8756]:Block[8229-8756]"
    }, {
      "left" : "String name = _parsingContext.getCurrentName();",
      "right" : "String name = _parsingContext.getCurrentName();",
      "info" : "VariableDeclarationStatement[8251-8298]:VariableDeclarationStatement[8251-8298]"
    }, {
      "left" : "int nameLen = name.length();",
      "right" : "int nameLen = name.length();",
      "info" : "VariableDeclarationStatement[8319-8347]:VariableDeclarationStatement[8319-8347]"
    }, {
      "left" : "if (_nameCopyBuffer == null)",
      "right" : "if (_nameCopyBuffer == null)",
      "info" : "IfStatement[8368-8631]:IfStatement[8368-8631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8397-8503]:Block[8397-8503]"
    }, {
      "left" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "right" : "_nameCopyBuffer = _ioContext.allocNameCopyBuffer(nameLen);",
      "info" : "ExpressionStatement[8423-8481]:ExpressionStatement[8423-8481]"
    }, {
      "left" : "if (_nameCopyBuffer.length < nameLen)",
      "right" : "if (_nameCopyBuffer.length < nameLen)",
      "info" : "IfStatement[8509-8631]:IfStatement[8509-8631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8547-8631]:Block[8547-8631]"
    }, {
      "left" : "_nameCopyBuffer = new char[nameLen];",
      "right" : "_nameCopyBuffer = new char[nameLen];",
      "info" : "ExpressionStatement[8573-8609]:ExpressionStatement[8573-8609]"
    }, {
      "left" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "right" : "name.getChars(0, nameLen, _nameCopyBuffer, 0);",
      "info" : "ExpressionStatement[8652-8698]:ExpressionStatement[8652-8698]"
    }, {
      "left" : "_nameCopied = true;",
      "right" : "_nameCopied = true;",
      "info" : "ExpressionStatement[8719-8738]:ExpressionStatement[8719-8738]"
    }, {
      "left" : "return _nameCopyBuffer;",
      "right" : "return _nameCopyBuffer;",
      "info" : "ReturnStatement[8773-8796]:ReturnStatement[8773-8796]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[8814-8832]:SwitchCase[8814-8832]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[8849-9007]:IfStatement[8849-9007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8871-9007]:Block[8871-9007]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[8893-8918]:ExpressionStatement[8893-8918]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[8939-8955]:ExpressionStatement[8939-8955]"
    }, {
      "left" : "case VALUE_NUMBER_INT:",
      "right" : "case VALUE_NUMBER_INT:",
      "info" : "SwitchCase[9052-9074]:SwitchCase[9052-9074]"
    }, {
      "left" : "case VALUE_NUMBER_FLOAT:",
      "right" : "case VALUE_NUMBER_FLOAT:",
      "info" : "SwitchCase[9087-9111]:SwitchCase[9087-9111]"
    }, {
      "left" : "return _textBuffer.getTextBuffer();",
      "right" : "return _textBuffer.getTextBuffer();",
      "info" : "ReturnStatement[9128-9163]:ReturnStatement[9128-9163]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9193-9201]:SwitchCase[9193-9201]"
    }, {
      "left" : "return _currToken.asCharArray();",
      "right" : "return _currToken.asCharArray();",
      "info" : "ReturnStatement[9218-9250]:ReturnStatement[9218-9250]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[9283-9295]:ReturnStatement[9283-9295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9399-10110]:Block[9399-10110]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[9409-10086]:IfStatement[9409-10086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9433-10086]:Block[9433-10086]"
    }, {
      "left" : "switch (_currToken) {\n                \n            case FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "right" : "switch (_currToken) {\n                \n            case FIELD_NAME:\n                return _parsingContext.getCurrentName().length();\n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.size();\n                \n            default:\n                return _currToken.asCharArray().length;\n            }",
      "info" : "SwitchStatement[9482-10076]:SwitchStatement[9482-10076]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[9533-9549]:SwitchCase[9533-9549]"
    }, {
      "left" : "return _parsingContext.getCurrentName().length();",
      "right" : "return _parsingContext.getCurrentName().length();",
      "info" : "ReturnStatement[9566-9615]:ReturnStatement[9566-9615]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[9628-9646]:SwitchCase[9628-9646]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[9663-9821]:IfStatement[9663-9821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9685-9821]:Block[9685-9821]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[9707-9732]:ExpressionStatement[9707-9732]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[9753-9769]:ExpressionStatement[9753-9769]"
    }, {
      "left" : "case VALUE_NUMBER_INT:",
      "right" : "case VALUE_NUMBER_INT:",
      "info" : "SwitchCase[9866-9888]:SwitchCase[9866-9888]"
    }, {
      "left" : "case VALUE_NUMBER_FLOAT:",
      "right" : "case VALUE_NUMBER_FLOAT:",
      "info" : "SwitchCase[9901-9925]:SwitchCase[9901-9925]"
    }, {
      "left" : "return _textBuffer.size();",
      "right" : "return _textBuffer.size();",
      "info" : "ReturnStatement[9942-9968]:ReturnStatement[9942-9968]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9998-10006]:SwitchCase[9998-10006]"
    }, {
      "left" : "return _currToken.asCharArray().length;",
      "right" : "return _currToken.asCharArray().length;",
      "info" : "ReturnStatement[10023-10062]:ReturnStatement[10023-10062]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[10095-10104]:ReturnStatement[10095-10104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10200-10822]:Block[10200-10822]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[10277-10798]:IfStatement[10277-10798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10301-10798]:Block[10301-10798]"
    }, {
      "left" : "switch (_currToken) {\n            case FIELD_NAME:\n                return 0;\n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "right" : "switch (_currToken) {\n            case FIELD_NAME:\n                return 0;\n            case VALUE_STRING:\n                if (_tokenIncomplete) {\n                    _tokenIncomplete = false;\n                    _finishString(); // only strings can be incomplete\n                }\n                // fall through\n            case VALUE_NUMBER_INT:\n            case VALUE_NUMBER_FLOAT:\n                return _textBuffer.getTextOffset();\n            default:\n            }",
      "info" : "SwitchStatement[10315-10788]:SwitchStatement[10315-10788]"
    }, {
      "left" : "case FIELD_NAME:",
      "right" : "case FIELD_NAME:",
      "info" : "SwitchCase[10349-10365]:SwitchCase[10349-10365]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[10382-10391]:ReturnStatement[10382-10391]"
    }, {
      "left" : "case VALUE_STRING:",
      "right" : "case VALUE_STRING:",
      "info" : "SwitchCase[10404-10422]:SwitchCase[10404-10422]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[10439-10597]:IfStatement[10439-10597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10461-10597]:Block[10461-10597]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[10483-10508]:ExpressionStatement[10483-10508]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[10529-10545]:ExpressionStatement[10529-10545]"
    }, {
      "left" : "case VALUE_NUMBER_INT:",
      "right" : "case VALUE_NUMBER_INT:",
      "info" : "SwitchCase[10642-10664]:SwitchCase[10642-10664]"
    }, {
      "left" : "case VALUE_NUMBER_FLOAT:",
      "right" : "case VALUE_NUMBER_FLOAT:",
      "info" : "SwitchCase[10677-10701]:SwitchCase[10677-10701]"
    }, {
      "left" : "return _textBuffer.getTextOffset();",
      "right" : "return _textBuffer.getTextOffset();",
      "info" : "ReturnStatement[10718-10753]:ReturnStatement[10718-10753]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[10766-10774]:SwitchCase[10766-10774]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[10807-10816]:ReturnStatement[10807-10816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10948-12188]:Block[10948-12188]"
    }, {
      "left" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "right" : "if (_currToken != JsonToken.VALUE_STRING &&\n                (_currToken != JsonToken.VALUE_EMBEDDED_OBJECT || _binaryValue == null))",
      "info" : "IfStatement[10958-11230]:IfStatement[10958-11230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11091-11230]:Block[11091-11230]"
    }, {
      "left" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "right" : "_reportError(\"Current token (\"+_currToken+\") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary\");",
      "info" : "ExpressionStatement[11105-11220]:ExpressionStatement[11105-11220]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[11345-12153]:IfStatement[11345-12153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11367-11814]:Block[11367-11814]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11381-11629]:TryStatement[11381-11629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11385-11458]:Block[11385-11458]"
    }, {
      "left" : "_binaryValue = _decodeBase64(b64variant);",
      "right" : "_binaryValue = _decodeBase64(b64variant);",
      "info" : "ExpressionStatement[11403-11444]:ExpressionStatement[11403-11444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11496-11629]:Block[11496-11629]"
    }, {
      "left" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "right" : "throw _constructError(\"Failed to decode VALUE_STRING as base64 (\"+b64variant+\"): \"+iae.getMessage());",
      "info" : "ThrowStatement[11514-11615]:ThrowStatement[11514-11615]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[11779-11804]:ExpressionStatement[11779-11804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11820-12153]:Block[11820-12153]"
    }, {
      "left" : "if (_binaryValue == null)",
      "right" : "if (_binaryValue == null)",
      "info" : "IfStatement[11872-12143]:IfStatement[11872-12143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11898-12143]:Block[11898-12143]"
    }, {
      "left" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "@SuppressWarnings(\"resource\")\n                ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[11916-12012]:VariableDeclarationStatement[11916-12012]"
    }, {
      "left" : "_decodeBase64(getText(), builder, b64variant);",
      "right" : "_decodeBase64(getText(), builder, b64variant);",
      "info" : "ExpressionStatement[12029-12075]:ExpressionStatement[12029-12075]"
    }, {
      "left" : "_binaryValue = builder.toByteArray();",
      "right" : "_binaryValue = builder.toByteArray();",
      "info" : "ExpressionStatement[12092-12129]:ExpressionStatement[12092-12129]"
    }, {
      "left" : "return _binaryValue;",
      "right" : "return _binaryValue;",
      "info" : "ReturnStatement[12162-12182]:ReturnStatement[12162-12182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12334-12860]:Block[12334-12860]"
    }, {
      "left" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "right" : "if (!_tokenIncomplete || _currToken != JsonToken.VALUE_STRING)",
      "info" : "IfStatement[12420-12600]:IfStatement[12420-12600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12483-12600]:Block[12483-12600]"
    }, {
      "left" : "byte[] b = getBinaryValue(b64variant);",
      "right" : "byte[] b = getBinaryValue(b64variant);",
      "info" : "VariableDeclarationStatement[12497-12535]:VariableDeclarationStatement[12497-12535]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[12548-12561]:ExpressionStatement[12548-12561]"
    }, {
      "left" : "return b.length;",
      "right" : "return b.length;",
      "info" : "ReturnStatement[12574-12590]:ReturnStatement[12574-12590]"
    }, {
      "left" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "right" : "byte[] buf = _ioContext.allocBase64Buffer();",
      "info" : "VariableDeclarationStatement[12663-12707]:VariableDeclarationStatement[12663-12707]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12716-12854]:TryStatement[12716-12854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12720-12785]:Block[12720-12785]"
    }, {
      "left" : "return _readBinary(b64variant, out, buf);",
      "right" : "return _readBinary(b64variant, out, buf);",
      "info" : "ReturnStatement[12734-12775]:ReturnStatement[12734-12775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12794-12854]:Block[12794-12854]"
    }, {
      "left" : "_ioContext.releaseBase64Buffer(buf);",
      "right" : "_ioContext.releaseBase64Buffer(buf);",
      "info" : "ExpressionStatement[12808-12844]:ExpressionStatement[12808-12844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13006-18034]:Block[13006-18034]"
    }, {
      "left" : "int outputPtr = 0;",
      "right" : "int outputPtr = 0;",
      "info" : "VariableDeclarationStatement[13016-13034]:VariableDeclarationStatement[13016-13034]"
    }, {
      "left" : "final int outputEnd = buffer.length - 3;",
      "right" : "final int outputEnd = buffer.length - 3;",
      "info" : "VariableDeclarationStatement[13043-13083]:VariableDeclarationStatement[13043-13083]"
    }, {
      "left" : "int outputCount = 0;",
      "right" : "int outputCount = 0;",
      "info" : "VariableDeclarationStatement[13092-13112]:VariableDeclarationStatement[13092-13112]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[13122-17844]:WhileStatement[13122-17844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13135-17844]:Block[13135-17844]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[13212-13220]:VariableDeclarationStatement[13212-13220]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[13233-13430]:DoStatement[13233-13430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13236-13405]:Block[13236-13405]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[13254-13343]:IfStatement[13254-13343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13282-13343]:Block[13282-13343]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[13304-13325]:ExpressionStatement[13304-13325]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[13360-13391]:ExpressionStatement[13360-13391]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[13443-13486]:VariableDeclarationStatement[13443-13486]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[13499-13809]:IfStatement[13499-13809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13513-13809]:Block[13513-13809]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[13568-13629]:IfStatement[13568-13629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13583-13629]:Block[13583-13629]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13605-13611]:BreakStatement[13605-13611]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[13646-13692]:ExpressionStatement[13646-13692]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[13709-13795]:IfStatement[13709-13795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13723-13795]:Block[13723-13795]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[13768-13777]:ContinueStatement[13768-13777]"
    }, {
      "left" : "if (outputPtr > outputEnd)",
      "right" : "if (outputPtr > outputEnd)",
      "info" : "IfStatement[13865-14029]:IfStatement[13865-14029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13892-14029]:Block[13892-14029]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[13910-13935]:ExpressionStatement[13910-13935]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[13952-13984]:ExpressionStatement[13952-13984]"
    }, {
      "left" : "outputPtr = 0;",
      "right" : "outputPtr = 0;",
      "info" : "ExpressionStatement[14001-14015]:ExpressionStatement[14001-14015]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[14043-14066]:VariableDeclarationStatement[14043-14066]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[14151-14232]:IfStatement[14151-14232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14179-14232]:Block[14179-14232]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[14197-14218]:ExpressionStatement[14197-14218]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[14245-14276]:ExpressionStatement[14245-14276]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[14289-14328]:ExpressionStatement[14289-14328]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[14341-14433]:IfStatement[14341-14433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14355-14433]:Block[14355-14433]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[14373-14419]:ExpressionStatement[14373-14419]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[14446-14486]:ExpressionStatement[14446-14486]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[14561-14642]:IfStatement[14561-14642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14589-14642]:Block[14589-14642]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[14607-14628]:ExpressionStatement[14607-14628]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[14655-14686]:ExpressionStatement[14655-14686]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[14699-14738]:ExpressionStatement[14699-14738]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[14809-16011]:IfStatement[14809-16011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14823-16011]:Block[14823-16011]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[14841-15286]:IfStatement[14841-15286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14889-15286]:Block[14889-15286]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[14994-15201]:IfStatement[14994-15201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15038-15201]:Block[15038-15201]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[15064-15082]:ExpressionStatement[15064-15082]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[15107-15148]:ExpressionStatement[15107-15148]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15173-15179]:BreakStatement[15173-15179]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[15222-15268]:ExpressionStatement[15222-15268]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[15303-15997]:IfStatement[15303-15997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15351-15997]:Block[15351-15997]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[15417-15514]:IfStatement[15417-15514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15445-15514]:Block[15445-15514]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[15471-15492]:ExpressionStatement[15471-15492]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[15535-15566]:ExpressionStatement[15535-15566]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[15587-15785]:IfStatement[15587-15785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15624-15785]:Block[15624-15785]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[15650-15763]:ThrowStatement[15650-15763]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[15869-15887]:ExpressionStatement[15869-15887]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[15908-15949]:ExpressionStatement[15908-15949]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15970-15979]:ContinueStatement[15970-15979]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[16058-16098]:ExpressionStatement[16058-16098]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[16182-16263]:IfStatement[16182-16263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16210-16263]:Block[16210-16263]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[16228-16249]:ExpressionStatement[16228-16249]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[16276-16307]:ExpressionStatement[16276-16307]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[16320-16359]:ExpressionStatement[16320-16359]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[16372-17550]:IfStatement[16372-17550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16386-17550]:Block[16386-17550]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[16404-16922]:IfStatement[16404-16922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16452-16922]:Block[16452-16922]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[16557-16837]:IfStatement[16557-16837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16601-16837]:Block[16601-16837]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[16627-16645]:ExpressionStatement[16627-16645]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[16670-16718]:ExpressionStatement[16670-16718]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[16743-16784]:ExpressionStatement[16743-16784]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16809-16815]:BreakStatement[16809-16815]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[16858-16904]:ExpressionStatement[16858-16904]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[16939-17536]:IfStatement[16939-17536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16987-17536]:Block[16987-17536]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[17339-17357]:ExpressionStatement[17339-17357]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[17378-17426]:ExpressionStatement[17378-17426]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[17447-17488]:ExpressionStatement[17447-17488]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[17509-17518]:ContinueStatement[17509-17518]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[17617-17657]:ExpressionStatement[17617-17657]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 16);",
      "info" : "ExpressionStatement[17670-17719]:ExpressionStatement[17670-17719]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "right" : "buffer[outputPtr++] = (byte) (decodedData >> 8);",
      "info" : "ExpressionStatement[17732-17780]:ExpressionStatement[17732-17780]"
    }, {
      "left" : "buffer[outputPtr++] = (byte) decodedData;",
      "right" : "buffer[outputPtr++] = (byte) decodedData;",
      "info" : "ExpressionStatement[17793-17834]:ExpressionStatement[17793-17834]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[17853-17878]:ExpressionStatement[17853-17878]"
    }, {
      "left" : "if (outputPtr > 0)",
      "right" : "if (outputPtr > 0)",
      "info" : "IfStatement[17887-18000]:IfStatement[17887-18000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17906-18000]:Block[17906-18000]"
    }, {
      "left" : "outputCount += outputPtr;",
      "right" : "outputCount += outputPtr;",
      "info" : "ExpressionStatement[17920-17945]:ExpressionStatement[17920-17945]"
    }, {
      "left" : "out.write(buffer, 0, outputPtr);",
      "right" : "out.write(buffer, 0, outputPtr);",
      "info" : "ExpressionStatement[17958-17990]:ExpressionStatement[17958-17990]"
    }, {
      "left" : "return outputCount;",
      "right" : "return outputCount;",
      "info" : "ReturnStatement[18009-18028]:ReturnStatement[18009-18028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18418-22950]:Block[18418-22950]"
    }, {
      "left" : "_numTypesValid = NR_UNKNOWN;",
      "right" : "_numTypesValid = NR_UNKNOWN;",
      "info" : "ExpressionStatement[18428-18456]:ExpressionStatement[18428-18456]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[18679-18767]:IfStatement[18679-18767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18719-18767]:Block[18719-18767]"
    }, {
      "left" : "return _nextAfterName();",
      "right" : "return _nextAfterName();",
      "info" : "ReturnStatement[18733-18757]:ReturnStatement[18733-18757]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[18776-18867]:IfStatement[18776-18867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18798-18867]:Block[18798-18867]"
    }, {
      "left" : "_skipString();",
      "right" : "_skipString();",
      "info" : "ExpressionStatement[18812-18826]:ExpressionStatement[18812-18826]"
    }, {
      "left" : "int i = _skipWSOrEnd();",
      "right" : "int i = _skipWSOrEnd();",
      "info" : "VariableDeclarationStatement[18876-18899]:VariableDeclarationStatement[18876-18899]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[18908-19172]:IfStatement[18908-19172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18919-19172]:Block[18919-19172]"
    }, {
      "left" : "close();",
      "right" : "close();",
      "info" : "ExpressionStatement[19114-19122]:ExpressionStatement[19114-19122]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[19135-19162]:ReturnStatement[19135-19162]"
    }, {
      "left" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "right" : "_tokenInputTotal = _currInputProcessed + _inputPtr - 1;",
      "info" : "ExpressionStatement[19312-19367]:ExpressionStatement[19312-19367]"
    }, {
      "left" : "_tokenInputRow = _currInputRow;",
      "right" : "_tokenInputRow = _currInputRow;",
      "info" : "ExpressionStatement[19376-19407]:ExpressionStatement[19376-19407]"
    }, {
      "left" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "right" : "_tokenInputCol = _inputPtr - _currInputRowStart - 1;",
      "info" : "ExpressionStatement[19416-19468]:ExpressionStatement[19416-19468]"
    }, {
      "left" : "_binaryValue = null;",
      "right" : "_binaryValue = null;",
      "info" : "ExpressionStatement[19529-19549]:ExpressionStatement[19529-19549]"
    }, {
      "left" : "if (i == INT_RBRACKET)",
      "right" : "if (i == INT_RBRACKET)",
      "info" : "IfStatement[19585-19845]:IfStatement[19585-19845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19608-19845]:Block[19608-19845]"
    }, {
      "left" : "if (!_parsingContext.inArray())",
      "right" : "if (!_parsingContext.inArray())",
      "info" : "IfStatement[19622-19721]:IfStatement[19622-19721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19654-19721]:Block[19654-19721]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, '}');",
      "right" : "_reportMismatchedEndMarker(i, '}');",
      "info" : "ExpressionStatement[19672-19707]:ExpressionStatement[19672-19707]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[19734-19780]:ExpressionStatement[19734-19780]"
    }, {
      "left" : "return (_currToken = JsonToken.END_ARRAY);",
      "right" : "return (_currToken = JsonToken.END_ARRAY);",
      "info" : "ReturnStatement[19793-19835]:ReturnStatement[19793-19835]"
    }, {
      "left" : "if (i == INT_RCURLY)",
      "right" : "if (i == INT_RCURLY)",
      "info" : "IfStatement[19854-20114]:IfStatement[19854-20114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19875-20114]:Block[19875-20114]"
    }, {
      "left" : "if (!_parsingContext.inObject())",
      "right" : "if (!_parsingContext.inObject())",
      "info" : "IfStatement[19889-19989]:IfStatement[19889-19989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19922-19989]:Block[19922-19989]"
    }, {
      "left" : "_reportMismatchedEndMarker(i, ']');",
      "right" : "_reportMismatchedEndMarker(i, ']');",
      "info" : "ExpressionStatement[19940-19975]:ExpressionStatement[19940-19975]"
    }, {
      "left" : "_parsingContext = _parsingContext.getParent();",
      "right" : "_parsingContext = _parsingContext.getParent();",
      "info" : "ExpressionStatement[20002-20048]:ExpressionStatement[20002-20048]"
    }, {
      "left" : "return (_currToken = JsonToken.END_OBJECT);",
      "right" : "return (_currToken = JsonToken.END_OBJECT);",
      "info" : "ReturnStatement[20061-20104]:ReturnStatement[20061-20104]"
    }, {
      "left" : "if (_parsingContext.expectComma())",
      "right" : "if (_parsingContext.expectComma())",
      "info" : "IfStatement[20168-20408]:IfStatement[20168-20408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20203-20408]:Block[20203-20408]"
    }, {
      "left" : "if (i != INT_COMMA)",
      "right" : "if (i != INT_COMMA)",
      "info" : "IfStatement[20217-20371]:IfStatement[20217-20371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20237-20371]:Block[20237-20371]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting comma to separate \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ExpressionStatement[20255-20357]:ExpressionStatement[20255-20357]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[20384-20398]:ExpressionStatement[20384-20398]"
    }, {
      "left" : "boolean inObject = _parsingContext.inObject();",
      "right" : "boolean inObject = _parsingContext.inObject();",
      "info" : "VariableDeclarationStatement[20590-20636]:VariableDeclarationStatement[20590-20636]"
    }, {
      "left" : "if (inObject)",
      "right" : "if (inObject)",
      "info" : "IfStatement[20645-21050]:IfStatement[20645-21050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20659-21050]:Block[20659-21050]"
    }, {
      "left" : "String name = _parseName(i);",
      "right" : "String name = _parseName(i);",
      "info" : "VariableDeclarationStatement[20713-20741]:VariableDeclarationStatement[20713-20741]"
    }, {
      "left" : "_parsingContext.setCurrentName(name);",
      "right" : "_parsingContext.setCurrentName(name);",
      "info" : "ExpressionStatement[20754-20791]:ExpressionStatement[20754-20791]"
    }, {
      "left" : "_currToken = JsonToken.FIELD_NAME;",
      "right" : "_currToken = JsonToken.FIELD_NAME;",
      "info" : "ExpressionStatement[20804-20838]:ExpressionStatement[20804-20838]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[20851-20865]:ExpressionStatement[20851-20865]"
    }, {
      "left" : "if (i != INT_COLON)",
      "right" : "if (i != INT_COLON)",
      "info" : "IfStatement[20878-21013]:IfStatement[20878-21013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20898-21013]:Block[20898-21013]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting a colon to separate field name and value\");",
      "info" : "ExpressionStatement[20916-20999]:ExpressionStatement[20916-20999]"
    }, {
      "left" : "i = _skipWS();",
      "right" : "i = _skipWS();",
      "info" : "ExpressionStatement[21026-21040]:ExpressionStatement[21026-21040]"
    }, {
      "left" : "JsonToken t;",
      "right" : "JsonToken t;",
      "info" : "VariableDeclarationStatement[21112-21124]:VariableDeclarationStatement[21112-21124]"
    }, {
      "left" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "right" : "switch (i) {\n        case '\"':\n            _tokenIncomplete = true;\n            t = JsonToken.VALUE_STRING;\n            break;\n        case '[':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_ARRAY;\n            break;\n        case '{':\n            if (!inObject) {\n                _parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);\n            }\n            t = JsonToken.START_OBJECT;\n            break;\n        case ']':\n        case '}':\n            // Error: neither is valid at this point; valid closers have\n            // been handled earlier\n            _reportUnexpectedChar(i, \"expected a value\");\n        case 't':\n            _matchToken(\"true\", 1);\n            t = JsonToken.VALUE_TRUE;\n            break;\n        case 'f':\n            _matchToken(\"false\", 1);\n            t = JsonToken.VALUE_FALSE;\n            break;\n        case 'n':\n            _matchToken(\"null\", 1);\n            t = JsonToken.VALUE_NULL;\n            break;\n\n        case '-':\n            /* Should we have separate handling for plus? Although\n             * it is not allowed per se, it may be erroneously used,\n             * and could be indicate by a more specific error message.\n             */\n        case '0':\n        case '1':\n        case '2':\n        case '3':\n        case '4':\n        case '5':\n        case '6':\n        case '7':\n        case '8':\n        case '9':\n            t = _parseNumber(i);\n            break;\n        default:\n            t = _handleOddValue(i);\n            break;\n        }",
      "info" : "SwitchStatement[21134-22808]:SwitchStatement[21134-22808]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[21155-21164]:SwitchCase[21155-21164]"
    }, {
      "left" : "_tokenIncomplete = true;",
      "right" : "_tokenIncomplete = true;",
      "info" : "ExpressionStatement[21177-21201]:ExpressionStatement[21177-21201]"
    }, {
      "left" : "t = JsonToken.VALUE_STRING;",
      "right" : "t = JsonToken.VALUE_STRING;",
      "info" : "ExpressionStatement[21214-21241]:ExpressionStatement[21214-21241]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21254-21260]:BreakStatement[21254-21260]"
    }, {
      "left" : "case '[':",
      "right" : "case '[':",
      "info" : "SwitchCase[21269-21278]:SwitchCase[21269-21278]"
    }, {
      "left" : "if (!inObject)",
      "right" : "if (!inObject)",
      "info" : "IfStatement[21291-21428]:IfStatement[21291-21428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21306-21428]:Block[21306-21428]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[21324-21414]:ExpressionStatement[21324-21414]"
    }, {
      "left" : "t = JsonToken.START_ARRAY;",
      "right" : "t = JsonToken.START_ARRAY;",
      "info" : "ExpressionStatement[21441-21467]:ExpressionStatement[21441-21467]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21480-21486]:BreakStatement[21480-21486]"
    }, {
      "left" : "case '{':",
      "right" : "case '{':",
      "info" : "SwitchCase[21495-21504]:SwitchCase[21495-21504]"
    }, {
      "left" : "if (!inObject)",
      "right" : "if (!inObject)",
      "info" : "IfStatement[21517-21655]:IfStatement[21517-21655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21532-21655]:Block[21532-21655]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[21550-21641]:ExpressionStatement[21550-21641]"
    }, {
      "left" : "t = JsonToken.START_OBJECT;",
      "right" : "t = JsonToken.START_OBJECT;",
      "info" : "ExpressionStatement[21668-21695]:ExpressionStatement[21668-21695]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21708-21714]:BreakStatement[21708-21714]"
    }, {
      "left" : "case ']':",
      "right" : "case ']':",
      "info" : "SwitchCase[21723-21732]:SwitchCase[21723-21732]"
    }, {
      "left" : "case '}':",
      "right" : "case '}':",
      "info" : "SwitchCase[21741-21750]:SwitchCase[21741-21750]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a value\");",
      "right" : "_reportUnexpectedChar(i, \"expected a value\");",
      "info" : "ExpressionStatement[21872-21917]:ExpressionStatement[21872-21917]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[21926-21935]:SwitchCase[21926-21935]"
    }, {
      "left" : "_matchToken(\"true\", 1);",
      "right" : "_matchToken(\"true\", 1);",
      "info" : "ExpressionStatement[21948-21971]:ExpressionStatement[21948-21971]"
    }, {
      "left" : "t = JsonToken.VALUE_TRUE;",
      "right" : "t = JsonToken.VALUE_TRUE;",
      "info" : "ExpressionStatement[21984-22009]:ExpressionStatement[21984-22009]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22022-22028]:BreakStatement[22022-22028]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[22037-22046]:SwitchCase[22037-22046]"
    }, {
      "left" : "_matchToken(\"false\", 1);",
      "right" : "_matchToken(\"false\", 1);",
      "info" : "ExpressionStatement[22059-22083]:ExpressionStatement[22059-22083]"
    }, {
      "left" : "t = JsonToken.VALUE_FALSE;",
      "right" : "t = JsonToken.VALUE_FALSE;",
      "info" : "ExpressionStatement[22096-22122]:ExpressionStatement[22096-22122]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22135-22141]:BreakStatement[22135-22141]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[22150-22159]:SwitchCase[22150-22159]"
    }, {
      "left" : "_matchToken(\"null\", 1);",
      "right" : "_matchToken(\"null\", 1);",
      "info" : "ExpressionStatement[22172-22195]:ExpressionStatement[22172-22195]"
    }, {
      "left" : "t = JsonToken.VALUE_NULL;",
      "right" : "t = JsonToken.VALUE_NULL;",
      "info" : "ExpressionStatement[22208-22233]:ExpressionStatement[22208-22233]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22246-22252]:BreakStatement[22246-22252]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[22262-22271]:SwitchCase[22262-22271]"
    }, {
      "left" : "case '0':",
      "right" : "case '0':",
      "info" : "SwitchCase[22503-22512]:SwitchCase[22503-22512]"
    }, {
      "left" : "case '1':",
      "right" : "case '1':",
      "info" : "SwitchCase[22521-22530]:SwitchCase[22521-22530]"
    }, {
      "left" : "case '2':",
      "right" : "case '2':",
      "info" : "SwitchCase[22539-22548]:SwitchCase[22539-22548]"
    }, {
      "left" : "case '3':",
      "right" : "case '3':",
      "info" : "SwitchCase[22557-22566]:SwitchCase[22557-22566]"
    }, {
      "left" : "case '4':",
      "right" : "case '4':",
      "info" : "SwitchCase[22575-22584]:SwitchCase[22575-22584]"
    }, {
      "left" : "case '5':",
      "right" : "case '5':",
      "info" : "SwitchCase[22593-22602]:SwitchCase[22593-22602]"
    }, {
      "left" : "case '6':",
      "right" : "case '6':",
      "info" : "SwitchCase[22611-22620]:SwitchCase[22611-22620]"
    }, {
      "left" : "case '7':",
      "right" : "case '7':",
      "info" : "SwitchCase[22629-22638]:SwitchCase[22629-22638]"
    }, {
      "left" : "case '8':",
      "right" : "case '8':",
      "info" : "SwitchCase[22647-22656]:SwitchCase[22647-22656]"
    }, {
      "left" : "case '9':",
      "right" : "case '9':",
      "info" : "SwitchCase[22665-22674]:SwitchCase[22665-22674]"
    }, {
      "left" : "t = _parseNumber(i);",
      "right" : "t = _parseNumber(i);",
      "info" : "ExpressionStatement[22687-22707]:ExpressionStatement[22687-22707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22720-22726]:BreakStatement[22720-22726]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22735-22743]:SwitchCase[22735-22743]"
    }, {
      "left" : "t = _handleOddValue(i);",
      "right" : "t = _handleOddValue(i);",
      "info" : "ExpressionStatement[22756-22779]:ExpressionStatement[22756-22779]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22792-22798]:BreakStatement[22792-22798]"
    }, {
      "left" : "if (inObject)",
      "right" : "if (inObject)",
      "info" : "IfStatement[22818-22902]:IfStatement[22818-22902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22832-22902]:Block[22832-22902]"
    }, {
      "left" : "_nextToken = t;",
      "right" : "_nextToken = t;",
      "info" : "ExpressionStatement[22846-22861]:ExpressionStatement[22846-22861]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[22874-22892]:ReturnStatement[22874-22892]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[22911-22926]:ExpressionStatement[22911-22926]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[22935-22944]:ReturnStatement[22935-22944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22995-23521]:Block[22995-23521]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[23005-23025]:ExpressionStatement[23005-23025]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[23073-23098]:VariableDeclarationStatement[23073-23098]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[23107-23125]:ExpressionStatement[23107-23125]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[23182-23482]:IfStatement[23182-23482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23214-23328]:Block[23214-23328]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[23228-23318]:ExpressionStatement[23228-23318]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[23334-23482]:IfStatement[23334-23482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23367-23482]:Block[23367-23482]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[23381-23472]:ExpressionStatement[23381-23472]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[23491-23515]:ReturnStatement[23491-23515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23811-24781]:Block[23811-24781]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[23821-24652]:IfStatement[23821-24652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23861-24652]:Block[23861-24652]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[23914-23934]:ExpressionStatement[23914-23934]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[23947-23972]:VariableDeclarationStatement[23947-23972]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[23985-24003]:ExpressionStatement[23985-24003]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[24016-24031]:ExpressionStatement[24016-24031]"
    }, {
      "left" : "if (t == JsonToken.VALUE_STRING)",
      "right" : "if (t == JsonToken.VALUE_STRING)",
      "info" : "IfStatement[24044-24288]:IfStatement[24044-24288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24077-24288]:Block[24077-24288]"
    }, {
      "left" : "if (_tokenIncomplete)",
      "right" : "if (_tokenIncomplete)",
      "info" : "IfStatement[24095-24219]:IfStatement[24095-24219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24117-24219]:Block[24117-24219]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[24139-24164]:ExpressionStatement[24139-24164]"
    }, {
      "left" : "_finishString();",
      "right" : "_finishString();",
      "info" : "ExpressionStatement[24185-24201]:ExpressionStatement[24185-24201]"
    }, {
      "left" : "return _textBuffer.contentsAsString();",
      "right" : "return _textBuffer.contentsAsString();",
      "info" : "ReturnStatement[24236-24274]:ReturnStatement[24236-24274]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[24301-24617]:IfStatement[24301-24617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24333-24455]:Block[24333-24455]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[24351-24441]:ExpressionStatement[24351-24441]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[24461-24617]:IfStatement[24461-24617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24494-24617]:Block[24494-24617]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[24512-24603]:ExpressionStatement[24512-24603]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24630-24642]:ReturnStatement[24630-24642]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "right" : "return (nextToken() == JsonToken.VALUE_STRING) ? getText() : null;",
      "info" : "ReturnStatement[24709-24775]:ReturnStatement[24709-24775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24944-25745]:Block[24944-25745]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[24954-25600]:IfStatement[24954-25600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24994-25600]:Block[24994-25600]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[25008-25028]:ExpressionStatement[25008-25028]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[25041-25066]:VariableDeclarationStatement[25041-25066]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[25079-25097]:ExpressionStatement[25079-25097]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[25110-25125]:ExpressionStatement[25110-25125]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[25138-25228]:IfStatement[25138-25228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25175-25228]:Block[25175-25228]"
    }, {
      "left" : "return getIntValue();",
      "right" : "return getIntValue();",
      "info" : "ReturnStatement[25193-25214]:ReturnStatement[25193-25214]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[25241-25557]:IfStatement[25241-25557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25273-25395]:Block[25273-25395]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[25291-25381]:ExpressionStatement[25291-25381]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[25401-25557]:IfStatement[25401-25557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25434-25557]:Block[25434-25557]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[25452-25543]:ExpressionStatement[25452-25543]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[25570-25590]:ReturnStatement[25570-25590]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getIntValue() : defaultValue;",
      "info" : "ReturnStatement[25657-25739]:ReturnStatement[25657-25739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25911-26753]:Block[25911-26753]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[25921-26607]:IfStatement[25921-26607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25961-26607]:Block[25961-26607]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[26014-26034]:ExpressionStatement[26014-26034]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[26047-26072]:VariableDeclarationStatement[26047-26072]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[26085-26103]:ExpressionStatement[26085-26103]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[26116-26131]:ExpressionStatement[26116-26131]"
    }, {
      "left" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "right" : "if (t == JsonToken.VALUE_NUMBER_INT)",
      "info" : "IfStatement[26144-26235]:IfStatement[26144-26235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26181-26235]:Block[26181-26235]"
    }, {
      "left" : "return getLongValue();",
      "right" : "return getLongValue();",
      "info" : "ReturnStatement[26199-26221]:ReturnStatement[26199-26221]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[26248-26564]:IfStatement[26248-26564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26280-26402]:Block[26280-26402]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26298-26388]:ExpressionStatement[26298-26388]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[26408-26564]:IfStatement[26408-26564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26441-26564]:Block[26441-26564]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[26459-26550]:ExpressionStatement[26459-26550]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[26577-26597]:ReturnStatement[26577-26597]"
    }, {
      "left" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "right" : "return (nextToken() == JsonToken.VALUE_NUMBER_INT) ? getLongValue() : defaultValue;",
      "info" : "ReturnStatement[26664-26747]:ReturnStatement[26664-26747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26908-27890]:Block[26908-27890]"
    }, {
      "left" : "if (_currToken == JsonToken.FIELD_NAME)",
      "right" : "if (_currToken == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[26918-27686]:IfStatement[26918-27686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26958-27686]:Block[26958-27686]"
    }, {
      "left" : "_nameCopied = false;",
      "right" : "_nameCopied = false;",
      "info" : "ExpressionStatement[27011-27031]:ExpressionStatement[27011-27031]"
    }, {
      "left" : "JsonToken t = _nextToken;",
      "right" : "JsonToken t = _nextToken;",
      "info" : "VariableDeclarationStatement[27044-27069]:VariableDeclarationStatement[27044-27069]"
    }, {
      "left" : "_nextToken = null;",
      "right" : "_nextToken = null;",
      "info" : "ExpressionStatement[27082-27100]:ExpressionStatement[27082-27100]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[27113-27128]:ExpressionStatement[27113-27128]"
    }, {
      "left" : "if (t == JsonToken.VALUE_TRUE)",
      "right" : "if (t == JsonToken.VALUE_TRUE)",
      "info" : "IfStatement[27141-27224]:IfStatement[27141-27224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27172-27224]:Block[27172-27224]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[27190-27210]:ReturnStatement[27190-27210]"
    }, {
      "left" : "if (t == JsonToken.VALUE_FALSE)",
      "right" : "if (t == JsonToken.VALUE_FALSE)",
      "info" : "IfStatement[27237-27322]:IfStatement[27237-27322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27269-27322]:Block[27269-27322]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[27287-27308]:ReturnStatement[27287-27308]"
    }, {
      "left" : "if (t == JsonToken.START_ARRAY)",
      "right" : "if (t == JsonToken.START_ARRAY)",
      "info" : "IfStatement[27335-27651]:IfStatement[27335-27651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27367-27489]:Block[27367-27489]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildArrayContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[27385-27475]:ExpressionStatement[27385-27475]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[27495-27651]:IfStatement[27495-27651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27528-27651]:Block[27528-27651]"
    }, {
      "left" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "right" : "_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);",
      "info" : "ExpressionStatement[27546-27637]:ExpressionStatement[27546-27637]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27664-27676]:ReturnStatement[27664-27676]"
    }, {
      "left" : "switch (nextToken()) {\n        case VALUE_TRUE:\n            return Boolean.TRUE;\n        case VALUE_FALSE:\n            return Boolean.FALSE;\n        default:\n        \treturn null;\n        }",
      "right" : "switch (nextToken()) {\n        case VALUE_TRUE:\n            return Boolean.TRUE;\n        case VALUE_FALSE:\n            return Boolean.FALSE;\n        default:\n        \treturn null;\n        }",
      "info" : "SwitchStatement[27695-27884]:SwitchStatement[27695-27884]"
    }, {
      "left" : "case VALUE_TRUE:",
      "right" : "case VALUE_TRUE:",
      "info" : "SwitchCase[27726-27742]:SwitchCase[27726-27742]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[27755-27775]:ReturnStatement[27755-27775]"
    }, {
      "left" : "case VALUE_FALSE:",
      "right" : "case VALUE_FALSE:",
      "info" : "SwitchCase[27784-27801]:SwitchCase[27784-27801]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[27814-27835]:ReturnStatement[27814-27835]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[27844-27852]:SwitchCase[27844-27852]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27862-27874]:ReturnStatement[27862-27874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27957-28015]:Block[27957-28015]"
    }, {
      "left" : "super.close();",
      "right" : "super.close();",
      "info" : "ExpressionStatement[27967-27981]:ExpressionStatement[27967-27981]"
    }, {
      "left" : "_symbols.release();",
      "right" : "_symbols.release();",
      "info" : "ExpressionStatement[27990-28009]:ExpressionStatement[27990-28009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29048-33466]:Block[29048-33562]"
    }, {
      "left" : "boolean negative = (ch == INT_MINUS);",
      "right" : "boolean negative = (ch == INT_MINUS);",
      "info" : "VariableDeclarationStatement[29331-29368]:VariableDeclarationStatement[29331-29368]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[29377-29397]:VariableDeclarationStatement[29377-29397]"
    }, {
      "left" : "int startPtr = ptr-1;",
      "right" : "int startPtr = ptr-1;",
      "info" : "VariableDeclarationStatement[29406-29427]:VariableDeclarationStatement[29406-29427]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[29474-29505]:VariableDeclarationStatement[29474-29505]"
    }, {
      "left" : "dummy_loop:\n        do { // dummy loop, to be able to break out\n            if (negative) { // need to read the next digit\n                if (ptr >= _inputEnd) {\n                    break dummy_loop;\n                }\n                ch = _inputBuffer[ptr++];\n                // First check: must have a digit to follow minus sign\n                if (ch > INT_9 || ch < INT_0) {\n                    _inputPtr = ptr;\n                    return _handleInvalidNumberStart(ch, true);\n                }\n                /* (note: has been checked for non-negative already, in\n                 * the dispatching code that determined it should be\n                 * a numeric value)\n                 */\n            }\n            // One special case, leading zero(es):\n            if (ch == INT_0) {\n                break dummy_loop;\n            }\n            \n            /* First, let's see if the whole number is contained within\n             * the input buffer unsplit. This should be the common case;\n             * and to simplify processing, we will just reparse contents\n             * in the alternative case (number split on buffer boundary)\n             */\n            \n            int intLen = 1; // already got one\n            \n            // First let's get the obligatory integer part:\n            \n            int_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    break dummy_loop;\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break int_loop;\n                }\n                ++intLen;\n            }\n\n            int fractLen = 0;\n            \n            // And then see if we get other parts\n            if (ch == '.') { // yes, fraction\n                fract_loop:\n                while (true) {\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = (int) _inputBuffer[ptr++];\n                    if (ch < INT_0 || ch > INT_9) {\n                        break fract_loop;\n                    }\n                    ++fractLen;\n                }\n                // must be followed by sequence of ints, one minimum\n                if (fractLen == 0) {\n                    reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n                }\n            }\n\n            int expLen = 0;\n            if (ch == 'e' || ch == 'E') { // and/or exponent\n                if (ptr >= inputLen) {\n                    break dummy_loop;\n                }\n                // Sign indicator?\n                ch = (int) _inputBuffer[ptr++];\n                if (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = (int) _inputBuffer[ptr++];\n                }\n                while (ch <= INT_9 && ch >= INT_0) {\n                    ++expLen;\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = (int) _inputBuffer[ptr++];\n                }\n                // must be followed by sequence of ints, one minimum\n                if (expLen == 0) {\n                    reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n                }\n            }\n            // Got it all: let's add to text buffer for parsing, access\n            --ptr; // need to push back following separator\n            _inputPtr = ptr;\n            // As per #105, need separating space between root values; check here\n            int len = ptr-startPtr;\n            _textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n            return reset(negative, intLen, fractLen, expLen);\n        } while (false);",
      "right" : "dummy_loop:\n        do { // dummy loop, to be able to break out\n            if (negative) { // need to read the next digit\n                if (ptr >= _inputEnd) {\n                    break dummy_loop;\n                }\n                ch = _inputBuffer[ptr++];\n                // First check: must have a digit to follow minus sign\n                if (ch > INT_9 || ch < INT_0) {\n                    _inputPtr = ptr;\n                    return _handleInvalidNumberStart(ch, true);\n                }\n                /* (note: has been checked for non-negative already, in\n                 * the dispatching code that determined it should be\n                 * a numeric value)\n                 */\n            }\n            // One special case, leading zero(es):\n            if (ch == INT_0) {\n                break dummy_loop;\n            }\n            \n            /* First, let's see if the whole number is contained within\n             * the input buffer unsplit. This should be the common case;\n             * and to simplify processing, we will just reparse contents\n             * in the alternative case (number split on buffer boundary)\n             */\n            \n            int intLen = 1; // already got one\n            \n            // First let's get the obligatory integer part:\n            \n            int_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    break dummy_loop;\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break int_loop;\n                }\n                ++intLen;\n            }\n\n            int fractLen = 0;\n            \n            // And then see if we get other parts\n            if (ch == '.') { // yes, fraction\n                fract_loop:\n                while (true) {\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = (int) _inputBuffer[ptr++];\n                    if (ch < INT_0 || ch > INT_9) {\n                        break fract_loop;\n                    }\n                    ++fractLen;\n                }\n                // must be followed by sequence of ints, one minimum\n                if (fractLen == 0) {\n                    reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");\n                }\n            }\n\n            int expLen = 0;\n            if (ch == 'e' || ch == 'E') { // and/or exponent\n                if (ptr >= inputLen) {\n                    break dummy_loop;\n                }\n                // Sign indicator?\n                ch = (int) _inputBuffer[ptr++];\n                if (ch == INT_MINUS || ch == INT_PLUS) { // yup, skip for now\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = (int) _inputBuffer[ptr++];\n                }\n                while (ch <= INT_9 && ch >= INT_0) {\n                    ++expLen;\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = (int) _inputBuffer[ptr++];\n                }\n                // must be followed by sequence of ints, one minimum\n                if (expLen == 0) {\n                    reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");\n                }\n            }\n            // Got it all: let's add to text buffer for parsing, access\n            --ptr; // need to push back following separator\n            _inputPtr = ptr;\n            // As per #105, need separating space between root values; check here\n            if (_parsingContext.inRoot()) {\n                _verifyRootSpace(ch);\n            }\n            int len = ptr-startPtr;\n            _textBuffer.resetWithShared(_inputBuffer, startPtr, len);\n            return reset(negative, intLen, fractLen, expLen);\n        } while (false);",
      "info" : "LabeledStatement[29515-33363]:LabeledStatement[29515-33459]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[29535-33363]:DoStatement[29535-33459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29538-33348]:Block[29538-33444]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[29591-30224]:IfStatement[29591-30224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29605-30224]:Block[29605-30224]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[29654-29733]:IfStatement[29654-29733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29676-29733]:Block[29676-29733]"
    }, {
      "left" : "break dummy_loop;",
      "right" : "break dummy_loop;",
      "info" : "BreakStatement[29698-29715]:BreakStatement[29698-29715]"
    }, {
      "left" : "ch = _inputBuffer[ptr++];",
      "right" : "ch = _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[29750-29775]:ExpressionStatement[29750-29775]"
    }, {
      "left" : "if (ch > INT_9 || ch < INT_0)",
      "right" : "if (ch > INT_9 || ch < INT_0)",
      "info" : "IfStatement[29863-30013]:IfStatement[29863-30013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29893-30013]:Block[29893-30013]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[29915-29931]:ExpressionStatement[29915-29931]"
    }, {
      "left" : "return _handleInvalidNumberStart(ch, true);",
      "right" : "return _handleInvalidNumberStart(ch, true);",
      "info" : "ReturnStatement[29952-29995]:ReturnStatement[29952-29995]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[30288-30354]:IfStatement[30288-30354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30305-30354]:Block[30305-30354]"
    }, {
      "left" : "break dummy_loop;",
      "right" : "break dummy_loop;",
      "info" : "BreakStatement[30323-30340]:BreakStatement[30323-30340]"
    }, {
      "left" : "int intLen = 1;",
      "right" : "int intLen = 1;",
      "info" : "VariableDeclarationStatement[30700-30715]:VariableDeclarationStatement[30700-30715]"
    }, {
      "left" : "int_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    break dummy_loop;\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break int_loop;\n                }\n                ++intLen;\n            }",
      "right" : "int_loop:\n            while (true) {\n                if (ptr >= _inputEnd) {\n                    break dummy_loop;\n                }\n                ch = (int) _inputBuffer[ptr++];\n                if (ch < INT_0 || ch > INT_9) {\n                    break int_loop;\n                }\n                ++intLen;\n            }",
      "info" : "LabeledStatement[30833-31155]:LabeledStatement[30833-31155]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[30855-31155]:WhileStatement[30855-31155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30868-31155]:Block[30868-31155]"
    }, {
      "left" : "if (ptr >= _inputEnd)",
      "right" : "if (ptr >= _inputEnd)",
      "info" : "IfStatement[30886-30965]:IfStatement[30886-30965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30908-30965]:Block[30908-30965]"
    }, {
      "left" : "break dummy_loop;",
      "right" : "break dummy_loop;",
      "info" : "BreakStatement[30930-30947]:BreakStatement[30930-30947]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[30982-31013]:ExpressionStatement[30982-31013]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[31030-31115]:IfStatement[31030-31115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31060-31115]:Block[31060-31115]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[31082-31097]:BreakStatement[31082-31097]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[31132-31141]:ExpressionStatement[31132-31141]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[31169-31186]:VariableDeclarationStatement[31169-31186]"
    }, {
      "left" : "if (ch == '.')",
      "right" : "if (ch == '.')",
      "info" : "IfStatement[31262-31910]:IfStatement[31262-31910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31277-31910]:Block[31277-31910]"
    }, {
      "left" : "fract_loop:\n                while (true) {\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = (int) _inputBuffer[ptr++];\n                    if (ch < INT_0 || ch > INT_9) {\n                        break fract_loop;\n                    }\n                    ++fractLen;\n                }",
      "right" : "fract_loop:\n                while (true) {\n                    if (ptr >= inputLen) {\n                        break dummy_loop;\n                    }\n                    ch = (int) _inputBuffer[ptr++];\n                    if (ch < INT_0 || ch > INT_9) {\n                        break fract_loop;\n                    }\n                    ++fractLen;\n                }",
      "info" : "LabeledStatement[31312-31679]:LabeledStatement[31312-31679]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[31340-31679]:WhileStatement[31340-31679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31353-31679]:Block[31353-31679]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[31375-31461]:IfStatement[31375-31461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31396-31461]:Block[31396-31461]"
    }, {
      "left" : "break dummy_loop;",
      "right" : "break dummy_loop;",
      "info" : "BreakStatement[31422-31439]:BreakStatement[31422-31439]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[31482-31513]:ExpressionStatement[31482-31513]"
    }, {
      "left" : "if (ch < INT_0 || ch > INT_9)",
      "right" : "if (ch < INT_0 || ch > INT_9)",
      "info" : "IfStatement[31534-31629]:IfStatement[31534-31629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31564-31629]:Block[31564-31629]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[31590-31607]:BreakStatement[31590-31607]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[31650-31661]:ExpressionStatement[31650-31661]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[31765-31896]:IfStatement[31765-31896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31784-31896]:Block[31784-31896]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(ch, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[31806-31878]:ExpressionStatement[31806-31878]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[31924-31939]:VariableDeclarationStatement[31924-31939]"
    }, {
      "left" : "if (ch == 'e' || ch == 'E')",
      "right" : "if (ch == 'e' || ch == 'E')",
      "info" : "IfStatement[31952-32927]:IfStatement[31952-32927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31980-32927]:Block[31980-32927]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[32017-32095]:IfStatement[32017-32095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32038-32095]:Block[32038-32095]"
    }, {
      "left" : "break dummy_loop;",
      "right" : "break dummy_loop;",
      "info" : "BreakStatement[32060-32077]:BreakStatement[32060-32077]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[32147-32178]:ExpressionStatement[32147-32178]"
    }, {
      "left" : "if (ch == INT_MINUS || ch == INT_PLUS)",
      "right" : "if (ch == INT_MINUS || ch == INT_PLUS)",
      "info" : "IfStatement[32195-32433]:IfStatement[32195-32433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32234-32433]:Block[32234-32433]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[32277-32363]:IfStatement[32277-32363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32298-32363]:Block[32298-32363]"
    }, {
      "left" : "break dummy_loop;",
      "right" : "break dummy_loop;",
      "info" : "BreakStatement[32324-32341]:BreakStatement[32324-32341]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[32384-32415]:ExpressionStatement[32384-32415]"
    }, {
      "left" : "while (ch <= INT_9 && ch >= INT_0)",
      "right" : "while (ch <= INT_9 && ch >= INT_0)",
      "info" : "WhileStatement[32450-32693]:WhileStatement[32450-32693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32485-32693]:Block[32485-32693]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[32507-32516]:ExpressionStatement[32507-32516]"
    }, {
      "left" : "if (ptr >= inputLen)",
      "right" : "if (ptr >= inputLen)",
      "info" : "IfStatement[32537-32623]:IfStatement[32537-32623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32558-32623]:Block[32558-32623]"
    }, {
      "left" : "break dummy_loop;",
      "right" : "break dummy_loop;",
      "info" : "BreakStatement[32584-32601]:BreakStatement[32584-32601]"
    }, {
      "left" : "ch = (int) _inputBuffer[ptr++];",
      "right" : "ch = (int) _inputBuffer[ptr++];",
      "info" : "ExpressionStatement[32644-32675]:ExpressionStatement[32644-32675]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[32779-32913]:IfStatement[32779-32913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32796-32913]:Block[32796-32913]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(ch, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[32818-32895]:ExpressionStatement[32818-32895]"
    }, {
      "left" : "--ptr;",
      "right" : "--ptr;",
      "info" : "ExpressionStatement[33012-33018]:ExpressionStatement[33012-33018]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[33072-33088]:ExpressionStatement[33072-33088]"
    }, {
      "left" : "int len = ptr-startPtr;",
      "right" : "int len = ptr-startPtr;",
      "info" : "VariableDeclarationStatement[33183-33206]:VariableDeclarationStatement[33279-33302]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, len);",
      "info" : "ExpressionStatement[33219-33276]:ExpressionStatement[33315-33372]"
    }, {
      "left" : "return reset(negative, intLen, fractLen, expLen);",
      "right" : "return reset(negative, intLen, fractLen, expLen);",
      "info" : "ReturnStatement[33289-33338]:ReturnStatement[33385-33434]"
    }, {
      "left" : "_inputPtr = negative ? (startPtr+1) : startPtr;",
      "right" : "_inputPtr = negative ? (startPtr+1) : startPtr;",
      "info" : "ExpressionStatement[33373-33420]:ExpressionStatement[33469-33516]"
    }, {
      "left" : "return _parseNumber2(negative);",
      "right" : "return _parseNumber2(negative);",
      "info" : "ReturnStatement[33429-33460]:ReturnStatement[33525-33556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33872-38007]:Block[33968-38198]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[33882-33938]:VariableDeclarationStatement[33978-34034]"
    }, {
      "left" : "int outPtr = 0;",
      "right" : "int outPtr = 0;",
      "info" : "VariableDeclarationStatement[33947-33962]:VariableDeclarationStatement[34043-34058]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[34005-34066]:IfStatement[34101-34162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34019-34066]:Block[34115-34162]"
    }, {
      "left" : "outBuf[outPtr++] = '-';",
      "right" : "outBuf[outPtr++] = '-';",
      "info" : "ExpressionStatement[34033-34056]:ExpressionStatement[34129-34152]"
    }, {
      "left" : "int intLen = 0;",
      "right" : "int intLen = 0;",
      "info" : "VariableDeclarationStatement[34138-34153]:VariableDeclarationStatement[34234-34249]"
    }, {
      "left" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");",
      "right" : "char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar(\"No digit following minus sign\");",
      "info" : "VariableDeclarationStatement[34162-34270]:VariableDeclarationStatement[34258-34366]"
    }, {
      "left" : "if (c == '0')",
      "right" : "if (c == '0')",
      "info" : "IfStatement[34279-34346]:IfStatement[34375-34442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34293-34346]:Block[34389-34442]"
    }, {
      "left" : "c = _verifyNoLeadingZeroes();",
      "right" : "c = _verifyNoLeadingZeroes();",
      "info" : "ExpressionStatement[34307-34336]:ExpressionStatement[34403-34432]"
    }, {
      "left" : "boolean eof = false;",
      "right" : "boolean eof = false;",
      "info" : "VariableDeclarationStatement[34355-34375]:VariableDeclarationStatement[34451-34471]"
    }, {
      "left" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
      "right" : "int_loop:\n        while (c >= '0' && c <= '9') {\n            ++intLen;\n            if (outPtr >= outBuf.length) {\n                outBuf = _textBuffer.finishCurrentSegment();\n                outPtr = 0;\n            }\n            outBuf[outPtr++] = c;\n            if (_inputPtr >= _inputEnd && !loadMore()) {\n                // EOF is legal for main level int values\n                c = CHAR_NULL;\n                eof = true;\n                break int_loop;\n            }\n            c = _inputBuffer[_inputPtr++];\n        }",
      "info" : "LabeledStatement[34435-34958]:LabeledStatement[34531-35054]"
    }, {
      "left" : "while (c >= '0' && c <= '9')",
      "right" : "while (c >= '0' && c <= '9')",
      "info" : "WhileStatement[34453-34958]:WhileStatement[34549-35054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34482-34958]:Block[34578-35054]"
    }, {
      "left" : "++intLen;",
      "right" : "++intLen;",
      "info" : "ExpressionStatement[34496-34505]:ExpressionStatement[34592-34601]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[34518-34651]:IfStatement[34614-34747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34547-34651]:Block[34643-34747]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[34565-34609]:ExpressionStatement[34661-34705]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[34626-34637]:ExpressionStatement[34722-34733]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[34664-34685]:ExpressionStatement[34760-34781]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[34698-34905]:IfStatement[34794-35001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34741-34905]:Block[34837-35001]"
    }, {
      "left" : "c = CHAR_NULL;",
      "right" : "c = CHAR_NULL;",
      "info" : "ExpressionStatement[34817-34831]:ExpressionStatement[34913-34927]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[34848-34859]:ExpressionStatement[34944-34955]"
    }, {
      "left" : "break int_loop;",
      "right" : "break int_loop;",
      "info" : "BreakStatement[34876-34891]:BreakStatement[34972-34987]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[34918-34948]:ExpressionStatement[35014-35044]"
    }, {
      "left" : "if (intLen == 0)",
      "right" : "if (intLen == 0)",
      "info" : "IfStatement[35013-35130]:IfStatement[35109-35226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35030-35130]:Block[35126-35226]"
    }, {
      "left" : "reportInvalidNumber(\"Missing integer part (next char \"+_getCharDesc(c)+\")\");",
      "right" : "reportInvalidNumber(\"Missing integer part (next char \"+_getCharDesc(c)+\")\");",
      "info" : "ExpressionStatement[35044-35120]:ExpressionStatement[35140-35216]"
    }, {
      "left" : "int fractLen = 0;",
      "right" : "int fractLen = 0;",
      "info" : "VariableDeclarationStatement[35140-35157]:VariableDeclarationStatement[35236-35253]"
    }, {
      "left" : "if (c == '.')",
      "right" : "if (c == '.')",
      "info" : "IfStatement[35212-36080]:IfStatement[35308-36176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35226-36080]:Block[35322-36176]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[35257-35278]:ExpressionStatement[35353-35374]"
    }, {
      "left" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
      "right" : "fract_loop:\n            while (true) {\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break fract_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n                if (c < INT_0 || c > INT_9) {\n                    break fract_loop;\n                }\n                ++fractLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n            }",
      "info" : "LabeledStatement[35292-35870]:LabeledStatement[35388-35966]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[35316-35870]:WhileStatement[35412-35966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35329-35870]:Block[35425-35966]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[35347-35479]:IfStatement[35443-35575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35390-35479]:Block[35486-35575]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[35412-35423]:ExpressionStatement[35508-35519]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[35444-35461]:BreakStatement[35540-35557]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[35496-35526]:ExpressionStatement[35592-35622]"
    }, {
      "left" : "if (c < INT_0 || c > INT_9)",
      "right" : "if (c < INT_0 || c > INT_9)",
      "info" : "IfStatement[35543-35628]:IfStatement[35639-35724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35571-35628]:Block[35667-35724]"
    }, {
      "left" : "break fract_loop;",
      "right" : "break fract_loop;",
      "info" : "BreakStatement[35593-35610]:BreakStatement[35689-35706]"
    }, {
      "left" : "++fractLen;",
      "right" : "++fractLen;",
      "info" : "ExpressionStatement[35645-35656]:ExpressionStatement[35741-35752]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[35673-35818]:IfStatement[35769-35914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35702-35818]:Block[35798-35914]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[35724-35768]:ExpressionStatement[35820-35864]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[35789-35800]:ExpressionStatement[35885-35896]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[35835-35856]:ExpressionStatement[35931-35952]"
    }, {
      "left" : "if (fractLen == 0)",
      "right" : "if (fractLen == 0)",
      "info" : "IfStatement[35948-36070]:IfStatement[36044-36166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35967-36070]:Block[36063-36166]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Decimal point not followed by a digit\");",
      "info" : "ExpressionStatement[35985-36056]:ExpressionStatement[36081-36152]"
    }, {
      "left" : "int expLen = 0;",
      "right" : "int expLen = 0;",
      "info" : "VariableDeclarationStatement[36090-36105]:VariableDeclarationStatement[36186-36201]"
    }, {
      "left" : "if (c == 'e' || c == 'E')",
      "right" : "if (c == 'e' || c == 'E')",
      "info" : "IfStatement[36114-37732]:IfStatement[36210-37828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36140-37732]:Block[36236-37828]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[36167-36300]:IfStatement[36263-36396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36196-36300]:Block[36292-36396]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[36214-36258]:ExpressionStatement[36310-36354]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[36275-36286]:ExpressionStatement[36371-36382]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[36313-36334]:ExpressionStatement[36409-36430]"
    }, {
      "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
      "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                : getNextChar(\"expected a digit for number exponent\");",
      "info" : "ExpressionStatement[36414-36540]:ExpressionStatement[36510-36636]"
    }, {
      "left" : "if (c == '-' || c == '+')",
      "right" : "if (c == '-' || c == '+')",
      "info" : "IfStatement[36584-37015]:IfStatement[36680-37111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36610-37015]:Block[36706-37111]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[36628-36773]:IfStatement[36724-36869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36657-36773]:Block[36753-36869]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[36679-36723]:ExpressionStatement[36775-36819]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[36744-36755]:ExpressionStatement[36840-36851]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[36790-36811]:ExpressionStatement[36886-36907]"
    }, {
      "left" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
      "right" : "c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++]\n                    : getNextChar(\"expected a digit for number exponent\");",
      "info" : "ExpressionStatement[36871-37001]:ExpressionStatement[36967-37097]"
    }, {
      "left" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
      "right" : "exp_loop:\n            while (c <= INT_9 && c >= INT_0) {\n                ++expLen;\n                if (outPtr >= outBuf.length) {\n                    outBuf = _textBuffer.finishCurrentSegment();\n                    outPtr = 0;\n                }\n                outBuf[outPtr++] = c;\n                if (_inputPtr >= _inputEnd && !loadMore()) {\n                    eof = true;\n                    break exp_loop;\n                }\n                c = _inputBuffer[_inputPtr++];\n            }",
      "info" : "LabeledStatement[37029-37519]:LabeledStatement[37125-37615]"
    }, {
      "left" : "while (c <= INT_9 && c >= INT_0)",
      "right" : "while (c <= INT_9 && c >= INT_0)",
      "info" : "WhileStatement[37051-37519]:WhileStatement[37147-37615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37084-37519]:Block[37180-37615]"
    }, {
      "left" : "++expLen;",
      "right" : "++expLen;",
      "info" : "ExpressionStatement[37102-37111]:ExpressionStatement[37198-37207]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[37128-37273]:IfStatement[37224-37369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37157-37273]:Block[37253-37369]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[37179-37223]:ExpressionStatement[37275-37319]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[37244-37255]:ExpressionStatement[37340-37351]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[37290-37311]:ExpressionStatement[37386-37407]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[37328-37458]:IfStatement[37424-37554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37371-37458]:Block[37467-37554]"
    }, {
      "left" : "eof = true;",
      "right" : "eof = true;",
      "info" : "ExpressionStatement[37393-37404]:ExpressionStatement[37489-37500]"
    }, {
      "left" : "break exp_loop;",
      "right" : "break exp_loop;",
      "info" : "BreakStatement[37425-37440]:BreakStatement[37521-37536]"
    }, {
      "left" : "c = _inputBuffer[_inputPtr++];",
      "right" : "c = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[37475-37505]:ExpressionStatement[37571-37601]"
    }, {
      "left" : "if (expLen == 0)",
      "right" : "if (expLen == 0)",
      "info" : "IfStatement[37597-37722]:IfStatement[37693-37818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37614-37722]:Block[37710-37818]"
    }, {
      "left" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "right" : "reportUnexpectedNumberChar(c, \"Exponent indicator not followed by a digit\");",
      "info" : "ExpressionStatement[37632-37708]:ExpressionStatement[37728-37804]"
    }, {
      "left" : "if (!eof)",
      "right" : "if (!eof)",
      "info" : "IfStatement[37818-37864]:IfStatement[37914-38055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37828-37864]:Block[37924-38055]"
    }, {
      "left" : "--_inputPtr;",
      "right" : "--_inputPtr;",
      "info" : "ExpressionStatement[37842-37854]:ExpressionStatement[37938-37950]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[37873-37910]:ExpressionStatement[38064-38101]"
    }, {
      "left" : "return reset(negative, intLen, fractLen, expLen);",
      "right" : "return reset(negative, intLen, fractLen, expLen);",
      "info" : "ReturnStatement[37952-38001]:ReturnStatement[38143-38192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38195-39297]:Block[38386-39488]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[38237-38315]:IfStatement[38428-38506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38280-38315]:Block[38471-38506]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[38294-38305]:ReturnStatement[38485-38496]"
    }, {
      "left" : "char ch = _inputBuffer[_inputPtr];",
      "right" : "char ch = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[38324-38358]:VariableDeclarationStatement[38515-38549]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[38456-38517]:IfStatement[38647-38708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38482-38517]:Block[38673-38708]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[38496-38507]:ReturnStatement[38687-38698]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "right" : "if (!isEnabled(Feature.ALLOW_NUMERIC_LEADING_ZEROS))",
      "info" : "IfStatement[38526-38653]:IfStatement[38717-38844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38579-38653]:Block[38770-38844]"
    }, {
      "left" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "right" : "reportInvalidNumber(\"Leading zeroes not allowed\");",
      "info" : "ExpressionStatement[38593-38643]:ExpressionStatement[38784-38834]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[38772-38784]:ExpressionStatement[38963-38975]"
    }, {
      "left" : "if (ch == INT_0)",
      "right" : "if (ch == INT_0)",
      "info" : "IfStatement[38823-39272]:IfStatement[39014-39463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38840-39272]:Block[39031-39463]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[38854-39262]:WhileStatement[39045-39453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38898-39262]:Block[39089-39453]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr];",
      "right" : "ch = _inputBuffer[_inputPtr];",
      "info" : "ExpressionStatement[38916-38945]:ExpressionStatement[39107-39136]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[38962-39082]:IfStatement[39153-39273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38988-39082]:Block[39179-39273]"
    }, {
      "left" : "return '0';",
      "right" : "return '0';",
      "info" : "ReturnStatement[39053-39064]:ReturnStatement[39244-39255]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[39099-39111]:ExpressionStatement[39290-39302]"
    }, {
      "left" : "if (ch != '0')",
      "right" : "if (ch != '0')",
      "info" : "IfStatement[39150-39248]:IfStatement[39341-39439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39165-39248]:Block[39356-39439]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39224-39230]:BreakStatement[39415-39421]"
    }, {
      "left" : "return ch;",
      "right" : "return ch;",
      "info" : "ReturnStatement[39281-39291]:ReturnStatement[39472-39482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39518-40819]:Block[39709-41010]"
    }, {
      "left" : "if (ch == 'I')",
      "right" : "if (ch == 'I')",
      "info" : "IfStatement[39528-40682]:IfStatement[39719-40873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39543-40682]:Block[39734-40873]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[39557-39701]:IfStatement[39748-39892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39585-39701]:Block[39776-39892]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[39603-39687]:IfStatement[39794-39878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39620-39687]:Block[39811-39878]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[39642-39669]:ExpressionStatement[39833-39860]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[39714-39745]:ExpressionStatement[39905-39936]"
    }, {
      "left" : "if (ch == 'N')",
      "right" : "if (ch == 'N')",
      "info" : "IfStatement[39758-40672]:IfStatement[39949-40863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39773-40207]:Block[39964-40398]"
    }, {
      "left" : "String match = negative ? \"-INF\" :\"+INF\";",
      "right" : "String match = negative ? \"-INF\" :\"+INF\";",
      "info" : "VariableDeclarationStatement[39791-39832]:VariableDeclarationStatement[39982-40023]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[39849-39871]:ExpressionStatement[40040-40062]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[39888-40067]:IfStatement[40079-40258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39938-40067]:Block[40129-40258]"
    }, {
      "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[39960-40049]:ReturnStatement[40151-40240]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[40084-40193]:ExpressionStatement[40275-40384]"
    }, {
      "left" : "if (ch == 'n')",
      "right" : "if (ch == 'n')",
      "info" : "IfStatement[40213-40672]:IfStatement[40404-40863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40228-40672]:Block[40419-40863]"
    }, {
      "left" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
      "right" : "String match = negative ? \"-Infinity\" :\"+Infinity\";",
      "info" : "VariableDeclarationStatement[40246-40297]:VariableDeclarationStatement[40437-40488]"
    }, {
      "left" : "_matchToken(match, 3);",
      "right" : "_matchToken(match, 3);",
      "info" : "ExpressionStatement[40314-40336]:ExpressionStatement[40505-40527]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[40353-40532]:IfStatement[40544-40723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40403-40532]:Block[40594-40723]"
    }, {
      "left" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(match, negative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[40425-40514]:ReturnStatement[40616-40705]"
    }, {
      "left" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token '\"+match+\"': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[40549-40658]:ExpressionStatement[40740-40849]"
    }, {
      "left" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "right" : "reportUnexpectedNumberChar(ch, \"expected digit (0-9) to follow minus sign, for valid numeric value\");",
      "info" : "ExpressionStatement[40691-40792]:ExpressionStatement[40882-40983]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[40801-40813]:ReturnStatement[40992-41004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41380-42541]:Block[41968-43129]"
    }, {
      "left" : "if (i != INT_QUOTE)",
      "right" : "if (i != INT_QUOTE)",
      "info" : "IfStatement[41390-41459]:IfStatement[41978-42047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41410-41459]:Block[41998-42047]"
    }, {
      "left" : "return _handleOddName(i);",
      "right" : "return _handleOddName(i);",
      "info" : "ReturnStatement[41424-41449]:ReturnStatement[42012-42037]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[41649-41669]:VariableDeclarationStatement[42237-42257]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[41678-41699]:VariableDeclarationStatement[42266-42287]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[41708-41739]:VariableDeclarationStatement[42296-42327]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[41749-42426]:IfStatement[42337-43014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41769-42426]:Block[42357-43014]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[41783-41813]:VariableDeclarationStatement[42371-42401]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[41826-41859]:VariableDeclarationStatement[42414-42447]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[41873-42416]:DoStatement[42461-43004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41876-42392]:Block[42464-42980]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[41894-41921]:VariableDeclarationStatement[42482-42509]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[41938-42282]:IfStatement[42526-42870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41974-42282]:Block[42562-42870]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[41996-42237]:IfStatement[42584-42825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42011-42237]:Block[42599-42825]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[42037-42059]:VariableDeclarationStatement[42625-42647]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[42084-42102]:ExpressionStatement[42672-42690]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[42148-42215]:ReturnStatement[42736-42803]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42258-42264]:BreakStatement[42846-42852]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[42299-42355]:ExpressionStatement[42887-42943]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[42372-42378]:ExpressionStatement[42960-42966]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[42436-42458]:VariableDeclarationStatement[43024-43046]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[42467-42483]:ExpressionStatement[43055-43071]"
    }, {
      "left" : "return _parseName2(start, hash, INT_QUOTE);",
      "right" : "return _parseName2(start, hash, INT_QUOTE);",
      "info" : "ReturnStatement[42492-42535]:ReturnStatement[43080-43123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42634-44563]:Block[43222-45151]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "info" : "ExpressionStatement[42644-42720]:ExpressionStatement[43232-43308]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[42875-42923]:VariableDeclarationStatement[43463-43511]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[42932-42981]:VariableDeclarationStatement[43520-43569]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[42991-44264]:WhileStatement[43579-44852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43004-44264]:Block[43592-44852]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[43018-43212]:IfStatement[43606-43800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43046-43212]:Block[43634-43800]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[43064-43198]:IfStatement[43652-43786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43081-43198]:Block[43669-43786]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");",
      "right" : "_reportInvalidEOF(\": was expecting closing '\"+((char) endChar)+\"' for name\");",
      "info" : "ExpressionStatement[43103-43180]:ExpressionStatement[43691-43768]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[43225-43260]:VariableDeclarationStatement[43813-43848]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[43273-43289]:VariableDeclarationStatement[43861-43877]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[43302-43929]:IfStatement[43890-44517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43326-43929]:Block[43914-44517]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[43344-43915]:IfStatement[43932-44503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43368-43660]:Block[43956-44248]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[43621-43642]:ExpressionStatement[44209-44230]"
    }, {
      "left" : "if (i <= endChar)",
      "right" : "if (i <= endChar)",
      "info" : "IfStatement[43666-43915]:IfStatement[44254-44503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43684-43915]:Block[44272-44503]"
    }, {
      "left" : "if (i == endChar)",
      "right" : "if (i == endChar)",
      "info" : "IfStatement[43706-43778]:IfStatement[44294-44366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43724-43778]:Block[44312-44366]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43750-43756]:BreakStatement[44338-44344]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[43799-43897]:IfStatement[44387-44485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43818-43897]:Block[44406-44485]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"name\");",
      "right" : "_throwUnquotedSpace(i, \"name\");",
      "info" : "ExpressionStatement[43844-43875]:ExpressionStatement[44432-44463]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "info" : "ExpressionStatement[43942-43997]:ExpressionStatement[44530-44585]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[44055-44076]:ExpressionStatement[44643-44664]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[44121-44254]:IfStatement[44709-44842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44150-44254]:Block[44738-44842]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[44168-44212]:ExpressionStatement[44756-44800]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[44229-44240]:ExpressionStatement[44817-44828]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[44273-44310]:ExpressionStatement[44861-44898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44319-44557]:Block[44907-45145]"
    }, {
      "left" : "TextBuffer tb = _textBuffer;",
      "right" : "TextBuffer tb = _textBuffer;",
      "info" : "VariableDeclarationStatement[44333-44361]:VariableDeclarationStatement[44921-44949]"
    }, {
      "left" : "char[] buf = tb.getTextBuffer();",
      "right" : "char[] buf = tb.getTextBuffer();",
      "info" : "VariableDeclarationStatement[44374-44406]:VariableDeclarationStatement[44962-44994]"
    }, {
      "left" : "int start = tb.getTextOffset();",
      "right" : "int start = tb.getTextOffset();",
      "info" : "VariableDeclarationStatement[44419-44450]:VariableDeclarationStatement[45007-45038]"
    }, {
      "left" : "int len = tb.size();",
      "right" : "int len = tb.size();",
      "info" : "VariableDeclarationStatement[44463-44483]:VariableDeclarationStatement[45051-45071]"
    }, {
      "left" : "return _symbols.findSymbol(buf, start, len, hash);",
      "right" : "return _symbols.findSymbol(buf, start, len, hash);",
      "info" : "ReturnStatement[44497-44547]:ReturnStatement[45085-45135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44881-46936]:Block[45469-47524]"
    }, {
      "left" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (i == '\\'' && isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[44937-45042]:IfStatement[45525-45630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44994-45042]:Block[45582-45630]"
    }, {
      "left" : "return _parseAposName();",
      "right" : "return _parseAposName();",
      "info" : "ReturnStatement[45008-45032]:ReturnStatement[45596-45620]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "right" : "if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES))",
      "info" : "IfStatement[45117-45268]:IfStatement[45705-45856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45169-45268]:Block[45757-45856]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting double-quote to start field name\");",
      "info" : "ExpressionStatement[45183-45258]:ExpressionStatement[45771-45846]"
    }, {
      "left" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
      "right" : "final int[] codes = CharTypes.getInputCodeLatin1JsNames();",
      "info" : "VariableDeclarationStatement[45277-45335]:VariableDeclarationStatement[45865-45923]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[45344-45377]:VariableDeclarationStatement[45932-45965]"
    }, {
      "left" : "boolean firstOk;",
      "right" : "boolean firstOk;",
      "info" : "VariableDeclarationStatement[45460-45476]:VariableDeclarationStatement[46048-46064]"
    }, {
      "left" : "if (i < maxCode)",
      "right" : "if (i < maxCode)",
      "info" : "IfStatement[45486-45694]:IfStatement[46074-46282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45503-45613]:Block[46091-46201]"
    }, {
      "left" : "firstOk = (codes[i] == 0) && (i < INT_0 || i > INT_9);",
      "right" : "firstOk = (codes[i] == 0) && (i < INT_0 || i > INT_9);",
      "info" : "ExpressionStatement[45549-45603]:ExpressionStatement[46137-46191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45619-45694]:Block[46207-46282]"
    }, {
      "left" : "firstOk = Character.isJavaIdentifierPart((char) i);",
      "right" : "firstOk = Character.isJavaIdentifierPart((char) i);",
      "info" : "ExpressionStatement[45633-45684]:ExpressionStatement[46221-46272]"
    }, {
      "left" : "if (!firstOk)",
      "right" : "if (!firstOk)",
      "info" : "IfStatement[45703-45880]:IfStatement[46291-46468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45717-45880]:Block[46305-46468]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "right" : "_reportUnexpectedChar(i, \"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name\");",
      "info" : "ExpressionStatement[45731-45870]:ExpressionStatement[46319-46458]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[45889-45909]:VariableDeclarationStatement[46477-46497]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[45918-45939]:VariableDeclarationStatement[46506-46527]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[45948-45979]:VariableDeclarationStatement[46536-46567]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[45989-46820]:IfStatement[46577-47408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46009-46820]:Block[46597-47408]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[46023-46810]:DoStatement[46611-47398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46026-46786]:Block[46614-47374]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[46044-46071]:VariableDeclarationStatement[46632-46659]"
    }, {
      "left" : "if (ch < maxCode)",
      "right" : "if (ch < maxCode)",
      "info" : "IfStatement[46088-46676]:IfStatement[46676-47264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46106-46402]:Block[46694-46990]"
    }, {
      "left" : "if (codes[ch] != 0)",
      "right" : "if (codes[ch] != 0)",
      "info" : "IfStatement[46128-46384]:IfStatement[46716-46972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46148-46384]:Block[46736-46972]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[46174-46198]:VariableDeclarationStatement[46762-46786]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[46254-46270]:ExpressionStatement[46842-46858]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[46295-46362]:ReturnStatement[46883-46950]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart((char) ch))",
      "right" : "if (!Character.isJavaIdentifierPart((char) ch))",
      "info" : "IfStatement[46408-46676]:IfStatement[46996-47264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46456-46676]:Block[47044-47264]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[46478-46502]:VariableDeclarationStatement[47066-47090]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[46554-46570]:ExpressionStatement[47142-47158]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[46591-46658]:ReturnStatement[47179-47246]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[46693-46749]:ExpressionStatement[47281-47337]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[46766-46772]:ExpressionStatement[47354-47360]"
    }, {
      "left" : "int start = _inputPtr-1;",
      "right" : "int start = _inputPtr-1;",
      "info" : "VariableDeclarationStatement[46829-46853]:VariableDeclarationStatement[47417-47441]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[46862-46878]:ExpressionStatement[47450-47466]"
    }, {
      "left" : "return _handleOddName2(start, hash, codes);",
      "right" : "return _handleOddName2(start, hash, codes);",
      "info" : "ReturnStatement[46887-46930]:ReturnStatement[47475-47518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46999-47925]:Block[47587-48513]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[47056-47076]:VariableDeclarationStatement[47644-47664]"
    }, {
      "left" : "int hash = _hashSeed;",
      "right" : "int hash = _hashSeed;",
      "info" : "VariableDeclarationStatement[47085-47106]:VariableDeclarationStatement[47673-47694]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[47115-47146]:VariableDeclarationStatement[47703-47734]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[47156-47814]:IfStatement[47744-48402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47176-47814]:Block[47764-48402]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[47190-47220]:VariableDeclarationStatement[47778-47808]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[47233-47266]:VariableDeclarationStatement[47821-47854]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[47280-47804]:DoStatement[47868-48392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47283-47780]:Block[47871-48368]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[47301-47328]:VariableDeclarationStatement[47889-47916]"
    }, {
      "left" : "if (ch == '\\'')",
      "right" : "if (ch == '\\'')",
      "info" : "IfStatement[47345-47571]:IfStatement[47933-48159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47361-47571]:Block[47949-48159]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[47383-47405]:VariableDeclarationStatement[47971-47993]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[47426-47444]:ExpressionStatement[48014-48032]"
    }, {
      "left" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "right" : "return _symbols.findSymbol(_inputBuffer, start, ptr - start, hash);",
      "info" : "ReturnStatement[47486-47553]:ReturnStatement[48074-48141]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[47588-47670]:IfStatement[48176-48258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47624-47670]:Block[48212-48258]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47646-47652]:BreakStatement[48234-48240]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + ch;",
      "info" : "ExpressionStatement[47687-47743]:ExpressionStatement[48275-48331]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[47760-47766]:ExpressionStatement[48348-48354]"
    }, {
      "left" : "int start = _inputPtr;",
      "right" : "int start = _inputPtr;",
      "info" : "VariableDeclarationStatement[47824-47846]:VariableDeclarationStatement[48412-48434]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[47855-47871]:ExpressionStatement[48443-48459]"
    }, {
      "left" : "return _parseName2(start, hash, '\\'');",
      "right" : "return _parseName2(start, hash, '\\'');",
      "info" : "ReturnStatement[47881-47919]:ReturnStatement[48469-48507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48152-50133]:Block[48740-50721]"
    }, {
      "left" : "switch (i) {\n        case '\\'':\n            /* [JACKSON-173]: allow single quotes. Unlike with regular\n             * Strings, we'll eagerly parse contents; this so that there's\n             * no need to store information on quote char used.\n             *\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
      "right" : "switch (i) {\n        case '\\'':\n            /* [JACKSON-173]: allow single quotes. Unlike with regular\n             * Strings, we'll eagerly parse contents; this so that there's\n             * no need to store information on quote char used.\n             *\n             * Also, no separation to fast/slow parsing; we'll just do\n             * one regular (~= slowish) parsing, to keep code simple\n             */\n            if (isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {\n                return _handleApos();\n            }\n            break;\n        case 'N':\n            _matchToken(\"NaN\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"NaN\", Double.NaN);\n            }\n            _reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case 'I':\n            _matchToken(\"Infinity\", 1);\n            if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS)) {\n                return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);\n            }\n            _reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");\n            break;\n        case '+': // note: '-' is taken as number\n            if (_inputPtr >= _inputEnd) {\n                if (!loadMore()) {\n                    _reportInvalidEOFInValue();\n                }\n            }\n            return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);\n        }",
      "info" : "SwitchStatement[48239-49746]:SwitchStatement[48827-50334]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[48260-48270]:SwitchCase[48848-48858]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "right" : "if (isEnabled(Feature.ALLOW_SINGLE_QUOTES))",
      "info" : "IfStatement[48664-48761]:IfStatement[49252-49349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48708-48761]:Block[49296-49349]"
    }, {
      "left" : "return _handleApos();",
      "right" : "return _handleApos();",
      "info" : "ReturnStatement[48726-48747]:ReturnStatement[49314-49335]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48774-48780]:BreakStatement[49362-49368]"
    }, {
      "left" : "case 'N':",
      "right" : "case 'N':",
      "info" : "SwitchCase[48789-48798]:SwitchCase[49377-49386]"
    }, {
      "left" : "_matchToken(\"NaN\", 1);",
      "right" : "_matchToken(\"NaN\", 1);",
      "info" : "ExpressionStatement[48811-48833]:ExpressionStatement[49399-49421]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[48846-48965]:IfStatement[49434-49553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48896-48965]:Block[49484-49553]"
    }, {
      "left" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "right" : "return resetAsNaN(\"NaN\", Double.NaN);",
      "info" : "ReturnStatement[48914-48951]:ReturnStatement[49502-49539]"
    }, {
      "left" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[48978-49081]:ExpressionStatement[49566-49669]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49094-49100]:BreakStatement[49682-49688]"
    }, {
      "left" : "case 'I':",
      "right" : "case 'I':",
      "info" : "SwitchCase[49109-49118]:SwitchCase[49697-49706]"
    }, {
      "left" : "_matchToken(\"Infinity\", 1);",
      "right" : "_matchToken(\"Infinity\", 1);",
      "info" : "ExpressionStatement[49131-49158]:ExpressionStatement[49719-49746]"
    }, {
      "left" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "right" : "if (isEnabled(Feature.ALLOW_NON_NUMERIC_NUMBERS))",
      "info" : "IfStatement[49171-49309]:IfStatement[49759-49897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49221-49309]:Block[49809-49897]"
    }, {
      "left" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "right" : "return resetAsNaN(\"Infinity\", Double.POSITIVE_INFINITY);",
      "info" : "ReturnStatement[49239-49295]:ReturnStatement[49827-49883]"
    }, {
      "left" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "right" : "_reportError(\"Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow\");",
      "info" : "ExpressionStatement[49322-49430]:ExpressionStatement[49910-50018]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49443-49449]:BreakStatement[50031-50037]"
    }, {
      "left" : "case '+':",
      "right" : "case '+':",
      "info" : "SwitchCase[49458-49467]:SwitchCase[50046-50055]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[49512-49656]:IfStatement[50100-50244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49540-49656]:Block[50128-50244]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[49558-49642]:IfStatement[50146-50230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49575-49642]:Block[50163-50230]"
    }, {
      "left" : "_reportInvalidEOFInValue();",
      "right" : "_reportInvalidEOFInValue();",
      "info" : "ExpressionStatement[49597-49624]:ExpressionStatement[50185-50212]"
    }, {
      "left" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
      "right" : "return _handleInvalidNumberStart(_inputBuffer[_inputPtr++], false);",
      "info" : "ReturnStatement[49669-49736]:ReturnStatement[50257-50324]"
    }, {
      "left" : "if (Character.isJavaIdentifierStart(i))",
      "right" : "if (Character.isJavaIdentifierStart(i))",
      "info" : "IfStatement[49809-49939]:IfStatement[50397-50527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49849-49939]:Block[50437-50527]"
    }, {
      "left" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
      "right" : "_reportInvalidToken(\"\"+((char) i), \"('true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[49863-49929]:ExpressionStatement[50451-50517]"
    }, {
      "left" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "right" : "_reportUnexpectedChar(i, \"expected a valid value (number, String, array, object, 'true', 'false' or 'null')\");",
      "info" : "ExpressionStatement[49996-50106]:ExpressionStatement[50584-50694]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[50115-50127]:ReturnStatement[50703-50715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50200-51606]:Block[50788-52194]"
    }, {
      "left" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();",
      "info" : "VariableDeclarationStatement[50210-50266]:VariableDeclarationStatement[50798-50854]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[50275-50324]:VariableDeclarationStatement[50863-50912]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[50334-51515]:WhileStatement[50922-52103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50347-51515]:Block[50935-52103]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[50361-50548]:IfStatement[50949-51136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50389-50548]:Block[50977-51136]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[50407-50534]:IfStatement[50995-51122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50424-50534]:Block[51012-51122]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[50446-50516]:ExpressionStatement[51034-51104]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[50561-50596]:VariableDeclarationStatement[51149-51184]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[50609-50625]:VariableDeclarationStatement[51197-51213]"
    }, {
      "left" : "if (i <= '\\\\')",
      "right" : "if (i <= '\\\\')",
      "info" : "IfStatement[50638-51249]:IfStatement[51226-51837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50653-51249]:Block[51241-51837]"
    }, {
      "left" : "if (i == '\\\\')",
      "right" : "if (i == '\\\\')",
      "info" : "IfStatement[50671-51235]:IfStatement[51259-51823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50686-50978]:Block[51274-51566]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[50939-50960]:ExpressionStatement[51527-51548]"
    }, {
      "left" : "if (i <= '\\'')",
      "right" : "if (i <= '\\'')",
      "info" : "IfStatement[50984-51235]:IfStatement[51572-51823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50999-51235]:Block[51587-51823]"
    }, {
      "left" : "if (i == '\\'')",
      "right" : "if (i == '\\'')",
      "info" : "IfStatement[51021-51090]:IfStatement[51609-51678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51036-51090]:Block[51624-51678]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51062-51068]:BreakStatement[51650-51656]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[51111-51217]:IfStatement[51699-51805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51130-51217]:Block[51718-51805]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[51156-51195]:ExpressionStatement[51744-51783]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[51293-51426]:IfStatement[51881-52014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51322-51426]:Block[51910-52014]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[51340-51384]:ExpressionStatement[51928-51972]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[51401-51412]:ExpressionStatement[51989-52000]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[51484-51505]:ExpressionStatement[52072-52093]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[51524-51561]:ExpressionStatement[52112-52149]"
    }, {
      "left" : "return JsonToken.VALUE_STRING;",
      "right" : "return JsonToken.VALUE_STRING;",
      "info" : "ReturnStatement[51570-51600]:ReturnStatement[52158-52188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51707-53101]:Block[52295-53689]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));",
      "info" : "ExpressionStatement[51717-51793]:ExpressionStatement[52305-52381]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[51802-51850]:VariableDeclarationStatement[52390-52438]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[51859-51908]:VariableDeclarationStatement[52447-52496]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[51917-51950]:VariableDeclarationStatement[52505-52538]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[51960-52802]:WhileStatement[52548-53390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51973-52802]:Block[52561-53390]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[51987-52155]:IfStatement[52575-52743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52015-52155]:Block[52603-52743]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[52033-52141]:IfStatement[52621-52729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52050-52141]:Block[52638-52729]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52117-52123]:BreakStatement[52705-52711]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[52168-52201]:VariableDeclarationStatement[52756-52789]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[52214-52230]:VariableDeclarationStatement[52802-52818]"
    }, {
      "left" : "if (i <= maxCode)",
      "right" : "if (i <= maxCode)",
      "info" : "IfStatement[52243-52442]:IfStatement[52831-53030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52261-52358]:Block[52849-52946]"
    }, {
      "left" : "if (codes[i] != 0)",
      "right" : "if (codes[i] != 0)",
      "info" : "IfStatement[52279-52344]:IfStatement[52867-52932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52298-52344]:Block[52886-52932]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52320-52326]:BreakStatement[52908-52914]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[52364-52442]:IfStatement[52952-53030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52404-52442]:Block[52992-53030]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52422-52428]:BreakStatement[53010-53016]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[52455-52467]:ExpressionStatement[53043-53055]"
    }, {
      "left" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "right" : "hash = (hash * CharsToNameCanonicalizer.HASH_MULT) + i;",
      "info" : "ExpressionStatement[52480-52535]:ExpressionStatement[53068-53123]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[52593-52614]:ExpressionStatement[53181-53202]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[52659-52792]:IfStatement[53247-53380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52688-52792]:Block[53276-53380]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[52706-52750]:ExpressionStatement[53294-53338]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[52767-52778]:ExpressionStatement[53355-53366]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[52811-52848]:ExpressionStatement[53399-53436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52857-53095]:Block[53445-53683]"
    }, {
      "left" : "TextBuffer tb = _textBuffer;",
      "right" : "TextBuffer tb = _textBuffer;",
      "info" : "VariableDeclarationStatement[52871-52899]:VariableDeclarationStatement[53459-53487]"
    }, {
      "left" : "char[] buf = tb.getTextBuffer();",
      "right" : "char[] buf = tb.getTextBuffer();",
      "info" : "VariableDeclarationStatement[52912-52944]:VariableDeclarationStatement[53500-53532]"
    }, {
      "left" : "int start = tb.getTextOffset();",
      "right" : "int start = tb.getTextOffset();",
      "info" : "VariableDeclarationStatement[52957-52988]:VariableDeclarationStatement[53545-53576]"
    }, {
      "left" : "int len = tb.size();",
      "right" : "int len = tb.size();",
      "info" : "VariableDeclarationStatement[53001-53021]:VariableDeclarationStatement[53589-53609]"
    }, {
      "left" : "return _symbols.findSymbol(buf, start, len, hash);",
      "right" : "return _symbols.findSymbol(buf, start, len, hash);",
      "info" : "ReturnStatement[53035-53085]:ReturnStatement[53623-53673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53177-54292]:Block[53765-54880]"
    }, {
      "left" : "int ptr = _inputPtr;",
      "right" : "int ptr = _inputPtr;",
      "info" : "VariableDeclarationStatement[53374-53394]:VariableDeclarationStatement[53962-53982]"
    }, {
      "left" : "final int inputLen = _inputEnd;",
      "right" : "final int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[53403-53434]:VariableDeclarationStatement[53991-54022]"
    }, {
      "left" : "if (ptr < inputLen)",
      "right" : "if (ptr < inputLen)",
      "info" : "IfStatement[53444-54061]:IfStatement[54032-54649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53464-54061]:Block[54052-54649]"
    }, {
      "left" : "final int[] codes = _icLatin1;",
      "right" : "final int[] codes = _icLatin1;",
      "info" : "VariableDeclarationStatement[53478-53508]:VariableDeclarationStatement[54066-54096]"
    }, {
      "left" : "final int maxCode = codes.length;",
      "right" : "final int maxCode = codes.length;",
      "info" : "VariableDeclarationStatement[53521-53554]:VariableDeclarationStatement[54109-54142]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[53568-54051]:DoStatement[54156-54639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53571-54027]:Block[54159-54615]"
    }, {
      "left" : "int ch = _inputBuffer[ptr];",
      "right" : "int ch = _inputBuffer[ptr];",
      "info" : "VariableDeclarationStatement[53589-53616]:VariableDeclarationStatement[54177-54204]"
    }, {
      "left" : "if (ch < maxCode && codes[ch] != 0)",
      "right" : "if (ch < maxCode && codes[ch] != 0)",
      "info" : "IfStatement[53633-53990]:IfStatement[54221-54578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53669-53990]:Block[54257-54578]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[53691-53945]:IfStatement[54279-54533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53706-53945]:Block[54294-54533]"
    }, {
      "left" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "right" : "_textBuffer.resetWithShared(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "info" : "ExpressionStatement[53732-53802]:ExpressionStatement[54320-54390]"
    }, {
      "left" : "_inputPtr = ptr+1;",
      "right" : "_inputPtr = ptr+1;",
      "info" : "ExpressionStatement[53827-53845]:ExpressionStatement[54415-54433]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[53916-53923]:ReturnStatement[54504-54511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53966-53972]:BreakStatement[54554-54560]"
    }, {
      "left" : "++ptr;",
      "right" : "++ptr;",
      "info" : "ExpressionStatement[54007-54013]:ExpressionStatement[54595-54601]"
    }, {
      "left" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "right" : "_textBuffer.resetWithCopy(_inputBuffer, _inputPtr, (ptr-_inputPtr));",
      "info" : "ExpressionStatement[54167-54235]:ExpressionStatement[54755-54823]"
    }, {
      "left" : "_inputPtr = ptr;",
      "right" : "_inputPtr = ptr;",
      "info" : "ExpressionStatement[54244-54260]:ExpressionStatement[54832-54848]"
    }, {
      "left" : "_finishString2();",
      "right" : "_finishString2();",
      "info" : "ExpressionStatement[54269-54286]:ExpressionStatement[54857-54874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54353-55740]:Block[54941-56328]"
    }, {
      "left" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "right" : "char[] outBuf = _textBuffer.getCurrentSegment();",
      "info" : "VariableDeclarationStatement[54363-54411]:VariableDeclarationStatement[54951-54999]"
    }, {
      "left" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "right" : "int outPtr = _textBuffer.getCurrentSegmentSize();",
      "info" : "VariableDeclarationStatement[54420-54469]:VariableDeclarationStatement[55008-55057]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[54479-55688]:WhileStatement[55067-56276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54492-55688]:Block[55080-56276]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[54506-54693]:IfStatement[55094-55281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54534-54693]:Block[55122-55281]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[54552-54679]:IfStatement[55140-55267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54569-54679]:Block[55157-55267]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[54591-54661]:ExpressionStatement[55179-55249]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[54706-54741]:VariableDeclarationStatement[55294-55329]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[54754-54770]:VariableDeclarationStatement[55342-55358]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[54783-55422]:IfStatement[55371-56010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54807-55422]:Block[55395-56010]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[54825-55408]:IfStatement[55413-55996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54849-55141]:Block[55437-55729]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[55102-55123]:ExpressionStatement[55690-55711]"
    }, {
      "left" : "if (i <= INT_QUOTE)",
      "right" : "if (i <= INT_QUOTE)",
      "info" : "IfStatement[55147-55408]:IfStatement[55735-55996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55167-55408]:Block[55755-55996]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[55189-55263]:IfStatement[55777-55851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55209-55263]:Block[55797-55851]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55235-55241]:BreakStatement[55823-55829]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[55284-55390]:IfStatement[55872-55978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55303-55390]:Block[55891-55978]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[55329-55368]:ExpressionStatement[55917-55956]"
    }, {
      "left" : "if (outPtr >= outBuf.length)",
      "right" : "if (outPtr >= outBuf.length)",
      "info" : "IfStatement[55466-55599]:IfStatement[56054-56187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55495-55599]:Block[56083-56187]"
    }, {
      "left" : "outBuf = _textBuffer.finishCurrentSegment();",
      "right" : "outBuf = _textBuffer.finishCurrentSegment();",
      "info" : "ExpressionStatement[55513-55557]:ExpressionStatement[56101-56145]"
    }, {
      "left" : "outPtr = 0;",
      "right" : "outPtr = 0;",
      "info" : "ExpressionStatement[55574-55585]:ExpressionStatement[56162-56173]"
    }, {
      "left" : "outBuf[outPtr++] = c;",
      "right" : "outBuf[outPtr++] = c;",
      "info" : "ExpressionStatement[55657-55678]:ExpressionStatement[56245-56266]"
    }, {
      "left" : "_textBuffer.setCurrentLength(outPtr);",
      "right" : "_textBuffer.setCurrentLength(outPtr);",
      "info" : "ExpressionStatement[55697-55734]:ExpressionStatement[56285-56322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55995-57439]:Block[56583-58027]"
    }, {
      "left" : "_tokenIncomplete = false;",
      "right" : "_tokenIncomplete = false;",
      "info" : "ExpressionStatement[56005-56030]:ExpressionStatement[56593-56618]"
    }, {
      "left" : "int inputPtr = _inputPtr;",
      "right" : "int inputPtr = _inputPtr;",
      "info" : "VariableDeclarationStatement[56040-56065]:VariableDeclarationStatement[56628-56653]"
    }, {
      "left" : "int inputLen = _inputEnd;",
      "right" : "int inputLen = _inputEnd;",
      "info" : "VariableDeclarationStatement[56074-56099]:VariableDeclarationStatement[56662-56687]"
    }, {
      "left" : "char[] inputBuffer = _inputBuffer;",
      "right" : "char[] inputBuffer = _inputBuffer;",
      "info" : "VariableDeclarationStatement[56108-56142]:VariableDeclarationStatement[56696-56730]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[56152-57433]:WhileStatement[56740-58021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56165-57433]:Block[56753-58021]"
    }, {
      "left" : "if (inputPtr >= inputLen)",
      "right" : "if (inputPtr >= inputLen)",
      "info" : "IfStatement[56179-56478]:IfStatement[56767-57066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56205-56478]:Block[56793-57066]"
    }, {
      "left" : "_inputPtr = inputPtr;",
      "right" : "_inputPtr = inputPtr;",
      "info" : "ExpressionStatement[56223-56244]:ExpressionStatement[56811-56832]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[56261-56388]:IfStatement[56849-56976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56278-56388]:Block[56866-56976]"
    }, {
      "left" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "right" : "_reportInvalidEOF(\": was expecting closing quote for a string value\");",
      "info" : "ExpressionStatement[56300-56370]:ExpressionStatement[56888-56958]"
    }, {
      "left" : "inputPtr = _inputPtr;",
      "right" : "inputPtr = _inputPtr;",
      "info" : "ExpressionStatement[56405-56426]:ExpressionStatement[56993-57014]"
    }, {
      "left" : "inputLen = _inputEnd;",
      "right" : "inputLen = _inputEnd;",
      "info" : "ExpressionStatement[56443-56464]:ExpressionStatement[57031-57052]"
    }, {
      "left" : "char c = inputBuffer[inputPtr++];",
      "right" : "char c = inputBuffer[inputPtr++];",
      "info" : "VariableDeclarationStatement[56491-56524]:VariableDeclarationStatement[57079-57112]"
    }, {
      "left" : "int i = (int) c;",
      "right" : "int i = (int) c;",
      "info" : "VariableDeclarationStatement[56537-56553]:VariableDeclarationStatement[57125-57141]"
    }, {
      "left" : "if (i <= INT_BACKSLASH)",
      "right" : "if (i <= INT_BACKSLASH)",
      "info" : "IfStatement[56566-57423]:IfStatement[57154-58011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56590-57423]:Block[57178-58011]"
    }, {
      "left" : "if (i == INT_BACKSLASH)",
      "right" : "if (i == INT_BACKSLASH)",
      "info" : "IfStatement[56608-57409]:IfStatement[57196-57997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56632-57050]:Block[57220-57638]"
    }, {
      "left" : "_inputPtr = inputPtr;",
      "right" : "_inputPtr = inputPtr;",
      "info" : "ExpressionStatement[56885-56906]:ExpressionStatement[57473-57494]"
    }, {
      "left" : "c = _decodeEscaped();",
      "right" : "c = _decodeEscaped();",
      "info" : "ExpressionStatement[56927-56948]:ExpressionStatement[57515-57536]"
    }, {
      "left" : "inputPtr = _inputPtr;",
      "right" : "inputPtr = _inputPtr;",
      "info" : "ExpressionStatement[56969-56990]:ExpressionStatement[57557-57578]"
    }, {
      "left" : "inputLen = _inputEnd;",
      "right" : "inputLen = _inputEnd;",
      "info" : "ExpressionStatement[57011-57032]:ExpressionStatement[57599-57620]"
    }, {
      "left" : "if (i <= INT_QUOTE)",
      "right" : "if (i <= INT_QUOTE)",
      "info" : "IfStatement[57056-57409]:IfStatement[57644-57997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57076-57409]:Block[57664-57997]"
    }, {
      "left" : "if (i == INT_QUOTE)",
      "right" : "if (i == INT_QUOTE)",
      "info" : "IfStatement[57098-57218]:IfStatement[57686-57806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57118-57218]:Block[57706-57806]"
    }, {
      "left" : "_inputPtr = inputPtr;",
      "right" : "_inputPtr = inputPtr;",
      "info" : "ExpressionStatement[57144-57165]:ExpressionStatement[57732-57753]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57190-57196]:BreakStatement[57778-57784]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[57239-57391]:IfStatement[57827-57979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57258-57391]:Block[57846-57979]"
    }, {
      "left" : "_inputPtr = inputPtr;",
      "right" : "_inputPtr = inputPtr;",
      "info" : "ExpressionStatement[57284-57305]:ExpressionStatement[57872-57893]"
    }, {
      "left" : "_throwUnquotedSpace(i, \"string value\");",
      "right" : "_throwUnquotedSpace(i, \"string value\");",
      "info" : "ExpressionStatement[57330-57369]:ExpressionStatement[57918-57957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57798-58025]:Block[58386-58613]"
    }, {
      "left" : "if (_inputPtr < _inputEnd || loadMore())",
      "right" : "if (_inputPtr < _inputEnd || loadMore())",
      "info" : "IfStatement[57808-57954]:IfStatement[58396-58542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57849-57954]:Block[58437-58542]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == '\\n')",
      "right" : "if (_inputBuffer[_inputPtr] == '\\n')",
      "info" : "IfStatement[57863-57944]:IfStatement[58451-58532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57900-57944]:Block[58488-58532]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[57918-57930]:ExpressionStatement[58506-58518]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[57963-57979]:ExpressionStatement[58551-58567]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[57988-58019]:ExpressionStatement[58576-58607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58076-59028]:Block[58664-59616]"
    }, {
      "left" : "final int[] codes = _icWS;",
      "right" : "final int[] codes = _icWS;",
      "info" : "VariableDeclarationStatement[58086-58112]:VariableDeclarationStatement[58674-58700]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[58121-58907]:WhileStatement[58709-59495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58165-58907]:Block[58753-59495]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[58179-58219]:VariableDeclarationStatement[58767-58807]"
    }, {
      "left" : "if (i >= 64)",
      "right" : "if (i >= 64)",
      "info" : "IfStatement[58232-58286]:IfStatement[58820-58874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58245-58286]:Block[58833-58874]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[58263-58272]:ReturnStatement[58851-58860]"
    }, {
      "left" : "switch (codes[i]) {\n            case -1:\n                _throwInvalidSpace(i);\n            case 0:\n                return i;\n            case 1:\n                continue;\n            case '\\n':\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case '\\r':\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            }",
      "right" : "switch (codes[i]) {\n            case -1:\n                _throwInvalidSpace(i);\n            case 0:\n                return i;\n            case 1:\n                continue;\n            case '\\n':\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case '\\r':\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            }",
      "info" : "SwitchStatement[58299-58897]:SwitchStatement[58887-59485]"
    }, {
      "left" : "case -1:",
      "right" : "case -1:",
      "info" : "SwitchCase[58331-58339]:SwitchCase[58919-58927]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[58356-58378]:ExpressionStatement[58944-58966]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[58391-58398]:SwitchCase[58979-58986]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[58415-58424]:ReturnStatement[59003-59012]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[58437-58444]:SwitchCase[59025-59032]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[58461-58470]:ContinueStatement[59049-59058]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[58483-58493]:SwitchCase[59071-59081]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[58510-58526]:ExpressionStatement[59098-59114]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[58543-58574]:ExpressionStatement[59131-59162]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58591-58597]:BreakStatement[59179-59185]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[58610-58620]:SwitchCase[59198-59208]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[58637-58647]:ExpressionStatement[59225-59235]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58664-58670]:BreakStatement[59252-59258]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[58683-58692]:SwitchCase[59271-59280]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[58709-58724]:ExpressionStatement[59297-59312]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58741-58747]:BreakStatement[59329-59335]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[58760-58769]:SwitchCase[59348-59357]"
    }, {
      "left" : "if (!_skipYAMLComment())",
      "right" : "if (!_skipYAMLComment())",
      "info" : "IfStatement[58786-58860]:IfStatement[59374-59448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58811-58860]:Block[59399-59448]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[58833-58842]:ReturnStatement[59421-59430]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58877-58883]:BreakStatement[59465-59471]"
    }, {
      "left" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "right" : "throw _constructError(\"Unexpected end-of-input within/between \"+_parsingContext.getTypeDesc()+\" entries\");",
      "info" : "ThrowStatement[58916-59022]:ThrowStatement[59504-59610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59084-59996]:Block[59672-60584]"
    }, {
      "left" : "final int[] codes = _icWS;",
      "right" : "final int[] codes = _icWS;",
      "info" : "VariableDeclarationStatement[59094-59120]:VariableDeclarationStatement[59682-59708]"
    }, {
      "left" : "while (_inputPtr < _inputEnd || loadMore())",
      "right" : "while (_inputPtr < _inputEnd || loadMore())",
      "info" : "WhileStatement[59129-59915]:WhileStatement[59717-60503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59173-59915]:Block[59761-60503]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[59187-59227]:VariableDeclarationStatement[59775-59815]"
    }, {
      "left" : "if (i >= 64)",
      "right" : "if (i >= 64)",
      "info" : "IfStatement[59240-59294]:IfStatement[59828-59882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59253-59294]:Block[59841-59882]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[59271-59280]:ReturnStatement[59859-59868]"
    }, {
      "left" : "switch (codes[i]) {\n            case -1:\n                _throwInvalidSpace(i);\n            case 0:\n                return i;\n            case 1:\n                continue;\n            case '\\n':\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case '\\r':\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            }",
      "right" : "switch (codes[i]) {\n            case -1:\n                _throwInvalidSpace(i);\n            case 0:\n                return i;\n            case 1:\n                continue;\n            case '\\n':\n                ++_currInputRow;\n                _currInputRowStart = _inputPtr;\n                break;\n            case '\\r':\n                _skipCR();\n                break;\n            case '/':\n                _skipComment();\n                break;\n            case '#':\n                if (!_skipYAMLComment()) {\n                    return i;\n                }\n                break;\n            }",
      "info" : "SwitchStatement[59307-59905]:SwitchStatement[59895-60493]"
    }, {
      "left" : "case -1:",
      "right" : "case -1:",
      "info" : "SwitchCase[59339-59347]:SwitchCase[59927-59935]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[59364-59386]:ExpressionStatement[59952-59974]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[59399-59406]:SwitchCase[59987-59994]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[59423-59432]:ReturnStatement[60011-60020]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[59445-59452]:SwitchCase[60033-60040]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[59469-59478]:ContinueStatement[60057-60066]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[59491-59501]:SwitchCase[60079-60089]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[59518-59534]:ExpressionStatement[60106-60122]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[59551-59582]:ExpressionStatement[60139-60170]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59599-59605]:BreakStatement[60187-60193]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[59618-59628]:SwitchCase[60206-60216]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[59645-59655]:ExpressionStatement[60233-60243]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59672-59678]:BreakStatement[60260-60266]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[59691-59700]:SwitchCase[60279-60288]"
    }, {
      "left" : "_skipComment();",
      "right" : "_skipComment();",
      "info" : "ExpressionStatement[59717-59732]:ExpressionStatement[60305-60320]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59749-59755]:BreakStatement[60337-60343]"
    }, {
      "left" : "case '#':",
      "right" : "case '#':",
      "info" : "SwitchCase[59768-59777]:SwitchCase[60356-60365]"
    }, {
      "left" : "if (!_skipYAMLComment())",
      "right" : "if (!_skipYAMLComment())",
      "info" : "IfStatement[59794-59868]:IfStatement[60382-60456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59819-59868]:Block[60407-60456]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[59841-59850]:ReturnStatement[60429-60438]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59885-59891]:BreakStatement[60473-60479]"
    }, {
      "left" : "_handleEOF();",
      "right" : "_handleEOF();",
      "info" : "ExpressionStatement[59958-59971]:ExpressionStatement[60546-60559]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[59980-59990]:ReturnStatement[60568-60578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60053-60708]:Block[60641-61296]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_COMMENTS))",
      "info" : "IfStatement[60063-60267]:IfStatement[60651-60855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60103-60267]:Block[60691-60855]"
    }, {
      "left" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "right" : "_reportUnexpectedChar('/', \"maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)\");",
      "info" : "ExpressionStatement[60117-60257]:ExpressionStatement[60705-60845]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "right" : "if (_inputPtr >= _inputEnd && !loadMore())",
      "info" : "IfStatement[60333-60435]:IfStatement[60921-61023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60376-60435]:Block[60964-61023]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[60390-60425]:ExpressionStatement[60978-61013]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[60444-60479]:VariableDeclarationStatement[61032-61067]"
    }, {
      "left" : "if (c == '/')",
      "right" : "if (c == '/')",
      "info" : "IfStatement[60488-60702]:IfStatement[61076-61290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60502-60538]:Block[61090-61126]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[60516-60528]:ExpressionStatement[61104-61116]"
    }, {
      "left" : "if (c == '*')",
      "right" : "if (c == '*')",
      "info" : "IfStatement[60544-60702]:IfStatement[61132-61290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60558-60598]:Block[61146-61186]"
    }, {
      "left" : "_skipCComment();",
      "right" : "_skipCComment();",
      "info" : "ExpressionStatement[60572-60588]:ExpressionStatement[61160-61176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60604-60702]:Block[61192-61290]"
    }, {
      "left" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "right" : "_reportUnexpectedChar(c, \"was expecting either '*' or '/' for a comment\");",
      "info" : "ExpressionStatement[60618-60692]:ExpressionStatement[61206-61280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60766-61796]:Block[61354-62384]"
    }, {
      "left" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++];\n            if (i <= '*') {\n                if (i == '*') { // end?\n                    if ((_inputPtr >= _inputEnd) && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    continue;\n                }\n                if (i < INT_SPACE) {\n                    if (i == INT_LF) {\n                        ++_currInputRow;\n                        _currInputRowStart = _inputPtr;\n                    } else if (i == INT_CR) {\n                        _skipCR();\n                    } else if (i != INT_TAB) {\n                        _throwInvalidSpace(i);\n                    }\n                }\n            }\n        }",
      "right" : "main_loop:\n        while ((_inputPtr < _inputEnd) || loadMore()) {\n            int i = (int) _inputBuffer[_inputPtr++];\n            if (i <= '*') {\n                if (i == '*') { // end?\n                    if ((_inputPtr >= _inputEnd) && !loadMore()) {\n                        break main_loop;\n                    }\n                    if (_inputBuffer[_inputPtr] == INT_SLASH) {\n                        ++_inputPtr;\n                        return;\n                    }\n                    continue;\n                }\n                if (i < INT_SPACE) {\n                    if (i == INT_LF) {\n                        ++_currInputRow;\n                        _currInputRowStart = _inputPtr;\n                    } else if (i == INT_CR) {\n                        _skipCR();\n                    } else if (i != INT_TAB) {\n                        _throwInvalidSpace(i);\n                    }\n                }\n            }\n        }",
      "info" : "LabeledStatement[60814-61746]:LabeledStatement[61402-62334]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[60833-61746]:WhileStatement[61421-62334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60879-61746]:Block[61467-62334]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[60893-60933]:VariableDeclarationStatement[61481-61521]"
    }, {
      "left" : "if (i <= '*')",
      "right" : "if (i <= '*')",
      "info" : "IfStatement[60946-61736]:IfStatement[61534-62324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60960-61736]:Block[61548-62324]"
    }, {
      "left" : "if (i == '*')",
      "right" : "if (i == '*')",
      "info" : "IfStatement[60978-61334]:IfStatement[61566-61922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60992-61334]:Block[61580-61922]"
    }, {
      "left" : "if ((_inputPtr >= _inputEnd) && !loadMore())",
      "right" : "if ((_inputPtr >= _inputEnd) && !loadMore())",
      "info" : "IfStatement[61022-61131]:IfStatement[61610-61719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61067-61131]:Block[61655-61719]"
    }, {
      "left" : "break main_loop;",
      "right" : "break main_loop;",
      "info" : "BreakStatement[61093-61109]:BreakStatement[61681-61697]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "right" : "if (_inputBuffer[_inputPtr] == INT_SLASH)",
      "info" : "IfStatement[61152-61286]:IfStatement[61740-61874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61194-61286]:Block[61782-61874]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[61220-61232]:ExpressionStatement[61808-61820]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[61257-61264]:ReturnStatement[61845-61852]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[61307-61316]:ContinueStatement[61895-61904]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[61351-61722]:IfStatement[61939-62310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61370-61722]:Block[61958-62310]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[61392-61704]:IfStatement[61980-62292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61409-61529]:Block[61997-62117]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[61435-61451]:ExpressionStatement[62023-62039]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[61476-61507]:ExpressionStatement[62064-62095]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[61535-61704]:IfStatement[62123-62292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61552-61610]:Block[62140-62198]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[61578-61588]:ExpressionStatement[62166-62176]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[61616-61704]:IfStatement[62204-62292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61634-61704]:Block[62222-62292]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[61660-61682]:ExpressionStatement[62248-62270]"
    }, {
      "left" : "_reportInvalidEOF(\" in a comment\");",
      "right" : "_reportInvalidEOF(\" in a comment\");",
      "info" : "ExpressionStatement[61755-61790]:ExpressionStatement[62343-62378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61860-62000]:Block[62448-62588]"
    }, {
      "left" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "right" : "if (!isEnabled(Feature.ALLOW_YAML_COMMENTS))",
      "info" : "IfStatement[61870-61952]:IfStatement[62458-62540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61915-61952]:Block[62503-62540]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61929-61942]:ReturnStatement[62517-62530]"
    }, {
      "left" : "_skipLine();",
      "right" : "_skipLine();",
      "info" : "ExpressionStatement[61961-61973]:ExpressionStatement[62549-62561]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[61982-61994]:ReturnStatement[62570-62582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62058-62630]:Block[62646-63218]"
    }, {
      "left" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "right" : "while ((_inputPtr < _inputEnd) || loadMore())",
      "info" : "WhileStatement[62112-62624]:WhileStatement[62700-63212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62158-62624]:Block[62746-63212]"
    }, {
      "left" : "int i = (int) _inputBuffer[_inputPtr++];",
      "right" : "int i = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[62172-62212]:VariableDeclarationStatement[62760-62800]"
    }, {
      "left" : "if (i < INT_SPACE)",
      "right" : "if (i < INT_SPACE)",
      "info" : "IfStatement[62225-62614]:IfStatement[62813-63202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62244-62614]:Block[62832-63202]"
    }, {
      "left" : "if (i == INT_LF)",
      "right" : "if (i == INT_LF)",
      "info" : "IfStatement[62262-62600]:IfStatement[62850-63188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62279-62414]:Block[62867-63002]"
    }, {
      "left" : "++_currInputRow;",
      "right" : "++_currInputRow;",
      "info" : "ExpressionStatement[62301-62317]:ExpressionStatement[62889-62905]"
    }, {
      "left" : "_currInputRowStart = _inputPtr;",
      "right" : "_currInputRowStart = _inputPtr;",
      "info" : "ExpressionStatement[62338-62369]:ExpressionStatement[62926-62957]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62390-62396]:BreakStatement[62978-62984]"
    }, {
      "left" : "if (i == INT_CR)",
      "right" : "if (i == INT_CR)",
      "info" : "IfStatement[62420-62600]:IfStatement[63008-63188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62437-62514]:Block[63025-63102]"
    }, {
      "left" : "_skipCR();",
      "right" : "_skipCR();",
      "info" : "ExpressionStatement[62459-62469]:ExpressionStatement[63047-63057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62490-62496]:BreakStatement[63078-63084]"
    }, {
      "left" : "if (i != INT_TAB)",
      "right" : "if (i != INT_TAB)",
      "info" : "IfStatement[62520-62600]:IfStatement[63108-63188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62538-62600]:Block[63126-63188]"
    }, {
      "left" : "_throwInvalidSpace(i);",
      "right" : "_throwInvalidSpace(i);",
      "info" : "ExpressionStatement[62560-62582]:ExpressionStatement[63148-63170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62705-64102]:Block[63293-64690]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[62715-62867]:IfStatement[63303-63455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62743-62867]:Block[63331-63455]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[62757-62857]:IfStatement[63345-63445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62774-62857]:Block[63362-63445]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[62792-62843]:ExpressionStatement[63380-63431]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr++];",
      "right" : "char c = _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[62876-62911]:VariableDeclarationStatement[63464-63499]"
    }, {
      "left" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
      "right" : "switch ((int) c) {\n            // First, ones that are mapped\n        case 'b':\n            return '\\b';\n        case 't':\n            return '\\t';\n        case 'n':\n            return '\\n';\n        case 'f':\n            return '\\f';\n        case 'r':\n            return '\\r';\n\n            // And these are to be returned as they are\n        case '\"':\n        case '/':\n        case '\\\\':\n            return c;\n\n        case 'u': // and finally hex-escaped\n            break;\n\n        default:\n            return _handleUnrecognizedCharacterEscape(c);\n        }",
      "info" : "SwitchStatement[62921-63482]:SwitchStatement[63509-64070]"
    }, {
      "left" : "case 'b':",
      "right" : "case 'b':",
      "info" : "SwitchCase[62991-63000]:SwitchCase[63579-63588]"
    }, {
      "left" : "return '\\b';",
      "right" : "return '\\b';",
      "info" : "ReturnStatement[63013-63025]:ReturnStatement[63601-63613]"
    }, {
      "left" : "case 't':",
      "right" : "case 't':",
      "info" : "SwitchCase[63034-63043]:SwitchCase[63622-63631]"
    }, {
      "left" : "return '\\t';",
      "right" : "return '\\t';",
      "info" : "ReturnStatement[63056-63068]:ReturnStatement[63644-63656]"
    }, {
      "left" : "case 'n':",
      "right" : "case 'n':",
      "info" : "SwitchCase[63077-63086]:SwitchCase[63665-63674]"
    }, {
      "left" : "return '\\n';",
      "right" : "return '\\n';",
      "info" : "ReturnStatement[63099-63111]:ReturnStatement[63687-63699]"
    }, {
      "left" : "case 'f':",
      "right" : "case 'f':",
      "info" : "SwitchCase[63120-63129]:SwitchCase[63708-63717]"
    }, {
      "left" : "return '\\f';",
      "right" : "return '\\f';",
      "info" : "ReturnStatement[63142-63154]:ReturnStatement[63730-63742]"
    }, {
      "left" : "case 'r':",
      "right" : "case 'r':",
      "info" : "SwitchCase[63163-63172]:SwitchCase[63751-63760]"
    }, {
      "left" : "return '\\r';",
      "right" : "return '\\r';",
      "info" : "ReturnStatement[63185-63197]:ReturnStatement[63773-63785]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[63263-63272]:SwitchCase[63851-63860]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[63281-63290]:SwitchCase[63869-63878]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[63299-63309]:SwitchCase[63887-63897]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[63322-63331]:ReturnStatement[63910-63919]"
    }, {
      "left" : "case 'u':",
      "right" : "case 'u':",
      "info" : "SwitchCase[63341-63350]:SwitchCase[63929-63938]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63390-63396]:BreakStatement[63978-63984]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[63406-63414]:SwitchCase[63994-64002]"
    }, {
      "left" : "return _handleUnrecognizedCharacterEscape(c);",
      "right" : "return _handleUnrecognizedCharacterEscape(c);",
      "info" : "ReturnStatement[63427-63472]:ReturnStatement[64015-64060]"
    }, {
      "left" : "int value = 0;",
      "right" : "int value = 0;",
      "info" : "VariableDeclarationStatement[63539-63553]:VariableDeclarationStatement[64127-64141]"
    }, {
      "left" : "for (int i = 0; i < 4; ++i)",
      "right" : "for (int i = 0; i < 4; ++i)",
      "info" : "ForStatement[63562-64067]:ForStatement[64150-64655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63590-64067]:Block[64178-64655]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[63604-63772]:IfStatement[64192-64360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63632-63772]:Block[64220-64360]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[63650-63758]:IfStatement[64238-64346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63667-63758]:Block[64255-64346]"
    }, {
      "left" : "_reportInvalidEOF(\" in character escape sequence\");",
      "right" : "_reportInvalidEOF(\" in character escape sequence\");",
      "info" : "ExpressionStatement[63689-63740]:ExpressionStatement[64277-64328]"
    }, {
      "left" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "right" : "int ch = (int) _inputBuffer[_inputPtr++];",
      "info" : "VariableDeclarationStatement[63785-63826]:VariableDeclarationStatement[64373-64414]"
    }, {
      "left" : "int digit = CharTypes.charToHex(ch);",
      "right" : "int digit = CharTypes.charToHex(ch);",
      "info" : "VariableDeclarationStatement[63839-63875]:VariableDeclarationStatement[64427-64463]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[63888-64015]:IfStatement[64476-64603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63903-64015]:Block[64491-64603]"
    }, {
      "left" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "right" : "_reportUnexpectedChar(ch, \"expected a hex-digit for character escape sequence\");",
      "info" : "ExpressionStatement[63921-64001]:ExpressionStatement[64509-64589]"
    }, {
      "left" : "value = (value << 4) | digit;",
      "right" : "value = (value << 4) | digit;",
      "info" : "ExpressionStatement[64028-64057]:ExpressionStatement[64616-64645]"
    }, {
      "left" : "return (char) value;",
      "right" : "return (char) value;",
      "info" : "ReturnStatement[64076-64096]:ReturnStatement[64664-64684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64273-65228]:Block[64861-65816]"
    }, {
      "left" : "final int len = matchStr.length();",
      "right" : "final int len = matchStr.length();",
      "info" : "VariableDeclarationStatement[64283-64317]:VariableDeclarationStatement[64871-64905]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[64327-64703]:DoStatement[64915-65291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64330-64684]:Block[64918-65272]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[64344-64507]:IfStatement[64932-65095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64372-64507]:Block[64960-65095]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[64390-64493]:IfStatement[64978-65081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64407-64493]:Block[64995-65081]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[64429-64475]:ExpressionStatement[65017-65063]"
    }, {
      "left" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "right" : "if (_inputBuffer[_inputPtr] != matchStr.charAt(i))",
      "info" : "IfStatement[64520-64649]:IfStatement[65108-65237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64571-64649]:Block[65159-65237]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[64589-64635]:ExpressionStatement[65177-65223]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[64662-64674]:ExpressionStatement[65250-65262]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[64789-64897]:IfStatement[65377-65485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64817-64897]:Block[65405-65485]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[64831-64887]:IfStatement[65419-65475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64848-64887]:Block[65436-65475]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[64866-64873]:ReturnStatement[65454-65461]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[64906-64939]:VariableDeclarationStatement[65494-65527]"
    }, {
      "left" : "if (c < '0' || c == ']' || c == '}')",
      "right" : "if (c < '0' || c == ']' || c == '}')",
      "info" : "IfStatement[64948-65042]:IfStatement[65536-65630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64985-65042]:Block[65573-65630]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[65025-65032]:ReturnStatement[65613-65620]"
    }, {
      "left" : "if (Character.isJavaIdentifierPart(c))",
      "right" : "if (Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[65097-65206]:IfStatement[65685-65794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65136-65206]:Block[65724-65794]"
    }, {
      "left" : "_reportInvalidToken(matchStr.substring(0, i));",
      "right" : "_reportInvalidToken(matchStr.substring(0, i));",
      "info" : "ExpressionStatement[65150-65196]:ExpressionStatement[65738-65784]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[65215-65222]:ReturnStatement[65803-65810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65621-70169]:Block[66209-70757]"
    }, {
      "left" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "right" : "ByteArrayBuilder builder = _getByteArrayBuilder();",
      "info" : "VariableDeclarationStatement[65631-65681]:VariableDeclarationStatement[66219-66269]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[65712-70163]:WhileStatement[66300-70751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65725-70163]:Block[66313-70751]"
    }, {
      "left" : "char ch;",
      "right" : "char ch;",
      "info" : "VariableDeclarationStatement[65802-65810]:VariableDeclarationStatement[66390-66398]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[65823-66020]:DoStatement[66411-66608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65826-65995]:Block[66414-66583]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[65844-65933]:IfStatement[66432-66521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65872-65933]:Block[66460-66521]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[65894-65915]:ExpressionStatement[66482-66503]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[65950-65981]:ExpressionStatement[66538-66569]"
    }, {
      "left" : "int bits = b64variant.decodeBase64Char(ch);",
      "right" : "int bits = b64variant.decodeBase64Char(ch);",
      "info" : "VariableDeclarationStatement[66033-66076]:VariableDeclarationStatement[66621-66664]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[66089-66422]:IfStatement[66677-67010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66103-66422]:Block[66691-67010]"
    }, {
      "left" : "if (ch == '\"')",
      "right" : "if (ch == '\"')",
      "info" : "IfStatement[66121-66242]:IfStatement[66709-66830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66136-66242]:Block[66724-66830]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[66195-66224]:ReturnStatement[66783-66812]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 0);",
      "info" : "ExpressionStatement[66259-66305]:ExpressionStatement[66847-66893]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[66322-66408]:IfStatement[66910-66996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66336-66408]:Block[66924-66996]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[66381-66390]:ContinueStatement[66969-66978]"
    }, {
      "left" : "int decodedData = bits;",
      "right" : "int decodedData = bits;",
      "info" : "VariableDeclarationStatement[66435-66458]:VariableDeclarationStatement[67023-67046]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[66567-66648]:IfStatement[67155-67236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66595-66648]:Block[67183-67236]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[66613-66634]:ExpressionStatement[67201-67222]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[66661-66692]:ExpressionStatement[67249-67280]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[66705-66744]:ExpressionStatement[67293-67332]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[66757-66849]:IfStatement[67345-67437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66771-66849]:Block[67359-67437]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 1);",
      "info" : "ExpressionStatement[66789-66835]:ExpressionStatement[67377-67423]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[66862-66902]:ExpressionStatement[67450-67490]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[66989-67070]:IfStatement[67577-67658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67017-67070]:Block[67605-67658]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[67035-67056]:ExpressionStatement[67623-67644]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[67083-67114]:ExpressionStatement[67671-67702]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[67127-67166]:ExpressionStatement[67715-67754]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[67237-68531]:IfStatement[67825-69119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67251-68531]:Block[67839-69119]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[67269-67724]:IfStatement[67857-68312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67317-67724]:Block[67905-68312]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[67422-67639]:IfStatement[68010-68227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67466-67639]:Block[68054-68227]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[67492-67510]:ExpressionStatement[68080-68098]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[67535-67563]:ExpressionStatement[68123-68151]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[67588-67617]:ReturnStatement[68176-68205]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 2);",
      "info" : "ExpressionStatement[67660-67706]:ExpressionStatement[68248-68294]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[67741-68439]:IfStatement[68329-69027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67789-68439]:Block[68377-69027]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[67872-67969]:IfStatement[68460-68557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67900-67969]:Block[68488-68557]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[67926-67947]:ExpressionStatement[68514-68535]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[67990-68021]:ExpressionStatement[68578-68609]"
    }, {
      "left" : "if (!b64variant.usesPaddingChar(ch))",
      "right" : "if (!b64variant.usesPaddingChar(ch))",
      "info" : "IfStatement[68042-68240]:IfStatement[68630-68828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68079-68240]:Block[68667-68828]"
    }, {
      "left" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "right" : "throw reportInvalidBase64Char(b64variant, ch, 3, \"expected padding character '\"+b64variant.getPaddingChar()+\"'\");",
      "info" : "ThrowStatement[68105-68218]:ThrowStatement[68693-68806]"
    }, {
      "left" : "decodedData >>= 4;",
      "right" : "decodedData >>= 4;",
      "info" : "ExpressionStatement[68324-68342]:ExpressionStatement[68912-68930]"
    }, {
      "left" : "builder.append(decodedData);",
      "right" : "builder.append(decodedData);",
      "info" : "ExpressionStatement[68363-68391]:ExpressionStatement[68951-68979]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[68412-68421]:ContinueStatement[69000-69009]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[68578-68618]:ExpressionStatement[69166-69206]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[68702-68783]:IfStatement[69290-69371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68730-68783]:Block[69318-69371]"
    }, {
      "left" : "loadMoreGuaranteed();",
      "right" : "loadMoreGuaranteed();",
      "info" : "ExpressionStatement[68748-68769]:ExpressionStatement[69336-69357]"
    }, {
      "left" : "ch = _inputBuffer[_inputPtr++];",
      "right" : "ch = _inputBuffer[_inputPtr++];",
      "info" : "ExpressionStatement[68796-68827]:ExpressionStatement[69384-69415]"
    }, {
      "left" : "bits = b64variant.decodeBase64Char(ch);",
      "right" : "bits = b64variant.decodeBase64Char(ch);",
      "info" : "ExpressionStatement[68840-68879]:ExpressionStatement[69428-69467]"
    }, {
      "left" : "if (bits < 0)",
      "right" : "if (bits < 0)",
      "info" : "IfStatement[68892-69995]:IfStatement[69480-70583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68906-69995]:Block[69494-70583]"
    }, {
      "left" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits != Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[68924-69387]:IfStatement[69512-69975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68972-69387]:Block[69560-69975]"
    }, {
      "left" : "if (ch == '\"' && !b64variant.usesPadding())",
      "right" : "if (ch == '\"' && !b64variant.usesPadding())",
      "info" : "IfStatement[69077-69302]:IfStatement[69665-69890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69121-69302]:Block[69709-69890]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[69147-69165]:ExpressionStatement[69735-69753]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[69190-69226]:ExpressionStatement[69778-69814]"
    }, {
      "left" : "return builder.toByteArray();",
      "right" : "return builder.toByteArray();",
      "info" : "ReturnStatement[69251-69280]:ReturnStatement[69839-69868]"
    }, {
      "left" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "right" : "bits = _decodeBase64Escape(b64variant, ch, 3);",
      "info" : "ExpressionStatement[69323-69369]:ExpressionStatement[69911-69957]"
    }, {
      "left" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "right" : "if (bits == Base64Variant.BASE64_VALUE_PADDING)",
      "info" : "IfStatement[69404-69903]:IfStatement[69992-70491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69452-69903]:Block[70040-70491]"
    }, {
      "left" : "decodedData >>= 2;",
      "right" : "decodedData >>= 2;",
      "info" : "ExpressionStatement[69780-69798]:ExpressionStatement[70368-70386]"
    }, {
      "left" : "builder.appendTwoBytes(decodedData);",
      "right" : "builder.appendTwoBytes(decodedData);",
      "info" : "ExpressionStatement[69819-69855]:ExpressionStatement[70407-70443]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[69876-69885]:ContinueStatement[70464-70473]"
    }, {
      "left" : "decodedData = (decodedData << 6) | bits;",
      "right" : "decodedData = (decodedData << 6) | bits;",
      "info" : "ExpressionStatement[70062-70102]:ExpressionStatement[70650-70690]"
    }, {
      "left" : "builder.appendThreeBytes(decodedData);",
      "right" : "builder.appendThreeBytes(decodedData);",
      "info" : "ExpressionStatement[70115-70153]:ExpressionStatement[70703-70741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70416-70499]:Block[71004-71087]"
    }, {
      "left" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "right" : "_reportInvalidToken(matchedPart, \"'null', 'true', 'false' or NaN\");",
      "info" : "ExpressionStatement[70426-70493]:ExpressionStatement[71014-71081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70607-71298]:Block[71195-71886]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "right" : "StringBuilder sb = new StringBuilder(matchedPart);",
      "info" : "VariableDeclarationStatement[70617-70667]:VariableDeclarationStatement[71205-71255]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[70864-71212]:WhileStatement[71452-71800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70877-71212]:Block[71465-71800]"
    }, {
      "left" : "if (_inputPtr >= _inputEnd)",
      "right" : "if (_inputPtr >= _inputEnd)",
      "info" : "IfStatement[70891-71014]:IfStatement[71479-71602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70919-71014]:Block[71507-71602]"
    }, {
      "left" : "if (!loadMore())",
      "right" : "if (!loadMore())",
      "info" : "IfStatement[70937-71000]:IfStatement[71525-71588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70954-71000]:Block[71542-71588]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[70976-70982]:BreakStatement[71564-71570]"
    }, {
      "left" : "char c = _inputBuffer[_inputPtr];",
      "right" : "char c = _inputBuffer[_inputPtr];",
      "info" : "VariableDeclarationStatement[71027-71060]:VariableDeclarationStatement[71615-71648]"
    }, {
      "left" : "if (!Character.isJavaIdentifierPart(c))",
      "right" : "if (!Character.isJavaIdentifierPart(c))",
      "info" : "IfStatement[71073-71151]:IfStatement[71661-71739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71113-71151]:Block[71701-71739]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[71131-71137]:BreakStatement[71719-71725]"
    }, {
      "left" : "++_inputPtr;",
      "right" : "++_inputPtr;",
      "info" : "ExpressionStatement[71164-71176]:ExpressionStatement[71752-71764]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[71189-71202]:ExpressionStatement[71777-71790]"
    }, {
      "left" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \");",
      "right" : "_reportError(\"Unrecognized token '\"+sb.toString()+\"': was expecting \");",
      "info" : "ExpressionStatement[71221-71292]:ExpressionStatement[71809-71880]"
    } ]
  },
  "interFileMappings" : { }
}