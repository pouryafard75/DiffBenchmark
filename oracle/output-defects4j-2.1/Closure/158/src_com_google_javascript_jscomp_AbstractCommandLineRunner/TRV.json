{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final CommandLineConfig config;",
      "right" : "private final CommandLineConfig config;",
      "info" : "FieldDeclaration[2842-2881]:FieldDeclaration[2842-2881]"
    }, {
      "left" : "private Appendable out;",
      "right" : "private Appendable out;",
      "info" : "FieldDeclaration[2885-2908]:FieldDeclaration[2885-2908]"
    }, {
      "left" : "private final PrintStream err;",
      "right" : "private final PrintStream err;",
      "info" : "FieldDeclaration[2911-2941]:FieldDeclaration[2911-2941]"
    }, {
      "left" : "private A compiler;",
      "right" : "private A compiler;",
      "info" : "FieldDeclaration[2944-2963]:FieldDeclaration[2944-2963]"
    }, {
      "left" : "private Charset inputCharset;",
      "right" : "private Charset inputCharset;",
      "info" : "FieldDeclaration[2967-2996]:FieldDeclaration[2967-2996]"
    }, {
      "left" : "private String outputCharset;",
      "right" : "private String outputCharset;",
      "info" : "FieldDeclaration[2999-3028]:FieldDeclaration[2999-3028]"
    }, {
      "left" : "private boolean testMode = false;",
      "right" : "private boolean testMode = false;",
      "info" : "FieldDeclaration[3032-3065]:FieldDeclaration[3032-3065]"
    }, {
      "left" : "private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;",
      "right" : "private Supplier<List<JSSourceFile>> externsSupplierForTesting = null;",
      "info" : "FieldDeclaration[3068-3138]:FieldDeclaration[3068-3138]"
    }, {
      "left" : "private Supplier<List<JSSourceFile>> inputsSupplierForTesting = null;",
      "right" : "private Supplier<List<JSSourceFile>> inputsSupplierForTesting = null;",
      "info" : "FieldDeclaration[3141-3210]:FieldDeclaration[3141-3210]"
    }, {
      "left" : "private Supplier<List<JSModule>> modulesSupplierForTesting = null;",
      "right" : "private Supplier<List<JSModule>> modulesSupplierForTesting = null;",
      "info" : "FieldDeclaration[3213-3279]:FieldDeclaration[3213-3279]"
    }, {
      "left" : "private Function<Integer, Boolean> exitCodeReceiverForTesting = null;",
      "right" : "private Function<Integer, Boolean> exitCodeReceiverForTesting = null;",
      "info" : "FieldDeclaration[3282-3351]:FieldDeclaration[3282-3351]"
    }, {
      "left" : "private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
      "right" : "private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
      "info" : "FieldDeclaration[3408-3475]:FieldDeclaration[3408-3475]"
    }, {
      "left" : "private static final String OUTPUT_WRAPPER_MARKER = \"%output%\";",
      "right" : "private static final String OUTPUT_WRAPPER_MARKER = \"%output%\";",
      "info" : "FieldDeclaration[3479-3542]:FieldDeclaration[3479-3542]"
    }, {
      "left" : "private final RunTimeStats runTimeStats = new RunTimeStats();",
      "right" : "private final RunTimeStats runTimeStats = new RunTimeStats();",
      "info" : "FieldDeclaration[3546-3607]:FieldDeclaration[3546-3607]"
    }, {
      "left" : "AbstractCommandLineRunner()",
      "right" : "AbstractCommandLineRunner()",
      "info" : "MethodDeclaration[3611-3678]:MethodDeclaration[3611-3678]"
    }, {
      "left" : "AbstractCommandLineRunner(PrintStream out, PrintStream err)",
      "right" : "AbstractCommandLineRunner(PrintStream out, PrintStream err)",
      "info" : "MethodDeclaration[3682-3830]:MethodDeclaration[3682-3830]"
    }, {
      "left" : "void enableTestMode(\n      Supplier<List<JSSourceFile>> externsSupplier,\n      Supplier<List<JSSourceFile>> inputsSupplier,\n      Supplier<List<JSModule>> modulesSupplier,\n      Function<Integer, Boolean> exitCodeReceiver)",
      "right" : "void enableTestMode(\n      Supplier<List<JSSourceFile>> externsSupplier,\n      Supplier<List<JSSourceFile>> inputsSupplier,\n      Supplier<List<JSModule>> modulesSupplier,\n      Function<Integer, Boolean> exitCodeReceiver)",
      "info" : "MethodDeclaration[3834-4888]:MethodDeclaration[3834-4888]"
    }, {
      "left" : "protected boolean isInTestMode()",
      "right" : "protected boolean isInTestMode()",
      "info" : "MethodDeclaration[4892-5004]:MethodDeclaration[4892-5004]"
    }, {
      "left" : "protected CommandLineConfig getCommandLineConfig()",
      "right" : "protected CommandLineConfig getCommandLineConfig()",
      "info" : "MethodDeclaration[5008-5160]:MethodDeclaration[5008-5160]"
    }, {
      "left" : "protected abstract A createCompiler();",
      "right" : "protected abstract A createCompiler();",
      "info" : "MethodDeclaration[5164-5299]:MethodDeclaration[5164-5299]"
    }, {
      "left" : "protected abstract B createOptions();",
      "right" : "protected abstract B createOptions();",
      "info" : "MethodDeclaration[5303-5562]:MethodDeclaration[5303-5562]"
    }, {
      "left" : "protected DiagnosticGroups getDiagnosticGroups()",
      "right" : "protected DiagnosticGroups getDiagnosticGroups()",
      "info" : "MethodDeclaration[5566-5813]:MethodDeclaration[5566-5813]"
    }, {
      "left" : "protected void initOptionsFromFlags(CompilerOptions options)",
      "right" : "protected void initOptionsFromFlags(CompilerOptions options)",
      "info" : "MethodDeclaration[5817-5928]:MethodDeclaration[5817-5928]"
    }, {
      "left" : "final protected A getCompiler()",
      "right" : "final protected A getCompiler()",
      "info" : "MethodDeclaration[8771-8829]:MethodDeclaration[8695-8753]"
    }, {
      "left" : "final public void run()",
      "right" : "final public void run()",
      "info" : "MethodDeclaration[8833-9721]:MethodDeclaration[8757-9645]"
    }, {
      "left" : "protected PrintStream getErrorPrintStream()",
      "right" : "protected PrintStream getErrorPrintStream()",
      "info" : "MethodDeclaration[9725-9903]:MethodDeclaration[9649-9827]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "TypeDeclaration[9907-10182]:TypeDeclaration[9831-10106]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[10053-10101]:FieldDeclaration[9977-10025]"
    }, {
      "left" : "public FlagUsageException(String message)",
      "right" : "public FlagUsageException(String message)",
      "info" : "MethodDeclaration[10107-10178]:MethodDeclaration[10031-10102]"
    }, {
      "left" : "protected List<JSSourceFile> createInputs(List<String> files,\n      boolean allowStdIn) throws FlagUsageException, IOException",
      "right" : "protected List<JSSourceFile> createInputs(List<String> files,\n      boolean allowStdIn) throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[10186-11322]:MethodDeclaration[10110-11246]"
    }, {
      "left" : "private List<JSSourceFile> createSourceInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "right" : "private List<JSSourceFile> createSourceInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[11326-11832]:MethodDeclaration[11250-11756]"
    }, {
      "left" : "private List<JSSourceFile> createExternInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "right" : "private List<JSSourceFile> createExternInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[11836-12291]:MethodDeclaration[11760-12215]"
    }, {
      "left" : "List<JSModule> createJsModules(\n      List<String> specs, List<String> jsFiles)\n      throws FlagUsageException, IOException",
      "right" : "List<JSModule> createJsModules(\n      List<String> specs, List<String> jsFiles)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[12295-15532]:MethodDeclaration[12219-15456]"
    }, {
      "left" : "protected void checkModuleName(String name)\n      throws FlagUsageException",
      "right" : "protected void checkModuleName(String name)\n      throws FlagUsageException",
      "info" : "MethodDeclaration[15536-15909]:MethodDeclaration[15460-15833]"
    }, {
      "left" : "static Map<String, String> parseModuleWrappers(List<String> specs,\n      List<JSModule> modules) throws FlagUsageException",
      "right" : "static Map<String, String> parseModuleWrappers(List<String> specs,\n      List<JSModule> modules) throws FlagUsageException",
      "info" : "MethodDeclaration[15913-17430]:MethodDeclaration[15837-17354]"
    }, {
      "left" : "static void writeOutput(Appendable out, Compiler compiler, String code,\n      String wrapper, String codePlaceholder) throws IOException",
      "right" : "static void writeOutput(Appendable out, Compiler compiler, String code,\n      String wrapper, String codePlaceholder) throws IOException",
      "info" : "MethodDeclaration[17434-18547]:MethodDeclaration[17358-18471]"
    }, {
      "left" : "private static void maybeCreateDirsForPath(String pathPrefix)",
      "right" : "private static void maybeCreateDirsForPath(String pathPrefix)",
      "info" : "MethodDeclaration[18551-19058]:MethodDeclaration[18475-18982]"
    }, {
      "left" : "protected int doRun() throws FlagUsageException, IOException",
      "right" : "protected int doRun() throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[19062-20351]:MethodDeclaration[18986-20275]"
    }, {
      "left" : "int processResults(Result result, List<JSModule> modules, B options)\n       throws FlagUsageException, IOException",
      "right" : "int processResults(Result result, List<JSModule> modules, B options)\n       throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[20355-23700]:MethodDeclaration[20279-23624]"
    }, {
      "left" : "private Charset getInputCharset() throws FlagUsageException",
      "right" : "private Charset getInputCharset() throws FlagUsageException",
      "info" : "MethodDeclaration[23704-24281]:MethodDeclaration[23628-24205]"
    }, {
      "left" : "private String getOutputCharset() throws FlagUsageException",
      "right" : "private String getOutputCharset() throws FlagUsageException",
      "info" : "MethodDeclaration[24285-25083]:MethodDeclaration[24209-25007]"
    }, {
      "left" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "right" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "info" : "MethodDeclaration[25087-25288]:MethodDeclaration[25011-25212]"
    }, {
      "left" : "private boolean shouldGenerateMapPerModule(B options)",
      "right" : "private boolean shouldGenerateMapPerModule(B options)",
      "info" : "MethodDeclaration[25292-25684]:MethodDeclaration[25216-25608]"
    }, {
      "left" : "private Writer openExternExportsStream(B options,\n      String path) throws IOException",
      "right" : "private Writer openExternExportsStream(B options,\n      String path) throws IOException",
      "info" : "MethodDeclaration[25688-26375]:MethodDeclaration[25612-26299]"
    }, {
      "left" : "private String expandCommandLinePath(\n      String path, JSModule forModule)",
      "right" : "private String expandCommandLinePath(\n      String path, JSModule forModule)",
      "info" : "MethodDeclaration[26379-27426]:MethodDeclaration[26303-27350]"
    }, {
      "left" : "String expandSourceMapPath(B options, JSModule forModule)",
      "right" : "String expandSourceMapPath(B options, JSModule forModule)",
      "info" : "MethodDeclaration[27430-27713]:MethodDeclaration[27354-27637]"
    }, {
      "left" : "String expandManifest(JSModule forModule)",
      "right" : "String expandManifest(JSModule forModule)",
      "info" : "MethodDeclaration[27717-27974]:MethodDeclaration[27641-27898]"
    }, {
      "left" : "private Writer fileNameToOutputWriter(String fileName) throws IOException",
      "right" : "private Writer fileNameToOutputWriter(String fileName) throws IOException",
      "info" : "MethodDeclaration[27978-28371]:MethodDeclaration[27902-28295]"
    }, {
      "left" : "protected OutputStream filenameToOutputStream(String fileName)\n      throws IOException",
      "right" : "protected OutputStream filenameToOutputStream(String fileName)\n      throws IOException",
      "info" : "MethodDeclaration[28375-28665]:MethodDeclaration[28299-28589]"
    }, {
      "left" : "private Writer streamToOutputWriter(OutputStream stream)\n      throws IOException",
      "right" : "private Writer streamToOutputWriter(OutputStream stream)\n      throws IOException",
      "info" : "MethodDeclaration[28669-29009]:MethodDeclaration[28593-28933]"
    }, {
      "left" : "private void outputSourceMap(B options)\n      throws IOException",
      "right" : "private void outputSourceMap(B options)\n      throws IOException",
      "info" : "MethodDeclaration[29013-29491]:MethodDeclaration[28937-29415]"
    }, {
      "left" : "private String getMapPath(String outputFile)",
      "right" : "private String getMapPath(String outputFile)",
      "info" : "MethodDeclaration[29495-30499]:MethodDeclaration[29419-30423]"
    }, {
      "left" : "private void outputNameMaps(B options) throws FlagUsageException,\n      IOException",
      "right" : "private void outputNameMaps(B options) throws FlagUsageException,\n      IOException",
      "info" : "MethodDeclaration[30503-32678]:MethodDeclaration[30427-32602]"
    }, {
      "left" : "static void createDefineOrTweakReplacements(List<String> definitions,\n      CompilerOptions options, boolean tweaks)",
      "right" : "static void createDefineOrTweakReplacements(List<String> definitions,\n      CompilerOptions options, boolean tweaks)",
      "info" : "MethodDeclaration[32682-35176]:MethodDeclaration[32606-35100]"
    }, {
      "left" : "private boolean shouldGenerateManifestPerModule()",
      "right" : "private boolean shouldGenerateManifestPerModule()",
      "info" : "MethodDeclaration[35180-35502]:MethodDeclaration[35104-35426]"
    }, {
      "left" : "private void outputManifest() throws IOException",
      "right" : "private void outputManifest() throws IOException",
      "info" : "MethodDeclaration[35506-36488]:MethodDeclaration[35430-36412]"
    }, {
      "left" : "void printModuleGraphManifestTo(\n      JSModuleGraph graph, Appendable out) throws IOException",
      "right" : "void printModuleGraphManifestTo(\n      JSModuleGraph graph, Appendable out) throws IOException",
      "info" : "MethodDeclaration[36492-37290]:MethodDeclaration[36416-37214]"
    }, {
      "left" : "private void printManifestTo(Iterable<CompilerInput> inputs, Appendable out)\n      throws IOException",
      "right" : "private void printManifestTo(Iterable<CompilerInput> inputs, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[37294-37716]:MethodDeclaration[37218-37640]"
    }, {
      "left" : "RunTimeStats",
      "right" : "RunTimeStats",
      "info" : "TypeDeclaration[37720-39019]:TypeDeclaration[37644-38943]"
    }, {
      "left" : "private long bestRunTime = Long.MAX_VALUE;",
      "right" : "private long bestRunTime = Long.MAX_VALUE;",
      "info" : "FieldDeclaration[37753-37795]:FieldDeclaration[37677-37719]"
    }, {
      "left" : "private long worstRunTime = Long.MIN_VALUE;",
      "right" : "private long worstRunTime = Long.MIN_VALUE;",
      "info" : "FieldDeclaration[37800-37843]:FieldDeclaration[37724-37767]"
    }, {
      "left" : "private long lastStartTime = 0;",
      "right" : "private long lastStartTime = 0;",
      "info" : "FieldDeclaration[37848-37879]:FieldDeclaration[37772-37803]"
    }, {
      "left" : "private List<List<String>> loopedPassesInBestRun = null;",
      "right" : "private List<List<String>> loopedPassesInBestRun = null;",
      "info" : "FieldDeclaration[37884-37940]:FieldDeclaration[37808-37864]"
    }, {
      "left" : "private void recordStartRun()",
      "right" : "private void recordStartRun()",
      "info" : "MethodDeclaration[37946-38121]:MethodDeclaration[37870-38045]"
    }, {
      "left" : "private void recordEndRun()",
      "right" : "private void recordEndRun()",
      "info" : "MethodDeclaration[38127-38491]:MethodDeclaration[38051-38415]"
    }, {
      "left" : "private void outputBestPhaseOrdering()",
      "right" : "private void outputBestPhaseOrdering()",
      "info" : "MethodDeclaration[38497-39015]:MethodDeclaration[38421-38939]"
    }, {
      "left" : "private boolean printTree = false;",
      "right" : "private boolean printTree = false;",
      "info" : "FieldDeclaration[39343-39377]:FieldDeclaration[39267-39301]"
    }, {
      "left" : "CommandLineConfig setPrintTree(boolean printTree)",
      "right" : "CommandLineConfig setPrintTree(boolean printTree)",
      "info" : "MethodDeclaration[39383-39540]:MethodDeclaration[39307-39464]"
    }, {
      "left" : "private boolean computePhaseOrdering = false;",
      "right" : "private boolean computePhaseOrdering = false;",
      "info" : "FieldDeclaration[39546-39591]:FieldDeclaration[39470-39515]"
    }, {
      "left" : "CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering)",
      "right" : "CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering)",
      "info" : "MethodDeclaration[39597-39868]:MethodDeclaration[39521-39792]"
    }, {
      "left" : "private boolean printAst = false;",
      "right" : "private boolean printAst = false;",
      "info" : "FieldDeclaration[39874-39907]:FieldDeclaration[39798-39831]"
    }, {
      "left" : "CommandLineConfig setPrintAst(boolean printAst)",
      "right" : "CommandLineConfig setPrintAst(boolean printAst)",
      "info" : "MethodDeclaration[39913-40122]:MethodDeclaration[39837-40046]"
    }, {
      "left" : "private boolean printPassGraph = false;",
      "right" : "private boolean printPassGraph = false;",
      "info" : "FieldDeclaration[40128-40167]:FieldDeclaration[40052-40091]"
    }, {
      "left" : "CommandLineConfig setPrintPassGraph(boolean printPassGraph)",
      "right" : "CommandLineConfig setPrintPassGraph(boolean printPassGraph)",
      "info" : "MethodDeclaration[40173-40382]:MethodDeclaration[40097-40306]"
    }, {
      "left" : "private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
      "right" : "private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
      "info" : "FieldDeclaration[40388-40464]:FieldDeclaration[40312-40388]"
    }, {
      "left" : "CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode)",
      "right" : "CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode)",
      "info" : "MethodDeclaration[40470-40652]:MethodDeclaration[40394-40576]"
    }, {
      "left" : "private String loggingLevel = Level.WARNING.getName();",
      "right" : "private String loggingLevel = Level.WARNING.getName();",
      "info" : "FieldDeclaration[40658-40712]:FieldDeclaration[40582-40636]"
    }, {
      "left" : "CommandLineConfig setLoggingLevel(String loggingLevel)",
      "right" : "CommandLineConfig setLoggingLevel(String loggingLevel)",
      "info" : "MethodDeclaration[40718-41037]:MethodDeclaration[40642-40961]"
    }, {
      "left" : "private final List<String> externs = Lists.newArrayList();",
      "right" : "private final List<String> externs = Lists.newArrayList();",
      "info" : "FieldDeclaration[41043-41101]:FieldDeclaration[40967-41025]"
    }, {
      "left" : "CommandLineConfig setExterns(List<String> externs)",
      "right" : "CommandLineConfig setExterns(List<String> externs)",
      "info" : "MethodDeclaration[41107-41337]:MethodDeclaration[41031-41261]"
    }, {
      "left" : "private final List<String> js = Lists.newArrayList();",
      "right" : "private final List<String> js = Lists.newArrayList();",
      "info" : "FieldDeclaration[41343-41396]:FieldDeclaration[41267-41320]"
    }, {
      "left" : "CommandLineConfig setJs(List<String> js)",
      "right" : "CommandLineConfig setJs(List<String> js)",
      "info" : "MethodDeclaration[41402-41592]:MethodDeclaration[41326-41516]"
    }, {
      "left" : "private String jsOutputFile = \"\";",
      "right" : "private String jsOutputFile = \"\";",
      "info" : "FieldDeclaration[41598-41631]:FieldDeclaration[41522-41555]"
    }, {
      "left" : "CommandLineConfig setJsOutputFile(String jsOutputFile)",
      "right" : "CommandLineConfig setJsOutputFile(String jsOutputFile)",
      "info" : "MethodDeclaration[41637-41852]:MethodDeclaration[41561-41776]"
    }, {
      "left" : "private final List<String> module = Lists.newArrayList();",
      "right" : "private final List<String> module = Lists.newArrayList();",
      "info" : "FieldDeclaration[41858-41915]:FieldDeclaration[41782-41839]"
    }, {
      "left" : "CommandLineConfig setModule(List<String> module)",
      "right" : "CommandLineConfig setModule(List<String> module)",
      "info" : "MethodDeclaration[41921-42471]:MethodDeclaration[41845-42395]"
    }, {
      "left" : "private String variableMapInputFile = \"\";",
      "right" : "private String variableMapInputFile = \"\";",
      "info" : "FieldDeclaration[42477-42518]:FieldDeclaration[42401-42442]"
    }, {
      "left" : "CommandLineConfig setVariableMapInputFile(String variableMapInputFile)",
      "right" : "CommandLineConfig setVariableMapInputFile(String variableMapInputFile)",
      "info" : "MethodDeclaration[42524-42810]:MethodDeclaration[42448-42734]"
    }, {
      "left" : "private String propertyMapInputFile = \"\";",
      "right" : "private String propertyMapInputFile = \"\";",
      "info" : "FieldDeclaration[42816-42857]:FieldDeclaration[42740-42781]"
    }, {
      "left" : "CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile)",
      "right" : "CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile)",
      "info" : "MethodDeclaration[42863-43149]:MethodDeclaration[42787-43073]"
    }, {
      "left" : "private String variableMapOutputFile = \"\";",
      "right" : "private String variableMapOutputFile = \"\";",
      "info" : "FieldDeclaration[43155-43197]:FieldDeclaration[43079-43121]"
    }, {
      "left" : "CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile)",
      "right" : "CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile)",
      "info" : "MethodDeclaration[43203-43478]:MethodDeclaration[43127-43402]"
    }, {
      "left" : "private boolean createNameMapFiles = false;",
      "right" : "private boolean createNameMapFiles = false;",
      "info" : "FieldDeclaration[43484-43527]:FieldDeclaration[43408-43451]"
    }, {
      "left" : "CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles)",
      "right" : "CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles)",
      "info" : "MethodDeclaration[43533-43984]:MethodDeclaration[43457-43908]"
    }, {
      "left" : "private String propertyMapOutputFile = \"\";",
      "right" : "private String propertyMapOutputFile = \"\";",
      "info" : "FieldDeclaration[43990-44032]:FieldDeclaration[43914-43956]"
    }, {
      "left" : "CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile)",
      "right" : "CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile)",
      "info" : "MethodDeclaration[44038-44313]:MethodDeclaration[43962-44237]"
    }, {
      "left" : "private CodingConvention codingConvention = new DefaultCodingConvention();",
      "right" : "private CodingConvention codingConvention = new DefaultCodingConvention();",
      "info" : "FieldDeclaration[44319-44393]:FieldDeclaration[44243-44317]"
    }, {
      "left" : "CommandLineConfig setCodingConvention(CodingConvention codingConvention)",
      "right" : "CommandLineConfig setCodingConvention(CodingConvention codingConvention)",
      "info" : "MethodDeclaration[44399-44608]:MethodDeclaration[44323-44532]"
    }, {
      "left" : "private int summaryDetailLevel = 1;",
      "right" : "private int summaryDetailLevel = 1;",
      "info" : "FieldDeclaration[44614-44649]:FieldDeclaration[44538-44573]"
    }, {
      "left" : "CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel)",
      "right" : "CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel)",
      "info" : "MethodDeclaration[44655-45098]:MethodDeclaration[44579-45022]"
    }, {
      "left" : "private String outputWrapper = \"\";",
      "right" : "private String outputWrapper = \"\";",
      "info" : "FieldDeclaration[45104-45138]:FieldDeclaration[45028-45062]"
    }, {
      "left" : "CommandLineConfig setOutputWrapper(String outputWrapper)",
      "right" : "CommandLineConfig setOutputWrapper(String outputWrapper)",
      "info" : "MethodDeclaration[45144-45415]:MethodDeclaration[45068-45339]"
    }, {
      "left" : "private final List<String> moduleWrapper = Lists.newArrayList();",
      "right" : "private final List<String> moduleWrapper = Lists.newArrayList();",
      "info" : "FieldDeclaration[45421-45485]:FieldDeclaration[45345-45409]"
    }, {
      "left" : "CommandLineConfig setModuleWrapper(List<String> moduleWrapper)",
      "right" : "CommandLineConfig setModuleWrapper(List<String> moduleWrapper)",
      "info" : "MethodDeclaration[45491-45916]:MethodDeclaration[45415-45840]"
    }, {
      "left" : "private String moduleOutputPathPrefix = \"\";",
      "right" : "private String moduleOutputPathPrefix = \"\";",
      "info" : "FieldDeclaration[45922-45965]:FieldDeclaration[45846-45889]"
    }, {
      "left" : "CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix)",
      "right" : "CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix)",
      "info" : "MethodDeclaration[45971-46321]:MethodDeclaration[45895-46245]"
    }, {
      "left" : "private String createSourceMap = \"\";",
      "right" : "private String createSourceMap = \"\";",
      "info" : "FieldDeclaration[46327-46363]:FieldDeclaration[46251-46287]"
    }, {
      "left" : "CommandLineConfig setCreateSourceMap(String createSourceMap)",
      "right" : "CommandLineConfig setCreateSourceMap(String createSourceMap)",
      "info" : "MethodDeclaration[46369-46796]:MethodDeclaration[46293-46720]"
    }, {
      "left" : "private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
      "right" : "private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
      "info" : "FieldDeclaration[46802-46889]:FieldDeclaration[46726-46813]"
    }, {
      "left" : "CommandLineConfig setSourceMapDetailLevel(SourceMap.DetailLevel level)",
      "right" : "CommandLineConfig setSourceMapDetailLevel(SourceMap.DetailLevel level)",
      "info" : "MethodDeclaration[46895-47114]:MethodDeclaration[46819-47038]"
    }, {
      "left" : "private SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
      "right" : "private SourceMap.Format sourceMapFormat =\n      SourceMap.Format.DEFAULT;",
      "info" : "FieldDeclaration[47120-47194]:FieldDeclaration[47044-47118]"
    }, {
      "left" : "CommandLineConfig setSourceMapFormat(SourceMap.Format format)",
      "right" : "CommandLineConfig setSourceMapFormat(SourceMap.Format format)",
      "info" : "MethodDeclaration[47200-47406]:MethodDeclaration[47124-47330]"
    }, {
      "left" : "private final List<String> define = Lists.newArrayList();",
      "right" : "private final List<String> define = Lists.newArrayList();",
      "info" : "FieldDeclaration[48156-48213]:FieldDeclaration[47557-47614]"
    }, {
      "left" : "CommandLineConfig setDefine(List<String> define)",
      "right" : "CommandLineConfig setDefine(List<String> define)",
      "info" : "MethodDeclaration[48219-48677]:MethodDeclaration[47620-48078]"
    }, {
      "left" : "private final List<String> tweak = Lists.newArrayList();",
      "right" : "private final List<String> tweak = Lists.newArrayList();",
      "info" : "FieldDeclaration[48683-48739]:FieldDeclaration[48084-48140]"
    }, {
      "left" : "CommandLineConfig setTweak(List<String> tweak)",
      "right" : "CommandLineConfig setTweak(List<String> tweak)",
      "info" : "MethodDeclaration[48745-49170]:MethodDeclaration[48146-48571]"
    }, {
      "left" : "private TweakProcessing tweakProcessing = TweakProcessing.OFF;",
      "right" : "private TweakProcessing tweakProcessing = TweakProcessing.OFF;",
      "info" : "FieldDeclaration[49176-49238]:FieldDeclaration[48577-48639]"
    }, {
      "left" : "CommandLineConfig setTweakProcessing(TweakProcessing tweakProcessing)",
      "right" : "CommandLineConfig setTweakProcessing(TweakProcessing tweakProcessing)",
      "info" : "MethodDeclaration[49244-49469]:MethodDeclaration[48645-48870]"
    }, {
      "left" : "private String charset = \"\";",
      "right" : "private String charset = \"\";",
      "info" : "FieldDeclaration[49475-49503]:FieldDeclaration[48876-48904]"
    }, {
      "left" : "CommandLineConfig setCharset(String charset)",
      "right" : "CommandLineConfig setCharset(String charset)",
      "info" : "MethodDeclaration[49509-49662]:MethodDeclaration[48910-49063]"
    }, {
      "left" : "private boolean manageClosureDependencies = false;",
      "right" : "private boolean manageClosureDependencies = false;",
      "info" : "FieldDeclaration[49668-49718]:FieldDeclaration[49069-49119]"
    }, {
      "left" : "CommandLineConfig setManageClosureDependencies(boolean newVal)",
      "right" : "CommandLineConfig setManageClosureDependencies(boolean newVal)",
      "info" : "MethodDeclaration[49724-49993]:MethodDeclaration[49125-49394]"
    }, {
      "left" : "private List<String> closureEntryPoints = ImmutableList.of();",
      "right" : "private List<String> closureEntryPoints = ImmutableList.of();",
      "info" : "FieldDeclaration[49999-50060]:FieldDeclaration[49400-49461]"
    }, {
      "left" : "CommandLineConfig setClosureEntryPoints(List<String> entryPoints)",
      "right" : "CommandLineConfig setClosureEntryPoints(List<String> entryPoints)",
      "info" : "MethodDeclaration[50066-50391]:MethodDeclaration[49467-49792]"
    }, {
      "left" : "private String outputManifest = \"\";",
      "right" : "private String outputManifest = \"\";",
      "info" : "FieldDeclaration[50397-50432]:FieldDeclaration[49798-49833]"
    }, {
      "left" : "CommandLineConfig setOutputManifest(String outputManifest)",
      "right" : "CommandLineConfig setOutputManifest(String outputManifest)",
      "info" : "MethodDeclaration[50438-50637]:MethodDeclaration[49839-50038]"
    }, {
      "left" : "private boolean acceptConstKeyword = false;",
      "right" : "private boolean acceptConstKeyword = false;",
      "info" : "FieldDeclaration[50643-50686]:FieldDeclaration[50044-50087]"
    }, {
      "left" : "CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword)",
      "right" : "CommandLineConfig setAcceptConstKeyword(boolean acceptConstKeyword)",
      "info" : "MethodDeclaration[50692-50910]:MethodDeclaration[50093-50311]"
    }, {
      "left" : "private String languageIn = \"\";",
      "right" : "private String languageIn = \"\";",
      "info" : "FieldDeclaration[50916-50947]:FieldDeclaration[50317-50348]"
    }, {
      "left" : "CommandLineConfig setLanguageIn(String languageIn)",
      "right" : "CommandLineConfig setLanguageIn(String languageIn)",
      "info" : "MethodDeclaration[50953-51217]:MethodDeclaration[50354-50618]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3639-3678]:Block[3639-3678]"
    }, {
      "left" : "this(System.out, System.err);",
      "right" : "this(System.out, System.err);",
      "info" : "ConstructorInvocation[3645-3674]:ConstructorInvocation[3645-3674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3742-3830]:Block[3742-3830]"
    }, {
      "left" : "this.config = new CommandLineConfig();",
      "right" : "this.config = new CommandLineConfig();",
      "info" : "ExpressionStatement[3748-3786]:ExpressionStatement[3748-3786]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[3791-3806]:ExpressionStatement[3791-3806]"
    }, {
      "left" : "this.err = err;",
      "right" : "this.err = err;",
      "info" : "ExpressionStatement[3811-3826]:ExpressionStatement[3811-3826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4554-4888]:Block[4554-4888]"
    }, {
      "left" : "Preconditions.checkArgument(\n        inputsSupplier == null ^ modulesSupplier == null);",
      "right" : "Preconditions.checkArgument(\n        inputsSupplier == null ^ modulesSupplier == null);",
      "info" : "ExpressionStatement[4560-4647]:ExpressionStatement[4560-4647]"
    }, {
      "left" : "testMode = true;",
      "right" : "testMode = true;",
      "info" : "ExpressionStatement[4652-4668]:ExpressionStatement[4652-4668]"
    }, {
      "left" : "this.externsSupplierForTesting = externsSupplier;",
      "right" : "this.externsSupplierForTesting = externsSupplier;",
      "info" : "ExpressionStatement[4673-4722]:ExpressionStatement[4673-4722]"
    }, {
      "left" : "this.inputsSupplierForTesting = inputsSupplier;",
      "right" : "this.inputsSupplierForTesting = inputsSupplier;",
      "info" : "ExpressionStatement[4727-4774]:ExpressionStatement[4727-4774]"
    }, {
      "left" : "this.modulesSupplierForTesting = modulesSupplier;",
      "right" : "this.modulesSupplierForTesting = modulesSupplier;",
      "info" : "ExpressionStatement[4779-4828]:ExpressionStatement[4779-4828]"
    }, {
      "left" : "this.exitCodeReceiverForTesting = exitCodeReceiver;",
      "right" : "this.exitCodeReceiverForTesting = exitCodeReceiver;",
      "info" : "ExpressionStatement[4833-4884]:ExpressionStatement[4833-4884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4978-5004]:Block[4978-5004]"
    }, {
      "left" : "return testMode;",
      "right" : "return testMode;",
      "info" : "ReturnStatement[4984-5000]:ReturnStatement[4984-5000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5136-5160]:Block[5136-5160]"
    }, {
      "left" : "return config;",
      "right" : "return config;",
      "info" : "ReturnStatement[5142-5156]:ReturnStatement[5142-5156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5694-5813]:Block[5694-5813]"
    }, {
      "left" : "if (compiler == null)",
      "right" : "if (compiler == null)",
      "info" : "IfStatement[5700-5766]:IfStatement[5700-5766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5722-5766]:Block[5722-5766]"
    }, {
      "left" : "return new DiagnosticGroups();",
      "right" : "return new DiagnosticGroups();",
      "info" : "ReturnStatement[5730-5760]:ReturnStatement[5730-5760]"
    }, {
      "left" : "return compiler.getDiagnosticGroups();",
      "right" : "return compiler.getDiagnosticGroups();",
      "info" : "ReturnStatement[5771-5809]:ReturnStatement[5771-5809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5926-5928]:Block[5926-5928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8803-8829]:Block[8727-8753]"
    }, {
      "left" : "return compiler;",
      "right" : "return compiler;",
      "info" : "ReturnStatement[8809-8825]:ReturnStatement[8733-8749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8959-9721]:Block[8883-9645]"
    }, {
      "left" : "int result = 0;",
      "right" : "int result = 0;",
      "info" : "VariableDeclarationStatement[8965-8980]:VariableDeclarationStatement[8889-8904]"
    }, {
      "left" : "int runs = 1;",
      "right" : "int runs = 1;",
      "info" : "VariableDeclarationStatement[8985-8998]:VariableDeclarationStatement[8909-8922]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[9003-9132]:IfStatement[8927-9056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9036-9132]:Block[8960-9056]"
    }, {
      "left" : "runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;",
      "right" : "runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;",
      "info" : "ExpressionStatement[9044-9087]:ExpressionStatement[8968-9011]"
    }, {
      "left" : "PhaseOptimizer.randomizeLoops();",
      "right" : "PhaseOptimizer.randomizeLoops();",
      "info" : "ExpressionStatement[9094-9126]:ExpressionStatement[9018-9050]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9137-9510]:TryStatement[9061-9434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9141-9312]:Block[9065-9236]"
    }, {
      "left" : "for (int i = 0; i < runs && result == 0; i++)",
      "right" : "for (int i = 0; i < runs && result == 0; i++)",
      "info" : "ForStatement[9149-9306]:ForStatement[9073-9230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9195-9306]:Block[9119-9230]"
    }, {
      "left" : "runTimeStats.recordStartRun();",
      "right" : "runTimeStats.recordStartRun();",
      "info" : "ExpressionStatement[9205-9235]:ExpressionStatement[9129-9159]"
    }, {
      "left" : "result = doRun();",
      "right" : "result = doRun();",
      "info" : "ExpressionStatement[9244-9261]:ExpressionStatement[9168-9185]"
    }, {
      "left" : "runTimeStats.recordEndRun();",
      "right" : "runTimeStats.recordEndRun();",
      "info" : "ExpressionStatement[9270-9298]:ExpressionStatement[9194-9222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9368-9436]:Block[9292-9360]"
    }, {
      "left" : "System.err.println(e.getMessage());",
      "right" : "System.err.println(e.getMessage());",
      "info" : "ExpressionStatement[9376-9411]:ExpressionStatement[9300-9335]"
    }, {
      "left" : "result = -1;",
      "right" : "result = -1;",
      "info" : "ExpressionStatement[9418-9430]:ExpressionStatement[9342-9354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9457-9510]:Block[9381-9434]"
    }, {
      "left" : "t.printStackTrace();",
      "right" : "t.printStackTrace();",
      "info" : "ExpressionStatement[9465-9485]:ExpressionStatement[9389-9409]"
    }, {
      "left" : "result = -2;",
      "right" : "result = -2;",
      "info" : "ExpressionStatement[9492-9504]:ExpressionStatement[9416-9428]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[9516-9602]:IfStatement[9440-9526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9549-9602]:Block[9473-9526]"
    }, {
      "left" : "runTimeStats.outputBestPhaseOrdering();",
      "right" : "runTimeStats.outputBestPhaseOrdering();",
      "info" : "ExpressionStatement[9557-9596]:ExpressionStatement[9481-9520]"
    }, {
      "left" : "if (testMode)",
      "right" : "if (testMode)",
      "info" : "IfStatement[9608-9717]:IfStatement[9532-9641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9622-9677]:Block[9546-9601]"
    }, {
      "left" : "exitCodeReceiverForTesting.apply(result);",
      "right" : "exitCodeReceiverForTesting.apply(result);",
      "info" : "ExpressionStatement[9630-9671]:ExpressionStatement[9554-9595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9683-9717]:Block[9607-9641]"
    }, {
      "left" : "System.exit(result);",
      "right" : "System.exit(result);",
      "info" : "ExpressionStatement[9691-9711]:ExpressionStatement[9615-9635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9882-9903]:Block[9806-9827]"
    }, {
      "left" : "return err;",
      "right" : "return err;",
      "info" : "ReturnStatement[9888-9899]:ReturnStatement[9812-9823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10149-10178]:Block[10073-10102]"
    }, {
      "left" : "super(message);",
      "right" : "super(message);",
      "info" : "SuperConstructorInvocation[10157-10172]:SuperConstructorInvocation[10081-10096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10679-11322]:Block[10603-11246]"
    }, {
      "left" : "List<JSSourceFile> inputs = new ArrayList<JSSourceFile>(files.size());",
      "right" : "List<JSSourceFile> inputs = new ArrayList<JSSourceFile>(files.size());",
      "info" : "VariableDeclarationStatement[10685-10755]:VariableDeclarationStatement[10609-10679]"
    }, {
      "left" : "boolean usingStdin = false;",
      "right" : "boolean usingStdin = false;",
      "info" : "VariableDeclarationStatement[10760-10787]:VariableDeclarationStatement[10684-10711]"
    }, {
      "left" : "for (String filename : files)",
      "right" : "for (String filename : files)",
      "info" : "EnhancedForStatement[10792-11299]:EnhancedForStatement[10716-11223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10822-11299]:Block[10746-11223]"
    }, {
      "left" : "if (!\"-\".equals(filename))",
      "right" : "if (!\"-\".equals(filename))",
      "info" : "IfStatement[10830-11293]:IfStatement[10754-11217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10857-10973]:Block[10781-10897]"
    }, {
      "left" : "JSSourceFile newFile = JSSourceFile.fromFile(filename, inputCharset);",
      "right" : "JSSourceFile newFile = JSSourceFile.fromFile(filename, inputCharset);",
      "info" : "VariableDeclarationStatement[10867-10936]:VariableDeclarationStatement[10791-10860]"
    }, {
      "left" : "inputs.add(newFile);",
      "right" : "inputs.add(newFile);",
      "info" : "ExpressionStatement[10945-10965]:ExpressionStatement[10869-10889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10979-11293]:Block[10903-11217]"
    }, {
      "left" : "if (!allowStdIn)",
      "right" : "if (!allowStdIn)",
      "info" : "IfStatement[10989-11081]:IfStatement[10913-11005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11006-11081]:Block[10930-11005]"
    }, {
      "left" : "throw new FlagUsageException(\"Can't specify stdin.\");",
      "right" : "throw new FlagUsageException(\"Can't specify stdin.\");",
      "info" : "ThrowStatement[11018-11071]:ThrowStatement[10942-10995]"
    }, {
      "left" : "if (usingStdin)",
      "right" : "if (usingStdin)",
      "info" : "IfStatement[11090-11187]:IfStatement[11014-11111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11106-11187]:Block[11030-11111]"
    }, {
      "left" : "throw new FlagUsageException(\"Can't specify stdin twice.\");",
      "right" : "throw new FlagUsageException(\"Can't specify stdin twice.\");",
      "info" : "ThrowStatement[11118-11177]:ThrowStatement[11042-11101]"
    }, {
      "left" : "inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));",
      "right" : "inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));",
      "info" : "ExpressionStatement[11197-11258]:ExpressionStatement[11121-11182]"
    }, {
      "left" : "usingStdin = true;",
      "right" : "usingStdin = true;",
      "info" : "ExpressionStatement[11267-11285]:ExpressionStatement[11191-11209]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[11304-11318]:ReturnStatement[11228-11242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11506-11832]:Block[11430-11756]"
    }, {
      "left" : "if (isInTestMode())",
      "right" : "if (isInTestMode())",
      "info" : "IfStatement[11512-11584]:IfStatement[11436-11508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11532-11584]:Block[11456-11508]"
    }, {
      "left" : "return inputsSupplierForTesting.get();",
      "right" : "return inputsSupplierForTesting.get();",
      "info" : "ReturnStatement[11540-11578]:ReturnStatement[11464-11502]"
    }, {
      "left" : "if (files.isEmpty())",
      "right" : "if (files.isEmpty())",
      "info" : "IfStatement[11589-11663]:IfStatement[11513-11587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11610-11663]:Block[11534-11587]"
    }, {
      "left" : "files = Collections.singletonList(\"-\");",
      "right" : "files = Collections.singletonList(\"-\");",
      "info" : "ExpressionStatement[11618-11657]:ExpressionStatement[11542-11581]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11668-11828]:TryStatement[11592-11752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11672-11719]:Block[11596-11643]"
    }, {
      "left" : "return createInputs(files, true);",
      "right" : "return createInputs(files, true);",
      "info" : "ReturnStatement[11680-11713]:ReturnStatement[11604-11637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11749-11828]:Block[11673-11752]"
    }, {
      "left" : "throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());",
      "right" : "throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());",
      "info" : "ThrowStatement[11757-11822]:ThrowStatement[11681-11746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12011-12291]:Block[11935-12215]"
    }, {
      "left" : "if (files.isEmpty())",
      "right" : "if (files.isEmpty())",
      "info" : "IfStatement[12017-12116]:IfStatement[11941-12040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12038-12116]:Block[11962-12040]"
    }, {
      "left" : "return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\"));",
      "right" : "return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\"));",
      "info" : "ReturnStatement[12046-12110]:ReturnStatement[11970-12034]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12121-12287]:TryStatement[12045-12211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12125-12173]:Block[12049-12097]"
    }, {
      "left" : "return createInputs(files, false);",
      "right" : "return createInputs(files, false);",
      "info" : "ReturnStatement[12133-12167]:ReturnStatement[12057-12091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12203-12287]:Block[12127-12211]"
    }, {
      "left" : "throw new FlagUsageException(\"Bad --externs flag. \" + e.getMessage());",
      "right" : "throw new FlagUsageException(\"Bad --externs flag. \" + e.getMessage());",
      "info" : "ThrowStatement[12211-12281]:ThrowStatement[12135-12205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12807-15532]:Block[12731-15456]"
    }, {
      "left" : "if (isInTestMode())",
      "right" : "if (isInTestMode())",
      "info" : "IfStatement[12813-12886]:IfStatement[12737-12810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12833-12886]:Block[12757-12810]"
    }, {
      "left" : "return modulesSupplierForTesting.get();",
      "right" : "return modulesSupplierForTesting.get();",
      "info" : "ReturnStatement[12841-12880]:ReturnStatement[12765-12804]"
    }, {
      "left" : "Preconditions.checkState(specs != null);",
      "right" : "Preconditions.checkState(specs != null);",
      "info" : "ExpressionStatement[12892-12932]:ExpressionStatement[12816-12856]"
    }, {
      "left" : "Preconditions.checkState(!specs.isEmpty());",
      "right" : "Preconditions.checkState(!specs.isEmpty());",
      "info" : "ExpressionStatement[12937-12980]:ExpressionStatement[12861-12904]"
    }, {
      "left" : "Preconditions.checkState(jsFiles != null);",
      "right" : "Preconditions.checkState(jsFiles != null);",
      "info" : "ExpressionStatement[12985-13027]:ExpressionStatement[12909-12951]"
    }, {
      "left" : "final int totalNumJsFiles = jsFiles.size();",
      "right" : "final int totalNumJsFiles = jsFiles.size();",
      "info" : "VariableDeclarationStatement[13033-13076]:VariableDeclarationStatement[12957-13000]"
    }, {
      "left" : "int nextJsFileIndex = 0;",
      "right" : "int nextJsFileIndex = 0;",
      "info" : "VariableDeclarationStatement[13081-13105]:VariableDeclarationStatement[13005-13029]"
    }, {
      "left" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
      "right" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[13111-13173]:VariableDeclarationStatement[13035-13097]"
    }, {
      "left" : "for (String spec : specs)",
      "right" : "for (String spec : specs)",
      "info" : "EnhancedForStatement[13178-15280]:EnhancedForStatement[13102-15204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13204-15280]:Block[13128-15204]"
    }, {
      "left" : "String[] parts = spec.split(\":\");",
      "right" : "String[] parts = spec.split(\":\");",
      "info" : "VariableDeclarationStatement[13274-13307]:VariableDeclarationStatement[13198-13231]"
    }, {
      "left" : "if (parts.length < 2 || parts.length > 4)",
      "right" : "if (parts.length < 2 || parts.length > 4)",
      "info" : "IfStatement[13314-13482]:IfStatement[13238-13406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13356-13482]:Block[13280-13406]"
    }, {
      "left" : "throw new FlagUsageException(\"Expected 2-4 colon-delimited parts in \"\n            + \"module spec: \" + spec);",
      "right" : "throw new FlagUsageException(\"Expected 2-4 colon-delimited parts in \"\n            + \"module spec: \" + spec);",
      "info" : "ThrowStatement[13366-13474]:ThrowStatement[13290-13398]"
    }, {
      "left" : "String name = parts[0];",
      "right" : "String name = parts[0];",
      "info" : "VariableDeclarationStatement[13518-13541]:VariableDeclarationStatement[13442-13465]"
    }, {
      "left" : "checkModuleName(name);",
      "right" : "checkModuleName(name);",
      "info" : "ExpressionStatement[13548-13570]:ExpressionStatement[13472-13494]"
    }, {
      "left" : "if (modulesByName.containsKey(name))",
      "right" : "if (modulesByName.containsKey(name))",
      "info" : "IfStatement[13577-13705]:IfStatement[13501-13629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13614-13705]:Block[13538-13629]"
    }, {
      "left" : "throw new FlagUsageException(\"Duplicate module name: \" + name);",
      "right" : "throw new FlagUsageException(\"Duplicate module name: \" + name);",
      "info" : "ThrowStatement[13630-13693]:ThrowStatement[13554-13617]"
    }, {
      "left" : "JSModule module = new JSModule(name);",
      "right" : "JSModule module = new JSModule(name);",
      "info" : "VariableDeclarationStatement[13712-13749]:VariableDeclarationStatement[13636-13673]"
    }, {
      "left" : "int numJsFiles = -1;",
      "right" : "int numJsFiles = -1;",
      "info" : "VariableDeclarationStatement[13787-13807]:VariableDeclarationStatement[13711-13731]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13814-13949]:TryStatement[13738-13873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13818-13876]:Block[13742-13800]"
    }, {
      "left" : "numJsFiles = Integer.parseInt(parts[1]);",
      "right" : "numJsFiles = Integer.parseInt(parts[1]);",
      "info" : "ExpressionStatement[13828-13868]:ExpressionStatement[13752-13792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13915-13949]:Block[13839-13873]"
    }, {
      "left" : "numJsFiles = -1;",
      "right" : "numJsFiles = -1;",
      "info" : "ExpressionStatement[13925-13941]:ExpressionStatement[13849-13865]"
    }, {
      "left" : "if (numJsFiles < 0)",
      "right" : "if (numJsFiles < 0)",
      "info" : "IfStatement[14003-14146]:IfStatement[13927-14070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14023-14146]:Block[13947-14070]"
    }, {
      "left" : "throw new FlagUsageException(\"Invalid js file count '\" + parts[1]\n            + \"' for module: \" + name);",
      "right" : "throw new FlagUsageException(\"Invalid js file count '\" + parts[1]\n            + \"' for module: \" + name);",
      "info" : "ThrowStatement[14033-14138]:ThrowStatement[13957-14062]"
    }, {
      "left" : "if (nextJsFileIndex + numJsFiles > totalNumJsFiles)",
      "right" : "if (nextJsFileIndex + numJsFiles > totalNumJsFiles)",
      "info" : "IfStatement[14153-14399]:IfStatement[14077-14323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14205-14399]:Block[14129-14323]"
    }, {
      "left" : "throw new FlagUsageException(\"Not enough js files specified. Expected \"\n            + (nextJsFileIndex + numJsFiles - totalNumJsFiles)\n            + \" more in module:\" + name);",
      "right" : "throw new FlagUsageException(\"Not enough js files specified. Expected \"\n            + (nextJsFileIndex + numJsFiles - totalNumJsFiles)\n            + \" more in module:\" + name);",
      "info" : "ThrowStatement[14215-14391]:ThrowStatement[14139-14315]"
    }, {
      "left" : "List<String> moduleJsFiles =\n          jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);",
      "right" : "List<String> moduleJsFiles =\n          jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);",
      "info" : "VariableDeclarationStatement[14406-14508]:VariableDeclarationStatement[14330-14432]"
    }, {
      "left" : "for (JSSourceFile input : createInputs(moduleJsFiles, false))",
      "right" : "for (JSSourceFile input : createInputs(moduleJsFiles, false))",
      "info" : "EnhancedForStatement[14515-14613]:EnhancedForStatement[14439-14537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14577-14613]:Block[14501-14537]"
    }, {
      "left" : "module.add(input);",
      "right" : "module.add(input);",
      "info" : "ExpressionStatement[14587-14605]:ExpressionStatement[14511-14529]"
    }, {
      "left" : "nextJsFileIndex += numJsFiles;",
      "right" : "nextJsFileIndex += numJsFiles;",
      "info" : "ExpressionStatement[14620-14650]:ExpressionStatement[14544-14574]"
    }, {
      "left" : "if (parts.length > 2)",
      "right" : "if (parts.length > 2)",
      "info" : "IfStatement[14658-15234]:IfStatement[14582-15158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14680-15234]:Block[14604-15158]"
    }, {
      "left" : "String depList = parts[2];",
      "right" : "String depList = parts[2];",
      "info" : "VariableDeclarationStatement[14728-14754]:VariableDeclarationStatement[14652-14678]"
    }, {
      "left" : "if (depList.length() > 0)",
      "right" : "if (depList.length() > 0)",
      "info" : "IfStatement[14763-15226]:IfStatement[14687-15150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14789-15226]:Block[14713-15150]"
    }, {
      "left" : "String[] deps = depList.split(\",\");",
      "right" : "String[] deps = depList.split(\",\");",
      "info" : "VariableDeclarationStatement[14801-14836]:VariableDeclarationStatement[14725-14760]"
    }, {
      "left" : "for (String dep : deps)",
      "right" : "for (String dep : deps)",
      "info" : "EnhancedForStatement[14847-15216]:EnhancedForStatement[14771-15140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14871-15216]:Block[14795-15140]"
    }, {
      "left" : "JSModule other = modulesByName.get(dep);",
      "right" : "JSModule other = modulesByName.get(dep);",
      "info" : "VariableDeclarationStatement[14885-14925]:VariableDeclarationStatement[14809-14849]"
    }, {
      "left" : "if (other == null)",
      "right" : "if (other == null)",
      "info" : "IfStatement[14938-15163]:IfStatement[14862-15087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14957-15163]:Block[14881-15087]"
    }, {
      "left" : "throw new FlagUsageException(\"Module '\" + name\n                  + \"' depends on unknown module '\" + dep\n                  + \"'. Be sure to list modules in dependency order.\");",
      "right" : "throw new FlagUsageException(\"Module '\" + name\n                  + \"' depends on unknown module '\" + dep\n                  + \"'. Be sure to list modules in dependency order.\");",
      "info" : "ThrowStatement[14973-15149]:ThrowStatement[14897-15073]"
    }, {
      "left" : "module.addDependency(other);",
      "right" : "module.addDependency(other);",
      "info" : "ExpressionStatement[15176-15204]:ExpressionStatement[15100-15128]"
    }, {
      "left" : "modulesByName.put(name, module);",
      "right" : "modulesByName.put(name, module);",
      "info" : "ExpressionStatement[15242-15274]:ExpressionStatement[15166-15198]"
    }, {
      "left" : "if (nextJsFileIndex < totalNumJsFiles)",
      "right" : "if (nextJsFileIndex < totalNumJsFiles)",
      "info" : "IfStatement[15286-15472]:IfStatement[15210-15396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15325-15472]:Block[15249-15396]"
    }, {
      "left" : "throw new FlagUsageException(\"Too many js files specified. Expected \"\n          + nextJsFileIndex + \" but found \" + totalNumJsFiles);",
      "right" : "throw new FlagUsageException(\"Too many js files specified. Expected \"\n          + nextJsFileIndex + \" but found \" + totalNumJsFiles);",
      "info" : "ThrowStatement[15333-15466]:ThrowStatement[15257-15390]"
    }, {
      "left" : "return Lists.newArrayList(modulesByName.values());",
      "right" : "return Lists.newArrayList(modulesByName.values());",
      "info" : "ReturnStatement[15478-15528]:ReturnStatement[15402-15452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15778-15909]:Block[15702-15833]"
    }, {
      "left" : "if (!TokenStream.isJSIdentifier(name))",
      "right" : "if (!TokenStream.isJSIdentifier(name))",
      "info" : "IfStatement[15784-15905]:IfStatement[15708-15829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15823-15905]:Block[15747-15829]"
    }, {
      "left" : "throw new FlagUsageException(\"Invalid module name: '\" + name + \"'\");",
      "right" : "throw new FlagUsageException(\"Invalid module name: '\" + name + \"'\");",
      "info" : "ThrowStatement[15831-15899]:ThrowStatement[15755-15823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16445-17430]:Block[16369-17354]"
    }, {
      "left" : "Preconditions.checkState(specs != null);",
      "right" : "Preconditions.checkState(specs != null);",
      "info" : "ExpressionStatement[16451-16491]:ExpressionStatement[16375-16415]"
    }, {
      "left" : "Map<String, String> wrappers =\n        Maps.newHashMapWithExpectedSize(modules.size());",
      "right" : "Map<String, String> wrappers =\n        Maps.newHashMapWithExpectedSize(modules.size());",
      "info" : "VariableDeclarationStatement[16497-16584]:VariableDeclarationStatement[16421-16508]"
    }, {
      "left" : "for (JSModule m : modules)",
      "right" : "for (JSModule m : modules)",
      "info" : "EnhancedForStatement[16636-16707]:EnhancedForStatement[16560-16631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16663-16707]:Block[16587-16631]"
    }, {
      "left" : "wrappers.put(m.getName(), \"\");",
      "right" : "wrappers.put(m.getName(), \"\");",
      "info" : "ExpressionStatement[16671-16701]:ExpressionStatement[16595-16625]"
    }, {
      "left" : "for (String spec : specs)",
      "right" : "for (String spec : specs)",
      "info" : "EnhancedForStatement[16713-17405]:EnhancedForStatement[16637-17329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16739-17405]:Block[16663-17329]"
    }, {
      "left" : "int pos = spec.indexOf(':');",
      "right" : "int pos = spec.indexOf(':');",
      "info" : "VariableDeclarationStatement[16787-16815]:VariableDeclarationStatement[16711-16739]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[16822-16969]:IfStatement[16746-16893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16837-16969]:Block[16761-16893]"
    }, {
      "left" : "throw new FlagUsageException(\"Expected module wrapper to have \"\n            + \"<name>:<wrapper> format: \" + spec);",
      "right" : "throw new FlagUsageException(\"Expected module wrapper to have \"\n            + \"<name>:<wrapper> format: \" + spec);",
      "info" : "ThrowStatement[16847-16961]:ThrowStatement[16771-16885]"
    }, {
      "left" : "String name = spec.substring(0, pos);",
      "right" : "String name = spec.substring(0, pos);",
      "info" : "VariableDeclarationStatement[17005-17042]:VariableDeclarationStatement[16929-16966]"
    }, {
      "left" : "if (!wrappers.containsKey(name))",
      "right" : "if (!wrappers.containsKey(name))",
      "info" : "IfStatement[17049-17163]:IfStatement[16973-17087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17082-17163]:Block[17006-17087]"
    }, {
      "left" : "throw new FlagUsageException(\"Unknown module: '\" + name + \"'\");",
      "right" : "throw new FlagUsageException(\"Unknown module: '\" + name + \"'\");",
      "info" : "ThrowStatement[17092-17155]:ThrowStatement[17016-17079]"
    }, {
      "left" : "String wrapper = spec.substring(pos + 1);",
      "right" : "String wrapper = spec.substring(pos + 1);",
      "info" : "VariableDeclarationStatement[17170-17211]:VariableDeclarationStatement[17094-17135]"
    }, {
      "left" : "if (!wrapper.contains(\"%s\"))",
      "right" : "if (!wrapper.contains(\"%s\"))",
      "info" : "IfStatement[17218-17364]:IfStatement[17142-17288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17247-17364]:Block[17171-17288]"
    }, {
      "left" : "throw new FlagUsageException(\"No %s placeholder in module wrapper: '\"\n            + wrapper + \"'\");",
      "right" : "throw new FlagUsageException(\"No %s placeholder in module wrapper: '\"\n            + wrapper + \"'\");",
      "info" : "ThrowStatement[17257-17356]:ThrowStatement[17181-17280]"
    }, {
      "left" : "wrappers.put(name, wrapper);",
      "right" : "wrappers.put(name, wrapper);",
      "info" : "ExpressionStatement[17371-17399]:ExpressionStatement[17295-17323]"
    }, {
      "left" : "return wrappers;",
      "right" : "return wrappers;",
      "info" : "ReturnStatement[17410-17426]:ReturnStatement[17334-17350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17736-18547]:Block[17660-18471]"
    }, {
      "left" : "int pos = wrapper.indexOf(codePlaceholder);",
      "right" : "int pos = wrapper.indexOf(codePlaceholder);",
      "info" : "VariableDeclarationStatement[17742-17785]:VariableDeclarationStatement[17666-17709]"
    }, {
      "left" : "if (pos != -1)",
      "right" : "if (pos != -1)",
      "info" : "IfStatement[17790-18543]:IfStatement[17714-18467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17805-18482]:Block[17729-18406]"
    }, {
      "left" : "String prefix = \"\";",
      "right" : "String prefix = \"\";",
      "info" : "VariableDeclarationStatement[17813-17832]:VariableDeclarationStatement[17737-17756]"
    }, {
      "left" : "if (pos > 0)",
      "right" : "if (pos > 0)",
      "info" : "IfStatement[17840-17934]:IfStatement[17764-17858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17853-17934]:Block[17777-17858]"
    }, {
      "left" : "prefix = wrapper.substring(0, pos);",
      "right" : "prefix = wrapper.substring(0, pos);",
      "info" : "ExpressionStatement[17863-17898]:ExpressionStatement[17787-17822]"
    }, {
      "left" : "out.append(prefix);",
      "right" : "out.append(prefix);",
      "info" : "ExpressionStatement[17907-17926]:ExpressionStatement[17831-17850]"
    }, {
      "left" : "out.append(code);",
      "right" : "out.append(code);",
      "info" : "ExpressionStatement[17942-17959]:ExpressionStatement[17866-17883]"
    }, {
      "left" : "int suffixStart = pos + codePlaceholder.length();",
      "right" : "int suffixStart = pos + codePlaceholder.length();",
      "info" : "VariableDeclarationStatement[17967-18016]:VariableDeclarationStatement[17891-17940]"
    }, {
      "left" : "if (suffixStart != wrapper.length())",
      "right" : "if (suffixStart != wrapper.length())",
      "info" : "IfStatement[18023-18161]:IfStatement[17947-18085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18060-18161]:Block[17984-18085]"
    }, {
      "left" : "out.append(wrapper.substring(suffixStart));",
      "right" : "out.append(wrapper.substring(suffixStart));",
      "info" : "ExpressionStatement[18110-18153]:ExpressionStatement[18034-18077]"
    }, {
      "left" : "out.append('\\n');",
      "right" : "out.append('\\n');",
      "info" : "ExpressionStatement[18226-18243]:ExpressionStatement[18150-18167]"
    }, {
      "left" : "if (compiler != null && compiler.getSourceMap() != null)",
      "right" : "if (compiler != null && compiler.getSourceMap() != null)",
      "info" : "IfStatement[18351-18475]:IfStatement[18275-18399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18408-18475]:Block[18332-18399]"
    }, {
      "left" : "compiler.getSourceMap().setWrapperPrefix(prefix);",
      "right" : "compiler.getSourceMap().setWrapperPrefix(prefix);",
      "info" : "ExpressionStatement[18418-18467]:ExpressionStatement[18342-18391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18488-18543]:Block[18412-18467]"
    }, {
      "left" : "out.append(code);",
      "right" : "out.append(code);",
      "info" : "ExpressionStatement[18496-18513]:ExpressionStatement[18420-18437]"
    }, {
      "left" : "out.append('\\n');",
      "right" : "out.append('\\n');",
      "info" : "ExpressionStatement[18520-18537]:ExpressionStatement[18444-18461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18721-19058]:Block[18645-18982]"
    }, {
      "left" : "if (pathPrefix.length() > 0)",
      "right" : "if (pathPrefix.length() > 0)",
      "info" : "IfStatement[18727-19054]:IfStatement[18651-18978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18756-19054]:Block[18680-18978]"
    }, {
      "left" : "String dirName =\n          pathPrefix.charAt(pathPrefix.length() - 1) == File.separatorChar\n              ? pathPrefix.substring(0, pathPrefix.length() - 1) : new File(\n                  pathPrefix).getParent();",
      "right" : "String dirName =\n          pathPrefix.charAt(pathPrefix.length() - 1) == File.separatorChar\n              ? pathPrefix.substring(0, pathPrefix.length() - 1) : new File(\n                  pathPrefix).getParent();",
      "info" : "VariableDeclarationStatement[18764-18975]:VariableDeclarationStatement[18688-18899]"
    }, {
      "left" : "if (dirName != null)",
      "right" : "if (dirName != null)",
      "info" : "IfStatement[18982-19048]:IfStatement[18906-18972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19003-19048]:Block[18927-18972]"
    }, {
      "left" : "new File(dirName).mkdirs();",
      "right" : "new File(dirName).mkdirs();",
      "info" : "ExpressionStatement[19013-19040]:ExpressionStatement[18937-18964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19230-20351]:Block[19154-20275]"
    }, {
      "left" : "Compiler.setLoggingLevel(Level.parse(config.loggingLevel));",
      "right" : "Compiler.setLoggingLevel(Level.parse(config.loggingLevel));",
      "info" : "ExpressionStatement[19236-19295]:ExpressionStatement[19160-19219]"
    }, {
      "left" : "List<JSSourceFile> externs = createExterns();",
      "right" : "List<JSSourceFile> externs = createExterns();",
      "info" : "VariableDeclarationStatement[19301-19346]:VariableDeclarationStatement[19225-19270]"
    }, {
      "left" : "compiler = createCompiler();",
      "right" : "compiler = createCompiler();",
      "info" : "ExpressionStatement[19352-19380]:ExpressionStatement[19276-19304]"
    }, {
      "left" : "B options = createOptions();",
      "right" : "B options = createOptions();",
      "info" : "VariableDeclarationStatement[19385-19413]:VariableDeclarationStatement[19309-19337]"
    }, {
      "left" : "List<JSModule> modules = null;",
      "right" : "List<JSModule> modules = null;",
      "info" : "VariableDeclarationStatement[19419-19449]:VariableDeclarationStatement[19343-19373]"
    }, {
      "left" : "Result result;",
      "right" : "Result result;",
      "info" : "VariableDeclarationStatement[19454-19468]:VariableDeclarationStatement[19378-19392]"
    }, {
      "left" : "setRunOptions(options);",
      "right" : "setRunOptions(options);",
      "info" : "ExpressionStatement[19474-19497]:ExpressionStatement[19398-19421]"
    }, {
      "left" : "boolean writeOutputToFile = !options.jsOutputFile.isEmpty();",
      "right" : "boolean writeOutputToFile = !options.jsOutputFile.isEmpty();",
      "info" : "VariableDeclarationStatement[19503-19563]:VariableDeclarationStatement[19427-19487]"
    }, {
      "left" : "if (writeOutputToFile)",
      "right" : "if (writeOutputToFile)",
      "info" : "IfStatement[19568-19756]:IfStatement[19492-19680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19591-19656]:Block[19515-19580]"
    }, {
      "left" : "out = fileNameToOutputWriter(options.jsOutputFile);",
      "right" : "out = fileNameToOutputWriter(options.jsOutputFile);",
      "info" : "ExpressionStatement[19599-19650]:ExpressionStatement[19523-19574]"
    }, {
      "left" : "if (out instanceof OutputStream)",
      "right" : "if (out instanceof OutputStream)",
      "info" : "IfStatement[19662-19756]:IfStatement[19586-19680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19695-19756]:Block[19619-19680]"
    }, {
      "left" : "out = streamToOutputWriter((OutputStream) out);",
      "right" : "out = streamToOutputWriter((OutputStream) out);",
      "info" : "ExpressionStatement[19703-19750]:ExpressionStatement[19627-19674]"
    }, {
      "left" : "List<String> jsFiles = config.js;",
      "right" : "List<String> jsFiles = config.js;",
      "info" : "VariableDeclarationStatement[19762-19795]:VariableDeclarationStatement[19686-19719]"
    }, {
      "left" : "List<String> moduleSpecs = config.module;",
      "right" : "List<String> moduleSpecs = config.module;",
      "info" : "VariableDeclarationStatement[19800-19841]:VariableDeclarationStatement[19724-19765]"
    }, {
      "left" : "if (!moduleSpecs.isEmpty())",
      "right" : "if (!moduleSpecs.isEmpty())",
      "info" : "IfStatement[19846-20138]:IfStatement[19770-20062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19874-20003]:Block[19798-19927]"
    }, {
      "left" : "modules = createJsModules(moduleSpecs, jsFiles);",
      "right" : "modules = createJsModules(moduleSpecs, jsFiles);",
      "info" : "ExpressionStatement[19882-19930]:ExpressionStatement[19806-19854]"
    }, {
      "left" : "result = compiler.compileModules(externs, modules, options);",
      "right" : "result = compiler.compileModules(externs, modules, options);",
      "info" : "ExpressionStatement[19937-19997]:ExpressionStatement[19861-19921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20009-20138]:Block[19933-20062]"
    }, {
      "left" : "List<JSSourceFile> inputs = createSourceInputs(jsFiles);",
      "right" : "List<JSSourceFile> inputs = createSourceInputs(jsFiles);",
      "info" : "VariableDeclarationStatement[20017-20073]:VariableDeclarationStatement[19941-19997]"
    }, {
      "left" : "result = compiler.compile(externs, inputs, options);",
      "right" : "result = compiler.compile(externs, inputs, options);",
      "info" : "ExpressionStatement[20080-20132]:ExpressionStatement[20004-20056]"
    }, {
      "left" : "int errCode = processResults(result, modules, options);",
      "right" : "int errCode = processResults(result, modules, options);",
      "info" : "VariableDeclarationStatement[20144-20199]:VariableDeclarationStatement[20068-20123]"
    }, {
      "left" : "if (out instanceof Closeable)",
      "right" : "if (out instanceof Closeable)",
      "info" : "IfStatement[20257-20327]:IfStatement[20181-20251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20287-20327]:Block[20211-20251]"
    }, {
      "left" : "((Closeable) out).close();",
      "right" : "((Closeable) out).close();",
      "info" : "ExpressionStatement[20295-20321]:ExpressionStatement[20219-20245]"
    }, {
      "left" : "return errCode;",
      "right" : "return errCode;",
      "info" : "ReturnStatement[20332-20347]:ReturnStatement[20256-20271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20556-23700]:Block[20480-23624]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[20562-20618]:IfStatement[20486-20542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20595-20618]:Block[20519-20542]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[20603-20612]:ReturnStatement[20527-20536]"
    }, {
      "left" : "if (config.printPassGraph)",
      "right" : "if (config.printPassGraph)",
      "info" : "IfStatement[20624-20864]:IfStatement[20548-20788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20651-20864]:Block[20575-20788]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[20659-20858]:IfStatement[20583-20782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20691-20718]:Block[20615-20642]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[20701-20710]:ReturnStatement[20625-20634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20724-20858]:Block[20648-20782]"
    }, {
      "left" : "out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));",
      "right" : "out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));",
      "info" : "ExpressionStatement[20734-20806]:ExpressionStatement[20658-20730]"
    }, {
      "left" : "out.append('\\n');",
      "right" : "out.append('\\n');",
      "info" : "ExpressionStatement[20815-20832]:ExpressionStatement[20739-20756]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[20841-20850]:ReturnStatement[20765-20774]"
    }, {
      "left" : "if (config.printAst)",
      "right" : "if (config.printAst)",
      "info" : "IfStatement[20870-21160]:IfStatement[20794-21084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20891-21160]:Block[20815-21084]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[20899-21154]:IfStatement[20823-21078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20931-20958]:Block[20855-20882]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[20941-20950]:ReturnStatement[20865-20874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20964-21154]:Block[20888-21078]"
    }, {
      "left" : "ControlFlowGraph<Node> cfg = compiler.computeCFG();",
      "right" : "ControlFlowGraph<Node> cfg = compiler.computeCFG();",
      "info" : "VariableDeclarationStatement[20974-21025]:VariableDeclarationStatement[20898-20949]"
    }, {
      "left" : "DotFormatter.appendDot(compiler.getRoot().getLastChild(), cfg, out);",
      "right" : "DotFormatter.appendDot(compiler.getRoot().getLastChild(), cfg, out);",
      "info" : "ExpressionStatement[21034-21102]:ExpressionStatement[20958-21026]"
    }, {
      "left" : "out.append('\\n');",
      "right" : "out.append('\\n');",
      "info" : "ExpressionStatement[21111-21128]:ExpressionStatement[21035-21052]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[21137-21146]:ReturnStatement[21061-21070]"
    }, {
      "left" : "if (config.printTree)",
      "right" : "if (config.printTree)",
      "info" : "IfStatement[21166-21440]:IfStatement[21090-21364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21188-21440]:Block[21112-21364]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[21196-21434]:IfStatement[21120-21358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21228-21325]:Block[21152-21249]"
    }, {
      "left" : "out.append(\"Code contains errors; no tree was generated.\\n\");",
      "right" : "out.append(\"Code contains errors; no tree was generated.\\n\");",
      "info" : "ExpressionStatement[21238-21299]:ExpressionStatement[21162-21223]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[21308-21317]:ReturnStatement[21232-21241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21331-21434]:Block[21255-21358]"
    }, {
      "left" : "compiler.getRoot().appendStringTree(out);",
      "right" : "compiler.getRoot().appendStringTree(out);",
      "info" : "ExpressionStatement[21341-21382]:ExpressionStatement[21265-21306]"
    }, {
      "left" : "out.append(\"\\n\");",
      "right" : "out.append(\"\\n\");",
      "info" : "ExpressionStatement[21391-21408]:ExpressionStatement[21315-21332]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[21417-21426]:ReturnStatement[21341-21350]"
    }, {
      "left" : "if (result.success)",
      "right" : "if (result.success)",
      "info" : "IfStatement[21446-23590]:IfStatement[21370-23514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21466-23590]:Block[21390-23514]"
    }, {
      "left" : "if (modules == null)",
      "right" : "if (modules == null)",
      "info" : "IfStatement[21474-23164]:IfStatement[21398-23088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21495-21700]:Block[21419-21624]"
    }, {
      "left" : "writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,\n            OUTPUT_WRAPPER_MARKER);",
      "right" : "writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,\n            OUTPUT_WRAPPER_MARKER);",
      "info" : "ExpressionStatement[21505-21610]:ExpressionStatement[21429-21534]"
    }, {
      "left" : "outputSourceMap(options);",
      "right" : "outputSourceMap(options);",
      "info" : "ExpressionStatement[21667-21692]:ExpressionStatement[21591-21616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21706-23164]:Block[21630-23088]"
    }, {
      "left" : "String moduleFilePrefix = config.moduleOutputPathPrefix;",
      "right" : "String moduleFilePrefix = config.moduleOutputPathPrefix;",
      "info" : "VariableDeclarationStatement[21716-21772]:VariableDeclarationStatement[21640-21696]"
    }, {
      "left" : "maybeCreateDirsForPath(moduleFilePrefix);",
      "right" : "maybeCreateDirsForPath(moduleFilePrefix);",
      "info" : "ExpressionStatement[21781-21822]:ExpressionStatement[21705-21746]"
    }, {
      "left" : "Map<String, String> moduleWrappers =\n            parseModuleWrappers(config.moduleWrapper, modules);",
      "right" : "Map<String, String> moduleWrappers =\n            parseModuleWrappers(config.moduleWrapper, modules);",
      "info" : "VariableDeclarationStatement[21831-21931]:VariableDeclarationStatement[21755-21855]"
    }, {
      "left" : "Writer mapOut = null;",
      "right" : "Writer mapOut = null;",
      "info" : "VariableDeclarationStatement[22102-22123]:VariableDeclarationStatement[22026-22047]"
    }, {
      "left" : "if (!shouldGenerateMapPerModule(options))",
      "right" : "if (!shouldGenerateMapPerModule(options))",
      "info" : "IfStatement[22133-22265]:IfStatement[22057-22189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22175-22265]:Block[22099-22189]"
    }, {
      "left" : "mapOut = fileNameToOutputWriter(expandSourceMapPath(options, null));",
      "right" : "mapOut = fileNameToOutputWriter(expandSourceMapPath(options, null));",
      "info" : "ExpressionStatement[22187-22255]:ExpressionStatement[22111-22179]"
    }, {
      "left" : "for (JSModule m : modules)",
      "right" : "for (JSModule m : modules)",
      "info" : "EnhancedForStatement[22275-23089]:EnhancedForStatement[22199-23013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22302-23089]:Block[22226-23013]"
    }, {
      "left" : "if (shouldGenerateMapPerModule(options))",
      "right" : "if (shouldGenerateMapPerModule(options))",
      "info" : "IfStatement[22314-22446]:IfStatement[22238-22370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22355-22446]:Block[22279-22370]"
    }, {
      "left" : "mapOut = fileNameToOutputWriter(expandSourceMapPath(options, m));",
      "right" : "mapOut = fileNameToOutputWriter(expandSourceMapPath(options, m));",
      "info" : "ExpressionStatement[22369-22434]:ExpressionStatement[22293-22358]"
    }, {
      "left" : "Writer writer = fileNameToOutputWriter(\n              moduleFilePrefix + m.getName() + \".js\");",
      "right" : "Writer writer = fileNameToOutputWriter(\n              moduleFilePrefix + m.getName() + \".js\");",
      "info" : "VariableDeclarationStatement[22458-22552]:VariableDeclarationStatement[22382-22476]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[22564-22663]:IfStatement[22488-22587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22605-22663]:Block[22529-22587]"
    }, {
      "left" : "compiler.getSourceMap().reset();",
      "right" : "compiler.getSourceMap().reset();",
      "info" : "ExpressionStatement[22619-22651]:ExpressionStatement[22543-22575]"
    }, {
      "left" : "writeOutput(writer, compiler, compiler.toSource(m),\n              moduleWrappers.get(m.getName()), \"%s\");",
      "right" : "writeOutput(writer, compiler, compiler.toSource(m),\n              moduleWrappers.get(m.getName()), \"%s\");",
      "info" : "ExpressionStatement[22675-22780]:ExpressionStatement[22599-22704]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[22792-22913]:IfStatement[22716-22837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22833-22913]:Block[22757-22837]"
    }, {
      "left" : "compiler.getSourceMap().appendTo(mapOut, m.getName());",
      "right" : "compiler.getSourceMap().appendTo(mapOut, m.getName());",
      "info" : "ExpressionStatement[22847-22901]:ExpressionStatement[22771-22825]"
    }, {
      "left" : "writer.close();",
      "right" : "writer.close();",
      "info" : "ExpressionStatement[22925-22940]:ExpressionStatement[22849-22864]"
    }, {
      "left" : "if (shouldGenerateMapPerModule(options) && mapOut != null)",
      "right" : "if (shouldGenerateMapPerModule(options) && mapOut != null)",
      "info" : "IfStatement[22952-23079]:IfStatement[22876-23003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23011-23079]:Block[22935-23003]"
    }, {
      "left" : "mapOut.close();",
      "right" : "mapOut.close();",
      "info" : "ExpressionStatement[23025-23040]:ExpressionStatement[22949-22964]"
    }, {
      "left" : "mapOut = null;",
      "right" : "mapOut = null;",
      "info" : "ExpressionStatement[23053-23067]:ExpressionStatement[22977-22991]"
    }, {
      "left" : "if (mapOut != null)",
      "right" : "if (mapOut != null)",
      "info" : "IfStatement[23099-23156]:IfStatement[23023-23080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23119-23156]:Block[23043-23080]"
    }, {
      "left" : "mapOut.close();",
      "right" : "mapOut.close();",
      "info" : "ExpressionStatement[23131-23146]:ExpressionStatement[23055-23070]"
    }, {
      "left" : "if (options.externExportsPath != null)",
      "right" : "if (options.externExportsPath != null)",
      "info" : "IfStatement[23213-23418]:IfStatement[23137-23342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23252-23418]:Block[23176-23342]"
    }, {
      "left" : "Writer eeOut =\n            openExternExportsStream(options, options.jsOutputFile);",
      "right" : "Writer eeOut =\n            openExternExportsStream(options, options.jsOutputFile);",
      "info" : "VariableDeclarationStatement[23262-23344]:VariableDeclarationStatement[23186-23268]"
    }, {
      "left" : "eeOut.append(result.externExport);",
      "right" : "eeOut.append(result.externExport);",
      "info" : "ExpressionStatement[23353-23387]:ExpressionStatement[23277-23311]"
    }, {
      "left" : "eeOut.close();",
      "right" : "eeOut.close();",
      "info" : "ExpressionStatement[23396-23410]:ExpressionStatement[23320-23334]"
    }, {
      "left" : "outputNameMaps(options);",
      "right" : "outputNameMaps(options);",
      "info" : "ExpressionStatement[23492-23516]:ExpressionStatement[23416-23440]"
    }, {
      "left" : "outputManifest();",
      "right" : "outputManifest();",
      "info" : "ExpressionStatement[23567-23584]:ExpressionStatement[23491-23508]"
    }, {
      "left" : "return Math.min(result.errors.length, 0x7f);",
      "right" : "return Math.min(result.errors.length, 0x7f);",
      "info" : "ReturnStatement[23652-23696]:ReturnStatement[23576-23620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24002-24281]:Block[23926-24205]"
    }, {
      "left" : "if (!config.charset.isEmpty())",
      "right" : "if (!config.charset.isEmpty())",
      "info" : "IfStatement[24008-24250]:IfStatement[23932-24174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24039-24250]:Block[23963-24174]"
    }, {
      "left" : "if (!Charset.isSupported(config.charset))",
      "right" : "if (!Charset.isSupported(config.charset))",
      "info" : "IfStatement[24047-24198]:IfStatement[23971-24122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24089-24198]:Block[24013-24122]"
    }, {
      "left" : "throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");",
      "right" : "throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");",
      "info" : "ThrowStatement[24099-24190]:ThrowStatement[24023-24114]"
    }, {
      "left" : "return Charset.forName(config.charset);",
      "right" : "return Charset.forName(config.charset);",
      "info" : "ReturnStatement[24205-24244]:ReturnStatement[24129-24168]"
    }, {
      "left" : "return Charsets.UTF_8;",
      "right" : "return Charsets.UTF_8;",
      "info" : "ReturnStatement[24255-24277]:ReturnStatement[24179-24201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24825-25083]:Block[24749-25007]"
    }, {
      "left" : "if (!config.charset.isEmpty())",
      "right" : "if (!config.charset.isEmpty())",
      "info" : "IfStatement[24831-25056]:IfStatement[24755-24980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24862-25056]:Block[24786-24980]"
    }, {
      "left" : "if (!Charset.isSupported(config.charset))",
      "right" : "if (!Charset.isSupported(config.charset))",
      "info" : "IfStatement[24870-25021]:IfStatement[24794-24945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24912-25021]:Block[24836-24945]"
    }, {
      "left" : "throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");",
      "right" : "throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");",
      "info" : "ThrowStatement[24922-25013]:ThrowStatement[24846-24937]"
    }, {
      "left" : "return config.charset;",
      "right" : "return config.charset;",
      "info" : "ReturnStatement[25028-25050]:ReturnStatement[24952-24974]"
    }, {
      "left" : "return \"US-ASCII\";",
      "right" : "return \"US-ASCII\";",
      "info" : "ReturnStatement[25061-25079]:ReturnStatement[24985-25003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25177-25288]:Block[25101-25212]"
    }, {
      "left" : "return isInTestMode() ? externsSupplierForTesting.get() :\n        createExternInputs(config.externs);",
      "right" : "return isInTestMode() ? externsSupplierForTesting.get() :\n        createExternInputs(config.externs);",
      "info" : "ReturnStatement[25183-25284]:ReturnStatement[25107-25208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25570-25684]:Block[25494-25608]"
    }, {
      "left" : "return options.sourceMapOutputPath != null\n        && options.sourceMapOutputPath.contains(\"%outname%\");",
      "right" : "return options.sourceMapOutputPath != null\n        && options.sourceMapOutputPath.contains(\"%outname%\");",
      "info" : "ReturnStatement[25576-25680]:ReturnStatement[25500-25604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26048-26375]:Block[25972-26299]"
    }, {
      "left" : "if (options.externExportsPath == null)",
      "right" : "if (options.externExportsPath == null)",
      "info" : "IfStatement[26054-26119]:IfStatement[25978-26043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26093-26119]:Block[26017-26043]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26101-26113]:ReturnStatement[26025-26037]"
    }, {
      "left" : "String exPath = options.externExportsPath;",
      "right" : "String exPath = options.externExportsPath;",
      "info" : "VariableDeclarationStatement[26125-26167]:VariableDeclarationStatement[26049-26091]"
    }, {
      "left" : "if (!exPath.contains(File.separator))",
      "right" : "if (!exPath.contains(File.separator))",
      "info" : "IfStatement[26173-26327]:IfStatement[26097-26251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26211-26327]:Block[26135-26251]"
    }, {
      "left" : "File outputFile = new File(path);",
      "right" : "File outputFile = new File(path);",
      "info" : "VariableDeclarationStatement[26219-26252]:VariableDeclarationStatement[26143-26176]"
    }, {
      "left" : "exPath = outputFile.getParent() + File.separatorChar + exPath;",
      "right" : "exPath = outputFile.getParent() + File.separatorChar + exPath;",
      "info" : "ExpressionStatement[26259-26321]:ExpressionStatement[26183-26245]"
    }, {
      "left" : "return fileNameToOutputWriter(exPath);",
      "right" : "return fileNameToOutputWriter(exPath);",
      "info" : "ReturnStatement[26333-26371]:ReturnStatement[26257-26295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27122-27426]:Block[27046-27350]"
    }, {
      "left" : "String sub;",
      "right" : "String sub;",
      "info" : "VariableDeclarationStatement[27128-27139]:VariableDeclarationStatement[27052-27063]"
    }, {
      "left" : "if (forModule != null)",
      "right" : "if (forModule != null)",
      "info" : "IfStatement[27144-27379]:IfStatement[27068-27303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27167-27247]:Block[27091-27171]"
    }, {
      "left" : "sub = config.moduleOutputPathPrefix + forModule.getName() + \".js\";",
      "right" : "sub = config.moduleOutputPathPrefix + forModule.getName() + \".js\";",
      "info" : "ExpressionStatement[27175-27241]:ExpressionStatement[27099-27165]"
    }, {
      "left" : "if (!config.module.isEmpty())",
      "right" : "if (!config.module.isEmpty())",
      "info" : "IfStatement[27253-27379]:IfStatement[27177-27303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27283-27333]:Block[27207-27257]"
    }, {
      "left" : "sub = config.moduleOutputPathPrefix;",
      "right" : "sub = config.moduleOutputPathPrefix;",
      "info" : "ExpressionStatement[27291-27327]:ExpressionStatement[27215-27251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27339-27379]:Block[27263-27303]"
    }, {
      "left" : "sub = config.jsOutputFile;",
      "right" : "sub = config.jsOutputFile;",
      "info" : "ExpressionStatement[27347-27373]:ExpressionStatement[27271-27297]"
    }, {
      "left" : "return path.replace(\"%outname%\", sub);",
      "right" : "return path.replace(\"%outname%\", sub);",
      "info" : "ReturnStatement[27384-27422]:ReturnStatement[27308-27346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27553-27713]:Block[27477-27637]"
    }, {
      "left" : "if (Strings.isEmpty(options.sourceMapOutputPath))",
      "right" : "if (Strings.isEmpty(options.sourceMapOutputPath))",
      "info" : "IfStatement[27559-27635]:IfStatement[27483-27559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27609-27635]:Block[27533-27559]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27617-27629]:ReturnStatement[27541-27553]"
    }, {
      "left" : "return expandCommandLinePath(options.sourceMapOutputPath, forModule);",
      "right" : "return expandCommandLinePath(options.sourceMapOutputPath, forModule);",
      "info" : "ReturnStatement[27640-27709]:ReturnStatement[27564-27633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27826-27974]:Block[27750-27898]"
    }, {
      "left" : "if (Strings.isEmpty(config.outputManifest))",
      "right" : "if (Strings.isEmpty(config.outputManifest))",
      "info" : "IfStatement[27832-27902]:IfStatement[27756-27826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27876-27902]:Block[27800-27826]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27884-27896]:ReturnStatement[27808-27820]"
    }, {
      "left" : "return expandCommandLinePath(config.outputManifest, forModule);",
      "right" : "return expandCommandLinePath(config.outputManifest, forModule);",
      "info" : "ReturnStatement[27907-27970]:ReturnStatement[27831-27894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28186-28371]:Block[28110-28295]"
    }, {
      "left" : "if (fileName == null)",
      "right" : "if (fileName == null)",
      "info" : "IfStatement[28192-28240]:IfStatement[28116-28164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28214-28240]:Block[28138-28164]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28222-28234]:ReturnStatement[28146-28158]"
    }, {
      "left" : "if (testMode)",
      "right" : "if (testMode)",
      "info" : "IfStatement[28245-28299]:IfStatement[28169-28223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28259-28299]:Block[28183-28223]"
    }, {
      "left" : "return new StringWriter();",
      "right" : "return new StringWriter();",
      "info" : "ReturnStatement[28267-28293]:ReturnStatement[28191-28217]"
    }, {
      "left" : "return streamToOutputWriter(filenameToOutputStream(fileName));",
      "right" : "return streamToOutputWriter(filenameToOutputStream(fileName));",
      "info" : "ReturnStatement[28305-28367]:ReturnStatement[28229-28291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28565-28665]:Block[28489-28589]"
    }, {
      "left" : "if (fileName == null)",
      "right" : "if (fileName == null)",
      "info" : "IfStatement[28571-28618]:IfStatement[28495-28542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28592-28618]:Block[28516-28542]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28600-28612]:ReturnStatement[28524-28536]"
    }, {
      "left" : "return new FileOutputStream(fileName);",
      "right" : "return new FileOutputStream(fileName);",
      "info" : "ReturnStatement[28623-28661]:ReturnStatement[28547-28585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28785-29009]:Block[28709-28933]"
    }, {
      "left" : "if (outputCharset == null)",
      "right" : "if (outputCharset == null)",
      "info" : "IfStatement[28791-29005]:IfStatement[28715-28929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28818-28901]:Block[28742-28825]"
    }, {
      "left" : "return new BufferedWriter(\n          new OutputStreamWriter(stream));",
      "right" : "return new BufferedWriter(\n          new OutputStreamWriter(stream));",
      "info" : "ReturnStatement[28826-28895]:ReturnStatement[28750-28819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28907-29005]:Block[28831-28929]"
    }, {
      "left" : "return new BufferedWriter(\n          new OutputStreamWriter(stream, outputCharset));",
      "right" : "return new BufferedWriter(\n          new OutputStreamWriter(stream, outputCharset));",
      "info" : "ReturnStatement[28915-28999]:ReturnStatement[28839-28923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29233-29491]:Block[29157-29415]"
    }, {
      "left" : "if (Strings.isEmpty(options.sourceMapOutputPath))",
      "right" : "if (Strings.isEmpty(options.sourceMapOutputPath))",
      "info" : "IfStatement[29239-29310]:IfStatement[29163-29234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29289-29310]:Block[29213-29234]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[29297-29304]:ReturnStatement[29221-29228]"
    }, {
      "left" : "String outName = expandSourceMapPath(options, null);",
      "right" : "String outName = expandSourceMapPath(options, null);",
      "info" : "VariableDeclarationStatement[29316-29368]:VariableDeclarationStatement[29240-29292]"
    }, {
      "left" : "Writer out = fileNameToOutputWriter(outName);",
      "right" : "Writer out = fileNameToOutputWriter(outName);",
      "info" : "VariableDeclarationStatement[29373-29418]:VariableDeclarationStatement[29297-29342]"
    }, {
      "left" : "compiler.getSourceMap().appendTo(out, outName);",
      "right" : "compiler.getSourceMap().appendTo(out, outName);",
      "info" : "ExpressionStatement[29423-29470]:ExpressionStatement[29347-29394]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[29475-29487]:ExpressionStatement[29399-29411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29739-30499]:Block[29663-30423]"
    }, {
      "left" : "String basePath = \"\";",
      "right" : "String basePath = \"\";",
      "info" : "VariableDeclarationStatement[29745-29766]:VariableDeclarationStatement[29669-29690]"
    }, {
      "left" : "if (outputFile.equals(\"\"))",
      "right" : "if (outputFile.equals(\"\"))",
      "info" : "IfStatement[29772-30473]:IfStatement[29696-30397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29799-30071]:Block[29723-29995]"
    }, {
      "left" : "if (!config.moduleOutputPathPrefix.equals(\"\"))",
      "right" : "if (!config.moduleOutputPathPrefix.equals(\"\"))",
      "info" : "IfStatement[29911-30065]:IfStatement[29835-29989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29958-30017]:Block[29882-29941]"
    }, {
      "left" : "basePath = config.moduleOutputPathPrefix;",
      "right" : "basePath = config.moduleOutputPathPrefix;",
      "info" : "ExpressionStatement[29968-30009]:ExpressionStatement[29892-29933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30023-30065]:Block[29947-29989]"
    }, {
      "left" : "basePath = \"jscompiler\";",
      "right" : "basePath = \"jscompiler\";",
      "info" : "ExpressionStatement[30033-30057]:ExpressionStatement[29957-29981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30077-30473]:Block[30001-30397]"
    }, {
      "left" : "File file = new File(outputFile);",
      "right" : "File file = new File(outputFile);",
      "info" : "VariableDeclarationStatement[30127-30160]:VariableDeclarationStatement[30051-30084]"
    }, {
      "left" : "String outputFileName = file.getName();",
      "right" : "String outputFileName = file.getName();",
      "info" : "VariableDeclarationStatement[30168-30207]:VariableDeclarationStatement[30092-30131]"
    }, {
      "left" : "if (outputFileName.endsWith(\".js\"))",
      "right" : "if (outputFileName.endsWith(\".js\"))",
      "info" : "IfStatement[30253-30393]:IfStatement[30177-30317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30289-30393]:Block[30213-30317]"
    }, {
      "left" : "outputFileName =\n            outputFileName.substring(0, outputFileName.length() - 3);",
      "right" : "outputFileName =\n            outputFileName.substring(0, outputFileName.length() - 3);",
      "info" : "ExpressionStatement[30299-30385]:ExpressionStatement[30223-30309]"
    }, {
      "left" : "basePath = file.getParent() + File.separatorChar + outputFileName;",
      "right" : "basePath = file.getParent() + File.separatorChar + outputFileName;",
      "info" : "ExpressionStatement[30401-30467]:ExpressionStatement[30325-30391]"
    }, {
      "left" : "return basePath;",
      "right" : "return basePath;",
      "info" : "ReturnStatement[30479-30495]:ReturnStatement[30403-30419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30709-32678]:Block[30633-32602]"
    }, {
      "left" : "String propertyMapOutputPath = null;",
      "right" : "String propertyMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[30716-30752]:VariableDeclarationStatement[30640-30676]"
    }, {
      "left" : "String variableMapOutputPath = null;",
      "right" : "String variableMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[30757-30793]:VariableDeclarationStatement[30681-30717]"
    }, {
      "left" : "String functionInformationMapOutputPath = null;",
      "right" : "String functionInformationMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[30798-30845]:VariableDeclarationStatement[30722-30769]"
    }, {
      "left" : "if (config.createNameMapFiles)",
      "right" : "if (config.createNameMapFiles)",
      "info" : "IfStatement[30896-31184]:IfStatement[30820-31108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30927-31184]:Block[30851-31108]"
    }, {
      "left" : "String basePath = getMapPath(options.jsOutputFile);",
      "right" : "String basePath = getMapPath(options.jsOutputFile);",
      "info" : "VariableDeclarationStatement[30935-30986]:VariableDeclarationStatement[30859-30910]"
    }, {
      "left" : "propertyMapOutputPath = basePath + \"_props_map.out\";",
      "right" : "propertyMapOutputPath = basePath + \"_props_map.out\";",
      "info" : "ExpressionStatement[30994-31046]:ExpressionStatement[30918-30970]"
    }, {
      "left" : "variableMapOutputPath = basePath + \"_vars_map.out\";",
      "right" : "variableMapOutputPath = basePath + \"_vars_map.out\";",
      "info" : "ExpressionStatement[31053-31104]:ExpressionStatement[30977-31028]"
    }, {
      "left" : "functionInformationMapOutputPath = basePath + \"_functions_map.out\";",
      "right" : "functionInformationMapOutputPath = basePath + \"_functions_map.out\";",
      "info" : "ExpressionStatement[31111-31178]:ExpressionStatement[31035-31102]"
    }, {
      "left" : "if (!config.variableMapOutputFile.equals(\"\"))",
      "right" : "if (!config.variableMapOutputFile.equals(\"\"))",
      "info" : "IfStatement[31225-31545]:IfStatement[31149-31469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31271-31545]:Block[31195-31469]"
    }, {
      "left" : "if (variableMapOutputPath != null)",
      "right" : "if (variableMapOutputPath != null)",
      "info" : "IfStatement[31279-31478]:IfStatement[31203-31402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31314-31478]:Block[31238-31402]"
    }, {
      "left" : "throw new FlagUsageException(\"The flags variable_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "right" : "throw new FlagUsageException(\"The flags variable_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "info" : "ThrowStatement[31324-31470]:ThrowStatement[31248-31394]"
    }, {
      "left" : "variableMapOutputPath = config.variableMapOutputFile;",
      "right" : "variableMapOutputPath = config.variableMapOutputFile;",
      "info" : "ExpressionStatement[31486-31539]:ExpressionStatement[31410-31463]"
    }, {
      "left" : "if (!config.propertyMapOutputFile.equals(\"\"))",
      "right" : "if (!config.propertyMapOutputFile.equals(\"\"))",
      "info" : "IfStatement[31551-31871]:IfStatement[31475-31795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31597-31871]:Block[31521-31795]"
    }, {
      "left" : "if (propertyMapOutputPath != null)",
      "right" : "if (propertyMapOutputPath != null)",
      "info" : "IfStatement[31605-31804]:IfStatement[31529-31728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31640-31804]:Block[31564-31728]"
    }, {
      "left" : "throw new FlagUsageException(\"The flags property_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "right" : "throw new FlagUsageException(\"The flags property_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "info" : "ThrowStatement[31650-31796]:ThrowStatement[31574-31720]"
    }, {
      "left" : "propertyMapOutputPath = config.propertyMapOutputFile;",
      "right" : "propertyMapOutputPath = config.propertyMapOutputFile;",
      "info" : "ExpressionStatement[31812-31865]:ExpressionStatement[31736-31789]"
    }, {
      "left" : "if (variableMapOutputPath != null)",
      "right" : "if (variableMapOutputPath != null)",
      "info" : "IfStatement[31901-32061]:IfStatement[31825-31985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31936-32061]:Block[31860-31985]"
    }, {
      "left" : "if (compiler.getVariableMap() != null)",
      "right" : "if (compiler.getVariableMap() != null)",
      "info" : "IfStatement[31944-32055]:IfStatement[31868-31979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31983-32055]:Block[31907-31979]"
    }, {
      "left" : "compiler.getVariableMap().save(variableMapOutputPath);",
      "right" : "compiler.getVariableMap().save(variableMapOutputPath);",
      "info" : "ExpressionStatement[31993-32047]:ExpressionStatement[31917-31971]"
    }, {
      "left" : "if (propertyMapOutputPath != null)",
      "right" : "if (propertyMapOutputPath != null)",
      "info" : "IfStatement[32067-32227]:IfStatement[31991-32151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32102-32227]:Block[32026-32151]"
    }, {
      "left" : "if (compiler.getPropertyMap() != null)",
      "right" : "if (compiler.getPropertyMap() != null)",
      "info" : "IfStatement[32110-32221]:IfStatement[32034-32145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32149-32221]:Block[32073-32145]"
    }, {
      "left" : "compiler.getPropertyMap().save(propertyMapOutputPath);",
      "right" : "compiler.getPropertyMap().save(propertyMapOutputPath);",
      "info" : "ExpressionStatement[32159-32213]:ExpressionStatement[32083-32137]"
    }, {
      "left" : "if (functionInformationMapOutputPath != null)",
      "right" : "if (functionInformationMapOutputPath != null)",
      "info" : "IfStatement[32233-32674]:IfStatement[32157-32598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32279-32674]:Block[32203-32598]"
    }, {
      "left" : "if (compiler.getFunctionalInformationMap() != null)",
      "right" : "if (compiler.getFunctionalInformationMap() != null)",
      "info" : "IfStatement[32287-32668]:IfStatement[32211-32592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32339-32668]:Block[32263-32592]"
    }, {
      "left" : "OutputStream file =\n            filenameToOutputStream(functionInformationMapOutputPath);",
      "right" : "OutputStream file =\n            filenameToOutputStream(functionInformationMapOutputPath);",
      "info" : "VariableDeclarationStatement[32349-32438]:VariableDeclarationStatement[32273-32362]"
    }, {
      "left" : "CodedOutputStream outputStream = CodedOutputStream.newInstance(file);",
      "right" : "CodedOutputStream outputStream = CodedOutputStream.newInstance(file);",
      "info" : "VariableDeclarationStatement[32447-32516]:VariableDeclarationStatement[32371-32440]"
    }, {
      "left" : "compiler.getFunctionalInformationMap().writeTo(outputStream);",
      "right" : "compiler.getFunctionalInformationMap().writeTo(outputStream);",
      "info" : "ExpressionStatement[32525-32586]:ExpressionStatement[32449-32510]"
    }, {
      "left" : "outputStream.flush();",
      "right" : "outputStream.flush();",
      "info" : "ExpressionStatement[32595-32616]:ExpressionStatement[32519-32540]"
    }, {
      "left" : "file.flush();",
      "right" : "file.flush();",
      "info" : "ExpressionStatement[32625-32638]:ExpressionStatement[32549-32562]"
    }, {
      "left" : "file.close();",
      "right" : "file.close();",
      "info" : "ExpressionStatement[32647-32660]:ExpressionStatement[32571-32584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33132-35176]:Block[33056-35100]"
    }, {
      "left" : "for (String override : definitions)",
      "right" : "for (String override : definitions)",
      "info" : "EnhancedForStatement[33167-35172]:EnhancedForStatement[33091-35096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33203-35172]:Block[33127-35096]"
    }, {
      "left" : "String[] assignment = override.split(\"=\", 2);",
      "right" : "String[] assignment = override.split(\"=\", 2);",
      "info" : "VariableDeclarationStatement[33211-33256]:VariableDeclarationStatement[33135-33180]"
    }, {
      "left" : "String defName = assignment[0];",
      "right" : "String defName = assignment[0];",
      "info" : "VariableDeclarationStatement[33263-33294]:VariableDeclarationStatement[33187-33218]"
    }, {
      "left" : "if (defName.length() > 0)",
      "right" : "if (defName.length() > 0)",
      "info" : "IfStatement[33302-34954]:IfStatement[33226-34878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33328-34954]:Block[33252-34878]"
    }, {
      "left" : "String defValue = assignment.length == 1 ? \"true\" : assignment[1];",
      "right" : "String defValue = assignment.length == 1 ? \"true\" : assignment[1];",
      "info" : "VariableDeclarationStatement[33338-33404]:VariableDeclarationStatement[33262-33328]"
    }, {
      "left" : "boolean isTrue = defValue.equals(\"true\");",
      "right" : "boolean isTrue = defValue.equals(\"true\");",
      "info" : "VariableDeclarationStatement[33414-33455]:VariableDeclarationStatement[33338-33379]"
    }, {
      "left" : "boolean isFalse = defValue.equals(\"false\");",
      "right" : "boolean isFalse = defValue.equals(\"false\");",
      "info" : "VariableDeclarationStatement[33464-33507]:VariableDeclarationStatement[33388-33431]"
    }, {
      "left" : "if (isTrue || isFalse)",
      "right" : "if (isTrue || isFalse)",
      "info" : "IfStatement[33516-34946]:IfStatement[33440-34870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33539-33752]:Block[33463-33676]"
    }, {
      "left" : "if (tweaks)",
      "right" : "if (tweaks)",
      "info" : "IfStatement[33551-33722]:IfStatement[33475-33646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33563-33639]:Block[33487-33563]"
    }, {
      "left" : "options.setTweakToBooleanLiteral(defName, isTrue);",
      "right" : "options.setTweakToBooleanLiteral(defName, isTrue);",
      "info" : "ExpressionStatement[33577-33627]:ExpressionStatement[33501-33551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33645-33722]:Block[33569-33646]"
    }, {
      "left" : "options.setDefineToBooleanLiteral(defName, isTrue);",
      "right" : "options.setDefineToBooleanLiteral(defName, isTrue);",
      "info" : "ExpressionStatement[33659-33710]:ExpressionStatement[33583-33634]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33733-33742]:ContinueStatement[33657-33666]"
    }, {
      "left" : "if (defValue.length() > 1\n            && ((defValue.charAt(0) == '\\'' &&\n                defValue.charAt(defValue.length() - 1) == '\\'')\n                || (defValue.charAt(0) == '\\\"' &&\n                    defValue.charAt(defValue.length() - 1) == '\\\"')))",
      "right" : "if (defValue.length() > 1\n            && ((defValue.charAt(0) == '\\'' &&\n                defValue.charAt(defValue.length() - 1) == '\\'')\n                || (defValue.charAt(0) == '\\\"' &&\n                    defValue.charAt(defValue.length() - 1) == '\\\"')))",
      "info" : "IfStatement[33758-34946]:IfStatement[33682-34870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34015-34532]:Block[33939-34456]"
    }, {
      "left" : "String maybeStringVal =\n              defValue.substring(1, defValue.length() - 1);",
      "right" : "String maybeStringVal =\n              defValue.substring(1, defValue.length() - 1);",
      "info" : "VariableDeclarationStatement[34133-34216]:VariableDeclarationStatement[34057-34140]"
    }, {
      "left" : "if (maybeStringVal.indexOf(defValue.charAt(0)) == -1)",
      "right" : "if (maybeStringVal.indexOf(defValue.charAt(0)) == -1)",
      "info" : "IfStatement[34227-34522]:IfStatement[34151-34446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34281-34522]:Block[34205-34446]"
    }, {
      "left" : "if (tweaks)",
      "right" : "if (tweaks)",
      "info" : "IfStatement[34295-34488]:IfStatement[34219-34412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34307-34394]:Block[34231-34318]"
    }, {
      "left" : "options.setTweakToStringLiteral(defName, maybeStringVal);",
      "right" : "options.setTweakToStringLiteral(defName, maybeStringVal);",
      "info" : "ExpressionStatement[34323-34380]:ExpressionStatement[34247-34304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34400-34488]:Block[34324-34412]"
    }, {
      "left" : "options.setDefineToStringLiteral(defName, maybeStringVal);",
      "right" : "options.setDefineToStringLiteral(defName, maybeStringVal);",
      "info" : "ExpressionStatement[34416-34474]:ExpressionStatement[34340-34398]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34501-34510]:ContinueStatement[34425-34434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34538-34946]:Block[34462-34870]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[34550-34936]:TryStatement[34474-34860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34554-34834]:Block[34478-34758]"
    }, {
      "left" : "double value = Double.parseDouble(defValue);",
      "right" : "double value = Double.parseDouble(defValue);",
      "info" : "VariableDeclarationStatement[34568-34612]:VariableDeclarationStatement[34492-34536]"
    }, {
      "left" : "if (tweaks)",
      "right" : "if (tweaks)",
      "info" : "IfStatement[34625-34800]:IfStatement[34549-34724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34637-34715]:Block[34561-34639]"
    }, {
      "left" : "options.setTweakToDoubleLiteral(defName, value);",
      "right" : "options.setTweakToDoubleLiteral(defName, value);",
      "info" : "ExpressionStatement[34653-34701]:ExpressionStatement[34577-34625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34721-34800]:Block[34645-34724]"
    }, {
      "left" : "options.setDefineToDoubleLiteral(defName, value);",
      "right" : "options.setDefineToDoubleLiteral(defName, value);",
      "info" : "ExpressionStatement[34737-34786]:ExpressionStatement[34661-34710]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[34813-34822]:ContinueStatement[34737-34746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34867-34936]:Block[34791-34860]"
    }, {
      "left" : "if (tweaks)",
      "right" : "if (tweaks)",
      "info" : "IfStatement[34962-35076]:IfStatement[34886-35000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34974-35076]:Block[34898-35000]"
    }, {
      "left" : "throw new RuntimeException(\n            \"--tweak flag syntax invalid: \" + override);",
      "right" : "throw new RuntimeException(\n            \"--tweak flag syntax invalid: \" + override);",
      "info" : "ThrowStatement[34984-35068]:ThrowStatement[34908-34992]"
    }, {
      "left" : "throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);",
      "right" : "throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);",
      "info" : "ThrowStatement[35083-35166]:ThrowStatement[35007-35090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35364-35502]:Block[35288-35426]"
    }, {
      "left" : "return !config.module.isEmpty()\n        && config.outputManifest != null\n        && config.outputManifest.contains(\"%outname%\");",
      "right" : "return !config.module.isEmpty()\n        && config.outputManifest != null\n        && config.outputManifest.contains(\"%outname%\");",
      "info" : "ReturnStatement[35370-35498]:ReturnStatement[35294-35422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35682-36488]:Block[35606-36412]"
    }, {
      "left" : "String outputManifest = config.outputManifest;",
      "right" : "String outputManifest = config.outputManifest;",
      "info" : "VariableDeclarationStatement[35688-35734]:VariableDeclarationStatement[35612-35658]"
    }, {
      "left" : "if (Strings.isEmpty(outputManifest))",
      "right" : "if (Strings.isEmpty(outputManifest))",
      "info" : "IfStatement[35739-35797]:IfStatement[35663-35721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35776-35797]:Block[35700-35721]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35784-35791]:ReturnStatement[35708-35715]"
    }, {
      "left" : "JSModuleGraph graph = compiler.getModuleGraph();",
      "right" : "JSModuleGraph graph = compiler.getModuleGraph();",
      "info" : "VariableDeclarationStatement[35803-35851]:VariableDeclarationStatement[35727-35775]"
    }, {
      "left" : "if (shouldGenerateManifestPerModule())",
      "right" : "if (shouldGenerateManifestPerModule())",
      "info" : "IfStatement[35856-36484]:IfStatement[35780-36408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35895-36188]:Block[35819-36112]"
    }, {
      "left" : "Iterable<JSModule> modules = graph.getAllModules();",
      "right" : "Iterable<JSModule> modules = graph.getAllModules();",
      "info" : "VariableDeclarationStatement[35943-35994]:VariableDeclarationStatement[35867-35918]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[36001-36182]:EnhancedForStatement[35925-36106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36033-36182]:Block[35957-36106]"
    }, {
      "left" : "Writer out = fileNameToOutputWriter(expandManifest(module));",
      "right" : "Writer out = fileNameToOutputWriter(expandManifest(module));",
      "info" : "VariableDeclarationStatement[36043-36103]:VariableDeclarationStatement[35967-36027]"
    }, {
      "left" : "printManifestTo(module.getInputs(), out);",
      "right" : "printManifestTo(module.getInputs(), out);",
      "info" : "ExpressionStatement[36112-36153]:ExpressionStatement[36036-36077]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[36162-36174]:ExpressionStatement[36086-36098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36194-36484]:Block[36118-36408]"
    }, {
      "left" : "Writer out = fileNameToOutputWriter(expandManifest(null));",
      "right" : "Writer out = fileNameToOutputWriter(expandManifest(null));",
      "info" : "VariableDeclarationStatement[36244-36302]:VariableDeclarationStatement[36168-36226]"
    }, {
      "left" : "if (graph == null)",
      "right" : "if (graph == null)",
      "info" : "IfStatement[36309-36459]:IfStatement[36233-36383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36328-36396]:Block[36252-36320]"
    }, {
      "left" : "printManifestTo(compiler.getInputsInOrder(), out);",
      "right" : "printManifestTo(compiler.getInputsInOrder(), out);",
      "info" : "ExpressionStatement[36338-36388]:ExpressionStatement[36262-36312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36402-36459]:Block[36326-36383]"
    }, {
      "left" : "printModuleGraphManifestTo(graph, out);",
      "right" : "printModuleGraphManifestTo(graph, out);",
      "info" : "ExpressionStatement[36412-36451]:ExpressionStatement[36336-36375]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[36466-36478]:ExpressionStatement[36390-36402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36671-37290]:Block[36595-37214]"
    }, {
      "left" : "Joiner commas = Joiner.on(\",\");",
      "right" : "Joiner commas = Joiner.on(\",\");",
      "info" : "VariableDeclarationStatement[36677-36708]:VariableDeclarationStatement[36601-36632]"
    }, {
      "left" : "boolean requiresNewline = false;",
      "right" : "boolean requiresNewline = false;",
      "info" : "VariableDeclarationStatement[36713-36745]:VariableDeclarationStatement[36637-36669]"
    }, {
      "left" : "for (JSModule module : graph.getAllModulesInDependencyOrder())",
      "right" : "for (JSModule module : graph.getAllModulesInDependencyOrder())",
      "info" : "EnhancedForStatement[36750-37286]:EnhancedForStatement[36674-37210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36813-37286]:Block[36737-37210]"
    }, {
      "left" : "if (requiresNewline)",
      "right" : "if (requiresNewline)",
      "info" : "IfStatement[36821-36877]:IfStatement[36745-36801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36842-36877]:Block[36766-36801]"
    }, {
      "left" : "out.append(\"\\n\");",
      "right" : "out.append(\"\\n\");",
      "info" : "ExpressionStatement[36852-36869]:ExpressionStatement[36776-36793]"
    }, {
      "left" : "String dependencies = commas.join(module.getSortedDependencyNames());",
      "right" : "String dependencies = commas.join(module.getSortedDependencyNames());",
      "info" : "VariableDeclarationStatement[36981-37050]:VariableDeclarationStatement[36905-36974]"
    }, {
      "left" : "out.append(\n          String.format(\"{%s%s}\\n\",\n              module.getName(),\n              dependencies.isEmpty() ? \"\" : \":\" + dependencies));",
      "right" : "out.append(\n          String.format(\"{%s%s}\\n\",\n              module.getName(),\n              dependencies.isEmpty() ? \"\" : \":\" + dependencies));",
      "info" : "ExpressionStatement[37057-37202]:ExpressionStatement[36981-37126]"
    }, {
      "left" : "printManifestTo(module.getInputs(), out);",
      "right" : "printManifestTo(module.getInputs(), out);",
      "info" : "ExpressionStatement[37209-37250]:ExpressionStatement[37133-37174]"
    }, {
      "left" : "requiresNewline = true;",
      "right" : "requiresNewline = true;",
      "info" : "ExpressionStatement[37257-37280]:ExpressionStatement[37181-37204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37488-37716]:Block[37412-37640]"
    }, {
      "left" : "List<String> names = Lists.newArrayList();",
      "right" : "List<String> names = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[37494-37536]:VariableDeclarationStatement[37418-37460]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[37541-37617]:EnhancedForStatement[37465-37541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37576-37617]:Block[37500-37541]"
    }, {
      "left" : "names.add(input.getName());",
      "right" : "names.add(input.getName());",
      "info" : "ExpressionStatement[37584-37611]:ExpressionStatement[37508-37535]"
    }, {
      "left" : "String result = Joiner.on(\"\\n\").join(names);",
      "right" : "String result = Joiner.on(\"\\n\").join(names);",
      "info" : "VariableDeclarationStatement[37622-37666]:VariableDeclarationStatement[37546-37590]"
    }, {
      "left" : "out.append(result);",
      "right" : "out.append(result);",
      "info" : "ExpressionStatement[37671-37690]:ExpressionStatement[37595-37614]"
    }, {
      "left" : "out.append(\"\\n\");",
      "right" : "out.append(\"\\n\");",
      "info" : "ExpressionStatement[37695-37712]:ExpressionStatement[37619-37636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38026-38121]:Block[37950-38045]"
    }, {
      "left" : "lastStartTime = System.currentTimeMillis();",
      "right" : "lastStartTime = System.currentTimeMillis();",
      "info" : "ExpressionStatement[38034-38077]:ExpressionStatement[37958-38001]"
    }, {
      "left" : "PhaseOptimizer.clearLoopsRun();",
      "right" : "PhaseOptimizer.clearLoopsRun();",
      "info" : "ExpressionStatement[38084-38115]:ExpressionStatement[38008-38039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38203-38491]:Block[38127-38415]"
    }, {
      "left" : "long endTime = System.currentTimeMillis();",
      "right" : "long endTime = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[38211-38253]:VariableDeclarationStatement[38135-38177]"
    }, {
      "left" : "long length = endTime - lastStartTime;",
      "right" : "long length = endTime - lastStartTime;",
      "info" : "VariableDeclarationStatement[38260-38298]:VariableDeclarationStatement[38184-38222]"
    }, {
      "left" : "worstRunTime = Math.max(length, worstRunTime);",
      "right" : "worstRunTime = Math.max(length, worstRunTime);",
      "info" : "ExpressionStatement[38305-38351]:ExpressionStatement[38229-38275]"
    }, {
      "left" : "if (length < bestRunTime)",
      "right" : "if (length < bestRunTime)",
      "info" : "IfStatement[38358-38485]:IfStatement[38282-38409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38384-38485]:Block[38308-38409]"
    }, {
      "left" : "loopedPassesInBestRun = PhaseOptimizer.getLoopsRun();",
      "right" : "loopedPassesInBestRun = PhaseOptimizer.getLoopsRun();",
      "info" : "ExpressionStatement[38394-38447]:ExpressionStatement[38318-38371]"
    }, {
      "left" : "bestRunTime = length;",
      "right" : "bestRunTime = length;",
      "info" : "ExpressionStatement[38456-38477]:ExpressionStatement[38380-38401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38596-39015]:Block[38520-38939]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38604-39009]:TryStatement[38528-38933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38608-38914]:Block[38532-38838]"
    }, {
      "left" : "out.append(\"Best time: \" + bestRunTime + \"\\n\");",
      "right" : "out.append(\"Best time: \" + bestRunTime + \"\\n\");",
      "info" : "ExpressionStatement[38618-38665]:ExpressionStatement[38542-38589]"
    }, {
      "left" : "out.append(\"Worst time: \" + worstRunTime + \"\\n\");",
      "right" : "out.append(\"Worst time: \" + worstRunTime + \"\\n\");",
      "info" : "ExpressionStatement[38674-38723]:ExpressionStatement[38598-38647]"
    }, {
      "left" : "int i = 1;",
      "right" : "int i = 1;",
      "info" : "VariableDeclarationStatement[38733-38743]:VariableDeclarationStatement[38657-38667]"
    }, {
      "left" : "for (List<String> loop : loopedPassesInBestRun)",
      "right" : "for (List<String> loop : loopedPassesInBestRun)",
      "info" : "EnhancedForStatement[38752-38906]:EnhancedForStatement[38676-38830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38800-38906]:Block[38724-38830]"
    }, {
      "left" : "out.append(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop)+ \"\\n\");",
      "right" : "out.append(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop)+ \"\\n\");",
      "info" : "ExpressionStatement[38812-38881]:ExpressionStatement[38736-38805]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[38892-38896]:ExpressionStatement[38816-38820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38937-39009]:Block[38861-38933]"
    }, {
      "left" : "throw new RuntimeException(\"unexpected exception\", e);",
      "right" : "throw new RuntimeException(\"unexpected exception\", e);",
      "info" : "ThrowStatement[38947-39001]:ThrowStatement[38871-38925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39480-39540]:Block[39404-39464]"
    }, {
      "left" : "this.printTree = printTree;",
      "right" : "this.printTree = printTree;",
      "info" : "ExpressionStatement[39488-39515]:ExpressionStatement[39412-39439]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[39522-39534]:ReturnStatement[39446-39458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39786-39868]:Block[39710-39792]"
    }, {
      "left" : "this.computePhaseOrdering = computePhaseOrdering;",
      "right" : "this.computePhaseOrdering = computePhaseOrdering;",
      "info" : "ExpressionStatement[39794-39843]:ExpressionStatement[39718-39767]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[39850-39862]:ReturnStatement[39774-39786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40064-40122]:Block[39988-40046]"
    }, {
      "left" : "this.printAst = printAst;",
      "right" : "this.printAst = printAst;",
      "info" : "ExpressionStatement[40072-40097]:ExpressionStatement[39996-40021]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[40104-40116]:ReturnStatement[40028-40040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40312-40382]:Block[40236-40306]"
    }, {
      "left" : "this.printPassGraph = printPassGraph;",
      "right" : "this.printPassGraph = printPassGraph;",
      "info" : "ExpressionStatement[40320-40357]:ExpressionStatement[40244-40281]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[40364-40376]:ReturnStatement[40288-40300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40584-40652]:Block[40508-40576]"
    }, {
      "left" : "this.jscompDevMode = jscompDevMode;",
      "right" : "this.jscompDevMode = jscompDevMode;",
      "info" : "ExpressionStatement[40592-40627]:ExpressionStatement[40516-40551]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[40634-40646]:ReturnStatement[40558-40570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40971-41037]:Block[40895-40961]"
    }, {
      "left" : "this.loggingLevel = loggingLevel;",
      "right" : "this.loggingLevel = loggingLevel;",
      "info" : "ExpressionStatement[40979-41012]:ExpressionStatement[40903-40936]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[41019-41031]:ReturnStatement[40943-40955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41247-41337]:Block[41171-41261]"
    }, {
      "left" : "this.externs.clear();",
      "right" : "this.externs.clear();",
      "info" : "ExpressionStatement[41255-41276]:ExpressionStatement[41179-41200]"
    }, {
      "left" : "this.externs.addAll(externs);",
      "right" : "this.externs.addAll(externs);",
      "info" : "ExpressionStatement[41283-41312]:ExpressionStatement[41207-41236]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[41319-41331]:ReturnStatement[41243-41255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41517-41592]:Block[41441-41516]"
    }, {
      "left" : "this.js.clear();",
      "right" : "this.js.clear();",
      "info" : "ExpressionStatement[41525-41541]:ExpressionStatement[41449-41465]"
    }, {
      "left" : "this.js.addAll(js);",
      "right" : "this.js.addAll(js);",
      "info" : "ExpressionStatement[41548-41567]:ExpressionStatement[41472-41491]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[41574-41586]:ReturnStatement[41498-41510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41786-41852]:Block[41710-41776]"
    }, {
      "left" : "this.jsOutputFile = jsOutputFile;",
      "right" : "this.jsOutputFile = jsOutputFile;",
      "info" : "ExpressionStatement[41794-41827]:ExpressionStatement[41718-41751]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[41834-41846]:ReturnStatement[41758-41770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42384-42471]:Block[42308-42395]"
    }, {
      "left" : "this.module.clear();",
      "right" : "this.module.clear();",
      "info" : "ExpressionStatement[42392-42412]:ExpressionStatement[42316-42336]"
    }, {
      "left" : "this.module.addAll(module);",
      "right" : "this.module.addAll(module);",
      "info" : "ExpressionStatement[42419-42446]:ExpressionStatement[42343-42370]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[42453-42465]:ReturnStatement[42377-42389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42728-42810]:Block[42652-42734]"
    }, {
      "left" : "this.variableMapInputFile = variableMapInputFile;",
      "right" : "this.variableMapInputFile = variableMapInputFile;",
      "info" : "ExpressionStatement[42736-42785]:ExpressionStatement[42660-42709]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[42792-42804]:ReturnStatement[42716-42728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43067-43149]:Block[42991-43073]"
    }, {
      "left" : "this.propertyMapInputFile = propertyMapInputFile;",
      "right" : "this.propertyMapInputFile = propertyMapInputFile;",
      "info" : "ExpressionStatement[43075-43124]:ExpressionStatement[42999-43048]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43131-43143]:ReturnStatement[43055-43067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43394-43478]:Block[43318-43402]"
    }, {
      "left" : "this.variableMapOutputFile = variableMapOutputFile;",
      "right" : "this.variableMapOutputFile = variableMapOutputFile;",
      "info" : "ExpressionStatement[43402-43453]:ExpressionStatement[43326-43377]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43460-43472]:ReturnStatement[43384-43396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43906-43984]:Block[43830-43908]"
    }, {
      "left" : "this.createNameMapFiles = createNameMapFiles;",
      "right" : "this.createNameMapFiles = createNameMapFiles;",
      "info" : "ExpressionStatement[43914-43959]:ExpressionStatement[43838-43883]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43966-43978]:ReturnStatement[43890-43902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44229-44313]:Block[44153-44237]"
    }, {
      "left" : "this.propertyMapOutputFile = propertyMapOutputFile;",
      "right" : "this.propertyMapOutputFile = propertyMapOutputFile;",
      "info" : "ExpressionStatement[44237-44288]:ExpressionStatement[44161-44212]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[44295-44307]:ReturnStatement[44219-44231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44534-44608]:Block[44458-44532]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[44542-44583]:ExpressionStatement[44466-44507]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[44590-44602]:ReturnStatement[44514-44526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45020-45098]:Block[44944-45022]"
    }, {
      "left" : "this.summaryDetailLevel = summaryDetailLevel;",
      "right" : "this.summaryDetailLevel = summaryDetailLevel;",
      "info" : "ExpressionStatement[45028-45073]:ExpressionStatement[44952-44997]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[45080-45092]:ReturnStatement[45004-45016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45347-45415]:Block[45271-45339]"
    }, {
      "left" : "this.outputWrapper = outputWrapper;",
      "right" : "this.outputWrapper = outputWrapper;",
      "info" : "ExpressionStatement[45355-45390]:ExpressionStatement[45279-45314]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[45397-45409]:ReturnStatement[45321-45333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45808-45916]:Block[45732-45840]"
    }, {
      "left" : "this.moduleWrapper.clear();",
      "right" : "this.moduleWrapper.clear();",
      "info" : "ExpressionStatement[45816-45843]:ExpressionStatement[45740-45767]"
    }, {
      "left" : "this.moduleWrapper.addAll(moduleWrapper);",
      "right" : "this.moduleWrapper.addAll(moduleWrapper);",
      "info" : "ExpressionStatement[45850-45891]:ExpressionStatement[45774-45815]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[45898-45910]:ReturnStatement[45822-45834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46235-46321]:Block[46159-46245]"
    }, {
      "left" : "this.moduleOutputPathPrefix = moduleOutputPathPrefix;",
      "right" : "this.moduleOutputPathPrefix = moduleOutputPathPrefix;",
      "info" : "ExpressionStatement[46243-46296]:ExpressionStatement[46167-46220]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[46303-46315]:ReturnStatement[46227-46239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46724-46796]:Block[46648-46720]"
    }, {
      "left" : "this.createSourceMap = createSourceMap;",
      "right" : "this.createSourceMap = createSourceMap;",
      "info" : "ExpressionStatement[46732-46771]:ExpressionStatement[46656-46695]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[46778-46790]:ReturnStatement[46702-46714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47047-47114]:Block[46971-47038]"
    }, {
      "left" : "this.sourceMapDetailLevel = level;",
      "right" : "this.sourceMapDetailLevel = level;",
      "info" : "ExpressionStatement[47055-47089]:ExpressionStatement[46979-47013]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[47096-47108]:ReturnStatement[47020-47032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47343-47406]:Block[47267-47330]"
    }, {
      "left" : "this.sourceMapFormat = format;",
      "right" : "this.sourceMapFormat = format;",
      "info" : "ExpressionStatement[47351-47381]:ExpressionStatement[47275-47305]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[47388-47400]:ReturnStatement[47312-47324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48590-48677]:Block[47991-48078]"
    }, {
      "left" : "this.define.clear();",
      "right" : "this.define.clear();",
      "info" : "ExpressionStatement[48598-48618]:ExpressionStatement[47999-48019]"
    }, {
      "left" : "this.define.addAll(define);",
      "right" : "this.define.addAll(define);",
      "info" : "ExpressionStatement[48625-48652]:ExpressionStatement[48026-48053]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[48659-48671]:ReturnStatement[48060-48072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49086-49170]:Block[48487-48571]"
    }, {
      "left" : "this.tweak.clear();",
      "right" : "this.tweak.clear();",
      "info" : "ExpressionStatement[49094-49113]:ExpressionStatement[48495-48514]"
    }, {
      "left" : "this.tweak.addAll(tweak);",
      "right" : "this.tweak.addAll(tweak);",
      "info" : "ExpressionStatement[49120-49145]:ExpressionStatement[48521-48546]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49152-49164]:ReturnStatement[48553-48565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49397-49469]:Block[48798-48870]"
    }, {
      "left" : "this.tweakProcessing = tweakProcessing;",
      "right" : "this.tweakProcessing = tweakProcessing;",
      "info" : "ExpressionStatement[49405-49444]:ExpressionStatement[48806-48845]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49451-49463]:ReturnStatement[48852-48864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49606-49662]:Block[49007-49063]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[49614-49637]:ExpressionStatement[49015-49038]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49644-49656]:ReturnStatement[49045-49057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49920-49993]:Block[49321-49394]"
    }, {
      "left" : "this.manageClosureDependencies = newVal;",
      "right" : "this.manageClosureDependencies = newVal;",
      "info" : "ExpressionStatement[49928-49968]:ExpressionStatement[49329-49369]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49975-49987]:ReturnStatement[49376-49388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50273-50391]:Block[49674-49792]"
    }, {
      "left" : "Preconditions.checkNotNull(entryPoints);",
      "right" : "Preconditions.checkNotNull(entryPoints);",
      "info" : "ExpressionStatement[50281-50321]:ExpressionStatement[49682-49722]"
    }, {
      "left" : "this.closureEntryPoints = entryPoints;",
      "right" : "this.closureEntryPoints = entryPoints;",
      "info" : "ExpressionStatement[50328-50366]:ExpressionStatement[49729-49767]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[50373-50385]:ReturnStatement[49774-49786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50567-50637]:Block[49968-50038]"
    }, {
      "left" : "this.outputManifest = outputManifest;",
      "right" : "this.outputManifest = outputManifest;",
      "info" : "ExpressionStatement[50575-50612]:ExpressionStatement[49976-50013]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[50619-50631]:ReturnStatement[50020-50032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50832-50910]:Block[50233-50311]"
    }, {
      "left" : "this.acceptConstKeyword = acceptConstKeyword;",
      "right" : "this.acceptConstKeyword = acceptConstKeyword;",
      "info" : "ExpressionStatement[50840-50885]:ExpressionStatement[50241-50286]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[50892-50904]:ReturnStatement[50293-50305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51155-51217]:Block[50556-50618]"
    }, {
      "left" : "this.languageIn = languageIn;",
      "right" : "this.languageIn = languageIn;",
      "info" : "ExpressionStatement[51163-51192]:ExpressionStatement[50564-50593]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[51199-51211]:ReturnStatement[50600-50612]"
    } ]
  },
  "interFileMappings" : { }
}