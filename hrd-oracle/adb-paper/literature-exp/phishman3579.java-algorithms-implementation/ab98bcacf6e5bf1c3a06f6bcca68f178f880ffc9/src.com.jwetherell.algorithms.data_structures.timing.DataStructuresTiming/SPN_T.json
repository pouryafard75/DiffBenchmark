{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataStructuresTiming",
      "right" : "DataStructuresTiming",
      "info" : "TypeDeclaration[1586-85441]:TypeDeclaration[1618-72424]"
    }, {
      "left" : "private static final Random RANDOM = new Random();",
      "right" : "private static final Random RANDOM = new Random();",
      "info" : "FieldDeclaration[1627-1677]:FieldDeclaration[1659-1709]"
    }, {
      "left" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"0.##\");",
      "right" : "private static final DecimalFormat FORMAT = new DecimalFormat(\"0.##\");",
      "info" : "FieldDeclaration[1682-1752]:FieldDeclaration[1714-1784]"
    }, {
      "left" : "private static final int NUMBER_OF_TESTS = 3;",
      "right" : "private static final int NUMBER_OF_TESTS = 3;",
      "info" : "FieldDeclaration[1757-1802]:FieldDeclaration[1789-1834]"
    }, {
      "left" : "private static final int ARRAY_SIZE = 1024*20;",
      "right" : "private static final int ARRAY_SIZE = 1024*20;",
      "info" : "FieldDeclaration[1906-1952]:FieldDeclaration[1932-1978]"
    }, {
      "left" : "private static final int RANDOM_SIZE = 1000 * ARRAY_SIZE;",
      "right" : "private static final int RANDOM_SIZE = 1000 * ARRAY_SIZE;",
      "info" : "FieldDeclaration[2023-2080]:FieldDeclaration[2049-2106]"
    }, {
      "left" : "private static final Integer INVALID = RANDOM_SIZE + 10;",
      "right" : "private static final Integer INVALID = RANDOM_SIZE + 10;",
      "info" : "FieldDeclaration[2085-2141]:FieldDeclaration[2111-2167]"
    }, {
      "left" : "private static boolean firstTimeThru = true;",
      "right" : "private static boolean firstTimeThru = true;",
      "info" : "FieldDeclaration[2279-2323]:FieldDeclaration[2878-2922]"
    }, {
      "left" : "private static int debug = 1;",
      "right" : "private static int debug = 1;",
      "info" : "FieldDeclaration[2383-2412]:FieldDeclaration[2462-2491]"
    }, {
      "left" : "private static boolean debugTime = true;",
      "right" : "private static boolean debugTime = true;",
      "info" : "FieldDeclaration[2510-2550]:FieldDeclaration[2589-2629]"
    }, {
      "left" : "private static boolean debugMemory = true;",
      "right" : "private static boolean debugMemory = true;",
      "info" : "FieldDeclaration[2640-2682]:FieldDeclaration[2719-2761]"
    }, {
      "left" : "private static final int TESTS = 39;",
      "right" : "private static final int TESTS = 39;",
      "info" : "FieldDeclaration[2737-2773]:FieldDeclaration[2173-2209]"
    }, {
      "left" : "private static final String[] testNames = new String[TESTS];",
      "right" : "private static final String[] testNames = new String[TESTS];",
      "info" : "FieldDeclaration[2827-2887]:FieldDeclaration[2263-2323]"
    }, {
      "left" : "private static final long[][] testResults = new long[TESTS][];",
      "right" : "private static final long[][] testResults = new long[TESTS][];",
      "info" : "FieldDeclaration[2924-2986]:FieldDeclaration[2360-2422]"
    }, {
      "left" : "private static int testIndex = 0;",
      "right" : "private static int testIndex = 0;",
      "info" : "FieldDeclaration[3025-3058]:FieldDeclaration[2816-2849]"
    }, {
      "left" : "public static void main(String[] args)",
      "right" : "public static void main(String[] args)",
      "info" : "MethodDeclaration[3088-3517]:MethodDeclaration[2983-3372]"
    }, {
      "left" : "private static void generateTestData(int idx, int size, Integer[][] unsorteds, Integer[][] sorteds, String[] strings)",
      "right" : "private static void generateTestData(int idx, int size, Integer[][] unsorteds, Integer[][] sorteds, String[] strings)",
      "info" : "MethodDeclaration[3523-4833]:MethodDeclaration[3378-4694]"
    }, {
      "left" : "private static void handleError(Object obj)",
      "right" : "private static void handleError(String input, Object obj)",
      "info" : "MethodDeclaration[32267-32452]:MethodDeclaration[11218-11416]"
    }, {
      "left" : "private static final BinarySearchTree<Integer> avlTree = new AVLTree<Integer>();",
      "right" : "BinarySearchTree<Integer> avlTree = new AVLTree<Integer>();",
      "info" : "FieldDeclaration[32458-32538]:FieldDeclaration[11764-11823]"
    }, {
      "left" : "private static boolean testAVLTree()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[32543-32808]:MethodDeclaration[12015-12264]"
    }, {
      "left" : "private static final BTree<Integer> bTree = new BTree<Integer>(2);",
      "right" : "BTree<Integer> bTree = new BTree<Integer>(2);",
      "info" : "FieldDeclaration[32814-32880]:FieldDeclaration[12335-12380]"
    }, {
      "left" : "private static boolean testBTree()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[32885-33148]:MethodDeclaration[12568-12817]"
    }, {
      "left" : "private static final BinarySearchTree<Integer> bst = new BinarySearchTree<Integer>();",
      "right" : "BinarySearchTree<Integer> bst = new BinarySearchTree<Integer>();",
      "info" : "FieldDeclaration[33154-33239]:FieldDeclaration[12886-12950]"
    }, {
      "left" : "private static boolean testBST()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[33244-33490]:MethodDeclaration[13133-13382]"
    }, {
      "left" : "private static final BinaryHeap.BinaryHeapArray<Integer> aHeapMin = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MIN);",
      "right" : "BinaryHeap.BinaryHeapArray<Integer> aHeapMin = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MIN);",
      "info" : "FieldDeclaration[33496-33625]:FieldDeclaration[13460-13568]"
    }, {
      "left" : "private static final BinaryHeap.BinaryHeapTree<Integer> tHeapMin = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MIN);",
      "right" : "BinaryHeap.BinaryHeapTree<Integer> tHeapMin = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MIN);",
      "info" : "FieldDeclaration[33630-33757]:FieldDeclaration[14097-14203]"
    }, {
      "left" : "private static boolean testMinHeap()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[33762-34252]:MethodDeclaration[13770-14020]"
    }, {
      "left" : "private static final BinaryHeap.BinaryHeapArray<Integer> aHeapMax = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MAX);",
      "right" : "BinaryHeap.BinaryHeapArray<Integer> aHeapMax = new BinaryHeap.BinaryHeapArray<Integer>(BinaryHeap.Type.MAX);",
      "info" : "FieldDeclaration[34258-34387]:FieldDeclaration[14732-14840]"
    }, {
      "left" : "private static final BinaryHeap.BinaryHeapTree<Integer> tHeapMax = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MAX);",
      "right" : "BinaryHeap.BinaryHeapTree<Integer> tHeapMax = new BinaryHeap.BinaryHeapTree<Integer>(BinaryHeap.Type.MAX);",
      "info" : "FieldDeclaration[34392-34519]:FieldDeclaration[15369-15475]"
    }, {
      "left" : "private static final HashMap<Integer,String> pHashMap = new HashMap<Integer,String>(HashMap.Type.PROBING, ARRAY_SIZE/2);",
      "right" : "HashMap<Integer,String> pHashMap = new HashMap<Integer,String>(HashMap.Type.PROBING, ARRAY_SIZE/2);",
      "info" : "FieldDeclaration[35020-35140]:FieldDeclaration[16006-16105]"
    }, {
      "left" : "private static final HashMap<Integer,String> cHashMap = new HashMap<Integer,String>(HashMap.Type.CHAINING, ARRAY_SIZE/2);",
      "right" : "HashMap<Integer,String> cHashMap = new HashMap<Integer,String>(HashMap.Type.CHAINING, ARRAY_SIZE/2);",
      "info" : "FieldDeclaration[35145-35266]:FieldDeclaration[16626-16726]"
    }, {
      "left" : "private static final HashArrayMappedTrie<Integer,String> hamt = new HashArrayMappedTrie<Integer,String>();",
      "right" : "HashArrayMappedTrie<Integer,String> hamt = new HashArrayMappedTrie<Integer,String>();",
      "info" : "FieldDeclaration[35668-35774]:FieldDeclaration[17237-17322]"
    }, {
      "left" : "private static boolean testHAMT()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[35779-36014]:MethodDeclaration[17501-17747]"
    }, {
      "left" : "private static final java.util.Map<Integer,String> javaHashMap = new java.util.HashMap<Integer,String>(ARRAY_SIZE/2);",
      "right" : "java.util.Map<Integer,String> javaHashMap = new java.util.HashMap<Integer,String>(ARRAY_SIZE/2);",
      "info" : "FieldDeclaration[36020-36137]:FieldDeclaration[17824-17920]"
    }, {
      "left" : "private static boolean testJavaHashMap()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[36142-36334]:MethodDeclaration[18050-18303]"
    }, {
      "left" : "private static final java.util.PriorityQueue<Integer> javaMinArrayHeap = new java.util.PriorityQueue<Integer>(10,\n        new Comparator<Integer>() {\n            @Override\n            public int compare(Integer arg0, Integer arg1) {\n                if (arg0.compareTo(arg1) < 0)\n                    return -1;\n                else if (arg1.compareTo(arg0) < 0)\n                    return 1;\n                return 0;\n            }\n        }\n    );",
      "right" : "java.util.PriorityQueue<Integer> javaMinArrayHeap = new java.util.PriorityQueue<Integer>(10,\n            new Comparator<Integer>() {\n                @Override\n                public int compare(Integer arg0, Integer arg1) {\n                    if (arg0.compareTo(arg1) > 0)\n                        return 1;\n                    else if (arg1.compareTo(arg0) > 0)\n                        return -1;\n                    return 0;\n                }\n            }\n        );",
      "info" : "FieldDeclaration[36340-36787]:FieldDeclaration[18380-18850]"
    }, {
      "left" : "public int compare(Integer arg0, Integer arg1)",
      "right" : "public int compare(Integer arg0, Integer arg1)",
      "info" : "MethodDeclaration[36502-36770]:MethodDeclaration[18529-18825]"
    }, {
      "left" : "private static boolean testJavaMinHeap()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[36792-37005]:MethodDeclaration[18989-19241]"
    }, {
      "left" : "private static final java.util.PriorityQueue<Integer> javaMaxArrayHeap = new java.util.PriorityQueue<Integer>(10,\n        new Comparator<Integer>() {\n            @Override\n            public int compare(Integer arg0, Integer arg1) {\n                if (arg0.compareTo(arg1) > 0)\n                    return -1;\n                else if (arg1.compareTo(arg0) > 0)\n                    return 1;\n                return 0;\n            }\n        }\n    );",
      "right" : "java.util.PriorityQueue<Integer> javaMaxArrayHeap = new java.util.PriorityQueue<Integer>(10,\n            new Comparator<Integer>() {\n                @Override\n                public int compare(Integer arg0, Integer arg1) {\n                    if (arg0.compareTo(arg1) > 0)\n                        return -1;\n                    else if (arg1.compareTo(arg0) > 0)\n                        return 1;\n                    return 0;\n                }\n            }\n        );",
      "info" : "FieldDeclaration[37011-37458]:FieldDeclaration[19318-19788]"
    }, {
      "left" : "public int compare(Integer arg0, Integer arg1)",
      "right" : "public int compare(Integer arg0, Integer arg1)",
      "info" : "MethodDeclaration[37173-37441]:MethodDeclaration[19467-19763]"
    }, {
      "left" : "private static boolean testJavaMaxHeap()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[37463-37676]:MethodDeclaration[19927-20179]"
    }, {
      "left" : "private static final java.util.List<Integer> javaArrayList = new java.util.ArrayList<Integer>();",
      "right" : "java.util.List<Integer> javaArrayList = new java.util.ArrayList<Integer>();",
      "info" : "FieldDeclaration[37682-37778]:FieldDeclaration[20258-20333]"
    }, {
      "left" : "private static boolean testJavaArrayList()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[37783-37991]:MethodDeclaration[20468-20717]"
    }, {
      "left" : "private static final java.util.List<Integer> javaLinkedList = new java.util.LinkedList<Integer>();",
      "right" : "java.util.List<Integer> javaLinkedList = new java.util.LinkedList<Integer>();",
      "info" : "FieldDeclaration[37997-38095]:FieldDeclaration[20797-20874]"
    }, {
      "left" : "private static boolean testJavaLinkedList()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[38100-38311]:MethodDeclaration[21010-21260]"
    }, {
      "left" : "private static final java.util.Deque<Integer> javaArrayQueue = new java.util.ArrayDeque<Integer>();",
      "right" : "java.util.Deque<Integer> javaArrayQueue = new java.util.ArrayDeque<Integer>();",
      "info" : "FieldDeclaration[38317-38416]:FieldDeclaration[21340-21418]"
    }, {
      "left" : "private static boolean testJavaArrayQueue()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[38421-38632]:MethodDeclaration[21554-21804]"
    }, {
      "left" : "private static final java.util.Deque<Integer> javaLinkedQueue = new java.util.LinkedList<Integer>();",
      "right" : "java.util.Deque<Integer> javaLinkedQueue = new java.util.LinkedList<Integer>();",
      "info" : "FieldDeclaration[38638-38738]:FieldDeclaration[21885-21964]"
    }, {
      "left" : "private static boolean testJavaLinkedQueue()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[38743-38957]:MethodDeclaration[22101-22352]"
    }, {
      "left" : "private static final java.util.TreeSet<Integer> javaRedBlackTreeInteger = new java.util.TreeSet<Integer>();",
      "right" : "java.util.TreeSet<Integer> javaRedBlackTreeInteger = new java.util.TreeSet<Integer>();",
      "info" : "FieldDeclaration[38963-39070]:FieldDeclaration[22441-22527]"
    }, {
      "left" : "private static boolean testJavaRedBlackIntegerTree()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[39075-39305]:MethodDeclaration[22664-22923]"
    }, {
      "left" : "private static final java.util.TreeSet<String> javaRedBlackTreeString = new java.util.TreeSet<String>();",
      "right" : "java.util.TreeSet<String> javaRedBlackTreeString = new java.util.TreeSet<String>();",
      "info" : "FieldDeclaration[39311-39415]:FieldDeclaration[23011-23094]"
    }, {
      "left" : "private static boolean testJavaRedBlackStringTree()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[39420-39646]:MethodDeclaration[23230-23487]"
    }, {
      "left" : "private static final java.util.Stack<Integer> javaStack = new java.util.Stack<Integer>();",
      "right" : "java.util.Stack<Integer> javaStack = new java.util.Stack<Integer>();",
      "info" : "FieldDeclaration[39652-39741]:FieldDeclaration[23562-23630]"
    }, {
      "left" : "private static boolean testJavaStack()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[39746-39947]:MethodDeclaration[23766-24011]"
    }, {
      "left" : "private static final java.util.Map<String,Integer> javaTreeMap = new java.util.TreeMap<String,Integer>();",
      "right" : "java.util.Map<String,Integer> javaTreeMap = new java.util.TreeMap<String,Integer>();",
      "info" : "FieldDeclaration[39953-40058]:FieldDeclaration[24088-24172]"
    }, {
      "left" : "private static boolean testJavaTreeMap()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[40063-40253]:MethodDeclaration[24301-24554]"
    }, {
      "left" : "private static final List.ArrayList<Integer> arrayList = new List.ArrayList<Integer>();",
      "right" : "List.ArrayList<Integer> arrayList = new List.ArrayList<Integer>();",
      "info" : "FieldDeclaration[40259-40346]:FieldDeclaration[24629-24695]"
    }, {
      "left" : "private static boolean testArrayList()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[40351-40614]:MethodDeclaration[24891-25138]"
    }, {
      "left" : "private static final List.LinkedList<Integer> linkedList = new List.LinkedList<Integer>();",
      "right" : "List.LinkedList<Integer> linkedList = new List.LinkedList<Integer>();",
      "info" : "FieldDeclaration[40620-40710]:FieldDeclaration[25214-25283]"
    }, {
      "left" : "private static final PatriciaTrie<String> patriciaTrie = new PatriciaTrie<String>();",
      "right" : "PatriciaTrie<String> patriciaTrie = new PatriciaTrie<String>();",
      "info" : "FieldDeclaration[40987-41071]:FieldDeclaration[25806-25869]"
    }, {
      "left" : "private static final Queue.ArrayQueue<Integer> arrayQueue = new Queue.ArrayQueue<Integer>();",
      "right" : "Queue.ArrayQueue<Integer> arrayQueue = new Queue.ArrayQueue<Integer>();",
      "info" : "FieldDeclaration[41361-41453]:FieldDeclaration[26392-26463]"
    }, {
      "left" : "private static boolean testArrayQueue()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[41458-41724]:MethodDeclaration[25481-25728]"
    }, {
      "left" : "private static final Queue.LinkedQueue<Integer> linkedQueue = new Queue.LinkedQueue<Integer>();",
      "right" : "Queue.LinkedQueue<Integer> linkedQueue = new Queue.LinkedQueue<Integer>();",
      "info" : "FieldDeclaration[41730-41825]:FieldDeclaration[26985-27059]"
    }, {
      "left" : "private static boolean testLinkedQueue()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[41830-42099]:MethodDeclaration[26661-26908]"
    }, {
      "left" : "private static final RadixTrie<String,Integer> radixTrie = new RadixTrie<String,Integer>();",
      "right" : "RadixTrie<String,Integer> radixTrie = new RadixTrie<String,Integer>();",
      "info" : "FieldDeclaration[42105-42196]:FieldDeclaration[27581-27651]"
    }, {
      "left" : "private static final BinarySearchTree<Integer> redBlackTree = new RedBlackTree<Integer>();",
      "right" : "BinarySearchTree<Integer> redBlackTree = new RedBlackTree<Integer>();",
      "info" : "FieldDeclaration[42447-42537]:FieldDeclaration[28163-28232]"
    }, {
      "left" : "private static boolean testRedBlackTree()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[42542-42817]:MethodDeclaration[27259-27506]"
    }, {
      "left" : "private static final NavigableSet<Integer> javaSkipList = new ConcurrentSkipListSet<Integer>();",
      "right" : "NavigableSet<Integer> javaSkipList = new ConcurrentSkipListSet<Integer>();",
      "info" : "FieldDeclaration[42823-42918]:FieldDeclaration[28762-28836]"
    }, {
      "left" : "private static boolean testJavaSkipList()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[42923-43183]:MethodDeclaration[27839-28085]"
    }, {
      "left" : "private static final SkipList<Integer> skipList = new SkipList<Integer>();",
      "right" : "SkipList<Integer> skipList = new SkipList<Integer>();",
      "info" : "FieldDeclaration[43189-43263]:FieldDeclaration[29347-29400]"
    }, {
      "left" : "private static boolean testSkipList()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[43268-43525]:MethodDeclaration[28435-28684]"
    }, {
      "left" : "private static final BinarySearchTree<Integer> splayTree = new SplayTree<Integer>();",
      "right" : "BinarySearchTree<Integer> splayTree = new SplayTree<Integer>();",
      "info" : "FieldDeclaration[43531-43615]:FieldDeclaration[29913-29976]"
    }, {
      "left" : "private static boolean testSplayTree()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[43620-43885]:MethodDeclaration[29026-29273]"
    }, {
      "left" : "private static final Stack.ArrayStack<Integer> arrayStack = new Stack.ArrayStack<Integer>();",
      "right" : "Stack.ArrayStack<Integer> arrayStack = new Stack.ArrayStack<Integer>();",
      "info" : "FieldDeclaration[43891-43983]:FieldDeclaration[30497-30568]"
    }, {
      "left" : "private static boolean testArrayStack()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[43988-44254]:MethodDeclaration[29591-29838]"
    }, {
      "left" : "private static final Stack.LinkedStack<Integer> linkedStack = new Stack.LinkedStack<Integer>();",
      "right" : "Stack.LinkedStack<Integer> linkedStack = new Stack.LinkedStack<Integer>();",
      "info" : "FieldDeclaration[44260-44355]:FieldDeclaration[31090-31164]"
    }, {
      "left" : "private static boolean testLinkedStack()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[44360-44629]:MethodDeclaration[30172-30421]"
    }, {
      "left" : "private static final BinarySearchTree<Integer> treap = new Treap<Integer>();",
      "right" : "BinarySearchTree<Integer> treap = new Treap<Integer>();",
      "info" : "FieldDeclaration[44635-44711]:FieldDeclaration[31682-31737]"
    }, {
      "left" : "private static boolean testTreap()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[44716-44972]:MethodDeclaration[30766-31013]"
    }, {
      "left" : "private static final TreeMap<String,Integer> treeMap = new TreeMap<String,Integer>();",
      "right" : "TreeMap<String,Integer> treeMap = new TreeMap<String,Integer>();",
      "info" : "FieldDeclaration[44978-45063]:FieldDeclaration[32250-32314]"
    }, {
      "left" : "private static final Trie<String> trie = new Trie<String>();",
      "right" : "Trie<String> trie = new Trie<String>();",
      "info" : "FieldDeclaration[45308-45368]:FieldDeclaration[32814-32853]"
    }, {
      "left" : "private static final TrieMap<String,Integer> trieMap = new TrieMap<String,Integer>();",
      "right" : "TrieMap<String,Integer> trieMap = new TrieMap<String,Integer>();",
      "info" : "FieldDeclaration[45627-45712]:FieldDeclaration[33359-33423]"
    }, {
      "left" : "private static boolean testTrieMap()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[45717-45951]:MethodDeclaration[26068-26316]"
    }, {
      "left" : "private static final ConcurrentSkipListMap<String,Integer> javaSkipListMap = new ConcurrentSkipListMap<String,Integer>();",
      "right" : "ConcurrentSkipListMap<String,Integer> javaSkipListMap = new ConcurrentSkipListMap<String,Integer>();",
      "info" : "FieldDeclaration[45957-46078]:FieldDeclaration[33934-34034]"
    }, {
      "left" : "private static boolean testJavaSkipListMap()",
      "right" : "public boolean run(Integer[] unsorted, Integer[] sorted, String input)",
      "info" : "MethodDeclaration[46083-46285]:MethodDeclaration[34167-34424]"
    }, {
      "left" : "private static final SkipListMap<String,Integer> skipListMap = new SkipListMap<String,Integer>();",
      "right" : "SkipListMap<String,Integer> skipListMap = new SkipListMap<String,Integer>();",
      "info" : "FieldDeclaration[46291-46388]:FieldDeclaration[34501-34577]"
    }, {
      "left" : "private static <T extends Comparable<T>> boolean testJavaCollection(Collection<T> collection, Class<T> type, String name)",
      "right" : "private static <T extends Comparable<T>> boolean testJavaCollection(Collection<T> collection, Class<T> type, String name, Integer[] _unsorted, Integer[] _sorted, String input)",
      "info" : "MethodDeclaration[46645-63158]:MethodDeclaration[35028-51399]"
    }, {
      "left" : "private static <K extends Comparable<K>,V> boolean testJavaMap(java.util.Map<K,V> map, Class<K> keyType, String name)",
      "right" : "private static <K extends Comparable<K>,V> boolean testJavaMap(java.util.Map<K,V> map, Class<K> keyType, Class<V> valueType, String name, Integer[] _unsorted, Integer[] _sorted, String input)",
      "info" : "MethodDeclaration[63164-80064]:MethodDeclaration[51405-67024]"
    }, {
      "left" : "private static final String getTestResults(int number, String[] names, long[][] results)",
      "right" : "private static final String getTestResults(int number, String[] names, long[][] results)",
      "info" : "MethodDeclaration[80070-84613]:MethodDeclaration[67030-71596]"
    }, {
      "left" : "private static final long getMemoryUse()",
      "right" : "private static final long getMemoryUse()",
      "info" : "MethodDeclaration[84619-84892]:MethodDeclaration[71602-71875]"
    }, {
      "left" : "private static final void putOutTheGarbage()",
      "right" : "private static final void putOutTheGarbage()",
      "info" : "MethodDeclaration[84898-85028]:MethodDeclaration[71881-72011]"
    }, {
      "left" : "private static final long fSLEEP_INTERVAL = 100;",
      "right" : "private static final long fSLEEP_INTERVAL = 100;",
      "info" : "FieldDeclaration[85034-85082]:FieldDeclaration[72017-72065]"
    }, {
      "left" : "private static final void collectGarbage()",
      "right" : "private static final void collectGarbage()",
      "info" : "MethodDeclaration[85088-85439]:MethodDeclaration[72071-72422]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1586-1592]:Modifier[1618-1624]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1593-1598]:TYPE_DECLARATION_KIND[1625-1630]"
    }, {
      "left" : "DataStructuresTiming",
      "right" : "DataStructuresTiming",
      "info" : "SimpleName[1599-1619]:SimpleName[1631-1651]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2147-2154]:Modifier[12830-12837]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2155-2161]:Modifier[12838-12844]"
    }, {
      "left" : "null",
      "right" : "null",
      "info" : "NullLiteral[2183-2187]:NullLiteral[11485-11489]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2193-2200]:Modifier[11704-11711]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2201-2207]:Modifier[11712-11718]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2245-2251]:Modifier[11429-11435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3088-3094]:Modifier[2983-2989]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3095-3101]:Modifier[2990-2996]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3102-3106]:PrimitiveType[2997-3001]"
    }, {
      "left" : "main",
      "right" : "main",
      "info" : "SimpleName[3107-3111]:SimpleName[3002-3006]"
    }, {
      "left" : "String[] args",
      "right" : "String[] args",
      "info" : "SingleVariableDeclaration[3112-3125]:SingleVariableDeclaration[3007-3020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3127-3517]:Block[3022-3372]"
    }, {
      "left" : "System.out.println(\"Starting tests.\");",
      "right" : "System.out.println(\"Starting tests.\");",
      "info" : "ExpressionStatement[3137-3175]:ExpressionStatement[3032-3070]"
    }, {
      "left" : "boolean passed = false;",
      "right" : "boolean passed = false;",
      "info" : "VariableDeclarationStatement[3184-3207]:VariableDeclarationStatement[3079-3102]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3216-3368]:TryStatement[3111-3223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3220-3264]:Block[3115-3159]"
    }, {
      "left" : "passed = runTests();",
      "right" : "passed = runTests();",
      "info" : "ExpressionStatement[3234-3254]:ExpressionStatement[3129-3149]"
    }, {
      "left" : "NullPointerException e",
      "right" : "NullPointerException e",
      "info" : "SingleVariableDeclaration[3272-3294]:SingleVariableDeclaration[3167-3189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3296-3368]:Block[3191-3223]"
    }, {
      "left" : "string",
      "right" : "bstCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[3329-3335]:METHOD_INVOCATION_ARGUMENTS[12156-12213]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[3329-3335]:SimpleName[12184-12188]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[3350-3358]:ThrowStatement[3205-3213]"
    }, {
      "left" : "if (passed)",
      "right" : "if (passed)",
      "info" : "IfStatement[3377-3511]:IfStatement[3232-3366]"
    }, {
      "left" : "System.out.println(\"Tests finished. All passed.\");",
      "right" : "System.out.println(\"Tests finished. All passed.\");",
      "info" : "ExpressionStatement[3389-3439]:ExpressionStatement[3244-3294]"
    }, {
      "left" : "System.err.println(\"Tests finished. Detected a failure.\");",
      "right" : "System.err.println(\"Tests finished. Detected a failure.\");",
      "info" : "ExpressionStatement[3453-3511]:ExpressionStatement[3308-3366]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3523-3530]:Modifier[3378-3385]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3531-3537]:Modifier[3386-3392]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3538-3542]:PrimitiveType[3393-3397]"
    }, {
      "left" : "generateTestData",
      "right" : "generateTestData",
      "info" : "SimpleName[3543-3559]:SimpleName[3398-3414]"
    }, {
      "left" : "int idx",
      "right" : "int idx",
      "info" : "SingleVariableDeclaration[3560-3567]:SingleVariableDeclaration[3415-3422]"
    }, {
      "left" : "int size",
      "right" : "int size",
      "info" : "SingleVariableDeclaration[3569-3577]:SingleVariableDeclaration[3424-3432]"
    }, {
      "left" : "Integer[][] unsorteds",
      "right" : "Integer[][] unsorteds",
      "info" : "SingleVariableDeclaration[3579-3600]:SingleVariableDeclaration[3434-3455]"
    }, {
      "left" : "Integer[][] sorteds",
      "right" : "Integer[][] sorteds",
      "info" : "SingleVariableDeclaration[3602-3621]:SingleVariableDeclaration[3457-3476]"
    }, {
      "left" : "String[] strings",
      "right" : "String[] strings",
      "info" : "SingleVariableDeclaration[3623-3639]:SingleVariableDeclaration[3478-3494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3641-4833]:Block[3496-4694]"
    }, {
      "left" : "System.out.println(\"Generating data.\");",
      "right" : "System.out.println(\"Generating data.\");",
      "info" : "ExpressionStatement[3651-3690]:ExpressionStatement[3506-3545]"
    }, {
      "left" : "StringBuilder builder = new StringBuilder();",
      "right" : "StringBuilder builder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[3699-3743]:VariableDeclarationStatement[3554-3598]"
    }, {
      "left" : "builder.append(\"Array=\");",
      "right" : "builder.append(\"Array=\");",
      "info" : "ExpressionStatement[3752-3777]:ExpressionStatement[3607-3632]"
    }, {
      "left" : "java.util.Set<Integer> set = new java.util.HashSet<Integer>();",
      "right" : "java.util.Set<Integer> set = new java.util.HashSet<Integer>();",
      "info" : "VariableDeclarationStatement[3786-3848]:VariableDeclarationStatement[3641-3703]"
    }, {
      "left" : "unsorteds[idx] = new Integer[size];",
      "right" : "unsorteds[idx] = new Integer[size];",
      "info" : "ExpressionStatement[3857-3892]:ExpressionStatement[3712-3747]"
    }, {
      "left" : "sorteds[idx] = new Integer[size];",
      "right" : "sorteds[idx] = new Integer[size];",
      "info" : "ExpressionStatement[3901-3934]:ExpressionStatement[3756-3789]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[3943-4501]:ForStatement[3798-4356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3974-4501]:Block[3829-4356]"
    }, {
      "left" : "Integer j = RANDOM.nextInt(RANDOM_SIZE);",
      "right" : "Integer j = RANDOM.nextInt(RANDOM_SIZE);",
      "info" : "VariableDeclarationStatement[3988-4028]:VariableDeclarationStatement[3843-3883]"
    }, {
      "left" : "boolean found = true;",
      "right" : "boolean found = true;",
      "info" : "VariableDeclarationStatement[4090-4111]:VariableDeclarationStatement[3945-3966]"
    }, {
      "left" : "while (found)",
      "right" : "while (found)",
      "info" : "WhileStatement[4124-4398]:WhileStatement[3979-4253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4138-4398]:Block[3993-4253]"
    }, {
      "left" : "if (set.contains(j))",
      "right" : "if (set.contains(j))",
      "info" : "IfStatement[4156-4384]:IfStatement[4011-4239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4177-4249]:Block[4032-4104]"
    }, {
      "left" : "j = RANDOM.nextInt(RANDOM_SIZE);",
      "right" : "j = RANDOM.nextInt(RANDOM_SIZE);",
      "info" : "ExpressionStatement[4199-4231]:ExpressionStatement[4054-4086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4255-4384]:Block[4110-4239]"
    }, {
      "left" : "unsorteds[idx][i] = j;",
      "right" : "unsorteds[idx][i] = j;",
      "info" : "ExpressionStatement[4277-4299]:ExpressionStatement[4132-4154]"
    }, {
      "left" : "set.add(j);",
      "right" : "set.add(j);",
      "info" : "ExpressionStatement[4320-4331]:ExpressionStatement[4175-4186]"
    }, {
      "left" : "found = false;",
      "right" : "found = false;",
      "info" : "ExpressionStatement[4352-4366]:ExpressionStatement[4207-4221]"
    }, {
      "left" : "unsorteds[idx][i] = j;",
      "right" : "unsorteds[idx][i] = j;",
      "info" : "ExpressionStatement[4411-4433]:ExpressionStatement[4266-4288]"
    }, {
      "left" : "if (i!=size-1)",
      "right" : "if (i!=size-1)",
      "info" : "IfStatement[4446-4491]:IfStatement[4301-4346]"
    }, {
      "left" : "builder.append(j).append(',');",
      "right" : "builder.append(j).append(',');",
      "info" : "ExpressionStatement[4461-4491]:ExpressionStatement[4316-4346]"
    }, {
      "left" : "set.clear();",
      "right" : "set.clear();",
      "info" : "ExpressionStatement[4510-4522]:ExpressionStatement[4365-4377]"
    }, {
      "left" : "set = null;",
      "right" : "set = null;",
      "info" : "ExpressionStatement[4531-4542]:ExpressionStatement[4386-4397]"
    }, {
      "left" : "builder.append('\\n');",
      "right" : "builder.append('\\n');",
      "info" : "ExpressionStatement[4551-4572]:ExpressionStatement[4406-4427]"
    }, {
      "left" : "strings[idx] = builder.toString();",
      "right" : "strings[idx] = builder.toString();",
      "info" : "ExpressionStatement[4581-4615]:ExpressionStatement[4436-4470]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[4624-4666]:IfStatement[4479-4527]"
    }, {
      "left" : "System.out.println(string);",
      "right" : "System.out.println(strings[idx]);",
      "info" : "ExpressionStatement[4639-4666]:ExpressionStatement[4494-4527]"
    }, {
      "left" : "string",
      "right" : "bstCollection",
      "info" : "SimpleName[4658-4664]:SimpleName[12156-12169]"
    }, {
      "left" : "string",
      "right" : "bstCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[4658-4664]:METHOD_INVOCATION_ARGUMENTS[12156-12213]"
    }, {
      "left" : "sorteds[idx] = Arrays.copyOf(unsorteds[idx], unsorteds[idx].length);",
      "right" : "sorteds[idx] = Arrays.copyOf(unsorteds[idx], unsorteds[idx].length);",
      "info" : "ExpressionStatement[4676-4744]:ExpressionStatement[4537-4605]"
    }, {
      "left" : "Arrays.sort(sorteds[idx]);",
      "right" : "Arrays.sort(sorteds[idx]);",
      "info" : "ExpressionStatement[4753-4779]:ExpressionStatement[4614-4640]"
    }, {
      "left" : "System.out.println(\"Generated data.\");",
      "right" : "System.out.println(\"Generated data.\");",
      "info" : "ExpressionStatement[4789-4827]:ExpressionStatement[4650-4688]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4839-4846]:Modifier[4700-4707]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4847-4853]:Modifier[4708-4714]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4854-4861]:PrimitiveType[4715-4722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4873-32261]:Block[4734-10168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4873-32261]:Block[10304-11212]"
    }, {
      "left" : "testIndex = 0;",
      "right" : "testIndex = 0;",
      "info" : "ExpressionStatement[4883-4897]:ExpressionStatement[4744-4758]"
    }, {
      "left" : "int tests = NUMBER_OF_TESTS+1;",
      "right" : "int tests = NUMBER_OF_TESTS+1;",
      "info" : "VariableDeclarationStatement[4999-5029]:VariableDeclarationStatement[4828-4858]"
    }, {
      "left" : "Integer[][] unsorteds = new Integer[tests][];",
      "right" : "Integer[][] unsorteds = new Integer[tests][];",
      "info" : "VariableDeclarationStatement[5038-5083]:VariableDeclarationStatement[4867-4912]"
    }, {
      "left" : "Integer[][] sorteds = new Integer[tests][];",
      "right" : "Integer[][] sorteds = new Integer[tests][];",
      "info" : "VariableDeclarationStatement[5092-5135]:VariableDeclarationStatement[4921-4964]"
    }, {
      "left" : "String[] strings = new String[tests];",
      "right" : "String[] strings = new String[tests];",
      "info" : "VariableDeclarationStatement[5144-5181]:VariableDeclarationStatement[4973-5010]"
    }, {
      "left" : "for (int i=0; i<tests; i++)\n            generateTestData(i, ARRAY_SIZE, unsorteds, sorteds, strings);",
      "right" : "for (int i=0; i<tests; i++)\n            generateTestData(i, ARRAY_SIZE, unsorteds, sorteds, strings);",
      "info" : "ForStatement[5190-5291]:ForStatement[5019-5120]"
    }, {
      "left" : "generateTestData(i, ARRAY_SIZE, unsorteds, sorteds, strings);",
      "right" : "generateTestData(i, ARRAY_SIZE, unsorteds, sorteds, strings);",
      "info" : "ExpressionStatement[5230-5291]:ExpressionStatement[5059-5120]"
    }, {
      "left" : "firstTimeThru = true;",
      "right" : "firstTimeThru = true;",
      "info" : "ExpressionStatement[5319-5340]:ExpressionStatement[10347-10368]"
    }, {
      "left" : "for (int i=0; i<tests; i++)",
      "right" : "for (int i=0; i<tests; i++)",
      "info" : "ForStatement[5349-5901]:ForStatement[10377-11034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5377-5901]:Block[10405-11034]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5391-5856]:TryStatement[10419-10989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5395-5740]:Block[10423-10860]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[5413-5437]:ExpressionStatement[12100-12119]"
    }, {
      "left" : "unsorteds[i]",
      "right" : "unsorteds[i]",
      "info" : "ArrayAccess[5424-5436]:ArrayAccess[10462-10474]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[5454-5474]:ExpressionStatement[12653-12672]"
    }, {
      "left" : "sorteds[i]",
      "right" : "sorteds[i]",
      "info" : "ArrayAccess[5463-5473]:ArrayAccess[10511-10521]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[5491-5511]:ExpressionStatement[13218-13237]"
    }, {
      "left" : "strings[i]",
      "right" : "strings[i]",
      "info" : "ArrayAccess[5500-5510]:ArrayAccess[10555-10565]"
    }, {
      "left" : "passed = testJavaRedBlackIntegerTree();",
      "right" : "passed = testable.run(unsorted, sorted, string);",
      "info" : "ExpressionStatement[5528-5567]:ExpressionStatement[10583-10631]"
    }, {
      "left" : "testJavaRedBlackIntegerTree",
      "right" : "run",
      "info" : "SimpleName[5537-5564]:SimpleName[10601-10604]"
    }, {
      "left" : "if (!passed)",
      "right" : "if (!passed)",
      "info" : "IfStatement[5584-5726]:IfStatement[10648-10846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5597-5726]:Block[10661-10846]"
    }, {
      "left" : "System.err",
      "right" : "System.err",
      "info" : "METHOD_INVOCATION_RECEIVER[5619-5629]:METHOD_INVOCATION_RECEIVER[10683-10693]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5695-5708]:ReturnStatement[10815-10828]"
    }, {
      "left" : "NullPointerException e",
      "right" : "NullPointerException e",
      "info" : "SingleVariableDeclaration[5748-5770]:SingleVariableDeclaration[10868-10890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5772-5856]:Block[10892-10989]"
    }, {
      "left" : "System.err.println(string);",
      "right" : "System.err.println(testable.getInput());",
      "info" : "ExpressionStatement[5790-5817]:ExpressionStatement[10910-10950]"
    }, {
      "left" : "string",
      "right" : "bstCollection",
      "info" : "SimpleName[5809-5815]:SimpleName[12709-12722]"
    }, {
      "left" : "string",
      "right" : "bstCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[5809-5815]:METHOD_INVOCATION_ARGUMENTS[12709-12766]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[5834-5842]:ThrowStatement[10967-10975]"
    }, {
      "left" : "firstTimeThru = false;",
      "right" : "firstTimeThru = false;",
      "info" : "ExpressionStatement[5869-5891]:ExpressionStatement[11002-11024]"
    }, {
      "left" : "if (debugTime && debugMemory)",
      "right" : "if (debugTime && debugMemory)",
      "info" : "IfStatement[5910-6028]:IfStatement[11043-11161]"
    }, {
      "left" : "System.out.println(getTestResults(NUMBER_OF_TESTS, testNames, testResults));",
      "right" : "System.out.println(getTestResults(NUMBER_OF_TESTS, testNames, testResults));",
      "info" : "ExpressionStatement[5952-6028]:ExpressionStatement[11085-11161]"
    }, {
      "left" : "testIndex++;",
      "right" : "testIndex++;",
      "info" : "ExpressionStatement[6040-6052]:ExpressionStatement[11173-11185]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[6062-6081]:ExpressionStatement[5531-5550]"
    }, {
      "left" : "int i=0",
      "right" : "int i=0",
      "info" : "VariableDeclarationExpression[6126-6133]:VariableDeclarationExpression[35908-35915]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[6144-6147]:PostfixExpression[35934-35937]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[6185-6209]:ExpressionStatement[13855-13874]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[6226-6246]:ExpressionStatement[14489-14508]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[6263-6283]:ExpressionStatement[15127-15146]"
    }, {
      "left" : "System.err",
      "right" : "System.err",
      "info" : "METHOD_INVOCATION_RECEIVER[6380-6390]:METHOD_INVOCATION_RECEIVER[10744-10754]"
    }, {
      "left" : "string",
      "right" : "bstCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[6560-6566]:METHOD_INVOCATION_ARGUMENTS[12709-12766]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[6560-6566]:SimpleName[12737-12741]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[6813-6832]:ExpressionStatement[5773-5792]"
    }, {
      "left" : "int i=0",
      "right" : "int i=0",
      "info" : "VariableDeclarationExpression[6877-6884]:VariableDeclarationExpression[35802-35809]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[6895-6898]:PostfixExpression[35830-35833]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[6936-6960]:ExpressionStatement[15761-15780]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[6977-6997]:ExpressionStatement[16384-16403]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[7014-7034]:ExpressionStatement[17006-17025]"
    }, {
      "left" : "string",
      "right" : "bstCollection",
      "info" : "SimpleName[7300-7306]:SimpleName[13274-13287]"
    }, {
      "left" : "string",
      "right" : "bstCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[7300-7306]:METHOD_INVOCATION_ARGUMENTS[13274-13331]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[7553-7572]:ExpressionStatement[6145-6164]"
    }, {
      "left" : "int i=0",
      "right" : "int i=0",
      "info" : "VariableDeclarationExpression[7617-7624]:VariableDeclarationExpression[52649-52656]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[7635-7638]:PostfixExpression[52676-52679]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[7676-7700]:ExpressionStatement[17586-17605]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[7717-7737]:ExpressionStatement[18135-18154]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[7754-7774]:ExpressionStatement[19074-19093]"
    }, {
      "left" : "string",
      "right" : "bstCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[8044-8050]:METHOD_INVOCATION_ARGUMENTS[13274-13331]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[8044-8050]:SimpleName[13302-13306]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[8297-8316]:ExpressionStatement[6389-6408]"
    }, {
      "left" : "int i=0",
      "right" : "int i=0",
      "info" : "VariableDeclarationExpression[8361-8368]:VariableDeclarationExpression[52536-52543]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[8379-8382]:PostfixExpression[52565-52568]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[8420-8444]:ExpressionStatement[20012-20031]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[8461-8481]:ExpressionStatement[20553-20572]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[8498-8518]:ExpressionStatement[21095-21114]"
    }, {
      "left" : "string",
      "right" : "aCollectionMin",
      "info" : "SimpleName[8780-8786]:SimpleName[13911-13925]"
    }, {
      "left" : "string",
      "right" : "aCollectionMin,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[8780-8786]:METHOD_INVOCATION_ARGUMENTS[13911-13969]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[9033-9052]:ExpressionStatement[6797-6816]"
    }, {
      "left" : "int i=0",
      "right" : "int i=0",
      "info" : "VariableDeclarationExpression[9097-9104]:VariableDeclarationExpression[52431-52438]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[9115-9118]:PostfixExpression[52458-52461]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[9156-9180]:ExpressionStatement[21639-21658]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[9197-9217]:ExpressionStatement[22186-22205]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[9234-9254]:ExpressionStatement[22749-22768]"
    }, {
      "left" : "string",
      "right" : "aCollectionMin,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[9515-9521]:METHOD_INVOCATION_ARGUMENTS[13911-13969]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[9515-9521]:SimpleName[13940-13944]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[9768-9787]:ExpressionStatement[7048-7067]"
    }, {
      "left" : "int i=0",
      "right" : "int i=0",
      "info" : "VariableDeclarationExpression[9832-9839]:VariableDeclarationExpression[52320-52327]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[9850-9853]:PostfixExpression[52349-52352]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[9891-9915]:ExpressionStatement[23315-23334]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[9932-9952]:ExpressionStatement[23851-23870]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[9969-9989]:ExpressionStatement[24976-24995]"
    }, {
      "left" : "string",
      "right" : "tCollectionMin",
      "info" : "SimpleName[10246-10252]:SimpleName[14545-14559]"
    }, {
      "left" : "string",
      "right" : "tCollectionMin,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[10246-10252]:METHOD_INVOCATION_ARGUMENTS[14545-14603]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[10499-10518]:ExpressionStatement[7424-7443]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[10622-10646]:ExpressionStatement[24386-24405]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[10663-10683]:ExpressionStatement[25566-25585]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[10700-10720]:ExpressionStatement[26153-26172]"
    }, {
      "left" : "string",
      "right" : "tCollectionMin,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[11016-11022]:METHOD_INVOCATION_ARGUMENTS[14545-14603]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[11016-11022]:SimpleName[14574-14578]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[11269-11288]:ExpressionStatement[7692-7711]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[11392-11416]:ExpressionStatement[26746-26765]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[11433-11453]:ExpressionStatement[27344-27363]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[11470-11490]:ExpressionStatement[27924-27943]"
    }, {
      "left" : "string",
      "right" : "aCollectionMax",
      "info" : "SimpleName[11749-11755]:SimpleName[15183-15197]"
    }, {
      "left" : "string",
      "right" : "aCollectionMax,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[11749-11755]:METHOD_INVOCATION_ARGUMENTS[15183-15241]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[12002-12021]:ExpressionStatement[8091-8110]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[12125-12149]:ExpressionStatement[28520-28539]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[12166-12186]:ExpressionStatement[29111-29130]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[12203-12223]:ExpressionStatement[29676-29695]"
    }, {
      "left" : "string",
      "right" : "aCollectionMax,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[12499-12505]:METHOD_INVOCATION_ARGUMENTS[15183-15241]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[12499-12505]:SimpleName[15212-15216]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[12752-12771]:ExpressionStatement[8344-8363]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[12892-12916]:ExpressionStatement[30257-30276]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[12933-12953]:ExpressionStatement[30851-30870]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[12970-12990]:ExpressionStatement[31449-31468]"
    }, {
      "left" : "string",
      "right" : "tCollectionMax",
      "info" : "SimpleName[13269-13275]:SimpleName[15817-15831]"
    }, {
      "left" : "string",
      "right" : "tCollectionMax,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[13269-13275]:METHOD_INVOCATION_ARGUMENTS[15817-15875]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[13522-13541]:ExpressionStatement[8735-8754]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[13645-13669]:ExpressionStatement[32011-32030]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[13686-13706]:ExpressionStatement[32583-32602]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[13723-13743]:ExpressionStatement[33122-33141]"
    }, {
      "left" : "string",
      "right" : "tCollectionMax,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[14011-14017]:METHOD_INVOCATION_ARGUMENTS[15817-15875]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[14011-14017]:SimpleName[15846-15850]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[14264-14283]:ExpressionStatement[9002-9021]"
    }, {
      "left" : "unsorted = unsorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[14405-14429]:ExpressionStatement[33692-33711]"
    }, {
      "left" : "sorted = sorteds[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[14446-14466]:ExpressionStatement[34854-34873]"
    }, {
      "left" : "string = strings[i];",
      "right" : "this.input = input;",
      "info" : "ExpressionStatement[14483-14503]:ExpressionStatement[34252-34271]"
    }, {
      "left" : "string",
      "right" : "jMap,Integer.class,String.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[14778-14784]:METHOD_INVOCATION_ARGUMENTS[16433-16494]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[14778-14784]:SimpleName[16465-16469]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[15031-15050]:ExpressionStatement[9384-9403]"
    }, {
      "left" : "string",
      "right" : "jMap,Integer.class,String.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[15518-15524]:METHOD_INVOCATION_ARGUMENTS[17055-17116]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[15518-15524]:SimpleName[17087-17091]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[15771-15790]:ExpressionStatement[9626-9645]"
    }, {
      "left" : "string",
      "right" : "jMap,Integer.class,String.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[16267-16273]:METHOD_INVOCATION_ARGUMENTS[17635-17696]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[16267-16273]:SimpleName[17667-17671]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[16520-16539]:ExpressionStatement[10003-10022]"
    }, {
      "left" : "string",
      "right" : "javaHashMap,Integer.class,String.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[17007-17013]:METHOD_INVOCATION_ARGUMENTS[18184-18252]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[17007-17013]:SimpleName[18223-18227]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[17260-17279]:ExpressionStatement[10121-10140]"
    }, {
      "left" : "string",
      "right" : "javaMinArrayHeap,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[17772-17778]:METHOD_INVOCATION_ARGUMENTS[19130-19190]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[17772-17778]:SimpleName[19161-19165]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[18025-18044]:ExpressionStatement[9878-9897]"
    }, {
      "left" : "string",
      "right" : "javaMaxArrayHeap,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[18510-18516]:METHOD_INVOCATION_ARGUMENTS[20068-20128]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[18510-18516]:SimpleName[20099-20103]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[18763-18782]:ExpressionStatement[9749-9768]"
    }, {
      "left" : "string",
      "right" : "javaArrayList,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[19258-19264]:METHOD_INVOCATION_ARGUMENTS[20609-20666]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[19258-19264]:SimpleName[20637-20641]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[19511-19530]:ExpressionStatement[9505-9524]"
    }, {
      "left" : "string",
      "right" : "javaLinkedList,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[19997-20003]:METHOD_INVOCATION_ARGUMENTS[21151-21209]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[19997-20003]:SimpleName[21180-21184]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[20250-20269]:ExpressionStatement[9259-9278]"
    }, {
      "left" : "string",
      "right" : "javaArrayQueue,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[20765-20771]:METHOD_INVOCATION_ARGUMENTS[21695-21753]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[20765-20771]:SimpleName[21724-21728]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[21018-21037]:ExpressionStatement[9130-9149]"
    }, {
      "left" : "string",
      "right" : "aCollection",
      "info" : "SimpleName[21505-21511]:SimpleName[25032-25043]"
    }, {
      "left" : "string",
      "right" : "aCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[21505-21511]:METHOD_INVOCATION_ARGUMENTS[25032-25087]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[21758-21777]:ExpressionStatement[8860-8879]"
    }, {
      "left" : "string",
      "right" : "aCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[22255-22261]:METHOD_INVOCATION_ARGUMENTS[25032-25087]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[22255-22261]:SimpleName[25058-25062]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[22508-22527]:ExpressionStatement[8611-8630]"
    }, {
      "left" : "string",
      "right" : "lCollection",
      "info" : "SimpleName[22996-23002]:SimpleName[25622-25633]"
    }, {
      "left" : "string",
      "right" : "lCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[22996-23002]:METHOD_INVOCATION_ARGUMENTS[25622-25677]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[23249-23268]:ExpressionStatement[8469-8488]"
    }, {
      "left" : "string",
      "right" : "lCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[23759-23765]:METHOD_INVOCATION_ARGUMENTS[25622-25677]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[23759-23765]:SimpleName[25648-25652]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[24012-24031]:ExpressionStatement[8215-8234]"
    }, {
      "left" : "string",
      "right" : "javaLinkedQueue,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[24499-24505]:METHOD_INVOCATION_ARGUMENTS[22242-22301]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[24499-24505]:SimpleName[22272-22276]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[24752-24771]:ExpressionStatement[7944-7963]"
    }, {
      "left" : "string",
      "right" : "bstCollection",
      "info" : "SimpleName[25240-25246]:SimpleName[26209-26222]"
    }, {
      "left" : "string",
      "right" : "bstCollection,String.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[25240-25246]:METHOD_INVOCATION_ARGUMENTS[26209-26265]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[25493-25512]:ExpressionStatement[7820-7839]"
    }, {
      "left" : "string",
      "right" : "bstCollection,String.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[26006-26012]:METHOD_INVOCATION_ARGUMENTS[26209-26265]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[26006-26012]:SimpleName[26236-26240]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[26259-26278]:ExpressionStatement[7569-7588]"
    }, {
      "left" : "string",
      "right" : "javaRedBlackTreeInteger,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[26746-26752]:METHOD_INVOCATION_ARGUMENTS[22805-22872]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[26746-26752]:SimpleName[22843-22847]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[26999-27018]:ExpressionStatement[7299-7318]"
    }, {
      "left" : "string",
      "right" : "aCollection",
      "info" : "SimpleName[27495-27501]:SimpleName[26802-26813]"
    }, {
      "left" : "string",
      "right" : "aCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[27495-27501]:METHOD_INVOCATION_ARGUMENTS[26802-26857]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[27748-27767]:ExpressionStatement[7173-7192]"
    }, {
      "left" : "string",
      "right" : "aCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[28235-28241]:METHOD_INVOCATION_ARGUMENTS[26802-26857]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[28235-28241]:SimpleName[26828-26832]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[28488-28507]:ExpressionStatement[6923-6942]"
    }, {
      "left" : "string",
      "right" : "lCollection",
      "info" : "SimpleName[28975-28981]:SimpleName[27400-27411]"
    }, {
      "left" : "string",
      "right" : "lCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[28975-28981]:METHOD_INVOCATION_ARGUMENTS[27400-27455]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[29228-29247]:ExpressionStatement[6654-6673]"
    }, {
      "left" : "string",
      "right" : "lCollection,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[29719-29725]:METHOD_INVOCATION_ARGUMENTS[27400-27455]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[29719-29725]:SimpleName[27426-27430]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[29972-29991]:ExpressionStatement[6532-6551]"
    }, {
      "left" : "string",
      "right" : "javaRedBlackTreeString,String.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[30479-30485]:METHOD_INVOCATION_ARGUMENTS[23371-23436]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[30479-30485]:SimpleName[23407-23411]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[30732-30751]:ExpressionStatement[6263-6282]"
    }, {
      "left" : "string",
      "right" : "jMap,String.class,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[31228-31234]:METHOD_INVOCATION_ARGUMENTS[27973-28034]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[31228-31234]:SimpleName[28005-28009]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[31481-31500]:ExpressionStatement[6009-6028]"
    }, {
      "left" : "string",
      "right" : "javaStack,Integer.class,name, unsorted, sorted, input",
      "info" : "METHOD_INVOCATION_ARGUMENTS[31961-31967]:METHOD_INVOCATION_ARGUMENTS[23907-23960]"
    }, {
      "left" : "string",
      "right" : "name",
      "info" : "SimpleName[31961-31967]:SimpleName[23931-23935]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[32214-32233]:ExpressionStatement[5892-5911]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32243-32255]:ReturnStatement[10150-10162]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32267-32274]:Modifier[11218-11225]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32275-32281]:Modifier[11226-11232]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32282-32286]:PrimitiveType[11233-11237]"
    }, {
      "left" : "handleError",
      "right" : "handleError",
      "info" : "SimpleName[32287-32298]:SimpleName[11238-11249]"
    }, {
      "left" : "Object obj",
      "right" : "Object obj",
      "info" : "SingleVariableDeclaration[32299-32309]:SingleVariableDeclaration[11264-11274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32311-32452]:Block[11276-11416]"
    }, {
      "left" : "System.err.println(string);",
      "right" : "System.err.println(input);",
      "info" : "ExpressionStatement[32321-32348]:ExpressionStatement[11286-11312]"
    }, {
      "left" : "string",
      "right" : "input",
      "info" : "SimpleName[32340-32346]:SimpleName[11305-11310]"
    }, {
      "left" : "string",
      "right" : "ARRAY_SIZE",
      "info" : "SimpleName[32340-32346]:SimpleName[67376-67386]"
    }, {
      "left" : "System.err.println(obj.toString());",
      "right" : "System.err.println(obj.toString());",
      "info" : "ExpressionStatement[32357-32392]:ExpressionStatement[11321-11356]"
    }, {
      "left" : "throw new RuntimeException(\"Error in test.\");",
      "right" : "throw new RuntimeException(\"Error in test.\");",
      "info" : "ThrowStatement[32401-32446]:ThrowStatement[11365-11410]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32458-32465]:Modifier[12277-12284]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32466-32472]:Modifier[12285-12291]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[32543-32550]:Modifier[12015-12021]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32558-32565]:PrimitiveType[12022-12029]"
    }, {
      "left" : "testAVLTree",
      "right" : "run",
      "info" : "SimpleName[32566-32577]:SimpleName[12030-12033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32580-32808]:Block[12086-12264]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32590-32596]:SimpleType[11832-11838]"
    }, {
      "left" : "\"AVL Tree <Integer>\"",
      "right" : "\"AVL Tree <Integer>\"",
      "info" : "StringLiteral[32607-32627]:StringLiteral[11846-11866]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[32637-32656]:ParameterizedType[11876-11895]"
    }, {
      "left" : "bstCollection = avlTree.toCollection()",
      "right" : "bstCollection = avlTree.toCollection()",
      "info" : "VariableDeclarationFragment[32657-32695]:VariableDeclarationFragment[11896-11934]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,avlName))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[32706-32781]:IfStatement[12132-12229]"
    }, {
      "left" : "bstCollection",
      "right" : "unsorted",
      "info" : "SimpleName[32730-32743]:SimpleName[12190-12198]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[32744-32757]:TypeLiteral[12170-12183]"
    }, {
      "left" : "avlName",
      "right" : "sorted",
      "info" : "SimpleName[32758-32765]:SimpleName[12200-12206]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32768-32781]:ReturnStatement[5262-5275]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[32790-32802]:ReturnStatement[11194-11206]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32814-32821]:Modifier[13395-13402]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32822-32828]:Modifier[13403-13409]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[32885-32892]:Modifier[12568-12574]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32900-32907]:PrimitiveType[12575-12582]"
    }, {
      "left" : "testBTree",
      "right" : "run",
      "info" : "SimpleName[32908-32917]:SimpleName[12583-12586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32920-33148]:Block[12639-12817]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32930-32936]:SimpleType[12389-12395]"
    }, {
      "left" : "\"B-Tree <Integer>\"",
      "right" : "\"B-Tree <Integer>\"",
      "info" : "StringLiteral[32949-32967]:StringLiteral[12403-12421]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[32977-32996]:ParameterizedType[12431-12450]"
    }, {
      "left" : "bstCollection = bTree.toCollection()",
      "right" : "bstCollection = bTree.toCollection()",
      "info" : "VariableDeclarationFragment[32997-33033]:VariableDeclarationFragment[12451-12487]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,bTreeName))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[33044-33121]:IfStatement[12685-12782]"
    }, {
      "left" : "bstCollection",
      "right" : "unsorted",
      "info" : "SimpleName[33068-33081]:SimpleName[12743-12751]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[33082-33095]:TypeLiteral[12723-12736]"
    }, {
      "left" : "bTreeName",
      "right" : "sorted",
      "info" : "SimpleName[33096-33105]:SimpleName[12753-12759]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33108-33121]:ReturnStatement[5388-5401]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33130-33142]:ReturnStatement[12242-12254]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33154-33161]:Modifier[14667-14674]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33162-33168]:Modifier[14675-14681]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[33244-33251]:Modifier[13133-13139]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33259-33266]:PrimitiveType[13140-13147]"
    }, {
      "left" : "testBST",
      "right" : "run",
      "info" : "SimpleName[33267-33274]:SimpleName[13148-13151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33277-33490]:Block[13204-13382]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33287-33293]:SimpleType[12959-12965]"
    }, {
      "left" : "\"BST <Integer>\"",
      "right" : "\"BST <Integer>\"",
      "info" : "StringLiteral[33301-33316]:StringLiteral[12973-12988]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[33326-33345]:ParameterizedType[12998-13017]"
    }, {
      "left" : "bstCollection = bst.toCollection()",
      "right" : "bstCollection = bst.toCollection()",
      "info" : "VariableDeclarationFragment[33346-33380]:VariableDeclarationFragment[13018-13052]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[33391-33463]:IfStatement[13250-13347]"
    }, {
      "left" : "bstCollection",
      "right" : "unsorted",
      "info" : "SimpleName[33415-33428]:SimpleName[13308-13316]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[33429-33442]:TypeLiteral[13288-13301]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[33443-33447]:SimpleName[13318-13324]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33450-33463]:ReturnStatement[5509-5522]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33472-33484]:ReturnStatement[12795-12807]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33496-33503]:Modifier[15939-15946]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33504-33510]:Modifier[15947-15953]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33630-33637]:Modifier[16558-16565]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33638-33644]:Modifier[16566-16572]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[33762-33769]:Modifier[13770-13776]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33777-33784]:PrimitiveType[13777-13784]"
    }, {
      "left" : "testMinHeap",
      "right" : "run",
      "info" : "SimpleName[33785-33796]:SimpleName[13785-13788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33799-34252]:Block[13841-14020]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33809-33815]:SimpleType[13577-13583]"
    }, {
      "left" : "\"Min-Heap <Integer> [array]\"",
      "right" : "\"Min-Heap <Integer> [array]\"",
      "info" : "StringLiteral[33827-33855]:StringLiteral[13591-13619]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[33865-33884]:ParameterizedType[13629-13648]"
    }, {
      "left" : "aHeapMin.toCollection()",
      "right" : "aHeapMin.toCollection()",
      "info" : "MethodInvocation[33902-33925]:MethodInvocation[13666-13689]"
    }, {
      "left" : "if (!testJavaCollection(aCollectionMin,Integer.class,aNameMin))",
      "right" : "if (!testJavaCollection(tCollectionMin,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[33935-34012]:IfStatement[14521-14619]"
    }, {
      "left" : "aCollectionMin",
      "right" : "unsorted",
      "info" : "SimpleName[33959-33973]:SimpleName[14580-14588]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[33974-33987]:TypeLiteral[14560-14573]"
    }, {
      "left" : "aNameMin",
      "right" : "sorted",
      "info" : "SimpleName[33988-33996]:SimpleName[14590-14596]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33999-34012]:ReturnStatement[5751-5764]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[34022-34028]:SimpleType[14212-14218]"
    }, {
      "left" : "\"Min-Heap <Integer> [tree]\"",
      "right" : "\"Min-Heap <Integer> [tree]\"",
      "info" : "StringLiteral[34040-34067]:StringLiteral[14226-14253]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[34077-34096]:ParameterizedType[14263-14282]"
    }, {
      "left" : "tHeapMin.toCollection()",
      "right" : "tHeapMin.toCollection()",
      "info" : "MethodInvocation[34114-34137]:MethodInvocation[14300-14323]"
    }, {
      "left" : "if (!testJavaCollection(tCollectionMin,Integer.class,tNameMin))",
      "right" : "if (!testJavaCollection(aCollectionMin,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[34147-34224]:IfStatement[13887-13985]"
    }, {
      "left" : "tCollectionMin",
      "right" : "unsorted",
      "info" : "SimpleName[34171-34185]:SimpleName[13946-13954]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[34186-34199]:TypeLiteral[13926-13939]"
    }, {
      "left" : "tNameMin",
      "right" : "sorted",
      "info" : "SimpleName[34200-34208]:SimpleName[13956-13962]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34211-34224]:ReturnStatement[5632-5645]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34234-34246]:ReturnStatement[13360-13372]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34258-34265]:Modifier[17760-17767]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34266-34272]:Modifier[17768-17774]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34392-34399]:Modifier[18316-18323]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34400-34406]:Modifier[18324-18330]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[34539-34546]:PrimitiveType[10195-10202]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[34571-34577]:SimpleType[14849-14855]"
    }, {
      "left" : "\"Max-Heap <Integer> [array]\"",
      "right" : "\"Max-Heap <Integer> [array]\"",
      "info" : "StringLiteral[34589-34617]:StringLiteral[14863-14891]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[34627-34646]:ParameterizedType[14901-14920]"
    }, {
      "left" : "aHeapMax.toCollection()",
      "right" : "aHeapMax.toCollection()",
      "info" : "MethodInvocation[34664-34687]:MethodInvocation[14938-14961]"
    }, {
      "left" : "if (!testJavaCollection(aCollectionMax,Integer.class,aNameMax))",
      "right" : "if (!testJavaCollection(tCollectionMax,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[34697-34774]:IfStatement[15793-15891]"
    }, {
      "left" : "aCollectionMax",
      "right" : "unsorted",
      "info" : "SimpleName[34721-34735]:SimpleName[15852-15860]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[34736-34749]:TypeLiteral[15832-15845]"
    }, {
      "left" : "aNameMax",
      "right" : "sorted",
      "info" : "SimpleName[34750-34758]:SimpleName[15862-15868]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34761-34774]:ReturnStatement[5987-6000]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[34784-34790]:SimpleType[15484-15490]"
    }, {
      "left" : "\"Max-Heap <Integer> [tree]\"",
      "right" : "\"Max-Heap <Integer> [tree]\"",
      "info" : "StringLiteral[34802-34829]:StringLiteral[15498-15525]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[34839-34858]:ParameterizedType[15535-15554]"
    }, {
      "left" : "tHeapMax.toCollection()",
      "right" : "tHeapMax.toCollection()",
      "info" : "MethodInvocation[34876-34899]:MethodInvocation[15572-15595]"
    }, {
      "left" : "if (!testJavaCollection(tCollectionMax,Integer.class,lNameMax))",
      "right" : "if (!testJavaCollection(aCollectionMax,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[34909-34986]:IfStatement[15159-15257]"
    }, {
      "left" : "tCollectionMax",
      "right" : "unsorted",
      "info" : "SimpleName[34933-34947]:SimpleName[15218-15226]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[34948-34961]:TypeLiteral[15198-15211]"
    }, {
      "left" : "lNameMax",
      "right" : "sorted",
      "info" : "SimpleName[34962-34970]:SimpleName[15228-15234]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34973-34986]:ReturnStatement[5870-5883]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34996-35008]:ReturnStatement[13998-14010]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35020-35027]:Modifier[20192-20199]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35028-35034]:Modifier[20200-20206]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35145-35152]:Modifier[20730-20737]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35153-35159]:Modifier[20738-20744]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35286-35293]:PrimitiveType[14411-14418]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[35318-35324]:SimpleType[16114-16120]"
    }, {
      "left" : "\"Probing HashMap <Integer>\"",
      "right" : "\"Probing HashMap <Integer>\"",
      "info" : "StringLiteral[35332-35359]:StringLiteral[16128-16155]"
    }, {
      "left" : "java.util.Map<Integer,String>",
      "right" : "java.util.Map<Integer,String>",
      "info" : "ParameterizedType[35369-35398]:ParameterizedType[16165-16194]"
    }, {
      "left" : "jMap = pHashMap.toMap()",
      "right" : "jMap = pHashMap.toMap()",
      "info" : "VariableDeclarationFragment[35399-35422]:VariableDeclarationFragment[16195-16218]"
    }, {
      "left" : "if (!testJavaMap(jMap,Integer.class,name))",
      "right" : "if (!testJavaMap(jMap,Integer.class,String.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[35433-35489]:IfStatement[17038-17132]"
    }, {
      "left" : "jMap",
      "right" : "unsorted",
      "info" : "SimpleName[35450-35454]:SimpleName[17093-17101]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[35455-35468]:TypeLiteral[17060-17073]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[35469-35473]:SimpleName[17103-17109]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35476-35489]:ReturnStatement[6241-6254]"
    }, {
      "left" : "\"Chaining HashMap <Integer>\"",
      "right" : "\"Chaining HashMap <Integer>\"",
      "info" : "StringLiteral[35506-35534]:StringLiteral[16749-16777]"
    }, {
      "left" : "cHashMap.toMap()",
      "right" : "cHashMap.toMap()",
      "info" : "MethodInvocation[35551-35567]:MethodInvocation[16824-16840]"
    }, {
      "left" : "if (!testJavaMap(jMap,Integer.class,name))",
      "right" : "if (!testJavaMap(jMap,Integer.class,String.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[35578-35634]:IfStatement[16416-16510]"
    }, {
      "left" : "jMap",
      "right" : "unsorted",
      "info" : "SimpleName[35595-35599]:SimpleName[16471-16479]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[35600-35613]:TypeLiteral[16438-16451]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[35614-35618]:SimpleName[16481-16487]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35621-35634]:ReturnStatement[6123-6136]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35644-35656]:ReturnStatement[14632-14644]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35668-35675]:Modifier[21817-21824]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35676-35682]:Modifier[21825-21831]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[35779-35786]:Modifier[17501-17507]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35794-35801]:PrimitiveType[15049-15056]"
    }, {
      "left" : "testHAMT",
      "right" : "run",
      "info" : "SimpleName[35802-35810]:SimpleName[17516-17519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35813-36014]:Block[17572-17747]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[35823-35829]:SimpleType[17331-17337]"
    }, {
      "left" : "\"HAMT <Integer>\"",
      "right" : "\"HAMT <Integer>\"",
      "info" : "StringLiteral[35841-35857]:StringLiteral[17345-17361]"
    }, {
      "left" : "java.util.Map<Integer,String>",
      "right" : "java.util.Map<Integer,String>",
      "info" : "ParameterizedType[35867-35896]:ParameterizedType[17371-17400]"
    }, {
      "left" : "jMap = hamt.toMap()",
      "right" : "jMap = hamt.toMap()",
      "info" : "VariableDeclarationFragment[35897-35916]:VariableDeclarationFragment[17401-17420]"
    }, {
      "left" : "if (!testJavaMap(jMap,Integer.class,hamtName))",
      "right" : "if (!testJavaMap(jMap,Integer.class,String.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[35927-35987]:IfStatement[17618-17712]"
    }, {
      "left" : "jMap",
      "right" : "unsorted",
      "info" : "SimpleName[35944-35948]:SimpleName[17673-17681]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[35949-35962]:TypeLiteral[17640-17653]"
    }, {
      "left" : "hamtName",
      "right" : "sorted",
      "info" : "SimpleName[35963-35971]:SimpleName[17683-17689]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35974-35987]:ReturnStatement[6367-6380]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35996-36008]:ReturnStatement[15270-15282]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36020-36027]:Modifier[22936-22943]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36028-36034]:Modifier[22944-22950]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[36142-36149]:Modifier[18050-18056]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36157-36164]:PrimitiveType[18057-18064]"
    }, {
      "left" : "testJavaHashMap",
      "right" : "run",
      "info" : "SimpleName[36165-36180]:SimpleName[18065-18068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36183-36334]:Block[18121-18303]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[36193-36199]:SimpleType[17929-17935]"
    }, {
      "left" : "\"Java's HashMap <Integer>\"",
      "right" : "\"Java's HashMap <Integer>\"",
      "info" : "StringLiteral[36207-36233]:StringLiteral[17943-17969]"
    }, {
      "left" : "if (!testJavaMap(javaHashMap,Integer.class,name))",
      "right" : "if (!testJavaMap(javaHashMap,Integer.class,String.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[36244-36307]:IfStatement[18167-18268]"
    }, {
      "left" : "javaHashMap",
      "right" : "javaHashMap",
      "info" : "SimpleName[36261-36272]:SimpleName[18184-18195]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[36273-36286]:TypeLiteral[18196-18209]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[36287-36291]:SimpleName[18229-18237]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36294-36307]:ReturnStatement[18255-18268]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36316-36328]:ReturnStatement[18281-18293]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36340-36347]:Modifier[24024-24031]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36348-36354]:Modifier[24032-24038]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[36502-36511]:MarkerAnnotation[18529-18538]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[36524-36530]:Modifier[18555-18561]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[36531-36534]:PrimitiveType[18562-18565]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[36535-36542]:SimpleName[18566-18573]"
    }, {
      "left" : "Integer arg0",
      "right" : "Integer arg0",
      "info" : "SingleVariableDeclaration[36543-36555]:SingleVariableDeclaration[18574-18586]"
    }, {
      "left" : "Integer arg1",
      "right" : "Integer arg1",
      "info" : "SingleVariableDeclaration[36557-36569]:SingleVariableDeclaration[18588-18600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36571-36770]:Block[18602-18825]"
    }, {
      "left" : "if (arg0.compareTo(arg1) < 0)",
      "right" : "if (arg0.compareTo(arg1) > 0)",
      "info" : "IfStatement[36589-36730]:IfStatement[18624-18777]"
    }, {
      "left" : "<",
      "right" : ">",
      "info" : "INFIX_EXPRESSION_OPERATOR[36614-36615]:INFIX_EXPRESSION_OPERATOR[18649-18650]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[36639-36649]:ReturnStatement[18767-18777]"
    }, {
      "left" : "if (arg1.compareTo(arg0) < 0)",
      "right" : "if (arg1.compareTo(arg0) > 0)",
      "info" : "IfStatement[36671-36730]:IfStatement[18713-18777]"
    }, {
      "left" : "<",
      "right" : ">",
      "info" : "INFIX_EXPRESSION_OPERATOR[36696-36697]:INFIX_EXPRESSION_OPERATOR[18738-18739]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[36721-36730]:ReturnStatement[18678-18687]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[36747-36756]:ReturnStatement[18798-18807]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[36792-36799]:Modifier[18989-18995]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[36807-36814]:PrimitiveType[18996-19003]"
    }, {
      "left" : "testJavaMinHeap",
      "right" : "run",
      "info" : "SimpleName[36815-36830]:SimpleName[19004-19007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36833-37005]:Block[19060-19241]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[36843-36849]:SimpleType[18859-18865]"
    }, {
      "left" : "\"Java's Min-Heap <Integer> [array]\"",
      "right" : "\"Java's Min-Heap <Integer> [array]\"",
      "info" : "StringLiteral[36857-36892]:StringLiteral[18873-18908]"
    }, {
      "left" : "if (!testJavaCollection(javaMinArrayHeap,Integer.class,name))",
      "right" : "if (!testJavaCollection(javaMinArrayHeap,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[36903-36978]:IfStatement[19106-19206]"
    }, {
      "left" : "javaMinArrayHeap",
      "right" : "javaMinArrayHeap",
      "info" : "SimpleName[36927-36943]:SimpleName[19130-19146]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[36944-36957]:TypeLiteral[19147-19160]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[36958-36962]:SimpleName[19167-19175]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36965-36978]:ReturnStatement[19193-19206]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36987-36999]:ReturnStatement[19219-19231]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37011-37018]:Modifier[25151-25158]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37019-37025]:Modifier[25159-25165]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37173-37182]:MarkerAnnotation[19467-19476]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37195-37201]:Modifier[19493-19499]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37202-37205]:PrimitiveType[19500-19503]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[37206-37213]:SimpleName[19504-19511]"
    }, {
      "left" : "Integer arg0",
      "right" : "Integer arg0",
      "info" : "SingleVariableDeclaration[37214-37226]:SingleVariableDeclaration[19512-19524]"
    }, {
      "left" : "Integer arg1",
      "right" : "Integer arg1",
      "info" : "SingleVariableDeclaration[37228-37240]:SingleVariableDeclaration[19526-19538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37242-37441]:Block[19540-19763]"
    }, {
      "left" : "if (arg0.compareTo(arg1) > 0)",
      "right" : "if (arg0.compareTo(arg1) > 0)",
      "info" : "IfStatement[37260-37401]:IfStatement[19562-19715]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[37310-37320]:ReturnStatement[19616-19626]"
    }, {
      "left" : "if (arg1.compareTo(arg0) > 0)",
      "right" : "if (arg1.compareTo(arg0) > 0)",
      "info" : "IfStatement[37342-37401]:IfStatement[19652-19715]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[37392-37401]:ReturnStatement[19706-19715]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[37418-37427]:ReturnStatement[19736-19745]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[37463-37470]:Modifier[19927-19933]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37478-37485]:PrimitiveType[19934-19941]"
    }, {
      "left" : "testJavaMaxHeap",
      "right" : "run",
      "info" : "SimpleName[37486-37501]:SimpleName[19942-19945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37504-37676]:Block[19998-20179]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[37514-37520]:SimpleType[19797-19803]"
    }, {
      "left" : "\"Java's Max-Heap <Integer> [array]\"",
      "right" : "\"Java's Max-Heap <Integer> [array]\"",
      "info" : "StringLiteral[37528-37563]:StringLiteral[19811-19846]"
    }, {
      "left" : "if (!testJavaCollection(javaMaxArrayHeap,Integer.class,name))",
      "right" : "if (!testJavaCollection(javaMaxArrayHeap,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[37574-37649]:IfStatement[20044-20144]"
    }, {
      "left" : "javaMaxArrayHeap",
      "right" : "javaMaxArrayHeap",
      "info" : "SimpleName[37598-37614]:SimpleName[20068-20084]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[37615-37628]:TypeLiteral[20085-20098]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[37629-37633]:SimpleName[20105-20113]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37636-37649]:ReturnStatement[20131-20144]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37658-37670]:ReturnStatement[20157-20169]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37682-37689]:Modifier[26329-26336]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[37690-37696]:Modifier[26337-26343]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[37783-37790]:Modifier[20468-20474]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[37798-37805]:PrimitiveType[20475-20482]"
    }, {
      "left" : "testJavaArrayList",
      "right" : "run",
      "info" : "SimpleName[37806-37823]:SimpleName[20483-20486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37826-37991]:Block[20539-20717]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[37836-37842]:SimpleType[20342-20348]"
    }, {
      "left" : "\"Java's List <Integer> [array]\"",
      "right" : "\"Java's List <Integer> [array]\"",
      "info" : "StringLiteral[37850-37881]:StringLiteral[20356-20387]"
    }, {
      "left" : "if (!testJavaCollection(javaArrayList,Integer.class,name))",
      "right" : "if (!testJavaCollection(javaArrayList,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[37892-37964]:IfStatement[20585-20682]"
    }, {
      "left" : "javaArrayList",
      "right" : "javaArrayList",
      "info" : "SimpleName[37916-37929]:SimpleName[20609-20622]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[37930-37943]:TypeLiteral[20623-20636]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[37944-37948]:SimpleName[20643-20651]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37951-37964]:ReturnStatement[20669-20682]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37973-37985]:ReturnStatement[20695-20707]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37997-38004]:Modifier[27519-27526]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38005-38011]:Modifier[27527-27533]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[38100-38107]:Modifier[21010-21016]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38115-38122]:PrimitiveType[21017-21024]"
    }, {
      "left" : "testJavaLinkedList",
      "right" : "run",
      "info" : "SimpleName[38123-38141]:SimpleName[21025-21028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38144-38311]:Block[21081-21260]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[38154-38160]:SimpleType[20883-20889]"
    }, {
      "left" : "\"Java's List <Integer> [linked]\"",
      "right" : "\"Java's List <Integer> [linked]\"",
      "info" : "StringLiteral[38168-38200]:StringLiteral[20897-20929]"
    }, {
      "left" : "if (!testJavaCollection(javaLinkedList,Integer.class,name))",
      "right" : "if (!testJavaCollection(javaLinkedList,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[38211-38284]:IfStatement[21127-21225]"
    }, {
      "left" : "javaLinkedList",
      "right" : "javaLinkedList",
      "info" : "SimpleName[38235-38249]:SimpleName[21151-21165]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[38250-38263]:TypeLiteral[21166-21179]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[38264-38268]:SimpleName[21186-21194]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38271-38284]:ReturnStatement[21212-21225]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38293-38305]:ReturnStatement[21238-21250]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38317-38324]:Modifier[28697-28704]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38325-38331]:Modifier[28705-28711]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[38421-38428]:Modifier[21554-21560]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38436-38443]:PrimitiveType[21561-21568]"
    }, {
      "left" : "testJavaArrayQueue",
      "right" : "run",
      "info" : "SimpleName[38444-38462]:SimpleName[21569-21572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38465-38632]:Block[21625-21804]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[38475-38481]:SimpleType[21427-21433]"
    }, {
      "left" : "\"Java's Queue <Integer> [array]\"",
      "right" : "\"Java's Queue <Integer> [array]\"",
      "info" : "StringLiteral[38489-38521]:StringLiteral[21441-21473]"
    }, {
      "left" : "if (!testJavaCollection(javaArrayQueue,Integer.class,name))",
      "right" : "if (!testJavaCollection(javaArrayQueue,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[38532-38605]:IfStatement[21671-21769]"
    }, {
      "left" : "javaArrayQueue",
      "right" : "javaArrayQueue",
      "info" : "SimpleName[38556-38570]:SimpleName[21695-21709]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[38571-38584]:TypeLiteral[21710-21723]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[38585-38589]:SimpleName[21730-21738]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38592-38605]:ReturnStatement[21756-21769]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38614-38626]:ReturnStatement[21782-21794]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38638-38645]:Modifier[29851-29858]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38646-38652]:Modifier[29859-29865]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[38743-38750]:Modifier[22101-22107]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38758-38765]:PrimitiveType[22108-22115]"
    }, {
      "left" : "testJavaLinkedQueue",
      "right" : "run",
      "info" : "SimpleName[38766-38785]:SimpleName[22116-22119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38788-38957]:Block[22172-22352]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[38798-38804]:SimpleType[21973-21979]"
    }, {
      "left" : "\"Java's Queue <Integer> [linked]\"",
      "right" : "\"Java's Queue <Integer> [linked]\"",
      "info" : "StringLiteral[38812-38845]:StringLiteral[21987-22020]"
    }, {
      "left" : "if (!testJavaCollection(javaLinkedQueue,Integer.class,name))",
      "right" : "if (!testJavaCollection(javaLinkedQueue,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[38856-38930]:IfStatement[22218-22317]"
    }, {
      "left" : "javaLinkedQueue",
      "right" : "javaLinkedQueue",
      "info" : "SimpleName[38880-38895]:SimpleName[22242-22257]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[38896-38909]:TypeLiteral[22258-22271]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[38910-38914]:SimpleName[22278-22286]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38917-38930]:ReturnStatement[22304-22317]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38939-38951]:ReturnStatement[22330-22342]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38963-38970]:Modifier[31026-31033]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[38971-38977]:Modifier[31034-31040]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[39075-39082]:Modifier[22664-22670]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39090-39097]:PrimitiveType[22671-22678]"
    }, {
      "left" : "testJavaRedBlackIntegerTree",
      "right" : "run",
      "info" : "SimpleName[39098-39125]:SimpleName[22679-22682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39128-39305]:Block[22735-22923]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39138-39144]:SimpleType[22536-22542]"
    }, {
      "left" : "\"Java's Red-Black Tree <Integer>\"",
      "right" : "\"Java's Red-Black Tree <Integer>\"",
      "info" : "StringLiteral[39152-39185]:StringLiteral[22550-22583]"
    }, {
      "left" : "if (!testJavaCollection(javaRedBlackTreeInteger,Integer.class,name))",
      "right" : "if (!testJavaCollection(javaRedBlackTreeInteger,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[39196-39278]:IfStatement[22781-22888]"
    }, {
      "left" : "javaRedBlackTreeInteger",
      "right" : "javaRedBlackTreeInteger",
      "info" : "SimpleName[39220-39243]:SimpleName[22805-22828]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[39244-39257]:TypeLiteral[22829-22842]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[39258-39262]:SimpleName[22849-22857]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39265-39278]:ReturnStatement[22875-22888]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39287-39299]:ReturnStatement[22901-22913]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39311-39318]:Modifier[32190-32197]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39319-39325]:Modifier[32198-32204]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[39420-39427]:Modifier[23230-23236]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39435-39442]:PrimitiveType[23237-23244]"
    }, {
      "left" : "testJavaRedBlackStringTree",
      "right" : "run",
      "info" : "SimpleName[39443-39469]:SimpleName[23245-23248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39472-39646]:Block[23301-23487]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39482-39488]:SimpleType[23103-23109]"
    }, {
      "left" : "\"Java's Red-Black Tree <String>\"",
      "right" : "\"Java's Red-Black Tree <String>\"",
      "info" : "StringLiteral[39496-39528]:StringLiteral[23117-23149]"
    }, {
      "left" : "if (!testJavaCollection(javaRedBlackTreeString,String.class,name))",
      "right" : "if (!testJavaCollection(javaRedBlackTreeString,String.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[39539-39619]:IfStatement[23347-23452]"
    }, {
      "left" : "javaRedBlackTreeString",
      "right" : "javaRedBlackTreeString",
      "info" : "SimpleName[39563-39585]:SimpleName[23371-23393]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[39586-39598]:TypeLiteral[23394-23406]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[39599-39603]:SimpleName[23413-23421]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39606-39619]:ReturnStatement[23439-23452]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39628-39640]:ReturnStatement[23465-23477]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39652-39659]:Modifier[33299-33306]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39660-39666]:Modifier[33307-33313]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[39746-39753]:Modifier[23766-23772]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[39761-39768]:PrimitiveType[23773-23780]"
    }, {
      "left" : "testJavaStack",
      "right" : "run",
      "info" : "SimpleName[39769-39782]:SimpleName[23781-23784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39785-39947]:Block[23837-24011]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[39795-39801]:SimpleType[23639-23645]"
    }, {
      "left" : "\"Java's Stack <Integer> [array]\"",
      "right" : "\"Java's Stack <Integer> [array]\"",
      "info" : "StringLiteral[39809-39841]:StringLiteral[23653-23685]"
    }, {
      "left" : "if (!testJavaCollection(javaStack,Integer.class,name))",
      "right" : "if (!testJavaCollection(javaStack,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[39852-39920]:IfStatement[23883-23976]"
    }, {
      "left" : "javaStack",
      "right" : "javaStack",
      "info" : "SimpleName[39876-39885]:SimpleName[23907-23916]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[39886-39899]:TypeLiteral[23917-23930]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[39900-39904]:SimpleName[23937-23945]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39907-39920]:ReturnStatement[23963-23976]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39929-39941]:ReturnStatement[23989-24001]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[39953-39960]:Modifier[34437-34444]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[39961-39967]:Modifier[34445-34451]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[40063-40070]:Modifier[24301-24307]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40078-40085]:PrimitiveType[24308-24315]"
    }, {
      "left" : "testJavaTreeMap",
      "right" : "run",
      "info" : "SimpleName[40086-40101]:SimpleName[24316-24319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40104-40253]:Block[24372-24554]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[40114-40120]:SimpleType[24181-24187]"
    }, {
      "left" : "\"Java's TreeMap <String>\"",
      "right" : "\"Java's TreeMap <String>\"",
      "info" : "StringLiteral[40128-40153]:StringLiteral[24195-24220]"
    }, {
      "left" : "if (!testJavaMap(javaTreeMap,String.class,name))",
      "right" : "if (!testJavaMap(javaTreeMap,String.class,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[40164-40226]:IfStatement[24418-24519]"
    }, {
      "left" : "javaTreeMap",
      "right" : "javaTreeMap",
      "info" : "SimpleName[40181-40192]:SimpleName[24435-24446]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[40193-40205]:TypeLiteral[24447-24459]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[40206-40210]:SimpleName[24480-24488]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40213-40226]:ReturnStatement[24506-24519]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40235-40247]:ReturnStatement[24532-24544]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40259-40266]:Modifier[33866-33873]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40267-40273]:Modifier[33874-33880]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[40351-40358]:Modifier[24891-24897]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40366-40373]:PrimitiveType[15683-15690]"
    }, {
      "left" : "testArrayList",
      "right" : "run",
      "info" : "SimpleName[40374-40387]:SimpleName[24906-24909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40390-40614]:Block[24962-25138]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[40400-40406]:SimpleType[24704-24710]"
    }, {
      "left" : "\"List <Integer> [array]\"",
      "right" : "\"List <Integer> [array]\"",
      "info" : "StringLiteral[40414-40438]:StringLiteral[24718-24742]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[40448-40467]:ParameterizedType[24752-24771]"
    }, {
      "left" : "arrayList.toCollection()",
      "right" : "arrayList.toCollection()",
      "info" : "MethodInvocation[40482-40506]:MethodInvocation[24786-24810]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[40517-40587]:IfStatement[25008-25103]"
    }, {
      "left" : "aCollection",
      "right" : "unsorted",
      "info" : "SimpleName[40541-40552]:SimpleName[25064-25072]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[40553-40566]:TypeLiteral[25044-25057]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[40567-40571]:SimpleName[25074-25080]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40574-40587]:ReturnStatement[6510-6523]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40596-40608]:ReturnStatement[15904-15916]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40620-40627]:Modifier[32757-32764]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40628-40634]:Modifier[32765-32771]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[40730-40737]:PrimitiveType[16306-16313]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[40765-40771]:SimpleType[25292-25298]"
    }, {
      "left" : "\"List <Integer> [linked]\"",
      "right" : "\"List <Integer> [linked]\"",
      "info" : "StringLiteral[40779-40804]:StringLiteral[25306-25331]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[40814-40833]:ParameterizedType[25341-25360]"
    }, {
      "left" : "linkedList.toCollection()",
      "right" : "linkedList.toCollection()",
      "info" : "MethodInvocation[40848-40873]:MethodInvocation[25375-25400]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,name))",
      "right" : "if (!runTests(new testSkipList(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[40884-40954]:IfStatement[6561-6645]"
    }, {
      "left" : "testJavaCollection",
      "right" : "runTests",
      "info" : "SimpleName[40889-40907]:SimpleName[6566-6574]"
    }, {
      "left" : "lCollection",
      "right" : "tests",
      "info" : "SimpleName[40908-40919]:SimpleName[6595-6600]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[40920-40933]:TypeLiteral[24460-24473]"
    }, {
      "left" : "name",
      "right" : "unsorteds",
      "info" : "SimpleName[40934-40938]:SimpleName[6602-6611]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40941-40954]:ReturnStatement[6632-6645]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[40963-40975]:ReturnStatement[16523-16535]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[40987-40994]:Modifier[31624-31631]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[40995-41001]:Modifier[31632-31638]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41091-41098]:PrimitiveType[16928-16935]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[41128-41134]:SimpleType[25878-25884]"
    }, {
      "left" : "\"PatriciaTrie <String>\"",
      "right" : "\"PatriciaTrie <String>\"",
      "info" : "StringLiteral[41142-41165]:StringLiteral[25892-25915]"
    }, {
      "left" : "Collection<String>",
      "right" : "Collection<String>",
      "info" : "ParameterizedType[41175-41193]:ParameterizedType[25925-25943]"
    }, {
      "left" : "bstCollection = patriciaTrie.toCollection()",
      "right" : "bstCollection = patriciaTrie.toCollection()",
      "info" : "VariableDeclarationFragment[41194-41237]:VariableDeclarationFragment[25944-25987]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,String.class,name))",
      "right" : "if (!runTests(new testJavaMinHeap(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[41257-41328]:IfStatement[6701-6788]"
    }, {
      "left" : "testJavaCollection",
      "right" : "runTests",
      "info" : "SimpleName[41262-41280]:SimpleName[6706-6714]"
    }, {
      "left" : "bstCollection",
      "right" : "tests",
      "info" : "SimpleName[41281-41294]:SimpleName[6738-6743]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[41295-41307]:TypeLiteral[16452-16464]"
    }, {
      "left" : "name",
      "right" : "unsorteds",
      "info" : "SimpleName[41308-41312]:SimpleName[6745-6754]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41315-41328]:ReturnStatement[6775-6788]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41337-41349]:ReturnStatement[17145-17157]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41361-41368]:Modifier[30434-30441]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41369-41375]:Modifier[30442-30448]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[41458-41465]:Modifier[25481-25487]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41473-41480]:PrimitiveType[25488-25495]"
    }, {
      "left" : "testArrayQueue",
      "right" : "run",
      "info" : "SimpleName[41481-41495]:SimpleName[25496-25499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41498-41724]:Block[25552-25728]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[41508-41514]:SimpleType[26472-26478]"
    }, {
      "left" : "\"Queue <Integer> [array]\"",
      "right" : "\"Queue <Integer> [array]\"",
      "info" : "StringLiteral[41522-41547]:StringLiteral[26486-26511]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[41557-41576]:ParameterizedType[26521-26540]"
    }, {
      "left" : "arrayQueue.toCollection()",
      "right" : "arrayQueue.toCollection()",
      "info" : "MethodInvocation[41591-41616]:MethodInvocation[26555-26580]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[41627-41697]:IfStatement[25598-25693]"
    }, {
      "left" : "aCollection",
      "right" : "unsorted",
      "info" : "SimpleName[41651-41662]:SimpleName[25654-25662]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[41663-41676]:TypeLiteral[25634-25647]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[41677-41681]:SimpleName[25664-25670]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41684-41697]:ReturnStatement[6901-6914]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41706-41718]:ReturnStatement[17725-17737]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[41730-41737]:Modifier[29286-29293]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[41738-41744]:Modifier[29294-29300]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[41830-41837]:Modifier[26661-26667]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[41845-41852]:PrimitiveType[24898-24905]"
    }, {
      "left" : "testLinkedQueue",
      "right" : "run",
      "info" : "SimpleName[41853-41868]:SimpleName[26676-26679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41871-42099]:Block[26732-26908]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[41881-41887]:SimpleType[27068-27074]"
    }, {
      "left" : "\"Queue <Integer> [linked]\"",
      "right" : "\"Queue <Integer> [linked]\"",
      "info" : "StringLiteral[41895-41921]:StringLiteral[27082-27108]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[41931-41950]:ParameterizedType[27118-27137]"
    }, {
      "left" : "linkedQueue.toCollection()",
      "right" : "linkedQueue.toCollection()",
      "info" : "MethodInvocation[41965-41991]:MethodInvocation[27152-27178]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[42002-42072]:IfStatement[26778-26873]"
    }, {
      "left" : "lCollection",
      "right" : "unsorted",
      "info" : "SimpleName[42026-42037]:SimpleName[26834-26842]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[42038-42051]:TypeLiteral[26814-26827]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[42052-42056]:SimpleName[26844-26850]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42059-42072]:ReturnStatement[7026-7039]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42081-42093]:ReturnStatement[25116-25128]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42105-42112]:Modifier[28098-28105]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42113-42119]:Modifier[28106-28112]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42216-42223]:PrimitiveType[11628-11635]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[42250-42256]:SimpleType[27660-27666]"
    }, {
      "left" : "\"RadixTrie <String>\"",
      "right" : "\"RadixTrie <String>\"",
      "info" : "StringLiteral[42264-42284]:StringLiteral[27674-27694]"
    }, {
      "left" : "java.util.Map<String,Integer>",
      "right" : "java.util.Map<String,Integer>",
      "info" : "ParameterizedType[42294-42323]:ParameterizedType[27704-27733]"
    }, {
      "left" : "jMap = radixTrie.toMap()",
      "right" : "jMap = radixTrie.toMap()",
      "info" : "VariableDeclarationFragment[42324-42348]:VariableDeclarationFragment[27734-27758]"
    }, {
      "left" : "if (!testJavaMap(jMap,String.class,name))",
      "right" : "if (!runTests(new testJavaMaxHeap(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[42359-42414]:IfStatement[7077-7164]"
    }, {
      "left" : "testJavaMap",
      "right" : "runTests",
      "info" : "SimpleName[42364-42375]:SimpleName[7082-7090]"
    }, {
      "left" : "jMap",
      "right" : "tests",
      "info" : "SimpleName[42376-42380]:SimpleName[7114-7119]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[42381-42393]:TypeLiteral[17074-17086]"
    }, {
      "left" : "name",
      "right" : "unsorteds",
      "info" : "SimpleName[42394-42398]:SimpleName[7121-7130]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42401-42414]:ReturnStatement[7151-7164]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42423-42435]:ReturnStatement[25706-25718]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42447-42454]:Modifier[26921-26928]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42455-42461]:Modifier[26929-26935]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[42542-42549]:Modifier[27259-27265]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42557-42564]:PrimitiveType[26075-26082]"
    }, {
      "left" : "testRedBlackTree",
      "right" : "run",
      "info" : "SimpleName[42565-42581]:SimpleName[27274-27277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42584-42817]:Block[27330-27506]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[42594-42600]:SimpleType[28241-28247]"
    }, {
      "left" : "\"Red-Black Tree <Integer>\"",
      "right" : "\"Red-Black Tree <Integer>\"",
      "info" : "StringLiteral[42608-42634]:StringLiteral[28255-28281]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[42644-42663]:ParameterizedType[28291-28310]"
    }, {
      "left" : "bstCollection = redBlackTree.toCollection()",
      "right" : "bstCollection = redBlackTree.toCollection()",
      "info" : "VariableDeclarationFragment[42664-42707]:VariableDeclarationFragment[28311-28354]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[42718-42790]:IfStatement[27376-27471]"
    }, {
      "left" : "bstCollection",
      "right" : "unsorted",
      "info" : "SimpleName[42742-42755]:SimpleName[27432-27440]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[42756-42769]:TypeLiteral[27412-27425]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[42770-42774]:SimpleName[27442-27448]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[42777-42790]:ReturnStatement[7277-7290]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[42799-42811]:ReturnStatement[26294-26306]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42823-42830]:Modifier[25741-25748]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[42831-42837]:Modifier[25749-25755]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[42923-42930]:Modifier[27839-27845]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[42938-42945]:PrimitiveType[26668-26675]"
    }, {
      "left" : "testJavaSkipList",
      "right" : "run",
      "info" : "SimpleName[42946-42962]:SimpleName[27854-27857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42965-43183]:Block[27910-28085]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[42975-42981]:SimpleType[28845-28851]"
    }, {
      "left" : "\"Java's SkipListSet <Integer>\"",
      "right" : "\"Java's SkipListSet <Integer>\"",
      "info" : "StringLiteral[42989-43019]:StringLiteral[28859-28889]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[43029-43048]:ParameterizedType[28899-28918]"
    }, {
      "left" : "lCollection = javaSkipList",
      "right" : "lCollection = javaSkipList",
      "info" : "VariableDeclarationFragment[43049-43075]:VariableDeclarationFragment[28919-28945]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,name))",
      "right" : "if (!testJavaMap(jMap,String.class,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[43086-43156]:IfStatement[27956-28050]"
    }, {
      "left" : "testJavaCollection",
      "right" : "testJavaMap",
      "info" : "SimpleName[43091-43109]:SimpleName[27961-27972]"
    }, {
      "left" : "lCollection",
      "right" : "unsorted",
      "info" : "SimpleName[43110-43121]:SimpleName[28011-28019]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[43122-43135]:TypeLiteral[27991-28004]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[43136-43140]:SimpleName[28021-28027]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43143-43156]:ReturnStatement[7402-7415]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43165-43177]:ReturnStatement[26886-26898]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43189-43196]:Modifier[24567-24574]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43197-43203]:Modifier[24575-24581]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[43268-43275]:Modifier[28435-28441]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43283-43290]:PrimitiveType[27266-27273]"
    }, {
      "left" : "testSkipList",
      "right" : "run",
      "info" : "SimpleName[43291-43303]:SimpleName[28450-28453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43306-43525]:Block[28506-28684]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[43316-43322]:SimpleType[29409-29415]"
    }, {
      "left" : "\"SkipList <Integer>\"",
      "right" : "\"SkipList <Integer>\"",
      "info" : "StringLiteral[43330-43350]:StringLiteral[29423-29443]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[43360-43379]:ParameterizedType[29453-29472]"
    }, {
      "left" : "lCollection = skipList.toCollection()",
      "right" : "lCollection = skipList.toCollection()",
      "info" : "VariableDeclarationFragment[43380-43417]:VariableDeclarationFragment[29473-29510]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[43428-43498]:IfStatement[28552-28649]"
    }, {
      "left" : "lCollection",
      "right" : "unsorted",
      "info" : "SimpleName[43452-43463]:SimpleName[28610-28618]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[43464-43477]:TypeLiteral[28590-28603]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[43478-43482]:SimpleName[28620-28626]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43485-43498]:ReturnStatement[7547-7560]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43507-43519]:ReturnStatement[27484-27496]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43531-43538]:Modifier[23500-23507]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43539-43545]:Modifier[23508-23514]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[43620-43627]:Modifier[29026-29032]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[43635-43642]:PrimitiveType[27846-27853]"
    }, {
      "left" : "testSplayTree",
      "right" : "run",
      "info" : "SimpleName[43643-43656]:SimpleName[29041-29044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43659-43885]:Block[29097-29273]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[43669-43675]:SimpleType[29985-29991]"
    }, {
      "left" : "\"Splay Tree <Integer>\"",
      "right" : "\"Splay Tree <Integer>\"",
      "info" : "StringLiteral[43683-43705]:StringLiteral[29999-30021]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[43715-43734]:ParameterizedType[30031-30050]"
    }, {
      "left" : "bstCollection = splayTree.toCollection()",
      "right" : "bstCollection = splayTree.toCollection()",
      "info" : "VariableDeclarationFragment[43735-43775]:VariableDeclarationFragment[30051-30091]"
    }, {
      "left" : "if (!testJavaCollection(bstCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[43786-43858]:IfStatement[29143-29238]"
    }, {
      "left" : "bstCollection",
      "right" : "unsorted",
      "info" : "SimpleName[43810-43823]:SimpleName[29199-29207]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[43824-43837]:TypeLiteral[29179-29192]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[43838-43842]:SimpleName[29209-29215]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[43845-43858]:ReturnStatement[7670-7683]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[43867-43879]:ReturnStatement[28063-28075]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43891-43898]:Modifier[22365-22372]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[43899-43905]:Modifier[22373-22379]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[43988-43995]:Modifier[29591-29597]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44003-44010]:PrimitiveType[28442-28449]"
    }, {
      "left" : "testArrayStack",
      "right" : "run",
      "info" : "SimpleName[44011-44025]:SimpleName[29606-29609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44028-44254]:Block[29662-29838]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[44038-44044]:SimpleType[30577-30583]"
    }, {
      "left" : "\"Stack <Integer> [array]\"",
      "right" : "\"Stack <Integer> [array]\"",
      "info" : "StringLiteral[44052-44077]:StringLiteral[30591-30616]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[44087-44106]:ParameterizedType[30626-30645]"
    }, {
      "left" : "arrayStack.toCollection()",
      "right" : "arrayStack.toCollection()",
      "info" : "MethodInvocation[44121-44146]:MethodInvocation[30660-30685]"
    }, {
      "left" : "if (!testJavaCollection(aCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(lCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[44157-44227]:IfStatement[29708-29803]"
    }, {
      "left" : "aCollection",
      "right" : "unsorted",
      "info" : "SimpleName[44181-44192]:SimpleName[29764-29772]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[44193-44206]:TypeLiteral[29744-29757]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[44207-44211]:SimpleName[29774-29780]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44214-44227]:ReturnStatement[7798-7811]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44236-44248]:ReturnStatement[28662-28674]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44260-44267]:Modifier[21273-21280]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44268-44274]:Modifier[21281-21287]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[44360-44367]:Modifier[30172-30178]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44375-44382]:PrimitiveType[29033-29040]"
    }, {
      "left" : "testLinkedStack",
      "right" : "run",
      "info" : "SimpleName[44383-44398]:SimpleName[30187-30190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44401-44629]:Block[30243-30421]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[44411-44417]:SimpleType[31173-31179]"
    }, {
      "left" : "\"Stack <Integer> [linked]\"",
      "right" : "\"Stack <Integer> [linked]\"",
      "info" : "StringLiteral[44425-44451]:StringLiteral[31187-31213]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[44461-44480]:ParameterizedType[31223-31242]"
    }, {
      "left" : "linkedStack.toCollection()",
      "right" : "linkedStack.toCollection()",
      "info" : "MethodInvocation[44495-44521]:MethodInvocation[31257-31283]"
    }, {
      "left" : "if (!testJavaCollection(lCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(bstCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[44532-44602]:IfStatement[30289-30386]"
    }, {
      "left" : "lCollection",
      "right" : "unsorted",
      "info" : "SimpleName[44556-44567]:SimpleName[30347-30355]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[44568-44581]:TypeLiteral[30327-30340]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[44582-44586]:SimpleName[30357-30363]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44589-44602]:ReturnStatement[7922-7935]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44611-44623]:ReturnStatement[29251-29263]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44635-44642]:Modifier[19254-19261]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44643-44649]:Modifier[19262-19268]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[44716-44723]:Modifier[30766-30772]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[44731-44738]:PrimitiveType[29598-29605]"
    }, {
      "left" : "testTreap",
      "right" : "run",
      "info" : "SimpleName[44739-44748]:SimpleName[30781-30784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44751-44972]:Block[30837-31013]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[44761-44767]:SimpleType[31746-31752]"
    }, {
      "left" : "\"Treap <Integer>\"",
      "right" : "\"Treap <Integer>\"",
      "info" : "StringLiteral[44775-44792]:StringLiteral[31760-31777]"
    }, {
      "left" : "Collection<Integer>",
      "right" : "Collection<Integer>",
      "info" : "ParameterizedType[44802-44821]:ParameterizedType[31787-31806]"
    }, {
      "left" : "treapCollection = treap.toCollection()",
      "right" : "treapCollection = treap.toCollection()",
      "info" : "VariableDeclarationFragment[44822-44860]:VariableDeclarationFragment[31807-31845]"
    }, {
      "left" : "if (!testJavaCollection(treapCollection,Integer.class,name))",
      "right" : "if (!testJavaCollection(aCollection,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[44871-44945]:IfStatement[30883-30978]"
    }, {
      "left" : "treapCollection",
      "right" : "unsorted",
      "info" : "SimpleName[44895-44910]:SimpleName[30939-30947]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[44911-44924]:TypeLiteral[30919-30932]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[44925-44929]:SimpleName[30949-30955]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44932-44945]:ReturnStatement[8069-8082]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44954-44966]:ReturnStatement[29816-29828]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44978-44985]:Modifier[17180-17187]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[44986-44992]:Modifier[17188-17194]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45083-45090]:PrimitiveType[30179-30186]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[45115-45121]:SimpleType[32323-32329]"
    }, {
      "left" : "\"TreeMap <String>\"",
      "right" : "\"TreeMap <String>\"",
      "info" : "StringLiteral[45129-45147]:StringLiteral[32337-32355]"
    }, {
      "left" : "java.util.Map<String,Integer>",
      "right" : "java.util.Map<String,Integer>",
      "info" : "ParameterizedType[45157-45186]:ParameterizedType[32365-32394]"
    }, {
      "left" : "jMap = treeMap.toMap()",
      "right" : "jMap = treeMap.toMap()",
      "info" : "VariableDeclarationFragment[45187-45209]:VariableDeclarationFragment[32395-32417]"
    }, {
      "left" : "if (!testJavaMap(jMap,String.class,name))",
      "right" : "if (!runTests(new testArrayQueue(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[45220-45275]:IfStatement[8120-8206]"
    }, {
      "left" : "testJavaMap",
      "right" : "runTests",
      "info" : "SimpleName[45225-45236]:SimpleName[8125-8133]"
    }, {
      "left" : "jMap",
      "right" : "tests",
      "info" : "SimpleName[45237-45241]:SimpleName[8156-8161]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[45242-45254]:TypeLiteral[17654-17666]"
    }, {
      "left" : "name",
      "right" : "unsorteds",
      "info" : "SimpleName[45255-45259]:SimpleName[8163-8172]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45262-45275]:ReturnStatement[8193-8206]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45284-45296]:ReturnStatement[30399-30411]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45308-45315]:Modifier[15305-15312]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45316-45322]:Modifier[15313-15319]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45388-45395]:PrimitiveType[30773-30780]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[45417-45423]:SimpleType[32862-32868]"
    }, {
      "left" : "\"Trie <String>\"",
      "right" : "\"Trie <String>\"",
      "info" : "StringLiteral[45431-45446]:StringLiteral[32876-32891]"
    }, {
      "left" : "Collection<String>",
      "right" : "Collection<String>",
      "info" : "ParameterizedType[45456-45474]:ParameterizedType[32901-32919]"
    }, {
      "left" : "trieCollection = trie.toCollection()",
      "right" : "trieCollection = trie.toCollection()",
      "info" : "VariableDeclarationFragment[45475-45511]:VariableDeclarationFragment[32920-32956]"
    }, {
      "left" : "if (!testJavaCollection(trieCollection,String.class,name))",
      "right" : "if (!runTests(new testJavaLinkedQueue(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[45522-45594]:IfStatement[8244-8335]"
    }, {
      "left" : "testJavaCollection",
      "right" : "runTests",
      "info" : "SimpleName[45527-45545]:SimpleName[8249-8257]"
    }, {
      "left" : "trieCollection",
      "right" : "tests",
      "info" : "SimpleName[45546-45560]:SimpleName[8285-8290]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[45561-45573]:TypeLiteral[18210-18222]"
    }, {
      "left" : "name",
      "right" : "unsorteds",
      "info" : "SimpleName[45574-45578]:SimpleName[8292-8301]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45581-45594]:ReturnStatement[8322-8335]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45603-45615]:ReturnStatement[30991-31003]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45627-45634]:Modifier[14033-14040]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[45635-45641]:Modifier[14041-14047]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[45717-45724]:Modifier[26068-26074]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[45732-45739]:PrimitiveType[31371-31378]"
    }, {
      "left" : "testTrieMap",
      "right" : "run",
      "info" : "SimpleName[45740-45751]:SimpleName[26083-26086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45754-45951]:Block[26139-26316]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[45764-45770]:SimpleType[33432-33438]"
    }, {
      "left" : "\"TrieMap <String>\"",
      "right" : "\"TrieMap <String>\"",
      "info" : "StringLiteral[45778-45796]:StringLiteral[33446-33464]"
    }, {
      "left" : "java.util.Map<String,Integer>",
      "right" : "java.util.Map<String,Integer>",
      "info" : "ParameterizedType[45806-45835]:ParameterizedType[33474-33503]"
    }, {
      "left" : "jMap = trieMap.toMap()",
      "right" : "jMap = trieMap.toMap()",
      "info" : "VariableDeclarationFragment[45836-45858]:VariableDeclarationFragment[33504-33526]"
    }, {
      "left" : "if (!testJavaMap(jMap,String.class,name))",
      "right" : "if (!testJavaCollection(bstCollection,String.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[45869-45924]:IfStatement[26185-26281]"
    }, {
      "left" : "testJavaMap",
      "right" : "testJavaCollection",
      "info" : "SimpleName[45874-45885]:SimpleName[26190-26208]"
    }, {
      "left" : "jMap",
      "right" : "unsorted",
      "info" : "SimpleName[45886-45890]:SimpleName[26242-26250]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[45891-45903]:TypeLiteral[26223-26235]"
    }, {
      "left" : "name",
      "right" : "sorted",
      "info" : "SimpleName[45904-45908]:SimpleName[26252-26258]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45911-45924]:ReturnStatement[8447-8460]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45933-45945]:ReturnStatement[31589-31601]"
    }, {
      "left" : "private",
      "right" : "public",
      "info" : "Modifier[46083-46090]:Modifier[34167-34173]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46098-46105]:PrimitiveType[34174-34181]"
    }, {
      "left" : "testJavaSkipListMap",
      "right" : "run",
      "info" : "SimpleName[46106-46125]:SimpleName[34182-34185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46128-46285]:Block[34238-34424]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[46138-46144]:SimpleType[34043-34049]"
    }, {
      "left" : "\"Java's SkipListMap <String>\"",
      "right" : "\"Java's SkipListMap <String>\"",
      "info" : "StringLiteral[46152-46181]:StringLiteral[34057-34086]"
    }, {
      "left" : "if (!testJavaMap(javaSkipListMap,String.class,name))",
      "right" : "if (!testJavaMap(javaSkipListMap,String.class,Integer.class,name, unsorted, sorted, input))",
      "info" : "IfStatement[46192-46258]:IfStatement[34284-34389]"
    }, {
      "left" : "name",
      "right" : "unsorted",
      "info" : "SimpleName[46238-46242]:SimpleName[34350-34358]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46245-46258]:ReturnStatement[34376-34389]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46267-46279]:ReturnStatement[34402-34414]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46408-46415]:PrimitiveType[31933-31940]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[46444-46450]:SimpleType[34586-34592]"
    }, {
      "left" : "\"SkipListMap <String>\"",
      "right" : "\"SkipListMap <String>\"",
      "info" : "StringLiteral[46458-46480]:StringLiteral[34600-34622]"
    }, {
      "left" : "java.util.Map<String,Integer>",
      "right" : "java.util.Map<String,Integer>",
      "info" : "ParameterizedType[46490-46519]:ParameterizedType[34632-34661]"
    }, {
      "left" : "jMap = skipListMap.toMap()",
      "right" : "jMap = skipListMap.toMap()",
      "info" : "VariableDeclarationFragment[46520-46546]:VariableDeclarationFragment[34662-34688]"
    }, {
      "left" : "if (!testJavaMap(jMap,String.class,name))",
      "right" : "if (!runTests(new testJavaStack(), tests, unsorteds, sorteds, strings))",
      "info" : "IfStatement[46557-46612]:IfStatement[8517-8602]"
    }, {
      "left" : "testJavaMap",
      "right" : "runTests",
      "info" : "SimpleName[46562-46573]:SimpleName[8522-8530]"
    }, {
      "left" : "jMap",
      "right" : "tests",
      "info" : "SimpleName[46574-46578]:SimpleName[8552-8557]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[46579-46591]:TypeLiteral[27978-27990]"
    }, {
      "left" : "name",
      "right" : "unsorteds",
      "info" : "SimpleName[46592-46596]:SimpleName[8559-8568]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46599-46612]:ReturnStatement[8589-8602]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46621-46633]:ReturnStatement[32155-32167]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46645-46652]:Modifier[35063-35070]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[46653-46659]:Modifier[35071-35077]"
    }, {
      "left" : "T extends Comparable<T>",
      "right" : "T extends Comparable<T>",
      "info" : "TypeParameter[46661-46684]:TypeParameter[35079-35102]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[46686-46693]:PrimitiveType[35104-35111]"
    }, {
      "left" : "testJavaCollection",
      "right" : "testJavaCollection",
      "info" : "SimpleName[46694-46712]:SimpleName[35112-35130]"
    }, {
      "left" : "Collection<T> collection",
      "right" : "Collection<T> collection",
      "info" : "SingleVariableDeclaration[46713-46737]:SingleVariableDeclaration[35131-35155]"
    }, {
      "left" : "Class<T> type",
      "right" : "Class<T> type",
      "info" : "SingleVariableDeclaration[46739-46752]:SingleVariableDeclaration[35157-35170]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[46754-46765]:SingleVariableDeclaration[35172-35183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46767-63158]:Block[35239-51399]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[46822-46990]:IfStatement[51680-51840]"
    }, {
      "left" : "!collection.isEmpty()",
      "right" : "!collection.isEmpty()",
      "info" : "PrefixExpression[46826-46847]:PrefixExpression[35298-35319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46849-46990]:Block[51700-51840]"
    }, {
      "left" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "right" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "info" : "ExpressionStatement[46863-46917]:ExpressionStatement[51714-51768]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[46930-46954]:ExpressionStatement[35581-35611]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[46942-46952]:SimpleName[35599-35609]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46967-46980]:ReturnStatement[51817-51830]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[46999-47163]:IfStatement[51849-52005]"
    }, {
      "left" : "collection.size()!=0",
      "right" : "collection.size()!=0",
      "info" : "InfixExpression[47003-47023]:InfixExpression[35481-35501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47025-47163]:Block[51868-52005]"
    }, {
      "left" : "System.err.println(name+\" initial size() failed.\");",
      "right" : "System.err.println(name+\" initial size() failed.\");",
      "info" : "ExpressionStatement[47039-47090]:ExpressionStatement[51882-51933]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[47103-47127]:ExpressionStatement[35402-35432]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[47115-47125]:SimpleName[35420-35430]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47140-47153]:ReturnStatement[51982-51995]"
    }, {
      "left" : "long sortedCount = 0;",
      "right" : "long sortedCount = 0;",
      "info" : "VariableDeclarationStatement[47173-47194]:VariableDeclarationStatement[36004-36025]"
    }, {
      "left" : "long unsortedCount = 0;",
      "right" : "long unsortedCount = 0;",
      "info" : "VariableDeclarationStatement[47203-47226]:VariableDeclarationStatement[36034-36057]"
    }, {
      "left" : "long addTime = 0L;",
      "right" : "long addTime = 0L;",
      "info" : "VariableDeclarationStatement[47236-47254]:VariableDeclarationStatement[36067-36085]"
    }, {
      "left" : "long removeTime = 0L;",
      "right" : "long removeTime = 0L;",
      "info" : "VariableDeclarationStatement[47263-47284]:VariableDeclarationStatement[36094-36115]"
    }, {
      "left" : "long beforeAddTime = 0L;",
      "right" : "long beforeAddTime = 0L;",
      "info" : "VariableDeclarationStatement[47294-47318]:VariableDeclarationStatement[36125-36149]"
    }, {
      "left" : "long afterAddTime = 0L;",
      "right" : "long afterAddTime = 0L;",
      "info" : "VariableDeclarationStatement[47327-47350]:VariableDeclarationStatement[36158-36181]"
    }, {
      "left" : "long beforeRemoveTime = 0L;",
      "right" : "long beforeRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[47359-47386]:VariableDeclarationStatement[36190-36217]"
    }, {
      "left" : "long afterRemoveTime = 0L;",
      "right" : "long afterRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[47395-47421]:VariableDeclarationStatement[36226-36252]"
    }, {
      "left" : "long memory = 0L;",
      "right" : "long memory = 0L;",
      "info" : "VariableDeclarationStatement[47431-47448]:VariableDeclarationStatement[36262-36279]"
    }, {
      "left" : "long beforeMemory = 0L;",
      "right" : "long beforeMemory = 0L;",
      "info" : "VariableDeclarationStatement[47458-47481]:VariableDeclarationStatement[36289-36312]"
    }, {
      "left" : "long afterMemory = 0L;",
      "right" : "long afterMemory = 0L;",
      "info" : "VariableDeclarationStatement[47490-47512]:VariableDeclarationStatement[36321-36343]"
    }, {
      "left" : "long lookupTime = 0L;",
      "right" : "long lookupTime = 0L;",
      "info" : "VariableDeclarationStatement[47522-47543]:VariableDeclarationStatement[36353-36374]"
    }, {
      "left" : "long beforeLookupTime = 0L;",
      "right" : "long beforeLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[47553-47580]:VariableDeclarationStatement[36384-36411]"
    }, {
      "left" : "long afterLookupTime = 0L;",
      "right" : "long afterLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[47589-47615]:VariableDeclarationStatement[36420-36446]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[47625-47665]:IfStatement[36456-36496]"
    }, {
      "left" : "System.out.println(name);",
      "right" : "System.out.println(name);",
      "info" : "ExpressionStatement[47640-47665]:ExpressionStatement[36471-36496]"
    }, {
      "left" : "if (!firstTimeThru)",
      "right" : "if (!firstTimeThru)",
      "info" : "IfStatement[47725-47785]:IfStatement[36556-36616]"
    }, {
      "left" : "testNames[testIndex] = name;",
      "right" : "testNames[testIndex] = name;",
      "info" : "ExpressionStatement[47757-47785]:ExpressionStatement[36588-36616]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[47795-47811]:ExpressionStatement[36626-36642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47820-51331]:Block[36651-40015]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[47901-47919]:ExpressionStatement[36732-36750]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[47932-47949]:ExpressionStatement[36763-36780]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[47962-47981]:ExpressionStatement[36793-36812]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[47994-48012]:ExpressionStatement[36825-36843]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[48025-48093]:IfStatement[36856-36924]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[48042-48093]:ExpressionStatement[36873-36924]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[48106-48155]:IfStatement[36937-36986]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[48121-48155]:ExpressionStatement[36952-36986]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[48168-48573]:ForStatement[36999-37351]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[48184-48185]:SimpleName[52658-52659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48210-48573]:Block[37041-37351]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[48244-48252]:SimpleName[18025-18029]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[48253-48254]:SimpleName[37077-37078]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[48273-48274]:SimpleType[49655-49656]"
    }, {
      "left" : "type",
      "right" : "type",
      "info" : "SimpleName[48302-48306]:SimpleName[35988-35992]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[48325-48362]:VariableDeclarationStatement[37097-37134]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[48379-48559]:IfStatement[37151-37337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48391-48559]:Block[37163-37337]"
    }, {
      "left" : "System.err.println(name+\" unsorted add failed.\");",
      "right" : "System.err.println(name+\" unsorted add failed.\");",
      "info" : "ExpressionStatement[48413-48462]:ExpressionStatement[37185-37234]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[48483-48507]:ExpressionStatement[49857-49887]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[48495-48505]:SimpleName[49875-49885]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48528-48541]:ReturnStatement[37306-37319]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[48586-48840]:IfStatement[37364-37618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48601-48840]:Block[37379-37618]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[48619-48652]:ExpressionStatement[37397-37430]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[48669-48709]:ExpressionStatement[37447-37487]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[48726-48826]:IfStatement[37504-37604]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[48741-48826]:ExpressionStatement[37519-37604]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[48853-49141]:IfStatement[37631-37919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48870-49141]:Block[37648-37919]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[48888-48938]:ExpressionStatement[37666-37716]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[48955-48992]:ExpressionStatement[37733-37770]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[49009-49127]:IfStatement[37787-37905]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[49024-49127]:ExpressionStatement[37802-37905]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[49155-49212]:IfStatement[37933-37990]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[49170-49212]:ExpressionStatement[37948-37990]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[49226-49248]:ExpressionStatement[38004-38026]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[49261-49282]:ExpressionStatement[38039-38060]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[49295-49347]:IfStatement[38073-38125]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[49310-49347]:ExpressionStatement[38088-38125]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[49360-49781]:ForStatement[38138-38506]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[49376-49377]:SimpleName[37015-37016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49402-49781]:Block[38180-38506]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[49436-49444]:SimpleName[22639-22643]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[49445-49446]:SimpleName[53793-53794]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[49465-49466]:SimpleType[37059-37060]"
    }, {
      "left" : "type",
      "right" : "type",
      "info" : "SimpleName[49494-49498]:SimpleName[35888-35892]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[49517-49562]:VariableDeclarationStatement[38236-38281]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[49579-49767]:IfStatement[38298-38492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49594-49767]:Block[38313-38492]"
    }, {
      "left" : "System.err.println(name+\" unsorted contains failed.\");",
      "right" : "System.err.println(name+\" unsorted contains failed.\");",
      "info" : "ExpressionStatement[49616-49670]:ExpressionStatement[38335-38389]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[49691-49715]:ExpressionStatement[37255-37285]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[49703-49713]:SimpleName[37273-37283]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[49736-49749]:ReturnStatement[38461-38474]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[49794-50080]:IfStatement[38519-38805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49809-50080]:Block[38534-38805]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[49827-49863]:ExpressionStatement[38552-38588]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[49880-49929]:ExpressionStatement[38605-38654]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[49946-50066]:IfStatement[38671-38791]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[49961-50066]:ExpressionStatement[38686-38791]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[50094-50116]:ExpressionStatement[38819-38841]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[50129-50150]:ExpressionStatement[38854-38875]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[50163-50215]:IfStatement[38888-38940]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[50178-50215]:ExpressionStatement[38903-38940]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[50228-50643]:ForStatement[38953-39315]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[50244-50245]:SimpleName[53696-53697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50270-50643]:Block[38995-39315]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[50304-50312]:SimpleName[25456-25460]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[50313-50314]:SimpleName[53757-53758]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[50333-50334]:SimpleType[38198-38199]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[50385-50427]:VariableDeclarationStatement[39051-39093]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[50444-50629]:IfStatement[39110-39301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50458-50629]:Block[39124-39301]"
    }, {
      "left" : "System.err.println(name+\" unsorted remove failed.\");",
      "right" : "System.err.println(name+\" unsorted remove failed.\");",
      "info" : "ExpressionStatement[50480-50532]:ExpressionStatement[39146-39198]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[50553-50577]:ExpressionStatement[38410-38440]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[50565-50575]:SimpleName[38428-38438]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[50598-50611]:ReturnStatement[39270-39283]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[50656-50928]:IfStatement[39328-39600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50671-50928]:Block[39343-39600]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[50689-50725]:ExpressionStatement[39361-39397]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[50742-50791]:ExpressionStatement[39414-39463]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[50808-50914]:IfStatement[39480-39586]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[50823-50914]:ExpressionStatement[39495-39586]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[50942-51127]:IfStatement[39614-39805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50969-51127]:Block[39641-39805]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[50987-51042]:ExpressionStatement[39659-39714]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[51059-51083]:ExpressionStatement[39931-39961]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[51071-51081]:SimpleName[39949-39959]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51100-51113]:ReturnStatement[39778-39791]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[51140-51321]:IfStatement[39818-40005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51166-51321]:Block[39844-40005]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[51184-51236]:ExpressionStatement[39862-39914]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[51253-51277]:ExpressionStatement[39731-39761]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[51265-51275]:SimpleName[39749-39759]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[51294-51307]:ReturnStatement[39978-39991]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[51341-51357]:ExpressionStatement[40025-40041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51366-54934]:Block[40050-43471]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[51499-51517]:ExpressionStatement[40183-40201]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[51530-51547]:ExpressionStatement[40214-40231]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[51560-51579]:ExpressionStatement[40244-40263]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[51592-51610]:ExpressionStatement[40276-40294]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[51623-51691]:IfStatement[40307-40375]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[51640-51691]:ExpressionStatement[40324-40375]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[51704-51753]:IfStatement[40388-40437]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[51719-51753]:ExpressionStatement[40403-40437]"
    }, {
      "left" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[51766-52176]:ForStatement[40450-40807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51813-52176]:Block[40497-40807]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[51847-51855]:SimpleName[31901-31905]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[51856-51857]:SimpleName[39031-39032]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[51876-51877]:SimpleType[39013-39014]"
    }, {
      "left" : "type",
      "right" : "type",
      "info" : "SimpleName[51905-51909]:SimpleName[35766-35770]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[51928-51965]:VariableDeclarationStatement[40553-40590]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[51982-52162]:IfStatement[40607-40793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51994-52162]:Block[40619-40793]"
    }, {
      "left" : "System.err.println(name+\" unsorted add failed.\");",
      "right" : "System.err.println(name+\" unsorted add failed.\");",
      "info" : "ExpressionStatement[52016-52065]:ExpressionStatement[40641-40690]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[52086-52110]:ExpressionStatement[39219-39249]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[52098-52108]:SimpleName[39237-39247]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[52131-52144]:ReturnStatement[40762-40775]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[52189-52443]:IfStatement[40820-41074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52204-52443]:Block[40835-41074]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[52222-52255]:ExpressionStatement[40853-40886]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[52272-52312]:ExpressionStatement[40903-40943]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[52329-52429]:IfStatement[40960-41060]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[52344-52429]:ExpressionStatement[40975-41060]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[52456-52744]:IfStatement[41087-41375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52473-52744]:Block[41104-41375]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[52491-52541]:ExpressionStatement[41122-41172]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[52558-52595]:ExpressionStatement[41189-41226]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[52612-52730]:IfStatement[41243-41361]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[52627-52730]:ExpressionStatement[41258-41361]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[52758-52815]:IfStatement[41389-41446]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[52773-52815]:ExpressionStatement[41404-41446]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[52829-52851]:ExpressionStatement[41460-41482]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[52864-52885]:ExpressionStatement[41495-41516]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[52898-52950]:IfStatement[41529-41581]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[52913-52950]:ExpressionStatement[41544-41581]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[52963-53384]:ForStatement[41594-41962]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[52979-52980]:SimpleName[55468-55469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53005-53384]:Block[41636-41962]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[53039-53047]:SimpleName[34744-34748]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[53048-53049]:SimpleName[55529-55530]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[53068-53069]:SimpleType[40515-40516]"
    }, {
      "left" : "type",
      "right" : "type",
      "info" : "SimpleName[53097-53101]:SimpleName[35696-35700]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[53120-53165]:VariableDeclarationStatement[41692-41737]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[53182-53370]:IfStatement[41754-41948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53197-53370]:Block[41769-41948]"
    }, {
      "left" : "System.err.println(name+\" unsorted contains failed.\");",
      "right" : "System.err.println(name+\" unsorted contains failed.\");",
      "info" : "ExpressionStatement[53219-53273]:ExpressionStatement[41791-41845]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[53294-53318]:ExpressionStatement[40711-40741]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[53306-53316]:SimpleName[40729-40739]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[53339-53352]:ReturnStatement[41917-41930]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[53397-53683]:IfStatement[41975-42261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53412-53683]:Block[41990-42261]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[53430-53466]:ExpressionStatement[42008-42044]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[53483-53532]:ExpressionStatement[42061-42110]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[53549-53669]:IfStatement[42127-42247]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[53564-53669]:ExpressionStatement[42142-42247]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[53697-53719]:ExpressionStatement[42275-42297]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[53732-53753]:ExpressionStatement[42310-42331]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[53766-53818]:IfStatement[42344-42396]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[53781-53818]:ExpressionStatement[42359-42396]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < unsorted.length; i++)",
      "info" : "ForStatement[53831-54246]:ForStatement[42409-42771]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[53847-53848]:SimpleName[41610-41611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53873-54246]:Block[42451-42771]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[53907-53915]:SimpleName[33582-33586]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[53916-53917]:SimpleName[56858-56859]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[53936-53937]:SimpleType[41654-41655]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[53988-54030]:VariableDeclarationStatement[42507-42549]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[54047-54232]:IfStatement[42566-42757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54061-54232]:Block[42580-42757]"
    }, {
      "left" : "System.err.println(name+\" unsorted remove failed.\");",
      "right" : "System.err.println(name+\" unsorted remove failed.\");",
      "info" : "ExpressionStatement[54083-54135]:ExpressionStatement[42602-42654]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[54156-54180]:ExpressionStatement[41866-41896]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[54168-54178]:SimpleName[41884-41894]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54201-54214]:ReturnStatement[42726-42739]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[54259-54531]:IfStatement[42784-43056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54274-54531]:Block[42799-43056]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[54292-54328]:ExpressionStatement[42817-42853]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[54345-54394]:ExpressionStatement[42870-42919]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[54411-54517]:IfStatement[42936-43042]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[54426-54517]:ExpressionStatement[42951-43042]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[54545-54730]:IfStatement[56087-56264]"
    }, {
      "left" : "!collection.isEmpty()",
      "right" : "!collection.isEmpty()",
      "info" : "PrefixExpression[54549-54570]:PrefixExpression[43074-43095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54572-54730]:Block[56107-56264]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[54590-54645]:ExpressionStatement[56125-56180]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[54662-54686]:ExpressionStatement[43387-43417]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[54674-54684]:SimpleName[43405-43415]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54703-54716]:ReturnStatement[56237-56250]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[54743-54924]:IfStatement[56277-56450]"
    }, {
      "left" : "collection.size()!=0",
      "right" : "collection.size()!=0",
      "info" : "InfixExpression[54747-54767]:InfixExpression[43278-43298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54769-54924]:Block[56296-56450]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[54787-54839]:ExpressionStatement[56314-56366]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[54856-54880]:ExpressionStatement[43187-43217]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[54868-54878]:SimpleName[43205-43215]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[54897-54910]:ReturnStatement[56423-56436]"
    }, {
      "left" : "long addSortedTime = 0L;",
      "right" : "long addSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[54944-54968]:VariableDeclarationStatement[43481-43505]"
    }, {
      "left" : "long removeSortedTime = 0L;",
      "right" : "long removeSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[54977-55004]:VariableDeclarationStatement[43514-43541]"
    }, {
      "left" : "long beforeAddSortedTime = 0L;",
      "right" : "long beforeAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[55014-55044]:VariableDeclarationStatement[43551-43581]"
    }, {
      "left" : "long afterAddSortedTime = 0L;",
      "right" : "long afterAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[55053-55082]:VariableDeclarationStatement[43590-43619]"
    }, {
      "left" : "long beforeRemoveSortedTime = 0L;",
      "right" : "long beforeRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[55092-55125]:VariableDeclarationStatement[43629-43662]"
    }, {
      "left" : "long afterRemoveSortedTime = 0L;",
      "right" : "long afterRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[55134-55166]:VariableDeclarationStatement[43671-43703]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[55176-55190]:ExpressionStatement[43713-43727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55199-58772]:Block[43736-47160]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[55278-55296]:ExpressionStatement[43815-43833]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[55309-55326]:ExpressionStatement[43846-43863]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[55339-55364]:ExpressionStatement[43876-43901]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[55377-55401]:ExpressionStatement[43914-43938]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[55414-55482]:IfStatement[43951-44019]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[55431-55482]:ExpressionStatement[43968-44019]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[55495-55550]:IfStatement[44032-44087]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[55510-55550]:ExpressionStatement[44047-44087]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[55563-55964]:ForStatement[44100-44446]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[55579-55580]:SimpleName[42425-42426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55603-55964]:Block[44140-44446]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[55637-55645]:SimpleName[30741-30745]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[55646-55647]:SimpleName[58704-58705]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[55666-55667]:SimpleType[42469-42470]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[55718-55755]:VariableDeclarationStatement[44194-44231]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[55772-55950]:IfStatement[44248-44432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55784-55950]:Block[44260-44432]"
    }, {
      "left" : "System.err.println(name+\" sorted add failed.\");",
      "right" : "System.err.println(name+\" sorted add failed.\");",
      "info" : "ExpressionStatement[55806-55853]:ExpressionStatement[44282-44329]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[55874-55898]:ExpressionStatement[42675-42705]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[55886-55896]:SimpleName[42693-42703]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[55919-55932]:ReturnStatement[44401-44414]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[55977-56257]:IfStatement[44459-44739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55992-56257]:Block[44474-44739]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[56010-56049]:ExpressionStatement[44492-44531]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[56066-56124]:ExpressionStatement[44548-44606]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[56141-56243]:IfStatement[44623-44725]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[56156-56243]:ExpressionStatement[44638-44725]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[56270-56556]:IfStatement[44752-45038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56287-56556]:Block[44769-45038]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[56305-56355]:ExpressionStatement[44787-44837]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[56372-56409]:ExpressionStatement[44854-44891]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[56426-56542]:IfStatement[44908-45024]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[56441-56542]:ExpressionStatement[44923-45024]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[56570-56627]:IfStatement[45052-45109]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[56585-56627]:ExpressionStatement[45067-45109]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[56641-56663]:ExpressionStatement[45123-45145]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[56676-56697]:ExpressionStatement[45158-45179]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[56710-56762]:IfStatement[45192-45244]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[56725-56762]:ExpressionStatement[45207-45244]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[56775-57190]:ForStatement[45257-45619]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[56791-56792]:SimpleName[44116-44117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56815-57190]:Block[45297-45619]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[56849-56855]:SimpleName[29566-29570]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[56856-56857]:SimpleName[44174-44175]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[56876-56877]:SimpleType[44158-44159]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[56928-56973]:VariableDeclarationStatement[45351-45396]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[56990-57176]:IfStatement[45413-45605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57005-57176]:Block[45428-45605]"
    }, {
      "left" : "System.err.println(name+\" sorted contains failed.\");",
      "right" : "System.err.println(name+\" sorted contains failed.\");",
      "info" : "ExpressionStatement[57027-57079]:ExpressionStatement[45450-45502]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[57100-57124]:ExpressionStatement[44350-44380]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[57112-57122]:SimpleName[44368-44378]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[57145-57158]:ReturnStatement[45574-45587]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[57203-57487]:IfStatement[45632-45916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57218-57487]:Block[45647-45916]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[57236-57272]:ExpressionStatement[45665-45701]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[57289-57338]:ExpressionStatement[45718-45767]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[57355-57473]:IfStatement[45784-45902]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[57370-57473]:ExpressionStatement[45799-45902]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[57501-57529]:ExpressionStatement[45930-45958]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[57542-57569]:ExpressionStatement[45971-45998]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[57582-57640]:IfStatement[46011-46069]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[57597-57640]:ExpressionStatement[46026-46069]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[57653-58062]:ForStatement[46082-46438]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[57669-57670]:SimpleName[45273-45274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57693-58062]:Block[46122-46438]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[57727-57733]:SimpleName[26043-26047]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[57734-57735]:SimpleName[60299-60300]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[57754-57755]:SimpleType[45315-45316]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[57806-57848]:VariableDeclarationStatement[46176-46218]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[57865-58048]:IfStatement[46235-46424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57879-58048]:Block[46249-46424]"
    }, {
      "left" : "System.err.println(name+\" sorted remove failed.\");",
      "right" : "System.err.println(name+\" sorted remove failed.\");",
      "info" : "ExpressionStatement[57901-57951]:ExpressionStatement[46271-46321]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[57972-57996]:ExpressionStatement[45523-45553]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[57984-57994]:SimpleName[45541-45551]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58017-58030]:ReturnStatement[46393-46406]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[58075-58373]:IfStatement[46451-46749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58090-58373]:Block[46466-46749]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[58108-58150]:ExpressionStatement[46484-46526]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[58167-58234]:ExpressionStatement[46543-46610]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[58251-58359]:IfStatement[46627-46735]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[58266-58359]:ExpressionStatement[46642-46735]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[58387-58570]:IfStatement[46763-46952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58414-58570]:Block[46790-46952]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[58432-58485]:ExpressionStatement[46808-46861]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[58502-58526]:ExpressionStatement[47076-47106]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[58514-58524]:SimpleName[47094-47104]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58543-58556]:ReturnStatement[46925-46938]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[58583-58762]:IfStatement[46965-47150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58609-58762]:Block[46991-47150]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[58627-58677]:ExpressionStatement[47009-47059]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[58694-58718]:ExpressionStatement[46878-46908]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[58706-58716]:SimpleName[46896-46906]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[58735-58748]:ReturnStatement[47123-47136]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[58782-58796]:ExpressionStatement[47170-47184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58805-62434]:Block[47193-50675]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[58937-58955]:ExpressionStatement[47325-47343]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[58968-58985]:ExpressionStatement[47356-47373]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[58998-59023]:ExpressionStatement[47386-47411]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[59036-59060]:ExpressionStatement[47424-47448]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[59073-59141]:IfStatement[47461-47529]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[59090-59141]:ExpressionStatement[47478-47529]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[59154-59209]:IfStatement[47542-47597]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[59169-59209]:ExpressionStatement[47557-47597]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[59222-59621]:ForStatement[47610-47956]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[59238-59239]:SimpleName[60208-60209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59262-59621]:Block[47650-47956]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[59296-59302]:SimpleName[23741-23745]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[59303-59304]:SimpleName[60265-60266]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[59323-59324]:SimpleType[46140-46141]"
    }, {
      "left" : "boolean added = collection.add(item);",
      "right" : "boolean added = collection.add(item);",
      "info" : "VariableDeclarationStatement[59375-59412]:VariableDeclarationStatement[47704-47741]"
    }, {
      "left" : "if (!added)",
      "right" : "if (!added)",
      "info" : "IfStatement[59429-59607]:IfStatement[47758-47942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59441-59607]:Block[47770-47942]"
    }, {
      "left" : "System.err.println(name+\" sorted add failed.\");",
      "right" : "System.err.println(name+\" sorted add failed.\");",
      "info" : "ExpressionStatement[59463-59510]:ExpressionStatement[47792-47839]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[59531-59555]:ExpressionStatement[46342-46372]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[59543-59553]:SimpleName[46360-46370]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[59576-59589]:ReturnStatement[47911-47924]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[59634-59914]:IfStatement[47969-48249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59649-59914]:Block[47984-48249]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[59667-59706]:ExpressionStatement[48002-48041]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[59723-59781]:ExpressionStatement[48058-48116]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[59798-59900]:IfStatement[48133-48235]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[59813-59900]:ExpressionStatement[48148-48235]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[59927-60213]:IfStatement[48262-48548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59944-60213]:Block[48279-48548]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[59962-60012]:ExpressionStatement[48297-48347]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[60029-60066]:ExpressionStatement[48364-48401]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[60083-60199]:IfStatement[48418-48534]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[60098-60199]:ExpressionStatement[48433-48534]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[60227-60284]:IfStatement[48562-48619]"
    }, {
      "left" : "System.out.println(collection.toString());",
      "right" : "System.out.println(collection.toString());",
      "info" : "ExpressionStatement[60242-60284]:ExpressionStatement[48577-48619]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[60298-60320]:ExpressionStatement[48633-48655]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[60333-60354]:ExpressionStatement[48668-48689]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[60367-60419]:IfStatement[48702-48754]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[60382-60419]:ExpressionStatement[48717-48754]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < sorted.length; i++)",
      "info" : "ForStatement[60432-60847]:ForStatement[48767-49129]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[60448-60449]:SimpleName[62079-62080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60472-60847]:Block[48807-49129]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[60506-60512]:SimpleName[17476-17480]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[60513-60514]:SimpleName[47684-47685]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[60533-60534]:SimpleType[47668-47669]"
    }, {
      "left" : "boolean contains = collection.contains(item);",
      "right" : "boolean contains = collection.contains(item);",
      "info" : "VariableDeclarationStatement[60585-60630]:VariableDeclarationStatement[48861-48906]"
    }, {
      "left" : "if (!contains)",
      "right" : "if (!contains)",
      "info" : "IfStatement[60647-60833]:IfStatement[48923-49115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60662-60833]:Block[48938-49115]"
    }, {
      "left" : "System.err.println(name+\" sorted contains failed.\");",
      "right" : "System.err.println(name+\" sorted contains failed.\");",
      "info" : "ExpressionStatement[60684-60736]:ExpressionStatement[48960-49012]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[60757-60781]:ExpressionStatement[47860-47890]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[60769-60779]:SimpleName[47878-47888]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[60802-60815]:ReturnStatement[49084-49097]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[60860-61144]:IfStatement[49142-49426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60875-61144]:Block[49157-49426]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[60893-60929]:ExpressionStatement[49175-49211]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[60946-60995]:ExpressionStatement[49228-49277]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[61012-61130]:IfStatement[49294-49412]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[61027-61130]:ExpressionStatement[49309-49412]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[61158-61186]:ExpressionStatement[49440-49468]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[61199-61226]:ExpressionStatement[49481-49508]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[61239-61297]:IfStatement[49521-49579]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[61254-61297]:ExpressionStatement[49536-49579]"
    }, {
      "left" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[61310-61724]:ForStatement[49592-49953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61355-61724]:Block[49637-49953]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[61389-61395]:SimpleName[16274-16278]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[61396-61397]:SimpleName[62136-62137]"
    }, {
      "left" : "T",
      "right" : "T",
      "info" : "SimpleType[61416-61417]:SimpleType[48825-48826]"
    }, {
      "left" : "boolean removed = collection.remove(item);",
      "right" : "boolean removed = collection.remove(item);",
      "info" : "VariableDeclarationStatement[61468-61510]:VariableDeclarationStatement[49691-49733]"
    }, {
      "left" : "if (!removed)",
      "right" : "if (!removed)",
      "info" : "IfStatement[61527-61710]:IfStatement[49750-49939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61541-61710]:Block[49764-49939]"
    }, {
      "left" : "System.err.println(name+\" sorted remove failed.\");",
      "right" : "System.err.println(name+\" sorted remove failed.\");",
      "info" : "ExpressionStatement[61563-61613]:ExpressionStatement[49786-49836]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[61634-61658]:ExpressionStatement[49033-49063]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[61646-61656]:SimpleName[49051-49061]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[61679-61692]:ReturnStatement[49908-49921]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[61737-62035]:IfStatement[49966-50264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61752-62035]:Block[49981-50264]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[61770-61812]:ExpressionStatement[49999-50041]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[61829-61896]:ExpressionStatement[50058-50125]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[61913-62021]:IfStatement[50142-50250]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[61928-62021]:ExpressionStatement[50157-50250]"
    }, {
      "left" : "if (!collection.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[62049-62232]:IfStatement[62703-62878]"
    }, {
      "left" : "!collection.isEmpty()",
      "right" : "!collection.isEmpty()",
      "info" : "PrefixExpression[62053-62074]:PrefixExpression[50282-50303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62076-62232]:Block[62723-62878]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[62094-62147]:ExpressionStatement[62741-62794]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[62164-62188]:ExpressionStatement[50591-50621]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[62176-62186]:SimpleName[50609-50619]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62205-62218]:ReturnStatement[62851-62864]"
    }, {
      "left" : "if (collection.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[62245-62424]:IfStatement[62891-63062]"
    }, {
      "left" : "collection.size()!=0",
      "right" : "collection.size()!=0",
      "info" : "InfixExpression[62249-62269]:InfixExpression[50484-50504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62271-62424]:Block[62910-63062]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[62289-62339]:ExpressionStatement[62928-62978]"
    }, {
      "left" : "handleError(collection);",
      "right" : "handleError(input,collection);",
      "info" : "ExpressionStatement[62356-62380]:ExpressionStatement[50393-50423]"
    }, {
      "left" : "collection",
      "right" : "collection",
      "info" : "SimpleName[62368-62378]:SimpleName[50411-50421]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[62397-62410]:ReturnStatement[63035-63048]"
    }, {
      "left" : "if (!firstTimeThru)",
      "right" : "if (!firstTimeThru)",
      "info" : "IfStatement[62494-63084]:IfStatement[50735-51325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62514-63084]:Block[50755-51325]"
    }, {
      "left" : "if (testResults[testIndex] == null)",
      "right" : "if (testResults[testIndex] == null)",
      "info" : "IfStatement[62528-62618]:IfStatement[50769-50859]"
    }, {
      "left" : "testResults[testIndex] = new long[6];",
      "right" : "testResults[testIndex] = new long[6];",
      "info" : "ExpressionStatement[62581-62618]:ExpressionStatement[50822-50859]"
    }, {
      "left" : "testResults[testIndex][0] += (addTime / unsortedCount);",
      "right" : "testResults[testIndex][0] += (addTime / unsortedCount);",
      "info" : "ExpressionStatement[62631-62686]:ExpressionStatement[50872-50927]"
    }, {
      "left" : "testResults[testIndex][1] += (removeTime / unsortedCount);",
      "right" : "testResults[testIndex][1] += (removeTime / unsortedCount);",
      "info" : "ExpressionStatement[62699-62757]:ExpressionStatement[50940-50998]"
    }, {
      "left" : "testResults[testIndex][2] += (addSortedTime / sortedCount);",
      "right" : "testResults[testIndex][2] += (addSortedTime / sortedCount);",
      "info" : "ExpressionStatement[62770-62829]:ExpressionStatement[51011-51070]"
    }, {
      "left" : "testResults[testIndex][3] += (removeSortedTime / sortedCount);",
      "right" : "testResults[testIndex][3] += (removeSortedTime / sortedCount);",
      "info" : "ExpressionStatement[62842-62904]:ExpressionStatement[51083-51145]"
    }, {
      "left" : "testResults[testIndex][4] += (lookupTime / (unsortedCount + sortedCount));",
      "right" : "testResults[testIndex][4] += (lookupTime / (unsortedCount + sortedCount));",
      "info" : "ExpressionStatement[62917-62991]:ExpressionStatement[51158-51232]"
    }, {
      "left" : "testResults[testIndex][5] += (memory / (unsortedCount + sortedCount));",
      "right" : "testResults[testIndex][5] += (memory / (unsortedCount + sortedCount));",
      "info" : "ExpressionStatement[63004-63074]:ExpressionStatement[51245-51315]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[63094-63130]:IfStatement[51335-51371]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[63109-63130]:ExpressionStatement[51350-51371]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[63140-63152]:ReturnStatement[51381-51393]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[63164-63194]:SingleMemberAnnotation[51405-51435]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[63199-63206]:Modifier[51440-51447]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[63207-63213]:Modifier[51448-51454]"
    }, {
      "left" : "K extends Comparable<K>",
      "right" : "K extends Comparable<K>",
      "info" : "TypeParameter[63215-63238]:TypeParameter[51456-51479]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "TypeParameter[63239-63240]:TypeParameter[51480-51481]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[63242-63249]:PrimitiveType[51483-51490]"
    }, {
      "left" : "testJavaMap",
      "right" : "testJavaMap",
      "info" : "SimpleName[63250-63261]:SimpleName[51491-51502]"
    }, {
      "left" : "java.util.Map<K,V> map",
      "right" : "java.util.Map<K,V> map",
      "info" : "SingleVariableDeclaration[63262-63284]:SingleVariableDeclaration[51503-51525]"
    }, {
      "left" : "Class<K> keyType",
      "right" : "Class<K> keyType",
      "info" : "SingleVariableDeclaration[63286-63302]:SingleVariableDeclaration[51527-51543]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[63304-63315]:SingleVariableDeclaration[51565-51576]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63317-80064]:Block[51632-67024]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[63365-63519]:IfStatement[35294-35468]"
    }, {
      "left" : "!map.isEmpty()",
      "right" : "!map.isEmpty()",
      "info" : "PrefixExpression[63369-63383]:PrefixExpression[51684-51698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63385-63519]:Block[35321-35468]"
    }, {
      "left" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "right" : "System.err.println(name+\" initial isEmpty() failed.\");",
      "info" : "ExpressionStatement[63399-63453]:ExpressionStatement[35335-35389]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[63466-63483]:ExpressionStatement[51946-51969]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[63478-63481]:SimpleName[51964-51967]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63496-63509]:ReturnStatement[35445-35458]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[63528-63678]:IfStatement[35477-35647]"
    }, {
      "left" : "map.size()!=0",
      "right" : "map.size()!=0",
      "info" : "InfixExpression[63532-63545]:InfixExpression[51853-51866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63547-63678]:Block[35503-35647]"
    }, {
      "left" : "System.err.println(name+\" initial size() failed.\");",
      "right" : "System.err.println(name+\" initial size() failed.\");",
      "info" : "ExpressionStatement[63561-63612]:ExpressionStatement[35517-35568]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[63625-63642]:ExpressionStatement[51781-51804]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[63637-63640]:SimpleName[51799-51802]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[63655-63668]:ReturnStatement[35624-35637]"
    }, {
      "left" : "long sortedCount = 0;",
      "right" : "long sortedCount = 0;",
      "info" : "VariableDeclarationStatement[63688-63709]:VariableDeclarationStatement[52752-52773]"
    }, {
      "left" : "long unsortedCount = 0;",
      "right" : "long unsortedCount = 0;",
      "info" : "VariableDeclarationStatement[63718-63741]:VariableDeclarationStatement[52782-52805]"
    }, {
      "left" : "long addTime = 0L;",
      "right" : "long addTime = 0L;",
      "info" : "VariableDeclarationStatement[63751-63769]:VariableDeclarationStatement[52815-52833]"
    }, {
      "left" : "long removeTime = 0L;",
      "right" : "long removeTime = 0L;",
      "info" : "VariableDeclarationStatement[63778-63799]:VariableDeclarationStatement[52842-52863]"
    }, {
      "left" : "long beforeAddTime = 0L;",
      "right" : "long beforeAddTime = 0L;",
      "info" : "VariableDeclarationStatement[63809-63833]:VariableDeclarationStatement[52873-52897]"
    }, {
      "left" : "long afterAddTime = 0L;",
      "right" : "long afterAddTime = 0L;",
      "info" : "VariableDeclarationStatement[63842-63865]:VariableDeclarationStatement[52906-52929]"
    }, {
      "left" : "long beforeRemoveTime = 0L;",
      "right" : "long beforeRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[63874-63901]:VariableDeclarationStatement[52938-52965]"
    }, {
      "left" : "long afterRemoveTime = 0L;",
      "right" : "long afterRemoveTime = 0L;",
      "info" : "VariableDeclarationStatement[63910-63936]:VariableDeclarationStatement[52974-53000]"
    }, {
      "left" : "long memory = 0L;",
      "right" : "long memory = 0L;",
      "info" : "VariableDeclarationStatement[63946-63963]:VariableDeclarationStatement[53010-53027]"
    }, {
      "left" : "long beforeMemory = 0L;",
      "right" : "long beforeMemory = 0L;",
      "info" : "VariableDeclarationStatement[63973-63996]:VariableDeclarationStatement[53037-53060]"
    }, {
      "left" : "long afterMemory = 0L;",
      "right" : "long afterMemory = 0L;",
      "info" : "VariableDeclarationStatement[64005-64027]:VariableDeclarationStatement[53069-53091]"
    }, {
      "left" : "long lookupTime = 0L;",
      "right" : "long lookupTime = 0L;",
      "info" : "VariableDeclarationStatement[64037-64058]:VariableDeclarationStatement[53101-53122]"
    }, {
      "left" : "long beforeLookupTime = 0L;",
      "right" : "long beforeLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[64068-64095]:VariableDeclarationStatement[53132-53159]"
    }, {
      "left" : "long afterLookupTime = 0L;",
      "right" : "long afterLookupTime = 0L;",
      "info" : "VariableDeclarationStatement[64104-64130]:VariableDeclarationStatement[53168-53194]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[64140-64180]:IfStatement[53204-53244]"
    }, {
      "left" : "System.out.println(name);",
      "right" : "System.out.println(name);",
      "info" : "ExpressionStatement[64155-64180]:ExpressionStatement[53219-53244]"
    }, {
      "left" : "if (!firstTimeThru)",
      "right" : "if (!firstTimeThru)",
      "info" : "IfStatement[64240-64300]:IfStatement[53304-53364]"
    }, {
      "left" : "testNames[testIndex] = name;",
      "right" : "testNames[testIndex] = name;",
      "info" : "ExpressionStatement[64272-64300]:ExpressionStatement[53336-53364]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[64310-64326]:ExpressionStatement[53374-53390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64335-67921]:Block[53399-56460]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[64349-64367]:ExpressionStatement[53413-53431]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[64380-64397]:ExpressionStatement[53444-53461]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[64410-64429]:ExpressionStatement[53474-53493]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[64442-64460]:ExpressionStatement[53506-53524]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[64473-64541]:IfStatement[53537-53605]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[64490-64541]:ExpressionStatement[53554-53605]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[64554-64603]:IfStatement[53618-53667]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[64569-64603]:ExpressionStatement[53633-53667]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[64621-64630]:VariableDeclarationExpression[53685-53694]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[64632-64633]:SimpleName[52545-52546]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[64653-64656]:PostfixExpression[53718-53721]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[64691-64699]:SimpleName[19902-19906]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[64700-64701]:SimpleName[41672-41673]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[64720-64721]:SimpleType[65349-65350]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[64748-64749]:SimpleType[53777-53778]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[64805-64818]:TypeLiteral[31517-31530]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[64850-64855]:METHOD_INVOCATION_RECEIVER[35963-35968]"
    }, {
      "left" : "keyType",
      "right" : "keyType",
      "info" : "SimpleName[64869-64876]:SimpleName[52408-52415]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[64906-64911]:METHOD_INVOCATION_RECEIVER[35861-35866]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[64925-64937]:TypeLiteral[33193-33205]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[64992-65004]:TypeLiteral[32637-32649]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[65111-65124]:TypeLiteral[34330-34343]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[65161-65175]:ExpressionStatement[53813-53827]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[65202-65456]:IfStatement[53854-54108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65217-65456]:Block[53869-54108]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[65235-65268]:ExpressionStatement[53887-53920]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[65285-65325]:ExpressionStatement[53937-53977]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[65342-65442]:IfStatement[53994-54094]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[65357-65442]:ExpressionStatement[54009-54094]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[65469-65757]:IfStatement[54121-54409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65486-65757]:Block[54138-54409]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[65504-65554]:ExpressionStatement[54156-54206]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[65571-65608]:ExpressionStatement[54223-54260]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[65625-65743]:IfStatement[54277-54395]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[65640-65743]:ExpressionStatement[54292-54395]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[65771-65821]:VariableDeclarationStatement[54423-54473]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[65834-65881]:VariableDeclarationStatement[54486-54533]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[65894-65929]:VariableDeclarationStatement[54546-54581]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[65942-66137]:IfStatement[54594-54789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65975-66137]:Block[54627-54789]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[65993-66093]:ExpressionStatement[54645-54745]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[66110-66123]:ReturnStatement[54762-54775]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[66151-66201]:IfStatement[54803-54853]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[66166-66201]:ExpressionStatement[54818-54853]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[66215-66237]:ExpressionStatement[54867-54889]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[66250-66271]:ExpressionStatement[54902-54923]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[66284-66336]:IfStatement[54936-54988]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[66299-66336]:ExpressionStatement[54951-54988]"
    }, {
      "left" : "for (Integer item : unsorted)",
      "right" : "for (K k : kUnsorted)",
      "info" : "EnhancedForStatement[66349-66485]:EnhancedForStatement[55001-55074]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[66369-66377]:SimpleName[11990-11994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66379-66485]:Block[55023-55074]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[66397-66398]:SimpleType[55006-55007]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[66452-66471]:ExpressionStatement[55041-55060]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[66498-66784]:IfStatement[55087-55373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66513-66784]:Block[55102-55373]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[66531-66567]:ExpressionStatement[55120-55156]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[66584-66633]:ExpressionStatement[55173-55222]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[66650-66770]:IfStatement[55239-55359]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[66665-66770]:ExpressionStatement[55254-55359]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[66798-66850]:IfStatement[55387-55439]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[66813-66850]:ExpressionStatement[55402-55439]"
    }, {
      "left" : "for (int i = 0; i < unsorted.length; i++)",
      "right" : "for (int i = 0; i < kUnsorted.length; i++)",
      "info" : "ForStatement[66863-67261]:ForStatement[55452-55788]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[66879-66880]:SimpleName[38154-38155]"
    }, {
      "left" : "unsorted.length",
      "right" : "kUnsorted.length",
      "info" : "QualifiedName[66883-66898]:QualifiedName[55472-55488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66905-67261]:Block[55495-55788]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[66938-66946]:SimpleName[27814-27818]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[66947-66948]:SimpleName[38216-38217]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[66967-66968]:SimpleType[53741-53742]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[67022-67046]:ExpressionStatement[55549-55573]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[67063-67230]:IfStatement[55590-55757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67082-67230]:Block[55609-55757]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[67104-67178]:ExpressionStatement[55631-55705]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67199-67212]:ReturnStatement[55726-55739]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[67274-67546]:IfStatement[55801-56073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67289-67546]:Block[55816-56073]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[67307-67343]:ExpressionStatement[55834-55870]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[67360-67409]:ExpressionStatement[55887-55936]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[67426-67532]:IfStatement[55953-56059]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[67441-67532]:ExpressionStatement[55968-56059]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[67560-67731]:IfStatement[59245-59422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67580-67731]:Block[59265-59422]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[67598-67653]:ExpressionStatement[59283-59338]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[67670-67687]:ExpressionStatement[56383-56406]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[67682-67685]:SimpleName[56401-56404]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67704-67717]:ReturnStatement[59395-59408]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[67744-67911]:IfStatement[59435-59608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67763-67911]:Block[59454-59608]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[67781-67833]:ExpressionStatement[59472-59524]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[67850-67867]:ExpressionStatement[56197-56220]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[67862-67865]:SimpleName[56215-56218]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67884-67897]:ReturnStatement[59581-59594]"
    }, {
      "left" : "unsortedCount++;",
      "right" : "unsortedCount++;",
      "info" : "ExpressionStatement[67931-67947]:ExpressionStatement[56470-56486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67956-71604]:Block[56495-59618]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[67970-67988]:ExpressionStatement[56509-56527]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[68001-68018]:ExpressionStatement[56540-56557]"
    }, {
      "left" : "beforeAddTime = 0L;",
      "right" : "beforeAddTime = 0L;",
      "info" : "ExpressionStatement[68031-68050]:ExpressionStatement[56570-56589]"
    }, {
      "left" : "afterAddTime = 0L;",
      "right" : "afterAddTime = 0L;",
      "info" : "ExpressionStatement[68063-68081]:ExpressionStatement[56602-56620]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[68094-68162]:IfStatement[56633-56701]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[68111-68162]:ExpressionStatement[56650-56701]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[68175-68224]:IfStatement[56714-56763]"
    }, {
      "left" : "beforeAddTime = System.nanoTime();",
      "right" : "beforeAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[68190-68224]:ExpressionStatement[56729-56763]"
    }, {
      "left" : "int i = unsorted.length - 1",
      "right" : "int i = kUnsorted.length - 1",
      "info" : "VariableDeclarationExpression[68242-68269]:VariableDeclarationExpression[58627-58655]"
    }, {
      "left" : "unsorted.length",
      "right" : "kUnsorted.length",
      "info" : "QualifiedName[68250-68265]:QualifiedName[58635-58651]"
    }, {
      "left" : "i >= 0",
      "right" : "i >= 0",
      "info" : "InfixExpression[68271-68277]:InfixExpression[56811-56817]"
    }, {
      "left" : "i--",
      "right" : "i--",
      "info" : "PostfixExpression[68279-68282]:PostfixExpression[56819-56822]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[68317-68325]:SimpleName[32473-32477]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[68326-68327]:SimpleName[40533-40534]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[68346-68347]:SimpleType[55513-55514]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[68374-68375]:SimpleType[56878-56879]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[68431-68444]:TypeLiteral[32083-32096]"
    }, {
      "left" : "k = (K)Utils.parseT(item, keyType);",
      "right" : "kSorted[i] = Utils.parseT(_sorted[i], keyType);",
      "info" : "ExpressionStatement[68469-68504]:ExpressionStatement[52475-52522]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[68476-68481]:METHOD_INVOCATION_RECEIVER[52488-52493]"
    }, {
      "left" : "keyType",
      "right" : "keyType",
      "info" : "SimpleName[68495-68502]:SimpleName[52513-52520]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[68532-68537]:METHOD_INVOCATION_RECEIVER[52381-52386]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[68551-68563]:TypeLiteral[33746-33758]"
    }, {
      "left" : "String.class",
      "right" : "String.class",
      "info" : "TypeLiteral[68618-68630]:TypeLiteral[34908-34920]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[68737-68750]:TypeLiteral[34921-34934]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[68787-68801]:ExpressionStatement[56914-56928]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[68828-69082]:IfStatement[56955-57209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68843-69082]:Block[56970-57209]"
    }, {
      "left" : "afterAddTime = System.nanoTime();",
      "right" : "afterAddTime = System.nanoTime();",
      "info" : "ExpressionStatement[68861-68894]:ExpressionStatement[56988-57021]"
    }, {
      "left" : "addTime += afterAddTime - beforeAddTime;",
      "right" : "addTime += afterAddTime - beforeAddTime;",
      "info" : "ExpressionStatement[68911-68951]:ExpressionStatement[57038-57078]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[68968-69068]:IfStatement[57095-57195]"
    }, {
      "left" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted add time = \" + (addTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[68983-69068]:ExpressionStatement[57110-57195]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[69095-69383]:IfStatement[57222-57510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69112-69383]:Block[57239-57510]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[69130-69180]:ExpressionStatement[57257-57307]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[69197-69234]:ExpressionStatement[57324-57361]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[69251-69369]:IfStatement[57378-57496]"
    }, {
      "left" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" unsorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[69266-69369]:ExpressionStatement[57393-57496]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[69397-69447]:VariableDeclarationStatement[57524-57574]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[69460-69507]:VariableDeclarationStatement[57587-57634]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[69520-69555]:VariableDeclarationStatement[57647-57682]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[69568-69763]:IfStatement[57695-57890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69601-69763]:Block[57728-57890]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[69619-69719]:ExpressionStatement[57746-57846]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[69736-69749]:ReturnStatement[57863-57876]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[69777-69827]:IfStatement[57904-57954]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[69792-69827]:ExpressionStatement[57919-57954]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[69841-69863]:ExpressionStatement[57968-57990]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[69876-69897]:ExpressionStatement[58003-58024]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[69910-69962]:IfStatement[58037-58089]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[69925-69962]:ExpressionStatement[58052-58089]"
    }, {
      "left" : "for (Integer item : unsorted)",
      "right" : "for (K k : kUnsorted)",
      "info" : "EnhancedForStatement[69975-70111]:EnhancedForStatement[58102-58175]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[69995-70003]:SimpleName[12543-12547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70005-70111]:Block[58124-58175]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[70023-70024]:SimpleType[58107-58108]"
    }, {
      "left" : "keyType",
      "right" : "keyType",
      "info" : "SimpleName[70052-70059]:SimpleName[52055-52062]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[70078-70097]:ExpressionStatement[58142-58161]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[70124-70410]:IfStatement[58188-58474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70139-70410]:Block[58203-58474]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[70157-70193]:ExpressionStatement[58221-58257]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[70210-70259]:ExpressionStatement[58274-58323]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[70276-70396]:IfStatement[58340-58460]"
    }, {
      "left" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[70291-70396]:ExpressionStatement[58355-58460]"
    }, {
      "left" : "beforeRemoveTime = 0L;",
      "right" : "beforeRemoveTime = 0L;",
      "info" : "ExpressionStatement[70424-70446]:ExpressionStatement[58488-58510]"
    }, {
      "left" : "afterRemoveTime = 0L;",
      "right" : "afterRemoveTime = 0L;",
      "info" : "ExpressionStatement[70459-70480]:ExpressionStatement[58523-58544]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[70493-70545]:IfStatement[58557-58609]"
    }, {
      "left" : "beforeRemoveTime = System.nanoTime();",
      "right" : "beforeRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[70508-70545]:ExpressionStatement[58572-58609]"
    }, {
      "left" : "for (int i = unsorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = kUnsorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[70558-70944]:ForStatement[58622-58946]"
    }, {
      "left" : "int i = unsorted.length - 1",
      "right" : "int i = kUnsorted.length - 1",
      "info" : "VariableDeclarationExpression[70563-70590]:VariableDeclarationExpression[56781-56809]"
    }, {
      "left" : "unsorted.length",
      "right" : "kUnsorted.length",
      "info" : "QualifiedName[70571-70586]:QualifiedName[56789-56805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70605-70944]:Block[58670-58946]"
    }, {
      "left" : "unsorted",
      "right" : "name",
      "info" : "SimpleName[70638-70646]:SimpleName[31339-31343]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[70647-70648]:SimpleName[56894-56895]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[70667-70668]:SimpleType[56842-56843]"
    }, {
      "left" : "keyType",
      "right" : "keyType",
      "info" : "SimpleName[70696-70703]:SimpleName[52129-52136]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[70722-70746]:ExpressionStatement[58724-58748]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[70763-70930]:IfStatement[58765-58932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70782-70930]:Block[58784-58932]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[70804-70878]:ExpressionStatement[58806-58880]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[70899-70912]:ReturnStatement[58901-58914]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[70957-71229]:IfStatement[58959-59231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70972-71229]:Block[58974-59231]"
    }, {
      "left" : "afterRemoveTime = System.nanoTime();",
      "right" : "afterRemoveTime = System.nanoTime();",
      "info" : "ExpressionStatement[70990-71026]:ExpressionStatement[58992-59028]"
    }, {
      "left" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "right" : "removeTime += afterRemoveTime - beforeRemoveTime;",
      "info" : "ExpressionStatement[71043-71092]:ExpressionStatement[59045-59094]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[71109-71215]:IfStatement[59111-59217]"
    }, {
      "left" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" unsorted remove time = \" + (removeTime / unsortedCount) + \" ns\");",
      "info" : "ExpressionStatement[71124-71215]:ExpressionStatement[59126-59217]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[71243-71414]:IfStatement[43070-43261]"
    }, {
      "left" : "!map.isEmpty()",
      "right" : "!map.isEmpty()",
      "info" : "PrefixExpression[71247-71261]:PrefixExpression[56091-56105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71263-71414]:Block[43097-43261]"
    }, {
      "left" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" unsorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[71281-71336]:ExpressionStatement[43115-43170]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[71353-71370]:ExpressionStatement[59541-59564]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[71365-71368]:SimpleName[59559-59562]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71387-71400]:ReturnStatement[43234-43247]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[71427-71594]:IfStatement[43274-43461]"
    }, {
      "left" : "map.size()!=0",
      "right" : "map.size()!=0",
      "info" : "InfixExpression[71431-71444]:InfixExpression[56281-56294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71446-71594]:Block[43300-43461]"
    }, {
      "left" : "System.err.println(name+\" unsorted size() failed.\");",
      "right" : "System.err.println(name+\" unsorted size() failed.\");",
      "info" : "ExpressionStatement[71464-71516]:ExpressionStatement[43318-43370]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[71533-71550]:ExpressionStatement[59355-59378]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[71545-71548]:SimpleName[59373-59376]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[71567-71580]:ReturnStatement[43434-43447]"
    }, {
      "left" : "long addSortedTime = 0L;",
      "right" : "long addSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71614-71638]:VariableDeclarationStatement[59628-59652]"
    }, {
      "left" : "long removeSortedTime = 0L;",
      "right" : "long removeSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71647-71674]:VariableDeclarationStatement[59661-59688]"
    }, {
      "left" : "long beforeAddSortedTime = 0L;",
      "right" : "long beforeAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71684-71714]:VariableDeclarationStatement[59698-59728]"
    }, {
      "left" : "long afterAddSortedTime = 0L;",
      "right" : "long afterAddSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71723-71752]:VariableDeclarationStatement[59737-59766]"
    }, {
      "left" : "long beforeRemoveSortedTime = 0L;",
      "right" : "long beforeRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71762-71795]:VariableDeclarationStatement[59776-59809]"
    }, {
      "left" : "long afterRemoveSortedTime = 0L;",
      "right" : "long afterRemoveSortedTime = 0L;",
      "info" : "VariableDeclarationStatement[71804-71836]:VariableDeclarationStatement[59818-59850]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[71846-71860]:ExpressionStatement[59860-59874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71869-75585]:Block[59883-63072]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[71893-71911]:ExpressionStatement[59907-59925]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[71924-71941]:ExpressionStatement[59938-59955]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[71954-71979]:ExpressionStatement[59968-59993]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[71992-72016]:ExpressionStatement[60006-60030]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[72029-72097]:IfStatement[60043-60111]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[72046-72097]:ExpressionStatement[60060-60111]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[72110-72165]:IfStatement[60124-60179]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[72125-72165]:ExpressionStatement[60139-60179]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[72183-72192]:VariableDeclarationExpression[60197-60206]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[72194-72195]:SimpleName[47626-47627]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[72213-72216]:PostfixExpression[60228-60231]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[72251-72257]:SimpleName[27234-27238]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[72258-72259]:SimpleName[45331-45332]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[72278-72279]:SimpleType[58688-58689]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[72306-72307]:SimpleType[60285-60286]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[72363-72376]:TypeLiteral[32650-32663]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[72408-72413]:METHOD_INVOCATION_RECEIVER[52706-52711]"
    }, {
      "left" : "Utils",
      "right" : "Utils",
      "info" : "METHOD_INVOCATION_RECEIVER[72464-72469]:METHOD_INVOCATION_RECEIVER[52597-52602]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[72719-72733]:ExpressionStatement[60319-60333]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[72760-73040]:IfStatement[60360-60640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72775-73040]:Block[60375-60640]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[72793-72832]:ExpressionStatement[60393-60432]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[72849-72907]:ExpressionStatement[60449-60507]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[72924-73026]:IfStatement[60524-60626]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[72939-73026]:ExpressionStatement[60539-60626]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[73053-73339]:IfStatement[60653-60939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73070-73339]:Block[60670-60939]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[73088-73138]:ExpressionStatement[60688-60738]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[73155-73192]:ExpressionStatement[60755-60792]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[73209-73325]:IfStatement[60809-60925]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[73224-73325]:ExpressionStatement[60824-60925]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[73353-73403]:VariableDeclarationStatement[60953-61003]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[73416-73463]:VariableDeclarationStatement[61016-61063]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[73476-73511]:VariableDeclarationStatement[61076-61111]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[73524-73717]:IfStatement[61124-61317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73557-73717]:Block[61157-61317]"
    }, {
      "left" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[73575-73673]:ExpressionStatement[61175-61273]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73690-73703]:ReturnStatement[61290-61303]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[73731-73781]:IfStatement[61331-61381]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[73746-73781]:ExpressionStatement[61346-61381]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[73795-73817]:ExpressionStatement[61395-61417]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[73830-73851]:ExpressionStatement[61430-61451]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[73864-73916]:IfStatement[61464-61516]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[73879-73916]:ExpressionStatement[61479-61516]"
    }, {
      "left" : "for (Integer item : sorted)",
      "right" : "for (K k : kSorted)",
      "info" : "EnhancedForStatement[73929-74063]:EnhancedForStatement[61529-61600]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[73949-73955]:SimpleName[13108-13112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73957-74063]:Block[61549-61600]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[73975-73976]:SimpleType[61534-61535]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[74030-74049]:ExpressionStatement[61567-61586]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[74076-74360]:IfStatement[61613-61897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74091-74360]:Block[61628-61897]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[74109-74145]:ExpressionStatement[61646-61682]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[74162-74211]:ExpressionStatement[61699-61748]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[74228-74346]:IfStatement[61765-61883]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[74243-74346]:ExpressionStatement[61780-61883]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[74374-74402]:ExpressionStatement[61911-61939]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[74415-74442]:ExpressionStatement[61952-61979]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[74455-74513]:IfStatement[61992-62050]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[74470-74513]:ExpressionStatement[62007-62050]"
    }, {
      "left" : "for (int i = 0; i < sorted.length; i++)",
      "right" : "for (int i = 0; i < kSorted.length; i++)",
      "info" : "ForStatement[74526-74903]:ForStatement[62063-62378]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[74542-74543]:SimpleName[46098-46099]"
    }, {
      "left" : "sorted.length",
      "right" : "kSorted.length",
      "info" : "QualifiedName[74546-74559]:QualifiedName[62083-62097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74566-74903]:Block[62104-62378]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[74599-74605]:SimpleName[21529-21533]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[74606-74607]:SimpleName[46156-46157]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[74626-74627]:SimpleType[60251-60252]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[74681-74705]:ExpressionStatement[62156-62180]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[74722-74889]:IfStatement[62197-62364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74741-74889]:Block[62216-62364]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[74763-74837]:ExpressionStatement[62238-62312]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[74858-74871]:ReturnStatement[62333-62346]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[74916-75214]:IfStatement[62391-62689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74931-75214]:Block[62406-62689]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[74949-74991]:ExpressionStatement[62424-62466]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[75008-75075]:ExpressionStatement[62483-62550]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[75092-75200]:IfStatement[62567-62675]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[75107-75200]:ExpressionStatement[62582-62675]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!map.isEmpty())",
      "info" : "IfStatement[75228-75397]:IfStatement[65930-66105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75248-75397]:Block[65950-66105]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[75266-75319]:ExpressionStatement[65968-66021]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[75336-75353]:ExpressionStatement[62995-63018]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[75348-75351]:SimpleName[63013-63016]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[75370-75383]:ReturnStatement[66078-66091]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (map.size()!=0)",
      "info" : "IfStatement[75410-75575]:IfStatement[66118-66289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75429-75575]:Block[66137-66289]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[75447-75497]:ExpressionStatement[66155-66205]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[75514-75531]:ExpressionStatement[62811-62834]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[75526-75529]:SimpleName[62829-62832]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[75548-75561]:ReturnStatement[66262-66275]"
    }, {
      "left" : "sortedCount++;",
      "right" : "sortedCount++;",
      "info" : "ExpressionStatement[75595-75609]:ExpressionStatement[63082-63096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75618-79340]:Block[63105-66300]"
    }, {
      "left" : "beforeMemory = 0L;",
      "right" : "beforeMemory = 0L;",
      "info" : "ExpressionStatement[75642-75660]:ExpressionStatement[63129-63147]"
    }, {
      "left" : "afterMemory = 0L;",
      "right" : "afterMemory = 0L;",
      "info" : "ExpressionStatement[75673-75690]:ExpressionStatement[63160-63177]"
    }, {
      "left" : "beforeAddSortedTime = 0L;",
      "right" : "beforeAddSortedTime = 0L;",
      "info" : "ExpressionStatement[75703-75728]:ExpressionStatement[63190-63215]"
    }, {
      "left" : "afterAddSortedTime = 0L;",
      "right" : "afterAddSortedTime = 0L;",
      "info" : "ExpressionStatement[75741-75765]:ExpressionStatement[63228-63252]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[75778-75846]:IfStatement[63265-63333]"
    }, {
      "left" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "beforeMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[75795-75846]:ExpressionStatement[63282-63333]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[75859-75914]:IfStatement[63346-63401]"
    }, {
      "left" : "beforeAddSortedTime = System.nanoTime();",
      "right" : "beforeAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[75874-75914]:ExpressionStatement[63361-63401]"
    }, {
      "left" : "int i = 0",
      "right" : "int i = 0",
      "info" : "VariableDeclarationExpression[75932-75941]:VariableDeclarationExpression[63419-63428]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[75943-75944]:SimpleName[48783-48784]"
    }, {
      "left" : "i++",
      "right" : "i++",
      "info" : "PostfixExpression[75962-75965]:PostfixExpression[63450-63453]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[76000-76006]:SimpleName[15651-15655]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[76007-76008]:SimpleName[48841-48842]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[76027-76028]:SimpleType[62122-62123]"
    }, {
      "left" : "V",
      "right" : "V",
      "info" : "SimpleType[76055-76056]:SimpleType[63507-63508]"
    }, {
      "left" : "Integer.class",
      "right" : "Integer.class",
      "info" : "TypeLiteral[76112-76125]:TypeLiteral[33759-33772]"
    }, {
      "left" : "map.put(k, v);",
      "right" : "map.put(k, v);",
      "info" : "ExpressionStatement[76468-76482]:ExpressionStatement[63541-63555]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[76509-76789]:IfStatement[63582-63862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76524-76789]:Block[63597-63862]"
    }, {
      "left" : "afterAddSortedTime = System.nanoTime();",
      "right" : "afterAddSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[76542-76581]:ExpressionStatement[63615-63654]"
    }, {
      "left" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "right" : "addSortedTime += afterAddSortedTime - beforeAddSortedTime;",
      "info" : "ExpressionStatement[76598-76656]:ExpressionStatement[63671-63729]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[76673-76775]:IfStatement[63746-63848]"
    }, {
      "left" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted add time = \" + (addSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[76688-76775]:ExpressionStatement[63761-63848]"
    }, {
      "left" : "if (debugMemory)",
      "right" : "if (debugMemory)",
      "info" : "IfStatement[76802-77088]:IfStatement[63875-64161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76819-77088]:Block[63892-64161]"
    }, {
      "left" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "right" : "afterMemory = DataStructuresTiming.getMemoryUse();",
      "info" : "ExpressionStatement[76837-76887]:ExpressionStatement[63910-63960]"
    }, {
      "left" : "memory += afterMemory - beforeMemory;",
      "right" : "memory += afterMemory - beforeMemory;",
      "info" : "ExpressionStatement[76904-76941]:ExpressionStatement[63977-64014]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[76958-77074]:IfStatement[64031-64147]"
    }, {
      "left" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "right" : "System.out.println(name+\" sorted memory use = \" + (memory / (unsortedCount+sortedCount)) + \" bytes\");",
      "info" : "ExpressionStatement[76973-77074]:ExpressionStatement[64046-64147]"
    }, {
      "left" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "right" : "K invalidKey = (K) Utils.parseT(INVALID, keyType);",
      "info" : "VariableDeclarationStatement[77102-77152]:VariableDeclarationStatement[64175-64225]"
    }, {
      "left" : "boolean contains = map.containsKey(invalidKey);",
      "right" : "boolean contains = map.containsKey(invalidKey);",
      "info" : "VariableDeclarationStatement[77165-77212]:VariableDeclarationStatement[64238-64285]"
    }, {
      "left" : "V removed = map.remove(invalidKey);",
      "right" : "V removed = map.remove(invalidKey);",
      "info" : "VariableDeclarationStatement[77225-77260]:VariableDeclarationStatement[64298-64333]"
    }, {
      "left" : "if (contains || (removed!=null))",
      "right" : "if (contains || (removed!=null))",
      "info" : "IfStatement[77273-77466]:IfStatement[64346-64539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77306-77466]:Block[64379-64539]"
    }, {
      "left" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "right" : "System.err.println(name+\" sorted invalidity check. contains=\" + contains + \" removed=\" + removed);",
      "info" : "ExpressionStatement[77324-77422]:ExpressionStatement[64397-64495]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[77439-77452]:ReturnStatement[64512-64525]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[77480-77530]:IfStatement[64553-64603]"
    }, {
      "left" : "System.out.println(map.toString());",
      "right" : "System.out.println(map.toString());",
      "info" : "ExpressionStatement[77495-77530]:ExpressionStatement[64568-64603]"
    }, {
      "left" : "beforeLookupTime = 0L;",
      "right" : "beforeLookupTime = 0L;",
      "info" : "ExpressionStatement[77544-77566]:ExpressionStatement[64617-64639]"
    }, {
      "left" : "afterLookupTime = 0L;",
      "right" : "afterLookupTime = 0L;",
      "info" : "ExpressionStatement[77579-77600]:ExpressionStatement[64652-64673]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[77613-77665]:IfStatement[64686-64738]"
    }, {
      "left" : "beforeLookupTime = System.nanoTime();",
      "right" : "beforeLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[77628-77665]:ExpressionStatement[64701-64738]"
    }, {
      "left" : "for (Integer item : sorted)",
      "right" : "for (K k : kSorted)",
      "info" : "EnhancedForStatement[77678-77812]:EnhancedForStatement[64751-64822]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[77698-77704]:SimpleName[13745-13749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77706-77812]:Block[64771-64822]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[77724-77725]:SimpleType[64756-64757]"
    }, {
      "left" : "map.containsKey(k);",
      "right" : "map.containsKey(k);",
      "info" : "ExpressionStatement[77779-77798]:ExpressionStatement[64789-64808]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[77825-78109]:IfStatement[64835-65119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77840-78109]:Block[64850-65119]"
    }, {
      "left" : "afterLookupTime = System.nanoTime();",
      "right" : "afterLookupTime = System.nanoTime();",
      "info" : "ExpressionStatement[77858-77894]:ExpressionStatement[64868-64904]"
    }, {
      "left" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "right" : "lookupTime += afterLookupTime - beforeLookupTime;",
      "info" : "ExpressionStatement[77911-77960]:ExpressionStatement[64921-64970]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[77977-78095]:IfStatement[64987-65105]"
    }, {
      "left" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "right" : "System.out.println(name+\" sorted lookup time = \" + (lookupTime / (unsortedCount+sortedCount)) + \" ns\");",
      "info" : "ExpressionStatement[77992-78095]:ExpressionStatement[65002-65105]"
    }, {
      "left" : "beforeRemoveSortedTime = 0L;",
      "right" : "beforeRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[78123-78151]:ExpressionStatement[65133-65161]"
    }, {
      "left" : "afterRemoveSortedTime = 0L;",
      "right" : "afterRemoveSortedTime = 0L;",
      "info" : "ExpressionStatement[78164-78191]:ExpressionStatement[65174-65201]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[78204-78262]:IfStatement[65214-65272]"
    }, {
      "left" : "beforeRemoveSortedTime = System.nanoTime();",
      "right" : "beforeRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[78219-78262]:ExpressionStatement[65229-65272]"
    }, {
      "left" : "for (int i = sorted.length - 1; i >= 0; i--)",
      "right" : "for (int i = kSorted.length - 1; i >= 0; i--)",
      "info" : "ForStatement[78275-78657]:ForStatement[65285-65605]"
    }, {
      "left" : "sorted.length",
      "right" : "kSorted.length",
      "info" : "QualifiedName[78288-78301]:QualifiedName[65298-65312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78320-78657]:Block[65331-65605]"
    }, {
      "left" : "sorted",
      "right" : "name",
      "info" : "SimpleName[78353-78359]:SimpleName[14379-14383]"
    }, {
      "left" : "i",
      "right" : "i",
      "info" : "SimpleName[78360-78361]:SimpleName[63487-63488]"
    }, {
      "left" : "K",
      "right" : "K",
      "info" : "SimpleType[78380-78381]:SimpleType[63473-63474]"
    }, {
      "left" : "removed = map.remove(k);",
      "right" : "removed = map.remove(k);",
      "info" : "ExpressionStatement[78435-78459]:ExpressionStatement[65383-65407]"
    }, {
      "left" : "if (removed==null)",
      "right" : "if (removed==null)",
      "info" : "IfStatement[78476-78643]:IfStatement[65424-65591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78495-78643]:Block[65443-65591]"
    }, {
      "left" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "right" : "System.err.println(name+\" unsorted invalidity check. removed=\" + removed);",
      "info" : "ExpressionStatement[78517-78591]:ExpressionStatement[65465-65539]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[78612-78625]:ReturnStatement[65560-65573]"
    }, {
      "left" : "if (debugTime)",
      "right" : "if (debugTime)",
      "info" : "IfStatement[78670-78968]:IfStatement[65618-65916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78685-78968]:Block[65633-65916]"
    }, {
      "left" : "afterRemoveSortedTime = System.nanoTime();",
      "right" : "afterRemoveSortedTime = System.nanoTime();",
      "info" : "ExpressionStatement[78703-78745]:ExpressionStatement[65651-65693]"
    }, {
      "left" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "right" : "removeSortedTime += afterRemoveSortedTime - beforeRemoveSortedTime;",
      "info" : "ExpressionStatement[78762-78829]:ExpressionStatement[65710-65777]"
    }, {
      "left" : "if (debug > 0)",
      "right" : "if (debug > 0)",
      "info" : "IfStatement[78846-78954]:IfStatement[65794-65902]"
    }, {
      "left" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "right" : "System.out.println(name+\" sorted remove time = \" + (removeSortedTime / sortedCount) + \" ns\");",
      "info" : "ExpressionStatement[78861-78954]:ExpressionStatement[65809-65902]"
    }, {
      "left" : "if (!map.isEmpty())",
      "right" : "if (!collection.isEmpty())",
      "info" : "IfStatement[78982-79151]:IfStatement[50278-50467]"
    }, {
      "left" : "!map.isEmpty()",
      "right" : "!map.isEmpty()",
      "info" : "PrefixExpression[78986-79000]:PrefixExpression[62707-62721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79002-79151]:Block[50305-50467]"
    }, {
      "left" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "right" : "System.err.println(name+\" sorted isEmpty() failed.\");",
      "info" : "ExpressionStatement[79020-79073]:ExpressionStatement[50323-50376]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[79090-79107]:ExpressionStatement[66222-66245]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[79102-79105]:SimpleName[66240-66243]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[79124-79137]:ReturnStatement[50440-50453]"
    }, {
      "left" : "if (map.size()!=0)",
      "right" : "if (collection.size()!=0)",
      "info" : "IfStatement[79164-79329]:IfStatement[50480-50665]"
    }, {
      "left" : "map.size()!=0",
      "right" : "map.size()!=0",
      "info" : "InfixExpression[79168-79181]:InfixExpression[62895-62908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79183-79329]:Block[50506-50665]"
    }, {
      "left" : "System.err.println(name+\" sorted size() failed.\");",
      "right" : "System.err.println(name+\" sorted size() failed.\");",
      "info" : "ExpressionStatement[79201-79251]:ExpressionStatement[50524-50574]"
    }, {
      "left" : "handleError(map);",
      "right" : "handleError(input,map);",
      "info" : "ExpressionStatement[79268-79285]:ExpressionStatement[66038-66061]"
    }, {
      "left" : "map",
      "right" : "map",
      "info" : "SimpleName[79280-79283]:SimpleName[66056-66059]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[79302-79315]:ReturnStatement[50638-50651]"
    }, {
      "left" : "if (!firstTimeThru)",
      "right" : "if (!firstTimeThru)",
      "info" : "IfStatement[79400-79990]:IfStatement[66360-66950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79420-79990]:Block[66380-66950]"
    }, {
      "left" : "if (testResults[testIndex] == null)",
      "right" : "if (testResults[testIndex] == null)",
      "info" : "IfStatement[79434-79524]:IfStatement[66394-66484]"
    }, {
      "left" : "testResults[testIndex] = new long[6];",
      "right" : "testResults[testIndex] = new long[6];",
      "info" : "ExpressionStatement[79487-79524]:ExpressionStatement[66447-66484]"
    }, {
      "left" : "testResults[testIndex][0] += (addTime / unsortedCount);",
      "right" : "testResults[testIndex][0] += (addTime / unsortedCount);",
      "info" : "ExpressionStatement[79537-79592]:ExpressionStatement[66497-66552]"
    }, {
      "left" : "testResults[testIndex][1] += (removeTime / unsortedCount);",
      "right" : "testResults[testIndex][1] += (removeTime / unsortedCount);",
      "info" : "ExpressionStatement[79605-79663]:ExpressionStatement[66565-66623]"
    }, {
      "left" : "testResults[testIndex][2] += (addSortedTime / sortedCount);",
      "right" : "testResults[testIndex][2] += (addSortedTime / sortedCount);",
      "info" : "ExpressionStatement[79676-79735]:ExpressionStatement[66636-66695]"
    }, {
      "left" : "testResults[testIndex][3] += (removeSortedTime / sortedCount);",
      "right" : "testResults[testIndex][3] += (removeSortedTime / sortedCount);",
      "info" : "ExpressionStatement[79748-79810]:ExpressionStatement[66708-66770]"
    }, {
      "left" : "testResults[testIndex][4] += (lookupTime / (unsortedCount + sortedCount));",
      "right" : "testResults[testIndex][4] += (lookupTime / (unsortedCount + sortedCount));",
      "info" : "ExpressionStatement[79823-79897]:ExpressionStatement[66783-66857]"
    }, {
      "left" : "testResults[testIndex][5] += (memory / (unsortedCount + sortedCount));",
      "right" : "testResults[testIndex][5] += (memory / (unsortedCount + sortedCount));",
      "info" : "ExpressionStatement[79910-79980]:ExpressionStatement[66870-66940]"
    }, {
      "left" : "if (debug > 1)",
      "right" : "if (debug > 1)",
      "info" : "IfStatement[80000-80036]:IfStatement[66960-66996]"
    }, {
      "left" : "System.out.println();",
      "right" : "System.out.println();",
      "info" : "ExpressionStatement[80015-80036]:ExpressionStatement[66975-66996]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[80046-80058]:ReturnStatement[67006-67018]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[80070-80077]:Modifier[67030-67037]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[80078-80084]:Modifier[67038-67044]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[80085-80090]:Modifier[67045-67050]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[80091-80097]:SimpleType[67051-67057]"
    }, {
      "left" : "getTestResults",
      "right" : "getTestResults",
      "info" : "SimpleName[80098-80112]:SimpleName[67058-67072]"
    }, {
      "left" : "int number",
      "right" : "int number",
      "info" : "SingleVariableDeclaration[80113-80123]:SingleVariableDeclaration[67073-67083]"
    }, {
      "left" : "String[] names",
      "right" : "String[] names",
      "info" : "SingleVariableDeclaration[80125-80139]:SingleVariableDeclaration[67085-67099]"
    }, {
      "left" : "long[][] results",
      "right" : "long[][] results",
      "info" : "SingleVariableDeclaration[80141-80157]:SingleVariableDeclaration[67101-67117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80159-84613]:Block[67119-71596]"
    }, {
      "left" : "StringBuilder resultsBuilder = new StringBuilder();",
      "right" : "StringBuilder resultsBuilder = new StringBuilder();",
      "info" : "VariableDeclarationStatement[80169-80220]:VariableDeclarationStatement[67129-67180]"
    }, {
      "left" : "String format = \"%-35s %-10s %-15s %-15s %-25s %-15s %-15s\\n\";",
      "right" : "String format = \"%-35s %-10s %-15s %-15s %-25s %-15s %-15s\\n\";",
      "info" : "VariableDeclarationStatement[80229-80291]:VariableDeclarationStatement[67189-67251]"
    }, {
      "left" : "Formatter formatter = new Formatter(resultsBuilder, Locale.US);",
      "right" : "Formatter formatter = new Formatter(resultsBuilder, Locale.US);",
      "info" : "VariableDeclarationStatement[80300-80363]:VariableDeclarationStatement[67260-67323]"
    }, {
      "left" : "formatter.format(format, \"Data Structure\", \"Add time\", \"Remove time\", \"Sorted add time\", \"Sorted remove time\", \"Lookup time\", \"Size\");",
      "right" : "formatter.format(format, \"Data Structure (\"+ARRAY_SIZE+\" items)\", \"Add time\", \"Remove time\", \"Sorted add time\", \"Sorted remove time\", \"Lookup time\", \"Size\");",
      "info" : "ExpressionStatement[80372-80506]:ExpressionStatement[67332-67489]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[80389-80395]:SimpleName[67349-67355]"
    }, {
      "left" : "\"Add time\"",
      "right" : "\"Add time\"",
      "info" : "StringLiteral[80415-80425]:StringLiteral[67398-67408]"
    }, {
      "left" : "\"Remove time\"",
      "right" : "\"Remove time\"",
      "info" : "StringLiteral[80427-80440]:StringLiteral[67410-67423]"
    }, {
      "left" : "\"Sorted add time\"",
      "right" : "\"Sorted add time\"",
      "info" : "StringLiteral[80442-80459]:StringLiteral[67425-67442]"
    }, {
      "left" : "\"Sorted remove time\"",
      "right" : "\"Sorted remove time\"",
      "info" : "StringLiteral[80461-80481]:StringLiteral[67444-67464]"
    }, {
      "left" : "\"Lookup time\"",
      "right" : "\"Lookup time\"",
      "info" : "StringLiteral[80483-80496]:StringLiteral[67466-67479]"
    }, {
      "left" : "\"Size\"",
      "right" : "\"Size\"",
      "info" : "StringLiteral[80498-80504]:StringLiteral[67481-67487]"
    }, {
      "left" : "double KB = 1000;",
      "right" : "double KB = 1000;",
      "info" : "VariableDeclarationStatement[80516-80533]:VariableDeclarationStatement[67499-67516]"
    }, {
      "left" : "double MB = 1000 * KB;",
      "right" : "double MB = 1000 * KB;",
      "info" : "VariableDeclarationStatement[80542-80564]:VariableDeclarationStatement[67525-67547]"
    }, {
      "left" : "double MILLIS = 1000000;",
      "right" : "double MILLIS = 1000000;",
      "info" : "VariableDeclarationStatement[80574-80598]:VariableDeclarationStatement[67557-67581]"
    }, {
      "left" : "double SECOND = 1000;",
      "right" : "double SECOND = 1000;",
      "info" : "VariableDeclarationStatement[80607-80628]:VariableDeclarationStatement[67590-67611]"
    }, {
      "left" : "double MINUTES = 60 * SECOND;",
      "right" : "double MINUTES = 60 * SECOND;",
      "info" : "VariableDeclarationStatement[80637-80666]:VariableDeclarationStatement[67620-67649]"
    }, {
      "left" : "for (int i=0; i<TESTS; i++)",
      "right" : "for (int i=0; i<TESTS; i++)",
      "info" : "ForStatement[80676-84537]:ForStatement[67659-71520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80704-84537]:Block[67687-71520]"
    }, {
      "left" : "String name = names[i];",
      "right" : "String name = names[i];",
      "info" : "VariableDeclarationStatement[80718-80741]:VariableDeclarationStatement[67701-67724]"
    }, {
      "left" : "long[] result = results[i];",
      "right" : "long[] result = results[i];",
      "info" : "VariableDeclarationStatement[80754-80781]:VariableDeclarationStatement[67737-67764]"
    }, {
      "left" : "if (name != null && result != null)",
      "right" : "if (name != null && result != null)",
      "info" : "IfStatement[80794-84527]:IfStatement[67777-71510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80830-84527]:Block[67813-71510]"
    }, {
      "left" : "double addTime = result[0] / MILLIS;",
      "right" : "double addTime = result[0] / MILLIS;",
      "info" : "VariableDeclarationStatement[80848-80884]:VariableDeclarationStatement[67831-67867]"
    }, {
      "left" : "addTime /= number;",
      "right" : "addTime /= number;",
      "info" : "ExpressionStatement[80901-80919]:ExpressionStatement[67884-67902]"
    }, {
      "left" : "String addTimeString = null;",
      "right" : "String addTimeString = null;",
      "info" : "VariableDeclarationStatement[80936-80964]:VariableDeclarationStatement[67919-67947]"
    }, {
      "left" : "if (addTime > MINUTES)",
      "right" : "if (addTime > MINUTES)",
      "info" : "IfStatement[80981-81376]:IfStatement[67964-68359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81004-81130]:Block[67987-68113]"
    }, {
      "left" : "addTime /= MINUTES;",
      "right" : "addTime /= MINUTES;",
      "info" : "ExpressionStatement[81026-81045]:ExpressionStatement[68009-68028]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" m\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" m\";",
      "info" : "ExpressionStatement[81066-81112]:ExpressionStatement[68049-68095]"
    }, {
      "left" : "if (addTime > SECOND)",
      "right" : "if (addTime > SECOND)",
      "info" : "IfStatement[81136-81376]:IfStatement[68119-68359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81158-81283]:Block[68141-68266]"
    }, {
      "left" : "addTime /= SECOND;",
      "right" : "addTime /= SECOND;",
      "info" : "ExpressionStatement[81180-81198]:ExpressionStatement[68163-68181]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" s\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" s\";",
      "info" : "ExpressionStatement[81219-81265]:ExpressionStatement[68202-68248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81289-81376]:Block[68272-68359]"
    }, {
      "left" : "addTimeString = FORMAT.format(addTime) + \" ms\";",
      "right" : "addTimeString = FORMAT.format(addTime) + \" ms\";",
      "info" : "ExpressionStatement[81311-81358]:ExpressionStatement[68294-68341]"
    }, {
      "left" : "double removeTime = result[1] / MILLIS;",
      "right" : "double removeTime = result[1] / MILLIS;",
      "info" : "VariableDeclarationStatement[81394-81433]:VariableDeclarationStatement[68377-68416]"
    }, {
      "left" : "removeTime /= number;",
      "right" : "removeTime /= number;",
      "info" : "ExpressionStatement[81450-81471]:ExpressionStatement[68433-68454]"
    }, {
      "left" : "String removeTimeString = null;",
      "right" : "String removeTimeString = null;",
      "info" : "VariableDeclarationStatement[81488-81519]:VariableDeclarationStatement[68471-68502]"
    }, {
      "left" : "if (removeTime > MINUTES)",
      "right" : "if (removeTime > MINUTES)",
      "info" : "IfStatement[81536-81961]:IfStatement[68519-68944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81562-81697]:Block[68545-68680]"
    }, {
      "left" : "removeTime /= MINUTES;",
      "right" : "removeTime /= MINUTES;",
      "info" : "ExpressionStatement[81584-81606]:ExpressionStatement[68567-68589]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" m\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" m\";",
      "info" : "ExpressionStatement[81627-81679]:ExpressionStatement[68610-68662]"
    }, {
      "left" : "if (removeTime > SECOND)",
      "right" : "if (removeTime > SECOND)",
      "info" : "IfStatement[81703-81961]:IfStatement[68686-68944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81728-81862]:Block[68711-68845]"
    }, {
      "left" : "removeTime /= SECOND;",
      "right" : "removeTime /= SECOND;",
      "info" : "ExpressionStatement[81750-81771]:ExpressionStatement[68733-68754]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" s\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" s\";",
      "info" : "ExpressionStatement[81792-81844]:ExpressionStatement[68775-68827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81868-81961]:Block[68851-68944]"
    }, {
      "left" : "removeTimeString = FORMAT.format(removeTime) + \" ms\";",
      "right" : "removeTimeString = FORMAT.format(removeTime) + \" ms\";",
      "info" : "ExpressionStatement[81890-81943]:ExpressionStatement[68873-68926]"
    }, {
      "left" : "double addSortedTime = result[2] / MILLIS;",
      "right" : "double addSortedTime = result[2] / MILLIS;",
      "info" : "VariableDeclarationStatement[82005-82047]:VariableDeclarationStatement[68988-69030]"
    }, {
      "left" : "addSortedTime /= number;",
      "right" : "addSortedTime /= number;",
      "info" : "ExpressionStatement[82064-82088]:ExpressionStatement[69047-69071]"
    }, {
      "left" : "String sortedAddTimeString = null;",
      "right" : "String sortedAddTimeString = null;",
      "info" : "VariableDeclarationStatement[82105-82139]:VariableDeclarationStatement[69088-69122]"
    }, {
      "left" : "if (addSortedTime > MINUTES)",
      "right" : "if (addSortedTime > MINUTES)",
      "info" : "IfStatement[82156-82611]:IfStatement[69139-69594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82185-82329]:Block[69168-69312]"
    }, {
      "left" : "addSortedTime /= MINUTES;",
      "right" : "addSortedTime /= MINUTES;",
      "info" : "ExpressionStatement[82207-82232]:ExpressionStatement[69190-69215]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" m\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" m\";",
      "info" : "ExpressionStatement[82253-82311]:ExpressionStatement[69236-69294]"
    }, {
      "left" : "if (addSortedTime > SECOND)",
      "right" : "if (addSortedTime > SECOND)",
      "info" : "IfStatement[82335-82611]:IfStatement[69318-69594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82363-82506]:Block[69346-69489]"
    }, {
      "left" : "addSortedTime /= SECOND;",
      "right" : "addSortedTime /= SECOND;",
      "info" : "ExpressionStatement[82385-82409]:ExpressionStatement[69368-69392]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" s\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" s\";",
      "info" : "ExpressionStatement[82430-82488]:ExpressionStatement[69413-69471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82512-82611]:Block[69495-69594]"
    }, {
      "left" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" ms\";",
      "right" : "sortedAddTimeString = FORMAT.format(addSortedTime) + \" ms\";",
      "info" : "ExpressionStatement[82534-82593]:ExpressionStatement[69517-69576]"
    }, {
      "left" : "double removeSortedTime = result[3] / MILLIS;",
      "right" : "double removeSortedTime = result[3] / MILLIS;",
      "info" : "VariableDeclarationStatement[82629-82674]:VariableDeclarationStatement[69612-69657]"
    }, {
      "left" : "removeSortedTime /= number;",
      "right" : "removeSortedTime /= number;",
      "info" : "ExpressionStatement[82691-82718]:ExpressionStatement[69674-69701]"
    }, {
      "left" : "String sortedRemoveTimeString = null;",
      "right" : "String sortedRemoveTimeString = null;",
      "info" : "VariableDeclarationStatement[82735-82772]:VariableDeclarationStatement[69718-69755]"
    }, {
      "left" : "if (removeSortedTime > MINUTES)",
      "right" : "if (removeSortedTime > MINUTES)",
      "info" : "IfStatement[82789-83274]:IfStatement[69772-70257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82821-82974]:Block[69804-69957]"
    }, {
      "left" : "removeSortedTime /= MINUTES;",
      "right" : "removeSortedTime /= MINUTES;",
      "info" : "ExpressionStatement[82843-82871]:ExpressionStatement[69826-69854]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" m\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" m\";",
      "info" : "ExpressionStatement[82892-82956]:ExpressionStatement[69875-69939]"
    }, {
      "left" : "if (removeSortedTime > SECOND)",
      "right" : "if (removeSortedTime > SECOND)",
      "info" : "IfStatement[82980-83274]:IfStatement[69963-70257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83011-83163]:Block[69994-70146]"
    }, {
      "left" : "removeSortedTime /= SECOND;",
      "right" : "removeSortedTime /= SECOND;",
      "info" : "ExpressionStatement[83033-83060]:ExpressionStatement[70016-70043]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" s\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" s\";",
      "info" : "ExpressionStatement[83081-83145]:ExpressionStatement[70064-70128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83169-83274]:Block[70152-70257]"
    }, {
      "left" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" ms\";",
      "right" : "sortedRemoveTimeString = FORMAT.format(removeSortedTime) + \" ms\";",
      "info" : "ExpressionStatement[83191-83256]:ExpressionStatement[70174-70239]"
    }, {
      "left" : "double lookupTime = result[4] / MILLIS;",
      "right" : "double lookupTime = result[4] / MILLIS;",
      "info" : "VariableDeclarationStatement[83292-83331]:VariableDeclarationStatement[70275-70314]"
    }, {
      "left" : "lookupTime /= number;",
      "right" : "lookupTime /= number;",
      "info" : "ExpressionStatement[83348-83369]:ExpressionStatement[70331-70352]"
    }, {
      "left" : "String lookupTimeString = null;",
      "right" : "String lookupTimeString = null;",
      "info" : "VariableDeclarationStatement[83386-83417]:VariableDeclarationStatement[70369-70400]"
    }, {
      "left" : "if (lookupTime > MINUTES)",
      "right" : "if (lookupTime > MINUTES)",
      "info" : "IfStatement[83434-83859]:IfStatement[70417-70842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83460-83595]:Block[70443-70578]"
    }, {
      "left" : "lookupTime /= MINUTES;",
      "right" : "lookupTime /= MINUTES;",
      "info" : "ExpressionStatement[83482-83504]:ExpressionStatement[70465-70487]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" m\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" m\";",
      "info" : "ExpressionStatement[83525-83577]:ExpressionStatement[70508-70560]"
    }, {
      "left" : "if (lookupTime > SECOND)",
      "right" : "if (lookupTime > SECOND)",
      "info" : "IfStatement[83601-83859]:IfStatement[70584-70842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83626-83760]:Block[70609-70743]"
    }, {
      "left" : "lookupTime /= SECOND;",
      "right" : "lookupTime /= SECOND;",
      "info" : "ExpressionStatement[83648-83669]:ExpressionStatement[70631-70652]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" s\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" s\";",
      "info" : "ExpressionStatement[83690-83742]:ExpressionStatement[70673-70725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83766-83859]:Block[70749-70842]"
    }, {
      "left" : "lookupTimeString = FORMAT.format(lookupTime) + \" ms\";",
      "right" : "lookupTimeString = FORMAT.format(lookupTime) + \" ms\";",
      "info" : "ExpressionStatement[83788-83841]:ExpressionStatement[70771-70824]"
    }, {
      "left" : "double size = result[5];",
      "right" : "double size = result[5];",
      "info" : "VariableDeclarationStatement[83877-83901]:VariableDeclarationStatement[70860-70884]"
    }, {
      "left" : "size /= number;",
      "right" : "size /= number;",
      "info" : "ExpressionStatement[83918-83933]:ExpressionStatement[70901-70916]"
    }, {
      "left" : "String sizeString = null;",
      "right" : "String sizeString = null;",
      "info" : "VariableDeclarationStatement[83950-83975]:VariableDeclarationStatement[70933-70958]"
    }, {
      "left" : "if (size > MB)",
      "right" : "if (size > MB)",
      "info" : "IfStatement[83992-84356]:IfStatement[70975-71339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84007-84126]:Block[70990-71109]"
    }, {
      "left" : "size = size / MB;",
      "right" : "size = size / MB;",
      "info" : "ExpressionStatement[84029-84046]:ExpressionStatement[71012-71029]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" MB\";",
      "right" : "sizeString = FORMAT.format(size) + \" MB\";",
      "info" : "ExpressionStatement[84067-84108]:ExpressionStatement[71050-71091]"
    }, {
      "left" : "if (size > KB)",
      "right" : "if (size > KB)",
      "info" : "IfStatement[84132-84356]:IfStatement[71115-71339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84147-84266]:Block[71130-71249]"
    }, {
      "left" : "size = size / KB;",
      "right" : "size = size / KB;",
      "info" : "ExpressionStatement[84169-84186]:ExpressionStatement[71152-71169]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" KB\";",
      "right" : "sizeString = FORMAT.format(size) + \" KB\";",
      "info" : "ExpressionStatement[84207-84248]:ExpressionStatement[71190-71231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84272-84356]:Block[71255-71339]"
    }, {
      "left" : "sizeString = FORMAT.format(size) + \" Bytes\";",
      "right" : "sizeString = FORMAT.format(size) + \" Bytes\";",
      "info" : "ExpressionStatement[84294-84338]:ExpressionStatement[71277-71321]"
    }, {
      "left" : "formatter.format(format, name, addTimeString, removeTimeString, sortedAddTimeString, sortedRemoveTimeString, lookupTimeString, sizeString);",
      "right" : "formatter.format(format, name, addTimeString, removeTimeString, sortedAddTimeString, sortedRemoveTimeString, lookupTimeString, sizeString);",
      "info" : "ExpressionStatement[84374-84513]:ExpressionStatement[71357-71496]"
    }, {
      "left" : "formatter.close();",
      "right" : "formatter.close();",
      "info" : "ExpressionStatement[84546-84564]:ExpressionStatement[71529-71547]"
    }, {
      "left" : "return resultsBuilder.toString();",
      "right" : "return resultsBuilder.toString();",
      "info" : "ReturnStatement[84574-84607]:ReturnStatement[71557-71590]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[84619-84626]:Modifier[71602-71609]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84627-84633]:Modifier[71610-71616]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[84634-84639]:Modifier[71617-71622]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[84640-84644]:PrimitiveType[71623-71627]"
    }, {
      "left" : "getMemoryUse",
      "right" : "getMemoryUse",
      "info" : "SimpleName[84645-84657]:SimpleName[71628-71640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84660-84892]:Block[71643-71875]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[84670-84689]:ExpressionStatement[71653-71672]"
    }, {
      "left" : "long totalMemory = Runtime.getRuntime().totalMemory();",
      "right" : "long totalMemory = Runtime.getRuntime().totalMemory();",
      "info" : "VariableDeclarationStatement[84698-84752]:VariableDeclarationStatement[71681-71735]"
    }, {
      "left" : "putOutTheGarbage();",
      "right" : "putOutTheGarbage();",
      "info" : "ExpressionStatement[84762-84781]:ExpressionStatement[71745-71764]"
    }, {
      "left" : "long freeMemory = Runtime.getRuntime().freeMemory();",
      "right" : "long freeMemory = Runtime.getRuntime().freeMemory();",
      "info" : "VariableDeclarationStatement[84790-84842]:VariableDeclarationStatement[71773-71825]"
    }, {
      "left" : "return (totalMemory - freeMemory);",
      "right" : "return (totalMemory - freeMemory);",
      "info" : "ReturnStatement[84852-84886]:ReturnStatement[71835-71869]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[84898-84905]:Modifier[71881-71888]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[84906-84912]:Modifier[71889-71895]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[84913-84918]:Modifier[71896-71901]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[84919-84923]:PrimitiveType[71902-71906]"
    }, {
      "left" : "putOutTheGarbage",
      "right" : "putOutTheGarbage",
      "info" : "SimpleName[84924-84940]:SimpleName[71907-71923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84943-85028]:Block[71926-72011]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[84953-84970]:ExpressionStatement[71936-71953]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[84979-84996]:ExpressionStatement[71962-71979]"
    }, {
      "left" : "collectGarbage();",
      "right" : "collectGarbage();",
      "info" : "ExpressionStatement[85005-85022]:ExpressionStatement[71988-72005]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[85088-85095]:Modifier[72071-72078]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[85096-85102]:Modifier[72079-72085]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[85103-85108]:Modifier[72086-72091]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[85109-85113]:PrimitiveType[72092-72096]"
    }, {
      "left" : "collectGarbage",
      "right" : "collectGarbage",
      "info" : "SimpleName[85114-85128]:SimpleName[72097-72111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85131-85439]:Block[72114-72422]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[85141-85433]:TryStatement[72124-72416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85145-85355]:Block[72128-72338]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[85159-85171]:ExpressionStatement[72142-72154]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[85184-85196]:ExpressionStatement[72167-72179]"
    }, {
      "left" : "System.gc();",
      "right" : "System.gc();",
      "info" : "ExpressionStatement[85209-85221]:ExpressionStatement[72192-72204]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[85234-85264]:ExpressionStatement[72217-72247]"
    }, {
      "left" : "System.runFinalization();",
      "right" : "System.runFinalization();",
      "info" : "ExpressionStatement[85277-85302]:ExpressionStatement[72260-72285]"
    }, {
      "left" : "Thread.sleep(fSLEEP_INTERVAL);",
      "right" : "Thread.sleep(fSLEEP_INTERVAL);",
      "info" : "ExpressionStatement[85315-85345]:ExpressionStatement[72298-72328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[85388-85433]:Block[72371-72416]"
    }, {
      "left" : "ex.printStackTrace();",
      "right" : "ex.printStackTrace();",
      "info" : "ExpressionStatement[85402-85423]:ExpressionStatement[72385-72406]"
    } ]
  },
  "interFileMappings" : { }
}