{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};",
      "right" : "private static final String[] TagsSearchInScope = new String[]{\"applet\", \"caption\", \"html\", \"table\", \"td\", \"th\", \"marquee\", \"object\"};",
      "info" : "FieldDeclaration[596-730]:FieldDeclaration[596-730]"
    }, {
      "left" : "private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};",
      "right" : "private static final String[] TagSearchList = new String[]{\"ol\", \"ul\"};",
      "info" : "FieldDeclaration[735-806]:FieldDeclaration[735-806]"
    }, {
      "left" : "private static final String[] TagSearchButton = new String[]{\"button\"};",
      "right" : "private static final String[] TagSearchButton = new String[]{\"button\"};",
      "info" : "FieldDeclaration[811-882]:FieldDeclaration[811-882]"
    }, {
      "left" : "private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};",
      "right" : "private static final String[] TagSearchTableScope = new String[]{\"html\", \"table\"};",
      "info" : "FieldDeclaration[887-969]:FieldDeclaration[887-969]"
    }, {
      "left" : "private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"};",
      "right" : "private static final String[] TagSearchSelectScope = new String[]{\"optgroup\", \"option\"};",
      "info" : "FieldDeclaration[974-1062]:FieldDeclaration[974-1062]"
    }, {
      "left" : "private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"};",
      "right" : "private static final String[] TagSearchEndTags = new String[]{\"dd\", \"dt\", \"li\", \"option\", \"optgroup\", \"p\", \"rp\", \"rt\"};",
      "info" : "FieldDeclaration[1067-1186]:FieldDeclaration[1067-1186]"
    }, {
      "left" : "private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n            \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n            \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n            \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n            \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n            \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n            \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n            \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"};",
      "right" : "private static final String[] TagSearchSpecial = new String[]{\"address\", \"applet\", \"area\", \"article\", \"aside\", \"base\", \"basefont\", \"bgsound\",\n            \"blockquote\", \"body\", \"br\", \"button\", \"caption\", \"center\", \"col\", \"colgroup\", \"command\", \"dd\",\n            \"details\", \"dir\", \"div\", \"dl\", \"dt\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\",\n            \"frame\", \"frameset\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\",\n            \"iframe\", \"img\", \"input\", \"isindex\", \"li\", \"link\", \"listing\", \"marquee\", \"menu\", \"meta\", \"nav\",\n            \"noembed\", \"noframes\", \"noscript\", \"object\", \"ol\", \"p\", \"param\", \"plaintext\", \"pre\", \"script\",\n            \"section\", \"select\", \"style\", \"summary\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\",\n            \"title\", \"tr\", \"ul\", \"wbr\", \"xmp\"};",
      "info" : "FieldDeclaration[1191-2038]:FieldDeclaration[1191-2038]"
    }, {
      "left" : "private HtmlTreeBuilderState state;",
      "right" : "private HtmlTreeBuilderState state;",
      "info" : "FieldDeclaration[2044-2079]:FieldDeclaration[2044-2079]"
    }, {
      "left" : "private HtmlTreeBuilderState originalState;",
      "right" : "private HtmlTreeBuilderState originalState;",
      "info" : "FieldDeclaration[2105-2148]:FieldDeclaration[2105-2148]"
    }, {
      "left" : "private boolean baseUriSetFromDoc;",
      "right" : "private boolean baseUriSetFromDoc;",
      "info" : "FieldDeclaration[2181-2215]:FieldDeclaration[2181-2215]"
    }, {
      "left" : "private Element headElement;",
      "right" : "private Element headElement;",
      "info" : "FieldDeclaration[2220-2248]:FieldDeclaration[2220-2248]"
    }, {
      "left" : "private FormElement formElement;",
      "right" : "private FormElement formElement;",
      "info" : "FieldDeclaration[2281-2313]:FieldDeclaration[2281-2313]"
    }, {
      "left" : "private Element contextElement;",
      "right" : "private Element contextElement;",
      "info" : "FieldDeclaration[2346-2377]:FieldDeclaration[2346-2377]"
    }, {
      "left" : "private ArrayList<Element> formattingElements;",
      "right" : "private ArrayList<Element> formattingElements;",
      "info" : "FieldDeclaration[2450-2496]:FieldDeclaration[2450-2496]"
    }, {
      "left" : "private List<String> pendingTableCharacters;",
      "right" : "private List<String> pendingTableCharacters;",
      "info" : "FieldDeclaration[2538-2582]:FieldDeclaration[2538-2582]"
    }, {
      "left" : "private Token.EndTag emptyEnd;",
      "right" : "private Token.EndTag emptyEnd;",
      "info" : "FieldDeclaration[2623-2653]:FieldDeclaration[2623-2653]"
    }, {
      "left" : "private boolean framesetOk;",
      "right" : "private boolean framesetOk;",
      "info" : "FieldDeclaration[2683-2710]:FieldDeclaration[2683-2710]"
    }, {
      "left" : "private boolean fosterInserts;",
      "right" : "private boolean fosterInserts;",
      "info" : "FieldDeclaration[2744-2774]:FieldDeclaration[2744-2774]"
    }, {
      "left" : "private boolean fragmentParsing;",
      "right" : "private boolean fragmentParsing;",
      "info" : "FieldDeclaration[2817-2849]:FieldDeclaration[2817-2849]"
    }, {
      "left" : "HtmlTreeBuilder()",
      "right" : "HtmlTreeBuilder()",
      "info" : "MethodDeclaration[2888-2908]:MethodDeclaration[2888-2908]"
    }, {
      "left" : "ParseSettings defaultSettings()",
      "right" : "ParseSettings defaultSettings()",
      "info" : "MethodDeclaration[2914-2995]:MethodDeclaration[2914-2995]"
    }, {
      "left" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "protected void initialiseParse(Reader input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[3001-3724]:MethodDeclaration[3001-3724]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "List<Node> parseFragment(String inputFragment, Element context, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[3730-5921]:MethodDeclaration[3730-5921]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[5927-6065]:MethodDeclaration[5927-6065]"
    }, {
      "left" : "boolean process(Token token, HtmlTreeBuilderState state)",
      "right" : "boolean process(Token token, HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[6071-6208]:MethodDeclaration[6071-6208]"
    }, {
      "left" : "void transition(HtmlTreeBuilderState state)",
      "right" : "void transition(HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[6214-6293]:MethodDeclaration[6214-6293]"
    }, {
      "left" : "HtmlTreeBuilderState state()",
      "right" : "HtmlTreeBuilderState state()",
      "info" : "MethodDeclaration[6299-6357]:MethodDeclaration[6299-6357]"
    }, {
      "left" : "void markInsertionMode()",
      "right" : "void markInsertionMode()",
      "info" : "MethodDeclaration[6363-6426]:MethodDeclaration[6363-6426]"
    }, {
      "left" : "HtmlTreeBuilderState originalState()",
      "right" : "HtmlTreeBuilderState originalState()",
      "info" : "MethodDeclaration[6432-6506]:MethodDeclaration[6432-6506]"
    }, {
      "left" : "void framesetOk(boolean framesetOk)",
      "right" : "void framesetOk(boolean framesetOk)",
      "info" : "MethodDeclaration[6512-6593]:MethodDeclaration[6512-6593]"
    }, {
      "left" : "boolean framesetOk()",
      "right" : "boolean framesetOk()",
      "info" : "MethodDeclaration[6599-6654]:MethodDeclaration[6599-6654]"
    }, {
      "left" : "Document getDocument()",
      "right" : "Document getDocument()",
      "info" : "MethodDeclaration[6660-6710]:MethodDeclaration[6660-6710]"
    }, {
      "left" : "String getBaseUri()",
      "right" : "String getBaseUri()",
      "info" : "MethodDeclaration[6716-6767]:MethodDeclaration[6716-6767]"
    }, {
      "left" : "void maybeSetBaseUri(Element base)",
      "right" : "void maybeSetBaseUri(Element base)",
      "info" : "MethodDeclaration[6773-7228]:MethodDeclaration[6773-7228]"
    }, {
      "left" : "boolean isFragmentParsing()",
      "right" : "boolean isFragmentParsing()",
      "info" : "MethodDeclaration[7234-7301]:MethodDeclaration[7234-7301]"
    }, {
      "left" : "void error(HtmlTreeBuilderState state)",
      "right" : "void error(HtmlTreeBuilderState state)",
      "info" : "MethodDeclaration[7307-7518]:MethodDeclaration[7307-7518]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[7524-8326]:MethodDeclaration[7524-8326]"
    }, {
      "left" : "Element insertStartTag(String startTagName)",
      "right" : "Element insertStartTag(String startTagName)",
      "info" : "MethodDeclaration[8332-8502]:MethodDeclaration[8332-8502]"
    }, {
      "left" : "void insert(Element el)",
      "right" : "void insert(Element el)",
      "info" : "MethodDeclaration[8508-8586]:MethodDeclaration[8508-8586]"
    }, {
      "left" : "Element insertEmpty(Token.StartTag startTag)",
      "right" : "Element insertEmpty(Token.StartTag startTag)",
      "info" : "MethodDeclaration[8592-9145]:MethodDeclaration[8592-9145]"
    }, {
      "left" : "FormElement insertForm(Token.StartTag startTag, boolean onStack)",
      "right" : "FormElement insertForm(Token.StartTag startTag, boolean onStack)",
      "info" : "MethodDeclaration[9151-9477]:MethodDeclaration[9151-9477]"
    }, {
      "left" : "void insert(Token.Comment commentToken)",
      "right" : "void insert(Token.Comment commentToken)",
      "info" : "MethodDeclaration[9483-9622]:MethodDeclaration[9483-9622]"
    }, {
      "left" : "void insert(Token.Character characterToken)",
      "right" : "void insert(Token.Character characterToken)",
      "info" : "MethodDeclaration[9628-10156]:MethodDeclaration[9628-10156]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[10162-10739]:MethodDeclaration[10162-10739]"
    }, {
      "left" : "Element pop()",
      "right" : "Element pop()",
      "info" : "MethodDeclaration[10745-10836]:MethodDeclaration[10745-10836]"
    }, {
      "left" : "void push(Element element)",
      "right" : "void push(Element element)",
      "info" : "MethodDeclaration[10842-10904]:MethodDeclaration[10842-10904]"
    }, {
      "left" : "ArrayList<Element> getStack()",
      "right" : "ArrayList<Element> getStack()",
      "info" : "MethodDeclaration[10910-10969]:MethodDeclaration[10910-10969]"
    }, {
      "left" : "boolean onStack(Element el)",
      "right" : "boolean onStack(Element el)",
      "info" : "MethodDeclaration[10975-11054]:MethodDeclaration[10975-11054]"
    }, {
      "left" : "private boolean isElementInQueue(ArrayList<Element> queue, Element element)",
      "right" : "private boolean isElementInQueue(ArrayList<Element> queue, Element element)",
      "info" : "MethodDeclaration[11060-11355]:MethodDeclaration[11060-11355]"
    }, {
      "left" : "Element getFromStack(String elName)",
      "right" : "Element getFromStack(String elName)",
      "info" : "MethodDeclaration[11361-11630]:MethodDeclaration[11361-11630]"
    }, {
      "left" : "boolean removeFromStack(Element el)",
      "right" : "boolean removeFromStack(Element el)",
      "info" : "MethodDeclaration[11636-11921]:MethodDeclaration[11636-11921]"
    }, {
      "left" : "void popStackToClose(String elName)",
      "right" : "void popStackToClose(String elName)",
      "info" : "MethodDeclaration[11927-12184]:MethodDeclaration[11927-12184]"
    }, {
      "left" : "void popStackToClose(String... elNames)",
      "right" : "void popStackToClose(String... elNames)",
      "info" : "MethodDeclaration[12190-12460]:MethodDeclaration[12190-12460]"
    }, {
      "left" : "void popStackToBefore(String elName)",
      "right" : "void popStackToBefore(String elName)",
      "info" : "MethodDeclaration[12466-12765]:MethodDeclaration[12466-12765]"
    }, {
      "left" : "void clearStackToTableContext()",
      "right" : "void clearStackToTableContext()",
      "info" : "MethodDeclaration[12771-12848]:MethodDeclaration[12771-12848]"
    }, {
      "left" : "private void clearStackToContext(String... nodeNames)",
      "right" : "private void clearStackToContext(String... nodeNames)",
      "info" : "MethodDeclaration[13042-13383]:MethodDeclaration[13066-13407]"
    }, {
      "left" : "Element aboveOnStack(Element el)",
      "right" : "Element aboveOnStack(Element el)",
      "info" : "MethodDeclaration[13389-13675]:MethodDeclaration[13413-13699]"
    }, {
      "left" : "void insertOnStackAfter(Element after, Element in)",
      "right" : "void insertOnStackAfter(Element after, Element in)",
      "info" : "MethodDeclaration[13681-13843]:MethodDeclaration[13705-13867]"
    }, {
      "left" : "void replaceOnStack(Element out, Element in)",
      "right" : "void replaceOnStack(Element out, Element in)",
      "info" : "MethodDeclaration[13849-13941]:MethodDeclaration[13873-13965]"
    }, {
      "left" : "private void replaceInQueue(ArrayList<Element> queue, Element out, Element in)",
      "right" : "private void replaceInQueue(ArrayList<Element> queue, Element out, Element in)",
      "info" : "MethodDeclaration[13947-14133]:MethodDeclaration[13971-14157]"
    }, {
      "left" : "void resetInsertionMode()",
      "right" : "void resetInsertionMode()",
      "info" : "MethodDeclaration[14139-16135]:MethodDeclaration[14163-16159]"
    }, {
      "left" : "private String[] specificScopeTarget = {null};",
      "right" : "private String[] specificScopeTarget = {null};",
      "info" : "FieldDeclaration[16188-16234]:FieldDeclaration[16212-16258]"
    }, {
      "left" : "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes)",
      "right" : "private boolean inSpecificScope(String targetName, String[] baseTypes, String[] extraTypes)",
      "info" : "MethodDeclaration[16240-16460]:MethodDeclaration[16264-16484]"
    }, {
      "left" : "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes)",
      "right" : "private boolean inSpecificScope(String[] targetNames, String[] baseTypes, String[] extraTypes)",
      "info" : "MethodDeclaration[16466-17057]:MethodDeclaration[16490-17081]"
    }, {
      "left" : "boolean inScope(String[] targetNames)",
      "right" : "boolean inScope(String[] targetNames)",
      "info" : "MethodDeclaration[17063-17178]:MethodDeclaration[17087-17202]"
    }, {
      "left" : "boolean inScope(String targetName)",
      "right" : "boolean inScope(String targetName)",
      "info" : "MethodDeclaration[17184-17268]:MethodDeclaration[17208-17292]"
    }, {
      "left" : "boolean inScope(String targetName, String[] extras)",
      "right" : "boolean inScope(String targetName, String[] extras)",
      "info" : "MethodDeclaration[17274-17540]:MethodDeclaration[17298-17564]"
    }, {
      "left" : "boolean inListItemScope(String targetName)",
      "right" : "boolean inListItemScope(String targetName)",
      "info" : "MethodDeclaration[17546-17647]:MethodDeclaration[17570-17671]"
    }, {
      "left" : "boolean inButtonScope(String targetName)",
      "right" : "boolean inButtonScope(String targetName)",
      "info" : "MethodDeclaration[17653-17754]:MethodDeclaration[17677-17778]"
    }, {
      "left" : "boolean inTableScope(String targetName)",
      "right" : "boolean inTableScope(String targetName)",
      "info" : "MethodDeclaration[17760-17878]:MethodDeclaration[17784-17902]"
    }, {
      "left" : "boolean inSelectScope(String targetName)",
      "right" : "boolean inSelectScope(String targetName)",
      "info" : "MethodDeclaration[17884-18344]:MethodDeclaration[17908-18368]"
    }, {
      "left" : "void setHeadElement(Element headElement)",
      "right" : "void setHeadElement(Element headElement)",
      "info" : "MethodDeclaration[18350-18438]:MethodDeclaration[18374-18462]"
    }, {
      "left" : "Element getHeadElement()",
      "right" : "Element getHeadElement()",
      "info" : "MethodDeclaration[18444-18504]:MethodDeclaration[18468-18528]"
    }, {
      "left" : "boolean isFosterInserts()",
      "right" : "boolean isFosterInserts()",
      "info" : "MethodDeclaration[18510-18573]:MethodDeclaration[18534-18597]"
    }, {
      "left" : "void setFosterInserts(boolean fosterInserts)",
      "right" : "void setFosterInserts(boolean fosterInserts)",
      "info" : "MethodDeclaration[18579-18675]:MethodDeclaration[18603-18699]"
    }, {
      "left" : "FormElement getFormElement()",
      "right" : "FormElement getFormElement()",
      "info" : "MethodDeclaration[18681-18745]:MethodDeclaration[18705-18769]"
    }, {
      "left" : "void setFormElement(FormElement formElement)",
      "right" : "void setFormElement(FormElement formElement)",
      "info" : "MethodDeclaration[18751-18843]:MethodDeclaration[18775-18867]"
    }, {
      "left" : "void newPendingTableCharacters()",
      "right" : "void newPendingTableCharacters()",
      "info" : "MethodDeclaration[18849-18941]:MethodDeclaration[18873-18965]"
    }, {
      "left" : "List<String> getPendingTableCharacters()",
      "right" : "List<String> getPendingTableCharacters()",
      "info" : "MethodDeclaration[18947-19034]:MethodDeclaration[18971-19058]"
    }, {
      "left" : "void setPendingTableCharacters(List<String> pendingTableCharacters)",
      "right" : "void setPendingTableCharacters(List<String> pendingTableCharacters)",
      "info" : "MethodDeclaration[19040-19177]:MethodDeclaration[19064-19201]"
    }, {
      "left" : "void generateImpliedEndTags(String excludeTag)",
      "right" : "void generateImpliedEndTags(String excludeTag)",
      "info" : "MethodDeclaration[19183-20030]:MethodDeclaration[19207-20054]"
    }, {
      "left" : "void generateImpliedEndTags()",
      "right" : "void generateImpliedEndTags()",
      "info" : "MethodDeclaration[20036-20111]:MethodDeclaration[20060-20135]"
    }, {
      "left" : "boolean isSpecial(Element el)",
      "right" : "boolean isSpecial(Element el)",
      "info" : "MethodDeclaration[20117-20331]:MethodDeclaration[20141-20355]"
    }, {
      "left" : "Element lastFormattingElement()",
      "right" : "Element lastFormattingElement()",
      "info" : "MethodDeclaration[20337-20483]:MethodDeclaration[20361-20507]"
    }, {
      "left" : "Element removeLastFormattingElement()",
      "right" : "Element removeLastFormattingElement()",
      "info" : "MethodDeclaration[20489-20694]:MethodDeclaration[20513-20718]"
    }, {
      "left" : "void pushActiveFormattingElements(Element in)",
      "right" : "void pushActiveFormattingElements(Element in)",
      "info" : "MethodDeclaration[20734-21240]:MethodDeclaration[20758-21264]"
    }, {
      "left" : "private boolean isSameFormattingElement(Element a, Element b)",
      "right" : "private boolean isSameFormattingElement(Element a, Element b)",
      "info" : "MethodDeclaration[21246-21628]:MethodDeclaration[21270-21652]"
    }, {
      "left" : "void reconstructFormattingElements()",
      "right" : "void reconstructFormattingElements()",
      "info" : "MethodDeclaration[21634-23135]:MethodDeclaration[21658-23159]"
    }, {
      "left" : "void clearFormattingElementsToLastMarker()",
      "right" : "void clearFormattingElementsToLastMarker()",
      "info" : "MethodDeclaration[23141-23356]:MethodDeclaration[23165-23380]"
    }, {
      "left" : "void removeFromActiveFormattingElements(Element el)",
      "right" : "void removeFromActiveFormattingElements(Element el)",
      "info" : "MethodDeclaration[23362-23674]:MethodDeclaration[23386-23698]"
    }, {
      "left" : "boolean isInActiveFormattingElements(Element el)",
      "right" : "boolean isInActiveFormattingElements(Element el)",
      "info" : "MethodDeclaration[23680-23793]:MethodDeclaration[23704-23817]"
    }, {
      "left" : "Element getActiveFormattingElement(String nodeName)",
      "right" : "Element getActiveFormattingElement(String nodeName)",
      "info" : "MethodDeclaration[23799-24170]:MethodDeclaration[23823-24194]"
    }, {
      "left" : "void replaceActiveFormattingElement(Element out, Element in)",
      "right" : "void replaceActiveFormattingElement(Element out, Element in)",
      "info" : "MethodDeclaration[24176-24297]:MethodDeclaration[24200-24321]"
    }, {
      "left" : "void insertMarkerToFormattingElements()",
      "right" : "void insertMarkerToFormattingElements()",
      "info" : "MethodDeclaration[24303-24388]:MethodDeclaration[24327-24412]"
    }, {
      "left" : "void insertInFosterParent(Node in)",
      "right" : "void insertInFosterParent(Node in)",
      "info" : "MethodDeclaration[24394-25113]:MethodDeclaration[24418-25137]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[25119-25361]:MethodDeclaration[25143-25385]"
    } ],
    "mappings" : [
 {
      "left" : "HtmlTreeBuilder",
      "right" : "HtmlTreeBuilder",
      "info" : "SimpleName[2888-2903]:SimpleName[2888-2903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2906-2908]:Block[2906-2908]"
    }, {
      "left" : "ParseSettings",
      "right" : "ParseSettings",
      "info" : "SimpleType[2914-2927]:SimpleType[2914-2927]"
    }, {
      "left" : "defaultSettings",
      "right" : "defaultSettings",
      "info" : "SimpleName[2928-2943]:SimpleName[2928-2943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2946-2995]:Block[2946-2995]"
    }, {
      "left" : "return ParseSettings.htmlDefault;",
      "right" : "return ParseSettings.htmlDefault;",
      "info" : "ReturnStatement[2956-2989]:ReturnStatement[2956-2989]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3001-3010]:MarkerAnnotation[3001-3010]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3015-3024]:Modifier[3015-3024]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3025-3029]:PrimitiveType[3025-3029]"
    }, {
      "left" : "initialiseParse",
      "right" : "initialiseParse",
      "info" : "SimpleName[3030-3045]:SimpleName[3030-3045]"
    }, {
      "left" : "Reader input",
      "right" : "Reader input",
      "info" : "SingleVariableDeclaration[3046-3058]:SingleVariableDeclaration[3046-3058]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[3060-3074]:SingleVariableDeclaration[3060-3074]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[3076-3097]:SingleVariableDeclaration[3076-3097]"
    }, {
      "left" : "ParseSettings settings",
      "right" : "ParseSettings settings",
      "info" : "SingleVariableDeclaration[3099-3121]:SingleVariableDeclaration[3099-3121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3123-3724]:Block[3123-3724]"
    }, {
      "left" : "super.initialiseParse(input, baseUri, errors, settings);",
      "right" : "super.initialiseParse(input, baseUri, errors, settings);",
      "info" : "ExpressionStatement[3133-3189]:ExpressionStatement[3133-3189]"
    }, {
      "left" : "state = HtmlTreeBuilderState.Initial;",
      "right" : "state = HtmlTreeBuilderState.Initial;",
      "info" : "ExpressionStatement[3299-3336]:ExpressionStatement[3299-3336]"
    }, {
      "left" : "originalState = null;",
      "right" : "originalState = null;",
      "info" : "ExpressionStatement[3345-3366]:ExpressionStatement[3345-3366]"
    }, {
      "left" : "baseUriSetFromDoc = false;",
      "right" : "baseUriSetFromDoc = false;",
      "info" : "ExpressionStatement[3375-3401]:ExpressionStatement[3375-3401]"
    }, {
      "left" : "headElement = null;",
      "right" : "headElement = null;",
      "info" : "ExpressionStatement[3410-3429]:ExpressionStatement[3410-3429]"
    }, {
      "left" : "formElement = null;",
      "right" : "formElement = null;",
      "info" : "ExpressionStatement[3438-3457]:ExpressionStatement[3438-3457]"
    }, {
      "left" : "contextElement = null;",
      "right" : "contextElement = null;",
      "info" : "ExpressionStatement[3466-3488]:ExpressionStatement[3466-3488]"
    }, {
      "left" : "formattingElements = new ArrayList<>();",
      "right" : "formattingElements = new ArrayList<>();",
      "info" : "ExpressionStatement[3497-3536]:ExpressionStatement[3497-3536]"
    }, {
      "left" : "pendingTableCharacters = new ArrayList<>();",
      "right" : "pendingTableCharacters = new ArrayList<>();",
      "info" : "ExpressionStatement[3545-3588]:ExpressionStatement[3545-3588]"
    }, {
      "left" : "emptyEnd = new Token.EndTag();",
      "right" : "emptyEnd = new Token.EndTag();",
      "info" : "ExpressionStatement[3597-3627]:ExpressionStatement[3597-3627]"
    }, {
      "left" : "framesetOk = true;",
      "right" : "framesetOk = true;",
      "info" : "ExpressionStatement[3636-3654]:ExpressionStatement[3636-3654]"
    }, {
      "left" : "fosterInserts = false;",
      "right" : "fosterInserts = false;",
      "info" : "ExpressionStatement[3663-3685]:ExpressionStatement[3663-3685]"
    }, {
      "left" : "fragmentParsing = false;",
      "right" : "fragmentParsing = false;",
      "info" : "ExpressionStatement[3694-3718]:ExpressionStatement[3694-3718]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[3730-3740]:ParameterizedType[3730-3740]"
    }, {
      "left" : "parseFragment",
      "right" : "parseFragment",
      "info" : "SimpleName[3741-3754]:SimpleName[3741-3754]"
    }, {
      "left" : "String inputFragment",
      "right" : "String inputFragment",
      "info" : "SingleVariableDeclaration[3755-3775]:SingleVariableDeclaration[3755-3775]"
    }, {
      "left" : "Element context",
      "right" : "Element context",
      "info" : "SingleVariableDeclaration[3777-3792]:SingleVariableDeclaration[3777-3792]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[3794-3808]:SingleVariableDeclaration[3794-3808]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[3810-3831]:SingleVariableDeclaration[3810-3831]"
    }, {
      "left" : "ParseSettings settings",
      "right" : "ParseSettings settings",
      "info" : "SingleVariableDeclaration[3833-3855]:SingleVariableDeclaration[3833-3855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3857-5921]:Block[3857-5921]"
    }, {
      "left" : "state = HtmlTreeBuilderState.Initial;",
      "right" : "state = HtmlTreeBuilderState.Initial;",
      "info" : "ExpressionStatement[3898-3935]:ExpressionStatement[3898-3935]"
    }, {
      "left" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "right" : "initialiseParse(new StringReader(inputFragment), baseUri, errors, settings);",
      "info" : "ExpressionStatement[3944-4020]:ExpressionStatement[3944-4020]"
    }, {
      "left" : "contextElement = context;",
      "right" : "contextElement = context;",
      "info" : "ExpressionStatement[4029-4054]:ExpressionStatement[4029-4054]"
    }, {
      "left" : "fragmentParsing = true;",
      "right" : "fragmentParsing = true;",
      "info" : "ExpressionStatement[4063-4086]:ExpressionStatement[4063-4086]"
    }, {
      "left" : "Element root = null;",
      "right" : "Element root = null;",
      "info" : "VariableDeclarationStatement[4095-4115]:VariableDeclarationStatement[4095-4115]"
    }, {
      "left" : "if (context != null)",
      "right" : "if (context != null)",
      "info" : "IfStatement[4125-5776]:IfStatement[4125-5776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4146-5776]:Block[4146-5776]"
    }, {
      "left" : "if (context.ownerDocument() != null)",
      "right" : "if (context.ownerDocument() != null)",
      "info" : "IfStatement[4160-4283]:IfStatement[4160-4283]"
    }, {
      "left" : "doc.quirksMode(context.ownerDocument().quirksMode());",
      "right" : "doc.quirksMode(context.ownerDocument().quirksMode());",
      "info" : "ExpressionStatement[4230-4283]:ExpressionStatement[4230-4283]"
    }, {
      "left" : "String contextTag = context.tagName();",
      "right" : "String contextTag = context.tagName();",
      "info" : "VariableDeclarationStatement[4344-4382]:VariableDeclarationStatement[4344-4382]"
    }, {
      "left" : "if (StringUtil.in(contextTag, \"title\", \"textarea\"))",
      "right" : "if (StringUtil.in(contextTag, \"title\", \"textarea\"))",
      "info" : "IfStatement[4395-5115]:IfStatement[4395-5115]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[4463-4507]:ExpressionStatement[4463-4507]"
    }, {
      "left" : "if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))",
      "right" : "if (StringUtil.in(contextTag, \"iframe\", \"noembed\", \"noframes\", \"style\", \"xmp\"))",
      "info" : "IfStatement[4525-5115]:IfStatement[4525-5115]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[4621-4666]:ExpressionStatement[4621-4666]"
    }, {
      "left" : "if (contextTag.equals(\"script\"))",
      "right" : "if (contextTag.equals(\"script\"))",
      "info" : "IfStatement[4684-5115]:IfStatement[4684-5115]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.ScriptData);",
      "right" : "tokeniser.transition(TokeniserState.ScriptData);",
      "info" : "ExpressionStatement[4733-4781]:ExpressionStatement[4733-4781]"
    }, {
      "left" : "if (contextTag.equals((\"noscript\")))",
      "right" : "if (contextTag.equals((\"noscript\")))",
      "info" : "IfStatement[4799-5115]:IfStatement[4799-5115]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[4852-4894]:ExpressionStatement[4852-4894]"
    }, {
      "left" : "if (contextTag.equals(\"plaintext\"))",
      "right" : "if (contextTag.equals(\"plaintext\"))",
      "info" : "IfStatement[4945-5115]:IfStatement[4945-5115]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[4997-5039]:ExpressionStatement[4997-5039]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[5073-5115]:ExpressionStatement[5073-5115]"
    }, {
      "left" : "root = new Element(Tag.valueOf(\"html\", settings), baseUri);",
      "right" : "root = new Element(Tag.valueOf(\"html\", settings), baseUri);",
      "info" : "ExpressionStatement[5140-5199]:ExpressionStatement[5140-5199]"
    }, {
      "left" : "doc.appendChild(root);",
      "right" : "doc.appendChild(root);",
      "info" : "ExpressionStatement[5212-5234]:ExpressionStatement[5212-5234]"
    }, {
      "left" : "stack.add(root);",
      "right" : "stack.add(root);",
      "info" : "ExpressionStatement[5247-5263]:ExpressionStatement[5247-5263]"
    }, {
      "left" : "resetInsertionMode();",
      "right" : "resetInsertionMode();",
      "info" : "ExpressionStatement[5276-5297]:ExpressionStatement[5276-5297]"
    }, {
      "left" : "Elements contextChain = context.parents();",
      "right" : "Elements contextChain = context.parents();",
      "info" : "VariableDeclarationStatement[5465-5507]:VariableDeclarationStatement[5465-5507]"
    }, {
      "left" : "contextChain.add(0, context);",
      "right" : "contextChain.add(0, context);",
      "info" : "ExpressionStatement[5520-5549]:ExpressionStatement[5520-5549]"
    }, {
      "left" : "for (Element parent: contextChain)",
      "right" : "for (Element parent: contextChain)",
      "info" : "EnhancedForStatement[5562-5766]:EnhancedForStatement[5562-5766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5597-5766]:Block[5597-5766]"
    }, {
      "left" : "if (parent instanceof FormElement)",
      "right" : "if (parent instanceof FormElement)",
      "info" : "IfStatement[5615-5752]:IfStatement[5615-5752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5650-5752]:Block[5650-5752]"
    }, {
      "left" : "formElement = (FormElement) parent;",
      "right" : "formElement = (FormElement) parent;",
      "info" : "ExpressionStatement[5672-5707]:ExpressionStatement[5672-5707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5728-5734]:BreakStatement[5728-5734]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[5786-5798]:ExpressionStatement[5786-5798]"
    }, {
      "left" : "if (context != null)",
      "right" : "if (context != null)",
      "info" : "IfStatement[5807-5915]:IfStatement[5807-5915]"
    }, {
      "left" : "return root.childNodes();",
      "right" : "return root.childNodes();",
      "info" : "ReturnStatement[5840-5865]:ReturnStatement[5840-5865]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[5891-5915]:ReturnStatement[5891-5915]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5927-5936]:MarkerAnnotation[5927-5936]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5941-5950]:Modifier[5941-5950]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5951-5958]:PrimitiveType[5951-5958]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[5959-5966]:SimpleName[5959-5966]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[5967-5978]:SingleVariableDeclaration[5967-5978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5980-6065]:Block[5980-6065]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[5990-6011]:ExpressionStatement[5990-6011]"
    }, {
      "left" : "return this.state.process(token, this);",
      "right" : "return this.state.process(token, this);",
      "info" : "ReturnStatement[6020-6059]:ReturnStatement[6020-6059]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6071-6078]:PrimitiveType[6071-6078]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[6079-6086]:SimpleName[6079-6086]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[6087-6098]:SingleVariableDeclaration[6087-6098]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[6100-6126]:SingleVariableDeclaration[6100-6126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6128-6208]:Block[6128-6208]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[6138-6159]:ExpressionStatement[6138-6159]"
    }, {
      "left" : "return state.process(token, this);",
      "right" : "return state.process(token, this);",
      "info" : "ReturnStatement[6168-6202]:ReturnStatement[6168-6202]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6214-6218]:PrimitiveType[6214-6218]"
    }, {
      "left" : "transition",
      "right" : "transition",
      "info" : "SimpleName[6219-6229]:SimpleName[6219-6229]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[6230-6256]:SingleVariableDeclaration[6230-6256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6258-6293]:Block[6258-6293]"
    }, {
      "left" : "this.state = state;",
      "right" : "this.state = state;",
      "info" : "ExpressionStatement[6268-6287]:ExpressionStatement[6268-6287]"
    }, {
      "left" : "HtmlTreeBuilderState",
      "right" : "HtmlTreeBuilderState",
      "info" : "SimpleType[6299-6319]:SimpleType[6299-6319]"
    }, {
      "left" : "state",
      "right" : "state",
      "info" : "SimpleName[6320-6325]:SimpleName[6320-6325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6328-6357]:Block[6328-6357]"
    }, {
      "left" : "return state;",
      "right" : "return state;",
      "info" : "ReturnStatement[6338-6351]:ReturnStatement[6338-6351]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6363-6367]:PrimitiveType[6363-6367]"
    }, {
      "left" : "markInsertionMode",
      "right" : "markInsertionMode",
      "info" : "SimpleName[6368-6385]:SimpleName[6368-6385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6388-6426]:Block[6388-6426]"
    }, {
      "left" : "originalState = state;",
      "right" : "originalState = state;",
      "info" : "ExpressionStatement[6398-6420]:ExpressionStatement[6398-6420]"
    }, {
      "left" : "HtmlTreeBuilderState",
      "right" : "HtmlTreeBuilderState",
      "info" : "SimpleType[6432-6452]:SimpleType[6432-6452]"
    }, {
      "left" : "originalState",
      "right" : "originalState",
      "info" : "SimpleName[6453-6466]:SimpleName[6453-6466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6469-6506]:Block[6469-6506]"
    }, {
      "left" : "return originalState;",
      "right" : "return originalState;",
      "info" : "ReturnStatement[6479-6500]:ReturnStatement[6479-6500]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6512-6516]:PrimitiveType[6512-6516]"
    }, {
      "left" : "framesetOk",
      "right" : "framesetOk",
      "info" : "SimpleName[6517-6527]:SimpleName[6517-6527]"
    }, {
      "left" : "boolean framesetOk",
      "right" : "boolean framesetOk",
      "info" : "SingleVariableDeclaration[6528-6546]:SingleVariableDeclaration[6528-6546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6548-6593]:Block[6548-6593]"
    }, {
      "left" : "this.framesetOk = framesetOk;",
      "right" : "this.framesetOk = framesetOk;",
      "info" : "ExpressionStatement[6558-6587]:ExpressionStatement[6558-6587]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6599-6606]:PrimitiveType[6599-6606]"
    }, {
      "left" : "framesetOk",
      "right" : "framesetOk",
      "info" : "SimpleName[6607-6617]:SimpleName[6607-6617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6620-6654]:Block[6620-6654]"
    }, {
      "left" : "return framesetOk;",
      "right" : "return framesetOk;",
      "info" : "ReturnStatement[6630-6648]:ReturnStatement[6630-6648]"
    }, {
      "left" : "Document",
      "right" : "Document",
      "info" : "SimpleType[6660-6668]:SimpleType[6660-6668]"
    }, {
      "left" : "getDocument",
      "right" : "getDocument",
      "info" : "SimpleName[6669-6680]:SimpleName[6669-6680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6683-6710]:Block[6683-6710]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[6693-6704]:ReturnStatement[6693-6704]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6716-6722]:SimpleType[6716-6722]"
    }, {
      "left" : "getBaseUri",
      "right" : "getBaseUri",
      "info" : "SimpleName[6723-6733]:SimpleName[6723-6733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6736-6767]:Block[6736-6767]"
    }, {
      "left" : "return baseUri;",
      "right" : "return baseUri;",
      "info" : "ReturnStatement[6746-6761]:ReturnStatement[6746-6761]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6773-6777]:PrimitiveType[6773-6777]"
    }, {
      "left" : "maybeSetBaseUri",
      "right" : "maybeSetBaseUri",
      "info" : "SimpleName[6778-6793]:SimpleName[6778-6793]"
    }, {
      "left" : "Element base",
      "right" : "Element base",
      "info" : "SingleVariableDeclaration[6794-6806]:SingleVariableDeclaration[6794-6806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6808-7228]:Block[6808-7228]"
    }, {
      "left" : "if (baseUriSetFromDoc)",
      "right" : "if (baseUriSetFromDoc)",
      "info" : "IfStatement[6818-6909]:IfStatement[6818-6909]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6902-6909]:ReturnStatement[6902-6909]"
    }, {
      "left" : "String href = base.absUrl(\"href\");",
      "right" : "String href = base.absUrl(\"href\");",
      "info" : "VariableDeclarationStatement[6919-6953]:VariableDeclarationStatement[6919-6953]"
    }, {
      "left" : "if (href.length() != 0)",
      "right" : "if (href.length() != 0)",
      "info" : "IfStatement[6962-7222]:IfStatement[6962-7222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6986-7222]:Block[6986-7222]"
    }, {
      "left" : "baseUri = href;",
      "right" : "baseUri = href;",
      "info" : "ExpressionStatement[7028-7043]:ExpressionStatement[7028-7043]"
    }, {
      "left" : "baseUriSetFromDoc = true;",
      "right" : "baseUriSetFromDoc = true;",
      "info" : "ExpressionStatement[7056-7081]:ExpressionStatement[7056-7081]"
    }, {
      "left" : "doc.setBaseUri(href);",
      "right" : "doc.setBaseUri(href);",
      "info" : "ExpressionStatement[7094-7115]:ExpressionStatement[7094-7115]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7234-7241]:PrimitiveType[7234-7241]"
    }, {
      "left" : "isFragmentParsing",
      "right" : "isFragmentParsing",
      "info" : "SimpleName[7242-7259]:SimpleName[7242-7259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7262-7301]:Block[7262-7301]"
    }, {
      "left" : "return fragmentParsing;",
      "right" : "return fragmentParsing;",
      "info" : "ReturnStatement[7272-7295]:ReturnStatement[7272-7295]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7307-7311]:PrimitiveType[7307-7311]"
    }, {
      "left" : "error",
      "right" : "error",
      "info" : "SimpleName[7312-7317]:SimpleName[7312-7317]"
    }, {
      "left" : "HtmlTreeBuilderState state",
      "right" : "HtmlTreeBuilderState state",
      "info" : "SingleVariableDeclaration[7318-7344]:SingleVariableDeclaration[7318-7344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7346-7518]:Block[7346-7518]"
    }, {
      "left" : "if (errors.canAddError())",
      "right" : "if (errors.canAddError())",
      "info" : "IfStatement[7356-7512]:IfStatement[7356-7512]"
    }, {
      "left" : "errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));",
      "right" : "errors.add(new ParseError(reader.pos(), \"Unexpected token [%s] when in state [%s]\", currentToken.tokenType(), state));",
      "info" : "ExpressionStatement[7394-7512]:ExpressionStatement[7394-7512]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[7524-7531]:SimpleType[7524-7531]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[7532-7538]:SimpleName[7532-7538]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[7539-7562]:SingleVariableDeclaration[7539-7562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7564-8326]:Block[7564-8326]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[7726-8138]:IfStatement[7726-8138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7756-8138]:Block[7756-8138]"
    }, {
      "left" : "Element el = insertEmpty(startTag);",
      "right" : "Element el = insertEmpty(startTag);",
      "info" : "VariableDeclarationStatement[7770-7805]:VariableDeclarationStatement[7770-7805]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[7818-7832]:ExpressionStatement[7818-7832]"
    }, {
      "left" : "tokeniser.transition(TokeniserState.Data);",
      "right" : "tokeniser.transition(TokeniserState.Data);",
      "info" : "ExpressionStatement[7845-7887]:ExpressionStatement[7845-7887]"
    }, {
      "left" : "tokeniser.emit(emptyEnd.reset().name(el.tagName()));",
      "right" : "tokeniser.emit(emptyEnd.reset().name(el.tagName()));",
      "info" : "ExpressionStatement[7971-8023]:ExpressionStatement[7971-8023]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[8118-8128]:ReturnStatement[8118-8128]"
    }, {
      "left" : "Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));",
      "right" : "Element el = new Element(Tag.valueOf(startTag.name(), settings), baseUri, settings.normalizeAttributes(startTag.attributes));",
      "info" : "VariableDeclarationStatement[8156-8281]:VariableDeclarationStatement[8156-8281]"
    }, {
      "left" : "insert(el);",
      "right" : "insert(el);",
      "info" : "ExpressionStatement[8290-8301]:ExpressionStatement[8290-8301]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[8310-8320]:ReturnStatement[8310-8320]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[8332-8339]:SimpleType[8332-8339]"
    }, {
      "left" : "insertStartTag",
      "right" : "insertStartTag",
      "info" : "SimpleName[8340-8354]:SimpleName[8340-8354]"
    }, {
      "left" : "String startTagName",
      "right" : "String startTagName",
      "info" : "SingleVariableDeclaration[8355-8374]:SingleVariableDeclaration[8355-8374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8376-8502]:Block[8376-8502]"
    }, {
      "left" : "Element el = new Element(Tag.valueOf(startTagName, settings), baseUri);",
      "right" : "Element el = new Element(Tag.valueOf(startTagName, settings), baseUri);",
      "info" : "VariableDeclarationStatement[8386-8457]:VariableDeclarationStatement[8386-8457]"
    }, {
      "left" : "insert(el);",
      "right" : "insert(el);",
      "info" : "ExpressionStatement[8466-8477]:ExpressionStatement[8466-8477]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[8486-8496]:ReturnStatement[8486-8496]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8508-8512]:PrimitiveType[8508-8512]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[8513-8519]:SimpleName[8513-8519]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[8520-8530]:SingleVariableDeclaration[8520-8530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8532-8586]:Block[8532-8586]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[8542-8557]:ExpressionStatement[8542-8557]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[8566-8580]:ExpressionStatement[8566-8580]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[8592-8599]:SimpleType[8592-8599]"
    }, {
      "left" : "insertEmpty",
      "right" : "insertEmpty",
      "info" : "SimpleName[8600-8611]:SimpleName[8600-8611]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[8612-8635]:SingleVariableDeclaration[8612-8635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8637-9145]:Block[8637-9145]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "info" : "VariableDeclarationStatement[8647-8696]:VariableDeclarationStatement[8647-8696]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "right" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[8705-8765]:VariableDeclarationStatement[8705-8765]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[8774-8789]:ExpressionStatement[8774-8789]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[8798-9120]:IfStatement[8798-9120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8828-9120]:Block[8828-9120]"
    }, {
      "left" : "if (tag.isKnownTag())",
      "right" : "if (tag.isKnownTag())",
      "info" : "IfStatement[8842-9110]:IfStatement[8842-9110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8864-8998]:Block[8864-8998]"
    }, {
      "left" : "if (!tag.isEmpty())",
      "right" : "if (!tag.isEmpty())",
      "info" : "IfStatement[8882-8984]:IfStatement[8882-8984]"
    }, {
      "left" : "tokeniser.error(\"Tag cannot be self closing; not a void tag\");",
      "right" : "tokeniser.error(\"Tag cannot be self closing; not a void tag\");",
      "info" : "ExpressionStatement[8922-8984]:ExpressionStatement[8922-8984]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[9089-9110]:ExpressionStatement[9089-9110]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[9129-9139]:ReturnStatement[9129-9139]"
    }, {
      "left" : "FormElement",
      "right" : "FormElement",
      "info" : "SimpleType[9151-9162]:SimpleType[9151-9162]"
    }, {
      "left" : "insertForm",
      "right" : "insertForm",
      "info" : "SimpleName[9163-9173]:SimpleName[9163-9173]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[9174-9197]:SingleVariableDeclaration[9174-9197]"
    }, {
      "left" : "boolean onStack",
      "right" : "boolean onStack",
      "info" : "SingleVariableDeclaration[9199-9214]:SingleVariableDeclaration[9199-9214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9216-9477]:Block[9216-9477]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "info" : "VariableDeclarationStatement[9226-9275]:VariableDeclarationStatement[9226-9275]"
    }, {
      "left" : "FormElement el = new FormElement(tag, baseUri, startTag.attributes);",
      "right" : "FormElement el = new FormElement(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[9284-9352]:VariableDeclarationStatement[9284-9352]"
    }, {
      "left" : "setFormElement(el);",
      "right" : "setFormElement(el);",
      "info" : "ExpressionStatement[9361-9380]:ExpressionStatement[9361-9380]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[9389-9404]:ExpressionStatement[9389-9404]"
    }, {
      "left" : "if (onStack)",
      "right" : "if (onStack)",
      "info" : "IfStatement[9413-9452]:IfStatement[9413-9452]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[9438-9452]:ExpressionStatement[9438-9452]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[9461-9471]:ReturnStatement[9461-9471]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9483-9487]:PrimitiveType[9483-9487]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[9488-9494]:SimpleName[9488-9494]"
    }, {
      "left" : "Token.Comment commentToken",
      "right" : "Token.Comment commentToken",
      "info" : "SingleVariableDeclaration[9495-9521]:SingleVariableDeclaration[9495-9521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9523-9622]:Block[9523-9622]"
    }, {
      "left" : "Comment comment = new Comment(commentToken.getData());",
      "right" : "Comment comment = new Comment(commentToken.getData());",
      "info" : "VariableDeclarationStatement[9533-9587]:VariableDeclarationStatement[9533-9587]"
    }, {
      "left" : "insertNode(comment);",
      "right" : "insertNode(comment);",
      "info" : "ExpressionStatement[9596-9616]:ExpressionStatement[9596-9616]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9628-9632]:PrimitiveType[9628-9632]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[9633-9639]:SimpleName[9633-9639]"
    }, {
      "left" : "Token.Character characterToken",
      "right" : "Token.Character characterToken",
      "info" : "SingleVariableDeclaration[9640-9670]:SingleVariableDeclaration[9640-9670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9672-10156]:Block[9672-10156]"
    }, {
      "left" : "Node node;",
      "right" : "Node node;",
      "info" : "VariableDeclarationStatement[9682-9692]:VariableDeclarationStatement[9682-9692]"
    }, {
      "left" : "String tagName = currentElement().tagName();",
      "right" : "String tagName = currentElement().tagName();",
      "info" : "VariableDeclarationStatement[9778-9822]:VariableDeclarationStatement[9778-9822]"
    }, {
      "left" : "if (tagName.equals(\"script\") || tagName.equals(\"style\"))",
      "right" : "if (tagName.equals(\"script\") || tagName.equals(\"style\"))",
      "info" : "IfStatement[9831-10018]:IfStatement[9831-10018]"
    }, {
      "left" : "node = new DataNode(characterToken.getData());",
      "right" : "node = new DataNode(characterToken.getData());",
      "info" : "ExpressionStatement[9900-9946]:ExpressionStatement[9900-9946]"
    }, {
      "left" : "node = new TextNode(characterToken.getData());",
      "right" : "node = new TextNode(characterToken.getData());",
      "info" : "ExpressionStatement[9972-10018]:ExpressionStatement[9972-10018]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[10027-10062]:ExpressionStatement[10027-10062]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10162-10169]:Modifier[10162-10169]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10170-10174]:PrimitiveType[10170-10174]"
    }, {
      "left" : "insertNode",
      "right" : "insertNode",
      "info" : "SimpleName[10175-10185]:SimpleName[10175-10185]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[10186-10195]:SingleVariableDeclaration[10186-10195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10197-10739]:Block[10197-10739]"
    }, {
      "left" : "if (stack.size() == 0)",
      "right" : "if (stack.size() == 0)",
      "info" : "IfStatement[10300-10494]:IfStatement[10300-10494]"
    }, {
      "left" : "doc.appendChild(node);",
      "right" : "doc.appendChild(node);",
      "info" : "ExpressionStatement[10335-10357]:ExpressionStatement[10335-10357]"
    }, {
      "left" : "if (isFosterInserts())",
      "right" : "if (isFosterInserts())",
      "info" : "IfStatement[10371-10494]:IfStatement[10371-10494]"
    }, {
      "left" : "insertInFosterParent(node);",
      "right" : "insertInFosterParent(node);",
      "info" : "ExpressionStatement[10406-10433]:ExpressionStatement[10406-10433]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[10459-10494]:ExpressionStatement[10459-10494]"
    }, {
      "left" : "if (node instanceof Element && ((Element) node).tag().isFormListed())",
      "right" : "if (node instanceof Element && ((Element) node).tag().isFormListed())",
      "info" : "IfStatement[10559-10733]:IfStatement[10559-10733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10629-10733]:Block[10629-10733]"
    }, {
      "left" : "if (formElement != null)",
      "right" : "if (formElement != null)",
      "info" : "IfStatement[10643-10723]:IfStatement[10643-10723]"
    }, {
      "left" : "formElement.addElement((Element) node);",
      "right" : "formElement.addElement((Element) node);",
      "info" : "ExpressionStatement[10684-10723]:ExpressionStatement[10684-10723]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[10745-10752]:SimpleType[10745-10752]"
    }, {
      "left" : "pop",
      "right" : "pop",
      "info" : "SimpleName[10753-10756]:SimpleName[10753-10756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10759-10836]:Block[10759-10836]"
    }, {
      "left" : "int size = stack.size();",
      "right" : "int size = stack.size();",
      "info" : "VariableDeclarationStatement[10769-10793]:VariableDeclarationStatement[10769-10793]"
    }, {
      "left" : "return stack.remove(size-1);",
      "right" : "return stack.remove(size-1);",
      "info" : "ReturnStatement[10802-10830]:ReturnStatement[10802-10830]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10842-10846]:PrimitiveType[10842-10846]"
    }, {
      "left" : "push",
      "right" : "push",
      "info" : "SimpleName[10847-10851]:SimpleName[10847-10851]"
    }, {
      "left" : "Element element",
      "right" : "Element element",
      "info" : "SingleVariableDeclaration[10852-10867]:SingleVariableDeclaration[10852-10867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10869-10904]:Block[10869-10904]"
    }, {
      "left" : "stack.add(element);",
      "right" : "stack.add(element);",
      "info" : "ExpressionStatement[10879-10898]:ExpressionStatement[10879-10898]"
    }, {
      "left" : "ArrayList<Element>",
      "right" : "ArrayList<Element>",
      "info" : "ParameterizedType[10910-10928]:ParameterizedType[10910-10928]"
    }, {
      "left" : "getStack",
      "right" : "getStack",
      "info" : "SimpleName[10929-10937]:SimpleName[10929-10937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10940-10969]:Block[10940-10969]"
    }, {
      "left" : "return stack;",
      "right" : "return stack;",
      "info" : "ReturnStatement[10950-10963]:ReturnStatement[10950-10963]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10975-10982]:PrimitiveType[10975-10982]"
    }, {
      "left" : "onStack",
      "right" : "onStack",
      "info" : "SimpleName[10983-10990]:SimpleName[10983-10990]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[10991-11001]:SingleVariableDeclaration[10991-11001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11003-11054]:Block[11003-11054]"
    }, {
      "left" : "return isElementInQueue(stack, el);",
      "right" : "return isElementInQueue(stack, el);",
      "info" : "ReturnStatement[11013-11048]:ReturnStatement[11013-11048]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11060-11067]:Modifier[11060-11067]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11068-11075]:PrimitiveType[11068-11075]"
    }, {
      "left" : "isElementInQueue",
      "right" : "isElementInQueue",
      "info" : "SimpleName[11076-11092]:SimpleName[11076-11092]"
    }, {
      "left" : "ArrayList<Element> queue",
      "right" : "ArrayList<Element> queue",
      "info" : "SingleVariableDeclaration[11093-11117]:SingleVariableDeclaration[11093-11117]"
    }, {
      "left" : "Element element",
      "right" : "Element element",
      "info" : "SingleVariableDeclaration[11119-11134]:SingleVariableDeclaration[11119-11134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11136-11355]:Block[11136-11355]"
    }, {
      "left" : "for (int pos = queue.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = queue.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11146-11327]:ForStatement[11146-11327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11195-11327]:Block[11195-11327]"
    }, {
      "left" : "Element next = queue.get(pos);",
      "right" : "Element next = queue.get(pos);",
      "info" : "VariableDeclarationStatement[11209-11239]:VariableDeclarationStatement[11209-11239]"
    }, {
      "left" : "if (next == element)",
      "right" : "if (next == element)",
      "info" : "IfStatement[11252-11317]:IfStatement[11252-11317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11273-11317]:Block[11273-11317]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11291-11303]:ReturnStatement[11291-11303]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11336-11349]:ReturnStatement[11336-11349]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[11361-11368]:SimpleType[11361-11368]"
    }, {
      "left" : "getFromStack",
      "right" : "getFromStack",
      "info" : "SimpleName[11369-11381]:SimpleName[11369-11381]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[11382-11395]:SingleVariableDeclaration[11382-11395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11397-11630]:Block[11397-11630]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11407-11603]:ForStatement[11407-11603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11456-11603]:Block[11456-11603]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[11470-11500]:VariableDeclarationStatement[11470-11500]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[11513-11593]:IfStatement[11513-11593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11549-11593]:Block[11549-11593]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[11567-11579]:ReturnStatement[11567-11579]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11612-11624]:ReturnStatement[11612-11624]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11636-11643]:PrimitiveType[11636-11643]"
    }, {
      "left" : "removeFromStack",
      "right" : "removeFromStack",
      "info" : "SimpleName[11644-11659]:SimpleName[11644-11659]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[11660-11670]:SingleVariableDeclaration[11660-11670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11672-11921]:Block[11672-11921]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11682-11893]:ForStatement[11682-11893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11731-11893]:Block[11731-11893]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[11745-11775]:VariableDeclarationStatement[11745-11775]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[11788-11883]:IfStatement[11788-11883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11804-11883]:Block[11804-11883]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[11822-11840]:ExpressionStatement[11822-11840]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11857-11869]:ReturnStatement[11857-11869]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11902-11915]:ReturnStatement[11902-11915]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11927-11931]:PrimitiveType[11927-11931]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[11932-11947]:SimpleName[11932-11947]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[11948-11961]:SingleVariableDeclaration[11948-11961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11963-12184]:Block[11963-12184]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[11973-12178]:ForStatement[11973-12178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12022-12178]:Block[12022-12178]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[12036-12066]:VariableDeclarationStatement[12036-12066]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[12079-12097]:ExpressionStatement[12079-12097]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[12110-12168]:IfStatement[12110-12168]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12162-12168]:BreakStatement[12162-12168]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12190-12194]:PrimitiveType[12190-12194]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[12195-12210]:SimpleName[12195-12210]"
    }, {
      "left" : "String... elNames",
      "right" : "String... elNames",
      "info" : "SingleVariableDeclaration[12211-12228]:SingleVariableDeclaration[12211-12228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12230-12460]:Block[12230-12460]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[12240-12454]:ForStatement[12240-12454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12289-12454]:Block[12289-12454]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[12303-12333]:VariableDeclarationStatement[12303-12333]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[12346-12364]:ExpressionStatement[12346-12364]"
    }, {
      "left" : "if (StringUtil.in(next.nodeName(), elNames))",
      "right" : "if (StringUtil.in(next.nodeName(), elNames))",
      "info" : "IfStatement[12377-12444]:IfStatement[12377-12444]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12438-12444]:BreakStatement[12438-12444]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12466-12470]:PrimitiveType[12466-12470]"
    }, {
      "left" : "popStackToBefore",
      "right" : "popStackToBefore",
      "info" : "SimpleName[12471-12487]:SimpleName[12471-12487]"
    }, {
      "left" : "String elName",
      "right" : "String elName",
      "info" : "SingleVariableDeclaration[12488-12501]:SingleVariableDeclaration[12488-12501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12503-12765]:Block[12503-12765]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[12513-12759]:ForStatement[12513-12759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12562-12759]:Block[12562-12759]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[12576-12606]:VariableDeclarationStatement[12576-12606]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[12619-12749]:IfStatement[12619-12749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12655-12693]:Block[12655-12693]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12673-12679]:BreakStatement[12673-12679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12699-12749]:Block[12699-12749]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[12717-12735]:ExpressionStatement[12717-12735]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12771-12775]:PrimitiveType[12771-12775]"
    }, {
      "left" : "clearStackToTableContext",
      "right" : "clearStackToTableContext",
      "info" : "SimpleName[12776-12800]:SimpleName[12776-12800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12803-12848]:Block[12803-12848]"
    }, {
      "left" : "clearStackToContext(\"table\");",
      "right" : "clearStackToContext(\"table\");",
      "info" : "ExpressionStatement[12813-12842]:ExpressionStatement[12813-12842]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13042-13049]:Modifier[13066-13073]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13050-13054]:PrimitiveType[13074-13078]"
    }, {
      "left" : "clearStackToContext",
      "right" : "clearStackToContext",
      "info" : "SimpleName[13055-13074]:SimpleName[13079-13098]"
    }, {
      "left" : "String... nodeNames",
      "right" : "String... nodeNames",
      "info" : "SingleVariableDeclaration[13075-13094]:SingleVariableDeclaration[13099-13118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13096-13383]:Block[13120-13407]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[13106-13377]:ForStatement[13130-13401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13155-13377]:Block[13179-13401]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[13169-13199]:VariableDeclarationStatement[13193-13223]"
    }, {
      "left" : "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
      "right" : "if (StringUtil.in(next.nodeName(), nodeNames) || next.nodeName().equals(\"html\"))",
      "info" : "IfStatement[13212-13367]:IfStatement[13236-13391]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13309-13315]:BreakStatement[13333-13339]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[13349-13367]:ExpressionStatement[13373-13391]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[13389-13396]:SimpleType[13413-13420]"
    }, {
      "left" : "aboveOnStack",
      "right" : "aboveOnStack",
      "info" : "SimpleName[13397-13409]:SimpleName[13421-13433]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[13410-13420]:SingleVariableDeclaration[13434-13444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13422-13675]:Block[13446-13699]"
    }, {
      "left" : "assert onStack(el);",
      "right" : "assert onStack(el);",
      "info" : "AssertStatement[13432-13451]:AssertStatement[13456-13475]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[13460-13648]:ForStatement[13484-13672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13509-13648]:Block[13533-13672]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[13523-13553]:VariableDeclarationStatement[13547-13577]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[13566-13638]:IfStatement[13590-13662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13582-13638]:Block[13606-13662]"
    }, {
      "left" : "return stack.get(pos-1);",
      "right" : "return stack.get(pos-1);",
      "info" : "ReturnStatement[13600-13624]:ReturnStatement[13624-13648]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13657-13669]:ReturnStatement[13681-13693]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13681-13685]:PrimitiveType[13705-13709]"
    }, {
      "left" : "insertOnStackAfter",
      "right" : "insertOnStackAfter",
      "info" : "SimpleName[13686-13704]:SimpleName[13710-13728]"
    }, {
      "left" : "Element after",
      "right" : "Element after",
      "info" : "SingleVariableDeclaration[13705-13718]:SingleVariableDeclaration[13729-13742]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[13720-13730]:SingleVariableDeclaration[13744-13754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13732-13843]:Block[13756-13867]"
    }, {
      "left" : "int i = stack.lastIndexOf(after);",
      "right" : "int i = stack.lastIndexOf(after);",
      "info" : "VariableDeclarationStatement[13742-13775]:VariableDeclarationStatement[13766-13799]"
    }, {
      "left" : "Validate.isTrue(i != -1);",
      "right" : "Validate.isTrue(i != -1);",
      "info" : "ExpressionStatement[13784-13809]:ExpressionStatement[13808-13833]"
    }, {
      "left" : "stack.add(i+1, in);",
      "right" : "stack.add(i+1, in);",
      "info" : "ExpressionStatement[13818-13837]:ExpressionStatement[13842-13861]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13849-13853]:PrimitiveType[13873-13877]"
    }, {
      "left" : "replaceOnStack",
      "right" : "replaceOnStack",
      "info" : "SimpleName[13854-13868]:SimpleName[13878-13892]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[13869-13880]:SingleVariableDeclaration[13893-13904]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[13882-13892]:SingleVariableDeclaration[13906-13916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13894-13941]:Block[13918-13965]"
    }, {
      "left" : "replaceInQueue(stack, out, in);",
      "right" : "replaceInQueue(stack, out, in);",
      "info" : "ExpressionStatement[13904-13935]:ExpressionStatement[13928-13959]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13947-13954]:Modifier[13971-13978]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13955-13959]:PrimitiveType[13979-13983]"
    }, {
      "left" : "replaceInQueue",
      "right" : "replaceInQueue",
      "info" : "SimpleName[13960-13974]:SimpleName[13984-13998]"
    }, {
      "left" : "ArrayList<Element> queue",
      "right" : "ArrayList<Element> queue",
      "info" : "SingleVariableDeclaration[13975-13999]:SingleVariableDeclaration[13999-14023]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[14001-14012]:SingleVariableDeclaration[14025-14036]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[14014-14024]:SingleVariableDeclaration[14038-14048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14026-14133]:Block[14050-14157]"
    }, {
      "left" : "int i = queue.lastIndexOf(out);",
      "right" : "int i = queue.lastIndexOf(out);",
      "info" : "VariableDeclarationStatement[14036-14067]:VariableDeclarationStatement[14060-14091]"
    }, {
      "left" : "Validate.isTrue(i != -1);",
      "right" : "Validate.isTrue(i != -1);",
      "info" : "ExpressionStatement[14076-14101]:ExpressionStatement[14100-14125]"
    }, {
      "left" : "queue.set(i, in);",
      "right" : "queue.set(i, in);",
      "info" : "ExpressionStatement[14110-14127]:ExpressionStatement[14134-14151]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14139-14143]:PrimitiveType[14163-14167]"
    }, {
      "left" : "resetInsertionMode",
      "right" : "resetInsertionMode",
      "info" : "SimpleName[14144-14162]:SimpleName[14168-14186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14165-16135]:Block[14189-16159]"
    }, {
      "left" : "boolean last = false;",
      "right" : "boolean last = false;",
      "info" : "VariableDeclarationStatement[14175-14196]:VariableDeclarationStatement[14199-14220]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[14205-16129]:ForStatement[14229-16153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14254-16129]:Block[14278-16153]"
    }, {
      "left" : "Element node = stack.get(pos);",
      "right" : "Element node = stack.get(pos);",
      "info" : "VariableDeclarationStatement[14268-14298]:VariableDeclarationStatement[14292-14322]"
    }, {
      "left" : "if (pos == 0)",
      "right" : "if (pos == 0)",
      "info" : "IfStatement[14311-14408]:IfStatement[14335-14432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14325-14408]:Block[14349-14432]"
    }, {
      "left" : "last = true;",
      "right" : "last = true;",
      "info" : "ExpressionStatement[14343-14355]:ExpressionStatement[14367-14379]"
    }, {
      "left" : "node = contextElement;",
      "right" : "node = contextElement;",
      "info" : "ExpressionStatement[14372-14394]:ExpressionStatement[14396-14418]"
    }, {
      "left" : "String name = node.nodeName();",
      "right" : "String name = node.nodeName();",
      "info" : "VariableDeclarationStatement[14421-14451]:VariableDeclarationStatement[14445-14475]"
    }, {
      "left" : "if (\"select\".equals(name))",
      "right" : "if (\"select\".equals(name))",
      "info" : "IfStatement[14464-16119]:IfStatement[14488-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14491-14596]:Block[14515-14620]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InSelect);",
      "right" : "transition(HtmlTreeBuilderState.InSelect);",
      "info" : "ExpressionStatement[14509-14551]:ExpressionStatement[14533-14575]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14568-14574]:BreakStatement[14592-14598]"
    }, {
      "left" : "if ((\"td\".equals(name) || \"th\".equals(name) && !last))",
      "right" : "if ((\"td\".equals(name) || \"th\".equals(name) && !last))",
      "info" : "IfStatement[14602-16119]:IfStatement[14626-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14657-14752]:Block[14681-14776]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InCell);",
      "right" : "transition(HtmlTreeBuilderState.InCell);",
      "info" : "ExpressionStatement[14675-14715]:ExpressionStatement[14699-14739]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14732-14738]:BreakStatement[14756-14762]"
    }, {
      "left" : "if (\"tr\".equals(name))",
      "right" : "if (\"tr\".equals(name))",
      "info" : "IfStatement[14758-16119]:IfStatement[14782-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14781-14875]:Block[14805-14899]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InRow);",
      "right" : "transition(HtmlTreeBuilderState.InRow);",
      "info" : "ExpressionStatement[14799-14838]:ExpressionStatement[14823-14862]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14855-14861]:BreakStatement[14879-14885]"
    }, {
      "left" : "if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name))",
      "right" : "if (\"tbody\".equals(name) || \"thead\".equals(name) || \"tfoot\".equals(name))",
      "info" : "IfStatement[14881-16119]:IfStatement[14905-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14955-15055]:Block[14979-15079]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InTableBody);",
      "right" : "transition(HtmlTreeBuilderState.InTableBody);",
      "info" : "ExpressionStatement[14973-15018]:ExpressionStatement[14997-15042]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15035-15041]:BreakStatement[15059-15065]"
    }, {
      "left" : "if (\"caption\".equals(name))",
      "right" : "if (\"caption\".equals(name))",
      "info" : "IfStatement[15061-16119]:IfStatement[15085-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15089-15187]:Block[15113-15211]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InCaption);",
      "right" : "transition(HtmlTreeBuilderState.InCaption);",
      "info" : "ExpressionStatement[15107-15150]:ExpressionStatement[15131-15174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15167-15173]:BreakStatement[15191-15197]"
    }, {
      "left" : "if (\"colgroup\".equals(name))",
      "right" : "if (\"colgroup\".equals(name))",
      "info" : "IfStatement[15193-16119]:IfStatement[15217-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15222-15332]:Block[15246-15356]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InColumnGroup);",
      "right" : "transition(HtmlTreeBuilderState.InColumnGroup);",
      "info" : "ExpressionStatement[15240-15287]:ExpressionStatement[15264-15311]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15304-15310]:BreakStatement[15328-15334]"
    }, {
      "left" : "if (\"table\".equals(name))",
      "right" : "if (\"table\".equals(name))",
      "info" : "IfStatement[15338-16119]:IfStatement[15362-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15364-15460]:Block[15388-15484]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InTable);",
      "right" : "transition(HtmlTreeBuilderState.InTable);",
      "info" : "ExpressionStatement[15382-15423]:ExpressionStatement[15406-15447]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15440-15446]:BreakStatement[15464-15470]"
    }, {
      "left" : "if (\"head\".equals(name))",
      "right" : "if (\"head\".equals(name))",
      "info" : "IfStatement[15466-16119]:IfStatement[15490-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15491-15594]:Block[15515-15618]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[15509-15549]:ExpressionStatement[15533-15573]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15566-15572]:BreakStatement[15590-15596]"
    }, {
      "left" : "if (\"body\".equals(name))",
      "right" : "if (\"body\".equals(name))",
      "info" : "IfStatement[15600-16119]:IfStatement[15624-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15625-15720]:Block[15649-15744]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[15643-15683]:ExpressionStatement[15667-15707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15700-15706]:BreakStatement[15724-15730]"
    }, {
      "left" : "if (\"frameset\".equals(name))",
      "right" : "if (\"frameset\".equals(name))",
      "info" : "IfStatement[15726-16119]:IfStatement[15750-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15755-15862]:Block[15779-15886]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InFrameset);",
      "right" : "transition(HtmlTreeBuilderState.InFrameset);",
      "info" : "ExpressionStatement[15773-15817]:ExpressionStatement[15797-15841]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15834-15840]:BreakStatement[15858-15864]"
    }, {
      "left" : "if (\"html\".equals(name))",
      "right" : "if (\"html\".equals(name))",
      "info" : "IfStatement[15868-16119]:IfStatement[15892-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15893-16000]:Block[15917-16024]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.BeforeHead);",
      "right" : "transition(HtmlTreeBuilderState.BeforeHead);",
      "info" : "ExpressionStatement[15911-15955]:ExpressionStatement[15935-15979]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15972-15978]:BreakStatement[15996-16002]"
    }, {
      "left" : "if (last)",
      "right" : "if (last)",
      "info" : "IfStatement[16006-16119]:IfStatement[16030-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16016-16119]:Block[16040-16143]"
    }, {
      "left" : "transition(HtmlTreeBuilderState.InBody);",
      "right" : "transition(HtmlTreeBuilderState.InBody);",
      "info" : "ExpressionStatement[16034-16074]:ExpressionStatement[16058-16098]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16091-16097]:BreakStatement[16115-16121]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16240-16247]:Modifier[16264-16271]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16248-16255]:PrimitiveType[16272-16279]"
    }, {
      "left" : "inSpecificScope",
      "right" : "inSpecificScope",
      "info" : "SimpleName[16256-16271]:SimpleName[16280-16295]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[16272-16289]:SingleVariableDeclaration[16296-16313]"
    }, {
      "left" : "String[] baseTypes",
      "right" : "String[] baseTypes",
      "info" : "SingleVariableDeclaration[16291-16309]:SingleVariableDeclaration[16315-16333]"
    }, {
      "left" : "String[] extraTypes",
      "right" : "String[] extraTypes",
      "info" : "SingleVariableDeclaration[16311-16330]:SingleVariableDeclaration[16335-16354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16332-16460]:Block[16356-16484]"
    }, {
      "left" : "specificScopeTarget[0] = targetName;",
      "right" : "specificScopeTarget[0] = targetName;",
      "info" : "ExpressionStatement[16342-16378]:ExpressionStatement[16366-16402]"
    }, {
      "left" : "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);",
      "right" : "return inSpecificScope(specificScopeTarget, baseTypes, extraTypes);",
      "info" : "ReturnStatement[16387-16454]:ReturnStatement[16411-16478]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16466-16473]:Modifier[16490-16497]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[16474-16481]:PrimitiveType[16498-16505]"
    }, {
      "left" : "inSpecificScope",
      "right" : "inSpecificScope",
      "info" : "SimpleName[16482-16497]:SimpleName[16506-16521]"
    }, {
      "left" : "String[] targetNames",
      "right" : "String[] targetNames",
      "info" : "SingleVariableDeclaration[16498-16518]:SingleVariableDeclaration[16522-16542]"
    }, {
      "left" : "String[] baseTypes",
      "right" : "String[] baseTypes",
      "info" : "SingleVariableDeclaration[16520-16538]:SingleVariableDeclaration[16544-16562]"
    }, {
      "left" : "String[] extraTypes",
      "right" : "String[] extraTypes",
      "info" : "SingleVariableDeclaration[16540-16559]:SingleVariableDeclaration[16564-16583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16561-17057]:Block[16585-17081]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[16571-16979]:ForStatement[16595-17003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16620-16979]:Block[16644-17003]"
    }, {
      "left" : "Element el = stack.get(pos);",
      "right" : "Element el = stack.get(pos);",
      "info" : "VariableDeclarationStatement[16634-16662]:VariableDeclarationStatement[16658-16686]"
    }, {
      "left" : "String elName = el.nodeName();",
      "right" : "String elName = el.nodeName();",
      "info" : "VariableDeclarationStatement[16675-16705]:VariableDeclarationStatement[16699-16729]"
    }, {
      "left" : "if (StringUtil.in(elName, targetNames))",
      "right" : "if (StringUtil.in(elName, targetNames))",
      "info" : "IfStatement[16718-16786]:IfStatement[16742-16810]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[16774-16786]:ReturnStatement[16798-16810]"
    }, {
      "left" : "if (StringUtil.in(elName, baseTypes))",
      "right" : "if (StringUtil.in(elName, baseTypes))",
      "info" : "IfStatement[16799-16866]:IfStatement[16823-16890]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16853-16866]:ReturnStatement[16877-16890]"
    }, {
      "left" : "if (extraTypes != null && StringUtil.in(elName, extraTypes))",
      "right" : "if (extraTypes != null && StringUtil.in(elName, extraTypes))",
      "info" : "IfStatement[16879-16969]:IfStatement[16903-16993]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16956-16969]:ReturnStatement[16980-16993]"
    }, {
      "left" : "Validate.fail(\"Should not be reachable\");",
      "right" : "Validate.fail(\"Should not be reachable\");",
      "info" : "ExpressionStatement[16988-17029]:ExpressionStatement[17012-17053]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17038-17051]:ReturnStatement[17062-17075]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17063-17070]:PrimitiveType[17087-17094]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[17071-17078]:SimpleName[17095-17102]"
    }, {
      "left" : "String[] targetNames",
      "right" : "String[] targetNames",
      "info" : "SingleVariableDeclaration[17079-17099]:SingleVariableDeclaration[17103-17123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17101-17178]:Block[17125-17202]"
    }, {
      "left" : "return inSpecificScope(targetNames, TagsSearchInScope, null);",
      "right" : "return inSpecificScope(targetNames, TagsSearchInScope, null);",
      "info" : "ReturnStatement[17111-17172]:ReturnStatement[17135-17196]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17184-17191]:PrimitiveType[17208-17215]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[17192-17199]:SimpleName[17216-17223]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17200-17217]:SingleVariableDeclaration[17224-17241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17219-17268]:Block[17243-17292]"
    }, {
      "left" : "return inScope(targetName, null);",
      "right" : "return inScope(targetName, null);",
      "info" : "ReturnStatement[17229-17262]:ReturnStatement[17253-17286]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17274-17281]:PrimitiveType[17298-17305]"
    }, {
      "left" : "inScope",
      "right" : "inScope",
      "info" : "SimpleName[17282-17289]:SimpleName[17306-17313]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17290-17307]:SingleVariableDeclaration[17314-17331]"
    }, {
      "left" : "String[] extras",
      "right" : "String[] extras",
      "info" : "SingleVariableDeclaration[17309-17324]:SingleVariableDeclaration[17333-17348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17326-17540]:Block[17350-17564]"
    }, {
      "left" : "return inSpecificScope(targetName, TagsSearchInScope, extras);",
      "right" : "return inSpecificScope(targetName, TagsSearchInScope, extras);",
      "info" : "ReturnStatement[17336-17398]:ReturnStatement[17360-17422]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17546-17553]:PrimitiveType[17570-17577]"
    }, {
      "left" : "inListItemScope",
      "right" : "inListItemScope",
      "info" : "SimpleName[17554-17569]:SimpleName[17578-17593]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17570-17587]:SingleVariableDeclaration[17594-17611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17589-17647]:Block[17613-17671]"
    }, {
      "left" : "return inScope(targetName, TagSearchList);",
      "right" : "return inScope(targetName, TagSearchList);",
      "info" : "ReturnStatement[17599-17641]:ReturnStatement[17623-17665]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17653-17660]:PrimitiveType[17677-17684]"
    }, {
      "left" : "inButtonScope",
      "right" : "inButtonScope",
      "info" : "SimpleName[17661-17674]:SimpleName[17685-17698]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17675-17692]:SingleVariableDeclaration[17699-17716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17694-17754]:Block[17718-17778]"
    }, {
      "left" : "return inScope(targetName, TagSearchButton);",
      "right" : "return inScope(targetName, TagSearchButton);",
      "info" : "ReturnStatement[17704-17748]:ReturnStatement[17728-17772]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17760-17767]:PrimitiveType[17784-17791]"
    }, {
      "left" : "inTableScope",
      "right" : "inTableScope",
      "info" : "SimpleName[17768-17780]:SimpleName[17792-17804]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17781-17798]:SingleVariableDeclaration[17805-17822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17800-17878]:Block[17824-17902]"
    }, {
      "left" : "return inSpecificScope(targetName, TagSearchTableScope, null);",
      "right" : "return inSpecificScope(targetName, TagSearchTableScope, null);",
      "info" : "ReturnStatement[17810-17872]:ReturnStatement[17834-17896]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17884-17891]:PrimitiveType[17908-17915]"
    }, {
      "left" : "inSelectScope",
      "right" : "inSelectScope",
      "info" : "SimpleName[17892-17905]:SimpleName[17916-17929]"
    }, {
      "left" : "String targetName",
      "right" : "String targetName",
      "info" : "SingleVariableDeclaration[17906-17923]:SingleVariableDeclaration[17930-17947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17925-18344]:Block[17949-18368]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[17935-18266]:ForStatement[17959-18290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17984-18266]:Block[18008-18290]"
    }, {
      "left" : "Element el = stack.get(pos);",
      "right" : "Element el = stack.get(pos);",
      "info" : "VariableDeclarationStatement[17998-18026]:VariableDeclarationStatement[18022-18050]"
    }, {
      "left" : "String elName = el.nodeName();",
      "right" : "String elName = el.nodeName();",
      "info" : "VariableDeclarationStatement[18039-18069]:VariableDeclarationStatement[18063-18093]"
    }, {
      "left" : "if (elName.equals(targetName))",
      "right" : "if (elName.equals(targetName))",
      "info" : "IfStatement[18082-18141]:IfStatement[18106-18165]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18129-18141]:ReturnStatement[18153-18165]"
    }, {
      "left" : "if (!StringUtil.in(elName, TagSearchSelectScope))",
      "right" : "if (!StringUtil.in(elName, TagSearchSelectScope))",
      "info" : "IfStatement[18154-18256]:IfStatement[18178-18280]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18243-18256]:ReturnStatement[18267-18280]"
    }, {
      "left" : "Validate.fail(\"Should not be reachable\");",
      "right" : "Validate.fail(\"Should not be reachable\");",
      "info" : "ExpressionStatement[18275-18316]:ExpressionStatement[18299-18340]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18325-18338]:ReturnStatement[18349-18362]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18350-18354]:PrimitiveType[18374-18378]"
    }, {
      "left" : "setHeadElement",
      "right" : "setHeadElement",
      "info" : "SimpleName[18355-18369]:SimpleName[18379-18393]"
    }, {
      "left" : "Element headElement",
      "right" : "Element headElement",
      "info" : "SingleVariableDeclaration[18370-18389]:SingleVariableDeclaration[18394-18413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18391-18438]:Block[18415-18462]"
    }, {
      "left" : "this.headElement = headElement;",
      "right" : "this.headElement = headElement;",
      "info" : "ExpressionStatement[18401-18432]:ExpressionStatement[18425-18456]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[18444-18451]:SimpleType[18468-18475]"
    }, {
      "left" : "getHeadElement",
      "right" : "getHeadElement",
      "info" : "SimpleName[18452-18466]:SimpleName[18476-18490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18469-18504]:Block[18493-18528]"
    }, {
      "left" : "return headElement;",
      "right" : "return headElement;",
      "info" : "ReturnStatement[18479-18498]:ReturnStatement[18503-18522]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[18510-18517]:PrimitiveType[18534-18541]"
    }, {
      "left" : "isFosterInserts",
      "right" : "isFosterInserts",
      "info" : "SimpleName[18518-18533]:SimpleName[18542-18557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18536-18573]:Block[18560-18597]"
    }, {
      "left" : "return fosterInserts;",
      "right" : "return fosterInserts;",
      "info" : "ReturnStatement[18546-18567]:ReturnStatement[18570-18591]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18579-18583]:PrimitiveType[18603-18607]"
    }, {
      "left" : "setFosterInserts",
      "right" : "setFosterInserts",
      "info" : "SimpleName[18584-18600]:SimpleName[18608-18624]"
    }, {
      "left" : "boolean fosterInserts",
      "right" : "boolean fosterInserts",
      "info" : "SingleVariableDeclaration[18601-18622]:SingleVariableDeclaration[18625-18646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18624-18675]:Block[18648-18699]"
    }, {
      "left" : "this.fosterInserts = fosterInserts;",
      "right" : "this.fosterInserts = fosterInserts;",
      "info" : "ExpressionStatement[18634-18669]:ExpressionStatement[18658-18693]"
    }, {
      "left" : "FormElement",
      "right" : "FormElement",
      "info" : "SimpleType[18681-18692]:SimpleType[18705-18716]"
    }, {
      "left" : "getFormElement",
      "right" : "getFormElement",
      "info" : "SimpleName[18693-18707]:SimpleName[18717-18731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18710-18745]:Block[18734-18769]"
    }, {
      "left" : "return formElement;",
      "right" : "return formElement;",
      "info" : "ReturnStatement[18720-18739]:ReturnStatement[18744-18763]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18751-18755]:PrimitiveType[18775-18779]"
    }, {
      "left" : "setFormElement",
      "right" : "setFormElement",
      "info" : "SimpleName[18756-18770]:SimpleName[18780-18794]"
    }, {
      "left" : "FormElement formElement",
      "right" : "FormElement formElement",
      "info" : "SingleVariableDeclaration[18771-18794]:SingleVariableDeclaration[18795-18818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18796-18843]:Block[18820-18867]"
    }, {
      "left" : "this.formElement = formElement;",
      "right" : "this.formElement = formElement;",
      "info" : "ExpressionStatement[18806-18837]:ExpressionStatement[18830-18861]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18849-18853]:PrimitiveType[18873-18877]"
    }, {
      "left" : "newPendingTableCharacters",
      "right" : "newPendingTableCharacters",
      "info" : "SimpleName[18854-18879]:SimpleName[18878-18903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18882-18941]:Block[18906-18965]"
    }, {
      "left" : "pendingTableCharacters = new ArrayList<>();",
      "right" : "pendingTableCharacters = new ArrayList<>();",
      "info" : "ExpressionStatement[18892-18935]:ExpressionStatement[18916-18959]"
    }, {
      "left" : "List<String>",
      "right" : "List<String>",
      "info" : "ParameterizedType[18947-18959]:ParameterizedType[18971-18983]"
    }, {
      "left" : "getPendingTableCharacters",
      "right" : "getPendingTableCharacters",
      "info" : "SimpleName[18960-18985]:SimpleName[18984-19009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18988-19034]:Block[19012-19058]"
    }, {
      "left" : "return pendingTableCharacters;",
      "right" : "return pendingTableCharacters;",
      "info" : "ReturnStatement[18998-19028]:ReturnStatement[19022-19052]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19040-19044]:PrimitiveType[19064-19068]"
    }, {
      "left" : "setPendingTableCharacters",
      "right" : "setPendingTableCharacters",
      "info" : "SimpleName[19045-19070]:SimpleName[19069-19094]"
    }, {
      "left" : "List<String> pendingTableCharacters",
      "right" : "List<String> pendingTableCharacters",
      "info" : "SingleVariableDeclaration[19071-19106]:SingleVariableDeclaration[19095-19130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19108-19177]:Block[19132-19201]"
    }, {
      "left" : "this.pendingTableCharacters = pendingTableCharacters;",
      "right" : "this.pendingTableCharacters = pendingTableCharacters;",
      "info" : "ExpressionStatement[19118-19171]:ExpressionStatement[19142-19195]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19789-19793]:PrimitiveType[19813-19817]"
    }, {
      "left" : "generateImpliedEndTags",
      "right" : "generateImpliedEndTags",
      "info" : "SimpleName[19794-19816]:SimpleName[19818-19840]"
    }, {
      "left" : "String excludeTag",
      "right" : "String excludeTag",
      "info" : "SingleVariableDeclaration[19817-19834]:SingleVariableDeclaration[19841-19858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19836-20030]:Block[19860-20054]"
    }, {
      "left" : "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                StringUtil.in(currentElement().nodeName(), TagSearchEndTags))\n            pop();",
      "right" : "while ((excludeTag != null && !currentElement().nodeName().equals(excludeTag)) &&\n                StringUtil.in(currentElement().nodeName(), TagSearchEndTags))\n            pop();",
      "info" : "WhileStatement[19846-20024]:WhileStatement[19870-20048]"
    }, {
      "left" : "pop();",
      "right" : "pop();",
      "info" : "ExpressionStatement[20018-20024]:ExpressionStatement[20042-20048]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20036-20040]:PrimitiveType[20060-20064]"
    }, {
      "left" : "generateImpliedEndTags",
      "right" : "generateImpliedEndTags",
      "info" : "SimpleName[20041-20063]:SimpleName[20065-20087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20066-20111]:Block[20090-20135]"
    }, {
      "left" : "generateImpliedEndTags(null);",
      "right" : "generateImpliedEndTags(null);",
      "info" : "ExpressionStatement[20076-20105]:ExpressionStatement[20100-20129]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20117-20124]:PrimitiveType[20141-20148]"
    }, {
      "left" : "isSpecial",
      "right" : "isSpecial",
      "info" : "SimpleName[20125-20134]:SimpleName[20149-20158]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[20135-20145]:SingleVariableDeclaration[20159-20169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20147-20331]:Block[20171-20355]"
    }, {
      "left" : "String name = el.nodeName();",
      "right" : "String name = el.nodeName();",
      "info" : "VariableDeclarationStatement[20243-20271]:VariableDeclarationStatement[20267-20295]"
    }, {
      "left" : "return StringUtil.in(name, TagSearchSpecial);",
      "right" : "return StringUtil.in(name, TagSearchSpecial);",
      "info" : "ReturnStatement[20280-20325]:ReturnStatement[20304-20349]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[20337-20344]:SimpleType[20361-20368]"
    }, {
      "left" : "lastFormattingElement",
      "right" : "lastFormattingElement",
      "info" : "SimpleName[20345-20366]:SimpleName[20369-20390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20369-20483]:Block[20393-20507]"
    }, {
      "left" : "return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null;",
      "right" : "return formattingElements.size() > 0 ? formattingElements.get(formattingElements.size()-1) : null;",
      "info" : "ReturnStatement[20379-20477]:ReturnStatement[20403-20501]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[20489-20496]:SimpleType[20513-20520]"
    }, {
      "left" : "removeLastFormattingElement",
      "right" : "removeLastFormattingElement",
      "info" : "SimpleName[20497-20524]:SimpleName[20521-20548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20527-20694]:Block[20551-20718]"
    }, {
      "left" : "int size = formattingElements.size();",
      "right" : "int size = formattingElements.size();",
      "info" : "VariableDeclarationStatement[20537-20574]:VariableDeclarationStatement[20561-20598]"
    }, {
      "left" : "if (size > 0)",
      "right" : "if (size > 0)",
      "info" : "IfStatement[20583-20688]:IfStatement[20607-20712]"
    }, {
      "left" : "return formattingElements.remove(size-1);",
      "right" : "return formattingElements.remove(size-1);",
      "info" : "ReturnStatement[20609-20650]:ReturnStatement[20633-20674]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20676-20688]:ReturnStatement[20700-20712]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20734-20738]:PrimitiveType[20758-20762]"
    }, {
      "left" : "pushActiveFormattingElements",
      "right" : "pushActiveFormattingElements",
      "info" : "SimpleName[20739-20767]:SimpleName[20763-20791]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[20768-20778]:SingleVariableDeclaration[20792-20802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20780-21240]:Block[20804-21264]"
    }, {
      "left" : "int numSeen = 0;",
      "right" : "int numSeen = 0;",
      "info" : "VariableDeclarationStatement[20790-20806]:VariableDeclarationStatement[20814-20830]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[20815-21198]:ForStatement[20839-21222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20877-21198]:Block[20901-21222]"
    }, {
      "left" : "Element el = formattingElements.get(pos);",
      "right" : "Element el = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[20891-20932]:VariableDeclarationStatement[20915-20956]"
    }, {
      "left" : "if (el == null)",
      "right" : "if (el == null)",
      "info" : "IfStatement[20945-20993]:IfStatement[20969-21017]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20987-20993]:BreakStatement[21011-21017]"
    }, {
      "left" : "if (isSameFormattingElement(in, el))",
      "right" : "if (isSameFormattingElement(in, el))",
      "info" : "IfStatement[21007-21070]:IfStatement[21031-21094]"
    }, {
      "left" : "numSeen++;",
      "right" : "numSeen++;",
      "info" : "ExpressionStatement[21060-21070]:ExpressionStatement[21084-21094]"
    }, {
      "left" : "if (numSeen == 3)",
      "right" : "if (numSeen == 3)",
      "info" : "IfStatement[21084-21188]:IfStatement[21108-21212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21102-21188]:Block[21126-21212]"
    }, {
      "left" : "formattingElements.remove(pos);",
      "right" : "formattingElements.remove(pos);",
      "info" : "ExpressionStatement[21120-21151]:ExpressionStatement[21144-21175]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21168-21174]:BreakStatement[21192-21198]"
    }, {
      "left" : "formattingElements.add(in);",
      "right" : "formattingElements.add(in);",
      "info" : "ExpressionStatement[21207-21234]:ExpressionStatement[21231-21258]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21246-21253]:Modifier[21270-21277]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21254-21261]:PrimitiveType[21278-21285]"
    }, {
      "left" : "isSameFormattingElement",
      "right" : "isSameFormattingElement",
      "info" : "SimpleName[21262-21285]:SimpleName[21286-21309]"
    }, {
      "left" : "Element a",
      "right" : "Element a",
      "info" : "SingleVariableDeclaration[21286-21295]:SingleVariableDeclaration[21310-21319]"
    }, {
      "left" : "Element b",
      "right" : "Element b",
      "info" : "SingleVariableDeclaration[21297-21306]:SingleVariableDeclaration[21321-21330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21308-21628]:Block[21332-21652]"
    }, {
      "left" : "return a.nodeName().equals(b.nodeName()) &&\n                // a.namespace().equals(b.namespace()) &&\n                a.attributes().equals(b.attributes());",
      "right" : "return a.nodeName().equals(b.nodeName()) &&\n                // a.namespace().equals(b.namespace()) &&\n                a.attributes().equals(b.attributes());",
      "info" : "ReturnStatement[21438-21594]:ReturnStatement[21462-21618]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21634-21638]:PrimitiveType[21658-21662]"
    }, {
      "left" : "reconstructFormattingElements",
      "right" : "reconstructFormattingElements",
      "info" : "SimpleName[21639-21668]:SimpleName[21663-21692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21671-23135]:Block[21695-23159]"
    }, {
      "left" : "Element last = lastFormattingElement();",
      "right" : "Element last = lastFormattingElement();",
      "info" : "VariableDeclarationStatement[21681-21720]:VariableDeclarationStatement[21705-21744]"
    }, {
      "left" : "if (last == null || onStack(last))",
      "right" : "if (last == null || onStack(last))",
      "info" : "IfStatement[21729-21783]:IfStatement[21753-21807]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21776-21783]:ReturnStatement[21800-21807]"
    }, {
      "left" : "Element entry = last;",
      "right" : "Element entry = last;",
      "info" : "VariableDeclarationStatement[21793-21814]:VariableDeclarationStatement[21817-21838]"
    }, {
      "left" : "int size = formattingElements.size();",
      "right" : "int size = formattingElements.size();",
      "info" : "VariableDeclarationStatement[21823-21860]:VariableDeclarationStatement[21847-21884]"
    }, {
      "left" : "int pos = size - 1;",
      "right" : "int pos = size - 1;",
      "info" : "VariableDeclarationStatement[21869-21888]:VariableDeclarationStatement[21893-21912]"
    }, {
      "left" : "boolean skip = false;",
      "right" : "boolean skip = false;",
      "info" : "VariableDeclarationStatement[21897-21918]:VariableDeclarationStatement[21921-21942]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[21927-22317]:WhileStatement[21951-22341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21940-22317]:Block[21964-22341]"
    }, {
      "left" : "if (pos == 0)",
      "right" : "if (pos == 0)",
      "info" : "IfStatement[21954-22072]:IfStatement[21978-22096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21968-22072]:Block[21992-22096]"
    }, {
      "left" : "skip = true;",
      "right" : "skip = true;",
      "info" : "ExpressionStatement[22023-22035]:ExpressionStatement[22047-22059]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22052-22058]:BreakStatement[22076-22082]"
    }, {
      "left" : "entry = formattingElements.get(--pos);",
      "right" : "entry = formattingElements.get(--pos);",
      "info" : "ExpressionStatement[22085-22123]:ExpressionStatement[22109-22147]"
    }, {
      "left" : "if (entry == null || onStack(entry))",
      "right" : "if (entry == null || onStack(entry))",
      "info" : "IfStatement[22170-22269]:IfStatement[22194-22293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22263-22269]:BreakStatement[22287-22293]"
    }, {
      "left" : "while(true)",
      "right" : "while(true)",
      "info" : "WhileStatement[22326-23129]:WhileStatement[22350-23153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22338-23129]:Block[22362-23153]"
    }, {
      "left" : "if (!skip)",
      "right" : "if (!skip)",
      "info" : "IfStatement[22352-22448]:IfStatement[22376-22472]"
    }, {
      "left" : "entry = formattingElements.get(++pos);",
      "right" : "entry = formattingElements.get(++pos);",
      "info" : "ExpressionStatement[22410-22448]:ExpressionStatement[22434-22472]"
    }, {
      "left" : "Validate.notNull(entry);",
      "right" : "Validate.notNull(entry);",
      "info" : "ExpressionStatement[22461-22485]:ExpressionStatement[22485-22509]"
    }, {
      "left" : "skip = false;",
      "right" : "skip = false;",
      "info" : "ExpressionStatement[22638-22651]:ExpressionStatement[22662-22675]"
    }, {
      "left" : "Element newEl = insertStartTag(entry.nodeName());",
      "right" : "Element newEl = insertStartTag(entry.nodeName());",
      "info" : "VariableDeclarationStatement[22699-22748]:VariableDeclarationStatement[22723-22772]"
    }, {
      "left" : "newEl.attributes().addAll(entry.attributes());",
      "right" : "newEl.attributes().addAll(entry.attributes());",
      "info" : "ExpressionStatement[22863-22909]:ExpressionStatement[22887-22933]"
    }, {
      "left" : "formattingElements.set(pos, newEl);",
      "right" : "formattingElements.set(pos, newEl);",
      "info" : "ExpressionStatement[22971-23006]:ExpressionStatement[22995-23030]"
    }, {
      "left" : "if (pos == size-1)",
      "right" : "if (pos == size-1)",
      "info" : "IfStatement[23038-23119]:IfStatement[23062-23143]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23113-23119]:BreakStatement[23137-23143]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23141-23145]:PrimitiveType[23165-23169]"
    }, {
      "left" : "clearFormattingElementsToLastMarker",
      "right" : "clearFormattingElementsToLastMarker",
      "info" : "SimpleName[23146-23181]:SimpleName[23170-23205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23184-23356]:Block[23208-23380]"
    }, {
      "left" : "while (!formattingElements.isEmpty())",
      "right" : "while (!formattingElements.isEmpty())",
      "info" : "WhileStatement[23194-23350]:WhileStatement[23218-23374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23232-23350]:Block[23256-23374]"
    }, {
      "left" : "Element el = removeLastFormattingElement();",
      "right" : "Element el = removeLastFormattingElement();",
      "info" : "VariableDeclarationStatement[23246-23289]:VariableDeclarationStatement[23270-23313]"
    }, {
      "left" : "if (el == null)",
      "right" : "if (el == null)",
      "info" : "IfStatement[23302-23340]:IfStatement[23326-23364]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23334-23340]:BreakStatement[23358-23364]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23362-23366]:PrimitiveType[23386-23390]"
    }, {
      "left" : "removeFromActiveFormattingElements",
      "right" : "removeFromActiveFormattingElements",
      "info" : "SimpleName[23367-23401]:SimpleName[23391-23425]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[23402-23412]:SingleVariableDeclaration[23426-23436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23414-23674]:Block[23438-23698]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[23424-23668]:ForStatement[23448-23692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23486-23668]:Block[23510-23692]"
    }, {
      "left" : "Element next = formattingElements.get(pos);",
      "right" : "Element next = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[23500-23543]:VariableDeclarationStatement[23524-23567]"
    }, {
      "left" : "if (next == el)",
      "right" : "if (next == el)",
      "info" : "IfStatement[23556-23658]:IfStatement[23580-23682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23572-23658]:Block[23596-23682]"
    }, {
      "left" : "formattingElements.remove(pos);",
      "right" : "formattingElements.remove(pos);",
      "info" : "ExpressionStatement[23590-23621]:ExpressionStatement[23614-23645]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23638-23644]:BreakStatement[23662-23668]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23680-23687]:PrimitiveType[23704-23711]"
    }, {
      "left" : "isInActiveFormattingElements",
      "right" : "isInActiveFormattingElements",
      "info" : "SimpleName[23688-23716]:SimpleName[23712-23740]"
    }, {
      "left" : "Element el",
      "right" : "Element el",
      "info" : "SingleVariableDeclaration[23717-23727]:SingleVariableDeclaration[23741-23751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23729-23793]:Block[23753-23817]"
    }, {
      "left" : "return isElementInQueue(formattingElements, el);",
      "right" : "return isElementInQueue(formattingElements, el);",
      "info" : "ReturnStatement[23739-23787]:ReturnStatement[23763-23811]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[23799-23806]:SimpleType[23823-23830]"
    }, {
      "left" : "getActiveFormattingElement",
      "right" : "getActiveFormattingElement",
      "info" : "SimpleName[23807-23833]:SimpleName[23831-23857]"
    }, {
      "left" : "String nodeName",
      "right" : "String nodeName",
      "info" : "SingleVariableDeclaration[23834-23849]:SingleVariableDeclaration[23858-23873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23851-24170]:Block[23875-24194]"
    }, {
      "left" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = formattingElements.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[23861-24143]:ForStatement[23885-24167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23923-24143]:Block[23947-24167]"
    }, {
      "left" : "Element next = formattingElements.get(pos);",
      "right" : "Element next = formattingElements.get(pos);",
      "info" : "VariableDeclarationStatement[23937-23980]:VariableDeclarationStatement[23961-24004]"
    }, {
      "left" : "if (next == null)",
      "right" : "if (next == null)",
      "info" : "IfStatement[23993-24133]:IfStatement[24017-24157]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24043-24049]:BreakStatement[24067-24073]"
    }, {
      "left" : "if (next.nodeName().equals(nodeName))",
      "right" : "if (next.nodeName().equals(nodeName))",
      "info" : "IfStatement[24067-24133]:IfStatement[24091-24157]"
    }, {
      "left" : "return next;",
      "right" : "return next;",
      "info" : "ReturnStatement[24121-24133]:ReturnStatement[24145-24157]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24152-24164]:ReturnStatement[24176-24188]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24176-24180]:PrimitiveType[24200-24204]"
    }, {
      "left" : "replaceActiveFormattingElement",
      "right" : "replaceActiveFormattingElement",
      "info" : "SimpleName[24181-24211]:SimpleName[24205-24235]"
    }, {
      "left" : "Element out",
      "right" : "Element out",
      "info" : "SingleVariableDeclaration[24212-24223]:SingleVariableDeclaration[24236-24247]"
    }, {
      "left" : "Element in",
      "right" : "Element in",
      "info" : "SingleVariableDeclaration[24225-24235]:SingleVariableDeclaration[24249-24259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24237-24297]:Block[24261-24321]"
    }, {
      "left" : "replaceInQueue(formattingElements, out, in);",
      "right" : "replaceInQueue(formattingElements, out, in);",
      "info" : "ExpressionStatement[24247-24291]:ExpressionStatement[24271-24315]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24303-24307]:PrimitiveType[24327-24331]"
    }, {
      "left" : "insertMarkerToFormattingElements",
      "right" : "insertMarkerToFormattingElements",
      "info" : "SimpleName[24308-24340]:SimpleName[24332-24364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24343-24388]:Block[24367-24412]"
    }, {
      "left" : "formattingElements.add(null);",
      "right" : "formattingElements.add(null);",
      "info" : "ExpressionStatement[24353-24382]:ExpressionStatement[24377-24406]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24394-24398]:PrimitiveType[24418-24422]"
    }, {
      "left" : "insertInFosterParent",
      "right" : "insertInFosterParent",
      "info" : "SimpleName[24399-24419]:SimpleName[24423-24443]"
    }, {
      "left" : "Node in",
      "right" : "Node in",
      "info" : "SingleVariableDeclaration[24420-24427]:SingleVariableDeclaration[24444-24451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24429-25113]:Block[24453-25137]"
    }, {
      "left" : "Element fosterParent;",
      "right" : "Element fosterParent;",
      "info" : "VariableDeclarationStatement[24439-24460]:VariableDeclarationStatement[24463-24484]"
    }, {
      "left" : "Element lastTable = getFromStack(\"table\");",
      "right" : "Element lastTable = getFromStack(\"table\");",
      "info" : "VariableDeclarationStatement[24469-24511]:VariableDeclarationStatement[24493-24535]"
    }, {
      "left" : "boolean isLastTableParent = false;",
      "right" : "boolean isLastTableParent = false;",
      "info" : "VariableDeclarationStatement[24520-24554]:VariableDeclarationStatement[24544-24578]"
    }, {
      "left" : "if (lastTable != null)",
      "right" : "if (lastTable != null)",
      "info" : "IfStatement[24563-24889]:IfStatement[24587-24913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24586-24811]:Block[24610-24835]"
    }, {
      "left" : "if (lastTable.parent() != null)",
      "right" : "if (lastTable.parent() != null)",
      "info" : "IfStatement[24600-24801]:IfStatement[24624-24825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24632-24740]:Block[24656-24764]"
    }, {
      "left" : "fosterParent = lastTable.parent();",
      "right" : "fosterParent = lastTable.parent();",
      "info" : "ExpressionStatement[24650-24684]:ExpressionStatement[24674-24708]"
    }, {
      "left" : "isLastTableParent = true;",
      "right" : "isLastTableParent = true;",
      "info" : "ExpressionStatement[24701-24726]:ExpressionStatement[24725-24750]"
    }, {
      "left" : "fosterParent = aboveOnStack(lastTable);",
      "right" : "fosterParent = aboveOnStack(lastTable);",
      "info" : "ExpressionStatement[24762-24801]:ExpressionStatement[24786-24825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24817-24889]:Block[24841-24913]"
    }, {
      "left" : "fosterParent = stack.get(0);",
      "right" : "fosterParent = stack.get(0);",
      "info" : "ExpressionStatement[24851-24879]:ExpressionStatement[24875-24903]"
    }, {
      "left" : "if (isLastTableParent)",
      "right" : "if (isLastTableParent)",
      "info" : "IfStatement[24899-25107]:IfStatement[24923-25131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24922-25052]:Block[24946-25076]"
    }, {
      "left" : "Validate.notNull(lastTable);",
      "right" : "Validate.notNull(lastTable);",
      "info" : "ExpressionStatement[24936-24964]:ExpressionStatement[24960-24988]"
    }, {
      "left" : "lastTable.before(in);",
      "right" : "lastTable.before(in);",
      "info" : "ExpressionStatement[25021-25042]:ExpressionStatement[25045-25066]"
    }, {
      "left" : "fosterParent.appendChild(in);",
      "right" : "fosterParent.appendChild(in);",
      "info" : "ExpressionStatement[25078-25107]:ExpressionStatement[25102-25131]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25119-25128]:MarkerAnnotation[25143-25152]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25133-25139]:Modifier[25157-25163]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25140-25146]:SimpleType[25164-25170]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[25147-25155]:SimpleName[25171-25179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25158-25361]:Block[25182-25385]"
    }, {
      "left" : "return \"TreeBuilder{\" +\n                \"currentToken=\" + currentToken +\n                \", state=\" + state +\n                \", currentElement=\" + currentElement() +\n                '}';",
      "right" : "return \"TreeBuilder{\" +\n                \"currentToken=\" + currentToken +\n                \", state=\" + state +\n                \", currentElement=\" + currentElement() +\n                '}';",
      "info" : "ReturnStatement[25168-25355]:ReturnStatement[25192-25379]"
    } ]
  },
  "interFileMappings" : { }
}