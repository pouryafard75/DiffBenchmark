{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DefaultParser",
      "right" : "DefaultParser",
      "info" : "TypeDeclaration[948-20587]:TypeDeclaration[948-20727]"
    }, {
      "left" : "protected CommandLine cmd;",
      "right" : "protected CommandLine cmd;",
      "info" : "FieldDeclaration[1072-1136]:FieldDeclaration[1072-1136]"
    }, {
      "left" : "protected Options options;",
      "right" : "protected Options options;",
      "info" : "FieldDeclaration[1146-1204]:FieldDeclaration[1146-1204]"
    }, {
      "left" : "protected boolean stopAtNonOption;",
      "right" : "protected boolean stopAtNonOption;",
      "info" : "FieldDeclaration[1210-1454]:FieldDeclaration[1210-1454]"
    }, {
      "left" : "protected String currentToken;",
      "right" : "protected String currentToken;",
      "info" : "FieldDeclaration[1460-1532]:FieldDeclaration[1460-1532]"
    }, {
      "left" : "protected Option currentOption;",
      "right" : "protected Option currentOption;",
      "info" : "FieldDeclaration[1539-1605]:FieldDeclaration[1539-1605]"
    }, {
      "left" : "protected boolean skipParsing;",
      "right" : "protected boolean skipParsing;",
      "info" : "FieldDeclaration[1612-1759]:FieldDeclaration[1612-1759]"
    }, {
      "left" : "protected List expectedOpts;",
      "right" : "protected List expectedOpts;",
      "info" : "FieldDeclaration[1766-1889]:FieldDeclaration[1766-1889]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments) throws ParseException",
      "info" : "MethodDeclaration[1896-2039]:MethodDeclaration[1896-2039]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException",
      "info" : "MethodDeclaration[2045-2665]:MethodDeclaration[2045-2665]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, boolean stopAtNonOption) throws ParseException",
      "info" : "MethodDeclaration[2671-2856]:MethodDeclaration[2671-2856]"
    }, {
      "left" : "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException",
      "right" : "public CommandLine parse(Options options, String[] arguments, Properties properties, boolean stopAtNonOption)\n            throws ParseException",
      "info" : "MethodDeclaration[2862-4518]:MethodDeclaration[2862-4518]"
    }, {
      "left" : "private void handleProperties(Properties properties) throws ParseException",
      "right" : "private void handleProperties(Properties properties) throws ParseException",
      "info" : "MethodDeclaration[4524-6321]:MethodDeclaration[4524-6321]"
    }, {
      "left" : "private void checkRequiredOptions() throws MissingOptionException",
      "right" : "private void checkRequiredOptions() throws MissingOptionException",
      "info" : "MethodDeclaration[6327-6809]:MethodDeclaration[6327-6809]"
    }, {
      "left" : "private void checkRequiredArgs() throws ParseException",
      "right" : "private void checkRequiredArgs() throws ParseException",
      "info" : "MethodDeclaration[6815-7172]:MethodDeclaration[6815-7172]"
    }, {
      "left" : "private void handleToken(String token) throws ParseException",
      "right" : "private void handleToken(String token) throws ParseException",
      "info" : "MethodDeclaration[7178-8211]:MethodDeclaration[7178-8211]"
    }, {
      "left" : "private boolean isArgument(String token)",
      "right" : "private boolean isArgument(String token)",
      "info" : "MethodDeclaration[8217-8426]:MethodDeclaration[8217-8426]"
    }, {
      "left" : "private boolean isNegativeNumber(String token)",
      "right" : "private boolean isNegativeNumber(String token)",
      "info" : "MethodDeclaration[8432-8763]:MethodDeclaration[8432-8763]"
    }, {
      "left" : "private boolean isOption(String token)",
      "right" : "private boolean isOption(String token)",
      "info" : "MethodDeclaration[8769-8970]:MethodDeclaration[8769-8970]"
    }, {
      "left" : "private boolean isShortOption(String token)",
      "right" : "private boolean isShortOption(String token)",
      "info" : "MethodDeclaration[8976-9559]:MethodDeclaration[8976-9699]"
    }, {
      "left" : "private boolean isLongOption(String token)",
      "right" : "private boolean isLongOption(String token)",
      "info" : "MethodDeclaration[9565-10262]:MethodDeclaration[9705-10402]"
    }, {
      "left" : "private void handleUnknownToken(String token) throws ParseException",
      "right" : "private void handleUnknownToken(String token) throws ParseException",
      "info" : "MethodDeclaration[10268-11064]:MethodDeclaration[10408-11204]"
    }, {
      "left" : "private void handleLongOption(String token) throws ParseException",
      "right" : "private void handleLongOption(String token) throws ParseException",
      "info" : "MethodDeclaration[11070-11501]:MethodDeclaration[11210-11641]"
    }, {
      "left" : "private void handleLongOptionWithoutEqual(String token) throws ParseException",
      "right" : "private void handleLongOptionWithoutEqual(String token) throws ParseException",
      "info" : "MethodDeclaration[11507-12162]:MethodDeclaration[11647-12302]"
    }, {
      "left" : "private void handleLongOptionWithEqual(String token) throws ParseException",
      "right" : "private void handleLongOptionWithEqual(String token) throws ParseException",
      "info" : "MethodDeclaration[12168-13258]:MethodDeclaration[12308-13398]"
    }, {
      "left" : "private void handleShortAndLongOption(String token) throws ParseException",
      "right" : "private void handleShortAndLongOption(String token) throws ParseException",
      "info" : "MethodDeclaration[13264-16403]:MethodDeclaration[13404-16543]"
    }, {
      "left" : "private String getLongPrefix(String token)",
      "right" : "private String getLongPrefix(String token)",
      "info" : "MethodDeclaration[16409-16943]:MethodDeclaration[16549-17083]"
    }, {
      "left" : "private boolean isJavaProperty(String token)",
      "right" : "private boolean isJavaProperty(String token)",
      "info" : "MethodDeclaration[16949-17294]:MethodDeclaration[17089-17434]"
    }, {
      "left" : "private void handleOption(Option option) throws ParseException",
      "right" : "private void handleOption(Option option) throws ParseException",
      "info" : "MethodDeclaration[17300-17737]:MethodDeclaration[17440-17877]"
    }, {
      "left" : "private void updateRequiredOptions(Option option) throws AlreadySelectedException",
      "right" : "private void updateRequiredOptions(Option option) throws AlreadySelectedException",
      "info" : "MethodDeclaration[17743-18440]:MethodDeclaration[17883-18580]"
    }, {
      "left" : "protected void handleConcatenatedOptions(String token) throws ParseException",
      "right" : "protected void handleConcatenatedOptions(String token) throws ParseException",
      "info" : "MethodDeclaration[18446-20585]:MethodDeclaration[18586-20725]"
    } ],
    "mappings" : [
 {
      "left" : "CommandLineParser",
      "right" : "CommandLineParser",
      "info" : "SimpleType[1048-1065]:SimpleType[1048-1065]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1896-1902]:Modifier[1896-1902]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[1903-1914]:SimpleType[1903-1914]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[1915-1920]:SimpleName[1915-1920]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[1921-1936]:SingleVariableDeclaration[1921-1936]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[1938-1956]:SingleVariableDeclaration[1938-1956]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[1965-1979]:SimpleType[1965-1979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1984-2039]:Block[1984-2039]"
    }, {
      "left" : "return parse(options, arguments, null);",
      "right" : "return parse(options, arguments, null);",
      "info" : "ReturnStatement[1994-2033]:ReturnStatement[1994-2033]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2486-2492]:Modifier[2486-2492]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[2493-2504]:SimpleType[2493-2504]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[2505-2510]:SimpleName[2505-2510]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[2511-2526]:SingleVariableDeclaration[2511-2526]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[2528-2546]:SingleVariableDeclaration[2528-2546]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[2548-2569]:SingleVariableDeclaration[2548-2569]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[2578-2592]:SimpleType[2578-2592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2597-2665]:Block[2597-2665]"
    }, {
      "left" : "return parse(options, arguments, properties, false);",
      "right" : "return parse(options, arguments, properties, false);",
      "info" : "ReturnStatement[2607-2659]:ReturnStatement[2607-2659]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2671-2677]:Modifier[2671-2677]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[2678-2689]:SimpleType[2678-2689]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[2690-2695]:SimpleName[2690-2695]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[2696-2711]:SingleVariableDeclaration[2696-2711]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[2713-2731]:SingleVariableDeclaration[2713-2731]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[2733-2756]:SingleVariableDeclaration[2733-2756]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[2765-2779]:SimpleType[2765-2779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2784-2856]:Block[2784-2856]"
    }, {
      "left" : "return parse(options, arguments, null, stopAtNonOption);",
      "right" : "return parse(options, arguments, null, stopAtNonOption);",
      "info" : "ReturnStatement[2794-2850]:ReturnStatement[2794-2850]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3589-3595]:Modifier[3589-3595]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[3596-3607]:SimpleType[3596-3607]"
    }, {
      "left" : "parse",
      "right" : "parse",
      "info" : "SimpleName[3608-3613]:SimpleName[3608-3613]"
    }, {
      "left" : "Options options",
      "right" : "Options options",
      "info" : "SingleVariableDeclaration[3614-3629]:SingleVariableDeclaration[3614-3629]"
    }, {
      "left" : "String[] arguments",
      "right" : "String[] arguments",
      "info" : "SingleVariableDeclaration[3631-3649]:SingleVariableDeclaration[3631-3649]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[3651-3672]:SingleVariableDeclaration[3651-3672]"
    }, {
      "left" : "boolean stopAtNonOption",
      "right" : "boolean stopAtNonOption",
      "info" : "SingleVariableDeclaration[3674-3697]:SingleVariableDeclaration[3674-3697]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[3718-3732]:SimpleType[3718-3732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3737-4518]:Block[3737-4518]"
    }, {
      "left" : "this.options = options;",
      "right" : "this.options = options;",
      "info" : "ExpressionStatement[3747-3770]:ExpressionStatement[3747-3770]"
    }, {
      "left" : "this.stopAtNonOption = stopAtNonOption;",
      "right" : "this.stopAtNonOption = stopAtNonOption;",
      "info" : "ExpressionStatement[3779-3818]:ExpressionStatement[3779-3818]"
    }, {
      "left" : "skipParsing = false;",
      "right" : "skipParsing = false;",
      "info" : "ExpressionStatement[3827-3847]:ExpressionStatement[3827-3847]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[3856-3877]:ExpressionStatement[3856-3877]"
    }, {
      "left" : "expectedOpts = new ArrayList(options.getRequiredOptions());",
      "right" : "expectedOpts = new ArrayList(options.getRequiredOptions());",
      "info" : "ExpressionStatement[3886-3945]:ExpressionStatement[3886-3945]"
    }, {
      "left" : "for (OptionGroup group : options.getOptionGroups())",
      "right" : "for (OptionGroup group : options.getOptionGroups())",
      "info" : "EnhancedForStatement[3997-4105]:EnhancedForStatement[3997-4105]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4057-4105]:Block[4057-4105]"
    }, {
      "left" : "group.setSelected(null);",
      "right" : "group.setSelected(null);",
      "info" : "ExpressionStatement[4071-4095]:ExpressionStatement[4071-4095]"
    }, {
      "left" : "cmd = new CommandLine();",
      "right" : "cmd = new CommandLine();",
      "info" : "ExpressionStatement[4115-4139]:ExpressionStatement[4115-4139]"
    }, {
      "left" : "if (arguments != null)",
      "right" : "if (arguments != null)",
      "info" : "IfStatement[4149-4304]:IfStatement[4149-4304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4180-4304]:Block[4180-4304]"
    }, {
      "left" : "for (String argument : arguments)",
      "right" : "for (String argument : arguments)",
      "info" : "EnhancedForStatement[4194-4294]:EnhancedForStatement[4194-4294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4240-4294]:Block[4240-4294]"
    }, {
      "left" : "handleToken(argument);",
      "right" : "handleToken(argument);",
      "info" : "ExpressionStatement[4258-4280]:ExpressionStatement[4258-4280]"
    }, {
      "left" : "checkRequiredArgs();",
      "right" : "checkRequiredArgs();",
      "info" : "ExpressionStatement[4364-4384]:ExpressionStatement[4364-4384]"
    }, {
      "left" : "handleProperties(properties);",
      "right" : "handleProperties(properties);",
      "info" : "ExpressionStatement[4429-4458]:ExpressionStatement[4429-4458]"
    }, {
      "left" : "checkRequiredOptions();",
      "right" : "checkRequiredOptions();",
      "info" : "ExpressionStatement[4468-4491]:ExpressionStatement[4468-4491]"
    }, {
      "left" : "return cmd;",
      "right" : "return cmd;",
      "info" : "ReturnStatement[4501-4512]:ReturnStatement[4501-4512]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4689-4696]:Modifier[4689-4696]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4697-4701]:PrimitiveType[4697-4701]"
    }, {
      "left" : "handleProperties",
      "right" : "handleProperties",
      "info" : "SimpleName[4702-4718]:SimpleName[4702-4718]"
    }, {
      "left" : "Properties properties",
      "right" : "Properties properties",
      "info" : "SingleVariableDeclaration[4719-4740]:SingleVariableDeclaration[4719-4740]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[4749-4763]:SimpleType[4749-4763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4768-6321]:Block[4768-6321]"
    }, {
      "left" : "if (properties == null)",
      "right" : "if (properties == null)",
      "info" : "IfStatement[4778-4841]:IfStatement[4778-4841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4810-4841]:Block[4810-4841]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4824-4831]:ReturnStatement[4824-4831]"
    }, {
      "left" : "for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements())",
      "right" : "for (Enumeration<?> e = properties.propertyNames(); e.hasMoreElements())",
      "info" : "ForStatement[4851-6315]:ForStatement[4851-6315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4933-6315]:Block[4933-6315]"
    }, {
      "left" : "String option = e.nextElement().toString();",
      "right" : "String option = e.nextElement().toString();",
      "info" : "VariableDeclarationStatement[4947-4990]:VariableDeclarationStatement[4947-4990]"
    }, {
      "left" : "Option opt = options.getOption(option);",
      "right" : "Option opt = options.getOption(option);",
      "info" : "VariableDeclarationStatement[5004-5043]:VariableDeclarationStatement[5004-5043]"
    }, {
      "left" : "if (opt == null)",
      "right" : "if (opt == null)",
      "info" : "IfStatement[5056-5196]:IfStatement[5056-5196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5085-5196]:Block[5085-5196]"
    }, {
      "left" : "throw new UnrecognizedOptionException(\"Default option wasn't defined\", option);",
      "right" : "throw new UnrecognizedOptionException(\"Default option wasn't defined\", option);",
      "info" : "ThrowStatement[5103-5182]:ThrowStatement[5103-5182]"
    }, {
      "left" : "OptionGroup group = options.getOptionGroup(opt);",
      "right" : "OptionGroup group = options.getOptionGroup(opt);",
      "info" : "VariableDeclarationStatement[5314-5362]:VariableDeclarationStatement[5314-5362]"
    }, {
      "left" : "boolean selected = group != null && group.getSelected() != null;",
      "right" : "boolean selected = group != null && group.getSelected() != null;",
      "info" : "VariableDeclarationStatement[5375-5439]:VariableDeclarationStatement[5375-5439]"
    }, {
      "left" : "if (!cmd.hasOption(option) && !selected)",
      "right" : "if (!cmd.hasOption(option) && !selected)",
      "info" : "IfStatement[5453-6305]:IfStatement[5453-6305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5506-6305]:Block[5506-6305]"
    }, {
      "left" : "String value = properties.getProperty(option);",
      "right" : "String value = properties.getProperty(option);",
      "info" : "VariableDeclarationStatement[5577-5623]:VariableDeclarationStatement[5577-5623]"
    }, {
      "left" : "if (opt.hasArg())",
      "right" : "if (opt.hasArg())",
      "info" : "IfStatement[5641-6217]:IfStatement[5641-6217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5675-5876]:Block[5675-5876]"
    }, {
      "left" : "if (opt.getValues() == null || opt.getValues().length == 0)",
      "right" : "if (opt.getValues() == null || opt.getValues().length == 0)",
      "info" : "IfStatement[5697-5858]:IfStatement[5697-5858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5777-5858]:Block[5777-5858]"
    }, {
      "left" : "opt.addValueForProcessing(value);",
      "right" : "opt.addValueForProcessing(value);",
      "info" : "ExpressionStatement[5803-5836]:ExpressionStatement[5803-5836]"
    }, {
      "left" : "if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))",
      "right" : "if (!(\"yes\".equalsIgnoreCase(value)\n                        || \"true\".equalsIgnoreCase(value)\n                        || \"1\".equalsIgnoreCase(value)))",
      "info" : "IfStatement[5898-6217]:IfStatement[5898-6217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6065-6217]:Block[6065-6217]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6190-6199]:ContinueStatement[6190-6199]"
    }, {
      "left" : "handleOption(opt);",
      "right" : "handleOption(opt);",
      "info" : "ExpressionStatement[6235-6253]:ExpressionStatement[6235-6253]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[6270-6291]:ExpressionStatement[6270-6291]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6545-6552]:Modifier[6545-6552]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6553-6557]:PrimitiveType[6553-6557]"
    }, {
      "left" : "checkRequiredOptions",
      "right" : "checkRequiredOptions",
      "info" : "SimpleName[6558-6578]:SimpleName[6558-6578]"
    }, {
      "left" : "MissingOptionException",
      "right" : "MissingOptionException",
      "info" : "SimpleType[6588-6610]:SimpleType[6588-6610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6615-6809]:Block[6615-6809]"
    }, {
      "left" : "if (!expectedOpts.isEmpty())",
      "right" : "if (!expectedOpts.isEmpty())",
      "info" : "IfStatement[6695-6803]:IfStatement[6695-6803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6732-6803]:Block[6732-6803]"
    }, {
      "left" : "throw new MissingOptionException(expectedOpts);",
      "right" : "throw new MissingOptionException(expectedOpts);",
      "info" : "ThrowStatement[6746-6793]:ThrowStatement[6746-6793]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6957-6964]:Modifier[6957-6964]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6965-6969]:PrimitiveType[6965-6969]"
    }, {
      "left" : "checkRequiredArgs",
      "right" : "checkRequiredArgs",
      "info" : "SimpleName[6970-6987]:SimpleName[6970-6987]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[6997-7011]:SimpleType[6997-7011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7016-7172]:Block[7016-7172]"
    }, {
      "left" : "if (currentOption != null && currentOption.requiresArg())",
      "right" : "if (currentOption != null && currentOption.requiresArg())",
      "info" : "IfStatement[7026-7166]:IfStatement[7026-7166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7092-7166]:Block[7092-7166]"
    }, {
      "left" : "throw new MissingArgumentException(currentOption);",
      "right" : "throw new MissingArgumentException(currentOption);",
      "info" : "ThrowStatement[7106-7156]:ThrowStatement[7106-7156]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7322-7329]:Modifier[7322-7329]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7330-7334]:PrimitiveType[7330-7334]"
    }, {
      "left" : "handleToken",
      "right" : "handleToken",
      "info" : "SimpleName[7335-7346]:SimpleName[7335-7346]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[7347-7359]:SingleVariableDeclaration[7347-7359]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[7368-7382]:SimpleType[7368-7382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7387-8211]:Block[7387-8211]"
    }, {
      "left" : "currentToken = token;",
      "right" : "currentToken = token;",
      "info" : "ExpressionStatement[7397-7418]:ExpressionStatement[7397-7418]"
    }, {
      "left" : "if (skipParsing)",
      "right" : "if (skipParsing)",
      "info" : "IfStatement[7428-8084]:IfStatement[7428-8084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7453-7495]:Block[7453-7495]"
    }, {
      "left" : "cmd.addArg(token);",
      "right" : "cmd.addArg(token);",
      "info" : "ExpressionStatement[7467-7485]:ExpressionStatement[7467-7485]"
    }, {
      "left" : "if (\"--\".equals(token))",
      "right" : "if (\"--\".equals(token))",
      "info" : "IfStatement[7509-8084]:IfStatement[7509-8084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7541-7584]:Block[7541-7584]"
    }, {
      "left" : "skipParsing = true;",
      "right" : "skipParsing = true;",
      "info" : "ExpressionStatement[7555-7574]:ExpressionStatement[7555-7574]"
    }, {
      "left" : "if (currentOption != null && currentOption.acceptsArg() && isArgument(token))",
      "right" : "if (currentOption != null && currentOption.acceptsArg() && isArgument(token))",
      "info" : "IfStatement[7598-8084]:IfStatement[7598-8084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7684-7787]:Block[7684-7787]"
    }, {
      "left" : "currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));",
      "right" : "currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));",
      "info" : "ExpressionStatement[7698-7777]:ExpressionStatement[7698-7777]"
    }, {
      "left" : "if (token.startsWith(\"--\"))",
      "right" : "if (token.startsWith(\"--\"))",
      "info" : "IfStatement[7801-8084]:IfStatement[7801-8084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7837-7885]:Block[7837-7885]"
    }, {
      "left" : "handleLongOption(token);",
      "right" : "handleLongOption(token);",
      "info" : "ExpressionStatement[7851-7875]:ExpressionStatement[7851-7875]"
    }, {
      "left" : "if (token.startsWith(\"-\") && !\"-\".equals(token))",
      "right" : "if (token.startsWith(\"-\") && !\"-\".equals(token))",
      "info" : "IfStatement[7899-8084]:IfStatement[7899-8084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7956-8012]:Block[7956-8012]"
    }, {
      "left" : "handleShortAndLongOption(token);",
      "right" : "handleShortAndLongOption(token);",
      "info" : "ExpressionStatement[7970-8002]:ExpressionStatement[7970-8002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8034-8084]:Block[8034-8084]"
    }, {
      "left" : "handleUnknownToken(token);",
      "right" : "handleUnknownToken(token);",
      "info" : "ExpressionStatement[8048-8074]:ExpressionStatement[8048-8074]"
    }, {
      "left" : "if (currentOption != null && !currentOption.acceptsArg())",
      "right" : "if (currentOption != null && !currentOption.acceptsArg())",
      "info" : "IfStatement[8094-8205]:IfStatement[8094-8205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8160-8205]:Block[8160-8205]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[8174-8195]:ExpressionStatement[8174-8195]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8314-8321]:Modifier[8314-8321]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8322-8329]:PrimitiveType[8322-8329]"
    }, {
      "left" : "isArgument",
      "right" : "isArgument",
      "info" : "SimpleName[8330-8340]:SimpleName[8330-8340]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[8341-8353]:SingleVariableDeclaration[8341-8353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8359-8426]:Block[8359-8426]"
    }, {
      "left" : "return !isOption(token) || isNegativeNumber(token);",
      "right" : "return !isOption(token) || isNegativeNumber(token);",
      "info" : "ReturnStatement[8369-8420]:ReturnStatement[8369-8420]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8523-8530]:Modifier[8523-8530]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8531-8538]:PrimitiveType[8531-8538]"
    }, {
      "left" : "isNegativeNumber",
      "right" : "isNegativeNumber",
      "info" : "SimpleName[8539-8555]:SimpleName[8539-8555]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[8556-8568]:SingleVariableDeclaration[8556-8568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8574-8763]:Block[8574-8763]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8584-8757]:TryStatement[8584-8757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8596-8671]:Block[8596-8671]"
    }, {
      "left" : "Double.parseDouble(token);",
      "right" : "Double.parseDouble(token);",
      "info" : "ExpressionStatement[8610-8636]:ExpressionStatement[8610-8636]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8649-8661]:ReturnStatement[8649-8661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8720-8757]:Block[8720-8757]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8734-8747]:ReturnStatement[8734-8747]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8860-8867]:Modifier[8860-8867]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8868-8875]:PrimitiveType[8868-8875]"
    }, {
      "left" : "isOption",
      "right" : "isOption",
      "info" : "SimpleName[8876-8884]:SimpleName[8876-8884]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[8885-8897]:SingleVariableDeclaration[8885-8897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8903-8970]:Block[8903-8970]"
    }, {
      "left" : "return isLongOption(token) || isShortOption(token);",
      "right" : "return isLongOption(token) || isShortOption(token);",
      "info" : "ReturnStatement[8913-8964]:ReturnStatement[8913-8964]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9073-9080]:Modifier[9073-9080]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9081-9088]:PrimitiveType[9081-9088]"
    }, {
      "left" : "isShortOption",
      "right" : "isShortOption",
      "info" : "SimpleName[9089-9102]:SimpleName[9089-9102]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[9103-9115]:SingleVariableDeclaration[9103-9115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9121-9559]:Block[9121-9699]"
    }, {
      "left" : "if (!token.startsWith(\"-\") || token.length() == 1)",
      "right" : "if (!token.startsWith(\"-\") || token.length() == 1)",
      "info" : "IfStatement[9188-9284]:IfStatement[9188-9284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9247-9284]:Block[9247-9284]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9261-9274]:ReturnStatement[9261-9274]"
    }, {
      "left" : "int pos = token.indexOf(\"=\");",
      "right" : "int pos = token.indexOf(\"=\");",
      "info" : "VariableDeclarationStatement[9337-9366]:VariableDeclarationStatement[9337-9366]"
    }, {
      "left" : "String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);",
      "right" : "String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);",
      "info" : "VariableDeclarationStatement[9375-9449]:VariableDeclarationStatement[9375-9449]"
    }, {
      "left" : "return options.hasShortOption(optName);",
      "right" : "return optName.length() > 0 && options.hasShortOption(String.valueOf(optName.charAt(0)));",
      "info" : "ReturnStatement[9458-9497]:ReturnStatement[9604-9693]"
    }, {
      "left" : "options.hasShortOption(optName)",
      "right" : "options.hasShortOption(optName)",
      "info" : "MethodInvocation[9465-9496]:MethodInvocation[9462-9493]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9660-9667]:Modifier[9800-9807]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9668-9675]:PrimitiveType[9808-9815]"
    }, {
      "left" : "isLongOption",
      "right" : "isLongOption",
      "info" : "SimpleName[9676-9688]:SimpleName[9816-9828]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[9689-9701]:SingleVariableDeclaration[9829-9841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9707-10262]:Block[9847-10402]"
    }, {
      "left" : "if (!token.startsWith(\"-\") || token.length() == 1)",
      "right" : "if (!token.startsWith(\"-\") || token.length() == 1)",
      "info" : "IfStatement[9717-9813]:IfStatement[9857-9953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9776-9813]:Block[9916-9953]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9790-9803]:ReturnStatement[9930-9943]"
    }, {
      "left" : "int pos = token.indexOf(\"=\");",
      "right" : "int pos = token.indexOf(\"=\");",
      "info" : "VariableDeclarationStatement[9823-9852]:VariableDeclarationStatement[9963-9992]"
    }, {
      "left" : "String t = pos == -1 ? token : token.substring(0, pos);",
      "right" : "String t = pos == -1 ? token : token.substring(0, pos);",
      "info" : "VariableDeclarationStatement[9861-9916]:VariableDeclarationStatement[10001-10056]"
    }, {
      "left" : "if (!options.getMatchingOptions(t).isEmpty())",
      "right" : "if (!options.getMatchingOptions(t).isEmpty())",
      "info" : "IfStatement[9926-10233]:IfStatement[10066-10373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9980-10095]:Block[10120-10235]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10073-10085]:ReturnStatement[10213-10225]"
    }, {
      "left" : "if (getLongPrefix(token) != null && !token.startsWith(\"--\"))",
      "right" : "if (getLongPrefix(token) != null && !token.startsWith(\"--\"))",
      "info" : "IfStatement[10109-10233]:IfStatement[10249-10373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10178-10233]:Block[10318-10373]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[10211-10223]:ReturnStatement[10351-10363]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[10243-10256]:ReturnStatement[10383-10396]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10688-10695]:Modifier[10828-10835]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10696-10700]:PrimitiveType[10836-10840]"
    }, {
      "left" : "handleUnknownToken",
      "right" : "handleUnknownToken",
      "info" : "SimpleName[10701-10719]:SimpleName[10841-10859]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[10720-10732]:SingleVariableDeclaration[10860-10872]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[10741-10755]:SimpleType[10881-10895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10760-11064]:Block[10900-11204]"
    }, {
      "left" : "if (token.startsWith(\"-\") && token.length() > 1 && !stopAtNonOption)",
      "right" : "if (token.startsWith(\"-\") && token.length() > 1 && !stopAtNonOption)",
      "info" : "IfStatement[10770-10949]:IfStatement[10910-11089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10847-10949]:Block[10987-11089]"
    }, {
      "left" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);",
      "right" : "throw new UnrecognizedOptionException(\"Unrecognized option: \" + token, token);",
      "info" : "ThrowStatement[10861-10939]:ThrowStatement[11001-11079]"
    }, {
      "left" : "cmd.addArg(token);",
      "right" : "cmd.addArg(token);",
      "info" : "ExpressionStatement[10959-10977]:ExpressionStatement[11099-11117]"
    }, {
      "left" : "if (stopAtNonOption)",
      "right" : "if (stopAtNonOption)",
      "info" : "IfStatement[10986-11058]:IfStatement[11126-11198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11015-11058]:Block[11155-11198]"
    }, {
      "left" : "skipParsing = true;",
      "right" : "skipParsing = true;",
      "info" : "ExpressionStatement[11029-11048]:ExpressionStatement[11169-11188]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11238-11245]:Modifier[11378-11385]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11246-11250]:PrimitiveType[11386-11390]"
    }, {
      "left" : "handleLongOption",
      "right" : "handleLongOption",
      "info" : "SimpleName[11251-11267]:SimpleName[11391-11407]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[11268-11280]:SingleVariableDeclaration[11408-11420]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[11289-11303]:SimpleType[11429-11443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11308-11501]:Block[11448-11641]"
    }, {
      "left" : "if (token.indexOf('=') == -1)",
      "right" : "if (token.indexOf('=') == -1)",
      "info" : "IfStatement[11318-11495]:IfStatement[11458-11635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11356-11416]:Block[11496-11556]"
    }, {
      "left" : "handleLongOptionWithoutEqual(token);",
      "right" : "handleLongOptionWithoutEqual(token);",
      "info" : "ExpressionStatement[11370-11406]:ExpressionStatement[11510-11546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11438-11495]:Block[11578-11635]"
    }, {
      "left" : "handleLongOptionWithEqual(token);",
      "right" : "handleLongOptionWithEqual(token);",
      "info" : "ExpressionStatement[11452-11485]:ExpressionStatement[11592-11625]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11670-11677]:Modifier[11810-11817]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11678-11682]:PrimitiveType[11818-11822]"
    }, {
      "left" : "handleLongOptionWithoutEqual",
      "right" : "handleLongOptionWithoutEqual",
      "info" : "SimpleName[11683-11711]:SimpleName[11823-11851]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[11712-11724]:SingleVariableDeclaration[11852-11864]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[11733-11747]:SimpleType[11873-11887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11752-12162]:Block[11892-12302]"
    }, {
      "left" : "List<String> matchingOpts = options.getMatchingOptions(token);",
      "right" : "List<String> matchingOpts = options.getMatchingOptions(token);",
      "info" : "VariableDeclarationStatement[11762-11824]:VariableDeclarationStatement[11902-11964]"
    }, {
      "left" : "if (matchingOpts.isEmpty())",
      "right" : "if (matchingOpts.isEmpty())",
      "info" : "IfStatement[11833-12156]:IfStatement[11973-12296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11869-11926]:Block[12009-12066]"
    }, {
      "left" : "handleUnknownToken(currentToken);",
      "right" : "handleUnknownToken(currentToken);",
      "info" : "ExpressionStatement[11883-11916]:ExpressionStatement[12023-12056]"
    }, {
      "left" : "if (matchingOpts.size() > 1)",
      "right" : "if (matchingOpts.size() > 1)",
      "info" : "IfStatement[11940-12156]:IfStatement[12080-12296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11977-12057]:Block[12117-12197]"
    }, {
      "left" : "throw new AmbiguousOptionException(token, matchingOpts);",
      "right" : "throw new AmbiguousOptionException(token, matchingOpts);",
      "info" : "ThrowStatement[11991-12047]:ThrowStatement[12131-12187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12079-12156]:Block[12219-12296]"
    }, {
      "left" : "handleOption(options.getOption(matchingOpts.get(0)));",
      "right" : "handleOption(options.getOption(matchingOpts.get(0)));",
      "info" : "ExpressionStatement[12093-12146]:ExpressionStatement[12233-12286]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12338-12345]:Modifier[12478-12485]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12346-12350]:PrimitiveType[12486-12490]"
    }, {
      "left" : "handleLongOptionWithEqual",
      "right" : "handleLongOptionWithEqual",
      "info" : "SimpleName[12351-12376]:SimpleName[12491-12516]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[12377-12389]:SingleVariableDeclaration[12517-12529]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[12398-12412]:SimpleType[12538-12552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12417-13258]:Block[12557-13398]"
    }, {
      "left" : "int pos = token.indexOf('=');",
      "right" : "int pos = token.indexOf('=');",
      "info" : "VariableDeclarationStatement[12427-12456]:VariableDeclarationStatement[12567-12596]"
    }, {
      "left" : "String value = token.substring(pos + 1);",
      "right" : "String value = token.substring(pos + 1);",
      "info" : "VariableDeclarationStatement[12466-12506]:VariableDeclarationStatement[12606-12646]"
    }, {
      "left" : "String opt = token.substring(0, pos);",
      "right" : "String opt = token.substring(0, pos);",
      "info" : "VariableDeclarationStatement[12516-12553]:VariableDeclarationStatement[12656-12693]"
    }, {
      "left" : "List<String> matchingOpts = options.getMatchingOptions(opt);",
      "right" : "List<String> matchingOpts = options.getMatchingOptions(opt);",
      "info" : "VariableDeclarationStatement[12563-12623]:VariableDeclarationStatement[12703-12763]"
    }, {
      "left" : "if (matchingOpts.isEmpty())",
      "right" : "if (matchingOpts.isEmpty())",
      "info" : "IfStatement[12632-13252]:IfStatement[12772-13392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12668-12725]:Block[12808-12865]"
    }, {
      "left" : "handleUnknownToken(currentToken);",
      "right" : "handleUnknownToken(currentToken);",
      "info" : "ExpressionStatement[12682-12715]:ExpressionStatement[12822-12855]"
    }, {
      "left" : "if (matchingOpts.size() > 1)",
      "right" : "if (matchingOpts.size() > 1)",
      "info" : "IfStatement[12739-13252]:IfStatement[12879-13392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12776-12854]:Block[12916-12994]"
    }, {
      "left" : "throw new AmbiguousOptionException(opt, matchingOpts);",
      "right" : "throw new AmbiguousOptionException(opt, matchingOpts);",
      "info" : "ThrowStatement[12790-12844]:ThrowStatement[12930-12984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12876-13252]:Block[13016-13392]"
    }, {
      "left" : "Option option = options.getOption(matchingOpts.get(0));",
      "right" : "Option option = options.getOption(matchingOpts.get(0));",
      "info" : "VariableDeclarationStatement[12890-12945]:VariableDeclarationStatement[13030-13085]"
    }, {
      "left" : "if (option.acceptsArg())",
      "right" : "if (option.acceptsArg())",
      "info" : "IfStatement[12959-13242]:IfStatement[13099-13382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12996-13147]:Block[13136-13287]"
    }, {
      "left" : "handleOption(option);",
      "right" : "handleOption(option);",
      "info" : "ExpressionStatement[13014-13035]:ExpressionStatement[13154-13175]"
    }, {
      "left" : "currentOption.addValueForProcessing(value);",
      "right" : "currentOption.addValueForProcessing(value);",
      "info" : "ExpressionStatement[13052-13095]:ExpressionStatement[13192-13235]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[13112-13133]:ExpressionStatement[13252-13273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13177-13242]:Block[13317-13382]"
    }, {
      "left" : "handleUnknownToken(currentToken);",
      "right" : "handleUnknownToken(currentToken);",
      "info" : "ExpressionStatement[13195-13228]:ExpressionStatement[13335-13368]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13534-13541]:Modifier[13674-13681]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13542-13546]:PrimitiveType[13682-13686]"
    }, {
      "left" : "handleShortAndLongOption",
      "right" : "handleShortAndLongOption",
      "info" : "SimpleName[13547-13571]:SimpleName[13687-13711]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[13572-13584]:SingleVariableDeclaration[13712-13724]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[13593-13607]:SimpleType[13733-13747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13612-16403]:Block[13752-16543]"
    }, {
      "left" : "String t = Util.stripLeadingHyphens(token);",
      "right" : "String t = Util.stripLeadingHyphens(token);",
      "info" : "VariableDeclarationStatement[13622-13665]:VariableDeclarationStatement[13762-13805]"
    }, {
      "left" : "int pos = t.indexOf('=');",
      "right" : "int pos = t.indexOf('=');",
      "info" : "VariableDeclarationStatement[13675-13700]:VariableDeclarationStatement[13815-13840]"
    }, {
      "left" : "if (t.length() == 1)",
      "right" : "if (t.length() == 1)",
      "info" : "IfStatement[13710-16397]:IfStatement[13850-16537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13739-13979]:Block[13879-14119]"
    }, {
      "left" : "if (options.hasShortOption(t))",
      "right" : "if (options.hasShortOption(t))",
      "info" : "IfStatement[13771-13969]:IfStatement[13911-14109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13814-13881]:Block[13954-14021]"
    }, {
      "left" : "handleOption(options.getOption(t));",
      "right" : "handleOption(options.getOption(t));",
      "info" : "ExpressionStatement[13832-13867]:ExpressionStatement[13972-14007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13911-13969]:Block[14051-14109]"
    }, {
      "left" : "handleUnknownToken(token);",
      "right" : "handleUnknownToken(token);",
      "info" : "ExpressionStatement[13929-13955]:ExpressionStatement[14069-14095]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[13993-16397]:IfStatement[14133-16537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14016-15258]:Block[14156-15398]"
    }, {
      "left" : "if (options.hasShortOption(t))",
      "right" : "if (options.hasShortOption(t))",
      "info" : "IfStatement[14072-15248]:IfStatement[14212-15388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14115-14182]:Block[14255-14322]"
    }, {
      "left" : "handleOption(options.getOption(t));",
      "right" : "handleOption(options.getOption(t));",
      "info" : "ExpressionStatement[14133-14168]:ExpressionStatement[14273-14308]"
    }, {
      "left" : "if (!options.getMatchingOptions(t).isEmpty())",
      "right" : "if (!options.getMatchingOptions(t).isEmpty())",
      "info" : "IfStatement[14200-15248]:IfStatement[14340-15388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14258-14354]:Block[14398-14494]"
    }, {
      "left" : "handleLongOptionWithoutEqual(token);",
      "right" : "handleLongOptionWithoutEqual(token);",
      "info" : "ExpressionStatement[14304-14340]:ExpressionStatement[14444-14480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14384-15248]:Block[14524-15388]"
    }, {
      "left" : "String opt = getLongPrefix(t);",
      "right" : "String opt = getLongPrefix(t);",
      "info" : "VariableDeclarationStatement[14455-14485]:VariableDeclarationStatement[14595-14625]"
    }, {
      "left" : "if (opt != null && options.getOption(opt).acceptsArg())",
      "right" : "if (opt != null && options.getOption(opt).acceptsArg())",
      "info" : "IfStatement[14503-15234]:IfStatement[14643-15374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14575-14778]:Block[14715-14918]"
    }, {
      "left" : "handleOption(options.getOption(opt));",
      "right" : "handleOption(options.getOption(opt));",
      "info" : "ExpressionStatement[14597-14634]:ExpressionStatement[14737-14774]"
    }, {
      "left" : "currentOption.addValueForProcessing(t.substring(opt.length()));",
      "right" : "currentOption.addValueForProcessing(t.substring(opt.length()));",
      "info" : "ExpressionStatement[14655-14718]:ExpressionStatement[14795-14858]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[14739-14760]:ExpressionStatement[14879-14900]"
    }, {
      "left" : "if (isJavaProperty(t))",
      "right" : "if (isJavaProperty(t))",
      "info" : "IfStatement[14800-15234]:IfStatement[14940-15374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14839-15082]:Block[14979-15222]"
    }, {
      "left" : "handleOption(options.getOption(t.substring(0, 1)));",
      "right" : "handleOption(options.getOption(t.substring(0, 1)));",
      "info" : "ExpressionStatement[14898-14949]:ExpressionStatement[15038-15089]"
    }, {
      "left" : "currentOption.addValueForProcessing(t.substring(1));",
      "right" : "currentOption.addValueForProcessing(t.substring(1));",
      "info" : "ExpressionStatement[14970-15022]:ExpressionStatement[15110-15162]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[15043-15064]:ExpressionStatement[15183-15204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15120-15234]:Block[15260-15374]"
    }, {
      "left" : "handleConcatenatedOptions(token);",
      "right" : "handleConcatenatedOptions(token);",
      "info" : "ExpressionStatement[15183-15216]:ExpressionStatement[15323-15356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15280-16397]:Block[15420-16537]"
    }, {
      "left" : "String opt = t.substring(0, pos);",
      "right" : "String opt = t.substring(0, pos);",
      "info" : "VariableDeclarationStatement[15337-15370]:VariableDeclarationStatement[15477-15510]"
    }, {
      "left" : "String value = t.substring(pos + 1);",
      "right" : "String value = t.substring(pos + 1);",
      "info" : "VariableDeclarationStatement[15383-15419]:VariableDeclarationStatement[15523-15559]"
    }, {
      "left" : "if (opt.length() == 1)",
      "right" : "if (opt.length() == 1)",
      "info" : "IfStatement[15433-16387]:IfStatement[15573-16527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15468-15910]:Block[15608-16050]"
    }, {
      "left" : "Option option = options.getOption(opt);",
      "right" : "Option option = options.getOption(opt);",
      "info" : "VariableDeclarationStatement[15510-15549]:VariableDeclarationStatement[15650-15689]"
    }, {
      "left" : "if (option != null && option.acceptsArg())",
      "right" : "if (option != null && option.acceptsArg())",
      "info" : "IfStatement[15566-15896]:IfStatement[15706-16036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15625-15792]:Block[15765-15932]"
    }, {
      "left" : "handleOption(option);",
      "right" : "handleOption(option);",
      "info" : "ExpressionStatement[15647-15668]:ExpressionStatement[15787-15808]"
    }, {
      "left" : "currentOption.addValueForProcessing(value);",
      "right" : "currentOption.addValueForProcessing(value);",
      "info" : "ExpressionStatement[15689-15732]:ExpressionStatement[15829-15872]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[15753-15774]:ExpressionStatement[15893-15914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15830-15896]:Block[15970-16036]"
    }, {
      "left" : "handleUnknownToken(token);",
      "right" : "handleUnknownToken(token);",
      "info" : "ExpressionStatement[15852-15878]:ExpressionStatement[15992-16018]"
    }, {
      "left" : "if (isJavaProperty(opt))",
      "right" : "if (isJavaProperty(opt))",
      "info" : "IfStatement[15928-16387]:IfStatement[16068-16527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15965-16260]:Block[16105-16400]"
    }, {
      "left" : "handleOption(options.getOption(opt.substring(0, 1)));",
      "right" : "handleOption(options.getOption(opt.substring(0, 1)));",
      "info" : "ExpressionStatement[16024-16077]:ExpressionStatement[16164-16217]"
    }, {
      "left" : "currentOption.addValueForProcessing(opt.substring(1));",
      "right" : "currentOption.addValueForProcessing(opt.substring(1));",
      "info" : "ExpressionStatement[16094-16148]:ExpressionStatement[16234-16288]"
    }, {
      "left" : "currentOption.addValueForProcessing(value);",
      "right" : "currentOption.addValueForProcessing(value);",
      "info" : "ExpressionStatement[16165-16208]:ExpressionStatement[16305-16348]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[16225-16246]:ExpressionStatement[16365-16386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16290-16387]:Block[16430-16527]"
    }, {
      "left" : "handleLongOptionWithEqual(token);",
      "right" : "handleLongOptionWithEqual(token);",
      "info" : "ExpressionStatement[16340-16373]:ExpressionStatement[16480-16513]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16525-16532]:Modifier[16665-16672]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[16533-16539]:SimpleType[16673-16679]"
    }, {
      "left" : "getLongPrefix",
      "right" : "getLongPrefix",
      "info" : "SimpleName[16540-16553]:SimpleName[16680-16693]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[16554-16566]:SingleVariableDeclaration[16694-16706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16572-16943]:Block[16712-17083]"
    }, {
      "left" : "String t = Util.stripLeadingHyphens(token);",
      "right" : "String t = Util.stripLeadingHyphens(token);",
      "info" : "VariableDeclarationStatement[16582-16625]:VariableDeclarationStatement[16722-16765]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[16635-16641]:VariableDeclarationStatement[16775-16781]"
    }, {
      "left" : "String opt = null;",
      "right" : "String opt = null;",
      "info" : "VariableDeclarationStatement[16650-16668]:VariableDeclarationStatement[16790-16808]"
    }, {
      "left" : "for (i = t.length() - 2; i > 1; i--)",
      "right" : "for (i = t.length() - 2; i > 1; i--)",
      "info" : "ForStatement[16677-16908]:ForStatement[16817-17048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16722-16908]:Block[16862-17048]"
    }, {
      "left" : "String prefix = t.substring(0, i);",
      "right" : "String prefix = t.substring(0, i);",
      "info" : "VariableDeclarationStatement[16736-16770]:VariableDeclarationStatement[16876-16910]"
    }, {
      "left" : "if (options.hasLongOption(prefix))",
      "right" : "if (options.hasLongOption(prefix))",
      "info" : "IfStatement[16783-16898]:IfStatement[16923-17038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16830-16898]:Block[16970-17038]"
    }, {
      "left" : "opt = prefix;",
      "right" : "opt = prefix;",
      "info" : "ExpressionStatement[16848-16861]:ExpressionStatement[16988-17001]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16878-16884]:BreakStatement[17018-17024]"
    }, {
      "left" : "return opt;",
      "right" : "return opt;",
      "info" : "ReturnStatement[16926-16937]:ReturnStatement[17066-17077]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17040-17047]:Modifier[17180-17187]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17048-17055]:PrimitiveType[17188-17195]"
    }, {
      "left" : "isJavaProperty",
      "right" : "isJavaProperty",
      "info" : "SimpleName[17056-17070]:SimpleName[17196-17210]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[17071-17083]:SingleVariableDeclaration[17211-17223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17089-17294]:Block[17229-17434]"
    }, {
      "left" : "String opt = token.substring(0, 1);",
      "right" : "String opt = token.substring(0, 1);",
      "info" : "VariableDeclarationStatement[17099-17134]:VariableDeclarationStatement[17239-17274]"
    }, {
      "left" : "Option option = options.getOption(opt);",
      "right" : "Option option = options.getOption(opt);",
      "info" : "VariableDeclarationStatement[17143-17182]:VariableDeclarationStatement[17283-17322]"
    }, {
      "left" : "return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);",
      "right" : "return option != null && (option.getArgs() >= 2 || option.getArgs() == Option.UNLIMITED_VALUES);",
      "info" : "ReturnStatement[17192-17288]:ReturnStatement[17332-17428]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17300-17307]:Modifier[17440-17447]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17308-17312]:PrimitiveType[17448-17452]"
    }, {
      "left" : "handleOption",
      "right" : "handleOption",
      "info" : "SimpleName[17313-17325]:SimpleName[17453-17465]"
    }, {
      "left" : "Option option",
      "right" : "Option option",
      "info" : "SingleVariableDeclaration[17326-17339]:SingleVariableDeclaration[17466-17479]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[17348-17362]:SimpleType[17488-17502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17367-17737]:Block[17507-17877]"
    }, {
      "left" : "checkRequiredArgs();",
      "right" : "checkRequiredArgs();",
      "info" : "ExpressionStatement[17443-17463]:ExpressionStatement[17583-17603]"
    }, {
      "left" : "option = (Option) option.clone();",
      "right" : "option = (Option) option.clone();",
      "info" : "ExpressionStatement[17473-17506]:ExpressionStatement[17613-17646]"
    }, {
      "left" : "updateRequiredOptions(option);",
      "right" : "updateRequiredOptions(option);",
      "info" : "ExpressionStatement[17516-17546]:ExpressionStatement[17656-17686]"
    }, {
      "left" : "cmd.addOption(option);",
      "right" : "cmd.addOption(option);",
      "info" : "ExpressionStatement[17556-17578]:ExpressionStatement[17696-17718]"
    }, {
      "left" : "if (option.hasArg())",
      "right" : "if (option.hasArg())",
      "info" : "IfStatement[17588-17731]:IfStatement[17728-17871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17617-17664]:Block[17757-17804]"
    }, {
      "left" : "currentOption = option;",
      "right" : "currentOption = option;",
      "info" : "ExpressionStatement[17631-17654]:ExpressionStatement[17771-17794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17686-17731]:Block[17826-17871]"
    }, {
      "left" : "currentOption = null;",
      "right" : "currentOption = null;",
      "info" : "ExpressionStatement[17700-17721]:ExpressionStatement[17840-17861]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17862-17869]:Modifier[18002-18009]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17870-17874]:PrimitiveType[18010-18014]"
    }, {
      "left" : "updateRequiredOptions",
      "right" : "updateRequiredOptions",
      "info" : "SimpleName[17875-17896]:SimpleName[18015-18036]"
    }, {
      "left" : "Option option",
      "right" : "Option option",
      "info" : "SingleVariableDeclaration[17897-17910]:SingleVariableDeclaration[18037-18050]"
    }, {
      "left" : "AlreadySelectedException",
      "right" : "AlreadySelectedException",
      "info" : "SimpleType[17919-17943]:SimpleType[18059-18083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17948-18440]:Block[18088-18580]"
    }, {
      "left" : "if (option.isRequired())",
      "right" : "if (option.isRequired())",
      "info" : "IfStatement[17958-18052]:IfStatement[18098-18192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17991-18052]:Block[18131-18192]"
    }, {
      "left" : "expectedOpts.remove(option.getKey());",
      "right" : "expectedOpts.remove(option.getKey());",
      "info" : "ExpressionStatement[18005-18042]:ExpressionStatement[18145-18182]"
    }, {
      "left" : "if (options.getOptionGroup(option) != null)",
      "right" : "if (options.getOptionGroup(option) != null)",
      "info" : "IfStatement[18158-18434]:IfStatement[18298-18574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18210-18434]:Block[18350-18574]"
    }, {
      "left" : "OptionGroup group = options.getOptionGroup(option);",
      "right" : "OptionGroup group = options.getOptionGroup(option);",
      "info" : "VariableDeclarationStatement[18224-18275]:VariableDeclarationStatement[18364-18415]"
    }, {
      "left" : "if (group.isRequired())",
      "right" : "if (group.isRequired())",
      "info" : "IfStatement[18289-18384]:IfStatement[18429-18524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18325-18384]:Block[18465-18524]"
    }, {
      "left" : "expectedOpts.remove(group);",
      "right" : "expectedOpts.remove(group);",
      "info" : "ExpressionStatement[18343-18370]:ExpressionStatement[18483-18510]"
    }, {
      "left" : "group.setSelected(option);",
      "right" : "group.setSelected(option);",
      "info" : "ExpressionStatement[18398-18424]:ExpressionStatement[18538-18564]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[19810-19819]:Modifier[19950-19959]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19820-19824]:PrimitiveType[19960-19964]"
    }, {
      "left" : "handleConcatenatedOptions",
      "right" : "handleConcatenatedOptions",
      "info" : "SimpleName[19825-19850]:SimpleName[19965-19990]"
    }, {
      "left" : "String token",
      "right" : "String token",
      "info" : "SingleVariableDeclaration[19851-19863]:SingleVariableDeclaration[19991-20003]"
    }, {
      "left" : "ParseException",
      "right" : "ParseException",
      "info" : "SimpleType[19872-19886]:SimpleType[20012-20026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19891-20585]:Block[20031-20725]"
    }, {
      "left" : "for (int i = 1; i < token.length(); i++)",
      "right" : "for (int i = 1; i < token.length(); i++)",
      "info" : "ForStatement[19901-20579]:ForStatement[20041-20719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19950-20579]:Block[20090-20719]"
    }, {
      "left" : "String ch = String.valueOf(token.charAt(i));",
      "right" : "String ch = String.valueOf(token.charAt(i));",
      "info" : "VariableDeclarationStatement[19964-20008]:VariableDeclarationStatement[20104-20148]"
    }, {
      "left" : "if (options.hasOption(ch))",
      "right" : "if (options.hasOption(ch))",
      "info" : "IfStatement[20022-20569]:IfStatement[20162-20709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20061-20410]:Block[20201-20550]"
    }, {
      "left" : "handleOption(options.getOption(ch));",
      "right" : "handleOption(options.getOption(ch));",
      "info" : "ExpressionStatement[20079-20115]:ExpressionStatement[20219-20255]"
    }, {
      "left" : "if (currentOption != null && token.length() != i + 1)",
      "right" : "if (currentOption != null && token.length() != i + 1)",
      "info" : "IfStatement[20133-20396]:IfStatement[20273-20536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20203-20396]:Block[20343-20536]"
    }, {
      "left" : "currentOption.addValueForProcessing(token.substring(i + 1));",
      "right" : "currentOption.addValueForProcessing(token.substring(i + 1));",
      "info" : "ExpressionStatement[20291-20351]:ExpressionStatement[20431-20491]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20372-20378]:BreakStatement[20512-20518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20440-20569]:Block[20580-20709]"
    }, {
      "left" : "handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);",
      "right" : "handleUnknownToken(stopAtNonOption && i > 1 ? token.substring(i) : token);",
      "info" : "ExpressionStatement[20458-20532]:ExpressionStatement[20598-20672]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20549-20555]:BreakStatement[20689-20695]"
    } ]
  },
  "interFileMappings" : { }
}