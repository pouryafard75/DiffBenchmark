{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ClassTestDescriptor",
      "right" : "ClassTestDescriptor",
      "info" : "TypeDeclaration[2462-10590]:TypeDeclaration[2356-8863]"
    }, {
      "left" : "private static final ConditionEvaluator conditionEvaluator = new ConditionEvaluator();",
      "right" : "private static final ConditionEvaluator conditionEvaluator = new ConditionEvaluator();",
      "info" : "FieldDeclaration[2678-2764]:FieldDeclaration[2572-2658]"
    }, {
      "left" : "private final String displayName;",
      "right" : "private final String displayName;",
      "info" : "FieldDeclaration[2767-2800]:FieldDeclaration[2661-2694]"
    }, {
      "left" : "private final Class<?> testClass;",
      "right" : "private final Class<?> testClass;",
      "info" : "FieldDeclaration[2803-2836]:FieldDeclaration[2697-2730]"
    }, {
      "left" : "private final List<Method> beforeAllMethods;",
      "right" : "private final List<Method> beforeAllMethods;",
      "info" : "FieldDeclaration[2839-2883]:FieldDeclaration[2733-2777]"
    }, {
      "left" : "private final List<Method> afterAllMethods;",
      "right" : "private final List<Method> afterAllMethods;",
      "info" : "FieldDeclaration[2886-2929]:FieldDeclaration[2780-2823]"
    }, {
      "left" : "public ClassTestDescriptor(UniqueId uniqueId, Class<?> testClass)",
      "right" : "public ClassTestDescriptor(UniqueId uniqueId, Class<?> testClass)",
      "info" : "MethodDeclaration[2932-3334]:MethodDeclaration[2921-3443]"
    }, {
      "left" : "public final Class<?> getTestClass()",
      "right" : "public final Class<?> getTestClass()",
      "info" : "MethodDeclaration[3337-3403]:MethodDeclaration[3446-3512]"
    }, {
      "left" : "public final String getName()",
      "right" : "public final String getName()",
      "info" : "MethodDeclaration[3406-3486]:MethodDeclaration[3515-3595]"
    }, {
      "left" : "public final String getDisplayName()",
      "right" : "public final String getDisplayName()",
      "info" : "MethodDeclaration[3489-3568]:MethodDeclaration[3598-3677]"
    }, {
      "left" : "public Set<TestTag> getTags()",
      "right" : "public Set<TestTag> getTags()",
      "info" : "MethodDeclaration[3571-3650]:MethodDeclaration[3680-3759]"
    }, {
      "left" : "public final boolean isTest()",
      "right" : "public final boolean isTest()",
      "info" : "MethodDeclaration[3653-3714]:MethodDeclaration[3762-3823]"
    }, {
      "left" : "public final boolean isContainer()",
      "right" : "public final boolean isContainer()",
      "info" : "MethodDeclaration[3717-3782]:MethodDeclaration[3826-3891]"
    }, {
      "left" : "public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context)",
      "right" : "public JUnit5EngineExecutionContext prepare(JUnit5EngineExecutionContext context)",
      "info" : "MethodDeclaration[3785-4531]:MethodDeclaration[3894-4645]"
    }, {
      "left" : "public SkipResult shouldBeSkipped(JUnit5EngineExecutionContext context) throws Exception",
      "right" : "public SkipResult shouldBeSkipped(JUnit5EngineExecutionContext context) throws Exception",
      "info" : "MethodDeclaration[4534-4973]:MethodDeclaration[4648-5087]"
    }, {
      "left" : "public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Exception",
      "right" : "public JUnit5EngineExecutionContext beforeAll(JUnit5EngineExecutionContext context) throws Exception",
      "info" : "MethodDeclaration[4976-5391]:MethodDeclaration[5090-5505]"
    }, {
      "left" : "public JUnit5EngineExecutionContext afterAll(JUnit5EngineExecutionContext context) throws Exception",
      "right" : "public JUnit5EngineExecutionContext afterAll(JUnit5EngineExecutionContext context) throws Exception",
      "info" : "MethodDeclaration[5394-5950]:MethodDeclaration[5508-6064]"
    }, {
      "left" : "protected TestInstanceProvider testInstanceProvider(JUnit5EngineExecutionContext context)",
      "right" : "protected TestInstanceProvider testInstanceProvider(JUnit5EngineExecutionContext context)",
      "info" : "MethodDeclaration[5953-6102]:MethodDeclaration[6067-6216]"
    }, {
      "left" : "private void invokeBeforeAllCallbacks(ExtensionRegistry registry, ContainerExtensionContext context)",
      "right" : "private void invokeBeforeAllCallbacks(ExtensionRegistry registry, ContainerExtensionContext context)",
      "info" : "MethodDeclaration[6105-6343]:MethodDeclaration[6219-6457]"
    }, {
      "left" : "private void invokeBeforeAllMethods(ExtensionRegistry registry, ContainerExtensionContext context)",
      "right" : "private void invokeBeforeAllMethods(ExtensionRegistry registry, ContainerExtensionContext context)",
      "info" : "MethodDeclaration[6346-6698]:MethodDeclaration[6460-6725]"
    }, {
      "left" : "private void invokeAfterAllMethods(ExtensionRegistry registry, ContainerExtensionContext context,\n\t\t\tThrowableCollector throwableCollector)",
      "right" : "private void invokeAfterAllMethods(ExtensionRegistry registry, ContainerExtensionContext context,\n\t\t\tThrowableCollector throwableCollector)",
      "info" : "MethodDeclaration[6701-7023]:MethodDeclaration[6728-7037]"
    }, {
      "left" : "private void invokeAfterAllCallbacks(ExtensionRegistry registry, ContainerExtensionContext context,\n\t\t\tThrowableCollector throwableCollector)",
      "right" : "private void invokeAfterAllCallbacks(ExtensionRegistry registry, ContainerExtensionContext context,\n\t\t\tThrowableCollector throwableCollector)",
      "info" : "MethodDeclaration[7026-7314]:MethodDeclaration[7040-7328]"
    }, {
      "left" : "private void registerBeforeEachMethodAdapters(ExtensionRegistry extensionRegistry)",
      "right" : "private void registerBeforeEachMethodAdapters(ExtensionRegistry registry)",
      "info" : "MethodDeclaration[7317-7579]:MethodDeclaration[7331-7515]"
    }, {
      "left" : "private void registerAfterEachMethodAdapters(ExtensionRegistry extensionRegistry)",
      "right" : "private void registerAfterEachMethodAdapters(ExtensionRegistry registry)",
      "info" : "MethodDeclaration[7582-7840]:MethodDeclaration[7518-7699]"
    }, {
      "left" : "private BeforeEachMethodAdapter synthesizeBeforeEachMethodAdapter(ExtensionRegistry registry, Method method)",
      "right" : "private BeforeEachMethodAdapter synthesizeBeforeEachMethodAdapter(ExtensionRegistry registry, Method method)",
      "info" : "MethodDeclaration[8476-8690]:MethodDeclaration[7986-8200]"
    }, {
      "left" : "private AfterEachMethodAdapter synthesizeAfterEachMethodAdapter(ExtensionRegistry registry, Method method)",
      "right" : "private AfterEachMethodAdapter synthesizeAfterEachMethodAdapter(ExtensionRegistry registry, Method method)",
      "info" : "MethodDeclaration[8693-8905]:MethodDeclaration[8203-8415]"
    }, {
      "left" : "private void invokeMethodInTestExtensionContext(Method method, TestExtensionContext context,\n\t\t\tExtensionRegistry registry)",
      "right" : "private void invokeMethodInTestExtensionContext(Method method, TestExtensionContext context,\n\t\t\tExtensionRegistry registry)",
      "info" : "MethodDeclaration[8908-9350]:MethodDeclaration[8418-8860]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2998-3334]:Block[2987-3443]"
    }, {
      "left" : "super(uniqueId);",
      "right" : "super(uniqueId);",
      "info" : "SuperConstructorInvocation[3002-3018]:SuperConstructorInvocation[2991-3007]"
    }, {
      "left" : "this.testClass = Preconditions.notNull(testClass, \"Class must not be null\");",
      "right" : "this.testClass = Preconditions.notNull(testClass, \"Class must not be null\");",
      "info" : "ExpressionStatement[3022-3098]:ExpressionStatement[3011-3087]"
    }, {
      "left" : "this.displayName = determineDisplayName(testClass, testClass.getName());",
      "right" : "this.displayName = determineDisplayName(testClass, testClass.getName());",
      "info" : "ExpressionStatement[3101-3173]:ExpressionStatement[3090-3162]"
    }, {
      "left" : "this.beforeAllMethods = findBeforeAllMethods(testClass);",
      "right" : "this.beforeAllMethods = findBeforeAllMethods(testClass);",
      "info" : "ExpressionStatement[3177-3233]:ExpressionStatement[3166-3222]"
    }, {
      "left" : "this.afterAllMethods = findAfterAllMethods(testClass);",
      "right" : "this.afterAllMethods = findAfterAllMethods(testClass);",
      "info" : "ExpressionStatement[3236-3290]:ExpressionStatement[3225-3279]"
    }, {
      "left" : "setSource(new JavaSource(testClass));",
      "right" : "setSource(new JavaSource(testClass));",
      "info" : "ExpressionStatement[3294-3331]:ExpressionStatement[3403-3440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3374-3403]:Block[3483-3512]"
    }, {
      "left" : "return this.testClass;",
      "right" : "return this.testClass;",
      "info" : "ReturnStatement[3378-3400]:ReturnStatement[3487-3509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3447-3486]:Block[3556-3595]"
    }, {
      "left" : "return getTestClass().getName();",
      "right" : "return getTestClass().getName();",
      "info" : "ReturnStatement[3451-3483]:ReturnStatement[3560-3592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3537-3568]:Block[3646-3677]"
    }, {
      "left" : "return this.displayName;",
      "right" : "return this.displayName;",
      "info" : "ReturnStatement[3541-3565]:ReturnStatement[3650-3674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3612-3650]:Block[3721-3759]"
    }, {
      "left" : "return getTags(this.testClass);",
      "right" : "return getTags(this.testClass);",
      "info" : "ReturnStatement[3616-3647]:ReturnStatement[3725-3756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3694-3714]:Block[3803-3823]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3698-3711]:ReturnStatement[3807-3820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3763-3782]:Block[3872-3891]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3767-3779]:ReturnStatement[3876-3888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3878-4531]:Block[3987-4645]"
    }, {
      "left" : "ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(testClass,\n\t\t\tcontext.getExtensionRegistry());",
      "right" : "ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n\t\t\tcontext.getExtensionRegistry());",
      "info" : "VariableDeclarationStatement[3882-4000]:VariableDeclarationStatement[3991-4114]"
    }, {
      "left" : "registerBeforeEachMethodAdapters(registry);",
      "right" : "registerBeforeEachMethodAdapters(registry);",
      "info" : "ExpressionStatement[4004-4047]:ExpressionStatement[4118-4161]"
    }, {
      "left" : "registerAfterEachMethodAdapters(registry);",
      "right" : "registerAfterEachMethodAdapters(registry);",
      "info" : "ExpressionStatement[4050-4092]:ExpressionStatement[4164-4206]"
    }, {
      "left" : "context = context.extend().withExtensionRegistry(registry).build();",
      "right" : "context = context.extend().withExtensionRegistry(registry).build();",
      "info" : "ExpressionStatement[4096-4163]:ExpressionStatement[4210-4277]"
    }, {
      "left" : "ContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n\t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);",
      "right" : "ContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n\t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);",
      "info" : "VariableDeclarationStatement[4167-4334]:VariableDeclarationStatement[4281-4448]"
    }, {
      "left" : "return context.extend()\n\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n\t\t\t\t.withExtensionContext(containerExtensionContext)\n\t\t\t\t.build();",
      "right" : "return context.extend()\n\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n\t\t\t\t.withExtensionContext(containerExtensionContext)\n\t\t\t\t.build();",
      "info" : "ReturnStatement[4358-4509]:ReturnStatement[4472-4623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4634-4973]:Block[4748-5087]"
    }, {
      "left" : "ConditionEvaluationResult evaluationResult = conditionEvaluator.evaluateForContainer(\n\t\t\tcontext.getExtensionRegistry(), (ContainerExtensionContext) context.getExtensionContext());",
      "right" : "ConditionEvaluationResult evaluationResult = conditionEvaluator.evaluateForContainer(\n\t\t\tcontext.getExtensionRegistry(), (ContainerExtensionContext) context.getExtensionContext());",
      "info" : "VariableDeclarationStatement[4638-4818]:VariableDeclarationStatement[4752-4932]"
    }, {
      "left" : "if (evaluationResult.isDisabled())",
      "right" : "if (evaluationResult.isDisabled())",
      "info" : "IfStatement[4821-4938]:IfStatement[4935-5052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4856-4938]:Block[4970-5052]"
    }, {
      "left" : "return SkipResult.skip(evaluationResult.getReason().orElse(\"<unknown>\"));",
      "right" : "return SkipResult.skip(evaluationResult.getReason().orElse(\"<unknown>\"));",
      "info" : "ReturnStatement[4861-4934]:ReturnStatement[4975-5048]"
    }, {
      "left" : "return SkipResult.dontSkip();",
      "right" : "return SkipResult.dontSkip();",
      "info" : "ReturnStatement[4941-4970]:ReturnStatement[5055-5084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5088-5391]:Block[5202-5505]"
    }, {
      "left" : "ExtensionRegistry registry = context.getExtensionRegistry();",
      "right" : "ExtensionRegistry registry = context.getExtensionRegistry();",
      "info" : "VariableDeclarationStatement[5092-5152]:VariableDeclarationStatement[5206-5266]"
    }, {
      "left" : "ContainerExtensionContext extensionContext = (ContainerExtensionContext) context.getExtensionContext();",
      "right" : "ContainerExtensionContext extensionContext = (ContainerExtensionContext) context.getExtensionContext();",
      "info" : "VariableDeclarationStatement[5155-5258]:VariableDeclarationStatement[5269-5372]"
    }, {
      "left" : "invokeBeforeAllCallbacks(registry, extensionContext);",
      "right" : "invokeBeforeAllCallbacks(registry, extensionContext);",
      "info" : "ExpressionStatement[5262-5315]:ExpressionStatement[5376-5429]"
    }, {
      "left" : "invokeBeforeAllMethods(registry, extensionContext);",
      "right" : "invokeBeforeAllMethods(registry, extensionContext);",
      "info" : "ExpressionStatement[5318-5369]:ExpressionStatement[5432-5483]"
    }, {
      "left" : "return context;",
      "right" : "return context;",
      "info" : "ReturnStatement[5373-5388]:ReturnStatement[5487-5502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5505-5950]:Block[5619-6064]"
    }, {
      "left" : "ExtensionRegistry registry = context.getExtensionRegistry();",
      "right" : "ExtensionRegistry registry = context.getExtensionRegistry();",
      "info" : "VariableDeclarationStatement[5509-5569]:VariableDeclarationStatement[5623-5683]"
    }, {
      "left" : "ContainerExtensionContext extensionContext = (ContainerExtensionContext) context.getExtensionContext();",
      "right" : "ContainerExtensionContext extensionContext = (ContainerExtensionContext) context.getExtensionContext();",
      "info" : "VariableDeclarationStatement[5572-5675]:VariableDeclarationStatement[5686-5789]"
    }, {
      "left" : "ThrowableCollector throwableCollector = new ThrowableCollector();",
      "right" : "ThrowableCollector throwableCollector = new ThrowableCollector();",
      "info" : "VariableDeclarationStatement[5678-5743]:VariableDeclarationStatement[5792-5857]"
    }, {
      "left" : "invokeAfterAllMethods(registry, extensionContext, throwableCollector);",
      "right" : "invokeAfterAllMethods(registry, extensionContext, throwableCollector);",
      "info" : "ExpressionStatement[5747-5817]:ExpressionStatement[5861-5931]"
    }, {
      "left" : "invokeAfterAllCallbacks(registry, extensionContext, throwableCollector);",
      "right" : "invokeAfterAllCallbacks(registry, extensionContext, throwableCollector);",
      "info" : "ExpressionStatement[5820-5892]:ExpressionStatement[5934-6006]"
    }, {
      "left" : "throwableCollector.assertEmpty();",
      "right" : "throwableCollector.assertEmpty();",
      "info" : "ExpressionStatement[5895-5928]:ExpressionStatement[6009-6042]"
    }, {
      "left" : "return context;",
      "right" : "return context;",
      "info" : "ReturnStatement[5932-5947]:ReturnStatement[6046-6061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6043-6102]:Block[6157-6216]"
    }, {
      "left" : "return () -> ReflectionUtils.newInstance(testClass);",
      "right" : "return () -> ReflectionUtils.newInstance(testClass);",
      "info" : "ReturnStatement[6047-6099]:ReturnStatement[6161-6213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6206-6343]:Block[6320-6457]"
    }, {
      "left" : "registry.stream(BeforeAllCallback.class)//\n\t\t\t\t.forEach(extension -> executeAndMaskThrowable(() -> extension.beforeAll(context)));",
      "right" : "registry.stream(BeforeAllCallback.class)//\n\t\t\t\t.forEach(extension -> executeAndMaskThrowable(() -> extension.beforeAll(context)));",
      "info" : "ExpressionStatement[6210-6340]:ExpressionStatement[6324-6454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6445-6698]:Block[6559-6725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6841-7023]:Block[6868-7037]"
    }, {
      "left" : "throwableCollector.execute(\n\t\t\t\t() -> new MethodInvoker(context, registry).invoke(methodInvocationContext(null, method)));",
      "right" : "this.afterAllMethods.forEach(method -> throwableCollector.execute(\n\t\t\t() -> new MethodInvoker(context, registry).invoke(methodInvocationContext(null, method))));",
      "info" : "ExpressionStatement[6894-7016]:ExpressionStatement[6873-7034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7168-7314]:Block[7182-7328]"
    }, {
      "left" : "registry.reverseStream(AfterAllCallback.class)//\n\t\t\t\t.forEach(extension -> throwableCollector.execute(() -> extension.afterAll(context)));",
      "right" : "registry.reverseStream(AfterAllCallback.class)//\n\t\t\t\t.forEach(extension -> throwableCollector.execute(() -> extension.afterAll(context)));",
      "info" : "ExpressionStatement[7173-7311]:ExpressionStatement[7187-7325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7400-7579]:Block[7405-7515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7664-7840]:Block[7591-7699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8585-8690]:Block[8095-8200]"
    }, {
      "left" : "return extensionContext -> invokeMethodInTestExtensionContext(method, extensionContext, registry);",
      "right" : "return extensionContext -> invokeMethodInTestExtensionContext(method, extensionContext, registry);",
      "info" : "ReturnStatement[8589-8687]:ReturnStatement[8099-8197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8800-8905]:Block[8310-8415]"
    }, {
      "left" : "return extensionContext -> invokeMethodInTestExtensionContext(method, extensionContext, registry);",
      "right" : "return extensionContext -> invokeMethodInTestExtensionContext(method, extensionContext, registry);",
      "info" : "ReturnStatement[8804-8902]:ReturnStatement[8314-8412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9032-9350]:Block[8542-8860]"
    }, {
      "left" : "Object instance = ReflectionUtils.getOuterInstance(context.getTestInstance(),\n\t\t\tmethod.getDeclaringClass()).orElseThrow(\n\t\t\t\t() -> new JUnitException(\"Failed to find instance for method: \" + method.toGenericString()));",
      "right" : "Object instance = ReflectionUtils.getOuterInstance(context.getTestInstance(),\n\t\t\tmethod.getDeclaringClass()).orElseThrow(\n\t\t\t\t() -> new JUnitException(\"Failed to find instance for method: \" + method.toGenericString()));",
      "info" : "VariableDeclarationStatement[9037-9256]:VariableDeclarationStatement[8547-8766]"
    }, {
      "left" : "new MethodInvoker(context, registry).invoke(methodInvocationContext(instance, method));",
      "right" : "new MethodInvoker(context, registry).invoke(methodInvocationContext(instance, method));",
      "info" : "ExpressionStatement[9260-9347]:ExpressionStatement[8770-8857]"
    } ]
  },
  "interFileMappings" : {
    "Moved to File: junit5-engine/src/main/java/org/junit/gen5/engine/junit5/descriptor/LifecycleMethodUtils.java" : {
      "matchedElements" : [
 {
        "left" : "private static void assertStatic(Class<? extends Annotation> annotationType, Method method)",
        "right" : "private static void assertStatic(Class<? extends Annotation> annotationType, Method method)",
        "info" : "MethodDeclaration[9697-10056]:MethodDeclaration[2081-2365]"
      }, {
        "left" : "private static List<Method> findBeforeAllMethods(Class<?> testClass)",
        "right" : "static List<Method> findBeforeAllMethods(Class<?> testClass)",
        "info" : "MethodDeclaration[10059-10324]:MethodDeclaration[1039-1296]"
      }, {
        "left" : "private static List<Method> findAfterAllMethods(Class<?> testClass)",
        "right" : "static List<Method> findAfterAllMethods(Class<?> testClass)",
        "info" : "MethodDeclaration[10327-10587]:MethodDeclaration[1299-1551]"
      } ],
      "mappings" : [
 {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[9789-10056]:Block[2173-2365]"
      }, {
        "left" : "if (!ReflectionUtils.isStatic(method))",
        "right" : "if (!ReflectionUtils.isStatic(method))",
        "info" : "IfStatement[9793-10053]:IfStatement[2177-2362]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[9832-10053]:Block[2216-2362]"
      }, {
        "left" : "throw new ExtensionConfigurationException(message);",
        "right" : "throw new JUnitException(String.format(\"@%s method '%s' must be static.\", annotationType.getSimpleName(),\n\t\t\t\tmethod.toGenericString()));",
        "info" : "ThrowStatement[9998-10049]:ThrowStatement[2221-2358]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[10128-10324]:Block[1100-1296]"
      }, {
        "left" : "List<Method> methods = findAnnotatedMethods(testClass, BeforeAll.class, MethodSortOrder.HierarchyDown);",
        "right" : "List<Method> methods = findAnnotatedMethods(testClass, BeforeAll.class, MethodSortOrder.HierarchyDown);",
        "info" : "VariableDeclarationStatement[10132-10235]:VariableDeclarationStatement[1104-1207]"
      }, {
        "left" : "methods.forEach(method -> assertStatic(BeforeAll.class, method));",
        "right" : "methods.forEach(method -> assertStatic(BeforeAll.class, method));",
        "info" : "ExpressionStatement[10238-10303]:ExpressionStatement[1210-1275]"
      }, {
        "left" : "return methods;",
        "right" : "return methods;",
        "info" : "ReturnStatement[10306-10321]:ReturnStatement[1278-1293]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[10395-10587]:Block[1359-1551]"
      }, {
        "left" : "List<Method> methods = findAnnotatedMethods(testClass, AfterAll.class, MethodSortOrder.HierarchyUp);",
        "right" : "List<Method> methods = findAnnotatedMethods(testClass, AfterAll.class, MethodSortOrder.HierarchyUp);",
        "info" : "VariableDeclarationStatement[10399-10499]:VariableDeclarationStatement[1363-1463]"
      }, {
        "left" : "methods.forEach(method -> assertStatic(AfterAll.class, method));",
        "right" : "methods.forEach(method -> assertStatic(AfterAll.class, method));",
        "info" : "ExpressionStatement[10502-10566]:ExpressionStatement[1466-1530]"
      }, {
        "left" : "return methods;",
        "right" : "return methods;",
        "info" : "ReturnStatement[10569-10584]:ReturnStatement[1533-1548]"
      } ]
    }
  }
}