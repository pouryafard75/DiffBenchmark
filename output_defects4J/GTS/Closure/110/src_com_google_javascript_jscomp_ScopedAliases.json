{
  "matchedElements" : [
 {
    "left" : "class : ScopedAliases",
    "right" : "class : ScopedAliases",
    "info" : "TypeDeclaration[1458-20358]:TypeDeclaration[1458-21120]"
  }, {
    "left" : "SCOPING_METHOD_NAME",
    "right" : "SCOPING_METHOD_NAME",
    "info" : "FieldDeclaration[2378-2506]:FieldDeclaration[2378-2506]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[2510-2550]:FieldDeclaration[2510-2550]"
  }, {
    "left" : "preprocessorSymbolTable",
    "right" : "preprocessorSymbolTable",
    "info" : "FieldDeclaration[2553-2615]:FieldDeclaration[2553-2615]"
  }, {
    "left" : "transformationHandler",
    "right" : "transformationHandler",
    "info" : "FieldDeclaration[2618-2681]:FieldDeclaration[2618-2681]"
  }, {
    "left" : "GOOG_SCOPE_USED_IMPROPERLY",
    "right" : "GOOG_SCOPE_USED_IMPROPERLY",
    "info" : "FieldDeclaration[2697-2885]:FieldDeclaration[2697-2885]"
  }, {
    "left" : "GOOG_SCOPE_HAS_BAD_PARAMETERS",
    "right" : "GOOG_SCOPE_HAS_BAD_PARAMETERS",
    "info" : "FieldDeclaration[2889-3181]:FieldDeclaration[2889-3181]"
  }, {
    "left" : "GOOG_SCOPE_REFERENCES_THIS",
    "right" : "GOOG_SCOPE_REFERENCES_THIS",
    "info" : "FieldDeclaration[3185-3372]:FieldDeclaration[3185-3372]"
  }, {
    "left" : "GOOG_SCOPE_USES_RETURN",
    "right" : "GOOG_SCOPE_USES_RETURN",
    "info" : "FieldDeclaration[3376-3551]:FieldDeclaration[3376-3551]"
  }, {
    "left" : "GOOG_SCOPE_USES_THROW",
    "right" : "GOOG_SCOPE_USES_THROW",
    "info" : "FieldDeclaration[3555-3727]:FieldDeclaration[3555-3727]"
  }, {
    "left" : "GOOG_SCOPE_ALIAS_REDEFINED",
    "right" : "GOOG_SCOPE_ALIAS_REDEFINED",
    "info" : "FieldDeclaration[3731-3909]:FieldDeclaration[3731-3909]"
  }, {
    "left" : "GOOG_SCOPE_ALIAS_CYCLE",
    "right" : "GOOG_SCOPE_ALIAS_CYCLE",
    "info" : "FieldDeclaration[3913-4062]:FieldDeclaration[3913-4062]"
  }, {
    "left" : "GOOG_SCOPE_NON_ALIAS_LOCAL",
    "right" : "GOOG_SCOPE_NON_ALIAS_LOCAL",
    "info" : "FieldDeclaration[4066-4257]:FieldDeclaration[4066-4257]"
  }, {
    "left" : "scopedAliasNames",
    "right" : "scopedAliasNames",
    "info" : "FieldDeclaration[4261-4327]:FieldDeclaration[4261-4327]"
  }, {
    "left" : "package ScopedAliases(compiler , preprocessorSymbolTable , transformationHandler )",
    "right" : "package ScopedAliases(compiler , preprocessorSymbolTable , transformationHandler )",
    "info" : "MethodDeclaration[4331-4644]:MethodDeclaration[4331-4644]"
  }, {
    "left" : "public process(externs , root ) : void",
    "right" : "public process(externs , root ) : void",
    "info" : "MethodDeclaration[4648-4741]:MethodDeclaration[4648-4741]"
  }, {
    "left" : "public hotSwapScript(root , originalRoot ) : void",
    "right" : "public hotSwapScript(root , originalRoot ) : void",
    "info" : "MethodDeclaration[4745-6789]:MethodDeclaration[4745-6789]"
  }, {
    "left" : "class : AliasUsage",
    "right" : "class : AliasUsage",
    "info" : "TypeDeclaration[6793-7409]:TypeDeclaration[6793-7409]"
  }, {
    "left" : "aliasVar",
    "right" : "aliasVar",
    "info" : "FieldDeclaration[6833-6852]:FieldDeclaration[6833-6852]"
  }, {
    "left" : "aliasReference",
    "right" : "aliasReference",
    "info" : "FieldDeclaration[6857-6883]:FieldDeclaration[6857-6883]"
  }, {
    "left" : "package AliasUsage(aliasVar , aliasReference )",
    "right" : "package AliasUsage(aliasVar , aliasReference )",
    "info" : "MethodDeclaration[6889-7018]:MethodDeclaration[6889-7018]"
  }, {
    "left" : "public referencesOtherAlias() : boolean",
    "right" : "public referencesOtherAlias() : boolean",
    "info" : "MethodDeclaration[7024-7365]:MethodDeclaration[7024-7365]"
  }, {
    "left" : "public abstract applyAlias() : void",
    "right" : "public abstract applyAlias() : void",
    "info" : "MethodDeclaration[7371-7405]:MethodDeclaration[7371-7405]"
  }, {
    "left" : "class : AliasedNode",
    "right" : "class : AliasedNode",
    "info" : "TypeDeclaration[7413-7773]:TypeDeclaration[7413-7773]"
  }, {
    "left" : "package AliasedNode(aliasVar , aliasReference )",
    "right" : "package AliasedNode(aliasVar , aliasReference )",
    "info" : "MethodDeclaration[7464-7557]:MethodDeclaration[7464-7557]"
  }, {
    "left" : "public applyAlias() : void",
    "right" : "public applyAlias() : void",
    "info" : "MethodDeclaration[7563-7769]:MethodDeclaration[7563-7769]"
  }, {
    "left" : "class : AliasedTypeNode",
    "right" : "class : AliasedTypeNode",
    "info" : "TypeDeclaration[7777-8387]:TypeDeclaration[7777-8387]"
  }, {
    "left" : "package AliasedTypeNode(aliasVar , aliasReference )",
    "right" : "package AliasedTypeNode(aliasVar , aliasReference )",
    "info" : "MethodDeclaration[7832-7929]:MethodDeclaration[7832-7929]"
  }, {
    "left" : "public applyAlias() : void",
    "right" : "public applyAlias() : void",
    "info" : "MethodDeclaration[7935-8383]:MethodDeclaration[7935-8383]"
  }, {
    "left" : "class : Traversal",
    "right" : "class : Traversal",
    "info" : "TypeDeclaration[8392-20356]:TypeDeclaration[8392-21118]"
  }, {
    "left" : "aliasDefinitionsInOrder",
    "right" : "aliasDefinitionsInOrder",
    "info" : "FieldDeclaration[8606-8678]:FieldDeclaration[8606-8678]"
  }, {
    "left" : "scopeCalls",
    "right" : "scopeCalls",
    "info" : "FieldDeclaration[8684-8743]:FieldDeclaration[8684-8743]"
  }, {
    "left" : "aliasUsages",
    "right" : "aliasUsages",
    "info" : "FieldDeclaration[8749-8815]:FieldDeclaration[8749-8815]"
  }, {
    "left" : "aliases",
    "right" : "aliases",
    "info" : "FieldDeclaration[8878-8937]:FieldDeclaration[8878-8937]"
  }, {
    "left" : "forbiddenLocals",
    "right" : "forbiddenLocals",
    "info" : "FieldDeclaration[9441-9512]:FieldDeclaration[9441-9512]"
  }, {
    "left" : "hasNamespaceShadows",
    "right" : "hasNamespaceShadows",
    "info" : "FieldDeclaration[9517-9561]:FieldDeclaration[9517-9561]"
  }, {
    "left" : "hasErrors",
    "right" : "hasErrors",
    "info" : "FieldDeclaration[9567-9601]:FieldDeclaration[9567-9601]"
  }, {
    "left" : "transformation",
    "right" : "transformation",
    "info" : "FieldDeclaration[9607-9657]:FieldDeclaration[9607-9657]"
  }, {
    "left" : "package getAliasDefinitionsInOrder() : ",
    "right" : "package getAliasDefinitionsInOrder() : ",
    "info" : "MethodDeclaration[9663-9754]:MethodDeclaration[9663-9754]"
  }, {
    "left" : "private getAliasUsages() : ",
    "right" : "private getAliasUsages() : ",
    "info" : "MethodDeclaration[9760-9835]:MethodDeclaration[9760-9835]"
  }, {
    "left" : "package getScopeCalls() : ",
    "right" : "package getScopeCalls() : ",
    "info" : "MethodDeclaration[9841-9900]:MethodDeclaration[9841-9900]"
  }, {
    "left" : "package hasErrors() : boolean",
    "right" : "package hasErrors() : boolean",
    "info" : "MethodDeclaration[9906-9957]:MethodDeclaration[9906-9957]"
  }, {
    "left" : "private isCallToScopeMethod(n ) : boolean",
    "right" : "private isCallToScopeMethod(n ) : boolean",
    "info" : "MethodDeclaration[9963-10117]:MethodDeclaration[9963-10117]"
  }, {
    "left" : "public enterScope(t ) : void",
    "right" : "public enterScope(t ) : void",
    "info" : "MethodDeclaration[10123-10439]:MethodDeclaration[10123-10439]"
  }, {
    "left" : "public exitScope(t ) : void",
    "right" : "public exitScope(t ) : void",
    "info" : "MethodDeclaration[10445-10787]:MethodDeclaration[10445-10787]"
  }, {
    "left" : "public shouldTraverse(t , n , parent ) : boolean",
    "right" : "public shouldTraverse(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[10793-11136]:MethodDeclaration[10793-11136]"
  }, {
    "left" : "private getSourceRegion(n ) : ",
    "right" : "private getSourceRegion(n ) : ",
    "info" : "MethodDeclaration[11142-11765]:MethodDeclaration[11142-11765]"
  }, {
    "left" : "private report(t , n , error , ) : void",
    "right" : "private report(t , n , error , ) : void",
    "info" : "MethodDeclaration[11771-11955]:MethodDeclaration[11771-11955]"
  }, {
    "left" : "private findAliases(t ) : void",
    "right" : "private findAliases(t ) : void",
    "info" : "MethodDeclaration[11961-14980]:MethodDeclaration[11961-15742]"
  }, {
    "left" : "private recordAlias(aliasVar ) : void",
    "right" : "private recordAlias(aliasVar ) : void",
    "info" : "MethodDeclaration[14986-15497]:MethodDeclaration[15748-16259]"
  }, {
    "left" : "private findNamespaceShadows(t ) : void",
    "right" : "private findNamespaceShadows(t ) : void",
    "info" : "MethodDeclaration[15503-15891]:MethodDeclaration[16265-16653]"
  }, {
    "left" : "private renameNamespaceShadows(t ) : void",
    "right" : "private renameNamespaceShadows(t ) : void",
    "info" : "MethodDeclaration[15897-16635]:MethodDeclaration[16659-17397]"
  }, {
    "left" : "private validateScopeCall(t , n , parent ) : void",
    "right" : "private validateScopeCall(t , n , parent ) : void",
    "info" : "MethodDeclaration[16641-17558]:MethodDeclaration[17403-18320]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[17564-19745]:MethodDeclaration[18326-20507]"
  }, {
    "left" : "private fixTypeNode(typeNode ) : void",
    "right" : "private fixTypeNode(typeNode ) : void",
    "info" : "MethodDeclaration[19751-20352]:MethodDeclaration[20513-21114]"
  } ],
  "mappings" : [
 {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2323-2328]:TYPE_DECLARATION_KIND[2323-2328]"
  }, {
    "left" : "ScopedAliases",
    "right" : "ScopedAliases",
    "info" : "SimpleName[4331-4344]:SimpleName[4331-4344]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[4345-4370]:SingleVariableDeclaration[4345-4370]"
  }, {
    "left" : "@Nullable PreprocessorSymbolTable preprocessorSymbolTable",
    "right" : "@Nullable PreprocessorSymbolTable preprocessorSymbolTable",
    "info" : "SingleVariableDeclaration[4378-4435]:SingleVariableDeclaration[4378-4435]"
  }, {
    "left" : "AliasTransformationHandler transformationHandler",
    "right" : "AliasTransformationHandler transformationHandler",
    "info" : "SingleVariableDeclaration[4443-4491]:SingleVariableDeclaration[4443-4491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4493-4644]:Block[4493-4644]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[4499-4524]:ExpressionStatement[4499-4524]"
  }, {
    "left" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
    "right" : "this.preprocessorSymbolTable = preprocessorSymbolTable;",
    "info" : "ExpressionStatement[4529-4584]:ExpressionStatement[4529-4584]"
  }, {
    "left" : "this.transformationHandler = transformationHandler;",
    "right" : "this.transformationHandler = transformationHandler;",
    "info" : "ExpressionStatement[4589-4640]:ExpressionStatement[4589-4640]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4648-4657]:MarkerAnnotation[4648-4657]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4660-4666]:Modifier[4660-4666]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4667-4671]:PrimitiveType[4667-4671]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[4672-4679]:SimpleName[4672-4679]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[4680-4692]:SingleVariableDeclaration[4680-4692]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[4694-4703]:SingleVariableDeclaration[4694-4703]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4705-4741]:Block[4705-4741]"
  }, {
    "left" : "hotSwapScript(root, null);",
    "right" : "hotSwapScript(root, null);",
    "info" : "ExpressionStatement[4711-4737]:ExpressionStatement[4711-4737]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4745-4754]:MarkerAnnotation[4745-4754]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4757-4763]:Modifier[4757-4763]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4764-4768]:PrimitiveType[4764-4768]"
  }, {
    "left" : "hotSwapScript",
    "right" : "hotSwapScript",
    "info" : "SimpleName[4769-4782]:SimpleName[4769-4782]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[4783-4792]:SingleVariableDeclaration[4783-4792]"
  }, {
    "left" : "Node originalRoot",
    "right" : "Node originalRoot",
    "info" : "SingleVariableDeclaration[4794-4811]:SingleVariableDeclaration[4794-4811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4813-6789]:Block[4813-6789]"
  }, {
    "left" : "Traversal traversal = new Traversal();",
    "right" : "Traversal traversal = new Traversal();",
    "info" : "VariableDeclarationStatement[4819-4857]:VariableDeclarationStatement[4819-4857]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, traversal);",
    "right" : "NodeTraversal.traverse(compiler, root, traversal);",
    "info" : "ExpressionStatement[4862-4912]:ExpressionStatement[4862-4912]"
  }, {
    "left" : "if (!traversal.hasErrors())",
    "right" : "if (!traversal.hasErrors())",
    "info" : "IfStatement[4918-6785]:IfStatement[4918-6785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4946-6785]:Block[4946-6785]"
  }, {
    "left" : "List<AliasUsage> aliasWorkQueue =\n          Lists.newArrayList(traversal.getAliasUsages());",
    "right" : "List<AliasUsage> aliasWorkQueue =\n          Lists.newArrayList(traversal.getAliasUsages());",
    "info" : "VariableDeclarationStatement[4983-5074]:VariableDeclarationStatement[4983-5074]"
  }, {
    "left" : "while (!aliasWorkQueue.isEmpty())",
    "right" : "while (!aliasWorkQueue.isEmpty())",
    "info" : "WhileStatement[5081-5750]:WhileStatement[5081-5750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5115-5750]:Block[5115-5750]"
  }, {
    "left" : "List<AliasUsage> newQueue = Lists.newArrayList();",
    "right" : "List<AliasUsage> newQueue = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[5125-5174]:VariableDeclarationStatement[5125-5174]"
  }, {
    "left" : "for (AliasUsage aliasUsage : aliasWorkQueue)",
    "right" : "for (AliasUsage aliasUsage : aliasWorkQueue)",
    "info" : "EnhancedForStatement[5183-5396]:EnhancedForStatement[5183-5396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5228-5396]:Block[5228-5396]"
  }, {
    "left" : "if (aliasUsage.referencesOtherAlias())",
    "right" : "if (aliasUsage.referencesOtherAlias())",
    "info" : "IfStatement[5240-5386]:IfStatement[5240-5386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5279-5330]:Block[5279-5330]"
  }, {
    "left" : "newQueue.add(aliasUsage);",
    "right" : "newQueue.add(aliasUsage);",
    "info" : "ExpressionStatement[5293-5318]:ExpressionStatement[5293-5318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5336-5386]:Block[5336-5386]"
  }, {
    "left" : "aliasUsage.applyAlias();",
    "right" : "aliasUsage.applyAlias();",
    "info" : "ExpressionStatement[5350-5374]:ExpressionStatement[5350-5374]"
  }, {
    "left" : "if (newQueue.size() == aliasWorkQueue.size())",
    "right" : "if (newQueue.size() == aliasWorkQueue.size())",
    "info" : "IfStatement[5443-5742]:IfStatement[5443-5742]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5489-5688]:Block[5489-5688]"
  }, {
    "left" : "Var cycleVar = newQueue.get(0).aliasVar;",
    "right" : "Var cycleVar = newQueue.get(0).aliasVar;",
    "info" : "VariableDeclarationStatement[5501-5541]:VariableDeclarationStatement[5501-5541]"
  }, {
    "left" : "compiler.report(JSError.make(\n              cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));",
    "right" : "compiler.report(JSError.make(\n              cycleVar.getNode(), GOOG_SCOPE_ALIAS_CYCLE, cycleVar.getName()));",
    "info" : "ExpressionStatement[5552-5661]:ExpressionStatement[5552-5661]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5672-5678]:BreakStatement[5672-5678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5694-5742]:Block[5694-5742]"
  }, {
    "left" : "aliasWorkQueue = newQueue;",
    "right" : "aliasWorkQueue = newQueue;",
    "info" : "ExpressionStatement[5706-5732]:ExpressionStatement[5706-5732]"
  }, {
    "left" : "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder())",
    "right" : "for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder())",
    "info" : "EnhancedForStatement[5797-6113]:EnhancedForStatement[5797-6113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5865-6113]:Block[5865-6113]"
  }, {
    "left" : "if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild())",
    "right" : "if (aliasDefinition.getParent().isVar() &&\n            aliasDefinition.getParent().hasOneChild())",
    "info" : "IfStatement[5875-6105]:IfStatement[5875-6105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5973-6042]:Block[5973-6042]"
  }, {
    "left" : "aliasDefinition.getParent().detachFromParent();",
    "right" : "aliasDefinition.getParent().detachFromParent();",
    "info" : "ExpressionStatement[5985-6032]:ExpressionStatement[5985-6032]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6048-6105]:Block[6048-6105]"
  }, {
    "left" : "aliasDefinition.detachFromParent();",
    "right" : "aliasDefinition.detachFromParent();",
    "info" : "ExpressionStatement[6060-6095]:ExpressionStatement[6060-6095]"
  }, {
    "left" : "for (Node scopeCall : traversal.getScopeCalls())",
    "right" : "for (Node scopeCall : traversal.getScopeCalls())",
    "info" : "EnhancedForStatement[6151-6569]:EnhancedForStatement[6151-6569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6200-6569]:Block[6200-6569]"
  }, {
    "left" : "Node expressionWithScopeCall = scopeCall.getParent();",
    "right" : "Node expressionWithScopeCall = scopeCall.getParent();",
    "info" : "VariableDeclarationStatement[6210-6263]:VariableDeclarationStatement[6210-6263]"
  }, {
    "left" : "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
    "right" : "Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();",
    "info" : "VariableDeclarationStatement[6272-6337]:VariableDeclarationStatement[6272-6337]"
  }, {
    "left" : "scopeClosureBlock.detachFromParent();",
    "right" : "scopeClosureBlock.detachFromParent();",
    "info" : "ExpressionStatement[6346-6383]:ExpressionStatement[6346-6383]"
  }, {
    "left" : "expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);",
    "right" : "expressionWithScopeCall.getParent().replaceChild(\n            expressionWithScopeCall,\n            scopeClosureBlock);",
    "info" : "ExpressionStatement[6392-6510]:ExpressionStatement[6392-6510]"
  }, {
    "left" : "NodeUtil.tryMergeBlock(scopeClosureBlock);",
    "right" : "NodeUtil.tryMergeBlock(scopeClosureBlock);",
    "info" : "ExpressionStatement[6519-6561]:ExpressionStatement[6519-6561]"
  }, {
    "left" : "if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0)",
    "right" : "if (traversal.getAliasUsages().size() > 0 ||\n          traversal.getAliasDefinitionsInOrder().size() > 0 ||\n          traversal.getScopeCalls().size() > 0)",
    "info" : "IfStatement[6577-6779]:IfStatement[6577-6779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6733-6779]:Block[6733-6779]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[6743-6771]:ExpressionStatement[6743-6771]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6793-6800]:Modifier[6793-6800]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[6801-6809]:Modifier[6801-6809]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6810-6815]:TYPE_DECLARATION_KIND[6810-6815]"
  }, {
    "left" : "AliasUsage",
    "right" : "AliasUsage",
    "info" : "SimpleName[6889-6899]:SimpleName[6889-6899]"
  }, {
    "left" : "Var aliasVar",
    "right" : "Var aliasVar",
    "info" : "SingleVariableDeclaration[6900-6912]:SingleVariableDeclaration[6900-6912]"
  }, {
    "left" : "Node aliasReference",
    "right" : "Node aliasReference",
    "info" : "SingleVariableDeclaration[6914-6933]:SingleVariableDeclaration[6914-6933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6935-7018]:Block[6935-7018]"
  }, {
    "left" : "this.aliasVar = aliasVar;",
    "right" : "this.aliasVar = aliasVar;",
    "info" : "ExpressionStatement[6943-6968]:ExpressionStatement[6943-6968]"
  }, {
    "left" : "this.aliasReference = aliasReference;",
    "right" : "this.aliasReference = aliasReference;",
    "info" : "ExpressionStatement[6975-7012]:ExpressionStatement[6975-7012]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7083-7089]:Modifier[7083-7089]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7090-7097]:PrimitiveType[7090-7097]"
  }, {
    "left" : "referencesOtherAlias",
    "right" : "referencesOtherAlias",
    "info" : "SimpleName[7098-7118]:SimpleName[7098-7118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7121-7365]:Block[7121-7365]"
  }, {
    "left" : "Node aliasDefinition = aliasVar.getInitialValue();",
    "right" : "Node aliasDefinition = aliasVar.getInitialValue();",
    "info" : "VariableDeclarationStatement[7129-7179]:VariableDeclarationStatement[7129-7179]"
  }, {
    "left" : "Node root = NodeUtil.getRootOfQualifiedName(aliasDefinition);",
    "right" : "Node root = NodeUtil.getRootOfQualifiedName(aliasDefinition);",
    "info" : "VariableDeclarationStatement[7186-7247]:VariableDeclarationStatement[7186-7247]"
  }, {
    "left" : "Var otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());",
    "right" : "Var otherAliasVar = aliasVar.getScope().getOwnSlot(root.getString());",
    "info" : "VariableDeclarationStatement[7254-7323]:VariableDeclarationStatement[7254-7323]"
  }, {
    "left" : "return otherAliasVar != null;",
    "right" : "return otherAliasVar != null;",
    "info" : "ReturnStatement[7330-7359]:ReturnStatement[7330-7359]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7371-7377]:Modifier[7371-7377]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[7378-7386]:Modifier[7378-7386]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7387-7391]:PrimitiveType[7387-7391]"
  }, {
    "left" : "applyAlias",
    "right" : "applyAlias",
    "info" : "SimpleName[7392-7402]:SimpleName[7392-7402]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7413-7420]:Modifier[7413-7420]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7421-7426]:TYPE_DECLARATION_KIND[7421-7426]"
  }, {
    "left" : "AliasedNode",
    "right" : "AliasedNode",
    "info" : "SimpleName[7464-7475]:SimpleName[7464-7475]"
  }, {
    "left" : "Var aliasVar",
    "right" : "Var aliasVar",
    "info" : "SingleVariableDeclaration[7476-7488]:SingleVariableDeclaration[7476-7488]"
  }, {
    "left" : "Node aliasReference",
    "right" : "Node aliasReference",
    "info" : "SingleVariableDeclaration[7490-7509]:SingleVariableDeclaration[7490-7509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7511-7557]:Block[7511-7557]"
  }, {
    "left" : "super(aliasVar, aliasReference);",
    "right" : "super(aliasVar, aliasReference);",
    "info" : "SuperConstructorInvocation[7519-7551]:SuperConstructorInvocation[7519-7551]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7563-7572]:MarkerAnnotation[7563-7572]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7577-7583]:Modifier[7577-7583]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7584-7588]:PrimitiveType[7584-7588]"
  }, {
    "left" : "applyAlias",
    "right" : "applyAlias",
    "info" : "SimpleName[7589-7599]:SimpleName[7589-7599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7602-7769]:Block[7602-7769]"
  }, {
    "left" : "Node aliasDefinition = aliasVar.getInitialValue();",
    "right" : "Node aliasDefinition = aliasVar.getInitialValue();",
    "info" : "VariableDeclarationStatement[7610-7660]:VariableDeclarationStatement[7610-7660]"
  }, {
    "left" : "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
    "right" : "aliasReference.getParent().replaceChild(\n          aliasReference, aliasDefinition.cloneTree());",
    "info" : "ExpressionStatement[7667-7763]:ExpressionStatement[7667-7763]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7777-7784]:Modifier[7777-7784]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7785-7790]:TYPE_DECLARATION_KIND[7785-7790]"
  }, {
    "left" : "AliasedTypeNode",
    "right" : "AliasedTypeNode",
    "info" : "SimpleName[7832-7847]:SimpleName[7832-7847]"
  }, {
    "left" : "Var aliasVar",
    "right" : "Var aliasVar",
    "info" : "SingleVariableDeclaration[7848-7860]:SingleVariableDeclaration[7848-7860]"
  }, {
    "left" : "Node aliasReference",
    "right" : "Node aliasReference",
    "info" : "SingleVariableDeclaration[7862-7881]:SingleVariableDeclaration[7862-7881]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7883-7929]:Block[7883-7929]"
  }, {
    "left" : "super(aliasVar, aliasReference);",
    "right" : "super(aliasVar, aliasReference);",
    "info" : "SuperConstructorInvocation[7891-7923]:SuperConstructorInvocation[7891-7923]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7935-7944]:MarkerAnnotation[7935-7944]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7949-7955]:Modifier[7949-7955]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7956-7960]:PrimitiveType[7956-7960]"
  }, {
    "left" : "applyAlias",
    "right" : "applyAlias",
    "info" : "SimpleName[7961-7971]:SimpleName[7961-7971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7974-8383]:Block[7974-8383]"
  }, {
    "left" : "Node aliasDefinition = aliasVar.getInitialValue();",
    "right" : "Node aliasDefinition = aliasVar.getInitialValue();",
    "info" : "VariableDeclarationStatement[7982-8032]:VariableDeclarationStatement[7982-8032]"
  }, {
    "left" : "String aliasName = aliasVar.getName();",
    "right" : "String aliasName = aliasVar.getName();",
    "info" : "VariableDeclarationStatement[8039-8077]:VariableDeclarationStatement[8039-8077]"
  }, {
    "left" : "String typeName = aliasReference.getString();",
    "right" : "String typeName = aliasReference.getString();",
    "info" : "VariableDeclarationStatement[8084-8129]:VariableDeclarationStatement[8084-8129]"
  }, {
    "left" : "String aliasExpanded =\n          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());",
    "right" : "String aliasExpanded =\n          Preconditions.checkNotNull(aliasDefinition.getQualifiedName());",
    "info" : "VariableDeclarationStatement[8136-8232]:VariableDeclarationStatement[8136-8232]"
  }, {
    "left" : "Preconditions.checkState(typeName.startsWith(aliasName));",
    "right" : "Preconditions.checkState(typeName.startsWith(aliasName));",
    "info" : "ExpressionStatement[8239-8296]:ExpressionStatement[8239-8296]"
  }, {
    "left" : "aliasReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));",
    "right" : "aliasReference.setString(typeName.replaceFirst(aliasName, aliasExpanded));",
    "info" : "ExpressionStatement[8303-8377]:ExpressionStatement[8303-8377]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8392-8399]:Modifier[8392-8399]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[8400-8405]:TYPE_DECLARATION_KIND[8400-8405]"
  }, {
    "left" : "Collection<Node>",
    "right" : "Collection<Node>",
    "info" : "ParameterizedType[9663-9679]:ParameterizedType[9663-9679]"
  }, {
    "left" : "getAliasDefinitionsInOrder",
    "right" : "getAliasDefinitionsInOrder",
    "info" : "SimpleName[9680-9706]:SimpleName[9680-9706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9709-9754]:Block[9709-9754]"
  }, {
    "left" : "return aliasDefinitionsInOrder;",
    "right" : "return aliasDefinitionsInOrder;",
    "info" : "ReturnStatement[9717-9748]:ReturnStatement[9717-9748]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9760-9767]:Modifier[9760-9767]"
  }, {
    "left" : "List<AliasUsage>",
    "right" : "List<AliasUsage>",
    "info" : "ParameterizedType[9768-9784]:ParameterizedType[9768-9784]"
  }, {
    "left" : "getAliasUsages",
    "right" : "getAliasUsages",
    "info" : "SimpleName[9785-9799]:SimpleName[9785-9799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9802-9835]:Block[9802-9835]"
  }, {
    "left" : "return aliasUsages;",
    "right" : "return aliasUsages;",
    "info" : "ReturnStatement[9810-9829]:ReturnStatement[9810-9829]"
  }, {
    "left" : "List<Node>",
    "right" : "List<Node>",
    "info" : "ParameterizedType[9841-9851]:ParameterizedType[9841-9851]"
  }, {
    "left" : "getScopeCalls",
    "right" : "getScopeCalls",
    "info" : "SimpleName[9852-9865]:SimpleName[9852-9865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9868-9900]:Block[9868-9900]"
  }, {
    "left" : "return scopeCalls;",
    "right" : "return scopeCalls;",
    "info" : "ReturnStatement[9876-9894]:ReturnStatement[9876-9894]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9906-9913]:PrimitiveType[9906-9913]"
  }, {
    "left" : "hasErrors",
    "right" : "hasErrors",
    "info" : "SimpleName[9914-9923]:SimpleName[9914-9923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9926-9957]:Block[9926-9957]"
  }, {
    "left" : "return hasErrors;",
    "right" : "return hasErrors;",
    "info" : "ReturnStatement[9934-9951]:ReturnStatement[9934-9951]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9963-9970]:Modifier[9963-9970]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[9971-9978]:PrimitiveType[9971-9978]"
  }, {
    "left" : "isCallToScopeMethod",
    "right" : "isCallToScopeMethod",
    "info" : "SimpleName[9979-9998]:SimpleName[9979-9998]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[9999-10005]:SingleVariableDeclaration[9999-10005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10007-10117]:Block[10007-10117]"
  }, {
    "left" : "return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());",
    "right" : "return n.isCall() &&\n          SCOPING_METHOD_NAME.equals(n.getFirstChild().getQualifiedName());",
    "info" : "ReturnStatement[10015-10111]:ReturnStatement[10015-10111]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10123-10132]:MarkerAnnotation[10123-10132]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10137-10143]:Modifier[10137-10143]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10144-10148]:PrimitiveType[10144-10148]"
  }, {
    "left" : "enterScope",
    "right" : "enterScope",
    "info" : "SimpleName[10149-10159]:SimpleName[10149-10159]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[10160-10175]:SingleVariableDeclaration[10160-10175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10177-10439]:Block[10177-10439]"
  }, {
    "left" : "Node n = t.getCurrentNode().getParent();",
    "right" : "Node n = t.getCurrentNode().getParent();",
    "info" : "VariableDeclarationStatement[10185-10225]:VariableDeclarationStatement[10185-10225]"
  }, {
    "left" : "if (n != null && isCallToScopeMethod(n))",
    "right" : "if (n != null && isCallToScopeMethod(n))",
    "info" : "IfStatement[10232-10433]:IfStatement[10232-10433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10273-10433]:Block[10273-10433]"
  }, {
    "left" : "transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));",
    "right" : "transformation = transformationHandler.logAliasTransformation(\n            n.getSourceFileName(), getSourceRegion(n));",
    "info" : "ExpressionStatement[10283-10401]:ExpressionStatement[10283-10401]"
  }, {
    "left" : "findAliases(t);",
    "right" : "findAliases(t);",
    "info" : "ExpressionStatement[10410-10425]:ExpressionStatement[10410-10425]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10445-10454]:MarkerAnnotation[10445-10454]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10459-10465]:Modifier[10459-10465]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10466-10470]:PrimitiveType[10466-10470]"
  }, {
    "left" : "exitScope",
    "right" : "exitScope",
    "info" : "SimpleName[10471-10480]:SimpleName[10471-10480]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[10481-10496]:SingleVariableDeclaration[10481-10496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10498-10787]:Block[10498-10787]"
  }, {
    "left" : "if (t.getScopeDepth() > 2)",
    "right" : "if (t.getScopeDepth() > 2)",
    "info" : "IfStatement[10506-10575]:IfStatement[10506-10575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10533-10575]:Block[10533-10575]"
  }, {
    "left" : "findNamespaceShadows(t);",
    "right" : "findNamespaceShadows(t);",
    "info" : "ExpressionStatement[10543-10567]:ExpressionStatement[10543-10567]"
  }, {
    "left" : "if (t.getScopeDepth() == 2)",
    "right" : "if (t.getScopeDepth() == 2)",
    "info" : "IfStatement[10583-10781]:IfStatement[10583-10781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10611-10781]:Block[10611-10781]"
  }, {
    "left" : "renameNamespaceShadows(t);",
    "right" : "renameNamespaceShadows(t);",
    "info" : "ExpressionStatement[10621-10647]:ExpressionStatement[10621-10647]"
  }, {
    "left" : "aliases.clear();",
    "right" : "aliases.clear();",
    "info" : "ExpressionStatement[10656-10672]:ExpressionStatement[10656-10672]"
  }, {
    "left" : "forbiddenLocals.clear();",
    "right" : "forbiddenLocals.clear();",
    "info" : "ExpressionStatement[10681-10705]:ExpressionStatement[10681-10705]"
  }, {
    "left" : "transformation = null;",
    "right" : "transformation = null;",
    "info" : "ExpressionStatement[10714-10736]:ExpressionStatement[10714-10736]"
  }, {
    "left" : "hasNamespaceShadows = false;",
    "right" : "hasNamespaceShadows = false;",
    "info" : "ExpressionStatement[10745-10773]:ExpressionStatement[10745-10773]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10793-10802]:MarkerAnnotation[10793-10802]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10807-10813]:Modifier[10807-10813]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[10814-10819]:Modifier[10814-10819]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10820-10827]:PrimitiveType[10820-10827]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[10828-10842]:SimpleName[10828-10842]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[10843-10858]:SingleVariableDeclaration[10843-10858]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[10860-10866]:SingleVariableDeclaration[10860-10866]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[10868-10879]:SingleVariableDeclaration[10868-10879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10881-11136]:Block[10881-11136]"
  }, {
    "left" : "if (n.isFunction() && t.inGlobalScope())",
    "right" : "if (n.isFunction() && t.inGlobalScope())",
    "info" : "IfStatement[10889-11111]:IfStatement[10889-11111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10930-11111]:Block[10930-11111]"
  }, {
    "left" : "if (parent == null || !isCallToScopeMethod(parent))",
    "right" : "if (parent == null || !isCallToScopeMethod(parent))",
    "info" : "IfStatement[11016-11103]:IfStatement[11016-11103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11068-11103]:Block[11068-11103]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11080-11093]:ReturnStatement[11080-11093]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11118-11130]:ReturnStatement[11118-11130]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11142-11149]:Modifier[11142-11149]"
  }, {
    "left" : "SourcePosition<AliasTransformation>",
    "right" : "SourcePosition<AliasTransformation>",
    "info" : "ParameterizedType[11150-11185]:ParameterizedType[11150-11185]"
  }, {
    "left" : "getSourceRegion",
    "right" : "getSourceRegion",
    "info" : "SimpleName[11186-11201]:SimpleName[11186-11201]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[11202-11208]:SingleVariableDeclaration[11202-11208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11210-11765]:Block[11210-11765]"
  }, {
    "left" : "Node testNode = n;",
    "right" : "Node testNode = n;",
    "info" : "VariableDeclarationStatement[11218-11236]:VariableDeclarationStatement[11218-11236]"
  }, {
    "left" : "Node next = null;",
    "right" : "Node next = null;",
    "info" : "VariableDeclarationStatement[11243-11260]:VariableDeclarationStatement[11243-11260]"
  }, {
    "left" : "for (; next != null || testNode.isScript())",
    "right" : "for (; next != null || testNode.isScript())",
    "info" : "ForStatement[11267-11397]:ForStatement[11267-11397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11312-11397]:Block[11312-11397]"
  }, {
    "left" : "next = testNode.getNext();",
    "right" : "next = testNode.getNext();",
    "info" : "ExpressionStatement[11322-11348]:ExpressionStatement[11322-11348]"
  }, {
    "left" : "testNode = testNode.getParent();",
    "right" : "testNode = testNode.getParent();",
    "info" : "ExpressionStatement[11357-11389]:ExpressionStatement[11357-11389]"
  }, {
    "left" : "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();",
    "right" : "int endLine = next == null ? Integer.MAX_VALUE : next.getLineno();",
    "info" : "VariableDeclarationStatement[11405-11471]:VariableDeclarationStatement[11405-11471]"
  }, {
    "left" : "int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();",
    "right" : "int endChar = next == null ? Integer.MAX_VALUE : next.getCharno();",
    "info" : "VariableDeclarationStatement[11478-11544]:VariableDeclarationStatement[11478-11544]"
  }, {
    "left" : "SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};",
    "right" : "SourcePosition<AliasTransformation> pos =\n          new SourcePosition<AliasTransformation>() {};",
    "info" : "VariableDeclarationStatement[11551-11648]:VariableDeclarationStatement[11551-11648]"
  }, {
    "left" : "pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);",
    "right" : "pos.setPositionInformation(\n          n.getLineno(), n.getCharno(), endLine, endChar);",
    "info" : "ExpressionStatement[11655-11741]:ExpressionStatement[11655-11741]"
  }, {
    "left" : "return pos;",
    "right" : "return pos;",
    "info" : "ReturnStatement[11748-11759]:ReturnStatement[11748-11759]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11771-11778]:Modifier[11771-11778]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11779-11783]:PrimitiveType[11779-11783]"
  }, {
    "left" : "report",
    "right" : "report",
    "info" : "SimpleName[11784-11790]:SimpleName[11784-11790]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[11791-11806]:SingleVariableDeclaration[11791-11806]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[11808-11814]:SingleVariableDeclaration[11808-11814]"
  }, {
    "left" : "DiagnosticType error",
    "right" : "DiagnosticType error",
    "info" : "SingleVariableDeclaration[11816-11836]:SingleVariableDeclaration[11816-11836]"
  }, {
    "left" : "String... arguments",
    "right" : "String... arguments",
    "info" : "SingleVariableDeclaration[11846-11865]:SingleVariableDeclaration[11846-11865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11867-11955]:Block[11867-11955]"
  }, {
    "left" : "compiler.report(t.makeError(n, error, arguments));",
    "right" : "compiler.report(t.makeError(n, error, arguments));",
    "info" : "ExpressionStatement[11875-11925]:ExpressionStatement[11875-11925]"
  }, {
    "left" : "hasErrors = true;",
    "right" : "hasErrors = true;",
    "info" : "ExpressionStatement[11932-11949]:ExpressionStatement[11932-11949]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11961-11968]:Modifier[11961-11968]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11969-11973]:PrimitiveType[11969-11973]"
  }, {
    "left" : "findAliases",
    "right" : "findAliases",
    "info" : "SimpleName[11974-11985]:SimpleName[11974-11985]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[11986-12001]:SingleVariableDeclaration[11986-12001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12003-14980]:Block[12003-15742]"
  }, {
    "left" : "Scope scope = t.getScope();",
    "right" : "Scope scope = t.getScope();",
    "info" : "VariableDeclarationStatement[12011-12038]:VariableDeclarationStatement[12011-12038]"
  }, {
    "left" : "for (Var v : scope.getVarIterable())",
    "right" : "for (Var v : scope.getVarIterable())",
    "info" : "EnhancedForStatement[12045-14974]:EnhancedForStatement[12045-15736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12082-14974]:Block[12082-15736]"
  }, {
    "left" : "Node n = v.getNode();",
    "right" : "Node n = v.getNode();",
    "info" : "VariableDeclarationStatement[12092-12113]:VariableDeclarationStatement[12092-12113]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[12122-12150]:VariableDeclarationStatement[12122-12150]"
  }, {
    "left" : "boolean isVar = parent.isVar();",
    "right" : "boolean isVar = parent.isVar();",
    "info" : "VariableDeclarationStatement[12159-12190]:VariableDeclarationStatement[12159-12190]"
  }, {
    "left" : "if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName())",
    "right" : "if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName())",
    "info" : "IfStatement[12199-14966]:IfStatement[12272-15728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12278-12315]:Block[12351-12388]"
  }, {
    "left" : "recordAlias(v);",
    "right" : "recordAlias(v);",
    "info" : "ExpressionStatement[12290-12305]:ExpressionStatement[12363-12378]"
  }, {
    "left" : "if (v.isBleedingFunction())",
    "right" : "if (v.isBleedingFunction())",
    "info" : "IfStatement[12321-14966]:IfStatement[12394-15728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12349-12461]:Block[12422-12534]"
  }, {
    "left" : "if (parent.getType() == Token.LP)",
    "right" : "if (parent.getType() == Token.LP)",
    "info" : "IfStatement[12467-14966]:IfStatement[12540-15728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12501-12604]:Block[12574-12677]"
  }, {
    "left" : "if (isVar)",
    "right" : "if (isVar || isFunctionDecl)",
    "info" : "IfStatement[12610-14966]:IfStatement[12683-15728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12621-14813]:Block[12712-15575]"
  }, {
    "left" : "Node grandparent = parent.getParent();",
    "right" : "Node grandparent = parent.getParent();",
    "info" : "VariableDeclarationStatement[12633-12671]:VariableDeclarationStatement[12801-12839]"
  }, {
    "left" : "Node value = n.hasChildren() ?\n              v.getInitialValue().detachFromParent() :\n              null;",
    "right" : "Node value = v.getInitialValue() != null ?\n              v.getInitialValue() :\n              null;",
    "info" : "VariableDeclarationStatement[12682-12787]:VariableDeclarationStatement[12850-12948]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[12682-12686]:SimpleType[12959-12963]"
  }, {
    "left" : "v.getInitialValue()",
    "right" : "v.getInitialValue()",
    "info" : "MethodInvocation[12727-12746]:MethodInvocation[12907-12926]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[12798-12802]:SimpleType[12850-12854]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[12832-12860]:VariableDeclarationStatement[12991-13019]"
  }, {
    "left" : "int nameCount = scopedAliasNames.count(name);",
    "right" : "int nameCount = scopedAliasNames.count(name);",
    "info" : "VariableDeclarationStatement[12871-12916]:VariableDeclarationStatement[13030-13075]"
  }, {
    "left" : "scopedAliasNames.add(name);",
    "right" : "scopedAliasNames.add(name);",
    "info" : "ExpressionStatement[12927-12954]:ExpressionStatement[13086-13113]"
  }, {
    "left" : "String globalName =\n              \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));",
    "right" : "String globalName =\n              \"$jscomp.scope.\" + name + (nameCount == 0 ? \"\" : (\"$\" + nameCount));",
    "info" : "VariableDeclarationStatement[12965-13067]:VariableDeclarationStatement[13124-13226]"
  }, {
    "left" : "compiler.ensureLibraryInjected(\"base\");",
    "right" : "compiler.ensureLibraryInjected(\"base\");",
    "info" : "ExpressionStatement[13079-13118]:ExpressionStatement[13238-13277]"
  }, {
    "left" : "if (value != null || v.getJSDocInfo() != null)",
    "right" : "if (value != null || v.getJSDocInfo() != null)",
    "info" : "IfStatement[14051-14538]:IfStatement[14697-15300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14098-14538]:Block[14744-15300]"
  }, {
    "left" : "Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n                compiler.getCodingConvention(),\n                globalName,\n                value,\n                v.getJSDocInfo())\n                .useSourceInfoIfMissingFromForTree(n);",
    "right" : "Node newDecl = NodeUtil.newQualifiedNameNodeDeclaration(\n                compiler.getCodingConvention(),\n                globalName,\n                value,\n                v.getJSDocInfo())\n                .useSourceInfoIfMissingFromForTree(n);",
    "info" : "VariableDeclarationStatement[14112-14356]:VariableDeclarationStatement[14758-15002]"
  }, {
    "left" : "NodeUtil.setDebugInformation(\n                newDecl.getFirstChild().getFirstChild(), n, name);",
    "right" : "NodeUtil.setDebugInformation(\n                newDecl.getFirstChild().getFirstChild(), n, name);",
    "info" : "ExpressionStatement[14369-14465]:ExpressionStatement[15015-15111]"
  }, {
    "left" : "grandparent.addChildBefore(newDecl, varNode);",
    "right" : "grandparent.addChildBefore(newDecl, varNode);",
    "info" : "ExpressionStatement[14481-14526]:ExpressionStatement[15229-15274]"
  }, {
    "left" : "v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));",
    "right" : "v.getNameNode().addChildToFront(\n              NodeUtil.newQualifiedNameNode(\n                  compiler.getCodingConvention(), globalName, n, name));",
    "info" : "ExpressionStatement[14626-14776]:ExpressionStatement[15388-15538]"
  }, {
    "left" : "recordAlias(v);",
    "right" : "recordAlias(v);",
    "info" : "ExpressionStatement[14788-14803]:ExpressionStatement[15550-15565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14819-14966]:Block[15581-15728]"
  }, {
    "left" : "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
    "right" : "report(t, n, GOOG_SCOPE_NON_ALIAS_LOCAL, n.getString());",
    "info" : "ExpressionStatement[14900-14956]:ExpressionStatement[15662-15718]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14986-14993]:Modifier[15748-15755]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14994-14998]:PrimitiveType[15756-15760]"
  }, {
    "left" : "recordAlias",
    "right" : "recordAlias",
    "info" : "SimpleName[14999-15010]:SimpleName[15761-15772]"
  }, {
    "left" : "Var aliasVar",
    "right" : "Var aliasVar",
    "info" : "SingleVariableDeclaration[15011-15023]:SingleVariableDeclaration[15773-15785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15025-15497]:Block[15787-16259]"
  }, {
    "left" : "String name = aliasVar.getName();",
    "right" : "String name = aliasVar.getName();",
    "info" : "VariableDeclarationStatement[15033-15066]:VariableDeclarationStatement[15795-15828]"
  }, {
    "left" : "aliases.put(name, aliasVar);",
    "right" : "aliases.put(name, aliasVar);",
    "info" : "ExpressionStatement[15073-15101]:ExpressionStatement[15835-15863]"
  }, {
    "left" : "String qualifiedName =\n        aliasVar.getInitialValue().getQualifiedName();",
    "right" : "String qualifiedName =\n        aliasVar.getInitialValue().getQualifiedName();",
    "info" : "VariableDeclarationStatement[15109-15186]:VariableDeclarationStatement[15871-15948]"
  }, {
    "left" : "transformation.addAlias(name, qualifiedName);",
    "right" : "transformation.addAlias(name, qualifiedName);",
    "info" : "ExpressionStatement[15193-15238]:ExpressionStatement[15955-16000]"
  }, {
    "left" : "int rootIndex = qualifiedName.indexOf(\".\");",
    "right" : "int rootIndex = qualifiedName.indexOf(\".\");",
    "info" : "VariableDeclarationStatement[15246-15289]:VariableDeclarationStatement[16008-16051]"
  }, {
    "left" : "if (rootIndex != -1)",
    "right" : "if (rootIndex != -1)",
    "info" : "IfStatement[15296-15491]:IfStatement[16058-16253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15317-15491]:Block[16079-16253]"
  }, {
    "left" : "String qNameRoot = qualifiedName.substring(0, rootIndex);",
    "right" : "String qNameRoot = qualifiedName.substring(0, rootIndex);",
    "info" : "VariableDeclarationStatement[15327-15384]:VariableDeclarationStatement[16089-16146]"
  }, {
    "left" : "if (!aliases.containsKey(qNameRoot))",
    "right" : "if (!aliases.containsKey(qNameRoot))",
    "info" : "IfStatement[15393-15483]:IfStatement[16155-16245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15430-15483]:Block[16192-16245]"
  }, {
    "left" : "forbiddenLocals.add(qNameRoot);",
    "right" : "forbiddenLocals.add(qNameRoot);",
    "info" : "ExpressionStatement[15442-15473]:ExpressionStatement[16204-16235]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15569-15576]:Modifier[16331-16338]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15577-15581]:PrimitiveType[16339-16343]"
  }, {
    "left" : "findNamespaceShadows",
    "right" : "findNamespaceShadows",
    "info" : "SimpleName[15582-15602]:SimpleName[16344-16364]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[15603-15618]:SingleVariableDeclaration[16365-16380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15620-15891]:Block[16382-16653]"
  }, {
    "left" : "if (hasNamespaceShadows)",
    "right" : "if (hasNamespaceShadows)",
    "info" : "IfStatement[15628-15678]:IfStatement[16390-16440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15653-15678]:Block[16415-16440]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[15663-15670]:ReturnStatement[16425-16432]"
  }, {
    "left" : "Scope scope = t.getScope();",
    "right" : "Scope scope = t.getScope();",
    "info" : "VariableDeclarationStatement[15686-15713]:VariableDeclarationStatement[16448-16475]"
  }, {
    "left" : "for (Var v : scope.getVarIterable())",
    "right" : "for (Var v : scope.getVarIterable())",
    "info" : "EnhancedForStatement[15720-15885]:EnhancedForStatement[16482-16647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15757-15885]:Block[16519-16647]"
  }, {
    "left" : "if (forbiddenLocals.contains(v.getName()))",
    "right" : "if (forbiddenLocals.contains(v.getName()))",
    "info" : "IfStatement[15767-15877]:IfStatement[16529-16639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15810-15877]:Block[16572-16639]"
  }, {
    "left" : "hasNamespaceShadows = true;",
    "right" : "hasNamespaceShadows = true;",
    "info" : "ExpressionStatement[15822-15849]:ExpressionStatement[16584-16611]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[15860-15867]:ReturnStatement[16622-16629]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16067-16074]:Modifier[16829-16836]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16075-16079]:PrimitiveType[16837-16841]"
  }, {
    "left" : "renameNamespaceShadows",
    "right" : "renameNamespaceShadows",
    "info" : "SimpleName[16080-16102]:SimpleName[16842-16864]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[16103-16118]:SingleVariableDeclaration[16865-16880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16120-16635]:Block[16882-17397]"
  }, {
    "left" : "if (hasNamespaceShadows)",
    "right" : "if (hasNamespaceShadows)",
    "info" : "IfStatement[16128-16629]:IfStatement[16890-17391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16153-16629]:Block[16915-17391]"
  }, {
    "left" : "MakeDeclaredNamesUnique.Renamer renamer =\n            new MakeDeclaredNamesUnique.WhitelistedRenamer(\n                new MakeDeclaredNamesUnique.ContextualRenamer(),\n                forbiddenLocals);",
    "right" : "MakeDeclaredNamesUnique.Renamer renamer =\n            new MakeDeclaredNamesUnique.WhitelistedRenamer(\n                new MakeDeclaredNamesUnique.ContextualRenamer(),\n                forbiddenLocals);",
    "info" : "VariableDeclarationStatement[16163-16363]:VariableDeclarationStatement[16925-17125]"
  }, {
    "left" : "for (String s : forbiddenLocals)",
    "right" : "for (String s : forbiddenLocals)",
    "info" : "EnhancedForStatement[16372-16454]:EnhancedForStatement[17134-17216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16405-16454]:Block[17167-17216]"
  }, {
    "left" : "renamer.addDeclaredName(s);",
    "right" : "renamer.addDeclaredName(s);",
    "info" : "ExpressionStatement[16417-16444]:ExpressionStatement[17179-17206]"
  }, {
    "left" : "MakeDeclaredNamesUnique uniquifier =\n            new MakeDeclaredNamesUnique(renamer);",
    "right" : "MakeDeclaredNamesUnique uniquifier =\n            new MakeDeclaredNamesUnique(renamer);",
    "info" : "VariableDeclarationStatement[16463-16549]:VariableDeclarationStatement[17225-17311]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, t.getScopeRoot(), uniquifier);",
    "right" : "NodeTraversal.traverse(compiler, t.getScopeRoot(), uniquifier);",
    "info" : "ExpressionStatement[16558-16621]:ExpressionStatement[17320-17383]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16641-16648]:Modifier[17403-17410]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16649-16653]:PrimitiveType[17411-17415]"
  }, {
    "left" : "validateScopeCall",
    "right" : "validateScopeCall",
    "info" : "SimpleName[16654-16671]:SimpleName[17416-17433]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[16672-16687]:SingleVariableDeclaration[17434-17449]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16689-16695]:SingleVariableDeclaration[17451-17457]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[16697-16708]:SingleVariableDeclaration[17459-17470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16710-17558]:Block[17472-18320]"
  }, {
    "left" : "if (preprocessorSymbolTable != null)",
    "right" : "if (preprocessorSymbolTable != null)",
    "info" : "IfStatement[16718-16829]:IfStatement[17480-17591]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16755-16829]:Block[17517-17591]"
  }, {
    "left" : "preprocessorSymbolTable.addReference(n.getFirstChild());",
    "right" : "preprocessorSymbolTable.addReference(n.getFirstChild());",
    "info" : "ExpressionStatement[16765-16821]:ExpressionStatement[17527-17583]"
  }, {
    "left" : "if (!parent.isExprResult())",
    "right" : "if (!parent.isExprResult())",
    "info" : "IfStatement[16836-16923]:IfStatement[17598-17685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16864-16923]:Block[17626-17685]"
  }, {
    "left" : "report(t, n, GOOG_SCOPE_USED_IMPROPERLY);",
    "right" : "report(t, n, GOOG_SCOPE_USED_IMPROPERLY);",
    "info" : "ExpressionStatement[16874-16915]:ExpressionStatement[17636-17677]"
  }, {
    "left" : "if (n.getChildCount() != 2)",
    "right" : "if (n.getChildCount() != 2)",
    "info" : "IfStatement[16930-17552]:IfStatement[17692-18314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16958-17172]:Block[17720-17934]"
  }, {
    "left" : "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
    "right" : "report(t, n, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
    "info" : "ExpressionStatement[17120-17164]:ExpressionStatement[17882-17926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17178-17552]:Block[17940-18314]"
  }, {
    "left" : "Node anonymousFnNode = n.getChildAtIndex(1);",
    "right" : "Node anonymousFnNode = n.getChildAtIndex(1);",
    "info" : "VariableDeclarationStatement[17188-17232]:VariableDeclarationStatement[17950-17994]"
  }, {
    "left" : "if (!anonymousFnNode.isFunction() ||\n            NodeUtil.getFunctionName(anonymousFnNode) != null ||\n            NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren())",
    "right" : "if (!anonymousFnNode.isFunction() ||\n            NodeUtil.getFunctionName(anonymousFnNode) != null ||\n            NodeUtil.getFunctionParameters(anonymousFnNode).hasChildren())",
    "info" : "IfStatement[17241-17544]:IfStatement[18003-18306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17418-17498]:Block[18180-18260]"
  }, {
    "left" : "report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
    "right" : "report(t, anonymousFnNode, GOOG_SCOPE_HAS_BAD_PARAMETERS);",
    "info" : "ExpressionStatement[17430-17488]:ExpressionStatement[18192-18250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17504-17544]:Block[18266-18306]"
  }, {
    "left" : "scopeCalls.add(n);",
    "right" : "scopeCalls.add(n);",
    "info" : "ExpressionStatement[17516-17534]:ExpressionStatement[18278-18296]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17564-17573]:MarkerAnnotation[18326-18335]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17578-17584]:Modifier[18340-18346]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17585-17589]:PrimitiveType[18347-18351]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[17590-17595]:SimpleName[18352-18357]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[17596-17611]:SingleVariableDeclaration[18358-18373]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[17613-17619]:SingleVariableDeclaration[18375-18381]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[17621-17632]:SingleVariableDeclaration[18383-18394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17634-19745]:Block[18396-20507]"
  }, {
    "left" : "if (isCallToScopeMethod(n))",
    "right" : "if (isCallToScopeMethod(n))",
    "info" : "IfStatement[17642-17727]:IfStatement[18404-18489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17670-17727]:Block[18432-18489]"
  }, {
    "left" : "validateScopeCall(t, n, n.getParent());",
    "right" : "validateScopeCall(t, n, n.getParent());",
    "info" : "ExpressionStatement[17680-17719]:ExpressionStatement[18442-18481]"
  }, {
    "left" : "if (t.getScopeDepth() < 2)",
    "right" : "if (t.getScopeDepth() < 2)",
    "info" : "IfStatement[17735-17787]:IfStatement[18497-18549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17762-17787]:Block[18524-18549]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[17772-17779]:ReturnStatement[18534-18541]"
  }, {
    "left" : "int type = n.getType();",
    "right" : "int type = n.getType();",
    "info" : "VariableDeclarationStatement[17795-17818]:VariableDeclarationStatement[18557-18580]"
  }, {
    "left" : "Var aliasVar = null;",
    "right" : "Var aliasVar = null;",
    "info" : "VariableDeclarationStatement[17825-17845]:VariableDeclarationStatement[18587-18607]"
  }, {
    "left" : "if (type == Token.NAME)",
    "right" : "if (type == Token.NAME)",
    "info" : "IfStatement[17852-18095]:IfStatement[18614-18857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17876-18095]:Block[18638-18857]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[17886-17914]:VariableDeclarationStatement[18648-18676]"
  }, {
    "left" : "Var lexicalVar = t.getScope().getVar(n.getString());",
    "right" : "Var lexicalVar = t.getScope().getVar(n.getString());",
    "info" : "VariableDeclarationStatement[17923-17975]:VariableDeclarationStatement[18685-18737]"
  }, {
    "left" : "if (lexicalVar != null && lexicalVar == aliases.get(name))",
    "right" : "if (lexicalVar != null && lexicalVar == aliases.get(name))",
    "info" : "IfStatement[17984-18087]:IfStatement[18746-18849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18043-18087]:Block[18805-18849]"
  }, {
    "left" : "aliasVar = lexicalVar;",
    "right" : "aliasVar = lexicalVar;",
    "info" : "ExpressionStatement[18055-18077]:ExpressionStatement[18817-18839]"
  }, {
    "left" : "if (t.getScopeDepth() == 2)",
    "right" : "if (t.getScopeDepth() == 2)",
    "info" : "IfStatement[18160-18841]:IfStatement[18922-19603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18188-18841]:Block[18950-19603]"
  }, {
    "left" : "if (aliasVar != null && NodeUtil.isLValue(n))",
    "right" : "if (aliasVar != null && NodeUtil.isLValue(n))",
    "info" : "IfStatement[18198-18556]:IfStatement[18960-19318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18244-18556]:Block[19006-19318]"
  }, {
    "left" : "if (aliasVar.getNode() == n)",
    "right" : "if (aliasVar.getNode() == n)",
    "info" : "IfStatement[18256-18546]:IfStatement[19018-19308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18285-18458]:Block[19047-19220]"
  }, {
    "left" : "aliasDefinitionsInOrder.add(n);",
    "right" : "aliasDefinitionsInOrder.add(n);",
    "info" : "ExpressionStatement[18299-18330]:ExpressionStatement[19061-19092]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[18439-18446]:ReturnStatement[19201-19208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18464-18546]:Block[19226-19308]"
  }, {
    "left" : "report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());",
    "right" : "report(t, n, GOOG_SCOPE_ALIAS_REDEFINED, n.getString());",
    "info" : "ExpressionStatement[18478-18534]:ExpressionStatement[19240-19296]"
  }, {
    "left" : "if (type == Token.RETURN)",
    "right" : "if (type == Token.RETURN)",
    "info" : "IfStatement[18566-18833]:IfStatement[19328-19595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18592-18651]:Block[19354-19413]"
  }, {
    "left" : "report(t, n, GOOG_SCOPE_USES_RETURN);",
    "right" : "report(t, n, GOOG_SCOPE_USES_RETURN);",
    "info" : "ExpressionStatement[18604-18641]:ExpressionStatement[19366-19403]"
  }, {
    "left" : "if (type == Token.THIS)",
    "right" : "if (type == Token.THIS)",
    "info" : "IfStatement[18657-18833]:IfStatement[19419-19595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18681-18744]:Block[19443-19506]"
  }, {
    "left" : "report(t, n, GOOG_SCOPE_REFERENCES_THIS);",
    "right" : "report(t, n, GOOG_SCOPE_REFERENCES_THIS);",
    "info" : "ExpressionStatement[18693-18734]:ExpressionStatement[19455-19496]"
  }, {
    "left" : "if (type == Token.THROW)",
    "right" : "if (type == Token.THROW)",
    "info" : "IfStatement[18750-18833]:IfStatement[19512-19595]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18775-18833]:Block[19537-19595]"
  }, {
    "left" : "report(t, n, GOOG_SCOPE_USES_THROW);",
    "right" : "report(t, n, GOOG_SCOPE_USES_THROW);",
    "info" : "ExpressionStatement[18787-18823]:ExpressionStatement[19549-19585]"
  }, {
    "left" : "if (t.getScopeDepth() >= 2)",
    "right" : "if (t.getScopeDepth() >= 2)",
    "info" : "IfStatement[18914-19739]:IfStatement[19676-20501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18942-19739]:Block[19704-20501]"
  }, {
    "left" : "if (aliasVar != null)",
    "right" : "if (aliasVar != null)",
    "info" : "IfStatement[19002-19496]:IfStatement[19764-20258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19024-19496]:Block[19786-20258]"
  }, {
    "left" : "aliasUsages.add(new AliasedNode(aliasVar, n));",
    "right" : "aliasUsages.add(new AliasedNode(aliasVar, n));",
    "info" : "ExpressionStatement[19440-19486]:ExpressionStatement[20202-20248]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[19506-19540]:VariableDeclarationStatement[20268-20302]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[19549-19671]:IfStatement[20311-20433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19567-19671]:Block[20329-20433]"
  }, {
    "left" : "for (Node node : info.getTypeNodes())",
    "right" : "for (Node node : info.getTypeNodes())",
    "info" : "EnhancedForStatement[19579-19661]:EnhancedForStatement[20341-20423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19617-19661]:Block[20379-20423]"
  }, {
    "left" : "fixTypeNode(node);",
    "right" : "fixTypeNode(node);",
    "info" : "ExpressionStatement[19631-19649]:ExpressionStatement[20393-20411]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19751-19758]:Modifier[20513-20520]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19759-19763]:PrimitiveType[20521-20525]"
  }, {
    "left" : "fixTypeNode",
    "right" : "fixTypeNode",
    "info" : "SimpleName[19764-19775]:SimpleName[20526-20537]"
  }, {
    "left" : "Node typeNode",
    "right" : "Node typeNode",
    "info" : "SingleVariableDeclaration[19776-19789]:SingleVariableDeclaration[20538-20551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19791-20352]:Block[20553-21114]"
  }, {
    "left" : "if (typeNode.isString())",
    "right" : "if (typeNode.isString())",
    "info" : "IfStatement[19799-20206]:IfStatement[20561-20968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19824-20206]:Block[20586-20968]"
  }, {
    "left" : "String name = typeNode.getString();",
    "right" : "String name = typeNode.getString();",
    "info" : "VariableDeclarationStatement[19834-19869]:VariableDeclarationStatement[20596-20631]"
  }, {
    "left" : "int endIndex = name.indexOf('.');",
    "right" : "int endIndex = name.indexOf('.');",
    "info" : "VariableDeclarationStatement[19878-19911]:VariableDeclarationStatement[20640-20673]"
  }, {
    "left" : "if (endIndex == -1)",
    "right" : "if (endIndex == -1)",
    "info" : "IfStatement[19920-19987]:IfStatement[20682-20749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19940-19987]:Block[20702-20749]"
  }, {
    "left" : "endIndex = name.length();",
    "right" : "endIndex = name.length();",
    "info" : "ExpressionStatement[19952-19977]:ExpressionStatement[20714-20739]"
  }, {
    "left" : "String baseName = name.substring(0, endIndex);",
    "right" : "String baseName = name.substring(0, endIndex);",
    "info" : "VariableDeclarationStatement[19996-20042]:VariableDeclarationStatement[20758-20804]"
  }, {
    "left" : "Var aliasVar = aliases.get(baseName);",
    "right" : "Var aliasVar = aliases.get(baseName);",
    "info" : "VariableDeclarationStatement[20051-20088]:VariableDeclarationStatement[20813-20850]"
  }, {
    "left" : "if (aliasVar != null)",
    "right" : "if (aliasVar != null)",
    "info" : "IfStatement[20097-20198]:IfStatement[20859-20960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20119-20198]:Block[20881-20960]"
  }, {
    "left" : "aliasUsages.add(new AliasedTypeNode(aliasVar, typeNode));",
    "right" : "aliasUsages.add(new AliasedTypeNode(aliasVar, typeNode));",
    "info" : "ExpressionStatement[20131-20188]:ExpressionStatement[20893-20950]"
  }, {
    "left" : "for (Node child = typeNode.getFirstChild(); child != null;\n           child = child.getNext())",
    "right" : "for (Node child = typeNode.getFirstChild(); child != null;\n           child = child.getNext())",
    "info" : "ForStatement[20214-20346]:ForStatement[20976-21108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20309-20346]:Block[21071-21108]"
  }, {
    "left" : "fixTypeNode(child);",
    "right" : "fixTypeNode(child);",
    "info" : "ExpressionStatement[20319-20338]:ExpressionStatement[21081-21100]"
  } ]
}