{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "right" : "boolean anyOtherEndTag(Token t, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[38755-39587]:MethodDeclaration[38835-39667]"
    }, {
      "left" : "private static String nullString = String.valueOf('\\u0000');",
      "right" : "private static String nullString = String.valueOf('\\u0000');",
      "info" : "FieldDeclaration[67415-67475]:FieldDeclaration[67495-67555]"
    }, {
      "left" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "right" : "abstract boolean process(Token t, HtmlTreeBuilder tb);",
      "info" : "MethodDeclaration[67481-67535]:MethodDeclaration[67561-67615]"
    }, {
      "left" : "private static boolean isWhitespace(Token t)",
      "right" : "private static boolean isWhitespace(Token t)",
      "info" : "MethodDeclaration[67541-68004]:MethodDeclaration[67621-68084]"
    }, {
      "left" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRcData(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68010-68241]:MethodDeclaration[68090-68321]"
    }, {
      "left" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "right" : "private static void handleRawtext(Token.StartTag startTag, HtmlTreeBuilder tb)",
      "info" : "MethodDeclaration[68247-68480]:MethodDeclaration[68327-68560]"
    } ],
    "mappings" : [
 {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[38755-38762]:PrimitiveType[38835-38842]"
    }, {
      "left" : "anyOtherEndTag",
      "right" : "anyOtherEndTag",
      "info" : "SimpleName[38763-38777]:SimpleName[38843-38857]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[38778-38785]:SingleVariableDeclaration[38858-38865]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[38787-38805]:SingleVariableDeclaration[38867-38885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38807-39587]:Block[38887-39667]"
    }, {
      "left" : "String name = t.asEndTag().name();",
      "right" : "String name = t.asEndTag().name();",
      "info" : "VariableDeclarationStatement[38821-38855]:VariableDeclarationStatement[38901-38935]"
    }, {
      "left" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "right" : "DescendableLinkedList<Element> stack = tb.getStack();",
      "info" : "VariableDeclarationStatement[38868-38921]:VariableDeclarationStatement[38948-39001]"
    }, {
      "left" : "Iterator<Element> it = stack.descendingIterator();",
      "right" : "Iterator<Element> it = stack.descendingIterator();",
      "info" : "VariableDeclarationStatement[38934-38984]:VariableDeclarationStatement[39014-39064]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[38997-39552]:WhileStatement[39077-39632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39018-39552]:Block[39098-39632]"
    }, {
      "left" : "Element node = it.next();",
      "right" : "Element node = it.next();",
      "info" : "VariableDeclarationStatement[39036-39061]:VariableDeclarationStatement[39116-39141]"
    }, {
      "left" : "if (node.nodeName().equals(name))",
      "right" : "if (node.nodeName().equals(name))",
      "info" : "IfStatement[39078-39538]:IfStatement[39158-39618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39112-39367]:Block[39192-39447]"
    }, {
      "left" : "tb.generateImpliedEndTags(name);",
      "right" : "tb.generateImpliedEndTags(name);",
      "info" : "ExpressionStatement[39134-39166]:ExpressionStatement[39214-39246]"
    }, {
      "left" : "if (!name.equals(tb.currentElement().nodeName()))",
      "right" : "if (!name.equals(tb.currentElement().nodeName()))",
      "info" : "IfStatement[39187-39276]:IfStatement[39267-39356]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39261-39276]:ExpressionStatement[39341-39356]"
    }, {
      "left" : "tb.popStackToClose(name);",
      "right" : "tb.popStackToClose(name);",
      "info" : "ExpressionStatement[39297-39322]:ExpressionStatement[39377-39402]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39343-39349]:BreakStatement[39423-39429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39373-39538]:Block[39453-39618]"
    }, {
      "left" : "if (tb.isSpecial(node))",
      "right" : "if (tb.isSpecial(node))",
      "info" : "IfStatement[39395-39520]:IfStatement[39475-39600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39419-39520]:Block[39499-39600]"
    }, {
      "left" : "tb.error(this);",
      "right" : "tb.error(this);",
      "info" : "ExpressionStatement[39445-39460]:ExpressionStatement[39525-39540]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[39485-39498]:ReturnStatement[39565-39578]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39565-39577]:ReturnStatement[39645-39657]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[67481-67489]:Modifier[67561-67569]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67490-67497]:PrimitiveType[67570-67577]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[67498-67505]:SimpleName[67578-67585]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67506-67513]:SingleVariableDeclaration[67586-67593]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[67515-67533]:SingleVariableDeclaration[67595-67613]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[67541-67548]:Modifier[67621-67628]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[67549-67555]:Modifier[67629-67635]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[67556-67563]:PrimitiveType[67636-67643]"
    }, {
      "left" : "isWhitespace",
      "right" : "isWhitespace",
      "info" : "SimpleName[67564-67576]:SimpleName[67644-67656]"
    }, {
      "left" : "Token t",
      "right" : "Token t",
      "info" : "SingleVariableDeclaration[67577-67584]:SingleVariableDeclaration[67657-67664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67586-68004]:Block[67666-68084]"
    }, {
      "left" : "if (t.isCharacter())",
      "right" : "if (t.isCharacter())",
      "info" : "IfStatement[67596-67976]:IfStatement[67676-68056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67617-67976]:Block[67697-68056]"
    }, {
      "left" : "String data = t.asCharacter().getData();",
      "right" : "String data = t.asCharacter().getData();",
      "info" : "VariableDeclarationStatement[67631-67671]:VariableDeclarationStatement[67711-67751]"
    }, {
      "left" : "for (int i = 0; i < data.length(); i++)",
      "right" : "for (int i = 0; i < data.length(); i++)",
      "info" : "ForStatement[67762-67941]:ForStatement[67842-68021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67802-67941]:Block[67882-68021]"
    }, {
      "left" : "char c = data.charAt(i);",
      "right" : "char c = data.charAt(i);",
      "info" : "VariableDeclarationStatement[67820-67844]:VariableDeclarationStatement[67900-67924]"
    }, {
      "left" : "if (!StringUtil.isWhitespace(c))",
      "right" : "if (!StringUtil.isWhitespace(c))",
      "info" : "IfStatement[67861-67927]:IfStatement[67941-68007]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67914-67927]:ReturnStatement[67994-68007]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[67954-67966]:ReturnStatement[68034-68046]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[67985-67998]:ReturnStatement[68065-68078]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68010-68017]:Modifier[68090-68097]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68018-68024]:Modifier[68098-68104]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68025-68029]:PrimitiveType[68105-68109]"
    }, {
      "left" : "handleRcData",
      "right" : "handleRcData",
      "info" : "SimpleName[68030-68042]:SimpleName[68110-68122]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[68043-68066]:SingleVariableDeclaration[68123-68146]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[68068-68086]:SingleVariableDeclaration[68148-68166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68088-68241]:Block[68168-68321]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68098-68118]:ExpressionStatement[68178-68198]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rcdata);",
      "info" : "ExpressionStatement[68127-68174]:ExpressionStatement[68207-68254]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68183-68206]:ExpressionStatement[68263-68286]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68215-68235]:ExpressionStatement[68295-68315]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[68247-68254]:Modifier[68327-68334]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68255-68261]:Modifier[68335-68341]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[68262-68266]:PrimitiveType[68342-68346]"
    }, {
      "left" : "handleRawtext",
      "right" : "handleRawtext",
      "info" : "SimpleName[68267-68280]:SimpleName[68347-68360]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[68281-68304]:SingleVariableDeclaration[68361-68384]"
    }, {
      "left" : "HtmlTreeBuilder tb",
      "right" : "HtmlTreeBuilder tb",
      "info" : "SingleVariableDeclaration[68306-68324]:SingleVariableDeclaration[68386-68404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68326-68480]:Block[68406-68560]"
    }, {
      "left" : "tb.insert(startTag);",
      "right" : "tb.insert(startTag);",
      "info" : "ExpressionStatement[68336-68356]:ExpressionStatement[68416-68436]"
    }, {
      "left" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "right" : "tb.tokeniser.transition(TokeniserState.Rawtext);",
      "info" : "ExpressionStatement[68365-68413]:ExpressionStatement[68445-68493]"
    }, {
      "left" : "tb.markInsertionMode();",
      "right" : "tb.markInsertionMode();",
      "info" : "ExpressionStatement[68422-68445]:ExpressionStatement[68502-68525]"
    }, {
      "left" : "tb.transition(Text);",
      "right" : "tb.transition(Text);",
      "info" : "ExpressionStatement[68454-68474]:ExpressionStatement[68534-68554]"
    } ]
  },
  "interFileMappings" : { }
}