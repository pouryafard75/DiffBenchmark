{
  "matchedElements" : [
 {
    "left" : "class : FromStringDeserializer",
    "right" : "class : FromStringDeserializer",
    "info" : "TypeDeclaration[710-10823]:TypeDeclaration[710-10912]"
  }, {
    "left" : "public types() : ",
    "right" : "public types() : ",
    "info" : "MethodDeclaration[926-1336]:MethodDeclaration[926-1336]"
  }, {
    "left" : "protected FromStringDeserializer(vc )",
    "right" : "protected FromStringDeserializer(vc )",
    "info" : "MethodDeclaration[1530-1602]:MethodDeclaration[1530-1602]"
  }, {
    "left" : "public findDeserializer(rawType ) : ",
    "right" : "public findDeserializer(rawType ) : ",
    "info" : "MethodDeclaration[1608-2935]:MethodDeclaration[1608-2935]"
  }, {
    "left" : "public deserialize(jp , ctxt ) : ",
    "right" : "public deserialize(jp , ctxt ) : ",
    "info" : "MethodDeclaration[3129-5574]:MethodDeclaration[3129-5574]"
  }, {
    "left" : "protected abstract _deserialize(value , ctxt ) : ",
    "right" : "protected abstract _deserialize(value , ctxt ) : ",
    "info" : "MethodDeclaration[5588-5684]:MethodDeclaration[5588-5684]"
  }, {
    "left" : "protected _deserializeEmbedded(ob , ctxt ) : ",
    "right" : "protected _deserializeEmbedded(ob , ctxt ) : ",
    "info" : "MethodDeclaration[5690-5989]:MethodDeclaration[5690-5989]"
  }, {
    "left" : "protected _deserializeFromEmptyString() : ",
    "right" : "protected _deserializeFromEmptyString() : ",
    "info" : "MethodDeclaration[5995-6084]:MethodDeclaration[5995-6084]"
  }, {
    "left" : "class : Std",
    "right" : "class : Std",
    "info" : "TypeDeclaration[6274-10821]:TypeDeclaration[6274-10910]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[6503-6550]:FieldDeclaration[6503-6550]"
  }, {
    "left" : "STD_FILE",
    "right" : "STD_FILE",
    "info" : "FieldDeclaration[6560-6597]:FieldDeclaration[6560-6597]"
  }, {
    "left" : "STD_URL",
    "right" : "STD_URL",
    "info" : "FieldDeclaration[6606-6642]:FieldDeclaration[6606-6642]"
  }, {
    "left" : "STD_URI",
    "right" : "STD_URI",
    "info" : "FieldDeclaration[6651-6687]:FieldDeclaration[6651-6687]"
  }, {
    "left" : "STD_CLASS",
    "right" : "STD_CLASS",
    "info" : "FieldDeclaration[6696-6734]:FieldDeclaration[6696-6734]"
  }, {
    "left" : "STD_JAVA_TYPE",
    "right" : "STD_JAVA_TYPE",
    "info" : "FieldDeclaration[6743-6785]:FieldDeclaration[6743-6785]"
  }, {
    "left" : "STD_CURRENCY",
    "right" : "STD_CURRENCY",
    "info" : "FieldDeclaration[6794-6835]:FieldDeclaration[6794-6835]"
  }, {
    "left" : "STD_PATTERN",
    "right" : "STD_PATTERN",
    "info" : "FieldDeclaration[6844-6884]:FieldDeclaration[6844-6884]"
  }, {
    "left" : "STD_LOCALE",
    "right" : "STD_LOCALE",
    "info" : "FieldDeclaration[6893-6932]:FieldDeclaration[6893-6932]"
  }, {
    "left" : "STD_CHARSET",
    "right" : "STD_CHARSET",
    "info" : "FieldDeclaration[6941-6981]:FieldDeclaration[6941-6981]"
  }, {
    "left" : "STD_TIME_ZONE",
    "right" : "STD_TIME_ZONE",
    "info" : "FieldDeclaration[6990-7033]:FieldDeclaration[6990-7033]"
  }, {
    "left" : "STD_INET_ADDRESS",
    "right" : "STD_INET_ADDRESS",
    "info" : "FieldDeclaration[7042-7088]:FieldDeclaration[7042-7088]"
  }, {
    "left" : "STD_INET_SOCKET_ADDRESS",
    "right" : "STD_INET_SOCKET_ADDRESS",
    "info" : "FieldDeclaration[7097-7150]:FieldDeclaration[7097-7150]"
  }, {
    "left" : "_kind",
    "right" : "_kind",
    "info" : "FieldDeclaration[7160-7186]:FieldDeclaration[7160-7186]"
  }, {
    "left" : "protected Std(valueType , kind int)",
    "right" : "protected Std(valueType , kind int)",
    "info" : "MethodDeclaration[7204-7315]:MethodDeclaration[7204-7315]"
  }, {
    "left" : "protected _deserialize(value , ctxt ) : ",
    "right" : "protected _deserialize(value , ctxt ) : ",
    "info" : "MethodDeclaration[7325-10447]:MethodDeclaration[7325-10447]"
  }, {
    "left" : "protected _deserializeFromEmptyString() : ",
    "right" : "protected _deserializeFromEmptyString() : ",
    "info" : "MethodDeclaration[10457-10815]:MethodDeclaration[10457-10904]"
  } ],
  "mappings" : [
 {
    "left" : "@SuppressWarnings(\"serial\")",
    "right" : "@SuppressWarnings(\"serial\")",
    "info" : "SingleMemberAnnotation[811-838]:SingleMemberAnnotation[811-838]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[839-845]:Modifier[839-845]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[846-854]:Modifier[846-854]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[855-860]:TYPE_DECLARATION_KIND[855-860]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[926-932]:Modifier[926-932]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[933-939]:Modifier[933-939]"
  }, {
    "left" : "Class<?>[]",
    "right" : "Class<?>[]",
    "info" : "ArrayType[940-950]:ArrayType[940-950]"
  }, {
    "left" : "types",
    "right" : "types",
    "info" : "SimpleName[951-956]:SimpleName[951-956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[959-1336]:Block[959-1336]"
  }, {
    "left" : "return new Class<?>[] {\n            File.class,\n            URL.class,\n            URI.class,\n            Class.class,\n            JavaType.class,\n            Currency.class,\n            Pattern.class,\n            Locale.class,\n            Charset.class,\n            TimeZone.class,\n            InetAddress.class,\n            InetSocketAddress.class,\n        };",
    "right" : "return new Class<?>[] {\n            File.class,\n            URL.class,\n            URI.class,\n            Class.class,\n            JavaType.class,\n            Currency.class,\n            Pattern.class,\n            Locale.class,\n            Charset.class,\n            TimeZone.class,\n            InetAddress.class,\n            InetSocketAddress.class,\n        };",
    "info" : "ReturnStatement[969-1330]:ReturnStatement[969-1330]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[1530-1539]:Modifier[1530-1539]"
  }, {
    "left" : "FromStringDeserializer",
    "right" : "FromStringDeserializer",
    "info" : "SimpleName[1540-1562]:SimpleName[1540-1562]"
  }, {
    "left" : "Class<?> vc",
    "right" : "Class<?> vc",
    "info" : "SingleVariableDeclaration[1563-1574]:SingleVariableDeclaration[1563-1574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1576-1602]:Block[1576-1602]"
  }, {
    "left" : "super(vc);",
    "right" : "super(vc);",
    "info" : "SuperConstructorInvocation[1586-1596]:SuperConstructorInvocation[1586-1596]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1758-1764]:Modifier[1758-1764]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1765-1771]:Modifier[1765-1771]"
  }, {
    "left" : "Std",
    "right" : "Std",
    "info" : "SimpleType[1772-1775]:SimpleType[1772-1775]"
  }, {
    "left" : "findDeserializer",
    "right" : "findDeserializer",
    "info" : "SimpleName[1776-1792]:SimpleName[1776-1792]"
  }, {
    "left" : "Class<?> rawType",
    "right" : "Class<?> rawType",
    "info" : "SingleVariableDeclaration[1793-1809]:SingleVariableDeclaration[1793-1809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1815-2935]:Block[1815-2935]"
  }, {
    "left" : "int kind = 0;",
    "right" : "int kind = 0;",
    "info" : "VariableDeclarationStatement[1825-1838]:VariableDeclarationStatement[1825-1838]"
  }, {
    "left" : "if (rawType == File.class)",
    "right" : "if (rawType == File.class)",
    "info" : "IfStatement[1847-2890]:IfStatement[1847-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1874-1918]:Block[1874-1918]"
  }, {
    "left" : "kind = Std.STD_FILE;",
    "right" : "kind = Std.STD_FILE;",
    "info" : "ExpressionStatement[1888-1908]:ExpressionStatement[1888-1908]"
  }, {
    "left" : "if (rawType == URL.class)",
    "right" : "if (rawType == URL.class)",
    "info" : "IfStatement[1924-2890]:IfStatement[1924-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1950-1993]:Block[1950-1993]"
  }, {
    "left" : "kind = Std.STD_URL;",
    "right" : "kind = Std.STD_URL;",
    "info" : "ExpressionStatement[1964-1983]:ExpressionStatement[1964-1983]"
  }, {
    "left" : "if (rawType == URI.class)",
    "right" : "if (rawType == URI.class)",
    "info" : "IfStatement[1999-2890]:IfStatement[1999-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2025-2068]:Block[2025-2068]"
  }, {
    "left" : "kind = Std.STD_URI;",
    "right" : "kind = Std.STD_URI;",
    "info" : "ExpressionStatement[2039-2058]:ExpressionStatement[2039-2058]"
  }, {
    "left" : "if (rawType == Class.class)",
    "right" : "if (rawType == Class.class)",
    "info" : "IfStatement[2074-2890]:IfStatement[2074-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2102-2147]:Block[2102-2147]"
  }, {
    "left" : "kind = Std.STD_CLASS;",
    "right" : "kind = Std.STD_CLASS;",
    "info" : "ExpressionStatement[2116-2137]:ExpressionStatement[2116-2137]"
  }, {
    "left" : "if (rawType == JavaType.class)",
    "right" : "if (rawType == JavaType.class)",
    "info" : "IfStatement[2153-2890]:IfStatement[2153-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2184-2233]:Block[2184-2233]"
  }, {
    "left" : "kind = Std.STD_JAVA_TYPE;",
    "right" : "kind = Std.STD_JAVA_TYPE;",
    "info" : "ExpressionStatement[2198-2223]:ExpressionStatement[2198-2223]"
  }, {
    "left" : "if (rawType == Currency.class)",
    "right" : "if (rawType == Currency.class)",
    "info" : "IfStatement[2239-2890]:IfStatement[2239-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2270-2318]:Block[2270-2318]"
  }, {
    "left" : "kind = Std.STD_CURRENCY;",
    "right" : "kind = Std.STD_CURRENCY;",
    "info" : "ExpressionStatement[2284-2308]:ExpressionStatement[2284-2308]"
  }, {
    "left" : "if (rawType == Pattern.class)",
    "right" : "if (rawType == Pattern.class)",
    "info" : "IfStatement[2324-2890]:IfStatement[2324-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2354-2401]:Block[2354-2401]"
  }, {
    "left" : "kind = Std.STD_PATTERN;",
    "right" : "kind = Std.STD_PATTERN;",
    "info" : "ExpressionStatement[2368-2391]:ExpressionStatement[2368-2391]"
  }, {
    "left" : "if (rawType == Locale.class)",
    "right" : "if (rawType == Locale.class)",
    "info" : "IfStatement[2407-2890]:IfStatement[2407-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2436-2482]:Block[2436-2482]"
  }, {
    "left" : "kind = Std.STD_LOCALE;",
    "right" : "kind = Std.STD_LOCALE;",
    "info" : "ExpressionStatement[2450-2472]:ExpressionStatement[2450-2472]"
  }, {
    "left" : "if (rawType == Charset.class)",
    "right" : "if (rawType == Charset.class)",
    "info" : "IfStatement[2488-2890]:IfStatement[2488-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2518-2565]:Block[2518-2565]"
  }, {
    "left" : "kind = Std.STD_CHARSET;",
    "right" : "kind = Std.STD_CHARSET;",
    "info" : "ExpressionStatement[2532-2555]:ExpressionStatement[2532-2555]"
  }, {
    "left" : "if (rawType == TimeZone.class)",
    "right" : "if (rawType == TimeZone.class)",
    "info" : "IfStatement[2571-2890]:IfStatement[2571-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2602-2651]:Block[2602-2651]"
  }, {
    "left" : "kind = Std.STD_TIME_ZONE;",
    "right" : "kind = Std.STD_TIME_ZONE;",
    "info" : "ExpressionStatement[2616-2641]:ExpressionStatement[2616-2641]"
  }, {
    "left" : "if (rawType == InetAddress.class)",
    "right" : "if (rawType == InetAddress.class)",
    "info" : "IfStatement[2657-2890]:IfStatement[2657-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2691-2743]:Block[2691-2743]"
  }, {
    "left" : "kind = Std.STD_INET_ADDRESS;",
    "right" : "kind = Std.STD_INET_ADDRESS;",
    "info" : "ExpressionStatement[2705-2733]:ExpressionStatement[2705-2733]"
  }, {
    "left" : "if (rawType == InetSocketAddress.class)",
    "right" : "if (rawType == InetSocketAddress.class)",
    "info" : "IfStatement[2749-2890]:IfStatement[2749-2890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2789-2848]:Block[2789-2848]"
  }, {
    "left" : "kind = Std.STD_INET_SOCKET_ADDRESS;",
    "right" : "kind = Std.STD_INET_SOCKET_ADDRESS;",
    "info" : "ExpressionStatement[2803-2838]:ExpressionStatement[2803-2838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2854-2890]:Block[2854-2890]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[2868-2880]:ReturnStatement[2868-2880]"
  }, {
    "left" : "return new Std(rawType, kind);",
    "right" : "return new Std(rawType, kind);",
    "info" : "ReturnStatement[2899-2929]:ReturnStatement[2899-2929]"
  }, {
    "left" : "@SuppressWarnings(\"unchecked\")",
    "right" : "@SuppressWarnings(\"unchecked\")",
    "info" : "SingleMemberAnnotation[3129-3159]:SingleMemberAnnotation[3129-3159]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3164-3173]:MarkerAnnotation[3164-3173]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3178-3184]:Modifier[3178-3184]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[3185-3186]:SimpleType[3185-3186]"
  }, {
    "left" : "deserialize",
    "right" : "deserialize",
    "info" : "SimpleName[3187-3198]:SimpleName[3187-3198]"
  }, {
    "left" : "JsonParser jp",
    "right" : "JsonParser jp",
    "info" : "SingleVariableDeclaration[3199-3212]:SingleVariableDeclaration[3199-3212]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[3214-3241]:SingleVariableDeclaration[3214-3241]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[3250-3261]:SimpleType[3250-3261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3266-5574]:Block[3266-5574]"
  }, {
    "left" : "if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
    "right" : "if (jp.getCurrentToken() == JsonToken.START_ARRAY && ctxt.isEnabled(DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS))",
    "info" : "IfStatement[3297-3853]:IfStatement[3297-3853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3417-3853]:Block[3417-3853]"
  }, {
    "left" : "jp.nextToken();",
    "right" : "jp.nextToken();",
    "info" : "ExpressionStatement[3431-3446]:ExpressionStatement[3431-3446]"
  }, {
    "left" : "final T value = deserialize(jp, ctxt);",
    "right" : "final T value = deserialize(jp, ctxt);",
    "info" : "VariableDeclarationStatement[3459-3497]:VariableDeclarationStatement[3459-3497]"
  }, {
    "left" : "if (jp.nextToken() != JsonToken.END_ARRAY)",
    "right" : "if (jp.nextToken() != JsonToken.END_ARRAY)",
    "info" : "IfStatement[3510-3817]:IfStatement[3510-3817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3553-3817]:Block[3553-3817]"
  }, {
    "left" : "throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\");",
    "right" : "throw ctxt.wrongTokenException(jp, JsonToken.END_ARRAY, \n                                \"Attempted to unwrap single value array for single '\" + _valueClass.getName() + \"' value but there was more than a single value in the array\");",
    "info" : "ThrowStatement[3571-3803]:ThrowStatement[3571-3803]"
  }, {
    "left" : "return value;",
    "right" : "return value;",
    "info" : "ReturnStatement[3830-3843]:ReturnStatement[3830-3843]"
  }, {
    "left" : "String text = jp.getValueAsString();",
    "right" : "String text = jp.getValueAsString();",
    "info" : "VariableDeclarationStatement[3942-3978]:VariableDeclarationStatement[3942-3978]"
  }, {
    "left" : "if (text != null)",
    "right" : "if (text != null)",
    "info" : "IfStatement[3987-5074]:IfStatement[3987-5074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4005-5074]:Block[4005-5074]"
  }, {
    "left" : "if (text.length() == 0 || (text = text.trim()).length() == 0)",
    "right" : "if (text.length() == 0 || (text = text.trim()).length() == 0)",
    "info" : "IfStatement[4048-4260]:IfStatement[4048-4260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4110-4260]:Block[4110-4260]"
  }, {
    "left" : "return _deserializeFromEmptyString();",
    "right" : "return _deserializeFromEmptyString();",
    "info" : "ReturnStatement[4209-4246]:ReturnStatement[4209-4246]"
  }, {
    "left" : "Exception cause = null;",
    "right" : "Exception cause = null;",
    "info" : "VariableDeclarationStatement[4273-4296]:VariableDeclarationStatement[4273-4296]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4309-4554]:TryStatement[4309-4554]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4313-4472]:Block[4313-4472]"
  }, {
    "left" : "T result = _deserialize(text, ctxt);",
    "right" : "T result = _deserialize(text, ctxt);",
    "info" : "VariableDeclarationStatement[4331-4367]:VariableDeclarationStatement[4331-4367]"
  }, {
    "left" : "if (result != null)",
    "right" : "if (result != null)",
    "info" : "IfStatement[4384-4458]:IfStatement[4384-4458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4404-4458]:Block[4404-4458]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[4426-4440]:ReturnStatement[4426-4440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4510-4554]:Block[4510-4554]"
  }, {
    "left" : "cause = iae;",
    "right" : "cause = iae;",
    "info" : "ExpressionStatement[4528-4540]:ExpressionStatement[4528-4540]"
  }, {
    "left" : "String msg = \"not a valid textual representation\";",
    "right" : "String msg = \"not a valid textual representation\";",
    "info" : "VariableDeclarationStatement[4567-4617]:VariableDeclarationStatement[4567-4617]"
  }, {
    "left" : "if (cause != null)",
    "right" : "if (cause != null)",
    "info" : "IfStatement[4630-4814]:IfStatement[4630-4814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4649-4814]:Block[4649-4814]"
  }, {
    "left" : "String m2 = cause.getMessage();",
    "right" : "String m2 = cause.getMessage();",
    "info" : "VariableDeclarationStatement[4667-4698]:VariableDeclarationStatement[4667-4698]"
  }, {
    "left" : "if (m2 != null)",
    "right" : "if (m2 != null)",
    "info" : "IfStatement[4715-4800]:IfStatement[4715-4800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4731-4800]:Block[4731-4800]"
  }, {
    "left" : "msg = msg + \", problem: \"+m2;",
    "right" : "msg = msg + \", problem: \"+m2;",
    "info" : "ExpressionStatement[4753-4782]:ExpressionStatement[4753-4782]"
  }, {
    "left" : "JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);",
    "right" : "JsonMappingException e = ctxt.weirdStringException(text, _valueClass, msg);",
    "info" : "VariableDeclarationStatement[4827-4902]:VariableDeclarationStatement[4827-4902]"
  }, {
    "left" : "if (cause != null)",
    "right" : "if (cause != null)",
    "info" : "IfStatement[4915-4985]:IfStatement[4915-4985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4934-4985]:Block[4934-4985]"
  }, {
    "left" : "e.initCause(cause);",
    "right" : "e.initCause(cause);",
    "info" : "ExpressionStatement[4952-4971]:ExpressionStatement[4952-4971]"
  }, {
    "left" : "throw e;",
    "right" : "throw e;",
    "info" : "ThrowStatement[4998-5006]:ThrowStatement[4998-5006]"
  }, {
    "left" : "if (jp.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT)",
    "right" : "if (jp.getCurrentToken() == JsonToken.VALUE_EMBEDDED_OBJECT)",
    "info" : "IfStatement[5083-5518]:IfStatement[5083-5518]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5144-5518]:Block[5144-5518]"
  }, {
    "left" : "Object ob = jp.getEmbeddedObject();",
    "right" : "Object ob = jp.getEmbeddedObject();",
    "info" : "VariableDeclarationStatement[5241-5276]:VariableDeclarationStatement[5241-5276]"
  }, {
    "left" : "if (ob == null)",
    "right" : "if (ob == null)",
    "info" : "IfStatement[5289-5349]:IfStatement[5289-5349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5305-5349]:Block[5305-5349]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[5323-5335]:ReturnStatement[5323-5335]"
  }, {
    "left" : "if (_valueClass.isAssignableFrom(ob.getClass()))",
    "right" : "if (_valueClass.isAssignableFrom(ob.getClass()))",
    "info" : "IfStatement[5362-5457]:IfStatement[5362-5457]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5411-5457]:Block[5411-5457]"
  }, {
    "left" : "return (T) ob;",
    "right" : "return (T) ob;",
    "info" : "ReturnStatement[5429-5443]:ReturnStatement[5429-5443]"
  }, {
    "left" : "return _deserializeEmbedded(ob, ctxt);",
    "right" : "return _deserializeEmbedded(ob, ctxt);",
    "info" : "ReturnStatement[5470-5508]:ReturnStatement[5470-5508]"
  }, {
    "left" : "throw ctxt.mappingException(_valueClass);",
    "right" : "throw ctxt.mappingException(_valueClass);",
    "info" : "ThrowStatement[5527-5568]:ThrowStatement[5527-5568]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5588-5597]:Modifier[5588-5597]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[5598-5606]:Modifier[5598-5606]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[5607-5608]:SimpleType[5607-5608]"
  }, {
    "left" : "_deserialize",
    "right" : "_deserialize",
    "info" : "SimpleName[5609-5621]:SimpleName[5609-5621]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[5622-5634]:SingleVariableDeclaration[5622-5634]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[5636-5663]:SingleVariableDeclaration[5636-5663]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5672-5683]:SimpleType[5672-5683]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5690-5699]:Modifier[5690-5699]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[5700-5701]:SimpleType[5700-5701]"
  }, {
    "left" : "_deserializeEmbedded",
    "right" : "_deserializeEmbedded",
    "info" : "SimpleName[5702-5722]:SimpleName[5702-5722]"
  }, {
    "left" : "Object ob",
    "right" : "Object ob",
    "info" : "SingleVariableDeclaration[5723-5732]:SingleVariableDeclaration[5723-5732]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[5734-5761]:SingleVariableDeclaration[5734-5761]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5770-5781]:SimpleType[5770-5781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5782-5989]:Block[5782-5989]"
  }, {
    "left" : "throw ctxt.mappingException(\"Don't know how to convert embedded Object of type %s into %s\",\n                ob.getClass().getName(), _valueClass.getName());",
    "right" : "throw ctxt.mappingException(\"Don't know how to convert embedded Object of type %s into %s\",\n                ob.getClass().getName(), _valueClass.getName());",
    "info" : "ThrowStatement[5827-5983]:ThrowStatement[5827-5983]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5995-6004]:Modifier[5995-6004]"
  }, {
    "left" : "T",
    "right" : "T",
    "info" : "SimpleType[6005-6006]:SimpleType[6005-6006]"
  }, {
    "left" : "_deserializeFromEmptyString",
    "right" : "_deserializeFromEmptyString",
    "info" : "SimpleName[6007-6034]:SimpleName[6007-6034]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[6044-6055]:SimpleType[6044-6055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6056-6084]:Block[6056-6084]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6066-6078]:ReturnStatement[6066-6078]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6426-6432]:Modifier[6426-6432]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6433-6439]:Modifier[6433-6439]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6440-6445]:TYPE_DECLARATION_KIND[6440-6445]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7204-7213]:Modifier[7204-7213]"
  }, {
    "left" : "Std",
    "right" : "Std",
    "info" : "SimpleName[7214-7217]:SimpleName[7214-7217]"
  }, {
    "left" : "Class<?> valueType",
    "right" : "Class<?> valueType",
    "info" : "SingleVariableDeclaration[7218-7236]:SingleVariableDeclaration[7218-7236]"
  }, {
    "left" : "int kind",
    "right" : "int kind",
    "info" : "SingleVariableDeclaration[7238-7246]:SingleVariableDeclaration[7238-7246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7248-7315]:Block[7248-7315]"
  }, {
    "left" : "super(valueType);",
    "right" : "super(valueType);",
    "info" : "SuperConstructorInvocation[7262-7279]:SuperConstructorInvocation[7262-7279]"
  }, {
    "left" : "_kind = kind;",
    "right" : "_kind = kind;",
    "info" : "ExpressionStatement[7292-7305]:ExpressionStatement[7292-7305]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7325-7334]:MarkerAnnotation[7325-7334]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[7343-7352]:Modifier[7343-7352]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[7353-7359]:SimpleType[7353-7359]"
  }, {
    "left" : "_deserialize",
    "right" : "_deserialize",
    "info" : "SimpleName[7360-7372]:SimpleName[7360-7372]"
  }, {
    "left" : "String value",
    "right" : "String value",
    "info" : "SingleVariableDeclaration[7373-7385]:SingleVariableDeclaration[7373-7385]"
  }, {
    "left" : "DeserializationContext ctxt",
    "right" : "DeserializationContext ctxt",
    "info" : "SingleVariableDeclaration[7387-7414]:SingleVariableDeclaration[7387-7414]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[7423-7434]:SimpleType[7423-7434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7443-10447]:Block[7443-10447]"
  }, {
    "left" : "switch (_kind) {\n            case STD_FILE:\n                return new File(value);\n            case STD_URL:\n                return new URL(value);\n            case STD_URI:\n                return URI.create(value);\n            case STD_CLASS:\n                try {\n                    return ctxt.findClass(value);\n                } catch (Exception e) {\n                    throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));\n                }\n            case STD_JAVA_TYPE:\n                return ctxt.getTypeFactory().constructFromCanonical(value);\n            case STD_CURRENCY:\n                // will throw IAE if unknown:\n                return Currency.getInstance(value);\n            case STD_PATTERN:\n                // will throw IAE (or its subclass) if malformed\n                return Pattern.compile(value);\n            case STD_LOCALE:\n                {\n                    int ix = value.indexOf('_');\n                    if (ix < 0) { // single argument\n                        return new Locale(value);\n                    }\n                    String first = value.substring(0, ix);\n                    value = value.substring(ix+1);\n                    ix = value.indexOf('_');\n                    if (ix < 0) { // two pieces\n                        return new Locale(first, value);\n                    }\n                    String second = value.substring(0, ix);\n                    return new Locale(first, second, value.substring(ix+1));\n                }\n            case STD_CHARSET:\n                return Charset.forName(value);\n            case STD_TIME_ZONE:\n                return TimeZone.getTimeZone(value);\n            case STD_INET_ADDRESS:\n                return InetAddress.getByName(value);\n            case STD_INET_SOCKET_ADDRESS:\n                if (value.startsWith(\"[\")) {\n                    // bracketed IPv6 (with port number)\n\n                    int i = value.lastIndexOf(']');\n                    if (i == -1) {\n                        throw new InvalidFormatException(\"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);\n                    }\n\n                    int j = value.indexOf(':', i);\n                    int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n                    return new InetSocketAddress(value.substring(0, i + 1), port);\n                } else {\n                    int ix = value.indexOf(':');\n                    if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {\n                        // host:port\n                        int port = Integer.parseInt(value.substring(ix+1));\n                        return new InetSocketAddress(value.substring(0, ix), port);\n                    }\n                    // host or unbracketed IPv6, without port number\n                    return new InetSocketAddress(value, 0);\n                }\n            }",
    "right" : "switch (_kind) {\n            case STD_FILE:\n                return new File(value);\n            case STD_URL:\n                return new URL(value);\n            case STD_URI:\n                return URI.create(value);\n            case STD_CLASS:\n                try {\n                    return ctxt.findClass(value);\n                } catch (Exception e) {\n                    throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));\n                }\n            case STD_JAVA_TYPE:\n                return ctxt.getTypeFactory().constructFromCanonical(value);\n            case STD_CURRENCY:\n                // will throw IAE if unknown:\n                return Currency.getInstance(value);\n            case STD_PATTERN:\n                // will throw IAE (or its subclass) if malformed\n                return Pattern.compile(value);\n            case STD_LOCALE:\n                {\n                    int ix = value.indexOf('_');\n                    if (ix < 0) { // single argument\n                        return new Locale(value);\n                    }\n                    String first = value.substring(0, ix);\n                    value = value.substring(ix+1);\n                    ix = value.indexOf('_');\n                    if (ix < 0) { // two pieces\n                        return new Locale(first, value);\n                    }\n                    String second = value.substring(0, ix);\n                    return new Locale(first, second, value.substring(ix+1));\n                }\n            case STD_CHARSET:\n                return Charset.forName(value);\n            case STD_TIME_ZONE:\n                return TimeZone.getTimeZone(value);\n            case STD_INET_ADDRESS:\n                return InetAddress.getByName(value);\n            case STD_INET_SOCKET_ADDRESS:\n                if (value.startsWith(\"[\")) {\n                    // bracketed IPv6 (with port number)\n\n                    int i = value.lastIndexOf(']');\n                    if (i == -1) {\n                        throw new InvalidFormatException(\"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);\n                    }\n\n                    int j = value.indexOf(':', i);\n                    int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;\n                    return new InetSocketAddress(value.substring(0, i + 1), port);\n                } else {\n                    int ix = value.indexOf(':');\n                    if (ix >= 0 && value.indexOf(':', ix + 1) < 0) {\n                        // host:port\n                        int port = Integer.parseInt(value.substring(ix+1));\n                        return new InetSocketAddress(value.substring(0, ix), port);\n                    }\n                    // host or unbracketed IPv6, without port number\n                    return new InetSocketAddress(value, 0);\n                }\n            }",
    "info" : "SwitchStatement[7457-10387]:SwitchStatement[7457-10387]"
  }, {
    "left" : "case STD_FILE:",
    "right" : "case STD_FILE:",
    "info" : "SwitchCase[7486-7500]:SwitchCase[7486-7500]"
  }, {
    "left" : "return new File(value);",
    "right" : "return new File(value);",
    "info" : "ReturnStatement[7517-7540]:ReturnStatement[7517-7540]"
  }, {
    "left" : "case STD_URL:",
    "right" : "case STD_URL:",
    "info" : "SwitchCase[7553-7566]:SwitchCase[7553-7566]"
  }, {
    "left" : "return new URL(value);",
    "right" : "return new URL(value);",
    "info" : "ReturnStatement[7583-7605]:ReturnStatement[7583-7605]"
  }, {
    "left" : "case STD_URI:",
    "right" : "case STD_URI:",
    "info" : "SwitchCase[7618-7631]:SwitchCase[7618-7631]"
  }, {
    "left" : "return URI.create(value);",
    "right" : "return URI.create(value);",
    "info" : "ReturnStatement[7648-7673]:ReturnStatement[7648-7673]"
  }, {
    "left" : "case STD_CLASS:",
    "right" : "case STD_CLASS:",
    "info" : "SwitchCase[7686-7701]:SwitchCase[7686-7701]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[7718-7926]:TryStatement[7718-7926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7722-7791]:Block[7722-7791]"
  }, {
    "left" : "return ctxt.findClass(value);",
    "right" : "return ctxt.findClass(value);",
    "info" : "ReturnStatement[7744-7773]:ReturnStatement[7744-7773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7812-7926]:Block[7812-7926]"
  }, {
    "left" : "throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));",
    "right" : "throw ctxt.instantiationException(_valueClass, ClassUtil.getRootCause(e));",
    "info" : "ThrowStatement[7834-7908]:ThrowStatement[7834-7908]"
  }, {
    "left" : "case STD_JAVA_TYPE:",
    "right" : "case STD_JAVA_TYPE:",
    "info" : "SwitchCase[7939-7958]:SwitchCase[7939-7958]"
  }, {
    "left" : "return ctxt.getTypeFactory().constructFromCanonical(value);",
    "right" : "return ctxt.getTypeFactory().constructFromCanonical(value);",
    "info" : "ReturnStatement[7975-8034]:ReturnStatement[7975-8034]"
  }, {
    "left" : "case STD_CURRENCY:",
    "right" : "case STD_CURRENCY:",
    "info" : "SwitchCase[8047-8065]:SwitchCase[8047-8065]"
  }, {
    "left" : "return Currency.getInstance(value);",
    "right" : "return Currency.getInstance(value);",
    "info" : "ReturnStatement[8128-8163]:ReturnStatement[8128-8163]"
  }, {
    "left" : "case STD_PATTERN:",
    "right" : "case STD_PATTERN:",
    "info" : "SwitchCase[8176-8193]:SwitchCase[8176-8193]"
  }, {
    "left" : "return Pattern.compile(value);",
    "right" : "return Pattern.compile(value);",
    "info" : "ReturnStatement[8275-8305]:ReturnStatement[8275-8305]"
  }, {
    "left" : "case STD_LOCALE:",
    "right" : "case STD_LOCALE:",
    "info" : "SwitchCase[8318-8334]:SwitchCase[8318-8334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8351-8963]:Block[8351-8963]"
  }, {
    "left" : "int ix = value.indexOf('_');",
    "right" : "int ix = value.indexOf('_');",
    "info" : "VariableDeclarationStatement[8373-8401]:VariableDeclarationStatement[8373-8401]"
  }, {
    "left" : "if (ix < 0)",
    "right" : "if (ix < 0)",
    "info" : "IfStatement[8422-8526]:IfStatement[8422-8526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8434-8526]:Block[8434-8526]"
  }, {
    "left" : "return new Locale(value);",
    "right" : "return new Locale(value);",
    "info" : "ReturnStatement[8479-8504]:ReturnStatement[8479-8504]"
  }, {
    "left" : "String first = value.substring(0, ix);",
    "right" : "String first = value.substring(0, ix);",
    "info" : "VariableDeclarationStatement[8547-8585]:VariableDeclarationStatement[8547-8585]"
  }, {
    "left" : "value = value.substring(ix+1);",
    "right" : "value = value.substring(ix+1);",
    "info" : "ExpressionStatement[8606-8636]:ExpressionStatement[8606-8636]"
  }, {
    "left" : "ix = value.indexOf('_');",
    "right" : "ix = value.indexOf('_');",
    "info" : "ExpressionStatement[8657-8681]:ExpressionStatement[8657-8681]"
  }, {
    "left" : "if (ix < 0)",
    "right" : "if (ix < 0)",
    "info" : "IfStatement[8702-8808]:IfStatement[8702-8808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8714-8808]:Block[8714-8808]"
  }, {
    "left" : "return new Locale(first, value);",
    "right" : "return new Locale(first, value);",
    "info" : "ReturnStatement[8754-8786]:ReturnStatement[8754-8786]"
  }, {
    "left" : "String second = value.substring(0, ix);",
    "right" : "String second = value.substring(0, ix);",
    "info" : "VariableDeclarationStatement[8829-8868]:VariableDeclarationStatement[8829-8868]"
  }, {
    "left" : "return new Locale(first, second, value.substring(ix+1));",
    "right" : "return new Locale(first, second, value.substring(ix+1));",
    "info" : "ReturnStatement[8889-8945]:ReturnStatement[8889-8945]"
  }, {
    "left" : "case STD_CHARSET:",
    "right" : "case STD_CHARSET:",
    "info" : "SwitchCase[8976-8993]:SwitchCase[8976-8993]"
  }, {
    "left" : "return Charset.forName(value);",
    "right" : "return Charset.forName(value);",
    "info" : "ReturnStatement[9010-9040]:ReturnStatement[9010-9040]"
  }, {
    "left" : "case STD_TIME_ZONE:",
    "right" : "case STD_TIME_ZONE:",
    "info" : "SwitchCase[9053-9072]:SwitchCase[9053-9072]"
  }, {
    "left" : "return TimeZone.getTimeZone(value);",
    "right" : "return TimeZone.getTimeZone(value);",
    "info" : "ReturnStatement[9089-9124]:ReturnStatement[9089-9124]"
  }, {
    "left" : "case STD_INET_ADDRESS:",
    "right" : "case STD_INET_ADDRESS:",
    "info" : "SwitchCase[9137-9159]:SwitchCase[9137-9159]"
  }, {
    "left" : "return InetAddress.getByName(value);",
    "right" : "return InetAddress.getByName(value);",
    "info" : "ReturnStatement[9176-9212]:ReturnStatement[9176-9212]"
  }, {
    "left" : "case STD_INET_SOCKET_ADDRESS:",
    "right" : "case STD_INET_SOCKET_ADDRESS:",
    "info" : "SwitchCase[9225-9254]:SwitchCase[9225-9254]"
  }, {
    "left" : "if (value.startsWith(\"[\"))",
    "right" : "if (value.startsWith(\"[\"))",
    "info" : "IfStatement[9271-10373]:IfStatement[9271-10373]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9298-9882]:Block[9298-9882]"
  }, {
    "left" : "int i = value.lastIndexOf(']');",
    "right" : "int i = value.lastIndexOf(']');",
    "info" : "VariableDeclarationStatement[9378-9409]:VariableDeclarationStatement[9378-9409]"
  }, {
    "left" : "if (i == -1)",
    "right" : "if (i == -1)",
    "info" : "IfStatement[9430-9643]:IfStatement[9430-9643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9443-9643]:Block[9443-9643]"
  }, {
    "left" : "throw new InvalidFormatException(\"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);",
    "right" : "throw new InvalidFormatException(\"Bracketed IPv6 address must contain closing bracket\",\n                                value, InetSocketAddress.class);",
    "info" : "ThrowStatement[9469-9621]:ThrowStatement[9469-9621]"
  }, {
    "left" : "int j = value.indexOf(':', i);",
    "right" : "int j = value.indexOf(':', i);",
    "info" : "VariableDeclarationStatement[9665-9695]:VariableDeclarationStatement[9665-9695]"
  }, {
    "left" : "int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;",
    "right" : "int port = j > -1 ? Integer.parseInt(value.substring(j + 1)) : 0;",
    "info" : "VariableDeclarationStatement[9716-9781]:VariableDeclarationStatement[9716-9781]"
  }, {
    "left" : "return new InetSocketAddress(value.substring(0, i + 1), port);",
    "right" : "return new InetSocketAddress(value.substring(0, i + 1), port);",
    "info" : "ReturnStatement[9802-9864]:ReturnStatement[9802-9864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9888-10373]:Block[9888-10373]"
  }, {
    "left" : "int ix = value.indexOf(':');",
    "right" : "int ix = value.indexOf(':');",
    "info" : "VariableDeclarationStatement[9910-9938]:VariableDeclarationStatement[9910-9938]"
  }, {
    "left" : "if (ix >= 0 && value.indexOf(':', ix + 1) < 0)",
    "right" : "if (ix >= 0 && value.indexOf(':', ix + 1) < 0)",
    "info" : "IfStatement[9959-10226]:IfStatement[9959-10226]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10006-10226]:Block[10006-10226]"
  }, {
    "left" : "int port = Integer.parseInt(value.substring(ix+1));",
    "right" : "int port = Integer.parseInt(value.substring(ix+1));",
    "info" : "VariableDeclarationStatement[10069-10120]:VariableDeclarationStatement[10069-10120]"
  }, {
    "left" : "return new InetSocketAddress(value.substring(0, ix), port);",
    "right" : "return new InetSocketAddress(value.substring(0, ix), port);",
    "info" : "ReturnStatement[10145-10204]:ReturnStatement[10145-10204]"
  }, {
    "left" : "return new InetSocketAddress(value, 0);",
    "right" : "return new InetSocketAddress(value, 0);",
    "info" : "ReturnStatement[10316-10355]:ReturnStatement[10316-10355]"
  }, {
    "left" : "throw new IllegalArgumentException();",
    "right" : "throw new IllegalArgumentException();",
    "info" : "ThrowStatement[10400-10437]:ThrowStatement[10400-10437]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10457-10466]:MarkerAnnotation[10457-10466]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[10475-10484]:Modifier[10475-10484]"
  }, {
    "left" : "Object",
    "right" : "Object",
    "info" : "SimpleType[10485-10491]:SimpleType[10485-10491]"
  }, {
    "left" : "_deserializeFromEmptyString",
    "right" : "_deserializeFromEmptyString",
    "info" : "SimpleName[10492-10519]:SimpleName[10492-10519]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10529-10540]:SimpleType[10529-10540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10541-10815]:Block[10541-10904]"
  }, {
    "left" : "if (_kind == STD_URI)",
    "right" : "if (_kind == STD_URI)",
    "info" : "IfStatement[10623-10699]:IfStatement[10623-10699]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10645-10699]:Block[10645-10699]"
  }, {
    "left" : "return URI.create(\"\");",
    "right" : "return URI.create(\"\");",
    "info" : "ReturnStatement[10663-10685]:ReturnStatement[10663-10685]"
  }, {
    "left" : "return super._deserializeFromEmptyString();",
    "right" : "return super._deserializeFromEmptyString();",
    "info" : "ReturnStatement[10762-10805]:ReturnStatement[10851-10894]"
  } ]
}