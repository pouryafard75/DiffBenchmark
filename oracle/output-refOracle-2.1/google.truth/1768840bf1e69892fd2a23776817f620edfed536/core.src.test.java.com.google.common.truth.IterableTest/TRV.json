{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public void hasSize()",
      "right" : "public void hasSize()",
      "info" : "MethodDeclaration[1295-1384]:MethodDeclaration[1236-1325]"
    }, {
      "left" : "public void hasSizeZero()",
      "right" : "public void hasSizeZero()",
      "info" : "MethodDeclaration[1388-1474]:MethodDeclaration[1329-1415]"
    }, {
      "left" : "public void hasSizeFails()",
      "right" : "public void hasSizeFails()",
      "info" : "MethodDeclaration[1478-1741]:MethodDeclaration[1419-1682]"
    }, {
      "left" : "public void hasSizeNegative()",
      "right" : "public void hasSizeNegative()",
      "info" : "MethodDeclaration[1745-1925]:MethodDeclaration[1686-1866]"
    }, {
      "left" : "public Iterator<Object> iterator()",
      "right" : "public Iterator<Object> iterator()",
      "info" : "MethodDeclaration[9770-9867]:MethodDeclaration[9534-9631]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[9879-9986]:MethodDeclaration[9643-9750]"
    }, {
      "left" : "public void arrayContainsExactly()",
      "right" : "public void arrayContainsExactly()",
      "info" : "MethodDeclaration[12276-12471]:MethodDeclaration[12043-12238]"
    }, {
      "left" : "HashCodeThrower",
      "right" : "HashCodeThrower",
      "info" : "TypeDeclaration[14550-14852]:TypeDeclaration[14285-14587]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[14593-14678]:MethodDeclaration[14328-14413]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[14684-14776]:MethodDeclaration[14419-14511]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[14782-14848]:MethodDeclaration[14517-14583]"
    }, {
      "left" : "public void iterableContainsExactlyElementsInErrorMessageIsOrdered()",
      "right" : "public void iterableContainsExactlyElementsInErrorMessageIsOrdered()",
      "info" : "MethodDeclaration[14856-15333]:MethodDeclaration[14591-15068]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1325-1384]:Block[1266-1325]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);",
      "info" : "ExpressionStatement[1331-1380]:ExpressionStatement[1272-1321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1422-1474]:Block[1363-1415]"
    }, {
      "left" : "assertThat(ImmutableList.of()).hasSize(0);",
      "right" : "assertThat(ImmutableList.of()).hasSize(0);",
      "info" : "ExpressionStatement[1428-1470]:ExpressionStatement[1369-1411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1513-1741]:Block[1454-1682]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1519-1737]:TryStatement[1460-1678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1523-1600]:Block[1464-1541]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(4);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(4);",
      "info" : "ExpressionStatement[1531-1580]:ExpressionStatement[1472-1521]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[1587-1594]:ExpressionStatement[1528-1535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1633-1737]:Block[1574-1678]"
    }, {
      "left" : "assertThat(expected).hasMessage(\"Not true that <[1, 2, 3]> has a size of <4>. It is <3>\");",
      "right" : "assertThat(expected).hasMessage(\"Not true that <[1, 2, 3]> has a size of <4>. It is <3>\");",
      "info" : "ExpressionStatement[1641-1731]:ExpressionStatement[1582-1672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1783-1925]:Block[1724-1866]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1789-1921]:TryStatement[1730-1862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1793-1871]:Block[1734-1812]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);",
      "info" : "ExpressionStatement[1801-1851]:ExpressionStatement[1742-1792]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[1858-1865]:ExpressionStatement[1799-1806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1914-1921]:Block[1855-1862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9825-9867]:Block[9589-9631]"
    }, {
      "left" : "return iterator;",
      "right" : "return iterator;",
      "info" : "ReturnStatement[9839-9855]:ReturnStatement[9603-9619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9924-9986]:Block[9688-9750]"
    }, {
      "left" : "return Iterables.toString(iterable);",
      "right" : "return Iterables.toString(iterable);",
      "info" : "ReturnStatement[9938-9974]:ReturnStatement[9702-9738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12319-12471]:Block[12086-12238]"
    }, {
      "left" : "ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");",
      "right" : "ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");",
      "info" : "VariableDeclarationStatement[12325-12385]:VariableDeclarationStatement[12092-12152]"
    }, {
      "left" : "String[] array = {\"a\", \"b\"};",
      "right" : "String[] array = {\"a\", \"b\"};",
      "info" : "VariableDeclarationStatement[12390-12418]:VariableDeclarationStatement[12157-12185]"
    }, {
      "left" : "assertThat(iterable).containsExactly(array);",
      "right" : "assertThat(iterable).containsExactly(array);",
      "info" : "ExpressionStatement[12423-12467]:ExpressionStatement[12190-12234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14643-14678]:Block[14378-14413]"
    }, {
      "left" : "return this == other;",
      "right" : "return this == other;",
      "info" : "ReturnStatement[14651-14672]:ReturnStatement[14386-14407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14720-14776]:Block[14455-14511]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[14728-14770]:ThrowStatement[14463-14505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14821-14848]:Block[14556-14583]"
    }, {
      "left" : "return \"HCT\";",
      "right" : "return \"HCT\";",
      "info" : "ReturnStatement[14829-14842]:ReturnStatement[14564-14577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14933-15333]:Block[14668-15068]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14939-15296]:TryStatement[14674-15031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14943-15038]:Block[14678-14773]"
    }, {
      "left" : "assertThat(asList(\"foo OR bar\")).containsExactlyElementsIn(asList(\"foo\", \"bar\"));",
      "right" : "assertThat(asList(\"foo OR bar\")).containsExactlyElementsIn(asList(\"foo\", \"bar\"));",
      "info" : "ExpressionStatement[14951-15032]:ExpressionStatement[14686-14767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15064-15296]:Block[14799-15031]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[foo OR bar]> contains exactly <[foo, bar]>. \"\n                  + \"It is missing <[foo, bar]> and has unexpected items <[foo OR bar]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[foo OR bar]> contains exactly <[foo, bar]>. \"\n                  + \"It is missing <[foo, bar]> and has unexpected items <[foo OR bar]>\");",
      "info" : "ExpressionStatement[15072-15276]:ExpressionStatement[14807-15011]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15283-15290]:ReturnStatement[15018-15025]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[15301-15329]:ExpressionStatement[15036-15064]"
    } ]
  },
  "interFileMappings" : { }
}