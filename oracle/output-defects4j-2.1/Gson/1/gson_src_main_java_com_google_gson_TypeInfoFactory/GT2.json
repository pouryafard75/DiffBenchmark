{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypeInfoFactory",
      "right" : "TypeInfoFactory",
      "info" : "TypeDeclaration[851-5527]:TypeDeclaration[851-7397]"
    }, {
      "left" : "private TypeInfoFactory()",
      "right" : "private TypeInfoFactory()",
      "info" : "MethodDeclaration[1013-1108]:MethodDeclaration[1013-1108]"
    }, {
      "left" : "public static TypeInfoArray getTypeInfoForArray(Type type)",
      "right" : "public static TypeInfoArray getTypeInfoForArray(Type type)",
      "info" : "MethodDeclaration[1112-1270]:MethodDeclaration[1112-1270]"
    }, {
      "left" : "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF)",
      "right" : "public static TypeInfo getTypeInfoForField(Field f, Type typeDefiningF)",
      "info" : "MethodDeclaration[1274-1931]:MethodDeclaration[1274-1931]"
    }, {
      "left" : "private static Type getActualType(\n      Type typeToEvaluate, Type parentType, Class<?> rawParentClass)",
      "right" : "private static Type getActualType(\n      Type typeToEvaluate, Type parentType, Class<?> rawParentClass)",
      "info" : "MethodDeclaration[1935-4761]:MethodDeclaration[1935-5148]"
    }, {
      "left" : "private static Type[] extractRealTypes(\n      Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass)",
      "right" : "private static Type[] extractRealTypes(\n      Type[] actualTypeArguments, Type parentType, Class<?> rawParentClass)",
      "info" : "MethodDeclaration[4805-5213]:MethodDeclaration[6675-7083]"
    }, {
      "left" : "private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type)",
      "right" : "private static int getIndex(TypeVariable<?>[] types, TypeVariable<?> type)",
      "info" : "MethodDeclaration[5217-5525]:MethodDeclaration[7087-7395]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1039-1108]:Block[1039-1108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1171-1270]:Block[1171-1270]"
    }, {
      "left" : "Preconditions.checkArgument(TypeUtils.isArray(type));",
      "right" : "Preconditions.checkArgument(TypeUtils.isArray(type));",
      "info" : "ExpressionStatement[1177-1230]:ExpressionStatement[1177-1230]"
    }, {
      "left" : "return new TypeInfoArray(type);",
      "right" : "return new TypeInfoArray(type);",
      "info" : "ReturnStatement[1235-1266]:ReturnStatement[1235-1266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1712-1931]:Block[1712-1931]"
    }, {
      "left" : "Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);",
      "right" : "Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);",
      "info" : "VariableDeclarationStatement[1718-1780]:VariableDeclarationStatement[1718-1780]"
    }, {
      "left" : "Type type = f.getGenericType();",
      "right" : "Type type = f.getGenericType();",
      "info" : "VariableDeclarationStatement[1785-1816]:VariableDeclarationStatement[1785-1816]"
    }, {
      "left" : "Type actualType = getActualType(type, typeDefiningF, classDefiningF);",
      "right" : "Type actualType = getActualType(type, typeDefiningF, classDefiningF);",
      "info" : "VariableDeclarationStatement[1821-1890]:VariableDeclarationStatement[1821-1890]"
    }, {
      "left" : "return new TypeInfo(actualType);",
      "right" : "return new TypeInfo(actualType);",
      "info" : "ReturnStatement[1895-1927]:ReturnStatement[1895-1927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2039-4761]:Block[2039-5148]"
    }, {
      "left" : "if (typeToEvaluate instanceof Class<?>)",
      "right" : "if (typeToEvaluate instanceof Class<?>)",
      "info" : "IfStatement[2045-4757]:IfStatement[2045-5144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2085-2121]:Block[2085-2121]"
    }, {
      "left" : "return typeToEvaluate;",
      "right" : "return typeToEvaluate;",
      "info" : "ReturnStatement[2093-2115]:ReturnStatement[2093-2115]"
    }, {
      "left" : "if (typeToEvaluate instanceof ParameterizedType)",
      "right" : "if (typeToEvaluate instanceof ParameterizedType)",
      "info" : "IfStatement[2127-4757]:IfStatement[2127-5144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2176-2555]:Block[2176-2555]"
    }, {
      "left" : "ParameterizedType castedType = (ParameterizedType) typeToEvaluate;",
      "right" : "ParameterizedType castedType = (ParameterizedType) typeToEvaluate;",
      "info" : "VariableDeclarationStatement[2184-2250]:VariableDeclarationStatement[2184-2250]"
    }, {
      "left" : "Type owner = castedType.getOwnerType();",
      "right" : "Type owner = castedType.getOwnerType();",
      "info" : "VariableDeclarationStatement[2257-2296]:VariableDeclarationStatement[2257-2296]"
    }, {
      "left" : "Type[] actualTypeParameters =\n          extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass);",
      "right" : "Type[] actualTypeParameters =\n          extractRealTypes(castedType.getActualTypeArguments(), parentType, rawParentClass);",
      "info" : "VariableDeclarationStatement[2303-2425]:VariableDeclarationStatement[2303-2425]"
    }, {
      "left" : "Type rawType = castedType.getRawType();",
      "right" : "Type rawType = castedType.getRawType();",
      "info" : "VariableDeclarationStatement[2432-2471]:VariableDeclarationStatement[2432-2471]"
    }, {
      "left" : "return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner);",
      "right" : "return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner);",
      "info" : "ReturnStatement[2478-2549]:ReturnStatement[2478-2549]"
    }, {
      "left" : "if (typeToEvaluate instanceof GenericArrayType)",
      "right" : "if (typeToEvaluate instanceof GenericArrayType)",
      "info" : "IfStatement[2561-4757]:IfStatement[2561-5144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2609-3079]:Block[2609-3079]"
    }, {
      "left" : "GenericArrayType castedType = (GenericArrayType) typeToEvaluate;",
      "right" : "GenericArrayType castedType = (GenericArrayType) typeToEvaluate;",
      "info" : "VariableDeclarationStatement[2617-2681]:VariableDeclarationStatement[2617-2681]"
    }, {
      "left" : "Type componentType = castedType.getGenericComponentType();",
      "right" : "Type componentType = castedType.getGenericComponentType();",
      "info" : "VariableDeclarationStatement[2688-2746]:VariableDeclarationStatement[2688-2746]"
    }, {
      "left" : "Type actualType = getActualType(componentType, parentType, rawParentClass);",
      "right" : "Type actualType = getActualType(componentType, parentType, rawParentClass);",
      "info" : "VariableDeclarationStatement[2753-2828]:VariableDeclarationStatement[2753-2828]"
    }, {
      "left" : "if (componentType.equals(actualType))",
      "right" : "if (componentType.equals(actualType))",
      "info" : "IfStatement[2835-2909]:IfStatement[2835-2909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2873-2909]:Block[2873-2909]"
    }, {
      "left" : "return castedType;",
      "right" : "return castedType;",
      "info" : "ReturnStatement[2883-2901]:ReturnStatement[2883-2901]"
    }, {
      "left" : "return actualType instanceof Class<?> ?\n          TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))\n          : new GenericArrayTypeImpl(actualType);",
      "right" : "return actualType instanceof Class<?> ?\n          TypeUtils.wrapWithArray(TypeUtils.toRawClass(actualType))\n          : new GenericArrayTypeImpl(actualType);",
      "info" : "ReturnStatement[2916-3073]:ReturnStatement[2916-3073]"
    }, {
      "left" : "if (typeToEvaluate instanceof TypeVariable<?>)",
      "right" : "if (typeToEvaluate instanceof TypeVariable<?>)",
      "info" : "IfStatement[3085-4757]:IfStatement[3085-5144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3132-4355]:Block[3132-4742]"
    }, {
      "left" : "if (parentType instanceof ParameterizedType)",
      "right" : "if (parentType instanceof ParameterizedType)",
      "info" : "IfStatement[3140-4077]:IfStatement[3140-4464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3185-4077]:Block[3185-4075]"
    }, {
      "left" : "TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;",
      "right" : "TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;",
      "info" : "VariableDeclarationStatement[3598-3667]:VariableDeclarationStatement[3598-3667]"
    }, {
      "left" : "TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();",
      "right" : "TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();",
      "info" : "VariableDeclarationStatement[3676-3750]:VariableDeclarationStatement[3676-3750]"
    }, {
      "left" : "ParameterizedType objParameterizedType = (ParameterizedType) parentType;",
      "right" : "ParameterizedType objParameterizedType = (ParameterizedType) parentType;",
      "info" : "VariableDeclarationStatement[3759-3831]:VariableDeclarationStatement[3759-3831]"
    }, {
      "left" : "int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);",
      "right" : "int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);",
      "info" : "VariableDeclarationStatement[3840-3920]:VariableDeclarationStatement[3840-3920]"
    }, {
      "left" : "Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();",
      "right" : "Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[3929-4004]:VariableDeclarationStatement[3929-4004]"
    }, {
      "left" : "return actualTypeArguments[indexOfActualTypeArgument];",
      "right" : "return actualTypeArguments[indexOfActualTypeArgument];",
      "info" : "ReturnStatement[4013-4067]:ReturnStatement[4013-4067]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n          + \".\\n Are you missing the use of TypeToken idiom?\\n See \"\n          + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");",
      "right" : "throw new UnsupportedOperationException(\"Expecting parameterized type, got \" + parentType\n          + \".\\n Are you missing the use of TypeToken idiom?\\n See \"\n          + \"http://sites.google.com/site/gson/gson-user-guide#TOC-Serializing-and-Deserializing-Gener\");",
      "info" : "ThrowStatement[4085-4349]:ThrowStatement[4472-4736]"
    }, {
      "left" : "if (typeToEvaluate instanceof WildcardType)",
      "right" : "if (typeToEvaluate instanceof WildcardType)",
      "info" : "IfStatement[4361-4757]:IfStatement[4748-5144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4405-4563]:Block[4792-4950]"
    }, {
      "left" : "WildcardType castedType = (WildcardType) typeToEvaluate;",
      "right" : "WildcardType castedType = (WildcardType) typeToEvaluate;",
      "info" : "VariableDeclarationStatement[4413-4469]:VariableDeclarationStatement[4800-4856]"
    }, {
      "left" : "return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);",
      "right" : "return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);",
      "info" : "ReturnStatement[4476-4557]:ReturnStatement[4863-4944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4569-4757]:Block[4956-5144]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \"\n          + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\");",
      "right" : "throw new IllegalArgumentException(\"Type \\'\" + typeToEvaluate + \"\\' is not a Class, \"\n          + \"ParameterizedType, GenericArrayType or TypeVariable. Can't extract type.\");",
      "info" : "ThrowStatement[4577-4751]:ThrowStatement[4964-5138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4921-5213]:Block[6791-7083]"
    }, {
      "left" : "Preconditions.checkNotNull(actualTypeArguments);",
      "right" : "Preconditions.checkNotNull(actualTypeArguments);",
      "info" : "ExpressionStatement[4927-4975]:ExpressionStatement[6797-6845]"
    }, {
      "left" : "Type[] retTypes = new Type[actualTypeArguments.length];",
      "right" : "Type[] retTypes = new Type[actualTypeArguments.length];",
      "info" : "VariableDeclarationStatement[4981-5036]:VariableDeclarationStatement[6851-6906]"
    }, {
      "left" : "for (int i = 0; i < actualTypeArguments.length; ++i)",
      "right" : "for (int i = 0; i < actualTypeArguments.length; ++i)",
      "info" : "ForStatement[5041-5188]:ForStatement[6911-7058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5094-5188]:Block[6964-7058]"
    }, {
      "left" : "retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);",
      "right" : "retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);",
      "info" : "ExpressionStatement[5102-5182]:ExpressionStatement[6972-7052]"
    }, {
      "left" : "return retTypes;",
      "right" : "return retTypes;",
      "info" : "ReturnStatement[5193-5209]:ReturnStatement[7063-7079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5292-5525]:Block[7162-7395]"
    }, {
      "left" : "for (int i = 0; i < types.length; ++i)",
      "right" : "for (int i = 0; i < types.length; ++i)",
      "info" : "ForStatement[5298-5405]:ForStatement[7168-7275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5337-5405]:Block[7207-7275]"
    }, {
      "left" : "if (type.equals(types[i]))",
      "right" : "if (type.equals(types[i]))",
      "info" : "IfStatement[5345-5399]:IfStatement[7215-7269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5372-5399]:Block[7242-7269]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[5382-5391]:ReturnStatement[7252-7261]"
    }, {
      "left" : "throw new IllegalStateException(\n        \"How can the type variable not be present in the class declaration!\");",
      "right" : "throw new IllegalStateException(\n        \"How can the type variable not be present in the class declaration!\");",
      "info" : "ThrowStatement[5410-5521]:ThrowStatement[7280-7391]"
    } ]
  },
  "interFileMappings" : { }
}