{
  "matchedElements" : [
 {
    "left" : "class : CSVFormat",
    "right" : "class : CSVFormat",
    "info" : "TypeDeclaration[1406-32239]:TypeDeclaration[1406-32186]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[4159-4207]:FieldDeclaration[4159-4207]"
  }, {
    "left" : "delimiter",
    "right" : "delimiter",
    "info" : "FieldDeclaration[4213-4242]:FieldDeclaration[4213-4242]"
  }, {
    "left" : "quoteChar",
    "right" : "quoteChar",
    "info" : "FieldDeclaration[4247-4281]:FieldDeclaration[4247-4281]"
  }, {
    "left" : "quotePolicy",
    "right" : "quotePolicy",
    "info" : "FieldDeclaration[4317-4349]:FieldDeclaration[4317-4349]"
  }, {
    "left" : "commentStart",
    "right" : "commentStart",
    "info" : "FieldDeclaration[4354-4391]:FieldDeclaration[4354-4391]"
  }, {
    "left" : "escape",
    "right" : "escape",
    "info" : "FieldDeclaration[4430-4461]:FieldDeclaration[4430-4461]"
  }, {
    "left" : "ignoreSurroundingSpaces",
    "right" : "ignoreSurroundingSpaces",
    "info" : "FieldDeclaration[4498-4544]:FieldDeclaration[4498-4544]"
  }, {
    "left" : "ignoreEmptyLines",
    "right" : "ignoreEmptyLines",
    "info" : "FieldDeclaration[4609-4648]:FieldDeclaration[4609-4648]"
  }, {
    "left" : "recordSeparator",
    "right" : "recordSeparator",
    "info" : "FieldDeclaration[4653-4690]:FieldDeclaration[4653-4690]"
  }, {
    "left" : "nullString",
    "right" : "nullString",
    "info" : "FieldDeclaration[4710-4742]:FieldDeclaration[4710-4742]"
  }, {
    "left" : "header",
    "right" : "header",
    "info" : "FieldDeclaration[4788-4818]:FieldDeclaration[4788-4818]"
  }, {
    "left" : "skipHeaderRecord",
    "right" : "skipHeaderRecord",
    "info" : "FieldDeclaration[4855-4894]:FieldDeclaration[4855-4894]"
  }, {
    "left" : "DEFAULT",
    "right" : "DEFAULT",
    "info" : "FieldDeclaration[4900-5461]:FieldDeclaration[4900-5461]"
  }, {
    "left" : "RFC4180",
    "right" : "RFC4180",
    "info" : "FieldDeclaration[5467-5825]:FieldDeclaration[5467-5825]"
  }, {
    "left" : "EXCEL",
    "right" : "EXCEL",
    "info" : "FieldDeclaration[5831-6638]:FieldDeclaration[5831-6638]"
  }, {
    "left" : "TDF",
    "right" : "TDF",
    "info" : "FieldDeclaration[6644-6861]:FieldDeclaration[6644-6861]"
  }, {
    "left" : "MYSQL",
    "right" : "MYSQL",
    "info" : "FieldDeclaration[6867-7539]:FieldDeclaration[6867-7539]"
  }, {
    "left" : "private isLineBreak(c char) : boolean",
    "right" : "private isLineBreak(c char) : boolean",
    "info" : "MethodDeclaration[7545-7857]:MethodDeclaration[7545-7857]"
  }, {
    "left" : "private isLineBreak(c ) : boolean",
    "right" : "private isLineBreak(c ) : boolean",
    "info" : "MethodDeclaration[7863-8229]:MethodDeclaration[7863-8229]"
  }, {
    "left" : "public newFormat(delimiter char) : ",
    "right" : "public newFormat(delimiter char) : ",
    "info" : "MethodDeclaration[8235-8716]:MethodDeclaration[8235-8716]"
  }, {
    "left" : "private CSVFormat(delimiter char, quoteChar , quotePolicy , commentStart , escape , ignoreSurroundingSpaces boolean, ignoreEmptyLines boolean, recordSeparator , nullString , header , skipHeaderRecord boolean)",
    "right" : "private CSVFormat(delimiter char, quoteChar , quotePolicy , commentStart , escape , ignoreSurroundingSpaces boolean, ignoreEmptyLines boolean, recordSeparator , nullString , header , skipHeaderRecord boolean)",
    "info" : "MethodDeclaration[8722-10982]:MethodDeclaration[8722-11265]"
  }, {
    "left" : "public equals(obj ) : boolean",
    "right" : "public equals(obj ) : boolean",
    "info" : "MethodDeclaration[10988-12966]:MethodDeclaration[11271-13249]"
  }, {
    "left" : "public format() : ",
    "right" : "public format() : ",
    "info" : "MethodDeclaration[12972-13518]:MethodDeclaration[13255-13801]"
  }, {
    "left" : "public getCommentStart() : ",
    "right" : "public getCommentStart() : ",
    "info" : "MethodDeclaration[13524-13745]:MethodDeclaration[13807-14028]"
  }, {
    "left" : "public getDelimiter() : char",
    "right" : "public getDelimiter() : char",
    "info" : "MethodDeclaration[13751-13954]:MethodDeclaration[14034-14237]"
  }, {
    "left" : "public getEscape() : ",
    "right" : "public getEscape() : ",
    "info" : "MethodDeclaration[13960-14136]:MethodDeclaration[14243-14419]"
  }, {
    "left" : "public getHeader() : ",
    "right" : "public getHeader() : ",
    "info" : "MethodDeclaration[14142-14340]:MethodDeclaration[14425-14623]"
  }, {
    "left" : "public getIgnoreEmptyLines() : boolean",
    "right" : "public getIgnoreEmptyLines() : boolean",
    "info" : "MethodDeclaration[14346-14673]:MethodDeclaration[14629-14956]"
  }, {
    "left" : "public getIgnoreSurroundingSpaces() : boolean",
    "right" : "public getIgnoreSurroundingSpaces() : boolean",
    "info" : "MethodDeclaration[14679-15009]:MethodDeclaration[14962-15292]"
  }, {
    "left" : "public getNullString() : ",
    "right" : "public getNullString() : ",
    "info" : "MethodDeclaration[15015-15571]:MethodDeclaration[15298-15854]"
  }, {
    "left" : "public getQuoteChar() : ",
    "right" : "public getQuoteChar() : ",
    "info" : "MethodDeclaration[15577-15812]:MethodDeclaration[15860-16095]"
  }, {
    "left" : "public getQuotePolicy() : ",
    "right" : "public getQuotePolicy() : ",
    "info" : "MethodDeclaration[15818-15985]:MethodDeclaration[16101-16268]"
  }, {
    "left" : "public getRecordSeparator() : ",
    "right" : "public getRecordSeparator() : ",
    "info" : "MethodDeclaration[15991-16183]:MethodDeclaration[16274-16466]"
  }, {
    "left" : "public getSkipHeaderRecord() : boolean",
    "right" : "public getSkipHeaderRecord() : boolean",
    "info" : "MethodDeclaration[16189-16389]:MethodDeclaration[16472-16672]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[16395-17357]:MethodDeclaration[16678-17640]"
  }, {
    "left" : "public isCommentingEnabled() : boolean",
    "right" : "public isCommentingEnabled() : boolean",
    "info" : "MethodDeclaration[17363-17712]:MethodDeclaration[17646-17995]"
  }, {
    "left" : "public isEscaping() : boolean",
    "right" : "public isEscaping() : boolean",
    "info" : "MethodDeclaration[17718-17911]:MethodDeclaration[18001-18194]"
  }, {
    "left" : "public isNullHandling() : boolean",
    "right" : "public isNullHandling() : boolean",
    "info" : "MethodDeclaration[17917-18123]:MethodDeclaration[18200-18406]"
  }, {
    "left" : "public isQuoting() : boolean",
    "right" : "public isQuoting() : boolean",
    "info" : "MethodDeclaration[18129-18327]:MethodDeclaration[18412-18610]"
  }, {
    "left" : "public parse(in ) : ",
    "right" : "public parse(in ) : ",
    "info" : "MethodDeclaration[18333-18782]:MethodDeclaration[18616-19065]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[18788-20088]:MethodDeclaration[19071-20371]"
  }, {
    "left" : "package validate() : void",
    "right" : "package validate() : void",
    "info" : "MethodDeclaration[20094-21978]:MethodDeclaration[20377-21925]"
  }, {
    "left" : "public withCommentStart(commentStart char) : ",
    "right" : "public withCommentStart(commentStart char) : ",
    "info" : "MethodDeclaration[21984-22610]:MethodDeclaration[21931-22557]"
  }, {
    "left" : "public withCommentStart(commentStart ) : ",
    "right" : "public withCommentStart(commentStart ) : ",
    "info" : "MethodDeclaration[22616-23564]:MethodDeclaration[22563-23511]"
  }, {
    "left" : "public withDelimiter(delimiter char) : ",
    "right" : "public withDelimiter(delimiter char) : ",
    "info" : "MethodDeclaration[23570-24328]:MethodDeclaration[23517-24275]"
  }, {
    "left" : "public withEscape(escape char) : ",
    "right" : "public withEscape(escape char) : ",
    "info" : "MethodDeclaration[24334-24818]:MethodDeclaration[24281-24765]"
  }, {
    "left" : "public withEscape(escape ) : ",
    "right" : "public withEscape(escape ) : ",
    "info" : "MethodDeclaration[24824-25630]:MethodDeclaration[24771-25577]"
  }, {
    "left" : "public withHeader() : ",
    "right" : "public withHeader() : ",
    "info" : "MethodDeclaration[25636-26541]:MethodDeclaration[25583-26488]"
  }, {
    "left" : "public withIgnoreEmptyLines(ignoreEmptyLines boolean) : ",
    "right" : "public withIgnoreEmptyLines(ignoreEmptyLines boolean) : ",
    "info" : "MethodDeclaration[26547-27234]:MethodDeclaration[26494-27181]"
  }, {
    "left" : "public withIgnoreSurroundingSpaces(ignoreSurroundingSpaces boolean) : ",
    "right" : "public withIgnoreSurroundingSpaces(ignoreSurroundingSpaces boolean) : ",
    "info" : "MethodDeclaration[27240-27886]:MethodDeclaration[27187-27833]"
  }, {
    "left" : "public withNullString(nullString ) : ",
    "right" : "public withNullString(nullString ) : ",
    "info" : "MethodDeclaration[27892-28794]:MethodDeclaration[27839-28741]"
  }, {
    "left" : "public withQuoteChar(quoteChar char) : ",
    "right" : "public withQuoteChar(quoteChar char) : ",
    "info" : "MethodDeclaration[28800-29285]:MethodDeclaration[28747-29232]"
  }, {
    "left" : "public withQuoteChar(quoteChar ) : ",
    "right" : "public withQuoteChar(quoteChar ) : ",
    "info" : "MethodDeclaration[29291-30087]:MethodDeclaration[29238-30034]"
  }, {
    "left" : "public withQuotePolicy(quotePolicy ) : ",
    "right" : "public withQuotePolicy(quotePolicy ) : ",
    "info" : "MethodDeclaration[30093-30632]:MethodDeclaration[30040-30579]"
  }, {
    "left" : "public withRecordSeparator(recordSeparator char) : ",
    "right" : "public withRecordSeparator(recordSeparator char) : ",
    "info" : "MethodDeclaration[30638-31076]:MethodDeclaration[30585-31023]"
  }, {
    "left" : "public withRecordSeparator(recordSeparator ) : ",
    "right" : "public withRecordSeparator(recordSeparator ) : ",
    "info" : "MethodDeclaration[31082-31651]:MethodDeclaration[31029-31598]"
  }, {
    "left" : "public withSkipHeaderRecord(skipHeaderRecord boolean) : ",
    "right" : "public withSkipHeaderRecord(skipHeaderRecord boolean) : ",
    "info" : "MethodDeclaration[31657-32237]:MethodDeclaration[31604-32184]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4099-4105]:Modifier[4099-4105]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[4106-4111]:Modifier[4106-4111]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4112-4117]:TYPE_DECLARATION_KIND[4112-4117]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7766-7773]:Modifier[7766-7773]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7774-7780]:Modifier[7774-7780]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[7781-7788]:PrimitiveType[7781-7788]"
  }, {
    "left" : "isLineBreak",
    "right" : "isLineBreak",
    "info" : "SimpleName[7789-7800]:SimpleName[7789-7800]"
  }, {
    "left" : "final char c",
    "right" : "final char c",
    "info" : "SingleVariableDeclaration[7801-7813]:SingleVariableDeclaration[7801-7813]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7815-7857]:Block[7815-7857]"
  }, {
    "left" : "return c == LF || c == CR;",
    "right" : "return c == LF || c == CR;",
    "info" : "ReturnStatement[7825-7851]:ReturnStatement[7825-7851]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8112-8119]:Modifier[8112-8119]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8120-8126]:Modifier[8120-8126]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8127-8134]:PrimitiveType[8127-8134]"
  }, {
    "left" : "isLineBreak",
    "right" : "isLineBreak",
    "info" : "SimpleName[8135-8146]:SimpleName[8135-8146]"
  }, {
    "left" : "final Character c",
    "right" : "final Character c",
    "info" : "SingleVariableDeclaration[8147-8164]:SingleVariableDeclaration[8147-8164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8166-8229]:Block[8166-8229]"
  }, {
    "left" : "return c != null && isLineBreak(c.charValue());",
    "right" : "return c != null && isLineBreak(c.charValue());",
    "info" : "ReturnStatement[8176-8223]:ReturnStatement[8176-8223]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8549-8555]:Modifier[8549-8555]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8556-8562]:Modifier[8556-8562]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[8563-8572]:SimpleType[8563-8572]"
  }, {
    "left" : "newFormat",
    "right" : "newFormat",
    "info" : "SimpleName[8573-8582]:SimpleName[8573-8582]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[8583-8603]:SingleVariableDeclaration[8583-8603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8605-8716]:Block[8605-8716]"
  }, {
    "left" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);",
    "right" : "return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);",
    "info" : "ReturnStatement[8615-8710]:ReturnStatement[8615-8710]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9893-9900]:Modifier[9893-9900]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleName[9901-9910]:SimpleName[9901-9910]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[9911-9931]:SingleVariableDeclaration[9911-9931]"
  }, {
    "left" : "final Character quoteChar",
    "right" : "final Character quoteChar",
    "info" : "SingleVariableDeclaration[9933-9958]:SingleVariableDeclaration[9933-9958]"
  }, {
    "left" : "final Quote quotePolicy",
    "right" : "final Quote quotePolicy",
    "info" : "SingleVariableDeclaration[9972-9995]:SingleVariableDeclaration[9972-9995]"
  }, {
    "left" : "final Character commentStart",
    "right" : "final Character commentStart",
    "info" : "SingleVariableDeclaration[9997-10025]:SingleVariableDeclaration[9997-10025]"
  }, {
    "left" : "final Character escape",
    "right" : "final Character escape",
    "info" : "SingleVariableDeclaration[10039-10061]:SingleVariableDeclaration[10039-10061]"
  }, {
    "left" : "final boolean ignoreSurroundingSpaces",
    "right" : "final boolean ignoreSurroundingSpaces",
    "info" : "SingleVariableDeclaration[10063-10100]:SingleVariableDeclaration[10063-10100]"
  }, {
    "left" : "final boolean ignoreEmptyLines",
    "right" : "final boolean ignoreEmptyLines",
    "info" : "SingleVariableDeclaration[10114-10144]:SingleVariableDeclaration[10114-10144]"
  }, {
    "left" : "final String recordSeparator",
    "right" : "final String recordSeparator",
    "info" : "SingleVariableDeclaration[10146-10174]:SingleVariableDeclaration[10146-10174]"
  }, {
    "left" : "final String nullString",
    "right" : "final String nullString",
    "info" : "SingleVariableDeclaration[10188-10211]:SingleVariableDeclaration[10188-10211]"
  }, {
    "left" : "final String[] header",
    "right" : "final String[] header",
    "info" : "SingleVariableDeclaration[10213-10234]:SingleVariableDeclaration[10213-10234]"
  }, {
    "left" : "final boolean skipHeaderRecord",
    "right" : "final boolean skipHeaderRecord",
    "info" : "SingleVariableDeclaration[10236-10266]:SingleVariableDeclaration[10236-10266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10268-10982]:Block[10268-11265]"
  }, {
    "left" : "if (isLineBreak(delimiter))",
    "right" : "if (isLineBreak(delimiter))",
    "info" : "IfStatement[10278-10405]:IfStatement[10278-10405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10306-10405]:Block[10306-10405]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "info" : "ThrowStatement[10320-10395]:ThrowStatement[10320-10395]"
  }, {
    "left" : "this.delimiter = delimiter;",
    "right" : "this.delimiter = delimiter;",
    "info" : "ExpressionStatement[10414-10441]:ExpressionStatement[10414-10441]"
  }, {
    "left" : "this.quoteChar = quoteChar;",
    "right" : "this.quoteChar = quoteChar;",
    "info" : "ExpressionStatement[10450-10477]:ExpressionStatement[10450-10477]"
  }, {
    "left" : "this.quotePolicy = quotePolicy;",
    "right" : "this.quotePolicy = quotePolicy;",
    "info" : "ExpressionStatement[10486-10517]:ExpressionStatement[10486-10517]"
  }, {
    "left" : "this.commentStart = commentStart;",
    "right" : "this.commentStart = commentStart;",
    "info" : "ExpressionStatement[10526-10559]:ExpressionStatement[10526-10559]"
  }, {
    "left" : "this.escape = escape;",
    "right" : "this.escape = escape;",
    "info" : "ExpressionStatement[10568-10589]:ExpressionStatement[10568-10589]"
  }, {
    "left" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
    "right" : "this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;",
    "info" : "ExpressionStatement[10598-10653]:ExpressionStatement[10598-10653]"
  }, {
    "left" : "this.ignoreEmptyLines = ignoreEmptyLines;",
    "right" : "this.ignoreEmptyLines = ignoreEmptyLines;",
    "info" : "ExpressionStatement[10662-10703]:ExpressionStatement[10662-10703]"
  }, {
    "left" : "this.recordSeparator = recordSeparator;",
    "right" : "this.recordSeparator = recordSeparator;",
    "info" : "ExpressionStatement[10712-10751]:ExpressionStatement[10712-10751]"
  }, {
    "left" : "this.nullString = nullString;",
    "right" : "this.nullString = nullString;",
    "info" : "ExpressionStatement[10760-10789]:ExpressionStatement[10760-10789]"
  }, {
    "left" : "if (header == null)",
    "right" : "if (header == null)",
    "info" : "IfStatement[10798-10926]:IfStatement[10798-11209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10818-10858]:Block[10818-10858]"
  }, {
    "left" : "this.header = null;",
    "right" : "this.header = null;",
    "info" : "ExpressionStatement[10829-10848]:ExpressionStatement[10829-10848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10864-10926]:Block[10864-11209]"
  }, {
    "left" : "this.header = header.clone();",
    "right" : "this.header = header.clone();",
    "info" : "ExpressionStatement[10878-10907]:ExpressionStatement[11161-11190]"
  }, {
    "left" : "this.skipHeaderRecord = skipHeaderRecord;",
    "right" : "this.skipHeaderRecord = skipHeaderRecord;",
    "info" : "ExpressionStatement[10935-10976]:ExpressionStatement[11218-11259]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10988-10997]:MarkerAnnotation[11271-11280]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11002-11008]:Modifier[11285-11291]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11009-11016]:PrimitiveType[11292-11299]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[11017-11023]:SimpleName[11300-11306]"
  }, {
    "left" : "final Object obj",
    "right" : "final Object obj",
    "info" : "SingleVariableDeclaration[11024-11040]:SingleVariableDeclaration[11307-11323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11042-12966]:Block[11325-13249]"
  }, {
    "left" : "if (this == obj)",
    "right" : "if (this == obj)",
    "info" : "IfStatement[11052-11105]:IfStatement[11335-11388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11069-11105]:Block[11352-11388]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11083-11095]:ReturnStatement[11366-11378]"
  }, {
    "left" : "if (obj == null)",
    "right" : "if (obj == null)",
    "info" : "IfStatement[11114-11168]:IfStatement[11397-11451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11131-11168]:Block[11414-11451]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11145-11158]:ReturnStatement[11428-11441]"
  }, {
    "left" : "if (getClass() != obj.getClass())",
    "right" : "if (getClass() != obj.getClass())",
    "info" : "IfStatement[11177-11248]:IfStatement[11460-11531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11211-11248]:Block[11494-11531]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11225-11238]:ReturnStatement[11508-11521]"
  }, {
    "left" : "final CSVFormat other = (CSVFormat) obj;",
    "right" : "final CSVFormat other = (CSVFormat) obj;",
    "info" : "VariableDeclarationStatement[11258-11298]:VariableDeclarationStatement[11541-11581]"
  }, {
    "left" : "if (delimiter != other.delimiter)",
    "right" : "if (delimiter != other.delimiter)",
    "info" : "IfStatement[11307-11378]:IfStatement[11590-11661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11341-11378]:Block[11624-11661]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11355-11368]:ReturnStatement[11638-11651]"
  }, {
    "left" : "if (quotePolicy != other.quotePolicy)",
    "right" : "if (quotePolicy != other.quotePolicy)",
    "info" : "IfStatement[11387-11462]:IfStatement[11670-11745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11425-11462]:Block[11708-11745]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11439-11452]:ReturnStatement[11722-11735]"
  }, {
    "left" : "if (quoteChar == null)",
    "right" : "if (quoteChar == null)",
    "info" : "IfStatement[11471-11675]:IfStatement[11754-11958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11494-11592]:Block[11777-11875]"
  }, {
    "left" : "if (other.quoteChar != null)",
    "right" : "if (other.quoteChar != null)",
    "info" : "IfStatement[11508-11582]:IfStatement[11791-11865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11537-11582]:Block[11820-11865]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11555-11568]:ReturnStatement[11838-11851]"
  }, {
    "left" : "if (!quoteChar.equals(other.quoteChar))",
    "right" : "if (!quoteChar.equals(other.quoteChar))",
    "info" : "IfStatement[11598-11675]:IfStatement[11881-11958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11638-11675]:Block[11921-11958]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11652-11665]:ReturnStatement[11935-11948]"
  }, {
    "left" : "if (commentStart == null)",
    "right" : "if (commentStart == null)",
    "info" : "IfStatement[11684-11900]:IfStatement[11967-12183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11710-11811]:Block[11993-12094]"
  }, {
    "left" : "if (other.commentStart != null)",
    "right" : "if (other.commentStart != null)",
    "info" : "IfStatement[11724-11801]:IfStatement[12007-12084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11756-11801]:Block[12039-12084]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11774-11787]:ReturnStatement[12057-12070]"
  }, {
    "left" : "if (!commentStart.equals(other.commentStart))",
    "right" : "if (!commentStart.equals(other.commentStart))",
    "info" : "IfStatement[11817-11900]:IfStatement[12100-12183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11863-11900]:Block[12146-12183]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11877-11890]:ReturnStatement[12160-12173]"
  }, {
    "left" : "if (escape == null)",
    "right" : "if (escape == null)",
    "info" : "IfStatement[11909-12101]:IfStatement[12192-12384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11929-12024]:Block[12212-12307]"
  }, {
    "left" : "if (other.escape != null)",
    "right" : "if (other.escape != null)",
    "info" : "IfStatement[11943-12014]:IfStatement[12226-12297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11969-12014]:Block[12252-12297]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11987-12000]:ReturnStatement[12270-12283]"
  }, {
    "left" : "if (!escape.equals(other.escape))",
    "right" : "if (!escape.equals(other.escape))",
    "info" : "IfStatement[12030-12101]:IfStatement[12313-12384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12064-12101]:Block[12347-12384]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12078-12091]:ReturnStatement[12361-12374]"
  }, {
    "left" : "if (nullString == null)",
    "right" : "if (nullString == null)",
    "info" : "IfStatement[12110-12318]:IfStatement[12393-12601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12134-12233]:Block[12417-12516]"
  }, {
    "left" : "if (other.nullString != null)",
    "right" : "if (other.nullString != null)",
    "info" : "IfStatement[12148-12223]:IfStatement[12431-12506]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12178-12223]:Block[12461-12506]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12196-12209]:ReturnStatement[12479-12492]"
  }, {
    "left" : "if (!nullString.equals(other.nullString))",
    "right" : "if (!nullString.equals(other.nullString))",
    "info" : "IfStatement[12239-12318]:IfStatement[12522-12601]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12281-12318]:Block[12564-12601]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12295-12308]:ReturnStatement[12578-12591]"
  }, {
    "left" : "if (!Arrays.equals(header, other.header))",
    "right" : "if (!Arrays.equals(header, other.header))",
    "info" : "IfStatement[12327-12406]:IfStatement[12610-12689]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12369-12406]:Block[12652-12689]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12383-12396]:ReturnStatement[12666-12679]"
  }, {
    "left" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
    "right" : "if (ignoreSurroundingSpaces != other.ignoreSurroundingSpaces)",
    "info" : "IfStatement[12415-12514]:IfStatement[12698-12797]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12477-12514]:Block[12760-12797]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12491-12504]:ReturnStatement[12774-12787]"
  }, {
    "left" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
    "right" : "if (ignoreEmptyLines != other.ignoreEmptyLines)",
    "info" : "IfStatement[12523-12608]:IfStatement[12806-12891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12571-12608]:Block[12854-12891]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12585-12598]:ReturnStatement[12868-12881]"
  }, {
    "left" : "if (skipHeaderRecord != other.skipHeaderRecord)",
    "right" : "if (skipHeaderRecord != other.skipHeaderRecord)",
    "info" : "IfStatement[12617-12702]:IfStatement[12900-12985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12665-12702]:Block[12948-12985]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12679-12692]:ReturnStatement[12962-12975]"
  }, {
    "left" : "if (recordSeparator == null)",
    "right" : "if (recordSeparator == null)",
    "info" : "IfStatement[12711-12939]:IfStatement[12994-13222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12740-12844]:Block[13023-13127]"
  }, {
    "left" : "if (other.recordSeparator != null)",
    "right" : "if (other.recordSeparator != null)",
    "info" : "IfStatement[12754-12834]:IfStatement[13037-13117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12789-12834]:Block[13072-13117]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12807-12820]:ReturnStatement[13090-13103]"
  }, {
    "left" : "if (!recordSeparator.equals(other.recordSeparator))",
    "right" : "if (!recordSeparator.equals(other.recordSeparator))",
    "info" : "IfStatement[12850-12939]:IfStatement[13133-13222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12902-12939]:Block[13185-13222]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12916-12929]:ReturnStatement[13199-13212]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[12948-12960]:ReturnStatement[13231-13243]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13128-13134]:Modifier[13411-13417]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[13135-13141]:SimpleType[13418-13424]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "SimpleName[13142-13148]:SimpleName[13425-13431]"
  }, {
    "left" : "final Object... values",
    "right" : "final Object... values",
    "info" : "SingleVariableDeclaration[13149-13171]:SingleVariableDeclaration[13432-13454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13173-13518]:Block[13456-13801]"
  }, {
    "left" : "final StringWriter out = new StringWriter();",
    "right" : "final StringWriter out = new StringWriter();",
    "info" : "VariableDeclarationStatement[13183-13227]:VariableDeclarationStatement[13466-13510]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[13236-13512]:TryStatement[13519-13795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13240-13352]:Block[13523-13635]"
  }, {
    "left" : "new CSVPrinter(out, this).printRecord(values);",
    "right" : "new CSVPrinter(out, this).printRecord(values);",
    "info" : "ExpressionStatement[13254-13300]:ExpressionStatement[13537-13583]"
  }, {
    "left" : "return out.toString().trim();",
    "right" : "return out.toString().trim();",
    "info" : "ReturnStatement[13313-13342]:ReturnStatement[13596-13625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13381-13512]:Block[13664-13795]"
  }, {
    "left" : "throw new IllegalStateException(e);",
    "right" : "throw new IllegalStateException(e);",
    "info" : "ThrowStatement[13467-13502]:ThrowStatement[13750-13785]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13674-13680]:Modifier[13957-13963]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[13681-13690]:SimpleType[13964-13973]"
  }, {
    "left" : "getCommentStart",
    "right" : "getCommentStart",
    "info" : "SimpleName[13691-13706]:SimpleName[13974-13989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13709-13745]:Block[13992-14028]"
  }, {
    "left" : "return commentStart;",
    "right" : "return commentStart;",
    "info" : "ReturnStatement[13719-13739]:ReturnStatement[14002-14022]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13894-13900]:Modifier[14177-14183]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[13901-13905]:PrimitiveType[14184-14188]"
  }, {
    "left" : "getDelimiter",
    "right" : "getDelimiter",
    "info" : "SimpleName[13906-13918]:SimpleName[14189-14201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13921-13954]:Block[14204-14237]"
  }, {
    "left" : "return delimiter;",
    "right" : "return delimiter;",
    "info" : "ReturnStatement[13931-13948]:ReturnStatement[14214-14231]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14077-14083]:Modifier[14360-14366]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[14084-14093]:SimpleType[14367-14376]"
  }, {
    "left" : "getEscape",
    "right" : "getEscape",
    "info" : "SimpleName[14094-14103]:SimpleName[14377-14386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14106-14136]:Block[14389-14419]"
  }, {
    "left" : "return escape;",
    "right" : "return escape;",
    "info" : "ReturnStatement[14116-14130]:ReturnStatement[14399-14413]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14250-14256]:Modifier[14533-14539]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[14257-14265]:ArrayType[14540-14548]"
  }, {
    "left" : "getHeader",
    "right" : "getHeader",
    "info" : "SimpleName[14266-14275]:SimpleName[14549-14558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14278-14340]:Block[14561-14623]"
  }, {
    "left" : "return header != null ? header.clone() : null;",
    "right" : "return header != null ? header.clone() : null;",
    "info" : "ReturnStatement[14288-14334]:ReturnStatement[14571-14617]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14596-14602]:Modifier[14879-14885]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14603-14610]:PrimitiveType[14886-14893]"
  }, {
    "left" : "getIgnoreEmptyLines",
    "right" : "getIgnoreEmptyLines",
    "info" : "SimpleName[14611-14630]:SimpleName[14894-14913]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14633-14673]:Block[14916-14956]"
  }, {
    "left" : "return ignoreEmptyLines;",
    "right" : "return ignoreEmptyLines;",
    "info" : "ReturnStatement[14643-14667]:ReturnStatement[14926-14950]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14918-14924]:Modifier[15201-15207]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14925-14932]:PrimitiveType[15208-15215]"
  }, {
    "left" : "getIgnoreSurroundingSpaces",
    "right" : "getIgnoreSurroundingSpaces",
    "info" : "SimpleName[14933-14959]:SimpleName[15216-15242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14962-15009]:Block[15245-15292]"
  }, {
    "left" : "return ignoreSurroundingSpaces;",
    "right" : "return ignoreSurroundingSpaces;",
    "info" : "ReturnStatement[14972-15003]:ReturnStatement[15255-15286]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15507-15513]:Modifier[15790-15796]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[15514-15520]:SimpleType[15797-15803]"
  }, {
    "left" : "getNullString",
    "right" : "getNullString",
    "info" : "SimpleName[15521-15534]:SimpleName[15804-15817]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15537-15571]:Block[15820-15854]"
  }, {
    "left" : "return nullString;",
    "right" : "return nullString;",
    "info" : "ReturnStatement[15547-15565]:ReturnStatement[15830-15848]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15747-15753]:Modifier[16030-16036]"
  }, {
    "left" : "Character",
    "right" : "Character",
    "info" : "SimpleType[15754-15763]:SimpleType[16037-16046]"
  }, {
    "left" : "getQuoteChar",
    "right" : "getQuoteChar",
    "info" : "SimpleName[15764-15776]:SimpleName[16047-16059]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15779-15812]:Block[16062-16095]"
  }, {
    "left" : "return quoteChar;",
    "right" : "return quoteChar;",
    "info" : "ReturnStatement[15789-15806]:ReturnStatement[16072-16089]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15920-15926]:Modifier[16203-16209]"
  }, {
    "left" : "Quote",
    "right" : "Quote",
    "info" : "SimpleType[15927-15932]:SimpleType[16210-16215]"
  }, {
    "left" : "getQuotePolicy",
    "right" : "getQuotePolicy",
    "info" : "SimpleName[15933-15947]:SimpleName[16216-16230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15950-15985]:Block[16233-16268]"
  }, {
    "left" : "return quotePolicy;",
    "right" : "return quotePolicy;",
    "info" : "ReturnStatement[15960-15979]:ReturnStatement[16243-16262]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16109-16115]:Modifier[16392-16398]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[16116-16122]:SimpleType[16399-16405]"
  }, {
    "left" : "getRecordSeparator",
    "right" : "getRecordSeparator",
    "info" : "SimpleName[16123-16141]:SimpleName[16406-16424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16144-16183]:Block[16427-16466]"
  }, {
    "left" : "return recordSeparator;",
    "right" : "return recordSeparator;",
    "info" : "ReturnStatement[16154-16177]:ReturnStatement[16437-16460]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16312-16318]:Modifier[16595-16601]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[16319-16326]:PrimitiveType[16602-16609]"
  }, {
    "left" : "getSkipHeaderRecord",
    "right" : "getSkipHeaderRecord",
    "info" : "SimpleName[16327-16346]:SimpleName[16610-16629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16349-16389]:Block[16632-16672]"
  }, {
    "left" : "return skipHeaderRecord;",
    "right" : "return skipHeaderRecord;",
    "info" : "ReturnStatement[16359-16383]:ReturnStatement[16642-16666]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16395-16404]:MarkerAnnotation[16678-16687]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16409-16415]:Modifier[16692-16698]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[16416-16419]:PrimitiveType[16699-16702]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[16420-16428]:SimpleName[16703-16711]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16435-17357]:Block[16718-17640]"
  }, {
    "left" : "final int prime = 31;",
    "right" : "final int prime = 31;",
    "info" : "VariableDeclarationStatement[16445-16466]:VariableDeclarationStatement[16728-16749]"
  }, {
    "left" : "int result = 1;",
    "right" : "int result = 1;",
    "info" : "VariableDeclarationStatement[16475-16490]:VariableDeclarationStatement[16758-16773]"
  }, {
    "left" : "result = prime * result + delimiter;",
    "right" : "result = prime * result + delimiter;",
    "info" : "ExpressionStatement[16500-16536]:ExpressionStatement[16783-16819]"
  }, {
    "left" : "result = prime * result + ((quotePolicy == null) ? 0 : quotePolicy.hashCode());",
    "right" : "result = prime * result + ((quotePolicy == null) ? 0 : quotePolicy.hashCode());",
    "info" : "ExpressionStatement[16545-16624]:ExpressionStatement[16828-16907]"
  }, {
    "left" : "result = prime * result + ((quoteChar == null) ? 0 : quoteChar.hashCode());",
    "right" : "result = prime * result + ((quoteChar == null) ? 0 : quoteChar.hashCode());",
    "info" : "ExpressionStatement[16633-16708]:ExpressionStatement[16916-16991]"
  }, {
    "left" : "result = prime * result + ((commentStart == null) ? 0 : commentStart.hashCode());",
    "right" : "result = prime * result + ((commentStart == null) ? 0 : commentStart.hashCode());",
    "info" : "ExpressionStatement[16717-16798]:ExpressionStatement[17000-17081]"
  }, {
    "left" : "result = prime * result + ((escape == null) ? 0 : escape.hashCode());",
    "right" : "result = prime * result + ((escape == null) ? 0 : escape.hashCode());",
    "info" : "ExpressionStatement[16807-16876]:ExpressionStatement[17090-17159]"
  }, {
    "left" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
    "right" : "result = prime * result + ((nullString == null) ? 0 : nullString.hashCode());",
    "info" : "ExpressionStatement[16885-16962]:ExpressionStatement[17168-17245]"
  }, {
    "left" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
    "right" : "result = prime * result + (ignoreSurroundingSpaces ? 1231 : 1237);",
    "info" : "ExpressionStatement[16971-17037]:ExpressionStatement[17254-17320]"
  }, {
    "left" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
    "right" : "result = prime * result + (ignoreEmptyLines ? 1231 : 1237);",
    "info" : "ExpressionStatement[17046-17105]:ExpressionStatement[17329-17388]"
  }, {
    "left" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
    "right" : "result = prime * result + (skipHeaderRecord ? 1231 : 1237);",
    "info" : "ExpressionStatement[17114-17173]:ExpressionStatement[17397-17456]"
  }, {
    "left" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
    "right" : "result = prime * result + ((recordSeparator == null) ? 0 : recordSeparator.hashCode());",
    "info" : "ExpressionStatement[17182-17269]:ExpressionStatement[17465-17552]"
  }, {
    "left" : "result = prime * result + Arrays.hashCode(header);",
    "right" : "result = prime * result + Arrays.hashCode(header);",
    "info" : "ExpressionStatement[17278-17328]:ExpressionStatement[17561-17611]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[17337-17351]:ReturnStatement[17620-17634]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17631-17637]:Modifier[17914-17920]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17638-17645]:PrimitiveType[17921-17928]"
  }, {
    "left" : "isCommentingEnabled",
    "right" : "isCommentingEnabled",
    "info" : "SimpleName[17646-17665]:SimpleName[17929-17948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17668-17712]:Block[17951-17995]"
  }, {
    "left" : "return commentStart != null;",
    "right" : "return commentStart != null;",
    "info" : "ReturnStatement[17678-17706]:ReturnStatement[17961-17989]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17845-17851]:Modifier[18128-18134]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[17852-17859]:PrimitiveType[18135-18142]"
  }, {
    "left" : "isEscaping",
    "right" : "isEscaping",
    "info" : "SimpleName[17860-17870]:SimpleName[18143-18153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17873-17911]:Block[18156-18194]"
  }, {
    "left" : "return escape != null;",
    "right" : "return escape != null;",
    "info" : "ReturnStatement[17883-17905]:ReturnStatement[18166-18188]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18049-18055]:Modifier[18332-18338]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18056-18063]:PrimitiveType[18339-18346]"
  }, {
    "left" : "isNullHandling",
    "right" : "isNullHandling",
    "info" : "SimpleName[18064-18078]:SimpleName[18347-18361]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18081-18123]:Block[18364-18406]"
  }, {
    "left" : "return nullString != null;",
    "right" : "return nullString != null;",
    "info" : "ReturnStatement[18091-18117]:ReturnStatement[18374-18400]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18259-18265]:Modifier[18542-18548]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18266-18273]:PrimitiveType[18549-18556]"
  }, {
    "left" : "isQuoting",
    "right" : "isQuoting",
    "info" : "SimpleName[18274-18283]:SimpleName[18557-18566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18286-18327]:Block[18569-18610]"
  }, {
    "left" : "return quoteChar != null;",
    "right" : "return quoteChar != null;",
    "info" : "ReturnStatement[18296-18321]:ReturnStatement[18579-18604]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18676-18682]:Modifier[18959-18965]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[18683-18692]:SimpleType[18966-18975]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[18693-18698]:SimpleName[18976-18981]"
  }, {
    "left" : "final Reader in",
    "right" : "final Reader in",
    "info" : "SingleVariableDeclaration[18699-18714]:SingleVariableDeclaration[18982-18997]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[18723-18734]:SimpleType[19006-19017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18735-18782]:Block[19018-19065]"
  }, {
    "left" : "return new CSVParser(in, this);",
    "right" : "return new CSVParser(in, this);",
    "info" : "ReturnStatement[18745-18776]:ReturnStatement[19028-19059]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18788-18797]:MarkerAnnotation[19071-19080]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18802-18808]:Modifier[19085-19091]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[18809-18815]:SimpleType[19092-19098]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[18816-18824]:SimpleName[19099-19107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18827-20088]:Block[19110-20371]"
  }, {
    "left" : "final StringBuilder sb = new StringBuilder();",
    "right" : "final StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[18837-18882]:VariableDeclarationStatement[19120-19165]"
  }, {
    "left" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
    "right" : "sb.append(\"Delimiter=<\").append(delimiter).append('>');",
    "info" : "ExpressionStatement[18891-18946]:ExpressionStatement[19174-19229]"
  }, {
    "left" : "if (isEscaping())",
    "right" : "if (isEscaping())",
    "info" : "IfStatement[18955-19074]:IfStatement[19238-19357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18973-19074]:Block[19256-19357]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[18987-19002]:ExpressionStatement[19270-19285]"
  }, {
    "left" : "sb.append(\"Escape=<\").append(escape).append('>');",
    "right" : "sb.append(\"Escape=<\").append(escape).append('>');",
    "info" : "ExpressionStatement[19015-19064]:ExpressionStatement[19298-19347]"
  }, {
    "left" : "if (isQuoting())",
    "right" : "if (isQuoting())",
    "info" : "IfStatement[19083-19207]:IfStatement[19366-19490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19100-19207]:Block[19383-19490]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[19114-19129]:ExpressionStatement[19397-19412]"
  }, {
    "left" : "sb.append(\"QuoteChar=<\").append(quoteChar).append('>');",
    "right" : "sb.append(\"QuoteChar=<\").append(quoteChar).append('>');",
    "info" : "ExpressionStatement[19142-19197]:ExpressionStatement[19425-19480]"
  }, {
    "left" : "if (isCommentingEnabled())",
    "right" : "if (isCommentingEnabled())",
    "info" : "IfStatement[19216-19356]:IfStatement[19499-19639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19243-19356]:Block[19526-19639]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[19257-19272]:ExpressionStatement[19540-19555]"
  }, {
    "left" : "sb.append(\"CommentStart=<\").append(commentStart).append('>');",
    "right" : "sb.append(\"CommentStart=<\").append(commentStart).append('>');",
    "info" : "ExpressionStatement[19285-19346]:ExpressionStatement[19568-19629]"
  }, {
    "left" : "if (isNullHandling())",
    "right" : "if (isNullHandling())",
    "info" : "IfStatement[19365-19496]:IfStatement[19648-19779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19387-19496]:Block[19670-19779]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[19401-19416]:ExpressionStatement[19684-19699]"
  }, {
    "left" : "sb.append(\"NullString=<\").append(nullString).append('>');",
    "right" : "sb.append(\"NullString=<\").append(nullString).append('>');",
    "info" : "ExpressionStatement[19429-19486]:ExpressionStatement[19712-19769]"
  }, {
    "left" : "if(recordSeparator != null)",
    "right" : "if(recordSeparator != null)",
    "info" : "IfStatement[19505-19652]:IfStatement[19788-19935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19533-19652]:Block[19816-19935]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[19547-19562]:ExpressionStatement[19830-19845]"
  }, {
    "left" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
    "right" : "sb.append(\"RecordSeparator=<\").append(recordSeparator).append('>');",
    "info" : "ExpressionStatement[19575-19642]:ExpressionStatement[19858-19925]"
  }, {
    "left" : "if (getIgnoreEmptyLines())",
    "right" : "if (getIgnoreEmptyLines())",
    "info" : "IfStatement[19661-19745]:IfStatement[19944-20028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19688-19745]:Block[19971-20028]"
  }, {
    "left" : "sb.append(\" EmptyLines:ignored\");",
    "right" : "sb.append(\" EmptyLines:ignored\");",
    "info" : "ExpressionStatement[19702-19735]:ExpressionStatement[19985-20018]"
  }, {
    "left" : "if (getIgnoreSurroundingSpaces())",
    "right" : "if (getIgnoreSurroundingSpaces())",
    "info" : "IfStatement[19754-19852]:IfStatement[20037-20135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19788-19852]:Block[20071-20135]"
  }, {
    "left" : "sb.append(\" SurroundingSpaces:ignored\");",
    "right" : "sb.append(\" SurroundingSpaces:ignored\");",
    "info" : "ExpressionStatement[19802-19842]:ExpressionStatement[20085-20125]"
  }, {
    "left" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
    "right" : "sb.append(\" SkipHeaderRecord:\").append(skipHeaderRecord);",
    "info" : "ExpressionStatement[19861-19918]:ExpressionStatement[20144-20201]"
  }, {
    "left" : "if (header != null)",
    "right" : "if (header != null)",
    "info" : "IfStatement[19927-20052]:IfStatement[20210-20335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19947-20052]:Block[20230-20335]"
  }, {
    "left" : "sb.append(' ');",
    "right" : "sb.append(' ');",
    "info" : "ExpressionStatement[19961-19976]:ExpressionStatement[20244-20259]"
  }, {
    "left" : "sb.append(\"Header:\").append(Arrays.toString(header));",
    "right" : "sb.append(\"Header:\").append(Arrays.toString(header));",
    "info" : "ExpressionStatement[19989-20042]:ExpressionStatement[20272-20325]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[20061-20082]:ReturnStatement[20344-20365]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20254-20258]:PrimitiveType[20537-20541]"
  }, {
    "left" : "validate",
    "right" : "validate",
    "info" : "SimpleName[20259-20267]:SimpleName[20542-20550]"
  }, {
    "left" : "IllegalStateException",
    "right" : "IllegalStateException",
    "info" : "SimpleType[20277-20298]:SimpleType[20560-20581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20299-21978]:Block[20582-21925]"
  }, {
    "left" : "if (quoteChar != null && delimiter == quoteChar.charValue())",
    "right" : "if (quoteChar != null && delimiter == quoteChar.charValue())",
    "info" : "IfStatement[20309-20533]:IfStatement[20592-20816]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20370-20533]:Block[20653-20816]"
  }, {
    "left" : "throw new IllegalStateException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");",
    "right" : "throw new IllegalStateException(\n                    \"The quoteChar character and the delimiter cannot be the same ('\" + quoteChar + \"')\");",
    "info" : "ThrowStatement[20384-20523]:ThrowStatement[20667-20806]"
  }, {
    "left" : "if (escape != null && delimiter == escape.charValue())",
    "right" : "if (escape != null && delimiter == escape.charValue())",
    "info" : "IfStatement[20543-20755]:IfStatement[20826-21038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20598-20755]:Block[20881-21038]"
  }, {
    "left" : "throw new IllegalStateException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");",
    "right" : "throw new IllegalStateException(\n                    \"The escape character and the delimiter cannot be the same ('\" + escape + \"')\");",
    "info" : "ThrowStatement[20612-20745]:ThrowStatement[20895-21028]"
  }, {
    "left" : "if (commentStart != null && delimiter == commentStart.charValue())",
    "right" : "if (commentStart != null && delimiter == commentStart.charValue())",
    "info" : "IfStatement[20765-21002]:IfStatement[21048-21285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20832-21002]:Block[21115-21285]"
  }, {
    "left" : "throw new IllegalStateException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");",
    "right" : "throw new IllegalStateException(\n                    \"The comment start character and the delimiter cannot be the same ('\" + commentStart + \"')\");",
    "info" : "ThrowStatement[20846-20992]:ThrowStatement[21129-21275]"
  }, {
    "left" : "if (quoteChar != null && quoteChar.equals(commentStart))",
    "right" : "if (quoteChar != null && quoteChar.equals(commentStart))",
    "info" : "IfStatement[21012-21239]:IfStatement[21295-21522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21069-21239]:Block[21352-21522]"
  }, {
    "left" : "throw new IllegalStateException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");",
    "right" : "throw new IllegalStateException(\n                    \"The comment start character and the quoteChar cannot be the same ('\" + commentStart + \"')\");",
    "info" : "ThrowStatement[21083-21229]:ThrowStatement[21366-21512]"
  }, {
    "left" : "if (escape != null && escape.equals(commentStart))",
    "right" : "if (escape != null && escape.equals(commentStart))",
    "info" : "IfStatement[21249-21467]:IfStatement[21532-21750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21300-21467]:Block[21583-21750]"
  }, {
    "left" : "throw new IllegalStateException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");",
    "right" : "throw new IllegalStateException(\n                    \"The comment start and the escape character cannot be the same ('\" + commentStart + \"')\");",
    "info" : "ThrowStatement[21314-21457]:ThrowStatement[21597-21740]"
  }, {
    "left" : "if (escape == null && quotePolicy == Quote.NONE)",
    "right" : "if (escape == null && quotePolicy == Quote.NONE)",
    "info" : "IfStatement[21477-21635]:IfStatement[21760-21918]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21526-21635]:Block[21809-21918]"
  }, {
    "left" : "throw new IllegalStateException(\"No quotes mode set but no escape character is set\");",
    "right" : "throw new IllegalStateException(\"No quotes mode set but no escape character is set\");",
    "info" : "ThrowStatement[21540-21625]:ThrowStatement[21823-21908]"
  }, {
    "left" : "final Set<String> set = new HashSet<String>(header.length);",
    "right" : "Set<String> dupCheck = new HashSet<String>();",
    "info" : "VariableDeclarationStatement[21679-21738]:VariableDeclarationStatement[10875-10920]"
  }, {
    "left" : "set",
    "right" : "dupCheck",
    "info" : "SimpleName[21697-21700]:SimpleName[10887-10895]"
  }, {
    "left" : "if (set.size() != header.length)",
    "right" : "if (!dupCheck.add(hdr))",
    "info" : "IfStatement[21798-21962]:IfStatement[10967-11137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21831-21962]:Block[10991-11137]"
  }, {
    "left" : "throw new IllegalStateException(\"The header contains duplicate names: \" + Arrays.toString(header));",
    "right" : "throw new IllegalArgumentException(\"The header contains a duplicate entry: '\" + hdr + \"' in \" + Arrays.toString(header));",
    "info" : "ThrowStatement[21849-21948]:ThrowStatement[11004-11125]"
  }, {
    "left" : "IllegalStateException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleName[21859-21880]:SimpleName[11014-11038]"
  }, {
    "left" : "\"The header contains duplicate names: \"",
    "right" : "\"The header contains a duplicate entry: '\"",
    "info" : "StringLiteral[21881-21920]:StringLiteral[11039-11081]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22478-22484]:Modifier[22425-22431]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[22485-22494]:SimpleType[22432-22441]"
  }, {
    "left" : "withCommentStart",
    "right" : "withCommentStart",
    "info" : "SimpleName[22495-22511]:SimpleName[22442-22458]"
  }, {
    "left" : "final char commentStart",
    "right" : "final char commentStart",
    "info" : "SingleVariableDeclaration[22512-22535]:SingleVariableDeclaration[22459-22482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22537-22610]:Block[22484-22557]"
  }, {
    "left" : "return withCommentStart(Character.valueOf(commentStart));",
    "right" : "return withCommentStart(Character.valueOf(commentStart));",
    "info" : "ReturnStatement[22547-22604]:ReturnStatement[22494-22551]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23139-23145]:Modifier[23086-23092]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[23146-23155]:SimpleType[23093-23102]"
  }, {
    "left" : "withCommentStart",
    "right" : "withCommentStart",
    "info" : "SimpleName[23156-23172]:SimpleName[23103-23119]"
  }, {
    "left" : "final Character commentStart",
    "right" : "final Character commentStart",
    "info" : "SingleVariableDeclaration[23173-23201]:SingleVariableDeclaration[23120-23148]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23203-23564]:Block[23150-23511]"
  }, {
    "left" : "if (isLineBreak(commentStart))",
    "right" : "if (isLineBreak(commentStart))",
    "info" : "IfStatement[23213-23357]:IfStatement[23160-23304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23244-23357]:Block[23191-23304]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The comment start character cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The comment start character cannot be a line break\");",
    "info" : "ThrowStatement[23258-23347]:ThrowStatement[23205-23294]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[23366-23558]:ReturnStatement[23313-23505]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23931-23937]:Modifier[23878-23884]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[23938-23947]:SimpleType[23885-23894]"
  }, {
    "left" : "withDelimiter",
    "right" : "withDelimiter",
    "info" : "SimpleName[23948-23961]:SimpleName[23895-23908]"
  }, {
    "left" : "final char delimiter",
    "right" : "final char delimiter",
    "info" : "SingleVariableDeclaration[23962-23982]:SingleVariableDeclaration[23909-23929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23984-24328]:Block[23931-24275]"
  }, {
    "left" : "if (isLineBreak(delimiter))",
    "right" : "if (isLineBreak(delimiter))",
    "info" : "IfStatement[23994-24121]:IfStatement[23941-24068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24022-24121]:Block[23969-24068]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The delimiter cannot be a line break\");",
    "info" : "ThrowStatement[24036-24111]:ThrowStatement[23983-24058]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[24130-24322]:ReturnStatement[24077-24269]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24710-24716]:Modifier[24657-24663]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[24717-24726]:SimpleType[24664-24673]"
  }, {
    "left" : "withEscape",
    "right" : "withEscape",
    "info" : "SimpleName[24727-24737]:SimpleName[24674-24684]"
  }, {
    "left" : "final char escape",
    "right" : "final char escape",
    "info" : "SingleVariableDeclaration[24738-24755]:SingleVariableDeclaration[24685-24702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24757-24818]:Block[24704-24765]"
  }, {
    "left" : "return withEscape(Character.valueOf(escape));",
    "right" : "return withEscape(Character.valueOf(escape));",
    "info" : "ReturnStatement[24767-24812]:ReturnStatement[24714-24759]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25230-25236]:Modifier[25177-25183]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[25237-25246]:SimpleType[25184-25193]"
  }, {
    "left" : "withEscape",
    "right" : "withEscape",
    "info" : "SimpleName[25247-25257]:SimpleName[25194-25204]"
  }, {
    "left" : "final Character escape",
    "right" : "final Character escape",
    "info" : "SingleVariableDeclaration[25258-25280]:SingleVariableDeclaration[25205-25227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25282-25630]:Block[25229-25577]"
  }, {
    "left" : "if (isLineBreak(escape))",
    "right" : "if (isLineBreak(escape))",
    "info" : "IfStatement[25292-25423]:IfStatement[25239-25370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25317-25423]:Block[25264-25370]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The escape character cannot be a line break\");",
    "info" : "ThrowStatement[25331-25413]:ThrowStatement[25278-25360]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[25432-25624]:ReturnStatement[25379-25571]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26281-26287]:Modifier[26228-26234]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[26288-26297]:SimpleType[26235-26244]"
  }, {
    "left" : "withHeader",
    "right" : "withHeader",
    "info" : "SimpleName[26298-26308]:SimpleName[26245-26255]"
  }, {
    "left" : "final String... header",
    "right" : "final String... header",
    "info" : "SingleVariableDeclaration[26309-26331]:SingleVariableDeclaration[26256-26278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26333-26541]:Block[26280-26488]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[26343-26535]:ReturnStatement[26290-26482]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26956-26962]:Modifier[26903-26909]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[26963-26972]:SimpleType[26910-26919]"
  }, {
    "left" : "withIgnoreEmptyLines",
    "right" : "withIgnoreEmptyLines",
    "info" : "SimpleName[26973-26993]:SimpleName[26920-26940]"
  }, {
    "left" : "final boolean ignoreEmptyLines",
    "right" : "final boolean ignoreEmptyLines",
    "info" : "SingleVariableDeclaration[26994-27024]:SingleVariableDeclaration[26941-26971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27026-27234]:Block[26973-27181]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[27036-27228]:ReturnStatement[26983-27175]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27594-27600]:Modifier[27541-27547]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[27601-27610]:SimpleType[27548-27557]"
  }, {
    "left" : "withIgnoreSurroundingSpaces",
    "right" : "withIgnoreSurroundingSpaces",
    "info" : "SimpleName[27611-27638]:SimpleName[27558-27585]"
  }, {
    "left" : "final boolean ignoreSurroundingSpaces",
    "right" : "final boolean ignoreSurroundingSpaces",
    "info" : "SingleVariableDeclaration[27639-27676]:SingleVariableDeclaration[27586-27623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27678-27886]:Block[27625-27833]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[27688-27880]:ReturnStatement[27635-27827]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28529-28535]:Modifier[28476-28482]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[28536-28545]:SimpleType[28483-28492]"
  }, {
    "left" : "withNullString",
    "right" : "withNullString",
    "info" : "SimpleName[28546-28560]:SimpleName[28493-28507]"
  }, {
    "left" : "final String nullString",
    "right" : "final String nullString",
    "info" : "SingleVariableDeclaration[28561-28584]:SingleVariableDeclaration[28508-28531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28586-28794]:Block[28533-28741]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[28596-28788]:ReturnStatement[28543-28735]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29165-29171]:Modifier[29112-29118]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[29172-29181]:SimpleType[29119-29128]"
  }, {
    "left" : "withQuoteChar",
    "right" : "withQuoteChar",
    "info" : "SimpleName[29182-29195]:SimpleName[29129-29142]"
  }, {
    "left" : "final char quoteChar",
    "right" : "final char quoteChar",
    "info" : "SingleVariableDeclaration[29196-29216]:SingleVariableDeclaration[29143-29163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29218-29285]:Block[29165-29232]"
  }, {
    "left" : "return withQuoteChar(Character.valueOf(quoteChar));",
    "right" : "return withQuoteChar(Character.valueOf(quoteChar));",
    "info" : "ReturnStatement[29228-29279]:ReturnStatement[29175-29226]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29685-29691]:Modifier[29632-29638]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[29692-29701]:SimpleType[29639-29648]"
  }, {
    "left" : "withQuoteChar",
    "right" : "withQuoteChar",
    "info" : "SimpleName[29702-29715]:SimpleName[29649-29662]"
  }, {
    "left" : "final Character quoteChar",
    "right" : "final Character quoteChar",
    "info" : "SingleVariableDeclaration[29716-29741]:SingleVariableDeclaration[29663-29688]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29743-30087]:Block[29690-30034]"
  }, {
    "left" : "if (isLineBreak(quoteChar))",
    "right" : "if (isLineBreak(quoteChar))",
    "info" : "IfStatement[29753-29880]:IfStatement[29700-29827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29781-29880]:Block[29728-29827]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
    "right" : "throw new IllegalArgumentException(\"The quoteChar cannot be a line break\");",
    "info" : "ThrowStatement[29795-29870]:ThrowStatement[29742-29817]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[29889-30081]:ReturnStatement[29836-30028]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30366-30372]:Modifier[30313-30319]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[30373-30382]:SimpleType[30320-30329]"
  }, {
    "left" : "withQuotePolicy",
    "right" : "withQuotePolicy",
    "info" : "SimpleName[30383-30398]:SimpleName[30330-30345]"
  }, {
    "left" : "final Quote quotePolicy",
    "right" : "final Quote quotePolicy",
    "info" : "SingleVariableDeclaration[30399-30422]:SingleVariableDeclaration[30346-30369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30424-30632]:Block[30371-30579]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[30434-30626]:ReturnStatement[30381-30573]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30935-30941]:Modifier[30882-30888]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[30942-30951]:SimpleType[30889-30898]"
  }, {
    "left" : "withRecordSeparator",
    "right" : "withRecordSeparator",
    "info" : "SimpleName[30952-30971]:SimpleName[30899-30918]"
  }, {
    "left" : "final char recordSeparator",
    "right" : "final char recordSeparator",
    "info" : "SingleVariableDeclaration[30972-30998]:SingleVariableDeclaration[30919-30945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31000-31076]:Block[30947-31023]"
  }, {
    "left" : "return withRecordSeparator(String.valueOf(recordSeparator));",
    "right" : "return withRecordSeparator(String.valueOf(recordSeparator));",
    "info" : "ReturnStatement[31010-31070]:ReturnStatement[30957-31017]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31376-31382]:Modifier[31323-31329]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[31383-31392]:SimpleType[31330-31339]"
  }, {
    "left" : "withRecordSeparator",
    "right" : "withRecordSeparator",
    "info" : "SimpleName[31393-31412]:SimpleName[31340-31359]"
  }, {
    "left" : "final String recordSeparator",
    "right" : "final String recordSeparator",
    "info" : "SingleVariableDeclaration[31413-31441]:SingleVariableDeclaration[31360-31388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31443-31651]:Block[31390-31598]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[31453-31645]:ReturnStatement[31400-31592]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31959-31965]:Modifier[31906-31912]"
  }, {
    "left" : "CSVFormat",
    "right" : "CSVFormat",
    "info" : "SimpleType[31966-31975]:SimpleType[31913-31922]"
  }, {
    "left" : "withSkipHeaderRecord",
    "right" : "withSkipHeaderRecord",
    "info" : "SimpleName[31976-31996]:SimpleName[31923-31943]"
  }, {
    "left" : "final boolean skipHeaderRecord",
    "right" : "final boolean skipHeaderRecord",
    "info" : "SingleVariableDeclaration[31997-32027]:SingleVariableDeclaration[31944-31974]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32029-32237]:Block[31976-32184]"
  }, {
    "left" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "right" : "return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,\n                ignoreSurroundingSpaces, ignoreEmptyLines, recordSeparator, nullString, header, skipHeaderRecord);",
    "info" : "ReturnStatement[32039-32231]:ReturnStatement[31986-32178]"
  } ]
}