[ {
  "element" : "protected supplierStreamCast(supplier ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "protected supplierStreamCast(supplier ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[2310-2342]:Block[2281-2313]"
    }, {
      "left" : "return supplier;",
      "right" : "return supplier;",
      "info" : "ReturnStatement[2320-2336]:ReturnStatement[2291-2307]"
    } ]
  } ]
}, {
  "element" : "public DistributedCacheStream(localAddress , parallel boolean, dm , supplier , csm , includeLoader boolean, distributedBatchSize int, executor , registry )",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public DistributedCacheStream(localAddress , parallel boolean, dm , supplier , csm , includeLoader boolean, distributedBatchSize int, executor , registry )",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[3630-3788]:Block[3601-3759]"
    }, {
      "left" : "super(localAddress, parallel, dm, supplierStreamCast(supplier), csm, includeLoader, distributedBatchSize,\n                executor, registry);",
      "right" : "super(localAddress, parallel, dm, supplierStreamCast(supplier), csm, includeLoader, distributedBatchSize,\n                executor, registry);",
      "info" : "SuperConstructorInvocation[3640-3782]:SuperConstructorInvocation[3611-3753]"
    } ]
  } ]
}, {
  "element" : "public DistributedCacheStream(localAddress , parallel boolean, dm , supplier , csm , includeLoader boolean, distributedBatchSize int, executor , registry , function )",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public DistributedCacheStream(localAddress , parallel boolean, dm , supplier , csm , includeLoader boolean, distributedBatchSize int, executor , registry , function )",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[5476-5765]:Block[5447-5736]"
    }, {
      "left" : "super(localAddress, parallel, dm, supplierStreamCast(supplier), csm, includeLoader, distributedBatchSize,\n                executor,\n                registry);",
      "right" : "super(localAddress, parallel, dm, supplierStreamCast(supplier), csm, includeLoader, distributedBatchSize,\n                executor,\n                registry);",
      "info" : "SuperConstructorInvocation[5486-5644]:SuperConstructorInvocation[5457-5615]"
    }, {
      "left" : "intermediateOperations.add(new MapOperation(function));",
      "right" : "intermediateOperations.add(new MapOperation(function));",
      "info" : "ExpressionStatement[5653-5708]:ExpressionStatement[5624-5679]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.MAP;",
      "right" : "iteratorOperation = IteratorOperation.MAP;",
      "info" : "ExpressionStatement[5717-5759]:ExpressionStatement[5688-5730]"
    } ]
  } ]
}, {
  "element" : "protected DistributedCacheStream(other )",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "protected DistributedCacheStream(other )",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[6133-6162]:Block[6104-6133]"
    }, {
      "left" : "super(other);",
      "right" : "super(other);",
      "info" : "SuperConstructorInvocation[6143-6156]:SuperConstructorInvocation[6114-6127]"
    } ]
  } ]
}, {
  "element" : "protected unwrap() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "protected unwrap() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[6211-6239]:Block[6182-6210]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[6221-6233]:ReturnStatement[6192-6204]"
    } ]
  } ]
}, {
  "element" : "public filter(predicate ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public filter(predicate ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[6383-6465]:Block[6354-6436]"
    }, {
      "left" : "return addIntermediateOperation(new FilterOperation<>(predicate));",
      "right" : "return addIntermediateOperation(new FilterOperation<>(predicate));",
      "info" : "ReturnStatement[6393-6459]:ReturnStatement[6364-6430]"
    } ]
  } ]
}, {
  "element" : "public map(mapper ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public map(mapper ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[6554-6780]:Block[6525-6751]"
    }, {
      "left" : "if (iteratorOperation != IteratorOperation.FLAT_MAP)",
      "right" : "if (iteratorOperation != IteratorOperation.FLAT_MAP)",
      "info" : "IfStatement[6564-6683]:IfStatement[6535-6654]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[6617-6683]:Block[6588-6654]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.MAP;",
      "right" : "iteratorOperation = IteratorOperation.MAP;",
      "info" : "ExpressionStatement[6631-6673]:ExpressionStatement[6602-6644]"
    }, {
      "left" : "return addIntermediateOperationMap(new MapOperation<>(mapper), (Stream<R1>) this);",
      "right" : "return addIntermediateOperationMap(new MapOperation<>(mapper), (Stream<R1>) this);",
      "info" : "ReturnStatement[6692-6774]:ReturnStatement[6663-6745]"
    } ]
  } ]
}, {
  "element" : "public mapToInt(mapper ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public mapToInt(mapper ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[6859-7089]:Block[6830-7060]"
    }, {
      "left" : "if (iteratorOperation != IteratorOperation.FLAT_MAP)",
      "right" : "if (iteratorOperation != IteratorOperation.FLAT_MAP)",
      "info" : "IfStatement[6869-6988]:IfStatement[6840-6959]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[6922-6988]:Block[6893-6959]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.MAP;",
      "right" : "iteratorOperation = IteratorOperation.MAP;",
      "info" : "ExpressionStatement[6936-6978]:ExpressionStatement[6907-6949]"
    }, {
      "left" : "return addIntermediateOperationMap(new MapToIntOperation<>(mapper), intCacheStream());",
      "right" : "return addIntermediateOperationMap(new MapToIntOperation<>(mapper), intCacheStream());",
      "info" : "ReturnStatement[6997-7083]:ReturnStatement[6968-7054]"
    } ]
  } ]
}, {
  "element" : "public mapToLong(mapper ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public mapToLong(mapper ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[7171-7403]:Block[7142-7374]"
    }, {
      "left" : "if (iteratorOperation != IteratorOperation.FLAT_MAP)",
      "right" : "if (iteratorOperation != IteratorOperation.FLAT_MAP)",
      "info" : "IfStatement[7181-7300]:IfStatement[7152-7271]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[7234-7300]:Block[7205-7271]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.MAP;",
      "right" : "iteratorOperation = IteratorOperation.MAP;",
      "info" : "ExpressionStatement[7248-7290]:ExpressionStatement[7219-7261]"
    }, {
      "left" : "return addIntermediateOperationMap(new MapToLongOperation<>(mapper), longCacheStream());",
      "right" : "return addIntermediateOperationMap(new MapToLongOperation<>(mapper), longCacheStream());",
      "info" : "ReturnStatement[7309-7397]:ReturnStatement[7280-7368]"
    } ]
  } ]
}, {
  "element" : "public mapToDouble(mapper ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public mapToDouble(mapper ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[7491-7727]:Block[7462-7698]"
    }, {
      "left" : "if (iteratorOperation != IteratorOperation.FLAT_MAP)",
      "right" : "if (iteratorOperation != IteratorOperation.FLAT_MAP)",
      "info" : "IfStatement[7501-7620]:IfStatement[7472-7591]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[7554-7620]:Block[7525-7591]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.MAP;",
      "right" : "iteratorOperation = IteratorOperation.MAP;",
      "info" : "ExpressionStatement[7568-7610]:ExpressionStatement[7539-7581]"
    }, {
      "left" : "return addIntermediateOperationMap(new MapToDoubleOperation<>(mapper), doubleCacheStream());",
      "right" : "return addIntermediateOperationMap(new MapToDoubleOperation<>(mapper), doubleCacheStream());",
      "info" : "ReturnStatement[7629-7721]:ReturnStatement[7600-7692]"
    } ]
  } ]
}, {
  "element" : "public flatMap(mapper ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public flatMap(mapper ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[7838-7996]:Block[7809-7967]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.FLAT_MAP;",
      "right" : "iteratorOperation = IteratorOperation.FLAT_MAP;",
      "info" : "ExpressionStatement[7848-7895]:ExpressionStatement[7819-7866]"
    }, {
      "left" : "return addIntermediateOperationMap(new FlatMapOperation<>(mapper), (Stream<R1>) this);",
      "right" : "return addIntermediateOperationMap(new FlatMapOperation<>(mapper), (Stream<R1>) this);",
      "info" : "ReturnStatement[7904-7990]:ReturnStatement[7875-7961]"
    } ]
  } ]
}, {
  "element" : "public flatMapToInt(mapper ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public flatMapToInt(mapper ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[8095-8257]:Block[8066-8228]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.FLAT_MAP;",
      "right" : "iteratorOperation = IteratorOperation.FLAT_MAP;",
      "info" : "ExpressionStatement[8105-8152]:ExpressionStatement[8076-8123]"
    }, {
      "left" : "return addIntermediateOperationMap(new FlatMapToIntOperation<>(mapper), intCacheStream());",
      "right" : "return addIntermediateOperationMap(new FlatMapToIntOperation<>(mapper), intCacheStream());",
      "info" : "ReturnStatement[8161-8251]:ReturnStatement[8132-8222]"
    } ]
  } ]
}, {
  "element" : "public flatMapToLong(mapper ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public flatMapToLong(mapper ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[8359-8523]:Block[8330-8494]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.FLAT_MAP;",
      "right" : "iteratorOperation = IteratorOperation.FLAT_MAP;",
      "info" : "ExpressionStatement[8369-8416]:ExpressionStatement[8340-8387]"
    }, {
      "left" : "return addIntermediateOperationMap(new FlatMapToLongOperation<>(mapper), longCacheStream());",
      "right" : "return addIntermediateOperationMap(new FlatMapToLongOperation<>(mapper), longCacheStream());",
      "info" : "ReturnStatement[8425-8517]:ReturnStatement[8396-8488]"
    } ]
  } ]
}, {
  "element" : "public flatMapToDouble(mapper ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public flatMapToDouble(mapper ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[8631-8799]:Block[8602-8770]"
    }, {
      "left" : "iteratorOperation = IteratorOperation.FLAT_MAP;",
      "right" : "iteratorOperation = IteratorOperation.FLAT_MAP;",
      "info" : "ExpressionStatement[8641-8688]:ExpressionStatement[8612-8659]"
    }, {
      "left" : "return addIntermediateOperationMap(new FlatMapToDoubleOperation<>(mapper), doubleCacheStream());",
      "right" : "return addIntermediateOperationMap(new FlatMapToDoubleOperation<>(mapper), doubleCacheStream());",
      "info" : "ReturnStatement[8697-8793]:ReturnStatement[8668-8764]"
    } ]
  } ]
}, {
  "element" : "public distinct() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public distinct() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[8847-9011]:Block[8818-8982]"
    }, {
      "left" : "DistinctOperation op = DistinctOperation.getInstance();",
      "right" : "DistinctOperation op = DistinctOperation.getInstance();",
      "info" : "VariableDeclarationStatement[8857-8912]:VariableDeclarationStatement[8828-8883]"
    }, {
      "left" : "markDistinct(op, IntermediateType.OBJ);",
      "right" : "markDistinct(op, IntermediateType.OBJ);",
      "info" : "ExpressionStatement[8921-8960]:ExpressionStatement[8892-8931]"
    }, {
      "left" : "return addIntermediateOperation(op);",
      "right" : "return addIntermediateOperation(op);",
      "info" : "ReturnStatement[8969-9005]:ReturnStatement[8940-8976]"
    } ]
  } ]
}, {
  "element" : "public sorted() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public sorted() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[9057-9178]:Block[9028-9149]"
    }, {
      "left" : "markSorted(IntermediateType.OBJ);",
      "right" : "markSorted(IntermediateType.OBJ);",
      "info" : "ExpressionStatement[9067-9100]:ExpressionStatement[9038-9071]"
    }, {
      "left" : "return addIntermediateOperation(SortedOperation.getInstance());",
      "right" : "return addIntermediateOperation(SortedOperation.getInstance());",
      "info" : "ReturnStatement[9109-9172]:ReturnStatement[9080-9143]"
    } ]
  } ]
}, {
  "element" : "public sorted(comparator ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public sorted(comparator ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[9256-9391]:Block[9227-9362]"
    }, {
      "left" : "markSorted(IntermediateType.OBJ);",
      "right" : "markSorted(IntermediateType.OBJ);",
      "info" : "ExpressionStatement[9266-9299]:ExpressionStatement[9237-9270]"
    }, {
      "left" : "return addIntermediateOperation(new SortedComparatorOperation<>(comparator));",
      "right" : "return addIntermediateOperation(new SortedComparatorOperation<>(comparator));",
      "info" : "ReturnStatement[9308-9385]:ReturnStatement[9279-9356]"
    } ]
  } ]
}, {
  "element" : "public peek(action ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public peek(action ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[9461-9538]:Block[9432-9509]"
    }, {
      "left" : "return addIntermediateOperation(new PeekOperation<>(action));",
      "right" : "return addIntermediateOperation(new PeekOperation<>(action));",
      "info" : "ReturnStatement[9471-9532]:ReturnStatement[9442-9503]"
    } ]
  } ]
}, {
  "element" : "public limit(maxSize long) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public limit(maxSize long) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[9595-9754]:Block[9566-9725]"
    }, {
      "left" : "LimitOperation op = new LimitOperation<>(maxSize);",
      "right" : "LimitOperation op = new LimitOperation<>(maxSize);",
      "info" : "VariableDeclarationStatement[9605-9655]:VariableDeclarationStatement[9576-9626]"
    }, {
      "left" : "markDistinct(op, IntermediateType.OBJ);",
      "right" : "markDistinct(op, IntermediateType.OBJ);",
      "info" : "ExpressionStatement[9664-9703]:ExpressionStatement[9635-9674]"
    }, {
      "left" : "return addIntermediateOperation(op);",
      "right" : "return addIntermediateOperation(op);",
      "info" : "ReturnStatement[9712-9748]:ReturnStatement[9683-9719]"
    } ]
  } ]
}, {
  "element" : "public skip(n long) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public skip(n long) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[9804-9947]:Block[9775-9918]"
    }, {
      "left" : "SkipOperation op = new SkipOperation<>(n);",
      "right" : "SkipOperation op = new SkipOperation<>(n);",
      "info" : "VariableDeclarationStatement[9814-9856]:VariableDeclarationStatement[9785-9827]"
    }, {
      "left" : "markSkip(IntermediateType.OBJ);",
      "right" : "markSkip(IntermediateType.OBJ);",
      "info" : "ExpressionStatement[9865-9896]:ExpressionStatement[9836-9867]"
    }, {
      "left" : "return addIntermediateOperation(op);",
      "right" : "return addIntermediateOperation(op);",
      "info" : "ReturnStatement[9905-9941]:ReturnStatement[9876-9912]"
    } ]
  } ]
}, {
  "element" : "public reduce(identity , accumulator ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public reduce(identity , accumulator ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[10064-10186]:Block[10035-10157]"
    }, {
      "left" : "return performOperation(TerminalFunctions.reduceFunction(identity, accumulator), true, accumulator, null);",
      "right" : "return performOperation(TerminalFunctions.reduceFunction(identity, accumulator), true, accumulator, null);",
      "info" : "ReturnStatement[10074-10180]:ReturnStatement[10045-10151]"
    } ]
  } ]
}, {
  "element" : "public reduce(accumulator ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public reduce(accumulator ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[10263-10713]:Block[10234-10684]"
    }, {
      "left" : "R value = performOperation(TerminalFunctions.reduceFunction(accumulator), true,\n                (e1, e2) -> {\n                    if (e1 != null) {\n                        if (e2 != null) {\n                            return accumulator.apply(e1, e2);\n                        }\n                        return e1;\n                    }\n                    return e2;\n                }, null);",
      "right" : "R value = performOperation(TerminalFunctions.reduceFunction(accumulator), true,\n                (e1, e2) -> {\n                    if (e1 != null) {\n                        if (e2 != null) {\n                            return accumulator.apply(e1, e2);\n                        }\n                        return e1;\n                    }\n                    return e2;\n                }, null);",
      "info" : "VariableDeclarationStatement[10273-10664]:VariableDeclarationStatement[10244-10635]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[10381-10656]:Block[10352-10627]"
    }, {
      "left" : "if (e1 != null)",
      "right" : "if (e1 != null)",
      "info" : "IfStatement[10403-10607]:IfStatement[10374-10578]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[10419-10607]:Block[10390-10578]"
    }, {
      "left" : "if (e2 != null)",
      "right" : "if (e2 != null)",
      "info" : "IfStatement[10445-10550]:IfStatement[10416-10521]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[10461-10550]:Block[10432-10521]"
    }, {
      "left" : "return accumulator.apply(e1, e2);",
      "right" : "return accumulator.apply(e1, e2);",
      "info" : "ReturnStatement[10491-10524]:ReturnStatement[10462-10495]"
    }, {
      "left" : "return e1;",
      "right" : "return e1;",
      "info" : "ReturnStatement[10575-10585]:ReturnStatement[10546-10556]"
    }, {
      "left" : "return e2;",
      "right" : "return e2;",
      "info" : "ReturnStatement[10628-10638]:ReturnStatement[10599-10609]"
    }, {
      "left" : "return Optional.ofNullable(value);",
      "right" : "return Optional.ofNullable(value);",
      "info" : "ReturnStatement[10673-10707]:ReturnStatement[10644-10678]"
    } ]
  } ]
}, {
  "element" : "public reduce(identity , accumulator , combiner ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public reduce(identity , accumulator , combiner ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[10834-10979]:Block[10805-10950]"
    }, {
      "left" : "return performOperation(TerminalFunctions.reduceFunction(identity, accumulator, combiner), true, combiner,\n                null);",
      "right" : "return performOperation(TerminalFunctions.reduceFunction(identity, accumulator, combiner), true, combiner,\n                null);",
      "info" : "ReturnStatement[10844-10973]:ReturnStatement[10815-10944]"
    } ]
  } ]
}, {
  "element" : "public collect(supplier , accumulator , combiner ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public collect(supplier , accumulator , combiner ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[11664-11909]:Block[11635-11880]"
    }, {
      "left" : "return performOperation(TerminalFunctions.collectFunction(supplier, accumulator, combiner), true,\n                (e1, e2) -> {\n                    combiner.accept(e1, e2);\n                    return e1;\n                }, null);",
      "right" : "return performOperation(TerminalFunctions.collectFunction(supplier, accumulator, combiner), true,\n                (e1, e2) -> {\n                    combiner.accept(e1, e2);\n                    return e1;\n                }, null);",
      "info" : "ReturnStatement[11674-11903]:ReturnStatement[11645-11874]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[11800-11895]:Block[11771-11866]"
    }, {
      "left" : "combiner.accept(e1, e2);",
      "right" : "combiner.accept(e1, e2);",
      "info" : "ExpressionStatement[11822-11846]:ExpressionStatement[11793-11817]"
    }, {
      "left" : "return e1;",
      "right" : "return e1;",
      "info" : "ReturnStatement[11867-11877]:ReturnStatement[11838-11848]"
    } ]
  } ]
}, {
  "element" : "package IdentifyFinishCollector(realCollector )",
  "className" : "IdentifyFinishCollector",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "package IdentifyFinishCollector(realCollector )",
      "className" : "IdentifyFinishCollector",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[12221-12280]:Block[12192-12251]"
    }, {
      "left" : "this.realCollector = realCollector;",
      "right" : "this.realCollector = realCollector;",
      "info" : "ExpressionStatement[12235-12270]:ExpressionStatement[12206-12241]"
    } ]
  } ]
}, {
  "element" : "public supplier() : ",
  "className" : "IdentifyFinishCollector",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public supplier() : ",
      "className" : "IdentifyFinishCollector",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[12338-12394]:Block[12309-12365]"
    }, {
      "left" : "return realCollector.supplier();",
      "right" : "return realCollector.supplier();",
      "info" : "ReturnStatement[12352-12384]:ReturnStatement[12323-12355]"
    } ]
  } ]
}, {
  "element" : "public accumulator() : ",
  "className" : "IdentifyFinishCollector",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public accumulator() : ",
      "className" : "IdentifyFinishCollector",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[12460-12519]:Block[12431-12490]"
    }, {
      "left" : "return realCollector.accumulator();",
      "right" : "return realCollector.accumulator();",
      "info" : "ReturnStatement[12474-12509]:ReturnStatement[12445-12480]"
    } ]
  } ]
}, {
  "element" : "public combiner() : ",
  "className" : "IdentifyFinishCollector",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public combiner() : ",
      "className" : "IdentifyFinishCollector",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[12583-12639]:Block[12554-12610]"
    }, {
      "left" : "return realCollector.combiner();",
      "right" : "return realCollector.combiner();",
      "info" : "ReturnStatement[12597-12629]:ReturnStatement[12568-12600]"
    } ]
  } ]
}, {
  "element" : "public finisher() : ",
  "className" : "IdentifyFinishCollector",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public finisher() : ",
      "className" : "IdentifyFinishCollector",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[12700-12736]:Block[12671-12707]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12714-12726]:ReturnStatement[12685-12697]"
    } ]
  } ]
}, {
  "element" : "public characteristics() : ",
  "className" : "IdentifyFinishCollector",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public characteristics() : ",
      "className" : "IdentifyFinishCollector",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[12810-13229]:Block[12781-13200]"
    }, {
      "left" : "Set<Characteristics> characteristics = realCollector.characteristics();",
      "right" : "Set<Characteristics> characteristics = realCollector.characteristics();",
      "info" : "VariableDeclarationStatement[12824-12895]:VariableDeclarationStatement[12795-12866]"
    }, {
      "left" : "if (characteristics.size() == 0)",
      "right" : "if (characteristics.size() == 0)",
      "info" : "IfStatement[12908-13219]:IfStatement[12879-13190]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[12941-13024]:Block[12912-12995]"
    }, {
      "left" : "return EnumSet.of(Characteristics.IDENTITY_FINISH);",
      "right" : "return EnumSet.of(Characteristics.IDENTITY_FINISH);",
      "info" : "ReturnStatement[12959-13010]:ReturnStatement[12930-12981]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[13030-13219]:Block[13001-13190]"
    }, {
      "left" : "Set<Characteristics> tweaked = EnumSet.copyOf(characteristics);",
      "right" : "Set<Characteristics> tweaked = EnumSet.copyOf(characteristics);",
      "info" : "VariableDeclarationStatement[13048-13111]:VariableDeclarationStatement[13019-13082]"
    }, {
      "left" : "tweaked.add(Characteristics.IDENTITY_FINISH);",
      "right" : "tweaked.add(Characteristics.IDENTITY_FINISH);",
      "info" : "ExpressionStatement[13128-13173]:ExpressionStatement[13099-13144]"
    }, {
      "left" : "return tweaked;",
      "right" : "return tweaked;",
      "info" : "ReturnStatement[13190-13205]:ReturnStatement[13161-13176]"
    } ]
  } ]
}, {
  "element" : "public writeObject(output , object ) : void",
  "className" : "IdentityFinishCollectorExternalizer",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public writeObject(output , object ) : void",
      "className" : "IdentityFinishCollectorExternalizer",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[13482-13555]:Block[13453-13526]"
    }, {
      "left" : "output.writeObject(object.realCollector);",
      "right" : "output.writeObject(object.realCollector);",
      "info" : "ExpressionStatement[13500-13541]:ExpressionStatement[13471-13512]"
    } ]
  } ]
}, {
  "element" : "public readObject(input ) : ",
  "className" : "IdentityFinishCollectorExternalizer",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public readObject(input ) : ",
      "className" : "IdentityFinishCollectorExternalizer",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[13695-13794]:Block[13666-13765]"
    }, {
      "left" : "return new IdentifyFinishCollector((Collector) input.readObject());",
      "right" : "return new IdentifyFinishCollector((Collector) input.readObject());",
      "info" : "ReturnStatement[13713-13780]:ReturnStatement[13684-13751]"
    } ]
  } ]
}, {
  "element" : "public collect(collector ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public collect(collector ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[13895-14954]:Block[13866-14925]"
    }, {
      "left" : "if (sorted)",
      "right" : "if (sorted)",
      "info" : "IfStatement[13905-14177]:IfStatement[13876-14148]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[13917-14177]:Block[13888-14148]"
    }, {
      "left" : "sorted = !collector.characteristics().contains(Collector.Characteristics.UNORDERED);",
      "right" : "sorted = !collector.characteristics().contains(Collector.Characteristics.UNORDERED);",
      "info" : "ExpressionStatement[14083-14167]:ExpressionStatement[14054-14138]"
    }, {
      "left" : "if (collector.characteristics().contains(Collector.Characteristics.IDENTITY_FINISH))",
      "right" : "if (collector.characteristics().contains(Collector.Characteristics.IDENTITY_FINISH))",
      "info" : "IfStatement[14344-14948]:IfStatement[14315-14919]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[14429-14607]:Block[14400-14578]"
    }, {
      "left" : "return performOperation(TerminalFunctions.collectorFunction(collector), true,\n                    (BinaryOperator<R1>) collector.combiner(), null, false);",
      "right" : "return performOperation(TerminalFunctions.collectorFunction(collector), true,\n                    (BinaryOperator<R1>) collector.combiner(), null, false);",
      "info" : "ReturnStatement[14443-14597]:ReturnStatement[14414-14568]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[14613-14948]:Block[14584-14919]"
    }, {
      "left" : "A intermediateResult = performOperation(TerminalFunctions.collectorFunction(\n                    new IdentifyFinishCollector<>(collector)), true, collector.combiner(), null, false);",
      "right" : "A intermediateResult = performOperation(TerminalFunctions.collectorFunction(\n                    new IdentifyFinishCollector<>(collector)), true, collector.combiner(), null, false);",
      "info" : "VariableDeclarationStatement[14690-14871]:VariableDeclarationStatement[14661-14842]"
    }, {
      "left" : "return collector.finisher().apply(intermediateResult);",
      "right" : "return collector.finisher().apply(intermediateResult);",
      "info" : "ReturnStatement[14884-14938]:ReturnStatement[14855-14909]"
    } ]
  } ]
}, {
  "element" : "public min(comparator ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public min(comparator ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15031-15530]:Block[15002-15501]"
    }, {
      "left" : "R value = performOperation(TerminalFunctions.minFunction(comparator), false,\n                (e1, e2) -> {\n                    if (e1 != null) {\n                        if (e2 != null) {\n                            return comparator.compare(e1, e2) > 0 ? e2 : e1;\n                        } else {\n                            return e1;\n                        }\n                    }\n                    return e2;\n                }, null);",
      "right" : "R value = performOperation(TerminalFunctions.minFunction(comparator), false,\n                (e1, e2) -> {\n                    if (e1 != null) {\n                        if (e2 != null) {\n                            return comparator.compare(e1, e2) > 0 ? e2 : e1;\n                        } else {\n                            return e1;\n                        }\n                    }\n                    return e2;\n                }, null);",
      "info" : "VariableDeclarationStatement[15041-15481]:VariableDeclarationStatement[15012-15452]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15146-15473]:Block[15117-15444]"
    }, {
      "left" : "if (e1 != null)",
      "right" : "if (e1 != null)",
      "info" : "IfStatement[15168-15424]:IfStatement[15139-15395]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15184-15424]:Block[15155-15395]"
    }, {
      "left" : "if (e2 != null)",
      "right" : "if (e2 != null)",
      "info" : "IfStatement[15210-15402]:IfStatement[15181-15373]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15226-15330]:Block[15197-15301]"
    }, {
      "left" : "return comparator.compare(e1, e2) > 0 ? e2 : e1;",
      "right" : "return comparator.compare(e1, e2) > 0 ? e2 : e1;",
      "info" : "ReturnStatement[15256-15304]:ReturnStatement[15227-15275]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15336-15402]:Block[15307-15373]"
    }, {
      "left" : "return e1;",
      "right" : "return e1;",
      "info" : "ReturnStatement[15366-15376]:ReturnStatement[15337-15347]"
    }, {
      "left" : "return e2;",
      "right" : "return e2;",
      "info" : "ReturnStatement[15445-15455]:ReturnStatement[15416-15426]"
    }, {
      "left" : "return Optional.ofNullable(value);",
      "right" : "return Optional.ofNullable(value);",
      "info" : "ReturnStatement[15490-15524]:ReturnStatement[15461-15495]"
    } ]
  } ]
}, {
  "element" : "public max(comparator ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public max(comparator ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15607-16106]:Block[15578-16077]"
    }, {
      "left" : "R value = performOperation(TerminalFunctions.maxFunction(comparator), false,\n                (e1, e2) -> {\n                    if (e1 != null) {\n                        if (e2 != null) {\n                            return comparator.compare(e1, e2) > 0 ? e1 : e2;\n                        } else {\n                            return e1;\n                        }\n                    }\n                    return e2;\n                }, null);",
      "right" : "R value = performOperation(TerminalFunctions.maxFunction(comparator), false,\n                (e1, e2) -> {\n                    if (e1 != null) {\n                        if (e2 != null) {\n                            return comparator.compare(e1, e2) > 0 ? e1 : e2;\n                        } else {\n                            return e1;\n                        }\n                    }\n                    return e2;\n                }, null);",
      "info" : "VariableDeclarationStatement[15617-16057]:VariableDeclarationStatement[15588-16028]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15722-16049]:Block[15693-16020]"
    }, {
      "left" : "if (e1 != null)",
      "right" : "if (e1 != null)",
      "info" : "IfStatement[15744-16000]:IfStatement[15715-15971]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15760-16000]:Block[15731-15971]"
    }, {
      "left" : "if (e2 != null)",
      "right" : "if (e2 != null)",
      "info" : "IfStatement[15786-15978]:IfStatement[15757-15949]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15802-15906]:Block[15773-15877]"
    }, {
      "left" : "return comparator.compare(e1, e2) > 0 ? e1 : e2;",
      "right" : "return comparator.compare(e1, e2) > 0 ? e1 : e2;",
      "info" : "ReturnStatement[15832-15880]:ReturnStatement[15803-15851]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[15912-15978]:Block[15883-15949]"
    }, {
      "left" : "return e1;",
      "right" : "return e1;",
      "info" : "ReturnStatement[15942-15952]:ReturnStatement[15913-15923]"
    }, {
      "left" : "return e2;",
      "right" : "return e2;",
      "info" : "ReturnStatement[16021-16031]:ReturnStatement[15992-16002]"
    }, {
      "left" : "return Optional.ofNullable(value);",
      "right" : "return Optional.ofNullable(value);",
      "info" : "ReturnStatement[16066-16100]:ReturnStatement[16037-16071]"
    } ]
  } ]
}, {
  "element" : "public anyMatch(predicate ) : boolean",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public anyMatch(predicate ) : boolean",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[16182-16304]:Block[16153-16275]"
    }, {
      "left" : "return performOperation(TerminalFunctions.anyMatchFunction(predicate), false, Boolean::logicalOr, b -> b);",
      "right" : "return performOperation(TerminalFunctions.anyMatchFunction(predicate), false, Boolean::logicalOr, b -> b);",
      "info" : "ReturnStatement[16192-16298]:ReturnStatement[16163-16269]"
    } ]
  } ]
}, {
  "element" : "public allMatch(predicate ) : boolean",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public allMatch(predicate ) : boolean",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[16380-16504]:Block[16351-16475]"
    }, {
      "left" : "return performOperation(TerminalFunctions.allMatchFunction(predicate), false, Boolean::logicalAnd, b -> !b);",
      "right" : "return performOperation(TerminalFunctions.allMatchFunction(predicate), false, Boolean::logicalAnd, b -> !b);",
      "info" : "ReturnStatement[16390-16498]:ReturnStatement[16361-16469]"
    } ]
  } ]
}, {
  "element" : "public noneMatch(predicate ) : boolean",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public noneMatch(predicate ) : boolean",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[16581-16706]:Block[16552-16677]"
    }, {
      "left" : "return performOperation(TerminalFunctions.noneMatchFunction(predicate), false, Boolean::logicalAnd, b -> !b);",
      "right" : "return performOperation(TerminalFunctions.noneMatchFunction(predicate), false, Boolean::logicalAnd, b -> !b);",
      "info" : "ReturnStatement[16591-16700]:ReturnStatement[16562-16671]"
    } ]
  } ]
}, {
  "element" : "public findFirst() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public findFirst() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[16757-17320]:Block[16728-17291]"
    }, {
      "left" : "if (intermediateType.shouldUseIntermediate(sorted, distinct))",
      "right" : "if (intermediateType.shouldUseIntermediate(sorted, distinct))",
      "info" : "IfStatement[16767-17314]:IfStatement[16738-17285]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[16829-17267]:Block[16800-17238]"
    }, {
      "left" : "Iterator<R> iterator = iterator();",
      "right" : "Iterator<R> iterator = iterator();",
      "info" : "VariableDeclarationStatement[16843-16877]:VariableDeclarationStatement[16814-16848]"
    }, {
      "left" : "SingleRunOperation<Optional<R>, R, Stream<R>> op = new SingleRunOperation<>(localIntermediateOperations,\n                    () -> StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                            iterator, Spliterator.CONCURRENT | Spliterator.NONNULL), parallel),\n                    s -> s.findFirst());",
      "right" : "SingleRunOperation<Optional<R>, R, Stream<R>> op = new SingleRunOperation<>(localIntermediateOperations,\n                    () -> StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                            iterator, Spliterator.CONCURRENT | Spliterator.NONNULL), parallel),\n                    s -> s.findFirst());",
      "info" : "VariableDeclarationStatement[16890-17215]:VariableDeclarationStatement[16861-17186]"
    }, {
      "left" : "return op.performOperation();",
      "right" : "return op.performOperation();",
      "info" : "ReturnStatement[17228-17257]:ReturnStatement[17199-17228]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[17273-17314]:Block[17244-17285]"
    }, {
      "left" : "return findAny();",
      "right" : "return findAny();",
      "info" : "ReturnStatement[17287-17304]:ReturnStatement[17258-17275]"
    } ]
  } ]
}, {
  "element" : "public findAny() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public findAny() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[17369-17565]:Block[17340-17536]"
    }, {
      "left" : "R value = performOperation(TerminalFunctions.findAnyFunction(), false, (r1, r2) -> r1 == null ? r2 : r1,\n                a -> a != null);",
      "right" : "R value = performOperation(TerminalFunctions.findAnyFunction(), false, (r1, r2) -> r1 == null ? r2 : r1,\n                a -> a != null);",
      "info" : "VariableDeclarationStatement[17379-17516]:VariableDeclarationStatement[17350-17487]"
    }, {
      "left" : "return Optional.ofNullable(value);",
      "right" : "return Optional.ofNullable(value);",
      "info" : "ReturnStatement[17525-17559]:ReturnStatement[17496-17530]"
    } ]
  } ]
}, {
  "element" : "public count() : long",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public count() : long",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[17605-17713]:Block[17576-17684]"
    }, {
      "left" : "return performOperation(TerminalFunctions.countFunction(), true, (l1, l2) -> l1 + l2, null);",
      "right" : "return performOperation(TerminalFunctions.countFunction(), true, (l1, l2) -> l1 + l2, null);",
      "info" : "ReturnStatement[17615-17707]:ReturnStatement[17586-17678]"
    } ]
  } ]
}, {
  "element" : "public iterator() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public iterator() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[17820-18037]:Block[17791-18008]"
    }, {
      "left" : "if (intermediateType.shouldUseIntermediate(sorted, distinct))",
      "right" : "if (intermediateType.shouldUseIntermediate(sorted, distinct))",
      "info" : "IfStatement[17830-18031]:IfStatement[17801-18002]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[17892-17977]:Block[17863-17948]"
    }, {
      "left" : "return performIntermediateRemoteOperation(s -> s.iterator());",
      "right" : "return performIntermediateRemoteOperation(s -> s.iterator());",
      "info" : "ReturnStatement[17906-17967]:ReturnStatement[17877-17938]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[17983-18031]:Block[17954-18002]"
    }, {
      "left" : "return remoteIterator();",
      "right" : "return remoteIterator();",
      "info" : "ReturnStatement[17997-18021]:ReturnStatement[17968-17992]"
    } ]
  } ]
}, {
  "element" : "package remoteIterator() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "package remoteIterator() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[18072-25975]:Block[18043-19001]"
    }, {
      "left" : "BlockingQueue<R> queue = new ArrayBlockingQueue<>(distributedBatchSize);",
      "right" : "BlockingQueue<R> queue = new ArrayBlockingQueue<>(distributedBatchSize);",
      "info" : "VariableDeclarationStatement[18082-18154]:VariableDeclarationStatement[18053-18125]"
    }, {
      "left" : "final AtomicBoolean complete = new AtomicBoolean();",
      "right" : "final AtomicBoolean complete = new AtomicBoolean();",
      "info" : "VariableDeclarationStatement[18163-18214]:VariableDeclarationStatement[18134-18185]"
    }, {
      "left" : "Lock nextLock = new ReentrantLock();",
      "right" : "Lock nextLock = new ReentrantLock();",
      "info" : "VariableDeclarationStatement[18223-18259]:VariableDeclarationStatement[18194-18230]"
    }, {
      "left" : "Condition nextCondition = nextLock.newCondition();",
      "right" : "Condition nextCondition = nextLock.newCondition();",
      "info" : "VariableDeclarationStatement[18268-18318]:VariableDeclarationStatement[18239-18289]"
    }, {
      "left" : "Consumer<R> consumer = new HandOffConsumer(queue, complete, nextLock, nextCondition);",
      "right" : "Consumer<R> consumer = new HandOffConsumer(queue, complete, nextLock, nextCondition);",
      "info" : "VariableDeclarationStatement[18327-18412]:VariableDeclarationStatement[18298-18383]"
    }, {
      "left" : "IteratorSupplier<R> supplier = new IteratorSupplier(queue, complete, nextLock, nextCondition, csm);",
      "right" : "IteratorSupplier<R> supplier = new IteratorSupplier(queue, complete, nextLock, nextCondition, csm);",
      "info" : "VariableDeclarationStatement[18421-18520]:VariableDeclarationStatement[18392-18491]"
    }, {
      "left" : "boolean iteratorParallelDistribute = parallelDistribution == null ? false : parallelDistribution;",
      "right" : "boolean iteratorParallelDistribute = parallelDistribution == null ? false : parallelDistribution;",
      "info" : "VariableDeclarationStatement[18529-18626]:VariableDeclarationStatement[18500-18597]"
    }, {
      "left" : "if (rehashAware)",
      "right" : "if (rehashAware)",
      "info" : "IfStatement[18636-25801]:IfStatement[18607-18827]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[18653-23866]:Block[18624-18727]"
    }, {
      "left" : "executor.execute(() -> {\n                try {\n                    log.tracef(\"Thread %s submitted iterator request for stream\", thread);\n                    Set<Integer> segmentsToProcess = segmentsToFilter == null\n                            ? new ReplicatedConsistentHash.RangeSet(segmentInfoCH.getNumSegments())\n                            : segmentsToFilter;\n                    do {\n                        ConsistentHash ch = dm.getReadConsistentHash();\n                        boolean runLocal = ch.getMembers().contains(localAddress);\n                        Set<Integer> segments;\n                        Set<Object> excludedKeys;\n                        if (runLocal) {\n                            segments = ch.getPrimarySegmentsForOwner(localAddress);\n                            segments.retainAll(segmentsToProcess);\n\n                            excludedKeys = segments.stream().flatMap(s -> results.referenceArray.get(s).stream())\n                                    .collect(Collectors.toSet());\n                        } else {\n                            segments = null;\n                            excludedKeys = Collections.emptySet();\n                        }\n                        KeyTrackingTerminalOperation<Object, R, Object> op = iteratorOperation.getOperation(\n                                intermediateOperations, supplierForSegments(ch, segmentsToProcess, excludedKeys),\n                                distributedBatchSize);\n                        UUID id = csm.remoteStreamOperationRehashAware(iteratorParallelDistribute, parallel, ch,\n                                segmentsToProcess, keysToFilter,\n                                new AtomicReferenceArrayToMap<>(results.referenceArray),\n                                includeLoader, op, results);\n                        supplier.pending = id;\n                        try {\n                            if (runLocal) {\n                                Collection<CacheEntry<Object, Object>> localValue = op\n                                        .performOperationRehashAware(results);\n                                // TODO: we can do this more efficiently - this hampers performance during\n                                // rehash\n                                if (dm.getReadConsistentHash().equals(ch)) {\n                                    log.tracef(\"Found local values %s for id %s\", localValue.size(), id);\n                                    results.onCompletion(null, segments, localValue);\n                                } else {\n                                    Set<Integer> ourSegments = ch.getPrimarySegmentsForOwner(localAddress);\n                                    ourSegments.retainAll(segmentsToProcess);\n                                    log.tracef(\"CH changed - making %s segments suspect for identifier %s\", ourSegments,\n                                            id);\n                                    results.onSegmentsLost(ourSegments);\n                                }\n                            }\n                            try {\n                                if (!csm.awaitCompletion(id, 30, TimeUnit.SECONDS)) {\n                                    throw new TimeoutException();\n                                }\n                            } catch (InterruptedException e) {\n                                throw new CacheException(e);\n                            }\n                            if (!results.lostSegments.isEmpty()) {\n                                segmentsToProcess = new HashSet<>(results.lostSegments);\n                                results.lostSegments.clear();\n                                log.tracef(\"Found %s lost segments for identifier %s\", segmentsToProcess, id);\n                            } else {\n                                supplier.close();\n                                log.tracef(\"Finished rehash aware operation for id %s\", id);\n                            }\n                        } finally {\n                            csm.forgetOperation(id);\n                        }\n                    } while (!complete.get());\n                } catch (CacheException e) {\n                    log.trace(\"Encountered local cache exception for stream\", e);\n                    supplier.close(e);\n                } catch (Throwable t) {\n                    log.trace(\"Encountered local throwable for stream\", t);\n                    supplier.close(new CacheException(t));\n                }\n            });",
      "right" : "rehashAwareIteration(complete, consumer, supplier, iteratorParallelDistribute);",
      "info" : "ExpressionStatement[19378-23856]:ExpressionStatement[18638-18717]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[23872-25801]:Block[18733-18827]"
    }, {
      "left" : "executor.execute(() -> {\n                try {\n                    log.tracef(\"Thread %s submitted iterator request for stream\", thread);\n                    UUID id = csm.remoteStreamOperation(iteratorParallelDistribute, parallel, ch, segmentsToFilter,\n                            keysToFilter, Collections.emptyMap(), includeLoader, op, remoteResults);\n                    supplier.pending = id;\n                    try {\n                        Collection<R> localValue = op.performOperation(remoteResults);\n                        remoteResults.onCompletion(null, Collections.emptySet(), localValue);\n                        try {\n                            if (!csm.awaitCompletion(id, 30, TimeUnit.SECONDS)) {\n                                throw new TimeoutException();\n                            }\n                        } catch (InterruptedException e) {\n                            throw new CacheException(e);\n                        }\n\n                        supplier.close();\n                    } finally {\n                        csm.forgetOperation(id);\n                    }\n                } catch (CacheException e) {\n                    log.trace(\"Encountered local cache exception for stream\", e);\n                    supplier.close(e);\n                } catch (Throwable t) {\n                    log.trace(\"Encountered local throwable for stream\", t);\n                    supplier.close(new CacheException(t));\n                }\n            });",
      "right" : "ignoreRehashIteration(consumer, supplier, iteratorParallelDistribute);",
      "info" : "ExpressionStatement[24320-25791]:ExpressionStatement[18747-18817]"
    }, {
      "left" : "CloseableIterator<R> closeableIterator = new CloseableSuppliedIterator<>(supplier);",
      "right" : "CloseableIterator<R> closeableIterator = new CloseableSuppliedIterator<>(supplier);",
      "info" : "VariableDeclarationStatement[25811-25894]:VariableDeclarationStatement[18837-18920]"
    }, {
      "left" : "onClose(() -> supplier.close());",
      "right" : "onClose(() -> supplier.close());",
      "info" : "ExpressionStatement[25903-25935]:ExpressionStatement[18929-18961]"
    }, {
      "left" : "return closeableIterator;",
      "right" : "return closeableIterator;",
      "info" : "ReturnStatement[25944-25969]:ReturnStatement[18970-18995]"
    } ]
  }, {
    "rightProgramElement" : {
      "element" : "private rehashAwareIteration(complete , consumer , supplier , iteratorParallelDistribute boolean) : void",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : false
    },
    "abstractMappingList" : [ {
      "left" : "ConsistentHash segmentInfoCH = dm.getReadConsistentHash();",
      "right" : "ConsistentHash segmentInfoCH = dm.getReadConsistentHash();",
      "info" : "VariableDeclarationStatement[18667-18725]:VariableDeclarationStatement[21353-21411]"
    }, {
      "left" : "SegmentListenerNotifier<R> listenerNotifier;",
      "right" : "SegmentListenerNotifier<R> listenerNotifier;",
      "info" : "VariableDeclarationStatement[18738-18782]:VariableDeclarationStatement[21420-21464]"
    }, {
      "left" : "if (segmentCompletionListener != null)",
      "right" : "if (segmentCompletionListener != null)",
      "info" : "IfStatement[18795-19085]:IfStatement[21473-21739]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[18834-19023]:Block[21512-21685]"
    }, {
      "left" : "listenerNotifier = new SegmentListenerNotifier<>(\n                        segmentCompletionListener);",
      "right" : "listenerNotifier = new SegmentListenerNotifier<>(\n                    segmentCompletionListener);",
      "info" : "ExpressionStatement[18852-18953]:ExpressionStatement[21526-21623]"
    }, {
      "left" : "supplier.setConsumer(listenerNotifier);",
      "right" : "supplier.setConsumer(listenerNotifier);",
      "info" : "ExpressionStatement[18970-19009]:ExpressionStatement[21636-21675]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[19029-19085]:Block[21691-21739]"
    }, {
      "left" : "listenerNotifier = null;",
      "right" : "listenerNotifier = null;",
      "info" : "ExpressionStatement[19047-19071]:ExpressionStatement[21705-21729]"
    }, {
      "left" : "KeyTrackingConsumer<Object, R> results = new KeyTrackingConsumer<>(segmentInfoCH,\n                    iteratorOperation.wrapConsumer(consumer), iteratorOperation.getFunction(),\n                    listenerNotifier);",
      "right" : "KeyTrackingConsumer<Object, R> results = new KeyTrackingConsumer<>(segmentInfoCH,\n                iteratorOperation.wrapConsumer(consumer), iteratorOperation.getFunction(),\n                listenerNotifier);",
      "info" : "VariableDeclarationStatement[19098-19313]:VariableDeclarationStatement[21748-21955]"
    }, {
      "left" : "Set<Integer> segmentsToProcess = segmentsToFilter == null\n                            ? new ReplicatedConsistentHash.RangeSet(segmentInfoCH.getNumSegments())\n                            : segmentsToFilter;",
      "right" : "Set<Integer> segmentsToProcess = segmentsToFilter == null\n                        ? new ReplicatedConsistentHash.RangeSet(segmentInfoCH.getNumSegments())\n                        : segmentsToFilter;",
      "info" : "VariableDeclarationStatement[19536-19741]:VariableDeclarationStatement[22158-22355]"
    }, {
      "left" : "ConsistentHash ch = dm.getReadConsistentHash();",
      "right" : "ConsistentHash ch = dm.getReadConsistentHash();",
      "info" : "VariableDeclarationStatement[19791-19838]:VariableDeclarationStatement[22397-22444]"
    }, {
      "left" : "boolean runLocal = ch.getMembers().contains(localAddress);",
      "right" : "boolean runLocal = ch.getMembers().contains(localAddress);",
      "info" : "VariableDeclarationStatement[19863-19921]:VariableDeclarationStatement[22465-22523]"
    }, {
      "left" : "Set<Integer> segments;",
      "right" : "Set<Integer> segments;",
      "info" : "VariableDeclarationStatement[19946-19968]:VariableDeclarationStatement[22544-22566]"
    }, {
      "left" : "Set<Object> excludedKeys;",
      "right" : "Set<Object> excludedKeys;",
      "info" : "VariableDeclarationStatement[19993-20018]:VariableDeclarationStatement[22587-22612]"
    }, {
      "left" : "segments.retainAll(segmentsToProcess);",
      "right" : "segments.retainAll(segmentsToProcess);",
      "info" : "ExpressionStatement[20171-20209]:ExpressionStatement[23037-23075]"
    }, {
      "left" : "excludedKeys = segments.stream().flatMap(s -> results.referenceArray.get(s).stream())\n                                    .collect(Collectors.toSet());",
      "right" : "excludedKeys = segments.stream().flatMap(s -> results.referenceArray.get(s).stream())\n                                .collect(Collectors.toSet());",
      "info" : "ExpressionStatement[20239-20390]:ExpressionStatement[23101-23248]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[20422-20561]:Block[23276-23403]"
    }, {
      "left" : "segments = null;",
      "right" : "segments = null;",
      "info" : "ExpressionStatement[20452-20468]:ExpressionStatement[23302-23318]"
    }, {
      "left" : "excludedKeys = Collections.emptySet();",
      "right" : "excludedKeys = Collections.emptySet();",
      "info" : "ExpressionStatement[20497-20535]:ExpressionStatement[23343-23381]"
    }, {
      "left" : "UUID id = csm.remoteStreamOperationRehashAware(iteratorParallelDistribute, parallel, ch,\n                                segmentsToProcess, keysToFilter,\n                                new AtomicReferenceArrayToMap<>(results.referenceArray),\n                                includeLoader, op, results);",
      "right" : "UUID id = csm.remoteStreamOperationRehashAware(iteratorParallelDistribute, parallel, ch,\n                                segmentsToProcess, keysToFilter,\n                                new AtomicReferenceArrayToMap<>(results.referenceArray),\n                                includeLoader, op, results);",
      "info" : "VariableDeclarationStatement[20864-21167]:VariableDeclarationStatement[23772-24075]"
    } ]
  }, {
    "rightProgramElement" : {
      "element" : "private performLocalRehashAwareOperation(results , segmentsToProcess , ch , segments , op , ownedSegmentsSupplier , id ) : void",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : false
    },
    "abstractMappingList" : [ {
      "left" : "Collection<CacheEntry<Object, Object>> localValue = op\n                                        .performOperationRehashAware(results);",
      "right" : "Collection<CacheEntry<Object, Object>> localValue = op.performOperationRehashAware(results);",
      "info" : "VariableDeclarationStatement[21321-21454]:VariableDeclarationStatement[26763-26855]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[21679-21906]:Block[27008-27163]"
    }, {
      "left" : "log.tracef(\"Found local values %s for id %s\", localValue.size(), id);",
      "right" : "log.tracef(\"Found local values %s for id %s\", localValue.size(), id);",
      "info" : "ExpressionStatement[21717-21786]:ExpressionStatement[27022-27091]"
    }, {
      "left" : "results.onCompletion(null, segments, localValue);",
      "right" : "results.onCompletion(null, segments, localValue);",
      "info" : "ExpressionStatement[21823-21872]:ExpressionStatement[27104-27153]"
    }, {
      "left" : "ourSegments.retainAll(segmentsToProcess);",
      "right" : "ourSegments.retainAll(segmentsToProcess);",
      "info" : "ExpressionStatement[22058-22099]:ExpressionStatement[27251-27292]"
    }, {
      "left" : "log.tracef(\"CH changed - making %s segments suspect for identifier %s\", ourSegments,\n                                            id);",
      "right" : "log.tracef(\"CH changed - making %s segments suspect for identifier %s\", ourSegments, id);",
      "info" : "ExpressionStatement[22136-22269]:ExpressionStatement[27305-27394]"
    }, {
      "left" : "results.onSegmentsLost(ourSegments);",
      "right" : "results.onSegmentsLost(ourSegments);",
      "info" : "ExpressionStatement[22306-22342]:ExpressionStatement[27407-27443]"
    } ]
  }, {
    "rightProgramElement" : {
      "element" : "private segmentsToProcess(supplier , results , segmentsToProcess , id ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : false
    },
    "abstractMappingList" : [ {
      "left" : "segmentsToProcess = new HashSet<>(results.lostSegments);",
      "right" : "segmentsToProcess = new HashSet<>(results.lostSegments);",
      "info" : "ExpressionStatement[22880-22936]:ExpressionStatement[26057-26113]"
    }, {
      "left" : "results.lostSegments.clear();",
      "right" : "results.lostSegments.clear();",
      "info" : "ExpressionStatement[22969-22998]:ExpressionStatement[26126-26155]"
    } ]
  }, {
    "rightProgramElement" : {
      "element" : "private ignoreRehashIteration(consumer , supplier , iteratorParallelDistribute boolean) : void",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : false
    },
    "abstractMappingList" : [ {
      "left" : "CollectionConsumer<R> remoteResults = new CollectionConsumer<>(consumer);",
      "right" : "CollectionConsumer<R> remoteResults = new CollectionConsumer<>(consumer);",
      "info" : "VariableDeclarationStatement[23886-23959]:VariableDeclarationStatement[19152-19225]"
    }, {
      "left" : "ConsistentHash ch = dm.getConsistentHash();",
      "right" : "ConsistentHash ch = dm.getConsistentHash();",
      "info" : "VariableDeclarationStatement[23972-24015]:VariableDeclarationStatement[19234-19277]"
    }, {
      "left" : "UUID id = csm.remoteStreamOperation(iteratorParallelDistribute, parallel, ch, segmentsToFilter,\n                            keysToFilter, Collections.emptyMap(), includeLoader, op, remoteResults);",
      "right" : "UUID id = csm.remoteStreamOperation(iteratorParallelDistribute, parallel, ch, segmentsToFilter,\n                            keysToFilter, Collections.emptyMap(), includeLoader, op, remoteResults);",
      "info" : "VariableDeclarationStatement[24478-24674]:VariableDeclarationStatement[20063-20259]"
    }, {
      "left" : "Collection<R> localValue = op.performOperation(remoteResults);",
      "right" : "Collection<R> localValue = op.performOperation(remoteResults);",
      "info" : "VariableDeclarationStatement[24768-24830]:VariableDeclarationStatement[19860-19922]"
    }, {
      "left" : "remoteResults.onCompletion(null, Collections.emptySet(), localValue);",
      "right" : "remoteResults.onCompletion(null, Collections.emptySet(), localValue);",
      "info" : "ExpressionStatement[24855-24924]:ExpressionStatement[19939-20008]"
    } ]
  } ]
}, {
  "element" : "package HandOffConsumer(queue , completed , nextLock , nextCondition )",
  "className" : "HandOffConsumer",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "package HandOffConsumer(queue , completed , nextLock , nextCondition )",
      "className" : "HandOffConsumer",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[26329-26498]:Block[27813-27982]"
    }, {
      "left" : "this.queue = queue;",
      "right" : "this.queue = queue;",
      "info" : "ExpressionStatement[26343-26362]:ExpressionStatement[27827-27846]"
    }, {
      "left" : "this.completed = completed;",
      "right" : "this.completed = completed;",
      "info" : "ExpressionStatement[26375-26402]:ExpressionStatement[27859-27886]"
    }, {
      "left" : "this.nextLock = nextLock;",
      "right" : "this.nextLock = nextLock;",
      "info" : "ExpressionStatement[26415-26440]:ExpressionStatement[27899-27924]"
    }, {
      "left" : "this.nextCondition = nextCondition;",
      "right" : "this.nextCondition = nextCondition;",
      "info" : "ExpressionStatement[26453-26488]:ExpressionStatement[27937-27972]"
    } ]
  } ]
}, {
  "element" : "public accept(rs ...) : void",
  "className" : "HandOffConsumer",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public accept(rs ...) : void",
      "className" : "HandOffConsumer",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[26551-27769]:Block[28035-29253]"
    }, {
      "left" : "if (!queue.offer(rs))",
      "right" : "if (!queue.offer(rs))",
      "info" : "IfStatement[26750-27759]:IfStatement[28234-29243]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[26772-27759]:Block[28256-29243]"
    }, {
      "left" : "if (!completed.get())",
      "right" : "if (!completed.get())",
      "info" : "IfStatement[26790-27745]:IfStatement[28274-29229]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[26812-27745]:Block[28296-29229]"
    }, {
      "left" : "nextLock.lock();",
      "right" : "nextLock.lock();",
      "info" : "ExpressionStatement[26916-26932]:ExpressionStatement[28400-28416]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26953-27106]:TryStatement[28437-28590]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[26957-27031]:Block[28441-28515]"
    }, {
      "left" : "nextCondition.signalAll();",
      "right" : "nextCondition.signalAll();",
      "info" : "ExpressionStatement[26983-27009]:ExpressionStatement[28467-28493]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[27040-27106]:Block[28524-28590]"
    }, {
      "left" : "nextLock.unlock();",
      "right" : "nextLock.unlock();",
      "info" : "ExpressionStatement[27066-27084]:ExpressionStatement[28550-28568]"
    }, {
      "left" : "while (!completed.get())",
      "right" : "while (!completed.get())",
      "info" : "WhileStatement[27127-27727]:WhileStatement[28611-29211]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[27152-27727]:Block[28636-29211]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27410-27705]:TryStatement[28894-29189]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[27414-27589]:Block[28898-29073]"
    }, {
      "left" : "if (queue.offer(rs, 100, TimeUnit.MILLISECONDS))",
      "right" : "if (queue.offer(rs, 100, TimeUnit.MILLISECONDS))",
      "info" : "IfStatement[27444-27563]:IfStatement[28928-29047]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[27493-27563]:Block[28977-29047]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27527-27533]:BreakStatement[29011-29017]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[27621-27705]:Block[29105-29189]"
    }, {
      "left" : "throw new CacheException(e);",
      "right" : "throw new CacheException(e);",
      "info" : "ThrowStatement[27651-27679]:ThrowStatement[29135-29163]"
    } ]
  } ]
}, {
  "element" : "package SegmentListenerNotifier(listener )",
  "className" : "SegmentListenerNotifier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "package SegmentListenerNotifier(listener )",
      "className" : "SegmentListenerNotifier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[28109-28158]:Block[29593-29642]"
    }, {
      "left" : "this.listener = listener;",
      "right" : "this.listener = listener;",
      "info" : "ExpressionStatement[28123-28148]:ExpressionStatement[29607-29632]"
    } ]
  } ]
}, {
  "element" : "public accept(t ) : void",
  "className" : "SegmentListenerNotifier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public accept(t ) : void",
      "className" : "SegmentListenerNotifier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[28210-28388]:Block[29694-29872]"
    }, {
      "left" : "Set<Integer> segments = segmentsByObject.remove(t);",
      "right" : "Set<Integer> segments = segmentsByObject.remove(t);",
      "info" : "VariableDeclarationStatement[28224-28275]:VariableDeclarationStatement[29708-29759]"
    }, {
      "left" : "if (segments != null)",
      "right" : "if (segments != null)",
      "info" : "IfStatement[28288-28378]:IfStatement[29772-29862]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[28310-28378]:Block[29794-29862]"
    }, {
      "left" : "listener.segmentCompleted(segments);",
      "right" : "listener.segmentCompleted(segments);",
      "info" : "ExpressionStatement[28328-28364]:ExpressionStatement[29812-29848]"
    } ]
  } ]
}, {
  "element" : "public addSegmentsForObject(object , segments ...) : void",
  "className" : "SegmentListenerNotifier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public addSegmentsForObject(object , segments ...) : void",
      "className" : "SegmentListenerNotifier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[28464-28527]:Block[29948-30011]"
    }, {
      "left" : "segmentsByObject.put(object, segments);",
      "right" : "segmentsByObject.put(object, segments);",
      "info" : "ExpressionStatement[28478-28517]:ExpressionStatement[29962-30001]"
    } ]
  } ]
}, {
  "element" : "public completeSegmentsNoResults(segments ...) : void",
  "className" : "SegmentListenerNotifier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public completeSegmentsNoResults(segments ...) : void",
      "className" : "SegmentListenerNotifier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[28598-28658]:Block[30082-30142]"
    }, {
      "left" : "listener.segmentCompleted(segments);",
      "right" : "listener.segmentCompleted(segments);",
      "info" : "ExpressionStatement[28612-28648]:ExpressionStatement[30096-30132]"
    } ]
  } ]
}, {
  "element" : "package IteratorSupplier(queue , completed , nextLock , nextCondition , clusterStreamManager )",
  "className" : "IteratorSupplier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "package IteratorSupplier(queue , completed , nextLock , nextCondition , clusterStreamManager )",
      "className" : "IteratorSupplier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[29262-29493]:Block[30746-30977]"
    }, {
      "left" : "this.queue = queue;",
      "right" : "this.queue = queue;",
      "info" : "ExpressionStatement[29276-29295]:ExpressionStatement[30760-30779]"
    }, {
      "left" : "this.completed = completed;",
      "right" : "this.completed = completed;",
      "info" : "ExpressionStatement[29308-29335]:ExpressionStatement[30792-30819]"
    }, {
      "left" : "this.nextLock = nextLock;",
      "right" : "this.nextLock = nextLock;",
      "info" : "ExpressionStatement[29348-29373]:ExpressionStatement[30832-30857]"
    }, {
      "left" : "this.nextCondition = nextCondition;",
      "right" : "this.nextCondition = nextCondition;",
      "info" : "ExpressionStatement[29386-29421]:ExpressionStatement[30870-30905]"
    }, {
      "left" : "this.clusterStreamManager = clusterStreamManager;",
      "right" : "this.clusterStreamManager = clusterStreamManager;",
      "info" : "ExpressionStatement[29434-29483]:ExpressionStatement[30918-30967]"
    } ]
  } ]
}, {
  "element" : "public close() : void",
  "className" : "IteratorSupplier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public close() : void",
      "className" : "IteratorSupplier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[29541-29577]:Block[31025-31061]"
    }, {
      "left" : "close(null);",
      "right" : "close(null);",
      "info" : "ExpressionStatement[29555-29567]:ExpressionStatement[31039-31051]"
    } ]
  } ]
}, {
  "element" : "public close(e ) : void",
  "className" : "IteratorSupplier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public close(e ) : void",
      "className" : "IteratorSupplier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[29623-30123]:Block[31107-31607]"
    }, {
      "left" : "nextLock.lock();",
      "right" : "nextLock.lock();",
      "info" : "ExpressionStatement[29637-29653]:ExpressionStatement[31121-31137]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[29666-30113]:TryStatement[31150-31597]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[29670-30054]:Block[31154-31538]"
    }, {
      "left" : "if (!completed.getAndSet(true))",
      "right" : "if (!completed.getAndSet(true))",
      "info" : "IfStatement[29688-29837]:IfStatement[31172-31321]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[29720-29837]:Block[31204-31321]"
    }, {
      "left" : "if (e != null)",
      "right" : "if (e != null)",
      "info" : "IfStatement[29742-29819]:IfStatement[31226-31303]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[29757-29819]:Block[31241-31303]"
    }, {
      "left" : "exception = e;",
      "right" : "exception = e;",
      "info" : "ExpressionStatement[29783-29797]:ExpressionStatement[31267-31281]"
    }, {
      "left" : "if (pending != null)",
      "right" : "if (pending != null)",
      "info" : "IfStatement[29854-29997]:IfStatement[31338-31481]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[29875-29997]:Block[31359-31481]"
    }, {
      "left" : "clusterStreamManager.forgetOperation(pending);",
      "right" : "clusterStreamManager.forgetOperation(pending);",
      "info" : "ExpressionStatement[29897-29943]:ExpressionStatement[31381-31427]"
    }, {
      "left" : "pending = null;",
      "right" : "pending = null;",
      "info" : "ExpressionStatement[29964-29979]:ExpressionStatement[31448-31463]"
    }, {
      "left" : "nextCondition.signalAll();",
      "right" : "nextCondition.signalAll();",
      "info" : "ExpressionStatement[30014-30040]:ExpressionStatement[31498-31524]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30063-30113]:Block[31547-31597]"
    }, {
      "left" : "nextLock.unlock();",
      "right" : "nextLock.unlock();",
      "info" : "ExpressionStatement[30081-30099]:ExpressionStatement[31565-31583]"
    } ]
  } ]
}, {
  "element" : "public get() : ",
  "className" : "IteratorSupplier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public get() : ",
      "className" : "IteratorSupplier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30166-31595]:Block[31650-33079]"
    }, {
      "left" : "R entry = queue.poll();",
      "right" : "R entry = queue.poll();",
      "info" : "VariableDeclarationStatement[30180-30203]:VariableDeclarationStatement[31664-31687]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[30216-31452]:IfStatement[31700-32936]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30235-31452]:Block[31719-32936]"
    }, {
      "left" : "if (completed.get())",
      "right" : "if (completed.get())",
      "info" : "IfStatement[30253-30434]:IfStatement[31737-31918]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30274-30434]:Block[31758-31918]"
    }, {
      "left" : "if (exception != null)",
      "right" : "if (exception != null)",
      "info" : "IfStatement[30296-30383]:IfStatement[31780-31867]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30319-30383]:Block[31803-31867]"
    }, {
      "left" : "throw exception;",
      "right" : "throw exception;",
      "info" : "ThrowStatement[30345-30361]:ThrowStatement[31829-31845]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30404-30416]:ReturnStatement[31888-31900]"
    }, {
      "left" : "nextLock.lock();",
      "right" : "nextLock.lock();",
      "info" : "ExpressionStatement[30451-30467]:ExpressionStatement[31935-31951]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[30484-31438]:TryStatement[31968-32922]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30488-31371]:Block[31972-32855]"
    }, {
      "left" : "boolean interrupted = false;",
      "right" : "boolean interrupted = false;",
      "info" : "VariableDeclarationStatement[30510-30538]:VariableDeclarationStatement[31994-32022]"
    }, {
      "left" : "while ((entry = queue.poll()) == null && !completed.get())",
      "right" : "while ((entry = queue.poll()) == null && !completed.get())",
      "info" : "WhileStatement[30559-30953]:WhileStatement[32043-32437]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30618-30953]:Block[32102-32437]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[30644-30931]:TryStatement[32128-32415]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30648-30752]:Block[32132-32236]"
    }, {
      "left" : "nextCondition.await(100, TimeUnit.MILLISECONDS);",
      "right" : "nextCondition.await(100, TimeUnit.MILLISECONDS);",
      "info" : "ExpressionStatement[30678-30726]:ExpressionStatement[32162-32210]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30784-30931]:Block[32268-32415]"
    }, {
      "left" : "interrupted = true;",
      "right" : "interrupted = true;",
      "info" : "ExpressionStatement[30886-30905]:ExpressionStatement[32370-32389]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[30974-31353]:IfStatement[32458-32837]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[30993-31173]:Block[32477-32657]"
    }, {
      "left" : "if (exception != null)",
      "right" : "if (exception != null)",
      "info" : "IfStatement[31019-31114]:IfStatement[32503-32598]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[31042-31114]:Block[32526-32598]"
    }, {
      "left" : "throw exception;",
      "right" : "throw exception;",
      "info" : "ThrowStatement[31072-31088]:ThrowStatement[32556-32572]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31139-31151]:ReturnStatement[32623-32635]"
    }, {
      "left" : "if (interrupted)",
      "right" : "if (interrupted)",
      "info" : "IfStatement[31179-31353]:IfStatement[32663-32837]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[31196-31353]:Block[32680-32837]"
    }, {
      "left" : "Thread.currentThread().interrupt();",
      "right" : "Thread.currentThread().interrupt();",
      "info" : "ExpressionStatement[31296-31331]:ExpressionStatement[32780-32815]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[31380-31438]:Block[32864-32922]"
    }, {
      "left" : "nextLock.unlock();",
      "right" : "nextLock.unlock();",
      "info" : "ExpressionStatement[31402-31420]:ExpressionStatement[32886-32904]"
    }, {
      "left" : "if (consumer != null && entry != null)",
      "right" : "if (consumer != null && entry != null)",
      "info" : "IfStatement[31465-31559]:IfStatement[32949-33043]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[31504-31559]:Block[32988-33043]"
    }, {
      "left" : "consumer.accept(entry);",
      "right" : "consumer.accept(entry);",
      "info" : "ExpressionStatement[31522-31545]:ExpressionStatement[33006-33029]"
    }, {
      "left" : "return entry;",
      "right" : "return entry;",
      "info" : "ReturnStatement[31572-31585]:ReturnStatement[33056-33069]"
    } ]
  } ]
}, {
  "element" : "public setConsumer(consumer ) : void",
  "className" : "IteratorSupplier",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public setConsumer(consumer ) : void",
      "className" : "IteratorSupplier",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[31651-31700]:Block[33135-33184]"
    }, {
      "left" : "this.consumer = consumer;",
      "right" : "this.consumer = consumer;",
      "info" : "ExpressionStatement[31665-31690]:ExpressionStatement[33149-33174]"
    } ]
  } ]
}, {
  "element" : "public spliterator() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public spliterator() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[31762-31862]:Block[33246-33346]"
    }, {
      "left" : "return Spliterators.spliterator(iterator(), Long.MAX_VALUE, Spliterator.CONCURRENT);",
      "right" : "return Spliterators.spliterator(iterator(), Long.MAX_VALUE, Spliterator.CONCURRENT);",
      "info" : "ReturnStatement[31772-31856]:ReturnStatement[33256-33340]"
    } ]
  } ]
}, {
  "element" : "public forEach(action ) : void",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public forEach(action ) : void",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[31930-32138]:Block[33414-33622]"
    }, {
      "left" : "if (!rehashAware)",
      "right" : "if (!rehashAware)",
      "info" : "IfStatement[31940-32132]:IfStatement[33424-33616]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[31958-32073]:Block[33442-33557]"
    }, {
      "left" : "performOperation(TerminalFunctions.forEachFunction(action), false, (v1, v2) -> null, null);",
      "right" : "performOperation(TerminalFunctions.forEachFunction(action), false, (v1, v2) -> null, null);",
      "info" : "ExpressionStatement[31972-32063]:ExpressionStatement[33456-33547]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[32079-32132]:Block[33563-33616]"
    }, {
      "left" : "performRehashForEach(action);",
      "right" : "performRehashForEach(action);",
      "info" : "ExpressionStatement[32093-32122]:ExpressionStatement[33577-33606]"
    } ]
  } ]
}, {
  "element" : "package getForEach(consumer , supplier ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "package getForEach(consumer , supplier ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[32267-32379]:Block[33751-33863]"
    }, {
      "left" : "return new ForEachOperation<>(intermediateOperations, supplier, distributedBatchSize, consumer);",
      "right" : "return new ForEachOperation<>(intermediateOperations, supplier, distributedBatchSize, consumer);",
      "info" : "ReturnStatement[32277-32373]:ReturnStatement[33761-33857]"
    } ]
  } ]
}, {
  "element" : "public forEachOrdered(action ) : void",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public forEachOrdered(action ) : void",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[32454-33049]:Block[33938-34533]"
    }, {
      "left" : "if (sorted)",
      "right" : "if (sorted)",
      "info" : "IfStatement[32464-33043]:IfStatement[33948-34527]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[32476-32997]:Block[33960-34481]"
    }, {
      "left" : "Iterator<R> iterator = iterator();",
      "right" : "Iterator<R> iterator = iterator();",
      "info" : "VariableDeclarationStatement[32490-32524]:VariableDeclarationStatement[33974-34008]"
    }, {
      "left" : "SingleRunOperation<Void, R, Stream<R>> op = new SingleRunOperation<>(localIntermediateOperations,\n                    () -> StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                            iterator, Spliterator.CONCURRENT | Spliterator.NONNULL), parallel),\n                    s -> {\n                        s.forEachOrdered(action);\n                        return null;\n                    });",
      "right" : "SingleRunOperation<Void, R, Stream<R>> op = new SingleRunOperation<>(localIntermediateOperations,\n                    () -> StreamSupport.stream(Spliterators.spliteratorUnknownSize(\n                            iterator, Spliterator.CONCURRENT | Spliterator.NONNULL), parallel),\n                    s -> {\n                        s.forEachOrdered(action);\n                        return null;\n                    });",
      "info" : "VariableDeclarationStatement[32537-32952]:VariableDeclarationStatement[34021-34436]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[32840-32950]:Block[34324-34434]"
    }, {
      "left" : "s.forEachOrdered(action);",
      "right" : "s.forEachOrdered(action);",
      "info" : "ExpressionStatement[32866-32891]:ExpressionStatement[34350-34375]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32916-32928]:ReturnStatement[34400-34412]"
    }, {
      "left" : "op.performOperation();",
      "right" : "op.performOperation();",
      "info" : "ExpressionStatement[32965-32987]:ExpressionStatement[34449-34471]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[33003-33043]:Block[34487-34527]"
    }, {
      "left" : "forEach(action);",
      "right" : "forEach(action);",
      "info" : "ExpressionStatement[33017-33033]:ExpressionStatement[34501-34517]"
    } ]
  } ]
}, {
  "element" : "public toArray() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public toArray() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[33095-33428]:Block[34579-34912]"
    }, {
      "left" : "return performOperation(TerminalFunctions.toArrayFunction(), false,\n                (v1, v2) -> {\n                    Object[] array = Arrays.copyOf(v1, v1.length + v2.length);\n                    System.arraycopy(v2, 0, array, v1.length, v2.length);\n                    return array;\n                }, null, false);",
      "right" : "return performOperation(TerminalFunctions.toArrayFunction(), false,\n                (v1, v2) -> {\n                    Object[] array = Arrays.copyOf(v1, v1.length + v2.length);\n                    System.arraycopy(v2, 0, array, v1.length, v2.length);\n                    return array;\n                }, null, false);",
      "info" : "ReturnStatement[33105-33422]:ReturnStatement[34589-34906]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[33201-33407]:Block[34685-34891]"
    }, {
      "left" : "Object[] array = Arrays.copyOf(v1, v1.length + v2.length);",
      "right" : "Object[] array = Arrays.copyOf(v1, v1.length + v2.length);",
      "info" : "VariableDeclarationStatement[33223-33281]:VariableDeclarationStatement[34707-34765]"
    }, {
      "left" : "System.arraycopy(v2, 0, array, v1.length, v2.length);",
      "right" : "System.arraycopy(v2, 0, array, v1.length, v2.length);",
      "info" : "ExpressionStatement[33302-33355]:ExpressionStatement[34786-34839]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[33376-33389]:ReturnStatement[34860-34873]"
    } ]
  } ]
}, {
  "element" : "public toArray(generator ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public toArray(generator ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[33499-33900]:Block[34983-35384]"
    }, {
      "left" : "return performOperation(TerminalFunctions.toArrayFunction(generator), false,\n                (v1, v2) -> {\n                    A[] array = generator.apply(v1.length + v2.length);\n                    System.arraycopy(v1, 0, array, 0, v1.length);\n                    System.arraycopy(v2, 0, array, v1.length, v2.length);\n                    return array;\n                }, null, false);",
      "right" : "return performOperation(TerminalFunctions.toArrayFunction(generator), false,\n                (v1, v2) -> {\n                    A[] array = generator.apply(v1.length + v2.length);\n                    System.arraycopy(v1, 0, array, 0, v1.length);\n                    System.arraycopy(v2, 0, array, v1.length, v2.length);\n                    return array;\n                }, null, false);",
      "info" : "ReturnStatement[33509-33894]:ReturnStatement[34993-35378]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[33614-33879]:Block[35098-35363]"
    }, {
      "left" : "A[] array = generator.apply(v1.length + v2.length);",
      "right" : "A[] array = generator.apply(v1.length + v2.length);",
      "info" : "VariableDeclarationStatement[33636-33687]:VariableDeclarationStatement[35120-35171]"
    }, {
      "left" : "System.arraycopy(v1, 0, array, 0, v1.length);",
      "right" : "System.arraycopy(v1, 0, array, 0, v1.length);",
      "info" : "ExpressionStatement[33708-33753]:ExpressionStatement[35192-35237]"
    }, {
      "left" : "System.arraycopy(v2, 0, array, v1.length, v2.length);",
      "right" : "System.arraycopy(v2, 0, array, v1.length, v2.length);",
      "info" : "ExpressionStatement[33774-33827]:ExpressionStatement[35258-35311]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[33848-33861]:ReturnStatement[35332-35345]"
    } ]
  } ]
}, {
  "element" : "public sequentialDistribution() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public sequentialDistribution() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[34027-34093]:Block[35511-35577]"
    }, {
      "left" : "parallelDistribution = false;",
      "right" : "parallelDistribution = false;",
      "info" : "ExpressionStatement[34037-34066]:ExpressionStatement[35521-35550]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34075-34087]:ReturnStatement[35559-35571]"
    } ]
  } ]
}, {
  "element" : "public parallelDistribution() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public parallelDistribution() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[34158-34223]:Block[35642-35707]"
    }, {
      "left" : "parallelDistribution = true;",
      "right" : "parallelDistribution = true;",
      "info" : "ExpressionStatement[34168-34196]:ExpressionStatement[35652-35680]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34205-34217]:ReturnStatement[35689-35701]"
    } ]
  } ]
}, {
  "element" : "public filterKeySegments(segments ...) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public filterKeySegments(segments ...) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[34306-34371]:Block[35790-35855]"
    }, {
      "left" : "segmentsToFilter = segments;",
      "right" : "segmentsToFilter = segments;",
      "info" : "ExpressionStatement[34316-34344]:ExpressionStatement[35800-35828]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34353-34365]:ReturnStatement[35837-35849]"
    } ]
  } ]
}, {
  "element" : "public filterKeys(keys ...) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public filterKeys(keys ...) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[34437-34494]:Block[35921-35978]"
    }, {
      "left" : "keysToFilter = keys;",
      "right" : "keysToFilter = keys;",
      "info" : "ExpressionStatement[34447-34467]:ExpressionStatement[35931-35951]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34476-34488]:ReturnStatement[35960-35972]"
    } ]
  } ]
}, {
  "element" : "public distributedBatchSize(batchSize int) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public distributedBatchSize(batchSize int) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[34572-34642]:Block[36056-36126]"
    }, {
      "left" : "distributedBatchSize = batchSize;",
      "right" : "distributedBatchSize = batchSize;",
      "info" : "ExpressionStatement[34582-34615]:ExpressionStatement[36066-36099]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34624-34636]:ReturnStatement[36108-36120]"
    } ]
  } ]
}, {
  "element" : "public segmentCompletionListener(listener ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public segmentCompletionListener(listener ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[34746-35000]:Block[36230-36484]"
    }, {
      "left" : "if (segmentCompletionListener == null)",
      "right" : "if (segmentCompletionListener == null)",
      "info" : "IfStatement[34756-34973]:IfStatement[36240-36457]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[34795-34856]:Block[36279-36340]"
    }, {
      "left" : "segmentCompletionListener = listener;",
      "right" : "segmentCompletionListener = listener;",
      "info" : "ExpressionStatement[34809-34846]:ExpressionStatement[36293-36330]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[34862-34973]:Block[36346-36457]"
    }, {
      "left" : "segmentCompletionListener = composeWithExceptions(segmentCompletionListener, listener);",
      "right" : "segmentCompletionListener = composeWithExceptions(segmentCompletionListener, listener);",
      "info" : "ExpressionStatement[34876-34963]:ExpressionStatement[36360-36447]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[34982-34994]:ReturnStatement[36466-36478]"
    } ]
  } ]
}, {
  "element" : "public disableRehashAware() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "public disableRehashAware() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[35063-35120]:Block[36547-36604]"
    }, {
      "left" : "rehashAware = false;",
      "right" : "rehashAware = false;",
      "info" : "ExpressionStatement[35073-35093]:ExpressionStatement[36557-36577]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[35102-35114]:ReturnStatement[36586-36598]"
    } ]
  } ]
}, {
  "element" : "protected intCacheStream() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "protected intCacheStream() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[35179-35238]:Block[36663-36722]"
    }, {
      "left" : "return new DistributedIntCacheStream(this);",
      "right" : "return new DistributedIntCacheStream(this);",
      "info" : "ReturnStatement[35189-35232]:ReturnStatement[36673-36716]"
    } ]
  } ]
}, {
  "element" : "protected doubleCacheStream() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "protected doubleCacheStream() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[35303-35365]:Block[36787-36849]"
    }, {
      "left" : "return new DistributedDoubleCacheStream(this);",
      "right" : "return new DistributedDoubleCacheStream(this);",
      "info" : "ReturnStatement[35313-35359]:ReturnStatement[36797-36843]"
    } ]
  } ]
}, {
  "element" : "protected longCacheStream() : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "protected longCacheStream() : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[35426-35486]:Block[36910-36970]"
    }, {
      "left" : "return new DistributedLongCacheStream(this);",
      "right" : "return new DistributedLongCacheStream(this);",
      "info" : "ReturnStatement[35436-35480]:ReturnStatement[36920-36964]"
    } ]
  } ]
}, {
  "element" : "protected composeWithExceptions(a , b ) : ",
  "className" : "DistributedCacheStream",
  "fileName" : "testCommit/DistributedCacheStream.java",
  "mappings" : [ {
    "rightProgramElement" : {
      "element" : "protected composeWithExceptions(a , b ) : ",
      "className" : "DistributedCacheStream",
      "fileName" : "testCommit/DistributedCacheStream.java",
      "match" : true
    },
    "abstractMappingList" : [ {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[35972-36478]:Block[37456-37962]"
    }, {
      "left" : "return (segments) -> {\n            try {\n                a.segmentCompleted(segments);\n            } catch (Throwable e1) {\n                try {\n                    b.segmentCompleted(segments);\n                } catch (Throwable e2) {\n                    try {\n                        e1.addSuppressed(e2);\n                    } catch (Throwable ignore) {\n                    }\n                }\n                throw e1;\n            }\n            b.segmentCompleted(segments);\n        };",
      "right" : "return (segments) -> {\n            try {\n                a.segmentCompleted(segments);\n            } catch (Throwable e1) {\n                try {\n                    b.segmentCompleted(segments);\n                } catch (Throwable e2) {\n                    try {\n                        e1.addSuppressed(e2);\n                    } catch (Throwable ignore) {\n                    }\n                }\n                throw e1;\n            }\n            b.segmentCompleted(segments);\n        };",
      "info" : "ReturnStatement[35982-36472]:ReturnStatement[37466-37956]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[36003-36471]:Block[37487-37955]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36017-36419]:TryStatement[37501-37903]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[36021-36082]:Block[37505-37566]"
    }, {
      "left" : "a.segmentCompleted(segments);",
      "right" : "a.segmentCompleted(segments);",
      "info" : "ExpressionStatement[36039-36068]:ExpressionStatement[37523-37552]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[36104-36419]:Block[37588-37903]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36122-36379]:TryStatement[37606-37863]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[36126-36195]:Block[37610-37679]"
    }, {
      "left" : "b.segmentCompleted(segments);",
      "right" : "b.segmentCompleted(segments);",
      "info" : "ExpressionStatement[36148-36177]:ExpressionStatement[37632-37661]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[36217-36379]:Block[37701-37863]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36239-36361]:TryStatement[37723-37845]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[36243-36312]:Block[37727-37796]"
    }, {
      "left" : "e1.addSuppressed(e2);",
      "right" : "e1.addSuppressed(e2);",
      "info" : "ExpressionStatement[36269-36290]:ExpressionStatement[37753-37774]"
    }, {
      "left" : "{...}",
      "right" : "{...}",
      "info" : "Block[36338-36361]:Block[37822-37845]"
    }, {
      "left" : "throw e1;",
      "right" : "throw e1;",
      "info" : "ThrowStatement[36396-36405]:ThrowStatement[37880-37889]"
    }, {
      "left" : "b.segmentCompleted(segments);",
      "right" : "b.segmentCompleted(segments);",
      "info" : "ExpressionStatement[36432-36461]:ExpressionStatement[37916-37945]"
    } ]
  } ]
} ]