{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BZip2CompressorInputStream",
      "right" : "BZip2CompressorInputStream",
      "info" : "TypeDeclaration[1161-33696]:TypeDeclaration[1161-33329]"
    }, {
      "left" : "private int last;",
      "right" : "private int last;",
      "info" : "FieldDeclaration[1459-1567]:FieldDeclaration[1459-1567]"
    }, {
      "left" : "private int origPtr;",
      "right" : "private int origPtr;",
      "info" : "FieldDeclaration[1573-1666]:FieldDeclaration[1573-1666]"
    }, {
      "left" : "private int blockSize100k;",
      "right" : "private int blockSize100k;",
      "info" : "FieldDeclaration[1672-1805]:FieldDeclaration[1672-1805]"
    }, {
      "left" : "private boolean blockRandomised;",
      "right" : "private boolean blockRandomised;",
      "info" : "FieldDeclaration[1811-1843]:FieldDeclaration[1811-1843]"
    }, {
      "left" : "private int bsBuff;",
      "right" : "private int bsBuff;",
      "info" : "FieldDeclaration[1849-1868]:FieldDeclaration[1849-1868]"
    }, {
      "left" : "private int bsLive;",
      "right" : "private int bsLive;",
      "info" : "FieldDeclaration[1873-1892]:FieldDeclaration[1873-1892]"
    }, {
      "left" : "private final CRC crc = new CRC();",
      "right" : "private final CRC crc = new CRC();",
      "info" : "FieldDeclaration[1897-1931]:FieldDeclaration[1897-1931]"
    }, {
      "left" : "private int nInUse;",
      "right" : "private int nInUse;",
      "info" : "FieldDeclaration[1937-1956]:FieldDeclaration[1937-1956]"
    }, {
      "left" : "private InputStream in;",
      "right" : "private InputStream in;",
      "info" : "FieldDeclaration[1962-1985]:FieldDeclaration[1962-1985]"
    }, {
      "left" : "private final boolean decompressConcatenated;",
      "right" : "private final boolean decompressConcatenated;",
      "info" : "FieldDeclaration[1990-2035]:FieldDeclaration[1990-2035]"
    }, {
      "left" : "private static final int EOF = 0;",
      "right" : "private static final int EOF = 0;",
      "info" : "FieldDeclaration[2075-2108]:FieldDeclaration[2041-2074]"
    }, {
      "left" : "private static final int START_BLOCK_STATE = 1;",
      "right" : "private static final int START_BLOCK_STATE = 1;",
      "info" : "FieldDeclaration[2113-2160]:FieldDeclaration[2079-2126]"
    }, {
      "left" : "private static final int RAND_PART_A_STATE = 2;",
      "right" : "private static final int RAND_PART_A_STATE = 2;",
      "info" : "FieldDeclaration[2165-2212]:FieldDeclaration[2131-2178]"
    }, {
      "left" : "private static final int RAND_PART_B_STATE = 3;",
      "right" : "private static final int RAND_PART_B_STATE = 3;",
      "info" : "FieldDeclaration[2217-2264]:FieldDeclaration[2183-2230]"
    }, {
      "left" : "private static final int RAND_PART_C_STATE = 4;",
      "right" : "private static final int RAND_PART_C_STATE = 4;",
      "info" : "FieldDeclaration[2269-2316]:FieldDeclaration[2235-2282]"
    }, {
      "left" : "private static final int NO_RAND_PART_A_STATE = 5;",
      "right" : "private static final int NO_RAND_PART_A_STATE = 5;",
      "info" : "FieldDeclaration[2321-2371]:FieldDeclaration[2287-2337]"
    }, {
      "left" : "private static final int NO_RAND_PART_B_STATE = 6;",
      "right" : "private static final int NO_RAND_PART_B_STATE = 6;",
      "info" : "FieldDeclaration[2376-2426]:FieldDeclaration[2342-2392]"
    }, {
      "left" : "private static final int NO_RAND_PART_C_STATE = 7;",
      "right" : "private static final int NO_RAND_PART_C_STATE = 7;",
      "info" : "FieldDeclaration[2431-2481]:FieldDeclaration[2397-2447]"
    }, {
      "left" : "private int currentState = START_BLOCK_STATE;",
      "right" : "private int currentState = START_BLOCK_STATE;",
      "info" : "FieldDeclaration[2487-2532]:FieldDeclaration[2453-2498]"
    }, {
      "left" : "private int storedBlockCRC, storedCombinedCRC;",
      "right" : "private int storedBlockCRC, storedCombinedCRC;",
      "info" : "FieldDeclaration[2538-2584]:FieldDeclaration[2504-2550]"
    }, {
      "left" : "private int computedBlockCRC, computedCombinedCRC;",
      "right" : "private int computedBlockCRC, computedCombinedCRC;",
      "info" : "FieldDeclaration[2589-2639]:FieldDeclaration[2555-2605]"
    }, {
      "left" : "private int su_count;",
      "right" : "private int su_count;",
      "info" : "FieldDeclaration[2698-2719]:FieldDeclaration[2664-2685]"
    }, {
      "left" : "private int su_ch2;",
      "right" : "private int su_ch2;",
      "info" : "FieldDeclaration[2724-2743]:FieldDeclaration[2690-2709]"
    }, {
      "left" : "private int su_chPrev;",
      "right" : "private int su_chPrev;",
      "info" : "FieldDeclaration[2748-2770]:FieldDeclaration[2714-2736]"
    }, {
      "left" : "private int su_i2;",
      "right" : "private int su_i2;",
      "info" : "FieldDeclaration[2775-2793]:FieldDeclaration[2741-2759]"
    }, {
      "left" : "private int su_j2;",
      "right" : "private int su_j2;",
      "info" : "FieldDeclaration[2798-2816]:FieldDeclaration[2764-2782]"
    }, {
      "left" : "private int su_rNToGo;",
      "right" : "private int su_rNToGo;",
      "info" : "FieldDeclaration[2821-2843]:FieldDeclaration[2787-2809]"
    }, {
      "left" : "private int su_rTPos;",
      "right" : "private int su_rTPos;",
      "info" : "FieldDeclaration[2848-2869]:FieldDeclaration[2814-2835]"
    }, {
      "left" : "private int su_tPos;",
      "right" : "private int su_tPos;",
      "info" : "FieldDeclaration[2874-2894]:FieldDeclaration[2840-2860]"
    }, {
      "left" : "private char su_z;",
      "right" : "private char su_z;",
      "info" : "FieldDeclaration[2899-2917]:FieldDeclaration[2865-2883]"
    }, {
      "left" : "private BZip2CompressorInputStream.Data data;",
      "right" : "private BZip2CompressorInputStream.Data data;",
      "info" : "FieldDeclaration[2923-3061]:FieldDeclaration[2889-3027]"
    }, {
      "left" : "public BZip2CompressorInputStream(final InputStream in) throws IOException",
      "right" : "public BZip2CompressorInputStream(final InputStream in) throws IOException",
      "info" : "MethodDeclaration[3067-3563]:MethodDeclaration[3033-3529]"
    }, {
      "left" : "public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException",
      "right" : "public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException",
      "info" : "MethodDeclaration[3569-4552]:MethodDeclaration[3535-4496]"
    }, {
      "left" : "public int read() throws IOException",
      "right" : "public int read() throws IOException",
      "info" : "MethodDeclaration[4558-4812]:MethodDeclaration[4502-4756]"
    }, {
      "left" : "public int read(final byte[] dest, final int offs, final int len)\n        throws IOException",
      "right" : "public int read(final byte[] dest, final int offs, final int len)\n        throws IOException",
      "info" : "MethodDeclaration[4917-5854]:MethodDeclaration[4861-5798]"
    }, {
      "left" : "private void makeMaps()",
      "right" : "private void makeMaps()",
      "info" : "MethodDeclaration[5860-6212]:MethodDeclaration[5804-6156]"
    }, {
      "left" : "private int read0() throws IOException",
      "right" : "private int read0() throws IOException",
      "info" : "MethodDeclaration[6218-7063]:MethodDeclaration[6162-6875]"
    }, {
      "left" : "private boolean init(boolean isFirstStream) throws IOException",
      "right" : "private boolean init(boolean isFirstStream) throws IOException",
      "info" : "MethodDeclaration[7069-7967]:MethodDeclaration[6881-7779]"
    }, {
      "left" : "private void initBlock() throws IOException",
      "right" : "private void initBlock() throws IOException",
      "info" : "MethodDeclaration[7973-9797]:MethodDeclaration[7785-9609]"
    }, {
      "left" : "private void endBlock() throws IOException",
      "right" : "private void endBlock() throws IOException",
      "info" : "MethodDeclaration[9803-10561]:MethodDeclaration[9615-10373]"
    }, {
      "left" : "private boolean complete() throws IOException",
      "right" : "private boolean complete() throws IOException",
      "info" : "MethodDeclaration[10567-11001]:MethodDeclaration[10379-10813]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[11007-11372]:MethodDeclaration[10819-11184]"
    }, {
      "left" : "private int bsR(final int n) throws IOException",
      "right" : "private int bsR(final int n) throws IOException",
      "info" : "MethodDeclaration[11378-12079]:MethodDeclaration[11190-11891]"
    }, {
      "left" : "private boolean bsGetBit() throws IOException",
      "right" : "private boolean bsGetBit() throws IOException",
      "info" : "MethodDeclaration[12085-12645]:MethodDeclaration[11897-12457]"
    }, {
      "left" : "private char bsGetUByte() throws IOException",
      "right" : "private char bsGetUByte() throws IOException",
      "info" : "MethodDeclaration[12651-12733]:MethodDeclaration[12463-12545]"
    }, {
      "left" : "private int bsGetInt() throws IOException",
      "right" : "private int bsGetInt() throws IOException",
      "info" : "MethodDeclaration[12739-12863]:MethodDeclaration[12551-12675]"
    }, {
      "left" : "private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize)",
      "right" : "private static void hbCreateDecodeTables(final int[] limit,\n                                             final int[] base, final int[] perm, final char[] length,\n                                             final int minLen, final int maxLen, final int alphaSize)",
      "info" : "MethodDeclaration[12869-14111]:MethodDeclaration[12681-13923]"
    }, {
      "left" : "private void recvDecodingTables() throws IOException",
      "right" : "private void recvDecodingTables() throws IOException",
      "info" : "MethodDeclaration[14117-16440]:MethodDeclaration[13929-16252]"
    }, {
      "left" : "private void createHuffmanDecodingTables(final int alphaSize,\n                                             final int nGroups)",
      "right" : "private void createHuffmanDecodingTables(final int alphaSize,\n                                             final int nGroups)",
      "info" : "MethodDeclaration[16446-17540]:MethodDeclaration[16258-17352]"
    }, {
      "left" : "private void getAndMoveToFrontDecode() throws IOException",
      "right" : "private void getAndMoveToFrontDecode() throws IOException",
      "info" : "MethodDeclaration[17546-24569]:MethodDeclaration[17358-24381]"
    }, {
      "left" : "private int getAndMoveToFrontDecode0(final int groupNo) throws IOException",
      "right" : "private int getAndMoveToFrontDecode0(final int groupNo) throws IOException",
      "info" : "MethodDeclaration[24575-25702]:MethodDeclaration[24387-25514]"
    }, {
      "left" : "private int setupBlock() throws IOException",
      "right" : "private int setupBlock() throws IOException",
      "info" : "MethodDeclaration[25708-26787]:MethodDeclaration[25520-26599]"
    }, {
      "left" : "private int setupRandPartA() throws IOException",
      "right" : "private int setupRandPartA() throws IOException",
      "info" : "MethodDeclaration[26793-27709]:MethodDeclaration[26605-27476]"
    }, {
      "left" : "private int setupNoRandPartA() throws IOException",
      "right" : "private int setupNoRandPartA() throws IOException",
      "info" : "MethodDeclaration[27715-28382]:MethodDeclaration[27482-28104]"
    }, {
      "left" : "private int setupRandPartB() throws IOException",
      "right" : "private int setupRandPartB() throws IOException",
      "info" : "MethodDeclaration[28388-29365]:MethodDeclaration[28110-29087]"
    }, {
      "left" : "private int setupRandPartC() throws IOException",
      "right" : "private int setupRandPartC() throws IOException",
      "info" : "MethodDeclaration[29371-29783]:MethodDeclaration[29093-29461]"
    }, {
      "left" : "private int setupNoRandPartB() throws IOException",
      "right" : "private int setupNoRandPartB() throws IOException",
      "info" : "MethodDeclaration[29789-30261]:MethodDeclaration[29467-29939]"
    }, {
      "left" : "private int setupNoRandPartC() throws IOException",
      "right" : "private int setupNoRandPartC() throws IOException",
      "info" : "MethodDeclaration[30267-30733]:MethodDeclaration[29945-30366]"
    }, {
      "left" : "Data",
      "right" : "Data",
      "info" : "TypeDeclaration[30739-32985]:TypeDeclaration[30372-32618]"
    }, {
      "left" : "final boolean[] inUse = new boolean[256];",
      "right" : "final boolean[] inUse = new boolean[256];",
      "info" : "FieldDeclaration[30830-30871]:FieldDeclaration[30463-30504]"
    }, {
      "left" : "final byte[] seqToUnseq = new byte[256];",
      "right" : "final byte[] seqToUnseq = new byte[256];",
      "info" : "FieldDeclaration[30893-30933]:FieldDeclaration[30526-30566]"
    }, {
      "left" : "final byte[] selector = new byte[MAX_SELECTORS];",
      "right" : "final byte[] selector = new byte[MAX_SELECTORS];",
      "info" : "FieldDeclaration[30954-31002]:FieldDeclaration[30587-30635]"
    }, {
      "left" : "final byte[] selectorMtf = new byte[MAX_SELECTORS];",
      "right" : "final byte[] selectorMtf = new byte[MAX_SELECTORS];",
      "info" : "FieldDeclaration[31025-31076]:FieldDeclaration[30658-30709]"
    }, {
      "left" : "final int[] unzftab = new int[256];",
      "right" : "final int[] unzftab = new int[256];",
      "info" : "FieldDeclaration[31100-31253]:FieldDeclaration[30733-30886]"
    }, {
      "left" : "final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "right" : "final int[][] limit = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "info" : "FieldDeclaration[31276-31332]:FieldDeclaration[30909-30965]"
    }, {
      "left" : "final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "right" : "final int[][] base = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "info" : "FieldDeclaration[31354-31409]:FieldDeclaration[30987-31042]"
    }, {
      "left" : "final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "right" : "final int[][] perm = new int[N_GROUPS][MAX_ALPHA_SIZE];",
      "info" : "FieldDeclaration[31431-31486]:FieldDeclaration[31064-31119]"
    }, {
      "left" : "final int[] minLens = new int[N_GROUPS];",
      "right" : "final int[] minLens = new int[N_GROUPS];",
      "info" : "FieldDeclaration[31508-31548]:FieldDeclaration[31141-31181]"
    }, {
      "left" : "final int[] cftab = new int[257];",
      "right" : "final int[] cftab = new int[257];",
      "info" : "FieldDeclaration[31569-31602]:FieldDeclaration[31202-31235]"
    }, {
      "left" : "final char[] getAndMoveToFrontDecode_yy = new char[256];",
      "right" : "final char[] getAndMoveToFrontDecode_yy = new char[256];",
      "info" : "FieldDeclaration[31624-31680]:FieldDeclaration[31257-31313]"
    }, {
      "left" : "final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];",
      "right" : "final char[][] temp_charArray2d = new char[N_GROUPS][MAX_ALPHA_SIZE];",
      "info" : "FieldDeclaration[31701-31770]:FieldDeclaration[31334-31403]"
    }, {
      "left" : "final byte[] recvDecodingTables_pos = new byte[N_GROUPS];",
      "right" : "final byte[] recvDecodingTables_pos = new byte[N_GROUPS];",
      "info" : "FieldDeclaration[31803-31860]:FieldDeclaration[31436-31493]"
    }, {
      "left" : "int[] tt;",
      "right" : "int[] tt;",
      "info" : "FieldDeclaration[31929-31938]:FieldDeclaration[31562-31571]"
    }, {
      "left" : "byte[] ll8;",
      "right" : "byte[] ll8;",
      "info" : "FieldDeclaration[31963-31974]:FieldDeclaration[31596-31607]"
    }, {
      "left" : "Data(int blockSize100k)",
      "right" : "Data(int blockSize100k)",
      "info" : "MethodDeclaration[32078-32192]:MethodDeclaration[31711-31825]"
    }, {
      "left" : "int[] initTT(int length)",
      "right" : "int[] initTT(int length)",
      "info" : "MethodDeclaration[32202-32978]:MethodDeclaration[31835-32611]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[32991-33694]:MethodDeclaration[32624-33327]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1282-1288]:Modifier[1282-1288]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1289-1294]:TYPE_DECLARATION_KIND[1289-1294]"
    }, {
      "left" : "BZip2CompressorInputStream",
      "right" : "BZip2CompressorInputStream",
      "info" : "SimpleName[1295-1321]:SimpleName[1295-1321]"
    }, {
      "left" : "CompressorInputStream",
      "right" : "CompressorInputStream",
      "info" : "SimpleType[1330-1351]:SimpleType[1330-1351]"
    }, {
      "left" : "BZip2Constants",
      "right" : "BZip2Constants",
      "info" : "SimpleType[1437-1451]:SimpleType[1437-1451]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3456-3462]:Modifier[3422-3428]"
    }, {
      "left" : "BZip2CompressorInputStream",
      "right" : "BZip2CompressorInputStream",
      "info" : "SimpleName[3463-3489]:SimpleName[3429-3455]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[3490-3510]:SingleVariableDeclaration[3456-3476]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3519-3530]:SimpleType[3485-3496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3531-3563]:Block[3497-3529]"
    }, {
      "left" : "this(in, false);",
      "right" : "this(in, false);",
      "info" : "ConstructorInvocation[3541-3557]:ConstructorInvocation[3507-3523]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4284-4290]:Modifier[4250-4256]"
    }, {
      "left" : "BZip2CompressorInputStream",
      "right" : "BZip2CompressorInputStream",
      "info" : "SimpleName[4291-4317]:SimpleName[4257-4283]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[4318-4338]:SingleVariableDeclaration[4284-4304]"
    }, {
      "left" : "final boolean decompressConcatenated",
      "right" : "final boolean decompressConcatenated",
      "info" : "SingleVariableDeclaration[4340-4376]:SingleVariableDeclaration[4306-4342]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4385-4396]:SimpleType[4351-4362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4397-4552]:Block[4363-4496]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[4407-4420]:ExpressionStatement[4373-4386]"
    }, {
      "left" : "this.decompressConcatenated = decompressConcatenated;",
      "right" : "this.decompressConcatenated = decompressConcatenated;",
      "info" : "ExpressionStatement[4429-4482]:ExpressionStatement[4395-4448]"
    }, {
      "left" : "init(true);",
      "right" : "init(true);",
      "info" : "ExpressionStatement[4492-4503]:ExpressionStatement[4458-4469]"
    }, {
      "left" : "initBlock();",
      "right" : "initBlock();",
      "info" : "ExpressionStatement[4512-4524]:ExpressionStatement[4478-4490]"
    }, {
      "left" : "setupBlock()",
      "right" : "setupBlock()",
      "info" : "MethodInvocation[4533-4545]:MethodInvocation[6328-6340]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4558-4567]:MarkerAnnotation[4502-4511]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4572-4578]:Modifier[4516-4522]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4579-4582]:PrimitiveType[4523-4526]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4583-4587]:SimpleName[4527-4531]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4597-4608]:SimpleType[4541-4552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4609-4812]:Block[4553-4756]"
    }, {
      "left" : "if (this.in != null)",
      "right" : "if (this.in != null)",
      "info" : "IfStatement[4619-4806]:IfStatement[4563-4750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4640-4737]:Block[4584-4681]"
    }, {
      "left" : "int r = read0();",
      "right" : "int r = read0();",
      "info" : "VariableDeclarationStatement[4654-4670]:VariableDeclarationStatement[4598-4614]"
    }, {
      "left" : "count(r < 0 ? -1 : 1);",
      "right" : "count(r < 0 ? -1 : 1);",
      "info" : "ExpressionStatement[4683-4705]:ExpressionStatement[4627-4649]"
    }, {
      "left" : "return r;",
      "right" : "return r;",
      "info" : "ReturnStatement[4718-4727]:ReturnStatement[4662-4671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4743-4806]:Block[4687-4750]"
    }, {
      "left" : "throw new IOException(\"stream closed\");",
      "right" : "throw new IOException(\"stream closed\");",
      "info" : "ThrowStatement[4757-4796]:ThrowStatement[4701-4740]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4917-4926]:MarkerAnnotation[4861-4870]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4931-4937]:Modifier[4875-4881]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4938-4941]:PrimitiveType[4882-4885]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4942-4946]:SimpleName[4886-4890]"
    }, {
      "left" : "final byte[] dest",
      "right" : "final byte[] dest",
      "info" : "SingleVariableDeclaration[4947-4964]:SingleVariableDeclaration[4891-4908]"
    }, {
      "left" : "final int offs",
      "right" : "final int offs",
      "info" : "SingleVariableDeclaration[4966-4980]:SingleVariableDeclaration[4910-4924]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[4982-4995]:SingleVariableDeclaration[4926-4939]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5012-5023]:SimpleType[4956-4967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5024-5854]:Block[4968-5798]"
    }, {
      "left" : "if (offs < 0)",
      "right" : "if (offs < 0)",
      "info" : "IfStatement[5034-5135]:IfStatement[4978-5079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5048-5135]:Block[4992-5079]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");",
      "right" : "throw new IndexOutOfBoundsException(\"offs(\" + offs + \") < 0.\");",
      "info" : "ThrowStatement[5062-5125]:ThrowStatement[5006-5069]"
    }, {
      "left" : "if (len < 0)",
      "right" : "if (len < 0)",
      "info" : "IfStatement[5144-5242]:IfStatement[5088-5186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5157-5242]:Block[5101-5186]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");",
      "right" : "throw new IndexOutOfBoundsException(\"len(\" + len + \") < 0.\");",
      "info" : "ThrowStatement[5171-5232]:ThrowStatement[5115-5176]"
    }, {
      "left" : "if (offs + len > dest.length)",
      "right" : "if (offs + len > dest.length)",
      "info" : "IfStatement[5251-5466]:IfStatement[5195-5410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5281-5466]:Block[5225-5410]"
    }, {
      "left" : "throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");",
      "right" : "throw new IndexOutOfBoundsException(\"offs(\" + offs + \") + len(\"\n                                                + len + \") > dest.length(\" + dest.length + \").\");",
      "info" : "ThrowStatement[5295-5456]:ThrowStatement[5239-5400]"
    }, {
      "left" : "if (this.in == null)",
      "right" : "if (this.in == null)",
      "info" : "IfStatement[5475-5559]:IfStatement[5419-5503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5496-5559]:Block[5440-5503]"
    }, {
      "left" : "throw new IOException(\"stream closed\");",
      "right" : "throw new IOException(\"stream closed\");",
      "info" : "ThrowStatement[5510-5549]:ThrowStatement[5454-5493]"
    }, {
      "left" : "final int hi = offs + len;",
      "right" : "final int hi = offs + len;",
      "info" : "VariableDeclarationStatement[5569-5595]:VariableDeclarationStatement[5513-5539]"
    }, {
      "left" : "int destOffs = offs;",
      "right" : "int destOffs = offs;",
      "info" : "VariableDeclarationStatement[5604-5624]:VariableDeclarationStatement[5548-5568]"
    }, {
      "left" : "int b;",
      "right" : "int b;",
      "info" : "VariableDeclarationStatement[5633-5639]:VariableDeclarationStatement[5577-5583]"
    }, {
      "left" : "while (destOffs < hi && ((b = read0()) >= 0))",
      "right" : "while (destOffs < hi && ((b = read0()) >= 0))",
      "info" : "WhileStatement[5648-5768]:WhileStatement[5592-5712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5694-5768]:Block[5638-5712]"
    }, {
      "left" : "dest[destOffs++] = (byte) b;",
      "right" : "dest[destOffs++] = (byte) b;",
      "info" : "ExpressionStatement[5708-5736]:ExpressionStatement[5652-5680]"
    }, {
      "left" : "count(1);",
      "right" : "count(1);",
      "info" : "ExpressionStatement[5749-5758]:ExpressionStatement[5693-5702]"
    }, {
      "left" : "int c = (destOffs == offs) ? -1 : (destOffs - offs);",
      "right" : "int c = (destOffs == offs) ? -1 : (destOffs - offs);",
      "info" : "VariableDeclarationStatement[5778-5830]:VariableDeclarationStatement[5722-5774]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[5839-5848]:ReturnStatement[5783-5792]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5860-5867]:Modifier[5804-5811]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5868-5872]:PrimitiveType[5812-5816]"
    }, {
      "left" : "makeMaps",
      "right" : "makeMaps",
      "info" : "SimpleName[5873-5881]:SimpleName[5817-5825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5884-6212]:Block[5828-6156]"
    }, {
      "left" : "final boolean[] inUse = this.data.inUse;",
      "right" : "final boolean[] inUse = this.data.inUse;",
      "info" : "VariableDeclarationStatement[5894-5934]:VariableDeclarationStatement[5838-5878]"
    }, {
      "left" : "final byte[] seqToUnseq = this.data.seqToUnseq;",
      "right" : "final byte[] seqToUnseq = this.data.seqToUnseq;",
      "info" : "VariableDeclarationStatement[5943-5990]:VariableDeclarationStatement[5887-5934]"
    }, {
      "left" : "int nInUseShadow = 0;",
      "right" : "int nInUseShadow = 0;",
      "info" : "VariableDeclarationStatement[6000-6021]:VariableDeclarationStatement[5944-5965]"
    }, {
      "left" : "for (int i = 0; i < 256; i++)",
      "right" : "for (int i = 0; i < 256; i++)",
      "info" : "ForStatement[6031-6169]:ForStatement[5975-6113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6061-6169]:Block[6005-6113]"
    }, {
      "left" : "if (inUse[i])",
      "right" : "if (inUse[i])",
      "info" : "IfStatement[6075-6159]:IfStatement[6019-6103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6089-6159]:Block[6033-6103]"
    }, {
      "left" : "seqToUnseq[nInUseShadow++] = (byte) i;",
      "right" : "seqToUnseq[nInUseShadow++] = (byte) i;",
      "info" : "ExpressionStatement[6107-6145]:ExpressionStatement[6051-6089]"
    }, {
      "left" : "this.nInUse = nInUseShadow;",
      "right" : "this.nInUse = nInUseShadow;",
      "info" : "ExpressionStatement[6179-6206]:ExpressionStatement[6123-6150]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6218-6225]:Modifier[6162-6169]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6226-6229]:PrimitiveType[6170-6173]"
    }, {
      "left" : "read0",
      "right" : "read0",
      "info" : "SimpleName[6230-6235]:SimpleName[6174-6179]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6245-6256]:SimpleType[6189-6200]"
    }, {
      "left" : "switch (currentState) {\n        case EOF:\n            return -1;\n\n        case START_BLOCK_STATE:\n            throw new IllegalStateException();\n\n        case RAND_PART_A_STATE:\n            throw new IllegalStateException();\n\n        case RAND_PART_B_STATE:\n            setupRandPartB();\n            break;\n\n        case RAND_PART_C_STATE:\n            setupRandPartC();\n            break;\n\n        case NO_RAND_PART_A_STATE:\n            throw new IllegalStateException();\n\n        case NO_RAND_PART_B_STATE:\n            setupNoRandPartB();\n            break;\n\n        case NO_RAND_PART_C_STATE:\n            setupNoRandPartC();\n            break;\n\n        default:\n            throw new IllegalStateException();\n        }",
      "right" : "switch (currentState) {\n        case EOF:\n            return -1;\n\n        case START_BLOCK_STATE:\n            return setupBlock();\n\n        case RAND_PART_A_STATE:\n            throw new IllegalStateException();\n\n        case RAND_PART_B_STATE:\n            return setupRandPartB();\n\n        case RAND_PART_C_STATE:\n            return setupRandPartC();\n\n        case NO_RAND_PART_A_STATE:\n            throw new IllegalStateException();\n\n        case NO_RAND_PART_B_STATE:\n            return setupNoRandPartB();\n\n        case NO_RAND_PART_C_STATE:\n            return setupNoRandPartC();\n\n        default:\n            throw new IllegalStateException();\n        }",
      "info" : "SwitchStatement[6313-7033]:SwitchStatement[6211-6869]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[6345-6354]:SwitchCase[6243-6252]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[6367-6377]:ReturnStatement[6265-6275]"
    }, {
      "left" : "case START_BLOCK_STATE:",
      "right" : "case START_BLOCK_STATE:",
      "info" : "SwitchCase[6387-6410]:SwitchCase[6285-6308]"
    }, {
      "left" : "case RAND_PART_A_STATE:",
      "right" : "case RAND_PART_A_STATE:",
      "info" : "SwitchCase[6467-6490]:SwitchCase[6351-6374]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[6503-6537]:ThrowStatement[6387-6421]"
    }, {
      "left" : "case RAND_PART_B_STATE:",
      "right" : "case RAND_PART_B_STATE:",
      "info" : "SwitchCase[6547-6570]:SwitchCase[6431-6454]"
    }, {
      "left" : "setupRandPartB()",
      "right" : "setupRandPartB()",
      "info" : "MethodInvocation[6583-6599]:MethodInvocation[6474-6490]"
    }, {
      "left" : "case RAND_PART_C_STATE:",
      "right" : "case RAND_PART_C_STATE:",
      "info" : "SwitchCase[6629-6652]:SwitchCase[6501-6524]"
    }, {
      "left" : "setupRandPartC()",
      "right" : "setupRandPartC()",
      "info" : "MethodInvocation[6665-6681]:MethodInvocation[6544-6560]"
    }, {
      "left" : "case NO_RAND_PART_A_STATE:",
      "right" : "case NO_RAND_PART_A_STATE:",
      "info" : "SwitchCase[6711-6737]:SwitchCase[6571-6597]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[6750-6784]:ThrowStatement[6610-6644]"
    }, {
      "left" : "case NO_RAND_PART_B_STATE:",
      "right" : "case NO_RAND_PART_B_STATE:",
      "info" : "SwitchCase[6794-6820]:SwitchCase[6654-6680]"
    }, {
      "left" : "setupNoRandPartB()",
      "right" : "setupNoRandPartB()",
      "info" : "MethodInvocation[6833-6851]:MethodInvocation[6700-6718]"
    }, {
      "left" : "case NO_RAND_PART_C_STATE:",
      "right" : "case NO_RAND_PART_C_STATE:",
      "info" : "SwitchCase[6881-6907]:SwitchCase[6729-6755]"
    }, {
      "left" : "setupNoRandPartC()",
      "right" : "setupNoRandPartC()",
      "info" : "MethodInvocation[6920-6938]:MethodInvocation[6775-6793]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[6968-6976]:SwitchCase[6804-6812]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[6989-7023]:ThrowStatement[6825-6859]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7069-7076]:Modifier[6881-6888]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7077-7084]:PrimitiveType[6889-6896]"
    }, {
      "left" : "init",
      "right" : "init",
      "info" : "SimpleName[7085-7089]:SimpleName[6897-6901]"
    }, {
      "left" : "boolean isFirstStream",
      "right" : "boolean isFirstStream",
      "info" : "SingleVariableDeclaration[7090-7111]:SingleVariableDeclaration[6902-6923]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7120-7131]:SimpleType[6932-6943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7132-7967]:Block[6944-7779]"
    }, {
      "left" : "if (null == in)",
      "right" : "if (null == in)",
      "info" : "IfStatement[7142-7222]:IfStatement[6954-7034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7158-7222]:Block[6970-7034]"
    }, {
      "left" : "throw new IOException(\"No InputStream\");",
      "right" : "throw new IOException(\"No InputStream\");",
      "info" : "ThrowStatement[7172-7212]:ThrowStatement[6984-7024]"
    }, {
      "left" : "int magic0 = this.in.read();",
      "right" : "int magic0 = this.in.read();",
      "info" : "VariableDeclarationStatement[7232-7260]:VariableDeclarationStatement[7044-7072]"
    }, {
      "left" : "if (magic0 == -1 && !isFirstStream)",
      "right" : "if (magic0 == -1 && !isFirstStream)",
      "info" : "IfStatement[7269-7342]:IfStatement[7081-7154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7305-7342]:Block[7117-7154]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7319-7332]:ReturnStatement[7131-7144]"
    }, {
      "left" : "int magic1 = this.in.read();",
      "right" : "int magic1 = this.in.read();",
      "info" : "VariableDeclarationStatement[7351-7379]:VariableDeclarationStatement[7163-7191]"
    }, {
      "left" : "int magic2 = this.in.read();",
      "right" : "int magic2 = this.in.read();",
      "info" : "VariableDeclarationStatement[7388-7416]:VariableDeclarationStatement[7200-7228]"
    }, {
      "left" : "if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h')",
      "right" : "if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h')",
      "info" : "IfStatement[7426-7657]:IfStatement[7238-7469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7479-7657]:Block[7291-7469]"
    }, {
      "left" : "throw new IOException(isFirstStream\n                    ? \"Stream is not in the BZip2 format\"\n                    : \"Garbage after a valid BZip2 stream\");",
      "right" : "throw new IOException(isFirstStream\n                    ? \"Stream is not in the BZip2 format\"\n                    : \"Garbage after a valid BZip2 stream\");",
      "info" : "ThrowStatement[7493-7647]:ThrowStatement[7305-7459]"
    }, {
      "left" : "int blockSize = this.in.read();",
      "right" : "int blockSize = this.in.read();",
      "info" : "VariableDeclarationStatement[7667-7698]:VariableDeclarationStatement[7479-7510]"
    }, {
      "left" : "if ((blockSize < '1') || (blockSize > '9'))",
      "right" : "if ((blockSize < '1') || (blockSize > '9'))",
      "info" : "IfStatement[7707-7828]:IfStatement[7519-7640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7751-7828]:Block[7563-7640]"
    }, {
      "left" : "throw new IOException(\"BZip2 block size is invalid\");",
      "right" : "throw new IOException(\"BZip2 block size is invalid\");",
      "info" : "ThrowStatement[7765-7818]:ThrowStatement[7577-7630]"
    }, {
      "left" : "this.blockSize100k = blockSize - '0';",
      "right" : "this.blockSize100k = blockSize - '0';",
      "info" : "ExpressionStatement[7838-7875]:ExpressionStatement[7650-7687]"
    }, {
      "left" : "this.bsLive = 0;",
      "right" : "this.bsLive = 0;",
      "info" : "ExpressionStatement[7885-7901]:ExpressionStatement[7697-7713]"
    }, {
      "left" : "this.computedCombinedCRC = 0;",
      "right" : "this.computedCombinedCRC = 0;",
      "info" : "ExpressionStatement[7910-7939]:ExpressionStatement[7722-7751]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7949-7961]:ReturnStatement[7761-7773]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7973-7980]:Modifier[7785-7792]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7981-7985]:PrimitiveType[7793-7797]"
    }, {
      "left" : "initBlock",
      "right" : "initBlock",
      "info" : "SimpleName[7986-7995]:SimpleName[7798-7807]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8005-8016]:SimpleType[7817-7828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8017-9797]:Block[7829-9609]"
    }, {
      "left" : "char magic0;",
      "right" : "char magic0;",
      "info" : "VariableDeclarationStatement[8027-8039]:VariableDeclarationStatement[7839-7851]"
    }, {
      "left" : "char magic1;",
      "right" : "char magic1;",
      "info" : "VariableDeclarationStatement[8048-8060]:VariableDeclarationStatement[7860-7872]"
    }, {
      "left" : "char magic2;",
      "right" : "char magic2;",
      "info" : "VariableDeclarationStatement[8069-8081]:VariableDeclarationStatement[7881-7893]"
    }, {
      "left" : "char magic3;",
      "right" : "char magic3;",
      "info" : "VariableDeclarationStatement[8090-8102]:VariableDeclarationStatement[7902-7914]"
    }, {
      "left" : "char magic4;",
      "right" : "char magic4;",
      "info" : "VariableDeclarationStatement[8111-8123]:VariableDeclarationStatement[7923-7935]"
    }, {
      "left" : "char magic5;",
      "right" : "char magic5;",
      "info" : "VariableDeclarationStatement[8132-8144]:VariableDeclarationStatement[7944-7956]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[8154-8914]:WhileStatement[7966-8726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8167-8914]:Block[7979-8726]"
    }, {
      "left" : "magic0 = bsGetUByte();",
      "right" : "magic0 = bsGetUByte();",
      "info" : "ExpressionStatement[8223-8245]:ExpressionStatement[8035-8057]"
    }, {
      "left" : "magic1 = bsGetUByte();",
      "right" : "magic1 = bsGetUByte();",
      "info" : "ExpressionStatement[8258-8280]:ExpressionStatement[8070-8092]"
    }, {
      "left" : "magic2 = bsGetUByte();",
      "right" : "magic2 = bsGetUByte();",
      "info" : "ExpressionStatement[8293-8315]:ExpressionStatement[8105-8127]"
    }, {
      "left" : "magic3 = bsGetUByte();",
      "right" : "magic3 = bsGetUByte();",
      "info" : "ExpressionStatement[8328-8350]:ExpressionStatement[8140-8162]"
    }, {
      "left" : "magic4 = bsGetUByte();",
      "right" : "magic4 = bsGetUByte();",
      "info" : "ExpressionStatement[8363-8385]:ExpressionStatement[8175-8197]"
    }, {
      "left" : "magic5 = bsGetUByte();",
      "right" : "magic5 = bsGetUByte();",
      "info" : "ExpressionStatement[8398-8420]:ExpressionStatement[8210-8232]"
    }, {
      "left" : "if (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45\n                    || magic3 != 0x38 || magic4 != 0x50 || magic5 != 0x90)",
      "right" : "if (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45\n                    || magic3 != 0x38 || magic4 != 0x50 || magic5 != 0x90)",
      "info" : "IfStatement[8502-8670]:IfStatement[8314-8482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8632-8670]:Block[8444-8482]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8650-8656]:BreakStatement[8462-8468]"
    }, {
      "left" : "if (complete())",
      "right" : "if (complete())",
      "info" : "IfStatement[8849-8904]:IfStatement[8661-8716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8865-8904]:Block[8677-8716]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8883-8890]:ReturnStatement[8695-8702]"
    }, {
      "left" : "if (magic0 != 0x31 || // '1'\n            magic1 != 0x41 || // ')'\n            magic2 != 0x59 || // 'Y'\n            magic3 != 0x26 || // '&'\n            magic4 != 0x53 || // 'S'\n            magic5 != 0x59)",
      "right" : "if (magic0 != 0x31 || // '1'\n            magic1 != 0x41 || // ')'\n            magic2 != 0x59 || // 'Y'\n            magic3 != 0x26 || // '&'\n            magic4 != 0x53 || // 'S'\n            magic5 != 0x59)",
      "info" : "IfStatement[8924-9791]:IfStatement[8736-9603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9149-9252]:Block[8961-9064]"
    }, {
      "left" : "this.currentState = EOF;",
      "right" : "this.currentState = EOF;",
      "info" : "ExpressionStatement[9163-9187]:ExpressionStatement[8975-8999]"
    }, {
      "left" : "throw new IOException(\"bad block header\");",
      "right" : "throw new IOException(\"bad block header\");",
      "info" : "ThrowStatement[9200-9242]:ThrowStatement[9012-9054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9258-9791]:Block[9070-9603]"
    }, {
      "left" : "this.storedBlockCRC = bsGetInt();",
      "right" : "this.storedBlockCRC = bsGetInt();",
      "info" : "ExpressionStatement[9272-9305]:ExpressionStatement[9084-9117]"
    }, {
      "left" : "this.blockRandomised = bsR(1) == 1;",
      "right" : "this.blockRandomised = bsR(1) == 1;",
      "info" : "ExpressionStatement[9318-9353]:ExpressionStatement[9130-9165]"
    }, {
      "left" : "if (this.data == null)",
      "right" : "if (this.data == null)",
      "info" : "IfStatement[9525-9621]:IfStatement[9337-9433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9548-9621]:Block[9360-9433]"
    }, {
      "left" : "this.data = new Data(this.blockSize100k);",
      "right" : "this.data = new Data(this.blockSize100k);",
      "info" : "ExpressionStatement[9566-9607]:ExpressionStatement[9378-9419]"
    }, {
      "left" : "getAndMoveToFrontDecode();",
      "right" : "getAndMoveToFrontDecode();",
      "info" : "ExpressionStatement[9665-9691]:ExpressionStatement[9477-9503]"
    }, {
      "left" : "this.crc.initialiseCRC();",
      "right" : "this.crc.initialiseCRC();",
      "info" : "ExpressionStatement[9705-9730]:ExpressionStatement[9517-9542]"
    }, {
      "left" : "this.currentState = START_BLOCK_STATE;",
      "right" : "this.currentState = START_BLOCK_STATE;",
      "info" : "ExpressionStatement[9743-9781]:ExpressionStatement[9555-9593]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9803-9810]:Modifier[9615-9622]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9811-9815]:PrimitiveType[9623-9627]"
    }, {
      "left" : "endBlock",
      "right" : "endBlock",
      "info" : "SimpleName[9816-9824]:SimpleName[9628-9636]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9834-9845]:SimpleType[9646-9657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9846-10561]:Block[9658-10373]"
    }, {
      "left" : "this.computedBlockCRC = this.crc.getFinalCRC();",
      "right" : "this.computedBlockCRC = this.crc.getFinalCRC();",
      "info" : "ExpressionStatement[9856-9903]:ExpressionStatement[9668-9715]"
    }, {
      "left" : "if (this.storedBlockCRC != this.computedBlockCRC)",
      "right" : "if (this.storedBlockCRC != this.computedBlockCRC)",
      "info" : "IfStatement[9963-10379]:IfStatement[9775-10191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10013-10379]:Block[9825-10191]"
    }, {
      "left" : "this.computedCombinedCRC = (this.storedCombinedCRC << 1)\n                | (this.storedCombinedCRC >>> 31);",
      "right" : "this.computedCombinedCRC = (this.storedCombinedCRC << 1)\n                | (this.storedCombinedCRC >>> 31);",
      "info" : "ExpressionStatement[10146-10253]:ExpressionStatement[9958-10065]"
    }, {
      "left" : "this.computedCombinedCRC ^= this.storedBlockCRC;",
      "right" : "this.computedCombinedCRC ^= this.storedBlockCRC;",
      "info" : "ExpressionStatement[10266-10314]:ExpressionStatement[10078-10126]"
    }, {
      "left" : "throw new IOException(\"BZip2 CRC error\");",
      "right" : "throw new IOException(\"BZip2 CRC error\");",
      "info" : "ThrowStatement[10328-10369]:ThrowStatement[10140-10181]"
    }, {
      "left" : "this.computedCombinedCRC = (this.computedCombinedCRC << 1)\n            | (this.computedCombinedCRC >>> 31);",
      "right" : "this.computedCombinedCRC = (this.computedCombinedCRC << 1)\n            | (this.computedCombinedCRC >>> 31);",
      "info" : "ExpressionStatement[10389-10496]:ExpressionStatement[10201-10308]"
    }, {
      "left" : "this.computedCombinedCRC ^= this.computedBlockCRC;",
      "right" : "this.computedCombinedCRC ^= this.computedBlockCRC;",
      "info" : "ExpressionStatement[10505-10555]:ExpressionStatement[10317-10367]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10567-10574]:Modifier[10379-10386]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10575-10582]:PrimitiveType[10387-10394]"
    }, {
      "left" : "complete",
      "right" : "complete",
      "info" : "SimpleName[10583-10591]:SimpleName[10395-10403]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10601-10612]:SimpleType[10413-10424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10613-11001]:Block[10425-10813]"
    }, {
      "left" : "this.storedCombinedCRC = bsGetInt();",
      "right" : "this.storedCombinedCRC = bsGetInt();",
      "info" : "ExpressionStatement[10623-10659]:ExpressionStatement[10435-10471]"
    }, {
      "left" : "this.currentState = EOF;",
      "right" : "this.currentState = EOF;",
      "info" : "ExpressionStatement[10668-10692]:ExpressionStatement[10480-10504]"
    }, {
      "left" : "this.data = null;",
      "right" : "this.data = null;",
      "info" : "ExpressionStatement[10701-10718]:ExpressionStatement[10513-10530]"
    }, {
      "left" : "if (this.storedCombinedCRC != this.computedCombinedCRC)",
      "right" : "if (this.storedCombinedCRC != this.computedCombinedCRC)",
      "info" : "IfStatement[10728-10849]:IfStatement[10540-10661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10784-10849]:Block[10596-10661]"
    }, {
      "left" : "throw new IOException(\"BZip2 CRC error\");",
      "right" : "throw new IOException(\"BZip2 CRC error\");",
      "info" : "ThrowStatement[10798-10839]:ThrowStatement[10610-10651]"
    }, {
      "left" : "return !decompressConcatenated || !init(false);",
      "right" : "return !decompressConcatenated || !init(false);",
      "info" : "ReturnStatement[10948-10995]:ReturnStatement[10760-10807]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11007-11016]:MarkerAnnotation[10819-10828]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11021-11027]:Modifier[10833-10839]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11028-11032]:PrimitiveType[10840-10844]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[11033-11038]:SimpleName[10845-10850]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11048-11059]:SimpleType[10860-10871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11060-11372]:Block[10872-11184]"
    }, {
      "left" : "InputStream inShadow = this.in;",
      "right" : "InputStream inShadow = this.in;",
      "info" : "VariableDeclarationStatement[11070-11101]:VariableDeclarationStatement[10882-10913]"
    }, {
      "left" : "if (inShadow != null)",
      "right" : "if (inShadow != null)",
      "info" : "IfStatement[11110-11366]:IfStatement[10922-11178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11132-11366]:Block[10944-11178]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11146-11356]:TryStatement[10958-11168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11150-11266]:Block[10962-11078]"
    }, {
      "left" : "if (inShadow != System.in)",
      "right" : "if (inShadow != System.in)",
      "info" : "IfStatement[11168-11252]:IfStatement[10980-11064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11195-11252]:Block[11007-11064]"
    }, {
      "left" : "inShadow.close();",
      "right" : "inShadow.close();",
      "info" : "ExpressionStatement[11217-11234]:ExpressionStatement[11029-11046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11275-11356]:Block[11087-11168]"
    }, {
      "left" : "this.data = null;",
      "right" : "this.data = null;",
      "info" : "ExpressionStatement[11293-11310]:ExpressionStatement[11105-11122]"
    }, {
      "left" : "this.in = null;",
      "right" : "this.in = null;",
      "info" : "ExpressionStatement[11327-11342]:ExpressionStatement[11139-11154]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11378-11385]:Modifier[11190-11197]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11386-11389]:PrimitiveType[11198-11201]"
    }, {
      "left" : "bsR",
      "right" : "bsR",
      "info" : "SimpleName[11390-11393]:SimpleName[11202-11205]"
    }, {
      "left" : "final int n",
      "right" : "final int n",
      "info" : "SingleVariableDeclaration[11394-11405]:SingleVariableDeclaration[11206-11217]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11414-11425]:SimpleType[11226-11237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11426-12079]:Block[11238-11891]"
    }, {
      "left" : "int bsLiveShadow = this.bsLive;",
      "right" : "int bsLiveShadow = this.bsLive;",
      "info" : "VariableDeclarationStatement[11436-11467]:VariableDeclarationStatement[11248-11279]"
    }, {
      "left" : "int bsBuffShadow = this.bsBuff;",
      "right" : "int bsBuffShadow = this.bsBuff;",
      "info" : "VariableDeclarationStatement[11476-11507]:VariableDeclarationStatement[11288-11319]"
    }, {
      "left" : "if (bsLiveShadow < n)",
      "right" : "if (bsLiveShadow < n)",
      "info" : "IfStatement[11517-11962]:IfStatement[11329-11774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11539-11962]:Block[11351-11774]"
    }, {
      "left" : "final InputStream inShadow = this.in;",
      "right" : "final InputStream inShadow = this.in;",
      "info" : "VariableDeclarationStatement[11553-11590]:VariableDeclarationStatement[11365-11402]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[11603-11911]:DoStatement[11415-11723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11606-11885]:Block[11418-11697]"
    }, {
      "left" : "int thech = inShadow.read();",
      "right" : "int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[11624-11652]:VariableDeclarationStatement[11436-11464]"
    }, {
      "left" : "if (thech < 0)",
      "right" : "if (thech < 0)",
      "info" : "IfStatement[11670-11775]:IfStatement[11482-11587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11685-11775]:Block[11497-11587]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[11707-11757]:ThrowStatement[11519-11569]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[11793-11836]:ExpressionStatement[11605-11648]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[11853-11871]:ExpressionStatement[11665-11683]"
    }, {
      "left" : "this.bsBuff = bsBuffShadow;",
      "right" : "this.bsBuff = bsBuffShadow;",
      "info" : "ExpressionStatement[11925-11952]:ExpressionStatement[11737-11764]"
    }, {
      "left" : "this.bsLive = bsLiveShadow - n;",
      "right" : "this.bsLive = bsLiveShadow - n;",
      "info" : "ExpressionStatement[11972-12003]:ExpressionStatement[11784-11815]"
    }, {
      "left" : "return (bsBuffShadow >> (bsLiveShadow - n)) & ((1 << n) - 1);",
      "right" : "return (bsBuffShadow >> (bsLiveShadow - n)) & ((1 << n) - 1);",
      "info" : "ReturnStatement[12012-12073]:ReturnStatement[11824-11885]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12085-12092]:Modifier[11897-11904]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12093-12100]:PrimitiveType[11905-11912]"
    }, {
      "left" : "bsGetBit",
      "right" : "bsGetBit",
      "info" : "SimpleName[12101-12109]:SimpleName[11913-11921]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12119-12130]:SimpleType[11931-11942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12131-12645]:Block[11943-12457]"
    }, {
      "left" : "int bsLiveShadow = this.bsLive;",
      "right" : "int bsLiveShadow = this.bsLive;",
      "info" : "VariableDeclarationStatement[12141-12172]:VariableDeclarationStatement[11953-11984]"
    }, {
      "left" : "int bsBuffShadow = this.bsBuff;",
      "right" : "int bsBuffShadow = this.bsBuff;",
      "info" : "VariableDeclarationStatement[12181-12212]:VariableDeclarationStatement[11993-12024]"
    }, {
      "left" : "if (bsLiveShadow < 1)",
      "right" : "if (bsLiveShadow < 1)",
      "info" : "IfStatement[12222-12534]:IfStatement[12034-12346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12244-12534]:Block[12056-12346]"
    }, {
      "left" : "int thech = this.in.read();",
      "right" : "int thech = this.in.read();",
      "info" : "VariableDeclarationStatement[12258-12285]:VariableDeclarationStatement[12070-12097]"
    }, {
      "left" : "if (thech < 0)",
      "right" : "if (thech < 0)",
      "info" : "IfStatement[12299-12396]:IfStatement[12111-12208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12314-12396]:Block[12126-12208]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[12332-12382]:ThrowStatement[12144-12194]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[12410-12453]:ExpressionStatement[12222-12265]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[12466-12484]:ExpressionStatement[12278-12296]"
    }, {
      "left" : "this.bsBuff = bsBuffShadow;",
      "right" : "this.bsBuff = bsBuffShadow;",
      "info" : "ExpressionStatement[12497-12524]:ExpressionStatement[12309-12336]"
    }, {
      "left" : "this.bsLive = bsLiveShadow - 1;",
      "right" : "this.bsLive = bsLiveShadow - 1;",
      "info" : "ExpressionStatement[12544-12575]:ExpressionStatement[12356-12387]"
    }, {
      "left" : "return ((bsBuffShadow >> (bsLiveShadow - 1)) & 1) != 0;",
      "right" : "return ((bsBuffShadow >> (bsLiveShadow - 1)) & 1) != 0;",
      "info" : "ReturnStatement[12584-12639]:ReturnStatement[12396-12451]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12651-12658]:Modifier[12463-12470]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[12659-12663]:PrimitiveType[12471-12475]"
    }, {
      "left" : "bsGetUByte",
      "right" : "bsGetUByte",
      "info" : "SimpleName[12664-12674]:SimpleName[12476-12486]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12684-12695]:SimpleType[12496-12507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12696-12733]:Block[12508-12545]"
    }, {
      "left" : "return (char) bsR(8);",
      "right" : "return (char) bsR(8);",
      "info" : "ReturnStatement[12706-12727]:ReturnStatement[12518-12539]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12739-12746]:Modifier[12551-12558]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12747-12750]:PrimitiveType[12559-12562]"
    }, {
      "left" : "bsGetInt",
      "right" : "bsGetInt",
      "info" : "SimpleName[12751-12759]:SimpleName[12563-12571]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[12769-12780]:SimpleType[12581-12592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12781-12863]:Block[12593-12675]"
    }, {
      "left" : "return (((((bsR(8) << 8) | bsR(8)) << 8) | bsR(8)) << 8) | bsR(8);",
      "right" : "return (((((bsR(8) << 8) | bsR(8)) << 8) | bsR(8)) << 8) | bsR(8);",
      "info" : "ReturnStatement[12791-12857]:ReturnStatement[12603-12669]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12945-12952]:Modifier[12757-12764]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12953-12959]:Modifier[12765-12771]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12960-12964]:PrimitiveType[12772-12776]"
    }, {
      "left" : "hbCreateDecodeTables",
      "right" : "hbCreateDecodeTables",
      "info" : "SimpleName[12965-12985]:SimpleName[12777-12797]"
    }, {
      "left" : "final int[] limit",
      "right" : "final int[] limit",
      "info" : "SingleVariableDeclaration[12986-13003]:SingleVariableDeclaration[12798-12815]"
    }, {
      "left" : "final int[] base",
      "right" : "final int[] base",
      "info" : "SingleVariableDeclaration[13050-13066]:SingleVariableDeclaration[12862-12878]"
    }, {
      "left" : "final int[] perm",
      "right" : "final int[] perm",
      "info" : "SingleVariableDeclaration[13068-13084]:SingleVariableDeclaration[12880-12896]"
    }, {
      "left" : "final char[] length",
      "right" : "final char[] length",
      "info" : "SingleVariableDeclaration[13086-13105]:SingleVariableDeclaration[12898-12917]"
    }, {
      "left" : "final int minLen",
      "right" : "final int minLen",
      "info" : "SingleVariableDeclaration[13152-13168]:SingleVariableDeclaration[12964-12980]"
    }, {
      "left" : "final int maxLen",
      "right" : "final int maxLen",
      "info" : "SingleVariableDeclaration[13170-13186]:SingleVariableDeclaration[12982-12998]"
    }, {
      "left" : "final int alphaSize",
      "right" : "final int alphaSize",
      "info" : "SingleVariableDeclaration[13188-13207]:SingleVariableDeclaration[13000-13019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13209-14111]:Block[13021-13923]"
    }, {
      "left" : "for (int i = minLen, pp = 0; i <= maxLen; i++)",
      "right" : "for (int i = minLen, pp = 0; i <= maxLen; i++)",
      "info" : "ForStatement[13219-13433]:ForStatement[13031-13245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13266-13433]:Block[13078-13245]"
    }, {
      "left" : "for (int j = 0; j < alphaSize; j++)",
      "right" : "for (int j = 0; j < alphaSize; j++)",
      "info" : "ForStatement[13280-13423]:ForStatement[13092-13235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13316-13423]:Block[13128-13235]"
    }, {
      "left" : "if (length[j] == i)",
      "right" : "if (length[j] == i)",
      "info" : "IfStatement[13334-13409]:IfStatement[13146-13221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13354-13409]:Block[13166-13221]"
    }, {
      "left" : "perm[pp++] = j;",
      "right" : "perm[pp++] = j;",
      "info" : "ExpressionStatement[13376-13391]:ExpressionStatement[13188-13203]"
    }, {
      "left" : "for (int i = MAX_CODE_LEN; --i > 0)",
      "right" : "for (int i = MAX_CODE_LEN; --i > 0)",
      "info" : "ForStatement[13443-13542]:ForStatement[13255-13354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13480-13542]:Block[13292-13354]"
    }, {
      "left" : "base[i] = 0;",
      "right" : "base[i] = 0;",
      "info" : "ExpressionStatement[13494-13506]:ExpressionStatement[13306-13318]"
    }, {
      "left" : "limit[i] = 0;",
      "right" : "limit[i] = 0;",
      "info" : "ExpressionStatement[13519-13532]:ExpressionStatement[13331-13344]"
    }, {
      "left" : "for (int i = 0; i < alphaSize; i++)",
      "right" : "for (int i = 0; i < alphaSize; i++)",
      "info" : "ForStatement[13552-13634]:ForStatement[13364-13446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13588-13634]:Block[13400-13446]"
    }, {
      "left" : "base[length[i] + 1]++;",
      "right" : "base[length[i] + 1]++;",
      "info" : "ExpressionStatement[13602-13624]:ExpressionStatement[13414-13436]"
    }, {
      "left" : "for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++)",
      "right" : "for (int i = 1, b = base[0]; i < MAX_CODE_LEN; i++)",
      "info" : "ForStatement[13644-13758]:ForStatement[13456-13570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13696-13758]:Block[13508-13570]"
    }, {
      "left" : "b += base[i];",
      "right" : "b += base[i];",
      "info" : "ExpressionStatement[13710-13723]:ExpressionStatement[13522-13535]"
    }, {
      "left" : "base[i] = b;",
      "right" : "base[i] = b;",
      "info" : "ExpressionStatement[13736-13748]:ExpressionStatement[13548-13560]"
    }, {
      "left" : "for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++)",
      "right" : "for (int i = minLen, vec = 0, b = base[i]; i <= maxLen; i++)",
      "info" : "ForStatement[13768-13982]:ForStatement[13580-13794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13829-13982]:Block[13641-13794]"
    }, {
      "left" : "final int nb = base[i + 1];",
      "right" : "final int nb = base[i + 1];",
      "info" : "VariableDeclarationStatement[13843-13870]:VariableDeclarationStatement[13655-13682]"
    }, {
      "left" : "vec += nb - b;",
      "right" : "vec += nb - b;",
      "info" : "ExpressionStatement[13883-13897]:ExpressionStatement[13695-13709]"
    }, {
      "left" : "b = nb;",
      "right" : "b = nb;",
      "info" : "ExpressionStatement[13910-13917]:ExpressionStatement[13722-13729]"
    }, {
      "left" : "limit[i] = vec - 1;",
      "right" : "limit[i] = vec - 1;",
      "info" : "ExpressionStatement[13930-13949]:ExpressionStatement[13742-13761]"
    }, {
      "left" : "vec <<= 1;",
      "right" : "vec <<= 1;",
      "info" : "ExpressionStatement[13962-13972]:ExpressionStatement[13774-13784]"
    }, {
      "left" : "for (int i = minLen + 1; i <= maxLen; i++)",
      "right" : "for (int i = minLen + 1; i <= maxLen; i++)",
      "info" : "ForStatement[13992-14105]:ForStatement[13804-13917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14035-14105]:Block[13847-13917]"
    }, {
      "left" : "base[i] = ((limit[i - 1] + 1) << 1) - base[i];",
      "right" : "base[i] = ((limit[i - 1] + 1) << 1) - base[i];",
      "info" : "ExpressionStatement[14049-14095]:ExpressionStatement[13861-13907]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14117-14124]:Modifier[13929-13936]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14125-14129]:PrimitiveType[13937-13941]"
    }, {
      "left" : "recvDecodingTables",
      "right" : "recvDecodingTables",
      "info" : "SimpleName[14130-14148]:SimpleName[13942-13960]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14158-14169]:SimpleType[13970-13981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14170-16440]:Block[13982-16252]"
    }, {
      "left" : "final Data dataShadow = this.data;",
      "right" : "final Data dataShadow = this.data;",
      "info" : "VariableDeclarationStatement[14180-14214]:VariableDeclarationStatement[13992-14026]"
    }, {
      "left" : "final boolean[] inUse = dataShadow.inUse;",
      "right" : "final boolean[] inUse = dataShadow.inUse;",
      "info" : "VariableDeclarationStatement[14223-14264]:VariableDeclarationStatement[14035-14076]"
    }, {
      "left" : "final byte[] pos = dataShadow.recvDecodingTables_pos;",
      "right" : "final byte[] pos = dataShadow.recvDecodingTables_pos;",
      "info" : "VariableDeclarationStatement[14273-14326]:VariableDeclarationStatement[14085-14138]"
    }, {
      "left" : "final byte[] selector = dataShadow.selector;",
      "right" : "final byte[] selector = dataShadow.selector;",
      "info" : "VariableDeclarationStatement[14335-14379]:VariableDeclarationStatement[14147-14191]"
    }, {
      "left" : "final byte[] selectorMtf = dataShadow.selectorMtf;",
      "right" : "final byte[] selectorMtf = dataShadow.selectorMtf;",
      "info" : "VariableDeclarationStatement[14388-14438]:VariableDeclarationStatement[14200-14250]"
    }, {
      "left" : "int inUse16 = 0;",
      "right" : "int inUse16 = 0;",
      "info" : "VariableDeclarationStatement[14448-14464]:VariableDeclarationStatement[14260-14276]"
    }, {
      "left" : "for (int i = 0; i < 16; i++)",
      "right" : "for (int i = 0; i < 16; i++)",
      "info" : "ForStatement[14514-14633]:ForStatement[14326-14445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14543-14633]:Block[14355-14445]"
    }, {
      "left" : "if (bsGetBit())",
      "right" : "if (bsGetBit())",
      "info" : "IfStatement[14557-14623]:IfStatement[14369-14435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14573-14623]:Block[14385-14435]"
    }, {
      "left" : "inUse16 |= 1 << i;",
      "right" : "inUse16 |= 1 << i;",
      "info" : "ExpressionStatement[14591-14609]:ExpressionStatement[14403-14421]"
    }, {
      "left" : "for (int i = 256; --i >= 0)",
      "right" : "for (int i = 256; --i >= 0)",
      "info" : "ForStatement[14643-14713]:ForStatement[14455-14525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14672-14713]:Block[14484-14525]"
    }, {
      "left" : "inUse[i] = false;",
      "right" : "inUse[i] = false;",
      "info" : "ExpressionStatement[14686-14703]:ExpressionStatement[14498-14515]"
    }, {
      "left" : "for (int i = 0; i < 16; i++)",
      "right" : "for (int i = 0; i < 16; i++)",
      "info" : "ForStatement[14723-15034]:ForStatement[14535-14846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14752-15034]:Block[14564-14846]"
    }, {
      "left" : "if ((inUse16 & (1 << i)) != 0)",
      "right" : "if ((inUse16 & (1 << i)) != 0)",
      "info" : "IfStatement[14766-15024]:IfStatement[14578-14836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14797-15024]:Block[14609-14836]"
    }, {
      "left" : "final int i16 = i << 4;",
      "right" : "final int i16 = i << 4;",
      "info" : "VariableDeclarationStatement[14815-14838]:VariableDeclarationStatement[14627-14650]"
    }, {
      "left" : "for (int j = 0; j < 16; j++)",
      "right" : "for (int j = 0; j < 16; j++)",
      "info" : "ForStatement[14855-15010]:ForStatement[14667-14822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14884-15010]:Block[14696-14822]"
    }, {
      "left" : "if (bsGetBit())",
      "right" : "if (bsGetBit())",
      "info" : "IfStatement[14906-14992]:IfStatement[14718-14804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14922-14992]:Block[14734-14804]"
    }, {
      "left" : "inUse[i16 + j] = true;",
      "right" : "inUse[i16 + j] = true;",
      "info" : "ExpressionStatement[14948-14970]:ExpressionStatement[14760-14782]"
    }, {
      "left" : "makeMaps();",
      "right" : "makeMaps();",
      "info" : "ExpressionStatement[15044-15055]:ExpressionStatement[14856-14867]"
    }, {
      "left" : "final int alphaSize = this.nInUse + 2;",
      "right" : "final int alphaSize = this.nInUse + 2;",
      "info" : "VariableDeclarationStatement[15064-15102]:VariableDeclarationStatement[14876-14914]"
    }, {
      "left" : "final int nGroups = bsR(3);",
      "right" : "final int nGroups = bsR(3);",
      "info" : "VariableDeclarationStatement[15144-15171]:VariableDeclarationStatement[14956-14983]"
    }, {
      "left" : "final int nSelectors = bsR(15);",
      "right" : "final int nSelectors = bsR(15);",
      "info" : "VariableDeclarationStatement[15180-15211]:VariableDeclarationStatement[14992-15023]"
    }, {
      "left" : "for (int i = 0; i < nSelectors; i++)",
      "right" : "for (int i = 0; i < nSelectors; i++)",
      "info" : "ForStatement[15221-15399]:ForStatement[15033-15211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15258-15399]:Block[15070-15211]"
    }, {
      "left" : "int j = 0;",
      "right" : "int j = 0;",
      "info" : "VariableDeclarationStatement[15272-15282]:VariableDeclarationStatement[15084-15094]"
    }, {
      "left" : "while (bsGetBit())",
      "right" : "while (bsGetBit())",
      "info" : "WhileStatement[15295-15350]:WhileStatement[15107-15162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15314-15350]:Block[15126-15162]"
    }, {
      "left" : "j++;",
      "right" : "j++;",
      "info" : "ExpressionStatement[15332-15336]:ExpressionStatement[15144-15148]"
    }, {
      "left" : "selectorMtf[i] = (byte) j;",
      "right" : "selectorMtf[i] = (byte) j;",
      "info" : "ExpressionStatement[15363-15389]:ExpressionStatement[15175-15201]"
    }, {
      "left" : "for (int v = nGroups; --v >= 0)",
      "right" : "for (int v = nGroups; --v >= 0)",
      "info" : "ForStatement[15462-15537]:ForStatement[15274-15349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15495-15537]:Block[15307-15349]"
    }, {
      "left" : "pos[v] = (byte) v;",
      "right" : "pos[v] = (byte) v;",
      "info" : "ExpressionStatement[15509-15527]:ExpressionStatement[15321-15339]"
    }, {
      "left" : "for (int i = 0; i < nSelectors; i++)",
      "right" : "for (int i = 0; i < nSelectors; i++)",
      "info" : "ForStatement[15547-15901]:ForStatement[15359-15713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15584-15901]:Block[15396-15713]"
    }, {
      "left" : "int v = selectorMtf[i] & 0xff;",
      "right" : "int v = selectorMtf[i] & 0xff;",
      "info" : "VariableDeclarationStatement[15598-15628]:VariableDeclarationStatement[15410-15440]"
    }, {
      "left" : "final byte tmp = pos[v];",
      "right" : "final byte tmp = pos[v];",
      "info" : "VariableDeclarationStatement[15641-15665]:VariableDeclarationStatement[15453-15477]"
    }, {
      "left" : "while (v > 0)",
      "right" : "while (v > 0)",
      "info" : "WhileStatement[15678-15834]:WhileStatement[15490-15646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15692-15834]:Block[15504-15646]"
    }, {
      "left" : "pos[v] = pos[v - 1];",
      "right" : "pos[v] = pos[v - 1];",
      "info" : "ExpressionStatement[15779-15799]:ExpressionStatement[15591-15611]"
    }, {
      "left" : "v--;",
      "right" : "v--;",
      "info" : "ExpressionStatement[15816-15820]:ExpressionStatement[15628-15632]"
    }, {
      "left" : "pos[0] = tmp;",
      "right" : "pos[0] = tmp;",
      "info" : "ExpressionStatement[15847-15860]:ExpressionStatement[15659-15672]"
    }, {
      "left" : "selector[i] = tmp;",
      "right" : "selector[i] = tmp;",
      "info" : "ExpressionStatement[15873-15891]:ExpressionStatement[15685-15703]"
    }, {
      "left" : "final char[][] len = dataShadow.temp_charArray2d;",
      "right" : "final char[][] len = dataShadow.temp_charArray2d;",
      "info" : "VariableDeclarationStatement[15911-15960]:VariableDeclarationStatement[15723-15772]"
    }, {
      "left" : "for (int t = 0; t < nGroups; t++)",
      "right" : "for (int t = 0; t < nGroups; t++)",
      "info" : "ForStatement[16006-16331]:ForStatement[15818-16143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16040-16331]:Block[15852-16143]"
    }, {
      "left" : "int curr = bsR(5);",
      "right" : "int curr = bsR(5);",
      "info" : "VariableDeclarationStatement[16054-16072]:VariableDeclarationStatement[15866-15884]"
    }, {
      "left" : "final char[] len_t = len[t];",
      "right" : "final char[] len_t = len[t];",
      "info" : "VariableDeclarationStatement[16085-16113]:VariableDeclarationStatement[15897-15925]"
    }, {
      "left" : "for (int i = 0; i < alphaSize; i++)",
      "right" : "for (int i = 0; i < alphaSize; i++)",
      "info" : "ForStatement[16126-16321]:ForStatement[15938-16133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16162-16321]:Block[15974-16133]"
    }, {
      "left" : "while (bsGetBit())",
      "right" : "while (bsGetBit())",
      "info" : "WhileStatement[16180-16267]:WhileStatement[15992-16079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16199-16267]:Block[16011-16079]"
    }, {
      "left" : "curr += bsGetBit() ? -1 : 1;",
      "right" : "curr += bsGetBit() ? -1 : 1;",
      "info" : "ExpressionStatement[16221-16249]:ExpressionStatement[16033-16061]"
    }, {
      "left" : "len_t[i] = (char) curr;",
      "right" : "len_t[i] = (char) curr;",
      "info" : "ExpressionStatement[16284-16307]:ExpressionStatement[16096-16119]"
    }, {
      "left" : "createHuffmanDecodingTables(alphaSize, nGroups);",
      "right" : "createHuffmanDecodingTables(alphaSize, nGroups);",
      "info" : "ExpressionStatement[16386-16434]:ExpressionStatement[16198-16246]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16513-16520]:Modifier[16325-16332]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16521-16525]:PrimitiveType[16333-16337]"
    }, {
      "left" : "createHuffmanDecodingTables",
      "right" : "createHuffmanDecodingTables",
      "info" : "SimpleName[16526-16553]:SimpleName[16338-16365]"
    }, {
      "left" : "final int alphaSize",
      "right" : "final int alphaSize",
      "info" : "SingleVariableDeclaration[16554-16573]:SingleVariableDeclaration[16366-16385]"
    }, {
      "left" : "final int nGroups",
      "right" : "final int nGroups",
      "info" : "SingleVariableDeclaration[16620-16637]:SingleVariableDeclaration[16432-16449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16639-17540]:Block[16451-17352]"
    }, {
      "left" : "final Data dataShadow = this.data;",
      "right" : "final Data dataShadow = this.data;",
      "info" : "VariableDeclarationStatement[16649-16683]:VariableDeclarationStatement[16461-16495]"
    }, {
      "left" : "final char[][] len = dataShadow.temp_charArray2d;",
      "right" : "final char[][] len = dataShadow.temp_charArray2d;",
      "info" : "VariableDeclarationStatement[16692-16741]:VariableDeclarationStatement[16504-16553]"
    }, {
      "left" : "final int[] minLens = dataShadow.minLens;",
      "right" : "final int[] minLens = dataShadow.minLens;",
      "info" : "VariableDeclarationStatement[16750-16791]:VariableDeclarationStatement[16562-16603]"
    }, {
      "left" : "final int[][] limit = dataShadow.limit;",
      "right" : "final int[][] limit = dataShadow.limit;",
      "info" : "VariableDeclarationStatement[16800-16839]:VariableDeclarationStatement[16612-16651]"
    }, {
      "left" : "final int[][] base = dataShadow.base;",
      "right" : "final int[][] base = dataShadow.base;",
      "info" : "VariableDeclarationStatement[16848-16885]:VariableDeclarationStatement[16660-16697]"
    }, {
      "left" : "final int[][] perm = dataShadow.perm;",
      "right" : "final int[][] perm = dataShadow.perm;",
      "info" : "VariableDeclarationStatement[16894-16931]:VariableDeclarationStatement[16706-16743]"
    }, {
      "left" : "for (int t = 0; t < nGroups; t++)",
      "right" : "for (int t = 0; t < nGroups; t++)",
      "info" : "ForStatement[16941-17534]:ForStatement[16753-17346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16975-17534]:Block[16787-17346]"
    }, {
      "left" : "int minLen = 32;",
      "right" : "int minLen = 32;",
      "info" : "VariableDeclarationStatement[16989-17005]:VariableDeclarationStatement[16801-16817]"
    }, {
      "left" : "int maxLen = 0;",
      "right" : "int maxLen = 0;",
      "info" : "VariableDeclarationStatement[17018-17033]:VariableDeclarationStatement[16830-16845]"
    }, {
      "left" : "final char[] len_t = len[t];",
      "right" : "final char[] len_t = len[t];",
      "info" : "VariableDeclarationStatement[17046-17074]:VariableDeclarationStatement[16858-16886]"
    }, {
      "left" : "for (int i = alphaSize; --i >= 0)",
      "right" : "for (int i = alphaSize; --i >= 0)",
      "info" : "ForStatement[17087-17361]:ForStatement[16899-17173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17122-17361]:Block[16934-17173]"
    }, {
      "left" : "final char lent = len_t[i];",
      "right" : "final char lent = len_t[i];",
      "info" : "VariableDeclarationStatement[17140-17167]:VariableDeclarationStatement[16952-16979]"
    }, {
      "left" : "if (lent > maxLen)",
      "right" : "if (lent > maxLen)",
      "info" : "IfStatement[17184-17257]:IfStatement[16996-17069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17203-17257]:Block[17015-17069]"
    }, {
      "left" : "maxLen = lent;",
      "right" : "maxLen = lent;",
      "info" : "ExpressionStatement[17225-17239]:ExpressionStatement[17037-17051]"
    }, {
      "left" : "if (lent < minLen)",
      "right" : "if (lent < minLen)",
      "info" : "IfStatement[17274-17347]:IfStatement[17086-17159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17293-17347]:Block[17105-17159]"
    }, {
      "left" : "minLen = lent;",
      "right" : "minLen = lent;",
      "info" : "ExpressionStatement[17315-17329]:ExpressionStatement[17127-17141]"
    }, {
      "left" : "hbCreateDecodeTables(limit[t], base[t], perm[t], len[t], minLen,\n                                 maxLen, alphaSize);",
      "right" : "hbCreateDecodeTables(limit[t], base[t], perm[t], len[t], minLen,\n                                 maxLen, alphaSize);",
      "info" : "ExpressionStatement[17374-17491]:ExpressionStatement[17186-17303]"
    }, {
      "left" : "minLens[t] = minLen;",
      "right" : "minLens[t] = minLen;",
      "info" : "ExpressionStatement[17504-17524]:ExpressionStatement[17316-17336]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17546-17553]:Modifier[17358-17365]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17554-17558]:PrimitiveType[17366-17370]"
    }, {
      "left" : "getAndMoveToFrontDecode",
      "right" : "getAndMoveToFrontDecode",
      "info" : "SimpleName[17559-17582]:SimpleName[17371-17394]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17592-17603]:SimpleType[17404-17415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17604-24569]:Block[17416-24381]"
    }, {
      "left" : "this.origPtr = bsR(24);",
      "right" : "this.origPtr = bsR(24);",
      "info" : "ExpressionStatement[17614-17637]:ExpressionStatement[17426-17449]"
    }, {
      "left" : "recvDecodingTables();",
      "right" : "recvDecodingTables();",
      "info" : "ExpressionStatement[17646-17667]:ExpressionStatement[17458-17479]"
    }, {
      "left" : "final InputStream inShadow = this.in;",
      "right" : "final InputStream inShadow = this.in;",
      "info" : "VariableDeclarationStatement[17677-17714]:VariableDeclarationStatement[17489-17526]"
    }, {
      "left" : "final Data dataShadow = this.data;",
      "right" : "final Data dataShadow = this.data;",
      "info" : "VariableDeclarationStatement[17723-17757]:VariableDeclarationStatement[17535-17569]"
    }, {
      "left" : "final byte[] ll8 = dataShadow.ll8;",
      "right" : "final byte[] ll8 = dataShadow.ll8;",
      "info" : "VariableDeclarationStatement[17766-17800]:VariableDeclarationStatement[17578-17612]"
    }, {
      "left" : "final int[] unzftab = dataShadow.unzftab;",
      "right" : "final int[] unzftab = dataShadow.unzftab;",
      "info" : "VariableDeclarationStatement[17809-17850]:VariableDeclarationStatement[17621-17662]"
    }, {
      "left" : "final byte[] selector = dataShadow.selector;",
      "right" : "final byte[] selector = dataShadow.selector;",
      "info" : "VariableDeclarationStatement[17859-17903]:VariableDeclarationStatement[17671-17715]"
    }, {
      "left" : "final byte[] seqToUnseq = dataShadow.seqToUnseq;",
      "right" : "final byte[] seqToUnseq = dataShadow.seqToUnseq;",
      "info" : "VariableDeclarationStatement[17912-17960]:VariableDeclarationStatement[17724-17772]"
    }, {
      "left" : "final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;",
      "right" : "final char[] yy = dataShadow.getAndMoveToFrontDecode_yy;",
      "info" : "VariableDeclarationStatement[17969-18025]:VariableDeclarationStatement[17781-17837]"
    }, {
      "left" : "final int[] minLens = dataShadow.minLens;",
      "right" : "final int[] minLens = dataShadow.minLens;",
      "info" : "VariableDeclarationStatement[18034-18075]:VariableDeclarationStatement[17846-17887]"
    }, {
      "left" : "final int[][] limit = dataShadow.limit;",
      "right" : "final int[][] limit = dataShadow.limit;",
      "info" : "VariableDeclarationStatement[18084-18123]:VariableDeclarationStatement[17896-17935]"
    }, {
      "left" : "final int[][] base = dataShadow.base;",
      "right" : "final int[][] base = dataShadow.base;",
      "info" : "VariableDeclarationStatement[18132-18169]:VariableDeclarationStatement[17944-17981]"
    }, {
      "left" : "final int[][] perm = dataShadow.perm;",
      "right" : "final int[][] perm = dataShadow.perm;",
      "info" : "VariableDeclarationStatement[18178-18215]:VariableDeclarationStatement[17990-18027]"
    }, {
      "left" : "final int limitLast = this.blockSize100k * 100000;",
      "right" : "final int limitLast = this.blockSize100k * 100000;",
      "info" : "VariableDeclarationStatement[18224-18274]:VariableDeclarationStatement[18036-18086]"
    }, {
      "left" : "for (int i = 256; --i >= 0)",
      "right" : "for (int i = 256; --i >= 0)",
      "info" : "ForStatement[18508-18606]:ForStatement[18320-18418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18537-18606]:Block[18349-18418]"
    }, {
      "left" : "yy[i] = (char) i;",
      "right" : "yy[i] = (char) i;",
      "info" : "ExpressionStatement[18551-18568]:ExpressionStatement[18363-18380]"
    }, {
      "left" : "unzftab[i] = 0;",
      "right" : "unzftab[i] = 0;",
      "info" : "ExpressionStatement[18581-18596]:ExpressionStatement[18393-18408]"
    }, {
      "left" : "int groupNo = 0;",
      "right" : "int groupNo = 0;",
      "info" : "VariableDeclarationStatement[18616-18632]:VariableDeclarationStatement[18428-18444]"
    }, {
      "left" : "int groupPos = G_SIZE - 1;",
      "right" : "int groupPos = G_SIZE - 1;",
      "info" : "VariableDeclarationStatement[18641-18667]:VariableDeclarationStatement[18453-18479]"
    }, {
      "left" : "final int eob = this.nInUse + 1;",
      "right" : "final int eob = this.nInUse + 1;",
      "info" : "VariableDeclarationStatement[18676-18708]:VariableDeclarationStatement[18488-18520]"
    }, {
      "left" : "int nextSym = getAndMoveToFrontDecode0(0);",
      "right" : "int nextSym = getAndMoveToFrontDecode0(0);",
      "info" : "VariableDeclarationStatement[18717-18759]:VariableDeclarationStatement[18529-18571]"
    }, {
      "left" : "int bsBuffShadow = this.bsBuff;",
      "right" : "int bsBuffShadow = this.bsBuff;",
      "info" : "VariableDeclarationStatement[18768-18799]:VariableDeclarationStatement[18580-18611]"
    }, {
      "left" : "int bsLiveShadow = this.bsLive;",
      "right" : "int bsLiveShadow = this.bsLive;",
      "info" : "VariableDeclarationStatement[18808-18839]:VariableDeclarationStatement[18620-18651]"
    }, {
      "left" : "int lastShadow = -1;",
      "right" : "int lastShadow = -1;",
      "info" : "VariableDeclarationStatement[18848-18868]:VariableDeclarationStatement[18660-18680]"
    }, {
      "left" : "int zt = selector[groupNo] & 0xff;",
      "right" : "int zt = selector[groupNo] & 0xff;",
      "info" : "VariableDeclarationStatement[18877-18911]:VariableDeclarationStatement[18689-18723]"
    }, {
      "left" : "int[] base_zt = base[zt];",
      "right" : "int[] base_zt = base[zt];",
      "info" : "VariableDeclarationStatement[18920-18945]:VariableDeclarationStatement[18732-18757]"
    }, {
      "left" : "int[] limit_zt = limit[zt];",
      "right" : "int[] limit_zt = limit[zt];",
      "info" : "VariableDeclarationStatement[18954-18981]:VariableDeclarationStatement[18766-18793]"
    }, {
      "left" : "int[] perm_zt = perm[zt];",
      "right" : "int[] perm_zt = perm[zt];",
      "info" : "VariableDeclarationStatement[18990-19015]:VariableDeclarationStatement[18802-18827]"
    }, {
      "left" : "int minLens_zt = minLens[zt];",
      "right" : "int minLens_zt = minLens[zt];",
      "info" : "VariableDeclarationStatement[19024-19053]:VariableDeclarationStatement[18836-18865]"
    }, {
      "left" : "while (nextSym != eob)",
      "right" : "while (nextSym != eob)",
      "info" : "WhileStatement[19063-24458]:WhileStatement[18875-24270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19086-24458]:Block[18898-24270]"
    }, {
      "left" : "if ((nextSym == RUNA) || (nextSym == RUNB))",
      "right" : "if ((nextSym == RUNA) || (nextSym == RUNB))",
      "info" : "IfStatement[19100-24448]:IfStatement[18912-24260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19144-21846]:Block[18956-21658]"
    }, {
      "left" : "int s = -1;",
      "right" : "int s = -1;",
      "info" : "VariableDeclarationStatement[19162-19173]:VariableDeclarationStatement[18974-18985]"
    }, {
      "left" : "for (int n = 1; true; n <<= 1)",
      "right" : "for (int n = 1; true; n <<= 1)",
      "info" : "ForStatement[19191-21511]:ForStatement[19003-21323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19222-21511]:Block[19034-21323]"
    }, {
      "left" : "if (nextSym == RUNA)",
      "right" : "if (nextSym == RUNA)",
      "info" : "IfStatement[19244-19467]:IfStatement[19056-19279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19265-19320]:Block[19077-19132]"
    }, {
      "left" : "s += n;",
      "right" : "s += n;",
      "info" : "ExpressionStatement[19291-19298]:ExpressionStatement[19103-19110]"
    }, {
      "left" : "if (nextSym == RUNB)",
      "right" : "if (nextSym == RUNB)",
      "info" : "IfStatement[19326-19467]:IfStatement[19138-19279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19347-19407]:Block[19159-19219]"
    }, {
      "left" : "s += n << 1;",
      "right" : "s += n << 1;",
      "info" : "ExpressionStatement[19373-19385]:ExpressionStatement[19185-19197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19413-19467]:Block[19225-19279]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19439-19445]:BreakStatement[19251-19257]"
    }, {
      "left" : "if (groupPos == 0)",
      "right" : "if (groupPos == 0)",
      "info" : "IfStatement[19489-19884]:IfStatement[19301-19696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19508-19819]:Block[19320-19631]"
    }, {
      "left" : "groupPos = G_SIZE - 1;",
      "right" : "groupPos = G_SIZE - 1;",
      "info" : "ExpressionStatement[19534-19556]:ExpressionStatement[19346-19368]"
    }, {
      "left" : "zt = selector[++groupNo] & 0xff;",
      "right" : "zt = selector[++groupNo] & 0xff;",
      "info" : "ExpressionStatement[19581-19613]:ExpressionStatement[19393-19425]"
    }, {
      "left" : "base_zt = base[zt];",
      "right" : "base_zt = base[zt];",
      "info" : "ExpressionStatement[19638-19657]:ExpressionStatement[19450-19469]"
    }, {
      "left" : "limit_zt = limit[zt];",
      "right" : "limit_zt = limit[zt];",
      "info" : "ExpressionStatement[19682-19703]:ExpressionStatement[19494-19515]"
    }, {
      "left" : "perm_zt = perm[zt];",
      "right" : "perm_zt = perm[zt];",
      "info" : "ExpressionStatement[19728-19747]:ExpressionStatement[19540-19559]"
    }, {
      "left" : "minLens_zt = minLens[zt];",
      "right" : "minLens_zt = minLens[zt];",
      "info" : "ExpressionStatement[19772-19797]:ExpressionStatement[19584-19609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19825-19884]:Block[19637-19696]"
    }, {
      "left" : "groupPos--;",
      "right" : "groupPos--;",
      "info" : "ExpressionStatement[19851-19862]:ExpressionStatement[19663-19674]"
    }, {
      "left" : "int zn = minLens_zt;",
      "right" : "int zn = minLens_zt;",
      "info" : "VariableDeclarationStatement[19906-19926]:VariableDeclarationStatement[19718-19738]"
    }, {
      "left" : "while (bsLiveShadow < zn)",
      "right" : "while (bsLiveShadow < zn)",
      "info" : "WhileStatement[20023-20468]:WhileStatement[19835-20280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20049-20468]:Block[19861-20280]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[20075-20109]:VariableDeclarationStatement[19887-19921]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[20134-20446]:IfStatement[19946-20258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20150-20334]:Block[19962-20146]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[20180-20223]:ExpressionStatement[19992-20035]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[20252-20270]:ExpressionStatement[20064-20082]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[20299-20308]:ContinueStatement[20111-20120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20340-20446]:Block[20152-20258]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[20370-20420]:ThrowStatement[20182-20232]"
    }, {
      "left" : "int zvec = (bsBuffShadow >> (bsLiveShadow - zn))\n                        & ((1 << zn) - 1);",
      "right" : "int zvec = (bsBuffShadow >> (bsLiveShadow - zn))\n                        & ((1 << zn) - 1);",
      "info" : "VariableDeclarationStatement[20489-20580]:VariableDeclarationStatement[20301-20392]"
    }, {
      "left" : "bsLiveShadow -= zn;",
      "right" : "bsLiveShadow -= zn;",
      "info" : "ExpressionStatement[20601-20620]:ExpressionStatement[20413-20432]"
    }, {
      "left" : "while (zvec > limit_zt[zn])",
      "right" : "while (zvec > limit_zt[zn])",
      "info" : "WhileStatement[20642-21434]:WhileStatement[20454-21246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20670-21434]:Block[20482-21246]"
    }, {
      "left" : "zn++;",
      "right" : "zn++;",
      "info" : "ExpressionStatement[20696-20701]:ExpressionStatement[20508-20513]"
    }, {
      "left" : "while (bsLiveShadow < 1)",
      "right" : "while (bsLiveShadow < 1)",
      "info" : "WhileStatement[20726-21261]:WhileStatement[20538-21073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20751-21261]:Block[20563-21073]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[20781-20815]:VariableDeclarationStatement[20593-20627]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[20844-21235]:IfStatement[20656-21047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20860-21060]:Block[20672-20872]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[20894-20937]:ExpressionStatement[20706-20749]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[20970-20988]:ExpressionStatement[20782-20800]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21021-21030]:ContinueStatement[20833-20842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21066-21235]:Block[20878-21047]"
    }, {
      "left" : "throw new IOException(\n                                                      \"unexpected end of stream\");",
      "right" : "throw new IOException(\n                                                      \"unexpected end of stream\");",
      "info" : "ThrowStatement[21100-21205]:ThrowStatement[20912-21017]"
    }, {
      "left" : "bsLiveShadow--;",
      "right" : "bsLiveShadow--;",
      "info" : "ExpressionStatement[21286-21301]:ExpressionStatement[21098-21113]"
    }, {
      "left" : "zvec = (zvec << 1)\n                            | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "right" : "zvec = (zvec << 1)\n                            | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "info" : "ExpressionStatement[21326-21412]:ExpressionStatement[21138-21224]"
    }, {
      "left" : "nextSym = perm_zt[zvec - base_zt[zn]];",
      "right" : "nextSym = perm_zt[zvec - base_zt[zn]];",
      "info" : "ExpressionStatement[21455-21493]:ExpressionStatement[21267-21305]"
    }, {
      "left" : "final byte ch = seqToUnseq[yy[0]];",
      "right" : "final byte ch = seqToUnseq[yy[0]];",
      "info" : "VariableDeclarationStatement[21529-21563]:VariableDeclarationStatement[21341-21375]"
    }, {
      "left" : "unzftab[ch & 0xff] += s + 1;",
      "right" : "unzftab[ch & 0xff] += s + 1;",
      "info" : "ExpressionStatement[21580-21608]:ExpressionStatement[21392-21420]"
    }, {
      "left" : "while (s-- >= 0)",
      "right" : "while (s-- >= 0)",
      "info" : "WhileStatement[21626-21706]:WhileStatement[21438-21518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21643-21706]:Block[21455-21518]"
    }, {
      "left" : "ll8[++lastShadow] = ch;",
      "right" : "ll8[++lastShadow] = ch;",
      "info" : "ExpressionStatement[21665-21688]:ExpressionStatement[21477-21500]"
    }, {
      "left" : "if (lastShadow >= limitLast)",
      "right" : "if (lastShadow >= limitLast)",
      "info" : "IfStatement[21724-21832]:IfStatement[21536-21644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21753-21832]:Block[21565-21644]"
    }, {
      "left" : "throw new IOException(\"block overrun\");",
      "right" : "throw new IOException(\"block overrun\");",
      "info" : "ThrowStatement[21775-21814]:ThrowStatement[21587-21626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21852-24448]:Block[21664-24260]"
    }, {
      "left" : "if (++lastShadow >= limitLast)",
      "right" : "if (++lastShadow >= limitLast)",
      "info" : "IfStatement[21870-21980]:IfStatement[21682-21792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21901-21980]:Block[21713-21792]"
    }, {
      "left" : "throw new IOException(\"block overrun\");",
      "right" : "throw new IOException(\"block overrun\");",
      "info" : "ThrowStatement[21923-21962]:ThrowStatement[21735-21774]"
    }, {
      "left" : "final char tmp = yy[nextSym - 1];",
      "right" : "final char tmp = yy[nextSym - 1];",
      "info" : "VariableDeclarationStatement[21998-22031]:VariableDeclarationStatement[21810-21843]"
    }, {
      "left" : "unzftab[seqToUnseq[tmp] & 0xff]++;",
      "right" : "unzftab[seqToUnseq[tmp] & 0xff]++;",
      "info" : "ExpressionStatement[22048-22082]:ExpressionStatement[21860-21894]"
    }, {
      "left" : "ll8[lastShadow] = seqToUnseq[tmp];",
      "right" : "ll8[lastShadow] = seqToUnseq[tmp];",
      "info" : "ExpressionStatement[22099-22133]:ExpressionStatement[21911-21945]"
    }, {
      "left" : "if (nextSym <= 16)",
      "right" : "if (nextSym <= 16)",
      "info" : "IfStatement[22382-22629]:IfStatement[22194-22441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22401-22539]:Block[22213-22351]"
    }, {
      "left" : "for (int j = nextSym - 1; j > 0)",
      "right" : "for (int j = nextSym - 1; j > 0)",
      "info" : "ForStatement[22423-22521]:ForStatement[22235-22333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22457-22521]:Block[22269-22333]"
    }, {
      "left" : "yy[j] = yy[--j];",
      "right" : "yy[j] = yy[--j];",
      "info" : "ExpressionStatement[22483-22499]:ExpressionStatement[22295-22311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22545-22629]:Block[22357-22441]"
    }, {
      "left" : "System.arraycopy(yy, 0, yy, 1, nextSym - 1);",
      "right" : "System.arraycopy(yy, 0, yy, 1, nextSym - 1);",
      "info" : "ExpressionStatement[22567-22611]:ExpressionStatement[22379-22423]"
    }, {
      "left" : "yy[0] = tmp;",
      "right" : "yy[0] = tmp;",
      "info" : "ExpressionStatement[22647-22659]:ExpressionStatement[22459-22471]"
    }, {
      "left" : "if (groupPos == 0)",
      "right" : "if (groupPos == 0)",
      "info" : "IfStatement[22677-23036]:IfStatement[22489-22848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22696-22979]:Block[22508-22791]"
    }, {
      "left" : "groupPos = G_SIZE - 1;",
      "right" : "groupPos = G_SIZE - 1;",
      "info" : "ExpressionStatement[22718-22740]:ExpressionStatement[22530-22552]"
    }, {
      "left" : "zt = selector[++groupNo] & 0xff;",
      "right" : "zt = selector[++groupNo] & 0xff;",
      "info" : "ExpressionStatement[22761-22793]:ExpressionStatement[22573-22605]"
    }, {
      "left" : "base_zt = base[zt];",
      "right" : "base_zt = base[zt];",
      "info" : "ExpressionStatement[22814-22833]:ExpressionStatement[22626-22645]"
    }, {
      "left" : "limit_zt = limit[zt];",
      "right" : "limit_zt = limit[zt];",
      "info" : "ExpressionStatement[22854-22875]:ExpressionStatement[22666-22687]"
    }, {
      "left" : "perm_zt = perm[zt];",
      "right" : "perm_zt = perm[zt];",
      "info" : "ExpressionStatement[22896-22915]:ExpressionStatement[22708-22727]"
    }, {
      "left" : "minLens_zt = minLens[zt];",
      "right" : "minLens_zt = minLens[zt];",
      "info" : "ExpressionStatement[22936-22961]:ExpressionStatement[22748-22773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22985-23036]:Block[22797-22848]"
    }, {
      "left" : "groupPos--;",
      "right" : "groupPos--;",
      "info" : "ExpressionStatement[23007-23018]:ExpressionStatement[22819-22830]"
    }, {
      "left" : "int zn = minLens_zt;",
      "right" : "int zn = minLens_zt;",
      "info" : "VariableDeclarationStatement[23054-23074]:VariableDeclarationStatement[22866-22886]"
    }, {
      "left" : "while (bsLiveShadow < zn)",
      "right" : "while (bsLiveShadow < zn)",
      "info" : "WhileStatement[23159-23568]:WhileStatement[22971-23380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23185-23568]:Block[22997-23380]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[23207-23241]:VariableDeclarationStatement[23019-23053]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[23262-23550]:IfStatement[23074-23362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23278-23446]:Block[23090-23258]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[23304-23347]:ExpressionStatement[23116-23159]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[23372-23390]:ExpressionStatement[23184-23202]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23415-23424]:ContinueStatement[23227-23236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23452-23550]:Block[23264-23362]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[23478-23528]:ThrowStatement[23290-23340]"
    }, {
      "left" : "int zvec = (bsBuffShadow >> (bsLiveShadow - zn))\n                    & ((1 << zn) - 1);",
      "right" : "int zvec = (bsBuffShadow >> (bsLiveShadow - zn))\n                    & ((1 << zn) - 1);",
      "info" : "VariableDeclarationStatement[23585-23672]:VariableDeclarationStatement[23397-23484]"
    }, {
      "left" : "bsLiveShadow -= zn;",
      "right" : "bsLiveShadow -= zn;",
      "info" : "ExpressionStatement[23689-23708]:ExpressionStatement[23501-23520]"
    }, {
      "left" : "while (zvec > limit_zt[zn])",
      "right" : "while (zvec > limit_zt[zn])",
      "info" : "WhileStatement[23726-24379]:WhileStatement[23538-24191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23754-24379]:Block[23566-24191]"
    }, {
      "left" : "zn++;",
      "right" : "zn++;",
      "info" : "ExpressionStatement[23776-23781]:ExpressionStatement[23588-23593]"
    }, {
      "left" : "while (bsLiveShadow < 1)",
      "right" : "while (bsLiveShadow < 1)",
      "info" : "WhileStatement[23802-24246]:WhileStatement[23614-24058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23827-24246]:Block[23639-24058]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[23853-23887]:VariableDeclarationStatement[23665-23699]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[23912-24224]:IfStatement[23724-24036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23928-24112]:Block[23740-23924]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[23958-24001]:ExpressionStatement[23770-23813]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[24030-24048]:ExpressionStatement[23842-23860]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[24077-24086]:ContinueStatement[23889-23898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24118-24224]:Block[23930-24036]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[24148-24198]:ThrowStatement[23960-24010]"
    }, {
      "left" : "bsLiveShadow--;",
      "right" : "bsLiveShadow--;",
      "info" : "ExpressionStatement[24267-24282]:ExpressionStatement[24079-24094]"
    }, {
      "left" : "zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "right" : "zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "info" : "ExpressionStatement[24303-24361]:ExpressionStatement[24115-24173]"
    }, {
      "left" : "nextSym = perm_zt[zvec - base_zt[zn]];",
      "right" : "nextSym = perm_zt[zvec - base_zt[zn]];",
      "info" : "ExpressionStatement[24396-24434]:ExpressionStatement[24208-24246]"
    }, {
      "left" : "this.last = lastShadow;",
      "right" : "this.last = lastShadow;",
      "info" : "ExpressionStatement[24468-24491]:ExpressionStatement[24280-24303]"
    }, {
      "left" : "this.bsLive = bsLiveShadow;",
      "right" : "this.bsLive = bsLiveShadow;",
      "info" : "ExpressionStatement[24500-24527]:ExpressionStatement[24312-24339]"
    }, {
      "left" : "this.bsBuff = bsBuffShadow;",
      "right" : "this.bsBuff = bsBuffShadow;",
      "info" : "ExpressionStatement[24536-24563]:ExpressionStatement[24348-24375]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24575-24582]:Modifier[24387-24394]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24583-24586]:PrimitiveType[24395-24398]"
    }, {
      "left" : "getAndMoveToFrontDecode0",
      "right" : "getAndMoveToFrontDecode0",
      "info" : "SimpleName[24587-24611]:SimpleName[24399-24423]"
    }, {
      "left" : "final int groupNo",
      "right" : "final int groupNo",
      "info" : "SingleVariableDeclaration[24612-24629]:SingleVariableDeclaration[24424-24441]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24638-24649]:SimpleType[24450-24461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24650-25702]:Block[24462-25514]"
    }, {
      "left" : "final InputStream inShadow = this.in;",
      "right" : "final InputStream inShadow = this.in;",
      "info" : "VariableDeclarationStatement[24660-24697]:VariableDeclarationStatement[24472-24509]"
    }, {
      "left" : "final Data dataShadow = this.data;",
      "right" : "final Data dataShadow = this.data;",
      "info" : "VariableDeclarationStatement[24706-24740]:VariableDeclarationStatement[24518-24552]"
    }, {
      "left" : "final int zt = dataShadow.selector[groupNo] & 0xff;",
      "right" : "final int zt = dataShadow.selector[groupNo] & 0xff;",
      "info" : "VariableDeclarationStatement[24749-24800]:VariableDeclarationStatement[24561-24612]"
    }, {
      "left" : "final int[] limit_zt = dataShadow.limit[zt];",
      "right" : "final int[] limit_zt = dataShadow.limit[zt];",
      "info" : "VariableDeclarationStatement[24809-24853]:VariableDeclarationStatement[24621-24665]"
    }, {
      "left" : "int zn = dataShadow.minLens[zt];",
      "right" : "int zn = dataShadow.minLens[zt];",
      "info" : "VariableDeclarationStatement[24862-24894]:VariableDeclarationStatement[24674-24706]"
    }, {
      "left" : "int zvec = bsR(zn);",
      "right" : "int zvec = bsR(zn);",
      "info" : "VariableDeclarationStatement[24903-24922]:VariableDeclarationStatement[24715-24734]"
    }, {
      "left" : "int bsLiveShadow = this.bsLive;",
      "right" : "int bsLiveShadow = this.bsLive;",
      "info" : "VariableDeclarationStatement[24931-24962]:VariableDeclarationStatement[24743-24774]"
    }, {
      "left" : "int bsBuffShadow = this.bsBuff;",
      "right" : "int bsBuffShadow = this.bsBuff;",
      "info" : "VariableDeclarationStatement[24971-25002]:VariableDeclarationStatement[24783-24814]"
    }, {
      "left" : "while (zvec > limit_zt[zn])",
      "right" : "while (zvec > limit_zt[zn])",
      "info" : "WhileStatement[25012-25554]:WhileStatement[24824-25366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25040-25554]:Block[24852-25366]"
    }, {
      "left" : "zn++;",
      "right" : "zn++;",
      "info" : "ExpressionStatement[25054-25059]:ExpressionStatement[24866-24871]"
    }, {
      "left" : "while (bsLiveShadow < 1)",
      "right" : "while (bsLiveShadow < 1)",
      "info" : "WhileStatement[25072-25445]:WhileStatement[24884-25257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25097-25445]:Block[24909-25257]"
    }, {
      "left" : "final int thech = inShadow.read();",
      "right" : "final int thech = inShadow.read();",
      "info" : "VariableDeclarationStatement[25115-25149]:VariableDeclarationStatement[24927-24961]"
    }, {
      "left" : "if (thech >= 0)",
      "right" : "if (thech >= 0)",
      "info" : "IfStatement[25167-25431]:IfStatement[24979-25243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25183-25335]:Block[24995-25147]"
    }, {
      "left" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "right" : "bsBuffShadow = (bsBuffShadow << 8) | thech;",
      "info" : "ExpressionStatement[25205-25248]:ExpressionStatement[25017-25060]"
    }, {
      "left" : "bsLiveShadow += 8;",
      "right" : "bsLiveShadow += 8;",
      "info" : "ExpressionStatement[25269-25287]:ExpressionStatement[25081-25099]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[25308-25317]:ContinueStatement[25120-25129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25341-25431]:Block[25153-25243]"
    }, {
      "left" : "throw new IOException(\"unexpected end of stream\");",
      "right" : "throw new IOException(\"unexpected end of stream\");",
      "info" : "ThrowStatement[25363-25413]:ThrowStatement[25175-25225]"
    }, {
      "left" : "bsLiveShadow--;",
      "right" : "bsLiveShadow--;",
      "info" : "ExpressionStatement[25458-25473]:ExpressionStatement[25270-25285]"
    }, {
      "left" : "zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "right" : "zvec = (zvec << 1) | ((bsBuffShadow >> bsLiveShadow) & 1);",
      "info" : "ExpressionStatement[25486-25544]:ExpressionStatement[25298-25356]"
    }, {
      "left" : "this.bsLive = bsLiveShadow;",
      "right" : "this.bsLive = bsLiveShadow;",
      "info" : "ExpressionStatement[25564-25591]:ExpressionStatement[25376-25403]"
    }, {
      "left" : "this.bsBuff = bsBuffShadow;",
      "right" : "this.bsBuff = bsBuffShadow;",
      "info" : "ExpressionStatement[25600-25627]:ExpressionStatement[25412-25439]"
    }, {
      "left" : "return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];",
      "right" : "return dataShadow.perm[zt][zvec - dataShadow.base[zt][zn]];",
      "info" : "ReturnStatement[25637-25696]:ReturnStatement[25449-25508]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25708-25715]:Modifier[25520-25527]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[25716-25719]:PrimitiveType[25528-25531]"
    }, {
      "left" : "setupBlock",
      "right" : "setupBlock",
      "info" : "SimpleName[25720-25730]:SimpleName[25532-25542]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25740-25751]:SimpleType[25552-25563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25752-26787]:Block[25564-26599]"
    }, {
      "left" : "if (currentState == EOF || this.data == null)",
      "right" : "if (currentState == EOF || this.data == null)",
      "info" : "IfStatement[25762-25842]:IfStatement[25574-25654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25808-25842]:Block[25620-25654]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[25822-25832]:ReturnStatement[25634-25644]"
    }, {
      "left" : "final int[] cftab = this.data.cftab;",
      "right" : "final int[] cftab = this.data.cftab;",
      "info" : "VariableDeclarationStatement[25852-25888]:VariableDeclarationStatement[25664-25700]"
    }, {
      "left" : "final int[] tt = this.data.initTT(this.last + 1);",
      "right" : "final int[] tt = this.data.initTT(this.last + 1);",
      "info" : "VariableDeclarationStatement[25897-25946]:VariableDeclarationStatement[25709-25758]"
    }, {
      "left" : "final byte[] ll8 = this.data.ll8;",
      "right" : "final byte[] ll8 = this.data.ll8;",
      "info" : "VariableDeclarationStatement[25955-25988]:VariableDeclarationStatement[25767-25800]"
    }, {
      "left" : "cftab[0] = 0;",
      "right" : "cftab[0] = 0;",
      "info" : "ExpressionStatement[25997-26010]:ExpressionStatement[25809-25822]"
    }, {
      "left" : "System.arraycopy(this.data.unzftab, 0, cftab, 1, 256);",
      "right" : "System.arraycopy(this.data.unzftab, 0, cftab, 1, 256);",
      "info" : "ExpressionStatement[26019-26073]:ExpressionStatement[25831-25885]"
    }, {
      "left" : "for (int i = 1, c = cftab[0]; i <= 256; i++)",
      "right" : "for (int i = 1, c = cftab[0]; i <= 256; i++)",
      "info" : "ForStatement[26083-26192]:ForStatement[25895-26004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26128-26192]:Block[25940-26004]"
    }, {
      "left" : "c += cftab[i];",
      "right" : "c += cftab[i];",
      "info" : "ExpressionStatement[26142-26156]:ExpressionStatement[25954-25968]"
    }, {
      "left" : "cftab[i] = c;",
      "right" : "cftab[i] = c;",
      "info" : "ExpressionStatement[26169-26182]:ExpressionStatement[25981-25994]"
    }, {
      "left" : "for (int i = 0, lastShadow = this.last; i <= lastShadow; i++)",
      "right" : "for (int i = 0, lastShadow = this.last; i <= lastShadow; i++)",
      "info" : "ForStatement[26202-26319]:ForStatement[26014-26131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26264-26319]:Block[26076-26131]"
    }, {
      "left" : "tt[cftab[ll8[i] & 0xff]++] = i;",
      "right" : "tt[cftab[ll8[i] & 0xff]++] = i;",
      "info" : "ExpressionStatement[26278-26309]:ExpressionStatement[26090-26121]"
    }, {
      "left" : "if ((this.origPtr < 0) || (this.origPtr >= tt.length))",
      "right" : "if ((this.origPtr < 0) || (this.origPtr >= tt.length))",
      "info" : "IfStatement[26329-26450]:IfStatement[26141-26262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26384-26450]:Block[26196-26262]"
    }, {
      "left" : "throw new IOException(\"stream corrupted\");",
      "right" : "throw new IOException(\"stream corrupted\");",
      "info" : "ThrowStatement[26398-26440]:ThrowStatement[26210-26252]"
    }, {
      "left" : "this.su_tPos = tt[this.origPtr];",
      "right" : "this.su_tPos = tt[this.origPtr];",
      "info" : "ExpressionStatement[26460-26492]:ExpressionStatement[26272-26304]"
    }, {
      "left" : "this.su_count = 0;",
      "right" : "this.su_count = 0;",
      "info" : "ExpressionStatement[26501-26519]:ExpressionStatement[26313-26331]"
    }, {
      "left" : "this.su_i2 = 0;",
      "right" : "this.su_i2 = 0;",
      "info" : "ExpressionStatement[26528-26543]:ExpressionStatement[26340-26355]"
    }, {
      "left" : "this.su_ch2 = 256;",
      "right" : "this.su_ch2 = 256;",
      "info" : "ExpressionStatement[26552-26570]:ExpressionStatement[26364-26382]"
    }, {
      "left" : "if (this.blockRandomised)",
      "right" : "if (this.blockRandomised)",
      "info" : "IfStatement[26609-26746]:IfStatement[26421-26558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26635-26746]:Block[26447-26558]"
    }, {
      "left" : "this.su_rNToGo = 0;",
      "right" : "this.su_rNToGo = 0;",
      "info" : "ExpressionStatement[26649-26668]:ExpressionStatement[26461-26480]"
    }, {
      "left" : "this.su_rTPos = 0;",
      "right" : "this.su_rTPos = 0;",
      "info" : "ExpressionStatement[26681-26699]:ExpressionStatement[26493-26511]"
    }, {
      "left" : "return setupRandPartA();",
      "right" : "return setupRandPartA();",
      "info" : "ReturnStatement[26712-26736]:ReturnStatement[26524-26548]"
    }, {
      "left" : "return setupNoRandPartA();",
      "right" : "return setupNoRandPartA();",
      "info" : "ReturnStatement[26755-26781]:ReturnStatement[26567-26593]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26793-26800]:Modifier[26605-26612]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[26801-26804]:PrimitiveType[26613-26616]"
    }, {
      "left" : "setupRandPartA",
      "right" : "setupRandPartA",
      "info" : "SimpleName[26805-26819]:SimpleName[26617-26631]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26829-26840]:SimpleType[26641-26652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26841-27709]:Block[26653-27476]"
    }, {
      "left" : "if (this.su_i2 <= this.last)",
      "right" : "if (this.su_i2 <= this.last)",
      "info" : "IfStatement[26851-27703]:IfStatement[26663-27470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26880-27604]:Block[26692-27371]"
    }, {
      "left" : "this.su_chPrev = this.su_ch2;",
      "right" : "this.su_chPrev = this.su_ch2;",
      "info" : "ExpressionStatement[26894-26923]:ExpressionStatement[26706-26735]"
    }, {
      "left" : "int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
      "right" : "int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
      "info" : "VariableDeclarationStatement[26936-26990]:VariableDeclarationStatement[26748-26802]"
    }, {
      "left" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "right" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "info" : "ExpressionStatement[27003-27045]:ExpressionStatement[26815-26857]"
    }, {
      "left" : "if (this.su_rNToGo == 0)",
      "right" : "if (this.su_rNToGo == 0)",
      "info" : "IfStatement[27058-27320]:IfStatement[26870-27132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27083-27265]:Block[26895-27077]"
    }, {
      "left" : "this.su_rNToGo = Rand.rNums(this.su_rTPos) - 1;",
      "right" : "this.su_rNToGo = Rand.rNums(this.su_rTPos) - 1;",
      "info" : "ExpressionStatement[27101-27148]:ExpressionStatement[26913-26960]"
    }, {
      "left" : "if (++this.su_rTPos == 512)",
      "right" : "if (++this.su_rTPos == 512)",
      "info" : "IfStatement[27165-27251]:IfStatement[26977-27063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27193-27251]:Block[27005-27063]"
    }, {
      "left" : "this.su_rTPos = 0;",
      "right" : "this.su_rTPos = 0;",
      "info" : "ExpressionStatement[27215-27233]:ExpressionStatement[27027-27045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27271-27320]:Block[27083-27132]"
    }, {
      "left" : "this.su_rNToGo--;",
      "right" : "this.su_rNToGo--;",
      "info" : "ExpressionStatement[27289-27306]:ExpressionStatement[27101-27118]"
    }, {
      "left" : "this.su_ch2 = su_ch2Shadow ^= (this.su_rNToGo == 1) ? 1 : 0;",
      "right" : "this.su_ch2 = su_ch2Shadow ^= (this.su_rNToGo == 1) ? 1 : 0;",
      "info" : "ExpressionStatement[27333-27393]:ExpressionStatement[27145-27205]"
    }, {
      "left" : "this.su_i2++;",
      "right" : "this.su_i2++;",
      "info" : "ExpressionStatement[27406-27419]:ExpressionStatement[27218-27231]"
    }, {
      "left" : "this.currentState = RAND_PART_B_STATE;",
      "right" : "this.currentState = RAND_PART_B_STATE;",
      "info" : "ExpressionStatement[27477-27515]:ExpressionStatement[27244-27282]"
    }, {
      "left" : "this.crc.updateCRC(su_ch2Shadow);",
      "right" : "this.crc.updateCRC(su_ch2Shadow);",
      "info" : "ExpressionStatement[27528-27561]:ExpressionStatement[27295-27328]"
    }, {
      "left" : "return su_ch2Shadow;",
      "right" : "return su_ch2Shadow;",
      "info" : "ReturnStatement[27574-27594]:ReturnStatement[27341-27361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27610-27703]:Block[27377-27470]"
    }, {
      "left" : "endBlock();",
      "right" : "endBlock();",
      "info" : "ExpressionStatement[27624-27635]:ExpressionStatement[27391-27402]"
    }, {
      "left" : "initBlock();",
      "right" : "initBlock();",
      "info" : "ExpressionStatement[27648-27660]:ExpressionStatement[27415-27427]"
    }, {
      "left" : "return setupBlock();",
      "right" : "return setupBlock();",
      "info" : "ReturnStatement[27673-27693]:ReturnStatement[27440-27460]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27715-27722]:Modifier[27482-27489]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27723-27726]:PrimitiveType[27490-27493]"
    }, {
      "left" : "setupNoRandPartA",
      "right" : "setupNoRandPartA",
      "info" : "SimpleName[27727-27743]:SimpleName[27494-27510]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27753-27764]:SimpleType[27520-27531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27765-28382]:Block[27532-28104]"
    }, {
      "left" : "if (this.su_i2 <= this.last)",
      "right" : "if (this.su_i2 <= this.last)",
      "info" : "IfStatement[27775-28376]:IfStatement[27542-28098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27804-28223]:Block[27571-27945]"
    }, {
      "left" : "this.su_chPrev = this.su_ch2;",
      "right" : "this.su_chPrev = this.su_ch2;",
      "info" : "ExpressionStatement[27818-27847]:ExpressionStatement[27585-27614]"
    }, {
      "left" : "int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
      "right" : "int su_ch2Shadow = this.data.ll8[this.su_tPos] & 0xff;",
      "info" : "VariableDeclarationStatement[27860-27914]:VariableDeclarationStatement[27627-27681]"
    }, {
      "left" : "this.su_ch2 = su_ch2Shadow;",
      "right" : "this.su_ch2 = su_ch2Shadow;",
      "info" : "ExpressionStatement[27927-27954]:ExpressionStatement[27694-27721]"
    }, {
      "left" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "right" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "info" : "ExpressionStatement[27967-28009]:ExpressionStatement[27734-27776]"
    }, {
      "left" : "this.su_i2++;",
      "right" : "this.su_i2++;",
      "info" : "ExpressionStatement[28022-28035]:ExpressionStatement[27789-27802]"
    }, {
      "left" : "this.currentState = NO_RAND_PART_B_STATE;",
      "right" : "this.currentState = NO_RAND_PART_B_STATE;",
      "info" : "ExpressionStatement[28093-28134]:ExpressionStatement[27815-27856]"
    }, {
      "left" : "this.crc.updateCRC(su_ch2Shadow);",
      "right" : "this.crc.updateCRC(su_ch2Shadow);",
      "info" : "ExpressionStatement[28147-28180]:ExpressionStatement[27869-27902]"
    }, {
      "left" : "return su_ch2Shadow;",
      "right" : "return su_ch2Shadow;",
      "info" : "ReturnStatement[28193-28213]:ReturnStatement[27915-27935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28229-28376]:Block[27951-28098]"
    }, {
      "left" : "this.currentState = NO_RAND_PART_A_STATE;",
      "right" : "this.currentState = NO_RAND_PART_A_STATE;",
      "info" : "ExpressionStatement[28243-28284]:ExpressionStatement[27965-28006]"
    }, {
      "left" : "endBlock();",
      "right" : "endBlock();",
      "info" : "ExpressionStatement[28297-28308]:ExpressionStatement[28019-28030]"
    }, {
      "left" : "initBlock();",
      "right" : "initBlock();",
      "info" : "ExpressionStatement[28321-28333]:ExpressionStatement[28043-28055]"
    }, {
      "left" : "return setupBlock();",
      "right" : "return setupBlock();",
      "info" : "ReturnStatement[28346-28366]:ReturnStatement[28068-28088]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28388-28395]:Modifier[28110-28117]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[28396-28399]:PrimitiveType[28118-28121]"
    }, {
      "left" : "setupRandPartB",
      "right" : "setupRandPartB",
      "info" : "SimpleName[28400-28414]:SimpleName[28122-28136]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28424-28435]:SimpleType[28146-28157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28436-29365]:Block[28158-29087]"
    }, {
      "left" : "if (this.su_ch2 != this.su_chPrev)",
      "right" : "if (this.su_ch2 != this.su_chPrev)",
      "info" : "IfStatement[28446-29359]:IfStatement[28168-29081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28481-28611]:Block[28203-28333]"
    }, {
      "left" : "this.currentState = RAND_PART_A_STATE;",
      "right" : "this.currentState = RAND_PART_A_STATE;",
      "info" : "ExpressionStatement[28495-28533]:ExpressionStatement[28217-28255]"
    }, {
      "left" : "this.su_count = 1;",
      "right" : "this.su_count = 1;",
      "info" : "ExpressionStatement[28546-28564]:ExpressionStatement[28268-28286]"
    }, {
      "left" : "return setupRandPartA();",
      "right" : "return setupRandPartA();",
      "info" : "ReturnStatement[28577-28601]:ReturnStatement[28299-28323]"
    }, {
      "left" : "if (++this.su_count >= 4)",
      "right" : "if (++this.su_count >= 4)",
      "info" : "IfStatement[28617-29359]:IfStatement[28339-29081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28643-29254]:Block[28365-28976]"
    }, {
      "left" : "this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
      "right" : "this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
      "info" : "ExpressionStatement[28657-28713]:ExpressionStatement[28379-28435]"
    }, {
      "left" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "right" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "info" : "ExpressionStatement[28726-28768]:ExpressionStatement[28448-28490]"
    }, {
      "left" : "if (this.su_rNToGo == 0)",
      "right" : "if (this.su_rNToGo == 0)",
      "info" : "IfStatement[28781-29043]:IfStatement[28503-28765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28806-28988]:Block[28528-28710]"
    }, {
      "left" : "this.su_rNToGo = Rand.rNums(this.su_rTPos) - 1;",
      "right" : "this.su_rNToGo = Rand.rNums(this.su_rTPos) - 1;",
      "info" : "ExpressionStatement[28824-28871]:ExpressionStatement[28546-28593]"
    }, {
      "left" : "if (++this.su_rTPos == 512)",
      "right" : "if (++this.su_rTPos == 512)",
      "info" : "IfStatement[28888-28974]:IfStatement[28610-28696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28916-28974]:Block[28638-28696]"
    }, {
      "left" : "this.su_rTPos = 0;",
      "right" : "this.su_rTPos = 0;",
      "info" : "ExpressionStatement[28938-28956]:ExpressionStatement[28660-28678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28994-29043]:Block[28716-28765]"
    }, {
      "left" : "this.su_rNToGo--;",
      "right" : "this.su_rNToGo--;",
      "info" : "ExpressionStatement[29012-29029]:ExpressionStatement[28734-28751]"
    }, {
      "left" : "this.su_j2 = 0;",
      "right" : "this.su_j2 = 0;",
      "info" : "ExpressionStatement[29056-29071]:ExpressionStatement[28778-28793]"
    }, {
      "left" : "this.currentState = RAND_PART_C_STATE;",
      "right" : "this.currentState = RAND_PART_C_STATE;",
      "info" : "ExpressionStatement[29084-29122]:ExpressionStatement[28806-28844]"
    }, {
      "left" : "if (this.su_rNToGo == 1)",
      "right" : "if (this.su_rNToGo == 1)",
      "info" : "IfStatement[29135-29207]:IfStatement[28857-28929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29160-29207]:Block[28882-28929]"
    }, {
      "left" : "this.su_z ^= 1;",
      "right" : "this.su_z ^= 1;",
      "info" : "ExpressionStatement[29178-29193]:ExpressionStatement[28900-28915]"
    }, {
      "left" : "return setupRandPartC();",
      "right" : "return setupRandPartC();",
      "info" : "ReturnStatement[29220-29244]:ReturnStatement[28942-28966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29260-29359]:Block[28982-29081]"
    }, {
      "left" : "this.currentState = RAND_PART_A_STATE;",
      "right" : "this.currentState = RAND_PART_A_STATE;",
      "info" : "ExpressionStatement[29274-29312]:ExpressionStatement[28996-29034]"
    }, {
      "left" : "return setupRandPartA();",
      "right" : "return setupRandPartA();",
      "info" : "ReturnStatement[29325-29349]:ReturnStatement[29047-29071]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29371-29378]:Modifier[29093-29100]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29379-29382]:PrimitiveType[29101-29104]"
    }, {
      "left" : "setupRandPartC",
      "right" : "setupRandPartC",
      "info" : "SimpleName[29383-29397]:SimpleName[29105-29119]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29407-29418]:SimpleType[29129-29140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29419-29783]:Block[29141-29461]"
    }, {
      "left" : "if (this.su_j2 < this.su_z)",
      "right" : "if (this.su_j2 < this.su_z)",
      "info" : "IfStatement[29429-29777]:IfStatement[29151-29455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29457-29615]:Block[29179-29293]"
    }, {
      "left" : "this.crc.updateCRC(this.su_ch2);",
      "right" : "this.crc.updateCRC(this.su_ch2);",
      "info" : "ExpressionStatement[29515-29547]:ExpressionStatement[29193-29225]"
    }, {
      "left" : "this.su_j2++;",
      "right" : "this.su_j2++;",
      "info" : "ExpressionStatement[29560-29573]:ExpressionStatement[29238-29251]"
    }, {
      "left" : "return this.su_ch2;",
      "right" : "return this.su_ch2;",
      "info" : "ReturnStatement[29586-29605]:ReturnStatement[29264-29283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29621-29777]:Block[29299-29455]"
    }, {
      "left" : "this.currentState = RAND_PART_A_STATE;",
      "right" : "this.currentState = RAND_PART_A_STATE;",
      "info" : "ExpressionStatement[29635-29673]:ExpressionStatement[29313-29351]"
    }, {
      "left" : "this.su_i2++;",
      "right" : "this.su_i2++;",
      "info" : "ExpressionStatement[29686-29699]:ExpressionStatement[29364-29377]"
    }, {
      "left" : "this.su_count = 0;",
      "right" : "this.su_count = 0;",
      "info" : "ExpressionStatement[29712-29730]:ExpressionStatement[29390-29408]"
    }, {
      "left" : "return setupRandPartA();",
      "right" : "return setupRandPartA();",
      "info" : "ReturnStatement[29743-29767]:ReturnStatement[29421-29445]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29789-29796]:Modifier[29467-29474]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29797-29800]:PrimitiveType[29475-29478]"
    }, {
      "left" : "setupNoRandPartB",
      "right" : "setupNoRandPartB",
      "info" : "SimpleName[29801-29817]:SimpleName[29479-29495]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29827-29838]:SimpleType[29505-29516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29839-30261]:Block[29517-29939]"
    }, {
      "left" : "if (this.su_ch2 != this.su_chPrev)",
      "right" : "if (this.su_ch2 != this.su_chPrev)",
      "info" : "IfStatement[29849-30255]:IfStatement[29527-29933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29884-29965]:Block[29562-29643]"
    }, {
      "left" : "this.su_count = 1;",
      "right" : "this.su_count = 1;",
      "info" : "ExpressionStatement[29898-29916]:ExpressionStatement[29576-29594]"
    }, {
      "left" : "return setupNoRandPartA();",
      "right" : "return setupNoRandPartA();",
      "info" : "ReturnStatement[29929-29955]:ReturnStatement[29607-29633]"
    }, {
      "left" : "if (++this.su_count >= 4)",
      "right" : "if (++this.su_count >= 4)",
      "info" : "IfStatement[29971-30255]:IfStatement[29649-29933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29997-30199]:Block[29675-29877]"
    }, {
      "left" : "this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
      "right" : "this.su_z = (char) (this.data.ll8[this.su_tPos] & 0xff);",
      "info" : "ExpressionStatement[30011-30067]:ExpressionStatement[29689-29745]"
    }, {
      "left" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "right" : "this.su_tPos = this.data.tt[this.su_tPos];",
      "info" : "ExpressionStatement[30080-30122]:ExpressionStatement[29758-29800]"
    }, {
      "left" : "this.su_j2 = 0;",
      "right" : "this.su_j2 = 0;",
      "info" : "ExpressionStatement[30135-30150]:ExpressionStatement[29813-29828]"
    }, {
      "left" : "return setupNoRandPartC();",
      "right" : "return setupNoRandPartC();",
      "info" : "ReturnStatement[30163-30189]:ReturnStatement[29841-29867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30205-30255]:Block[29883-29933]"
    }, {
      "left" : "return setupNoRandPartA();",
      "right" : "return setupNoRandPartA();",
      "info" : "ReturnStatement[30219-30245]:ReturnStatement[29897-29923]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30267-30274]:Modifier[29945-29952]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30275-30278]:PrimitiveType[29953-29956]"
    }, {
      "left" : "setupNoRandPartC",
      "right" : "setupNoRandPartC",
      "info" : "SimpleName[30279-30295]:SimpleName[29957-29973]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30305-30316]:SimpleType[29983-29994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30317-30733]:Block[29995-30366]"
    }, {
      "left" : "if (this.su_j2 < this.su_z)",
      "right" : "if (this.su_j2 < this.su_z)",
      "info" : "IfStatement[30327-30727]:IfStatement[30005-30360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30355-30614]:Block[30033-30247]"
    }, {
      "left" : "int su_ch2Shadow = this.su_ch2;",
      "right" : "int su_ch2Shadow = this.su_ch2;",
      "info" : "VariableDeclarationStatement[30369-30400]:VariableDeclarationStatement[30047-30078]"
    }, {
      "left" : "this.crc.updateCRC(su_ch2Shadow);",
      "right" : "this.crc.updateCRC(su_ch2Shadow);",
      "info" : "ExpressionStatement[30458-30491]:ExpressionStatement[30091-30124]"
    }, {
      "left" : "this.su_j2++;",
      "right" : "this.su_j2++;",
      "info" : "ExpressionStatement[30504-30517]:ExpressionStatement[30137-30150]"
    }, {
      "left" : "this.currentState = NO_RAND_PART_C_STATE;",
      "right" : "this.currentState = NO_RAND_PART_C_STATE;",
      "info" : "ExpressionStatement[30530-30571]:ExpressionStatement[30163-30204]"
    }, {
      "left" : "return su_ch2Shadow;",
      "right" : "return su_ch2Shadow;",
      "info" : "ReturnStatement[30584-30604]:ReturnStatement[30217-30237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30620-30727]:Block[30253-30360]"
    }, {
      "left" : "this.su_i2++;",
      "right" : "this.su_i2++;",
      "info" : "ExpressionStatement[30634-30647]:ExpressionStatement[30267-30280]"
    }, {
      "left" : "this.su_count = 0;",
      "right" : "this.su_count = 0;",
      "info" : "ExpressionStatement[30660-30678]:ExpressionStatement[30293-30311]"
    }, {
      "left" : "return setupNoRandPartA();",
      "right" : "return setupNoRandPartA();",
      "info" : "ReturnStatement[30691-30717]:ReturnStatement[30324-30350]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30739-30746]:Modifier[30372-30379]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30747-30753]:Modifier[30380-30386]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[30754-30759]:Modifier[30387-30392]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[30760-30765]:TYPE_DECLARATION_KIND[30393-30398]"
    }, {
      "left" : "Data",
      "right" : "Data",
      "info" : "SimpleName[30766-30770]:SimpleName[30399-30403]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[30779-30785]:SimpleType[30412-30418]"
    }, {
      "left" : "Data",
      "right" : "Data",
      "info" : "SimpleName[32078-32082]:SimpleName[31711-31715]"
    }, {
      "left" : "int blockSize100k",
      "right" : "int blockSize100k",
      "info" : "SingleVariableDeclaration[32083-32100]:SingleVariableDeclaration[31716-31733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32102-32192]:Block[31735-31825]"
    }, {
      "left" : "this.ll8 = new byte[blockSize100k * BZip2Constants.BASEBLOCKSIZE];",
      "right" : "this.ll8 = new byte[blockSize100k * BZip2Constants.BASEBLOCKSIZE];",
      "info" : "ExpressionStatement[32116-32182]:ExpressionStatement[31749-31815]"
    }, {
      "left" : "int[]",
      "right" : "int[]",
      "info" : "ArrayType[32500-32505]:ArrayType[32133-32138]"
    }, {
      "left" : "initTT",
      "right" : "initTT",
      "info" : "SimpleName[32506-32512]:SimpleName[32139-32145]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[32513-32523]:SingleVariableDeclaration[32146-32156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32525-32978]:Block[32158-32611]"
    }, {
      "left" : "int[] ttShadow = this.tt;",
      "right" : "int[] ttShadow = this.tt;",
      "info" : "VariableDeclarationStatement[32539-32564]:VariableDeclarationStatement[32172-32197]"
    }, {
      "left" : "if ((ttShadow == null) || (ttShadow.length < length))",
      "right" : "if ((ttShadow == null) || (ttShadow.length < length))",
      "info" : "IfStatement[32815-32938]:IfStatement[32448-32571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32869-32938]:Block[32502-32571]"
    }, {
      "left" : "this.tt = ttShadow = new int[length];",
      "right" : "this.tt = ttShadow = new int[length];",
      "info" : "ExpressionStatement[32887-32924]:ExpressionStatement[32520-32557]"
    }, {
      "left" : "return ttShadow;",
      "right" : "return ttShadow;",
      "info" : "ReturnStatement[32952-32968]:ReturnStatement[32585-32601]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33326-33332]:Modifier[32959-32965]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33333-33339]:Modifier[32966-32972]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[33340-33347]:PrimitiveType[32973-32980]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[33348-33355]:SimpleName[32981-32988]"
    }, {
      "left" : "byte[] signature",
      "right" : "byte[] signature",
      "info" : "SingleVariableDeclaration[33356-33372]:SingleVariableDeclaration[32989-33005]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[33374-33384]:SingleVariableDeclaration[33007-33017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33386-33694]:Block[33019-33327]"
    }, {
      "left" : "if (length < 3)",
      "right" : "if (length < 3)",
      "info" : "IfStatement[33397-33450]:IfStatement[33030-33083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33413-33450]:Block[33046-33083]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33427-33440]:ReturnStatement[33060-33073]"
    }, {
      "left" : "if (signature[0] != 'B')",
      "right" : "if (signature[0] != 'B')",
      "info" : "IfStatement[33460-33522]:IfStatement[33093-33155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33485-33522]:Block[33118-33155]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33499-33512]:ReturnStatement[33132-33145]"
    }, {
      "left" : "if (signature[1] != 'Z')",
      "right" : "if (signature[1] != 'Z')",
      "info" : "IfStatement[33532-33594]:IfStatement[33165-33227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33557-33594]:Block[33190-33227]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33571-33584]:ReturnStatement[33204-33217]"
    }, {
      "left" : "if (signature[2] != 'h')",
      "right" : "if (signature[2] != 'h')",
      "info" : "IfStatement[33604-33666]:IfStatement[33237-33299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33629-33666]:Block[33262-33299]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33643-33656]:ReturnStatement[33276-33289]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33676-33688]:ReturnStatement[33309-33321]"
    } ]
  },
  "interFileMappings" : { }
}