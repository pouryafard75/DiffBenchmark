{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FxmlReferencesContributor",
      "right" : "FxmlReferencesContributor",
      "info" : "TypeDeclaration[1589-11807]:TypeDeclaration[1631-12532]"
    }, {
      "left" : "public static final JavaClassReferenceProvider CLASS_REFERENCE_PROVIDER = new JavaClassReferenceProvider();",
      "right" : "public static final JavaClassReferenceProvider CLASS_REFERENCE_PROVIDER = new JavaClassReferenceProvider();",
      "info" : "FieldDeclaration[1703-1810]:FieldDeclaration[1745-1852]"
    }, {
      "left" : "public void registerReferenceProviders(@NotNull PsiReferenceRegistrar registrar)",
      "right" : "public void registerReferenceProviders(@NotNull PsiReferenceRegistrar registrar)",
      "info" : "MethodDeclaration[1814-7490]:MethodDeclaration[1856-7532]"
    }, {
      "left" : "MyJavaClassReferenceProvider",
      "right" : "MyJavaClassReferenceProvider",
      "info" : "TypeDeclaration[7494-11805]:TypeDeclaration[7536-12530]"
    }, {
      "left" : "public PsiReference[] getReferencesByElement(@NotNull PsiElement element)",
      "right" : "public PsiReference[] getReferencesByElement(@NotNull PsiElement element)",
      "info" : "MethodDeclaration[7585-7935]:MethodDeclaration[7627-7977]"
    }, {
      "left" : "public PsiReference[] getReferencesByString(String str,\n                                                @NotNull final PsiElement position,\n                                                int offsetInPosition)",
      "right" : "public PsiReference[] getReferencesByString(String str,\n                                                @NotNull final PsiElement position,\n                                                int offsetInPosition)",
      "info" : "MethodDeclaration[7941-8721]:MethodDeclaration[7983-8763]"
    }, {
      "left" : "JavaClassReferenceWrapper",
      "right" : "JavaClassReferenceWrapper",
      "info" : "TypeDeclaration[8727-11801]:TypeDeclaration[8769-12526]"
    }, {
      "left" : "private final PsiReference myReference;",
      "right" : "private final PsiReference myReference;",
      "info" : "FieldDeclaration[8806-8845]:FieldDeclaration[8848-8887]"
    }, {
      "left" : "private final PsiElement myPosition;",
      "right" : "private final PsiElement myPosition;",
      "info" : "FieldDeclaration[8852-8888]:FieldDeclaration[8894-8930]"
    }, {
      "left" : "public JavaClassReferenceWrapper(PsiReference reference, PsiElement position)",
      "right" : "public JavaClassReferenceWrapper(PsiReference reference, PsiElement position)",
      "info" : "MethodDeclaration[8896-9047]:MethodDeclaration[8938-9089]"
    }, {
      "left" : "public PsiElement getElement()",
      "right" : "public PsiElement getElement()",
      "info" : "MethodDeclaration[9055-9152]:MethodDeclaration[9097-9194]"
    }, {
      "left" : "public TextRange getRangeInElement()",
      "right" : "public TextRange getRangeInElement()",
      "info" : "MethodDeclaration[9160-9270]:MethodDeclaration[9202-9312]"
    }, {
      "left" : "public PsiElement resolve()",
      "right" : "public PsiElement resolve()",
      "info" : "MethodDeclaration[9278-9509]:MethodDeclaration[9320-9551]"
    }, {
      "left" : "private PsiElement getReferencedClass()",
      "right" : "private PsiElement getReferencedClass()",
      "info" : "MethodDeclaration[9517-10433]:MethodDeclaration[9559-10475]"
    }, {
      "left" : "public String getCanonicalText()",
      "right" : "public String getCanonicalText()",
      "info" : "MethodDeclaration[10441-10545]:MethodDeclaration[10483-10587]"
    }, {
      "left" : "public PsiElement handleElementRename(String newElementName) throws IncorrectOperationException",
      "right" : "public PsiElement handleElementRename(String newElementName) throws IncorrectOperationException",
      "info" : "MethodDeclaration[10553-10976]:MethodDeclaration[10595-10982]"
    }, {
      "left" : "public PsiElement bindToElement(@NotNull PsiElement element)\n        throws IncorrectOperationException",
      "right" : "public PsiElement bindToElement(@NotNull PsiElement element)\n        throws IncorrectOperationException",
      "info" : "MethodDeclaration[10984-11477]:MethodDeclaration[10990-11447]"
    }, {
      "left" : "public boolean isReferenceTo(PsiElement element)",
      "right" : "public boolean isReferenceTo(PsiElement element)",
      "info" : "MethodDeclaration[11485-11629]:MethodDeclaration[12210-12354]"
    }, {
      "left" : "public Object[] getVariants()",
      "right" : "public Object[] getVariants()",
      "info" : "MethodDeclaration[11637-11733]:MethodDeclaration[12362-12458]"
    }, {
      "left" : "public boolean isSoft()",
      "right" : "public boolean isSoft()",
      "info" : "MethodDeclaration[11741-11795]:MethodDeclaration[12466-12520]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1628-1634]:Modifier[1670-1676]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1635-1640]:TYPE_DECLARATION_KIND[1677-1682]"
    }, {
      "left" : "FxmlReferencesContributor",
      "right" : "FxmlReferencesContributor",
      "info" : "SimpleName[1641-1666]:SimpleName[1683-1708]"
    }, {
      "left" : "PsiReferenceContributor",
      "right" : "PsiReferenceContributor",
      "info" : "SimpleType[1675-1698]:SimpleType[1717-1740]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1814-1823]:MarkerAnnotation[1856-1865]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1826-1832]:Modifier[1868-1874]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1833-1837]:PrimitiveType[1875-1879]"
    }, {
      "left" : "registerReferenceProviders",
      "right" : "registerReferenceProviders",
      "info" : "SimpleName[1838-1864]:SimpleName[1880-1906]"
    }, {
      "left" : "@NotNull PsiReferenceRegistrar registrar",
      "right" : "@NotNull PsiReferenceRegistrar registrar",
      "info" : "SingleVariableDeclaration[1865-1905]:SingleVariableDeclaration[1907-1947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1907-7490]:Block[1949-7532]"
    }, {
      "left" : "final XmlAttributeValuePattern attributeValueInFxml = XmlPatterns.xmlAttributeValue().inVirtualFile(\n      virtualFile().withExtension(JavaFxFileTypeFactory.FXML_EXTENSION));",
      "right" : "final XmlAttributeValuePattern attributeValueInFxml = XmlPatterns.xmlAttributeValue().inVirtualFile(\n      virtualFile().withExtension(JavaFxFileTypeFactory.FXML_EXTENSION));",
      "info" : "VariableDeclarationStatement[1913-2087]:VariableDeclarationStatement[1955-2129]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_CONTROLLER))\n                                          .and(attributeValueInFxml),\n                                        CLASS_REFERENCE_PROVIDER);",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_CONTROLLER))\n                                          .and(attributeValueInFxml),\n                                        CLASS_REFERENCE_PROVIDER);",
      "info" : "ExpressionStatement[2092-2373]:ExpressionStatement[2134-2415]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue()\n                                          .withParent(XmlPatterns.xmlAttribute().withName(\"type\")\n                                                        .withParent(XmlPatterns.xmlTag().withName(FxmlConstants.FX_ROOT)))\n                                          .and(attributeValueInFxml),\n                                        new MyJavaClassReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue()\n                                          .withParent(XmlPatterns.xmlAttribute().withName(\"type\")\n                                                        .withParent(XmlPatterns.xmlTag().withName(FxmlConstants.FX_ROOT)))\n                                          .and(attributeValueInFxml),\n                                        new MyJavaClassReferenceProvider());",
      "info" : "ExpressionStatement[2379-2814]:ExpressionStatement[2421-2856]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlTag().inVirtualFile(virtualFile().withExtension(JavaFxFileTypeFactory.FXML_EXTENSION)),\n                                        new MyJavaClassReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlTag().inVirtualFile(virtualFile().withExtension(JavaFxFileTypeFactory.FXML_EXTENSION)),\n                                        new MyJavaClassReferenceProvider());",
      "info" : "ExpressionStatement[2820-3035]:ExpressionStatement[2862-3077]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_ID))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxFieldIdReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_ID))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxFieldIdReferenceProvider());",
      "info" : "ExpressionStatement[3041-3326]:ExpressionStatement[3083-3368]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_ELEMENT_SOURCE)\n                                                                                     .withParent(XmlPatterns.xmlTag()\n                                                                                                   .withName(FxmlConstants.FX_INCLUDE)))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxSourceReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_ELEMENT_SOURCE)\n                                                                                     .withParent(XmlPatterns.xmlTag()\n                                                                                                   .withName(FxmlConstants.FX_INCLUDE)))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxSourceReferenceProvider());",
      "info" : "ExpressionStatement[3332-3882]:ExpressionStatement[3374-3924]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_ELEMENT_SOURCE)\n                                                                                     .withParent(XmlPatterns.xmlTag()\n                                                                                                   .withName(FxmlConstants.FX_SCRIPT)))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxSourceReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_ELEMENT_SOURCE)\n                                                                                     .withParent(XmlPatterns.xmlTag()\n                                                                                                   .withName(FxmlConstants.FX_SCRIPT)))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxSourceReferenceProvider());",
      "info" : "ExpressionStatement[3888-4437]:ExpressionStatement[3930-4479]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_ELEMENT_SOURCE)\n                                                                                     .withParent(XmlPatterns.xmlTag()\n                                                                                                   .withName(string().oneOf(FxmlConstants.FX_REFERENCE, FxmlConstants.FX_COPY))))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxComponentIdReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_ELEMENT_SOURCE)\n                                                                                     .withParent(XmlPatterns.xmlTag()\n                                                                                                   .withName(string().oneOf(FxmlConstants.FX_REFERENCE, FxmlConstants.FX_COPY))))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxComponentIdReferenceProvider());",
      "info" : "ExpressionStatement[4443-5039]:ExpressionStatement[4485-5081]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_FACTORY))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxFactoryReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_FACTORY))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxFactoryReferenceProvider());",
      "info" : "ExpressionStatement[5045-5335]:ExpressionStatement[5087-5377]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withValue(string().startsWith(\"#\"))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxEventHandlerReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withValue(string().startsWith(\"#\"))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxEventHandlerReferenceProvider());",
      "info" : "ExpressionStatement[5341-5598]:ExpressionStatement[5383-5640]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withValue(string().startsWith(\"@\")).and(attributeValueInFxml),\n                                        new JavaFxLocationReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withValue(string().startsWith(\"@\")).and(attributeValueInFxml),\n                                        new JavaFxLocationReferenceProvider());",
      "info" : "ExpressionStatement[5604-5814]:ExpressionStatement[5646-5856]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withValue(string().startsWith(\"$\")).and(attributeValueInFxml),\n                                        new JavaFxComponentIdReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withValue(string().startsWith(\"$\")).and(attributeValueInFxml),\n                                        new JavaFxComponentIdReferenceProvider());",
      "info" : "ExpressionStatement[5820-6033]:ExpressionStatement[5862-6075]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(\"url\")).and(attributeValueInFxml),\n                                        new JavaFxLocationReferenceProvider(false, \"png\"));",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(\"url\")).and(attributeValueInFxml),\n                                        new JavaFxLocationReferenceProvider(false, \"png\"));",
      "info" : "ExpressionStatement[6039-6280]:ExpressionStatement[6081-6322]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.STYLESHEETS)).and(attributeValueInFxml),\n                                        new JavaFxLocationReferenceProvider(true, \"css\"));",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.STYLESHEETS)).and(attributeValueInFxml),\n                                        new JavaFxLocationReferenceProvider(true, \"css\"));",
      "info" : "ExpressionStatement[6285-6545]:ExpressionStatement[6327-6587]"
    }, {
      "left" : "registrar.registerReferenceProvider(PlatformPatterns.psiElement(XmlProcessingInstruction.class).inVirtualFile(virtualFile().withExtension(JavaFxFileTypeFactory.FXML_EXTENSION)),\n                                        new ImportReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(PlatformPatterns.psiElement(XmlProcessingInstruction.class).inVirtualFile(virtualFile().withExtension(JavaFxFileTypeFactory.FXML_EXTENSION)),\n                                        new ImportReferenceProvider());",
      "info" : "ExpressionStatement[6551-6800]:ExpressionStatement[6593-6842]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().and(attributeValueInFxml),\n                                        new JavaFxColorReferenceProvider());",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue().and(attributeValueInFxml),\n                                        new JavaFxColorReferenceProvider());",
      "info" : "ExpressionStatement[6806-6977]:ExpressionStatement[6848-7019]"
    }, {
      "left" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue()\n                                          .withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_VALUE)\n                                                        .withParent(XmlPatterns.xmlTag().withParent(XmlPatterns.xmlTag().withName(FxmlConstants.STYLESHEETS))))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxLocationReferenceProvider(true, \"css\"));",
      "right" : "registrar.registerReferenceProvider(XmlPatterns.xmlAttributeValue()\n                                          .withParent(XmlPatterns.xmlAttribute().withName(FxmlConstants.FX_VALUE)\n                                                        .withParent(XmlPatterns.xmlTag().withParent(XmlPatterns.xmlTag().withName(FxmlConstants.STYLESHEETS))))\n                                          .and(attributeValueInFxml),\n                                        new JavaFxLocationReferenceProvider(true, \"css\"));",
      "info" : "ExpressionStatement[6984-7486]:ExpressionStatement[7026-7528]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7494-7501]:Modifier[7536-7543]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7502-7508]:Modifier[7544-7550]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7509-7514]:TYPE_DECLARATION_KIND[7551-7556]"
    }, {
      "left" : "MyJavaClassReferenceProvider",
      "right" : "MyJavaClassReferenceProvider",
      "info" : "SimpleName[7515-7543]:SimpleName[7557-7585]"
    }, {
      "left" : "JavaClassReferenceProvider",
      "right" : "JavaClassReferenceProvider",
      "info" : "SimpleType[7552-7578]:SimpleType[7594-7620]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[7585-7593]:MarkerAnnotation[7627-7635]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7598-7607]:MarkerAnnotation[7640-7649]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7612-7618]:Modifier[7654-7660]"
    }, {
      "left" : "PsiReference[]",
      "right" : "PsiReference[]",
      "info" : "ArrayType[7619-7633]:ArrayType[7661-7675]"
    }, {
      "left" : "getReferencesByElement",
      "right" : "getReferencesByElement",
      "info" : "SimpleName[7634-7656]:SimpleName[7676-7698]"
    }, {
      "left" : "@NotNull PsiElement element",
      "right" : "@NotNull PsiElement element",
      "info" : "SingleVariableDeclaration[7657-7684]:SingleVariableDeclaration[7699-7726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7686-7935]:Block[7728-7977]"
    }, {
      "left" : "String name = element instanceof XmlAttributeValue ? ((XmlAttributeValue)element).getValue() \n                                                         : ((XmlTag)element).getName();",
      "right" : "String name = element instanceof XmlAttributeValue ? ((XmlAttributeValue)element).getValue() \n                                                         : ((XmlTag)element).getName();",
      "info" : "VariableDeclarationStatement[7694-7875]:VariableDeclarationStatement[7736-7917]"
    }, {
      "left" : "return getReferencesByString(name, element, 1);",
      "right" : "return getReferencesByString(name, element, 1);",
      "info" : "ReturnStatement[7882-7929]:ReturnStatement[7924-7971]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[7941-7949]:MarkerAnnotation[7983-7991]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7954-7963]:MarkerAnnotation[7996-8005]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7968-7974]:Modifier[8010-8016]"
    }, {
      "left" : "PsiReference[]",
      "right" : "PsiReference[]",
      "info" : "ArrayType[7975-7989]:ArrayType[8017-8031]"
    }, {
      "left" : "getReferencesByString",
      "right" : "getReferencesByString",
      "info" : "SimpleName[7990-8011]:SimpleName[8032-8053]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[8012-8022]:SingleVariableDeclaration[8054-8064]"
    }, {
      "left" : "@NotNull final PsiElement position",
      "right" : "@NotNull final PsiElement position",
      "info" : "SingleVariableDeclaration[8072-8106]:SingleVariableDeclaration[8114-8148]"
    }, {
      "left" : "int offsetInPosition",
      "right" : "int offsetInPosition",
      "info" : "SingleVariableDeclaration[8156-8176]:SingleVariableDeclaration[8198-8218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8178-8721]:Block[8220-8763]"
    }, {
      "left" : "if (str.length() == 0)",
      "right" : "if (str.length() == 0)",
      "info" : "IfStatement[8186-8241]:IfStatement[8228-8283]"
    }, {
      "left" : "return PsiReference.EMPTY_ARRAY;",
      "right" : "return PsiReference.EMPTY_ARRAY;",
      "info" : "ReturnStatement[8209-8241]:ReturnStatement[8251-8283]"
    }, {
      "left" : "final PsiReference[] references = super.getReferencesByString(str, position, offsetInPosition);",
      "right" : "final PsiReference[] references = super.getReferencesByString(str, position, offsetInPosition);",
      "info" : "VariableDeclarationStatement[8248-8343]:VariableDeclarationStatement[8290-8385]"
    }, {
      "left" : "final int offset = position instanceof XmlTag ? 1 : 0;",
      "right" : "final int offset = position instanceof XmlTag ? 1 : 0;",
      "info" : "VariableDeclarationStatement[8350-8404]:VariableDeclarationStatement[8392-8446]"
    }, {
      "left" : "if (references.length <= offset)",
      "right" : "if (references.length <= offset)",
      "info" : "IfStatement[8411-8476]:IfStatement[8453-8518]"
    }, {
      "left" : "return PsiReference.EMPTY_ARRAY;",
      "right" : "return PsiReference.EMPTY_ARRAY;",
      "info" : "ReturnStatement[8444-8476]:ReturnStatement[8486-8518]"
    }, {
      "left" : "final PsiReference[] results = new PsiReference[references.length - offset];",
      "right" : "final PsiReference[] results = new PsiReference[references.length - offset];",
      "info" : "VariableDeclarationStatement[8483-8559]:VariableDeclarationStatement[8525-8601]"
    }, {
      "left" : "for (int i = 0; i < results.length; i++)",
      "right" : "for (int i = 0; i < results.length; i++)",
      "info" : "ForStatement[8566-8693]:ForStatement[8608-8735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8607-8693]:Block[8649-8735]"
    }, {
      "left" : "results[i] = new JavaClassReferenceWrapper(references[i], position);",
      "right" : "results[i] = new JavaClassReferenceWrapper(references[i], position);",
      "info" : "ExpressionStatement[8617-8685]:ExpressionStatement[8659-8727]"
    }, {
      "left" : "return results;",
      "right" : "return results;",
      "info" : "ReturnStatement[8700-8715]:ReturnStatement[8742-8757]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8727-8734]:Modifier[8769-8776]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8735-8741]:Modifier[8777-8783]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8742-8747]:TYPE_DECLARATION_KIND[8784-8789]"
    }, {
      "left" : "JavaClassReferenceWrapper",
      "right" : "JavaClassReferenceWrapper",
      "info" : "SimpleName[8748-8773]:SimpleName[8790-8815]"
    }, {
      "left" : "PsiReference",
      "right" : "PsiReference",
      "info" : "SimpleType[8785-8797]:SimpleType[8827-8839]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8896-8902]:Modifier[8938-8944]"
    }, {
      "left" : "JavaClassReferenceWrapper",
      "right" : "JavaClassReferenceWrapper",
      "info" : "SimpleName[8903-8928]:SimpleName[8945-8970]"
    }, {
      "left" : "PsiReference reference",
      "right" : "PsiReference reference",
      "info" : "SingleVariableDeclaration[8929-8951]:SingleVariableDeclaration[8971-8993]"
    }, {
      "left" : "PsiElement position",
      "right" : "PsiElement position",
      "info" : "SingleVariableDeclaration[8953-8972]:SingleVariableDeclaration[8995-9014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8974-9047]:Block[9016-9089]"
    }, {
      "left" : "myReference = reference;",
      "right" : "myReference = reference;",
      "info" : "ExpressionStatement[8984-9008]:ExpressionStatement[9026-9050]"
    }, {
      "left" : "myPosition = position;",
      "right" : "myPosition = position;",
      "info" : "ExpressionStatement[9017-9039]:ExpressionStatement[9059-9081]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9055-9064]:MarkerAnnotation[9097-9106]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9071-9077]:Modifier[9113-9119]"
    }, {
      "left" : "PsiElement",
      "right" : "PsiElement",
      "info" : "SimpleType[9078-9088]:SimpleType[9120-9130]"
    }, {
      "left" : "getElement",
      "right" : "getElement",
      "info" : "SimpleName[9089-9099]:SimpleName[9131-9141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9102-9152]:Block[9144-9194]"
    }, {
      "left" : "return myReference.getElement();",
      "right" : "return myReference.getElement();",
      "info" : "ReturnStatement[9112-9144]:ReturnStatement[9154-9186]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9160-9169]:MarkerAnnotation[9202-9211]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9176-9182]:Modifier[9218-9224]"
    }, {
      "left" : "TextRange",
      "right" : "TextRange",
      "info" : "SimpleType[9183-9192]:SimpleType[9225-9234]"
    }, {
      "left" : "getRangeInElement",
      "right" : "getRangeInElement",
      "info" : "SimpleName[9193-9210]:SimpleName[9235-9252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9213-9270]:Block[9255-9312]"
    }, {
      "left" : "return myReference.getRangeInElement();",
      "right" : "return myReference.getRangeInElement();",
      "info" : "ReturnStatement[9223-9262]:ReturnStatement[9265-9304]"
    }, {
      "left" : "@Nullable",
      "right" : "@Nullable",
      "info" : "MarkerAnnotation[9278-9287]:MarkerAnnotation[9320-9329]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9294-9303]:MarkerAnnotation[9336-9345]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9310-9316]:Modifier[9352-9358]"
    }, {
      "left" : "PsiElement",
      "right" : "PsiElement",
      "info" : "SimpleType[9317-9327]:SimpleType[9359-9369]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[9328-9335]:SimpleName[9370-9377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9338-9509]:Block[9380-9551]"
    }, {
      "left" : "final PsiElement resolve = myReference.resolve();",
      "right" : "final PsiElement resolve = myReference.resolve();",
      "info" : "VariableDeclarationStatement[9348-9397]:VariableDeclarationStatement[9390-9439]"
    }, {
      "left" : "if (resolve != null)",
      "right" : "if (resolve != null)",
      "info" : "IfStatement[9406-9464]:IfStatement[9448-9506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9427-9464]:Block[9469-9506]"
    }, {
      "left" : "return resolve;",
      "right" : "return resolve;",
      "info" : "ReturnStatement[9439-9454]:ReturnStatement[9481-9496]"
    }, {
      "left" : "return getReferencedClass();",
      "right" : "return getReferencedClass();",
      "info" : "ReturnStatement[9473-9501]:ReturnStatement[9515-9543]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9517-9524]:Modifier[9559-9566]"
    }, {
      "left" : "PsiElement",
      "right" : "PsiElement",
      "info" : "SimpleType[9525-9535]:SimpleType[9567-9577]"
    }, {
      "left" : "getReferencedClass",
      "right" : "getReferencedClass",
      "info" : "SimpleName[9536-9554]:SimpleName[9578-9596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9557-10433]:Block[9599-10475]"
    }, {
      "left" : "if (myPosition instanceof XmlTag)",
      "right" : "if (myPosition instanceof XmlTag)",
      "info" : "IfStatement[9567-10404]:IfStatement[9609-10446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9601-10233]:Block[9643-10275]"
    }, {
      "left" : "final XmlElementDescriptor descriptor = ((XmlTag)myPosition).getDescriptor();",
      "right" : "final XmlElementDescriptor descriptor = ((XmlTag)myPosition).getDescriptor();",
      "info" : "VariableDeclarationStatement[9613-9690]:VariableDeclarationStatement[9655-9732]"
    }, {
      "left" : "if (descriptor != null)",
      "right" : "if (descriptor != null)",
      "info" : "IfStatement[9701-10223]:IfStatement[9743-10265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9725-10223]:Block[9767-10265]"
    }, {
      "left" : "final PsiElement declaration = descriptor.getDeclaration();",
      "right" : "final PsiElement declaration = descriptor.getDeclaration();",
      "info" : "VariableDeclarationStatement[9739-9798]:VariableDeclarationStatement[9781-9840]"
    }, {
      "left" : "if (declaration instanceof PsiMethod &&\n                ((PsiMethod)declaration).hasModifierProperty(PsiModifier.STATIC))",
      "right" : "if (declaration instanceof PsiMethod &&\n                ((PsiMethod)declaration).hasModifierProperty(PsiModifier.STATIC))",
      "info" : "IfStatement[9811-10211]:IfStatement[9853-10253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9933-10211]:Block[9975-10253]"
    }, {
      "left" : "final PsiClass containingClass = ((PsiMethod)declaration).getContainingClass();",
      "right" : "final PsiClass containingClass = ((PsiMethod)declaration).getContainingClass();",
      "info" : "VariableDeclarationStatement[9949-10028]:VariableDeclarationStatement[9991-10070]"
    }, {
      "left" : "if (containingClass != null && myReference.getCanonicalText().equals(containingClass.getName()))",
      "right" : "if (containingClass != null && myReference.getCanonicalText().equals(containingClass.getName()))",
      "info" : "IfStatement[10043-10197]:IfStatement[10085-10239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10140-10197]:Block[10182-10239]"
    }, {
      "left" : "return containingClass;",
      "right" : "return containingClass;",
      "info" : "ReturnStatement[10158-10181]:ReturnStatement[10200-10223]"
    }, {
      "left" : "if (myPosition instanceof XmlAttributeValue)",
      "right" : "if (myPosition instanceof XmlAttributeValue)",
      "info" : "IfStatement[10247-10404]:IfStatement[10289-10446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10292-10404]:Block[10334-10446]"
    }, {
      "left" : "return JavaFxPsiUtil.findPsiClass(((XmlAttributeValue)myPosition).getValue(), myPosition);",
      "right" : "return JavaFxPsiUtil.findPsiClass(((XmlAttributeValue)myPosition).getValue(), myPosition);",
      "info" : "ReturnStatement[10304-10394]:ReturnStatement[10346-10436]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10413-10425]:ReturnStatement[10455-10467]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[10441-10449]:MarkerAnnotation[10483-10491]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10456-10462]:Modifier[10498-10504]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10463-10469]:SimpleType[10505-10511]"
    }, {
      "left" : "getCanonicalText",
      "right" : "getCanonicalText",
      "info" : "SimpleName[10470-10486]:SimpleName[10512-10528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10489-10545]:Block[10531-10587]"
    }, {
      "left" : "return myReference.getCanonicalText();",
      "right" : "return myReference.getCanonicalText();",
      "info" : "ReturnStatement[10499-10537]:ReturnStatement[10541-10579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10553-10559]:Modifier[10595-10601]"
    }, {
      "left" : "PsiElement",
      "right" : "PsiElement",
      "info" : "SimpleType[10560-10570]:SimpleType[10602-10612]"
    }, {
      "left" : "handleElementRename",
      "right" : "handleElementRename",
      "info" : "SimpleName[10571-10590]:SimpleName[10613-10632]"
    }, {
      "left" : "String newElementName",
      "right" : "String newElementName",
      "info" : "SingleVariableDeclaration[10591-10612]:SingleVariableDeclaration[10633-10654]"
    }, {
      "left" : "IncorrectOperationException",
      "right" : "IncorrectOperationException",
      "info" : "SimpleType[10621-10648]:SimpleType[10663-10690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10649-10976]:Block[10691-10982]"
    }, {
      "left" : "String oldText = ((XmlTag)myPosition).getName();",
      "right" : "String oldText = getOldName();",
      "info" : "VariableDeclarationStatement[10659-10707]:VariableDeclarationStatement[10701-10731]"
    }, {
      "left" : "getName",
      "right" : "getOldName",
      "info" : "SimpleName[10697-10704]:SimpleName[10718-10728]"
    }, {
      "left" : "final TextRange range = getRangeInElement();",
      "right" : "final TextRange range = getRangeInElement();",
      "info" : "VariableDeclarationStatement[10716-10760]:VariableDeclarationStatement[10740-10784]"
    }, {
      "left" : "final String newText =\n          oldText.substring(0, range.getStartOffset() - 1) + newElementName + oldText.substring(range.getEndOffset() - 1);",
      "right" : "final String newText =\n          oldText.substring(0, range.getStartOffset() - 1) + newElementName + oldText.substring(range.getEndOffset() - 1);",
      "info" : "VariableDeclarationStatement[10769-10914]:VariableDeclarationStatement[10793-10938]"
    }, {
      "left" : "return ((XmlTag)myPosition).setName(newText);",
      "right" : "return setNewName(newText);",
      "info" : "ReturnStatement[10923-10968]:ReturnStatement[10947-10974]"
    }, {
      "left" : "setName",
      "right" : "setNewName",
      "info" : "SimpleName[10951-10958]:SimpleName[10954-10964]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10984-10990]:Modifier[10990-10996]"
    }, {
      "left" : "PsiElement",
      "right" : "PsiElement",
      "info" : "SimpleType[10991-11001]:SimpleType[10997-11007]"
    }, {
      "left" : "bindToElement",
      "right" : "bindToElement",
      "info" : "SimpleName[11002-11015]:SimpleName[11008-11021]"
    }, {
      "left" : "@NotNull PsiElement element",
      "right" : "@NotNull PsiElement element",
      "info" : "SingleVariableDeclaration[11016-11043]:SingleVariableDeclaration[11022-11049]"
    }, {
      "left" : "IncorrectOperationException",
      "right" : "IncorrectOperationException",
      "info" : "SimpleType[11060-11087]:SimpleType[11066-11093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11088-11477]:Block[11094-11447]"
    }, {
      "left" : "String oldText = ((XmlTag)myPosition).getName();",
      "right" : "String oldText = getOldName();",
      "info" : "VariableDeclarationStatement[11098-11146]:VariableDeclarationStatement[11104-11134]"
    }, {
      "left" : "((XmlTag)myPosition).getName()",
      "right" : "((XmlTag)myPosition).getName()",
      "info" : "MethodInvocation[11115-11145]:MethodInvocation[12118-12148]"
    }, {
      "left" : "final TextRange range = getRangeInElement();",
      "right" : "final TextRange range = getRangeInElement();",
      "info" : "VariableDeclarationStatement[11155-11199]:VariableDeclarationStatement[11143-11187]"
    }, {
      "left" : "final String newText = (element instanceof PsiPackage ? ((PsiPackage)element).getQualifiedName() : ((PsiClass)element).getName()) +\n                               oldText.substring(range.getEndOffset() - 1);",
      "right" : "final String newText = (element instanceof PsiPackage ? ((PsiPackage)element).getQualifiedName() : ((PsiClass)element).getName()) +\n                               oldText.substring(range.getEndOffset() - 1);",
      "info" : "VariableDeclarationStatement[11208-11415]:VariableDeclarationStatement[11196-11403]"
    }, {
      "left" : "return ((XmlTag)myPosition).setName(newText);",
      "right" : "return ((XmlTag)myPosition).setName(newText);",
      "info" : "ReturnStatement[11424-11469]:ReturnStatement[11557-11602]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11485-11491]:Modifier[12210-12216]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11492-11499]:PrimitiveType[12217-12224]"
    }, {
      "left" : "isReferenceTo",
      "right" : "isReferenceTo",
      "info" : "SimpleName[11500-11513]:SimpleName[12225-12238]"
    }, {
      "left" : "PsiElement element",
      "right" : "PsiElement element",
      "info" : "SingleVariableDeclaration[11514-11532]:SingleVariableDeclaration[12239-12257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11534-11629]:Block[12259-12354]"
    }, {
      "left" : "return myReference.isReferenceTo(element) || getReferencedClass() == element;",
      "right" : "return myReference.isReferenceTo(element) || getReferencedClass() == element;",
      "info" : "ReturnStatement[11544-11621]:ReturnStatement[12269-12346]"
    }, {
      "left" : "@NotNull",
      "right" : "@NotNull",
      "info" : "MarkerAnnotation[11637-11645]:MarkerAnnotation[12362-12370]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11652-11658]:Modifier[12377-12383]"
    }, {
      "left" : "Object[]",
      "right" : "Object[]",
      "info" : "ArrayType[11659-11667]:ArrayType[12384-12392]"
    }, {
      "left" : "getVariants",
      "right" : "getVariants",
      "info" : "SimpleName[11668-11679]:SimpleName[12393-12404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11682-11733]:Block[12407-12458]"
    }, {
      "left" : "return myReference.getVariants();",
      "right" : "return myReference.getVariants();",
      "info" : "ReturnStatement[11692-11725]:ReturnStatement[12417-12450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11741-11747]:Modifier[12466-12472]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11748-11755]:PrimitiveType[12473-12480]"
    }, {
      "left" : "isSoft",
      "right" : "isSoft",
      "info" : "SimpleName[11756-11762]:SimpleName[12481-12487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11765-11795]:Block[12490-12520]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11775-11787]:ReturnStatement[12500-12512]"
    } ]
  },
  "interFileMappings" : { }
}