{
  "matchedElements" : [
 {
    "left" : "class : BigMatrixImpl",
    "right" : "class : BigMatrixImpl",
    "info" : "TypeDeclaration[903-54131]:TypeDeclaration[903-54128]"
  }, {
    "left" : "serialVersionUID",
    "right" : "serialVersionUID",
    "info" : "FieldDeclaration[2224-2319]:FieldDeclaration[2224-2319]"
  }, {
    "left" : "data",
    "right" : "data",
    "info" : "FieldDeclaration[2329-2399]:FieldDeclaration[2329-2399]"
  }, {
    "left" : "lu",
    "right" : "lu",
    "info" : "FieldDeclaration[2409-2575]:FieldDeclaration[2409-2575]"
  }, {
    "left" : "permutation",
    "right" : "permutation",
    "info" : "FieldDeclaration[2585-2676]:FieldDeclaration[2585-2676]"
  }, {
    "left" : "parity",
    "right" : "parity",
    "info" : "FieldDeclaration[2686-2785]:FieldDeclaration[2686-2785]"
  }, {
    "left" : "roundingMode",
    "right" : "roundingMode",
    "info" : "FieldDeclaration[2795-2887]:FieldDeclaration[2795-2887]"
  }, {
    "left" : "scale",
    "right" : "scale",
    "info" : "FieldDeclaration[2897-2951]:FieldDeclaration[2897-2951]"
  }, {
    "left" : "TOO_SMALL",
    "right" : "TOO_SMALL",
    "info" : "FieldDeclaration[2961-3100]:FieldDeclaration[2961-3100]"
  }, {
    "left" : "ZERO",
    "right" : "ZERO",
    "info" : "FieldDeclaration[3110-3183]:FieldDeclaration[3110-3183]"
  }, {
    "left" : "ONE",
    "right" : "ONE",
    "info" : "FieldDeclaration[3188-3260]:FieldDeclaration[3188-3260]"
  }, {
    "left" : "public BigMatrixImpl()",
    "right" : "public BigMatrixImpl()",
    "info" : "MethodDeclaration[3270-3354]:MethodDeclaration[3270-3354]"
  }, {
    "left" : "public BigMatrixImpl(rowDimension int, columnDimension int)",
    "right" : "public BigMatrixImpl(rowDimension int, columnDimension int)",
    "info" : "MethodDeclaration[3364-4014]:MethodDeclaration[3364-4014]"
  }, {
    "left" : "public BigMatrixImpl(d )",
    "right" : "public BigMatrixImpl(d )",
    "info" : "MethodDeclaration[4024-4670]:MethodDeclaration[4024-4670]"
  }, {
    "left" : "public BigMatrixImpl(d , copyArray boolean)",
    "right" : "public BigMatrixImpl(d , copyArray boolean)",
    "info" : "MethodDeclaration[4676-6319]:MethodDeclaration[4676-6319]"
  }, {
    "left" : "public BigMatrixImpl(d )",
    "right" : "public BigMatrixImpl(d )",
    "info" : "MethodDeclaration[6325-7440]:MethodDeclaration[6325-7440]"
  }, {
    "left" : "public BigMatrixImpl(d )",
    "right" : "public BigMatrixImpl(d )",
    "info" : "MethodDeclaration[7450-8494]:MethodDeclaration[7450-8494]"
  }, {
    "left" : "public BigMatrixImpl(v )",
    "right" : "public BigMatrixImpl(v )",
    "info" : "MethodDeclaration[8504-9022]:MethodDeclaration[8504-9022]"
  }, {
    "left" : "public copy() : ",
    "right" : "public copy() : ",
    "info" : "MethodDeclaration[9032-9232]:MethodDeclaration[9032-9232]"
  }, {
    "left" : "public add(m ) : ",
    "right" : "public add(m ) : ",
    "info" : "MethodDeclaration[9242-10426]:MethodDeclaration[9242-10426]"
  }, {
    "left" : "public add(m ) : ",
    "right" : "public add(m ) : ",
    "info" : "MethodDeclaration[10432-11504]:MethodDeclaration[10432-11504]"
  }, {
    "left" : "public subtract(m ) : ",
    "right" : "public subtract(m ) : ",
    "info" : "MethodDeclaration[11510-12704]:MethodDeclaration[11510-12704]"
  }, {
    "left" : "public subtract(m ) : ",
    "right" : "public subtract(m ) : ",
    "info" : "MethodDeclaration[12710-13789]:MethodDeclaration[12710-13789]"
  }, {
    "left" : "public scalarAdd(d ) : ",
    "right" : "public scalarAdd(d ) : ",
    "info" : "MethodDeclaration[13795-14540]:MethodDeclaration[13795-14540]"
  }, {
    "left" : "public scalarMultiply(d ) : ",
    "right" : "public scalarMultiply(d ) : ",
    "info" : "MethodDeclaration[14546-15306]:MethodDeclaration[14546-15306]"
  }, {
    "left" : "public multiply(m ) : ",
    "right" : "public multiply(m ) : ",
    "info" : "MethodDeclaration[15312-16742]:MethodDeclaration[15312-16742]"
  }, {
    "left" : "public multiply(m ) : ",
    "right" : "public multiply(m ) : ",
    "info" : "MethodDeclaration[16748-18003]:MethodDeclaration[16748-18003]"
  }, {
    "left" : "public preMultiply(m ) : ",
    "right" : "public preMultiply(m ) : ",
    "info" : "MethodDeclaration[18009-18383]:MethodDeclaration[18009-18383]"
  }, {
    "left" : "public getData() : ",
    "right" : "public getData() : ",
    "info" : "MethodDeclaration[18389-18649]:MethodDeclaration[18389-18649]"
  }, {
    "left" : "public getDataAsDoubleArray() : ",
    "right" : "public getDataAsDoubleArray() : ",
    "info" : "MethodDeclaration[18659-19279]:MethodDeclaration[18659-19279]"
  }, {
    "left" : "public getDataRef() : ",
    "right" : "public getDataRef() : ",
    "info" : "MethodDeclaration[19289-19551]:MethodDeclaration[19289-19551]"
  }, {
    "left" : "public getRoundingMode() : int",
    "right" : "public getRoundingMode() : int",
    "info" : "MethodDeclaration[19561-19820]:MethodDeclaration[19561-19820]"
  }, {
    "left" : "public setRoundingMode(roundingMode int) : void",
    "right" : "public setRoundingMode(roundingMode int) : void",
    "info" : "MethodDeclaration[19830-20081]:MethodDeclaration[19830-20081]"
  }, {
    "left" : "public getScale() : int",
    "right" : "public getScale() : int",
    "info" : "MethodDeclaration[20091-20279]:MethodDeclaration[20091-20279]"
  }, {
    "left" : "public setScale(scale int) : void",
    "right" : "public setScale(scale int) : void",
    "info" : "MethodDeclaration[20289-20493]:MethodDeclaration[20289-20493]"
  }, {
    "left" : "public getNorm() : ",
    "right" : "public getNorm() : ",
    "info" : "MethodDeclaration[20503-21083]:MethodDeclaration[20503-21083]"
  }, {
    "left" : "public getSubMatrix(startRow int, endRow int, startColumn int, endColumn int) : ",
    "right" : "public getSubMatrix(startRow int, endRow int, startColumn int, endColumn int) : ",
    "info" : "MethodDeclaration[21093-22400]:MethodDeclaration[21093-22400]"
  }, {
    "left" : "public getSubMatrix(selectedRows , selectedColumns ) : ",
    "right" : "public getSubMatrix(selectedRows , selectedColumns ) : ",
    "info" : "MethodDeclaration[22410-23853]:MethodDeclaration[22410-23853]"
  }, {
    "left" : "public setSubMatrix(subMatrix , row int, column int) : void",
    "right" : "public setSubMatrix(subMatrix , row int, column int) : void",
    "info" : "MethodDeclaration[23864-26502]:MethodDeclaration[23864-26502]"
  }, {
    "left" : "public getRowMatrix(row int) : ",
    "right" : "public getRowMatrix(row int) : ",
    "info" : "MethodDeclaration[26512-27197]:MethodDeclaration[26512-27197]"
  }, {
    "left" : "public getColumnMatrix(column int) : ",
    "right" : "public getColumnMatrix(column int) : ",
    "info" : "MethodDeclaration[27208-27971]:MethodDeclaration[27208-27971]"
  }, {
    "left" : "public getRow(row int) : ",
    "right" : "public getRow(row int) : ",
    "info" : "MethodDeclaration[27981-28758]:MethodDeclaration[27981-28758]"
  }, {
    "left" : "public getRowAsDoubleArray(row int) : ",
    "right" : "public getRowAsDoubleArray(row int) : ",
    "info" : "MethodDeclaration[28769-29611]:MethodDeclaration[28769-29611]"
  }, {
    "left" : "public getColumn(col int) : ",
    "right" : "public getColumn(col int) : ",
    "info" : "MethodDeclaration[29622-30453]:MethodDeclaration[29622-30453]"
  }, {
    "left" : "public getColumnAsDoubleArray(col int) : ",
    "right" : "public getColumnAsDoubleArray(col int) : ",
    "info" : "MethodDeclaration[30463-31329]:MethodDeclaration[30463-31329]"
  }, {
    "left" : "public getEntry(row int, column int) : ",
    "right" : "public getEntry(row int, column int) : ",
    "info" : "MethodDeclaration[31340-32210]:MethodDeclaration[31340-32210]"
  }, {
    "left" : "public getEntryAsDouble(row int, column int) : double",
    "right" : "public getEntryAsDouble(row int, column int) : double",
    "info" : "MethodDeclaration[32220-32968]:MethodDeclaration[32220-32968]"
  }, {
    "left" : "public transpose() : ",
    "right" : "public transpose() : ",
    "info" : "MethodDeclaration[32978-33554]:MethodDeclaration[32978-33554]"
  }, {
    "left" : "public inverse() : ",
    "right" : "public inverse() : ",
    "info" : "MethodDeclaration[33564-33888]:MethodDeclaration[33564-33888]"
  }, {
    "left" : "public getDeterminant() : ",
    "right" : "public getDeterminant() : ",
    "info" : "MethodDeclaration[33898-34598]:MethodDeclaration[33898-34598]"
  }, {
    "left" : "public isSquare() : boolean",
    "right" : "public isSquare() : boolean",
    "info" : "MethodDeclaration[34609-34837]:MethodDeclaration[34609-34837]"
  }, {
    "left" : "public isSingular() : boolean",
    "right" : "public isSingular() : boolean",
    "info" : "MethodDeclaration[34847-35313]:MethodDeclaration[34847-35313]"
  }, {
    "left" : "public getRowDimension() : int",
    "right" : "public getRowDimension() : int",
    "info" : "MethodDeclaration[35323-35487]:MethodDeclaration[35323-35487]"
  }, {
    "left" : "public getColumnDimension() : int",
    "right" : "public getColumnDimension() : int",
    "info" : "MethodDeclaration[35497-35673]:MethodDeclaration[35497-35673]"
  }, {
    "left" : "public getTrace() : ",
    "right" : "public getTrace() : ",
    "info" : "MethodDeclaration[35684-36311]:MethodDeclaration[35684-36311]"
  }, {
    "left" : "public operate(v ) : ",
    "right" : "public operate(v ) : ",
    "info" : "MethodDeclaration[36321-37198]:MethodDeclaration[36321-37195]"
  }, {
    "left" : "public operate(v ) : ",
    "right" : "public operate(v ) : ",
    "info" : "MethodDeclaration[37208-37704]:MethodDeclaration[37205-37701]"
  }, {
    "left" : "public preMultiply(v ) : ",
    "right" : "public preMultiply(v ) : ",
    "info" : "MethodDeclaration[37714-38593]:MethodDeclaration[37711-38590]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[38603-39671]:MethodDeclaration[38600-39668]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[39681-40430]:MethodDeclaration[39678-40427]"
  }, {
    "left" : "public solve(b ) : ",
    "right" : "public solve(b ) : ",
    "info" : "MethodDeclaration[40440-43014]:MethodDeclaration[40437-43011]"
  }, {
    "left" : "public luDecompose() : void",
    "right" : "public luDecompose() : void",
    "info" : "MethodDeclaration[43024-46701]:MethodDeclaration[43021-46698]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[46711-47480]:MethodDeclaration[46708-47477]"
  }, {
    "left" : "public equals(object ) : boolean",
    "right" : "public equals(object ) : boolean",
    "info" : "MethodDeclaration[47491-48637]:MethodDeclaration[47488-48634]"
  }, {
    "left" : "public hashCode() : int",
    "right" : "public hashCode() : int",
    "info" : "MethodDeclaration[48647-49262]:MethodDeclaration[48644-49259]"
  }, {
    "left" : "protected getLUMatrix() : ",
    "right" : "protected getLUMatrix() : ",
    "info" : "MethodDeclaration[49326-50865]:MethodDeclaration[49323-50862]"
  }, {
    "left" : "protected getPermutation() : ",
    "right" : "protected getPermutation() : ",
    "info" : "MethodDeclaration[50875-51492]:MethodDeclaration[50872-51489]"
  }, {
    "left" : "private copyOut() : ",
    "right" : "private copyOut() : ",
    "info" : "MethodDeclaration[51554-52077]:MethodDeclaration[51551-52074]"
  }, {
    "left" : "private copyIn(in ) : void",
    "right" : "private copyIn(in ) : void",
    "info" : "MethodDeclaration[52087-52512]:MethodDeclaration[52084-52509]"
  }, {
    "left" : "private copyIn(in ) : void",
    "right" : "private copyIn(in ) : void",
    "info" : "MethodDeclaration[52522-53071]:MethodDeclaration[52519-53068]"
  }, {
    "left" : "private copyIn(in ) : void",
    "right" : "private copyIn(in ) : void",
    "info" : "MethodDeclaration[53081-53663]:MethodDeclaration[53078-53660]"
  }, {
    "left" : "private isValidCoordinate(row int, col int) : boolean",
    "right" : "private isValidCoordinate(row int, col int) : boolean",
    "info" : "MethodDeclaration[53673-54124]:MethodDeclaration[53670-54121]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3324-3330]:Modifier[3324-3330]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleName[3331-3344]:SimpleName[3331-3344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3347-3354]:Block[3347-3354]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3694-3700]:Modifier[3694-3700]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleName[3701-3714]:SimpleName[3701-3714]"
  }, {
    "left" : "int rowDimension",
    "right" : "int rowDimension",
    "info" : "SingleVariableDeclaration[3715-3731]:SingleVariableDeclaration[3715-3731]"
  }, {
    "left" : "int columnDimension",
    "right" : "int columnDimension",
    "info" : "SingleVariableDeclaration[3733-3752]:SingleVariableDeclaration[3733-3752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3754-4014]:Block[3754-4014]"
  }, {
    "left" : "if (rowDimension <=0 || columnDimension <=0)",
    "right" : "if (rowDimension <=0 || columnDimension <=0)",
    "info" : "IfStatement[3764-3927]:IfStatement[3764-3927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3809-3927]:Block[3809-3927]"
  }, {
    "left" : "throw new IllegalArgumentException\n            (\"row and column dimensions must be positive\");",
    "right" : "throw new IllegalArgumentException\n            (\"row and column dimensions must be positive\");",
    "info" : "ThrowStatement[3823-3917]:ThrowStatement[3823-3917]"
  }, {
    "left" : "data = new BigDecimal[rowDimension][columnDimension];",
    "right" : "data = new BigDecimal[rowDimension][columnDimension];",
    "info" : "ExpressionStatement[3936-3989]:ExpressionStatement[3936-3989]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[3998-4008]:ExpressionStatement[3998-4008]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4581-4587]:Modifier[4581-4587]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleName[4588-4601]:SimpleName[4588-4601]"
  }, {
    "left" : "BigDecimal[][] d",
    "right" : "BigDecimal[][] d",
    "info" : "SingleVariableDeclaration[4602-4618]:SingleVariableDeclaration[4602-4618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4620-4670]:Block[4620-4670]"
  }, {
    "left" : "this.copyIn(d);",
    "right" : "this.copyIn(d);",
    "info" : "ExpressionStatement[4630-4645]:ExpressionStatement[4630-4645]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[4654-4664]:ExpressionStatement[4654-4664]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5456-5462]:Modifier[5456-5462]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleName[5463-5476]:SimpleName[5463-5476]"
  }, {
    "left" : "BigDecimal[][] d",
    "right" : "BigDecimal[][] d",
    "info" : "SingleVariableDeclaration[5477-5493]:SingleVariableDeclaration[5477-5493]"
  }, {
    "left" : "boolean copyArray",
    "right" : "boolean copyArray",
    "info" : "SingleVariableDeclaration[5495-5512]:SingleVariableDeclaration[5495-5512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5514-6319]:Block[5514-6319]"
  }, {
    "left" : "if (copyArray)",
    "right" : "if (copyArray)",
    "info" : "IfStatement[5524-6294]:IfStatement[5524-6294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5539-5573]:Block[5539-5573]"
  }, {
    "left" : "copyIn(d);",
    "right" : "copyIn(d);",
    "info" : "ExpressionStatement[5553-5563]:ExpressionStatement[5553-5563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5579-6294]:Block[5579-6294]"
  }, {
    "left" : "if (d == null)",
    "right" : "if (d == null)",
    "info" : "IfStatement[5593-5673]:IfStatement[5593-5673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5608-5673]:Block[5608-5673]"
  }, {
    "left" : "throw new NullPointerException();",
    "right" : "throw new NullPointerException();",
    "info" : "ThrowStatement[5626-5659]:ThrowStatement[5626-5659]"
  }, {
    "left" : "final int nRows = d.length;",
    "right" : "final int nRows = d.length;",
    "info" : "VariableDeclarationStatement[5689-5716]:VariableDeclarationStatement[5689-5716]"
  }, {
    "left" : "if (nRows == 0)",
    "right" : "if (nRows == 0)",
    "info" : "IfStatement[5729-5851]:IfStatement[5729-5851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5745-5851]:Block[5745-5851]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Matrix must have at least one row.\");",
    "right" : "throw new IllegalArgumentException(\"Matrix must have at least one row.\");",
    "info" : "ThrowStatement[5763-5836]:ThrowStatement[5763-5836]"
  }, {
    "left" : "final int nCols = d[0].length;",
    "right" : "final int nCols = d[0].length;",
    "info" : "VariableDeclarationStatement[5864-5894]:VariableDeclarationStatement[5864-5894]"
  }, {
    "left" : "if (nCols == 0)",
    "right" : "if (nCols == 0)",
    "info" : "IfStatement[5907-6032]:IfStatement[5907-6032]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5923-6032]:Block[5923-6032]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Matrix must have at least one column.\");",
    "right" : "throw new IllegalArgumentException(\"Matrix must have at least one column.\");",
    "info" : "ThrowStatement[5941-6017]:ThrowStatement[5941-6017]"
  }, {
    "left" : "for (int r = 1; r < nRows; r++)",
    "right" : "for (int r = 1; r < nRows; r++)",
    "info" : "ForStatement[6045-6255]:ForStatement[6045-6255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6077-6255]:Block[6077-6255]"
  }, {
    "left" : "if (d[r].length != nCols)",
    "right" : "if (d[r].length != nCols)",
    "info" : "IfStatement[6095-6241]:IfStatement[6095-6241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6121-6241]:Block[6121-6241]"
  }, {
    "left" : "throw new IllegalArgumentException(\"All input rows must have the same length.\");",
    "right" : "throw new IllegalArgumentException(\"All input rows must have the same length.\");",
    "info" : "ThrowStatement[6143-6223]:ThrowStatement[6143-6223]"
  }, {
    "left" : "data = d;",
    "right" : "data = d;",
    "info" : "ExpressionStatement[6275-6284]:ExpressionStatement[6275-6284]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[6303-6313]:ExpressionStatement[6303-6313]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6777-6783]:Modifier[6777-6783]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleName[6784-6797]:SimpleName[6784-6797]"
  }, {
    "left" : "double[][] d",
    "right" : "double[][] d",
    "info" : "SingleVariableDeclaration[6798-6810]:SingleVariableDeclaration[6798-6810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6812-7440]:Block[6812-7440]"
  }, {
    "left" : "final int nRows = d.length;",
    "right" : "final int nRows = d.length;",
    "info" : "VariableDeclarationStatement[6822-6849]:VariableDeclarationStatement[6822-6849]"
  }, {
    "left" : "if (nRows == 0)",
    "right" : "if (nRows == 0)",
    "info" : "IfStatement[6858-6985]:IfStatement[6858-6985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6874-6985]:Block[6874-6985]"
  }, {
    "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
    "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
    "info" : "ThrowStatement[6888-6974]:ThrowStatement[6888-6974]"
  }, {
    "left" : "final int nCols = d[0].length;",
    "right" : "final int nCols = d[0].length;",
    "info" : "VariableDeclarationStatement[6994-7024]:VariableDeclarationStatement[6994-7024]"
  }, {
    "left" : "if (nCols == 0)",
    "right" : "if (nCols == 0)",
    "info" : "IfStatement[7033-7163]:IfStatement[7033-7163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7049-7163]:Block[7049-7163]"
  }, {
    "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
    "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
    "info" : "ThrowStatement[7063-7152]:ThrowStatement[7063-7152]"
  }, {
    "left" : "for (int row = 1; row < nRows; row++)",
    "right" : "for (int row = 1; row < nRows; row++)",
    "info" : "ForStatement[7172-7391]:ForStatement[7172-7391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7210-7391]:Block[7210-7391]"
  }, {
    "left" : "if (d[row].length != nCols)",
    "right" : "if (d[row].length != nCols)",
    "info" : "IfStatement[7224-7381]:IfStatement[7224-7381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7252-7381]:Block[7252-7381]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
    "right" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
    "info" : "ThrowStatement[7270-7367]:ThrowStatement[7270-7367]"
  }, {
    "left" : "this.copyIn(d);",
    "right" : "this.copyIn(d);",
    "info" : "ExpressionStatement[7400-7415]:ExpressionStatement[7400-7415]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[7424-7434]:ExpressionStatement[7424-7434]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7831-7837]:Modifier[7831-7837]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleName[7838-7851]:SimpleName[7838-7851]"
  }, {
    "left" : "String[][] d",
    "right" : "String[][] d",
    "info" : "SingleVariableDeclaration[7852-7864]:SingleVariableDeclaration[7852-7864]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7866-8494]:Block[7866-8494]"
  }, {
    "left" : "final int nRows = d.length;",
    "right" : "final int nRows = d.length;",
    "info" : "VariableDeclarationStatement[7876-7903]:VariableDeclarationStatement[7876-7903]"
  }, {
    "left" : "if (nRows == 0)",
    "right" : "if (nRows == 0)",
    "info" : "IfStatement[7912-8039]:IfStatement[7912-8039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7928-8039]:Block[7928-8039]"
  }, {
    "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
    "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
    "info" : "ThrowStatement[7942-8028]:ThrowStatement[7942-8028]"
  }, {
    "left" : "final int nCols = d[0].length;",
    "right" : "final int nCols = d[0].length;",
    "info" : "VariableDeclarationStatement[8048-8078]:VariableDeclarationStatement[8048-8078]"
  }, {
    "left" : "if (nCols == 0)",
    "right" : "if (nCols == 0)",
    "info" : "IfStatement[8087-8217]:IfStatement[8087-8217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8103-8217]:Block[8103-8217]"
  }, {
    "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
    "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
    "info" : "ThrowStatement[8117-8206]:ThrowStatement[8117-8206]"
  }, {
    "left" : "for (int row = 1; row < nRows; row++)",
    "right" : "for (int row = 1; row < nRows; row++)",
    "info" : "ForStatement[8226-8445]:ForStatement[8226-8445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8264-8445]:Block[8264-8445]"
  }, {
    "left" : "if (d[row].length != nCols)",
    "right" : "if (d[row].length != nCols)",
    "info" : "IfStatement[8278-8435]:IfStatement[8278-8435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8306-8435]:Block[8306-8435]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
    "right" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
    "info" : "ThrowStatement[8324-8421]:ThrowStatement[8324-8421]"
  }, {
    "left" : "this.copyIn(d);",
    "right" : "this.copyIn(d);",
    "info" : "ExpressionStatement[8454-8469]:ExpressionStatement[8454-8469]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[8478-8488]:ExpressionStatement[8478-8488]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8808-8814]:Modifier[8808-8814]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleName[8815-8828]:SimpleName[8815-8828]"
  }, {
    "left" : "BigDecimal[] v",
    "right" : "BigDecimal[] v",
    "info" : "SingleVariableDeclaration[8829-8843]:SingleVariableDeclaration[8829-8843]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8845-9022]:Block[8845-9022]"
  }, {
    "left" : "final int nRows = v.length;",
    "right" : "final int nRows = v.length;",
    "info" : "VariableDeclarationStatement[8855-8882]:VariableDeclarationStatement[8855-8882]"
  }, {
    "left" : "data = new BigDecimal[nRows][1];",
    "right" : "data = new BigDecimal[nRows][1];",
    "info" : "ExpressionStatement[8891-8923]:ExpressionStatement[8891-8923]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[8932-9016]:ForStatement[8932-9016]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8970-9016]:Block[8970-9016]"
  }, {
    "left" : "data[row][0] = v[row];",
    "right" : "data[row][0] = v[row];",
    "info" : "ExpressionStatement[8984-9006]:ExpressionStatement[8984-9006]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9144-9150]:Modifier[9144-9150]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[9151-9160]:SimpleType[9151-9160]"
  }, {
    "left" : "copy",
    "right" : "copy",
    "info" : "SimpleName[9161-9165]:SimpleName[9161-9165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9168-9232]:Block[9168-9232]"
  }, {
    "left" : "return new BigMatrixImpl(this.copyOut(), false);",
    "right" : "return new BigMatrixImpl(this.copyOut(), false);",
    "info" : "ReturnStatement[9178-9226]:ReturnStatement[9178-9226]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9457-9463]:Modifier[9457-9463]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[9464-9473]:SimpleType[9464-9473]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[9474-9477]:SimpleName[9474-9477]"
  }, {
    "left" : "BigMatrix m",
    "right" : "BigMatrix m",
    "info" : "SingleVariableDeclaration[9478-9489]:SingleVariableDeclaration[9478-9489]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[9498-9522]:SimpleType[9498-9522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9523-10426]:Block[9523-10426]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[9533-10420]:TryStatement[9533-10420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9537-9591]:Block[9537-9591]"
  }, {
    "left" : "return add((BigMatrixImpl) m);",
    "right" : "return add((BigMatrixImpl) m);",
    "info" : "ReturnStatement[9551-9581]:ReturnStatement[9551-9581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9623-10420]:Block[9623-10420]"
  }, {
    "left" : "final int rowCount    = getRowDimension();",
    "right" : "final int rowCount    = getRowDimension();",
    "info" : "VariableDeclarationStatement[9637-9679]:VariableDeclarationStatement[9637-9679]"
  }, {
    "left" : "final int columnCount = getColumnDimension();",
    "right" : "final int columnCount = getColumnDimension();",
    "info" : "VariableDeclarationStatement[9692-9737]:VariableDeclarationStatement[9692-9737]"
  }, {
    "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
    "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
    "info" : "IfStatement[9750-9924]:IfStatement[9750-9924]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9828-9924]:Block[9828-9924]"
  }, {
    "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
    "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
    "info" : "ThrowStatement[9846-9910]:ThrowStatement[9846-9910]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "info" : "VariableDeclarationStatement[9937-10006]:VariableDeclarationStatement[9937-10006]"
  }, {
    "left" : "for (int row = 0; row < rowCount; row++)",
    "right" : "for (int row = 0; row < rowCount; row++)",
    "info" : "ForStatement[10019-10356]:ForStatement[10019-10356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10060-10356]:Block[10060-10356]"
  }, {
    "left" : "final BigDecimal[] dataRow    = data[row];",
    "right" : "final BigDecimal[] dataRow    = data[row];",
    "info" : "VariableDeclarationStatement[10078-10120]:VariableDeclarationStatement[10078-10120]"
  }, {
    "left" : "final BigDecimal[] outDataRow = outData[row];",
    "right" : "final BigDecimal[] outDataRow = outData[row];",
    "info" : "VariableDeclarationStatement[10137-10182]:VariableDeclarationStatement[10137-10182]"
  }, {
    "left" : "for (int col = 0; col < columnCount; col++)",
    "right" : "for (int col = 0; col < columnCount; col++)",
    "info" : "ForStatement[10199-10340]:ForStatement[10199-10340]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10243-10340]:Block[10243-10340]"
  }, {
    "left" : "outDataRow[col] = dataRow[col].add(m.getEntry(row, col));",
    "right" : "outDataRow[col] = dataRow[col].add(m.getEntry(row, col));",
    "info" : "ExpressionStatement[10265-10322]:ExpressionStatement[10265-10322]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[10369-10410]:ReturnStatement[10369-10410]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10647-10653]:Modifier[10647-10653]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleType[10654-10667]:SimpleType[10654-10667]"
  }, {
    "left" : "add",
    "right" : "add",
    "info" : "SimpleName[10668-10671]:SimpleName[10668-10671]"
  }, {
    "left" : "BigMatrixImpl m",
    "right" : "BigMatrixImpl m",
    "info" : "SingleVariableDeclaration[10672-10687]:SingleVariableDeclaration[10672-10687]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[10696-10720]:SimpleType[10696-10720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10721-11504]:Block[10721-11504]"
  }, {
    "left" : "final int rowCount    = getRowDimension();",
    "right" : "final int rowCount    = getRowDimension();",
    "info" : "VariableDeclarationStatement[10731-10773]:VariableDeclarationStatement[10731-10773]"
  }, {
    "left" : "final int columnCount = getColumnDimension();",
    "right" : "final int columnCount = getColumnDimension();",
    "info" : "VariableDeclarationStatement[10782-10827]:VariableDeclarationStatement[10782-10827]"
  }, {
    "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
    "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
    "info" : "IfStatement[10836-11002]:IfStatement[10836-11002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10914-11002]:Block[10914-11002]"
  }, {
    "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
    "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
    "info" : "ThrowStatement[10928-10992]:ThrowStatement[10928-10992]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "info" : "VariableDeclarationStatement[11011-11080]:VariableDeclarationStatement[11011-11080]"
  }, {
    "left" : "for (int row = 0; row < rowCount; row++)",
    "right" : "for (int row = 0; row < rowCount; row++)",
    "info" : "ForStatement[11089-11448]:ForStatement[11089-11448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11130-11448]:Block[11130-11448]"
  }, {
    "left" : "final BigDecimal[] dataRow    = data[row];",
    "right" : "final BigDecimal[] dataRow    = data[row];",
    "info" : "VariableDeclarationStatement[11144-11186]:VariableDeclarationStatement[11144-11186]"
  }, {
    "left" : "final BigDecimal[] mRow       = m.data[row];",
    "right" : "final BigDecimal[] mRow       = m.data[row];",
    "info" : "VariableDeclarationStatement[11199-11243]:VariableDeclarationStatement[11199-11243]"
  }, {
    "left" : "final BigDecimal[] outDataRow = outData[row];",
    "right" : "final BigDecimal[] outDataRow = outData[row];",
    "info" : "VariableDeclarationStatement[11256-11301]:VariableDeclarationStatement[11256-11301]"
  }, {
    "left" : "for (int col = 0; col < columnCount; col++)",
    "right" : "for (int col = 0; col < columnCount; col++)",
    "info" : "ForStatement[11314-11436]:ForStatement[11314-11436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11358-11436]:Block[11358-11436]"
  }, {
    "left" : "outDataRow[col] = dataRow[col].add(mRow[col]);",
    "right" : "outDataRow[col] = dataRow[col].add(mRow[col]);",
    "info" : "ExpressionStatement[11376-11422]:ExpressionStatement[11376-11422]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[11457-11498]:ReturnStatement[11457-11498]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11722-11728]:Modifier[11722-11728]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[11729-11738]:SimpleType[11729-11738]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[11739-11747]:SimpleName[11739-11747]"
  }, {
    "left" : "BigMatrix m",
    "right" : "BigMatrix m",
    "info" : "SingleVariableDeclaration[11748-11759]:SingleVariableDeclaration[11748-11759]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[11768-11792]:SimpleType[11768-11792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11793-12704]:Block[11793-12704]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[11803-12698]:TryStatement[11803-12698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11807-11866]:Block[11807-11866]"
  }, {
    "left" : "return subtract((BigMatrixImpl) m);",
    "right" : "return subtract((BigMatrixImpl) m);",
    "info" : "ReturnStatement[11821-11856]:ReturnStatement[11821-11856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11898-12698]:Block[11898-12698]"
  }, {
    "left" : "final int rowCount    = getRowDimension();",
    "right" : "final int rowCount    = getRowDimension();",
    "info" : "VariableDeclarationStatement[11912-11954]:VariableDeclarationStatement[11912-11954]"
  }, {
    "left" : "final int columnCount = getColumnDimension();",
    "right" : "final int columnCount = getColumnDimension();",
    "info" : "VariableDeclarationStatement[11967-12012]:VariableDeclarationStatement[11967-12012]"
  }, {
    "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
    "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
    "info" : "IfStatement[12025-12199]:IfStatement[12025-12199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12103-12199]:Block[12103-12199]"
  }, {
    "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
    "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
    "info" : "ThrowStatement[12121-12185]:ThrowStatement[12121-12185]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "info" : "VariableDeclarationStatement[12212-12281]:VariableDeclarationStatement[12212-12281]"
  }, {
    "left" : "for (int row = 0; row < rowCount; row++)",
    "right" : "for (int row = 0; row < rowCount; row++)",
    "info" : "ForStatement[12294-12634]:ForStatement[12294-12634]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12335-12634]:Block[12335-12634]"
  }, {
    "left" : "final BigDecimal[] dataRow    = data[row];",
    "right" : "final BigDecimal[] dataRow    = data[row];",
    "info" : "VariableDeclarationStatement[12353-12395]:VariableDeclarationStatement[12353-12395]"
  }, {
    "left" : "final BigDecimal[] outDataRow = outData[row];",
    "right" : "final BigDecimal[] outDataRow = outData[row];",
    "info" : "VariableDeclarationStatement[12412-12457]:VariableDeclarationStatement[12412-12457]"
  }, {
    "left" : "for (int col = 0; col < columnCount; col++)",
    "right" : "for (int col = 0; col < columnCount; col++)",
    "info" : "ForStatement[12474-12618]:ForStatement[12474-12618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12518-12618]:Block[12518-12618]"
  }, {
    "left" : "outDataRow[col] = dataRow[col].subtract(getEntry(row, col));",
    "right" : "outDataRow[col] = dataRow[col].subtract(getEntry(row, col));",
    "info" : "ExpressionStatement[12540-12600]:ExpressionStatement[12540-12600]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[12647-12688]:ReturnStatement[12647-12688]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12922-12928]:Modifier[12922-12928]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleType[12929-12942]:SimpleType[12929-12942]"
  }, {
    "left" : "subtract",
    "right" : "subtract",
    "info" : "SimpleName[12943-12951]:SimpleName[12943-12951]"
  }, {
    "left" : "BigMatrixImpl m",
    "right" : "BigMatrixImpl m",
    "info" : "SingleVariableDeclaration[12952-12967]:SingleVariableDeclaration[12952-12967]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[12976-13000]:SimpleType[12976-13000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13001-13789]:Block[13001-13789]"
  }, {
    "left" : "final int rowCount    = getRowDimension();",
    "right" : "final int rowCount    = getRowDimension();",
    "info" : "VariableDeclarationStatement[13011-13053]:VariableDeclarationStatement[13011-13053]"
  }, {
    "left" : "final int columnCount = getColumnDimension();",
    "right" : "final int columnCount = getColumnDimension();",
    "info" : "VariableDeclarationStatement[13062-13107]:VariableDeclarationStatement[13062-13107]"
  }, {
    "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
    "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
    "info" : "IfStatement[13116-13282]:IfStatement[13116-13282]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13194-13282]:Block[13194-13282]"
  }, {
    "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
    "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
    "info" : "ThrowStatement[13208-13272]:ThrowStatement[13208-13272]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "info" : "VariableDeclarationStatement[13291-13360]:VariableDeclarationStatement[13291-13360]"
  }, {
    "left" : "for (int row = 0; row < rowCount; row++)",
    "right" : "for (int row = 0; row < rowCount; row++)",
    "info" : "ForStatement[13369-13733]:ForStatement[13369-13733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13410-13733]:Block[13410-13733]"
  }, {
    "left" : "final BigDecimal[] dataRow    = data[row];",
    "right" : "final BigDecimal[] dataRow    = data[row];",
    "info" : "VariableDeclarationStatement[13424-13466]:VariableDeclarationStatement[13424-13466]"
  }, {
    "left" : "final BigDecimal[] mRow       = m.data[row];",
    "right" : "final BigDecimal[] mRow       = m.data[row];",
    "info" : "VariableDeclarationStatement[13479-13523]:VariableDeclarationStatement[13479-13523]"
  }, {
    "left" : "final BigDecimal[] outDataRow = outData[row];",
    "right" : "final BigDecimal[] outDataRow = outData[row];",
    "info" : "VariableDeclarationStatement[13536-13581]:VariableDeclarationStatement[13536-13581]"
  }, {
    "left" : "for (int col = 0; col < columnCount; col++)",
    "right" : "for (int col = 0; col < columnCount; col++)",
    "info" : "ForStatement[13594-13721]:ForStatement[13594-13721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13638-13721]:Block[13638-13721]"
  }, {
    "left" : "outDataRow[col] = dataRow[col].subtract(mRow[col]);",
    "right" : "outDataRow[col] = dataRow[col].subtract(mRow[col]);",
    "info" : "ExpressionStatement[13656-13707]:ExpressionStatement[13656-13707]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[13742-13783]:ReturnStatement[13742-13783]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13958-13964]:Modifier[13958-13964]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[13965-13974]:SimpleType[13965-13974]"
  }, {
    "left" : "scalarAdd",
    "right" : "scalarAdd",
    "info" : "SimpleName[13975-13984]:SimpleName[13975-13984]"
  }, {
    "left" : "BigDecimal d",
    "right" : "BigDecimal d",
    "info" : "SingleVariableDeclaration[13985-13997]:SingleVariableDeclaration[13985-13997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13999-14540]:Block[13999-14540]"
  }, {
    "left" : "final int rowCount    = getRowDimension();",
    "right" : "final int rowCount    = getRowDimension();",
    "info" : "VariableDeclarationStatement[14009-14051]:VariableDeclarationStatement[14009-14051]"
  }, {
    "left" : "final int columnCount = getColumnDimension();",
    "right" : "final int columnCount = getColumnDimension();",
    "info" : "VariableDeclarationStatement[14060-14105]:VariableDeclarationStatement[14060-14105]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "info" : "VariableDeclarationStatement[14114-14183]:VariableDeclarationStatement[14114-14183]"
  }, {
    "left" : "for (int row = 0; row < rowCount; row++)",
    "right" : "for (int row = 0; row < rowCount; row++)",
    "info" : "ForStatement[14192-14484]:ForStatement[14192-14484]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14233-14484]:Block[14233-14484]"
  }, {
    "left" : "final BigDecimal[] dataRow    = data[row];",
    "right" : "final BigDecimal[] dataRow    = data[row];",
    "info" : "VariableDeclarationStatement[14247-14289]:VariableDeclarationStatement[14247-14289]"
  }, {
    "left" : "final BigDecimal[] outDataRow = outData[row];",
    "right" : "final BigDecimal[] outDataRow = outData[row];",
    "info" : "VariableDeclarationStatement[14302-14347]:VariableDeclarationStatement[14302-14347]"
  }, {
    "left" : "for (int col = 0; col < columnCount; col++)",
    "right" : "for (int col = 0; col < columnCount; col++)",
    "info" : "ForStatement[14360-14474]:ForStatement[14360-14474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14404-14474]:Block[14404-14474]"
  }, {
    "left" : "outDataRow[col] = dataRow[col].add(d);",
    "right" : "outDataRow[col] = dataRow[col].add(d);",
    "info" : "ExpressionStatement[14422-14460]:ExpressionStatement[14422-14460]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[14493-14534]:ReturnStatement[14493-14534]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14714-14720]:Modifier[14714-14720]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[14721-14730]:SimpleType[14721-14730]"
  }, {
    "left" : "scalarMultiply",
    "right" : "scalarMultiply",
    "info" : "SimpleName[14731-14745]:SimpleName[14731-14745]"
  }, {
    "left" : "BigDecimal d",
    "right" : "BigDecimal d",
    "info" : "SingleVariableDeclaration[14746-14758]:SingleVariableDeclaration[14746-14758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14760-15306]:Block[14760-15306]"
  }, {
    "left" : "final int rowCount    = getRowDimension();",
    "right" : "final int rowCount    = getRowDimension();",
    "info" : "VariableDeclarationStatement[14770-14812]:VariableDeclarationStatement[14770-14812]"
  }, {
    "left" : "final int columnCount = getColumnDimension();",
    "right" : "final int columnCount = getColumnDimension();",
    "info" : "VariableDeclarationStatement[14821-14866]:VariableDeclarationStatement[14821-14866]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
    "info" : "VariableDeclarationStatement[14875-14944]:VariableDeclarationStatement[14875-14944]"
  }, {
    "left" : "for (int row = 0; row < rowCount; row++)",
    "right" : "for (int row = 0; row < rowCount; row++)",
    "info" : "ForStatement[14953-15250]:ForStatement[14953-15250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14994-15250]:Block[14994-15250]"
  }, {
    "left" : "final BigDecimal[] dataRow    = data[row];",
    "right" : "final BigDecimal[] dataRow    = data[row];",
    "info" : "VariableDeclarationStatement[15008-15050]:VariableDeclarationStatement[15008-15050]"
  }, {
    "left" : "final BigDecimal[] outDataRow = outData[row];",
    "right" : "final BigDecimal[] outDataRow = outData[row];",
    "info" : "VariableDeclarationStatement[15063-15108]:VariableDeclarationStatement[15063-15108]"
  }, {
    "left" : "for (int col = 0; col < columnCount; col++)",
    "right" : "for (int col = 0; col < columnCount; col++)",
    "info" : "ForStatement[15121-15240]:ForStatement[15121-15240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15165-15240]:Block[15165-15240]"
  }, {
    "left" : "outDataRow[col] = dataRow[col].multiply(d);",
    "right" : "outDataRow[col] = dataRow[col].multiply(d);",
    "info" : "ExpressionStatement[15183-15226]:ExpressionStatement[15183-15226]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[15259-15300]:ReturnStatement[15259-15300]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15575-15581]:Modifier[15575-15581]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[15582-15591]:SimpleType[15582-15591]"
  }, {
    "left" : "multiply",
    "right" : "multiply",
    "info" : "SimpleName[15592-15600]:SimpleName[15592-15600]"
  }, {
    "left" : "BigMatrix m",
    "right" : "BigMatrix m",
    "info" : "SingleVariableDeclaration[15601-15612]:SingleVariableDeclaration[15601-15612]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[15621-15645]:SimpleType[15621-15645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15646-16742]:Block[15646-16742]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[15656-16736]:TryStatement[15656-16736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15660-15719]:Block[15660-15719]"
  }, {
    "left" : "return multiply((BigMatrixImpl) m);",
    "right" : "return multiply((BigMatrixImpl) m);",
    "info" : "ReturnStatement[15674-15709]:ReturnStatement[15674-15709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15751-16736]:Block[15751-16736]"
  }, {
    "left" : "if (this.getColumnDimension() != m.getRowDimension())",
    "right" : "if (this.getColumnDimension() != m.getRowDimension())",
    "info" : "IfStatement[15765-15933]:IfStatement[15765-15933]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15819-15933]:Block[15819-15933]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
    "right" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
    "info" : "ThrowStatement[15837-15919]:ThrowStatement[15837-15919]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[15946-15987]:VariableDeclarationStatement[15946-15987]"
  }, {
    "left" : "final int nCols = m.getColumnDimension();",
    "right" : "final int nCols = m.getColumnDimension();",
    "info" : "VariableDeclarationStatement[16000-16041]:VariableDeclarationStatement[16000-16041]"
  }, {
    "left" : "final int nSum = this.getColumnDimension();",
    "right" : "final int nSum = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[16054-16097]:VariableDeclarationStatement[16054-16097]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[nRows][nCols];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[nRows][nCols];",
    "info" : "VariableDeclarationStatement[16110-16170]:VariableDeclarationStatement[16110-16170]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[16183-16672]:ForStatement[16183-16672]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16221-16672]:Block[16221-16672]"
  }, {
    "left" : "final BigDecimal[] dataRow    = data[row];",
    "right" : "final BigDecimal[] dataRow    = data[row];",
    "info" : "VariableDeclarationStatement[16239-16281]:VariableDeclarationStatement[16239-16281]"
  }, {
    "left" : "final BigDecimal[] outDataRow = outData[row];",
    "right" : "final BigDecimal[] outDataRow = outData[row];",
    "info" : "VariableDeclarationStatement[16298-16343]:VariableDeclarationStatement[16298-16343]"
  }, {
    "left" : "for (int col = 0; col < nCols; col++)",
    "right" : "for (int col = 0; col < nCols; col++)",
    "info" : "ForStatement[16360-16658]:ForStatement[16360-16658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16398-16658]:Block[16398-16658]"
  }, {
    "left" : "BigDecimal sum = ZERO;",
    "right" : "BigDecimal sum = ZERO;",
    "info" : "VariableDeclarationStatement[16420-16442]:VariableDeclarationStatement[16420-16442]"
  }, {
    "left" : "for (int i = 0; i < nSum; i++)",
    "right" : "for (int i = 0; i < nSum; i++)",
    "info" : "ForStatement[16463-16597]:ForStatement[16463-16597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16494-16597]:Block[16494-16597]"
  }, {
    "left" : "sum = sum.add(dataRow[i].multiply(m.getEntry(i, col)));",
    "right" : "sum = sum.add(dataRow[i].multiply(m.getEntry(i, col)));",
    "info" : "ExpressionStatement[16520-16575]:ExpressionStatement[16520-16575]"
  }, {
    "left" : "outDataRow[col] = sum;",
    "right" : "outDataRow[col] = sum;",
    "info" : "ExpressionStatement[16618-16640]:ExpressionStatement[16618-16640]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[16685-16726]:ReturnStatement[16685-16726]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17011-17017]:Modifier[17011-17017]"
  }, {
    "left" : "BigMatrixImpl",
    "right" : "BigMatrixImpl",
    "info" : "SimpleType[17018-17031]:SimpleType[17018-17031]"
  }, {
    "left" : "multiply",
    "right" : "multiply",
    "info" : "SimpleName[17032-17040]:SimpleName[17032-17040]"
  }, {
    "left" : "BigMatrixImpl m",
    "right" : "BigMatrixImpl m",
    "info" : "SingleVariableDeclaration[17041-17056]:SingleVariableDeclaration[17041-17056]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[17065-17089]:SimpleType[17065-17089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17090-18003]:Block[17090-18003]"
  }, {
    "left" : "if (this.getColumnDimension() != m.getRowDimension())",
    "right" : "if (this.getColumnDimension() != m.getRowDimension())",
    "info" : "IfStatement[17100-17260]:IfStatement[17100-17260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17154-17260]:Block[17154-17260]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
    "right" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
    "info" : "ThrowStatement[17168-17250]:ThrowStatement[17168-17250]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[17269-17310]:VariableDeclarationStatement[17269-17310]"
  }, {
    "left" : "final int nCols = m.getColumnDimension();",
    "right" : "final int nCols = m.getColumnDimension();",
    "info" : "VariableDeclarationStatement[17319-17360]:VariableDeclarationStatement[17319-17360]"
  }, {
    "left" : "final int nSum = this.getColumnDimension();",
    "right" : "final int nSum = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[17369-17412]:VariableDeclarationStatement[17369-17412]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[nRows][nCols];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[nRows][nCols];",
    "info" : "VariableDeclarationStatement[17421-17481]:VariableDeclarationStatement[17421-17481]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[17490-17935]:ForStatement[17490-17935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17528-17935]:Block[17528-17935]"
  }, {
    "left" : "final BigDecimal[] dataRow    = data[row];",
    "right" : "final BigDecimal[] dataRow    = data[row];",
    "info" : "VariableDeclarationStatement[17542-17584]:VariableDeclarationStatement[17542-17584]"
  }, {
    "left" : "final BigDecimal[] outDataRow = outData[row];",
    "right" : "final BigDecimal[] outDataRow = outData[row];",
    "info" : "VariableDeclarationStatement[17597-17642]:VariableDeclarationStatement[17597-17642]"
  }, {
    "left" : "for (int col = 0; col < nCols; col++)",
    "right" : "for (int col = 0; col < nCols; col++)",
    "info" : "ForStatement[17655-17925]:ForStatement[17655-17925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17693-17925]:Block[17693-17925]"
  }, {
    "left" : "BigDecimal sum = ZERO;",
    "right" : "BigDecimal sum = ZERO;",
    "info" : "VariableDeclarationStatement[17711-17733]:VariableDeclarationStatement[17711-17733]"
  }, {
    "left" : "for (int i = 0; i < nSum; i++)",
    "right" : "for (int i = 0; i < nSum; i++)",
    "info" : "ForStatement[17750-17872]:ForStatement[17750-17872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17781-17872]:Block[17781-17872]"
  }, {
    "left" : "sum = sum.add(dataRow[i].multiply(m.data[i][col]));",
    "right" : "sum = sum.add(dataRow[i].multiply(m.data[i][col]));",
    "info" : "ExpressionStatement[17803-17854]:ExpressionStatement[17803-17854]"
  }, {
    "left" : "outDataRow[col] = sum;",
    "right" : "outDataRow[col] = sum;",
    "info" : "ExpressionStatement[17889-17911]:ExpressionStatement[17889-17911]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[17956-17997]:ReturnStatement[17956-17997]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18269-18275]:Modifier[18269-18275]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[18276-18285]:SimpleType[18276-18285]"
  }, {
    "left" : "preMultiply",
    "right" : "preMultiply",
    "info" : "SimpleName[18286-18297]:SimpleName[18286-18297]"
  }, {
    "left" : "BigMatrix m",
    "right" : "BigMatrix m",
    "info" : "SingleVariableDeclaration[18298-18309]:SingleVariableDeclaration[18298-18309]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[18318-18342]:SimpleType[18318-18342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18343-18383]:Block[18343-18383]"
  }, {
    "left" : "return m.multiply(this);",
    "right" : "return m.multiply(this);",
    "info" : "ReturnStatement[18353-18377]:ReturnStatement[18353-18377]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18584-18590]:Modifier[18584-18590]"
  }, {
    "left" : "BigDecimal[][]",
    "right" : "BigDecimal[][]",
    "info" : "ArrayType[18591-18605]:ArrayType[18591-18605]"
  }, {
    "left" : "getData",
    "right" : "getData",
    "info" : "SimpleName[18606-18613]:SimpleName[18606-18613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18616-18649]:Block[18616-18649]"
  }, {
    "left" : "return copyOut();",
    "right" : "return copyOut();",
    "info" : "ReturnStatement[18626-18643]:ReturnStatement[18626-18643]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18901-18907]:Modifier[18901-18907]"
  }, {
    "left" : "double[][]",
    "right" : "double[][]",
    "info" : "ArrayType[18908-18918]:ArrayType[18908-18918]"
  }, {
    "left" : "getDataAsDoubleArray",
    "right" : "getDataAsDoubleArray",
    "info" : "SimpleName[18919-18939]:SimpleName[18919-18939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18942-19279]:Block[18942-19279]"
  }, {
    "left" : "final int nRows = getRowDimension();",
    "right" : "final int nRows = getRowDimension();",
    "info" : "VariableDeclarationStatement[18952-18988]:VariableDeclarationStatement[18952-18988]"
  }, {
    "left" : "final int nCols = getColumnDimension();",
    "right" : "final int nCols = getColumnDimension();",
    "info" : "VariableDeclarationStatement[18997-19036]:VariableDeclarationStatement[18997-19036]"
  }, {
    "left" : "final double d[][] = new double[nRows][nCols];",
    "right" : "final double d[][] = new double[nRows][nCols];",
    "info" : "VariableDeclarationStatement[19045-19091]:VariableDeclarationStatement[19045-19091]"
  }, {
    "left" : "for (int i = 0; i < nRows; i++)",
    "right" : "for (int i = 0; i < nRows; i++)",
    "info" : "ForStatement[19100-19255]:ForStatement[19100-19255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19132-19255]:Block[19132-19255]"
  }, {
    "left" : "for (int j = 0; j < nCols; j++)",
    "right" : "for (int j = 0; j < nCols; j++)",
    "info" : "ForStatement[19146-19245]:ForStatement[19146-19245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19178-19245]:Block[19178-19245]"
  }, {
    "left" : "d[i][j] = data[i][j].doubleValue();",
    "right" : "d[i][j] = data[i][j].doubleValue();",
    "info" : "ExpressionStatement[19196-19231]:ExpressionStatement[19196-19231]"
  }, {
    "left" : "return d;",
    "right" : "return d;",
    "info" : "ReturnStatement[19264-19273]:ReturnStatement[19264-19273]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19488-19494]:Modifier[19488-19494]"
  }, {
    "left" : "BigDecimal[][]",
    "right" : "BigDecimal[][]",
    "info" : "ArrayType[19495-19509]:ArrayType[19495-19509]"
  }, {
    "left" : "getDataRef",
    "right" : "getDataRef",
    "info" : "SimpleName[19510-19520]:SimpleName[19510-19520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19523-19551]:Block[19523-19551]"
  }, {
    "left" : "return data;",
    "right" : "return data;",
    "info" : "ReturnStatement[19533-19545]:ReturnStatement[19533-19545]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19755-19761]:Modifier[19755-19761]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[19762-19765]:PrimitiveType[19762-19765]"
  }, {
    "left" : "getRoundingMode",
    "right" : "getRoundingMode",
    "info" : "SimpleName[19766-19781]:SimpleName[19766-19781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19784-19820]:Block[19784-19820]"
  }, {
    "left" : "return roundingMode;",
    "right" : "return roundingMode;",
    "info" : "ReturnStatement[19794-19814]:ReturnStatement[19794-19814]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19986-19992]:Modifier[19986-19992]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19993-19997]:PrimitiveType[19993-19997]"
  }, {
    "left" : "setRoundingMode",
    "right" : "setRoundingMode",
    "info" : "SimpleName[19998-20013]:SimpleName[19998-20013]"
  }, {
    "left" : "int roundingMode",
    "right" : "int roundingMode",
    "info" : "SingleVariableDeclaration[20014-20030]:SingleVariableDeclaration[20014-20030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20032-20081]:Block[20032-20081]"
  }, {
    "left" : "this.roundingMode = roundingMode;",
    "right" : "this.roundingMode = roundingMode;",
    "info" : "ExpressionStatement[20042-20075]:ExpressionStatement[20042-20075]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20228-20234]:Modifier[20228-20234]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[20235-20238]:PrimitiveType[20235-20238]"
  }, {
    "left" : "getScale",
    "right" : "getScale",
    "info" : "SimpleName[20239-20247]:SimpleName[20239-20247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20250-20279]:Block[20250-20279]"
  }, {
    "left" : "return scale;",
    "right" : "return scale;",
    "info" : "ReturnStatement[20260-20273]:ReturnStatement[20260-20273]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20426-20432]:Modifier[20426-20432]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20433-20437]:PrimitiveType[20433-20437]"
  }, {
    "left" : "setScale",
    "right" : "setScale",
    "info" : "SimpleName[20438-20446]:SimpleName[20438-20446]"
  }, {
    "left" : "int scale",
    "right" : "int scale",
    "info" : "SingleVariableDeclaration[20447-20456]:SingleVariableDeclaration[20447-20456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20458-20493]:Block[20458-20493]"
  }, {
    "left" : "this.scale = scale;",
    "right" : "this.scale = scale;",
    "info" : "ExpressionStatement[20468-20487]:ExpressionStatement[20468-20487]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20692-20698]:Modifier[20692-20698]"
  }, {
    "left" : "BigDecimal",
    "right" : "BigDecimal",
    "info" : "SimpleType[20699-20709]:SimpleType[20699-20709]"
  }, {
    "left" : "getNorm",
    "right" : "getNorm",
    "info" : "SimpleName[20710-20717]:SimpleName[20710-20717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20720-21083]:Block[20720-21083]"
  }, {
    "left" : "BigDecimal maxColSum = ZERO;",
    "right" : "BigDecimal maxColSum = ZERO;",
    "info" : "VariableDeclarationStatement[20730-20758]:VariableDeclarationStatement[20730-20758]"
  }, {
    "left" : "for (int col = 0; col < this.getColumnDimension(); col++)",
    "right" : "for (int col = 0; col < this.getColumnDimension(); col++)",
    "info" : "ForStatement[20767-21051]:ForStatement[20767-21051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20825-21051]:Block[20825-21051]"
  }, {
    "left" : "BigDecimal sum = ZERO;",
    "right" : "BigDecimal sum = ZERO;",
    "info" : "VariableDeclarationStatement[20839-20861]:VariableDeclarationStatement[20839-20861]"
  }, {
    "left" : "for (int row = 0; row < this.getRowDimension(); row++)",
    "right" : "for (int row = 0; row < this.getRowDimension(); row++)",
    "info" : "ForStatement[20874-20997]:ForStatement[20874-20997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20929-20997]:Block[20929-20997]"
  }, {
    "left" : "sum = sum.add(data[row][col].abs());",
    "right" : "sum = sum.add(data[row][col].abs());",
    "info" : "ExpressionStatement[20947-20983]:ExpressionStatement[20947-20983]"
  }, {
    "left" : "maxColSum = maxColSum.max(sum);",
    "right" : "maxColSum = maxColSum.max(sum);",
    "info" : "ExpressionStatement[21010-21041]:ExpressionStatement[21010-21041]"
  }, {
    "left" : "return maxColSum;",
    "right" : "return maxColSum;",
    "info" : "ReturnStatement[21060-21077]:ReturnStatement[21060-21077]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21550-21556]:Modifier[21550-21556]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[21557-21566]:SimpleType[21557-21566]"
  }, {
    "left" : "getSubMatrix",
    "right" : "getSubMatrix",
    "info" : "SimpleName[21567-21579]:SimpleName[21567-21579]"
  }, {
    "left" : "int startRow",
    "right" : "int startRow",
    "info" : "SingleVariableDeclaration[21580-21592]:SingleVariableDeclaration[21580-21592]"
  }, {
    "left" : "int endRow",
    "right" : "int endRow",
    "info" : "SingleVariableDeclaration[21594-21604]:SingleVariableDeclaration[21594-21604]"
  }, {
    "left" : "int startColumn",
    "right" : "int startColumn",
    "info" : "SingleVariableDeclaration[21640-21655]:SingleVariableDeclaration[21640-21655]"
  }, {
    "left" : "int endColumn",
    "right" : "int endColumn",
    "info" : "SingleVariableDeclaration[21657-21670]:SingleVariableDeclaration[21657-21670]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[21687-21707]:SimpleType[21687-21707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21708-22400]:Block[21708-22400]"
  }, {
    "left" : "if (startRow < 0 || startRow > endRow || endRow > data.length ||\n                startColumn < 0 || startColumn > endColumn ||\n                endColumn > data[0].length)",
    "right" : "if (startRow < 0 || startRow > endRow || endRow > data.length ||\n                startColumn < 0 || startColumn > endColumn ||\n                endColumn > data[0].length)",
    "info" : "IfStatement[21718-21999]:IfStatement[21718-21999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21890-21999]:Block[21890-21999]"
  }, {
    "left" : "throw new MatrixIndexException(\n            \"invalid row or column index selection\");",
    "right" : "throw new MatrixIndexException(\n            \"invalid row or column index selection\");",
    "info" : "ThrowStatement[21904-21989]:ThrowStatement[21904-21989]"
  }, {
    "left" : "final BigDecimal[][] subMatrixData =\n            new BigDecimal[endRow - startRow + 1][endColumn - startColumn + 1];",
    "right" : "final BigDecimal[][] subMatrixData =\n            new BigDecimal[endRow - startRow + 1][endColumn - startColumn + 1];",
    "info" : "VariableDeclarationStatement[22008-22124]:VariableDeclarationStatement[22008-22124]"
  }, {
    "left" : "for (int i = startRow; i <= endRow; i++)",
    "right" : "for (int i = startRow; i <= endRow; i++)",
    "info" : "ForStatement[22133-22338]:ForStatement[22133-22338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22174-22338]:Block[22174-22338]"
  }, {
    "left" : "System.arraycopy(data[i], startColumn,\n                    subMatrixData[i - startRow], 0,\n                    endColumn - startColumn + 1);",
    "right" : "System.arraycopy(data[i], startColumn,\n                    subMatrixData[i - startRow], 0,\n                    endColumn - startColumn + 1);",
    "info" : "ExpressionStatement[22188-22328]:ExpressionStatement[22188-22328]"
  }, {
    "left" : "return new BigMatrixImpl(subMatrixData, false);",
    "right" : "return new BigMatrixImpl(subMatrixData, false);",
    "info" : "ReturnStatement[22347-22394]:ReturnStatement[22347-22394]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[22856-22862]:Modifier[22856-22862]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[22863-22872]:SimpleType[22863-22872]"
  }, {
    "left" : "getSubMatrix",
    "right" : "getSubMatrix",
    "info" : "SimpleName[22873-22885]:SimpleName[22873-22885]"
  }, {
    "left" : "int[] selectedRows",
    "right" : "int[] selectedRows",
    "info" : "SingleVariableDeclaration[22886-22904]:SingleVariableDeclaration[22886-22904]"
  }, {
    "left" : "int[] selectedColumns",
    "right" : "int[] selectedColumns",
    "info" : "SingleVariableDeclaration[22906-22927]:SingleVariableDeclaration[22906-22927]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[22944-22964]:SimpleType[22944-22964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22965-23853]:Block[22965-23853]"
  }, {
    "left" : "if (selectedRows.length * selectedColumns.length == 0)",
    "right" : "if (selectedRows.length * selectedColumns.length == 0)",
    "info" : "IfStatement[22975-23156]:IfStatement[22975-23156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23030-23156]:Block[23030-23156]"
  }, {
    "left" : "throw new MatrixIndexException(\n            \"selected row and column index arrays must be non-empty\");",
    "right" : "throw new MatrixIndexException(\n            \"selected row and column index arrays must be non-empty\");",
    "info" : "ThrowStatement[23044-23146]:ThrowStatement[23044-23146]"
  }, {
    "left" : "final BigDecimal[][] subMatrixData =\n            new BigDecimal[selectedRows.length][selectedColumns.length];",
    "right" : "final BigDecimal[][] subMatrixData =\n            new BigDecimal[selectedRows.length][selectedColumns.length];",
    "info" : "VariableDeclarationStatement[23165-23274]:VariableDeclarationStatement[23165-23274]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[23283-23791]:TryStatement[23283-23791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23288-23657]:Block[23288-23657]"
  }, {
    "left" : "for (int i = 0; i < selectedRows.length; i++)",
    "right" : "for (int i = 0; i < selectedRows.length; i++)",
    "info" : "ForStatement[23302-23647]:ForStatement[23302-23647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23348-23647]:Block[23348-23647]"
  }, {
    "left" : "final BigDecimal[] subI = subMatrixData[i];",
    "right" : "final BigDecimal[] subI = subMatrixData[i];",
    "info" : "VariableDeclarationStatement[23366-23409]:VariableDeclarationStatement[23366-23409]"
  }, {
    "left" : "final BigDecimal[] dataSelectedI = data[selectedRows[i]];",
    "right" : "final BigDecimal[] dataSelectedI = data[selectedRows[i]];",
    "info" : "VariableDeclarationStatement[23426-23483]:VariableDeclarationStatement[23426-23483]"
  }, {
    "left" : "for (int j = 0; j < selectedColumns.length; j++)",
    "right" : "for (int j = 0; j < selectedColumns.length; j++)",
    "info" : "ForStatement[23500-23633]:ForStatement[23500-23633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23549-23633]:Block[23549-23633]"
  }, {
    "left" : "subI[j] = dataSelectedI[selectedColumns[j]];",
    "right" : "subI[j] = dataSelectedI[selectedColumns[j]];",
    "info" : "ExpressionStatement[23571-23615]:ExpressionStatement[23571-23615]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23707-23791]:Block[23707-23791]"
  }, {
    "left" : "throw new MatrixIndexException(\"matrix dimension mismatch\");",
    "right" : "throw new MatrixIndexException(\"matrix dimension mismatch\");",
    "info" : "ThrowStatement[23721-23781]:ThrowStatement[23721-23781]"
  }, {
    "left" : "return new BigMatrixImpl(subMatrixData, false);",
    "right" : "return new BigMatrixImpl(subMatrixData, false);",
    "info" : "ReturnStatement[23800-23847]:ReturnStatement[23800-23847]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24942-24948]:Modifier[24942-24948]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[24949-24953]:PrimitiveType[24949-24953]"
  }, {
    "left" : "setSubMatrix",
    "right" : "setSubMatrix",
    "info" : "SimpleName[24954-24966]:SimpleName[24954-24966]"
  }, {
    "left" : "BigDecimal[][] subMatrix",
    "right" : "BigDecimal[][] subMatrix",
    "info" : "SingleVariableDeclaration[24967-24991]:SingleVariableDeclaration[24967-24991]"
  }, {
    "left" : "int row",
    "right" : "int row",
    "info" : "SingleVariableDeclaration[24993-25000]:SingleVariableDeclaration[24993-25000]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[25002-25012]:SingleVariableDeclaration[25002-25012]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[25026-25046]:SimpleType[25026-25046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25047-26502]:Block[25047-26502]"
  }, {
    "left" : "if ((row < 0) || (column < 0))",
    "right" : "if ((row < 0) || (column < 0))",
    "info" : "IfStatement[25057-25206]:IfStatement[25057-25206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25087-25206]:Block[25087-25206]"
  }, {
    "left" : "throw new MatrixIndexException\n            (\"invalid row or column index selection\");",
    "right" : "throw new MatrixIndexException\n            (\"invalid row or column index selection\");",
    "info" : "ThrowStatement[25101-25186]:ThrowStatement[25101-25186]"
  }, {
    "left" : "final int nRows = subMatrix.length;",
    "right" : "final int nRows = subMatrix.length;",
    "info" : "VariableDeclarationStatement[25215-25250]:VariableDeclarationStatement[25215-25250]"
  }, {
    "left" : "if (nRows == 0)",
    "right" : "if (nRows == 0)",
    "info" : "IfStatement[25259-25386]:IfStatement[25259-25386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25275-25386]:Block[25275-25386]"
  }, {
    "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
    "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
    "info" : "ThrowStatement[25289-25375]:ThrowStatement[25289-25375]"
  }, {
    "left" : "final int nCols = subMatrix[0].length;",
    "right" : "final int nCols = subMatrix[0].length;",
    "info" : "VariableDeclarationStatement[25395-25433]:VariableDeclarationStatement[25395-25433]"
  }, {
    "left" : "if (nCols == 0)",
    "right" : "if (nCols == 0)",
    "info" : "IfStatement[25442-25572]:IfStatement[25442-25572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25458-25572]:Block[25458-25572]"
  }, {
    "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
    "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
    "info" : "ThrowStatement[25472-25561]:ThrowStatement[25472-25561]"
  }, {
    "left" : "for (int r = 1; r < nRows; r++)",
    "right" : "for (int r = 1; r < nRows; r++)",
    "info" : "ForStatement[25581-25800]:ForStatement[25581-25800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25613-25800]:Block[25613-25800]"
  }, {
    "left" : "if (subMatrix[r].length != nCols)",
    "right" : "if (subMatrix[r].length != nCols)",
    "info" : "IfStatement[25627-25790]:IfStatement[25627-25790]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25661-25790]:Block[25661-25790]"
  }, {
    "left" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
    "right" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
    "info" : "ThrowStatement[25679-25776]:ThrowStatement[25679-25776]"
  }, {
    "left" : "if (data == null)",
    "right" : "if (data == null)",
    "info" : "IfStatement[25816-26113]:IfStatement[25816-26113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25834-26113]:Block[25834-26113]"
  }, {
    "left" : "if ((row > 0)||(column > 0))",
    "right" : "if ((row > 0)||(column > 0))",
    "info" : "IfStatement[25848-25973]:IfStatement[25848-25973]"
  }, {
    "left" : "throw new MatrixIndexException\n            (\"matrix must be initialized to perfom this method\");",
    "right" : "throw new MatrixIndexException\n            (\"matrix must be initialized to perfom this method\");",
    "info" : "ThrowStatement[25877-25973]:ThrowStatement[25877-25973]"
  }, {
    "left" : "data = new BigDecimal[nRows][nCols];",
    "right" : "data = new BigDecimal[nRows][nCols];",
    "info" : "ExpressionStatement[25986-26022]:ExpressionStatement[25986-26022]"
  }, {
    "left" : "System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);",
    "right" : "System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);",
    "info" : "ExpressionStatement[26035-26093]:ExpressionStatement[26035-26093]"
  }, {
    "left" : "if (((nRows + row) > this.getRowDimension()) ||\n            (nCols + column > this.getColumnDimension()))",
    "right" : "if (((nRows + row) > this.getRowDimension()) ||\n            (nCols + column > this.getColumnDimension()))",
    "info" : "IfStatement[26125-26328]:IfStatement[26125-26328]"
  }, {
    "left" : "throw new MatrixIndexException(\n            \"invalid row or column index selection\");",
    "right" : "throw new MatrixIndexException(\n            \"invalid row or column index selection\");",
    "info" : "ThrowStatement[26243-26328]:ThrowStatement[26243-26328]"
  }, {
    "left" : "for (int i = 0; i < nRows; i++)",
    "right" : "for (int i = 0; i < nRows; i++)",
    "info" : "ForStatement[26356-26476]:ForStatement[26356-26476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26388-26476]:Block[26388-26476]"
  }, {
    "left" : "System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);",
    "right" : "System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);",
    "info" : "ExpressionStatement[26402-26466]:ExpressionStatement[26402-26466]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[26486-26496]:ExpressionStatement[26486-26496]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26782-26788]:Modifier[26782-26788]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[26789-26798]:SimpleType[26789-26798]"
  }, {
    "left" : "getRowMatrix",
    "right" : "getRowMatrix",
    "info" : "SimpleName[26799-26811]:SimpleName[26799-26811]"
  }, {
    "left" : "int row",
    "right" : "int row",
    "info" : "SingleVariableDeclaration[26812-26819]:SingleVariableDeclaration[26812-26819]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[26828-26848]:SimpleType[26828-26848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26849-27197]:Block[26849-27197]"
  }, {
    "left" : "if ( !isValidCoordinate( row, 0))",
    "right" : "if ( !isValidCoordinate( row, 0))",
    "info" : "IfStatement[26859-26972]:IfStatement[26859-26972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26893-26972]:Block[26893-26972]"
  }, {
    "left" : "throw new MatrixIndexException(\"illegal row argument\");",
    "right" : "throw new MatrixIndexException(\"illegal row argument\");",
    "info" : "ThrowStatement[26907-26962]:ThrowStatement[26907-26962]"
  }, {
    "left" : "final int ncols = this.getColumnDimension();",
    "right" : "final int ncols = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[26981-27025]:VariableDeclarationStatement[26981-27025]"
  }, {
    "left" : "final BigDecimal[][] out = new BigDecimal[1][ncols];",
    "right" : "final BigDecimal[][] out = new BigDecimal[1][ncols];",
    "info" : "VariableDeclarationStatement[27034-27086]:VariableDeclarationStatement[27034-27086]"
  }, {
    "left" : "System.arraycopy(data[row], 0, out[0], 0, ncols);",
    "right" : "System.arraycopy(data[row], 0, out[0], 0, ncols);",
    "info" : "ExpressionStatement[27096-27145]:ExpressionStatement[27096-27145]"
  }, {
    "left" : "return new BigMatrixImpl(out, false);",
    "right" : "return new BigMatrixImpl(out, false);",
    "info" : "ReturnStatement[27154-27191]:ReturnStatement[27154-27191]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27502-27508]:Modifier[27502-27508]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[27509-27518]:SimpleType[27509-27518]"
  }, {
    "left" : "getColumnMatrix",
    "right" : "getColumnMatrix",
    "info" : "SimpleName[27519-27534]:SimpleName[27519-27534]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[27535-27545]:SingleVariableDeclaration[27535-27545]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[27554-27574]:SimpleType[27554-27574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27575-27971]:Block[27575-27971]"
  }, {
    "left" : "if ( !isValidCoordinate( 0, column))",
    "right" : "if ( !isValidCoordinate( 0, column))",
    "info" : "IfStatement[27585-27704]:IfStatement[27585-27704]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27622-27704]:Block[27622-27704]"
  }, {
    "left" : "throw new MatrixIndexException(\"illegal column argument\");",
    "right" : "throw new MatrixIndexException(\"illegal column argument\");",
    "info" : "ThrowStatement[27636-27694]:ThrowStatement[27636-27694]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[27713-27754]:VariableDeclarationStatement[27713-27754]"
  }, {
    "left" : "final BigDecimal[][] out = new BigDecimal[nRows][1];",
    "right" : "final BigDecimal[][] out = new BigDecimal[nRows][1];",
    "info" : "VariableDeclarationStatement[27763-27815]:VariableDeclarationStatement[27763-27815]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[27825-27919]:ForStatement[27825-27919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27863-27919]:Block[27863-27919]"
  }, {
    "left" : "out[row][0] = data[row][column];",
    "right" : "out[row][0] = data[row][column];",
    "info" : "ExpressionStatement[27877-27909]:ExpressionStatement[27877-27909]"
  }, {
    "left" : "return new BigMatrixImpl(out, false);",
    "right" : "return new BigMatrixImpl(out, false);",
    "info" : "ReturnStatement[27928-27965]:ReturnStatement[27928-27965]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28379-28385]:Modifier[28379-28385]"
  }, {
    "left" : "BigDecimal[]",
    "right" : "BigDecimal[]",
    "info" : "ArrayType[28386-28398]:ArrayType[28386-28398]"
  }, {
    "left" : "getRow",
    "right" : "getRow",
    "info" : "SimpleName[28399-28405]:SimpleName[28399-28405]"
  }, {
    "left" : "int row",
    "right" : "int row",
    "info" : "SingleVariableDeclaration[28406-28413]:SingleVariableDeclaration[28406-28413]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[28422-28442]:SimpleType[28422-28442]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28443-28758]:Block[28443-28758]"
  }, {
    "left" : "if ( !isValidCoordinate( row, 0 ))",
    "right" : "if ( !isValidCoordinate( row, 0 ))",
    "info" : "IfStatement[28453-28568]:IfStatement[28453-28568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28489-28568]:Block[28489-28568]"
  }, {
    "left" : "throw new MatrixIndexException(\"illegal row argument\");",
    "right" : "throw new MatrixIndexException(\"illegal row argument\");",
    "info" : "ThrowStatement[28503-28558]:ThrowStatement[28503-28558]"
  }, {
    "left" : "final int ncols = this.getColumnDimension();",
    "right" : "final int ncols = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[28577-28621]:VariableDeclarationStatement[28577-28621]"
  }, {
    "left" : "final BigDecimal[] out = new BigDecimal[ncols];",
    "right" : "final BigDecimal[] out = new BigDecimal[ncols];",
    "info" : "VariableDeclarationStatement[28630-28677]:VariableDeclarationStatement[28630-28677]"
  }, {
    "left" : "System.arraycopy(data[row], 0, out, 0, ncols);",
    "right" : "System.arraycopy(data[row], 0, out, 0, ncols);",
    "info" : "ExpressionStatement[28686-28732]:ExpressionStatement[28686-28732]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[28741-28752]:ReturnStatement[28741-28752]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29191-29197]:Modifier[29191-29197]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[29198-29206]:ArrayType[29198-29206]"
  }, {
    "left" : "getRowAsDoubleArray",
    "right" : "getRowAsDoubleArray",
    "info" : "SimpleName[29207-29226]:SimpleName[29207-29226]"
  }, {
    "left" : "int row",
    "right" : "int row",
    "info" : "SingleVariableDeclaration[29227-29234]:SingleVariableDeclaration[29227-29234]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[29243-29263]:SimpleType[29243-29263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29264-29611]:Block[29264-29611]"
  }, {
    "left" : "if ( !isValidCoordinate( row, 0 ))",
    "right" : "if ( !isValidCoordinate( row, 0 ))",
    "info" : "IfStatement[29274-29389]:IfStatement[29274-29389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29310-29389]:Block[29310-29389]"
  }, {
    "left" : "throw new MatrixIndexException(\"illegal row argument\");",
    "right" : "throw new MatrixIndexException(\"illegal row argument\");",
    "info" : "ThrowStatement[29324-29379]:ThrowStatement[29324-29379]"
  }, {
    "left" : "final int ncols = this.getColumnDimension();",
    "right" : "final int ncols = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[29398-29442]:VariableDeclarationStatement[29398-29442]"
  }, {
    "left" : "final double[] out = new double[ncols];",
    "right" : "final double[] out = new double[ncols];",
    "info" : "VariableDeclarationStatement[29451-29490]:VariableDeclarationStatement[29451-29490]"
  }, {
    "left" : "for (int i=0;i<ncols;i++)",
    "right" : "for (int i=0;i<ncols;i++)",
    "info" : "ForStatement[29499-29585]:ForStatement[29499-29585]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29525-29585]:Block[29525-29585]"
  }, {
    "left" : "out[i] = data[row][i].doubleValue();",
    "right" : "out[i] = data[row][i].doubleValue();",
    "info" : "ExpressionStatement[29539-29575]:ExpressionStatement[29539-29575]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[29594-29605]:ReturnStatement[29594-29605]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30041-30047]:Modifier[30041-30047]"
  }, {
    "left" : "BigDecimal[]",
    "right" : "BigDecimal[]",
    "info" : "ArrayType[30048-30060]:ArrayType[30048-30060]"
  }, {
    "left" : "getColumn",
    "right" : "getColumn",
    "info" : "SimpleName[30061-30070]:SimpleName[30061-30070]"
  }, {
    "left" : "int col",
    "right" : "int col",
    "info" : "SingleVariableDeclaration[30071-30078]:SingleVariableDeclaration[30071-30078]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[30087-30107]:SimpleType[30087-30107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30108-30453]:Block[30108-30453]"
  }, {
    "left" : "if ( !isValidCoordinate(0, col))",
    "right" : "if ( !isValidCoordinate(0, col))",
    "info" : "IfStatement[30118-30234]:IfStatement[30118-30234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30152-30234]:Block[30152-30234]"
  }, {
    "left" : "throw new MatrixIndexException(\"illegal column argument\");",
    "right" : "throw new MatrixIndexException(\"illegal column argument\");",
    "info" : "ThrowStatement[30166-30224]:ThrowStatement[30166-30224]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[30243-30284]:VariableDeclarationStatement[30243-30284]"
  }, {
    "left" : "final BigDecimal[] out = new BigDecimal[nRows];",
    "right" : "final BigDecimal[] out = new BigDecimal[nRows];",
    "info" : "VariableDeclarationStatement[30293-30340]:VariableDeclarationStatement[30293-30340]"
  }, {
    "left" : "for (int i = 0; i < nRows; i++)",
    "right" : "for (int i = 0; i < nRows; i++)",
    "info" : "ForStatement[30349-30427]:ForStatement[30349-30427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30381-30427]:Block[30381-30427]"
  }, {
    "left" : "out[i] = data[i][col];",
    "right" : "out[i] = data[i][col];",
    "info" : "ExpressionStatement[30395-30417]:ExpressionStatement[30395-30417]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[30436-30447]:ReturnStatement[30436-30447]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[30906-30912]:Modifier[30906-30912]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[30913-30921]:ArrayType[30913-30921]"
  }, {
    "left" : "getColumnAsDoubleArray",
    "right" : "getColumnAsDoubleArray",
    "info" : "SimpleName[30922-30944]:SimpleName[30922-30944]"
  }, {
    "left" : "int col",
    "right" : "int col",
    "info" : "SingleVariableDeclaration[30945-30952]:SingleVariableDeclaration[30945-30952]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[30961-30981]:SimpleType[30961-30981]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30982-31329]:Block[30982-31329]"
  }, {
    "left" : "if ( !isValidCoordinate( 0, col ))",
    "right" : "if ( !isValidCoordinate( 0, col ))",
    "info" : "IfStatement[30992-31110]:IfStatement[30992-31110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31028-31110]:Block[31028-31110]"
  }, {
    "left" : "throw new MatrixIndexException(\"illegal column argument\");",
    "right" : "throw new MatrixIndexException(\"illegal column argument\");",
    "info" : "ThrowStatement[31042-31100]:ThrowStatement[31042-31100]"
  }, {
    "left" : "final int nrows = this.getRowDimension();",
    "right" : "final int nrows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[31119-31160]:VariableDeclarationStatement[31119-31160]"
  }, {
    "left" : "final double[] out = new double[nrows];",
    "right" : "final double[] out = new double[nrows];",
    "info" : "VariableDeclarationStatement[31169-31208]:VariableDeclarationStatement[31169-31208]"
  }, {
    "left" : "for (int i=0;i<nrows;i++)",
    "right" : "for (int i=0;i<nrows;i++)",
    "info" : "ForStatement[31217-31303]:ForStatement[31217-31303]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31243-31303]:Block[31243-31303]"
  }, {
    "left" : "out[i] = data[i][col].doubleValue();",
    "right" : "out[i] = data[i][col].doubleValue();",
    "info" : "ExpressionStatement[31257-31293]:ExpressionStatement[31257-31293]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[31312-31323]:ReturnStatement[31312-31323]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31933-31939]:Modifier[31933-31939]"
  }, {
    "left" : "BigDecimal",
    "right" : "BigDecimal",
    "info" : "SimpleType[31940-31950]:SimpleType[31940-31950]"
  }, {
    "left" : "getEntry",
    "right" : "getEntry",
    "info" : "SimpleName[31951-31959]:SimpleName[31951-31959]"
  }, {
    "left" : "int row",
    "right" : "int row",
    "info" : "SingleVariableDeclaration[31960-31967]:SingleVariableDeclaration[31960-31967]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[31969-31979]:SingleVariableDeclaration[31969-31979]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[31992-32012]:SimpleType[31992-32012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32013-32210]:Block[32013-32210]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[32023-32204]:TryStatement[32023-32204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32027-32076]:Block[32027-32076]"
  }, {
    "left" : "return data[row][column];",
    "right" : "return data[row][column];",
    "info" : "ReturnStatement[32041-32066]:ReturnStatement[32041-32066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32118-32204]:Block[32118-32204]"
  }, {
    "left" : "throw new MatrixIndexException(\"matrix entry does not exist\");",
    "right" : "throw new MatrixIndexException(\"matrix entry does not exist\");",
    "info" : "ThrowStatement[32132-32194]:ThrowStatement[32132-32194]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[32830-32836]:Modifier[32830-32836]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[32837-32843]:PrimitiveType[32837-32843]"
  }, {
    "left" : "getEntryAsDouble",
    "right" : "getEntryAsDouble",
    "info" : "SimpleName[32844-32860]:SimpleName[32844-32860]"
  }, {
    "left" : "int row",
    "right" : "int row",
    "info" : "SingleVariableDeclaration[32861-32868]:SingleVariableDeclaration[32861-32868]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[32870-32880]:SingleVariableDeclaration[32870-32880]"
  }, {
    "left" : "MatrixIndexException",
    "right" : "MatrixIndexException",
    "info" : "SimpleType[32889-32909]:SimpleType[32889-32909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32910-32968]:Block[32910-32968]"
  }, {
    "left" : "return getEntry(row,column).doubleValue();",
    "right" : "return getEntry(row,column).doubleValue();",
    "info" : "ReturnStatement[32920-32962]:ReturnStatement[32920-32962]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33070-33076]:Modifier[33070-33076]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[33077-33086]:SimpleType[33077-33086]"
  }, {
    "left" : "transpose",
    "right" : "transpose",
    "info" : "SimpleName[33087-33096]:SimpleName[33087-33096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33099-33554]:Block[33099-33554]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[33109-33150]:VariableDeclarationStatement[33109-33150]"
  }, {
    "left" : "final int nCols = this.getColumnDimension();",
    "right" : "final int nCols = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[33159-33203]:VariableDeclarationStatement[33159-33203]"
  }, {
    "left" : "final BigDecimal[][] outData = new BigDecimal[nCols][nRows];",
    "right" : "final BigDecimal[][] outData = new BigDecimal[nCols][nRows];",
    "info" : "VariableDeclarationStatement[33212-33272]:VariableDeclarationStatement[33212-33272]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[33281-33498]:ForStatement[33281-33498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33319-33498]:Block[33319-33498]"
  }, {
    "left" : "final BigDecimal[] dataRow = data[row];",
    "right" : "final BigDecimal[] dataRow = data[row];",
    "info" : "VariableDeclarationStatement[33333-33372]:VariableDeclarationStatement[33333-33372]"
  }, {
    "left" : "for (int col = 0; col < nCols; col++)",
    "right" : "for (int col = 0; col < nCols; col++)",
    "info" : "ForStatement[33385-33488]:ForStatement[33385-33488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33423-33488]:Block[33423-33488]"
  }, {
    "left" : "outData[col][row] = dataRow[col];",
    "right" : "outData[col][row] = dataRow[col];",
    "info" : "ExpressionStatement[33441-33474]:ExpressionStatement[33441-33474]"
  }, {
    "left" : "return new BigMatrixImpl(outData, false);",
    "right" : "return new BigMatrixImpl(outData, false);",
    "info" : "ReturnStatement[33507-33548]:ReturnStatement[33507-33548]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33746-33752]:Modifier[33746-33752]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[33753-33762]:SimpleType[33753-33762]"
  }, {
    "left" : "inverse",
    "right" : "inverse",
    "info" : "SimpleName[33763-33770]:SimpleName[33763-33770]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[33780-33802]:SimpleType[33780-33802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33803-33888]:Block[33803-33888]"
  }, {
    "left" : "return solve(MatrixUtils.createBigIdentityMatrix(getRowDimension()));",
    "right" : "return solve(MatrixUtils.createBigIdentityMatrix(getRowDimension()));",
    "info" : "ReturnStatement[33813-33882]:ReturnStatement[33813-33882]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34057-34063]:Modifier[34057-34063]"
  }, {
    "left" : "BigDecimal",
    "right" : "BigDecimal",
    "info" : "SimpleType[34064-34074]:SimpleType[34064-34074]"
  }, {
    "left" : "getDeterminant",
    "right" : "getDeterminant",
    "info" : "SimpleName[34075-34089]:SimpleName[34075-34089]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[34099-34121]:SimpleType[34099-34121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34122-34598]:Block[34122-34598]"
  }, {
    "left" : "if (!isSquare())",
    "right" : "if (!isSquare())",
    "info" : "IfStatement[34132-34230]:IfStatement[34132-34230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34149-34230]:Block[34149-34230]"
  }, {
    "left" : "throw new InvalidMatrixException(\"matrix is not square\");",
    "right" : "throw new InvalidMatrixException(\"matrix is not square\");",
    "info" : "ThrowStatement[34163-34220]:ThrowStatement[34163-34220]"
  }, {
    "left" : "if (isSingular())",
    "right" : "if (isSingular())",
    "info" : "IfStatement[34239-34592]:IfStatement[34239-34592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34257-34363]:Block[34257-34363]"
  }, {
    "left" : "return ZERO;",
    "right" : "return ZERO;",
    "info" : "ReturnStatement[34341-34353]:ReturnStatement[34341-34353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34369-34592]:Block[34369-34592]"
  }, {
    "left" : "BigDecimal det = (parity == 1) ? ONE : ONE.negate();",
    "right" : "BigDecimal det = (parity == 1) ? ONE : ONE.negate();",
    "info" : "VariableDeclarationStatement[34383-34435]:VariableDeclarationStatement[34383-34435]"
  }, {
    "left" : "for (int i = 0; i < this.getRowDimension(); i++)",
    "right" : "for (int i = 0; i < this.getRowDimension(); i++)",
    "info" : "ForStatement[34448-34558]:ForStatement[34448-34558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34497-34558]:Block[34497-34558]"
  }, {
    "left" : "det = det.multiply(lu[i][i]);",
    "right" : "det = det.multiply(lu[i][i]);",
    "info" : "ExpressionStatement[34515-34544]:ExpressionStatement[34515-34544]"
  }, {
    "left" : "return det;",
    "right" : "return det;",
    "info" : "ReturnStatement[34571-34582]:ReturnStatement[34571-34582]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34734-34740]:Modifier[34734-34740]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[34741-34748]:PrimitiveType[34741-34748]"
  }, {
    "left" : "isSquare",
    "right" : "isSquare",
    "info" : "SimpleName[34749-34757]:SimpleName[34749-34757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34760-34837]:Block[34760-34837]"
  }, {
    "left" : "return (this.getColumnDimension() == this.getRowDimension());",
    "right" : "return (this.getColumnDimension() == this.getRowDimension());",
    "info" : "ReturnStatement[34770-34831]:ReturnStatement[34770-34831]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34943-34949]:Modifier[34943-34949]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[34950-34957]:PrimitiveType[34950-34957]"
  }, {
    "left" : "isSingular",
    "right" : "isSingular",
    "info" : "SimpleName[34958-34968]:SimpleName[34958-34968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34971-35313]:Block[34971-35313]"
  }, {
    "left" : "if (lu == null)",
    "right" : "if (lu == null)",
    "info" : "IfStatement[34981-35307]:IfStatement[34981-35307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34997-35180]:Block[34997-35180]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[35011-35170]:TryStatement[35011-35170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35015-35091]:Block[35015-35091]"
  }, {
    "left" : "luDecompose();",
    "right" : "luDecompose();",
    "info" : "ExpressionStatement[35033-35047]:ExpressionStatement[35033-35047]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[35064-35077]:ReturnStatement[35064-35077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35126-35170]:Block[35126-35170]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[35144-35156]:ReturnStatement[35144-35156]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35186-35307]:Block[35186-35307]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[35251-35264]:ReturnStatement[35251-35264]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35423-35429]:Modifier[35423-35429]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35430-35433]:PrimitiveType[35430-35433]"
  }, {
    "left" : "getRowDimension",
    "right" : "getRowDimension",
    "info" : "SimpleName[35434-35449]:SimpleName[35434-35449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35452-35487]:Block[35452-35487]"
  }, {
    "left" : "return data.length;",
    "right" : "return data.length;",
    "info" : "ReturnStatement[35462-35481]:ReturnStatement[35462-35481]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35603-35609]:Modifier[35603-35609]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[35610-35613]:PrimitiveType[35610-35613]"
  }, {
    "left" : "getColumnDimension",
    "right" : "getColumnDimension",
    "info" : "SimpleName[35614-35632]:SimpleName[35614-35632]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35635-35673]:Block[35635-35673]"
  }, {
    "left" : "return data[0].length;",
    "right" : "return data[0].length;",
    "info" : "ReturnStatement[35645-35667]:ReturnStatement[35645-35667]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35961-35967]:Modifier[35961-35967]"
  }, {
    "left" : "BigDecimal",
    "right" : "BigDecimal",
    "info" : "SimpleType[35968-35978]:SimpleType[35968-35978]"
  }, {
    "left" : "getTrace",
    "right" : "getTrace",
    "info" : "SimpleName[35979-35987]:SimpleName[35979-35987]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[35997-36021]:SimpleType[35997-36021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36022-36311]:Block[36022-36311]"
  }, {
    "left" : "if (!isSquare())",
    "right" : "if (!isSquare())",
    "info" : "IfStatement[36032-36132]:IfStatement[36032-36132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36049-36132]:Block[36049-36132]"
  }, {
    "left" : "throw new IllegalArgumentException(\"matrix is not square\");",
    "right" : "throw new IllegalArgumentException(\"matrix is not square\");",
    "info" : "ThrowStatement[36063-36122]:ThrowStatement[36063-36122]"
  }, {
    "left" : "BigDecimal trace = data[0][0];",
    "right" : "BigDecimal trace = data[0][0];",
    "info" : "VariableDeclarationStatement[36141-36171]:VariableDeclarationStatement[36141-36171]"
  }, {
    "left" : "for (int i = 1; i < this.getRowDimension(); i++)",
    "right" : "for (int i = 1; i < this.getRowDimension(); i++)",
    "info" : "ForStatement[36180-36283]:ForStatement[36180-36283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36229-36283]:Block[36229-36283]"
  }, {
    "left" : "trace = trace.add(data[i][i]);",
    "right" : "trace = trace.add(data[i][i]);",
    "info" : "ExpressionStatement[36243-36273]:ExpressionStatement[36243-36273]"
  }, {
    "left" : "return trace;",
    "right" : "return trace;",
    "info" : "ReturnStatement[36292-36305]:ReturnStatement[36292-36305]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36554-36560]:Modifier[36554-36560]"
  }, {
    "left" : "BigDecimal[]",
    "right" : "BigDecimal[]",
    "info" : "ArrayType[36561-36573]:ArrayType[36561-36573]"
  }, {
    "left" : "operate",
    "right" : "operate",
    "info" : "SimpleName[36574-36581]:SimpleName[36574-36581]"
  }, {
    "left" : "BigDecimal[] v",
    "right" : "BigDecimal[] v",
    "info" : "SingleVariableDeclaration[36582-36596]:SingleVariableDeclaration[36582-36596]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[36605-36629]:SimpleType[36605-36629]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36630-37198]:Block[36630-37195]"
  }, {
    "left" : "if (v.length != this.getColumnDimension())",
    "right" : "if (v.length != this.getColumnDimension())",
    "info" : "IfStatement[36640-36769]:IfStatement[36640-36769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36683-36769]:Block[36683-36769]"
  }, {
    "left" : "throw new IllegalArgumentException(\"vector has wrong length\");",
    "right" : "throw new IllegalArgumentException(\"vector has wrong length\");",
    "info" : "ThrowStatement[36697-36759]:ThrowStatement[36697-36759]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[36778-36819]:VariableDeclarationStatement[36778-36819]"
  }, {
    "left" : "final int nCols = this.getColumnDimension();",
    "right" : "final int nCols = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[36828-36872]:VariableDeclarationStatement[36828-36872]"
  }, {
    "left" : "final BigDecimal[] out = new BigDecimal[v.length];",
    "right" : "final BigDecimal[] out = new BigDecimal[nRows];",
    "info" : "VariableDeclarationStatement[36881-36931]:VariableDeclarationStatement[36881-36928]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[36940-37172]:ForStatement[36937-37169]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36978-37172]:Block[36975-37169]"
  }, {
    "left" : "BigDecimal sum = ZERO;",
    "right" : "BigDecimal sum = ZERO;",
    "info" : "VariableDeclarationStatement[36992-37014]:VariableDeclarationStatement[36989-37011]"
  }, {
    "left" : "for (int i = 0; i < nCols; i++)",
    "right" : "for (int i = 0; i < nCols; i++)",
    "info" : "ForStatement[37027-37134]:ForStatement[37024-37131]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37059-37134]:Block[37056-37131]"
  }, {
    "left" : "sum = sum.add(data[row][i].multiply(v[i]));",
    "right" : "sum = sum.add(data[row][i].multiply(v[i]));",
    "info" : "ExpressionStatement[37077-37120]:ExpressionStatement[37074-37117]"
  }, {
    "left" : "out[row] = sum;",
    "right" : "out[row] = sum;",
    "info" : "ExpressionStatement[37147-37162]:ExpressionStatement[37144-37159]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[37181-37192]:ReturnStatement[37178-37189]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37441-37447]:Modifier[37438-37444]"
  }, {
    "left" : "BigDecimal[]",
    "right" : "BigDecimal[]",
    "info" : "ArrayType[37448-37460]:ArrayType[37445-37457]"
  }, {
    "left" : "operate",
    "right" : "operate",
    "info" : "SimpleName[37461-37468]:SimpleName[37458-37465]"
  }, {
    "left" : "double[] v",
    "right" : "double[] v",
    "info" : "SingleVariableDeclaration[37469-37479]:SingleVariableDeclaration[37466-37476]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[37488-37512]:SimpleType[37485-37509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37513-37704]:Block[37510-37701]"
  }, {
    "left" : "final BigDecimal bd[] = new BigDecimal[v.length];",
    "right" : "final BigDecimal bd[] = new BigDecimal[v.length];",
    "info" : "VariableDeclarationStatement[37523-37572]:VariableDeclarationStatement[37520-37569]"
  }, {
    "left" : "for (int i = 0; i < bd.length; i++)",
    "right" : "for (int i = 0; i < bd.length; i++)",
    "info" : "ForStatement[37581-37670]:ForStatement[37578-37667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37617-37670]:Block[37614-37667]"
  }, {
    "left" : "bd[i] = new BigDecimal(v[i]);",
    "right" : "bd[i] = new BigDecimal(v[i]);",
    "info" : "ExpressionStatement[37631-37660]:ExpressionStatement[37628-37657]"
  }, {
    "left" : "return operate(bd);",
    "right" : "return operate(bd);",
    "info" : "ReturnStatement[37679-37698]:ReturnStatement[37676-37695]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37968-37974]:Modifier[37965-37971]"
  }, {
    "left" : "BigDecimal[]",
    "right" : "BigDecimal[]",
    "info" : "ArrayType[37975-37987]:ArrayType[37972-37984]"
  }, {
    "left" : "preMultiply",
    "right" : "preMultiply",
    "info" : "SimpleName[37988-37999]:SimpleName[37985-37996]"
  }, {
    "left" : "BigDecimal[] v",
    "right" : "BigDecimal[] v",
    "info" : "SingleVariableDeclaration[38000-38014]:SingleVariableDeclaration[37997-38011]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[38023-38047]:SimpleType[38020-38044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38048-38593]:Block[38045-38590]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[38058-38099]:VariableDeclarationStatement[38055-38096]"
  }, {
    "left" : "if (v.length != nRows)",
    "right" : "if (v.length != nRows)",
    "info" : "IfStatement[38108-38217]:IfStatement[38105-38214]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38131-38217]:Block[38128-38214]"
  }, {
    "left" : "throw new IllegalArgumentException(\"vector has wrong length\");",
    "right" : "throw new IllegalArgumentException(\"vector has wrong length\");",
    "info" : "ThrowStatement[38145-38207]:ThrowStatement[38142-38204]"
  }, {
    "left" : "final int nCols = this.getColumnDimension();",
    "right" : "final int nCols = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[38226-38270]:VariableDeclarationStatement[38223-38267]"
  }, {
    "left" : "final BigDecimal[] out = new BigDecimal[nCols];",
    "right" : "final BigDecimal[] out = new BigDecimal[nCols];",
    "info" : "VariableDeclarationStatement[38279-38326]:VariableDeclarationStatement[38276-38323]"
  }, {
    "left" : "for (int col = 0; col < nCols; col++)",
    "right" : "for (int col = 0; col < nCols; col++)",
    "info" : "ForStatement[38335-38567]:ForStatement[38332-38564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38373-38567]:Block[38370-38564]"
  }, {
    "left" : "BigDecimal sum = ZERO;",
    "right" : "BigDecimal sum = ZERO;",
    "info" : "VariableDeclarationStatement[38387-38409]:VariableDeclarationStatement[38384-38406]"
  }, {
    "left" : "for (int i = 0; i < nRows; i++)",
    "right" : "for (int i = 0; i < nRows; i++)",
    "info" : "ForStatement[38422-38529]:ForStatement[38419-38526]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38454-38529]:Block[38451-38526]"
  }, {
    "left" : "sum = sum.add(data[i][col].multiply(v[i]));",
    "right" : "sum = sum.add(data[i][col].multiply(v[i]));",
    "info" : "ExpressionStatement[38472-38515]:ExpressionStatement[38469-38512]"
  }, {
    "left" : "out[col] = sum;",
    "right" : "out[col] = sum;",
    "info" : "ExpressionStatement[38542-38557]:ExpressionStatement[38539-38554]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[38576-38587]:ReturnStatement[38573-38584]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39069-39075]:Modifier[39066-39072]"
  }, {
    "left" : "BigDecimal[]",
    "right" : "BigDecimal[]",
    "info" : "ArrayType[39076-39088]:ArrayType[39073-39085]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[39089-39094]:SimpleName[39086-39091]"
  }, {
    "left" : "BigDecimal[] b",
    "right" : "BigDecimal[] b",
    "info" : "SingleVariableDeclaration[39095-39109]:SingleVariableDeclaration[39092-39106]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[39118-39142]:SimpleType[39115-39139]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[39144-39166]:SimpleType[39141-39163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39167-39671]:Block[39164-39668]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[39177-39218]:VariableDeclarationStatement[39174-39215]"
  }, {
    "left" : "if (b.length != nRows)",
    "right" : "if (b.length != nRows)",
    "info" : "IfStatement[39227-39345]:IfStatement[39224-39342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39250-39345]:Block[39247-39342]"
  }, {
    "left" : "throw new IllegalArgumentException(\"constant vector has wrong length\");",
    "right" : "throw new IllegalArgumentException(\"constant vector has wrong length\");",
    "info" : "ThrowStatement[39264-39335]:ThrowStatement[39261-39332]"
  }, {
    "left" : "final BigMatrix bMatrix = new BigMatrixImpl(b);",
    "right" : "final BigMatrix bMatrix = new BigMatrixImpl(b);",
    "info" : "VariableDeclarationStatement[39354-39401]:VariableDeclarationStatement[39351-39398]"
  }, {
    "left" : "final BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();",
    "right" : "final BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();",
    "info" : "VariableDeclarationStatement[39410-39490]:VariableDeclarationStatement[39407-39487]"
  }, {
    "left" : "final BigDecimal[] out = new BigDecimal[nRows];",
    "right" : "final BigDecimal[] out = new BigDecimal[nRows];",
    "info" : "VariableDeclarationStatement[39499-39546]:VariableDeclarationStatement[39496-39543]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[39555-39645]:ForStatement[39552-39642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39593-39645]:Block[39590-39642]"
  }, {
    "left" : "out[row] = solution[row][0];",
    "right" : "out[row] = solution[row][0];",
    "info" : "ExpressionStatement[39607-39635]:ExpressionStatement[39604-39632]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[39654-39665]:ReturnStatement[39651-39662]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40147-40153]:Modifier[40144-40150]"
  }, {
    "left" : "BigDecimal[]",
    "right" : "BigDecimal[]",
    "info" : "ArrayType[40154-40166]:ArrayType[40151-40163]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[40167-40172]:SimpleName[40164-40169]"
  }, {
    "left" : "double[] b",
    "right" : "double[] b",
    "info" : "SingleVariableDeclaration[40173-40183]:SingleVariableDeclaration[40170-40180]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[40192-40216]:SimpleType[40189-40213]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[40218-40240]:SimpleType[40215-40237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40241-40430]:Block[40238-40427]"
  }, {
    "left" : "final BigDecimal bd[] = new BigDecimal[b.length];",
    "right" : "final BigDecimal bd[] = new BigDecimal[b.length];",
    "info" : "VariableDeclarationStatement[40251-40300]:VariableDeclarationStatement[40248-40297]"
  }, {
    "left" : "for (int i = 0; i < bd.length; i++)",
    "right" : "for (int i = 0; i < bd.length; i++)",
    "info" : "ForStatement[40309-40398]:ForStatement[40306-40395]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40345-40398]:Block[40342-40395]"
  }, {
    "left" : "bd[i] = new BigDecimal(b[i]);",
    "right" : "bd[i] = new BigDecimal(b[i]);",
    "info" : "ExpressionStatement[40359-40388]:ExpressionStatement[40356-40385]"
  }, {
    "left" : "return solve(bd);",
    "right" : "return solve(bd);",
    "info" : "ReturnStatement[40407-40424]:ReturnStatement[40404-40421]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[40926-40932]:Modifier[40923-40929]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[40933-40942]:SimpleType[40930-40939]"
  }, {
    "left" : "solve",
    "right" : "solve",
    "info" : "SimpleName[40943-40948]:SimpleName[40940-40945]"
  }, {
    "left" : "BigMatrix b",
    "right" : "BigMatrix b",
    "info" : "SingleVariableDeclaration[40949-40960]:SingleVariableDeclaration[40946-40957]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[40969-40993]:SimpleType[40966-40990]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[40995-41017]:SimpleType[40992-41014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41019-43014]:Block[41016-43011]"
  }, {
    "left" : "if (b.getRowDimension() != this.getRowDimension())",
    "right" : "if (b.getRowDimension() != this.getRowDimension())",
    "info" : "IfStatement[41029-41166]:IfStatement[41026-41163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41080-41166]:Block[41077-41163]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Incorrect row dimension\");",
    "right" : "throw new IllegalArgumentException(\"Incorrect row dimension\");",
    "info" : "ThrowStatement[41094-41156]:ThrowStatement[41091-41153]"
  }, {
    "left" : "if (!this.isSquare())",
    "right" : "if (!this.isSquare())",
    "info" : "IfStatement[41175-41290]:IfStatement[41172-41287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41197-41290]:Block[41194-41287]"
  }, {
    "left" : "throw new InvalidMatrixException(\"coefficient matrix is not square\");",
    "right" : "throw new InvalidMatrixException(\"coefficient matrix is not square\");",
    "info" : "ThrowStatement[41211-41280]:ThrowStatement[41208-41277]"
  }, {
    "left" : "if (this.isSingular())",
    "right" : "if (this.isSingular())",
    "info" : "IfStatement[41299-41436]:IfStatement[41296-41433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41322-41436]:Block[41319-41433]"
  }, {
    "left" : "throw new InvalidMatrixException(\"Matrix is singular.\");",
    "right" : "throw new InvalidMatrixException(\"Matrix is singular.\");",
    "info" : "ThrowStatement[41370-41426]:ThrowStatement[41367-41423]"
  }, {
    "left" : "final int nCol = this.getColumnDimension();",
    "right" : "final int nCol = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[41454-41497]:VariableDeclarationStatement[41451-41494]"
  }, {
    "left" : "final int nColB = b.getColumnDimension();",
    "right" : "final int nColB = b.getColumnDimension();",
    "info" : "VariableDeclarationStatement[41506-41547]:VariableDeclarationStatement[41503-41544]"
  }, {
    "left" : "final int nRowB = b.getRowDimension();",
    "right" : "final int nRowB = b.getRowDimension();",
    "info" : "VariableDeclarationStatement[41556-41594]:VariableDeclarationStatement[41553-41591]"
  }, {
    "left" : "final BigDecimal[][] bp = new BigDecimal[nRowB][nColB];",
    "right" : "final BigDecimal[][] bp = new BigDecimal[nRowB][nColB];",
    "info" : "VariableDeclarationStatement[41647-41702]:VariableDeclarationStatement[41644-41699]"
  }, {
    "left" : "for (int row = 0; row < nRowB; row++)",
    "right" : "for (int row = 0; row < nRowB; row++)",
    "info" : "ForStatement[41711-41938]:ForStatement[41708-41935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41749-41938]:Block[41746-41935]"
  }, {
    "left" : "final BigDecimal[] bpRow = bp[row];",
    "right" : "final BigDecimal[] bpRow = bp[row];",
    "info" : "VariableDeclarationStatement[41763-41798]:VariableDeclarationStatement[41760-41795]"
  }, {
    "left" : "for (int col = 0; col < nColB; col++)",
    "right" : "for (int col = 0; col < nColB; col++)",
    "info" : "ForStatement[41811-41928]:ForStatement[41808-41925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41849-41928]:Block[41846-41925]"
  }, {
    "left" : "bpRow[col] = b.getEntry(permutation[row], col);",
    "right" : "bpRow[col] = b.getEntry(permutation[row], col);",
    "info" : "ExpressionStatement[41867-41914]:ExpressionStatement[41864-41911]"
  }, {
    "left" : "for (int col = 0; col < nCol; col++)",
    "right" : "for (int col = 0; col < nCol; col++)",
    "info" : "ForStatement[41980-42334]:ForStatement[41977-42331]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42017-42334]:Block[42014-42331]"
  }, {
    "left" : "for (int i = col + 1; i < nCol; i++)",
    "right" : "for (int i = col + 1; i < nCol; i++)",
    "info" : "ForStatement[42031-42324]:ForStatement[42028-42321]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42068-42324]:Block[42065-42321]"
  }, {
    "left" : "final BigDecimal[] bpI = bp[i];",
    "right" : "final BigDecimal[] bpI = bp[i];",
    "info" : "VariableDeclarationStatement[42086-42117]:VariableDeclarationStatement[42083-42114]"
  }, {
    "left" : "final BigDecimal[] luI = lu[i];",
    "right" : "final BigDecimal[] luI = lu[i];",
    "info" : "VariableDeclarationStatement[42134-42165]:VariableDeclarationStatement[42131-42162]"
  }, {
    "left" : "for (int j = 0; j < nColB; j++)",
    "right" : "for (int j = 0; j < nColB; j++)",
    "info" : "ForStatement[42182-42310]:ForStatement[42179-42307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42214-42310]:Block[42211-42307]"
  }, {
    "left" : "bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));",
    "right" : "bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));",
    "info" : "ExpressionStatement[42236-42292]:ExpressionStatement[42233-42289]"
  }, {
    "left" : "for (int col = nCol - 1; col >= 0; col--)",
    "right" : "for (int col = nCol - 1; col >= 0; col--)",
    "info" : "ForStatement[42376-42961]:ForStatement[42373-42958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42418-42961]:Block[42415-42958]"
  }, {
    "left" : "final BigDecimal[] bpCol = bp[col];",
    "right" : "final BigDecimal[] bpCol = bp[col];",
    "info" : "VariableDeclarationStatement[42432-42467]:VariableDeclarationStatement[42429-42464]"
  }, {
    "left" : "final BigDecimal luDiag = lu[col][col];",
    "right" : "final BigDecimal luDiag = lu[col][col];",
    "info" : "VariableDeclarationStatement[42480-42519]:VariableDeclarationStatement[42477-42516]"
  }, {
    "left" : "for (int j = 0; j < nColB; j++)",
    "right" : "for (int j = 0; j < nColB; j++)",
    "info" : "ForStatement[42532-42652]:ForStatement[42529-42649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42564-42652]:Block[42561-42649]"
  }, {
    "left" : "bpCol[j] = bpCol[j].divide(luDiag, scale, roundingMode);",
    "right" : "bpCol[j] = bpCol[j].divide(luDiag, scale, roundingMode);",
    "info" : "ExpressionStatement[42582-42638]:ExpressionStatement[42579-42635]"
  }, {
    "left" : "for (int i = 0; i < col; i++)",
    "right" : "for (int i = 0; i < col; i++)",
    "info" : "ForStatement[42665-42951]:ForStatement[42662-42948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42695-42951]:Block[42692-42948]"
  }, {
    "left" : "final BigDecimal[] bpI = bp[i];",
    "right" : "final BigDecimal[] bpI = bp[i];",
    "info" : "VariableDeclarationStatement[42713-42744]:VariableDeclarationStatement[42710-42741]"
  }, {
    "left" : "final BigDecimal[] luI = lu[i];",
    "right" : "final BigDecimal[] luI = lu[i];",
    "info" : "VariableDeclarationStatement[42761-42792]:VariableDeclarationStatement[42758-42789]"
  }, {
    "left" : "for (int j = 0; j < nColB; j++)",
    "right" : "for (int j = 0; j < nColB; j++)",
    "info" : "ForStatement[42809-42937]:ForStatement[42806-42934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42841-42937]:Block[42838-42934]"
  }, {
    "left" : "bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));",
    "right" : "bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));",
    "info" : "ExpressionStatement[42863-42919]:ExpressionStatement[42860-42916]"
  }, {
    "left" : "return new BigMatrixImpl(bp, false);",
    "right" : "return new BigMatrixImpl(bp, false);",
    "info" : "ReturnStatement[42971-43007]:ReturnStatement[42968-43004]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[43909-43915]:Modifier[43906-43912]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[43916-43920]:PrimitiveType[43913-43917]"
  }, {
    "left" : "luDecompose",
    "right" : "luDecompose",
    "info" : "SimpleName[43921-43932]:SimpleName[43918-43929]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[43942-43964]:SimpleType[43939-43961]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43965-46701]:Block[43962-46698]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[43984-44025]:VariableDeclarationStatement[43981-44022]"
  }, {
    "left" : "final int nCols = this.getColumnDimension();",
    "right" : "final int nCols = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[44034-44078]:VariableDeclarationStatement[44031-44075]"
  }, {
    "left" : "if (nRows != nCols)",
    "right" : "if (nRows != nCols)",
    "info" : "IfStatement[44087-44220]:IfStatement[44084-44217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44107-44220]:Block[44104-44217]"
  }, {
    "left" : "throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");",
    "right" : "throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");",
    "info" : "ThrowStatement[44121-44210]:ThrowStatement[44118-44207]"
  }, {
    "left" : "lu = this.getData();",
    "right" : "lu = this.getData();",
    "info" : "ExpressionStatement[44229-44249]:ExpressionStatement[44226-44246]"
  }, {
    "left" : "permutation = new int[nRows];",
    "right" : "permutation = new int[nRows];",
    "info" : "ExpressionStatement[44318-44347]:ExpressionStatement[44315-44344]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[44356-44441]:ForStatement[44353-44438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44394-44441]:Block[44391-44438]"
  }, {
    "left" : "permutation[row] = row;",
    "right" : "permutation[row] = row;",
    "info" : "ExpressionStatement[44408-44431]:ExpressionStatement[44405-44428]"
  }, {
    "left" : "parity = 1;",
    "right" : "parity = 1;",
    "info" : "ExpressionStatement[44450-44461]:ExpressionStatement[44447-44458]"
  }, {
    "left" : "for (int col = 0; col < nCols; col++)",
    "right" : "for (int col = 0; col < nCols; col++)",
    "info" : "ForStatement[44508-46686]:ForStatement[44505-46683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44546-46686]:Block[44543-46683]"
  }, {
    "left" : "BigDecimal sum = ZERO;",
    "right" : "BigDecimal sum = ZERO;",
    "info" : "VariableDeclarationStatement[44573-44595]:VariableDeclarationStatement[44570-44592]"
  }, {
    "left" : "for (int row = 0; row < col; row++)",
    "right" : "for (int row = 0; row < col; row++)",
    "info" : "ForStatement[44642-44950]:ForStatement[44639-44947]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44678-44950]:Block[44675-44947]"
  }, {
    "left" : "final BigDecimal[] luRow = lu[row];",
    "right" : "final BigDecimal[] luRow = lu[row];",
    "info" : "VariableDeclarationStatement[44696-44731]:VariableDeclarationStatement[44693-44728]"
  }, {
    "left" : "sum = luRow[col];",
    "right" : "sum = luRow[col];",
    "info" : "ExpressionStatement[44748-44765]:ExpressionStatement[44745-44762]"
  }, {
    "left" : "for (int i = 0; i < row; i++)",
    "right" : "for (int i = 0; i < row; i++)",
    "info" : "ForStatement[44782-44902]:ForStatement[44779-44899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44812-44902]:Block[44809-44899]"
  }, {
    "left" : "sum = sum.subtract(luRow[i].multiply(lu[i][col]));",
    "right" : "sum = sum.subtract(luRow[i].multiply(lu[i][col]));",
    "info" : "ExpressionStatement[44834-44884]:ExpressionStatement[44831-44881]"
  }, {
    "left" : "luRow[col] = sum;",
    "right" : "luRow[col] = sum;",
    "info" : "ExpressionStatement[44919-44936]:ExpressionStatement[44916-44933]"
  }, {
    "left" : "int max = col;",
    "right" : "int max = col;",
    "info" : "VariableDeclarationStatement[44997-45011]:VariableDeclarationStatement[44994-45008]"
  }, {
    "left" : "BigDecimal largest = ZERO;",
    "right" : "BigDecimal largest = ZERO;",
    "info" : "VariableDeclarationStatement[45043-45069]:VariableDeclarationStatement[45040-45066]"
  }, {
    "left" : "for (int row = col; row < nRows; row++)",
    "right" : "for (int row = col; row < nRows; row++)",
    "info" : "ForStatement[45082-45610]:ForStatement[45079-45607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45122-45610]:Block[45119-45607]"
  }, {
    "left" : "final BigDecimal[] luRow = lu[row];",
    "right" : "final BigDecimal[] luRow = lu[row];",
    "info" : "VariableDeclarationStatement[45140-45175]:VariableDeclarationStatement[45137-45172]"
  }, {
    "left" : "sum = luRow[col];",
    "right" : "sum = luRow[col];",
    "info" : "ExpressionStatement[45192-45209]:ExpressionStatement[45189-45206]"
  }, {
    "left" : "for (int i = 0; i < col; i++)",
    "right" : "for (int i = 0; i < col; i++)",
    "info" : "ForStatement[45226-45346]:ForStatement[45223-45343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45256-45346]:Block[45253-45343]"
  }, {
    "left" : "sum = sum.subtract(luRow[i].multiply(lu[i][col]));",
    "right" : "sum = sum.subtract(luRow[i].multiply(lu[i][col]));",
    "info" : "ExpressionStatement[45278-45328]:ExpressionStatement[45275-45325]"
  }, {
    "left" : "luRow[col] = sum;",
    "right" : "luRow[col] = sum;",
    "info" : "ExpressionStatement[45363-45380]:ExpressionStatement[45360-45377]"
  }, {
    "left" : "if (sum.abs().compareTo(largest) == 1)",
    "right" : "if (sum.abs().compareTo(largest) == 1)",
    "info" : "IfStatement[45466-45596]:IfStatement[45463-45593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45505-45596]:Block[45502-45593]"
  }, {
    "left" : "largest = sum.abs();",
    "right" : "largest = sum.abs();",
    "info" : "ExpressionStatement[45527-45547]:ExpressionStatement[45524-45544]"
  }, {
    "left" : "max = row;",
    "right" : "max = row;",
    "info" : "ExpressionStatement[45568-45578]:ExpressionStatement[45565-45575]"
  }, {
    "left" : "if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0)",
    "right" : "if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0)",
    "info" : "IfStatement[45669-45833]:IfStatement[45666-45830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45719-45833]:Block[45716-45830]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[45737-45747]:ExpressionStatement[45734-45744]"
  }, {
    "left" : "throw new InvalidMatrixException(\"matrix is singular\");",
    "right" : "throw new InvalidMatrixException(\"matrix is singular\");",
    "info" : "ThrowStatement[45764-45819]:ThrowStatement[45761-45816]"
  }, {
    "left" : "if (max != col)",
    "right" : "if (max != col)",
    "info" : "IfStatement[45893-46325]:IfStatement[45890-46322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45909-46325]:Block[45906-46322]"
  }, {
    "left" : "BigDecimal tmp = ZERO;",
    "right" : "BigDecimal tmp = ZERO;",
    "info" : "VariableDeclarationStatement[45927-45949]:VariableDeclarationStatement[45924-45946]"
  }, {
    "left" : "for (int i = 0; i < nCols; i++)",
    "right" : "for (int i = 0; i < nCols; i++)",
    "info" : "ForStatement[45966-46138]:ForStatement[45963-46135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45998-46138]:Block[45995-46135]"
  }, {
    "left" : "tmp = lu[max][i];",
    "right" : "tmp = lu[max][i];",
    "info" : "ExpressionStatement[46020-46037]:ExpressionStatement[46017-46034]"
  }, {
    "left" : "lu[max][i] = lu[col][i];",
    "right" : "lu[max][i] = lu[col][i];",
    "info" : "ExpressionStatement[46058-46082]:ExpressionStatement[46055-46079]"
  }, {
    "left" : "lu[col][i] = tmp;",
    "right" : "lu[col][i] = tmp;",
    "info" : "ExpressionStatement[46103-46120]:ExpressionStatement[46100-46117]"
  }, {
    "left" : "int temp = permutation[max];",
    "right" : "int temp = permutation[max];",
    "info" : "VariableDeclarationStatement[46155-46183]:VariableDeclarationStatement[46152-46180]"
  }, {
    "left" : "permutation[max] = permutation[col];",
    "right" : "permutation[max] = permutation[col];",
    "info" : "ExpressionStatement[46200-46236]:ExpressionStatement[46197-46233]"
  }, {
    "left" : "permutation[col] = temp;",
    "right" : "permutation[col] = temp;",
    "info" : "ExpressionStatement[46253-46277]:ExpressionStatement[46250-46274]"
  }, {
    "left" : "parity = -parity;",
    "right" : "parity = -parity;",
    "info" : "ExpressionStatement[46294-46311]:ExpressionStatement[46291-46308]"
  }, {
    "left" : "final BigDecimal luDiag = lu[col][col];",
    "right" : "final BigDecimal luDiag = lu[col][col];",
    "info" : "VariableDeclarationStatement[46423-46462]:VariableDeclarationStatement[46420-46459]"
  }, {
    "left" : "for (int row = col + 1; row < nRows; row++)",
    "right" : "for (int row = col + 1; row < nRows; row++)",
    "info" : "ForStatement[46475-46663]:ForStatement[46472-46660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46519-46663]:Block[46516-46660]"
  }, {
    "left" : "final BigDecimal[] luRow = lu[row];",
    "right" : "final BigDecimal[] luRow = lu[row];",
    "info" : "VariableDeclarationStatement[46537-46572]:VariableDeclarationStatement[46534-46569]"
  }, {
    "left" : "luRow[col] = luRow[col].divide(luDiag, scale, roundingMode);",
    "right" : "luRow[col] = luRow[col].divide(luDiag, scale, roundingMode);",
    "info" : "ExpressionStatement[46589-46649]:ExpressionStatement[46586-46646]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46834-46840]:Modifier[46831-46837]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[46841-46847]:SimpleType[46838-46844]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[46848-46856]:SimpleName[46845-46853]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46859-47480]:Block[46856-47477]"
  }, {
    "left" : "StringBuffer res = new StringBuffer();",
    "right" : "StringBuffer res = new StringBuffer();",
    "info" : "VariableDeclarationStatement[46869-46907]:VariableDeclarationStatement[46866-46904]"
  }, {
    "left" : "res.append(\"BigMatrixImpl{\");",
    "right" : "res.append(\"BigMatrixImpl{\");",
    "info" : "ExpressionStatement[46916-46945]:ExpressionStatement[46913-46942]"
  }, {
    "left" : "if (data != null)",
    "right" : "if (data != null)",
    "info" : "IfStatement[46954-47418]:IfStatement[46951-47415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46972-47418]:Block[46969-47415]"
  }, {
    "left" : "for (int i = 0; i < data.length; i++)",
    "right" : "for (int i = 0; i < data.length; i++)",
    "info" : "ForStatement[46986-47407]:ForStatement[46983-47404]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47024-47407]:Block[47021-47404]"
  }, {
    "left" : "if (i > 0)",
    "right" : "if (i > 0)",
    "info" : "IfStatement[47042-47109]:IfStatement[47039-47106]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47053-47109]:Block[47050-47106]"
  }, {
    "left" : "res.append(\",\");",
    "right" : "res.append(\",\");",
    "info" : "ExpressionStatement[47075-47091]:ExpressionStatement[47072-47088]"
  }, {
    "left" : "res.append(\"{\");",
    "right" : "res.append(\"{\");",
    "info" : "ExpressionStatement[47126-47142]:ExpressionStatement[47123-47139]"
  }, {
    "left" : "for (int j = 0; j < data[0].length; j++)",
    "right" : "for (int j = 0; j < data[0].length; j++)",
    "info" : "ForStatement[47159-47359]:ForStatement[47156-47356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47200-47359]:Block[47197-47356]"
  }, {
    "left" : "if (j > 0)",
    "right" : "if (j > 0)",
    "info" : "IfStatement[47222-47297]:IfStatement[47219-47294]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47233-47297]:Block[47230-47294]"
  }, {
    "left" : "res.append(\",\");",
    "right" : "res.append(\",\");",
    "info" : "ExpressionStatement[47259-47275]:ExpressionStatement[47256-47272]"
  }, {
    "left" : "res.append(data[i][j]);",
    "right" : "res.append(data[i][j]);",
    "info" : "ExpressionStatement[47318-47341]:ExpressionStatement[47315-47338]"
  }, {
    "left" : "res.append(\"}\");",
    "right" : "res.append(\"}\");",
    "info" : "ExpressionStatement[47377-47393]:ExpressionStatement[47374-47390]"
  }, {
    "left" : "res.append(\"}\");",
    "right" : "res.append(\"}\");",
    "info" : "ExpressionStatement[47427-47443]:ExpressionStatement[47424-47440]"
  }, {
    "left" : "return res.toString();",
    "right" : "return res.toString();",
    "info" : "ReturnStatement[47452-47474]:ReturnStatement[47449-47471]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47864-47870]:Modifier[47861-47867]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47871-47878]:PrimitiveType[47868-47875]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[47879-47885]:SimpleName[47876-47882]"
  }, {
    "left" : "Object object",
    "right" : "Object object",
    "info" : "SingleVariableDeclaration[47886-47899]:SingleVariableDeclaration[47883-47896]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47901-48637]:Block[47898-48634]"
  }, {
    "left" : "if (object == this)",
    "right" : "if (object == this)",
    "info" : "IfStatement[47911-47968]:IfStatement[47908-47965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47932-47968]:Block[47929-47965]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[47946-47958]:ReturnStatement[47943-47955]"
  }, {
    "left" : "if (object instanceof BigMatrixImpl == false)",
    "right" : "if (object instanceof BigMatrixImpl == false)",
    "info" : "IfStatement[47977-48060]:IfStatement[47974-48057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48023-48060]:Block[48020-48057]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[48037-48050]:ReturnStatement[48034-48047]"
  }, {
    "left" : "final BigMatrix m = (BigMatrix) object;",
    "right" : "final BigMatrix m = (BigMatrix) object;",
    "info" : "VariableDeclarationStatement[48069-48108]:VariableDeclarationStatement[48066-48105]"
  }, {
    "left" : "final int nRows = getRowDimension();",
    "right" : "final int nRows = getRowDimension();",
    "info" : "VariableDeclarationStatement[48117-48153]:VariableDeclarationStatement[48114-48150]"
  }, {
    "left" : "final int nCols = getColumnDimension();",
    "right" : "final int nCols = getColumnDimension();",
    "info" : "VariableDeclarationStatement[48162-48201]:VariableDeclarationStatement[48159-48198]"
  }, {
    "left" : "if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows)",
    "right" : "if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows)",
    "info" : "IfStatement[48210-48316]:IfStatement[48207-48313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48279-48316]:Block[48276-48313]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[48293-48306]:ReturnStatement[48290-48303]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[48325-48610]:ForStatement[48322-48607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48363-48610]:Block[48360-48607]"
  }, {
    "left" : "final BigDecimal[] dataRow = data[row];",
    "right" : "final BigDecimal[] dataRow = data[row];",
    "info" : "VariableDeclarationStatement[48377-48416]:VariableDeclarationStatement[48374-48413]"
  }, {
    "left" : "for (int col = 0; col < nCols; col++)",
    "right" : "for (int col = 0; col < nCols; col++)",
    "info" : "ForStatement[48429-48600]:ForStatement[48426-48597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48467-48600]:Block[48464-48597]"
  }, {
    "left" : "if (!dataRow[col].equals(m.getEntry(row, col)))",
    "right" : "if (!dataRow[col].equals(m.getEntry(row, col)))",
    "info" : "IfStatement[48485-48586]:IfStatement[48482-48583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48533-48586]:Block[48530-48583]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[48555-48568]:ReturnStatement[48552-48565]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[48619-48631]:ReturnStatement[48616-48628]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48749-48755]:Modifier[48746-48752]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[48756-48759]:PrimitiveType[48753-48756]"
  }, {
    "left" : "hashCode",
    "right" : "hashCode",
    "info" : "SimpleName[48760-48768]:SimpleName[48757-48765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48771-49262]:Block[48768-49259]"
  }, {
    "left" : "int ret = 7;",
    "right" : "int ret = 7;",
    "info" : "VariableDeclarationStatement[48781-48793]:VariableDeclarationStatement[48778-48790]"
  }, {
    "left" : "final int nRows = getRowDimension();",
    "right" : "final int nRows = getRowDimension();",
    "info" : "VariableDeclarationStatement[48802-48838]:VariableDeclarationStatement[48799-48835]"
  }, {
    "left" : "final int nCols = getColumnDimension();",
    "right" : "final int nCols = getColumnDimension();",
    "info" : "VariableDeclarationStatement[48847-48886]:VariableDeclarationStatement[48844-48883]"
  }, {
    "left" : "ret = ret * 31 + nRows;",
    "right" : "ret = ret * 31 + nRows;",
    "info" : "ExpressionStatement[48895-48918]:ExpressionStatement[48892-48915]"
  }, {
    "left" : "ret = ret * 31 + nCols;",
    "right" : "ret = ret * 31 + nCols;",
    "info" : "ExpressionStatement[48927-48950]:ExpressionStatement[48924-48947]"
  }, {
    "left" : "for (int row = 0; row < nRows; row++)",
    "right" : "for (int row = 0; row < nRows; row++)",
    "info" : "ForStatement[48959-49233]:ForStatement[48956-49230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48997-49233]:Block[48994-49230]"
  }, {
    "left" : "final BigDecimal[] dataRow = data[row];",
    "right" : "final BigDecimal[] dataRow = data[row];",
    "info" : "VariableDeclarationStatement[49011-49050]:VariableDeclarationStatement[49008-49047]"
  }, {
    "left" : "for (int col = 0; col < nCols; col++)",
    "right" : "for (int col = 0; col < nCols; col++)",
    "info" : "ForStatement[49063-49223]:ForStatement[49060-49220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49101-49223]:Block[49098-49220]"
  }, {
    "left" : "ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * \n                dataRow[col].hashCode();",
    "right" : "ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * \n                dataRow[col].hashCode();",
    "info" : "ExpressionStatement[49119-49209]:ExpressionStatement[49116-49206]"
  }, {
    "left" : "return ret;",
    "right" : "return ret;",
    "info" : "ReturnStatement[49245-49256]:ReturnStatement[49242-49253]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[50693-50702]:Modifier[50690-50699]"
  }, {
    "left" : "BigMatrix",
    "right" : "BigMatrix",
    "info" : "SimpleType[50703-50712]:SimpleType[50700-50709]"
  }, {
    "left" : "getLUMatrix",
    "right" : "getLUMatrix",
    "info" : "SimpleName[50713-50724]:SimpleName[50710-50721]"
  }, {
    "left" : "InvalidMatrixException",
    "right" : "InvalidMatrixException",
    "info" : "SimpleType[50734-50756]:SimpleType[50731-50753]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50757-50865]:Block[50754-50862]"
  }, {
    "left" : "if (lu == null)",
    "right" : "if (lu == null)",
    "info" : "IfStatement[50767-50821]:IfStatement[50764-50818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50783-50821]:Block[50780-50818]"
  }, {
    "left" : "luDecompose();",
    "right" : "luDecompose();",
    "info" : "ExpressionStatement[50797-50811]:ExpressionStatement[50794-50808]"
  }, {
    "left" : "return new BigMatrixImpl(lu);",
    "right" : "return new BigMatrixImpl(lu);",
    "info" : "ReturnStatement[50830-50859]:ReturnStatement[50827-50856]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[51307-51316]:Modifier[51304-51313]"
  }, {
    "left" : "int[]",
    "right" : "int[]",
    "info" : "ArrayType[51317-51322]:ArrayType[51314-51319]"
  }, {
    "left" : "getPermutation",
    "right" : "getPermutation",
    "info" : "SimpleName[51323-51337]:SimpleName[51320-51334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51340-51492]:Block[51337-51489]"
  }, {
    "left" : "final int[] out = new int[permutation.length];",
    "right" : "final int[] out = new int[permutation.length];",
    "info" : "VariableDeclarationStatement[51350-51396]:VariableDeclarationStatement[51347-51393]"
  }, {
    "left" : "System.arraycopy(permutation, 0, out, 0, permutation.length);",
    "right" : "System.arraycopy(permutation, 0, out, 0, permutation.length);",
    "info" : "ExpressionStatement[51405-51466]:ExpressionStatement[51402-51463]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[51475-51486]:ReturnStatement[51472-51483]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[51687-51694]:Modifier[51684-51691]"
  }, {
    "left" : "BigDecimal[][]",
    "right" : "BigDecimal[][]",
    "info" : "ArrayType[51695-51709]:ArrayType[51692-51706]"
  }, {
    "left" : "copyOut",
    "right" : "copyOut",
    "info" : "SimpleName[51710-51717]:SimpleName[51707-51714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51720-52077]:Block[51717-52074]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[51730-51771]:VariableDeclarationStatement[51727-51768]"
  }, {
    "left" : "final BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];",
    "right" : "final BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];",
    "info" : "VariableDeclarationStatement[51780-51856]:VariableDeclarationStatement[51777-51853]"
  }, {
    "left" : "for (int i = 0; i < nRows; i++)",
    "right" : "for (int i = 0; i < nRows; i++)",
    "info" : "ForStatement[51939-52051]:ForStatement[51936-52048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51971-52051]:Block[51968-52048]"
  }, {
    "left" : "System.arraycopy(data[i], 0, out[i], 0, data[i].length);",
    "right" : "System.arraycopy(data[i], 0, out[i], 0, data[i].length);",
    "info" : "ExpressionStatement[51985-52041]:ExpressionStatement[51982-52038]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[52060-52071]:ReturnStatement[52057-52068]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52436-52443]:Modifier[52433-52440]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52444-52448]:PrimitiveType[52441-52445]"
  }, {
    "left" : "copyIn",
    "right" : "copyIn",
    "info" : "SimpleName[52449-52455]:SimpleName[52446-52452]"
  }, {
    "left" : "BigDecimal[][] in",
    "right" : "BigDecimal[][] in",
    "info" : "SingleVariableDeclaration[52456-52473]:SingleVariableDeclaration[52453-52470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52475-52512]:Block[52472-52509]"
  }, {
    "left" : "setSubMatrix(in,0,0);",
    "right" : "setSubMatrix(in,0,0);",
    "info" : "ExpressionStatement[52485-52506]:ExpressionStatement[52482-52503]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52637-52644]:Modifier[52634-52641]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[52645-52649]:PrimitiveType[52642-52646]"
  }, {
    "left" : "copyIn",
    "right" : "copyIn",
    "info" : "SimpleName[52650-52656]:SimpleName[52647-52653]"
  }, {
    "left" : "double[][] in",
    "right" : "double[][] in",
    "info" : "SingleVariableDeclaration[52657-52670]:SingleVariableDeclaration[52654-52667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52672-53071]:Block[52669-53068]"
  }, {
    "left" : "final int nRows = in.length;",
    "right" : "final int nRows = in.length;",
    "info" : "VariableDeclarationStatement[52682-52710]:VariableDeclarationStatement[52679-52707]"
  }, {
    "left" : "final int nCols = in[0].length;",
    "right" : "final int nCols = in[0].length;",
    "info" : "VariableDeclarationStatement[52719-52750]:VariableDeclarationStatement[52716-52747]"
  }, {
    "left" : "data = new BigDecimal[nRows][nCols];",
    "right" : "data = new BigDecimal[nRows][nCols];",
    "info" : "ExpressionStatement[52759-52795]:ExpressionStatement[52756-52792]"
  }, {
    "left" : "for (int i = 0; i < nRows; i++)",
    "right" : "for (int i = 0; i < nRows; i++)",
    "info" : "ForStatement[52804-53046]:ForStatement[52801-53043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52836-53046]:Block[52833-53043]"
  }, {
    "left" : "final BigDecimal[] dataI = data[i];",
    "right" : "final BigDecimal[] dataI = data[i];",
    "info" : "VariableDeclarationStatement[52850-52885]:VariableDeclarationStatement[52847-52882]"
  }, {
    "left" : "final double[] inI = in[i];",
    "right" : "final double[] inI = in[i];",
    "info" : "VariableDeclarationStatement[52898-52925]:VariableDeclarationStatement[52895-52922]"
  }, {
    "left" : "for (int j = 0; j < nCols; j++)",
    "right" : "for (int j = 0; j < nCols; j++)",
    "info" : "ForStatement[52938-53036]:ForStatement[52935-53033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52970-53036]:Block[52967-53033]"
  }, {
    "left" : "dataI[j] = new BigDecimal(inI[j]);",
    "right" : "dataI[j] = new BigDecimal(inI[j]);",
    "info" : "ExpressionStatement[52988-53022]:ExpressionStatement[52985-53019]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[53055-53065]:ExpressionStatement[53052-53062]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53229-53236]:Modifier[53226-53233]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[53237-53241]:PrimitiveType[53234-53238]"
  }, {
    "left" : "copyIn",
    "right" : "copyIn",
    "info" : "SimpleName[53242-53248]:SimpleName[53239-53245]"
  }, {
    "left" : "String[][] in",
    "right" : "String[][] in",
    "info" : "SingleVariableDeclaration[53249-53262]:SingleVariableDeclaration[53246-53259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53264-53663]:Block[53261-53660]"
  }, {
    "left" : "final int nRows = in.length;",
    "right" : "final int nRows = in.length;",
    "info" : "VariableDeclarationStatement[53274-53302]:VariableDeclarationStatement[53271-53299]"
  }, {
    "left" : "final int nCols = in[0].length;",
    "right" : "final int nCols = in[0].length;",
    "info" : "VariableDeclarationStatement[53311-53342]:VariableDeclarationStatement[53308-53339]"
  }, {
    "left" : "data = new BigDecimal[nRows][nCols];",
    "right" : "data = new BigDecimal[nRows][nCols];",
    "info" : "ExpressionStatement[53351-53387]:ExpressionStatement[53348-53384]"
  }, {
    "left" : "for (int i = 0; i < nRows; i++)",
    "right" : "for (int i = 0; i < nRows; i++)",
    "info" : "ForStatement[53396-53638]:ForStatement[53393-53635]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53428-53638]:Block[53425-53635]"
  }, {
    "left" : "final BigDecimal[] dataI = data[i];",
    "right" : "final BigDecimal[] dataI = data[i];",
    "info" : "VariableDeclarationStatement[53442-53477]:VariableDeclarationStatement[53439-53474]"
  }, {
    "left" : "final String[] inI = in[i];",
    "right" : "final String[] inI = in[i];",
    "info" : "VariableDeclarationStatement[53490-53517]:VariableDeclarationStatement[53487-53514]"
  }, {
    "left" : "for (int j = 0; j < nCols; j++)",
    "right" : "for (int j = 0; j < nCols; j++)",
    "info" : "ForStatement[53530-53628]:ForStatement[53527-53625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53562-53628]:Block[53559-53625]"
  }, {
    "left" : "dataI[j] = new BigDecimal(inI[j]);",
    "right" : "dataI[j] = new BigDecimal(inI[j]);",
    "info" : "ExpressionStatement[53580-53614]:ExpressionStatement[53577-53611]"
  }, {
    "left" : "lu = null;",
    "right" : "lu = null;",
    "info" : "ExpressionStatement[53647-53657]:ExpressionStatement[53644-53654]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53892-53899]:Modifier[53889-53896]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[53900-53907]:PrimitiveType[53897-53904]"
  }, {
    "left" : "isValidCoordinate",
    "right" : "isValidCoordinate",
    "info" : "SimpleName[53908-53925]:SimpleName[53905-53922]"
  }, {
    "left" : "int row",
    "right" : "int row",
    "info" : "SingleVariableDeclaration[53926-53933]:SingleVariableDeclaration[53923-53930]"
  }, {
    "left" : "int col",
    "right" : "int col",
    "info" : "SingleVariableDeclaration[53935-53942]:SingleVariableDeclaration[53932-53939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53944-54124]:Block[53941-54121]"
  }, {
    "left" : "final int nRows = this.getRowDimension();",
    "right" : "final int nRows = this.getRowDimension();",
    "info" : "VariableDeclarationStatement[53954-53995]:VariableDeclarationStatement[53951-53992]"
  }, {
    "left" : "final int nCols = this.getColumnDimension();",
    "right" : "final int nCols = this.getColumnDimension();",
    "info" : "VariableDeclarationStatement[54004-54048]:VariableDeclarationStatement[54001-54045]"
  }, {
    "left" : "return !(row < 0 || row >= nRows || col < 0 || col >= nCols);",
    "right" : "return !(row < 0 || row >= nRows || col < 0 || col >= nCols);",
    "info" : "ReturnStatement[54057-54118]:ReturnStatement[54054-54115]"
  } ]
}