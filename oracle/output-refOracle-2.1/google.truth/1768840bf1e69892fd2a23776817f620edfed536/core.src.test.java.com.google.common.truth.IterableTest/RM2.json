{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IterableTest",
      "right" : "IterableTest",
      "info" : "TypeDeclaration[1125-23909]:TypeDeclaration[1066-27200]"
    }, {
      "left" : "public void hasSize()",
      "right" : "public void hasSize()",
      "info" : "MethodDeclaration[1295-1384]:MethodDeclaration[1236-1325]"
    }, {
      "left" : "public void hasSizeZero()",
      "right" : "public void hasSizeZero()",
      "info" : "MethodDeclaration[1388-1474]:MethodDeclaration[1329-1415]"
    }, {
      "left" : "public void hasSizeFails()",
      "right" : "public void hasSizeFails()",
      "info" : "MethodDeclaration[1478-1741]:MethodDeclaration[1419-1682]"
    }, {
      "left" : "public void hasSizeNegative()",
      "right" : "public void hasSizeNegative()",
      "info" : "MethodDeclaration[1745-1925]:MethodDeclaration[1686-1866]"
    }, {
      "left" : "public void iterableContainsItem()",
      "right" : "public void iterableContainsItem()",
      "info" : "MethodDeclaration[1929-2024]:MethodDeclaration[1870-1963]"
    }, {
      "left" : "public void iterableContainsItemWithNull()",
      "right" : "public void iterableContainsItemWithNull()",
      "info" : "MethodDeclaration[2028-2137]:MethodDeclaration[1967-2074]"
    }, {
      "left" : "public void iterableContainsItemFailure()",
      "right" : "public void iterableContainsItemFailure()",
      "info" : "MethodDeclaration[2141-2402]:MethodDeclaration[2078-2337]"
    }, {
      "left" : "public void namedIterableContainsItemFailure()",
      "right" : "public void namedIterableContainsItemFailure()",
      "info" : "MethodDeclaration[2406-2699]:MethodDeclaration[2341-2632]"
    }, {
      "left" : "public void failureMessageIterableContainsItemFailure()",
      "right" : "public void failureMessageIterableContainsItemFailure()",
      "info" : "MethodDeclaration[2703-3016]:MethodDeclaration[2636-2947]"
    }, {
      "left" : "public void iterableDoesntHaveItem()",
      "right" : "public void iterableDoesntHaveItem()",
      "info" : "MethodDeclaration[3020-3126]:MethodDeclaration[2951-3055]"
    }, {
      "left" : "public void iterableDoesntHaveItemWithNull()",
      "right" : "public void iterableDoesntHaveItemWithNull()",
      "info" : "MethodDeclaration[3130-3244]:MethodDeclaration[3059-3171]"
    }, {
      "left" : "public void iterableDoesntHaveItemFailure()",
      "right" : "public void iterableDoesntHaveItemFailure()",
      "info" : "MethodDeclaration[3248-3521]:MethodDeclaration[3175-3446]"
    }, {
      "left" : "public void doesNotContainDuplicates()",
      "right" : "public void doesNotContainDuplicates()",
      "info" : "MethodDeclaration[3525-3635]:MethodDeclaration[3450-3558]"
    }, {
      "left" : "public void doesNotContainDuplicatesMixedTypes()",
      "right" : "public void doesNotContainDuplicatesMixedTypes()",
      "info" : "MethodDeclaration[3639-3873]:MethodDeclaration[3562-3684]"
    }, {
      "left" : "public void doesNotContainDuplicatesFailure()",
      "right" : "public void doesNotContainDuplicatesFailure()",
      "info" : "MethodDeclaration[3877-4173]:MethodDeclaration[3688-3982]"
    }, {
      "left" : "public void iterableContainsAnyOf()",
      "right" : "public void iterableContainsAnyOf()",
      "info" : "MethodDeclaration[4177-4281]:MethodDeclaration[3986-4088]"
    }, {
      "left" : "public void iterableContainsAnyOfWithNull()",
      "right" : "public void iterableContainsAnyOfWithNull()",
      "info" : "MethodDeclaration[4285-4403]:MethodDeclaration[4092-4208]"
    }, {
      "left" : "public void iterableContainsAnyOfWithNullInThirdAndFinalPosition()",
      "right" : "public void iterableContainsAnyOfWithNullInThirdAndFinalPosition()",
      "info" : "MethodDeclaration[4407-4561]:MethodDeclaration[4212-4364]"
    }, {
      "left" : "public void iterableContainsAnyOfFailure()",
      "right" : "public void iterableContainsAnyOfFailure()",
      "info" : "MethodDeclaration[4565-4854]:MethodDeclaration[4368-4655]"
    }, {
      "left" : "public void iterableContainsAnyOfWithOneShotIterable()",
      "right" : "public void iterableContainsAnyOfWithOneShotIterable()",
      "info" : "MethodDeclaration[4858-5240]:MethodDeclaration[4659-5048]"
    }, {
      "left" : "public void iterableContainsAllOfWithMany()",
      "right" : "public void iterableContainsAllOfWithMany()",
      "info" : "MethodDeclaration[5244-5356]:MethodDeclaration[5052-5162]"
    }, {
      "left" : "public void iterableContainsAllOfWithDuplicates()",
      "right" : "public void iterableContainsAllOfWithDuplicates()",
      "info" : "MethodDeclaration[5360-5484]:MethodDeclaration[5166-5288]"
    }, {
      "left" : "public void iterableContainsAllOfWithNull()",
      "right" : "public void iterableContainsAllOfWithNull()",
      "info" : "MethodDeclaration[5488-5616]:MethodDeclaration[5292-5418]"
    }, {
      "left" : "public void iterableContainsAllOfWithNullAtThirdAndFinalPosition()",
      "right" : "public void iterableContainsAllOfWithNullAtThirdAndFinalPosition()",
      "info" : "MethodDeclaration[5620-5764]:MethodDeclaration[5422-5564]"
    }, {
      "left" : "public void iterableContainsAllOfFailure()",
      "right" : "public void iterableContainsAllOfFailure()",
      "info" : "MethodDeclaration[5768-6089]:MethodDeclaration[5568-5887]"
    }, {
      "left" : "public void iterableContainsAllOfWithExtras()",
      "right" : "public void iterableContainsAllOfWithExtras()",
      "info" : "MethodDeclaration[6093-6447]:MethodDeclaration[5891-6243]"
    }, {
      "left" : "public void iterableContainsAllOfWithExtraCopiesOfOutOfOrder()",
      "right" : "public void iterableContainsAllOfWithExtraCopiesOfOutOfOrder()",
      "info" : "MethodDeclaration[6451-6822]:MethodDeclaration[6247-6616]"
    }, {
      "left" : "public void iterableContainsAllOfWithDuplicatesFailure()",
      "right" : "public void iterableContainsAllOfWithDuplicatesFailure()",
      "info" : "MethodDeclaration[6826-7231]:MethodDeclaration[6620-7023]"
    }, {
      "left" : "public void iterableContainsAllOfWithDuplicateMissingElements()",
      "right" : "public void iterableContainsAllOfWithDuplicateMissingElements()",
      "info" : "MethodDeclaration[7392-7754]:MethodDeclaration[7184-7544]"
    }, {
      "left" : "public void iterableContainsAllOfWithNullFailure()",
      "right" : "public void iterableContainsAllOfWithNullFailure()",
      "info" : "MethodDeclaration[7758-8152]:MethodDeclaration[7548-7940]"
    }, {
      "left" : "public void iterableContainsAllOfInOrder()",
      "right" : "public void iterableContainsAllOfInOrder()",
      "info" : "MethodDeclaration[8156-8280]:MethodDeclaration[7944-8066]"
    }, {
      "left" : "public void iterableContainsAllOfInOrderWithGaps()",
      "right" : "public void iterableContainsAllOfInOrderWithGaps()",
      "info" : "MethodDeclaration[8284-8914]:MethodDeclaration[8070-8686]"
    }, {
      "left" : "public void iterableContainsAllOfInOrderWithNull()",
      "right" : "public void iterableContainsAllOfInOrderWithNull()",
      "info" : "MethodDeclaration[8918-9133]:MethodDeclaration[8690-8901]"
    }, {
      "left" : "public void iterableContainsAllOfInOrderWithFailure()",
      "right" : "public void iterableContainsAllOfInOrderWithFailure()",
      "info" : "MethodDeclaration[9137-9485]:MethodDeclaration[8905-9251]"
    }, {
      "left" : "public void iterableContainsAllOfInOrderWithOneShotIterable()",
      "right" : "public void iterableContainsAllOfInOrderWithOneShotIterable()",
      "info" : "MethodDeclaration[9489-10063]:MethodDeclaration[9255-9827]"
    }, {
      "left" : "public Iterator<Object> iterator()",
      "right" : "public Iterator<Object> iterator()",
      "info" : "MethodDeclaration[9770-9867]:MethodDeclaration[9534-9631]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[9879-9986]:MethodDeclaration[9643-9750]"
    }, {
      "left" : "public void iterableContainsAllOfInOrderWithOneShotIterableWrongOrder()",
      "right" : "public void iterableContainsAllOfInOrderWithOneShotIterableWrongOrder()",
      "info" : "MethodDeclaration[10067-10796]:MethodDeclaration[9831-10567]"
    }, {
      "left" : "public void iterableContainsNoneOf()",
      "right" : "public void iterableContainsNoneOf()",
      "info" : "MethodDeclaration[10800-10909]:MethodDeclaration[10571-10678]"
    }, {
      "left" : "public void iterableContainsNoneOfFailure()",
      "right" : "public void iterableContainsNoneOfFailure()",
      "info" : "MethodDeclaration[10913-11253]:MethodDeclaration[10682-11020]"
    }, {
      "left" : "public void iterableContainsNoneOfFailureWithDuplicateInSubject()",
      "right" : "public void iterableContainsNoneOfFailureWithDuplicateInSubject()",
      "info" : "MethodDeclaration[11257-11625]:MethodDeclaration[11024-11390]"
    }, {
      "left" : "public void iterableContainsNoneOfFailureWithDuplicateInExpected()",
      "right" : "public void iterableContainsNoneOfFailureWithDuplicateInExpected()",
      "info" : "MethodDeclaration[11629-11998]:MethodDeclaration[11394-11761]"
    }, {
      "left" : "public void listContainsExactlyArray()",
      "right" : "public void iterableContainsExactlyArray()",
      "info" : "MethodDeclaration[12002-12272]:MethodDeclaration[11765-12039]"
    }, {
      "left" : "public void arrayContainsExactly()",
      "right" : "public void arrayContainsExactly()",
      "info" : "MethodDeclaration[12276-12471]:MethodDeclaration[12043-12238]"
    }, {
      "left" : "public void iterableContainsExactlyWithMany()",
      "right" : "public void iterableContainsExactlyWithMany()",
      "info" : "MethodDeclaration[12475-12594]:MethodDeclaration[12242-12359]"
    }, {
      "left" : "public void iterableContainsExactlyOutOfOrder()",
      "right" : "public void iterableContainsExactlyOutOfOrder()",
      "info" : "MethodDeclaration[12598-12725]:MethodDeclaration[12363-12488]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicates()",
      "right" : "public void iterableContainsExactlyWithDuplicates()",
      "info" : "MethodDeclaration[12729-12866]:MethodDeclaration[12492-12627]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicatesOutOfOrder()",
      "right" : "public void iterableContainsExactlyWithDuplicatesOutOfOrder()",
      "info" : "MethodDeclaration[12870-13017]:MethodDeclaration[12631-12776]"
    }, {
      "left" : "public void iterableContainsExactlyWithOnlyNull()",
      "right" : "public void iterableContainsExactlyWithOnlyNull()",
      "info" : "MethodDeclaration[13021-13185]:MethodDeclaration[12780-12942]"
    }, {
      "left" : "public void iterableContainsExactlyWithNullSecond()",
      "right" : "public void iterableContainsExactlyWithNullSecond()",
      "info" : "MethodDeclaration[13189-13314]:MethodDeclaration[12946-13069]"
    }, {
      "left" : "public void iterableContainsExactlyWithNullThird()",
      "right" : "public void iterableContainsExactlyWithNullThird()",
      "info" : "MethodDeclaration[13318-13448]:MethodDeclaration[13073-13201]"
    }, {
      "left" : "public void iterableContainsExactlyWithNull()",
      "right" : "public void iterableContainsExactlyWithNull()",
      "info" : "MethodDeclaration[13452-13577]:MethodDeclaration[13205-13328]"
    }, {
      "left" : "public void iterableContainsExactlyWithNullOutOfOrder()",
      "right" : "public void iterableContainsExactlyWithNullOutOfOrder()",
      "info" : "MethodDeclaration[13581-13726]:MethodDeclaration[13332-13475]"
    }, {
      "left" : "public void iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()",
      "right" : "public void iterableContainsExactlyWithElementsThatThrowWhenYouCallHashCode()",
      "info" : "MethodDeclaration[13730-14546]:MethodDeclaration[13479-14281]"
    }, {
      "left" : "HashCodeThrower",
      "right" : "HashCodeThrower",
      "info" : "TypeDeclaration[14550-14852]:TypeDeclaration[14285-14587]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[14593-14678]:MethodDeclaration[14328-14413]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[14684-14776]:MethodDeclaration[14419-14511]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[14782-14848]:MethodDeclaration[14517-14583]"
    }, {
      "left" : "public void iterableContainsExactlyElementsInErrorMessageIsOrdered()",
      "right" : "public void iterableContainsExactlyElementsInErrorMessageIsOrdered()",
      "info" : "MethodDeclaration[14856-15333]:MethodDeclaration[14591-15068]"
    }, {
      "left" : "public void iterableContainsExactlyMissingItemFailure()",
      "right" : "public void iterableContainsExactlyMissingItemFailure()",
      "info" : "MethodDeclaration[15337-15668]:MethodDeclaration[15072-15401]"
    }, {
      "left" : "public void iterableContainsExactlyUnexpectedItemFailure()",
      "right" : "public void iterableContainsExactlyUnexpectedItemFailure()",
      "info" : "MethodDeclaration[15672-16031]:MethodDeclaration[15405-15762]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()",
      "right" : "public void iterableContainsExactlyWithDuplicatesNotEnoughItemsFailure()",
      "info" : "MethodDeclaration[16035-16450]:MethodDeclaration[15766-16179]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicatesMissingItemFailure()",
      "right" : "public void iterableContainsExactlyWithDuplicatesMissingItemFailure()",
      "info" : "MethodDeclaration[16454-16875]:MethodDeclaration[16183-16602]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()",
      "right" : "public void iterableContainsExactlyWithDuplicatesUnexpectedItemFailure()",
      "info" : "MethodDeclaration[16879-17316]:MethodDeclaration[16606-17041]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicateMissingElements()",
      "right" : "public void iterableContainsExactlyWithDuplicateMissingElements()",
      "info" : "MethodDeclaration[17477-17836]:MethodDeclaration[17202-17559]"
    }, {
      "left" : "public void iterableContainsExactlyWithNullFailure()",
      "right" : "public void iterableContainsExactlyWithNullFailure()",
      "info" : "MethodDeclaration[17840-18239]:MethodDeclaration[17563-17960]"
    }, {
      "left" : "public void iterableContainsExactlyWithMissingAndExtraElements()",
      "right" : "public void iterableContainsExactlyWithMissingAndExtraElements()",
      "info" : "MethodDeclaration[18243-18658]:MethodDeclaration[17964-18377]"
    }, {
      "left" : "public void iterableContainsExactlyWithDuplicateMissingAndExtraElements()",
      "right" : "public void iterableContainsExactlyWithDuplicateMissingAndExtraElements()",
      "info" : "MethodDeclaration[18662-19120]:MethodDeclaration[18381-18837]"
    }, {
      "left" : "public void iterableContainsExactlyWithOneIterableGivesWarning()",
      "right" : "public void iterableContainsExactlyWithOneIterableGivesWarning()",
      "info" : "MethodDeclaration[19124-19826]:MethodDeclaration[18841-19539]"
    }, {
      "left" : "public void iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()",
      "right" : "public void iterableContainsExactlyElementsInWithOneIterableDoesNotGiveWarning()",
      "info" : "MethodDeclaration[19830-20266]:MethodDeclaration[19543-19975]"
    }, {
      "left" : "public void iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()",
      "right" : "public void iterableContainsExactlyWithTwoIterableDoesNotGivesWarning()",
      "info" : "MethodDeclaration[20270-20750]:MethodDeclaration[19979-20453]"
    }, {
      "left" : "public void iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()",
      "right" : "public void iterableContainsExactlyWithOneNonIterableDoesNotGiveWarning()",
      "info" : "MethodDeclaration[20754-21157]:MethodDeclaration[20457-20858]"
    }, {
      "left" : "public void iterableContainsExactlyInOrder()",
      "right" : "public void iterableContainsExactlyInOrder()",
      "info" : "MethodDeclaration[21161-21289]:MethodDeclaration[20862-20988]"
    }, {
      "left" : "public void iterableContainsExactlyInOrderWithNull()",
      "right" : "public void iterableContainsExactlyInOrderWithNull()",
      "info" : "MethodDeclaration[21293-21435]:MethodDeclaration[20992-21132]"
    }, {
      "left" : "public void iterableContainsExactlyInOrderWithFailure()",
      "right" : "public void iterableContainsExactlyInOrderWithFailure()",
      "info" : "MethodDeclaration[21439-21813]:MethodDeclaration[21136-21508]"
    }, {
      "left" : "public void iterableContainsExactlyInOrderWithOneShotIterable()",
      "right" : "public void iterableContainsExactlyInOrderWithOneShotIterable()",
      "info" : "MethodDeclaration[21817-22213]:MethodDeclaration[21512-21915]"
    }, {
      "left" : "public void iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()",
      "right" : "public void iterableContainsExactlyInOrderWithOneShotIterableWrongOrder()",
      "info" : "MethodDeclaration[22217-22956]:MethodDeclaration[21919-22665]"
    }, {
      "left" : "public void iterableIsEmpty()",
      "right" : "public void iterableIsEmpty()",
      "info" : "MethodDeclaration[22960-23041]:MethodDeclaration[22669-22748]"
    }, {
      "left" : "public void iterableIsEmptyWithFailure()",
      "right" : "public void iterableIsEmptyWithFailure()",
      "info" : "MethodDeclaration[23045-23306]:MethodDeclaration[22752-23011]"
    }, {
      "left" : "public void iterableIsNotEmpty()",
      "right" : "public void iterableIsNotEmpty()",
      "info" : "MethodDeclaration[23310-23402]:MethodDeclaration[23015-23105]"
    }, {
      "left" : "public void iterableIsNotEmptyWithFailure()",
      "right" : "public void iterableIsNotEmptyWithFailure()",
      "info" : "MethodDeclaration[23406-23657]:MethodDeclaration[23109-23358]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1325-1384]:Block[1266-1325]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);",
      "info" : "ExpressionStatement[1331-1380]:ExpressionStatement[1272-1321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1422-1474]:Block[1363-1415]"
    }, {
      "left" : "assertThat(ImmutableList.of()).hasSize(0);",
      "right" : "assertThat(ImmutableList.of()).hasSize(0);",
      "info" : "ExpressionStatement[1428-1470]:ExpressionStatement[1369-1411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1513-1741]:Block[1454-1682]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1519-1737]:TryStatement[1460-1678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1523-1600]:Block[1464-1541]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(4);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(4);",
      "info" : "ExpressionStatement[1531-1580]:ExpressionStatement[1472-1521]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[1587-1594]:ExpressionStatement[1528-1535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1633-1737]:Block[1574-1678]"
    }, {
      "left" : "assertThat(expected).hasMessage(\"Not true that <[1, 2, 3]> has a size of <4>. It is <3>\");",
      "right" : "assertThat(expected).hasMessage(\"Not true that <[1, 2, 3]> has a size of <4>. It is <3>\");",
      "info" : "ExpressionStatement[1641-1731]:ExpressionStatement[1582-1672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1783-1925]:Block[1724-1866]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1789-1921]:TryStatement[1730-1862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1793-1871]:Block[1734-1812]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);",
      "info" : "ExpressionStatement[1801-1851]:ExpressionStatement[1742-1792]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[1858-1865]:ExpressionStatement[1799-1806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1914-1921]:Block[1855-1862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1972-2024]:Block[1913-1963]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).contains(1);",
      "right" : "assertThat(asList(1, 2, 3)).contains(1);",
      "info" : "ExpressionStatement[1978-2020]:ExpressionStatement[1919-1959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2079-2137]:Block[2018-2074]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).contains(null);",
      "right" : "assertThat(asList(1, null, 3)).contains(null);",
      "info" : "ExpressionStatement[2085-2133]:ExpressionStatement[2024-2070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2191-2402]:Block[2128-2337]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2197-2398]:TryStatement[2134-2333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2201-2292]:Block[2138-2227]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).contains(5);",
      "right" : "assertThat(asList(1, 2, 3)).contains(5);",
      "info" : "ExpressionStatement[2209-2251]:ExpressionStatement[2146-2186]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[2258-2286]:ExpressionStatement[2193-2221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2318-2398]:Block[2253-2333]"
    }, {
      "left" : "assertThat(e).hasMessage(\"<[1, 2, 3]> should have contained <5>\");",
      "right" : "assertThat(e).hasMessage(\"<[1, 2, 3]> should have contained <5>\");",
      "info" : "ExpressionStatement[2326-2392]:ExpressionStatement[2261-2327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2461-2699]:Block[2396-2632]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2467-2695]:TryStatement[2402-2628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2471-2579]:Block[2406-2512]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).named(\"numbers\").contains(5);",
      "right" : "assertThat(asList(1, 2, 3)).named(\"numbers\").contains(5);",
      "info" : "ExpressionStatement[2479-2538]:ExpressionStatement[2414-2471]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[2545-2573]:ExpressionStatement[2478-2506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2605-2695]:Block[2538-2628]"
    }, {
      "left" : "assertThat(e).hasMessage(\"numbers (<[1, 2, 3]>) should have contained <5>\");",
      "right" : "assertThat(e).hasMessage(\"numbers (<[1, 2, 3]>) should have contained <5>\");",
      "info" : "ExpressionStatement[2613-2689]:ExpressionStatement[2546-2622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2767-3016]:Block[2700-2947]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2773-3012]:TryStatement[2706-2943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2777-2894]:Block[2710-2825]"
    }, {
      "left" : "assertWithMessage(\"custom msg\").that(iterable(1, 2, 3)).contains(5);",
      "right" : "assertWithMessage(\"custom msg\").that(asList(1, 2, 3)).contains(5);",
      "info" : "ExpressionStatement[2785-2853]:ExpressionStatement[2718-2784]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[2860-2888]:ExpressionStatement[2791-2819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2920-3012]:Block[2851-2943]"
    }, {
      "left" : "assertThat(e).hasMessage(\"custom msg: <[1, 2, 3]> should have contained <5>\");",
      "right" : "assertThat(e).hasMessage(\"custom msg: <[1, 2, 3]> should have contained <5>\");",
      "info" : "ExpressionStatement[2928-3006]:ExpressionStatement[2859-2937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3065-3126]:Block[2996-3055]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).doesNotContain(5);",
      "right" : "assertThat(asList(1, null, 3)).doesNotContain(5);",
      "info" : "ExpressionStatement[3071-3122]:ExpressionStatement[3002-3051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3183-3244]:Block[3112-3171]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).doesNotContain(null);",
      "right" : "assertThat(asList(1, 2, 3)).doesNotContain(null);",
      "info" : "ExpressionStatement[3189-3240]:ExpressionStatement[3118-3167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3300-3521]:Block[3227-3446]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3306-3517]:TryStatement[3233-3442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3310-3407]:Block[3237-3332]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).doesNotContain(2);",
      "right" : "assertThat(asList(1, 2, 3)).doesNotContain(2);",
      "info" : "ExpressionStatement[3318-3366]:ExpressionStatement[3245-3291]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[3373-3401]:ExpressionStatement[3298-3326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3433-3517]:Block[3358-3442]"
    }, {
      "left" : "assertThat(e).hasMessage(\"<[1, 2, 3]> should not have contained <2>\");",
      "right" : "assertThat(e).hasMessage(\"<[1, 2, 3]> should not have contained <2>\");",
      "info" : "ExpressionStatement[3441-3511]:ExpressionStatement[3366-3436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3572-3635]:Block[3497-3558]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsNoDuplicates();",
      "right" : "assertThat(asList(1, 2, 3)).containsNoDuplicates();",
      "info" : "ExpressionStatement[3578-3631]:ExpressionStatement[3503-3554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3696-3873]:Block[3619-3684]"
    }, {
      "left" : "assertThat(values).containsNoDuplicates();",
      "right" : "assertThat(asList(1, 2, 2L, 3)).containsNoDuplicates();",
      "info" : "ExpressionStatement[3827-3869]:ExpressionStatement[3625-3680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3931-4173]:Block[3742-3982]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3937-4169]:TryStatement[3748-3978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3941-4046]:Block[3752-3855]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 3)).containsNoDuplicates();",
      "right" : "assertThat(asList(1, 2, 2, 3)).containsNoDuplicates();",
      "info" : "ExpressionStatement[3949-4005]:ExpressionStatement[3760-3814]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[4012-4040]:ExpressionStatement[3821-3849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4072-4169]:Block[3881-3978]"
    }, {
      "left" : "assertThat(e).hasMessage(\"<[1, 2, 2, 3]> has the following duplicates: <[2 x 2]>\");",
      "right" : "assertThat(e).hasMessage(\"<[1, 2, 2, 3]> has the following duplicates: <[2 x 2]>\");",
      "info" : "ExpressionStatement[4080-4163]:ExpressionStatement[3889-3972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4221-4281]:Block[4030-4088]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsAnyOf(1, 5);",
      "right" : "assertThat(asList(1, 2, 3)).containsAnyOf(1, 5);",
      "info" : "ExpressionStatement[4227-4277]:ExpressionStatement[4036-4084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4337-4403]:Block[4144-4208]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAnyOf(null, 5);",
      "right" : "assertThat(asList(1, null, 3)).containsAnyOf(null, 5);",
      "info" : "ExpressionStatement[4343-4399]:ExpressionStatement[4150-4204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4482-4561]:Block[4287-4364]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAnyOf(4, 5, (Integer) null);",
      "right" : "assertThat(asList(1, null, 3)).containsAnyOf(4, 5, (Integer) null);",
      "info" : "ExpressionStatement[4488-4557]:ExpressionStatement[4293-4360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4616-4854]:Block[4419-4655]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4622-4850]:TryStatement[4425-4651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4626-4728]:Block[4429-4529]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsAnyOf(5, 6, 0);",
      "right" : "assertThat(asList(1, 2, 3)).containsAnyOf(5, 6, 0);",
      "info" : "ExpressionStatement[4634-4687]:ExpressionStatement[4437-4488]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[4694-4722]:ExpressionStatement[4495-4523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4754-4850]:Block[4555-4651]"
    }, {
      "left" : "assertThat(e).hasMessage(\"Not true that <[1, 2, 3]> contains any of <[5, 6, 0]>\");",
      "right" : "assertThat(e).hasMessage(\"Not true that <[1, 2, 3]> contains any of <[5, 6, 0]>\");",
      "info" : "ExpressionStatement[4762-4844]:ExpressionStatement[4563-4645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4921-5240]:Block[4722-5048]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable(2, 1, \"b\").iterator();",
      "right" : "final Iterator<Object> iterator = asList((Object) 2, 1, \"b\").iterator();",
      "info" : "VariableDeclarationStatement[4927-4992]:VariableDeclarationStatement[4728-4800]"
    }, {
      "left" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n        };",
      "right" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n        };",
      "info" : "VariableDeclarationStatement[4997-5176]:VariableDeclarationStatement[4805-4984]"
    }, {
      "left" : "assertThat(iterable).containsAnyOf(3, \"a\", 7, \"b\", 0);",
      "right" : "assertThat(iterable).containsAnyOf(3, \"a\", 7, \"b\", 0);",
      "info" : "ExpressionStatement[5182-5236]:ExpressionStatement[4990-5044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5296-5356]:Block[5104-5162]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsAllOf(1, 2);",
      "right" : "assertThat(asList(1, 2, 3)).containsAllOf(1, 2);",
      "info" : "ExpressionStatement[5302-5352]:ExpressionStatement[5110-5158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5418-5484]:Block[5224-5288]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 2, 3)).containsAllOf(2, 2);",
      "right" : "assertThat(asList(1, 2, 2, 2, 3)).containsAllOf(2, 2);",
      "info" : "ExpressionStatement[5424-5480]:ExpressionStatement[5230-5284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5540-5616]:Block[5344-5418]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAllOf(3, (Integer) null);",
      "right" : "assertThat(asList(1, null, 3)).containsAllOf(3, (Integer) null);",
      "info" : "ExpressionStatement[5546-5612]:ExpressionStatement[5350-5414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5695-5764]:Block[5497-5564]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAllOf(1, 3, null);",
      "right" : "assertThat(asList(1, null, 3)).containsAllOf(1, 3, null);",
      "info" : "ExpressionStatement[5701-5760]:ExpressionStatement[5503-5560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5819-6089]:Block[5619-5887]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5825-6085]:TryStatement[5625-5883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5829-5931]:Block[5629-5729]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsAllOf(1, 2, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsAllOf(1, 2, 4);",
      "info" : "ExpressionStatement[5837-5890]:ExpressionStatement[5637-5688]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[5897-5925]:ExpressionStatement[5695-5723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5957-6085]:Block[5755-5883]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, 2, 3]> contains all of <[1, 2, 4]>. It is missing <[4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, 2, 3]> contains all of <[1, 2, 4]>. It is missing <[4]>\");",
      "info" : "ExpressionStatement[5965-6079]:ExpressionStatement[5763-5877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6147-6447]:Block[5945-6243]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6153-6410]:TryStatement[5951-6206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6157-6231]:Block[5955-6027]"
    }, {
      "left" : "assertThat(iterable(\"y\", \"x\")).containsAllOf(\"x\", \"y\", \"z\");",
      "right" : "assertThat(asList(\"y\", \"x\")).containsAllOf(\"x\", \"y\", \"z\");",
      "info" : "ExpressionStatement[6165-6225]:ExpressionStatement[5963-6021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6264-6410]:Block[6060-6206]"
    }, {
      "left" : "assertThat(expected)\n          .hasMessage(\"Not true that <[y, x]> contains all of <[x, y, z]>. It is missing <[z]>\");",
      "right" : "assertThat(expected)\n          .hasMessage(\"Not true that <[y, x]> contains all of <[x, y, z]>. It is missing <[z]>\");",
      "info" : "ExpressionStatement[6272-6390]:ExpressionStatement[6068-6186]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6397-6404]:ReturnStatement[6193-6200]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[6415-6443]:ExpressionStatement[6211-6239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6522-6822]:Block[6318-6616]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6528-6785]:TryStatement[6324-6579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6532-6606]:Block[6328-6400]"
    }, {
      "left" : "assertThat(iterable(\"y\", \"x\")).containsAllOf(\"x\", \"y\", \"y\");",
      "right" : "assertThat(asList(\"y\", \"x\")).containsAllOf(\"x\", \"y\", \"y\");",
      "info" : "ExpressionStatement[6540-6600]:ExpressionStatement[6336-6394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6639-6785]:Block[6433-6579]"
    }, {
      "left" : "assertThat(expected)\n          .hasMessage(\"Not true that <[y, x]> contains all of <[x, y, y]>. It is missing <[y]>\");",
      "right" : "assertThat(expected)\n          .hasMessage(\"Not true that <[y, x]> contains all of <[x, y, y]>. It is missing <[y]>\");",
      "info" : "ExpressionStatement[6647-6765]:ExpressionStatement[6441-6559]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6772-6779]:ReturnStatement[6566-6573]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[6790-6818]:ExpressionStatement[6584-6612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6891-7231]:Block[6685-7023]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6897-7227]:TryStatement[6691-7019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6901-7012]:Block[6695-6804]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsAllOf(1, 2, 2, 2, 3, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsAllOf(1, 2, 2, 2, 3, 4);",
      "info" : "ExpressionStatement[6909-6971]:ExpressionStatement[6703-6763]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[6978-7006]:ExpressionStatement[6770-6798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7038-7227]:Block[6830-7019]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains all of <[1, 2, 2, 2, 3, 4]>. \"\n                  + \"It is missing <[2 [2 copies], 4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains all of <[1, 2, 2, 2, 3, 4]>. \"\n                  + \"It is missing <[2 [2 copies], 4]>\");",
      "info" : "ExpressionStatement[7046-7221]:ExpressionStatement[6838-7013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7464-7754]:Block[7256-7544]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7470-7750]:TryStatement[7262-7540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7474-7573]:Block[7266-7363]"
    }, {
      "left" : "assertThat(iterable(1, 2)).containsAllOf(4, 4, 4);",
      "right" : "assertThat(asList(1, 2)).containsAllOf(4, 4, 4);",
      "info" : "ExpressionStatement[7482-7532]:ExpressionStatement[7274-7322]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[7539-7567]:ExpressionStatement[7329-7357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7599-7750]:Block[7389-7540]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2]> contains all of <[4, 4, 4]>. It is missing <[4 [3 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2]> contains all of <[4, 4, 4]>. It is missing <[4 [3 copies]]>\");",
      "info" : "ExpressionStatement[7607-7744]:ExpressionStatement[7397-7534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7817-8152]:Block[7607-7940]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7823-8148]:TryStatement[7613-7936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7827-7941]:Block[7617-7729]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAllOf(1, null, null, 3);",
      "right" : "assertThat(asList(1, null, 3)).containsAllOf(1, null, null, 3);",
      "info" : "ExpressionStatement[7835-7900]:ExpressionStatement[7625-7688]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[7907-7935]:ExpressionStatement[7695-7723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7967-8148]:Block[7755-7936]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains all of <[1, null, null, 3]>. \"\n                  + \"It is missing <[null]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains all of <[1, null, null, 3]>. \"\n                  + \"It is missing <[null]>\");",
      "info" : "ExpressionStatement[7975-8142]:ExpressionStatement[7763-7930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8207-8280]:Block[7995-8066]"
    }, {
      "left" : "assertThat(iterable(3, 2, 5)).containsAllOf(3, 2, 5).inOrder();",
      "right" : "assertThat(asList(3, 2, 5)).containsAllOf(3, 2, 5).inOrder();",
      "info" : "ExpressionStatement[8213-8276]:ExpressionStatement[8001-8062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8343-8914]:Block[8129-8686]"
    }, {
      "left" : "assertThat(iterable(3, 2, 5)).containsAllOf(3, 5).inOrder();",
      "right" : "assertThat(asList(3, 2, 5)).containsAllOf(3, 5).inOrder();",
      "info" : "ExpressionStatement[8349-8409]:ExpressionStatement[8135-8193]"
    }, {
      "left" : "assertThat(iterable(3, 2, 2, 4, 5)).containsAllOf(3, 2, 2, 5).inOrder();",
      "right" : "assertThat(asList(3, 2, 2, 4, 5)).containsAllOf(3, 2, 2, 5).inOrder();",
      "info" : "ExpressionStatement[8414-8486]:ExpressionStatement[8198-8268]"
    }, {
      "left" : "assertThat(iterable(3, 1, 4, 1, 5)).containsAllOf(3, 1, 5).inOrder();",
      "right" : "assertThat(asList(3, 1, 4, 1, 5)).containsAllOf(3, 1, 5).inOrder();",
      "info" : "ExpressionStatement[8491-8560]:ExpressionStatement[8273-8340]"
    }, {
      "left" : "assertThat(iterable(\"x\", \"y\", \"y\", \"z\")).containsAllOf(\"x\", \"y\", \"z\").inOrder();",
      "right" : "assertThat(asList(\"x\", \"y\", \"y\", \"z\")).containsAllOf(\"x\", \"y\", \"z\").inOrder();",
      "info" : "ExpressionStatement[8565-8645]:ExpressionStatement[8345-8423]"
    }, {
      "left" : "assertThat(iterable(\"x\", \"x\", \"y\", \"z\")).containsAllOf(\"x\", \"y\", \"z\").inOrder();",
      "right" : "assertThat(asList(\"x\", \"x\", \"y\", \"z\")).containsAllOf(\"x\", \"y\", \"z\").inOrder();",
      "info" : "ExpressionStatement[8650-8730]:ExpressionStatement[8428-8506]"
    }, {
      "left" : "assertThat(iterable(\"z\", \"x\", \"y\", \"z\")).containsAllOf(\"x\", \"y\", \"z\").inOrder();",
      "right" : "assertThat(asList(\"z\", \"x\", \"y\", \"z\")).containsAllOf(\"x\", \"y\", \"z\").inOrder();",
      "info" : "ExpressionStatement[8735-8815]:ExpressionStatement[8511-8589]"
    }, {
      "left" : "assertThat(iterable(\"x\", \"x\", \"y\", \"z\", \"x\")).containsAllOf(\"x\", \"y\", \"z\", \"x\").inOrder();",
      "right" : "assertThat(asList(\"x\", \"x\", \"y\", \"z\", \"x\")).containsAllOf(\"x\", \"y\", \"z\", \"x\").inOrder();",
      "info" : "ExpressionStatement[8820-8910]:ExpressionStatement[8594-8682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8977-9133]:Block[8749-8901]"
    }, {
      "left" : "assertThat(iterable(3, null, 5)).containsAllOf(3, null, 5).inOrder();",
      "right" : "assertThat(asList(3, null, 5)).containsAllOf(3, null, 5).inOrder();",
      "info" : "ExpressionStatement[8983-9052]:ExpressionStatement[8755-8822]"
    }, {
      "left" : "assertThat(iterable(3, null, 7, 5)).containsAllOf(3, null, 5).inOrder();",
      "right" : "assertThat(asList(3, null, 7, 5)).containsAllOf(3, null, 5).inOrder();",
      "info" : "ExpressionStatement[9057-9129]:ExpressionStatement[8827-8897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9199-9485]:Block[8967-9251]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9205-9481]:TryStatement[8973-9247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9209-9327]:Block[8977-9093]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsAllOf(null, 1, 3).inOrder();",
      "right" : "assertThat(asList(1, null, 3)).containsAllOf(null, 1, 3).inOrder();",
      "info" : "ExpressionStatement[9217-9286]:ExpressionStatement[8985-9052]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[9293-9321]:ExpressionStatement[9059-9087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9353-9481]:Block[9119-9247]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, null, 3]> contains all elements in order <[null, 1, 3]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, null, 3]> contains all elements in order <[null, 1, 3]>\");",
      "info" : "ExpressionStatement[9361-9475]:ExpressionStatement[9127-9241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9559-10063]:Block[9325-9827]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable.iterator();",
      "right" : "final Iterator<Object> iterator = iterable.iterator();",
      "info" : "VariableDeclarationStatement[9641-9695]:VariableDeclarationStatement[9405-9459]"
    }, {
      "left" : "Iterable<Object> oneShot =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return Iterables.toString(iterable);\n          }\n        };",
      "right" : "Iterable<Object> oneShot =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return Iterables.toString(iterable);\n          }\n        };",
      "info" : "VariableDeclarationStatement[9700-9997]:VariableDeclarationStatement[9464-9761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9825-9867]:Block[9589-9631]"
    }, {
      "left" : "return iterator;",
      "right" : "return iterator;",
      "info" : "ReturnStatement[9839-9855]:ReturnStatement[9603-9619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9924-9986]:Block[9688-9750]"
    }, {
      "left" : "return Iterables.toString(iterable);",
      "right" : "return Iterables.toString(iterable);",
      "info" : "ReturnStatement[9938-9974]:ReturnStatement[9702-9738]"
    }, {
      "left" : "assertThat(oneShot).containsAllOf(1, null, 3).inOrder();",
      "right" : "assertThat(oneShot).containsAllOf(1, null, 3).inOrder();",
      "info" : "ExpressionStatement[10003-10059]:ExpressionStatement[9767-9823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10147-10796]:Block[9911-10567]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable(2, 1, null, 4, \"a\", 3, \"b\").iterator();",
      "right" : "final Iterator<Object> iterator = asList((Object) 2, 1, null, 4, \"a\", 3, \"b\").iterator();",
      "info" : "VariableDeclarationStatement[10153-10235]:VariableDeclarationStatement[9917-10006]"
    }, {
      "left" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return \"BadIterable\";\n          }\n        };",
      "right" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return \"BadIterable\";\n          }\n        };",
      "info" : "VariableDeclarationStatement[10240-10523]:VariableDeclarationStatement[10011-10294]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10529-10792]:TryStatement[10300-10563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10533-10639]:Block[10304-10410]"
    }, {
      "left" : "assertThat(iterable).containsAllOf(1, 3, null).inOrder();",
      "right" : "assertThat(iterable).containsAllOf(1, 3, null).inOrder();",
      "info" : "ExpressionStatement[10541-10598]:ExpressionStatement[10312-10369]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[10605-10633]:ExpressionStatement[10376-10404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10665-10792]:Block[10436-10563]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\"Not true that <BadIterable> contains all elements in order <[1, 3, null]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\"Not true that <BadIterable> contains all elements in order <[1, 3, null]>\");",
      "info" : "ExpressionStatement[10673-10786]:ExpressionStatement[10444-10557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10845-10909]:Block[10616-10678]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsNoneOf(4, 5, 6);",
      "right" : "assertThat(asList(1, 2, 3)).containsNoneOf(4, 5, 6);",
      "info" : "ExpressionStatement[10851-10905]:ExpressionStatement[10622-10674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10965-11253]:Block[10734-11020]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10971-11249]:TryStatement[10740-11016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10975-11078]:Block[10744-10845]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsNoneOf(1, 2, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsNoneOf(1, 2, 4);",
      "info" : "ExpressionStatement[10983-11037]:ExpressionStatement[10752-10804]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[11044-11072]:ExpressionStatement[10811-10839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11104-11249]:Block[10871-11016]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains none of <[1, 2, 4]>. It contains <[1, 2]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains none of <[1, 2, 4]>. It contains <[1, 2]>\");",
      "info" : "ExpressionStatement[11112-11243]:ExpressionStatement[10879-11010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11331-11625]:Block[11098-11390]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11337-11621]:TryStatement[11104-11386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11341-11447]:Block[11108-11212]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 3)).containsNoneOf(1, 2, 4);",
      "right" : "assertThat(asList(1, 2, 2, 3)).containsNoneOf(1, 2, 4);",
      "info" : "ExpressionStatement[11349-11406]:ExpressionStatement[11116-11171]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[11413-11441]:ExpressionStatement[11178-11206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11473-11621]:Block[11238-11386]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 2, 3]> contains none of <[1, 2, 4]>. It contains <[1, 2]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 2, 3]> contains none of <[1, 2, 4]>. It contains <[1, 2]>\");",
      "info" : "ExpressionStatement[11481-11615]:ExpressionStatement[11246-11380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11704-11998]:Block[11469-11761]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11710-11994]:TryStatement[11475-11757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11714-11820]:Block[11479-11583]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsNoneOf(1, 2, 2, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsNoneOf(1, 2, 2, 4);",
      "info" : "ExpressionStatement[11722-11779]:ExpressionStatement[11487-11542]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[11786-11814]:ExpressionStatement[11549-11577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11846-11994]:Block[11609-11757]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains none of <[1, 2, 2, 4]>. It contains <[1, 2]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains none of <[1, 2, 2, 4]>. It contains <[1, 2]>\");",
      "info" : "ExpressionStatement[11854-11988]:ExpressionStatement[11617-11751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12049-12272]:Block[11816-12039]"
    }, {
      "left" : "String[] stringArray = {\"a\", \"b\"};",
      "right" : "String[] stringArray = {\"a\", \"b\"};",
      "info" : "VariableDeclarationStatement[12055-12089]:VariableDeclarationStatement[11822-11856]"
    }, {
      "left" : "ImmutableList<String[]> iterable = ImmutableList.of(stringArray);",
      "right" : "ImmutableList<String[]> iterable = ImmutableList.of(stringArray);",
      "info" : "VariableDeclarationStatement[12094-12159]:VariableDeclarationStatement[11861-11926]"
    }, {
      "left" : "assertThat(iterable).containsExactly((Object) stringArray);",
      "right" : "assertThat(iterable).containsExactly((Object) stringArray);",
      "info" : "ExpressionStatement[12209-12268]:ExpressionStatement[11976-12035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12319-12471]:Block[12086-12238]"
    }, {
      "left" : "ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");",
      "right" : "ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");",
      "info" : "VariableDeclarationStatement[12325-12385]:VariableDeclarationStatement[12092-12152]"
    }, {
      "left" : "String[] array = {\"a\", \"b\"};",
      "right" : "String[] array = {\"a\", \"b\"};",
      "info" : "VariableDeclarationStatement[12390-12418]:VariableDeclarationStatement[12157-12185]"
    }, {
      "left" : "assertThat(iterable).containsExactly(array);",
      "right" : "assertThat(iterable).containsExactly(array);",
      "info" : "ExpressionStatement[12423-12467]:ExpressionStatement[12190-12234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12529-12594]:Block[12296-12359]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2, 3);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2, 3);",
      "info" : "ExpressionStatement[12535-12590]:ExpressionStatement[12302-12355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12654-12725]:Block[12419-12488]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactly(3, 1, 4, 2);",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactly(3, 1, 4, 2);",
      "info" : "ExpressionStatement[12660-12721]:ExpressionStatement[12425-12484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12789-12866]:Block[12552-12627]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 2, 3)).containsExactly(1, 2, 2, 2, 3);",
      "right" : "assertThat(asList(1, 2, 2, 2, 3)).containsExactly(1, 2, 2, 2, 3);",
      "info" : "ExpressionStatement[12795-12862]:ExpressionStatement[12558-12623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12940-13017]:Block[12701-12776]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 2, 3)).containsExactly(2, 1, 2, 3, 2);",
      "right" : "assertThat(asList(1, 2, 2, 2, 3)).containsExactly(2, 1, 2, 3, 2);",
      "info" : "ExpressionStatement[12946-13013]:ExpressionStatement[12707-12772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13079-13185]:Block[12838-12942]"
    }, {
      "left" : "assertThat(actual).containsExactly(null);",
      "right" : "assertThat(actual).containsExactly(null);",
      "info" : "ExpressionStatement[13140-13181]:ExpressionStatement[12897-12938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13249-13314]:Block[13006-13069]"
    }, {
      "left" : "assertThat(iterable(1, null)).containsExactly(1, null);",
      "right" : "assertThat(asList(1, null)).containsExactly(1, null);",
      "info" : "ExpressionStatement[13255-13310]:ExpressionStatement[13012-13065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13377-13448]:Block[13132-13201]"
    }, {
      "left" : "assertThat(iterable(1, 2, null)).containsExactly(1, 2, null);",
      "right" : "assertThat(asList(1, 2, null)).containsExactly(1, 2, null);",
      "info" : "ExpressionStatement[13383-13444]:ExpressionStatement[13138-13197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13506-13577]:Block[13259-13328]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsExactly(1, null, 3);",
      "right" : "assertThat(asList(1, null, 3)).containsExactly(1, null, 3);",
      "info" : "ExpressionStatement[13512-13573]:ExpressionStatement[13265-13324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13645-13726]:Block[13396-13475]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsExactly(1, 3, (Integer) null);",
      "right" : "assertThat(asList(1, null, 3)).containsExactly(1, 3, (Integer) null);",
      "info" : "ExpressionStatement[13651-13722]:ExpressionStatement[13402-13471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13816-14546]:Block[13565-14281]"
    }, {
      "left" : "HashCodeThrower one = new HashCodeThrower();",
      "right" : "HashCodeThrower one = new HashCodeThrower();",
      "info" : "VariableDeclarationStatement[13822-13866]:VariableDeclarationStatement[13571-13615]"
    }, {
      "left" : "HashCodeThrower two = new HashCodeThrower();",
      "right" : "HashCodeThrower two = new HashCodeThrower();",
      "info" : "VariableDeclarationStatement[13871-13915]:VariableDeclarationStatement[13620-13664]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactly(two, one);",
      "right" : "assertThat(asList(one, two)).containsExactly(two, one);",
      "info" : "ExpressionStatement[13921-13978]:ExpressionStatement[13670-13725]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactly(one, two).inOrder();",
      "right" : "assertThat(asList(one, two)).containsExactly(one, two).inOrder();",
      "info" : "ExpressionStatement[13983-14050]:ExpressionStatement[13730-13795]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactlyElementsIn(iterable(two, one));",
      "right" : "assertThat(asList(one, two)).containsExactlyElementsIn(asList(two, one));",
      "info" : "ExpressionStatement[14055-14132]:ExpressionStatement[13800-13873]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactlyElementsIn(iterable(one, two)).inOrder();",
      "right" : "assertThat(asList(one, two)).containsExactlyElementsIn(asList(one, two)).inOrder();",
      "info" : "ExpressionStatement[14137-14224]:ExpressionStatement[13878-13961]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14230-14530]:TryStatement[13967-14265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14234-14300]:Block[13971-14035]"
    }, {
      "left" : "assertThat(iterable(one, two)).containsExactly(one);",
      "right" : "assertThat(asList(one, two)).containsExactly(one);",
      "info" : "ExpressionStatement[14242-14294]:ExpressionStatement[13979-14029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14333-14530]:Block[14068-14265]"
    }, {
      "left" : "assertThat(expected)\n          .hasMessage(\n              \"Not true that <[HCT, HCT]> contains exactly <[HCT]>. \"\n                  + \"It has unexpected items <[HCT]>\");",
      "right" : "assertThat(expected)\n          .hasMessage(\n              \"Not true that <[HCT, HCT]> contains exactly <[HCT]>. \"\n                  + \"It has unexpected items <[HCT]>\");",
      "info" : "ExpressionStatement[14341-14510]:ExpressionStatement[14076-14245]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14517-14524]:ReturnStatement[14252-14259]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[14535-14542]:ExpressionStatement[14270-14277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14643-14678]:Block[14378-14413]"
    }, {
      "left" : "return this == other;",
      "right" : "return this == other;",
      "info" : "ReturnStatement[14651-14672]:ReturnStatement[14386-14407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14720-14776]:Block[14455-14511]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[14728-14770]:ThrowStatement[14463-14505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14821-14848]:Block[14556-14583]"
    }, {
      "left" : "return \"HCT\";",
      "right" : "return \"HCT\";",
      "info" : "ReturnStatement[14829-14842]:ReturnStatement[14564-14577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14933-15333]:Block[14668-15068]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14939-15296]:TryStatement[14674-15031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14943-15038]:Block[14678-14773]"
    }, {
      "left" : "assertThat(asList(\"foo OR bar\")).containsExactlyElementsIn(asList(\"foo\", \"bar\"));",
      "right" : "assertThat(asList(\"foo OR bar\")).containsExactlyElementsIn(asList(\"foo\", \"bar\"));",
      "info" : "ExpressionStatement[14951-15032]:ExpressionStatement[14686-14767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15064-15296]:Block[14799-15031]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[foo OR bar]> contains exactly <[foo, bar]>. \"\n                  + \"It is missing <[foo, bar]> and has unexpected items <[foo OR bar]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[foo OR bar]> contains exactly <[foo, bar]>. \"\n                  + \"It is missing <[foo, bar]> and has unexpected items <[foo OR bar]>\");",
      "info" : "ExpressionStatement[15072-15276]:ExpressionStatement[14807-15011]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15283-15290]:ReturnStatement[15018-15025]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[15301-15329]:ExpressionStatement[15036-15064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15401-15668]:Block[15136-15401]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15407-15664]:TryStatement[15142-15397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15411-15512]:Block[15146-15245]"
    }, {
      "left" : "assertThat(iterable(1, 2)).containsExactly(1, 2, 4);",
      "right" : "assertThat(asList(1, 2)).containsExactly(1, 2, 4);",
      "info" : "ExpressionStatement[15419-15471]:ExpressionStatement[15154-15204]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[15478-15506]:ExpressionStatement[15211-15239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15538-15664]:Block[15271-15397]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, 2]> contains exactly <[1, 2, 4]>. It is missing <[4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\"Not true that <[1, 2]> contains exactly <[1, 2, 4]>. It is missing <[4]>\");",
      "info" : "ExpressionStatement[15546-15658]:ExpressionStatement[15279-15391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15739-16031]:Block[15472-15762]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15745-16027]:TryStatement[15478-15758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15749-15850]:Block[15482-15581]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2);",
      "info" : "ExpressionStatement[15757-15809]:ExpressionStatement[15490-15540]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[15816-15844]:ExpressionStatement[15547-15575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15876-16027]:Block[15607-15758]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2]>. It has unexpected items <[3]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2]>. It has unexpected items <[3]>\");",
      "info" : "ExpressionStatement[15884-16021]:ExpressionStatement[15615-15752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16116-16450]:Block[15847-16179]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16122-16446]:TryStatement[15853-16175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16126-16236]:Block[15857-15965]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2, 2, 2, 3);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2, 2, 2, 3);",
      "info" : "ExpressionStatement[16134-16195]:ExpressionStatement[15865-15924]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[16202-16230]:ExpressionStatement[15931-15959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16262-16446]:Block[15991-16175]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 2, 2, 3]>. \"\n                  + \"It is missing <[2 [2 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 2, 2, 3]>. \"\n                  + \"It is missing <[2 [2 copies]]>\");",
      "info" : "ExpressionStatement[16270-16440]:ExpressionStatement[15999-16169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16532-16875]:Block[16261-16602]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16538-16871]:TryStatement[16267-16598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16542-16655]:Block[16271-16382]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2, 2, 2, 3, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2, 2, 2, 3, 4);",
      "info" : "ExpressionStatement[16550-16614]:ExpressionStatement[16279-16341]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[16621-16649]:ExpressionStatement[16348-16376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16681-16871]:Block[16408-16598]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 2, 2, 3, 4]>. \"\n                  + \"It is missing <[2 [2 copies], 4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 2, 2, 3, 4]>. \"\n                  + \"It is missing <[2 [2 copies], 4]>\");",
      "info" : "ExpressionStatement[16689-16865]:ExpressionStatement[16416-16592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16960-17316]:Block[16687-17041]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16966-17312]:TryStatement[16693-17037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16970-17086]:Block[16697-16811]"
    }, {
      "left" : "assertThat(iterable(1, 2, 2, 2, 2, 3)).containsExactly(1, 2, 2, 3);",
      "right" : "assertThat(asList(1, 2, 2, 2, 2, 3)).containsExactly(1, 2, 2, 3);",
      "info" : "ExpressionStatement[16978-17045]:ExpressionStatement[16705-16770]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[17052-17080]:ExpressionStatement[16777-16805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17112-17312]:Block[16837-17037]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 2, 2, 2, 3]> contains exactly <[1, 2, 2, 3]>. \"\n                  + \"It has unexpected items <[2 [2 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 2, 2, 2, 3]> contains exactly <[1, 2, 2, 3]>. \"\n                  + \"It has unexpected items <[2 [2 copies]]>\");",
      "info" : "ExpressionStatement[17120-17306]:ExpressionStatement[16845-17031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17551-17836]:Block[17276-17559]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17557-17832]:TryStatement[17282-17555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17561-17658]:Block[17286-17381]"
    }, {
      "left" : "assertThat(iterable()).containsExactly(4, 4, 4);",
      "right" : "assertThat(asList()).containsExactly(4, 4, 4);",
      "info" : "ExpressionStatement[17569-17617]:ExpressionStatement[17294-17340]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[17624-17652]:ExpressionStatement[17347-17375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17684-17832]:Block[17407-17555]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[]> contains exactly <[4, 4, 4]>. It is missing <[4 [3 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[]> contains exactly <[4, 4, 4]>. It is missing <[4 [3 copies]]>\");",
      "info" : "ExpressionStatement[17692-17826]:ExpressionStatement[17415-17549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17901-18239]:Block[17624-17960]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17907-18235]:TryStatement[17630-17956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17911-18027]:Block[17634-17748]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsExactly(1, null, null, 3);",
      "right" : "assertThat(asList(1, null, 3)).containsExactly(1, null, null, 3);",
      "info" : "ExpressionStatement[17919-17986]:ExpressionStatement[17642-17707]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[17993-18021]:ExpressionStatement[17714-17742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18053-18235]:Block[17774-17956]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains exactly <[1, null, null, 3]>. \"\n                  + \"It is missing <[null]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains exactly <[1, null, null, 3]>. \"\n                  + \"It is missing <[null]>\");",
      "info" : "ExpressionStatement[18061-18229]:ExpressionStatement[17782-17950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18316-18658]:Block[18037-18377]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18322-18654]:TryStatement[18043-18373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18326-18430]:Block[18047-18149]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3)).containsExactly(1, 2, 4);",
      "right" : "assertThat(asList(1, 2, 3)).containsExactly(1, 2, 4);",
      "info" : "ExpressionStatement[18334-18389]:ExpressionStatement[18055-18108]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[18396-18424]:ExpressionStatement[18115-18143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18456-18654]:Block[18175-18373]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 4]>. \"\n                  + \"It is missing <[4]> and has unexpected items <[3]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3]> contains exactly <[1, 2, 4]>. \"\n                  + \"It is missing <[4]> and has unexpected items <[3]>\");",
      "info" : "ExpressionStatement[18464-18648]:ExpressionStatement[18183-18367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18744-19120]:Block[18463-18837]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18750-19116]:TryStatement[18469-18833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18754-18864]:Block[18473-18581]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 3)).containsExactly(1, 2, 4, 4);",
      "right" : "assertThat(asList(1, 2, 3, 3)).containsExactly(1, 2, 4, 4);",
      "info" : "ExpressionStatement[18762-18823]:ExpressionStatement[18481-18540]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[18830-18858]:ExpressionStatement[18547-18575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18890-19116]:Block[18607-18833]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 3]> contains exactly <[1, 2, 4, 4]>. \"\n                  + \"It is missing <[4 [2 copies]]> and has unexpected items <[3 [2 copies]]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 3]> contains exactly <[1, 2, 4, 4]>. \"\n                  + \"It is missing <[4 [2 copies]]> and has unexpected items <[3 [2 copies]]>\");",
      "info" : "ExpressionStatement[18898-19110]:ExpressionStatement[18615-18827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19197-19826]:Block[18914-19539]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19203-19822]:TryStatement[18920-19535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19207-19327]:Block[18924-19040]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactly(iterable(1, 2, 3, 4));",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactly(asList(1, 2, 3, 4));",
      "info" : "ExpressionStatement[19215-19286]:ExpressionStatement[18932-18999]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[19293-19321]:ExpressionStatement[19006-19034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19353-19822]:Block[19066-19535]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[[1, 2, 3, 4]]>. \"\n                  + \"It is missing <[[1, 2, 3, 4]]> and has unexpected items <[1, 2, 3, 4]>. \"\n                  + \"Passing an iterable to the varargs method containsExactly(Object...) is \"\n                  + \"often not the correct thing to do. Did you mean to call \"\n                  + \"containsExactlyElementsIn(Iterable) instead?\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[[1, 2, 3, 4]]>. \"\n                  + \"It is missing <[[1, 2, 3, 4]]> and has unexpected items <[1, 2, 3, 4]>. \"\n                  + \"Passing an iterable to the varargs method containsExactly(Object...) is \"\n                  + \"often not the correct thing to do. Did you mean to call \"\n                  + \"containsExactlyElementsIn(Iterable) instead?\");",
      "info" : "ExpressionStatement[19361-19816]:ExpressionStatement[19074-19529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19919-20266]:Block[19632-19975]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19925-20262]:TryStatement[19638-19971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19929-20056]:Block[19642-19765]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactlyElementsIn(iterable(1, 2, 3));",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactlyElementsIn(asList(1, 2, 3));",
      "info" : "ExpressionStatement[19937-20015]:ExpressionStatement[19650-19724]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[20022-20050]:ExpressionStatement[19731-19759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20082-20262]:Block[19791-19971]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[1, 2, 3]>. \"\n                  + \"It has unexpected items <[4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[1, 2, 3]>. \"\n                  + \"It has unexpected items <[4]>\");",
      "info" : "ExpressionStatement[20090-20256]:ExpressionStatement[19799-19965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20350-20750]:Block[20059-20453]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20356-20746]:TryStatement[20065-20449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20360-20490]:Block[20069-20193]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactly(iterable(1, 2), iterable(3, 4));",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactly(asList(1, 2), asList(3, 4));",
      "info" : "ExpressionStatement[20368-20449]:ExpressionStatement[20077-20152]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[20456-20484]:ExpressionStatement[20159-20187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20516-20746]:Block[20219-20449]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[[1, 2], [3, 4]]>. \"\n                  + \"It is missing <[[1, 2], [3, 4]]> and has unexpected items <[1, 2, 3, 4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[[1, 2], [3, 4]]>. \"\n                  + \"It is missing <[[1, 2], [3, 4]]> and has unexpected items <[1, 2, 3, 4]>\");",
      "info" : "ExpressionStatement[20524-20740]:ExpressionStatement[20227-20443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20836-21157]:Block[20539-20858]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20842-21153]:TryStatement[20545-20854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20846-20947]:Block[20549-20648]"
    }, {
      "left" : "assertThat(iterable(1, 2, 3, 4)).containsExactly(1);",
      "right" : "assertThat(asList(1, 2, 3, 4)).containsExactly(1);",
      "info" : "ExpressionStatement[20854-20906]:ExpressionStatement[20557-20607]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[20913-20941]:ExpressionStatement[20614-20642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20973-21153]:Block[20674-20854]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[1]>. \"\n                  + \"It has unexpected items <[2, 3, 4]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, 2, 3, 4]> contains exactly <[1]>. \"\n                  + \"It has unexpected items <[2, 3, 4]>\");",
      "info" : "ExpressionStatement[20981-21147]:ExpressionStatement[20682-20848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21214-21289]:Block[20915-20988]"
    }, {
      "left" : "assertThat(iterable(3, 2, 5)).containsExactly(3, 2, 5).inOrder();",
      "right" : "assertThat(asList(3, 2, 5)).containsExactly(3, 2, 5).inOrder();",
      "info" : "ExpressionStatement[21220-21285]:ExpressionStatement[20921-20984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21354-21435]:Block[21053-21132]"
    }, {
      "left" : "assertThat(iterable(3, null, 5)).containsExactly(3, null, 5).inOrder();",
      "right" : "assertThat(asList(3, null, 5)).containsExactly(3, null, 5).inOrder();",
      "info" : "ExpressionStatement[21360-21431]:ExpressionStatement[21059-21128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21503-21813]:Block[21200-21508]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21509-21809]:TryStatement[21206-21504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21513-21633]:Block[21210-21328]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).containsExactly(null, 1, 3).inOrder();",
      "right" : "assertThat(asList(1, null, 3)).containsExactly(null, 1, 3).inOrder();",
      "info" : "ExpressionStatement[21521-21592]:ExpressionStatement[21218-21287]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[21599-21627]:ExpressionStatement[21294-21322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21659-21809]:Block[21354-21504]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains only these elements in order <[null, 1, 3]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[1, null, 3]> contains only these elements in order <[null, 1, 3]>\");",
      "info" : "ExpressionStatement[21667-21803]:ExpressionStatement[21362-21498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21889-22213]:Block[21584-21915]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable(1, null, 3).iterator();",
      "right" : "final Iterator<Object> iterator = asList((Object) 1, null, 3).iterator();",
      "info" : "VariableDeclarationStatement[21895-21961]:VariableDeclarationStatement[21590-21663]"
    }, {
      "left" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n        };",
      "right" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n        };",
      "info" : "VariableDeclarationStatement[21966-22145]:VariableDeclarationStatement[21668-21847]"
    }, {
      "left" : "assertThat(iterable).containsExactly(1, null, 3).inOrder();",
      "right" : "assertThat(iterable).containsExactly(1, null, 3).inOrder();",
      "info" : "ExpressionStatement[22150-22209]:ExpressionStatement[21852-21911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22299-22956]:Block[22001-22665]"
    }, {
      "left" : "final Iterator<Object> iterator = iterable(1, null, 3).iterator();",
      "right" : "final Iterator<Object> iterator = asList((Object) 1, null, 3).iterator();",
      "info" : "VariableDeclarationStatement[22305-22371]:VariableDeclarationStatement[22007-22080]"
    }, {
      "left" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return \"BadIterable\";\n          }\n        };",
      "right" : "Iterable<Object> iterable =\n        new Iterable<Object>() {\n          @Override\n          public Iterator<Object> iterator() {\n            return iterator;\n          }\n\n          @Override\n          public String toString() {\n            return \"BadIterable\";\n          }\n        };",
      "info" : "VariableDeclarationStatement[22376-22659]:VariableDeclarationStatement[22085-22368]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22665-22952]:TryStatement[22374-22661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22669-22777]:Block[22378-22486]"
    }, {
      "left" : "assertThat(iterable).containsExactly(1, 3, null).inOrder();",
      "right" : "assertThat(iterable).containsExactly(1, 3, null).inOrder();",
      "info" : "ExpressionStatement[22677-22736]:ExpressionStatement[22386-22445]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[22743-22771]:ExpressionStatement[22452-22480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22803-22952]:Block[22512-22661]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <BadIterable> contains only these elements in order <[1, 3, null]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <BadIterable> contains only these elements in order <[1, 3, null]>\");",
      "info" : "ExpressionStatement[22811-22946]:ExpressionStatement[22520-22655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22998-23041]:Block[22707-22748]"
    }, {
      "left" : "assertThat(iterable()).isEmpty();",
      "right" : "assertThat(asList()).isEmpty();",
      "info" : "ExpressionStatement[23004-23037]:ExpressionStatement[22713-22744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23094-23306]:Block[22801-23011]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23100-23302]:TryStatement[22807-23007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23104-23196]:Block[22811-22901]"
    }, {
      "left" : "assertThat(iterable(1, null, 3)).isEmpty();",
      "right" : "assertThat(asList(1, null, 3)).isEmpty();",
      "info" : "ExpressionStatement[23112-23155]:ExpressionStatement[22819-22860]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[23162-23190]:ExpressionStatement[22867-22895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23222-23302]:Block[22927-23007]"
    }, {
      "left" : "assertThat(e).hasMessage(\"Not true that <[1, null, 3]> is empty\");",
      "right" : "assertThat(e).hasMessage(\"Not true that <[1, null, 3]> is empty\");",
      "info" : "ExpressionStatement[23230-23296]:ExpressionStatement[22935-23001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23351-23402]:Block[23056-23105]"
    }, {
      "left" : "assertThat(iterable(\"foo\")).isNotEmpty();",
      "right" : "assertThat(asList(\"foo\")).isNotEmpty();",
      "info" : "ExpressionStatement[23357-23398]:ExpressionStatement[23062-23101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23458-23657]:Block[23161-23358]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23464-23653]:TryStatement[23167-23354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23468-23553]:Block[23171-23254]"
    }, {
      "left" : "assertThat(iterable()).isNotEmpty();",
      "right" : "assertThat(asList()).isNotEmpty();",
      "info" : "ExpressionStatement[23476-23512]:ExpressionStatement[23179-23213]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[23519-23547]:ExpressionStatement[23220-23248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23579-23653]:Block[23280-23354]"
    }, {
      "left" : "assertThat(e).hasMessage(\"Not true that <[]> is not empty\");",
      "right" : "assertThat(e).hasMessage(\"Not true that <[]> is not empty\");",
      "info" : "ExpressionStatement[23587-23647]:ExpressionStatement[23288-23348]"
    } ]
  },
  "interFileMappings" : {
    "Moved from File: core/src/test/java/com/google/common/truth/ListTest.java" : {
      "matchedElements" : [
 {
        "left" : "public void listIsStrictlyOrdered()",
        "right" : "public void iterableIsStrictlyOrdered()",
        "info" : "MethodDeclaration[1051-1279]:MethodDeclaration[23362-23564]"
      }, {
        "left" : "public void isStrictlyOrderedFailure()",
        "right" : "public void isStrictlyOrderedFailure()",
        "info" : "MethodDeclaration[1283-1604]:MethodDeclaration[23568-23882]"
      }, {
        "left" : "public void isStrictlyOrderedWithNonComparableElementsFailure()",
        "right" : "public void isStrictlyOrderedWithNonComparableElementsFailure()",
        "info" : "MethodDeclaration[1608-1850]:MethodDeclaration[23886-24122]"
      }, {
        "left" : "public void listIsOrdered()",
        "right" : "public void iterableIsOrdered()",
        "info" : "MethodDeclaration[1854-2059]:MethodDeclaration[24126-24305]"
      }, {
        "left" : "public void isOrderedFailure()",
        "right" : "public void isOrderedFailure()",
        "info" : "MethodDeclaration[2063-2359]:MethodDeclaration[24309-24598]"
      }, {
        "left" : "public void isOrderedWithNonComparableElementsFailure()",
        "right" : "public void isOrderedWithNonComparableElementsFailure()",
        "info" : "MethodDeclaration[2363-2589]:MethodDeclaration[24602-24822]"
      }, {
        "left" : "public void listIsStrictlyOrderedWithComparator()",
        "right" : "public void iterableIsStrictlyOrderedWithComparator()",
        "info" : "MethodDeclaration[2593-2986]:MethodDeclaration[24826-25244]"
      }, {
        "left" : "public void listIsStrictlyOrderedWithComparatorFailure()",
        "right" : "public void iterableIsStrictlyOrderedWithComparatorFailure()",
        "info" : "MethodDeclaration[2990-3356]:MethodDeclaration[25248-25611]"
      }, {
        "left" : "public void listIsOrderedWithComparator()",
        "right" : "public void iterableIsOrderedWithComparator()",
        "info" : "MethodDeclaration[3360-3661]:MethodDeclaration[25615-25932]"
      }, {
        "left" : "public void listIsOrderedWithComparatorFailure()",
        "right" : "public void iterableIsOrderedWithComparatorFailure()",
        "info" : "MethodDeclaration[3665-4008]:MethodDeclaration[25936-26276]"
      }, {
        "left" : "private static final Comparator<String> COMPARE_AS_DECIMAL =\n      new Comparator<String>() {\n        @Override\n        public int compare(String a, String b) {\n          return Integer.valueOf(a).compareTo(Integer.valueOf(b));\n        }\n      };",
        "right" : "private static final Comparator<String> COMPARE_AS_DECIMAL =\n      new Comparator<String>() {\n        @Override\n        public int compare(String a, String b) {\n          return Integer.valueOf(a).compareTo(Integer.valueOf(b));\n        }\n      };",
        "info" : "FieldDeclaration[4012-4258]:FieldDeclaration[26280-26526]"
      }, {
        "left" : "public int compare(String a, String b)",
        "right" : "public int compare(String a, String b)",
        "info" : "MethodDeclaration[4114-4249]:MethodDeclaration[26382-26517]"
      }, {
        "left" : "Foo",
        "right" : "Foo",
        "info" : "TypeDeclaration[4262-4367]:TypeDeclaration[26530-26635]"
      }, {
        "left" : "private final int x;",
        "right" : "private final int x;",
        "info" : "FieldDeclaration[4293-4313]:FieldDeclaration[26561-26581]"
      }, {
        "left" : "private Foo(int x)",
        "right" : "private Foo(int x)",
        "info" : "MethodDeclaration[4319-4363]:MethodDeclaration[26587-26631]"
      }, {
        "left" : "Bar",
        "right" : "Bar",
        "info" : "TypeDeclaration[4371-4460]:TypeDeclaration[26639-26728]"
      }, {
        "left" : "private Bar(int x)",
        "right" : "private Bar(int x)",
        "info" : "MethodDeclaration[4414-4456]:MethodDeclaration[26682-26724]"
      }, {
        "left" : "private static final Comparator<Foo> FOO_COMPARATOR =\n      new Comparator<Foo>() {\n        @Override\n        public int compare(Foo a, Foo b) {\n          return Integer.compare(a.x, b.x);\n        }\n      };",
        "right" : "private static final Comparator<Foo> FOO_COMPARATOR =\n      new Comparator<Foo>() {\n        @Override\n        public int compare(Foo a, Foo b) {\n          return Integer.compare(a.x, b.x);\n        }\n      };",
        "info" : "FieldDeclaration[4464-4671]:FieldDeclaration[26732-26939]"
      }, {
        "left" : "public int compare(Foo a, Foo b)",
        "right" : "public int compare(Foo a, Foo b)",
        "info" : "MethodDeclaration[4556-4662]:MethodDeclaration[26824-26930]"
      }, {
        "left" : "public void listOrderedByBaseClassComparator()",
        "right" : "public void iterableOrderedByBaseClassComparator()",
        "info" : "MethodDeclaration[4675-4929]:MethodDeclaration[26943-27198]"
      } ],
      "mappings" : [
 {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1095-1279]:Block[23410-23564]"
      }, {
        "left" : "assertThat(Arrays.<Integer>asList()).isStrictlyOrdered();",
        "right" : "assertThat(asList()).isStrictlyOrdered();",
        "info" : "ExpressionStatement[1101-1158]:ExpressionStatement[23416-23457]"
      }, {
        "left" : "assertThat(Arrays.asList(1)).isStrictlyOrdered();",
        "right" : "assertThat(asList(1)).isStrictlyOrdered();",
        "info" : "ExpressionStatement[1163-1212]:ExpressionStatement[23462-23504]"
      }, {
        "left" : "assertThat(Arrays.asList(1, 2, 3, 4)).isStrictlyOrdered();",
        "right" : "assertThat(asList(1, 2, 3, 4)).isStrictlyOrdered();",
        "info" : "ExpressionStatement[1217-1275]:ExpressionStatement[23509-23560]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1330-1604]:Block[23615-23882]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[1336-1600]:TryStatement[23621-23878]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1340-1447]:Block[23625-23725]"
      }, {
        "left" : "assertThat(Arrays.asList(1, 2, 2, 4)).isStrictlyOrdered();",
        "right" : "assertThat(asList(1, 2, 2, 4)).isStrictlyOrdered();",
        "info" : "ExpressionStatement[1348-1406]:ExpressionStatement[23633-23684]"
      }, {
        "left" : "fail(\"Should have thrown.\");",
        "right" : "fail(\"Should have thrown.\");",
        "info" : "ExpressionStatement[1413-1441]:ExpressionStatement[23691-23719]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1473-1600]:Block[23751-23878]"
      }, {
        "left" : "assertThat(e.getMessage()).contains(\"is strictly ordered\");",
        "right" : "assertThat(e.getMessage()).contains(\"is strictly ordered\");",
        "info" : "ExpressionStatement[1481-1540]:ExpressionStatement[23759-23818]"
      }, {
        "left" : "assertThat(e.getMessage()).contains(\"<2> <2>\");",
        "right" : "assertThat(e.getMessage()).contains(\"<2> <2>\");",
        "info" : "ExpressionStatement[1547-1594]:ExpressionStatement[23825-23872]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1680-1850]:Block[23958-24122]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[1686-1846]:TryStatement[23964-24118]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1690-1809]:Block[23968-24081]"
      }, {
        "left" : "assertThat(Arrays.<Object>asList(1, \"2\", 3, \"4\")).isStrictlyOrdered();",
        "right" : "assertThat(asList((Object) 1, \"2\", 3, \"4\")).isStrictlyOrdered();",
        "info" : "ExpressionStatement[1698-1768]:ExpressionStatement[23976-24040]"
      }, {
        "left" : "fail(\"Should have thrown.\");",
        "right" : "fail(\"Should have thrown.\");",
        "info" : "ExpressionStatement[1775-1803]:ExpressionStatement[24047-24075]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1839-1846]:Block[24111-24118]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[1890-2059]:Block[24166-24305]"
      }, {
        "left" : "assertThat(Arrays.<Integer>asList()).isOrdered();",
        "right" : "assertThat(asList()).isOrdered();",
        "info" : "ExpressionStatement[1896-1945]:ExpressionStatement[24172-24205]"
      }, {
        "left" : "assertThat(Arrays.asList(1)).isOrdered();",
        "right" : "assertThat(asList(1)).isOrdered();",
        "info" : "ExpressionStatement[1950-1991]:ExpressionStatement[24210-24244]"
      }, {
        "left" : "assertThat(Arrays.asList(1, 1, 2, 3, 3, 3, 4)).isOrdered();",
        "right" : "assertThat(asList(1, 1, 2, 3, 3, 3, 4)).isOrdered();",
        "info" : "ExpressionStatement[1996-2055]:ExpressionStatement[24249-24301]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2102-2359]:Block[24348-24598]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[2108-2355]:TryStatement[24354-24594]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2112-2211]:Block[24358-24450]"
      }, {
        "left" : "assertThat(Arrays.asList(1, 3, 2, 4)).isOrdered();",
        "right" : "assertThat(asList(1, 3, 2, 4)).isOrdered();",
        "info" : "ExpressionStatement[2120-2170]:ExpressionStatement[24366-24409]"
      }, {
        "left" : "fail(\"Should have thrown.\");",
        "right" : "fail(\"Should have thrown.\");",
        "info" : "ExpressionStatement[2177-2205]:ExpressionStatement[24416-24444]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2237-2355]:Block[24476-24594]"
      }, {
        "left" : "assertThat(e.getMessage()).contains(\"is ordered\");",
        "right" : "assertThat(e.getMessage()).contains(\"is ordered\");",
        "info" : "ExpressionStatement[2245-2295]:ExpressionStatement[24484-24534]"
      }, {
        "left" : "assertThat(e.getMessage()).contains(\"<3> <2>\");",
        "right" : "assertThat(e.getMessage()).contains(\"<3> <2>\");",
        "info" : "ExpressionStatement[2302-2349]:ExpressionStatement[24541-24588]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2427-2589]:Block[24666-24822]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[2433-2585]:TryStatement[24672-24818]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2437-2548]:Block[24676-24781]"
      }, {
        "left" : "assertThat(Arrays.<Object>asList(1, \"2\", 2, \"3\")).isOrdered();",
        "right" : "assertThat(asList((Object) 1, \"2\", 2, \"3\")).isOrdered();",
        "info" : "ExpressionStatement[2445-2507]:ExpressionStatement[24684-24740]"
      }, {
        "left" : "fail(\"Should have thrown.\");",
        "right" : "fail(\"Should have thrown.\");",
        "info" : "ExpressionStatement[2514-2542]:ExpressionStatement[24747-24775]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2578-2585]:Block[24811-24818]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[2651-2986]:Block[24888-25244]"
      }, {
        "left" : "assertThat(Arrays.<String>asList()).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
        "right" : "assertThat(asList(\"1\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
        "info" : "ExpressionStatement[2657-2731]:ExpressionStatement[25008-25070]"
      }, {
        "left" : "assertThat(Arrays.asList(\"1\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
        "right" : "assertThat(emptyStrings).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
        "info" : "ExpressionStatement[2736-2805]:ExpressionStatement[24940-25003]"
      }, {
        "left" : "assertThat(Arrays.asList(\"1\", \"2\", \"10\", \"20\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
        "right" : "assertThat(asList(\"1\", \"2\", \"10\", \"20\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
        "info" : "ExpressionStatement[2896-2982]:ExpressionStatement[25161-25240]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3055-3356]:Block[25317-25611]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[3061-3352]:TryStatement[25323-25607]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3065-3199]:Block[25327-25454]"
      }, {
        "left" : "assertThat(Arrays.asList(\"1\", \"2\", \"2\", \"10\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
        "right" : "assertThat(asList(\"1\", \"2\", \"2\", \"10\")).isStrictlyOrdered(COMPARE_AS_DECIMAL);",
        "info" : "ExpressionStatement[3073-3158]:ExpressionStatement[25335-25413]"
      }, {
        "left" : "fail(\"Should have thrown.\");",
        "right" : "fail(\"Should have thrown.\");",
        "info" : "ExpressionStatement[3165-3193]:ExpressionStatement[25420-25448]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3225-3352]:Block[25480-25607]"
      }, {
        "left" : "assertThat(e.getMessage()).contains(\"is strictly ordered\");",
        "right" : "assertThat(e.getMessage()).contains(\"is strictly ordered\");",
        "info" : "ExpressionStatement[3233-3292]:ExpressionStatement[25488-25547]"
      }, {
        "left" : "assertThat(e.getMessage()).contains(\"<2> <2>\");",
        "right" : "assertThat(e.getMessage()).contains(\"<2> <2>\");",
        "info" : "ExpressionStatement[3299-3346]:ExpressionStatement[25554-25601]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3410-3661]:Block[25669-25932]"
      }, {
        "left" : "assertThat(Arrays.<String>asList()).isOrdered(COMPARE_AS_DECIMAL);",
        "right" : "assertThat(asList(\"1\")).isOrdered(COMPARE_AS_DECIMAL);",
        "info" : "ExpressionStatement[3416-3482]:ExpressionStatement[25781-25835]"
      }, {
        "left" : "assertThat(Arrays.asList(\"1\")).isOrdered(COMPARE_AS_DECIMAL);",
        "right" : "assertThat(emptyStrings).isOrdered(COMPARE_AS_DECIMAL);",
        "info" : "ExpressionStatement[3487-3548]:ExpressionStatement[25721-25776]"
      }, {
        "left" : "assertThat(Arrays.asList(\"1\", \"1\", \"2\", \"10\", \"10\", \"10\", \"20\"))\n        .isOrdered(COMPARE_AS_DECIMAL);",
        "right" : "assertThat(asList(\"1\", \"1\", \"2\", \"10\", \"10\", \"10\", \"20\")).isOrdered(COMPARE_AS_DECIMAL);",
        "info" : "ExpressionStatement[3553-3657]:ExpressionStatement[25840-25928]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3722-4008]:Block[25997-26276]"
      }, {
        "left" : "try{...}",
        "right" : "try{...}",
        "info" : "TryStatement[3728-4004]:TryStatement[26003-26272]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3732-3859]:Block[26007-26127]"
      }, {
        "left" : "assertThat(Arrays.asList(\"1\", \"10\", \"2\", \"20\")).isOrdered(COMPARE_AS_DECIMAL);",
        "right" : "assertThat(asList(\"1\", \"10\", \"2\", \"20\")).isOrdered(COMPARE_AS_DECIMAL);",
        "info" : "ExpressionStatement[3740-3818]:ExpressionStatement[26015-26086]"
      }, {
        "left" : "fail(\"Should have thrown.\");",
        "right" : "fail(\"Should have thrown.\");",
        "info" : "ExpressionStatement[3825-3853]:ExpressionStatement[26093-26121]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[3885-4004]:Block[26153-26272]"
      }, {
        "left" : "assertThat(e.getMessage()).contains(\"is ordered\");",
        "right" : "assertThat(e.getMessage()).contains(\"is ordered\");",
        "info" : "ExpressionStatement[3893-3943]:ExpressionStatement[26161-26211]"
      }, {
        "left" : "assertThat(e.getMessage()).contains(\"<10> <2>\");",
        "right" : "assertThat(e.getMessage()).contains(\"<10> <2>\");",
        "info" : "ExpressionStatement[3950-3998]:ExpressionStatement[26218-26266]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4171-4249]:Block[26439-26517]"
      }, {
        "left" : "return Integer.valueOf(a).compareTo(Integer.valueOf(b));",
        "right" : "return Integer.valueOf(a).compareTo(Integer.valueOf(b));",
        "info" : "ReturnStatement[4183-4239]:ReturnStatement[26451-26507]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4338-4363]:Block[26606-26631]"
      }, {
        "left" : "this.x = x;",
        "right" : "this.x = x;",
        "info" : "ExpressionStatement[4346-4357]:ExpressionStatement[26614-26625]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4433-4456]:Block[26701-26724]"
      }, {
        "left" : "super(x);",
        "right" : "super(x);",
        "info" : "SuperConstructorInvocation[4441-4450]:SuperConstructorInvocation[26709-26718]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4607-4662]:Block[26875-26930]"
      }, {
        "left" : "return Integer.compare(a.x, b.x);",
        "right" : "return Integer.compare(a.x, b.x);",
        "info" : "ReturnStatement[4619-4652]:ReturnStatement[26887-26920]"
      }, {
        "left" : "{}",
        "right" : "{}",
        "info" : "Block[4730-4929]:Block[27002-27198]"
      }, {
        "left" : "List<Bar> targetList = Arrays.asList(new Bar(1), new Bar(2), new Bar(3));",
        "right" : "Iterable<Bar> targetList = asList(new Bar(1), new Bar(2), new Bar(3));",
        "info" : "VariableDeclarationStatement[4736-4809]:VariableDeclarationStatement[27008-27078]"
      }, {
        "left" : "assertThat(targetList).isOrdered(FOO_COMPARATOR);",
        "right" : "assertThat(targetList).isOrdered(FOO_COMPARATOR);",
        "info" : "ExpressionStatement[4814-4863]:ExpressionStatement[27083-27132]"
      }, {
        "left" : "assertThat(targetList).isStrictlyOrdered(FOO_COMPARATOR);",
        "right" : "assertThat(targetList).isStrictlyOrdered(FOO_COMPARATOR);",
        "info" : "ExpressionStatement[4868-4925]:ExpressionStatement[27137-27194]"
      } ]
    }
  }
}