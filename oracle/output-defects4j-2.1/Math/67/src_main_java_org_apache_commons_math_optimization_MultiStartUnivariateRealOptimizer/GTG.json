{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MultiStartUnivariateRealOptimizer",
      "right" : "MultiStartUnivariateRealOptimizer",
      "info" : "TypeDeclaration[1191-12160]:TypeDeclaration[1191-12135]"
    }, {
      "left" : "private static final long serialVersionUID = 5983375963110961019L;",
      "right" : "private static final long serialVersionUID = 5983375963110961019L;",
      "info" : "FieldDeclaration[1675-1785]:FieldDeclaration[1675-1785]"
    }, {
      "left" : "private final UnivariateRealOptimizer optimizer;",
      "right" : "private final UnivariateRealOptimizer optimizer;",
      "info" : "FieldDeclaration[1791-1882]:FieldDeclaration[1791-1882]"
    }, {
      "left" : "private int maxIterations;",
      "right" : "private int maxIterations;",
      "info" : "FieldDeclaration[1888-1963]:FieldDeclaration[1888-1963]"
    }, {
      "left" : "private int maxEvaluations;",
      "right" : "private int maxEvaluations;",
      "info" : "FieldDeclaration[1969-2046]:FieldDeclaration[1969-2046]"
    }, {
      "left" : "private int totalIterations;",
      "right" : "private int totalIterations;",
      "info" : "FieldDeclaration[2052-2146]:FieldDeclaration[2052-2146]"
    }, {
      "left" : "private int totalEvaluations;",
      "right" : "private int totalEvaluations;",
      "info" : "FieldDeclaration[2152-2248]:FieldDeclaration[2152-2248]"
    }, {
      "left" : "private int starts;",
      "right" : "private int starts;",
      "info" : "FieldDeclaration[2254-2308]:FieldDeclaration[2254-2308]"
    }, {
      "left" : "private RandomGenerator generator;",
      "right" : "private RandomGenerator generator;",
      "info" : "FieldDeclaration[2314-2393]:FieldDeclaration[2314-2393]"
    }, {
      "left" : "private double[] optima;",
      "right" : "private double[] optima;",
      "info" : "FieldDeclaration[2399-2448]:FieldDeclaration[2399-2448]"
    }, {
      "left" : "private double[] optimaValues;",
      "right" : "private double[] optimaValues;",
      "info" : "FieldDeclaration[2454-2528]:FieldDeclaration[2454-2528]"
    }, {
      "left" : "public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer,\n                                             final int starts,\n                                             final RandomGenerator generator)",
      "right" : "public MultiStartUnivariateRealOptimizer(final UnivariateRealOptimizer optimizer,\n                                             final int starts,\n                                             final RandomGenerator generator)",
      "info" : "MethodDeclaration[2534-3412]:MethodDeclaration[2534-3412]"
    }, {
      "left" : "public double getAbsoluteAccuracy()",
      "right" : "public double getAbsoluteAccuracy()",
      "info" : "MethodDeclaration[3636-3752]:MethodDeclaration[3611-3727]"
    }, {
      "left" : "public int getIterationCount()",
      "right" : "public int getIterationCount()",
      "info" : "MethodDeclaration[3758-3853]:MethodDeclaration[3733-3828]"
    }, {
      "left" : "public int getMaximalIterationCount()",
      "right" : "public int getMaximalIterationCount()",
      "info" : "MethodDeclaration[3859-3959]:MethodDeclaration[3834-3934]"
    }, {
      "left" : "public int getMaxEvaluations()",
      "right" : "public int getMaxEvaluations()",
      "info" : "MethodDeclaration[3965-4059]:MethodDeclaration[3940-4034]"
    }, {
      "left" : "public int getEvaluations()",
      "right" : "public int getEvaluations()",
      "info" : "MethodDeclaration[4065-4158]:MethodDeclaration[4040-4133]"
    }, {
      "left" : "public double getRelativeAccuracy()",
      "right" : "public double getRelativeAccuracy()",
      "info" : "MethodDeclaration[4164-4280]:MethodDeclaration[4139-4255]"
    }, {
      "left" : "public void resetAbsoluteAccuracy()",
      "right" : "public void resetAbsoluteAccuracy()",
      "info" : "MethodDeclaration[4286-4397]:MethodDeclaration[4261-4372]"
    }, {
      "left" : "public void resetMaximalIterationCount()",
      "right" : "public void resetMaximalIterationCount()",
      "info" : "MethodDeclaration[4403-4524]:MethodDeclaration[4378-4499]"
    }, {
      "left" : "public void resetRelativeAccuracy()",
      "right" : "public void resetRelativeAccuracy()",
      "info" : "MethodDeclaration[4530-4641]:MethodDeclaration[4505-4616]"
    }, {
      "left" : "public void setAbsoluteAccuracy(double accuracy)",
      "right" : "public void setAbsoluteAccuracy(double accuracy)",
      "info" : "MethodDeclaration[4647-4777]:MethodDeclaration[4622-4752]"
    }, {
      "left" : "public void setMaximalIterationCount(int count)",
      "right" : "public void setMaximalIterationCount(int count)",
      "info" : "MethodDeclaration[4783-4899]:MethodDeclaration[4758-4874]"
    }, {
      "left" : "public void setMaxEvaluations(int maxEvaluations)",
      "right" : "public void setMaxEvaluations(int maxEvaluations)",
      "info" : "MethodDeclaration[4905-5033]:MethodDeclaration[4880-5008]"
    }, {
      "left" : "public void setRelativeAccuracy(double accuracy)",
      "right" : "public void setRelativeAccuracy(double accuracy)",
      "info" : "MethodDeclaration[5039-5169]:MethodDeclaration[5014-5144]"
    }, {
      "left" : "public double[] getOptima() throws IllegalStateException",
      "right" : "public double[] getOptima() throws IllegalStateException",
      "info" : "MethodDeclaration[5175-6976]:MethodDeclaration[5150-6951]"
    }, {
      "left" : "public double[] getOptimaValues() throws IllegalStateException",
      "right" : "public double[] getOptimaValues() throws IllegalStateException",
      "info" : "MethodDeclaration[6982-8365]:MethodDeclaration[6957-8340]"
    }, {
      "left" : "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n                           final double min, final double max)\n        throws ConvergenceException,\n            FunctionEvaluationException",
      "right" : "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n                           final double min, final double max)\n        throws ConvergenceException,\n            FunctionEvaluationException",
      "info" : "MethodDeclaration[8371-11835]:MethodDeclaration[8346-11810]"
    }, {
      "left" : "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n                           final double min, final double max, final double startValue)\n            throws ConvergenceException, FunctionEvaluationException",
      "right" : "public double optimize(final UnivariateRealFunction f, final GoalType goalType,\n                           final double min, final double max, final double startValue)\n            throws ConvergenceException, FunctionEvaluationException",
      "info" : "MethodDeclaration[11841-12158]:MethodDeclaration[11816-12133]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3107-3412]:Block[3107-3412]"
    }, {
      "left" : "this.optimizer        = optimizer;",
      "right" : "this.optimizer        = optimizer;",
      "info" : "ExpressionStatement[3117-3151]:ExpressionStatement[3117-3151]"
    }, {
      "left" : "this.totalIterations  = 0;",
      "right" : "this.totalIterations  = 0;",
      "info" : "ExpressionStatement[3160-3186]:ExpressionStatement[3160-3186]"
    }, {
      "left" : "this.starts           = starts;",
      "right" : "this.starts           = starts;",
      "info" : "ExpressionStatement[3195-3226]:ExpressionStatement[3195-3226]"
    }, {
      "left" : "this.generator        = generator;",
      "right" : "this.generator        = generator;",
      "info" : "ExpressionStatement[3235-3269]:ExpressionStatement[3235-3269]"
    }, {
      "left" : "this.optima           = null;",
      "right" : "this.optima           = null;",
      "info" : "ExpressionStatement[3278-3307]:ExpressionStatement[3278-3307]"
    }, {
      "left" : "setMaximalIterationCount(Integer.MAX_VALUE);",
      "right" : "setMaximalIterationCount(Integer.MAX_VALUE);",
      "info" : "ExpressionStatement[3316-3360]:ExpressionStatement[3316-3360]"
    }, {
      "left" : "setMaxEvaluations(Integer.MAX_VALUE);",
      "right" : "setMaxEvaluations(Integer.MAX_VALUE);",
      "info" : "ExpressionStatement[3369-3406]:ExpressionStatement[3369-3406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3697-3752]:Block[3672-3727]"
    }, {
      "left" : "return optimizer.getAbsoluteAccuracy();",
      "right" : "return optimizer.getAbsoluteAccuracy();",
      "info" : "ReturnStatement[3707-3746]:ReturnStatement[3682-3721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3814-3853]:Block[3789-3828]"
    }, {
      "left" : "return totalIterations;",
      "right" : "return totalIterations;",
      "info" : "ReturnStatement[3824-3847]:ReturnStatement[3799-3822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3922-3959]:Block[3897-3934]"
    }, {
      "left" : "return maxIterations;",
      "right" : "return maxIterations;",
      "info" : "ReturnStatement[3932-3953]:ReturnStatement[3907-3928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4021-4059]:Block[3996-4034]"
    }, {
      "left" : "return maxEvaluations;",
      "right" : "return maxEvaluations;",
      "info" : "ReturnStatement[4031-4053]:ReturnStatement[4006-4028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4118-4158]:Block[4093-4133]"
    }, {
      "left" : "return totalEvaluations;",
      "right" : "return totalEvaluations;",
      "info" : "ReturnStatement[4128-4152]:ReturnStatement[4103-4127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4225-4280]:Block[4200-4255]"
    }, {
      "left" : "return optimizer.getRelativeAccuracy();",
      "right" : "return optimizer.getRelativeAccuracy();",
      "info" : "ReturnStatement[4235-4274]:ReturnStatement[4210-4249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4347-4397]:Block[4322-4372]"
    }, {
      "left" : "optimizer.resetAbsoluteAccuracy();",
      "right" : "optimizer.resetAbsoluteAccuracy();",
      "info" : "ExpressionStatement[4357-4391]:ExpressionStatement[4332-4366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4469-4524]:Block[4444-4499]"
    }, {
      "left" : "optimizer.resetMaximalIterationCount();",
      "right" : "optimizer.resetMaximalIterationCount();",
      "info" : "ExpressionStatement[4479-4518]:ExpressionStatement[4454-4493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4591-4641]:Block[4566-4616]"
    }, {
      "left" : "optimizer.resetRelativeAccuracy();",
      "right" : "optimizer.resetRelativeAccuracy();",
      "info" : "ExpressionStatement[4601-4635]:ExpressionStatement[4576-4610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4721-4777]:Block[4696-4752]"
    }, {
      "left" : "optimizer.setAbsoluteAccuracy(accuracy);",
      "right" : "optimizer.setAbsoluteAccuracy(accuracy);",
      "info" : "ExpressionStatement[4731-4771]:ExpressionStatement[4706-4746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4856-4899]:Block[4831-4874]"
    }, {
      "left" : "this.maxIterations = count;",
      "right" : "this.maxIterations = count;",
      "info" : "ExpressionStatement[4866-4893]:ExpressionStatement[4841-4868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4980-5033]:Block[4955-5008]"
    }, {
      "left" : "this.maxEvaluations = maxEvaluations;",
      "right" : "this.maxEvaluations = maxEvaluations;",
      "info" : "ExpressionStatement[4990-5027]:ExpressionStatement[4965-5002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5113-5169]:Block[5088-5144]"
    }, {
      "left" : "optimizer.setRelativeAccuracy(accuracy);",
      "right" : "optimizer.setRelativeAccuracy(accuracy);",
      "info" : "ExpressionStatement[5123-5163]:ExpressionStatement[5098-5138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6788-6976]:Block[6763-6951]"
    }, {
      "left" : "if (optima == null)",
      "right" : "if (optima == null)",
      "info" : "IfStatement[6798-6939]:IfStatement[6773-6914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6818-6939]:Block[6793-6914]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);",
      "right" : "throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);",
      "info" : "ThrowStatement[6832-6929]:ThrowStatement[6807-6904]"
    }, {
      "left" : "return optima.clone();",
      "right" : "return optima.clone();",
      "info" : "ReturnStatement[6948-6970]:ReturnStatement[6923-6945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8165-8365]:Block[8140-8340]"
    }, {
      "left" : "if (optimaValues == null)",
      "right" : "if (optimaValues == null)",
      "info" : "IfStatement[8175-8322]:IfStatement[8150-8297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8201-8322]:Block[8176-8297]"
    }, {
      "left" : "throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);",
      "right" : "throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);",
      "info" : "ThrowStatement[8215-8312]:ThrowStatement[8190-8287]"
    }, {
      "left" : "return optimaValues.clone();",
      "right" : "return optimaValues.clone();",
      "info" : "ReturnStatement[8331-8359]:ReturnStatement[8306-8334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8616-11835]:Block[8591-11810]"
    }, {
      "left" : "optima           = new double[starts];",
      "right" : "optima           = new double[starts];",
      "info" : "ExpressionStatement[8627-8665]:ExpressionStatement[8602-8640]"
    }, {
      "left" : "optimaValues     = new double[starts];",
      "right" : "optimaValues     = new double[starts];",
      "info" : "ExpressionStatement[8674-8712]:ExpressionStatement[8649-8687]"
    }, {
      "left" : "totalIterations  = 0;",
      "right" : "totalIterations  = 0;",
      "info" : "ExpressionStatement[8721-8742]:ExpressionStatement[8696-8717]"
    }, {
      "left" : "totalEvaluations = 0;",
      "right" : "totalEvaluations = 0;",
      "info" : "ExpressionStatement[8751-8772]:ExpressionStatement[8726-8747]"
    }, {
      "left" : "for (int i = 0; i < starts; ++i)",
      "right" : "for (int i = 0; i < starts; ++i)",
      "info" : "ForStatement[8810-9952]:ForStatement[8785-9927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8843-9952]:Block[8818-9927]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8858-9817]:TryStatement[8833-9792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8862-9529]:Block[8837-9504]"
    }, {
      "left" : "optimizer.setMaximalIterationCount(maxIterations - totalIterations);",
      "right" : "optimizer.setMaximalIterationCount(maxIterations - totalIterations);",
      "info" : "ExpressionStatement[8880-8948]:ExpressionStatement[8855-8923]"
    }, {
      "left" : "optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);",
      "right" : "optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);",
      "info" : "ExpressionStatement[8965-9028]:ExpressionStatement[8940-9003]"
    }, {
      "left" : "final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);",
      "right" : "final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);",
      "info" : "VariableDeclarationStatement[9045-9127]:VariableDeclarationStatement[9020-9102]"
    }, {
      "left" : "final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);",
      "right" : "final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);",
      "info" : "VariableDeclarationStatement[9144-9226]:VariableDeclarationStatement[9119-9201]"
    }, {
      "left" : "optima[i]       = optimizer.optimize(f, goalType,\n                                                     Math.min(bound1, bound2),\n                                                     Math.max(bound1, bound2));",
      "right" : "optima[i]       = optimizer.optimize(f, goalType,\n                                                     Math.min(bound1, bound2),\n                                                     Math.max(bound1, bound2));",
      "info" : "ExpressionStatement[9243-9451]:ExpressionStatement[9218-9426]"
    }, {
      "left" : "optimaValues[i] = optimizer.getFunctionValue();",
      "right" : "optimaValues[i] = optimizer.getFunctionValue();",
      "info" : "ExpressionStatement[9468-9515]:ExpressionStatement[9443-9490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9570-9677]:Block[9545-9652]"
    }, {
      "left" : "optima[i]       = Double.NaN;",
      "right" : "optima[i]       = Double.NaN;",
      "info" : "ExpressionStatement[9588-9617]:ExpressionStatement[9563-9592]"
    }, {
      "left" : "optimaValues[i] = Double.NaN;",
      "right" : "optimaValues[i] = Double.NaN;",
      "info" : "ExpressionStatement[9634-9663]:ExpressionStatement[9609-9638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9710-9817]:Block[9685-9792]"
    }, {
      "left" : "optima[i]       = Double.NaN;",
      "right" : "optima[i]       = Double.NaN;",
      "info" : "ExpressionStatement[9728-9757]:ExpressionStatement[9703-9732]"
    }, {
      "left" : "optimaValues[i] = Double.NaN;",
      "right" : "optimaValues[i] = Double.NaN;",
      "info" : "ExpressionStatement[9774-9803]:ExpressionStatement[9749-9778]"
    }, {
      "left" : "totalIterations  += optimizer.getIterationCount();",
      "right" : "totalIterations  += optimizer.getIterationCount();",
      "info" : "ExpressionStatement[9831-9881]:ExpressionStatement[9806-9856]"
    }, {
      "left" : "totalEvaluations += optimizer.getEvaluations();",
      "right" : "totalEvaluations += optimizer.getEvaluations();",
      "info" : "ExpressionStatement[9894-9941]:ExpressionStatement[9869-9916]"
    }, {
      "left" : "int lastNaN = optima.length;",
      "right" : "int lastNaN = optima.length;",
      "info" : "VariableDeclarationStatement[10034-10062]:VariableDeclarationStatement[10009-10037]"
    }, {
      "left" : "for (int i = 0; i < lastNaN; ++i)",
      "right" : "for (int i = 0; i < lastNaN; ++i)",
      "info" : "ForStatement[10071-10385]:ForStatement[10046-10360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10105-10385]:Block[10080-10360]"
    }, {
      "left" : "if (Double.isNaN(optima[i]))",
      "right" : "if (Double.isNaN(optima[i]))",
      "info" : "IfStatement[10119-10375]:IfStatement[10094-10350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10148-10375]:Block[10123-10350]"
    }, {
      "left" : "optima[i] = optima[--lastNaN];",
      "right" : "optima[i] = optima[--lastNaN];",
      "info" : "ExpressionStatement[10166-10196]:ExpressionStatement[10141-10171]"
    }, {
      "left" : "optima[lastNaN + 1] = Double.NaN;",
      "right" : "optima[lastNaN + 1] = Double.NaN;",
      "info" : "ExpressionStatement[10213-10246]:ExpressionStatement[10188-10221]"
    }, {
      "left" : "optimaValues[i] = optimaValues[--lastNaN];",
      "right" : "optimaValues[i] = optimaValues[--lastNaN];",
      "info" : "ExpressionStatement[10263-10305]:ExpressionStatement[10238-10280]"
    }, {
      "left" : "optimaValues[lastNaN + 1] = Double.NaN;",
      "right" : "optimaValues[lastNaN + 1] = Double.NaN;",
      "info" : "ExpressionStatement[10322-10361]:ExpressionStatement[10297-10336]"
    }, {
      "left" : "double currX = optima[0];",
      "right" : "double currX = optima[0];",
      "info" : "VariableDeclarationStatement[10395-10420]:VariableDeclarationStatement[10370-10395]"
    }, {
      "left" : "double currY = optimaValues[0];",
      "right" : "double currY = optimaValues[0];",
      "info" : "VariableDeclarationStatement[10429-10460]:VariableDeclarationStatement[10404-10435]"
    }, {
      "left" : "for (int j = 1; j < lastNaN; ++j)",
      "right" : "for (int j = 1; j < lastNaN; ++j)",
      "info" : "ForStatement[10469-11529]:ForStatement[10444-11504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10503-11529]:Block[10478-11504]"
    }, {
      "left" : "final double prevY = currY;",
      "right" : "final double prevY = currY;",
      "info" : "VariableDeclarationStatement[10517-10544]:VariableDeclarationStatement[10492-10519]"
    }, {
      "left" : "currX = optima[j];",
      "right" : "currX = optima[j];",
      "info" : "ExpressionStatement[10557-10575]:ExpressionStatement[10532-10550]"
    }, {
      "left" : "currY = optimaValues[j];",
      "right" : "currY = optimaValues[j];",
      "info" : "ExpressionStatement[10588-10612]:ExpressionStatement[10563-10587]"
    }, {
      "left" : "if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY))",
      "right" : "if ((goalType == GoalType.MAXIMIZE) ^ (currY < prevY))",
      "info" : "IfStatement[10625-11519]:IfStatement[10600-11494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10680-11519]:Block[10655-11494]"
    }, {
      "left" : "int i = j - 1;",
      "right" : "int i = j - 1;",
      "info" : "VariableDeclarationStatement[10780-10794]:VariableDeclarationStatement[10755-10769]"
    }, {
      "left" : "double mIX = optima[i];",
      "right" : "double mIX = optima[i];",
      "info" : "VariableDeclarationStatement[10811-10834]:VariableDeclarationStatement[10786-10809]"
    }, {
      "left" : "double mIY = optimaValues[i];",
      "right" : "double mIY = optimaValues[i];",
      "info" : "VariableDeclarationStatement[10851-10880]:VariableDeclarationStatement[10826-10855]"
    }, {
      "left" : "while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))",
      "right" : "while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY)))",
      "info" : "WhileStatement[10897-11339]:WhileStatement[10872-11314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10967-11339]:Block[10942-11314]"
    }, {
      "left" : "optima[i + 1]       = mIX;",
      "right" : "optima[i + 1]       = mIX;",
      "info" : "ExpressionStatement[10989-11015]:ExpressionStatement[10964-10990]"
    }, {
      "left" : "optimaValues[i + 1] = mIY;",
      "right" : "optimaValues[i + 1] = mIY;",
      "info" : "ExpressionStatement[11036-11062]:ExpressionStatement[11011-11037]"
    }, {
      "left" : "if (i-- != 0)",
      "right" : "if (i-- != 0)",
      "info" : "IfStatement[11083-11321]:IfStatement[11058-11296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11097-11208]:Block[11072-11183]"
    }, {
      "left" : "mIX = optima[i];",
      "right" : "mIX = optima[i];",
      "info" : "ExpressionStatement[11123-11139]:ExpressionStatement[11098-11114]"
    }, {
      "left" : "mIY = optimaValues[i];",
      "right" : "mIY = optimaValues[i];",
      "info" : "ExpressionStatement[11164-11186]:ExpressionStatement[11139-11161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11214-11321]:Block[11189-11296]"
    }, {
      "left" : "mIX = Double.NaN;",
      "right" : "mIX = Double.NaN;",
      "info" : "ExpressionStatement[11240-11257]:ExpressionStatement[11215-11232]"
    }, {
      "left" : "mIY = Double.NaN;",
      "right" : "mIY = Double.NaN;",
      "info" : "ExpressionStatement[11282-11299]:ExpressionStatement[11257-11274]"
    }, {
      "left" : "optima[i + 1]       = currX;",
      "right" : "optima[i + 1]       = currX;",
      "info" : "ExpressionStatement[11356-11384]:ExpressionStatement[11331-11359]"
    }, {
      "left" : "optimaValues[i + 1] = currY;",
      "right" : "optimaValues[i + 1] = currY;",
      "info" : "ExpressionStatement[11401-11429]:ExpressionStatement[11376-11404]"
    }, {
      "left" : "currX = optima[j];",
      "right" : "currX = optima[j];",
      "info" : "ExpressionStatement[11446-11464]:ExpressionStatement[11421-11439]"
    }, {
      "left" : "currY = optimaValues[j];",
      "right" : "currY = optimaValues[j];",
      "info" : "ExpressionStatement[11481-11505]:ExpressionStatement[11456-11480]"
    }, {
      "left" : "if (Double.isNaN(optima[0]))",
      "right" : "if (Double.isNaN(optima[0]))",
      "info" : "IfStatement[11539-11727]:IfStatement[11514-11702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11568-11727]:Block[11543-11702]"
    }, {
      "left" : "throw new OptimizationException(\n                    LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,\n                    starts);",
      "right" : "throw new OptimizationException(\n                    LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,\n                    starts);",
      "info" : "ThrowStatement[11582-11717]:ThrowStatement[11557-11692]"
    }, {
      "left" : "return optima[0];",
      "right" : "return optima[0];",
      "info" : "ReturnStatement[11811-11828]:ReturnStatement[11786-11803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12103-12158]:Block[12078-12133]"
    }, {
      "left" : "return optimize(f, goalType, min, max);",
      "right" : "return optimize(f, goalType, min, max);",
      "info" : "ReturnStatement[12113-12152]:ReturnStatement[12088-12127]"
    } ]
  },
  "interFileMappings" : { }
}