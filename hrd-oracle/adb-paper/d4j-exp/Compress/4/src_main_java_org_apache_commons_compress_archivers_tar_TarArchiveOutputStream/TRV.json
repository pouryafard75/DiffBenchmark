{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final int LONGFILE_ERROR = 0;",
      "right" : "public static final int LONGFILE_ERROR = 0;",
      "info" : "FieldDeclaration[1341-1448]:FieldDeclaration[1341-1448]"
    }, {
      "left" : "public static final int LONGFILE_TRUNCATE = 1;",
      "right" : "public static final int LONGFILE_TRUNCATE = 1;",
      "info" : "FieldDeclaration[1454-1556]:FieldDeclaration[1454-1556]"
    }, {
      "left" : "public static final int LONGFILE_GNU = 2;",
      "right" : "public static final int LONGFILE_GNU = 2;",
      "info" : "FieldDeclaration[1562-1683]:FieldDeclaration[1562-1683]"
    }, {
      "left" : "private long      currSize;",
      "right" : "private long      currSize;",
      "info" : "FieldDeclaration[1689-1716]:FieldDeclaration[1689-1716]"
    }, {
      "left" : "private String    currName;",
      "right" : "private String    currName;",
      "info" : "FieldDeclaration[1721-1748]:FieldDeclaration[1721-1748]"
    }, {
      "left" : "private long      currBytes;",
      "right" : "private long      currBytes;",
      "info" : "FieldDeclaration[1753-1781]:FieldDeclaration[1753-1781]"
    }, {
      "left" : "private final byte[]    recordBuf;",
      "right" : "private final byte[]    recordBuf;",
      "info" : "FieldDeclaration[1786-1820]:FieldDeclaration[1786-1820]"
    }, {
      "left" : "private int       assemLen;",
      "right" : "private int       assemLen;",
      "info" : "FieldDeclaration[1825-1852]:FieldDeclaration[1825-1852]"
    }, {
      "left" : "private final byte[]    assemBuf;",
      "right" : "private final byte[]    assemBuf;",
      "info" : "FieldDeclaration[1857-1890]:FieldDeclaration[1857-1890]"
    }, {
      "left" : "protected final TarBuffer buffer;",
      "right" : "protected final TarBuffer buffer;",
      "info" : "FieldDeclaration[1895-1928]:FieldDeclaration[1895-1928]"
    }, {
      "left" : "private int       longFileMode = LONGFILE_ERROR;",
      "right" : "private int       longFileMode = LONGFILE_ERROR;",
      "info" : "FieldDeclaration[1933-1981]:FieldDeclaration[1933-1981]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[1987-2018]:FieldDeclaration[1987-2018]"
    }, {
      "left" : "private boolean haveUnclosedEntry = false;",
      "right" : "private boolean haveUnclosedEntry = false;",
      "info" : "FieldDeclaration[2105-2147]:FieldDeclaration[2105-2147]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[2157-2188]:FieldDeclaration[2157-2188]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os)",
      "right" : "public TarArchiveOutputStream(OutputStream os)",
      "info" : "MethodDeclaration[2194-2417]:MethodDeclaration[2194-2417]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize)",
      "info" : "MethodDeclaration[2423-2691]:MethodDeclaration[2423-2691]"
    }, {
      "left" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize)",
      "right" : "public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize)",
      "info" : "MethodDeclaration[2697-3176]:MethodDeclaration[2697-3176]"
    }, {
      "left" : "public void setLongFileMode(int longFileMode)",
      "right" : "public void setLongFileMode(int longFileMode)",
      "info" : "MethodDeclaration[3182-3568]:MethodDeclaration[3182-3568]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[3575-4160]:MethodDeclaration[3575-4160]"
    }, {
      "left" : "public int getRecordSize()",
      "right" : "public int getRecordSize()",
      "info" : "MethodDeclaration[4448-4652]:MethodDeclaration[4426-4630]"
    }, {
      "left" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "right" : "public void putArchiveEntry(ArchiveEntry archiveEntry) throws IOException",
      "info" : "MethodDeclaration[4658-6865]:MethodDeclaration[4636-6843]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[6871-7985]:MethodDeclaration[6849-7963]"
    }, {
      "left" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
      "right" : "public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException",
      "info" : "MethodDeclaration[7991-10896]:MethodDeclaration[7969-10874]"
    }, {
      "left" : "private void writeEOFRecord() throws IOException",
      "right" : "private void writeEOFRecord() throws IOException",
      "info" : "MethodDeclaration[10902-11227]:MethodDeclaration[10880-11205]"
    }, {
      "left" : "public void flush() throws IOException",
      "right" : "public void flush() throws IOException",
      "info" : "MethodDeclaration[11286-11353]:MethodDeclaration[11264-11331]"
    }, {
      "left" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "right" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "info" : "MethodDeclaration[11359-11528]:MethodDeclaration[11337-11506]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2291-2297]:Modifier[2291-2297]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[2298-2320]:SimpleName[2298-2320]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[2321-2336]:SingleVariableDeclaration[2321-2336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2338-2417]:Block[2338-2417]"
    }, {
      "left" : "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);",
      "right" : "this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2348-2411]:ConstructorInvocation[2348-2411]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2566-2572]:Modifier[2566-2572]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[2573-2595]:SimpleName[2573-2595]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[2596-2611]:SingleVariableDeclaration[2596-2611]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[2613-2626]:SingleVariableDeclaration[2613-2626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2628-2691]:Block[2628-2691]"
    }, {
      "left" : "this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);",
      "right" : "this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);",
      "info" : "ConstructorInvocation[2638-2685]:ConstructorInvocation[2638-2685]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2888-2894]:Modifier[2888-2894]"
    }, {
      "left" : "TarArchiveOutputStream",
      "right" : "TarArchiveOutputStream",
      "info" : "SimpleName[2895-2917]:SimpleName[2895-2917]"
    }, {
      "left" : "OutputStream os",
      "right" : "OutputStream os",
      "info" : "SingleVariableDeclaration[2918-2933]:SingleVariableDeclaration[2918-2933]"
    }, {
      "left" : "int blockSize",
      "right" : "int blockSize",
      "info" : "SingleVariableDeclaration[2935-2948]:SingleVariableDeclaration[2935-2948]"
    }, {
      "left" : "int recordSize",
      "right" : "int recordSize",
      "info" : "SingleVariableDeclaration[2950-2964]:SingleVariableDeclaration[2950-2964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2966-3176]:Block[2966-3176]"
    }, {
      "left" : "out = os;",
      "right" : "out = os;",
      "info" : "ExpressionStatement[2976-2985]:ExpressionStatement[2976-2985]"
    }, {
      "left" : "this.buffer = new TarBuffer(os, blockSize, recordSize);",
      "right" : "this.buffer = new TarBuffer(os, blockSize, recordSize);",
      "info" : "ExpressionStatement[2995-3050]:ExpressionStatement[2995-3050]"
    }, {
      "left" : "this.assemLen = 0;",
      "right" : "this.assemLen = 0;",
      "info" : "ExpressionStatement[3059-3077]:ExpressionStatement[3059-3077]"
    }, {
      "left" : "this.assemBuf = new byte[recordSize];",
      "right" : "this.assemBuf = new byte[recordSize];",
      "info" : "ExpressionStatement[3086-3123]:ExpressionStatement[3086-3123]"
    }, {
      "left" : "this.recordBuf = new byte[recordSize];",
      "right" : "this.recordBuf = new byte[recordSize];",
      "info" : "ExpressionStatement[3132-3170]:ExpressionStatement[3132-3170]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3473-3479]:Modifier[3473-3479]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3480-3484]:PrimitiveType[3480-3484]"
    }, {
      "left" : "setLongFileMode",
      "right" : "setLongFileMode",
      "info" : "SimpleName[3485-3500]:SimpleName[3485-3500]"
    }, {
      "left" : "int longFileMode",
      "right" : "int longFileMode",
      "info" : "SingleVariableDeclaration[3501-3517]:SingleVariableDeclaration[3501-3517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3519-3568]:Block[3519-3568]"
    }, {
      "left" : "this.longFileMode = longFileMode;",
      "right" : "this.longFileMode = longFileMode;",
      "info" : "ExpressionStatement[3529-3562]:ExpressionStatement[3529-3562]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3940-3946]:Modifier[3940-3946]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3947-3951]:PrimitiveType[3947-3951]"
    }, {
      "left" : "finish",
      "right" : "finish",
      "info" : "SimpleName[3952-3958]:SimpleName[3952-3958]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[3968-3979]:SimpleType[3968-3979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3980-4160]:Block[3980-4160]"
    }, {
      "left" : "if(haveUnclosedEntry)",
      "right" : "if(haveUnclosedEntry)",
      "info" : "IfStatement[3990-4102]:IfStatement[3990-4102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4012-4102]:Block[4012-4102]"
    }, {
      "left" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "right" : "throw new IOException(\"This archives contains unclosed entries.\");",
      "info" : "ThrowStatement[4026-4092]:ThrowStatement[4026-4092]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[4111-4128]:ExpressionStatement[4111-4128]"
    }, {
      "left" : "writeEOFRecord();",
      "right" : "writeEOFRecord();",
      "info" : "ExpressionStatement[4137-4154]:ExpressionStatement[4137-4154]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4579-4585]:Modifier[4557-4563]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4586-4589]:PrimitiveType[4564-4567]"
    }, {
      "left" : "getRecordSize",
      "right" : "getRecordSize",
      "info" : "SimpleName[4590-4603]:SimpleName[4568-4581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4606-4652]:Block[4584-4630]"
    }, {
      "left" : "return buffer.getRecordSize();",
      "right" : "return buffer.getRecordSize();",
      "info" : "ReturnStatement[4616-4646]:ReturnStatement[4594-4624]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5318-5324]:Modifier[5296-5302]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5325-5329]:PrimitiveType[5303-5307]"
    }, {
      "left" : "putArchiveEntry",
      "right" : "putArchiveEntry",
      "info" : "SimpleName[5330-5345]:SimpleName[5308-5323]"
    }, {
      "left" : "ArchiveEntry archiveEntry",
      "right" : "ArchiveEntry archiveEntry",
      "info" : "SingleVariableDeclaration[5346-5371]:SingleVariableDeclaration[5324-5349]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[5380-5391]:SimpleType[5358-5369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5392-6865]:Block[5370-6843]"
    }, {
      "left" : "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;",
      "right" : "TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;",
      "info" : "VariableDeclarationStatement[5402-5457]:VariableDeclarationStatement[5380-5435]"
    }, {
      "left" : "if (entry.getName().length() >= TarConstants.NAMELEN)",
      "right" : "if (entry.getName().length() >= TarConstants.NAMELEN)",
      "info" : "IfStatement[5466-6553]:IfStatement[5444-6531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5520-6553]:Block[5498-6531]"
    }, {
      "left" : "if (longFileMode == LONGFILE_GNU)",
      "right" : "if (longFileMode == LONGFILE_GNU)",
      "info" : "IfStatement[5535-6543]:IfStatement[5513-6521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5569-6262]:Block[5547-6240]"
    }, {
      "left" : "TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n                                                                    TarConstants.LF_GNUTYPE_LONGNAME);",
      "right" : "TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,\n                                                                    TarConstants.LF_GNUTYPE_LONGNAME);",
      "info" : "VariableDeclarationStatement[5704-5885]:VariableDeclarationStatement[5682-5863]"
    }, {
      "left" : "final byte[] nameBytes = entry.getName().getBytes();",
      "right" : "final byte[] nameBytes = entry.getName().getBytes();",
      "info" : "VariableDeclarationStatement[5903-5955]:VariableDeclarationStatement[5881-5933]"
    }, {
      "left" : "longLinkEntry.setSize(nameBytes.length + 1);",
      "right" : "longLinkEntry.setSize(nameBytes.length + 1);",
      "info" : "ExpressionStatement[6027-6071]:ExpressionStatement[6005-6049]"
    }, {
      "left" : "putArchiveEntry(longLinkEntry);",
      "right" : "putArchiveEntry(longLinkEntry);",
      "info" : "ExpressionStatement[6102-6133]:ExpressionStatement[6080-6111]"
    }, {
      "left" : "write(nameBytes);",
      "right" : "write(nameBytes);",
      "info" : "ExpressionStatement[6150-6167]:ExpressionStatement[6128-6145]"
    }, {
      "left" : "write(0);",
      "right" : "write(0);",
      "info" : "ExpressionStatement[6184-6193]:ExpressionStatement[6162-6171]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[6228-6248]:ExpressionStatement[6206-6226]"
    }, {
      "left" : "if (longFileMode != LONGFILE_TRUNCATE)",
      "right" : "if (longFileMode != LONGFILE_TRUNCATE)",
      "info" : "IfStatement[6268-6543]:IfStatement[6246-6521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6307-6543]:Block[6285-6521]"
    }, {
      "left" : "throw new RuntimeException(\"file name '\" + entry.getName()\n                                           + \"' is too long ( > \"\n                                           + TarConstants.NAMELEN + \" bytes)\");",
      "right" : "throw new RuntimeException(\"file name '\" + entry.getName()\n                                           + \"' is too long ( > \"\n                                           + TarConstants.NAMELEN + \" bytes)\");",
      "info" : "ThrowStatement[6325-6529]:ThrowStatement[6303-6507]"
    }, {
      "left" : "entry.writeEntryHeader(recordBuf);",
      "right" : "entry.writeEntryHeader(recordBuf);",
      "info" : "ExpressionStatement[6563-6597]:ExpressionStatement[6541-6575]"
    }, {
      "left" : "buffer.writeRecord(recordBuf);",
      "right" : "buffer.writeRecord(recordBuf);",
      "info" : "ExpressionStatement[6606-6636]:ExpressionStatement[6584-6614]"
    }, {
      "left" : "currBytes = 0;",
      "right" : "currBytes = 0;",
      "info" : "ExpressionStatement[6646-6660]:ExpressionStatement[6624-6638]"
    }, {
      "left" : "if (entry.isDirectory())",
      "right" : "if (entry.isDirectory())",
      "info" : "IfStatement[6670-6789]:IfStatement[6648-6767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6695-6732]:Block[6673-6710]"
    }, {
      "left" : "currSize = 0;",
      "right" : "currSize = 0;",
      "info" : "ExpressionStatement[6709-6722]:ExpressionStatement[6687-6700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6738-6789]:Block[6716-6767]"
    }, {
      "left" : "currSize = entry.getSize();",
      "right" : "currSize = entry.getSize();",
      "info" : "ExpressionStatement[6752-6779]:ExpressionStatement[6730-6757]"
    }, {
      "left" : "currName = entry.getName();",
      "right" : "currName = entry.getName();",
      "info" : "ExpressionStatement[6798-6825]:ExpressionStatement[6776-6803]"
    }, {
      "left" : "haveUnclosedEntry = true;",
      "right" : "haveUnclosedEntry = true;",
      "info" : "ExpressionStatement[6834-6859]:ExpressionStatement[6812-6837]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7324-7330]:Modifier[7302-7308]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7331-7335]:PrimitiveType[7309-7313]"
    }, {
      "left" : "closeArchiveEntry",
      "right" : "closeArchiveEntry",
      "info" : "SimpleName[7336-7353]:SimpleName[7314-7331]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7363-7374]:SimpleType[7341-7352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7375-7985]:Block[7353-7963]"
    }, {
      "left" : "if (assemLen > 0)",
      "right" : "if (assemLen > 0)",
      "info" : "IfStatement[7385-7629]:IfStatement[7363-7607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7403-7629]:Block[7381-7607]"
    }, {
      "left" : "for (int i = assemLen; i < assemBuf.length; ++i)",
      "right" : "for (int i = assemLen; i < assemBuf.length; ++i)",
      "info" : "ForStatement[7417-7514]:ForStatement[7395-7492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7466-7514]:Block[7444-7492]"
    }, {
      "left" : "assemBuf[i] = 0;",
      "right" : "assemBuf[i] = 0;",
      "info" : "ExpressionStatement[7484-7500]:ExpressionStatement[7462-7478]"
    }, {
      "left" : "buffer.writeRecord(assemBuf);",
      "right" : "buffer.writeRecord(assemBuf);",
      "info" : "ExpressionStatement[7528-7557]:ExpressionStatement[7506-7535]"
    }, {
      "left" : "currBytes += assemLen;",
      "right" : "currBytes += assemLen;",
      "info" : "ExpressionStatement[7571-7593]:ExpressionStatement[7549-7571]"
    }, {
      "left" : "assemLen = 0;",
      "right" : "assemLen = 0;",
      "info" : "ExpressionStatement[7606-7619]:ExpressionStatement[7584-7597]"
    }, {
      "left" : "if (currBytes < currSize)",
      "right" : "if (currBytes < currSize)",
      "info" : "IfStatement[7639-7944]:IfStatement[7617-7922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7665-7944]:Block[7643-7922]"
    }, {
      "left" : "throw new IOException(\"entry '\" + currName + \"' closed at '\"\n                                  + currBytes\n                                  + \"' before the '\" + currSize\n                                  + \"' bytes specified in the header were written\");",
      "right" : "throw new IOException(\"entry '\" + currName + \"' closed at '\"\n                                  + currBytes\n                                  + \"' before the '\" + currSize\n                                  + \"' bytes specified in the header were written\");",
      "info" : "ThrowStatement[7679-7934]:ThrowStatement[7657-7912]"
    }, {
      "left" : "haveUnclosedEntry = false;",
      "right" : "haveUnclosedEntry = false;",
      "info" : "ExpressionStatement[7953-7979]:ExpressionStatement[7931-7957]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8679-8685]:Modifier[8657-8663]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8686-8690]:PrimitiveType[8664-8668]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[8691-8696]:SimpleName[8669-8674]"
    }, {
      "left" : "byte[] wBuf",
      "right" : "byte[] wBuf",
      "info" : "SingleVariableDeclaration[8697-8708]:SingleVariableDeclaration[8675-8686]"
    }, {
      "left" : "int wOffset",
      "right" : "int wOffset",
      "info" : "SingleVariableDeclaration[8710-8721]:SingleVariableDeclaration[8688-8699]"
    }, {
      "left" : "int numToWrite",
      "right" : "int numToWrite",
      "info" : "SingleVariableDeclaration[8723-8737]:SingleVariableDeclaration[8701-8715]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8746-8757]:SimpleType[8724-8735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8758-10896]:Block[8736-10874]"
    }, {
      "left" : "if ((currBytes + numToWrite) > currSize)",
      "right" : "if ((currBytes + numToWrite) > currSize)",
      "info" : "IfStatement[8768-9442]:IfStatement[8746-9420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8809-9442]:Block[8787-9420]"
    }, {
      "left" : "throw new IOException(\"request to write '\" + numToWrite\n                                  + \"' bytes exceeds size in header of '\"\n                                  + currSize + \"' bytes for entry '\"\n                                  + currName + \"'\");",
      "right" : "throw new IOException(\"request to write '\" + numToWrite\n                                  + \"' bytes exceeds size in header of '\"\n                                  + currSize + \"' bytes for entry '\"\n                                  + currName + \"'\");",
      "info" : "ThrowStatement[8823-9074]:ThrowStatement[8801-9052]"
    }, {
      "left" : "if (assemLen > 0)",
      "right" : "if (assemLen > 0)",
      "info" : "IfStatement[9452-10269]:IfStatement[9430-10247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9470-10269]:Block[9448-10247]"
    }, {
      "left" : "if ((assemLen + numToWrite) >= recordBuf.length)",
      "right" : "if ((assemLen + numToWrite) >= recordBuf.length)",
      "info" : "IfStatement[9484-10259]:IfStatement[9462-10237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9533-10012]:Block[9511-9990]"
    }, {
      "left" : "int aLen = recordBuf.length - assemLen;",
      "right" : "int aLen = recordBuf.length - assemLen;",
      "info" : "VariableDeclarationStatement[9551-9590]:VariableDeclarationStatement[9529-9568]"
    }, {
      "left" : "System.arraycopy(assemBuf, 0, recordBuf, 0,\n                                 assemLen);",
      "right" : "System.arraycopy(assemBuf, 0, recordBuf, 0,\n                                 assemLen);",
      "info" : "ExpressionStatement[9608-9695]:ExpressionStatement[9586-9673]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, recordBuf,\n                                 assemLen, aLen);",
      "right" : "System.arraycopy(wBuf, wOffset, recordBuf,\n                                 assemLen, aLen);",
      "info" : "ExpressionStatement[9712-9804]:ExpressionStatement[9690-9782]"
    }, {
      "left" : "buffer.writeRecord(recordBuf);",
      "right" : "buffer.writeRecord(recordBuf);",
      "info" : "ExpressionStatement[9821-9851]:ExpressionStatement[9799-9829]"
    }, {
      "left" : "currBytes += recordBuf.length;",
      "right" : "currBytes += recordBuf.length;",
      "info" : "ExpressionStatement[9869-9899]:ExpressionStatement[9847-9877]"
    }, {
      "left" : "wOffset += aLen;",
      "right" : "wOffset += aLen;",
      "info" : "ExpressionStatement[9916-9932]:ExpressionStatement[9894-9910]"
    }, {
      "left" : "numToWrite -= aLen;",
      "right" : "numToWrite -= aLen;",
      "info" : "ExpressionStatement[9949-9968]:ExpressionStatement[9927-9946]"
    }, {
      "left" : "assemLen = 0;",
      "right" : "assemLen = 0;",
      "info" : "ExpressionStatement[9985-9998]:ExpressionStatement[9963-9976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10018-10259]:Block[9996-10237]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "right" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "info" : "ExpressionStatement[10036-10133]:ExpressionStatement[10014-10111]"
    }, {
      "left" : "wOffset += numToWrite;",
      "right" : "wOffset += numToWrite;",
      "info" : "ExpressionStatement[10151-10173]:ExpressionStatement[10129-10151]"
    }, {
      "left" : "assemLen += numToWrite;",
      "right" : "assemLen += numToWrite;",
      "info" : "ExpressionStatement[10190-10213]:ExpressionStatement[10168-10191]"
    }, {
      "left" : "numToWrite = 0;",
      "right" : "numToWrite = 0;",
      "info" : "ExpressionStatement[10230-10245]:ExpressionStatement[10208-10223]"
    }, {
      "left" : "while (numToWrite > 0)",
      "right" : "while (numToWrite > 0)",
      "info" : "WhileStatement[10435-10890]:WhileStatement[10413-10868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10458-10890]:Block[10436-10868]"
    }, {
      "left" : "if (numToWrite < recordBuf.length)",
      "right" : "if (numToWrite < recordBuf.length)",
      "info" : "IfStatement[10472-10701]:IfStatement[10450-10679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10507-10701]:Block[10485-10679]"
    }, {
      "left" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "right" : "System.arraycopy(wBuf, wOffset, assemBuf, assemLen,\n                                 numToWrite);",
      "info" : "ExpressionStatement[10525-10622]:ExpressionStatement[10503-10600]"
    }, {
      "left" : "assemLen += numToWrite;",
      "right" : "assemLen += numToWrite;",
      "info" : "ExpressionStatement[10640-10663]:ExpressionStatement[10618-10641]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10681-10687]:BreakStatement[10659-10665]"
    }, {
      "left" : "buffer.writeRecord(wBuf, wOffset);",
      "right" : "buffer.writeRecord(wBuf, wOffset);",
      "info" : "ExpressionStatement[10715-10749]:ExpressionStatement[10693-10727]"
    }, {
      "left" : "int num = recordBuf.length;",
      "right" : "int num = recordBuf.length;",
      "info" : "VariableDeclarationStatement[10763-10790]:VariableDeclarationStatement[10741-10768]"
    }, {
      "left" : "currBytes += num;",
      "right" : "currBytes += num;",
      "info" : "ExpressionStatement[10804-10821]:ExpressionStatement[10782-10799]"
    }, {
      "left" : "numToWrite -= num;",
      "right" : "numToWrite -= num;",
      "info" : "ExpressionStatement[10834-10852]:ExpressionStatement[10812-10830]"
    }, {
      "left" : "wOffset += num;",
      "right" : "wOffset += num;",
      "info" : "ExpressionStatement[10865-10880]:ExpressionStatement[10843-10858]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11038-11045]:Modifier[11016-11023]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11046-11050]:PrimitiveType[11024-11028]"
    }, {
      "left" : "writeEOFRecord",
      "right" : "writeEOFRecord",
      "info" : "SimpleName[11051-11065]:SimpleName[11029-11043]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11075-11086]:SimpleType[11053-11064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11087-11227]:Block[11065-11205]"
    }, {
      "left" : "for (int i = 0; i < recordBuf.length; ++i)",
      "right" : "for (int i = 0; i < recordBuf.length; ++i)",
      "info" : "ForStatement[11097-11181]:ForStatement[11075-11159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11140-11181]:Block[11118-11159]"
    }, {
      "left" : "recordBuf[i] = 0;",
      "right" : "recordBuf[i] = 0;",
      "info" : "ExpressionStatement[11154-11171]:ExpressionStatement[11132-11149]"
    }, {
      "left" : "buffer.writeRecord(recordBuf);",
      "right" : "buffer.writeRecord(recordBuf);",
      "info" : "ExpressionStatement[11191-11221]:ExpressionStatement[11169-11199]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11286-11292]:Modifier[11264-11270]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11293-11297]:PrimitiveType[11271-11275]"
    }, {
      "left" : "flush",
      "right" : "flush",
      "info" : "SimpleName[11298-11303]:SimpleName[11276-11281]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11313-11324]:SimpleType[11291-11302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11325-11353]:Block[11303-11331]"
    }, {
      "left" : "out.flush();",
      "right" : "out.flush();",
      "info" : "ExpressionStatement[11335-11347]:ExpressionStatement[11313-11325]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11359-11365]:Modifier[11337-11343]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[11366-11378]:SimpleType[11344-11356]"
    }, {
      "left" : "createArchiveEntry",
      "right" : "createArchiveEntry",
      "info" : "SimpleName[11379-11397]:SimpleName[11357-11375]"
    }, {
      "left" : "File inputFile",
      "right" : "File inputFile",
      "info" : "SingleVariableDeclaration[11398-11412]:SingleVariableDeclaration[11376-11390]"
    }, {
      "left" : "String entryName",
      "right" : "String entryName",
      "info" : "SingleVariableDeclaration[11414-11430]:SingleVariableDeclaration[11392-11408]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11451-11462]:SimpleType[11429-11440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11463-11528]:Block[11441-11506]"
    }, {
      "left" : "return new TarArchiveEntry(inputFile, entryName);",
      "right" : "return new TarArchiveEntry(inputFile, entryName);",
      "info" : "ReturnStatement[11473-11522]:ReturnStatement[11451-11500]"
    } ]
  },
  "interFileMappings" : { }
}