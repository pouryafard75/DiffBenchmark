{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Zip64ExtendedInformationExtraField",
      "right" : "Zip64ExtendedInformationExtraField",
      "info" : "TypeDeclaration[1046-13304]:TypeDeclaration[1046-13303]"
    }, {
      "left" : "static final ZipShort HEADER_ID = new ZipShort(0x0001);",
      "right" : "static final ZipShort HEADER_ID = new ZipShort(0x0001);",
      "info" : "FieldDeclaration[3293-3348]:FieldDeclaration[3293-3348]"
    }, {
      "left" : "private static final String LFH_MUST_HAVE_BOTH_SIZES_MSG =\n        \"Zip64 extended information must contain\"\n        + \" both size values in the local file header.\";",
      "right" : "private static final String LFH_MUST_HAVE_BOTH_SIZES_MSG =\n        \"Zip64 extended information must contain\"\n        + \" both size values in the local file header.\";",
      "info" : "FieldDeclaration[3354-3519]:FieldDeclaration[3354-3519]"
    }, {
      "left" : "private static final byte[] EMPTY = new byte[0];",
      "right" : "private static final byte[] EMPTY = new byte[0];",
      "info" : "FieldDeclaration[3524-3572]:FieldDeclaration[3524-3572]"
    }, {
      "left" : "private ZipEightByteInteger size, compressedSize, relativeHeaderOffset;",
      "right" : "private ZipEightByteInteger size, compressedSize, relativeHeaderOffset;",
      "info" : "FieldDeclaration[3578-3649]:FieldDeclaration[3578-3649]"
    }, {
      "left" : "private ZipLong diskStart;",
      "right" : "private ZipLong diskStart;",
      "info" : "FieldDeclaration[3654-3680]:FieldDeclaration[3654-3680]"
    }, {
      "left" : "private byte[] rawCentralDirectoryData;",
      "right" : "private byte[] rawCentralDirectoryData;",
      "info" : "FieldDeclaration[3686-4026]:FieldDeclaration[3686-4026]"
    }, {
      "left" : "public Zip64ExtendedInformationExtraField()",
      "right" : "public Zip64ExtendedInformationExtraField()",
      "info" : "MethodDeclaration[4032-4206]:MethodDeclaration[4032-4206]"
    }, {
      "left" : "public Zip64ExtendedInformationExtraField(ZipEightByteInteger size,\n                                              ZipEightByteInteger compressedSize)",
      "right" : "public Zip64ExtendedInformationExtraField(ZipEightByteInteger size,\n                                              ZipEightByteInteger compressedSize)",
      "info" : "MethodDeclaration[4212-4696]:MethodDeclaration[4212-4696]"
    }, {
      "left" : "public Zip64ExtendedInformationExtraField(ZipEightByteInteger size,\n                                              ZipEightByteInteger compressedSize,\n                                              ZipEightByteInteger relativeHeaderOffset,\n                                              ZipLong diskStart)",
      "right" : "public Zip64ExtendedInformationExtraField(ZipEightByteInteger size,\n                                              ZipEightByteInteger compressedSize,\n                                              ZipEightByteInteger relativeHeaderOffset,\n                                              ZipLong diskStart)",
      "info" : "MethodDeclaration[4702-5449]:MethodDeclaration[4702-5449]"
    }, {
      "left" : "public ZipShort getHeaderId()",
      "right" : "public ZipShort getHeaderId()",
      "info" : "MethodDeclaration[5455-5543]:MethodDeclaration[5455-5543]"
    }, {
      "left" : "public ZipShort getLocalFileDataLength()",
      "right" : "public ZipShort getLocalFileDataLength()",
      "info" : "MethodDeclaration[5549-5681]:MethodDeclaration[5549-5681]"
    }, {
      "left" : "public ZipShort getCentralDirectoryLength()",
      "right" : "public ZipShort getCentralDirectoryLength()",
      "info" : "MethodDeclaration[5687-6021]:MethodDeclaration[5687-6021]"
    }, {
      "left" : "public byte[] getLocalFileDataData()",
      "right" : "public byte[] getLocalFileDataData()",
      "info" : "MethodDeclaration[6027-6436]:MethodDeclaration[6027-6436]"
    }, {
      "left" : "public byte[] getCentralDirectoryData()",
      "right" : "public byte[] getCentralDirectoryData()",
      "info" : "MethodDeclaration[6442-6945]:MethodDeclaration[6442-6945]"
    }, {
      "left" : "public void parseFromLocalFileData(byte[] buffer, int offset, int length)\n        throws ZipException",
      "right" : "public void parseFromLocalFileData(byte[] buffer, int offset, int length)\n        throws ZipException",
      "info" : "MethodDeclaration[6951-8034]:MethodDeclaration[6951-8034]"
    }, {
      "left" : "public void parseFromCentralDirectoryData(byte[] buffer, int offset,\n                                              int length)\n        throws ZipException",
      "right" : "public void parseFromCentralDirectoryData(byte[] buffer, int offset,\n                                              int length)\n        throws ZipException",
      "info" : "MethodDeclaration[8040-9308]:MethodDeclaration[8040-9308]"
    }, {
      "left" : "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException",
      "right" : "public void reparseCentralDirectoryData(boolean hasUncompressedSize,\n                                            boolean hasCompressedSize,\n                                            boolean hasRelativeHeaderOffset,\n                                            boolean hasDiskStart)\n        throws ZipException",
      "info" : "MethodDeclaration[9314-11600]:MethodDeclaration[9314-11599]"
    }, {
      "left" : "public ZipEightByteInteger getSize()",
      "right" : "public ZipEightByteInteger getSize()",
      "info" : "MethodDeclaration[11606-11744]:MethodDeclaration[11605-11743]"
    }, {
      "left" : "public void setSize(ZipEightByteInteger size)",
      "right" : "public void setSize(ZipEightByteInteger size)",
      "info" : "MethodDeclaration[11750-11902]:MethodDeclaration[11749-11901]"
    }, {
      "left" : "public ZipEightByteInteger getCompressedSize()",
      "right" : "public ZipEightByteInteger getCompressedSize()",
      "info" : "MethodDeclaration[11908-12064]:MethodDeclaration[11907-12063]"
    }, {
      "left" : "public void setCompressedSize(ZipEightByteInteger compressedSize)",
      "right" : "public void setCompressedSize(ZipEightByteInteger compressedSize)",
      "info" : "MethodDeclaration[12070-12262]:MethodDeclaration[12069-12261]"
    }, {
      "left" : "public ZipEightByteInteger getRelativeHeaderOffset()",
      "right" : "public ZipEightByteInteger getRelativeHeaderOffset()",
      "info" : "MethodDeclaration[12268-12443]:MethodDeclaration[12267-12442]"
    }, {
      "left" : "public void setRelativeHeaderOffset(ZipEightByteInteger rho)",
      "right" : "public void setRelativeHeaderOffset(ZipEightByteInteger rho)",
      "info" : "MethodDeclaration[12449-12631]:MethodDeclaration[12448-12630]"
    }, {
      "left" : "public ZipLong getDiskStartNumber()",
      "right" : "public ZipLong getDiskStartNumber()",
      "info" : "MethodDeclaration[12637-12779]:MethodDeclaration[12636-12778]"
    }, {
      "left" : "public void setDiskStartNumber(ZipLong ds)",
      "right" : "public void setDiskStartNumber(ZipLong ds)",
      "info" : "MethodDeclaration[12785-12932]:MethodDeclaration[12784-12931]"
    }, {
      "left" : "private int addSizes(byte[] data)",
      "right" : "private int addSizes(byte[] data)",
      "info" : "MethodDeclaration[12938-13302]:MethodDeclaration[12937-13301]"
    } ],
    "mappings" : [
 {
      "left" : "ZipExtraField",
      "right" : "ZipExtraField",
      "info" : "SimpleType[3272-3285]:SimpleType[3272-3285]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4159-4165]:Modifier[4159-4165]"
    }, {
      "left" : "Zip64ExtendedInformationExtraField",
      "right" : "Zip64ExtendedInformationExtraField",
      "info" : "SimpleName[4166-4200]:SimpleName[4166-4200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4203-4206]:Block[4203-4206]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4491-4497]:Modifier[4491-4497]"
    }, {
      "left" : "Zip64ExtendedInformationExtraField",
      "right" : "Zip64ExtendedInformationExtraField",
      "info" : "SimpleName[4498-4532]:SimpleName[4498-4532]"
    }, {
      "left" : "ZipEightByteInteger size",
      "right" : "ZipEightByteInteger size",
      "info" : "SingleVariableDeclaration[4533-4557]:SingleVariableDeclaration[4533-4557]"
    }, {
      "left" : "ZipEightByteInteger compressedSize",
      "right" : "ZipEightByteInteger compressedSize",
      "info" : "SingleVariableDeclaration[4605-4639]:SingleVariableDeclaration[4605-4639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4641-4696]:Block[4641-4696]"
    }, {
      "left" : "this(size, compressedSize, null, null);",
      "right" : "this(size, compressedSize, null, null);",
      "info" : "ConstructorInvocation[4651-4690]:ConstructorInvocation[4651-4690]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4973-4979]:Modifier[4973-4979]"
    }, {
      "left" : "Zip64ExtendedInformationExtraField",
      "right" : "Zip64ExtendedInformationExtraField",
      "info" : "SimpleName[4980-5014]:SimpleName[4980-5014]"
    }, {
      "left" : "ZipEightByteInteger size",
      "right" : "ZipEightByteInteger size",
      "info" : "SingleVariableDeclaration[5015-5039]:SingleVariableDeclaration[5015-5039]"
    }, {
      "left" : "ZipEightByteInteger compressedSize",
      "right" : "ZipEightByteInteger compressedSize",
      "info" : "SingleVariableDeclaration[5087-5121]:SingleVariableDeclaration[5087-5121]"
    }, {
      "left" : "ZipEightByteInteger relativeHeaderOffset",
      "right" : "ZipEightByteInteger relativeHeaderOffset",
      "info" : "SingleVariableDeclaration[5169-5209]:SingleVariableDeclaration[5169-5209]"
    }, {
      "left" : "ZipLong diskStart",
      "right" : "ZipLong diskStart",
      "info" : "SingleVariableDeclaration[5257-5274]:SingleVariableDeclaration[5257-5274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5276-5449]:Block[5276-5449]"
    }, {
      "left" : "this.size = size;",
      "right" : "this.size = size;",
      "info" : "ExpressionStatement[5286-5303]:ExpressionStatement[5286-5303]"
    }, {
      "left" : "this.compressedSize = compressedSize;",
      "right" : "this.compressedSize = compressedSize;",
      "info" : "ExpressionStatement[5312-5349]:ExpressionStatement[5312-5349]"
    }, {
      "left" : "this.relativeHeaderOffset = relativeHeaderOffset;",
      "right" : "this.relativeHeaderOffset = relativeHeaderOffset;",
      "info" : "ExpressionStatement[5358-5407]:ExpressionStatement[5358-5407]"
    }, {
      "left" : "this.diskStart = diskStart;",
      "right" : "this.diskStart = diskStart;",
      "info" : "ExpressionStatement[5416-5443]:ExpressionStatement[5416-5443]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5480-5486]:Modifier[5480-5486]"
    }, {
      "left" : "ZipShort",
      "right" : "ZipShort",
      "info" : "SimpleType[5487-5495]:SimpleType[5487-5495]"
    }, {
      "left" : "getHeaderId",
      "right" : "getHeaderId",
      "info" : "SimpleName[5496-5507]:SimpleName[5496-5507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5510-5543]:Block[5510-5543]"
    }, {
      "left" : "return HEADER_ID;",
      "right" : "return HEADER_ID;",
      "info" : "ReturnStatement[5520-5537]:ReturnStatement[5520-5537]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5574-5580]:Modifier[5574-5580]"
    }, {
      "left" : "ZipShort",
      "right" : "ZipShort",
      "info" : "SimpleType[5581-5589]:SimpleType[5581-5589]"
    }, {
      "left" : "getLocalFileDataLength",
      "right" : "getLocalFileDataLength",
      "info" : "SimpleName[5590-5612]:SimpleName[5590-5612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5615-5681]:Block[5615-5681]"
    }, {
      "left" : "return new ZipShort(size != null ? 2 * DWORD : 0);",
      "right" : "return new ZipShort(size != null ? 2 * DWORD : 0);",
      "info" : "ReturnStatement[5625-5675]:ReturnStatement[5625-5675]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5712-5718]:Modifier[5712-5718]"
    }, {
      "left" : "ZipShort",
      "right" : "ZipShort",
      "info" : "SimpleType[5719-5727]:SimpleType[5719-5727]"
    }, {
      "left" : "getCentralDirectoryLength",
      "right" : "getCentralDirectoryLength",
      "info" : "SimpleName[5728-5753]:SimpleName[5728-5753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5756-6021]:Block[5756-6021]"
    }, {
      "left" : "return new ZipShort((size != null ? DWORD : 0)\n                            + (compressedSize != null ? DWORD : 0)\n                            + (relativeHeaderOffset != null ? DWORD : 0)\n                            + (diskStart != null ? WORD : 0));",
      "right" : "return new ZipShort((size != null ? DWORD : 0)\n                            + (compressedSize != null ? DWORD : 0)\n                            + (relativeHeaderOffset != null ? DWORD : 0)\n                            + (diskStart != null ? WORD : 0));",
      "info" : "ReturnStatement[5766-6015]:ReturnStatement[5766-6015]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6052-6058]:Modifier[6052-6058]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[6059-6065]:ArrayType[6059-6065]"
    }, {
      "left" : "getLocalFileDataData",
      "right" : "getLocalFileDataData",
      "info" : "SimpleName[6066-6086]:SimpleName[6066-6086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6089-6436]:Block[6089-6436]"
    }, {
      "left" : "if (size != null || compressedSize != null)",
      "right" : "if (size != null || compressedSize != null)",
      "info" : "IfStatement[6099-6408]:IfStatement[6099-6408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6143-6408]:Block[6143-6408]"
    }, {
      "left" : "if (size == null || compressedSize == null)",
      "right" : "if (size == null || compressedSize == null)",
      "info" : "IfStatement[6157-6298]:IfStatement[6157-6298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6201-6298]:Block[6201-6298]"
    }, {
      "left" : "throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG);",
      "right" : "throw new IllegalArgumentException(LFH_MUST_HAVE_BOTH_SIZES_MSG);",
      "info" : "ThrowStatement[6219-6284]:ThrowStatement[6219-6284]"
    }, {
      "left" : "byte[] data = new byte[2 * DWORD];",
      "right" : "byte[] data = new byte[2 * DWORD];",
      "info" : "VariableDeclarationStatement[6311-6345]:VariableDeclarationStatement[6311-6345]"
    }, {
      "left" : "addSizes(data);",
      "right" : "addSizes(data);",
      "info" : "ExpressionStatement[6358-6373]:ExpressionStatement[6358-6373]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[6386-6398]:ReturnStatement[6386-6398]"
    }, {
      "left" : "return EMPTY;",
      "right" : "return EMPTY;",
      "info" : "ReturnStatement[6417-6430]:ReturnStatement[6417-6430]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6467-6473]:Modifier[6467-6473]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[6474-6480]:ArrayType[6474-6480]"
    }, {
      "left" : "getCentralDirectoryData",
      "right" : "getCentralDirectoryData",
      "info" : "SimpleName[6481-6504]:SimpleName[6481-6504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6507-6945]:Block[6507-6945]"
    }, {
      "left" : "byte[] data = new byte[getCentralDirectoryLength().getValue()];",
      "right" : "byte[] data = new byte[getCentralDirectoryLength().getValue()];",
      "info" : "VariableDeclarationStatement[6517-6580]:VariableDeclarationStatement[6517-6580]"
    }, {
      "left" : "int off = addSizes(data);",
      "right" : "int off = addSizes(data);",
      "info" : "VariableDeclarationStatement[6589-6614]:VariableDeclarationStatement[6589-6614]"
    }, {
      "left" : "if (relativeHeaderOffset != null)",
      "right" : "if (relativeHeaderOffset != null)",
      "info" : "IfStatement[6623-6778]:IfStatement[6623-6778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6657-6778]:Block[6657-6778]"
    }, {
      "left" : "System.arraycopy(relativeHeaderOffset.getBytes(), 0, data, off, DWORD);",
      "right" : "System.arraycopy(relativeHeaderOffset.getBytes(), 0, data, off, DWORD);",
      "info" : "ExpressionStatement[6671-6742]:ExpressionStatement[6671-6742]"
    }, {
      "left" : "off += DWORD;",
      "right" : "off += DWORD;",
      "info" : "ExpressionStatement[6755-6768]:ExpressionStatement[6755-6768]"
    }, {
      "left" : "if (diskStart != null)",
      "right" : "if (diskStart != null)",
      "info" : "IfStatement[6787-6918]:IfStatement[6787-6918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6810-6918]:Block[6810-6918]"
    }, {
      "left" : "System.arraycopy(diskStart.getBytes(), 0, data, off, WORD);",
      "right" : "System.arraycopy(diskStart.getBytes(), 0, data, off, WORD);",
      "info" : "ExpressionStatement[6824-6883]:ExpressionStatement[6824-6883]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[6896-6908]:ExpressionStatement[6896-6908]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[6927-6939]:ReturnStatement[6927-6939]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6976-6982]:Modifier[6976-6982]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6983-6987]:PrimitiveType[6983-6987]"
    }, {
      "left" : "parseFromLocalFileData",
      "right" : "parseFromLocalFileData",
      "info" : "SimpleName[6988-7010]:SimpleName[6988-7010]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[7011-7024]:SingleVariableDeclaration[7011-7024]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[7026-7036]:SingleVariableDeclaration[7026-7036]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[7038-7048]:SingleVariableDeclaration[7038-7048]"
    }, {
      "left" : "ZipException",
      "right" : "ZipException",
      "info" : "SimpleType[7065-7077]:SimpleType[7065-7077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7078-8034]:Block[7078-8034]"
    }, {
      "left" : "if (length == 0)",
      "right" : "if (length == 0)",
      "info" : "IfStatement[7088-7366]:IfStatement[7088-7366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7105-7366]:Block[7105-7366]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7349-7356]:ReturnStatement[7349-7356]"
    }, {
      "left" : "if (length < 2 * DWORD)",
      "right" : "if (length < 2 * DWORD)",
      "info" : "IfStatement[7375-7476]:IfStatement[7375-7476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7399-7476]:Block[7399-7476]"
    }, {
      "left" : "throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);",
      "right" : "throw new ZipException(LFH_MUST_HAVE_BOTH_SIZES_MSG);",
      "info" : "ThrowStatement[7413-7466]:ThrowStatement[7413-7466]"
    }, {
      "left" : "size = new ZipEightByteInteger(buffer, offset);",
      "right" : "size = new ZipEightByteInteger(buffer, offset);",
      "info" : "ExpressionStatement[7485-7532]:ExpressionStatement[7485-7532]"
    }, {
      "left" : "offset += DWORD;",
      "right" : "offset += DWORD;",
      "info" : "ExpressionStatement[7541-7557]:ExpressionStatement[7541-7557]"
    }, {
      "left" : "compressedSize = new ZipEightByteInteger(buffer, offset);",
      "right" : "compressedSize = new ZipEightByteInteger(buffer, offset);",
      "info" : "ExpressionStatement[7566-7623]:ExpressionStatement[7566-7623]"
    }, {
      "left" : "offset += DWORD;",
      "right" : "offset += DWORD;",
      "info" : "ExpressionStatement[7632-7648]:ExpressionStatement[7632-7648]"
    }, {
      "left" : "int remaining = length - 2 * DWORD;",
      "right" : "int remaining = length - 2 * DWORD;",
      "info" : "VariableDeclarationStatement[7657-7692]:VariableDeclarationStatement[7657-7692]"
    }, {
      "left" : "if (remaining >= DWORD)",
      "right" : "if (remaining >= DWORD)",
      "info" : "IfStatement[7701-7873]:IfStatement[7701-7873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7725-7873]:Block[7725-7873]"
    }, {
      "left" : "relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);",
      "right" : "relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);",
      "info" : "ExpressionStatement[7739-7802]:ExpressionStatement[7739-7802]"
    }, {
      "left" : "offset += DWORD;",
      "right" : "offset += DWORD;",
      "info" : "ExpressionStatement[7815-7831]:ExpressionStatement[7815-7831]"
    }, {
      "left" : "remaining -= DWORD;",
      "right" : "remaining -= DWORD;",
      "info" : "ExpressionStatement[7844-7863]:ExpressionStatement[7844-7863]"
    }, {
      "left" : "if (remaining >= WORD)",
      "right" : "if (remaining >= WORD)",
      "info" : "IfStatement[7882-8028]:IfStatement[7882-8028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7905-8028]:Block[7905-8028]"
    }, {
      "left" : "diskStart = new ZipLong(buffer, offset);",
      "right" : "diskStart = new ZipLong(buffer, offset);",
      "info" : "ExpressionStatement[7919-7959]:ExpressionStatement[7919-7959]"
    }, {
      "left" : "offset += WORD;",
      "right" : "offset += WORD;",
      "info" : "ExpressionStatement[7972-7987]:ExpressionStatement[7972-7987]"
    }, {
      "left" : "remaining -= WORD;",
      "right" : "remaining -= WORD;",
      "info" : "ExpressionStatement[8000-8018]:ExpressionStatement[8000-8018]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8065-8071]:Modifier[8065-8071]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8072-8076]:PrimitiveType[8072-8076]"
    }, {
      "left" : "parseFromCentralDirectoryData",
      "right" : "parseFromCentralDirectoryData",
      "info" : "SimpleName[8077-8106]:SimpleName[8077-8106]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[8107-8120]:SingleVariableDeclaration[8107-8120]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[8122-8132]:SingleVariableDeclaration[8122-8132]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[8180-8190]:SingleVariableDeclaration[8180-8190]"
    }, {
      "left" : "ZipException",
      "right" : "ZipException",
      "info" : "SimpleType[8207-8219]:SimpleType[8207-8219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8220-9308]:Block[8220-9308]"
    }, {
      "left" : "rawCentralDirectoryData = new byte[length];",
      "right" : "rawCentralDirectoryData = new byte[length];",
      "info" : "ExpressionStatement[8293-8336]:ExpressionStatement[8293-8336]"
    }, {
      "left" : "System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);",
      "right" : "System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);",
      "info" : "ExpressionStatement[8345-8414]:ExpressionStatement[8345-8414]"
    }, {
      "left" : "if (length >= 3 * DWORD + WORD)",
      "right" : "if (length >= 3 * DWORD + WORD)",
      "info" : "IfStatement[8779-9302]:IfStatement[8779-9302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8811-8882]:Block[8811-8882]"
    }, {
      "left" : "parseFromLocalFileData(buffer, offset, length);",
      "right" : "parseFromLocalFileData(buffer, offset, length);",
      "info" : "ExpressionStatement[8825-8872]:ExpressionStatement[8825-8872]"
    }, {
      "left" : "if (length == 3 * DWORD)",
      "right" : "if (length == 3 * DWORD)",
      "info" : "IfStatement[8888-9302]:IfStatement[8888-9302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8913-9188]:Block[8913-9188]"
    }, {
      "left" : "size = new ZipEightByteInteger(buffer, offset);",
      "right" : "size = new ZipEightByteInteger(buffer, offset);",
      "info" : "ExpressionStatement[8927-8974]:ExpressionStatement[8927-8974]"
    }, {
      "left" : "offset += DWORD;",
      "right" : "offset += DWORD;",
      "info" : "ExpressionStatement[8987-9003]:ExpressionStatement[8987-9003]"
    }, {
      "left" : "compressedSize = new ZipEightByteInteger(buffer, offset);",
      "right" : "compressedSize = new ZipEightByteInteger(buffer, offset);",
      "info" : "ExpressionStatement[9016-9073]:ExpressionStatement[9016-9073]"
    }, {
      "left" : "offset += DWORD;",
      "right" : "offset += DWORD;",
      "info" : "ExpressionStatement[9086-9102]:ExpressionStatement[9086-9102]"
    }, {
      "left" : "relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);",
      "right" : "relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);",
      "info" : "ExpressionStatement[9115-9178]:ExpressionStatement[9115-9178]"
    }, {
      "left" : "if (length % DWORD == WORD)",
      "right" : "if (length % DWORD == WORD)",
      "info" : "IfStatement[9194-9302]:IfStatement[9194-9302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9222-9302]:Block[9222-9302]"
    }, {
      "left" : "diskStart = new ZipLong(buffer, offset + length - WORD);",
      "right" : "diskStart = new ZipLong(buffer, offset + length - WORD);",
      "info" : "ExpressionStatement[9236-9292]:ExpressionStatement[9236-9292]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9701-9707]:Modifier[9701-9707]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9708-9712]:PrimitiveType[9708-9712]"
    }, {
      "left" : "reparseCentralDirectoryData",
      "right" : "reparseCentralDirectoryData",
      "info" : "SimpleName[9713-9740]:SimpleName[9713-9740]"
    }, {
      "left" : "boolean hasUncompressedSize",
      "right" : "boolean hasUncompressedSize",
      "info" : "SingleVariableDeclaration[9741-9768]:SingleVariableDeclaration[9741-9768]"
    }, {
      "left" : "boolean hasCompressedSize",
      "right" : "boolean hasCompressedSize",
      "info" : "SingleVariableDeclaration[9814-9839]:SingleVariableDeclaration[9814-9839]"
    }, {
      "left" : "boolean hasRelativeHeaderOffset",
      "right" : "boolean hasRelativeHeaderOffset",
      "info" : "SingleVariableDeclaration[9885-9916]:SingleVariableDeclaration[9885-9916]"
    }, {
      "left" : "boolean hasDiskStart",
      "right" : "boolean hasDiskStart",
      "info" : "SingleVariableDeclaration[9962-9982]:SingleVariableDeclaration[9962-9982]"
    }, {
      "left" : "ZipException",
      "right" : "ZipException",
      "info" : "SimpleType[9999-10011]:SimpleType[9999-10011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10012-11600]:Block[10012-11599]"
    }, {
      "left" : "if (rawCentralDirectoryData != null)",
      "right" : "if (rawCentralDirectoryData != null)",
      "info" : "IfStatement[10022-11594]:IfStatement[10022-11593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10059-11594]:Block[10059-11593]"
    }, {
      "left" : "int expectedLength = (hasUncompressedSize ? DWORD : 0)\n                + (hasCompressedSize ? DWORD : 0)\n                + (hasRelativeHeaderOffset ? DWORD : 0)\n                + (hasDiskStart ? WORD : 0);",
      "right" : "int expectedLength = (hasUncompressedSize ? DWORD : 0)\n                + (hasCompressedSize ? DWORD : 0)\n                + (hasRelativeHeaderOffset ? DWORD : 0)\n                + (hasDiskStart ? WORD : 0);",
      "info" : "VariableDeclarationStatement[10073-10278]:VariableDeclarationStatement[10073-10278]"
    }, {
      "left" : "if (rawCentralDirectoryData.length != expectedLength)",
      "right" : "if (rawCentralDirectoryData.length < expectedLength)",
      "info" : "IfStatement[10291-10798]:IfStatement[10291-10797]"
    }, {
      "left" : "!=",
      "right" : "<",
      "info" : "INFIX_EXPRESSION_OPERATOR[10326-10328]:INFIX_EXPRESSION_OPERATOR[10326-10327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10345-10798]:Block[10344-10797]"
    }, {
      "left" : "throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" doesn't match central directory\"\n                                       + \" data.  Expected length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);",
      "right" : "throw new ZipException(\"central directory zip64 extended\"\n                                       + \" information extra field's length\"\n                                       + \" doesn't match central directory\"\n                                       + \" data.  Expected length \"\n                                       + expectedLength + \" but is \"\n                                       + rawCentralDirectoryData.length);",
      "info" : "ThrowStatement[10363-10784]:ThrowStatement[10362-10783]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[10811-10826]:VariableDeclarationStatement[10810-10825]"
    }, {
      "left" : "if (hasUncompressedSize)",
      "right" : "if (hasUncompressedSize)",
      "info" : "IfStatement[10839-10993]:IfStatement[10838-10992]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10864-10993]:Block[10863-10992]"
    }, {
      "left" : "size = new ZipEightByteInteger(rawCentralDirectoryData, offset);",
      "right" : "size = new ZipEightByteInteger(rawCentralDirectoryData, offset);",
      "info" : "ExpressionStatement[10882-10946]:ExpressionStatement[10881-10945]"
    }, {
      "left" : "offset += DWORD;",
      "right" : "offset += DWORD;",
      "info" : "ExpressionStatement[10963-10979]:ExpressionStatement[10962-10978]"
    }, {
      "left" : "if (hasCompressedSize)",
      "right" : "if (hasCompressedSize)",
      "info" : "IfStatement[11006-11225]:IfStatement[11005-11224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11029-11225]:Block[11028-11224]"
    }, {
      "left" : "compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);",
      "right" : "compressedSize = new ZipEightByteInteger(rawCentralDirectoryData,\n                                                         offset);",
      "info" : "ExpressionStatement[11047-11178]:ExpressionStatement[11046-11177]"
    }, {
      "left" : "offset += DWORD;",
      "right" : "offset += DWORD;",
      "info" : "ExpressionStatement[11195-11211]:ExpressionStatement[11194-11210]"
    }, {
      "left" : "if (hasRelativeHeaderOffset)",
      "right" : "if (hasRelativeHeaderOffset)",
      "info" : "IfStatement[11238-11432]:IfStatement[11237-11431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11267-11432]:Block[11266-11431]"
    }, {
      "left" : "relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);",
      "right" : "relativeHeaderOffset =\n                    new ZipEightByteInteger(rawCentralDirectoryData, offset);",
      "info" : "ExpressionStatement[11285-11385]:ExpressionStatement[11284-11384]"
    }, {
      "left" : "offset += DWORD;",
      "right" : "offset += DWORD;",
      "info" : "ExpressionStatement[11402-11418]:ExpressionStatement[11401-11417]"
    }, {
      "left" : "if (hasDiskStart)",
      "right" : "if (hasDiskStart)",
      "info" : "IfStatement[11445-11584]:IfStatement[11444-11583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11463-11584]:Block[11462-11583]"
    }, {
      "left" : "diskStart = new ZipLong(rawCentralDirectoryData, offset);",
      "right" : "diskStart = new ZipLong(rawCentralDirectoryData, offset);",
      "info" : "ExpressionStatement[11481-11538]:ExpressionStatement[11480-11537]"
    }, {
      "left" : "offset += WORD;",
      "right" : "offset += WORD;",
      "info" : "ExpressionStatement[11555-11570]:ExpressionStatement[11554-11569]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11679-11685]:Modifier[11678-11684]"
    }, {
      "left" : "ZipEightByteInteger",
      "right" : "ZipEightByteInteger",
      "info" : "SimpleType[11686-11705]:SimpleType[11685-11704]"
    }, {
      "left" : "getSize",
      "right" : "getSize",
      "info" : "SimpleName[11706-11713]:SimpleName[11705-11712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11716-11744]:Block[11715-11743]"
    }, {
      "left" : "return size;",
      "right" : "return size;",
      "info" : "ReturnStatement[11726-11738]:ReturnStatement[11725-11737]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11823-11829]:Modifier[11822-11828]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11830-11834]:PrimitiveType[11829-11833]"
    }, {
      "left" : "setSize",
      "right" : "setSize",
      "info" : "SimpleName[11835-11842]:SimpleName[11834-11841]"
    }, {
      "left" : "ZipEightByteInteger size",
      "right" : "ZipEightByteInteger size",
      "info" : "SingleVariableDeclaration[11843-11867]:SingleVariableDeclaration[11842-11866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11869-11902]:Block[11868-11901]"
    }, {
      "left" : "this.size = size;",
      "right" : "this.size = size;",
      "info" : "ExpressionStatement[11879-11896]:ExpressionStatement[11878-11895]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11979-11985]:Modifier[11978-11984]"
    }, {
      "left" : "ZipEightByteInteger",
      "right" : "ZipEightByteInteger",
      "info" : "SimpleType[11986-12005]:SimpleType[11985-12004]"
    }, {
      "left" : "getCompressedSize",
      "right" : "getCompressedSize",
      "info" : "SimpleName[12006-12023]:SimpleName[12005-12022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12026-12064]:Block[12025-12063]"
    }, {
      "left" : "return compressedSize;",
      "right" : "return compressedSize;",
      "info" : "ReturnStatement[12036-12058]:ReturnStatement[12035-12057]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12143-12149]:Modifier[12142-12148]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12150-12154]:PrimitiveType[12149-12153]"
    }, {
      "left" : "setCompressedSize",
      "right" : "setCompressedSize",
      "info" : "SimpleName[12155-12172]:SimpleName[12154-12171]"
    }, {
      "left" : "ZipEightByteInteger compressedSize",
      "right" : "ZipEightByteInteger compressedSize",
      "info" : "SingleVariableDeclaration[12173-12207]:SingleVariableDeclaration[12172-12206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12209-12262]:Block[12208-12261]"
    }, {
      "left" : "this.compressedSize = compressedSize;",
      "right" : "this.compressedSize = compressedSize;",
      "info" : "ExpressionStatement[12219-12256]:ExpressionStatement[12218-12255]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12346-12352]:Modifier[12345-12351]"
    }, {
      "left" : "ZipEightByteInteger",
      "right" : "ZipEightByteInteger",
      "info" : "SimpleType[12353-12372]:SimpleType[12352-12371]"
    }, {
      "left" : "getRelativeHeaderOffset",
      "right" : "getRelativeHeaderOffset",
      "info" : "SimpleName[12373-12396]:SimpleName[12372-12395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12399-12443]:Block[12398-12442]"
    }, {
      "left" : "return relativeHeaderOffset;",
      "right" : "return relativeHeaderOffset;",
      "info" : "ReturnStatement[12409-12437]:ReturnStatement[12408-12436]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12527-12533]:Modifier[12526-12532]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12534-12538]:PrimitiveType[12533-12537]"
    }, {
      "left" : "setRelativeHeaderOffset",
      "right" : "setRelativeHeaderOffset",
      "info" : "SimpleName[12539-12562]:SimpleName[12538-12561]"
    }, {
      "left" : "ZipEightByteInteger rho",
      "right" : "ZipEightByteInteger rho",
      "info" : "SingleVariableDeclaration[12563-12586]:SingleVariableDeclaration[12562-12585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12588-12631]:Block[12587-12630]"
    }, {
      "left" : "relativeHeaderOffset = rho;",
      "right" : "relativeHeaderOffset = rho;",
      "info" : "ExpressionStatement[12598-12625]:ExpressionStatement[12597-12624]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12710-12716]:Modifier[12709-12715]"
    }, {
      "left" : "ZipLong",
      "right" : "ZipLong",
      "info" : "SimpleType[12717-12724]:SimpleType[12716-12723]"
    }, {
      "left" : "getDiskStartNumber",
      "right" : "getDiskStartNumber",
      "info" : "SimpleName[12725-12743]:SimpleName[12724-12742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12746-12779]:Block[12745-12778]"
    }, {
      "left" : "return diskStart;",
      "right" : "return diskStart;",
      "info" : "ReturnStatement[12756-12773]:ReturnStatement[12755-12772]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12858-12864]:Modifier[12857-12863]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12865-12869]:PrimitiveType[12864-12868]"
    }, {
      "left" : "setDiskStartNumber",
      "right" : "setDiskStartNumber",
      "info" : "SimpleName[12870-12888]:SimpleName[12869-12887]"
    }, {
      "left" : "ZipLong ds",
      "right" : "ZipLong ds",
      "info" : "SingleVariableDeclaration[12889-12899]:SingleVariableDeclaration[12888-12898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12901-12932]:Block[12900-12931]"
    }, {
      "left" : "diskStart = ds;",
      "right" : "diskStart = ds;",
      "info" : "ExpressionStatement[12911-12926]:ExpressionStatement[12910-12925]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12938-12945]:Modifier[12937-12944]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12946-12949]:PrimitiveType[12945-12948]"
    }, {
      "left" : "addSizes",
      "right" : "addSizes",
      "info" : "SimpleName[12950-12958]:SimpleName[12949-12957]"
    }, {
      "left" : "byte[] data",
      "right" : "byte[] data",
      "info" : "SingleVariableDeclaration[12959-12970]:SingleVariableDeclaration[12958-12969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12972-13302]:Block[12971-13301]"
    }, {
      "left" : "int off = 0;",
      "right" : "int off = 0;",
      "info" : "VariableDeclarationStatement[12982-12994]:VariableDeclarationStatement[12981-12993]"
    }, {
      "left" : "if (size != null)",
      "right" : "if (size != null)",
      "info" : "IfStatement[13003-13124]:IfStatement[13002-13123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13021-13124]:Block[13020-13123]"
    }, {
      "left" : "System.arraycopy(size.getBytes(), 0, data, 0, DWORD);",
      "right" : "System.arraycopy(size.getBytes(), 0, data, 0, DWORD);",
      "info" : "ExpressionStatement[13035-13088]:ExpressionStatement[13034-13087]"
    }, {
      "left" : "off += DWORD;",
      "right" : "off += DWORD;",
      "info" : "ExpressionStatement[13101-13114]:ExpressionStatement[13100-13113]"
    }, {
      "left" : "if (compressedSize != null)",
      "right" : "if (compressedSize != null)",
      "info" : "IfStatement[13133-13276]:IfStatement[13132-13275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13161-13276]:Block[13160-13275]"
    }, {
      "left" : "System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD);",
      "right" : "System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD);",
      "info" : "ExpressionStatement[13175-13240]:ExpressionStatement[13174-13239]"
    }, {
      "left" : "off += DWORD;",
      "right" : "off += DWORD;",
      "info" : "ExpressionStatement[13253-13266]:ExpressionStatement[13252-13265]"
    }, {
      "left" : "return off;",
      "right" : "return off;",
      "info" : "ReturnStatement[13285-13296]:ReturnStatement[13284-13295]"
    } ]
  },
  "interFileMappings" : { }
}