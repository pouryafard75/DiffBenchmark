{
  "matchedElements" : [
 {
    "left" : "class : NameAnalyzer",
    "right" : "class : NameAnalyzer",
    "info" : "TypeDeclaration[2050-62191]:TypeDeclaration[2050-62246]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[3683-3761]:FieldDeclaration[3683-3761]"
  }, {
    "left" : "allNames",
    "right" : "allNames",
    "info" : "FieldDeclaration[3765-3863]:FieldDeclaration[3765-3863]"
  }, {
    "left" : "referenceGraph",
    "right" : "referenceGraph",
    "info" : "FieldDeclaration[3867-4006]:FieldDeclaration[3867-4006]"
  }, {
    "left" : "scopes",
    "right" : "scopes",
    "info" : "FieldDeclaration[4010-4368]:FieldDeclaration[4010-4368]"
  }, {
    "left" : "PROTOTYPE_SUBSTRING",
    "right" : "PROTOTYPE_SUBSTRING",
    "info" : "FieldDeclaration[4372-4475]:FieldDeclaration[4372-4475]"
  }, {
    "left" : "PROTOTYPE_SUBSTRING_LEN",
    "right" : "PROTOTYPE_SUBSTRING_LEN",
    "info" : "FieldDeclaration[4479-4565]:FieldDeclaration[4479-4565]"
  }, {
    "left" : "PROTOTYPE_SUFFIX_LEN",
    "right" : "PROTOTYPE_SUFFIX_LEN",
    "info" : "FieldDeclaration[4569-4639]:FieldDeclaration[4569-4639]"
  }, {
    "left" : "WINDOW",
    "right" : "WINDOW",
    "info" : "FieldDeclaration[4643-4710]:FieldDeclaration[4643-4710]"
  }, {
    "left" : "FUNCTION",
    "right" : "FUNCTION",
    "info" : "FieldDeclaration[4714-4793]:FieldDeclaration[4714-4793]"
  }, {
    "left" : "DEFAULT_GLOBAL_NAMES",
    "right" : "DEFAULT_GLOBAL_NAMES",
    "info" : "FieldDeclaration[4797-4967]:FieldDeclaration[4797-4967]"
  }, {
    "left" : "removeUnreferenced",
    "right" : "removeUnreferenced",
    "info" : "FieldDeclaration[4971-5075]:FieldDeclaration[4971-5075]"
  }, {
    "left" : "globalNames",
    "right" : "globalNames",
    "info" : "FieldDeclaration[5079-5163]:FieldDeclaration[5079-5163]"
  }, {
    "left" : "changeProxy",
    "right" : "changeProxy",
    "info" : "FieldDeclaration[5167-5235]:FieldDeclaration[5167-5235]"
  }, {
    "left" : "externalNames",
    "right" : "externalNames",
    "info" : "FieldDeclaration[5239-5342]:FieldDeclaration[5239-5342]"
  }, {
    "left" : "refNodes",
    "right" : "refNodes",
    "info" : "FieldDeclaration[5346-5479]:FieldDeclaration[5346-5479]"
  }, {
    "left" : "aliases",
    "right" : "aliases",
    "info" : "FieldDeclaration[5483-5708]:FieldDeclaration[5483-5708]"
  }, {
    "left" : "class : AliasSet",
    "right" : "class : AliasSet",
    "info" : "TypeDeclaration[5712-6281]:TypeDeclaration[5712-6281]"
  }, {
    "left" : "names",
    "right" : "names",
    "info" : "FieldDeclaration[6089-6127]:FieldDeclaration[6089-6127]"
  }, {
    "left" : "package AliasSet(name1 , name2 )",
    "right" : "package AliasSet(name1 , name2 )",
    "info" : "MethodDeclaration[6185-6277]:MethodDeclaration[6185-6277]"
  }, {
    "left" : "class : ReferencePropagationCallback",
    "right" : "class : ReferencePropagationCallback",
    "info" : "TypeDeclaration[6524-6994]:TypeDeclaration[6524-6994]"
  }, {
    "left" : "public traverseEdge(from , callSite , to ) : boolean",
    "right" : "public traverseEdge(from , callSite , to ) : boolean",
    "info" : "MethodDeclaration[6692-6990]:MethodDeclaration[6692-6990]"
  }, {
    "left" : "class : NameInformation",
    "right" : "class : NameInformation",
    "info" : "TypeDeclaration[6998-7822]:TypeDeclaration[6998-7822]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "FieldDeclaration[7148-7192]:FieldDeclaration[7148-7192]"
  }, {
    "left" : "isExternallyReferenceable",
    "right" : "isExternallyReferenceable",
    "info" : "FieldDeclaration[7198-7313]:FieldDeclaration[7198-7313]"
  }, {
    "left" : "isPrototype",
    "right" : "isPrototype",
    "info" : "FieldDeclaration[7319-7400]:FieldDeclaration[7319-7400]"
  }, {
    "left" : "prototypeClass",
    "right" : "prototypeClass",
    "info" : "FieldDeclaration[7406-7511]:FieldDeclaration[7406-7511]"
  }, {
    "left" : "prototypeProperty",
    "right" : "prototypeProperty",
    "info" : "FieldDeclaration[7517-7629]:FieldDeclaration[7517-7629]"
  }, {
    "left" : "superclass",
    "right" : "superclass",
    "info" : "FieldDeclaration[7635-7703]:FieldDeclaration[7635-7703]"
  }, {
    "left" : "onlyAffectsClassDef",
    "right" : "onlyAffectsClassDef",
    "info" : "FieldDeclaration[7709-7818]:FieldDeclaration[7709-7818]"
  }, {
    "left" : "class : JsName",
    "right" : "class : JsName",
    "info" : "TypeDeclaration[7826-9196]:TypeDeclaration[7826-9196]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "FieldDeclaration[7966-8010]:FieldDeclaration[7966-8010]"
  }, {
    "left" : "prototypeNames",
    "right" : "prototypeNames",
    "info" : "FieldDeclaration[8016-8128]:FieldDeclaration[8016-8128]"
  }, {
    "left" : "externallyDefined",
    "right" : "externallyDefined",
    "info" : "FieldDeclaration[8134-8222]:FieldDeclaration[8134-8222]"
  }, {
    "left" : "referenced",
    "right" : "referenced",
    "info" : "FieldDeclaration[8228-8298]:FieldDeclaration[8228-8298]"
  }, {
    "left" : "hasWrittenDescendants",
    "right" : "hasWrittenDescendants",
    "info" : "FieldDeclaration[8304-8407]:FieldDeclaration[8304-8407]"
  }, {
    "left" : "hasInstanceOfReference",
    "right" : "hasInstanceOfReference",
    "info" : "FieldDeclaration[8413-8510]:FieldDeclaration[8413-8510]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[8516-9088]:MethodDeclaration[8516-9088]"
  }, {
    "left" : "public compareTo(rhs ...) : int",
    "right" : "public compareTo(rhs ...) : int",
    "info" : "MethodDeclaration[9094-9192]:MethodDeclaration[9094-9192]"
  }, {
    "left" : "interface : RefNode",
    "right" : "interface : RefNode",
    "info" : "TypeDeclaration[9200-9344]:TypeDeclaration[9200-9344]"
  }, {
    "left" : "public name() : ",
    "right" : "public name() : ",
    "info" : "MethodDeclaration[9307-9321]:MethodDeclaration[9307-9321]"
  }, {
    "left" : "public remove() : void",
    "right" : "public remove() : void",
    "info" : "MethodDeclaration[9326-9340]:MethodDeclaration[9326-9340]"
  }, {
    "left" : "class : JsNameRefNode",
    "right" : "class : JsNameRefNode",
    "info" : "TypeDeclaration[9348-11325]:TypeDeclaration[9348-11325]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "FieldDeclaration[9606-9660]:FieldDeclaration[9606-9660]"
  }, {
    "left" : "node",
    "right" : "node",
    "info" : "FieldDeclaration[9666-9817]:FieldDeclaration[9666-9817]"
  }, {
    "left" : "parent",
    "right" : "parent",
    "info" : "FieldDeclaration[9823-9940]:FieldDeclaration[9823-9940]"
  }, {
    "left" : "package JsNameRefNode(name , node )",
    "right" : "package JsNameRefNode(name , node )",
    "info" : "MethodDeclaration[9947-10250]:MethodDeclaration[9947-10250]"
  }, {
    "left" : "public name() : ",
    "right" : "public name() : ",
    "info" : "MethodDeclaration[10256-10317]:MethodDeclaration[10256-10317]"
  }, {
    "left" : "public remove() : void",
    "right" : "public remove() : void",
    "info" : "MethodDeclaration[10323-11321]:MethodDeclaration[10323-11321]"
  }, {
    "left" : "class : PrototypeSetNode",
    "right" : "class : PrototypeSetNode",
    "info" : "TypeDeclaration[11330-12227]:TypeDeclaration[11330-12227]"
  }, {
    "left" : "package PrototypeSetNode(name , parent )",
    "right" : "package PrototypeSetNode(name , parent )",
    "info" : "MethodDeclaration[11464-11786]:MethodDeclaration[11464-11786]"
  }, {
    "left" : "public remove() : void",
    "right" : "public remove() : void",
    "info" : "MethodDeclaration[11792-12223]:MethodDeclaration[11792-12223]"
  }, {
    "left" : "class : SpecialReferenceNode",
    "right" : "class : SpecialReferenceNode",
    "info" : "TypeDeclaration[12231-12919]:TypeDeclaration[12231-12919]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "FieldDeclaration[12357-12409]:FieldDeclaration[12357-12409]"
  }, {
    "left" : "node",
    "right" : "node",
    "info" : "FieldDeclaration[12415-12450]:FieldDeclaration[12415-12450]"
  }, {
    "left" : "package SpecialReferenceNode(name , node )",
    "right" : "package SpecialReferenceNode(name , node )",
    "info" : "MethodDeclaration[12456-12680]:MethodDeclaration[12456-12680]"
  }, {
    "left" : "public name() : ",
    "right" : "public name() : ",
    "info" : "MethodDeclaration[12686-12747]:MethodDeclaration[12686-12747]"
  }, {
    "left" : "package getParent() : ",
    "right" : "package getParent() : ",
    "info" : "MethodDeclaration[12753-12808]:MethodDeclaration[12753-12808]"
  }, {
    "left" : "package getGramps() : ",
    "right" : "package getGramps() : ",
    "info" : "MethodDeclaration[12814-12915]:MethodDeclaration[12814-12915]"
  }, {
    "left" : "class : ClassDefiningFunctionNode",
    "right" : "class : ClassDefiningFunctionNode",
    "info" : "TypeDeclaration[12925-13705]:TypeDeclaration[12925-13705]"
  }, {
    "left" : "package ClassDefiningFunctionNode(name , node )",
    "right" : "package ClassDefiningFunctionNode(name , node )",
    "info" : "MethodDeclaration[13101-13387]:MethodDeclaration[13101-13387]"
  }, {
    "left" : "public remove() : void",
    "right" : "public remove() : void",
    "info" : "MethodDeclaration[13393-13701]:MethodDeclaration[13393-13701]"
  }, {
    "left" : "class : InstanceOfCheckNode",
    "right" : "class : InstanceOfCheckNode",
    "info" : "TypeDeclaration[13711-14309]:TypeDeclaration[13711-14309]"
  }, {
    "left" : "package InstanceOfCheckNode(name , node )",
    "right" : "package InstanceOfCheckNode(name , node )",
    "info" : "MethodDeclaration[13835-14184]:MethodDeclaration[13835-14184]"
  }, {
    "left" : "public remove() : void",
    "right" : "public remove() : void",
    "info" : "MethodDeclaration[14190-14305]:MethodDeclaration[14190-14305]"
  }, {
    "left" : "class : ProcessExternals",
    "right" : "class : ProcessExternals",
    "info" : "TypeDeclaration[14313-14947]:TypeDeclaration[14313-14947]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[14472-14943]:MethodDeclaration[14472-14943]"
  }, {
    "left" : "class : FindDependencyScopes",
    "right" : "class : FindDependencyScopes",
    "info" : "TypeDeclaration[14951-19504]:TypeDeclaration[14951-19559]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[16018-16921]:MethodDeclaration[16018-16921]"
  }, {
    "left" : "private recordConsumers(t , n , recordNode ) : void",
    "right" : "private recordConsumers(t , n , recordNode ) : void",
    "info" : "MethodDeclaration[16927-17862]:MethodDeclaration[16927-17862]"
  }, {
    "left" : "private recordAssignment(t , n , recordNode ) : void",
    "right" : "private recordAssignment(t , n , recordNode ) : void",
    "info" : "MethodDeclaration[17868-19305]:MethodDeclaration[17868-19360]"
  }, {
    "left" : "private recordDepScope(node , name ) : void",
    "right" : "private recordDepScope(node , name ) : void",
    "info" : "MethodDeclaration[19311-19500]:MethodDeclaration[19366-19555]"
  }, {
    "left" : "class : HoistVariableAndFunctionDeclarations",
    "right" : "class : HoistVariableAndFunctionDeclarations",
    "info" : "TypeDeclaration[19508-20419]:TypeDeclaration[19563-20474]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[19863-20415]:MethodDeclaration[19918-20470]"
  }, {
    "left" : "class : FindDeclarationsAndSetters",
    "right" : "class : FindDeclarationsAndSetters",
    "info" : "TypeDeclaration[20423-24394]:TypeDeclaration[20478-24449]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[20837-22425]:MethodDeclaration[20892-22480]"
  }, {
    "left" : "private recordSet(name , node ) : void",
    "right" : "private recordSet(name , node ) : void",
    "info" : "MethodDeclaration[22431-23145]:MethodDeclaration[22486-23200]"
  }, {
    "left" : "private recordPrototypeSet(className , prototypeProperty , node ) : void",
    "right" : "private recordPrototypeSet(className , prototypeProperty , node ) : void",
    "info" : "MethodDeclaration[23151-23739]:MethodDeclaration[23206-23794]"
  }, {
    "left" : "private recordWriteOnProperties(parentName ) : void",
    "right" : "private recordWriteOnProperties(parentName ) : void",
    "info" : "MethodDeclaration[23745-24390]:MethodDeclaration[23800-24445]"
  }, {
    "left" : "NON_LOCAL_RESULT_PREDICATE",
    "right" : "NON_LOCAL_RESULT_PREDICATE",
    "info" : "FieldDeclaration[24398-24865]:FieldDeclaration[24453-24920]"
  }, {
    "left" : "public apply(input ) : boolean",
    "right" : "public apply(input ) : boolean",
    "info" : "MethodDeclaration[24502-24856]:MethodDeclaration[24557-24911]"
  }, {
    "left" : "class : FindReferences",
    "right" : "class : FindReferences",
    "info" : "TypeDeclaration[24869-36100]:TypeDeclaration[24924-36155]"
  }, {
    "left" : "nodesToKeep",
    "right" : "nodesToKeep",
    "info" : "FieldDeclaration[25289-25311]:FieldDeclaration[25344-25366]"
  }, {
    "left" : "package FindReferences()",
    "right" : "package FindReferences()",
    "info" : "MethodDeclaration[25316-25379]:MethodDeclaration[25371-25434]"
  }, {
    "left" : "private addAllChildren(n ) : void",
    "right" : "private addAllChildren(n ) : void",
    "info" : "MethodDeclaration[25385-25600]:MethodDeclaration[25440-25655]"
  }, {
    "left" : "private addSimplifiedChildren(n ) : void",
    "right" : "private addSimplifiedChildren(n ) : void",
    "info" : "MethodDeclaration[25606-25812]:MethodDeclaration[25661-25867]"
  }, {
    "left" : "private addSimplifiedExpression(n , parent ) : void",
    "right" : "private addSimplifiedExpression(n , parent ) : void",
    "info" : "MethodDeclaration[25818-26410]:MethodDeclaration[25873-26465]"
  }, {
    "left" : "public shouldTraverse(t , n , parent ) : boolean",
    "right" : "public shouldTraverse(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[26416-27855]:MethodDeclaration[26471-27910]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[27861-29825]:MethodDeclaration[27916-29880]"
  }, {
    "left" : "private maybeRecordReferenceOrAlias(t , n , parent , nameInfo , referring ) : void",
    "right" : "private maybeRecordReferenceOrAlias(t , n , parent , nameInfo , referring ) : void",
    "info" : "MethodDeclaration[29831-32572]:MethodDeclaration[29886-32627]"
  }, {
    "left" : "private recordAliases(referers ...) : void",
    "right" : "private recordAliases(referers ...) : void",
    "info" : "MethodDeclaration[32578-32914]:MethodDeclaration[32633-32969]"
  }, {
    "left" : "private maybeHiddenAlias(n ) : boolean",
    "right" : "private maybeHiddenAlias(n ) : boolean",
    "info" : "MethodDeclaration[32920-33568]:MethodDeclaration[32975-33623]"
  }, {
    "left" : "private maybeRecordAlias(name , parent , referring , referringName ) : boolean",
    "right" : "private maybeRecordAlias(name , parent , referring , referringName ) : boolean",
    "info" : "MethodDeclaration[33574-34815]:MethodDeclaration[33629-34870]"
  }, {
    "left" : "class : NodeAccumulator",
    "right" : "class : NodeAccumulator",
    "info" : "TypeDeclaration[34821-36096]:TypeDeclaration[34876-36151]"
  }, {
    "left" : "public classDefiningCallsHaveSideEffects() : boolean",
    "right" : "public classDefiningCallsHaveSideEffects() : boolean",
    "info" : "MethodDeclaration[35023-35121]:MethodDeclaration[35078-35176]"
  }, {
    "left" : "public keepSubTree(original ) : void",
    "right" : "public keepSubTree(original ) : void",
    "info" : "MethodDeclaration[35129-35227]:MethodDeclaration[35184-35282]"
  }, {
    "left" : "public keepSimplifiedShortCircuitExpression(original ) : void",
    "right" : "public keepSimplifiedShortCircuitExpression(original ) : void",
    "info" : "MethodDeclaration[35235-35500]:MethodDeclaration[35290-35555]"
  }, {
    "left" : "public keepSimplifiedHookExpression(hook , thenHasSideEffects boolean, elseHasSideEffects boolean) : void",
    "right" : "public keepSimplifiedHookExpression(hook , thenHasSideEffects boolean, elseHasSideEffects boolean) : void",
    "info" : "MethodDeclaration[35508-36090]:MethodDeclaration[35563-36145]"
  }, {
    "left" : "class : RemoveListener",
    "right" : "class : RemoveListener",
    "info" : "TypeDeclaration[36104-36272]:TypeDeclaration[36159-36327]"
  }, {
    "left" : "public nodeRemoved(n ) : void",
    "right" : "public nodeRemoved(n ) : void",
    "info" : "MethodDeclaration[36180-36268]:MethodDeclaration[36235-36323]"
  }, {
    "left" : "package NameAnalyzer(compiler , removeUnreferenced boolean)",
    "right" : "package NameAnalyzer(compiler , removeUnreferenced boolean)",
    "info" : "MethodDeclaration[36276-36960]:MethodDeclaration[36331-37015]"
  }, {
    "left" : "public process(externs , root ) : void",
    "right" : "public process(externs , root ) : void",
    "info" : "MethodDeclaration[36964-37795]:MethodDeclaration[37019-37850]"
  }, {
    "left" : "private recordAlias(fromName , toName ) : void",
    "right" : "private recordAlias(fromName , toName ) : void",
    "info" : "MethodDeclaration[37799-39248]:MethodDeclaration[37854-39303]"
  }, {
    "left" : "private recordReference(fromName , toName , depType ) : void",
    "right" : "private recordReference(fromName , toName , depType ) : void",
    "info" : "MethodDeclaration[39252-39817]:MethodDeclaration[39307-39872]"
  }, {
    "left" : "package removeUnreferenced() : void",
    "right" : "package removeUnreferenced() : void",
    "info" : "MethodDeclaration[39821-40221]:MethodDeclaration[39876-40276]"
  }, {
    "left" : "package getHtmlReport() : ",
    "right" : "package getHtmlReport() : ",
    "info" : "MethodDeclaration[40225-42933]:MethodDeclaration[40280-42988]"
  }, {
    "left" : "private appendListItem(sb , text ) : void",
    "right" : "private appendListItem(sb , text ) : void",
    "info" : "MethodDeclaration[42937-43043]:MethodDeclaration[42992-43098]"
  }, {
    "left" : "private nameLink(name ) : ",
    "right" : "private nameLink(name ) : ",
    "info" : "MethodDeclaration[43047-43146]:MethodDeclaration[43102-43201]"
  }, {
    "left" : "private nameAnchor(name ) : ",
    "right" : "private nameAnchor(name ) : ",
    "info" : "MethodDeclaration[43150-43250]:MethodDeclaration[43205-43305]"
  }, {
    "left" : "private getName(name , canCreate boolean) : ",
    "right" : "private getName(name , canCreate boolean) : ",
    "info" : "MethodDeclaration[43254-43714]:MethodDeclaration[43309-43769]"
  }, {
    "left" : "private createName(name ) : void",
    "right" : "private createName(name ) : void",
    "info" : "MethodDeclaration[43718-44046]:MethodDeclaration[43773-44101]"
  }, {
    "left" : "private referenceAliases() : void",
    "right" : "private referenceAliases() : void",
    "info" : "MethodDeclaration[44050-45446]:MethodDeclaration[44105-45501]"
  }, {
    "left" : "private referenceParentNames() : void",
    "right" : "private referenceParentNames() : void",
    "info" : "MethodDeclaration[45450-46400]:MethodDeclaration[45505-46455]"
  }, {
    "left" : "private createNameInformation(t , n ) : ",
    "right" : "private createNameInformation(t , n ) : ",
    "info" : "MethodDeclaration[46404-50349]:MethodDeclaration[46459-50404]"
  }, {
    "left" : "private createNameInformation(name , scope , rootNameNode ) : ",
    "right" : "private createNameInformation(name , scope , rootNameNode ) : ",
    "info" : "MethodDeclaration[50353-51777]:MethodDeclaration[50408-51832]"
  }, {
    "left" : "private isExternallyReferenceable(scope , name ) : boolean",
    "right" : "private isExternallyReferenceable(scope , name ) : boolean",
    "info" : "MethodDeclaration[51781-52376]:MethodDeclaration[51836-52431]"
  }, {
    "left" : "private getDependencyScope(n ) : ",
    "right" : "private getDependencyScope(n ) : ",
    "info" : "MethodDeclaration[52380-52727]:MethodDeclaration[52435-52782]"
  }, {
    "left" : "private getEnclosingFunctionDependencyScope(t ) : ",
    "right" : "private getEnclosingFunctionDependencyScope(t ) : ",
    "info" : "MethodDeclaration[52731-53842]:MethodDeclaration[52786-53897]"
  }, {
    "left" : "private calculateReferences() : void",
    "right" : "private calculateReferences() : void",
    "info" : "MethodDeclaration[53846-54283]:MethodDeclaration[53901-54338]"
  }, {
    "left" : "private countOf(isClass , referenced ) : int",
    "right" : "private countOf(isClass , referenced ) : int",
    "info" : "MethodDeclaration[54564-55425]:MethodDeclaration[54619-55480]"
  }, {
    "left" : "private getSideEffectNodes(n ) : ",
    "right" : "private getSideEffectNodes(n ) : ",
    "info" : "MethodDeclaration[55430-56054]:MethodDeclaration[55485-56109]"
  }, {
    "left" : "private replaceWithRhs(parent , n ) : void",
    "right" : "private replaceWithRhs(parent , n ) : void",
    "info" : "MethodDeclaration[56058-57561]:MethodDeclaration[56113-57616]"
  }, {
    "left" : "private replaceTopLevelExpressionWithRhs(parent , n ) : void",
    "right" : "private replaceTopLevelExpressionWithRhs(parent , n ) : void",
    "info" : "MethodDeclaration[57565-59107]:MethodDeclaration[57620-59162]"
  }, {
    "left" : "private valueConsumedByParent(n , parent ) : boolean",
    "right" : "private valueConsumedByParent(n , parent ) : boolean",
    "info" : "MethodDeclaration[59111-60400]:MethodDeclaration[59166-60455]"
  }, {
    "left" : "private collapseReplacements(replacements ...) : ",
    "right" : "private collapseReplacements(replacements ...) : ",
    "info" : "MethodDeclaration[60404-60916]:MethodDeclaration[60459-60971]"
  }, {
    "left" : "private getRhsSubexpressions(n ) : ",
    "right" : "private getRhsSubexpressions(n ) : ",
    "info" : "MethodDeclaration[60920-62189]:MethodDeclaration[60975-62244]"
  } ],
  "mappings" : [
 {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6053-6060]:Modifier[6053-6060]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6061-6067]:Modifier[6061-6067]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6068-6073]:TYPE_DECLARATION_KIND[6068-6073]"
  }, {
    "left" : "AliasSet",
    "right" : "AliasSet",
    "info" : "SimpleName[6185-6193]:SimpleName[6185-6193]"
  }, {
    "left" : "String name1",
    "right" : "String name1",
    "info" : "SingleVariableDeclaration[6194-6206]:SingleVariableDeclaration[6194-6206]"
  }, {
    "left" : "String name2",
    "right" : "String name2",
    "info" : "SingleVariableDeclaration[6208-6220]:SingleVariableDeclaration[6208-6220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6222-6277]:Block[6222-6277]"
  }, {
    "left" : "names.add(name1);",
    "right" : "names.add(name1);",
    "info" : "ExpressionStatement[6230-6247]:ExpressionStatement[6230-6247]"
  }, {
    "left" : "names.add(name2);",
    "right" : "names.add(name2);",
    "info" : "ExpressionStatement[6254-6271]:ExpressionStatement[6254-6271]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6589-6596]:Modifier[6589-6596]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6597-6603]:Modifier[6597-6603]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[6604-6609]:TYPE_DECLARATION_KIND[6604-6609]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6692-6701]:MarkerAnnotation[6692-6701]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6706-6712]:Modifier[6706-6712]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6713-6720]:PrimitiveType[6713-6720]"
  }, {
    "left" : "traverseEdge",
    "right" : "traverseEdge",
    "info" : "SimpleName[6721-6733]:SimpleName[6721-6733]"
  }, {
    "left" : "JsName from",
    "right" : "JsName from",
    "info" : "SingleVariableDeclaration[6734-6745]:SingleVariableDeclaration[6734-6745]"
  }, {
    "left" : "RefType callSite",
    "right" : "RefType callSite",
    "info" : "SingleVariableDeclaration[6779-6795]:SingleVariableDeclaration[6779-6795]"
  }, {
    "left" : "JsName to",
    "right" : "JsName to",
    "info" : "SingleVariableDeclaration[6829-6838]:SingleVariableDeclaration[6829-6838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6840-6990]:Block[6840-6990]"
  }, {
    "left" : "if (from.referenced && !to.referenced)",
    "right" : "if (from.referenced && !to.referenced)",
    "info" : "IfStatement[6848-6984]:IfStatement[6848-6984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6887-6947]:Block[6887-6947]"
  }, {
    "left" : "to.referenced = true;",
    "right" : "to.referenced = true;",
    "info" : "ExpressionStatement[6897-6918]:ExpressionStatement[6897-6918]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[6927-6939]:ReturnStatement[6927-6939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6953-6984]:Block[6953-6984]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6963-6976]:ReturnStatement[6963-6976]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7105-7112]:Modifier[7105-7112]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7113-7119]:Modifier[7113-7119]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7120-7125]:TYPE_DECLARATION_KIND[7120-7125]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7902-7909]:Modifier[7902-7909]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7910-7916]:Modifier[7910-7916]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7917-7922]:TYPE_DECLARATION_KIND[7917-7922]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[8606-8615]:MarkerAnnotation[8606-8615]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8620-8626]:Modifier[8620-8626]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[8627-8633]:SimpleType[8627-8633]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[8634-8642]:SimpleName[8634-8642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8645-9088]:Block[8645-9088]"
  }, {
    "left" : "StringBuilder out = new StringBuilder();",
    "right" : "StringBuilder out = new StringBuilder();",
    "info" : "VariableDeclarationStatement[8653-8693]:VariableDeclarationStatement[8653-8693]"
  }, {
    "left" : "out.append(name);",
    "right" : "out.append(name);",
    "info" : "ExpressionStatement[8700-8717]:ExpressionStatement[8700-8717]"
  }, {
    "left" : "if (prototypeNames.size() > 0)",
    "right" : "if (prototypeNames.size() > 0)",
    "info" : "IfStatement[8725-9052]:IfStatement[8725-9052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8756-9052]:Block[8756-9052]"
  }, {
    "left" : "out.append(\" (CLASS)\\n\");",
    "right" : "out.append(\" (CLASS)\\n\");",
    "info" : "ExpressionStatement[8766-8791]:ExpressionStatement[8766-8791]"
  }, {
    "left" : "out.append(\" - FUNCTIONS: \");",
    "right" : "out.append(\" - FUNCTIONS: \");",
    "info" : "ExpressionStatement[8800-8829]:ExpressionStatement[8800-8829]"
  }, {
    "left" : "Iterator<String> pIter = prototypeNames.iterator();",
    "right" : "Iterator<String> pIter = prototypeNames.iterator();",
    "info" : "VariableDeclarationStatement[8838-8889]:VariableDeclarationStatement[8838-8889]"
  }, {
    "left" : "while (pIter.hasNext())",
    "right" : "while (pIter.hasNext())",
    "info" : "WhileStatement[8898-9044]:WhileStatement[8898-9044]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8922-9044]:Block[8922-9044]"
  }, {
    "left" : "out.append(pIter.next());",
    "right" : "out.append(pIter.next());",
    "info" : "ExpressionStatement[8934-8959]:ExpressionStatement[8934-8959]"
  }, {
    "left" : "if (pIter.hasNext())",
    "right" : "if (pIter.hasNext())",
    "info" : "IfStatement[8970-9034]:IfStatement[8970-9034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8991-9034]:Block[8991-9034]"
  }, {
    "left" : "out.append(\", \");",
    "right" : "out.append(\", \");",
    "info" : "ExpressionStatement[9005-9022]:ExpressionStatement[9005-9022]"
  }, {
    "left" : "return out.toString();",
    "right" : "return out.toString();",
    "info" : "ReturnStatement[9060-9082]:ReturnStatement[9060-9082]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9094-9103]:MarkerAnnotation[9094-9103]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9108-9114]:Modifier[9108-9114]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[9115-9118]:PrimitiveType[9115-9118]"
  }, {
    "left" : "compareTo",
    "right" : "compareTo",
    "info" : "SimpleName[9119-9128]:SimpleName[9119-9128]"
  }, {
    "left" : "JsName rhs",
    "right" : "JsName rhs",
    "info" : "SingleVariableDeclaration[9129-9139]:SingleVariableDeclaration[9129-9139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9141-9192]:Block[9141-9192]"
  }, {
    "left" : "return this.name.compareTo(rhs.name);",
    "right" : "return this.name.compareTo(rhs.name);",
    "info" : "ReturnStatement[9149-9186]:ReturnStatement[9149-9186]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[9283-9292]:TYPE_DECLARATION_KIND[9283-9292]"
  }, {
    "left" : "JsName",
    "right" : "JsName",
    "info" : "SimpleType[9307-9313]:SimpleType[9307-9313]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "SimpleName[9314-9318]:SimpleName[9314-9318]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9326-9330]:PrimitiveType[9326-9330]"
  }, {
    "left" : "remove",
    "right" : "remove",
    "info" : "SimpleName[9331-9337]:SimpleName[9331-9337]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9553-9560]:Modifier[9553-9560]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[9561-9566]:TYPE_DECLARATION_KIND[9561-9566]"
  }, {
    "left" : "JsNameRefNode",
    "right" : "JsNameRefNode",
    "info" : "SimpleName[10119-10132]:SimpleName[10119-10132]"
  }, {
    "left" : "JsName name",
    "right" : "JsName name",
    "info" : "SingleVariableDeclaration[10133-10144]:SingleVariableDeclaration[10133-10144]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[10146-10155]:SingleVariableDeclaration[10146-10155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10157-10250]:Block[10157-10250]"
  }, {
    "left" : "this.name = name;",
    "right" : "this.name = name;",
    "info" : "ExpressionStatement[10165-10182]:ExpressionStatement[10165-10182]"
  }, {
    "left" : "this.node = node;",
    "right" : "this.node = node;",
    "info" : "ExpressionStatement[10189-10206]:ExpressionStatement[10189-10206]"
  }, {
    "left" : "this.parent = node.getParent();",
    "right" : "this.parent = node.getParent();",
    "info" : "ExpressionStatement[10213-10244]:ExpressionStatement[10213-10244]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10256-10265]:MarkerAnnotation[10256-10265]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10270-10276]:Modifier[10270-10276]"
  }, {
    "left" : "JsName",
    "right" : "JsName",
    "info" : "SimpleType[10277-10283]:SimpleType[10277-10283]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "SimpleName[10284-10288]:SimpleName[10284-10288]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10291-10317]:Block[10291-10317]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[10299-10311]:ReturnStatement[10299-10311]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[10323-10332]:MarkerAnnotation[10323-10332]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10337-10343]:Modifier[10337-10343]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10344-10348]:PrimitiveType[10344-10348]"
  }, {
    "left" : "remove",
    "right" : "remove",
    "info" : "SimpleName[10349-10355]:SimpleName[10349-10355]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10358-11321]:Block[10358-11321]"
  }, {
    "left" : "Node containingNode = parent.getParent();",
    "right" : "Node containingNode = parent.getParent();",
    "info" : "VariableDeclarationStatement[10511-10552]:VariableDeclarationStatement[10511-10552]"
  }, {
    "left" : "switch (parent.getType()) {\n        case Token.VAR:\n          Preconditions.checkState(parent.hasOneChild());\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.FUNCTION:\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.ASSIGN:\n          if (containingNode.isExprResult()) {\n            replaceWithRhs(containingNode.getParent(), containingNode);\n          } else {\n            replaceWithRhs(containingNode, parent);\n          }\n          break;\n        case Token.OBJECTLIT:\n          // TODO(nicksantos): Come up with a way to remove this.\n          // If we remove object lit keys, then we will need to also\n          // create dependency scopes for them.\n          break;\n      }",
    "right" : "switch (parent.getType()) {\n        case Token.VAR:\n          Preconditions.checkState(parent.hasOneChild());\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.FUNCTION:\n          replaceWithRhs(containingNode, parent);\n          break;\n        case Token.ASSIGN:\n          if (containingNode.isExprResult()) {\n            replaceWithRhs(containingNode.getParent(), containingNode);\n          } else {\n            replaceWithRhs(containingNode, parent);\n          }\n          break;\n        case Token.OBJECTLIT:\n          // TODO(nicksantos): Come up with a way to remove this.\n          // If we remove object lit keys, then we will need to also\n          // create dependency scopes for them.\n          break;\n      }",
    "info" : "SwitchStatement[10559-11315]:SwitchStatement[10559-11315]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[10595-10610]:SwitchCase[10595-10610]"
  }, {
    "left" : "Preconditions.checkState(parent.hasOneChild());",
    "right" : "Preconditions.checkState(parent.hasOneChild());",
    "info" : "ExpressionStatement[10621-10668]:ExpressionStatement[10621-10668]"
  }, {
    "left" : "replaceWithRhs(containingNode, parent);",
    "right" : "replaceWithRhs(containingNode, parent);",
    "info" : "ExpressionStatement[10679-10718]:ExpressionStatement[10679-10718]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10729-10735]:BreakStatement[10729-10735]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[10744-10764]:SwitchCase[10744-10764]"
  }, {
    "left" : "replaceWithRhs(containingNode, parent);",
    "right" : "replaceWithRhs(containingNode, parent);",
    "info" : "ExpressionStatement[10775-10814]:ExpressionStatement[10775-10814]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10825-10831]:BreakStatement[10825-10831]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[10840-10858]:SwitchCase[10840-10858]"
  }, {
    "left" : "if (containingNode.isExprResult())",
    "right" : "if (containingNode.isExprResult())",
    "info" : "IfStatement[10869-11060]:IfStatement[10869-11060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10904-10989]:Block[10904-10989]"
  }, {
    "left" : "replaceWithRhs(containingNode.getParent(), containingNode);",
    "right" : "replaceWithRhs(containingNode.getParent(), containingNode);",
    "info" : "ExpressionStatement[10918-10977]:ExpressionStatement[10918-10977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10995-11060]:Block[10995-11060]"
  }, {
    "left" : "replaceWithRhs(containingNode, parent);",
    "right" : "replaceWithRhs(containingNode, parent);",
    "info" : "ExpressionStatement[11009-11048]:ExpressionStatement[11009-11048]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11071-11077]:BreakStatement[11071-11077]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[11086-11107]:SwitchCase[11086-11107]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11301-11307]:BreakStatement[11301-11307]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11405-11412]:Modifier[11405-11412]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[11413-11418]:TYPE_DECLARATION_KIND[11413-11418]"
  }, {
    "left" : "PrototypeSetNode",
    "right" : "PrototypeSetNode",
    "info" : "SimpleName[11641-11657]:SimpleName[11641-11657]"
  }, {
    "left" : "JsName name",
    "right" : "JsName name",
    "info" : "SingleVariableDeclaration[11658-11669]:SingleVariableDeclaration[11658-11669]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[11671-11682]:SingleVariableDeclaration[11671-11682]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11684-11786]:Block[11684-11786]"
  }, {
    "left" : "super(name, parent.getFirstChild());",
    "right" : "super(name, parent.getFirstChild());",
    "info" : "SuperConstructorInvocation[11692-11728]:SuperConstructorInvocation[11692-11728]"
  }, {
    "left" : "Preconditions.checkState(parent.isAssign());",
    "right" : "Preconditions.checkState(parent.isAssign());",
    "info" : "ExpressionStatement[11736-11780]:ExpressionStatement[11736-11780]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[11792-11801]:MarkerAnnotation[11792-11801]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11802-11808]:Modifier[11802-11808]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11809-11813]:PrimitiveType[11809-11813]"
  }, {
    "left" : "remove",
    "right" : "remove",
    "info" : "SimpleName[11814-11820]:SimpleName[11814-11820]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11823-12223]:Block[11823-12223]"
  }, {
    "left" : "Node gramps = parent.getParent();",
    "right" : "Node gramps = parent.getParent();",
    "info" : "VariableDeclarationStatement[11831-11864]:VariableDeclarationStatement[11831-11864]"
  }, {
    "left" : "if (gramps.isExprResult())",
    "right" : "if (gramps.isExprResult())",
    "info" : "IfStatement[11871-12217]:IfStatement[11871-12217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11898-12020]:Block[11898-12020]"
  }, {
    "left" : "changeProxy.removeChild(gramps.getParent(), gramps);",
    "right" : "changeProxy.removeChild(gramps.getParent(), gramps);",
    "info" : "ExpressionStatement[11960-12012]:ExpressionStatement[11960-12012]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12026-12217]:Block[12026-12217]"
  }, {
    "left" : "changeProxy.replaceWith(gramps, parent,\n                                parent.getLastChild().detachFromParent());",
    "right" : "changeProxy.replaceWith(gramps, parent,\n                                parent.getLastChild().detachFromParent());",
    "info" : "ExpressionStatement[12095-12209]:ExpressionStatement[12095-12209]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12288-12295]:Modifier[12288-12295]"
  }, {
    "left" : "abstract",
    "right" : "abstract",
    "info" : "Modifier[12296-12304]:Modifier[12296-12304]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[12305-12310]:TYPE_DECLARATION_KIND[12305-12310]"
  }, {
    "left" : "SpecialReferenceNode",
    "right" : "SpecialReferenceNode",
    "info" : "SimpleName[12580-12600]:SimpleName[12580-12600]"
  }, {
    "left" : "JsName name",
    "right" : "JsName name",
    "info" : "SingleVariableDeclaration[12601-12612]:SingleVariableDeclaration[12601-12612]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[12614-12623]:SingleVariableDeclaration[12614-12623]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12625-12680]:Block[12625-12680]"
  }, {
    "left" : "this.name = name;",
    "right" : "this.name = name;",
    "info" : "ExpressionStatement[12633-12650]:ExpressionStatement[12633-12650]"
  }, {
    "left" : "this.node = node;",
    "right" : "this.node = node;",
    "info" : "ExpressionStatement[12657-12674]:ExpressionStatement[12657-12674]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[12686-12695]:MarkerAnnotation[12686-12695]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12700-12706]:Modifier[12700-12706]"
  }, {
    "left" : "JsName",
    "right" : "JsName",
    "info" : "SimpleType[12707-12713]:SimpleType[12707-12713]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "SimpleName[12714-12718]:SimpleName[12714-12718]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12721-12747]:Block[12721-12747]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[12729-12741]:ReturnStatement[12729-12741]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[12753-12757]:SimpleType[12753-12757]"
  }, {
    "left" : "getParent",
    "right" : "getParent",
    "info" : "SimpleName[12758-12767]:SimpleName[12758-12767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12770-12808]:Block[12770-12808]"
  }, {
    "left" : "return node.getParent();",
    "right" : "return node.getParent();",
    "info" : "ReturnStatement[12778-12802]:ReturnStatement[12778-12802]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[12814-12818]:SimpleType[12814-12818]"
  }, {
    "left" : "getGramps",
    "right" : "getGramps",
    "info" : "SimpleName[12819-12828]:SimpleName[12819-12828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12831-12915]:Block[12831-12915]"
  }, {
    "left" : "return node.getParent() == null ? null : node.getParent().getParent();",
    "right" : "return node.getParent() == null ? null : node.getParent().getParent();",
    "info" : "ReturnStatement[12839-12909]:ReturnStatement[12839-12909]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13026-13033]:Modifier[13026-13033]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[13034-13039]:TYPE_DECLARATION_KIND[13034-13039]"
  }, {
    "left" : "ClassDefiningFunctionNode",
    "right" : "ClassDefiningFunctionNode",
    "info" : "SimpleName[13258-13283]:SimpleName[13258-13283]"
  }, {
    "left" : "JsName name",
    "right" : "JsName name",
    "info" : "SingleVariableDeclaration[13284-13295]:SingleVariableDeclaration[13284-13295]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[13297-13306]:SingleVariableDeclaration[13297-13306]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13308-13387]:Block[13308-13387]"
  }, {
    "left" : "super(name, node);",
    "right" : "super(name, node);",
    "info" : "SuperConstructorInvocation[13316-13334]:SuperConstructorInvocation[13316-13334]"
  }, {
    "left" : "Preconditions.checkState(node.isCall());",
    "right" : "Preconditions.checkState(node.isCall());",
    "info" : "ExpressionStatement[13341-13381]:ExpressionStatement[13341-13381]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13393-13402]:MarkerAnnotation[13393-13402]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13407-13413]:Modifier[13407-13413]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13414-13418]:PrimitiveType[13414-13418]"
  }, {
    "left" : "remove",
    "right" : "remove",
    "info" : "SimpleName[13419-13425]:SimpleName[13419-13425]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13428-13701]:Block[13428-13701]"
  }, {
    "left" : "Preconditions.checkState(node.isCall());",
    "right" : "Preconditions.checkState(node.isCall());",
    "info" : "ExpressionStatement[13436-13476]:ExpressionStatement[13436-13476]"
  }, {
    "left" : "Node parent = getParent();",
    "right" : "Node parent = getParent();",
    "info" : "VariableDeclarationStatement[13483-13509]:VariableDeclarationStatement[13483-13509]"
  }, {
    "left" : "if (parent.isExprResult())",
    "right" : "if (parent.isExprResult())",
    "info" : "IfStatement[13516-13695]:IfStatement[13516-13695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13543-13606]:Block[13543-13606]"
  }, {
    "left" : "changeProxy.removeChild(getGramps(), parent);",
    "right" : "changeProxy.removeChild(getGramps(), parent);",
    "info" : "ExpressionStatement[13553-13598]:ExpressionStatement[13553-13598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13612-13695]:Block[13612-13695]"
  }, {
    "left" : "changeProxy.replaceWith(parent, node, IR.voidNode(IR.number(0)));",
    "right" : "changeProxy.replaceWith(parent, node, IR.voidNode(IR.number(0)));",
    "info" : "ExpressionStatement[13622-13687]:ExpressionStatement[13622-13687]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13766-13773]:Modifier[13766-13773]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[13774-13779]:TYPE_DECLARATION_KIND[13774-13779]"
  }, {
    "left" : "InstanceOfCheckNode",
    "right" : "InstanceOfCheckNode",
    "info" : "SimpleName[13992-14011]:SimpleName[13992-14011]"
  }, {
    "left" : "JsName name",
    "right" : "JsName name",
    "info" : "SingleVariableDeclaration[14012-14023]:SingleVariableDeclaration[14012-14023]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[14025-14034]:SingleVariableDeclaration[14025-14034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14036-14184]:Block[14036-14184]"
  }, {
    "left" : "super(name, node);",
    "right" : "super(name, node);",
    "info" : "SuperConstructorInvocation[14044-14062]:SuperConstructorInvocation[14044-14062]"
  }, {
    "left" : "Preconditions.checkState(node.isQualifiedName());",
    "right" : "Preconditions.checkState(node.isQualifiedName());",
    "info" : "ExpressionStatement[14069-14118]:ExpressionStatement[14069-14118]"
  }, {
    "left" : "Preconditions.checkState(getParent().isInstanceOf());",
    "right" : "Preconditions.checkState(getParent().isInstanceOf());",
    "info" : "ExpressionStatement[14125-14178]:ExpressionStatement[14125-14178]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14190-14199]:MarkerAnnotation[14190-14199]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14204-14210]:Modifier[14204-14210]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14211-14215]:PrimitiveType[14211-14215]"
  }, {
    "left" : "remove",
    "right" : "remove",
    "info" : "SimpleName[14216-14222]:SimpleName[14216-14222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14225-14305]:Block[14225-14305]"
  }, {
    "left" : "changeProxy.replaceWith(getGramps(), getParent(), IR.falseNode());",
    "right" : "changeProxy.replaceWith(getGramps(), getParent(), IR.falseNode());",
    "info" : "ExpressionStatement[14233-14299]:ExpressionStatement[14233-14299]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14401-14408]:Modifier[14401-14408]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[14409-14414]:TYPE_DECLARATION_KIND[14409-14414]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[14472-14481]:MarkerAnnotation[14472-14481]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14486-14492]:Modifier[14486-14492]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14493-14497]:PrimitiveType[14493-14497]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[14498-14503]:SimpleName[14498-14503]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14504-14519]:SingleVariableDeclaration[14504-14519]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14521-14527]:SingleVariableDeclaration[14521-14527]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[14529-14540]:SingleVariableDeclaration[14529-14540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14542-14943]:Block[14542-14943]"
  }, {
    "left" : "NameInformation ns = null;",
    "right" : "NameInformation ns = null;",
    "info" : "VariableDeclarationStatement[14550-14576]:VariableDeclarationStatement[14550-14576]"
  }, {
    "left" : "if (NodeUtil.isVarDeclaration(n))",
    "right" : "if (NodeUtil.isVarDeclaration(n))",
    "info" : "IfStatement[14583-14780]:IfStatement[14583-14780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14617-14668]:Block[14617-14668]"
  }, {
    "left" : "ns = createNameInformation(t, n);",
    "right" : "ns = createNameInformation(t, n);",
    "info" : "ExpressionStatement[14627-14660]:ExpressionStatement[14627-14660]"
  }, {
    "left" : "if (NodeUtil.isFunctionDeclaration(n))",
    "right" : "if (NodeUtil.isFunctionDeclaration(n))",
    "info" : "IfStatement[14674-14780]:IfStatement[14674-14780]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14713-14780]:Block[14713-14780]"
  }, {
    "left" : "ns = createNameInformation(t, n.getFirstChild());",
    "right" : "ns = createNameInformation(t, n.getFirstChild());",
    "info" : "ExpressionStatement[14723-14772]:ExpressionStatement[14723-14772]"
  }, {
    "left" : "if (ns != null)",
    "right" : "if (ns != null)",
    "info" : "IfStatement[14787-14937]:IfStatement[14787-14937]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14803-14937]:Block[14803-14937]"
  }, {
    "left" : "JsName jsName = getName(ns.name, true);",
    "right" : "JsName jsName = getName(ns.name, true);",
    "info" : "VariableDeclarationStatement[14813-14852]:VariableDeclarationStatement[14813-14852]"
  }, {
    "left" : "jsName.externallyDefined = true;",
    "right" : "jsName.externallyDefined = true;",
    "info" : "ExpressionStatement[14861-14893]:ExpressionStatement[14861-14893]"
  }, {
    "left" : "externalNames.add(ns.name);",
    "right" : "externalNames.add(ns.name);",
    "info" : "ExpressionStatement[14902-14929]:ExpressionStatement[14902-14929]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15943-15950]:Modifier[15943-15950]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[15951-15956]:TYPE_DECLARATION_KIND[15951-15956]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[16018-16027]:MarkerAnnotation[16018-16027]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16032-16038]:Modifier[16032-16038]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16039-16043]:PrimitiveType[16039-16043]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[16044-16049]:SimpleName[16044-16049]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[16050-16065]:SingleVariableDeclaration[16050-16065]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16067-16073]:SingleVariableDeclaration[16067-16073]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[16075-16086]:SingleVariableDeclaration[16075-16086]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16088-16921]:Block[16088-16921]"
  }, {
    "left" : "if (!t.inGlobalScope())",
    "right" : "if (!t.inGlobalScope())",
    "info" : "IfStatement[16096-16145]:IfStatement[16096-16145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16120-16145]:Block[16120-16145]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[16130-16137]:ReturnStatement[16130-16137]"
  }, {
    "left" : "if (n.isAssign())",
    "right" : "if (n.isAssign())",
    "info" : "IfStatement[16153-16915]:IfStatement[16153-16915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16171-16322]:Block[16171-16322]"
  }, {
    "left" : "recordAssignment(t, n, n);",
    "right" : "recordAssignment(t, n, n);",
    "info" : "ExpressionStatement[16181-16207]:ExpressionStatement[16181-16207]"
  }, {
    "left" : "if (!NodeUtil.isImmutableResult(n.getLastChild()))",
    "right" : "if (!NodeUtil.isImmutableResult(n.getLastChild()))",
    "info" : "IfStatement[16216-16314]:IfStatement[16216-16314]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16267-16314]:Block[16267-16314]"
  }, {
    "left" : "recordConsumers(t, n, n);",
    "right" : "recordConsumers(t, n, n);",
    "info" : "ExpressionStatement[16279-16304]:ExpressionStatement[16279-16304]"
  }, {
    "left" : "if (NodeUtil.isVarDeclaration(n))",
    "right" : "if (NodeUtil.isVarDeclaration(n))",
    "info" : "IfStatement[16328-16915]:IfStatement[16328-16915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16362-16460]:Block[16362-16460]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, n);",
    "right" : "NameInformation ns = createNameInformation(t, n);",
    "info" : "VariableDeclarationStatement[16372-16421]:VariableDeclarationStatement[16372-16421]"
  }, {
    "left" : "recordDepScope(n, ns);",
    "right" : "recordDepScope(n, ns);",
    "info" : "ExpressionStatement[16430-16452]:ExpressionStatement[16430-16452]"
  }, {
    "left" : "if (NodeUtil.isFunctionDeclaration(n))",
    "right" : "if (NodeUtil.isFunctionDeclaration(n))",
    "info" : "IfStatement[16466-16915]:IfStatement[16466-16915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16505-16619]:Block[16505-16619]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, n.getFirstChild());",
    "right" : "NameInformation ns = createNameInformation(t, n.getFirstChild());",
    "info" : "VariableDeclarationStatement[16515-16580]:VariableDeclarationStatement[16515-16580]"
  }, {
    "left" : "recordDepScope(n, ns);",
    "right" : "recordDepScope(n, ns);",
    "info" : "ExpressionStatement[16589-16611]:ExpressionStatement[16589-16611]"
  }, {
    "left" : "if (NodeUtil.isExprCall(n))",
    "right" : "if (NodeUtil.isExprCall(n))",
    "info" : "IfStatement[16625-16915]:IfStatement[16625-16915]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16653-16915]:Block[16653-16915]"
  }, {
    "left" : "Node callNode = n.getFirstChild();",
    "right" : "Node callNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[16663-16697]:VariableDeclarationStatement[16663-16697]"
  }, {
    "left" : "Node nameNode = callNode.getFirstChild();",
    "right" : "Node nameNode = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[16706-16747]:VariableDeclarationStatement[16706-16747]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, nameNode);",
    "right" : "NameInformation ns = createNameInformation(t, nameNode);",
    "info" : "VariableDeclarationStatement[16756-16812]:VariableDeclarationStatement[16756-16812]"
  }, {
    "left" : "if (ns != null && ns.onlyAffectsClassDef)",
    "right" : "if (ns != null && ns.onlyAffectsClassDef)",
    "info" : "IfStatement[16821-16907]:IfStatement[16821-16907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16863-16907]:Block[16863-16907]"
  }, {
    "left" : "recordDepScope(n, ns);",
    "right" : "recordDepScope(n, ns);",
    "info" : "ExpressionStatement[16875-16897]:ExpressionStatement[16875-16897]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16927-16934]:Modifier[16927-16934]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16935-16939]:PrimitiveType[16935-16939]"
  }, {
    "left" : "recordConsumers",
    "right" : "recordConsumers",
    "info" : "SimpleName[16940-16955]:SimpleName[16940-16955]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[16956-16971]:SingleVariableDeclaration[16956-16971]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16973-16979]:SingleVariableDeclaration[16973-16979]"
  }, {
    "left" : "Node recordNode",
    "right" : "Node recordNode",
    "info" : "SingleVariableDeclaration[16981-16996]:SingleVariableDeclaration[16981-16996]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16998-17862]:Block[16998-17862]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[17006-17034]:VariableDeclarationStatement[17006-17034]"
  }, {
    "left" : "switch (parent.getType()) {\n        case Token.ASSIGN:\n          if (n == parent.getLastChild()) {\n            recordAssignment(t, parent, recordNode);\n          }\n          recordConsumers(t, parent, recordNode);\n          break;\n        case Token.NAME:\n          NameInformation ns = createNameInformation(t, parent);\n          recordDepScope(recordNode, ns);\n          break;\n        case Token.OR:\n          recordConsumers(t, parent, recordNode);\n          break;\n        case Token.AND:\n          // In \"a && b\" only \"b\" can be meaningfully aliased.\n          // \"a\" must be falsy, which it must be an immutable, non-Object\n        case Token.COMMA:\n        case Token.HOOK:\n          if (n != parent.getFirstChild()) {\n            recordConsumers(t, parent, recordNode);\n          }\n          break;\n      }",
    "right" : "switch (parent.getType()) {\n        case Token.ASSIGN:\n          if (n == parent.getLastChild()) {\n            recordAssignment(t, parent, recordNode);\n          }\n          recordConsumers(t, parent, recordNode);\n          break;\n        case Token.NAME:\n          NameInformation ns = createNameInformation(t, parent);\n          recordDepScope(recordNode, ns);\n          break;\n        case Token.OR:\n          recordConsumers(t, parent, recordNode);\n          break;\n        case Token.AND:\n          // In \"a && b\" only \"b\" can be meaningfully aliased.\n          // \"a\" must be falsy, which it must be an immutable, non-Object\n        case Token.COMMA:\n        case Token.HOOK:\n          if (n != parent.getFirstChild()) {\n            recordConsumers(t, parent, recordNode);\n          }\n          break;\n      }",
    "info" : "SwitchStatement[17041-17856]:SwitchStatement[17041-17856]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[17077-17095]:SwitchCase[17077-17095]"
  }, {
    "left" : "if (n == parent.getLastChild())",
    "right" : "if (n == parent.getLastChild())",
    "info" : "IfStatement[17106-17204]:IfStatement[17106-17204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17138-17204]:Block[17138-17204]"
  }, {
    "left" : "recordAssignment(t, parent, recordNode);",
    "right" : "recordAssignment(t, parent, recordNode);",
    "info" : "ExpressionStatement[17152-17192]:ExpressionStatement[17152-17192]"
  }, {
    "left" : "recordConsumers(t, parent, recordNode);",
    "right" : "recordConsumers(t, parent, recordNode);",
    "info" : "ExpressionStatement[17215-17254]:ExpressionStatement[17215-17254]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17265-17271]:BreakStatement[17265-17271]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[17280-17296]:SwitchCase[17280-17296]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, parent);",
    "right" : "NameInformation ns = createNameInformation(t, parent);",
    "info" : "VariableDeclarationStatement[17307-17361]:VariableDeclarationStatement[17307-17361]"
  }, {
    "left" : "recordDepScope(recordNode, ns);",
    "right" : "recordDepScope(recordNode, ns);",
    "info" : "ExpressionStatement[17372-17403]:ExpressionStatement[17372-17403]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17414-17420]:BreakStatement[17414-17420]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[17429-17443]:SwitchCase[17429-17443]"
  }, {
    "left" : "recordConsumers(t, parent, recordNode);",
    "right" : "recordConsumers(t, parent, recordNode);",
    "info" : "ExpressionStatement[17454-17493]:ExpressionStatement[17454-17493]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17504-17510]:BreakStatement[17504-17510]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[17519-17534]:SwitchCase[17519-17534]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[17680-17697]:SwitchCase[17680-17697]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[17706-17722]:SwitchCase[17706-17722]"
  }, {
    "left" : "if (n != parent.getFirstChild())",
    "right" : "if (n != parent.getFirstChild())",
    "info" : "IfStatement[17733-17831]:IfStatement[17733-17831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17766-17831]:Block[17766-17831]"
  }, {
    "left" : "recordConsumers(t, parent, recordNode);",
    "right" : "recordConsumers(t, parent, recordNode);",
    "info" : "ExpressionStatement[17780-17819]:ExpressionStatement[17780-17819]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17842-17848]:BreakStatement[17842-17848]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17868-17875]:Modifier[17868-17875]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17876-17880]:PrimitiveType[17876-17880]"
  }, {
    "left" : "recordAssignment",
    "right" : "recordAssignment",
    "info" : "SimpleName[17881-17897]:SimpleName[17881-17897]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[17898-17913]:SingleVariableDeclaration[17898-17913]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[17915-17921]:SingleVariableDeclaration[17915-17921]"
  }, {
    "left" : "Node recordNode",
    "right" : "Node recordNode",
    "info" : "SingleVariableDeclaration[17923-17938]:SingleVariableDeclaration[17923-17938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17940-19305]:Block[17940-19360]"
  }, {
    "left" : "Node nameNode = n.getFirstChild();",
    "right" : "Node nameNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[17948-17982]:VariableDeclarationStatement[17948-17982]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[17989-18017]:VariableDeclarationStatement[17989-18017]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, nameNode);",
    "right" : "NameInformation ns = createNameInformation(t, nameNode);",
    "info" : "VariableDeclarationStatement[18024-18080]:VariableDeclarationStatement[18024-18080]"
  }, {
    "left" : "if (ns != null)",
    "right" : "if (ns != null)",
    "info" : "IfStatement[18087-19299]:IfStatement[18087-19354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18103-19299]:Block[18103-19354]"
  }, {
    "left" : "if (parent.isFor() && !NodeUtil.isForIn(parent))",
    "right" : "if (parent.isFor() && !NodeUtil.isForIn(parent))",
    "info" : "IfStatement[18113-19291]:IfStatement[18113-19346]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18162-18845]:Block[18162-18845]"
  }, {
    "left" : "if (parent.getFirstChild().getNext() != n)",
    "right" : "if (parent.getFirstChild().getNext() != n)",
    "info" : "IfStatement[18674-18835]:IfStatement[18674-18835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18717-18774]:Block[18717-18774]"
  }, {
    "left" : "recordDepScope(recordNode, ns);",
    "right" : "recordDepScope(recordNode, ns);",
    "info" : "ExpressionStatement[18731-18762]:ExpressionStatement[18731-18762]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18780-18835]:Block[18780-18835]"
  }, {
    "left" : "recordDepScope(nameNode, ns);",
    "right" : "recordDepScope(nameNode, ns);",
    "info" : "ExpressionStatement[18794-18823]:ExpressionStatement[18794-18823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18851-19291]:Block[18906-19346]"
  }, {
    "left" : "recordDepScope(recordNode, ns);",
    "right" : "recordDepScope(recordNode, ns);",
    "info" : "ExpressionStatement[19250-19281]:ExpressionStatement[19305-19336]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19362-19369]:Modifier[19417-19424]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19370-19374]:PrimitiveType[19425-19429]"
  }, {
    "left" : "recordDepScope",
    "right" : "recordDepScope",
    "info" : "SimpleName[19375-19389]:SimpleName[19430-19444]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[19390-19399]:SingleVariableDeclaration[19445-19454]"
  }, {
    "left" : "NameInformation name",
    "right" : "NameInformation name",
    "info" : "SingleVariableDeclaration[19401-19421]:SingleVariableDeclaration[19456-19476]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19423-19500]:Block[19478-19555]"
  }, {
    "left" : "Preconditions.checkNotNull(name);",
    "right" : "Preconditions.checkNotNull(name);",
    "info" : "ExpressionStatement[19431-19464]:ExpressionStatement[19486-19519]"
  }, {
    "left" : "scopes.put(node, name);",
    "right" : "scopes.put(node, name);",
    "info" : "ExpressionStatement[19471-19494]:ExpressionStatement[19526-19549]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19753-19760]:Modifier[19808-19815]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[19761-19766]:TYPE_DECLARATION_KIND[19816-19821]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19863-19872]:MarkerAnnotation[19918-19927]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19877-19883]:Modifier[19932-19938]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19884-19888]:PrimitiveType[19939-19943]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[19889-19894]:SimpleName[19944-19949]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[19895-19910]:SingleVariableDeclaration[19950-19965]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[19912-19918]:SingleVariableDeclaration[19967-19973]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[19920-19931]:SingleVariableDeclaration[19975-19986]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19933-20415]:Block[19988-20470]"
  }, {
    "left" : "if (NodeUtil.isVarDeclaration(n))",
    "right" : "if (NodeUtil.isVarDeclaration(n))",
    "info" : "IfStatement[19941-20409]:IfStatement[19996-20464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19975-20138]:Block[20030-20193]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, n);",
    "right" : "NameInformation ns = createNameInformation(t, n);",
    "info" : "VariableDeclarationStatement[19985-20034]:VariableDeclarationStatement[20040-20089]"
  }, {
    "left" : "Preconditions.checkNotNull(ns, \"NameInformation is null\");",
    "right" : "Preconditions.checkNotNull(ns, \"NameInformation is null\");",
    "info" : "ExpressionStatement[20043-20101]:ExpressionStatement[20098-20156]"
  }, {
    "left" : "createName(ns.name);",
    "right" : "createName(ns.name);",
    "info" : "ExpressionStatement[20110-20130]:ExpressionStatement[20165-20185]"
  }, {
    "left" : "if (NodeUtil.isFunctionDeclaration(n))",
    "right" : "if (NodeUtil.isFunctionDeclaration(n))",
    "info" : "IfStatement[20144-20409]:IfStatement[20199-20464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20183-20409]:Block[20238-20464]"
  }, {
    "left" : "Node nameNode = n.getFirstChild();",
    "right" : "Node nameNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[20193-20227]:VariableDeclarationStatement[20248-20282]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, nameNode);",
    "right" : "NameInformation ns = createNameInformation(t, nameNode);",
    "info" : "VariableDeclarationStatement[20236-20292]:VariableDeclarationStatement[20291-20347]"
  }, {
    "left" : "Preconditions.checkNotNull(ns, \"NameInformation is null\");",
    "right" : "Preconditions.checkNotNull(ns, \"NameInformation is null\");",
    "info" : "ExpressionStatement[20301-20359]:ExpressionStatement[20356-20414]"
  }, {
    "left" : "createName(nameNode.getString());",
    "right" : "createName(nameNode.getString());",
    "info" : "ExpressionStatement[20368-20401]:ExpressionStatement[20423-20456]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20755-20762]:Modifier[20810-20817]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[20763-20768]:TYPE_DECLARATION_KIND[20818-20823]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20837-20846]:MarkerAnnotation[20892-20901]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20851-20857]:Modifier[20906-20912]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20858-20862]:PrimitiveType[20913-20917]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[20863-20868]:SimpleName[20918-20923]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[20869-20884]:SingleVariableDeclaration[20924-20939]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20886-20892]:SingleVariableDeclaration[20941-20947]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[20894-20905]:SingleVariableDeclaration[20949-20960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20907-22425]:Block[20962-22480]"
  }, {
    "left" : "if (t.inGlobalScope())",
    "right" : "if (t.inGlobalScope())",
    "info" : "IfStatement[20974-21702]:IfStatement[21029-21757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20997-21702]:Block[21052-21757]"
  }, {
    "left" : "if (NodeUtil.isVarDeclaration(n))",
    "right" : "if (NodeUtil.isVarDeclaration(n))",
    "info" : "IfStatement[21007-21694]:IfStatement[21062-21749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21041-21187]:Block[21096-21242]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, n);",
    "right" : "NameInformation ns = createNameInformation(t, n);",
    "info" : "VariableDeclarationStatement[21053-21102]:VariableDeclarationStatement[21108-21157]"
  }, {
    "left" : "Preconditions.checkNotNull(ns);",
    "right" : "Preconditions.checkNotNull(ns);",
    "info" : "ExpressionStatement[21113-21144]:ExpressionStatement[21168-21199]"
  }, {
    "left" : "recordSet(ns.name, n);",
    "right" : "recordSet(ns.name, n);",
    "info" : "ExpressionStatement[21155-21177]:ExpressionStatement[21210-21232]"
  }, {
    "left" : "if (NodeUtil.isFunctionDeclaration(n))",
    "right" : "if (NodeUtil.isFunctionDeclaration(n))",
    "info" : "IfStatement[21193-21694]:IfStatement[21248-21749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21232-21510]:Block[21287-21565]"
  }, {
    "left" : "Node nameNode = n.getFirstChild();",
    "right" : "Node nameNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[21244-21278]:VariableDeclarationStatement[21299-21333]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, nameNode);",
    "right" : "NameInformation ns = createNameInformation(t, nameNode);",
    "info" : "VariableDeclarationStatement[21289-21345]:VariableDeclarationStatement[21344-21400]"
  }, {
    "left" : "if (ns != null)",
    "right" : "if (ns != null)",
    "info" : "IfStatement[21356-21500]:IfStatement[21411-21555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21372-21500]:Block[21427-21555]"
  }, {
    "left" : "JsName nameInfo = getName(nameNode.getString(), true);",
    "right" : "JsName nameInfo = getName(nameNode.getString(), true);",
    "info" : "VariableDeclarationStatement[21386-21440]:VariableDeclarationStatement[21441-21495]"
  }, {
    "left" : "recordSet(nameInfo.name, nameNode);",
    "right" : "recordSet(nameInfo.name, nameNode);",
    "info" : "ExpressionStatement[21453-21488]:ExpressionStatement[21508-21543]"
  }, {
    "left" : "if (NodeUtil.isObjectLitKey(n))",
    "right" : "if (NodeUtil.isObjectLitKey(n))",
    "info" : "IfStatement[21516-21694]:IfStatement[21571-21749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21548-21694]:Block[21603-21749]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, n);",
    "right" : "NameInformation ns = createNameInformation(t, n);",
    "info" : "VariableDeclarationStatement[21560-21609]:VariableDeclarationStatement[21615-21664]"
  }, {
    "left" : "if (ns != null)",
    "right" : "if (ns != null)",
    "info" : "IfStatement[21620-21684]:IfStatement[21675-21739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21636-21684]:Block[21691-21739]"
  }, {
    "left" : "recordSet(ns.name, n);",
    "right" : "recordSet(ns.name, n);",
    "info" : "ExpressionStatement[21650-21672]:ExpressionStatement[21705-21727]"
  }, {
    "left" : "if (n.isAssign())",
    "right" : "if (n.isAssign())",
    "info" : "IfStatement[21753-22419]:IfStatement[21808-22474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21771-22106]:Block[21826-22161]"
  }, {
    "left" : "Node nameNode = n.getFirstChild();",
    "right" : "Node nameNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[21781-21815]:VariableDeclarationStatement[21836-21870]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, nameNode);",
    "right" : "NameInformation ns = createNameInformation(t, nameNode);",
    "info" : "VariableDeclarationStatement[21825-21881]:VariableDeclarationStatement[21880-21936]"
  }, {
    "left" : "if (ns != null)",
    "right" : "if (ns != null)",
    "info" : "IfStatement[21890-22098]:IfStatement[21945-22153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21906-22098]:Block[21961-22153]"
  }, {
    "left" : "if (ns.isPrototype)",
    "right" : "if (ns.isPrototype)",
    "info" : "IfStatement[21918-22088]:IfStatement[21973-22143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21938-22027]:Block[21993-22082]"
  }, {
    "left" : "recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);",
    "right" : "recordPrototypeSet(ns.prototypeClass, ns.prototypeProperty, n);",
    "info" : "ExpressionStatement[21952-22015]:ExpressionStatement[22007-22070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22033-22088]:Block[22088-22143]"
  }, {
    "left" : "recordSet(ns.name, nameNode);",
    "right" : "recordSet(ns.name, nameNode);",
    "info" : "ExpressionStatement[22047-22076]:ExpressionStatement[22102-22131]"
  }, {
    "left" : "if (n.isCall())",
    "right" : "if (n.isCall())",
    "info" : "IfStatement[22112-22419]:IfStatement[22167-22474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22128-22419]:Block[22183-22474]"
  }, {
    "left" : "Node nameNode = n.getFirstChild();",
    "right" : "Node nameNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[22138-22172]:VariableDeclarationStatement[22193-22227]"
  }, {
    "left" : "NameInformation ns = createNameInformation(t, nameNode);",
    "right" : "NameInformation ns = createNameInformation(t, nameNode);",
    "info" : "VariableDeclarationStatement[22181-22237]:VariableDeclarationStatement[22236-22292]"
  }, {
    "left" : "if (ns != null && ns.onlyAffectsClassDef)",
    "right" : "if (ns != null && ns.onlyAffectsClassDef)",
    "info" : "IfStatement[22246-22411]:IfStatement[22301-22466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22288-22411]:Block[22343-22466]"
  }, {
    "left" : "JsName name = getName(ns.name, true);",
    "right" : "JsName name = getName(ns.name, true);",
    "info" : "VariableDeclarationStatement[22300-22337]:VariableDeclarationStatement[22355-22392]"
  }, {
    "left" : "refNodes.add(new ClassDefiningFunctionNode(name, n));",
    "right" : "refNodes.add(new ClassDefiningFunctionNode(name, n));",
    "info" : "ExpressionStatement[22348-22401]:ExpressionStatement[22403-22456]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22654-22661]:Modifier[22709-22716]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[22662-22666]:PrimitiveType[22717-22721]"
  }, {
    "left" : "recordSet",
    "right" : "recordSet",
    "info" : "SimpleName[22667-22676]:SimpleName[22722-22731]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[22677-22688]:SingleVariableDeclaration[22732-22743]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[22690-22699]:SingleVariableDeclaration[22745-22754]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22701-23145]:Block[22756-23200]"
  }, {
    "left" : "JsName jsn = getName(name, true);",
    "right" : "JsName jsn = getName(name, true);",
    "info" : "VariableDeclarationStatement[22709-22742]:VariableDeclarationStatement[22764-22797]"
  }, {
    "left" : "JsNameRefNode nameRefNode = new JsNameRefNode(jsn, node);",
    "right" : "JsNameRefNode nameRefNode = new JsNameRefNode(jsn, node);",
    "info" : "VariableDeclarationStatement[22749-22806]:VariableDeclarationStatement[22804-22861]"
  }, {
    "left" : "refNodes.add(nameRefNode);",
    "right" : "refNodes.add(nameRefNode);",
    "info" : "ExpressionStatement[22813-22839]:ExpressionStatement[22868-22894]"
  }, {
    "left" : "if (node.isGetElem())",
    "right" : "if (node.isGetElem())",
    "info" : "IfStatement[22950-23139]:IfStatement[23005-23194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22972-23020]:Block[23027-23075]"
  }, {
    "left" : "recordWriteOnProperties(name);",
    "right" : "recordWriteOnProperties(name);",
    "info" : "ExpressionStatement[22982-23012]:ExpressionStatement[23037-23067]"
  }, {
    "left" : "if (name.indexOf('.') != -1)",
    "right" : "if (name.indexOf('.') != -1)",
    "info" : "IfStatement[23026-23139]:IfStatement[23081-23194]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23055-23139]:Block[23110-23194]"
  }, {
    "left" : "recordWriteOnProperties(name.substring(0, name.lastIndexOf('.')));",
    "right" : "recordWriteOnProperties(name.substring(0, name.lastIndexOf('.')));",
    "info" : "ExpressionStatement[23065-23131]:ExpressionStatement[23120-23186]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23445-23452]:Modifier[23500-23507]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23453-23457]:PrimitiveType[23508-23512]"
  }, {
    "left" : "recordPrototypeSet",
    "right" : "recordPrototypeSet",
    "info" : "SimpleName[23458-23476]:SimpleName[23513-23531]"
  }, {
    "left" : "String className",
    "right" : "String className",
    "info" : "SingleVariableDeclaration[23477-23493]:SingleVariableDeclaration[23532-23548]"
  }, {
    "left" : "String prototypeProperty",
    "right" : "String prototypeProperty",
    "info" : "SingleVariableDeclaration[23495-23519]:SingleVariableDeclaration[23550-23574]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[23529-23538]:SingleVariableDeclaration[23584-23593]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23540-23739]:Block[23595-23794]"
  }, {
    "left" : "JsName name = getName(className, true);",
    "right" : "JsName name = getName(className, true);",
    "info" : "VariableDeclarationStatement[23548-23587]:VariableDeclarationStatement[23603-23642]"
  }, {
    "left" : "name.prototypeNames.add(prototypeProperty);",
    "right" : "name.prototypeNames.add(prototypeProperty);",
    "info" : "ExpressionStatement[23594-23637]:ExpressionStatement[23649-23692]"
  }, {
    "left" : "refNodes.add(new PrototypeSetNode(name, node));",
    "right" : "refNodes.add(new PrototypeSetNode(name, node));",
    "info" : "ExpressionStatement[23644-23691]:ExpressionStatement[23699-23746]"
  }, {
    "left" : "recordWriteOnProperties(className);",
    "right" : "recordWriteOnProperties(className);",
    "info" : "ExpressionStatement[23698-23733]:ExpressionStatement[23753-23788]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[23830-23837]:Modifier[23885-23892]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[23838-23842]:PrimitiveType[23893-23897]"
  }, {
    "left" : "recordWriteOnProperties",
    "right" : "recordWriteOnProperties",
    "info" : "SimpleName[23843-23866]:SimpleName[23898-23921]"
  }, {
    "left" : "String parentName",
    "right" : "String parentName",
    "info" : "SingleVariableDeclaration[23867-23884]:SingleVariableDeclaration[23922-23939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23886-24390]:Block[23941-24445]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[23894-24384]:DoStatement[23949-24439]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23897-24371]:Block[23952-24426]"
  }, {
    "left" : "JsName parent = getName(parentName, true);",
    "right" : "JsName parent = getName(parentName, true);",
    "info" : "VariableDeclarationStatement[23907-23949]:VariableDeclarationStatement[23962-24004]"
  }, {
    "left" : "if (parent.hasWrittenDescendants)",
    "right" : "if (parent.hasWrittenDescendants)",
    "info" : "IfStatement[23958-24214]:IfStatement[24013-24269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23992-24150]:Block[24047-24205]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[24133-24140]:ReturnStatement[24188-24195]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24156-24214]:Block[24211-24269]"
  }, {
    "left" : "parent.hasWrittenDescendants = true;",
    "right" : "parent.hasWrittenDescendants = true;",
    "info" : "ExpressionStatement[24168-24204]:ExpressionStatement[24223-24259]"
  }, {
    "left" : "if (parentName.indexOf('.') == -1)",
    "right" : "if (parentName.indexOf('.') == -1)",
    "info" : "IfStatement[24224-24288]:IfStatement[24279-24343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24259-24288]:Block[24314-24343]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[24271-24278]:ReturnStatement[24326-24333]"
  }, {
    "left" : "parentName = parentName.substring(0, parentName.lastIndexOf('.'));",
    "right" : "parentName = parentName.substring(0, parentName.lastIndexOf('.'));",
    "info" : "ExpressionStatement[24297-24363]:ExpressionStatement[24352-24418]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[24502-24511]:MarkerAnnotation[24557-24566]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24520-24526]:Modifier[24575-24581]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24527-24534]:PrimitiveType[24582-24589]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[24535-24540]:SimpleName[24590-24595]"
  }, {
    "left" : "Node input",
    "right" : "Node input",
    "info" : "SingleVariableDeclaration[24541-24551]:SingleVariableDeclaration[24596-24606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24553-24856]:Block[24608-24911]"
  }, {
    "left" : "if (input.isCall())",
    "right" : "if (input.isCall())",
    "info" : "IfStatement[24565-24624]:IfStatement[24620-24679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24585-24624]:Block[24640-24679]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[24599-24612]:ReturnStatement[24654-24667]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[24834-24846]:ReturnStatement[24889-24901]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25234-25241]:Modifier[25289-25296]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[25242-25247]:TYPE_DECLARATION_KIND[25297-25302]"
  }, {
    "left" : "FindReferences",
    "right" : "FindReferences",
    "info" : "SimpleName[25316-25330]:SimpleName[25371-25385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25333-25379]:Block[25388-25434]"
  }, {
    "left" : "nodesToKeep = Sets.newHashSet();",
    "right" : "nodesToKeep = Sets.newHashSet();",
    "info" : "ExpressionStatement[25341-25373]:ExpressionStatement[25396-25428]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25385-25392]:Modifier[25440-25447]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25393-25397]:PrimitiveType[25448-25452]"
  }, {
    "left" : "addAllChildren",
    "right" : "addAllChildren",
    "info" : "SimpleName[25398-25412]:SimpleName[25453-25467]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25413-25419]:SingleVariableDeclaration[25468-25474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25421-25600]:Block[25476-25655]"
  }, {
    "left" : "nodesToKeep.add(n);",
    "right" : "nodesToKeep.add(n);",
    "info" : "ExpressionStatement[25429-25448]:ExpressionStatement[25484-25503]"
  }, {
    "left" : "for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild();\n           child != null;\n           child = child.getNext())",
    "info" : "ForStatement[25455-25594]:ForStatement[25510-25649]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25554-25594]:Block[25609-25649]"
  }, {
    "left" : "addAllChildren(child);",
    "right" : "addAllChildren(child);",
    "info" : "ExpressionStatement[25564-25586]:ExpressionStatement[25619-25641]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25606-25613]:Modifier[25661-25668]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25614-25618]:PrimitiveType[25669-25673]"
  }, {
    "left" : "addSimplifiedChildren",
    "right" : "addSimplifiedChildren",
    "info" : "SimpleName[25619-25640]:SimpleName[25674-25695]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25641-25647]:SingleVariableDeclaration[25696-25702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25649-25812]:Block[25704-25867]"
  }, {
    "left" : "NodeTraversal.traverse(\n          compiler, n,\n          new GatherSideEffectSubexpressionsCallback(\n              compiler, new NodeAccumulator()));",
    "right" : "NodeTraversal.traverse(\n          compiler, n,\n          new GatherSideEffectSubexpressionsCallback(\n              compiler, new NodeAccumulator()));",
    "info" : "ExpressionStatement[25657-25806]:ExpressionStatement[25712-25861]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25818-25825]:Modifier[25873-25880]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[25826-25830]:PrimitiveType[25881-25885]"
  }, {
    "left" : "addSimplifiedExpression",
    "right" : "addSimplifiedExpression",
    "info" : "SimpleName[25831-25854]:SimpleName[25886-25909]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25855-25861]:SingleVariableDeclaration[25910-25916]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[25863-25874]:SingleVariableDeclaration[25918-25929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25876-26410]:Block[25931-26465]"
  }, {
    "left" : "if (parent.isVar())",
    "right" : "if (parent.isVar())",
    "info" : "IfStatement[25884-26404]:IfStatement[25939-26459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25904-26032]:Block[25959-26087]"
  }, {
    "left" : "Node value = n.getFirstChild();",
    "right" : "Node value = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[25914-25945]:VariableDeclarationStatement[25969-26000]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[25954-26024]:IfStatement[26009-26079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25973-26024]:Block[26028-26079]"
  }, {
    "left" : "addSimplifiedChildren(value);",
    "right" : "addSimplifiedChildren(value);",
    "info" : "ExpressionStatement[25985-26014]:ExpressionStatement[26040-26069]"
  }, {
    "left" : "if (n.isAssign() &&\n          (parent.isExprResult() ||\n           parent.isFor() ||\n           parent.isReturn()))",
    "right" : "if (n.isAssign() &&\n          (parent.isExprResult() ||\n           parent.isFor() ||\n           parent.isReturn()))",
    "info" : "IfStatement[26038-26404]:IfStatement[26093-26459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26154-26255]:Block[26209-26310]"
  }, {
    "left" : "for (Node child : n.children())",
    "right" : "for (Node child : n.children())",
    "info" : "EnhancedForStatement[26164-26247]:EnhancedForStatement[26219-26302]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26196-26247]:Block[26251-26302]"
  }, {
    "left" : "addSimplifiedChildren(child);",
    "right" : "addSimplifiedChildren(child);",
    "info" : "ExpressionStatement[26208-26237]:ExpressionStatement[26263-26292]"
  }, {
    "left" : "if (n.isCall() &&\n                 parent.isExprResult())",
    "right" : "if (n.isCall() &&\n                 parent.isExprResult())",
    "info" : "IfStatement[26261-26404]:IfStatement[26316-26459]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26319-26362]:Block[26374-26417]"
  }, {
    "left" : "addSimplifiedChildren(n);",
    "right" : "addSimplifiedChildren(n);",
    "info" : "ExpressionStatement[26329-26354]:ExpressionStatement[26384-26409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26368-26404]:Block[26423-26459]"
  }, {
    "left" : "addAllChildren(n);",
    "right" : "addAllChildren(n);",
    "info" : "ExpressionStatement[26378-26396]:ExpressionStatement[26433-26451]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[26416-26425]:MarkerAnnotation[26471-26480]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26430-26436]:Modifier[26485-26491]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[26437-26444]:PrimitiveType[26492-26499]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[26445-26459]:SimpleName[26500-26514]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[26460-26475]:SingleVariableDeclaration[26515-26530]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[26477-26483]:SingleVariableDeclaration[26532-26538]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[26485-26496]:SingleVariableDeclaration[26540-26551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26498-27855]:Block[26553-27910]"
  }, {
    "left" : "if (parent == null)",
    "right" : "if (parent == null)",
    "info" : "IfStatement[26506-26556]:IfStatement[26561-26611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26526-26556]:Block[26581-26611]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26536-26548]:ReturnStatement[26591-26603]"
  }, {
    "left" : "if (n.isFor())",
    "right" : "if (n.isFor())",
    "info" : "IfStatement[26825-27330]:IfStatement[26880-27385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26840-27330]:Block[26895-27385]"
  }, {
    "left" : "if (!NodeUtil.isForIn(n))",
    "right" : "if (!NodeUtil.isForIn(n))",
    "info" : "IfStatement[26850-27322]:IfStatement[26905-27377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26876-27136]:Block[26931-27191]"
  }, {
    "left" : "Node decl = n.getFirstChild();",
    "right" : "Node decl = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[26888-26918]:VariableDeclarationStatement[26943-26973]"
  }, {
    "left" : "Node pred = decl.getNext();",
    "right" : "Node pred = decl.getNext();",
    "info" : "VariableDeclarationStatement[26929-26956]:VariableDeclarationStatement[26984-27011]"
  }, {
    "left" : "Node step = pred.getNext();",
    "right" : "Node step = pred.getNext();",
    "info" : "VariableDeclarationStatement[26967-26994]:VariableDeclarationStatement[27022-27049]"
  }, {
    "left" : "addSimplifiedExpression(decl, n);",
    "right" : "addSimplifiedExpression(decl, n);",
    "info" : "ExpressionStatement[27005-27038]:ExpressionStatement[27060-27093]"
  }, {
    "left" : "addSimplifiedExpression(pred, n);",
    "right" : "addSimplifiedExpression(pred, n);",
    "info" : "ExpressionStatement[27049-27082]:ExpressionStatement[27104-27137]"
  }, {
    "left" : "addSimplifiedExpression(step, n);",
    "right" : "addSimplifiedExpression(step, n);",
    "info" : "ExpressionStatement[27093-27126]:ExpressionStatement[27148-27181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27142-27322]:Block[27197-27377]"
  }, {
    "left" : "Node decl = n.getFirstChild();",
    "right" : "Node decl = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[27180-27210]:VariableDeclarationStatement[27235-27265]"
  }, {
    "left" : "Node iter = decl.getNext();",
    "right" : "Node iter = decl.getNext();",
    "info" : "VariableDeclarationStatement[27221-27248]:VariableDeclarationStatement[27276-27303]"
  }, {
    "left" : "addAllChildren(decl);",
    "right" : "addAllChildren(decl);",
    "info" : "ExpressionStatement[27259-27280]:ExpressionStatement[27314-27335]"
  }, {
    "left" : "addAllChildren(iter);",
    "right" : "addAllChildren(iter);",
    "info" : "ExpressionStatement[27291-27312]:ExpressionStatement[27346-27367]"
  }, {
    "left" : "if (parent.isVar() ||\n          parent.isExprResult() ||\n          parent.isReturn() ||\n          parent.isThrow())",
    "right" : "if (parent.isVar() ||\n          parent.isExprResult() ||\n          parent.isReturn() ||\n          parent.isThrow())",
    "info" : "IfStatement[27338-27507]:IfStatement[27393-27562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27454-27507]:Block[27509-27562]"
  }, {
    "left" : "addSimplifiedExpression(n, parent);",
    "right" : "addSimplifiedExpression(n, parent);",
    "info" : "ExpressionStatement[27464-27499]:ExpressionStatement[27519-27554]"
  }, {
    "left" : "if ((parent.isIf() ||\n           parent.isWhile() ||\n           parent.isWith() ||\n           parent.isSwitch() ||\n           parent.isCase()) &&\n          parent.getFirstChild() == n)",
    "right" : "if ((parent.isIf() ||\n           parent.isWhile() ||\n           parent.isWith() ||\n           parent.isSwitch() ||\n           parent.isCase()) &&\n          parent.getFirstChild() == n)",
    "info" : "IfStatement[27515-27736]:IfStatement[27570-27791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27700-27736]:Block[27755-27791]"
  }, {
    "left" : "addAllChildren(n);",
    "right" : "addAllChildren(n);",
    "info" : "ExpressionStatement[27710-27728]:ExpressionStatement[27765-27783]"
  }, {
    "left" : "if (parent.isDo() && parent.getLastChild() == n)",
    "right" : "if (parent.isDo() && parent.getLastChild() == n)",
    "info" : "IfStatement[27744-27829]:IfStatement[27799-27884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27793-27829]:Block[27848-27884]"
  }, {
    "left" : "addAllChildren(n);",
    "right" : "addAllChildren(n);",
    "info" : "ExpressionStatement[27803-27821]:ExpressionStatement[27858-27876]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[27837-27849]:ReturnStatement[27892-27904]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[27861-27870]:MarkerAnnotation[27916-27925]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27875-27881]:Modifier[27930-27936]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27882-27886]:PrimitiveType[27937-27941]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[27887-27892]:SimpleName[27942-27947]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[27893-27908]:SingleVariableDeclaration[27948-27963]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[27910-27916]:SingleVariableDeclaration[27965-27971]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[27918-27929]:SingleVariableDeclaration[27973-27984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27931-29825]:Block[27986-29880]"
  }, {
    "left" : "if (!(n.isName() || (NodeUtil.isGet(n) && !parent.isGetProp())))",
    "right" : "if (!(n.isName() || (NodeUtil.isGet(n) && !parent.isGetProp())))",
    "info" : "IfStatement[27939-28080]:IfStatement[27994-28135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28004-28080]:Block[28059-28135]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[28065-28072]:ReturnStatement[28120-28127]"
  }, {
    "left" : "NameInformation nameInfo = createNameInformation(t, n);",
    "right" : "NameInformation nameInfo = createNameInformation(t, n);",
    "info" : "VariableDeclarationStatement[28088-28143]:VariableDeclarationStatement[28143-28198]"
  }, {
    "left" : "if (nameInfo == null)",
    "right" : "if (nameInfo == null)",
    "info" : "IfStatement[28150-28238]:IfStatement[28205-28293]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28172-28238]:Block[28227-28293]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[28223-28230]:ReturnStatement[28278-28285]"
  }, {
    "left" : "if (nameInfo.onlyAffectsClassDef)",
    "right" : "if (nameInfo.onlyAffectsClassDef)",
    "info" : "IfStatement[28246-28808]:IfStatement[28301-28863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28280-28808]:Block[28335-28863]"
  }, {
    "left" : "if (nameInfo.superclass != null)",
    "right" : "if (nameInfo.superclass != null)",
    "info" : "IfStatement[28290-28433]:IfStatement[28345-28488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28323-28433]:Block[28378-28488]"
  }, {
    "left" : "recordReference(\n              nameInfo.name, nameInfo.superclass, RefType.INHERITANCE);",
    "right" : "recordReference(\n              nameInfo.name, nameInfo.superclass, RefType.INHERITANCE);",
    "info" : "ExpressionStatement[28335-28423]:ExpressionStatement[28390-28478]"
  }, {
    "left" : "String nodeName = n.getQualifiedName();",
    "right" : "String nodeName = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[28618-28657]:VariableDeclarationStatement[28673-28712]"
  }, {
    "left" : "if (nodeName != null)",
    "right" : "if (nodeName != null)",
    "info" : "IfStatement[28666-28783]:IfStatement[28721-28838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28688-28783]:Block[28743-28838]"
  }, {
    "left" : "recordReference(\n              nameInfo.name, nodeName, RefType.REGULAR);",
    "right" : "recordReference(\n              nameInfo.name, nodeName, RefType.REGULAR);",
    "info" : "ExpressionStatement[28700-28773]:ExpressionStatement[28755-28828]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[28793-28800]:ReturnStatement[28848-28855]"
  }, {
    "left" : "if (parent.isInstanceOf() &&\n          parent.getLastChild() == n &&\n          // Don't cover GETELEMs with a global root node.\n          n.isQualifiedName())",
    "right" : "if (parent.isInstanceOf() &&\n          parent.getLastChild() == n &&\n          // Don't cover GETELEMs with a global root node.\n          n.isQualifiedName())",
    "info" : "IfStatement[28816-29176]:IfStatement[28871-29231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28975-29176]:Block[29030-29231]"
  }, {
    "left" : "JsName checkedClass = getName(nameInfo.name, true);",
    "right" : "JsName checkedClass = getName(nameInfo.name, true);",
    "info" : "VariableDeclarationStatement[28985-29036]:VariableDeclarationStatement[29040-29091]"
  }, {
    "left" : "refNodes.add(new InstanceOfCheckNode(checkedClass, n));",
    "right" : "refNodes.add(new InstanceOfCheckNode(checkedClass, n));",
    "info" : "ExpressionStatement[29045-29100]:ExpressionStatement[29100-29155]"
  }, {
    "left" : "checkedClass.hasInstanceOfReference = true;",
    "right" : "checkedClass.hasInstanceOfReference = true;",
    "info" : "ExpressionStatement[29109-29152]:ExpressionStatement[29164-29207]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[29161-29168]:ReturnStatement[29216-29223]"
  }, {
    "left" : "List<NameInformation> referers = getDependencyScope(n);",
    "right" : "List<NameInformation> referers = getDependencyScope(n);",
    "info" : "VariableDeclarationStatement[29472-29527]:VariableDeclarationStatement[29527-29582]"
  }, {
    "left" : "if (referers.isEmpty())",
    "right" : "if (referers.isEmpty())",
    "info" : "IfStatement[29534-29819]:IfStatement[29589-29874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29558-29634]:Block[29613-29689]"
  }, {
    "left" : "maybeRecordReferenceOrAlias(t, n, parent, nameInfo, null);",
    "right" : "maybeRecordReferenceOrAlias(t, n, parent, nameInfo, null);",
    "info" : "ExpressionStatement[29568-29626]:ExpressionStatement[29623-29681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29640-29819]:Block[29695-29874]"
  }, {
    "left" : "for (NameInformation referring : referers)",
    "right" : "for (NameInformation referring : referers)",
    "info" : "EnhancedForStatement[29650-29778]:EnhancedForStatement[29705-29833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29693-29778]:Block[29748-29833]"
  }, {
    "left" : "maybeRecordReferenceOrAlias(t, n, parent, nameInfo, referring);",
    "right" : "maybeRecordReferenceOrAlias(t, n, parent, nameInfo, referring);",
    "info" : "ExpressionStatement[29705-29768]:ExpressionStatement[29760-29823]"
  }, {
    "left" : "recordAliases(referers);",
    "right" : "recordAliases(referers);",
    "info" : "ExpressionStatement[29787-29811]:ExpressionStatement[29842-29866]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29831-29838]:Modifier[29886-29893]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[29839-29843]:PrimitiveType[29894-29898]"
  }, {
    "left" : "maybeRecordReferenceOrAlias",
    "right" : "maybeRecordReferenceOrAlias",
    "info" : "SimpleName[29844-29871]:SimpleName[29899-29926]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[29881-29896]:SingleVariableDeclaration[29936-29951]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[29898-29904]:SingleVariableDeclaration[29953-29959]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[29906-29917]:SingleVariableDeclaration[29961-29972]"
  }, {
    "left" : "NameInformation nameInfo",
    "right" : "NameInformation nameInfo",
    "info" : "SingleVariableDeclaration[29927-29951]:SingleVariableDeclaration[29982-30006]"
  }, {
    "left" : "NameInformation referring",
    "right" : "NameInformation referring",
    "info" : "SingleVariableDeclaration[29953-29978]:SingleVariableDeclaration[30008-30033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29980-32572]:Block[30035-32627]"
  }, {
    "left" : "String referringName = \"\";",
    "right" : "String referringName = \"\";",
    "info" : "VariableDeclarationStatement[29988-30014]:VariableDeclarationStatement[30043-30069]"
  }, {
    "left" : "if (referring != null)",
    "right" : "if (referring != null)",
    "info" : "IfStatement[30021-30188]:IfStatement[30076-30243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30044-30188]:Block[30099-30243]"
  }, {
    "left" : "referringName = referring.isPrototype\n                      ? referring.prototypeClass\n                      : referring.name;",
    "right" : "referringName = referring.isPrototype\n                      ? referring.prototypeClass\n                      : referring.name;",
    "info" : "ExpressionStatement[30054-30180]:ExpressionStatement[30109-30235]"
  }, {
    "left" : "String name = nameInfo.name;",
    "right" : "String name = nameInfo.name;",
    "info" : "VariableDeclarationStatement[30196-30224]:VariableDeclarationStatement[30251-30279]"
  }, {
    "left" : "if (maybeHiddenAlias(n))",
    "right" : "if (maybeHiddenAlias(n))",
    "info" : "IfStatement[30470-30539]:IfStatement[30525-30594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30495-30539]:Block[30550-30594]"
  }, {
    "left" : "recordAlias(name, WINDOW);",
    "right" : "recordAlias(name, WINDOW);",
    "info" : "ExpressionStatement[30505-30531]:ExpressionStatement[30560-30586]"
  }, {
    "left" : "if (nameInfo.isExternallyReferenceable)",
    "right" : "if (nameInfo.isExternallyReferenceable)",
    "info" : "IfStatement[30689-30876]:IfStatement[30744-30931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30729-30876]:Block[30784-30931]"
  }, {
    "left" : "recordReference(WINDOW, name, RefType.REGULAR);",
    "right" : "recordReference(WINDOW, name, RefType.REGULAR);",
    "info" : "ExpressionStatement[30739-30786]:ExpressionStatement[30794-30841]"
  }, {
    "left" : "maybeRecordAlias(name, parent, referring, referringName);",
    "right" : "maybeRecordAlias(name, parent, referring, referringName);",
    "info" : "ExpressionStatement[30795-30852]:ExpressionStatement[30850-30907]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[30861-30868]:ReturnStatement[30916-30923]"
  }, {
    "left" : "if (NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
    "right" : "if (NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
    "info" : "IfStatement[31033-31214]:IfStatement[31088-31269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31081-31214]:Block[31136-31269]"
  }, {
    "left" : "if (referring != null)",
    "right" : "if (referring != null)",
    "info" : "IfStatement[31091-31190]:IfStatement[31146-31245]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31114-31190]:Block[31169-31245]"
  }, {
    "left" : "recordReference(referringName, name, RefType.REGULAR);",
    "right" : "recordReference(referringName, name, RefType.REGULAR);",
    "info" : "ExpressionStatement[31126-31180]:ExpressionStatement[31181-31235]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[31199-31206]:ReturnStatement[31254-31261]"
  }, {
    "left" : "if (nodesToKeep.contains(n))",
    "right" : "if (nodesToKeep.contains(n))",
    "info" : "IfStatement[31222-32566]:IfStatement[31277-32621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31251-31751]:Block[31306-31806]"
  }, {
    "left" : "List<NameInformation> functionScopes =\n            getEnclosingFunctionDependencyScope(t);",
    "right" : "List<NameInformation> functionScopes =\n            getEnclosingFunctionDependencyScope(t);",
    "info" : "VariableDeclarationStatement[31261-31351]:VariableDeclarationStatement[31316-31406]"
  }, {
    "left" : "if (!functionScopes.isEmpty())",
    "right" : "if (!functionScopes.isEmpty())",
    "info" : "IfStatement[31360-31743]:IfStatement[31415-31798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31391-31551]:Block[31446-31606]"
  }, {
    "left" : "for (NameInformation functionScope : functionScopes)",
    "right" : "for (NameInformation functionScope : functionScopes)",
    "info" : "EnhancedForStatement[31403-31541]:EnhancedForStatement[31458-31596]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31456-31541]:Block[31511-31596]"
  }, {
    "left" : "recordReference(functionScope.name, name, RefType.REGULAR);",
    "right" : "recordReference(functionScope.name, name, RefType.REGULAR);",
    "info" : "ExpressionStatement[31470-31529]:ExpressionStatement[31525-31584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31557-31743]:Block[31612-31798]"
  }, {
    "left" : "recordReference(WINDOW, name, RefType.REGULAR);",
    "right" : "recordReference(WINDOW, name, RefType.REGULAR);",
    "info" : "ExpressionStatement[31569-31616]:ExpressionStatement[31624-31671]"
  }, {
    "left" : "if (referring != null)",
    "right" : "if (referring != null)",
    "info" : "IfStatement[31627-31733]:IfStatement[31682-31788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31650-31733]:Block[31705-31788]"
  }, {
    "left" : "maybeRecordAlias(name, parent, referring, referringName);",
    "right" : "maybeRecordAlias(name, parent, referring, referringName);",
    "info" : "ExpressionStatement[31664-31721]:ExpressionStatement[31719-31776]"
  }, {
    "left" : "if (referring != null)",
    "right" : "if (referring != null)",
    "info" : "IfStatement[31757-32566]:IfStatement[31812-32621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31780-32042]:Block[31835-32097]"
  }, {
    "left" : "if (!maybeRecordAlias(name, parent, referring, referringName))",
    "right" : "if (!maybeRecordAlias(name, parent, referring, referringName))",
    "info" : "IfStatement[31790-32034]:IfStatement[31845-32089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31853-32034]:Block[31908-32089]"
  }, {
    "left" : "RefType depType = referring.onlyAffectsClassDef ?\n              RefType.INHERITANCE : RefType.REGULAR;",
    "right" : "RefType depType = referring.onlyAffectsClassDef ?\n              RefType.INHERITANCE : RefType.REGULAR;",
    "info" : "VariableDeclarationStatement[31865-31967]:VariableDeclarationStatement[31920-32022]"
  }, {
    "left" : "recordReference(referringName, name, depType);",
    "right" : "recordReference(referringName, name, depType);",
    "info" : "ExpressionStatement[31978-32024]:ExpressionStatement[32033-32079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32048-32566]:Block[32103-32621]"
  }, {
    "left" : "for (Node ancestor : n.getAncestors())",
    "right" : "for (Node ancestor : n.getAncestors())",
    "info" : "EnhancedForStatement[32327-32558]:EnhancedForStatement[32382-32613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32366-32558]:Block[32421-32613]"
  }, {
    "left" : "if (NodeUtil.isAssignmentOp(ancestor) ||\n              ancestor.isFunction())",
    "right" : "if (NodeUtil.isAssignmentOp(ancestor) ||\n              ancestor.isFunction())",
    "info" : "IfStatement[32378-32548]:IfStatement[32433-32603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32456-32548]:Block[32511-32603]"
  }, {
    "left" : "recordReference(WINDOW, name, RefType.REGULAR);",
    "right" : "recordReference(WINDOW, name, RefType.REGULAR);",
    "info" : "ExpressionStatement[32470-32517]:ExpressionStatement[32525-32572]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[32530-32536]:BreakStatement[32585-32591]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[32578-32585]:Modifier[32633-32640]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32586-32590]:PrimitiveType[32641-32645]"
  }, {
    "left" : "recordAliases",
    "right" : "recordAliases",
    "info" : "SimpleName[32591-32604]:SimpleName[32646-32659]"
  }, {
    "left" : "List<NameInformation> referers",
    "right" : "List<NameInformation> referers",
    "info" : "SingleVariableDeclaration[32605-32635]:SingleVariableDeclaration[32660-32690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32637-32914]:Block[32692-32969]"
  }, {
    "left" : "int size = referers.size();",
    "right" : "int size = referers.size();",
    "info" : "VariableDeclarationStatement[32645-32672]:VariableDeclarationStatement[32700-32727]"
  }, {
    "left" : "for (int i = 0; i < size; i++)",
    "right" : "for (int i = 0; i < size; i++)",
    "info" : "ForStatement[32679-32908]:ForStatement[32734-32963]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32710-32908]:Block[32765-32963]"
  }, {
    "left" : "for (int j = i + 1; j < size; j++)",
    "right" : "for (int j = i + 1; j < size; j++)",
    "info" : "ForStatement[32720-32900]:ForStatement[32775-32955]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32755-32900]:Block[32810-32955]"
  }, {
    "left" : "recordAlias(referers.get(i).name, referers.get(j).name);",
    "right" : "recordAlias(referers.get(i).name, referers.get(j).name);",
    "info" : "ExpressionStatement[32767-32823]:ExpressionStatement[32822-32878]"
  }, {
    "left" : "recordAlias(referers.get(j).name, referers.get(i).name);",
    "right" : "recordAlias(referers.get(j).name, referers.get(i).name);",
    "info" : "ExpressionStatement[32834-32890]:ExpressionStatement[32889-32945]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33197-33204]:Modifier[33252-33259]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33205-33212]:PrimitiveType[33260-33267]"
  }, {
    "left" : "maybeHiddenAlias",
    "right" : "maybeHiddenAlias",
    "info" : "SimpleName[33213-33229]:SimpleName[33268-33284]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33230-33236]:SingleVariableDeclaration[33285-33291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33238-33568]:Block[33293-33623]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[33246-33274]:VariableDeclarationStatement[33301-33329]"
  }, {
    "left" : "if (NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
    "right" : "if (NodeUtil.isVarOrSimpleAssignLhs(n, parent))",
    "info" : "IfStatement[33281-33542]:IfStatement[33336-33597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33329-33542]:Block[33384-33597]"
  }, {
    "left" : "Node rhs = (parent.isVar())\n            ? n.getFirstChild() : parent.getLastChild();",
    "right" : "Node rhs = (parent.isVar())\n            ? n.getFirstChild() : parent.getLastChild();",
    "info" : "VariableDeclarationStatement[33339-33423]:VariableDeclarationStatement[33394-33478]"
  }, {
    "left" : "return (rhs != null && !NodeUtil.evaluatesToLocalValue(\n            rhs, NON_LOCAL_RESULT_PREDICATE));",
    "right" : "return (rhs != null && !NodeUtil.evaluatesToLocalValue(\n            rhs, NON_LOCAL_RESULT_PREDICATE));",
    "info" : "ReturnStatement[33432-33534]:ReturnStatement[33487-33589]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33549-33562]:ReturnStatement[33604-33617]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33637-33644]:Modifier[33692-33699]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33645-33652]:PrimitiveType[33700-33707]"
  }, {
    "left" : "maybeRecordAlias",
    "right" : "maybeRecordAlias",
    "info" : "SimpleName[33653-33669]:SimpleName[33708-33724]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[33679-33690]:SingleVariableDeclaration[33734-33745]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[33692-33703]:SingleVariableDeclaration[33747-33758]"
  }, {
    "left" : "NameInformation referring",
    "right" : "NameInformation referring",
    "info" : "SingleVariableDeclaration[33713-33738]:SingleVariableDeclaration[33768-33793]"
  }, {
    "left" : "String referringName",
    "right" : "String referringName",
    "info" : "SingleVariableDeclaration[33740-33760]:SingleVariableDeclaration[33795-33815]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33762-34815]:Block[33817-34870]"
  }, {
    "left" : "boolean isPrototypePropAssignment =\n          parent.isAssign()\n          && NodeUtil.isPrototypeProperty(parent.getFirstChild());",
    "right" : "boolean isPrototypePropAssignment =\n          parent.isAssign()\n          && NodeUtil.isPrototypeProperty(parent.getFirstChild());",
    "info" : "VariableDeclarationStatement[34402-34532]:VariableDeclarationStatement[34457-34587]"
  }, {
    "left" : "if ((parent.isName() ||\n          parent.isAssign()) &&\n          !isPrototypePropAssignment &&\n          referring != null &&\n          scopes.get(parent).contains(referring))",
    "right" : "if ((parent.isName() ||\n          parent.isAssign()) &&\n          !isPrototypePropAssignment &&\n          referring != null &&\n          scopes.get(parent).contains(referring))",
    "info" : "IfStatement[34540-34789]:IfStatement[34595-34844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34717-34789]:Block[34772-34844]"
  }, {
    "left" : "recordAlias(referringName, name);",
    "right" : "recordAlias(referringName, name);",
    "info" : "ExpressionStatement[34727-34760]:ExpressionStatement[34782-34815]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[34769-34781]:ReturnStatement[34824-34836]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[34796-34809]:ReturnStatement[34851-34864]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34943-34950]:Modifier[34998-35005]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[34951-34956]:TYPE_DECLARATION_KIND[35006-35011]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[35023-35032]:MarkerAnnotation[35078-35087]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35039-35045]:Modifier[35094-35100]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35046-35053]:PrimitiveType[35101-35108]"
  }, {
    "left" : "classDefiningCallsHaveSideEffects",
    "right" : "classDefiningCallsHaveSideEffects",
    "info" : "SimpleName[35054-35087]:SimpleName[35109-35142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35090-35121]:Block[35145-35176]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[35100-35113]:ReturnStatement[35155-35168]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[35129-35138]:MarkerAnnotation[35184-35193]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35145-35151]:Modifier[35200-35206]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35152-35156]:PrimitiveType[35207-35211]"
  }, {
    "left" : "keepSubTree",
    "right" : "keepSubTree",
    "info" : "SimpleName[35157-35168]:SimpleName[35212-35223]"
  }, {
    "left" : "Node original",
    "right" : "Node original",
    "info" : "SingleVariableDeclaration[35169-35182]:SingleVariableDeclaration[35224-35237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35184-35227]:Block[35239-35282]"
  }, {
    "left" : "addAllChildren(original);",
    "right" : "addAllChildren(original);",
    "info" : "ExpressionStatement[35194-35219]:ExpressionStatement[35249-35274]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[35235-35244]:MarkerAnnotation[35290-35299]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35251-35257]:Modifier[35306-35312]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35258-35262]:PrimitiveType[35313-35317]"
  }, {
    "left" : "keepSimplifiedShortCircuitExpression",
    "right" : "keepSimplifiedShortCircuitExpression",
    "info" : "SimpleName[35263-35299]:SimpleName[35318-35354]"
  }, {
    "left" : "Node original",
    "right" : "Node original",
    "info" : "SingleVariableDeclaration[35300-35313]:SingleVariableDeclaration[35355-35368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35315-35500]:Block[35370-35555]"
  }, {
    "left" : "Node condition = original.getFirstChild();",
    "right" : "Node condition = original.getFirstChild();",
    "info" : "VariableDeclarationStatement[35325-35367]:VariableDeclarationStatement[35380-35422]"
  }, {
    "left" : "Node thenBranch = condition.getNext();",
    "right" : "Node thenBranch = condition.getNext();",
    "info" : "VariableDeclarationStatement[35376-35414]:VariableDeclarationStatement[35431-35469]"
  }, {
    "left" : "addAllChildren(condition);",
    "right" : "addAllChildren(condition);",
    "info" : "ExpressionStatement[35423-35449]:ExpressionStatement[35478-35504]"
  }, {
    "left" : "addSimplifiedChildren(thenBranch);",
    "right" : "addSimplifiedChildren(thenBranch);",
    "info" : "ExpressionStatement[35458-35492]:ExpressionStatement[35513-35547]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[35508-35517]:MarkerAnnotation[35563-35572]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35524-35530]:Modifier[35579-35585]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35531-35535]:PrimitiveType[35586-35590]"
  }, {
    "left" : "keepSimplifiedHookExpression",
    "right" : "keepSimplifiedHookExpression",
    "info" : "SimpleName[35536-35564]:SimpleName[35591-35619]"
  }, {
    "left" : "Node hook",
    "right" : "Node hook",
    "info" : "SingleVariableDeclaration[35565-35574]:SingleVariableDeclaration[35620-35629]"
  }, {
    "left" : "boolean thenHasSideEffects",
    "right" : "boolean thenHasSideEffects",
    "info" : "SingleVariableDeclaration[35623-35649]:SingleVariableDeclaration[35678-35704]"
  }, {
    "left" : "boolean elseHasSideEffects",
    "right" : "boolean elseHasSideEffects",
    "info" : "SingleVariableDeclaration[35698-35724]:SingleVariableDeclaration[35753-35779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35726-36090]:Block[35781-36145]"
  }, {
    "left" : "Node condition = hook.getFirstChild();",
    "right" : "Node condition = hook.getFirstChild();",
    "info" : "VariableDeclarationStatement[35736-35774]:VariableDeclarationStatement[35791-35829]"
  }, {
    "left" : "Node thenBranch = condition.getNext();",
    "right" : "Node thenBranch = condition.getNext();",
    "info" : "VariableDeclarationStatement[35783-35821]:VariableDeclarationStatement[35838-35876]"
  }, {
    "left" : "Node elseBranch = thenBranch.getNext();",
    "right" : "Node elseBranch = thenBranch.getNext();",
    "info" : "VariableDeclarationStatement[35830-35869]:VariableDeclarationStatement[35885-35924]"
  }, {
    "left" : "addAllChildren(condition);",
    "right" : "addAllChildren(condition);",
    "info" : "ExpressionStatement[35878-35904]:ExpressionStatement[35933-35959]"
  }, {
    "left" : "if (thenHasSideEffects)",
    "right" : "if (thenHasSideEffects)",
    "info" : "IfStatement[35913-35993]:IfStatement[35968-36048]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35937-35993]:Block[35992-36048]"
  }, {
    "left" : "addSimplifiedChildren(thenBranch);",
    "right" : "addSimplifiedChildren(thenBranch);",
    "info" : "ExpressionStatement[35949-35983]:ExpressionStatement[36004-36038]"
  }, {
    "left" : "if (elseHasSideEffects)",
    "right" : "if (elseHasSideEffects)",
    "info" : "IfStatement[36002-36082]:IfStatement[36057-36137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36026-36082]:Block[36081-36137]"
  }, {
    "left" : "addSimplifiedChildren(elseBranch);",
    "right" : "addSimplifiedChildren(elseBranch);",
    "info" : "ExpressionStatement[36038-36072]:ExpressionStatement[36093-36127]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36104-36111]:Modifier[36159-36166]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[36112-36117]:TYPE_DECLARATION_KIND[36167-36172]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[36180-36189]:MarkerAnnotation[36235-36244]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36194-36200]:Modifier[36249-36255]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36201-36205]:PrimitiveType[36256-36260]"
  }, {
    "left" : "nodeRemoved",
    "right" : "nodeRemoved",
    "info" : "SimpleName[36206-36217]:SimpleName[36261-36272]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36218-36224]:SingleVariableDeclaration[36273-36279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36226-36268]:Block[36281-36323]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[36234-36262]:ExpressionStatement[36289-36317]"
  }, {
    "left" : "NameAnalyzer",
    "right" : "NameAnalyzer",
    "info" : "SimpleName[36717-36729]:SimpleName[36772-36784]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[36730-36755]:SingleVariableDeclaration[36785-36810]"
  }, {
    "left" : "boolean removeUnreferenced",
    "right" : "boolean removeUnreferenced",
    "info" : "SingleVariableDeclaration[36757-36783]:SingleVariableDeclaration[36812-36838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36785-36960]:Block[36840-37015]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[36791-36816]:ExpressionStatement[36846-36871]"
  }, {
    "left" : "this.removeUnreferenced = removeUnreferenced;",
    "right" : "this.removeUnreferenced = removeUnreferenced;",
    "info" : "ExpressionStatement[36821-36866]:ExpressionStatement[36876-36921]"
  }, {
    "left" : "this.globalNames = DEFAULT_GLOBAL_NAMES;",
    "right" : "this.globalNames = DEFAULT_GLOBAL_NAMES;",
    "info" : "ExpressionStatement[36871-36911]:ExpressionStatement[36926-36966]"
  }, {
    "left" : "this.changeProxy = new AstChangeProxy();",
    "right" : "this.changeProxy = new AstChangeProxy();",
    "info" : "ExpressionStatement[36916-36956]:ExpressionStatement[36971-37011]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[36964-36973]:MarkerAnnotation[37019-37028]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[36976-36982]:Modifier[37031-37037]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36983-36987]:PrimitiveType[37038-37042]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[36988-36995]:SimpleName[37043-37050]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[36996-37008]:SingleVariableDeclaration[37051-37063]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[37010-37019]:SingleVariableDeclaration[37065-37074]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37021-37795]:Block[37076-37850]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, externs, new ProcessExternals());",
    "right" : "NodeTraversal.traverse(compiler, externs, new ProcessExternals());",
    "info" : "ExpressionStatement[37027-37093]:ExpressionStatement[37082-37148]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, new FindDependencyScopes());",
    "right" : "NodeTraversal.traverse(compiler, root, new FindDependencyScopes());",
    "info" : "ExpressionStatement[37098-37165]:ExpressionStatement[37153-37220]"
  }, {
    "left" : "NodeTraversal.traverse(\n        compiler, root, new HoistVariableAndFunctionDeclarations());",
    "right" : "NodeTraversal.traverse(\n        compiler, root, new HoistVariableAndFunctionDeclarations());",
    "info" : "ExpressionStatement[37170-37262]:ExpressionStatement[37225-37317]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, new FindDeclarationsAndSetters());",
    "right" : "NodeTraversal.traverse(compiler, root, new FindDeclarationsAndSetters());",
    "info" : "ExpressionStatement[37267-37340]:ExpressionStatement[37322-37395]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, root, new FindReferences());",
    "right" : "NodeTraversal.traverse(compiler, root, new FindReferences());",
    "info" : "ExpressionStatement[37345-37406]:ExpressionStatement[37400-37461]"
  }, {
    "left" : "referenceParentNames();",
    "right" : "referenceParentNames();",
    "info" : "ExpressionStatement[37530-37553]:ExpressionStatement[37585-37608]"
  }, {
    "left" : "referenceAliases();",
    "right" : "referenceAliases();",
    "info" : "ExpressionStatement[37679-37698]:ExpressionStatement[37734-37753]"
  }, {
    "left" : "calculateReferences();",
    "right" : "calculateReferences();",
    "info" : "ExpressionStatement[37704-37726]:ExpressionStatement[37759-37781]"
  }, {
    "left" : "if (removeUnreferenced)",
    "right" : "if (removeUnreferenced)",
    "info" : "IfStatement[37732-37791]:IfStatement[37787-37846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37756-37791]:Block[37811-37846]"
  }, {
    "left" : "removeUnreferenced();",
    "right" : "removeUnreferenced();",
    "info" : "ExpressionStatement[37764-37785]:ExpressionStatement[37819-37840]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37862-37869]:Modifier[37917-37924]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[37870-37874]:PrimitiveType[37925-37929]"
  }, {
    "left" : "recordAlias",
    "right" : "recordAlias",
    "info" : "SimpleName[37875-37886]:SimpleName[37930-37941]"
  }, {
    "left" : "String fromName",
    "right" : "String fromName",
    "info" : "SingleVariableDeclaration[37887-37902]:SingleVariableDeclaration[37942-37957]"
  }, {
    "left" : "String toName",
    "right" : "String toName",
    "info" : "SingleVariableDeclaration[37904-37917]:SingleVariableDeclaration[37959-37972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37919-39248]:Block[37974-39303]"
  }, {
    "left" : "recordReference(fromName, toName, RefType.REGULAR);",
    "right" : "recordReference(fromName, toName, RefType.REGULAR);",
    "info" : "ExpressionStatement[37925-37976]:ExpressionStatement[37980-38031]"
  }, {
    "left" : "AliasSet toNameAliasSet = aliases.get(toName);",
    "right" : "AliasSet toNameAliasSet = aliases.get(toName);",
    "info" : "VariableDeclarationStatement[38470-38516]:VariableDeclarationStatement[38525-38571]"
  }, {
    "left" : "AliasSet fromNameAliasSet = aliases.get(fromName);",
    "right" : "AliasSet fromNameAliasSet = aliases.get(fromName);",
    "info" : "VariableDeclarationStatement[38521-38571]:VariableDeclarationStatement[38576-38626]"
  }, {
    "left" : "AliasSet resultSet = null;",
    "right" : "AliasSet resultSet = null;",
    "info" : "VariableDeclarationStatement[38576-38602]:VariableDeclarationStatement[38631-38657]"
  }, {
    "left" : "if (toNameAliasSet == null && fromNameAliasSet == null)",
    "right" : "if (toNameAliasSet == null && fromNameAliasSet == null)",
    "info" : "IfStatement[38607-39170]:IfStatement[38662-39225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38663-38720]:Block[38718-38775]"
  }, {
    "left" : "resultSet = new AliasSet(toName, fromName);",
    "right" : "resultSet = new AliasSet(toName, fromName);",
    "info" : "ExpressionStatement[38671-38714]:ExpressionStatement[38726-38769]"
  }, {
    "left" : "if (toNameAliasSet != null && fromNameAliasSet != null)",
    "right" : "if (toNameAliasSet != null && fromNameAliasSet != null)",
    "info" : "IfStatement[38726-39170]:IfStatement[38781-39225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38782-38974]:Block[38837-39029]"
  }, {
    "left" : "resultSet = toNameAliasSet;",
    "right" : "resultSet = toNameAliasSet;",
    "info" : "ExpressionStatement[38790-38817]:ExpressionStatement[38845-38872]"
  }, {
    "left" : "resultSet.names.addAll(fromNameAliasSet.names);",
    "right" : "resultSet.names.addAll(fromNameAliasSet.names);",
    "info" : "ExpressionStatement[38824-38871]:ExpressionStatement[38879-38926]"
  }, {
    "left" : "for (String name : fromNameAliasSet.names)",
    "right" : "for (String name : fromNameAliasSet.names)",
    "info" : "EnhancedForStatement[38878-38968]:EnhancedForStatement[38933-39023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38921-38968]:Block[38976-39023]"
  }, {
    "left" : "aliases.put(name, resultSet);",
    "right" : "aliases.put(name, resultSet);",
    "info" : "ExpressionStatement[38931-38960]:ExpressionStatement[38986-39015]"
  }, {
    "left" : "if (toNameAliasSet != null)",
    "right" : "if (toNameAliasSet != null)",
    "info" : "IfStatement[38980-39170]:IfStatement[39035-39225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39008-39086]:Block[39063-39141]"
  }, {
    "left" : "resultSet = toNameAliasSet;",
    "right" : "resultSet = toNameAliasSet;",
    "info" : "ExpressionStatement[39016-39043]:ExpressionStatement[39071-39098]"
  }, {
    "left" : "resultSet.names.add(fromName);",
    "right" : "resultSet.names.add(fromName);",
    "info" : "ExpressionStatement[39050-39080]:ExpressionStatement[39105-39135]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39092-39170]:Block[39147-39225]"
  }, {
    "left" : "resultSet = fromNameAliasSet;",
    "right" : "resultSet = fromNameAliasSet;",
    "info" : "ExpressionStatement[39100-39129]:ExpressionStatement[39155-39184]"
  }, {
    "left" : "resultSet.names.add(toName);",
    "right" : "resultSet.names.add(toName);",
    "info" : "ExpressionStatement[39136-39164]:ExpressionStatement[39191-39219]"
  }, {
    "left" : "aliases.put(fromName, resultSet);",
    "right" : "aliases.put(fromName, resultSet);",
    "info" : "ExpressionStatement[39175-39208]:ExpressionStatement[39230-39263]"
  }, {
    "left" : "aliases.put(toName, resultSet);",
    "right" : "aliases.put(toName, resultSet);",
    "info" : "ExpressionStatement[39213-39244]:ExpressionStatement[39268-39299]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39320-39327]:Modifier[39375-39382]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39328-39332]:PrimitiveType[39383-39387]"
  }, {
    "left" : "recordReference",
    "right" : "recordReference",
    "info" : "SimpleName[39333-39348]:SimpleName[39388-39403]"
  }, {
    "left" : "String fromName",
    "right" : "String fromName",
    "info" : "SingleVariableDeclaration[39349-39364]:SingleVariableDeclaration[39404-39419]"
  }, {
    "left" : "String toName",
    "right" : "String toName",
    "info" : "SingleVariableDeclaration[39366-39379]:SingleVariableDeclaration[39421-39434]"
  }, {
    "left" : "RefType depType",
    "right" : "RefType depType",
    "info" : "SingleVariableDeclaration[39412-39427]:SingleVariableDeclaration[39467-39482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39429-39817]:Block[39484-39872]"
  }, {
    "left" : "if (fromName.equals(toName))",
    "right" : "if (fromName.equals(toName))",
    "info" : "IfStatement[39435-39534]:IfStatement[39490-39589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39464-39534]:Block[39519-39589]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[39521-39528]:ReturnStatement[39576-39583]"
  }, {
    "left" : "JsName from = getName(fromName, true);",
    "right" : "JsName from = getName(fromName, true);",
    "info" : "VariableDeclarationStatement[39540-39578]:VariableDeclarationStatement[39595-39633]"
  }, {
    "left" : "JsName to = getName(toName, true);",
    "right" : "JsName to = getName(toName, true);",
    "info" : "VariableDeclarationStatement[39583-39617]:VariableDeclarationStatement[39638-39672]"
  }, {
    "left" : "referenceGraph.createNode(from);",
    "right" : "referenceGraph.createNode(from);",
    "info" : "ExpressionStatement[39622-39654]:ExpressionStatement[39677-39709]"
  }, {
    "left" : "referenceGraph.createNode(to);",
    "right" : "referenceGraph.createNode(to);",
    "info" : "ExpressionStatement[39659-39689]:ExpressionStatement[39714-39744]"
  }, {
    "left" : "if (!referenceGraph.isConnectedInDirection(from, depType, to))",
    "right" : "if (!referenceGraph.isConnectedInDirection(from, depType, to))",
    "info" : "IfStatement[39694-39813]:IfStatement[39749-39868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39757-39813]:Block[39812-39868]"
  }, {
    "left" : "referenceGraph.connect(from, depType, to);",
    "right" : "referenceGraph.connect(from, depType, to);",
    "info" : "ExpressionStatement[39765-39807]:ExpressionStatement[39820-39862]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39874-39878]:PrimitiveType[39929-39933]"
  }, {
    "left" : "removeUnreferenced",
    "right" : "removeUnreferenced",
    "info" : "SimpleName[39879-39897]:SimpleName[39934-39952]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39900-40221]:Block[39955-40276]"
  }, {
    "left" : "RemoveListener listener = new RemoveListener();",
    "right" : "RemoveListener listener = new RemoveListener();",
    "info" : "VariableDeclarationStatement[39906-39953]:VariableDeclarationStatement[39961-40008]"
  }, {
    "left" : "changeProxy.registerListener(listener);",
    "right" : "changeProxy.registerListener(listener);",
    "info" : "ExpressionStatement[39958-39997]:ExpressionStatement[40013-40052]"
  }, {
    "left" : "for (RefNode refNode : refNodes)",
    "right" : "for (RefNode refNode : refNodes)",
    "info" : "EnhancedForStatement[40003-40170]:EnhancedForStatement[40058-40225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40036-40170]:Block[40091-40225]"
  }, {
    "left" : "JsName name = refNode.name();",
    "right" : "JsName name = refNode.name();",
    "info" : "VariableDeclarationStatement[40044-40073]:VariableDeclarationStatement[40099-40128]"
  }, {
    "left" : "if (!name.referenced && !name.externallyDefined)",
    "right" : "if (!name.referenced && !name.externallyDefined)",
    "info" : "IfStatement[40080-40164]:IfStatement[40135-40219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40129-40164]:Block[40184-40219]"
  }, {
    "left" : "refNode.remove();",
    "right" : "refNode.remove();",
    "info" : "ExpressionStatement[40139-40156]:ExpressionStatement[40194-40211]"
  }, {
    "left" : "changeProxy.unregisterListener(listener);",
    "right" : "changeProxy.unregisterListener(listener);",
    "info" : "ExpressionStatement[40176-40217]:ExpressionStatement[40231-40272]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[40296-40302]:SimpleType[40351-40357]"
  }, {
    "left" : "getHtmlReport",
    "right" : "getHtmlReport",
    "info" : "SimpleName[40303-40316]:SimpleName[40358-40371]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40319-42933]:Block[40374-42988]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[40325-40364]:VariableDeclarationStatement[40380-40419]"
  }, {
    "left" : "sb.append(\"<html><body><style type=\\\"text/css\\\">\"\n        + \"body, td, p {font-family: Arial; font-size: 83%} \"\n        + \"ul {margin-top:2px; margin-left:0px; padding-left:1em;} \"\n        + \"li {margin-top:3px; margin-left:24px; padding-left:0px;\"\n        + \"padding-bottom: 4px}</style>\");",
    "right" : "sb.append(\"<html><body><style type=\\\"text/css\\\">\"\n        + \"body, td, p {font-family: Arial; font-size: 83%} \"\n        + \"ul {margin-top:2px; margin-left:0px; padding-left:1em;} \"\n        + \"li {margin-top:3px; margin-left:24px; padding-left:0px;\"\n        + \"padding-bottom: 4px}</style>\");",
    "info" : "ExpressionStatement[40369-40660]:ExpressionStatement[40424-40715]"
  }, {
    "left" : "sb.append(\"OVERALL STATS<ul>\");",
    "right" : "sb.append(\"OVERALL STATS<ul>\");",
    "info" : "ExpressionStatement[40665-40696]:ExpressionStatement[40720-40751]"
  }, {
    "left" : "appendListItem(sb, \"Total Names: \" + countOf(TriState.BOTH, TriState.BOTH));",
    "right" : "appendListItem(sb, \"Total Names: \" + countOf(TriState.BOTH, TriState.BOTH));",
    "info" : "ExpressionStatement[40701-40777]:ExpressionStatement[40756-40832]"
  }, {
    "left" : "appendListItem(sb, \"Total Classes: \"\n        + countOf(TriState.TRUE, TriState.BOTH));",
    "right" : "appendListItem(sb, \"Total Classes: \"\n        + countOf(TriState.TRUE, TriState.BOTH));",
    "info" : "ExpressionStatement[40782-40868]:ExpressionStatement[40837-40923]"
  }, {
    "left" : "appendListItem(sb, \"Total Static Functions: \"\n        + countOf(TriState.FALSE, TriState.BOTH));",
    "right" : "appendListItem(sb, \"Total Static Functions: \"\n        + countOf(TriState.FALSE, TriState.BOTH));",
    "info" : "ExpressionStatement[40873-40969]:ExpressionStatement[40928-41024]"
  }, {
    "left" : "appendListItem(sb, \"Referenced Names: \"\n        + countOf(TriState.BOTH, TriState.TRUE));",
    "right" : "appendListItem(sb, \"Referenced Names: \"\n        + countOf(TriState.BOTH, TriState.TRUE));",
    "info" : "ExpressionStatement[40974-41063]:ExpressionStatement[41029-41118]"
  }, {
    "left" : "appendListItem(sb, \"Referenced Classes: \"\n        + countOf(TriState.TRUE, TriState.TRUE));",
    "right" : "appendListItem(sb, \"Referenced Classes: \"\n        + countOf(TriState.TRUE, TriState.TRUE));",
    "info" : "ExpressionStatement[41068-41159]:ExpressionStatement[41123-41214]"
  }, {
    "left" : "appendListItem(sb, \"Referenced Functions: \"\n        + countOf(TriState.FALSE, TriState.TRUE));",
    "right" : "appendListItem(sb, \"Referenced Functions: \"\n        + countOf(TriState.FALSE, TriState.TRUE));",
    "info" : "ExpressionStatement[41164-41258]:ExpressionStatement[41219-41313]"
  }, {
    "left" : "sb.append(\"</ul>\");",
    "right" : "sb.append(\"</ul>\");",
    "info" : "ExpressionStatement[41263-41282]:ExpressionStatement[41318-41337]"
  }, {
    "left" : "sb.append(\"ALL NAMES<ul>\\n\");",
    "right" : "sb.append(\"ALL NAMES<ul>\\n\");",
    "info" : "ExpressionStatement[41288-41317]:ExpressionStatement[41343-41372]"
  }, {
    "left" : "for (JsName node : allNames.values())",
    "right" : "for (JsName node : allNames.values())",
    "info" : "EnhancedForStatement[41322-42845]:EnhancedForStatement[41377-42900]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41360-42845]:Block[41415-42900]"
  }, {
    "left" : "sb.append(\"<li>\" + nameAnchor(node.name) + \"<ul>\");",
    "right" : "sb.append(\"<li>\" + nameAnchor(node.name) + \"<ul>\");",
    "info" : "ExpressionStatement[41368-41419]:ExpressionStatement[41423-41474]"
  }, {
    "left" : "if (node.prototypeNames.size() > 0)",
    "right" : "if (node.prototypeNames.size() > 0)",
    "info" : "IfStatement[41426-41744]:IfStatement[41481-41799]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41462-41744]:Block[41517-41799]"
  }, {
    "left" : "sb.append(\"<li>PROTOTYPES: \");",
    "right" : "sb.append(\"<li>PROTOTYPES: \");",
    "info" : "ExpressionStatement[41472-41502]:ExpressionStatement[41527-41557]"
  }, {
    "left" : "Iterator<String> protoIter = node.prototypeNames.iterator();",
    "right" : "Iterator<String> protoIter = node.prototypeNames.iterator();",
    "info" : "VariableDeclarationStatement[41511-41571]:VariableDeclarationStatement[41566-41626]"
  }, {
    "left" : "while (protoIter.hasNext())",
    "right" : "while (protoIter.hasNext())",
    "info" : "WhileStatement[41580-41736]:WhileStatement[41635-41791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41608-41736]:Block[41663-41791]"
  }, {
    "left" : "sb.append(protoIter.next());",
    "right" : "sb.append(protoIter.next());",
    "info" : "ExpressionStatement[41620-41648]:ExpressionStatement[41675-41703]"
  }, {
    "left" : "if (protoIter.hasNext())",
    "right" : "if (protoIter.hasNext())",
    "info" : "IfStatement[41659-41726]:IfStatement[41714-41781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41684-41726]:Block[41739-41781]"
  }, {
    "left" : "sb.append(\", \");",
    "right" : "sb.append(\", \");",
    "info" : "ExpressionStatement[41698-41714]:ExpressionStatement[41753-41769]"
  }, {
    "left" : "if (referenceGraph.hasNode(node))",
    "right" : "if (referenceGraph.hasNode(node))",
    "info" : "IfStatement[41752-42782]:IfStatement[41807-42837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41786-42782]:Block[41841-42837]"
  }, {
    "left" : "List<DiGraphEdge<JsName, RefType>> refersTo =\n            referenceGraph.getOutEdges(node);",
    "right" : "List<DiGraphEdge<JsName, RefType>> refersTo =\n            referenceGraph.getOutEdges(node);",
    "info" : "VariableDeclarationStatement[41796-41887]:VariableDeclarationStatement[41851-41942]"
  }, {
    "left" : "if (refersTo.size() > 0)",
    "right" : "if (refersTo.size() > 0)",
    "info" : "IfStatement[41896-42262]:IfStatement[41951-42317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41921-42262]:Block[41976-42317]"
  }, {
    "left" : "sb.append(\"<li>REFERS TO: \");",
    "right" : "sb.append(\"<li>REFERS TO: \");",
    "info" : "ExpressionStatement[41933-41962]:ExpressionStatement[41988-42017]"
  }, {
    "left" : "Iterator<DiGraphEdge<JsName, RefType>> toIter = refersTo.iterator();",
    "right" : "Iterator<DiGraphEdge<JsName, RefType>> toIter = refersTo.iterator();",
    "info" : "VariableDeclarationStatement[41973-42041]:VariableDeclarationStatement[42028-42096]"
  }, {
    "left" : "while (toIter.hasNext())",
    "right" : "while (toIter.hasNext())",
    "info" : "WhileStatement[42052-42252]:WhileStatement[42107-42307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42077-42252]:Block[42132-42307]"
  }, {
    "left" : "sb.append(nameLink(toIter.next().getDestination().getValue().name));",
    "right" : "sb.append(nameLink(toIter.next().getDestination().getValue().name));",
    "info" : "ExpressionStatement[42091-42159]:ExpressionStatement[42146-42214]"
  }, {
    "left" : "if (toIter.hasNext())",
    "right" : "if (toIter.hasNext())",
    "info" : "IfStatement[42172-42240]:IfStatement[42227-42295]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42194-42240]:Block[42249-42295]"
  }, {
    "left" : "sb.append(\", \");",
    "right" : "sb.append(\", \");",
    "info" : "ExpressionStatement[42210-42226]:ExpressionStatement[42265-42281]"
  }, {
    "left" : "List<DiGraphEdge<JsName, RefType>> referencedBy =\n            referenceGraph.getInEdges(node);",
    "right" : "List<DiGraphEdge<JsName, RefType>> referencedBy =\n            referenceGraph.getInEdges(node);",
    "info" : "VariableDeclarationStatement[42272-42366]:VariableDeclarationStatement[42327-42421]"
  }, {
    "left" : "if (referencedBy.size() > 0)",
    "right" : "if (referencedBy.size() > 0)",
    "info" : "IfStatement[42375-42774]:IfStatement[42430-42829]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42404-42774]:Block[42459-42829]"
  }, {
    "left" : "sb.append(\"<li>REFERENCED BY: \");",
    "right" : "sb.append(\"<li>REFERENCED BY: \");",
    "info" : "ExpressionStatement[42416-42449]:ExpressionStatement[42471-42504]"
  }, {
    "left" : "Iterator<DiGraphEdge<JsName, RefType>> fromIter = refersTo.iterator();",
    "right" : "Iterator<DiGraphEdge<JsName, RefType>> fromIter = refersTo.iterator();",
    "info" : "VariableDeclarationStatement[42460-42530]:VariableDeclarationStatement[42515-42585]"
  }, {
    "left" : "while (fromIter.hasNext())",
    "right" : "while (fromIter.hasNext())",
    "info" : "WhileStatement[42541-42764]:WhileStatement[42596-42819]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42568-42764]:Block[42623-42819]"
  }, {
    "left" : "sb.append(\n                nameLink(fromIter.next().getDestination().getValue().name));",
    "right" : "sb.append(\n                nameLink(fromIter.next().getDestination().getValue().name));",
    "info" : "ExpressionStatement[42582-42669]:ExpressionStatement[42637-42724]"
  }, {
    "left" : "if (fromIter.hasNext())",
    "right" : "if (fromIter.hasNext())",
    "info" : "IfStatement[42682-42752]:IfStatement[42737-42807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42706-42752]:Block[42761-42807]"
  }, {
    "left" : "sb.append(\", \");",
    "right" : "sb.append(\", \");",
    "info" : "ExpressionStatement[42722-42738]:ExpressionStatement[42777-42793]"
  }, {
    "left" : "sb.append(\"</li>\");",
    "right" : "sb.append(\"</li>\");",
    "info" : "ExpressionStatement[42789-42808]:ExpressionStatement[42844-42863]"
  }, {
    "left" : "sb.append(\"</ul></li>\");",
    "right" : "sb.append(\"</ul></li>\");",
    "info" : "ExpressionStatement[42815-42839]:ExpressionStatement[42870-42894]"
  }, {
    "left" : "sb.append(\"</ul>\");",
    "right" : "sb.append(\"</ul>\");",
    "info" : "ExpressionStatement[42850-42869]:ExpressionStatement[42905-42924]"
  }, {
    "left" : "sb.append(\"</body></html>\");",
    "right" : "sb.append(\"</body></html>\");",
    "info" : "ExpressionStatement[42874-42902]:ExpressionStatement[42929-42957]"
  }, {
    "left" : "return sb.toString();",
    "right" : "return sb.toString();",
    "info" : "ReturnStatement[42908-42929]:ReturnStatement[42963-42984]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42937-42944]:Modifier[42992-42999]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42945-42949]:PrimitiveType[43000-43004]"
  }, {
    "left" : "appendListItem",
    "right" : "appendListItem",
    "info" : "SimpleName[42950-42964]:SimpleName[43005-43019]"
  }, {
    "left" : "StringBuilder sb",
    "right" : "StringBuilder sb",
    "info" : "SingleVariableDeclaration[42965-42981]:SingleVariableDeclaration[43020-43036]"
  }, {
    "left" : "String text",
    "right" : "String text",
    "info" : "SingleVariableDeclaration[42983-42994]:SingleVariableDeclaration[43038-43049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42996-43043]:Block[43051-43098]"
  }, {
    "left" : "sb.append(\"<li>\" + text + \"</li>\\n\");",
    "right" : "sb.append(\"<li>\" + text + \"</li>\\n\");",
    "info" : "ExpressionStatement[43002-43039]:ExpressionStatement[43057-43094]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43047-43054]:Modifier[43102-43109]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[43055-43061]:SimpleType[43110-43116]"
  }, {
    "left" : "nameLink",
    "right" : "nameLink",
    "info" : "SimpleName[43062-43070]:SimpleName[43117-43125]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[43071-43082]:SingleVariableDeclaration[43126-43137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43084-43146]:Block[43139-43201]"
  }, {
    "left" : "return \"<a href=\\\"#\" + name + \"\\\">\" + name + \"</a>\";",
    "right" : "return \"<a href=\\\"#\" + name + \"\\\">\" + name + \"</a>\";",
    "info" : "ReturnStatement[43090-43142]:ReturnStatement[43145-43197]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43150-43157]:Modifier[43205-43212]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[43158-43164]:SimpleType[43213-43219]"
  }, {
    "left" : "nameAnchor",
    "right" : "nameAnchor",
    "info" : "SimpleName[43165-43175]:SimpleName[43220-43230]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[43176-43187]:SingleVariableDeclaration[43231-43242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43189-43250]:Block[43244-43305]"
  }, {
    "left" : "return \"<a name=\\\"\" + name + \"\\\">\" + name + \"</a>\";",
    "right" : "return \"<a name=\\\"\" + name + \"\\\">\" + name + \"</a>\";",
    "info" : "ReturnStatement[43195-43246]:ReturnStatement[43250-43301]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43572-43579]:Modifier[43627-43634]"
  }, {
    "left" : "JsName",
    "right" : "JsName",
    "info" : "SimpleType[43580-43586]:SimpleType[43635-43641]"
  }, {
    "left" : "getName",
    "right" : "getName",
    "info" : "SimpleName[43587-43594]:SimpleName[43642-43649]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[43595-43606]:SingleVariableDeclaration[43650-43661]"
  }, {
    "left" : "boolean canCreate",
    "right" : "boolean canCreate",
    "info" : "SingleVariableDeclaration[43608-43625]:SingleVariableDeclaration[43663-43680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43627-43714]:Block[43682-43769]"
  }, {
    "left" : "if (canCreate)",
    "right" : "if (canCreate)",
    "info" : "IfStatement[43633-43679]:IfStatement[43688-43734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43648-43679]:Block[43703-43734]"
  }, {
    "left" : "createName(name);",
    "right" : "createName(name);",
    "info" : "ExpressionStatement[43656-43673]:ExpressionStatement[43711-43728]"
  }, {
    "left" : "return allNames.get(name);",
    "right" : "return allNames.get(name);",
    "info" : "ReturnStatement[43684-43710]:ReturnStatement[43739-43765]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[43858-43865]:Modifier[43913-43920]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[43866-43870]:PrimitiveType[43921-43925]"
  }, {
    "left" : "createName",
    "right" : "createName",
    "info" : "SimpleName[43871-43881]:SimpleName[43926-43936]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[43882-43893]:SingleVariableDeclaration[43937-43948]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43895-44046]:Block[43950-44101]"
  }, {
    "left" : "JsName jsn = allNames.get(name);",
    "right" : "JsName jsn = allNames.get(name);",
    "info" : "VariableDeclarationStatement[43901-43933]:VariableDeclarationStatement[43956-43988]"
  }, {
    "left" : "if (jsn == null)",
    "right" : "if (jsn == null)",
    "info" : "IfStatement[43938-44042]:IfStatement[43993-44097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43955-44042]:Block[44010-44097]"
  }, {
    "left" : "jsn = new JsName();",
    "right" : "jsn = new JsName();",
    "info" : "ExpressionStatement[43963-43982]:ExpressionStatement[44018-44037]"
  }, {
    "left" : "jsn.name = name;",
    "right" : "jsn.name = name;",
    "info" : "ExpressionStatement[43989-44005]:ExpressionStatement[44044-44060]"
  }, {
    "left" : "allNames.put(name, jsn);",
    "right" : "allNames.put(name, jsn);",
    "info" : "ExpressionStatement[44012-44036]:ExpressionStatement[44067-44091]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45074-45081]:Modifier[45129-45136]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45082-45086]:PrimitiveType[45137-45141]"
  }, {
    "left" : "referenceAliases",
    "right" : "referenceAliases",
    "info" : "SimpleName[45087-45103]:SimpleName[45142-45158]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45106-45446]:Block[45161-45501]"
  }, {
    "left" : "for (Map.Entry<String, AliasSet> entry : aliases.entrySet())",
    "right" : "for (Map.Entry<String, AliasSet> entry : aliases.entrySet())",
    "info" : "EnhancedForStatement[45112-45442]:EnhancedForStatement[45167-45497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45173-45442]:Block[45228-45497]"
  }, {
    "left" : "JsName name = getName(entry.getKey(), false);",
    "right" : "JsName name = getName(entry.getKey(), false);",
    "info" : "VariableDeclarationStatement[45181-45226]:VariableDeclarationStatement[45236-45281]"
  }, {
    "left" : "if (name.hasWrittenDescendants || name.hasInstanceOfReference)",
    "right" : "if (name.hasWrittenDescendants || name.hasInstanceOfReference)",
    "info" : "IfStatement[45233-45436]:IfStatement[45288-45491]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45296-45436]:Block[45351-45491]"
  }, {
    "left" : "for (String alias : entry.getValue().names)",
    "right" : "for (String alias : entry.getValue().names)",
    "info" : "EnhancedForStatement[45306-45428]:EnhancedForStatement[45361-45483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45350-45428]:Block[45405-45483]"
  }, {
    "left" : "recordReference(alias, entry.getKey(), RefType.REGULAR);",
    "right" : "recordReference(alias, entry.getKey(), RefType.REGULAR);",
    "info" : "ExpressionStatement[45362-45418]:ExpressionStatement[45417-45473]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45606-45613]:Modifier[45661-45668]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45614-45618]:PrimitiveType[45669-45673]"
  }, {
    "left" : "referenceParentNames",
    "right" : "referenceParentNames",
    "info" : "SimpleName[45619-45639]:SimpleName[45674-45694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45642-46400]:Block[45697-46455]"
  }, {
    "left" : "Set<JsName> allNamesCopy = Sets.newHashSet(allNames.values());",
    "right" : "Set<JsName> allNamesCopy = Sets.newHashSet(allNames.values());",
    "info" : "VariableDeclarationStatement[45751-45813]:VariableDeclarationStatement[45806-45868]"
  }, {
    "left" : "for (JsName name : allNamesCopy)",
    "right" : "for (JsName name : allNamesCopy)",
    "info" : "EnhancedForStatement[45819-46396]:EnhancedForStatement[45874-46451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45852-46396]:Block[45907-46451]"
  }, {
    "left" : "String curName = name.name;",
    "right" : "String curName = name.name;",
    "info" : "VariableDeclarationStatement[45860-45887]:VariableDeclarationStatement[45915-45942]"
  }, {
    "left" : "JsName curJsName = name;",
    "right" : "JsName curJsName = name;",
    "info" : "VariableDeclarationStatement[45894-45918]:VariableDeclarationStatement[45949-45973]"
  }, {
    "left" : "while (curName.indexOf('.') != -1)",
    "right" : "while (curName.indexOf('.') != -1)",
    "info" : "WhileStatement[45925-46390]:WhileStatement[45980-46445]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45960-46390]:Block[46015-46445]"
  }, {
    "left" : "String parentName = curName.substring(0, curName.lastIndexOf('.'));",
    "right" : "String parentName = curName.substring(0, curName.lastIndexOf('.'));",
    "info" : "VariableDeclarationStatement[45970-46037]:VariableDeclarationStatement[46025-46092]"
  }, {
    "left" : "if (!globalNames.contains(parentName))",
    "right" : "if (!globalNames.contains(parentName))",
    "info" : "IfStatement[46046-46352]:IfStatement[46101-46407]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46085-46352]:Block[46140-46407]"
  }, {
    "left" : "JsName parentJsName = getName(parentName, true);",
    "right" : "JsName parentJsName = getName(parentName, true);",
    "info" : "VariableDeclarationStatement[46098-46146]:VariableDeclarationStatement[46153-46201]"
  }, {
    "left" : "recordReference(curJsName.name, parentJsName.name, RefType.REGULAR);",
    "right" : "recordReference(curJsName.name, parentJsName.name, RefType.REGULAR);",
    "info" : "ExpressionStatement[46158-46226]:ExpressionStatement[46213-46281]"
  }, {
    "left" : "recordReference(parentJsName.name, curJsName.name, RefType.REGULAR);",
    "right" : "recordReference(parentJsName.name, curJsName.name, RefType.REGULAR);",
    "info" : "ExpressionStatement[46237-46305]:ExpressionStatement[46292-46360]"
  }, {
    "left" : "curJsName = parentJsName;",
    "right" : "curJsName = parentJsName;",
    "info" : "ExpressionStatement[46317-46342]:ExpressionStatement[46372-46397]"
  }, {
    "left" : "curName = parentName;",
    "right" : "curName = parentName;",
    "info" : "ExpressionStatement[46361-46382]:ExpressionStatement[46416-46437]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46647-46654]:Modifier[46702-46709]"
  }, {
    "left" : "NameInformation",
    "right" : "NameInformation",
    "info" : "SimpleType[46655-46670]:SimpleType[46710-46725]"
  }, {
    "left" : "createNameInformation",
    "right" : "createNameInformation",
    "info" : "SimpleName[46671-46692]:SimpleName[46726-46747]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[46693-46708]:SingleVariableDeclaration[46748-46763]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46710-46716]:SingleVariableDeclaration[46765-46771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46718-50349]:Block[46773-50404]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[46724-46752]:VariableDeclarationStatement[46779-46807]"
  }, {
    "left" : "String name = \"\";",
    "right" : "String name = \"\";",
    "info" : "VariableDeclarationStatement[46867-46884]:VariableDeclarationStatement[46922-46939]"
  }, {
    "left" : "Node rootNameNode = n;",
    "right" : "Node rootNameNode = n;",
    "info" : "VariableDeclarationStatement[46889-46911]:VariableDeclarationStatement[46944-46966]"
  }, {
    "left" : "boolean bNameWasShortened = false;",
    "right" : "boolean bNameWasShortened = false;",
    "info" : "VariableDeclarationStatement[46916-46950]:VariableDeclarationStatement[46971-47005]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[46955-48160]:WhileStatement[47010-48215]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46968-48160]:Block[47023-48215]"
  }, {
    "left" : "if (NodeUtil.isGet(rootNameNode))",
    "right" : "if (NodeUtil.isGet(rootNameNode))",
    "info" : "IfStatement[46976-48154]:IfStatement[47031-48209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47010-47364]:Block[47065-47419]"
  }, {
    "left" : "Node prop = rootNameNode.getLastChild();",
    "right" : "Node prop = rootNameNode.getLastChild();",
    "info" : "VariableDeclarationStatement[47020-47060]:VariableDeclarationStatement[47075-47115]"
  }, {
    "left" : "if (rootNameNode.isGetProp())",
    "right" : "if (rootNameNode.isGetProp())",
    "info" : "IfStatement[47069-47303]:IfStatement[47124-47358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47099-47158]:Block[47154-47213]"
  }, {
    "left" : "name = \".\" + prop.getString() + name;",
    "right" : "name = \".\" + prop.getString() + name;",
    "info" : "ExpressionStatement[47111-47148]:ExpressionStatement[47166-47203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47164-47303]:Block[47219-47358]"
  }, {
    "left" : "bNameWasShortened = true;",
    "right" : "bNameWasShortened = true;",
    "info" : "ExpressionStatement[47247-47272]:ExpressionStatement[47302-47327]"
  }, {
    "left" : "name = \"\";",
    "right" : "name = \"\";",
    "info" : "ExpressionStatement[47283-47293]:ExpressionStatement[47338-47348]"
  }, {
    "left" : "rootNameNode = rootNameNode.getFirstChild();",
    "right" : "rootNameNode = rootNameNode.getFirstChild();",
    "info" : "ExpressionStatement[47312-47356]:ExpressionStatement[47367-47411]"
  }, {
    "left" : "if (NodeUtil.isObjectLitKey(rootNameNode))",
    "right" : "if (NodeUtil.isObjectLitKey(rootNameNode))",
    "info" : "IfStatement[47370-48154]:IfStatement[47425-48209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47413-48124]:Block[47468-48179]"
  }, {
    "left" : "name = \".\" + rootNameNode.getString() + name;",
    "right" : "name = \".\" + rootNameNode.getString() + name;",
    "info" : "ExpressionStatement[47423-47468]:ExpressionStatement[47478-47523]"
  }, {
    "left" : "Node objLit = rootNameNode.getParent();",
    "right" : "Node objLit = rootNameNode.getParent();",
    "info" : "VariableDeclarationStatement[47547-47586]:VariableDeclarationStatement[47602-47641]"
  }, {
    "left" : "Node objLitParent = objLit.getParent();",
    "right" : "Node objLitParent = objLit.getParent();",
    "info" : "VariableDeclarationStatement[47595-47634]:VariableDeclarationStatement[47650-47689]"
  }, {
    "left" : "if (objLitParent.isAssign())",
    "right" : "if (objLitParent.isAssign())",
    "info" : "IfStatement[47643-48116]:IfStatement[47698-48171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47672-47794]:Block[47727-47849]"
  }, {
    "left" : "rootNameNode = objLitParent.getFirstChild();",
    "right" : "rootNameNode = objLitParent.getFirstChild();",
    "info" : "ExpressionStatement[47740-47784]:ExpressionStatement[47795-47839]"
  }, {
    "left" : "if (objLitParent.isName())",
    "right" : "if (objLitParent.isName())",
    "info" : "IfStatement[47800-48116]:IfStatement[47855-48171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47827-47925]:Block[47882-47980]"
  }, {
    "left" : "rootNameNode = objLitParent;",
    "right" : "rootNameNode = objLitParent;",
    "info" : "ExpressionStatement[47887-47915]:ExpressionStatement[47942-47970]"
  }, {
    "left" : "if (objLitParent.isStringKey())",
    "right" : "if (objLitParent.isStringKey())",
    "info" : "IfStatement[47931-48116]:IfStatement[47986-48171]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47963-48076]:Block[48018-48131]"
  }, {
    "left" : "rootNameNode = objLitParent;",
    "right" : "rootNameNode = objLitParent;",
    "info" : "ExpressionStatement[48038-48066]:ExpressionStatement[48093-48121]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48082-48116]:Block[48137-48171]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[48094-48106]:ReturnStatement[48149-48161]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48130-48154]:Block[48185-48209]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[48140-48146]:BreakStatement[48195-48201]"
  }, {
    "left" : "if (parent.isCall() && t.inGlobalScope())",
    "right" : "if (parent.isCall() && t.inGlobalScope())",
    "info" : "IfStatement[48274-49056]:IfStatement[48329-49111]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48316-49056]:Block[48371-49111]"
  }, {
    "left" : "CodingConvention convention = compiler.getCodingConvention();",
    "right" : "CodingConvention convention = compiler.getCodingConvention();",
    "info" : "VariableDeclarationStatement[48324-48385]:VariableDeclarationStatement[48379-48440]"
  }, {
    "left" : "SubclassRelationship classes = convention.getClassesDefinedByCall(parent);",
    "right" : "SubclassRelationship classes = convention.getClassesDefinedByCall(parent);",
    "info" : "VariableDeclarationStatement[48392-48466]:VariableDeclarationStatement[48447-48521]"
  }, {
    "left" : "if (classes != null)",
    "right" : "if (classes != null)",
    "info" : "IfStatement[48473-48731]:IfStatement[48528-48786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48494-48731]:Block[48549-48786]"
  }, {
    "left" : "NameInformation nameInfo = new NameInformation();",
    "right" : "NameInformation nameInfo = new NameInformation();",
    "info" : "VariableDeclarationStatement[48504-48553]:VariableDeclarationStatement[48559-48608]"
  }, {
    "left" : "nameInfo.name = classes.subclassName;",
    "right" : "nameInfo.name = classes.subclassName;",
    "info" : "ExpressionStatement[48562-48599]:ExpressionStatement[48617-48654]"
  }, {
    "left" : "nameInfo.onlyAffectsClassDef = true;",
    "right" : "nameInfo.onlyAffectsClassDef = true;",
    "info" : "ExpressionStatement[48608-48644]:ExpressionStatement[48663-48699]"
  }, {
    "left" : "nameInfo.superclass = classes.superclassName;",
    "right" : "nameInfo.superclass = classes.superclassName;",
    "info" : "ExpressionStatement[48653-48698]:ExpressionStatement[48708-48753]"
  }, {
    "left" : "return nameInfo;",
    "right" : "return nameInfo;",
    "info" : "ReturnStatement[48707-48723]:ReturnStatement[48762-48778]"
  }, {
    "left" : "String singletonGetterClass =\n          convention.getSingletonGetterClassName(parent);",
    "right" : "String singletonGetterClass =\n          convention.getSingletonGetterClassName(parent);",
    "info" : "VariableDeclarationStatement[48739-48826]:VariableDeclarationStatement[48794-48881]"
  }, {
    "left" : "if (singletonGetterClass != null)",
    "right" : "if (singletonGetterClass != null)",
    "info" : "IfStatement[48833-49050]:IfStatement[48888-49105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48867-49050]:Block[48922-49105]"
  }, {
    "left" : "NameInformation nameInfo = new NameInformation();",
    "right" : "NameInformation nameInfo = new NameInformation();",
    "info" : "VariableDeclarationStatement[48877-48926]:VariableDeclarationStatement[48932-48981]"
  }, {
    "left" : "nameInfo.name = singletonGetterClass;",
    "right" : "nameInfo.name = singletonGetterClass;",
    "info" : "ExpressionStatement[48935-48972]:ExpressionStatement[48990-49027]"
  }, {
    "left" : "nameInfo.onlyAffectsClassDef = true;",
    "right" : "nameInfo.onlyAffectsClassDef = true;",
    "info" : "ExpressionStatement[48981-49017]:ExpressionStatement[49036-49072]"
  }, {
    "left" : "return nameInfo;",
    "right" : "return nameInfo;",
    "info" : "ReturnStatement[49026-49042]:ReturnStatement[49081-49097]"
  }, {
    "left" : "switch (rootNameNode.getType()) {\n      case Token.NAME:\n        // Check whether this is an assignment to a prototype property\n        // of an object defined in the global scope.\n        if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString())) {\n          if (createNameInformation(t, n.getFirstChild()) != null) {\n            name = rootNameNode.getString() + name;\n            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);\n            NameInformation nameInfo = new NameInformation();\n            nameInfo.name = name;\n            return nameInfo;\n          } else {\n            return null;\n          }\n        }\n        return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);\n      case Token.THIS:\n        if (t.inGlobalScope()) {\n          NameInformation nameInfo = new NameInformation();\n          if (name.indexOf('.') == 0) {\n            nameInfo.name = name.substring(1);  // strip leading \".\"\n          } else {\n            nameInfo.name = name;\n          }\n          nameInfo.isExternallyReferenceable = true;\n          return nameInfo;\n        }\n        return null;\n      default:\n        return null;\n    }",
    "right" : "switch (rootNameNode.getType()) {\n      case Token.NAME:\n        // Check whether this is an assignment to a prototype property\n        // of an object defined in the global scope.\n        if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString())) {\n          if (createNameInformation(t, n.getFirstChild()) != null) {\n            name = rootNameNode.getString() + name;\n            name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);\n            NameInformation nameInfo = new NameInformation();\n            nameInfo.name = name;\n            return nameInfo;\n          } else {\n            return null;\n          }\n        }\n        return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);\n      case Token.THIS:\n        if (t.inGlobalScope()) {\n          NameInformation nameInfo = new NameInformation();\n          if (name.indexOf('.') == 0) {\n            nameInfo.name = name.substring(1);  // strip leading \".\"\n          } else {\n            nameInfo.name = name;\n          }\n          nameInfo.isExternallyReferenceable = true;\n          return nameInfo;\n        }\n        return null;\n      default:\n        return null;\n    }",
    "info" : "SwitchStatement[49062-50345]:SwitchStatement[49117-50400]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[49102-49118]:SwitchCase[49157-49173]"
  }, {
    "left" : "if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString()))",
    "right" : "if (!bNameWasShortened &&\n            n.isGetProp() &&\n            parent.isAssign() &&\n            \"prototype\".equals(n.getLastChild().getString()))",
    "info" : "IfStatement[49251-49790]:IfStatement[49306-49845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49401-49790]:Block[49456-49845]"
  }, {
    "left" : "if (createNameInformation(t, n.getFirstChild()) != null)",
    "right" : "if (createNameInformation(t, n.getFirstChild()) != null)",
    "info" : "IfStatement[49413-49780]:IfStatement[49468-49835]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49470-49736]:Block[49525-49791]"
  }, {
    "left" : "name = rootNameNode.getString() + name;",
    "right" : "name = rootNameNode.getString() + name;",
    "info" : "ExpressionStatement[49484-49523]:ExpressionStatement[49539-49578]"
  }, {
    "left" : "name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);",
    "right" : "name = name.substring(0, name.length() - PROTOTYPE_SUFFIX_LEN);",
    "info" : "ExpressionStatement[49536-49599]:ExpressionStatement[49591-49654]"
  }, {
    "left" : "NameInformation nameInfo = new NameInformation();",
    "right" : "NameInformation nameInfo = new NameInformation();",
    "info" : "VariableDeclarationStatement[49612-49661]:VariableDeclarationStatement[49667-49716]"
  }, {
    "left" : "nameInfo.name = name;",
    "right" : "nameInfo.name = name;",
    "info" : "ExpressionStatement[49674-49695]:ExpressionStatement[49729-49750]"
  }, {
    "left" : "return nameInfo;",
    "right" : "return nameInfo;",
    "info" : "ReturnStatement[49708-49724]:ReturnStatement[49763-49779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49742-49780]:Block[49797-49835]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[49756-49768]:ReturnStatement[49811-49823]"
  }, {
    "left" : "return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);",
    "right" : "return createNameInformation(\n            rootNameNode.getString() + name, t.getScope(), rootNameNode);",
    "info" : "ReturnStatement[49799-49902]:ReturnStatement[49854-49957]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[49909-49925]:SwitchCase[49964-49980]"
  }, {
    "left" : "if (t.inGlobalScope())",
    "right" : "if (t.inGlobalScope())",
    "info" : "IfStatement[49934-50282]:IfStatement[49989-50337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49957-50282]:Block[50012-50337]"
  }, {
    "left" : "NameInformation nameInfo = new NameInformation();",
    "right" : "NameInformation nameInfo = new NameInformation();",
    "info" : "VariableDeclarationStatement[49969-50018]:VariableDeclarationStatement[50024-50073]"
  }, {
    "left" : "if (name.indexOf('.') == 0)",
    "right" : "if (name.indexOf('.') == 0)",
    "info" : "IfStatement[50029-50192]:IfStatement[50084-50247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50057-50139]:Block[50112-50194]"
  }, {
    "left" : "nameInfo.name = name.substring(1);",
    "right" : "nameInfo.name = name.substring(1);",
    "info" : "ExpressionStatement[50071-50105]:ExpressionStatement[50126-50160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50145-50192]:Block[50200-50247]"
  }, {
    "left" : "nameInfo.name = name;",
    "right" : "nameInfo.name = name;",
    "info" : "ExpressionStatement[50159-50180]:ExpressionStatement[50214-50235]"
  }, {
    "left" : "nameInfo.isExternallyReferenceable = true;",
    "right" : "nameInfo.isExternallyReferenceable = true;",
    "info" : "ExpressionStatement[50203-50245]:ExpressionStatement[50258-50300]"
  }, {
    "left" : "return nameInfo;",
    "right" : "return nameInfo;",
    "info" : "ReturnStatement[50256-50272]:ReturnStatement[50311-50327]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[50291-50303]:ReturnStatement[50346-50358]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[50310-50318]:SwitchCase[50365-50373]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[50327-50339]:ReturnStatement[50382-50394]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50751-50758]:Modifier[50806-50813]"
  }, {
    "left" : "NameInformation",
    "right" : "NameInformation",
    "info" : "SimpleType[50759-50774]:SimpleType[50814-50829]"
  }, {
    "left" : "createNameInformation",
    "right" : "createNameInformation",
    "info" : "SimpleName[50775-50796]:SimpleName[50830-50851]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[50804-50815]:SingleVariableDeclaration[50859-50870]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[50817-50828]:SingleVariableDeclaration[50872-50883]"
  }, {
    "left" : "Node rootNameNode",
    "right" : "Node rootNameNode",
    "info" : "SingleVariableDeclaration[50830-50847]:SingleVariableDeclaration[50885-50902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50849-51777]:Block[50904-51832]"
  }, {
    "left" : "String rootName = rootNameNode.getString();",
    "right" : "String rootName = rootNameNode.getString();",
    "info" : "VariableDeclarationStatement[50933-50976]:VariableDeclarationStatement[50988-51031]"
  }, {
    "left" : "Var v = scope.getVar(rootName);",
    "right" : "Var v = scope.getVar(rootName);",
    "info" : "VariableDeclarationStatement[50981-51012]:VariableDeclarationStatement[51036-51067]"
  }, {
    "left" : "boolean isExtern = (v == null && externalNames.contains(rootName));",
    "right" : "boolean isExtern = (v == null && externalNames.contains(rootName));",
    "info" : "VariableDeclarationStatement[51017-51084]:VariableDeclarationStatement[51072-51139]"
  }, {
    "left" : "boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||\n        rootName.equals(WINDOW);",
    "right" : "boolean isGlobalRef = (v != null && v.isGlobal()) || isExtern ||\n        rootName.equals(WINDOW);",
    "info" : "VariableDeclarationStatement[51089-51186]:VariableDeclarationStatement[51144-51241]"
  }, {
    "left" : "if (!isGlobalRef)",
    "right" : "if (!isGlobalRef)",
    "info" : "IfStatement[51191-51235]:IfStatement[51246-51290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51209-51235]:Block[51264-51290]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[51217-51229]:ReturnStatement[51272-51284]"
  }, {
    "left" : "NameInformation nameInfo = new NameInformation();",
    "right" : "NameInformation nameInfo = new NameInformation();",
    "info" : "VariableDeclarationStatement[51241-51290]:VariableDeclarationStatement[51296-51345]"
  }, {
    "left" : "int idx = name.indexOf(PROTOTYPE_SUBSTRING);",
    "right" : "int idx = name.indexOf(PROTOTYPE_SUBSTRING);",
    "info" : "VariableDeclarationStatement[51369-51413]:VariableDeclarationStatement[51424-51468]"
  }, {
    "left" : "if (idx != -1)",
    "right" : "if (idx != -1)",
    "info" : "IfStatement[51418-51624]:IfStatement[51473-51679]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51433-51624]:Block[51488-51679]"
  }, {
    "left" : "nameInfo.isPrototype = true;",
    "right" : "nameInfo.isPrototype = true;",
    "info" : "ExpressionStatement[51441-51469]:ExpressionStatement[51496-51524]"
  }, {
    "left" : "nameInfo.prototypeClass = name.substring(0, idx);",
    "right" : "nameInfo.prototypeClass = name.substring(0, idx);",
    "info" : "ExpressionStatement[51476-51525]:ExpressionStatement[51531-51580]"
  }, {
    "left" : "nameInfo.prototypeProperty = name.substring(\n          idx + PROTOTYPE_SUBSTRING_LEN);",
    "right" : "nameInfo.prototypeProperty = name.substring(\n          idx + PROTOTYPE_SUBSTRING_LEN);",
    "info" : "ExpressionStatement[51532-51618]:ExpressionStatement[51587-51673]"
  }, {
    "left" : "nameInfo.name = name;",
    "right" : "nameInfo.name = name;",
    "info" : "ExpressionStatement[51630-51651]:ExpressionStatement[51685-51706]"
  }, {
    "left" : "nameInfo.isExternallyReferenceable =\n        isExtern || isExternallyReferenceable(scope, name);",
    "right" : "nameInfo.isExternallyReferenceable =\n        isExtern || isExternallyReferenceable(scope, name);",
    "info" : "ExpressionStatement[51656-51752]:ExpressionStatement[51711-51807]"
  }, {
    "left" : "return nameInfo;",
    "right" : "return nameInfo;",
    "info" : "ReturnStatement[51757-51773]:ReturnStatement[51812-51828]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52046-52053]:Modifier[52101-52108]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[52054-52061]:PrimitiveType[52109-52116]"
  }, {
    "left" : "isExternallyReferenceable",
    "right" : "isExternallyReferenceable",
    "info" : "SimpleName[52062-52087]:SimpleName[52117-52142]"
  }, {
    "left" : "Scope scope",
    "right" : "Scope scope",
    "info" : "SingleVariableDeclaration[52088-52099]:SingleVariableDeclaration[52143-52154]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[52101-52112]:SingleVariableDeclaration[52156-52167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52114-52376]:Block[52169-52431]"
  }, {
    "left" : "if (compiler.getCodingConvention().isExported(name))",
    "right" : "if (compiler.getCodingConvention().isExported(name))",
    "info" : "IfStatement[52120-52199]:IfStatement[52175-52254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52173-52199]:Block[52228-52254]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[52181-52193]:ReturnStatement[52236-52248]"
  }, {
    "left" : "if (scope.isLocal())",
    "right" : "if (scope.isLocal())",
    "info" : "IfStatement[52204-52252]:IfStatement[52259-52307]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52225-52252]:Block[52280-52307]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[52233-52246]:ReturnStatement[52288-52301]"
  }, {
    "left" : "for (String s : globalNames)",
    "right" : "for (String s : globalNames)",
    "info" : "EnhancedForStatement[52257-52354]:EnhancedForStatement[52312-52409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52286-52354]:Block[52341-52409]"
  }, {
    "left" : "if (name.startsWith(s))",
    "right" : "if (name.startsWith(s))",
    "info" : "IfStatement[52294-52348]:IfStatement[52349-52403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52318-52348]:Block[52373-52403]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[52328-52340]:ReturnStatement[52383-52395]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[52359-52372]:ReturnStatement[52414-52427]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52470-52477]:Modifier[52525-52532]"
  }, {
    "left" : "List<NameInformation>",
    "right" : "List<NameInformation>",
    "info" : "ParameterizedType[52478-52499]:ParameterizedType[52533-52554]"
  }, {
    "left" : "getDependencyScope",
    "right" : "getDependencyScope",
    "info" : "SimpleName[52500-52518]:SimpleName[52555-52573]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52519-52525]:SingleVariableDeclaration[52574-52580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52527-52727]:Block[52582-52782]"
  }, {
    "left" : "for (Node node : n.getAncestors())",
    "right" : "for (Node node : n.getAncestors())",
    "info" : "EnhancedForStatement[52533-52686]:EnhancedForStatement[52588-52741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52568-52686]:Block[52623-52741]"
  }, {
    "left" : "List<NameInformation> refs = scopes.get(node);",
    "right" : "List<NameInformation> refs = scopes.get(node);",
    "info" : "VariableDeclarationStatement[52576-52622]:VariableDeclarationStatement[52631-52677]"
  }, {
    "left" : "if (!refs.isEmpty())",
    "right" : "if (!refs.isEmpty())",
    "info" : "IfStatement[52629-52680]:IfStatement[52684-52735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52650-52680]:Block[52705-52735]"
  }, {
    "left" : "return refs;",
    "right" : "return refs;",
    "info" : "ReturnStatement[52660-52672]:ReturnStatement[52715-52727]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[52692-52723]:ReturnStatement[52747-52778]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52972-52979]:Modifier[53027-53034]"
  }, {
    "left" : "List<NameInformation>",
    "right" : "List<NameInformation>",
    "info" : "ParameterizedType[52980-53001]:ParameterizedType[53035-53056]"
  }, {
    "left" : "getEnclosingFunctionDependencyScope",
    "right" : "getEnclosingFunctionDependencyScope",
    "info" : "SimpleName[53002-53037]:SimpleName[53057-53092]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[53045-53060]:SingleVariableDeclaration[53100-53115]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53062-53842]:Block[53117-53897]"
  }, {
    "left" : "Node function = t.getEnclosingFunction();",
    "right" : "Node function = t.getEnclosingFunction();",
    "info" : "VariableDeclarationStatement[53068-53109]:VariableDeclarationStatement[53123-53164]"
  }, {
    "left" : "if (function == null)",
    "right" : "if (function == null)",
    "info" : "IfStatement[53114-53181]:IfStatement[53169-53236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53136-53181]:Block[53191-53236]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[53144-53175]:ReturnStatement[53199-53230]"
  }, {
    "left" : "List<NameInformation> refs = scopes.get(function);",
    "right" : "List<NameInformation> refs = scopes.get(function);",
    "info" : "VariableDeclarationStatement[53187-53237]:VariableDeclarationStatement[53242-53292]"
  }, {
    "left" : "if (!refs.isEmpty())",
    "right" : "if (!refs.isEmpty())",
    "info" : "IfStatement[53242-53289]:IfStatement[53297-53344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53263-53289]:Block[53318-53344]"
  }, {
    "left" : "return refs;",
    "right" : "return refs;",
    "info" : "ReturnStatement[53271-53283]:ReturnStatement[53326-53338]"
  }, {
    "left" : "Node parent = function.getParent();",
    "right" : "Node parent = function.getParent();",
    "info" : "VariableDeclarationStatement[53396-53431]:VariableDeclarationStatement[53451-53486]"
  }, {
    "left" : "if (parent != null)",
    "right" : "if (parent != null)",
    "info" : "IfStatement[53436-53801]:IfStatement[53491-53856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53456-53801]:Block[53511-53856]"
  }, {
    "left" : "while (parent.isHook())",
    "right" : "while (parent.isHook())",
    "info" : "WhileStatement[53577-53647]:WhileStatement[53632-53702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53601-53647]:Block[53656-53702]"
  }, {
    "left" : "parent = parent.getParent();",
    "right" : "parent = parent.getParent();",
    "info" : "ExpressionStatement[53611-53639]:ExpressionStatement[53666-53694]"
  }, {
    "left" : "if (parent.isName())",
    "right" : "if (parent.isName())",
    "info" : "IfStatement[53655-53720]:IfStatement[53710-53775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53676-53720]:Block[53731-53775]"
  }, {
    "left" : "return scopes.get(parent);",
    "right" : "return scopes.get(parent);",
    "info" : "ReturnStatement[53686-53712]:ReturnStatement[53741-53767]"
  }, {
    "left" : "if (parent.isAssign())",
    "right" : "if (parent.isAssign())",
    "info" : "IfStatement[53728-53795]:IfStatement[53783-53850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53751-53795]:Block[53806-53850]"
  }, {
    "left" : "return scopes.get(parent);",
    "right" : "return scopes.get(parent);",
    "info" : "ReturnStatement[53761-53787]:ReturnStatement[53816-53842]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[53807-53838]:ReturnStatement[53862-53893]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53911-53918]:Modifier[53966-53973]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[53919-53923]:PrimitiveType[53974-53978]"
  }, {
    "left" : "calculateReferences",
    "right" : "calculateReferences",
    "info" : "SimpleName[53924-53943]:SimpleName[53979-53998]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53946-54283]:Block[54001-54338]"
  }, {
    "left" : "JsName window = getName(WINDOW, true);",
    "right" : "JsName window = getName(WINDOW, true);",
    "info" : "VariableDeclarationStatement[53952-53990]:VariableDeclarationStatement[54007-54045]"
  }, {
    "left" : "window.referenced = true;",
    "right" : "window.referenced = true;",
    "info" : "ExpressionStatement[53995-54020]:ExpressionStatement[54050-54075]"
  }, {
    "left" : "JsName function = getName(FUNCTION, true);",
    "right" : "JsName function = getName(FUNCTION, true);",
    "info" : "VariableDeclarationStatement[54025-54067]:VariableDeclarationStatement[54080-54122]"
  }, {
    "left" : "function.referenced = true;",
    "right" : "function.referenced = true;",
    "info" : "ExpressionStatement[54072-54099]:ExpressionStatement[54127-54154]"
  }, {
    "left" : "FixedPointGraphTraversal.newTraversal(new ReferencePropagationCallback())\n        .computeFixedPoint(referenceGraph);",
    "right" : "FixedPointGraphTraversal.newTraversal(new ReferencePropagationCallback())\n        .computeFixedPoint(referenceGraph);",
    "info" : "ExpressionStatement[54162-54279]:ExpressionStatement[54217-54334]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[54765-54772]:Modifier[54820-54827]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[54773-54776]:PrimitiveType[54828-54831]"
  }, {
    "left" : "countOf",
    "right" : "countOf",
    "info" : "SimpleName[54777-54784]:SimpleName[54832-54839]"
  }, {
    "left" : "TriState isClass",
    "right" : "TriState isClass",
    "info" : "SingleVariableDeclaration[54785-54801]:SingleVariableDeclaration[54840-54856]"
  }, {
    "left" : "TriState referenced",
    "right" : "TriState referenced",
    "info" : "SingleVariableDeclaration[54803-54822]:SingleVariableDeclaration[54858-54877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54824-55425]:Block[54879-55480]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[54830-54844]:VariableDeclarationStatement[54885-54899]"
  }, {
    "left" : "for (JsName name : allNames.values())",
    "right" : "for (JsName name : allNames.values())",
    "info" : "EnhancedForStatement[54849-55403]:EnhancedForStatement[54904-55458]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54887-55403]:Block[54942-55458]"
  }, {
    "left" : "boolean nodeIsClass = name.prototypeNames.size() > 0;",
    "right" : "boolean nodeIsClass = name.prototypeNames.size() > 0;",
    "info" : "VariableDeclarationStatement[54896-54949]:VariableDeclarationStatement[54951-55004]"
  }, {
    "left" : "boolean classMatch = isClass == TriState.BOTH\n          || (nodeIsClass && isClass == TriState.TRUE)\n          || (!nodeIsClass && isClass == TriState.FALSE);",
    "right" : "boolean classMatch = isClass == TriState.BOTH\n          || (nodeIsClass && isClass == TriState.TRUE)\n          || (!nodeIsClass && isClass == TriState.FALSE);",
    "info" : "VariableDeclarationStatement[54957-55115]:VariableDeclarationStatement[55012-55170]"
  }, {
    "left" : "boolean referenceMatch = referenced == TriState.BOTH\n          || (name.referenced && referenced == TriState.TRUE)\n          || (!name.referenced && referenced == TriState.FALSE);",
    "right" : "boolean referenceMatch = referenced == TriState.BOTH\n          || (name.referenced && referenced == TriState.TRUE)\n          || (!name.referenced && referenced == TriState.FALSE);",
    "info" : "VariableDeclarationStatement[55123-55302]:VariableDeclarationStatement[55178-55357]"
  }, {
    "left" : "if (classMatch && referenceMatch && !name.externallyDefined)",
    "right" : "if (classMatch && referenceMatch && !name.externallyDefined)",
    "info" : "IfStatement[55310-55397]:IfStatement[55365-55452]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55371-55397]:Block[55426-55452]"
  }, {
    "left" : "count++;",
    "right" : "count++;",
    "info" : "ExpressionStatement[55381-55389]:ExpressionStatement[55436-55444]"
  }, {
    "left" : "return count;",
    "right" : "return count;",
    "info" : "ReturnStatement[55408-55421]:ReturnStatement[55463-55476]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[55491-55498]:Modifier[55546-55553]"
  }, {
    "left" : "List<Node>",
    "right" : "List<Node>",
    "info" : "ParameterizedType[55499-55509]:ParameterizedType[55554-55564]"
  }, {
    "left" : "getSideEffectNodes",
    "right" : "getSideEffectNodes",
    "info" : "SimpleName[55510-55528]:SimpleName[55565-55583]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[55529-55535]:SingleVariableDeclaration[55584-55590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55537-56054]:Block[55592-56109]"
  }, {
    "left" : "List<Node> subexpressions = Lists.newArrayList();",
    "right" : "List<Node> subexpressions = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[55543-55592]:VariableDeclarationStatement[55598-55647]"
  }, {
    "left" : "NodeTraversal.traverse(\n        compiler, n,\n        new GatherSideEffectSubexpressionsCallback(\n            compiler,\n            new GetReplacementSideEffectSubexpressions(\n                compiler, subexpressions)));",
    "right" : "NodeTraversal.traverse(\n        compiler, n,\n        new GatherSideEffectSubexpressionsCallback(\n            compiler,\n            new GetReplacementSideEffectSubexpressions(\n                compiler, subexpressions)));",
    "info" : "ExpressionStatement[55597-55816]:ExpressionStatement[55652-55871]"
  }, {
    "left" : "List<Node> replacements =\n        Lists.newArrayListWithExpectedSize(subexpressions.size());",
    "right" : "List<Node> replacements =\n        Lists.newArrayListWithExpectedSize(subexpressions.size());",
    "info" : "VariableDeclarationStatement[55822-55914]:VariableDeclarationStatement[55877-55969]"
  }, {
    "left" : "for (Node subexpression : subexpressions)",
    "right" : "for (Node subexpression : subexpressions)",
    "info" : "EnhancedForStatement[55919-56025]:EnhancedForStatement[55974-56080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55961-56025]:Block[56016-56080]"
  }, {
    "left" : "replacements.add(NodeUtil.newExpr(subexpression));",
    "right" : "replacements.add(NodeUtil.newExpr(subexpression));",
    "info" : "ExpressionStatement[55969-56019]:ExpressionStatement[56024-56074]"
  }, {
    "left" : "return replacements;",
    "right" : "return replacements;",
    "info" : "ReturnStatement[56030-56050]:ReturnStatement[56085-56105]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[56287-56294]:Modifier[56342-56349]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56295-56299]:PrimitiveType[56350-56354]"
  }, {
    "left" : "replaceWithRhs",
    "right" : "replaceWithRhs",
    "info" : "SimpleName[56300-56314]:SimpleName[56355-56369]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[56315-56326]:SingleVariableDeclaration[56370-56381]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[56328-56334]:SingleVariableDeclaration[56383-56389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56336-57561]:Block[56391-57616]"
  }, {
    "left" : "if (valueConsumedByParent(n, parent))",
    "right" : "if (valueConsumedByParent(n, parent))",
    "info" : "IfStatement[56342-57557]:IfStatement[56397-57612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56380-56984]:Block[56435-57039]"
  }, {
    "left" : "List<Node> replacements = getRhsSubexpressions(n);",
    "right" : "List<Node> replacements = getRhsSubexpressions(n);",
    "info" : "VariableDeclarationStatement[56500-56550]:VariableDeclarationStatement[56555-56605]"
  }, {
    "left" : "List<Node> newReplacements = Lists.newArrayList();",
    "right" : "List<Node> newReplacements = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[56557-56607]:VariableDeclarationStatement[56612-56662]"
  }, {
    "left" : "for (int i = 0; i < replacements.size() - 1; i++)",
    "right" : "for (int i = 0; i < replacements.size() - 1; i++)",
    "info" : "ForStatement[56614-56746]:ForStatement[56669-56801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56664-56746]:Block[56719-56801]"
  }, {
    "left" : "newReplacements.addAll(getSideEffectNodes(replacements.get(i)));",
    "right" : "newReplacements.addAll(getSideEffectNodes(replacements.get(i)));",
    "info" : "ExpressionStatement[56674-56738]:ExpressionStatement[56729-56793]"
  }, {
    "left" : "Node valueExpr = replacements.get(replacements.size() - 1);",
    "right" : "Node valueExpr = replacements.get(replacements.size() - 1);",
    "info" : "VariableDeclarationStatement[56753-56812]:VariableDeclarationStatement[56808-56867]"
  }, {
    "left" : "valueExpr.detachFromParent();",
    "right" : "valueExpr.detachFromParent();",
    "info" : "ExpressionStatement[56819-56848]:ExpressionStatement[56874-56903]"
  }, {
    "left" : "newReplacements.add(valueExpr);",
    "right" : "newReplacements.add(valueExpr);",
    "info" : "ExpressionStatement[56855-56886]:ExpressionStatement[56910-56941]"
  }, {
    "left" : "changeProxy.replaceWith(\n          parent, n, collapseReplacements(newReplacements));",
    "right" : "changeProxy.replaceWith(\n          parent, n, collapseReplacements(newReplacements));",
    "info" : "ExpressionStatement[56893-56978]:ExpressionStatement[56948-57033]"
  }, {
    "left" : "if (n.isAssign() && !parent.isFor())",
    "right" : "if (n.isAssign() && !parent.isFor())",
    "info" : "IfStatement[56990-57557]:IfStatement[57045-57612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57027-57493]:Block[57082-57548]"
  }, {
    "left" : "Node replacement = n.getLastChild();",
    "right" : "Node replacement = n.getLastChild();",
    "info" : "VariableDeclarationStatement[57358-57394]:VariableDeclarationStatement[57413-57449]"
  }, {
    "left" : "replacement.detachFromParent();",
    "right" : "replacement.detachFromParent();",
    "info" : "ExpressionStatement[57401-57432]:ExpressionStatement[57456-57487]"
  }, {
    "left" : "changeProxy.replaceWith(parent, n, replacement);",
    "right" : "changeProxy.replaceWith(parent, n, replacement);",
    "info" : "ExpressionStatement[57439-57487]:ExpressionStatement[57494-57542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57499-57557]:Block[57554-57612]"
  }, {
    "left" : "replaceTopLevelExpressionWithRhs(parent, n);",
    "right" : "replaceTopLevelExpressionWithRhs(parent, n);",
    "info" : "ExpressionStatement[57507-57551]:ExpressionStatement[57562-57606]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[57654-57661]:Modifier[57709-57716]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57662-57666]:PrimitiveType[57717-57721]"
  }, {
    "left" : "replaceTopLevelExpressionWithRhs",
    "right" : "replaceTopLevelExpressionWithRhs",
    "info" : "SimpleName[57667-57699]:SimpleName[57722-57754]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[57700-57711]:SingleVariableDeclaration[57755-57766]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[57713-57719]:SingleVariableDeclaration[57768-57774]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57721-59107]:Block[57776-59162]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.FOR:\n      case Token.LABEL:\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.BLOCK:\n      case Token.SCRIPT:\n      case Token.FOR:\n      case Token.LABEL:\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));\n    }",
    "info" : "SwitchStatement[57750-58059]:SwitchStatement[57805-58114]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[57784-57801]:SwitchCase[57839-57856]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[57808-57826]:SwitchCase[57863-57881]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[57833-57848]:SwitchCase[57888-57903]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[57855-57872]:SwitchCase[57910-57927]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[57881-57887]:BreakStatement[57936-57942]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[57894-57902]:SwitchCase[57949-57957]"
  }, {
    "left" : "throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));",
    "right" : "throw new IllegalArgumentException(\n            \"Unsupported parent node type in replaceWithRhs \" +\n            Token.name(parent.getType()));",
    "info" : "ThrowStatement[57911-58053]:ThrowStatement[57966-58108]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.EXPR_RESULT:\n      case Token.FUNCTION:\n      case Token.VAR:\n        break;\n      case Token.ASSIGN:\n        Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\",\n            Token.name(parent.getType()));\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));\n    }",
    "right" : "switch (n.getType()) {\n      case Token.EXPR_RESULT:\n      case Token.FUNCTION:\n      case Token.VAR:\n        break;\n      case Token.ASSIGN:\n        Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\",\n            Token.name(parent.getType()));\n        break;\n      default:\n        throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));\n    }",
    "info" : "SwitchStatement[58065-58544]:SwitchStatement[58120-58599]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[58094-58117]:SwitchCase[58149-58172]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[58124-58144]:SwitchCase[58179-58199]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[58151-58166]:SwitchCase[58206-58221]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[58175-58181]:BreakStatement[58230-58236]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[58188-58206]:SwitchCase[58243-58261]"
  }, {
    "left" : "Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\",\n            Token.name(parent.getType()));",
    "right" : "Preconditions.checkArgument(parent.isFor(),\n            \"Unsupported assignment in replaceWithRhs. parent: %s\",\n            Token.name(parent.getType()));",
    "info" : "ExpressionStatement[58215-58369]:ExpressionStatement[58270-58424]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[58378-58384]:BreakStatement[58433-58439]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[58391-58399]:SwitchCase[58446-58454]"
  }, {
    "left" : "throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));",
    "right" : "throw new IllegalArgumentException(\n            \"Unsupported node type in replaceWithRhs \" +\n            Token.name(n.getType()));",
    "info" : "ThrowStatement[58408-58538]:ThrowStatement[58463-58593]"
  }, {
    "left" : "List<Node> replacements = Lists.newArrayList();",
    "right" : "List<Node> replacements = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[58577-58624]:VariableDeclarationStatement[58632-58679]"
  }, {
    "left" : "for (Node rhs : getRhsSubexpressions(n))",
    "right" : "for (Node rhs : getRhsSubexpressions(n))",
    "info" : "EnhancedForStatement[58629-58729]:EnhancedForStatement[58684-58784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58670-58729]:Block[58725-58784]"
  }, {
    "left" : "replacements.addAll(getSideEffectNodes(rhs));",
    "right" : "replacements.addAll(getSideEffectNodes(rhs));",
    "info" : "ExpressionStatement[58678-58723]:ExpressionStatement[58733-58778]"
  }, {
    "left" : "if (parent.isFor())",
    "right" : "if (parent.isFor())",
    "info" : "IfStatement[58735-59048]:IfStatement[58790-59103]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58755-59048]:Block[58810-59103]"
  }, {
    "left" : "if (replacements.isEmpty())",
    "right" : "if (replacements.isEmpty())",
    "info" : "IfStatement[58834-59042]:IfStatement[58889-59097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58862-58909]:Block[58917-58964]"
  }, {
    "left" : "replacements.add(IR.empty());",
    "right" : "replacements.add(IR.empty());",
    "info" : "ExpressionStatement[58872-58901]:ExpressionStatement[58927-58956]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58915-59042]:Block[58970-59097]"
  }, {
    "left" : "Node expr = collapseReplacements(replacements);",
    "right" : "Node expr = collapseReplacements(replacements);",
    "info" : "VariableDeclarationStatement[58925-58972]:VariableDeclarationStatement[58980-59027]"
  }, {
    "left" : "replacements.clear();",
    "right" : "replacements.clear();",
    "info" : "ExpressionStatement[58981-59002]:ExpressionStatement[59036-59057]"
  }, {
    "left" : "replacements.add(expr);",
    "right" : "replacements.add(expr);",
    "info" : "ExpressionStatement[59011-59034]:ExpressionStatement[59066-59089]"
  }, {
    "left" : "changeProxy.replaceWith(parent, n, replacements);",
    "right" : "changeProxy.replaceWith(parent, n, replacements);",
    "info" : "ExpressionStatement[59054-59103]:ExpressionStatement[59109-59158]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[59762-59769]:Modifier[59817-59824]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[59770-59777]:PrimitiveType[59825-59832]"
  }, {
    "left" : "valueConsumedByParent",
    "right" : "valueConsumedByParent",
    "info" : "SimpleName[59778-59799]:SimpleName[59833-59854]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[59800-59806]:SingleVariableDeclaration[59855-59861]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[59808-59819]:SingleVariableDeclaration[59863-59874]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59821-60400]:Block[59876-60455]"
  }, {
    "left" : "if (NodeUtil.isAssignmentOp(parent))",
    "right" : "if (NodeUtil.isAssignmentOp(parent))",
    "info" : "IfStatement[59827-59912]:IfStatement[59882-59967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59864-59912]:Block[59919-59967]"
  }, {
    "left" : "return parent.getLastChild() == n;",
    "right" : "return parent.getLastChild() == n;",
    "info" : "ReturnStatement[59872-59906]:ReturnStatement[59927-59961]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.NAME:\n      case Token.RETURN:\n        return true;\n      case Token.AND:\n      case Token.OR:\n      case Token.HOOK:\n        return parent.getFirstChild() == n;\n      case Token.FOR:\n        return parent.getFirstChild().getNext() == n;\n      case Token.IF:\n      case Token.WHILE:\n        return parent.getFirstChild() == n;\n      case Token.DO:\n        return parent.getLastChild() == n;\n      default:\n        return false;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.NAME:\n      case Token.RETURN:\n        return true;\n      case Token.AND:\n      case Token.OR:\n      case Token.HOOK:\n        return parent.getFirstChild() == n;\n      case Token.FOR:\n        return parent.getFirstChild().getNext() == n;\n      case Token.IF:\n      case Token.WHILE:\n        return parent.getFirstChild() == n;\n      case Token.DO:\n        return parent.getLastChild() == n;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[59918-60396]:SwitchStatement[59973-60451]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[59952-59968]:SwitchCase[60007-60023]"
  }, {
    "left" : "case Token.RETURN:",
    "right" : "case Token.RETURN:",
    "info" : "SwitchCase[59975-59993]:SwitchCase[60030-60048]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[60002-60014]:ReturnStatement[60057-60069]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[60021-60036]:SwitchCase[60076-60091]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[60043-60057]:SwitchCase[60098-60112]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[60064-60080]:SwitchCase[60119-60135]"
  }, {
    "left" : "return parent.getFirstChild() == n;",
    "right" : "return parent.getFirstChild() == n;",
    "info" : "ReturnStatement[60089-60124]:ReturnStatement[60144-60179]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[60131-60146]:SwitchCase[60186-60201]"
  }, {
    "left" : "return parent.getFirstChild().getNext() == n;",
    "right" : "return parent.getFirstChild().getNext() == n;",
    "info" : "ReturnStatement[60155-60200]:ReturnStatement[60210-60255]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[60207-60221]:SwitchCase[60262-60276]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[60228-60245]:SwitchCase[60283-60300]"
  }, {
    "left" : "return parent.getFirstChild() == n;",
    "right" : "return parent.getFirstChild() == n;",
    "info" : "ReturnStatement[60254-60289]:ReturnStatement[60309-60344]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[60296-60310]:SwitchCase[60351-60365]"
  }, {
    "left" : "return parent.getLastChild() == n;",
    "right" : "return parent.getLastChild() == n;",
    "info" : "ReturnStatement[60319-60353]:ReturnStatement[60374-60408]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[60360-60368]:SwitchCase[60415-60423]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[60377-60390]:ReturnStatement[60432-60445]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[60557-60564]:Modifier[60612-60619]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[60565-60569]:SimpleType[60620-60624]"
  }, {
    "left" : "collapseReplacements",
    "right" : "collapseReplacements",
    "info" : "SimpleName[60570-60590]:SimpleName[60625-60645]"
  }, {
    "left" : "List<Node> replacements",
    "right" : "List<Node> replacements",
    "info" : "SingleVariableDeclaration[60591-60614]:SingleVariableDeclaration[60646-60669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60616-60916]:Block[60671-60971]"
  }, {
    "left" : "Node expr = null;",
    "right" : "Node expr = null;",
    "info" : "VariableDeclarationStatement[60622-60639]:VariableDeclarationStatement[60677-60694]"
  }, {
    "left" : "for (Node rep : replacements)",
    "right" : "for (Node rep : replacements)",
    "info" : "EnhancedForStatement[60644-60894]:EnhancedForStatement[60699-60949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60674-60894]:Block[60729-60949]"
  }, {
    "left" : "if (rep.isExprResult())",
    "right" : "if (rep.isExprResult())",
    "info" : "IfStatement[60682-60782]:IfStatement[60737-60837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60706-60782]:Block[60761-60837]"
  }, {
    "left" : "rep = rep.getFirstChild();",
    "right" : "rep = rep.getFirstChild();",
    "info" : "ExpressionStatement[60716-60742]:ExpressionStatement[60771-60797]"
  }, {
    "left" : "rep.detachFromParent();",
    "right" : "rep.detachFromParent();",
    "info" : "ExpressionStatement[60751-60774]:ExpressionStatement[60806-60829]"
  }, {
    "left" : "if (expr == null)",
    "right" : "if (expr == null)",
    "info" : "IfStatement[60790-60888]:IfStatement[60845-60943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60808-60837]:Block[60863-60892]"
  }, {
    "left" : "expr = rep;",
    "right" : "expr = rep;",
    "info" : "ExpressionStatement[60818-60829]:ExpressionStatement[60873-60884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60843-60888]:Block[60898-60943]"
  }, {
    "left" : "expr = IR.comma(expr, rep);",
    "right" : "expr = IR.comma(expr, rep);",
    "info" : "ExpressionStatement[60853-60880]:ExpressionStatement[60908-60935]"
  }, {
    "left" : "return expr;",
    "right" : "return expr;",
    "info" : "ReturnStatement[60900-60912]:ReturnStatement[60955-60967]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[61000-61007]:Modifier[61055-61062]"
  }, {
    "left" : "List<Node>",
    "right" : "List<Node>",
    "info" : "ParameterizedType[61008-61018]:ParameterizedType[61063-61073]"
  }, {
    "left" : "getRhsSubexpressions",
    "right" : "getRhsSubexpressions",
    "info" : "SimpleName[61019-61039]:SimpleName[61074-61094]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[61040-61046]:SingleVariableDeclaration[61095-61101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61048-62189]:Block[61103-62244]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.EXPR_RESULT:\n        // process body\n        return getRhsSubexpressions(n.getFirstChild());\n      case Token.FUNCTION:\n        // function nodes have no RHS\n        return Collections.emptyList();\n      case Token.NAME:\n        {\n          // parent is a var node.  RHS is the first child\n          Node rhs = n.getFirstChild();\n          if (rhs != null) {\n            return Lists.newArrayList(rhs);\n          } else {\n            return Collections.emptyList();\n          }\n        }\n      case Token.ASSIGN:\n        {\n          // add LHS and RHS expressions - LHS may be a complex expression\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          return Lists.newArrayList(lhs, rhs);\n        }\n      case Token.VAR:\n        {\n          // recurse on all children\n          List<Node> nodes = Lists.newArrayList();\n          for (Node child : n.children()) {\n            nodes.addAll(getRhsSubexpressions(child));\n          }\n          return nodes;\n        }\n      default:\n        throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.EXPR_RESULT:\n        // process body\n        return getRhsSubexpressions(n.getFirstChild());\n      case Token.FUNCTION:\n        // function nodes have no RHS\n        return Collections.emptyList();\n      case Token.NAME:\n        {\n          // parent is a var node.  RHS is the first child\n          Node rhs = n.getFirstChild();\n          if (rhs != null) {\n            return Lists.newArrayList(rhs);\n          } else {\n            return Collections.emptyList();\n          }\n        }\n      case Token.ASSIGN:\n        {\n          // add LHS and RHS expressions - LHS may be a complex expression\n          Node lhs = n.getFirstChild();\n          Node rhs = lhs.getNext();\n          return Lists.newArrayList(lhs, rhs);\n        }\n      case Token.VAR:\n        {\n          // recurse on all children\n          List<Node> nodes = Lists.newArrayList();\n          for (Node child : n.children()) {\n            nodes.addAll(getRhsSubexpressions(child));\n          }\n          return nodes;\n        }\n      default:\n        throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);\n    }",
    "info" : "SwitchStatement[61054-62185]:SwitchStatement[61109-62240]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[61083-61106]:SwitchCase[61138-61161]"
  }, {
    "left" : "return getRhsSubexpressions(n.getFirstChild());",
    "right" : "return getRhsSubexpressions(n.getFirstChild());",
    "info" : "ReturnStatement[61139-61186]:ReturnStatement[61194-61241]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[61193-61213]:SwitchCase[61248-61268]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[61260-61291]:ReturnStatement[61315-61346]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[61298-61314]:SwitchCase[61353-61369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61323-61581]:Block[61378-61636]"
  }, {
    "left" : "Node rhs = n.getFirstChild();",
    "right" : "Node rhs = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[61394-61423]:VariableDeclarationStatement[61449-61478]"
  }, {
    "left" : "if (rhs != null)",
    "right" : "if (rhs != null)",
    "info" : "IfStatement[61434-61571]:IfStatement[61489-61626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61451-61508]:Block[61506-61563]"
  }, {
    "left" : "return Lists.newArrayList(rhs);",
    "right" : "return Lists.newArrayList(rhs);",
    "info" : "ReturnStatement[61465-61496]:ReturnStatement[61520-61551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61514-61571]:Block[61569-61626]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[61528-61559]:ReturnStatement[61583-61614]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[61588-61606]:SwitchCase[61643-61661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61615-61824]:Block[61670-61879]"
  }, {
    "left" : "Node lhs = n.getFirstChild();",
    "right" : "Node lhs = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[61702-61731]:VariableDeclarationStatement[61757-61786]"
  }, {
    "left" : "Node rhs = lhs.getNext();",
    "right" : "Node rhs = lhs.getNext();",
    "info" : "VariableDeclarationStatement[61742-61767]:VariableDeclarationStatement[61797-61822]"
  }, {
    "left" : "return Lists.newArrayList(lhs, rhs);",
    "right" : "return Lists.newArrayList(lhs, rhs);",
    "info" : "ReturnStatement[61778-61814]:ReturnStatement[61833-61869]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[61831-61846]:SwitchCase[61886-61901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61855-62089]:Block[61910-62144]"
  }, {
    "left" : "List<Node> nodes = Lists.newArrayList();",
    "right" : "List<Node> nodes = Lists.newArrayList();",
    "info" : "VariableDeclarationStatement[61904-61944]:VariableDeclarationStatement[61959-61999]"
  }, {
    "left" : "for (Node child : n.children())",
    "right" : "for (Node child : n.children())",
    "info" : "EnhancedForStatement[61955-62055]:EnhancedForStatement[62010-62110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61987-62055]:Block[62042-62110]"
  }, {
    "left" : "nodes.addAll(getRhsSubexpressions(child));",
    "right" : "nodes.addAll(getRhsSubexpressions(child));",
    "info" : "ExpressionStatement[62001-62043]:ExpressionStatement[62056-62098]"
  }, {
    "left" : "return nodes;",
    "right" : "return nodes;",
    "info" : "ReturnStatement[62066-62079]:ReturnStatement[62121-62134]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[62096-62104]:SwitchCase[62151-62159]"
  }, {
    "left" : "throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);",
    "right" : "throw new IllegalArgumentException(\"AstChangeProxy::getRhs \" + n);",
    "info" : "ThrowStatement[62113-62179]:ThrowStatement[62168-62234]"
  } ]
}