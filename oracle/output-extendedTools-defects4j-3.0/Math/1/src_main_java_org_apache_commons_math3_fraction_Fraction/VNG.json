{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "TypeDeclaration[1251-23714]:TypeDeclaration[1251-23834]"
    }, {
      "left" : "public static final Fraction TWO = new Fraction(2, 1);",
      "right" : "public static final Fraction TWO = new Fraction(2, 1);",
      "info" : "FieldDeclaration[1495-1593]:FieldDeclaration[1495-1593]"
    }, {
      "left" : "public static final Fraction ONE = new Fraction(1, 1);",
      "right" : "public static final Fraction ONE = new Fraction(1, 1);",
      "info" : "FieldDeclaration[1599-1693]:FieldDeclaration[1599-1693]"
    }, {
      "left" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "right" : "public static final Fraction ZERO = new Fraction(0, 1);",
      "info" : "FieldDeclaration[1699-1794]:FieldDeclaration[1699-1794]"
    }, {
      "left" : "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
      "right" : "public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);",
      "info" : "FieldDeclaration[1800-1904]:FieldDeclaration[1800-1904]"
    }, {
      "left" : "public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
      "right" : "public static final Fraction ONE_FIFTH = new Fraction(1, 5);",
      "info" : "FieldDeclaration[1910-2012]:FieldDeclaration[1910-2012]"
    }, {
      "left" : "public static final Fraction ONE_HALF = new Fraction(1, 2);",
      "right" : "public static final Fraction ONE_HALF = new Fraction(1, 2);",
      "info" : "FieldDeclaration[2018-2119]:FieldDeclaration[2018-2119]"
    }, {
      "left" : "public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
      "right" : "public static final Fraction ONE_QUARTER = new Fraction(1, 4);",
      "info" : "FieldDeclaration[2125-2229]:FieldDeclaration[2125-2229]"
    }, {
      "left" : "public static final Fraction ONE_THIRD = new Fraction(1, 3);",
      "right" : "public static final Fraction ONE_THIRD = new Fraction(1, 3);",
      "info" : "FieldDeclaration[2235-2337]:FieldDeclaration[2235-2337]"
    }, {
      "left" : "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
      "right" : "public static final Fraction THREE_FIFTHS = new Fraction(3, 5);",
      "info" : "FieldDeclaration[2343-2448]:FieldDeclaration[2343-2448]"
    }, {
      "left" : "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
      "right" : "public static final Fraction THREE_QUARTERS = new Fraction(3, 4);",
      "info" : "FieldDeclaration[2454-2561]:FieldDeclaration[2454-2561]"
    }, {
      "left" : "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
      "right" : "public static final Fraction TWO_FIFTHS = new Fraction(2, 5);",
      "info" : "FieldDeclaration[2567-2670]:FieldDeclaration[2567-2670]"
    }, {
      "left" : "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
      "right" : "public static final Fraction TWO_QUARTERS = new Fraction(2, 4);",
      "info" : "FieldDeclaration[2676-2781]:FieldDeclaration[2676-2781]"
    }, {
      "left" : "public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
      "right" : "public static final Fraction TWO_THIRDS = new Fraction(2, 3);",
      "info" : "FieldDeclaration[2787-2890]:FieldDeclaration[2787-2890]"
    }, {
      "left" : "public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
      "right" : "public static final Fraction MINUS_ONE = new Fraction(-1, 1);",
      "info" : "FieldDeclaration[2896-3002]:FieldDeclaration[2896-3002]"
    }, {
      "left" : "private static final long serialVersionUID = 3698073679419233275L;",
      "right" : "private static final long serialVersionUID = 3698073679419233275L;",
      "info" : "FieldDeclaration[3008-3117]:FieldDeclaration[3008-3117]"
    }, {
      "left" : "private static final double DEFAULT_EPSILON = 1e-5;",
      "right" : "private static final double DEFAULT_EPSILON = 1e-5;",
      "info" : "FieldDeclaration[3123-3227]:FieldDeclaration[3123-3227]"
    }, {
      "left" : "private final int denominator;",
      "right" : "private final int denominator;",
      "info" : "FieldDeclaration[3233-3291]:FieldDeclaration[3233-3291]"
    }, {
      "left" : "private final int numerator;",
      "right" : "private final int numerator;",
      "info" : "FieldDeclaration[3297-3351]:FieldDeclaration[3297-3351]"
    }, {
      "left" : "public Fraction(double value) throws FractionConversionException",
      "right" : "public Fraction(double value) throws FractionConversionException",
      "info" : "MethodDeclaration[3357-3704]:MethodDeclaration[3357-3704]"
    }, {
      "left" : "public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException",
      "right" : "public Fraction(double value, double epsilon, int maxIterations)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[3710-4560]:MethodDeclaration[3710-4560]"
    }, {
      "left" : "public Fraction(double value, int maxDenominator)\n        throws FractionConversionException",
      "right" : "public Fraction(double value, int maxDenominator)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[4566-5245]:MethodDeclaration[4566-5245]"
    }, {
      "left" : "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException",
      "right" : "private Fraction(double value, double epsilon, int maxDenominator, int maxIterations)\n        throws FractionConversionException",
      "info" : "MethodDeclaration[5251-8739]:MethodDeclaration[5251-8859]"
    }, {
      "left" : "public Fraction(int num)",
      "right" : "public Fraction(int num)",
      "info" : "MethodDeclaration[8745-8918]:MethodDeclaration[8865-9038]"
    }, {
      "left" : "public Fraction(int num, int den)",
      "right" : "public Fraction(int num, int den)",
      "info" : "MethodDeclaration[8924-10136]:MethodDeclaration[9044-10256]"
    }, {
      "left" : "public Fraction abs()",
      "right" : "public Fraction abs()",
      "info" : "MethodDeclaration[10142-10425]:MethodDeclaration[10262-10545]"
    }, {
      "left" : "public int compareTo(Fraction object)",
      "right" : "public int compareTo(Fraction object)",
      "info" : "MethodDeclaration[10431-10906]:MethodDeclaration[10551-11026]"
    }, {
      "left" : "public double doubleValue()",
      "right" : "public double doubleValue()",
      "info" : "MethodDeclaration[10912-11206]:MethodDeclaration[11032-11326]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[11212-12151]:MethodDeclaration[11332-12271]"
    }, {
      "left" : "public float floatValue()",
      "right" : "public float floatValue()",
      "info" : "MethodDeclaration[12157-12428]:MethodDeclaration[12277-12548]"
    }, {
      "left" : "public int getDenominator()",
      "right" : "public int getDenominator()",
      "info" : "MethodDeclaration[12434-12576]:MethodDeclaration[12554-12696]"
    }, {
      "left" : "public int getNumerator()",
      "right" : "public int getNumerator()",
      "info" : "MethodDeclaration[12582-12716]:MethodDeclaration[12702-12836]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[12722-12928]:MethodDeclaration[12842-13048]"
    }, {
      "left" : "public int intValue()",
      "right" : "public int intValue()",
      "info" : "MethodDeclaration[12934-13178]:MethodDeclaration[13054-13298]"
    }, {
      "left" : "public long longValue()",
      "right" : "public long longValue()",
      "info" : "MethodDeclaration[13184-13431]:MethodDeclaration[13304-13551]"
    }, {
      "left" : "public Fraction negate()",
      "right" : "public Fraction negate()",
      "info" : "MethodDeclaration[13437-13802]:MethodDeclaration[13557-13922]"
    }, {
      "left" : "public Fraction reciprocal()",
      "right" : "public Fraction reciprocal()",
      "info" : "MethodDeclaration[13808-14011]:MethodDeclaration[13928-14131]"
    }, {
      "left" : "public Fraction add(Fraction fraction)",
      "right" : "public Fraction add(Fraction fraction)",
      "info" : "MethodDeclaration[14017-14605]:MethodDeclaration[14137-14725]"
    }, {
      "left" : "public Fraction add(final int i)",
      "right" : "public Fraction add(final int i)",
      "info" : "MethodDeclaration[14611-14846]:MethodDeclaration[14731-14966]"
    }, {
      "left" : "public Fraction subtract(Fraction fraction)",
      "right" : "public Fraction subtract(Fraction fraction)",
      "info" : "MethodDeclaration[14852-15452]:MethodDeclaration[14972-15572]"
    }, {
      "left" : "public Fraction subtract(final int i)",
      "right" : "public Fraction subtract(final int i)",
      "info" : "MethodDeclaration[15458-15710]:MethodDeclaration[15578-15830]"
    }, {
      "left" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "right" : "private Fraction addSub(Fraction fraction, boolean isAdd)",
      "info" : "MethodDeclaration[15716-18408]:MethodDeclaration[15836-18528]"
    }, {
      "left" : "public Fraction multiply(Fraction fraction)",
      "right" : "public Fraction multiply(Fraction fraction)",
      "info" : "MethodDeclaration[18414-19577]:MethodDeclaration[18534-19697]"
    }, {
      "left" : "public Fraction multiply(final int i)",
      "right" : "public Fraction multiply(final int i)",
      "info" : "MethodDeclaration[19583-19822]:MethodDeclaration[19703-19942]"
    }, {
      "left" : "public Fraction divide(Fraction fraction)",
      "right" : "public Fraction divide(Fraction fraction)",
      "info" : "MethodDeclaration[19828-20767]:MethodDeclaration[19948-20887]"
    }, {
      "left" : "public Fraction divide(final int i)",
      "right" : "public Fraction divide(final int i)",
      "info" : "MethodDeclaration[20773-21006]:MethodDeclaration[20893-21126]"
    }, {
      "left" : "public double percentageValue()",
      "right" : "public double percentageValue()",
      "info" : "MethodDeclaration[21012-21347]:MethodDeclaration[21132-21467]"
    }, {
      "left" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "right" : "public static Fraction getReducedFraction(int numerator, int denominator)",
      "info" : "MethodDeclaration[21353-23014]:MethodDeclaration[21473-23134]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[23020-23597]:MethodDeclaration[23140-23717]"
    }, {
      "left" : "public FractionField getField()",
      "right" : "public FractionField getField()",
      "info" : "MethodDeclaration[23603-23711]:MethodDeclaration[23723-23831]"
    } ],
    "mappings" : [
 {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[1407-1413]:SimpleType[1407-1413]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3589-3595]:Modifier[3589-3595]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[3596-3604]:SimpleName[3596-3604]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[3605-3617]:SingleVariableDeclaration[3605-3617]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[3626-3653]:SimpleType[3626-3653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3654-3704]:Block[3654-3704]"
    }, {
      "left" : "this(value, DEFAULT_EPSILON, 100);",
      "right" : "this(value, DEFAULT_EPSILON, 100);",
      "info" : "ConstructorInvocation[3664-3698]:ConstructorInvocation[3664-3698]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4377-4383]:Modifier[4377-4383]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[4384-4392]:SimpleName[4384-4392]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[4393-4405]:SingleVariableDeclaration[4393-4405]"
    }, {
      "left" : "double epsilon",
      "right" : "double epsilon",
      "info" : "SingleVariableDeclaration[4407-4421]:SingleVariableDeclaration[4407-4421]"
    }, {
      "left" : "int maxIterations",
      "right" : "int maxIterations",
      "info" : "SingleVariableDeclaration[4423-4440]:SingleVariableDeclaration[4423-4440]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[4457-4484]:SimpleType[4457-4484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4489-4560]:Block[4489-4560]"
    }, {
      "left" : "this(value, epsilon, Integer.MAX_VALUE, maxIterations);",
      "right" : "this(value, epsilon, Integer.MAX_VALUE, maxIterations);",
      "info" : "ConstructorInvocation[4499-4554]:ConstructorInvocation[4499-4554]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5097-5103]:Modifier[5097-5103]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[5104-5112]:SimpleName[5104-5112]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[5113-5125]:SingleVariableDeclaration[5113-5125]"
    }, {
      "left" : "int maxDenominator",
      "right" : "int maxDenominator",
      "info" : "SingleVariableDeclaration[5127-5145]:SingleVariableDeclaration[5127-5145]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[5162-5189]:SimpleType[5162-5189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5194-5245]:Block[5194-5245]"
    }, {
      "left" : "this(value, 0, maxDenominator, 100);",
      "right" : "this(value, 0, maxDenominator, 100);",
      "info" : "ConstructorInvocation[5203-5239]:ConstructorInvocation[5203-5239]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6661-6668]:Modifier[6661-6668]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[6669-6677]:SimpleName[6669-6677]"
    }, {
      "left" : "double value",
      "right" : "double value",
      "info" : "SingleVariableDeclaration[6678-6690]:SingleVariableDeclaration[6678-6690]"
    }, {
      "left" : "double epsilon",
      "right" : "double epsilon",
      "info" : "SingleVariableDeclaration[6692-6706]:SingleVariableDeclaration[6692-6706]"
    }, {
      "left" : "int maxDenominator",
      "right" : "int maxDenominator",
      "info" : "SingleVariableDeclaration[6708-6726]:SingleVariableDeclaration[6708-6726]"
    }, {
      "left" : "int maxIterations",
      "right" : "int maxIterations",
      "info" : "SingleVariableDeclaration[6728-6745]:SingleVariableDeclaration[6728-6745]"
    }, {
      "left" : "FractionConversionException",
      "right" : "FractionConversionException",
      "info" : "SimpleType[6762-6789]:SimpleType[6762-6789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6794-8739]:Block[6794-8859]"
    }, {
      "left" : "long overflow = Integer.MAX_VALUE;",
      "right" : "long overflow = Integer.MAX_VALUE;",
      "info" : "VariableDeclarationStatement[6804-6838]:VariableDeclarationStatement[6804-6838]"
    }, {
      "left" : "double r0 = value;",
      "right" : "double r0 = value;",
      "info" : "VariableDeclarationStatement[6847-6865]:VariableDeclarationStatement[6847-6865]"
    }, {
      "left" : "long a0 = (long)FastMath.floor(r0);",
      "right" : "long a0 = (long)FastMath.floor(r0);",
      "info" : "VariableDeclarationStatement[6874-6909]:VariableDeclarationStatement[6874-6909]"
    }, {
      "left" : "if (FastMath.abs(a0) > overflow)",
      "right" : "if (FastMath.abs(a0) > overflow)",
      "info" : "IfStatement[6918-7028]:IfStatement[6918-7028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6951-7028]:Block[6951-7028]"
    }, {
      "left" : "throw new FractionConversionException(value, a0, 1l);",
      "right" : "throw new FractionConversionException(value, a0, 1l);",
      "info" : "ThrowStatement[6965-7018]:ThrowStatement[6965-7018]"
    }, {
      "left" : "if (FastMath.abs(a0 - value) < epsilon)",
      "right" : "if (FastMath.abs(a0 - value) < epsilon)",
      "info" : "IfStatement[7122-7266]:IfStatement[7122-7266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7162-7266]:Block[7162-7266]"
    }, {
      "left" : "this.numerator = (int) a0;",
      "right" : "this.numerator = (int) a0;",
      "info" : "ExpressionStatement[7176-7202]:ExpressionStatement[7176-7202]"
    }, {
      "left" : "this.denominator = 1;",
      "right" : "this.denominator = 1;",
      "info" : "ExpressionStatement[7215-7236]:ExpressionStatement[7215-7236]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7249-7256]:ReturnStatement[7249-7256]"
    }, {
      "left" : "long p0 = 1;",
      "right" : "long p0 = 1;",
      "info" : "VariableDeclarationStatement[7276-7288]:VariableDeclarationStatement[7276-7288]"
    }, {
      "left" : "long q0 = 0;",
      "right" : "long q0 = 0;",
      "info" : "VariableDeclarationStatement[7297-7309]:VariableDeclarationStatement[7297-7309]"
    }, {
      "left" : "long p1 = a0;",
      "right" : "long p1 = a0;",
      "info" : "VariableDeclarationStatement[7318-7331]:VariableDeclarationStatement[7318-7331]"
    }, {
      "left" : "long q1 = 1;",
      "right" : "long q1 = 1;",
      "info" : "VariableDeclarationStatement[7340-7352]:VariableDeclarationStatement[7340-7352]"
    }, {
      "left" : "long p2 = 0;",
      "right" : "long p2 = 0;",
      "info" : "VariableDeclarationStatement[7362-7374]:VariableDeclarationStatement[7362-7374]"
    }, {
      "left" : "long q2 = 1;",
      "right" : "long q2 = 1;",
      "info" : "VariableDeclarationStatement[7383-7395]:VariableDeclarationStatement[7383-7395]"
    }, {
      "left" : "int n = 0;",
      "right" : "int n = 0;",
      "info" : "VariableDeclarationStatement[7405-7415]:VariableDeclarationStatement[7405-7415]"
    }, {
      "left" : "boolean stop = false;",
      "right" : "boolean stop = false;",
      "info" : "VariableDeclarationStatement[7424-7445]:VariableDeclarationStatement[7424-7445]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[7454-8391]:DoStatement[7454-8511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7457-8376]:Block[7457-8496]"
    }, {
      "left" : "++n;",
      "right" : "++n;",
      "info" : "ExpressionStatement[7471-7475]:ExpressionStatement[7471-7475]"
    }, {
      "left" : "double r1 = 1.0 / (r0 - a0);",
      "right" : "double r1 = 1.0 / (r0 - a0);",
      "info" : "VariableDeclarationStatement[7488-7516]:VariableDeclarationStatement[7488-7516]"
    }, {
      "left" : "long a1 = (long)FastMath.floor(r1);",
      "right" : "long a1 = (long)FastMath.floor(r1);",
      "info" : "VariableDeclarationStatement[7529-7564]:VariableDeclarationStatement[7529-7564]"
    }, {
      "left" : "p2 = (a1 * p1) + p0;",
      "right" : "p2 = (a1 * p1) + p0;",
      "info" : "ExpressionStatement[7577-7597]:ExpressionStatement[7577-7597]"
    }, {
      "left" : "q2 = (a1 * q1) + q0;",
      "right" : "q2 = (a1 * q1) + q0;",
      "info" : "ExpressionStatement[7610-7630]:ExpressionStatement[7610-7630]"
    }, {
      "left" : "if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow))",
      "right" : "if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow))",
      "info" : "IfStatement[7644-7988]:IfStatement[7644-8108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7712-7988]:Block[7712-8108]"
    }, {
      "left" : "throw new FractionConversionException(value, p2, q2);",
      "right" : "throw new FractionConversionException(value, p2, q2);",
      "info" : "ThrowStatement[7921-7974]:ThrowStatement[8041-8094]"
    }, {
      "left" : "double convergent = (double)p2 / (double)q2;",
      "right" : "double convergent = (double)p2 / (double)q2;",
      "info" : "VariableDeclarationStatement[8002-8046]:VariableDeclarationStatement[8122-8166]"
    }, {
      "left" : "if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator)",
      "right" : "if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator)",
      "info" : "IfStatement[8059-8366]:IfStatement[8179-8486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8151-8316]:Block[8271-8436]"
    }, {
      "left" : "p0 = p1;",
      "right" : "p0 = p1;",
      "info" : "ExpressionStatement[8169-8177]:ExpressionStatement[8289-8297]"
    }, {
      "left" : "p1 = p2;",
      "right" : "p1 = p2;",
      "info" : "ExpressionStatement[8194-8202]:ExpressionStatement[8314-8322]"
    }, {
      "left" : "q0 = q1;",
      "right" : "q0 = q1;",
      "info" : "ExpressionStatement[8219-8227]:ExpressionStatement[8339-8347]"
    }, {
      "left" : "q1 = q2;",
      "right" : "q1 = q2;",
      "info" : "ExpressionStatement[8244-8252]:ExpressionStatement[8364-8372]"
    }, {
      "left" : "a0 = a1;",
      "right" : "a0 = a1;",
      "info" : "ExpressionStatement[8269-8277]:ExpressionStatement[8389-8397]"
    }, {
      "left" : "r0 = r1;",
      "right" : "r0 = r1;",
      "info" : "ExpressionStatement[8294-8302]:ExpressionStatement[8414-8422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8322-8366]:Block[8442-8486]"
    }, {
      "left" : "stop = true;",
      "right" : "stop = true;",
      "info" : "ExpressionStatement[8340-8352]:ExpressionStatement[8460-8472]"
    }, {
      "left" : "if (n >= maxIterations)",
      "right" : "if (n >= maxIterations)",
      "info" : "IfStatement[8401-8509]:IfStatement[8521-8629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8425-8509]:Block[8545-8629]"
    }, {
      "left" : "throw new FractionConversionException(value, maxIterations);",
      "right" : "throw new FractionConversionException(value, maxIterations);",
      "info" : "ThrowStatement[8439-8499]:ThrowStatement[8559-8619]"
    }, {
      "left" : "if (q2 < maxDenominator)",
      "right" : "if (q2 < maxDenominator)",
      "info" : "IfStatement[8519-8732]:IfStatement[8639-8852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8544-8635]:Block[8664-8755]"
    }, {
      "left" : "this.numerator = (int) p2;",
      "right" : "this.numerator = (int) p2;",
      "info" : "ExpressionStatement[8558-8584]:ExpressionStatement[8678-8704]"
    }, {
      "left" : "this.denominator = (int) q2;",
      "right" : "this.denominator = (int) q2;",
      "info" : "ExpressionStatement[8597-8625]:ExpressionStatement[8717-8745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8641-8732]:Block[8761-8852]"
    }, {
      "left" : "this.numerator = (int) p1;",
      "right" : "this.numerator = (int) p1;",
      "info" : "ExpressionStatement[8655-8681]:ExpressionStatement[8775-8801]"
    }, {
      "left" : "this.denominator = (int) q1;",
      "right" : "this.denominator = (int) q1;",
      "info" : "ExpressionStatement[8694-8722]:ExpressionStatement[8814-8842]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8864-8870]:Modifier[8984-8990]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[8871-8879]:SimpleName[8991-8999]"
    }, {
      "left" : "int num",
      "right" : "int num",
      "info" : "SingleVariableDeclaration[8880-8887]:SingleVariableDeclaration[9000-9007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8889-8918]:Block[9009-9038]"
    }, {
      "left" : "this(num, 1);",
      "right" : "this(num, 1);",
      "info" : "ConstructorInvocation[8899-8912]:ConstructorInvocation[9019-9032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9193-9199]:Modifier[9313-9319]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleName[9200-9208]:SimpleName[9320-9328]"
    }, {
      "left" : "int num",
      "right" : "int num",
      "info" : "SingleVariableDeclaration[9209-9216]:SingleVariableDeclaration[9329-9336]"
    }, {
      "left" : "int den",
      "right" : "int den",
      "info" : "SingleVariableDeclaration[9218-9225]:SingleVariableDeclaration[9338-9345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9227-10136]:Block[9347-10256]"
    }, {
      "left" : "if (den == 0)",
      "right" : "if (den == 0)",
      "info" : "IfStatement[9237-9412]:IfStatement[9357-9532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9251-9412]:Block[9371-9532]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              num, den);",
      "info" : "ThrowStatement[9265-9402]:ThrowStatement[9385-9522]"
    }, {
      "left" : "if (den < 0)",
      "right" : "if (den < 0)",
      "info" : "IfStatement[9421-9745]:IfStatement[9541-9865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9434-9745]:Block[9554-9865]"
    }, {
      "left" : "if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE)",
      "right" : "if (num == Integer.MIN_VALUE ||\n                den == Integer.MIN_VALUE)",
      "info" : "IfStatement[9448-9687]:IfStatement[9568-9807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9522-9687]:Block[9642-9807]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  num, den);",
      "info" : "ThrowStatement[9540-9673]:ThrowStatement[9660-9793]"
    }, {
      "left" : "num = -num;",
      "right" : "num = -num;",
      "info" : "ExpressionStatement[9700-9711]:ExpressionStatement[9820-9831]"
    }, {
      "left" : "den = -den;",
      "right" : "den = -den;",
      "info" : "ExpressionStatement[9724-9735]:ExpressionStatement[9844-9855]"
    }, {
      "left" : "final int d = ArithmeticUtils.gcd(num, den);",
      "right" : "final int d = ArithmeticUtils.gcd(num, den);",
      "info" : "VariableDeclarationStatement[9830-9874]:VariableDeclarationStatement[9950-9994]"
    }, {
      "left" : "if (d > 1)",
      "right" : "if (d > 1)",
      "info" : "IfStatement[9883-9949]:IfStatement[10003-10069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9894-9949]:Block[10014-10069]"
    }, {
      "left" : "num /= d;",
      "right" : "num /= d;",
      "info" : "ExpressionStatement[9908-9917]:ExpressionStatement[10028-10037]"
    }, {
      "left" : "den /= d;",
      "right" : "den /= d;",
      "info" : "ExpressionStatement[9930-9939]:ExpressionStatement[10050-10059]"
    }, {
      "left" : "if (den < 0)",
      "right" : "if (den < 0)",
      "info" : "IfStatement[9994-10066]:IfStatement[10114-10186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10007-10066]:Block[10127-10186]"
    }, {
      "left" : "num = -num;",
      "right" : "num = -num;",
      "info" : "ExpressionStatement[10021-10032]:ExpressionStatement[10141-10152]"
    }, {
      "left" : "den = -den;",
      "right" : "den = -den;",
      "info" : "ExpressionStatement[10045-10056]:ExpressionStatement[10165-10176]"
    }, {
      "left" : "this.numerator   = num;",
      "right" : "this.numerator   = num;",
      "info" : "ExpressionStatement[10075-10098]:ExpressionStatement[10195-10218]"
    }, {
      "left" : "this.denominator = den;",
      "right" : "this.denominator = den;",
      "info" : "ExpressionStatement[10107-10130]:ExpressionStatement[10227-10250]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10245-10251]:Modifier[10365-10371]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[10252-10260]:SimpleType[10372-10380]"
    }, {
      "left" : "abs",
      "right" : "abs",
      "info" : "SimpleName[10261-10264]:SimpleName[10381-10384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10267-10425]:Block[10387-10545]"
    }, {
      "left" : "Fraction ret;",
      "right" : "Fraction ret;",
      "info" : "VariableDeclarationStatement[10277-10290]:VariableDeclarationStatement[10397-10410]"
    }, {
      "left" : "if (numerator >= 0)",
      "right" : "if (numerator >= 0)",
      "info" : "IfStatement[10299-10399]:IfStatement[10419-10519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10319-10354]:Block[10439-10474]"
    }, {
      "left" : "ret = this;",
      "right" : "ret = this;",
      "info" : "ExpressionStatement[10333-10344]:ExpressionStatement[10453-10464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10360-10399]:Block[10480-10519]"
    }, {
      "left" : "ret = negate();",
      "right" : "ret = negate();",
      "info" : "ExpressionStatement[10374-10389]:ExpressionStatement[10494-10509]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[10408-10419]:ReturnStatement[10528-10539]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10683-10689]:Modifier[10803-10809]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10690-10693]:PrimitiveType[10810-10813]"
    }, {
      "left" : "compareTo",
      "right" : "compareTo",
      "info" : "SimpleName[10694-10703]:SimpleName[10814-10823]"
    }, {
      "left" : "Fraction object",
      "right" : "Fraction object",
      "info" : "SingleVariableDeclaration[10704-10719]:SingleVariableDeclaration[10824-10839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10721-10906]:Block[10841-11026]"
    }, {
      "left" : "long nOd = ((long) numerator) * object.denominator;",
      "right" : "long nOd = ((long) numerator) * object.denominator;",
      "info" : "VariableDeclarationStatement[10731-10782]:VariableDeclarationStatement[10851-10902]"
    }, {
      "left" : "long dOn = ((long) denominator) * object.numerator;",
      "right" : "long dOn = ((long) denominator) * object.numerator;",
      "info" : "VariableDeclarationStatement[10791-10842]:VariableDeclarationStatement[10911-10962]"
    }, {
      "left" : "return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);",
      "right" : "return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);",
      "info" : "ReturnStatement[10851-10900]:ReturnStatement[10971-11020]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11101-11110]:MarkerAnnotation[11221-11230]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11115-11121]:Modifier[11235-11241]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[11122-11128]:PrimitiveType[11242-11248]"
    }, {
      "left" : "doubleValue",
      "right" : "doubleValue",
      "info" : "SimpleName[11129-11140]:SimpleName[11249-11260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11143-11206]:Block[11263-11326]"
    }, {
      "left" : "return (double)numerator / (double)denominator;",
      "right" : "return (double)numerator / (double)denominator;",
      "info" : "ReturnStatement[11153-11200]:ReturnStatement[11273-11320]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11671-11680]:MarkerAnnotation[11791-11800]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11685-11691]:Modifier[11805-11811]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11692-11699]:PrimitiveType[11812-11819]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[11700-11706]:SimpleName[11820-11826]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[11707-11719]:SingleVariableDeclaration[11827-11839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11721-12151]:Block[11841-12271]"
    }, {
      "left" : "if (this == other)",
      "right" : "if (this == other)",
      "info" : "IfStatement[11731-11786]:IfStatement[11851-11906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11750-11786]:Block[11870-11906]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11764-11776]:ReturnStatement[11884-11896]"
    }, {
      "left" : "if (other instanceof Fraction)",
      "right" : "if (other instanceof Fraction)",
      "info" : "IfStatement[11795-12123]:IfStatement[11915-12243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11826-12123]:Block[11946-12243]"
    }, {
      "left" : "Fraction rhs = (Fraction)other;",
      "right" : "Fraction rhs = (Fraction)other;",
      "info" : "VariableDeclarationStatement[11981-12012]:VariableDeclarationStatement[12101-12132]"
    }, {
      "left" : "return (numerator == rhs.numerator) &&\n                (denominator == rhs.denominator);",
      "right" : "return (numerator == rhs.numerator) &&\n                (denominator == rhs.denominator);",
      "info" : "ReturnStatement[12025-12113]:ReturnStatement[12145-12233]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12132-12145]:ReturnStatement[12252-12265]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12344-12353]:MarkerAnnotation[12464-12473]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12358-12364]:Modifier[12478-12484]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[12365-12370]:PrimitiveType[12485-12490]"
    }, {
      "left" : "floatValue",
      "right" : "floatValue",
      "info" : "SimpleName[12371-12381]:SimpleName[12491-12501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12384-12428]:Block[12504-12548]"
    }, {
      "left" : "return (float)doubleValue();",
      "right" : "return (float)doubleValue();",
      "info" : "ReturnStatement[12394-12422]:ReturnStatement[12514-12542]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12513-12519]:Modifier[12633-12639]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12520-12523]:PrimitiveType[12640-12643]"
    }, {
      "left" : "getDenominator",
      "right" : "getDenominator",
      "info" : "SimpleName[12524-12538]:SimpleName[12644-12658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12541-12576]:Block[12661-12696]"
    }, {
      "left" : "return denominator;",
      "right" : "return denominator;",
      "info" : "ReturnStatement[12551-12570]:ReturnStatement[12671-12690]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12657-12663]:Modifier[12777-12783]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12664-12667]:PrimitiveType[12784-12787]"
    }, {
      "left" : "getNumerator",
      "right" : "getNumerator",
      "info" : "SimpleName[12668-12680]:SimpleName[12788-12800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12683-12716]:Block[12803-12836]"
    }, {
      "left" : "return numerator;",
      "right" : "return numerator;",
      "info" : "ReturnStatement[12693-12710]:ReturnStatement[12813-12830]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12828-12837]:MarkerAnnotation[12948-12957]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12842-12848]:Modifier[12962-12968]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12849-12852]:PrimitiveType[12969-12972]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[12853-12861]:SimpleName[12973-12981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12864-12928]:Block[12984-13048]"
    }, {
      "left" : "return 37 * (37 * 17 + numerator) + denominator;",
      "right" : "return 37 * (37 * 17 + numerator) + denominator;",
      "info" : "ReturnStatement[12874-12922]:ReturnStatement[12994-13042]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13100-13109]:MarkerAnnotation[13220-13229]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13114-13120]:Modifier[13234-13240]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13121-13124]:PrimitiveType[13241-13244]"
    }, {
      "left" : "intValue",
      "right" : "intValue",
      "info" : "SimpleName[13125-13133]:SimpleName[13245-13253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13136-13178]:Block[13256-13298]"
    }, {
      "left" : "return (int)doubleValue();",
      "right" : "return (int)doubleValue();",
      "info" : "ReturnStatement[13146-13172]:ReturnStatement[13266-13292]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13350-13359]:MarkerAnnotation[13470-13479]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13364-13370]:Modifier[13484-13490]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[13371-13375]:PrimitiveType[13491-13495]"
    }, {
      "left" : "longValue",
      "right" : "longValue",
      "info" : "SimpleName[13376-13385]:SimpleName[13496-13505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13388-13431]:Block[13508-13551]"
    }, {
      "left" : "return (long)doubleValue();",
      "right" : "return (long)doubleValue();",
      "info" : "ReturnStatement[13398-13425]:ReturnStatement[13518-13545]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13552-13558]:Modifier[13672-13678]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[13559-13567]:SimpleType[13679-13687]"
    }, {
      "left" : "negate",
      "right" : "negate",
      "info" : "SimpleName[13568-13574]:SimpleName[13688-13694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13577-13802]:Block[13697-13922]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE)",
      "info" : "IfStatement[13587-13742]:IfStatement[13707-13862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13621-13742]:Block[13741-13862]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION, numerator, denominator);",
      "info" : "ThrowStatement[13635-13732]:ThrowStatement[13755-13852]"
    }, {
      "left" : "return new Fraction(-numerator, denominator);",
      "right" : "return new Fraction(-numerator, denominator);",
      "info" : "ReturnStatement[13751-13796]:ReturnStatement[13871-13916]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13922-13928]:Modifier[14042-14048]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[13929-13937]:SimpleType[14049-14057]"
    }, {
      "left" : "reciprocal",
      "right" : "reciprocal",
      "info" : "SimpleName[13938-13948]:SimpleName[14058-14068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13951-14011]:Block[14071-14131]"
    }, {
      "left" : "return new Fraction(denominator, numerator);",
      "right" : "return new Fraction(denominator, numerator);",
      "info" : "ReturnStatement[13961-14005]:ReturnStatement[14081-14125]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14510-14516]:Modifier[14630-14636]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[14517-14525]:SimpleType[14637-14645]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[14526-14529]:SimpleName[14646-14649]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[14530-14547]:SingleVariableDeclaration[14650-14667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14549-14605]:Block[14669-14725]"
    }, {
      "left" : "return addSub(fraction, true /* add */);",
      "right" : "return addSub(fraction, true /* add */);",
      "info" : "ReturnStatement[14559-14599]:ReturnStatement[14679-14719]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14735-14741]:Modifier[14855-14861]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[14742-14750]:SimpleType[14862-14870]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[14751-14754]:SimpleName[14871-14874]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[14755-14766]:SingleVariableDeclaration[14875-14886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14768-14846]:Block[14888-14966]"
    }, {
      "left" : "return new Fraction(numerator + i * denominator, denominator);",
      "right" : "return new Fraction(numerator + i * denominator, denominator);",
      "info" : "ReturnStatement[14778-14840]:ReturnStatement[14898-14960]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15346-15352]:Modifier[15466-15472]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[15353-15361]:SimpleType[15473-15481]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[15362-15370]:SimpleName[15482-15490]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[15371-15388]:SingleVariableDeclaration[15491-15508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15390-15452]:Block[15510-15572]"
    }, {
      "left" : "return addSub(fraction, false /* subtract */);",
      "right" : "return addSub(fraction, false /* subtract */);",
      "info" : "ReturnStatement[15400-15446]:ReturnStatement[15520-15566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15594-15600]:Modifier[15714-15720]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[15601-15609]:SimpleType[15721-15729]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[15610-15618]:SimpleName[15730-15738]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[15619-15630]:SingleVariableDeclaration[15739-15750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15632-15710]:Block[15752-15830]"
    }, {
      "left" : "return new Fraction(numerator - i * denominator, denominator);",
      "right" : "return new Fraction(numerator - i * denominator, denominator);",
      "info" : "ReturnStatement[15642-15704]:ReturnStatement[15762-15824]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16209-16216]:Modifier[16329-16336]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[16217-16225]:SimpleType[16337-16345]"
    }, {
      "left" : "addSub",
      "right" : "addSub",
      "info" : "SimpleName[16226-16232]:SimpleName[16346-16352]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[16233-16250]:SingleVariableDeclaration[16353-16370]"
    }, {
      "left" : "boolean isAdd",
      "right" : "boolean isAdd",
      "info" : "SingleVariableDeclaration[16252-16265]:SingleVariableDeclaration[16372-16385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16267-18408]:Block[16387-18528]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[16277-16382]:IfStatement[16397-16502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16299-16382]:Block[16419-16502]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[16313-16372]:ThrowStatement[16433-16492]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[16433-16521]:IfStatement[16553-16641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16453-16521]:Block[16573-16641]"
    }, {
      "left" : "return isAdd ? fraction : fraction.negate();",
      "right" : "return isAdd ? fraction : fraction.negate();",
      "info" : "ReturnStatement[16467-16511]:ReturnStatement[16587-16631]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[16530-16595]:IfStatement[16650-16715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16559-16595]:Block[16679-16715]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[16573-16585]:ReturnStatement[16693-16705]"
    }, {
      "left" : "int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",
      "right" : "int d1 = ArithmeticUtils.gcd(denominator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[16704-16768]:VariableDeclarationStatement[16824-16888]"
    }, {
      "left" : "if (d1==1)",
      "right" : "if (d1==1)",
      "info" : "IfStatement[16777-17252]:IfStatement[16897-17372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16788-17252]:Block[16908-17372]"
    }, {
      "left" : "int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",
      "right" : "int uvp = ArithmeticUtils.mulAndCheck(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[16852-16923]:VariableDeclarationStatement[16972-17043]"
    }, {
      "left" : "int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",
      "right" : "int upv = ArithmeticUtils.mulAndCheck(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[16936-17007]:VariableDeclarationStatement[17056-17127]"
    }, {
      "left" : "return new Fraction\n                (isAdd ? ArithmeticUtils.addAndCheck(uvp, upv) :\n                 ArithmeticUtils.subAndCheck(uvp, upv),\n                 ArithmeticUtils.mulAndCheck(denominator, fraction.denominator));",
      "right" : "return new Fraction\n                (isAdd ? ArithmeticUtils.addAndCheck(uvp, upv) :\n                 ArithmeticUtils.subAndCheck(uvp, upv),\n                 ArithmeticUtils.mulAndCheck(denominator, fraction.denominator));",
      "info" : "ReturnStatement[17020-17242]:ReturnStatement[17140-17362]"
    }, {
      "left" : "BigInteger uvp = BigInteger.valueOf(numerator)\n        .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "right" : "BigInteger uvp = BigInteger.valueOf(numerator)\n        .multiply(BigInteger.valueOf(fraction.denominator/d1));",
      "info" : "VariableDeclarationStatement[17430-17540]:VariableDeclarationStatement[17550-17660]"
    }, {
      "left" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n        .multiply(BigInteger.valueOf(denominator/d1));",
      "right" : "BigInteger upv = BigInteger.valueOf(fraction.numerator)\n        .multiply(BigInteger.valueOf(denominator/d1));",
      "info" : "VariableDeclarationStatement[17549-17659]:VariableDeclarationStatement[17669-17779]"
    }, {
      "left" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "right" : "BigInteger t = isAdd ? uvp.add(upv) : uvp.subtract(upv);",
      "info" : "VariableDeclarationStatement[17668-17724]:VariableDeclarationStatement[17788-17844]"
    }, {
      "left" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "right" : "int tmodd1 = t.mod(BigInteger.valueOf(d1)).intValue();",
      "info" : "VariableDeclarationStatement[17834-17888]:VariableDeclarationStatement[17954-18008]"
    }, {
      "left" : "int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",
      "right" : "int d2 = (tmodd1==0)?d1:ArithmeticUtils.gcd(tmodd1, d1);",
      "info" : "VariableDeclarationStatement[17897-17953]:VariableDeclarationStatement[18017-18073]"
    }, {
      "left" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "right" : "BigInteger w = t.divide(BigInteger.valueOf(d2));",
      "info" : "VariableDeclarationStatement[18008-18056]:VariableDeclarationStatement[18128-18176]"
    }, {
      "left" : "if (w.bitLength() > 31)",
      "right" : "if (w.bitLength() > 31)",
      "info" : "IfStatement[18065-18248]:IfStatement[18185-18368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18089-18248]:Block[18209-18368]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,\n                                              w);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.NUMERATOR_OVERFLOW_AFTER_MULTIPLY,\n                                              w);",
      "info" : "ThrowStatement[18103-18238]:ThrowStatement[18223-18358]"
    }, {
      "left" : "return new Fraction (w.intValue(),\n                ArithmeticUtils.mulAndCheck(denominator/d1,\n                        fraction.denominator/d2));",
      "right" : "return new Fraction (w.intValue(),\n                ArithmeticUtils.mulAndCheck(denominator/d1,\n                        fraction.denominator/d2));",
      "info" : "ReturnStatement[18257-18402]:ReturnStatement[18377-18522]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18885-18891]:Modifier[19005-19011]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[18892-18900]:SimpleType[19012-19020]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[18901-18909]:SimpleName[19021-19029]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[18910-18927]:SingleVariableDeclaration[19030-19047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18929-19577]:Block[19049-19697]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[18939-19044]:IfStatement[19059-19164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18961-19044]:Block[19081-19164]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[18975-19034]:ThrowStatement[19095-19154]"
    }, {
      "left" : "if (numerator == 0 || fraction.numerator == 0)",
      "right" : "if (numerator == 0 || fraction.numerator == 0)",
      "info" : "IfStatement[19053-19136]:IfStatement[19173-19256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19100-19136]:Block[19220-19256]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[19114-19126]:ReturnStatement[19234-19246]"
    }, {
      "left" : "int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",
      "right" : "int d1 = ArithmeticUtils.gcd(numerator, fraction.denominator);",
      "info" : "VariableDeclarationStatement[19242-19304]:VariableDeclarationStatement[19362-19424]"
    }, {
      "left" : "int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",
      "right" : "int d2 = ArithmeticUtils.gcd(fraction.numerator, denominator);",
      "info" : "VariableDeclarationStatement[19313-19375]:VariableDeclarationStatement[19433-19495]"
    }, {
      "left" : "return getReducedFraction\n        (ArithmeticUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\n                ArithmeticUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));",
      "right" : "return getReducedFraction\n        (ArithmeticUtils.mulAndCheck(numerator/d1, fraction.numerator/d2),\n                ArithmeticUtils.mulAndCheck(denominator/d2, fraction.denominator/d1));",
      "info" : "ReturnStatement[19384-19571]:ReturnStatement[19504-19691]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19720-19726]:Modifier[19840-19846]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[19727-19735]:SimpleType[19847-19855]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[19736-19744]:SimpleName[19856-19864]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[19745-19756]:SingleVariableDeclaration[19865-19876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19758-19822]:Block[19878-19942]"
    }, {
      "left" : "return new Fraction(numerator * i, denominator);",
      "right" : "return new Fraction(numerator * i, denominator);",
      "info" : "ReturnStatement[19768-19816]:ReturnStatement[19888-19936]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20327-20333]:Modifier[20447-20453]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[20334-20342]:SimpleType[20454-20462]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[20343-20349]:SimpleName[20463-20469]"
    }, {
      "left" : "Fraction fraction",
      "right" : "Fraction fraction",
      "info" : "SingleVariableDeclaration[20350-20367]:SingleVariableDeclaration[20470-20487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20369-20767]:Block[20489-20887]"
    }, {
      "left" : "if (fraction == null)",
      "right" : "if (fraction == null)",
      "info" : "IfStatement[20379-20484]:IfStatement[20499-20604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20401-20484]:Block[20521-20604]"
    }, {
      "left" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "right" : "throw new NullArgumentException(LocalizedFormats.FRACTION);",
      "info" : "ThrowStatement[20415-20474]:ThrowStatement[20535-20594]"
    }, {
      "left" : "if (fraction.numerator == 0)",
      "right" : "if (fraction.numerator == 0)",
      "info" : "IfStatement[20493-20713]:IfStatement[20613-20833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20522-20713]:Block[20642-20833]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,\n                                              fraction.numerator, fraction.denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_FRACTION_TO_DIVIDE_BY,\n                                              fraction.numerator, fraction.denominator);",
      "info" : "ThrowStatement[20536-20703]:ThrowStatement[20656-20823]"
    }, {
      "left" : "return multiply(fraction.reciprocal());",
      "right" : "return multiply(fraction.reciprocal());",
      "info" : "ReturnStatement[20722-20761]:ReturnStatement[20842-20881]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20906-20912]:Modifier[21026-21032]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[20913-20921]:SimpleType[21033-21041]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[20922-20928]:SimpleName[21042-21048]"
    }, {
      "left" : "final int i",
      "right" : "final int i",
      "info" : "SingleVariableDeclaration[20929-20940]:SingleVariableDeclaration[21049-21060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20942-21006]:Block[21062-21126]"
    }, {
      "left" : "return new Fraction(numerator, denominator * i);",
      "right" : "return new Fraction(numerator, denominator * i);",
      "info" : "ReturnStatement[20952-21000]:ReturnStatement[21072-21120]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21272-21278]:Modifier[21392-21398]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[21279-21285]:PrimitiveType[21399-21405]"
    }, {
      "left" : "percentageValue",
      "right" : "percentageValue",
      "info" : "SimpleName[21286-21301]:SimpleName[21406-21421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21304-21347]:Block[21424-21467]"
    }, {
      "left" : "return 100 * doubleValue();",
      "right" : "return 100 * doubleValue();",
      "info" : "ReturnStatement[21314-21341]:ReturnStatement[21434-21461]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21871-21877]:Modifier[21991-21997]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21878-21884]:Modifier[21998-22004]"
    }, {
      "left" : "Fraction",
      "right" : "Fraction",
      "info" : "SimpleType[21885-21893]:SimpleType[22005-22013]"
    }, {
      "left" : "getReducedFraction",
      "right" : "getReducedFraction",
      "info" : "SimpleName[21894-21912]:SimpleName[22014-22032]"
    }, {
      "left" : "int numerator",
      "right" : "int numerator",
      "info" : "SingleVariableDeclaration[21913-21926]:SingleVariableDeclaration[22033-22046]"
    }, {
      "left" : "int denominator",
      "right" : "int denominator",
      "info" : "SingleVariableDeclaration[21928-21943]:SingleVariableDeclaration[22048-22063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21945-23014]:Block[22065-23134]"
    }, {
      "left" : "if (denominator == 0)",
      "right" : "if (denominator == 0)",
      "info" : "IfStatement[21955-22152]:IfStatement[22075-22272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21977-22152]:Block[22097-22272]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.ZERO_DENOMINATOR_IN_FRACTION,\n                                              numerator, denominator);",
      "info" : "ThrowStatement[21991-22142]:ThrowStatement[22111-22262]"
    }, {
      "left" : "if (numerator==0)",
      "right" : "if (numerator==0)",
      "info" : "IfStatement[22161-22234]:IfStatement[22281-22354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22179-22234]:Block[22299-22354]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[22193-22205]:ReturnStatement[22313-22325]"
    }, {
      "left" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "right" : "if (denominator==Integer.MIN_VALUE && (numerator&1)==0)",
      "info" : "IfStatement[22302-22411]:IfStatement[22422-22531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22358-22411]:Block[22478-22531]"
    }, {
      "left" : "numerator/=2;",
      "right" : "numerator/=2;",
      "info" : "ExpressionStatement[22372-22385]:ExpressionStatement[22492-22505]"
    }, {
      "left" : "denominator/=2;",
      "right" : "denominator/=2;",
      "info" : "ExpressionStatement[22386-22401]:ExpressionStatement[22506-22521]"
    }, {
      "left" : "if (denominator < 0)",
      "right" : "if (denominator < 0)",
      "info" : "IfStatement[22420-22808]:IfStatement[22540-22928]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22441-22808]:Block[22561-22928]"
    }, {
      "left" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "right" : "if (numerator==Integer.MIN_VALUE ||\n                    denominator==Integer.MIN_VALUE)",
      "info" : "IfStatement[22455-22722]:IfStatement[22575-22842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22543-22722]:Block[22663-22842]"
    }, {
      "left" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  numerator, denominator);",
      "right" : "throw new MathArithmeticException(LocalizedFormats.OVERFLOW_IN_FRACTION,\n                                                  numerator, denominator);",
      "info" : "ThrowStatement[22561-22708]:ThrowStatement[22681-22828]"
    }, {
      "left" : "numerator = -numerator;",
      "right" : "numerator = -numerator;",
      "info" : "ExpressionStatement[22735-22758]:ExpressionStatement[22855-22878]"
    }, {
      "left" : "denominator = -denominator;",
      "right" : "denominator = -denominator;",
      "info" : "ExpressionStatement[22771-22798]:ExpressionStatement[22891-22918]"
    }, {
      "left" : "int gcd = ArithmeticUtils.gcd(numerator, denominator);",
      "right" : "int gcd = ArithmeticUtils.gcd(numerator, denominator);",
      "info" : "VariableDeclarationStatement[22847-22901]:VariableDeclarationStatement[22967-23021]"
    }, {
      "left" : "numerator /= gcd;",
      "right" : "numerator /= gcd;",
      "info" : "ExpressionStatement[22910-22927]:ExpressionStatement[23030-23047]"
    }, {
      "left" : "denominator /= gcd;",
      "right" : "denominator /= gcd;",
      "info" : "ExpressionStatement[22936-22955]:ExpressionStatement[23056-23075]"
    }, {
      "left" : "return new Fraction(numerator, denominator);",
      "right" : "return new Fraction(numerator, denominator);",
      "info" : "ReturnStatement[22964-23008]:ReturnStatement[23084-23128]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[23287-23296]:MarkerAnnotation[23407-23416]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23301-23307]:Modifier[23421-23427]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[23308-23314]:SimpleType[23428-23434]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[23315-23323]:SimpleName[23435-23443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23326-23597]:Block[23446-23717]"
    }, {
      "left" : "String str = null;",
      "right" : "String str = null;",
      "info" : "VariableDeclarationStatement[23336-23354]:VariableDeclarationStatement[23456-23474]"
    }, {
      "left" : "if (denominator == 1)",
      "right" : "if (denominator == 1)",
      "info" : "IfStatement[23363-23571]:IfStatement[23483-23691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23385-23443]:Block[23505-23563]"
    }, {
      "left" : "str = Integer.toString(numerator);",
      "right" : "str = Integer.toString(numerator);",
      "info" : "ExpressionStatement[23399-23433]:ExpressionStatement[23519-23553]"
    }, {
      "left" : "if (numerator == 0)",
      "right" : "if (numerator == 0)",
      "info" : "IfStatement[23449-23571]:IfStatement[23569-23691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23469-23503]:Block[23589-23623]"
    }, {
      "left" : "str = \"0\";",
      "right" : "str = \"0\";",
      "info" : "ExpressionStatement[23483-23493]:ExpressionStatement[23603-23613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23509-23571]:Block[23629-23691]"
    }, {
      "left" : "str = numerator + \" / \" + denominator;",
      "right" : "str = numerator + \" / \" + denominator;",
      "info" : "ExpressionStatement[23523-23561]:ExpressionStatement[23643-23681]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[23580-23591]:ReturnStatement[23700-23711]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23628-23634]:Modifier[23748-23754]"
    }, {
      "left" : "FractionField",
      "right" : "FractionField",
      "info" : "SimpleType[23635-23648]:SimpleType[23755-23768]"
    }, {
      "left" : "getField",
      "right" : "getField",
      "info" : "SimpleName[23649-23657]:SimpleName[23769-23777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23660-23711]:Block[23780-23831]"
    }, {
      "left" : "return FractionField.getInstance();",
      "right" : "return FractionField.getInstance();",
      "info" : "ReturnStatement[23670-23705]:ReturnStatement[23790-23825]"
    } ]
  },
  "interFileMappings" : { }
}