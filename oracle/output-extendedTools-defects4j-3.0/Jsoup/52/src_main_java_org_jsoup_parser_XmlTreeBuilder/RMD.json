{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "XmlTreeBuilder",
      "right" : "XmlTreeBuilder",
      "info" : "TypeDeclaration[112-4425]:TypeDeclaration[136-4620]"
    }, {
      "left" : "protected void initialiseParse(String input, String baseUri, ParseErrorList errors)",
      "right" : "protected void initialiseParse(String input, String baseUri, ParseErrorList errors)",
      "info" : "MethodDeclaration[432-771]:MethodDeclaration[456-795]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[777-1620]:MethodDeclaration[801-1644]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[1626-1712]:MethodDeclaration[1650-1736]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[1718-2314]:MethodDeclaration[1742-2338]"
    }, {
      "left" : "void insert(Token.Comment commentToken)",
      "right" : "void insert(Token.Comment commentToken)",
      "info" : "MethodDeclaration[2320-3032]:MethodDeclaration[2344-3227]"
    }, {
      "left" : "void insert(Token.Character characterToken)",
      "right" : "void insert(Token.Character characterToken)",
      "info" : "MethodDeclaration[3038-3184]:MethodDeclaration[3233-3379]"
    }, {
      "left" : "void insert(Token.Doctype d)",
      "right" : "void insert(Token.Doctype d)",
      "info" : "MethodDeclaration[3190-3384]:MethodDeclaration[3385-3579]"
    }, {
      "left" : "private void popStackToClose(Token.EndTag endTag)",
      "right" : "private void popStackToClose(Token.EndTag endTag)",
      "info" : "MethodDeclaration[3390-4213]:MethodDeclaration[3585-4408]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors)",
      "right" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors)",
      "info" : "MethodDeclaration[4219-4423]:MethodDeclaration[4414-4618]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[378-384]:Modifier[402-408]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[385-390]:TYPE_DECLARATION_KIND[409-414]"
    }, {
      "left" : "XmlTreeBuilder",
      "right" : "XmlTreeBuilder",
      "info" : "SimpleName[391-405]:SimpleName[415-429]"
    }, {
      "left" : "TreeBuilder",
      "right" : "TreeBuilder",
      "info" : "SimpleType[414-425]:SimpleType[438-449]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[432-441]:MarkerAnnotation[456-465]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[446-455]:Modifier[470-479]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[456-460]:PrimitiveType[480-484]"
    }, {
      "left" : "initialiseParse",
      "right" : "initialiseParse",
      "info" : "SimpleName[461-476]:SimpleName[485-500]"
    }, {
      "left" : "String input",
      "right" : "String input",
      "info" : "SingleVariableDeclaration[477-489]:SingleVariableDeclaration[501-513]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[491-505]:SingleVariableDeclaration[515-529]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[507-528]:SingleVariableDeclaration[531-552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[530-771]:Block[554-795]"
    }, {
      "left" : "super.initialiseParse(input, baseUri, errors);",
      "right" : "super.initialiseParse(input, baseUri, errors);",
      "info" : "ExpressionStatement[540-586]:ExpressionStatement[564-610]"
    }, {
      "left" : "stack.add(doc);",
      "right" : "stack.add(doc);",
      "info" : "ExpressionStatement[595-610]:ExpressionStatement[619-634]"
    }, {
      "left" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "right" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "info" : "ExpressionStatement[701-765]:ExpressionStatement[725-789]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[777-786]:MarkerAnnotation[801-810]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[791-800]:Modifier[815-824]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[801-808]:PrimitiveType[825-832]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[809-816]:SimpleName[833-840]"
    }, {
      "left" : "Token token",
      "right" : "Token token",
      "info" : "SingleVariableDeclaration[817-828]:SingleVariableDeclaration[841-852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[830-1620]:Block[854-1644]"
    }, {
      "left" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "right" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "info" : "SwitchStatement[904-1593]:SwitchStatement[928-1617]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[938-952]:SwitchCase[962-976]"
    }, {
      "left" : "insert(token.asStartTag());",
      "right" : "insert(token.asStartTag());",
      "info" : "ExpressionStatement[969-996]:ExpressionStatement[993-1020]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1013-1019]:BreakStatement[1037-1043]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[1032-1044]:SwitchCase[1056-1068]"
    }, {
      "left" : "popStackToClose(token.asEndTag());",
      "right" : "popStackToClose(token.asEndTag());",
      "info" : "ExpressionStatement[1061-1095]:ExpressionStatement[1085-1119]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1112-1118]:BreakStatement[1136-1142]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[1131-1144]:SwitchCase[1155-1168]"
    }, {
      "left" : "insert(token.asComment());",
      "right" : "insert(token.asComment());",
      "info" : "ExpressionStatement[1161-1187]:ExpressionStatement[1185-1211]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1204-1210]:BreakStatement[1228-1234]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[1223-1238]:SwitchCase[1247-1262]"
    }, {
      "left" : "insert(token.asCharacter());",
      "right" : "insert(token.asCharacter());",
      "info" : "ExpressionStatement[1255-1283]:ExpressionStatement[1279-1307]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1300-1306]:BreakStatement[1324-1330]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[1319-1332]:SwitchCase[1343-1356]"
    }, {
      "left" : "insert(token.asDoctype());",
      "right" : "insert(token.asDoctype());",
      "info" : "ExpressionStatement[1349-1375]:ExpressionStatement[1373-1399]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1392-1398]:BreakStatement[1416-1422]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[1411-1420]:SwitchCase[1435-1444]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1485-1491]:BreakStatement[1509-1515]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[1504-1512]:SwitchCase[1528-1536]"
    }, {
      "left" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "right" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "info" : "ExpressionStatement[1529-1583]:ExpressionStatement[1553-1607]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1602-1614]:ReturnStatement[1626-1638]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1626-1633]:Modifier[1650-1657]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1634-1638]:PrimitiveType[1658-1662]"
    }, {
      "left" : "insertNode",
      "right" : "insertNode",
      "info" : "SimpleName[1639-1649]:SimpleName[1663-1673]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[1650-1659]:SingleVariableDeclaration[1674-1683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1661-1712]:Block[1685-1736]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[1671-1706]:ExpressionStatement[1695-1730]"
    }, {
      "left" : "Element",
      "right" : "Element",
      "info" : "SimpleType[1718-1725]:SimpleType[1742-1749]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[1726-1732]:SimpleName[1750-1756]"
    }, {
      "left" : "Token.StartTag startTag",
      "right" : "Token.StartTag startTag",
      "info" : "SingleVariableDeclaration[1733-1756]:SingleVariableDeclaration[1757-1780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1758-2314]:Block[1782-2338]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name());",
      "right" : "Tag tag = Tag.valueOf(startTag.name());",
      "info" : "VariableDeclarationStatement[1768-1807]:VariableDeclarationStatement[1792-1831]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "right" : "Element el = new Element(tag, baseUri, startTag.attributes);",
      "info" : "VariableDeclarationStatement[1917-1977]:VariableDeclarationStatement[1941-2001]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[1986-2001]:ExpressionStatement[2010-2025]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[2010-2289]:IfStatement[2034-2313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2040-2245]:Block[2064-2269]"
    }, {
      "left" : "tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[2054-2093]:ExpressionStatement[2078-2117]"
    }, {
      "left" : "if (!tag.isKnownTag())",
      "right" : "if (!tag.isKnownTag())",
      "info" : "IfStatement[2106-2235]:IfStatement[2130-2259]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[2214-2235]:ExpressionStatement[2238-2259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2251-2289]:Block[2275-2313]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[2265-2279]:ExpressionStatement[2289-2303]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[2298-2308]:ReturnStatement[2322-2332]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2320-2324]:PrimitiveType[2344-2348]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[2325-2331]:SimpleName[2349-2355]"
    }, {
      "left" : "Token.Comment commentToken",
      "right" : "Token.Comment commentToken",
      "info" : "SingleVariableDeclaration[2332-2358]:SingleVariableDeclaration[2356-2382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2360-3032]:Block[2384-3227]"
    }, {
      "left" : "Comment comment = new Comment(commentToken.getData(), baseUri);",
      "right" : "Comment comment = new Comment(commentToken.getData(), baseUri);",
      "info" : "VariableDeclarationStatement[2370-2433]:VariableDeclarationStatement[2394-2457]"
    }, {
      "left" : "Node insert = comment;",
      "right" : "Node insert = comment;",
      "info" : "VariableDeclarationStatement[2442-2464]:VariableDeclarationStatement[2466-2488]"
    }, {
      "left" : "if (commentToken.bogus)",
      "right" : "if (commentToken.bogus)",
      "info" : "IfStatement[2473-2998]:IfStatement[2497-3193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2497-2998]:Block[2521-3193]"
    }, {
      "left" : "String data = comment.getData();",
      "right" : "String data = comment.getData();",
      "info" : "VariableDeclarationStatement[2700-2732]:VariableDeclarationStatement[2724-2756]"
    }, {
      "left" : "if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")))",
      "right" : "if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")))",
      "info" : "IfStatement[2745-2988]:IfStatement[2769-3183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2818-2988]:Block[2842-3183]"
    }, {
      "left" : "insert = new XmlDeclaration(declaration, comment.baseUri(), data.startsWith(\"!\"));",
      "right" : "insert = new XmlDeclaration(el.tagName(), comment.baseUri(), data.startsWith(\"!\"));",
      "info" : "ExpressionStatement[2892-2974]:ExpressionStatement[3025-3108]"
    }, {
      "left" : "insertNode(insert);",
      "right" : "insertNode(insert);",
      "info" : "ExpressionStatement[3007-3026]:ExpressionStatement[3202-3221]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3038-3042]:PrimitiveType[3233-3237]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[3043-3049]:SimpleName[3238-3244]"
    }, {
      "left" : "Token.Character characterToken",
      "right" : "Token.Character characterToken",
      "info" : "SingleVariableDeclaration[3050-3080]:SingleVariableDeclaration[3245-3275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3082-3184]:Block[3277-3379]"
    }, {
      "left" : "Node node = new TextNode(characterToken.getData(), baseUri);",
      "right" : "Node node = new TextNode(characterToken.getData(), baseUri);",
      "info" : "VariableDeclarationStatement[3092-3152]:VariableDeclarationStatement[3287-3347]"
    }, {
      "left" : "insertNode(node);",
      "right" : "insertNode(node);",
      "info" : "ExpressionStatement[3161-3178]:ExpressionStatement[3356-3373]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3190-3194]:PrimitiveType[3385-3389]"
    }, {
      "left" : "insert",
      "right" : "insert",
      "info" : "SimpleName[3195-3201]:SimpleName[3390-3396]"
    }, {
      "left" : "Token.Doctype d",
      "right" : "Token.Doctype d",
      "info" : "SingleVariableDeclaration[3202-3217]:SingleVariableDeclaration[3397-3412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3219-3384]:Block[3414-3579]"
    }, {
      "left" : "DocumentType doctypeNode = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri);",
      "right" : "DocumentType doctypeNode = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), baseUri);",
      "info" : "VariableDeclarationStatement[3229-3345]:VariableDeclarationStatement[3424-3540]"
    }, {
      "left" : "insertNode(doctypeNode);",
      "right" : "insertNode(doctypeNode);",
      "info" : "ExpressionStatement[3354-3378]:ExpressionStatement[3549-3573]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3573-3580]:Modifier[3768-3775]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3581-3585]:PrimitiveType[3776-3780]"
    }, {
      "left" : "popStackToClose",
      "right" : "popStackToClose",
      "info" : "SimpleName[3586-3601]:SimpleName[3781-3796]"
    }, {
      "left" : "Token.EndTag endTag",
      "right" : "Token.EndTag endTag",
      "info" : "SingleVariableDeclaration[3602-3621]:SingleVariableDeclaration[3797-3816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3623-4213]:Block[3818-4408]"
    }, {
      "left" : "String elName = endTag.name();",
      "right" : "String elName = endTag.name();",
      "info" : "VariableDeclarationStatement[3633-3663]:VariableDeclarationStatement[3828-3858]"
    }, {
      "left" : "Element firstFound = null;",
      "right" : "Element firstFound = null;",
      "info" : "VariableDeclarationStatement[3672-3698]:VariableDeclarationStatement[3867-3893]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[3708-3933]:ForStatement[3903-4128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3757-3933]:Block[3952-4128]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[3771-3801]:VariableDeclarationStatement[3966-3996]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[3814-3923]:IfStatement[4009-4118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3850-3923]:Block[4045-4118]"
    }, {
      "left" : "firstFound = next;",
      "right" : "firstFound = next;",
      "info" : "ExpressionStatement[3868-3886]:ExpressionStatement[4063-4081]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3903-3909]:BreakStatement[4098-4104]"
    }, {
      "left" : "if (firstFound == null)",
      "right" : "if (firstFound == null)",
      "info" : "IfStatement[3942-3985]:IfStatement[4137-4180]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3978-3985]:ReturnStatement[4173-4180]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[4014-4207]:ForStatement[4209-4402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4063-4207]:Block[4258-4402]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[4077-4107]:VariableDeclarationStatement[4272-4302]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[4120-4138]:ExpressionStatement[4315-4333]"
    }, {
      "left" : "if (next == firstFound)",
      "right" : "if (next == firstFound)",
      "info" : "IfStatement[4151-4197]:IfStatement[4346-4392]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4191-4197]:BreakStatement[4386-4392]"
    }, {
      "left" : "List<Node>",
      "right" : "List<Node>",
      "info" : "ParameterizedType[4219-4229]:ParameterizedType[4414-4424]"
    }, {
      "left" : "parseFragment",
      "right" : "parseFragment",
      "info" : "SimpleName[4230-4243]:SimpleName[4425-4438]"
    }, {
      "left" : "String inputFragment",
      "right" : "String inputFragment",
      "info" : "SingleVariableDeclaration[4244-4264]:SingleVariableDeclaration[4439-4459]"
    }, {
      "left" : "String baseUri",
      "right" : "String baseUri",
      "info" : "SingleVariableDeclaration[4266-4280]:SingleVariableDeclaration[4461-4475]"
    }, {
      "left" : "ParseErrorList errors",
      "right" : "ParseErrorList errors",
      "info" : "SingleVariableDeclaration[4282-4303]:SingleVariableDeclaration[4477-4498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4305-4423]:Block[4500-4618]"
    }, {
      "left" : "initialiseParse(inputFragment, baseUri, errors);",
      "right" : "initialiseParse(inputFragment, baseUri, errors);",
      "info" : "ExpressionStatement[4315-4363]:ExpressionStatement[4510-4558]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[4372-4384]:ExpressionStatement[4567-4579]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[4393-4417]:ReturnStatement[4588-4612]"
    } ]
  },
  "interFileMappings" : { }
}