{
  "matchedElements" : [
 {
    "left" : "class : BaseNCodecInputStream",
    "right" : "class : BaseNCodecInputStream",
    "info" : "TypeDeclaration[1002-5360]:TypeDeclaration[1002-6119]"
  }, {
    "left" : "doEncode",
    "right" : "doEncode",
    "info" : "FieldDeclaration[1145-1176]:FieldDeclaration[1145-1176]"
  }, {
    "left" : "baseNCodec",
    "right" : "baseNCodec",
    "info" : "FieldDeclaration[1182-1218]:FieldDeclaration[1182-1218]"
  }, {
    "left" : "singleByte",
    "right" : "singleByte",
    "info" : "FieldDeclaration[1224-1270]:FieldDeclaration[1224-1270]"
  }, {
    "left" : "protected BaseNCodecInputStream(in , baseNCodec , doEncode boolean)",
    "right" : "protected BaseNCodecInputStream(in , baseNCodec , doEncode boolean)",
    "info" : "MethodDeclaration[1276-1463]:MethodDeclaration[1276-1463]"
  }, {
    "left" : "public read() : int",
    "right" : "public read() : int",
    "info" : "MethodDeclaration[1469-2025]:MethodDeclaration[1469-2025]"
  }, {
    "left" : "public read(b byte, offset int, len int) : int",
    "right" : "public read(b byte, offset int, len int) : int",
    "info" : "MethodDeclaration[2031-4507]:MethodDeclaration[2031-4507]"
  }, {
    "left" : "public markSupported() : boolean",
    "right" : "public markSupported() : boolean",
    "info" : "MethodDeclaration[4512-4688]:MethodDeclaration[4512-4688]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1077-1083]:Modifier[1077-1083]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1084-1089]:TYPE_DECLARATION_KIND[1084-1089]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[1276-1285]:Modifier[1276-1285]"
  }, {
    "left" : "BaseNCodecInputStream",
    "right" : "BaseNCodecInputStream",
    "info" : "SimpleName[1286-1307]:SimpleName[1286-1307]"
  }, {
    "left" : "InputStream in",
    "right" : "InputStream in",
    "info" : "SingleVariableDeclaration[1308-1322]:SingleVariableDeclaration[1308-1322]"
  }, {
    "left" : "BaseNCodec baseNCodec",
    "right" : "BaseNCodec baseNCodec",
    "info" : "SingleVariableDeclaration[1324-1345]:SingleVariableDeclaration[1324-1345]"
  }, {
    "left" : "boolean doEncode",
    "right" : "boolean doEncode",
    "info" : "SingleVariableDeclaration[1347-1363]:SingleVariableDeclaration[1347-1363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1365-1463]:Block[1365-1463]"
  }, {
    "left" : "super(in);",
    "right" : "super(in);",
    "info" : "SuperConstructorInvocation[1375-1385]:SuperConstructorInvocation[1375-1385]"
  }, {
    "left" : "this.doEncode = doEncode;",
    "right" : "this.doEncode = doEncode;",
    "info" : "ExpressionStatement[1394-1419]:ExpressionStatement[1394-1419]"
  }, {
    "left" : "this.baseNCodec = baseNCodec;",
    "right" : "this.baseNCodec = baseNCodec;",
    "info" : "ExpressionStatement[1428-1457]:ExpressionStatement[1428-1457]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[1719-1728]:MarkerAnnotation[1719-1728]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1733-1739]:Modifier[1733-1739]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[1740-1743]:PrimitiveType[1740-1743]"
  }, {
    "left" : "read",
    "right" : "read",
    "info" : "SimpleName[1744-1748]:SimpleName[1744-1748]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[1758-1769]:SimpleType[1758-1769]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1770-2025]:Block[1770-2025]"
  }, {
    "left" : "int r = read(singleByte, 0, 1);",
    "right" : "int r = read(singleByte, 0, 1);",
    "info" : "VariableDeclarationStatement[1780-1811]:VariableDeclarationStatement[1780-1811]"
  }, {
    "left" : "while (r == 0)",
    "right" : "while (r == 0)",
    "info" : "WhileStatement[1820-1886]:WhileStatement[1820-1886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1835-1886]:Block[1835-1886]"
  }, {
    "left" : "r = read(singleByte, 0, 1);",
    "right" : "r = read(singleByte, 0, 1);",
    "info" : "ExpressionStatement[1849-1876]:ExpressionStatement[1849-1876]"
  }, {
    "left" : "if (r > 0)",
    "right" : "if (r > 0)",
    "info" : "IfStatement[1895-1999]:IfStatement[1895-1999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1906-1999]:Block[1906-1999]"
  }, {
    "left" : "final byte b = singleByte[0];",
    "right" : "final byte b = singleByte[0];",
    "info" : "VariableDeclarationStatement[1920-1949]:VariableDeclarationStatement[1920-1949]"
  }, {
    "left" : "return b < 0 ? 256 + b : b;",
    "right" : "return b < 0 ? 256 + b : b;",
    "info" : "ReturnStatement[1962-1989]:ReturnStatement[1962-1989]"
  }, {
    "left" : "return EOF;",
    "right" : "return EOF;",
    "info" : "ReturnStatement[2008-2019]:ReturnStatement[2008-2019]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2708-2717]:MarkerAnnotation[2708-2717]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2722-2728]:Modifier[2722-2728]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[2729-2732]:PrimitiveType[2729-2732]"
  }, {
    "left" : "read",
    "right" : "read",
    "info" : "SimpleName[2733-2737]:SimpleName[2733-2737]"
  }, {
    "left" : "byte b[]",
    "right" : "byte b[]",
    "info" : "SingleVariableDeclaration[2738-2746]:SingleVariableDeclaration[2738-2746]"
  }, {
    "left" : "int offset",
    "right" : "int offset",
    "info" : "SingleVariableDeclaration[2748-2758]:SingleVariableDeclaration[2748-2758]"
  }, {
    "left" : "int len",
    "right" : "int len",
    "info" : "SingleVariableDeclaration[2760-2767]:SingleVariableDeclaration[2760-2767]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[2776-2787]:SimpleType[2776-2787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2788-4507]:Block[2788-4507]"
  }, {
    "left" : "if (b == null)",
    "right" : "if (b == null)",
    "info" : "IfStatement[2798-4501]:IfStatement[2798-4501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2813-2870]:Block[2813-2870]"
  }, {
    "left" : "throw new NullPointerException();",
    "right" : "throw new NullPointerException();",
    "info" : "ThrowStatement[2827-2860]:ThrowStatement[2827-2860]"
  }, {
    "left" : "if (offset < 0 || len < 0)",
    "right" : "if (offset < 0 || len < 0)",
    "info" : "IfStatement[2876-4501]:IfStatement[2876-4501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2903-2965]:Block[2903-2965]"
  }, {
    "left" : "throw new IndexOutOfBoundsException();",
    "right" : "throw new IndexOutOfBoundsException();",
    "info" : "ThrowStatement[2917-2955]:ThrowStatement[2917-2955]"
  }, {
    "left" : "if (offset > b.length || offset + len > b.length)",
    "right" : "if (offset > b.length || offset + len > b.length)",
    "info" : "IfStatement[2971-4501]:IfStatement[2971-4501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3021-3083]:Block[3021-3083]"
  }, {
    "left" : "throw new IndexOutOfBoundsException();",
    "right" : "throw new IndexOutOfBoundsException();",
    "info" : "ThrowStatement[3035-3073]:ThrowStatement[3035-3073]"
  }, {
    "left" : "if (len == 0)",
    "right" : "if (len == 0)",
    "info" : "IfStatement[3089-4501]:IfStatement[3089-4501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3103-3136]:Block[3103-3136]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[3117-3126]:ReturnStatement[3117-3126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3142-4501]:Block[3142-4501]"
  }, {
    "left" : "int readLen = 0;",
    "right" : "int readLen = 0;",
    "info" : "VariableDeclarationStatement[3156-3172]:VariableDeclarationStatement[3156-3172]"
  }, {
    "left" : "while (readLen == 0)",
    "right" : "while (readLen == 0)",
    "info" : "WhileStatement[3994-4463]:WhileStatement[3994-4463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4015-4463]:Block[4015-4463]"
  }, {
    "left" : "if (!baseNCodec.hasData())",
    "right" : "if (!baseNCodec.hasData())",
    "info" : "IfStatement[4033-4383]:IfStatement[4033-4383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4060-4383]:Block[4060-4383]"
  }, {
    "left" : "byte[] buf = new byte[doEncode ? 4096 : 8192];",
    "right" : "byte[] buf = new byte[doEncode ? 4096 : 8192];",
    "info" : "VariableDeclarationStatement[4082-4128]:VariableDeclarationStatement[4082-4128]"
  }, {
    "left" : "int c = in.read(buf);",
    "right" : "int c = in.read(buf);",
    "info" : "VariableDeclarationStatement[4149-4170]:VariableDeclarationStatement[4149-4170]"
  }, {
    "left" : "if (doEncode)",
    "right" : "if (doEncode)",
    "info" : "IfStatement[4191-4365]:IfStatement[4191-4365]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4205-4282]:Block[4205-4282]"
  }, {
    "left" : "baseNCodec.encode(buf, 0, c);",
    "right" : "baseNCodec.encode(buf, 0, c);",
    "info" : "ExpressionStatement[4231-4260]:ExpressionStatement[4231-4260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4288-4365]:Block[4288-4365]"
  }, {
    "left" : "baseNCodec.decode(buf, 0, c);",
    "right" : "baseNCodec.decode(buf, 0, c);",
    "info" : "ExpressionStatement[4314-4343]:ExpressionStatement[4314-4343]"
  }, {
    "left" : "readLen = baseNCodec.readResults(b, offset, len);",
    "right" : "readLen = baseNCodec.readResults(b, offset, len);",
    "info" : "ExpressionStatement[4400-4449]:ExpressionStatement[4400-4449]"
  }, {
    "left" : "return readLen;",
    "right" : "return readLen;",
    "info" : "ReturnStatement[4476-4491]:ReturnStatement[4476-4491]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4578-4587]:MarkerAnnotation[4578-4587]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4592-4598]:Modifier[4592-4598]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[4599-4606]:PrimitiveType[4599-4606]"
  }, {
    "left" : "markSupported",
    "right" : "markSupported",
    "info" : "SimpleName[4607-4620]:SimpleName[4607-4620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4623-4688]:Block[4623-4688]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[4633-4646]:ReturnStatement[4633-4646]"
  } ]
}