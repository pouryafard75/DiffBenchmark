{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ZipArchiveInputStream",
      "right" : "ZipArchiveInputStream",
      "info" : "TypeDeclaration[1735-38951]:TypeDeclaration[1735-39012]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[2336-2445]:FieldDeclaration[2336-2445]"
    }, {
      "left" : "private final boolean useUnicodeExtraFields;",
      "right" : "private final boolean useUnicodeExtraFields;",
      "info" : "FieldDeclaration[2498-2603]:FieldDeclaration[2525-2630]"
    }, {
      "left" : "private final InputStream in;",
      "right" : "private final InputStream in;",
      "info" : "FieldDeclaration[2609-2703]:FieldDeclaration[2636-2730]"
    }, {
      "left" : "private final Inflater inf = new Inflater(true);",
      "right" : "private final Inflater inf = new Inflater(true);",
      "info" : "FieldDeclaration[2709-2808]:FieldDeclaration[2736-2835]"
    }, {
      "left" : "private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);",
      "right" : "private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);",
      "info" : "FieldDeclaration[2814-2957]:FieldDeclaration[2841-2984]"
    }, {
      "left" : "private CurrentEntry current = null;",
      "right" : "private CurrentEntry current = null;",
      "info" : "FieldDeclaration[2963-3050]:FieldDeclaration[2990-3077]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[3056-3134]:FieldDeclaration[3083-3161]"
    }, {
      "left" : "private boolean hitCentralDirectory = false;",
      "right" : "private boolean hitCentralDirectory = false;",
      "info" : "FieldDeclaration[3140-3278]:FieldDeclaration[3167-3305]"
    }, {
      "left" : "private ByteArrayInputStream lastStoredEntry = null;",
      "right" : "private ByteArrayInputStream lastStoredEntry = null;",
      "info" : "FieldDeclaration[3284-3505]:FieldDeclaration[3311-3532]"
    }, {
      "left" : "private boolean allowStoredEntriesWithDataDescriptor = false;",
      "right" : "private boolean allowStoredEntriesWithDataDescriptor = false;",
      "info" : "FieldDeclaration[3511-3662]:FieldDeclaration[3538-3689]"
    }, {
      "left" : "private static final int LFH_LEN = 30;",
      "right" : "private static final int LFH_LEN = 30;",
      "info" : "FieldDeclaration[3668-3706]:FieldDeclaration[3695-3733]"
    }, {
      "left" : "private static final int CFH_LEN = 46;",
      "right" : "private static final int CFH_LEN = 46;",
      "info" : "FieldDeclaration[4206-4244]:FieldDeclaration[4233-4271]"
    }, {
      "left" : "private static final long TWO_EXP_32 = ZIP64_MAGIC + 1;",
      "right" : "private static final long TWO_EXP_32 = ZIP64_MAGIC + 1;",
      "info" : "FieldDeclaration[5040-5095]:FieldDeclaration[5067-5122]"
    }, {
      "left" : "private final byte[] LFH_BUF = new byte[LFH_LEN];",
      "right" : "private final byte[] LFH_BUF = new byte[LFH_LEN];",
      "info" : "FieldDeclaration[5207-5256]:FieldDeclaration[5234-5283]"
    }, {
      "left" : "private final byte[] SKIP_BUF = new byte[1024];",
      "right" : "private final byte[] SKIP_BUF = new byte[1024];",
      "info" : "FieldDeclaration[5261-5308]:FieldDeclaration[5288-5335]"
    }, {
      "left" : "private final byte[] SHORT_BUF = new byte[SHORT];",
      "right" : "private final byte[] SHORT_BUF = new byte[SHORT];",
      "info" : "FieldDeclaration[5313-5362]:FieldDeclaration[5340-5389]"
    }, {
      "left" : "private final byte[] WORD_BUF = new byte[WORD];",
      "right" : "private final byte[] WORD_BUF = new byte[WORD];",
      "info" : "FieldDeclaration[5367-5414]:FieldDeclaration[5394-5441]"
    }, {
      "left" : "private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];",
      "right" : "private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];",
      "info" : "FieldDeclaration[5419-5476]:FieldDeclaration[5446-5503]"
    }, {
      "left" : "private int entriesRead = 0;",
      "right" : "private int entriesRead = 0;",
      "info" : "FieldDeclaration[5482-5510]:FieldDeclaration[5509-5537]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream)",
      "info" : "MethodDeclaration[5516-5736]:MethodDeclaration[5543-5763]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream, String encoding)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream, String encoding)",
      "info" : "MethodDeclaration[5742-6008]:MethodDeclaration[5769-6035]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream, String encoding, boolean useUnicodeExtraFields)",
      "info" : "MethodDeclaration[6014-6440]:MethodDeclaration[6041-6467]"
    }, {
      "left" : "public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor)",
      "right" : "public ZipArchiveInputStream(InputStream inputStream,\n                                 String encoding,\n                                 boolean useUnicodeExtraFields,\n                                 boolean allowStoredEntriesWithDataDescriptor)",
      "info" : "MethodDeclaration[6446-7461]:MethodDeclaration[6473-7522]"
    }, {
      "left" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
      "right" : "public ZipArchiveEntry getNextZipEntry() throws IOException",
      "info" : "MethodDeclaration[7467-11145]:MethodDeclaration[7528-11206]"
    }, {
      "left" : "private void readFirstLocalFileHeader(byte[] lfh) throws IOException",
      "right" : "private void readFirstLocalFileHeader(byte[] lfh) throws IOException",
      "info" : "MethodDeclaration[11151-12036]:MethodDeclaration[11212-12097]"
    }, {
      "left" : "private void processZip64Extra(ZipLong size, ZipLong cSize)",
      "right" : "private void processZip64Extra(ZipLong size, ZipLong cSize)",
      "info" : "MethodDeclaration[12042-13068]:MethodDeclaration[12103-13129]"
    }, {
      "left" : "public ArchiveEntry getNextEntry() throws IOException",
      "right" : "public ArchiveEntry getNextEntry() throws IOException",
      "info" : "MethodDeclaration[13074-13183]:MethodDeclaration[13135-13244]"
    }, {
      "left" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "right" : "public boolean canReadEntryData(ArchiveEntry ae)",
      "info" : "MethodDeclaration[13189-13722]:MethodDeclaration[13250-13783]"
    }, {
      "left" : "public int read(byte[] buffer, int offset, int length) throws IOException",
      "right" : "public int read(byte[] buffer, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[13728-15279]:MethodDeclaration[13789-15340]"
    }, {
      "left" : "private int readStored(byte[] buffer, int offset, int length) throws IOException",
      "right" : "private int readStored(byte[] buffer, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[15285-16405]:MethodDeclaration[15346-16466]"
    }, {
      "left" : "private int readDeflated(byte[] buffer, int offset, int length) throws IOException",
      "right" : "private int readDeflated(byte[] buffer, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[16411-17121]:MethodDeclaration[16472-17182]"
    }, {
      "left" : "private int readFromInflater(byte[] buffer, int offset, int length) throws IOException",
      "right" : "private int readFromInflater(byte[] buffer, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[17127-17969]:MethodDeclaration[17188-18030]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[17975-18142]:MethodDeclaration[18036-18203]"
    }, {
      "left" : "public long skip(long value) throws IOException",
      "right" : "public long skip(long value) throws IOException",
      "info" : "MethodDeclaration[18148-19245]:MethodDeclaration[18209-19306]"
    }, {
      "left" : "public static boolean matches(byte[] signature, int length)",
      "right" : "public static boolean matches(byte[] signature, int length)",
      "info" : "MethodDeclaration[19251-20114]:MethodDeclaration[19312-20175]"
    }, {
      "left" : "private static boolean checksig(byte[] signature, byte[] expected)",
      "right" : "private static boolean checksig(byte[] signature, byte[] expected)",
      "info" : "MethodDeclaration[20120-20368]:MethodDeclaration[20181-20429]"
    }, {
      "left" : "private void closeEntry() throws IOException",
      "right" : "private void closeEntry() throws IOException",
      "info" : "MethodDeclaration[20374-22415]:MethodDeclaration[20435-22476]"
    }, {
      "left" : "private void drainCurrentEntryData() throws IOException",
      "right" : "private void drainCurrentEntryData() throws IOException",
      "info" : "MethodDeclaration[22421-23034]:MethodDeclaration[22482-23095]"
    }, {
      "left" : "private long getBytesInflated()",
      "right" : "private long getBytesInflated()",
      "info" : "MethodDeclaration[23040-24066]:MethodDeclaration[23101-24127]"
    }, {
      "left" : "private int fill() throws IOException",
      "right" : "private int fill() throws IOException",
      "info" : "MethodDeclaration[24072-24428]:MethodDeclaration[24133-24489]"
    }, {
      "left" : "private void readFully(byte[] b) throws IOException",
      "right" : "private void readFully(byte[] b) throws IOException",
      "info" : "MethodDeclaration[24434-24641]:MethodDeclaration[24495-24702]"
    }, {
      "left" : "private void readDataDescriptor() throws IOException",
      "right" : "private void readDataDescriptor() throws IOException",
      "info" : "MethodDeclaration[24647-26256]:MethodDeclaration[24708-26317]"
    }, {
      "left" : "private boolean supportsDataDescriptorFor(ZipArchiveEntry entry)",
      "right" : "private boolean supportsDataDescriptorFor(ZipArchiveEntry entry)",
      "info" : "MethodDeclaration[26262-26818]:MethodDeclaration[26323-26879]"
    }, {
      "left" : "private void readStoredEntry() throws IOException",
      "right" : "private void readStoredEntry() throws IOException",
      "info" : "MethodDeclaration[26824-28517]:MethodDeclaration[26885-28578]"
    }, {
      "left" : "private static final byte[] LFH = ZipLong.LFH_SIG.getBytes();",
      "right" : "private static final byte[] LFH = ZipLong.LFH_SIG.getBytes();",
      "info" : "FieldDeclaration[28523-28584]:FieldDeclaration[28584-28645]"
    }, {
      "left" : "private static final byte[] CFH = ZipLong.CFH_SIG.getBytes();",
      "right" : "private static final byte[] CFH = ZipLong.CFH_SIG.getBytes();",
      "info" : "FieldDeclaration[28589-28650]:FieldDeclaration[28650-28711]"
    }, {
      "left" : "private static final byte[] DD = ZipLong.DD_SIG.getBytes();",
      "right" : "private static final byte[] DD = ZipLong.DD_SIG.getBytes();",
      "info" : "FieldDeclaration[28655-28714]:FieldDeclaration[28716-28775]"
    }, {
      "left" : "private boolean bufferContainsSignature(ByteArrayOutputStream bos, int offset, int lastRead, int expectedDDLen)\n            throws IOException",
      "right" : "private boolean bufferContainsSignature(ByteArrayOutputStream bos, int offset, int lastRead, int expectedDDLen)\n            throws IOException",
      "info" : "MethodDeclaration[28720-30459]:MethodDeclaration[28781-30520]"
    }, {
      "left" : "private int cacheBytesRead(ByteArrayOutputStream bos, int offset, int lastRead, int expecteDDLen)",
      "right" : "private int cacheBytesRead(ByteArrayOutputStream bos, int offset, int lastRead, int expecteDDLen)",
      "info" : "MethodDeclaration[30465-31322]:MethodDeclaration[30526-31383]"
    }, {
      "left" : "private void pushback(byte[] buf, int offset, int length) throws IOException",
      "right" : "private void pushback(byte[] buf, int offset, int length) throws IOException",
      "info" : "MethodDeclaration[31328-31509]:MethodDeclaration[31389-31570]"
    }, {
      "left" : "private void skipRemainderOfArchive() throws IOException",
      "right" : "private void skipRemainderOfArchive() throws IOException",
      "info" : "MethodDeclaration[32171-32808]:MethodDeclaration[32232-32869]"
    }, {
      "left" : "private void findEocdRecord() throws IOException",
      "right" : "private void findEocdRecord() throws IOException",
      "info" : "MethodDeclaration[32814-34120]:MethodDeclaration[32875-34181]"
    }, {
      "left" : "private void realSkip(long value) throws IOException",
      "right" : "private void realSkip(long value) throws IOException",
      "info" : "MethodDeclaration[34126-34869]:MethodDeclaration[34187-34930]"
    }, {
      "left" : "private int readOneByte() throws IOException",
      "right" : "private int readOneByte() throws IOException",
      "info" : "MethodDeclaration[34875-35241]:MethodDeclaration[34936-35302]"
    }, {
      "left" : "private boolean isFirstByteOfEocdSig(int b)",
      "right" : "private boolean isFirstByteOfEocdSig(int b)",
      "info" : "MethodDeclaration[35247-35354]:MethodDeclaration[35308-35415]"
    }, {
      "left" : "CurrentEntry",
      "right" : "CurrentEntry",
      "info" : "TypeDeclaration[35360-36659]:TypeDeclaration[35421-36720]"
    }, {
      "left" : "private final ZipArchiveEntry entry = new ZipArchiveEntry();",
      "right" : "private final ZipArchiveEntry entry = new ZipArchiveEntry();",
      "info" : "FieldDeclaration[35518-35632]:FieldDeclaration[35579-35693]"
    }, {
      "left" : "private boolean hasDataDescriptor;",
      "right" : "private boolean hasDataDescriptor;",
      "info" : "FieldDeclaration[35642-35749]:FieldDeclaration[35703-35810]"
    }, {
      "left" : "private boolean usesZip64;",
      "right" : "private boolean usesZip64;",
      "info" : "FieldDeclaration[35759-35882]:FieldDeclaration[35820-35943]"
    }, {
      "left" : "private long bytesRead;",
      "right" : "private long bytesRead;",
      "info" : "FieldDeclaration[35892-36037]:FieldDeclaration[35953-36098]"
    }, {
      "left" : "private long bytesReadFromStream;",
      "right" : "private long bytesReadFromStream;",
      "info" : "FieldDeclaration[36047-36375]:FieldDeclaration[36108-36436]"
    }, {
      "left" : "private final CRC32 crc = new CRC32();",
      "right" : "private final CRC32 crc = new CRC32();",
      "info" : "FieldDeclaration[36385-36512]:FieldDeclaration[36446-36573]"
    }, {
      "left" : "private InputStream in;",
      "right" : "private InputStream in;",
      "info" : "FieldDeclaration[36522-36653]:FieldDeclaration[36583-36714]"
    }, {
      "left" : "BoundedInputStream",
      "right" : "BoundedInputStream",
      "info" : "TypeDeclaration[36665-38949]:TypeDeclaration[36726-39010]"
    }, {
      "left" : "private final InputStream in;",
      "right" : "private final InputStream in;",
      "info" : "FieldDeclaration[36797-36866]:FieldDeclaration[36858-36927]"
    }, {
      "left" : "private final long max;",
      "right" : "private final long max;",
      "info" : "FieldDeclaration[36876-36940]:FieldDeclaration[36937-37001]"
    }, {
      "left" : "private long pos = 0;",
      "right" : "private long pos = 0;",
      "info" : "FieldDeclaration[36950-37023]:FieldDeclaration[37011-37084]"
    }, {
      "left" : "public BoundedInputStream(final InputStream in, final long size)",
      "right" : "public BoundedInputStream(final InputStream in, final long size)",
      "info" : "MethodDeclaration[37037-37445]:MethodDeclaration[37098-37506]"
    }, {
      "left" : "public int read() throws IOException",
      "right" : "public int read() throws IOException",
      "info" : "MethodDeclaration[37455-37757]:MethodDeclaration[37516-37818]"
    }, {
      "left" : "public int read(final byte[] b) throws IOException",
      "right" : "public int read(final byte[] b) throws IOException",
      "info" : "MethodDeclaration[37767-37893]:MethodDeclaration[37828-37954]"
    }, {
      "left" : "public int read(final byte[] b, final int off, final int len) throws IOException",
      "right" : "public int read(final byte[] b, final int off, final int len) throws IOException",
      "info" : "MethodDeclaration[37903-38460]:MethodDeclaration[37964-38521]"
    }, {
      "left" : "public long skip(final long n) throws IOException",
      "right" : "public long skip(final long n) throws IOException",
      "info" : "MethodDeclaration[38470-38741]:MethodDeclaration[38531-38802]"
    }, {
      "left" : "public int available() throws IOException",
      "right" : "public int available() throws IOException",
      "info" : "MethodDeclaration[38755-38943]:MethodDeclaration[38816-39004]"
    } ],
    "mappings" : [
 {
      "left" : "ArchiveInputStream",
      "right" : "ArchiveInputStream",
      "info" : "SimpleType[2310-2328]:SimpleType[2310-2328]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5624-5630]:Modifier[5651-5657]"
    }, {
      "left" : "ZipArchiveInputStream",
      "right" : "ZipArchiveInputStream",
      "info" : "SimpleName[5631-5652]:SimpleName[5658-5679]"
    }, {
      "left" : "InputStream inputStream",
      "right" : "InputStream inputStream",
      "info" : "SingleVariableDeclaration[5653-5676]:SingleVariableDeclaration[5680-5703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5678-5736]:Block[5705-5763]"
    }, {
      "left" : "this(inputStream, ZipEncodingHelper.UTF8);",
      "right" : "this(inputStream, ZipEncodingHelper.UTF8);",
      "info" : "ConstructorInvocation[5688-5730]:ConstructorInvocation[5715-5757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5887-5893]:Modifier[5914-5920]"
    }, {
      "left" : "ZipArchiveInputStream",
      "right" : "ZipArchiveInputStream",
      "info" : "SimpleName[5894-5915]:SimpleName[5921-5942]"
    }, {
      "left" : "InputStream inputStream",
      "right" : "InputStream inputStream",
      "info" : "SingleVariableDeclaration[5916-5939]:SingleVariableDeclaration[5943-5966]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[5941-5956]:SingleVariableDeclaration[5968-5983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5958-6008]:Block[5985-6035]"
    }, {
      "left" : "this(inputStream, encoding, true);",
      "right" : "this(inputStream, encoding, true);",
      "info" : "ConstructorInvocation[5968-6002]:ConstructorInvocation[5995-6029]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6264-6270]:Modifier[6291-6297]"
    }, {
      "left" : "ZipArchiveInputStream",
      "right" : "ZipArchiveInputStream",
      "info" : "SimpleName[6271-6292]:SimpleName[6298-6319]"
    }, {
      "left" : "InputStream inputStream",
      "right" : "InputStream inputStream",
      "info" : "SingleVariableDeclaration[6293-6316]:SingleVariableDeclaration[6320-6343]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[6318-6333]:SingleVariableDeclaration[6345-6360]"
    }, {
      "left" : "boolean useUnicodeExtraFields",
      "right" : "boolean useUnicodeExtraFields",
      "info" : "SingleVariableDeclaration[6335-6364]:SingleVariableDeclaration[6362-6391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6366-6440]:Block[6393-6467]"
    }, {
      "left" : "this(inputStream, encoding, useUnicodeExtraFields, false);",
      "right" : "this(inputStream, encoding, useUnicodeExtraFields, false);",
      "info" : "ConstructorInvocation[6376-6434]:ConstructorInvocation[6403-6461]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6850-6856]:Modifier[6877-6883]"
    }, {
      "left" : "ZipArchiveInputStream",
      "right" : "ZipArchiveInputStream",
      "info" : "SimpleName[6857-6878]:SimpleName[6884-6905]"
    }, {
      "left" : "InputStream inputStream",
      "right" : "InputStream inputStream",
      "info" : "SingleVariableDeclaration[6879-6902]:SingleVariableDeclaration[6906-6929]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[6937-6952]:SingleVariableDeclaration[6964-6979]"
    }, {
      "left" : "boolean useUnicodeExtraFields",
      "right" : "boolean useUnicodeExtraFields",
      "info" : "SingleVariableDeclaration[6987-7016]:SingleVariableDeclaration[7014-7043]"
    }, {
      "left" : "boolean allowStoredEntriesWithDataDescriptor",
      "right" : "boolean allowStoredEntriesWithDataDescriptor",
      "info" : "SingleVariableDeclaration[7051-7095]:SingleVariableDeclaration[7078-7122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7097-7461]:Block[7124-7522]"
    }, {
      "left" : "zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "right" : "zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);",
      "info" : "ExpressionStatement[7107-7164]:ExpressionStatement[7168-7225]"
    }, {
      "left" : "this.useUnicodeExtraFields = useUnicodeExtraFields;",
      "right" : "this.useUnicodeExtraFields = useUnicodeExtraFields;",
      "info" : "ExpressionStatement[7173-7224]:ExpressionStatement[7234-7285]"
    }, {
      "left" : "in = new PushbackInputStream(inputStream, buf.capacity());",
      "right" : "in = new PushbackInputStream(inputStream, buf.capacity());",
      "info" : "ExpressionStatement[7233-7291]:ExpressionStatement[7294-7352]"
    }, {
      "left" : "this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;",
      "right" : "this.allowStoredEntriesWithDataDescriptor =\n            allowStoredEntriesWithDataDescriptor;",
      "info" : "ExpressionStatement[7300-7393]:ExpressionStatement[7361-7454]"
    }, {
      "left" : "buf.limit(0);",
      "right" : "buf.limit(0);",
      "info" : "ExpressionStatement[7442-7455]:ExpressionStatement[7503-7516]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7467-7473]:Modifier[7528-7534]"
    }, {
      "left" : "ZipArchiveEntry",
      "right" : "ZipArchiveEntry",
      "info" : "SimpleType[7474-7489]:SimpleType[7535-7550]"
    }, {
      "left" : "getNextZipEntry",
      "right" : "getNextZipEntry",
      "info" : "SimpleName[7490-7505]:SimpleName[7551-7566]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7515-7526]:SimpleType[7576-7587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7527-11145]:Block[7588-11206]"
    }, {
      "left" : "boolean firstEntry = true;",
      "right" : "boolean firstEntry = true;",
      "info" : "VariableDeclarationStatement[7537-7563]:VariableDeclarationStatement[7598-7624]"
    }, {
      "left" : "if (closed || hitCentralDirectory)",
      "right" : "if (closed || hitCentralDirectory)",
      "info" : "IfStatement[7572-7643]:IfStatement[7633-7704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7607-7643]:Block[7668-7704]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7621-7633]:ReturnStatement[7682-7694]"
    }, {
      "left" : "if (current != null)",
      "right" : "if (current != null)",
      "info" : "IfStatement[7652-7742]:IfStatement[7713-7803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7673-7742]:Block[7734-7803]"
    }, {
      "left" : "closeEntry();",
      "right" : "closeEntry();",
      "info" : "ExpressionStatement[7687-7700]:ExpressionStatement[7748-7761]"
    }, {
      "left" : "firstEntry = false;",
      "right" : "firstEntry = false;",
      "info" : "ExpressionStatement[7713-7732]:ExpressionStatement[7774-7793]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7752-8216]:TryStatement[7813-8277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7756-8156]:Block[7817-8217]"
    }, {
      "left" : "if (firstEntry)",
      "right" : "if (firstEntry)",
      "info" : "IfStatement[7770-8146]:IfStatement[7831-8207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7786-8089]:Block[7847-8150]"
    }, {
      "left" : "readFirstLocalFileHeader(LFH_BUF);",
      "right" : "readFirstLocalFileHeader(LFH_BUF);",
      "info" : "ExpressionStatement[8041-8075]:ExpressionStatement[8102-8136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8095-8146]:Block[8156-8207]"
    }, {
      "left" : "readFully(LFH_BUF);",
      "right" : "readFully(LFH_BUF);",
      "info" : "ExpressionStatement[8113-8132]:ExpressionStatement[8174-8193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8180-8216]:Block[8241-8277]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8194-8206]:ReturnStatement[8255-8267]"
    }, {
      "left" : "ZipLong sig = new ZipLong(LFH_BUF);",
      "right" : "ZipLong sig = new ZipLong(LFH_BUF);",
      "info" : "VariableDeclarationStatement[8226-8261]:VariableDeclarationStatement[8287-8322]"
    }, {
      "left" : "if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG))",
      "right" : "if (sig.equals(ZipLong.CFH_SIG) || sig.equals(ZipLong.AED_SIG))",
      "info" : "IfStatement[8270-8423]:IfStatement[8331-8484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8334-8423]:Block[8395-8484]"
    }, {
      "left" : "hitCentralDirectory = true;",
      "right" : "hitCentralDirectory = true;",
      "info" : "ExpressionStatement[8348-8375]:ExpressionStatement[8409-8436]"
    }, {
      "left" : "skipRemainderOfArchive();",
      "right" : "skipRemainderOfArchive();",
      "info" : "ExpressionStatement[8388-8413]:ExpressionStatement[8449-8474]"
    }, {
      "left" : "if (!sig.equals(ZipLong.LFH_SIG))",
      "right" : "if (!sig.equals(ZipLong.LFH_SIG))",
      "info" : "IfStatement[8432-8502]:IfStatement[8493-8563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8466-8502]:Block[8527-8563]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[8480-8492]:ReturnStatement[8541-8553]"
    }, {
      "left" : "int off = WORD;",
      "right" : "int off = WORD;",
      "info" : "VariableDeclarationStatement[8512-8527]:VariableDeclarationStatement[8573-8588]"
    }, {
      "left" : "current = new CurrentEntry();",
      "right" : "current = new CurrentEntry();",
      "info" : "ExpressionStatement[8536-8565]:ExpressionStatement[8597-8626]"
    }, {
      "left" : "int versionMadeBy = ZipShort.getValue(LFH_BUF, off);",
      "right" : "int versionMadeBy = ZipShort.getValue(LFH_BUF, off);",
      "info" : "VariableDeclarationStatement[8575-8627]:VariableDeclarationStatement[8636-8688]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[8636-8649]:ExpressionStatement[8697-8710]"
    }, {
      "left" : "current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);",
      "right" : "current.entry.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT) & ZipFile.NIBLET_MASK);",
      "info" : "ExpressionStatement[8658-8745]:ExpressionStatement[8719-8806]"
    }, {
      "left" : "final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off);",
      "right" : "final GeneralPurposeBit gpFlag = GeneralPurposeBit.parse(LFH_BUF, off);",
      "info" : "VariableDeclarationStatement[8755-8826]:VariableDeclarationStatement[8816-8887]"
    }, {
      "left" : "final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();",
      "right" : "final boolean hasUTF8Flag = gpFlag.usesUTF8ForNames();",
      "info" : "VariableDeclarationStatement[8835-8889]:VariableDeclarationStatement[8896-8950]"
    }, {
      "left" : "final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "right" : "final ZipEncoding entryEncoding = hasUTF8Flag ? ZipEncodingHelper.UTF8_ZIP_ENCODING : zipEncoding;",
      "info" : "VariableDeclarationStatement[8898-8996]:VariableDeclarationStatement[8959-9057]"
    }, {
      "left" : "current.hasDataDescriptor = gpFlag.usesDataDescriptor();",
      "right" : "current.hasDataDescriptor = gpFlag.usesDataDescriptor();",
      "info" : "ExpressionStatement[9005-9061]:ExpressionStatement[9066-9122]"
    }, {
      "left" : "current.entry.setGeneralPurposeBit(gpFlag);",
      "right" : "current.entry.setGeneralPurposeBit(gpFlag);",
      "info" : "ExpressionStatement[9070-9113]:ExpressionStatement[9131-9174]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[9123-9136]:ExpressionStatement[9184-9197]"
    }, {
      "left" : "current.entry.setMethod(ZipShort.getValue(LFH_BUF, off));",
      "right" : "current.entry.setMethod(ZipShort.getValue(LFH_BUF, off));",
      "info" : "ExpressionStatement[9146-9203]:ExpressionStatement[9207-9264]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[9212-9225]:ExpressionStatement[9273-9286]"
    }, {
      "left" : "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));",
      "right" : "long time = ZipUtil.dosToJavaTime(ZipLong.getValue(LFH_BUF, off));",
      "info" : "VariableDeclarationStatement[9235-9301]:VariableDeclarationStatement[9296-9362]"
    }, {
      "left" : "current.entry.setTime(time);",
      "right" : "current.entry.setTime(time);",
      "info" : "ExpressionStatement[9310-9338]:ExpressionStatement[9371-9399]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[9347-9359]:ExpressionStatement[9408-9420]"
    }, {
      "left" : "ZipLong size = null, cSize = null;",
      "right" : "ZipLong size = null, cSize = null;",
      "info" : "VariableDeclarationStatement[9369-9403]:VariableDeclarationStatement[9430-9464]"
    }, {
      "left" : "if (!current.hasDataDescriptor)",
      "right" : "if (!current.hasDataDescriptor)",
      "info" : "IfStatement[9412-9737]:IfStatement[9473-9798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9444-9691]:Block[9505-9752]"
    }, {
      "left" : "current.entry.setCrc(ZipLong.getValue(LFH_BUF, off));",
      "right" : "current.entry.setCrc(ZipLong.getValue(LFH_BUF, off));",
      "info" : "ExpressionStatement[9458-9511]:ExpressionStatement[9519-9572]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[9524-9536]:ExpressionStatement[9585-9597]"
    }, {
      "left" : "cSize = new ZipLong(LFH_BUF, off);",
      "right" : "cSize = new ZipLong(LFH_BUF, off);",
      "info" : "ExpressionStatement[9550-9584]:ExpressionStatement[9611-9645]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[9597-9609]:ExpressionStatement[9658-9670]"
    }, {
      "left" : "size = new ZipLong(LFH_BUF, off);",
      "right" : "size = new ZipLong(LFH_BUF, off);",
      "info" : "ExpressionStatement[9623-9656]:ExpressionStatement[9684-9717]"
    }, {
      "left" : "off += WORD;",
      "right" : "off += WORD;",
      "info" : "ExpressionStatement[9669-9681]:ExpressionStatement[9730-9742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9697-9737]:Block[9758-9798]"
    }, {
      "left" : "off += 3 * WORD;",
      "right" : "off += 3 * WORD;",
      "info" : "ExpressionStatement[9711-9727]:ExpressionStatement[9772-9788]"
    }, {
      "left" : "int fileNameLen = ZipShort.getValue(LFH_BUF, off);",
      "right" : "int fileNameLen = ZipShort.getValue(LFH_BUF, off);",
      "info" : "VariableDeclarationStatement[9747-9797]:VariableDeclarationStatement[9808-9858]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[9807-9820]:ExpressionStatement[9868-9881]"
    }, {
      "left" : "int extraLen = ZipShort.getValue(LFH_BUF, off);",
      "right" : "int extraLen = ZipShort.getValue(LFH_BUF, off);",
      "info" : "VariableDeclarationStatement[9830-9877]:VariableDeclarationStatement[9891-9938]"
    }, {
      "left" : "off += SHORT;",
      "right" : "off += SHORT;",
      "info" : "ExpressionStatement[9886-9899]:ExpressionStatement[9947-9960]"
    }, {
      "left" : "byte[] fileName = new byte[fileNameLen];",
      "right" : "byte[] fileName = new byte[fileNameLen];",
      "info" : "VariableDeclarationStatement[9909-9949]:VariableDeclarationStatement[9970-10010]"
    }, {
      "left" : "readFully(fileName);",
      "right" : "readFully(fileName);",
      "info" : "ExpressionStatement[9958-9978]:ExpressionStatement[10019-10039]"
    }, {
      "left" : "current.entry.setName(entryEncoding.decode(fileName), fileName);",
      "right" : "current.entry.setName(entryEncoding.decode(fileName), fileName);",
      "info" : "ExpressionStatement[9987-10051]:ExpressionStatement[10048-10112]"
    }, {
      "left" : "byte[] extraData = new byte[extraLen];",
      "right" : "byte[] extraData = new byte[extraLen];",
      "info" : "VariableDeclarationStatement[10061-10099]:VariableDeclarationStatement[10122-10160]"
    }, {
      "left" : "readFully(extraData);",
      "right" : "readFully(extraData);",
      "info" : "ExpressionStatement[10108-10129]:ExpressionStatement[10169-10190]"
    }, {
      "left" : "current.entry.setExtra(extraData);",
      "right" : "current.entry.setExtra(extraData);",
      "info" : "ExpressionStatement[10138-10172]:ExpressionStatement[10199-10233]"
    }, {
      "left" : "if (!hasUTF8Flag && useUnicodeExtraFields)",
      "right" : "if (!hasUTF8Flag && useUnicodeExtraFields)",
      "info" : "IfStatement[10182-10321]:IfStatement[10243-10382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10225-10321]:Block[10286-10382]"
    }, {
      "left" : "ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);",
      "right" : "ZipUtil.setNameAndCommentFromExtraFields(current.entry, fileName, null);",
      "info" : "ExpressionStatement[10239-10311]:ExpressionStatement[10300-10372]"
    }, {
      "left" : "processZip64Extra(size, cSize);",
      "right" : "processZip64Extra(size, cSize);",
      "info" : "ExpressionStatement[10331-10362]:ExpressionStatement[10392-10423]"
    }, {
      "left" : "if (current.entry.getCompressedSize() != ZipArchiveEntry.SIZE_UNKNOWN)",
      "right" : "if (current.entry.getCompressedSize() != ZipArchiveEntry.SIZE_UNKNOWN)",
      "info" : "IfStatement[10372-11077]:IfStatement[10433-11138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10443-11077]:Block[10504-11138]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode())",
      "right" : "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode())",
      "info" : "IfStatement[10457-11067]:IfStatement[10518-11128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10523-10658]:Block[10584-10719]"
    }, {
      "left" : "current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));",
      "right" : "current.in = new UnshrinkingInputStream(new BoundedInputStream(in, current.entry.getCompressedSize()));",
      "info" : "ExpressionStatement[10541-10644]:ExpressionStatement[10602-10705]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode())",
      "right" : "if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode())",
      "info" : "IfStatement[10664-11067]:IfStatement[10725-11128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10728-11067]:Block[10789-11128]"
    }, {
      "left" : "current.in = new ExplodingInputStream(\n                        current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),\n                        current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),\n                        new BoundedInputStream(in, current.entry.getCompressedSize()));",
      "right" : "current.in = new ExplodingInputStream(\n                        current.entry.getGeneralPurposeBit().getSlidingDictionarySize(),\n                        current.entry.getGeneralPurposeBit().getNumberOfShannonFanoTrees(),\n                        new BoundedInputStream(in, current.entry.getCompressedSize()));",
      "info" : "ExpressionStatement[10746-11053]:ExpressionStatement[10807-11114]"
    }, {
      "left" : "entriesRead++;",
      "right" : "entriesRead++;",
      "info" : "ExpressionStatement[11095-11109]:ExpressionStatement[11156-11170]"
    }, {
      "left" : "return current.entry;",
      "right" : "return current.entry;",
      "info" : "ReturnStatement[11118-11139]:ReturnStatement[11179-11200]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11316-11323]:Modifier[11377-11384]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11324-11328]:PrimitiveType[11385-11389]"
    }, {
      "left" : "readFirstLocalFileHeader",
      "right" : "readFirstLocalFileHeader",
      "info" : "SimpleName[11329-11353]:SimpleName[11390-11414]"
    }, {
      "left" : "byte[] lfh",
      "right" : "byte[] lfh",
      "info" : "SingleVariableDeclaration[11354-11364]:SingleVariableDeclaration[11415-11425]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11373-11384]:SimpleType[11434-11445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11385-12036]:Block[11446-12097]"
    }, {
      "left" : "readFully(lfh);",
      "right" : "readFully(lfh);",
      "info" : "ExpressionStatement[11395-11410]:ExpressionStatement[11456-11471]"
    }, {
      "left" : "ZipLong sig = new ZipLong(lfh);",
      "right" : "ZipLong sig = new ZipLong(lfh);",
      "info" : "VariableDeclarationStatement[11419-11450]:VariableDeclarationStatement[11480-11511]"
    }, {
      "left" : "if (sig.equals(ZipLong.DD_SIG))",
      "right" : "if (sig.equals(ZipLong.DD_SIG))",
      "info" : "IfStatement[11459-11606]:IfStatement[11520-11667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11491-11606]:Block[11552-11667]"
    }, {
      "left" : "throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.SPLITTING);",
      "right" : "throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.SPLITTING);",
      "info" : "ThrowStatement[11505-11596]:ThrowStatement[11566-11657]"
    }, {
      "left" : "if (sig.equals(ZipLong.SINGLE_SEGMENT_SPLIT_MARKER))",
      "right" : "if (sig.equals(ZipLong.SINGLE_SEGMENT_SPLIT_MARKER))",
      "info" : "IfStatement[11616-12030]:IfStatement[11677-12091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11669-12030]:Block[11730-12091]"
    }, {
      "left" : "byte[] missedLfhBytes = new byte[4];",
      "right" : "byte[] missedLfhBytes = new byte[4];",
      "info" : "VariableDeclarationStatement[11816-11852]:VariableDeclarationStatement[11877-11913]"
    }, {
      "left" : "readFully(missedLfhBytes);",
      "right" : "readFully(missedLfhBytes);",
      "info" : "ExpressionStatement[11865-11891]:ExpressionStatement[11926-11952]"
    }, {
      "left" : "System.arraycopy(lfh, 4, lfh, 0, LFH_LEN - 4);",
      "right" : "System.arraycopy(lfh, 4, lfh, 0, LFH_LEN - 4);",
      "info" : "ExpressionStatement[11904-11950]:ExpressionStatement[11965-12011]"
    }, {
      "left" : "System.arraycopy(missedLfhBytes, 0, lfh, LFH_LEN - 4, 4);",
      "right" : "System.arraycopy(missedLfhBytes, 0, lfh, LFH_LEN - 4, 4);",
      "info" : "ExpressionStatement[11963-12020]:ExpressionStatement[12024-12081]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12227-12234]:Modifier[12288-12295]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12235-12239]:PrimitiveType[12296-12300]"
    }, {
      "left" : "processZip64Extra",
      "right" : "processZip64Extra",
      "info" : "SimpleName[12240-12257]:SimpleName[12301-12318]"
    }, {
      "left" : "ZipLong size",
      "right" : "ZipLong size",
      "info" : "SingleVariableDeclaration[12258-12270]:SingleVariableDeclaration[12319-12331]"
    }, {
      "left" : "ZipLong cSize",
      "right" : "ZipLong cSize",
      "info" : "SingleVariableDeclaration[12272-12285]:SingleVariableDeclaration[12333-12346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12287-13068]:Block[12348-13129]"
    }, {
      "left" : "Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField) \n            current.entry.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);",
      "right" : "Zip64ExtendedInformationExtraField z64 =\n            (Zip64ExtendedInformationExtraField) \n            current.entry.getExtraField(Zip64ExtendedInformationExtraField.HEADER_ID);",
      "info" : "VariableDeclarationStatement[12297-12474]:VariableDeclarationStatement[12358-12535]"
    }, {
      "left" : "current.usesZip64 = z64 != null;",
      "right" : "current.usesZip64 = z64 != null;",
      "info" : "ExpressionStatement[12483-12515]:ExpressionStatement[12544-12576]"
    }, {
      "left" : "if (!current.hasDataDescriptor)",
      "right" : "if (!current.hasDataDescriptor)",
      "info" : "IfStatement[12524-13062]:IfStatement[12585-13123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12556-13062]:Block[12617-13123]"
    }, {
      "left" : "if (z64 != null // same as current.usesZip64 but avoids NPE warning\n                    && (cSize.equals(ZipLong.ZIP64_MAGIC) || size.equals(ZipLong.ZIP64_MAGIC)))",
      "right" : "if (z64 != null // same as current.usesZip64 but avoids NPE warning\n                    && (cSize.equals(ZipLong.ZIP64_MAGIC) || size.equals(ZipLong.ZIP64_MAGIC)))",
      "info" : "IfStatement[12570-13052]:IfStatement[12631-13113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12735-12908]:Block[12796-12969]"
    }, {
      "left" : "current.entry.setCompressedSize(z64.getCompressedSize().getLongValue());",
      "right" : "current.entry.setCompressedSize(z64.getCompressedSize().getLongValue());",
      "info" : "ExpressionStatement[12753-12825]:ExpressionStatement[12814-12886]"
    }, {
      "left" : "current.entry.setSize(z64.getSize().getLongValue());",
      "right" : "current.entry.setSize(z64.getSize().getLongValue());",
      "info" : "ExpressionStatement[12842-12894]:ExpressionStatement[12903-12955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12914-13052]:Block[12975-13113]"
    }, {
      "left" : "current.entry.setCompressedSize(cSize.getValue());",
      "right" : "current.entry.setCompressedSize(cSize.getValue());",
      "info" : "ExpressionStatement[12932-12982]:ExpressionStatement[12993-13043]"
    }, {
      "left" : "current.entry.setSize(size.getValue());",
      "right" : "current.entry.setSize(size.getValue());",
      "info" : "ExpressionStatement[12999-13038]:ExpressionStatement[13060-13099]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13074-13083]:MarkerAnnotation[13135-13144]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13088-13094]:Modifier[13149-13155]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[13095-13107]:SimpleType[13156-13168]"
    }, {
      "left" : "getNextEntry",
      "right" : "getNextEntry",
      "info" : "SimpleName[13108-13120]:SimpleName[13169-13181]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13130-13141]:SimpleType[13191-13202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13142-13183]:Block[13203-13244]"
    }, {
      "left" : "return getNextZipEntry();",
      "right" : "return getNextZipEntry();",
      "info" : "ReturnStatement[13152-13177]:ReturnStatement[13213-13238]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13419-13428]:MarkerAnnotation[13480-13489]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13433-13439]:Modifier[13494-13500]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13440-13447]:PrimitiveType[13501-13508]"
    }, {
      "left" : "canReadEntryData",
      "right" : "canReadEntryData",
      "info" : "SimpleName[13448-13464]:SimpleName[13509-13525]"
    }, {
      "left" : "ArchiveEntry ae",
      "right" : "ArchiveEntry ae",
      "info" : "SingleVariableDeclaration[13465-13480]:SingleVariableDeclaration[13526-13541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13482-13722]:Block[13543-13783]"
    }, {
      "left" : "if (ae instanceof ZipArchiveEntry)",
      "right" : "if (ae instanceof ZipArchiveEntry)",
      "info" : "IfStatement[13492-13694]:IfStatement[13553-13755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13527-13694]:Block[13588-13755]"
    }, {
      "left" : "ZipArchiveEntry ze = (ZipArchiveEntry) ae;",
      "right" : "ZipArchiveEntry ze = (ZipArchiveEntry) ae;",
      "info" : "VariableDeclarationStatement[13541-13583]:VariableDeclarationStatement[13602-13644]"
    }, {
      "left" : "return ZipUtil.canHandleEntryData(ze)\n                && supportsDataDescriptorFor(ze);",
      "right" : "return ZipUtil.canHandleEntryData(ze)\n                && supportsDataDescriptorFor(ze);",
      "info" : "ReturnStatement[13596-13683]:ReturnStatement[13657-13744]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13703-13716]:ReturnStatement[13764-13777]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13728-13737]:MarkerAnnotation[13789-13798]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13742-13748]:Modifier[13803-13809]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[13749-13752]:PrimitiveType[13810-13813]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[13753-13757]:SimpleName[13814-13818]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[13758-13771]:SingleVariableDeclaration[13819-13832]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[13773-13783]:SingleVariableDeclaration[13834-13844]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[13785-13795]:SingleVariableDeclaration[13846-13856]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13804-13815]:SimpleType[13865-13876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13816-15279]:Block[13877-15340]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[13826-13908]:IfStatement[13887-13969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13838-13908]:Block[13899-13969]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[13852-13898]:ThrowStatement[13913-13959]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[13918-13973]:IfStatement[13979-14034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13939-13973]:Block[14000-14034]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[13953-13963]:ReturnStatement[14014-14024]"
    }, {
      "left" : "if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length)",
      "right" : "if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length)",
      "info" : "IfStatement[14032-14190]:IfStatement[14093-14251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14123-14190]:Block[14184-14251]"
    }, {
      "left" : "throw new ArrayIndexOutOfBoundsException();",
      "right" : "throw new ArrayIndexOutOfBoundsException();",
      "info" : "ThrowStatement[14137-14180]:ThrowStatement[14198-14241]"
    }, {
      "left" : "ZipUtil.checkRequestedFeatures(current.entry);",
      "right" : "ZipUtil.checkRequestedFeatures(current.entry);",
      "info" : "ExpressionStatement[14208-14254]:ExpressionStatement[14269-14315]"
    }, {
      "left" : "if (!supportsDataDescriptorFor(current.entry))",
      "right" : "if (!supportsDataDescriptorFor(current.entry))",
      "info" : "IfStatement[14263-14466]:IfStatement[14324-14527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14310-14466]:Block[14371-14527]"
    }, {
      "left" : "throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,\n                    current.entry);",
      "right" : "throw new UnsupportedZipFeatureException(UnsupportedZipFeatureException.Feature.DATA_DESCRIPTOR,\n                    current.entry);",
      "info" : "ThrowStatement[14324-14456]:ThrowStatement[14385-14517]"
    }, {
      "left" : "int read;",
      "right" : "int read;",
      "info" : "VariableDeclarationStatement[14476-14485]:VariableDeclarationStatement[14537-14546]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipArchiveOutputStream.STORED)",
      "right" : "if (current.entry.getMethod() == ZipArchiveOutputStream.STORED)",
      "info" : "IfStatement[14494-15145]:IfStatement[14555-15206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14558-14624]:Block[14619-14685]"
    }, {
      "left" : "read = readStored(buffer, offset, length);",
      "right" : "read = readStored(buffer, offset, length);",
      "info" : "ExpressionStatement[14572-14614]:ExpressionStatement[14633-14675]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED)",
      "right" : "if (current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED)",
      "info" : "IfStatement[14630-15145]:IfStatement[14691-15206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14696-14764]:Block[14757-14825]"
    }, {
      "left" : "read = readDeflated(buffer, offset, length);",
      "right" : "read = readDeflated(buffer, offset, length);",
      "info" : "ExpressionStatement[14710-14754]:ExpressionStatement[14771-14815]"
    }, {
      "left" : "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()\n                || current.entry.getMethod() == ZipMethod.IMPLODING.getCode())",
      "right" : "if (current.entry.getMethod() == ZipMethod.UNSHRINKING.getCode()\n                || current.entry.getMethod() == ZipMethod.IMPLODING.getCode())",
      "info" : "IfStatement[14770-15145]:IfStatement[14831-15206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14914-14985]:Block[14975-15046]"
    }, {
      "left" : "read = current.in.read(buffer, offset, length);",
      "right" : "read = current.in.read(buffer, offset, length);",
      "info" : "ExpressionStatement[14928-14975]:ExpressionStatement[14989-15036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14991-15145]:Block[15052-15206]"
    }, {
      "left" : "throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),\n                    current.entry);",
      "right" : "throw new UnsupportedZipFeatureException(ZipMethod.getMethodByCode(current.entry.getMethod()),\n                    current.entry);",
      "info" : "ThrowStatement[15005-15135]:ThrowStatement[15066-15196]"
    }, {
      "left" : "if (read >= 0)",
      "right" : "if (read >= 0)",
      "info" : "IfStatement[15163-15243]:IfStatement[15224-15304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15178-15243]:Block[15239-15304]"
    }, {
      "left" : "current.crc.update(buffer, offset, read);",
      "right" : "current.crc.update(buffer, offset, read);",
      "info" : "ExpressionStatement[15192-15233]:ExpressionStatement[15253-15294]"
    }, {
      "left" : "return read;",
      "right" : "return read;",
      "info" : "ReturnStatement[15261-15273]:ReturnStatement[15322-15334]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15351-15358]:Modifier[15412-15419]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15359-15362]:PrimitiveType[15420-15423]"
    }, {
      "left" : "readStored",
      "right" : "readStored",
      "info" : "SimpleName[15363-15373]:SimpleName[15424-15434]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[15374-15387]:SingleVariableDeclaration[15435-15448]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[15389-15399]:SingleVariableDeclaration[15450-15460]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[15401-15411]:SingleVariableDeclaration[15462-15472]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15420-15431]:SimpleType[15481-15492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15432-16405]:Block[15493-16466]"
    }, {
      "left" : "if (current.hasDataDescriptor)",
      "right" : "if (current.hasDataDescriptor)",
      "info" : "IfStatement[15443-15642]:IfStatement[15504-15703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15474-15642]:Block[15535-15703]"
    }, {
      "left" : "if (lastStoredEntry == null)",
      "right" : "if (lastStoredEntry == null)",
      "info" : "IfStatement[15488-15567]:IfStatement[15549-15628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15517-15567]:Block[15578-15628]"
    }, {
      "left" : "readStoredEntry();",
      "right" : "readStoredEntry();",
      "info" : "ExpressionStatement[15535-15553]:ExpressionStatement[15596-15614]"
    }, {
      "left" : "return lastStoredEntry.read(buffer, offset, length);",
      "right" : "return lastStoredEntry.read(buffer, offset, length);",
      "info" : "ReturnStatement[15580-15632]:ReturnStatement[15641-15693]"
    }, {
      "left" : "long csize = current.entry.getSize();",
      "right" : "long csize = current.entry.getSize();",
      "info" : "VariableDeclarationStatement[15652-15689]:VariableDeclarationStatement[15713-15750]"
    }, {
      "left" : "if (current.bytesRead >= csize)",
      "right" : "if (current.bytesRead >= csize)",
      "info" : "IfStatement[15698-15764]:IfStatement[15759-15825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15730-15764]:Block[15791-15825]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[15744-15754]:ReturnStatement[15805-15815]"
    }, {
      "left" : "if (buf.position() >= buf.limit())",
      "right" : "if (buf.position() >= buf.limit())",
      "info" : "IfStatement[15774-16054]:IfStatement[15835-16115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15809-16054]:Block[15870-16115]"
    }, {
      "left" : "buf.position(0);",
      "right" : "buf.position(0);",
      "info" : "ExpressionStatement[15823-15839]:ExpressionStatement[15884-15900]"
    }, {
      "left" : "int l = in.read(buf.array());",
      "right" : "int l = in.read(buf.array());",
      "info" : "VariableDeclarationStatement[15852-15881]:VariableDeclarationStatement[15913-15942]"
    }, {
      "left" : "if (l == -1)",
      "right" : "if (l == -1)",
      "info" : "IfStatement[15894-15949]:IfStatement[15955-16010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15907-15949]:Block[15968-16010]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[15925-15935]:ReturnStatement[15986-15996]"
    }, {
      "left" : "buf.limit(l);",
      "right" : "buf.limit(l);",
      "info" : "ExpressionStatement[15962-15975]:ExpressionStatement[16023-16036]"
    }, {
      "left" : "count(l);",
      "right" : "count(l);",
      "info" : "ExpressionStatement[15989-15998]:ExpressionStatement[16050-16059]"
    }, {
      "left" : "current.bytesReadFromStream += l;",
      "right" : "current.bytesReadFromStream += l;",
      "info" : "ExpressionStatement[16011-16044]:ExpressionStatement[16072-16105]"
    }, {
      "left" : "int toRead = Math.min(buf.remaining(), length);",
      "right" : "int toRead = Math.min(buf.remaining(), length);",
      "info" : "VariableDeclarationStatement[16064-16111]:VariableDeclarationStatement[16125-16172]"
    }, {
      "left" : "if ((csize - current.bytesRead) < toRead)",
      "right" : "if ((csize - current.bytesRead) < toRead)",
      "info" : "IfStatement[16120-16298]:IfStatement[16181-16359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16162-16298]:Block[16223-16359]"
    }, {
      "left" : "toRead = (int) (csize - current.bytesRead);",
      "right" : "toRead = (int) (csize - current.bytesRead);",
      "info" : "ExpressionStatement[16245-16288]:ExpressionStatement[16306-16349]"
    }, {
      "left" : "buf.get(buffer, offset, toRead);",
      "right" : "buf.get(buffer, offset, toRead);",
      "info" : "ExpressionStatement[16307-16339]:ExpressionStatement[16368-16400]"
    }, {
      "left" : "current.bytesRead += toRead;",
      "right" : "current.bytesRead += toRead;",
      "info" : "ExpressionStatement[16348-16376]:ExpressionStatement[16409-16437]"
    }, {
      "left" : "return toRead;",
      "right" : "return toRead;",
      "info" : "ReturnStatement[16385-16399]:ReturnStatement[16446-16460]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16479-16486]:Modifier[16540-16547]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[16487-16490]:PrimitiveType[16548-16551]"
    }, {
      "left" : "readDeflated",
      "right" : "readDeflated",
      "info" : "SimpleName[16491-16503]:SimpleName[16552-16564]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[16504-16517]:SingleVariableDeclaration[16565-16578]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[16519-16529]:SingleVariableDeclaration[16580-16590]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[16531-16541]:SingleVariableDeclaration[16592-16602]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16550-16561]:SimpleType[16611-16622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16562-17121]:Block[16623-17182]"
    }, {
      "left" : "int read = readFromInflater(buffer, offset, length);",
      "right" : "int read = readFromInflater(buffer, offset, length);",
      "info" : "VariableDeclarationStatement[16572-16624]:VariableDeclarationStatement[16633-16685]"
    }, {
      "left" : "if (read <= 0)",
      "right" : "if (read <= 0)",
      "info" : "IfStatement[16633-17094]:IfStatement[16694-17155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16648-17094]:Block[16709-17155]"
    }, {
      "left" : "if (inf.finished())",
      "right" : "if (inf.finished())",
      "info" : "IfStatement[16662-17084]:IfStatement[16723-17145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16682-16724]:Block[16743-16785]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[16700-16710]:ReturnStatement[16761-16771]"
    }, {
      "left" : "if (inf.needsDictionary())",
      "right" : "if (inf.needsDictionary())",
      "info" : "IfStatement[16730-17084]:IfStatement[16791-17145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16757-16986]:Block[16818-17047]"
    }, {
      "left" : "throw new ZipException(\"This archive needs a preset dictionary\"\n                                       + \" which is not supported by Commons\"\n                                       + \" Compress.\");",
      "right" : "throw new ZipException(\"This archive needs a preset dictionary\"\n                                       + \" which is not supported by Commons\"\n                                       + \" Compress.\");",
      "info" : "ThrowStatement[16775-16972]:ThrowStatement[16836-17033]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[16992-17084]:IfStatement[17053-17145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17008-17084]:Block[17069-17145]"
    }, {
      "left" : "throw new IOException(\"Truncated ZIP file\");",
      "right" : "throw new IOException(\"Truncated ZIP file\");",
      "info" : "ThrowStatement[17026-17070]:ThrowStatement[17087-17131]"
    }, {
      "left" : "return read;",
      "right" : "return read;",
      "info" : "ReturnStatement[17103-17115]:ReturnStatement[17164-17176]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17235-17242]:Modifier[17296-17303]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17243-17246]:PrimitiveType[17304-17307]"
    }, {
      "left" : "readFromInflater",
      "right" : "readFromInflater",
      "info" : "SimpleName[17247-17263]:SimpleName[17308-17324]"
    }, {
      "left" : "byte[] buffer",
      "right" : "byte[] buffer",
      "info" : "SingleVariableDeclaration[17264-17277]:SingleVariableDeclaration[17325-17338]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[17279-17289]:SingleVariableDeclaration[17340-17350]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[17291-17301]:SingleVariableDeclaration[17352-17362]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17310-17321]:SimpleType[17371-17382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17322-17969]:Block[17383-18030]"
    }, {
      "left" : "int read = 0;",
      "right" : "int read = 0;",
      "info" : "VariableDeclarationStatement[17332-17345]:VariableDeclarationStatement[17393-17406]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[17354-17942]:DoStatement[17415-18003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17357-17903]:Block[17418-17964]"
    }, {
      "left" : "if (inf.needsInput())",
      "right" : "if (inf.needsInput())",
      "info" : "IfStatement[17371-17672]:IfStatement[17432-17733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17393-17672]:Block[17454-17733]"
    }, {
      "left" : "int l = fill();",
      "right" : "int l = fill();",
      "info" : "VariableDeclarationStatement[17411-17426]:VariableDeclarationStatement[17472-17487]"
    }, {
      "left" : "if (l > 0)",
      "right" : "if (l > 0)",
      "info" : "IfStatement[17443-17658]:IfStatement[17504-17719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17454-17537]:Block[17515-17598]"
    }, {
      "left" : "current.bytesReadFromStream += buf.limit();",
      "right" : "current.bytesReadFromStream += buf.limit();",
      "info" : "ExpressionStatement[17476-17519]:ExpressionStatement[17537-17580]"
    }, {
      "left" : "if (l == -1)",
      "right" : "if (l == -1)",
      "info" : "IfStatement[17543-17658]:IfStatement[17604-17719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17556-17606]:Block[17617-17667]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[17578-17588]:ReturnStatement[17639-17649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17612-17658]:Block[17673-17719]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17634-17640]:BreakStatement[17695-17701]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17685-17893]:TryStatement[17746-17954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17689-17764]:Block[17750-17825]"
    }, {
      "left" : "read = inf.inflate(buffer, offset, length);",
      "right" : "read = inf.inflate(buffer, offset, length);",
      "info" : "ExpressionStatement[17707-17750]:ExpressionStatement[17768-17811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17795-17893]:Block[17856-17954]"
    }, {
      "left" : "throw (IOException) new ZipException(e.getMessage()).initCause(e);",
      "right" : "throw (IOException) new ZipException(e.getMessage()).initCause(e);",
      "info" : "ThrowStatement[17813-17879]:ThrowStatement[17874-17940]"
    }, {
      "left" : "return read;",
      "right" : "return read;",
      "info" : "ReturnStatement[17951-17963]:ReturnStatement[18012-18024]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[17975-17984]:MarkerAnnotation[18036-18045]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17989-17995]:Modifier[18050-18056]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17996-18000]:PrimitiveType[18057-18061]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[18001-18006]:SimpleName[18062-18067]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18016-18027]:SimpleType[18077-18088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18028-18142]:Block[18089-18203]"
    }, {
      "left" : "if (!closed)",
      "right" : "if (!closed)",
      "info" : "IfStatement[18038-18136]:IfStatement[18099-18197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18051-18136]:Block[18112-18197]"
    }, {
      "left" : "closed = true;",
      "right" : "closed = true;",
      "info" : "ExpressionStatement[18065-18079]:ExpressionStatement[18126-18140]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[18092-18103]:ExpressionStatement[18153-18164]"
    }, {
      "left" : "inf.end();",
      "right" : "inf.end();",
      "info" : "ExpressionStatement[18116-18126]:ExpressionStatement[18177-18187]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18727-18736]:MarkerAnnotation[18788-18797]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18741-18747]:Modifier[18802-18808]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[18748-18752]:PrimitiveType[18809-18813]"
    }, {
      "left" : "skip",
      "right" : "skip",
      "info" : "SimpleName[18753-18757]:SimpleName[18814-18818]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[18758-18768]:SingleVariableDeclaration[18819-18829]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18777-18788]:SimpleType[18838-18849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18789-19245]:Block[18850-19306]"
    }, {
      "left" : "if (value >= 0)",
      "right" : "if (value >= 0)",
      "info" : "IfStatement[18799-19193]:IfStatement[18860-19254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18815-19193]:Block[18876-19254]"
    }, {
      "left" : "long skipped = 0;",
      "right" : "long skipped = 0;",
      "info" : "VariableDeclarationStatement[18829-18846]:VariableDeclarationStatement[18890-18907]"
    }, {
      "left" : "while (skipped < value)",
      "right" : "while (skipped < value)",
      "info" : "WhileStatement[18859-19155]:WhileStatement[18920-19216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18883-19155]:Block[18944-19216]"
    }, {
      "left" : "long rem = value - skipped;",
      "right" : "long rem = value - skipped;",
      "info" : "VariableDeclarationStatement[18901-18928]:VariableDeclarationStatement[18962-18989]"
    }, {
      "left" : "int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));",
      "right" : "int x = read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));",
      "info" : "VariableDeclarationStatement[18945-19026]:VariableDeclarationStatement[19006-19087]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[19043-19111]:IfStatement[19104-19172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19056-19111]:Block[19117-19172]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[19078-19093]:ReturnStatement[19139-19154]"
    }, {
      "left" : "skipped += x;",
      "right" : "skipped += x;",
      "info" : "ExpressionStatement[19128-19141]:ExpressionStatement[19189-19202]"
    }, {
      "left" : "return skipped;",
      "right" : "return skipped;",
      "info" : "ReturnStatement[19168-19183]:ReturnStatement[19229-19244]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[19202-19239]:ThrowStatement[19263-19300]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19622-19628]:Modifier[19683-19689]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[19629-19635]:Modifier[19690-19696]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19636-19643]:PrimitiveType[19697-19704]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[19644-19651]:SimpleName[19705-19712]"
    }, {
      "left" : "byte[] signature",
      "right" : "byte[] signature",
      "info" : "SingleVariableDeclaration[19652-19668]:SingleVariableDeclaration[19713-19729]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[19670-19680]:SingleVariableDeclaration[19731-19741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19682-20114]:Block[19743-20175]"
    }, {
      "left" : "if (length < ZipArchiveOutputStream.LFH_SIG.length)",
      "right" : "if (length < ZipArchiveOutputStream.LFH_SIG.length)",
      "info" : "IfStatement[19692-19781]:IfStatement[19753-19842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19744-19781]:Block[19805-19842]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19758-19771]:ReturnStatement[19819-19832]"
    }, {
      "left" : "return checksig(signature, ZipArchiveOutputStream.LFH_SIG) // normal file\n            || checksig(signature, ZipArchiveOutputStream.EOCD_SIG) // empty zip\n            || checksig(signature, ZipArchiveOutputStream.DD_SIG) // split zip\n            || checksig(signature, ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes());",
      "right" : "return checksig(signature, ZipArchiveOutputStream.LFH_SIG) // normal file\n            || checksig(signature, ZipArchiveOutputStream.EOCD_SIG) // empty zip\n            || checksig(signature, ZipArchiveOutputStream.DD_SIG) // split zip\n            || checksig(signature, ZipLong.SINGLE_SEGMENT_SPLIT_MARKER.getBytes());",
      "info" : "ReturnStatement[19791-20108]:ReturnStatement[19852-20169]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20120-20127]:Modifier[20181-20188]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20128-20134]:Modifier[20189-20195]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[20135-20142]:PrimitiveType[20196-20203]"
    }, {
      "left" : "checksig",
      "right" : "checksig",
      "info" : "SimpleName[20143-20151]:SimpleName[20204-20212]"
    }, {
      "left" : "byte[] signature",
      "right" : "byte[] signature",
      "info" : "SingleVariableDeclaration[20152-20168]:SingleVariableDeclaration[20213-20229]"
    }, {
      "left" : "byte[] expected",
      "right" : "byte[] expected",
      "info" : "SingleVariableDeclaration[20170-20185]:SingleVariableDeclaration[20231-20246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20187-20368]:Block[20248-20429]"
    }, {
      "left" : "for (int i = 0; i < expected.length; i++)",
      "right" : "for (int i = 0; i < expected.length; i++)",
      "info" : "ForStatement[20197-20341]:ForStatement[20258-20402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20239-20341]:Block[20300-20402]"
    }, {
      "left" : "if (signature[i] != expected[i])",
      "right" : "if (signature[i] != expected[i])",
      "info" : "IfStatement[20253-20331]:IfStatement[20314-20392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20286-20331]:Block[20347-20392]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20304-20317]:ReturnStatement[20365-20378]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20350-20362]:ReturnStatement[20411-20423]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21250-21257]:Modifier[21311-21318]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21258-21262]:PrimitiveType[21319-21323]"
    }, {
      "left" : "closeEntry",
      "right" : "closeEntry",
      "info" : "SimpleName[21263-21273]:SimpleName[21324-21334]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21283-21294]:SimpleType[21344-21355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21295-22415]:Block[21356-22476]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[21305-21387]:IfStatement[21366-21448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21317-21387]:Block[21378-21448]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[21331-21377]:ThrowStatement[21392-21438]"
    }, {
      "left" : "if (current == null)",
      "right" : "if (current == null)",
      "info" : "IfStatement[21396-21448]:IfStatement[21457-21509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21417-21448]:Block[21478-21509]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[21431-21438]:ReturnStatement[21492-21499]"
    }, {
      "left" : "if (current.bytesReadFromStream <= current.entry.getCompressedSize()\n                && !current.hasDataDescriptor)",
      "right" : "if (current.bytesReadFromStream <= current.entry.getCompressedSize()\n                && !current.hasDataDescriptor)",
      "info" : "IfStatement[21501-22190]:IfStatement[21562-22251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21617-21665]:Block[21678-21726]"
    }, {
      "left" : "drainCurrentEntryData();",
      "right" : "drainCurrentEntryData();",
      "info" : "ExpressionStatement[21631-21655]:ExpressionStatement[21692-21716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21671-22190]:Block[21732-22251]"
    }, {
      "left" : "skip(Long.MAX_VALUE);",
      "right" : "skip(Long.MAX_VALUE);",
      "info" : "ExpressionStatement[21685-21706]:ExpressionStatement[21746-21767]"
    }, {
      "left" : "long inB = current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED\n                       ? getBytesInflated() : current.bytesRead;",
      "right" : "long inB = current.entry.getMethod() == ZipArchiveOutputStream.DEFLATED\n                       ? getBytesInflated() : current.bytesRead;",
      "info" : "VariableDeclarationStatement[21720-21856]:VariableDeclarationStatement[21781-21917]"
    }, {
      "left" : "int diff = (int) (current.bytesReadFromStream - inB);",
      "right" : "int diff = (int) (current.bytesReadFromStream - inB);",
      "info" : "VariableDeclarationStatement[21976-22029]:VariableDeclarationStatement[22037-22090]"
    }, {
      "left" : "if (diff > 0)",
      "right" : "if (diff > 0)",
      "info" : "IfStatement[22086-22180]:IfStatement[22147-22241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22100-22180]:Block[22161-22241]"
    }, {
      "left" : "pushback(buf.array(), buf.limit() - diff, diff);",
      "right" : "pushback(buf.array(), buf.limit() - diff, diff);",
      "info" : "ExpressionStatement[22118-22166]:ExpressionStatement[22179-22227]"
    }, {
      "left" : "if (lastStoredEntry == null && current.hasDataDescriptor)",
      "right" : "if (lastStoredEntry == null && current.hasDataDescriptor)",
      "info" : "IfStatement[22200-22303]:IfStatement[22261-22364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22258-22303]:Block[22319-22364]"
    }, {
      "left" : "readDataDescriptor();",
      "right" : "readDataDescriptor();",
      "info" : "ExpressionStatement[22272-22293]:ExpressionStatement[22333-22354]"
    }, {
      "left" : "inf.reset();",
      "right" : "inf.reset();",
      "info" : "ExpressionStatement[22313-22325]:ExpressionStatement[22374-22386]"
    }, {
      "left" : "buf.clear().flip();",
      "right" : "buf.clear().flip();",
      "info" : "ExpressionStatement[22334-22353]:ExpressionStatement[22395-22414]"
    }, {
      "left" : "current = null;",
      "right" : "current = null;",
      "info" : "ExpressionStatement[22362-22377]:ExpressionStatement[22423-22438]"
    }, {
      "left" : "lastStoredEntry = null;",
      "right" : "lastStoredEntry = null;",
      "info" : "ExpressionStatement[22386-22409]:ExpressionStatement[22447-22470]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22541-22548]:Modifier[22602-22609]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22549-22553]:PrimitiveType[22610-22614]"
    }, {
      "left" : "drainCurrentEntryData",
      "right" : "drainCurrentEntryData",
      "info" : "SimpleName[22554-22575]:SimpleName[22615-22636]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22585-22596]:SimpleType[22646-22657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22597-23034]:Block[22658-23095]"
    }, {
      "left" : "long remaining = current.entry.getCompressedSize() - current.bytesReadFromStream;",
      "right" : "long remaining = current.entry.getCompressedSize() - current.bytesReadFromStream;",
      "info" : "VariableDeclarationStatement[22607-22688]:VariableDeclarationStatement[22668-22749]"
    }, {
      "left" : "while (remaining > 0)",
      "right" : "while (remaining > 0)",
      "info" : "WhileStatement[22697-23028]:WhileStatement[22758-23089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22719-23028]:Block[22780-23089]"
    }, {
      "left" : "long n = in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));",
      "right" : "long n = in.read(buf.array(), 0, (int) Math.min(buf.capacity(), remaining));",
      "info" : "VariableDeclarationStatement[22733-22809]:VariableDeclarationStatement[22794-22870]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[22822-23018]:IfStatement[22883-23079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22833-22939]:Block[22894-23000]"
    }, {
      "left" : "throw new EOFException(\"Truncated ZIP entry: \" + current.entry.getName());",
      "right" : "throw new EOFException(\"Truncated ZIP entry: \" + current.entry.getName());",
      "info" : "ThrowStatement[22851-22925]:ThrowStatement[22912-22986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22945-23018]:Block[23006-23079]"
    }, {
      "left" : "count(n);",
      "right" : "count(n);",
      "info" : "ExpressionStatement[22963-22972]:ExpressionStatement[23024-23033]"
    }, {
      "left" : "remaining -= n;",
      "right" : "remaining -= n;",
      "info" : "ExpressionStatement[22989-23004]:ExpressionStatement[23050-23065]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23782-23789]:Modifier[23843-23850]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[23790-23794]:PrimitiveType[23851-23855]"
    }, {
      "left" : "getBytesInflated",
      "right" : "getBytesInflated",
      "info" : "SimpleName[23795-23811]:SimpleName[23856-23872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23814-24066]:Block[23875-24127]"
    }, {
      "left" : "long inB = inf.getBytesRead();",
      "right" : "long inB = inf.getBytesRead();",
      "info" : "VariableDeclarationStatement[23824-23854]:VariableDeclarationStatement[23885-23915]"
    }, {
      "left" : "if (current.bytesReadFromStream >= TWO_EXP_32)",
      "right" : "if (current.bytesReadFromStream >= TWO_EXP_32)",
      "info" : "IfStatement[23863-24040]:IfStatement[23924-24101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23910-24040]:Block[23971-24101]"
    }, {
      "left" : "while (inB + TWO_EXP_32 <= current.bytesReadFromStream)",
      "right" : "while (inB + TWO_EXP_32 <= current.bytesReadFromStream)",
      "info" : "WhileStatement[23924-24030]:WhileStatement[23985-24091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23980-24030]:Block[24041-24091]"
    }, {
      "left" : "inB += TWO_EXP_32;",
      "right" : "inB += TWO_EXP_32;",
      "info" : "ExpressionStatement[23998-24016]:ExpressionStatement[24059-24077]"
    }, {
      "left" : "return inB;",
      "right" : "return inB;",
      "info" : "ReturnStatement[24049-24060]:ReturnStatement[24110-24121]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24072-24079]:Modifier[24133-24140]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[24080-24083]:PrimitiveType[24141-24144]"
    }, {
      "left" : "fill",
      "right" : "fill",
      "info" : "SimpleName[24084-24088]:SimpleName[24145-24149]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24098-24109]:SimpleType[24159-24170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24110-24428]:Block[24171-24489]"
    }, {
      "left" : "if (closed)",
      "right" : "if (closed)",
      "info" : "IfStatement[24120-24202]:IfStatement[24181-24263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24132-24202]:Block[24193-24263]"
    }, {
      "left" : "throw new IOException(\"The stream is closed\");",
      "right" : "throw new IOException(\"The stream is closed\");",
      "info" : "ThrowStatement[24146-24192]:ThrowStatement[24207-24253]"
    }, {
      "left" : "int length = in.read(buf.array());",
      "right" : "int length = in.read(buf.array());",
      "info" : "VariableDeclarationStatement[24211-24245]:VariableDeclarationStatement[24272-24306]"
    }, {
      "left" : "if (length > 0)",
      "right" : "if (length > 0)",
      "info" : "IfStatement[24254-24399]:IfStatement[24315-24460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24270-24399]:Block[24331-24460]"
    }, {
      "left" : "buf.limit(length);",
      "right" : "buf.limit(length);",
      "info" : "ExpressionStatement[24284-24302]:ExpressionStatement[24345-24363]"
    }, {
      "left" : "count(buf.limit());",
      "right" : "count(buf.limit());",
      "info" : "ExpressionStatement[24315-24334]:ExpressionStatement[24376-24395]"
    }, {
      "left" : "inf.setInput(buf.array(), 0, buf.limit());",
      "right" : "inf.setInput(buf.array(), 0, buf.limit());",
      "info" : "ExpressionStatement[24347-24389]:ExpressionStatement[24408-24450]"
    }, {
      "left" : "return length;",
      "right" : "return length;",
      "info" : "ReturnStatement[24408-24422]:ReturnStatement[24469-24483]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24434-24441]:Modifier[24495-24502]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24442-24446]:PrimitiveType[24503-24507]"
    }, {
      "left" : "readFully",
      "right" : "readFully",
      "info" : "SimpleName[24447-24456]:SimpleName[24508-24517]"
    }, {
      "left" : "byte[] b",
      "right" : "byte[] b",
      "info" : "SingleVariableDeclaration[24457-24465]:SingleVariableDeclaration[24518-24526]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24474-24485]:SimpleType[24535-24546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24486-24641]:Block[24547-24702]"
    }, {
      "left" : "int count = IOUtils.readFully(in, b);",
      "right" : "int count = IOUtils.readFully(in, b);",
      "info" : "VariableDeclarationStatement[24496-24533]:VariableDeclarationStatement[24557-24594]"
    }, {
      "left" : "count(count);",
      "right" : "count(count);",
      "info" : "ExpressionStatement[24542-24555]:ExpressionStatement[24603-24616]"
    }, {
      "left" : "if (count < b.length)",
      "right" : "if (count < b.length)",
      "info" : "IfStatement[24564-24635]:IfStatement[24625-24696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24586-24635]:Block[24647-24696]"
    }, {
      "left" : "throw new EOFException();",
      "right" : "throw new EOFException();",
      "info" : "ThrowStatement[24600-24625]:ThrowStatement[24661-24686]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24647-24654]:Modifier[24708-24715]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24655-24659]:PrimitiveType[24716-24720]"
    }, {
      "left" : "readDataDescriptor",
      "right" : "readDataDescriptor",
      "info" : "SimpleName[24660-24678]:SimpleName[24721-24739]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24688-24699]:SimpleType[24749-24760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24700-26256]:Block[24761-26317]"
    }, {
      "left" : "readFully(WORD_BUF);",
      "right" : "readFully(WORD_BUF);",
      "info" : "ExpressionStatement[24710-24730]:ExpressionStatement[24771-24791]"
    }, {
      "left" : "ZipLong val = new ZipLong(WORD_BUF);",
      "right" : "ZipLong val = new ZipLong(WORD_BUF);",
      "info" : "VariableDeclarationStatement[24739-24775]:VariableDeclarationStatement[24800-24836]"
    }, {
      "left" : "if (ZipLong.DD_SIG.equals(val))",
      "right" : "if (ZipLong.DD_SIG.equals(val))",
      "info" : "IfStatement[24784-24957]:IfStatement[24845-25018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24816-24957]:Block[24877-25018]"
    }, {
      "left" : "readFully(WORD_BUF);",
      "right" : "readFully(WORD_BUF);",
      "info" : "ExpressionStatement[24886-24906]:ExpressionStatement[24947-24967]"
    }, {
      "left" : "val = new ZipLong(WORD_BUF);",
      "right" : "val = new ZipLong(WORD_BUF);",
      "info" : "ExpressionStatement[24919-24947]:ExpressionStatement[24980-25008]"
    }, {
      "left" : "current.entry.setCrc(val.getValue());",
      "right" : "current.entry.setCrc(val.getValue());",
      "info" : "ExpressionStatement[24966-25003]:ExpressionStatement[25027-25064]"
    }, {
      "left" : "readFully(TWO_DWORD_BUF);",
      "right" : "readFully(TWO_DWORD_BUF);",
      "info" : "ExpressionStatement[25652-25677]:ExpressionStatement[25713-25738]"
    }, {
      "left" : "ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);",
      "right" : "ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);",
      "info" : "VariableDeclarationStatement[25686-25743]:VariableDeclarationStatement[25747-25804]"
    }, {
      "left" : "if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG))",
      "right" : "if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG))",
      "info" : "IfStatement[25752-26250]:IfStatement[25813-26311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25834-26048]:Block[25895-26109]"
    }, {
      "left" : "pushback(TWO_DWORD_BUF, DWORD, DWORD);",
      "right" : "pushback(TWO_DWORD_BUF, DWORD, DWORD);",
      "info" : "ExpressionStatement[25848-25886]:ExpressionStatement[25909-25947]"
    }, {
      "left" : "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));",
      "right" : "current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));",
      "info" : "ExpressionStatement[25899-25964]:ExpressionStatement[25960-26025]"
    }, {
      "left" : "current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD));",
      "right" : "current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD));",
      "info" : "ExpressionStatement[25977-26038]:ExpressionStatement[26038-26099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26054-26250]:Block[26115-26311]"
    }, {
      "left" : "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));",
      "right" : "current.entry.setCompressedSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF));",
      "info" : "ExpressionStatement[26068-26149]:ExpressionStatement[26129-26210]"
    }, {
      "left" : "current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD));",
      "right" : "current.entry.setSize(ZipEightByteInteger.getLongValue(TWO_DWORD_BUF, DWORD));",
      "info" : "ExpressionStatement[26162-26240]:ExpressionStatement[26223-26301]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26522-26529]:Modifier[26583-26590]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26530-26537]:PrimitiveType[26591-26598]"
    }, {
      "left" : "supportsDataDescriptorFor",
      "right" : "supportsDataDescriptorFor",
      "info" : "SimpleName[26538-26563]:SimpleName[26599-26624]"
    }, {
      "left" : "ZipArchiveEntry entry",
      "right" : "ZipArchiveEntry entry",
      "info" : "SingleVariableDeclaration[26564-26585]:SingleVariableDeclaration[26625-26646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26587-26818]:Block[26648-26879]"
    }, {
      "left" : "return !entry.getGeneralPurposeBit().usesDataDescriptor()\n\n                || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED)\n                || entry.getMethod() == ZipEntry.DEFLATED;",
      "right" : "return !entry.getGeneralPurposeBit().usesDataDescriptor()\n\n                || (allowStoredEntriesWithDataDescriptor && entry.getMethod() == ZipEntry.STORED)\n                || entry.getMethod() == ZipEntry.DEFLATED;",
      "info" : "ReturnStatement[26597-26812]:ReturnStatement[26658-26873]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27485-27492]:Modifier[27546-27553]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27493-27497]:PrimitiveType[27554-27558]"
    }, {
      "left" : "readStoredEntry",
      "right" : "readStoredEntry",
      "info" : "SimpleName[27498-27513]:SimpleName[27559-27574]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27523-27534]:SimpleType[27584-27595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27535-28517]:Block[27596-28578]"
    }, {
      "left" : "ByteArrayOutputStream bos = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream bos = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[27545-27601]:VariableDeclarationStatement[27606-27662]"
    }, {
      "left" : "int off = 0;",
      "right" : "int off = 0;",
      "info" : "VariableDeclarationStatement[27610-27622]:VariableDeclarationStatement[27671-27683]"
    }, {
      "left" : "boolean done = false;",
      "right" : "boolean done = false;",
      "info" : "VariableDeclarationStatement[27631-27652]:VariableDeclarationStatement[27692-27713]"
    }, {
      "left" : "int ddLen = current.usesZip64 ? WORD + 2 * DWORD : 3 * WORD;",
      "right" : "int ddLen = current.usesZip64 ? WORD + 2 * DWORD : 3 * WORD;",
      "info" : "VariableDeclarationStatement[27704-27764]:VariableDeclarationStatement[27765-27825]"
    }, {
      "left" : "while (!done)",
      "right" : "while (!done)",
      "info" : "WhileStatement[27774-28417]:WhileStatement[27835-28478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27788-28417]:Block[27849-28478]"
    }, {
      "left" : "int r = in.read(buf.array(), off, ZipArchiveOutputStream.BUFFER_SIZE - off);",
      "right" : "int r = in.read(buf.array(), off, ZipArchiveOutputStream.BUFFER_SIZE - off);",
      "info" : "VariableDeclarationStatement[27802-27878]:VariableDeclarationStatement[27863-27939]"
    }, {
      "left" : "if (r <= 0)",
      "right" : "if (r <= 0)",
      "info" : "IfStatement[27891-28081]:IfStatement[27952-28142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27903-28081]:Block[27964-28142]"
    }, {
      "left" : "throw new IOException(\"Truncated ZIP file\");",
      "right" : "throw new IOException(\"Truncated ZIP file\");",
      "info" : "ThrowStatement[28023-28067]:ThrowStatement[28084-28128]"
    }, {
      "left" : "if (r + off < 4)",
      "right" : "if (r + off < 4)",
      "info" : "IfStatement[28094-28245]:IfStatement[28155-28306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28111-28245]:Block[28172-28306]"
    }, {
      "left" : "off += r;",
      "right" : "off += r;",
      "info" : "ExpressionStatement[28196-28205]:ExpressionStatement[28257-28266]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[28222-28231]:ContinueStatement[28283-28292]"
    }, {
      "left" : "done = bufferContainsSignature(bos, off, r, ddLen);",
      "right" : "done = bufferContainsSignature(bos, off, r, ddLen);",
      "info" : "ExpressionStatement[28259-28310]:ExpressionStatement[28320-28371]"
    }, {
      "left" : "if (!done)",
      "right" : "if (!done)",
      "info" : "IfStatement[28323-28407]:IfStatement[28384-28468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28334-28407]:Block[28395-28468]"
    }, {
      "left" : "off = cacheBytesRead(bos, off, r, ddLen);",
      "right" : "off = cacheBytesRead(bos, off, r, ddLen);",
      "info" : "ExpressionStatement[28352-28393]:ExpressionStatement[28413-28454]"
    }, {
      "left" : "byte[] b = bos.toByteArray();",
      "right" : "byte[] b = bos.toByteArray();",
      "info" : "VariableDeclarationStatement[28427-28456]:VariableDeclarationStatement[28488-28517]"
    }, {
      "left" : "lastStoredEntry = new ByteArrayInputStream(b);",
      "right" : "lastStoredEntry = new ByteArrayInputStream(b);",
      "info" : "ExpressionStatement[28465-28511]:ExpressionStatement[28526-28572]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29063-29070]:Modifier[29124-29131]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29071-29078]:PrimitiveType[29132-29139]"
    }, {
      "left" : "bufferContainsSignature",
      "right" : "bufferContainsSignature",
      "info" : "SimpleName[29079-29102]:SimpleName[29140-29163]"
    }, {
      "left" : "ByteArrayOutputStream bos",
      "right" : "ByteArrayOutputStream bos",
      "info" : "SingleVariableDeclaration[29103-29128]:SingleVariableDeclaration[29164-29189]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[29130-29140]:SingleVariableDeclaration[29191-29201]"
    }, {
      "left" : "int lastRead",
      "right" : "int lastRead",
      "info" : "SingleVariableDeclaration[29142-29154]:SingleVariableDeclaration[29203-29215]"
    }, {
      "left" : "int expectedDDLen",
      "right" : "int expectedDDLen",
      "info" : "SingleVariableDeclaration[29156-29173]:SingleVariableDeclaration[29217-29234]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29194-29205]:SimpleType[29255-29266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29206-30459]:Block[29267-30520]"
    }, {
      "left" : "boolean done = false;",
      "right" : "boolean done = false;",
      "info" : "VariableDeclarationStatement[29217-29238]:VariableDeclarationStatement[29278-29299]"
    }, {
      "left" : "int readTooMuch = 0;",
      "right" : "int readTooMuch = 0;",
      "info" : "VariableDeclarationStatement[29247-29267]:VariableDeclarationStatement[29308-29328]"
    }, {
      "left" : "for (int i = 0; !done && i < lastRead - 4; i++)",
      "right" : "for (int i = 0; !done && i < lastRead - 4; i++)",
      "info" : "ForStatement[29276-30432]:ForStatement[29337-30493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29324-30432]:Block[29385-30493]"
    }, {
      "left" : "if (buf.array()[i] == LFH[0] && buf.array()[i + 1] == LFH[1])",
      "right" : "if (buf.array()[i] == LFH[0] && buf.array()[i + 1] == LFH[1])",
      "info" : "IfStatement[29338-30422]:IfStatement[29399-30483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29400-30422]:Block[29461-30483]"
    }, {
      "left" : "if ((buf.array()[i + 2] == LFH[2] && buf.array()[i + 3] == LFH[3])\n                    || (buf.array()[i] == CFH[2] && buf.array()[i + 3] == CFH[3]))",
      "right" : "if ((buf.array()[i + 2] == LFH[2] && buf.array()[i + 3] == LFH[3])\n                    || (buf.array()[i] == CFH[2] && buf.array()[i + 3] == CFH[3]))",
      "info" : "IfStatement[29418-29964]:IfStatement[29479-30025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29568-29736]:Block[29629-29797]"
    }, {
      "left" : "readTooMuch = offset + lastRead - i - expectedDDLen;",
      "right" : "readTooMuch = offset + lastRead - i - expectedDDLen;",
      "info" : "ExpressionStatement[29633-29685]:ExpressionStatement[29694-29746]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[29706-29718]:ExpressionStatement[29767-29779]"
    }, {
      "left" : "if (buf.array()[i + 2] == DD[2] && buf.array()[i + 3] == DD[3])",
      "right" : "if (buf.array()[i + 2] == DD[2] && buf.array()[i + 3] == DD[3])",
      "info" : "IfStatement[29758-29964]:IfStatement[29819-30025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29822-29964]:Block[29883-30025]"
    }, {
      "left" : "readTooMuch = offset + lastRead - i;",
      "right" : "readTooMuch = offset + lastRead - i;",
      "info" : "ExpressionStatement[29877-29913]:ExpressionStatement[29938-29974]"
    }, {
      "left" : "done = true;",
      "right" : "done = true;",
      "info" : "ExpressionStatement[29934-29946]:ExpressionStatement[29995-30007]"
    }, {
      "left" : "if (done)",
      "right" : "if (done)",
      "info" : "IfStatement[29981-30408]:IfStatement[30042-30469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29991-30408]:Block[30052-30469]"
    }, {
      "left" : "pushback(buf.array(), offset + lastRead - readTooMuch, readTooMuch);",
      "right" : "pushback(buf.array(), offset + lastRead - readTooMuch, readTooMuch);",
      "info" : "ExpressionStatement[30230-30298]:ExpressionStatement[30291-30359]"
    }, {
      "left" : "bos.write(buf.array(), 0, i);",
      "right" : "bos.write(buf.array(), 0, i);",
      "info" : "ExpressionStatement[30319-30348]:ExpressionStatement[30380-30409]"
    }, {
      "left" : "readDataDescriptor();",
      "right" : "readDataDescriptor();",
      "info" : "ExpressionStatement[30369-30390]:ExpressionStatement[30430-30451]"
    }, {
      "left" : "return done;",
      "right" : "return done;",
      "info" : "ReturnStatement[30441-30453]:ReturnStatement[30502-30514]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[30861-30868]:Modifier[30922-30929]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30869-30872]:PrimitiveType[30930-30933]"
    }, {
      "left" : "cacheBytesRead",
      "right" : "cacheBytesRead",
      "info" : "SimpleName[30873-30887]:SimpleName[30934-30948]"
    }, {
      "left" : "ByteArrayOutputStream bos",
      "right" : "ByteArrayOutputStream bos",
      "info" : "SingleVariableDeclaration[30888-30913]:SingleVariableDeclaration[30949-30974]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[30915-30925]:SingleVariableDeclaration[30976-30986]"
    }, {
      "left" : "int lastRead",
      "right" : "int lastRead",
      "info" : "SingleVariableDeclaration[30927-30939]:SingleVariableDeclaration[30988-31000]"
    }, {
      "left" : "int expecteDDLen",
      "right" : "int expecteDDLen",
      "info" : "SingleVariableDeclaration[30941-30957]:SingleVariableDeclaration[31002-31018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30959-31322]:Block[31020-31383]"
    }, {
      "left" : "final int cacheable = offset + lastRead - expecteDDLen - 3;",
      "right" : "final int cacheable = offset + lastRead - expecteDDLen - 3;",
      "info" : "VariableDeclarationStatement[30969-31028]:VariableDeclarationStatement[31030-31089]"
    }, {
      "left" : "if (cacheable > 0)",
      "right" : "if (cacheable > 0)",
      "info" : "IfStatement[31037-31293]:IfStatement[31098-31354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31056-31244]:Block[31117-31305]"
    }, {
      "left" : "bos.write(buf.array(), 0, cacheable);",
      "right" : "bos.write(buf.array(), 0, cacheable);",
      "info" : "ExpressionStatement[31070-31107]:ExpressionStatement[31131-31168]"
    }, {
      "left" : "System.arraycopy(buf.array(), cacheable, buf.array(), 0, expecteDDLen + 3);",
      "right" : "System.arraycopy(buf.array(), cacheable, buf.array(), 0, expecteDDLen + 3);",
      "info" : "ExpressionStatement[31120-31195]:ExpressionStatement[31181-31256]"
    }, {
      "left" : "offset = expecteDDLen + 3;",
      "right" : "offset = expecteDDLen + 3;",
      "info" : "ExpressionStatement[31208-31234]:ExpressionStatement[31269-31295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31250-31293]:Block[31311-31354]"
    }, {
      "left" : "offset += lastRead;",
      "right" : "offset += lastRead;",
      "info" : "ExpressionStatement[31264-31283]:ExpressionStatement[31325-31344]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[31302-31316]:ReturnStatement[31363-31377]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31328-31335]:Modifier[31389-31396]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31336-31340]:PrimitiveType[31397-31401]"
    }, {
      "left" : "pushback",
      "right" : "pushback",
      "info" : "SimpleName[31341-31349]:SimpleName[31402-31410]"
    }, {
      "left" : "byte[] buf",
      "right" : "byte[] buf",
      "info" : "SingleVariableDeclaration[31350-31360]:SingleVariableDeclaration[31411-31421]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[31362-31372]:SingleVariableDeclaration[31423-31433]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[31374-31384]:SingleVariableDeclaration[31435-31445]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31393-31404]:SimpleType[31454-31465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31405-31509]:Block[31466-31570]"
    }, {
      "left" : "((PushbackInputStream) in).unread(buf, offset, length);",
      "right" : "((PushbackInputStream) in).unread(buf, offset, length);",
      "info" : "ExpressionStatement[31415-31470]:ExpressionStatement[31476-31531]"
    }, {
      "left" : "pushedBackBytes(length);",
      "right" : "pushedBackBytes(length);",
      "info" : "ExpressionStatement[31479-31503]:ExpressionStatement[31540-31564]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32295-32302]:Modifier[32356-32363]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32303-32307]:PrimitiveType[32364-32368]"
    }, {
      "left" : "skipRemainderOfArchive",
      "right" : "skipRemainderOfArchive",
      "info" : "SimpleName[32308-32330]:SimpleName[32369-32391]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32340-32351]:SimpleType[32401-32412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32352-32808]:Block[32413-32869]"
    }, {
      "left" : "realSkip(entriesRead * CFH_LEN - LFH_LEN);",
      "right" : "realSkip(entriesRead * CFH_LEN - LFH_LEN);",
      "info" : "ExpressionStatement[32542-32584]:ExpressionStatement[32603-32645]"
    }, {
      "left" : "findEocdRecord();",
      "right" : "findEocdRecord();",
      "info" : "ExpressionStatement[32593-32610]:ExpressionStatement[32654-32671]"
    }, {
      "left" : "realSkip(ZipFile.MIN_EOCD_SIZE - WORD /* signature */ - SHORT /* comment len */);",
      "right" : "realSkip(ZipFile.MIN_EOCD_SIZE - WORD /* signature */ - SHORT /* comment len */);",
      "info" : "ExpressionStatement[32619-32700]:ExpressionStatement[32680-32761]"
    }, {
      "left" : "readFully(SHORT_BUF);",
      "right" : "readFully(SHORT_BUF);",
      "info" : "ExpressionStatement[32709-32730]:ExpressionStatement[32770-32791]"
    }, {
      "left" : "realSkip(ZipShort.getValue(SHORT_BUF));",
      "right" : "realSkip(ZipShort.getValue(SHORT_BUF));",
      "info" : "ExpressionStatement[32763-32802]:ExpressionStatement[32824-32863]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[32939-32946]:Modifier[33000-33007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32947-32951]:PrimitiveType[33008-33012]"
    }, {
      "left" : "findEocdRecord",
      "right" : "findEocdRecord",
      "info" : "SimpleName[32952-32966]:SimpleName[33013-33027]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32976-32987]:SimpleType[33037-33048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32988-34120]:Block[33049-34181]"
    }, {
      "left" : "int currentByte = -1;",
      "right" : "int currentByte = -1;",
      "info" : "VariableDeclarationStatement[32998-33019]:VariableDeclarationStatement[33059-33080]"
    }, {
      "left" : "boolean skipReadCall = false;",
      "right" : "boolean skipReadCall = false;",
      "info" : "VariableDeclarationStatement[33028-33057]:VariableDeclarationStatement[33089-33118]"
    }, {
      "left" : "while (skipReadCall || (currentByte = readOneByte()) > -1)",
      "right" : "while (skipReadCall || (currentByte = readOneByte()) > -1)",
      "info" : "WhileStatement[33066-34114]:WhileStatement[33127-34175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33125-34114]:Block[33186-34175]"
    }, {
      "left" : "skipReadCall = false;",
      "right" : "skipReadCall = false;",
      "info" : "ExpressionStatement[33139-33160]:ExpressionStatement[33200-33221]"
    }, {
      "left" : "if (!isFirstByteOfEocdSig(currentByte))",
      "right" : "if (!isFirstByteOfEocdSig(currentByte))",
      "info" : "IfStatement[33173-33254]:IfStatement[33234-33315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33213-33254]:Block[33274-33315]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33231-33240]:ContinueStatement[33292-33301]"
    }, {
      "left" : "currentByte = readOneByte();",
      "right" : "currentByte = readOneByte();",
      "info" : "ExpressionStatement[33267-33295]:ExpressionStatement[33328-33356]"
    }, {
      "left" : "if (currentByte != ZipArchiveOutputStream.EOCD_SIG[1])",
      "right" : "if (currentByte != ZipArchiveOutputStream.EOCD_SIG[1])",
      "info" : "IfStatement[33308-33556]:IfStatement[33369-33617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33363-33556]:Block[33424-33617]"
    }, {
      "left" : "if (currentByte == -1)",
      "right" : "if (currentByte == -1)",
      "info" : "IfStatement[33381-33450]:IfStatement[33442-33511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33404-33450]:Block[33465-33511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33426-33432]:BreakStatement[33487-33493]"
    }, {
      "left" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "right" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "info" : "ExpressionStatement[33467-33516]:ExpressionStatement[33528-33577]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33533-33542]:ContinueStatement[33594-33603]"
    }, {
      "left" : "currentByte = readOneByte();",
      "right" : "currentByte = readOneByte();",
      "info" : "ExpressionStatement[33569-33597]:ExpressionStatement[33630-33658]"
    }, {
      "left" : "if (currentByte != ZipArchiveOutputStream.EOCD_SIG[2])",
      "right" : "if (currentByte != ZipArchiveOutputStream.EOCD_SIG[2])",
      "info" : "IfStatement[33610-33858]:IfStatement[33671-33919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33665-33858]:Block[33726-33919]"
    }, {
      "left" : "if (currentByte == -1)",
      "right" : "if (currentByte == -1)",
      "info" : "IfStatement[33683-33752]:IfStatement[33744-33813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33706-33752]:Block[33767-33813]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33728-33734]:BreakStatement[33789-33795]"
    }, {
      "left" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "right" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "info" : "ExpressionStatement[33769-33818]:ExpressionStatement[33830-33879]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[33835-33844]:ContinueStatement[33896-33905]"
    }, {
      "left" : "currentByte = readOneByte();",
      "right" : "currentByte = readOneByte();",
      "info" : "ExpressionStatement[33871-33899]:ExpressionStatement[33932-33960]"
    }, {
      "left" : "if (currentByte == -1\n                || currentByte == ZipArchiveOutputStream.EOCD_SIG[3])",
      "right" : "if (currentByte == -1\n                || currentByte == ZipArchiveOutputStream.EOCD_SIG[3])",
      "info" : "IfStatement[33912-34042]:IfStatement[33973-34103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34004-34042]:Block[34065-34103]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34022-34028]:BreakStatement[34083-34089]"
    }, {
      "left" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "right" : "skipReadCall = isFirstByteOfEocdSig(currentByte);",
      "info" : "ExpressionStatement[34055-34104]:ExpressionStatement[34116-34165]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34347-34354]:Modifier[34408-34415]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34355-34359]:PrimitiveType[34416-34420]"
    }, {
      "left" : "realSkip",
      "right" : "realSkip",
      "info" : "SimpleName[34360-34368]:SimpleName[34421-34429]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[34369-34379]:SingleVariableDeclaration[34430-34440]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[34388-34399]:SimpleType[34449-34460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34400-34869]:Block[34461-34930]"
    }, {
      "left" : "if (value >= 0)",
      "right" : "if (value >= 0)",
      "info" : "IfStatement[34410-34817]:IfStatement[34471-34878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34426-34817]:Block[34487-34878]"
    }, {
      "left" : "long skipped = 0;",
      "right" : "long skipped = 0;",
      "info" : "VariableDeclarationStatement[34440-34457]:VariableDeclarationStatement[34501-34518]"
    }, {
      "left" : "while (skipped < value)",
      "right" : "while (skipped < value)",
      "info" : "WhileStatement[34470-34787]:WhileStatement[34531-34848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34494-34787]:Block[34555-34848]"
    }, {
      "left" : "long rem = value - skipped;",
      "right" : "long rem = value - skipped;",
      "info" : "VariableDeclarationStatement[34512-34539]:VariableDeclarationStatement[34573-34600]"
    }, {
      "left" : "int x = in.read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));",
      "right" : "int x = in.read(SKIP_BUF, 0, (int) (SKIP_BUF.length > rem ? rem : SKIP_BUF.length));",
      "info" : "VariableDeclarationStatement[34556-34640]:VariableDeclarationStatement[34617-34701]"
    }, {
      "left" : "if (x == -1)",
      "right" : "if (x == -1)",
      "info" : "IfStatement[34657-34717]:IfStatement[34718-34778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34670-34717]:Block[34731-34778]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34692-34699]:ReturnStatement[34753-34760]"
    }, {
      "left" : "count(x);",
      "right" : "count(x);",
      "info" : "ExpressionStatement[34734-34743]:ExpressionStatement[34795-34804]"
    }, {
      "left" : "skipped += x;",
      "right" : "skipped += x;",
      "info" : "ExpressionStatement[34760-34773]:ExpressionStatement[34821-34834]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34800-34807]:ReturnStatement[34861-34868]"
    }, {
      "left" : "throw new IllegalArgumentException();",
      "right" : "throw new IllegalArgumentException();",
      "info" : "ThrowStatement[34826-34863]:ThrowStatement[34887-34924]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35089-35096]:Modifier[35150-35157]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[35097-35100]:PrimitiveType[35158-35161]"
    }, {
      "left" : "readOneByte",
      "right" : "readOneByte",
      "info" : "SimpleName[35101-35112]:SimpleName[35162-35173]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[35122-35133]:SimpleType[35183-35194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35134-35241]:Block[35195-35302]"
    }, {
      "left" : "int b = in.read();",
      "right" : "int b = in.read();",
      "info" : "VariableDeclarationStatement[35144-35162]:VariableDeclarationStatement[35205-35223]"
    }, {
      "left" : "if (b != -1)",
      "right" : "if (b != -1)",
      "info" : "IfStatement[35171-35217]:IfStatement[35232-35278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35184-35217]:Block[35245-35278]"
    }, {
      "left" : "count(1);",
      "right" : "count(1);",
      "info" : "ExpressionStatement[35198-35207]:ExpressionStatement[35259-35268]"
    }, {
      "left" : "return b;",
      "right" : "return b;",
      "info" : "ReturnStatement[35226-35235]:ReturnStatement[35287-35296]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35247-35254]:Modifier[35308-35315]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[35255-35262]:PrimitiveType[35316-35323]"
    }, {
      "left" : "isFirstByteOfEocdSig",
      "right" : "isFirstByteOfEocdSig",
      "info" : "SimpleName[35263-35283]:SimpleName[35324-35344]"
    }, {
      "left" : "int b",
      "right" : "int b",
      "info" : "SingleVariableDeclaration[35284-35289]:SingleVariableDeclaration[35345-35350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35291-35354]:Block[35352-35415]"
    }, {
      "left" : "return b == ZipArchiveOutputStream.EOCD_SIG[0];",
      "right" : "return b == ZipArchiveOutputStream.EOCD_SIG[0];",
      "info" : "ReturnStatement[35301-35348]:ReturnStatement[35362-35409]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35467-35474]:Modifier[35528-35535]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35475-35481]:Modifier[35536-35542]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[35482-35487]:Modifier[35543-35548]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[35488-35493]:TYPE_DECLARATION_KIND[35549-35554]"
    }, {
      "left" : "CurrentEntry",
      "right" : "CurrentEntry",
      "info" : "SimpleName[35494-35506]:SimpleName[35555-35567]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36733-36740]:Modifier[36794-36801]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[36741-36746]:TYPE_DECLARATION_KIND[36802-36807]"
    }, {
      "left" : "BoundedInputStream",
      "right" : "BoundedInputStream",
      "info" : "SimpleName[36747-36765]:SimpleName[36808-36826]"
    }, {
      "left" : "InputStream",
      "right" : "InputStream",
      "info" : "SimpleType[36774-36785]:SimpleType[36835-36846]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37314-37320]:Modifier[37375-37381]"
    }, {
      "left" : "BoundedInputStream",
      "right" : "BoundedInputStream",
      "info" : "SimpleName[37321-37339]:SimpleName[37382-37400]"
    }, {
      "left" : "final InputStream in",
      "right" : "final InputStream in",
      "info" : "SingleVariableDeclaration[37340-37360]:SingleVariableDeclaration[37401-37421]"
    }, {
      "left" : "final long size",
      "right" : "final long size",
      "info" : "SingleVariableDeclaration[37362-37377]:SingleVariableDeclaration[37423-37438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37379-37445]:Block[37440-37506]"
    }, {
      "left" : "this.max = size;",
      "right" : "this.max = size;",
      "info" : "ExpressionStatement[37393-37409]:ExpressionStatement[37454-37470]"
    }, {
      "left" : "this.in = in;",
      "right" : "this.in = in;",
      "info" : "ExpressionStatement[37422-37435]:ExpressionStatement[37483-37496]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37455-37464]:MarkerAnnotation[37516-37525]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37473-37479]:Modifier[37534-37540]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37480-37483]:PrimitiveType[37541-37544]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[37484-37488]:SimpleName[37545-37549]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37498-37509]:SimpleType[37559-37570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37510-37757]:Block[37571-37818]"
    }, {
      "left" : "if (max >= 0 && pos >= max)",
      "right" : "if (max >= 0 && pos >= max)",
      "info" : "IfStatement[37524-37594]:IfStatement[37585-37655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37552-37594]:Block[37613-37655]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[37570-37580]:ReturnStatement[37631-37641]"
    }, {
      "left" : "final int result = in.read();",
      "right" : "final int result = in.read();",
      "info" : "VariableDeclarationStatement[37607-37636]:VariableDeclarationStatement[37668-37697]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[37649-37655]:ExpressionStatement[37710-37716]"
    }, {
      "left" : "count(1);",
      "right" : "count(1);",
      "info" : "ExpressionStatement[37668-37677]:ExpressionStatement[37729-37738]"
    }, {
      "left" : "current.bytesReadFromStream++;",
      "right" : "current.bytesReadFromStream++;",
      "info" : "ExpressionStatement[37690-37720]:ExpressionStatement[37751-37781]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37733-37747]:ReturnStatement[37794-37808]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37767-37776]:MarkerAnnotation[37828-37837]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37785-37791]:Modifier[37846-37852]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37792-37795]:PrimitiveType[37853-37856]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[37796-37800]:SimpleName[37857-37861]"
    }, {
      "left" : "final byte[] b",
      "right" : "final byte[] b",
      "info" : "SingleVariableDeclaration[37801-37815]:SingleVariableDeclaration[37862-37876]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37824-37835]:SimpleType[37885-37896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37836-37893]:Block[37897-37954]"
    }, {
      "left" : "return this.read(b, 0, b.length);",
      "right" : "return this.read(b, 0, b.length);",
      "info" : "ReturnStatement[37850-37883]:ReturnStatement[37911-37944]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[37903-37912]:MarkerAnnotation[37964-37973]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[37921-37927]:Modifier[37982-37988]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[37928-37931]:PrimitiveType[37989-37992]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[37932-37936]:SimpleName[37993-37997]"
    }, {
      "left" : "final byte[] b",
      "right" : "final byte[] b",
      "info" : "SingleVariableDeclaration[37937-37951]:SingleVariableDeclaration[37998-38012]"
    }, {
      "left" : "final int off",
      "right" : "final int off",
      "info" : "SingleVariableDeclaration[37953-37966]:SingleVariableDeclaration[38014-38027]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[37968-37981]:SingleVariableDeclaration[38029-38042]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[37990-38001]:SimpleType[38051-38062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38002-38460]:Block[38063-38521]"
    }, {
      "left" : "if (max >= 0 && pos >= max)",
      "right" : "if (max >= 0 && pos >= max)",
      "info" : "IfStatement[38016-38086]:IfStatement[38077-38147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38044-38086]:Block[38105-38147]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[38062-38072]:ReturnStatement[38123-38133]"
    }, {
      "left" : "final long maxRead = max >= 0 ? Math.min(len, max - pos) : len;",
      "right" : "final long maxRead = max >= 0 ? Math.min(len, max - pos) : len;",
      "info" : "VariableDeclarationStatement[38099-38162]:VariableDeclarationStatement[38160-38223]"
    }, {
      "left" : "final int bytesRead = in.read(b, off, (int) maxRead);",
      "right" : "final int bytesRead = in.read(b, off, (int) maxRead);",
      "info" : "VariableDeclarationStatement[38175-38228]:VariableDeclarationStatement[38236-38289]"
    }, {
      "left" : "if (bytesRead == -1)",
      "right" : "if (bytesRead == -1)",
      "info" : "IfStatement[38242-38305]:IfStatement[38303-38366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38263-38305]:Block[38324-38366]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[38281-38291]:ReturnStatement[38342-38352]"
    }, {
      "left" : "pos += bytesRead;",
      "right" : "pos += bytesRead;",
      "info" : "ExpressionStatement[38319-38336]:ExpressionStatement[38380-38397]"
    }, {
      "left" : "count(bytesRead);",
      "right" : "count(bytesRead);",
      "info" : "ExpressionStatement[38349-38366]:ExpressionStatement[38410-38427]"
    }, {
      "left" : "current.bytesReadFromStream += bytesRead;",
      "right" : "current.bytesReadFromStream += bytesRead;",
      "info" : "ExpressionStatement[38379-38420]:ExpressionStatement[38440-38481]"
    }, {
      "left" : "return bytesRead;",
      "right" : "return bytesRead;",
      "info" : "ReturnStatement[38433-38450]:ReturnStatement[38494-38511]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38470-38479]:MarkerAnnotation[38531-38540]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38488-38494]:Modifier[38549-38555]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[38495-38499]:PrimitiveType[38556-38560]"
    }, {
      "left" : "skip",
      "right" : "skip",
      "info" : "SimpleName[38500-38504]:SimpleName[38561-38565]"
    }, {
      "left" : "final long n",
      "right" : "final long n",
      "info" : "SingleVariableDeclaration[38505-38517]:SingleVariableDeclaration[38566-38578]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[38526-38537]:SimpleType[38587-38598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38538-38741]:Block[38599-38802]"
    }, {
      "left" : "final long toSkip = max >= 0 ? Math.min(n, max - pos) : n;",
      "right" : "final long toSkip = max >= 0 ? Math.min(n, max - pos) : n;",
      "info" : "VariableDeclarationStatement[38552-38610]:VariableDeclarationStatement[38613-38671]"
    }, {
      "left" : "final long skippedBytes = in.skip(toSkip);",
      "right" : "final long skippedBytes = in.skip(toSkip);",
      "info" : "VariableDeclarationStatement[38623-38665]:VariableDeclarationStatement[38684-38726]"
    }, {
      "left" : "pos += skippedBytes;",
      "right" : "pos += skippedBytes;",
      "info" : "ExpressionStatement[38678-38698]:ExpressionStatement[38739-38759]"
    }, {
      "left" : "return skippedBytes;",
      "right" : "return skippedBytes;",
      "info" : "ReturnStatement[38711-38731]:ReturnStatement[38772-38792]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[38755-38764]:MarkerAnnotation[38816-38825]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[38773-38779]:Modifier[38834-38840]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[38780-38783]:PrimitiveType[38841-38844]"
    }, {
      "left" : "available",
      "right" : "available",
      "info" : "SimpleName[38784-38793]:SimpleName[38845-38854]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[38803-38814]:SimpleType[38864-38875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38815-38943]:Block[38876-39004]"
    }, {
      "left" : "if (max >= 0 && pos >= max)",
      "right" : "if (max >= 0 && pos >= max)",
      "info" : "IfStatement[38829-38898]:IfStatement[38890-38959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38857-38898]:Block[38918-38959]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[38875-38884]:ReturnStatement[38936-38945]"
    }, {
      "left" : "return in.available();",
      "right" : "return in.available();",
      "info" : "ReturnStatement[38911-38933]:ReturnStatement[38972-38994]"
    } ]
  },
  "interFileMappings" : { }
}