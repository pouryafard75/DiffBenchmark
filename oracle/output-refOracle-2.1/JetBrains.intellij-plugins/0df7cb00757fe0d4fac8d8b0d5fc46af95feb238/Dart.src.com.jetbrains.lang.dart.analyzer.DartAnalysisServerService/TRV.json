{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final String MIN_SDK_VERSION = \"1.12\";",
      "right" : "public static final String MIN_SDK_VERSION = \"1.12\";",
      "info" : "FieldDeclaration[2944-2996]:FieldDeclaration[2980-3032]"
    }, {
      "left" : "private static final long CHECK_CANCELLED_PERIOD = 100;",
      "right" : "private static final long CHECK_CANCELLED_PERIOD = 100;",
      "info" : "FieldDeclaration[3000-3055]:FieldDeclaration[3036-3091]"
    }, {
      "left" : "private static final long SEND_REQUEST_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "right" : "private static final long SEND_REQUEST_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "info" : "FieldDeclaration[3058-3136]:FieldDeclaration[3094-3172]"
    }, {
      "left" : "private static final long EDIT_FORMAT_TIMEOUT = TimeUnit.SECONDS.toMillis(3);",
      "right" : "private static final long EDIT_FORMAT_TIMEOUT = TimeUnit.SECONDS.toMillis(3);",
      "info" : "FieldDeclaration[3139-3216]:FieldDeclaration[3175-3252]"
    }, {
      "left" : "private static final long EDIT_SORT_MEMBERS_TIMEOUT = TimeUnit.SECONDS.toMillis(3);",
      "right" : "private static final long EDIT_SORT_MEMBERS_TIMEOUT = TimeUnit.SECONDS.toMillis(3);",
      "info" : "FieldDeclaration[3219-3302]:FieldDeclaration[3255-3338]"
    }, {
      "left" : "private static final long GET_ERRORS_TIMEOUT = TimeUnit.SECONDS.toMillis(5);",
      "right" : "private static final long GET_ERRORS_TIMEOUT = TimeUnit.SECONDS.toMillis(5);",
      "info" : "FieldDeclaration[3305-3381]:FieldDeclaration[3341-3417]"
    }, {
      "left" : "private static final long GET_ERRORS_LONGER_TIMEOUT = TimeUnit.SECONDS.toMillis(60);",
      "right" : "private static final long GET_ERRORS_LONGER_TIMEOUT = TimeUnit.SECONDS.toMillis(60);",
      "info" : "FieldDeclaration[3384-3468]:FieldDeclaration[3420-3504]"
    }, {
      "left" : "private static final long GET_FIXES_TIMEOUT = TimeUnit.SECONDS.toMillis(10);",
      "right" : "private static final long GET_FIXES_TIMEOUT = TimeUnit.SECONDS.toMillis(10);",
      "info" : "FieldDeclaration[3471-3547]:FieldDeclaration[3507-3583]"
    }, {
      "left" : "private static final long GET_SUGGESTIONS_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "right" : "private static final long GET_SUGGESTIONS_TIMEOUT = TimeUnit.SECONDS.toMillis(1);",
      "info" : "FieldDeclaration[3550-3631]:FieldDeclaration[3586-3667]"
    }, {
      "left" : "private static final long GET_LIBRARY_DEPENDENCIES_TIMEOUT = TimeUnit.MINUTES.toMillis(5);",
      "right" : "private static final long GET_LIBRARY_DEPENDENCIES_TIMEOUT = TimeUnit.MINUTES.toMillis(5);",
      "info" : "FieldDeclaration[3634-3724]:FieldDeclaration[3670-3760]"
    }, {
      "left" : "private static final List<String> SERVER_SUBSCRIPTIONS = Collections.singletonList(ServerService.STATUS);",
      "right" : "private static final List<String> SERVER_SUBSCRIPTIONS = Collections.singletonList(ServerService.STATUS);",
      "info" : "FieldDeclaration[3727-3832]:FieldDeclaration[3855-3960]"
    }, {
      "left" : "private static final Logger LOG = Logger.getInstance(\"#com.jetbrains.lang.dart.analyzer.DartAnalysisServerService\");",
      "right" : "private static final Logger LOG = Logger.getInstance(\"#com.jetbrains.lang.dart.analyzer.DartAnalysisServerService\");",
      "info" : "FieldDeclaration[3835-3951]:FieldDeclaration[3963-4079]"
    }, {
      "left" : "private final Object myLock = new Object();",
      "right" : "private final Object myLock = new Object();",
      "info" : "FieldDeclaration[3955-3998]:FieldDeclaration[4083-4126]"
    }, {
      "left" : "@Nullable private AnalysisServer myServer;",
      "right" : "@Nullable private AnalysisServer myServer;",
      "info" : "FieldDeclaration[4083-4125]:FieldDeclaration[4211-4253]"
    }, {
      "left" : "@Nullable private StdioServerSocket myServerSocket;",
      "right" : "@Nullable private StdioServerSocket myServerSocket;",
      "info" : "FieldDeclaration[4128-4179]:FieldDeclaration[4256-4307]"
    }, {
      "left" : "@NotNull private String myServerVersion = \"\";",
      "right" : "@NotNull private String myServerVersion = \"\";",
      "info" : "FieldDeclaration[4183-4228]:FieldDeclaration[4311-4356]"
    }, {
      "left" : "@NotNull private String mySdkVersion = \"\";",
      "right" : "@NotNull private String mySdkVersion = \"\";",
      "info" : "FieldDeclaration[4231-4273]:FieldDeclaration[4359-4401]"
    }, {
      "left" : "@Nullable private String mySdkHome = null;",
      "right" : "@Nullable private String mySdkHome = null;",
      "info" : "FieldDeclaration[4276-4318]:FieldDeclaration[4404-4446]"
    }, {
      "left" : "private final DartServerRootsHandler myRootsHandler = new DartServerRootsHandler();",
      "right" : "private final DartServerRootsHandler myRootsHandler = new DartServerRootsHandler();",
      "info" : "FieldDeclaration[4321-4404]:FieldDeclaration[4449-4532]"
    }, {
      "left" : "private final Map<String, Long> myFilePathWithOverlaidContentToTimestamp = new THashMap<String, Long>();",
      "right" : "private final Map<String, Long> myFilePathWithOverlaidContentToTimestamp = new THashMap<String, Long>();",
      "info" : "FieldDeclaration[4407-4511]:FieldDeclaration[4535-4639]"
    }, {
      "left" : "private final List<String> myVisibleFiles = new ArrayList<String>();",
      "right" : "private final List<String> myVisibleFiles = new ArrayList<String>();",
      "info" : "FieldDeclaration[4514-4582]:FieldDeclaration[4642-4710]"
    }, {
      "left" : "private final Set<String> myFilePathsWithUnsentChanges = Sets.newConcurrentHashSet();",
      "right" : "private final Set<String> myFilePathsWithUnsentChanges = Sets.newConcurrentHashSet();",
      "info" : "FieldDeclaration[4585-4670]:FieldDeclaration[4713-4798]"
    }, {
      "left" : "@NotNull private final Queue<CompletionInfo> myCompletionInfos = new LinkedList<CompletionInfo>();",
      "right" : "@NotNull private final Queue<CompletionInfo> myCompletionInfos = new LinkedList<CompletionInfo>();",
      "info" : "FieldDeclaration[4674-4772]:FieldDeclaration[4802-4900]"
    }, {
      "left" : "@NotNull private final Map<String, List<PluginHighlightRegion>> myHighlightData = Maps.newHashMap();",
      "right" : "@NotNull private final Map<String, List<PluginHighlightRegion>> myHighlightData = Maps.newHashMap();",
      "info" : "FieldDeclaration[4775-4875]:FieldDeclaration[5009-5109]"
    }, {
      "left" : "@NotNull private final Map<String, List<PluginNavigationRegion>> myNavigationData = Maps.newHashMap();",
      "right" : "@NotNull private final Map<String, List<PluginNavigationRegion>> myNavigationData = Maps.newHashMap();",
      "info" : "FieldDeclaration[4878-4980]:FieldDeclaration[5112-5214]"
    }, {
      "left" : "@NotNull final AtomicBoolean myServerBusy = new AtomicBoolean(false);",
      "right" : "@NotNull final AtomicBoolean myServerBusy = new AtomicBoolean(false);",
      "info" : "FieldDeclaration[4984-5053]:FieldDeclaration[5218-5287]"
    }, {
      "left" : "@NotNull final Alarm myShowServerProgressAlarm = new Alarm();",
      "right" : "@NotNull final Alarm myShowServerProgressAlarm = new Alarm();",
      "info" : "FieldDeclaration[5056-5117]:FieldDeclaration[5290-5351]"
    }, {
      "left" : "public void computedErrors(@NotNull final String file, @NotNull final List<AnalysisError> errors)",
      "right" : "public void computedErrors(@NotNull final String file, @NotNull final List<AnalysisError> errors)",
      "info" : "MethodDeclaration[5228-5425]:MethodDeclaration[5462-5659]"
    }, {
      "left" : "public void computedHighlights(String file, List<HighlightRegion> regions)",
      "right" : "public void computedHighlights(String file, List<HighlightRegion> regions)",
      "info" : "MethodDeclaration[5431-6316]:MethodDeclaration[5665-6550]"
    }, {
      "left" : "public void computedNavigation(String file, List<NavigationRegion> regions)",
      "right" : "public void computedNavigation(String file, List<NavigationRegion> regions)",
      "info" : "MethodDeclaration[6322-7249]:MethodDeclaration[6556-7483]"
    }, {
      "left" : "public void flushedResults(List<String> files)",
      "right" : "public void flushedResults(List<String> files)",
      "info" : "MethodDeclaration[7255-7463]:MethodDeclaration[7489-7697]"
    }, {
      "left" : "public void computedCompletion(@NotNull final String completionId,\n                                   final int replacementOffset,\n                                   final int replacementLength,\n                                   @NotNull final List<CompletionSuggestion> completions,\n                                   final boolean isLast)",
      "right" : "public void computedCompletion(@NotNull final String completionId,\n                                   final int replacementOffset,\n                                   final int replacementLength,\n                                   @NotNull final List<CompletionSuggestion> completions,\n                                   final boolean isLast)",
      "info" : "MethodDeclaration[7469-8044]:MethodDeclaration[7703-8278]"
    }, {
      "left" : "public void serverConnected(@Nullable String version)",
      "right" : "public void serverConnected(@Nullable String version)",
      "info" : "MethodDeclaration[8050-8181]:MethodDeclaration[8573-8704]"
    }, {
      "left" : "public void serverError(boolean isFatal, @Nullable String message, @Nullable String stackTrace)",
      "right" : "public void serverError(boolean isFatal, @Nullable String message, @Nullable String stackTrace)",
      "info" : "MethodDeclaration[8187-8702]:MethodDeclaration[8710-9225]"
    }, {
      "left" : "public void serverStatus(@Nullable final AnalysisStatus analysisStatus, @Nullable final PubStatus pubStatus)",
      "right" : "public void serverStatus(@Nullable final AnalysisStatus analysisStatus, @Nullable final PubStatus pubStatus)",
      "info" : "MethodDeclaration[8708-10603]:MethodDeclaration[9231-11126]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[9167-10033]:MethodDeclaration[9690-10556]"
    }, {
      "left" : "public void run(@NotNull ProgressIndicator indicator)",
      "right" : "public void run(@NotNull ProgressIndicator indicator)",
      "info" : "MethodDeclaration[9442-9938]:MethodDeclaration[9965-10461]"
    }, {
      "left" : "public static boolean isDartSdkVersionSufficient(@NotNull final DartSdk sdk)",
      "right" : "public static boolean isDartSdkVersionSufficient(@NotNull final DartSdk sdk)",
      "info" : "MethodDeclaration[10612-10779]:MethodDeclaration[11135-11302]"
    }, {
      "left" : "private void forceFileAnnotation(String file)",
      "right" : "private void forceFileAnnotation(String file)",
      "info" : "MethodDeclaration[10783-11200]:MethodDeclaration[11306-11723]"
    }, {
      "left" : "public void addCompletions(@NotNull final String completionId,\n                             @NotNull final CompletionSuggestionProcessor processor)",
      "right" : "public void addCompletions(@NotNull final String completionId, @NotNull final CompletionSuggestionProcessor processor)",
      "info" : "MethodDeclaration[11204-12395]:MethodDeclaration[11727-12889]"
    }, {
      "left" : "FormatResult",
      "right" : "FormatResult",
      "info" : "TypeDeclaration[12399-12975]:TypeDeclaration[12893-13469]"
    }, {
      "left" : "@Nullable private final List<SourceEdit> myEdits;",
      "right" : "@Nullable private final List<SourceEdit> myEdits;",
      "info" : "FieldDeclaration[12438-12487]:FieldDeclaration[12932-12981]"
    }, {
      "left" : "private final int myOffset;",
      "right" : "private final int myOffset;",
      "info" : "FieldDeclaration[12492-12519]:FieldDeclaration[12986-13013]"
    }, {
      "left" : "private final int myLength;",
      "right" : "private final int myLength;",
      "info" : "FieldDeclaration[12524-12551]:FieldDeclaration[13018-13045]"
    }, {
      "left" : "public FormatResult(@Nullable final List<SourceEdit> edits, final int selectionOffset, final int selectionLength)",
      "right" : "public FormatResult(@Nullable final List<SourceEdit> edits, final int selectionOffset, final int selectionLength)",
      "info" : "MethodDeclaration[12557-12769]:MethodDeclaration[13051-13263]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[12775-12828]:MethodDeclaration[13269-13322]"
    }, {
      "left" : "public int getOffset()",
      "right" : "public int getOffset()",
      "info" : "MethodDeclaration[12834-12887]:MethodDeclaration[13328-13381]"
    }, {
      "left" : "public List<SourceEdit> getEdits()",
      "right" : "public List<SourceEdit> getEdits()",
      "info" : "MethodDeclaration[12893-12971]:MethodDeclaration[13387-13465]"
    }, {
      "left" : "LibraryDependenciesResult",
      "right" : "LibraryDependenciesResult",
      "info" : "TypeDeclaration[12979-13594]:TypeDeclaration[13473-14088]"
    }, {
      "left" : "@Nullable final String[] libraries;",
      "right" : "@Nullable final String[] libraries;",
      "info" : "FieldDeclaration[13031-13066]:FieldDeclaration[13525-13560]"
    }, {
      "left" : "@Nullable final Map<String, Map<String, List<String>>> packageMap;",
      "right" : "@Nullable final Map<String, Map<String, List<String>>> packageMap;",
      "info" : "FieldDeclaration[13072-13138]:FieldDeclaration[13566-13632]"
    }, {
      "left" : "public LibraryDependenciesResult(@Nullable final String[] libraries,\n                                     @Nullable final Map<String, Map<String, List<String>>> packageMap)",
      "right" : "public LibraryDependenciesResult(@Nullable final String[] libraries,\n                                     @Nullable final Map<String, Map<String, List<String>>> packageMap)",
      "info" : "MethodDeclaration[13144-13394]:MethodDeclaration[13638-13888]"
    }, {
      "left" : "public String[] getLibraries()",
      "right" : "public String[] getLibraries()",
      "info" : "MethodDeclaration[13400-13476]:MethodDeclaration[13894-13970]"
    }, {
      "left" : "public Map<String, Map<String, List<String>>> getPackageMap()",
      "right" : "public Map<String, Map<String, List<String>>> getPackageMap()",
      "info" : "MethodDeclaration[13482-13590]:MethodDeclaration[13976-14084]"
    }, {
      "left" : "public DartAnalysisServerService()",
      "right" : "public DartAnalysisServerService()",
      "info" : "MethodDeclaration[13598-15638]:MethodDeclaration[14092-16132]"
    }, {
      "left" : "public void dispose()",
      "right" : "public void dispose()",
      "info" : "MethodDeclaration[13719-13772]:MethodDeclaration[14213-14266]"
    }, {
      "left" : "public void logError(String message)",
      "right" : "public void logError(String message)",
      "info" : "MethodDeclaration[13866-13956]:MethodDeclaration[14360-14450]"
    }, {
      "left" : "public void logError(String message, Throwable exception)",
      "right" : "public void logError(String message, Throwable exception)",
      "info" : "MethodDeclaration[13964-14086]:MethodDeclaration[14458-14580]"
    }, {
      "left" : "public void logInformation(String message)",
      "right" : "public void logInformation(String message)",
      "info" : "MethodDeclaration[14094-14190]:MethodDeclaration[14588-14684]"
    }, {
      "left" : "public void logInformation(String message, Throwable exception)",
      "right" : "public void logInformation(String message, Throwable exception)",
      "info" : "MethodDeclaration[14198-14326]:MethodDeclaration[14692-14820]"
    }, {
      "left" : "public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file)",
      "right" : "public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[14507-14926]:MethodDeclaration[15001-15420]"
    }, {
      "left" : "public void selectionChanged(@NotNull FileEditorManagerEvent event)",
      "right" : "public void selectionChanged(@NotNull FileEditorManagerEvent event)",
      "info" : "MethodDeclaration[14936-15173]:MethodDeclaration[15430-15667]"
    }, {
      "left" : "public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file)",
      "right" : "public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[15183-15395]:MethodDeclaration[15677-15889]"
    }, {
      "left" : "public void beforeDocumentChange(DocumentEvent e)",
      "right" : "public void beforeDocumentChange(DocumentEvent e)",
      "info" : "MethodDeclaration[15511-15626]:MethodDeclaration[16005-16120]"
    }, {
      "left" : "public static DartAnalysisServerService getInstance()",
      "right" : "public static DartAnalysisServerService getInstance()",
      "info" : "MethodDeclaration[15642-15783]:MethodDeclaration[16136-16277]"
    }, {
      "left" : "public List<PluginHighlightRegion> getHighlight(@NotNull final VirtualFile file)",
      "right" : "public List<PluginHighlightRegion> getHighlight(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[15787-16218]:MethodDeclaration[16281-16712]"
    }, {
      "left" : "public List<PluginNavigationRegion> getNavigation(@NotNull final VirtualFile file)",
      "right" : "public List<PluginNavigationRegion> getNavigation(@NotNull final VirtualFile file)",
      "info" : "MethodDeclaration[16222-16660]:MethodDeclaration[16716-17154]"
    }, {
      "left" : "void updateVisibleFiles()",
      "right" : "void updateVisibleFiles()",
      "info" : "MethodDeclaration[16664-17378]:MethodDeclaration[17158-17872]"
    }, {
      "left" : "private static boolean isDartOrHtmlFile(@Nullable final VirtualFile file)",
      "right" : "private static boolean isDartOrHtmlFile(@Nullable final VirtualFile file)",
      "info" : "MethodDeclaration[17382-17591]:MethodDeclaration[17876-18085]"
    }, {
      "left" : "public void updateFilesContent()",
      "right" : "public void updateFilesContent()",
      "info" : "MethodDeclaration[17595-20338]:MethodDeclaration[18089-20832]"
    }, {
      "left" : "public void onResponse()",
      "right" : "public void onResponse()",
      "info" : "MethodDeclaration[19714-19822]:MethodDeclaration[20208-20316]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[19962-20081]:MethodDeclaration[20456-20575]"
    }, {
      "left" : "public boolean updateRoots(@NotNull final List<String> includedRoots,\n                             @NotNull final List<String> excludedRoots,\n                             @Nullable final Map<String, String> packageRoots)",
      "right" : "public boolean updateRoots(@NotNull final List<String> includedRoots,\n                             @NotNull final List<String> excludedRoots,\n                             @Nullable final Map<String, String> packageRoots)",
      "info" : "MethodDeclaration[20342-21447]:MethodDeclaration[20836-21941]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[21166-21301]:MethodDeclaration[21660-21795]"
    }, {
      "left" : "private void updateProblemsView(@NotNull final String filePath, @NotNull final List<AnalysisError> errors)",
      "right" : "private void updateProblemsView(@NotNull final String filePath, @NotNull final List<AnalysisError> errors)",
      "info" : "MethodDeclaration[21451-22240]:MethodDeclaration[21945-22734]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[21637-22228]:MethodDeclaration[22131-22722]"
    }, {
      "left" : "public AnalysisError[] analysis_getErrors(@NotNull final DartAnalysisServerAnnotator.AnnotatorInfo info)",
      "right" : "public AnalysisError[] analysis_getErrors(@NotNull final DartAnalysisServerAnnotator.AnnotatorInfo info)",
      "info" : "MethodDeclaration[22244-24860]:MethodDeclaration[22738-25354]"
    }, {
      "left" : "public void computedErrors(final AnalysisError[] errors)",
      "right" : "public void computedErrors(final AnalysisError[] errors)",
      "info" : "MethodDeclaration[22816-23830]:MethodDeclaration[23310-24324]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[23292-23786]:MethodDeclaration[23786-24280]"
    }, {
      "left" : "public void onError(final RequestError error)",
      "right" : "public void onError(final RequestError error)",
      "info" : "MethodDeclaration[23842-24012]:MethodDeclaration[24336-24506]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[24152-24262]:MethodDeclaration[24646-24756]"
    }, {
      "left" : "public LibraryDependenciesResult analysis_getLibraryDependencies()",
      "right" : "public LibraryDependenciesResult analysis_getLibraryDependencies()",
      "info" : "MethodDeclaration[24864-26532]:MethodDeclaration[25358-27026]"
    }, {
      "left" : "public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap)",
      "right" : "public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap)",
      "info" : "MethodDeclaration[25359-25680]:MethodDeclaration[25853-26174]"
    }, {
      "left" : "public void onError(final RequestError error)",
      "right" : "public void onError(final RequestError error)",
      "info" : "MethodDeclaration[25692-25871]:MethodDeclaration[26186-26365]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[26011-26124]:MethodDeclaration[26505-26618]"
    }, {
      "left" : "public List<AnalysisErrorFixes> edit_getFixes(@NotNull final String _filePath, final int offset)",
      "right" : "public List<AnalysisErrorFixes> edit_getFixes(@NotNull final String _filePath, final int offset)",
      "info" : "MethodDeclaration[26536-28039]:MethodDeclaration[27030-28533]"
    }, {
      "left" : "public void computedFixes(final List<AnalysisErrorFixes> fixes)",
      "right" : "public void computedFixes(final List<AnalysisErrorFixes> fixes)",
      "info" : "MethodDeclaration[27025-27176]:MethodDeclaration[27519-27670]"
    }, {
      "left" : "public void onError(final RequestError error)",
      "right" : "public void onError(final RequestError error)",
      "info" : "MethodDeclaration[27186-27343]:MethodDeclaration[27680-27837]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[27475-27582]:MethodDeclaration[27969-28076]"
    }, {
      "left" : "public String completion_getSuggestions(@NotNull final String filePath, final int offset)",
      "right" : "public String completion_getSuggestions(@NotNull final String filePath, final int offset)",
      "info" : "MethodDeclaration[28043-29557]:MethodDeclaration[30945-32459]"
    }, {
      "left" : "public void computedCompletionId(@NotNull final String completionId)",
      "right" : "public void computedCompletionId(@NotNull final String completionId)",
      "info" : "MethodDeclaration[28430-28593]:MethodDeclaration[31332-31495]"
    }, {
      "left" : "public void onError(@NotNull final RequestError error)",
      "right" : "public void onError(@NotNull final RequestError error)",
      "info" : "MethodDeclaration[28603-28819]:MethodDeclaration[31505-31721]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[28951-29070]:MethodDeclaration[31853-31972]"
    }, {
      "left" : "public FormatResult edit_format(@NotNull final String filePath,\n                                  final int selectionOffset,\n                                  final int selectionLength,\n                                  final int lineLength)",
      "right" : "public FormatResult edit_format(@NotNull final String filePath,\n                                  final int selectionOffset,\n                                  final int selectionLength,\n                                  final int lineLength)",
      "info" : "MethodDeclaration[29561-31352]:MethodDeclaration[32463-34254]"
    }, {
      "left" : "public void computedFormat(final List<SourceEdit> edits, final int selectionOffset, final int selectionLength)",
      "right" : "public void computedFormat(final List<SourceEdit> edits, final int selectionOffset, final int selectionLength)",
      "info" : "MethodDeclaration[30096-30346]:MethodDeclaration[32998-33248]"
    }, {
      "left" : "public void onError(final RequestError error)",
      "right" : "public void onError(final RequestError error)",
      "info" : "MethodDeclaration[30356-30588]:MethodDeclaration[33258-33490]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[30720-30863]:MethodDeclaration[33622-33765]"
    }, {
      "left" : "public SourceFileEdit edit_sortMembers(@NotNull final String filePath)",
      "right" : "public SourceFileEdit edit_sortMembers(@NotNull final String filePath)",
      "info" : "MethodDeclaration[31356-32731]:MethodDeclaration[34258-35633]"
    }, {
      "left" : "public void computedEdit(final SourceFileEdit edit)",
      "right" : "public void computedEdit(final SourceFileEdit edit)",
      "info" : "MethodDeclaration[31734-31872]:MethodDeclaration[34636-34774]"
    }, {
      "left" : "public void onError(final RequestError error)",
      "right" : "public void onError(final RequestError error)",
      "info" : "MethodDeclaration[31882-32042]:MethodDeclaration[34784-34944]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[32174-32276]:MethodDeclaration[35076-35178]"
    }, {
      "left" : "public boolean analysis_reanalyze(@Nullable final List<String> roots)",
      "right" : "public boolean analysis_reanalyze(@Nullable final List<String> roots)",
      "info" : "MethodDeclaration[32735-33407]:MethodDeclaration[35637-36309]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[33144-33235]:MethodDeclaration[36046-36137]"
    }, {
      "left" : "private boolean analysis_setPriorityFiles()",
      "right" : "private boolean analysis_setPriorityFiles()",
      "info" : "MethodDeclaration[33411-34106]:MethodDeclaration[36313-37008]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[33791-33898]:MethodDeclaration[36693-36800]"
    }, {
      "left" : "private boolean analysis_setSubscriptions()",
      "right" : "private boolean analysis_setSubscriptions()",
      "info" : "MethodDeclaration[34110-34994]:MethodDeclaration[37012-37896]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[34704-34810]:MethodDeclaration[37606-37712]"
    }, {
      "left" : "private void startServer(@NotNull final DartSdk sdk)",
      "right" : "private void startServer(@NotNull final DartSdk sdk)",
      "info" : "MethodDeclaration[34998-37602]:MethodDeclaration[37900-40504]"
    }, {
      "left" : "public void println(String str)",
      "right" : "public void println(String str)",
      "info" : "MethodDeclaration[35738-35854]:MethodDeclaration[38640-38756]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[37027-37186]:MethodDeclaration[39929-40088]"
    }, {
      "left" : "public boolean serverReadyForRequest(@NotNull final Project project, @NotNull final DartSdk sdk)",
      "right" : "public boolean serverReadyForRequest(@NotNull final Project project, @NotNull final DartSdk sdk)",
      "info" : "MethodDeclaration[37606-38132]:MethodDeclaration[40508-41034]"
    }, {
      "left" : "private void stopServer()",
      "right" : "private void stopServer()",
      "info" : "MethodDeclaration[38136-38766]:MethodDeclaration[41038-41668]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[38461-38550]:MethodDeclaration[41363-41452]"
    }, {
      "left" : "private void onServerStopped()",
      "right" : "private void onServerStopped()",
      "info" : "MethodDeclaration[38770-39420]:MethodDeclaration[41672-42322]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[39109-39369]:MethodDeclaration[42011-42271]"
    }, {
      "left" : "private void stopShowingServerProgress()",
      "right" : "private void stopShowingServerProgress()",
      "info" : "MethodDeclaration[39424-39622]:MethodDeclaration[42326-42524]"
    }, {
      "left" : "private void logError(@NotNull final String methodName, @Nullable final String filePath, @NotNull final RequestError error)",
      "right" : "private void logError(@NotNull final String methodName, @Nullable final String filePath, @NotNull final RequestError error)",
      "info" : "MethodDeclaration[39626-40494]:MethodDeclaration[42528-43396]"
    }, {
      "left" : "private static boolean runInPooledThreadAndWait(@NotNull final Runnable runnable,\n                                                  @NotNull final String runnableInfo,\n                                                  final long timeout)",
      "right" : "private static boolean runInPooledThreadAndWait(@NotNull final Runnable runnable,\n                                                  @NotNull final String runnableInfo,\n                                                  final long timeout)",
      "info" : "MethodDeclaration[40498-41522]:MethodDeclaration[43400-44424]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[40972-41168]:MethodDeclaration[43874-44070]"
    }, {
      "left" : "private void updateInformationFromServer(DocumentEvent e)",
      "right" : "private void updateInformationFromServer(DocumentEvent e)",
      "info" : "MethodDeclaration[41526-42673]:MethodDeclaration[44428-45575]"
    }, {
      "left" : "CompletionInfo",
      "right" : "CompletionInfo",
      "info" : "TypeDeclaration[42677-43435]:TypeDeclaration[45579-46337]"
    }, {
      "left" : "@NotNull final String myCompletionId;",
      "right" : "@NotNull final String myCompletionId;",
      "info" : "FieldDeclaration[42719-42756]:FieldDeclaration[45621-45658]"
    }, {
      "left" : "final int myReplacementOffset;",
      "right" : "final int myReplacementOffset;",
      "info" : "FieldDeclaration[42761-42791]:FieldDeclaration[45663-45693]"
    }, {
      "left" : "final int myReplacementLength;",
      "right" : "final int myReplacementLength;",
      "info" : "FieldDeclaration[42796-42826]:FieldDeclaration[45698-45728]"
    }, {
      "left" : "@NotNull final List<CompletionSuggestion> myCompletions;",
      "right" : "@NotNull final List<CompletionSuggestion> myCompletions;",
      "info" : "FieldDeclaration[42831-42887]:FieldDeclaration[45733-45789]"
    }, {
      "left" : "final boolean isLast;",
      "right" : "final boolean isLast;",
      "info" : "FieldDeclaration[42892-42913]:FieldDeclaration[45794-45815]"
    }, {
      "left" : "public CompletionInfo(@NotNull final String completionId,\n                          final int replacementOffset,\n                          final int replacementLength,\n                          @NotNull final List<CompletionSuggestion> completions,\n                          boolean isLast)",
      "right" : "public CompletionInfo(@NotNull final String completionId,\n                          final int replacementOffset,\n                          final int replacementLength,\n                          @NotNull final List<CompletionSuggestion> completions,\n                          boolean isLast)",
      "info" : "MethodDeclaration[42919-43431]:MethodDeclaration[45821-46333]"
    }, {
      "left" : "PluginHighlightRegion",
      "right" : "PluginHighlightRegion",
      "info" : "TypeDeclaration[43439-43991]:TypeDeclaration[46341-46893]"
    }, {
      "left" : "public static final List<PluginHighlightRegion> EMPTY_LIST = Lists.newArrayList();",
      "right" : "public static final List<PluginHighlightRegion> EMPTY_LIST = Lists.newArrayList();",
      "info" : "FieldDeclaration[43487-43569]:FieldDeclaration[46389-46471]"
    }, {
      "left" : "private int offset;",
      "right" : "private int offset;",
      "info" : "FieldDeclaration[43575-43594]:FieldDeclaration[46477-46496]"
    }, {
      "left" : "private int length;",
      "right" : "private int length;",
      "info" : "FieldDeclaration[43599-43618]:FieldDeclaration[46501-46520]"
    }, {
      "left" : "private final String type;",
      "right" : "private final String type;",
      "info" : "FieldDeclaration[43623-43649]:FieldDeclaration[46525-46551]"
    }, {
      "left" : "private PluginHighlightRegion(HighlightRegion region)",
      "right" : "private PluginHighlightRegion(HighlightRegion region)",
      "info" : "MethodDeclaration[43655-43817]:MethodDeclaration[46557-46719]"
    }, {
      "left" : "public int getOffset()",
      "right" : "public int getOffset()",
      "info" : "MethodDeclaration[43823-43874]:MethodDeclaration[46725-46776]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[43880-43931]:MethodDeclaration[46782-46833]"
    }, {
      "left" : "public String getType()",
      "right" : "public String getType()",
      "info" : "MethodDeclaration[43937-43987]:MethodDeclaration[46839-46889]"
    }, {
      "left" : "PluginNavigationRegion",
      "right" : "PluginNavigationRegion",
      "info" : "TypeDeclaration[43996-44728]:TypeDeclaration[46898-47630]"
    }, {
      "left" : "public static final List<PluginNavigationRegion> EMPTY_LIST = Lists.newArrayList();",
      "right" : "public static final List<PluginNavigationRegion> EMPTY_LIST = Lists.newArrayList();",
      "info" : "FieldDeclaration[44045-44128]:FieldDeclaration[46947-47030]"
    }, {
      "left" : "private int offset;",
      "right" : "private int offset;",
      "info" : "FieldDeclaration[44134-44153]:FieldDeclaration[47036-47055]"
    }, {
      "left" : "private int length;",
      "right" : "private int length;",
      "info" : "FieldDeclaration[44158-44177]:FieldDeclaration[47060-47079]"
    }, {
      "left" : "private final List<PluginNavigationTarget> targets = Lists.newArrayList();",
      "right" : "private final List<PluginNavigationTarget> targets = Lists.newArrayList();",
      "info" : "FieldDeclaration[44182-44256]:FieldDeclaration[47084-47158]"
    }, {
      "left" : "private PluginNavigationRegion(NavigationRegion region)",
      "right" : "private PluginNavigationRegion(NavigationRegion region)",
      "info" : "MethodDeclaration[44262-44526]:MethodDeclaration[47164-47428]"
    }, {
      "left" : "public int getOffset()",
      "right" : "public int getOffset()",
      "info" : "MethodDeclaration[44532-44583]:MethodDeclaration[47434-47485]"
    }, {
      "left" : "public int getLength()",
      "right" : "public int getLength()",
      "info" : "MethodDeclaration[44589-44640]:MethodDeclaration[47491-47542]"
    }, {
      "left" : "public List<PluginNavigationTarget> getTargets()",
      "right" : "public List<PluginNavigationTarget> getTargets()",
      "info" : "MethodDeclaration[44646-44724]:MethodDeclaration[47548-47626]"
    }, {
      "left" : "PluginNavigationTarget",
      "right" : "PluginNavigationTarget",
      "info" : "TypeDeclaration[44732-45117]:TypeDeclaration[47634-48019]"
    }, {
      "left" : "private final String file;",
      "right" : "private final String file;",
      "info" : "FieldDeclaration[44781-44807]:FieldDeclaration[47683-47709]"
    }, {
      "left" : "private int offset;",
      "right" : "private int offset;",
      "info" : "FieldDeclaration[44812-44831]:FieldDeclaration[47714-47733]"
    }, {
      "left" : "private PluginNavigationTarget(NavigationTarget target)",
      "right" : "private PluginNavigationTarget(NavigationTarget target)",
      "info" : "MethodDeclaration[44837-45000]:MethodDeclaration[47739-47902]"
    }, {
      "left" : "public String getFile()",
      "right" : "public String getFile()",
      "info" : "MethodDeclaration[45006-45056]:MethodDeclaration[47908-47958]"
    }, {
      "left" : "public int getOffset()",
      "right" : "public int getOffset()",
      "info" : "MethodDeclaration[45062-45113]:MethodDeclaration[47964-48015]"
    }, {
      "left" : "CompletionSuggestionProcessor",
      "right" : "CompletionSuggestionProcessor",
      "info" : "TypeDeclaration[45121-45224]:TypeDeclaration[48023-48126]"
    }, {
      "left" : "void process(CompletionSuggestion suggestion);",
      "right" : "void process(CompletionSuggestion suggestion);",
      "info" : "MethodDeclaration[45174-45220]:MethodDeclaration[48076-48122]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5340-5425]:Block[5574-5659]"
    }, {
      "left" : "updateProblemsView(DartProblemsViewImpl.createGroupName(file), errors);",
      "right" : "updateProblemsView(DartProblemsViewImpl.createGroupName(file), errors);",
      "info" : "ExpressionStatement[5348-5419]:ExpressionStatement[5582-5653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5520-6316]:Block[5754-6550]"
    }, {
      "left" : "if (DartResolver.isServerDrivenResolution())",
      "right" : "if (DartResolver.isServerDrivenResolution())",
      "info" : "IfStatement[5528-6310]:IfStatement[5762-6544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5573-6310]:Block[5807-6544]"
    }, {
      "left" : "file = FileUtil.toSystemIndependentName(file);",
      "right" : "file = FileUtil.toSystemIndependentName(file);",
      "info" : "ExpressionStatement[5583-5629]:ExpressionStatement[5817-5863]"
    }, {
      "left" : "if (myFilePathsWithUnsentChanges.contains(file))",
      "right" : "if (myFilePathsWithUnsentChanges.contains(file))",
      "info" : "IfStatement[5744-5822]:IfStatement[5978-6056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5793-5822]:Block[6027-6056]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5805-5812]:ReturnStatement[6039-6046]"
    }, {
      "left" : "List<PluginHighlightRegion> pluginRegions = Lists.newArrayList();",
      "right" : "List<PluginHighlightRegion> pluginRegions = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[5900-5965]:VariableDeclarationStatement[6134-6199]"
    }, {
      "left" : "for (HighlightRegion region : regions)",
      "right" : "for (HighlightRegion region : regions)",
      "info" : "EnhancedForStatement[5974-6088]:EnhancedForStatement[6208-6322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6013-6088]:Block[6247-6322]"
    }, {
      "left" : "pluginRegions.add(new PluginHighlightRegion(region));",
      "right" : "pluginRegions.add(new PluginHighlightRegion(region));",
      "info" : "ExpressionStatement[6025-6078]:ExpressionStatement[6259-6312]"
    }, {
      "left" : "synchronized (myHighlightData) {\n          myHighlightData.put(file, pluginRegions);\n        }",
      "right" : "synchronized (myHighlightData) {\n          myHighlightData.put(file, pluginRegions);\n        }",
      "info" : "SynchronizedStatement[6138-6232]:SynchronizedStatement[6372-6466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6169-6232]:Block[6403-6466]"
    }, {
      "left" : "myHighlightData.put(file, pluginRegions);",
      "right" : "myHighlightData.put(file, pluginRegions);",
      "info" : "ExpressionStatement[6181-6222]:ExpressionStatement[6415-6456]"
    }, {
      "left" : "forceFileAnnotation(file);",
      "right" : "forceFileAnnotation(file);",
      "info" : "ExpressionStatement[6276-6302]:ExpressionStatement[6510-6536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6412-7249]:Block[6646-7483]"
    }, {
      "left" : "if (DartResolver.isServerDrivenResolution())",
      "right" : "if (DartResolver.isServerDrivenResolution())",
      "info" : "IfStatement[6420-7243]:IfStatement[6654-7477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6465-7243]:Block[6699-7477]"
    }, {
      "left" : "file = FileUtil.toSystemIndependentName(file);",
      "right" : "file = FileUtil.toSystemIndependentName(file);",
      "info" : "ExpressionStatement[6475-6521]:ExpressionStatement[6709-6755]"
    }, {
      "left" : "if (myFilePathsWithUnsentChanges.contains(file))",
      "right" : "if (myFilePathsWithUnsentChanges.contains(file))",
      "info" : "IfStatement[6636-6714]:IfStatement[6870-6948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6685-6714]:Block[6919-6948]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6697-6704]:ReturnStatement[6931-6938]"
    }, {
      "left" : "List<PluginNavigationRegion> pluginRegions = new ArrayList<PluginNavigationRegion>(regions.size());",
      "right" : "List<PluginNavigationRegion> pluginRegions = new ArrayList<PluginNavigationRegion>(regions.size());",
      "info" : "VariableDeclarationStatement[6794-6893]:VariableDeclarationStatement[7028-7127]"
    }, {
      "left" : "for (NavigationRegion region : regions)",
      "right" : "for (NavigationRegion region : regions)",
      "info" : "EnhancedForStatement[6902-7018]:EnhancedForStatement[7136-7252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6942-7018]:Block[7176-7252]"
    }, {
      "left" : "pluginRegions.add(new PluginNavigationRegion(region));",
      "right" : "pluginRegions.add(new PluginNavigationRegion(region));",
      "info" : "ExpressionStatement[6954-7008]:ExpressionStatement[7188-7242]"
    }, {
      "left" : "synchronized (myNavigationData) {\n          myNavigationData.put(file, pluginRegions);\n        }",
      "right" : "synchronized (myNavigationData) {\n          myNavigationData.put(file, pluginRegions);\n        }",
      "info" : "SynchronizedStatement[7069-7165]:SynchronizedStatement[7303-7399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7101-7165]:Block[7335-7399]"
    }, {
      "left" : "myNavigationData.put(file, pluginRegions);",
      "right" : "myNavigationData.put(file, pluginRegions);",
      "info" : "ExpressionStatement[7113-7155]:ExpressionStatement[7347-7389]"
    }, {
      "left" : "forceFileAnnotation(file);",
      "right" : "forceFileAnnotation(file);",
      "info" : "ExpressionStatement[7209-7235]:ExpressionStatement[7443-7469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7316-7463]:Block[7550-7697]"
    }, {
      "left" : "for (String file : files)",
      "right" : "for (String file : files)",
      "info" : "EnhancedForStatement[7324-7457]:EnhancedForStatement[7558-7691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7350-7457]:Block[7584-7691]"
    }, {
      "left" : "updateProblemsView(DartProblemsViewImpl.createGroupName(file), AnalysisError.EMPTY_LIST);",
      "right" : "updateProblemsView(DartProblemsViewImpl.createGroupName(file), AnalysisError.EMPTY_LIST);",
      "info" : "ExpressionStatement[7360-7449]:ExpressionStatement[7594-7683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7825-8044]:Block[8059-8278]"
    }, {
      "left" : "synchronized (myCompletionInfos) {\n        myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));\n        myCompletionInfos.notifyAll();\n      }",
      "right" : "synchronized (myCompletionInfos) {\n        myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));\n        myCompletionInfos.notifyAll();\n      }",
      "info" : "SynchronizedStatement[7833-8038]:SynchronizedStatement[8067-8272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7866-8038]:Block[8100-8272]"
    }, {
      "left" : "myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));",
      "right" : "myCompletionInfos.add(new CompletionInfo(completionId, replacementOffset, replacementLength, completions, isLast));",
      "info" : "ExpressionStatement[7876-7991]:ExpressionStatement[8110-8225]"
    }, {
      "left" : "myCompletionInfos.notifyAll();",
      "right" : "myCompletionInfos.notifyAll();",
      "info" : "ExpressionStatement[8000-8030]:ExpressionStatement[8234-8264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8118-8181]:Block[8641-8704]"
    }, {
      "left" : "myServerVersion = version != null ? version : \"\";",
      "right" : "myServerVersion = version != null ? version : \"\";",
      "info" : "ExpressionStatement[8126-8175]:ExpressionStatement[8649-8698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8297-8702]:Block[8820-9225]"
    }, {
      "left" : "if (message == null)",
      "right" : "if (message == null)",
      "info" : "IfStatement[8305-8357]:IfStatement[8828-8880]"
    }, {
      "left" : "message = \"<no error message>\";",
      "right" : "message = \"<no error message>\";",
      "info" : "ExpressionStatement[8326-8357]:ExpressionStatement[8849-8880]"
    }, {
      "left" : "if (stackTrace == null)",
      "right" : "if (stackTrace == null)",
      "info" : "IfStatement[8364-8420]:IfStatement[8887-8943]"
    }, {
      "left" : "stackTrace = \"<no stack trace>\";",
      "right" : "stackTrace = \"<no stack trace>\";",
      "info" : "ExpressionStatement[8388-8420]:ExpressionStatement[8911-8943]"
    }, {
      "left" : "LOG.error(\"Dart analysis server, SDK version \" + mySdkVersion +\n                \", server version \" + myServerVersion +\n                \", \" + (isFatal ? \"FATAL \" : \"\") + \"error: \" + message + \"\\n\" + stackTrace);",
      "right" : "LOG.error(\"Dart analysis server, SDK version \" + mySdkVersion +\n                \", server version \" + myServerVersion +\n                \", \" + (isFatal ? \"FATAL \" : \"\") + \"error: \" + message + \"\\n\" + stackTrace);",
      "info" : "ExpressionStatement[8427-8639]:ExpressionStatement[8950-9162]"
    }, {
      "left" : "if (isFatal)",
      "right" : "if (isFatal)",
      "info" : "IfStatement[8647-8696]:IfStatement[9170-9219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8660-8696]:Block[9183-9219]"
    }, {
      "left" : "onServerStopped();",
      "right" : "onServerStopped();",
      "info" : "ExpressionStatement[8670-8688]:ExpressionStatement[9193-9211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8831-10603]:Block[9354-11126]"
    }, {
      "left" : "if (analysisStatus != null && analysisStatus.isAnalyzing() || pubStatus != null && pubStatus.isListingPackageDirs())",
      "right" : "if (analysisStatus != null && analysisStatus.isAnalyzing() || pubStatus != null && pubStatus.isListingPackageDirs())",
      "info" : "IfStatement[8839-10597]:IfStatement[9362-11120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8956-10539]:Block[9479-11062]"
    }, {
      "left" : "if (myServerBusy.compareAndSet(false, true))",
      "right" : "if (myServerBusy.compareAndSet(false, true))",
      "info" : "IfStatement[8966-10531]:IfStatement[9489-11054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9011-10531]:Block[9534-11054]"
    }, {
      "left" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "right" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "info" : "EnhancedForStatement[9023-10521]:EnhancedForStatement[9546-11044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9089-10521]:Block[9612-11044]"
    }, {
      "left" : "final Runnable delayedRunnable = new Runnable() {\n              public void run() {\n                if (project.isDisposed() || !myServerBusy.get()) return;\n\n                final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {/* unlucky */}\n                      }\n                    }\n                  };\n\n                ProgressManager.getInstance().run(task);\n              }\n            };",
      "right" : "final Runnable delayedRunnable = new Runnable() {\n              public void run() {\n                if (project.isDisposed() || !myServerBusy.get()) return;\n\n                final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {/* unlucky */}\n                      }\n                    }\n                  };\n\n                ProgressManager.getInstance().run(task);\n              }\n            };",
      "info" : "VariableDeclarationStatement[9103-10048]:VariableDeclarationStatement[9626-10571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9185-10033]:Block[9708-10556]"
    }, {
      "left" : "if (project.isDisposed() || !myServerBusy.get())",
      "right" : "if (project.isDisposed() || !myServerBusy.get())",
      "info" : "IfStatement[9203-9259]:IfStatement[9726-9782]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[9252-9259]:ReturnStatement[9775-9782]"
    }, {
      "left" : "final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {/* unlucky */}\n                      }\n                    }\n                  };",
      "right" : "final Task.Backgroundable task =\n                  new Task.Backgroundable(project, DartBundle.message(\"dart.analysis.progress.title\"), false) {\n                    @Override\n                    public void run(@NotNull ProgressIndicator indicator) {\n                      if (myServerBusy.get()) {\n                        try {\n                          synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }\n                        }\n                        catch (InterruptedException e) {/* unlucky */}\n                      }\n                    }\n                  };",
      "info" : "VariableDeclarationStatement[9277-9959]:VariableDeclarationStatement[9800-10482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9526-9938]:Block[10049-10461]"
    }, {
      "left" : "if (myServerBusy.get())",
      "right" : "if (myServerBusy.get())",
      "info" : "IfStatement[9550-9916]:IfStatement[10073-10439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9574-9916]:Block[10097-10439]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9600-9892]:TryStatement[10123-10415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9604-9821]:Block[10127-10344]"
    }, {
      "left" : "synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }",
      "right" : "synchronized (myServerBusy) {\n                            //noinspection WaitNotInLoop\n                            myServerBusy.wait();\n                          }",
      "info" : "SynchronizedStatement[9632-9795]:SynchronizedStatement[10155-10318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9660-9795]:Block[10183-10318]"
    }, {
      "left" : "myServerBusy.wait();",
      "right" : "myServerBusy.wait();",
      "info" : "ExpressionStatement[9747-9767]:ExpressionStatement[10270-10290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9877-9892]:Block[10400-10415]"
    }, {
      "left" : "ProgressManager.getInstance().run(task);",
      "right" : "ProgressManager.getInstance().run(task);",
      "info" : "ExpressionStatement[9977-10017]:ExpressionStatement[10500-10540]"
    }, {
      "left" : "final int delay = pubStatus != null && pubStatus.isListingPackageDirs() ? 50 : 300;",
      "right" : "final int delay = pubStatus != null && pubStatus.isListingPackageDirs() ? 50 : 300;",
      "info" : "VariableDeclarationStatement[10331-10414]:VariableDeclarationStatement[10854-10937]"
    }, {
      "left" : "myShowServerProgressAlarm.addRequest(delayedRunnable, delay, ModalityState.any());",
      "right" : "myShowServerProgressAlarm.addRequest(delayedRunnable, delay, ModalityState.any());",
      "info" : "ExpressionStatement[10427-10509]:ExpressionStatement[10950-11032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10551-10597]:Block[11074-11120]"
    }, {
      "left" : "stopShowingServerProgress();",
      "right" : "stopShowingServerProgress();",
      "info" : "ExpressionStatement[10561-10589]:ExpressionStatement[11084-11112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10689-10779]:Block[11212-11302]"
    }, {
      "left" : "return StringUtil.compareVersionNumbers(sdk.getVersion(), MIN_SDK_VERSION) >= 0;",
      "right" : "return StringUtil.compareVersionNumbers(sdk.getVersion(), MIN_SDK_VERSION) >= 0;",
      "info" : "ReturnStatement[10695-10775]:ReturnStatement[11218-11298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10829-11200]:Block[11352-11723]"
    }, {
      "left" : "final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(file);",
      "right" : "final VirtualFile virtualFile = LocalFileSystem.getInstance().findFileByPath(file);",
      "info" : "VariableDeclarationStatement[10835-10918]:VariableDeclarationStatement[11358-11441]"
    }, {
      "left" : "if (virtualFile != null)",
      "right" : "if (virtualFile != null)",
      "info" : "IfStatement[10923-11196]:IfStatement[11446-11719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10948-11196]:Block[11471-11719]"
    }, {
      "left" : "Set<Project> projects = myRootsHandler.getTrackedProjects();",
      "right" : "Set<Project> projects = myRootsHandler.getTrackedProjects();",
      "info" : "VariableDeclarationStatement[10956-11016]:VariableDeclarationStatement[11479-11539]"
    }, {
      "left" : "for (final Project project : projects)",
      "right" : "for (final Project project : projects)",
      "info" : "EnhancedForStatement[11023-11190]:EnhancedForStatement[11546-11713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11062-11190]:Block[11585-11713]"
    }, {
      "left" : "ResolveCache.getInstance(project).clearCache(true);",
      "right" : "ResolveCache.getInstance(project).clearCache(true);",
      "info" : "ExpressionStatement[11072-11123]:ExpressionStatement[11595-11646]"
    }, {
      "left" : "DaemonCodeAnalyzer.getInstance(project).restart();",
      "right" : "DaemonCodeAnalyzer.getInstance(project).restart();",
      "info" : "ExpressionStatement[11132-11182]:ExpressionStatement[11655-11705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11352-12395]:Block[11846-12889]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[11358-12391]:WhileStatement[11852-12885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11371-12391]:Block[11865-12885]"
    }, {
      "left" : "ProgressManager.checkCanceled();",
      "right" : "ProgressManager.checkCanceled();",
      "info" : "ExpressionStatement[11379-11411]:ExpressionStatement[11873-11905]"
    }, {
      "left" : "synchronized (myCompletionInfos) {\n        // todo in case of several AnalysisServerListenerAdapter.computedCompletion() invocations for one completion (only the last\n        // invocation has isLast==true) it looks like each next List<CompletionSuggestion> also contains all items that were already\n        // given in previous invocations. If it is by design we should optimize cycle and handle only the last in queue.\n\n        CompletionInfo completionInfo;\n        while ((completionInfo = myCompletionInfos.poll()) != null) {\n          if (!completionInfo.myCompletionId.equals(completionId)) continue;\n\n          for (final CompletionSuggestion completion : completionInfo.myCompletions) {\n            processor.process(completion);\n          }\n\n          if (completionInfo.isLast) return;\n        }\n\n        try {\n          myCompletionInfos.wait(CHECK_CANCELLED_PERIOD);\n        }\n        catch (InterruptedException e) {\n          return;\n        }\n      }",
      "right" : "synchronized (myCompletionInfos) {\n        // todo in case of several AnalysisServerListenerAdapter.computedCompletion() invocations for one completion (only the last\n        // invocation has isLast==true) it looks like each next List<CompletionSuggestion> also contains all items that were already\n        // given in previous invocations. If it is by design we should optimize cycle and handle only the last in queue.\n\n        CompletionInfo completionInfo;\n        while ((completionInfo = myCompletionInfos.poll()) != null) {\n          if (!completionInfo.myCompletionId.equals(completionId)) continue;\n\n          for (final CompletionSuggestion completion : completionInfo.myCompletions) {\n            processor.process(completion);\n          }\n\n          if (completionInfo.isLast) return;\n        }\n\n        try {\n          myCompletionInfos.wait(CHECK_CANCELLED_PERIOD);\n        }\n        catch (InterruptedException e) {\n          return;\n        }\n      }",
      "info" : "SynchronizedStatement[11419-12385]:SynchronizedStatement[11913-12879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11452-12385]:Block[11946-12879]"
    }, {
      "left" : "CompletionInfo completionInfo;",
      "right" : "CompletionInfo completionInfo;",
      "info" : "VariableDeclarationStatement[11849-11879]:VariableDeclarationStatement[12343-12373]"
    }, {
      "left" : "while ((completionInfo = myCompletionInfos.poll()) != null)",
      "right" : "while ((completionInfo = myCompletionInfos.poll()) != null)",
      "info" : "WhileStatement[11888-12225]:WhileStatement[12382-12719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11948-12225]:Block[12442-12719]"
    }, {
      "left" : "if (!completionInfo.myCompletionId.equals(completionId))",
      "right" : "if (!completionInfo.myCompletionId.equals(completionId))",
      "info" : "IfStatement[11960-12026]:IfStatement[12454-12520]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12017-12026]:ContinueStatement[12511-12520]"
    }, {
      "left" : "for (final CompletionSuggestion completion : completionInfo.myCompletions)",
      "right" : "for (final CompletionSuggestion completion : completionInfo.myCompletions)",
      "info" : "EnhancedForStatement[12038-12169]:EnhancedForStatement[12532-12663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12113-12169]:Block[12607-12663]"
    }, {
      "left" : "processor.process(completion);",
      "right" : "processor.process(completion);",
      "info" : "ExpressionStatement[12127-12157]:ExpressionStatement[12621-12651]"
    }, {
      "left" : "if (completionInfo.isLast)",
      "right" : "if (completionInfo.isLast)",
      "info" : "IfStatement[12181-12215]:IfStatement[12675-12709]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12208-12215]:ReturnStatement[12702-12709]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[12235-12377]:TryStatement[12729-12871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12239-12308]:Block[12733-12802]"
    }, {
      "left" : "myCompletionInfos.wait(CHECK_CANCELLED_PERIOD);",
      "right" : "myCompletionInfos.wait(CHECK_CANCELLED_PERIOD);",
      "info" : "ExpressionStatement[12251-12298]:ExpressionStatement[12745-12792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12348-12377]:Block[12842-12871]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12360-12367]:ReturnStatement[12854-12861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12671-12769]:Block[13165-13263]"
    }, {
      "left" : "myEdits = edits;",
      "right" : "myEdits = edits;",
      "info" : "ExpressionStatement[12679-12695]:ExpressionStatement[13173-13189]"
    }, {
      "left" : "myOffset = selectionOffset;",
      "right" : "myOffset = selectionOffset;",
      "info" : "ExpressionStatement[12702-12729]:ExpressionStatement[13196-13223]"
    }, {
      "left" : "myLength = selectionLength;",
      "right" : "myLength = selectionLength;",
      "info" : "ExpressionStatement[12736-12763]:ExpressionStatement[13230-13257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12798-12828]:Block[13292-13322]"
    }, {
      "left" : "return myLength;",
      "right" : "return myLength;",
      "info" : "ReturnStatement[12806-12822]:ReturnStatement[13300-13316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12857-12887]:Block[13351-13381]"
    }, {
      "left" : "return myOffset;",
      "right" : "return myOffset;",
      "info" : "ReturnStatement[12865-12881]:ReturnStatement[13359-13375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12942-12971]:Block[13436-13465]"
    }, {
      "left" : "return myEdits;",
      "right" : "return myEdits;",
      "info" : "ReturnStatement[12950-12965]:ReturnStatement[13444-13459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13317-13394]:Block[13811-13888]"
    }, {
      "left" : "this.libraries = libraries;",
      "right" : "this.libraries = libraries;",
      "info" : "ExpressionStatement[13325-13352]:ExpressionStatement[13819-13846]"
    }, {
      "left" : "this.packageMap = packageMap;",
      "right" : "this.packageMap = packageMap;",
      "info" : "ExpressionStatement[13359-13388]:ExpressionStatement[13853-13882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13445-13476]:Block[13939-13970]"
    }, {
      "left" : "return libraries;",
      "right" : "return libraries;",
      "info" : "ReturnStatement[13453-13470]:ReturnStatement[13947-13964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13558-13590]:Block[14052-14084]"
    }, {
      "left" : "return packageMap;",
      "right" : "return packageMap;",
      "info" : "ReturnStatement[13566-13584]:ReturnStatement[14060-14078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13633-15638]:Block[14127-16132]"
    }, {
      "left" : "Disposer.register(ApplicationManager.getApplication(), new Disposable() {\n      public void dispose() {\n        stopServer();\n      }\n    });",
      "right" : "Disposer.register(ApplicationManager.getApplication(), new Disposable() {\n      public void dispose() {\n        stopServer();\n      }\n    });",
      "info" : "ExpressionStatement[13639-13780]:ExpressionStatement[14133-14274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13741-13772]:Block[14235-14266]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[13751-13764]:ExpressionStatement[14245-14258]"
    }, {
      "left" : "Logging.setLogger(new com.google.dart.server.utilities.logging.Logger() {\n      @Override\n      public void logError(String message) {\n        LOG.error(message);\n      }\n\n      @Override\n      public void logError(String message, Throwable exception) {\n        LOG.error(message, exception);\n      }\n\n      @Override\n      public void logInformation(String message) {\n        LOG.debug(message);\n      }\n\n      @Override\n      public void logInformation(String message, Throwable exception) {\n        LOG.debug(message, exception);\n      }\n    });",
      "right" : "Logging.setLogger(new com.google.dart.server.utilities.logging.Logger() {\n      @Override\n      public void logError(String message) {\n        LOG.error(message);\n      }\n\n      @Override\n      public void logError(String message, Throwable exception) {\n        LOG.error(message, exception);\n      }\n\n      @Override\n      public void logInformation(String message) {\n        LOG.debug(message);\n      }\n\n      @Override\n      public void logInformation(String message, Throwable exception) {\n        LOG.debug(message, exception);\n      }\n    });",
      "info" : "ExpressionStatement[13786-14334]:ExpressionStatement[14280-14828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13919-13956]:Block[14413-14450]"
    }, {
      "left" : "LOG.error(message);",
      "right" : "LOG.error(message);",
      "info" : "ExpressionStatement[13929-13948]:ExpressionStatement[14423-14442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14038-14086]:Block[14532-14580]"
    }, {
      "left" : "LOG.error(message, exception);",
      "right" : "LOG.error(message, exception);",
      "info" : "ExpressionStatement[14048-14078]:ExpressionStatement[14542-14572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14153-14190]:Block[14647-14684]"
    }, {
      "left" : "LOG.debug(message);",
      "right" : "LOG.debug(message);",
      "info" : "ExpressionStatement[14163-14182]:ExpressionStatement[14657-14676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14278-14326]:Block[14772-14820]"
    }, {
      "left" : "LOG.debug(message, exception);",
      "right" : "LOG.debug(message, exception);",
      "info" : "ExpressionStatement[14288-14318]:ExpressionStatement[14782-14812]"
    }, {
      "left" : "ApplicationManager.getApplication().getMessageBus().connect()\n      .subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, new FileEditorManagerAdapter() {\n        @Override\n        public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n          if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE) {\n            DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());\n          }\n\n          if (isDartOrHtmlFile(file)) {\n            updateVisibleFiles();\n          }\n        }\n\n        @Override\n        public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n          if (isDartOrHtmlFile(event.getOldFile()) || isDartOrHtmlFile(event.getNewFile())) {\n            updateVisibleFiles();\n          }\n        }\n\n        @Override\n        public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n          if (isDartOrHtmlFile(file)) {\n            updateVisibleFiles();\n          }\n        }\n      });",
      "right" : "ApplicationManager.getApplication().getMessageBus().connect()\n      .subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, new FileEditorManagerAdapter() {\n        @Override\n        public void fileOpened(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n          if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE) {\n            DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());\n          }\n\n          if (isDartOrHtmlFile(file)) {\n            updateVisibleFiles();\n          }\n        }\n\n        @Override\n        public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n          if (isDartOrHtmlFile(event.getOldFile()) || isDartOrHtmlFile(event.getNewFile())) {\n            updateVisibleFiles();\n          }\n        }\n\n        @Override\n        public void fileClosed(@NotNull final FileEditorManager source, @NotNull final VirtualFile file) {\n          if (isDartOrHtmlFile(file)) {\n            updateVisibleFiles();\n          }\n        }\n      });",
      "info" : "ExpressionStatement[14340-15405]:ExpressionStatement[14834-15899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14622-14926]:Block[15116-15420]"
    }, {
      "left" : "if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE)",
      "right" : "if (PubspecYamlUtil.PUBSPEC_YAML.equals(file.getName()) || file.getFileType() == DartFileType.INSTANCE)",
      "info" : "IfStatement[14634-14829]:IfStatement[15128-15323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14738-14829]:Block[15232-15323]"
    }, {
      "left" : "DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());",
      "right" : "DartSdkUpdateChecker.mayBeCheckForSdkUpdate(source.getProject());",
      "info" : "ExpressionStatement[14752-14817]:ExpressionStatement[15246-15311]"
    }, {
      "left" : "if (isDartOrHtmlFile(file))",
      "right" : "if (isDartOrHtmlFile(file))",
      "info" : "IfStatement[14841-14916]:IfStatement[15335-15410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14869-14916]:Block[15363-15410]"
    }, {
      "left" : "updateVisibleFiles();",
      "right" : "updateVisibleFiles();",
      "info" : "ExpressionStatement[14883-14904]:ExpressionStatement[15377-15398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15022-15173]:Block[15516-15667]"
    }, {
      "left" : "if (isDartOrHtmlFile(event.getOldFile()) || isDartOrHtmlFile(event.getNewFile()))",
      "right" : "if (isDartOrHtmlFile(event.getOldFile()) || isDartOrHtmlFile(event.getNewFile()))",
      "info" : "IfStatement[15034-15163]:IfStatement[15528-15657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15116-15163]:Block[15610-15657]"
    }, {
      "left" : "updateVisibleFiles();",
      "right" : "updateVisibleFiles();",
      "info" : "ExpressionStatement[15130-15151]:ExpressionStatement[15624-15645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15298-15395]:Block[15792-15889]"
    }, {
      "left" : "if (isDartOrHtmlFile(file))",
      "right" : "if (isDartOrHtmlFile(file))",
      "info" : "IfStatement[15310-15385]:IfStatement[15804-15879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15338-15385]:Block[15832-15879]"
    }, {
      "left" : "updateVisibleFiles();",
      "right" : "updateVisibleFiles();",
      "info" : "ExpressionStatement[15352-15373]:ExpressionStatement[15846-15867]"
    }, {
      "left" : "EditorFactory.getInstance().getEventMulticaster().addDocumentListener(new DocumentAdapter() {\n      @Override\n      public void beforeDocumentChange(DocumentEvent e) {\n        updateInformationFromServer(e);\n      }\n    });",
      "right" : "EditorFactory.getInstance().getEventMulticaster().addDocumentListener(new DocumentAdapter() {\n      @Override\n      public void beforeDocumentChange(DocumentEvent e) {\n        updateInformationFromServer(e);\n      }\n    });",
      "info" : "ExpressionStatement[15411-15634]:ExpressionStatement[15905-16128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15577-15626]:Block[16071-16120]"
    }, {
      "left" : "updateInformationFromServer(e);",
      "right" : "updateInformationFromServer(e);",
      "info" : "ExpressionStatement[15587-15618]:ExpressionStatement[16081-16112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15707-15783]:Block[16201-16277]"
    }, {
      "left" : "return ServiceManager.getService(DartAnalysisServerService.class);",
      "right" : "return ServiceManager.getService(DartAnalysisServerService.class);",
      "info" : "ReturnStatement[15713-15779]:ReturnStatement[16207-16273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15981-16218]:Block[16475-16712]"
    }, {
      "left" : "synchronized (myHighlightData) {\n      List<PluginHighlightRegion> regions = myHighlightData.get(file.getPath());\n      if (regions == null) {\n        return PluginHighlightRegion.EMPTY_LIST;\n      }\n      return regions;\n    }",
      "right" : "synchronized (myHighlightData) {\n      List<PluginHighlightRegion> regions = myHighlightData.get(file.getPath());\n      if (regions == null) {\n        return PluginHighlightRegion.EMPTY_LIST;\n      }\n      return regions;\n    }",
      "info" : "SynchronizedStatement[15987-16214]:SynchronizedStatement[16481-16708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16018-16214]:Block[16512-16708]"
    }, {
      "left" : "List<PluginHighlightRegion> regions = myHighlightData.get(file.getPath());",
      "right" : "List<PluginHighlightRegion> regions = myHighlightData.get(file.getPath());",
      "info" : "VariableDeclarationStatement[16026-16100]:VariableDeclarationStatement[16520-16594]"
    }, {
      "left" : "if (regions == null)",
      "right" : "if (regions == null)",
      "info" : "IfStatement[16107-16186]:IfStatement[16601-16680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16128-16186]:Block[16622-16680]"
    }, {
      "left" : "return PluginHighlightRegion.EMPTY_LIST;",
      "right" : "return PluginHighlightRegion.EMPTY_LIST;",
      "info" : "ReturnStatement[16138-16178]:ReturnStatement[16632-16672]"
    }, {
      "left" : "return regions;",
      "right" : "return regions;",
      "info" : "ReturnStatement[16193-16208]:ReturnStatement[16687-16702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16419-16660]:Block[16913-17154]"
    }, {
      "left" : "synchronized (myNavigationData) {\n      List<PluginNavigationRegion> regions = myNavigationData.get(file.getPath());\n      if (regions == null) {\n        return PluginNavigationRegion.EMPTY_LIST;\n      }\n      return regions;\n    }",
      "right" : "synchronized (myNavigationData) {\n      List<PluginNavigationRegion> regions = myNavigationData.get(file.getPath());\n      if (regions == null) {\n        return PluginNavigationRegion.EMPTY_LIST;\n      }\n      return regions;\n    }",
      "info" : "SynchronizedStatement[16425-16656]:SynchronizedStatement[16919-17150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16457-16656]:Block[16951-17150]"
    }, {
      "left" : "List<PluginNavigationRegion> regions = myNavigationData.get(file.getPath());",
      "right" : "List<PluginNavigationRegion> regions = myNavigationData.get(file.getPath());",
      "info" : "VariableDeclarationStatement[16465-16541]:VariableDeclarationStatement[16959-17035]"
    }, {
      "left" : "if (regions == null)",
      "right" : "if (regions == null)",
      "info" : "IfStatement[16548-16628]:IfStatement[17042-17122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16569-16628]:Block[17063-17122]"
    }, {
      "left" : "return PluginNavigationRegion.EMPTY_LIST;",
      "right" : "return PluginNavigationRegion.EMPTY_LIST;",
      "info" : "ReturnStatement[16579-16620]:ReturnStatement[17073-17114]"
    }, {
      "left" : "return regions;",
      "right" : "return regions;",
      "info" : "ReturnStatement[16635-16650]:ReturnStatement[17129-17144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16690-17378]:Block[17184-17872]"
    }, {
      "left" : "synchronized (myLock) {\n      final List<String> newVisibleFiles = new ArrayList<String>();\n\n      for (Project project : myRootsHandler.getTrackedProjects()) {\n        for (VirtualFile file : FileEditorManager.getInstance(project).getSelectedFiles()) {\n          if (file.isInLocalFileSystem() && isDartOrHtmlFile(file)) {\n            newVisibleFiles.add(FileUtil.toSystemDependentName(file.getPath()));\n          }\n        }\n      }\n\n      if (!Comparing.haveEqualElements(myVisibleFiles, newVisibleFiles)) {\n        myVisibleFiles.clear();\n        myVisibleFiles.addAll(newVisibleFiles);\n        analysis_setPriorityFiles();\n        analysis_setSubscriptions();\n      }\n    }",
      "right" : "synchronized (myLock) {\n      final List<String> newVisibleFiles = new ArrayList<String>();\n\n      for (Project project : myRootsHandler.getTrackedProjects()) {\n        for (VirtualFile file : FileEditorManager.getInstance(project).getSelectedFiles()) {\n          if (file.isInLocalFileSystem() && isDartOrHtmlFile(file)) {\n            newVisibleFiles.add(FileUtil.toSystemDependentName(file.getPath()));\n          }\n        }\n      }\n\n      if (!Comparing.haveEqualElements(myVisibleFiles, newVisibleFiles)) {\n        myVisibleFiles.clear();\n        myVisibleFiles.addAll(newVisibleFiles);\n        analysis_setPriorityFiles();\n        analysis_setSubscriptions();\n      }\n    }",
      "info" : "SynchronizedStatement[16696-17374]:SynchronizedStatement[17190-17868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16718-17374]:Block[17212-17868]"
    }, {
      "left" : "final List<String> newVisibleFiles = new ArrayList<String>();",
      "right" : "final List<String> newVisibleFiles = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[16726-16787]:VariableDeclarationStatement[17220-17281]"
    }, {
      "left" : "for (Project project : myRootsHandler.getTrackedProjects())",
      "right" : "for (Project project : myRootsHandler.getTrackedProjects())",
      "info" : "EnhancedForStatement[16795-17130]:EnhancedForStatement[17289-17624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16855-17130]:Block[17349-17624]"
    }, {
      "left" : "for (VirtualFile file : FileEditorManager.getInstance(project).getSelectedFiles())",
      "right" : "for (VirtualFile file : FileEditorManager.getInstance(project).getSelectedFiles())",
      "info" : "EnhancedForStatement[16865-17122]:EnhancedForStatement[17359-17616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16948-17122]:Block[17442-17616]"
    }, {
      "left" : "if (file.isInLocalFileSystem() && isDartOrHtmlFile(file))",
      "right" : "if (file.isInLocalFileSystem() && isDartOrHtmlFile(file))",
      "info" : "IfStatement[16960-17112]:IfStatement[17454-17606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17018-17112]:Block[17512-17606]"
    }, {
      "left" : "newVisibleFiles.add(FileUtil.toSystemDependentName(file.getPath()));",
      "right" : "newVisibleFiles.add(FileUtil.toSystemDependentName(file.getPath()));",
      "info" : "ExpressionStatement[17032-17100]:ExpressionStatement[17526-17594]"
    }, {
      "left" : "if (!Comparing.haveEqualElements(myVisibleFiles, newVisibleFiles))",
      "right" : "if (!Comparing.haveEqualElements(myVisibleFiles, newVisibleFiles))",
      "info" : "IfStatement[17138-17368]:IfStatement[17632-17862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17205-17368]:Block[17699-17862]"
    }, {
      "left" : "myVisibleFiles.clear();",
      "right" : "myVisibleFiles.clear();",
      "info" : "ExpressionStatement[17215-17238]:ExpressionStatement[17709-17732]"
    }, {
      "left" : "myVisibleFiles.addAll(newVisibleFiles);",
      "right" : "myVisibleFiles.addAll(newVisibleFiles);",
      "info" : "ExpressionStatement[17247-17286]:ExpressionStatement[17741-17780]"
    }, {
      "left" : "analysis_setPriorityFiles();",
      "right" : "analysis_setPriorityFiles();",
      "info" : "ExpressionStatement[17295-17323]:ExpressionStatement[17789-17817]"
    }, {
      "left" : "analysis_setSubscriptions();",
      "right" : "analysis_setSubscriptions();",
      "info" : "ExpressionStatement[17332-17360]:ExpressionStatement[17826-17854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17483-17591]:Block[17977-18085]"
    }, {
      "left" : "return file != null && (file.getFileType() == DartFileType.INSTANCE || HtmlUtil.isHtmlFile(file));",
      "right" : "return file != null && (file.getFileType() == DartFileType.INSTANCE || HtmlUtil.isHtmlFile(file));",
      "info" : "ReturnStatement[17489-17587]:ReturnStatement[17983-18081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17628-20338]:Block[18122-20832]"
    }, {
      "left" : "final Set<String> oldTrackedFiles = new THashSet<String>(myFilePathWithOverlaidContentToTimestamp.keySet());",
      "right" : "final Set<String> oldTrackedFiles = new THashSet<String>(myFilePathWithOverlaidContentToTimestamp.keySet());",
      "info" : "VariableDeclarationStatement[17754-17862]:VariableDeclarationStatement[18248-18356]"
    }, {
      "left" : "final Map<String, Object> filesToUpdate = new THashMap<String, Object>();",
      "right" : "final Map<String, Object> filesToUpdate = new THashMap<String, Object>();",
      "info" : "VariableDeclarationStatement[17867-17940]:VariableDeclarationStatement[18361-18434]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return;\n\n      final FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();\n      for (Document document : fileDocumentManager.getUnsavedDocuments()) {\n        final VirtualFile file = fileDocumentManager.getFile(document);\n        if (isDartOrHtmlFile(file)) {\n          oldTrackedFiles.remove(file.getPath());\n\n          final Long oldTimestamp = myFilePathWithOverlaidContentToTimestamp.get(file.getPath());\n          if (oldTimestamp == null || document.getModificationStamp() != oldTimestamp) {\n            filesToUpdate.put(FileUtil.toSystemDependentName(file.getPath()), new AddContentOverlay(document.getText()));\n            myFilePathWithOverlaidContentToTimestamp.put(file.getPath(), document.getModificationStamp());\n          }\n        }\n      }\n\n      // oldTrackedFiles at this point contains only those files that are not in FileDocumentManager.getUnsavedDocuments() any more\n      for (String oldPath : oldTrackedFiles) {\n        final Long removed = myFilePathWithOverlaidContentToTimestamp.remove(oldPath);\n        LOG.assertTrue(removed != null, oldPath);\n        filesToUpdate.put(FileUtil.toSystemDependentName(oldPath), new RemoveContentOverlay());\n      }\n\n      if (LOG.isDebugEnabled()) {\n        if (!filesToUpdate.isEmpty()) {\n          LOG.debug(\"Sending overlaid content of the following files:\\n\" + StringUtil.join(filesToUpdate.keySet(), \",\\n\"));\n        }\n\n        if (!oldTrackedFiles.isEmpty()) {\n          LOG.debug(\"Removing overlaid content of the following files:\\n\" + StringUtil.join(oldTrackedFiles, \",\\n\"));\n        }\n      }\n\n      if (!filesToUpdate.isEmpty()) {\n        final UpdateContentConsumer consumer = new UpdateContentConsumer() {\n          @Override\n          public void onResponse() {\n            myFilePathsWithUnsentChanges.clear();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateContent(filesToUpdate, consumer);\n          }\n        }, \"analysis_updateContent(\" + StringUtil.join(filesToUpdate.keySet(), \", \") + \")\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          //noinspection UnnecessaryReturnStatement\n          return;\n        }\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return;\n\n      final FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();\n      for (Document document : fileDocumentManager.getUnsavedDocuments()) {\n        final VirtualFile file = fileDocumentManager.getFile(document);\n        if (isDartOrHtmlFile(file)) {\n          oldTrackedFiles.remove(file.getPath());\n\n          final Long oldTimestamp = myFilePathWithOverlaidContentToTimestamp.get(file.getPath());\n          if (oldTimestamp == null || document.getModificationStamp() != oldTimestamp) {\n            filesToUpdate.put(FileUtil.toSystemDependentName(file.getPath()), new AddContentOverlay(document.getText()));\n            myFilePathWithOverlaidContentToTimestamp.put(file.getPath(), document.getModificationStamp());\n          }\n        }\n      }\n\n      // oldTrackedFiles at this point contains only those files that are not in FileDocumentManager.getUnsavedDocuments() any more\n      for (String oldPath : oldTrackedFiles) {\n        final Long removed = myFilePathWithOverlaidContentToTimestamp.remove(oldPath);\n        LOG.assertTrue(removed != null, oldPath);\n        filesToUpdate.put(FileUtil.toSystemDependentName(oldPath), new RemoveContentOverlay());\n      }\n\n      if (LOG.isDebugEnabled()) {\n        if (!filesToUpdate.isEmpty()) {\n          LOG.debug(\"Sending overlaid content of the following files:\\n\" + StringUtil.join(filesToUpdate.keySet(), \",\\n\"));\n        }\n\n        if (!oldTrackedFiles.isEmpty()) {\n          LOG.debug(\"Removing overlaid content of the following files:\\n\" + StringUtil.join(oldTrackedFiles, \",\\n\"));\n        }\n      }\n\n      if (!filesToUpdate.isEmpty()) {\n        final UpdateContentConsumer consumer = new UpdateContentConsumer() {\n          @Override\n          public void onResponse() {\n            myFilePathsWithUnsentChanges.clear();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateContent(filesToUpdate, consumer);\n          }\n        }, \"analysis_updateContent(\" + StringUtil.join(filesToUpdate.keySet(), \", \") + \")\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          //noinspection UnnecessaryReturnStatement\n          return;\n        }\n      }\n    }",
      "info" : "SynchronizedStatement[17946-20334]:SynchronizedStatement[18440-20828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17968-20334]:Block[18462-20828]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[17976-18005]:IfStatement[18470-18499]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[17998-18005]:ReturnStatement[18492-18499]"
    }, {
      "left" : "final FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();",
      "right" : "final FileDocumentManager fileDocumentManager = FileDocumentManager.getInstance();",
      "info" : "VariableDeclarationStatement[18013-18095]:VariableDeclarationStatement[18507-18589]"
    }, {
      "left" : "for (Document document : fileDocumentManager.getUnsavedDocuments())",
      "right" : "for (Document document : fileDocumentManager.getUnsavedDocuments())",
      "info" : "EnhancedForStatement[18102-18778]:EnhancedForStatement[18596-19272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18170-18778]:Block[18664-19272]"
    }, {
      "left" : "final VirtualFile file = fileDocumentManager.getFile(document);",
      "right" : "final VirtualFile file = fileDocumentManager.getFile(document);",
      "info" : "VariableDeclarationStatement[18180-18243]:VariableDeclarationStatement[18674-18737]"
    }, {
      "left" : "if (isDartOrHtmlFile(file))",
      "right" : "if (isDartOrHtmlFile(file))",
      "info" : "IfStatement[18252-18770]:IfStatement[18746-19264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18280-18770]:Block[18774-19264]"
    }, {
      "left" : "oldTrackedFiles.remove(file.getPath());",
      "right" : "oldTrackedFiles.remove(file.getPath());",
      "info" : "ExpressionStatement[18292-18331]:ExpressionStatement[18786-18825]"
    }, {
      "left" : "final Long oldTimestamp = myFilePathWithOverlaidContentToTimestamp.get(file.getPath());",
      "right" : "final Long oldTimestamp = myFilePathWithOverlaidContentToTimestamp.get(file.getPath());",
      "info" : "VariableDeclarationStatement[18343-18430]:VariableDeclarationStatement[18837-18924]"
    }, {
      "left" : "if (oldTimestamp == null || document.getModificationStamp() != oldTimestamp)",
      "right" : "if (oldTimestamp == null || document.getModificationStamp() != oldTimestamp)",
      "info" : "IfStatement[18441-18760]:IfStatement[18935-19254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18518-18760]:Block[19012-19254]"
    }, {
      "left" : "filesToUpdate.put(FileUtil.toSystemDependentName(file.getPath()), new AddContentOverlay(document.getText()));",
      "right" : "filesToUpdate.put(FileUtil.toSystemDependentName(file.getPath()), new AddContentOverlay(document.getText()));",
      "info" : "ExpressionStatement[18532-18641]:ExpressionStatement[19026-19135]"
    }, {
      "left" : "myFilePathWithOverlaidContentToTimestamp.put(file.getPath(), document.getModificationStamp());",
      "right" : "myFilePathWithOverlaidContentToTimestamp.put(file.getPath(), document.getModificationStamp());",
      "info" : "ExpressionStatement[18654-18748]:ExpressionStatement[19148-19242]"
    }, {
      "left" : "for (String oldPath : oldTrackedFiles)",
      "right" : "for (String oldPath : oldTrackedFiles)",
      "info" : "EnhancedForStatement[18918-19199]:EnhancedForStatement[19412-19693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18957-19199]:Block[19451-19693]"
    }, {
      "left" : "final Long removed = myFilePathWithOverlaidContentToTimestamp.remove(oldPath);",
      "right" : "final Long removed = myFilePathWithOverlaidContentToTimestamp.remove(oldPath);",
      "info" : "VariableDeclarationStatement[18967-19045]:VariableDeclarationStatement[19461-19539]"
    }, {
      "left" : "LOG.assertTrue(removed != null, oldPath);",
      "right" : "LOG.assertTrue(removed != null, oldPath);",
      "info" : "ExpressionStatement[19054-19095]:ExpressionStatement[19548-19589]"
    }, {
      "left" : "filesToUpdate.put(FileUtil.toSystemDependentName(oldPath), new RemoveContentOverlay());",
      "right" : "filesToUpdate.put(FileUtil.toSystemDependentName(oldPath), new RemoveContentOverlay());",
      "info" : "ExpressionStatement[19104-19191]:ExpressionStatement[19598-19685]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[19207-19587]:IfStatement[19701-20081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19233-19587]:Block[19727-20081]"
    }, {
      "left" : "if (!filesToUpdate.isEmpty())",
      "right" : "if (!filesToUpdate.isEmpty())",
      "info" : "IfStatement[19243-19408]:IfStatement[19737-19902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19273-19408]:Block[19767-19902]"
    }, {
      "left" : "LOG.debug(\"Sending overlaid content of the following files:\\n\" + StringUtil.join(filesToUpdate.keySet(), \",\\n\"));",
      "right" : "LOG.debug(\"Sending overlaid content of the following files:\\n\" + StringUtil.join(filesToUpdate.keySet(), \",\\n\"));",
      "info" : "ExpressionStatement[19285-19398]:ExpressionStatement[19779-19892]"
    }, {
      "left" : "if (!oldTrackedFiles.isEmpty())",
      "right" : "if (!oldTrackedFiles.isEmpty())",
      "info" : "IfStatement[19418-19579]:IfStatement[19912-20073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19450-19579]:Block[19944-20073]"
    }, {
      "left" : "LOG.debug(\"Removing overlaid content of the following files:\\n\" + StringUtil.join(oldTrackedFiles, \",\\n\"));",
      "right" : "LOG.debug(\"Removing overlaid content of the following files:\\n\" + StringUtil.join(oldTrackedFiles, \",\\n\"));",
      "info" : "ExpressionStatement[19462-19569]:ExpressionStatement[19956-20063]"
    }, {
      "left" : "if (!filesToUpdate.isEmpty())",
      "right" : "if (!filesToUpdate.isEmpty())",
      "info" : "IfStatement[19595-20328]:IfStatement[20089-20822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19625-20328]:Block[20119-20822]"
    }, {
      "left" : "final UpdateContentConsumer consumer = new UpdateContentConsumer() {\n          @Override\n          public void onResponse() {\n            myFilePathsWithUnsentChanges.clear();\n          }\n        };",
      "right" : "final UpdateContentConsumer consumer = new UpdateContentConsumer() {\n          @Override\n          public void onResponse() {\n            myFilePathsWithUnsentChanges.clear();\n          }\n        };",
      "info" : "VariableDeclarationStatement[19635-19833]:VariableDeclarationStatement[20129-20327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19759-19822]:Block[20253-20316]"
    }, {
      "left" : "myFilePathsWithUnsentChanges.clear();",
      "right" : "myFilePathsWithUnsentChanges.clear();",
      "info" : "ExpressionStatement[19773-19810]:ExpressionStatement[20267-20304]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[19843-19882]:VariableDeclarationStatement[20337-20376]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateContent(filesToUpdate, consumer);\n          }\n        }, \"analysis_updateContent(\" + StringUtil.join(filesToUpdate.keySet(), \", \") + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateContent(filesToUpdate, consumer);\n          }\n        }, \"analysis_updateContent(\" + StringUtil.join(filesToUpdate.keySet(), \", \") + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[19891-20196]:VariableDeclarationStatement[20385-20690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20000-20081]:Block[20494-20575]"
    }, {
      "left" : "server.analysis_updateContent(filesToUpdate, consumer);",
      "right" : "server.analysis_updateContent(filesToUpdate, consumer);",
      "info" : "ExpressionStatement[20014-20069]:ExpressionStatement[20508-20563]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[20206-20320]:IfStatement[20700-20814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20215-20320]:Block[20709-20814]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[20227-20240]:ExpressionStatement[20721-20734]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20303-20310]:ReturnStatement[20797-20804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20563-21447]:Block[21057-21941]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setAnalysisRoots, included:\\n\" + StringUtil.join(includedRoots, \",\\n\") +\n                  \"\\nexcluded:\\n\" + StringUtil.join(excludedRoots, \",\\n\"));\n      }\n\n      final AnalysisServer server = myServer;\n      final String runnableInfo = \"analysis_setAnalysisRoots(\" + StringUtil.join(includedRoots, \", \") + \"; \" +\n                                  StringUtil.join(excludedRoots, \", \") + \")\";\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);\n        }\n      }, runnableInfo, SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setAnalysisRoots, included:\\n\" + StringUtil.join(includedRoots, \",\\n\") +\n                  \"\\nexcluded:\\n\" + StringUtil.join(excludedRoots, \",\\n\"));\n      }\n\n      final AnalysisServer server = myServer;\n      final String runnableInfo = \"analysis_setAnalysisRoots(\" + StringUtil.join(includedRoots, \", \") + \"; \" +\n                                  StringUtil.join(excludedRoots, \", \") + \")\";\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);\n        }\n      }, runnableInfo, SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "info" : "SynchronizedStatement[20569-21443]:SynchronizedStatement[21063-21937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20591-21443]:Block[21085-21937]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[20599-20634]:IfStatement[21093-21128]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20621-20634]:ReturnStatement[21115-21128]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[20642-20854]:IfStatement[21136-21348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20668-20854]:Block[21162-21348]"
    }, {
      "left" : "LOG.debug(\"analysis_setAnalysisRoots, included:\\n\" + StringUtil.join(includedRoots, \",\\n\") +\n                  \"\\nexcluded:\\n\" + StringUtil.join(excludedRoots, \",\\n\"));",
      "right" : "LOG.debug(\"analysis_setAnalysisRoots, included:\\n\" + StringUtil.join(includedRoots, \",\\n\") +\n                  \"\\nexcluded:\\n\" + StringUtil.join(excludedRoots, \",\\n\"));",
      "info" : "ExpressionStatement[20678-20846]:ExpressionStatement[21172-21340]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[20862-20901]:VariableDeclarationStatement[21356-21395]"
    }, {
      "left" : "final String runnableInfo = \"analysis_setAnalysisRoots(\" + StringUtil.join(includedRoots, \", \") + \"; \" +\n                                  StringUtil.join(excludedRoots, \", \") + \")\";",
      "right" : "final String runnableInfo = \"analysis_setAnalysisRoots(\" + StringUtil.join(includedRoots, \", \") + \"; \" +\n                                  StringUtil.join(excludedRoots, \", \") + \")\";",
      "info" : "VariableDeclarationStatement[20908-21090]:VariableDeclarationStatement[21402-21584]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);\n        }\n      }, runnableInfo, SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);\n        }\n      }, runnableInfo, SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[21097-21347]:VariableDeclarationStatement[21591-21841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21202-21301]:Block[21696-21795]"
    }, {
      "left" : "server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);",
      "right" : "server.analysis_setAnalysisRoots(includedRoots, excludedRoots, packageRoots);",
      "info" : "ExpressionStatement[21214-21291]:ExpressionStatement[21708-21785]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[21355-21417]:IfStatement[21849-21911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21364-21417]:Block[21858-21911]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[21374-21387]:ExpressionStatement[21868-21881]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[21396-21409]:ReturnStatement[21890-21903]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21425-21437]:ReturnStatement[21919-21931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21558-22240]:Block[22052-22734]"
    }, {
      "left" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        final VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(filePath);\n\n        for (final Project project : myRootsHandler.getTrackedProjects()) {\n          if (project.isDisposed()) continue;\n\n          if (vFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile)) {\n            DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile, errors);\n          }\n          else {\n            DartProblemsViewImpl.getInstance(project).removeErrorsForFile(filePath);\n          }\n        }\n      }\n    });",
      "right" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n      @Override\n      public void run() {\n        final VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(filePath);\n\n        for (final Project project : myRootsHandler.getTrackedProjects()) {\n          if (project.isDisposed()) continue;\n\n          if (vFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile)) {\n            DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile, errors);\n          }\n          else {\n            DartProblemsViewImpl.getInstance(project).removeErrorsForFile(filePath);\n          }\n        }\n      }\n    });",
      "info" : "ExpressionStatement[21564-22236]:ExpressionStatement[22058-22730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21671-22228]:Block[22165-22722]"
    }, {
      "left" : "final VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(filePath);",
      "right" : "final VirtualFile vFile = LocalFileSystem.getInstance().findFileByPath(filePath);",
      "info" : "VariableDeclarationStatement[21681-21762]:VariableDeclarationStatement[22175-22256]"
    }, {
      "left" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "right" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "info" : "EnhancedForStatement[21772-22220]:EnhancedForStatement[22266-22714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21838-22220]:Block[22332-22714]"
    }, {
      "left" : "if (project.isDisposed())",
      "right" : "if (project.isDisposed())",
      "info" : "IfStatement[21850-21885]:IfStatement[22344-22379]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[21876-21885]:ContinueStatement[22370-22379]"
    }, {
      "left" : "if (vFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile))",
      "right" : "if (vFile != null && ProjectRootManager.getInstance(project).getFileIndex().isInContent(vFile))",
      "info" : "IfStatement[21897-22210]:IfStatement[22391-22704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21993-22096]:Block[22487-22590]"
    }, {
      "left" : "DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile, errors);",
      "right" : "DartProblemsViewImpl.getInstance(project).updateErrorsForFile(vFile, errors);",
      "info" : "ExpressionStatement[22007-22084]:ExpressionStatement[22501-22578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22112-22210]:Block[22606-22704]"
    }, {
      "left" : "DartProblemsViewImpl.getInstance(project).removeErrorsForFile(filePath);",
      "right" : "DartProblemsViewImpl.getInstance(project).removeErrorsForFile(filePath);",
      "info" : "ExpressionStatement[22126-22198]:ExpressionStatement[22620-22692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22361-24860]:Block[22855-25354]"
    }, {
      "left" : "final Ref<AnalysisError[]> resultRef = new Ref<AnalysisError[]>();",
      "right" : "final Ref<AnalysisError[]> resultRef = new Ref<AnalysisError[]>();",
      "info" : "VariableDeclarationStatement[22367-22433]:VariableDeclarationStatement[22861-22927]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[22438-22482]:VariableDeclarationStatement[22932-22976]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22488-24827]:TryStatement[22982-25321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22492-24680]:Block[22986-25174]"
    }, {
      "left" : "synchronized (myLock) {\n        if (myServer == null) return null;\n\n        semaphore.down();\n\n        final String filePath = FileUtil.toSystemDependentName(info.myFilePath);\n\n        LOG.debug(\"analysis_getErrors(\" + filePath + \")\");\n\n        final GetErrorsConsumer consumer = new GetErrorsConsumer() {\n          @Override\n          public void computedErrors(final AnalysisError[] errors) {\n            if (semaphore.tryUp()) {\n              resultRef.set(errors);\n            }\n            else {\n              // semaphore unlocked by timeout, schedule to highlight the file again\n              LOG.info(\"analysis_getErrors() took too long for file \" + filePath + \", restarting daemon\");\n\n              ApplicationManager.getApplication().runReadAction(new Runnable() {\n                @Override\n                public void run() {\n                  final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);\n                  final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);\n                  if (psiFile != null) {\n                    DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);\n                  }\n                }\n              });\n            }\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getErrors()\", filePath, error);\n            semaphore.up();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getErrors(filePath, consumer);\n          }\n        }, \"analysis_getErrors(\" + filePath + \")\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return null;\n        }\n      }",
      "right" : "synchronized (myLock) {\n        if (myServer == null) return null;\n\n        semaphore.down();\n\n        final String filePath = FileUtil.toSystemDependentName(info.myFilePath);\n\n        LOG.debug(\"analysis_getErrors(\" + filePath + \")\");\n\n        final GetErrorsConsumer consumer = new GetErrorsConsumer() {\n          @Override\n          public void computedErrors(final AnalysisError[] errors) {\n            if (semaphore.tryUp()) {\n              resultRef.set(errors);\n            }\n            else {\n              // semaphore unlocked by timeout, schedule to highlight the file again\n              LOG.info(\"analysis_getErrors() took too long for file \" + filePath + \", restarting daemon\");\n\n              ApplicationManager.getApplication().runReadAction(new Runnable() {\n                @Override\n                public void run() {\n                  final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);\n                  final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);\n                  if (psiFile != null) {\n                    DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);\n                  }\n                }\n              });\n            }\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getErrors()\", filePath, error);\n            semaphore.up();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getErrors(filePath, consumer);\n          }\n        }, \"analysis_getErrors(\" + filePath + \")\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return null;\n        }\n      }",
      "info" : "SynchronizedStatement[22500-24421]:SynchronizedStatement[22994-24915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22522-24421]:Block[23016-24915]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[22532-22566]:IfStatement[23026-23060]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22554-22566]:ReturnStatement[23048-23060]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[22576-22593]:ExpressionStatement[23070-23087]"
    }, {
      "left" : "final String filePath = FileUtil.toSystemDependentName(info.myFilePath);",
      "right" : "final String filePath = FileUtil.toSystemDependentName(info.myFilePath);",
      "info" : "VariableDeclarationStatement[22603-22675]:VariableDeclarationStatement[23097-23169]"
    }, {
      "left" : "LOG.debug(\"analysis_getErrors(\" + filePath + \")\");",
      "right" : "LOG.debug(\"analysis_getErrors(\" + filePath + \")\");",
      "info" : "ExpressionStatement[22685-22735]:ExpressionStatement[23179-23229]"
    }, {
      "left" : "final GetErrorsConsumer consumer = new GetErrorsConsumer() {\n          @Override\n          public void computedErrors(final AnalysisError[] errors) {\n            if (semaphore.tryUp()) {\n              resultRef.set(errors);\n            }\n            else {\n              // semaphore unlocked by timeout, schedule to highlight the file again\n              LOG.info(\"analysis_getErrors() took too long for file \" + filePath + \", restarting daemon\");\n\n              ApplicationManager.getApplication().runReadAction(new Runnable() {\n                @Override\n                public void run() {\n                  final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);\n                  final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);\n                  if (psiFile != null) {\n                    DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);\n                  }\n                }\n              });\n            }\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getErrors()\", filePath, error);\n            semaphore.up();\n          }\n        };",
      "right" : "final GetErrorsConsumer consumer = new GetErrorsConsumer() {\n          @Override\n          public void computedErrors(final AnalysisError[] errors) {\n            if (semaphore.tryUp()) {\n              resultRef.set(errors);\n            }\n            else {\n              // semaphore unlocked by timeout, schedule to highlight the file again\n              LOG.info(\"analysis_getErrors() took too long for file \" + filePath + \", restarting daemon\");\n\n              ApplicationManager.getApplication().runReadAction(new Runnable() {\n                @Override\n                public void run() {\n                  final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);\n                  final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);\n                  if (psiFile != null) {\n                    DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);\n                  }\n                }\n              });\n            }\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getErrors()\", filePath, error);\n            semaphore.up();\n          }\n        };",
      "info" : "VariableDeclarationStatement[22745-24023]:VariableDeclarationStatement[23239-24517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22893-23830]:Block[23387-24324]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[22907-23818]:IfStatement[23401-24312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22930-22982]:Block[23424-23476]"
    }, {
      "left" : "resultRef.set(errors);",
      "right" : "resultRef.set(errors);",
      "info" : "ExpressionStatement[22946-22968]:ExpressionStatement[23440-23462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23000-23818]:Block[23494-24312]"
    }, {
      "left" : "LOG.info(\"analysis_getErrors() took too long for file \" + filePath + \", restarting daemon\");",
      "right" : "LOG.info(\"analysis_getErrors() took too long for file \" + filePath + \", restarting daemon\");",
      "info" : "ExpressionStatement[23101-23193]:ExpressionStatement[23595-23687]"
    }, {
      "left" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n                @Override\n                public void run() {\n                  final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);\n                  final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);\n                  if (psiFile != null) {\n                    DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);\n                  }\n                }\n              });",
      "right" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n                @Override\n                public void run() {\n                  final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);\n                  final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);\n                  if (psiFile != null) {\n                    DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);\n                  }\n                }\n              });",
      "info" : "ExpressionStatement[23209-23804]:ExpressionStatement[23703-24298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23336-23786]:Block[23830-24280]"
    }, {
      "left" : "final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);",
      "right" : "final VirtualFile vFile =\n                    info.myProject.isDisposed() ? null : LocalFileSystem.getInstance().findFileByPath(info.myFilePath);",
      "info" : "VariableDeclarationStatement[23356-23501]:VariableDeclarationStatement[23850-23995]"
    }, {
      "left" : "final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);",
      "right" : "final PsiFile psiFile = vFile == null ? null : PsiManager.getInstance(info.myProject).findFile(vFile);",
      "info" : "VariableDeclarationStatement[23520-23622]:VariableDeclarationStatement[24014-24116]"
    }, {
      "left" : "if (psiFile != null)",
      "right" : "if (psiFile != null)",
      "info" : "IfStatement[23641-23768]:IfStatement[24135-24262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23662-23768]:Block[24156-24262]"
    }, {
      "left" : "DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);",
      "right" : "DaemonCodeAnalyzer.getInstance(info.myProject).restart(psiFile);",
      "info" : "ExpressionStatement[23684-23748]:ExpressionStatement[24178-24242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23908-24012]:Block[24402-24506]"
    }, {
      "left" : "logError(\"analysis_getErrors()\", filePath, error);",
      "right" : "logError(\"analysis_getErrors()\", filePath, error);",
      "info" : "ExpressionStatement[23922-23972]:ExpressionStatement[24416-24466]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[23985-24000]:ExpressionStatement[24479-24494]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[24033-24072]:VariableDeclarationStatement[24527-24566]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getErrors(filePath, consumer);\n          }\n        }, \"analysis_getErrors(\" + filePath + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getErrors(filePath, consumer);\n          }\n        }, \"analysis_getErrors(\" + filePath + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[24081-24336]:VariableDeclarationStatement[24575-24830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24190-24262]:Block[24684-24756]"
    }, {
      "left" : "server.analysis_getErrors(filePath, consumer);",
      "right" : "server.analysis_getErrors(filePath, consumer);",
      "info" : "ExpressionStatement[24204-24250]:ExpressionStatement[24698-24744]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[24346-24413]:IfStatement[24840-24907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24355-24413]:Block[24849-24907]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[24367-24380]:ExpressionStatement[24861-24874]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24391-24403]:ReturnStatement[24885-24897]"
    }, {
      "left" : "final long timeout = info.isLongerAnalysisTimeout() || ApplicationManager.getApplication().isUnitTestMode()\n                           ? GET_ERRORS_LONGER_TIMEOUT\n                           : GET_ERRORS_TIMEOUT;",
      "right" : "final long timeout = info.isLongerAnalysisTimeout() || ApplicationManager.getApplication().isUnitTestMode()\n                           ? GET_ERRORS_LONGER_TIMEOUT\n                           : GET_ERRORS_TIMEOUT;",
      "info" : "VariableDeclarationStatement[24429-24640]:VariableDeclarationStatement[24923-25134]"
    }, {
      "left" : "semaphore.waitFor(timeout);",
      "right" : "semaphore.waitFor(timeout);",
      "info" : "ExpressionStatement[24647-24674]:ExpressionStatement[25141-25168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24693-24827]:Block[25187-25321]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[24701-24716]:ExpressionStatement[25195-25210]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[24833-24856]:ReturnStatement[25327-25350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24943-26532]:Block[25437-27026]"
    }, {
      "left" : "final Ref<LibraryDependenciesResult> resultRef = new Ref<LibraryDependenciesResult>();",
      "right" : "final Ref<LibraryDependenciesResult> resultRef = new Ref<LibraryDependenciesResult>();",
      "info" : "VariableDeclarationStatement[24949-25035]:VariableDeclarationStatement[25443-25529]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[25040-25084]:VariableDeclarationStatement[25534-25578]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25090-26499]:TryStatement[25584-26993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25094-26346]:Block[25588-26840]"
    }, {
      "left" : "synchronized (myLock) {\n        if (myServer == null) return null;\n\n        semaphore.down();\n\n        LOG.debug(\"analysis_getLibraryDependencies()\");\n\n        final GetLibraryDependenciesConsumer consumer = new GetLibraryDependenciesConsumer() {\n          @Override\n          public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap) {\n            resultRef.set(new LibraryDependenciesResult(libraries, packageMap));\n            semaphore.up();\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getLibraryDependencies()\", null, error);\n            semaphore.up();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getLibraryDependencies(consumer);\n          }\n        }, \"analysis_getLibraryDependencies()\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return null;\n        }\n      }",
      "right" : "synchronized (myLock) {\n        if (myServer == null) return null;\n\n        semaphore.down();\n\n        LOG.debug(\"analysis_getLibraryDependencies()\");\n\n        final GetLibraryDependenciesConsumer consumer = new GetLibraryDependenciesConsumer() {\n          @Override\n          public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap) {\n            resultRef.set(new LibraryDependenciesResult(libraries, packageMap));\n            semaphore.up();\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getLibraryDependencies()\", null, error);\n            semaphore.up();\n          }\n        };\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getLibraryDependencies(consumer);\n          }\n        }, \"analysis_getLibraryDependencies()\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return null;\n        }\n      }",
      "info" : "SynchronizedStatement[25102-26280]:SynchronizedStatement[25596-26774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25124-26280]:Block[25618-26774]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[25134-25168]:IfStatement[25628-25662]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25156-25168]:ReturnStatement[25650-25662]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[25178-25195]:ExpressionStatement[25672-25689]"
    }, {
      "left" : "LOG.debug(\"analysis_getLibraryDependencies()\");",
      "right" : "LOG.debug(\"analysis_getLibraryDependencies()\");",
      "info" : "ExpressionStatement[25205-25252]:ExpressionStatement[25699-25746]"
    }, {
      "left" : "final GetLibraryDependenciesConsumer consumer = new GetLibraryDependenciesConsumer() {\n          @Override\n          public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap) {\n            resultRef.set(new LibraryDependenciesResult(libraries, packageMap));\n            semaphore.up();\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getLibraryDependencies()\", null, error);\n            semaphore.up();\n          }\n        };",
      "right" : "final GetLibraryDependenciesConsumer consumer = new GetLibraryDependenciesConsumer() {\n          @Override\n          public void computedDependencies(@Nullable final String[] libraries,\n                                           @Nullable final Map<String, Map<String, List<String>>> packageMap) {\n            resultRef.set(new LibraryDependenciesResult(libraries, packageMap));\n            semaphore.up();\n          }\n\n          @Override\n          public void onError(final RequestError error) {\n            logError(\"analysis_getLibraryDependencies()\", null, error);\n            semaphore.up();\n          }\n        };",
      "info" : "VariableDeclarationStatement[25262-25882]:VariableDeclarationStatement[25756-26376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25558-25680]:Block[26052-26174]"
    }, {
      "left" : "resultRef.set(new LibraryDependenciesResult(libraries, packageMap));",
      "right" : "resultRef.set(new LibraryDependenciesResult(libraries, packageMap));",
      "info" : "ExpressionStatement[25572-25640]:ExpressionStatement[26066-26134]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[25653-25668]:ExpressionStatement[26147-26162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25758-25871]:Block[26252-26365]"
    }, {
      "left" : "logError(\"analysis_getLibraryDependencies()\", null, error);",
      "right" : "logError(\"analysis_getLibraryDependencies()\", null, error);",
      "info" : "ExpressionStatement[25772-25831]:ExpressionStatement[26266-26325]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[25844-25859]:ExpressionStatement[26338-26353]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[25892-25931]:VariableDeclarationStatement[26386-26425]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getLibraryDependencies(consumer);\n          }\n        }, \"analysis_getLibraryDependencies()\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_getLibraryDependencies(consumer);\n          }\n        }, \"analysis_getLibraryDependencies()\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[25940-26195]:VariableDeclarationStatement[26434-26689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26049-26124]:Block[26543-26618]"
    }, {
      "left" : "server.analysis_getLibraryDependencies(consumer);",
      "right" : "server.analysis_getLibraryDependencies(consumer);",
      "info" : "ExpressionStatement[26063-26112]:ExpressionStatement[26557-26606]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[26205-26272]:IfStatement[26699-26766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26214-26272]:Block[26708-26766]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[26226-26239]:ExpressionStatement[26720-26733]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26250-26262]:ReturnStatement[26744-26756]"
    }, {
      "left" : "semaphore.waitFor(GET_LIBRARY_DEPENDENCIES_TIMEOUT);",
      "right" : "semaphore.waitFor(GET_LIBRARY_DEPENDENCIES_TIMEOUT);",
      "info" : "ExpressionStatement[26288-26340]:ExpressionStatement[26782-26834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26359-26499]:Block[26853-26993]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[26367-26382]:ExpressionStatement[26861-26876]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[26505-26528]:ReturnStatement[26999-27022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26645-28039]:Block[27139-28533]"
    }, {
      "left" : "final Ref<List<AnalysisErrorFixes>> resultRef = new Ref<List<AnalysisErrorFixes>>();",
      "right" : "final Ref<List<AnalysisErrorFixes>> resultRef = new Ref<List<AnalysisErrorFixes>>();",
      "info" : "VariableDeclarationStatement[26651-26735]:VariableDeclarationStatement[27145-27229]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[26740-26784]:VariableDeclarationStatement[27234-27278]"
    }, {
      "left" : "final String filePath = FileUtil.toSystemDependentName(_filePath);",
      "right" : "final String filePath = FileUtil.toSystemDependentName(_filePath);",
      "info" : "VariableDeclarationStatement[26789-26855]:VariableDeclarationStatement[27283-27349]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final GetFixesConsumer consumer = new GetFixesConsumer() {\n        @Override\n        public void computedFixes(final List<AnalysisErrorFixes> fixes) {\n          resultRef.set(fixes);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_getFixes()\", filePath, error);\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_getFixes(filePath, offset, consumer);\n        }\n      }, \"edit_getFixes(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final GetFixesConsumer consumer = new GetFixesConsumer() {\n        @Override\n        public void computedFixes(final List<AnalysisErrorFixes> fixes) {\n          resultRef.set(fixes);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_getFixes()\", filePath, error);\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_getFixes(filePath, offset, consumer);\n        }\n      }, \"edit_getFixes(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "info" : "SynchronizedStatement[26861-27740]:SynchronizedStatement[27355-28234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26883-27740]:Block[27377-28234]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[26891-26925]:IfStatement[27385-27419]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26913-26925]:ReturnStatement[27407-27419]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[26933-26950]:ExpressionStatement[27427-27444]"
    }, {
      "left" : "final GetFixesConsumer consumer = new GetFixesConsumer() {\n        @Override\n        public void computedFixes(final List<AnalysisErrorFixes> fixes) {\n          resultRef.set(fixes);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_getFixes()\", filePath, error);\n          semaphore.up();\n        }\n      };",
      "right" : "final GetFixesConsumer consumer = new GetFixesConsumer() {\n        @Override\n        public void computedFixes(final List<AnalysisErrorFixes> fixes) {\n          resultRef.set(fixes);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_getFixes()\", filePath, error);\n          semaphore.up();\n        }\n      };",
      "info" : "VariableDeclarationStatement[26958-27352]:VariableDeclarationStatement[27452-27846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27107-27176]:Block[27601-27670]"
    }, {
      "left" : "resultRef.set(fixes);",
      "right" : "resultRef.set(fixes);",
      "info" : "ExpressionStatement[27119-27140]:ExpressionStatement[27613-27634]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[27151-27166]:ExpressionStatement[27645-27660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27250-27343]:Block[27744-27837]"
    }, {
      "left" : "logError(\"edit_getFixes()\", filePath, error);",
      "right" : "logError(\"edit_getFixes()\", filePath, error);",
      "info" : "ExpressionStatement[27262-27307]:ExpressionStatement[27756-27801]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[27318-27333]:ExpressionStatement[27812-27827]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[27360-27399]:VariableDeclarationStatement[27854-27893]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_getFixes(filePath, offset, consumer);\n        }\n      }, \"edit_getFixes(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_getFixes(filePath, offset, consumer);\n        }\n      }, \"edit_getFixes(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[27406-27665]:VariableDeclarationStatement[27900-28159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27511-27582]:Block[28005-28076]"
    }, {
      "left" : "server.edit_getFixes(filePath, offset, consumer);",
      "right" : "server.edit_getFixes(filePath, offset, consumer);",
      "info" : "ExpressionStatement[27523-27572]:ExpressionStatement[28017-28066]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[27673-27734]:IfStatement[28167-28228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27682-27734]:Block[28176-28228]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[27692-27705]:ExpressionStatement[28186-28199]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27714-27726]:ReturnStatement[28208-28220]"
    }, {
      "left" : "final long t0 = System.currentTimeMillis();",
      "right" : "final long t0 = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[27746-27789]:VariableDeclarationStatement[28240-28283]"
    }, {
      "left" : "semaphore.waitFor(GET_FIXES_TIMEOUT);",
      "right" : "semaphore.waitFor(GET_FIXES_TIMEOUT);",
      "info" : "ExpressionStatement[27794-27831]:ExpressionStatement[28288-28325]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[27837-28006]:IfStatement[28331-28500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27860-28006]:Block[28354-28500]"
    }, {
      "left" : "LOG.info(\"edit_getFixes() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "right" : "LOG.info(\"edit_getFixes() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "info" : "ExpressionStatement[27868-27981]:ExpressionStatement[28362-28475]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[27988-28000]:ReturnStatement[28482-28494]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[28012-28035]:ReturnStatement[28506-28529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28145-29557]:Block[31047-32459]"
    }, {
      "left" : "final Ref<String> resultRef = new Ref<String>();",
      "right" : "final Ref<String> resultRef = new Ref<String>();",
      "info" : "VariableDeclarationStatement[28151-28199]:VariableDeclarationStatement[31053-31101]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[28204-28248]:VariableDeclarationStatement[31106-31150]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final GetSuggestionsConsumer consumer = new GetSuggestionsConsumer() {\n        @Override\n        public void computedCompletionId(@NotNull final String completionId) {\n          resultRef.set(completionId);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(@NotNull final RequestError error) {\n          // Not a problem. Happens if a file is outside of the project, or server is just not ready yet.\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.completion_getSuggestions(filePath, offset, consumer);\n        }\n      }, \"completion_getSuggestions(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final GetSuggestionsConsumer consumer = new GetSuggestionsConsumer() {\n        @Override\n        public void computedCompletionId(@NotNull final String completionId) {\n          resultRef.set(completionId);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(@NotNull final RequestError error) {\n          // Not a problem. Happens if a file is outside of the project, or server is just not ready yet.\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.completion_getSuggestions(filePath, offset, consumer);\n        }\n      }, \"completion_getSuggestions(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "info" : "SynchronizedStatement[28254-29240]:SynchronizedStatement[31156-32142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28276-29240]:Block[31178-32142]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[28284-28318]:IfStatement[31186-31220]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28306-28318]:ReturnStatement[31208-31220]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[28326-28343]:ExpressionStatement[31228-31245]"
    }, {
      "left" : "final GetSuggestionsConsumer consumer = new GetSuggestionsConsumer() {\n        @Override\n        public void computedCompletionId(@NotNull final String completionId) {\n          resultRef.set(completionId);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(@NotNull final RequestError error) {\n          // Not a problem. Happens if a file is outside of the project, or server is just not ready yet.\n          semaphore.up();\n        }\n      };",
      "right" : "final GetSuggestionsConsumer consumer = new GetSuggestionsConsumer() {\n        @Override\n        public void computedCompletionId(@NotNull final String completionId) {\n          resultRef.set(completionId);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(@NotNull final RequestError error) {\n          // Not a problem. Happens if a file is outside of the project, or server is just not ready yet.\n          semaphore.up();\n        }\n      };",
      "info" : "VariableDeclarationStatement[28351-28828]:VariableDeclarationStatement[31253-31730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28517-28593]:Block[31419-31495]"
    }, {
      "left" : "resultRef.set(completionId);",
      "right" : "resultRef.set(completionId);",
      "info" : "ExpressionStatement[28529-28557]:ExpressionStatement[31431-31459]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[28568-28583]:ExpressionStatement[31470-31485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28676-28819]:Block[31578-31721]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[28794-28809]:ExpressionStatement[31696-31711]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[28836-28875]:VariableDeclarationStatement[31738-31777]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.completion_getSuggestions(filePath, offset, consumer);\n        }\n      }, \"completion_getSuggestions(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.completion_getSuggestions(filePath, offset, consumer);\n        }\n      }, \"completion_getSuggestions(\" + filePath + \", \" + offset + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[28882-29165]:VariableDeclarationStatement[31784-32067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28987-29070]:Block[31889-31972]"
    }, {
      "left" : "server.completion_getSuggestions(filePath, offset, consumer);",
      "right" : "server.completion_getSuggestions(filePath, offset, consumer);",
      "info" : "ExpressionStatement[28999-29060]:ExpressionStatement[31901-31962]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[29173-29234]:IfStatement[32075-32136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29182-29234]:Block[32084-32136]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[29192-29205]:ExpressionStatement[32094-32107]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29214-29226]:ReturnStatement[32116-32128]"
    }, {
      "left" : "final long t0 = System.currentTimeMillis();",
      "right" : "final long t0 = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[29246-29289]:VariableDeclarationStatement[32148-32191]"
    }, {
      "left" : "semaphore.waitFor(GET_SUGGESTIONS_TIMEOUT);",
      "right" : "semaphore.waitFor(GET_SUGGESTIONS_TIMEOUT);",
      "info" : "ExpressionStatement[29294-29337]:ExpressionStatement[32196-32239]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[29343-29524]:IfStatement[32245-32426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29366-29524]:Block[32268-32426]"
    }, {
      "left" : "LOG.info(\"completion_getSuggestions() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "right" : "LOG.info(\"completion_getSuggestions() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "info" : "ExpressionStatement[29374-29499]:ExpressionStatement[32276-32401]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29506-29518]:ReturnStatement[32408-32420]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[29530-29553]:ReturnStatement[32432-32455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29815-31352]:Block[32717-34254]"
    }, {
      "left" : "final Ref<FormatResult> resultRef = new Ref<FormatResult>();",
      "right" : "final Ref<FormatResult> resultRef = new Ref<FormatResult>();",
      "info" : "VariableDeclarationStatement[29821-29881]:VariableDeclarationStatement[32723-32783]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[29886-29930]:VariableDeclarationStatement[32788-32832]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final FormatConsumer consumer = new FormatConsumer() {\n        @Override\n        public void computedFormat(final List<SourceEdit> edits, final int selectionOffset, final int selectionLength) {\n          resultRef.set(new FormatResult(edits, selectionOffset, selectionLength));\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          if (!\"FORMAT_WITH_ERRORS\".equals(error.getCode())) {\n            logError(\"edit_format()\", filePath, error);\n          }\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_format(filePath, selectionOffset, selectionLength, lineLength, consumer);\n        }\n      }, \"edit_format(\" + filePath + \", \" + selectionOffset + \", \" + selectionLength + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final FormatConsumer consumer = new FormatConsumer() {\n        @Override\n        public void computedFormat(final List<SourceEdit> edits, final int selectionOffset, final int selectionLength) {\n          resultRef.set(new FormatResult(edits, selectionOffset, selectionLength));\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          if (!\"FORMAT_WITH_ERRORS\".equals(error.getCode())) {\n            logError(\"edit_format()\", filePath, error);\n          }\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_format(filePath, selectionOffset, selectionLength, lineLength, consumer);\n        }\n      }, \"edit_format(\" + filePath + \", \" + selectionOffset + \", \" + selectionLength + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "info" : "SynchronizedStatement[29936-31053]:SynchronizedStatement[32838-33955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29958-31053]:Block[32860-33955]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[29966-30000]:IfStatement[32868-32902]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[29988-30000]:ReturnStatement[32890-32902]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[30008-30025]:ExpressionStatement[32910-32927]"
    }, {
      "left" : "final FormatConsumer consumer = new FormatConsumer() {\n        @Override\n        public void computedFormat(final List<SourceEdit> edits, final int selectionOffset, final int selectionLength) {\n          resultRef.set(new FormatResult(edits, selectionOffset, selectionLength));\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          if (!\"FORMAT_WITH_ERRORS\".equals(error.getCode())) {\n            logError(\"edit_format()\", filePath, error);\n          }\n          semaphore.up();\n        }\n      };",
      "right" : "final FormatConsumer consumer = new FormatConsumer() {\n        @Override\n        public void computedFormat(final List<SourceEdit> edits, final int selectionOffset, final int selectionLength) {\n          resultRef.set(new FormatResult(edits, selectionOffset, selectionLength));\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          if (!\"FORMAT_WITH_ERRORS\".equals(error.getCode())) {\n            logError(\"edit_format()\", filePath, error);\n          }\n          semaphore.up();\n        }\n      };",
      "info" : "VariableDeclarationStatement[30033-30597]:VariableDeclarationStatement[32935-33499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30225-30346]:Block[33127-33248]"
    }, {
      "left" : "resultRef.set(new FormatResult(edits, selectionOffset, selectionLength));",
      "right" : "resultRef.set(new FormatResult(edits, selectionOffset, selectionLength));",
      "info" : "ExpressionStatement[30237-30310]:ExpressionStatement[33139-33212]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[30321-30336]:ExpressionStatement[33223-33238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30420-30588]:Block[33322-33490]"
    }, {
      "left" : "if (!\"FORMAT_WITH_ERRORS\".equals(error.getCode()))",
      "right" : "if (!\"FORMAT_WITH_ERRORS\".equals(error.getCode()))",
      "info" : "IfStatement[30432-30552]:IfStatement[33334-33454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30483-30552]:Block[33385-33454]"
    }, {
      "left" : "logError(\"edit_format()\", filePath, error);",
      "right" : "logError(\"edit_format()\", filePath, error);",
      "info" : "ExpressionStatement[30497-30540]:ExpressionStatement[33399-33442]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[30563-30578]:ExpressionStatement[33465-33480]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[30605-30644]:VariableDeclarationStatement[33507-33546]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_format(filePath, selectionOffset, selectionLength, lineLength, consumer);\n        }\n      }, \"edit_format(\" + filePath + \", \" + selectionOffset + \", \" + selectionLength + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_format(filePath, selectionOffset, selectionLength, lineLength, consumer);\n        }\n      }, \"edit_format(\" + filePath + \", \" + selectionOffset + \", \" + selectionLength + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[30651-30978]:VariableDeclarationStatement[33553-33880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30756-30863]:Block[33658-33765]"
    }, {
      "left" : "server.edit_format(filePath, selectionOffset, selectionLength, lineLength, consumer);",
      "right" : "server.edit_format(filePath, selectionOffset, selectionLength, lineLength, consumer);",
      "info" : "ExpressionStatement[30768-30853]:ExpressionStatement[33670-33755]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[30986-31047]:IfStatement[33888-33949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30995-31047]:Block[33897-33949]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[31005-31018]:ExpressionStatement[33907-33920]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31027-31039]:ReturnStatement[33929-33941]"
    }, {
      "left" : "final long t0 = System.currentTimeMillis();",
      "right" : "final long t0 = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[31059-31102]:VariableDeclarationStatement[33961-34004]"
    }, {
      "left" : "semaphore.waitFor(EDIT_FORMAT_TIMEOUT);",
      "right" : "semaphore.waitFor(EDIT_FORMAT_TIMEOUT);",
      "info" : "ExpressionStatement[31107-31146]:ExpressionStatement[34009-34048]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[31152-31319]:IfStatement[34054-34221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31175-31319]:Block[34077-34221]"
    }, {
      "left" : "LOG.info(\"edit_format() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "right" : "LOG.info(\"edit_format() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "info" : "ExpressionStatement[31183-31294]:ExpressionStatement[34085-34196]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31301-31313]:ReturnStatement[34203-34215]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[31325-31348]:ReturnStatement[34227-34250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31439-32731]:Block[34341-35633]"
    }, {
      "left" : "final Ref<SourceFileEdit> resultRef = new Ref<SourceFileEdit>();",
      "right" : "final Ref<SourceFileEdit> resultRef = new Ref<SourceFileEdit>();",
      "info" : "VariableDeclarationStatement[31445-31509]:VariableDeclarationStatement[34347-34411]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[31514-31558]:VariableDeclarationStatement[34416-34460]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final SortMembersConsumer consumer = new SortMembersConsumer() {\n        @Override\n        public void computedEdit(final SourceFileEdit edit) {\n          resultRef.set(edit);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_sortMembers()\", filePath, error);\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_sortMembers(filePath, consumer);\n        }\n      }, \"edit_sortMembers(\" + filePath + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return null;\n\n      semaphore.down();\n\n      final SortMembersConsumer consumer = new SortMembersConsumer() {\n        @Override\n        public void computedEdit(final SourceFileEdit edit) {\n          resultRef.set(edit);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_sortMembers()\", filePath, error);\n          semaphore.up();\n        }\n      };\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_sortMembers(filePath, consumer);\n        }\n      }, \"edit_sortMembers(\" + filePath + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return null;\n      }\n    }",
      "info" : "SynchronizedStatement[31564-32421]:SynchronizedStatement[34466-35323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31586-32421]:Block[34488-35323]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[31594-31628]:IfStatement[34496-34530]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[31616-31628]:ReturnStatement[34518-34530]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[31636-31653]:ExpressionStatement[34538-34555]"
    }, {
      "left" : "final SortMembersConsumer consumer = new SortMembersConsumer() {\n        @Override\n        public void computedEdit(final SourceFileEdit edit) {\n          resultRef.set(edit);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_sortMembers()\", filePath, error);\n          semaphore.up();\n        }\n      };",
      "right" : "final SortMembersConsumer consumer = new SortMembersConsumer() {\n        @Override\n        public void computedEdit(final SourceFileEdit edit) {\n          resultRef.set(edit);\n          semaphore.up();\n        }\n\n        @Override\n        public void onError(final RequestError error) {\n          logError(\"edit_sortMembers()\", filePath, error);\n          semaphore.up();\n        }\n      };",
      "info" : "VariableDeclarationStatement[31661-32051]:VariableDeclarationStatement[34563-34953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31804-31872]:Block[34706-34774]"
    }, {
      "left" : "resultRef.set(edit);",
      "right" : "resultRef.set(edit);",
      "info" : "ExpressionStatement[31816-31836]:ExpressionStatement[34718-34738]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[31847-31862]:ExpressionStatement[34749-34764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31946-32042]:Block[34848-34944]"
    }, {
      "left" : "logError(\"edit_sortMembers()\", filePath, error);",
      "right" : "logError(\"edit_sortMembers()\", filePath, error);",
      "info" : "ExpressionStatement[31958-32006]:ExpressionStatement[34860-34908]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[32017-32032]:ExpressionStatement[34919-34934]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[32059-32098]:VariableDeclarationStatement[34961-35000]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_sortMembers(filePath, consumer);\n        }\n      }, \"edit_sortMembers(\" + filePath + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.edit_sortMembers(filePath, consumer);\n        }\n      }, \"edit_sortMembers(\" + filePath + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[32105-32346]:VariableDeclarationStatement[35007-35248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32210-32276]:Block[35112-35178]"
    }, {
      "left" : "server.edit_sortMembers(filePath, consumer);",
      "right" : "server.edit_sortMembers(filePath, consumer);",
      "info" : "ExpressionStatement[32222-32266]:ExpressionStatement[35124-35168]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[32354-32415]:IfStatement[35256-35317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32363-32415]:Block[35265-35317]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[32373-32386]:ExpressionStatement[35275-35288]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32395-32407]:ReturnStatement[35297-35309]"
    }, {
      "left" : "final long t0 = System.currentTimeMillis();",
      "right" : "final long t0 = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[32427-32470]:VariableDeclarationStatement[35329-35372]"
    }, {
      "left" : "semaphore.waitFor(EDIT_SORT_MEMBERS_TIMEOUT);",
      "right" : "semaphore.waitFor(EDIT_SORT_MEMBERS_TIMEOUT);",
      "info" : "ExpressionStatement[32475-32520]:ExpressionStatement[35377-35422]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[32526-32698]:IfStatement[35428-35600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32549-32698]:Block[35451-35600]"
    }, {
      "left" : "LOG.info(\"edit_sortMembers() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "right" : "LOG.info(\"edit_sortMembers() took too long for file \" + filePath + \": \" + (System.currentTimeMillis() - t0) + \"ms\");",
      "info" : "ExpressionStatement[32557-32673]:ExpressionStatement[35459-35575]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[32680-32692]:ReturnStatement[35582-35594]"
    }, {
      "left" : "return resultRef.get();",
      "right" : "return resultRef.get();",
      "info" : "ReturnStatement[32704-32727]:ReturnStatement[35606-35629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32805-33407]:Block[35707-36309]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      String rootsStr = roots != null ? StringUtil.join(roots, \",\\n\") : \"all roots\";\n      LOG.debug(\"analysis_reanalyze, roots: \" + rootsStr);\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_reanalyze(roots);\n        }\n      }, \"analysis_reanalyze(\" + rootsStr + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      String rootsStr = roots != null ? StringUtil.join(roots, \",\\n\") : \"all roots\";\n      LOG.debug(\"analysis_reanalyze, roots: \" + rootsStr);\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_reanalyze(roots);\n        }\n      }, \"analysis_reanalyze(\" + rootsStr + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "info" : "SynchronizedStatement[32811-33403]:SynchronizedStatement[35713-36305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32833-33403]:Block[35735-36305]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[32841-32876]:IfStatement[35743-35778]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[32863-32876]:ReturnStatement[35765-35778]"
    }, {
      "left" : "String rootsStr = roots != null ? StringUtil.join(roots, \",\\n\") : \"all roots\";",
      "right" : "String rootsStr = roots != null ? StringUtil.join(roots, \",\\n\") : \"all roots\";",
      "info" : "VariableDeclarationStatement[32884-32962]:VariableDeclarationStatement[35786-35864]"
    }, {
      "left" : "LOG.debug(\"analysis_reanalyze, roots: \" + rootsStr);",
      "right" : "LOG.debug(\"analysis_reanalyze, roots: \" + rootsStr);",
      "info" : "ExpressionStatement[32969-33021]:ExpressionStatement[35871-35923]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[33029-33068]:VariableDeclarationStatement[35931-35970]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_reanalyze(roots);\n        }\n      }, \"analysis_reanalyze(\" + rootsStr + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_reanalyze(roots);\n        }\n      }, \"analysis_reanalyze(\" + rootsStr + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[33075-33307]:VariableDeclarationStatement[35977-36209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33180-33235]:Block[36082-36137]"
    }, {
      "left" : "server.analysis_reanalyze(roots);",
      "right" : "server.analysis_reanalyze(roots);",
      "info" : "ExpressionStatement[33192-33225]:ExpressionStatement[36094-36127]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[33315-33377]:IfStatement[36217-36279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33324-33377]:Block[36226-36279]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[33334-33347]:ExpressionStatement[36236-36249]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33356-33369]:ReturnStatement[36258-36271]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[33385-33397]:ReturnStatement[36287-36299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33455-34106]:Block[36357-37008]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setPriorityFiles, files:\\n\" + StringUtil.join(myVisibleFiles, \",\\n\"));\n      }\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setPriorityFiles(myVisibleFiles);\n        }\n      }, \"analysis_setPriorityFiles(\" + StringUtil.join(myVisibleFiles, \", \") + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setPriorityFiles, files:\\n\" + StringUtil.join(myVisibleFiles, \",\\n\"));\n      }\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setPriorityFiles(myVisibleFiles);\n        }\n      }, \"analysis_setPriorityFiles(\" + StringUtil.join(myVisibleFiles, \", \") + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "info" : "SynchronizedStatement[33461-34102]:SynchronizedStatement[36363-37004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33483-34102]:Block[36385-37004]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[33491-33526]:IfStatement[36393-36428]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[33513-33526]:ReturnStatement[36415-36428]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[33534-33668]:IfStatement[36436-36570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33560-33668]:Block[36462-36570]"
    }, {
      "left" : "LOG.debug(\"analysis_setPriorityFiles, files:\\n\" + StringUtil.join(myVisibleFiles, \",\\n\"));",
      "right" : "LOG.debug(\"analysis_setPriorityFiles, files:\\n\" + StringUtil.join(myVisibleFiles, \",\\n\"));",
      "info" : "ExpressionStatement[33570-33660]:ExpressionStatement[36472-36562]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[33676-33715]:VariableDeclarationStatement[36578-36617]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setPriorityFiles(myVisibleFiles);\n        }\n      }, \"analysis_setPriorityFiles(\" + StringUtil.join(myVisibleFiles, \", \") + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setPriorityFiles(myVisibleFiles);\n        }\n      }, \"analysis_setPriorityFiles(\" + StringUtil.join(myVisibleFiles, \", \") + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[33722-34006]:VariableDeclarationStatement[36624-36908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33827-33898]:Block[36729-36800]"
    }, {
      "left" : "server.analysis_setPriorityFiles(myVisibleFiles);",
      "right" : "server.analysis_setPriorityFiles(myVisibleFiles);",
      "info" : "ExpressionStatement[33839-33888]:ExpressionStatement[36741-36790]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[34014-34076]:IfStatement[36916-36978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34023-34076]:Block[36925-36978]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[34033-34046]:ExpressionStatement[36935-36948]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34055-34068]:ReturnStatement[36957-36970]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34084-34096]:ReturnStatement[36986-36998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34154-34994]:Block[37056-37896]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      final Map<String, List<String>> subscriptions = new THashMap<String, List<String>>();\n      subscriptions.put(AnalysisService.NAVIGATION, myVisibleFiles);\n      subscriptions.put(AnalysisService.HIGHLIGHTS, myVisibleFiles);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setSubscriptions, subscriptions:\\n\" + subscriptions);\n      }\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setSubscriptions(subscriptions);\n        }\n      }, \"analysis_setSubscriptions(\" + subscriptions + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null) return false;\n\n      final Map<String, List<String>> subscriptions = new THashMap<String, List<String>>();\n      subscriptions.put(AnalysisService.NAVIGATION, myVisibleFiles);\n      subscriptions.put(AnalysisService.HIGHLIGHTS, myVisibleFiles);\n\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"analysis_setSubscriptions, subscriptions:\\n\" + subscriptions);\n      }\n\n      final AnalysisServer server = myServer;\n      final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setSubscriptions(subscriptions);\n        }\n      }, \"analysis_setSubscriptions(\" + subscriptions + \")\", SEND_REQUEST_TIMEOUT);\n\n      if (!ok) {\n        stopServer();\n        return false;\n      }\n\n      return true;\n    }",
      "info" : "SynchronizedStatement[34160-34990]:SynchronizedStatement[37062-37892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34182-34990]:Block[37084-37892]"
    }, {
      "left" : "if (myServer == null)",
      "right" : "if (myServer == null)",
      "info" : "IfStatement[34190-34225]:IfStatement[37092-37127]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34212-34225]:ReturnStatement[37114-37127]"
    }, {
      "left" : "final Map<String, List<String>> subscriptions = new THashMap<String, List<String>>();",
      "right" : "final Map<String, List<String>> subscriptions = new THashMap<String, List<String>>();",
      "info" : "VariableDeclarationStatement[34233-34318]:VariableDeclarationStatement[37135-37220]"
    }, {
      "left" : "subscriptions.put(AnalysisService.NAVIGATION, myVisibleFiles);",
      "right" : "subscriptions.put(AnalysisService.NAVIGATION, myVisibleFiles);",
      "info" : "ExpressionStatement[34325-34387]:ExpressionStatement[37227-37289]"
    }, {
      "left" : "subscriptions.put(AnalysisService.HIGHLIGHTS, myVisibleFiles);",
      "right" : "subscriptions.put(AnalysisService.HIGHLIGHTS, myVisibleFiles);",
      "info" : "ExpressionStatement[34394-34456]:ExpressionStatement[37296-37358]"
    }, {
      "left" : "if (LOG.isDebugEnabled())",
      "right" : "if (LOG.isDebugEnabled())",
      "info" : "IfStatement[34464-34581]:IfStatement[37366-37483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34490-34581]:Block[37392-37483]"
    }, {
      "left" : "LOG.debug(\"analysis_setSubscriptions, subscriptions:\\n\" + subscriptions);",
      "right" : "LOG.debug(\"analysis_setSubscriptions, subscriptions:\\n\" + subscriptions);",
      "info" : "ExpressionStatement[34500-34573]:ExpressionStatement[37402-37475]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[34589-34628]:VariableDeclarationStatement[37491-37530]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setSubscriptions(subscriptions);\n        }\n      }, \"analysis_setSubscriptions(\" + subscriptions + \")\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n        @Override\n        public void run() {\n          server.analysis_setSubscriptions(subscriptions);\n        }\n      }, \"analysis_setSubscriptions(\" + subscriptions + \")\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[34635-34894]:VariableDeclarationStatement[37537-37796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34740-34810]:Block[37642-37712]"
    }, {
      "left" : "server.analysis_setSubscriptions(subscriptions);",
      "right" : "server.analysis_setSubscriptions(subscriptions);",
      "info" : "ExpressionStatement[34752-34800]:ExpressionStatement[37654-37702]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[34902-34964]:IfStatement[37804-37866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34911-34964]:Block[37813-37866]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[34921-34934]:ExpressionStatement[37823-37836]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[34943-34956]:ReturnStatement[37845-37858]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[34972-34984]:ReturnStatement[37874-37886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35051-37602]:Block[37953-40504]"
    }, {
      "left" : "synchronized (myLock) {\n      mySdkHome = sdk.getHomePath();\n\n      final String testSdkHome = System.getProperty(\"dart.sdk\");\n      if (ApplicationManager.getApplication().isUnitTestMode() && testSdkHome == null) return;\n\n      final String runtimePath =\n        FileUtil.toSystemDependentName((ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/dart\");\n      final String analysisServerPath = FileUtil.toSystemDependentName(\n        (ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/snapshots/analysis_server.dart.snapshot\");\n\n      final DebugPrintStream debugStream = new DebugPrintStream() {\n        @Override\n        public void println(String str) {\n          //System.out.println(\"debugStream: \" + str);\n        }\n      };\n\n      final int port = NetUtils.tryToFindAvailableSocketPort(10000);\n\n      String argsRaw;\n      try {\n        argsRaw = Registry.stringValue(\"dart.server.additional.arguments\");\n      }\n      catch (MissingResourceException e) {\n        argsRaw = \"\";\n      }\n      argsRaw += \" --useAnalysisHighlight2\";\n\n      myServerSocket =\n        new StdioServerSocket(runtimePath, analysisServerPath, null, debugStream, ArrayUtil.toStringArray(StringUtil.split(argsRaw, \" \")),\n                              false, false, port, false, FileReadMode.NORMALIZE_EOL_ALWAYS);\n      myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ', '_'));\n      myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());\n      myServer = new RemoteAnalysisServerImpl(myServerSocket);\n\n      try {\n        myServer.start();\n        myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);\n        myServer.addAnalysisServerListener(myAnalysisServerListener);\n        mySdkVersion = sdk.getVersion();\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));\n          }\n        }, \"analysis_updateOptions(true, true, true, true, false, true, false)\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return;\n        }\n\n        LOG.info(\"Server started, see status at http://localhost:\" + port + \"/status\");\n      }\n      catch (Exception e) {\n        LOG.warn(\"Failed to start Dart analysis server, port=\" + port, e);\n        stopServer();\n      }\n    }",
      "right" : "synchronized (myLock) {\n      mySdkHome = sdk.getHomePath();\n\n      final String testSdkHome = System.getProperty(\"dart.sdk\");\n      if (ApplicationManager.getApplication().isUnitTestMode() && testSdkHome == null) return;\n\n      final String runtimePath =\n        FileUtil.toSystemDependentName((ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/dart\");\n      final String analysisServerPath = FileUtil.toSystemDependentName(\n        (ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/snapshots/analysis_server.dart.snapshot\");\n\n      final DebugPrintStream debugStream = new DebugPrintStream() {\n        @Override\n        public void println(String str) {\n          //System.out.println(\"debugStream: \" + str);\n        }\n      };\n\n      final int port = NetUtils.tryToFindAvailableSocketPort(10000);\n\n      String argsRaw;\n      try {\n        argsRaw = Registry.stringValue(\"dart.server.additional.arguments\");\n      }\n      catch (MissingResourceException e) {\n        argsRaw = \"\";\n      }\n      argsRaw += \" --useAnalysisHighlight2\";\n\n      myServerSocket =\n        new StdioServerSocket(runtimePath, analysisServerPath, null, debugStream, ArrayUtil.toStringArray(StringUtil.split(argsRaw, \" \")),\n                              false, false, port, false, FileReadMode.NORMALIZE_EOL_ALWAYS);\n      myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ', '_'));\n      myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());\n      myServer = new RemoteAnalysisServerImpl(myServerSocket);\n\n      try {\n        myServer.start();\n        myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);\n        myServer.addAnalysisServerListener(myAnalysisServerListener);\n        mySdkVersion = sdk.getVersion();\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));\n          }\n        }, \"analysis_updateOptions(true, true, true, true, false, true, false)\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          stopServer();\n          return;\n        }\n\n        LOG.info(\"Server started, see status at http://localhost:\" + port + \"/status\");\n      }\n      catch (Exception e) {\n        LOG.warn(\"Failed to start Dart analysis server, port=\" + port, e);\n        stopServer();\n      }\n    }",
      "info" : "SynchronizedStatement[35057-37598]:SynchronizedStatement[37959-40500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35079-37598]:Block[37981-40500]"
    }, {
      "left" : "mySdkHome = sdk.getHomePath();",
      "right" : "mySdkHome = sdk.getHomePath();",
      "info" : "ExpressionStatement[35087-35117]:ExpressionStatement[37989-38019]"
    }, {
      "left" : "final String testSdkHome = System.getProperty(\"dart.sdk\");",
      "right" : "final String testSdkHome = System.getProperty(\"dart.sdk\");",
      "info" : "VariableDeclarationStatement[35125-35183]:VariableDeclarationStatement[38027-38085]"
    }, {
      "left" : "if (ApplicationManager.getApplication().isUnitTestMode() && testSdkHome == null)",
      "right" : "if (ApplicationManager.getApplication().isUnitTestMode() && testSdkHome == null)",
      "info" : "IfStatement[35190-35278]:IfStatement[38092-38180]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[35271-35278]:ReturnStatement[38173-38180]"
    }, {
      "left" : "final String runtimePath =\n        FileUtil.toSystemDependentName((ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/dart\");",
      "right" : "final String runtimePath =\n        FileUtil.toSystemDependentName((ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/dart\");",
      "info" : "VariableDeclarationStatement[35286-35448]:VariableDeclarationStatement[38188-38350]"
    }, {
      "left" : "final String analysisServerPath = FileUtil.toSystemDependentName(\n        (ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/snapshots/analysis_server.dart.snapshot\");",
      "right" : "final String analysisServerPath = FileUtil.toSystemDependentName(\n        (ApplicationManager.getApplication().isUnitTestMode() ? testSdkHome : mySdkHome) + \"/bin/snapshots/analysis_server.dart.snapshot\");",
      "info" : "VariableDeclarationStatement[35455-35660]:VariableDeclarationStatement[38357-38562]"
    }, {
      "left" : "final DebugPrintStream debugStream = new DebugPrintStream() {\n        @Override\n        public void println(String str) {\n          //System.out.println(\"debugStream: \" + str);\n        }\n      };",
      "right" : "final DebugPrintStream debugStream = new DebugPrintStream() {\n        @Override\n        public void println(String str) {\n          //System.out.println(\"debugStream: \" + str);\n        }\n      };",
      "info" : "VariableDeclarationStatement[35668-35863]:VariableDeclarationStatement[38570-38765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35788-35854]:Block[38690-38756]"
    }, {
      "left" : "final int port = NetUtils.tryToFindAvailableSocketPort(10000);",
      "right" : "final int port = NetUtils.tryToFindAvailableSocketPort(10000);",
      "info" : "VariableDeclarationStatement[35871-35933]:VariableDeclarationStatement[38773-38835]"
    }, {
      "left" : "String argsRaw;",
      "right" : "String argsRaw;",
      "info" : "VariableDeclarationStatement[35941-35956]:VariableDeclarationStatement[38843-38858]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[35963-36125]:TryStatement[38865-39027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35967-36052]:Block[38869-38954]"
    }, {
      "left" : "argsRaw = Registry.stringValue(\"dart.server.additional.arguments\");",
      "right" : "argsRaw = Registry.stringValue(\"dart.server.additional.arguments\");",
      "info" : "ExpressionStatement[35977-36044]:ExpressionStatement[38879-38946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36094-36125]:Block[38996-39027]"
    }, {
      "left" : "argsRaw = \"\";",
      "right" : "argsRaw = \"\";",
      "info" : "ExpressionStatement[36104-36117]:ExpressionStatement[39006-39019]"
    }, {
      "left" : "argsRaw += \" --useAnalysisHighlight2\";",
      "right" : "argsRaw += \" --useAnalysisHighlight2\";",
      "info" : "ExpressionStatement[36132-36170]:ExpressionStatement[39034-39072]"
    }, {
      "left" : "myServerSocket =\n        new StdioServerSocket(runtimePath, analysisServerPath, null, debugStream, ArrayUtil.toStringArray(StringUtil.split(argsRaw, \" \")),\n                              false, false, port, false, FileReadMode.NORMALIZE_EOL_ALWAYS);",
      "right" : "myServerSocket =\n        new StdioServerSocket(runtimePath, analysisServerPath, null, debugStream, ArrayUtil.toStringArray(StringUtil.split(argsRaw, \" \")),\n                              false, false, port, false, FileReadMode.NORMALIZE_EOL_ALWAYS);",
      "info" : "ExpressionStatement[36178-36426]:ExpressionStatement[39080-39328]"
    }, {
      "left" : "myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ', '_'));",
      "right" : "myServerSocket.setClientId(ApplicationNamesInfo.getInstance().getFullProductName().replace(' ', '_'));",
      "info" : "ExpressionStatement[36433-36535]:ExpressionStatement[39335-39437]"
    }, {
      "left" : "myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());",
      "right" : "myServerSocket.setClientVersion(ApplicationInfo.getInstance().getApiVersion());",
      "info" : "ExpressionStatement[36542-36621]:ExpressionStatement[39444-39523]"
    }, {
      "left" : "myServer = new RemoteAnalysisServerImpl(myServerSocket);",
      "right" : "myServer = new RemoteAnalysisServerImpl(myServerSocket);",
      "info" : "ExpressionStatement[36628-36684]:ExpressionStatement[39530-39586]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36692-37592]:TryStatement[39594-40494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36696-37459]:Block[39598-40361]"
    }, {
      "left" : "myServer.start();",
      "right" : "myServer.start();",
      "info" : "ExpressionStatement[36706-36723]:ExpressionStatement[39608-39625]"
    }, {
      "left" : "myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);",
      "right" : "myServer.server_setSubscriptions(SERVER_SUBSCRIPTIONS);",
      "info" : "ExpressionStatement[36732-36787]:ExpressionStatement[39634-39689]"
    }, {
      "left" : "myServer.addAnalysisServerListener(myAnalysisServerListener);",
      "right" : "myServer.addAnalysisServerListener(myAnalysisServerListener);",
      "info" : "ExpressionStatement[36796-36857]:ExpressionStatement[39698-39759]"
    }, {
      "left" : "mySdkVersion = sdk.getVersion();",
      "right" : "mySdkVersion = sdk.getVersion();",
      "info" : "ExpressionStatement[36866-36898]:ExpressionStatement[39768-39800]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[36908-36947]:VariableDeclarationStatement[39810-39849]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));\n          }\n        }, \"analysis_updateOptions(true, true, true, true, false, true, false)\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));\n          }\n        }, \"analysis_updateOptions(true, true, true, true, false, true, false)\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[36956-37290]:VariableDeclarationStatement[39858-40192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37065-37186]:Block[39967-40088]"
    }, {
      "left" : "server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));",
      "right" : "server.analysis_updateOptions(new AnalysisOptions(true, true, true, true, false, true, false));",
      "info" : "ExpressionStatement[37079-37174]:ExpressionStatement[39981-40076]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[37300-37362]:IfStatement[40202-40264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37309-37362]:Block[40211-40264]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[37321-37334]:ExpressionStatement[40223-40236]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37345-37352]:ReturnStatement[40247-40254]"
    }, {
      "left" : "LOG.info(\"Server started, see status at http://localhost:\" + port + \"/status\");",
      "right" : "LOG.info(\"Server started, see status at http://localhost:\" + port + \"/status\");",
      "info" : "ExpressionStatement[37372-37451]:ExpressionStatement[40274-40353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37486-37592]:Block[40388-40494]"
    }, {
      "left" : "LOG.warn(\"Failed to start Dart analysis server, port=\" + port, e);",
      "right" : "LOG.warn(\"Failed to start Dart analysis server, port=\" + port, e);",
      "info" : "ExpressionStatement[37496-37562]:ExpressionStatement[40398-40464]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[37571-37584]:ExpressionStatement[40473-40486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37703-38132]:Block[40605-41034]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer == null || !sdk.getHomePath().equals(mySdkHome) || !sdk.getVersion().equals(mySdkVersion) || !myServer.isSocketOpen()) {\n        stopServer();\n\n        if (isDartSdkVersionSufficient(sdk)) {\n          startServer(sdk);\n        }\n      }\n\n      if (myServer != null) {\n        myRootsHandler.ensureProjectServed(project);\n        return true;\n      }\n\n      return false;\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer == null || !sdk.getHomePath().equals(mySdkHome) || !sdk.getVersion().equals(mySdkVersion) || !myServer.isSocketOpen()) {\n        stopServer();\n\n        if (isDartSdkVersionSufficient(sdk)) {\n          startServer(sdk);\n        }\n      }\n\n      if (myServer != null) {\n        myRootsHandler.ensureProjectServed(project);\n        return true;\n      }\n\n      return false;\n    }",
      "info" : "SynchronizedStatement[37709-38128]:SynchronizedStatement[40611-41030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37731-38128]:Block[40633-41030]"
    }, {
      "left" : "if (myServer == null || !sdk.getHomePath().equals(mySdkHome) || !sdk.getVersion().equals(mySdkVersion) || !myServer.isSocketOpen())",
      "right" : "if (myServer == null || !sdk.getHomePath().equals(mySdkHome) || !sdk.getVersion().equals(mySdkVersion) || !myServer.isSocketOpen())",
      "info" : "IfStatement[37739-37988]:IfStatement[40641-40890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37871-37988]:Block[40773-40890]"
    }, {
      "left" : "stopServer();",
      "right" : "stopServer();",
      "info" : "ExpressionStatement[37881-37894]:ExpressionStatement[40783-40796]"
    }, {
      "left" : "if (isDartSdkVersionSufficient(sdk))",
      "right" : "if (isDartSdkVersionSufficient(sdk))",
      "info" : "IfStatement[37904-37980]:IfStatement[40806-40882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37941-37980]:Block[40843-40882]"
    }, {
      "left" : "startServer(sdk);",
      "right" : "startServer(sdk);",
      "info" : "ExpressionStatement[37953-37970]:ExpressionStatement[40855-40872]"
    }, {
      "left" : "if (myServer != null)",
      "right" : "if (myServer != null)",
      "info" : "IfStatement[37996-38101]:IfStatement[40898-41003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38018-38101]:Block[40920-41003]"
    }, {
      "left" : "myRootsHandler.ensureProjectServed(project);",
      "right" : "myRootsHandler.ensureProjectServed(project);",
      "info" : "ExpressionStatement[38028-38072]:ExpressionStatement[40930-40974]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[38081-38093]:ReturnStatement[40983-40995]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[38109-38122]:ReturnStatement[41011-41024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38162-38766]:Block[41064-41668]"
    }, {
      "left" : "synchronized (myLock) {\n      if (myServer != null) {\n        LOG.debug(\"stopping server\");\n        myServer.removeAnalysisServerListener(myAnalysisServerListener);\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.server_shutdown();\n          }\n        }, \"server_shutdown()\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          if (myServerSocket != null) {\n            myServerSocket.stop();\n          }\n        }\n      }\n\n      onServerStopped();\n    }",
      "right" : "synchronized (myLock) {\n      if (myServer != null) {\n        LOG.debug(\"stopping server\");\n        myServer.removeAnalysisServerListener(myAnalysisServerListener);\n\n        final AnalysisServer server = myServer;\n        final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.server_shutdown();\n          }\n        }, \"server_shutdown()\", SEND_REQUEST_TIMEOUT);\n\n        if (!ok) {\n          if (myServerSocket != null) {\n            myServerSocket.stop();\n          }\n        }\n      }\n\n      onServerStopped();\n    }",
      "info" : "SynchronizedStatement[38168-38762]:SynchronizedStatement[41070-41664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38190-38762]:Block[41092-41664]"
    }, {
      "left" : "if (myServer != null)",
      "right" : "if (myServer != null)",
      "info" : "IfStatement[38198-38730]:IfStatement[41100-41632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38220-38730]:Block[41122-41632]"
    }, {
      "left" : "LOG.debug(\"stopping server\");",
      "right" : "LOG.debug(\"stopping server\");",
      "info" : "ExpressionStatement[38230-38259]:ExpressionStatement[41132-41161]"
    }, {
      "left" : "myServer.removeAnalysisServerListener(myAnalysisServerListener);",
      "right" : "myServer.removeAnalysisServerListener(myAnalysisServerListener);",
      "info" : "ExpressionStatement[38268-38332]:ExpressionStatement[41170-41234]"
    }, {
      "left" : "final AnalysisServer server = myServer;",
      "right" : "final AnalysisServer server = myServer;",
      "info" : "VariableDeclarationStatement[38342-38381]:VariableDeclarationStatement[41244-41283]"
    }, {
      "left" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.server_shutdown();\n          }\n        }, \"server_shutdown()\", SEND_REQUEST_TIMEOUT);",
      "right" : "final boolean ok = runInPooledThreadAndWait(new Runnable() {\n          @Override\n          public void run() {\n            server.server_shutdown();\n          }\n        }, \"server_shutdown()\", SEND_REQUEST_TIMEOUT);",
      "info" : "VariableDeclarationStatement[38390-38605]:VariableDeclarationStatement[41292-41507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38499-38550]:Block[41401-41452]"
    }, {
      "left" : "server.server_shutdown();",
      "right" : "server.server_shutdown();",
      "info" : "ExpressionStatement[38513-38538]:ExpressionStatement[41415-41440]"
    }, {
      "left" : "if (!ok)",
      "right" : "if (!ok)",
      "info" : "IfStatement[38615-38722]:IfStatement[41517-41624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38624-38722]:Block[41526-41624]"
    }, {
      "left" : "if (myServerSocket != null)",
      "right" : "if (myServerSocket != null)",
      "info" : "IfStatement[38636-38712]:IfStatement[41538-41614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38664-38712]:Block[41566-41614]"
    }, {
      "left" : "myServerSocket.stop();",
      "right" : "myServerSocket.stop();",
      "info" : "ExpressionStatement[38678-38700]:ExpressionStatement[41580-41602]"
    }, {
      "left" : "onServerStopped();",
      "right" : "onServerStopped();",
      "info" : "ExpressionStatement[38738-38756]:ExpressionStatement[41640-41658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38801-39420]:Block[41703-42322]"
    }, {
      "left" : "stopShowingServerProgress();",
      "right" : "stopShowingServerProgress();",
      "info" : "ExpressionStatement[38807-38835]:ExpressionStatement[41709-41737]"
    }, {
      "left" : "synchronized (myLock) {\n      myServerSocket = null;\n      myServer = null;\n      mySdkHome = null;\n      myFilePathWithOverlaidContentToTimestamp.clear();\n      myVisibleFiles.clear();\n\n      ApplicationManager.getApplication().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            if (!project.isDisposed()) {\n              DartProblemsViewImpl.getInstance(project).clearAll();\n            }\n          }\n        }\n      });\n\n      myRootsHandler.reset();\n    }",
      "right" : "synchronized (myLock) {\n      myServerSocket = null;\n      myServer = null;\n      mySdkHome = null;\n      myFilePathWithOverlaidContentToTimestamp.clear();\n      myVisibleFiles.clear();\n\n      ApplicationManager.getApplication().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            if (!project.isDisposed()) {\n              DartProblemsViewImpl.getInstance(project).clearAll();\n            }\n          }\n        }\n      });\n\n      myRootsHandler.reset();\n    }",
      "info" : "SynchronizedStatement[38841-39416]:SynchronizedStatement[41743-42318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38863-39416]:Block[41765-42318]"
    }, {
      "left" : "myServerSocket = null;",
      "right" : "myServerSocket = null;",
      "info" : "ExpressionStatement[38871-38893]:ExpressionStatement[41773-41795]"
    }, {
      "left" : "myServer = null;",
      "right" : "myServer = null;",
      "info" : "ExpressionStatement[38900-38916]:ExpressionStatement[41802-41818]"
    }, {
      "left" : "mySdkHome = null;",
      "right" : "mySdkHome = null;",
      "info" : "ExpressionStatement[38923-38940]:ExpressionStatement[41825-41842]"
    }, {
      "left" : "myFilePathWithOverlaidContentToTimestamp.clear();",
      "right" : "myFilePathWithOverlaidContentToTimestamp.clear();",
      "info" : "ExpressionStatement[38947-38996]:ExpressionStatement[41849-41898]"
    }, {
      "left" : "myVisibleFiles.clear();",
      "right" : "myVisibleFiles.clear();",
      "info" : "ExpressionStatement[39003-39026]:ExpressionStatement[41905-41928]"
    }, {
      "left" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            if (!project.isDisposed()) {\n              DartProblemsViewImpl.getInstance(project).clearAll();\n            }\n          }\n        }\n      });",
      "right" : "ApplicationManager.getApplication().runReadAction(new Runnable() {\n        @Override\n        public void run() {\n          for (final Project project : myRootsHandler.getTrackedProjects()) {\n            if (!project.isDisposed()) {\n              DartProblemsViewImpl.getInstance(project).clearAll();\n            }\n          }\n        }\n      });",
      "info" : "ExpressionStatement[39034-39379]:ExpressionStatement[41936-42281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39145-39369]:Block[42047-42271]"
    }, {
      "left" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "right" : "for (final Project project : myRootsHandler.getTrackedProjects())",
      "info" : "EnhancedForStatement[39157-39359]:EnhancedForStatement[42059-42261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39223-39359]:Block[42125-42261]"
    }, {
      "left" : "if (!project.isDisposed())",
      "right" : "if (!project.isDisposed())",
      "info" : "IfStatement[39237-39347]:IfStatement[42139-42249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39264-39347]:Block[42166-42249]"
    }, {
      "left" : "DartProblemsViewImpl.getInstance(project).clearAll();",
      "right" : "DartProblemsViewImpl.getInstance(project).clearAll();",
      "info" : "ExpressionStatement[39280-39333]:ExpressionStatement[42182-42235]"
    }, {
      "left" : "myRootsHandler.reset();",
      "right" : "myRootsHandler.reset();",
      "info" : "ExpressionStatement[39387-39410]:ExpressionStatement[42289-42312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39465-39622]:Block[42367-42524]"
    }, {
      "left" : "myShowServerProgressAlarm.cancelAllRequests();",
      "right" : "myShowServerProgressAlarm.cancelAllRequests();",
      "info" : "ExpressionStatement[39471-39517]:ExpressionStatement[42373-42419]"
    }, {
      "left" : "myServerBusy.set(false);",
      "right" : "myServerBusy.set(false);",
      "info" : "ExpressionStatement[39522-39546]:ExpressionStatement[42424-42448]"
    }, {
      "left" : "synchronized (myServerBusy) {\n      myServerBusy.notifyAll();\n    }",
      "right" : "synchronized (myServerBusy) {\n      myServerBusy.notifyAll();\n    }",
      "info" : "SynchronizedStatement[39551-39618]:SynchronizedStatement[42453-42520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39579-39618]:Block[42481-42520]"
    }, {
      "left" : "myServerBusy.notifyAll();",
      "right" : "myServerBusy.notifyAll();",
      "info" : "ExpressionStatement[39587-39612]:ExpressionStatement[42489-42514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39750-40494]:Block[42652-43396]"
    }, {
      "left" : "final String trace = error.getStackTrace();",
      "right" : "final String trace = error.getStackTrace();",
      "info" : "VariableDeclarationStatement[39756-39799]:VariableDeclarationStatement[42658-42701]"
    }, {
      "left" : "final String partialTrace = trace == null || trace.isEmpty() ? \"\" : trace.substring(0, Math.min(trace.length(), 1000));",
      "right" : "final String partialTrace = trace == null || trace.isEmpty() ? \"\" : trace.substring(0, Math.min(trace.length(), 1000));",
      "info" : "VariableDeclarationStatement[39804-39923]:VariableDeclarationStatement[42706-42825]"
    }, {
      "left" : "final String message = \"Error from \" + methodName +\n                           (filePath == null ? \"\" : (\", file = \" + filePath)) +\n                           \", SDK version = \" + mySdkVersion +\n                           \", server version = \" + myServerVersion +\n                           \", error code = \" + error.getCode() + \": \" + error.getMessage() +\n                           \"\\n\" + partialTrace + \"...\";",
      "right" : "final String message = \"Error from \" + methodName +\n                           (filePath == null ? \"\" : (\", file = \" + filePath)) +\n                           \", SDK version = \" + mySdkVersion +\n                           \", server version = \" + myServerVersion +\n                           \", error code = \" + error.getCode() + \": \" + error.getMessage() +\n                           \"\\n\" + partialTrace + \"...\";",
      "info" : "VariableDeclarationStatement[39928-40340]:VariableDeclarationStatement[42830-43242]"
    }, {
      "left" : "if (RequestErrorCode.GET_ERRORS_INVALID_FILE.equals(error.getCode()))",
      "right" : "if (RequestErrorCode.GET_ERRORS_INVALID_FILE.equals(error.getCode()))",
      "info" : "IfStatement[40345-40490]:IfStatement[43247-43392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40415-40447]:Block[43317-43349]"
    }, {
      "left" : "LOG.warn(message);",
      "right" : "LOG.warn(message);",
      "info" : "ExpressionStatement[40423-40441]:ExpressionStatement[43325-43343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40457-40490]:Block[43359-43392]"
    }, {
      "left" : "LOG.error(message);",
      "right" : "LOG.error(message);",
      "info" : "ExpressionStatement[40465-40484]:ExpressionStatement[43367-43386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40736-41522]:Block[43638-44424]"
    }, {
      "left" : "final Ref<RuntimeException> exceptionRef = new Ref<RuntimeException>();",
      "right" : "final Ref<RuntimeException> exceptionRef = new Ref<RuntimeException>();",
      "info" : "VariableDeclarationStatement[40742-40813]:VariableDeclarationStatement[43644-43715]"
    }, {
      "left" : "final Semaphore semaphore = new Semaphore();",
      "right" : "final Semaphore semaphore = new Semaphore();",
      "info" : "VariableDeclarationStatement[40819-40863]:VariableDeclarationStatement[43721-43765]"
    }, {
      "left" : "semaphore.down();",
      "right" : "semaphore.down();",
      "info" : "ExpressionStatement[40868-40885]:ExpressionStatement[43770-43787]"
    }, {
      "left" : "ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          runnable.run();\n        }\n        catch (RuntimeException e) {\n          exceptionRef.set(e);\n        }\n\n        semaphore.up();\n      }\n    });",
      "right" : "ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          runnable.run();\n        }\n        catch (RuntimeException e) {\n          exceptionRef.set(e);\n        }\n\n        semaphore.up();\n      }\n    });",
      "info" : "ExpressionStatement[40891-41176]:ExpressionStatement[43793-44078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41006-41168]:Block[43908-44070]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[41016-41135]:TryStatement[43918-44037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41020-41057]:Block[43922-43959]"
    }, {
      "left" : "runnable.run();",
      "right" : "runnable.run();",
      "info" : "ExpressionStatement[41032-41047]:ExpressionStatement[43934-43949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41093-41135]:Block[43995-44037]"
    }, {
      "left" : "exceptionRef.set(e);",
      "right" : "exceptionRef.set(e);",
      "info" : "ExpressionStatement[41105-41125]:ExpressionStatement[44007-44027]"
    }, {
      "left" : "semaphore.up();",
      "right" : "semaphore.up();",
      "info" : "ExpressionStatement[41145-41160]:ExpressionStatement[44047-44062]"
    }, {
      "left" : "semaphore.waitFor(timeout);",
      "right" : "semaphore.waitFor(timeout);",
      "info" : "ExpressionStatement[41182-41209]:ExpressionStatement[44084-44111]"
    }, {
      "left" : "if (!exceptionRef.isNull())",
      "right" : "if (!exceptionRef.isNull())",
      "info" : "IfStatement[41215-41321]:IfStatement[44117-44223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41243-41321]:Block[44145-44223]"
    }, {
      "left" : "LOG.error(runnableInfo, exceptionRef.get());",
      "right" : "LOG.error(runnableInfo, exceptionRef.get());",
      "info" : "ExpressionStatement[41251-41295]:ExpressionStatement[44153-44197]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41302-41315]:ReturnStatement[44204-44217]"
    }, {
      "left" : "if (semaphore.tryUp())",
      "right" : "if (semaphore.tryUp())",
      "info" : "IfStatement[41327-41500]:IfStatement[44229-44402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41350-41500]:Block[44252-44402]"
    }, {
      "left" : "LOG.error(\"Operation didn't finish in \" + timeout + \" ms: \" + runnableInfo);",
      "right" : "LOG.error(\"Operation didn't finish in \" + timeout + \" ms: \" + runnableInfo);",
      "info" : "ExpressionStatement[41398-41474]:ExpressionStatement[44300-44376]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[41481-41494]:ReturnStatement[44383-44396]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[41506-41518]:ReturnStatement[44408-44420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41584-42673]:Block[44486-45575]"
    }, {
      "left" : "final Document document = e.getDocument();",
      "right" : "final Document document = e.getDocument();",
      "info" : "VariableDeclarationStatement[41590-41632]:VariableDeclarationStatement[44492-44534]"
    }, {
      "left" : "final VirtualFile file = FileDocumentManager.getInstance().getFile(document);",
      "right" : "final VirtualFile file = FileDocumentManager.getInstance().getFile(document);",
      "info" : "VariableDeclarationStatement[41637-41714]:VariableDeclarationStatement[44539-44616]"
    }, {
      "left" : "if (!isDartOrHtmlFile(file))",
      "right" : "if (!isDartOrHtmlFile(file))",
      "info" : "IfStatement[41719-41755]:IfStatement[44621-44657]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41748-41755]:ReturnStatement[44650-44657]"
    }, {
      "left" : "final String filePath = file.getPath();",
      "right" : "final String filePath = file.getPath();",
      "info" : "VariableDeclarationStatement[41761-41800]:VariableDeclarationStatement[44663-44702]"
    }, {
      "left" : "synchronized (myNavigationData) {\n      myFilePathsWithUnsentChanges.add(filePath);\n      final List<PluginNavigationRegion> regions = myNavigationData.get(filePath);\n      if (regions != null) {\n        final int eventOffset = e.getOffset();\n        final int deltaLength = e.getNewLength() - e.getOldLength();\n        for (PluginNavigationRegion region : regions) {\n          if (region.offset <= eventOffset && eventOffset <= region.offset + region.length) {\n            region.length += deltaLength;\n          }\n          else if (region.offset >= eventOffset) {\n            region.offset += deltaLength;\n          }\n          for (PluginNavigationTarget target : region.getTargets()) {\n            if (target.file.equals(filePath) && target.offset >= eventOffset) {\n              target.offset += deltaLength;\n            }\n          }\n        }\n      }\n    }",
      "right" : "synchronized (myNavigationData) {\n      myFilePathsWithUnsentChanges.add(filePath);\n      final List<PluginNavigationRegion> regions = myNavigationData.get(filePath);\n      if (regions != null) {\n        final int eventOffset = e.getOffset();\n        final int deltaLength = e.getNewLength() - e.getOldLength();\n        for (PluginNavigationRegion region : regions) {\n          if (region.offset <= eventOffset && eventOffset <= region.offset + region.length) {\n            region.length += deltaLength;\n          }\n          else if (region.offset >= eventOffset) {\n            region.offset += deltaLength;\n          }\n          for (PluginNavigationTarget target : region.getTargets()) {\n            if (target.file.equals(filePath) && target.offset >= eventOffset) {\n              target.offset += deltaLength;\n            }\n          }\n        }\n      }\n    }",
      "info" : "SynchronizedStatement[41805-42669]:SynchronizedStatement[44707-45571]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41837-42669]:Block[44739-45571]"
    }, {
      "left" : "myFilePathsWithUnsentChanges.add(filePath);",
      "right" : "myFilePathsWithUnsentChanges.add(filePath);",
      "info" : "ExpressionStatement[41845-41888]:ExpressionStatement[44747-44790]"
    }, {
      "left" : "final List<PluginNavigationRegion> regions = myNavigationData.get(filePath);",
      "right" : "final List<PluginNavigationRegion> regions = myNavigationData.get(filePath);",
      "info" : "VariableDeclarationStatement[41895-41971]:VariableDeclarationStatement[44797-44873]"
    }, {
      "left" : "if (regions != null)",
      "right" : "if (regions != null)",
      "info" : "IfStatement[41978-42663]:IfStatement[44880-45565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41999-42663]:Block[44901-45565]"
    }, {
      "left" : "final int eventOffset = e.getOffset();",
      "right" : "final int eventOffset = e.getOffset();",
      "info" : "VariableDeclarationStatement[42009-42047]:VariableDeclarationStatement[44911-44949]"
    }, {
      "left" : "final int deltaLength = e.getNewLength() - e.getOldLength();",
      "right" : "final int deltaLength = e.getNewLength() - e.getOldLength();",
      "info" : "VariableDeclarationStatement[42056-42116]:VariableDeclarationStatement[44958-45018]"
    }, {
      "left" : "for (PluginNavigationRegion region : regions)",
      "right" : "for (PluginNavigationRegion region : regions)",
      "info" : "EnhancedForStatement[42125-42655]:EnhancedForStatement[45027-45557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42171-42655]:Block[45073-45557]"
    }, {
      "left" : "if (region.offset <= eventOffset && eventOffset <= region.offset + region.length)",
      "right" : "if (region.offset <= eventOffset && eventOffset <= region.offset + region.length)",
      "info" : "IfStatement[42183-42425]:IfStatement[45085-45327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42265-42320]:Block[45167-45222]"
    }, {
      "left" : "region.length += deltaLength;",
      "right" : "region.length += deltaLength;",
      "info" : "ExpressionStatement[42279-42308]:ExpressionStatement[45181-45210]"
    }, {
      "left" : "if (region.offset >= eventOffset)",
      "right" : "if (region.offset >= eventOffset)",
      "info" : "IfStatement[42336-42425]:IfStatement[45238-45327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42370-42425]:Block[45272-45327]"
    }, {
      "left" : "region.offset += deltaLength;",
      "right" : "region.offset += deltaLength;",
      "info" : "ExpressionStatement[42384-42413]:ExpressionStatement[45286-45315]"
    }, {
      "left" : "for (PluginNavigationTarget target : region.getTargets())",
      "right" : "for (PluginNavigationTarget target : region.getTargets())",
      "info" : "EnhancedForStatement[42436-42645]:EnhancedForStatement[45338-45547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42494-42645]:Block[45396-45547]"
    }, {
      "left" : "if (target.file.equals(filePath) && target.offset >= eventOffset)",
      "right" : "if (target.file.equals(filePath) && target.offset >= eventOffset)",
      "info" : "IfStatement[42508-42633]:IfStatement[45410-45535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42574-42633]:Block[45476-45535]"
    }, {
      "left" : "target.offset += deltaLength;",
      "right" : "target.offset += deltaLength;",
      "info" : "ExpressionStatement[42590-42619]:ExpressionStatement[45492-45521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43210-43431]:Block[46112-46333]"
    }, {
      "left" : "this.myCompletionId = completionId;",
      "right" : "this.myCompletionId = completionId;",
      "info" : "ExpressionStatement[43218-43253]:ExpressionStatement[46120-46155]"
    }, {
      "left" : "this.myReplacementOffset = replacementOffset;",
      "right" : "this.myReplacementOffset = replacementOffset;",
      "info" : "ExpressionStatement[43260-43305]:ExpressionStatement[46162-46207]"
    }, {
      "left" : "this.myReplacementLength = replacementLength;",
      "right" : "this.myReplacementLength = replacementLength;",
      "info" : "ExpressionStatement[43312-43357]:ExpressionStatement[46214-46259]"
    }, {
      "left" : "this.myCompletions = completions;",
      "right" : "this.myCompletions = completions;",
      "info" : "ExpressionStatement[43364-43397]:ExpressionStatement[46266-46299]"
    }, {
      "left" : "this.isLast = isLast;",
      "right" : "this.isLast = isLast;",
      "info" : "ExpressionStatement[43404-43425]:ExpressionStatement[46306-46327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43709-43817]:Block[46611-46719]"
    }, {
      "left" : "offset = region.getOffset();",
      "right" : "offset = region.getOffset();",
      "info" : "ExpressionStatement[43717-43745]:ExpressionStatement[46619-46647]"
    }, {
      "left" : "length = region.getLength();",
      "right" : "length = region.getLength();",
      "info" : "ExpressionStatement[43752-43780]:ExpressionStatement[46654-46682]"
    }, {
      "left" : "type = region.getType();",
      "right" : "type = region.getType();",
      "info" : "ExpressionStatement[43787-43811]:ExpressionStatement[46689-46713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43846-43874]:Block[46748-46776]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[43854-43868]:ReturnStatement[46756-46770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43903-43931]:Block[46805-46833]"
    }, {
      "left" : "return length;",
      "right" : "return length;",
      "info" : "ReturnStatement[43911-43925]:ReturnStatement[46813-46827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43961-43987]:Block[46863-46889]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[43969-43981]:ReturnStatement[46871-46883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44318-44526]:Block[47220-47428]"
    }, {
      "left" : "offset = region.getOffset();",
      "right" : "offset = region.getOffset();",
      "info" : "ExpressionStatement[44326-44354]:ExpressionStatement[47228-47256]"
    }, {
      "left" : "length = region.getLength();",
      "right" : "length = region.getLength();",
      "info" : "ExpressionStatement[44361-44389]:ExpressionStatement[47263-47291]"
    }, {
      "left" : "for (NavigationTarget target : region.getTargetObjects())",
      "right" : "for (NavigationTarget target : region.getTargetObjects())",
      "info" : "EnhancedForStatement[44396-44520]:EnhancedForStatement[47298-47422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44454-44520]:Block[47356-47422]"
    }, {
      "left" : "targets.add(new PluginNavigationTarget(target));",
      "right" : "targets.add(new PluginNavigationTarget(target));",
      "info" : "ExpressionStatement[44464-44512]:ExpressionStatement[47366-47414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44555-44583]:Block[47457-47485]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[44563-44577]:ReturnStatement[47465-47479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44612-44640]:Block[47514-47542]"
    }, {
      "left" : "return length;",
      "right" : "return length;",
      "info" : "ReturnStatement[44620-44634]:ReturnStatement[47522-47536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44695-44724]:Block[47597-47626]"
    }, {
      "left" : "return targets;",
      "right" : "return targets;",
      "info" : "ReturnStatement[44703-44718]:ReturnStatement[47605-47620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44893-45000]:Block[47795-47902]"
    }, {
      "left" : "file = FileUtil.toSystemIndependentName(target.getFile());",
      "right" : "file = FileUtil.toSystemIndependentName(target.getFile());",
      "info" : "ExpressionStatement[44901-44959]:ExpressionStatement[47803-47861]"
    }, {
      "left" : "offset = target.getOffset();",
      "right" : "offset = target.getOffset();",
      "info" : "ExpressionStatement[44966-44994]:ExpressionStatement[47868-47896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45030-45056]:Block[47932-47958]"
    }, {
      "left" : "return file;",
      "right" : "return file;",
      "info" : "ReturnStatement[45038-45050]:ReturnStatement[47940-47952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45085-45113]:Block[47987-48015]"
    }, {
      "left" : "return offset;",
      "right" : "return offset;",
      "info" : "ReturnStatement[45093-45107]:ReturnStatement[47995-48009]"
    } ]
  },
  "interFileMappings" : { }
}