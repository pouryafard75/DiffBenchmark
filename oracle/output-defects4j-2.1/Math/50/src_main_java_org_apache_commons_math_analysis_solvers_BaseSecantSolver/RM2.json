{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "BaseSecantSolver",
      "right" : "BaseSecantSolver",
      "info" : "TypeDeclaration[1026-9985]:TypeDeclaration[1026-9780]"
    }, {
      "left" : "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
      "right" : "protected static final double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;",
      "info" : "FieldDeclaration[2202-2303]:FieldDeclaration[2202-2303]"
    }, {
      "left" : "private AllowedSolution allowed;",
      "right" : "private AllowedSolution allowed;",
      "info" : "FieldDeclaration[2309-2406]:FieldDeclaration[2309-2406]"
    }, {
      "left" : "private final Method method;",
      "right" : "private final Method method;",
      "info" : "FieldDeclaration[2412-2505]:FieldDeclaration[2412-2505]"
    }, {
      "left" : "protected BaseSecantSolver(final double absoluteAccuracy, final Method method)",
      "right" : "protected BaseSecantSolver(final double absoluteAccuracy, final Method method)",
      "info" : "MethodDeclaration[2511-2878]:MethodDeclaration[2511-2878]"
    }, {
      "left" : "protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final Method method)",
      "right" : "protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final Method method)",
      "info" : "MethodDeclaration[2884-3411]:MethodDeclaration[2884-3411]"
    }, {
      "left" : "protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final double functionValueAccuracy,\n                               final Method method)",
      "right" : "protected BaseSecantSolver(final double relativeAccuracy,\n                               final double absoluteAccuracy,\n                               final double functionValueAccuracy,\n                               final Method method)",
      "info" : "MethodDeclaration[3417-4112]:MethodDeclaration[3417-4112]"
    }, {
      "left" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution)",
      "right" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max,\n                        final AllowedSolution allowedSolution)",
      "info" : "MethodDeclaration[4118-4430]:MethodDeclaration[4118-4430]"
    }, {
      "left" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution)",
      "right" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue,\n                        final AllowedSolution allowedSolution)",
      "info" : "MethodDeclaration[4436-4789]:MethodDeclaration[4436-4789]"
    }, {
      "left" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue)",
      "right" : "public double solve(final int maxEval, final UnivariateRealFunction f,\n                        final double min, final double max, final double startValue)",
      "info" : "MethodDeclaration[4795-5079]:MethodDeclaration[4795-5079]"
    }, {
      "left" : "protected final double doSolve()",
      "right" : "protected final double doSolve()",
      "info" : "MethodDeclaration[5085-9565]:MethodDeclaration[5085-9360]"
    }, {
      "left" : "enum : Method",
      "right" : "enum : Method",
      "info" : "EnumDeclaration[9571-9983]:EnumDeclaration[9366-9778]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2759-2878]:Block[2759-2878]"
    }, {
      "left" : "super(absoluteAccuracy);",
      "right" : "super(absoluteAccuracy);",
      "info" : "SuperConstructorInvocation[2769-2793]:SuperConstructorInvocation[2769-2793]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[2802-2842]:ExpressionStatement[2802-2842]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[2851-2872]:ExpressionStatement[2851-2872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3274-3411]:Block[3274-3411]"
    }, {
      "left" : "super(relativeAccuracy, absoluteAccuracy);",
      "right" : "super(relativeAccuracy, absoluteAccuracy);",
      "info" : "SuperConstructorInvocation[3284-3326]:SuperConstructorInvocation[3284-3326]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[3335-3375]:ExpressionStatement[3335-3375]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[3384-3405]:ExpressionStatement[3384-3405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3952-4112]:Block[3952-4112]"
    }, {
      "left" : "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",
      "right" : "super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);",
      "info" : "SuperConstructorInvocation[3962-4027]:SuperConstructorInvocation[3962-4027]"
    }, {
      "left" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "right" : "this.allowed = AllowedSolution.ANY_SIDE;",
      "info" : "ExpressionStatement[4036-4076]:ExpressionStatement[4036-4076]"
    }, {
      "left" : "this.method = method;",
      "right" : "this.method = method;",
      "info" : "ExpressionStatement[4085-4106]:ExpressionStatement[4085-4106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4337-4430]:Block[4337-4430]"
    }, {
      "left" : "return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);",
      "right" : "return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);",
      "info" : "ReturnStatement[4347-4424]:ReturnStatement[4347-4424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4680-4789]:Block[4680-4789]"
    }, {
      "left" : "this.allowed = allowedSolution;",
      "right" : "this.allowed = allowedSolution;",
      "info" : "ExpressionStatement[4690-4721]:ExpressionStatement[4690-4721]"
    }, {
      "left" : "return super.solve(maxEval, f, min, max, startValue);",
      "right" : "return super.solve(maxEval, f, min, max, startValue);",
      "info" : "ReturnStatement[4730-4783]:ReturnStatement[4730-4783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4990-5079]:Block[4990-5079]"
    }, {
      "left" : "return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",
      "right" : "return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);",
      "info" : "ReturnStatement[5000-5073]:ReturnStatement[5000-5073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5143-9565]:Block[5143-9360]"
    }, {
      "left" : "double x0 = getMin();",
      "right" : "double x0 = getMin();",
      "info" : "VariableDeclarationStatement[5185-5206]:VariableDeclarationStatement[5185-5206]"
    }, {
      "left" : "double x1 = getMax();",
      "right" : "double x1 = getMax();",
      "info" : "VariableDeclarationStatement[5215-5236]:VariableDeclarationStatement[5215-5236]"
    }, {
      "left" : "double f0 = computeObjectiveValue(x0);",
      "right" : "double f0 = computeObjectiveValue(x0);",
      "info" : "VariableDeclarationStatement[5245-5283]:VariableDeclarationStatement[5245-5283]"
    }, {
      "left" : "double f1 = computeObjectiveValue(x1);",
      "right" : "double f1 = computeObjectiveValue(x1);",
      "info" : "VariableDeclarationStatement[5292-5330]:VariableDeclarationStatement[5292-5330]"
    }, {
      "left" : "if (f0 == 0.0)",
      "right" : "if (f0 == 0.0)",
      "info" : "IfStatement[5545-5594]:IfStatement[5545-5594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5560-5594]:Block[5560-5594]"
    }, {
      "left" : "return x0;",
      "right" : "return x0;",
      "info" : "ReturnStatement[5574-5584]:ReturnStatement[5574-5584]"
    }, {
      "left" : "if (f1 == 0.0)",
      "right" : "if (f1 == 0.0)",
      "info" : "IfStatement[5603-5652]:IfStatement[5603-5652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5618-5652]:Block[5618-5652]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[5632-5642]:ReturnStatement[5632-5642]"
    }, {
      "left" : "verifyBracketing(x0, x1);",
      "right" : "verifyBracketing(x0, x1);",
      "info" : "ExpressionStatement[5712-5737]:ExpressionStatement[5712-5737]"
    }, {
      "left" : "final double ftol = getFunctionValueAccuracy();",
      "right" : "final double ftol = getFunctionValueAccuracy();",
      "info" : "VariableDeclarationStatement[5774-5821]:VariableDeclarationStatement[5774-5821]"
    }, {
      "left" : "final double atol = getAbsoluteAccuracy();",
      "right" : "final double atol = getAbsoluteAccuracy();",
      "info" : "VariableDeclarationStatement[5830-5872]:VariableDeclarationStatement[5830-5872]"
    }, {
      "left" : "final double rtol = getRelativeAccuracy();",
      "right" : "final double rtol = getRelativeAccuracy();",
      "info" : "VariableDeclarationStatement[5881-5923]:VariableDeclarationStatement[5881-5923]"
    }, {
      "left" : "boolean inverted = false;",
      "right" : "boolean inverted = false;",
      "info" : "VariableDeclarationStatement[6049-6074]:VariableDeclarationStatement[6049-6074]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[6131-9559]:WhileStatement[6131-9354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6144-9559]:Block[6144-9354]"
    }, {
      "left" : "final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
      "right" : "final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));",
      "info" : "VariableDeclarationStatement[6207-6260]:VariableDeclarationStatement[6207-6260]"
    }, {
      "left" : "final double fx = computeObjectiveValue(x);",
      "right" : "final double fx = computeObjectiveValue(x);",
      "info" : "VariableDeclarationStatement[6273-6316]:VariableDeclarationStatement[6273-6316]"
    }, {
      "left" : "if (fx == 0.0)",
      "right" : "if (fx == 0.0)",
      "info" : "IfStatement[6551-6607]:IfStatement[6551-6607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6566-6607]:Block[6566-6607]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[6584-6593]:ReturnStatement[6584-6593]"
    }, {
      "left" : "if (f1 * fx < 0)",
      "right" : "if (f1 * fx < 0)",
      "info" : "IfStatement[6682-7598]:IfStatement[6682-7393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6699-6918]:Block[6699-6918]"
    }, {
      "left" : "x0 = x1;",
      "right" : "x0 = x1;",
      "info" : "ExpressionStatement[6833-6841]:ExpressionStatement[6833-6841]"
    }, {
      "left" : "f0 = f1;",
      "right" : "f0 = f1;",
      "info" : "ExpressionStatement[6858-6866]:ExpressionStatement[6858-6866]"
    }, {
      "left" : "inverted = !inverted;",
      "right" : "inverted = !inverted;",
      "info" : "ExpressionStatement[6883-6904]:ExpressionStatement[6883-6904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6924-7598]:Block[6924-7393]"
    }, {
      "left" : "switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Nothing.\n                    if (x == x1) {\n                        x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));\n                        f0 = computeObjectiveValue(x0);\n                    }\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }",
      "right" : "switch (method) {\n                case ILLINOIS:\n                    f0 *= 0.5;\n                    break;\n                case PEGASUS:\n                    f0 *= f1 / (f1 + fx);\n                    break;\n                case REGULA_FALSI:\n                    // Nothing.\n                    break;\n                default:\n                    // Should never happen.\n                    throw new MathInternalError();\n                }",
      "info" : "SwitchStatement[6942-7584]:SwitchStatement[6942-7379]"
    }, {
      "left" : "case ILLINOIS:",
      "right" : "case ILLINOIS:",
      "info" : "SwitchCase[6976-6990]:SwitchCase[6976-6990]"
    }, {
      "left" : "f0 *= 0.5;",
      "right" : "f0 *= 0.5;",
      "info" : "ExpressionStatement[7011-7021]:ExpressionStatement[7011-7021]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7042-7048]:BreakStatement[7042-7048]"
    }, {
      "left" : "case PEGASUS:",
      "right" : "case PEGASUS:",
      "info" : "SwitchCase[7065-7078]:SwitchCase[7065-7078]"
    }, {
      "left" : "f0 *= f1 / (f1 + fx);",
      "right" : "f0 *= f1 / (f1 + fx);",
      "info" : "ExpressionStatement[7099-7120]:ExpressionStatement[7099-7120]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7141-7147]:BreakStatement[7141-7147]"
    }, {
      "left" : "case REGULA_FALSI:",
      "right" : "case REGULA_FALSI:",
      "info" : "SwitchCase[7164-7182]:SwitchCase[7164-7182]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7440-7446]:BreakStatement[8124-8130]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7463-7471]:SwitchCase[7258-7266]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[7536-7566]:ThrowStatement[7331-7361]"
    }, {
      "left" : "x1 = x;",
      "right" : "x1 = x;",
      "info" : "ExpressionStatement[7659-7666]:ExpressionStatement[7454-7461]"
    }, {
      "left" : "f1 = fx;",
      "right" : "f1 = fx;",
      "info" : "ExpressionStatement[7679-7687]:ExpressionStatement[7474-7482]"
    }, {
      "left" : "if (FastMath.abs(f1) <= ftol)",
      "right" : "if (FastMath.abs(f1) <= ftol)",
      "info" : "IfStatement[7901-8747]:IfStatement[7696-8542]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7931-8747]:Block[8817-9344]"
    }, {
      "left" : "switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n                }",
      "right" : "switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }",
      "info" : "SwitchStatement[7949-8733]:SwitchStatement[8835-9330]"
    }, {
      "left" : "case ANY_SIDE:",
      "right" : "case ANY_SIDE:",
      "info" : "SwitchCase[7984-7998]:SwitchCase[7779-7793]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8019-8029]:ReturnStatement[7814-7824]"
    }, {
      "left" : "case LEFT_SIDE:",
      "right" : "case LEFT_SIDE:",
      "info" : "SwitchCase[8046-8061]:SwitchCase[7841-7856]"
    }, {
      "left" : "if (inverted)",
      "right" : "if (inverted)",
      "info" : "IfStatement[8082-8154]:IfStatement[7877-7949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8096-8154]:Block[7891-7949]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8122-8132]:ReturnStatement[7917-7927]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8175-8181]:BreakStatement[7970-7976]"
    }, {
      "left" : "case RIGHT_SIDE:",
      "right" : "case RIGHT_SIDE:",
      "info" : "SwitchCase[8198-8214]:SwitchCase[7993-8009]"
    }, {
      "left" : "if (!inverted)",
      "right" : "if (!inverted)",
      "info" : "IfStatement[8235-8308]:IfStatement[8030-8103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8250-8308]:Block[8045-8103]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8276-8286]:ReturnStatement[8071-8081]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8329-8335]:BreakStatement[7235-7241]"
    }, {
      "left" : "case BELOW_SIDE:",
      "right" : "case BELOW_SIDE:",
      "info" : "SwitchCase[8352-8368]:SwitchCase[8147-8163]"
    }, {
      "left" : "if (f1 <= 0)",
      "right" : "if (f1 <= 0)",
      "info" : "IfStatement[8389-8460]:IfStatement[8184-8255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8402-8460]:Block[8197-8255]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8428-8438]:ReturnStatement[8223-8233]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8481-8487]:BreakStatement[8276-8282]"
    }, {
      "left" : "case ABOVE_SIDE:",
      "right" : "case ABOVE_SIDE:",
      "info" : "SwitchCase[8504-8520]:SwitchCase[8299-8315]"
    }, {
      "left" : "if (f1 >= 0)",
      "right" : "if (f1 >= 0)",
      "info" : "IfStatement[8541-8612]:IfStatement[8336-8407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8554-8612]:Block[8349-8407]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[8580-8590]:ReturnStatement[8375-8385]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8633-8639]:BreakStatement[8428-8434]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8656-8664]:SwitchCase[8451-8459]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[8685-8715]:ThrowStatement[8480-8510]"
    }, {
      "left" : "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol))",
      "right" : "if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),\n                                                     atol))",
      "info" : "IfStatement[8896-9549]:IfStatement[8691-9344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9022-9549]:Block[7726-8542]"
    }, {
      "left" : "switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    return inverted ? x1 : x0;\n                case RIGHT_SIDE:\n                    return inverted ? x0 : x1;\n                case BELOW_SIDE:\n                    return (f1 <= 0) ? x1 : x0;\n                case ABOVE_SIDE:\n                    return (f1 >= 0) ? x1 : x0;\n                default:\n                    throw new MathInternalError();\n                }",
      "right" : "switch (allowed) {\n                case ANY_SIDE:\n                    return x1;\n                case LEFT_SIDE:\n                    if (inverted) {\n                        return x1;\n                    }\n                    break;\n                case RIGHT_SIDE:\n                    if (!inverted) {\n                        return x1;\n                    }\n                    break;\n                case BELOW_SIDE:\n                    if (f1 <= 0) {\n                        return x1;\n                    }\n                    break;\n                case ABOVE_SIDE:\n                    if (f1 >= 0) {\n                        return x1;\n                    }\n                    break;\n                default:\n                    throw new MathInternalError();\n                }",
      "info" : "SwitchStatement[9040-9535]:SwitchStatement[7744-8528]"
    }, {
      "left" : "case ANY_SIDE:",
      "right" : "case ANY_SIDE:",
      "info" : "SwitchCase[9075-9089]:SwitchCase[8870-8884]"
    }, {
      "left" : "return x1;",
      "right" : "return x1;",
      "info" : "ReturnStatement[9110-9120]:ReturnStatement[8905-8915]"
    }, {
      "left" : "case LEFT_SIDE:",
      "right" : "case LEFT_SIDE:",
      "info" : "SwitchCase[9137-9152]:SwitchCase[8932-8947]"
    }, {
      "left" : "return inverted ? x1 : x0;",
      "right" : "return inverted ? x1 : x0;",
      "info" : "ReturnStatement[9173-9199]:ReturnStatement[8968-8994]"
    }, {
      "left" : "case RIGHT_SIDE:",
      "right" : "case RIGHT_SIDE:",
      "info" : "SwitchCase[9216-9232]:SwitchCase[9011-9027]"
    }, {
      "left" : "return inverted ? x0 : x1;",
      "right" : "return inverted ? x0 : x1;",
      "info" : "ReturnStatement[9253-9279]:ReturnStatement[9048-9074]"
    }, {
      "left" : "case BELOW_SIDE:",
      "right" : "case BELOW_SIDE:",
      "info" : "SwitchCase[9296-9312]:SwitchCase[9091-9107]"
    }, {
      "left" : "return (f1 <= 0) ? x1 : x0;",
      "right" : "return (f1 <= 0) ? x1 : x0;",
      "info" : "ReturnStatement[9333-9360]:ReturnStatement[9128-9155]"
    }, {
      "left" : "case ABOVE_SIDE:",
      "right" : "case ABOVE_SIDE:",
      "info" : "SwitchCase[9377-9393]:SwitchCase[9172-9188]"
    }, {
      "left" : "return (f1 >= 0) ? x1 : x0;",
      "right" : "return (f1 >= 0) ? x1 : x0;",
      "info" : "ReturnStatement[9414-9441]:ReturnStatement[9209-9236]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9458-9466]:SwitchCase[9253-9261]"
    }, {
      "left" : "throw new MathInternalError();",
      "right" : "throw new MathInternalError();",
      "info" : "ThrowStatement[9487-9517]:ThrowStatement[9282-9312]"
    } ]
  },
  "interFileMappings" : { }
}