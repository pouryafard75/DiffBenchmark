{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "Entities",
      "right" : "Entities",
      "info" : "TypeDeclaration[212-9950]:TypeDeclaration[212-9957]"
    }, {
      "left" : "enum : EscapeMode",
      "right" : "enum : EscapeMode",
      "info" : "EnumDeclaration[438-940]:EnumDeclaration[438-940]"
    }, {
      "left" : "private Map<Character, String> map;",
      "right" : "private Map<Character, String> map;",
      "info" : "FieldDeclaration[727-762]:FieldDeclaration[727-762]"
    }, {
      "left" : "EscapeMode(Map<Character, String> map)",
      "right" : "EscapeMode(Map<Character, String> map)",
      "info" : "MethodDeclaration[772-850]:MethodDeclaration[772-850]"
    }, {
      "left" : "public Map<Character, String> getMap()",
      "right" : "public Map<Character, String> getMap()",
      "info" : "MethodDeclaration[860-934]:MethodDeclaration[860-934]"
    }, {
      "left" : "private static final Map<String, Character> full;",
      "right" : "private static final Map<String, Character> full;",
      "info" : "FieldDeclaration[946-995]:FieldDeclaration[946-995]"
    }, {
      "left" : "private static final Map<Character, String> xhtmlByVal;",
      "right" : "private static final Map<Character, String> xhtmlByVal;",
      "info" : "FieldDeclaration[1000-1055]:FieldDeclaration[1000-1055]"
    }, {
      "left" : "private static final Map<String, Character> base;",
      "right" : "private static final Map<String, Character> base;",
      "info" : "FieldDeclaration[1060-1109]:FieldDeclaration[1060-1109]"
    }, {
      "left" : "private static final Map<Character, String> baseByVal;",
      "right" : "private static final Map<Character, String> baseByVal;",
      "info" : "FieldDeclaration[1114-1168]:FieldDeclaration[1114-1168]"
    }, {
      "left" : "private static final Map<Character, String> fullByVal;",
      "right" : "private static final Map<Character, String> fullByVal;",
      "info" : "FieldDeclaration[1173-1227]:FieldDeclaration[1173-1227]"
    }, {
      "left" : "private Entities()",
      "right" : "private Entities()",
      "info" : "MethodDeclaration[1233-1254]:MethodDeclaration[1233-1254]"
    }, {
      "left" : "public static boolean isNamedEntity(String name)",
      "right" : "public static boolean isNamedEntity(String name)",
      "info" : "MethodDeclaration[1260-1530]:MethodDeclaration[1260-1530]"
    }, {
      "left" : "public static boolean isBaseNamedEntity(String name)",
      "right" : "public static boolean isBaseNamedEntity(String name)",
      "info" : "MethodDeclaration[1536-1885]:MethodDeclaration[1536-1885]"
    }, {
      "left" : "public static Character getCharacterByName(String name)",
      "right" : "public static Character getCharacterByName(String name)",
      "info" : "MethodDeclaration[1891-2200]:MethodDeclaration[1891-2200]"
    }, {
      "left" : "static String escape(String string, Document.OutputSettings out)",
      "right" : "static String escape(String string, Document.OutputSettings out)",
      "info" : "MethodDeclaration[2210-2442]:MethodDeclaration[2210-2442]"
    }, {
      "left" : "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite)",
      "right" : "static void escape(StringBuilder accum, String string, Document.OutputSettings out,\n                       boolean inAttribute, boolean normaliseWhite, boolean stripLeadingWhite)",
      "info" : "MethodDeclaration[2558-5893]:MethodDeclaration[2558-5900]"
    }, {
      "left" : "static String unescape(String string)",
      "right" : "static String unescape(String string)",
      "info" : "MethodDeclaration[5899-5984]:MethodDeclaration[5906-5991]"
    }, {
      "left" : "static String unescape(String string, boolean strict)",
      "right" : "static String unescape(String string, boolean strict)",
      "info" : "MethodDeclaration[5990-6326]:MethodDeclaration[5997-6333]"
    }, {
      "left" : "private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback)",
      "right" : "private static boolean canEncode(final CoreCharset charset, final char c, final CharsetEncoder fallback)",
      "info" : "MethodDeclaration[6909-7420]:MethodDeclaration[6916-7427]"
    }, {
      "left" : "enum : CoreCharset",
      "right" : "enum : CoreCharset",
      "info" : "EnumDeclaration[7426-7756]:EnumDeclaration[7433-7763]"
    }, {
      "left" : "private static CoreCharset byName(String name)",
      "right" : "private static CoreCharset byName(String name)",
      "info" : "MethodDeclaration[7492-7750]:MethodDeclaration[7499-7757]"
    }, {
      "left" : "private static final Object[][] xhtmlArray = {\n            {\"quot\", 0x00022},\n            {\"amp\", 0x00026},\n            {\"lt\", 0x0003C},\n            {\"gt\", 0x0003E}\n    };",
      "right" : "private static final Object[][] xhtmlArray = {\n            {\"quot\", 0x00022},\n            {\"amp\", 0x00026},\n            {\"lt\", 0x0003C},\n            {\"gt\", 0x0003E}\n    };",
      "info" : "FieldDeclaration[7800-7971]:FieldDeclaration[7807-7978]"
    }, {
      "left" : "private static Map<String, Character> loadEntities(String filename)",
      "right" : "private static Map<String, Character> loadEntities(String filename)",
      "info" : "MethodDeclaration[8498-9295]:MethodDeclaration[8505-9302]"
    }, {
      "left" : "private static Map<Character, String> toCharacterKey(Map<String, Character> inMap)",
      "right" : "private static Map<Character, String> toCharacterKey(Map<String, Character> inMap)",
      "info" : "MethodDeclaration[9301-9948]:MethodDeclaration[9308-9955]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[811-850]:Block[811-850]"
    }, {
      "left" : "this.map = map;",
      "right" : "this.map = map;",
      "info" : "ExpressionStatement[825-840]:ExpressionStatement[825-840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[899-934]:Block[899-934]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[913-924]:ReturnStatement[913-924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1252-1254]:Block[1252-1254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1484-1530]:Block[1484-1530]"
    }, {
      "left" : "return full.containsKey(name);",
      "right" : "return full.containsKey(name);",
      "info" : "ReturnStatement[1494-1524]:ReturnStatement[1494-1524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1839-1885]:Block[1839-1885]"
    }, {
      "left" : "return base.containsKey(name);",
      "right" : "return base.containsKey(name);",
      "info" : "ReturnStatement[1849-1879]:ReturnStatement[1849-1879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2162-2200]:Block[2162-2200]"
    }, {
      "left" : "return full.get(name);",
      "right" : "return full.get(name);",
      "info" : "ReturnStatement[2172-2194]:ReturnStatement[2172-2194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2275-2442]:Block[2275-2442]"
    }, {
      "left" : "StringBuilder accum = new StringBuilder(string.length() * 2);",
      "right" : "StringBuilder accum = new StringBuilder(string.length() * 2);",
      "info" : "VariableDeclarationStatement[2285-2346]:VariableDeclarationStatement[2285-2346]"
    }, {
      "left" : "escape(accum, string, out, false, false, false);",
      "right" : "escape(accum, string, out, false, false, false);",
      "info" : "ExpressionStatement[2355-2403]:ExpressionStatement[2355-2403]"
    }, {
      "left" : "return accum.toString();",
      "right" : "return accum.toString();",
      "info" : "ReturnStatement[2412-2436]:ReturnStatement[2412-2436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2737-5893]:Block[2737-5900]"
    }, {
      "left" : "boolean lastWasWhite = false;",
      "right" : "boolean lastWasWhite = false;",
      "info" : "VariableDeclarationStatement[2748-2777]:VariableDeclarationStatement[2748-2777]"
    }, {
      "left" : "boolean reachedNonWhite = false;",
      "right" : "boolean reachedNonWhite = false;",
      "info" : "VariableDeclarationStatement[2786-2818]:VariableDeclarationStatement[2786-2818]"
    }, {
      "left" : "final EscapeMode escapeMode = out.escapeMode();",
      "right" : "final EscapeMode escapeMode = out.escapeMode();",
      "info" : "VariableDeclarationStatement[2827-2874]:VariableDeclarationStatement[2827-2874]"
    }, {
      "left" : "final CharsetEncoder encoder = out.encoder();",
      "right" : "final CharsetEncoder encoder = out.encoder();",
      "info" : "VariableDeclarationStatement[2883-2928]:VariableDeclarationStatement[2883-2928]"
    }, {
      "left" : "final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());",
      "right" : "final CoreCharset coreCharset = CoreCharset.byName(encoder.charset().name());",
      "info" : "VariableDeclarationStatement[2937-3014]:VariableDeclarationStatement[2937-3014]"
    }, {
      "left" : "final Map<Character, String> map = escapeMode.getMap();",
      "right" : "final Map<Character, String> map = escapeMode.getMap();",
      "info" : "VariableDeclarationStatement[3023-3078]:VariableDeclarationStatement[3023-3078]"
    }, {
      "left" : "final int length = string.length();",
      "right" : "final int length = string.length();",
      "info" : "VariableDeclarationStatement[3087-3122]:VariableDeclarationStatement[3087-3122]"
    }, {
      "left" : "int codePoint;",
      "right" : "int codePoint;",
      "info" : "VariableDeclarationStatement[3132-3146]:VariableDeclarationStatement[3132-3146]"
    }, {
      "left" : "for (int offset = 0; offset < length; offset += Character.charCount(codePoint))",
      "right" : "for (int offset = 0; offset < length; offset += Character.charCount(codePoint))",
      "info" : "ForStatement[3155-5887]:ForStatement[3155-5894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3235-5887]:Block[3235-5894]"
    }, {
      "left" : "codePoint = string.codePointAt(offset);",
      "right" : "codePoint = string.codePointAt(offset);",
      "info" : "ExpressionStatement[3249-3288]:ExpressionStatement[3249-3288]"
    }, {
      "left" : "if (normaliseWhite)",
      "right" : "if (normaliseWhite)",
      "info" : "IfStatement[3302-3749]:IfStatement[3302-3749]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3322-3749]:Block[3322-3749]"
    }, {
      "left" : "if (StringUtil.isWhitespace(codePoint))",
      "right" : "if (StringUtil.isWhitespace(codePoint))",
      "info" : "IfStatement[3340-3735]:IfStatement[3340-3735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3380-3624]:Block[3380-3624]"
    }, {
      "left" : "if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)",
      "right" : "if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite)",
      "info" : "IfStatement[3402-3496]:IfStatement[3402-3496]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[3487-3496]:ContinueStatement[3487-3496]"
    }, {
      "left" : "accum.append(' ');",
      "right" : "accum.append(' ');",
      "info" : "ExpressionStatement[3517-3535]:ExpressionStatement[3517-3535]"
    }, {
      "left" : "lastWasWhite = true;",
      "right" : "lastWasWhite = true;",
      "info" : "ExpressionStatement[3556-3576]:ExpressionStatement[3556-3576]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[3597-3606]:ContinueStatement[3597-3606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3630-3735]:Block[3630-3735]"
    }, {
      "left" : "lastWasWhite = false;",
      "right" : "lastWasWhite = false;",
      "info" : "ExpressionStatement[3652-3673]:ExpressionStatement[3652-3673]"
    }, {
      "left" : "reachedNonWhite = true;",
      "right" : "reachedNonWhite = true;",
      "info" : "ExpressionStatement[3694-3717]:ExpressionStatement[3694-3717]"
    }, {
      "left" : "if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT)",
      "right" : "if (codePoint < Character.MIN_SUPPLEMENTARY_CODE_POINT)",
      "info" : "IfStatement[3891-5877]:IfStatement[3891-5884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3947-5549]:Block[3947-5556]"
    }, {
      "left" : "final char c = (char) codePoint;",
      "right" : "final char c = (char) codePoint;",
      "info" : "VariableDeclarationStatement[3965-3997]:VariableDeclarationStatement[3965-3997]"
    }, {
      "left" : "switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0:\n                        if (escapeMode != EscapeMode.xhtml)\n                            accum.append(\"&nbsp;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '<':\n                        if (!inAttribute)\n                            accum.append(\"&lt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '>':\n                        if (!inAttribute)\n                            accum.append(\"&gt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '\"':\n                        if (inAttribute)\n                            accum.append(\"&quot;\");\n                        else\n                            accum.append(c);\n                        break;\n                    default:\n                        if (canEncode(coreCharset, c, encoder))\n                            accum.append(c);\n                        else if (map.containsKey(c))\n                            accum.append('&').append(map.get(c)).append(';');\n                        else\n                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                }",
      "right" : "switch (c) {\n                    case '&':\n                        accum.append(\"&amp;\");\n                        break;\n                    case 0xA0:\n                        if (escapeMode != EscapeMode.xhtml)\n                            accum.append(\"&nbsp;\");\n                        else\n                            accum.append(\"&#xa0;\");\n                        break;\n                    case '<':\n                        if (!inAttribute)\n                            accum.append(\"&lt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '>':\n                        if (!inAttribute)\n                            accum.append(\"&gt;\");\n                        else\n                            accum.append(c);\n                        break;\n                    case '\"':\n                        if (inAttribute)\n                            accum.append(\"&quot;\");\n                        else\n                            accum.append(c);\n                        break;\n                    default:\n                        if (canEncode(coreCharset, c, encoder))\n                            accum.append(c);\n                        else if (map.containsKey(c))\n                            accum.append('&').append(map.get(c)).append(';');\n                        else\n                            accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');\n                }",
      "info" : "SwitchStatement[4069-5535]:SwitchStatement[4069-5542]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[4102-4111]:SwitchCase[4102-4111]"
    }, {
      "left" : "accum.append(\"&amp;\");",
      "right" : "accum.append(\"&amp;\");",
      "info" : "ExpressionStatement[4136-4158]:ExpressionStatement[4136-4158]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4183-4189]:BreakStatement[4183-4189]"
    }, {
      "left" : "case 0xA0:",
      "right" : "case 0xA0:",
      "info" : "SwitchCase[4210-4220]:SwitchCase[4210-4220]"
    }, {
      "left" : "if (escapeMode != EscapeMode.xhtml)",
      "right" : "if (escapeMode != EscapeMode.xhtml)",
      "info" : "IfStatement[4245-4406]:IfStatement[4245-4413]"
    }, {
      "left" : "accum.append(\"&nbsp;\");",
      "right" : "accum.append(\"&nbsp;\");",
      "info" : "ExpressionStatement[4309-4332]:ExpressionStatement[4309-4332]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[4390-4406]:ExpressionStatement[4624-4640]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4431-4437]:BreakStatement[4438-4444]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[4458-4467]:SwitchCase[4465-4474]"
    }, {
      "left" : "if (!inAttribute)",
      "right" : "if (!inAttribute)",
      "info" : "IfStatement[4492-4633]:IfStatement[4499-4640]"
    }, {
      "left" : "accum.append(\"&lt;\");",
      "right" : "accum.append(\"&lt;\");",
      "info" : "ExpressionStatement[4538-4559]:ExpressionStatement[4545-4566]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[4617-4633]:ExpressionStatement[4851-4867]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4658-4664]:BreakStatement[4665-4671]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[4685-4694]:SwitchCase[4692-4701]"
    }, {
      "left" : "if (!inAttribute)",
      "right" : "if (!inAttribute)",
      "info" : "IfStatement[4719-4860]:IfStatement[4726-4867]"
    }, {
      "left" : "accum.append(\"&gt;\");",
      "right" : "accum.append(\"&gt;\");",
      "info" : "ExpressionStatement[4765-4786]:ExpressionStatement[4772-4793]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[4844-4860]:ExpressionStatement[5079-5095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4885-4891]:BreakStatement[4892-4898]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[4912-4921]:SwitchCase[4919-4928]"
    }, {
      "left" : "if (inAttribute)",
      "right" : "if (inAttribute)",
      "info" : "IfStatement[4946-5088]:IfStatement[4953-5095]"
    }, {
      "left" : "accum.append(\"&quot;\");",
      "right" : "accum.append(\"&quot;\");",
      "info" : "ExpressionStatement[4991-5014]:ExpressionStatement[4998-5021]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[5072-5088]:ExpressionStatement[5248-5264]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5113-5119]:BreakStatement[5120-5126]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5140-5148]:SwitchCase[5147-5155]"
    }, {
      "left" : "if (canEncode(coreCharset, c, encoder))",
      "right" : "if (canEncode(coreCharset, c, encoder))",
      "info" : "IfStatement[5173-5517]:IfStatement[5180-5524]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(\"&#xa0;\");",
      "info" : "ExpressionStatement[5241-5257]:ExpressionStatement[4390-4413]"
    }, {
      "left" : "if (map.containsKey(c))",
      "right" : "if (map.containsKey(c))",
      "info" : "IfStatement[5287-5517]:IfStatement[5294-5524]"
    }, {
      "left" : "accum.append('&').append(map.get(c)).append(';');",
      "right" : "accum.append('&').append(map.get(c)).append(';');",
      "info" : "ExpressionStatement[5339-5388]:ExpressionStatement[5346-5395]"
    }, {
      "left" : "accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');",
      "right" : "accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');",
      "info" : "ExpressionStatement[5446-5517]:ExpressionStatement[5453-5524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5555-5877]:Block[5562-5884]"
    }, {
      "left" : "final String c = new String(Character.toChars(codePoint));",
      "right" : "final String c = new String(Character.toChars(codePoint));",
      "info" : "VariableDeclarationStatement[5573-5631]:VariableDeclarationStatement[5580-5638]"
    }, {
      "left" : "if (encoder.canEncode(c))",
      "right" : "if (encoder.canEncode(c))",
      "info" : "IfStatement[5648-5863]:IfStatement[5655-5870]"
    }, {
      "left" : "accum.append(c);",
      "right" : "accum.append(c);",
      "info" : "ExpressionStatement[5734-5750]:ExpressionStatement[5741-5757]"
    }, {
      "left" : "accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');",
      "right" : "accum.append(\"&#x\").append(Integer.toHexString(codePoint)).append(';');",
      "info" : "ExpressionStatement[5792-5863]:ExpressionStatement[5799-5870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5937-5984]:Block[5944-5991]"
    }, {
      "left" : "return unescape(string, false);",
      "right" : "return unescape(string, false);",
      "info" : "ReturnStatement[5947-5978]:ReturnStatement[5954-5985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6263-6326]:Block[6270-6333]"
    }, {
      "left" : "return Parser.unescapeEntities(string, strict);",
      "right" : "return Parser.unescapeEntities(string, strict);",
      "info" : "ReturnStatement[6273-6320]:ReturnStatement[6280-6327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7014-7420]:Block[7021-7427]"
    }, {
      "left" : "switch (charset) {\n            case ascii:\n                return c < 0x80;\n            case utf:\n                return true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n            default:\n                return fallback.canEncode(c);\n        }",
      "right" : "switch (charset) {\n            case ascii:\n                return c < 0x80;\n            case utf:\n                return true; // real is:!(Character.isLowSurrogate(c) || Character.isHighSurrogate(c)); - but already check above\n            default:\n                return fallback.canEncode(c);\n        }",
      "info" : "SwitchStatement[7110-7414]:SwitchStatement[7117-7421]"
    }, {
      "left" : "case ascii:",
      "right" : "case ascii:",
      "info" : "SwitchCase[7141-7152]:SwitchCase[7148-7159]"
    }, {
      "left" : "return c < 0x80;",
      "right" : "return c < 0x80;",
      "info" : "ReturnStatement[7169-7185]:ReturnStatement[7176-7192]"
    }, {
      "left" : "case utf:",
      "right" : "case utf:",
      "info" : "SwitchCase[7198-7207]:SwitchCase[7205-7214]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7224-7236]:ReturnStatement[7231-7243]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7350-7358]:SwitchCase[7357-7365]"
    }, {
      "left" : "return fallback.canEncode(c);",
      "right" : "return fallback.canEncode(c);",
      "info" : "ReturnStatement[7375-7404]:ReturnStatement[7382-7411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7539-7750]:Block[7546-7757]"
    }, {
      "left" : "if (name.equals(\"US-ASCII\"))",
      "right" : "if (name.equals(\"US-ASCII\"))",
      "info" : "IfStatement[7553-7611]:IfStatement[7560-7618]"
    }, {
      "left" : "return ascii;",
      "right" : "return ascii;",
      "info" : "ReturnStatement[7598-7611]:ReturnStatement[7605-7618]"
    }, {
      "left" : "if (name.startsWith(\"UTF-\"))",
      "right" : "if (name.startsWith(\"UTF-\"))",
      "info" : "IfStatement[7624-7711]:IfStatement[7631-7718]"
    }, {
      "left" : "return utf;",
      "right" : "return utf;",
      "info" : "ReturnStatement[7700-7711]:ReturnStatement[7707-7718]"
    }, {
      "left" : "return fallback;",
      "right" : "return fallback;",
      "info" : "ReturnStatement[7724-7740]:ReturnStatement[7731-7747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8566-9295]:Block[8573-9302]"
    }, {
      "left" : "Properties properties = new Properties();",
      "right" : "Properties properties = new Properties();",
      "info" : "VariableDeclarationStatement[8576-8617]:VariableDeclarationStatement[8583-8624]"
    }, {
      "left" : "Map<String, Character> entities = new HashMap<String, Character>();",
      "right" : "Map<String, Character> entities = new HashMap<String, Character>();",
      "info" : "VariableDeclarationStatement[8626-8693]:VariableDeclarationStatement[8633-8700]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8702-9007]:TryStatement[8709-9014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8706-8849]:Block[8713-8856]"
    }, {
      "left" : "InputStream in = Entities.class.getResourceAsStream(filename);",
      "right" : "InputStream in = Entities.class.getResourceAsStream(filename);",
      "info" : "VariableDeclarationStatement[8720-8782]:VariableDeclarationStatement[8727-8789]"
    }, {
      "left" : "properties.load(in);",
      "right" : "properties.load(in);",
      "info" : "ExpressionStatement[8795-8815]:ExpressionStatement[8802-8822]"
    }, {
      "left" : "in.close();",
      "right" : "in.close();",
      "info" : "ExpressionStatement[8828-8839]:ExpressionStatement[8835-8846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8872-9007]:Block[8879-9014]"
    }, {
      "left" : "throw new MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);",
      "right" : "throw new MissingResourceException(\"Error loading entities resource: \" + e.getMessage(), \"Entities\", filename);",
      "info" : "ThrowStatement[8886-8997]:ThrowStatement[8893-9004]"
    }, {
      "left" : "for (Map.Entry entry: properties.entrySet())",
      "right" : "for (Map.Entry entry: properties.entrySet())",
      "info" : "EnhancedForStatement[9017-9264]:EnhancedForStatement[9024-9271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9062-9264]:Block[9069-9271]"
    }, {
      "left" : "Character val = Character.valueOf((char) Integer.parseInt((String) entry.getValue(), 16));",
      "right" : "Character val = Character.valueOf((char) Integer.parseInt((String) entry.getValue(), 16));",
      "info" : "VariableDeclarationStatement[9076-9166]:VariableDeclarationStatement[9083-9173]"
    }, {
      "left" : "String name = (String) entry.getKey();",
      "right" : "String name = (String) entry.getKey();",
      "info" : "VariableDeclarationStatement[9179-9217]:VariableDeclarationStatement[9186-9224]"
    }, {
      "left" : "entities.put(name, val);",
      "right" : "entities.put(name, val);",
      "info" : "ExpressionStatement[9230-9254]:ExpressionStatement[9237-9261]"
    }, {
      "left" : "return entities;",
      "right" : "return entities;",
      "info" : "ReturnStatement[9273-9289]:ReturnStatement[9280-9296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9384-9948]:Block[9391-9955]"
    }, {
      "left" : "Map<Character, String> outMap = new HashMap<Character, String>();",
      "right" : "Map<Character, String> outMap = new HashMap<Character, String>();",
      "info" : "VariableDeclarationStatement[9394-9459]:VariableDeclarationStatement[9401-9466]"
    }, {
      "left" : "for (Map.Entry<String, Character> entry: inMap.entrySet())",
      "right" : "for (Map.Entry<String, Character> entry: inMap.entrySet())",
      "info" : "EnhancedForStatement[9468-9919]:EnhancedForStatement[9475-9926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9527-9919]:Block[9534-9926]"
    }, {
      "left" : "Character character = entry.getValue();",
      "right" : "Character character = entry.getValue();",
      "info" : "VariableDeclarationStatement[9541-9580]:VariableDeclarationStatement[9548-9587]"
    }, {
      "left" : "String name = entry.getKey();",
      "right" : "String name = entry.getKey();",
      "info" : "VariableDeclarationStatement[9593-9622]:VariableDeclarationStatement[9600-9629]"
    }, {
      "left" : "if (outMap.containsKey(character))",
      "right" : "if (outMap.containsKey(character))",
      "info" : "IfStatement[9636-9909]:IfStatement[9643-9916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9671-9843]:Block[9678-9850]"
    }, {
      "left" : "if (name.toLowerCase().equals(name))",
      "right" : "if (name.toLowerCase().equals(name))",
      "info" : "IfStatement[9744-9829]:IfStatement[9751-9836]"
    }, {
      "left" : "outMap.put(character, name);",
      "right" : "outMap.put(character, name);",
      "info" : "ExpressionStatement[9801-9829]:ExpressionStatement[9808-9836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9849-9909]:Block[9856-9916]"
    }, {
      "left" : "outMap.put(character, name);",
      "right" : "outMap.put(character, name);",
      "info" : "ExpressionStatement[9867-9895]:ExpressionStatement[9874-9902]"
    }, {
      "left" : "return outMap;",
      "right" : "return outMap;",
      "info" : "ReturnStatement[9928-9942]:ReturnStatement[9935-9949]"
    } ]
  },
  "interFileMappings" : { }
}