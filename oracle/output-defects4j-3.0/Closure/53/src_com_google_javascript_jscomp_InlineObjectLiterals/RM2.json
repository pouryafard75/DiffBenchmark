{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "InlineObjectLiterals",
      "right" : "InlineObjectLiterals",
      "info" : "TypeDeclaration[1395-15992]:TypeDeclaration[1395-16088]"
    }, {
      "left" : "public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";",
      "right" : "public static final String VAR_PREFIX = \"JSCompiler_object_inline_\";",
      "info" : "FieldDeclaration[1741-1809]:FieldDeclaration[1741-1809]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1813-1853]:FieldDeclaration[1813-1853]"
    }, {
      "left" : "private final Supplier<String> safeNameIdSupplier;",
      "right" : "private final Supplier<String> safeNameIdSupplier;",
      "info" : "FieldDeclaration[1857-1907]:FieldDeclaration[1857-1907]"
    }, {
      "left" : "InlineObjectLiterals(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier)",
      "right" : "InlineObjectLiterals(\n      AbstractCompiler compiler,\n      Supplier<String> safeNameIdSupplier)",
      "info" : "MethodDeclaration[1911-2094]:MethodDeclaration[1911-2094]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2098-2316]:MethodDeclaration[2098-2316]"
    }, {
      "left" : "InliningBehavior",
      "right" : "InliningBehavior",
      "info" : "TypeDeclaration[2320-15990]:TypeDeclaration[2320-16086]"
    }, {
      "left" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "right" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "info" : "FieldDeclaration[2545-2754]:FieldDeclaration[2545-2754]"
    }, {
      "left" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "right" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[2760-3684]:MethodDeclaration[2760-3684]"
    }, {
      "left" : "private void blacklistVarReferencesInTree(Node root, final Scope scope)",
      "right" : "private void blacklistVarReferencesInTree(Node root, final Scope scope)",
      "info" : "MethodDeclaration[3690-4311]:MethodDeclaration[3690-4311]"
    }, {
      "left" : "public void visit(Node node)",
      "right" : "public void visit(Node node)",
      "info" : "MethodDeclaration[4091-4266]:MethodDeclaration[4091-4266]"
    }, {
      "left" : "private boolean isVarInlineForbidden(Var var)",
      "right" : "private boolean isVarInlineForbidden(Var var)",
      "info" : "MethodDeclaration[4317-5167]:MethodDeclaration[4317-5167]"
    }, {
      "left" : "private boolean isInlinableObject(List<Reference> refs)",
      "right" : "private boolean isInlinableObject(List<Reference> refs)",
      "info" : "MethodDeclaration[5173-7984]:MethodDeclaration[5173-7984]"
    }, {
      "left" : "private boolean isVarOrAssignExprLhs(Node n)",
      "right" : "private boolean isVarOrAssignExprLhs(Node n)",
      "info" : "MethodDeclaration[7990-8281]:MethodDeclaration[7990-8281]"
    }, {
      "left" : "private Map<String, String> computeVarList(\n        Var v, ReferenceCollection referenceInfo)",
      "right" : "private Map<String, String> computeVarList(\n        Var v, ReferenceCollection referenceInfo)",
      "info" : "MethodDeclaration[8287-9896]:MethodDeclaration[8287-9896]"
    }, {
      "left" : "private void fillInitialValues(Reference init, Map<String, Node> initvals)",
      "right" : "private void fillInitialValues(Reference init, Map<String, Node> initvals)",
      "info" : "MethodDeclaration[9902-10431]:MethodDeclaration[9902-10431]"
    }, {
      "left" : "private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap)",
      "right" : "private void replaceAssignmentExpression(Var v, Reference ref,\n                                             Map<String, String> varmap)",
      "info" : "MethodDeclaration[10437-12884]:MethodDeclaration[10437-12980]"
    }, {
      "left" : "private void splitObject(Var v, Reference declaration,\n                             Reference init,\n                             ReferenceCollection referenceInfo)",
      "right" : "private void splitObject(Var v, Reference declaration,\n                             Reference init,\n                             ReferenceCollection referenceInfo)",
      "info" : "MethodDeclaration[12890-15986]:MethodDeclaration[12986-16082]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1685-1690]:TYPE_DECLARATION_KIND[1685-1690]"
    }, {
      "left" : "InlineObjectLiterals",
      "right" : "InlineObjectLiterals",
      "info" : "SimpleName[1691-1711]:SimpleName[1691-1711]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[1723-1735]:SimpleType[1723-1735]"
    }, {
      "left" : "InlineObjectLiterals",
      "right" : "InlineObjectLiterals",
      "info" : "SimpleName[1911-1931]:SimpleName[1911-1931]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[1939-1964]:SingleVariableDeclaration[1939-1964]"
    }, {
      "left" : "Supplier<String> safeNameIdSupplier",
      "right" : "Supplier<String> safeNameIdSupplier",
      "info" : "SingleVariableDeclaration[1972-2007]:SingleVariableDeclaration[1972-2007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2009-2094]:Block[2009-2094]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2015-2040]:ExpressionStatement[2015-2040]"
    }, {
      "left" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "right" : "this.safeNameIdSupplier = safeNameIdSupplier;",
      "info" : "ExpressionStatement[2045-2090]:ExpressionStatement[2045-2090]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2098-2107]:MarkerAnnotation[2098-2107]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2110-2116]:Modifier[2110-2116]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2117-2121]:PrimitiveType[2117-2121]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[2122-2129]:SimpleName[2122-2129]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[2130-2142]:SingleVariableDeclaration[2130-2142]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[2144-2153]:SingleVariableDeclaration[2144-2153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2155-2316]:Block[2155-2316]"
    }, {
      "left" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior());",
      "right" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior());",
      "info" : "VariableDeclarationStatement[2161-2275]:VariableDeclarationStatement[2161-2275]"
    }, {
      "left" : "callback.process(externs, root);",
      "right" : "callback.process(externs, root);",
      "info" : "ExpressionStatement[2280-2312]:ExpressionStatement[2280-2312]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2487-2494]:Modifier[2487-2494]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2495-2500]:TYPE_DECLARATION_KIND[2495-2500]"
    }, {
      "left" : "InliningBehavior",
      "right" : "InliningBehavior",
      "info" : "SimpleName[2501-2517]:SimpleName[2501-2517]"
    }, {
      "left" : "Behavior",
      "right" : "Behavior",
      "info" : "SimpleType[2529-2537]:SimpleType[2529-2537]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2760-2769]:MarkerAnnotation[2760-2769]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2774-2780]:Modifier[2774-2780]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2781-2785]:PrimitiveType[2781-2785]"
    }, {
      "left" : "afterExitScope",
      "right" : "afterExitScope",
      "info" : "SimpleName[2786-2800]:SimpleName[2786-2800]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[2801-2816]:SingleVariableDeclaration[2801-2816]"
    }, {
      "left" : "ReferenceMap referenceMap",
      "right" : "ReferenceMap referenceMap",
      "info" : "SingleVariableDeclaration[2818-2843]:SingleVariableDeclaration[2818-2843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2845-3684]:Block[2845-3684]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[2853-3678]:ForStatement[2853-3678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2916-3678]:Block[2916-3678]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[2926-2944]:VariableDeclarationStatement[2926-2944]"
    }, {
      "left" : "if (isVarInlineForbidden(v))",
      "right" : "if (isVarInlineForbidden(v))",
      "info" : "IfStatement[2954-3016]:IfStatement[2954-3016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2983-3016]:Block[2983-3016]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[2997-3006]:ContinueStatement[2997-3006]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "info" : "VariableDeclarationStatement[3026-3092]:VariableDeclarationStatement[3026-3092]"
    }, {
      "left" : "if (isInlinableObject(referenceInfo.references))",
      "right" : "if (isInlinableObject(referenceInfo.references))",
      "info" : "IfStatement[3102-3670]:IfStatement[3102-3670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3151-3670]:Block[3151-3670]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[3311-3328]:ExpressionStatement[3311-3328]"
    }, {
      "left" : "Reference declaration = referenceInfo.references.get(0);",
      "right" : "Reference declaration = referenceInfo.references.get(0);",
      "info" : "VariableDeclarationStatement[3342-3398]:VariableDeclarationStatement[3342-3398]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[3411-3469]:VariableDeclarationStatement[3411-3469]"
    }, {
      "left" : "splitObject(v, declaration, init, referenceInfo);",
      "right" : "splitObject(v, declaration, init, referenceInfo);",
      "info" : "ExpressionStatement[3611-3660]:ExpressionStatement[3611-3660]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3949-3956]:Modifier[3949-3956]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3957-3961]:PrimitiveType[3957-3961]"
    }, {
      "left" : "blacklistVarReferencesInTree",
      "right" : "blacklistVarReferencesInTree",
      "info" : "SimpleName[3962-3990]:SimpleName[3962-3990]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[3991-4000]:SingleVariableDeclaration[3991-4000]"
    }, {
      "left" : "final Scope scope",
      "right" : "final Scope scope",
      "info" : "SingleVariableDeclaration[4002-4019]:SingleVariableDeclaration[4002-4019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4021-4311]:Block[4021-4311]"
    }, {
      "left" : "NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n          if (node.getType() == Token.NAME) {\n            staleVars.add(scope.getVar(node.getString()));\n          }\n        }\n      }, NodeUtil.MATCH_NOT_FUNCTION);",
      "right" : "NodeUtil.visitPreOrder(root, new NodeUtil.Visitor() {\n        @Override\n        public void visit(Node node) {\n          if (node.getType() == Token.NAME) {\n            staleVars.add(scope.getVar(node.getString()));\n          }\n        }\n      }, NodeUtil.MATCH_NOT_FUNCTION);",
      "info" : "ExpressionStatement[4029-4305]:ExpressionStatement[4029-4305]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4091-4100]:MarkerAnnotation[4091-4100]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4109-4115]:Modifier[4109-4115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4116-4120]:PrimitiveType[4116-4120]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[4121-4126]:SimpleName[4121-4126]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[4127-4136]:SingleVariableDeclaration[4127-4136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4138-4266]:Block[4138-4266]"
    }, {
      "left" : "if (node.getType() == Token.NAME)",
      "right" : "if (node.getType() == Token.NAME)",
      "info" : "IfStatement[4150-4256]:IfStatement[4150-4256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4184-4256]:Block[4184-4256]"
    }, {
      "left" : "staleVars.add(scope.getVar(node.getString()));",
      "right" : "staleVars.add(scope.getVar(node.getString()));",
      "info" : "ExpressionStatement[4198-4244]:ExpressionStatement[4198-4244]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4400-4407]:Modifier[4400-4407]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4408-4415]:PrimitiveType[4408-4415]"
    }, {
      "left" : "isVarInlineForbidden",
      "right" : "isVarInlineForbidden",
      "info" : "SimpleName[4416-4436]:SimpleName[4416-4436]"
    }, {
      "left" : "Var var",
      "right" : "Var var",
      "info" : "SingleVariableDeclaration[4437-4444]:SingleVariableDeclaration[4437-4444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4446-5167]:Block[4446-5167]"
    }, {
      "left" : "return var.isGlobal()\n          || var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "right" : "return var.isGlobal()\n          || var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "info" : "ReturnStatement[4932-5161]:ReturnStatement[4932-5161]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5379-5386]:Modifier[5379-5386]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5387-5394]:PrimitiveType[5387-5394]"
    }, {
      "left" : "isInlinableObject",
      "right" : "isInlinableObject",
      "info" : "SimpleName[5395-5412]:SimpleName[5395-5412]"
    }, {
      "left" : "List<Reference> refs",
      "right" : "List<Reference> refs",
      "info" : "SingleVariableDeclaration[5413-5433]:SingleVariableDeclaration[5413-5433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5435-7984]:Block[5435-7984]"
    }, {
      "left" : "boolean ret = false;",
      "right" : "boolean ret = false;",
      "info" : "VariableDeclarationStatement[5443-5463]:VariableDeclarationStatement[5443-5463]"
    }, {
      "left" : "for (Reference ref : refs)",
      "right" : "for (Reference ref : refs)",
      "info" : "EnhancedForStatement[5470-7960]:EnhancedForStatement[5470-7960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5497-7960]:Block[5497-7960]"
    }, {
      "left" : "Node name = ref.getNode();",
      "right" : "Node name = ref.getNode();",
      "info" : "VariableDeclarationStatement[5507-5533]:VariableDeclarationStatement[5507-5533]"
    }, {
      "left" : "Node parent = ref.getParent();",
      "right" : "Node parent = ref.getParent();",
      "info" : "VariableDeclarationStatement[5542-5572]:VariableDeclarationStatement[5542-5572]"
    }, {
      "left" : "Node gramps = ref.getGrandparent();",
      "right" : "Node gramps = ref.getGrandparent();",
      "info" : "VariableDeclarationStatement[5581-5616]:VariableDeclarationStatement[5581-5616]"
    }, {
      "left" : "if (parent.getType() == Token.GETPROP)",
      "right" : "if (parent.getType() == Token.GETPROP)",
      "info" : "IfStatement[5771-6114]:IfStatement[5771-6114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5810-6114]:Block[5810-6114]"
    }, {
      "left" : "Preconditions.checkState(parent.getFirstChild() == name);",
      "right" : "Preconditions.checkState(parent.getFirstChild() == name);",
      "info" : "ExpressionStatement[5822-5879]:ExpressionStatement[5822-5879]"
    }, {
      "left" : "if (gramps.getType() == Token.CALL\n              && gramps.getFirstChild() == parent)",
      "right" : "if (gramps.getType() == Token.CALL\n              && gramps.getFirstChild() == parent)",
      "info" : "IfStatement[5959-6084]:IfStatement[5959-6084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6045-6084]:Block[6045-6084]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6059-6072]:ReturnStatement[6059-6072]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6095-6104]:ContinueStatement[6095-6104]"
    }, {
      "left" : "if (!isVarOrAssignExprLhs(name))",
      "right" : "if (!isVarOrAssignExprLhs(name))",
      "info" : "IfStatement[6197-6266]:IfStatement[6197-6266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6230-6266]:Block[6230-6266]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6243-6256]:ReturnStatement[6243-6256]"
    }, {
      "left" : "Node val = ref.getAssignedValue();",
      "right" : "Node val = ref.getAssignedValue();",
      "info" : "VariableDeclarationStatement[6276-6310]:VariableDeclarationStatement[6276-6310]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[6319-6406]:IfStatement[6319-6406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6336-6406]:Block[6336-6406]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6387-6396]:ContinueStatement[6387-6396]"
    }, {
      "left" : "if (val.getType() != Token.OBJECTLIT)",
      "right" : "if (val.getType() != Token.OBJECTLIT)",
      "info" : "IfStatement[6478-6551]:IfStatement[6478-6551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6516-6551]:Block[6516-6551]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6528-6541]:ReturnStatement[6528-6541]"
    }, {
      "left" : "for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext())",
      "right" : "for (Node child = val.getFirstChild(); child != null;\n             child = child.getNext())",
      "info" : "ForStatement[6924-7764]:ForStatement[6924-7764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7016-7764]:Block[7016-7764]"
    }, {
      "left" : "if (child.getType() == Token.GET ||\n              child.getType() == Token.SET)",
      "right" : "if (child.getType() == Token.GET ||\n              child.getType() == Token.SET)",
      "info" : "IfStatement[7028-7189]:IfStatement[7028-7189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7108-7189]:Block[7108-7189]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7164-7177]:ReturnStatement[7164-7177]"
    }, {
      "left" : "Node childVal = child.getFirstChild();",
      "right" : "Node childVal = child.getFirstChild();",
      "info" : "VariableDeclarationStatement[7200-7238]:VariableDeclarationStatement[7200-7238]"
    }, {
      "left" : "for (Reference t : refs)",
      "right" : "for (Reference t : refs)",
      "info" : "EnhancedForStatement[7413-7754]:EnhancedForStatement[7413-7754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7438-7754]:Block[7438-7754]"
    }, {
      "left" : "Node refNode = t.getParent();",
      "right" : "Node refNode = t.getParent();",
      "info" : "VariableDeclarationStatement[7452-7481]:VariableDeclarationStatement[7452-7481]"
    }, {
      "left" : "while (!NodeUtil.isStatementBlock(refNode))",
      "right" : "while (!NodeUtil.isStatementBlock(refNode))",
      "info" : "WhileStatement[7494-7742]:WhileStatement[7494-7742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7538-7742]:Block[7538-7742]"
    }, {
      "left" : "if (refNode == childVal)",
      "right" : "if (refNode == childVal)",
      "info" : "IfStatement[7554-7683]:IfStatement[7554-7683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7579-7683]:Block[7579-7683]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7654-7667]:ReturnStatement[7654-7667]"
    }, {
      "left" : "refNode = refNode.getParent();",
      "right" : "refNode = refNode.getParent();",
      "info" : "ExpressionStatement[7698-7728]:ExpressionStatement[7698-7728]"
    }, {
      "left" : "ret = true;",
      "right" : "ret = true;",
      "info" : "ExpressionStatement[7941-7952]:ExpressionStatement[7941-7952]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[7967-7978]:ReturnStatement[7967-7978]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7990-7997]:Modifier[7990-7997]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7998-8005]:PrimitiveType[7998-8005]"
    }, {
      "left" : "isVarOrAssignExprLhs",
      "right" : "isVarOrAssignExprLhs",
      "info" : "SimpleName[8006-8026]:SimpleName[8006-8026]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[8027-8033]:SingleVariableDeclaration[8027-8033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8035-8281]:Block[8035-8281]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[8043-8071]:VariableDeclarationStatement[8043-8071]"
    }, {
      "left" : "return parent.getType() == Token.VAR ||\n          (parent.getType() == Token.ASSIGN\n              && parent.getFirstChild() == n\n              && parent.getParent().getType() == Token.EXPR_RESULT);",
      "right" : "return parent.getType() == Token.VAR ||\n          (parent.getType() == Token.ASSIGN\n              && parent.getFirstChild() == n\n              && parent.getParent().getType() == Token.EXPR_RESULT);",
      "info" : "ReturnStatement[8078-8275]:ReturnStatement[8078-8275]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8455-8462]:Modifier[8455-8462]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[8463-8482]:ParameterizedType[8463-8482]"
    }, {
      "left" : "computeVarList",
      "right" : "computeVarList",
      "info" : "SimpleName[8483-8497]:SimpleName[8483-8497]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[8507-8512]:SingleVariableDeclaration[8507-8512]"
    }, {
      "left" : "ReferenceCollection referenceInfo",
      "right" : "ReferenceCollection referenceInfo",
      "info" : "SingleVariableDeclaration[8514-8547]:SingleVariableDeclaration[8514-8547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8549-9896]:Block[8549-9896]"
    }, {
      "left" : "Map<String, String> varmap = Maps.newLinkedHashMap();",
      "right" : "Map<String, String> varmap = Maps.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[8557-8610]:VariableDeclarationStatement[8557-8610]"
    }, {
      "left" : "for (Reference ref : referenceInfo.references)",
      "right" : "for (Reference ref : referenceInfo.references)",
      "info" : "EnhancedForStatement[8618-9868]:EnhancedForStatement[8618-9868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8665-9868]:Block[8665-9868]"
    }, {
      "left" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "right" : "if (ref.isLvalue() || ref.isInitializingDeclaration())",
      "info" : "IfStatement[8675-9860]:IfStatement[8675-9860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8730-9303]:Block[8730-9303]"
    }, {
      "left" : "Node val = ref.getAssignedValue();",
      "right" : "Node val = ref.getAssignedValue();",
      "info" : "VariableDeclarationStatement[8742-8776]:VariableDeclarationStatement[8742-8776]"
    }, {
      "left" : "if (val != null)",
      "right" : "if (val != null)",
      "info" : "IfStatement[8787-9293]:IfStatement[8787-9293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8804-9293]:Block[8804-9293]"
    }, {
      "left" : "Preconditions.checkState(val.getType() == Token.OBJECTLIT);",
      "right" : "Preconditions.checkState(val.getType() == Token.OBJECTLIT);",
      "info" : "ExpressionStatement[8818-8877]:ExpressionStatement[8818-8877]"
    }, {
      "left" : "for (Node child = val.getFirstChild(); child != null;\n                 child = child.getNext())",
      "right" : "for (Node child = val.getFirstChild(); child != null;\n                 child = child.getNext())",
      "info" : "ForStatement[8890-9281]:ForStatement[8890-9281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8986-9281]:Block[8986-9281]"
    }, {
      "left" : "String varname = child.getString();",
      "right" : "String varname = child.getString();",
      "info" : "VariableDeclarationStatement[9002-9037]:VariableDeclarationStatement[9002-9037]"
    }, {
      "left" : "if (varmap.containsKey(varname))",
      "right" : "if (varmap.containsKey(varname))",
      "info" : "IfStatement[9052-9128]:IfStatement[9052-9128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9085-9128]:Block[9085-9128]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[9103-9112]:ContinueStatement[9103-9112]"
    }, {
      "left" : "String var = VAR_PREFIX + varname + \"_\" +\n                safeNameIdSupplier.get();",
      "right" : "String var = VAR_PREFIX + varname + \"_\" +\n                safeNameIdSupplier.get();",
      "info" : "VariableDeclarationStatement[9144-9227]:VariableDeclarationStatement[9144-9227]"
    }, {
      "left" : "varmap.put(varname, var);",
      "right" : "varmap.put(varname, var);",
      "info" : "ExpressionStatement[9242-9267]:ExpressionStatement[9242-9267]"
    }, {
      "left" : "if (ref.getParent().getType() == Token.VAR)",
      "right" : "if (ref.getParent().getType() == Token.VAR)",
      "info" : "IfStatement[9309-9860]:IfStatement[9309-9860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9353-9413]:Block[9353-9413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9419-9860]:Block[9419-9860]"
    }, {
      "left" : "Node getprop = ref.getParent();",
      "right" : "Node getprop = ref.getParent();",
      "info" : "VariableDeclarationStatement[9431-9462]:VariableDeclarationStatement[9431-9462]"
    }, {
      "left" : "Preconditions.checkState(getprop.getType() == Token.GETPROP);",
      "right" : "Preconditions.checkState(getprop.getType() == Token.GETPROP);",
      "info" : "ExpressionStatement[9473-9534]:ExpressionStatement[9473-9534]"
    }, {
      "left" : "String varname = getprop.getLastChild().getString();",
      "right" : "String varname = getprop.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[9604-9656]:VariableDeclarationStatement[9604-9656]"
    }, {
      "left" : "if (varmap.containsKey(varname))",
      "right" : "if (varmap.containsKey(varname))",
      "info" : "IfStatement[9667-9735]:IfStatement[9667-9735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9700-9735]:Block[9700-9735]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[9714-9723]:ContinueStatement[9714-9723]"
    }, {
      "left" : "String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get();",
      "right" : "String var = VAR_PREFIX + varname + \"_\" + safeNameIdSupplier.get();",
      "info" : "VariableDeclarationStatement[9747-9814]:VariableDeclarationStatement[9747-9814]"
    }, {
      "left" : "varmap.put(varname, var);",
      "right" : "varmap.put(varname, var);",
      "info" : "ExpressionStatement[9825-9850]:ExpressionStatement[9825-9850]"
    }, {
      "left" : "return varmap;",
      "right" : "return varmap;",
      "info" : "ReturnStatement[9876-9890]:ReturnStatement[9876-9890]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10071-10078]:Modifier[10071-10078]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10079-10083]:PrimitiveType[10079-10083]"
    }, {
      "left" : "fillInitialValues",
      "right" : "fillInitialValues",
      "info" : "SimpleName[10084-10101]:SimpleName[10084-10101]"
    }, {
      "left" : "Reference init",
      "right" : "Reference init",
      "info" : "SingleVariableDeclaration[10102-10116]:SingleVariableDeclaration[10102-10116]"
    }, {
      "left" : "Map<String, Node> initvals",
      "right" : "Map<String, Node> initvals",
      "info" : "SingleVariableDeclaration[10118-10144]:SingleVariableDeclaration[10118-10144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10146-10431]:Block[10146-10431]"
    }, {
      "left" : "Node object = init.getAssignedValue();",
      "right" : "Node object = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[10154-10192]:VariableDeclarationStatement[10154-10192]"
    }, {
      "left" : "Preconditions.checkState(object.getType() == Token.OBJECTLIT);",
      "right" : "Preconditions.checkState(object.getType() == Token.OBJECTLIT);",
      "info" : "ExpressionStatement[10199-10261]:ExpressionStatement[10199-10261]"
    }, {
      "left" : "for (Node key = object.getFirstChild(); key != null;\n           key = key.getNext())",
      "right" : "for (Node key = object.getFirstChild(); key != null;\n           key = key.getNext())",
      "info" : "ForStatement[10268-10425]:ForStatement[10268-10425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10353-10425]:Block[10353-10425]"
    }, {
      "left" : "initvals.put(key.getString(), key.removeFirstChild());",
      "right" : "initvals.put(key.getString(), key.removeFirstChild());",
      "info" : "ExpressionStatement[10363-10417]:ExpressionStatement[10363-10417]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10638-10645]:Modifier[10638-10645]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10646-10650]:PrimitiveType[10646-10650]"
    }, {
      "left" : "replaceAssignmentExpression",
      "right" : "replaceAssignmentExpression",
      "info" : "SimpleName[10651-10678]:SimpleName[10651-10678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10774-12884]:Block[10774-12980]"
    }, {
      "left" : "List<Node> nodes = Lists.newArrayList();",
      "right" : "List<Node> nodes = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[10832-10872]:VariableDeclarationStatement[10832-10872]"
    }, {
      "left" : "Node val = ref.getAssignedValue();",
      "right" : "Node val = ref.getAssignedValue();",
      "info" : "VariableDeclarationStatement[10879-10913]:VariableDeclarationStatement[10879-10913]"
    }, {
      "left" : "blacklistVarReferencesInTree(val, v.scope);",
      "right" : "blacklistVarReferencesInTree(val, v.scope);",
      "info" : "ExpressionStatement[10920-10963]:ExpressionStatement[10920-10963]"
    }, {
      "left" : "Preconditions.checkState(val.getType() == Token.OBJECTLIT);",
      "right" : "Preconditions.checkState(val.getType() == Token.OBJECTLIT);",
      "info" : "ExpressionStatement[10970-11029]:ExpressionStatement[10970-11029]"
    }, {
      "left" : "Set<String> all = Sets.newLinkedHashSet(varmap.keySet());",
      "right" : "Set<String> all = Sets.newLinkedHashSet(varmap.keySet());",
      "info" : "VariableDeclarationStatement[11036-11093]:VariableDeclarationStatement[11036-11093]"
    }, {
      "left" : "for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext())",
      "right" : "for (Node key = val.getFirstChild(); key != null;\n           key = key.getNext())",
      "info" : "ForStatement[11100-11470]:ForStatement[11100-11470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11182-11470]:Block[11182-11470]"
    }, {
      "left" : "String var = key.getString();",
      "right" : "String var = key.getString();",
      "info" : "VariableDeclarationStatement[11192-11221]:VariableDeclarationStatement[11192-11221]"
    }, {
      "left" : "Node value = key.removeFirstChild();",
      "right" : "Node value = key.removeFirstChild();",
      "info" : "VariableDeclarationStatement[11230-11266]:VariableDeclarationStatement[11230-11266]"
    }, {
      "left" : "nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));",
      "right" : "nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)), value));",
      "info" : "ExpressionStatement[11321-11437]:ExpressionStatement[11321-11437]"
    }, {
      "left" : "all.remove(var);",
      "right" : "all.remove(var);",
      "info" : "ExpressionStatement[11446-11462]:ExpressionStatement[11446-11462]"
    }, {
      "left" : "for (String var : all)",
      "right" : "for (String var : all)",
      "info" : "EnhancedForStatement[11526-11728]:EnhancedForStatement[11526-11728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11549-11728]:Block[11549-11728]"
    }, {
      "left" : "nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));",
      "right" : "nodes.add(\n          new Node(Token.ASSIGN,\n                   Node.newString(Token.NAME, varmap.get(var)),\n                   NodeUtil.newUndefinedNode(null)));",
      "info" : "ExpressionStatement[11559-11720]:ExpressionStatement[11559-11720]"
    }, {
      "left" : "Node replacement;",
      "right" : "Node replacement;",
      "info" : "VariableDeclarationStatement[11736-11753]:VariableDeclarationStatement[11736-11753]"
    }, {
      "left" : "nodes.add(new Node(Token.TRUE));",
      "right" : "nodes.add(new Node(Token.TRUE));",
      "info" : "ExpressionStatement[11893-11925]:ExpressionStatement[11981-12013]"
    }, {
      "left" : "nodes = Lists.reverse(nodes);",
      "right" : "nodes = Lists.reverse(nodes);",
      "info" : "ExpressionStatement[12147-12176]:ExpressionStatement[12235-12264]"
    }, {
      "left" : "replacement = new Node(Token.COMMA);",
      "right" : "replacement = new Node(Token.COMMA);",
      "info" : "ExpressionStatement[12185-12221]:ExpressionStatement[12273-12309]"
    }, {
      "left" : "Node cur = replacement;",
      "right" : "Node cur = replacement;",
      "info" : "VariableDeclarationStatement[12230-12253]:VariableDeclarationStatement[12318-12341]"
    }, {
      "left" : "int i;",
      "right" : "int i;",
      "info" : "VariableDeclarationStatement[12262-12268]:VariableDeclarationStatement[12350-12356]"
    }, {
      "left" : "for (i = 0; i < nodes.size() - 2; i++)",
      "right" : "for (i = 0; i < nodes.size() - 2; i++)",
      "info" : "ForStatement[12277-12467]:ForStatement[12365-12555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12316-12467]:Block[11840-12653]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i));",
      "right" : "cur.addChildToFront(nodes.get(i));",
      "info" : "ExpressionStatement[12328-12362]:ExpressionStatement[12564-12598]"
    }, {
      "left" : "Node t = new Node(Token.COMMA);",
      "right" : "Node t = new Node(Token.COMMA);",
      "info" : "VariableDeclarationStatement[12373-12404]:VariableDeclarationStatement[12461-12492]"
    }, {
      "left" : "cur.addChildToFront(t);",
      "right" : "cur.addChildToFront(t);",
      "info" : "ExpressionStatement[12415-12438]:ExpressionStatement[12503-12526]"
    }, {
      "left" : "cur = t;",
      "right" : "cur = t;",
      "info" : "ExpressionStatement[12449-12457]:ExpressionStatement[12537-12545]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i));",
      "right" : "cur.addChildToFront(nodes.get(i));",
      "info" : "ExpressionStatement[12476-12510]:ExpressionStatement[12416-12450]"
    }, {
      "left" : "cur.addChildToFront(nodes.get(i + 1));",
      "right" : "cur.addChildToFront(nodes.get(i + 1));",
      "info" : "ExpressionStatement[12519-12557]:ExpressionStatement[12607-12645]"
    }, {
      "left" : "Node replace = ref.getParent();",
      "right" : "Node replace = ref.getParent();",
      "info" : "VariableDeclarationStatement[12565-12596]:VariableDeclarationStatement[12661-12692]"
    }, {
      "left" : "replacement.copyInformationFromForTree(replace);",
      "right" : "replacement.copyInformationFromForTree(replace);",
      "info" : "ExpressionStatement[12603-12651]:ExpressionStatement[12699-12747]"
    }, {
      "left" : "if (replace.getType() == Token.VAR)",
      "right" : "if (replace.getType() == Token.VAR)",
      "info" : "IfStatement[12659-12878]:IfStatement[12755-12974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12695-12799]:Block[12791-12895]"
    }, {
      "left" : "replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));",
      "right" : "replace.getParent().replaceChild(\n            replace, NodeUtil.newExpr(replacement));",
      "info" : "ExpressionStatement[12705-12791]:ExpressionStatement[12801-12887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12805-12878]:Block[12901-12974]"
    }, {
      "left" : "replace.getParent().replaceChild(replace, replacement);",
      "right" : "replace.getParent().replaceChild(replace, replacement);",
      "info" : "ExpressionStatement[12815-12870]:ExpressionStatement[12911-12966]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12998-13005]:Modifier[13094-13101]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13006-13010]:PrimitiveType[13102-13106]"
    }, {
      "left" : "splitObject",
      "right" : "splitObject",
      "info" : "SimpleName[13011-13022]:SimpleName[13107-13118]"
    }, {
      "left" : "Var v",
      "right" : "Var v",
      "info" : "SingleVariableDeclaration[13023-13028]:SingleVariableDeclaration[13119-13124]"
    }, {
      "left" : "Reference declaration",
      "right" : "Reference declaration",
      "info" : "SingleVariableDeclaration[13030-13051]:SingleVariableDeclaration[13126-13147]"
    }, {
      "left" : "Reference init",
      "right" : "Reference init",
      "info" : "SingleVariableDeclaration[13082-13096]:SingleVariableDeclaration[13178-13192]"
    }, {
      "left" : "ReferenceCollection referenceInfo",
      "right" : "ReferenceCollection referenceInfo",
      "info" : "SingleVariableDeclaration[13127-13160]:SingleVariableDeclaration[13223-13256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13162-15986]:Block[13258-16082]"
    }, {
      "left" : "Map<String, String> varmap = computeVarList(v, referenceInfo);",
      "right" : "Map<String, String> varmap = computeVarList(v, referenceInfo);",
      "info" : "VariableDeclarationStatement[13287-13349]:VariableDeclarationStatement[13383-13445]"
    }, {
      "left" : "Map<String, Node> initvals = Maps.newHashMap();",
      "right" : "Map<String, Node> initvals = Maps.newHashMap();",
      "info" : "VariableDeclarationStatement[13357-13404]:VariableDeclarationStatement[13453-13500]"
    }, {
      "left" : "Node vnode;",
      "right" : "Node vnode;",
      "info" : "VariableDeclarationStatement[13603-13614]:VariableDeclarationStatement[13699-13710]"
    }, {
      "left" : "boolean defined = referenceInfo.isWellDefined() &&\n          init.getParent().getType() == Token.VAR;",
      "right" : "boolean defined = referenceInfo.isWellDefined() &&\n          init.getParent().getType() == Token.VAR;",
      "info" : "VariableDeclarationStatement[13621-13722]:VariableDeclarationStatement[13717-13818]"
    }, {
      "left" : "if (defined)",
      "right" : "if (defined)",
      "info" : "IfStatement[13729-14028]:IfStatement[13825-14124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13742-13828]:Block[13838-13924]"
    }, {
      "left" : "vnode = init.getParent();",
      "right" : "vnode = init.getParent();",
      "info" : "ExpressionStatement[13752-13777]:ExpressionStatement[13848-13873]"
    }, {
      "left" : "fillInitialValues(init, initvals);",
      "right" : "fillInitialValues(init, initvals);",
      "info" : "ExpressionStatement[13786-13820]:ExpressionStatement[13882-13916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13834-14028]:Block[13930-14124]"
    }, {
      "left" : "vnode = v.getScope().getRootNode().getLastChild().getFirstChild();",
      "right" : "vnode = v.getScope().getRootNode().getLastChild().getFirstChild();",
      "info" : "ExpressionStatement[13954-14020]:ExpressionStatement[14050-14116]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : varmap.entrySet())",
      "right" : "for (Map.Entry<String, String> entry : varmap.entrySet())",
      "info" : "EnhancedForStatement[14036-14466]:EnhancedForStatement[14132-14562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14094-14466]:Block[14190-14562]"
    }, {
      "left" : "Node val = initvals.get(entry.getKey());",
      "right" : "Node val = initvals.get(entry.getKey());",
      "info" : "VariableDeclarationStatement[14104-14144]:VariableDeclarationStatement[14200-14240]"
    }, {
      "left" : "Node varnode = NodeUtil.newVarNode(entry.getValue(), val);",
      "right" : "Node varnode = NodeUtil.newVarNode(entry.getValue(), val);",
      "info" : "VariableDeclarationStatement[14153-14211]:VariableDeclarationStatement[14249-14307]"
    }, {
      "left" : "if (val == null)",
      "right" : "if (val == null)",
      "info" : "IfStatement[14220-14400]:IfStatement[14316-14496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14237-14329]:Block[14333-14425]"
    }, {
      "left" : "varnode.copyInformationFromForTree(vnode);",
      "right" : "varnode.copyInformationFromForTree(vnode);",
      "info" : "ExpressionStatement[14277-14319]:ExpressionStatement[14373-14415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14335-14400]:Block[14431-14496]"
    }, {
      "left" : "blacklistVarReferencesInTree(val, v.scope);",
      "right" : "blacklistVarReferencesInTree(val, v.scope);",
      "info" : "ExpressionStatement[14347-14390]:ExpressionStatement[14443-14486]"
    }, {
      "left" : "vnode.getParent().addChildBefore(varnode, vnode);",
      "right" : "vnode.getParent().addChildBefore(varnode, vnode);",
      "info" : "ExpressionStatement[14409-14458]:ExpressionStatement[14505-14554]"
    }, {
      "left" : "if (defined)",
      "right" : "if (defined)",
      "info" : "IfStatement[14474-14542]:IfStatement[14570-14638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14487-14542]:Block[14583-14638]"
    }, {
      "left" : "vnode.getParent().removeChild(vnode);",
      "right" : "vnode.getParent().removeChild(vnode);",
      "info" : "ExpressionStatement[14497-14534]:ExpressionStatement[14593-14630]"
    }, {
      "left" : "for (Reference ref : referenceInfo.references)",
      "right" : "for (Reference ref : referenceInfo.references)",
      "info" : "EnhancedForStatement[14550-15944]:EnhancedForStatement[14646-16040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14597-15944]:Block[14693-16040]"
    }, {
      "left" : "if (defined && ref == init)",
      "right" : "if (defined && ref == init)",
      "info" : "IfStatement[14661-14698]:IfStatement[14757-14794]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[14689-14698]:ContinueStatement[14785-14794]"
    }, {
      "left" : "if (ref.isLvalue())",
      "right" : "if (ref.isLvalue())",
      "info" : "IfStatement[14708-15936]:IfStatement[14804-16032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14728-14911]:Block[14824-15007]"
    }, {
      "left" : "replaceAssignmentExpression(v, ref, varmap);",
      "right" : "replaceAssignmentExpression(v, ref, varmap);",
      "info" : "ExpressionStatement[14857-14901]:ExpressionStatement[14953-14997]"
    }, {
      "left" : "if (ref.getParent().getType() == Token.VAR)",
      "right" : "if (ref.getParent().getType() == Token.VAR)",
      "info" : "IfStatement[14917-15936]:IfStatement[15013-16032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14961-15160]:Block[15057-15256]"
    }, {
      "left" : "ref.getGrandparent().removeChild(ref.getParent());",
      "right" : "ref.getGrandparent().removeChild(ref.getParent());",
      "info" : "ExpressionStatement[15100-15150]:ExpressionStatement[15196-15246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15166-15936]:Block[15262-16032]"
    }, {
      "left" : "Node getprop = ref.getParent();",
      "right" : "Node getprop = ref.getParent();",
      "info" : "VariableDeclarationStatement[15256-15287]:VariableDeclarationStatement[15352-15383]"
    }, {
      "left" : "Preconditions.checkState(getprop.getType() == Token.GETPROP);",
      "right" : "Preconditions.checkState(getprop.getType() == Token.GETPROP);",
      "info" : "ExpressionStatement[15298-15359]:ExpressionStatement[15394-15455]"
    }, {
      "left" : "String var = getprop.getChildAtIndex(1).getString();",
      "right" : "String var = getprop.getChildAtIndex(1).getString();",
      "info" : "VariableDeclarationStatement[15429-15481]:VariableDeclarationStatement[15525-15577]"
    }, {
      "left" : "Preconditions.checkState(varmap.containsKey(var));",
      "right" : "Preconditions.checkState(varmap.containsKey(var));",
      "info" : "ExpressionStatement[15623-15673]:ExpressionStatement[15719-15769]"
    }, {
      "left" : "Node replacement = Node.newString(Token.NAME, varmap.get(var));",
      "right" : "Node replacement = Node.newString(Token.NAME, varmap.get(var));",
      "info" : "VariableDeclarationStatement[15736-15799]:VariableDeclarationStatement[15832-15895]"
    }, {
      "left" : "replacement.copyInformationFrom(getprop);",
      "right" : "replacement.copyInformationFrom(getprop);",
      "info" : "ExpressionStatement[15810-15851]:ExpressionStatement[15906-15947]"
    }, {
      "left" : "ref.getGrandparent().replaceChild(ref.getParent(), replacement);",
      "right" : "ref.getGrandparent().replaceChild(ref.getParent(), replacement);",
      "info" : "ExpressionStatement[15862-15926]:ExpressionStatement[15958-16022]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[15952-15980]:ExpressionStatement[16048-16076]"
    } ]
  },
  "interFileMappings" : { }
}