{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ParseSettings defaultSettings()",
      "right" : "ParseSettings defaultSettings()",
      "info" : "MethodDeclaration[456-538]:MethodDeclaration[456-538]"
    }, {
      "left" : "Document parse(String input, String baseUri)",
      "right" : "Document parse(String input, String baseUri)",
      "info" : "MethodDeclaration[544-691]:MethodDeclaration[544-691]"
    }, {
      "left" : "protected void initialiseParse(String input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "protected void initialiseParse(String input, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[697-1070]:MethodDeclaration[697-1070]"
    }, {
      "left" : "protected boolean process(Token token)",
      "right" : "protected boolean process(Token token)",
      "info" : "MethodDeclaration[1076-1919]:MethodDeclaration[1076-1919]"
    }, {
      "left" : "private void insertNode(Node node)",
      "right" : "private void insertNode(Node node)",
      "info" : "MethodDeclaration[1925-2011]:MethodDeclaration[1925-2011]"
    }, {
      "left" : "Element insert(Token.StartTag startTag)",
      "right" : "Element insert(Token.StartTag startTag)",
      "info" : "MethodDeclaration[2017-2653]:MethodDeclaration[2017-2653]"
    }, {
      "left" : "void insert(Token.Comment commentToken)",
      "right" : "void insert(Token.Comment commentToken)",
      "info" : "MethodDeclaration[2659-3565]:MethodDeclaration[2659-3565]"
    }, {
      "left" : "void insert(Token.Character characterToken)",
      "right" : "void insert(Token.Character characterToken)",
      "info" : "MethodDeclaration[3571-3717]:MethodDeclaration[3571-3717]"
    }, {
      "left" : "private void popStackToClose(Token.EndTag endTag)",
      "right" : "private void popStackToClose(Token.EndTag endTag)",
      "info" : "MethodDeclaration[3946-4769]:MethodDeclaration[3964-4787]"
    }, {
      "left" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "right" : "List<Node> parseFragment(String inputFragment, String baseUri, ParseErrorList errors, ParseSettings settings)",
      "info" : "MethodDeclaration[4775-5013]:MethodDeclaration[4793-5031]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[488-538]:Block[488-538]"
    }, {
      "left" : "return ParseSettings.preserveCase;",
      "right" : "return ParseSettings.preserveCase;",
      "info" : "ReturnStatement[498-532]:ReturnStatement[498-532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[589-691]:Block[589-691]"
    }, {
      "left" : "return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "right" : "return parse(input, baseUri, ParseErrorList.noTracking(), ParseSettings.preserveCase);",
      "info" : "ReturnStatement[599-685]:ReturnStatement[599-685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[819-1070]:Block[819-1070]"
    }, {
      "left" : "super.initialiseParse(input, baseUri, errors, settings);",
      "right" : "super.initialiseParse(input, baseUri, errors, settings);",
      "info" : "ExpressionStatement[829-885]:ExpressionStatement[829-885]"
    }, {
      "left" : "stack.add(doc);",
      "right" : "stack.add(doc);",
      "info" : "ExpressionStatement[894-909]:ExpressionStatement[894-909]"
    }, {
      "left" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "right" : "doc.outputSettings().syntax(Document.OutputSettings.Syntax.xml);",
      "info" : "ExpressionStatement[1000-1064]:ExpressionStatement[1000-1064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1129-1919]:Block[1129-1919]"
    }, {
      "left" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "right" : "switch (token.type) {\n            case StartTag:\n                insert(token.asStartTag());\n                break;\n            case EndTag:\n                popStackToClose(token.asEndTag());\n                break;\n            case Comment:\n                insert(token.asComment());\n                break;\n            case Character:\n                insert(token.asCharacter());\n                break;\n            case Doctype:\n                insert(token.asDoctype());\n                break;\n            case EOF: // could put some normalisation here if desired\n                break;\n            default:\n                Validate.fail(\"Unexpected token type: \" + token.type);\n        }",
      "info" : "SwitchStatement[1203-1892]:SwitchStatement[1203-1892]"
    }, {
      "left" : "case StartTag:",
      "right" : "case StartTag:",
      "info" : "SwitchCase[1237-1251]:SwitchCase[1237-1251]"
    }, {
      "left" : "insert(token.asStartTag());",
      "right" : "insert(token.asStartTag());",
      "info" : "ExpressionStatement[1268-1295]:ExpressionStatement[1268-1295]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1312-1318]:BreakStatement[1312-1318]"
    }, {
      "left" : "case EndTag:",
      "right" : "case EndTag:",
      "info" : "SwitchCase[1331-1343]:SwitchCase[1331-1343]"
    }, {
      "left" : "popStackToClose(token.asEndTag());",
      "right" : "popStackToClose(token.asEndTag());",
      "info" : "ExpressionStatement[1360-1394]:ExpressionStatement[1360-1394]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1411-1417]:BreakStatement[1411-1417]"
    }, {
      "left" : "case Comment:",
      "right" : "case Comment:",
      "info" : "SwitchCase[1430-1443]:SwitchCase[1430-1443]"
    }, {
      "left" : "insert(token.asComment());",
      "right" : "insert(token.asComment());",
      "info" : "ExpressionStatement[1460-1486]:ExpressionStatement[1460-1486]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1503-1509]:BreakStatement[1503-1509]"
    }, {
      "left" : "case Character:",
      "right" : "case Character:",
      "info" : "SwitchCase[1522-1537]:SwitchCase[1522-1537]"
    }, {
      "left" : "insert(token.asCharacter());",
      "right" : "insert(token.asCharacter());",
      "info" : "ExpressionStatement[1554-1582]:ExpressionStatement[1554-1582]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1599-1605]:BreakStatement[1599-1605]"
    }, {
      "left" : "case Doctype:",
      "right" : "case Doctype:",
      "info" : "SwitchCase[1618-1631]:SwitchCase[1618-1631]"
    }, {
      "left" : "insert(token.asDoctype());",
      "right" : "insert(token.asDoctype());",
      "info" : "ExpressionStatement[1648-1674]:ExpressionStatement[1648-1674]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1691-1697]:BreakStatement[1691-1697]"
    }, {
      "left" : "case EOF:",
      "right" : "case EOF:",
      "info" : "SwitchCase[1710-1719]:SwitchCase[1710-1719]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1784-1790]:BreakStatement[1784-1790]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[1803-1811]:SwitchCase[1803-1811]"
    }, {
      "left" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "right" : "Validate.fail(\"Unexpected token type: \" + token.type);",
      "info" : "ExpressionStatement[1828-1882]:ExpressionStatement[1828-1882]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[1901-1913]:ReturnStatement[1901-1913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1960-2011]:Block[1960-2011]"
    }, {
      "left" : "currentElement().appendChild(node);",
      "right" : "currentElement().appendChild(node);",
      "info" : "ExpressionStatement[1970-2005]:ExpressionStatement[1970-2005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2057-2653]:Block[2057-2653]"
    }, {
      "left" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "right" : "Tag tag = Tag.valueOf(startTag.name(), settings);",
      "info" : "VariableDeclarationStatement[2067-2116]:VariableDeclarationStatement[2067-2116]"
    }, {
      "left" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
      "right" : "Element el = new Element(tag, baseUri, settings.normalizeAttributes(startTag.attributes));",
      "info" : "VariableDeclarationStatement[2226-2316]:VariableDeclarationStatement[2226-2316]"
    }, {
      "left" : "insertNode(el);",
      "right" : "insertNode(el);",
      "info" : "ExpressionStatement[2325-2340]:ExpressionStatement[2325-2340]"
    }, {
      "left" : "if (startTag.isSelfClosing())",
      "right" : "if (startTag.isSelfClosing())",
      "info" : "IfStatement[2349-2628]:IfStatement[2349-2628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2379-2584]:Block[2379-2584]"
    }, {
      "left" : "tokeniser.acknowledgeSelfClosingFlag();",
      "right" : "tokeniser.acknowledgeSelfClosingFlag();",
      "info" : "ExpressionStatement[2393-2432]:ExpressionStatement[2393-2432]"
    }, {
      "left" : "if (!tag.isKnownTag())",
      "right" : "if (!tag.isKnownTag())",
      "info" : "IfStatement[2445-2574]:IfStatement[2445-2574]"
    }, {
      "left" : "tag.setSelfClosing();",
      "right" : "tag.setSelfClosing();",
      "info" : "ExpressionStatement[2553-2574]:ExpressionStatement[2553-2574]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2590-2628]:Block[2590-2628]"
    }, {
      "left" : "stack.add(el);",
      "right" : "stack.add(el);",
      "info" : "ExpressionStatement[2604-2618]:ExpressionStatement[2604-2618]"
    }, {
      "left" : "return el;",
      "right" : "return el;",
      "info" : "ReturnStatement[2637-2647]:ReturnStatement[2637-2647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2699-3565]:Block[2699-3565]"
    }, {
      "left" : "Comment comment = new Comment(commentToken.getData(), baseUri);",
      "right" : "Comment comment = new Comment(commentToken.getData(), baseUri);",
      "info" : "VariableDeclarationStatement[2709-2772]:VariableDeclarationStatement[2709-2772]"
    }, {
      "left" : "Node insert = comment;",
      "right" : "Node insert = comment;",
      "info" : "VariableDeclarationStatement[2781-2803]:VariableDeclarationStatement[2781-2803]"
    }, {
      "left" : "if (commentToken.bogus)",
      "right" : "if (commentToken.bogus)",
      "info" : "IfStatement[2812-3531]:IfStatement[2812-3531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2836-3531]:Block[2836-3531]"
    }, {
      "left" : "String data = comment.getData();",
      "right" : "String data = comment.getData();",
      "info" : "VariableDeclarationStatement[3039-3071]:VariableDeclarationStatement[3039-3071]"
    }, {
      "left" : "if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")))",
      "right" : "if (data.length() > 1 && (data.startsWith(\"!\") || data.startsWith(\"?\")))",
      "info" : "IfStatement[3084-3521]:IfStatement[3084-3521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3157-3521]:Block[3157-3521]"
    }, {
      "left" : "Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());",
      "right" : "Document doc = Jsoup.parse(\"<\" + data.substring(1, data.length() -1) + \">\", baseUri, Parser.xmlParser());",
      "info" : "VariableDeclarationStatement[3175-3280]:VariableDeclarationStatement[3175-3280]"
    }, {
      "left" : "Element el = doc.child(0);",
      "right" : "Element el = doc.child(0);",
      "info" : "VariableDeclarationStatement[3297-3323]:VariableDeclarationStatement[3297-3323]"
    }, {
      "left" : "insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), comment.baseUri(), data.startsWith(\"!\"));",
      "right" : "insert = new XmlDeclaration(settings.normalizeTag(el.tagName()), comment.baseUri(), data.startsWith(\"!\"));",
      "info" : "ExpressionStatement[3340-3446]:ExpressionStatement[3340-3446]"
    }, {
      "left" : "insert.attributes().addAll(el.attributes());",
      "right" : "insert.attributes().addAll(el.attributes());",
      "info" : "ExpressionStatement[3463-3507]:ExpressionStatement[3463-3507]"
    }, {
      "left" : "insertNode(insert);",
      "right" : "insertNode(insert);",
      "info" : "ExpressionStatement[3540-3559]:ExpressionStatement[3540-3559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3615-3717]:Block[3615-3717]"
    }, {
      "left" : "Node node = new TextNode(characterToken.getData(), baseUri);",
      "right" : "Node node = new TextNode(characterToken.getData(), baseUri);",
      "info" : "VariableDeclarationStatement[3625-3685]:VariableDeclarationStatement[3625-3685]"
    }, {
      "left" : "insertNode(node);",
      "right" : "insertNode(node);",
      "info" : "ExpressionStatement[3694-3711]:ExpressionStatement[3694-3711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4179-4769]:Block[4197-4787]"
    }, {
      "left" : "String elName = endTag.name();",
      "right" : "String elName = endTag.name();",
      "info" : "VariableDeclarationStatement[4189-4219]:VariableDeclarationStatement[4207-4237]"
    }, {
      "left" : "Element firstFound = null;",
      "right" : "Element firstFound = null;",
      "info" : "VariableDeclarationStatement[4228-4254]:VariableDeclarationStatement[4246-4272]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[4264-4489]:ForStatement[4282-4507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4313-4489]:Block[4331-4507]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[4327-4357]:VariableDeclarationStatement[4345-4375]"
    }, {
      "left" : "if (next.nodeName().equals(elName))",
      "right" : "if (next.nodeName().equals(elName))",
      "info" : "IfStatement[4370-4479]:IfStatement[4388-4497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4406-4479]:Block[4424-4497]"
    }, {
      "left" : "firstFound = next;",
      "right" : "firstFound = next;",
      "info" : "ExpressionStatement[4424-4442]:ExpressionStatement[4442-4460]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4459-4465]:BreakStatement[4477-4483]"
    }, {
      "left" : "if (firstFound == null)",
      "right" : "if (firstFound == null)",
      "info" : "IfStatement[4498-4541]:IfStatement[4516-4559]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[4534-4541]:ReturnStatement[4552-4559]"
    }, {
      "left" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "right" : "for (int pos = stack.size() -1; pos >= 0; pos--)",
      "info" : "ForStatement[4570-4763]:ForStatement[4588-4781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4619-4763]:Block[4637-4781]"
    }, {
      "left" : "Element next = stack.get(pos);",
      "right" : "Element next = stack.get(pos);",
      "info" : "VariableDeclarationStatement[4633-4663]:VariableDeclarationStatement[4651-4681]"
    }, {
      "left" : "stack.remove(pos);",
      "right" : "stack.remove(pos);",
      "info" : "ExpressionStatement[4676-4694]:ExpressionStatement[4694-4712]"
    }, {
      "left" : "if (next == firstFound)",
      "right" : "if (next == firstFound)",
      "info" : "IfStatement[4707-4753]:IfStatement[4725-4771]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4747-4753]:BreakStatement[4765-4771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4885-5013]:Block[4903-5031]"
    }, {
      "left" : "initialiseParse(inputFragment, baseUri, errors, settings);",
      "right" : "initialiseParse(inputFragment, baseUri, errors, settings);",
      "info" : "ExpressionStatement[4895-4953]:ExpressionStatement[4913-4971]"
    }, {
      "left" : "runParser();",
      "right" : "runParser();",
      "info" : "ExpressionStatement[4962-4974]:ExpressionStatement[4980-4992]"
    }, {
      "left" : "return doc.childNodes();",
      "right" : "return doc.childNodes();",
      "info" : "ReturnStatement[4983-5007]:ReturnStatement[5001-5025]"
    } ]
  },
  "interFileMappings" : { }
}