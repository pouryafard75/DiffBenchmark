{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";",
      "right" : "protected final static String DATE_FORMAT_STR_ISO8601 = \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\";",
      "info" : "FieldDeclaration[964-1229]:FieldDeclaration[964-1229]"
    }, {
      "left" : "protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";",
      "right" : "protected final static String DATE_FORMAT_STR_ISO8601_Z = \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\";",
      "info" : "FieldDeclaration[1235-1429]:FieldDeclaration[1235-1429]"
    }, {
      "left" : "protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\";",
      "right" : "protected final static String DATE_FORMAT_STR_PLAIN = \"yyyy-MM-dd\";",
      "info" : "FieldDeclaration[1435-1567]:FieldDeclaration[1435-1567]"
    }, {
      "left" : "protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";",
      "right" : "protected final static String DATE_FORMAT_STR_RFC1123 = \"EEE, dd MMM yyyy HH:mm:ss zzz\";",
      "info" : "FieldDeclaration[1573-1762]:FieldDeclaration[1573-1762]"
    }, {
      "left" : "protected final static String[] ALL_FORMATS = new String[] {\n        DATE_FORMAT_STR_ISO8601,\n        DATE_FORMAT_STR_ISO8601_Z,\n        DATE_FORMAT_STR_RFC1123,\n        DATE_FORMAT_STR_PLAIN\n    };",
      "right" : "protected final static String[] ALL_FORMATS = new String[] {\n        DATE_FORMAT_STR_ISO8601,\n        DATE_FORMAT_STR_ISO8601_Z,\n        DATE_FORMAT_STR_RFC1123,\n        DATE_FORMAT_STR_PLAIN\n    };",
      "info" : "FieldDeclaration[1768-2047]:FieldDeclaration[1768-2047]"
    }, {
      "left" : "private final static TimeZone DEFAULT_TIMEZONE;",
      "right" : "private final static TimeZone DEFAULT_TIMEZONE;",
      "info" : "FieldDeclaration[2053-2227]:FieldDeclaration[2053-2227]"
    }, {
      "left" : "private final static Locale DEFAULT_LOCALE = Locale.US;",
      "right" : "private final static Locale DEFAULT_LOCALE = Locale.US;",
      "info" : "FieldDeclaration[2321-2376]:FieldDeclaration[2321-2376]"
    }, {
      "left" : "protected final static DateFormat DATE_FORMAT_RFC1123;",
      "right" : "protected final static DateFormat DATE_FORMAT_RFC1123;",
      "info" : "FieldDeclaration[2386-2440]:FieldDeclaration[2386-2440]"
    }, {
      "left" : "protected final static DateFormat DATE_FORMAT_ISO8601;",
      "right" : "protected final static DateFormat DATE_FORMAT_ISO8601;",
      "info" : "FieldDeclaration[2446-2500]:FieldDeclaration[2446-2500]"
    }, {
      "left" : "protected final static DateFormat DATE_FORMAT_ISO8601_Z;",
      "right" : "protected final static DateFormat DATE_FORMAT_ISO8601_Z;",
      "info" : "FieldDeclaration[2505-2561]:FieldDeclaration[2505-2561]"
    }, {
      "left" : "protected final static DateFormat DATE_FORMAT_PLAIN;",
      "right" : "protected final static DateFormat DATE_FORMAT_PLAIN;",
      "info" : "FieldDeclaration[2567-2619]:FieldDeclaration[2567-2619]"
    }, {
      "left" : "public final static StdDateFormat instance = new StdDateFormat();",
      "right" : "public final static StdDateFormat instance = new StdDateFormat();",
      "info" : "FieldDeclaration[3601-3769]:FieldDeclaration[3601-3769]"
    }, {
      "left" : "protected transient TimeZone _timezone;",
      "right" : "protected transient TimeZone _timezone;",
      "info" : "FieldDeclaration[3779-3945]:FieldDeclaration[3779-3945]"
    }, {
      "left" : "protected final Locale _locale;",
      "right" : "protected final Locale _locale;",
      "info" : "FieldDeclaration[3951-3982]:FieldDeclaration[3951-3982]"
    }, {
      "left" : "protected Boolean _lenient;",
      "right" : "protected Boolean _lenient;",
      "info" : "FieldDeclaration[3988-4205]:FieldDeclaration[3988-4205]"
    }, {
      "left" : "protected transient DateFormat _formatRFC1123;",
      "right" : "protected transient DateFormat _formatRFC1123;",
      "info" : "FieldDeclaration[4215-4261]:FieldDeclaration[4215-4261]"
    }, {
      "left" : "protected transient DateFormat _formatISO8601;",
      "right" : "protected transient DateFormat _formatISO8601;",
      "info" : "FieldDeclaration[4266-4312]:FieldDeclaration[4266-4312]"
    }, {
      "left" : "protected transient DateFormat _formatISO8601_z;",
      "right" : "protected transient DateFormat _formatISO8601_z;",
      "info" : "FieldDeclaration[4317-4365]:FieldDeclaration[4317-4365]"
    }, {
      "left" : "protected transient DateFormat _formatPlain;",
      "right" : "protected transient DateFormat _formatPlain;",
      "info" : "FieldDeclaration[4370-4414]:FieldDeclaration[4370-4414]"
    }, {
      "left" : "public StdDateFormat()",
      "right" : "public StdDateFormat()",
      "info" : "MethodDeclaration[4622-4686]:MethodDeclaration[4622-4686]"
    }, {
      "left" : "// since 2.7\n    public StdDateFormat(TimeZone tz, Locale loc)",
      "right" : "// since 2.7\n    public StdDateFormat(TimeZone tz, Locale loc)",
      "info" : "MethodDeclaration[4692-4821]:MethodDeclaration[4692-4821]"
    }, {
      "left" : "protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient)",
      "right" : "protected StdDateFormat(TimeZone tz, Locale loc, Boolean lenient)",
      "info" : "MethodDeclaration[4827-4975]:MethodDeclaration[4827-4975]"
    }, {
      "left" : "public static TimeZone getDefaultTimeZone()",
      "right" : "public static TimeZone getDefaultTimeZone()",
      "info" : "MethodDeclaration[4985-5069]:MethodDeclaration[4985-5069]"
    }, {
      "left" : "public StdDateFormat withTimeZone(TimeZone tz)",
      "right" : "public StdDateFormat withTimeZone(TimeZone tz)",
      "info" : "MethodDeclaration[5079-5514]:MethodDeclaration[5079-5514]"
    }, {
      "left" : "public StdDateFormat withLocale(Locale loc)",
      "right" : "public StdDateFormat withLocale(Locale loc)",
      "info" : "MethodDeclaration[5520-5701]:MethodDeclaration[5520-5701]"
    }, {
      "left" : "public StdDateFormat clone()",
      "right" : "public StdDateFormat clone()",
      "info" : "MethodDeclaration[5711-5974]:MethodDeclaration[5711-5974]"
    }, {
      "left" : "public static DateFormat getISO8601Format(TimeZone tz)",
      "right" : "public static DateFormat getISO8601Format(TimeZone tz)",
      "info" : "MethodDeclaration[5980-6187]:MethodDeclaration[5980-6187]"
    }, {
      "left" : "public static DateFormat getISO8601Format(TimeZone tz, Locale loc)",
      "right" : "public static DateFormat getISO8601Format(TimeZone tz, Locale loc)",
      "info" : "MethodDeclaration[6193-6555]:MethodDeclaration[6193-6555]"
    }, {
      "left" : "public static DateFormat getRFC1123Format(TimeZone tz, Locale loc)",
      "right" : "public static DateFormat getRFC1123Format(TimeZone tz, Locale loc)",
      "info" : "MethodDeclaration[6561-6931]:MethodDeclaration[6561-6931]"
    }, {
      "left" : "public static DateFormat getRFC1123Format(TimeZone tz)",
      "right" : "public static DateFormat getRFC1123Format(TimeZone tz)",
      "info" : "MethodDeclaration[6937-7144]:MethodDeclaration[6937-7144]"
    }, {
      "left" : "// since 2.6\n    public TimeZone getTimeZone()",
      "right" : "// since 2.6\n    public TimeZone getTimeZone()",
      "info" : "MethodDeclaration[7327-7417]:MethodDeclaration[7327-7417]"
    }, {
      "left" : "public void setTimeZone(TimeZone tz)",
      "right" : "public void setTimeZone(TimeZone tz)",
      "info" : "MethodDeclaration[7423-7731]:MethodDeclaration[7423-7731]"
    }, {
      "left" : "public Date parse(String dateStr) throws ParseException",
      "right" : "public Date parse(String dateStr) throws ParseException",
      "info" : "MethodDeclaration[8363-10148]:MethodDeclaration[8586-10371]"
    }, {
      "left" : "public Date parse(String dateStr, ParsePosition pos)",
      "right" : "public Date parse(String dateStr, ParsePosition pos)",
      "info" : "MethodDeclaration[10154-11353]:MethodDeclaration[10377-11576]"
    }, {
      "left" : "public StringBuffer format(Date date, StringBuffer toAppendTo,\n            FieldPosition fieldPosition)",
      "right" : "public StringBuffer format(Date date, StringBuffer toAppendTo,\n            FieldPosition fieldPosition)",
      "info" : "MethodDeclaration[11534-11921]:MethodDeclaration[11757-12144]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[12096-12370]:MethodDeclaration[12319-12593]"
    }, {
      "left" : "protected boolean looksLikeISO8601(String dateStr)",
      "right" : "protected boolean looksLikeISO8601(String dateStr)",
      "info" : "MethodDeclaration[12546-12985]:MethodDeclaration[12769-13208]"
    }, {
      "left" : "protected Date parseAsISO8601(String dateStr, ParsePosition pos, boolean throwErrors)\n            throws ParseException",
      "right" : "protected Date parseAsISO8601(String dateStr, ParsePosition pos, boolean throwErrors)\n            throws ParseException",
      "info" : "MethodDeclaration[12991-18211]:MethodDeclaration[13214-18434]"
    }, {
      "left" : "protected Date parseAsRFC1123(String dateStr, ParsePosition pos)",
      "right" : "protected Date parseAsRFC1123(String dateStr, ParsePosition pos)",
      "info" : "MethodDeclaration[18217-18531]:MethodDeclaration[18440-18754]"
    }, {
      "left" : "private final static boolean hasTimeZone(String str)",
      "right" : "private final static boolean hasTimeZone(String str)",
      "info" : "MethodDeclaration[18537-19024]:MethodDeclaration[18760-19247]"
    }, {
      "left" : "protected void _clearFormats()",
      "right" : "protected void _clearFormats()",
      "info" : "MethodDeclaration[19505-19667]:MethodDeclaration[19820-19982]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4645-4686]:Block[4645-4686]"
    }, {
      "left" : "_locale = DEFAULT_LOCALE;",
      "right" : "_locale = DEFAULT_LOCALE;",
      "info" : "ExpressionStatement[4655-4680]:ExpressionStatement[4655-4680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4767-4821]:Block[4767-4821]"
    }, {
      "left" : "_timezone = tz;",
      "right" : "_timezone = tz;",
      "info" : "ExpressionStatement[4777-4792]:ExpressionStatement[4777-4792]"
    }, {
      "left" : "_locale = loc;",
      "right" : "_locale = loc;",
      "info" : "ExpressionStatement[4801-4815]:ExpressionStatement[4801-4815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4893-4975]:Block[4893-4975]"
    }, {
      "left" : "_timezone = tz;",
      "right" : "_timezone = tz;",
      "info" : "ExpressionStatement[4903-4918]:ExpressionStatement[4903-4918]"
    }, {
      "left" : "_locale = loc;",
      "right" : "_locale = loc;",
      "info" : "ExpressionStatement[4927-4941]:ExpressionStatement[4927-4941]"
    }, {
      "left" : "_lenient = lenient;",
      "right" : "_lenient = lenient;",
      "info" : "ExpressionStatement[4950-4969]:ExpressionStatement[4950-4969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5029-5069]:Block[5029-5069]"
    }, {
      "left" : "return DEFAULT_TIMEZONE;",
      "right" : "return DEFAULT_TIMEZONE;",
      "info" : "ReturnStatement[5039-5063]:ReturnStatement[5039-5063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5287-5514]:Block[5287-5514]"
    }, {
      "left" : "if (tz == null)",
      "right" : "if (tz == null)",
      "info" : "IfStatement[5297-5359]:IfStatement[5297-5359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5313-5359]:Block[5313-5359]"
    }, {
      "left" : "tz = DEFAULT_TIMEZONE;",
      "right" : "tz = DEFAULT_TIMEZONE;",
      "info" : "ExpressionStatement[5327-5349]:ExpressionStatement[5327-5349]"
    }, {
      "left" : "if ((tz == _timezone) || tz.equals(_timezone))",
      "right" : "if ((tz == _timezone) || tz.equals(_timezone))",
      "info" : "IfStatement[5368-5451]:IfStatement[5368-5451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5415-5451]:Block[5415-5451]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5429-5441]:ReturnStatement[5429-5441]"
    }, {
      "left" : "return new StdDateFormat(tz, _locale, _lenient);",
      "right" : "return new StdDateFormat(tz, _locale, _lenient);",
      "info" : "ReturnStatement[5460-5508]:ReturnStatement[5460-5508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5564-5701]:Block[5564-5701]"
    }, {
      "left" : "if (loc.equals(_locale))",
      "right" : "if (loc.equals(_locale))",
      "info" : "IfStatement[5574-5635]:IfStatement[5574-5635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5599-5635]:Block[5599-5635]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[5613-5625]:ReturnStatement[5613-5625]"
    }, {
      "left" : "return new StdDateFormat(_timezone, loc, _lenient);",
      "right" : "return new StdDateFormat(_timezone, loc, _lenient);",
      "info" : "ReturnStatement[5644-5695]:ReturnStatement[5644-5695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5754-5974]:Block[5754-5974]"
    }, {
      "left" : "return new StdDateFormat(_timezone, _locale, _lenient);",
      "right" : "return new StdDateFormat(_timezone, _locale, _lenient);",
      "info" : "ReturnStatement[5913-5968]:ReturnStatement[5913-5968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6127-6187]:Block[6127-6187]"
    }, {
      "left" : "return getISO8601Format(tz, DEFAULT_LOCALE);",
      "right" : "return getISO8601Format(tz, DEFAULT_LOCALE);",
      "info" : "ReturnStatement[6137-6181]:ReturnStatement[6137-6181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6458-6555]:Block[6458-6555]"
    }, {
      "left" : "return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null);",
      "right" : "return _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601, tz, loc, null);",
      "info" : "ReturnStatement[6468-6549]:ReturnStatement[6468-6549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6818-6931]:Block[6818-6931]"
    }, {
      "left" : "return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                tz, loc, null);",
      "right" : "return _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                tz, loc, null);",
      "info" : "ReturnStatement[6828-6925]:ReturnStatement[6828-6925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7084-7144]:Block[7084-7144]"
    }, {
      "left" : "return getRFC1123Format(tz, DEFAULT_LOCALE);",
      "right" : "return getRFC1123Format(tz, DEFAULT_LOCALE);",
      "info" : "ReturnStatement[7094-7138]:ReturnStatement[7094-7138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7384-7417]:Block[7384-7417]"
    }, {
      "left" : "return _timezone;",
      "right" : "return _timezone;",
      "info" : "ReturnStatement[7394-7411]:ReturnStatement[7394-7411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7478-7731]:Block[7478-7731]"
    }, {
      "left" : "if (!tz.equals(_timezone))",
      "right" : "if (!tz.equals(_timezone))",
      "info" : "IfStatement[7630-7725]:IfStatement[7630-7725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7657-7725]:Block[7657-7725]"
    }, {
      "left" : "_clearFormats();",
      "right" : "_clearFormats();",
      "info" : "ExpressionStatement[7671-7687]:ExpressionStatement[7671-7687]"
    }, {
      "left" : "_timezone = tz;",
      "right" : "_timezone = tz;",
      "info" : "ExpressionStatement[7700-7715]:ExpressionStatement[7700-7715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8437-10148]:Block[8660-10371]"
    }, {
      "left" : "dateStr = dateStr.trim();",
      "right" : "dateStr = dateStr.trim();",
      "info" : "ExpressionStatement[8447-8472]:ExpressionStatement[8670-8695]"
    }, {
      "left" : "ParsePosition pos = new ParsePosition(0);",
      "right" : "ParsePosition pos = new ParsePosition(0);",
      "info" : "VariableDeclarationStatement[8481-8522]:VariableDeclarationStatement[8704-8745]"
    }, {
      "left" : "Date dt;",
      "right" : "Date dt;",
      "info" : "VariableDeclarationStatement[8532-8540]:VariableDeclarationStatement[8755-8763]"
    }, {
      "left" : "if (looksLikeISO8601(dateStr))",
      "right" : "if (looksLikeISO8601(dateStr))",
      "info" : "IfStatement[8550-9585]:IfStatement[8773-9808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8581-8670]:Block[8804-8893]"
    }, {
      "left" : "dt = parseAsISO8601(dateStr, pos, true);",
      "right" : "dt = parseAsISO8601(dateStr, pos, true);",
      "info" : "ExpressionStatement[8620-8660]:ExpressionStatement[8843-8883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8676-9585]:Block[8899-9808]"
    }, {
      "left" : "int i = dateStr.length();",
      "right" : "int i = dateStr.length();",
      "info" : "VariableDeclarationStatement[8751-8776]:VariableDeclarationStatement[8974-8999]"
    }, {
      "left" : "while (--i >= 0)",
      "right" : "while (--i >= 0)",
      "info" : "WhileStatement[8789-9138]:WhileStatement[9012-9361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8806-9138]:Block[9029-9361]"
    }, {
      "left" : "char ch = dateStr.charAt(i);",
      "right" : "char ch = dateStr.charAt(i);",
      "info" : "VariableDeclarationStatement[8824-8852]:VariableDeclarationStatement[9047-9075]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[8869-9124]:IfStatement[9092-9347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8895-9124]:Block[9118-9347]"
    }, {
      "left" : "if (i > 0 || ch != '-')",
      "right" : "if (i > 0 || ch != '-')",
      "info" : "IfStatement[9028-9106]:IfStatement[9251-9329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9052-9106]:Block[9275-9329]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9078-9084]:BreakStatement[9301-9307]"
    }, {
      "left" : "if ((i < 0)\n                // let's just assume negative numbers are fine (can't be RFC-1123 anyway); check length for positive\n                    && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)))",
      "right" : "if ((i < 0)\n                // let's just assume negative numbers are fine (can't be RFC-1123 anyway); check length for positive\n                    && (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false)))",
      "info" : "IfStatement[9151-9575]:IfStatement[9374-9798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9374-9445]:Block[9597-9668]"
    }, {
      "left" : "dt = new Date(Long.parseLong(dateStr));",
      "right" : "dt = new Date(Long.parseLong(dateStr));",
      "info" : "ExpressionStatement[9392-9431]:ExpressionStatement[9615-9654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9451-9575]:Block[9674-9798]"
    }, {
      "left" : "dt = parseAsRFC1123(dateStr, pos);",
      "right" : "dt = parseAsRFC1123(dateStr, pos);",
      "info" : "ExpressionStatement[9527-9561]:ExpressionStatement[9750-9784]"
    }, {
      "left" : "if (dt != null)",
      "right" : "if (dt != null)",
      "info" : "IfStatement[9594-9644]:IfStatement[9817-9867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9610-9644]:Block[9833-9867]"
    }, {
      "left" : "return dt;",
      "right" : "return dt;",
      "info" : "ReturnStatement[9624-9634]:ReturnStatement[9847-9857]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[9654-9693]:VariableDeclarationStatement[9877-9916]"
    }, {
      "left" : "for (String f : ALL_FORMATS)",
      "right" : "for (String f : ALL_FORMATS)",
      "info" : "EnhancedForStatement[9702-9907]:EnhancedForStatement[9925-10130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9731-9907]:Block[9954-10130]"
    }, {
      "left" : "if (sb.length() > 0)",
      "right" : "if (sb.length() > 0)",
      "info" : "IfStatement[9745-9871]:IfStatement[9968-10094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9766-9818]:Block[9989-10041]"
    }, {
      "left" : "sb.append(\"\\\", \\\"\");",
      "right" : "sb.append(\"\\\", \\\"\");",
      "info" : "ExpressionStatement[9784-9804]:ExpressionStatement[10007-10027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9824-9871]:Block[10047-10094]"
    }, {
      "left" : "sb.append('\"');",
      "right" : "sb.append('\"');",
      "info" : "ExpressionStatement[9842-9857]:ExpressionStatement[10065-10080]"
    }, {
      "left" : "sb.append(f);",
      "right" : "sb.append(f);",
      "info" : "ExpressionStatement[9884-9897]:ExpressionStatement[10107-10120]"
    }, {
      "left" : "sb.append('\"');",
      "right" : "sb.append('\"');",
      "info" : "ExpressionStatement[9916-9931]:ExpressionStatement[10139-10154]"
    }, {
      "left" : "throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\",\n                           dateStr, sb.toString()), pos.getErrorIndex());",
      "right" : "throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": not compatible with any of standard forms (%s)\",\n                           dateStr, sb.toString()), pos.getErrorIndex());",
      "info" : "ThrowStatement[9940-10142]:ThrowStatement[10163-10365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10225-11353]:Block[10448-11576]"
    }, {
      "left" : "if (looksLikeISO8601(dateStr))",
      "right" : "if (looksLikeISO8601(dateStr))",
      "info" : "IfStatement[10235-10518]:IfStatement[10458-10741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10266-10518]:Block[10489-10741]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10305-10508]:TryStatement[10528-10731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10309-10384]:Block[10532-10607]"
    }, {
      "left" : "return parseAsISO8601(dateStr, pos, false);",
      "right" : "return parseAsISO8601(dateStr, pos, false);",
      "info" : "ReturnStatement[10327-10370]:ReturnStatement[10550-10593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10410-10508]:Block[10633-10731]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10482-10494]:ReturnStatement[10705-10717]"
    }, {
      "left" : "int i = dateStr.length();",
      "right" : "int i = dateStr.length();",
      "info" : "VariableDeclarationStatement[10584-10609]:VariableDeclarationStatement[10807-10832]"
    }, {
      "left" : "while (--i >= 0)",
      "right" : "while (--i >= 0)",
      "info" : "WhileStatement[10618-10935]:WhileStatement[10841-11158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10635-10935]:Block[10858-11158]"
    }, {
      "left" : "char ch = dateStr.charAt(i);",
      "right" : "char ch = dateStr.charAt(i);",
      "info" : "VariableDeclarationStatement[10649-10677]:VariableDeclarationStatement[10872-10900]"
    }, {
      "left" : "if (ch < '0' || ch > '9')",
      "right" : "if (ch < '0' || ch > '9')",
      "info" : "IfStatement[10690-10925]:IfStatement[10913-11148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10716-10925]:Block[10939-11148]"
    }, {
      "left" : "if (i > 0 || ch != '-')",
      "right" : "if (i > 0 || ch != '-')",
      "info" : "IfStatement[10841-10911]:IfStatement[11064-11134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10865-10911]:Block[11088-11134]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10887-10893]:BreakStatement[11110-11116]"
    }, {
      "left" : "if (i < 0)",
      "right" : "if (i < 0)",
      "info" : "IfStatement[10944-11252]:IfStatement[11167-11475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10955-11252]:Block[11178-11475]"
    }, {
      "left" : "if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false))",
      "right" : "if (dateStr.charAt(0) == '-' || NumberInput.inLongRange(dateStr, false))",
      "info" : "IfStatement[11096-11242]:IfStatement[11319-11465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11169-11242]:Block[11392-11465]"
    }, {
      "left" : "return new Date(Long.parseLong(dateStr));",
      "right" : "return new Date(Long.parseLong(dateStr));",
      "info" : "ReturnStatement[11187-11228]:ReturnStatement[11410-11451]"
    }, {
      "left" : "return parseAsRFC1123(dateStr, pos);",
      "right" : "return parseAsRFC1123(dateStr, pos);",
      "info" : "ReturnStatement[11311-11347]:ReturnStatement[11534-11570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11656-11921]:Block[11879-12144]"
    }, {
      "left" : "if (_formatISO8601 == null)",
      "right" : "if (_formatISO8601 == null)",
      "info" : "IfStatement[11666-11844]:IfStatement[11889-12067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11694-11844]:Block[11917-12067]"
    }, {
      "left" : "_formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale, _lenient);",
      "right" : "_formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, DATE_FORMAT_STR_ISO8601,\n                    _timezone, _locale, _lenient);",
      "info" : "ExpressionStatement[11708-11834]:ExpressionStatement[11931-12057]"
    }, {
      "left" : "return _formatISO8601.format(date, toAppendTo, fieldPosition);",
      "right" : "return _formatISO8601.format(date, toAppendTo, fieldPosition);",
      "info" : "ReturnStatement[11853-11915]:ReturnStatement[12076-12138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12135-12370]:Block[12358-12593]"
    }, {
      "left" : "String str = \"DateFormat \"+getClass().getName();",
      "right" : "String str = \"DateFormat \"+getClass().getName();",
      "info" : "VariableDeclarationStatement[12145-12193]:VariableDeclarationStatement[12368-12416]"
    }, {
      "left" : "TimeZone tz = _timezone;",
      "right" : "TimeZone tz = _timezone;",
      "info" : "VariableDeclarationStatement[12202-12226]:VariableDeclarationStatement[12425-12449]"
    }, {
      "left" : "if (tz != null)",
      "right" : "if (tz != null)",
      "info" : "IfStatement[12235-12304]:IfStatement[12458-12527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12251-12304]:Block[12474-12527]"
    }, {
      "left" : "str += \" (timezone: \"+tz+\")\";",
      "right" : "str += \" (timezone: \"+tz+\")\";",
      "info" : "ExpressionStatement[12265-12294]:ExpressionStatement[12488-12517]"
    }, {
      "left" : "str += \"(locale: \"+_locale+\")\";",
      "right" : "str += \"(locale: \"+_locale+\")\";",
      "info" : "ExpressionStatement[12313-12344]:ExpressionStatement[12536-12567]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[12353-12364]:ReturnStatement[12576-12587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12727-12985]:Block[12950-13208]"
    }, {
      "left" : "if (dateStr.length() >= 5\n            && Character.isDigit(dateStr.charAt(0))\n            && Character.isDigit(dateStr.charAt(3))\n            && dateStr.charAt(4) == '-')",
      "right" : "if (dateStr.length() >= 5\n            && Character.isDigit(dateStr.charAt(0))\n            && Character.isDigit(dateStr.charAt(3))\n            && dateStr.charAt(4) == '-')",
      "info" : "IfStatement[12737-12957]:IfStatement[12960-13180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12921-12957]:Block[13144-13180]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[12935-12947]:ReturnStatement[13158-13170]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[12966-12979]:ReturnStatement[13189-13202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13115-18211]:Block[13338-18434]"
    }, {
      "left" : "int len = dateStr.length();",
      "right" : "int len = dateStr.length();",
      "info" : "VariableDeclarationStatement[13505-13532]:VariableDeclarationStatement[13728-13755]"
    }, {
      "left" : "char c = dateStr.charAt(len-1);",
      "right" : "char c = dateStr.charAt(len-1);",
      "info" : "VariableDeclarationStatement[13541-13572]:VariableDeclarationStatement[13764-13795]"
    }, {
      "left" : "DateFormat df;",
      "right" : "DateFormat df;",
      "info" : "VariableDeclarationStatement[13581-13595]:VariableDeclarationStatement[13804-13818]"
    }, {
      "left" : "String formatStr;",
      "right" : "String formatStr;",
      "info" : "VariableDeclarationStatement[13604-13621]:VariableDeclarationStatement[13827-13844]"
    }, {
      "left" : "if (len <= 10 && Character.isDigit(c))",
      "right" : "if (len <= 10 && Character.isDigit(c))",
      "info" : "IfStatement[13674-17794]:IfStatement[13897-18017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13713-13980]:Block[13936-14203]"
    }, {
      "left" : "df = _formatPlain;",
      "right" : "df = _formatPlain;",
      "info" : "ExpressionStatement[13727-13745]:ExpressionStatement[13950-13968]"
    }, {
      "left" : "formatStr = DATE_FORMAT_STR_PLAIN;",
      "right" : "formatStr = DATE_FORMAT_STR_PLAIN;",
      "info" : "ExpressionStatement[13758-13792]:ExpressionStatement[13981-14015]"
    }, {
      "left" : "if (df == null)",
      "right" : "if (df == null)",
      "info" : "IfStatement[13805-13970]:IfStatement[14028-14193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13821-13970]:Block[14044-14193]"
    }, {
      "left" : "df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr,\n                        _timezone, _locale, _lenient);",
      "right" : "df = _formatPlain = _cloneFormat(DATE_FORMAT_PLAIN, formatStr,\n                        _timezone, _locale, _lenient);",
      "info" : "ExpressionStatement[13839-13956]:ExpressionStatement[14062-14179]"
    }, {
      "left" : "if (c == 'Z')",
      "right" : "if (c == 'Z')",
      "info" : "IfStatement[13986-17794]:IfStatement[14209-18017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14000-14548]:Block[14223-14771]"
    }, {
      "left" : "df = _formatISO8601_z;",
      "right" : "df = _formatISO8601_z;",
      "info" : "ExpressionStatement[14014-14036]:ExpressionStatement[14237-14259]"
    }, {
      "left" : "formatStr = DATE_FORMAT_STR_ISO8601_Z;",
      "right" : "formatStr = DATE_FORMAT_STR_ISO8601_Z;",
      "info" : "ExpressionStatement[14049-14087]:ExpressionStatement[14272-14310]"
    }, {
      "left" : "if (df == null)",
      "right" : "if (df == null)",
      "info" : "IfStatement[14100-14273]:IfStatement[14323-14496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14116-14273]:Block[14339-14496]"
    }, {
      "left" : "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                        _timezone, _locale, _lenient);",
      "right" : "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                        _timezone, _locale, _lenient);",
      "info" : "ExpressionStatement[14134-14259]:ExpressionStatement[14357-14482]"
    }, {
      "left" : "if (dateStr.charAt(len-4) == ':')",
      "right" : "if (dateStr.charAt(len-4) == ':')",
      "info" : "IfStatement[14343-14538]:IfStatement[14566-14761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14377-14538]:Block[14600-14761]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(dateStr);",
      "right" : "StringBuilder sb = new StringBuilder(dateStr);",
      "info" : "VariableDeclarationStatement[14395-14441]:VariableDeclarationStatement[14618-14664]"
    }, {
      "left" : "sb.insert(len-1, \".000\");",
      "right" : "sb.insert(len-1, \".000\");",
      "info" : "ExpressionStatement[14458-14483]:ExpressionStatement[14681-14706]"
    }, {
      "left" : "dateStr = sb.toString();",
      "right" : "dateStr = sb.toString();",
      "info" : "ExpressionStatement[14500-14524]:ExpressionStatement[14723-14747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14554-17794]:Block[14777-18017]"
    }, {
      "left" : "if (hasTimeZone(dateStr))",
      "right" : "if (hasTimeZone(dateStr))",
      "info" : "IfStatement[14633-17784]:IfStatement[14856-18007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14659-16748]:Block[14882-16971]"
    }, {
      "left" : "c = dateStr.charAt(len-3);",
      "right" : "c = dateStr.charAt(len-3);",
      "info" : "ExpressionStatement[14677-14703]:ExpressionStatement[14900-14926]"
    }, {
      "left" : "if (c == ':')",
      "right" : "if (c == ':')",
      "info" : "IfStatement[14720-15124]:IfStatement[14943-15347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14734-14971]:Block[14957-15194]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(dateStr);",
      "right" : "StringBuilder sb = new StringBuilder(dateStr);",
      "info" : "VariableDeclarationStatement[14817-14863]:VariableDeclarationStatement[15040-15086]"
    }, {
      "left" : "sb.delete(len-3, len-2);",
      "right" : "sb.delete(len-3, len-2);",
      "info" : "ExpressionStatement[14884-14908]:ExpressionStatement[15107-15131]"
    }, {
      "left" : "dateStr = sb.toString();",
      "right" : "dateStr = sb.toString();",
      "info" : "ExpressionStatement[14929-14953]:ExpressionStatement[15152-15176]"
    }, {
      "left" : "if (c == '+' || c == '-')",
      "right" : "if (c == '+' || c == '-')",
      "info" : "IfStatement[14977-15124]:IfStatement[15200-15347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15003-15124]:Block[15226-15347]"
    }, {
      "left" : "dateStr += \"00\";",
      "right" : "dateStr += \"00\";",
      "info" : "ExpressionStatement[15090-15106]:ExpressionStatement[15313-15329]"
    }, {
      "left" : "len = dateStr.length();",
      "right" : "len = dateStr.length();",
      "info" : "ExpressionStatement[15223-15246]:ExpressionStatement[15446-15469]"
    }, {
      "left" : "int timeLen = len - dateStr.lastIndexOf('T') - 6;",
      "right" : "int timeLen = len - dateStr.lastIndexOf('T') - 6;",
      "info" : "VariableDeclarationStatement[15330-15379]:VariableDeclarationStatement[15553-15602]"
    }, {
      "left" : "if (timeLen < 12)",
      "right" : "if (timeLen < 12)",
      "info" : "IfStatement[15396-16434]:IfStatement[15619-16657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15414-16434]:Block[15637-16657]"
    }, {
      "left" : "int offset = len - 5;",
      "right" : "int offset = len - 5;",
      "info" : "VariableDeclarationStatement[15466-15487]:VariableDeclarationStatement[15689-15710]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(dateStr);",
      "right" : "StringBuilder sb = new StringBuilder(dateStr);",
      "info" : "VariableDeclarationStatement[15546-15592]:VariableDeclarationStatement[15769-15815]"
    }, {
      "left" : "switch (timeLen) {\n                    case 11:\n                        sb.insert(offset, '0'); break;\n                    case 10:\n                        sb.insert(offset, \"00\"); break;\n                    case 9: // is this legal? (just second fraction marker)\n                        sb.insert(offset, \"000\"); break;\n                    case 8:\n                        sb.insert(offset, \".000\"); break;\n                    case 7: // not legal to have single-digit second\n                        break;\n                    case 6: // probably not legal, but let's allow\n                        sb.insert(offset, \"00.000\");\n                    case 5: // is legal to omit seconds\n                        sb.insert(offset, \":00.000\");\n                    }",
      "right" : "switch (timeLen) {\n                    case 11:\n                        sb.insert(offset, '0'); break;\n                    case 10:\n                        sb.insert(offset, \"00\"); break;\n                    case 9: // is this legal? (just second fraction marker)\n                        sb.insert(offset, \"000\"); break;\n                    case 8:\n                        sb.insert(offset, \".000\"); break;\n                    case 7: // not legal to have single-digit second\n                        break;\n                    case 6: // probably not legal, but let's allow\n                        sb.insert(offset, \"00.000\");\n                    case 5: // is legal to omit seconds\n                        sb.insert(offset, \":00.000\");\n                    }",
      "info" : "SwitchStatement[15613-16371]:SwitchStatement[15836-16594]"
    }, {
      "left" : "case 11:",
      "right" : "case 11:",
      "info" : "SwitchCase[15652-15660]:SwitchCase[15875-15883]"
    }, {
      "left" : "sb.insert(offset, '0');",
      "right" : "sb.insert(offset, '0');",
      "info" : "ExpressionStatement[15685-15708]:ExpressionStatement[15908-15931]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15709-15715]:BreakStatement[15932-15938]"
    }, {
      "left" : "case 10:",
      "right" : "case 10:",
      "info" : "SwitchCase[15736-15744]:SwitchCase[15959-15967]"
    }, {
      "left" : "sb.insert(offset, \"00\");",
      "right" : "sb.insert(offset, \"00\");",
      "info" : "ExpressionStatement[15769-15793]:ExpressionStatement[15992-16016]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15794-15800]:BreakStatement[16017-16023]"
    }, {
      "left" : "case 9:",
      "right" : "case 9:",
      "info" : "SwitchCase[15821-15828]:SwitchCase[16044-16051]"
    }, {
      "left" : "sb.insert(offset, \"000\");",
      "right" : "sb.insert(offset, \"000\");",
      "info" : "ExpressionStatement[15901-15926]:ExpressionStatement[16124-16149]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15927-15933]:BreakStatement[16150-16156]"
    }, {
      "left" : "case 8:",
      "right" : "case 8:",
      "info" : "SwitchCase[15954-15961]:SwitchCase[16177-16184]"
    }, {
      "left" : "sb.insert(offset, \".000\");",
      "right" : "sb.insert(offset, \".000\");",
      "info" : "ExpressionStatement[15986-16012]:ExpressionStatement[16209-16235]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16013-16019]:BreakStatement[16236-16242]"
    }, {
      "left" : "case 7:",
      "right" : "case 7:",
      "info" : "SwitchCase[16040-16047]:SwitchCase[16263-16270]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16113-16119]:BreakStatement[16336-16342]"
    }, {
      "left" : "case 6:",
      "right" : "case 6:",
      "info" : "SwitchCase[16140-16147]:SwitchCase[16363-16370]"
    }, {
      "left" : "sb.insert(offset, \"00.000\");",
      "right" : "sb.insert(offset, \"00.000\");",
      "info" : "ExpressionStatement[16211-16239]:ExpressionStatement[16434-16462]"
    }, {
      "left" : "case 5:",
      "right" : "case 5:",
      "info" : "SwitchCase[16260-16267]:SwitchCase[16483-16490]"
    }, {
      "left" : "sb.insert(offset, \":00.000\");",
      "right" : "sb.insert(offset, \":00.000\");",
      "info" : "ExpressionStatement[16320-16349]:ExpressionStatement[16543-16572]"
    }, {
      "left" : "dateStr = sb.toString();",
      "right" : "dateStr = sb.toString();",
      "info" : "ExpressionStatement[16392-16416]:ExpressionStatement[16615-16639]"
    }, {
      "left" : "df = _formatISO8601;",
      "right" : "df = _formatISO8601;",
      "info" : "ExpressionStatement[16451-16471]:ExpressionStatement[16674-16694]"
    }, {
      "left" : "formatStr = DATE_FORMAT_STR_ISO8601;",
      "right" : "formatStr = DATE_FORMAT_STR_ISO8601;",
      "info" : "ExpressionStatement[16488-16524]:ExpressionStatement[16711-16747]"
    }, {
      "left" : "if (_formatISO8601 == null)",
      "right" : "if (_formatISO8601 == null)",
      "info" : "IfStatement[16541-16734]:IfStatement[16764-16957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16569-16734]:Block[16792-16957]"
    }, {
      "left" : "df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr,\n                            _timezone, _locale, _lenient);",
      "right" : "df = _formatISO8601 = _cloneFormat(DATE_FORMAT_ISO8601, formatStr,\n                            _timezone, _locale, _lenient);",
      "info" : "ExpressionStatement[16591-16716]:ExpressionStatement[16814-16939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16754-17784]:Block[16977-18007]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(dateStr);",
      "right" : "StringBuilder sb = new StringBuilder(dateStr);",
      "info" : "VariableDeclarationStatement[16849-16895]:VariableDeclarationStatement[17072-17118]"
    }, {
      "left" : "int timeLen = len - dateStr.lastIndexOf('T') - 1;",
      "right" : "int timeLen = len - dateStr.lastIndexOf('T') - 1;",
      "info" : "VariableDeclarationStatement[16977-17026]:VariableDeclarationStatement[17200-17249]"
    }, {
      "left" : "if (timeLen < 12)",
      "right" : "if (timeLen < 12)",
      "info" : "IfStatement[17043-17401]:IfStatement[17266-17624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17061-17401]:Block[17284-17624]"
    }, {
      "left" : "switch (timeLen) {\n                    case 11: sb.append('0');\n                    case 10: sb.append('0');\n                    case 9: sb.append('0');\n                        break;\n                    default:\n                        sb.append(\".000\");\n                    }",
      "right" : "switch (timeLen) {\n                    case 11: sb.append('0');\n                    case 10: sb.append('0');\n                    case 9: sb.append('0');\n                        break;\n                    default:\n                        sb.append(\".000\");\n                    }",
      "info" : "SwitchStatement[17106-17383]:SwitchStatement[17329-17606]"
    }, {
      "left" : "case 11:",
      "right" : "case 11:",
      "info" : "SwitchCase[17145-17153]:SwitchCase[17368-17376]"
    }, {
      "left" : "sb.append('0');",
      "right" : "sb.append('0');",
      "info" : "ExpressionStatement[17154-17169]:ExpressionStatement[17377-17392]"
    }, {
      "left" : "case 10:",
      "right" : "case 10:",
      "info" : "SwitchCase[17190-17198]:SwitchCase[17413-17421]"
    }, {
      "left" : "sb.append('0');",
      "right" : "sb.append('0');",
      "info" : "ExpressionStatement[17199-17214]:ExpressionStatement[17422-17437]"
    }, {
      "left" : "case 9:",
      "right" : "case 9:",
      "info" : "SwitchCase[17235-17242]:SwitchCase[17458-17465]"
    }, {
      "left" : "sb.append('0');",
      "right" : "sb.append('0');",
      "info" : "ExpressionStatement[17243-17258]:ExpressionStatement[17466-17481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17283-17289]:BreakStatement[17506-17512]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17310-17318]:SwitchCase[17533-17541]"
    }, {
      "left" : "sb.append(\".000\");",
      "right" : "sb.append(\".000\");",
      "info" : "ExpressionStatement[17343-17361]:ExpressionStatement[17566-17584]"
    }, {
      "left" : "sb.append('Z');",
      "right" : "sb.append('Z');",
      "info" : "ExpressionStatement[17418-17433]:ExpressionStatement[17641-17656]"
    }, {
      "left" : "dateStr = sb.toString();",
      "right" : "dateStr = sb.toString();",
      "info" : "ExpressionStatement[17450-17474]:ExpressionStatement[17673-17697]"
    }, {
      "left" : "df = _formatISO8601_z;",
      "right" : "df = _formatISO8601_z;",
      "info" : "ExpressionStatement[17491-17513]:ExpressionStatement[17714-17736]"
    }, {
      "left" : "formatStr = DATE_FORMAT_STR_ISO8601_Z;",
      "right" : "formatStr = DATE_FORMAT_STR_ISO8601_Z;",
      "info" : "ExpressionStatement[17530-17568]:ExpressionStatement[17753-17791]"
    }, {
      "left" : "if (df == null)",
      "right" : "if (df == null)",
      "info" : "IfStatement[17585-17770]:IfStatement[17808-17993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17601-17770]:Block[17824-17993]"
    }, {
      "left" : "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                            _timezone, _locale, _lenient);",
      "right" : "df = _formatISO8601_z = _cloneFormat(DATE_FORMAT_ISO8601_Z, formatStr,\n                            _timezone, _locale, _lenient);",
      "info" : "ExpressionStatement[17623-17752]:ExpressionStatement[17846-17975]"
    }, {
      "left" : "Date dt = df.parse(dateStr, pos);",
      "right" : "Date dt = df.parse(dateStr, pos);",
      "info" : "VariableDeclarationStatement[17803-17836]:VariableDeclarationStatement[18026-18059]"
    }, {
      "left" : "if (dt == null)",
      "right" : "if (dt == null)",
      "info" : "IfStatement[17906-18186]:IfStatement[18129-18409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17922-18186]:Block[18145-18409]"
    }, {
      "left" : "throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\",\n                           dateStr, formatStr, _lenient),\n               pos.getErrorIndex());",
      "right" : "throw new ParseException\n            (String.format(\"Can not parse date \\\"%s\\\": while it seems to fit format '%s', parsing fails (leniency? %s)\",\n                           dateStr, formatStr, _lenient),\n               pos.getErrorIndex());",
      "info" : "ThrowStatement[17936-18176]:ThrowStatement[18159-18399]"
    }, {
      "left" : "return dt;",
      "right" : "return dt;",
      "info" : "ReturnStatement[18195-18205]:ReturnStatement[18418-18428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18286-18531]:Block[18509-18754]"
    }, {
      "left" : "if (_formatRFC1123 == null)",
      "right" : "if (_formatRFC1123 == null)",
      "info" : "IfStatement[18296-18474]:IfStatement[18519-18697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18324-18474]:Block[18547-18697]"
    }, {
      "left" : "_formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                    _timezone, _locale, _lenient);",
      "right" : "_formatRFC1123 = _cloneFormat(DATE_FORMAT_RFC1123, DATE_FORMAT_STR_RFC1123,\n                    _timezone, _locale, _lenient);",
      "info" : "ExpressionStatement[18338-18464]:ExpressionStatement[18561-18687]"
    }, {
      "left" : "return _formatRFC1123.parse(dateStr, pos);",
      "right" : "return _formatRFC1123.parse(dateStr, pos);",
      "info" : "ReturnStatement[18483-18525]:ReturnStatement[18706-18748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18594-19024]:Block[18817-19247]"
    }, {
      "left" : "int len = str.length();",
      "right" : "int len = str.length();",
      "info" : "VariableDeclarationStatement[18676-18699]:VariableDeclarationStatement[18899-18922]"
    }, {
      "left" : "if (len >= 6)",
      "right" : "if (len >= 6)",
      "info" : "IfStatement[18708-18996]:IfStatement[18931-19219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18722-18996]:Block[18945-19219]"
    }, {
      "left" : "char c = str.charAt(len-6);",
      "right" : "char c = str.charAt(len-6);",
      "info" : "VariableDeclarationStatement[18736-18763]:VariableDeclarationStatement[18959-18986]"
    }, {
      "left" : "if (c == '+' || c == '-')",
      "right" : "if (c == '+' || c == '-')",
      "info" : "IfStatement[18776-18814]:IfStatement[18999-19037]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18802-18814]:ReturnStatement[19025-19037]"
    }, {
      "left" : "c = str.charAt(len-5);",
      "right" : "c = str.charAt(len-5);",
      "info" : "ExpressionStatement[18827-18849]:ExpressionStatement[19050-19072]"
    }, {
      "left" : "if (c == '+' || c == '-')",
      "right" : "if (c == '+' || c == '-')",
      "info" : "IfStatement[18862-18900]:IfStatement[19085-19123]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18888-18900]:ReturnStatement[19111-19123]"
    }, {
      "left" : "c = str.charAt(len-3);",
      "right" : "c = str.charAt(len-3);",
      "info" : "ExpressionStatement[18913-18935]:ExpressionStatement[19136-19158]"
    }, {
      "left" : "if (c == '+' || c == '-')",
      "right" : "if (c == '+' || c == '-')",
      "info" : "IfStatement[18948-18986]:IfStatement[19171-19209]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18974-18986]:ReturnStatement[19197-19209]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19005-19018]:ReturnStatement[19228-19241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19536-19667]:Block[19851-19982]"
    }, {
      "left" : "_formatRFC1123 = null;",
      "right" : "_formatRFC1123 = null;",
      "info" : "ExpressionStatement[19546-19568]:ExpressionStatement[19861-19883]"
    }, {
      "left" : "_formatISO8601 = null;",
      "right" : "_formatISO8601 = null;",
      "info" : "ExpressionStatement[19577-19599]:ExpressionStatement[19892-19914]"
    }, {
      "left" : "_formatISO8601_z = null;",
      "right" : "_formatISO8601_z = null;",
      "info" : "ExpressionStatement[19608-19632]:ExpressionStatement[19923-19947]"
    }, {
      "left" : "_formatPlain = null;",
      "right" : "_formatPlain = null;",
      "info" : "ExpressionStatement[19641-19661]:ExpressionStatement[19956-19976]"
    } ]
  },
  "interFileMappings" : { }
}