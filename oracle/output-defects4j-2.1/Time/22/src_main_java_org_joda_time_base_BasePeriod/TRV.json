{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = -2110953284060001145L;",
      "right" : "private static final long serialVersionUID = -2110953284060001145L;",
      "info" : "FieldDeclaration[1854-1954]:FieldDeclaration[1854-1954]"
    }, {
      "left" : "private PeriodType iType;",
      "right" : "private PeriodType iType;",
      "info" : "FieldDeclaration[1960-2015]:FieldDeclaration[1960-2015]"
    }, {
      "left" : "private int[] iValues;",
      "right" : "private int[] iValues;",
      "info" : "FieldDeclaration[2020-2064]:FieldDeclaration[2020-2064]"
    }, {
      "left" : "protected BasePeriod(int years, int months, int weeks, int days,\n                         int hours, int minutes, int seconds, int millis,\n                         PeriodType type)",
      "right" : "protected BasePeriod(int years, int months, int weeks, int days,\n                         int hours, int minutes, int seconds, int millis,\n                         PeriodType type)",
      "info" : "MethodDeclaration[2148-3518]:MethodDeclaration[2148-3518]"
    }, {
      "left" : "protected BasePeriod(long startInstant, long endInstant, PeriodType type, Chronology chrono)",
      "right" : "protected BasePeriod(long startInstant, long endInstant, PeriodType type, Chronology chrono)",
      "info" : "MethodDeclaration[3524-4231]:MethodDeclaration[3524-4231]"
    }, {
      "left" : "protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type)",
      "right" : "protected BasePeriod(ReadableInstant startInstant, ReadableInstant endInstant, PeriodType type)",
      "info" : "MethodDeclaration[4237-5224]:MethodDeclaration[4237-5224]"
    }, {
      "left" : "protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type)",
      "right" : "protected BasePeriod(ReadablePartial start, ReadablePartial end, PeriodType type)",
      "info" : "MethodDeclaration[5230-7761]:MethodDeclaration[5230-7761]"
    }, {
      "left" : "protected BasePeriod(ReadableInstant startInstant, ReadableDuration duration, PeriodType type)",
      "right" : "protected BasePeriod(ReadableInstant startInstant, ReadableDuration duration, PeriodType type)",
      "info" : "MethodDeclaration[7767-8614]:MethodDeclaration[7767-8614]"
    }, {
      "left" : "protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, PeriodType type)",
      "right" : "protected BasePeriod(ReadableDuration duration, ReadableInstant endInstant, PeriodType type)",
      "info" : "MethodDeclaration[8620-9458]:MethodDeclaration[8620-9458]"
    }, {
      "left" : "protected BasePeriod(long duration, PeriodType type, Chronology chrono)",
      "right" : "protected BasePeriod(long duration, PeriodType type, Chronology chrono)",
      "info" : "MethodDeclaration[9926-10729]:MethodDeclaration[10138-10941]"
    }, {
      "left" : "protected BasePeriod(Object period, PeriodType type, Chronology chrono)",
      "right" : "protected BasePeriod(Object period, PeriodType type, Chronology chrono)",
      "info" : "MethodDeclaration[10735-11836]:MethodDeclaration[10947-12048]"
    }, {
      "left" : "protected BasePeriod(int[] values, PeriodType type)",
      "right" : "protected BasePeriod(int[] values, PeriodType type)",
      "info" : "MethodDeclaration[11842-12204]:MethodDeclaration[12054-12416]"
    }, {
      "left" : "protected PeriodType checkPeriodType(PeriodType type)",
      "right" : "protected PeriodType checkPeriodType(PeriodType type)",
      "info" : "MethodDeclaration[12288-12723]:MethodDeclaration[12500-12935]"
    }, {
      "left" : "public PeriodType getPeriodType()",
      "right" : "public PeriodType getPeriodType()",
      "info" : "MethodDeclaration[12807-12953]:MethodDeclaration[13019-13165]"
    }, {
      "left" : "public int size()",
      "right" : "public int size()",
      "info" : "MethodDeclaration[13037-13220]:MethodDeclaration[13249-13432]"
    }, {
      "left" : "public DurationFieldType getFieldType(int index)",
      "right" : "public DurationFieldType getFieldType(int index)",
      "info" : "MethodDeclaration[13226-13554]:MethodDeclaration[13438-13766]"
    }, {
      "left" : "public int getValue(int index)",
      "right" : "public int getValue(int index)",
      "info" : "MethodDeclaration[13560-13867]:MethodDeclaration[13772-14079]"
    }, {
      "left" : "public Duration toDurationFrom(ReadableInstant startInstant)",
      "right" : "public Duration toDurationFrom(ReadableInstant startInstant)",
      "info" : "MethodDeclaration[13951-15105]:MethodDeclaration[14163-15317]"
    }, {
      "left" : "public Duration toDurationTo(ReadableInstant endInstant)",
      "right" : "public Duration toDurationTo(ReadableInstant endInstant)",
      "info" : "MethodDeclaration[15111-16272]:MethodDeclaration[15323-16484]"
    }, {
      "left" : "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue)",
      "right" : "private void checkAndUpdate(DurationFieldType type, int[] values, int newValue)",
      "info" : "MethodDeclaration[16356-17041]:MethodDeclaration[16568-17253]"
    }, {
      "left" : "protected void setPeriod(ReadablePeriod period)",
      "right" : "protected void setPeriod(ReadablePeriod period)",
      "info" : "MethodDeclaration[17125-17536]:MethodDeclaration[17337-17748]"
    }, {
      "left" : "private void setPeriodInternal(ReadablePeriod period)",
      "right" : "private void setPeriodInternal(ReadablePeriod period)",
      "info" : "MethodDeclaration[17542-17970]:MethodDeclaration[17754-18182]"
    }, {
      "left" : "protected void setPeriod(int years, int months, int weeks, int days,\n                             int hours, int minutes, int seconds, int millis)",
      "right" : "protected void setPeriod(int years, int months, int weeks, int days,\n                             int hours, int minutes, int seconds, int millis)",
      "info" : "MethodDeclaration[17976-19091]:MethodDeclaration[18188-19303]"
    }, {
      "left" : "private void setPeriodInternal(int years, int months, int weeks, int days,\n                                   int hours, int minutes, int seconds, int millis)",
      "right" : "private void setPeriodInternal(int years, int months, int weeks, int days,\n                                   int hours, int minutes, int seconds, int millis)",
      "info" : "MethodDeclaration[19097-19960]:MethodDeclaration[19309-20172]"
    }, {
      "left" : "protected void setField(DurationFieldType field, int value)",
      "right" : "protected void setField(DurationFieldType field, int value)",
      "info" : "MethodDeclaration[20044-20383]:MethodDeclaration[20256-20595]"
    }, {
      "left" : "protected void setFieldInto(int[] values, DurationFieldType field, int value)",
      "right" : "protected void setFieldInto(int[] values, DurationFieldType field, int value)",
      "info" : "MethodDeclaration[20389-21058]:MethodDeclaration[20601-21270]"
    }, {
      "left" : "protected void addField(DurationFieldType field, int value)",
      "right" : "protected void addField(DurationFieldType field, int value)",
      "info" : "MethodDeclaration[21064-21403]:MethodDeclaration[21276-21615]"
    }, {
      "left" : "protected void addFieldInto(int[] values, DurationFieldType field, int value)",
      "right" : "protected void addFieldInto(int[] values, DurationFieldType field, int value)",
      "info" : "MethodDeclaration[21409-22116]:MethodDeclaration[21621-22328]"
    }, {
      "left" : "protected void mergePeriod(ReadablePeriod period)",
      "right" : "protected void mergePeriod(ReadablePeriod period)",
      "info" : "MethodDeclaration[22122-22488]:MethodDeclaration[22334-22700]"
    }, {
      "left" : "protected int[] mergePeriodInto(int[] values, ReadablePeriod period)",
      "right" : "protected int[] mergePeriodInto(int[] values, ReadablePeriod period)",
      "info" : "MethodDeclaration[22494-23123]:MethodDeclaration[22706-23335]"
    }, {
      "left" : "protected void addPeriod(ReadablePeriod period)",
      "right" : "protected void addPeriod(ReadablePeriod period)",
      "info" : "MethodDeclaration[23129-23489]:MethodDeclaration[23341-23701]"
    }, {
      "left" : "protected int[] addPeriodInto(int[] values, ReadablePeriod period)",
      "right" : "protected int[] addPeriodInto(int[] values, ReadablePeriod period)",
      "info" : "MethodDeclaration[23495-24463]:MethodDeclaration[23707-24675]"
    }, {
      "left" : "protected void setValue(int index, int value)",
      "right" : "protected void setValue(int index, int value)",
      "info" : "MethodDeclaration[24547-24848]:MethodDeclaration[24759-25060]"
    }, {
      "left" : "protected void setValues(int[] values)",
      "right" : "protected void setValues(int[] values)",
      "info" : "MethodDeclaration[24854-25030]:MethodDeclaration[25066-25242]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3327-3518]:Block[3327-3518]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3337-3345]:SuperConstructorInvocation[3337-3345]"
    }, {
      "left" : "type = checkPeriodType(type);",
      "right" : "type = checkPeriodType(type);",
      "info" : "ExpressionStatement[3354-3383]:ExpressionStatement[3354-3383]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[3392-3405]:ExpressionStatement[3392-3405]"
    }, {
      "left" : "setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);",
      "right" : "setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);",
      "info" : "ExpressionStatement[3414-3493]:ExpressionStatement[3414-3493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4031-4231]:Block[4031-4231]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[4041-4049]:SuperConstructorInvocation[4041-4049]"
    }, {
      "left" : "type = checkPeriodType(type);",
      "right" : "type = checkPeriodType(type);",
      "info" : "ExpressionStatement[4058-4087]:ExpressionStatement[4058-4087]"
    }, {
      "left" : "chrono = DateTimeUtils.getChronology(chrono);",
      "right" : "chrono = DateTimeUtils.getChronology(chrono);",
      "info" : "ExpressionStatement[4096-4141]:ExpressionStatement[4096-4141]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[4150-4163]:ExpressionStatement[4150-4163]"
    }, {
      "left" : "iValues = chrono.get(this, startInstant, endInstant);",
      "right" : "iValues = chrono.get(this, startInstant, endInstant);",
      "info" : "ExpressionStatement[4172-4225]:ExpressionStatement[4172-4225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4677-5224]:Block[4677-5224]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[4687-4695]:SuperConstructorInvocation[4687-4695]"
    }, {
      "left" : "type = checkPeriodType(type);",
      "right" : "type = checkPeriodType(type);",
      "info" : "ExpressionStatement[4704-4733]:ExpressionStatement[4704-4733]"
    }, {
      "left" : "if (startInstant == null && endInstant == null)",
      "right" : "if (startInstant == null && endInstant == null)",
      "info" : "IfStatement[4742-5218]:IfStatement[4742-5218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4790-4866]:Block[4790-4866]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[4804-4817]:ExpressionStatement[4804-4817]"
    }, {
      "left" : "iValues = new int[size()];",
      "right" : "iValues = new int[size()];",
      "info" : "ExpressionStatement[4830-4856]:ExpressionStatement[4830-4856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4872-5218]:Block[4872-5218]"
    }, {
      "left" : "long startMillis = DateTimeUtils.getInstantMillis(startInstant);",
      "right" : "long startMillis = DateTimeUtils.getInstantMillis(startInstant);",
      "info" : "VariableDeclarationStatement[4886-4950]:VariableDeclarationStatement[4886-4950]"
    }, {
      "left" : "long endMillis = DateTimeUtils.getInstantMillis(endInstant);",
      "right" : "long endMillis = DateTimeUtils.getInstantMillis(endInstant);",
      "info" : "VariableDeclarationStatement[4963-5023]:VariableDeclarationStatement[4963-5023]"
    }, {
      "left" : "Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);",
      "right" : "Chronology chrono = DateTimeUtils.getIntervalChronology(startInstant, endInstant);",
      "info" : "VariableDeclarationStatement[5036-5118]:VariableDeclarationStatement[5036-5118]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[5131-5144]:ExpressionStatement[5131-5144]"
    }, {
      "left" : "iValues = chrono.get(this, startMillis, endMillis);",
      "right" : "iValues = chrono.get(this, startMillis, endMillis);",
      "info" : "ExpressionStatement[5157-5208]:ExpressionStatement[5157-5208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6195-7761]:Block[6195-7761]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[6205-6213]:SuperConstructorInvocation[6205-6213]"
    }, {
      "left" : "if (start == null || end == null)",
      "right" : "if (start == null || end == null)",
      "info" : "IfStatement[6222-6359]:IfStatement[6222-6359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6256-6359]:Block[6256-6359]"
    }, {
      "left" : "throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");",
      "right" : "throw new IllegalArgumentException(\"ReadablePartial objects must not be null\");",
      "info" : "ThrowStatement[6270-6349]:ThrowStatement[6270-6349]"
    }, {
      "left" : "if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass())",
      "right" : "if (start instanceof BaseLocal && end instanceof BaseLocal && start.getClass() == end.getClass())",
      "info" : "IfStatement[6368-7755]:IfStatement[6368-7755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6466-6887]:Block[6466-6887]"
    }, {
      "left" : "type = checkPeriodType(type);",
      "right" : "type = checkPeriodType(type);",
      "info" : "ExpressionStatement[6511-6540]:ExpressionStatement[6511-6540]"
    }, {
      "left" : "long startMillis = ((BaseLocal) start).getLocalMillis();",
      "right" : "long startMillis = ((BaseLocal) start).getLocalMillis();",
      "info" : "VariableDeclarationStatement[6553-6609]:VariableDeclarationStatement[6553-6609]"
    }, {
      "left" : "long endMillis = ((BaseLocal) end).getLocalMillis();",
      "right" : "long endMillis = ((BaseLocal) end).getLocalMillis();",
      "info" : "VariableDeclarationStatement[6622-6674]:VariableDeclarationStatement[6622-6674]"
    }, {
      "left" : "Chronology chrono = start.getChronology();",
      "right" : "Chronology chrono = start.getChronology();",
      "info" : "VariableDeclarationStatement[6687-6729]:VariableDeclarationStatement[6687-6729]"
    }, {
      "left" : "chrono = DateTimeUtils.getChronology(chrono);",
      "right" : "chrono = DateTimeUtils.getChronology(chrono);",
      "info" : "ExpressionStatement[6742-6787]:ExpressionStatement[6742-6787]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[6800-6813]:ExpressionStatement[6800-6813]"
    }, {
      "left" : "iValues = chrono.get(this, startMillis, endMillis);",
      "right" : "iValues = chrono.get(this, startMillis, endMillis);",
      "info" : "ExpressionStatement[6826-6877]:ExpressionStatement[6826-6877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6893-7755]:Block[6893-7755]"
    }, {
      "left" : "if (start.size() != end.size())",
      "right" : "if (start.size() != end.size())",
      "info" : "IfStatement[6907-7066]:IfStatement[6907-7066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6939-7066]:Block[6939-7066]"
    }, {
      "left" : "throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");",
      "right" : "throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");",
      "info" : "ThrowStatement[6957-7052]:ThrowStatement[6957-7052]"
    }, {
      "left" : "for (int i = 0, isize = start.size(); i < isize; i++)",
      "right" : "for (int i = 0, isize = start.size(); i < isize; i++)",
      "info" : "ForStatement[7079-7350]:ForStatement[7079-7350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7133-7350]:Block[7133-7350]"
    }, {
      "left" : "if (start.getFieldType(i) != end.getFieldType(i))",
      "right" : "if (start.getFieldType(i) != end.getFieldType(i))",
      "info" : "IfStatement[7151-7336]:IfStatement[7151-7336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7201-7336]:Block[7201-7336]"
    }, {
      "left" : "throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");",
      "right" : "throw new IllegalArgumentException(\"ReadablePartial objects must have the same set of fields\");",
      "info" : "ThrowStatement[7223-7318]:ThrowStatement[7223-7318]"
    }, {
      "left" : "if (DateTimeUtils.isContiguous(start) == false)",
      "right" : "if (DateTimeUtils.isContiguous(start) == false)",
      "info" : "IfStatement[7363-7524]:IfStatement[7363-7524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7411-7524]:Block[7411-7524]"
    }, {
      "left" : "throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");",
      "right" : "throw new IllegalArgumentException(\"ReadablePartial objects must be contiguous\");",
      "info" : "ThrowStatement[7429-7510]:ThrowStatement[7429-7510]"
    }, {
      "left" : "iType = checkPeriodType(type);",
      "right" : "iType = checkPeriodType(type);",
      "info" : "ExpressionStatement[7537-7567]:ExpressionStatement[7537-7567]"
    }, {
      "left" : "Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();",
      "right" : "Chronology chrono = DateTimeUtils.getChronology(start.getChronology()).withUTC();",
      "info" : "VariableDeclarationStatement[7580-7661]:VariableDeclarationStatement[7580-7661]"
    }, {
      "left" : "iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));",
      "right" : "iValues = chrono.get(this, chrono.set(start, 0L), chrono.set(end, 0L));",
      "info" : "ExpressionStatement[7674-7745]:ExpressionStatement[7674-7745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8172-8614]:Block[8172-8614]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[8182-8190]:SuperConstructorInvocation[8182-8190]"
    }, {
      "left" : "type = checkPeriodType(type);",
      "right" : "type = checkPeriodType(type);",
      "info" : "ExpressionStatement[8199-8228]:ExpressionStatement[8199-8228]"
    }, {
      "left" : "long startMillis = DateTimeUtils.getInstantMillis(startInstant);",
      "right" : "long startMillis = DateTimeUtils.getInstantMillis(startInstant);",
      "info" : "VariableDeclarationStatement[8237-8301]:VariableDeclarationStatement[8237-8301]"
    }, {
      "left" : "long durationMillis = DateTimeUtils.getDurationMillis(duration);",
      "right" : "long durationMillis = DateTimeUtils.getDurationMillis(duration);",
      "info" : "VariableDeclarationStatement[8310-8374]:VariableDeclarationStatement[8310-8374]"
    }, {
      "left" : "long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);",
      "right" : "long endMillis = FieldUtils.safeAdd(startMillis, durationMillis);",
      "info" : "VariableDeclarationStatement[8383-8448]:VariableDeclarationStatement[8383-8448]"
    }, {
      "left" : "Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);",
      "right" : "Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);",
      "info" : "VariableDeclarationStatement[8457-8526]:VariableDeclarationStatement[8457-8526]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[8535-8548]:ExpressionStatement[8535-8548]"
    }, {
      "left" : "iValues = chrono.get(this, startMillis, endMillis);",
      "right" : "iValues = chrono.get(this, startMillis, endMillis);",
      "info" : "ExpressionStatement[8557-8608]:ExpressionStatement[8557-8608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9017-9458]:Block[9017-9458]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[9027-9035]:SuperConstructorInvocation[9027-9035]"
    }, {
      "left" : "type = checkPeriodType(type);",
      "right" : "type = checkPeriodType(type);",
      "info" : "ExpressionStatement[9044-9073]:ExpressionStatement[9044-9073]"
    }, {
      "left" : "long durationMillis = DateTimeUtils.getDurationMillis(duration);",
      "right" : "long durationMillis = DateTimeUtils.getDurationMillis(duration);",
      "info" : "VariableDeclarationStatement[9082-9146]:VariableDeclarationStatement[9082-9146]"
    }, {
      "left" : "long endMillis = DateTimeUtils.getInstantMillis(endInstant);",
      "right" : "long endMillis = DateTimeUtils.getInstantMillis(endInstant);",
      "info" : "VariableDeclarationStatement[9155-9215]:VariableDeclarationStatement[9155-9215]"
    }, {
      "left" : "long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis);",
      "right" : "long startMillis = FieldUtils.safeSubtract(endMillis, durationMillis);",
      "info" : "VariableDeclarationStatement[9224-9294]:VariableDeclarationStatement[9224-9294]"
    }, {
      "left" : "Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);",
      "right" : "Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);",
      "info" : "VariableDeclarationStatement[9303-9370]:VariableDeclarationStatement[9303-9370]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[9379-9392]:ExpressionStatement[9379-9392]"
    }, {
      "left" : "iValues = chrono.get(this, startMillis, endMillis);",
      "right" : "iValues = chrono.get(this, startMillis, endMillis);",
      "info" : "ExpressionStatement[9401-9452]:ExpressionStatement[9401-9452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10545-10729]:Block[10757-10941]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[10555-10563]:SuperConstructorInvocation[10767-10775]"
    }, {
      "left" : "type = checkPeriodType(type);",
      "right" : "type = checkPeriodType(type);",
      "info" : "ExpressionStatement[10572-10601]:ExpressionStatement[10784-10813]"
    }, {
      "left" : "chrono = DateTimeUtils.getChronology(chrono);",
      "right" : "chrono = DateTimeUtils.getChronology(chrono);",
      "info" : "ExpressionStatement[10610-10655]:ExpressionStatement[10822-10867]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[10664-10677]:ExpressionStatement[10876-10889]"
    }, {
      "left" : "iValues = chrono.get(this, duration);",
      "right" : "iValues = chrono.get(this, duration);",
      "info" : "ExpressionStatement[10686-10723]:ExpressionStatement[10898-10935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11262-11836]:Block[11474-12048]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[11272-11280]:SuperConstructorInvocation[11484-11492]"
    }, {
      "left" : "PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);",
      "right" : "PeriodConverter converter = ConverterManager.getInstance().getPeriodConverter(period);",
      "info" : "VariableDeclarationStatement[11289-11375]:VariableDeclarationStatement[11501-11587]"
    }, {
      "left" : "type = (type == null ? converter.getPeriodType(period) : type);",
      "right" : "type = (type == null ? converter.getPeriodType(period) : type);",
      "info" : "ExpressionStatement[11384-11447]:ExpressionStatement[11596-11659]"
    }, {
      "left" : "type = checkPeriodType(type);",
      "right" : "type = checkPeriodType(type);",
      "info" : "ExpressionStatement[11456-11485]:ExpressionStatement[11668-11697]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[11494-11507]:ExpressionStatement[11706-11719]"
    }, {
      "left" : "if (this instanceof ReadWritablePeriod)",
      "right" : "if (this instanceof ReadWritablePeriod)",
      "info" : "IfStatement[11516-11830]:IfStatement[11728-12042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11556-11738]:Block[11768-11950]"
    }, {
      "left" : "iValues = new int[size()];",
      "right" : "iValues = new int[size()];",
      "info" : "ExpressionStatement[11570-11596]:ExpressionStatement[11782-11808]"
    }, {
      "left" : "chrono = DateTimeUtils.getChronology(chrono);",
      "right" : "chrono = DateTimeUtils.getChronology(chrono);",
      "info" : "ExpressionStatement[11609-11654]:ExpressionStatement[11821-11866]"
    }, {
      "left" : "converter.setInto((ReadWritablePeriod) this, period, chrono);",
      "right" : "converter.setInto((ReadWritablePeriod) this, period, chrono);",
      "info" : "ExpressionStatement[11667-11728]:ExpressionStatement[11879-11940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11744-11830]:Block[11956-12042]"
    }, {
      "left" : "iValues = new MutablePeriod(period, type, chrono).getValues();",
      "right" : "iValues = new MutablePeriod(period, type, chrono).getValues();",
      "info" : "ExpressionStatement[11758-11820]:ExpressionStatement[11970-12032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12132-12204]:Block[12344-12416]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[12142-12150]:SuperConstructorInvocation[12354-12362]"
    }, {
      "left" : "iType = type;",
      "right" : "iType = type;",
      "info" : "ExpressionStatement[12159-12172]:ExpressionStatement[12371-12384]"
    }, {
      "left" : "iValues = values;",
      "right" : "iValues = values;",
      "info" : "ExpressionStatement[12181-12198]:ExpressionStatement[12393-12410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12666-12723]:Block[12878-12935]"
    }, {
      "left" : "return DateTimeUtils.getPeriodType(type);",
      "right" : "return DateTimeUtils.getPeriodType(type);",
      "info" : "ReturnStatement[12676-12717]:ReturnStatement[12888-12929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12924-12953]:Block[13136-13165]"
    }, {
      "left" : "return iType;",
      "right" : "return iType;",
      "info" : "ReturnStatement[12934-12947]:ReturnStatement[13146-13159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13184-13220]:Block[13396-13432]"
    }, {
      "left" : "return iType.size();",
      "right" : "return iType.size();",
      "info" : "ReturnStatement[13194-13214]:ReturnStatement[13406-13426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13505-13554]:Block[13717-13766]"
    }, {
      "left" : "return iType.getFieldType(index);",
      "right" : "return iType.getFieldType(index);",
      "info" : "ReturnStatement[13515-13548]:ReturnStatement[13727-13760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13829-13867]:Block[14041-14079]"
    }, {
      "left" : "return iValues[index];",
      "right" : "return iValues[index];",
      "info" : "ReturnStatement[13839-13861]:ReturnStatement[14051-14073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14835-15105]:Block[15047-15317]"
    }, {
      "left" : "long startMillis = DateTimeUtils.getInstantMillis(startInstant);",
      "right" : "long startMillis = DateTimeUtils.getInstantMillis(startInstant);",
      "info" : "VariableDeclarationStatement[14845-14909]:VariableDeclarationStatement[15057-15121]"
    }, {
      "left" : "Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);",
      "right" : "Chronology chrono = DateTimeUtils.getInstantChronology(startInstant);",
      "info" : "VariableDeclarationStatement[14918-14987]:VariableDeclarationStatement[15130-15199]"
    }, {
      "left" : "long endMillis = chrono.add(this, startMillis, 1);",
      "right" : "long endMillis = chrono.add(this, startMillis, 1);",
      "info" : "VariableDeclarationStatement[14996-15046]:VariableDeclarationStatement[15208-15258]"
    }, {
      "left" : "return new Duration(startMillis, endMillis);",
      "right" : "return new Duration(startMillis, endMillis);",
      "info" : "ReturnStatement[15055-15099]:ReturnStatement[15267-15311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16007-16272]:Block[16219-16484]"
    }, {
      "left" : "long endMillis = DateTimeUtils.getInstantMillis(endInstant);",
      "right" : "long endMillis = DateTimeUtils.getInstantMillis(endInstant);",
      "info" : "VariableDeclarationStatement[16017-16077]:VariableDeclarationStatement[16229-16289]"
    }, {
      "left" : "Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);",
      "right" : "Chronology chrono = DateTimeUtils.getInstantChronology(endInstant);",
      "info" : "VariableDeclarationStatement[16086-16153]:VariableDeclarationStatement[16298-16365]"
    }, {
      "left" : "long startMillis = chrono.add(this, endMillis, -1);",
      "right" : "long startMillis = chrono.add(this, endMillis, -1);",
      "info" : "VariableDeclarationStatement[16162-16213]:VariableDeclarationStatement[16374-16425]"
    }, {
      "left" : "return new Duration(startMillis, endMillis);",
      "right" : "return new Duration(startMillis, endMillis);",
      "info" : "ReturnStatement[16222-16266]:ReturnStatement[16434-16478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16729-17041]:Block[16941-17253]"
    }, {
      "left" : "int index = indexOf(type);",
      "right" : "int index = indexOf(type);",
      "info" : "VariableDeclarationStatement[16739-16765]:VariableDeclarationStatement[16951-16977]"
    }, {
      "left" : "if (index == -1)",
      "right" : "if (index == -1)",
      "info" : "IfStatement[16774-17035]:IfStatement[16986-17247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16791-16980]:Block[17003-17192]"
    }, {
      "left" : "if (newValue != 0)",
      "right" : "if (newValue != 0)",
      "info" : "IfStatement[16805-16970]:IfStatement[17017-17182]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16824-16970]:Block[17036-17182]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Period does not support field '\" + type.getName() + \"'\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Period does not support field '\" + type.getName() + \"'\");",
      "info" : "ThrowStatement[16842-16956]:ThrowStatement[17054-17168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16986-17035]:Block[17198-17247]"
    }, {
      "left" : "values[index] = newValue;",
      "right" : "values[index] = newValue;",
      "info" : "ExpressionStatement[17000-17025]:ExpressionStatement[17212-17237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17393-17536]:Block[17605-17748]"
    }, {
      "left" : "if (period == null)",
      "right" : "if (period == null)",
      "info" : "IfStatement[17403-17530]:IfStatement[17615-17742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17423-17474]:Block[17635-17686]"
    }, {
      "left" : "setValues(new int[size()]);",
      "right" : "setValues(new int[size()]);",
      "info" : "ExpressionStatement[17437-17464]:ExpressionStatement[17649-17676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17480-17530]:Block[17692-17742]"
    }, {
      "left" : "setPeriodInternal(period);",
      "right" : "setPeriodInternal(period);",
      "info" : "ExpressionStatement[17494-17520]:ExpressionStatement[17706-17732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17659-17970]:Block[17871-18182]"
    }, {
      "left" : "int[] newValues = new int[size()];",
      "right" : "int[] newValues = new int[size()];",
      "info" : "VariableDeclarationStatement[17669-17703]:VariableDeclarationStatement[17881-17915]"
    }, {
      "left" : "for (int i = 0, isize = period.size(); i < isize; i++)",
      "right" : "for (int i = 0, isize = period.size(); i < isize; i++)",
      "info" : "ForStatement[17712-17935]:ForStatement[17924-18147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17767-17935]:Block[17979-18147]"
    }, {
      "left" : "DurationFieldType type = period.getFieldType(i);",
      "right" : "DurationFieldType type = period.getFieldType(i);",
      "info" : "VariableDeclarationStatement[17781-17829]:VariableDeclarationStatement[17993-18041]"
    }, {
      "left" : "int value = period.getValue(i);",
      "right" : "int value = period.getValue(i);",
      "info" : "VariableDeclarationStatement[17842-17873]:VariableDeclarationStatement[18054-18085]"
    }, {
      "left" : "checkAndUpdate(type, newValues, value);",
      "right" : "checkAndUpdate(type, newValues, value);",
      "info" : "ExpressionStatement[17886-17925]:ExpressionStatement[18098-18137]"
    }, {
      "left" : "iValues = newValues;",
      "right" : "iValues = newValues;",
      "info" : "ExpressionStatement[17944-17964]:ExpressionStatement[18156-18176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18996-19091]:Block[19208-19303]"
    }, {
      "left" : "setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);",
      "right" : "setPeriodInternal(years, months, weeks, days, hours, minutes, seconds, millis);",
      "info" : "ExpressionStatement[19006-19085]:ExpressionStatement[19218-19297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19319-19960]:Block[19531-20172]"
    }, {
      "left" : "int[] newValues = new int[size()];",
      "right" : "int[] newValues = new int[size()];",
      "info" : "VariableDeclarationStatement[19329-19363]:VariableDeclarationStatement[19541-19575]"
    }, {
      "left" : "checkAndUpdate(DurationFieldType.years(), newValues, years);",
      "right" : "checkAndUpdate(DurationFieldType.years(), newValues, years);",
      "info" : "ExpressionStatement[19372-19432]:ExpressionStatement[19584-19644]"
    }, {
      "left" : "checkAndUpdate(DurationFieldType.months(), newValues, months);",
      "right" : "checkAndUpdate(DurationFieldType.months(), newValues, months);",
      "info" : "ExpressionStatement[19441-19503]:ExpressionStatement[19653-19715]"
    }, {
      "left" : "checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",
      "right" : "checkAndUpdate(DurationFieldType.weeks(), newValues, weeks);",
      "info" : "ExpressionStatement[19512-19572]:ExpressionStatement[19724-19784]"
    }, {
      "left" : "checkAndUpdate(DurationFieldType.days(), newValues, days);",
      "right" : "checkAndUpdate(DurationFieldType.days(), newValues, days);",
      "info" : "ExpressionStatement[19581-19639]:ExpressionStatement[19793-19851]"
    }, {
      "left" : "checkAndUpdate(DurationFieldType.hours(), newValues, hours);",
      "right" : "checkAndUpdate(DurationFieldType.hours(), newValues, hours);",
      "info" : "ExpressionStatement[19648-19708]:ExpressionStatement[19860-19920]"
    }, {
      "left" : "checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",
      "right" : "checkAndUpdate(DurationFieldType.minutes(), newValues, minutes);",
      "info" : "ExpressionStatement[19717-19781]:ExpressionStatement[19929-19993]"
    }, {
      "left" : "checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",
      "right" : "checkAndUpdate(DurationFieldType.seconds(), newValues, seconds);",
      "info" : "ExpressionStatement[19790-19854]:ExpressionStatement[20002-20066]"
    }, {
      "left" : "checkAndUpdate(DurationFieldType.millis(), newValues, millis);",
      "right" : "checkAndUpdate(DurationFieldType.millis(), newValues, millis);",
      "info" : "ExpressionStatement[19863-19925]:ExpressionStatement[20075-20137]"
    }, {
      "left" : "iValues = newValues;",
      "right" : "iValues = newValues;",
      "info" : "ExpressionStatement[19934-19954]:ExpressionStatement[20146-20166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20331-20383]:Block[20543-20595]"
    }, {
      "left" : "setFieldInto(iValues, field, value);",
      "right" : "setFieldInto(iValues, field, value);",
      "info" : "ExpressionStatement[20341-20377]:ExpressionStatement[20553-20589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20743-21058]:Block[20955-21270]"
    }, {
      "left" : "int index = indexOf(field);",
      "right" : "int index = indexOf(field);",
      "info" : "VariableDeclarationStatement[20753-20780]:VariableDeclarationStatement[20965-20992]"
    }, {
      "left" : "if (index == -1)",
      "right" : "if (index == -1)",
      "info" : "IfStatement[20789-21052]:IfStatement[21001-21264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20806-21000]:Block[21018-21212]"
    }, {
      "left" : "if (value != 0 || field == null)",
      "right" : "if (value != 0 || field == null)",
      "info" : "IfStatement[20820-20990]:IfStatement[21032-21202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20853-20990]:Block[21065-21202]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Period does not support field '\" + field + \"'\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Period does not support field '\" + field + \"'\");",
      "info" : "ThrowStatement[20871-20976]:ThrowStatement[21083-21188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21006-21052]:Block[21218-21264]"
    }, {
      "left" : "values[index] = value;",
      "right" : "values[index] = value;",
      "info" : "ExpressionStatement[21020-21042]:ExpressionStatement[21232-21254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21351-21403]:Block[21563-21615]"
    }, {
      "left" : "addFieldInto(iValues, field, value);",
      "right" : "addFieldInto(iValues, field, value);",
      "info" : "ExpressionStatement[21361-21397]:ExpressionStatement[21573-21609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21766-22116]:Block[21978-22328]"
    }, {
      "left" : "int index = indexOf(field);",
      "right" : "int index = indexOf(field);",
      "info" : "VariableDeclarationStatement[21776-21803]:VariableDeclarationStatement[21988-22015]"
    }, {
      "left" : "if (index == -1)",
      "right" : "if (index == -1)",
      "info" : "IfStatement[21812-22110]:IfStatement[22024-22322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21829-22023]:Block[22041-22235]"
    }, {
      "left" : "if (value != 0 || field == null)",
      "right" : "if (value != 0 || field == null)",
      "info" : "IfStatement[21843-22013]:IfStatement[22055-22225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21876-22013]:Block[22088-22225]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Period does not support field '\" + field + \"'\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Period does not support field '\" + field + \"'\");",
      "info" : "ThrowStatement[21894-21999]:ThrowStatement[22106-22211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22029-22110]:Block[22241-22322]"
    }, {
      "left" : "values[index] = FieldUtils.safeAdd(values[index], value);",
      "right" : "values[index] = FieldUtils.safeAdd(values[index], value);",
      "info" : "ExpressionStatement[22043-22100]:ExpressionStatement[22255-22312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22381-22488]:Block[22593-22700]"
    }, {
      "left" : "if (period != null)",
      "right" : "if (period != null)",
      "info" : "IfStatement[22391-22482]:IfStatement[22603-22694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22411-22482]:Block[22623-22694]"
    }, {
      "left" : "iValues = mergePeriodInto(getValues(), period);",
      "right" : "iValues = mergePeriodInto(getValues(), period);",
      "info" : "ExpressionStatement[22425-22472]:ExpressionStatement[22637-22684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22858-23123]:Block[23070-23335]"
    }, {
      "left" : "for (int i = 0, isize = period.size(); i < isize; i++)",
      "right" : "for (int i = 0, isize = period.size(); i < isize; i++)",
      "info" : "ForStatement[22869-23093]:ForStatement[23081-23305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22924-23093]:Block[23136-23305]"
    }, {
      "left" : "DurationFieldType type = period.getFieldType(i);",
      "right" : "DurationFieldType type = period.getFieldType(i);",
      "info" : "VariableDeclarationStatement[22939-22987]:VariableDeclarationStatement[23151-23199]"
    }, {
      "left" : "int value = period.getValue(i);",
      "right" : "int value = period.getValue(i);",
      "info" : "VariableDeclarationStatement[23001-23032]:VariableDeclarationStatement[23213-23244]"
    }, {
      "left" : "checkAndUpdate(type, values, value);",
      "right" : "checkAndUpdate(type, values, value);",
      "info" : "ExpressionStatement[23046-23082]:ExpressionStatement[23258-23294]"
    }, {
      "left" : "return values;",
      "right" : "return values;",
      "info" : "ReturnStatement[23103-23117]:ReturnStatement[23315-23329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23384-23489]:Block[23596-23701]"
    }, {
      "left" : "if (period != null)",
      "right" : "if (period != null)",
      "info" : "IfStatement[23394-23483]:IfStatement[23606-23695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23414-23483]:Block[23626-23695]"
    }, {
      "left" : "iValues = addPeriodInto(getValues(), period);",
      "right" : "iValues = addPeriodInto(getValues(), period);",
      "info" : "ExpressionStatement[23428-23473]:ExpressionStatement[23640-23685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23855-24463]:Block[24067-24675]"
    }, {
      "left" : "for (int i = 0, isize = period.size(); i < isize; i++)",
      "right" : "for (int i = 0, isize = period.size(); i < isize; i++)",
      "info" : "ForStatement[23866-24433]:ForStatement[24078-24645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23921-24433]:Block[24133-24645]"
    }, {
      "left" : "DurationFieldType type = period.getFieldType(i);",
      "right" : "DurationFieldType type = period.getFieldType(i);",
      "info" : "VariableDeclarationStatement[23936-23984]:VariableDeclarationStatement[24148-24196]"
    }, {
      "left" : "int value = period.getValue(i);",
      "right" : "int value = period.getValue(i);",
      "info" : "VariableDeclarationStatement[23998-24029]:VariableDeclarationStatement[24210-24241]"
    }, {
      "left" : "if (value != 0)",
      "right" : "if (value != 0)",
      "info" : "IfStatement[24043-24422]:IfStatement[24255-24634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24059-24422]:Block[24271-24634]"
    }, {
      "left" : "int index = indexOf(type);",
      "right" : "int index = indexOf(type);",
      "info" : "VariableDeclarationStatement[24078-24104]:VariableDeclarationStatement[24290-24316]"
    }, {
      "left" : "if (index == -1)",
      "right" : "if (index == -1)",
      "info" : "IfStatement[24122-24407]:IfStatement[24334-24619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24139-24300]:Block[24351-24512]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                         \"Period does not support field '\" + type.getName() + \"'\");",
      "right" : "throw new IllegalArgumentException(\n                         \"Period does not support field '\" + type.getName() + \"'\");",
      "info" : "ThrowStatement[24162-24281]:ThrowStatement[24374-24493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24306-24407]:Block[24518-24619]"
    }, {
      "left" : "values[index] = FieldUtils.safeAdd(getValue(index), value);",
      "right" : "values[index] = FieldUtils.safeAdd(getValue(index), value);",
      "info" : "ExpressionStatement[24329-24388]:ExpressionStatement[24541-24600]"
    }, {
      "left" : "return values;",
      "right" : "return values;",
      "info" : "ReturnStatement[24443-24457]:ReturnStatement[24655-24669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24809-24848]:Block[25021-25060]"
    }, {
      "left" : "iValues[index] = value;",
      "right" : "iValues[index] = value;",
      "info" : "ExpressionStatement[24819-24842]:ExpressionStatement[25031-25054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24997-25030]:Block[25209-25242]"
    }, {
      "left" : "iValues = values;",
      "right" : "iValues = values;",
      "info" : "ExpressionStatement[25007-25024]:ExpressionStatement[25219-25236]"
    } ]
  },
  "interFileMappings" : { }
}