{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DateTimeZone",
      "right" : "DateTimeZone",
      "info" : "TypeDeclaration[1575-48533]:TypeDeclaration[1575-48902]"
    }, {
      "left" : "private static final long serialVersionUID = 5546345482340108586L;",
      "right" : "private static final long serialVersionUID = 5546345482340108586L;",
      "info" : "FieldDeclaration[3689-3789]:FieldDeclaration[3689-3789]"
    }, {
      "left" : "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
      "right" : "public static final DateTimeZone UTC = new FixedDateTimeZone(\"UTC\", \"UTC\", 0, 0);",
      "info" : "FieldDeclaration[3795-3932]:FieldDeclaration[3795-3932]"
    }, {
      "left" : "private static Provider cProvider;",
      "right" : "private static Provider cProvider;",
      "info" : "FieldDeclaration[3938-4026]:FieldDeclaration[3938-4026]"
    }, {
      "left" : "private static NameProvider cNameProvider;",
      "right" : "private static NameProvider cNameProvider;",
      "info" : "FieldDeclaration[4031-4132]:FieldDeclaration[4031-4132]"
    }, {
      "left" : "private static Set<String> cAvailableIDs;",
      "right" : "private static Set<String> cAvailableIDs;",
      "info" : "FieldDeclaration[4137-4212]:FieldDeclaration[4137-4212]"
    }, {
      "left" : "private static volatile DateTimeZone cDefault;",
      "right" : "private static volatile DateTimeZone cDefault;",
      "info" : "FieldDeclaration[4217-4297]:FieldDeclaration[4217-4297]"
    }, {
      "left" : "private static DateTimeFormatter cOffsetFormatter;",
      "right" : "private static DateTimeFormatter cOffsetFormatter;",
      "info" : "FieldDeclaration[4302-4407]:FieldDeclaration[4302-4407]"
    }, {
      "left" : "private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;",
      "right" : "private static Map<String, SoftReference<DateTimeZone>> iFixedOffsetCache;",
      "info" : "FieldDeclaration[4413-4570]:FieldDeclaration[4413-4570]"
    }, {
      "left" : "private static Map<String, String> cZoneIdConversion;",
      "right" : "private static Map<String, String> cZoneIdConversion;",
      "info" : "FieldDeclaration[4576-4678]:FieldDeclaration[4576-4678]"
    }, {
      "left" : "public static DateTimeZone getDefault()",
      "right" : "public static DateTimeZone getDefault()",
      "info" : "MethodDeclaration[4842-6534]:MethodDeclaration[4842-6534]"
    }, {
      "left" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
      "right" : "public static void setDefault(DateTimeZone zone) throws SecurityException",
      "info" : "MethodDeclaration[6540-7383]:MethodDeclaration[6540-7383]"
    }, {
      "left" : "public static DateTimeZone forID(String id)",
      "right" : "public static DateTimeZone forID(String id)",
      "info" : "MethodDeclaration[7467-8902]:MethodDeclaration[7467-8902]"
    }, {
      "left" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
      "right" : "public static DateTimeZone forOffsetHours(int hoursOffset) throws IllegalArgumentException",
      "info" : "MethodDeclaration[8908-9493]:MethodDeclaration[8908-9493]"
    }, {
      "left" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
      "right" : "public static DateTimeZone forOffsetHoursMinutes(int hoursOffset, int minutesOffset) throws IllegalArgumentException",
      "info" : "MethodDeclaration[9499-11224]:MethodDeclaration[9499-11224]"
    }, {
      "left" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
      "right" : "public static DateTimeZone forOffsetMillis(int millisOffset)",
      "info" : "MethodDeclaration[11230-11612]:MethodDeclaration[11230-11612]"
    }, {
      "left" : "public static DateTimeZone forTimeZone(TimeZone zone)",
      "right" : "public static DateTimeZone forTimeZone(TimeZone zone)",
      "info" : "MethodDeclaration[11618-13576]:MethodDeclaration[11618-13576]"
    }, {
      "left" : "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset)",
      "right" : "private static synchronized DateTimeZone fixedOffsetZone(String id, int offset)",
      "info" : "MethodDeclaration[13660-14520]:MethodDeclaration[13660-14520]"
    }, {
      "left" : "public static Set<String> getAvailableIDs()",
      "right" : "public static Set<String> getAvailableIDs()",
      "info" : "MethodDeclaration[14526-14725]:MethodDeclaration[14526-14725]"
    }, {
      "left" : "public static Provider getProvider()",
      "right" : "public static Provider getProvider()",
      "info" : "MethodDeclaration[14809-15097]:MethodDeclaration[14809-15097]"
    }, {
      "left" : "public static void setProvider(Provider provider) throws SecurityException",
      "right" : "public static void setProvider(Provider provider) throws SecurityException",
      "info" : "MethodDeclaration[15103-15805]:MethodDeclaration[15103-15805]"
    }, {
      "left" : "private static void setProvider0(Provider provider)",
      "right" : "private static void setProvider0(Provider provider)",
      "info" : "MethodDeclaration[15811-16736]:MethodDeclaration[15811-16736]"
    }, {
      "left" : "private static Provider getDefaultProvider()",
      "right" : "private static Provider getDefaultProvider()",
      "info" : "MethodDeclaration[16742-18153]:MethodDeclaration[16742-18153]"
    }, {
      "left" : "public static NameProvider getNameProvider()",
      "right" : "public static NameProvider getNameProvider()",
      "info" : "MethodDeclaration[18237-18531]:MethodDeclaration[18237-18531]"
    }, {
      "left" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
      "right" : "public static void setNameProvider(NameProvider nameProvider) throws SecurityException",
      "info" : "MethodDeclaration[18537-19265]:MethodDeclaration[18537-19265]"
    }, {
      "left" : "private static void setNameProvider0(NameProvider nameProvider)",
      "right" : "private static void setNameProvider0(NameProvider nameProvider)",
      "info" : "MethodDeclaration[19271-19712]:MethodDeclaration[19271-19712]"
    }, {
      "left" : "private static NameProvider getDefaultNameProvider()",
      "right" : "private static NameProvider getDefaultNameProvider()",
      "info" : "MethodDeclaration[19718-20754]:MethodDeclaration[19718-20754]"
    }, {
      "left" : "private static synchronized String getConvertedId(String id)",
      "right" : "private static synchronized String getConvertedId(String id)",
      "info" : "MethodDeclaration[20838-22811]:MethodDeclaration[20838-22811]"
    }, {
      "left" : "private static int parseOffset(String str)",
      "right" : "private static int parseOffset(String str)",
      "info" : "MethodDeclaration[22817-23510]:MethodDeclaration[22817-23510]"
    }, {
      "left" : "public DateTimeZone getZone()",
      "right" : "public DateTimeZone getZone()",
      "info" : "MethodDeclaration[23052-23126]:MethodDeclaration[23052-23126]"
    }, {
      "left" : "public Chronology withUTC()",
      "right" : "public Chronology withUTC()",
      "info" : "MethodDeclaration[23139-23211]:MethodDeclaration[23139-23211]"
    }, {
      "left" : "public Chronology withZone(DateTimeZone zone)",
      "right" : "public Chronology withZone(DateTimeZone zone)",
      "info" : "MethodDeclaration[23224-23314]:MethodDeclaration[23224-23314]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[23327-23412]:MethodDeclaration[23327-23412]"
    }, {
      "left" : "private static String printOffset(int offset)",
      "right" : "private static String printOffset(int offset)",
      "info" : "MethodDeclaration[23516-24918]:MethodDeclaration[23516-24918]"
    }, {
      "left" : "private static synchronized DateTimeFormatter offsetFormatter()",
      "right" : "private static synchronized DateTimeFormatter offsetFormatter()",
      "info" : "MethodDeclaration[24924-25349]:MethodDeclaration[24924-25349]"
    }, {
      "left" : "private final String iID;",
      "right" : "private final String iID;",
      "info" : "FieldDeclaration[25466-25491]:FieldDeclaration[25466-25491]"
    }, {
      "left" : "protected DateTimeZone(String id)",
      "right" : "protected DateTimeZone(String id)",
      "info" : "MethodDeclaration[25497-25797]:MethodDeclaration[25497-25797]"
    }, {
      "left" : "public final String getID()",
      "right" : "public final String getID()",
      "info" : "MethodDeclaration[25904-26083]:MethodDeclaration[25904-26083]"
    }, {
      "left" : "public abstract String getNameKey(long instant);",
      "right" : "public abstract String getNameKey(long instant);",
      "info" : "MethodDeclaration[26089-26460]:MethodDeclaration[26089-26460]"
    }, {
      "left" : "public final String getShortName(long instant)",
      "right" : "public final String getShortName(long instant)",
      "info" : "MethodDeclaration[26466-26982]:MethodDeclaration[26466-26982]"
    }, {
      "left" : "public String getShortName(long instant, Locale locale)",
      "right" : "public String getShortName(long instant, Locale locale)",
      "info" : "MethodDeclaration[26988-27902]:MethodDeclaration[26988-27902]"
    }, {
      "left" : "public final String getName(long instant)",
      "right" : "public final String getName(long instant)",
      "info" : "MethodDeclaration[27908-28412]:MethodDeclaration[27908-28412]"
    }, {
      "left" : "public String getName(long instant, Locale locale)",
      "right" : "public String getName(long instant, Locale locale)",
      "info" : "MethodDeclaration[28418-29320]:MethodDeclaration[28418-29320]"
    }, {
      "left" : "public abstract int getOffset(long instant);",
      "right" : "public abstract int getOffset(long instant);",
      "info" : "MethodDeclaration[29326-29616]:MethodDeclaration[29326-29616]"
    }, {
      "left" : "public final int getOffset(ReadableInstant instant)",
      "right" : "public final int getOffset(ReadableInstant instant)",
      "info" : "MethodDeclaration[29622-30065]:MethodDeclaration[29622-30065]"
    }, {
      "left" : "public abstract int getStandardOffset(long instant);",
      "right" : "public abstract int getStandardOffset(long instant);",
      "info" : "MethodDeclaration[30071-30418]:MethodDeclaration[30071-30418]"
    }, {
      "left" : "public boolean isStandardOffset(long instant)",
      "right" : "public boolean isStandardOffset(long instant)",
      "info" : "MethodDeclaration[30424-31293]:MethodDeclaration[30424-31293]"
    }, {
      "left" : "public int getOffsetFromLocal(long instantLocal)",
      "right" : "public int getOffsetFromLocal(long instantLocal)",
      "info" : "MethodDeclaration[31299-34080]:MethodDeclaration[31299-34449]"
    }, {
      "left" : "public long convertUTCToLocal(long instantUTC)",
      "right" : "public long convertUTCToLocal(long instantUTC)",
      "info" : "MethodDeclaration[34086-34958]:MethodDeclaration[34455-35327]"
    }, {
      "left" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
      "right" : "public long convertLocalToUTC(long instantLocal, boolean strict, long originalInstantUTC)",
      "info" : "MethodDeclaration[34964-36300]:MethodDeclaration[35333-36669]"
    }, {
      "left" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
      "right" : "public long convertLocalToUTC(long instantLocal, boolean strict)",
      "info" : "MethodDeclaration[36306-39265]:MethodDeclaration[36675-39634]"
    }, {
      "left" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
      "right" : "public long getMillisKeepLocal(DateTimeZone newZone, long oldInstant)",
      "info" : "MethodDeclaration[39271-40129]:MethodDeclaration[39640-40498]"
    }, {
      "left" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
      "right" : "public boolean isLocalDateTimeGap(LocalDateTime localDateTime)",
      "info" : "MethodDeclaration[44642-45382]:MethodDeclaration[45011-45751]"
    }, {
      "left" : "public abstract boolean isFixed();",
      "right" : "public abstract boolean isFixed();",
      "info" : "MethodDeclaration[45466-45619]:MethodDeclaration[45835-45988]"
    }, {
      "left" : "public abstract long nextTransition(long instant);",
      "right" : "public abstract long nextTransition(long instant);",
      "info" : "MethodDeclaration[45625-46014]:MethodDeclaration[45994-46383]"
    }, {
      "left" : "public abstract long previousTransition(long instant);",
      "right" : "public abstract long previousTransition(long instant);",
      "info" : "MethodDeclaration[46020-46414]:MethodDeclaration[46389-46783]"
    }, {
      "left" : "public java.util.TimeZone toTimeZone()",
      "right" : "public java.util.TimeZone toTimeZone()",
      "info" : "MethodDeclaration[46517-46753]:MethodDeclaration[46886-47122]"
    }, {
      "left" : "public abstract boolean equals(Object object);",
      "right" : "public abstract boolean equals(Object object);",
      "info" : "MethodDeclaration[46759-46994]:MethodDeclaration[47128-47363]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[47000-47174]:MethodDeclaration[47369-47543]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[47180-47353]:MethodDeclaration[47549-47722]"
    }, {
      "left" : "protected Object writeReplace() throws ObjectStreamException",
      "right" : "protected Object writeReplace() throws ObjectStreamException",
      "info" : "MethodDeclaration[47359-47720]:MethodDeclaration[47728-48089]"
    }, {
      "left" : "Stub",
      "right" : "Stub",
      "info" : "TypeDeclaration[47726-48531]:TypeDeclaration[48095-48900]"
    }, {
      "left" : "private static final long serialVersionUID = -6471952376487863581L;",
      "right" : "private static final long serialVersionUID = -6471952376487863581L;",
      "info" : "FieldDeclaration[47854-47956]:FieldDeclaration[48223-48325]"
    }, {
      "left" : "private transient String iID;",
      "right" : "private transient String iID;",
      "info" : "FieldDeclaration[47965-48029]:FieldDeclaration[48334-48398]"
    }, {
      "left" : "Stub(String id)",
      "right" : "Stub(String id)",
      "info" : "MethodDeclaration[48039-48177]:MethodDeclaration[48408-48546]"
    }, {
      "left" : "private void writeObject(ObjectOutputStream out) throws IOException",
      "right" : "private void writeObject(ObjectOutputStream out) throws IOException",
      "info" : "MethodDeclaration[48187-48297]:MethodDeclaration[48556-48666]"
    }, {
      "left" : "private void readObject(ObjectInputStream in) throws IOException",
      "right" : "private void readObject(ObjectInputStream in) throws IOException",
      "info" : "MethodDeclaration[48307-48415]:MethodDeclaration[48676-48784]"
    }, {
      "left" : "private Object readResolve() throws ObjectStreamException",
      "right" : "private Object readResolve() throws ObjectStreamException",
      "info" : "MethodDeclaration[48425-48525]:MethodDeclaration[48794-48894]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5419-6534]:Block[5419-6534]"
    }, {
      "left" : "DateTimeZone zone = cDefault;",
      "right" : "DateTimeZone zone = cDefault;",
      "info" : "VariableDeclarationStatement[5429-5458]:VariableDeclarationStatement[5429-5458]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[5467-6507]:IfStatement[5467-6507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5485-6507]:Block[5485-6507]"
    }, {
      "left" : "synchronized(DateTimeZone.class) {\n                zone = cDefault;\n                if (zone == null) {\n                    DateTimeZone temp = null;\n                    try {\n                        try {\n                            String id = System.getProperty(\"user.timezone\");\n                            if (id != null) {  // null check avoids stack overflow\n                                temp = forID(id);\n                            }\n                        } catch (RuntimeException ex) {\n                            // ignored\n                        }\n                        if (temp == null) {\n                            temp = forTimeZone(TimeZone.getDefault());\n                        }\n                    } catch (IllegalArgumentException ex) {\n                        // ignored\n                    }\n                    if (temp == null) {\n                        temp = UTC;\n                    }\n                    cDefault = zone = temp;\n                }\n            }",
      "right" : "synchronized(DateTimeZone.class) {\n                zone = cDefault;\n                if (zone == null) {\n                    DateTimeZone temp = null;\n                    try {\n                        try {\n                            String id = System.getProperty(\"user.timezone\");\n                            if (id != null) {  // null check avoids stack overflow\n                                temp = forID(id);\n                            }\n                        } catch (RuntimeException ex) {\n                            // ignored\n                        }\n                        if (temp == null) {\n                            temp = forTimeZone(TimeZone.getDefault());\n                        }\n                    } catch (IllegalArgumentException ex) {\n                        // ignored\n                    }\n                    if (temp == null) {\n                        temp = UTC;\n                    }\n                    cDefault = zone = temp;\n                }\n            }",
      "info" : "SynchronizedStatement[5499-6497]:SynchronizedStatement[5499-6497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5532-6497]:Block[5532-6497]"
    }, {
      "left" : "zone = cDefault;",
      "right" : "zone = cDefault;",
      "info" : "ExpressionStatement[5550-5566]:ExpressionStatement[5550-5566]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[5583-6483]:IfStatement[5583-6483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5601-6483]:Block[5601-6483]"
    }, {
      "left" : "DateTimeZone temp = null;",
      "right" : "DateTimeZone temp = null;",
      "info" : "VariableDeclarationStatement[5623-5648]:VariableDeclarationStatement[5623-5648]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5669-6323]:TryStatement[5669-6323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5673-6228]:Block[5673-6228]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5699-6065]:TryStatement[5699-6065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5703-5970]:Block[5703-5970]"
    }, {
      "left" : "String id = System.getProperty(\"user.timezone\");",
      "right" : "String id = System.getProperty(\"user.timezone\");",
      "info" : "VariableDeclarationStatement[5733-5781]:VariableDeclarationStatement[5733-5781]"
    }, {
      "left" : "if (id != null)",
      "right" : "if (id != null)",
      "info" : "IfStatement[5810-5944]:IfStatement[5810-5944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5826-5944]:Block[5826-5944]"
    }, {
      "left" : "temp = forID(id);",
      "right" : "temp = forID(id);",
      "info" : "ExpressionStatement[5897-5914]:ExpressionStatement[5897-5914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5999-6065]:Block[5999-6065]"
    }, {
      "left" : "if (temp == null)",
      "right" : "if (temp == null)",
      "info" : "IfStatement[6090-6206]:IfStatement[6090-6206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6108-6206]:Block[6108-6206]"
    }, {
      "left" : "temp = forTimeZone(TimeZone.getDefault());",
      "right" : "temp = forTimeZone(TimeZone.getDefault());",
      "info" : "ExpressionStatement[6138-6180]:ExpressionStatement[6138-6180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6265-6323]:Block[6265-6323]"
    }, {
      "left" : "if (temp == null)",
      "right" : "if (temp == null)",
      "info" : "IfStatement[6344-6421]:IfStatement[6344-6421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6362-6421]:Block[6362-6421]"
    }, {
      "left" : "temp = UTC;",
      "right" : "temp = UTC;",
      "info" : "ExpressionStatement[6388-6399]:ExpressionStatement[6388-6399]"
    }, {
      "left" : "cDefault = zone = temp;",
      "right" : "cDefault = zone = temp;",
      "info" : "ExpressionStatement[6442-6465]:ExpressionStatement[6442-6465]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[6516-6528]:ReturnStatement[6516-6528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6993-7383]:Block[6993-7383]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[7003-7052]:VariableDeclarationStatement[7003-7052]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[7061-7171]:IfStatement[7061-7171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7077-7171]:Block[7077-7171]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setDefault\"));",
      "info" : "ExpressionStatement[7091-7161]:ExpressionStatement[7091-7161]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[7180-7295]:IfStatement[7180-7295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7198-7295]:Block[7198-7295]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone must not be null\");",
      "info" : "ThrowStatement[7212-7285]:ThrowStatement[7212-7285]"
    }, {
      "left" : "synchronized(DateTimeZone.class) {\n            cDefault = zone;\n        }",
      "right" : "synchronized(DateTimeZone.class) {\n            cDefault = zone;\n        }",
      "info" : "SynchronizedStatement[7304-7377]:SynchronizedStatement[7304-7377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7337-7377]:Block[7337-7377]"
    }, {
      "left" : "cDefault = zone;",
      "right" : "cDefault = zone;",
      "info" : "ExpressionStatement[7351-7367]:ExpressionStatement[7351-7367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8224-8902]:Block[8224-8902]"
    }, {
      "left" : "if (id == null)",
      "right" : "if (id == null)",
      "info" : "IfStatement[8234-8294]:IfStatement[8234-8294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8250-8294]:Block[8250-8294]"
    }, {
      "left" : "return getDefault();",
      "right" : "return getDefault();",
      "info" : "ReturnStatement[8264-8284]:ReturnStatement[8264-8284]"
    }, {
      "left" : "if (id.equals(\"UTC\"))",
      "right" : "if (id.equals(\"UTC\"))",
      "info" : "IfStatement[8303-8373]:IfStatement[8303-8373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8325-8373]:Block[8325-8373]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[8339-8363]:ReturnStatement[8339-8363]"
    }, {
      "left" : "DateTimeZone zone = cProvider.getZone(id);",
      "right" : "DateTimeZone zone = cProvider.getZone(id);",
      "info" : "VariableDeclarationStatement[8382-8424]:VariableDeclarationStatement[8382-8424]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[8433-8487]:IfStatement[8433-8487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8451-8487]:Block[8451-8487]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[8465-8477]:ReturnStatement[8465-8477]"
    }, {
      "left" : "if (id.startsWith(\"+\") || id.startsWith(\"-\"))",
      "right" : "if (id.startsWith(\"+\") || id.startsWith(\"-\"))",
      "info" : "IfStatement[8496-8797]:IfStatement[8496-8797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8542-8797]:Block[8542-8797]"
    }, {
      "left" : "int offset = parseOffset(id);",
      "right" : "int offset = parseOffset(id);",
      "info" : "VariableDeclarationStatement[8556-8585]:VariableDeclarationStatement[8556-8585]"
    }, {
      "left" : "if (offset == 0L)",
      "right" : "if (offset == 0L)",
      "info" : "IfStatement[8598-8787]:IfStatement[8598-8787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8616-8672]:Block[8616-8672]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[8634-8658]:ReturnStatement[8634-8658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8678-8787]:Block[8678-8787]"
    }, {
      "left" : "id = printOffset(offset);",
      "right" : "id = printOffset(offset);",
      "info" : "ExpressionStatement[8696-8721]:ExpressionStatement[8696-8721]"
    }, {
      "left" : "return fixedOffsetZone(id, offset);",
      "right" : "return fixedOffsetZone(id, offset);",
      "info" : "ReturnStatement[8738-8773]:ReturnStatement[8738-8773]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "info" : "ThrowStatement[8806-8896]:ThrowStatement[8806-8896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9432-9493]:Block[9432-9493]"
    }, {
      "left" : "return forOffsetHoursMinutes(hoursOffset, 0);",
      "right" : "return forOffsetHoursMinutes(hoursOffset, 0);",
      "info" : "ReturnStatement[9442-9487]:ReturnStatement[9442-9487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10346-11224]:Block[10346-11224]"
    }, {
      "left" : "if (hoursOffset == 0 && minutesOffset == 0)",
      "right" : "if (hoursOffset == 0 && minutesOffset == 0)",
      "info" : "IfStatement[10356-10448]:IfStatement[10356-10448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10400-10448]:Block[10400-10448]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[10414-10438]:ReturnStatement[10414-10438]"
    }, {
      "left" : "if (minutesOffset < 0 || minutesOffset > 59)",
      "right" : "if (minutesOffset < 0 || minutesOffset > 59)",
      "info" : "IfStatement[10457-10603]:IfStatement[10457-10603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10502-10603]:Block[10502-10603]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
      "right" : "throw new IllegalArgumentException(\"Minutes out of range: \" + minutesOffset);",
      "info" : "ThrowStatement[10516-10593]:ThrowStatement[10516-10593]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[10612-10627]:VariableDeclarationStatement[10612-10627]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10636-11178]:TryStatement[10636-11178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10640-11064]:Block[10640-11064]"
    }, {
      "left" : "int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",
      "right" : "int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);",
      "info" : "VariableDeclarationStatement[10654-10716]:VariableDeclarationStatement[10654-10716]"
    }, {
      "left" : "if (hoursInMinutes < 0)",
      "right" : "if (hoursInMinutes < 0)",
      "info" : "IfStatement[10729-10956]:IfStatement[10729-10956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10753-10852]:Block[10753-10852]"
    }, {
      "left" : "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",
      "right" : "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, -minutesOffset);",
      "info" : "ExpressionStatement[10771-10838]:ExpressionStatement[10771-10838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10858-10956]:Block[10858-10956]"
    }, {
      "left" : "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",
      "right" : "minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);",
      "info" : "ExpressionStatement[10876-10942]:ExpressionStatement[10876-10942]"
    }, {
      "left" : "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
      "right" : "offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);",
      "info" : "ExpressionStatement[10969-11054]:ExpressionStatement[10969-11054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11096-11178]:Block[11096-11178]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Offset is too large\");",
      "right" : "throw new IllegalArgumentException(\"Offset is too large\");",
      "info" : "ThrowStatement[11110-11168]:ThrowStatement[11110-11168]"
    }, {
      "left" : "return forOffsetMillis(offset);",
      "right" : "return forOffsetMillis(offset);",
      "info" : "ReturnStatement[11187-11218]:ReturnStatement[11187-11218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11508-11612]:Block[11508-11612]"
    }, {
      "left" : "String id = printOffset(millisOffset);",
      "right" : "String id = printOffset(millisOffset);",
      "info" : "VariableDeclarationStatement[11518-11556]:VariableDeclarationStatement[11518-11556]"
    }, {
      "left" : "return fixedOffsetZone(id, millisOffset);",
      "right" : "return fixedOffsetZone(id, millisOffset);",
      "info" : "ReturnStatement[11565-11606]:ReturnStatement[11565-11606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12352-13576]:Block[12352-13576]"
    }, {
      "left" : "if (zone == null)",
      "right" : "if (zone == null)",
      "info" : "IfStatement[12362-12424]:IfStatement[12362-12424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12380-12424]:Block[12380-12424]"
    }, {
      "left" : "return getDefault();",
      "right" : "return getDefault();",
      "info" : "ReturnStatement[12394-12414]:ReturnStatement[12394-12414]"
    }, {
      "left" : "final String id = zone.getID();",
      "right" : "final String id = zone.getID();",
      "info" : "VariableDeclarationStatement[12433-12464]:VariableDeclarationStatement[12433-12464]"
    }, {
      "left" : "if (id.equals(\"UTC\"))",
      "right" : "if (id.equals(\"UTC\"))",
      "info" : "IfStatement[12473-12543]:IfStatement[12473-12543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12495-12543]:Block[12495-12543]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[12509-12533]:ReturnStatement[12509-12533]"
    }, {
      "left" : "DateTimeZone dtz = null;",
      "right" : "DateTimeZone dtz = null;",
      "info" : "VariableDeclarationStatement[12637-12661]:VariableDeclarationStatement[12637-12661]"
    }, {
      "left" : "String convId = getConvertedId(id);",
      "right" : "String convId = getConvertedId(id);",
      "info" : "VariableDeclarationStatement[12670-12705]:VariableDeclarationStatement[12670-12705]"
    }, {
      "left" : "if (convId != null)",
      "right" : "if (convId != null)",
      "info" : "IfStatement[12714-12790]:IfStatement[12714-12790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12734-12790]:Block[12734-12790]"
    }, {
      "left" : "dtz = cProvider.getZone(convId);",
      "right" : "dtz = cProvider.getZone(convId);",
      "info" : "ExpressionStatement[12748-12780]:ExpressionStatement[12748-12780]"
    }, {
      "left" : "if (dtz == null)",
      "right" : "if (dtz == null)",
      "info" : "IfStatement[12799-12868]:IfStatement[12799-12868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12816-12868]:Block[12816-12868]"
    }, {
      "left" : "dtz = cProvider.getZone(id);",
      "right" : "dtz = cProvider.getZone(id);",
      "info" : "ExpressionStatement[12830-12858]:ExpressionStatement[12830-12858]"
    }, {
      "left" : "if (dtz != null)",
      "right" : "if (dtz != null)",
      "info" : "IfStatement[12877-12929]:IfStatement[12877-12929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12894-12929]:Block[12894-12929]"
    }, {
      "left" : "return dtz;",
      "right" : "return dtz;",
      "info" : "ReturnStatement[12908-12919]:ReturnStatement[12908-12919]"
    }, {
      "left" : "if (convId == null)",
      "right" : "if (convId == null)",
      "info" : "IfStatement[12978-13471]:IfStatement[12978-13471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12998-13471]:Block[12998-13471]"
    }, {
      "left" : "convId = zone.getDisplayName();",
      "right" : "convId = zone.getDisplayName();",
      "info" : "ExpressionStatement[13012-13043]:ExpressionStatement[13012-13043]"
    }, {
      "left" : "if (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\"))",
      "right" : "if (convId.startsWith(\"GMT+\") || convId.startsWith(\"GMT-\"))",
      "info" : "IfStatement[13056-13461]:IfStatement[13056-13461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13116-13461]:Block[13116-13461]"
    }, {
      "left" : "convId = convId.substring(3);",
      "right" : "convId = convId.substring(3);",
      "info" : "ExpressionStatement[13134-13163]:ExpressionStatement[13134-13163]"
    }, {
      "left" : "int offset = parseOffset(convId);",
      "right" : "int offset = parseOffset(convId);",
      "info" : "VariableDeclarationStatement[13180-13213]:VariableDeclarationStatement[13180-13213]"
    }, {
      "left" : "if (offset == 0L)",
      "right" : "if (offset == 0L)",
      "info" : "IfStatement[13230-13447]:IfStatement[13230-13447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13248-13312]:Block[13248-13312]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[13270-13294]:ReturnStatement[13270-13294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13318-13447]:Block[13318-13447]"
    }, {
      "left" : "convId = printOffset(offset);",
      "right" : "convId = printOffset(offset);",
      "info" : "ExpressionStatement[13340-13369]:ExpressionStatement[13340-13369]"
    }, {
      "left" : "return fixedOffsetZone(convId, offset);",
      "right" : "return fixedOffsetZone(convId, offset);",
      "info" : "ReturnStatement[13390-13429]:ReturnStatement[13390-13429]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "right" : "throw new IllegalArgumentException(\"The datetime zone id '\" + id + \"' is not recognised\");",
      "info" : "ThrowStatement[13480-13570]:ThrowStatement[13480-13570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13911-14520]:Block[13911-14520]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[13921-13986]:IfStatement[13921-13986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13938-13986]:Block[13938-13986]"
    }, {
      "left" : "return DateTimeZone.UTC;",
      "right" : "return DateTimeZone.UTC;",
      "info" : "ReturnStatement[13952-13976]:ReturnStatement[13952-13976]"
    }, {
      "left" : "if (iFixedOffsetCache == null)",
      "right" : "if (iFixedOffsetCache == null)",
      "info" : "IfStatement[13995-14121]:IfStatement[13995-14121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14026-14121]:Block[14026-14121]"
    }, {
      "left" : "iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",
      "right" : "iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();",
      "info" : "ExpressionStatement[14040-14111]:ExpressionStatement[14040-14111]"
    }, {
      "left" : "DateTimeZone zone;",
      "right" : "DateTimeZone zone;",
      "info" : "VariableDeclarationStatement[14130-14148]:VariableDeclarationStatement[14130-14148]"
    }, {
      "left" : "Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);",
      "right" : "Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);",
      "info" : "VariableDeclarationStatement[14157-14213]:VariableDeclarationStatement[14157-14213]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[14222-14355]:IfStatement[14222-14355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14239-14355]:Block[14239-14355]"
    }, {
      "left" : "zone = ref.get();",
      "right" : "zone = ref.get();",
      "info" : "ExpressionStatement[14253-14270]:ExpressionStatement[14253-14270]"
    }, {
      "left" : "if (zone != null)",
      "right" : "if (zone != null)",
      "info" : "IfStatement[14283-14345]:IfStatement[14283-14345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14301-14345]:Block[14301-14345]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[14319-14331]:ReturnStatement[14319-14331]"
    }, {
      "left" : "zone = new FixedDateTimeZone(id, null, offset, offset);",
      "right" : "zone = new FixedDateTimeZone(id, null, offset, offset);",
      "info" : "ExpressionStatement[14364-14419]:ExpressionStatement[14364-14419]"
    }, {
      "left" : "iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",
      "right" : "iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));",
      "info" : "ExpressionStatement[14428-14493]:ExpressionStatement[14428-14493]"
    }, {
      "left" : "return zone;",
      "right" : "return zone;",
      "info" : "ReturnStatement[14502-14514]:ReturnStatement[14502-14514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14688-14725]:Block[14688-14725]"
    }, {
      "left" : "return cAvailableIDs;",
      "right" : "return cAvailableIDs;",
      "info" : "ReturnStatement[14698-14719]:ReturnStatement[14698-14719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15064-15097]:Block[15064-15097]"
    }, {
      "left" : "return cProvider;",
      "right" : "return cProvider;",
      "info" : "ReturnStatement[15074-15091]:ReturnStatement[15074-15091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15588-15805]:Block[15588-15805]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[15598-15647]:VariableDeclarationStatement[15598-15647]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[15656-15767]:IfStatement[15656-15767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15672-15767]:Block[15672-15767]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setProvider\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setProvider\"));",
      "info" : "ExpressionStatement[15686-15757]:ExpressionStatement[15686-15757]"
    }, {
      "left" : "setProvider0(provider);",
      "right" : "setProvider0(provider);",
      "info" : "ExpressionStatement[15776-15799]:ExpressionStatement[15776-15799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16092-16736]:Block[16092-16736]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[16102-16180]:IfStatement[16102-16180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16124-16180]:Block[16124-16180]"
    }, {
      "left" : "provider = getDefaultProvider();",
      "right" : "provider = getDefaultProvider();",
      "info" : "ExpressionStatement[16138-16170]:ExpressionStatement[16138-16170]"
    }, {
      "left" : "Set<String> ids = provider.getAvailableIDs();",
      "right" : "Set<String> ids = provider.getAvailableIDs();",
      "info" : "VariableDeclarationStatement[16189-16234]:VariableDeclarationStatement[16189-16234]"
    }, {
      "left" : "if (ids == null || ids.size() == 0)",
      "right" : "if (ids == null || ids.size() == 0)",
      "info" : "IfStatement[16243-16402]:IfStatement[16243-16402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16279-16402]:Block[16279-16402]"
    }, {
      "left" : "throw new IllegalArgumentException\n                (\"The provider doesn't have any available ids\");",
      "right" : "throw new IllegalArgumentException\n                (\"The provider doesn't have any available ids\");",
      "info" : "ThrowStatement[16293-16392]:ThrowStatement[16293-16392]"
    }, {
      "left" : "if (!ids.contains(\"UTC\"))",
      "right" : "if (!ids.contains(\"UTC\"))",
      "info" : "IfStatement[16411-16532]:IfStatement[16411-16532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16437-16532]:Block[16437-16532]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The provider doesn't support UTC\");",
      "right" : "throw new IllegalArgumentException(\"The provider doesn't support UTC\");",
      "info" : "ThrowStatement[16451-16522]:ThrowStatement[16451-16522]"
    }, {
      "left" : "if (!UTC.equals(provider.getZone(\"UTC\")))",
      "right" : "if (!UTC.equals(provider.getZone(\"UTC\")))",
      "info" : "IfStatement[16541-16671]:IfStatement[16541-16671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16583-16671]:Block[16583-16671]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid UTC zone provided\");",
      "right" : "throw new IllegalArgumentException(\"Invalid UTC zone provided\");",
      "info" : "ThrowStatement[16597-16661]:ThrowStatement[16597-16661]"
    }, {
      "left" : "cProvider = provider;",
      "right" : "cProvider = provider;",
      "info" : "ExpressionStatement[16680-16701]:ExpressionStatement[16680-16701]"
    }, {
      "left" : "cAvailableIDs = ids;",
      "right" : "cAvailableIDs = ids;",
      "info" : "ExpressionStatement[16710-16730]:ExpressionStatement[16710-16730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17132-18153]:Block[17132-18153]"
    }, {
      "left" : "Provider provider = null;",
      "right" : "Provider provider = null;",
      "info" : "VariableDeclarationStatement[17142-17167]:VariableDeclarationStatement[17142-17167]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17177-17723]:TryStatement[17177-17723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17181-17659]:Block[17181-17659]"
    }, {
      "left" : "String providerClass =\n                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");",
      "right" : "String providerClass =\n                System.getProperty(\"org.joda.time.DateTimeZone.Provider\");",
      "info" : "VariableDeclarationStatement[17195-17292]:VariableDeclarationStatement[17195-17292]"
    }, {
      "left" : "if (providerClass != null)",
      "right" : "if (providerClass != null)",
      "info" : "IfStatement[17305-17649]:IfStatement[17305-17649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17332-17649]:Block[17332-17649]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17350-17635]:TryStatement[17350-17635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17354-17459]:Block[17354-17459]"
    }, {
      "left" : "provider = (Provider) Class.forName(providerClass).newInstance();",
      "right" : "provider = (Provider) Class.forName(providerClass).newInstance();",
      "info" : "ExpressionStatement[17376-17441]:ExpressionStatement[17376-17441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17481-17635]:Block[17481-17635]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[17503-17542]:VariableDeclarationStatement[17503-17542]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[17563-17617]:ExpressionStatement[17563-17617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17689-17723]:Block[17689-17723]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[17733-18036]:IfStatement[17733-18036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17755-18036]:Block[17755-18036]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[17769-18026]:TryStatement[17769-18026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17773-17862]:Block[17773-17862]"
    }, {
      "left" : "provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");",
      "right" : "provider = new ZoneInfoProvider(\"org/joda/time/tz/data\");",
      "info" : "ExpressionStatement[17791-17848]:ExpressionStatement[17791-17848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17884-18026]:Block[17884-18026]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[17902-17941]:VariableDeclarationStatement[17902-17941]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[17958-18012]:ExpressionStatement[17958-18012]"
    }, {
      "left" : "if (provider == null)",
      "right" : "if (provider == null)",
      "info" : "IfStatement[18046-18121]:IfStatement[18046-18121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18068-18121]:Block[18068-18121]"
    }, {
      "left" : "provider = new UTCProvider();",
      "right" : "provider = new UTCProvider();",
      "info" : "ExpressionStatement[18082-18111]:ExpressionStatement[18082-18111]"
    }, {
      "left" : "return provider;",
      "right" : "return provider;",
      "info" : "ReturnStatement[18131-18147]:ReturnStatement[18131-18147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18494-18531]:Block[18494-18531]"
    }, {
      "left" : "return cNameProvider;",
      "right" : "return cNameProvider;",
      "info" : "ReturnStatement[18504-18525]:ReturnStatement[18504-18525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19036-19265]:Block[19036-19265]"
    }, {
      "left" : "SecurityManager sm = System.getSecurityManager();",
      "right" : "SecurityManager sm = System.getSecurityManager();",
      "info" : "VariableDeclarationStatement[19046-19095]:VariableDeclarationStatement[19046-19095]"
    }, {
      "left" : "if (sm != null)",
      "right" : "if (sm != null)",
      "info" : "IfStatement[19104-19219]:IfStatement[19104-19219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19120-19219]:Block[19120-19219]"
    }, {
      "left" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
      "right" : "sm.checkPermission(new JodaTimePermission(\"DateTimeZone.setNameProvider\"));",
      "info" : "ExpressionStatement[19134-19209]:ExpressionStatement[19134-19209]"
    }, {
      "left" : "setNameProvider0(nameProvider);",
      "right" : "setNameProvider0(nameProvider);",
      "info" : "ExpressionStatement[19228-19259]:ExpressionStatement[19228-19259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19568-19712]:Block[19568-19712]"
    }, {
      "left" : "if (nameProvider == null)",
      "right" : "if (nameProvider == null)",
      "info" : "IfStatement[19578-19668]:IfStatement[19578-19668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19604-19668]:Block[19604-19668]"
    }, {
      "left" : "nameProvider = getDefaultNameProvider();",
      "right" : "nameProvider = getDefaultNameProvider();",
      "info" : "ExpressionStatement[19618-19658]:ExpressionStatement[19618-19658]"
    }, {
      "left" : "cNameProvider = nameProvider;",
      "right" : "cNameProvider = nameProvider;",
      "info" : "ExpressionStatement[19677-19706]:ExpressionStatement[19677-19706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20024-20754]:Block[20024-20754]"
    }, {
      "left" : "NameProvider nameProvider = null;",
      "right" : "NameProvider nameProvider = null;",
      "info" : "VariableDeclarationStatement[20034-20067]:VariableDeclarationStatement[20034-20067]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20076-20617]:TryStatement[20076-20617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20080-20554]:Block[20080-20554]"
    }, {
      "left" : "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
      "right" : "String providerClass = System.getProperty(\"org.joda.time.DateTimeZone.NameProvider\");",
      "info" : "VariableDeclarationStatement[20094-20179]:VariableDeclarationStatement[20094-20179]"
    }, {
      "left" : "if (providerClass != null)",
      "right" : "if (providerClass != null)",
      "info" : "IfStatement[20192-20544]:IfStatement[20192-20544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20219-20544]:Block[20219-20544]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[20237-20530]:TryStatement[20237-20530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20241-20354]:Block[20241-20354]"
    }, {
      "left" : "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
      "right" : "nameProvider = (NameProvider) Class.forName(providerClass).newInstance();",
      "info" : "ExpressionStatement[20263-20336]:ExpressionStatement[20263-20336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20376-20530]:Block[20376-20530]"
    }, {
      "left" : "Thread thread = Thread.currentThread();",
      "right" : "Thread thread = Thread.currentThread();",
      "info" : "VariableDeclarationStatement[20398-20437]:VariableDeclarationStatement[20398-20437]"
    }, {
      "left" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "right" : "thread.getThreadGroup().uncaughtException(thread, ex);",
      "info" : "ExpressionStatement[20458-20512]:ExpressionStatement[20458-20512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20584-20617]:Block[20584-20617]"
    }, {
      "left" : "if (nameProvider == null)",
      "right" : "if (nameProvider == null)",
      "info" : "IfStatement[20627-20718]:IfStatement[20627-20718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20653-20718]:Block[20653-20718]"
    }, {
      "left" : "nameProvider = new DefaultNameProvider();",
      "right" : "nameProvider = new DefaultNameProvider();",
      "info" : "ExpressionStatement[20667-20708]:ExpressionStatement[20667-20708]"
    }, {
      "left" : "return nameProvider;",
      "right" : "return nameProvider;",
      "info" : "ReturnStatement[20728-20748]:ReturnStatement[20728-20748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21060-22811]:Block[21060-22811]"
    }, {
      "left" : "Map<String, String> map = cZoneIdConversion;",
      "right" : "Map<String, String> map = cZoneIdConversion;",
      "info" : "VariableDeclarationStatement[21070-21114]:VariableDeclarationStatement[21070-21114]"
    }, {
      "left" : "if (map == null)",
      "right" : "if (map == null)",
      "info" : "IfStatement[21123-22777]:IfStatement[21123-22777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21140-22777]:Block[21140-22777]"
    }, {
      "left" : "map = new HashMap<String, String>();",
      "right" : "map = new HashMap<String, String>();",
      "info" : "ExpressionStatement[21208-21244]:ExpressionStatement[21208-21244]"
    }, {
      "left" : "map.put(\"GMT\", \"UTC\");",
      "right" : "map.put(\"GMT\", \"UTC\");",
      "info" : "ExpressionStatement[21257-21279]:ExpressionStatement[21257-21279]"
    }, {
      "left" : "map.put(\"MIT\", \"Pacific/Apia\");",
      "right" : "map.put(\"MIT\", \"Pacific/Apia\");",
      "info" : "ExpressionStatement[21292-21323]:ExpressionStatement[21292-21323]"
    }, {
      "left" : "map.put(\"HST\", \"Pacific/Honolulu\");",
      "right" : "map.put(\"HST\", \"Pacific/Honolulu\");",
      "info" : "ExpressionStatement[21336-21371]:ExpressionStatement[21336-21371]"
    }, {
      "left" : "map.put(\"AST\", \"America/Anchorage\");",
      "right" : "map.put(\"AST\", \"America/Anchorage\");",
      "info" : "ExpressionStatement[21384-21420]:ExpressionStatement[21384-21420]"
    }, {
      "left" : "map.put(\"PST\", \"America/Los_Angeles\");",
      "right" : "map.put(\"PST\", \"America/Los_Angeles\");",
      "info" : "ExpressionStatement[21433-21471]:ExpressionStatement[21433-21471]"
    }, {
      "left" : "map.put(\"MST\", \"America/Denver\");",
      "right" : "map.put(\"MST\", \"America/Denver\");",
      "info" : "ExpressionStatement[21484-21517]:ExpressionStatement[21484-21517]"
    }, {
      "left" : "map.put(\"PNT\", \"America/Phoenix\");",
      "right" : "map.put(\"PNT\", \"America/Phoenix\");",
      "info" : "ExpressionStatement[21530-21564]:ExpressionStatement[21530-21564]"
    }, {
      "left" : "map.put(\"CST\", \"America/Chicago\");",
      "right" : "map.put(\"CST\", \"America/Chicago\");",
      "info" : "ExpressionStatement[21577-21611]:ExpressionStatement[21577-21611]"
    }, {
      "left" : "map.put(\"EST\", \"America/New_York\");",
      "right" : "map.put(\"EST\", \"America/New_York\");",
      "info" : "ExpressionStatement[21624-21659]:ExpressionStatement[21624-21659]"
    }, {
      "left" : "map.put(\"IET\", \"America/Indianapolis\");",
      "right" : "map.put(\"IET\", \"America/Indianapolis\");",
      "info" : "ExpressionStatement[21672-21711]:ExpressionStatement[21672-21711]"
    }, {
      "left" : "map.put(\"PRT\", \"America/Puerto_Rico\");",
      "right" : "map.put(\"PRT\", \"America/Puerto_Rico\");",
      "info" : "ExpressionStatement[21724-21762]:ExpressionStatement[21724-21762]"
    }, {
      "left" : "map.put(\"CNT\", \"America/St_Johns\");",
      "right" : "map.put(\"CNT\", \"America/St_Johns\");",
      "info" : "ExpressionStatement[21775-21810]:ExpressionStatement[21775-21810]"
    }, {
      "left" : "map.put(\"AGT\", \"America/Buenos_Aires\");",
      "right" : "map.put(\"AGT\", \"America/Buenos_Aires\");",
      "info" : "ExpressionStatement[21823-21862]:ExpressionStatement[21823-21862]"
    }, {
      "left" : "map.put(\"BET\", \"America/Sao_Paulo\");",
      "right" : "map.put(\"BET\", \"America/Sao_Paulo\");",
      "info" : "ExpressionStatement[21875-21911]:ExpressionStatement[21875-21911]"
    }, {
      "left" : "map.put(\"WET\", \"Europe/London\");",
      "right" : "map.put(\"WET\", \"Europe/London\");",
      "info" : "ExpressionStatement[21924-21956]:ExpressionStatement[21924-21956]"
    }, {
      "left" : "map.put(\"ECT\", \"Europe/Paris\");",
      "right" : "map.put(\"ECT\", \"Europe/Paris\");",
      "info" : "ExpressionStatement[21969-22000]:ExpressionStatement[21969-22000]"
    }, {
      "left" : "map.put(\"ART\", \"Africa/Cairo\");",
      "right" : "map.put(\"ART\", \"Africa/Cairo\");",
      "info" : "ExpressionStatement[22013-22044]:ExpressionStatement[22013-22044]"
    }, {
      "left" : "map.put(\"CAT\", \"Africa/Harare\");",
      "right" : "map.put(\"CAT\", \"Africa/Harare\");",
      "info" : "ExpressionStatement[22057-22089]:ExpressionStatement[22057-22089]"
    }, {
      "left" : "map.put(\"EET\", \"Europe/Bucharest\");",
      "right" : "map.put(\"EET\", \"Europe/Bucharest\");",
      "info" : "ExpressionStatement[22102-22137]:ExpressionStatement[22102-22137]"
    }, {
      "left" : "map.put(\"EAT\", \"Africa/Addis_Ababa\");",
      "right" : "map.put(\"EAT\", \"Africa/Addis_Ababa\");",
      "info" : "ExpressionStatement[22150-22187]:ExpressionStatement[22150-22187]"
    }, {
      "left" : "map.put(\"MET\", \"Asia/Tehran\");",
      "right" : "map.put(\"MET\", \"Asia/Tehran\");",
      "info" : "ExpressionStatement[22200-22230]:ExpressionStatement[22200-22230]"
    }, {
      "left" : "map.put(\"NET\", \"Asia/Yerevan\");",
      "right" : "map.put(\"NET\", \"Asia/Yerevan\");",
      "info" : "ExpressionStatement[22243-22274]:ExpressionStatement[22243-22274]"
    }, {
      "left" : "map.put(\"PLT\", \"Asia/Karachi\");",
      "right" : "map.put(\"PLT\", \"Asia/Karachi\");",
      "info" : "ExpressionStatement[22287-22318]:ExpressionStatement[22287-22318]"
    }, {
      "left" : "map.put(\"IST\", \"Asia/Calcutta\");",
      "right" : "map.put(\"IST\", \"Asia/Calcutta\");",
      "info" : "ExpressionStatement[22331-22363]:ExpressionStatement[22331-22363]"
    }, {
      "left" : "map.put(\"BST\", \"Asia/Dhaka\");",
      "right" : "map.put(\"BST\", \"Asia/Dhaka\");",
      "info" : "ExpressionStatement[22376-22405]:ExpressionStatement[22376-22405]"
    }, {
      "left" : "map.put(\"VST\", \"Asia/Saigon\");",
      "right" : "map.put(\"VST\", \"Asia/Saigon\");",
      "info" : "ExpressionStatement[22418-22448]:ExpressionStatement[22418-22448]"
    }, {
      "left" : "map.put(\"CTT\", \"Asia/Shanghai\");",
      "right" : "map.put(\"CTT\", \"Asia/Shanghai\");",
      "info" : "ExpressionStatement[22461-22493]:ExpressionStatement[22461-22493]"
    }, {
      "left" : "map.put(\"JST\", \"Asia/Tokyo\");",
      "right" : "map.put(\"JST\", \"Asia/Tokyo\");",
      "info" : "ExpressionStatement[22506-22535]:ExpressionStatement[22506-22535]"
    }, {
      "left" : "map.put(\"ACT\", \"Australia/Darwin\");",
      "right" : "map.put(\"ACT\", \"Australia/Darwin\");",
      "info" : "ExpressionStatement[22548-22583]:ExpressionStatement[22548-22583]"
    }, {
      "left" : "map.put(\"AET\", \"Australia/Sydney\");",
      "right" : "map.put(\"AET\", \"Australia/Sydney\");",
      "info" : "ExpressionStatement[22596-22631]:ExpressionStatement[22596-22631]"
    }, {
      "left" : "map.put(\"SST\", \"Pacific/Guadalcanal\");",
      "right" : "map.put(\"SST\", \"Pacific/Guadalcanal\");",
      "info" : "ExpressionStatement[22644-22682]:ExpressionStatement[22644-22682]"
    }, {
      "left" : "map.put(\"NST\", \"Pacific/Auckland\");",
      "right" : "map.put(\"NST\", \"Pacific/Auckland\");",
      "info" : "ExpressionStatement[22695-22730]:ExpressionStatement[22695-22730]"
    }, {
      "left" : "cZoneIdConversion = map;",
      "right" : "cZoneIdConversion = map;",
      "info" : "ExpressionStatement[22743-22767]:ExpressionStatement[22743-22767]"
    }, {
      "left" : "return map.get(id);",
      "right" : "return map.get(id);",
      "info" : "ReturnStatement[22786-22805]:ReturnStatement[22786-22805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22860-23510]:Block[22860-23510]"
    }, {
      "left" : "Chronology chrono = new BaseChronology() {\n            public DateTimeZone getZone() {\n                return null;\n            }\n            public Chronology withUTC() {\n                return this;\n            }\n            public Chronology withZone(DateTimeZone zone) {\n                return this;\n            }\n            public String toString() {\n                return getClass().getName();\n            }\n        };",
      "right" : "Chronology chrono = new BaseChronology() {\n            public DateTimeZone getZone() {\n                return null;\n            }\n            public Chronology withUTC() {\n                return this;\n            }\n            public Chronology withZone(DateTimeZone zone) {\n                return this;\n            }\n            public String toString() {\n                return getClass().getName();\n            }\n        };",
      "info" : "VariableDeclarationStatement[22997-23423]:VariableDeclarationStatement[22997-23423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23082-23126]:Block[23082-23126]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[23100-23112]:ReturnStatement[23100-23112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23167-23211]:Block[23167-23211]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[23185-23197]:ReturnStatement[23185-23197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23270-23314]:Block[23270-23314]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[23288-23300]:ReturnStatement[23288-23300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23352-23412]:Block[23352-23412]"
    }, {
      "left" : "return getClass().getName();",
      "right" : "return getClass().getName();",
      "info" : "ReturnStatement[23370-23398]:ReturnStatement[23370-23398]"
    }, {
      "left" : "return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);",
      "right" : "return -(int) offsetFormatter().withChronology(chrono).parseMillis(str);",
      "info" : "ReturnStatement[23432-23504]:ReturnStatement[23432-23504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23842-24918]:Block[23842-24918]"
    }, {
      "left" : "StringBuffer buf = new StringBuffer();",
      "right" : "StringBuffer buf = new StringBuffer();",
      "info" : "VariableDeclarationStatement[23852-23890]:VariableDeclarationStatement[23852-23890]"
    }, {
      "left" : "if (offset >= 0)",
      "right" : "if (offset >= 0)",
      "info" : "IfStatement[23899-24032]:IfStatement[23899-24032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23916-23956]:Block[23916-23956]"
    }, {
      "left" : "buf.append('+');",
      "right" : "buf.append('+');",
      "info" : "ExpressionStatement[23930-23946]:ExpressionStatement[23930-23946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23962-24032]:Block[23962-24032]"
    }, {
      "left" : "buf.append('-');",
      "right" : "buf.append('-');",
      "info" : "ExpressionStatement[23976-23992]:ExpressionStatement[23976-23992]"
    }, {
      "left" : "offset = -offset;",
      "right" : "offset = -offset;",
      "info" : "ExpressionStatement[24005-24022]:ExpressionStatement[24005-24022]"
    }, {
      "left" : "int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "VariableDeclarationStatement[24042-24097]:VariableDeclarationStatement[24042-24097]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, hours, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, hours, 2);",
      "info" : "ExpressionStatement[24106-24153]:ExpressionStatement[24106-24153]"
    }, {
      "left" : "offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;",
      "right" : "offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;",
      "info" : "ExpressionStatement[24162-24220]:ExpressionStatement[24162-24220]"
    }, {
      "left" : "int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "VariableDeclarationStatement[24230-24289]:VariableDeclarationStatement[24230-24289]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[24298-24314]:ExpressionStatement[24298-24314]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, minutes, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, minutes, 2);",
      "info" : "ExpressionStatement[24323-24372]:ExpressionStatement[24323-24372]"
    }, {
      "left" : "offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "right" : "offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;",
      "info" : "ExpressionStatement[24381-24437]:ExpressionStatement[24381-24437]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[24446-24509]:IfStatement[24446-24509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24463-24509]:Block[24463-24509]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[24477-24499]:ReturnStatement[24477-24499]"
    }, {
      "left" : "int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "int seconds = offset / DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "VariableDeclarationStatement[24519-24578]:VariableDeclarationStatement[24519-24578]"
    }, {
      "left" : "buf.append(':');",
      "right" : "buf.append(':');",
      "info" : "ExpressionStatement[24587-24603]:ExpressionStatement[24587-24603]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, seconds, 2);",
      "right" : "FormatUtils.appendPaddedInteger(buf, seconds, 2);",
      "info" : "ExpressionStatement[24612-24661]:ExpressionStatement[24612-24661]"
    }, {
      "left" : "offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "right" : "offset -= seconds * DateTimeConstants.MILLIS_PER_SECOND;",
      "info" : "ExpressionStatement[24670-24726]:ExpressionStatement[24670-24726]"
    }, {
      "left" : "if (offset == 0)",
      "right" : "if (offset == 0)",
      "info" : "IfStatement[24735-24798]:IfStatement[24735-24798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24752-24798]:Block[24752-24798]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[24766-24788]:ReturnStatement[24766-24788]"
    }, {
      "left" : "buf.append('.');",
      "right" : "buf.append('.');",
      "info" : "ExpressionStatement[24808-24824]:ExpressionStatement[24808-24824]"
    }, {
      "left" : "FormatUtils.appendPaddedInteger(buf, offset, 3);",
      "right" : "FormatUtils.appendPaddedInteger(buf, offset, 3);",
      "info" : "ExpressionStatement[24833-24881]:ExpressionStatement[24833-24881]"
    }, {
      "left" : "return buf.toString();",
      "right" : "return buf.toString();",
      "info" : "ReturnStatement[24890-24912]:ReturnStatement[24890-24912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25109-25349]:Block[25109-25349]"
    }, {
      "left" : "if (cOffsetFormatter == null)",
      "right" : "if (cOffsetFormatter == null)",
      "info" : "IfStatement[25119-25310]:IfStatement[25119-25310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25149-25310]:Block[25149-25310]"
    }, {
      "left" : "cOffsetFormatter = new DateTimeFormatterBuilder()\n                .appendTimeZoneOffset(null, true, 2, 4)\n                .toFormatter();",
      "right" : "cOffsetFormatter = new DateTimeFormatterBuilder()\n                .appendTimeZoneOffset(null, true, 2, 4)\n                .toFormatter();",
      "info" : "ExpressionStatement[25163-25300]:ExpressionStatement[25163-25300]"
    }, {
      "left" : "return cOffsetFormatter;",
      "right" : "return cOffsetFormatter;",
      "info" : "ReturnStatement[25319-25343]:ReturnStatement[25319-25343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25665-25797]:Block[25665-25797]"
    }, {
      "left" : "if (id == null)",
      "right" : "if (id == null)",
      "info" : "IfStatement[25675-25773]:IfStatement[25675-25773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25691-25773]:Block[25691-25773]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Id must not be null\");",
      "right" : "throw new IllegalArgumentException(\"Id must not be null\");",
      "info" : "ThrowStatement[25705-25763]:ThrowStatement[25705-25763]"
    }, {
      "left" : "iID = id;",
      "right" : "iID = id;",
      "info" : "ExpressionStatement[25782-25791]:ExpressionStatement[25782-25791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26056-26083]:Block[26056-26083]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[26066-26077]:ReturnStatement[26066-26077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26931-26982]:Block[26931-26982]"
    }, {
      "left" : "return getShortName(instant, null);",
      "right" : "return getShortName(instant, null);",
      "info" : "ReturnStatement[26941-26976]:ReturnStatement[26941-26976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27519-27902]:Block[27519-27902]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[27529-27602]:IfStatement[27529-27602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27549-27602]:Block[27549-27602]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[27563-27592]:ExpressionStatement[27563-27592]"
    }, {
      "left" : "String nameKey = getNameKey(instant);",
      "right" : "String nameKey = getNameKey(instant);",
      "info" : "VariableDeclarationStatement[27611-27648]:VariableDeclarationStatement[27611-27648]"
    }, {
      "left" : "if (nameKey == null)",
      "right" : "if (nameKey == null)",
      "info" : "IfStatement[27657-27713]:IfStatement[27657-27713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27678-27713]:Block[27678-27713]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[27692-27703]:ReturnStatement[27692-27703]"
    }, {
      "left" : "String name = cNameProvider.getShortName(locale, iID, nameKey);",
      "right" : "String name = cNameProvider.getShortName(locale, iID, nameKey);",
      "info" : "VariableDeclarationStatement[27722-27785]:VariableDeclarationStatement[27722-27785]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[27794-27848]:IfStatement[27794-27848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27812-27848]:Block[27812-27848]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[27826-27838]:ReturnStatement[27826-27838]"
    }, {
      "left" : "return printOffset(getOffset(instant));",
      "right" : "return printOffset(getOffset(instant));",
      "info" : "ReturnStatement[27857-27896]:ReturnStatement[27857-27896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28366-28412]:Block[28366-28412]"
    }, {
      "left" : "return getName(instant, null);",
      "right" : "return getName(instant, null);",
      "info" : "ReturnStatement[28376-28406]:ReturnStatement[28376-28406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28942-29320]:Block[28942-29320]"
    }, {
      "left" : "if (locale == null)",
      "right" : "if (locale == null)",
      "info" : "IfStatement[28952-29025]:IfStatement[28952-29025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28972-29025]:Block[28972-29025]"
    }, {
      "left" : "locale = Locale.getDefault();",
      "right" : "locale = Locale.getDefault();",
      "info" : "ExpressionStatement[28986-29015]:ExpressionStatement[28986-29015]"
    }, {
      "left" : "String nameKey = getNameKey(instant);",
      "right" : "String nameKey = getNameKey(instant);",
      "info" : "VariableDeclarationStatement[29034-29071]:VariableDeclarationStatement[29034-29071]"
    }, {
      "left" : "if (nameKey == null)",
      "right" : "if (nameKey == null)",
      "info" : "IfStatement[29080-29136]:IfStatement[29080-29136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29101-29136]:Block[29101-29136]"
    }, {
      "left" : "return iID;",
      "right" : "return iID;",
      "info" : "ReturnStatement[29115-29126]:ReturnStatement[29115-29126]"
    }, {
      "left" : "String name = cNameProvider.getName(locale, iID, nameKey);",
      "right" : "String name = cNameProvider.getName(locale, iID, nameKey);",
      "info" : "VariableDeclarationStatement[29145-29203]:VariableDeclarationStatement[29145-29203]"
    }, {
      "left" : "if (name != null)",
      "right" : "if (name != null)",
      "info" : "IfStatement[29212-29266]:IfStatement[29212-29266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29230-29266]:Block[29230-29266]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[29244-29256]:ReturnStatement[29244-29256]"
    }, {
      "left" : "return printOffset(getOffset(instant));",
      "right" : "return printOffset(getOffset(instant));",
      "info" : "ReturnStatement[29275-29314]:ReturnStatement[29275-29314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29905-30065]:Block[29905-30065]"
    }, {
      "left" : "if (instant == null)",
      "right" : "if (instant == null)",
      "info" : "IfStatement[29915-30012]:IfStatement[29915-30012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29936-30012]:Block[29936-30012]"
    }, {
      "left" : "return getOffset(DateTimeUtils.currentTimeMillis());",
      "right" : "return getOffset(DateTimeUtils.currentTimeMillis());",
      "info" : "ReturnStatement[29950-30002]:ReturnStatement[29950-30002]"
    }, {
      "left" : "return getOffset(instant.getMillis());",
      "right" : "return getOffset(instant.getMillis());",
      "info" : "ReturnStatement[30021-30059]:ReturnStatement[30021-30059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31221-31293]:Block[31221-31293]"
    }, {
      "left" : "return getOffset(instant) == getStandardOffset(instant);",
      "right" : "return getOffset(instant) == getStandardOffset(instant);",
      "info" : "ReturnStatement[31231-31287]:ReturnStatement[31231-31287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32940-34080]:Block[32940-34449]"
    }, {
      "left" : "final int offsetLocal = getOffset(instantLocal);",
      "right" : "final int offsetLocal = getOffset(instantLocal);",
      "info" : "VariableDeclarationStatement[33009-33057]:VariableDeclarationStatement[33009-33057]"
    }, {
      "left" : "final long instantAdjusted = instantLocal - offsetLocal;",
      "right" : "final long instantAdjusted = instantLocal - offsetLocal;",
      "info" : "VariableDeclarationStatement[33138-33194]:VariableDeclarationStatement[33138-33194]"
    }, {
      "left" : "final int offsetAdjusted = getOffset(instantAdjusted);",
      "right" : "final int offsetAdjusted = getOffset(instantAdjusted);",
      "info" : "VariableDeclarationStatement[33203-33257]:VariableDeclarationStatement[33203-33257]"
    }, {
      "left" : "if (offsetLocal != offsetAdjusted)",
      "right" : "if (offsetLocal != offsetAdjusted)",
      "info" : "IfStatement[33331-34043]:IfStatement[33331-34412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33366-34043]:Block[33366-34043]"
    }, {
      "left" : "if ((offsetLocal - offsetAdjusted) < 0)",
      "right" : "if ((offsetLocal - offsetAdjusted) < 0)",
      "info" : "IfStatement[33532-34033]:IfStatement[33532-34033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33572-34033]:Block[33572-34033]"
    }, {
      "left" : "long nextLocal = nextTransition(instantAdjusted);",
      "right" : "long nextLocal = nextTransition(instantAdjusted);",
      "info" : "VariableDeclarationStatement[33780-33829]:VariableDeclarationStatement[33780-33829]"
    }, {
      "left" : "long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);",
      "right" : "long nextAdjusted = nextTransition(instantLocal - offsetAdjusted);",
      "info" : "VariableDeclarationStatement[33846-33912]:VariableDeclarationStatement[33846-33912]"
    }, {
      "left" : "if (nextLocal != nextAdjusted)",
      "right" : "if (nextLocal != nextAdjusted)",
      "info" : "IfStatement[33929-34019]:IfStatement[33929-34019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33960-34019]:Block[33960-34019]"
    }, {
      "left" : "return offsetLocal;",
      "right" : "return offsetLocal;",
      "info" : "ReturnStatement[33982-34001]:ReturnStatement[33982-34001]"
    }, {
      "left" : "return offsetAdjusted;",
      "right" : "return offsetAdjusted;",
      "info" : "ReturnStatement[34052-34074]:ReturnStatement[34421-34443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34577-34958]:Block[34946-35327]"
    }, {
      "left" : "int offset = getOffset(instantUTC);",
      "right" : "int offset = getOffset(instantUTC);",
      "info" : "VariableDeclarationStatement[34587-34622]:VariableDeclarationStatement[34956-34991]"
    }, {
      "left" : "long instantLocal = instantUTC + offset;",
      "right" : "long instantLocal = instantUTC + offset;",
      "info" : "VariableDeclarationStatement[34631-34671]:VariableDeclarationStatement[35000-35040]"
    }, {
      "left" : "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0)",
      "right" : "if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0)",
      "info" : "IfStatement[34759-34923]:IfStatement[35128-35292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34826-34923]:Block[35195-35292]"
    }, {
      "left" : "throw new ArithmeticException(\"Adding time zone offset caused overflow\");",
      "right" : "throw new ArithmeticException(\"Adding time zone offset caused overflow\");",
      "info" : "ThrowStatement[34840-34913]:ThrowStatement[35209-35282]"
    }, {
      "left" : "return instantLocal;",
      "right" : "return instantLocal;",
      "info" : "ReturnStatement[34932-34952]:ReturnStatement[35301-35321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35961-36300]:Block[36330-36669]"
    }, {
      "left" : "int offsetOriginal = getOffset(originalInstantUTC);",
      "right" : "int offsetOriginal = getOffset(originalInstantUTC);",
      "info" : "VariableDeclarationStatement[35971-36022]:VariableDeclarationStatement[36340-36391]"
    }, {
      "left" : "long instantUTC = instantLocal - offsetOriginal;",
      "right" : "long instantUTC = instantLocal - offsetOriginal;",
      "info" : "VariableDeclarationStatement[36031-36079]:VariableDeclarationStatement[36400-36448]"
    }, {
      "left" : "int offsetLocalFromOriginal = getOffset(instantUTC);",
      "right" : "int offsetLocalFromOriginal = getOffset(instantUTC);",
      "info" : "VariableDeclarationStatement[36088-36140]:VariableDeclarationStatement[36457-36509]"
    }, {
      "left" : "if (offsetLocalFromOriginal == offsetOriginal)",
      "right" : "if (offsetLocalFromOriginal == offsetOriginal)",
      "info" : "IfStatement[36149-36238]:IfStatement[36518-36607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36196-36238]:Block[36565-36607]"
    }, {
      "left" : "return instantUTC;",
      "right" : "return instantUTC;",
      "info" : "ReturnStatement[36210-36228]:ReturnStatement[36579-36597]"
    }, {
      "left" : "return convertLocalToUTC(instantLocal, strict);",
      "right" : "return convertLocalToUTC(instantLocal, strict);",
      "info" : "ReturnStatement[36247-36294]:ReturnStatement[36616-36663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36976-39265]:Block[37345-39634]"
    }, {
      "left" : "int offsetLocal = getOffset(instantLocal);",
      "right" : "int offsetLocal = getOffset(instantLocal);",
      "info" : "VariableDeclarationStatement[37045-37087]:VariableDeclarationStatement[37414-37456]"
    }, {
      "left" : "int offset = getOffset(instantLocal - offsetLocal);",
      "right" : "int offset = getOffset(instantLocal - offsetLocal);",
      "info" : "VariableDeclarationStatement[37168-37219]:VariableDeclarationStatement[37537-37588]"
    }, {
      "left" : "if (offsetLocal != offset)",
      "right" : "if (offsetLocal != offset)",
      "info" : "IfStatement[37293-38893]:IfStatement[37662-39262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37320-38893]:Block[37689-39262]"
    }, {
      "left" : "if (strict || offsetLocal < 0)",
      "right" : "if (strict || offsetLocal < 0)",
      "info" : "IfStatement[37539-38883]:IfStatement[37908-39252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37570-38883]:Block[37939-39252]"
    }, {
      "left" : "long nextLocal = nextTransition(instantLocal - offsetLocal);",
      "right" : "long nextLocal = nextTransition(instantLocal - offsetLocal);",
      "info" : "VariableDeclarationStatement[37642-37702]:VariableDeclarationStatement[38011-38071]"
    }, {
      "left" : "if (nextLocal == (instantLocal - offsetLocal))",
      "right" : "if (nextLocal == (instantLocal - offsetLocal))",
      "info" : "IfStatement[37719-37833]:IfStatement[38088-38202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37766-37833]:Block[38135-38202]"
    }, {
      "left" : "nextLocal = Long.MAX_VALUE;",
      "right" : "nextLocal = Long.MAX_VALUE;",
      "info" : "ExpressionStatement[37788-37815]:ExpressionStatement[38157-38184]"
    }, {
      "left" : "long nextAdjusted = nextTransition(instantLocal - offset);",
      "right" : "long nextAdjusted = nextTransition(instantLocal - offset);",
      "info" : "VariableDeclarationStatement[37850-37908]:VariableDeclarationStatement[38219-38277]"
    }, {
      "left" : "if (nextAdjusted == (instantLocal - offset))",
      "right" : "if (nextAdjusted == (instantLocal - offset))",
      "info" : "IfStatement[37925-38040]:IfStatement[38294-38409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37970-38040]:Block[38339-38409]"
    }, {
      "left" : "nextAdjusted = Long.MAX_VALUE;",
      "right" : "nextAdjusted = Long.MAX_VALUE;",
      "info" : "ExpressionStatement[37992-38022]:ExpressionStatement[38361-38391]"
    }, {
      "left" : "if (nextLocal != nextAdjusted)",
      "right" : "if (nextLocal != nextAdjusted)",
      "info" : "IfStatement[38057-38869]:IfStatement[38426-39238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38088-38869]:Block[38457-39238]"
    }, {
      "left" : "if (strict)",
      "right" : "if (strict)",
      "info" : "IfStatement[38159-38851]:IfStatement[38528-39220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38171-38540]:Block[38540-38909]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" +\n                                DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(instantLocal)) +\n                                \" (\" + getID() + \")\");",
      "right" : "throw new IllegalArgumentException(\"Illegal instant due to time zone offset transition: \" +\n                                DateTimeFormat.forPattern(\"yyyy-MM-dd'T'HH:mm:ss.SSS\").print(new Instant(instantLocal)) +\n                                \" (\" + getID() + \")\");",
      "info" : "ThrowStatement[38250-38518]:ThrowStatement[38619-38887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38546-38851]:Block[38915-39220]"
    }, {
      "left" : "offset = offsetLocal;",
      "right" : "offset = offsetLocal;",
      "info" : "ExpressionStatement[38808-38829]:ExpressionStatement[39177-39198]"
    }, {
      "left" : "long instantUTC = instantLocal - offset;",
      "right" : "long instantUTC = instantLocal - offset;",
      "info" : "VariableDeclarationStatement[38932-38972]:VariableDeclarationStatement[39301-39341]"
    }, {
      "left" : "if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0)",
      "right" : "if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0)",
      "info" : "IfStatement[39062-39232]:IfStatement[39431-39601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39130-39232]:Block[39499-39601]"
    }, {
      "left" : "throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");",
      "right" : "throw new ArithmeticException(\"Subtracting time zone offset caused overflow\");",
      "info" : "ThrowStatement[39144-39222]:ThrowStatement[39513-39591]"
    }, {
      "left" : "return instantUTC;",
      "right" : "return instantUTC;",
      "info" : "ReturnStatement[39241-39259]:ReturnStatement[39610-39628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39824-40129]:Block[40193-40498]"
    }, {
      "left" : "if (newZone == null)",
      "right" : "if (newZone == null)",
      "info" : "IfStatement[39834-39915]:IfStatement[40203-40284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39855-39915]:Block[40224-40284]"
    }, {
      "left" : "newZone = DateTimeZone.getDefault();",
      "right" : "newZone = DateTimeZone.getDefault();",
      "info" : "ExpressionStatement[39869-39905]:ExpressionStatement[40238-40274]"
    }, {
      "left" : "if (newZone == this)",
      "right" : "if (newZone == this)",
      "info" : "IfStatement[39924-39987]:IfStatement[40293-40356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39945-39987]:Block[40314-40356]"
    }, {
      "left" : "return oldInstant;",
      "right" : "return oldInstant;",
      "info" : "ReturnStatement[39959-39977]:ReturnStatement[40328-40346]"
    }, {
      "left" : "long instantLocal = oldInstant + getOffset(oldInstant);",
      "right" : "long instantLocal = oldInstant + getOffset(oldInstant);",
      "info" : "VariableDeclarationStatement[39996-40051]:VariableDeclarationStatement[40365-40420]"
    }, {
      "left" : "return instantLocal - newZone.getOffsetFromLocal(instantLocal);",
      "right" : "return instantLocal - newZone.getOffsetFromLocal(instantLocal);",
      "info" : "ReturnStatement[40060-40123]:ReturnStatement[40429-40492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45147-45382]:Block[45516-45751]"
    }, {
      "left" : "if (isFixed())",
      "right" : "if (isFixed())",
      "info" : "IfStatement[45157-45209]:IfStatement[45526-45578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45172-45209]:Block[45541-45578]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45186-45199]:ReturnStatement[45555-45568]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[45218-45376]:TryStatement[45587-45745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45222-45303]:Block[45591-45672]"
    }, {
      "left" : "localDateTime.toDateTime(this);",
      "right" : "localDateTime.toDateTime(this);",
      "info" : "ExpressionStatement[45236-45267]:ExpressionStatement[45605-45636]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45280-45293]:ReturnStatement[45649-45662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45340-45376]:Block[45709-45745]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[45354-45366]:ReturnStatement[45723-45735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46694-46753]:Block[47063-47122]"
    }, {
      "left" : "return java.util.TimeZone.getTimeZone(iID);",
      "right" : "return java.util.TimeZone.getTimeZone(iID);",
      "info" : "ReturnStatement[46704-46747]:ReturnStatement[47073-47116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47127-47174]:Block[47496-47543]"
    }, {
      "left" : "return 57 + getID().hashCode();",
      "right" : "return 57 + getID().hashCode();",
      "info" : "ReturnStatement[47137-47168]:ReturnStatement[47506-47537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47322-47353]:Block[47691-47722]"
    }, {
      "left" : "return getID();",
      "right" : "return getID();",
      "info" : "ReturnStatement[47332-47347]:ReturnStatement[47701-47716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47683-47720]:Block[48052-48089]"
    }, {
      "left" : "return new Stub(iID);",
      "right" : "return new Stub(iID);",
      "info" : "ReturnStatement[47693-47714]:ReturnStatement[48062-48083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48144-48177]:Block[48513-48546]"
    }, {
      "left" : "iID = id;",
      "right" : "iID = id;",
      "info" : "ExpressionStatement[48158-48167]:ExpressionStatement[48527-48536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48255-48297]:Block[48624-48666]"
    }, {
      "left" : "out.writeUTF(iID);",
      "right" : "out.writeUTF(iID);",
      "info" : "ExpressionStatement[48269-48287]:ExpressionStatement[48638-48656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48372-48415]:Block[48741-48784]"
    }, {
      "left" : "iID = in.readUTF();",
      "right" : "iID = in.readUTF();",
      "info" : "ExpressionStatement[48386-48405]:ExpressionStatement[48755-48774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48483-48525]:Block[48852-48894]"
    }, {
      "left" : "return forID(iID);",
      "right" : "return forID(iID);",
      "info" : "ReturnStatement[48497-48515]:ReturnStatement[48866-48884]"
    } ]
  },
  "interFileMappings" : { }
}