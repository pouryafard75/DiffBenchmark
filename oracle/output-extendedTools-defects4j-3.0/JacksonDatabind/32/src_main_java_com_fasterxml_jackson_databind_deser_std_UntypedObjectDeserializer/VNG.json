{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UntypedObjectDeserializer",
      "right" : "UntypedObjectDeserializer",
      "info" : "TypeDeclaration[911-26702]:TypeDeclaration[911-26846]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[1643-1691]:FieldDeclaration[1643-1691]"
    }, {
      "left" : "protected final static Object[] NO_OBJECTS = new Object[0];",
      "right" : "protected final static Object[] NO_OBJECTS = new Object[0];",
      "info" : "FieldDeclaration[1697-1756]:FieldDeclaration[1697-1756]"
    }, {
      "left" : "@Deprecated\n    public final static UntypedObjectDeserializer instance = new UntypedObjectDeserializer(null, null);",
      "right" : "@Deprecated\n    public final static UntypedObjectDeserializer instance = new UntypedObjectDeserializer(null, null);",
      "info" : "FieldDeclaration[1762-1970]:FieldDeclaration[1762-1970]"
    }, {
      "left" : "protected JsonDeserializer<Object> _mapDeserializer;",
      "right" : "protected JsonDeserializer<Object> _mapDeserializer;",
      "info" : "FieldDeclaration[2181-2233]:FieldDeclaration[2181-2233]"
    }, {
      "left" : "protected JsonDeserializer<Object> _listDeserializer;",
      "right" : "protected JsonDeserializer<Object> _listDeserializer;",
      "info" : "FieldDeclaration[2239-2292]:FieldDeclaration[2239-2292]"
    }, {
      "left" : "protected JsonDeserializer<Object> _stringDeserializer;",
      "right" : "protected JsonDeserializer<Object> _stringDeserializer;",
      "info" : "FieldDeclaration[2298-2353]:FieldDeclaration[2298-2353]"
    }, {
      "left" : "protected JsonDeserializer<Object> _numberDeserializer;",
      "right" : "protected JsonDeserializer<Object> _numberDeserializer;",
      "info" : "FieldDeclaration[2359-2414]:FieldDeclaration[2359-2414]"
    }, {
      "left" : "protected JavaType _listType;",
      "right" : "protected JavaType _listType;",
      "info" : "FieldDeclaration[2420-2599]:FieldDeclaration[2420-2599]"
    }, {
      "left" : "protected JavaType _mapType;",
      "right" : "protected JavaType _mapType;",
      "info" : "FieldDeclaration[2605-2782]:FieldDeclaration[2605-2782]"
    }, {
      "left" : "public UntypedObjectDeserializer()",
      "right" : "public UntypedObjectDeserializer()",
      "info" : "MethodDeclaration[2788-2950]:MethodDeclaration[2788-2950]"
    }, {
      "left" : "public UntypedObjectDeserializer(JavaType listType, JavaType mapType)",
      "right" : "public UntypedObjectDeserializer(JavaType listType, JavaType mapType)",
      "info" : "MethodDeclaration[2956-3120]:MethodDeclaration[2956-3120]"
    }, {
      "left" : "public UntypedObjectDeserializer(UntypedObjectDeserializer base,\n            JsonDeserializer<?> mapDeser, JsonDeserializer<?> listDeser,\n            JsonDeserializer<?> stringDeser, JsonDeserializer<?> numberDeser)",
      "right" : "public UntypedObjectDeserializer(UntypedObjectDeserializer base,\n            JsonDeserializer<?> mapDeser, JsonDeserializer<?> listDeser,\n            JsonDeserializer<?> stringDeser, JsonDeserializer<?> numberDeser)",
      "info" : "MethodDeclaration[3126-3757]:MethodDeclaration[3126-3757]"
    }, {
      "left" : "public void resolve(DeserializationContext ctxt) throws JsonMappingException",
      "right" : "public void resolve(DeserializationContext ctxt) throws JsonMappingException",
      "info" : "MethodDeclaration[3929-6691]:MethodDeclaration[3929-6691]"
    }, {
      "left" : "protected JsonDeserializer<Object> _findCustomDeser(DeserializationContext ctxt, JavaType type)\n        throws JsonMappingException",
      "right" : "protected JsonDeserializer<Object> _findCustomDeser(DeserializationContext ctxt, JavaType type)\n        throws JsonMappingException",
      "info" : "MethodDeclaration[6697-7052]:MethodDeclaration[6697-7052]"
    }, {
      "left" : "protected JsonDeserializer<Object> _clearIfStdImpl(JsonDeserializer<Object> deser)",
      "right" : "protected JsonDeserializer<Object> _clearIfStdImpl(JsonDeserializer<Object> deser)",
      "info" : "MethodDeclaration[7058-7213]:MethodDeclaration[7058-7213]"
    }, {
      "left" : "public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException",
      "right" : "public JsonDeserializer<?> createContextual(DeserializationContext ctxt,\n            BeanProperty property) throws JsonMappingException",
      "info" : "MethodDeclaration[7219-7963]:MethodDeclaration[7219-7963]"
    }, {
      "left" : "protected JsonDeserializer<?> _withResolved(JsonDeserializer<?> mapDeser,\n            JsonDeserializer<?> listDeser,\n            JsonDeserializer<?> stringDeser, JsonDeserializer<?> numberDeser)",
      "right" : "protected JsonDeserializer<?> _withResolved(JsonDeserializer<?> mapDeser,\n            JsonDeserializer<?> listDeser,\n            JsonDeserializer<?> stringDeser, JsonDeserializer<?> numberDeser)",
      "info" : "MethodDeclaration[7969-8286]:MethodDeclaration[7969-8286]"
    }, {
      "left" : "public boolean isCachable()",
      "right" : "public boolean isCachable()",
      "info" : "MethodDeclaration[8685-9017]:MethodDeclaration[8685-9017]"
    }, {
      "left" : "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[9023-11629]:MethodDeclaration[9023-11669]"
    }, {
      "left" : "public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
      "right" : "public Object deserializeWithType(JsonParser p, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
      "info" : "MethodDeclaration[11635-13760]:MethodDeclaration[11675-13800]"
    }, {
      "left" : "protected Object mapArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "right" : "protected Object mapArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[13938-15499]:MethodDeclaration[13978-15539]"
    }, {
      "left" : "protected Object mapObject(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "protected Object mapObject(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[15505-17664]:MethodDeclaration[15545-17704]"
    }, {
      "left" : "protected Object[] mapArrayToArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "right" : "protected Object[] mapArrayToArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[17670-18537]:MethodDeclaration[17710-18577]"
    }, {
      "left" : "Vanilla",
      "right" : "Vanilla",
      "info" : "TypeDeclaration[18787-26700]:TypeDeclaration[18827-26844]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[18889-18937]:FieldDeclaration[18929-18977]"
    }, {
      "left" : "public final static Vanilla std = new Vanilla();",
      "right" : "public final static Vanilla std = new Vanilla();",
      "info" : "FieldDeclaration[18947-18995]:FieldDeclaration[18987-19035]"
    }, {
      "left" : "public Vanilla()",
      "right" : "public Vanilla()",
      "info" : "MethodDeclaration[19005-19046]:MethodDeclaration[19045-19086]"
    }, {
      "left" : "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "public Object deserialize(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[19056-21552]:MethodDeclaration[19096-21696]"
    }, {
      "left" : "public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
      "right" : "public Object deserializeWithType(JsonParser jp, DeserializationContext ctxt, TypeDeserializer typeDeserializer) throws IOException",
      "info" : "MethodDeclaration[21562-23026]:MethodDeclaration[21706-23170]"
    }, {
      "left" : "protected Object mapArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "right" : "protected Object mapArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[23036-24461]:MethodDeclaration[23180-24605]"
    }, {
      "left" : "protected Object mapObject(JsonParser p, DeserializationContext ctxt) throws IOException",
      "right" : "protected Object mapObject(JsonParser p, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[24471-25939]:MethodDeclaration[24615-26083]"
    }, {
      "left" : "protected Object[] mapArrayToArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "right" : "protected Object[] mapArrayToArray(JsonParser jp, DeserializationContext ctxt) throws IOException",
      "info" : "MethodDeclaration[25949-26694]:MethodDeclaration[26093-26838]"
    } ],
    "mappings" : [
 {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[1484-1499]:MarkerAnnotation[1484-1499]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[2866-2877]:MarkerAnnotation[2866-2877]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2882-2888]:Modifier[2882-2888]"
    }, {
      "left" : "UntypedObjectDeserializer",
      "right" : "UntypedObjectDeserializer",
      "info" : "SimpleName[2889-2914]:SimpleName[2889-2914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2917-2950]:Block[2917-2950]"
    }, {
      "left" : "this(null, null);",
      "right" : "this(null, null);",
      "info" : "ConstructorInvocation[2927-2944]:ConstructorInvocation[2927-2944]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2956-2962]:Modifier[2956-2962]"
    }, {
      "left" : "UntypedObjectDeserializer",
      "right" : "UntypedObjectDeserializer",
      "info" : "SimpleName[2963-2988]:SimpleName[2963-2988]"
    }, {
      "left" : "JavaType listType",
      "right" : "JavaType listType",
      "info" : "SingleVariableDeclaration[2989-3006]:SingleVariableDeclaration[2989-3006]"
    }, {
      "left" : "JavaType mapType",
      "right" : "JavaType mapType",
      "info" : "SingleVariableDeclaration[3008-3024]:SingleVariableDeclaration[3008-3024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3026-3120]:Block[3026-3120]"
    }, {
      "left" : "super(Object.class);",
      "right" : "super(Object.class);",
      "info" : "SuperConstructorInvocation[3036-3056]:SuperConstructorInvocation[3036-3056]"
    }, {
      "left" : "_listType = listType;",
      "right" : "_listType = listType;",
      "info" : "ExpressionStatement[3065-3086]:ExpressionStatement[3065-3086]"
    }, {
      "left" : "_mapType = mapType;",
      "right" : "_mapType = mapType;",
      "info" : "ExpressionStatement[3095-3114]:ExpressionStatement[3095-3114]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[3126-3156]:SingleMemberAnnotation[3126-3156]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3161-3167]:Modifier[3161-3167]"
    }, {
      "left" : "UntypedObjectDeserializer",
      "right" : "UntypedObjectDeserializer",
      "info" : "SimpleName[3168-3193]:SimpleName[3168-3193]"
    }, {
      "left" : "UntypedObjectDeserializer base",
      "right" : "UntypedObjectDeserializer base",
      "info" : "SingleVariableDeclaration[3194-3224]:SingleVariableDeclaration[3194-3224]"
    }, {
      "left" : "JsonDeserializer<?> mapDeser",
      "right" : "JsonDeserializer<?> mapDeser",
      "info" : "SingleVariableDeclaration[3238-3266]:SingleVariableDeclaration[3238-3266]"
    }, {
      "left" : "JsonDeserializer<?> listDeser",
      "right" : "JsonDeserializer<?> listDeser",
      "info" : "SingleVariableDeclaration[3268-3297]:SingleVariableDeclaration[3268-3297]"
    }, {
      "left" : "JsonDeserializer<?> stringDeser",
      "right" : "JsonDeserializer<?> stringDeser",
      "info" : "SingleVariableDeclaration[3311-3342]:SingleVariableDeclaration[3311-3342]"
    }, {
      "left" : "JsonDeserializer<?> numberDeser",
      "right" : "JsonDeserializer<?> numberDeser",
      "info" : "SingleVariableDeclaration[3344-3375]:SingleVariableDeclaration[3344-3375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3381-3757]:Block[3381-3757]"
    }, {
      "left" : "super(Object.class);",
      "right" : "super(Object.class);",
      "info" : "SuperConstructorInvocation[3391-3411]:SuperConstructorInvocation[3391-3411]"
    }, {
      "left" : "_mapDeserializer = (JsonDeserializer<Object>) mapDeser;",
      "right" : "_mapDeserializer = (JsonDeserializer<Object>) mapDeser;",
      "info" : "ExpressionStatement[3420-3475]:ExpressionStatement[3420-3475]"
    }, {
      "left" : "_listDeserializer = (JsonDeserializer<Object>) listDeser;",
      "right" : "_listDeserializer = (JsonDeserializer<Object>) listDeser;",
      "info" : "ExpressionStatement[3484-3541]:ExpressionStatement[3484-3541]"
    }, {
      "left" : "_stringDeserializer = (JsonDeserializer<Object>) stringDeser;",
      "right" : "_stringDeserializer = (JsonDeserializer<Object>) stringDeser;",
      "info" : "ExpressionStatement[3550-3611]:ExpressionStatement[3550-3611]"
    }, {
      "left" : "_numberDeserializer = (JsonDeserializer<Object>) numberDeser;",
      "right" : "_numberDeserializer = (JsonDeserializer<Object>) numberDeser;",
      "info" : "ExpressionStatement[3620-3681]:ExpressionStatement[3620-3681]"
    }, {
      "left" : "_listType = base._listType;",
      "right" : "_listType = base._listType;",
      "info" : "ExpressionStatement[3690-3717]:ExpressionStatement[3690-3717]"
    }, {
      "left" : "_mapType = base._mapType;",
      "right" : "_mapType = base._mapType;",
      "info" : "ExpressionStatement[3726-3751]:ExpressionStatement[3726-3751]"
    }, {
      "left" : "@SuppressWarnings(\"unchecked\")",
      "right" : "@SuppressWarnings(\"unchecked\")",
      "info" : "SingleMemberAnnotation[4178-4208]:SingleMemberAnnotation[4178-4208]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4213-4222]:MarkerAnnotation[4213-4222]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4227-4233]:Modifier[4227-4233]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4234-4238]:PrimitiveType[4234-4238]"
    }, {
      "left" : "resolve",
      "right" : "resolve",
      "info" : "SimpleName[4239-4246]:SimpleName[4239-4246]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[4247-4274]:SingleVariableDeclaration[4247-4274]"
    }, {
      "left" : "JsonMappingException",
      "right" : "JsonMappingException",
      "info" : "SimpleType[4283-4303]:SimpleType[4283-4303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4308-6691]:Block[4308-6691]"
    }, {
      "left" : "JavaType obType = ctxt.constructType(Object.class);",
      "right" : "JavaType obType = ctxt.constructType(Object.class);",
      "info" : "VariableDeclarationStatement[4318-4369]:VariableDeclarationStatement[4318-4369]"
    }, {
      "left" : "JavaType stringType = ctxt.constructType(String.class);",
      "right" : "JavaType stringType = ctxt.constructType(String.class);",
      "info" : "VariableDeclarationStatement[4378-4433]:VariableDeclarationStatement[4378-4433]"
    }, {
      "left" : "TypeFactory tf = ctxt.getTypeFactory();",
      "right" : "TypeFactory tf = ctxt.getTypeFactory();",
      "info" : "VariableDeclarationStatement[4442-4481]:VariableDeclarationStatement[4442-4481]"
    }, {
      "left" : "if (_listType == null)",
      "right" : "if (_listType == null)",
      "info" : "IfStatement[5143-5470]:IfStatement[5143-5470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5166-5298]:Block[5166-5298]"
    }, {
      "left" : "_listDeserializer = _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructCollectionType(List.class, obType)));",
      "right" : "_listDeserializer = _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructCollectionType(List.class, obType)));",
      "info" : "ExpressionStatement[5180-5288]:ExpressionStatement[5180-5288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5304-5470]:Block[5304-5470]"
    }, {
      "left" : "_listDeserializer = _findCustomDeser(ctxt, _listType);",
      "right" : "_listDeserializer = _findCustomDeser(ctxt, _listType);",
      "info" : "ExpressionStatement[5406-5460]:ExpressionStatement[5406-5460]"
    }, {
      "left" : "if (_mapType == null)",
      "right" : "if (_mapType == null)",
      "info" : "IfStatement[5479-5805]:IfStatement[5479-5805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5501-5636]:Block[5501-5636]"
    }, {
      "left" : "_mapDeserializer = _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructMapType(Map.class, stringType, obType)));",
      "right" : "_mapDeserializer = _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructMapType(Map.class, stringType, obType)));",
      "info" : "ExpressionStatement[5515-5626]:ExpressionStatement[5515-5626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5642-5805]:Block[5642-5805]"
    }, {
      "left" : "_mapDeserializer = _findCustomDeser(ctxt, _mapType);",
      "right" : "_mapDeserializer = _findCustomDeser(ctxt, _mapType);",
      "info" : "ExpressionStatement[5743-5795]:ExpressionStatement[5743-5795]"
    }, {
      "left" : "_stringDeserializer = _clearIfStdImpl(_findCustomDeser(ctxt, stringType));",
      "right" : "_stringDeserializer = _clearIfStdImpl(_findCustomDeser(ctxt, stringType));",
      "info" : "ExpressionStatement[5814-5888]:ExpressionStatement[5814-5888]"
    }, {
      "left" : "_numberDeserializer = _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructType(Number.class)));",
      "right" : "_numberDeserializer = _clearIfStdImpl(_findCustomDeser(ctxt, tf.constructType(Number.class)));",
      "info" : "ExpressionStatement[5897-5991]:ExpressionStatement[5897-5991]"
    }, {
      "left" : "JavaType unknown = TypeFactory.unknownType();",
      "right" : "JavaType unknown = TypeFactory.unknownType();",
      "info" : "VariableDeclarationStatement[6122-6167]:VariableDeclarationStatement[6122-6167]"
    }, {
      "left" : "_mapDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_mapDeserializer, null, unknown);",
      "right" : "_mapDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_mapDeserializer, null, unknown);",
      "info" : "ExpressionStatement[6176-6293]:ExpressionStatement[6176-6293]"
    }, {
      "left" : "_listDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_listDeserializer, null, unknown);",
      "right" : "_listDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_listDeserializer, null, unknown);",
      "info" : "ExpressionStatement[6302-6421]:ExpressionStatement[6302-6421]"
    }, {
      "left" : "_stringDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_stringDeserializer, null, unknown);",
      "right" : "_stringDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_stringDeserializer, null, unknown);",
      "info" : "ExpressionStatement[6430-6553]:ExpressionStatement[6430-6553]"
    }, {
      "left" : "_numberDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_numberDeserializer, null, unknown);",
      "right" : "_numberDeserializer = (JsonDeserializer<Object>) ctxt.handleSecondaryContextualization(_numberDeserializer, null, unknown);",
      "info" : "ExpressionStatement[6562-6685]:ExpressionStatement[6562-6685]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6697-6706]:Modifier[6697-6706]"
    }, {
      "left" : "JsonDeserializer<Object>",
      "right" : "JsonDeserializer<Object>",
      "info" : "ParameterizedType[6707-6731]:ParameterizedType[6707-6731]"
    }, {
      "left" : "_findCustomDeser",
      "right" : "_findCustomDeser",
      "info" : "SimpleName[6732-6748]:SimpleName[6732-6748]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[6749-6776]:SingleVariableDeclaration[6749-6776]"
    }, {
      "left" : "JavaType type",
      "right" : "JavaType type",
      "info" : "SingleVariableDeclaration[6778-6791]:SingleVariableDeclaration[6778-6791]"
    }, {
      "left" : "JsonMappingException",
      "right" : "JsonMappingException",
      "info" : "SimpleType[6808-6828]:SimpleType[6808-6828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6833-7052]:Block[6833-7052]"
    }, {
      "left" : "return ctxt.findNonContextualValueDeserializer(type);",
      "right" : "return ctxt.findNonContextualValueDeserializer(type);",
      "info" : "ReturnStatement[6993-7046]:ReturnStatement[6993-7046]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7058-7067]:Modifier[7058-7067]"
    }, {
      "left" : "JsonDeserializer<Object>",
      "right" : "JsonDeserializer<Object>",
      "info" : "ParameterizedType[7068-7092]:ParameterizedType[7068-7092]"
    }, {
      "left" : "_clearIfStdImpl",
      "right" : "_clearIfStdImpl",
      "info" : "SimpleName[7093-7108]:SimpleName[7093-7108]"
    }, {
      "left" : "JsonDeserializer<Object> deser",
      "right" : "JsonDeserializer<Object> deser",
      "info" : "SingleVariableDeclaration[7109-7139]:SingleVariableDeclaration[7109-7139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7141-7213]:Block[7141-7213]"
    }, {
      "left" : "return ClassUtil.isJacksonStdImpl(deser) ? null : deser;",
      "right" : "return ClassUtil.isJacksonStdImpl(deser) ? null : deser;",
      "info" : "ReturnStatement[7151-7207]:ReturnStatement[7151-7207]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7383-7392]:MarkerAnnotation[7383-7392]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7397-7403]:Modifier[7397-7403]"
    }, {
      "left" : "JsonDeserializer<?>",
      "right" : "JsonDeserializer<?>",
      "info" : "ParameterizedType[7404-7423]:ParameterizedType[7404-7423]"
    }, {
      "left" : "createContextual",
      "right" : "createContextual",
      "info" : "SimpleName[7424-7440]:SimpleName[7424-7440]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[7441-7468]:SingleVariableDeclaration[7441-7468]"
    }, {
      "left" : "BeanProperty property",
      "right" : "BeanProperty property",
      "info" : "SingleVariableDeclaration[7482-7503]:SingleVariableDeclaration[7482-7503]"
    }, {
      "left" : "JsonMappingException",
      "right" : "JsonMappingException",
      "info" : "SimpleType[7512-7532]:SimpleType[7512-7532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7537-7963]:Block[7537-7963]"
    }, {
      "left" : "if ((_stringDeserializer == null) && (_numberDeserializer == null)\n                && (_mapDeserializer == null) && (_listDeserializer == null)\n                &&  getClass() == UntypedObjectDeserializer.class)",
      "right" : "if ((_stringDeserializer == null) && (_numberDeserializer == null)\n                && (_mapDeserializer == null) && (_listDeserializer == null)\n                &&  getClass() == UntypedObjectDeserializer.class)",
      "info" : "IfStatement[7682-7936]:IfStatement[7682-7936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7893-7936]:Block[7893-7936]"
    }, {
      "left" : "return Vanilla.std;",
      "right" : "return Vanilla.std;",
      "info" : "ReturnStatement[7907-7926]:ReturnStatement[7907-7926]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[7945-7957]:ReturnStatement[7945-7957]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7969-7978]:Modifier[7969-7978]"
    }, {
      "left" : "JsonDeserializer<?>",
      "right" : "JsonDeserializer<?>",
      "info" : "ParameterizedType[7979-7998]:ParameterizedType[7979-7998]"
    }, {
      "left" : "_withResolved",
      "right" : "_withResolved",
      "info" : "SimpleName[7999-8012]:SimpleName[7999-8012]"
    }, {
      "left" : "JsonDeserializer<?> mapDeser",
      "right" : "JsonDeserializer<?> mapDeser",
      "info" : "SingleVariableDeclaration[8013-8041]:SingleVariableDeclaration[8013-8041]"
    }, {
      "left" : "JsonDeserializer<?> listDeser",
      "right" : "JsonDeserializer<?> listDeser",
      "info" : "SingleVariableDeclaration[8055-8084]:SingleVariableDeclaration[8055-8084]"
    }, {
      "left" : "JsonDeserializer<?> stringDeser",
      "right" : "JsonDeserializer<?> stringDeser",
      "info" : "SingleVariableDeclaration[8098-8129]:SingleVariableDeclaration[8098-8129]"
    }, {
      "left" : "JsonDeserializer<?> numberDeser",
      "right" : "JsonDeserializer<?> numberDeser",
      "info" : "SingleVariableDeclaration[8131-8162]:SingleVariableDeclaration[8131-8162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8164-8286]:Block[8164-8286]"
    }, {
      "left" : "return new UntypedObjectDeserializer(this,\n                mapDeser, listDeser, stringDeser, numberDeser);",
      "right" : "return new UntypedObjectDeserializer(this,\n                mapDeser, listDeser, stringDeser, numberDeser);",
      "info" : "ReturnStatement[8174-8280]:ReturnStatement[8174-8280]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8685-8694]:MarkerAnnotation[8685-8694]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8699-8705]:Modifier[8699-8705]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[8706-8713]:PrimitiveType[8706-8713]"
    }, {
      "left" : "isCachable",
      "right" : "isCachable",
      "info" : "SimpleName[8714-8724]:SimpleName[8714-8724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8727-9017]:Block[8727-9017]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8999-9011]:ReturnStatement[8999-9011]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9023-9032]:MarkerAnnotation[9023-9032]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9037-9043]:Modifier[9037-9043]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[9044-9050]:SimpleType[9044-9050]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[9051-9062]:SimpleName[9051-9062]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[9063-9075]:SingleVariableDeclaration[9063-9075]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[9077-9104]:SingleVariableDeclaration[9077-9104]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9113-9124]:SimpleType[9113-9124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9129-11629]:Block[9129-11669]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_START_OBJECT:\n        case JsonTokenId.ID_FIELD_NAME:\n            // 28-Oct-2015, tatu: [
databind#989] We may also be given END_OBJECT (similar to FIELD_NAME),\n            //    if caller has advanced to the first token of Object, but for empty Object\n            if (_mapDeserializer != null) {\n                return _mapDeserializer.deserialize(p, ctxt);\n            }\n            return mapObject(p, ctxt);\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                return mapArrayToArray(p, ctxt);\n            }\n            if (_listDeserializer != null) {\n                return _listDeserializer.deserialize(p, ctxt);\n            }\n            return mapArray(p, ctxt);\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\n            return p.getEmbeddedObject();\n        case JsonTokenId.ID_STRING:\n            if (_stringDeserializer != null) {\n                return _stringDeserializer.deserialize(p, ctxt);\n            }\n            return p.getText();\n\n        case JsonTokenId.ID_NUMBER_INT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n            /* Caller may want to get all integral values returned as {@link java.math.BigInteger},\n             * or {@link java.lang.Long} for consistency\n             */\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                return _coerceIntegral(p, ctxt);\n            }\n            return p.getNumberValue(); // should be optimal, whatever it is\n\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n            /* [JACKSON-72]: need to allow overriding the behavior regarding\n             *   which type to use\n             */\n            if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                return p.getDecimalValue();\n            }\n            return p.getDoubleValue();\n\n        case JsonTokenId.ID_TRUE:\n            return Boolean.TRUE;\n        case JsonTokenId.ID_FALSE:\n            return Boolean.FALSE;\n\n        case JsonTokenId.ID_NULL: // should not get this but...\n            return null;\n\n//        case JsonTokenId.ID_END_ARRAY: // invalid\n        default:\n        }",
      "right" : "switch (p.getCurrentTokenId()) {\n        case JsonTokenId.ID_START_OBJECT:\n        case JsonTokenId.ID_FIELD_NAME:\n            // 28-Oct-2015, tatu: [
databind#989] We may also be given END_OBJECT (similar to FIELD_NAME),\n            //    if caller has advanced to the first token of Object, but for empty Object\n        case JsonTokenId.ID_END_OBJECT:\n            if (_mapDeserializer != null) {\n                return _mapDeserializer.deserialize(p, ctxt);\n            }\n            return mapObject(p, ctxt);\n        case JsonTokenId.ID_START_ARRAY:\n            if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                return mapArrayToArray(p, ctxt);\n            }\n            if (_listDeserializer != null) {\n                return _listDeserializer.deserialize(p, ctxt);\n            }\n            return mapArray(p, ctxt);\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\n            return p.getEmbeddedObject();\n        case JsonTokenId.ID_STRING:\n            if (_stringDeserializer != null) {\n                return _stringDeserializer.deserialize(p, ctxt);\n            }\n            return p.getText();\n\n        case JsonTokenId.ID_NUMBER_INT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n            /* Caller may want to get all integral values returned as {@link java.math.BigInteger},\n             * or {@link java.lang.Long} for consistency\n             */\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                return _coerceIntegral(p, ctxt);\n            }\n            return p.getNumberValue(); // should be optimal, whatever it is\n\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n            /* [JACKSON-72]: need to allow overriding the behavior regarding\n             *   which type to use\n             */\n            if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                return p.getDecimalValue();\n            }\n            return p.getDoubleValue();\n\n        case JsonTokenId.ID_TRUE:\n            return Boolean.TRUE;\n        case JsonTokenId.ID_FALSE:\n            return Boolean.FALSE;\n\n        case JsonTokenId.ID_NULL: // should not get this but...\n            return null;\n\n//        case JsonTokenId.ID_END_ARRAY: // invalid\n        default:\n        }",
      "info" : "SwitchStatement[9139-11572]:SwitchStatement[9139-11612]"
    }, {
      "left" : "case JsonTokenId.ID_START_OBJECT:",
      "right" : "case JsonTokenId.ID_START_OBJECT:",
      "info" : "SwitchCase[9180-9213]:SwitchCase[9180-9213]"
    }, {
      "left" : "case JsonTokenId.ID_FIELD_NAME:",
      "right" : "case JsonTokenId.ID_FIELD_NAME:",
      "info" : "SwitchCase[9222-9253]:SwitchCase[9222-9253]"
    }, {
      "left" : "if (_mapDeserializer != null)",
      "right" : "if (_mapDeserializer != null)",
      "info" : "IfStatement[9464-9571]:IfStatement[9504-9611]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9494-9571]:Block[9534-9611]"
    }, {
      "left" : "return _mapDeserializer.deserialize(p, ctxt);",
      "right" : "return _mapDeserializer.deserialize(p, ctxt);",
      "info" : "ReturnStatement[9512-9557]:ReturnStatement[9552-9597]"
    }, {
      "left" : "return mapObject(p, ctxt);",
      "right" : "return mapObject(p, ctxt);",
      "info" : "ReturnStatement[9584-9610]:ReturnStatement[9624-9650]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[9619-9651]:SwitchCase[9659-9691]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))",
      "info" : "IfStatement[9664-9802]:IfStatement[9704-9842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9738-9802]:Block[9778-9842]"
    }, {
      "left" : "return mapArrayToArray(p, ctxt);",
      "right" : "return mapArrayToArray(p, ctxt);",
      "info" : "ReturnStatement[9756-9788]:ReturnStatement[9796-9828]"
    }, {
      "left" : "if (_listDeserializer != null)",
      "right" : "if (_listDeserializer != null)",
      "info" : "IfStatement[9815-9924]:IfStatement[9855-9964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9846-9924]:Block[9886-9964]"
    }, {
      "left" : "return _listDeserializer.deserialize(p, ctxt);",
      "right" : "return _listDeserializer.deserialize(p, ctxt);",
      "info" : "ReturnStatement[9864-9910]:ReturnStatement[9904-9950]"
    }, {
      "left" : "return mapArray(p, ctxt);",
      "right" : "return mapArray(p, ctxt);",
      "info" : "ReturnStatement[9937-9962]:ReturnStatement[9977-10002]"
    }, {
      "left" : "case JsonTokenId.ID_EMBEDDED_OBJECT:",
      "right" : "case JsonTokenId.ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[9971-10007]:SwitchCase[10011-10047]"
    }, {
      "left" : "return p.getEmbeddedObject();",
      "right" : "return p.getEmbeddedObject();",
      "info" : "ReturnStatement[10020-10049]:ReturnStatement[10060-10089]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[10058-10085]:SwitchCase[10098-10125]"
    }, {
      "left" : "if (_stringDeserializer != null)",
      "right" : "if (_stringDeserializer != null)",
      "info" : "IfStatement[10098-10211]:IfStatement[10138-10251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10131-10211]:Block[10171-10251]"
    }, {
      "left" : "return _stringDeserializer.deserialize(p, ctxt);",
      "right" : "return _stringDeserializer.deserialize(p, ctxt);",
      "info" : "ReturnStatement[10149-10197]:ReturnStatement[10189-10237]"
    }, {
      "left" : "return p.getText();",
      "right" : "return p.getText();",
      "info" : "ReturnStatement[10224-10243]:ReturnStatement[10264-10283]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[10253-10284]:SwitchCase[10293-10324]"
    }, {
      "left" : "if (_numberDeserializer != null)",
      "right" : "if (_numberDeserializer != null)",
      "info" : "IfStatement[10297-10410]:IfStatement[10337-10450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10330-10410]:Block[10370-10450]"
    }, {
      "left" : "return _numberDeserializer.deserialize(p, ctxt);",
      "right" : "return _numberDeserializer.deserialize(p, ctxt);",
      "info" : "ReturnStatement[10348-10396]:ReturnStatement[10388-10436]"
    }, {
      "left" : "if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS))",
      "right" : "if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS))",
      "info" : "IfStatement[10596-10710]:IfStatement[10636-10750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10646-10710]:Block[10686-10750]"
    }, {
      "left" : "return _coerceIntegral(p, ctxt);",
      "right" : "return _coerceIntegral(p, ctxt);",
      "info" : "ReturnStatement[10664-10696]:ReturnStatement[10704-10736]"
    }, {
      "left" : "return p.getNumberValue();",
      "right" : "return p.getNumberValue();",
      "info" : "ReturnStatement[10723-10749]:ReturnStatement[10763-10789]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[10796-10829]:SwitchCase[10836-10869]"
    }, {
      "left" : "if (_numberDeserializer != null)",
      "right" : "if (_numberDeserializer != null)",
      "info" : "IfStatement[10842-10955]:IfStatement[10882-10995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10875-10955]:Block[10915-10995]"
    }, {
      "left" : "return _numberDeserializer.deserialize(p, ctxt);",
      "right" : "return _numberDeserializer.deserialize(p, ctxt);",
      "info" : "ReturnStatement[10893-10941]:ReturnStatement[10933-10981]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "info" : "IfStatement[11096-11226]:IfStatement[11136-11266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11167-11226]:Block[11207-11266]"
    }, {
      "left" : "return p.getDecimalValue();",
      "right" : "return p.getDecimalValue();",
      "info" : "ReturnStatement[11185-11212]:ReturnStatement[11225-11252]"
    }, {
      "left" : "return p.getDoubleValue();",
      "right" : "return p.getDoubleValue();",
      "info" : "ReturnStatement[11239-11265]:ReturnStatement[11279-11305]"
    }, {
      "left" : "case JsonTokenId.ID_TRUE:",
      "right" : "case JsonTokenId.ID_TRUE:",
      "info" : "SwitchCase[11275-11300]:SwitchCase[11315-11340]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[11313-11333]:ReturnStatement[11353-11373]"
    }, {
      "left" : "case JsonTokenId.ID_FALSE:",
      "right" : "case JsonTokenId.ID_FALSE:",
      "info" : "SwitchCase[11342-11368]:SwitchCase[11382-11408]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[11381-11402]:ReturnStatement[11421-11442]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[11412-11437]:SwitchCase[11452-11477]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[11480-11492]:ReturnStatement[11520-11532]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11554-11562]:SwitchCase[11594-11602]"
    }, {
      "left" : "throw ctxt.mappingException(Object.class);",
      "right" : "throw ctxt.mappingException(Object.class);",
      "info" : "ThrowStatement[11581-11623]:ThrowStatement[11621-11663]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11635-11644]:MarkerAnnotation[11675-11684]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11649-11655]:Modifier[11689-11695]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[11656-11662]:SimpleType[11696-11702]"
    }, {
      "left" : "deserializeWithType",
      "right" : "deserializeWithType",
      "info" : "SimpleName[11663-11682]:SimpleName[11703-11722]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[11683-11695]:SingleVariableDeclaration[11723-11735]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[11697-11724]:SingleVariableDeclaration[11737-11764]"
    }, {
      "left" : "TypeDeserializer typeDeserializer",
      "right" : "TypeDeserializer typeDeserializer",
      "info" : "SingleVariableDeclaration[11726-11759]:SingleVariableDeclaration[11766-11799]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11768-11779]:SimpleType[11808-11819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11784-13760]:Block[11824-13800]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n        // First: does it look like we had type id wrapping of some kind?\n        case JsonTokenId.ID_START_ARRAY:\n        case JsonTokenId.ID_START_OBJECT:\n        case JsonTokenId.ID_FIELD_NAME:\n            /* Output can be as JSON Object, Array or scalar: no way to know\n             * a this point:\n             */\n            return typeDeserializer.deserializeTypedFromAny(p, ctxt);\n\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\n            return p.getEmbeddedObject();\n            \n        /* Otherwise we probably got a \"native\" type (ones that map\n         * naturally and thus do not need or use type ids)\n         */\n        case JsonTokenId.ID_STRING:\n            if (_stringDeserializer != null) {\n                return _stringDeserializer.deserialize(p, ctxt);\n            }\n            return p.getText();\n\n        case JsonTokenId.ID_NUMBER_INT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n            // May need coercion to \"bigger\" types:\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                return _coerceIntegral(p, ctxt);\n            }\n            return p.getNumberValue(); // should be optimal, whatever it is\n\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n            if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                return p.getDecimalValue();\n            }\n            return Double.valueOf(p.getDoubleValue());\n\n        case JsonTokenId.ID_TRUE:\n            return Boolean.TRUE;\n        case JsonTokenId.ID_FALSE:\n            return Boolean.FALSE;\n\n        case JsonTokenId.ID_NULL: // should not get this far really but...\n            return null;\n        default:\n        }",
      "right" : "switch (p.getCurrentTokenId()) {\n        // First: does it look like we had type id wrapping of some kind?\n        case JsonTokenId.ID_START_ARRAY:\n        case JsonTokenId.ID_START_OBJECT:\n        case JsonTokenId.ID_FIELD_NAME:\n            /* Output can be as JSON Object, Array or scalar: no way to know\n             * a this point:\n             */\n            return typeDeserializer.deserializeTypedFromAny(p, ctxt);\n\n        case JsonTokenId.ID_EMBEDDED_OBJECT:\n            return p.getEmbeddedObject();\n            \n        /* Otherwise we probably got a \"native\" type (ones that map\n         * naturally and thus do not need or use type ids)\n         */\n        case JsonTokenId.ID_STRING:\n            if (_stringDeserializer != null) {\n                return _stringDeserializer.deserialize(p, ctxt);\n            }\n            return p.getText();\n\n        case JsonTokenId.ID_NUMBER_INT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n            // May need coercion to \"bigger\" types:\n            if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                return _coerceIntegral(p, ctxt);\n            }\n            return p.getNumberValue(); // should be optimal, whatever it is\n\n        case JsonTokenId.ID_NUMBER_FLOAT:\n            if (_numberDeserializer != null) {\n                return _numberDeserializer.deserialize(p, ctxt);\n            }\n            if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                return p.getDecimalValue();\n            }\n            return Double.valueOf(p.getDoubleValue());\n\n        case JsonTokenId.ID_TRUE:\n            return Boolean.TRUE;\n        case JsonTokenId.ID_FALSE:\n            return Boolean.FALSE;\n\n        case JsonTokenId.ID_NULL: // should not get this far really but...\n            return null;\n        default:\n        }",
      "info" : "SwitchStatement[11794-13703]:SwitchStatement[11834-13743]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[11909-11941]:SwitchCase[11949-11981]"
    }, {
      "left" : "case JsonTokenId.ID_START_OBJECT:",
      "right" : "case JsonTokenId.ID_START_OBJECT:",
      "info" : "SwitchCase[11950-11983]:SwitchCase[11990-12023]"
    }, {
      "left" : "case JsonTokenId.ID_FIELD_NAME:",
      "right" : "case JsonTokenId.ID_FIELD_NAME:",
      "info" : "SwitchCase[11992-12023]:SwitchCase[12032-12063]"
    }, {
      "left" : "return typeDeserializer.deserializeTypedFromAny(p, ctxt);",
      "right" : "return typeDeserializer.deserializeTypedFromAny(p, ctxt);",
      "info" : "ReturnStatement[12158-12215]:ReturnStatement[12198-12255]"
    }, {
      "left" : "case JsonTokenId.ID_EMBEDDED_OBJECT:",
      "right" : "case JsonTokenId.ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[12225-12261]:SwitchCase[12265-12301]"
    }, {
      "left" : "return p.getEmbeddedObject();",
      "right" : "return p.getEmbeddedObject();",
      "info" : "ReturnStatement[12274-12303]:ReturnStatement[12314-12343]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[12464-12491]:SwitchCase[12504-12531]"
    }, {
      "left" : "if (_stringDeserializer != null)",
      "right" : "if (_stringDeserializer != null)",
      "info" : "IfStatement[12504-12617]:IfStatement[12544-12657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12537-12617]:Block[12577-12657]"
    }, {
      "left" : "return _stringDeserializer.deserialize(p, ctxt);",
      "right" : "return _stringDeserializer.deserialize(p, ctxt);",
      "info" : "ReturnStatement[12555-12603]:ReturnStatement[12595-12643]"
    }, {
      "left" : "return p.getText();",
      "right" : "return p.getText();",
      "info" : "ReturnStatement[12630-12649]:ReturnStatement[12670-12689]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[12659-12690]:SwitchCase[12699-12730]"
    }, {
      "left" : "if (_numberDeserializer != null)",
      "right" : "if (_numberDeserializer != null)",
      "info" : "IfStatement[12703-12816]:IfStatement[12743-12856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12736-12816]:Block[12776-12856]"
    }, {
      "left" : "return _numberDeserializer.deserialize(p, ctxt);",
      "right" : "return _numberDeserializer.deserialize(p, ctxt);",
      "info" : "ReturnStatement[12754-12802]:ReturnStatement[12794-12842]"
    }, {
      "left" : "if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS))",
      "right" : "if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS))",
      "info" : "IfStatement[12881-12995]:IfStatement[12921-13035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12931-12995]:Block[12971-13035]"
    }, {
      "left" : "return _coerceIntegral(p, ctxt);",
      "right" : "return _coerceIntegral(p, ctxt);",
      "info" : "ReturnStatement[12949-12981]:ReturnStatement[12989-13021]"
    }, {
      "left" : "return p.getNumberValue();",
      "right" : "return p.getNumberValue();",
      "info" : "ReturnStatement[13008-13034]:ReturnStatement[13048-13074]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[13081-13114]:SwitchCase[13121-13154]"
    }, {
      "left" : "if (_numberDeserializer != null)",
      "right" : "if (_numberDeserializer != null)",
      "info" : "IfStatement[13127-13240]:IfStatement[13167-13280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13160-13240]:Block[13200-13280]"
    }, {
      "left" : "return _numberDeserializer.deserialize(p, ctxt);",
      "right" : "return _numberDeserializer.deserialize(p, ctxt);",
      "info" : "ReturnStatement[13178-13226]:ReturnStatement[13218-13266]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "info" : "IfStatement[13253-13383]:IfStatement[13293-13423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13324-13383]:Block[13364-13423]"
    }, {
      "left" : "return p.getDecimalValue();",
      "right" : "return p.getDecimalValue();",
      "info" : "ReturnStatement[13342-13369]:ReturnStatement[13382-13409]"
    }, {
      "left" : "return Double.valueOf(p.getDoubleValue());",
      "right" : "return Double.valueOf(p.getDoubleValue());",
      "info" : "ReturnStatement[13396-13438]:ReturnStatement[13436-13478]"
    }, {
      "left" : "case JsonTokenId.ID_TRUE:",
      "right" : "case JsonTokenId.ID_TRUE:",
      "info" : "SwitchCase[13448-13473]:SwitchCase[13488-13513]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[13486-13506]:ReturnStatement[13526-13546]"
    }, {
      "left" : "case JsonTokenId.ID_FALSE:",
      "right" : "case JsonTokenId.ID_FALSE:",
      "info" : "SwitchCase[13515-13541]:SwitchCase[13555-13581]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[13554-13575]:ReturnStatement[13594-13615]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[13585-13610]:SwitchCase[13625-13650]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[13664-13676]:ReturnStatement[13704-13716]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13685-13693]:SwitchCase[13725-13733]"
    }, {
      "left" : "throw ctxt.mappingException(Object.class);",
      "right" : "throw ctxt.mappingException(Object.class);",
      "info" : "ThrowStatement[13712-13754]:ThrowStatement[13752-13794]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[14014-14023]:Modifier[14054-14063]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[14024-14030]:SimpleType[14064-14070]"
    }, {
      "left" : "mapArray",
      "right" : "mapArray",
      "info" : "SimpleName[14031-14039]:SimpleName[14071-14079]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[14040-14053]:SingleVariableDeclaration[14080-14093]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[14055-14082]:SingleVariableDeclaration[14095-14122]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14091-14102]:SimpleType[14131-14142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14107-15499]:Block[14147-15539]"
    }, {
      "left" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "right" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "info" : "IfStatement[14204-14304]:IfStatement[14244-14344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14248-14304]:Block[14288-14344]"
    }, {
      "left" : "return new ArrayList<Object>(2);",
      "right" : "return new ArrayList<Object>(2);",
      "info" : "ReturnStatement[14262-14294]:ReturnStatement[14302-14334]"
    }, {
      "left" : "Object value = deserialize(jp, ctxt);",
      "right" : "Object value = deserialize(jp, ctxt);",
      "info" : "VariableDeclarationStatement[14313-14350]:VariableDeclarationStatement[14353-14390]"
    }, {
      "left" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "right" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "info" : "IfStatement[14359-14522]:IfStatement[14399-14562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14403-14522]:Block[14443-14562]"
    }, {
      "left" : "ArrayList<Object> l = new ArrayList<Object>(2);",
      "right" : "ArrayList<Object> l = new ArrayList<Object>(2);",
      "info" : "VariableDeclarationStatement[14417-14464]:VariableDeclarationStatement[14457-14504]"
    }, {
      "left" : "l.add(value);",
      "right" : "l.add(value);",
      "info" : "ExpressionStatement[14477-14490]:ExpressionStatement[14517-14530]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[14503-14512]:ReturnStatement[14543-14552]"
    }, {
      "left" : "Object value2 = deserialize(jp, ctxt);",
      "right" : "Object value2 = deserialize(jp, ctxt);",
      "info" : "VariableDeclarationStatement[14531-14569]:VariableDeclarationStatement[14571-14609]"
    }, {
      "left" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "right" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "info" : "IfStatement[14578-14768]:IfStatement[14618-14808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14622-14768]:Block[14662-14808]"
    }, {
      "left" : "ArrayList<Object> l = new ArrayList<Object>(2);",
      "right" : "ArrayList<Object> l = new ArrayList<Object>(2);",
      "info" : "VariableDeclarationStatement[14636-14683]:VariableDeclarationStatement[14676-14723]"
    }, {
      "left" : "l.add(value);",
      "right" : "l.add(value);",
      "info" : "ExpressionStatement[14696-14709]:ExpressionStatement[14736-14749]"
    }, {
      "left" : "l.add(value2);",
      "right" : "l.add(value2);",
      "info" : "ExpressionStatement[14722-14736]:ExpressionStatement[14762-14776]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[14749-14758]:ReturnStatement[14789-14798]"
    }, {
      "left" : "ObjectBuffer buffer = ctxt.leaseObjectBuffer();",
      "right" : "ObjectBuffer buffer = ctxt.leaseObjectBuffer();",
      "info" : "VariableDeclarationStatement[14777-14824]:VariableDeclarationStatement[14817-14864]"
    }, {
      "left" : "Object[] values = buffer.resetAndStart();",
      "right" : "Object[] values = buffer.resetAndStart();",
      "info" : "VariableDeclarationStatement[14833-14874]:VariableDeclarationStatement[14873-14914]"
    }, {
      "left" : "int ptr = 0;",
      "right" : "int ptr = 0;",
      "info" : "VariableDeclarationStatement[14883-14895]:VariableDeclarationStatement[14923-14935]"
    }, {
      "left" : "values[ptr++] = value;",
      "right" : "values[ptr++] = value;",
      "info" : "ExpressionStatement[14904-14926]:ExpressionStatement[14944-14966]"
    }, {
      "left" : "values[ptr++] = value2;",
      "right" : "values[ptr++] = value2;",
      "info" : "ExpressionStatement[14935-14958]:ExpressionStatement[14975-14998]"
    }, {
      "left" : "int totalSize = ptr;",
      "right" : "int totalSize = ptr;",
      "info" : "VariableDeclarationStatement[14967-14987]:VariableDeclarationStatement[15007-15027]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[14996-15301]:DoStatement[15036-15341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14999-15254]:Block[15039-15294]"
    }, {
      "left" : "value = deserialize(jp, ctxt);",
      "right" : "value = deserialize(jp, ctxt);",
      "info" : "ExpressionStatement[15013-15043]:ExpressionStatement[15053-15083]"
    }, {
      "left" : "++totalSize;",
      "right" : "++totalSize;",
      "info" : "ExpressionStatement[15056-15068]:ExpressionStatement[15096-15108]"
    }, {
      "left" : "if (ptr >= values.length)",
      "right" : "if (ptr >= values.length)",
      "info" : "IfStatement[15081-15209]:IfStatement[15121-15249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15107-15209]:Block[15147-15249]"
    }, {
      "left" : "values = buffer.appendCompletedChunk(values);",
      "right" : "values = buffer.appendCompletedChunk(values);",
      "info" : "ExpressionStatement[15125-15170]:ExpressionStatement[15165-15210]"
    }, {
      "left" : "ptr = 0;",
      "right" : "ptr = 0;",
      "info" : "ExpressionStatement[15187-15195]:ExpressionStatement[15227-15235]"
    }, {
      "left" : "values[ptr++] = value;",
      "right" : "values[ptr++] = value;",
      "info" : "ExpressionStatement[15222-15244]:ExpressionStatement[15262-15284]"
    }, {
      "left" : "ArrayList<Object> result = new ArrayList<Object>(totalSize);",
      "right" : "ArrayList<Object> result = new ArrayList<Object>(totalSize);",
      "info" : "VariableDeclarationStatement[15350-15410]:VariableDeclarationStatement[15390-15450]"
    }, {
      "left" : "buffer.completeAndClearBuffer(values, ptr, result);",
      "right" : "buffer.completeAndClearBuffer(values, ptr, result);",
      "info" : "ExpressionStatement[15419-15470]:ExpressionStatement[15459-15510]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[15479-15493]:ReturnStatement[15519-15533]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15582-15591]:Modifier[15622-15631]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[15592-15598]:SimpleType[15632-15638]"
    }, {
      "left" : "mapObject",
      "right" : "mapObject",
      "info" : "SimpleName[15599-15608]:SimpleName[15639-15648]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[15609-15621]:SingleVariableDeclaration[15649-15661]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[15623-15650]:SingleVariableDeclaration[15663-15690]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15659-15670]:SimpleType[15699-15710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15675-17664]:Block[15715-17704]"
    }, {
      "left" : "String key1;",
      "right" : "String key1;",
      "info" : "VariableDeclarationStatement[15685-15697]:VariableDeclarationStatement[15725-15737]"
    }, {
      "left" : "JsonToken t = p.getCurrentToken();",
      "right" : "JsonToken t = p.getCurrentToken();",
      "info" : "VariableDeclarationStatement[15707-15741]:VariableDeclarationStatement[15747-15781]"
    }, {
      "left" : "if (t == JsonToken.START_OBJECT)",
      "right" : "if (t == JsonToken.START_OBJECT)",
      "info" : "IfStatement[15759-16110]:IfStatement[15799-16150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15792-15841]:Block[15832-15881]"
    }, {
      "left" : "key1 = p.nextFieldName();",
      "right" : "key1 = p.nextFieldName();",
      "info" : "ExpressionStatement[15806-15831]:ExpressionStatement[15846-15871]"
    }, {
      "left" : "if (t == JsonToken.FIELD_NAME)",
      "right" : "if (t == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[15847-16110]:IfStatement[15887-16150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15878-15928]:Block[15918-15968]"
    }, {
      "left" : "key1 = p.getCurrentName();",
      "right" : "key1 = p.getCurrentName();",
      "info" : "ExpressionStatement[15892-15918]:ExpressionStatement[15932-15958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15934-16110]:Block[15974-16150]"
    }, {
      "left" : "if (t != JsonToken.END_OBJECT)",
      "right" : "if (t != JsonToken.END_OBJECT)",
      "info" : "IfStatement[15948-16075]:IfStatement[15988-16115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15979-16075]:Block[16019-16115]"
    }, {
      "left" : "throw ctxt.mappingException(handledType(), p.getCurrentToken());",
      "right" : "throw ctxt.mappingException(handledType(), p.getCurrentToken());",
      "info" : "ThrowStatement[15997-16061]:ThrowStatement[16037-16101]"
    }, {
      "left" : "key1 = null;",
      "right" : "key1 = null;",
      "info" : "ExpressionStatement[16088-16100]:ExpressionStatement[16128-16140]"
    }, {
      "left" : "if (key1 == null)",
      "right" : "if (key1 == null)",
      "info" : "IfStatement[16119-16311]:IfStatement[16159-16351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16137-16311]:Block[16177-16351]"
    }, {
      "left" : "return new LinkedHashMap<String,Object>(2);",
      "right" : "return new LinkedHashMap<String,Object>(2);",
      "info" : "ReturnStatement[16258-16301]:ReturnStatement[16298-16341]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[16561-16575]:ExpressionStatement[16601-16615]"
    }, {
      "left" : "Object value1 = deserialize(p, ctxt);",
      "right" : "Object value1 = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[16584-16621]:VariableDeclarationStatement[16624-16661]"
    }, {
      "left" : "String key2 = p.nextFieldName();",
      "right" : "String key2 = p.nextFieldName();",
      "info" : "VariableDeclarationStatement[16631-16663]:VariableDeclarationStatement[16671-16703]"
    }, {
      "left" : "if (key2 == null)",
      "right" : "if (key2 == null)",
      "info" : "IfStatement[16672-16937]:IfStatement[16712-16977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16690-16937]:Block[16730-16977]"
    }, {
      "left" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>(2);",
      "right" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>(2);",
      "info" : "VariableDeclarationStatement[16786-16862]:VariableDeclarationStatement[16826-16902]"
    }, {
      "left" : "result.put(key1, value1);",
      "right" : "result.put(key1, value1);",
      "info" : "ExpressionStatement[16875-16900]:ExpressionStatement[16915-16940]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[16913-16927]:ReturnStatement[16953-16967]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[16946-16960]:ExpressionStatement[16986-17000]"
    }, {
      "left" : "Object value2 = deserialize(p, ctxt);",
      "right" : "Object value2 = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[16969-17006]:VariableDeclarationStatement[17009-17046]"
    }, {
      "left" : "String key = p.nextFieldName();",
      "right" : "String key = p.nextFieldName();",
      "info" : "VariableDeclarationStatement[17016-17047]:VariableDeclarationStatement[17056-17087]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[17057-17277]:IfStatement[17097-17317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17074-17277]:Block[17114-17317]"
    }, {
      "left" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>(4);",
      "right" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>(4);",
      "info" : "VariableDeclarationStatement[17088-17164]:VariableDeclarationStatement[17128-17204]"
    }, {
      "left" : "result.put(key1, value1);",
      "right" : "result.put(key1, value1);",
      "info" : "ExpressionStatement[17177-17202]:ExpressionStatement[17217-17242]"
    }, {
      "left" : "result.put(key2, value2);",
      "right" : "result.put(key2, value2);",
      "info" : "ExpressionStatement[17215-17240]:ExpressionStatement[17255-17280]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[17253-17267]:ReturnStatement[17293-17307]"
    }, {
      "left" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>();",
      "right" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>();",
      "info" : "VariableDeclarationStatement[17347-17422]:VariableDeclarationStatement[17387-17462]"
    }, {
      "left" : "result.put(key1, value1);",
      "right" : "result.put(key1, value1);",
      "info" : "ExpressionStatement[17431-17456]:ExpressionStatement[17471-17496]"
    }, {
      "left" : "result.put(key2, value2);",
      "right" : "result.put(key2, value2);",
      "info" : "ExpressionStatement[17465-17490]:ExpressionStatement[17505-17530]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[17500-17635]:DoStatement[17540-17675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17503-17592]:Block[17543-17632]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[17517-17531]:ExpressionStatement[17557-17571]"
    }, {
      "left" : "result.put(key, deserialize(p, ctxt));",
      "right" : "result.put(key, deserialize(p, ctxt));",
      "info" : "ExpressionStatement[17544-17582]:ExpressionStatement[17584-17622]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[17644-17658]:ReturnStatement[17684-17698]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17764-17773]:Modifier[17804-17813]"
    }, {
      "left" : "Object[]",
      "right" : "Object[]",
      "info" : "ArrayType[17774-17782]:ArrayType[17814-17822]"
    }, {
      "left" : "mapArrayToArray",
      "right" : "mapArrayToArray",
      "info" : "SimpleName[17783-17798]:SimpleName[17823-17838]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[17799-17812]:SingleVariableDeclaration[17839-17852]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[17814-17841]:SingleVariableDeclaration[17854-17881]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17850-17861]:SimpleType[17890-17901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17866-18537]:Block[17906-18577]"
    }, {
      "left" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "right" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "info" : "IfStatement[17963-18049]:IfStatement[18003-18089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18007-18049]:Block[18047-18089]"
    }, {
      "left" : "return NO_OBJECTS;",
      "right" : "return NO_OBJECTS;",
      "info" : "ReturnStatement[18021-18039]:ReturnStatement[18061-18079]"
    }, {
      "left" : "ObjectBuffer buffer = ctxt.leaseObjectBuffer();",
      "right" : "ObjectBuffer buffer = ctxt.leaseObjectBuffer();",
      "info" : "VariableDeclarationStatement[18058-18105]:VariableDeclarationStatement[18098-18145]"
    }, {
      "left" : "Object[] values = buffer.resetAndStart();",
      "right" : "Object[] values = buffer.resetAndStart();",
      "info" : "VariableDeclarationStatement[18114-18155]:VariableDeclarationStatement[18154-18195]"
    }, {
      "left" : "int ptr = 0;",
      "right" : "int ptr = 0;",
      "info" : "VariableDeclarationStatement[18164-18176]:VariableDeclarationStatement[18204-18216]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[18185-18472]:DoStatement[18225-18512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18188-18425]:Block[18228-18465]"
    }, {
      "left" : "Object value = deserialize(jp, ctxt);",
      "right" : "Object value = deserialize(jp, ctxt);",
      "info" : "VariableDeclarationStatement[18202-18239]:VariableDeclarationStatement[18242-18279]"
    }, {
      "left" : "if (ptr >= values.length)",
      "right" : "if (ptr >= values.length)",
      "info" : "IfStatement[18252-18380]:IfStatement[18292-18420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18278-18380]:Block[18318-18420]"
    }, {
      "left" : "values = buffer.appendCompletedChunk(values);",
      "right" : "values = buffer.appendCompletedChunk(values);",
      "info" : "ExpressionStatement[18296-18341]:ExpressionStatement[18336-18381]"
    }, {
      "left" : "ptr = 0;",
      "right" : "ptr = 0;",
      "info" : "ExpressionStatement[18358-18366]:ExpressionStatement[18398-18406]"
    }, {
      "left" : "values[ptr++] = value;",
      "right" : "values[ptr++] = value;",
      "info" : "ExpressionStatement[18393-18415]:ExpressionStatement[18433-18455]"
    }, {
      "left" : "return buffer.completeAndClearBuffer(values, ptr);",
      "right" : "return buffer.completeAndClearBuffer(values, ptr);",
      "info" : "ReturnStatement[18481-18531]:ReturnStatement[18521-18571]"
    }, {
      "left" : "@JacksonStdImpl",
      "right" : "@JacksonStdImpl",
      "info" : "MarkerAnnotation[18787-18802]:MarkerAnnotation[18827-18842]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18807-18813]:Modifier[18847-18853]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18814-18820]:Modifier[18854-18860]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[18821-18826]:TYPE_DECLARATION_KIND[18861-18866]"
    }, {
      "left" : "Vanilla",
      "right" : "Vanilla",
      "info" : "SimpleName[18827-18834]:SimpleName[18867-18874]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19005-19011]:Modifier[19045-19051]"
    }, {
      "left" : "Vanilla",
      "right" : "Vanilla",
      "info" : "SimpleName[19012-19019]:SimpleName[19052-19059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19022-19046]:Block[19062-19086]"
    }, {
      "left" : "super(Object.class);",
      "right" : "super(Object.class);",
      "info" : "SuperConstructorInvocation[19024-19044]:SuperConstructorInvocation[19064-19084]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19056-19065]:MarkerAnnotation[19096-19105]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19074-19080]:Modifier[19114-19120]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[19081-19087]:SimpleType[19121-19127]"
    }, {
      "left" : "deserialize",
      "right" : "deserialize",
      "info" : "SimpleName[19088-19099]:SimpleName[19128-19139]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[19100-19112]:SingleVariableDeclaration[19140-19152]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[19114-19141]:SingleVariableDeclaration[19154-19181]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[19150-19161]:SimpleType[19190-19201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19170-21552]:Block[19210-21696]"
    }, {
      "left" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_START_OBJECT:\n                {\n                    JsonToken t = p.nextToken();\n                    if (t == JsonToken.END_OBJECT) {\n                        return new LinkedHashMap<String,Object>(2);\n                    }\n                }\n            case JsonTokenId.ID_FIELD_NAME:\n                return mapObject(p, ctxt);\n            case JsonTokenId.ID_START_ARRAY:\n                {\n                    JsonToken t = p.nextToken();\n                    if (t == JsonToken.END_ARRAY) { // and empty one too\n                        if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                            return NO_OBJECTS;\n                        }\n                        return new ArrayList<Object>(2);\n                    }\n                }\n                if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                    return mapArrayToArray(p, ctxt);\n                }\n                return mapArray(p, ctxt);\n            case JsonTokenId.ID_EMBEDDED_OBJECT:\n                return p.getEmbeddedObject();\n            case JsonTokenId.ID_STRING:\n                return p.getText();\n\n            case JsonTokenId.ID_NUMBER_INT:\n                if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                    return _coerceIntegral(p, ctxt);\n                }\n                return p.getNumberValue(); // should be optimal, whatever it is\n\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                    return p.getDecimalValue();\n                }\n                return Double.valueOf(p.getDoubleValue());\n\n            case JsonTokenId.ID_TRUE:\n                return Boolean.TRUE;\n            case JsonTokenId.ID_FALSE:\n                return Boolean.FALSE;\n\n            case JsonTokenId.ID_NULL: // should not get this but...\n                return null;\n\n                // 28-Oct-2015, tatu: [
databind#989] We may also be given END_OBJECT (similar to FIELD_NAME),\n                //    if caller has advanced to the first token of Object, but for empty Object\n\n            //case JsonTokenId.ID_END_ARRAY: // invalid\n            default:\n                throw ctxt.mappingException(Object.class);\n            }",
      "right" : "switch (p.getCurrentTokenId()) {\n            case JsonTokenId.ID_START_OBJECT:\n                {\n                    JsonToken t = p.nextToken();\n                    if (t == JsonToken.END_OBJECT) {\n                        return new LinkedHashMap<String,Object>(2);\n                    }\n                }\n            case JsonTokenId.ID_FIELD_NAME:\n                return mapObject(p, ctxt);\n            case JsonTokenId.ID_START_ARRAY:\n                {\n                    JsonToken t = p.nextToken();\n                    if (t == JsonToken.END_ARRAY) { // and empty one too\n                        if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                            return NO_OBJECTS;\n                        }\n                        return new ArrayList<Object>(2);\n                    }\n                }\n                if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY)) {\n                    return mapArrayToArray(p, ctxt);\n                }\n                return mapArray(p, ctxt);\n            case JsonTokenId.ID_EMBEDDED_OBJECT:\n                return p.getEmbeddedObject();\n            case JsonTokenId.ID_STRING:\n                return p.getText();\n\n            case JsonTokenId.ID_NUMBER_INT:\n                if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS)) {\n                    return _coerceIntegral(p, ctxt);\n                }\n                return p.getNumberValue(); // should be optimal, whatever it is\n\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                    return p.getDecimalValue();\n                }\n                return Double.valueOf(p.getDoubleValue());\n\n            case JsonTokenId.ID_TRUE:\n                return Boolean.TRUE;\n            case JsonTokenId.ID_FALSE:\n                return Boolean.FALSE;\n\n            case JsonTokenId.ID_NULL: // should not get this but...\n                return null;\n\n            case JsonTokenId.ID_END_OBJECT:\n                // 28-Oct-2015, tatu: [
databind#989] We may also be given END_OBJECT (similar to FIELD_NAME),\n                //    if caller has advanced to the first token of Object, but for empty Object\n                return new LinkedHashMap<String,Object>(2);\n\n            //case JsonTokenId.ID_END_ARRAY: // invalid\n            default:\n                throw ctxt.mappingException(Object.class);\n            }",
      "info" : "SwitchStatement[19184-21542]:SwitchStatement[19224-21686]"
    }, {
      "left" : "case JsonTokenId.ID_START_OBJECT:",
      "right" : "case JsonTokenId.ID_START_OBJECT:",
      "info" : "SwitchCase[19229-19262]:SwitchCase[19269-19302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19279-19490]:Block[19319-19530]"
    }, {
      "left" : "JsonToken t = p.nextToken();",
      "right" : "JsonToken t = p.nextToken();",
      "info" : "VariableDeclarationStatement[19301-19329]:VariableDeclarationStatement[19341-19369]"
    }, {
      "left" : "if (t == JsonToken.END_OBJECT)",
      "right" : "if (t == JsonToken.END_OBJECT)",
      "info" : "IfStatement[19350-19472]:IfStatement[19390-19512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19381-19472]:Block[19421-19512]"
    }, {
      "left" : "return new LinkedHashMap<String,Object>(2);",
      "right" : "return new LinkedHashMap<String,Object>(2);",
      "info" : "ReturnStatement[19407-19450]:ReturnStatement[19447-19490]"
    }, {
      "left" : "case JsonTokenId.ID_FIELD_NAME:",
      "right" : "case JsonTokenId.ID_FIELD_NAME:",
      "info" : "SwitchCase[19503-19534]:SwitchCase[19543-19574]"
    }, {
      "left" : "return mapObject(p, ctxt);",
      "right" : "return mapObject(p, ctxt);",
      "info" : "ReturnStatement[19551-19577]:ReturnStatement[19591-19617]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[19590-19622]:SwitchCase[19630-19662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19639-20032]:Block[19679-20072]"
    }, {
      "left" : "JsonToken t = p.nextToken();",
      "right" : "JsonToken t = p.nextToken();",
      "info" : "VariableDeclarationStatement[19661-19689]:VariableDeclarationStatement[19701-19729]"
    }, {
      "left" : "if (t == JsonToken.END_ARRAY)",
      "right" : "if (t == JsonToken.END_ARRAY)",
      "info" : "IfStatement[19710-20014]:IfStatement[19750-20054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19740-20014]:Block[19780-20054]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))",
      "info" : "IfStatement[19787-19935]:IfStatement[19827-19975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19861-19935]:Block[19901-19975]"
    }, {
      "left" : "return NO_OBJECTS;",
      "right" : "return NO_OBJECTS;",
      "info" : "ReturnStatement[19891-19909]:ReturnStatement[19931-19949]"
    }, {
      "left" : "return new ArrayList<Object>(2);",
      "right" : "return new ArrayList<Object>(2);",
      "info" : "ReturnStatement[19960-19992]:ReturnStatement[20000-20032]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY))",
      "info" : "IfStatement[20049-20195]:IfStatement[20089-20235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20123-20195]:Block[20163-20235]"
    }, {
      "left" : "return mapArrayToArray(p, ctxt);",
      "right" : "return mapArrayToArray(p, ctxt);",
      "info" : "ReturnStatement[20145-20177]:ReturnStatement[20185-20217]"
    }, {
      "left" : "return mapArray(p, ctxt);",
      "right" : "return mapArray(p, ctxt);",
      "info" : "ReturnStatement[20212-20237]:ReturnStatement[20252-20277]"
    }, {
      "left" : "case JsonTokenId.ID_EMBEDDED_OBJECT:",
      "right" : "case JsonTokenId.ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[20250-20286]:SwitchCase[20290-20326]"
    }, {
      "left" : "return p.getEmbeddedObject();",
      "right" : "return p.getEmbeddedObject();",
      "info" : "ReturnStatement[20303-20332]:ReturnStatement[20343-20372]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[20345-20372]:SwitchCase[20385-20412]"
    }, {
      "left" : "return p.getText();",
      "right" : "return p.getText();",
      "info" : "ReturnStatement[20389-20408]:ReturnStatement[20429-20448]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[20422-20453]:SwitchCase[20462-20493]"
    }, {
      "left" : "if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS))",
      "right" : "if (ctxt.hasSomeOfFeatures(F_MASK_INT_COERCIONS))",
      "info" : "IfStatement[20470-20592]:IfStatement[20510-20632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20520-20592]:Block[20560-20632]"
    }, {
      "left" : "return _coerceIntegral(p, ctxt);",
      "right" : "return _coerceIntegral(p, ctxt);",
      "info" : "ReturnStatement[20542-20574]:ReturnStatement[20582-20614]"
    }, {
      "left" : "return p.getNumberValue();",
      "right" : "return p.getNumberValue();",
      "info" : "ReturnStatement[20609-20635]:ReturnStatement[20649-20675]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[20686-20719]:SwitchCase[20726-20759]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "info" : "IfStatement[20736-20874]:IfStatement[20776-20914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20807-20874]:Block[20847-20914]"
    }, {
      "left" : "return p.getDecimalValue();",
      "right" : "return p.getDecimalValue();",
      "info" : "ReturnStatement[20829-20856]:ReturnStatement[20869-20896]"
    }, {
      "left" : "return Double.valueOf(p.getDoubleValue());",
      "right" : "return Double.valueOf(p.getDoubleValue());",
      "info" : "ReturnStatement[20891-20933]:ReturnStatement[20931-20973]"
    }, {
      "left" : "case JsonTokenId.ID_TRUE:",
      "right" : "case JsonTokenId.ID_TRUE:",
      "info" : "SwitchCase[20947-20972]:SwitchCase[20987-21012]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[20989-21009]:ReturnStatement[21029-21049]"
    }, {
      "left" : "case JsonTokenId.ID_FALSE:",
      "right" : "case JsonTokenId.ID_FALSE:",
      "info" : "SwitchCase[21022-21048]:SwitchCase[21062-21088]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[21065-21086]:ReturnStatement[21105-21126]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[21100-21125]:SwitchCase[21140-21165]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21172-21184]:ReturnStatement[21212-21224]"
    }, {
      "left" : "default:",
      "right" : "case JsonTokenId.ID_END_OBJECT:",
      "info" : "SwitchCase[21461-21469]:SwitchCase[21238-21269]"
    }, {
      "left" : "throw ctxt.mappingException(Object.class);",
      "right" : "throw ctxt.mappingException(Object.class);",
      "info" : "ThrowStatement[21486-21528]:ThrowStatement[21630-21672]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[21562-21571]:MarkerAnnotation[21706-21715]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21580-21586]:Modifier[21724-21730]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[21587-21593]:SimpleType[21731-21737]"
    }, {
      "left" : "deserializeWithType",
      "right" : "deserializeWithType",
      "info" : "SimpleName[21594-21613]:SimpleName[21738-21757]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[21614-21627]:SingleVariableDeclaration[21758-21771]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[21629-21656]:SingleVariableDeclaration[21773-21800]"
    }, {
      "left" : "TypeDeserializer typeDeserializer",
      "right" : "TypeDeserializer typeDeserializer",
      "info" : "SingleVariableDeclaration[21658-21691]:SingleVariableDeclaration[21802-21835]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21700-21711]:SimpleType[21844-21855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21720-23026]:Block[21864-23170]"
    }, {
      "left" : "switch (jp.getCurrentTokenId()) {\n            case JsonTokenId.ID_START_ARRAY:\n            case JsonTokenId.ID_START_OBJECT:\n            case JsonTokenId.ID_FIELD_NAME:\n                return typeDeserializer.deserializeTypedFromAny(jp, ctxt);\n\n            case JsonTokenId.ID_STRING:\n                return jp.getText();\n\n            case JsonTokenId.ID_NUMBER_INT:\n                if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {\n                    return jp.getBigIntegerValue();\n                }\n                return jp.getNumberValue();\n\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                    return jp.getDecimalValue();\n                }\n                return Double.valueOf(jp.getDoubleValue());\n\n            case JsonTokenId.ID_TRUE:\n                return Boolean.TRUE;\n            case JsonTokenId.ID_FALSE:\n                return Boolean.FALSE;\n            case JsonTokenId.ID_EMBEDDED_OBJECT:\n                return jp.getEmbeddedObject();\n\n            case JsonTokenId.ID_NULL: // should not get this far really but...\n                return null;\n            default:\n                throw ctxt.mappingException(Object.class);\n            }",
      "right" : "switch (jp.getCurrentTokenId()) {\n            case JsonTokenId.ID_START_ARRAY:\n            case JsonTokenId.ID_START_OBJECT:\n            case JsonTokenId.ID_FIELD_NAME:\n                return typeDeserializer.deserializeTypedFromAny(jp, ctxt);\n\n            case JsonTokenId.ID_STRING:\n                return jp.getText();\n\n            case JsonTokenId.ID_NUMBER_INT:\n                if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS)) {\n                    return jp.getBigIntegerValue();\n                }\n                return jp.getNumberValue();\n\n            case JsonTokenId.ID_NUMBER_FLOAT:\n                if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS)) {\n                    return jp.getDecimalValue();\n                }\n                return Double.valueOf(jp.getDoubleValue());\n\n            case JsonTokenId.ID_TRUE:\n                return Boolean.TRUE;\n            case JsonTokenId.ID_FALSE:\n                return Boolean.FALSE;\n            case JsonTokenId.ID_EMBEDDED_OBJECT:\n                return jp.getEmbeddedObject();\n\n            case JsonTokenId.ID_NULL: // should not get this far really but...\n                return null;\n            default:\n                throw ctxt.mappingException(Object.class);\n            }",
      "info" : "SwitchStatement[21734-23016]:SwitchStatement[21878-23160]"
    }, {
      "left" : "case JsonTokenId.ID_START_ARRAY:",
      "right" : "case JsonTokenId.ID_START_ARRAY:",
      "info" : "SwitchCase[21780-21812]:SwitchCase[21924-21956]"
    }, {
      "left" : "case JsonTokenId.ID_START_OBJECT:",
      "right" : "case JsonTokenId.ID_START_OBJECT:",
      "info" : "SwitchCase[21825-21858]:SwitchCase[21969-22002]"
    }, {
      "left" : "case JsonTokenId.ID_FIELD_NAME:",
      "right" : "case JsonTokenId.ID_FIELD_NAME:",
      "info" : "SwitchCase[21871-21902]:SwitchCase[22015-22046]"
    }, {
      "left" : "return typeDeserializer.deserializeTypedFromAny(jp, ctxt);",
      "right" : "return typeDeserializer.deserializeTypedFromAny(jp, ctxt);",
      "info" : "ReturnStatement[21919-21977]:ReturnStatement[22063-22121]"
    }, {
      "left" : "case JsonTokenId.ID_STRING:",
      "right" : "case JsonTokenId.ID_STRING:",
      "info" : "SwitchCase[21991-22018]:SwitchCase[22135-22162]"
    }, {
      "left" : "return jp.getText();",
      "right" : "return jp.getText();",
      "info" : "ReturnStatement[22035-22055]:ReturnStatement[22179-22199]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_INT:",
      "right" : "case JsonTokenId.ID_NUMBER_INT:",
      "info" : "SwitchCase[22069-22100]:SwitchCase[22213-22244]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_INTEGER_FOR_INTS))",
      "info" : "IfStatement[22117-22257]:IfStatement[22261-22401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22186-22257]:Block[22330-22401]"
    }, {
      "left" : "return jp.getBigIntegerValue();",
      "right" : "return jp.getBigIntegerValue();",
      "info" : "ReturnStatement[22208-22239]:ReturnStatement[22352-22383]"
    }, {
      "left" : "return jp.getNumberValue();",
      "right" : "return jp.getNumberValue();",
      "info" : "ReturnStatement[22274-22301]:ReturnStatement[22418-22445]"
    }, {
      "left" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "right" : "case JsonTokenId.ID_NUMBER_FLOAT:",
      "info" : "SwitchCase[22315-22348]:SwitchCase[22459-22492]"
    }, {
      "left" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "right" : "if (ctxt.isEnabled(DeserializationFeature.USE_BIG_DECIMAL_FOR_FLOATS))",
      "info" : "IfStatement[22365-22504]:IfStatement[22509-22648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22436-22504]:Block[22580-22648]"
    }, {
      "left" : "return jp.getDecimalValue();",
      "right" : "return jp.getDecimalValue();",
      "info" : "ReturnStatement[22458-22486]:ReturnStatement[22602-22630]"
    }, {
      "left" : "return Double.valueOf(jp.getDoubleValue());",
      "right" : "return Double.valueOf(jp.getDoubleValue());",
      "info" : "ReturnStatement[22521-22564]:ReturnStatement[22665-22708]"
    }, {
      "left" : "case JsonTokenId.ID_TRUE:",
      "right" : "case JsonTokenId.ID_TRUE:",
      "info" : "SwitchCase[22578-22603]:SwitchCase[22722-22747]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[22620-22640]:ReturnStatement[22764-22784]"
    }, {
      "left" : "case JsonTokenId.ID_FALSE:",
      "right" : "case JsonTokenId.ID_FALSE:",
      "info" : "SwitchCase[22653-22679]:SwitchCase[22797-22823]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[22696-22717]:ReturnStatement[22840-22861]"
    }, {
      "left" : "case JsonTokenId.ID_EMBEDDED_OBJECT:",
      "right" : "case JsonTokenId.ID_EMBEDDED_OBJECT:",
      "info" : "SwitchCase[22730-22766]:SwitchCase[22874-22910]"
    }, {
      "left" : "return jp.getEmbeddedObject();",
      "right" : "return jp.getEmbeddedObject();",
      "info" : "ReturnStatement[22783-22813]:ReturnStatement[22927-22957]"
    }, {
      "left" : "case JsonTokenId.ID_NULL:",
      "right" : "case JsonTokenId.ID_NULL:",
      "info" : "SwitchCase[22827-22852]:SwitchCase[22971-22996]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22910-22922]:ReturnStatement[23054-23066]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22935-22943]:SwitchCase[23079-23087]"
    }, {
      "left" : "throw ctxt.mappingException(Object.class);",
      "right" : "throw ctxt.mappingException(Object.class);",
      "info" : "ThrowStatement[22960-23002]:ThrowStatement[23104-23146]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[23036-23045]:Modifier[23180-23189]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[23046-23052]:SimpleType[23190-23196]"
    }, {
      "left" : "mapArray",
      "right" : "mapArray",
      "info" : "SimpleName[23053-23061]:SimpleName[23197-23205]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[23062-23075]:SingleVariableDeclaration[23206-23219]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[23077-23104]:SingleVariableDeclaration[23221-23248]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[23113-23124]:SimpleType[23257-23268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23133-24461]:Block[23277-24605]"
    }, {
      "left" : "Object value = deserialize(jp, ctxt);",
      "right" : "Object value = deserialize(jp, ctxt);",
      "info" : "VariableDeclarationStatement[23147-23184]:VariableDeclarationStatement[23291-23328]"
    }, {
      "left" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "right" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "info" : "IfStatement[23197-23376]:IfStatement[23341-23520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23241-23376]:Block[23385-23520]"
    }, {
      "left" : "ArrayList<Object> l = new ArrayList<Object>(2);",
      "right" : "ArrayList<Object> l = new ArrayList<Object>(2);",
      "info" : "VariableDeclarationStatement[23259-23306]:VariableDeclarationStatement[23403-23450]"
    }, {
      "left" : "l.add(value);",
      "right" : "l.add(value);",
      "info" : "ExpressionStatement[23323-23336]:ExpressionStatement[23467-23480]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[23353-23362]:ReturnStatement[23497-23506]"
    }, {
      "left" : "Object value2 = deserialize(jp, ctxt);",
      "right" : "Object value2 = deserialize(jp, ctxt);",
      "info" : "VariableDeclarationStatement[23389-23427]:VariableDeclarationStatement[23533-23571]"
    }, {
      "left" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "right" : "if (jp.nextToken()  == JsonToken.END_ARRAY)",
      "info" : "IfStatement[23440-23650]:IfStatement[23584-23794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23484-23650]:Block[23628-23794]"
    }, {
      "left" : "ArrayList<Object> l = new ArrayList<Object>(2);",
      "right" : "ArrayList<Object> l = new ArrayList<Object>(2);",
      "info" : "VariableDeclarationStatement[23502-23549]:VariableDeclarationStatement[23646-23693]"
    }, {
      "left" : "l.add(value);",
      "right" : "l.add(value);",
      "info" : "ExpressionStatement[23566-23579]:ExpressionStatement[23710-23723]"
    }, {
      "left" : "l.add(value2);",
      "right" : "l.add(value2);",
      "info" : "ExpressionStatement[23596-23610]:ExpressionStatement[23740-23754]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[23627-23636]:ReturnStatement[23771-23780]"
    }, {
      "left" : "ObjectBuffer buffer = ctxt.leaseObjectBuffer();",
      "right" : "ObjectBuffer buffer = ctxt.leaseObjectBuffer();",
      "info" : "VariableDeclarationStatement[23663-23710]:VariableDeclarationStatement[23807-23854]"
    }, {
      "left" : "Object[] values = buffer.resetAndStart();",
      "right" : "Object[] values = buffer.resetAndStart();",
      "info" : "VariableDeclarationStatement[23723-23764]:VariableDeclarationStatement[23867-23908]"
    }, {
      "left" : "int ptr = 0;",
      "right" : "int ptr = 0;",
      "info" : "VariableDeclarationStatement[23777-23789]:VariableDeclarationStatement[23921-23933]"
    }, {
      "left" : "values[ptr++] = value;",
      "right" : "values[ptr++] = value;",
      "info" : "ExpressionStatement[23802-23824]:ExpressionStatement[23946-23968]"
    }, {
      "left" : "values[ptr++] = value2;",
      "right" : "values[ptr++] = value2;",
      "info" : "ExpressionStatement[23837-23860]:ExpressionStatement[23981-24004]"
    }, {
      "left" : "int totalSize = ptr;",
      "right" : "int totalSize = ptr;",
      "info" : "VariableDeclarationStatement[23873-23893]:VariableDeclarationStatement[24017-24037]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[23906-24243]:DoStatement[24050-24387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23909-24196]:Block[24053-24340]"
    }, {
      "left" : "value = deserialize(jp, ctxt);",
      "right" : "value = deserialize(jp, ctxt);",
      "info" : "ExpressionStatement[23927-23957]:ExpressionStatement[24071-24101]"
    }, {
      "left" : "++totalSize;",
      "right" : "++totalSize;",
      "info" : "ExpressionStatement[23974-23986]:ExpressionStatement[24118-24130]"
    }, {
      "left" : "if (ptr >= values.length)",
      "right" : "if (ptr >= values.length)",
      "info" : "IfStatement[24003-24143]:IfStatement[24147-24287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24029-24143]:Block[24173-24287]"
    }, {
      "left" : "values = buffer.appendCompletedChunk(values);",
      "right" : "values = buffer.appendCompletedChunk(values);",
      "info" : "ExpressionStatement[24051-24096]:ExpressionStatement[24195-24240]"
    }, {
      "left" : "ptr = 0;",
      "right" : "ptr = 0;",
      "info" : "ExpressionStatement[24117-24125]:ExpressionStatement[24261-24269]"
    }, {
      "left" : "values[ptr++] = value;",
      "right" : "values[ptr++] = value;",
      "info" : "ExpressionStatement[24160-24182]:ExpressionStatement[24304-24326]"
    }, {
      "left" : "ArrayList<Object> result = new ArrayList<Object>(totalSize);",
      "right" : "ArrayList<Object> result = new ArrayList<Object>(totalSize);",
      "info" : "VariableDeclarationStatement[24300-24360]:VariableDeclarationStatement[24444-24504]"
    }, {
      "left" : "buffer.completeAndClearBuffer(values, ptr, result);",
      "right" : "buffer.completeAndClearBuffer(values, ptr, result);",
      "info" : "ExpressionStatement[24373-24424]:ExpressionStatement[24517-24568]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[24437-24451]:ReturnStatement[24581-24595]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[24560-24569]:Modifier[24704-24713]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[24570-24576]:SimpleType[24714-24720]"
    }, {
      "left" : "mapObject",
      "right" : "mapObject",
      "info" : "SimpleName[24577-24586]:SimpleName[24721-24730]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[24587-24599]:SingleVariableDeclaration[24731-24743]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[24601-24628]:SingleVariableDeclaration[24745-24772]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24637-24648]:SimpleType[24781-24792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24657-25939]:Block[24801-26083]"
    }, {
      "left" : "String key1 = p.getText();",
      "right" : "String key1 = p.getText();",
      "info" : "VariableDeclarationStatement[24737-24763]:VariableDeclarationStatement[24881-24907]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[24776-24790]:ExpressionStatement[24920-24934]"
    }, {
      "left" : "Object value1 = deserialize(p, ctxt);",
      "right" : "Object value1 = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[24803-24840]:VariableDeclarationStatement[24947-24984]"
    }, {
      "left" : "String key2 = p.nextFieldName();",
      "right" : "String key2 = p.nextFieldName();",
      "info" : "VariableDeclarationStatement[24854-24886]:VariableDeclarationStatement[24998-25030]"
    }, {
      "left" : "if (key2 == null)",
      "right" : "if (key2 == null)",
      "info" : "IfStatement[24899-25138]:IfStatement[25043-25282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24917-25138]:Block[25061-25282]"
    }, {
      "left" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>(2);",
      "right" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>(2);",
      "info" : "VariableDeclarationStatement[24975-25051]:VariableDeclarationStatement[25119-25195]"
    }, {
      "left" : "result.put(key1, value1);",
      "right" : "result.put(key1, value1);",
      "info" : "ExpressionStatement[25068-25093]:ExpressionStatement[25212-25237]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[25110-25124]:ReturnStatement[25254-25268]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[25151-25165]:ExpressionStatement[25295-25309]"
    }, {
      "left" : "Object value2 = deserialize(p, ctxt);",
      "right" : "Object value2 = deserialize(p, ctxt);",
      "info" : "VariableDeclarationStatement[25178-25215]:VariableDeclarationStatement[25322-25359]"
    }, {
      "left" : "String key = p.nextFieldName();",
      "right" : "String key = p.nextFieldName();",
      "info" : "VariableDeclarationStatement[25229-25260]:VariableDeclarationStatement[25373-25404]"
    }, {
      "left" : "if (key == null)",
      "right" : "if (key == null)",
      "info" : "IfStatement[25273-25513]:IfStatement[25417-25657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25290-25513]:Block[25434-25657]"
    }, {
      "left" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>(4);",
      "right" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>(4);",
      "info" : "VariableDeclarationStatement[25308-25384]:VariableDeclarationStatement[25452-25528]"
    }, {
      "left" : "result.put(key1, value1);",
      "right" : "result.put(key1, value1);",
      "info" : "ExpressionStatement[25401-25426]:ExpressionStatement[25545-25570]"
    }, {
      "left" : "result.put(key2, value2);",
      "right" : "result.put(key2, value2);",
      "info" : "ExpressionStatement[25443-25468]:ExpressionStatement[25587-25612]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[25485-25499]:ReturnStatement[25629-25643]"
    }, {
      "left" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>();",
      "right" : "LinkedHashMap<String, Object> result = new LinkedHashMap<String, Object>();",
      "info" : "VariableDeclarationStatement[25591-25666]:VariableDeclarationStatement[25735-25810]"
    }, {
      "left" : "result.put(key1, value1);",
      "right" : "result.put(key1, value1);",
      "info" : "ExpressionStatement[25679-25704]:ExpressionStatement[25823-25848]"
    }, {
      "left" : "result.put(key2, value2);",
      "right" : "result.put(key2, value2);",
      "info" : "ExpressionStatement[25717-25742]:ExpressionStatement[25861-25886]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[25755-25902]:DoStatement[25899-26046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25758-25859]:Block[25902-26003]"
    }, {
      "left" : "p.nextToken();",
      "right" : "p.nextToken();",
      "info" : "ExpressionStatement[25776-25790]:ExpressionStatement[25920-25934]"
    }, {
      "left" : "result.put(key, deserialize(p, ctxt));",
      "right" : "result.put(key, deserialize(p, ctxt));",
      "info" : "ExpressionStatement[25807-25845]:ExpressionStatement[25951-25989]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[25915-25929]:ReturnStatement[26059-26073]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[26055-26064]:Modifier[26199-26208]"
    }, {
      "left" : "Object[]",
      "right" : "Object[]",
      "info" : "ArrayType[26065-26073]:ArrayType[26209-26217]"
    }, {
      "left" : "mapArrayToArray",
      "right" : "mapArrayToArray",
      "info" : "SimpleName[26074-26089]:SimpleName[26218-26233]"
    }, {
      "left" : "JsonParser jp",
      "right" : "JsonParser jp",
      "info" : "SingleVariableDeclaration[26090-26103]:SingleVariableDeclaration[26234-26247]"
    }, {
      "left" : "DeserializationContext ctxt",
      "right" : "DeserializationContext ctxt",
      "info" : "SingleVariableDeclaration[26105-26132]:SingleVariableDeclaration[26249-26276]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26141-26152]:SimpleType[26285-26296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26153-26694]:Block[26297-26838]"
    }, {
      "left" : "ObjectBuffer buffer = ctxt.leaseObjectBuffer();",
      "right" : "ObjectBuffer buffer = ctxt.leaseObjectBuffer();",
      "info" : "VariableDeclarationStatement[26167-26214]:VariableDeclarationStatement[26311-26358]"
    }, {
      "left" : "Object[] values = buffer.resetAndStart();",
      "right" : "Object[] values = buffer.resetAndStart();",
      "info" : "VariableDeclarationStatement[26227-26268]:VariableDeclarationStatement[26371-26412]"
    }, {
      "left" : "int ptr = 0;",
      "right" : "int ptr = 0;",
      "info" : "VariableDeclarationStatement[26281-26293]:VariableDeclarationStatement[26425-26437]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[26306-26621]:DoStatement[26450-26765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26309-26574]:Block[26453-26718]"
    }, {
      "left" : "Object value = deserialize(jp, ctxt);",
      "right" : "Object value = deserialize(jp, ctxt);",
      "info" : "VariableDeclarationStatement[26327-26364]:VariableDeclarationStatement[26471-26508]"
    }, {
      "left" : "if (ptr >= values.length)",
      "right" : "if (ptr >= values.length)",
      "info" : "IfStatement[26381-26521]:IfStatement[26525-26665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26407-26521]:Block[26551-26665]"
    }, {
      "left" : "values = buffer.appendCompletedChunk(values);",
      "right" : "values = buffer.appendCompletedChunk(values);",
      "info" : "ExpressionStatement[26429-26474]:ExpressionStatement[26573-26618]"
    }, {
      "left" : "ptr = 0;",
      "right" : "ptr = 0;",
      "info" : "ExpressionStatement[26495-26503]:ExpressionStatement[26639-26647]"
    }, {
      "left" : "values[ptr++] = value;",
      "right" : "values[ptr++] = value;",
      "info" : "ExpressionStatement[26538-26560]:ExpressionStatement[26682-26704]"
    }, {
      "left" : "return buffer.completeAndClearBuffer(values, ptr);",
      "right" : "return buffer.completeAndClearBuffer(values, ptr);",
      "info" : "ReturnStatement[26634-26684]:ReturnStatement[26778-26828]"
    } ]
  },
  "interFileMappings" : { }
}