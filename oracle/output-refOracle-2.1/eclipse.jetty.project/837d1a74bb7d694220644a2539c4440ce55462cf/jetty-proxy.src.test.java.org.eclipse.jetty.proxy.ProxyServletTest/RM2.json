{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ProxyServletTest",
      "right" : "ProxyServletTest",
      "info" : "TypeDeclaration[3669-43879]:TypeDeclaration[3670-46322]"
    }, {
      "left" : "private static final String PROXIED_HEADER = \"X-Proxied\";",
      "right" : "private static final String PROXIED_HEADER = \"X-Proxied\";",
      "info" : "FieldDeclaration[3735-3792]:FieldDeclaration[3736-3793]"
    }, {
      "left" : "public static Iterable<Object[]> data()",
      "right" : "public static Iterable<Object[]> data()",
      "info" : "MethodDeclaration[3798-4077]:MethodDeclaration[3799-4078]"
    }, {
      "left" : "@Rule\n    public final TestTracker tracker = new TestTracker();",
      "right" : "@Rule\n    public final TestTracker tracker = new TestTracker();",
      "info" : "FieldDeclaration[4083-4146]:FieldDeclaration[4084-4147]"
    }, {
      "left" : "private HttpClient client;",
      "right" : "private HttpClient client;",
      "info" : "FieldDeclaration[4151-4177]:FieldDeclaration[4152-4178]"
    }, {
      "left" : "private Server proxy;",
      "right" : "private Server proxy;",
      "info" : "FieldDeclaration[4182-4203]:FieldDeclaration[4183-4204]"
    }, {
      "left" : "private ServerConnector proxyConnector;",
      "right" : "private ServerConnector proxyConnector;",
      "info" : "FieldDeclaration[4208-4247]:FieldDeclaration[4209-4248]"
    }, {
      "left" : "private ServletContextHandler proxyContext;",
      "right" : "private ServletContextHandler proxyContext;",
      "info" : "FieldDeclaration[4252-4295]:FieldDeclaration[4253-4296]"
    }, {
      "left" : "private AbstractProxyServlet proxyServlet;",
      "right" : "private AbstractProxyServlet proxyServlet;",
      "info" : "FieldDeclaration[4300-4342]:FieldDeclaration[4301-4343]"
    }, {
      "left" : "private Server server;",
      "right" : "private Server server;",
      "info" : "FieldDeclaration[4347-4369]:FieldDeclaration[4348-4370]"
    }, {
      "left" : "private ServerConnector serverConnector;",
      "right" : "private ServerConnector serverConnector;",
      "info" : "FieldDeclaration[4374-4414]:FieldDeclaration[4375-4415]"
    }, {
      "left" : "public ProxyServletTest(Class<?> proxyServletClass) throws Exception",
      "right" : "public ProxyServletTest(Class<?> proxyServletClass) throws Exception",
      "info" : "MethodDeclaration[4420-4583]:MethodDeclaration[4421-4584]"
    }, {
      "left" : "private void startServer(HttpServlet servlet) throws Exception",
      "right" : "private void startServer(HttpServlet servlet) throws Exception",
      "info" : "MethodDeclaration[4589-5143]:MethodDeclaration[4590-5144]"
    }, {
      "left" : "private void startProxy() throws Exception",
      "right" : "private void startProxy() throws Exception",
      "info" : "MethodDeclaration[5149-5254]:MethodDeclaration[5150-5255]"
    }, {
      "left" : "private void startProxy(Map<String, String> initParams) throws Exception",
      "right" : "private void startProxy(Map<String, String> initParams) throws Exception",
      "info" : "MethodDeclaration[5260-6236]:MethodDeclaration[5261-6237]"
    }, {
      "left" : "private void startClient() throws Exception",
      "right" : "private void startClient() throws Exception",
      "info" : "MethodDeclaration[6242-6331]:MethodDeclaration[6243-6332]"
    }, {
      "left" : "private HttpClient prepareClient() throws Exception",
      "right" : "private HttpClient prepareClient() throws Exception",
      "info" : "MethodDeclaration[6337-6749]:MethodDeclaration[6338-6750]"
    }, {
      "left" : "public void dispose() throws Exception",
      "right" : "public void dispose() throws Exception",
      "info" : "MethodDeclaration[6755-6884]:MethodDeclaration[6756-6885]"
    }, {
      "left" : "public void testProxyDown() throws Exception",
      "right" : "public void testProxyDown() throws Exception",
      "info" : "MethodDeclaration[6890-7459]:MethodDeclaration[6891-7460]"
    }, {
      "left" : "public void testProxyWithoutContent() throws Exception",
      "right" : "public void testProxyWithoutContent() throws Exception",
      "info" : "MethodDeclaration[7465-8288]:MethodDeclaration[7466-8289]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[7596-7863]:MethodDeclaration[7597-7864]"
    }, {
      "left" : "public void testProxyWithResponseContent() throws Exception",
      "right" : "public void testProxyWithResponseContent() throws Exception",
      "info" : "MethodDeclaration[8294-9523]:MethodDeclaration[8295-9524]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[8518-8840]:MethodDeclaration[8519-8841]"
    }, {
      "left" : "public void testProxyWithRequestContentAndResponseContent() throws Exception",
      "right" : "public void testProxyWithRequestContentAndResponseContent() throws Exception",
      "info" : "MethodDeclaration[9529-10638]:MethodDeclaration[9530-10639]"
    }, {
      "left" : "protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[9682-10021]:MethodDeclaration[9683-10022]"
    }, {
      "left" : "public void testProxyWithBigRequestContentIgnored() throws Exception",
      "right" : "public void testProxyWithBigRequestContentIgnored() throws Exception",
      "info" : "MethodDeclaration[10644-11928]:MethodDeclaration[10645-11929]"
    }, {
      "left" : "protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[10789-11412]:MethodDeclaration[10790-11413]"
    }, {
      "left" : "public void testProxyWithBigRequestContentConsumed() throws Exception",
      "right" : "public void testProxyWithBigRequestContentConsumed() throws Exception",
      "info" : "MethodDeclaration[11934-13315]:MethodDeclaration[11935-13316]"
    }, {
      "left" : "protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[12174-12846]:MethodDeclaration[12175-12847]"
    }, {
      "left" : "public void testProxyWithBigResponseContentWithSlowReader() throws Exception",
      "right" : "public void testProxyWithBigResponseContentWithSlowReader() throws Exception",
      "info" : "MethodDeclaration[13321-15527]:MethodDeclaration[13322-15528]"
    }, {
      "left" : "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "info" : "MethodDeclaration[14012-14346]:MethodDeclaration[14013-14347]"
    }, {
      "left" : "public void onContent(Response response, ByteBuffer content)",
      "right" : "public void onContent(Response response, ByteBuffer content)",
      "info" : "MethodDeclaration[14667-15107]:MethodDeclaration[14668-15108]"
    }, {
      "left" : "public void onComplete(Result result)",
      "right" : "public void onComplete(Result result)",
      "info" : "MethodDeclaration[15121-15447]:MethodDeclaration[15122-15448]"
    }, {
      "left" : "public void testProxyWithQueryString() throws Exception",
      "right" : "public void testProxyWithQueryString() throws Exception",
      "info" : "MethodDeclaration[15533-16312]:MethodDeclaration[15534-16313]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[15665-15890]:MethodDeclaration[15666-15891]"
    }, {
      "left" : "public void testProxyLongPoll() throws Exception",
      "right" : "public void testProxyLongPoll() throws Exception",
      "info" : "MethodDeclaration[16318-18230]:MethodDeclaration[16319-18231]"
    }, {
      "left" : "protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException",
      "right" : "protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException",
      "info" : "MethodDeclaration[16478-17855]:MethodDeclaration[16479-17856]"
    }, {
      "left" : "public void onComplete(AsyncEvent event) throws IOException",
      "right" : "public void onComplete(AsyncEvent event) throws IOException",
      "info" : "MethodDeclaration[16948-17093]:MethodDeclaration[16949-17094]"
    }, {
      "left" : "public void onTimeout(AsyncEvent event) throws IOException",
      "right" : "public void onTimeout(AsyncEvent event) throws IOException",
      "info" : "MethodDeclaration[17119-17458]:MethodDeclaration[17120-17459]"
    }, {
      "left" : "public void onError(AsyncEvent event) throws IOException",
      "right" : "public void onError(AsyncEvent event) throws IOException",
      "info" : "MethodDeclaration[17484-17626]:MethodDeclaration[17485-17627]"
    }, {
      "left" : "public void onStartAsync(AsyncEvent event) throws IOException",
      "right" : "public void onStartAsync(AsyncEvent event) throws IOException",
      "info" : "MethodDeclaration[17652-17799]:MethodDeclaration[17653-17800]"
    }, {
      "left" : "public void testProxyXForwardedHostHeaderIsPresent() throws Exception",
      "right" : "public void testProxyXForwardedHostHeaderIsPresent() throws Exception",
      "info" : "MethodDeclaration[18236-19095]:MethodDeclaration[18237-19096]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[18382-18691]:MethodDeclaration[18383-18692]"
    }, {
      "left" : "public void testProxyWhiteList() throws Exception",
      "right" : "public void testProxyWhiteList() throws Exception",
      "info" : "MethodDeclaration[19101-19840]:MethodDeclaration[19102-19841]"
    }, {
      "left" : "public void testProxyBlackList() throws Exception",
      "right" : "public void testProxyBlackList() throws Exception",
      "info" : "MethodDeclaration[19846-20585]:MethodDeclaration[19847-20586]"
    }, {
      "left" : "public void testClientExcludedHosts() throws Exception",
      "right" : "public void testClientExcludedHosts() throws Exception",
      "info" : "MethodDeclaration[20591-21830]:MethodDeclaration[20592-21831]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[20722-20989]:MethodDeclaration[20723-20990]"
    }, {
      "left" : "public void testTransparentProxy() throws Exception",
      "right" : "public void testTransparentProxy() throws Exception",
      "info" : "MethodDeclaration[21836-21959]:MethodDeclaration[21837-21960]"
    }, {
      "left" : "public void testTransparentProxyWithRootContext() throws Exception",
      "right" : "public void testTransparentProxyWithRootContext() throws Exception",
      "info" : "MethodDeclaration[21965-22098]:MethodDeclaration[21966-22099]"
    }, {
      "left" : "private void testTransparentProxyWithPrefix(String prefix) throws Exception",
      "right" : "private void testTransparentProxyWithPrefix(String prefix) throws Exception",
      "info" : "MethodDeclaration[22104-23421]:MethodDeclaration[22105-23422]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[22285-22632]:MethodDeclaration[22286-22633]"
    }, {
      "left" : "public void testTransparentProxyWithQuery() throws Exception",
      "right" : "public void testTransparentProxyWithQuery() throws Exception",
      "info" : "MethodDeclaration[23427-25034]:MethodDeclaration[23428-23576]"
    }, {
      "left" : "public void testTransparentProxyWithoutPrefix() throws Exception",
      "right" : "public void testTransparentProxyWithoutPrefix() throws Exception",
      "info" : "MethodDeclaration[25040-26303]:MethodDeclaration[27483-28746]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[25220-25567]:MethodDeclaration[27663-28010]"
    }, {
      "left" : "public void testCachingProxy() throws Exception",
      "right" : "public void testCachingProxy() throws Exception",
      "info" : "MethodDeclaration[26309-30147]:MethodDeclaration[28752-32590]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[26526-26848]:MethodDeclaration[28969-29291]"
    }, {
      "left" : "private Map<String, ContentResponse> cache = new HashMap<>();",
      "right" : "private Map<String, ContentResponse> cache = new HashMap<>();",
      "info" : "FieldDeclaration[27195-27256]:FieldDeclaration[29638-29699]"
    }, {
      "left" : "private Map<String, ByteArrayOutputStream> temp = new HashMap<>();",
      "right" : "private Map<String, ByteArrayOutputStream> temp = new HashMap<>();",
      "info" : "FieldDeclaration[27269-27335]:FieldDeclaration[29712-29778]"
    }, {
      "left" : "protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "right" : "protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "info" : "MethodDeclaration[27349-28071]:MethodDeclaration[29792-30514]"
    }, {
      "left" : "protected void onResponseContent(HttpServletRequest request, HttpServletResponse response, Response proxyResponse, byte[] buffer, int offset, int length, Callback callback)",
      "right" : "protected void onResponseContent(HttpServletRequest request, HttpServletResponse response, Response proxyResponse, byte[] buffer, int offset, int length, Callback callback)",
      "info" : "MethodDeclaration[28085-28786]:MethodDeclaration[30528-31229]"
    }, {
      "left" : "protected void onProxyResponseSuccess(HttpServletRequest request, HttpServletResponse response, Response proxyResponse)",
      "right" : "protected void onProxyResponseSuccess(HttpServletRequest request, HttpServletResponse response, Response proxyResponse)",
      "info" : "MethodDeclaration[28800-29296]:MethodDeclaration[31243-31739]"
    }, {
      "left" : "public void testRedirectsAreProxied() throws Exception",
      "right" : "public void testRedirectsAreProxied() throws Exception",
      "info" : "MethodDeclaration[30153-31001]:MethodDeclaration[32596-33444]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[30284-30591]:MethodDeclaration[32727-33034]"
    }, {
      "left" : "public void testGZIPContentIsProxied() throws Exception",
      "right" : "public void testGZIPContentIsProxied() throws Exception",
      "info" : "MethodDeclaration[31007-32152]:MethodDeclaration[33450-34595]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[31202-31719]:MethodDeclaration[33645-34162]"
    }, {
      "left" : "public void testWrongContentLength() throws Exception",
      "right" : "public void testWrongContentLength() throws Exception",
      "info" : "MethodDeclaration[32158-32978]:MethodDeclaration[34601-35421]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[32323-32748]:MethodDeclaration[34766-35191]"
    }, {
      "left" : "public void testCookiesFromDifferentClientsAreNotMixed() throws Exception",
      "right" : "public void testCookiesFromDifferentClientsAreNotMixed() throws Exception",
      "info" : "MethodDeclaration[32984-35766]:MethodDeclaration[35427-38209]"
    }, {
      "left" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException",
      "info" : "MethodDeclaration[33173-33887]:MethodDeclaration[35616-36330]"
    }, {
      "left" : "public void testProxyRequestFailureInTheMiddleOfProxyingSmallContent() throws Exception",
      "right" : "public void testProxyRequestFailureInTheMiddleOfProxyingSmallContent() throws Exception",
      "info" : "MethodDeclaration[35772-38453]:MethodDeclaration[38215-40896]"
    }, {
      "left" : "protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "right" : "protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "info" : "MethodDeclaration[36066-36597]:MethodDeclaration[38509-39040]"
    }, {
      "left" : "private boolean await(CountDownLatch latch, long ms) throws IOException",
      "right" : "private boolean await(CountDownLatch latch, long ms) throws IOException",
      "info" : "MethodDeclaration[36611-36972]:MethodDeclaration[39054-39415]"
    }, {
      "left" : "public void testProxyRequestFailureInTheMiddleOfProxyingBigContent() throws Exception",
      "right" : "public void testProxyRequestFailureInTheMiddleOfProxyingBigContent() throws Exception",
      "info" : "MethodDeclaration[38459-41088]:MethodDeclaration[40902-43531]"
    }, {
      "left" : "protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "right" : "protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "info" : "MethodDeclaration[38854-39385]:MethodDeclaration[41297-41828]"
    }, {
      "left" : "private boolean await(CountDownLatch latch, long ms) throws IOException",
      "right" : "private boolean await(CountDownLatch latch, long ms) throws IOException",
      "info" : "MethodDeclaration[39399-39760]:MethodDeclaration[41842-42203]"
    }, {
      "left" : "public void testResponseHeadersAreNotRemoved() throws Exception",
      "right" : "public void testResponseHeadersAreNotRemoved() throws Exception",
      "info" : "MethodDeclaration[41094-42395]:MethodDeclaration[43537-44838]"
    }, {
      "left" : "public void init(FilterConfig filterConfig) throws ServletException",
      "right" : "public void init(FilterConfig filterConfig) throws ServletException",
      "info" : "MethodDeclaration[41446-41563]:MethodDeclaration[43889-44006]"
    }, {
      "left" : "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException",
      "right" : "public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException",
      "info" : "MethodDeclaration[41577-41888]:MethodDeclaration[44020-44331]"
    }, {
      "left" : "public void destroy()",
      "right" : "public void destroy()",
      "info" : "MethodDeclaration[41902-41973]:MethodDeclaration[44345-44416]"
    }, {
      "left" : "public void testHeadersListedByConnectionHeaderAreRemoved() throws Exception",
      "right" : "public void testHeadersListedByConnectionHeaderAreRemoved() throws Exception",
      "info" : "MethodDeclaration[42401-43837]:MethodDeclaration[44844-46280]"
    }, {
      "left" : "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "right" : "protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException",
      "info" : "MethodDeclaration[42912-43380]:MethodDeclaration[45355-45823]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3886-4077]:Block[3887-4078]"
    }, {
      "left" : "return Arrays.asList(new Object[][]{\n                {ProxyServlet.class},\n                {AsyncProxyServlet.class},\n                {AsyncMiddleManServlet.class}\n        });",
      "right" : "return Arrays.asList(new Object[][]{\n                {ProxyServlet.class},\n                {AsyncProxyServlet.class},\n                {AsyncMiddleManServlet.class}\n        });",
      "info" : "ReturnStatement[3896-4071]:ReturnStatement[3897-4072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4493-4583]:Block[4494-4584]"
    }, {
      "left" : "this.proxyServlet = (AbstractProxyServlet)proxyServletClass.newInstance();",
      "right" : "this.proxyServlet = (AbstractProxyServlet)proxyServletClass.newInstance();",
      "info" : "ExpressionStatement[4503-4577]:ExpressionStatement[4504-4578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4656-5143]:Block[4657-5144]"
    }, {
      "left" : "QueuedThreadPool serverPool = new QueuedThreadPool();",
      "right" : "QueuedThreadPool serverPool = new QueuedThreadPool();",
      "info" : "VariableDeclarationStatement[4666-4719]:VariableDeclarationStatement[4667-4720]"
    }, {
      "left" : "serverPool.setName(\"server\");",
      "right" : "serverPool.setName(\"server\");",
      "info" : "ExpressionStatement[4728-4757]:ExpressionStatement[4729-4758]"
    }, {
      "left" : "server = new Server(serverPool);",
      "right" : "server = new Server(serverPool);",
      "info" : "ExpressionStatement[4766-4798]:ExpressionStatement[4767-4799]"
    }, {
      "left" : "serverConnector = new ServerConnector(server);",
      "right" : "serverConnector = new ServerConnector(server);",
      "info" : "ExpressionStatement[4807-4853]:ExpressionStatement[4808-4854]"
    }, {
      "left" : "server.addConnector(serverConnector);",
      "right" : "server.addConnector(serverConnector);",
      "info" : "ExpressionStatement[4862-4899]:ExpressionStatement[4863-4900]"
    }, {
      "left" : "ServletContextHandler appCtx = new ServletContextHandler(server, \"/\", true, false);",
      "right" : "ServletContextHandler appCtx = new ServletContextHandler(server, \"/\", true, false);",
      "info" : "VariableDeclarationStatement[4909-4992]:VariableDeclarationStatement[4910-4993]"
    }, {
      "left" : "ServletHolder appServletHolder = new ServletHolder(servlet);",
      "right" : "ServletHolder appServletHolder = new ServletHolder(servlet);",
      "info" : "VariableDeclarationStatement[5001-5061]:VariableDeclarationStatement[5002-5062]"
    }, {
      "left" : "appCtx.addServlet(appServletHolder, \"/*\");",
      "right" : "appCtx.addServlet(appServletHolder, \"/*\");",
      "info" : "ExpressionStatement[5070-5112]:ExpressionStatement[5071-5113]"
    }, {
      "left" : "server.start();",
      "right" : "server.start();",
      "info" : "ExpressionStatement[5122-5137]:ExpressionStatement[5123-5138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5196-5254]:Block[5197-5255]"
    }, {
      "left" : "startProxy(new HashMap<String, String>());",
      "right" : "startProxy(new HashMap<String, String>());",
      "info" : "ExpressionStatement[5206-5248]:ExpressionStatement[5207-5249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5337-6236]:Block[5338-6237]"
    }, {
      "left" : "QueuedThreadPool proxyPool = new QueuedThreadPool();",
      "right" : "QueuedThreadPool proxyPool = new QueuedThreadPool();",
      "info" : "VariableDeclarationStatement[5347-5399]:VariableDeclarationStatement[5348-5400]"
    }, {
      "left" : "proxyPool.setName(\"proxy\");",
      "right" : "proxyPool.setName(\"proxy\");",
      "info" : "ExpressionStatement[5408-5435]:ExpressionStatement[5409-5436]"
    }, {
      "left" : "proxy = new Server(proxyPool);",
      "right" : "proxy = new Server(proxyPool);",
      "info" : "ExpressionStatement[5444-5474]:ExpressionStatement[5445-5475]"
    }, {
      "left" : "HttpConfiguration configuration = new HttpConfiguration();",
      "right" : "HttpConfiguration configuration = new HttpConfiguration();",
      "info" : "VariableDeclarationStatement[5484-5542]:VariableDeclarationStatement[5485-5543]"
    }, {
      "left" : "configuration.setSendDateHeader(false);",
      "right" : "configuration.setSendDateHeader(false);",
      "info" : "ExpressionStatement[5551-5590]:ExpressionStatement[5552-5591]"
    }, {
      "left" : "configuration.setSendServerVersion(false);",
      "right" : "configuration.setSendServerVersion(false);",
      "info" : "ExpressionStatement[5599-5641]:ExpressionStatement[5600-5642]"
    }, {
      "left" : "String value = initParams.get(\"outputBufferSize\");",
      "right" : "String value = initParams.get(\"outputBufferSize\");",
      "info" : "VariableDeclarationStatement[5650-5700]:VariableDeclarationStatement[5651-5701]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[5709-5798]:IfStatement[5710-5799]"
    }, {
      "left" : "configuration.setOutputBufferSize(Integer.valueOf(value));",
      "right" : "configuration.setOutputBufferSize(Integer.valueOf(value));",
      "info" : "ExpressionStatement[5740-5798]:ExpressionStatement[5741-5799]"
    }, {
      "left" : "proxyConnector = new ServerConnector(proxy, new HttpConnectionFactory(configuration));",
      "right" : "proxyConnector = new ServerConnector(proxy, new HttpConnectionFactory(configuration));",
      "info" : "ExpressionStatement[5807-5893]:ExpressionStatement[5808-5894]"
    }, {
      "left" : "proxy.addConnector(proxyConnector);",
      "right" : "proxy.addConnector(proxyConnector);",
      "info" : "ExpressionStatement[5902-5937]:ExpressionStatement[5903-5938]"
    }, {
      "left" : "proxyContext = new ServletContextHandler(proxy, \"/\", true, false);",
      "right" : "proxyContext = new ServletContextHandler(proxy, \"/\", true, false);",
      "info" : "ExpressionStatement[5947-6013]:ExpressionStatement[5948-6014]"
    }, {
      "left" : "ServletHolder proxyServletHolder = new ServletHolder(proxyServlet);",
      "right" : "ServletHolder proxyServletHolder = new ServletHolder(proxyServlet);",
      "info" : "VariableDeclarationStatement[6022-6089]:VariableDeclarationStatement[6023-6090]"
    }, {
      "left" : "proxyServletHolder.setInitParameters(initParams);",
      "right" : "proxyServletHolder.setInitParameters(initParams);",
      "info" : "ExpressionStatement[6098-6147]:ExpressionStatement[6099-6148]"
    }, {
      "left" : "proxyContext.addServlet(proxyServletHolder, \"/*\");",
      "right" : "proxyContext.addServlet(proxyServletHolder, \"/*\");",
      "info" : "ExpressionStatement[6156-6206]:ExpressionStatement[6157-6207]"
    }, {
      "left" : "proxy.start();",
      "right" : "proxy.start();",
      "info" : "ExpressionStatement[6216-6230]:ExpressionStatement[6217-6231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6290-6331]:Block[6291-6332]"
    }, {
      "left" : "client = prepareClient();",
      "right" : "client = prepareClient();",
      "info" : "ExpressionStatement[6300-6325]:ExpressionStatement[6301-6326]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6393-6749]:Block[6394-6750]"
    }, {
      "left" : "QueuedThreadPool clientPool = new QueuedThreadPool();",
      "right" : "QueuedThreadPool clientPool = new QueuedThreadPool();",
      "info" : "VariableDeclarationStatement[6403-6456]:VariableDeclarationStatement[6404-6457]"
    }, {
      "left" : "clientPool.setName(\"client\");",
      "right" : "clientPool.setName(\"client\");",
      "info" : "ExpressionStatement[6465-6494]:ExpressionStatement[6466-6495]"
    }, {
      "left" : "HttpClient result = new HttpClient();",
      "right" : "HttpClient result = new HttpClient();",
      "info" : "VariableDeclarationStatement[6503-6540]:VariableDeclarationStatement[6504-6541]"
    }, {
      "left" : "result.setExecutor(clientPool);",
      "right" : "result.setExecutor(clientPool);",
      "info" : "ExpressionStatement[6549-6580]:ExpressionStatement[6550-6581]"
    }, {
      "left" : "result.getProxyConfiguration().getProxies().add(new HttpProxy(\"localhost\", proxyConnector.getLocalPort()));",
      "right" : "result.getProxyConfiguration().getProxies().add(new HttpProxy(\"localhost\", proxyConnector.getLocalPort()));",
      "info" : "ExpressionStatement[6589-6696]:ExpressionStatement[6590-6697]"
    }, {
      "left" : "result.start();",
      "right" : "result.start();",
      "info" : "ExpressionStatement[6705-6720]:ExpressionStatement[6706-6721]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[6729-6743]:ReturnStatement[6730-6744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6809-6884]:Block[6810-6885]"
    }, {
      "left" : "client.stop();",
      "right" : "client.stop();",
      "info" : "ExpressionStatement[6819-6833]:ExpressionStatement[6820-6834]"
    }, {
      "left" : "proxy.stop();",
      "right" : "proxy.stop();",
      "info" : "ExpressionStatement[6842-6855]:ExpressionStatement[6843-6856]"
    }, {
      "left" : "server.stop();",
      "right" : "server.stop();",
      "info" : "ExpressionStatement[6864-6878]:ExpressionStatement[6865-6879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6949-7459]:Block[6950-7460]"
    }, {
      "left" : "startServer(new EmptyHttpServlet());",
      "right" : "startServer(new EmptyHttpServlet());",
      "info" : "ExpressionStatement[6959-6995]:ExpressionStatement[6960-6996]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[7004-7017]:ExpressionStatement[7005-7018]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[7026-7040]:ExpressionStatement[7027-7041]"
    }, {
      "left" : "proxy.stop();",
      "right" : "proxy.stop();",
      "info" : "ExpressionStatement[7079-7092]:ExpressionStatement[7080-7093]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7102-7453]:TryStatement[7103-7454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7114-7306]:Block[7115-7307]"
    }, {
      "left" : "client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                    .timeout(5, TimeUnit.SECONDS)\n                    .send();",
      "right" : "client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                    .timeout(5, TimeUnit.SECONDS)\n                    .send();",
      "info" : "ExpressionStatement[7128-7269]:ExpressionStatement[7129-7270]"
    }, {
      "left" : "Assert.fail();",
      "right" : "Assert.fail();",
      "info" : "ExpressionStatement[7282-7296]:ExpressionStatement[7283-7297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7352-7453]:Block[7353-7454]"
    }, {
      "left" : "Assert.assertThat(x.getCause(), Matchers.instanceOf(ConnectException.class));",
      "right" : "Assert.assertThat(x.getCause(), Matchers.instanceOf(ConnectException.class));",
      "info" : "ExpressionStatement[7366-7443]:ExpressionStatement[7367-7444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7534-8288]:Block[7535-8289]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n            }\n        });",
      "info" : "ExpressionStatement[7544-7875]:ExpressionStatement[7545-7876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7738-7863]:Block[7739-7864]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[7756-7849]:IfStatement[7757-7850]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[7810-7849]:ExpressionStatement[7811-7850]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[7884-7897]:ExpressionStatement[7885-7898]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[7906-7920]:ExpressionStatement[7907-7921]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[7930-8090]:VariableDeclarationStatement[7931-8091]"
    }, {
      "left" : "Assert.assertEquals(\"OK\", response.getReason());",
      "right" : "Assert.assertEquals(\"OK\", response.getReason());",
      "info" : "ExpressionStatement[8100-8148]:ExpressionStatement[8101-8149]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[8157-8204]:ExpressionStatement[8158-8205]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[8213-8282]:ExpressionStatement[8214-8283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8368-9523]:Block[8369-9524]"
    }, {
      "left" : "final byte[] content = new byte[1024];",
      "right" : "final byte[] content = new byte[1024];",
      "info" : "VariableDeclarationStatement[8378-8416]:VariableDeclarationStatement[8379-8417]"
    }, {
      "left" : "new Random().nextBytes(content);",
      "right" : "new Random().nextBytes(content);",
      "info" : "ExpressionStatement[8425-8457]:ExpressionStatement[8426-8458]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.getOutputStream().write(content);\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.getOutputStream().write(content);\n            }\n        });",
      "info" : "ExpressionStatement[8466-8852]:ExpressionStatement[8467-8853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8660-8840]:Block[8661-8841]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[8678-8771]:IfStatement[8679-8772]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[8732-8771]:ExpressionStatement[8733-8772]"
    }, {
      "left" : "resp.getOutputStream().write(content);",
      "right" : "resp.getOutputStream().write(content);",
      "info" : "ExpressionStatement[8788-8826]:ExpressionStatement[8789-8827]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[8861-8874]:ExpressionStatement[8862-8875]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[8883-8897]:ExpressionStatement[8884-8898]"
    }, {
      "left" : "ContentResponse[] responses = new ContentResponse[10];",
      "right" : "ContentResponse[] responses = new ContentResponse[10];",
      "info" : "VariableDeclarationStatement[8907-8961]:VariableDeclarationStatement[8908-8962]"
    }, {
      "left" : "for (int i = 0; i < 10; ++i)",
      "right" : "for (int i = 0; i < 10; ++i)",
      "info" : "ForStatement[8970-9235]:ForStatement[8971-9236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9007-9235]:Block[9008-9236]"
    }, {
      "left" : "responses[i] = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                    .timeout(5, TimeUnit.SECONDS)\n                    .send();",
      "right" : "responses[i] = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                    .timeout(5, TimeUnit.SECONDS)\n                    .send();",
      "info" : "ExpressionStatement[9069-9225]:ExpressionStatement[9070-9226]"
    }, {
      "left" : "for (int i = 0; i < 10; ++i)",
      "right" : "for (int i = 0; i < 10; ++i)",
      "info" : "ForStatement[9245-9517]:ForStatement[9246-9518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9282-9517]:Block[9283-9518]"
    }, {
      "left" : "Assert.assertEquals(200, responses[i].getStatus());",
      "right" : "Assert.assertEquals(200, responses[i].getStatus());",
      "info" : "ExpressionStatement[9296-9347]:ExpressionStatement[9297-9348]"
    }, {
      "left" : "Assert.assertTrue(responses[i].getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(responses[i].getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[9360-9433]:ExpressionStatement[9361-9434]"
    }, {
      "left" : "Assert.assertArrayEquals(content, responses[i].getContent());",
      "right" : "Assert.assertArrayEquals(content, responses[i].getContent());",
      "info" : "ExpressionStatement[9446-9507]:ExpressionStatement[9447-9508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9620-10638]:Block[9621-10639]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                IO.copy(req.getInputStream(), resp.getOutputStream());\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                IO.copy(req.getInputStream(), resp.getOutputStream());\n            }\n        });",
      "info" : "ExpressionStatement[9630-10033]:ExpressionStatement[9631-10034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9825-10021]:Block[9826-10022]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[9843-9936]:IfStatement[9844-9937]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[9897-9936]:ExpressionStatement[9898-9937]"
    }, {
      "left" : "IO.copy(req.getInputStream(), resp.getOutputStream());",
      "right" : "IO.copy(req.getInputStream(), resp.getOutputStream());",
      "info" : "ExpressionStatement[9953-10007]:ExpressionStatement[9954-10008]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[10042-10055]:ExpressionStatement[10043-10056]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[10064-10078]:ExpressionStatement[10065-10079]"
    }, {
      "left" : "byte[] content = new byte[1024];",
      "right" : "byte[] content = new byte[1024];",
      "info" : "VariableDeclarationStatement[10088-10120]:VariableDeclarationStatement[10089-10121]"
    }, {
      "left" : "new Random().nextBytes(content);",
      "right" : "new Random().nextBytes(content);",
      "info" : "ExpressionStatement[10129-10161]:ExpressionStatement[10130-10162]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .method(HttpMethod.POST)\n                .content(new BytesContentProvider(content))\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .method(HttpMethod.POST)\n                .content(new BytesContentProvider(content))\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[10170-10431]:VariableDeclarationStatement[10171-10432]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[10441-10488]:ExpressionStatement[10442-10489]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[10497-10566]:ExpressionStatement[10498-10567]"
    }, {
      "left" : "Assert.assertArrayEquals(content, response.getContent());",
      "right" : "Assert.assertArrayEquals(content, response.getContent());",
      "info" : "ExpressionStatement[10575-10632]:ExpressionStatement[10576-10633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10727-11928]:Block[10728-11929]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                try\n                {\n                    // Give some time to the proxy to\n                    // upload the content to the server.\n                    Thread.sleep(1000);\n\n                    if (req.getHeader(\"Via\") != null)\n                        resp.addHeader(PROXIED_HEADER, \"true\");\n                }\n                catch (InterruptedException x)\n                {\n                    throw new InterruptedIOException();\n                }\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                try\n                {\n                    // Give some time to the proxy to\n                    // upload the content to the server.\n                    Thread.sleep(1000);\n\n                    if (req.getHeader(\"Via\") != null)\n                        resp.addHeader(PROXIED_HEADER, \"true\");\n                }\n                catch (InterruptedException x)\n                {\n                    throw new InterruptedIOException();\n                }\n            }\n        });",
      "info" : "ExpressionStatement[10737-11424]:ExpressionStatement[10738-11425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10932-11412]:Block[10933-11413]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10950-11398]:TryStatement[10951-11399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10970-11259]:Block[10971-11260]"
    }, {
      "left" : "Thread.sleep(1000);",
      "right" : "Thread.sleep(1000);",
      "info" : "ExpressionStatement[11103-11122]:ExpressionStatement[11104-11123]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[11144-11241]:IfStatement[11145-11242]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[11202-11241]:ExpressionStatement[11203-11242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11323-11398]:Block[11324-11399]"
    }, {
      "left" : "throw new InterruptedIOException();",
      "right" : "throw new InterruptedIOException();",
      "info" : "ThrowStatement[11345-11380]:ThrowStatement[11346-11381]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[11433-11446]:ExpressionStatement[11434-11447]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[11455-11469]:ExpressionStatement[11456-11470]"
    }, {
      "left" : "byte[] content = new byte[128 * 1024];",
      "right" : "byte[] content = new byte[128 * 1024];",
      "info" : "VariableDeclarationStatement[11479-11517]:VariableDeclarationStatement[11480-11518]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .method(HttpMethod.POST)\n                .content(new BytesContentProvider(content))\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .method(HttpMethod.POST)\n                .content(new BytesContentProvider(content))\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[11526-11787]:VariableDeclarationStatement[11527-11788]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[11797-11844]:ExpressionStatement[11798-11845]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[11853-11922]:ExpressionStatement[11854-11923]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12018-13315]:Block[12019-13316]"
    }, {
      "left" : "final byte[] content = new byte[128 * 1024];",
      "right" : "final byte[] content = new byte[128 * 1024];",
      "info" : "VariableDeclarationStatement[12028-12072]:VariableDeclarationStatement[12029-12073]"
    }, {
      "left" : "new Random().nextBytes(content);",
      "right" : "new Random().nextBytes(content);",
      "info" : "ExpressionStatement[12081-12113]:ExpressionStatement[12082-12114]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                InputStream input = req.getInputStream();\n                int index = 0;\n                while (true)\n                {\n                    int value = input.read();\n                    if (value < 0)\n                        break;\n                    Assert.assertEquals(\"Content mismatch at index=\" + index, content[index] & 0xFF, value);\n                    ++index;\n                }\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                InputStream input = req.getInputStream();\n                int index = 0;\n                while (true)\n                {\n                    int value = input.read();\n                    if (value < 0)\n                        break;\n                    Assert.assertEquals(\"Content mismatch at index=\" + index, content[index] & 0xFF, value);\n                    ++index;\n                }\n            }\n        });",
      "info" : "ExpressionStatement[12122-12858]:ExpressionStatement[12123-12859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12317-12846]:Block[12318-12847]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[12335-12428]:IfStatement[12336-12429]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[12389-12428]:ExpressionStatement[12390-12429]"
    }, {
      "left" : "InputStream input = req.getInputStream();",
      "right" : "InputStream input = req.getInputStream();",
      "info" : "VariableDeclarationStatement[12445-12486]:VariableDeclarationStatement[12446-12487]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[12503-12517]:VariableDeclarationStatement[12504-12518]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[12534-12832]:WhileStatement[12535-12833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12563-12832]:Block[12564-12833]"
    }, {
      "left" : "int value = input.read();",
      "right" : "int value = input.read();",
      "info" : "VariableDeclarationStatement[12585-12610]:VariableDeclarationStatement[12586-12611]"
    }, {
      "left" : "if (value < 0)",
      "right" : "if (value < 0)",
      "info" : "IfStatement[12631-12676]:IfStatement[12632-12677]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12670-12676]:BreakStatement[12671-12677]"
    }, {
      "left" : "Assert.assertEquals(\"Content mismatch at index=\" + index, content[index] & 0xFF, value);",
      "right" : "Assert.assertEquals(\"Content mismatch at index=\" + index, content[index] & 0xFF, value);",
      "info" : "ExpressionStatement[12697-12785]:ExpressionStatement[12698-12786]"
    }, {
      "left" : "++index;",
      "right" : "++index;",
      "info" : "ExpressionStatement[12806-12814]:ExpressionStatement[12807-12815]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[12867-12880]:ExpressionStatement[12868-12881]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[12889-12903]:ExpressionStatement[12890-12904]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .method(HttpMethod.POST)\n                .content(new BytesContentProvider(content))\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .method(HttpMethod.POST)\n                .content(new BytesContentProvider(content))\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[12913-13174]:VariableDeclarationStatement[12914-13175]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[13184-13231]:ExpressionStatement[13185-13232]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[13240-13309]:ExpressionStatement[13241-13310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13412-15527]:Block[13413-15528]"
    }, {
      "left" : "final int length = 6 * 1024;",
      "right" : "final int length = 6 * 1024;",
      "info" : "VariableDeclarationStatement[13453-13481]:VariableDeclarationStatement[13454-13482]"
    }, {
      "left" : "Path targetTestsDir = MavenTestingUtils.getTargetTestingDir().toPath();",
      "right" : "Path targetTestsDir = MavenTestingUtils.getTargetTestingDir().toPath();",
      "info" : "VariableDeclarationStatement[13490-13561]:VariableDeclarationStatement[13491-13562]"
    }, {
      "left" : "Files.createDirectories(targetTestsDir);",
      "right" : "Files.createDirectories(targetTestsDir);",
      "info" : "ExpressionStatement[13570-13610]:ExpressionStatement[13571-13611]"
    }, {
      "left" : "final Path temp = Files.createTempFile(targetTestsDir, \"test_\", null);",
      "right" : "final Path temp = Files.createTempFile(targetTestsDir, \"test_\", null);",
      "info" : "VariableDeclarationStatement[13619-13689]:VariableDeclarationStatement[13620-13690]"
    }, {
      "left" : "byte[] kb = new byte[1024];",
      "right" : "byte[] kb = new byte[1024];",
      "info" : "VariableDeclarationStatement[13698-13725]:VariableDeclarationStatement[13699-13726]"
    }, {
      "left" : "new Random().nextBytes(kb);",
      "right" : "new Random().nextBytes(kb);",
      "info" : "ExpressionStatement[13734-13761]:ExpressionStatement[13735-13762]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13770-13951]:TryStatement[13771-13952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13861-13951]:Block[13862-13952]"
    }, {
      "left" : "for (int i = 0; i < length; ++i)\n                output.write(kb);",
      "right" : "for (int i = 0; i < length; ++i)\n                output.write(kb);",
      "info" : "ForStatement[13875-13941]:ForStatement[13876-13942]"
    }, {
      "left" : "output.write(kb);",
      "right" : "output.write(kb);",
      "info" : "ExpressionStatement[13924-13941]:ExpressionStatement[13925-13942]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                try (InputStream input = Files.newInputStream(temp))\n                {\n                    IO.copy(input, response.getOutputStream());\n                }\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                try (InputStream input = Files.newInputStream(temp))\n                {\n                    IO.copy(input, response.getOutputStream());\n                }\n            }\n        });",
      "info" : "ExpressionStatement[13960-14358]:ExpressionStatement[13961-14359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14162-14346]:Block[14163-14347]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14180-14332]:TryStatement[14181-14333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14249-14332]:Block[14250-14333]"
    }, {
      "left" : "IO.copy(input, response.getOutputStream());",
      "right" : "IO.copy(input, response.getOutputStream());",
      "info" : "ExpressionStatement[14271-14314]:ExpressionStatement[14272-14315]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[14367-14380]:ExpressionStatement[14368-14381]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[14389-14403]:ExpressionStatement[14390-14404]"
    }, {
      "left" : "Request request = client.newRequest(\"localhost\", serverConnector.getLocalPort()).path(\"/proxy/test\");",
      "right" : "Request request = client.newRequest(\"localhost\", serverConnector.getLocalPort()).path(\"/proxy/test\");",
      "info" : "VariableDeclarationStatement[14413-14514]:VariableDeclarationStatement[14414-14515]"
    }, {
      "left" : "final CountDownLatch latch = new CountDownLatch(1);",
      "right" : "final CountDownLatch latch = new CountDownLatch(1);",
      "info" : "VariableDeclarationStatement[14523-14574]:VariableDeclarationStatement[14524-14575]"
    }, {
      "left" : "request.send(new BufferingResponseListener(2 * length * 1024)\n        {\n            @Override\n            public void onContent(Response response, ByteBuffer content)\n            {\n                try\n                {\n                    // Slow down the reader\n                    TimeUnit.MILLISECONDS.sleep(5);\n                    super.onContent(response, content);\n                }\n                catch (InterruptedException x)\n                {\n                    response.abort(x);\n                }\n            }\n\n            @Override\n            public void onComplete(Result result)\n            {\n                Assert.assertFalse(result.isFailed());\n                Assert.assertEquals(200, result.getResponse().getStatus());\n                Assert.assertEquals(length * 1024, getContent().length);\n                latch.countDown();\n            }\n        });",
      "right" : "request.send(new BufferingResponseListener(2 * length * 1024)\n        {\n            @Override\n            public void onContent(Response response, ByteBuffer content)\n            {\n                try\n                {\n                    // Slow down the reader\n                    TimeUnit.MILLISECONDS.sleep(5);\n                    super.onContent(response, content);\n                }\n                catch (InterruptedException x)\n                {\n                    response.abort(x);\n                }\n            }\n\n            @Override\n            public void onComplete(Result result)\n            {\n                Assert.assertFalse(result.isFailed());\n                Assert.assertEquals(200, result.getResponse().getStatus());\n                Assert.assertEquals(length * 1024, getContent().length);\n                latch.countDown();\n            }\n        });",
      "info" : "ExpressionStatement[14583-15459]:ExpressionStatement[14584-15460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14762-15107]:Block[14763-15108]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14780-15093]:TryStatement[14781-15094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14800-14971]:Block[14801-14972]"
    }, {
      "left" : "TimeUnit.MILLISECONDS.sleep(5);",
      "right" : "TimeUnit.MILLISECONDS.sleep(5);",
      "info" : "ExpressionStatement[14866-14897]:ExpressionStatement[14867-14898]"
    }, {
      "left" : "super.onContent(response, content);",
      "right" : "super.onContent(response, content);",
      "info" : "ExpressionStatement[14918-14953]:ExpressionStatement[14919-14954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15035-15093]:Block[15036-15094]"
    }, {
      "left" : "response.abort(x);",
      "right" : "response.abort(x);",
      "info" : "ExpressionStatement[15057-15075]:ExpressionStatement[15058-15076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15193-15447]:Block[15194-15448]"
    }, {
      "left" : "Assert.assertFalse(result.isFailed());",
      "right" : "Assert.assertFalse(result.isFailed());",
      "info" : "ExpressionStatement[15211-15249]:ExpressionStatement[15212-15250]"
    }, {
      "left" : "Assert.assertEquals(200, result.getResponse().getStatus());",
      "right" : "Assert.assertEquals(200, result.getResponse().getStatus());",
      "info" : "ExpressionStatement[15266-15325]:ExpressionStatement[15267-15326]"
    }, {
      "left" : "Assert.assertEquals(length * 1024, getContent().length);",
      "right" : "Assert.assertEquals(length * 1024, getContent().length);",
      "info" : "ExpressionStatement[15342-15398]:ExpressionStatement[15343-15399]"
    }, {
      "left" : "latch.countDown();",
      "right" : "latch.countDown();",
      "info" : "ExpressionStatement[15415-15433]:ExpressionStatement[15416-15434]"
    }, {
      "left" : "Assert.assertTrue(latch.await(30, TimeUnit.SECONDS));",
      "right" : "Assert.assertTrue(latch.await(30, TimeUnit.SECONDS));",
      "info" : "ExpressionStatement[15468-15521]:ExpressionStatement[15469-15522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15603-16312]:Block[15604-16313]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                resp.getOutputStream().print(req.getQueryString());\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                resp.getOutputStream().print(req.getQueryString());\n            }\n        });",
      "info" : "ExpressionStatement[15613-15902]:ExpressionStatement[15614-15903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15807-15890]:Block[15808-15891]"
    }, {
      "left" : "resp.getOutputStream().print(req.getQueryString());",
      "right" : "resp.getOutputStream().print(req.getQueryString());",
      "info" : "ExpressionStatement[15825-15876]:ExpressionStatement[15826-15877]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[15911-15924]:ExpressionStatement[15912-15925]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[15933-15947]:ExpressionStatement[15934-15948]"
    }, {
      "left" : "String query = \"a=1&b=%E2%82%AC\";",
      "right" : "String query = \"a=1&b=%E2%82%AC\";",
      "info" : "VariableDeclarationStatement[15957-15990]:VariableDeclarationStatement[15958-15991]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"http://localhost:\" + serverConnector.getLocalPort() + \"/?\" + query)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"http://localhost:\" + serverConnector.getLocalPort() + \"/?\" + query)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[15999-16183]:VariableDeclarationStatement[16000-16184]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[16192-16239]:ExpressionStatement[16193-16240]"
    }, {
      "left" : "Assert.assertEquals(query, response.getContentAsString());",
      "right" : "Assert.assertEquals(query, response.getContentAsString());",
      "info" : "ExpressionStatement[16248-16306]:ExpressionStatement[16249-16307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16381-18230]:Block[16382-18231]"
    }, {
      "left" : "final long timeout = 1000;",
      "right" : "final long timeout = 1000;",
      "info" : "VariableDeclarationStatement[16391-16417]:VariableDeclarationStatement[16392-16418]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException\n            {\n                if (!request.isAsyncStarted())\n                {\n                    final AsyncContext asyncContext = request.startAsync();\n                    asyncContext.setTimeout(timeout);\n                    asyncContext.addListener(new AsyncListener()\n                    {\n                        @Override\n                        public void onComplete(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onTimeout(AsyncEvent event) throws IOException\n                        {\n                            if (request.getHeader(\"Via\") != null)\n                                response.addHeader(PROXIED_HEADER, \"true\");\n                            asyncContext.complete();\n                        }\n\n                        @Override\n                        public void onError(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onStartAsync(AsyncEvent event) throws IOException\n                        {\n                        }\n                    });\n                }\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(final HttpServletRequest request, final HttpServletResponse response) throws ServletException, IOException\n            {\n                if (!request.isAsyncStarted())\n                {\n                    final AsyncContext asyncContext = request.startAsync();\n                    asyncContext.setTimeout(timeout);\n                    asyncContext.addListener(new AsyncListener()\n                    {\n                        @Override\n                        public void onComplete(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onTimeout(AsyncEvent event) throws IOException\n                        {\n                            if (request.getHeader(\"Via\") != null)\n                                response.addHeader(PROXIED_HEADER, \"true\");\n                            asyncContext.complete();\n                        }\n\n                        @Override\n                        public void onError(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onStartAsync(AsyncEvent event) throws IOException\n                        {\n                        }\n                    });\n                }\n            }\n        });",
      "info" : "ExpressionStatement[16426-17867]:ExpressionStatement[16427-17868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16640-17855]:Block[16641-17856]"
    }, {
      "left" : "if (!request.isAsyncStarted())",
      "right" : "if (!request.isAsyncStarted())",
      "info" : "IfStatement[16658-17841]:IfStatement[16659-17842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16705-17841]:Block[16706-17842]"
    }, {
      "left" : "final AsyncContext asyncContext = request.startAsync();",
      "right" : "final AsyncContext asyncContext = request.startAsync();",
      "info" : "VariableDeclarationStatement[16727-16782]:VariableDeclarationStatement[16728-16783]"
    }, {
      "left" : "asyncContext.setTimeout(timeout);",
      "right" : "asyncContext.setTimeout(timeout);",
      "info" : "ExpressionStatement[16803-16836]:ExpressionStatement[16804-16837]"
    }, {
      "left" : "asyncContext.addListener(new AsyncListener()\n                    {\n                        @Override\n                        public void onComplete(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onTimeout(AsyncEvent event) throws IOException\n                        {\n                            if (request.getHeader(\"Via\") != null)\n                                response.addHeader(PROXIED_HEADER, \"true\");\n                            asyncContext.complete();\n                        }\n\n                        @Override\n                        public void onError(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onStartAsync(AsyncEvent event) throws IOException\n                        {\n                        }\n                    });",
      "right" : "asyncContext.addListener(new AsyncListener()\n                    {\n                        @Override\n                        public void onComplete(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onTimeout(AsyncEvent event) throws IOException\n                        {\n                            if (request.getHeader(\"Via\") != null)\n                                response.addHeader(PROXIED_HEADER, \"true\");\n                            asyncContext.complete();\n                        }\n\n                        @Override\n                        public void onError(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onStartAsync(AsyncEvent event) throws IOException\n                        {\n                        }\n                    });",
      "info" : "ExpressionStatement[16857-17823]:ExpressionStatement[16858-17824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17066-17093]:Block[17067-17094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17236-17458]:Block[17237-17459]"
    }, {
      "left" : "if (request.getHeader(\"Via\") != null)",
      "right" : "if (request.getHeader(\"Via\") != null)",
      "info" : "IfStatement[17266-17379]:IfStatement[17267-17380]"
    }, {
      "left" : "response.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "response.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[17336-17379]:ExpressionStatement[17337-17380]"
    }, {
      "left" : "asyncContext.complete();",
      "right" : "asyncContext.complete();",
      "info" : "ExpressionStatement[17408-17432]:ExpressionStatement[17409-17433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17599-17626]:Block[17600-17627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17772-17799]:Block[17773-17800]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[17876-17889]:ExpressionStatement[17877-17890]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[17898-17912]:ExpressionStatement[17899-17913]"
    }, {
      "left" : "Response response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(2 * timeout, TimeUnit.MILLISECONDS)\n                .send();",
      "right" : "Response response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(2 * timeout, TimeUnit.MILLISECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[17922-18090]:VariableDeclarationStatement[17923-18091]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[18099-18146]:ExpressionStatement[18100-18147]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[18155-18224]:ExpressionStatement[18156-18225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18320-19095]:Block[18321-19096]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                PrintWriter writer = resp.getWriter();\n                writer.write(req.getHeader(\"X-Forwarded-Host\"));\n                writer.flush();\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                PrintWriter writer = resp.getWriter();\n                writer.write(req.getHeader(\"X-Forwarded-Host\"));\n                writer.flush();\n            }\n        });",
      "info" : "ExpressionStatement[18330-18703]:ExpressionStatement[18331-18704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18524-18691]:Block[18525-18692]"
    }, {
      "left" : "PrintWriter writer = resp.getWriter();",
      "right" : "PrintWriter writer = resp.getWriter();",
      "info" : "VariableDeclarationStatement[18542-18580]:VariableDeclarationStatement[18543-18581]"
    }, {
      "left" : "writer.write(req.getHeader(\"X-Forwarded-Host\"));",
      "right" : "writer.write(req.getHeader(\"X-Forwarded-Host\"));",
      "info" : "ExpressionStatement[18597-18645]:ExpressionStatement[18598-18646]"
    }, {
      "left" : "writer.flush();",
      "right" : "writer.flush();",
      "info" : "ExpressionStatement[18662-18677]:ExpressionStatement[18663-18678]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[18712-18725]:ExpressionStatement[18713-18726]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[18734-18748]:ExpressionStatement[18735-18749]"
    }, {
      "left" : "ContentResponse response = client.GET(\"http://localhost:\" + serverConnector.getLocalPort());",
      "right" : "ContentResponse response = client.GET(\"http://localhost:\" + serverConnector.getLocalPort());",
      "info" : "VariableDeclarationStatement[18758-18850]:VariableDeclarationStatement[18759-18851]"
    }, {
      "left" : "Assert.assertThat(\"Response expected to contain content of X-Forwarded-Host Header from the request\",\n                response.getContentAsString(),\n                Matchers.equalTo(\"localhost:\" + serverConnector.getLocalPort()));",
      "right" : "Assert.assertThat(\"Response expected to contain content of X-Forwarded-Host Header from the request\",\n                response.getContentAsString(),\n                Matchers.equalTo(\"localhost:\" + serverConnector.getLocalPort()));",
      "info" : "ExpressionStatement[18859-19089]:ExpressionStatement[18860-19090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19165-19840]:Block[19166-19841]"
    }, {
      "left" : "startServer(new EmptyHttpServlet());",
      "right" : "startServer(new EmptyHttpServlet());",
      "info" : "ExpressionStatement[19175-19211]:ExpressionStatement[19176-19212]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[19220-19233]:ExpressionStatement[19221-19234]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[19242-19256]:ExpressionStatement[19243-19257]"
    }, {
      "left" : "int port = serverConnector.getLocalPort();",
      "right" : "int port = serverConnector.getLocalPort();",
      "info" : "VariableDeclarationStatement[19265-19307]:VariableDeclarationStatement[19266-19308]"
    }, {
      "left" : "proxyServlet.getWhiteListHosts().add(\"127.0.0.1:\" + port);",
      "right" : "proxyServlet.getWhiteListHosts().add(\"127.0.0.1:\" + port);",
      "info" : "ExpressionStatement[19316-19374]:ExpressionStatement[19317-19375]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[19419-19553]:VariableDeclarationStatement[19420-19554]"
    }, {
      "left" : "Assert.assertEquals(403, response.getStatus());",
      "right" : "Assert.assertEquals(403, response.getStatus());",
      "info" : "ExpressionStatement[19562-19609]:ExpressionStatement[19563-19610]"
    }, {
      "left" : "response = client.newRequest(\"127.0.0.1\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "response = client.newRequest(\"127.0.0.1\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "ExpressionStatement[19660-19778]:ExpressionStatement[19661-19779]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[19787-19834]:ExpressionStatement[19788-19835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19910-20585]:Block[19911-20586]"
    }, {
      "left" : "startServer(new EmptyHttpServlet());",
      "right" : "startServer(new EmptyHttpServlet());",
      "info" : "ExpressionStatement[19920-19956]:ExpressionStatement[19921-19957]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[19965-19978]:ExpressionStatement[19966-19979]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[19987-20001]:ExpressionStatement[19988-20002]"
    }, {
      "left" : "int port = serverConnector.getLocalPort();",
      "right" : "int port = serverConnector.getLocalPort();",
      "info" : "VariableDeclarationStatement[20010-20052]:VariableDeclarationStatement[20011-20053]"
    }, {
      "left" : "proxyServlet.getBlackListHosts().add(\"localhost:\" + port);",
      "right" : "proxyServlet.getBlackListHosts().add(\"localhost:\" + port);",
      "info" : "ExpressionStatement[20061-20119]:ExpressionStatement[20062-20120]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[20164-20298]:VariableDeclarationStatement[20165-20299]"
    }, {
      "left" : "Assert.assertEquals(403, response.getStatus());",
      "right" : "Assert.assertEquals(403, response.getStatus());",
      "info" : "ExpressionStatement[20307-20354]:ExpressionStatement[20308-20355]"
    }, {
      "left" : "response = client.newRequest(\"127.0.0.1\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "response = client.newRequest(\"127.0.0.1\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "ExpressionStatement[20405-20523]:ExpressionStatement[20406-20524]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[20532-20579]:ExpressionStatement[20533-20580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20660-21830]:Block[20661-21831]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n            }\n        });",
      "info" : "ExpressionStatement[20670-21001]:ExpressionStatement[20671-21002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20864-20989]:Block[20865-20990]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[20882-20975]:IfStatement[20883-20976]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[20936-20975]:ExpressionStatement[20937-20976]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[21010-21023]:ExpressionStatement[21011-21024]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[21032-21046]:ExpressionStatement[21033-21047]"
    }, {
      "left" : "int port = serverConnector.getLocalPort();",
      "right" : "int port = serverConnector.getLocalPort();",
      "info" : "VariableDeclarationStatement[21055-21097]:VariableDeclarationStatement[21056-21098]"
    }, {
      "left" : "client.getProxyConfiguration().getProxies().get(0).getExcludedAddresses().add(\"127.0.0.1:\" + port);",
      "right" : "client.getProxyConfiguration().getProxies().get(0).getExcludedAddresses().add(\"127.0.0.1:\" + port);",
      "info" : "ExpressionStatement[21106-21205]:ExpressionStatement[21107-21206]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[21250-21384]:VariableDeclarationStatement[21251-21385]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[21393-21440]:ExpressionStatement[21394-21441]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[21449-21518]:ExpressionStatement[21450-21519]"
    }, {
      "left" : "response = client.newRequest(\"127.0.0.1\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "response = client.newRequest(\"127.0.0.1\", port)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "ExpressionStatement[21571-21689]:ExpressionStatement[21572-21690]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[21698-21745]:ExpressionStatement[21699-21746]"
    }, {
      "left" : "Assert.assertFalse(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertFalse(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[21754-21824]:ExpressionStatement[21755-21825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21902-21959]:Block[21903-21960]"
    }, {
      "left" : "testTransparentProxyWithPrefix(\"/proxy\");",
      "right" : "testTransparentProxyWithPrefix(\"/proxy\");",
      "info" : "ExpressionStatement[21912-21953]:ExpressionStatement[21913-21954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22046-22098]:Block[22047-22099]"
    }, {
      "left" : "testTransparentProxyWithPrefix(\"/\");",
      "right" : "testTransparentProxyWithPrefix(\"/\");",
      "info" : "ExpressionStatement[22056-22092]:ExpressionStatement[22057-22093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22184-23421]:Block[22185-23422]"
    }, {
      "left" : "final String target = \"/test\";",
      "right" : "final String target = \"/test\";",
      "info" : "VariableDeclarationStatement[22194-22224]:VariableDeclarationStatement[22195-22225]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.setStatus(target.equals(req.getRequestURI()) ? 200 : 404);\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.setStatus(target.equals(req.getRequestURI()) ? 200 : 404);\n            }\n        });",
      "info" : "ExpressionStatement[22233-22644]:ExpressionStatement[22234-22645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22427-22632]:Block[22428-22633]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[22445-22538]:IfStatement[22446-22539]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[22499-22538]:ExpressionStatement[22500-22539]"
    }, {
      "left" : "resp.setStatus(target.equals(req.getRequestURI()) ? 200 : 404);",
      "right" : "resp.setStatus(target.equals(req.getRequestURI()) ? 200 : 404);",
      "info" : "ExpressionStatement[22555-22618]:ExpressionStatement[22556-22619]"
    }, {
      "left" : "String proxyTo = \"http://localhost:\" + serverConnector.getLocalPort();",
      "right" : "String proxyTo = \"http://localhost:\" + serverConnector.getLocalPort();",
      "info" : "VariableDeclarationStatement[22653-22723]:VariableDeclarationStatement[22654-22724]"
    }, {
      "left" : "proxyServlet = new ProxyServlet.Transparent();",
      "right" : "proxyServlet = new ProxyServlet.Transparent();",
      "info" : "ExpressionStatement[22732-22778]:ExpressionStatement[22733-22779]"
    }, {
      "left" : "Map<String, String> params = new HashMap<>();",
      "right" : "Map<String, String> params = new HashMap<>();",
      "info" : "VariableDeclarationStatement[22787-22832]:VariableDeclarationStatement[22788-22833]"
    }, {
      "left" : "params.put(\"proxyTo\", proxyTo);",
      "right" : "params.put(\"proxyTo\", proxyTo);",
      "info" : "ExpressionStatement[22841-22872]:ExpressionStatement[22842-22873]"
    }, {
      "left" : "params.put(\"prefix\", prefix);",
      "right" : "params.put(\"prefix\", prefix);",
      "info" : "ExpressionStatement[22881-22910]:ExpressionStatement[22882-22911]"
    }, {
      "left" : "startProxy(params);",
      "right" : "startProxy(params);",
      "info" : "ExpressionStatement[22919-22938]:ExpressionStatement[22920-22939]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[22947-22961]:ExpressionStatement[22948-22962]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", proxyConnector.getLocalPort())\n                .path((prefix + target).replaceAll(\"//\", \"/\"))\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", proxyConnector.getLocalPort())\n                .path((prefix + target).replaceAll(\"//\", \"/\"))\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[23059-23281]:VariableDeclarationStatement[23060-23282]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[23290-23337]:ExpressionStatement[23291-23338]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[23346-23415]:ExpressionStatement[23347-23416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23502-25034]:Block[23503-23576]"
    }, {
      "left" : "final String query = \"a=1&b=2\";",
      "right" : "final String query = \"a=1&b=2\";",
      "info" : "VariableDeclarationStatement[23551-23582]:VariableDeclarationStatement[24211-24242]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n\n                if (target.equals(req.getRequestURI()))\n                {\n                    if (query.equals(req.getQueryString()))\n                    {\n                        resp.setStatus(200);\n                        return;\n                    }\n                }\n                resp.setStatus(404);\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n\n                String expectedURI = proxyToContext + target;\n                if (expectedURI.isEmpty())\n                    expectedURI = \"/\";\n                if (expectedURI.equals(req.getRequestURI()))\n                {\n                    if (query.equals(req.getQueryString()))\n                    {\n                        resp.setStatus(200);\n                        return;\n                    }\n                }\n                resp.setStatus(404);\n            }\n        });",
      "info" : "ExpressionStatement[23591-24233]:ExpressionStatement[24251-25042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23785-24221]:Block[24445-25030]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[23803-23896]:IfStatement[24463-24556]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[23857-23896]:ExpressionStatement[24517-24556]"
    }, {
      "left" : "if (target.equals(req.getRequestURI()))",
      "right" : "if (expectedURI.equals(req.getRequestURI()))",
      "info" : "IfStatement[23914-24170]:IfStatement[24718-24979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23970-24170]:Block[24779-24979]"
    }, {
      "left" : "if (query.equals(req.getQueryString()))",
      "right" : "if (query.equals(req.getQueryString()))",
      "info" : "IfStatement[23992-24152]:IfStatement[24801-24961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24052-24152]:Block[24861-24961]"
    }, {
      "left" : "resp.setStatus(200);",
      "right" : "resp.setStatus(200);",
      "info" : "ExpressionStatement[24078-24098]:ExpressionStatement[24887-24907]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24123-24130]:ReturnStatement[24932-24939]"
    }, {
      "left" : "resp.setStatus(404);",
      "right" : "resp.setStatus(404);",
      "info" : "ExpressionStatement[24187-24207]:ExpressionStatement[24996-25016]"
    }, {
      "left" : "String proxyTo = \"http://localhost:\" + serverConnector.getLocalPort();",
      "right" : "String expectedURI = proxyToContext + target;",
      "info" : "VariableDeclarationStatement[24242-24312]:VariableDeclarationStatement[24574-24619]"
    }, {
      "left" : "proxyServlet = new ProxyServlet.Transparent();",
      "right" : "proxyServlet = new ProxyServlet.Transparent();",
      "info" : "ExpressionStatement[24355-24401]:ExpressionStatement[25147-25193]"
    }, {
      "left" : "Map<String, String> params = new HashMap<>();",
      "right" : "Map<String, String> params = new HashMap<>();",
      "info" : "VariableDeclarationStatement[24410-24455]:VariableDeclarationStatement[25202-25247]"
    }, {
      "left" : "params.put(\"proxyTo\", proxyTo);",
      "right" : "params.put(\"proxyTo\", proxyTo);",
      "info" : "ExpressionStatement[24464-24495]:ExpressionStatement[25256-25287]"
    }, {
      "left" : "params.put(\"prefix\", prefix);",
      "right" : "params.put(\"prefix\", prefix);",
      "info" : "ExpressionStatement[24504-24533]:ExpressionStatement[25296-25325]"
    }, {
      "left" : "startProxy(params);",
      "right" : "startProxy(params);",
      "info" : "ExpressionStatement[24542-24561]:ExpressionStatement[25334-25353]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[24570-24584]:ExpressionStatement[25362-25376]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", proxyConnector.getLocalPort())\n                .path(prefix + target + \"?\" + query)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", proxyConnector.getLocalPort())\n                .path(prefix + target + \"?\" + query)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[24682-24894]:VariableDeclarationStatement[25474-25686]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[24903-24950]:ExpressionStatement[25695-25742]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[24959-25028]:ExpressionStatement[25751-25820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25119-26303]:Block[27562-28746]"
    }, {
      "left" : "final String target = \"/test\";",
      "right" : "final String target = \"/test\";",
      "info" : "VariableDeclarationStatement[25129-25159]:VariableDeclarationStatement[27572-27602]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.setStatus(target.equals(req.getRequestURI()) ? 200 : 404);\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.setStatus(target.equals(req.getRequestURI()) ? 200 : 404);\n            }\n        });",
      "info" : "ExpressionStatement[25168-25579]:ExpressionStatement[27611-28022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25362-25567]:Block[27805-28010]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[25380-25473]:IfStatement[27823-27916]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[25434-25473]:ExpressionStatement[27877-27916]"
    }, {
      "left" : "resp.setStatus(target.equals(req.getRequestURI()) ? 200 : 404);",
      "right" : "resp.setStatus(target.equals(req.getRequestURI()) ? 200 : 404);",
      "info" : "ExpressionStatement[25490-25553]:ExpressionStatement[27933-27996]"
    }, {
      "left" : "final String proxyTo = \"http://localhost:\" + serverConnector.getLocalPort();",
      "right" : "final String proxyTo = \"http://localhost:\" + serverConnector.getLocalPort();",
      "info" : "VariableDeclarationStatement[25588-25664]:VariableDeclarationStatement[28031-28107]"
    }, {
      "left" : "proxyServlet = new ProxyServlet.Transparent();",
      "right" : "proxyServlet = new ProxyServlet.Transparent();",
      "info" : "ExpressionStatement[25673-25719]:ExpressionStatement[28116-28162]"
    }, {
      "left" : "Map<String, String> initParams = new HashMap<>();",
      "right" : "Map<String, String> initParams = new HashMap<>();",
      "info" : "VariableDeclarationStatement[25728-25777]:VariableDeclarationStatement[28171-28220]"
    }, {
      "left" : "initParams.put(\"proxyTo\", proxyTo);",
      "right" : "initParams.put(\"proxyTo\", proxyTo);",
      "info" : "ExpressionStatement[25786-25821]:ExpressionStatement[28229-28264]"
    }, {
      "left" : "startProxy(initParams);",
      "right" : "startProxy(initParams);",
      "info" : "ExpressionStatement[25830-25853]:ExpressionStatement[28273-28296]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[25862-25876]:ExpressionStatement[28305-28319]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", proxyConnector.getLocalPort())\n                .path(target)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", proxyConnector.getLocalPort())\n                .path(target)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[25974-26163]:VariableDeclarationStatement[28417-28606]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[26172-26219]:ExpressionStatement[28615-28662]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[26228-26297]:ExpressionStatement[28671-28740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26371-30147]:Block[28814-32590]"
    }, {
      "left" : "final byte[] content = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};",
      "right" : "final byte[] content = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0xA, 0xB, 0xC, 0xD, 0xE, 0xF};",
      "info" : "VariableDeclarationStatement[26381-26465]:VariableDeclarationStatement[28824-28908]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.getOutputStream().write(content);\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.getOutputStream().write(content);\n            }\n        });",
      "info" : "ExpressionStatement[26474-26860]:ExpressionStatement[28917-29303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26668-26848]:Block[29111-29291]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[26686-26779]:IfStatement[29129-29222]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[26740-26779]:ExpressionStatement[29183-29222]"
    }, {
      "left" : "resp.getOutputStream().write(content);",
      "right" : "resp.getOutputStream().write(content);",
      "info" : "ExpressionStatement[26796-26834]:ExpressionStatement[29239-29277]"
    }, {
      "left" : "final String cacheHeader = \"X-Cached\";",
      "right" : "final String cacheHeader = \"X-Cached\";",
      "info" : "VariableDeclarationStatement[27092-27130]:VariableDeclarationStatement[29535-29573]"
    }, {
      "left" : "proxyServlet = new ProxyServlet()\n        {\n            private Map<String, ContentResponse> cache = new HashMap<>();\n            private Map<String, ByteArrayOutputStream> temp = new HashMap<>();\n\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                ContentResponse cachedResponse = cache.get(request.getRequestURI());\n                if (cachedResponse != null)\n                {\n                    response.setStatus(cachedResponse.getStatus());\n                    // Should copy headers too, but keep it simple\n                    response.addHeader(cacheHeader, \"true\");\n                    response.getOutputStream().write(cachedResponse.getContent());\n                }\n                else\n                {\n                    super.service(request, response);\n                }\n            }\n\n            @Override\n            protected void onResponseContent(HttpServletRequest request, HttpServletResponse response, Response proxyResponse, byte[] buffer, int offset, int length, Callback callback)\n            {\n                // Accumulate the response content\n                ByteArrayOutputStream baos = temp.get(request.getRequestURI());\n                if (baos == null)\n                {\n                    baos = new ByteArrayOutputStream();\n                    temp.put(request.getRequestURI(), baos);\n                }\n                baos.write(buffer, offset, length);\n                super.onResponseContent(request, response, proxyResponse, buffer, offset, length, callback);\n            }\n\n            @Override\n            protected void onProxyResponseSuccess(HttpServletRequest request, HttpServletResponse response, Response proxyResponse)\n            {\n                byte[] content = temp.remove(request.getRequestURI()).toByteArray();\n                ContentResponse cached = new HttpContentResponse(proxyResponse, content, null, null);\n                cache.put(request.getRequestURI(), cached);\n                super.onProxyResponseSuccess(request, response, proxyResponse);\n            }\n        };",
      "right" : "proxyServlet = new ProxyServlet()\n        {\n            private Map<String, ContentResponse> cache = new HashMap<>();\n            private Map<String, ByteArrayOutputStream> temp = new HashMap<>();\n\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                ContentResponse cachedResponse = cache.get(request.getRequestURI());\n                if (cachedResponse != null)\n                {\n                    response.setStatus(cachedResponse.getStatus());\n                    // Should copy headers too, but keep it simple\n                    response.addHeader(cacheHeader, \"true\");\n                    response.getOutputStream().write(cachedResponse.getContent());\n                }\n                else\n                {\n                    super.service(request, response);\n                }\n            }\n\n            @Override\n            protected void onResponseContent(HttpServletRequest request, HttpServletResponse response, Response proxyResponse, byte[] buffer, int offset, int length, Callback callback)\n            {\n                // Accumulate the response content\n                ByteArrayOutputStream baos = temp.get(request.getRequestURI());\n                if (baos == null)\n                {\n                    baos = new ByteArrayOutputStream();\n                    temp.put(request.getRequestURI(), baos);\n                }\n                baos.write(buffer, offset, length);\n                super.onResponseContent(request, response, proxyResponse, buffer, offset, length, callback);\n            }\n\n            @Override\n            protected void onProxyResponseSuccess(HttpServletRequest request, HttpServletResponse response, Response proxyResponse)\n            {\n                byte[] content = temp.remove(request.getRequestURI()).toByteArray();\n                ContentResponse cached = new HttpContentResponse(proxyResponse, content, null, null);\n                cache.put(request.getRequestURI(), cached);\n                super.onProxyResponseSuccess(request, response, proxyResponse);\n            }\n        };",
      "info" : "ExpressionStatement[27139-29307]:ExpressionStatement[29582-31750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27501-28071]:Block[29944-30514]"
    }, {
      "left" : "ContentResponse cachedResponse = cache.get(request.getRequestURI());",
      "right" : "ContentResponse cachedResponse = cache.get(request.getRequestURI());",
      "info" : "VariableDeclarationStatement[27519-27587]:VariableDeclarationStatement[29962-30030]"
    }, {
      "left" : "if (cachedResponse != null)",
      "right" : "if (cachedResponse != null)",
      "info" : "IfStatement[27604-28057]:IfStatement[30047-30500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27648-27946]:Block[30091-30389]"
    }, {
      "left" : "response.setStatus(cachedResponse.getStatus());",
      "right" : "response.setStatus(cachedResponse.getStatus());",
      "info" : "ExpressionStatement[27670-27717]:ExpressionStatement[30113-30160]"
    }, {
      "left" : "response.addHeader(cacheHeader, \"true\");",
      "right" : "response.addHeader(cacheHeader, \"true\");",
      "info" : "ExpressionStatement[27805-27845]:ExpressionStatement[30248-30288]"
    }, {
      "left" : "response.getOutputStream().write(cachedResponse.getContent());",
      "right" : "response.getOutputStream().write(cachedResponse.getContent());",
      "info" : "ExpressionStatement[27866-27928]:ExpressionStatement[30309-30371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27984-28057]:Block[30427-30500]"
    }, {
      "left" : "super.service(request, response);",
      "right" : "super.service(request, response);",
      "info" : "ExpressionStatement[28006-28039]:ExpressionStatement[30449-30482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28292-28786]:Block[30735-31229]"
    }, {
      "left" : "ByteArrayOutputStream baos = temp.get(request.getRequestURI());",
      "right" : "ByteArrayOutputStream baos = temp.get(request.getRequestURI());",
      "info" : "VariableDeclarationStatement[28361-28424]:VariableDeclarationStatement[30804-30867]"
    }, {
      "left" : "if (baos == null)",
      "right" : "if (baos == null)",
      "info" : "IfStatement[28441-28611]:IfStatement[30884-31054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28475-28611]:Block[30918-31054]"
    }, {
      "left" : "baos = new ByteArrayOutputStream();",
      "right" : "baos = new ByteArrayOutputStream();",
      "info" : "ExpressionStatement[28497-28532]:ExpressionStatement[30940-30975]"
    }, {
      "left" : "temp.put(request.getRequestURI(), baos);",
      "right" : "temp.put(request.getRequestURI(), baos);",
      "info" : "ExpressionStatement[28553-28593]:ExpressionStatement[30996-31036]"
    }, {
      "left" : "baos.write(buffer, offset, length);",
      "right" : "baos.write(buffer, offset, length);",
      "info" : "ExpressionStatement[28628-28663]:ExpressionStatement[31071-31106]"
    }, {
      "left" : "super.onResponseContent(request, response, proxyResponse, buffer, offset, length, callback);",
      "right" : "super.onResponseContent(request, response, proxyResponse, buffer, offset, length, callback);",
      "info" : "ExpressionStatement[28680-28772]:ExpressionStatement[31123-31215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28954-29296]:Block[31397-31739]"
    }, {
      "left" : "byte[] content = temp.remove(request.getRequestURI()).toByteArray();",
      "right" : "byte[] content = temp.remove(request.getRequestURI()).toByteArray();",
      "info" : "VariableDeclarationStatement[28972-29040]:VariableDeclarationStatement[31415-31483]"
    }, {
      "left" : "ContentResponse cached = new HttpContentResponse(proxyResponse, content, null, null);",
      "right" : "ContentResponse cached = new HttpContentResponse(proxyResponse, content, null, null);",
      "info" : "VariableDeclarationStatement[29057-29142]:VariableDeclarationStatement[31500-31585]"
    }, {
      "left" : "cache.put(request.getRequestURI(), cached);",
      "right" : "cache.put(request.getRequestURI(), cached);",
      "info" : "ExpressionStatement[29159-29202]:ExpressionStatement[31602-31645]"
    }, {
      "left" : "super.onProxyResponseSuccess(request, response, proxyResponse);",
      "right" : "super.onProxyResponseSuccess(request, response, proxyResponse);",
      "info" : "ExpressionStatement[29219-29282]:ExpressionStatement[31662-31725]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[29316-29329]:ExpressionStatement[31759-31772]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[29338-29352]:ExpressionStatement[31781-31795]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[29387-29547]:VariableDeclarationStatement[31830-31990]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[29556-29603]:ExpressionStatement[31999-32046]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[29612-29681]:ExpressionStatement[32055-32124]"
    }, {
      "left" : "Assert.assertArrayEquals(content, response.getContent());",
      "right" : "Assert.assertArrayEquals(content, response.getContent());",
      "info" : "ExpressionStatement[29690-29747]:ExpressionStatement[32133-32190]"
    }, {
      "left" : "response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "ExpressionStatement[29800-29944]:ExpressionStatement[32243-32387]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[29953-30000]:ExpressionStatement[32396-32443]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(cacheHeader));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(cacheHeader));",
      "info" : "ExpressionStatement[30009-30075]:ExpressionStatement[32452-32518]"
    }, {
      "left" : "Assert.assertArrayEquals(content, response.getContent());",
      "right" : "Assert.assertArrayEquals(content, response.getContent());",
      "info" : "ExpressionStatement[30084-30141]:ExpressionStatement[32527-32584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30222-31001]:Block[32665-33444]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.sendRedirect(\"/\");\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n                resp.sendRedirect(\"/\");\n            }\n        });",
      "info" : "ExpressionStatement[30232-30603]:ExpressionStatement[32675-33046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30426-30591]:Block[32869-33034]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[30444-30537]:IfStatement[32887-32980]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[30498-30537]:ExpressionStatement[32941-32980]"
    }, {
      "left" : "resp.sendRedirect(\"/\");",
      "right" : "resp.sendRedirect(\"/\");",
      "info" : "ExpressionStatement[30554-30577]:ExpressionStatement[32997-33020]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[30612-30625]:ExpressionStatement[33055-33068]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[30634-30648]:ExpressionStatement[33077-33091]"
    }, {
      "left" : "client.setFollowRedirects(false);",
      "right" : "client.setFollowRedirects(false);",
      "info" : "ExpressionStatement[30658-30691]:ExpressionStatement[33101-33134]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[30701-30861]:VariableDeclarationStatement[33144-33304]"
    }, {
      "left" : "Assert.assertEquals(302, response.getStatus());",
      "right" : "Assert.assertEquals(302, response.getStatus());",
      "info" : "ExpressionStatement[30870-30917]:ExpressionStatement[33313-33360]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[30926-30995]:ExpressionStatement[33369-33438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31077-32152]:Block[33520-34595]"
    }, {
      "left" : "final byte[] content = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
      "right" : "final byte[] content = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
      "info" : "VariableDeclarationStatement[31087-31141]:VariableDeclarationStatement[33530-33584]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n\n                resp.addHeader(\"Content-Encoding\", \"gzip\");\n                GZIPOutputStream gzipOutputStream = new GZIPOutputStream(resp.getOutputStream());\n                gzipOutputStream.write(content);\n                gzipOutputStream.close();\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n\n                resp.addHeader(\"Content-Encoding\", \"gzip\");\n                GZIPOutputStream gzipOutputStream = new GZIPOutputStream(resp.getOutputStream());\n                gzipOutputStream.write(content);\n                gzipOutputStream.close();\n            }\n        });",
      "info" : "ExpressionStatement[31150-31731]:ExpressionStatement[33593-34174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31344-31719]:Block[33787-34162]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[31362-31455]:IfStatement[33805-33898]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[31416-31455]:ExpressionStatement[33859-33898]"
    }, {
      "left" : "resp.addHeader(\"Content-Encoding\", \"gzip\");",
      "right" : "resp.addHeader(\"Content-Encoding\", \"gzip\");",
      "info" : "ExpressionStatement[31473-31516]:ExpressionStatement[33916-33959]"
    }, {
      "left" : "GZIPOutputStream gzipOutputStream = new GZIPOutputStream(resp.getOutputStream());",
      "right" : "GZIPOutputStream gzipOutputStream = new GZIPOutputStream(resp.getOutputStream());",
      "info" : "VariableDeclarationStatement[31533-31614]:VariableDeclarationStatement[33976-34057]"
    }, {
      "left" : "gzipOutputStream.write(content);",
      "right" : "gzipOutputStream.write(content);",
      "info" : "ExpressionStatement[31631-31663]:ExpressionStatement[34074-34106]"
    }, {
      "left" : "gzipOutputStream.close();",
      "right" : "gzipOutputStream.close();",
      "info" : "ExpressionStatement[31680-31705]:ExpressionStatement[34123-34148]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[31740-31753]:ExpressionStatement[34183-34196]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[31762-31776]:ExpressionStatement[34205-34219]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[31786-31946]:VariableDeclarationStatement[34229-34389]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[31955-32002]:ExpressionStatement[34398-34445]"
    }, {
      "left" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[32011-32080]:ExpressionStatement[34454-34523]"
    }, {
      "left" : "Assert.assertArrayEquals(content, response.getContent());",
      "right" : "Assert.assertArrayEquals(content, response.getContent());",
      "info" : "ExpressionStatement[32089-32146]:ExpressionStatement[34532-34589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32261-32978]:Block[34704-35421]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                byte[] message = \"tooshort\".getBytes(\"ascii\");\n                resp.setContentType(\"text/plain;charset=ascii\");\n                resp.setHeader(\"Content-Length\", Long.toString(message.length + 1));\n                resp.getOutputStream().write(message);\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                byte[] message = \"tooshort\".getBytes(\"ascii\");\n                resp.setContentType(\"text/plain;charset=ascii\");\n                resp.setHeader(\"Content-Length\", Long.toString(message.length + 1));\n                resp.getOutputStream().write(message);\n            }\n        });",
      "info" : "ExpressionStatement[32271-32760]:ExpressionStatement[34714-35203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32465-32748]:Block[34908-35191]"
    }, {
      "left" : "byte[] message = \"tooshort\".getBytes(\"ascii\");",
      "right" : "byte[] message = \"tooshort\".getBytes(\"ascii\");",
      "info" : "VariableDeclarationStatement[32483-32529]:VariableDeclarationStatement[34926-34972]"
    }, {
      "left" : "resp.setContentType(\"text/plain;charset=ascii\");",
      "right" : "resp.setContentType(\"text/plain;charset=ascii\");",
      "info" : "ExpressionStatement[32546-32594]:ExpressionStatement[34989-35037]"
    }, {
      "left" : "resp.setHeader(\"Content-Length\", Long.toString(message.length + 1));",
      "right" : "resp.setHeader(\"Content-Length\", Long.toString(message.length + 1));",
      "info" : "ExpressionStatement[32611-32679]:ExpressionStatement[35054-35122]"
    }, {
      "left" : "resp.getOutputStream().write(message);",
      "right" : "resp.getOutputStream().write(message);",
      "info" : "ExpressionStatement[32696-32734]:ExpressionStatement[35139-35177]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[32769-32782]:ExpressionStatement[35212-35225]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[32791-32805]:ExpressionStatement[35234-35248]"
    }, {
      "left" : "client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(1, TimeUnit.SECONDS)\n                .send();",
      "right" : "client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(1, TimeUnit.SECONDS)\n                .send();",
      "info" : "ExpressionStatement[32815-32948]:ExpressionStatement[35258-35391]"
    }, {
      "left" : "Assert.fail();",
      "right" : "Assert.fail();",
      "info" : "ExpressionStatement[32958-32972]:ExpressionStatement[35401-35415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33072-35766]:Block[35515-38209]"
    }, {
      "left" : "final String name = \"biscuit\";",
      "right" : "final String name = \"biscuit\";",
      "info" : "VariableDeclarationStatement[33082-33112]:VariableDeclarationStatement[35525-35555]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n\n                String value = req.getHeader(name);\n                if (value != null)\n                {\n                    Cookie cookie = new Cookie(name, value);\n                    cookie.setMaxAge(3600);\n                    resp.addCookie(cookie);\n                }\n                else\n                {\n                    Cookie[] cookies = req.getCookies();\n                    Assert.assertEquals(1, cookies.length);\n                }\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException\n            {\n                if (req.getHeader(\"Via\") != null)\n                    resp.addHeader(PROXIED_HEADER, \"true\");\n\n                String value = req.getHeader(name);\n                if (value != null)\n                {\n                    Cookie cookie = new Cookie(name, value);\n                    cookie.setMaxAge(3600);\n                    resp.addCookie(cookie);\n                }\n                else\n                {\n                    Cookie[] cookies = req.getCookies();\n                    Assert.assertEquals(1, cookies.length);\n                }\n            }\n        });",
      "info" : "ExpressionStatement[33121-33899]:ExpressionStatement[35564-36342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33315-33887]:Block[35758-36330]"
    }, {
      "left" : "if (req.getHeader(\"Via\") != null)",
      "right" : "if (req.getHeader(\"Via\") != null)",
      "info" : "IfStatement[33333-33426]:IfStatement[35776-35869]"
    }, {
      "left" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "right" : "resp.addHeader(PROXIED_HEADER, \"true\");",
      "info" : "ExpressionStatement[33387-33426]:ExpressionStatement[35830-35869]"
    }, {
      "left" : "String value = req.getHeader(name);",
      "right" : "String value = req.getHeader(name);",
      "info" : "VariableDeclarationStatement[33444-33479]:VariableDeclarationStatement[35887-35922]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[33496-33873]:IfStatement[35939-36316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33531-33699]:Block[35974-36142]"
    }, {
      "left" : "Cookie cookie = new Cookie(name, value);",
      "right" : "Cookie cookie = new Cookie(name, value);",
      "info" : "VariableDeclarationStatement[33553-33593]:VariableDeclarationStatement[35996-36036]"
    }, {
      "left" : "cookie.setMaxAge(3600);",
      "right" : "cookie.setMaxAge(3600);",
      "info" : "ExpressionStatement[33614-33637]:ExpressionStatement[36057-36080]"
    }, {
      "left" : "resp.addCookie(cookie);",
      "right" : "resp.addCookie(cookie);",
      "info" : "ExpressionStatement[33658-33681]:ExpressionStatement[36101-36124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33737-33873]:Block[36180-36316]"
    }, {
      "left" : "Cookie[] cookies = req.getCookies();",
      "right" : "Cookie[] cookies = req.getCookies();",
      "info" : "VariableDeclarationStatement[33759-33795]:VariableDeclarationStatement[36202-36238]"
    }, {
      "left" : "Assert.assertEquals(1, cookies.length);",
      "right" : "Assert.assertEquals(1, cookies.length);",
      "info" : "ExpressionStatement[33816-33855]:ExpressionStatement[36259-36298]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[33908-33921]:ExpressionStatement[36351-36364]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[33930-33944]:ExpressionStatement[36373-36387]"
    }, {
      "left" : "String value1 = \"1\";",
      "right" : "String value1 = \"1\";",
      "info" : "VariableDeclarationStatement[33954-33974]:VariableDeclarationStatement[36397-36417]"
    }, {
      "left" : "ContentResponse response1 = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .header(name, value1)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response1 = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .header(name, value1)\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[33983-34182]:VariableDeclarationStatement[36426-36625]"
    }, {
      "left" : "Assert.assertEquals(200, response1.getStatus());",
      "right" : "Assert.assertEquals(200, response1.getStatus());",
      "info" : "ExpressionStatement[34191-34239]:ExpressionStatement[36634-36682]"
    }, {
      "left" : "Assert.assertTrue(response1.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response1.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[34248-34318]:ExpressionStatement[36691-36761]"
    }, {
      "left" : "List<HttpCookie> cookies = client.getCookieStore().getCookies();",
      "right" : "List<HttpCookie> cookies = client.getCookieStore().getCookies();",
      "info" : "VariableDeclarationStatement[34327-34391]:VariableDeclarationStatement[36770-36834]"
    }, {
      "left" : "Assert.assertEquals(1, cookies.size());",
      "right" : "Assert.assertEquals(1, cookies.size());",
      "info" : "ExpressionStatement[34400-34439]:ExpressionStatement[36843-36882]"
    }, {
      "left" : "Assert.assertEquals(name, cookies.get(0).getName());",
      "right" : "Assert.assertEquals(name, cookies.get(0).getName());",
      "info" : "ExpressionStatement[34448-34500]:ExpressionStatement[36891-36943]"
    }, {
      "left" : "Assert.assertEquals(value1, cookies.get(0).getValue());",
      "right" : "Assert.assertEquals(value1, cookies.get(0).getValue());",
      "info" : "ExpressionStatement[34509-34564]:ExpressionStatement[36952-37007]"
    }, {
      "left" : "HttpClient client2 = prepareClient();",
      "right" : "HttpClient client2 = prepareClient();",
      "info" : "VariableDeclarationStatement[34574-34611]:VariableDeclarationStatement[37017-37054]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[34620-35760]:TryStatement[37063-38203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34632-35696]:Block[37075-38139]"
    }, {
      "left" : "String value2 = \"2\";",
      "right" : "String value2 = \"2\";",
      "info" : "VariableDeclarationStatement[34646-34666]:VariableDeclarationStatement[37089-37109]"
    }, {
      "left" : "ContentResponse response2 = client2.newRequest(\"localhost\", serverConnector.getLocalPort())\n                    .header(name, value2)\n                    .timeout(5, TimeUnit.SECONDS)\n                    .send();",
      "right" : "ContentResponse response2 = client2.newRequest(\"localhost\", serverConnector.getLocalPort())\n                    .header(name, value2)\n                    .timeout(5, TimeUnit.SECONDS)\n                    .send();",
      "info" : "VariableDeclarationStatement[34679-34891]:VariableDeclarationStatement[37122-37334]"
    }, {
      "left" : "Assert.assertEquals(200, response2.getStatus());",
      "right" : "Assert.assertEquals(200, response2.getStatus());",
      "info" : "ExpressionStatement[34904-34952]:ExpressionStatement[37347-37395]"
    }, {
      "left" : "Assert.assertTrue(response2.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response2.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[34965-35035]:ExpressionStatement[37408-37478]"
    }, {
      "left" : "cookies = client2.getCookieStore().getCookies();",
      "right" : "cookies = client2.getCookieStore().getCookies();",
      "info" : "ExpressionStatement[35048-35096]:ExpressionStatement[37491-37539]"
    }, {
      "left" : "Assert.assertEquals(1, cookies.size());",
      "right" : "Assert.assertEquals(1, cookies.size());",
      "info" : "ExpressionStatement[35109-35148]:ExpressionStatement[37552-37591]"
    }, {
      "left" : "Assert.assertEquals(name, cookies.get(0).getName());",
      "right" : "Assert.assertEquals(name, cookies.get(0).getName());",
      "info" : "ExpressionStatement[35161-35213]:ExpressionStatement[37604-37656]"
    }, {
      "left" : "Assert.assertEquals(value2, cookies.get(0).getValue());",
      "right" : "Assert.assertEquals(value2, cookies.get(0).getValue());",
      "info" : "ExpressionStatement[35226-35281]:ExpressionStatement[37669-37724]"
    }, {
      "left" : "ContentResponse response3 = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                    .timeout(5, TimeUnit.SECONDS)\n                    .send();",
      "right" : "ContentResponse response3 = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                    .timeout(5, TimeUnit.SECONDS)\n                    .send();",
      "info" : "VariableDeclarationStatement[35373-35542]:VariableDeclarationStatement[37816-37985]"
    }, {
      "left" : "Assert.assertEquals(200, response3.getStatus());",
      "right" : "Assert.assertEquals(200, response3.getStatus());",
      "info" : "ExpressionStatement[35555-35603]:ExpressionStatement[37998-38046]"
    }, {
      "left" : "Assert.assertTrue(response3.getHeaders().containsKey(PROXIED_HEADER));",
      "right" : "Assert.assertTrue(response3.getHeaders().containsKey(PROXIED_HEADER));",
      "info" : "ExpressionStatement[35616-35686]:ExpressionStatement[38059-38129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35721-35760]:Block[38164-38203]"
    }, {
      "left" : "client2.stop();",
      "right" : "client2.stop();",
      "info" : "ExpressionStatement[35735-35750]:ExpressionStatement[38178-38193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35874-38453]:Block[38317-40896]"
    }, {
      "left" : "final CountDownLatch chunk1Latch = new CountDownLatch(1);",
      "right" : "final CountDownLatch chunk1Latch = new CountDownLatch(1);",
      "info" : "VariableDeclarationStatement[35884-35941]:VariableDeclarationStatement[38327-38384]"
    }, {
      "left" : "final int chunk1 = 'q';",
      "right" : "final int chunk1 = 'q';",
      "info" : "VariableDeclarationStatement[35950-35973]:VariableDeclarationStatement[38393-38416]"
    }, {
      "left" : "final int chunk2 = 'w';",
      "right" : "final int chunk2 = 'w';",
      "info" : "VariableDeclarationStatement[35982-36005]:VariableDeclarationStatement[38425-38448]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                ServletOutputStream output = response.getOutputStream();\n                output.write(chunk1);\n                response.flushBuffer();\n\n                // Wait for the client to receive this chunk.\n                await(chunk1Latch, 5000);\n\n                // Send second chunk, must not be received by proxy.\n                output.write(chunk2);\n            }\n\n            private boolean await(CountDownLatch latch, long ms) throws IOException\n            {\n                try\n                {\n                    return latch.await(ms, TimeUnit.MILLISECONDS);\n                }\n                catch (InterruptedException x)\n                {\n                    throw new InterruptedIOException();\n                }\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                ServletOutputStream output = response.getOutputStream();\n                output.write(chunk1);\n                response.flushBuffer();\n\n                // Wait for the client to receive this chunk.\n                await(chunk1Latch, 5000);\n\n                // Send second chunk, must not be received by proxy.\n                output.write(chunk2);\n            }\n\n            private boolean await(CountDownLatch latch, long ms) throws IOException\n            {\n                try\n                {\n                    return latch.await(ms, TimeUnit.MILLISECONDS);\n                }\n                catch (InterruptedException x)\n                {\n                    throw new InterruptedIOException();\n                }\n            }\n        });",
      "info" : "ExpressionStatement[36014-36984]:ExpressionStatement[38457-39427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36218-36597]:Block[38661-39040]"
    }, {
      "left" : "ServletOutputStream output = response.getOutputStream();",
      "right" : "ServletOutputStream output = response.getOutputStream();",
      "info" : "VariableDeclarationStatement[36236-36292]:VariableDeclarationStatement[38679-38735]"
    }, {
      "left" : "output.write(chunk1);",
      "right" : "output.write(chunk1);",
      "info" : "ExpressionStatement[36309-36330]:ExpressionStatement[38752-38773]"
    }, {
      "left" : "response.flushBuffer();",
      "right" : "response.flushBuffer();",
      "info" : "ExpressionStatement[36347-36370]:ExpressionStatement[38790-38813]"
    }, {
      "left" : "await(chunk1Latch, 5000);",
      "right" : "await(chunk1Latch, 5000);",
      "info" : "ExpressionStatement[36450-36475]:ExpressionStatement[38893-38918]"
    }, {
      "left" : "output.write(chunk2);",
      "right" : "output.write(chunk2);",
      "info" : "ExpressionStatement[36562-36583]:ExpressionStatement[39005-39026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36695-36972]:Block[39138-39415]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36713-36958]:TryStatement[39156-39401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36733-36819]:Block[39176-39262]"
    }, {
      "left" : "return latch.await(ms, TimeUnit.MILLISECONDS);",
      "right" : "return latch.await(ms, TimeUnit.MILLISECONDS);",
      "info" : "ReturnStatement[36755-36801]:ReturnStatement[39198-39244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36883-36958]:Block[39326-39401]"
    }, {
      "left" : "throw new InterruptedIOException();",
      "right" : "throw new InterruptedIOException();",
      "info" : "ThrowStatement[36905-36940]:ThrowStatement[39348-39383]"
    }, {
      "left" : "final long proxyTimeout = 1000;",
      "right" : "final long proxyTimeout = 1000;",
      "info" : "VariableDeclarationStatement[36993-37024]:VariableDeclarationStatement[39436-39467]"
    }, {
      "left" : "Map<String, String> proxyParams = new HashMap<>();",
      "right" : "Map<String, String> proxyParams = new HashMap<>();",
      "info" : "VariableDeclarationStatement[37033-37083]:VariableDeclarationStatement[39476-39526]"
    }, {
      "left" : "proxyParams.put(\"timeout\", String.valueOf(proxyTimeout));",
      "right" : "proxyParams.put(\"timeout\", String.valueOf(proxyTimeout));",
      "info" : "ExpressionStatement[37092-37149]:ExpressionStatement[39535-39592]"
    }, {
      "left" : "startProxy(proxyParams);",
      "right" : "startProxy(proxyParams);",
      "info" : "ExpressionStatement[37158-37182]:ExpressionStatement[39601-39625]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[37191-37205]:ExpressionStatement[39634-39648]"
    }, {
      "left" : "InputStreamResponseListener listener = new InputStreamResponseListener();",
      "right" : "InputStreamResponseListener listener = new InputStreamResponseListener();",
      "info" : "VariableDeclarationStatement[37215-37288]:VariableDeclarationStatement[39658-39731]"
    }, {
      "left" : "int port = serverConnector.getLocalPort();",
      "right" : "int port = serverConnector.getLocalPort();",
      "info" : "VariableDeclarationStatement[37297-37339]:VariableDeclarationStatement[39740-39782]"
    }, {
      "left" : "client.newRequest(\"localhost\", port).send(listener);",
      "right" : "client.newRequest(\"localhost\", port).send(listener);",
      "info" : "ExpressionStatement[37348-37400]:ExpressionStatement[39791-39843]"
    }, {
      "left" : "TimeUnit.MILLISECONDS.sleep(2 * proxyTimeout);",
      "right" : "TimeUnit.MILLISECONDS.sleep(2 * proxyTimeout);",
      "info" : "ExpressionStatement[37557-37603]:ExpressionStatement[40000-40046]"
    }, {
      "left" : "Response response = listener.get(5, TimeUnit.SECONDS);",
      "right" : "Response response = listener.get(5, TimeUnit.SECONDS);",
      "info" : "VariableDeclarationStatement[37613-37667]:VariableDeclarationStatement[40056-40110]"
    }, {
      "left" : "Assert.assertEquals(504, response.getStatus());",
      "right" : "Assert.assertEquals(504, response.getStatus());",
      "info" : "ExpressionStatement[37676-37723]:ExpressionStatement[40119-40166]"
    }, {
      "left" : "InputStream input = listener.getInputStream();",
      "right" : "InputStream input = listener.getInputStream();",
      "info" : "VariableDeclarationStatement[37823-37869]:VariableDeclarationStatement[40266-40312]"
    }, {
      "left" : "Assert.assertEquals(-1, input.read());",
      "right" : "Assert.assertEquals(-1, input.read());",
      "info" : "ExpressionStatement[37878-37916]:ExpressionStatement[40321-40359]"
    }, {
      "left" : "chunk1Latch.countDown();",
      "right" : "chunk1Latch.countDown();",
      "info" : "ExpressionStatement[37926-37950]:ExpressionStatement[40369-40393]"
    }, {
      "left" : "Result result = listener.await(5, TimeUnit.SECONDS);",
      "right" : "Result result = listener.await(5, TimeUnit.SECONDS);",
      "info" : "VariableDeclarationStatement[38027-38079]:VariableDeclarationStatement[40470-40522]"
    }, {
      "left" : "Assert.assertTrue(result.isSucceeded());",
      "right" : "Assert.assertTrue(result.isSucceeded());",
      "info" : "ExpressionStatement[38088-38128]:ExpressionStatement[40531-40571]"
    }, {
      "left" : "Assert.assertEquals(-1, input.read());",
      "right" : "Assert.assertEquals(-1, input.read());",
      "info" : "ExpressionStatement[38194-38232]:ExpressionStatement[40637-40675]"
    }, {
      "left" : "HttpDestinationOverHTTP destination = (HttpDestinationOverHTTP)client.getDestination(\"http\", \"localhost\", port);",
      "right" : "HttpDestinationOverHTTP destination = (HttpDestinationOverHTTP)client.getDestination(\"http\", \"localhost\", port);",
      "info" : "VariableDeclarationStatement[38242-38354]:VariableDeclarationStatement[40685-40797]"
    }, {
      "left" : "Assert.assertEquals(0, destination.getConnectionPool().getIdleConnections().size());",
      "right" : "Assert.assertEquals(0, destination.getConnectionPool().getIdleConnections().size());",
      "info" : "ExpressionStatement[38363-38447]:ExpressionStatement[40806-40890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38559-41088]:Block[41002-43531]"
    }, {
      "left" : "int outputBufferSize = 1024;",
      "right" : "int outputBufferSize = 1024;",
      "info" : "VariableDeclarationStatement[38569-38597]:VariableDeclarationStatement[41012-41040]"
    }, {
      "left" : "final CountDownLatch chunk1Latch = new CountDownLatch(1);",
      "right" : "final CountDownLatch chunk1Latch = new CountDownLatch(1);",
      "info" : "VariableDeclarationStatement[38606-38663]:VariableDeclarationStatement[41049-41106]"
    }, {
      "left" : "final byte[] chunk1 = new byte[outputBufferSize];",
      "right" : "final byte[] chunk1 = new byte[outputBufferSize];",
      "info" : "VariableDeclarationStatement[38672-38721]:VariableDeclarationStatement[41115-41164]"
    }, {
      "left" : "new Random().nextBytes(chunk1);",
      "right" : "new Random().nextBytes(chunk1);",
      "info" : "ExpressionStatement[38730-38761]:ExpressionStatement[41173-41204]"
    }, {
      "left" : "final int chunk2 = 'w';",
      "right" : "final int chunk2 = 'w';",
      "info" : "VariableDeclarationStatement[38770-38793]:VariableDeclarationStatement[41213-41236]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                ServletOutputStream output = response.getOutputStream();\n                output.write(chunk1);\n                response.flushBuffer();\n\n                // Wait for the client to receive this chunk.\n                await(chunk1Latch, 5000);\n\n                // Send second chunk, must not be received by proxy.\n                output.write(chunk2);\n            }\n\n            private boolean await(CountDownLatch latch, long ms) throws IOException\n            {\n                try\n                {\n                    return latch.await(ms, TimeUnit.MILLISECONDS);\n                }\n                catch (InterruptedException x)\n                {\n                    throw new InterruptedIOException();\n                }\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                ServletOutputStream output = response.getOutputStream();\n                output.write(chunk1);\n                response.flushBuffer();\n\n                // Wait for the client to receive this chunk.\n                await(chunk1Latch, 5000);\n\n                // Send second chunk, must not be received by proxy.\n                output.write(chunk2);\n            }\n\n            private boolean await(CountDownLatch latch, long ms) throws IOException\n            {\n                try\n                {\n                    return latch.await(ms, TimeUnit.MILLISECONDS);\n                }\n                catch (InterruptedException x)\n                {\n                    throw new InterruptedIOException();\n                }\n            }\n        });",
      "info" : "ExpressionStatement[38802-39772]:ExpressionStatement[41245-42215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39006-39385]:Block[41449-41828]"
    }, {
      "left" : "ServletOutputStream output = response.getOutputStream();",
      "right" : "ServletOutputStream output = response.getOutputStream();",
      "info" : "VariableDeclarationStatement[39024-39080]:VariableDeclarationStatement[41467-41523]"
    }, {
      "left" : "output.write(chunk1);",
      "right" : "output.write(chunk1);",
      "info" : "ExpressionStatement[39097-39118]:ExpressionStatement[41540-41561]"
    }, {
      "left" : "response.flushBuffer();",
      "right" : "response.flushBuffer();",
      "info" : "ExpressionStatement[39135-39158]:ExpressionStatement[41578-41601]"
    }, {
      "left" : "await(chunk1Latch, 5000);",
      "right" : "await(chunk1Latch, 5000);",
      "info" : "ExpressionStatement[39238-39263]:ExpressionStatement[41681-41706]"
    }, {
      "left" : "output.write(chunk2);",
      "right" : "output.write(chunk2);",
      "info" : "ExpressionStatement[39350-39371]:ExpressionStatement[41793-41814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39483-39760]:Block[41926-42203]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[39501-39746]:TryStatement[41944-42189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39521-39607]:Block[41964-42050]"
    }, {
      "left" : "return latch.await(ms, TimeUnit.MILLISECONDS);",
      "right" : "return latch.await(ms, TimeUnit.MILLISECONDS);",
      "info" : "ReturnStatement[39543-39589]:ReturnStatement[41986-42032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39671-39746]:Block[42114-42189]"
    }, {
      "left" : "throw new InterruptedIOException();",
      "right" : "throw new InterruptedIOException();",
      "info" : "ThrowStatement[39693-39728]:ThrowStatement[42136-42171]"
    }, {
      "left" : "final long proxyTimeout = 1000;",
      "right" : "final long proxyTimeout = 1000;",
      "info" : "VariableDeclarationStatement[39781-39812]:VariableDeclarationStatement[42224-42255]"
    }, {
      "left" : "Map<String, String> proxyParams = new HashMap<>();",
      "right" : "Map<String, String> proxyParams = new HashMap<>();",
      "info" : "VariableDeclarationStatement[39821-39871]:VariableDeclarationStatement[42264-42314]"
    }, {
      "left" : "proxyParams.put(\"timeout\", String.valueOf(proxyTimeout));",
      "right" : "proxyParams.put(\"timeout\", String.valueOf(proxyTimeout));",
      "info" : "ExpressionStatement[39880-39937]:ExpressionStatement[42323-42380]"
    }, {
      "left" : "proxyParams.put(\"outputBufferSize\", String.valueOf(outputBufferSize));",
      "right" : "proxyParams.put(\"outputBufferSize\", String.valueOf(outputBufferSize));",
      "info" : "ExpressionStatement[39946-40016]:ExpressionStatement[42389-42459]"
    }, {
      "left" : "startProxy(proxyParams);",
      "right" : "startProxy(proxyParams);",
      "info" : "ExpressionStatement[40025-40049]:ExpressionStatement[42468-42492]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[40058-40072]:ExpressionStatement[42501-42515]"
    }, {
      "left" : "InputStreamResponseListener listener = new InputStreamResponseListener();",
      "right" : "InputStreamResponseListener listener = new InputStreamResponseListener();",
      "info" : "VariableDeclarationStatement[40082-40155]:VariableDeclarationStatement[42525-42598]"
    }, {
      "left" : "int port = serverConnector.getLocalPort();",
      "right" : "int port = serverConnector.getLocalPort();",
      "info" : "VariableDeclarationStatement[40164-40206]:VariableDeclarationStatement[42607-42649]"
    }, {
      "left" : "client.newRequest(\"localhost\", port).send(listener);",
      "right" : "client.newRequest(\"localhost\", port).send(listener);",
      "info" : "ExpressionStatement[40215-40267]:ExpressionStatement[42658-42710]"
    }, {
      "left" : "Response response = listener.get(5, TimeUnit.SECONDS);",
      "right" : "Response response = listener.get(5, TimeUnit.SECONDS);",
      "info" : "VariableDeclarationStatement[40277-40331]:VariableDeclarationStatement[42720-42774]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[40340-40387]:ExpressionStatement[42783-42830]"
    }, {
      "left" : "InputStream input = listener.getInputStream();",
      "right" : "InputStream input = listener.getInputStream();",
      "info" : "VariableDeclarationStatement[40397-40443]:VariableDeclarationStatement[42840-42886]"
    }, {
      "left" : "for (int i = 0; i < chunk1.length; ++i)\n            Assert.assertEquals(chunk1[i] & 0xFF, input.read());",
      "right" : "for (int i = 0; i < chunk1.length; ++i)\n            Assert.assertEquals(chunk1[i] & 0xFF, input.read());",
      "info" : "ForStatement[40452-40556]:ForStatement[42895-42999]"
    }, {
      "left" : "Assert.assertEquals(chunk1[i] & 0xFF, input.read());",
      "right" : "Assert.assertEquals(chunk1[i] & 0xFF, input.read());",
      "info" : "ExpressionStatement[40504-40556]:ExpressionStatement[42947-42999]"
    }, {
      "left" : "TimeUnit.MILLISECONDS.sleep(2 * proxyTimeout);",
      "right" : "TimeUnit.MILLISECONDS.sleep(2 * proxyTimeout);",
      "info" : "ExpressionStatement[40566-40612]:ExpressionStatement[43009-43055]"
    }, {
      "left" : "chunk1Latch.countDown();",
      "right" : "chunk1Latch.countDown();",
      "info" : "ExpressionStatement[40622-40646]:ExpressionStatement[43065-43089]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[40656-40867]:TryStatement[43099-43310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40668-40792]:Block[43111-43235]"
    }, {
      "left" : "input.read();",
      "right" : "input.read();",
      "info" : "ExpressionStatement[40742-40755]:ExpressionStatement[43185-43198]"
    }, {
      "left" : "Assert.fail();",
      "right" : "Assert.fail();",
      "info" : "ExpressionStatement[40768-40782]:ExpressionStatement[43211-43225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40832-40867]:Block[43275-43310]"
    }, {
      "left" : "HttpDestinationOverHTTP destination = (HttpDestinationOverHTTP)client.getDestination(\"http\", \"localhost\", port);",
      "right" : "HttpDestinationOverHTTP destination = (HttpDestinationOverHTTP)client.getDestination(\"http\", \"localhost\", port);",
      "info" : "VariableDeclarationStatement[40877-40989]:VariableDeclarationStatement[43320-43432]"
    }, {
      "left" : "Assert.assertEquals(0, destination.getConnectionPool().getIdleConnections().size());",
      "right" : "Assert.assertEquals(0, destination.getConnectionPool().getIdleConnections().size());",
      "info" : "ExpressionStatement[40998-41082]:ExpressionStatement[43441-43525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41172-42395]:Block[43615-44838]"
    }, {
      "left" : "startServer(new EmptyHttpServlet());",
      "right" : "startServer(new EmptyHttpServlet());",
      "info" : "ExpressionStatement[41182-41218]:ExpressionStatement[43625-43661]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[41227-41240]:ExpressionStatement[43670-43683]"
    }, {
      "left" : "proxyContext.stop();",
      "right" : "proxyContext.stop();",
      "info" : "ExpressionStatement[41249-41269]:ExpressionStatement[43692-43712]"
    }, {
      "left" : "final String headerName = \"X-Test\";",
      "right" : "final String headerName = \"X-Test\";",
      "info" : "VariableDeclarationStatement[41278-41313]:VariableDeclarationStatement[43721-43756]"
    }, {
      "left" : "final String headerValue = \"test-value\";",
      "right" : "final String headerValue = \"test-value\";",
      "info" : "VariableDeclarationStatement[41322-41362]:VariableDeclarationStatement[43765-43805]"
    }, {
      "left" : "proxyContext.addFilter(new FilterHolder(new Filter()\n        {\n            @Override\n            public void init(FilterConfig filterConfig) throws ServletException\n            {\n            }\n\n            @Override\n            public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n            {\n                ((HttpServletResponse)response).addHeader(headerName, headerValue);\n                chain.doFilter(request, response);\n            }\n\n            @Override\n            public void destroy()\n            {\n            }\n        }), \"/*\", EnumSet.of(DispatcherType.REQUEST));",
      "right" : "proxyContext.addFilter(new FilterHolder(new Filter()\n        {\n            @Override\n            public void init(FilterConfig filterConfig) throws ServletException\n            {\n            }\n\n            @Override\n            public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException\n            {\n                ((HttpServletResponse)response).addHeader(headerName, headerValue);\n                chain.doFilter(request, response);\n            }\n\n            @Override\n            public void destroy()\n            {\n            }\n        }), \"/*\", EnumSet.of(DispatcherType.REQUEST));",
      "info" : "ExpressionStatement[41371-42028]:ExpressionStatement[43814-44471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41548-41563]:Block[43991-44006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41738-41888]:Block[44181-44331]"
    }, {
      "left" : "((HttpServletResponse)response).addHeader(headerName, headerValue);",
      "right" : "((HttpServletResponse)response).addHeader(headerName, headerValue);",
      "info" : "ExpressionStatement[41756-41823]:ExpressionStatement[44199-44266]"
    }, {
      "left" : "chain.doFilter(request, response);",
      "right" : "chain.doFilter(request, response);",
      "info" : "ExpressionStatement[41840-41874]:ExpressionStatement[44283-44317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41958-41973]:Block[44401-44416]"
    }, {
      "left" : "proxyContext.start();",
      "right" : "proxyContext.start();",
      "info" : "ExpressionStatement[42037-42058]:ExpressionStatement[44480-44501]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[42067-42081]:ExpressionStatement[44510-44524]"
    }, {
      "left" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = client.newRequest(\"localhost\", serverConnector.getLocalPort())\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[42091-42251]:VariableDeclarationStatement[44534-44694]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[42261-42308]:ExpressionStatement[44704-44751]"
    }, {
      "left" : "Assert.assertEquals(headerValue, response.getHeaders().get(headerName));",
      "right" : "Assert.assertEquals(headerValue, response.getHeaders().get(headerName));",
      "info" : "ExpressionStatement[42317-42389]:ExpressionStatement[44760-44832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42492-43837]:Block[44935-46280]"
    }, {
      "left" : "final Map<String, String> hopHeaders = new LinkedHashMap<>();",
      "right" : "final Map<String, String> hopHeaders = new LinkedHashMap<>();",
      "info" : "VariableDeclarationStatement[42502-42563]:VariableDeclarationStatement[44945-45006]"
    }, {
      "left" : "hopHeaders.put(HttpHeader.TE.asString(), \"gzip\");",
      "right" : "hopHeaders.put(HttpHeader.TE.asString(), \"gzip\");",
      "info" : "ExpressionStatement[42572-42621]:ExpressionStatement[45015-45064]"
    }, {
      "left" : "hopHeaders.put(HttpHeader.CONNECTION.asString(), \"Keep-Alive, Foo, Bar\");",
      "right" : "hopHeaders.put(HttpHeader.CONNECTION.asString(), \"Keep-Alive, Foo, Bar\");",
      "info" : "ExpressionStatement[42630-42703]:ExpressionStatement[45073-45146]"
    }, {
      "left" : "hopHeaders.put(\"Foo\", \"abc\");",
      "right" : "hopHeaders.put(\"Foo\", \"abc\");",
      "info" : "ExpressionStatement[42712-42741]:ExpressionStatement[45155-45184]"
    }, {
      "left" : "hopHeaders.put(\"Foo\", \"def\");",
      "right" : "hopHeaders.put(\"Foo\", \"def\");",
      "info" : "ExpressionStatement[42750-42779]:ExpressionStatement[45193-45222]"
    }, {
      "left" : "hopHeaders.put(HttpHeader.KEEP_ALIVE.asString(), \"timeout=30\");",
      "right" : "hopHeaders.put(HttpHeader.KEEP_ALIVE.asString(), \"timeout=30\");",
      "info" : "ExpressionStatement[42788-42851]:ExpressionStatement[45231-45294]"
    }, {
      "left" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                List<String> names = Collections.list(request.getHeaderNames());\n                for (String name : names)\n                {\n                    if (hopHeaders.containsKey(name))\n                        throw new IOException(\"Hop header must not be proxied: \" + name);\n                }\n            }\n        });",
      "right" : "startServer(new HttpServlet()\n        {\n            @Override\n            protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                List<String> names = Collections.list(request.getHeaderNames());\n                for (String name : names)\n                {\n                    if (hopHeaders.containsKey(name))\n                        throw new IOException(\"Hop header must not be proxied: \" + name);\n                }\n            }\n        });",
      "info" : "ExpressionStatement[42860-43392]:ExpressionStatement[45303-45835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43062-43380]:Block[45505-45823]"
    }, {
      "left" : "List<String> names = Collections.list(request.getHeaderNames());",
      "right" : "List<String> names = Collections.list(request.getHeaderNames());",
      "info" : "VariableDeclarationStatement[43080-43144]:VariableDeclarationStatement[45523-45587]"
    }, {
      "left" : "for (String name : names)",
      "right" : "for (String name : names)",
      "info" : "EnhancedForStatement[43161-43366]:EnhancedForStatement[45604-45809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43203-43366]:Block[45646-45809]"
    }, {
      "left" : "if (hopHeaders.containsKey(name))",
      "right" : "if (hopHeaders.containsKey(name))",
      "info" : "IfStatement[43225-43348]:IfStatement[45668-45791]"
    }, {
      "left" : "throw new IOException(\"Hop header must not be proxied: \" + name);",
      "right" : "throw new IOException(\"Hop header must not be proxied: \" + name);",
      "info" : "ThrowStatement[43283-43348]:ThrowStatement[45726-45791]"
    }, {
      "left" : "startProxy();",
      "right" : "startProxy();",
      "info" : "ExpressionStatement[43401-43414]:ExpressionStatement[45844-45857]"
    }, {
      "left" : "startClient();",
      "right" : "startClient();",
      "info" : "ExpressionStatement[43423-43437]:ExpressionStatement[45866-45880]"
    }, {
      "left" : "Request request = client.newRequest(\"localhost\", serverConnector.getLocalPort());",
      "right" : "Request request = client.newRequest(\"localhost\", serverConnector.getLocalPort());",
      "info" : "VariableDeclarationStatement[43447-43528]:VariableDeclarationStatement[45890-45971]"
    }, {
      "left" : "for (Map.Entry<String, String> entry : hopHeaders.entrySet())\n            request.header(entry.getKey(), entry.getValue());",
      "right" : "for (Map.Entry<String, String> entry : hopHeaders.entrySet())\n            request.header(entry.getKey(), entry.getValue());",
      "info" : "EnhancedForStatement[43537-43660]:EnhancedForStatement[45980-46103]"
    }, {
      "left" : "request.header(entry.getKey(), entry.getValue());",
      "right" : "request.header(entry.getKey(), entry.getValue());",
      "info" : "ExpressionStatement[43611-43660]:ExpressionStatement[46054-46103]"
    }, {
      "left" : "ContentResponse response = request\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "right" : "ContentResponse response = request\n                .timeout(5, TimeUnit.SECONDS)\n                .send();",
      "info" : "VariableDeclarationStatement[43669-43774]:VariableDeclarationStatement[46112-46217]"
    }, {
      "left" : "Assert.assertEquals(200, response.getStatus());",
      "right" : "Assert.assertEquals(200, response.getStatus());",
      "info" : "ExpressionStatement[43784-43831]:ExpressionStatement[46227-46274]"
    } ]
  },
  "interFileMappings" : { }
}