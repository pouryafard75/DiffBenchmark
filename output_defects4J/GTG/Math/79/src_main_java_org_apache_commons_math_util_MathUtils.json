{
  "matchedElements" : [
 {
    "left" : "class : MathUtils",
    "right" : "class : MathUtils",
    "info" : "TypeDeclaration[981-56775]:TypeDeclaration[981-56781]"
  }, {
    "left" : "EPSILON",
    "right" : "EPSILON",
    "info" : "FieldDeclaration[1123-1259]:FieldDeclaration[1123-1259]"
  }, {
    "left" : "SAFE_MIN",
    "right" : "SAFE_MIN",
    "info" : "FieldDeclaration[1265-1495]:FieldDeclaration[1265-1495]"
  }, {
    "left" : "TWO_PI",
    "right" : "TWO_PI",
    "info" : "FieldDeclaration[1501-1568]:FieldDeclaration[1501-1568]"
  }, {
    "left" : "NB",
    "right" : "NB",
    "info" : "FieldDeclaration[1574-1647]:FieldDeclaration[1574-1647]"
  }, {
    "left" : "NS",
    "right" : "NS",
    "info" : "FieldDeclaration[1653-1728]:FieldDeclaration[1653-1728]"
  }, {
    "left" : "PB",
    "right" : "PB",
    "info" : "FieldDeclaration[1734-1805]:FieldDeclaration[1734-1805]"
  }, {
    "left" : "PS",
    "right" : "PS",
    "info" : "FieldDeclaration[1811-1884]:FieldDeclaration[1811-1884]"
  }, {
    "left" : "ZB",
    "right" : "ZB",
    "info" : "FieldDeclaration[1890-1961]:FieldDeclaration[1890-1961]"
  }, {
    "left" : "ZS",
    "right" : "ZS",
    "info" : "FieldDeclaration[1967-2040]:FieldDeclaration[1967-2040]"
  }, {
    "left" : "NAN_GAP",
    "right" : "NAN_GAP",
    "info" : "FieldDeclaration[2046-2145]:FieldDeclaration[2046-2145]"
  }, {
    "left" : "SGN_MASK",
    "right" : "SGN_MASK",
    "info" : "FieldDeclaration[2151-2276]:FieldDeclaration[2151-2276]"
  }, {
    "left" : "FACTORIALS",
    "right" : "FACTORIALS",
    "info" : "FieldDeclaration[2282-2872]:FieldDeclaration[2282-2872]"
  }, {
    "left" : "private MathUtils()",
    "right" : "private MathUtils()",
    "info" : "MethodDeclaration[2878-2965]:MethodDeclaration[2878-2965]"
  }, {
    "left" : "public addAndCheck(x int, y int) : int",
    "right" : "public addAndCheck(x int, y int) : int",
    "info" : "MethodDeclaration[2971-3491]:MethodDeclaration[2971-3491]"
  }, {
    "left" : "public addAndCheck(a long, b long) : long",
    "right" : "public addAndCheck(a long, b long) : long",
    "info" : "MethodDeclaration[3497-3886]:MethodDeclaration[3497-3886]"
  }, {
    "left" : "private addAndCheck(a long, b long, msg ) : long",
    "right" : "private addAndCheck(a long, b long, msg ) : long",
    "info" : "MethodDeclaration[3892-5286]:MethodDeclaration[3892-5286]"
  }, {
    "left" : "public binomialCoefficient(n int, k int) : long",
    "right" : "public binomialCoefficient(n int, k int) : long",
    "info" : "MethodDeclaration[5292-8423]:MethodDeclaration[5292-8423]"
  }, {
    "left" : "public binomialCoefficientDouble(n int, k int) : double",
    "right" : "public binomialCoefficientDouble(n int, k int) : double",
    "info" : "MethodDeclaration[8429-10019]:MethodDeclaration[8429-10019]"
  }, {
    "left" : "public binomialCoefficientLog(n int, k int) : double",
    "right" : "public binomialCoefficientLog(n int, k int) : double",
    "info" : "MethodDeclaration[10025-11899]:MethodDeclaration[10025-11899]"
  }, {
    "left" : "private checkBinomial(n int, k int) : void",
    "right" : "private checkBinomial(n int, k int) : void",
    "info" : "MethodDeclaration[11905-12648]:MethodDeclaration[11905-12648]"
  }, {
    "left" : "public compareTo(x double, y double, eps double...) : int",
    "right" : "public compareTo(x double, y double, eps double...) : int",
    "info" : "MethodDeclaration[12654-13394]:MethodDeclaration[12654-13394]"
  }, {
    "left" : "public cosh(x double) : double",
    "right" : "public cosh(x double) : double",
    "info" : "MethodDeclaration[13400-13740]:MethodDeclaration[13400-13740]"
  }, {
    "left" : "public equals(x double, y double) : boolean",
    "right" : "public equals(x double, y double) : boolean",
    "info" : "MethodDeclaration[13746-14096]:MethodDeclaration[13746-14096]"
  }, {
    "left" : "public equals(x double, y double, eps double...) : boolean",
    "right" : "public equals(x double, y double, eps double...) : boolean",
    "info" : "MethodDeclaration[14102-14641]:MethodDeclaration[14102-14641]"
  }, {
    "left" : "public equals(x double, y double, maxUlps int) : boolean",
    "right" : "public equals(x double, y double, maxUlps int) : boolean",
    "info" : "MethodDeclaration[14647-15835]:MethodDeclaration[14647-15835]"
  }, {
    "left" : "public equals(x , y ) : boolean",
    "right" : "public equals(x , y ) : boolean",
    "info" : "MethodDeclaration[15841-16572]:MethodDeclaration[15841-16572]"
  }, {
    "left" : "public factorial(n int) : long",
    "right" : "public factorial(n int) : long",
    "info" : "MethodDeclaration[16578-17895]:MethodDeclaration[16578-17895]"
  }, {
    "left" : "public factorialDouble(n int) : double",
    "right" : "public factorialDouble(n int) : double",
    "info" : "MethodDeclaration[17901-19071]:MethodDeclaration[17901-19071]"
  }, {
    "left" : "public factorialLog(n int) : double",
    "right" : "public factorialLog(n int) : double",
    "info" : "MethodDeclaration[19077-19898]:MethodDeclaration[19077-19898]"
  }, {
    "left" : "public gcd(p int, q int) : int",
    "right" : "public gcd(p int, q int) : int",
    "info" : "MethodDeclaration[19904-23324]:MethodDeclaration[19904-23324]"
  }, {
    "left" : "public hash(value double) : int",
    "right" : "public hash(value double) : int",
    "info" : "MethodDeclaration[23330-23587]:MethodDeclaration[23330-23587]"
  }, {
    "left" : "public hash(value ) : int",
    "right" : "public hash(value ) : int",
    "info" : "MethodDeclaration[23593-23878]:MethodDeclaration[23593-23878]"
  }, {
    "left" : "public indicator(x byte) : byte",
    "right" : "public indicator(x byte) : byte",
    "info" : "MethodDeclaration[23884-24195]:MethodDeclaration[23884-24195]"
  }, {
    "left" : "public indicator(x double) : double",
    "right" : "public indicator(x double) : double",
    "info" : "MethodDeclaration[24201-24653]:MethodDeclaration[24201-24653]"
  }, {
    "left" : "public indicator(x float) : float",
    "right" : "public indicator(x float) : float",
    "info" : "MethodDeclaration[24659-25095]:MethodDeclaration[24659-25095]"
  }, {
    "left" : "public indicator(x int) : int",
    "right" : "public indicator(x int) : int",
    "info" : "MethodDeclaration[25101-25369]:MethodDeclaration[25101-25369]"
  }, {
    "left" : "public indicator(x long) : long",
    "right" : "public indicator(x long) : long",
    "info" : "MethodDeclaration[25375-25652]:MethodDeclaration[25375-25652]"
  }, {
    "left" : "public indicator(x short) : short",
    "right" : "public indicator(x short) : short",
    "info" : "MethodDeclaration[25658-25977]:MethodDeclaration[25658-25977]"
  }, {
    "left" : "public lcm(a int, b int) : int",
    "right" : "public lcm(a int, b int) : int",
    "info" : "MethodDeclaration[25983-27204]:MethodDeclaration[25983-27204]"
  }, {
    "left" : "public log(base double, x double) : double",
    "right" : "public log(base double, x double) : double",
    "info" : "MethodDeclaration[27210-28044]:MethodDeclaration[27210-28044]"
  }, {
    "left" : "public mulAndCheck(x int, y int) : int",
    "right" : "public mulAndCheck(x int, y int) : int",
    "info" : "MethodDeclaration[28050-28581]:MethodDeclaration[28050-28581]"
  }, {
    "left" : "public mulAndCheck(a long, b long) : long",
    "right" : "public mulAndCheck(a long, b long) : long",
    "info" : "MethodDeclaration[28587-30360]:MethodDeclaration[28587-30360]"
  }, {
    "left" : "public nextAfter(d double, direction double) : double",
    "right" : "public nextAfter(d double, direction double) : double",
    "info" : "MethodDeclaration[30366-32750]:MethodDeclaration[30366-32750]"
  }, {
    "left" : "public scalb(d double, scaleFactor int) : double",
    "right" : "public scalb(d double, scaleFactor int) : double",
    "info" : "MethodDeclaration[32756-33683]:MethodDeclaration[32756-33683]"
  }, {
    "left" : "public normalizeAngle(a double, center double) : double",
    "right" : "public normalizeAngle(a double, center double) : double",
    "info" : "MethodDeclaration[33689-34865]:MethodDeclaration[33689-34865]"
  }, {
    "left" : "public normalizeArray(values , normalizedSum double) : ",
    "right" : "public normalizeArray(values , normalizedSum double) : ",
    "info" : "MethodDeclaration[34872-37247]:MethodDeclaration[34872-37247]"
  }, {
    "left" : "public round(x double, scale int) : double",
    "right" : "public round(x double, scale int) : double",
    "info" : "MethodDeclaration[37253-37704]:MethodDeclaration[37253-37704]"
  }, {
    "left" : "public round(x double, scale int, roundingMethod int) : double",
    "right" : "public round(x double, scale int, roundingMethod int) : double",
    "info" : "MethodDeclaration[37710-38618]:MethodDeclaration[37710-38618]"
  }, {
    "left" : "public round(x float, scale int) : float",
    "right" : "public round(x float, scale int) : float",
    "info" : "MethodDeclaration[38624-39074]:MethodDeclaration[38624-39074]"
  }, {
    "left" : "public round(x float, scale int, roundingMethod int) : float",
    "right" : "public round(x float, scale int, roundingMethod int) : float",
    "info" : "MethodDeclaration[39080-39794]:MethodDeclaration[39080-39794]"
  }, {
    "left" : "private roundUnscaled(unscaled double, sign double, roundingMethod int) : double",
    "right" : "private roundUnscaled(unscaled double, sign double, roundingMethod int) : double",
    "info" : "MethodDeclaration[39800-43786]:MethodDeclaration[39800-43786]"
  }, {
    "left" : "public sign(x byte) : byte",
    "right" : "public sign(x byte) : byte",
    "info" : "MethodDeclaration[43792-44277]:MethodDeclaration[43792-44277]"
  }, {
    "left" : "public sign(x double) : double",
    "right" : "public sign(x double) : double",
    "info" : "MethodDeclaration[44283-44995]:MethodDeclaration[44283-44995]"
  }, {
    "left" : "public sign(x float) : float",
    "right" : "public sign(x float) : float",
    "info" : "MethodDeclaration[45001-45616]:MethodDeclaration[45001-45616]"
  }, {
    "left" : "public sign(x int) : int",
    "right" : "public sign(x int) : int",
    "info" : "MethodDeclaration[45622-46052]:MethodDeclaration[45622-46052]"
  }, {
    "left" : "public sign(x long) : long",
    "right" : "public sign(x long) : long",
    "info" : "MethodDeclaration[46058-46502]:MethodDeclaration[46058-46502]"
  }, {
    "left" : "public sign(x short) : short",
    "right" : "public sign(x short) : short",
    "info" : "MethodDeclaration[46508-47019]:MethodDeclaration[46508-47019]"
  }, {
    "left" : "public sinh(x double) : double",
    "right" : "public sinh(x double) : double",
    "info" : "MethodDeclaration[47025-47357]:MethodDeclaration[47025-47357]"
  }, {
    "left" : "public subAndCheck(x int, y int) : int",
    "right" : "public subAndCheck(x int, y int) : int",
    "info" : "MethodDeclaration[47363-47907]:MethodDeclaration[47363-47907]"
  }, {
    "left" : "public subAndCheck(a long, b long) : long",
    "right" : "public subAndCheck(a long, b long) : long",
    "info" : "MethodDeclaration[47913-48631]:MethodDeclaration[47913-48631]"
  }, {
    "left" : "public pow(k int, e int) : int",
    "right" : "public pow(k int, e int) : int",
    "info" : "MethodDeclaration[48637-49394]:MethodDeclaration[48637-49394]"
  }, {
    "left" : "public pow(k int, e long) : int",
    "right" : "public pow(k int, e long) : int",
    "info" : "MethodDeclaration[49400-50158]:MethodDeclaration[49400-50158]"
  }, {
    "left" : "public pow(k long, e int) : long",
    "right" : "public pow(k long, e int) : long",
    "info" : "MethodDeclaration[50164-50926]:MethodDeclaration[50164-50926]"
  }, {
    "left" : "public pow(k long, e long) : long",
    "right" : "public pow(k long, e long) : long",
    "info" : "MethodDeclaration[50932-51695]:MethodDeclaration[50932-51695]"
  }, {
    "left" : "public pow(k , e int) : ",
    "right" : "public pow(k , e int) : ",
    "info" : "MethodDeclaration[51701-52269]:MethodDeclaration[51701-52269]"
  }, {
    "left" : "public pow(k , e long) : ",
    "right" : "public pow(k , e long) : ",
    "info" : "MethodDeclaration[52275-53109]:MethodDeclaration[52275-53109]"
  }, {
    "left" : "public pow(k , e ) : ",
    "right" : "public pow(k , e ) : ",
    "info" : "MethodDeclaration[53115-54015]:MethodDeclaration[53115-54015]"
  }, {
    "left" : "public distance1(p1 , p2 ) : double",
    "right" : "public distance1(p1 , p2 ) : double",
    "info" : "MethodDeclaration[54021-54462]:MethodDeclaration[54021-54462]"
  }, {
    "left" : "public distance1(p1 , p2 ) : int",
    "right" : "public distance1(p1 , p2 ) : int",
    "info" : "MethodDeclaration[54468-54887]:MethodDeclaration[54468-54887]"
  }, {
    "left" : "public distance(p1 , p2 ) : double",
    "right" : "public distance(p1 , p2 ) : double",
    "info" : "MethodDeclaration[54893-55372]:MethodDeclaration[54893-55372]"
  }, {
    "left" : "public distance(p1 , p2 ) : double",
    "right" : "public distance(p1 , p2 ) : double",
    "info" : "MethodDeclaration[55378-55833]:MethodDeclaration[55378-55839]"
  }, {
    "left" : "public distanceInf(p1 , p2 ) : double",
    "right" : "public distanceInf(p1 , p2 ) : double",
    "info" : "MethodDeclaration[55839-56308]:MethodDeclaration[55845-56314]"
  }, {
    "left" : "public distanceInf(p1 , p2 ) : int",
    "right" : "public distanceInf(p1 , p2 ) : int",
    "info" : "MethodDeclaration[56314-56771]:MethodDeclaration[56320-56777]"
  } ],
  "mappings" : [
 {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[2921-2928]:Modifier[2921-2928]"
  }, {
    "left" : "MathUtils",
    "right" : "MathUtils",
    "info" : "SimpleName[2929-2938]:SimpleName[2929-2938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2941-2965]:Block[2941-2965]"
  }, {
    "left" : "super();",
    "right" : "super();",
    "info" : "SuperConstructorInvocation[2951-2959]:SuperConstructorInvocation[2951-2959]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3249-3255]:Modifier[3249-3255]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3256-3262]:Modifier[3256-3262]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[3263-3266]:PrimitiveType[3263-3266]"
  }, {
    "left" : "addAndCheck",
    "right" : "addAndCheck",
    "info" : "SimpleName[3267-3278]:SimpleName[3267-3278]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[3279-3284]:SingleVariableDeclaration[3279-3284]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[3286-3291]:SingleVariableDeclaration[3286-3291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3293-3491]:Block[3293-3491]"
  }, {
    "left" : "long s = (long)x + (long)y;",
    "right" : "long s = (long)x + (long)y;",
    "info" : "VariableDeclarationStatement[3303-3330]:VariableDeclarationStatement[3303-3330]"
  }, {
    "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
    "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
    "info" : "IfStatement[3339-3462]:IfStatement[3339-3462]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3391-3462]:Block[3391-3462]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: add\");",
    "right" : "throw new ArithmeticException(\"overflow: add\");",
    "info" : "ThrowStatement[3405-3452]:ThrowStatement[3405-3452]"
  }, {
    "left" : "return (int)s;",
    "right" : "return (int)s;",
    "info" : "ReturnStatement[3471-3485]:ReturnStatement[3471-3485]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3781-3787]:Modifier[3781-3787]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3788-3794]:Modifier[3788-3794]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[3795-3799]:PrimitiveType[3795-3799]"
  }, {
    "left" : "addAndCheck",
    "right" : "addAndCheck",
    "info" : "SimpleName[3800-3811]:SimpleName[3800-3811]"
  }, {
    "left" : "long a",
    "right" : "long a",
    "info" : "SingleVariableDeclaration[3812-3818]:SingleVariableDeclaration[3812-3818]"
  }, {
    "left" : "long b",
    "right" : "long b",
    "info" : "SingleVariableDeclaration[3820-3826]:SingleVariableDeclaration[3820-3826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3828-3886]:Block[3828-3886]"
  }, {
    "left" : "return addAndCheck(a, b, \"overflow: add\");",
    "right" : "return addAndCheck(a, b, \"overflow: add\");",
    "info" : "ReturnStatement[3838-3880]:ReturnStatement[3838-3880]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4239-4246]:Modifier[4239-4246]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4247-4253]:Modifier[4247-4253]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[4254-4258]:PrimitiveType[4254-4258]"
  }, {
    "left" : "addAndCheck",
    "right" : "addAndCheck",
    "info" : "SimpleName[4259-4270]:SimpleName[4259-4270]"
  }, {
    "left" : "long a",
    "right" : "long a",
    "info" : "SingleVariableDeclaration[4271-4277]:SingleVariableDeclaration[4271-4277]"
  }, {
    "left" : "long b",
    "right" : "long b",
    "info" : "SingleVariableDeclaration[4279-4285]:SingleVariableDeclaration[4279-4285]"
  }, {
    "left" : "String msg",
    "right" : "String msg",
    "info" : "SingleVariableDeclaration[4287-4297]:SingleVariableDeclaration[4287-4297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4299-5286]:Block[4299-5286]"
  }, {
    "left" : "long ret;",
    "right" : "long ret;",
    "info" : "VariableDeclarationStatement[4309-4318]:VariableDeclarationStatement[4309-4318]"
  }, {
    "left" : "if (a > b)",
    "right" : "if (a > b)",
    "info" : "IfStatement[4327-5260]:IfStatement[4327-5260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4338-4444]:Block[4338-4444]"
  }, {
    "left" : "ret = addAndCheck(b, a, msg);",
    "right" : "ret = addAndCheck(b, a, msg);",
    "info" : "ExpressionStatement[4405-4434]:ExpressionStatement[4405-4434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4450-5260]:Block[4450-5260]"
  }, {
    "left" : "if (a < 0)",
    "right" : "if (a < 0)",
    "info" : "IfStatement[4494-5250]:IfStatement[4494-5250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4505-4936]:Block[4505-4936]"
  }, {
    "left" : "if (b < 0)",
    "right" : "if (b < 0)",
    "info" : "IfStatement[4523-4922]:IfStatement[4523-4922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4534-4803]:Block[4534-4803]"
  }, {
    "left" : "if (Long.MIN_VALUE - b <= a)",
    "right" : "if (Long.MIN_VALUE - b <= a)",
    "info" : "IfStatement[4607-4785]:IfStatement[4607-4785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4636-4696]:Block[4636-4696]"
  }, {
    "left" : "ret = a + b;",
    "right" : "ret = a + b;",
    "info" : "ExpressionStatement[4662-4674]:ExpressionStatement[4662-4674]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4702-4785]:Block[4702-4785]"
  }, {
    "left" : "throw new ArithmeticException(msg);",
    "right" : "throw new ArithmeticException(msg);",
    "info" : "ThrowStatement[4728-4763]:ThrowStatement[4728-4763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4809-4922]:Block[4809-4922]"
  }, {
    "left" : "ret = a + b;",
    "right" : "ret = a + b;",
    "info" : "ExpressionStatement[4892-4904]:ExpressionStatement[4892-4904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4942-5250]:Block[4942-5250]"
  }, {
    "left" : "if (a <= Long.MAX_VALUE - b)",
    "right" : "if (a <= Long.MAX_VALUE - b)",
    "info" : "IfStatement[5074-5236]:IfStatement[5074-5236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5103-5155]:Block[5103-5155]"
  }, {
    "left" : "ret = a + b;",
    "right" : "ret = a + b;",
    "info" : "ExpressionStatement[5125-5137]:ExpressionStatement[5125-5137]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5161-5236]:Block[5161-5236]"
  }, {
    "left" : "throw new ArithmeticException(msg);",
    "right" : "throw new ArithmeticException(msg);",
    "info" : "ThrowStatement[5183-5218]:ThrowStatement[5183-5218]"
  }, {
    "left" : "return ret;",
    "right" : "return ret;",
    "info" : "ReturnStatement[5269-5280]:ReturnStatement[5269-5280]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6426-6432]:Modifier[6426-6432]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6433-6439]:Modifier[6433-6439]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[6440-6444]:PrimitiveType[6440-6444]"
  }, {
    "left" : "binomialCoefficient",
    "right" : "binomialCoefficient",
    "info" : "SimpleName[6445-6464]:SimpleName[6445-6464]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[6465-6476]:SingleVariableDeclaration[6465-6476]"
  }, {
    "left" : "final int k",
    "right" : "final int k",
    "info" : "SingleVariableDeclaration[6478-6489]:SingleVariableDeclaration[6478-6489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6491-8423]:Block[6491-8423]"
  }, {
    "left" : "checkBinomial(n, k);",
    "right" : "checkBinomial(n, k);",
    "info" : "ExpressionStatement[6501-6521]:ExpressionStatement[6501-6521]"
  }, {
    "left" : "if ((n == k) || (k == 0))",
    "right" : "if ((n == k) || (k == 0))",
    "info" : "IfStatement[6530-6589]:IfStatement[6530-6589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6556-6589]:Block[6556-6589]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[6570-6579]:ReturnStatement[6570-6579]"
  }, {
    "left" : "if ((k == 1) || (k == n - 1))",
    "right" : "if ((k == 1) || (k == n - 1))",
    "info" : "IfStatement[6598-6661]:IfStatement[6598-6661]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6628-6661]:Block[6628-6661]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[6642-6651]:ReturnStatement[6642-6651]"
  }, {
    "left" : "if (k > n / 2)",
    "right" : "if (k > n / 2)",
    "info" : "IfStatement[6706-6770]:IfStatement[6706-6770]"
  }, {
    "left" : "return binomialCoefficient(n, n - k);",
    "right" : "return binomialCoefficient(n, n - k);",
    "info" : "ReturnStatement[6733-6770]:ReturnStatement[6733-6770]"
  }, {
    "left" : "long result = 1;",
    "right" : "long result = 1;",
    "info" : "VariableDeclarationStatement[6994-7010]:VariableDeclarationStatement[6994-7010]"
  }, {
    "left" : "if (n <= 61)",
    "right" : "if (n <= 61)",
    "info" : "IfStatement[7019-8394]:IfStatement[7019-8394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7032-7263]:Block[7032-7263]"
  }, {
    "left" : "int i = n - k + 1;",
    "right" : "int i = n - k + 1;",
    "info" : "VariableDeclarationStatement[7116-7134]:VariableDeclarationStatement[7116-7134]"
  }, {
    "left" : "for (int j = 1; j <= k; j++)",
    "right" : "for (int j = 1; j <= k; j++)",
    "info" : "ForStatement[7147-7253]:ForStatement[7147-7253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7176-7253]:Block[7176-7253]"
  }, {
    "left" : "result = result * i / j;",
    "right" : "result = result * i / j;",
    "info" : "ExpressionStatement[7194-7218]:ExpressionStatement[7194-7218]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[7235-7239]:ExpressionStatement[7235-7239]"
  }, {
    "left" : "if (n <= 66)",
    "right" : "if (n <= 66)",
    "info" : "IfStatement[7269-8394]:IfStatement[7269-8394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7282-8002]:Block[7282-8002]"
  }, {
    "left" : "int i = n - k + 1;",
    "right" : "int i = n - k + 1;",
    "info" : "VariableDeclarationStatement[7437-7455]:VariableDeclarationStatement[7437-7455]"
  }, {
    "left" : "for (int j = 1; j <= k; j++)",
    "right" : "for (int j = 1; j <= k; j++)",
    "info" : "ForStatement[7468-7992]:ForStatement[7468-7992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7497-7992]:Block[7497-7992]"
  }, {
    "left" : "final long d = gcd(i, j);",
    "right" : "final long d = gcd(i, j);",
    "info" : "VariableDeclarationStatement[7877-7902]:VariableDeclarationStatement[7877-7902]"
  }, {
    "left" : "result = (result / (j / d)) * (i / d);",
    "right" : "result = (result / (j / d)) * (i / d);",
    "info" : "ExpressionStatement[7919-7957]:ExpressionStatement[7919-7957]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[7974-7978]:ExpressionStatement[7974-7978]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8008-8394]:Block[8008-8394]"
  }, {
    "left" : "int i = n - k + 1;",
    "right" : "int i = n - k + 1;",
    "info" : "VariableDeclarationStatement[8183-8201]:VariableDeclarationStatement[8183-8201]"
  }, {
    "left" : "for (int j = 1; j <= k; j++)",
    "right" : "for (int j = 1; j <= k; j++)",
    "info" : "ForStatement[8214-8384]:ForStatement[8214-8384]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8243-8384]:Block[8243-8384]"
  }, {
    "left" : "final long d = gcd(i, j);",
    "right" : "final long d = gcd(i, j);",
    "info" : "VariableDeclarationStatement[8261-8286]:VariableDeclarationStatement[8261-8286]"
  }, {
    "left" : "result = mulAndCheck(result / (j / d), i / d);",
    "right" : "result = mulAndCheck(result / (j / d), i / d);",
    "info" : "ExpressionStatement[8303-8349]:ExpressionStatement[8303-8349]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[8366-8370]:ExpressionStatement[8366-8370]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[8403-8417]:ReturnStatement[8403-8417]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9427-9433]:Modifier[9427-9433]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9434-9440]:Modifier[9434-9440]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[9441-9447]:PrimitiveType[9441-9447]"
  }, {
    "left" : "binomialCoefficientDouble",
    "right" : "binomialCoefficientDouble",
    "info" : "SimpleName[9448-9473]:SimpleName[9448-9473]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[9474-9485]:SingleVariableDeclaration[9474-9485]"
  }, {
    "left" : "final int k",
    "right" : "final int k",
    "info" : "SingleVariableDeclaration[9487-9498]:SingleVariableDeclaration[9487-9498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9500-10019]:Block[9500-10019]"
  }, {
    "left" : "checkBinomial(n, k);",
    "right" : "checkBinomial(n, k);",
    "info" : "ExpressionStatement[9510-9530]:ExpressionStatement[9510-9530]"
  }, {
    "left" : "if ((n == k) || (k == 0))",
    "right" : "if ((n == k) || (k == 0))",
    "info" : "IfStatement[9539-9599]:IfStatement[9539-9599]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9565-9599]:Block[9565-9599]"
  }, {
    "left" : "return 1d;",
    "right" : "return 1d;",
    "info" : "ReturnStatement[9579-9589]:ReturnStatement[9579-9589]"
  }, {
    "left" : "if ((k == 1) || (k == n - 1))",
    "right" : "if ((k == 1) || (k == n - 1))",
    "info" : "IfStatement[9608-9671]:IfStatement[9608-9671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9638-9671]:Block[9638-9671]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[9652-9661]:ReturnStatement[9652-9661]"
  }, {
    "left" : "if (k > n/2)",
    "right" : "if (k > n/2)",
    "info" : "IfStatement[9680-9760]:IfStatement[9680-9760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9693-9760]:Block[9693-9760]"
  }, {
    "left" : "return binomialCoefficientDouble(n, n - k);",
    "right" : "return binomialCoefficientDouble(n, n - k);",
    "info" : "ReturnStatement[9707-9750]:ReturnStatement[9707-9750]"
  }, {
    "left" : "if (n < 67)",
    "right" : "if (n < 67)",
    "info" : "IfStatement[9769-9837]:IfStatement[9769-9837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9781-9837]:Block[9781-9837]"
  }, {
    "left" : "return binomialCoefficient(n,k);",
    "right" : "return binomialCoefficient(n,k);",
    "info" : "ReturnStatement[9795-9827]:ReturnStatement[9795-9827]"
  }, {
    "left" : "double result = 1d;",
    "right" : "double result = 1d;",
    "info" : "VariableDeclarationStatement[9847-9866]:VariableDeclarationStatement[9847-9866]"
  }, {
    "left" : "for (int i = 1; i <= k; i++)",
    "right" : "for (int i = 1; i <= k; i++)",
    "info" : "ForStatement[9875-9971]:ForStatement[9875-9971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9904-9971]:Block[9904-9971]"
  }, {
    "left" : "result *= (double)(n - k + i) / (double)i;",
    "right" : "result *= (double)(n - k + i) / (double)i;",
    "info" : "ExpressionStatement[9919-9961]:ExpressionStatement[9919-9961]"
  }, {
    "left" : "return Math.floor(result + 0.5);",
    "right" : "return Math.floor(result + 0.5);",
    "info" : "ReturnStatement[9981-10013]:ReturnStatement[9981-10013]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10735-10741]:Modifier[10735-10741]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10742-10748]:Modifier[10742-10748]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[10749-10755]:PrimitiveType[10749-10755]"
  }, {
    "left" : "binomialCoefficientLog",
    "right" : "binomialCoefficientLog",
    "info" : "SimpleName[10756-10778]:SimpleName[10756-10778]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[10779-10790]:SingleVariableDeclaration[10779-10790]"
  }, {
    "left" : "final int k",
    "right" : "final int k",
    "info" : "SingleVariableDeclaration[10792-10803]:SingleVariableDeclaration[10792-10803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10805-11899]:Block[10805-11899]"
  }, {
    "left" : "checkBinomial(n, k);",
    "right" : "checkBinomial(n, k);",
    "info" : "ExpressionStatement[10815-10835]:ExpressionStatement[10815-10835]"
  }, {
    "left" : "if ((n == k) || (k == 0))",
    "right" : "if ((n == k) || (k == 0))",
    "info" : "IfStatement[10844-10903]:IfStatement[10844-10903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10870-10903]:Block[10870-10903]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[10884-10893]:ReturnStatement[10884-10893]"
  }, {
    "left" : "if ((k == 1) || (k == n - 1))",
    "right" : "if ((k == 1) || (k == n - 1))",
    "info" : "IfStatement[10912-10985]:IfStatement[10912-10985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10942-10985]:Block[10942-10985]"
  }, {
    "left" : "return Math.log(n);",
    "right" : "return Math.log(n);",
    "info" : "ReturnStatement[10956-10975]:ReturnStatement[10956-10975]"
  }, {
    "left" : "if (n < 67)",
    "right" : "if (n < 67)",
    "info" : "IfStatement[11131-11209]:IfStatement[11131-11209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11143-11209]:Block[11143-11209]"
  }, {
    "left" : "return Math.log(binomialCoefficient(n,k));",
    "right" : "return Math.log(binomialCoefficient(n,k));",
    "info" : "ReturnStatement[11157-11199]:ReturnStatement[11157-11199]"
  }, {
    "left" : "if (n < 1030)",
    "right" : "if (n < 1030)",
    "info" : "IfStatement[11368-11455]:IfStatement[11368-11455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11382-11455]:Block[11382-11455]"
  }, {
    "left" : "return Math.log(binomialCoefficientDouble(n, k));",
    "right" : "return Math.log(binomialCoefficientDouble(n, k));",
    "info" : "ReturnStatement[11396-11445]:ReturnStatement[11396-11445]"
  }, {
    "left" : "if (k > n / 2)",
    "right" : "if (k > n / 2)",
    "info" : "IfStatement[11465-11544]:IfStatement[11465-11544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11480-11544]:Block[11480-11544]"
  }, {
    "left" : "return binomialCoefficientLog(n, n - k);",
    "right" : "return binomialCoefficientLog(n, n - k);",
    "info" : "ReturnStatement[11494-11534]:ReturnStatement[11494-11534]"
  }, {
    "left" : "double logSum = 0;",
    "right" : "double logSum = 0;",
    "info" : "VariableDeclarationStatement[11628-11646]:VariableDeclarationStatement[11628-11646]"
  }, {
    "left" : "for (int i = n - k + 1; i <= n; i++)",
    "right" : "for (int i = n - k + 1; i <= n; i++)",
    "info" : "ForStatement[11677-11760]:ForStatement[11677-11760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11714-11760]:Block[11714-11760]"
  }, {
    "left" : "logSum += Math.log(i);",
    "right" : "logSum += Math.log(i);",
    "info" : "ExpressionStatement[11728-11750]:ExpressionStatement[11728-11750]"
  }, {
    "left" : "for (int i = 2; i <= k; i++)",
    "right" : "for (int i = 2; i <= k; i++)",
    "info" : "ForStatement[11794-11869]:ForStatement[11794-11869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11823-11869]:Block[11823-11869]"
  }, {
    "left" : "logSum -= Math.log(i);",
    "right" : "logSum -= Math.log(i);",
    "info" : "ExpressionStatement[11837-11859]:ExpressionStatement[11837-11859]"
  }, {
    "left" : "return logSum;",
    "right" : "return logSum;",
    "info" : "ReturnStatement[11879-11893]:ReturnStatement[11879-11893]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[12121-12128]:Modifier[12121-12128]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12129-12135]:Modifier[12129-12135]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12136-12140]:PrimitiveType[12136-12140]"
  }, {
    "left" : "checkBinomial",
    "right" : "checkBinomial",
    "info" : "SimpleName[12141-12154]:SimpleName[12141-12154]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[12155-12166]:SingleVariableDeclaration[12155-12166]"
  }, {
    "left" : "final int k",
    "right" : "final int k",
    "info" : "SingleVariableDeclaration[12168-12179]:SingleVariableDeclaration[12168-12179]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[12196-12220]:SimpleType[12196-12220]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12221-12648]:Block[12221-12648]"
  }, {
    "left" : "if (n < k)",
    "right" : "if (n < k)",
    "info" : "IfStatement[12231-12436]:IfStatement[12231-12436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12242-12436]:Block[12242-12436]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}\",\n                n, k);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k), got n = {0}, k = {1}\",\n                n, k);",
    "info" : "ThrowStatement[12256-12426]:ThrowStatement[12256-12426]"
  }, {
    "left" : "if (n < 0)",
    "right" : "if (n < 0)",
    "info" : "IfStatement[12445-12642]:IfStatement[12445-12642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12456-12642]:Block[12456-12642]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"must have n >= 0 for binomial coefficient (n,k), got n = {0}\",\n                  n);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"must have n >= 0 for binomial coefficient (n,k), got n = {0}\",\n                  n);",
    "info" : "ThrowStatement[12470-12632]:ThrowStatement[12470-12632]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13195-13201]:Modifier[13195-13201]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13202-13208]:Modifier[13202-13208]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13209-13212]:PrimitiveType[13209-13212]"
  }, {
    "left" : "compareTo",
    "right" : "compareTo",
    "info" : "SimpleName[13213-13222]:SimpleName[13213-13222]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[13223-13231]:SingleVariableDeclaration[13223-13231]"
  }, {
    "left" : "double y",
    "right" : "double y",
    "info" : "SingleVariableDeclaration[13233-13241]:SingleVariableDeclaration[13233-13241]"
  }, {
    "left" : "double eps",
    "right" : "double eps",
    "info" : "SingleVariableDeclaration[13243-13253]:SingleVariableDeclaration[13243-13253]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13255-13394]:Block[13255-13394]"
  }, {
    "left" : "if (equals(x, y, eps))",
    "right" : "if (equals(x, y, eps))",
    "info" : "IfStatement[13265-13370]:IfStatement[13265-13370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13288-13321]:Block[13288-13321]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[13302-13311]:ReturnStatement[13302-13311]"
  }, {
    "left" : "if (x < y)",
    "right" : "if (x < y)",
    "info" : "IfStatement[13327-13370]:IfStatement[13327-13370]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13338-13370]:Block[13338-13370]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[13350-13360]:ReturnStatement[13350-13360]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[13379-13388]:ReturnStatement[13379-13388]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13646-13652]:Modifier[13646-13652]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13653-13659]:Modifier[13653-13659]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[13660-13666]:PrimitiveType[13660-13666]"
  }, {
    "left" : "cosh",
    "right" : "cosh",
    "info" : "SimpleName[13667-13671]:SimpleName[13667-13671]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[13672-13680]:SingleVariableDeclaration[13672-13680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13682-13740]:Block[13682-13740]"
  }, {
    "left" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
    "right" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
    "info" : "ReturnStatement[13692-13734]:ReturnStatement[13692-13734]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13977-13983]:Modifier[13977-13983]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13984-13990]:Modifier[13984-13990]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13991-13998]:PrimitiveType[13991-13998]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[13999-14005]:SimpleName[13999-14005]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[14006-14014]:SingleVariableDeclaration[14006-14014]"
  }, {
    "left" : "double y",
    "right" : "double y",
    "info" : "SingleVariableDeclaration[14016-14024]:SingleVariableDeclaration[14016-14024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14026-14096]:Block[14026-14096]"
  }, {
    "left" : "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
    "right" : "return (Double.isNaN(x) && Double.isNaN(y)) || x == y;",
    "info" : "ReturnStatement[14036-14090]:ReturnStatement[14036-14090]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14518-14524]:Modifier[14518-14524]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14525-14531]:Modifier[14525-14531]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14532-14539]:PrimitiveType[14532-14539]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[14540-14546]:SimpleName[14540-14546]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[14547-14555]:SingleVariableDeclaration[14547-14555]"
  }, {
    "left" : "double y",
    "right" : "double y",
    "info" : "SingleVariableDeclaration[14557-14565]:SingleVariableDeclaration[14557-14565]"
  }, {
    "left" : "double eps",
    "right" : "double eps",
    "info" : "SingleVariableDeclaration[14567-14577]:SingleVariableDeclaration[14567-14577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14579-14641]:Block[14579-14641]"
  }, {
    "left" : "return equals(x, y) || (Math.abs(y - x) <= eps);",
    "right" : "return equals(x, y) || (Math.abs(y - x) <= eps);",
    "info" : "ReturnStatement[14587-14635]:ReturnStatement[14587-14635]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15220-15226]:Modifier[15220-15226]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15227-15233]:Modifier[15227-15233]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15234-15241]:PrimitiveType[15234-15241]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[15242-15248]:SimpleName[15242-15248]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[15249-15257]:SingleVariableDeclaration[15249-15257]"
  }, {
    "left" : "double y",
    "right" : "double y",
    "info" : "SingleVariableDeclaration[15259-15267]:SingleVariableDeclaration[15259-15267]"
  }, {
    "left" : "int maxUlps",
    "right" : "int maxUlps",
    "info" : "SingleVariableDeclaration[15269-15280]:SingleVariableDeclaration[15269-15280]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15282-15835]:Block[15282-15835]"
  }, {
    "left" : "assert maxUlps > 0 && maxUlps < NAN_GAP;",
    "right" : "assert maxUlps > 0 && maxUlps < NAN_GAP;",
    "info" : "AssertStatement[15428-15468]:AssertStatement[15428-15468]"
  }, {
    "left" : "long xInt = Double.doubleToLongBits(x);",
    "right" : "long xInt = Double.doubleToLongBits(x);",
    "info" : "VariableDeclarationStatement[15478-15517]:VariableDeclarationStatement[15478-15517]"
  }, {
    "left" : "long yInt = Double.doubleToLongBits(y);",
    "right" : "long yInt = Double.doubleToLongBits(y);",
    "info" : "VariableDeclarationStatement[15526-15565]:VariableDeclarationStatement[15526-15565]"
  }, {
    "left" : "if (xInt < 0)",
    "right" : "if (xInt < 0)",
    "info" : "IfStatement[15648-15709]:IfStatement[15648-15709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15662-15709]:Block[15662-15709]"
  }, {
    "left" : "xInt = SGN_MASK - xInt;",
    "right" : "xInt = SGN_MASK - xInt;",
    "info" : "ExpressionStatement[15676-15699]:ExpressionStatement[15676-15699]"
  }, {
    "left" : "if (yInt < 0)",
    "right" : "if (yInt < 0)",
    "info" : "IfStatement[15718-15779]:IfStatement[15718-15779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15732-15779]:Block[15732-15779]"
  }, {
    "left" : "yInt = SGN_MASK - yInt;",
    "right" : "yInt = SGN_MASK - yInt;",
    "info" : "ExpressionStatement[15746-15769]:ExpressionStatement[15746-15769]"
  }, {
    "left" : "return Math.abs(xInt - yInt) <= maxUlps;",
    "right" : "return Math.abs(xInt - yInt) <= maxUlps;",
    "info" : "ReturnStatement[15789-15829]:ReturnStatement[15789-15829]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16180-16186]:Modifier[16180-16186]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[16187-16193]:Modifier[16187-16193]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[16194-16201]:PrimitiveType[16194-16201]"
  }, {
    "left" : "equals",
    "right" : "equals",
    "info" : "SimpleName[16202-16208]:SimpleName[16202-16208]"
  }, {
    "left" : "double[] x",
    "right" : "double[] x",
    "info" : "SingleVariableDeclaration[16209-16219]:SingleVariableDeclaration[16209-16219]"
  }, {
    "left" : "double[] y",
    "right" : "double[] y",
    "info" : "SingleVariableDeclaration[16221-16231]:SingleVariableDeclaration[16221-16231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16233-16572]:Block[16233-16572]"
  }, {
    "left" : "if ((x == null) || (y == null))",
    "right" : "if ((x == null) || (y == null))",
    "info" : "IfStatement[16243-16335]:IfStatement[16243-16335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16275-16335]:Block[16275-16335]"
  }, {
    "left" : "return !((x == null) ^ (y == null));",
    "right" : "return !((x == null) ^ (y == null));",
    "info" : "ReturnStatement[16289-16325]:ReturnStatement[16289-16325]"
  }, {
    "left" : "if (x.length != y.length)",
    "right" : "if (x.length != y.length)",
    "info" : "IfStatement[16344-16407]:IfStatement[16344-16407]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16370-16407]:Block[16370-16407]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16384-16397]:ReturnStatement[16384-16397]"
  }, {
    "left" : "for (int i = 0; i < x.length; ++i)",
    "right" : "for (int i = 0; i < x.length; ++i)",
    "info" : "ForStatement[16416-16545]:ForStatement[16416-16545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16451-16545]:Block[16451-16545]"
  }, {
    "left" : "if (!equals(x[i], y[i]))",
    "right" : "if (!equals(x[i], y[i]))",
    "info" : "IfStatement[16465-16535]:IfStatement[16465-16535]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16490-16535]:Block[16490-16535]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16508-16521]:ReturnStatement[16508-16521]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16554-16566]:ReturnStatement[16554-16566]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17489-17495]:Modifier[17489-17495]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[17496-17502]:Modifier[17496-17502]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[17503-17507]:PrimitiveType[17503-17507]"
  }, {
    "left" : "factorial",
    "right" : "factorial",
    "info" : "SimpleName[17508-17517]:SimpleName[17508-17517]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[17518-17529]:SingleVariableDeclaration[17518-17529]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17531-17895]:Block[17531-17895]"
  }, {
    "left" : "if (n < 0)",
    "right" : "if (n < 0)",
    "info" : "IfStatement[17541-17714]:IfStatement[17541-17714]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17552-17714]:Block[17552-17714]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"must have n >= 0 for n!, got n = {0}\",\n                  n);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"must have n >= 0 for n!, got n = {0}\",\n                  n);",
    "info" : "ThrowStatement[17566-17704]:ThrowStatement[17566-17704]"
  }, {
    "left" : "if (n > 20)",
    "right" : "if (n > 20)",
    "info" : "IfStatement[17723-17859]:IfStatement[17723-17859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17735-17859]:Block[17735-17859]"
  }, {
    "left" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
    "right" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
    "info" : "ThrowStatement[17749-17849]:ThrowStatement[17749-17849]"
  }, {
    "left" : "return FACTORIALS[n];",
    "right" : "return FACTORIALS[n];",
    "info" : "ReturnStatement[17868-17889]:ReturnStatement[17868-17889]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18707-18713]:Modifier[18707-18713]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18714-18720]:Modifier[18714-18720]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[18721-18727]:PrimitiveType[18721-18727]"
  }, {
    "left" : "factorialDouble",
    "right" : "factorialDouble",
    "info" : "SimpleName[18728-18743]:SimpleName[18728-18743]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[18744-18755]:SingleVariableDeclaration[18744-18755]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18757-19071]:Block[18757-19071]"
  }, {
    "left" : "if (n < 0)",
    "right" : "if (n < 0)",
    "info" : "IfStatement[18767-18940]:IfStatement[18767-18940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18778-18940]:Block[18778-18940]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"must have n >= 0 for n!, got n = {0}\",\n                  n);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"must have n >= 0 for n!, got n = {0}\",\n                  n);",
    "info" : "ThrowStatement[18792-18930]:ThrowStatement[18792-18930]"
  }, {
    "left" : "if (n < 21)",
    "right" : "if (n < 21)",
    "info" : "IfStatement[18949-19005]:IfStatement[18949-19005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18961-19005]:Block[18961-19005]"
  }, {
    "left" : "return factorial(n);",
    "right" : "return factorial(n);",
    "info" : "ReturnStatement[18975-18995]:ReturnStatement[18975-18995]"
  }, {
    "left" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
    "right" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
    "info" : "ReturnStatement[19014-19065]:ReturnStatement[19014-19065]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19453-19459]:Modifier[19453-19459]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19460-19466]:Modifier[19460-19466]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[19467-19473]:PrimitiveType[19467-19473]"
  }, {
    "left" : "factorialLog",
    "right" : "factorialLog",
    "info" : "SimpleName[19474-19486]:SimpleName[19474-19486]"
  }, {
    "left" : "final int n",
    "right" : "final int n",
    "info" : "SingleVariableDeclaration[19487-19498]:SingleVariableDeclaration[19487-19498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19500-19898]:Block[19500-19898]"
  }, {
    "left" : "if (n < 0)",
    "right" : "if (n < 0)",
    "info" : "IfStatement[19510-19683]:IfStatement[19510-19683]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19521-19683]:Block[19521-19683]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"must have n >= 0 for n!, got n = {0}\",\n                  n);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"must have n >= 0 for n!, got n = {0}\",\n                  n);",
    "info" : "ThrowStatement[19535-19673]:ThrowStatement[19535-19673]"
  }, {
    "left" : "if (n < 21)",
    "right" : "if (n < 21)",
    "info" : "IfStatement[19692-19758]:IfStatement[19692-19758]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19704-19758]:Block[19704-19758]"
  }, {
    "left" : "return Math.log(factorial(n));",
    "right" : "return Math.log(factorial(n));",
    "info" : "ReturnStatement[19718-19748]:ReturnStatement[19718-19748]"
  }, {
    "left" : "double logSum = 0;",
    "right" : "double logSum = 0;",
    "info" : "VariableDeclarationStatement[19767-19785]:VariableDeclarationStatement[19767-19785]"
  }, {
    "left" : "for (int i = 2; i <= n; i++)",
    "right" : "for (int i = 2; i <= n; i++)",
    "info" : "ForStatement[19794-19869]:ForStatement[19794-19869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19823-19869]:Block[19823-19869]"
  }, {
    "left" : "logSum += Math.log(i);",
    "right" : "logSum += Math.log(i);",
    "info" : "ExpressionStatement[19837-19859]:ExpressionStatement[19837-19859]"
  }, {
    "left" : "return logSum;",
    "right" : "return logSum;",
    "info" : "ReturnStatement[19878-19892]:ReturnStatement[19878-19892]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[21128-21134]:Modifier[21128-21134]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[21135-21141]:Modifier[21135-21141]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[21142-21145]:PrimitiveType[21142-21145]"
  }, {
    "left" : "gcd",
    "right" : "gcd",
    "info" : "SimpleName[21146-21149]:SimpleName[21146-21149]"
  }, {
    "left" : "final int p",
    "right" : "final int p",
    "info" : "SingleVariableDeclaration[21150-21161]:SingleVariableDeclaration[21150-21161]"
  }, {
    "left" : "final int q",
    "right" : "final int q",
    "info" : "SingleVariableDeclaration[21163-21174]:SingleVariableDeclaration[21163-21174]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21176-23324]:Block[21176-23324]"
  }, {
    "left" : "int u = p;",
    "right" : "int u = p;",
    "info" : "VariableDeclarationStatement[21186-21196]:VariableDeclarationStatement[21186-21196]"
  }, {
    "left" : "int v = q;",
    "right" : "int v = q;",
    "info" : "VariableDeclarationStatement[21205-21215]:VariableDeclarationStatement[21205-21215]"
  }, {
    "left" : "if ((u == 0) || (v == 0))",
    "right" : "if ((u == 0) || (v == 0))",
    "info" : "IfStatement[21224-21553]:IfStatement[21224-21553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21250-21553]:Block[21250-21553]"
  }, {
    "left" : "if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE))",
    "right" : "if ((u == Integer.MIN_VALUE) || (v == Integer.MIN_VALUE))",
    "info" : "IfStatement[21264-21497]:IfStatement[21264-21497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21322-21497]:Block[21322-21497]"
  }, {
    "left" : "throw MathRuntimeException.createArithmeticException(\n                        \"overflow: gcd({0}, {1}) is 2^31\",\n                        p, q);",
    "right" : "throw MathRuntimeException.createArithmeticException(\n                        \"overflow: gcd({0}, {1}) is 2^31\",\n                        p, q);",
    "info" : "ThrowStatement[21340-21483]:ThrowStatement[21340-21483]"
  }, {
    "left" : "return Math.abs(u) + Math.abs(v);",
    "right" : "return Math.abs(u) + Math.abs(v);",
    "info" : "ReturnStatement[21510-21543]:ReturnStatement[21510-21543]"
  }, {
    "left" : "if (u > 0)",
    "right" : "if (u > 0)",
    "info" : "IfStatement[21830-21872]:IfStatement[21830-21872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21841-21872]:Block[21841-21872]"
  }, {
    "left" : "u = -u;",
    "right" : "u = -u;",
    "info" : "ExpressionStatement[21855-21862]:ExpressionStatement[21855-21862]"
  }, {
    "left" : "if (v > 0)",
    "right" : "if (v > 0)",
    "info" : "IfStatement[21900-21942]:IfStatement[21900-21942]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21911-21942]:Block[21911-21942]"
  }, {
    "left" : "v = -v;",
    "right" : "v = -v;",
    "info" : "ExpressionStatement[21925-21932]:ExpressionStatement[21925-21932]"
  }, {
    "left" : "int k = 0;",
    "right" : "int k = 0;",
    "info" : "VariableDeclarationStatement[22003-22013]:VariableDeclarationStatement[22003-22013]"
  }, {
    "left" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
    "right" : "while ((u & 1) == 0 && (v & 1) == 0 && k < 31)",
    "info" : "WhileStatement[22022-22252]:WhileStatement[22022-22252]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22069-22252]:Block[22069-22252]"
  }, {
    "left" : "u /= 2;",
    "right" : "u /= 2;",
    "info" : "ExpressionStatement[22180-22187]:ExpressionStatement[22180-22187]"
  }, {
    "left" : "v /= 2;",
    "right" : "v /= 2;",
    "info" : "ExpressionStatement[22200-22207]:ExpressionStatement[22200-22207]"
  }, {
    "left" : "k++;",
    "right" : "k++;",
    "info" : "ExpressionStatement[22220-22224]:ExpressionStatement[22220-22224]"
  }, {
    "left" : "if (k == 31)",
    "right" : "if (k == 31)",
    "info" : "IfStatement[22261-22433]:IfStatement[22261-22433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22274-22433]:Block[22274-22433]"
  }, {
    "left" : "throw MathRuntimeException.createArithmeticException(\n                    \"overflow: gcd({0}, {1}) is 2^31\",\n                    p, q);",
    "right" : "throw MathRuntimeException.createArithmeticException(\n                    \"overflow: gcd({0}, {1}) is 2^31\",\n                    p, q);",
    "info" : "ThrowStatement[22288-22423]:ThrowStatement[22288-22423]"
  }, {
    "left" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
    "right" : "int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;",
    "info" : "VariableDeclarationStatement[22538-22584]:VariableDeclarationStatement[22538-22584]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[22715-23272]:DoStatement[22715-23272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22718-23256]:Block[22718-23256]"
  }, {
    "left" : "while ((t & 1) == 0)",
    "right" : "while ((t & 1) == 0)",
    "info" : "WhileStatement[22813-22911]:WhileStatement[22813-22911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22834-22911]:Block[22834-22911]"
  }, {
    "left" : "t /= 2;",
    "right" : "t /= 2;",
    "info" : "ExpressionStatement[22873-22880]:ExpressionStatement[22873-22880]"
  }, {
    "left" : "if (t > 0)",
    "right" : "if (t > 0)",
    "info" : "IfStatement[22959-23053]:IfStatement[22959-23053]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22970-23009]:Block[22970-23009]"
  }, {
    "left" : "u = -t;",
    "right" : "u = -t;",
    "info" : "ExpressionStatement[22988-22995]:ExpressionStatement[22988-22995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23015-23053]:Block[23015-23053]"
  }, {
    "left" : "v = t;",
    "right" : "v = t;",
    "info" : "ExpressionStatement[23033-23039]:ExpressionStatement[23033-23039]"
  }, {
    "left" : "t = (v - u) / 2;",
    "right" : "t = (v - u) / 2;",
    "info" : "ExpressionStatement[23130-23146]:ExpressionStatement[23130-23146]"
  }, {
    "left" : "return -u * (1 << k);",
    "right" : "return -u * (1 << k);",
    "info" : "ReturnStatement[23281-23302]:ReturnStatement[23281-23302]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23498-23504]:Modifier[23498-23504]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23505-23511]:Modifier[23505-23511]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[23512-23515]:PrimitiveType[23512-23515]"
  }, {
    "left" : "hash",
    "right" : "hash",
    "info" : "SimpleName[23516-23520]:SimpleName[23516-23520]"
  }, {
    "left" : "double value",
    "right" : "double value",
    "info" : "SingleVariableDeclaration[23521-23533]:SingleVariableDeclaration[23521-23533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23535-23587]:Block[23535-23587]"
  }, {
    "left" : "return new Double(value).hashCode();",
    "right" : "return new Double(value).hashCode();",
    "info" : "ReturnStatement[23545-23581]:ReturnStatement[23545-23581]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[23793-23799]:Modifier[23793-23799]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[23800-23806]:Modifier[23800-23806]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[23807-23810]:PrimitiveType[23807-23810]"
  }, {
    "left" : "hash",
    "right" : "hash",
    "info" : "SimpleName[23811-23815]:SimpleName[23811-23815]"
  }, {
    "left" : "double[] value",
    "right" : "double[] value",
    "info" : "SingleVariableDeclaration[23816-23830]:SingleVariableDeclaration[23816-23830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23832-23878]:Block[23832-23878]"
  }, {
    "left" : "return Arrays.hashCode(value);",
    "right" : "return Arrays.hashCode(value);",
    "info" : "ReturnStatement[23842-23872]:ReturnStatement[23842-23872]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24109-24115]:Modifier[24109-24115]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24116-24122]:Modifier[24116-24122]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[24123-24127]:PrimitiveType[24123-24127]"
  }, {
    "left" : "indicator",
    "right" : "indicator",
    "info" : "SimpleName[24128-24137]:SimpleName[24128-24137]"
  }, {
    "left" : "final byte x",
    "right" : "final byte x",
    "info" : "SingleVariableDeclaration[24138-24150]:SingleVariableDeclaration[24138-24150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24152-24195]:Block[24152-24195]"
  }, {
    "left" : "return (x >= ZB) ? PB : NB;",
    "right" : "return (x >= ZB) ? PB : NB;",
    "info" : "ReturnStatement[24162-24189]:ReturnStatement[24162-24189]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24487-24493]:Modifier[24487-24493]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24494-24500]:Modifier[24494-24500]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[24501-24507]:PrimitiveType[24501-24507]"
  }, {
    "left" : "indicator",
    "right" : "indicator",
    "info" : "SimpleName[24508-24517]:SimpleName[24508-24517]"
  }, {
    "left" : "final double x",
    "right" : "final double x",
    "info" : "SingleVariableDeclaration[24518-24532]:SingleVariableDeclaration[24518-24532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24534-24653]:Block[24534-24653]"
  }, {
    "left" : "if (Double.isNaN(x))",
    "right" : "if (Double.isNaN(x))",
    "info" : "IfStatement[24544-24607]:IfStatement[24544-24607]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24565-24607]:Block[24565-24607]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[24579-24597]:ReturnStatement[24579-24597]"
  }, {
    "left" : "return (x >= 0.0) ? 1.0 : -1.0;",
    "right" : "return (x >= 0.0) ? 1.0 : -1.0;",
    "info" : "ReturnStatement[24616-24647]:ReturnStatement[24616-24647]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[24930-24936]:Modifier[24930-24936]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24937-24943]:Modifier[24937-24943]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[24944-24949]:PrimitiveType[24944-24949]"
  }, {
    "left" : "indicator",
    "right" : "indicator",
    "info" : "SimpleName[24950-24959]:SimpleName[24950-24959]"
  }, {
    "left" : "final float x",
    "right" : "final float x",
    "info" : "SingleVariableDeclaration[24960-24973]:SingleVariableDeclaration[24960-24973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24975-25095]:Block[24975-25095]"
  }, {
    "left" : "if (Float.isNaN(x))",
    "right" : "if (Float.isNaN(x))",
    "info" : "IfStatement[24985-25046]:IfStatement[24985-25046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25005-25046]:Block[25005-25046]"
  }, {
    "left" : "return Float.NaN;",
    "right" : "return Float.NaN;",
    "info" : "ReturnStatement[25019-25036]:ReturnStatement[25019-25036]"
  }, {
    "left" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
    "right" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
    "info" : "ReturnStatement[25055-25089]:ReturnStatement[25055-25089]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25287-25293]:Modifier[25287-25293]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25294-25300]:Modifier[25294-25300]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[25301-25304]:PrimitiveType[25301-25304]"
  }, {
    "left" : "indicator",
    "right" : "indicator",
    "info" : "SimpleName[25305-25314]:SimpleName[25305-25314]"
  }, {
    "left" : "final int x",
    "right" : "final int x",
    "info" : "SingleVariableDeclaration[25315-25326]:SingleVariableDeclaration[25315-25326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25328-25369]:Block[25328-25369]"
  }, {
    "left" : "return (x >= 0) ? 1 : -1;",
    "right" : "return (x >= 0) ? 1 : -1;",
    "info" : "ReturnStatement[25338-25363]:ReturnStatement[25338-25363]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25565-25571]:Modifier[25565-25571]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25572-25578]:Modifier[25572-25578]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[25579-25583]:PrimitiveType[25579-25583]"
  }, {
    "left" : "indicator",
    "right" : "indicator",
    "info" : "SimpleName[25584-25593]:SimpleName[25584-25593]"
  }, {
    "left" : "final long x",
    "right" : "final long x",
    "info" : "SingleVariableDeclaration[25594-25606]:SingleVariableDeclaration[25594-25606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25608-25652]:Block[25608-25652]"
  }, {
    "left" : "return (x >= 0L) ? 1L : -1L;",
    "right" : "return (x >= 0L) ? 1L : -1L;",
    "info" : "ReturnStatement[25618-25646]:ReturnStatement[25618-25646]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25889-25895]:Modifier[25889-25895]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25896-25902]:Modifier[25896-25902]"
  }, {
    "left" : "short",
    "right" : "short",
    "info" : "PrimitiveType[25903-25908]:PrimitiveType[25903-25908]"
  }, {
    "left" : "indicator",
    "right" : "indicator",
    "info" : "SimpleName[25909-25918]:SimpleName[25909-25918]"
  }, {
    "left" : "final short x",
    "right" : "final short x",
    "info" : "SingleVariableDeclaration[25919-25932]:SingleVariableDeclaration[25919-25932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25934-25977]:Block[25934-25977]"
  }, {
    "left" : "return (x >= ZS) ? PS : NS;",
    "right" : "return (x >= ZS) ? PS : NS;",
    "info" : "ReturnStatement[25944-25971]:ReturnStatement[25944-25971]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26906-26912]:Modifier[26906-26912]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[26913-26919]:Modifier[26913-26919]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[26920-26923]:PrimitiveType[26920-26923]"
  }, {
    "left" : "lcm",
    "right" : "lcm",
    "info" : "SimpleName[26924-26927]:SimpleName[26924-26927]"
  }, {
    "left" : "int a",
    "right" : "int a",
    "info" : "SingleVariableDeclaration[26928-26933]:SingleVariableDeclaration[26928-26933]"
  }, {
    "left" : "int b",
    "right" : "int b",
    "info" : "SingleVariableDeclaration[26935-26940]:SingleVariableDeclaration[26935-26940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26942-27204]:Block[26942-27204]"
  }, {
    "left" : "if (a==0 || b==0)",
    "right" : "if (a==0 || b==0)",
    "info" : "IfStatement[26952-27002]:IfStatement[26952-27002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26969-27002]:Block[26969-27002]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[26983-26992]:ReturnStatement[26983-26992]"
  }, {
    "left" : "int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",
    "right" : "int lcm = Math.abs(mulAndCheck(a / gcd(a, b), b));",
    "info" : "VariableDeclarationStatement[27011-27061]:VariableDeclarationStatement[27011-27061]"
  }, {
    "left" : "if (lcm == Integer.MIN_VALUE)",
    "right" : "if (lcm == Integer.MIN_VALUE)",
    "info" : "IfStatement[27070-27178]:IfStatement[27070-27178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27099-27178]:Block[27099-27178]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: lcm is 2^31\");",
    "right" : "throw new ArithmeticException(\"overflow: lcm is 2^31\");",
    "info" : "ThrowStatement[27113-27168]:ThrowStatement[27113-27168]"
  }, {
    "left" : "return lcm;",
    "right" : "return lcm;",
    "info" : "ReturnStatement[27187-27198]:ReturnStatement[27187-27198]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27946-27952]:Modifier[27946-27952]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27953-27959]:Modifier[27953-27959]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[27960-27966]:PrimitiveType[27960-27966]"
  }, {
    "left" : "log",
    "right" : "log",
    "info" : "SimpleName[27967-27970]:SimpleName[27967-27970]"
  }, {
    "left" : "double base",
    "right" : "double base",
    "info" : "SingleVariableDeclaration[27971-27982]:SingleVariableDeclaration[27971-27982]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[27984-27992]:SingleVariableDeclaration[27984-27992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27994-28044]:Block[27994-28044]"
  }, {
    "left" : "return Math.log(x)/Math.log(base);",
    "right" : "return Math.log(x)/Math.log(base);",
    "info" : "ReturnStatement[28004-28038]:ReturnStatement[28004-28038]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28335-28341]:Modifier[28335-28341]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[28342-28348]:Modifier[28342-28348]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[28349-28352]:PrimitiveType[28349-28352]"
  }, {
    "left" : "mulAndCheck",
    "right" : "mulAndCheck",
    "info" : "SimpleName[28353-28364]:SimpleName[28353-28364]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[28365-28370]:SingleVariableDeclaration[28365-28370]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[28372-28377]:SingleVariableDeclaration[28372-28377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28379-28581]:Block[28379-28581]"
  }, {
    "left" : "long m = ((long)x) * ((long)y);",
    "right" : "long m = ((long)x) * ((long)y);",
    "info" : "VariableDeclarationStatement[28389-28420]:VariableDeclarationStatement[28389-28420]"
  }, {
    "left" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
    "right" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
    "info" : "IfStatement[28429-28552]:IfStatement[28429-28552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28481-28552]:Block[28481-28552]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: mul\");",
    "right" : "throw new ArithmeticException(\"overflow: mul\");",
    "info" : "ThrowStatement[28495-28542]:ThrowStatement[28495-28542]"
  }, {
    "left" : "return (int)m;",
    "right" : "return (int)m;",
    "info" : "ReturnStatement[28561-28575]:ReturnStatement[28561-28575]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28887-28893]:Modifier[28887-28893]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[28894-28900]:Modifier[28894-28900]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[28901-28905]:PrimitiveType[28901-28905]"
  }, {
    "left" : "mulAndCheck",
    "right" : "mulAndCheck",
    "info" : "SimpleName[28906-28917]:SimpleName[28906-28917]"
  }, {
    "left" : "long a",
    "right" : "long a",
    "info" : "SingleVariableDeclaration[28918-28924]:SingleVariableDeclaration[28918-28924]"
  }, {
    "left" : "long b",
    "right" : "long b",
    "info" : "SingleVariableDeclaration[28926-28932]:SingleVariableDeclaration[28926-28932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28934-30360]:Block[28934-30360]"
  }, {
    "left" : "long ret;",
    "right" : "long ret;",
    "info" : "VariableDeclarationStatement[28944-28953]:VariableDeclarationStatement[28944-28953]"
  }, {
    "left" : "String msg = \"overflow: multiply\";",
    "right" : "String msg = \"overflow: multiply\";",
    "info" : "VariableDeclarationStatement[28962-28996]:VariableDeclarationStatement[28962-28996]"
  }, {
    "left" : "if (a > b)",
    "right" : "if (a > b)",
    "info" : "IfStatement[29005-30334]:IfStatement[29005-30334]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29016-29117]:Block[29016-29117]"
  }, {
    "left" : "ret = mulAndCheck(b, a);",
    "right" : "ret = mulAndCheck(b, a);",
    "info" : "ExpressionStatement[29083-29107]:ExpressionStatement[29083-29107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29123-30334]:Block[29123-30334]"
  }, {
    "left" : "if (a < 0)",
    "right" : "if (a < 0)",
    "info" : "IfStatement[29137-30324]:IfStatement[29137-30324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29148-29894]:Block[29148-29894]"
  }, {
    "left" : "if (b < 0)",
    "right" : "if (b < 0)",
    "info" : "IfStatement[29166-29880]:IfStatement[29166-29880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29177-29474]:Block[29177-29474]"
  }, {
    "left" : "if (a >= Long.MAX_VALUE / b)",
    "right" : "if (a >= Long.MAX_VALUE / b)",
    "info" : "IfStatement[29278-29456]:IfStatement[29278-29456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29307-29367]:Block[29307-29367]"
  }, {
    "left" : "ret = a * b;",
    "right" : "ret = a * b;",
    "info" : "ExpressionStatement[29333-29345]:ExpressionStatement[29333-29345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29373-29456]:Block[29373-29456]"
  }, {
    "left" : "throw new ArithmeticException(msg);",
    "right" : "throw new ArithmeticException(msg);",
    "info" : "ThrowStatement[29399-29434]:ThrowStatement[29399-29434]"
  }, {
    "left" : "if (b > 0)",
    "right" : "if (b > 0)",
    "info" : "IfStatement[29480-29880]:IfStatement[29480-29880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29491-29789]:Block[29491-29789]"
  }, {
    "left" : "if (Long.MIN_VALUE / b <= a)",
    "right" : "if (Long.MIN_VALUE / b <= a)",
    "info" : "IfStatement[29592-29771]:IfStatement[29592-29771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29621-29681]:Block[29621-29681]"
  }, {
    "left" : "ret = a * b;",
    "right" : "ret = a * b;",
    "info" : "ExpressionStatement[29647-29659]:ExpressionStatement[29647-29659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29687-29771]:Block[29687-29771]"
  }, {
    "left" : "throw new ArithmeticException(msg);",
    "right" : "throw new ArithmeticException(msg);",
    "info" : "ThrowStatement[29713-29748]:ThrowStatement[29713-29748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29795-29880]:Block[29795-29880]"
  }, {
    "left" : "ret = 0;",
    "right" : "ret = 0;",
    "info" : "ExpressionStatement[29854-29862]:ExpressionStatement[29854-29862]"
  }, {
    "left" : "if (a > 0)",
    "right" : "if (a > 0)",
    "info" : "IfStatement[29900-30324]:IfStatement[29900-30324]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29911-30245]:Block[29911-30245]"
  }, {
    "left" : "if (a <= Long.MAX_VALUE / b)",
    "right" : "if (a <= Long.MAX_VALUE / b)",
    "info" : "IfStatement[30069-30231]:IfStatement[30069-30231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30098-30150]:Block[30098-30150]"
  }, {
    "left" : "ret = a * b;",
    "right" : "ret = a * b;",
    "info" : "ExpressionStatement[30120-30132]:ExpressionStatement[30120-30132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30156-30231]:Block[30156-30231]"
  }, {
    "left" : "throw new ArithmeticException(msg);",
    "right" : "throw new ArithmeticException(msg);",
    "info" : "ThrowStatement[30178-30213]:ThrowStatement[30178-30213]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30251-30324]:Block[30251-30324]"
  }, {
    "left" : "ret = 0;",
    "right" : "ret = 0;",
    "info" : "ExpressionStatement[30302-30310]:ExpressionStatement[30302-30310]"
  }, {
    "left" : "return ret;",
    "right" : "return ret;",
    "info" : "ReturnStatement[30343-30354]:ReturnStatement[30343-30354]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31118-31124]:Modifier[31118-31124]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31125-31131]:Modifier[31125-31131]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[31132-31138]:PrimitiveType[31132-31138]"
  }, {
    "left" : "nextAfter",
    "right" : "nextAfter",
    "info" : "SimpleName[31139-31148]:SimpleName[31139-31148]"
  }, {
    "left" : "double d",
    "right" : "double d",
    "info" : "SingleVariableDeclaration[31149-31157]:SingleVariableDeclaration[31149-31157]"
  }, {
    "left" : "double direction",
    "right" : "double direction",
    "info" : "SingleVariableDeclaration[31159-31175]:SingleVariableDeclaration[31159-31175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31177-32750]:Block[31177-32750]"
  }, {
    "left" : "if (Double.isNaN(d) || Double.isInfinite(d))",
    "right" : "if (Double.isNaN(d) || Double.isInfinite(d))",
    "info" : "IfStatement[31240-31430]:IfStatement[31240-31430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31285-31322]:Block[31285-31322]"
  }, {
    "left" : "return d;",
    "right" : "return d;",
    "info" : "ReturnStatement[31303-31312]:ReturnStatement[31303-31312]"
  }, {
    "left" : "if (d == 0)",
    "right" : "if (d == 0)",
    "info" : "IfStatement[31328-31430]:IfStatement[31328-31430]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31340-31430]:Block[31340-31430]"
  }, {
    "left" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
    "right" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
    "info" : "ReturnStatement[31358-31420]:ReturnStatement[31358-31420]"
  }, {
    "left" : "long bits     = Double.doubleToLongBits(d);",
    "right" : "long bits     = Double.doubleToLongBits(d);",
    "info" : "VariableDeclarationStatement[31599-31642]:VariableDeclarationStatement[31599-31642]"
  }, {
    "left" : "long sign     = bits & 0x8000000000000000L;",
    "right" : "long sign     = bits & 0x8000000000000000L;",
    "info" : "VariableDeclarationStatement[31651-31694]:VariableDeclarationStatement[31651-31694]"
  }, {
    "left" : "long exponent = bits & 0x7ff0000000000000L;",
    "right" : "long exponent = bits & 0x7ff0000000000000L;",
    "info" : "VariableDeclarationStatement[31703-31746]:VariableDeclarationStatement[31703-31746]"
  }, {
    "left" : "long mantissa = bits & 0x000fffffffffffffL;",
    "right" : "long mantissa = bits & 0x000fffffffffffffL;",
    "info" : "VariableDeclarationStatement[31755-31798]:VariableDeclarationStatement[31755-31798]"
  }, {
    "left" : "if (d * (direction - d) >= 0)",
    "right" : "if (d * (direction - d) >= 0)",
    "info" : "IfStatement[31808-32743]:IfStatement[31808-32743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31838-32265]:Block[31838-32265]"
  }, {
    "left" : "if (mantissa == 0x000fffffffffffffL)",
    "right" : "if (mantissa == 0x000fffffffffffffL)",
    "info" : "IfStatement[31907-32255]:IfStatement[31907-32255]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31944-32100]:Block[31944-32100]"
  }, {
    "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
    "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
    "info" : "ReturnStatement[31970-32082]:ReturnStatement[31970-32082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32106-32255]:Block[32106-32255]"
  }, {
    "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
    "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
    "info" : "ReturnStatement[32132-32237]:ReturnStatement[32132-32237]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32271-32743]:Block[32271-32743]"
  }, {
    "left" : "if (mantissa == 0L)",
    "right" : "if (mantissa == 0L)",
    "info" : "IfStatement[32340-32733]:IfStatement[32340-32733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32360-32578]:Block[32360-32578]"
  }, {
    "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
    "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
    "info" : "ReturnStatement[32386-32560]:ReturnStatement[32386-32560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32584-32733]:Block[32584-32733]"
  }, {
    "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
    "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
    "info" : "ReturnStatement[32610-32715]:ReturnStatement[32610-32715]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[33077-33083]:Modifier[33077-33083]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33084-33090]:Modifier[33084-33090]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[33091-33097]:PrimitiveType[33091-33097]"
  }, {
    "left" : "scalb",
    "right" : "scalb",
    "info" : "SimpleName[33098-33103]:SimpleName[33098-33103]"
  }, {
    "left" : "final double d",
    "right" : "final double d",
    "info" : "SingleVariableDeclaration[33104-33118]:SingleVariableDeclaration[33104-33118]"
  }, {
    "left" : "final int scaleFactor",
    "right" : "final int scaleFactor",
    "info" : "SingleVariableDeclaration[33120-33141]:SingleVariableDeclaration[33120-33141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33143-33683]:Block[33143-33683]"
  }, {
    "left" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
    "right" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
    "info" : "IfStatement[33206-33296]:IfStatement[33206-33296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33263-33296]:Block[33263-33296]"
  }, {
    "left" : "return d;",
    "right" : "return d;",
    "info" : "ReturnStatement[33277-33286]:ReturnStatement[33277-33286]"
  }, {
    "left" : "final long bits     = Double.doubleToLongBits(d);",
    "right" : "final long bits     = Double.doubleToLongBits(d);",
    "info" : "VariableDeclarationStatement[33352-33401]:VariableDeclarationStatement[33352-33401]"
  }, {
    "left" : "final long exponent = bits & 0x7ff0000000000000L;",
    "right" : "final long exponent = bits & 0x7ff0000000000000L;",
    "info" : "VariableDeclarationStatement[33410-33459]:VariableDeclarationStatement[33410-33459]"
  }, {
    "left" : "final long rest     = bits & 0x800fffffffffffffL;",
    "right" : "final long rest     = bits & 0x800fffffffffffffL;",
    "info" : "VariableDeclarationStatement[33468-33517]:VariableDeclarationStatement[33468-33517]"
  }, {
    "left" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
    "right" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
    "info" : "VariableDeclarationStatement[33557-33627]:VariableDeclarationStatement[33557-33627]"
  }, {
    "left" : "return Double.longBitsToDouble(newBits);",
    "right" : "return Double.longBitsToDouble(newBits);",
    "info" : "ReturnStatement[33636-33676]:ReturnStatement[33636-33676]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[34722-34728]:Modifier[34722-34728]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34729-34735]:Modifier[34729-34735]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[34736-34742]:PrimitiveType[34736-34742]"
  }, {
    "left" : "normalizeAngle",
    "right" : "normalizeAngle",
    "info" : "SimpleName[34743-34757]:SimpleName[34743-34757]"
  }, {
    "left" : "double a",
    "right" : "double a",
    "info" : "SingleVariableDeclaration[34758-34766]:SingleVariableDeclaration[34758-34766]"
  }, {
    "left" : "double center",
    "right" : "double center",
    "info" : "SingleVariableDeclaration[34768-34781]:SingleVariableDeclaration[34768-34781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34783-34865]:Block[34783-34865]"
  }, {
    "left" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
    "right" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
    "info" : "ReturnStatement[34794-34858]:ReturnStatement[34794-34858]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[35848-35854]:Modifier[35848-35854]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35855-35861]:Modifier[35855-35861]"
  }, {
    "left" : "double[]",
    "right" : "double[]",
    "info" : "ArrayType[35862-35870]:ArrayType[35862-35870]"
  }, {
    "left" : "normalizeArray",
    "right" : "normalizeArray",
    "info" : "SimpleName[35871-35885]:SimpleName[35871-35885]"
  }, {
    "left" : "double[] values",
    "right" : "double[] values",
    "info" : "SingleVariableDeclaration[35886-35901]:SingleVariableDeclaration[35886-35901]"
  }, {
    "left" : "double normalizedSum",
    "right" : "double normalizedSum",
    "info" : "SingleVariableDeclaration[35903-35923]:SingleVariableDeclaration[35903-35923]"
  }, {
    "left" : "ArithmeticException",
    "right" : "ArithmeticException",
    "info" : "SimpleType[35939-35958]:SimpleType[35939-35958]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[35960-35984]:SimpleType[35960-35984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35985-37247]:Block[35985-37247]"
  }, {
    "left" : "if (Double.isInfinite(normalizedSum))",
    "right" : "if (Double.isInfinite(normalizedSum))",
    "info" : "IfStatement[35996-36181]:IfStatement[35996-36181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36034-36181]:Block[36034-36181]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                     \"Cannot normalize to an infinite value\");",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                     \"Cannot normalize to an infinite value\");",
    "info" : "ThrowStatement[36049-36170]:ThrowStatement[36049-36170]"
  }, {
    "left" : "if (Double.isNaN(normalizedSum))",
    "right" : "if (Double.isNaN(normalizedSum))",
    "info" : "IfStatement[36191-36357]:IfStatement[36191-36357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36224-36357]:Block[36224-36357]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                     \"Cannot normalize to NaN\");",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                     \"Cannot normalize to NaN\");",
    "info" : "ThrowStatement[36239-36346]:ThrowStatement[36239-36346]"
  }, {
    "left" : "double sum = 0d;",
    "right" : "double sum = 0d;",
    "info" : "VariableDeclarationStatement[36367-36383]:VariableDeclarationStatement[36367-36383]"
  }, {
    "left" : "final int len = values.length;",
    "right" : "final int len = values.length;",
    "info" : "VariableDeclarationStatement[36393-36423]:VariableDeclarationStatement[36393-36423]"
  }, {
    "left" : "double[] out = new double[len];",
    "right" : "double[] out = new double[len];",
    "info" : "VariableDeclarationStatement[36433-36464]:VariableDeclarationStatement[36433-36464]"
  }, {
    "left" : "for (int i = 0; i < len; i++)",
    "right" : "for (int i = 0; i < len; i++)",
    "info" : "ForStatement[36474-36842]:ForStatement[36474-36842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36504-36842]:Block[36504-36842]"
  }, {
    "left" : "if (Double.isInfinite(values[i]))",
    "right" : "if (Double.isInfinite(values[i]))",
    "info" : "IfStatement[36519-36736]:IfStatement[36519-36736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36553-36736]:Block[36553-36736]"
  }, {
    "left" : "throw MathRuntimeException.createArithmeticException(\n                         \"Array contains an infinite element, {0} at index {1}\", values[i], i);",
    "right" : "throw MathRuntimeException.createArithmeticException(\n                         \"Array contains an infinite element, {0} at index {1}\", values[i], i);",
    "info" : "ThrowStatement[36572-36721]:ThrowStatement[36572-36721]"
  }, {
    "left" : "if (!Double.isNaN(values[i]))",
    "right" : "if (!Double.isNaN(values[i]))",
    "info" : "IfStatement[36750-36831]:IfStatement[36750-36831]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36780-36831]:Block[36780-36831]"
  }, {
    "left" : "sum += values[i];",
    "right" : "sum += values[i];",
    "info" : "ExpressionStatement[36799-36816]:ExpressionStatement[36799-36816]"
  }, {
    "left" : "if (sum == 0)",
    "right" : "if (sum == 0)",
    "info" : "IfStatement[36852-36989]:IfStatement[36852-36989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36866-36989]:Block[36866-36989]"
  }, {
    "left" : "throw MathRuntimeException.createArithmeticException(\n                     \"Array sums to zero\");",
    "right" : "throw MathRuntimeException.createArithmeticException(\n                     \"Array sums to zero\");",
    "info" : "ThrowStatement[36881-36978]:ThrowStatement[36881-36978]"
  }, {
    "left" : "for (int i = 0; i < len; i++)",
    "right" : "for (int i = 0; i < len; i++)",
    "info" : "ForStatement[36999-37219]:ForStatement[36999-37219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37029-37219]:Block[37029-37219]"
  }, {
    "left" : "if (Double.isNaN(values[i]))",
    "right" : "if (Double.isNaN(values[i]))",
    "info" : "IfStatement[37044-37208]:IfStatement[37044-37208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37073-37127]:Block[37073-37127]"
  }, {
    "left" : "out[i] = Double.NaN;",
    "right" : "out[i] = Double.NaN;",
    "info" : "ExpressionStatement[37092-37112]:ExpressionStatement[37092-37112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37133-37208]:Block[37133-37208]"
  }, {
    "left" : "out[i] = values[i] * normalizedSum / sum;",
    "right" : "out[i] = values[i] * normalizedSum / sum;",
    "info" : "ExpressionStatement[37152-37193]:ExpressionStatement[37152-37193]"
  }, {
    "left" : "return out;",
    "right" : "return out;",
    "info" : "ReturnStatement[37229-37240]:ReturnStatement[37229-37240]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37591-37597]:Modifier[37591-37597]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37598-37604]:Modifier[37598-37604]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[37605-37611]:PrimitiveType[37605-37611]"
  }, {
    "left" : "round",
    "right" : "round",
    "info" : "SimpleName[37612-37617]:SimpleName[37612-37617]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[37618-37626]:SingleVariableDeclaration[37618-37626]"
  }, {
    "left" : "int scale",
    "right" : "int scale",
    "info" : "SingleVariableDeclaration[37628-37637]:SingleVariableDeclaration[37628-37637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37639-37704]:Block[37639-37704]"
  }, {
    "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
    "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
    "info" : "ReturnStatement[37649-37698]:ReturnStatement[37649-37698]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38175-38181]:Modifier[38175-38181]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38182-38188]:Modifier[38182-38188]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[38189-38195]:PrimitiveType[38189-38195]"
  }, {
    "left" : "round",
    "right" : "round",
    "info" : "SimpleName[38196-38201]:SimpleName[38196-38201]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[38202-38210]:SingleVariableDeclaration[38202-38210]"
  }, {
    "left" : "int scale",
    "right" : "int scale",
    "info" : "SingleVariableDeclaration[38212-38221]:SingleVariableDeclaration[38212-38221]"
  }, {
    "left" : "int roundingMethod",
    "right" : "int roundingMethod",
    "info" : "SingleVariableDeclaration[38223-38241]:SingleVariableDeclaration[38223-38241]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38243-38618]:Block[38243-38618]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[38253-38612]:TryStatement[38253-38612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38257-38431]:Block[38257-38431]"
  }, {
    "left" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
    "right" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
    "info" : "ReturnStatement[38271-38421]:ReturnStatement[38271-38421]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38465-38612]:Block[38465-38612]"
  }, {
    "left" : "if (Double.isInfinite(x))",
    "right" : "if (Double.isInfinite(x))",
    "info" : "IfStatement[38479-38602]:IfStatement[38479-38602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38505-38546]:Block[38505-38546]"
  }, {
    "left" : "return x;",
    "right" : "return x;",
    "info" : "ReturnStatement[38523-38532]:ReturnStatement[38523-38532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38552-38602]:Block[38552-38602]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[38570-38588]:ReturnStatement[38570-38588]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[38963-38969]:Modifier[38963-38969]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38970-38976]:Modifier[38970-38976]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[38977-38982]:PrimitiveType[38977-38982]"
  }, {
    "left" : "round",
    "right" : "round",
    "info" : "SimpleName[38983-38988]:SimpleName[38983-38988]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[38989-38996]:SingleVariableDeclaration[38989-38996]"
  }, {
    "left" : "int scale",
    "right" : "int scale",
    "info" : "SingleVariableDeclaration[38998-39007]:SingleVariableDeclaration[38998-39007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39009-39074]:Block[39009-39074]"
  }, {
    "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
    "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
    "info" : "ReturnStatement[39019-39068]:ReturnStatement[39019-39068]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39545-39551]:Modifier[39545-39551]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39552-39558]:Modifier[39552-39558]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[39559-39564]:PrimitiveType[39559-39564]"
  }, {
    "left" : "round",
    "right" : "round",
    "info" : "SimpleName[39565-39570]:SimpleName[39565-39570]"
  }, {
    "left" : "float x",
    "right" : "float x",
    "info" : "SingleVariableDeclaration[39571-39578]:SingleVariableDeclaration[39571-39578]"
  }, {
    "left" : "int scale",
    "right" : "int scale",
    "info" : "SingleVariableDeclaration[39580-39589]:SingleVariableDeclaration[39580-39589]"
  }, {
    "left" : "int roundingMethod",
    "right" : "int roundingMethod",
    "info" : "SingleVariableDeclaration[39591-39609]:SingleVariableDeclaration[39591-39609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39611-39794]:Block[39611-39794]"
  }, {
    "left" : "float sign = indicator(x);",
    "right" : "float sign = indicator(x);",
    "info" : "VariableDeclarationStatement[39621-39647]:VariableDeclarationStatement[39621-39647]"
  }, {
    "left" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
    "right" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
    "info" : "VariableDeclarationStatement[39656-39708]:VariableDeclarationStatement[39656-39708]"
  }, {
    "left" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
    "right" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
    "info" : "ReturnStatement[39717-39788]:ReturnStatement[39717-39788]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40265-40272]:Modifier[40265-40272]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[40273-40279]:Modifier[40273-40279]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[40280-40286]:PrimitiveType[40280-40286]"
  }, {
    "left" : "roundUnscaled",
    "right" : "roundUnscaled",
    "info" : "SimpleName[40287-40300]:SimpleName[40287-40300]"
  }, {
    "left" : "double unscaled",
    "right" : "double unscaled",
    "info" : "SingleVariableDeclaration[40301-40316]:SingleVariableDeclaration[40301-40316]"
  }, {
    "left" : "double sign",
    "right" : "double sign",
    "info" : "SingleVariableDeclaration[40318-40329]:SingleVariableDeclaration[40318-40329]"
  }, {
    "left" : "int roundingMethod",
    "right" : "int roundingMethod",
    "info" : "SingleVariableDeclaration[40339-40357]:SingleVariableDeclaration[40339-40357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40359-43786]:Block[40359-43786]"
  }, {
    "left" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),\" +\n                  \" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\",\n                  roundingMethod,\n                  \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                  \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n                  \"ROUND_FLOOR\",       BigDecimal.ROUND_FLOOR,\n                  \"ROUND_HALF_DOWN\",   BigDecimal.ROUND_HALF_DOWN,\n                  \"ROUND_HALF_EVEN\",   BigDecimal.ROUND_HALF_EVEN,\n                  \"ROUND_HALF_UP\",     BigDecimal.ROUND_HALF_UP,\n                  \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY,\n                  \"ROUND_UP\",          BigDecimal.ROUND_UP);\n        }",
    "right" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),\" +\n                  \" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\",\n                  roundingMethod,\n                  \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                  \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n                  \"ROUND_FLOOR\",       BigDecimal.ROUND_FLOOR,\n                  \"ROUND_HALF_DOWN\",   BigDecimal.ROUND_HALF_DOWN,\n                  \"ROUND_HALF_EVEN\",   BigDecimal.ROUND_HALF_EVEN,\n                  \"ROUND_HALF_UP\",     BigDecimal.ROUND_HALF_UP,\n                  \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY,\n                  \"ROUND_UP\",          BigDecimal.ROUND_UP);\n        }",
    "info" : "SwitchStatement[40369-43755]:SwitchStatement[40369-43755]"
  }, {
    "left" : "case BigDecimal.ROUND_CEILING :",
    "right" : "case BigDecimal.ROUND_CEILING :",
    "info" : "SwitchCase[40403-40434]:SwitchCase[40403-40434]"
  }, {
    "left" : "if (sign == -1)",
    "right" : "if (sign == -1)",
    "info" : "IfStatement[40447-40670]:IfStatement[40447-40670]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40463-40564]:Block[40463-40564]"
  }, {
    "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
    "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
    "info" : "ExpressionStatement[40481-40550]:ExpressionStatement[40481-40550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40570-40670]:Block[40570-40670]"
  }, {
    "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
    "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
    "info" : "ExpressionStatement[40588-40656]:ExpressionStatement[40588-40656]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[40683-40689]:BreakStatement[40683-40689]"
  }, {
    "left" : "case BigDecimal.ROUND_DOWN :",
    "right" : "case BigDecimal.ROUND_DOWN :",
    "info" : "SwitchCase[40698-40726]:SwitchCase[40698-40726]"
  }, {
    "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
    "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
    "info" : "ExpressionStatement[40739-40808]:ExpressionStatement[40739-40808]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[40821-40827]:BreakStatement[40821-40827]"
  }, {
    "left" : "case BigDecimal.ROUND_FLOOR :",
    "right" : "case BigDecimal.ROUND_FLOOR :",
    "info" : "SwitchCase[40836-40865]:SwitchCase[40836-40865]"
  }, {
    "left" : "if (sign == -1)",
    "right" : "if (sign == -1)",
    "info" : "IfStatement[40878-41101]:IfStatement[40878-41101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40894-40994]:Block[40894-40994]"
  }, {
    "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
    "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
    "info" : "ExpressionStatement[40912-40980]:ExpressionStatement[40912-40980]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41000-41101]:Block[41000-41101]"
  }, {
    "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
    "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
    "info" : "ExpressionStatement[41018-41087]:ExpressionStatement[41018-41087]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41114-41120]:BreakStatement[41114-41120]"
  }, {
    "left" : "case BigDecimal.ROUND_HALF_DOWN :",
    "right" : "case BigDecimal.ROUND_HALF_DOWN :",
    "info" : "SwitchCase[41129-41162]:SwitchCase[41129-41162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41163-41492]:Block[41163-41492]"
  }, {
    "left" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
    "right" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
    "info" : "ExpressionStatement[41177-41234]:ExpressionStatement[41177-41234]"
  }, {
    "left" : "double fraction = unscaled - Math.floor(unscaled);",
    "right" : "double fraction = unscaled - Math.floor(unscaled);",
    "info" : "VariableDeclarationStatement[41247-41297]:VariableDeclarationStatement[41247-41297]"
  }, {
    "left" : "if (fraction > 0.5)",
    "right" : "if (fraction > 0.5)",
    "info" : "IfStatement[41310-41463]:IfStatement[41310-41463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41330-41393]:Block[41330-41393]"
  }, {
    "left" : "unscaled = Math.ceil(unscaled);",
    "right" : "unscaled = Math.ceil(unscaled);",
    "info" : "ExpressionStatement[41348-41379]:ExpressionStatement[41348-41379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41399-41463]:Block[41399-41463]"
  }, {
    "left" : "unscaled = Math.floor(unscaled);",
    "right" : "unscaled = Math.floor(unscaled);",
    "info" : "ExpressionStatement[41417-41449]:ExpressionStatement[41417-41449]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[41476-41482]:BreakStatement[41476-41482]"
  }, {
    "left" : "case BigDecimal.ROUND_HALF_EVEN :",
    "right" : "case BigDecimal.ROUND_HALF_EVEN :",
    "info" : "SwitchCase[41501-41534]:SwitchCase[41501-41534]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41535-42206]:Block[41535-42206]"
  }, {
    "left" : "double fraction = unscaled - Math.floor(unscaled);",
    "right" : "double fraction = unscaled - Math.floor(unscaled);",
    "info" : "VariableDeclarationStatement[41549-41599]:VariableDeclarationStatement[41549-41599]"
  }, {
    "left" : "if (fraction > 0.5)",
    "right" : "if (fraction > 0.5)",
    "info" : "IfStatement[41612-42177]:IfStatement[41612-42177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41632-41695]:Block[41632-41695]"
  }, {
    "left" : "unscaled = Math.ceil(unscaled);",
    "right" : "unscaled = Math.ceil(unscaled);",
    "info" : "ExpressionStatement[41650-41681]:ExpressionStatement[41650-41681]"
  }, {
    "left" : "if (fraction < 0.5)",
    "right" : "if (fraction < 0.5)",
    "info" : "IfStatement[41701-42177]:IfStatement[41701-42177]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41721-41785]:Block[41721-41785]"
  }, {
    "left" : "unscaled = Math.floor(unscaled);",
    "right" : "unscaled = Math.floor(unscaled);",
    "info" : "ExpressionStatement[41739-41771]:ExpressionStatement[41739-41771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41791-42177]:Block[41791-42177]"
  }, {
    "left" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
    "right" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
    "info" : "IfStatement[41904-42163]:IfStatement[41904-42163]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41999-42079]:Block[41999-42079]"
  }, {
    "left" : "unscaled = Math.floor(unscaled);",
    "right" : "unscaled = Math.floor(unscaled);",
    "info" : "ExpressionStatement[42029-42061]:ExpressionStatement[42029-42061]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42085-42163]:Block[42085-42163]"
  }, {
    "left" : "unscaled = Math.ceil(unscaled);",
    "right" : "unscaled = Math.ceil(unscaled);",
    "info" : "ExpressionStatement[42114-42145]:ExpressionStatement[42114-42145]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42190-42196]:BreakStatement[42190-42196]"
  }, {
    "left" : "case BigDecimal.ROUND_HALF_UP :",
    "right" : "case BigDecimal.ROUND_HALF_UP :",
    "info" : "SwitchCase[42215-42246]:SwitchCase[42215-42246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42247-42577]:Block[42247-42577]"
  }, {
    "left" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
    "right" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
    "info" : "ExpressionStatement[42261-42318]:ExpressionStatement[42261-42318]"
  }, {
    "left" : "double fraction = unscaled - Math.floor(unscaled);",
    "right" : "double fraction = unscaled - Math.floor(unscaled);",
    "info" : "VariableDeclarationStatement[42331-42381]:VariableDeclarationStatement[42331-42381]"
  }, {
    "left" : "if (fraction >= 0.5)",
    "right" : "if (fraction >= 0.5)",
    "info" : "IfStatement[42394-42548]:IfStatement[42394-42548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42415-42478]:Block[42415-42478]"
  }, {
    "left" : "unscaled = Math.ceil(unscaled);",
    "right" : "unscaled = Math.ceil(unscaled);",
    "info" : "ExpressionStatement[42433-42464]:ExpressionStatement[42433-42464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42484-42548]:Block[42484-42548]"
  }, {
    "left" : "unscaled = Math.floor(unscaled);",
    "right" : "unscaled = Math.floor(unscaled);",
    "info" : "ExpressionStatement[42502-42534]:ExpressionStatement[42502-42534]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42561-42567]:BreakStatement[42561-42567]"
  }, {
    "left" : "case BigDecimal.ROUND_UNNECESSARY :",
    "right" : "case BigDecimal.ROUND_UNNECESSARY :",
    "info" : "SwitchCase[42586-42621]:SwitchCase[42586-42621]"
  }, {
    "left" : "if (unscaled != Math.floor(unscaled))",
    "right" : "if (unscaled != Math.floor(unscaled))",
    "info" : "IfStatement[42634-42766]:IfStatement[42634-42766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42672-42766]:Block[42672-42766]"
  }, {
    "left" : "throw new ArithmeticException(\"Inexact result from rounding\");",
    "right" : "throw new ArithmeticException(\"Inexact result from rounding\");",
    "info" : "ThrowStatement[42690-42752]:ThrowStatement[42690-42752]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42779-42785]:BreakStatement[42779-42785]"
  }, {
    "left" : "case BigDecimal.ROUND_UP :",
    "right" : "case BigDecimal.ROUND_UP :",
    "info" : "SwitchCase[42794-42820]:SwitchCase[42794-42820]"
  }, {
    "left" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
    "right" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
    "info" : "ExpressionStatement[42833-42902]:ExpressionStatement[42833-42902]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[42915-42921]:BreakStatement[42915-42921]"
  }, {
    "left" : "default :",
    "right" : "default :",
    "info" : "SwitchCase[42930-42939]:SwitchCase[42930-42939]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),\" +\n                  \" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\",\n                  roundingMethod,\n                  \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                  \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n                  \"ROUND_FLOOR\",       BigDecimal.ROUND_FLOOR,\n                  \"ROUND_HALF_DOWN\",   BigDecimal.ROUND_HALF_DOWN,\n                  \"ROUND_HALF_EVEN\",   BigDecimal.ROUND_HALF_EVEN,\n                  \"ROUND_HALF_UP\",     BigDecimal.ROUND_HALF_UP,\n                  \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY,\n                  \"ROUND_UP\",          BigDecimal.ROUND_UP);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                  \"invalid rounding method {0}, valid methods: {1} ({2}), {3} ({4}),\" +\n                  \" {5} ({6}), {7} ({8}), {9} ({10}), {11} ({12}), {13} ({14}), {15} ({16})\",\n                  roundingMethod,\n                  \"ROUND_CEILING\",     BigDecimal.ROUND_CEILING,\n                  \"ROUND_DOWN\",        BigDecimal.ROUND_DOWN,\n                  \"ROUND_FLOOR\",       BigDecimal.ROUND_FLOOR,\n                  \"ROUND_HALF_DOWN\",   BigDecimal.ROUND_HALF_DOWN,\n                  \"ROUND_HALF_EVEN\",   BigDecimal.ROUND_HALF_EVEN,\n                  \"ROUND_HALF_UP\",     BigDecimal.ROUND_HALF_UP,\n                  \"ROUND_UNNECESSARY\", BigDecimal.ROUND_UNNECESSARY,\n                  \"ROUND_UP\",          BigDecimal.ROUND_UP);",
    "info" : "ThrowStatement[42952-43745]:ThrowStatement[42952-43745]"
  }, {
    "left" : "return unscaled;",
    "right" : "return unscaled;",
    "info" : "ReturnStatement[43764-43780]:ReturnStatement[43764-43780]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[44180-44186]:Modifier[44180-44186]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44187-44193]:Modifier[44187-44193]"
  }, {
    "left" : "byte",
    "right" : "byte",
    "info" : "PrimitiveType[44194-44198]:PrimitiveType[44194-44198]"
  }, {
    "left" : "sign",
    "right" : "sign",
    "info" : "SimpleName[44199-44203]:SimpleName[44199-44203]"
  }, {
    "left" : "final byte x",
    "right" : "final byte x",
    "info" : "SingleVariableDeclaration[44204-44216]:SingleVariableDeclaration[44204-44216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44218-44277]:Block[44218-44277]"
  }, {
    "left" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
    "right" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
    "info" : "ReturnStatement[44228-44271]:ReturnStatement[44228-44271]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[44816-44822]:Modifier[44816-44822]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44823-44829]:Modifier[44823-44829]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[44830-44836]:PrimitiveType[44830-44836]"
  }, {
    "left" : "sign",
    "right" : "sign",
    "info" : "SimpleName[44837-44841]:SimpleName[44837-44841]"
  }, {
    "left" : "final double x",
    "right" : "final double x",
    "info" : "SingleVariableDeclaration[44842-44856]:SingleVariableDeclaration[44842-44856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44858-44995]:Block[44858-44995]"
  }, {
    "left" : "if (Double.isNaN(x))",
    "right" : "if (Double.isNaN(x))",
    "info" : "IfStatement[44868-44931]:IfStatement[44868-44931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44889-44931]:Block[44889-44931]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[44903-44921]:ReturnStatement[44903-44921]"
  }, {
    "left" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
    "right" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
    "info" : "ReturnStatement[44940-44989]:ReturnStatement[44940-44989]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45436-45442]:Modifier[45436-45442]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45443-45449]:Modifier[45443-45449]"
  }, {
    "left" : "float",
    "right" : "float",
    "info" : "PrimitiveType[45450-45455]:PrimitiveType[45450-45455]"
  }, {
    "left" : "sign",
    "right" : "sign",
    "info" : "SimpleName[45456-45460]:SimpleName[45456-45460]"
  }, {
    "left" : "final float x",
    "right" : "final float x",
    "info" : "SingleVariableDeclaration[45461-45474]:SingleVariableDeclaration[45461-45474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45476-45616]:Block[45476-45616]"
  }, {
    "left" : "if (Float.isNaN(x))",
    "right" : "if (Float.isNaN(x))",
    "info" : "IfStatement[45486-45547]:IfStatement[45486-45547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45506-45547]:Block[45506-45547]"
  }, {
    "left" : "return Float.NaN;",
    "right" : "return Float.NaN;",
    "info" : "ReturnStatement[45520-45537]:ReturnStatement[45520-45537]"
  }, {
    "left" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
    "right" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
    "info" : "ReturnStatement[45556-45610]:ReturnStatement[45556-45610]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[45961-45967]:Modifier[45961-45967]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45968-45974]:Modifier[45968-45974]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[45975-45978]:PrimitiveType[45975-45978]"
  }, {
    "left" : "sign",
    "right" : "sign",
    "info" : "SimpleName[45979-45983]:SimpleName[45979-45983]"
  }, {
    "left" : "final int x",
    "right" : "final int x",
    "info" : "SingleVariableDeclaration[45984-45995]:SingleVariableDeclaration[45984-45995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45997-46052]:Block[45997-46052]"
  }, {
    "left" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
    "right" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
    "info" : "ReturnStatement[46007-46046]:ReturnStatement[46007-46046]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46404-46410]:Modifier[46404-46410]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46411-46417]:Modifier[46411-46417]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[46418-46422]:PrimitiveType[46418-46422]"
  }, {
    "left" : "sign",
    "right" : "sign",
    "info" : "SimpleName[46423-46427]:SimpleName[46423-46427]"
  }, {
    "left" : "final long x",
    "right" : "final long x",
    "info" : "SingleVariableDeclaration[46428-46440]:SingleVariableDeclaration[46428-46440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46442-46502]:Block[46442-46502]"
  }, {
    "left" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
    "right" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
    "info" : "ReturnStatement[46452-46496]:ReturnStatement[46452-46496]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46920-46926]:Modifier[46920-46926]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46927-46933]:Modifier[46927-46933]"
  }, {
    "left" : "short",
    "right" : "short",
    "info" : "PrimitiveType[46934-46939]:PrimitiveType[46934-46939]"
  }, {
    "left" : "sign",
    "right" : "sign",
    "info" : "SimpleName[46940-46944]:SimpleName[46940-46944]"
  }, {
    "left" : "final short x",
    "right" : "final short x",
    "info" : "SingleVariableDeclaration[46945-46958]:SingleVariableDeclaration[46945-46958]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46960-47019]:Block[46960-47019]"
  }, {
    "left" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
    "right" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
    "info" : "ReturnStatement[46970-47013]:ReturnStatement[46970-47013]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47263-47269]:Modifier[47263-47269]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47270-47276]:Modifier[47270-47276]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[47277-47283]:PrimitiveType[47277-47283]"
  }, {
    "left" : "sinh",
    "right" : "sinh",
    "info" : "SimpleName[47284-47288]:SimpleName[47284-47288]"
  }, {
    "left" : "double x",
    "right" : "double x",
    "info" : "SingleVariableDeclaration[47289-47297]:SingleVariableDeclaration[47289-47297]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47299-47357]:Block[47299-47357]"
  }, {
    "left" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
    "right" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
    "info" : "ReturnStatement[47309-47351]:ReturnStatement[47309-47351]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[47660-47666]:Modifier[47660-47666]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47667-47673]:Modifier[47667-47673]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[47674-47677]:PrimitiveType[47674-47677]"
  }, {
    "left" : "subAndCheck",
    "right" : "subAndCheck",
    "info" : "SimpleName[47678-47689]:SimpleName[47678-47689]"
  }, {
    "left" : "int x",
    "right" : "int x",
    "info" : "SingleVariableDeclaration[47690-47695]:SingleVariableDeclaration[47690-47695]"
  }, {
    "left" : "int y",
    "right" : "int y",
    "info" : "SingleVariableDeclaration[47697-47702]:SingleVariableDeclaration[47697-47702]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47704-47907]:Block[47704-47907]"
  }, {
    "left" : "long s = (long)x - (long)y;",
    "right" : "long s = (long)x - (long)y;",
    "info" : "VariableDeclarationStatement[47714-47741]:VariableDeclarationStatement[47714-47741]"
  }, {
    "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
    "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
    "info" : "IfStatement[47750-47878]:IfStatement[47750-47878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47802-47878]:Block[47802-47878]"
  }, {
    "left" : "throw new ArithmeticException(\"overflow: subtract\");",
    "right" : "throw new ArithmeticException(\"overflow: subtract\");",
    "info" : "ThrowStatement[47816-47868]:ThrowStatement[47816-47868]"
  }, {
    "left" : "return (int)s;",
    "right" : "return (int)s;",
    "info" : "ReturnStatement[47887-47901]:ReturnStatement[47887-47901]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48214-48220]:Modifier[48214-48220]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48221-48227]:Modifier[48221-48227]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[48228-48232]:PrimitiveType[48228-48232]"
  }, {
    "left" : "subAndCheck",
    "right" : "subAndCheck",
    "info" : "SimpleName[48233-48244]:SimpleName[48233-48244]"
  }, {
    "left" : "long a",
    "right" : "long a",
    "info" : "SingleVariableDeclaration[48245-48251]:SingleVariableDeclaration[48245-48251]"
  }, {
    "left" : "long b",
    "right" : "long b",
    "info" : "SingleVariableDeclaration[48253-48259]:SingleVariableDeclaration[48253-48259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48261-48631]:Block[48261-48631]"
  }, {
    "left" : "long ret;",
    "right" : "long ret;",
    "info" : "VariableDeclarationStatement[48271-48280]:VariableDeclarationStatement[48271-48280]"
  }, {
    "left" : "String msg = \"overflow: subtract\";",
    "right" : "String msg = \"overflow: subtract\";",
    "info" : "VariableDeclarationStatement[48289-48323]:VariableDeclarationStatement[48289-48323]"
  }, {
    "left" : "if (b == Long.MIN_VALUE)",
    "right" : "if (b == Long.MIN_VALUE)",
    "info" : "IfStatement[48332-48605]:IfStatement[48332-48605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48357-48509]:Block[48357-48509]"
  }, {
    "left" : "if (a < 0)",
    "right" : "if (a < 0)",
    "info" : "IfStatement[48371-48499]:IfStatement[48371-48499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48382-48426]:Block[48382-48426]"
  }, {
    "left" : "ret = a - b;",
    "right" : "ret = a - b;",
    "info" : "ExpressionStatement[48400-48412]:ExpressionStatement[48400-48412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48432-48499]:Block[48432-48499]"
  }, {
    "left" : "throw new ArithmeticException(msg);",
    "right" : "throw new ArithmeticException(msg);",
    "info" : "ThrowStatement[48450-48485]:ThrowStatement[48450-48485]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48515-48605]:Block[48515-48605]"
  }, {
    "left" : "ret = addAndCheck(a, -b, msg);",
    "right" : "ret = addAndCheck(a, -b, msg);",
    "info" : "ExpressionStatement[48565-48595]:ExpressionStatement[48565-48595]"
  }, {
    "left" : "return ret;",
    "right" : "return ret;",
    "info" : "ReturnStatement[48614-48625]:ReturnStatement[48614-48625]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[48863-48869]:Modifier[48863-48869]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48870-48876]:Modifier[48870-48876]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[48877-48880]:PrimitiveType[48877-48880]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[48881-48884]:SimpleName[48881-48884]"
  }, {
    "left" : "final int k",
    "right" : "final int k",
    "info" : "SingleVariableDeclaration[48885-48896]:SingleVariableDeclaration[48885-48896]"
  }, {
    "left" : "int e",
    "right" : "int e",
    "info" : "SingleVariableDeclaration[48898-48903]:SingleVariableDeclaration[48898-48903]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[48920-48944]:SimpleType[48920-48944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48945-49394]:Block[48945-49394]"
  }, {
    "left" : "if (e < 0)",
    "right" : "if (e < 0)",
    "info" : "IfStatement[48956-49152]:IfStatement[48956-49152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48967-49152]:Block[48967-49152]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "info" : "ThrowStatement[48981-49142]:ThrowStatement[48981-49142]"
  }, {
    "left" : "int result = 1;",
    "right" : "int result = 1;",
    "info" : "VariableDeclarationStatement[49162-49177]:VariableDeclarationStatement[49162-49177]"
  }, {
    "left" : "int k2p    = k;",
    "right" : "int k2p    = k;",
    "info" : "VariableDeclarationStatement[49186-49201]:VariableDeclarationStatement[49186-49201]"
  }, {
    "left" : "while (e != 0)",
    "right" : "while (e != 0)",
    "info" : "WhileStatement[49210-49363]:WhileStatement[49210-49363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49225-49363]:Block[49225-49363]"
  }, {
    "left" : "if ((e & 0x1) != 0)",
    "right" : "if ((e & 0x1) != 0)",
    "info" : "IfStatement[49239-49305]:IfStatement[49239-49305]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49259-49305]:Block[49259-49305]"
  }, {
    "left" : "result *= k2p;",
    "right" : "result *= k2p;",
    "info" : "ExpressionStatement[49277-49291]:ExpressionStatement[49277-49291]"
  }, {
    "left" : "k2p *= k2p;",
    "right" : "k2p *= k2p;",
    "info" : "ExpressionStatement[49318-49329]:ExpressionStatement[49318-49329]"
  }, {
    "left" : "e = e >> 1;",
    "right" : "e = e >> 1;",
    "info" : "ExpressionStatement[49342-49353]:ExpressionStatement[49342-49353]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[49373-49387]:ReturnStatement[49373-49387]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[49626-49632]:Modifier[49626-49632]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[49633-49639]:Modifier[49633-49639]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[49640-49643]:PrimitiveType[49640-49643]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[49644-49647]:SimpleName[49644-49647]"
  }, {
    "left" : "final int k",
    "right" : "final int k",
    "info" : "SingleVariableDeclaration[49648-49659]:SingleVariableDeclaration[49648-49659]"
  }, {
    "left" : "long e",
    "right" : "long e",
    "info" : "SingleVariableDeclaration[49661-49667]:SingleVariableDeclaration[49661-49667]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[49684-49708]:SimpleType[49684-49708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49709-50158]:Block[49709-50158]"
  }, {
    "left" : "if (e < 0)",
    "right" : "if (e < 0)",
    "info" : "IfStatement[49720-49916]:IfStatement[49720-49916]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49731-49916]:Block[49731-49916]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "info" : "ThrowStatement[49745-49906]:ThrowStatement[49745-49906]"
  }, {
    "left" : "int result = 1;",
    "right" : "int result = 1;",
    "info" : "VariableDeclarationStatement[49926-49941]:VariableDeclarationStatement[49926-49941]"
  }, {
    "left" : "int k2p    = k;",
    "right" : "int k2p    = k;",
    "info" : "VariableDeclarationStatement[49950-49965]:VariableDeclarationStatement[49950-49965]"
  }, {
    "left" : "while (e != 0)",
    "right" : "while (e != 0)",
    "info" : "WhileStatement[49974-50127]:WhileStatement[49974-50127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49989-50127]:Block[49989-50127]"
  }, {
    "left" : "if ((e & 0x1) != 0)",
    "right" : "if ((e & 0x1) != 0)",
    "info" : "IfStatement[50003-50069]:IfStatement[50003-50069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50023-50069]:Block[50023-50069]"
  }, {
    "left" : "result *= k2p;",
    "right" : "result *= k2p;",
    "info" : "ExpressionStatement[50041-50055]:ExpressionStatement[50041-50055]"
  }, {
    "left" : "k2p *= k2p;",
    "right" : "k2p *= k2p;",
    "info" : "ExpressionStatement[50082-50093]:ExpressionStatement[50082-50093]"
  }, {
    "left" : "e = e >> 1;",
    "right" : "e = e >> 1;",
    "info" : "ExpressionStatement[50106-50117]:ExpressionStatement[50106-50117]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[50137-50151]:ReturnStatement[50137-50151]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50390-50396]:Modifier[50390-50396]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50397-50403]:Modifier[50397-50403]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[50404-50408]:PrimitiveType[50404-50408]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[50409-50412]:SimpleName[50409-50412]"
  }, {
    "left" : "final long k",
    "right" : "final long k",
    "info" : "SingleVariableDeclaration[50413-50425]:SingleVariableDeclaration[50413-50425]"
  }, {
    "left" : "int e",
    "right" : "int e",
    "info" : "SingleVariableDeclaration[50427-50432]:SingleVariableDeclaration[50427-50432]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[50449-50473]:SimpleType[50449-50473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50474-50926]:Block[50474-50926]"
  }, {
    "left" : "if (e < 0)",
    "right" : "if (e < 0)",
    "info" : "IfStatement[50485-50681]:IfStatement[50485-50681]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50496-50681]:Block[50496-50681]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "info" : "ThrowStatement[50510-50671]:ThrowStatement[50510-50671]"
  }, {
    "left" : "long result = 1l;",
    "right" : "long result = 1l;",
    "info" : "VariableDeclarationStatement[50691-50708]:VariableDeclarationStatement[50691-50708]"
  }, {
    "left" : "long k2p    = k;",
    "right" : "long k2p    = k;",
    "info" : "VariableDeclarationStatement[50717-50733]:VariableDeclarationStatement[50717-50733]"
  }, {
    "left" : "while (e != 0)",
    "right" : "while (e != 0)",
    "info" : "WhileStatement[50742-50895]:WhileStatement[50742-50895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50757-50895]:Block[50757-50895]"
  }, {
    "left" : "if ((e & 0x1) != 0)",
    "right" : "if ((e & 0x1) != 0)",
    "info" : "IfStatement[50771-50837]:IfStatement[50771-50837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50791-50837]:Block[50791-50837]"
  }, {
    "left" : "result *= k2p;",
    "right" : "result *= k2p;",
    "info" : "ExpressionStatement[50809-50823]:ExpressionStatement[50809-50823]"
  }, {
    "left" : "k2p *= k2p;",
    "right" : "k2p *= k2p;",
    "info" : "ExpressionStatement[50850-50861]:ExpressionStatement[50850-50861]"
  }, {
    "left" : "e = e >> 1;",
    "right" : "e = e >> 1;",
    "info" : "ExpressionStatement[50874-50885]:ExpressionStatement[50874-50885]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[50905-50919]:ReturnStatement[50905-50919]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[51158-51164]:Modifier[51158-51164]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51165-51171]:Modifier[51165-51171]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[51172-51176]:PrimitiveType[51172-51176]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[51177-51180]:SimpleName[51177-51180]"
  }, {
    "left" : "final long k",
    "right" : "final long k",
    "info" : "SingleVariableDeclaration[51181-51193]:SingleVariableDeclaration[51181-51193]"
  }, {
    "left" : "long e",
    "right" : "long e",
    "info" : "SingleVariableDeclaration[51195-51201]:SingleVariableDeclaration[51195-51201]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[51218-51242]:SimpleType[51218-51242]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51243-51695]:Block[51243-51695]"
  }, {
    "left" : "if (e < 0)",
    "right" : "if (e < 0)",
    "info" : "IfStatement[51254-51450]:IfStatement[51254-51450]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51265-51450]:Block[51265-51450]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "info" : "ThrowStatement[51279-51440]:ThrowStatement[51279-51440]"
  }, {
    "left" : "long result = 1l;",
    "right" : "long result = 1l;",
    "info" : "VariableDeclarationStatement[51460-51477]:VariableDeclarationStatement[51460-51477]"
  }, {
    "left" : "long k2p    = k;",
    "right" : "long k2p    = k;",
    "info" : "VariableDeclarationStatement[51486-51502]:VariableDeclarationStatement[51486-51502]"
  }, {
    "left" : "while (e != 0)",
    "right" : "while (e != 0)",
    "info" : "WhileStatement[51511-51664]:WhileStatement[51511-51664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51526-51664]:Block[51526-51664]"
  }, {
    "left" : "if ((e & 0x1) != 0)",
    "right" : "if ((e & 0x1) != 0)",
    "info" : "IfStatement[51540-51606]:IfStatement[51540-51606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51560-51606]:Block[51560-51606]"
  }, {
    "left" : "result *= k2p;",
    "right" : "result *= k2p;",
    "info" : "ExpressionStatement[51578-51592]:ExpressionStatement[51578-51592]"
  }, {
    "left" : "k2p *= k2p;",
    "right" : "k2p *= k2p;",
    "info" : "ExpressionStatement[51619-51630]:ExpressionStatement[51619-51630]"
  }, {
    "left" : "e = e >> 1;",
    "right" : "e = e >> 1;",
    "info" : "ExpressionStatement[51643-51654]:ExpressionStatement[51643-51654]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[51674-51688]:ReturnStatement[51674-51688]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[51933-51939]:Modifier[51933-51939]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51940-51946]:Modifier[51940-51946]"
  }, {
    "left" : "BigInteger",
    "right" : "BigInteger",
    "info" : "SimpleType[51947-51957]:SimpleType[51947-51957]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[51958-51961]:SimpleName[51958-51961]"
  }, {
    "left" : "final BigInteger k",
    "right" : "final BigInteger k",
    "info" : "SingleVariableDeclaration[51962-51980]:SingleVariableDeclaration[51962-51980]"
  }, {
    "left" : "int e",
    "right" : "int e",
    "info" : "SingleVariableDeclaration[51982-51987]:SingleVariableDeclaration[51982-51987]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[52004-52028]:SimpleType[52004-52028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52029-52269]:Block[52029-52269]"
  }, {
    "left" : "if (e < 0)",
    "right" : "if (e < 0)",
    "info" : "IfStatement[52040-52236]:IfStatement[52040-52236]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52051-52236]:Block[52051-52236]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "info" : "ThrowStatement[52065-52226]:ThrowStatement[52065-52226]"
  }, {
    "left" : "return k.pow(e);",
    "right" : "return k.pow(e);",
    "info" : "ReturnStatement[52246-52262]:ReturnStatement[52246-52262]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[52507-52513]:Modifier[52507-52513]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52514-52520]:Modifier[52514-52520]"
  }, {
    "left" : "BigInteger",
    "right" : "BigInteger",
    "info" : "SimpleType[52521-52531]:SimpleType[52521-52531]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[52532-52535]:SimpleName[52532-52535]"
  }, {
    "left" : "final BigInteger k",
    "right" : "final BigInteger k",
    "info" : "SingleVariableDeclaration[52536-52554]:SingleVariableDeclaration[52536-52554]"
  }, {
    "left" : "long e",
    "right" : "long e",
    "info" : "SingleVariableDeclaration[52556-52562]:SingleVariableDeclaration[52556-52562]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[52579-52603]:SimpleType[52579-52603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52604-53109]:Block[52604-53109]"
  }, {
    "left" : "if (e < 0)",
    "right" : "if (e < 0)",
    "info" : "IfStatement[52615-52811]:IfStatement[52615-52811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52626-52811]:Block[52626-52811]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "info" : "ThrowStatement[52640-52801]:ThrowStatement[52640-52801]"
  }, {
    "left" : "BigInteger result = BigInteger.ONE;",
    "right" : "BigInteger result = BigInteger.ONE;",
    "info" : "VariableDeclarationStatement[52821-52856]:VariableDeclarationStatement[52821-52856]"
  }, {
    "left" : "BigInteger k2p    = k;",
    "right" : "BigInteger k2p    = k;",
    "info" : "VariableDeclarationStatement[52865-52887]:VariableDeclarationStatement[52865-52887]"
  }, {
    "left" : "while (e != 0)",
    "right" : "while (e != 0)",
    "info" : "WhileStatement[52896-53078]:WhileStatement[52896-53078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52911-53078]:Block[52911-53078]"
  }, {
    "left" : "if ((e & 0x1) != 0)",
    "right" : "if ((e & 0x1) != 0)",
    "info" : "IfStatement[52925-53007]:IfStatement[52925-53007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52945-53007]:Block[52945-53007]"
  }, {
    "left" : "result = result.multiply(k2p);",
    "right" : "result = result.multiply(k2p);",
    "info" : "ExpressionStatement[52963-52993]:ExpressionStatement[52963-52993]"
  }, {
    "left" : "k2p = k2p.multiply(k2p);",
    "right" : "k2p = k2p.multiply(k2p);",
    "info" : "ExpressionStatement[53020-53044]:ExpressionStatement[53020-53044]"
  }, {
    "left" : "e = e >> 1;",
    "right" : "e = e >> 1;",
    "info" : "ExpressionStatement[53057-53068]:ExpressionStatement[53057-53068]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[53088-53102]:ReturnStatement[53088-53102]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[53353-53359]:Modifier[53353-53359]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53360-53366]:Modifier[53360-53366]"
  }, {
    "left" : "BigInteger",
    "right" : "BigInteger",
    "info" : "SimpleType[53367-53377]:SimpleType[53367-53377]"
  }, {
    "left" : "pow",
    "right" : "pow",
    "info" : "SimpleName[53378-53381]:SimpleName[53378-53381]"
  }, {
    "left" : "final BigInteger k",
    "right" : "final BigInteger k",
    "info" : "SingleVariableDeclaration[53382-53400]:SingleVariableDeclaration[53382-53400]"
  }, {
    "left" : "BigInteger e",
    "right" : "BigInteger e",
    "info" : "SingleVariableDeclaration[53402-53414]:SingleVariableDeclaration[53402-53414]"
  }, {
    "left" : "IllegalArgumentException",
    "right" : "IllegalArgumentException",
    "info" : "SimpleType[53431-53455]:SimpleType[53431-53455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53456-54015]:Block[53456-54015]"
  }, {
    "left" : "if (e.compareTo(BigInteger.ZERO) < 0)",
    "right" : "if (e.compareTo(BigInteger.ZERO) < 0)",
    "info" : "IfStatement[53467-53690]:IfStatement[53467-53690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53505-53690]:Block[53505-53690]"
  }, {
    "left" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "right" : "throw MathRuntimeException.createIllegalArgumentException(\n                \"cannot raise an integral value to a negative power ({0}^{1})\",\n                k, e);",
    "info" : "ThrowStatement[53519-53680]:ThrowStatement[53519-53680]"
  }, {
    "left" : "BigInteger result = BigInteger.ONE;",
    "right" : "BigInteger result = BigInteger.ONE;",
    "info" : "VariableDeclarationStatement[53700-53735]:VariableDeclarationStatement[53700-53735]"
  }, {
    "left" : "BigInteger k2p    = k;",
    "right" : "BigInteger k2p    = k;",
    "info" : "VariableDeclarationStatement[53744-53766]:VariableDeclarationStatement[53744-53766]"
  }, {
    "left" : "while (!BigInteger.ZERO.equals(e))",
    "right" : "while (!BigInteger.ZERO.equals(e))",
    "info" : "WhileStatement[53775-53984]:WhileStatement[53775-53984]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53810-53984]:Block[53810-53984]"
  }, {
    "left" : "if (e.testBit(0))",
    "right" : "if (e.testBit(0))",
    "info" : "IfStatement[53824-53904]:IfStatement[53824-53904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53842-53904]:Block[53842-53904]"
  }, {
    "left" : "result = result.multiply(k2p);",
    "right" : "result = result.multiply(k2p);",
    "info" : "ExpressionStatement[53860-53890]:ExpressionStatement[53860-53890]"
  }, {
    "left" : "k2p = k2p.multiply(k2p);",
    "right" : "k2p = k2p.multiply(k2p);",
    "info" : "ExpressionStatement[53917-53941]:ExpressionStatement[53917-53941]"
  }, {
    "left" : "e = e.shiftRight(1);",
    "right" : "e = e.shiftRight(1);",
    "info" : "ExpressionStatement[53954-53974]:ExpressionStatement[53954-53974]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[53994-54008]:ReturnStatement[53994-54008]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[54254-54260]:Modifier[54254-54260]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[54261-54267]:Modifier[54261-54267]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[54268-54274]:PrimitiveType[54268-54274]"
  }, {
    "left" : "distance1",
    "right" : "distance1",
    "info" : "SimpleName[54275-54284]:SimpleName[54275-54284]"
  }, {
    "left" : "double[] p1",
    "right" : "double[] p1",
    "info" : "SingleVariableDeclaration[54285-54296]:SingleVariableDeclaration[54285-54296]"
  }, {
    "left" : "double[] p2",
    "right" : "double[] p2",
    "info" : "SingleVariableDeclaration[54298-54309]:SingleVariableDeclaration[54298-54309]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54311-54462]:Block[54311-54462]"
  }, {
    "left" : "double sum = 0;",
    "right" : "double sum = 0;",
    "info" : "VariableDeclarationStatement[54321-54336]:VariableDeclarationStatement[54321-54336]"
  }, {
    "left" : "for (int i = 0; i < p1.length; i++)",
    "right" : "for (int i = 0; i < p1.length; i++)",
    "info" : "ForStatement[54345-54436]:ForStatement[54345-54436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54381-54436]:Block[54381-54436]"
  }, {
    "left" : "sum += Math.abs(p1[i] - p2[i]);",
    "right" : "sum += Math.abs(p1[i] - p2[i]);",
    "info" : "ExpressionStatement[54395-54426]:ExpressionStatement[54395-54426]"
  }, {
    "left" : "return sum;",
    "right" : "return sum;",
    "info" : "ReturnStatement[54445-54456]:ReturnStatement[54445-54456]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[54701-54707]:Modifier[54701-54707]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[54708-54714]:Modifier[54708-54714]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[54715-54718]:PrimitiveType[54715-54718]"
  }, {
    "left" : "distance1",
    "right" : "distance1",
    "info" : "SimpleName[54719-54728]:SimpleName[54719-54728]"
  }, {
    "left" : "int[] p1",
    "right" : "int[] p1",
    "info" : "SingleVariableDeclaration[54729-54737]:SingleVariableDeclaration[54729-54737]"
  }, {
    "left" : "int[] p2",
    "right" : "int[] p2",
    "info" : "SingleVariableDeclaration[54739-54747]:SingleVariableDeclaration[54739-54747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54749-54887]:Block[54749-54887]"
  }, {
    "left" : "int sum = 0;",
    "right" : "int sum = 0;",
    "info" : "VariableDeclarationStatement[54757-54769]:VariableDeclarationStatement[54757-54769]"
  }, {
    "left" : "for (int i = 0; i < p1.length; i++)",
    "right" : "for (int i = 0; i < p1.length; i++)",
    "info" : "ForStatement[54776-54863]:ForStatement[54776-54863]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54812-54863]:Block[54812-54863]"
  }, {
    "left" : "sum += Math.abs(p1[i] - p2[i]);",
    "right" : "sum += Math.abs(p1[i] - p2[i]);",
    "info" : "ExpressionStatement[54824-54855]:ExpressionStatement[54824-54855]"
  }, {
    "left" : "return sum;",
    "right" : "return sum;",
    "info" : "ReturnStatement[54870-54881]:ReturnStatement[54870-54881]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[55125-55131]:Modifier[55125-55131]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55132-55138]:Modifier[55132-55138]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[55139-55145]:PrimitiveType[55139-55145]"
  }, {
    "left" : "distance",
    "right" : "distance",
    "info" : "SimpleName[55146-55154]:SimpleName[55146-55154]"
  }, {
    "left" : "double[] p1",
    "right" : "double[] p1",
    "info" : "SingleVariableDeclaration[55155-55166]:SingleVariableDeclaration[55155-55166]"
  }, {
    "left" : "double[] p2",
    "right" : "double[] p2",
    "info" : "SingleVariableDeclaration[55168-55179]:SingleVariableDeclaration[55168-55179]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55181-55372]:Block[55181-55372]"
  }, {
    "left" : "double sum = 0;",
    "right" : "double sum = 0;",
    "info" : "VariableDeclarationStatement[55191-55206]:VariableDeclarationStatement[55191-55206]"
  }, {
    "left" : "for (int i = 0; i < p1.length; i++)",
    "right" : "for (int i = 0; i < p1.length; i++)",
    "info" : "ForStatement[55215-55335]:ForStatement[55215-55335]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55251-55335]:Block[55251-55335]"
  }, {
    "left" : "final double dp = p1[i] - p2[i];",
    "right" : "final double dp = p1[i] - p2[i];",
    "info" : "VariableDeclarationStatement[55265-55297]:VariableDeclarationStatement[55265-55297]"
  }, {
    "left" : "sum += dp * dp;",
    "right" : "sum += dp * dp;",
    "info" : "ExpressionStatement[55310-55325]:ExpressionStatement[55310-55325]"
  }, {
    "left" : "return Math.sqrt(sum);",
    "right" : "return Math.sqrt(sum);",
    "info" : "ReturnStatement[55344-55366]:ReturnStatement[55344-55366]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[55610-55616]:Modifier[55610-55616]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55617-55623]:Modifier[55617-55623]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[55624-55630]:PrimitiveType[55624-55630]"
  }, {
    "left" : "distance",
    "right" : "distance",
    "info" : "SimpleName[55631-55639]:SimpleName[55631-55639]"
  }, {
    "left" : "int[] p1",
    "right" : "int[] p1",
    "info" : "SingleVariableDeclaration[55640-55648]:SingleVariableDeclaration[55640-55648]"
  }, {
    "left" : "int[] p2",
    "right" : "int[] p2",
    "info" : "SingleVariableDeclaration[55650-55658]:SingleVariableDeclaration[55650-55658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55660-55833]:Block[55660-55839]"
  }, {
    "left" : "int",
    "right" : "double",
    "info" : "PrimitiveType[55668-55671]:PrimitiveType[55668-55674]"
  }, {
    "left" : "int sum = 0;",
    "right" : "double sum = 0;",
    "info" : "VariableDeclarationStatement[55668-55680]:VariableDeclarationStatement[55668-55683]"
  }, {
    "left" : "for (int i = 0; i < p1.length; i++)",
    "right" : "for (int i = 0; i < p1.length; i++)",
    "info" : "ForStatement[55687-55798]:ForStatement[55690-55804]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55723-55798]:Block[55726-55804]"
  }, {
    "left" : "final int dp = p1[i] - p2[i];",
    "right" : "final double dp = p1[i] - p2[i];",
    "info" : "VariableDeclarationStatement[55735-55764]:VariableDeclarationStatement[55738-55770]"
  }, {
    "left" : "int",
    "right" : "double",
    "info" : "PrimitiveType[55741-55744]:PrimitiveType[55744-55750]"
  }, {
    "left" : "sum += dp * dp;",
    "right" : "sum += dp * dp;",
    "info" : "ExpressionStatement[55775-55790]:ExpressionStatement[55781-55796]"
  }, {
    "left" : "return Math.sqrt(sum);",
    "right" : "return Math.sqrt(sum);",
    "info" : "ReturnStatement[55805-55827]:ReturnStatement[55811-55833]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[56084-56090]:Modifier[56090-56096]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[56091-56097]:Modifier[56097-56103]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[56098-56104]:PrimitiveType[56104-56110]"
  }, {
    "left" : "distanceInf",
    "right" : "distanceInf",
    "info" : "SimpleName[56105-56116]:SimpleName[56111-56122]"
  }, {
    "left" : "double[] p1",
    "right" : "double[] p1",
    "info" : "SingleVariableDeclaration[56117-56128]:SingleVariableDeclaration[56123-56134]"
  }, {
    "left" : "double[] p2",
    "right" : "double[] p2",
    "info" : "SingleVariableDeclaration[56130-56141]:SingleVariableDeclaration[56136-56147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56143-56308]:Block[56149-56314]"
  }, {
    "left" : "double max = 0;",
    "right" : "double max = 0;",
    "info" : "VariableDeclarationStatement[56153-56168]:VariableDeclarationStatement[56159-56174]"
  }, {
    "left" : "for (int i = 0; i < p1.length; i++)",
    "right" : "for (int i = 0; i < p1.length; i++)",
    "info" : "ForStatement[56177-56282]:ForStatement[56183-56288]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56213-56282]:Block[56219-56288]"
  }, {
    "left" : "max = Math.max(max, Math.abs(p1[i] - p2[i]));",
    "right" : "max = Math.max(max, Math.abs(p1[i] - p2[i]));",
    "info" : "ExpressionStatement[56227-56272]:ExpressionStatement[56233-56278]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[56291-56302]:ReturnStatement[56297-56308]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[56559-56565]:Modifier[56565-56571]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[56566-56572]:Modifier[56572-56578]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[56573-56576]:PrimitiveType[56579-56582]"
  }, {
    "left" : "distanceInf",
    "right" : "distanceInf",
    "info" : "SimpleName[56577-56588]:SimpleName[56583-56594]"
  }, {
    "left" : "int[] p1",
    "right" : "int[] p1",
    "info" : "SingleVariableDeclaration[56589-56597]:SingleVariableDeclaration[56595-56603]"
  }, {
    "left" : "int[] p2",
    "right" : "int[] p2",
    "info" : "SingleVariableDeclaration[56599-56607]:SingleVariableDeclaration[56605-56613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56609-56771]:Block[56615-56777]"
  }, {
    "left" : "int max = 0;",
    "right" : "int max = 0;",
    "info" : "VariableDeclarationStatement[56619-56631]:VariableDeclarationStatement[56625-56637]"
  }, {
    "left" : "for (int i = 0; i < p1.length; i++)",
    "right" : "for (int i = 0; i < p1.length; i++)",
    "info" : "ForStatement[56640-56745]:ForStatement[56646-56751]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56676-56745]:Block[56682-56751]"
  }, {
    "left" : "max = Math.max(max, Math.abs(p1[i] - p2[i]));",
    "right" : "max = Math.max(max, Math.abs(p1[i] - p2[i]));",
    "info" : "ExpressionStatement[56690-56735]:ExpressionStatement[56696-56741]"
  }, {
    "left" : "return max;",
    "right" : "return max;",
    "info" : "ReturnStatement[56754-56765]:ReturnStatement[56760-56771]"
  } ]
}