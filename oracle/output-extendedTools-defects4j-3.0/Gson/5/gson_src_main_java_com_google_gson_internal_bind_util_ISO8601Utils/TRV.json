{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final String UTC_ID = \"UTC\";",
      "right" : "private static final String UTC_ID = \"UTC\";",
      "info" : "FieldDeclaration[743-904]:FieldDeclaration[743-904]"
    }, {
      "left" : "private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);",
      "right" : "private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);",
      "info" : "FieldDeclaration[909-1084]:FieldDeclaration[909-1084]"
    }, {
      "left" : "public static String format(Date date)",
      "right" : "public static String format(Date date)",
      "info" : "MethodDeclaration[1252-1565]:MethodDeclaration[1252-1565]"
    }, {
      "left" : "public static String format(Date date, boolean millis)",
      "right" : "public static String format(Date date, boolean millis)",
      "info" : "MethodDeclaration[1571-1952]:MethodDeclaration[1571-1952]"
    }, {
      "left" : "public static String format(Date date, boolean millis, TimeZone tz)",
      "right" : "public static String format(Date date, boolean millis, TimeZone tz)",
      "info" : "MethodDeclaration[1958-4083]:MethodDeclaration[1958-4083]"
    }, {
      "left" : "private static boolean checkOffset(String value, int offset, char expected)",
      "right" : "private static boolean checkOffset(String value, int offset, char expected)",
      "info" : "MethodDeclaration[11655-12170]:MethodDeclaration[11759-12274]"
    }, {
      "left" : "private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException",
      "right" : "private static int parseInt(String value, int beginIndex, int endIndex) throws NumberFormatException",
      "info" : "MethodDeclaration[12176-13576]:MethodDeclaration[12280-13680]"
    }, {
      "left" : "private static void padInt(StringBuilder buffer, int value, int length)",
      "right" : "private static void padInt(StringBuilder buffer, int value, int length)",
      "info" : "MethodDeclaration[13582-14092]:MethodDeclaration[13686-14196]"
    }, {
      "left" : "private static int indexOfNonDigit(String string, int offset)",
      "right" : "private static int indexOfNonDigit(String string, int offset)",
      "info" : "MethodDeclaration[14098-14470]:MethodDeclaration[14202-14574]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1469-1475]:Modifier[1469-1475]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1476-1482]:Modifier[1476-1482]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1483-1489]:SimpleType[1483-1489]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[1490-1496]:SimpleName[1490-1496]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[1497-1506]:SingleVariableDeclaration[1497-1506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1508-1565]:Block[1508-1565]"
    }, {
      "left" : "return format(date, false, TIMEZONE_UTC);",
      "right" : "return format(date, false, TIMEZONE_UTC);",
      "info" : "ReturnStatement[1518-1559]:ReturnStatement[1518-1559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1839-1845]:Modifier[1839-1845]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1846-1852]:Modifier[1846-1852]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[1853-1859]:SimpleType[1853-1859]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[1860-1866]:SimpleName[1860-1866]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[1867-1876]:SingleVariableDeclaration[1867-1876]"
    }, {
      "left" : "boolean millis",
      "right" : "boolean millis",
      "info" : "SingleVariableDeclaration[1878-1892]:SingleVariableDeclaration[1878-1892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1894-1952]:Block[1894-1952]"
    }, {
      "left" : "return format(date, millis, TIMEZONE_UTC);",
      "right" : "return format(date, millis, TIMEZONE_UTC);",
      "info" : "ReturnStatement[1904-1946]:ReturnStatement[1904-1946]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2304-2310]:Modifier[2304-2310]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2311-2317]:Modifier[2311-2317]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2318-2324]:SimpleType[2318-2324]"
    }, {
      "left" : "format",
      "right" : "format",
      "info" : "SimpleName[2325-2331]:SimpleName[2325-2331]"
    }, {
      "left" : "Date date",
      "right" : "Date date",
      "info" : "SingleVariableDeclaration[2332-2341]:SingleVariableDeclaration[2332-2341]"
    }, {
      "left" : "boolean millis",
      "right" : "boolean millis",
      "info" : "SingleVariableDeclaration[2343-2357]:SingleVariableDeclaration[2343-2357]"
    }, {
      "left" : "TimeZone tz",
      "right" : "TimeZone tz",
      "info" : "SingleVariableDeclaration[2359-2370]:SingleVariableDeclaration[2359-2370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2372-4083]:Block[2372-4083]"
    }, {
      "left" : "Calendar calendar = new GregorianCalendar(tz, Locale.US);",
      "right" : "Calendar calendar = new GregorianCalendar(tz, Locale.US);",
      "info" : "VariableDeclarationStatement[2382-2439]:VariableDeclarationStatement[2382-2439]"
    }, {
      "left" : "calendar.setTime(date);",
      "right" : "calendar.setTime(date);",
      "info" : "ExpressionStatement[2448-2471]:ExpressionStatement[2448-2471]"
    }, {
      "left" : "int capacity = \"yyyy-MM-ddThh:mm:ss\".length();",
      "right" : "int capacity = \"yyyy-MM-ddThh:mm:ss\".length();",
      "info" : "VariableDeclarationStatement[2565-2611]:VariableDeclarationStatement[2565-2611]"
    }, {
      "left" : "capacity += millis ? \".sss\".length() : 0;",
      "right" : "capacity += millis ? \".sss\".length() : 0;",
      "info" : "ExpressionStatement[2620-2661]:ExpressionStatement[2620-2661]"
    }, {
      "left" : "capacity += tz.getRawOffset() == 0 ? \"Z\".length() : \"+hh:mm\".length();",
      "right" : "capacity += tz.getRawOffset() == 0 ? \"Z\".length() : \"+hh:mm\".length();",
      "info" : "ExpressionStatement[2670-2740]:ExpressionStatement[2670-2740]"
    }, {
      "left" : "StringBuilder formatted = new StringBuilder(capacity);",
      "right" : "StringBuilder formatted = new StringBuilder(capacity);",
      "info" : "VariableDeclarationStatement[2749-2803]:VariableDeclarationStatement[2749-2803]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.YEAR), \"yyyy\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.YEAR), \"yyyy\".length());",
      "info" : "ExpressionStatement[2813-2877]:ExpressionStatement[2813-2877]"
    }, {
      "left" : "formatted.append('-');",
      "right" : "formatted.append('-');",
      "info" : "ExpressionStatement[2886-2908]:ExpressionStatement[2886-2908]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.MONTH) + 1, \"MM\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.MONTH) + 1, \"MM\".length());",
      "info" : "ExpressionStatement[2917-2984]:ExpressionStatement[2917-2984]"
    }, {
      "left" : "formatted.append('-');",
      "right" : "formatted.append('-');",
      "info" : "ExpressionStatement[2993-3015]:ExpressionStatement[2993-3015]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), \"dd\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.DAY_OF_MONTH), \"dd\".length());",
      "info" : "ExpressionStatement[3024-3094]:ExpressionStatement[3024-3094]"
    }, {
      "left" : "formatted.append('T');",
      "right" : "formatted.append('T');",
      "info" : "ExpressionStatement[3103-3125]:ExpressionStatement[3103-3125]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), \"hh\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.HOUR_OF_DAY), \"hh\".length());",
      "info" : "ExpressionStatement[3134-3203]:ExpressionStatement[3134-3203]"
    }, {
      "left" : "formatted.append(':');",
      "right" : "formatted.append(':');",
      "info" : "ExpressionStatement[3212-3234]:ExpressionStatement[3212-3234]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.MINUTE), \"mm\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.MINUTE), \"mm\".length());",
      "info" : "ExpressionStatement[3243-3307]:ExpressionStatement[3243-3307]"
    }, {
      "left" : "formatted.append(':');",
      "right" : "formatted.append(':');",
      "info" : "ExpressionStatement[3316-3338]:ExpressionStatement[3316-3338]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.SECOND), \"ss\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.SECOND), \"ss\".length());",
      "info" : "ExpressionStatement[3347-3411]:ExpressionStatement[3347-3411]"
    }, {
      "left" : "if (millis)",
      "right" : "if (millis)",
      "info" : "IfStatement[3420-3561]:IfStatement[3420-3561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3432-3561]:Block[3432-3561]"
    }, {
      "left" : "formatted.append('.');",
      "right" : "formatted.append('.');",
      "info" : "ExpressionStatement[3446-3468]:ExpressionStatement[3446-3468]"
    }, {
      "left" : "padInt(formatted, calendar.get(Calendar.MILLISECOND), \"sss\".length());",
      "right" : "padInt(formatted, calendar.get(Calendar.MILLISECOND), \"sss\".length());",
      "info" : "ExpressionStatement[3481-3551]:ExpressionStatement[3481-3551]"
    }, {
      "left" : "int offset = tz.getOffset(calendar.getTimeInMillis());",
      "right" : "int offset = tz.getOffset(calendar.getTimeInMillis());",
      "info" : "VariableDeclarationStatement[3571-3625]:VariableDeclarationStatement[3571-3625]"
    }, {
      "left" : "if (offset != 0)",
      "right" : "if (offset != 0)",
      "info" : "IfStatement[3634-4039]:IfStatement[3634-4039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3651-3987]:Block[3651-3987]"
    }, {
      "left" : "int hours = Math.abs((offset / (60 * 1000)) / 60);",
      "right" : "int hours = Math.abs((offset / (60 * 1000)) / 60);",
      "info" : "VariableDeclarationStatement[3665-3715]:VariableDeclarationStatement[3665-3715]"
    }, {
      "left" : "int minutes = Math.abs((offset / (60 * 1000)) % 60);",
      "right" : "int minutes = Math.abs((offset / (60 * 1000)) % 60);",
      "info" : "VariableDeclarationStatement[3728-3780]:VariableDeclarationStatement[3728-3780]"
    }, {
      "left" : "formatted.append(offset < 0 ? '-' : '+');",
      "right" : "formatted.append(offset < 0 ? '-' : '+');",
      "info" : "ExpressionStatement[3793-3834]:ExpressionStatement[3793-3834]"
    }, {
      "left" : "padInt(formatted, hours, \"hh\".length());",
      "right" : "padInt(formatted, hours, \"hh\".length());",
      "info" : "ExpressionStatement[3847-3887]:ExpressionStatement[3847-3887]"
    }, {
      "left" : "formatted.append(':');",
      "right" : "formatted.append(':');",
      "info" : "ExpressionStatement[3900-3922]:ExpressionStatement[3900-3922]"
    }, {
      "left" : "padInt(formatted, minutes, \"mm\".length());",
      "right" : "padInt(formatted, minutes, \"mm\".length());",
      "info" : "ExpressionStatement[3935-3977]:ExpressionStatement[3935-3977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3993-4039]:Block[3993-4039]"
    }, {
      "left" : "formatted.append('Z');",
      "right" : "formatted.append('Z');",
      "info" : "ExpressionStatement[4007-4029]:ExpressionStatement[4007-4029]"
    }, {
      "left" : "return formatted.toString();",
      "right" : "return formatted.toString();",
      "info" : "ReturnStatement[4049-4077]:ReturnStatement[4049-4077]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12007-12014]:Modifier[12111-12118]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12015-12021]:Modifier[12119-12125]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12022-12029]:PrimitiveType[12126-12133]"
    }, {
      "left" : "checkOffset",
      "right" : "checkOffset",
      "info" : "SimpleName[12030-12041]:SimpleName[12134-12145]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[12042-12054]:SingleVariableDeclaration[12146-12158]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[12056-12066]:SingleVariableDeclaration[12160-12170]"
    }, {
      "left" : "char expected",
      "right" : "char expected",
      "info" : "SingleVariableDeclaration[12068-12081]:SingleVariableDeclaration[12172-12185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12083-12170]:Block[12187-12274]"
    }, {
      "left" : "return (offset < value.length()) && (value.charAt(offset) == expected);",
      "right" : "return (offset < value.length()) && (value.charAt(offset) == expected);",
      "info" : "ReturnStatement[12093-12164]:ReturnStatement[12197-12268]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12535-12542]:Modifier[12639-12646]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12543-12549]:Modifier[12647-12653]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[12550-12553]:PrimitiveType[12654-12657]"
    }, {
      "left" : "parseInt",
      "right" : "parseInt",
      "info" : "SimpleName[12554-12562]:SimpleName[12658-12666]"
    }, {
      "left" : "String value",
      "right" : "String value",
      "info" : "SingleVariableDeclaration[12563-12575]:SingleVariableDeclaration[12667-12679]"
    }, {
      "left" : "int beginIndex",
      "right" : "int beginIndex",
      "info" : "SingleVariableDeclaration[12577-12591]:SingleVariableDeclaration[12681-12695]"
    }, {
      "left" : "int endIndex",
      "right" : "int endIndex",
      "info" : "SingleVariableDeclaration[12593-12605]:SingleVariableDeclaration[12697-12709]"
    }, {
      "left" : "NumberFormatException",
      "right" : "NumberFormatException",
      "info" : "SimpleType[12614-12635]:SimpleType[12718-12739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12636-13576]:Block[12740-13680]"
    }, {
      "left" : "if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex)",
      "right" : "if (beginIndex < 0 || endIndex > value.length() || beginIndex > endIndex)",
      "info" : "IfStatement[12646-12783]:IfStatement[12750-12887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12720-12783]:Block[12824-12887]"
    }, {
      "left" : "throw new NumberFormatException(value);",
      "right" : "throw new NumberFormatException(value);",
      "info" : "ThrowStatement[12734-12773]:ThrowStatement[12838-12877]"
    }, {
      "left" : "int i = beginIndex;",
      "right" : "int i = beginIndex;",
      "info" : "VariableDeclarationStatement[12897-12916]:VariableDeclarationStatement[13001-13020]"
    }, {
      "left" : "int result = 0;",
      "right" : "int result = 0;",
      "info" : "VariableDeclarationStatement[12925-12940]:VariableDeclarationStatement[13029-13044]"
    }, {
      "left" : "int digit;",
      "right" : "int digit;",
      "info" : "VariableDeclarationStatement[12949-12959]:VariableDeclarationStatement[13053-13063]"
    }, {
      "left" : "if (i < endIndex)",
      "right" : "if (i < endIndex)",
      "info" : "IfStatement[12968-13238]:IfStatement[13072-13342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12986-13238]:Block[13090-13342]"
    }, {
      "left" : "digit = Character.digit(value.charAt(i++), 10);",
      "right" : "digit = Character.digit(value.charAt(i++), 10);",
      "info" : "ExpressionStatement[13000-13047]:ExpressionStatement[13104-13151]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[13060-13199]:IfStatement[13164-13303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13075-13199]:Block[13179-13303]"
    }, {
      "left" : "throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));",
      "right" : "throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));",
      "info" : "ThrowStatement[13093-13185]:ThrowStatement[13197-13289]"
    }, {
      "left" : "result = -digit;",
      "right" : "result = -digit;",
      "info" : "ExpressionStatement[13212-13228]:ExpressionStatement[13316-13332]"
    }, {
      "left" : "while (i < endIndex)",
      "right" : "while (i < endIndex)",
      "info" : "WhileStatement[13247-13546]:WhileStatement[13351-13650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13268-13546]:Block[13372-13650]"
    }, {
      "left" : "digit = Character.digit(value.charAt(i++), 10);",
      "right" : "digit = Character.digit(value.charAt(i++), 10);",
      "info" : "ExpressionStatement[13282-13329]:ExpressionStatement[13386-13433]"
    }, {
      "left" : "if (digit < 0)",
      "right" : "if (digit < 0)",
      "info" : "IfStatement[13342-13481]:IfStatement[13446-13585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13357-13481]:Block[13461-13585]"
    }, {
      "left" : "throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));",
      "right" : "throw new NumberFormatException(\"Invalid number: \" + value.substring(beginIndex, endIndex));",
      "info" : "ThrowStatement[13375-13467]:ThrowStatement[13479-13571]"
    }, {
      "left" : "result *= 10;",
      "right" : "result *= 10;",
      "info" : "ExpressionStatement[13494-13507]:ExpressionStatement[13598-13611]"
    }, {
      "left" : "result -= digit;",
      "right" : "result -= digit;",
      "info" : "ExpressionStatement[13520-13536]:ExpressionStatement[13624-13640]"
    }, {
      "left" : "return -result;",
      "right" : "return -result;",
      "info" : "ReturnStatement[13555-13570]:ReturnStatement[13659-13674]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13824-13831]:Modifier[13928-13935]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13832-13838]:Modifier[13936-13942]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13839-13843]:PrimitiveType[13943-13947]"
    }, {
      "left" : "padInt",
      "right" : "padInt",
      "info" : "SimpleName[13844-13850]:SimpleName[13948-13954]"
    }, {
      "left" : "StringBuilder buffer",
      "right" : "StringBuilder buffer",
      "info" : "SingleVariableDeclaration[13851-13871]:SingleVariableDeclaration[13955-13975]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[13873-13882]:SingleVariableDeclaration[13977-13986]"
    }, {
      "left" : "int length",
      "right" : "int length",
      "info" : "SingleVariableDeclaration[13884-13894]:SingleVariableDeclaration[13988-13998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13896-14092]:Block[14000-14196]"
    }, {
      "left" : "String strValue = Integer.toString(value);",
      "right" : "String strValue = Integer.toString(value);",
      "info" : "VariableDeclarationStatement[13906-13948]:VariableDeclarationStatement[14010-14052]"
    }, {
      "left" : "for (int i = length - strValue.length(); i > 0; i--)",
      "right" : "for (int i = length - strValue.length(); i > 0; i--)",
      "info" : "ForStatement[13957-14053]:ForStatement[14061-14157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14010-14053]:Block[14114-14157]"
    }, {
      "left" : "buffer.append('0');",
      "right" : "buffer.append('0');",
      "info" : "ExpressionStatement[14024-14043]:ExpressionStatement[14128-14147]"
    }, {
      "left" : "buffer.append(strValue);",
      "right" : "buffer.append(strValue);",
      "info" : "ExpressionStatement[14062-14086]:ExpressionStatement[14166-14190]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14217-14224]:Modifier[14321-14328]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14225-14231]:Modifier[14329-14335]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14232-14235]:PrimitiveType[14336-14339]"
    }, {
      "left" : "indexOfNonDigit",
      "right" : "indexOfNonDigit",
      "info" : "SimpleName[14236-14251]:SimpleName[14340-14355]"
    }, {
      "left" : "String string",
      "right" : "String string",
      "info" : "SingleVariableDeclaration[14252-14265]:SingleVariableDeclaration[14356-14369]"
    }, {
      "left" : "int offset",
      "right" : "int offset",
      "info" : "SingleVariableDeclaration[14267-14277]:SingleVariableDeclaration[14371-14381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14279-14470]:Block[14383-14574]"
    }, {
      "left" : "for (int i = offset; i < string.length(); i++)",
      "right" : "for (int i = offset; i < string.length(); i++)",
      "info" : "ForStatement[14289-14432]:ForStatement[14393-14536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14336-14432]:Block[14440-14536]"
    }, {
      "left" : "char c = string.charAt(i);",
      "right" : "char c = string.charAt(i);",
      "info" : "VariableDeclarationStatement[14350-14376]:VariableDeclarationStatement[14454-14480]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[14389-14422]:IfStatement[14493-14526]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[14413-14422]:ReturnStatement[14517-14526]"
    }, {
      "left" : "return string.length();",
      "right" : "return string.length();",
      "info" : "ReturnStatement[14441-14464]:ReturnStatement[14545-14568]"
    } ]
  },
  "interFileMappings" : { }
}