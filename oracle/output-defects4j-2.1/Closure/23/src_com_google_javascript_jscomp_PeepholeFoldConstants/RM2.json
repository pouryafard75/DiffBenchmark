{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "PeepholeFoldConstants",
      "right" : "PeepholeFoldConstants",
      "info" : "TypeDeclaration[932-43252]:TypeDeclaration[932-43359]"
    }, {
      "left" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "right" : "static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =\n      DiagnosticType.error(\n          \"JSC_INVALID_GETELEM_INDEX_ERROR\",\n          \"Array index not integer: {0}\");",
      "info" : "FieldDeclaration[1084-1257]:FieldDeclaration[1084-1257]"
    }, {
      "left" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "right" : "static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =\n      DiagnosticType.error(\n          \"JSC_INDEX_OUT_OF_BOUNDS_ERROR\",\n          \"Array index out of bounds: {0}\");",
      "info" : "FieldDeclaration[1261-1432]:FieldDeclaration[1261-1432]"
    }, {
      "left" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "right" : "static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =\n      DiagnosticType.error(\n          \"JSC_NEGATING_A_NON_NUMBER_ERROR\",\n          \"Can't negate non-numeric value: {0}\");",
      "info" : "FieldDeclaration[1436-1616]:FieldDeclaration[1436-1616]"
    }, {
      "left" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "right" : "static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =\n      DiagnosticType.error(\n          \"JSC_BITWISE_OPERAND_OUT_OF_RANGE\",\n          \"Operand out of range, bitwise operation will lose information: {0}\");",
      "info" : "FieldDeclaration[1620-1833]:FieldDeclaration[1620-1833]"
    }, {
      "left" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "right" : "static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(\n      \"JSC_SHIFT_AMOUNT_OUT_OF_BOUNDS\",\n      \"Shift amount out of bounds: {0}\");",
      "info" : "FieldDeclaration[1837-1997]:FieldDeclaration[1837-1997]"
    }, {
      "left" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "right" : "static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(\n      \"JSC_FRACTIONAL_BITWISE_OPERAND\",\n      \"Fractional bitwise operand: {0}\");",
      "info" : "FieldDeclaration[2001-2161]:FieldDeclaration[2001-2161]"
    }, {
      "left" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "right" : "private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);",
      "info" : "FieldDeclaration[2165-2227]:FieldDeclaration[2165-2227]"
    }, {
      "left" : "private final boolean late;",
      "right" : "private final boolean late;",
      "info" : "FieldDeclaration[2231-2258]:FieldDeclaration[2231-2258]"
    }, {
      "left" : "PeepholeFoldConstants(boolean late)",
      "right" : "PeepholeFoldConstants(boolean late)",
      "info" : "MethodDeclaration[2262-2612]:MethodDeclaration[2262-2612]"
    }, {
      "left" : "Node optimizeSubtree(Node subtree)",
      "right" : "Node optimizeSubtree(Node subtree)",
      "info" : "MethodDeclaration[2616-3180]:MethodDeclaration[2616-3180]"
    }, {
      "left" : "private Node tryFoldBinaryOperator(Node subtree)",
      "right" : "private Node tryFoldBinaryOperator(Node subtree)",
      "info" : "MethodDeclaration[3184-5197]:MethodDeclaration[3184-5197]"
    }, {
      "left" : "private Node tryReduceVoid(Node n)",
      "right" : "private Node tryReduceVoid(Node n)",
      "info" : "MethodDeclaration[5201-5471]:MethodDeclaration[5201-5471]"
    }, {
      "left" : "private void tryReduceOperandsForOp(Node n)",
      "right" : "private void tryReduceOperandsForOp(Node n)",
      "info" : "MethodDeclaration[5475-6564]:MethodDeclaration[5475-6564]"
    }, {
      "left" : "private void tryConvertOperandsToNumber(Node n)",
      "right" : "private void tryConvertOperandsToNumber(Node n)",
      "info" : "MethodDeclaration[6568-6757]:MethodDeclaration[6568-6757]"
    }, {
      "left" : "private void tryConvertToNumber(Node n)",
      "right" : "private void tryConvertToNumber(Node n)",
      "info" : "MethodDeclaration[6761-7587]:MethodDeclaration[6761-7587]"
    }, {
      "left" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "right" : "private Node tryFoldTypeof(Node originalTypeofNode)",
      "info" : "MethodDeclaration[7591-9168]:MethodDeclaration[7591-9168]"
    }, {
      "left" : "private Node tryFoldUnaryOperator(Node n)",
      "right" : "private Node tryFoldUnaryOperator(Node n)",
      "info" : "MethodDeclaration[9172-12098]:MethodDeclaration[9172-12098]"
    }, {
      "left" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "right" : "private Node tryFoldInstanceof(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[12102-12977]:MethodDeclaration[12102-12977]"
    }, {
      "left" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAssign(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[12981-14822]:MethodDeclaration[12981-14822]"
    }, {
      "left" : "private Node tryUnfoldAssignOp(Node n, Node left, Node right)",
      "right" : "private Node tryUnfoldAssignOp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[14826-15439]:MethodDeclaration[14826-15439]"
    }, {
      "left" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAndOr(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[15443-16427]:MethodDeclaration[15443-16427]"
    }, {
      "left" : "private Node tryFoldChildAddString(Node n, Node left, Node right)",
      "right" : "private Node tryFoldChildAddString(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[16431-18589]:MethodDeclaration[16431-18589]"
    }, {
      "left" : "private Node tryFoldAddConstantString(Node n, Node left, Node right)",
      "right" : "private Node tryFoldAddConstantString(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[18593-19188]:MethodDeclaration[18593-19188]"
    }, {
      "left" : "private Node tryFoldArithmeticOp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldArithmeticOp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[19192-19565]:MethodDeclaration[19192-19565]"
    }, {
      "left" : "private Node performArithmeticOp(int opType, Node left, Node right)",
      "right" : "private Node performArithmeticOp(int opType, Node left, Node right)",
      "info" : "MethodDeclaration[19569-21905]:MethodDeclaration[19569-21905]"
    }, {
      "left" : "private Node tryFoldLeftChildOp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldLeftChildOp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[21909-23776]:MethodDeclaration[21909-23776]"
    }, {
      "left" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "right" : "private Node tryFoldAdd(Node node, Node left, Node right)",
      "info" : "MethodDeclaration[23780-24439]:MethodDeclaration[23780-24439]"
    }, {
      "left" : "private Node tryFoldShift(Node n, Node left, Node right)",
      "right" : "private Node tryFoldShift(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[24443-26375]:MethodDeclaration[24443-26375]"
    }, {
      "left" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "right" : "private Node tryFoldComparison(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[26379-32731]:MethodDeclaration[26379-32731]"
    }, {
      "left" : "private TernaryValue areStringsEqual(String a, String b)",
      "right" : "private TernaryValue areStringsEqual(String a, String b)",
      "info" : "MethodDeclaration[32735-33148]:MethodDeclaration[32735-33148]"
    }, {
      "left" : "private int getNormalizedNodeType(Node n)",
      "right" : "private int getNormalizedNodeType(Node n)",
      "info" : "MethodDeclaration[33152-33553]:MethodDeclaration[33152-33553]"
    }, {
      "left" : "private Boolean compareAsNumbers(int op, Node left, Node right)",
      "right" : "private Boolean compareAsNumbers(int op, Node left, Node right)",
      "info" : "MethodDeclaration[33557-34665]:MethodDeclaration[33557-34665]"
    }, {
      "left" : "private boolean compareToUndefined(Node value, int op)",
      "right" : "private boolean compareToUndefined(Node value, int op)",
      "info" : "MethodDeclaration[34669-35603]:MethodDeclaration[34669-35603]"
    }, {
      "left" : "private boolean isEqualityOp(int op)",
      "right" : "private boolean isEqualityOp(int op)",
      "info" : "MethodDeclaration[35607-35800]:MethodDeclaration[35607-35800]"
    }, {
      "left" : "private boolean compareToNull(Node value, int op)",
      "right" : "private boolean compareToNull(Node value, int op)",
      "info" : "MethodDeclaration[35804-36544]:MethodDeclaration[35804-36544]"
    }, {
      "left" : "private Node tryFoldCtorCall(Node n)",
      "right" : "private Node tryFoldCtorCall(Node n)",
      "info" : "MethodDeclaration[36548-36914]:MethodDeclaration[36548-36914]"
    }, {
      "left" : "private boolean inForcedStringContext(Node n)",
      "right" : "private boolean inForcedStringContext(Node n)",
      "info" : "MethodDeclaration[36918-37268]:MethodDeclaration[36918-37268]"
    }, {
      "left" : "private Node tryFoldInForcedStringContext(Node n)",
      "right" : "private Node tryFoldInForcedStringContext(Node n)",
      "info" : "MethodDeclaration[37272-38152]:MethodDeclaration[37272-38152]"
    }, {
      "left" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetElem(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[38156-38521]:MethodDeclaration[38156-38521]"
    }, {
      "left" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "right" : "private Node tryFoldGetProp(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[38525-39602]:MethodDeclaration[38525-39602]"
    }, {
      "left" : "private boolean isAssignmentTarget(Node n)",
      "right" : "private boolean isAssignmentTarget(Node n)",
      "info" : "MethodDeclaration[39606-40034]:MethodDeclaration[39606-40034]"
    }, {
      "left" : "private Node tryFoldArrayAccess(Node n, Node left, Node right)",
      "right" : "private Node tryFoldArrayAccess(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[40038-41329]:MethodDeclaration[40038-41436]"
    }, {
      "left" : "private Node tryFoldObjectPropAccess(Node n, Node left, Node right)",
      "right" : "private Node tryFoldObjectPropAccess(Node n, Node left, Node right)",
      "info" : "MethodDeclaration[41333-43250]:MethodDeclaration[41440-43357]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2585-2612]:Block[2585-2612]"
    }, {
      "left" : "this.late = late;",
      "right" : "this.late = late;",
      "info" : "ExpressionStatement[2591-2608]:ExpressionStatement[2591-2608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2663-3180]:Block[2663-3180]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.NEW:\n        return tryFoldCtorCall(subtree);\n\n      case Token.TYPEOF:\n        return tryFoldTypeof(subtree);\n\n      case Token.NOT:\n      case Token.POS:\n      case Token.NEG:\n      case Token.BITNOT:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldUnaryOperator(subtree);\n\n      case Token.VOID:\n        return tryReduceVoid(subtree);\n\n      default:\n        tryReduceOperandsForOp(subtree);\n        return tryFoldBinaryOperator(subtree);\n    }",
      "info" : "SwitchStatement[2669-3176]:SwitchStatement[2669-3176]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[2703-2718]:SwitchCase[2703-2718]"
    }, {
      "left" : "return tryFoldCtorCall(subtree);",
      "right" : "return tryFoldCtorCall(subtree);",
      "info" : "ReturnStatement[2727-2759]:ReturnStatement[2727-2759]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[2767-2785]:SwitchCase[2767-2785]"
    }, {
      "left" : "return tryFoldTypeof(subtree);",
      "right" : "return tryFoldTypeof(subtree);",
      "info" : "ReturnStatement[2794-2824]:ReturnStatement[2794-2824]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[2832-2847]:SwitchCase[2832-2847]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[2854-2869]:SwitchCase[2854-2869]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[2876-2891]:SwitchCase[2876-2891]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[2898-2916]:SwitchCase[2898-2916]"
    }, {
      "left" : "tryReduceOperandsForOp(subtree);",
      "right" : "tryReduceOperandsForOp(subtree);",
      "info" : "ExpressionStatement[2925-2957]:ExpressionStatement[2925-2957]"
    }, {
      "left" : "return tryFoldUnaryOperator(subtree);",
      "right" : "return tryFoldUnaryOperator(subtree);",
      "info" : "ReturnStatement[2966-3003]:ReturnStatement[2966-3003]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[3011-3027]:SwitchCase[3011-3027]"
    }, {
      "left" : "return tryReduceVoid(subtree);",
      "right" : "return tryReduceVoid(subtree);",
      "info" : "ReturnStatement[3036-3066]:ReturnStatement[3036-3066]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3074-3082]:SwitchCase[3074-3082]"
    }, {
      "left" : "tryReduceOperandsForOp(subtree);",
      "right" : "tryReduceOperandsForOp(subtree);",
      "info" : "ExpressionStatement[3091-3123]:ExpressionStatement[3091-3123]"
    }, {
      "left" : "return tryFoldBinaryOperator(subtree);",
      "right" : "return tryFoldBinaryOperator(subtree);",
      "info" : "ReturnStatement[3132-3170]:ReturnStatement[3132-3170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3233-5197]:Block[3233-5197]"
    }, {
      "left" : "Node left = subtree.getFirstChild();",
      "right" : "Node left = subtree.getFirstChild();",
      "info" : "VariableDeclarationStatement[3239-3275]:VariableDeclarationStatement[3239-3275]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[3281-3328]:IfStatement[3281-3328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3299-3328]:Block[3299-3328]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[3307-3322]:ReturnStatement[3307-3322]"
    }, {
      "left" : "Node right = left.getNext();",
      "right" : "Node right = left.getNext();",
      "info" : "VariableDeclarationStatement[3334-3362]:VariableDeclarationStatement[3334-3362]"
    }, {
      "left" : "if (right == null)",
      "right" : "if (right == null)",
      "info" : "IfStatement[3368-3416]:IfStatement[3368-3416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3387-3416]:Block[3387-3416]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[3395-3410]:ReturnStatement[3395-3410]"
    }, {
      "left" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return tryUnfoldAssignOp(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "right" : "switch(subtree.getType()) {\n      case Token.GETPROP:\n        return tryFoldGetProp(subtree, left, right);\n\n      case Token.GETELEM:\n        return tryFoldGetElem(subtree, left, right);\n\n      case Token.INSTANCEOF:\n        return tryFoldInstanceof(subtree, left, right);\n\n      case Token.AND:\n      case Token.OR:\n        return tryFoldAndOr(subtree, left, right);\n\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n        return tryFoldShift(subtree, left, right);\n\n      case Token.ASSIGN:\n        return tryFoldAssign(subtree, left, right);\n\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return tryUnfoldAssignOp(subtree, left, right);\n\n      case Token.ADD:\n        return tryFoldAdd(subtree, left, right);\n\n      case Token.SUB:\n      case Token.DIV:\n      case Token.MOD:\n        return tryFoldArithmeticOp(subtree, left, right);\n\n      case Token.MUL:\n      case Token.BITAND:\n      case Token.BITOR:\n      case Token.BITXOR:\n        Node result = tryFoldArithmeticOp(subtree, left, right);\n        if (result != subtree) {\n          return result;\n        }\n        return tryFoldLeftChildOp(subtree, left, right);\n\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return tryFoldComparison(subtree, left, right);\n\n      default:\n        return subtree;\n    }",
      "info" : "SwitchStatement[3485-5193]:SwitchStatement[3485-5193]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[3519-3538]:SwitchCase[3519-3538]"
    }, {
      "left" : "return tryFoldGetProp(subtree, left, right);",
      "right" : "return tryFoldGetProp(subtree, left, right);",
      "info" : "ReturnStatement[3547-3591]:ReturnStatement[3547-3591]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[3599-3618]:SwitchCase[3599-3618]"
    }, {
      "left" : "return tryFoldGetElem(subtree, left, right);",
      "right" : "return tryFoldGetElem(subtree, left, right);",
      "info" : "ReturnStatement[3627-3671]:ReturnStatement[3627-3671]"
    }, {
      "left" : "case Token.INSTANCEOF:",
      "right" : "case Token.INSTANCEOF:",
      "info" : "SwitchCase[3679-3701]:SwitchCase[3679-3701]"
    }, {
      "left" : "return tryFoldInstanceof(subtree, left, right);",
      "right" : "return tryFoldInstanceof(subtree, left, right);",
      "info" : "ReturnStatement[3710-3757]:ReturnStatement[3710-3757]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[3765-3780]:SwitchCase[3765-3780]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[3787-3801]:SwitchCase[3787-3801]"
    }, {
      "left" : "return tryFoldAndOr(subtree, left, right);",
      "right" : "return tryFoldAndOr(subtree, left, right);",
      "info" : "ReturnStatement[3810-3852]:ReturnStatement[3810-3852]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[3860-3875]:SwitchCase[3860-3875]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[3882-3897]:SwitchCase[3882-3897]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[3904-3920]:SwitchCase[3904-3920]"
    }, {
      "left" : "return tryFoldShift(subtree, left, right);",
      "right" : "return tryFoldShift(subtree, left, right);",
      "info" : "ReturnStatement[3929-3971]:ReturnStatement[3929-3971]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[3979-3997]:SwitchCase[3979-3997]"
    }, {
      "left" : "return tryFoldAssign(subtree, left, right);",
      "right" : "return tryFoldAssign(subtree, left, right);",
      "info" : "ReturnStatement[4006-4049]:ReturnStatement[4006-4049]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[4057-4081]:SwitchCase[4057-4081]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[4088-4113]:SwitchCase[4088-4113]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[4120-4145]:SwitchCase[4120-4145]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[4152-4174]:SwitchCase[4152-4174]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[4181-4203]:SwitchCase[4181-4203]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[4210-4233]:SwitchCase[4210-4233]"
    }, {
      "left" : "case Token.ASSIGN_ADD:",
      "right" : "case Token.ASSIGN_ADD:",
      "info" : "SwitchCase[4240-4262]:SwitchCase[4240-4262]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[4269-4291]:SwitchCase[4269-4291]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[4298-4320]:SwitchCase[4298-4320]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[4327-4349]:SwitchCase[4327-4349]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[4356-4378]:SwitchCase[4356-4378]"
    }, {
      "left" : "return tryUnfoldAssignOp(subtree, left, right);",
      "right" : "return tryUnfoldAssignOp(subtree, left, right);",
      "info" : "ReturnStatement[4387-4434]:ReturnStatement[4387-4434]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[4442-4457]:SwitchCase[4442-4457]"
    }, {
      "left" : "return tryFoldAdd(subtree, left, right);",
      "right" : "return tryFoldAdd(subtree, left, right);",
      "info" : "ReturnStatement[4466-4506]:ReturnStatement[4466-4506]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[4514-4529]:SwitchCase[4514-4529]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[4536-4551]:SwitchCase[4536-4551]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[4558-4573]:SwitchCase[4558-4573]"
    }, {
      "left" : "return tryFoldArithmeticOp(subtree, left, right);",
      "right" : "return tryFoldArithmeticOp(subtree, left, right);",
      "info" : "ReturnStatement[4582-4631]:ReturnStatement[4582-4631]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[4639-4654]:SwitchCase[4639-4654]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[4661-4679]:SwitchCase[4661-4679]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[4686-4703]:SwitchCase[4686-4703]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[4710-4728]:SwitchCase[4710-4728]"
    }, {
      "left" : "Node result = tryFoldArithmeticOp(subtree, left, right);",
      "right" : "Node result = tryFoldArithmeticOp(subtree, left, right);",
      "info" : "VariableDeclarationStatement[4737-4793]:VariableDeclarationStatement[4737-4793]"
    }, {
      "left" : "if (result != subtree)",
      "right" : "if (result != subtree)",
      "info" : "IfStatement[4802-4861]:IfStatement[4802-4861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4825-4861]:Block[4825-4861]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[4837-4851]:ReturnStatement[4837-4851]"
    }, {
      "left" : "return tryFoldLeftChildOp(subtree, left, right);",
      "right" : "return tryFoldLeftChildOp(subtree, left, right);",
      "info" : "ReturnStatement[4870-4918]:ReturnStatement[4870-4918]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[4926-4940]:SwitchCase[4926-4940]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[4947-4961]:SwitchCase[4947-4961]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[4968-4982]:SwitchCase[4968-4982]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[4989-5003]:SwitchCase[4989-5003]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[5010-5024]:SwitchCase[5010-5024]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[5031-5045]:SwitchCase[5031-5045]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[5052-5068]:SwitchCase[5052-5068]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[5075-5091]:SwitchCase[5075-5091]"
    }, {
      "left" : "return tryFoldComparison(subtree, left, right);",
      "right" : "return tryFoldComparison(subtree, left, right);",
      "info" : "ReturnStatement[5100-5147]:ReturnStatement[5100-5147]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[5155-5163]:SwitchCase[5155-5163]"
    }, {
      "left" : "return subtree;",
      "right" : "return subtree;",
      "info" : "ReturnStatement[5172-5187]:ReturnStatement[5172-5187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5236-5471]:Block[5236-5471]"
    }, {
      "left" : "Node child = n.getFirstChild();",
      "right" : "Node child = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[5242-5273]:VariableDeclarationStatement[5242-5273]"
    }, {
      "left" : "if (!child.isNumber() || child.getDouble() != 0.0)",
      "right" : "if (!child.isNumber() || child.getDouble() != 0.0)",
      "info" : "IfStatement[5278-5453]:IfStatement[5278-5453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5329-5453]:Block[5329-5453]"
    }, {
      "left" : "if (!mayHaveSideEffects(n))",
      "right" : "if (!mayHaveSideEffects(n))",
      "info" : "IfStatement[5337-5447]:IfStatement[5337-5447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5365-5447]:Block[5365-5447]"
    }, {
      "left" : "n.replaceChild(child, IR.number(0));",
      "right" : "n.replaceChild(child, IR.number(0));",
      "info" : "ExpressionStatement[5375-5411]:ExpressionStatement[5375-5411]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[5420-5439]:ExpressionStatement[5420-5439]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[5458-5467]:ReturnStatement[5458-5467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5519-6564]:Block[5519-6564]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.ADD:\n        Node left = n.getFirstChild();\n        Node right = n.getLastChild();\n        if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right)) {\n          tryConvertOperandsToNumber(n);\n        }\n        break;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n        // TODO(johnlenz): convert these to integers.\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_DIV:\n        tryConvertToNumber(n.getLastChild());\n        break;\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.SUB:\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:\n      case Token.POS:\n      case Token.NEG:\n        tryConvertOperandsToNumber(n);\n        break;\n    }",
      "info" : "SwitchStatement[5525-6560]:SwitchStatement[5525-6560]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[5554-5569]:SwitchCase[5554-5569]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[5578-5608]:VariableDeclarationStatement[5578-5608]"
    }, {
      "left" : "Node right = n.getLastChild();",
      "right" : "Node right = n.getLastChild();",
      "info" : "VariableDeclarationStatement[5617-5647]:VariableDeclarationStatement[5617-5647]"
    }, {
      "left" : "if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right))",
      "right" : "if (!NodeUtil.mayBeString(left) && !NodeUtil.mayBeString(right))",
      "info" : "IfStatement[5656-5773]:IfStatement[5656-5773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5721-5773]:Block[5721-5773]"
    }, {
      "left" : "tryConvertOperandsToNumber(n);",
      "right" : "tryConvertOperandsToNumber(n);",
      "info" : "ExpressionStatement[5733-5763]:ExpressionStatement[5733-5763]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5782-5788]:BreakStatement[5782-5788]"
    }, {
      "left" : "case Token.ASSIGN_BITOR:",
      "right" : "case Token.ASSIGN_BITOR:",
      "info" : "SwitchCase[5795-5819]:SwitchCase[5795-5819]"
    }, {
      "left" : "case Token.ASSIGN_BITXOR:",
      "right" : "case Token.ASSIGN_BITXOR:",
      "info" : "SwitchCase[5826-5851]:SwitchCase[5826-5851]"
    }, {
      "left" : "case Token.ASSIGN_BITAND:",
      "right" : "case Token.ASSIGN_BITAND:",
      "info" : "SwitchCase[5858-5883]:SwitchCase[5858-5883]"
    }, {
      "left" : "case Token.ASSIGN_LSH:",
      "right" : "case Token.ASSIGN_LSH:",
      "info" : "SwitchCase[5944-5966]:SwitchCase[5944-5966]"
    }, {
      "left" : "case Token.ASSIGN_RSH:",
      "right" : "case Token.ASSIGN_RSH:",
      "info" : "SwitchCase[5973-5995]:SwitchCase[5973-5995]"
    }, {
      "left" : "case Token.ASSIGN_URSH:",
      "right" : "case Token.ASSIGN_URSH:",
      "info" : "SwitchCase[6002-6025]:SwitchCase[6002-6025]"
    }, {
      "left" : "case Token.ASSIGN_SUB:",
      "right" : "case Token.ASSIGN_SUB:",
      "info" : "SwitchCase[6032-6054]:SwitchCase[6032-6054]"
    }, {
      "left" : "case Token.ASSIGN_MUL:",
      "right" : "case Token.ASSIGN_MUL:",
      "info" : "SwitchCase[6061-6083]:SwitchCase[6061-6083]"
    }, {
      "left" : "case Token.ASSIGN_MOD:",
      "right" : "case Token.ASSIGN_MOD:",
      "info" : "SwitchCase[6090-6112]:SwitchCase[6090-6112]"
    }, {
      "left" : "case Token.ASSIGN_DIV:",
      "right" : "case Token.ASSIGN_DIV:",
      "info" : "SwitchCase[6119-6141]:SwitchCase[6119-6141]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[6150-6187]:ExpressionStatement[6150-6187]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6196-6202]:BreakStatement[6196-6202]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[6209-6227]:SwitchCase[6209-6227]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[6234-6251]:SwitchCase[6234-6251]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[6258-6276]:SwitchCase[6258-6276]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[6283-6301]:SwitchCase[6283-6301]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[6308-6323]:SwitchCase[6308-6323]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[6330-6345]:SwitchCase[6330-6345]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[6352-6368]:SwitchCase[6352-6368]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[6375-6390]:SwitchCase[6375-6390]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[6397-6412]:SwitchCase[6397-6412]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[6419-6434]:SwitchCase[6419-6434]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[6441-6456]:SwitchCase[6441-6456]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[6463-6478]:SwitchCase[6463-6478]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[6485-6500]:SwitchCase[6485-6500]"
    }, {
      "left" : "tryConvertOperandsToNumber(n);",
      "right" : "tryConvertOperandsToNumber(n);",
      "info" : "ExpressionStatement[6509-6539]:ExpressionStatement[6509-6539]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6548-6554]:BreakStatement[6548-6554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6616-6757]:Block[6616-6757]"
    }, {
      "left" : "Node next;",
      "right" : "Node next;",
      "info" : "VariableDeclarationStatement[6622-6632]:VariableDeclarationStatement[6622-6632]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = next)",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = next)",
      "info" : "ForStatement[6637-6753]:ForStatement[6637-6753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6691-6753]:Block[6691-6753]"
    }, {
      "left" : "next = c.getNext();",
      "right" : "next = c.getNext();",
      "info" : "ExpressionStatement[6699-6718]:ExpressionStatement[6699-6718]"
    }, {
      "left" : "tryConvertToNumber(c);",
      "right" : "tryConvertToNumber(c);",
      "info" : "ExpressionStatement[6725-6747]:ExpressionStatement[6725-6747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6801-7587]:Block[6801-7587]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NUMBER:\n        // Nothing to do\n        return;\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.HOOK:\n        tryConvertToNumber(n.getChildAtIndex(1));\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.NAME:\n        if (!NodeUtil.isUndefined(n)) {\n          return;\n        }\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NUMBER:\n        // Nothing to do\n        return;\n      case Token.AND:\n      case Token.OR:\n      case Token.COMMA:\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.HOOK:\n        tryConvertToNumber(n.getChildAtIndex(1));\n        tryConvertToNumber(n.getLastChild());\n        return;\n      case Token.NAME:\n        if (!NodeUtil.isUndefined(n)) {\n          return;\n        }\n        break;\n    }",
      "info" : "SwitchStatement[6807-7271]:SwitchStatement[6807-7271]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[6836-6854]:SwitchCase[6836-6854]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[6888-6895]:ReturnStatement[6888-6895]"
    }, {
      "left" : "case Token.AND:",
      "right" : "case Token.AND:",
      "info" : "SwitchCase[6902-6917]:SwitchCase[6902-6917]"
    }, {
      "left" : "case Token.OR:",
      "right" : "case Token.OR:",
      "info" : "SwitchCase[6924-6938]:SwitchCase[6924-6938]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[6945-6962]:SwitchCase[6945-6962]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[6971-7008]:ExpressionStatement[6971-7008]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7017-7024]:ReturnStatement[7017-7024]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[7031-7047]:SwitchCase[7031-7047]"
    }, {
      "left" : "tryConvertToNumber(n.getChildAtIndex(1));",
      "right" : "tryConvertToNumber(n.getChildAtIndex(1));",
      "info" : "ExpressionStatement[7056-7097]:ExpressionStatement[7056-7097]"
    }, {
      "left" : "tryConvertToNumber(n.getLastChild());",
      "right" : "tryConvertToNumber(n.getLastChild());",
      "info" : "ExpressionStatement[7106-7143]:ExpressionStatement[7106-7143]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7152-7159]:ReturnStatement[7152-7159]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[7166-7182]:SwitchCase[7166-7182]"
    }, {
      "left" : "if (!NodeUtil.isUndefined(n))",
      "right" : "if (!NodeUtil.isUndefined(n))",
      "info" : "IfStatement[7191-7250]:IfStatement[7191-7250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7221-7250]:Block[7221-7250]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7233-7240]:ReturnStatement[7233-7240]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7259-7265]:BreakStatement[7259-7265]"
    }, {
      "left" : "Double result = NodeUtil.getNumberValue(n);",
      "right" : "Double result = NodeUtil.getNumberValue(n);",
      "info" : "VariableDeclarationStatement[7277-7320]:VariableDeclarationStatement[7277-7320]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[7325-7366]:IfStatement[7325-7366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7345-7366]:Block[7345-7366]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7353-7360]:ReturnStatement[7353-7360]"
    }, {
      "left" : "double value = result;",
      "right" : "double value = result;",
      "info" : "VariableDeclarationStatement[7372-7394]:VariableDeclarationStatement[7372-7394]"
    }, {
      "left" : "Node replacement = NodeUtil.numberNode(value, n);",
      "right" : "Node replacement = NodeUtil.numberNode(value, n);",
      "info" : "VariableDeclarationStatement[7400-7449]:VariableDeclarationStatement[7400-7449]"
    }, {
      "left" : "if (replacement.isEquivalentTo(n))",
      "right" : "if (replacement.isEquivalentTo(n))",
      "info" : "IfStatement[7454-7510]:IfStatement[7454-7510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7489-7510]:Block[7489-7510]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7497-7504]:ReturnStatement[7497-7504]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[7516-7559]:ExpressionStatement[7516-7559]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[7564-7583]:ExpressionStatement[7564-7583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7766-9168]:Block[7766-9168]"
    }, {
      "left" : "Preconditions.checkArgument(originalTypeofNode.isTypeOf());",
      "right" : "Preconditions.checkArgument(originalTypeofNode.isTypeOf());",
      "info" : "ExpressionStatement[7772-7831]:ExpressionStatement[7772-7831]"
    }, {
      "left" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "right" : "Node argumentNode = originalTypeofNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[7837-7892]:VariableDeclarationStatement[7837-7892]"
    }, {
      "left" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true))",
      "right" : "if (argumentNode == null || !NodeUtil.isLiteralValue(argumentNode, true))",
      "info" : "IfStatement[7897-8011]:IfStatement[7897-8011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7971-8011]:Block[7971-8011]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[7979-8005]:ReturnStatement[7979-8005]"
    }, {
      "left" : "String typeNameString = null;",
      "right" : "String typeNameString = null;",
      "info" : "VariableDeclarationStatement[8017-8046]:VariableDeclarationStatement[8017-8046]"
    }, {
      "left" : "switch (argumentNode.getType()) {\n      case Token.FUNCTION:\n        typeNameString = \"function\";\n        break;\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "right" : "switch (argumentNode.getType()) {\n      case Token.FUNCTION:\n        typeNameString = \"function\";\n        break;\n      case Token.STRING:\n        typeNameString = \"string\";\n        break;\n      case Token.NUMBER:\n        typeNameString = \"number\";\n        break;\n      case Token.TRUE:\n      case Token.FALSE:\n        typeNameString = \"boolean\";\n        break;\n      case Token.NULL:\n      case Token.OBJECTLIT:\n      case Token.ARRAYLIT:\n        typeNameString = \"object\";\n        break;\n      case Token.VOID:\n        typeNameString = \"undefined\";\n        break;\n      case Token.NAME:\n        // We assume here that programs don't change the value of the\n        // keyword undefined to something other than the value undefined.\n        if (\"undefined\".equals(argumentNode.getString())) {\n          typeNameString = \"undefined\";\n        }\n        break;\n    }",
      "info" : "SwitchStatement[8052-8914]:SwitchStatement[8052-8914]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[8092-8112]:SwitchCase[8092-8112]"
    }, {
      "left" : "typeNameString = \"function\";",
      "right" : "typeNameString = \"function\";",
      "info" : "ExpressionStatement[8121-8149]:ExpressionStatement[8121-8149]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8158-8164]:BreakStatement[8158-8164]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[8171-8189]:SwitchCase[8171-8189]"
    }, {
      "left" : "typeNameString = \"string\";",
      "right" : "typeNameString = \"string\";",
      "info" : "ExpressionStatement[8198-8224]:ExpressionStatement[8198-8224]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8233-8239]:BreakStatement[8233-8239]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[8246-8264]:SwitchCase[8246-8264]"
    }, {
      "left" : "typeNameString = \"number\";",
      "right" : "typeNameString = \"number\";",
      "info" : "ExpressionStatement[8273-8299]:ExpressionStatement[8273-8299]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8308-8314]:BreakStatement[8308-8314]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[8321-8337]:SwitchCase[8321-8337]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[8344-8361]:SwitchCase[8344-8361]"
    }, {
      "left" : "typeNameString = \"boolean\";",
      "right" : "typeNameString = \"boolean\";",
      "info" : "ExpressionStatement[8370-8397]:ExpressionStatement[8370-8397]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8406-8412]:BreakStatement[8406-8412]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[8419-8435]:SwitchCase[8419-8435]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[8442-8463]:SwitchCase[8442-8463]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[8470-8490]:SwitchCase[8470-8490]"
    }, {
      "left" : "typeNameString = \"object\";",
      "right" : "typeNameString = \"object\";",
      "info" : "ExpressionStatement[8499-8525]:ExpressionStatement[8499-8525]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8534-8540]:BreakStatement[8534-8540]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[8547-8563]:SwitchCase[8547-8563]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[8572-8601]:ExpressionStatement[8572-8601]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8610-8616]:BreakStatement[8610-8616]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[8623-8639]:SwitchCase[8623-8639]"
    }, {
      "left" : "if (\"undefined\".equals(argumentNode.getString()))",
      "right" : "if (\"undefined\".equals(argumentNode.getString()))",
      "info" : "IfStatement[8792-8893]:IfStatement[8792-8893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8842-8893]:Block[8842-8893]"
    }, {
      "left" : "typeNameString = \"undefined\";",
      "right" : "typeNameString = \"undefined\";",
      "info" : "ExpressionStatement[8854-8883]:ExpressionStatement[8854-8883]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8902-8908]:BreakStatement[8902-8908]"
    }, {
      "left" : "if (typeNameString != null)",
      "right" : "if (typeNameString != null)",
      "info" : "IfStatement[8920-9132]:IfStatement[8920-9132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8948-9132]:Block[8948-9132]"
    }, {
      "left" : "Node newNode = IR.string(typeNameString);",
      "right" : "Node newNode = IR.string(typeNameString);",
      "info" : "VariableDeclarationStatement[8956-8997]:VariableDeclarationStatement[8956-8997]"
    }, {
      "left" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "right" : "originalTypeofNode.getParent().replaceChild(originalTypeofNode, newNode);",
      "info" : "ExpressionStatement[9004-9077]:ExpressionStatement[9004-9077]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9084-9103]:ExpressionStatement[9084-9103]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[9111-9126]:ReturnStatement[9111-9126]"
    }, {
      "left" : "return originalTypeofNode;",
      "right" : "return originalTypeofNode;",
      "info" : "ReturnStatement[9138-9164]:ReturnStatement[9138-9164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9214-12098]:Block[9214-12098]"
    }, {
      "left" : "Preconditions.checkState(n.hasOneChild());",
      "right" : "Preconditions.checkState(n.hasOneChild());",
      "info" : "ExpressionStatement[9220-9262]:ExpressionStatement[9220-9262]"
    }, {
      "left" : "Node left = n.getFirstChild();",
      "right" : "Node left = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[9268-9298]:VariableDeclarationStatement[9268-9298]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[9303-9331]:VariableDeclarationStatement[9303-9331]"
    }, {
      "left" : "if (left == null)",
      "right" : "if (left == null)",
      "info" : "IfStatement[9337-9378]:IfStatement[9337-9378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9355-9378]:Block[9355-9378]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9363-9372]:ReturnStatement[9363-9372]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getPureBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getPureBooleanValue(left);",
      "info" : "VariableDeclarationStatement[9384-9442]:VariableDeclarationStatement[9384-9442]"
    }, {
      "left" : "if (leftVal == TernaryValue.UNKNOWN)",
      "right" : "if (leftVal == TernaryValue.UNKNOWN)",
      "info" : "IfStatement[9447-9507]:IfStatement[9447-9507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9484-9507]:Block[9484-9507]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9492-9501]:ReturnStatement[9492-9501]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.NOT:\n        // Don't fold !0 and !1 back to false.\n        if (late && left.isNumber()) {\n          double numValue = left.getDouble();\n          if (numValue == 0 || numValue == 1) {\n            return n;\n          }\n        }\n        Node replacementNode = NodeUtil.booleanNode(!leftVal.toBoolean(true));\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.POS:\n        if (NodeUtil.isNumericResult(left)) {\n          // POS does nothing to numeric values.\n          parent.replaceChild(n, left.detachFromParent());\n          reportCodeChange();\n          return left;\n        }\n        return n;\n      case Token.NEG:\n        try {\n          if (left.isName()) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = IR.number(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = IR.number(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.NOT:\n        // Don't fold !0 and !1 back to false.\n        if (late && left.isNumber()) {\n          double numValue = left.getDouble();\n          if (numValue == 0 || numValue == 1) {\n            return n;\n          }\n        }\n        Node replacementNode = NodeUtil.booleanNode(!leftVal.toBoolean(true));\n        parent.replaceChild(n, replacementNode);\n        reportCodeChange();\n        return replacementNode;\n      case Token.POS:\n        if (NodeUtil.isNumericResult(left)) {\n          // POS does nothing to numeric values.\n          parent.replaceChild(n, left.detachFromParent());\n          reportCodeChange();\n          return left;\n        }\n        return n;\n      case Token.NEG:\n        try {\n          if (left.isName()) {\n            if (left.getString().equals(\"Infinity\")) {\n              // \"-Infinity\" is valid and a literal, don't modify it.\n              return n;\n            } else if (left.getString().equals(\"NaN\")) {\n              // \"-NaN\" is \"NaN\".\n              n.removeChild(left);\n              parent.replaceChild(n, left);\n              reportCodeChange();\n              return left;\n            }\n          }\n\n          double negNum = -left.getDouble();\n\n          Node negNumNode = IR.number(negNum);\n          parent.replaceChild(n, negNumNode);\n          reportCodeChange();\n          return negNumNode;\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n      case Token.BITNOT:\n        try {\n          double val = left.getDouble();\n          if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE) {\n            int intVal = (int) val;\n            if (intVal == val) {\n              Node notIntValNode = IR.number(~intVal);\n              parent.replaceChild(n, notIntValNode);\n              reportCodeChange();\n              return notIntValNode;\n            } else {\n              error(FRACTIONAL_BITWISE_OPERAND, left);\n              return n;\n            }\n          } else {\n            error(BITWISE_OPERAND_OUT_OF_RANGE, left);\n            return n;\n          }\n        } catch (UnsupportedOperationException ex) {\n          // left is not a number node, so do not replace, but warn the\n          // user because they can't be doing anything good\n          error(NEGATING_A_NON_NUMBER_ERROR, left);\n          return n;\n        }\n        default:\n          return n;\n    }",
      "info" : "SwitchStatement[9513-12094]:SwitchStatement[9513-12094]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[9542-9557]:SwitchCase[9542-9557]"
    }, {
      "left" : "if (late && left.isNumber())",
      "right" : "if (late && left.isNumber())",
      "info" : "IfStatement[9613-9781]:IfStatement[9613-9781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9642-9781]:Block[9642-9781]"
    }, {
      "left" : "double numValue = left.getDouble();",
      "right" : "double numValue = left.getDouble();",
      "info" : "VariableDeclarationStatement[9654-9689]:VariableDeclarationStatement[9654-9689]"
    }, {
      "left" : "if (numValue == 0 || numValue == 1)",
      "right" : "if (numValue == 0 || numValue == 1)",
      "info" : "IfStatement[9700-9771]:IfStatement[9700-9771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9736-9771]:Block[9736-9771]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9750-9759]:ReturnStatement[9750-9759]"
    }, {
      "left" : "Node replacementNode = NodeUtil.booleanNode(!leftVal.toBoolean(true));",
      "right" : "Node replacementNode = NodeUtil.booleanNode(!leftVal.toBoolean(true));",
      "info" : "VariableDeclarationStatement[9790-9860]:VariableDeclarationStatement[9790-9860]"
    }, {
      "left" : "parent.replaceChild(n, replacementNode);",
      "right" : "parent.replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[9869-9909]:ExpressionStatement[9869-9909]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[9918-9937]:ExpressionStatement[9918-9937]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[9946-9969]:ReturnStatement[9946-9969]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[9976-9991]:SwitchCase[9976-9991]"
    }, {
      "left" : "if (NodeUtil.isNumericResult(left))",
      "right" : "if (NodeUtil.isNumericResult(left))",
      "info" : "IfStatement[10000-10208]:IfStatement[10000-10208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10036-10208]:Block[10036-10208]"
    }, {
      "left" : "parent.replaceChild(n, left.detachFromParent());",
      "right" : "parent.replaceChild(n, left.detachFromParent());",
      "info" : "ExpressionStatement[10097-10145]:ExpressionStatement[10097-10145]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10156-10175]:ExpressionStatement[10156-10175]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[10186-10198]:ReturnStatement[10186-10198]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10217-10226]:ReturnStatement[10217-10226]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[10233-10248]:SwitchCase[10233-10248]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10257-11165]:TryStatement[10257-11165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10261-10908]:Block[10261-10908]"
    }, {
      "left" : "if (left.isName())",
      "right" : "if (left.isName())",
      "info" : "IfStatement[10273-10699]:IfStatement[10273-10699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10292-10699]:Block[10292-10699]"
    }, {
      "left" : "if (left.getString().equals(\"Infinity\"))",
      "right" : "if (left.getString().equals(\"Infinity\"))",
      "info" : "IfStatement[10306-10687]:IfStatement[10306-10687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10347-10456]:Block[10347-10456]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[10433-10442]:ReturnStatement[10433-10442]"
    }, {
      "left" : "if (left.getString().equals(\"NaN\"))",
      "right" : "if (left.getString().equals(\"NaN\"))",
      "info" : "IfStatement[10462-10687]:IfStatement[10462-10687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10498-10687]:Block[10498-10687]"
    }, {
      "left" : "n.removeChild(left);",
      "right" : "n.removeChild(left);",
      "info" : "ExpressionStatement[10548-10568]:ExpressionStatement[10548-10568]"
    }, {
      "left" : "parent.replaceChild(n, left);",
      "right" : "parent.replaceChild(n, left);",
      "info" : "ExpressionStatement[10583-10612]:ExpressionStatement[10583-10612]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10627-10646]:ExpressionStatement[10627-10646]"
    }, {
      "left" : "return left;",
      "right" : "return left;",
      "info" : "ReturnStatement[10661-10673]:ReturnStatement[10661-10673]"
    }, {
      "left" : "double negNum = -left.getDouble();",
      "right" : "double negNum = -left.getDouble();",
      "info" : "VariableDeclarationStatement[10711-10745]:VariableDeclarationStatement[10711-10745]"
    }, {
      "left" : "Node negNumNode = IR.number(negNum);",
      "right" : "Node negNumNode = IR.number(negNum);",
      "info" : "VariableDeclarationStatement[10757-10793]:VariableDeclarationStatement[10757-10793]"
    }, {
      "left" : "parent.replaceChild(n, negNumNode);",
      "right" : "parent.replaceChild(n, negNumNode);",
      "info" : "ExpressionStatement[10804-10839]:ExpressionStatement[10804-10839]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[10850-10869]:ExpressionStatement[10850-10869]"
    }, {
      "left" : "return negNumNode;",
      "right" : "return negNumNode;",
      "info" : "ReturnStatement[10880-10898]:ReturnStatement[10880-10898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10950-11165]:Block[10950-11165]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[11094-11135]:ExpressionStatement[11094-11135]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11146-11155]:ReturnStatement[11146-11155]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[11172-11190]:SwitchCase[11172-11190]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11199-12051]:TryStatement[11199-12051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11203-11794]:Block[11203-11794]"
    }, {
      "left" : "double val = left.getDouble();",
      "right" : "double val = left.getDouble();",
      "info" : "VariableDeclarationStatement[11215-11245]:VariableDeclarationStatement[11215-11245]"
    }, {
      "left" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "right" : "if (val >= Integer.MIN_VALUE && val <= Integer.MAX_VALUE)",
      "info" : "IfStatement[11256-11784]:IfStatement[11256-11784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11314-11688]:Block[11314-11688]"
    }, {
      "left" : "int intVal = (int) val;",
      "right" : "int intVal = (int) val;",
      "info" : "VariableDeclarationStatement[11328-11351]:VariableDeclarationStatement[11328-11351]"
    }, {
      "left" : "if (intVal == val)",
      "right" : "if (intVal == val)",
      "info" : "IfStatement[11364-11676]:IfStatement[11364-11676]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11383-11576]:Block[11383-11576]"
    }, {
      "left" : "Node notIntValNode = IR.number(~intVal);",
      "right" : "Node notIntValNode = IR.number(~intVal);",
      "info" : "VariableDeclarationStatement[11399-11439]:VariableDeclarationStatement[11399-11439]"
    }, {
      "left" : "parent.replaceChild(n, notIntValNode);",
      "right" : "parent.replaceChild(n, notIntValNode);",
      "info" : "ExpressionStatement[11454-11492]:ExpressionStatement[11454-11492]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[11507-11526]:ExpressionStatement[11507-11526]"
    }, {
      "left" : "return notIntValNode;",
      "right" : "return notIntValNode;",
      "info" : "ReturnStatement[11541-11562]:ReturnStatement[11541-11562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11582-11676]:Block[11582-11676]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[11598-11638]:ExpressionStatement[11598-11638]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11653-11662]:ReturnStatement[11653-11662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11694-11784]:Block[11694-11784]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[11708-11750]:ExpressionStatement[11708-11750]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[11763-11772]:ReturnStatement[11763-11772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11836-12051]:Block[11836-12051]"
    }, {
      "left" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "right" : "error(NEGATING_A_NON_NUMBER_ERROR, left);",
      "info" : "ExpressionStatement[11980-12021]:ExpressionStatement[11980-12021]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12032-12041]:ReturnStatement[12032-12041]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12060-12068]:SwitchCase[12060-12068]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12079-12088]:ReturnStatement[12079-12088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12264-12977]:Block[12264-12977]"
    }, {
      "left" : "Preconditions.checkArgument(n.isInstanceOf());",
      "right" : "Preconditions.checkArgument(n.isInstanceOf());",
      "info" : "ExpressionStatement[12270-12316]:ExpressionStatement[12270-12316]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, true)\n        && !mayHaveSideEffects(right))",
      "right" : "if (NodeUtil.isLiteralValue(left, true)\n        && !mayHaveSideEffects(right))",
      "info" : "IfStatement[12405-12958]:IfStatement[12405-12958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12484-12958]:Block[12484-12958]"
    }, {
      "left" : "Node replacementNode = null;",
      "right" : "Node replacementNode = null;",
      "info" : "VariableDeclarationStatement[12493-12521]:VariableDeclarationStatement[12493-12521]"
    }, {
      "left" : "if (NodeUtil.isImmutableValue(left))",
      "right" : "if (NodeUtil.isImmutableValue(left))",
      "info" : "IfStatement[12529-12790]:IfStatement[12529-12790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12566-12666]:Block[12566-12666]"
    }, {
      "left" : "replacementNode = IR.falseNode();",
      "right" : "replacementNode = IR.falseNode();",
      "info" : "ExpressionStatement[12625-12658]:ExpressionStatement[12625-12658]"
    }, {
      "left" : "if (right.isName()\n          && \"Object\".equals(right.getString()))",
      "right" : "if (right.isName()\n          && \"Object\".equals(right.getString()))",
      "info" : "IfStatement[12672-12790]:IfStatement[12672-12790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12740-12790]:Block[12740-12790]"
    }, {
      "left" : "replacementNode = IR.trueNode();",
      "right" : "replacementNode = IR.trueNode();",
      "info" : "ExpressionStatement[12750-12782]:ExpressionStatement[12750-12782]"
    }, {
      "left" : "if (replacementNode != null)",
      "right" : "if (replacementNode != null)",
      "info" : "IfStatement[12798-12952]:IfStatement[12798-12952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12827-12952]:Block[12827-12952]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacementNode);",
      "right" : "n.getParent().replaceChild(n, replacementNode);",
      "info" : "ExpressionStatement[12837-12884]:ExpressionStatement[12837-12884]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[12893-12912]:ExpressionStatement[12893-12912]"
    }, {
      "left" : "return replacementNode;",
      "right" : "return replacementNode;",
      "info" : "ReturnStatement[12921-12944]:ReturnStatement[12921-12944]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[12964-12973]:ReturnStatement[12964-12973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13039-14822]:Block[13039-14822]"
    }, {
      "left" : "Preconditions.checkArgument(n.isAssign());",
      "right" : "Preconditions.checkArgument(n.isAssign());",
      "info" : "ExpressionStatement[13045-13087]:ExpressionStatement[13045-13087]"
    }, {
      "left" : "if (!late)",
      "right" : "if (!late)",
      "info" : "IfStatement[13093-13127]:IfStatement[13093-13127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13104-13127]:Block[13104-13127]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13112-13121]:ReturnStatement[13112-13121]"
    }, {
      "left" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "right" : "if (!right.hasChildren() ||\n        right.getFirstChild().getNext() != right.getLastChild())",
      "info" : "IfStatement[13178-13331]:IfStatement[13178-13331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13271-13331]:Block[13271-13331]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13316-13325]:ReturnStatement[13316-13325]"
    }, {
      "left" : "if (mayHaveSideEffects(left))",
      "right" : "if (mayHaveSideEffects(left))",
      "info" : "IfStatement[13337-13390]:IfStatement[13337-13390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13367-13390]:Block[13367-13390]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13375-13384]:ReturnStatement[13375-13384]"
    }, {
      "left" : "Node newRight;",
      "right" : "Node newRight;",
      "info" : "VariableDeclarationStatement[13396-13410]:VariableDeclarationStatement[13396-13410]"
    }, {
      "left" : "if (areNodesEqualForInlining(left, right.getFirstChild()))",
      "right" : "if (areNodesEqualForInlining(left, right.getFirstChild()))",
      "info" : "IfStatement[13415-13713]:IfStatement[13415-13713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13474-13520]:Block[13474-13520]"
    }, {
      "left" : "newRight = right.getLastChild();",
      "right" : "newRight = right.getLastChild();",
      "info" : "ExpressionStatement[13482-13514]:ExpressionStatement[13482-13514]"
    }, {
      "left" : "if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild()))",
      "right" : "if (NodeUtil.isCommutative(right.getType()) &&\n          areNodesEqualForInlining(left, right.getLastChild()))",
      "info" : "IfStatement[13526-13713]:IfStatement[13526-13713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13637-13684]:Block[13637-13684]"
    }, {
      "left" : "newRight = right.getFirstChild();",
      "right" : "newRight = right.getFirstChild();",
      "info" : "ExpressionStatement[13645-13678]:ExpressionStatement[13645-13678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13690-13713]:Block[13690-13713]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[13698-13707]:ReturnStatement[13698-13707]"
    }, {
      "left" : "int newType = -1;",
      "right" : "int newType = -1;",
      "info" : "VariableDeclarationStatement[13719-13736]:VariableDeclarationStatement[13719-13736]"
    }, {
      "left" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "right" : "switch (right.getType()) {\n      case Token.ADD:\n        newType = Token.ASSIGN_ADD;\n        break;\n      case Token.BITAND:\n        newType = Token.ASSIGN_BITAND;\n        break;\n      case Token.BITOR:\n        newType = Token.ASSIGN_BITOR;\n        break;\n      case Token.BITXOR:\n        newType = Token.ASSIGN_BITXOR;\n        break;\n      case Token.DIV:\n        newType = Token.ASSIGN_DIV;\n        break;\n      case Token.LSH:\n        newType = Token.ASSIGN_LSH;\n        break;\n      case Token.MOD:\n        newType = Token.ASSIGN_MOD;\n        break;\n      case Token.MUL:\n        newType = Token.ASSIGN_MUL;\n        break;\n      case Token.RSH:\n        newType = Token.ASSIGN_RSH;\n        break;\n      case Token.SUB:\n        newType = Token.ASSIGN_SUB;\n        break;\n      case Token.URSH:\n        newType = Token.ASSIGN_URSH;\n        break;\n      default:\n        return n;\n    }",
      "info" : "SwitchStatement[13741-14627]:SwitchStatement[13741-14627]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[13774-13789]:SwitchCase[13774-13789]"
    }, {
      "left" : "newType = Token.ASSIGN_ADD;",
      "right" : "newType = Token.ASSIGN_ADD;",
      "info" : "ExpressionStatement[13798-13825]:ExpressionStatement[13798-13825]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13834-13840]:BreakStatement[13834-13840]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[13847-13865]:SwitchCase[13847-13865]"
    }, {
      "left" : "newType = Token.ASSIGN_BITAND;",
      "right" : "newType = Token.ASSIGN_BITAND;",
      "info" : "ExpressionStatement[13874-13904]:ExpressionStatement[13874-13904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13913-13919]:BreakStatement[13913-13919]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[13926-13943]:SwitchCase[13926-13943]"
    }, {
      "left" : "newType = Token.ASSIGN_BITOR;",
      "right" : "newType = Token.ASSIGN_BITOR;",
      "info" : "ExpressionStatement[13952-13981]:ExpressionStatement[13952-13981]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13990-13996]:BreakStatement[13990-13996]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[14003-14021]:SwitchCase[14003-14021]"
    }, {
      "left" : "newType = Token.ASSIGN_BITXOR;",
      "right" : "newType = Token.ASSIGN_BITXOR;",
      "info" : "ExpressionStatement[14030-14060]:ExpressionStatement[14030-14060]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14069-14075]:BreakStatement[14069-14075]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[14082-14097]:SwitchCase[14082-14097]"
    }, {
      "left" : "newType = Token.ASSIGN_DIV;",
      "right" : "newType = Token.ASSIGN_DIV;",
      "info" : "ExpressionStatement[14106-14133]:ExpressionStatement[14106-14133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14142-14148]:BreakStatement[14142-14148]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[14155-14170]:SwitchCase[14155-14170]"
    }, {
      "left" : "newType = Token.ASSIGN_LSH;",
      "right" : "newType = Token.ASSIGN_LSH;",
      "info" : "ExpressionStatement[14179-14206]:ExpressionStatement[14179-14206]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14215-14221]:BreakStatement[14215-14221]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[14228-14243]:SwitchCase[14228-14243]"
    }, {
      "left" : "newType = Token.ASSIGN_MOD;",
      "right" : "newType = Token.ASSIGN_MOD;",
      "info" : "ExpressionStatement[14252-14279]:ExpressionStatement[14252-14279]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14288-14294]:BreakStatement[14288-14294]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[14301-14316]:SwitchCase[14301-14316]"
    }, {
      "left" : "newType = Token.ASSIGN_MUL;",
      "right" : "newType = Token.ASSIGN_MUL;",
      "info" : "ExpressionStatement[14325-14352]:ExpressionStatement[14325-14352]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14361-14367]:BreakStatement[14361-14367]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[14374-14389]:SwitchCase[14374-14389]"
    }, {
      "left" : "newType = Token.ASSIGN_RSH;",
      "right" : "newType = Token.ASSIGN_RSH;",
      "info" : "ExpressionStatement[14398-14425]:ExpressionStatement[14398-14425]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14434-14440]:BreakStatement[14434-14440]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[14447-14462]:SwitchCase[14447-14462]"
    }, {
      "left" : "newType = Token.ASSIGN_SUB;",
      "right" : "newType = Token.ASSIGN_SUB;",
      "info" : "ExpressionStatement[14471-14498]:ExpressionStatement[14471-14498]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14507-14513]:BreakStatement[14507-14513]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[14520-14536]:SwitchCase[14520-14536]"
    }, {
      "left" : "newType = Token.ASSIGN_URSH;",
      "right" : "newType = Token.ASSIGN_URSH;",
      "info" : "ExpressionStatement[14545-14573]:ExpressionStatement[14545-14573]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14582-14588]:BreakStatement[14582-14588]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14595-14603]:SwitchCase[14595-14603]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14612-14621]:ReturnStatement[14612-14621]"
    }, {
      "left" : "Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());",
      "right" : "Node newNode = new Node(newType,\n        left.detachFromParent(), newRight.detachFromParent());",
      "info" : "VariableDeclarationStatement[14633-14728]:VariableDeclarationStatement[14633-14728]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[14733-14772]:ExpressionStatement[14733-14772]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[14778-14797]:ExpressionStatement[14778-14797]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[14803-14818]:ReturnStatement[14803-14818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14888-15439]:Block[14888-15439]"
    }, {
      "left" : "if (late)",
      "right" : "if (late)",
      "info" : "IfStatement[14894-14927]:IfStatement[14894-14927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14904-14927]:Block[14904-14927]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[14912-14921]:ReturnStatement[14912-14921]"
    }, {
      "left" : "if (!n.hasChildren() ||\n        n.getFirstChild().getNext() != n.getLastChild())",
      "right" : "if (!n.hasChildren() ||\n        n.getFirstChild().getNext() != n.getLastChild())",
      "info" : "IfStatement[14933-15037]:IfStatement[14933-15037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15014-15037]:Block[15014-15037]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15022-15031]:ReturnStatement[15022-15031]"
    }, {
      "left" : "if (mayHaveSideEffects(left))",
      "right" : "if (mayHaveSideEffects(left))",
      "info" : "IfStatement[15043-15096]:IfStatement[15043-15096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15073-15096]:Block[15073-15096]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[15081-15090]:ReturnStatement[15081-15090]"
    }, {
      "left" : "int op = NodeUtil.getOpFromAssignmentOp(n);",
      "right" : "int op = NodeUtil.getOpFromAssignmentOp(n);",
      "info" : "VariableDeclarationStatement[15147-15190]:VariableDeclarationStatement[15147-15190]"
    }, {
      "left" : "Node replacement = IR.assign(left.detachFromParent(),\n        new Node(op, left.cloneTree(), right.detachFromParent())\n            .srcref(n));",
      "right" : "Node replacement = IR.assign(left.detachFromParent(),\n        new Node(op, left.cloneTree(), right.detachFromParent())\n            .srcref(n));",
      "info" : "VariableDeclarationStatement[15195-15338]:VariableDeclarationStatement[15195-15338]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[15343-15386]:ExpressionStatement[15343-15386]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[15391-15410]:ExpressionStatement[15391-15410]"
    }, {
      "left" : "return replacement;",
      "right" : "return replacement;",
      "info" : "ReturnStatement[15416-15435]:ReturnStatement[15416-15435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15544-16427]:Block[15544-16427]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[15550-15578]:VariableDeclarationStatement[15550-15578]"
    }, {
      "left" : "Node result = null;",
      "right" : "Node result = null;",
      "info" : "VariableDeclarationStatement[15584-15603]:VariableDeclarationStatement[15584-15603]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[15609-15632]:VariableDeclarationStatement[15609-15632]"
    }, {
      "left" : "TernaryValue leftVal = NodeUtil.getImpureBooleanValue(left);",
      "right" : "TernaryValue leftVal = NodeUtil.getImpureBooleanValue(left);",
      "info" : "VariableDeclarationStatement[15638-15698]:VariableDeclarationStatement[15638-15698]"
    }, {
      "left" : "if (leftVal != TernaryValue.UNKNOWN)",
      "right" : "if (leftVal != TernaryValue.UNKNOWN)",
      "info" : "IfStatement[15704-16114]:IfStatement[15704-16114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15741-16114]:Block[15741-16114]"
    }, {
      "left" : "boolean lval = leftVal.toBoolean(true);",
      "right" : "boolean lval = leftVal.toBoolean(true);",
      "info" : "VariableDeclarationStatement[15749-15788]:VariableDeclarationStatement[15749-15788]"
    }, {
      "left" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "right" : "if (lval && type == Token.OR ||\n          !lval && type == Token.AND)",
      "info" : "IfStatement[15878-16108]:IfStatement[15878-16108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15948-15981]:Block[15948-15981]"
    }, {
      "left" : "result = left;",
      "right" : "result = left;",
      "info" : "ExpressionStatement[15958-15972]:ExpressionStatement[15958-15972]"
    }, {
      "left" : "if (!mayHaveSideEffects(left))",
      "right" : "if (!mayHaveSideEffects(left))",
      "info" : "IfStatement[15987-16108]:IfStatement[15987-16108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16018-16108]:Block[16018-16108]"
    }, {
      "left" : "result = right;",
      "right" : "result = right;",
      "info" : "ExpressionStatement[16085-16100]:ExpressionStatement[16085-16100]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[16234-16423]:IfStatement[16234-16423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16254-16394]:Block[16254-16394]"
    }, {
      "left" : "n.removeChild(result);",
      "right" : "n.removeChild(result);",
      "info" : "ExpressionStatement[16280-16302]:ExpressionStatement[16280-16302]"
    }, {
      "left" : "parent.replaceChild(n, result);",
      "right" : "parent.replaceChild(n, result);",
      "info" : "ExpressionStatement[16309-16340]:ExpressionStatement[16309-16340]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[16347-16366]:ExpressionStatement[16347-16366]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[16374-16388]:ReturnStatement[16374-16388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16400-16423]:Block[16400-16423]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[16408-16417]:ReturnStatement[16408-16417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16924-18589]:Block[16924-18589]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(right, false) &&\n        left.isAdd())",
      "right" : "if (NodeUtil.isLiteralValue(right, false) &&\n        left.isAdd())",
      "info" : "IfStatement[16931-17743]:IfStatement[16931-17743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16998-17743]:Block[16998-17743]"
    }, {
      "left" : "Node ll = left.getFirstChild();",
      "right" : "Node ll = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[17007-17038]:VariableDeclarationStatement[17007-17038]"
    }, {
      "left" : "Node lr = ll.getNext();",
      "right" : "Node lr = ll.getNext();",
      "info" : "VariableDeclarationStatement[17045-17068]:VariableDeclarationStatement[17045-17068]"
    }, {
      "left" : "if (lr.isString())",
      "right" : "if (lr.isString())",
      "info" : "IfStatement[17302-17737]:IfStatement[17302-17737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17321-17737]:Block[17321-17737]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(lr);",
      "right" : "String leftString = NodeUtil.getStringValue(lr);",
      "info" : "VariableDeclarationStatement[17331-17379]:VariableDeclarationStatement[17331-17379]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[17388-17440]:VariableDeclarationStatement[17388-17440]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[17449-17729]:IfStatement[17449-17729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17496-17729]:Block[17496-17729]"
    }, {
      "left" : "left.removeChild(ll);",
      "right" : "left.removeChild(ll);",
      "info" : "ExpressionStatement[17508-17529]:ExpressionStatement[17508-17529]"
    }, {
      "left" : "String result = leftString + rightString;",
      "right" : "String result = leftString + rightString;",
      "info" : "VariableDeclarationStatement[17540-17581]:VariableDeclarationStatement[17540-17581]"
    }, {
      "left" : "n.replaceChild(left, ll);",
      "right" : "n.replaceChild(left, ll);",
      "info" : "ExpressionStatement[17592-17617]:ExpressionStatement[17592-17617]"
    }, {
      "left" : "n.replaceChild(right, IR.string(result));",
      "right" : "n.replaceChild(right, IR.string(result));",
      "info" : "ExpressionStatement[17628-17669]:ExpressionStatement[17628-17669]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[17680-17699]:ExpressionStatement[17680-17699]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[17710-17719]:ReturnStatement[17710-17719]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, false) &&\n        right.isAdd())",
      "right" : "if (NodeUtil.isLiteralValue(left, false) &&\n        right.isAdd())",
      "info" : "IfStatement[17749-18570]:IfStatement[17749-18570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17816-18570]:Block[17816-18570]"
    }, {
      "left" : "Node rl = right.getFirstChild();",
      "right" : "Node rl = right.getFirstChild();",
      "info" : "VariableDeclarationStatement[17825-17857]:VariableDeclarationStatement[17825-17857]"
    }, {
      "left" : "Node rr = right.getLastChild();",
      "right" : "Node rr = right.getLastChild();",
      "info" : "VariableDeclarationStatement[17864-17895]:VariableDeclarationStatement[17864-17895]"
    }, {
      "left" : "if (rl.isString())",
      "right" : "if (rl.isString())",
      "info" : "IfStatement[18129-18564]:IfStatement[18129-18564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18148-18564]:Block[18148-18564]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(left);",
      "right" : "String leftString = NodeUtil.getStringValue(left);",
      "info" : "VariableDeclarationStatement[18158-18208]:VariableDeclarationStatement[18158-18208]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(rl);",
      "right" : "String rightString = NodeUtil.getStringValue(rl);",
      "info" : "VariableDeclarationStatement[18217-18266]:VariableDeclarationStatement[18217-18266]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[18275-18556]:IfStatement[18275-18556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18322-18556]:Block[18322-18556]"
    }, {
      "left" : "right.removeChild(rr);",
      "right" : "right.removeChild(rr);",
      "info" : "ExpressionStatement[18334-18356]:ExpressionStatement[18334-18356]"
    }, {
      "left" : "String result = leftString + rightString;",
      "right" : "String result = leftString + rightString;",
      "info" : "VariableDeclarationStatement[18367-18408]:VariableDeclarationStatement[18367-18408]"
    }, {
      "left" : "n.replaceChild(right, rr);",
      "right" : "n.replaceChild(right, rr);",
      "info" : "ExpressionStatement[18419-18445]:ExpressionStatement[18419-18445]"
    }, {
      "left" : "n.replaceChild(left, IR.string(result));",
      "right" : "n.replaceChild(left, IR.string(result));",
      "info" : "ExpressionStatement[18456-18496]:ExpressionStatement[18456-18496]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[18507-18526]:ExpressionStatement[18507-18526]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18537-18546]:ReturnStatement[18537-18546]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[18576-18585]:ReturnStatement[18576-18585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18726-19188]:Block[18726-19188]"
    }, {
      "left" : "if (left.isString() ||\n        right.isString())",
      "right" : "if (left.isString() ||\n        right.isString())",
      "info" : "IfStatement[18732-19167]:IfStatement[18732-19167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18781-19167]:Block[18781-19167]"
    }, {
      "left" : "String leftString = NodeUtil.getStringValue(left);",
      "right" : "String leftString = NodeUtil.getStringValue(left);",
      "info" : "VariableDeclarationStatement[18811-18861]:VariableDeclarationStatement[18811-18861]"
    }, {
      "left" : "String rightString = NodeUtil.getStringValue(right);",
      "right" : "String rightString = NodeUtil.getStringValue(right);",
      "info" : "VariableDeclarationStatement[18868-18920]:VariableDeclarationStatement[18868-18920]"
    }, {
      "left" : "if (leftString != null && rightString != null)",
      "right" : "if (leftString != null && rightString != null)",
      "info" : "IfStatement[18927-19161]:IfStatement[18927-19161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18974-19161]:Block[18974-19161]"
    }, {
      "left" : "Node newStringNode = IR.string(leftString + rightString);",
      "right" : "Node newStringNode = IR.string(leftString + rightString);",
      "info" : "VariableDeclarationStatement[18984-19041]:VariableDeclarationStatement[18984-19041]"
    }, {
      "left" : "n.getParent().replaceChild(n, newStringNode);",
      "right" : "n.getParent().replaceChild(n, newStringNode);",
      "info" : "ExpressionStatement[19050-19095]:ExpressionStatement[19050-19095]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[19104-19123]:ExpressionStatement[19104-19123]"
    }, {
      "left" : "return newStringNode;",
      "right" : "return newStringNode;",
      "info" : "ReturnStatement[19132-19153]:ReturnStatement[19132-19153]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[19175-19184]:ReturnStatement[19175-19184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19313-19565]:Block[19313-19565]"
    }, {
      "left" : "Node result = performArithmeticOp(n.getType(), left, right);",
      "right" : "Node result = performArithmeticOp(n.getType(), left, right);",
      "info" : "VariableDeclarationStatement[19319-19379]:VariableDeclarationStatement[19319-19379]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[19384-19547]:IfStatement[19384-19547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19404-19547]:Block[19404-19547]"
    }, {
      "left" : "result.copyInformationFromForTree(n);",
      "right" : "result.copyInformationFromForTree(n);",
      "info" : "ExpressionStatement[19412-19449]:ExpressionStatement[19412-19449]"
    }, {
      "left" : "n.getParent().replaceChild(n, result);",
      "right" : "n.getParent().replaceChild(n, result);",
      "info" : "ExpressionStatement[19456-19494]:ExpressionStatement[19456-19494]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[19501-19520]:ExpressionStatement[19501-19520]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[19527-19541]:ReturnStatement[19527-19541]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[19552-19561]:ReturnStatement[19552-19561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19694-21905]:Block[19694-21905]"
    }, {
      "left" : "if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false)))",
      "right" : "if (opType == Token.ADD\n        && (NodeUtil.mayBeString(left, false)\n            || NodeUtil.mayBeString(right, false)))",
      "info" : "IfStatement[19788-19936]:IfStatement[19788-19936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19910-19936]:Block[19910-19936]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[19918-19930]:ReturnStatement[19918-19930]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[19942-19956]:VariableDeclarationStatement[19942-19956]"
    }, {
      "left" : "Double lValObj = NodeUtil.getNumberValue(left);",
      "right" : "Double lValObj = NodeUtil.getNumberValue(left);",
      "info" : "VariableDeclarationStatement[20086-20133]:VariableDeclarationStatement[20086-20133]"
    }, {
      "left" : "if (lValObj == null)",
      "right" : "if (lValObj == null)",
      "info" : "IfStatement[20138-20185]:IfStatement[20138-20185]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20159-20185]:Block[20159-20185]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20167-20179]:ReturnStatement[20167-20179]"
    }, {
      "left" : "Double rValObj = NodeUtil.getNumberValue(right);",
      "right" : "Double rValObj = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[20190-20238]:VariableDeclarationStatement[20190-20238]"
    }, {
      "left" : "if (rValObj == null)",
      "right" : "if (rValObj == null)",
      "info" : "IfStatement[20243-20290]:IfStatement[20243-20290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20264-20290]:Block[20264-20290]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20272-20284]:ReturnStatement[20272-20284]"
    }, {
      "left" : "double lval = lValObj;",
      "right" : "double lval = lValObj;",
      "info" : "VariableDeclarationStatement[20296-20318]:VariableDeclarationStatement[20296-20318]"
    }, {
      "left" : "double rval = rValObj;",
      "right" : "double rval = rValObj;",
      "info" : "VariableDeclarationStatement[20323-20345]:VariableDeclarationStatement[20323-20345]"
    }, {
      "left" : "switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }",
      "right" : "switch (opType) {\n      case Token.BITAND:\n        result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITOR:\n        result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);\n        break;\n      case Token.BITXOR:\n        result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);\n        break;\n      case Token.ADD:\n        result = lval + rval;\n        break;\n      case Token.SUB:\n        result = lval - rval;\n        break;\n      case Token.MUL:\n        result = lval * rval;\n        break;\n      case Token.MOD:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval % rval;\n        break;\n      case Token.DIV:\n        if (rval == 0) {\n          return null;\n        }\n        result = lval / rval;\n        break;\n      default:\n        throw new Error(\"Unexpected arithmetic operator\");\n    }",
      "info" : "SwitchStatement[20351-21246]:SwitchStatement[20351-21246]"
    }, {
      "left" : "case Token.BITAND:",
      "right" : "case Token.BITAND:",
      "info" : "SwitchCase[20375-20393]:SwitchCase[20375-20393]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) & ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[20402-20469]:ExpressionStatement[20402-20469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20478-20484]:BreakStatement[20478-20484]"
    }, {
      "left" : "case Token.BITOR:",
      "right" : "case Token.BITOR:",
      "info" : "SwitchCase[20491-20508]:SwitchCase[20491-20508]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) | ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[20517-20584]:ExpressionStatement[20517-20584]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20593-20599]:BreakStatement[20593-20599]"
    }, {
      "left" : "case Token.BITXOR:",
      "right" : "case Token.BITXOR:",
      "info" : "SwitchCase[20606-20624]:SwitchCase[20606-20624]"
    }, {
      "left" : "result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);",
      "right" : "result = ScriptRuntime.toInt32(lval) ^ ScriptRuntime.toInt32(rval);",
      "info" : "ExpressionStatement[20633-20700]:ExpressionStatement[20633-20700]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20709-20715]:BreakStatement[20709-20715]"
    }, {
      "left" : "case Token.ADD:",
      "right" : "case Token.ADD:",
      "info" : "SwitchCase[20722-20737]:SwitchCase[20722-20737]"
    }, {
      "left" : "result = lval + rval;",
      "right" : "result = lval + rval;",
      "info" : "ExpressionStatement[20746-20767]:ExpressionStatement[20746-20767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20776-20782]:BreakStatement[20776-20782]"
    }, {
      "left" : "case Token.SUB:",
      "right" : "case Token.SUB:",
      "info" : "SwitchCase[20789-20804]:SwitchCase[20789-20804]"
    }, {
      "left" : "result = lval - rval;",
      "right" : "result = lval - rval;",
      "info" : "ExpressionStatement[20813-20834]:ExpressionStatement[20813-20834]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20843-20849]:BreakStatement[20843-20849]"
    }, {
      "left" : "case Token.MUL:",
      "right" : "case Token.MUL:",
      "info" : "SwitchCase[20856-20871]:SwitchCase[20856-20871]"
    }, {
      "left" : "result = lval * rval;",
      "right" : "result = lval * rval;",
      "info" : "ExpressionStatement[20880-20901]:ExpressionStatement[20880-20901]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20910-20916]:BreakStatement[20910-20916]"
    }, {
      "left" : "case Token.MOD:",
      "right" : "case Token.MOD:",
      "info" : "SwitchCase[20923-20938]:SwitchCase[20923-20938]"
    }, {
      "left" : "if (rval == 0)",
      "right" : "if (rval == 0)",
      "info" : "IfStatement[20947-20996]:IfStatement[20947-20996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20962-20996]:Block[20962-20996]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[20974-20986]:ReturnStatement[20974-20986]"
    }, {
      "left" : "result = lval % rval;",
      "right" : "result = lval % rval;",
      "info" : "ExpressionStatement[21005-21026]:ExpressionStatement[21005-21026]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21035-21041]:BreakStatement[21035-21041]"
    }, {
      "left" : "case Token.DIV:",
      "right" : "case Token.DIV:",
      "info" : "SwitchCase[21048-21063]:SwitchCase[21048-21063]"
    }, {
      "left" : "if (rval == 0)",
      "right" : "if (rval == 0)",
      "info" : "IfStatement[21072-21121]:IfStatement[21072-21121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21087-21121]:Block[21087-21121]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21099-21111]:ReturnStatement[21099-21111]"
    }, {
      "left" : "result = lval / rval;",
      "right" : "result = lval / rval;",
      "info" : "ExpressionStatement[21130-21151]:ExpressionStatement[21130-21151]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21160-21166]:BreakStatement[21160-21166]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21173-21181]:SwitchCase[21173-21181]"
    }, {
      "left" : "throw new Error(\"Unexpected arithmetic operator\");",
      "right" : "throw new Error(\"Unexpected arithmetic operator\");",
      "info" : "ThrowStatement[21190-21240]:ThrowStatement[21190-21240]"
    }, {
      "left" : "if ((String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        && Math.abs(result) <= MAX_FOLD_NUMBER)\n        || Double.isNaN(result)\n        || result == Double.POSITIVE_INFINITY\n        || result == Double.NEGATIVE_INFINITY)",
      "right" : "if ((String.valueOf(result).length() <=\n        String.valueOf(lval).length() + String.valueOf(rval).length() + 1\n\n        // Do not try to fold arithmetic for numbers > 2^53. After that\n        // point, fixed-point math starts to break down and become inaccurate.\n        && Math.abs(result) <= MAX_FOLD_NUMBER)\n        || Double.isNaN(result)\n        || result == Double.POSITIVE_INFINITY\n        || result == Double.NEGATIVE_INFINITY)",
      "info" : "IfStatement[21390-21884]:IfStatement[21390-21884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21829-21884]:Block[21829-21884]"
    }, {
      "left" : "return NodeUtil.numberNode(result, null);",
      "right" : "return NodeUtil.numberNode(result, null);",
      "info" : "ReturnStatement[21837-21878]:ReturnStatement[21837-21878]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21889-21901]:ReturnStatement[21889-21901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22433-23776]:Block[22433-23776]"
    }, {
      "left" : "int opType = n.getType();",
      "right" : "int opType = n.getType();",
      "info" : "VariableDeclarationStatement[22439-22464]:VariableDeclarationStatement[22439-22464]"
    }, {
      "left" : "Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.isAdd());",
      "right" : "Preconditions.checkState(\n        (NodeUtil.isAssociative(opType) && NodeUtil.isCommutative(opType))\n        || n.isAdd());",
      "info" : "ExpressionStatement[22469-22592]:ExpressionStatement[22469-22592]"
    }, {
      "left" : "Preconditions.checkState(\n        !n.isAdd()|| !NodeUtil.mayBeString(n));",
      "right" : "Preconditions.checkState(\n        !n.isAdd()|| !NodeUtil.mayBeString(n));",
      "info" : "ExpressionStatement[22598-22671]:ExpressionStatement[22598-22671]"
    }, {
      "left" : "Double rightValObj = NodeUtil.getNumberValue(right);",
      "right" : "Double rightValObj = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[22805-22857]:VariableDeclarationStatement[22805-22857]"
    }, {
      "left" : "if (rightValObj != null && left.getType() == opType)",
      "right" : "if (rightValObj != null && left.getType() == opType)",
      "info" : "IfStatement[22862-23757]:IfStatement[22862-23757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22915-23757]:Block[22915-23757]"
    }, {
      "left" : "Preconditions.checkState(left.getChildCount() == 2);",
      "right" : "Preconditions.checkState(left.getChildCount() == 2);",
      "info" : "ExpressionStatement[22923-22975]:ExpressionStatement[22923-22975]"
    }, {
      "left" : "Node ll = left.getFirstChild();",
      "right" : "Node ll = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[22983-23014]:VariableDeclarationStatement[22983-23014]"
    }, {
      "left" : "Node lr = ll.getNext();",
      "right" : "Node lr = ll.getNext();",
      "info" : "VariableDeclarationStatement[23021-23044]:VariableDeclarationStatement[23021-23044]"
    }, {
      "left" : "Node valueToCombine = ll;",
      "right" : "Node valueToCombine = ll;",
      "info" : "VariableDeclarationStatement[23052-23077]:VariableDeclarationStatement[23052-23077]"
    }, {
      "left" : "Node replacement = performArithmeticOp(opType, valueToCombine, right);",
      "right" : "Node replacement = performArithmeticOp(opType, valueToCombine, right);",
      "info" : "VariableDeclarationStatement[23084-23154]:VariableDeclarationStatement[23084-23154]"
    }, {
      "left" : "if (replacement == null)",
      "right" : "if (replacement == null)",
      "info" : "IfStatement[23161-23298]:IfStatement[23161-23298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23186-23298]:Block[23186-23298]"
    }, {
      "left" : "valueToCombine = lr;",
      "right" : "valueToCombine = lr;",
      "info" : "ExpressionStatement[23196-23216]:ExpressionStatement[23196-23216]"
    }, {
      "left" : "replacement = performArithmeticOp(opType, valueToCombine, right);",
      "right" : "replacement = performArithmeticOp(opType, valueToCombine, right);",
      "info" : "ExpressionStatement[23225-23290]:ExpressionStatement[23225-23290]"
    }, {
      "left" : "if (replacement != null)",
      "right" : "if (replacement != null)",
      "info" : "IfStatement[23305-23751]:IfStatement[23305-23751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23330-23751]:Block[23330-23751]"
    }, {
      "left" : "left.removeChild(valueToCombine);",
      "right" : "left.removeChild(valueToCombine);",
      "info" : "ExpressionStatement[23391-23424]:ExpressionStatement[23391-23424]"
    }, {
      "left" : "n.replaceChild(left, left.removeFirstChild());",
      "right" : "n.replaceChild(left, left.removeFirstChild());",
      "info" : "ExpressionStatement[23490-23536]:ExpressionStatement[23490-23536]"
    }, {
      "left" : "replacement.copyInformationFromForTree(right);",
      "right" : "replacement.copyInformationFromForTree(right);",
      "info" : "ExpressionStatement[23625-23671]:ExpressionStatement[23625-23671]"
    }, {
      "left" : "n.replaceChild(right, replacement);",
      "right" : "n.replaceChild(right, replacement);",
      "info" : "ExpressionStatement[23680-23715]:ExpressionStatement[23680-23715]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[23724-23743]:ExpressionStatement[23724-23743]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[23763-23772]:ReturnStatement[23763-23772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23838-24439]:Block[23838-24439]"
    }, {
      "left" : "Preconditions.checkArgument(node.isAdd());",
      "right" : "Preconditions.checkArgument(node.isAdd());",
      "info" : "ExpressionStatement[23844-23886]:ExpressionStatement[23844-23886]"
    }, {
      "left" : "if (NodeUtil.mayBeString(node, true))",
      "right" : "if (NodeUtil.mayBeString(node, true))",
      "info" : "IfStatement[23892-24435]:IfStatement[23892-24435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23930-24223]:Block[23930-24223]"
    }, {
      "left" : "if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false))",
      "right" : "if (NodeUtil.isLiteralValue(left, false) &&\n          NodeUtil.isLiteralValue(right, false))",
      "info" : "IfStatement[23938-24217]:IfStatement[23938-24217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24031-24119]:Block[24031-24119]"
    }, {
      "left" : "return tryFoldAddConstantString(node, left, right);",
      "right" : "return tryFoldAddConstantString(node, left, right);",
      "info" : "ReturnStatement[24060-24111]:ReturnStatement[24060-24111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24125-24217]:Block[24125-24217]"
    }, {
      "left" : "return tryFoldChildAddString(node, left, right);",
      "right" : "return tryFoldChildAddString(node, left, right);",
      "info" : "ReturnStatement[24161-24209]:ReturnStatement[24161-24209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24229-24435]:Block[24229-24435]"
    }, {
      "left" : "Node result = tryFoldArithmeticOp(node, left, right);",
      "right" : "Node result = tryFoldArithmeticOp(node, left, right);",
      "info" : "VariableDeclarationStatement[24265-24318]:VariableDeclarationStatement[24265-24318]"
    }, {
      "left" : "if (result != node)",
      "right" : "if (result != node)",
      "info" : "IfStatement[24325-24377]:IfStatement[24325-24377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24345-24377]:Block[24345-24377]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[24355-24369]:ReturnStatement[24355-24369]"
    }, {
      "left" : "return tryFoldLeftChildOp(node, left, right);",
      "right" : "return tryFoldLeftChildOp(node, left, right);",
      "info" : "ReturnStatement[24384-24429]:ReturnStatement[24384-24429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24546-26375]:Block[24546-26375]"
    }, {
      "left" : "if (left.isNumber() &&\n        right.isNumber())",
      "right" : "if (left.isNumber() &&\n        right.isNumber())",
      "info" : "IfStatement[24552-26356]:IfStatement[24552-26356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24601-26356]:Block[24601-26356]"
    }, {
      "left" : "double result;",
      "right" : "double result;",
      "info" : "VariableDeclarationStatement[24610-24624]:VariableDeclarationStatement[24610-24624]"
    }, {
      "left" : "double lval = left.getDouble();",
      "right" : "double lval = left.getDouble();",
      "info" : "VariableDeclarationStatement[24631-24662]:VariableDeclarationStatement[24631-24662]"
    }, {
      "left" : "double rval = right.getDouble();",
      "right" : "double rval = right.getDouble();",
      "info" : "VariableDeclarationStatement[24669-24701]:VariableDeclarationStatement[24669-24701]"
    }, {
      "left" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
      "right" : "if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE))",
      "info" : "IfStatement[24854-24995]:IfStatement[24854-24995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24917-24995]:Block[24917-24995]"
    }, {
      "left" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "right" : "error(BITWISE_OPERAND_OUT_OF_RANGE, left);",
      "info" : "ExpressionStatement[24927-24969]:ExpressionStatement[24927-24969]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[24978-24987]:ReturnStatement[24978-24987]"
    }, {
      "left" : "if (!(rval >= 0 && rval < 32))",
      "right" : "if (!(rval >= 0 && rval < 32))",
      "info" : "IfStatement[25126-25234]:IfStatement[25126-25234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25157-25234]:Block[25157-25234]"
    }, {
      "left" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
      "right" : "error(SHIFT_AMOUNT_OUT_OF_BOUNDS, right);",
      "info" : "ExpressionStatement[25167-25208]:ExpressionStatement[25167-25208]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25217-25226]:ReturnStatement[25217-25226]"
    }, {
      "left" : "int lvalInt = (int) lval;",
      "right" : "int lvalInt = (int) lval;",
      "info" : "VariableDeclarationStatement[25279-25304]:VariableDeclarationStatement[25279-25304]"
    }, {
      "left" : "if (lvalInt != lval)",
      "right" : "if (lvalInt != lval)",
      "info" : "IfStatement[25311-25408]:IfStatement[25311-25408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25332-25408]:Block[25332-25408]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, left);",
      "info" : "ExpressionStatement[25342-25382]:ExpressionStatement[25342-25382]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25391-25400]:ReturnStatement[25391-25400]"
    }, {
      "left" : "int rvalInt = (int) rval;",
      "right" : "int rvalInt = (int) rval;",
      "info" : "VariableDeclarationStatement[25416-25441]:VariableDeclarationStatement[25416-25441]"
    }, {
      "left" : "if (rvalInt != rval)",
      "right" : "if (rvalInt != rval)",
      "info" : "IfStatement[25448-25546]:IfStatement[25448-25546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25469-25546]:Block[25469-25546]"
    }, {
      "left" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
      "right" : "error(FRACTIONAL_BITWISE_OPERAND, right);",
      "info" : "ExpressionStatement[25479-25520]:ExpressionStatement[25479-25520]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[25529-25538]:ReturnStatement[25529-25538]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Token.name(n.getType()));\n      }",
      "right" : "switch (n.getType()) {\n        case Token.LSH:\n          result = lvalInt << rvalInt;\n          break;\n        case Token.RSH:\n          result = lvalInt >> rvalInt;\n          break;\n        case Token.URSH:\n          // JavaScript handles zero shifts on signed numbers differently than\n          // Java as an Java int can not represent the unsigned 32-bit number\n          // where JavaScript can so use a long here.\n          long lvalLong = lvalInt & 0xffffffffL;\n          result = lvalLong >>> rvalInt;\n          break;\n        default:\n          throw new AssertionError(\"Unknown shift operator: \" +\n              Token.name(n.getType()));\n      }",
      "info" : "SwitchStatement[25554-26208]:SwitchStatement[25554-26208]"
    }, {
      "left" : "case Token.LSH:",
      "right" : "case Token.LSH:",
      "info" : "SwitchCase[25585-25600]:SwitchCase[25585-25600]"
    }, {
      "left" : "result = lvalInt << rvalInt;",
      "right" : "result = lvalInt << rvalInt;",
      "info" : "ExpressionStatement[25611-25639]:ExpressionStatement[25611-25639]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25650-25656]:BreakStatement[25650-25656]"
    }, {
      "left" : "case Token.RSH:",
      "right" : "case Token.RSH:",
      "info" : "SwitchCase[25665-25680]:SwitchCase[25665-25680]"
    }, {
      "left" : "result = lvalInt >> rvalInt;",
      "right" : "result = lvalInt >> rvalInt;",
      "info" : "ExpressionStatement[25691-25719]:ExpressionStatement[25691-25719]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25730-25736]:BreakStatement[25730-25736]"
    }, {
      "left" : "case Token.URSH:",
      "right" : "case Token.URSH:",
      "info" : "SwitchCase[25745-25761]:SwitchCase[25745-25761]"
    }, {
      "left" : "long lvalLong = lvalInt & 0xffffffffL;",
      "right" : "long lvalLong = lvalInt & 0xffffffffL;",
      "info" : "VariableDeclarationStatement[25983-26021]:VariableDeclarationStatement[25983-26021]"
    }, {
      "left" : "result = lvalLong >>> rvalInt;",
      "right" : "result = lvalLong >>> rvalInt;",
      "info" : "ExpressionStatement[26032-26062]:ExpressionStatement[26032-26062]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26073-26079]:BreakStatement[26073-26079]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26088-26096]:SwitchCase[26088-26096]"
    }, {
      "left" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Token.name(n.getType()));",
      "right" : "throw new AssertionError(\"Unknown shift operator: \" +\n              Token.name(n.getType()));",
      "info" : "ThrowStatement[26107-26200]:ThrowStatement[26107-26200]"
    }, {
      "left" : "Node newNumber = IR.number(result);",
      "right" : "Node newNumber = IR.number(result);",
      "info" : "VariableDeclarationStatement[26216-26251]:VariableDeclarationStatement[26216-26251]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNumber);",
      "right" : "n.getParent().replaceChild(n, newNumber);",
      "info" : "ExpressionStatement[26258-26299]:ExpressionStatement[26258-26299]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[26306-26325]:ExpressionStatement[26306-26325]"
    }, {
      "left" : "return newNumber;",
      "right" : "return newNumber;",
      "info" : "ReturnStatement[26333-26350]:ReturnStatement[26333-26350]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26362-26371]:ReturnStatement[26362-26371]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26530-32731]:Block[26530-32731]"
    }, {
      "left" : "boolean leftLiteral = NodeUtil.isLiteralValue(left, true);",
      "right" : "boolean leftLiteral = NodeUtil.isLiteralValue(left, true);",
      "info" : "VariableDeclarationStatement[26536-26594]:VariableDeclarationStatement[26536-26594]"
    }, {
      "left" : "boolean rightLiteral = NodeUtil.isLiteralValue(right, true);",
      "right" : "boolean rightLiteral = NodeUtil.isLiteralValue(right, true);",
      "info" : "VariableDeclarationStatement[26599-26659]:VariableDeclarationStatement[26599-26659]"
    }, {
      "left" : "if (!leftLiteral || !rightLiteral)",
      "right" : "if (!leftLiteral || !rightLiteral)",
      "info" : "IfStatement[26665-26853]:IfStatement[26665-26853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26700-26853]:Block[26700-26853]"
    }, {
      "left" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "right" : "if (n.getType() != Token.GT && n.getType() != Token.LT)",
      "info" : "IfStatement[26764-26847]:IfStatement[26764-26847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26820-26847]:Block[26820-26847]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[26830-26839]:ReturnStatement[26830-26839]"
    }, {
      "left" : "int op = n.getType();",
      "right" : "int op = n.getType();",
      "info" : "VariableDeclarationStatement[26859-26880]:VariableDeclarationStatement[26859-26880]"
    }, {
      "left" : "boolean result;",
      "right" : "boolean result;",
      "info" : "VariableDeclarationStatement[26885-26900]:VariableDeclarationStatement[26885-26900]"
    }, {
      "left" : "boolean undefinedRight = NodeUtil.isUndefined(right) && rightLiteral;",
      "right" : "boolean undefinedRight = NodeUtil.isUndefined(right) && rightLiteral;",
      "info" : "VariableDeclarationStatement[26906-26975]:VariableDeclarationStatement[26906-26975]"
    }, {
      "left" : "boolean nullRight = right.isNull();",
      "right" : "boolean nullRight = right.isNull();",
      "info" : "VariableDeclarationStatement[26980-27015]:VariableDeclarationStatement[26980-27015]"
    }, {
      "left" : "int lhType = getNormalizedNodeType(left);",
      "right" : "int lhType = getNormalizedNodeType(left);",
      "info" : "VariableDeclarationStatement[27020-27061]:VariableDeclarationStatement[27020-27061]"
    }, {
      "left" : "int rhType = getNormalizedNodeType(right);",
      "right" : "int rhType = getNormalizedNodeType(right);",
      "info" : "VariableDeclarationStatement[27066-27108]:VariableDeclarationStatement[27066-27108]"
    }, {
      "left" : "switch (lhType) {\n      case Token.VOID:\n        if (!leftLiteral) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n      case Token.NULL:\n        if (rightLiteral && isEqualityOp(op)) {\n          result = compareToNull(right, op);\n          break;\n        }\n        // fallthrough\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (!right.isThis()) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (nullRight && isEqualityOp(op)) {\n          result = compareToNull(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n\n        TernaryValue ternary = TernaryValue.UNKNOWN;\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            ternary = areStringsEqual(left.getString(), right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            ternary =\n                areStringsEqual(left.getString(), right.getString()).not();\n            break;\n        }\n\n        if (ternary == TernaryValue.UNKNOWN) {\n          return n;\n        }\n        result = ternary.toBoolean(true);\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (nullRight && isEqualityOp(op)) {\n          result = compareToNull(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (leftLiteral && undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n          if (leftLiteral && nullRight && isEqualityOp(op)) {\n            result = compareToNull(left, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      case Token.NEG:\n        if (leftLiteral) {\n          if (undefinedRight) {\n            result = compareToUndefined(left, op);\n            break;\n          }\n          if (nullRight && isEqualityOp(op)) {\n            result = compareToNull(left, op);\n            break;\n          }\n        }\n        // Nothing else for now.\n        return n;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.FUNCTION:\n        if (leftLiteral) {\n          if (undefinedRight) {\n            result = compareToUndefined(left, op);\n            break;\n          }\n          if (nullRight && isEqualityOp(op)) {\n            result = compareToNull(left, op);\n            break;\n          }\n        }\n        // ignore the rest for now.\n        return n;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "right" : "switch (lhType) {\n      case Token.VOID:\n        if (!leftLiteral) {\n          return n;\n        } else if (!rightLiteral) {\n          return n;\n        } else {\n          result = compareToUndefined(right, op);\n        }\n        break;\n      case Token.NULL:\n        if (rightLiteral && isEqualityOp(op)) {\n          result = compareToNull(right, op);\n          break;\n        }\n        // fallthrough\n      case Token.TRUE:\n      case Token.FALSE:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }\n        break;\n\n      case Token.THIS:\n        if (!right.isThis()) {\n          return n;\n        }\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }\n        break;\n\n      case Token.STRING:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (nullRight && isEqualityOp(op)) {\n          result = compareToNull(left, op);\n          break;\n        }\n        if (Token.STRING != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n\n        TernaryValue ternary = TernaryValue.UNKNOWN;\n        switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            ternary = areStringsEqual(left.getString(), right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            ternary =\n                areStringsEqual(left.getString(), right.getString()).not();\n            break;\n        }\n\n        if (ternary == TernaryValue.UNKNOWN) {\n          return n;\n        }\n        result = ternary.toBoolean(true);\n        break;\n\n      case Token.NUMBER:\n        if (undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n        if (nullRight && isEqualityOp(op)) {\n          result = compareToNull(left, op);\n          break;\n        }\n        if (Token.NUMBER != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        Boolean compareResult = compareAsNumbers(op, left, right);\n        if (compareResult != null) {\n          result = compareResult;\n        } else {\n          return null;\n        }\n        break;\n\n      case Token.NAME:\n        if (leftLiteral && undefinedRight) {\n          result = compareToUndefined(left, op);\n          break;\n        }\n\n        if (rightLiteral) {\n          boolean undefinedLeft = (left.getString().equals(\"undefined\"));\n          if (undefinedLeft) {\n            result = compareToUndefined(right, op);\n            break;\n          }\n          if (leftLiteral && nullRight && isEqualityOp(op)) {\n            result = compareToNull(left, op);\n            break;\n          }\n        }\n\n        if (Token.NAME != right.getType()) {\n          return n;  // Only eval if they are the same type\n        }\n        String ln = left.getString();\n        String rn = right.getString();\n        if (!ln.equals(rn)) {\n          return n;  // Not the same value name.\n        }\n\n        switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }\n        break;\n\n      case Token.NEG:\n        if (leftLiteral) {\n          if (undefinedRight) {\n            result = compareToUndefined(left, op);\n            break;\n          }\n          if (nullRight && isEqualityOp(op)) {\n            result = compareToNull(left, op);\n            break;\n          }\n        }\n        // Nothing else for now.\n        return n;\n\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.FUNCTION:\n        if (leftLiteral) {\n          if (undefinedRight) {\n            result = compareToUndefined(left, op);\n            break;\n          }\n          if (nullRight && isEqualityOp(op)) {\n            result = compareToNull(left, op);\n            break;\n          }\n        }\n        // ignore the rest for now.\n        return n;\n\n      default:\n        // assert, this should cover all consts\n        return n;\n    }",
      "info" : "SwitchStatement[27113-32588]:SwitchStatement[27113-32588]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[27137-27153]:SwitchCase[27137-27153]"
    }, {
      "left" : "if (!leftLiteral)",
      "right" : "if (!leftLiteral)",
      "info" : "IfStatement[27162-27334]:IfStatement[27162-27334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27180-27211]:Block[27180-27211]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27192-27201]:ReturnStatement[27192-27201]"
    }, {
      "left" : "if (!rightLiteral)",
      "right" : "if (!rightLiteral)",
      "info" : "IfStatement[27217-27334]:IfStatement[27217-27334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27236-27267]:Block[27236-27267]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27248-27257]:ReturnStatement[27248-27257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27273-27334]:Block[27273-27334]"
    }, {
      "left" : "result = compareToUndefined(right, op);",
      "right" : "result = compareToUndefined(right, op);",
      "info" : "ExpressionStatement[27285-27324]:ExpressionStatement[27285-27324]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27343-27349]:BreakStatement[27343-27349]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[27356-27372]:SwitchCase[27356-27372]"
    }, {
      "left" : "if (rightLiteral && isEqualityOp(op))",
      "right" : "if (rightLiteral && isEqualityOp(op))",
      "info" : "IfStatement[27381-27492]:IfStatement[27381-27492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27419-27492]:Block[27419-27492]"
    }, {
      "left" : "result = compareToNull(right, op);",
      "right" : "result = compareToNull(right, op);",
      "info" : "ExpressionStatement[27431-27465]:ExpressionStatement[27431-27465]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27476-27482]:BreakStatement[27476-27482]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[27522-27538]:SwitchCase[27522-27538]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[27545-27562]:SwitchCase[27545-27562]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[27571-27668]:IfStatement[27571-27668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27591-27668]:Block[27591-27668]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[27603-27641]:ExpressionStatement[27603-27641]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27652-27658]:BreakStatement[27652-27658]"
    }, {
      "left" : "if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL)",
      "right" : "if (rhType != Token.TRUE &&\n            rhType != Token.FALSE &&\n            rhType != Token.NULL)",
      "info" : "IfStatement[27677-27807]:IfStatement[27677-27807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27776-27807]:Block[27776-27807]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[27788-27797]:ReturnStatement[27788-27797]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = lhType == rhType;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = lhType != rhType;\n            break;\n\n          case Token.GE:\n          case Token.LE:\n          case Token.GT:\n          case Token.LT:\n            Boolean compareResult = compareAsNumbers(op, left, right);\n            if (compareResult != null) {\n              result = compareResult;\n            } else {\n              return n;\n            }\n            break;\n\n          default:\n            return n;  // we only handle == and != here\n        }",
      "info" : "SwitchStatement[27816-28465]:SwitchStatement[27816-28465]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[27840-27856]:SwitchCase[27840-27856]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[27867-27881]:SwitchCase[27867-27881]"
    }, {
      "left" : "result = lhType == rhType;",
      "right" : "result = lhType == rhType;",
      "info" : "ExpressionStatement[27894-27920]:ExpressionStatement[27894-27920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27933-27939]:BreakStatement[27933-27939]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[27951-27967]:SwitchCase[27951-27967]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[27978-27992]:SwitchCase[27978-27992]"
    }, {
      "left" : "result = lhType != rhType;",
      "right" : "result = lhType != rhType;",
      "info" : "ExpressionStatement[28005-28031]:ExpressionStatement[28005-28031]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28044-28050]:BreakStatement[28044-28050]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[28062-28076]:SwitchCase[28062-28076]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[28087-28101]:SwitchCase[28087-28101]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[28112-28126]:SwitchCase[28112-28126]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[28137-28151]:SwitchCase[28137-28151]"
    }, {
      "left" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "right" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "info" : "VariableDeclarationStatement[28164-28222]:VariableDeclarationStatement[28164-28222]"
    }, {
      "left" : "if (compareResult != null)",
      "right" : "if (compareResult != null)",
      "info" : "IfStatement[28235-28360]:IfStatement[28235-28360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28262-28315]:Block[28262-28315]"
    }, {
      "left" : "result = compareResult;",
      "right" : "result = compareResult;",
      "info" : "ExpressionStatement[28278-28301]:ExpressionStatement[28278-28301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28321-28360]:Block[28321-28360]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28337-28346]:ReturnStatement[28337-28346]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28373-28379]:BreakStatement[28373-28379]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[28391-28399]:SwitchCase[28391-28399]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28412-28421]:ReturnStatement[28412-28421]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28474-28480]:BreakStatement[28474-28480]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[28488-28504]:SwitchCase[28488-28504]"
    }, {
      "left" : "if (!right.isThis())",
      "right" : "if (!right.isThis())",
      "info" : "IfStatement[28513-28565]:IfStatement[28513-28565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28534-28565]:Block[28534-28565]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[28546-28555]:ReturnStatement[28546-28555]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            result = true;\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            result = false;\n            break;\n\n          // We can only handle == and != here.\n          // GT, LT, GE, LE depend on the type of \"this\" and how it will\n          // be converted to number.  The results are different depending on\n          // whether it is a string, NaN or other number value.\n          default:\n            return n;\n        }",
      "info" : "SwitchStatement[28574-29099]:SwitchStatement[28574-29099]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[28598-28614]:SwitchCase[28598-28614]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[28625-28639]:SwitchCase[28625-28639]"
    }, {
      "left" : "result = true;",
      "right" : "result = true;",
      "info" : "ExpressionStatement[28652-28666]:ExpressionStatement[28652-28666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28679-28685]:BreakStatement[28679-28685]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[28697-28713]:SwitchCase[28697-28713]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[28724-28738]:SwitchCase[28724-28738]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[28751-28766]:ExpressionStatement[28751-28766]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28779-28785]:BreakStatement[28779-28785]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29059-29067]:SwitchCase[29059-29067]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29080-29089]:ReturnStatement[29080-29089]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29108-29114]:BreakStatement[29108-29114]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[29122-29140]:SwitchCase[29122-29140]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[29149-29246]:IfStatement[29149-29246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29169-29246]:Block[29169-29246]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[29181-29219]:ExpressionStatement[29181-29219]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29230-29236]:BreakStatement[29230-29236]"
    }, {
      "left" : "if (nullRight && isEqualityOp(op))",
      "right" : "if (nullRight && isEqualityOp(op))",
      "info" : "IfStatement[29255-29362]:IfStatement[29255-29362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29290-29362]:Block[29290-29362]"
    }, {
      "left" : "result = compareToNull(left, op);",
      "right" : "result = compareToNull(left, op);",
      "info" : "ExpressionStatement[29302-29335]:ExpressionStatement[29302-29335]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29346-29352]:BreakStatement[29346-29352]"
    }, {
      "left" : "if (Token.STRING != right.getType())",
      "right" : "if (Token.STRING != right.getType())",
      "info" : "IfStatement[29371-29479]:IfStatement[29371-29479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29408-29479]:Block[29408-29479]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29420-29429]:ReturnStatement[29420-29429]"
    }, {
      "left" : "TernaryValue ternary = TernaryValue.UNKNOWN;",
      "right" : "TernaryValue ternary = TernaryValue.UNKNOWN;",
      "info" : "VariableDeclarationStatement[29489-29533]:VariableDeclarationStatement[29489-29533]"
    }, {
      "left" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            ternary = areStringsEqual(left.getString(), right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            ternary =\n                areStringsEqual(left.getString(), right.getString()).not();\n            break;\n        }",
      "right" : "switch (op) {\n          case Token.SHEQ:\n          case Token.EQ:\n            ternary = areStringsEqual(left.getString(), right.getString());\n            break;\n\n          case Token.SHNE:\n          case Token.NE:\n            ternary =\n                areStringsEqual(left.getString(), right.getString()).not();\n            break;\n        }",
      "info" : "SwitchStatement[29542-29882]:SwitchStatement[29542-29882]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[29566-29582]:SwitchCase[29566-29582]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[29593-29607]:SwitchCase[29593-29607]"
    }, {
      "left" : "ternary = areStringsEqual(left.getString(), right.getString());",
      "right" : "ternary = areStringsEqual(left.getString(), right.getString());",
      "info" : "ExpressionStatement[29620-29683]:ExpressionStatement[29620-29683]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29696-29702]:BreakStatement[29696-29702]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[29714-29730]:SwitchCase[29714-29730]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[29741-29755]:SwitchCase[29741-29755]"
    }, {
      "left" : "ternary =\n                areStringsEqual(left.getString(), right.getString()).not();",
      "right" : "ternary =\n                areStringsEqual(left.getString(), right.getString()).not();",
      "info" : "ExpressionStatement[29768-29853]:ExpressionStatement[29768-29853]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29866-29872]:BreakStatement[29866-29872]"
    }, {
      "left" : "if (ternary == TernaryValue.UNKNOWN)",
      "right" : "if (ternary == TernaryValue.UNKNOWN)",
      "info" : "IfStatement[29892-29960]:IfStatement[29892-29960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29929-29960]:Block[29929-29960]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[29941-29950]:ReturnStatement[29941-29950]"
    }, {
      "left" : "result = ternary.toBoolean(true);",
      "right" : "result = ternary.toBoolean(true);",
      "info" : "ExpressionStatement[29969-30002]:ExpressionStatement[29969-30002]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30011-30017]:BreakStatement[30011-30017]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[30025-30043]:SwitchCase[30025-30043]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[30052-30149]:IfStatement[30052-30149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30072-30149]:Block[30072-30149]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[30084-30122]:ExpressionStatement[30084-30122]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30133-30139]:BreakStatement[30133-30139]"
    }, {
      "left" : "if (nullRight && isEqualityOp(op))",
      "right" : "if (nullRight && isEqualityOp(op))",
      "info" : "IfStatement[30158-30265]:IfStatement[30158-30265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30193-30265]:Block[30193-30265]"
    }, {
      "left" : "result = compareToNull(left, op);",
      "right" : "result = compareToNull(left, op);",
      "info" : "ExpressionStatement[30205-30238]:ExpressionStatement[30205-30238]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30249-30255]:BreakStatement[30249-30255]"
    }, {
      "left" : "if (Token.NUMBER != right.getType())",
      "right" : "if (Token.NUMBER != right.getType())",
      "info" : "IfStatement[30274-30382]:IfStatement[30274-30382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30311-30382]:Block[30311-30382]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[30323-30332]:ReturnStatement[30323-30332]"
    }, {
      "left" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "right" : "Boolean compareResult = compareAsNumbers(op, left, right);",
      "info" : "VariableDeclarationStatement[30391-30449]:VariableDeclarationStatement[30391-30449]"
    }, {
      "left" : "if (compareResult != null)",
      "right" : "if (compareResult != null)",
      "info" : "IfStatement[30458-30570]:IfStatement[30458-30570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30485-30530]:Block[30485-30530]"
    }, {
      "left" : "result = compareResult;",
      "right" : "result = compareResult;",
      "info" : "ExpressionStatement[30497-30520]:ExpressionStatement[30497-30520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30536-30570]:Block[30536-30570]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[30548-30560]:ReturnStatement[30548-30560]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30579-30585]:BreakStatement[30579-30585]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[30593-30609]:SwitchCase[30593-30609]"
    }, {
      "left" : "if (leftLiteral && undefinedRight)",
      "right" : "if (leftLiteral && undefinedRight)",
      "info" : "IfStatement[30618-30730]:IfStatement[30618-30730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30653-30730]:Block[30653-30730]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[30665-30703]:ExpressionStatement[30665-30703]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30714-30720]:BreakStatement[30714-30720]"
    }, {
      "left" : "if (rightLiteral)",
      "right" : "if (rightLiteral)",
      "info" : "IfStatement[30740-31096]:IfStatement[30740-31096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30758-31096]:Block[30758-31096]"
    }, {
      "left" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "right" : "boolean undefinedLeft = (left.getString().equals(\"undefined\"));",
      "info" : "VariableDeclarationStatement[30770-30833]:VariableDeclarationStatement[30770-30833]"
    }, {
      "left" : "if (undefinedLeft)",
      "right" : "if (undefinedLeft)",
      "info" : "IfStatement[30844-30947]:IfStatement[30844-30947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30863-30947]:Block[30863-30947]"
    }, {
      "left" : "result = compareToUndefined(right, op);",
      "right" : "result = compareToUndefined(right, op);",
      "info" : "ExpressionStatement[30877-30916]:ExpressionStatement[30877-30916]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30929-30935]:BreakStatement[30929-30935]"
    }, {
      "left" : "if (leftLiteral && nullRight && isEqualityOp(op))",
      "right" : "if (leftLiteral && nullRight && isEqualityOp(op))",
      "info" : "IfStatement[30958-31086]:IfStatement[30958-31086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31008-31086]:Block[31008-31086]"
    }, {
      "left" : "result = compareToNull(left, op);",
      "right" : "result = compareToNull(left, op);",
      "info" : "ExpressionStatement[31022-31055]:ExpressionStatement[31022-31055]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31068-31074]:BreakStatement[31068-31074]"
    }, {
      "left" : "if (Token.NAME != right.getType())",
      "right" : "if (Token.NAME != right.getType())",
      "info" : "IfStatement[31106-31212]:IfStatement[31106-31212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31141-31212]:Block[31141-31212]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31153-31162]:ReturnStatement[31153-31162]"
    }, {
      "left" : "String ln = left.getString();",
      "right" : "String ln = left.getString();",
      "info" : "VariableDeclarationStatement[31221-31250]:VariableDeclarationStatement[31221-31250]"
    }, {
      "left" : "String rn = right.getString();",
      "right" : "String rn = right.getString();",
      "info" : "VariableDeclarationStatement[31259-31289]:VariableDeclarationStatement[31259-31289]"
    }, {
      "left" : "if (!ln.equals(rn))",
      "right" : "if (!ln.equals(rn))",
      "info" : "IfStatement[31298-31378]:IfStatement[31298-31378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31318-31378]:Block[31318-31378]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31330-31339]:ReturnStatement[31330-31339]"
    }, {
      "left" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "right" : "switch (op) {\n          // If we knew the named value wouldn't be NaN, it would be nice\n          // to handle EQ,NE,LE,GE,SHEQ, and SHNE.\n          case Token.LT:\n          case Token.GT:\n            result = false;\n            break;\n          default:\n            return n;  // don't handle that op\n        }",
      "info" : "SwitchStatement[31388-31699]:SwitchStatement[31388-31699]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[31537-31551]:SwitchCase[31537-31551]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[31562-31576]:SwitchCase[31562-31576]"
    }, {
      "left" : "result = false;",
      "right" : "result = false;",
      "info" : "ExpressionStatement[31589-31604]:ExpressionStatement[31589-31604]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31617-31623]:BreakStatement[31617-31623]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31634-31642]:SwitchCase[31634-31642]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[31655-31664]:ReturnStatement[31655-31664]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31708-31714]:BreakStatement[31708-31714]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[31722-31737]:SwitchCase[31722-31737]"
    }, {
      "left" : "if (leftLiteral)",
      "right" : "if (leftLiteral)",
      "info" : "IfStatement[31746-32012]:IfStatement[31746-32012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31763-32012]:Block[31763-32012]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[31775-31878]:IfStatement[31775-31878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31795-31878]:Block[31795-31878]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[31809-31847]:ExpressionStatement[31809-31847]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31860-31866]:BreakStatement[31860-31866]"
    }, {
      "left" : "if (nullRight && isEqualityOp(op))",
      "right" : "if (nullRight && isEqualityOp(op))",
      "info" : "IfStatement[31889-32002]:IfStatement[31889-32002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31924-32002]:Block[31924-32002]"
    }, {
      "left" : "result = compareToNull(left, op);",
      "right" : "result = compareToNull(left, op);",
      "info" : "ExpressionStatement[31938-31971]:ExpressionStatement[31938-31971]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31984-31990]:BreakStatement[31984-31990]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32054-32063]:ReturnStatement[32054-32063]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[32071-32091]:SwitchCase[32071-32091]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[32098-32119]:SwitchCase[32098-32119]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[32126-32144]:SwitchCase[32126-32144]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[32151-32171]:SwitchCase[32151-32171]"
    }, {
      "left" : "if (leftLiteral)",
      "right" : "if (leftLiteral)",
      "info" : "IfStatement[32180-32446]:IfStatement[32180-32446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32197-32446]:Block[32197-32446]"
    }, {
      "left" : "if (undefinedRight)",
      "right" : "if (undefinedRight)",
      "info" : "IfStatement[32209-32312]:IfStatement[32209-32312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32229-32312]:Block[32229-32312]"
    }, {
      "left" : "result = compareToUndefined(left, op);",
      "right" : "result = compareToUndefined(left, op);",
      "info" : "ExpressionStatement[32243-32281]:ExpressionStatement[32243-32281]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32294-32300]:BreakStatement[32294-32300]"
    }, {
      "left" : "if (nullRight && isEqualityOp(op))",
      "right" : "if (nullRight && isEqualityOp(op))",
      "info" : "IfStatement[32323-32436]:IfStatement[32323-32436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32358-32436]:Block[32358-32436]"
    }, {
      "left" : "result = compareToNull(left, op);",
      "right" : "result = compareToNull(left, op);",
      "info" : "ExpressionStatement[32372-32405]:ExpressionStatement[32372-32405]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32418-32424]:BreakStatement[32418-32424]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32491-32500]:ReturnStatement[32491-32500]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[32508-32516]:SwitchCase[32508-32516]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[32573-32582]:ReturnStatement[32573-32582]"
    }, {
      "left" : "Node newNode = NodeUtil.booleanNode(result);",
      "right" : "Node newNode = NodeUtil.booleanNode(result);",
      "info" : "VariableDeclarationStatement[32594-32638]:VariableDeclarationStatement[32594-32638]"
    }, {
      "left" : "n.getParent().replaceChild(n, newNode);",
      "right" : "n.getParent().replaceChild(n, newNode);",
      "info" : "ExpressionStatement[32643-32682]:ExpressionStatement[32643-32682]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[32687-32706]:ExpressionStatement[32687-32706]"
    }, {
      "left" : "return newNode;",
      "right" : "return newNode;",
      "info" : "ReturnStatement[32712-32727]:ReturnStatement[32712-32727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32843-33148]:Block[32843-33148]"
    }, {
      "left" : "if (a.indexOf('\\u000B') != -1 ||\n        b.indexOf('\\u000B') != -1)",
      "right" : "if (a.indexOf('\\u000B') != -1 ||\n        b.indexOf('\\u000B') != -1)",
      "info" : "IfStatement[32954-33144]:IfStatement[32954-33144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33022-33064]:Block[33022-33064]"
    }, {
      "left" : "return TernaryValue.UNKNOWN;",
      "right" : "return TernaryValue.UNKNOWN;",
      "info" : "ReturnStatement[33030-33058]:ReturnStatement[33030-33058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33070-33144]:Block[33070-33144]"
    }, {
      "left" : "return a.equals(b) ? TernaryValue.TRUE : TernaryValue.FALSE;",
      "right" : "return a.equals(b) ? TernaryValue.TRUE : TernaryValue.FALSE;",
      "info" : "ReturnStatement[33078-33138]:ReturnStatement[33078-33138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33279-33553]:Block[33279-33553]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[33285-33308]:VariableDeclarationStatement[33285-33308]"
    }, {
      "left" : "if (type == Token.NOT)",
      "right" : "if (type == Token.NOT)",
      "info" : "IfStatement[33313-33532]:IfStatement[33313-33532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33336-33532]:Block[33336-33532]"
    }, {
      "left" : "TernaryValue value = NodeUtil.getPureBooleanValue(n);",
      "right" : "TernaryValue value = NodeUtil.getPureBooleanValue(n);",
      "info" : "VariableDeclarationStatement[33344-33397]:VariableDeclarationStatement[33344-33397]"
    }, {
      "left" : "switch (value) {\n        case TRUE:\n          return Token.TRUE;\n        case FALSE:\n          return Token.FALSE;\n      }",
      "right" : "switch (value) {\n        case TRUE:\n          return Token.TRUE;\n        case FALSE:\n          return Token.FALSE;\n      }",
      "info" : "SwitchStatement[33404-33526]:SwitchStatement[33404-33526]"
    }, {
      "left" : "case TRUE:",
      "right" : "case TRUE:",
      "info" : "SwitchCase[33429-33439]:SwitchCase[33429-33439]"
    }, {
      "left" : "return Token.TRUE;",
      "right" : "return Token.TRUE;",
      "info" : "ReturnStatement[33450-33468]:ReturnStatement[33450-33468]"
    }, {
      "left" : "case FALSE:",
      "right" : "case FALSE:",
      "info" : "SwitchCase[33477-33488]:SwitchCase[33477-33488]"
    }, {
      "left" : "return Token.FALSE;",
      "right" : "return Token.FALSE;",
      "info" : "ReturnStatement[33499-33518]:ReturnStatement[33499-33518]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[33537-33549]:ReturnStatement[33537-33549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33732-34665]:Block[33732-34665]"
    }, {
      "left" : "Double leftValue = NodeUtil.getNumberValue(left);",
      "right" : "Double leftValue = NodeUtil.getNumberValue(left);",
      "info" : "VariableDeclarationStatement[33738-33787]:VariableDeclarationStatement[33738-33787]"
    }, {
      "left" : "if (leftValue == null)",
      "right" : "if (leftValue == null)",
      "info" : "IfStatement[33792-33841]:IfStatement[33792-33841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33815-33841]:Block[33815-33841]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33823-33835]:ReturnStatement[33823-33835]"
    }, {
      "left" : "Double rightValue = NodeUtil.getNumberValue(right);",
      "right" : "Double rightValue = NodeUtil.getNumberValue(right);",
      "info" : "VariableDeclarationStatement[33846-33897]:VariableDeclarationStatement[33846-33897]"
    }, {
      "left" : "if (rightValue == null)",
      "right" : "if (rightValue == null)",
      "info" : "IfStatement[33902-33952]:IfStatement[33902-33952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33926-33952]:Block[33926-33952]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[33934-33946]:ReturnStatement[33934-33946]"
    }, {
      "left" : "double lv = leftValue;",
      "right" : "double lv = leftValue;",
      "info" : "VariableDeclarationStatement[33958-33980]:VariableDeclarationStatement[33958-33980]"
    }, {
      "left" : "double rv = rightValue;",
      "right" : "double rv = rightValue;",
      "info" : "VariableDeclarationStatement[33985-34008]:VariableDeclarationStatement[33985-34008]"
    }, {
      "left" : "Boolean result;",
      "right" : "Boolean result;",
      "info" : "VariableDeclarationStatement[34014-34029]:VariableDeclarationStatement[34014-34029]"
    }, {
      "left" : "switch (op) {\n      case Token.SHEQ:\n      case Token.EQ:\n        Preconditions.checkState(\n            left.isNumber() && right.isNumber());\n        result = lv == rv;\n        break;\n      case Token.SHNE:\n      case Token.NE:\n        Preconditions.checkState(\n            left.isNumber() && right.isNumber());\n        result = lv != rv;\n        break;\n      case Token.LE: result = lv <= rv; break;\n      case Token.LT: result = lv <  rv; break;\n      case Token.GE: result = lv >= rv; break;\n      case Token.GT: result = lv >  rv; break;\n      default:\n        return null;  // don't handle that op\n    }",
      "right" : "switch (op) {\n      case Token.SHEQ:\n      case Token.EQ:\n        Preconditions.checkState(\n            left.isNumber() && right.isNumber());\n        result = lv == rv;\n        break;\n      case Token.SHNE:\n      case Token.NE:\n        Preconditions.checkState(\n            left.isNumber() && right.isNumber());\n        result = lv != rv;\n        break;\n      case Token.LE: result = lv <= rv; break;\n      case Token.LT: result = lv <  rv; break;\n      case Token.GE: result = lv >= rv; break;\n      case Token.GT: result = lv >  rv; break;\n      default:\n        return null;  // don't handle that op\n    }",
      "info" : "SwitchStatement[34034-34642]:SwitchStatement[34034-34642]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[34054-34070]:SwitchCase[34054-34070]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[34077-34091]:SwitchCase[34077-34091]"
    }, {
      "left" : "Preconditions.checkState(\n            left.isNumber() && right.isNumber());",
      "right" : "Preconditions.checkState(\n            left.isNumber() && right.isNumber());",
      "info" : "ExpressionStatement[34100-34175]:ExpressionStatement[34100-34175]"
    }, {
      "left" : "result = lv == rv;",
      "right" : "result = lv == rv;",
      "info" : "ExpressionStatement[34184-34202]:ExpressionStatement[34184-34202]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34211-34217]:BreakStatement[34211-34217]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[34224-34240]:SwitchCase[34224-34240]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[34247-34261]:SwitchCase[34247-34261]"
    }, {
      "left" : "Preconditions.checkState(\n            left.isNumber() && right.isNumber());",
      "right" : "Preconditions.checkState(\n            left.isNumber() && right.isNumber());",
      "info" : "ExpressionStatement[34270-34345]:ExpressionStatement[34270-34345]"
    }, {
      "left" : "result = lv != rv;",
      "right" : "result = lv != rv;",
      "info" : "ExpressionStatement[34354-34372]:ExpressionStatement[34354-34372]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34381-34387]:BreakStatement[34381-34387]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[34394-34408]:SwitchCase[34394-34408]"
    }, {
      "left" : "result = lv <= rv;",
      "right" : "result = lv <= rv;",
      "info" : "ExpressionStatement[34409-34427]:ExpressionStatement[34409-34427]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34428-34434]:BreakStatement[34428-34434]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[34441-34455]:SwitchCase[34441-34455]"
    }, {
      "left" : "result = lv <  rv;",
      "right" : "result = lv <  rv;",
      "info" : "ExpressionStatement[34456-34474]:ExpressionStatement[34456-34474]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34475-34481]:BreakStatement[34475-34481]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[34488-34502]:SwitchCase[34488-34502]"
    }, {
      "left" : "result = lv >= rv;",
      "right" : "result = lv >= rv;",
      "info" : "ExpressionStatement[34503-34521]:ExpressionStatement[34503-34521]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34522-34528]:BreakStatement[34522-34528]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[34535-34549]:SwitchCase[34535-34549]"
    }, {
      "left" : "result = lv >  rv;",
      "right" : "result = lv >  rv;",
      "info" : "ExpressionStatement[34550-34568]:ExpressionStatement[34550-34568]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34569-34575]:BreakStatement[34569-34575]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[34582-34590]:SwitchCase[34582-34590]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34599-34611]:ReturnStatement[34599-34611]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[34647-34661]:ReturnStatement[34647-34661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34889-35603]:Block[34889-35603]"
    }, {
      "left" : "Preconditions.checkState(NodeUtil.isLiteralValue(value, true));",
      "right" : "Preconditions.checkState(NodeUtil.isLiteralValue(value, true));",
      "info" : "ExpressionStatement[34895-34958]:ExpressionStatement[34895-34958]"
    }, {
      "left" : "boolean valueUndefined = NodeUtil.isUndefined(value);",
      "right" : "boolean valueUndefined = NodeUtil.isUndefined(value);",
      "info" : "VariableDeclarationStatement[34963-35016]:VariableDeclarationStatement[34963-35016]"
    }, {
      "left" : "boolean valueNull = (Token.NULL == value.getType());",
      "right" : "boolean valueNull = (Token.NULL == value.getType());",
      "info" : "VariableDeclarationStatement[35021-35073]:VariableDeclarationStatement[35021-35073]"
    }, {
      "left" : "boolean equivalent = valueUndefined || valueNull;",
      "right" : "boolean equivalent = valueUndefined || valueNull;",
      "info" : "VariableDeclarationStatement[35078-35127]:VariableDeclarationStatement[35078-35127]"
    }, {
      "left" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueUndefined;\n      case Token.SHNE:\n        return !valueUndefined;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n        return false;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
      "right" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueUndefined;\n      case Token.SHNE:\n        return !valueUndefined;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n        return false;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
      "info" : "SwitchStatement[35132-35599]:SwitchStatement[35132-35599]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[35152-35166]:SwitchCase[35152-35166]"
    }, {
      "left" : "return equivalent;",
      "right" : "return equivalent;",
      "info" : "ReturnStatement[35240-35258]:ReturnStatement[35240-35258]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[35265-35279]:SwitchCase[35265-35279]"
    }, {
      "left" : "return !equivalent;",
      "right" : "return !equivalent;",
      "info" : "ReturnStatement[35288-35307]:ReturnStatement[35288-35307]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[35314-35330]:SwitchCase[35314-35330]"
    }, {
      "left" : "return valueUndefined;",
      "right" : "return valueUndefined;",
      "info" : "ReturnStatement[35339-35361]:ReturnStatement[35339-35361]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[35368-35384]:SwitchCase[35368-35384]"
    }, {
      "left" : "return !valueUndefined;",
      "right" : "return !valueUndefined;",
      "info" : "ReturnStatement[35393-35416]:ReturnStatement[35393-35416]"
    }, {
      "left" : "case Token.LT:",
      "right" : "case Token.LT:",
      "info" : "SwitchCase[35423-35437]:SwitchCase[35423-35437]"
    }, {
      "left" : "case Token.GT:",
      "right" : "case Token.GT:",
      "info" : "SwitchCase[35444-35458]:SwitchCase[35444-35458]"
    }, {
      "left" : "case Token.LE:",
      "right" : "case Token.LE:",
      "info" : "SwitchCase[35465-35479]:SwitchCase[35465-35479]"
    }, {
      "left" : "case Token.GE:",
      "right" : "case Token.GE:",
      "info" : "SwitchCase[35486-35500]:SwitchCase[35486-35500]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35509-35522]:ReturnStatement[35509-35522]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35529-35537]:SwitchCase[35529-35537]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected.\");",
      "right" : "throw new IllegalStateException(\"unexpected.\");",
      "info" : "ThrowStatement[35546-35593]:ThrowStatement[35546-35593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35644-35800]:Block[35644-35800]"
    }, {
      "left" : "switch (op) {\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return true;\n    }",
      "right" : "switch (op) {\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n        return true;\n    }",
      "info" : "SwitchStatement[35650-35778]:SwitchStatement[35650-35778]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[35670-35684]:SwitchCase[35670-35684]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[35691-35705]:SwitchCase[35691-35705]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[35712-35728]:SwitchCase[35712-35728]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[35735-35751]:SwitchCase[35735-35751]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35760-35772]:ReturnStatement[35760-35772]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35783-35796]:ReturnStatement[35783-35796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36014-36544]:Block[36014-36544]"
    }, {
      "left" : "boolean valueUndefined = NodeUtil.isUndefined(value);",
      "right" : "boolean valueUndefined = NodeUtil.isUndefined(value);",
      "info" : "VariableDeclarationStatement[36020-36073]:VariableDeclarationStatement[36020-36073]"
    }, {
      "left" : "boolean valueNull = (Token.NULL == value.getType());",
      "right" : "boolean valueNull = (Token.NULL == value.getType());",
      "info" : "VariableDeclarationStatement[36078-36130]:VariableDeclarationStatement[36078-36130]"
    }, {
      "left" : "boolean equivalent = valueUndefined || valueNull;",
      "right" : "boolean equivalent = valueUndefined || valueNull;",
      "info" : "VariableDeclarationStatement[36135-36184]:VariableDeclarationStatement[36135-36184]"
    }, {
      "left" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueNull;\n      case Token.SHNE:\n        return !valueNull;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
      "right" : "switch (op) {\n      case Token.EQ:\n        // undefined is only equal to null or an undefined value\n        return equivalent;\n      case Token.NE:\n        return !equivalent;\n      case Token.SHEQ:\n        return valueNull;\n      case Token.SHNE:\n        return !valueNull;\n      default:\n        throw new IllegalStateException(\"unexpected.\");\n    }",
      "info" : "SwitchStatement[36189-36540]:SwitchStatement[36189-36540]"
    }, {
      "left" : "case Token.EQ:",
      "right" : "case Token.EQ:",
      "info" : "SwitchCase[36209-36223]:SwitchCase[36209-36223]"
    }, {
      "left" : "return equivalent;",
      "right" : "return equivalent;",
      "info" : "ReturnStatement[36297-36315]:ReturnStatement[36297-36315]"
    }, {
      "left" : "case Token.NE:",
      "right" : "case Token.NE:",
      "info" : "SwitchCase[36322-36336]:SwitchCase[36322-36336]"
    }, {
      "left" : "return !equivalent;",
      "right" : "return !equivalent;",
      "info" : "ReturnStatement[36345-36364]:ReturnStatement[36345-36364]"
    }, {
      "left" : "case Token.SHEQ:",
      "right" : "case Token.SHEQ:",
      "info" : "SwitchCase[36371-36387]:SwitchCase[36371-36387]"
    }, {
      "left" : "return valueNull;",
      "right" : "return valueNull;",
      "info" : "ReturnStatement[36396-36413]:ReturnStatement[36396-36413]"
    }, {
      "left" : "case Token.SHNE:",
      "right" : "case Token.SHNE:",
      "info" : "SwitchCase[36420-36436]:SwitchCase[36420-36436]"
    }, {
      "left" : "return !valueNull;",
      "right" : "return !valueNull;",
      "info" : "ReturnStatement[36445-36463]:ReturnStatement[36445-36463]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36470-36478]:SwitchCase[36470-36478]"
    }, {
      "left" : "throw new IllegalStateException(\"unexpected.\");",
      "right" : "throw new IllegalStateException(\"unexpected.\");",
      "info" : "ThrowStatement[36487-36534]:ThrowStatement[36487-36534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36701-36914]:Block[36701-36914]"
    }, {
      "left" : "Preconditions.checkArgument(n.isNew());",
      "right" : "Preconditions.checkArgument(n.isNew());",
      "info" : "ExpressionStatement[36707-36746]:ExpressionStatement[36707-36746]"
    }, {
      "left" : "if (inForcedStringContext(n))",
      "right" : "if (inForcedStringContext(n))",
      "info" : "IfStatement[36813-36896]:IfStatement[36813-36896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36843-36896]:Block[36843-36896]"
    }, {
      "left" : "return tryFoldInForcedStringContext(n);",
      "right" : "return tryFoldInForcedStringContext(n);",
      "info" : "ReturnStatement[36851-36890]:ReturnStatement[36851-36890]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[36901-36910]:ReturnStatement[36901-36910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37028-37268]:Block[37028-37268]"
    }, {
      "left" : "if (n.getParent().isGetElem() &&\n        n.getParent().getLastChild() == n)",
      "right" : "if (n.getParent().isGetElem() &&\n        n.getParent().getLastChild() == n)",
      "info" : "IfStatement[37034-37136]:IfStatement[37034-37136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37110-37136]:Block[37110-37136]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37118-37130]:ReturnStatement[37118-37130]"
    }, {
      "left" : "if (n.getParent().isAdd())",
      "right" : "if (n.getParent().isAdd())",
      "info" : "IfStatement[37193-37246]:IfStatement[37193-37246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37220-37246]:Block[37220-37246]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[37228-37240]:ReturnStatement[37228-37240]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[37251-37264]:ReturnStatement[37251-37264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37322-38152]:Block[37322-38152]"
    }, {
      "left" : "Preconditions.checkArgument(n.isNew());",
      "right" : "Preconditions.checkArgument(n.isNew());",
      "info" : "ExpressionStatement[37376-37415]:ExpressionStatement[37376-37415]"
    }, {
      "left" : "Node objectType = n.getFirstChild();",
      "right" : "Node objectType = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[37421-37457]:VariableDeclarationStatement[37421-37457]"
    }, {
      "left" : "if (!objectType.isName())",
      "right" : "if (!objectType.isName())",
      "info" : "IfStatement[37462-37511]:IfStatement[37462-37511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37488-37511]:Block[37488-37511]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[37496-37505]:ReturnStatement[37496-37505]"
    }, {
      "left" : "if (objectType.getString().equals(\"String\"))",
      "right" : "if (objectType.getString().equals(\"String\"))",
      "info" : "IfStatement[37517-38134]:IfStatement[37517-38134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37562-38134]:Block[37562-38134]"
    }, {
      "left" : "Node value = objectType.getNext();",
      "right" : "Node value = objectType.getNext();",
      "info" : "VariableDeclarationStatement[37570-37604]:VariableDeclarationStatement[37570-37604]"
    }, {
      "left" : "String stringValue = null;",
      "right" : "String stringValue = null;",
      "info" : "VariableDeclarationStatement[37611-37637]:VariableDeclarationStatement[37611-37637]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[37644-37847]:IfStatement[37644-37847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37663-37698]:Block[37663-37698]"
    }, {
      "left" : "stringValue = \"\";",
      "right" : "stringValue = \"\";",
      "info" : "ExpressionStatement[37673-37690]:ExpressionStatement[37673-37690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37704-37847]:Block[37704-37847]"
    }, {
      "left" : "if (!NodeUtil.isImmutableValue(value))",
      "right" : "if (!NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[37714-37784]:IfStatement[37714-37784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37753-37784]:Block[37753-37784]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[37765-37774]:ReturnStatement[37765-37774]"
    }, {
      "left" : "stringValue = NodeUtil.getStringValue(value);",
      "right" : "stringValue = NodeUtil.getStringValue(value);",
      "info" : "ExpressionStatement[37794-37839]:ExpressionStatement[37794-37839]"
    }, {
      "left" : "if (stringValue == null)",
      "right" : "if (stringValue == null)",
      "info" : "IfStatement[37855-37907]:IfStatement[37855-37907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37880-37907]:Block[37880-37907]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[37890-37899]:ReturnStatement[37890-37899]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[37915-37943]:VariableDeclarationStatement[37915-37943]"
    }, {
      "left" : "Node newString = IR.string(stringValue);",
      "right" : "Node newString = IR.string(stringValue);",
      "info" : "VariableDeclarationStatement[37950-37990]:VariableDeclarationStatement[37950-37990]"
    }, {
      "left" : "parent.replaceChild(n, newString);",
      "right" : "parent.replaceChild(n, newString);",
      "info" : "ExpressionStatement[37998-38032]:ExpressionStatement[37998-38032]"
    }, {
      "left" : "newString.copyInformationFrom(parent);",
      "right" : "newString.copyInformationFrom(parent);",
      "info" : "ExpressionStatement[38039-38077]:ExpressionStatement[38039-38077]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[38084-38103]:ExpressionStatement[38084-38103]"
    }, {
      "left" : "return newString;",
      "right" : "return newString;",
      "info" : "ReturnStatement[38111-38128]:ReturnStatement[38111-38128]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[38139-38148]:ReturnStatement[38139-38148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38278-38521]:Block[38278-38521]"
    }, {
      "left" : "Preconditions.checkArgument(n.isGetElem());",
      "right" : "Preconditions.checkArgument(n.isGetElem());",
      "info" : "ExpressionStatement[38284-38327]:ExpressionStatement[38284-38327]"
    }, {
      "left" : "if (left.isObjectLit())",
      "right" : "if (left.isObjectLit())",
      "info" : "IfStatement[38333-38418]:IfStatement[38333-38418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38357-38418]:Block[38357-38418]"
    }, {
      "left" : "return tryFoldObjectPropAccess(n, left, right);",
      "right" : "return tryFoldObjectPropAccess(n, left, right);",
      "info" : "ReturnStatement[38365-38412]:ReturnStatement[38365-38412]"
    }, {
      "left" : "if (left.isArrayLit())",
      "right" : "if (left.isArrayLit())",
      "info" : "IfStatement[38424-38503]:IfStatement[38424-38503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38447-38503]:Block[38447-38503]"
    }, {
      "left" : "return tryFoldArrayAccess(n, left, right);",
      "right" : "return tryFoldArrayAccess(n, left, right);",
      "info" : "ReturnStatement[38455-38497]:ReturnStatement[38455-38497]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[38508-38517]:ReturnStatement[38508-38517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38675-39602]:Block[38675-39602]"
    }, {
      "left" : "Preconditions.checkArgument(n.isGetProp());",
      "right" : "Preconditions.checkArgument(n.isGetProp());",
      "info" : "ExpressionStatement[38681-38724]:ExpressionStatement[38681-38724]"
    }, {
      "left" : "if (left.isObjectLit())",
      "right" : "if (left.isObjectLit())",
      "info" : "IfStatement[38730-38815]:IfStatement[38730-38815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38754-38815]:Block[38754-38815]"
    }, {
      "left" : "return tryFoldObjectPropAccess(n, left, right);",
      "right" : "return tryFoldObjectPropAccess(n, left, right);",
      "info" : "ReturnStatement[38762-38809]:ReturnStatement[38762-38809]"
    }, {
      "left" : "if (right.isString() &&\n        right.getString().equals(\"length\"))",
      "right" : "if (right.isString() &&\n        right.getString().equals(\"length\"))",
      "info" : "IfStatement[38821-39583]:IfStatement[38821-39583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38889-39583]:Block[38889-39583]"
    }, {
      "left" : "int knownLength = -1;",
      "right" : "int knownLength = -1;",
      "info" : "VariableDeclarationStatement[38897-38918]:VariableDeclarationStatement[38897-38918]"
    }, {
      "left" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "right" : "switch (left.getType()) {\n        case Token.ARRAYLIT:\n          if (mayHaveSideEffects(left)) {\n            // Nope, can't fold this, without handling the side-effects.\n            return n;\n          }\n          knownLength = left.getChildCount();\n          break;\n        case Token.STRING:\n          knownLength = left.getString().length();\n          break;\n        default:\n          // Not a foldable case, forget it.\n          return n;\n      }",
      "info" : "SwitchStatement[38925-39376]:SwitchStatement[38925-39376]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[38959-38979]:SwitchCase[38959-38979]"
    }, {
      "left" : "if (mayHaveSideEffects(left))",
      "right" : "if (mayHaveSideEffects(left))",
      "info" : "IfStatement[38990-39128]:IfStatement[38990-39128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39020-39128]:Block[39020-39128]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39107-39116]:ReturnStatement[39107-39116]"
    }, {
      "left" : "knownLength = left.getChildCount();",
      "right" : "knownLength = left.getChildCount();",
      "info" : "ExpressionStatement[39139-39174]:ExpressionStatement[39139-39174]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39185-39191]:BreakStatement[39185-39191]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[39200-39218]:SwitchCase[39200-39218]"
    }, {
      "left" : "knownLength = left.getString().length();",
      "right" : "knownLength = left.getString().length();",
      "info" : "ExpressionStatement[39229-39269]:ExpressionStatement[39229-39269]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39280-39286]:BreakStatement[39280-39286]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39295-39303]:SwitchCase[39295-39303]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39359-39368]:ReturnStatement[39359-39368]"
    }, {
      "left" : "Preconditions.checkState(knownLength != -1);",
      "right" : "Preconditions.checkState(knownLength != -1);",
      "info" : "ExpressionStatement[39384-39428]:ExpressionStatement[39384-39428]"
    }, {
      "left" : "Node lengthNode = IR.number(knownLength);",
      "right" : "Node lengthNode = IR.number(knownLength);",
      "info" : "VariableDeclarationStatement[39435-39476]:VariableDeclarationStatement[39435-39476]"
    }, {
      "left" : "n.getParent().replaceChild(n, lengthNode);",
      "right" : "n.getParent().replaceChild(n, lengthNode);",
      "info" : "ExpressionStatement[39483-39525]:ExpressionStatement[39483-39525]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[39532-39551]:ExpressionStatement[39532-39551]"
    }, {
      "left" : "return lengthNode;",
      "right" : "return lengthNode;",
      "info" : "ReturnStatement[39559-39577]:ReturnStatement[39559-39577]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[39589-39598]:ReturnStatement[39589-39598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39649-40034]:Block[39649-40034]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[39655-39683]:VariableDeclarationStatement[39655-39683]"
    }, {
      "left" : "if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || parent.isInc()\n        || parent.isDec())",
      "right" : "if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)\n        || parent.isInc()\n        || parent.isDec())",
      "info" : "IfStatement[39688-40012]:IfStatement[39688-40012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39810-40012]:Block[39810-40012]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[39994-40006]:ReturnStatement[39994-40006]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[40017-40030]:ReturnStatement[40017-40030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40101-41329]:Block[40101-41436]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[40107-40135]:VariableDeclarationStatement[40107-40135]"
    }, {
      "left" : "if (isAssignmentTarget(n))",
      "right" : "if (isAssignmentTarget(n))",
      "info" : "IfStatement[40291-40341]:IfStatement[40291-40341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40318-40341]:Block[40318-40341]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[40326-40335]:ReturnStatement[40326-40335]"
    }, {
      "left" : "if (!right.isNumber())",
      "right" : "if (!right.isNumber())",
      "info" : "IfStatement[40347-40522]:IfStatement[40347-40522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40370-40522]:Block[40370-40522]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[40507-40516]:ReturnStatement[40507-40516]"
    }, {
      "left" : "double index = right.getDouble();",
      "right" : "double index = right.getDouble();",
      "info" : "VariableDeclarationStatement[40528-40561]:VariableDeclarationStatement[40528-40561]"
    }, {
      "left" : "int intIndex = (int) index;",
      "right" : "int intIndex = (int) index;",
      "info" : "VariableDeclarationStatement[40566-40593]:VariableDeclarationStatement[40566-40593]"
    }, {
      "left" : "if (intIndex != index)",
      "right" : "if (intIndex != index)",
      "info" : "IfStatement[40598-40693]:IfStatement[40598-40693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40621-40693]:Block[40621-40693]"
    }, {
      "left" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "right" : "error(INVALID_GETELEM_INDEX_ERROR, right);",
      "info" : "ExpressionStatement[40629-40671]:ExpressionStatement[40629-40671]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[40678-40687]:ReturnStatement[40678-40687]"
    }, {
      "left" : "if (intIndex < 0)",
      "right" : "if (intIndex < 0)",
      "info" : "IfStatement[40699-40787]:IfStatement[40699-40787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40717-40787]:Block[40717-40787]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[40725-40765]:ExpressionStatement[40725-40765]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[40772-40781]:ReturnStatement[40772-40781]"
    }, {
      "left" : "Node current = left.getFirstChild();",
      "right" : "Node current = left.getFirstChild();",
      "info" : "VariableDeclarationStatement[40793-40829]:VariableDeclarationStatement[40793-40829]"
    }, {
      "left" : "Node elem = null;",
      "right" : "Node elem = null;",
      "info" : "VariableDeclarationStatement[40834-40851]:VariableDeclarationStatement[40834-40851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40910-40977]:Block[40894-41084]"
    }, {
      "left" : "elem = current;",
      "right" : "elem = current;",
      "info" : "ExpressionStatement[40920-40935]:ExpressionStatement[41019-41034]"
    }, {
      "left" : "current = current.getNext();",
      "right" : "current = current.getNext();",
      "info" : "ExpressionStatement[40943-40971]:ExpressionStatement[41050-41078]"
    }, {
      "left" : "if (elem == null)",
      "right" : "if (elem == null)",
      "info" : "IfStatement[40983-41071]:IfStatement[41090-41178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41001-41071]:Block[41108-41178]"
    }, {
      "left" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "right" : "error(INDEX_OUT_OF_BOUNDS_ERROR, right);",
      "info" : "ExpressionStatement[41009-41049]:ExpressionStatement[41116-41156]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[41056-41065]:ReturnStatement[41163-41172]"
    }, {
      "left" : "if (elem.isEmpty())",
      "right" : "if (elem.isEmpty())",
      "info" : "IfStatement[41077-41193]:IfStatement[41184-41300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41097-41150]:Block[41204-41257]"
    }, {
      "left" : "elem = NodeUtil.newUndefinedNode(elem);",
      "right" : "elem = NodeUtil.newUndefinedNode(elem);",
      "info" : "ExpressionStatement[41105-41144]:ExpressionStatement[41212-41251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41156-41193]:Block[41263-41300]"
    }, {
      "left" : "left.removeChild(elem);",
      "right" : "left.removeChild(elem);",
      "info" : "ExpressionStatement[41164-41187]:ExpressionStatement[41271-41294]"
    }, {
      "left" : "n.getParent().replaceChild(n, elem);",
      "right" : "n.getParent().replaceChild(n, elem);",
      "info" : "ExpressionStatement[41248-41284]:ExpressionStatement[41355-41391]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[41289-41308]:ExpressionStatement[41396-41415]"
    }, {
      "left" : "return elem;",
      "right" : "return elem;",
      "info" : "ReturnStatement[41313-41325]:ReturnStatement[41420-41432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41401-43250]:Block[41508-43357]"
    }, {
      "left" : "Preconditions.checkArgument(NodeUtil.isGet(n));",
      "right" : "Preconditions.checkArgument(NodeUtil.isGet(n));",
      "info" : "ExpressionStatement[41407-41454]:ExpressionStatement[41514-41561]"
    }, {
      "left" : "if (!left.isObjectLit() || !right.isString())",
      "right" : "if (!left.isObjectLit() || !right.isString())",
      "info" : "IfStatement[41460-41529]:IfStatement[41567-41636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41506-41529]:Block[41613-41636]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[41514-41523]:ReturnStatement[41621-41630]"
    }, {
      "left" : "if (isAssignmentTarget(n))",
      "right" : "if (isAssignmentTarget(n))",
      "info" : "IfStatement[41535-41761]:IfStatement[41642-41868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41562-41761]:Block[41669-41868]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[41746-41755]:ReturnStatement[41853-41862]"
    }, {
      "left" : "Node key = null;",
      "right" : "Node key = null;",
      "info" : "VariableDeclarationStatement[41821-41837]:VariableDeclarationStatement[41928-41944]"
    }, {
      "left" : "Node value = null;",
      "right" : "Node value = null;",
      "info" : "VariableDeclarationStatement[41842-41860]:VariableDeclarationStatement[41949-41967]"
    }, {
      "left" : "for (Node c = left.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = left.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[41865-42659]:ForStatement[41972-42766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41929-42659]:Block[42036-42766]"
    }, {
      "left" : "if (c.getString().equals(right.getString()))",
      "right" : "if (c.getString().equals(right.getString()))",
      "info" : "IfStatement[41937-42653]:IfStatement[42044-42760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41982-42461]:Block[42089-42568]"
    }, {
      "left" : "switch (c.getType()) {\n          case Token.SETTER_DEF:\n            continue;\n          case Token.GETTER_DEF:\n          case Token.STRING_KEY:\n            if (value != null && mayHaveSideEffects(value)) {\n              // The previously found value had side-effects\n              return n;\n            }\n            key = c;\n            value = key.getFirstChild();\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "right" : "switch (c.getType()) {\n          case Token.SETTER_DEF:\n            continue;\n          case Token.GETTER_DEF:\n          case Token.STRING_KEY:\n            if (value != null && mayHaveSideEffects(value)) {\n              // The previously found value had side-effects\n              return n;\n            }\n            key = c;\n            value = key.getFirstChild();\n            break;\n          default:\n            throw new IllegalStateException();\n        }",
      "info" : "SwitchStatement[41992-42453]:SwitchStatement[42099-42560]"
    }, {
      "left" : "case Token.SETTER_DEF:",
      "right" : "case Token.SETTER_DEF:",
      "info" : "SwitchCase[42025-42047]:SwitchCase[42132-42154]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[42060-42069]:ContinueStatement[42167-42176]"
    }, {
      "left" : "case Token.GETTER_DEF:",
      "right" : "case Token.GETTER_DEF:",
      "info" : "SwitchCase[42080-42102]:SwitchCase[42187-42209]"
    }, {
      "left" : "case Token.STRING_KEY:",
      "right" : "case Token.STRING_KEY:",
      "info" : "SwitchCase[42113-42135]:SwitchCase[42220-42242]"
    }, {
      "left" : "if (value != null && mayHaveSideEffects(value))",
      "right" : "if (value != null && mayHaveSideEffects(value))",
      "info" : "IfStatement[42148-42296]:IfStatement[42255-42403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42196-42296]:Block[42303-42403]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42273-42282]:ReturnStatement[42380-42389]"
    }, {
      "left" : "key = c;",
      "right" : "key = c;",
      "info" : "ExpressionStatement[42309-42317]:ExpressionStatement[42416-42424]"
    }, {
      "left" : "value = key.getFirstChild();",
      "right" : "value = key.getFirstChild();",
      "info" : "ExpressionStatement[42330-42358]:ExpressionStatement[42437-42465]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42371-42377]:BreakStatement[42478-42484]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42388-42396]:SwitchCase[42495-42503]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[42409-42443]:ThrowStatement[42516-42550]"
    }, {
      "left" : "if (mayHaveSideEffects(c.getFirstChild()))",
      "right" : "if (mayHaveSideEffects(c.getFirstChild()))",
      "info" : "IfStatement[42467-42653]:IfStatement[42574-42760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42510-42653]:Block[42617-42760]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42636-42645]:ReturnStatement[42743-42752]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[42784-42826]:IfStatement[42891-42933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42803-42826]:Block[42910-42933]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42811-42820]:ReturnStatement[42918-42927]"
    }, {
      "left" : "if (value.isFunction() && NodeUtil.referencesThis(value))",
      "right" : "if (value.isFunction() && NodeUtil.referencesThis(value))",
      "info" : "IfStatement[42832-42977]:IfStatement[42939-43084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42890-42977]:Block[42997-43084]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[42962-42971]:ReturnStatement[43069-43078]"
    }, {
      "left" : "Node replacement = value.detachFromParent();",
      "right" : "Node replacement = value.detachFromParent();",
      "info" : "VariableDeclarationStatement[42983-43027]:VariableDeclarationStatement[43090-43134]"
    }, {
      "left" : "if (key.isGetterDef())",
      "right" : "if (key.isGetterDef())",
      "info" : "IfStatement[43032-43159]:IfStatement[43139-43266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43054-43159]:Block[43161-43266]"
    }, {
      "left" : "replacement = IR.call(replacement);",
      "right" : "replacement = IR.call(replacement);",
      "info" : "ExpressionStatement[43062-43097]:ExpressionStatement[43169-43204]"
    }, {
      "left" : "replacement.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "replacement.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[43104-43153]:ExpressionStatement[43211-43260]"
    }, {
      "left" : "n.getParent().replaceChild(n, replacement);",
      "right" : "n.getParent().replaceChild(n, replacement);",
      "info" : "ExpressionStatement[43165-43208]:ExpressionStatement[43272-43315]"
    }, {
      "left" : "reportCodeChange();",
      "right" : "reportCodeChange();",
      "info" : "ExpressionStatement[43213-43232]:ExpressionStatement[43320-43339]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[43237-43246]:ReturnStatement[43344-43353]"
    } ]
  },
  "interFileMappings" : { }
}