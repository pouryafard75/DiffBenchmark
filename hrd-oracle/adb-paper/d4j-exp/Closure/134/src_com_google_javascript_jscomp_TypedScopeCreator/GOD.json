{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "TypeDeclaration[3877-50587]:TypeDeclaration[3877-50865]"
    }, {
      "left" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "right" : "static final DiagnosticType MALFORMED_TYPEDEF =\n      DiagnosticType.warning(\n          \"JSC_MALFORMED_TYPEDEF\",\n          \"Typedef for {0} does not have any type information\");",
      "info" : "FieldDeclaration[4383-4560]:FieldDeclaration[4383-4560]"
    }, {
      "left" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "right" : "static final DiagnosticType ENUM_INITIALIZER =\n      DiagnosticType.warning(\n          \"JSC_ENUM_INITIALIZER_NOT_ENUM\",\n          \"enum initializer must be an object literal or an enum\");",
      "info" : "FieldDeclaration[4564-4751]:FieldDeclaration[4564-4751]"
    }, {
      "left" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "right" : "static final DiagnosticType CONSTRUCTOR_EXPECTED =\n      DiagnosticType.warning(\n          \"JSC_REFLECT_CONSTRUCTOR_EXPECTED\",\n          \"Constructor expected as first argument\");",
      "info" : "FieldDeclaration[4755-4934]:FieldDeclaration[4755-4934]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[4938-4978]:FieldDeclaration[4938-4978]"
    }, {
      "left" : "private final TypeValidator validator;",
      "right" : "private final TypeValidator validator;",
      "info" : "FieldDeclaration[4981-5019]:FieldDeclaration[4981-5019]"
    }, {
      "left" : "private final CodingConvention codingConvention;",
      "right" : "private final CodingConvention codingConvention;",
      "info" : "FieldDeclaration[5022-5070]:FieldDeclaration[5022-5070]"
    }, {
      "left" : "private final JSTypeRegistry typeRegistry;",
      "right" : "private final JSTypeRegistry typeRegistry;",
      "info" : "FieldDeclaration[5073-5115]:FieldDeclaration[5073-5115]"
    }, {
      "left" : "private Map<ObjectType, ObjectType> delegateProxyMap = Maps.newHashMap();",
      "right" : "private Map<ObjectType, ObjectType> delegateProxyMap = Maps.newHashMap();",
      "info" : "FieldDeclaration[5118-5191]:FieldDeclaration[5118-5191]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[5195-5297]:MethodDeclaration[5195-5297]"
    }, {
      "left" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "right" : "TypedScopeCreator(AbstractCompiler compiler,\n      CodingConvention codingConvention)",
      "info" : "MethodDeclaration[5301-5570]:MethodDeclaration[5301-5570]"
    }, {
      "left" : "public Scope createScope(Node root, Scope parent)",
      "right" : "public Scope createScope(Node root, Scope parent)",
      "info" : "MethodDeclaration[5574-7238]:MethodDeclaration[5574-7238]"
    }, {
      "left" : "Scope createInitialScope(Node root)",
      "right" : "Scope createInitialScope(Node root)",
      "info" : "MethodDeclaration[7242-8907]:MethodDeclaration[7242-8907]"
    }, {
      "left" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "right" : "private void declareNativeFunctionType(Scope scope, JSTypeNative tId)",
      "info" : "MethodDeclaration[8911-9215]:MethodDeclaration[8911-9215]"
    }, {
      "left" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "right" : "private void declareNativeValueType(Scope scope, String name,\n      JSTypeNative tId)",
      "info" : "MethodDeclaration[9219-9379]:MethodDeclaration[9219-9379]"
    }, {
      "left" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "right" : "private void declareNativeType(Scope scope, String name, JSType t)",
      "info" : "MethodDeclaration[9383-9502]:MethodDeclaration[9383-9502]"
    }, {
      "left" : "private static Node getPrototypePropertyOwner(Node n)",
      "right" : "private static Node getPrototypePropertyOwner(Node n)",
      "info" : "MethodDeclaration[9506-10144]:MethodDeclaration[9506-10144]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "TypeDeclaration[10148-28579]:TypeDeclaration[10148-28857]"
    }, {
      "left" : "final Scope scope;",
      "right" : "final Scope scope;",
      "info" : "FieldDeclaration[10239-10311]:FieldDeclaration[10239-10311]"
    }, {
      "left" : "private String sourceName = null;",
      "right" : "private String sourceName = null;",
      "info" : "FieldDeclaration[10317-10412]:FieldDeclaration[10317-10412]"
    }, {
      "left" : "private AbstractScopeBuilder(Scope scope)",
      "right" : "private AbstractScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[10418-10493]:MethodDeclaration[10418-10493]"
    }, {
      "left" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "right" : "public final boolean shouldTraverse(NodeTraversal nodeTraversal, Node n,\n        Node parent)",
      "info" : "MethodDeclaration[10499-11035]:MethodDeclaration[10499-11035]"
    }, {
      "left" : "public abstract void visit(NodeTraversal t, Node n, Node parent);",
      "right" : "public abstract void visit(NodeTraversal t, Node n, Node parent);",
      "info" : "MethodDeclaration[11041-11120]:MethodDeclaration[11041-11120]"
    }, {
      "left" : "JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info)",
      "right" : "JSType getDeclaredTypeInAnnotation(\n        NodeTraversal t, Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[11126-11524]:MethodDeclaration[11126-11524]"
    }, {
      "left" : "JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "right" : "JSType getDeclaredTypeInAnnotation(String sourceName,\n        Node node, JSDocInfo info)",
      "info" : "MethodDeclaration[11530-13191]:MethodDeclaration[11530-13191]"
    }, {
      "left" : "void define(Node n, Node parent)",
      "right" : "void define(Node n, Node parent)",
      "info" : "MethodDeclaration[13197-16249]:MethodDeclaration[13197-16249]"
    }, {
      "left" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "right" : "private void defineName(Node name, Node var, Node parent, JSDocInfo info)",
      "info" : "MethodDeclaration[16255-17830]:MethodDeclaration[16255-17830]"
    }, {
      "left" : "private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode)",
      "right" : "private FunctionType getFunctionType(String name,\n        Node rValue, JSDocInfo info, @Nullable Node lvalueNode)",
      "info" : "MethodDeclaration[17836-22055]:MethodDeclaration[17836-22055]"
    }, {
      "left" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "right" : "private FunctionType findOverriddenFunction(\n        ObjectType ownerType, String propName)",
      "info" : "MethodDeclaration[22061-22610]:MethodDeclaration[22061-22888]"
    }, {
      "left" : "private EnumType getEnumType(String name, Node parent,\n        Node value, JSType elementsType)",
      "right" : "private EnumType getEnumType(String name, Node parent,\n        Node value, JSType elementsType)",
      "info" : "MethodDeclaration[22616-24831]:MethodDeclaration[22894-25109]"
    }, {
      "left" : "private void defineSlot(Node name, Node parent, JSType type)",
      "right" : "private void defineSlot(Node name, Node parent, JSType type)",
      "info" : "MethodDeclaration[24837-25361]:MethodDeclaration[25115-25639]"
    }, {
      "left" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "right" : "void defineSlot(Node n, Node parent, JSType type, boolean inferred)",
      "info" : "MethodDeclaration[25367-28575]:MethodDeclaration[25645-28853]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "TypeDeclaration[28583-47399]:TypeDeclaration[28861-47677]"
    }, {
      "left" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "right" : "private final List<Node> nonExternFunctions = Lists.newArrayList();",
      "info" : "FieldDeclaration[28769-28923]:FieldDeclaration[29047-29201]"
    }, {
      "left" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "right" : "private final List<StubDeclaration> stubDeclarations =\n        Lists.newArrayList();",
      "info" : "FieldDeclaration[28929-29203]:FieldDeclaration[29207-29481]"
    }, {
      "left" : "private GlobalScopeBuilder(Scope scope)",
      "right" : "private GlobalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[29209-29276]:MethodDeclaration[29487-29554]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[29282-35794]:MethodDeclaration[29560-36072]"
    }, {
      "left" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "right" : "private void checkForTypedef(\n        NodeTraversal t, Node candidate, JSDocInfo info)",
      "info" : "MethodDeclaration[35800-36902]:MethodDeclaration[36078-37180]"
    }, {
      "left" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "right" : "// TODO(nicksantos): Kill this.\n    private void checkForOldStyleTypedef(NodeTraversal t, Node candidate)",
      "info" : "MethodDeclaration[36908-37986]:MethodDeclaration[37186-38264]"
    }, {
      "left" : "private void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "right" : "private void maybeDeclareQualifiedName(NodeTraversal t, JSDocInfo info,\n        Node n, Node parent, Node rhsValue)",
      "info" : "MethodDeclaration[37992-42454]:MethodDeclaration[38270-42732]"
    }, {
      "left" : "private ObjectType getObjectSlot(String slotName)",
      "right" : "private ObjectType getObjectSlot(String slotName)",
      "info" : "MethodDeclaration[42460-43008]:MethodDeclaration[42738-43286]"
    }, {
      "left" : "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue)",
      "right" : "private JSType getDeclaredGetPropType(NodeTraversal t, JSDocInfo info,\n        Node n, Node rhsValue)",
      "info" : "MethodDeclaration[43014-43883]:MethodDeclaration[43292-44161]"
    }, {
      "left" : "private void resolveStubDeclarations()",
      "right" : "private void resolveStubDeclarations()",
      "info" : "MethodDeclaration[43889-45217]:MethodDeclaration[44167-45495]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "TypeDeclaration[45223-45629]:TypeDeclaration[45501-45907]"
    }, {
      "left" : "private final Node node;",
      "right" : "private final Node node;",
      "info" : "FieldDeclaration[45339-45363]:FieldDeclaration[45617-45641]"
    }, {
      "left" : "private final boolean isExtern;",
      "right" : "private final boolean isExtern;",
      "info" : "FieldDeclaration[45370-45401]:FieldDeclaration[45648-45679]"
    }, {
      "left" : "private final String ownerName;",
      "right" : "private final String ownerName;",
      "info" : "FieldDeclaration[45408-45439]:FieldDeclaration[45686-45717]"
    }, {
      "left" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "right" : "private StubDeclaration(Node node, boolean isExtern, String ownerName)",
      "info" : "MethodDeclaration[45447-45623]:MethodDeclaration[45725-45901]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "TypeDeclaration[45635-47370]:TypeDeclaration[45913-47648]"
    }, {
      "left" : "private final ObjectType thisType;",
      "right" : "private final ObjectType thisType;",
      "info" : "FieldDeclaration[45847-45881]:FieldDeclaration[46125-46159]"
    }, {
      "left" : "CollectProperties(ObjectType thisType)",
      "right" : "CollectProperties(ObjectType thisType)",
      "info" : "MethodDeclaration[45889-45971]:MethodDeclaration[46167-46249]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[45979-46377]:MethodDeclaration[46257-46655]"
    }, {
      "left" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo)",
      "right" : "private void maybeCollectMember(NodeTraversal t,\n          Node member, Node nodeWithJsDocInfo)",
      "info" : "MethodDeclaration[46385-47364]:MethodDeclaration[46663-47642]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "TypeDeclaration[47429-50560]:TypeDeclaration[47707-50838]"
    }, {
      "left" : "private LocalScopeBuilder(Scope scope)",
      "right" : "private LocalScopeBuilder(Scope scope)",
      "info" : "MethodDeclaration[47604-47737]:MethodDeclaration[47882-48015]"
    }, {
      "left" : "void build()",
      "right" : "void build()",
      "info" : "MethodDeclaration[47743-47891]:MethodDeclaration[48021-48169]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[47897-48749]:MethodDeclaration[48175-49027]"
    }, {
      "left" : "private void handleFunctionInputs(Node fnNode)",
      "right" : "private void handleFunctionInputs(Node fnNode)",
      "info" : "MethodDeclaration[48755-49620]:MethodDeclaration[49033-49898]"
    }, {
      "left" : "private void declareArguments(Node functionNode)",
      "right" : "private void declareArguments(Node functionNode)",
      "info" : "MethodDeclaration[49626-50532]:MethodDeclaration[49904-50810]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4324-4329]:Modifier[4324-4329]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[4330-4335]:TYPE_DECLARATION_KIND[4330-4335]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[4336-4353]:SimpleName[4336-4353]"
    }, {
      "left" : "ScopeCreator",
      "right" : "ScopeCreator",
      "info" : "SimpleType[4365-4377]:SimpleType[4365-4377]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[5195-5212]:SimpleName[5195-5212]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[5213-5238]:SingleVariableDeclaration[5213-5238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5240-5297]:Block[5240-5297]"
    }, {
      "left" : "this(compiler, compiler.getCodingConvention());",
      "right" : "this(compiler, compiler.getCodingConvention());",
      "info" : "ConstructorInvocation[5246-5293]:ConstructorInvocation[5246-5293]"
    }, {
      "left" : "TypedScopeCreator",
      "right" : "TypedScopeCreator",
      "info" : "SimpleName[5301-5318]:SimpleName[5301-5318]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[5319-5344]:SingleVariableDeclaration[5319-5344]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[5352-5385]:SingleVariableDeclaration[5352-5385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5387-5570]:Block[5387-5570]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[5393-5418]:ExpressionStatement[5393-5418]"
    }, {
      "left" : "this.validator = compiler.getTypeValidator();",
      "right" : "this.validator = compiler.getTypeValidator();",
      "info" : "ExpressionStatement[5423-5468]:ExpressionStatement[5423-5468]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[5473-5514]:ExpressionStatement[5473-5514]"
    }, {
      "left" : "this.typeRegistry = compiler.getTypeRegistry();",
      "right" : "this.typeRegistry = compiler.getTypeRegistry();",
      "info" : "ExpressionStatement[5519-5566]:ExpressionStatement[5519-5566]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5711-5717]:Modifier[5711-5717]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[5718-5723]:SimpleType[5718-5723]"
    }, {
      "left" : "createScope",
      "right" : "createScope",
      "info" : "SimpleName[5724-5735]:SimpleName[5724-5735]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[5736-5745]:SingleVariableDeclaration[5736-5745]"
    }, {
      "left" : "Scope parent",
      "right" : "Scope parent",
      "info" : "SingleVariableDeclaration[5747-5759]:SingleVariableDeclaration[5747-5759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5761-7238]:Block[5761-7238]"
    }, {
      "left" : "Scope newScope = null;",
      "right" : "Scope newScope = null;",
      "info" : "VariableDeclarationStatement[5956-5978]:VariableDeclarationStatement[5956-5978]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[5983-7165]:IfStatement[5983-7165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6003-7061]:Block[6003-7061]"
    }, {
      "left" : "newScope = createInitialScope(root);",
      "right" : "newScope = createInitialScope(root);",
      "info" : "ExpressionStatement[6062-6098]:ExpressionStatement[6062-6098]"
    }, {
      "left" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(newScope);",
      "right" : "GlobalScopeBuilder scopeBuilder = new GlobalScopeBuilder(newScope);",
      "info" : "VariableDeclarationStatement[6106-6173]:VariableDeclarationStatement[6106-6173]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "right" : "NodeTraversal.traverse(compiler, root, scopeBuilder);",
      "info" : "ExpressionStatement[6180-6233]:ExpressionStatement[6180-6233]"
    }, {
      "left" : "scopeBuilder.resolveStubDeclarations();",
      "right" : "scopeBuilder.resolveStubDeclarations();",
      "info" : "ExpressionStatement[6240-6279]:ExpressionStatement[6240-6279]"
    }, {
      "left" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "right" : "for (Node functionNode : scopeBuilder.nonExternFunctions)",
      "info" : "EnhancedForStatement[6455-6947]:EnhancedForStatement[6455-6947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6513-6947]:Block[6513-6947]"
    }, {
      "left" : "JSType type = functionNode.getJSType();",
      "right" : "JSType type = functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[6523-6562]:VariableDeclarationStatement[6523-6562]"
    }, {
      "left" : "if (type != null && type instanceof FunctionType)",
      "right" : "if (type != null && type instanceof FunctionType)",
      "info" : "IfStatement[6571-6939]:IfStatement[6571-6939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6621-6939]:Block[6621-6939]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[6633-6675]:VariableDeclarationStatement[6633-6675]"
    }, {
      "left" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "right" : "ObjectType fnThisType = fnType.getTypeOfThis();",
      "info" : "VariableDeclarationStatement[6686-6733]:VariableDeclarationStatement[6686-6733]"
    }, {
      "left" : "if (!fnThisType.isUnknownType())",
      "right" : "if (!fnThisType.isUnknownType())",
      "info" : "IfStatement[6744-6929]:IfStatement[6744-6929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6777-6929]:Block[6777-6929]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n                scopeBuilder.new CollectProperties(fnThisType));",
      "right" : "NodeTraversal.traverse(compiler, functionNode.getLastChild(),\n                scopeBuilder.new CollectProperties(fnThisType));",
      "info" : "ExpressionStatement[6791-6917]:ExpressionStatement[6791-6917]"
    }, {
      "left" : "codingConvention.defineDelegateProxyProperties(\n          typeRegistry, newScope, delegateProxyMap);",
      "right" : "codingConvention.defineDelegateProxyProperties(\n          typeRegistry, newScope, delegateProxyMap);",
      "info" : "ExpressionStatement[6955-7055]:ExpressionStatement[6955-7055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7067-7165]:Block[7067-7165]"
    }, {
      "left" : "newScope = new Scope(parent, root);",
      "right" : "newScope = new Scope(parent, root);",
      "info" : "ExpressionStatement[7075-7110]:ExpressionStatement[7075-7110]"
    }, {
      "left" : "(new LocalScopeBuilder(newScope)).build();",
      "right" : "(new LocalScopeBuilder(newScope)).build();",
      "info" : "ExpressionStatement[7117-7159]:ExpressionStatement[7117-7159]"
    }, {
      "left" : "typeRegistry.resolveTypesInScope(newScope);",
      "right" : "typeRegistry.resolveTypesInScope(newScope);",
      "info" : "ExpressionStatement[7170-7213]:ExpressionStatement[7170-7213]"
    }, {
      "left" : "return newScope;",
      "right" : "return newScope;",
      "info" : "ReturnStatement[7218-7234]:ReturnStatement[7218-7234]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[7370-7388]:MarkerAnnotation[7370-7388]"
    }, {
      "left" : "Scope",
      "right" : "Scope",
      "info" : "SimpleType[7391-7396]:SimpleType[7391-7396]"
    }, {
      "left" : "createInitialScope",
      "right" : "createInitialScope",
      "info" : "SimpleName[7397-7415]:SimpleName[7397-7415]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[7416-7425]:SingleVariableDeclaration[7416-7425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7427-8907]:Block[7427-8907]"
    }, {
      "left" : "Scope s = new Scope(root, compiler);",
      "right" : "Scope s = new Scope(root, compiler);",
      "info" : "VariableDeclarationStatement[7433-7469]:VariableDeclarationStatement[7433-7469]"
    }, {
      "left" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ARRAY_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7474-7524]:ExpressionStatement[7474-7524]"
    }, {
      "left" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, BOOLEAN_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7529-7588]:ExpressionStatement[7529-7588]"
    }, {
      "left" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, DATE_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7593-7642]:ExpressionStatement[7593-7642]"
    }, {
      "left" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7647-7697]:ExpressionStatement[7647-7697]"
    }, {
      "left" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, EVAL_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7702-7757]:ExpressionStatement[7702-7757]"
    }, {
      "left" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, FUNCTION_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7762-7815]:ExpressionStatement[7762-7815]"
    }, {
      "left" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, NUMBER_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7820-7878]:ExpressionStatement[7820-7878]"
    }, {
      "left" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7883-7934]:ExpressionStatement[7883-7934]"
    }, {
      "left" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, RANGE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[7939-7995]:ExpressionStatement[7939-7995]"
    }, {
      "left" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REFERENCE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8000-8060]:ExpressionStatement[8000-8060]"
    }, {
      "left" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, REGEXP_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8065-8116]:ExpressionStatement[8065-8116]"
    }, {
      "left" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, STRING_OBJECT_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8121-8179]:ExpressionStatement[8121-8179]"
    }, {
      "left" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, SYNTAX_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8184-8241]:ExpressionStatement[8184-8241]"
    }, {
      "left" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, TYPE_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8246-8301]:ExpressionStatement[8246-8301]"
    }, {
      "left" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "right" : "declareNativeFunctionType(s, URI_ERROR_FUNCTION_TYPE);",
      "info" : "ExpressionStatement[8306-8360]:ExpressionStatement[8306-8360]"
    }, {
      "left" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "right" : "declareNativeValueType(s, \"undefined\", VOID_TYPE);",
      "info" : "ExpressionStatement[8365-8415]:ExpressionStatement[8365-8415]"
    }, {
      "left" : "declareNativeValueType(s, \"goog.typedef\", NO_TYPE);",
      "right" : "declareNativeValueType(s, \"goog.typedef\", NO_TYPE);",
      "info" : "ExpressionStatement[8600-8651]:ExpressionStatement[8600-8651]"
    }, {
      "left" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "right" : "declareNativeValueType(s, \"ActiveXObject\", NO_OBJECT_TYPE);",
      "info" : "ExpressionStatement[8829-8888]:ExpressionStatement[8829-8888]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[8894-8903]:ReturnStatement[8894-8903]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8911-8918]:Modifier[8911-8918]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8919-8923]:PrimitiveType[8919-8923]"
    }, {
      "left" : "declareNativeFunctionType",
      "right" : "declareNativeFunctionType",
      "info" : "SimpleName[8924-8949]:SimpleName[8924-8949]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[8950-8961]:SingleVariableDeclaration[8950-8961]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[8963-8979]:SingleVariableDeclaration[8963-8979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8981-9215]:Block[8981-9215]"
    }, {
      "left" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "right" : "FunctionType t = typeRegistry.getNativeFunctionType(tId);",
      "info" : "VariableDeclarationStatement[8987-9044]:VariableDeclarationStatement[8987-9044]"
    }, {
      "left" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "right" : "declareNativeType(scope, t.getInstanceType().getReferenceName(), t);",
      "info" : "ExpressionStatement[9049-9117]:ExpressionStatement[9049-9117]"
    }, {
      "left" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "right" : "declareNativeType(\n        scope, t.getPrototype().getReferenceName(), t.getPrototype());",
      "info" : "ExpressionStatement[9122-9211]:ExpressionStatement[9122-9211]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9219-9226]:Modifier[9219-9226]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9227-9231]:PrimitiveType[9227-9231]"
    }, {
      "left" : "declareNativeValueType",
      "right" : "declareNativeValueType",
      "info" : "SimpleName[9232-9254]:SimpleName[9232-9254]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[9255-9266]:SingleVariableDeclaration[9255-9266]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[9268-9279]:SingleVariableDeclaration[9268-9279]"
    }, {
      "left" : "JSTypeNative tId",
      "right" : "JSTypeNative tId",
      "info" : "SingleVariableDeclaration[9287-9303]:SingleVariableDeclaration[9287-9303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9305-9379]:Block[9305-9379]"
    }, {
      "left" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "right" : "declareNativeType(scope, name, typeRegistry.getNativeType(tId));",
      "info" : "ExpressionStatement[9311-9375]:ExpressionStatement[9311-9375]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9383-9390]:Modifier[9383-9390]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9391-9395]:PrimitiveType[9391-9395]"
    }, {
      "left" : "declareNativeType",
      "right" : "declareNativeType",
      "info" : "SimpleName[9396-9413]:SimpleName[9396-9413]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[9414-9425]:SingleVariableDeclaration[9414-9425]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[9427-9438]:SingleVariableDeclaration[9427-9438]"
    }, {
      "left" : "JSType t",
      "right" : "JSType t",
      "info" : "SingleVariableDeclaration[9440-9448]:SingleVariableDeclaration[9440-9448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9450-9502]:Block[9450-9502]"
    }, {
      "left" : "scope.declare(name, null, t, null, false);",
      "right" : "scope.declare(name, null, t, null, false);",
      "info" : "ExpressionStatement[9456-9498]:ExpressionStatement[9456-9498]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9712-9719]:Modifier[9712-9719]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9720-9726]:Modifier[9720-9726]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[9727-9731]:SimpleType[9727-9731]"
    }, {
      "left" : "getPrototypePropertyOwner",
      "right" : "getPrototypePropertyOwner",
      "info" : "SimpleName[9732-9757]:SimpleName[9732-9757]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[9758-9764]:SingleVariableDeclaration[9758-9764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9766-10144]:Block[9766-10144]"
    }, {
      "left" : "if (n.getType() == Token.GETPROP)",
      "right" : "if (n.getType() == Token.GETPROP)",
      "info" : "IfStatement[9772-10123]:IfStatement[9772-10123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9806-10123]:Block[9806-10123]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[9814-9850]:VariableDeclarationStatement[9814-9850]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n          firstChild.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[9857-10117]:IfStatement[9857-10117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9971-10117]:Block[9971-10117]"
    }, {
      "left" : "Node maybeOwner = firstChild.getFirstChild();",
      "right" : "Node maybeOwner = firstChild.getFirstChild();",
      "info" : "VariableDeclarationStatement[9981-10026]:VariableDeclarationStatement[9981-10026]"
    }, {
      "left" : "if (maybeOwner.isQualifiedName())",
      "right" : "if (maybeOwner.isQualifiedName())",
      "info" : "IfStatement[10035-10109]:IfStatement[10035-10109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10069-10109]:Block[10069-10109]"
    }, {
      "left" : "return maybeOwner;",
      "right" : "return maybeOwner;",
      "info" : "ReturnStatement[10081-10099]:ReturnStatement[10081-10099]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10128-10140]:ReturnStatement[10128-10140]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10148-10155]:Modifier[10148-10155]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[10156-10164]:Modifier[10156-10164]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10165-10170]:TYPE_DECLARATION_KIND[10165-10170]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[10171-10191]:SimpleName[10171-10191]"
    }, {
      "left" : "NodeTraversal.Callback",
      "right" : "NodeTraversal.Callback",
      "info" : "SimpleType[10209-10231]:SimpleType[10209-10231]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10418-10425]:Modifier[10418-10425]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleName[10426-10446]:SimpleName[10426-10446]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[10447-10458]:SingleVariableDeclaration[10447-10458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10460-10493]:Block[10460-10493]"
    }, {
      "left" : "this.scope = scope;",
      "right" : "this.scope = scope;",
      "info" : "ExpressionStatement[10468-10487]:ExpressionStatement[10468-10487]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10499-10508]:MarkerAnnotation[10499-10508]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10513-10519]:Modifier[10513-10519]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[10520-10525]:Modifier[10520-10525]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10526-10533]:PrimitiveType[10526-10533]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[10534-10548]:SimpleName[10534-10548]"
    }, {
      "left" : "NodeTraversal nodeTraversal",
      "right" : "NodeTraversal nodeTraversal",
      "info" : "SingleVariableDeclaration[10549-10576]:SingleVariableDeclaration[10549-10576]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[10578-10584]:SingleVariableDeclaration[10578-10584]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[10594-10605]:SingleVariableDeclaration[10594-10605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10607-11035]:Block[10607-11035]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "right" : "if (n.getType() == Token.FUNCTION ||\n          n.getType() == Token.SCRIPT)",
      "info" : "IfStatement[10615-10763]:IfStatement[10615-10763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10691-10763]:Block[10691-10763]"
    }, {
      "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
      "info" : "ExpressionStatement[10701-10755]:ExpressionStatement[10701-10755]"
    }, {
      "left" : "return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "right" : "return parent == null || parent.getType() != Token.FUNCTION ||\n          n == parent.getFirstChild() || parent == scope.getRootNode();",
      "info" : "ReturnStatement[10895-11029]:ReturnStatement[10895-11029]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11041-11050]:MarkerAnnotation[11041-11050]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11055-11061]:Modifier[11055-11061]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[11062-11070]:Modifier[11062-11070]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11071-11075]:PrimitiveType[11071-11075]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[11076-11081]:SimpleName[11076-11081]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11082-11097]:SingleVariableDeclaration[11082-11097]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[11099-11105]:SingleVariableDeclaration[11099-11105]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[11107-11118]:SingleVariableDeclaration[11107-11118]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[11356-11362]:SimpleType[11356-11362]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[11363-11390]:SimpleName[11363-11390]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[11400-11415]:SingleVariableDeclaration[11400-11415]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[11417-11426]:SingleVariableDeclaration[11417-11426]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[11428-11442]:SingleVariableDeclaration[11428-11442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11444-11524]:Block[11444-11524]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);",
      "right" : "return getDeclaredTypeInAnnotation(t.getSourceName(), node, info);",
      "info" : "ReturnStatement[11452-11518]:ReturnStatement[11452-11518]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[11530-11536]:SimpleType[11530-11536]"
    }, {
      "left" : "getDeclaredTypeInAnnotation",
      "right" : "getDeclaredTypeInAnnotation",
      "info" : "SimpleName[11537-11564]:SimpleName[11537-11564]"
    }, {
      "left" : "String sourceName",
      "right" : "String sourceName",
      "info" : "SingleVariableDeclaration[11565-11582]:SingleVariableDeclaration[11565-11582]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[11592-11601]:SingleVariableDeclaration[11592-11601]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[11603-11617]:SingleVariableDeclaration[11603-11617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11619-13191]:Block[11619-13191]"
    }, {
      "left" : "JSType jsType = null;",
      "right" : "JSType jsType = null;",
      "info" : "VariableDeclarationStatement[11627-11648]:VariableDeclarationStatement[11627-11648]"
    }, {
      "left" : "Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;",
      "right" : "Node objNode = node.getType() == Token.GETPROP ?\n          node.getFirstChild() : null;",
      "info" : "VariableDeclarationStatement[11655-11742]:VariableDeclarationStatement[11655-11742]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[11749-13164]:IfStatement[11749-13164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11767-13164]:Block[11767-13164]"
    }, {
      "left" : "if (info.hasType())",
      "right" : "if (info.hasType())",
      "info" : "IfStatement[11777-13156]:IfStatement[11777-13156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11797-11859]:Block[11797-11859]"
    }, {
      "left" : "jsType = info.getType().evaluate(scope);",
      "right" : "jsType = info.getType().evaluate(scope);",
      "info" : "ExpressionStatement[11809-11849]:ExpressionStatement[11809-11849]"
    }, {
      "left" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[11865-13156]:IfStatement[11865-13156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11922-13156]:Block[11922-13156]"
    }, {
      "left" : "String fnName = node.getQualifiedName();",
      "right" : "String fnName = node.getQualifiedName();",
      "info" : "VariableDeclarationStatement[11934-11974]:VariableDeclarationStatement[11934-11974]"
    }, {
      "left" : "if (info.isConstructor() && typeRegistry.getType(fnName) != null)",
      "right" : "if (info.isConstructor() && typeRegistry.getType(fnName) != null)",
      "info" : "IfStatement[12042-12146]:IfStatement[12042-12146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12108-12146]:Block[12108-12146]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[12122-12134]:ReturnStatement[12122-12134]"
    }, {
      "left" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);",
      "right" : "FunctionTypeBuilder builder =\n              new FunctionTypeBuilder(\n                  fnName, compiler, node, sourceName, scope)\n              .inferTemplateTypeName(info)\n              .inferReturnType(info)\n              .inferParameterTypes(info)\n              .inferInheritance(info);",
      "info" : "VariableDeclarationStatement[12158-12447]:VariableDeclarationStatement[12158-12447]"
    }, {
      "left" : "boolean searchedForThisType = false;",
      "right" : "boolean searchedForThisType = false;",
      "info" : "VariableDeclarationStatement[12496-12532]:VariableDeclarationStatement[12496-12532]"
    }, {
      "left" : "if (objNode != null)",
      "right" : "if (objNode != null)",
      "info" : "IfStatement[12543-12993]:IfStatement[12543-12993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12564-12993]:Block[12564-12993]"
    }, {
      "left" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (objNode.getType() == Token.GETPROP &&\n                objNode.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[12578-12981]:IfStatement[12578-12981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12692-12817]:Block[12692-12817]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getFirstChild());",
      "right" : "builder.inferThisType(info, objNode.getFirstChild());",
      "info" : "ExpressionStatement[12708-12761]:ExpressionStatement[12708-12761]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[12776-12803]:ExpressionStatement[12776-12803]"
    }, {
      "left" : "if (objNode.getType() == Token.THIS)",
      "right" : "if (objNode.getType() == Token.THIS)",
      "info" : "IfStatement[12823-12981]:IfStatement[12823-12981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12860-12981]:Block[12860-12981]"
    }, {
      "left" : "builder.inferThisType(info, objNode.getJSType());",
      "right" : "builder.inferThisType(info, objNode.getJSType());",
      "info" : "ExpressionStatement[12876-12925]:ExpressionStatement[12876-12925]"
    }, {
      "left" : "searchedForThisType = true;",
      "right" : "searchedForThisType = true;",
      "info" : "ExpressionStatement[12940-12967]:ExpressionStatement[12940-12967]"
    }, {
      "left" : "if (!searchedForThisType)",
      "right" : "if (!searchedForThisType)",
      "info" : "IfStatement[13005-13098]:IfStatement[13005-13098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13031-13098]:Block[13031-13098]"
    }, {
      "left" : "builder.inferThisType(info, (Node) null);",
      "right" : "builder.inferThisType(info, (Node) null);",
      "info" : "ExpressionStatement[13045-13086]:ExpressionStatement[13045-13086]"
    }, {
      "left" : "jsType = builder.buildAndRegister();",
      "right" : "jsType = builder.buildAndRegister();",
      "info" : "ExpressionStatement[13110-13146]:ExpressionStatement[13110-13146]"
    }, {
      "left" : "return jsType;",
      "right" : "return jsType;",
      "info" : "ReturnStatement[13171-13185]:ReturnStatement[13171-13185]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13687-13691]:PrimitiveType[13687-13691]"
    }, {
      "left" : "define",
      "right" : "define",
      "info" : "SimpleName[13692-13698]:SimpleName[13692-13698]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[13699-13705]:SingleVariableDeclaration[13699-13705]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[13707-13718]:SingleVariableDeclaration[13707-13718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13720-16249]:Block[13720-16249]"
    }, {
      "left" : "Preconditions.checkState(sourceName != null);",
      "right" : "Preconditions.checkState(sourceName != null);",
      "info" : "ExpressionStatement[13728-13773]:ExpressionStatement[13728-13773]"
    }, {
      "left" : "JSDocInfo info = n.getJSDocInfo();",
      "right" : "JSDocInfo info = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[13781-13815]:VariableDeclarationStatement[13781-13815]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CATCH:\n          Node catchName = n.getFirstChild();\n          defineSlot(catchName, n, null);\n          break;\n\n        case Token.VAR:\n          if (n.getChildCount() > 1) {\n            if (info != null) {\n              // multiple children\n              compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));\n            }\n            for (Node name : n.children()) {\n              defineName(name, n, parent, name.getJSDocInfo());\n            }\n          } else {\n            Node name = n.getFirstChild();\n            defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());\n          }\n          break;\n\n        case Token.FUNCTION:\n          int parentType = parent.getType();\n          Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");\n          String functionName = n.getFirstChild().getString();\n          FunctionType functionType = getFunctionType(functionName, n, info,\n              null);\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineSlot(n.getFirstChild(), n, functionType);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // TODO(nicksantos): We should support direct assignment to a\n          // prototype, as in:\n          // Foo.prototype = {\n          //   a: function() { ... },\n          //   b: function() { ... }\n          // };\n          // Right now (6/23/08), we understand most of this syntax, but we\n          // don't tie the \"a\" and \"b\" methods to the context of Foo.\n\n          Node rvalue = n.getLastChild();\n          Node lvalue = n.getFirstChild();\n          info = (info != null) ? info : rvalue.getJSDocInfo();\n          if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor()) {\n            getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);\n          } else if (info != null && info.hasEnumParameterType()) {\n            lvalue.setJSType(\n                getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                    info.getEnumParameterType().evaluate(scope)));\n          }\n          break;\n\n        default:\n          throw new IllegalStateException(Integer.toString(n.getType()));\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CATCH:\n          Node catchName = n.getFirstChild();\n          defineSlot(catchName, n, null);\n          break;\n\n        case Token.VAR:\n          if (n.getChildCount() > 1) {\n            if (info != null) {\n              // multiple children\n              compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));\n            }\n            for (Node name : n.children()) {\n              defineName(name, n, parent, name.getJSDocInfo());\n            }\n          } else {\n            Node name = n.getFirstChild();\n            defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());\n          }\n          break;\n\n        case Token.FUNCTION:\n          int parentType = parent.getType();\n          Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");\n          String functionName = n.getFirstChild().getString();\n          FunctionType functionType = getFunctionType(functionName, n, info,\n              null);\n          if (NodeUtil.isFunctionDeclaration(n)) {\n            defineSlot(n.getFirstChild(), n, functionType);\n          }\n          break;\n\n        case Token.ASSIGN:\n          // TODO(nicksantos): We should support direct assignment to a\n          // prototype, as in:\n          // Foo.prototype = {\n          //   a: function() { ... },\n          //   b: function() { ... }\n          // };\n          // Right now (6/23/08), we understand most of this syntax, but we\n          // don't tie the \"a\" and \"b\" methods to the context of Foo.\n\n          Node rvalue = n.getLastChild();\n          Node lvalue = n.getFirstChild();\n          info = (info != null) ? info : rvalue.getJSDocInfo();\n          if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor()) {\n            getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);\n          } else if (info != null && info.hasEnumParameterType()) {\n            lvalue.setJSType(\n                getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                    info.getEnumParameterType().evaluate(scope)));\n          }\n          break;\n\n        default:\n          throw new IllegalStateException(Integer.toString(n.getType()));\n      }",
      "info" : "SwitchStatement[13822-16243]:SwitchStatement[13822-16243]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[13853-13870]:SwitchCase[13853-13870]"
    }, {
      "left" : "Node catchName = n.getFirstChild();",
      "right" : "Node catchName = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[13881-13916]:VariableDeclarationStatement[13881-13916]"
    }, {
      "left" : "defineSlot(catchName, n, null);",
      "right" : "defineSlot(catchName, n, null);",
      "info" : "ExpressionStatement[13927-13958]:ExpressionStatement[13927-13958]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13969-13975]:BreakStatement[13969-13975]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[13985-14000]:SwitchCase[13985-14000]"
    }, {
      "left" : "if (n.getChildCount() > 1)",
      "right" : "if (n.getChildCount() > 1)",
      "info" : "IfStatement[14011-14497]:IfStatement[14011-14497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14038-14333]:Block[14038-14333]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[14052-14198]:IfStatement[14052-14198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14070-14198]:Block[14070-14198]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "right" : "compiler.report(JSError.make(sourceName, n, MULTIPLE_VAR_DEF));",
      "info" : "ExpressionStatement[14121-14184]:ExpressionStatement[14121-14184]"
    }, {
      "left" : "for (Node name : n.children())",
      "right" : "for (Node name : n.children())",
      "info" : "EnhancedForStatement[14211-14321]:EnhancedForStatement[14211-14321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14242-14321]:Block[14242-14321]"
    }, {
      "left" : "defineName(name, n, parent, name.getJSDocInfo());",
      "right" : "defineName(name, n, parent, name.getJSDocInfo());",
      "info" : "ExpressionStatement[14258-14307]:ExpressionStatement[14258-14307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14339-14497]:Block[14339-14497]"
    }, {
      "left" : "Node name = n.getFirstChild();",
      "right" : "Node name = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[14353-14383]:VariableDeclarationStatement[14353-14383]"
    }, {
      "left" : "defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());",
      "right" : "defineName(name, n, parent,\n                (info != null) ? info : name.getJSDocInfo());",
      "info" : "ExpressionStatement[14396-14485]:ExpressionStatement[14396-14485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14508-14514]:BreakStatement[14508-14514]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[14524-14544]:SwitchCase[14524-14544]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[14555-14589]:VariableDeclarationStatement[14555-14589]"
    }, {
      "left" : "Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");",
      "right" : "Preconditions.checkState(\n              (scope.isLocal() || parentType != Token.ASSIGN) &&\n              parentType != Token.NAME,\n              \"function defined as standalone function when it is being \" +\n              \"assigned\");",
      "info" : "ExpressionStatement[14600-14833]:ExpressionStatement[14600-14833]"
    }, {
      "left" : "String functionName = n.getFirstChild().getString();",
      "right" : "String functionName = n.getFirstChild().getString();",
      "info" : "VariableDeclarationStatement[14844-14896]:VariableDeclarationStatement[14844-14896]"
    }, {
      "left" : "FunctionType functionType = getFunctionType(functionName, n, info,\n              null);",
      "right" : "FunctionType functionType = getFunctionType(functionName, n, info,\n              null);",
      "info" : "VariableDeclarationStatement[14907-14994]:VariableDeclarationStatement[14907-14994]"
    }, {
      "left" : "if (NodeUtil.isFunctionDeclaration(n))",
      "right" : "if (NodeUtil.isFunctionDeclaration(n))",
      "info" : "IfStatement[15005-15117]:IfStatement[15005-15117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15044-15117]:Block[15044-15117]"
    }, {
      "left" : "defineSlot(n.getFirstChild(), n, functionType);",
      "right" : "defineSlot(n.getFirstChild(), n, functionType);",
      "info" : "ExpressionStatement[15058-15105]:ExpressionStatement[15058-15105]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15128-15134]:BreakStatement[15128-15134]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[15144-15162]:SwitchCase[15144-15162]"
    }, {
      "left" : "Node rvalue = n.getLastChild();",
      "right" : "Node rvalue = n.getLastChild();",
      "info" : "VariableDeclarationStatement[15545-15576]:VariableDeclarationStatement[15545-15576]"
    }, {
      "left" : "Node lvalue = n.getFirstChild();",
      "right" : "Node lvalue = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[15587-15619]:VariableDeclarationStatement[15587-15619]"
    }, {
      "left" : "info = (info != null) ? info : rvalue.getJSDocInfo();",
      "right" : "info = (info != null) ? info : rvalue.getJSDocInfo();",
      "info" : "ExpressionStatement[15630-15683]:ExpressionStatement[15630-15683]"
    }, {
      "left" : "if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor())",
      "right" : "if (rvalue.getType() == Token.FUNCTION ||\n              info != null && info.isConstructor())",
      "info" : "IfStatement[15694-16126]:IfStatement[15694-16126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15788-15895]:Block[15788-15895]"
    }, {
      "left" : "getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);",
      "right" : "getFunctionType(lvalue.getQualifiedName(), rvalue, info,\n                lvalue);",
      "info" : "ExpressionStatement[15802-15883]:ExpressionStatement[15802-15883]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[15901-16126]:IfStatement[15901-16126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15950-16126]:Block[15950-16126]"
    }, {
      "left" : "lvalue.setJSType(\n                getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                    info.getEnumParameterType().evaluate(scope)));",
      "right" : "lvalue.setJSType(\n                getEnumType(lvalue.getQualifiedName(), n, rvalue,\n                    info.getEnumParameterType().evaluate(scope)));",
      "info" : "ExpressionStatement[15964-16114]:ExpressionStatement[15964-16114]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16137-16143]:BreakStatement[16137-16143]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16153-16161]:SwitchCase[16153-16161]"
    }, {
      "left" : "throw new IllegalStateException(Integer.toString(n.getType()));",
      "right" : "throw new IllegalStateException(Integer.toString(n.getType()));",
      "info" : "ThrowStatement[16172-16235]:ThrowStatement[16172-16235]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16639-16646]:Modifier[16639-16646]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16647-16651]:PrimitiveType[16647-16651]"
    }, {
      "left" : "defineName",
      "right" : "defineName",
      "info" : "SimpleName[16652-16662]:SimpleName[16652-16662]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[16663-16672]:SingleVariableDeclaration[16663-16672]"
    }, {
      "left" : "Node var",
      "right" : "Node var",
      "info" : "SingleVariableDeclaration[16674-16682]:SingleVariableDeclaration[16674-16682]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[16684-16695]:SingleVariableDeclaration[16684-16695]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[16697-16711]:SingleVariableDeclaration[16697-16711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16713-17830]:Block[16713-17830]"
    }, {
      "left" : "Node value = name.getFirstChild();",
      "right" : "Node value = name.getFirstChild();",
      "info" : "VariableDeclarationStatement[16721-16755]:VariableDeclarationStatement[16721-16755]"
    }, {
      "left" : "if (value != null && value.getType() == Token.FUNCTION)",
      "right" : "if (value != null && value.getType() == Token.FUNCTION)",
      "info" : "IfStatement[16763-17824]:IfStatement[16763-17824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16819-17039]:Block[16819-17039]"
    }, {
      "left" : "String functionName = name.getString();",
      "right" : "String functionName = name.getString();",
      "info" : "VariableDeclarationStatement[16849-16888]:VariableDeclarationStatement[16849-16888]"
    }, {
      "left" : "FunctionType functionType =\n            getFunctionType(functionName, value, info, null);",
      "right" : "FunctionType functionType =\n            getFunctionType(functionName, value, info, null);",
      "info" : "VariableDeclarationStatement[16897-16986]:VariableDeclarationStatement[16897-16986]"
    }, {
      "left" : "defineSlot(name, var, functionType);",
      "right" : "defineSlot(name, var, functionType);",
      "info" : "ExpressionStatement[16995-17031]:ExpressionStatement[16995-17031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17045-17824]:Block[17045-17824]"
    }, {
      "left" : "JSType type = null;",
      "right" : "JSType type = null;",
      "info" : "VariableDeclarationStatement[17082-17101]:VariableDeclarationStatement[17082-17101]"
    }, {
      "left" : "if (info == null)",
      "right" : "if (info == null)",
      "info" : "IfStatement[17110-17778]:IfStatement[17110-17778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17128-17408]:Block[17128-17408]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[17190-17242]:VariableDeclarationStatement[17190-17242]"
    }, {
      "left" : "Preconditions.checkNotNull(input, sourceName);",
      "right" : "Preconditions.checkNotNull(input, sourceName);",
      "info" : "ExpressionStatement[17253-17299]:ExpressionStatement[17253-17299]"
    }, {
      "left" : "type = input.isExtern() ?\n              typeRegistry.getNativeType(UNKNOWN_TYPE) : null;",
      "right" : "type = input.isExtern() ?\n              typeRegistry.getNativeType(UNKNOWN_TYPE) : null;",
      "info" : "ExpressionStatement[17310-17398]:ExpressionStatement[17310-17398]"
    }, {
      "left" : "if (info.hasEnumParameterType())",
      "right" : "if (info.hasEnumParameterType())",
      "info" : "IfStatement[17414-17778]:IfStatement[17414-17778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17447-17577]:Block[17447-17577]"
    }, {
      "left" : "type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope));",
      "right" : "type = getEnumType(name.getString(), var, value,\n              info.getEnumParameterType().evaluate(scope));",
      "info" : "ExpressionStatement[17459-17567]:ExpressionStatement[17459-17567]"
    }, {
      "left" : "if (info.isConstructor())",
      "right" : "if (info.isConstructor())",
      "info" : "IfStatement[17583-17778]:IfStatement[17583-17778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17609-17691]:Block[17609-17691]"
    }, {
      "left" : "type = getFunctionType(name.getString(), value, info, name);",
      "right" : "type = getFunctionType(name.getString(), value, info, name);",
      "info" : "ExpressionStatement[17621-17681]:ExpressionStatement[17621-17681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17697-17778]:Block[17697-17778]"
    }, {
      "left" : "type = getDeclaredTypeInAnnotation(sourceName, name, info);",
      "right" : "type = getDeclaredTypeInAnnotation(sourceName, name, info);",
      "info" : "ExpressionStatement[17709-17768]:ExpressionStatement[17709-17768]"
    }, {
      "left" : "defineSlot(name, var, type);",
      "right" : "defineSlot(name, var, type);",
      "info" : "ExpressionStatement[17788-17816]:ExpressionStatement[17788-17816]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18441-18448]:Modifier[18441-18448]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[18449-18461]:SimpleType[18449-18461]"
    }, {
      "left" : "getFunctionType",
      "right" : "getFunctionType",
      "info" : "SimpleName[18462-18477]:SimpleName[18462-18477]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[18478-18489]:SingleVariableDeclaration[18478-18489]"
    }, {
      "left" : "Node rValue",
      "right" : "Node rValue",
      "info" : "SingleVariableDeclaration[18499-18510]:SingleVariableDeclaration[18499-18510]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[18512-18526]:SingleVariableDeclaration[18512-18526]"
    }, {
      "left" : "@Nullable Node lvalueNode",
      "right" : "@Nullable Node lvalueNode",
      "info" : "SingleVariableDeclaration[18528-18553]:SingleVariableDeclaration[18528-18553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18555-22055]:Block[18555-22055]"
    }, {
      "left" : "FunctionType functionType = null;",
      "right" : "FunctionType functionType = null;",
      "info" : "VariableDeclarationStatement[18563-18596]:VariableDeclarationStatement[18563-18596]"
    }, {
      "left" : "if (rValue != null && rValue.isQualifiedName())",
      "right" : "if (rValue != null && rValue.isQualifiedName())",
      "info" : "IfStatement[18638-19074]:IfStatement[18638-19074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18686-19074]:Block[18686-19074]"
    }, {
      "left" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "right" : "Var var = scope.getVar(rValue.getQualifiedName());",
      "info" : "VariableDeclarationStatement[18696-18746]:VariableDeclarationStatement[18696-18746]"
    }, {
      "left" : "if (var != null && var.getType() instanceof FunctionType)",
      "right" : "if (var != null && var.getType() instanceof FunctionType)",
      "info" : "IfStatement[18755-19037]:IfStatement[18755-19037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18813-19037]:Block[18813-19037]"
    }, {
      "left" : "functionType = (FunctionType) var.getType();",
      "right" : "functionType = (FunctionType) var.getType();",
      "info" : "ExpressionStatement[18825-18869]:ExpressionStatement[18825-18869]"
    }, {
      "left" : "if (functionType != null && functionType.isConstructor())",
      "right" : "if (functionType != null && functionType.isConstructor())",
      "info" : "IfStatement[18880-19027]:IfStatement[18880-19027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18938-19027]:Block[18938-19027]"
    }, {
      "left" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "right" : "typeRegistry.declareType(name, functionType.getInstanceType());",
      "info" : "ExpressionStatement[18952-19015]:ExpressionStatement[18952-19015]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[19046-19066]:ReturnStatement[19046-19066]"
    }, {
      "left" : "Node owner = null;",
      "right" : "Node owner = null;",
      "info" : "VariableDeclarationStatement[19082-19100]:VariableDeclarationStatement[19082-19100]"
    }, {
      "left" : "if (lvalueNode != null)",
      "right" : "if (lvalueNode != null)",
      "info" : "IfStatement[19107-19195]:IfStatement[19107-19195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19131-19195]:Block[19131-19195]"
    }, {
      "left" : "owner = getPrototypePropertyOwner(lvalueNode);",
      "right" : "owner = getPrototypePropertyOwner(lvalueNode);",
      "info" : "ExpressionStatement[19141-19187]:ExpressionStatement[19141-19187]"
    }, {
      "left" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "right" : "Node errorRoot = rValue == null ? lvalueNode : rValue;",
      "info" : "VariableDeclarationStatement[19203-19257]:VariableDeclarationStatement[19203-19257]"
    }, {
      "left" : "boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;",
      "right" : "boolean isFnLiteral =\n          rValue != null && rValue.getType() == Token.FUNCTION;",
      "info" : "VariableDeclarationStatement[19264-19349]:VariableDeclarationStatement[19264-19349]"
    }, {
      "left" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "right" : "Node fnRoot = isFnLiteral ? rValue : null;",
      "info" : "VariableDeclarationStatement[19356-19398]:VariableDeclarationStatement[19356-19398]"
    }, {
      "left" : "Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;",
      "right" : "Node parametersNode = isFnLiteral ?\n          rValue.getFirstChild().getNext() : null;",
      "info" : "VariableDeclarationStatement[19405-19491]:VariableDeclarationStatement[19405-19491]"
    }, {
      "left" : "if (functionType == null && info != null && info.hasType())",
      "right" : "if (functionType == null && info != null && info.hasType())",
      "info" : "IfStatement[19499-19883]:IfStatement[19499-19883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19559-19883]:Block[19559-19883]"
    }, {
      "left" : "JSType type = info.getType().evaluate(scope);",
      "right" : "JSType type = info.getType().evaluate(scope);",
      "info" : "VariableDeclarationStatement[19569-19614]:VariableDeclarationStatement[19569-19614]"
    }, {
      "left" : "type = type.restrictByNotNullOrUndefined();",
      "right" : "type = type.restrictByNotNullOrUndefined();",
      "info" : "ExpressionStatement[19696-19739]:ExpressionStatement[19696-19739]"
    }, {
      "left" : "if (type.isFunctionType())",
      "right" : "if (type.isFunctionType())",
      "info" : "IfStatement[19748-19875]:IfStatement[19748-19875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19775-19875]:Block[19775-19875]"
    }, {
      "left" : "functionType = (FunctionType) type;",
      "right" : "functionType = (FunctionType) type;",
      "info" : "ExpressionStatement[19787-19822]:ExpressionStatement[19787-19822]"
    }, {
      "left" : "functionType.setJSDocInfo(info);",
      "right" : "functionType.setJSDocInfo(info);",
      "info" : "ExpressionStatement[19833-19865]:ExpressionStatement[19833-19865]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[19891-21396]:IfStatement[19891-21396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19917-21396]:Block[19917-21396]"
    }, {
      "left" : "if (info == null ||\n            !FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "right" : "if (info == null ||\n            !FunctionTypeBuilder.isFunctionTypeDeclaration(info))",
      "info" : "IfStatement[19927-21388]:IfStatement[19927-21388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20013-21388]:Block[20013-21388]"
    }, {
      "left" : "if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n              lvalueNode.isQualifiedName())",
      "right" : "if (lvalueNode != null && lvalueNode.getType() == Token.GETPROP &&\n              lvalueNode.isQualifiedName())",
      "info" : "IfStatement[20411-21378]:IfStatement[20411-21378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20522-21378]:Block[20522-21378]"
    }, {
      "left" : "Var var = scope.getVar(\n                lvalueNode.getFirstChild().getQualifiedName());",
      "right" : "Var var = scope.getVar(\n                lvalueNode.getFirstChild().getQualifiedName());",
      "info" : "VariableDeclarationStatement[20536-20623]:VariableDeclarationStatement[20536-20623]"
    }, {
      "left" : "if (var != null)",
      "right" : "if (var != null)",
      "info" : "IfStatement[20636-21366]:IfStatement[20636-21366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20653-21366]:Block[20653-21366]"
    }, {
      "left" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "right" : "ObjectType ownerType = ObjectType.cast(var.getType());",
      "info" : "VariableDeclarationStatement[20669-20723]:VariableDeclarationStatement[20669-20723]"
    }, {
      "left" : "FunctionType propType = null;",
      "right" : "FunctionType propType = null;",
      "info" : "VariableDeclarationStatement[20738-20767]:VariableDeclarationStatement[20738-20767]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[20782-20944]:IfStatement[20782-20944]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20805-20944]:Block[20805-20944]"
    }, {
      "left" : "propType = findOverriddenFunction(\n                    ownerType, lvalueNode.getLastChild().getString());",
      "right" : "propType = findOverriddenFunction(\n                    ownerType, lvalueNode.getLastChild().getString());",
      "info" : "ExpressionStatement[20823-20928]:ExpressionStatement[20823-20928]"
    }, {
      "left" : "if (propType != null)",
      "right" : "if (propType != null)",
      "info" : "IfStatement[20960-21352]:IfStatement[20960-21352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20982-21352]:Block[20982-21352]"
    }, {
      "left" : "functionType =\n                    new FunctionTypeBuilder(\n                        name, compiler, errorRoot, sourceName, scope)\n                    .setSourceNode(fnRoot)\n                    .inferFromOverriddenFunction(propType, parametersNode)\n                    .inferThisType(info, owner)\n                    .buildAndRegister();",
      "right" : "functionType =\n                    new FunctionTypeBuilder(\n                        name, compiler, errorRoot, sourceName, scope)\n                    .setSourceNode(fnRoot)\n                    .inferFromOverriddenFunction(propType, parametersNode)\n                    .inferThisType(info, owner)\n                    .buildAndRegister();",
      "info" : "ExpressionStatement[21000-21336]:ExpressionStatement[21000-21336]"
    }, {
      "left" : "if (functionType == null)",
      "right" : "if (functionType == null)",
      "info" : "IfStatement[21437-21868]:IfStatement[21437-21868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21463-21868]:Block[21463-21868]"
    }, {
      "left" : "functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .buildAndRegister();",
      "right" : "functionType =\n            new FunctionTypeBuilder(name, compiler, errorRoot, sourceName,\n                scope)\n            .setSourceNode(fnRoot)\n            .inferTemplateTypeName(info)\n            .inferReturnType(info)\n            .inferInheritance(info)\n            .inferThisType(info, owner)\n            .inferParameterTypes(parametersNode, info)\n            .buildAndRegister();",
      "info" : "ExpressionStatement[21473-21860]:ExpressionStatement[21473-21860]"
    }, {
      "left" : "if (rValue != null)",
      "right" : "if (rValue != null)",
      "info" : "IfStatement[21934-22003]:IfStatement[21934-22003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21954-22003]:Block[21954-22003]"
    }, {
      "left" : "rValue.setJSType(functionType);",
      "right" : "rValue.setJSType(functionType);",
      "info" : "ExpressionStatement[21964-21995]:ExpressionStatement[21964-21995]"
    }, {
      "left" : "return functionType;",
      "right" : "return functionType;",
      "info" : "ReturnStatement[22029-22049]:ReturnStatement[22029-22049]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22148-22155]:Modifier[22148-22155]"
    }, {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "SimpleType[22156-22168]:SimpleType[22156-22168]"
    }, {
      "left" : "findOverriddenFunction",
      "right" : "findOverriddenFunction",
      "info" : "SimpleName[22169-22191]:SimpleName[22169-22191]"
    }, {
      "left" : "ObjectType ownerType",
      "right" : "ObjectType ownerType",
      "info" : "SingleVariableDeclaration[22201-22221]:SingleVariableDeclaration[22201-22221]"
    }, {
      "left" : "String propName",
      "right" : "String propName",
      "info" : "SingleVariableDeclaration[22223-22238]:SingleVariableDeclaration[22223-22238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22240-22610]:Block[22240-22888]"
    }, {
      "left" : "JSType propType = ownerType.getPropertyType(propName);",
      "right" : "JSType propType = ownerType.getPropertyType(propName);",
      "info" : "VariableDeclarationStatement[22334-22388]:VariableDeclarationStatement[22334-22388]"
    }, {
      "left" : "if (propType instanceof FunctionType)",
      "right" : "if (propType instanceof FunctionType)",
      "info" : "IfStatement[22395-22482]:IfStatement[22395-22862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22433-22482]:Block[22433-22482]"
    }, {
      "left" : "return (FunctionType) propType;",
      "right" : "return (FunctionType) propType;",
      "info" : "ReturnStatement[22443-22474]:ReturnStatement[22443-22474]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22592-22604]:ReturnStatement[22870-22882]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23262-23269]:Modifier[23540-23547]"
    }, {
      "left" : "EnumType",
      "right" : "EnumType",
      "info" : "SimpleType[23270-23278]:SimpleType[23548-23556]"
    }, {
      "left" : "getEnumType",
      "right" : "getEnumType",
      "info" : "SimpleName[23279-23290]:SimpleName[23557-23568]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[23291-23302]:SingleVariableDeclaration[23569-23580]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[23304-23315]:SingleVariableDeclaration[23582-23593]"
    }, {
      "left" : "Node value",
      "right" : "Node value",
      "info" : "SingleVariableDeclaration[23325-23335]:SingleVariableDeclaration[23603-23613]"
    }, {
      "left" : "JSType elementsType",
      "right" : "JSType elementsType",
      "info" : "SingleVariableDeclaration[23337-23356]:SingleVariableDeclaration[23615-23634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23358-24831]:Block[23636-25109]"
    }, {
      "left" : "EnumType enumType = null;",
      "right" : "EnumType enumType = null;",
      "info" : "VariableDeclarationStatement[23366-23391]:VariableDeclarationStatement[23644-23669]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[23428-24521]:IfStatement[23706-24799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23447-24521]:Block[23725-24799]"
    }, {
      "left" : "if (value.getType() == Token.OBJECTLIT)",
      "right" : "if (value.getType() == Token.OBJECTLIT)",
      "info" : "IfStatement[23457-24513]:IfStatement[23735-24791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23497-24280]:Block[23775-24558]"
    }, {
      "left" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "right" : "enumType = typeRegistry.createEnumType(name, elementsType);",
      "info" : "ExpressionStatement[23544-23603]:ExpressionStatement[23822-23881]"
    }, {
      "left" : "Node key = value.getFirstChild();",
      "right" : "Node key = value.getFirstChild();",
      "info" : "VariableDeclarationStatement[23652-23685]:VariableDeclarationStatement[23930-23963]"
    }, {
      "left" : "while (key != null)",
      "right" : "while (key != null)",
      "info" : "WhileStatement[23696-24270]:WhileStatement[23974-24548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23716-24270]:Block[23994-24548]"
    }, {
      "left" : "String keyName = NodeUtil.getStringValue(key);",
      "right" : "String keyName = NodeUtil.getStringValue(key);",
      "info" : "VariableDeclarationStatement[23730-23776]:VariableDeclarationStatement[24008-24054]"
    }, {
      "left" : "if (enumType.hasOwnProperty(keyName))",
      "right" : "if (enumType.hasOwnProperty(keyName))",
      "info" : "IfStatement[23790-24169]:IfStatement[24068-24447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23828-23924]:Block[24106-24202]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "right" : "compiler.report(JSError.make(sourceName, key, ENUM_DUP, keyName));",
      "info" : "ExpressionStatement[23844-23910]:ExpressionStatement[24122-24188]"
    }, {
      "left" : "if (!codingConvention.isValidEnumKey(keyName))",
      "right" : "if (!codingConvention.isValidEnumKey(keyName))",
      "info" : "IfStatement[23930-24169]:IfStatement[24208-24447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23977-24101]:Block[24255-24379]"
    }, {
      "left" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "right" : "compiler.report(\n                  JSError.make(sourceName, key, ENUM_NOT_CONSTANT, keyName));",
      "info" : "ExpressionStatement[23993-24087]:ExpressionStatement[24271-24365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24107-24169]:Block[24385-24447]"
    }, {
      "left" : "enumType.defineElement(keyName);",
      "right" : "enumType.defineElement(keyName);",
      "info" : "ExpressionStatement[24123-24155]:ExpressionStatement[24401-24433]"
    }, {
      "left" : "key = key.getNext();",
      "right" : "key = key.getNext();",
      "info" : "ExpressionStatement[24182-24202]:ExpressionStatement[24460-24480]"
    }, {
      "left" : "key = (key == null) ? null : key.getNext();",
      "right" : "key = (key == null) ? null : key.getNext();",
      "info" : "ExpressionStatement[24215-24258]:ExpressionStatement[24493-24536]"
    }, {
      "left" : "if (value.isQualifiedName())",
      "right" : "if (value.isQualifiedName())",
      "info" : "IfStatement[24286-24513]:IfStatement[24564-24791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24315-24513]:Block[24593-24791]"
    }, {
      "left" : "Var var = scope.getVar(value.getQualifiedName());",
      "right" : "Var var = scope.getVar(value.getQualifiedName());",
      "info" : "VariableDeclarationStatement[24327-24376]:VariableDeclarationStatement[24605-24654]"
    }, {
      "left" : "if (var != null && var.getType() instanceof EnumType)",
      "right" : "if (var != null && var.getType() instanceof EnumType)",
      "info" : "IfStatement[24387-24503]:IfStatement[24665-24781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24441-24503]:Block[24719-24781]"
    }, {
      "left" : "enumType = (EnumType) var.getType();",
      "right" : "enumType = (EnumType) var.getType();",
      "info" : "ExpressionStatement[24455-24491]:ExpressionStatement[24733-24769]"
    }, {
      "left" : "if (enumType == null)",
      "right" : "if (enumType == null)",
      "info" : "IfStatement[24529-24801]:IfStatement[24807-25079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24551-24637]:Block[24829-24915]"
    }, {
      "left" : "compiler.report(JSError.make(sourceName, parent, ENUM_INITIALIZER));",
      "right" : "compiler.report(JSError.make(sourceName, parent, ENUM_INITIALIZER));",
      "info" : "ExpressionStatement[24561-24629]:ExpressionStatement[24839-24907]"
    }, {
      "left" : "if (scope.isGlobal())",
      "right" : "if (scope.isGlobal())",
      "info" : "IfStatement[24643-24801]:IfStatement[24921-25079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24665-24801]:Block[24943-25079]"
    }, {
      "left" : "if (name != null && !name.isEmpty())",
      "right" : "if (name != null && !name.isEmpty())",
      "info" : "IfStatement[24675-24793]:IfStatement[24953-25071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24712-24793]:Block[24990-25071]"
    }, {
      "left" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "right" : "typeRegistry.declareType(name, enumType.getElementsType());",
      "info" : "ExpressionStatement[24724-24783]:ExpressionStatement[25002-25061]"
    }, {
      "left" : "return enumType;",
      "right" : "return enumType;",
      "info" : "ReturnStatement[24809-24825]:ReturnStatement[25087-25103]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25241-25248]:Modifier[25519-25526]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25249-25253]:PrimitiveType[25527-25531]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[25254-25264]:SimpleName[25532-25542]"
    }, {
      "left" : "Node name",
      "right" : "Node name",
      "info" : "SingleVariableDeclaration[25265-25274]:SingleVariableDeclaration[25543-25552]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[25276-25287]:SingleVariableDeclaration[25554-25565]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[25289-25300]:SingleVariableDeclaration[25567-25578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25302-25361]:Block[25580-25639]"
    }, {
      "left" : "defineSlot(name, parent, type, type == null);",
      "right" : "defineSlot(name, parent, type, type == null);",
      "info" : "ExpressionStatement[25310-25355]:ExpressionStatement[25588-25633]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25850-25854]:PrimitiveType[26128-26132]"
    }, {
      "left" : "defineSlot",
      "right" : "defineSlot",
      "info" : "SimpleName[25855-25865]:SimpleName[26133-26143]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25866-25872]:SingleVariableDeclaration[26144-26150]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[25874-25885]:SingleVariableDeclaration[26152-26163]"
    }, {
      "left" : "JSType type",
      "right" : "JSType type",
      "info" : "SingleVariableDeclaration[25887-25898]:SingleVariableDeclaration[26165-26176]"
    }, {
      "left" : "boolean inferred",
      "right" : "boolean inferred",
      "info" : "SingleVariableDeclaration[25900-25916]:SingleVariableDeclaration[26178-26194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25918-28575]:Block[26196-28853]"
    }, {
      "left" : "Preconditions.checkArgument(inferred || type != null);",
      "right" : "Preconditions.checkArgument(inferred || type != null);",
      "info" : "ExpressionStatement[25926-25980]:ExpressionStatement[26204-26258]"
    }, {
      "left" : "boolean shouldDeclareOnGlobalThis = false;",
      "right" : "boolean shouldDeclareOnGlobalThis = false;",
      "info" : "VariableDeclarationStatement[26050-26092]:VariableDeclarationStatement[26328-26370]"
    }, {
      "left" : "if (n.getType() == Token.NAME)",
      "right" : "if (n.getType() == Token.NAME)",
      "info" : "IfStatement[26099-26712]:IfStatement[26377-26990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26130-26513]:Block[26408-26791]"
    }, {
      "left" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "right" : "Preconditions.checkArgument(\n            parent.getType() == Token.FUNCTION ||\n            parent.getType() == Token.VAR ||\n            parent.getType() == Token.LP ||\n            parent.getType() == Token.CATCH);",
      "info" : "ExpressionStatement[26140-26353]:ExpressionStatement[26418-26631]"
    }, {
      "left" : "shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);",
      "right" : "shouldDeclareOnGlobalThis = scope.isGlobal() &&\n            (parent.getType() == Token.VAR ||\n             parent.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[26362-26505]:ExpressionStatement[26640-26783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26519-26712]:Block[26797-26990]"
    }, {
      "left" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "right" : "Preconditions.checkArgument(\n            n.getType() == Token.GETPROP &&\n            (parent.getType() == Token.ASSIGN ||\n             parent.getType() == Token.EXPR_RESULT));",
      "info" : "ExpressionStatement[26529-26704]:ExpressionStatement[26807-26982]"
    }, {
      "left" : "String variableName = n.getQualifiedName();",
      "right" : "String variableName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[26719-26762]:VariableDeclarationStatement[26997-27040]"
    }, {
      "left" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "right" : "Preconditions.checkArgument(!variableName.isEmpty());",
      "info" : "ExpressionStatement[26769-26822]:ExpressionStatement[27047-27100]"
    }, {
      "left" : "if (scope.isDeclared(variableName, false))",
      "right" : "if (scope.isDeclared(variableName, false))",
      "info" : "IfStatement[26866-28569]:IfStatement[27144-28847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26909-27075]:Block[27187-27353]"
    }, {
      "left" : "Var oldVar = scope.getVar(variableName);",
      "right" : "Var oldVar = scope.getVar(variableName);",
      "info" : "VariableDeclarationStatement[26919-26959]:VariableDeclarationStatement[27197-27237]"
    }, {
      "left" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "right" : "validator.expectUndeclaredVariable(\n            sourceName, n, parent, oldVar, variableName, type);",
      "info" : "ExpressionStatement[26968-27067]:ExpressionStatement[27246-27345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27081-28569]:Block[27359-28847]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[27091-27146]:IfStatement[27369-27424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27106-27146]:Block[27384-27424]"
    }, {
      "left" : "n.setJSType(type);",
      "right" : "n.setJSType(type);",
      "info" : "ExpressionStatement[27118-27136]:ExpressionStatement[27396-27414]"
    }, {
      "left" : "CompilerInput input = compiler.getInput(sourceName);",
      "right" : "CompilerInput input = compiler.getInput(sourceName);",
      "info" : "VariableDeclarationStatement[27155-27207]:VariableDeclarationStatement[27433-27485]"
    }, {
      "left" : "scope.declare(variableName, n, type, input, inferred);",
      "right" : "scope.declare(variableName, n, type, input, inferred);",
      "info" : "ExpressionStatement[27216-27270]:ExpressionStatement[27494-27548]"
    }, {
      "left" : "if (shouldDeclareOnGlobalThis)",
      "right" : "if (shouldDeclareOnGlobalThis)",
      "info" : "IfStatement[27280-27826]:IfStatement[27558-28104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27311-27826]:Block[27589-28104]"
    }, {
      "left" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "right" : "ObjectType globalThis =\n              typeRegistry.getNativeObjectType(JSTypeNative.GLOBAL_THIS);",
      "info" : "VariableDeclarationStatement[27323-27420]:VariableDeclarationStatement[27601-27698]"
    }, {
      "left" : "boolean isExtern = input.isExtern();",
      "right" : "boolean isExtern = input.isExtern();",
      "info" : "VariableDeclarationStatement[27431-27467]:VariableDeclarationStatement[27709-27745]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[27478-27816]:IfStatement[27756-28094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27492-27720]:Block[27770-27998]"
    }, {
      "left" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    typeRegistry.getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);",
      "right" : "globalThis.defineInferredProperty(variableName,\n                type == null ?\n                    typeRegistry.getNativeType(JSTypeNative.NO_TYPE) :\n                    type,\n                isExtern);",
      "info" : "ExpressionStatement[27506-27708]:ExpressionStatement[27784-27986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27726-27816]:Block[28004-28094]"
    }, {
      "left" : "globalThis.defineDeclaredProperty(variableName, type, isExtern);",
      "right" : "globalThis.defineDeclaredProperty(variableName, type, isExtern);",
      "info" : "ExpressionStatement[27740-27804]:ExpressionStatement[28018-28082]"
    }, {
      "left" : "if (scope.isGlobal() && type instanceof FunctionType)",
      "right" : "if (scope.isGlobal() && type instanceof FunctionType)",
      "info" : "IfStatement[27935-28561]:IfStatement[28213-28839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27989-28561]:Block[28267-28839]"
    }, {
      "left" : "FunctionType fnType = (FunctionType) type;",
      "right" : "FunctionType fnType = (FunctionType) type;",
      "info" : "VariableDeclarationStatement[28001-28043]:VariableDeclarationStatement[28279-28321]"
    }, {
      "left" : "if (fnType.isConstructor() || fnType.isInterface())",
      "right" : "if (fnType.isConstructor() || fnType.isInterface())",
      "info" : "IfStatement[28054-28551]:IfStatement[28332-28829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28106-28551]:Block[28384-28829]"
    }, {
      "left" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "right" : "FunctionType superClassCtor = fnType.getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[28120-28184]:VariableDeclarationStatement[28398-28462]"
    }, {
      "left" : "scope.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    typeRegistry.getNativeType(OBJECT_TYPE)));",
      "right" : "scope.declare(variableName + \".prototype\", n,\n                fnType.getPrototype(), compiler.getInput(sourceName),\n                /* declared iff there's an explicit supertype */\n                superClassCtor == null ||\n                superClassCtor.getInstanceType().equals(\n                    typeRegistry.getNativeType(OBJECT_TYPE)));",
      "info" : "ExpressionStatement[28197-28539]:ExpressionStatement[28475-28817]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28694-28701]:Modifier[28972-28979]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[28702-28707]:Modifier[28980-28985]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[28708-28713]:TYPE_DECLARATION_KIND[28986-28991]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[28714-28732]:SimpleName[28992-29010]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[28741-28761]:SimpleType[29019-29039]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29209-29216]:Modifier[29487-29494]"
    }, {
      "left" : "GlobalScopeBuilder",
      "right" : "GlobalScopeBuilder",
      "info" : "SimpleName[29217-29235]:SimpleName[29495-29513]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[29236-29247]:SingleVariableDeclaration[29514-29525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29249-29276]:Block[29527-29554]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[29257-29270]:SuperConstructorInvocation[29535-29548]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29526-29535]:MarkerAnnotation[29804-29813]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29536-29542]:Modifier[29814-29820]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29543-29547]:PrimitiveType[29821-29825]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[29548-29553]:SimpleName[29826-29831]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[29554-29569]:SingleVariableDeclaration[29832-29847]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[29571-29577]:SingleVariableDeclaration[29849-29855]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[29579-29590]:SingleVariableDeclaration[29857-29868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29592-35794]:Block[29870-36072]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.CALL:\n          SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);\n          if (relationship != null) {\n            ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));\n            ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));\n            if (superClass != null && subClass != null) {\n              FunctionType superCtor = superClass.getConstructor();\n              FunctionType subCtor = subClass.getConstructor();\n\n              if (relationship.type == SubclassType.INHERITS) {\n                validator.expectSuperType(t, n, superClass, subClass);\n              }\n\n              if (superCtor != null && subCtor != null) {\n                codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);\n              }\n            }\n          }\n\n          String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);\n          if (singletonGetterClassName != null) {\n            ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));\n            if (objectType != null) {\n              FunctionType functionType = objectType.getConstructor();\n\n              if (functionType != null) {\n                FunctionType getterType = new FunctionType(\n                    typeRegistry, null, null,\n                    new FunctionParamBuilder(typeRegistry).build(),\n                    objectType, null);\n                codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);\n              }\n            }\n          }\n\n          DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);\n          if (delegateRelationship != null) {\n            ObjectType delegatorObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegator));\n            ObjectType delegateBaseObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegateBase));\n            ObjectType delegateSuperObject = ObjectType.cast(\n                typeRegistry.getType(\n                    codingConvention.getDelegateSuperclassName()));\n            if (delegatorObject != null &&\n                delegateBaseObject != null &&\n                delegateSuperObject != null) {\n              FunctionType delegatorCtor = delegatorObject.getConstructor();\n              FunctionType delegateBaseCtor =\n                  delegateBaseObject.getConstructor();\n              FunctionType delegateSuperCtor =\n                  delegateSuperObject.getConstructor();\n\n              if (delegatorCtor != null && delegateBaseCtor != null &&\n                  delegateSuperCtor != null) {\n                FunctionParamBuilder functionParamBuilder =\n                    new FunctionParamBuilder(typeRegistry);\n                functionParamBuilder.addRequiredParams(\n                    typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));\n                FunctionType findDelegate = new FunctionType(\n                    typeRegistry, null, null, functionParamBuilder.build(),\n                    typeRegistry.createNullableType(delegateBaseObject), null);\n\n                FunctionType delegateProxy =\n                    typeRegistry.createConstructorType(\n                        delegateBaseObject.getReferenceName(), null, null,\n                        null);\n                delegateProxy.setPrototypeBasedOn(delegateBaseCtor);\n\n                codingConvention.applyDelegateRelationship(\n                    delegateSuperObject, delegateBaseObject, delegatorObject,\n                    delegateProxy, findDelegate);\n                delegateProxyMap.put(\n                    delegateProxy.getPrototype(),\n                    delegateBaseCtor.getPrototype());\n              }\n            }\n          }\n\n          ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);\n          if (objectLiteralCast != null) {\n            ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));\n            if (type != null && type.getConstructor() != null) {\n              objectLiteralCast.objectNode.setJSType(type);\n            } else {\n              compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));\n            }\n          }\n          break;\n\n        case Token.FUNCTION:\n          if (!t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          define(n, parent);\n\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          define(n, parent);\n          break;\n\n        case Token.VAR:\n          define(n, parent);\n\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            checkForTypedef(t, n, n.getJSDocInfo());\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.CALL:\n          SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);\n          if (relationship != null) {\n            ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));\n            ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));\n            if (superClass != null && subClass != null) {\n              FunctionType superCtor = superClass.getConstructor();\n              FunctionType subCtor = subClass.getConstructor();\n\n              if (relationship.type == SubclassType.INHERITS) {\n                validator.expectSuperType(t, n, superClass, subClass);\n              }\n\n              if (superCtor != null && subCtor != null) {\n                codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);\n              }\n            }\n          }\n\n          String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);\n          if (singletonGetterClassName != null) {\n            ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));\n            if (objectType != null) {\n              FunctionType functionType = objectType.getConstructor();\n\n              if (functionType != null) {\n                FunctionType getterType = new FunctionType(\n                    typeRegistry, null, null,\n                    new FunctionParamBuilder(typeRegistry).build(),\n                    objectType, null);\n                codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);\n              }\n            }\n          }\n\n          DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);\n          if (delegateRelationship != null) {\n            ObjectType delegatorObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegator));\n            ObjectType delegateBaseObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegateBase));\n            ObjectType delegateSuperObject = ObjectType.cast(\n                typeRegistry.getType(\n                    codingConvention.getDelegateSuperclassName()));\n            if (delegatorObject != null &&\n                delegateBaseObject != null &&\n                delegateSuperObject != null) {\n              FunctionType delegatorCtor = delegatorObject.getConstructor();\n              FunctionType delegateBaseCtor =\n                  delegateBaseObject.getConstructor();\n              FunctionType delegateSuperCtor =\n                  delegateSuperObject.getConstructor();\n\n              if (delegatorCtor != null && delegateBaseCtor != null &&\n                  delegateSuperCtor != null) {\n                FunctionParamBuilder functionParamBuilder =\n                    new FunctionParamBuilder(typeRegistry);\n                functionParamBuilder.addRequiredParams(\n                    typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));\n                FunctionType findDelegate = new FunctionType(\n                    typeRegistry, null, null, functionParamBuilder.build(),\n                    typeRegistry.createNullableType(delegateBaseObject), null);\n\n                FunctionType delegateProxy =\n                    typeRegistry.createConstructorType(\n                        delegateBaseObject.getReferenceName(), null, null,\n                        null);\n                delegateProxy.setPrototypeBasedOn(delegateBaseCtor);\n\n                codingConvention.applyDelegateRelationship(\n                    delegateSuperObject, delegateBaseObject, delegatorObject,\n                    delegateProxy, findDelegate);\n                delegateProxyMap.put(\n                    delegateProxy.getPrototype(),\n                    delegateBaseCtor.getPrototype());\n              }\n            }\n          }\n\n          ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);\n          if (objectLiteralCast != null) {\n            ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));\n            if (type != null && type.getConstructor() != null) {\n              objectLiteralCast.objectNode.setJSType(type);\n            } else {\n              compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));\n            }\n          }\n          break;\n\n        case Token.FUNCTION:\n          if (!t.getInput().isExtern()) {\n            nonExternFunctions.add(n);\n          }\n\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.ASSIGN:\n          // Handle constructor and enum definitions.\n          define(n, parent);\n\n          // Handle typedefs.\n          checkForOldStyleTypedef(t, n);\n\n          // Handle initialization of properties.\n          Node firstChild = n.getFirstChild();\n          if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName()) {\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());\n          }\n          break;\n\n        case Token.CATCH:\n          define(n, parent);\n          break;\n\n        case Token.VAR:\n          define(n, parent);\n\n          // Handle typedefs.\n          if (n.hasOneChild()) {\n            checkForOldStyleTypedef(t, n);\n            checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());\n          }\n          break;\n\n        case Token.GETPROP:\n          // Handle stubbed properties.\n          if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName()) {\n            checkForTypedef(t, n, n.getJSDocInfo());\n            maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);\n          }\n          break;\n      }",
      "info" : "SwitchStatement[29600-35788]:SwitchStatement[29878-36066]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[29631-29647]:SwitchCase[29909-29925]"
    }, {
      "left" : "SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);",
      "right" : "SubclassRelationship relationship =\n              codingConvention.getClassesDefinedByCall(n);",
      "info" : "VariableDeclarationStatement[29658-29752]:VariableDeclarationStatement[29936-30030]"
    }, {
      "left" : "if (relationship != null)",
      "right" : "if (relationship != null)",
      "info" : "IfStatement[29763-30591]:IfStatement[30041-30869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29789-30591]:Block[30067-30869]"
    }, {
      "left" : "ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));",
      "right" : "ObjectType superClass = ObjectType.cast(\n                typeRegistry.getType(relationship.superclassName));",
      "info" : "VariableDeclarationStatement[29803-29911]:VariableDeclarationStatement[30081-30189]"
    }, {
      "left" : "ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));",
      "right" : "ObjectType subClass = ObjectType.cast(\n                typeRegistry.getType(relationship.subclassName));",
      "info" : "VariableDeclarationStatement[29924-30028]:VariableDeclarationStatement[30202-30306]"
    }, {
      "left" : "if (superClass != null && subClass != null)",
      "right" : "if (superClass != null && subClass != null)",
      "info" : "IfStatement[30041-30579]:IfStatement[30319-30857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30085-30579]:Block[30363-30857]"
    }, {
      "left" : "FunctionType superCtor = superClass.getConstructor();",
      "right" : "FunctionType superCtor = superClass.getConstructor();",
      "info" : "VariableDeclarationStatement[30101-30154]:VariableDeclarationStatement[30379-30432]"
    }, {
      "left" : "FunctionType subCtor = subClass.getConstructor();",
      "right" : "FunctionType subCtor = subClass.getConstructor();",
      "info" : "VariableDeclarationStatement[30169-30218]:VariableDeclarationStatement[30447-30496]"
    }, {
      "left" : "if (relationship.type == SubclassType.INHERITS)",
      "right" : "if (relationship.type == SubclassType.INHERITS)",
      "info" : "IfStatement[30234-30370]:IfStatement[30512-30648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30282-30370]:Block[30560-30648]"
    }, {
      "left" : "validator.expectSuperType(t, n, superClass, subClass);",
      "right" : "validator.expectSuperType(t, n, superClass, subClass);",
      "info" : "ExpressionStatement[30300-30354]:ExpressionStatement[30578-30632]"
    }, {
      "left" : "if (superCtor != null && subCtor != null)",
      "right" : "if (superCtor != null && subCtor != null)",
      "info" : "IfStatement[30386-30565]:IfStatement[30664-30843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30428-30565]:Block[30706-30843]"
    }, {
      "left" : "codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);",
      "right" : "codingConvention.applySubclassRelationship(\n                    superCtor, subCtor, relationship.type);",
      "info" : "ExpressionStatement[30446-30549]:ExpressionStatement[30724-30827]"
    }, {
      "left" : "String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);",
      "right" : "String singletonGetterClassName =\n              codingConvention.getSingletonGetterClassName(n);",
      "info" : "VariableDeclarationStatement[30603-30699]:VariableDeclarationStatement[30881-30977]"
    }, {
      "left" : "if (singletonGetterClassName != null)",
      "right" : "if (singletonGetterClassName != null)",
      "info" : "IfStatement[30710-31421]:IfStatement[30988-31699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30748-31421]:Block[31026-31699]"
    }, {
      "left" : "ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));",
      "right" : "ObjectType objectType = ObjectType.cast(\n                typeRegistry.getType(singletonGetterClassName));",
      "info" : "VariableDeclarationStatement[30762-30867]:VariableDeclarationStatement[31040-31145]"
    }, {
      "left" : "if (objectType != null)",
      "right" : "if (objectType != null)",
      "info" : "IfStatement[30880-31409]:IfStatement[31158-31687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30904-31409]:Block[31182-31687]"
    }, {
      "left" : "FunctionType functionType = objectType.getConstructor();",
      "right" : "FunctionType functionType = objectType.getConstructor();",
      "info" : "VariableDeclarationStatement[30920-30976]:VariableDeclarationStatement[31198-31254]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[30992-31395]:IfStatement[31270-31673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31018-31395]:Block[31296-31673]"
    }, {
      "left" : "FunctionType getterType = new FunctionType(\n                    typeRegistry, null, null,\n                    new FunctionParamBuilder(typeRegistry).build(),\n                    objectType, null);",
      "right" : "FunctionType getterType = new FunctionType(\n                    typeRegistry, null, null,\n                    new FunctionParamBuilder(typeRegistry).build(),\n                    objectType, null);",
      "info" : "VariableDeclarationStatement[31036-31232]:VariableDeclarationStatement[31314-31510]"
    }, {
      "left" : "codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);",
      "right" : "codingConvention.applySingletonGetter(functionType, getterType,\n                                                      objectType);",
      "info" : "ExpressionStatement[31249-31379]:ExpressionStatement[31527-31657]"
    }, {
      "left" : "DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);",
      "right" : "DelegateRelationship delegateRelationship =\n              codingConvention.getDelegateRelationship(n);",
      "info" : "VariableDeclarationStatement[31433-31535]:VariableDeclarationStatement[31711-31813]"
    }, {
      "left" : "if (delegateRelationship != null)",
      "right" : "if (delegateRelationship != null)",
      "info" : "IfStatement[31546-33664]:IfStatement[31824-33942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31580-33664]:Block[31858-33942]"
    }, {
      "left" : "ObjectType delegatorObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegator));",
      "right" : "ObjectType delegatorObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegator));",
      "info" : "VariableDeclarationStatement[31594-31710]:VariableDeclarationStatement[31872-31988]"
    }, {
      "left" : "ObjectType delegateBaseObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegateBase));",
      "right" : "ObjectType delegateBaseObject = ObjectType.cast(\n                typeRegistry.getType(delegateRelationship.delegateBase));",
      "info" : "VariableDeclarationStatement[31723-31845]:VariableDeclarationStatement[32001-32123]"
    }, {
      "left" : "ObjectType delegateSuperObject = ObjectType.cast(\n                typeRegistry.getType(\n                    codingConvention.getDelegateSuperclassName()));",
      "right" : "ObjectType delegateSuperObject = ObjectType.cast(\n                typeRegistry.getType(\n                    codingConvention.getDelegateSuperclassName()));",
      "info" : "VariableDeclarationStatement[31858-32013]:VariableDeclarationStatement[32136-32291]"
    }, {
      "left" : "if (delegatorObject != null &&\n                delegateBaseObject != null &&\n                delegateSuperObject != null)",
      "right" : "if (delegatorObject != null &&\n                delegateBaseObject != null &&\n                delegateSuperObject != null)",
      "info" : "IfStatement[32026-33652]:IfStatement[32304-33930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32148-33652]:Block[32426-33930]"
    }, {
      "left" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "right" : "FunctionType delegatorCtor = delegatorObject.getConstructor();",
      "info" : "VariableDeclarationStatement[32164-32226]:VariableDeclarationStatement[32442-32504]"
    }, {
      "left" : "FunctionType delegateBaseCtor =\n                  delegateBaseObject.getConstructor();",
      "right" : "FunctionType delegateBaseCtor =\n                  delegateBaseObject.getConstructor();",
      "info" : "VariableDeclarationStatement[32241-32327]:VariableDeclarationStatement[32519-32605]"
    }, {
      "left" : "FunctionType delegateSuperCtor =\n                  delegateSuperObject.getConstructor();",
      "right" : "FunctionType delegateSuperCtor =\n                  delegateSuperObject.getConstructor();",
      "info" : "VariableDeclarationStatement[32342-32430]:VariableDeclarationStatement[32620-32708]"
    }, {
      "left" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n                  delegateSuperCtor != null)",
      "right" : "if (delegatorCtor != null && delegateBaseCtor != null &&\n                  delegateSuperCtor != null)",
      "info" : "IfStatement[32446-33638]:IfStatement[32724-33916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32548-33638]:Block[32826-33916]"
    }, {
      "left" : "FunctionParamBuilder functionParamBuilder =\n                    new FunctionParamBuilder(typeRegistry);",
      "right" : "FunctionParamBuilder functionParamBuilder =\n                    new FunctionParamBuilder(typeRegistry);",
      "info" : "VariableDeclarationStatement[32566-32669]:VariableDeclarationStatement[32844-32947]"
    }, {
      "left" : "functionParamBuilder.addRequiredParams(\n                    typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "functionParamBuilder.addRequiredParams(\n                    typeRegistry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ExpressionStatement[32686-32796]:ExpressionStatement[32964-33074]"
    }, {
      "left" : "FunctionType findDelegate = new FunctionType(\n                    typeRegistry, null, null, functionParamBuilder.build(),\n                    typeRegistry.createNullableType(delegateBaseObject), null);",
      "right" : "FunctionType findDelegate = new FunctionType(\n                    typeRegistry, null, null, functionParamBuilder.build(),\n                    typeRegistry.createNullableType(delegateBaseObject), null);",
      "info" : "VariableDeclarationStatement[32813-33014]:VariableDeclarationStatement[33091-33292]"
    }, {
      "left" : "FunctionType delegateProxy =\n                    typeRegistry.createConstructorType(\n                        delegateBaseObject.getReferenceName(), null, null,\n                        null);",
      "right" : "FunctionType delegateProxy =\n                    typeRegistry.createConstructorType(\n                        delegateBaseObject.getReferenceName(), null, null,\n                        null);",
      "info" : "VariableDeclarationStatement[33032-33222]:VariableDeclarationStatement[33310-33500]"
    }, {
      "left" : "delegateProxy.setPrototypeBasedOn(delegateBaseCtor);",
      "right" : "delegateProxy.setPrototypeBasedOn(delegateBaseCtor);",
      "info" : "ExpressionStatement[33239-33291]:ExpressionStatement[33517-33569]"
    }, {
      "left" : "codingConvention.applyDelegateRelationship(\n                    delegateSuperObject, delegateBaseObject, delegatorObject,\n                    delegateProxy, findDelegate);",
      "right" : "codingConvention.applyDelegateRelationship(\n                    delegateSuperObject, delegateBaseObject, delegatorObject,\n                    delegateProxy, findDelegate);",
      "info" : "ExpressionStatement[33309-33480]:ExpressionStatement[33587-33758]"
    }, {
      "left" : "delegateProxyMap.put(\n                    delegateProxy.getPrototype(),\n                    delegateBaseCtor.getPrototype());",
      "right" : "delegateProxyMap.put(\n                    delegateProxy.getPrototype(),\n                    delegateBaseCtor.getPrototype());",
      "info" : "ExpressionStatement[33497-33622]:ExpressionStatement[33775-33900]"
    }, {
      "left" : "ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);",
      "right" : "ObjectLiteralCast objectLiteralCast =\n              codingConvention.getObjectLiteralCast(t, n);",
      "info" : "VariableDeclarationStatement[33676-33772]:VariableDeclarationStatement[33954-34050]"
    }, {
      "left" : "if (objectLiteralCast != null)",
      "right" : "if (objectLiteralCast != null)",
      "info" : "IfStatement[33783-34233]:IfStatement[34061-34511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33814-34233]:Block[34092-34511]"
    }, {
      "left" : "ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));",
      "right" : "ObjectType type = ObjectType.cast(\n                typeRegistry.getType(objectLiteralCast.typeName));",
      "info" : "VariableDeclarationStatement[33828-33929]:VariableDeclarationStatement[34106-34207]"
    }, {
      "left" : "if (type != null && type.getConstructor() != null)",
      "right" : "if (type != null && type.getConstructor() != null)",
      "info" : "IfStatement[33942-34221]:IfStatement[34220-34499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33993-34068]:Block[34271-34346]"
    }, {
      "left" : "objectLiteralCast.objectNode.setJSType(type);",
      "right" : "objectLiteralCast.objectNode.setJSType(type);",
      "info" : "ExpressionStatement[34009-34054]:ExpressionStatement[34287-34332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34074-34221]:Block[34352-34499]"
    }, {
      "left" : "compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));",
      "right" : "compiler.report(JSError.make(t.getSourceName(), n,\n                                           CONSTRUCTOR_EXPECTED));",
      "info" : "ExpressionStatement[34090-34207]:ExpressionStatement[34368-34485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34244-34250]:BreakStatement[34522-34528]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[34260-34280]:SwitchCase[34538-34558]"
    }, {
      "left" : "if (!t.getInput().isExtern())",
      "right" : "if (!t.getInput().isExtern())",
      "info" : "IfStatement[34291-34373]:IfStatement[34569-34651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34321-34373]:Block[34599-34651]"
    }, {
      "left" : "nonExternFunctions.add(n);",
      "right" : "nonExternFunctions.add(n);",
      "info" : "ExpressionStatement[34335-34361]:ExpressionStatement[34613-34639]"
    }, {
      "left" : "if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.ASSIGN ||\n              parent.getType() == Token.NAME)",
      "info" : "IfStatement[34439-34558]:IfStatement[34717-34836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34525-34558]:Block[34803-34836]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[34539-34546]:ReturnStatement[34817-34824]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[34569-34587]:ExpressionStatement[34847-34865]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34598-34604]:BreakStatement[34876-34882]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[34614-34632]:SwitchCase[34892-34910]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[34697-34715]:ExpressionStatement[34975-34993]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[34757-34787]:ExpressionStatement[35035-35065]"
    }, {
      "left" : "Node firstChild = n.getFirstChild();",
      "right" : "Node firstChild = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[34849-34885]:VariableDeclarationStatement[35127-35163]"
    }, {
      "left" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "right" : "if (firstChild.getType() == Token.GETPROP &&\n              firstChild.isQualifiedName())",
      "info" : "IfStatement[34896-35111]:IfStatement[35174-35389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34985-35111]:Block[35263-35389]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(),\n                firstChild, n, firstChild.getNext());",
      "info" : "ExpressionStatement[34999-35099]:ExpressionStatement[35277-35377]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35122-35128]:BreakStatement[35400-35406]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[35138-35155]:SwitchCase[35416-35433]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[35166-35184]:ExpressionStatement[35444-35462]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35195-35201]:BreakStatement[35473-35479]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[35211-35226]:SwitchCase[35489-35504]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[35237-35255]:ExpressionStatement[35515-35533]"
    }, {
      "left" : "if (n.hasOneChild())",
      "right" : "if (n.hasOneChild())",
      "info" : "IfStatement[35297-35443]:IfStatement[35575-35721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35318-35443]:Block[35596-35721]"
    }, {
      "left" : "checkForOldStyleTypedef(t, n);",
      "right" : "checkForOldStyleTypedef(t, n);",
      "info" : "ExpressionStatement[35332-35362]:ExpressionStatement[35610-35640]"
    }, {
      "left" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n.getFirstChild(), n.getJSDocInfo());",
      "info" : "ExpressionStatement[35375-35431]:ExpressionStatement[35653-35709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35454-35460]:BreakStatement[35732-35738]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[35470-35489]:SwitchCase[35748-35767]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "right" : "if (parent.getType() == Token.EXPR_RESULT &&\n              n.isQualifiedName())",
      "info" : "IfStatement[35540-35763]:IfStatement[35818-36041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35620-35763]:Block[35898-36041]"
    }, {
      "left" : "checkForTypedef(t, n, n.getJSDocInfo());",
      "right" : "checkForTypedef(t, n, n.getJSDocInfo());",
      "info" : "ExpressionStatement[35634-35674]:ExpressionStatement[35912-35952]"
    }, {
      "left" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "right" : "maybeDeclareQualifiedName(t, n.getJSDocInfo(), n, parent, null);",
      "info" : "ExpressionStatement[35687-35751]:ExpressionStatement[35965-36029]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35774-35780]:BreakStatement[36052-36058]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35961-35968]:Modifier[36239-36246]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35969-35973]:PrimitiveType[36247-36251]"
    }, {
      "left" : "checkForTypedef",
      "right" : "checkForTypedef",
      "info" : "SimpleName[35974-35989]:SimpleName[36252-36267]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[35999-36014]:SingleVariableDeclaration[36277-36292]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[36016-36030]:SingleVariableDeclaration[36294-36308]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[36032-36046]:SingleVariableDeclaration[36310-36324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36048-36902]:Block[36326-37180]"
    }, {
      "left" : "if (info == null || !info.hasTypedefType())",
      "right" : "if (info == null || !info.hasTypedefType())",
      "info" : "IfStatement[36056-36125]:IfStatement[36334-36403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36100-36125]:Block[36378-36403]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36110-36117]:ReturnStatement[36388-36395]"
    }, {
      "left" : "String typedef = candidate.getQualifiedName();",
      "right" : "String typedef = candidate.getQualifiedName();",
      "info" : "VariableDeclarationStatement[36133-36179]:VariableDeclarationStatement[36411-36457]"
    }, {
      "left" : "if (typedef == null)",
      "right" : "if (typedef == null)",
      "info" : "IfStatement[36186-36232]:IfStatement[36464-36510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36207-36232]:Block[36485-36510]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[36217-36224]:ReturnStatement[36495-36502]"
    }, {
      "left" : "typeRegistry.forwardDeclareType(typedef);",
      "right" : "typeRegistry.forwardDeclareType(typedef);",
      "info" : "ExpressionStatement[36406-36447]:ExpressionStatement[36684-36725]"
    }, {
      "left" : "JSType realType = info.getTypedefType().evaluate(scope);",
      "right" : "JSType realType = info.getTypedefType().evaluate(scope);",
      "info" : "VariableDeclarationStatement[36455-36511]:VariableDeclarationStatement[36733-36789]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[36518-36676]:IfStatement[36796-36954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36540-36676]:Block[36818-36954]"
    }, {
      "left" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n            JSError.make(\n                t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[36550-36668]:ExpressionStatement[36828-36946]"
    }, {
      "left" : "typeRegistry.declareType(typedef, realType);",
      "right" : "typeRegistry.declareType(typedef, realType);",
      "info" : "ExpressionStatement[36684-36728]:ExpressionStatement[36962-37006]"
    }, {
      "left" : "if (candidate.getType() == Token.GETPROP)",
      "right" : "if (candidate.getType() == Token.GETPROP)",
      "info" : "IfStatement[36735-36896]:IfStatement[37013-37174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36777-36896]:Block[37055-37174]"
    }, {
      "left" : "defineSlot(candidate, candidate.getParent(),\n            typeRegistry.getNativeType(NO_TYPE), false);",
      "right" : "defineSlot(candidate, candidate.getParent(),\n            typeRegistry.getNativeType(NO_TYPE), false);",
      "info" : "ExpressionStatement[36787-36888]:ExpressionStatement[37065-37166]"
    }, {
      "left" : "// TODO(nicksantos): Kill this.",
      "right" : "// TODO(nicksantos): Kill this.",
      "info" : "LineComment[37034-37065]:LineComment[37312-37343]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[37070-37077]:Modifier[37348-37355]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37078-37082]:PrimitiveType[37356-37360]"
    }, {
      "left" : "checkForOldStyleTypedef",
      "right" : "checkForOldStyleTypedef",
      "info" : "SimpleName[37083-37106]:SimpleName[37361-37384]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[37107-37122]:SingleVariableDeclaration[37385-37400]"
    }, {
      "left" : "Node candidate",
      "right" : "Node candidate",
      "info" : "SingleVariableDeclaration[37124-37138]:SingleVariableDeclaration[37402-37416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37140-37986]:Block[37418-38264]"
    }, {
      "left" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "right" : "String typedef = codingConvention.identifyTypeDefAssign(candidate);",
      "info" : "VariableDeclarationStatement[37176-37243]:VariableDeclarationStatement[37454-37521]"
    }, {
      "left" : "if (typedef != null)",
      "right" : "if (typedef != null)",
      "info" : "IfStatement[37250-37980]:IfStatement[37528-38258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37271-37980]:Block[37549-38258]"
    }, {
      "left" : "typeRegistry.forwardDeclareType(typedef);",
      "right" : "typeRegistry.forwardDeclareType(typedef);",
      "info" : "ExpressionStatement[37453-37494]:ExpressionStatement[37731-37772]"
    }, {
      "left" : "JSDocInfo info = candidate.getJSDocInfo();",
      "right" : "JSDocInfo info = candidate.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[37504-37546]:VariableDeclarationStatement[37782-37824]"
    }, {
      "left" : "JSType realType = info == null ? null :\n            info.getType().evaluate(scope);",
      "right" : "JSType realType = info == null ? null :\n            info.getType().evaluate(scope);",
      "info" : "VariableDeclarationStatement[37555-37638]:VariableDeclarationStatement[37833-37916]"
    }, {
      "left" : "if (realType == null)",
      "right" : "if (realType == null)",
      "info" : "IfStatement[37647-37813]:IfStatement[37925-38091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37669-37813]:Block[37947-38091]"
    }, {
      "left" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "right" : "compiler.report(\n              JSError.make(\n                  t.getSourceName(), candidate, MALFORMED_TYPEDEF, typedef));",
      "info" : "ExpressionStatement[37681-37803]:ExpressionStatement[37959-38081]"
    }, {
      "left" : "typeRegistry.declareType(typedef, realType);",
      "right" : "typeRegistry.declareType(typedef, realType);",
      "info" : "ExpressionStatement[37823-37867]:ExpressionStatement[38101-38145]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[38415-38422]:Modifier[38693-38700]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38423-38427]:PrimitiveType[38701-38705]"
    }, {
      "left" : "maybeDeclareQualifiedName",
      "right" : "maybeDeclareQualifiedName",
      "info" : "SimpleName[38428-38453]:SimpleName[38706-38731]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[38454-38469]:SingleVariableDeclaration[38732-38747]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[38471-38485]:SingleVariableDeclaration[38749-38763]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[38495-38501]:SingleVariableDeclaration[38773-38779]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[38503-38514]:SingleVariableDeclaration[38781-38792]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[38516-38529]:SingleVariableDeclaration[38794-38807]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38531-42454]:Block[38809-42732]"
    }, {
      "left" : "Node ownerNode = n.getFirstChild();",
      "right" : "Node ownerNode = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[38539-38574]:VariableDeclarationStatement[38817-38852]"
    }, {
      "left" : "String ownerName = ownerNode.getQualifiedName();",
      "right" : "String ownerName = ownerNode.getQualifiedName();",
      "info" : "VariableDeclarationStatement[38581-38629]:VariableDeclarationStatement[38859-38907]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[38636-38672]:VariableDeclarationStatement[38914-38950]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[38679-38726]:VariableDeclarationStatement[38957-39004]"
    }, {
      "left" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "right" : "Preconditions.checkArgument(qName != null && ownerName != null);",
      "info" : "ExpressionStatement[38733-38797]:ExpressionStatement[39011-39075]"
    }, {
      "left" : "if (\"prototype\".equals(propName))",
      "right" : "if (\"prototype\".equals(propName))",
      "info" : "IfStatement[39040-39325]:IfStatement[39318-39603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39074-39325]:Block[39352-39603]"
    }, {
      "left" : "Var qVar = scope.getVar(qName);",
      "right" : "Var qVar = scope.getVar(qName);",
      "info" : "VariableDeclarationStatement[39084-39115]:VariableDeclarationStatement[39362-39393]"
    }, {
      "left" : "if (qVar != null)",
      "right" : "if (qVar != null)",
      "info" : "IfStatement[39124-39317]:IfStatement[39402-39595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39142-39317]:Block[39420-39595]"
    }, {
      "left" : "if (!qVar.isTypeInferred())",
      "right" : "if (!qVar.isTypeInferred())",
      "info" : "IfStatement[39154-39274]:IfStatement[39432-39552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39182-39274]:Block[39460-39552]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[39255-39262]:ReturnStatement[39533-39540]"
    }, {
      "left" : "scope.undeclare(qVar);",
      "right" : "scope.undeclare(qVar);",
      "info" : "ExpressionStatement[39285-39307]:ExpressionStatement[39563-39585]"
    }, {
      "left" : "JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);",
      "right" : "JSType valueType = getDeclaredGetPropType(t, info, n, rhsValue);",
      "info" : "VariableDeclarationStatement[39914-39978]:VariableDeclarationStatement[40192-40256]"
    }, {
      "left" : "if (valueType == null && rhsValue != null)",
      "right" : "if (valueType == null && rhsValue != null)",
      "info" : "IfStatement[39985-40114]:IfStatement[40263-40392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40028-40114]:Block[40306-40392]"
    }, {
      "left" : "valueType = rhsValue.getJSType();",
      "right" : "valueType = rhsValue.getJSType();",
      "info" : "ExpressionStatement[40073-40106]:ExpressionStatement[40351-40384]"
    }, {
      "left" : "if (valueType == null)",
      "right" : "if (valueType == null)",
      "info" : "IfStatement[40122-41125]:IfStatement[40400-41403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40145-41125]:Block[40423-41403]"
    }, {
      "left" : "if (parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[40155-41100]:IfStatement[40433-41378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40198-40316]:Block[40476-40594]"
    }, {
      "left" : "stubDeclarations.add(new StubDeclaration(\n              n, t.getInput().isExtern(), ownerName));",
      "right" : "stubDeclarations.add(new StubDeclaration(\n              n, t.getInput().isExtern(), ownerName));",
      "info" : "ExpressionStatement[40210-40306]:ExpressionStatement[40488-40584]"
    }, {
      "left" : "if (rhsValue != null &&\n                   rhsValue.getType() == Token.TRUE)",
      "right" : "if (rhsValue != null &&\n                   rhsValue.getType() == Token.TRUE)",
      "info" : "IfStatement[40322-41100]:IfStatement[40600-41378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40399-41100]:Block[40677-41378]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[40479-40527]:VariableDeclarationStatement[40757-40805]"
    }, {
      "left" : "if (ownerType instanceof FunctionType)",
      "right" : "if (ownerType instanceof FunctionType)",
      "info" : "IfStatement[40538-41090]:IfStatement[40816-41368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40577-41090]:Block[40855-41368]"
    }, {
      "left" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "right" : "JSType ownerTypeOfThis = ((FunctionType) ownerType).getTypeOfThis();",
      "info" : "VariableDeclarationStatement[40591-40659]:VariableDeclarationStatement[40869-40937]"
    }, {
      "left" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "right" : "String delegateName = codingConvention.getDelegateSuperclassName();",
      "info" : "VariableDeclarationStatement[40672-40739]:VariableDeclarationStatement[40950-41017]"
    }, {
      "left" : "JSType delegateType = delegateName == null ?\n                null : typeRegistry.getType(delegateName);",
      "right" : "JSType delegateType = delegateName == null ?\n                null : typeRegistry.getType(delegateName);",
      "info" : "VariableDeclarationStatement[40752-40855]:VariableDeclarationStatement[41030-41133]"
    }, {
      "left" : "if (delegateType != null &&\n                ownerTypeOfThis.isSubtype(delegateType))",
      "right" : "if (delegateType != null &&\n                ownerTypeOfThis.isSubtype(delegateType))",
      "info" : "IfStatement[40868-41078]:IfStatement[41146-41356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40953-41078]:Block[41231-41356]"
    }, {
      "left" : "defineSlot(n, parent, typeRegistry.getNativeType(BOOLEAN_TYPE),\n                         true);",
      "right" : "defineSlot(n, parent, typeRegistry.getNativeType(BOOLEAN_TYPE),\n                         true);",
      "info" : "ExpressionStatement[40969-41064]:ExpressionStatement[41247-41342]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[41110-41117]:ReturnStatement[41388-41395]"
    }, {
      "left" : "boolean inferred = true;",
      "right" : "boolean inferred = true;",
      "info" : "VariableDeclarationStatement[41133-41157]:VariableDeclarationStatement[41411-41435]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[41164-41374]:IfStatement[41442-41652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41182-41374]:Block[41460-41652]"
    }, {
      "left" : "inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "right" : "inferred = !(info.hasType() || info.hasEnumParameterType() ||\n            FunctionTypeBuilder.isFunctionTypeDeclaration(info));",
      "info" : "ExpressionStatement[41239-41366]:ExpressionStatement[41517-41644]"
    }, {
      "left" : "if (inferred)",
      "right" : "if (inferred)",
      "info" : "IfStatement[41382-41586]:IfStatement[41660-41864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41396-41586]:Block[41674-41864]"
    }, {
      "left" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "right" : "inferred = !(rhsValue != null &&\n            rhsValue.getType() == Token.FUNCTION &&\n            !scope.isDeclared(qName, false));",
      "info" : "ExpressionStatement[41448-41578]:ExpressionStatement[41726-41856]"
    }, {
      "left" : "if (!inferred)",
      "right" : "if (!inferred)",
      "info" : "IfStatement[41594-42448]:IfStatement[41872-42726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41609-42448]:Block[41887-42726]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[41619-41667]:VariableDeclarationStatement[41897-41945]"
    }, {
      "left" : "if (ownerType != null)",
      "right" : "if (ownerType != null)",
      "info" : "IfStatement[41676-42255]:IfStatement[41954-42533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41699-42255]:Block[41977-42533]"
    }, {
      "left" : "boolean isExtern = t.getInput().isExtern();",
      "right" : "boolean isExtern = t.getInput().isExtern();",
      "info" : "VariableDeclarationStatement[41812-41855]:VariableDeclarationStatement[42090-42133]"
    }, {
      "left" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "right" : "if ((!ownerType.hasOwnProperty(propName) ||\n               ownerType.isPropertyTypeInferred(propName)) &&\n              ((isExtern && !ownerType.isNativeObjectType()) ||\n               !ownerType.isInstanceType()))",
      "info" : "IfStatement[41866-42245]:IfStatement[42144-42523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42081-42245]:Block[42359-42523]"
    }, {
      "left" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern);",
      "right" : "ownerType.defineDeclaredProperty(propName, valueType, isExtern);",
      "info" : "ExpressionStatement[42169-42233]:ExpressionStatement[42447-42511]"
    }, {
      "left" : "defineSlot(n, parent, valueType, inferred);",
      "right" : "defineSlot(n, parent, valueType, inferred);",
      "info" : "ExpressionStatement[42397-42440]:ExpressionStatement[42675-42718]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[42680-42687]:Modifier[42958-42965]"
    }, {
      "left" : "ObjectType",
      "right" : "ObjectType",
      "info" : "SimpleType[42688-42698]:SimpleType[42966-42976]"
    }, {
      "left" : "getObjectSlot",
      "right" : "getObjectSlot",
      "info" : "SimpleName[42699-42712]:SimpleName[42977-42990]"
    }, {
      "left" : "String slotName",
      "right" : "String slotName",
      "info" : "SingleVariableDeclaration[42713-42728]:SingleVariableDeclaration[42991-43006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42730-43008]:Block[43008-43286]"
    }, {
      "left" : "Var ownerVar = scope.getVar(slotName);",
      "right" : "Var ownerVar = scope.getVar(slotName);",
      "info" : "VariableDeclarationStatement[42738-42776]:VariableDeclarationStatement[43016-43054]"
    }, {
      "left" : "if (ownerVar != null)",
      "right" : "if (ownerVar != null)",
      "info" : "IfStatement[42783-42983]:IfStatement[43061-43261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42805-42983]:Block[43083-43261]"
    }, {
      "left" : "JSType ownerVarType = ownerVar.getType();",
      "right" : "JSType ownerVarType = ownerVar.getType();",
      "info" : "VariableDeclarationStatement[42815-42856]:VariableDeclarationStatement[43093-43134]"
    }, {
      "left" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "right" : "return ObjectType.cast(ownerVarType == null ?\n            null : ownerVarType.restrictByNotNullOrUndefined());",
      "info" : "ReturnStatement[42865-42975]:ReturnStatement[43143-43253]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[42990-43002]:ReturnStatement[43268-43280]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[43377-43384]:Modifier[43655-43662]"
    }, {
      "left" : "JSType",
      "right" : "JSType",
      "info" : "SimpleType[43385-43391]:SimpleType[43663-43669]"
    }, {
      "left" : "getDeclaredGetPropType",
      "right" : "getDeclaredGetPropType",
      "info" : "SimpleName[43392-43414]:SimpleName[43670-43692]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[43415-43430]:SingleVariableDeclaration[43693-43708]"
    }, {
      "left" : "JSDocInfo info",
      "right" : "JSDocInfo info",
      "info" : "SingleVariableDeclaration[43432-43446]:SingleVariableDeclaration[43710-43724]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[43456-43462]:SingleVariableDeclaration[43734-43740]"
    }, {
      "left" : "Node rhsValue",
      "right" : "Node rhsValue",
      "info" : "SingleVariableDeclaration[43464-43477]:SingleVariableDeclaration[43742-43755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43479-43883]:Block[43757-44161]"
    }, {
      "left" : "if (info != null && info.hasType())",
      "right" : "if (info != null && info.hasType())",
      "info" : "IfStatement[43487-43877]:IfStatement[43765-44155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43523-43588]:Block[43801-43866]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "right" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "info" : "ReturnStatement[43533-43580]:ReturnStatement[43811-43858]"
    }, {
      "left" : "if (info != null && info.hasEnumParameterType())",
      "right" : "if (info != null && info.hasEnumParameterType())",
      "info" : "IfStatement[43594-43877]:IfStatement[43872-44155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43643-43682]:Block[43921-43960]"
    }, {
      "left" : "return n.getJSType();",
      "right" : "return n.getJSType();",
      "info" : "ReturnStatement[43653-43674]:ReturnStatement[43931-43952]"
    }, {
      "left" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION)",
      "right" : "if (rhsValue != null &&\n          rhsValue.getType() == Token.FUNCTION)",
      "info" : "IfStatement[43688-43877]:IfStatement[43966-44155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43760-43806]:Block[44038-44084]"
    }, {
      "left" : "return rhsValue.getJSType();",
      "right" : "return rhsValue.getJSType();",
      "info" : "ReturnStatement[43770-43798]:ReturnStatement[44048-44076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43812-43877]:Block[44090-44155]"
    }, {
      "left" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "right" : "return getDeclaredTypeInAnnotation(t, n, info);",
      "info" : "ReturnStatement[43822-43869]:ReturnStatement[44100-44147]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[44020-44027]:Modifier[44298-44305]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[44028-44032]:PrimitiveType[44306-44310]"
    }, {
      "left" : "resolveStubDeclarations",
      "right" : "resolveStubDeclarations",
      "info" : "SimpleName[44033-44056]:SimpleName[44311-44334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44059-45217]:Block[44337-45495]"
    }, {
      "left" : "for (StubDeclaration stub : stubDeclarations)",
      "right" : "for (StubDeclaration stub : stubDeclarations)",
      "info" : "EnhancedForStatement[44067-45211]:EnhancedForStatement[44345-45489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44113-45211]:Block[44391-45489]"
    }, {
      "left" : "Node n = stub.node;",
      "right" : "Node n = stub.node;",
      "info" : "VariableDeclarationStatement[44123-44142]:VariableDeclarationStatement[44401-44420]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[44151-44179]:VariableDeclarationStatement[44429-44457]"
    }, {
      "left" : "String qName = n.getQualifiedName();",
      "right" : "String qName = n.getQualifiedName();",
      "info" : "VariableDeclarationStatement[44188-44224]:VariableDeclarationStatement[44466-44502]"
    }, {
      "left" : "String propName = n.getLastChild().getString();",
      "right" : "String propName = n.getLastChild().getString();",
      "info" : "VariableDeclarationStatement[44233-44280]:VariableDeclarationStatement[44511-44558]"
    }, {
      "left" : "String ownerName = stub.ownerName;",
      "right" : "String ownerName = stub.ownerName;",
      "info" : "VariableDeclarationStatement[44289-44323]:VariableDeclarationStatement[44567-44601]"
    }, {
      "left" : "boolean isExtern = stub.isExtern;",
      "right" : "boolean isExtern = stub.isExtern;",
      "info" : "VariableDeclarationStatement[44332-44365]:VariableDeclarationStatement[44610-44643]"
    }, {
      "left" : "if (scope.isDeclared(qName, false))",
      "right" : "if (scope.isDeclared(qName, false))",
      "info" : "IfStatement[44375-44442]:IfStatement[44653-44720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44411-44442]:Block[44689-44720]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[44423-44432]:ContinueStatement[44701-44710]"
    }, {
      "left" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "right" : "ObjectType ownerType = getObjectSlot(ownerName);",
      "info" : "VariableDeclarationStatement[44559-44607]:VariableDeclarationStatement[44837-44885]"
    }, {
      "left" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "right" : "ObjectType unknownType = typeRegistry.getNativeObjectType(UNKNOWN_TYPE);",
      "info" : "VariableDeclarationStatement[44616-44688]:VariableDeclarationStatement[44894-44966]"
    }, {
      "left" : "defineSlot(n, parent, unknownType, true);",
      "right" : "defineSlot(n, parent, unknownType, true);",
      "info" : "ExpressionStatement[44697-44738]:ExpressionStatement[44975-45016]"
    }, {
      "left" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "right" : "if (ownerType != null &&\n            (isExtern || ownerType.isFunctionPrototypeType()))",
      "info" : "IfStatement[44748-45203]:IfStatement[45026-45481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44836-45069]:Block[45114-45347]"
    }, {
      "left" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);",
      "right" : "ownerType.defineInferredProperty(\n              propName, unknownType, isExtern);",
      "info" : "ExpressionStatement[44978-45059]:ExpressionStatement[45256-45337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45075-45203]:Block[45353-45481]"
    }, {
      "left" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "right" : "typeRegistry.registerPropertyOnType(\n              propName, ownerType == null ? unknownType : ownerType);",
      "info" : "ExpressionStatement[45087-45193]:ExpressionStatement[45365-45471]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45295-45302]:Modifier[45573-45580]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[45303-45308]:Modifier[45581-45586]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[45309-45314]:TYPE_DECLARATION_KIND[45587-45592]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[45315-45330]:SimpleName[45593-45608]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45447-45454]:Modifier[45725-45732]"
    }, {
      "left" : "StubDeclaration",
      "right" : "StubDeclaration",
      "info" : "SimpleName[45455-45470]:SimpleName[45733-45748]"
    }, {
      "left" : "Node node",
      "right" : "Node node",
      "info" : "SingleVariableDeclaration[45471-45480]:SingleVariableDeclaration[45749-45758]"
    }, {
      "left" : "boolean isExtern",
      "right" : "boolean isExtern",
      "info" : "SingleVariableDeclaration[45482-45498]:SingleVariableDeclaration[45760-45776]"
    }, {
      "left" : "String ownerName",
      "right" : "String ownerName",
      "info" : "SingleVariableDeclaration[45500-45516]:SingleVariableDeclaration[45778-45794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45518-45623]:Block[45796-45901]"
    }, {
      "left" : "this.node = node;",
      "right" : "this.node = node;",
      "info" : "ExpressionStatement[45528-45545]:ExpressionStatement[45806-45823]"
    }, {
      "left" : "this.isExtern = isExtern;",
      "right" : "this.isExtern = isExtern;",
      "info" : "ExpressionStatement[45554-45579]:ExpressionStatement[45832-45857]"
    }, {
      "left" : "this.ownerName = ownerName;",
      "right" : "this.ownerName = ownerName;",
      "info" : "ExpressionStatement[45588-45615]:ExpressionStatement[45866-45893]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[45761-45768]:Modifier[46039-46046]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[45769-45774]:Modifier[46047-46052]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[45775-45780]:TYPE_DECLARATION_KIND[46053-46058]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[45781-45798]:SimpleName[46059-46076]"
    }, {
      "left" : "AbstractShallowCallback",
      "right" : "AbstractShallowCallback",
      "info" : "SimpleType[45815-45838]:SimpleType[46093-46116]"
    }, {
      "left" : "CollectProperties",
      "right" : "CollectProperties",
      "info" : "SimpleName[45889-45906]:SimpleName[46167-46184]"
    }, {
      "left" : "ObjectType thisType",
      "right" : "ObjectType thisType",
      "info" : "SingleVariableDeclaration[45907-45926]:SingleVariableDeclaration[46185-46204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45928-45971]:Block[46206-46249]"
    }, {
      "left" : "this.thisType = thisType;",
      "right" : "this.thisType = thisType;",
      "info" : "ExpressionStatement[45938-45963]:ExpressionStatement[46216-46241]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[45979-45985]:Modifier[46257-46263]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45986-45990]:PrimitiveType[46264-46268]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[45991-45996]:SimpleName[46269-46274]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[45997-46012]:SingleVariableDeclaration[46275-46290]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[46014-46020]:SingleVariableDeclaration[46292-46298]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[46022-46033]:SingleVariableDeclaration[46300-46311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46035-46377]:Block[46313-46655]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.EXPR_RESULT)",
      "right" : "if (parent != null && parent.getType() == Token.EXPR_RESULT)",
      "info" : "IfStatement[46045-46369]:IfStatement[46323-46647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46106-46369]:Block[46384-46647]"
    }, {
      "left" : "switch (n.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, n.getFirstChild(), n);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, n, n);\n              break;\n          }",
      "right" : "switch (n.getType()) {\n            case Token.ASSIGN:\n              maybeCollectMember(t, n.getFirstChild(), n);\n              break;\n            case Token.GETPROP:\n              maybeCollectMember(t, n, n);\n              break;\n          }",
      "info" : "SwitchStatement[46118-46359]:SwitchStatement[46396-46637]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[46153-46171]:SwitchCase[46431-46449]"
    }, {
      "left" : "maybeCollectMember(t, n.getFirstChild(), n);",
      "right" : "maybeCollectMember(t, n.getFirstChild(), n);",
      "info" : "ExpressionStatement[46186-46230]:ExpressionStatement[46464-46508]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46245-46251]:BreakStatement[46523-46529]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[46264-46283]:SwitchCase[46542-46561]"
    }, {
      "left" : "maybeCollectMember(t, n, n);",
      "right" : "maybeCollectMember(t, n, n);",
      "info" : "ExpressionStatement[46298-46326]:ExpressionStatement[46576-46604]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46341-46347]:BreakStatement[46619-46625]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[46385-46392]:Modifier[46663-46670]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46393-46397]:PrimitiveType[46671-46675]"
    }, {
      "left" : "maybeCollectMember",
      "right" : "maybeCollectMember",
      "info" : "SimpleName[46398-46416]:SimpleName[46676-46694]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[46417-46432]:SingleVariableDeclaration[46695-46710]"
    }, {
      "left" : "Node member",
      "right" : "Node member",
      "info" : "SingleVariableDeclaration[46444-46455]:SingleVariableDeclaration[46722-46733]"
    }, {
      "left" : "Node nodeWithJsDocInfo",
      "right" : "Node nodeWithJsDocInfo",
      "info" : "SingleVariableDeclaration[46457-46479]:SingleVariableDeclaration[46735-46757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46481-47364]:Block[46759-47642]"
    }, {
      "left" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "right" : "JSDocInfo info = nodeWithJsDocInfo.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[46491-46541]:VariableDeclarationStatement[46769-46819]"
    }, {
      "left" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "right" : "if (info == null ||\n            member.getType() != Token.GETPROP ||\n            member.getFirstChild().getType() != Token.THIS)",
      "info" : "IfStatement[46737-46895]:IfStatement[47015-47173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46866-46895]:Block[47144-47173]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[46878-46885]:ReturnStatement[47156-47163]"
    }, {
      "left" : "member.getFirstChild().setJSType(thisType);",
      "right" : "member.getFirstChild().setJSType(thisType);",
      "info" : "ExpressionStatement[46905-46948]:ExpressionStatement[47183-47226]"
    }, {
      "left" : "JSType jsType = getDeclaredTypeInAnnotation(t, member, info);",
      "right" : "JSType jsType = getDeclaredTypeInAnnotation(t, member, info);",
      "info" : "VariableDeclarationStatement[46957-47018]:VariableDeclarationStatement[47235-47296]"
    }, {
      "left" : "Node name = member.getLastChild();",
      "right" : "Node name = member.getLastChild();",
      "info" : "VariableDeclarationStatement[47027-47061]:VariableDeclarationStatement[47305-47339]"
    }, {
      "left" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "right" : "if (jsType != null &&\n            (name.getType() == Token.NAME || name.getType() == Token.STRING))",
      "info" : "IfStatement[47070-47356]:IfStatement[47348-47634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47170-47356]:Block[47448-47634]"
    }, {
      "left" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */);",
      "right" : "thisType.defineDeclaredProperty(\n              name.getString(),\n              jsType,\n              false /* functions with implementations are not in externs */);",
      "info" : "ExpressionStatement[47182-47346]:ExpressionStatement[47460-47624]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47531-47538]:Modifier[47809-47816]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[47539-47544]:Modifier[47817-47822]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[47545-47550]:TYPE_DECLARATION_KIND[47823-47828]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[47551-47568]:SimpleName[47829-47846]"
    }, {
      "left" : "AbstractScopeBuilder",
      "right" : "AbstractScopeBuilder",
      "info" : "SimpleType[47577-47597]:SimpleType[47855-47875]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[47671-47678]:Modifier[47949-47956]"
    }, {
      "left" : "LocalScopeBuilder",
      "right" : "LocalScopeBuilder",
      "info" : "SimpleName[47679-47696]:SimpleName[47957-47974]"
    }, {
      "left" : "Scope scope",
      "right" : "Scope scope",
      "info" : "SingleVariableDeclaration[47697-47708]:SingleVariableDeclaration[47975-47986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47710-47737]:Block[47988-48015]"
    }, {
      "left" : "super(scope);",
      "right" : "super(scope);",
      "info" : "SuperConstructorInvocation[47718-47731]:SuperConstructorInvocation[47996-48009]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47804-47808]:PrimitiveType[48082-48086]"
    }, {
      "left" : "build",
      "right" : "build",
      "info" : "SimpleName[47809-47814]:SimpleName[48087-48092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47817-47891]:Block[48095-48169]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "right" : "NodeTraversal.traverse(compiler, scope.getRootNode(), this);",
      "info" : "ExpressionStatement[47825-47885]:ExpressionStatement[48103-48163]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[48155-48164]:MarkerAnnotation[48433-48442]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48165-48171]:Modifier[48443-48449]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48172-48176]:PrimitiveType[48450-48454]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[48177-48182]:SimpleName[48455-48460]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[48183-48198]:SingleVariableDeclaration[48461-48476]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[48200-48206]:SingleVariableDeclaration[48478-48484]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[48208-48219]:SingleVariableDeclaration[48486-48497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48221-48749]:Block[48499-49027]"
    }, {
      "left" : "if (n == scope.getRootNode())",
      "right" : "if (n == scope.getRootNode())",
      "info" : "IfStatement[48229-48266]:IfStatement[48507-48544]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48259-48266]:ReturnStatement[48537-48544]"
    }, {
      "left" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "right" : "if (n.getType() == Token.LP && parent == scope.getRootNode())",
      "info" : "IfStatement[48274-48399]:IfStatement[48552-48677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48336-48399]:Block[48614-48677]"
    }, {
      "left" : "handleFunctionInputs(parent);",
      "right" : "handleFunctionInputs(parent);",
      "info" : "ExpressionStatement[48346-48375]:ExpressionStatement[48624-48653]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48384-48391]:ReturnStatement[48662-48669]"
    }, {
      "left" : "switch (n.getType()) {\n        case Token.FUNCTION:\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.CATCH:\n        case Token.VAR:\n          define(n, parent);\n          break;\n      }",
      "right" : "switch (n.getType()) {\n        case Token.FUNCTION:\n          // VARs and ASSIGNs are handled separately.\n          if (parent.getType() == Token.NAME) {\n            return;\n          }\n          define(n, parent);\n          break;\n\n        case Token.CATCH:\n        case Token.VAR:\n          define(n, parent);\n          break;\n      }",
      "info" : "SwitchStatement[48407-48743]:SwitchStatement[48685-49021]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[48438-48458]:SwitchCase[48716-48736]"
    }, {
      "left" : "if (parent.getType() == Token.NAME)",
      "right" : "if (parent.getType() == Token.NAME)",
      "info" : "IfStatement[48523-48592]:IfStatement[48801-48870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48559-48592]:Block[48837-48870]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[48573-48580]:ReturnStatement[48851-48858]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[48603-48621]:ExpressionStatement[48881-48899]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48632-48638]:BreakStatement[48910-48916]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[48648-48665]:SwitchCase[48926-48943]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[48674-48689]:SwitchCase[48952-48967]"
    }, {
      "left" : "define(n, parent);",
      "right" : "define(n, parent);",
      "info" : "ExpressionStatement[48700-48718]:ExpressionStatement[48978-48996]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48729-48735]:BreakStatement[49007-49013]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[48817-48824]:Modifier[49095-49102]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48825-48829]:PrimitiveType[49103-49107]"
    }, {
      "left" : "handleFunctionInputs",
      "right" : "handleFunctionInputs",
      "info" : "SimpleName[48830-48850]:SimpleName[49108-49128]"
    }, {
      "left" : "Node fnNode",
      "right" : "Node fnNode",
      "info" : "SingleVariableDeclaration[48851-48862]:SingleVariableDeclaration[49129-49140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48864-49620]:Block[49142-49898]"
    }, {
      "left" : "Node fnNameNode = fnNode.getFirstChild();",
      "right" : "Node fnNameNode = fnNode.getFirstChild();",
      "info" : "VariableDeclarationStatement[48908-48949]:VariableDeclarationStatement[49186-49227]"
    }, {
      "left" : "String fnName = fnNameNode.getString();",
      "right" : "String fnName = fnNameNode.getString();",
      "info" : "VariableDeclarationStatement[48956-48995]:VariableDeclarationStatement[49234-49273]"
    }, {
      "left" : "if (!fnName.isEmpty())",
      "right" : "if (!fnName.isEmpty())",
      "info" : "IfStatement[49002-49581]:IfStatement[49280-49859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49025-49581]:Block[49303-49859]"
    }, {
      "left" : "Scope.Var fnVar = scope.getVar(fnName);",
      "right" : "Scope.Var fnVar = scope.getVar(fnName);",
      "info" : "VariableDeclarationStatement[49035-49074]:VariableDeclarationStatement[49313-49352]"
    }, {
      "left" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "right" : "if (fnVar == null ||\n            // Make sure we're not touching a native function. Native\n            // functions aren't bleeding, but may not have a declaration\n            // node.\n            (fnVar.getNameNode() != null &&\n                // Make sure that the function is actually bleeding by checking\n                // if has already been declared.\n                fnVar.getInitialValue() != fnNode))",
      "info" : "IfStatement[49083-49573]:IfStatement[49361-49851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49493-49573]:Block[49771-49851]"
    }, {
      "left" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "right" : "defineSlot(fnNameNode, fnNode, fnNode.getJSType(), false);",
      "info" : "ExpressionStatement[49505-49563]:ExpressionStatement[49783-49841]"
    }, {
      "left" : "declareArguments(fnNode);",
      "right" : "declareArguments(fnNode);",
      "info" : "ExpressionStatement[49589-49614]:ExpressionStatement[49867-49892]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[49689-49696]:Modifier[49967-49974]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49697-49701]:PrimitiveType[49975-49979]"
    }, {
      "left" : "declareArguments",
      "right" : "declareArguments",
      "info" : "SimpleName[49702-49718]:SimpleName[49980-49996]"
    }, {
      "left" : "Node functionNode",
      "right" : "Node functionNode",
      "info" : "SingleVariableDeclaration[49719-49736]:SingleVariableDeclaration[49997-50014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49738-50532]:Block[50016-50810]"
    }, {
      "left" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "right" : "Node astParameters = functionNode.getFirstChild().getNext();",
      "info" : "VariableDeclarationStatement[49746-49806]:VariableDeclarationStatement[50024-50084]"
    }, {
      "left" : "Node body = astParameters.getNext();",
      "right" : "Node body = astParameters.getNext();",
      "info" : "VariableDeclarationStatement[49813-49849]:VariableDeclarationStatement[50091-50127]"
    }, {
      "left" : "FunctionType functionType = (FunctionType) functionNode.getJSType();",
      "right" : "FunctionType functionType = (FunctionType) functionNode.getJSType();",
      "info" : "VariableDeclarationStatement[49856-49924]:VariableDeclarationStatement[50134-50202]"
    }, {
      "left" : "if (functionType != null)",
      "right" : "if (functionType != null)",
      "info" : "IfStatement[49931-50526]:IfStatement[50209-50804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49957-50526]:Block[50235-50804]"
    }, {
      "left" : "Node jsDocParameters = functionType.getParametersNode();",
      "right" : "Node jsDocParameters = functionType.getParametersNode();",
      "info" : "VariableDeclarationStatement[49967-50023]:VariableDeclarationStatement[50245-50301]"
    }, {
      "left" : "if (jsDocParameters != null)",
      "right" : "if (jsDocParameters != null)",
      "info" : "IfStatement[50032-50518]:IfStatement[50310-50796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50061-50518]:Block[50339-50796]"
    }, {
      "left" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "right" : "Node jsDocParameter = jsDocParameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[50073-50127]:VariableDeclarationStatement[50351-50405]"
    }, {
      "left" : "for (Node astParameter : astParameters.children())",
      "right" : "for (Node astParameter : astParameters.children())",
      "info" : "EnhancedForStatement[50138-50508]:EnhancedForStatement[50416-50786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50189-50508]:Block[50467-50786]"
    }, {
      "left" : "if (jsDocParameter != null)",
      "right" : "if (jsDocParameter != null)",
      "info" : "IfStatement[50203-50496]:IfStatement[50481-50774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50231-50409]:Block[50509-50687]"
    }, {
      "left" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);",
      "right" : "defineSlot(astParameter, functionNode,\n                  jsDocParameter.getJSType(), true);",
      "info" : "ExpressionStatement[50247-50338]:ExpressionStatement[50525-50616]"
    }, {
      "left" : "jsDocParameter = jsDocParameter.getNext();",
      "right" : "jsDocParameter = jsDocParameter.getNext();",
      "info" : "ExpressionStatement[50353-50395]:ExpressionStatement[50631-50673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50415-50496]:Block[50693-50774]"
    }, {
      "left" : "defineSlot(astParameter, functionNode, null, true);",
      "right" : "defineSlot(astParameter, functionNode, null, true);",
      "info" : "ExpressionStatement[50431-50482]:ExpressionStatement[50709-50760]"
    } ]
  },
  "interFileMappings" : { }
}