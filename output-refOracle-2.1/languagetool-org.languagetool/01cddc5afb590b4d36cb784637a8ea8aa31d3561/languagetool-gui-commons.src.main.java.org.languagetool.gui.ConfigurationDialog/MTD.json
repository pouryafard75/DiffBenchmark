{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ConfigurationDialog",
      "right" : "ConfigurationDialog",
      "info" : "TypeDeclaration[1516-18477]:TypeDeclaration[1558-19005]"
    }, {
      "left" : "private static final String NO_MOTHER_TONGUE = \"---\";",
      "right" : "private static final String NO_MOTHER_TONGUE = \"---\";",
      "info" : "FieldDeclaration[1704-1757]:FieldDeclaration[1746-1799]"
    }, {
      "left" : "private static final int MAX_PORT = 65536;",
      "right" : "private static final int MAX_PORT = 65536;",
      "info" : "FieldDeclaration[1760-1802]:FieldDeclaration[1802-1844]"
    }, {
      "left" : "private final ResourceBundle messages;",
      "right" : "private final ResourceBundle messages;",
      "info" : "FieldDeclaration[1806-1844]:FieldDeclaration[1848-1886]"
    }, {
      "left" : "private final Configuration original;",
      "right" : "private final Configuration original;",
      "info" : "FieldDeclaration[1847-1884]:FieldDeclaration[1889-1926]"
    }, {
      "left" : "private final Configuration config;",
      "right" : "private final Configuration config;",
      "info" : "FieldDeclaration[1887-1922]:FieldDeclaration[1929-1964]"
    }, {
      "left" : "private final Frame owner;",
      "right" : "private final Frame owner;",
      "info" : "FieldDeclaration[1925-1951]:FieldDeclaration[1967-1993]"
    }, {
      "left" : "private final boolean insideOffice;",
      "right" : "private final boolean insideOffice;",
      "info" : "FieldDeclaration[1954-1989]:FieldDeclaration[1996-2031]"
    }, {
      "left" : "private JButton okButton;",
      "right" : "private JButton okButton;",
      "info" : "FieldDeclaration[1993-2018]:FieldDeclaration[2035-2060]"
    }, {
      "left" : "private JButton cancelButton;",
      "right" : "private JButton cancelButton;",
      "info" : "FieldDeclaration[2021-2050]:FieldDeclaration[2063-2092]"
    }, {
      "left" : "private JDialog dialog;",
      "right" : "private JDialog dialog;",
      "info" : "FieldDeclaration[2053-2076]:FieldDeclaration[2095-2118]"
    }, {
      "left" : "private JComboBox<String> motherTongueBox;",
      "right" : "private JComboBox<String> motherTongueBox;",
      "info" : "FieldDeclaration[2079-2121]:FieldDeclaration[2121-2163]"
    }, {
      "left" : "private JCheckBox serverCheckbox;",
      "right" : "private JCheckBox serverCheckbox;",
      "info" : "FieldDeclaration[2124-2157]:FieldDeclaration[2166-2199]"
    }, {
      "left" : "private JTextField serverPortField;",
      "right" : "private JTextField serverPortField;",
      "info" : "FieldDeclaration[2160-2195]:FieldDeclaration[2202-2237]"
    }, {
      "left" : "private JTree configTree;",
      "right" : "private JTree configTree;",
      "info" : "FieldDeclaration[2198-2223]:FieldDeclaration[2240-2265]"
    }, {
      "left" : "private JCheckBox serverSettingsCheckbox;",
      "right" : "private JCheckBox serverSettingsCheckbox;",
      "info" : "FieldDeclaration[2226-2267]:FieldDeclaration[2268-2309]"
    }, {
      "left" : "public ConfigurationDialog(Frame owner, boolean insideOffice, Configuration config)",
      "right" : "public ConfigurationDialog(Frame owner, boolean insideOffice, Configuration config)",
      "info" : "MethodDeclaration[2271-2542]:MethodDeclaration[2313-2584]"
    }, {
      "left" : "private DefaultMutableTreeNode createTree(List<Rule> rules)",
      "right" : "private DefaultMutableTreeNode createTree(List<Rule> rules)",
      "info" : "MethodDeclaration[2546-3518]:MethodDeclaration[2588-3560]"
    }, {
      "left" : "private boolean getState(Rule rule)",
      "right" : "private boolean getState(Rule rule)",
      "info" : "MethodDeclaration[3522-4127]:MethodDeclaration[3564-4169]"
    }, {
      "left" : "public void show(List<Rule> rules)",
      "right" : "private JPanel getMotherTonguePanel(GridBagConstraints cons)",
      "info" : "MethodDeclaration[4131-16750]:MethodDeclaration[16214-17278]"
    }, {
      "left" : "public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent actionEvent)",
      "right" : "public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent actionEvent)",
      "info" : "MethodDeclaration[4597-4737]:MethodDeclaration[4582-4722]"
    }, {
      "left" : "public void treeNodesChanged(TreeModelEvent e)",
      "right" : "public void treeNodesChanged(TreeModelEvent e)",
      "info" : "MethodDeclaration[5417-6600]:MethodDeclaration[11039-12222]"
    }, {
      "left" : "public void treeNodesInserted(TreeModelEvent e)",
      "right" : "public void treeNodesInserted(TreeModelEvent e)",
      "info" : "MethodDeclaration[6608-6681]:MethodDeclaration[12229-12295]"
    }, {
      "left" : "public void treeNodesRemoved(TreeModelEvent e)",
      "right" : "public void treeNodesRemoved(TreeModelEvent e)",
      "info" : "MethodDeclaration[6689-6761]:MethodDeclaration[12302-12367]"
    }, {
      "left" : "public void treeStructureChanged(TreeModelEvent e)",
      "right" : "public void treeStructureChanged(TreeModelEvent e)",
      "info" : "MethodDeclaration[6769-6845]:MethodDeclaration[12374-12443]"
    }, {
      "left" : "private void handlePopupEvent(MouseEvent e)",
      "right" : "private void handlePopupEvent(MouseEvent e)",
      "info" : "MethodDeclaration[7403-9082]:MethodDeclaration[12573-14328]"
    }, {
      "left" : "public void actionPerformed(ActionEvent actionEvent)",
      "right" : "public void actionPerformed(ActionEvent actionEvent)",
      "info" : "MethodDeclaration[8352-8962]:MethodDeclaration[13566-14198]"
    }, {
      "left" : "public void mousePressed(MouseEvent e)",
      "right" : "public void mousePressed(MouseEvent e)",
      "info" : "MethodDeclaration[9090-9229]:MethodDeclaration[14340-14489]"
    }, {
      "left" : "public void mouseReleased(MouseEvent e)",
      "right" : "public void mouseReleased(MouseEvent e)",
      "info" : "MethodDeclaration[9237-9377]:MethodDeclaration[14501-14651]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[9749-10164]:MethodDeclaration[15073-15488]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[10423-10846]:MethodDeclaration[15747-16170]"
    }, {
      "left" : "public void itemStateChanged(ItemEvent e)",
      "right" : "public void itemStateChanged(ItemEvent e)",
      "info" : "MethodDeclaration[11265-11754]:MethodDeclaration[16697-17186]"
    }, {
      "left" : "public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent e)",
      "right" : "public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent e)",
      "info" : "MethodDeclaration[12509-12750]:MethodDeclaration[8631-8864]"
    }, {
      "left" : "public void itemStateChanged(ItemEvent e)",
      "right" : "public void itemStateChanged(ItemEvent e)",
      "info" : "MethodDeclaration[12828-12959]:MethodDeclaration[8935-9060]"
    }, {
      "left" : "public void insertUpdate(DocumentEvent e)",
      "right" : "public void insertUpdate(DocumentEvent e)",
      "info" : "MethodDeclaration[13494-13593]:MethodDeclaration[9577-9670]"
    }, {
      "left" : "public void removeUpdate(DocumentEvent e)",
      "right" : "public void removeUpdate(DocumentEvent e)",
      "info" : "MethodDeclaration[13603-13702]:MethodDeclaration[9678-9771]"
    }, {
      "left" : "public void changedUpdate(DocumentEvent e)",
      "right" : "public void changedUpdate(DocumentEvent e)",
      "info" : "MethodDeclaration[13712-14237]:MethodDeclaration[9779-10278]"
    }, {
      "left" : "public void itemStateChanged(ItemEvent e)",
      "right" : "public void itemStateChanged(ItemEvent e)",
      "info" : "MethodDeclaration[14614-14756]:MethodDeclaration[10622-10758]"
    }, {
      "left" : "private String[] getPossibleMotherTongues()",
      "right" : "private String[] getPossibleMotherTongues()",
      "info" : "MethodDeclaration[16754-17084]:MethodDeclaration[17282-17612]"
    }, {
      "left" : "public void actionPerformed(ActionEvent e)",
      "right" : "public void actionPerformed(ActionEvent e)",
      "info" : "MethodDeclaration[17088-17379]:MethodDeclaration[17616-17907]"
    }, {
      "left" : "private Language getLanguageForLocalizedName(final String languageName)",
      "right" : "private Language getLanguageForLocalizedName(final String languageName)",
      "info" : "MethodDeclaration[17383-17919]:MethodDeclaration[17911-18447]"
    }, {
      "left" : "CategoryComparator",
      "right" : "CategoryComparator",
      "info" : "TypeDeclaration[17923-18474]:TypeDeclaration[18451-19002]"
    }, {
      "left" : "public int compare(final Rule r1, final Rule r2)",
      "right" : "public int compare(final Rule r1, final Rule r2)",
      "info" : "MethodDeclaration[17990-18469]:MethodDeclaration[18518-18997]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2355-2542]:Block[2397-2584]"
    }, {
      "left" : "this.owner = owner;",
      "right" : "this.owner = owner;",
      "info" : "ExpressionStatement[2361-2380]:ExpressionStatement[2403-2422]"
    }, {
      "left" : "this.insideOffice = insideOffice;",
      "right" : "this.insideOffice = insideOffice;",
      "info" : "ExpressionStatement[2385-2418]:ExpressionStatement[2427-2460]"
    }, {
      "left" : "this.original = config;",
      "right" : "this.original = config;",
      "info" : "ExpressionStatement[2423-2446]:ExpressionStatement[2465-2488]"
    }, {
      "left" : "this.config = original.copy(original);",
      "right" : "this.config = original.copy(original);",
      "info" : "ExpressionStatement[2451-2489]:ExpressionStatement[2493-2531]"
    }, {
      "left" : "messages = JLanguageTool.getMessageBundle();",
      "right" : "messages = JLanguageTool.getMessageBundle();",
      "info" : "ExpressionStatement[2494-2538]:ExpressionStatement[2536-2580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2606-3518]:Block[2648-3560]"
    }, {
      "left" : "DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"Rules\");",
      "right" : "DefaultMutableTreeNode root = new DefaultMutableTreeNode(\"Rules\");",
      "info" : "VariableDeclarationStatement[2612-2678]:VariableDeclarationStatement[2654-2720]"
    }, {
      "left" : "String lastRuleId = null;",
      "right" : "String lastRuleId = null;",
      "info" : "VariableDeclarationStatement[2683-2708]:VariableDeclarationStatement[2725-2750]"
    }, {
      "left" : "Map<String, DefaultMutableTreeNode> parents = new TreeMap<>();",
      "right" : "Map<String, DefaultMutableTreeNode> parents = new TreeMap<>();",
      "info" : "VariableDeclarationStatement[2713-2775]:VariableDeclarationStatement[2755-2817]"
    }, {
      "left" : "for (final Rule rule : rules)",
      "right" : "for (final Rule rule : rules)",
      "info" : "EnhancedForStatement[2780-3497]:EnhancedForStatement[2822-3539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2810-3497]:Block[2852-3539]"
    }, {
      "left" : "if (!parents.containsKey(rule.getCategory().getName()))",
      "right" : "if (!parents.containsKey(rule.getCategory().getName()))",
      "info" : "IfStatement[2818-3275]:IfStatement[2860-3317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2874-3275]:Block[2916-3317]"
    }, {
      "left" : "boolean enabled = true;",
      "right" : "boolean enabled = true;",
      "info" : "VariableDeclarationStatement[2884-2907]:VariableDeclarationStatement[2926-2949]"
    }, {
      "left" : "if (config.getDisabledCategoryNames() != null && config.getDisabledCategoryNames().contains(rule.getCategory().getName()))",
      "right" : "if (config.getDisabledCategoryNames() != null && config.getDisabledCategoryNames().contains(rule.getCategory().getName()))",
      "info" : "IfStatement[2916-3077]:IfStatement[2958-3119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3039-3077]:Block[3081-3119]"
    }, {
      "left" : "enabled = false;",
      "right" : "enabled = false;",
      "info" : "ExpressionStatement[3051-3067]:ExpressionStatement[3093-3109]"
    }, {
      "left" : "DefaultMutableTreeNode categoryNode = new CategoryNode(rule.getCategory(), enabled);",
      "right" : "DefaultMutableTreeNode categoryNode = new CategoryNode(rule.getCategory(), enabled);",
      "info" : "VariableDeclarationStatement[3086-3170]:VariableDeclarationStatement[3128-3212]"
    }, {
      "left" : "root.add(categoryNode);",
      "right" : "root.add(categoryNode);",
      "info" : "ExpressionStatement[3179-3202]:ExpressionStatement[3221-3244]"
    }, {
      "left" : "parents.put(rule.getCategory().getName(), categoryNode);",
      "right" : "parents.put(rule.getCategory().getName(), categoryNode);",
      "info" : "ExpressionStatement[3211-3267]:ExpressionStatement[3253-3309]"
    }, {
      "left" : "if (!rule.getId().equals(lastRuleId))",
      "right" : "if (!rule.getId().equals(lastRuleId))",
      "info" : "IfStatement[3282-3458]:IfStatement[3324-3500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3320-3458]:Block[3362-3500]"
    }, {
      "left" : "RuleNode ruleNode = new RuleNode(rule, getState(rule));",
      "right" : "RuleNode ruleNode = new RuleNode(rule, getState(rule));",
      "info" : "VariableDeclarationStatement[3330-3385]:VariableDeclarationStatement[3372-3427]"
    }, {
      "left" : "parents.get(rule.getCategory().getName()).add(ruleNode);",
      "right" : "parents.get(rule.getCategory().getName()).add(ruleNode);",
      "info" : "ExpressionStatement[3394-3450]:ExpressionStatement[3436-3492]"
    }, {
      "left" : "lastRuleId = rule.getId();",
      "right" : "lastRuleId = rule.getId();",
      "info" : "ExpressionStatement[3465-3491]:ExpressionStatement[3507-3533]"
    }, {
      "left" : "return root;",
      "right" : "return root;",
      "info" : "ReturnStatement[3502-3514]:ReturnStatement[3544-3556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3558-4127]:Block[3600-4169]"
    }, {
      "left" : "boolean ret = true;",
      "right" : "boolean ret = true;",
      "info" : "VariableDeclarationStatement[3564-3583]:VariableDeclarationStatement[3606-3625]"
    }, {
      "left" : "if (config.getDisabledRuleIds().contains(rule.getId()))",
      "right" : "if (config.getDisabledRuleIds().contains(rule.getId()))",
      "info" : "IfStatement[3589-3671]:IfStatement[3631-3713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3645-3671]:Block[3687-3713]"
    }, {
      "left" : "ret = false;",
      "right" : "ret = false;",
      "info" : "ExpressionStatement[3653-3665]:ExpressionStatement[3695-3707]"
    }, {
      "left" : "if (config.getDisabledCategoryNames().contains(rule.getCategory().getName()))",
      "right" : "if (config.getDisabledCategoryNames().contains(rule.getCategory().getName()))",
      "info" : "IfStatement[3676-3780]:IfStatement[3718-3822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3754-3780]:Block[3796-3822]"
    }, {
      "left" : "ret = false;",
      "right" : "ret = false;",
      "info" : "ExpressionStatement[3762-3774]:ExpressionStatement[3804-3816]"
    }, {
      "left" : "if (rule.isDefaultOff() && !config.getEnabledRuleIds().contains(rule.getId()))",
      "right" : "if (rule.isDefaultOff() && !config.getEnabledRuleIds().contains(rule.getId()))",
      "info" : "IfStatement[3785-3890]:IfStatement[3827-3932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3864-3890]:Block[3906-3932]"
    }, {
      "left" : "ret = false;",
      "right" : "ret = false;",
      "info" : "ExpressionStatement[3872-3884]:ExpressionStatement[3914-3926]"
    }, {
      "left" : "if (rule.isDefaultOff() && rule.getCategory().isDefaultOff()\n            && config.getEnabledRuleIds().contains(rule.getId()))",
      "right" : "if (rule.isDefaultOff() && rule.getCategory().isDefaultOff()\n            && config.getEnabledRuleIds().contains(rule.getId()))",
      "info" : "IfStatement[3895-4107]:IfStatement[3937-4149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4022-4107]:Block[4064-4149]"
    }, {
      "left" : "config.getDisabledCategoryNames().remove(rule.getCategory().getName());",
      "right" : "config.getDisabledCategoryNames().remove(rule.getCategory().getName());",
      "info" : "ExpressionStatement[4030-4101]:ExpressionStatement[4072-4143]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[4112-4123]:ReturnStatement[4154-4165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4166-16750]:Block[16286-17278]"
    }, {
      "left" : "if (original != null)",
      "right" : "if (original != null)",
      "info" : "IfStatement[4172-4238]:IfStatement[4214-4280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4194-4238]:Block[4236-4280]"
    }, {
      "left" : "config.restoreState(original);",
      "right" : "config.restoreState(original);",
      "info" : "ExpressionStatement[4202-4232]:ExpressionStatement[4244-4274]"
    }, {
      "left" : "dialog = new JDialog(owner, true);",
      "right" : "dialog = new JDialog(owner, true);",
      "info" : "ExpressionStatement[4243-4277]:ExpressionStatement[4285-4319]"
    }, {
      "left" : "dialog.setTitle(messages.getString(\"guiConfigWindowTitle\"));",
      "right" : "dialog.setTitle(messages.getString(\"guiConfigWindowTitle\"));",
      "info" : "ExpressionStatement[4282-4342]:ExpressionStatement[4324-4384]"
    }, {
      "left" : "Collections.sort(rules, new CategoryComparator());",
      "right" : "Collections.sort(rules, new CategoryComparator());",
      "info" : "ExpressionStatement[4348-4398]:ExpressionStatement[5202-5252]"
    }, {
      "left" : "final KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);",
      "right" : "final KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);",
      "info" : "VariableDeclarationStatement[4454-4525]:VariableDeclarationStatement[4439-4510]"
    }, {
      "left" : "final ActionListener actionListener = new ActionListener() {\n      @Override\n      public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent actionEvent) {\n        dialog.setVisible(false);\n      }\n    };",
      "right" : "final ActionListener actionListener = new ActionListener() {\n      @Override\n      public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent actionEvent) {\n        dialog.setVisible(false);\n      }\n    };",
      "info" : "VariableDeclarationStatement[4530-4744]:VariableDeclarationStatement[4515-4729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4694-4737]:Block[4679-4722]"
    }, {
      "left" : "dialog.setVisible(false);",
      "right" : "dialog.setVisible(false);",
      "info" : "ExpressionStatement[4704-4729]:ExpressionStatement[4689-4714]"
    }, {
      "left" : "final JRootPane rootPane = dialog.getRootPane();",
      "right" : "final JRootPane rootPane = dialog.getRootPane();",
      "info" : "VariableDeclarationStatement[4749-4797]:VariableDeclarationStatement[4734-4782]"
    }, {
      "left" : "rootPane.registerKeyboardAction(actionListener, stroke,\n        JComponent.WHEN_IN_FOCUSED_WINDOW);",
      "right" : "rootPane.registerKeyboardAction(actionListener, stroke,\n        JComponent.WHEN_IN_FOCUSED_WINDOW);",
      "info" : "ExpressionStatement[4802-4901]:ExpressionStatement[4787-4886]"
    }, {
      "left" : "final JPanel checkBoxPanel = new JPanel();",
      "right" : "final JPanel checkBoxPanel = new JPanel();",
      "info" : "VariableDeclarationStatement[4921-4963]:VariableDeclarationStatement[4892-4934]"
    }, {
      "left" : "checkBoxPanel.setLayout(new GridBagLayout());",
      "right" : "checkBoxPanel.setLayout(new GridBagLayout());",
      "info" : "ExpressionStatement[4968-5013]:ExpressionStatement[4939-4984]"
    }, {
      "left" : "GridBagConstraints cons = new GridBagConstraints();",
      "right" : "GridBagConstraints cons = new GridBagConstraints();",
      "info" : "VariableDeclarationStatement[5018-5069]:VariableDeclarationStatement[4989-5040]"
    }, {
      "left" : "cons.anchor = GridBagConstraints.NORTHWEST;",
      "right" : "cons.anchor = GridBagConstraints.NORTHWEST;",
      "info" : "ExpressionStatement[5074-5117]:ExpressionStatement[5045-5088]"
    }, {
      "left" : "cons.gridx = 0;",
      "right" : "cons.gridx = 0;",
      "info" : "ExpressionStatement[5122-5137]:ExpressionStatement[5093-5108]"
    }, {
      "left" : "cons.weightx = 1.0;",
      "right" : "cons.weightx = 1.0;",
      "info" : "ExpressionStatement[5142-5161]:ExpressionStatement[5113-5132]"
    }, {
      "left" : "cons.weighty = 1.0;",
      "right" : "cons.weighty = 1.0;",
      "info" : "ExpressionStatement[5166-5185]:ExpressionStatement[5137-5156]"
    }, {
      "left" : "cons.fill = GridBagConstraints.BOTH;",
      "right" : "cons.fill = GridBagConstraints.BOTH;",
      "info" : "ExpressionStatement[5190-5226]:ExpressionStatement[5161-5197]"
    }, {
      "left" : "DefaultMutableTreeNode rootNode = createTree(rules);",
      "right" : "DefaultMutableTreeNode rootNode = createTree(rules);",
      "info" : "VariableDeclarationStatement[5231-5283]:VariableDeclarationStatement[5257-5309]"
    }, {
      "left" : "DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);",
      "right" : "DefaultTreeModel treeModel = new DefaultTreeModel(rootNode);",
      "info" : "VariableDeclarationStatement[5288-5348]:VariableDeclarationStatement[10911-10971]"
    }, {
      "left" : "treeModel.addTreeModelListener(new TreeModelListener() {\n\n      @Override\n      public void treeNodesChanged(TreeModelEvent e) {\n        DefaultMutableTreeNode node = (DefaultMutableTreeNode) e.getTreePath().getLastPathComponent();\n        int index = e.getChildIndices()[0];\n        node = (DefaultMutableTreeNode) node.getChildAt(index);\n        if (node instanceof RuleNode) {\n          RuleNode o = (RuleNode) node;\n          if (o.getRule().isDefaultOff()) {\n            if (o.isEnabled()) {\n              config.getEnabledRuleIds().add(o.getRule().getId());\n            } else {\n              config.getEnabledRuleIds().remove(o.getRule().getId());\n            }\n          } else {\n            if (o.isEnabled()) {\n              config.getDisabledRuleIds().remove(o.getRule().getId());\n            } else {\n              config.getDisabledRuleIds().add(o.getRule().getId());\n            }\n          }\n        }\n        if (node instanceof CategoryNode) {\n          CategoryNode o = (CategoryNode) node;\n          if (o.isEnabled()) {\n            config.getDisabledCategoryNames().remove(o.getCategory().getName());\n          } else {\n            config.getDisabledCategoryNames().add(o.getCategory().getName());\n          }\n        }\n      }\n\n      @Override\n      public void treeNodesInserted(TreeModelEvent e) {\n      }\n\n      @Override\n      public void treeNodesRemoved(TreeModelEvent e) {\n      }\n\n      @Override\n      public void treeStructureChanged(TreeModelEvent e) {\n      }\n    });",
      "right" : "treeModel.addTreeModelListener(new TreeModelListener() {\n      @Override\n      public void treeNodesChanged(TreeModelEvent e) {\n        DefaultMutableTreeNode node = (DefaultMutableTreeNode) e.getTreePath().getLastPathComponent();\n        int index = e.getChildIndices()[0];\n        node = (DefaultMutableTreeNode) node.getChildAt(index);\n        if (node instanceof RuleNode) {\n          RuleNode o = (RuleNode) node;\n          if (o.getRule().isDefaultOff()) {\n            if (o.isEnabled()) {\n              config.getEnabledRuleIds().add(o.getRule().getId());\n            } else {\n              config.getEnabledRuleIds().remove(o.getRule().getId());\n            }\n          } else {\n            if (o.isEnabled()) {\n              config.getDisabledRuleIds().remove(o.getRule().getId());\n            } else {\n              config.getDisabledRuleIds().add(o.getRule().getId());\n            }\n          }\n        }\n        if (node instanceof CategoryNode) {\n          CategoryNode o = (CategoryNode) node;\n          if (o.isEnabled()) {\n            config.getDisabledCategoryNames().remove(o.getCategory().getName());\n          } else {\n            config.getDisabledCategoryNames().add(o.getCategory().getName());\n          }\n        }\n      }\n      @Override\n      public void treeNodesInserted(TreeModelEvent e) {}\n      @Override\n      public void treeNodesRemoved(TreeModelEvent e) {}\n      @Override\n      public void treeStructureChanged(TreeModelEvent e) {}\n    });",
      "info" : "ExpressionStatement[5353-6853]:ExpressionStatement[10976-12451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5480-6600]:Block[11102-12222]"
    }, {
      "left" : "DefaultMutableTreeNode node = (DefaultMutableTreeNode) e.getTreePath().getLastPathComponent();",
      "right" : "DefaultMutableTreeNode node = (DefaultMutableTreeNode) e.getTreePath().getLastPathComponent();",
      "info" : "VariableDeclarationStatement[5490-5584]:VariableDeclarationStatement[11112-11206]"
    }, {
      "left" : "int index = e.getChildIndices()[0];",
      "right" : "int index = e.getChildIndices()[0];",
      "info" : "VariableDeclarationStatement[5593-5628]:VariableDeclarationStatement[11215-11250]"
    }, {
      "left" : "node = (DefaultMutableTreeNode) node.getChildAt(index);",
      "right" : "node = (DefaultMutableTreeNode) node.getChildAt(index);",
      "info" : "ExpressionStatement[5637-5692]:ExpressionStatement[11259-11314]"
    }, {
      "left" : "if (node instanceof RuleNode)",
      "right" : "if (node instanceof RuleNode)",
      "info" : "IfStatement[5701-6269]:IfStatement[11323-11891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5731-6269]:Block[11353-11891]"
    }, {
      "left" : "RuleNode o = (RuleNode) node;",
      "right" : "RuleNode o = (RuleNode) node;",
      "info" : "VariableDeclarationStatement[5743-5772]:VariableDeclarationStatement[11365-11394]"
    }, {
      "left" : "if (o.getRule().isDefaultOff())",
      "right" : "if (o.getRule().isDefaultOff())",
      "info" : "IfStatement[5783-6259]:IfStatement[11405-11881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5815-6033]:Block[11437-11655]"
    }, {
      "left" : "if (o.isEnabled())",
      "right" : "if (o.isEnabled())",
      "info" : "IfStatement[5829-6021]:IfStatement[11451-11643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5848-5930]:Block[11470-11552]"
    }, {
      "left" : "config.getEnabledRuleIds().add(o.getRule().getId());",
      "right" : "config.getEnabledRuleIds().add(o.getRule().getId());",
      "info" : "ExpressionStatement[5864-5916]:ExpressionStatement[11486-11538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5936-6021]:Block[11558-11643]"
    }, {
      "left" : "config.getEnabledRuleIds().remove(o.getRule().getId());",
      "right" : "config.getEnabledRuleIds().remove(o.getRule().getId());",
      "info" : "ExpressionStatement[5952-6007]:ExpressionStatement[11574-11629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6039-6259]:Block[11661-11881]"
    }, {
      "left" : "if (o.isEnabled())",
      "right" : "if (o.isEnabled())",
      "info" : "IfStatement[6053-6247]:IfStatement[11675-11869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6072-6158]:Block[11694-11780]"
    }, {
      "left" : "config.getDisabledRuleIds().remove(o.getRule().getId());",
      "right" : "config.getDisabledRuleIds().remove(o.getRule().getId());",
      "info" : "ExpressionStatement[6088-6144]:ExpressionStatement[11710-11766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6164-6247]:Block[11786-11869]"
    }, {
      "left" : "config.getDisabledRuleIds().add(o.getRule().getId());",
      "right" : "config.getDisabledRuleIds().add(o.getRule().getId());",
      "info" : "ExpressionStatement[6180-6233]:ExpressionStatement[11802-11855]"
    }, {
      "left" : "if (node instanceof CategoryNode)",
      "right" : "if (node instanceof CategoryNode)",
      "info" : "IfStatement[6278-6592]:IfStatement[11900-12214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6312-6592]:Block[11934-12214]"
    }, {
      "left" : "CategoryNode o = (CategoryNode) node;",
      "right" : "CategoryNode o = (CategoryNode) node;",
      "info" : "VariableDeclarationStatement[6324-6361]:VariableDeclarationStatement[11946-11983]"
    }, {
      "left" : "if (o.isEnabled())",
      "right" : "if (o.isEnabled())",
      "info" : "IfStatement[6372-6582]:IfStatement[11994-12204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6391-6485]:Block[12013-12107]"
    }, {
      "left" : "config.getDisabledCategoryNames().remove(o.getCategory().getName());",
      "right" : "config.getDisabledCategoryNames().remove(o.getCategory().getName());",
      "info" : "ExpressionStatement[6405-6473]:ExpressionStatement[12027-12095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6491-6582]:Block[12113-12204]"
    }, {
      "left" : "config.getDisabledCategoryNames().add(o.getCategory().getName());",
      "right" : "config.getDisabledCategoryNames().add(o.getCategory().getName());",
      "info" : "ExpressionStatement[6505-6570]:ExpressionStatement[12127-12192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6672-6681]:Block[12293-12295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6752-6761]:Block[12365-12367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6836-6845]:Block[12441-12443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6958-7031]:Block[10905-12477]"
    }, {
      "left" : "configTree.applyComponentOrientation(\n      ComponentOrientation.getOrientation(lang.getLocale()));",
      "right" : "configTree.applyComponentOrientation(ComponentOrientation.getOrientation(lang.getLocale()));",
      "info" : "ExpressionStatement[7036-7135]:ExpressionStatement[5505-5597]"
    }, {
      "left" : "configTree.setRootVisible(false);",
      "right" : "configTree.setRootVisible(false);",
      "info" : "ExpressionStatement[7141-7174]:ExpressionStatement[5603-5636]"
    }, {
      "left" : "configTree.setEditable(false);",
      "right" : "configTree.setEditable(false);",
      "info" : "ExpressionStatement[7179-7209]:ExpressionStatement[5641-5671]"
    }, {
      "left" : "configTree.setCellRenderer(new CheckBoxTreeCellRenderer());",
      "right" : "configTree.setCellRenderer(new CheckBoxTreeCellRenderer());",
      "info" : "ExpressionStatement[7214-7273]:ExpressionStatement[5676-5735]"
    }, {
      "left" : "TreeListener.install(configTree);",
      "right" : "TreeListener.install(configTree);",
      "info" : "ExpressionStatement[7278-7311]:ExpressionStatement[5740-5773]"
    }, {
      "left" : "checkBoxPanel.add(configTree, cons);",
      "right" : "checkBoxPanel.add(configTree, cons);",
      "info" : "ExpressionStatement[7316-7352]:ExpressionStatement[5778-5814]"
    }, {
      "left" : "MouseAdapter ma = new MouseAdapter() {\n      private void handlePopupEvent(MouseEvent e) {\n        final JTree tree = (JTree) e.getSource();\n\n        TreePath path = tree.getPathForLocation(e.getX(), e.getY());\n        if (path == null) {\n          return;\n        }\n\n        DefaultMutableTreeNode node\n                = (DefaultMutableTreeNode) path.getLastPathComponent();\n\n        TreePath[] paths = tree.getSelectionPaths();\n\n        boolean isSelected = false;\n        if (paths != null) {\n          for (TreePath selectionPath : paths) {\n            if (selectionPath.equals(path)) {\n              isSelected = true;\n            }\n          }\n        }\n        if (!isSelected) {\n          tree.setSelectionPath(path);\n        }\n        if (node.isLeaf()) {\n          JPopupMenu popup = new JPopupMenu();\n          final JMenuItem aboutRuleMenuItem = new JMenuItem(messages.getString(\"guiAboutRuleMenu\"));\n          aboutRuleMenuItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n              RuleNode node = (RuleNode) tree.getSelectionPath().getLastPathComponent();\n              Rule rule = node.getRule();\n              Language lang = config.getLanguage();\n              if(lang == null) {\n                lang = Languages.getLanguageForLocale(Locale.getDefault());\n              }\n              Tools.showRuleInfoDialog(tree, messages.getString(\"guiAboutRuleTitle\"),\n                      rule.getDescription(), rule, messages,\n                      lang.getShortNameWithCountryAndVariant());\n            }\n          });\n          popup.add(aboutRuleMenuItem);\n          popup.show(tree, e.getX(), e.getY());\n        }\n      }\n\n      @Override\n      public void mousePressed(MouseEvent e) {\n        if (e.isPopupTrigger()) {\n          handlePopupEvent(e);\n        }\n      }\n\n      @Override\n      public void mouseReleased(MouseEvent e) {\n        if (e.isPopupTrigger()) {\n          handlePopupEvent(e);\n        }\n      }\n    };",
      "right" : "GridBagConstraints cons;",
      "info" : "VariableDeclarationStatement[7358-9384]:VariableDeclarationStatement[14721-14745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7447-9082]:Block[12617-14328]"
    }, {
      "left" : "final JTree tree = (JTree) e.getSource();",
      "right" : "final JTree tree = (JTree) e.getSource();",
      "info" : "VariableDeclarationStatement[7457-7498]:VariableDeclarationStatement[12629-12670]"
    }, {
      "left" : "TreePath path = tree.getPathForLocation(e.getX(), e.getY());",
      "right" : "TreePath path = tree.getPathForLocation(e.getX(), e.getY());",
      "info" : "VariableDeclarationStatement[7508-7568]:VariableDeclarationStatement[12681-12741]"
    }, {
      "left" : "if (path == null)",
      "right" : "if (path == null)",
      "info" : "IfStatement[7577-7624]:IfStatement[12752-12803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7595-7624]:Block[12770-12803]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7607-7614]:ReturnStatement[12784-12791]"
    }, {
      "left" : "DefaultMutableTreeNode node\n                = (DefaultMutableTreeNode) path.getLastPathComponent();",
      "right" : "DefaultMutableTreeNode node\n                  = (DefaultMutableTreeNode) path.getLastPathComponent();",
      "info" : "VariableDeclarationStatement[7634-7733]:VariableDeclarationStatement[12814-12915]"
    }, {
      "left" : "TreePath[] paths = tree.getSelectionPaths();",
      "right" : "TreePath[] paths = tree.getSelectionPaths();",
      "info" : "VariableDeclarationStatement[7743-7787]:VariableDeclarationStatement[12926-12970]"
    }, {
      "left" : "boolean isSelected = false;",
      "right" : "boolean isSelected = false;",
      "info" : "VariableDeclarationStatement[7797-7824]:VariableDeclarationStatement[12981-13008]"
    }, {
      "left" : "if (paths != null)",
      "right" : "if (paths != null)",
      "info" : "IfStatement[7833-8017]:IfStatement[13019-13215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7852-8017]:Block[13038-13215]"
    }, {
      "left" : "for (TreePath selectionPath : paths)",
      "right" : "for (TreePath selectionPath : paths)",
      "info" : "EnhancedForStatement[7864-8007]:EnhancedForStatement[13052-13203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7901-8007]:Block[13089-13203]"
    }, {
      "left" : "if (selectionPath.equals(path))",
      "right" : "if (selectionPath.equals(path))",
      "info" : "IfStatement[7915-7995]:IfStatement[13105-13189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7947-7995]:Block[13137-13189]"
    }, {
      "left" : "isSelected = true;",
      "right" : "isSelected = true;",
      "info" : "ExpressionStatement[7963-7981]:ExpressionStatement[13155-13173]"
    }, {
      "left" : "if (!isSelected)",
      "right" : "if (!isSelected)",
      "info" : "IfStatement[8026-8093]:IfStatement[13226-13297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8043-8093]:Block[13243-13297]"
    }, {
      "left" : "tree.setSelectionPath(path);",
      "right" : "tree.setSelectionPath(path);",
      "info" : "ExpressionStatement[8055-8083]:ExpressionStatement[13257-13285]"
    }, {
      "left" : "if (node.isLeaf())",
      "right" : "if (node.isLeaf())",
      "info" : "IfStatement[8102-9074]:IfStatement[13308-14318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8121-9074]:Block[13327-14318]"
    }, {
      "left" : "JPopupMenu popup = new JPopupMenu();",
      "right" : "JPopupMenu popup = new JPopupMenu();",
      "info" : "VariableDeclarationStatement[8133-8169]:VariableDeclarationStatement[13341-13377]"
    }, {
      "left" : "final JMenuItem aboutRuleMenuItem = new JMenuItem(messages.getString(\"guiAboutRuleMenu\"));",
      "right" : "final JMenuItem aboutRuleMenuItem = new JMenuItem(messages.getString(\"guiAboutRuleMenu\"));",
      "info" : "VariableDeclarationStatement[8180-8270]:VariableDeclarationStatement[13390-13480]"
    }, {
      "left" : "aboutRuleMenuItem.addActionListener(new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent actionEvent) {\n              RuleNode node = (RuleNode) tree.getSelectionPath().getLastPathComponent();\n              Rule rule = node.getRule();\n              Language lang = config.getLanguage();\n              if(lang == null) {\n                lang = Languages.getLanguageForLocale(Locale.getDefault());\n              }\n              Tools.showRuleInfoDialog(tree, messages.getString(\"guiAboutRuleTitle\"),\n                      rule.getDescription(), rule, messages,\n                      lang.getShortNameWithCountryAndVariant());\n            }\n          });",
      "right" : "aboutRuleMenuItem.addActionListener(new ActionListener() {\n              @Override\n              public void actionPerformed(ActionEvent actionEvent) {\n                RuleNode node = (RuleNode) tree.getSelectionPath().getLastPathComponent();\n                Rule rule = node.getRule();\n                Language lang = config.getLanguage();\n                if(lang == null) {\n                  lang = Languages.getLanguageForLocale(Locale.getDefault());\n                }\n                Tools.showRuleInfoDialog(tree, messages.getString(\"guiAboutRuleTitle\"),\n                        rule.getDescription(), rule, messages,\n                        lang.getShortNameWithCountryAndVariant());\n              }\n            });",
      "info" : "ExpressionStatement[8281-8976]:ExpressionStatement[13493-14214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8427-8962]:Block[13643-14198]"
    }, {
      "left" : "RuleNode node = (RuleNode) tree.getSelectionPath().getLastPathComponent();",
      "right" : "RuleNode node = (RuleNode) tree.getSelectionPath().getLastPathComponent();",
      "info" : "VariableDeclarationStatement[8443-8517]:VariableDeclarationStatement[13661-13735]"
    }, {
      "left" : "Rule rule = node.getRule();",
      "right" : "Rule rule = node.getRule();",
      "info" : "VariableDeclarationStatement[8532-8559]:VariableDeclarationStatement[13752-13779]"
    }, {
      "left" : "Language lang = config.getLanguage();",
      "right" : "Language lang = config.getLanguage();",
      "info" : "VariableDeclarationStatement[8574-8611]:VariableDeclarationStatement[13796-13833]"
    }, {
      "left" : "if(lang == null)",
      "right" : "if(lang == null)",
      "info" : "IfStatement[8626-8736]:IfStatement[13850-13964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8643-8736]:Block[13867-13964]"
    }, {
      "left" : "lang = Languages.getLanguageForLocale(Locale.getDefault());",
      "right" : "lang = Languages.getLanguageForLocale(Locale.getDefault());",
      "info" : "ExpressionStatement[8661-8720]:ExpressionStatement[13887-13946]"
    }, {
      "left" : "Tools.showRuleInfoDialog(tree, messages.getString(\"guiAboutRuleTitle\"),\n                      rule.getDescription(), rule, messages,\n                      lang.getShortNameWithCountryAndVariant());",
      "right" : "Tools.showRuleInfoDialog(tree, messages.getString(\"guiAboutRuleTitle\"),\n                        rule.getDescription(), rule, messages,\n                        lang.getShortNameWithCountryAndVariant());",
      "info" : "ExpressionStatement[8751-8948]:ExpressionStatement[13981-14182]"
    }, {
      "left" : "popup.add(aboutRuleMenuItem);",
      "right" : "popup.add(aboutRuleMenuItem);",
      "info" : "ExpressionStatement[8987-9016]:ExpressionStatement[14227-14256]"
    }, {
      "left" : "popup.show(tree, e.getX(), e.getY());",
      "right" : "popup.show(tree, e.getX(), e.getY());",
      "info" : "ExpressionStatement[9027-9064]:ExpressionStatement[14269-14306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9145-9229]:Block[14397-14489]"
    }, {
      "left" : "if (e.isPopupTrigger())",
      "right" : "if (e.isPopupTrigger())",
      "info" : "IfStatement[9155-9221]:IfStatement[14409-14479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9179-9221]:Block[14433-14479]"
    }, {
      "left" : "handlePopupEvent(e);",
      "right" : "handlePopupEvent(e);",
      "info" : "ExpressionStatement[9191-9211]:ExpressionStatement[14447-14467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9293-9377]:Block[14559-14651]"
    }, {
      "left" : "if (e.isPopupTrigger())",
      "right" : "if (e.isPopupTrigger())",
      "info" : "IfStatement[9303-9369]:IfStatement[14571-14641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9327-9369]:Block[14595-14641]"
    }, {
      "left" : "handlePopupEvent(e);",
      "right" : "handlePopupEvent(e);",
      "info" : "ExpressionStatement[9339-9359]:ExpressionStatement[14609-14629]"
    }, {
      "left" : "final JPanel treeButtonPanel = new JPanel();",
      "right" : "final JPanel treeButtonPanel = new JPanel();",
      "info" : "VariableDeclarationStatement[9426-9470]:VariableDeclarationStatement[14750-14794]"
    }, {
      "left" : "cons = new GridBagConstraints();",
      "right" : "cons = new GridBagConstraints();",
      "info" : "ExpressionStatement[9475-9507]:ExpressionStatement[14799-14831]"
    }, {
      "left" : "cons.gridx = 0;",
      "right" : "cons.gridx = 0;",
      "info" : "ExpressionStatement[9512-9527]:ExpressionStatement[14836-14851]"
    }, {
      "left" : "cons.gridy = 0;",
      "right" : "cons.gridy = 0;",
      "info" : "ExpressionStatement[9532-9547]:ExpressionStatement[14856-14871]"
    }, {
      "left" : "final JButton expandAllButton = new JButton(messages.getString(\"guiExpandAll\"));",
      "right" : "final JButton expandAllButton = new JButton(messages.getString(\"guiExpandAll\"));",
      "info" : "VariableDeclarationStatement[9552-9632]:VariableDeclarationStatement[14876-14956]"
    }, {
      "left" : "treeButtonPanel.add(expandAllButton, cons);",
      "right" : "treeButtonPanel.add(expandAllButton, cons);",
      "info" : "ExpressionStatement[9637-9680]:ExpressionStatement[14961-15004]"
    }, {
      "left" : "expandAllButton.addActionListener(new ActionListener() {\n\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        TreeNode root = (TreeNode) configTree.getModel().getRoot();\n        TreePath parent = new TreePath(root);\n        for (Enumeration cat = root.children(); cat.hasMoreElements();) {\n          TreeNode n = (TreeNode) cat.nextElement();\n          TreePath child = parent.pathByAddingChild(n);\n          configTree.expandPath(child);\n        }\n      }\n    });",
      "right" : "expandAllButton.addActionListener(new ActionListener() {\n\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        TreeNode root = (TreeNode) configTree.getModel().getRoot();\n        TreePath parent = new TreePath(root);\n        for (Enumeration cat = root.children(); cat.hasMoreElements();) {\n          TreeNode n = (TreeNode) cat.nextElement();\n          TreePath child = parent.pathByAddingChild(n);\n          configTree.expandPath(child);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[9685-10172]:ExpressionStatement[15009-15496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9808-10164]:Block[15132-15488]"
    }, {
      "left" : "TreeNode root = (TreeNode) configTree.getModel().getRoot();",
      "right" : "TreeNode root = (TreeNode) configTree.getModel().getRoot();",
      "info" : "VariableDeclarationStatement[9818-9877]:VariableDeclarationStatement[15142-15201]"
    }, {
      "left" : "TreePath parent = new TreePath(root);",
      "right" : "TreePath parent = new TreePath(root);",
      "info" : "VariableDeclarationStatement[9886-9923]:VariableDeclarationStatement[15210-15247]"
    }, {
      "left" : "for (Enumeration cat = root.children(); cat.hasMoreElements())",
      "right" : "for (Enumeration cat = root.children(); cat.hasMoreElements())",
      "info" : "ForStatement[9932-10156]:ForStatement[15256-15480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9996-10156]:Block[15320-15480]"
    }, {
      "left" : "TreeNode n = (TreeNode) cat.nextElement();",
      "right" : "TreeNode n = (TreeNode) cat.nextElement();",
      "info" : "VariableDeclarationStatement[10008-10050]:VariableDeclarationStatement[15332-15374]"
    }, {
      "left" : "TreePath child = parent.pathByAddingChild(n);",
      "right" : "TreePath child = parent.pathByAddingChild(n);",
      "info" : "VariableDeclarationStatement[10061-10106]:VariableDeclarationStatement[15385-15430]"
    }, {
      "left" : "configTree.expandPath(child);",
      "right" : "configTree.expandPath(child);",
      "info" : "ExpressionStatement[10117-10146]:ExpressionStatement[15441-15470]"
    }, {
      "left" : "cons.gridx = 1;",
      "right" : "cons.gridx = 1;",
      "info" : "ExpressionStatement[10178-10193]:ExpressionStatement[15502-15517]"
    }, {
      "left" : "cons.gridy = 0;",
      "right" : "cons.gridy = 0;",
      "info" : "ExpressionStatement[10198-10213]:ExpressionStatement[15522-15537]"
    }, {
      "left" : "final JButton collapseAllButton = new JButton(messages.getString(\"guiCollapseAll\"));",
      "right" : "final JButton collapseAllButton = new JButton(messages.getString(\"guiCollapseAll\"));",
      "info" : "VariableDeclarationStatement[10218-10302]:VariableDeclarationStatement[15542-15626]"
    }, {
      "left" : "treeButtonPanel.add(collapseAllButton, cons);",
      "right" : "treeButtonPanel.add(collapseAllButton, cons);",
      "info" : "ExpressionStatement[10307-10352]:ExpressionStatement[15631-15676]"
    }, {
      "left" : "collapseAllButton.addActionListener(new ActionListener() {\n\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        TreeNode root = (TreeNode) configTree.getModel().getRoot();\n        TreePath parent = new TreePath(root);\n        for (Enumeration categ = root.children(); categ.hasMoreElements();) {\n          TreeNode n = (TreeNode) categ.nextElement();\n          TreePath child = parent.pathByAddingChild(n);\n          configTree.collapsePath(child);\n        }\n      }\n    });",
      "right" : "collapseAllButton.addActionListener(new ActionListener() {\n\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        TreeNode root = (TreeNode) configTree.getModel().getRoot();\n        TreePath parent = new TreePath(root);\n        for (Enumeration categ = root.children(); categ.hasMoreElements();) {\n          TreeNode n = (TreeNode) categ.nextElement();\n          TreePath child = parent.pathByAddingChild(n);\n          configTree.collapsePath(child);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[10357-10854]:ExpressionStatement[15681-16178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10482-10846]:Block[15806-16170]"
    }, {
      "left" : "TreeNode root = (TreeNode) configTree.getModel().getRoot();",
      "right" : "TreeNode root = (TreeNode) configTree.getModel().getRoot();",
      "info" : "VariableDeclarationStatement[10492-10551]:VariableDeclarationStatement[15816-15875]"
    }, {
      "left" : "TreePath parent = new TreePath(root);",
      "right" : "TreePath parent = new TreePath(root);",
      "info" : "VariableDeclarationStatement[10560-10597]:VariableDeclarationStatement[15884-15921]"
    }, {
      "left" : "for (Enumeration categ = root.children(); categ.hasMoreElements())",
      "right" : "for (Enumeration categ = root.children(); categ.hasMoreElements())",
      "info" : "ForStatement[10606-10838]:ForStatement[15930-16162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10674-10838]:Block[15998-16162]"
    }, {
      "left" : "TreeNode n = (TreeNode) categ.nextElement();",
      "right" : "TreeNode n = (TreeNode) categ.nextElement();",
      "info" : "VariableDeclarationStatement[10686-10730]:VariableDeclarationStatement[16010-16054]"
    }, {
      "left" : "TreePath child = parent.pathByAddingChild(n);",
      "right" : "TreePath child = parent.pathByAddingChild(n);",
      "info" : "VariableDeclarationStatement[10741-10786]:VariableDeclarationStatement[16065-16110]"
    }, {
      "left" : "configTree.collapsePath(child);",
      "right" : "configTree.collapsePath(child);",
      "info" : "ExpressionStatement[10797-10828]:ExpressionStatement[16121-16152]"
    }, {
      "left" : "final JPanel motherTonguePanel = new JPanel();",
      "right" : "final JPanel motherTonguePanel = new JPanel();",
      "info" : "VariableDeclarationStatement[10860-10906]:VariableDeclarationStatement[16292-16338]"
    }, {
      "left" : "motherTonguePanel.add(new JLabel(messages.getString(\"guiMotherTongue\")), cons);",
      "right" : "motherTonguePanel.add(new JLabel(messages.getString(\"guiMotherTongue\")), cons);",
      "info" : "ExpressionStatement[10911-10990]:ExpressionStatement[16343-16422]"
    }, {
      "left" : "motherTongueBox = new JComboBox<>(getPossibleMotherTongues());",
      "right" : "motherTongueBox = new JComboBox<>(getPossibleMotherTongues());",
      "info" : "ExpressionStatement[10995-11057]:ExpressionStatement[16427-16489]"
    }, {
      "left" : "if (config.getMotherTongue() != null)",
      "right" : "if (config.getMotherTongue() != null)",
      "info" : "IfStatement[11062-11200]:IfStatement[16494-16632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11100-11200]:Block[16532-16632]"
    }, {
      "left" : "motherTongueBox.setSelectedItem(config.getMotherTongue().getTranslatedName(messages));",
      "right" : "motherTongueBox.setSelectedItem(config.getMotherTongue().getTranslatedName(messages));",
      "info" : "ExpressionStatement[11108-11194]:ExpressionStatement[16540-16626]"
    }, {
      "left" : "motherTongueBox.addItemListener(new ItemListener() {\n\n      @Override\n      public void itemStateChanged(ItemEvent e) {\n        if (e.getStateChange() == ItemEvent.SELECTED) {\n          Language motherTongue;\n          if (motherTongueBox.getSelectedItem() instanceof String) {\n            motherTongue = getLanguageForLocalizedName(motherTongueBox.getSelectedItem().toString());\n          } else {\n            motherTongue = (Language) motherTongueBox.getSelectedItem();\n          }\n          config.setMotherTongue(motherTongue);\n        }\n      }\n    });",
      "right" : "motherTongueBox.addItemListener(new ItemListener() {\n\n      @Override\n      public void itemStateChanged(ItemEvent e) {\n        if (e.getStateChange() == ItemEvent.SELECTED) {\n          Language motherTongue;\n          if (motherTongueBox.getSelectedItem() instanceof String) {\n            motherTongue = getLanguageForLocalizedName(motherTongueBox.getSelectedItem().toString());\n          } else {\n            motherTongue = (Language) motherTongueBox.getSelectedItem();\n          }\n          config.setMotherTongue(motherTongue);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[11205-11762]:ExpressionStatement[16637-17194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11323-11754]:Block[16755-17186]"
    }, {
      "left" : "if (e.getStateChange() == ItemEvent.SELECTED)",
      "right" : "if (e.getStateChange() == ItemEvent.SELECTED)",
      "info" : "IfStatement[11333-11746]:IfStatement[16765-17178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11379-11746]:Block[16811-17178]"
    }, {
      "left" : "Language motherTongue;",
      "right" : "Language motherTongue;",
      "info" : "VariableDeclarationStatement[11391-11413]:VariableDeclarationStatement[16823-16845]"
    }, {
      "left" : "if (motherTongueBox.getSelectedItem() instanceof String)",
      "right" : "if (motherTongueBox.getSelectedItem() instanceof String)",
      "info" : "IfStatement[11424-11688]:IfStatement[16856-17120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11481-11596]:Block[16913-17028]"
    }, {
      "left" : "motherTongue = getLanguageForLocalizedName(motherTongueBox.getSelectedItem().toString());",
      "right" : "motherTongue = getLanguageForLocalizedName(motherTongueBox.getSelectedItem().toString());",
      "info" : "ExpressionStatement[11495-11584]:ExpressionStatement[16927-17016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11602-11688]:Block[17034-17120]"
    }, {
      "left" : "motherTongue = (Language) motherTongueBox.getSelectedItem();",
      "right" : "motherTongue = (Language) motherTongueBox.getSelectedItem();",
      "info" : "ExpressionStatement[11616-11676]:ExpressionStatement[17048-17108]"
    }, {
      "left" : "config.setMotherTongue(motherTongue);",
      "right" : "config.setMotherTongue(motherTongue);",
      "info" : "ExpressionStatement[11699-11736]:ExpressionStatement[17131-17168]"
    }, {
      "left" : "motherTonguePanel.add(motherTongueBox, cons);",
      "right" : "motherTonguePanel.add(motherTongueBox, cons);",
      "info" : "ExpressionStatement[11767-11812]:ExpressionStatement[17199-17244]"
    }, {
      "left" : "final JPanel portPanel = new JPanel();",
      "right" : "final JPanel portPanel = new JPanel();",
      "info" : "VariableDeclarationStatement[11822-11860]:VariableDeclarationStatement[5876-5914]"
    }, {
      "left" : "portPanel.setLayout(new GridBagLayout());",
      "right" : "portPanel.setLayout(new GridBagLayout());",
      "info" : "ExpressionStatement[11865-11906]:ExpressionStatement[5919-5960]"
    }, {
      "left" : "cons.weightx = 0.0f;",
      "right" : "cons.weightx = 0.0f;",
      "info" : "ExpressionStatement[12114-12134]:ExpressionStatement[6168-6188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12158-14823]:Block[8292-10819]"
    }, {
      "left" : "serverCheckbox = new JCheckBox(Tools.getLabel(messages.getString(\"guiRunOnPort\")));",
      "right" : "serverCheckbox = new JCheckBox(Tools.getLabel(messages.getString(\"guiRunOnPort\")));",
      "info" : "ExpressionStatement[12166-12249]:ExpressionStatement[8298-8381]"
    }, {
      "left" : "serverCheckbox.setMnemonic(Tools.getMnemonic(messages.getString(\"guiRunOnPort\")));",
      "right" : "serverCheckbox.setMnemonic(Tools.getMnemonic(messages.getString(\"guiRunOnPort\")));",
      "info" : "ExpressionStatement[12256-12338]:ExpressionStatement[8386-8468]"
    }, {
      "left" : "serverCheckbox.setSelected(config.getRunServer());",
      "right" : "serverCheckbox.setSelected(config.getRunServer());",
      "info" : "ExpressionStatement[12345-12395]:ExpressionStatement[8473-8523]"
    }, {
      "left" : "portPanel.add(serverCheckbox, cons);",
      "right" : "portPanel.add(serverCheckbox, cons);",
      "info" : "ExpressionStatement[12402-12438]:ExpressionStatement[8528-8564]"
    }, {
      "left" : "serverCheckbox.addActionListener(new ActionListener() {\n        @Override\n        public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent e) {\n          serverPortField.setEnabled(serverCheckbox.isSelected());\n          serverSettingsCheckbox.setEnabled(serverCheckbox.isSelected());\n        }\n      });",
      "right" : "serverCheckbox.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(@SuppressWarnings(\"unused\") ActionEvent e) {\n        serverPortField.setEnabled(serverCheckbox.isSelected());\n        serverSettingsCheckbox.setEnabled(serverCheckbox.isSelected());\n      }\n    });",
      "info" : "ExpressionStatement[12445-12760]:ExpressionStatement[8569-8872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12598-12750]:Block[8718-8864]"
    }, {
      "left" : "serverPortField.setEnabled(serverCheckbox.isSelected());",
      "right" : "serverPortField.setEnabled(serverCheckbox.isSelected());",
      "info" : "ExpressionStatement[12610-12666]:ExpressionStatement[8728-8784]"
    }, {
      "left" : "serverSettingsCheckbox.setEnabled(serverCheckbox.isSelected());",
      "right" : "serverSettingsCheckbox.setEnabled(serverCheckbox.isSelected());",
      "info" : "ExpressionStatement[12677-12740]:ExpressionStatement[8793-8856]"
    }, {
      "left" : "serverCheckbox.addItemListener(new ItemListener() {\n\n        @Override\n        public void itemStateChanged(ItemEvent e) {\n          config.setRunServer(serverCheckbox.isSelected());\n        }\n      });",
      "right" : "serverCheckbox.addItemListener(new ItemListener() {\n      @Override\n      public void itemStateChanged(ItemEvent e) {\n        config.setRunServer(serverCheckbox.isSelected());\n      }\n    });",
      "info" : "ExpressionStatement[12767-12969]:ExpressionStatement[8877-9068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12888-12959]:Block[8993-9060]"
    }, {
      "left" : "config.setRunServer(serverCheckbox.isSelected());",
      "right" : "config.setRunServer(serverCheckbox.isSelected());",
      "info" : "ExpressionStatement[12900-12949]:ExpressionStatement[9003-9052]"
    }, {
      "left" : "serverPortField = new JTextField(Integer.toString(config.getServerPort()));",
      "right" : "serverPortField = new JTextField(Integer.toString(config.getServerPort()));",
      "info" : "ExpressionStatement[12977-13052]:ExpressionStatement[9074-9149]"
    }, {
      "left" : "serverPortField.setEnabled(serverCheckbox.isSelected());",
      "right" : "serverPortField.setEnabled(serverCheckbox.isSelected());",
      "info" : "ExpressionStatement[13059-13115]:ExpressionStatement[9154-9210]"
    }, {
      "left" : "serverSettingsCheckbox = new JCheckBox(Tools.getLabel(messages.getString(\"useGUIConfig\")));",
      "right" : "serverSettingsCheckbox = new JCheckBox(Tools.getLabel(messages.getString(\"useGUIConfig\")));",
      "info" : "ExpressionStatement[13122-13213]:ExpressionStatement[9215-9306]"
    }, {
      "left" : "serverPortField.setMinimumSize(new Dimension(100, 25));",
      "right" : "serverPortField.setMinimumSize(new Dimension(100, 25));",
      "info" : "ExpressionStatement[13220-13275]:ExpressionStatement[9311-9366]"
    }, {
      "left" : "cons.gridx = 1;",
      "right" : "cons.gridx = 1;",
      "info" : "ExpressionStatement[13344-13359]:ExpressionStatement[9433-9448]"
    }, {
      "left" : "portPanel.add(serverPortField, cons);",
      "right" : "portPanel.add(serverPortField, cons);",
      "info" : "ExpressionStatement[13366-13403]:ExpressionStatement[9453-9490]"
    }, {
      "left" : "serverPortField.getDocument().addDocumentListener(new DocumentListener() {\n\n        @Override\n        public void insertUpdate(DocumentEvent e) {\n          changedUpdate(e);\n        }\n\n        @Override\n        public void removeUpdate(DocumentEvent e) {\n          changedUpdate(e);\n        }\n\n        @Override\n        public void changedUpdate(DocumentEvent e) {\n          try {\n            int serverPort = Integer.parseInt(serverPortField.getText());\n            if (serverPort > -1 && serverPort < MAX_PORT) {\n              serverPortField.setForeground(null);\n              config.setServerPort(serverPort);\n            } else {\n              serverPortField.setForeground(Color.RED);\n            }\n          } catch (NumberFormatException ex) {\n            serverPortField.setForeground(Color.RED);\n          }\n        }\n      });",
      "right" : "serverPortField.getDocument().addDocumentListener(new DocumentListener() {\n\n      @Override\n      public void insertUpdate(DocumentEvent e) {\n        changedUpdate(e);\n      }\n\n      @Override\n      public void removeUpdate(DocumentEvent e) {\n        changedUpdate(e);\n      }\n\n      @Override\n      public void changedUpdate(DocumentEvent e) {\n        try {\n          int serverPort = Integer.parseInt(serverPortField.getText());\n          if (serverPort > -1 && serverPort < MAX_PORT) {\n            serverPortField.setForeground(null);\n            config.setServerPort(serverPort);\n          } else {\n            serverPortField.setForeground(Color.RED);\n          }\n        } catch (NumberFormatException ex) {\n          serverPortField.setForeground(Color.RED);\n        }\n      }\n    });",
      "info" : "ExpressionStatement[13410-14247]:ExpressionStatement[9495-10286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13554-13593]:Block[9635-9670]"
    }, {
      "left" : "changedUpdate(e);",
      "right" : "changedUpdate(e);",
      "info" : "ExpressionStatement[13566-13583]:ExpressionStatement[9645-9662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13663-13702]:Block[9736-9771]"
    }, {
      "left" : "changedUpdate(e);",
      "right" : "changedUpdate(e);",
      "info" : "ExpressionStatement[13675-13692]:ExpressionStatement[9746-9763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13773-14237]:Block[9838-10278]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13785-14227]:TryStatement[9848-10270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13789-14126]:Block[9852-10173]"
    }, {
      "left" : "int serverPort = Integer.parseInt(serverPortField.getText());",
      "right" : "int serverPort = Integer.parseInt(serverPortField.getText());",
      "info" : "VariableDeclarationStatement[13803-13864]:VariableDeclarationStatement[9864-9925]"
    }, {
      "left" : "if (serverPort > -1 && serverPort < MAX_PORT)",
      "right" : "if (serverPort > -1 && serverPort < MAX_PORT)",
      "info" : "IfStatement[13877-14114]:IfStatement[9936-10163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13923-14037]:Block[9982-10090]"
    }, {
      "left" : "serverPortField.setForeground(null);",
      "right" : "serverPortField.setForeground(null);",
      "info" : "ExpressionStatement[13939-13975]:ExpressionStatement[9996-10032]"
    }, {
      "left" : "config.setServerPort(serverPort);",
      "right" : "config.setServerPort(serverPort);",
      "info" : "ExpressionStatement[13990-14023]:ExpressionStatement[10045-10078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14043-14114]:Block[10096-10163]"
    }, {
      "left" : "serverPortField.setForeground(Color.RED);",
      "right" : "serverPortField.setForeground(Color.RED);",
      "info" : "ExpressionStatement[14059-14100]:ExpressionStatement[10110-10151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14160-14227]:Block[10207-10270]"
    }, {
      "left" : "serverPortField.setForeground(Color.RED);",
      "right" : "serverPortField.setForeground(Color.RED);",
      "info" : "ExpressionStatement[14174-14215]:ExpressionStatement[10219-10260]"
    }, {
      "left" : "cons.gridx = 0;",
      "right" : "cons.gridx = 0;",
      "info" : "ExpressionStatement[14255-14270]:ExpressionStatement[10292-10307]"
    }, {
      "left" : "cons.gridy = 10;",
      "right" : "cons.gridy = 10;",
      "info" : "ExpressionStatement[14277-14293]:ExpressionStatement[10312-10328]"
    }, {
      "left" : "serverSettingsCheckbox.setMnemonic(Tools.getMnemonic(messages\n          .getString(\"useGUIConfig\")));",
      "right" : "serverSettingsCheckbox.setMnemonic(Tools.getMnemonic(messages.getString(\"useGUIConfig\")));",
      "info" : "ExpressionStatement[14306-14407]:ExpressionStatement[10333-10423]"
    }, {
      "left" : "serverSettingsCheckbox.setSelected(config.getUseGUIConfig());",
      "right" : "serverSettingsCheckbox.setSelected(config.getUseGUIConfig());",
      "info" : "ExpressionStatement[14414-14475]:ExpressionStatement[10428-10489]"
    }, {
      "left" : "serverSettingsCheckbox.setEnabled(config.getRunServer());",
      "right" : "serverSettingsCheckbox.setEnabled(config.getRunServer());",
      "info" : "ExpressionStatement[14482-14539]:ExpressionStatement[10494-10551]"
    }, {
      "left" : "serverSettingsCheckbox.addItemListener(new ItemListener() {\n        @Override\n        public void itemStateChanged(ItemEvent e) {\n          config.setUseGUIConfig(serverSettingsCheckbox.isSelected());\n        }\n      });",
      "right" : "serverSettingsCheckbox.addItemListener(new ItemListener() {\n      @Override\n      public void itemStateChanged(ItemEvent e) {\n        config.setUseGUIConfig(serverSettingsCheckbox.isSelected());\n      }\n    });",
      "info" : "ExpressionStatement[14546-14766]:ExpressionStatement[10556-10766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14674-14756]:Block[10680-10758]"
    }, {
      "left" : "config.setUseGUIConfig(serverSettingsCheckbox.isSelected());",
      "right" : "config.setUseGUIConfig(serverSettingsCheckbox.isSelected());",
      "info" : "ExpressionStatement[14686-14746]:ExpressionStatement[10690-10750]"
    }, {
      "left" : "portPanel.add(serverSettingsCheckbox, cons);",
      "right" : "portPanel.add(serverSettingsCheckbox, cons);",
      "info" : "ExpressionStatement[14773-14817]:ExpressionStatement[10771-10815]"
    }, {
      "left" : "final JPanel buttonPanel = new JPanel();",
      "right" : "final JPanel buttonPanel = new JPanel();",
      "info" : "VariableDeclarationStatement[14829-14869]:VariableDeclarationStatement[6273-6313]"
    }, {
      "left" : "buttonPanel.setLayout(new GridBagLayout());",
      "right" : "buttonPanel.setLayout(new GridBagLayout());",
      "info" : "ExpressionStatement[14874-14917]:ExpressionStatement[6318-6361]"
    }, {
      "left" : "okButton = new JButton(Tools.getLabel(messages.getString(\"guiOKButton\")));",
      "right" : "okButton = new JButton(Tools.getLabel(messages.getString(\"guiOKButton\")));",
      "info" : "ExpressionStatement[14922-14996]:ExpressionStatement[6366-6440]"
    }, {
      "left" : "okButton.setMnemonic(Tools.getMnemonic(messages.getString(\"guiOKButton\")));",
      "right" : "okButton.setMnemonic(Tools.getMnemonic(messages.getString(\"guiOKButton\")));",
      "info" : "ExpressionStatement[15001-15076]:ExpressionStatement[6445-6520]"
    }, {
      "left" : "okButton.addActionListener(this);",
      "right" : "okButton.addActionListener(this);",
      "info" : "ExpressionStatement[15081-15114]:ExpressionStatement[6525-6558]"
    }, {
      "left" : "cancelButton = new JButton(Tools.getLabel(messages.getString(\"guiCancelButton\")));",
      "right" : "cancelButton = new JButton(Tools.getLabel(messages.getString(\"guiCancelButton\")));",
      "info" : "ExpressionStatement[15119-15201]:ExpressionStatement[6563-6645]"
    }, {
      "left" : "cancelButton.setMnemonic(Tools.getMnemonic(messages.getString(\"guiCancelButton\")));",
      "right" : "cancelButton.setMnemonic(Tools.getMnemonic(messages.getString(\"guiCancelButton\")));",
      "info" : "ExpressionStatement[15206-15289]:ExpressionStatement[6650-6733]"
    }, {
      "left" : "cancelButton.addActionListener(this);",
      "right" : "cancelButton.addActionListener(this);",
      "info" : "ExpressionStatement[15294-15331]:ExpressionStatement[6738-6775]"
    }, {
      "left" : "buttonPanel.add(okButton, cons);",
      "right" : "buttonPanel.add(okButton, cons);",
      "info" : "ExpressionStatement[15415-15447]:ExpressionStatement[6859-6891]"
    }, {
      "left" : "buttonPanel.add(cancelButton, cons);",
      "right" : "buttonPanel.add(cancelButton, cons);",
      "info" : "ExpressionStatement[15452-15488]:ExpressionStatement[6896-6932]"
    }, {
      "left" : "final Container contentPane = dialog.getContentPane();",
      "right" : "final Container contentPane = dialog.getContentPane();",
      "info" : "VariableDeclarationStatement[15494-15548]:VariableDeclarationStatement[6938-6992]"
    }, {
      "left" : "contentPane.setLayout(new GridBagLayout());",
      "right" : "contentPane.setLayout(new GridBagLayout());",
      "info" : "ExpressionStatement[15553-15596]:ExpressionStatement[6997-7040]"
    }, {
      "left" : "cons.insets = new Insets(4, 4, 4, 4);",
      "right" : "cons.insets = new Insets(4, 4, 4, 4);",
      "info" : "ExpressionStatement[15638-15675]:ExpressionStatement[7082-7119]"
    }, {
      "left" : "cons.weightx = 10.0f;",
      "right" : "cons.weightx = 10.0f;",
      "info" : "ExpressionStatement[15720-15741]:ExpressionStatement[7164-7185]"
    }, {
      "left" : "cons.weighty = 10.0f;",
      "right" : "cons.weighty = 10.0f;",
      "info" : "ExpressionStatement[15746-15767]:ExpressionStatement[7190-7211]"
    }, {
      "left" : "contentPane.add(new JScrollPane(checkBoxPanel), cons);",
      "right" : "contentPane.add(new JScrollPane(checkBoxPanel), cons);",
      "info" : "ExpressionStatement[15813-15867]:ExpressionStatement[7257-7311]"
    }, {
      "left" : "cons.anchor = GridBagConstraints.LINE_END;",
      "right" : "cons.anchor = GridBagConstraints.LINE_END;",
      "info" : "ExpressionStatement[15952-15994]:ExpressionStatement[7396-7438]"
    }, {
      "left" : "contentPane.add(portPanel, cons);",
      "right" : "contentPane.add(portPanel, cons);",
      "info" : "ExpressionStatement[16217-16250]:ExpressionStatement[7675-7708]"
    }, {
      "left" : "cons.anchor = GridBagConstraints.EAST;",
      "right" : "cons.anchor = GridBagConstraints.EAST;",
      "info" : "ExpressionStatement[16274-16312]:ExpressionStatement[7732-7770]"
    }, {
      "left" : "contentPane.add(buttonPanel, cons);",
      "right" : "contentPane.add(buttonPanel, cons);",
      "info" : "ExpressionStatement[16317-16352]:ExpressionStatement[7775-7810]"
    }, {
      "left" : "dialog.pack();",
      "right" : "dialog.pack();",
      "info" : "ExpressionStatement[16358-16372]:ExpressionStatement[7816-7830]"
    }, {
      "left" : "dialog.setSize(500, 500);",
      "right" : "dialog.setSize(500, 500);",
      "info" : "ExpressionStatement[16377-16402]:ExpressionStatement[7835-7860]"
    }, {
      "left" : "final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();",
      "right" : "final Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();",
      "info" : "VariableDeclarationStatement[16432-16505]:VariableDeclarationStatement[7890-7963]"
    }, {
      "left" : "final Dimension frameSize = dialog.getSize();",
      "right" : "final Dimension frameSize = dialog.getSize();",
      "info" : "VariableDeclarationStatement[16510-16555]:VariableDeclarationStatement[7968-8013]"
    }, {
      "left" : "dialog.setLocation(screenSize.width / 2 - frameSize.width / 2,\n        screenSize.height / 2 - frameSize.height / 2);",
      "right" : "dialog.setLocation(screenSize.width / 2 - frameSize.width / 2,\n        screenSize.height / 2 - frameSize.height / 2);",
      "info" : "ExpressionStatement[16560-16677]:ExpressionStatement[8018-8135]"
    }, {
      "left" : "dialog.setLocationByPlatform(true);",
      "right" : "dialog.setLocationByPlatform(true);",
      "info" : "ExpressionStatement[16682-16717]:ExpressionStatement[8140-8175]"
    }, {
      "left" : "dialog.setVisible(true);",
      "right" : "dialog.setVisible(true);",
      "info" : "ExpressionStatement[16722-16746]:ExpressionStatement[8180-8204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16798-17084]:Block[17326-17612]"
    }, {
      "left" : "final List<String> motherTongues = new ArrayList<>();",
      "right" : "final List<String> motherTongues = new ArrayList<>();",
      "info" : "VariableDeclarationStatement[16804-16857]:VariableDeclarationStatement[17332-17385]"
    }, {
      "left" : "motherTongues.add(NO_MOTHER_TONGUE);",
      "right" : "motherTongues.add(NO_MOTHER_TONGUE);",
      "info" : "ExpressionStatement[16862-16898]:ExpressionStatement[17390-17426]"
    }, {
      "left" : "for (final Language lang : Languages.get())",
      "right" : "for (final Language lang : Languages.get())",
      "info" : "EnhancedForStatement[16903-17012]:EnhancedForStatement[17431-17540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16947-17012]:Block[17475-17540]"
    }, {
      "left" : "motherTongues.add(lang.getTranslatedName(messages));",
      "right" : "motherTongues.add(lang.getTranslatedName(messages));",
      "info" : "ExpressionStatement[16954-17006]:ExpressionStatement[17482-17534]"
    }, {
      "left" : "return motherTongues.toArray(new String[motherTongues.size()]);",
      "right" : "return motherTongues.toArray(new String[motherTongues.size()]);",
      "info" : "ReturnStatement[17017-17080]:ReturnStatement[17545-17608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17143-17379]:Block[17671-17907]"
    }, {
      "left" : "if (e.getSource() == okButton)",
      "right" : "if (e.getSource() == okButton)",
      "info" : "IfStatement[17149-17375]:IfStatement[17677-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17180-17295]:Block[17708-17823]"
    }, {
      "left" : "if(original != null)",
      "right" : "if(original != null)",
      "info" : "IfStatement[17188-17257]:IfStatement[17716-17785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17209-17257]:Block[17737-17785]"
    }, {
      "left" : "original.restoreState(config);",
      "right" : "original.restoreState(config);",
      "info" : "ExpressionStatement[17219-17249]:ExpressionStatement[17747-17777]"
    }, {
      "left" : "dialog.setVisible(false);",
      "right" : "dialog.setVisible(false);",
      "info" : "ExpressionStatement[17264-17289]:ExpressionStatement[17792-17817]"
    }, {
      "left" : "if (e.getSource() == cancelButton)",
      "right" : "if (e.getSource() == cancelButton)",
      "info" : "IfStatement[17301-17375]:IfStatement[17829-17903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17336-17375]:Block[17864-17903]"
    }, {
      "left" : "dialog.setVisible(false);",
      "right" : "dialog.setVisible(false);",
      "info" : "ExpressionStatement[17344-17369]:ExpressionStatement[17872-17897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17736-17919]:Block[18264-18447]"
    }, {
      "left" : "for (final Language element : Languages.get())",
      "right" : "for (final Language element : Languages.get())",
      "info" : "EnhancedForStatement[17742-17898]:EnhancedForStatement[18270-18426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17789-17898]:Block[18317-18426]"
    }, {
      "left" : "if (languageName.equals(element.getTranslatedName(messages)))",
      "right" : "if (languageName.equals(element.getTranslatedName(messages)))",
      "info" : "IfStatement[17797-17892]:IfStatement[18325-18420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17859-17892]:Block[18387-18420]"
    }, {
      "left" : "return element;",
      "right" : "return element;",
      "info" : "ReturnStatement[17869-17884]:ReturnStatement[18397-18412]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17903-17915]:ReturnStatement[18431-18443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18053-18469]:Block[18581-18997]"
    }, {
      "left" : "final boolean hasCat = r1.getCategory() != null && r2.getCategory() != null;",
      "right" : "final boolean hasCat = r1.getCategory() != null && r2.getCategory() != null;",
      "info" : "VariableDeclarationStatement[18061-18137]:VariableDeclarationStatement[18589-18665]"
    }, {
      "left" : "if (hasCat)",
      "right" : "if (hasCat)",
      "info" : "IfStatement[18144-18388]:IfStatement[18672-18916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18156-18388]:Block[18684-18916]"
    }, {
      "left" : "final int res = r1.getCategory().getName().compareTo(r2.getCategory().getName());",
      "right" : "final int res = r1.getCategory().getName().compareTo(r2.getCategory().getName());",
      "info" : "VariableDeclarationStatement[18166-18247]:VariableDeclarationStatement[18694-18775]"
    }, {
      "left" : "if (res == 0)",
      "right" : "if (res == 0)",
      "info" : "IfStatement[18256-18360]:IfStatement[18784-18888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18270-18360]:Block[18798-18888]"
    }, {
      "left" : "return r1.getDescription().compareToIgnoreCase(r2.getDescription());",
      "right" : "return r1.getDescription().compareToIgnoreCase(r2.getDescription());",
      "info" : "ReturnStatement[18282-18350]:ReturnStatement[18810-18878]"
    }, {
      "left" : "return res;",
      "right" : "return res;",
      "info" : "ReturnStatement[18369-18380]:ReturnStatement[18897-18908]"
    }, {
      "left" : "return r1.getDescription().compareToIgnoreCase(r2.getDescription());",
      "right" : "return r1.getDescription().compareToIgnoreCase(r2.getDescription());",
      "info" : "ReturnStatement[18395-18463]:ReturnStatement[18923-18991]"
    } ]
  },
  "interFileMappings" : { }
}