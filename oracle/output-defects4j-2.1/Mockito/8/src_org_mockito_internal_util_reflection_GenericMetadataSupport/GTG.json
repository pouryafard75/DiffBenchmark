{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GenericMetadataSupport",
      "right" : "GenericMetadataSupport",
      "info" : "TypeDeclaration[327-25367]:TypeDeclaration[327-25408]"
    }, {
      "left" : "protected Map<TypeVariable, Type> contextualActualTypeParameters = new HashMap<TypeVariable, Type>();",
      "right" : "protected Map<TypeVariable, Type> contextualActualTypeParameters = new HashMap<TypeVariable, Type>();",
      "info" : "FieldDeclaration[2283-2471]:FieldDeclaration[2283-2471]"
    }, {
      "left" : "protected void registerTypeVariablesOn(Type classType)",
      "right" : "protected void registerTypeVariablesOn(Type classType)",
      "info" : "MethodDeclaration[2481-3652]:MethodDeclaration[2481-3693]"
    }, {
      "left" : "protected void registerTypeParametersOn(TypeVariable[] typeParameters)",
      "right" : "protected void registerTypeParametersOn(TypeVariable[] typeParameters)",
      "info" : "MethodDeclaration[3660-3871]:MethodDeclaration[3701-3912]"
    }, {
      "left" : "private void registerTypeVariableIfNotPresent(TypeVariable typeVariable)",
      "right" : "private void registerTypeVariableIfNotPresent(TypeVariable typeVariable)",
      "info" : "MethodDeclaration[3879-4350]:MethodDeclaration[3920-4391]"
    }, {
      "left" : "private BoundedType boundsOf(TypeVariable typeParameter)",
      "right" : "private BoundedType boundsOf(TypeVariable typeParameter)",
      "info" : "MethodDeclaration[4358-4869]:MethodDeclaration[4399-4910]"
    }, {
      "left" : "private BoundedType boundsOf(WildcardType wildCard)",
      "right" : "private BoundedType boundsOf(WildcardType wildCard)",
      "info" : "MethodDeclaration[4877-5833]:MethodDeclaration[4918-5874]"
    }, {
      "left" : "public abstract Class<?> rawType();",
      "right" : "public abstract Class<?> rawType();",
      "info" : "MethodDeclaration[5845-5948]:MethodDeclaration[5886-5989]"
    }, {
      "left" : "public List<Type> extraInterfaces()",
      "right" : "public List<Type> extraInterfaces()",
      "info" : "MethodDeclaration[5960-6156]:MethodDeclaration[6001-6197]"
    }, {
      "left" : "public Class<?>[] rawExtraInterfaces()",
      "right" : "public Class<?>[] rawExtraInterfaces()",
      "info" : "MethodDeclaration[6164-6371]:MethodDeclaration[6205-6412]"
    }, {
      "left" : "public boolean hasRawExtraInterfaces()",
      "right" : "public boolean hasRawExtraInterfaces()",
      "info" : "MethodDeclaration[6379-6620]:MethodDeclaration[6420-6661]"
    }, {
      "left" : "public Map<TypeVariable, Type> actualTypeArguments()",
      "right" : "public Map<TypeVariable, Type> actualTypeArguments()",
      "info" : "MethodDeclaration[6632-7497]:MethodDeclaration[6673-7538]"
    }, {
      "left" : "protected Type getActualTypeArgumentFor(TypeVariable typeParameter)",
      "right" : "protected Type getActualTypeArgumentFor(TypeVariable typeParameter)",
      "info" : "MethodDeclaration[7505-7860]:MethodDeclaration[7546-7901]"
    }, {
      "left" : "public GenericMetadataSupport resolveGenericReturnType(Method method)",
      "right" : "public GenericMetadataSupport resolveGenericReturnType(Method method)",
      "info" : "MethodDeclaration[7872-9202]:MethodDeclaration[7913-9243]"
    }, {
      "left" : "public static GenericMetadataSupport inferFrom(Type type)",
      "right" : "public static GenericMetadataSupport inferFrom(Type type)",
      "info" : "MethodDeclaration[9210-10314]:MethodDeclaration[9251-10355]"
    }, {
      "left" : "FromClassGenericMetadataSupport",
      "right" : "FromClassGenericMetadataSupport",
      "info" : "TypeDeclaration[10678-12405]:TypeDeclaration[10719-12446]"
    }, {
      "left" : "private final Class<?> clazz;",
      "right" : "private final Class<?> clazz;",
      "info" : "FieldDeclaration[11029-11058]:FieldDeclaration[11070-11099]"
    }, {
      "left" : "public FromClassGenericMetadataSupport(Class<?> clazz)",
      "right" : "public FromClassGenericMetadataSupport(Class<?> clazz)",
      "info" : "MethodDeclaration[11070-11507]:MethodDeclaration[11111-11548]"
    }, {
      "left" : "private Class superClassOf(Class currentExploredClass)",
      "right" : "private Class superClassOf(Class currentExploredClass)",
      "info" : "MethodDeclaration[11519-11925]:MethodDeclaration[11560-11966]"
    }, {
      "left" : "private void readActualTypeParametersOnDeclaringClass(Class<?> clazz)",
      "right" : "private void readActualTypeParametersOnDeclaringClass(Class<?> clazz)",
      "info" : "MethodDeclaration[11937-12302]:MethodDeclaration[11978-12343]"
    }, {
      "left" : "public Class<?> rawType()",
      "right" : "public Class<?> rawType()",
      "info" : "MethodDeclaration[12314-12398]:MethodDeclaration[12355-12439]"
    }, {
      "left" : "FromParameterizedTypeGenericMetadataSupport",
      "right" : "FromParameterizedTypeGenericMetadataSupport",
      "info" : "TypeDeclaration[12415-13799]:TypeDeclaration[12456-13840]"
    }, {
      "left" : "private final ParameterizedType parameterizedType;",
      "right" : "private final ParameterizedType parameterizedType;",
      "info" : "FieldDeclaration[13209-13259]:FieldDeclaration[13250-13300]"
    }, {
      "left" : "public FromParameterizedTypeGenericMetadataSupport(ParameterizedType parameterizedType)",
      "right" : "public FromParameterizedTypeGenericMetadataSupport(ParameterizedType parameterizedType)",
      "info" : "MethodDeclaration[13271-13469]:MethodDeclaration[13312-13510]"
    }, {
      "left" : "private void readActualTypeParameters()",
      "right" : "private void readActualTypeParameters()",
      "info" : "MethodDeclaration[13481-13660]:MethodDeclaration[13522-13701]"
    }, {
      "left" : "public Class<?> rawType()",
      "right" : "public Class<?> rawType()",
      "info" : "MethodDeclaration[13672-13792]:MethodDeclaration[13713-13833]"
    }, {
      "left" : "ParameterizedReturnType",
      "right" : "ParameterizedReturnType",
      "info" : "TypeDeclaration[13809-14924]:TypeDeclaration[13850-14965]"
    }, {
      "left" : "private final ParameterizedType parameterizedType;",
      "right" : "private final ParameterizedType parameterizedType;",
      "info" : "FieldDeclaration[14029-14079]:FieldDeclaration[14070-14120]"
    }, {
      "left" : "private final TypeVariable[] typeParameters;",
      "right" : "private final TypeVariable[] typeParameters;",
      "info" : "FieldDeclaration[14089-14133]:FieldDeclaration[14130-14174]"
    }, {
      "left" : "public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType)",
      "right" : "public ParameterizedReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, ParameterizedType parameterizedType)",
      "info" : "MethodDeclaration[14145-14556]:MethodDeclaration[14186-14597]"
    }, {
      "left" : "private void readTypeParameters()",
      "right" : "private void readTypeParameters()",
      "info" : "MethodDeclaration[14568-14669]:MethodDeclaration[14609-14710]"
    }, {
      "left" : "private void readTypeVariables()",
      "right" : "private void readTypeVariables()",
      "info" : "MethodDeclaration[14681-14783]:MethodDeclaration[14722-14824]"
    }, {
      "left" : "public Class<?> rawType()",
      "right" : "public Class<?> rawType()",
      "info" : "MethodDeclaration[14795-14915]:MethodDeclaration[14836-14956]"
    }, {
      "left" : "TypeVariableReturnType",
      "right" : "TypeVariableReturnType",
      "info" : "TypeDeclaration[14934-19677]:TypeDeclaration[14975-19718]"
    }, {
      "left" : "private final TypeVariable typeVariable;",
      "right" : "private final TypeVariable typeVariable;",
      "info" : "FieldDeclaration[15140-15180]:FieldDeclaration[15181-15221]"
    }, {
      "left" : "private final TypeVariable[] typeParameters;",
      "right" : "private final TypeVariable[] typeParameters;",
      "info" : "FieldDeclaration[15190-15234]:FieldDeclaration[15231-15275]"
    }, {
      "left" : "private Class<?> rawType;",
      "right" : "private Class<?> rawType;",
      "info" : "FieldDeclaration[15244-15269]:FieldDeclaration[15285-15310]"
    }, {
      "left" : "public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable)",
      "right" : "public TypeVariableReturnType(GenericMetadataSupport source, TypeVariable[] typeParameters, TypeVariable typeVariable)",
      "info" : "MethodDeclaration[15285-15675]:MethodDeclaration[15326-15716]"
    }, {
      "left" : "private void readTypeParameters()",
      "right" : "private void readTypeParameters()",
      "info" : "MethodDeclaration[15687-15788]:MethodDeclaration[15728-15829]"
    }, {
      "left" : "private void readTypeVariables()",
      "right" : "private void readTypeVariables()",
      "info" : "MethodDeclaration[15800-16044]:MethodDeclaration[15841-16085]"
    }, {
      "left" : "public Class<?> rawType()",
      "right" : "public Class<?> rawType()",
      "info" : "MethodDeclaration[16056-16252]:MethodDeclaration[16097-16293]"
    }, {
      "left" : "private Class<?> extractRawTypeOf(Type type)",
      "right" : "private Class<?> extractRawTypeOf(Type type)",
      "info" : "MethodDeclaration[16264-17183]:MethodDeclaration[16305-17224]"
    }, {
      "left" : "public List<Type> extraInterfaces()",
      "right" : "public List<Type> extraInterfaces()",
      "info" : "MethodDeclaration[17195-17824]:MethodDeclaration[17236-17865]"
    }, {
      "left" : "public Class<?>[] rawExtraInterfaces()",
      "right" : "public Class<?>[] rawExtraInterfaces()",
      "info" : "MethodDeclaration[17836-18697]:MethodDeclaration[17877-18738]"
    }, {
      "left" : "private Type extractActualBoundedTypeOf(Type type)",
      "right" : "private Type extractActualBoundedTypeOf(Type type)",
      "info" : "MethodDeclaration[18709-19670]:MethodDeclaration[18750-19711]"
    }, {
      "left" : "NotGenericReturnTypeSupport",
      "right" : "NotGenericReturnTypeSupport",
      "info" : "TypeDeclaration[19689-20178]:TypeDeclaration[19730-20219]"
    }, {
      "left" : "private final Class<?> returnType;",
      "right" : "private final Class<?> returnType;",
      "info" : "FieldDeclaration[19897-19931]:FieldDeclaration[19938-19972]"
    }, {
      "left" : "public NotGenericReturnTypeSupport(Type genericReturnType)",
      "right" : "public NotGenericReturnTypeSupport(Type genericReturnType)",
      "info" : "MethodDeclaration[19943-20070]:MethodDeclaration[19984-20111]"
    }, {
      "left" : "public Class<?> rawType()",
      "right" : "public Class<?> rawType()",
      "info" : "MethodDeclaration[20082-20171]:MethodDeclaration[20123-20212]"
    }, {
      "left" : "BoundedType",
      "right" : "BoundedType",
      "info" : "TypeDeclaration[20190-20785]:TypeDeclaration[20231-20826]"
    }, {
      "left" : "Type firstBound();",
      "right" : "Type firstBound();",
      "info" : "MethodDeclaration[20723-20741]:MethodDeclaration[20764-20782]"
    }, {
      "left" : "Type[] interfaceBounds();",
      "right" : "Type[] interfaceBounds();",
      "info" : "MethodDeclaration[20753-20778]:MethodDeclaration[20794-20819]"
    }, {
      "left" : "TypeVarBoundedType",
      "right" : "TypeVarBoundedType",
      "info" : "TypeDeclaration[20793-23539]:TypeDeclaration[20834-23580]"
    }, {
      "left" : "private final TypeVariable typeVariable;",
      "right" : "private final TypeVariable typeVariable;",
      "info" : "FieldDeclaration[21838-21878]:FieldDeclaration[21879-21919]"
    }, {
      "left" : "public TypeVarBoundedType(TypeVariable typeVariable)",
      "right" : "public TypeVarBoundedType(TypeVariable typeVariable)",
      "info" : "MethodDeclaration[21892-22004]:MethodDeclaration[21933-22045]"
    }, {
      "left" : "public Type firstBound()",
      "right" : "public Type firstBound()",
      "info" : "MethodDeclaration[22016-22248]:MethodDeclaration[22057-22289]"
    }, {
      "left" : "public Type[] interfaceBounds()",
      "right" : "public Type[] interfaceBounds()",
      "info" : "MethodDeclaration[22260-22868]:MethodDeclaration[22301-22909]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[22880-23140]:MethodDeclaration[22921-23181]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[23152-23250]:MethodDeclaration[23193-23291]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[23262-23439]:MethodDeclaration[23303-23480]"
    }, {
      "left" : "public TypeVariable typeVariable()",
      "right" : "public TypeVariable typeVariable()",
      "info" : "MethodDeclaration[23451-23532]:MethodDeclaration[23492-23573]"
    }, {
      "left" : "WildCardBoundedType",
      "right" : "WildCardBoundedType",
      "info" : "TypeDeclaration[23547-25362]:TypeDeclaration[23588-25403]"
    }, {
      "left" : "private final WildcardType wildcard;",
      "right" : "private final WildcardType wildcard;",
      "info" : "FieldDeclaration[24044-24080]:FieldDeclaration[24085-24121]"
    }, {
      "left" : "public WildCardBoundedType(WildcardType wildcard)",
      "right" : "public WildCardBoundedType(WildcardType wildcard)",
      "info" : "MethodDeclaration[24094-24195]:MethodDeclaration[24135-24236]"
    }, {
      "left" : "public Type firstBound()",
      "right" : "public Type firstBound()",
      "info" : "MethodDeclaration[24207-24557]:MethodDeclaration[24248-24598]"
    }, {
      "left" : "public Type[] interfaceBounds()",
      "right" : "public Type[] interfaceBounds()",
      "info" : "MethodDeclaration[24569-24751]:MethodDeclaration[24610-24792]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[24763-25019]:MethodDeclaration[24804-25060]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[25031-25125]:MethodDeclaration[25072-25166]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[25137-25270]:MethodDeclaration[25178-25311]"
    }, {
      "left" : "public WildcardType wildCard()",
      "right" : "public WildcardType wildCard()",
      "info" : "MethodDeclaration[25282-25355]:MethodDeclaration[25323-25396]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2536-3652]:Block[2536-3693]"
    }, {
      "left" : "if (!(classType instanceof ParameterizedType))",
      "right" : "if (!(classType instanceof ParameterizedType))",
      "info" : "IfStatement[2547-2627]:IfStatement[2547-2627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2594-2627]:Block[2594-2627]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[2609-2616]:ReturnStatement[2609-2616]"
    }, {
      "left" : "ParameterizedType parameterizedType = (ParameterizedType) classType;",
      "right" : "ParameterizedType parameterizedType = (ParameterizedType) classType;",
      "info" : "VariableDeclarationStatement[2637-2705]:VariableDeclarationStatement[2637-2705]"
    }, {
      "left" : "TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();",
      "right" : "TypeVariable[] typeParameters = ((Class<?>) parameterizedType.getRawType()).getTypeParameters();",
      "info" : "VariableDeclarationStatement[2715-2811]:VariableDeclarationStatement[2715-2811]"
    }, {
      "left" : "Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();",
      "right" : "Type[] actualTypeArguments = parameterizedType.getActualTypeArguments();",
      "info" : "VariableDeclarationStatement[2821-2893]:VariableDeclarationStatement[2821-2893]"
    }, {
      "left" : "for (int i = 0; i < actualTypeArguments.length; i++)",
      "right" : "for (int i = 0; i < actualTypeArguments.length; i++)",
      "info" : "ForStatement[2903-3645]:ForStatement[2903-3686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2956-3645]:Block[2956-3686]"
    }, {
      "left" : "TypeVariable typeParameter = typeParameters[i];",
      "right" : "TypeVariable typeParameter = typeParameters[i];",
      "info" : "VariableDeclarationStatement[2971-3018]:VariableDeclarationStatement[2971-3018]"
    }, {
      "left" : "Type actualTypeArgument = actualTypeArguments[i];",
      "right" : "Type actualTypeArgument = actualTypeArguments[i];",
      "info" : "VariableDeclarationStatement[3032-3081]:VariableDeclarationStatement[3032-3081]"
    }, {
      "left" : "if (actualTypeArgument instanceof WildcardType)",
      "right" : "if (actualTypeArgument instanceof WildcardType)",
      "info" : "IfStatement[3097-3384]:IfStatement[3097-3425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3145-3274]:Block[3145-3274]"
    }, {
      "left" : "contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));",
      "right" : "contextualActualTypeParameters.put(typeParameter, boundsOf((WildcardType) actualTypeArgument));",
      "info" : "ExpressionStatement[3164-3259]:ExpressionStatement[3164-3259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3280-3384]:Block[3321-3425]"
    }, {
      "left" : "contextualActualTypeParameters.put(typeParameter, actualTypeArgument);",
      "right" : "contextualActualTypeParameters.put(typeParameter, actualTypeArgument);",
      "info" : "ExpressionStatement[3299-3369]:ExpressionStatement[3340-3410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3731-3871]:Block[3772-3912]"
    }, {
      "left" : "for (TypeVariable typeVariable : typeParameters)",
      "right" : "for (TypeVariable typeVariable : typeParameters)",
      "info" : "EnhancedForStatement[3742-3864]:EnhancedForStatement[3783-3905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3791-3864]:Block[3832-3905]"
    }, {
      "left" : "registerTypeVariableIfNotPresent(typeVariable);",
      "right" : "registerTypeVariableIfNotPresent(typeVariable);",
      "info" : "ExpressionStatement[3806-3853]:ExpressionStatement[3847-3894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3952-4350]:Block[3993-4391]"
    }, {
      "left" : "if (!contextualActualTypeParameters.containsKey(typeVariable))",
      "right" : "if (!contextualActualTypeParameters.containsKey(typeVariable))",
      "info" : "IfStatement[3963-4343]:IfStatement[4004-4384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4026-4343]:Block[4067-4384]"
    }, {
      "left" : "contextualActualTypeParameters.put(typeVariable, boundsOf(typeVariable));",
      "right" : "contextualActualTypeParameters.put(typeVariable, boundsOf(typeVariable));",
      "info" : "ExpressionStatement[4041-4114]:ExpressionStatement[4082-4155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4651-4869]:Block[4692-4910]"
    }, {
      "left" : "if (typeParameter.getBounds()[0] instanceof TypeVariable)",
      "right" : "if (typeParameter.getBounds()[0] instanceof TypeVariable)",
      "info" : "IfStatement[4662-4807]:IfStatement[4703-4848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4720-4807]:Block[4761-4848]"
    }, {
      "left" : "return boundsOf((TypeVariable) typeParameter.getBounds()[0]);",
      "right" : "return boundsOf((TypeVariable) typeParameter.getBounds()[0]);",
      "info" : "ReturnStatement[4735-4796]:ReturnStatement[4776-4837]"
    }, {
      "left" : "return new TypeVarBoundedType(typeParameter);",
      "right" : "return new TypeVarBoundedType(typeParameter);",
      "info" : "ReturnStatement[4817-4862]:ReturnStatement[4858-4903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5151-5833]:Block[5192-5874]"
    }, {
      "left" : "WildCardBoundedType wildCardBoundedType = new WildCardBoundedType(wildCard);",
      "right" : "WildCardBoundedType wildCardBoundedType = new WildCardBoundedType(wildCard);",
      "info" : "VariableDeclarationStatement[5548-5624]:VariableDeclarationStatement[5589-5665]"
    }, {
      "left" : "if (wildCardBoundedType.firstBound() instanceof TypeVariable)",
      "right" : "if (wildCardBoundedType.firstBound() instanceof TypeVariable)",
      "info" : "IfStatement[5634-5787]:IfStatement[5675-5828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5696-5787]:Block[5737-5828]"
    }, {
      "left" : "return boundsOf((TypeVariable) wildCardBoundedType.firstBound());",
      "right" : "return boundsOf((TypeVariable) wildCardBoundedType.firstBound());",
      "info" : "ReturnStatement[5711-5776]:ReturnStatement[5752-5817]"
    }, {
      "left" : "return wildCardBoundedType;",
      "right" : "return wildCardBoundedType;",
      "info" : "ReturnStatement[5799-5826]:ReturnStatement[5840-5867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6107-6156]:Block[6148-6197]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[6118-6149]:ReturnStatement[6159-6190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6333-6371]:Block[6374-6412]"
    }, {
      "left" : "return new Class[0];",
      "right" : "return new Class[0];",
      "info" : "ReturnStatement[6344-6364]:ReturnStatement[6385-6405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6563-6620]:Block[6604-6661]"
    }, {
      "left" : "return rawExtraInterfaces().length > 0;",
      "right" : "return rawExtraInterfaces().length > 0;",
      "info" : "ReturnStatement[6574-6613]:ReturnStatement[6615-6654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6846-7497]:Block[6887-7538]"
    }, {
      "left" : "TypeVariable[] typeParameters = rawType().getTypeParameters();",
      "right" : "TypeVariable[] typeParameters = rawType().getTypeParameters();",
      "info" : "VariableDeclarationStatement[6857-6919]:VariableDeclarationStatement[6898-6960]"
    }, {
      "left" : "LinkedHashMap<TypeVariable, Type> actualTypeArguments = new LinkedHashMap<TypeVariable, Type>();",
      "right" : "LinkedHashMap<TypeVariable, Type> actualTypeArguments = new LinkedHashMap<TypeVariable, Type>();",
      "info" : "VariableDeclarationStatement[6929-7025]:VariableDeclarationStatement[6970-7066]"
    }, {
      "left" : "for (TypeVariable typeParameter : typeParameters)",
      "right" : "for (TypeVariable typeParameter : typeParameters)",
      "info" : "EnhancedForStatement[7037-7451]:EnhancedForStatement[7078-7492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7087-7451]:Block[7128-7492]"
    }, {
      "left" : "Type actualType = getActualTypeArgumentFor(typeParameter);",
      "right" : "Type actualType = getActualTypeArgumentFor(typeParameter);",
      "info" : "VariableDeclarationStatement[7104-7162]:VariableDeclarationStatement[7145-7203]"
    }, {
      "left" : "actualTypeArguments.put(typeParameter, actualType);",
      "right" : "actualTypeArguments.put(typeParameter, actualType);",
      "info" : "ExpressionStatement[7178-7229]:ExpressionStatement[7219-7270]"
    }, {
      "left" : "return actualTypeArguments;",
      "right" : "return actualTypeArguments;",
      "info" : "ReturnStatement[7463-7490]:ReturnStatement[7504-7531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7573-7860]:Block[7614-7901]"
    }, {
      "left" : "Type type = this.contextualActualTypeParameters.get(typeParameter);",
      "right" : "Type type = this.contextualActualTypeParameters.get(typeParameter);",
      "info" : "VariableDeclarationStatement[7584-7651]:VariableDeclarationStatement[7625-7692]"
    }, {
      "left" : "if (type instanceof TypeVariable)",
      "right" : "if (type instanceof TypeVariable)",
      "info" : "IfStatement[7661-7829]:IfStatement[7702-7870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7695-7829]:Block[7736-7870]"
    }, {
      "left" : "TypeVariable typeVariable = (TypeVariable) type;",
      "right" : "TypeVariable typeVariable = (TypeVariable) type;",
      "info" : "VariableDeclarationStatement[7710-7758]:VariableDeclarationStatement[7751-7799]"
    }, {
      "left" : "return getActualTypeArgumentFor(typeVariable);",
      "right" : "return getActualTypeArgumentFor(typeVariable);",
      "info" : "ReturnStatement[7772-7818]:ReturnStatement[7813-7859]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[7841-7853]:ReturnStatement[7882-7894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8199-9202]:Block[8240-9243]"
    }, {
      "left" : "Type genericReturnType = method.getGenericReturnType();",
      "right" : "Type genericReturnType = method.getGenericReturnType();",
      "info" : "VariableDeclarationStatement[8210-8265]:VariableDeclarationStatement[8251-8306]"
    }, {
      "left" : "if (genericReturnType instanceof Class)",
      "right" : "if (genericReturnType instanceof Class)",
      "info" : "IfStatement[8459-8583]:IfStatement[8500-8624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8499-8583]:Block[8540-8624]"
    }, {
      "left" : "return new NotGenericReturnTypeSupport(genericReturnType);",
      "right" : "return new NotGenericReturnTypeSupport(genericReturnType);",
      "info" : "ReturnStatement[8514-8572]:ReturnStatement[8555-8613]"
    }, {
      "left" : "if (genericReturnType instanceof ParameterizedType)",
      "right" : "if (genericReturnType instanceof ParameterizedType)",
      "info" : "IfStatement[8593-8791]:IfStatement[8634-8832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8645-8791]:Block[8686-8832]"
    }, {
      "left" : "return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());",
      "right" : "return new ParameterizedReturnType(this, method.getTypeParameters(), (ParameterizedType) method.getGenericReturnType());",
      "info" : "ReturnStatement[8660-8780]:ReturnStatement[8701-8821]"
    }, {
      "left" : "if (genericReturnType instanceof TypeVariable)",
      "right" : "if (genericReturnType instanceof TypeVariable)",
      "info" : "IfStatement[8801-8976]:IfStatement[8842-9017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8848-8976]:Block[8889-9017]"
    }, {
      "left" : "return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);",
      "right" : "return new TypeVariableReturnType(this, method.getTypeParameters(), (TypeVariable) genericReturnType);",
      "info" : "ReturnStatement[8863-8965]:ReturnStatement[8904-9006]"
    }, {
      "left" : "throw new MockitoException(\"Ouch, it shouldn't happen, type '\" + genericReturnType.getClass().getCanonicalName() + \"' on method : '\" + method.toGenericString() + \"' is not supported : \" + genericReturnType);",
      "right" : "throw new MockitoException(\"Ouch, it shouldn't happen, type '\" + genericReturnType.getClass().getCanonicalName() + \"' on method : '\" + method.toGenericString() + \"' is not supported : \" + genericReturnType);",
      "info" : "ThrowStatement[8988-9195]:ThrowStatement[9029-9236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9840-10314]:Block[9881-10355]"
    }, {
      "left" : "Checks.checkNotNull(type, \"type\");",
      "right" : "Checks.checkNotNull(type, \"type\");",
      "info" : "ExpressionStatement[9851-9885]:ExpressionStatement[9892-9926]"
    }, {
      "left" : "if (type instanceof Class)",
      "right" : "if (type instanceof Class)",
      "info" : "IfStatement[9895-10008]:IfStatement[9936-10049]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9922-10008]:Block[9963-10049]"
    }, {
      "left" : "return new FromClassGenericMetadataSupport((Class<?>) type);",
      "right" : "return new FromClassGenericMetadataSupport((Class<?>) type);",
      "info" : "ReturnStatement[9937-9997]:ReturnStatement[9978-10038]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[10018-10164]:IfStatement[10059-10205]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10057-10164]:Block[10098-10205]"
    }, {
      "left" : "return new FromParameterizedTypeGenericMetadataSupport((ParameterizedType) type);",
      "right" : "return new FromParameterizedTypeGenericMetadataSupport((ParameterizedType) type);",
      "info" : "ReturnStatement[10072-10153]:ReturnStatement[10113-10194]"
    }, {
      "left" : "throw new MockitoException(\"Type meta-data for this Type (\" + type.getClass().getCanonicalName() + \") is not supported : \" + type);",
      "right" : "throw new MockitoException(\"Type meta-data for this Type (\" + type.getClass().getCanonicalName() + \") is not supported : \" + type);",
      "info" : "ThrowStatement[10176-10307]:ThrowStatement[10217-10348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11125-11507]:Block[11166-11548]"
    }, {
      "left" : "this.clazz = clazz;",
      "right" : "this.clazz = clazz;",
      "info" : "ExpressionStatement[11140-11159]:ExpressionStatement[11181-11200]"
    }, {
      "left" : "for (Class currentExploredClass = clazz;\r\n                 currentExploredClass != null && currentExploredClass != Object.class;\r\n                 currentExploredClass = superClassOf(currentExploredClass))",
      "right" : "for (Class currentExploredClass = clazz;\r\n                 currentExploredClass != null && currentExploredClass != Object.class;\r\n                 currentExploredClass = superClassOf(currentExploredClass))",
      "info" : "ForStatement[11175-11496]:ForStatement[11216-11537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11399-11496]:Block[11440-11537]"
    }, {
      "left" : "readActualTypeParametersOnDeclaringClass(currentExploredClass);",
      "right" : "readActualTypeParametersOnDeclaringClass(currentExploredClass);",
      "info" : "ExpressionStatement[11418-11481]:ExpressionStatement[11459-11522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11574-11925]:Block[11615-11966]"
    }, {
      "left" : "Type genericSuperclass = currentExploredClass.getGenericSuperclass();",
      "right" : "Type genericSuperclass = currentExploredClass.getGenericSuperclass();",
      "info" : "VariableDeclarationStatement[11589-11658]:VariableDeclarationStatement[11630-11699]"
    }, {
      "left" : "if (genericSuperclass instanceof ParameterizedType)",
      "right" : "if (genericSuperclass instanceof ParameterizedType)",
      "info" : "IfStatement[11672-11867]:IfStatement[11713-11908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11724-11867]:Block[11765-11908]"
    }, {
      "left" : "Type rawType = ((ParameterizedType) genericSuperclass).getRawType();",
      "right" : "Type rawType = ((ParameterizedType) genericSuperclass).getRawType();",
      "info" : "VariableDeclarationStatement[11743-11811]:VariableDeclarationStatement[11784-11852]"
    }, {
      "left" : "return (Class) rawType;",
      "right" : "return (Class) rawType;",
      "info" : "ReturnStatement[11829-11852]:ReturnStatement[11870-11893]"
    }, {
      "left" : "return (Class) genericSuperclass;",
      "right" : "return (Class) genericSuperclass;",
      "info" : "ReturnStatement[11881-11914]:ReturnStatement[11922-11955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12007-12302]:Block[12048-12343]"
    }, {
      "left" : "registerTypeParametersOn(clazz.getTypeParameters());",
      "right" : "registerTypeParametersOn(clazz.getTypeParameters());",
      "info" : "ExpressionStatement[12022-12074]:ExpressionStatement[12063-12115]"
    }, {
      "left" : "registerTypeVariablesOn(clazz.getGenericSuperclass());",
      "right" : "registerTypeVariablesOn(clazz.getGenericSuperclass());",
      "info" : "ExpressionStatement[12088-12142]:ExpressionStatement[12129-12183]"
    }, {
      "left" : "for (Type genericInterface : clazz.getGenericInterfaces())",
      "right" : "for (Type genericInterface : clazz.getGenericInterfaces())",
      "info" : "EnhancedForStatement[12156-12291]:EnhancedForStatement[12197-12332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12215-12291]:Block[12256-12332]"
    }, {
      "left" : "registerTypeVariablesOn(genericInterface);",
      "right" : "registerTypeVariablesOn(genericInterface);",
      "info" : "ExpressionStatement[12234-12276]:ExpressionStatement[12275-12317]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12359-12398]:Block[12400-12439]"
    }, {
      "left" : "return clazz;",
      "right" : "return clazz;",
      "info" : "ReturnStatement[12374-12387]:ReturnStatement[12415-12428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13359-13469]:Block[13400-13510]"
    }, {
      "left" : "this.parameterizedType = parameterizedType;",
      "right" : "this.parameterizedType = parameterizedType;",
      "info" : "ExpressionStatement[13374-13417]:ExpressionStatement[13415-13458]"
    }, {
      "left" : "readActualTypeParameters();",
      "right" : "readActualTypeParameters();",
      "info" : "ExpressionStatement[13431-13458]:ExpressionStatement[13472-13499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13521-13660]:Block[13562-13701]"
    }, {
      "left" : "registerTypeVariablesOn(parameterizedType.getRawType());",
      "right" : "registerTypeVariablesOn(parameterizedType.getRawType());",
      "info" : "ExpressionStatement[13536-13592]:ExpressionStatement[13577-13633]"
    }, {
      "left" : "registerTypeVariablesOn(parameterizedType);",
      "right" : "registerTypeVariablesOn(parameterizedType);",
      "info" : "ExpressionStatement[13606-13649]:ExpressionStatement[13647-13690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13717-13792]:Block[13758-13833]"
    }, {
      "left" : "return (Class<?>) parameterizedType.getRawType();",
      "right" : "return (Class<?>) parameterizedType.getRawType();",
      "info" : "ReturnStatement[13732-13781]:ReturnStatement[13773-13822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14275-14556]:Block[14316-14597]"
    }, {
      "left" : "this.parameterizedType = parameterizedType;",
      "right" : "this.parameterizedType = parameterizedType;",
      "info" : "ExpressionStatement[14290-14333]:ExpressionStatement[14331-14374]"
    }, {
      "left" : "this.typeParameters = typeParameters;",
      "right" : "this.typeParameters = typeParameters;",
      "info" : "ExpressionStatement[14347-14384]:ExpressionStatement[14388-14425]"
    }, {
      "left" : "this.contextualActualTypeParameters = source.contextualActualTypeParameters;",
      "right" : "this.contextualActualTypeParameters = source.contextualActualTypeParameters;",
      "info" : "ExpressionStatement[14398-14474]:ExpressionStatement[14439-14515]"
    }, {
      "left" : "readTypeParameters();",
      "right" : "readTypeParameters();",
      "info" : "ExpressionStatement[14490-14511]:ExpressionStatement[14531-14552]"
    }, {
      "left" : "readTypeVariables();",
      "right" : "readTypeVariables();",
      "info" : "ExpressionStatement[14525-14545]:ExpressionStatement[14566-14586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14602-14669]:Block[14643-14710]"
    }, {
      "left" : "registerTypeParametersOn(typeParameters);",
      "right" : "registerTypeParametersOn(typeParameters);",
      "info" : "ExpressionStatement[14617-14658]:ExpressionStatement[14658-14699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14714-14783]:Block[14755-14824]"
    }, {
      "left" : "registerTypeVariablesOn(parameterizedType);",
      "right" : "registerTypeVariablesOn(parameterizedType);",
      "info" : "ExpressionStatement[14729-14772]:ExpressionStatement[14770-14813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14840-14915]:Block[14881-14956]"
    }, {
      "left" : "return (Class<?>) parameterizedType.getRawType();",
      "right" : "return (Class<?>) parameterizedType.getRawType();",
      "info" : "ReturnStatement[14855-14904]:ReturnStatement[14896-14945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15404-15675]:Block[15445-15716]"
    }, {
      "left" : "this.typeParameters = typeParameters;",
      "right" : "this.typeParameters = typeParameters;",
      "info" : "ExpressionStatement[15419-15456]:ExpressionStatement[15460-15497]"
    }, {
      "left" : "this.typeVariable = typeVariable;",
      "right" : "this.typeVariable = typeVariable;",
      "info" : "ExpressionStatement[15470-15503]:ExpressionStatement[15511-15544]"
    }, {
      "left" : "this.contextualActualTypeParameters = source.contextualActualTypeParameters;",
      "right" : "this.contextualActualTypeParameters = source.contextualActualTypeParameters;",
      "info" : "ExpressionStatement[15517-15593]:ExpressionStatement[15558-15634]"
    }, {
      "left" : "readTypeParameters();",
      "right" : "readTypeParameters();",
      "info" : "ExpressionStatement[15609-15630]:ExpressionStatement[15650-15671]"
    }, {
      "left" : "readTypeVariables();",
      "right" : "readTypeVariables();",
      "info" : "ExpressionStatement[15644-15664]:ExpressionStatement[15685-15705]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15721-15788]:Block[15762-15829]"
    }, {
      "left" : "registerTypeParametersOn(typeParameters);",
      "right" : "registerTypeParametersOn(typeParameters);",
      "info" : "ExpressionStatement[15736-15777]:ExpressionStatement[15777-15818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15833-16044]:Block[15874-16085]"
    }, {
      "left" : "for (Type type : typeVariable.getBounds())",
      "right" : "for (Type type : typeVariable.getBounds())",
      "info" : "EnhancedForStatement[15848-15955]:EnhancedForStatement[15889-15996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15891-15955]:Block[15932-15996]"
    }, {
      "left" : "registerTypeVariablesOn(type);",
      "right" : "registerTypeVariablesOn(type);",
      "info" : "ExpressionStatement[15910-15940]:ExpressionStatement[15951-15981]"
    }, {
      "left" : "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));",
      "right" : "registerTypeVariablesOn(getActualTypeArgumentFor(typeVariable));",
      "info" : "ExpressionStatement[15969-16033]:ExpressionStatement[16010-16074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16101-16252]:Block[16142-16293]"
    }, {
      "left" : "if (rawType == null)",
      "right" : "if (rawType == null)",
      "info" : "IfStatement[16116-16212]:IfStatement[16157-16253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16137-16212]:Block[16178-16253]"
    }, {
      "left" : "rawType = extractRawTypeOf(typeVariable);",
      "right" : "rawType = extractRawTypeOf(typeVariable);",
      "info" : "ExpressionStatement[16156-16197]:ExpressionStatement[16197-16238]"
    }, {
      "left" : "return rawType;",
      "right" : "return rawType;",
      "info" : "ReturnStatement[16226-16241]:ReturnStatement[16267-16282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16309-17183]:Block[16350-17224]"
    }, {
      "left" : "if (type instanceof Class)",
      "right" : "if (type instanceof Class)",
      "info" : "IfStatement[16324-16408]:IfStatement[16365-16449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16351-16408]:Block[16392-16449]"
    }, {
      "left" : "return (Class<?>) type;",
      "right" : "return (Class<?>) type;",
      "info" : "ReturnStatement[16370-16393]:ReturnStatement[16411-16434]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[16422-16553]:IfStatement[16463-16594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16461-16553]:Block[16502-16594]"
    }, {
      "left" : "return (Class<?>) ((ParameterizedType) type).getRawType();",
      "right" : "return (Class<?>) ((ParameterizedType) type).getRawType();",
      "info" : "ReturnStatement[16480-16538]:ReturnStatement[16521-16579]"
    }, {
      "left" : "if (type instanceof BoundedType)",
      "right" : "if (type instanceof BoundedType)",
      "info" : "IfStatement[16567-16693]:IfStatement[16608-16734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16600-16693]:Block[16641-16734]"
    }, {
      "left" : "return extractRawTypeOf(((BoundedType) type).firstBound());",
      "right" : "return extractRawTypeOf(((BoundedType) type).firstBound());",
      "info" : "ReturnStatement[16619-16678]:ReturnStatement[16660-16719]"
    }, {
      "left" : "if (type instanceof TypeVariable)",
      "right" : "if (type instanceof TypeVariable)",
      "info" : "IfStatement[16707-17078]:IfStatement[16748-17119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16741-17078]:Block[16782-17119]"
    }, {
      "left" : "return extractRawTypeOf(contextualActualTypeParameters.get(type));",
      "right" : "return extractRawTypeOf(contextualActualTypeParameters.get(type));",
      "info" : "ReturnStatement[16997-17063]:ReturnStatement[17038-17104]"
    }, {
      "left" : "throw new MockitoException(\"Raw extraction not supported for : '\" + type + \"'\");",
      "right" : "throw new MockitoException(\"Raw extraction not supported for : '\" + type + \"'\");",
      "info" : "ThrowStatement[17092-17172]:ThrowStatement[17133-17213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17250-17824]:Block[17291-17865]"
    }, {
      "left" : "Type type = extractActualBoundedTypeOf(typeVariable);",
      "right" : "Type type = extractActualBoundedTypeOf(typeVariable);",
      "info" : "VariableDeclarationStatement[17265-17318]:VariableDeclarationStatement[17306-17359]"
    }, {
      "left" : "if (type instanceof BoundedType)",
      "right" : "if (type instanceof BoundedType)",
      "info" : "IfStatement[17332-17460]:IfStatement[17373-17501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17365-17460]:Block[17406-17501]"
    }, {
      "left" : "return Arrays.asList(((BoundedType) type).interfaceBounds());",
      "right" : "return Arrays.asList(((BoundedType) type).interfaceBounds());",
      "info" : "ReturnStatement[17384-17445]:ReturnStatement[17425-17486]"
    }, {
      "left" : "if (type instanceof ParameterizedType)",
      "right" : "if (type instanceof ParameterizedType)",
      "info" : "IfStatement[17474-17586]:IfStatement[17515-17627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17513-17586]:Block[17554-17627]"
    }, {
      "left" : "return Collections.singletonList(type);",
      "right" : "return Collections.singletonList(type);",
      "info" : "ReturnStatement[17532-17571]:ReturnStatement[17573-17612]"
    }, {
      "left" : "if (type instanceof Class)",
      "right" : "if (type instanceof Class)",
      "info" : "IfStatement[17600-17692]:IfStatement[17641-17733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17627-17692]:Block[17668-17733]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[17646-17677]:ReturnStatement[17687-17718]"
    }, {
      "left" : "throw new MockitoException(\"Cannot extract extra-interfaces from '\" + typeVariable + \"' : '\" + type + \"'\");",
      "right" : "throw new MockitoException(\"Cannot extract extra-interfaces from '\" + typeVariable + \"' : '\" + type + \"'\");",
      "info" : "ThrowStatement[17706-17813]:ThrowStatement[17747-17854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18057-18697]:Block[18098-18738]"
    }, {
      "left" : "List<Type> extraInterfaces = extraInterfaces();",
      "right" : "List<Type> extraInterfaces = extraInterfaces();",
      "info" : "VariableDeclarationStatement[18072-18119]:VariableDeclarationStatement[18113-18160]"
    }, {
      "left" : "List<Class<?>> rawExtraInterfaces = new ArrayList<Class<?>>();",
      "right" : "List<Class<?>> rawExtraInterfaces = new ArrayList<Class<?>>();",
      "info" : "VariableDeclarationStatement[18133-18195]:VariableDeclarationStatement[18174-18236]"
    }, {
      "left" : "for (Type extraInterface : extraInterfaces)",
      "right" : "for (Type extraInterface : extraInterfaces)",
      "info" : "EnhancedForStatement[18209-18600]:EnhancedForStatement[18250-18641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18253-18600]:Block[18294-18641]"
    }, {
      "left" : "Class<?> rawInterface = extractRawTypeOf(extraInterface);",
      "right" : "Class<?> rawInterface = extractRawTypeOf(extraInterface);",
      "info" : "VariableDeclarationStatement[18272-18329]:VariableDeclarationStatement[18313-18370]"
    }, {
      "left" : "if(!rawType().equals(rawInterface))",
      "right" : "if(!rawType().equals(rawInterface))",
      "info" : "IfStatement[18470-18585]:IfStatement[18511-18626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18506-18585]:Block[18547-18626]"
    }, {
      "left" : "rawExtraInterfaces.add(rawInterface);",
      "right" : "rawExtraInterfaces.add(rawInterface);",
      "info" : "ExpressionStatement[18529-18566]:ExpressionStatement[18570-18607]"
    }, {
      "left" : "return rawExtraInterfaces.toArray(new Class[rawExtraInterfaces.size()]);",
      "right" : "return rawExtraInterfaces.toArray(new Class[rawExtraInterfaces.size()]);",
      "info" : "ReturnStatement[18614-18686]:ReturnStatement[18655-18727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18760-19670]:Block[18801-19711]"
    }, {
      "left" : "if (type instanceof TypeVariable)",
      "right" : "if (type instanceof TypeVariable)",
      "info" : "IfStatement[18775-19149]:IfStatement[18816-19190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18809-19149]:Block[18850-19190]"
    }, {
      "left" : "return extractActualBoundedTypeOf(contextualActualTypeParameters.get(type));",
      "right" : "return extractActualBoundedTypeOf(contextualActualTypeParameters.get(type));",
      "info" : "ReturnStatement[19058-19134]:ReturnStatement[19099-19175]"
    }, {
      "left" : "if (type instanceof BoundedType)",
      "right" : "if (type instanceof BoundedType)",
      "info" : "IfStatement[19163-19565]:IfStatement[19204-19606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19196-19565]:Block[19237-19606]"
    }, {
      "left" : "Type actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound());",
      "right" : "Type actualFirstBound = extractActualBoundedTypeOf(((BoundedType) type).firstBound());",
      "info" : "VariableDeclarationStatement[19215-19301]:VariableDeclarationStatement[19256-19342]"
    }, {
      "left" : "if (!(actualFirstBound instanceof BoundedType))",
      "right" : "if (!(actualFirstBound instanceof BoundedType))",
      "info" : "IfStatement[19319-19508]:IfStatement[19360-19549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19367-19508]:Block[19408-19549]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[19390-19402]:ReturnStatement[19431-19443]"
    }, {
      "left" : "return actualFirstBound;",
      "right" : "return actualFirstBound;",
      "info" : "ReturnStatement[19526-19550]:ReturnStatement[19567-19591]"
    }, {
      "left" : "return type;",
      "right" : "return type;",
      "info" : "ReturnStatement[19579-19591]:ReturnStatement[19620-19632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20002-20070]:Block[20043-20111]"
    }, {
      "left" : "returnType = (Class<?>) genericReturnType;",
      "right" : "returnType = (Class<?>) genericReturnType;",
      "info" : "ExpressionStatement[20017-20059]:ExpressionStatement[20058-20100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20127-20171]:Block[20168-20212]"
    }, {
      "left" : "return returnType;",
      "right" : "return returnType;",
      "info" : "ReturnStatement[20142-20160]:ReturnStatement[20183-20201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21945-22004]:Block[21986-22045]"
    }, {
      "left" : "this.typeVariable = typeVariable;",
      "right" : "this.typeVariable = typeVariable;",
      "info" : "ExpressionStatement[21960-21993]:ExpressionStatement[22001-22034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22184-22248]:Block[22225-22289]"
    }, {
      "left" : "return typeVariable.getBounds()[0];",
      "right" : "return typeVariable.getBounds()[0];",
      "info" : "ReturnStatement[22199-22234]:ReturnStatement[22240-22275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22617-22868]:Block[22658-22909]"
    }, {
      "left" : "Type[] interfaceBounds = new Type[typeVariable.getBounds().length - 1];",
      "right" : "Type[] interfaceBounds = new Type[typeVariable.getBounds().length - 1];",
      "info" : "VariableDeclarationStatement[22632-22703]:VariableDeclarationStatement[22673-22744]"
    }, {
      "left" : "System.arraycopy(typeVariable.getBounds(), 1, interfaceBounds, 0, typeVariable.getBounds().length - 1);",
      "right" : "System.arraycopy(typeVariable.getBounds(), 1, interfaceBounds, 0, typeVariable.getBounds().length - 1);",
      "info" : "ExpressionStatement[22717-22820]:ExpressionStatement[22758-22861]"
    }, {
      "left" : "return interfaceBounds;",
      "right" : "return interfaceBounds;",
      "info" : "ReturnStatement[22834-22857]:ReturnStatement[22875-22898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22931-23140]:Block[22972-23181]"
    }, {
      "left" : "if (this == o)",
      "right" : "if (this == o)",
      "info" : "IfStatement[22946-22973]:IfStatement[22987-23014]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22961-22973]:ReturnStatement[23002-23014]"
    }, {
      "left" : "if (o == null || getClass() != o.getClass())",
      "right" : "if (o == null || getClass() != o.getClass())",
      "info" : "IfStatement[22987-23045]:IfStatement[23028-23086]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23032-23045]:ReturnStatement[23073-23086]"
    }, {
      "left" : "return typeVariable.equals(((TypeVarBoundedType) o).typeVariable);",
      "right" : "return typeVariable.equals(((TypeVarBoundedType) o).typeVariable);",
      "info" : "ReturnStatement[23061-23127]:ReturnStatement[23102-23168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23193-23250]:Block[23234-23291]"
    }, {
      "left" : "return typeVariable.hashCode();",
      "right" : "return typeVariable.hashCode();",
      "info" : "ReturnStatement[23208-23239]:ReturnStatement[23249-23280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23306-23439]:Block[23347-23480]"
    }, {
      "left" : "return \"{firstBound=\" + firstBound() + \", interfaceBounds=\" + Arrays.deepToString(interfaceBounds()) + '}';",
      "right" : "return \"{firstBound=\" + firstBound() + \", interfaceBounds=\" + Arrays.deepToString(interfaceBounds()) + '}';",
      "info" : "ReturnStatement[23321-23428]:ReturnStatement[23362-23469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23486-23532]:Block[23527-23573]"
    }, {
      "left" : "return typeVariable;",
      "right" : "return typeVariable;",
      "info" : "ReturnStatement[23501-23521]:ReturnStatement[23542-23562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24144-24195]:Block[24185-24236]"
    }, {
      "left" : "this.wildcard = wildcard;",
      "right" : "this.wildcard = wildcard;",
      "info" : "ExpressionStatement[24159-24184]:ExpressionStatement[24200-24225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24342-24557]:Block[24383-24598]"
    }, {
      "left" : "Type[] lowerBounds = wildcard.getLowerBounds();",
      "right" : "Type[] lowerBounds = wildcard.getLowerBounds();",
      "info" : "VariableDeclarationStatement[24357-24404]:VariableDeclarationStatement[24398-24445]"
    }, {
      "left" : "Type[] upperBounds = wildcard.getUpperBounds();",
      "right" : "Type[] upperBounds = wildcard.getUpperBounds();",
      "info" : "VariableDeclarationStatement[24418-24465]:VariableDeclarationStatement[24459-24506]"
    }, {
      "left" : "return lowerBounds.length != 0 ? lowerBounds[0] : upperBounds[0];",
      "right" : "return lowerBounds.length != 0 ? lowerBounds[0] : upperBounds[0];",
      "info" : "ReturnStatement[24481-24546]:ReturnStatement[24522-24587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24706-24751]:Block[24747-24792]"
    }, {
      "left" : "return new Type[0];",
      "right" : "return new Type[0];",
      "info" : "ReturnStatement[24721-24740]:ReturnStatement[24762-24781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24814-25019]:Block[24855-25060]"
    }, {
      "left" : "if (this == o)",
      "right" : "if (this == o)",
      "info" : "IfStatement[24829-24856]:IfStatement[24870-24897]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[24844-24856]:ReturnStatement[24885-24897]"
    }, {
      "left" : "if (o == null || getClass() != o.getClass())",
      "right" : "if (o == null || getClass() != o.getClass())",
      "info" : "IfStatement[24870-24928]:IfStatement[24911-24969]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24915-24928]:ReturnStatement[24956-24969]"
    }, {
      "left" : "return wildcard.equals(((TypeVarBoundedType) o).typeVariable);",
      "right" : "return wildcard.equals(((TypeVarBoundedType) o).typeVariable);",
      "info" : "ReturnStatement[24944-25006]:ReturnStatement[24985-25047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25072-25125]:Block[25113-25166]"
    }, {
      "left" : "return wildcard.hashCode();",
      "right" : "return wildcard.hashCode();",
      "info" : "ReturnStatement[25087-25114]:ReturnStatement[25128-25155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25181-25270]:Block[25222-25311]"
    }, {
      "left" : "return \"{firstBound=\" + firstBound() + \", interfaceBounds=[]}\";",
      "right" : "return \"{firstBound=\" + firstBound() + \", interfaceBounds=[]}\";",
      "info" : "ReturnStatement[25196-25259]:ReturnStatement[25237-25300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25313-25355]:Block[25354-25396]"
    }, {
      "left" : "return wildcard;",
      "right" : "return wildcard;",
      "info" : "ReturnStatement[25328-25344]:ReturnStatement[25369-25385]"
    } ]
  },
  "interFileMappings" : { }
}