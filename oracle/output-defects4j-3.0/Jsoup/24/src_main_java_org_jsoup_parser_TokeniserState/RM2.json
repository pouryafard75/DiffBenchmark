{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "enum : TokeniserState",
      "right" : "enum : TokeniserState",
      "info" : "EnumDeclaration[27-61160]:EnumDeclaration[27-61131]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[220-971]:MethodDeclaration[220-971]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[1044-1297]:MethodDeclaration[1044-1297]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[1374-2137]:MethodDeclaration[1374-2137]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2186-2441]:MethodDeclaration[2186-2441]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[2471-3108]:MethodDeclaration[2471-3108]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[3141-3781]:MethodDeclaration[3141-3781]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[3813-4327]:MethodDeclaration[3813-4327]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[4383-5206]:MethodDeclaration[4383-5206]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[5239-5781]:MethodDeclaration[5239-5781]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[5879-6988]:MethodDeclaration[5879-6988]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[7057-7802]:MethodDeclaration[7057-7802]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[7841-8285]:MethodDeclaration[7841-8285]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[8324-9594]:MethodDeclaration[8324-9594]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9604-9759]:MethodDeclaration[9604-9759]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[9801-10085]:MethodDeclaration[9801-10085]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[10125-10411]:MethodDeclaration[10125-10411]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[10451-11551]:MethodDeclaration[10451-11551]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[11561-11717]:MethodDeclaration[11561-11717]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[11762-12298]:MethodDeclaration[11762-12298]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[12341-12634]:MethodDeclaration[12341-12634]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[12677-13793]:MethodDeclaration[12677-13793]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[13803-13962]:MethodDeclaration[13803-13962]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14006-14263]:MethodDeclaration[14006-14263]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14311-14568]:MethodDeclaration[14311-14568]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[14608-15425]:MethodDeclaration[14608-15425]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[15469-16298]:MethodDeclaration[15469-16298]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[16346-17244]:MethodDeclaration[16346-17244]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[17296-17864]:MethodDeclaration[17296-17864]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[17914-18357]:MethodDeclaration[17914-18357]"
    }, {
      "left" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "right" : "private void anythingElse(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[19601-19767]:MethodDeclaration[19572-19738]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[19817-20704]:MethodDeclaration[19788-20675]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[20750-21623]:MethodDeclaration[20721-21594]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[21673-22548]:MethodDeclaration[21644-22519]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[22602-23540]:MethodDeclaration[22573-23511]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[23598-23906]:MethodDeclaration[23569-23877]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[23954-24847]:MethodDeclaration[23925-24818]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[24918-26299]:MethodDeclaration[24889-26270]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[26373-27734]:MethodDeclaration[26344-27705]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[27775-29235]:MethodDeclaration[27746-29206]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[29278-30847]:MethodDeclaration[29249-30818]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[30897-31974]:MethodDeclaration[30868-31945]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[32024-33104]:MethodDeclaration[31995-33075]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[33150-34735]:MethodDeclaration[33121-34706]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[34847-35685]:MethodDeclaration[34818-35656]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[35727-36285]:MethodDeclaration[35698-36256]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[36320-36777]:MethodDeclaration[36291-36748]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[36821-37647]:MethodDeclaration[36792-37618]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[37682-38584]:MethodDeclaration[37653-38555]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[38623-39525]:MethodDeclaration[38594-39496]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[39555-40265]:MethodDeclaration[39526-40236]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[40302-41050]:MethodDeclaration[40273-41021]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[41083-42187]:MethodDeclaration[41054-42158]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[42224-43174]:MethodDeclaration[42195-43145]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[43204-43908]:MethodDeclaration[43175-43879]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[43948-45045]:MethodDeclaration[43919-45016]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[45079-46196]:MethodDeclaration[45050-46167]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[46235-47152]:MethodDeclaration[46206-47123]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[47200-48578]:MethodDeclaration[47171-48549]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[48630-49873]:MethodDeclaration[48601-49844]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[49932-50898]:MethodDeclaration[49903-50869]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[50957-51924]:MethodDeclaration[50928-51895]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[51975-53244]:MethodDeclaration[51946-53215]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[53307-54500]:MethodDeclaration[53278-54471]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[54548-55894]:MethodDeclaration[54519-55865]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[55946-57189]:MethodDeclaration[55917-57160]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[57248-58214]:MethodDeclaration[57219-58185]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[58273-59240]:MethodDeclaration[58244-59211]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[59291-60068]:MethodDeclaration[59262-60039]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[60103-60590]:MethodDeclaration[60074-60561]"
    }, {
      "left" : "void read(Tokeniser t, CharacterReader r)",
      "right" : "void read(Tokeniser t, CharacterReader r)",
      "info" : "MethodDeclaration[60625-60817]:MethodDeclaration[60596-60788]"
    }, {
      "left" : "abstract void read(Tokeniser t, CharacterReader r);",
      "right" : "abstract void read(Tokeniser t, CharacterReader r);",
      "info" : "MethodDeclaration[60831-60882]:MethodDeclaration[60802-60853]"
    }, {
      "left" : "private static final char nullChar = '\\u0000';",
      "right" : "private static final char nullChar = '\\u0000';",
      "info" : "FieldDeclaration[60888-60934]:FieldDeclaration[60859-60905]"
    }, {
      "left" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "right" : "private static final char replacementChar = Tokeniser.replacementChar;",
      "info" : "FieldDeclaration[60939-61009]:FieldDeclaration[60910-60980]"
    }, {
      "left" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "right" : "private static final String replacementStr = String.valueOf(Tokeniser.replacementChar);",
      "info" : "FieldDeclaration[61014-61101]:FieldDeclaration[60985-61072]"
    }, {
      "left" : "private static final char eof = CharacterReader.EOF;",
      "right" : "private static final char eof = CharacterReader.EOF;",
      "info" : "FieldDeclaration[61106-61158]:FieldDeclaration[61077-61129]"
    } ],
    "mappings" : [
 {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[220-224]:PrimitiveType[220-224]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[225-229]:SimpleName[225-229]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[230-241]:SingleVariableDeclaration[230-241]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[243-260]:SingleVariableDeclaration[243-260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[262-971]:Block[262-971]"
    }, {
      "left" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case '<':\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInData);\n                    break;\n                case '<':\n                    t.advanceTransition(TagOpen);\n                    break;\n                case nullChar:\n                    t.error(this); // NOT replacement character (oddly?)\n                    t.emit(r.consume());\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[276-961]:SwitchStatement[276-961]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[315-324]:SwitchCase[315-324]"
    }, {
      "left" : "t.advanceTransition(CharacterReferenceInData);",
      "right" : "t.advanceTransition(CharacterReferenceInData);",
      "info" : "ExpressionStatement[345-391]:ExpressionStatement[345-391]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[412-418]:BreakStatement[412-418]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[435-444]:SwitchCase[435-444]"
    }, {
      "left" : "t.advanceTransition(TagOpen);",
      "right" : "t.advanceTransition(TagOpen);",
      "info" : "ExpressionStatement[465-494]:ExpressionStatement[465-494]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[515-521]:BreakStatement[515-521]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[538-552]:SwitchCase[538-552]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[573-587]:ExpressionStatement[573-587]"
    }, {
      "left" : "t.emit(r.consume());",
      "right" : "t.emit(r.consume());",
      "info" : "ExpressionStatement[646-666]:ExpressionStatement[646-666]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[687-693]:BreakStatement[687-693]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[710-719]:SwitchCase[710-719]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[740-764]:ExpressionStatement[740-764]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[785-791]:BreakStatement[785-791]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[808-816]:SwitchCase[808-816]"
    }, {
      "left" : "String data = r.consumeToAny('&', '<', nullChar);",
      "right" : "String data = r.consumeToAny('&', '<', nullChar);",
      "info" : "VariableDeclarationStatement[837-886]:VariableDeclarationStatement[837-886]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[907-920]:ExpressionStatement[907-920]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[941-947]:BreakStatement[941-947]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1044-1048]:PrimitiveType[1044-1048]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1049-1053]:SimpleName[1049-1053]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[1054-1065]:SingleVariableDeclaration[1054-1065]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[1067-1084]:SingleVariableDeclaration[1067-1084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1086-1297]:Block[1086-1297]"
    }, {
      "left" : "Character c = t.consumeCharacterReference(null, false);",
      "right" : "Character c = t.consumeCharacterReference(null, false);",
      "info" : "VariableDeclarationStatement[1100-1155]:VariableDeclarationStatement[1100-1155]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[1168-1255]:IfStatement[1168-1255]"
    }, {
      "left" : "t.emit('&');",
      "right" : "t.emit('&');",
      "info" : "ExpressionStatement[1199-1211]:ExpressionStatement[1199-1211]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[1245-1255]:ExpressionStatement[1245-1255]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[1268-1287]:ExpressionStatement[1268-1287]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1374-1378]:PrimitiveType[1374-1378]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[1379-1383]:SimpleName[1379-1383]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[1384-1395]:SingleVariableDeclaration[1384-1395]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[1397-1414]:SingleVariableDeclaration[1397-1414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1416-2137]:Block[1416-2137]"
    }, {
      "left" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case '<':\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '&':\n                    t.advanceTransition(CharacterReferenceInRcdata);\n                    break;\n                case '<':\n                    t.advanceTransition(RcdataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('&', '<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[1430-2127]:SwitchStatement[1430-2127]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[1469-1478]:SwitchCase[1469-1478]"
    }, {
      "left" : "t.advanceTransition(CharacterReferenceInRcdata);",
      "right" : "t.advanceTransition(CharacterReferenceInRcdata);",
      "info" : "ExpressionStatement[1499-1547]:ExpressionStatement[1499-1547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1568-1574]:BreakStatement[1568-1574]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[1591-1600]:SwitchCase[1591-1600]"
    }, {
      "left" : "t.advanceTransition(RcdataLessthanSign);",
      "right" : "t.advanceTransition(RcdataLessthanSign);",
      "info" : "ExpressionStatement[1621-1661]:ExpressionStatement[1621-1661]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1682-1688]:BreakStatement[1682-1688]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[1705-1719]:SwitchCase[1705-1719]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[1740-1754]:ExpressionStatement[1740-1754]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[1775-1787]:ExpressionStatement[1775-1787]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[1808-1832]:ExpressionStatement[1808-1832]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1853-1859]:BreakStatement[1853-1859]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[1876-1885]:SwitchCase[1876-1885]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[1906-1930]:ExpressionStatement[1906-1930]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1951-1957]:BreakStatement[1951-1957]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[1974-1982]:SwitchCase[1974-1982]"
    }, {
      "left" : "String data = r.consumeToAny('&', '<', nullChar);",
      "right" : "String data = r.consumeToAny('&', '<', nullChar);",
      "info" : "VariableDeclarationStatement[2003-2052]:VariableDeclarationStatement[2003-2052]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[2073-2086]:ExpressionStatement[2073-2086]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2107-2113]:BreakStatement[2107-2113]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2186-2190]:PrimitiveType[2186-2190]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2191-2195]:SimpleName[2191-2195]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2196-2207]:SingleVariableDeclaration[2196-2207]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2209-2226]:SingleVariableDeclaration[2209-2226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2228-2441]:Block[2228-2441]"
    }, {
      "left" : "Character c = t.consumeCharacterReference(null, false);",
      "right" : "Character c = t.consumeCharacterReference(null, false);",
      "info" : "VariableDeclarationStatement[2242-2297]:VariableDeclarationStatement[2242-2297]"
    }, {
      "left" : "if (c == null)",
      "right" : "if (c == null)",
      "info" : "IfStatement[2310-2397]:IfStatement[2310-2397]"
    }, {
      "left" : "t.emit('&');",
      "right" : "t.emit('&');",
      "info" : "ExpressionStatement[2341-2353]:ExpressionStatement[2341-2353]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[2387-2397]:ExpressionStatement[2387-2397]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[2410-2431]:ExpressionStatement[2410-2431]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2471-2475]:PrimitiveType[2471-2475]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[2476-2480]:SimpleName[2476-2480]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[2481-2492]:SingleVariableDeclaration[2481-2492]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[2494-2511]:SingleVariableDeclaration[2494-2511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2513-3108]:Block[2513-3108]"
    }, {
      "left" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(RawtextLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(RawtextLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[2527-3098]:SwitchStatement[2527-3098]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[2566-2575]:SwitchCase[2566-2575]"
    }, {
      "left" : "t.advanceTransition(RawtextLessthanSign);",
      "right" : "t.advanceTransition(RawtextLessthanSign);",
      "info" : "ExpressionStatement[2596-2637]:ExpressionStatement[2596-2637]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2658-2664]:BreakStatement[2658-2664]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[2681-2695]:SwitchCase[2681-2695]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[2716-2730]:ExpressionStatement[2716-2730]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[2751-2763]:ExpressionStatement[2751-2763]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[2784-2808]:ExpressionStatement[2784-2808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2829-2835]:BreakStatement[2829-2835]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[2852-2861]:SwitchCase[2852-2861]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[2882-2906]:ExpressionStatement[2882-2906]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2927-2933]:BreakStatement[2927-2933]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[2950-2958]:SwitchCase[2950-2958]"
    }, {
      "left" : "String data = r.consumeToAny('<', nullChar);",
      "right" : "String data = r.consumeToAny('<', nullChar);",
      "info" : "VariableDeclarationStatement[2979-3023]:VariableDeclarationStatement[2979-3023]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[3044-3057]:ExpressionStatement[3044-3057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3078-3084]:BreakStatement[3078-3084]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3141-3145]:PrimitiveType[3141-3145]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3146-3150]:SimpleName[3146-3150]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[3151-3162]:SingleVariableDeclaration[3151-3162]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[3164-3181]:SingleVariableDeclaration[3164-3181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3183-3781]:Block[3183-3781]"
    }, {
      "left" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(ScriptDataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '<':\n                    t.advanceTransition(ScriptDataLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeToAny('<', nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[3197-3771]:SwitchStatement[3197-3771]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[3236-3245]:SwitchCase[3236-3245]"
    }, {
      "left" : "t.advanceTransition(ScriptDataLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataLessthanSign);",
      "info" : "ExpressionStatement[3266-3310]:ExpressionStatement[3266-3310]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3331-3337]:BreakStatement[3331-3337]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[3354-3368]:SwitchCase[3354-3368]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[3389-3403]:ExpressionStatement[3389-3403]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[3424-3436]:ExpressionStatement[3424-3436]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[3457-3481]:ExpressionStatement[3457-3481]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3502-3508]:BreakStatement[3502-3508]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[3525-3534]:SwitchCase[3525-3534]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[3555-3579]:ExpressionStatement[3555-3579]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3600-3606]:BreakStatement[3600-3606]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3623-3631]:SwitchCase[3623-3631]"
    }, {
      "left" : "String data = r.consumeToAny('<', nullChar);",
      "right" : "String data = r.consumeToAny('<', nullChar);",
      "info" : "VariableDeclarationStatement[3652-3696]:VariableDeclarationStatement[3652-3696]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[3717-3730]:ExpressionStatement[3717-3730]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3751-3757]:BreakStatement[3751-3757]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3813-3817]:PrimitiveType[3813-3817]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[3818-3822]:SimpleName[3818-3822]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[3823-3834]:SingleVariableDeclaration[3823-3834]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[3836-3853]:SingleVariableDeclaration[3836-3853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3855-4327]:Block[3855-4327]"
    }, {
      "left" : "switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.emit(new Token.EOF());\n                    break;\n                default:\n                    String data = r.consumeTo(nullChar);\n                    t.emit(data);\n                    break;\n            }",
      "info" : "SwitchStatement[3869-4317]:SwitchStatement[3869-4317]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[3908-3922]:SwitchCase[3908-3922]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[3943-3957]:ExpressionStatement[3943-3957]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[3978-3990]:ExpressionStatement[3978-3990]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[4011-4035]:ExpressionStatement[4011-4035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4056-4062]:BreakStatement[4056-4062]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[4079-4088]:SwitchCase[4079-4088]"
    }, {
      "left" : "t.emit(new Token.EOF());",
      "right" : "t.emit(new Token.EOF());",
      "info" : "ExpressionStatement[4109-4133]:ExpressionStatement[4109-4133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4154-4160]:BreakStatement[4154-4160]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4177-4185]:SwitchCase[4177-4185]"
    }, {
      "left" : "String data = r.consumeTo(nullChar);",
      "right" : "String data = r.consumeTo(nullChar);",
      "info" : "VariableDeclarationStatement[4206-4242]:VariableDeclarationStatement[4206-4242]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[4263-4276]:ExpressionStatement[4263-4276]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4297-4303]:BreakStatement[4297-4303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4383-4387]:PrimitiveType[4383-4387]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[4388-4392]:SimpleName[4388-4392]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[4393-4404]:SingleVariableDeclaration[4393-4404]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[4406-4423]:SingleVariableDeclaration[4406-4423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4425-5206]:Block[4425-5206]"
    }, {
      "left" : "switch (r.current()) {\n                case '!':\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case '/':\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case '?':\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit('<'); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }",
      "right" : "switch (r.current()) {\n                case '!':\n                    t.advanceTransition(MarkupDeclarationOpen);\n                    break;\n                case '/':\n                    t.advanceTransition(EndTagOpen);\n                    break;\n                case '?':\n                    t.advanceTransition(BogusComment);\n                    break;\n                default:\n                    if (r.matchesLetter()) {\n                        t.createTagPending(true);\n                        t.transition(TagName);\n                    } else {\n                        t.error(this);\n                        t.emit('<'); // char that got us here\n                        t.transition(Data);\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[4439-5196]:SwitchStatement[4439-5196]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[4478-4487]:SwitchCase[4478-4487]"
    }, {
      "left" : "t.advanceTransition(MarkupDeclarationOpen);",
      "right" : "t.advanceTransition(MarkupDeclarationOpen);",
      "info" : "ExpressionStatement[4508-4551]:ExpressionStatement[4508-4551]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4572-4578]:BreakStatement[4572-4578]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[4595-4604]:SwitchCase[4595-4604]"
    }, {
      "left" : "t.advanceTransition(EndTagOpen);",
      "right" : "t.advanceTransition(EndTagOpen);",
      "info" : "ExpressionStatement[4625-4657]:ExpressionStatement[4625-4657]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4678-4684]:BreakStatement[4678-4684]"
    }, {
      "left" : "case '?':",
      "right" : "case '?':",
      "info" : "SwitchCase[4701-4710]:SwitchCase[4701-4710]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[4731-4765]:ExpressionStatement[4731-4765]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4786-4792]:BreakStatement[4786-4792]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[4809-4817]:SwitchCase[4809-4817]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[4838-5155]:IfStatement[4838-5155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4861-4981]:Block[4861-4981]"
    }, {
      "left" : "t.createTagPending(true);",
      "right" : "t.createTagPending(true);",
      "info" : "ExpressionStatement[4887-4912]:ExpressionStatement[4887-4912]"
    }, {
      "left" : "t.transition(TagName);",
      "right" : "t.transition(TagName);",
      "info" : "ExpressionStatement[4937-4959]:ExpressionStatement[4937-4959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4987-5155]:Block[4987-5155]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5013-5027]:ExpressionStatement[5013-5027]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[5052-5064]:ExpressionStatement[5052-5064]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[5114-5133]:ExpressionStatement[5114-5133]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5176-5182]:BreakStatement[5176-5182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5239-5243]:PrimitiveType[5239-5243]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5244-5248]:SimpleName[5244-5248]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[5249-5260]:SingleVariableDeclaration[5249-5260]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[5262-5279]:SingleVariableDeclaration[5262-5279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5281-5781]:Block[5281-5781]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[5295-5771]:IfStatement[5295-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5312-5427]:Block[5312-5427]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[5330-5347]:ExpressionStatement[5330-5347]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[5364-5377]:ExpressionStatement[5364-5377]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[5394-5413]:ExpressionStatement[5394-5413]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[5433-5771]:IfStatement[5433-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5456-5553]:Block[5456-5553]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[5474-5500]:ExpressionStatement[5474-5500]"
    }, {
      "left" : "t.transition(TagName);",
      "right" : "t.transition(TagName);",
      "info" : "ExpressionStatement[5517-5539]:ExpressionStatement[5517-5539]"
    }, {
      "left" : "if (r.matches('>'))",
      "right" : "if (r.matches('>'))",
      "info" : "IfStatement[5559-5771]:IfStatement[5559-5771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5579-5668]:Block[5579-5668]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5597-5611]:ExpressionStatement[5597-5611]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[5628-5654]:ExpressionStatement[5628-5654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5674-5771]:Block[5674-5771]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[5692-5706]:ExpressionStatement[5692-5706]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[5723-5757]:ExpressionStatement[5723-5757]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5879-5883]:PrimitiveType[5879-5883]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[5884-5888]:SimpleName[5884-5888]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[5889-5900]:SingleVariableDeclaration[5889-5900]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[5902-5919]:SingleVariableDeclaration[5902-5919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5921-6988]:Block[5921-6988]"
    }, {
      "left" : "String tagName = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '>', nullChar).toLowerCase();",
      "right" : "String tagName = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '>', nullChar).toLowerCase();",
      "info" : "VariableDeclarationStatement[6025-6114]:VariableDeclarationStatement[6025-6114]"
    }, {
      "left" : "t.tagPending.appendTagName(tagName);",
      "right" : "t.tagPending.appendTagName(tagName);",
      "info" : "ExpressionStatement[6127-6163]:ExpressionStatement[6127-6163]"
    }, {
      "left" : "switch (r.consume()) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }",
      "right" : "switch (r.consume()) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar: // replacement\n                    t.tagPending.appendTagName(replacementStr);\n                    break;\n                case eof: // should emit pending tag?\n                    t.eofError(this);\n                    t.transition(Data);\n                // no default, as covered with above consumeToAny\n            }",
      "info" : "SwitchStatement[6177-6978]:SwitchStatement[6177-6978]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[6216-6226]:SwitchCase[6216-6226]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[6243-6253]:SwitchCase[6243-6253]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[6270-6280]:SwitchCase[6270-6280]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[6297-6306]:SwitchCase[6297-6306]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[6327-6361]:ExpressionStatement[6327-6361]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6382-6388]:BreakStatement[6382-6388]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[6405-6414]:SwitchCase[6405-6414]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[6435-6469]:ExpressionStatement[6435-6469]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6490-6496]:BreakStatement[6490-6496]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[6513-6522]:SwitchCase[6513-6522]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[6543-6562]:ExpressionStatement[6543-6562]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[6583-6602]:ExpressionStatement[6583-6602]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6623-6629]:BreakStatement[6623-6629]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[6646-6660]:SwitchCase[6646-6660]"
    }, {
      "left" : "t.tagPending.appendTagName(replacementStr);",
      "right" : "t.tagPending.appendTagName(replacementStr);",
      "info" : "ExpressionStatement[6696-6739]:ExpressionStatement[6696-6739]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6760-6766]:BreakStatement[6760-6766]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[6783-6792]:SwitchCase[6783-6792]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[6841-6858]:ExpressionStatement[6841-6858]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[6879-6898]:ExpressionStatement[6879-6898]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7057-7061]:PrimitiveType[7057-7061]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7062-7066]:SimpleName[7062-7066]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[7067-7078]:SingleVariableDeclaration[7067-7078]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[7080-7097]:SingleVariableDeclaration[7080-7097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7099-7802]:Block[7099-7802]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[7113-7792]:IfStatement[7113-7792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7133-7241]:Block[7133-7241]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[7151-7172]:ExpressionStatement[7151-7172]"
    }, {
      "left" : "t.advanceTransition(RCDATAEndTagOpen);",
      "right" : "t.advanceTransition(RCDATAEndTagOpen);",
      "info" : "ExpressionStatement[7189-7227]:ExpressionStatement[7189-7227]"
    }, {
      "left" : "if (r.matchesLetter() && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))",
      "right" : "if (r.matchesLetter() && !r.containsIgnoreCase(\"</\" + t.appropriateEndTagName()))",
      "info" : "IfStatement[7247-7792]:IfStatement[7247-7792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7329-7704]:Block[7329-7704]"
    }, {
      "left" : "t.tagPending = new Token.EndTag(t.appropriateEndTagName());",
      "right" : "t.tagPending = new Token.EndTag(t.appropriateEndTagName());",
      "info" : "ExpressionStatement[7516-7575]:ExpressionStatement[7516-7575]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[7592-7611]:ExpressionStatement[7592-7611]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[7628-7642]:ExpressionStatement[7628-7642]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[7671-7690]:ExpressionStatement[7671-7690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7710-7792]:Block[7710-7792]"
    }, {
      "left" : "t.emit(\"<\");",
      "right" : "t.emit(\"<\");",
      "info" : "ExpressionStatement[7728-7740]:ExpressionStatement[7728-7740]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[7757-7778]:ExpressionStatement[7757-7778]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7841-7845]:PrimitiveType[7841-7845]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[7846-7850]:SimpleName[7846-7850]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[7851-7862]:SingleVariableDeclaration[7851-7862]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[7864-7881]:SingleVariableDeclaration[7864-7881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7883-8285]:Block[7883-8285]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[7897-8275]:IfStatement[7897-8275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7920-8186]:Block[7920-8186]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[7938-7964]:ExpressionStatement[7938-7964]"
    }, {
      "left" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "right" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[7981-8044]:ExpressionStatement[7981-8044]"
    }, {
      "left" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "right" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[8061-8117]:ExpressionStatement[8061-8117]"
    }, {
      "left" : "t.advanceTransition(RCDATAEndTagName);",
      "right" : "t.advanceTransition(RCDATAEndTagName);",
      "info" : "ExpressionStatement[8134-8172]:ExpressionStatement[8134-8172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8192-8275]:Block[8192-8275]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[8210-8223]:ExpressionStatement[8210-8223]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[8240-8261]:ExpressionStatement[8240-8261]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8324-8328]:PrimitiveType[8324-8328]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[8329-8333]:SimpleName[8329-8333]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[8334-8345]:SingleVariableDeclaration[8334-8345]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[8347-8364]:SingleVariableDeclaration[8347-8364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8366-9594]:Block[8366-9594]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[8380-8606]:IfStatement[8380-8606]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8403-8606]:Block[8403-8606]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[8421-8461]:VariableDeclarationStatement[8421-8461]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[8478-8525]:ExpressionStatement[8478-8525]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[8542-8568]:ExpressionStatement[8542-8568]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[8585-8592]:ReturnStatement[8585-8592]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[8620-8641]:VariableDeclarationStatement[8620-8641]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(BeforeAttributeName);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '/':\n                    if (t.isAppropriateEndTagToken())\n                        t.transition(SelfClosingStartTag);\n                    else\n                        anythingElse(t, r);\n                    break;\n                case '>':\n                    if (t.isAppropriateEndTagToken()) {\n                        t.emitTagPending();\n                        t.transition(Data);\n                    }\n                    else\n                        anythingElse(t, r);\n                    break;\n                default:\n                    anythingElse(t, r);\n            }",
      "info" : "SwitchStatement[8654-9584]:SwitchStatement[8654-9584]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[8683-8693]:SwitchCase[8683-8693]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[8710-8720]:SwitchCase[8710-8720]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[8737-8747]:SwitchCase[8737-8747]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[8764-8773]:SwitchCase[8764-8773]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[8794-8955]:IfStatement[8794-8955]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[8852-8886]:ExpressionStatement[8852-8886]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[8936-8955]:ExpressionStatement[8936-8955]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8976-8982]:BreakStatement[8976-8982]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[8999-9008]:SwitchCase[8999-9008]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[9029-9190]:IfStatement[9029-9190]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[9087-9121]:ExpressionStatement[9087-9121]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[9171-9190]:ExpressionStatement[9171-9190]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9211-9217]:BreakStatement[9211-9217]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[9234-9243]:SwitchCase[9234-9243]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken())",
      "right" : "if (t.isAppropriateEndTagToken())",
      "info" : "IfStatement[9264-9478]:IfStatement[9264-9478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9298-9409]:Block[9298-9409]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[9324-9343]:ExpressionStatement[9324-9343]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[9368-9387]:ExpressionStatement[9368-9387]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[9459-9478]:ExpressionStatement[9459-9478]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9499-9505]:BreakStatement[9499-9505]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[9522-9530]:SwitchCase[9522-9530]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[9551-9570]:ExpressionStatement[9551-9570]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9604-9611]:Modifier[9604-9611]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9612-9616]:PrimitiveType[9612-9616]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[9617-9629]:SimpleName[9617-9629]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9630-9641]:SingleVariableDeclaration[9630-9641]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9643-9660]:SingleVariableDeclaration[9643-9660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9662-9759]:Block[9662-9759]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[9676-9715]:ExpressionStatement[9676-9715]"
    }, {
      "left" : "t.transition(Rcdata);",
      "right" : "t.transition(Rcdata);",
      "info" : "ExpressionStatement[9728-9749]:ExpressionStatement[9728-9749]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9801-9805]:PrimitiveType[9801-9805]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[9806-9810]:SimpleName[9806-9810]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[9811-9822]:SingleVariableDeclaration[9811-9822]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[9824-9841]:SingleVariableDeclaration[9824-9841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9843-10085]:Block[9843-10085]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[9857-10075]:IfStatement[9857-10075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9877-9986]:Block[9877-9986]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[9895-9916]:ExpressionStatement[9895-9916]"
    }, {
      "left" : "t.advanceTransition(RawtextEndTagOpen);",
      "right" : "t.advanceTransition(RawtextEndTagOpen);",
      "info" : "ExpressionStatement[9933-9972]:ExpressionStatement[9933-9972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9992-10075]:Block[9992-10075]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[10010-10022]:ExpressionStatement[10010-10022]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[10039-10061]:ExpressionStatement[10039-10061]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10125-10129]:PrimitiveType[10125-10129]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10130-10134]:SimpleName[10130-10134]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[10135-10146]:SingleVariableDeclaration[10135-10146]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[10148-10165]:SingleVariableDeclaration[10148-10165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10167-10411]:Block[10167-10411]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[10181-10401]:IfStatement[10181-10401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10204-10311]:Block[10204-10311]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[10222-10248]:ExpressionStatement[10222-10248]"
    }, {
      "left" : "t.transition(RawtextEndTagName);",
      "right" : "t.transition(RawtextEndTagName);",
      "info" : "ExpressionStatement[10265-10297]:ExpressionStatement[10265-10297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10317-10401]:Block[10317-10401]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[10335-10348]:ExpressionStatement[10335-10348]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[10365-10387]:ExpressionStatement[10365-10387]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10451-10455]:PrimitiveType[10451-10455]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[10456-10460]:SimpleName[10456-10460]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[10461-10472]:SingleVariableDeclaration[10461-10472]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[10474-10491]:SingleVariableDeclaration[10474-10491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10493-11551]:Block[10493-11551]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[10507-10733]:IfStatement[10507-10733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10530-10733]:Block[10530-10733]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[10548-10588]:VariableDeclarationStatement[10548-10588]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[10605-10652]:ExpressionStatement[10605-10652]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[10669-10695]:ExpressionStatement[10669-10695]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10712-10719]:ReturnStatement[10712-10719]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "right" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "info" : "IfStatement[10747-11541]:IfStatement[10747-11541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10797-11500]:Block[10797-11500]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[10815-10836]:VariableDeclarationStatement[10815-10836]"
    }, {
      "left" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }",
      "right" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }",
      "info" : "SwitchStatement[10853-11486]:SwitchStatement[10853-11486]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[10886-10896]:SwitchCase[10886-10896]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[10917-10927]:SwitchCase[10917-10927]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[10948-10958]:SwitchCase[10948-10958]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[10979-10988]:SwitchCase[10979-10988]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[11013-11047]:ExpressionStatement[11013-11047]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11072-11078]:BreakStatement[11072-11078]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[11099-11108]:SwitchCase[11099-11108]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[11133-11167]:ExpressionStatement[11133-11167]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11192-11198]:BreakStatement[11192-11198]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[11219-11228]:SwitchCase[11219-11228]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[11253-11272]:ExpressionStatement[11253-11272]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[11297-11316]:ExpressionStatement[11297-11316]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11341-11347]:BreakStatement[11341-11347]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[11368-11376]:SwitchCase[11368-11376]"
    }, {
      "left" : "t.dataBuffer.append(c);",
      "right" : "t.dataBuffer.append(c);",
      "info" : "ExpressionStatement[11401-11424]:ExpressionStatement[11401-11424]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[11449-11468]:ExpressionStatement[11449-11468]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[11522-11541]:ExpressionStatement[11522-11541]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11561-11568]:Modifier[11561-11568]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11569-11573]:PrimitiveType[11569-11573]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[11574-11586]:SimpleName[11574-11586]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[11587-11598]:SingleVariableDeclaration[11587-11598]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[11600-11617]:SingleVariableDeclaration[11600-11617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11619-11717]:Block[11619-11717]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[11633-11672]:ExpressionStatement[11633-11672]"
    }, {
      "left" : "t.transition(Rawtext);",
      "right" : "t.transition(Rawtext);",
      "info" : "ExpressionStatement[11685-11707]:ExpressionStatement[11685-11707]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11762-11766]:PrimitiveType[11762-11766]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[11767-11771]:SimpleName[11767-11771]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[11772-11783]:SingleVariableDeclaration[11772-11783]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[11785-11802]:SingleVariableDeclaration[11785-11802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11804-12298]:Block[11804-12298]"
    }, {
      "left" : "switch (r.consume()) {\n                case '/':\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case '!':\n                    t.emit(\"<!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"<\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }",
      "right" : "switch (r.consume()) {\n                case '/':\n                    t.createTempBuffer();\n                    t.transition(ScriptDataEndTagOpen);\n                    break;\n                case '!':\n                    t.emit(\"<!\");\n                    t.transition(ScriptDataEscapeStart);\n                    break;\n                default:\n                    t.emit(\"<\");\n                    r.unconsume();\n                    t.transition(ScriptData);\n            }",
      "info" : "SwitchStatement[11818-12288]:SwitchStatement[11818-12288]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[11857-11866]:SwitchCase[11857-11866]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[11887-11908]:ExpressionStatement[11887-11908]"
    }, {
      "left" : "t.transition(ScriptDataEndTagOpen);",
      "right" : "t.transition(ScriptDataEndTagOpen);",
      "info" : "ExpressionStatement[11929-11964]:ExpressionStatement[11929-11964]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11985-11991]:BreakStatement[11985-11991]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[12008-12017]:SwitchCase[12008-12017]"
    }, {
      "left" : "t.emit(\"<!\");",
      "right" : "t.emit(\"<!\");",
      "info" : "ExpressionStatement[12038-12051]:ExpressionStatement[12038-12051]"
    }, {
      "left" : "t.transition(ScriptDataEscapeStart);",
      "right" : "t.transition(ScriptDataEscapeStart);",
      "info" : "ExpressionStatement[12072-12108]:ExpressionStatement[12072-12108]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12129-12135]:BreakStatement[12129-12135]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[12152-12160]:SwitchCase[12152-12160]"
    }, {
      "left" : "t.emit(\"<\");",
      "right" : "t.emit(\"<\");",
      "info" : "ExpressionStatement[12181-12193]:ExpressionStatement[12181-12193]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[12214-12228]:ExpressionStatement[12214-12228]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[12249-12274]:ExpressionStatement[12249-12274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12341-12345]:PrimitiveType[12341-12345]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12346-12350]:SimpleName[12346-12350]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[12351-12362]:SingleVariableDeclaration[12351-12362]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[12364-12381]:SingleVariableDeclaration[12364-12381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12383-12634]:Block[12383-12634]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[12397-12623]:IfStatement[12397-12623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12420-12530]:Block[12420-12530]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[12438-12464]:ExpressionStatement[12438-12464]"
    }, {
      "left" : "t.transition(ScriptDataEndTagName);",
      "right" : "t.transition(ScriptDataEndTagName);",
      "info" : "ExpressionStatement[12481-12516]:ExpressionStatement[12481-12516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12536-12623]:Block[12536-12623]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[12554-12567]:ExpressionStatement[12554-12567]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[12584-12609]:ExpressionStatement[12584-12609]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12677-12681]:PrimitiveType[12677-12681]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[12682-12686]:SimpleName[12682-12686]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[12687-12698]:SingleVariableDeclaration[12687-12698]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[12700-12717]:SingleVariableDeclaration[12700-12717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12719-13793]:Block[12719-13793]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[12733-12959]:IfStatement[12733-12959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12756-12959]:Block[12756-12959]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[12774-12814]:VariableDeclarationStatement[12774-12814]"
    }, {
      "left" : "t.tagPending.appendTagName(name.toLowerCase());",
      "right" : "t.tagPending.appendTagName(name.toLowerCase());",
      "info" : "ExpressionStatement[12831-12878]:ExpressionStatement[12831-12878]"
    }, {
      "left" : "t.dataBuffer.append(name);",
      "right" : "t.dataBuffer.append(name);",
      "info" : "ExpressionStatement[12895-12921]:ExpressionStatement[12895-12921]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12938-12945]:ReturnStatement[12938-12945]"
    }, {
      "left" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "right" : "if (t.isAppropriateEndTagToken() && !r.isEmpty())",
      "info" : "IfStatement[12973-13783]:IfStatement[12973-13783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13023-13726]:Block[13023-13726]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[13041-13062]:VariableDeclarationStatement[13041-13062]"
    }, {
      "left" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }",
      "right" : "switch (c) {\n                    case '\\t':\n                    case '\\n':\n                    case '\\f':\n                    case ' ':\n                        t.transition(BeforeAttributeName);\n                        break;\n                    case '/':\n                        t.transition(SelfClosingStartTag);\n                        break;\n                    case '>':\n                        t.emitTagPending();\n                        t.transition(Data);\n                        break;\n                    default:\n                        t.dataBuffer.append(c);\n                        anythingElse(t, r);\n                }",
      "info" : "SwitchStatement[13079-13712]:SwitchStatement[13079-13712]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[13112-13122]:SwitchCase[13112-13122]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[13143-13153]:SwitchCase[13143-13153]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[13174-13184]:SwitchCase[13174-13184]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[13205-13214]:SwitchCase[13205-13214]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[13239-13273]:ExpressionStatement[13239-13273]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13298-13304]:BreakStatement[13298-13304]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[13325-13334]:SwitchCase[13325-13334]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[13359-13393]:ExpressionStatement[13359-13393]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13418-13424]:BreakStatement[13418-13424]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[13445-13454]:SwitchCase[13445-13454]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[13479-13498]:ExpressionStatement[13479-13498]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[13523-13542]:ExpressionStatement[13523-13542]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13567-13573]:BreakStatement[13567-13573]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[13594-13602]:SwitchCase[13594-13602]"
    }, {
      "left" : "t.dataBuffer.append(c);",
      "right" : "t.dataBuffer.append(c);",
      "info" : "ExpressionStatement[13627-13650]:ExpressionStatement[13627-13650]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[13675-13694]:ExpressionStatement[13675-13694]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13732-13783]:Block[13732-13783]"
    }, {
      "left" : "anythingElse(t, r);",
      "right" : "anythingElse(t, r);",
      "info" : "ExpressionStatement[13750-13769]:ExpressionStatement[13750-13769]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13803-13810]:Modifier[13803-13810]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13811-13815]:PrimitiveType[13811-13815]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[13816-13828]:SimpleName[13816-13828]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[13829-13840]:SingleVariableDeclaration[13829-13840]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[13842-13859]:SingleVariableDeclaration[13842-13859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13861-13962]:Block[13861-13962]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[13875-13914]:ExpressionStatement[13875-13914]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[13927-13952]:ExpressionStatement[13927-13952]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14006-14010]:PrimitiveType[14006-14010]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14011-14015]:SimpleName[14011-14015]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14016-14027]:SingleVariableDeclaration[14016-14027]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14029-14046]:SingleVariableDeclaration[14029-14046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14048-14263]:Block[14048-14263]"
    }, {
      "left" : "if (r.matches('-'))",
      "right" : "if (r.matches('-'))",
      "info" : "IfStatement[14062-14253]:IfStatement[14062-14253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14082-14190]:Block[14082-14190]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14100-14112]:ExpressionStatement[14100-14112]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapeStartDash);",
      "right" : "t.advanceTransition(ScriptDataEscapeStartDash);",
      "info" : "ExpressionStatement[14129-14176]:ExpressionStatement[14129-14176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14196-14253]:Block[14196-14253]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[14214-14239]:ExpressionStatement[14214-14239]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14311-14315]:PrimitiveType[14311-14315]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14316-14320]:SimpleName[14316-14320]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14321-14332]:SingleVariableDeclaration[14321-14332]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14334-14351]:SingleVariableDeclaration[14334-14351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14353-14568]:Block[14353-14568]"
    }, {
      "left" : "if (r.matches('-'))",
      "right" : "if (r.matches('-'))",
      "info" : "IfStatement[14367-14558]:IfStatement[14367-14558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14387-14495]:Block[14387-14495]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14405-14417]:ExpressionStatement[14405-14417]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedDashDash);",
      "right" : "t.advanceTransition(ScriptDataEscapedDashDash);",
      "info" : "ExpressionStatement[14434-14481]:ExpressionStatement[14434-14481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14501-14558]:Block[14501-14558]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[14519-14544]:ExpressionStatement[14519-14544]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14608-14612]:PrimitiveType[14608-14612]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[14613-14617]:SimpleName[14613-14617]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[14618-14629]:SingleVariableDeclaration[14618-14629]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[14631-14648]:SingleVariableDeclaration[14631-14648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14650-15425]:Block[14650-15425]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[14664-14790]:IfStatement[14664-14790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14681-14790]:Block[14681-14790]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[14699-14716]:ExpressionStatement[14699-14716]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[14733-14752]:ExpressionStatement[14733-14752]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14769-14776]:ReturnStatement[14769-14776]"
    }, {
      "left" : "switch (r.current()) {\n                case '-':\n                    t.emit('-');\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case '<':\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "right" : "switch (r.current()) {\n                case '-':\n                    t.emit('-');\n                    t.advanceTransition(ScriptDataEscapedDash);\n                    break;\n                case '<':\n                    t.advanceTransition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "info" : "SwitchStatement[14804-15415]:SwitchStatement[14804-15415]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[14843-14852]:SwitchCase[14843-14852]"
    }, {
      "left" : "t.emit('-');",
      "right" : "t.emit('-');",
      "info" : "ExpressionStatement[14873-14885]:ExpressionStatement[14873-14885]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedDash);",
      "right" : "t.advanceTransition(ScriptDataEscapedDash);",
      "info" : "ExpressionStatement[14906-14949]:ExpressionStatement[14906-14949]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14970-14976]:BreakStatement[14970-14976]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[14993-15002]:SwitchCase[14993-15002]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[15023-15074]:ExpressionStatement[15023-15074]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15095-15101]:BreakStatement[15095-15101]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[15118-15132]:SwitchCase[15118-15132]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[15153-15167]:ExpressionStatement[15153-15167]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[15188-15200]:ExpressionStatement[15188-15200]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[15221-15245]:ExpressionStatement[15221-15245]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15266-15272]:BreakStatement[15266-15272]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15289-15297]:SwitchCase[15289-15297]"
    }, {
      "left" : "String data = r.consumeToAny('-', '<', nullChar);",
      "right" : "String data = r.consumeToAny('-', '<', nullChar);",
      "info" : "VariableDeclarationStatement[15318-15367]:VariableDeclarationStatement[15318-15367]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[15388-15401]:ExpressionStatement[15388-15401]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15469-15473]:PrimitiveType[15469-15473]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[15474-15478]:SimpleName[15474-15478]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[15479-15490]:SingleVariableDeclaration[15479-15490]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[15492-15509]:SingleVariableDeclaration[15492-15509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15511-16298]:Block[15511-16298]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[15525-15651]:IfStatement[15525-15651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15542-15651]:Block[15542-15651]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[15560-15577]:ExpressionStatement[15560-15577]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[15594-15613]:ExpressionStatement[15594-15613]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15630-15637]:ReturnStatement[15630-15637]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[15665-15686]:VariableDeclarationStatement[15665-15686]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataEscapedDashDash);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[15699-16288]:SwitchStatement[15699-16288]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[15728-15737]:SwitchCase[15728-15737]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[15758-15768]:ExpressionStatement[15758-15768]"
    }, {
      "left" : "t.transition(ScriptDataEscapedDashDash);",
      "right" : "t.transition(ScriptDataEscapedDashDash);",
      "info" : "ExpressionStatement[15789-15829]:ExpressionStatement[15789-15829]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15850-15856]:BreakStatement[15850-15856]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[15873-15882]:SwitchCase[15873-15882]"
    }, {
      "left" : "t.transition(ScriptDataEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[15903-15947]:ExpressionStatement[15903-15947]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15968-15974]:BreakStatement[15968-15974]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[15991-16005]:SwitchCase[15991-16005]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[16026-16040]:ExpressionStatement[16026-16040]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[16061-16085]:ExpressionStatement[16061-16085]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[16106-16138]:ExpressionStatement[16106-16138]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16159-16165]:BreakStatement[16159-16165]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[16182-16190]:SwitchCase[16182-16190]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16211-16221]:ExpressionStatement[16211-16221]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[16242-16274]:ExpressionStatement[16242-16274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16346-16350]:PrimitiveType[16346-16350]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[16351-16355]:SimpleName[16351-16355]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[16356-16367]:SingleVariableDeclaration[16356-16367]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[16369-16386]:SingleVariableDeclaration[16369-16386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16388-17244]:Block[16388-17244]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[16402-16528]:IfStatement[16402-16528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16419-16528]:Block[16419-16528]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[16437-16454]:ExpressionStatement[16437-16454]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[16471-16490]:ExpressionStatement[16471-16490]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[16507-16514]:ReturnStatement[16507-16514]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[16542-16563]:VariableDeclarationStatement[16542-16563]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.transition(ScriptDataEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataEscaped);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[16576-17234]:SwitchStatement[16576-17234]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[16605-16614]:SwitchCase[16605-16614]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16635-16645]:ExpressionStatement[16635-16645]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16666-16672]:BreakStatement[16666-16672]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[16689-16698]:SwitchCase[16689-16698]"
    }, {
      "left" : "t.transition(ScriptDataEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataEscapedLessthanSign);",
      "info" : "ExpressionStatement[16719-16763]:ExpressionStatement[16719-16763]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16784-16790]:BreakStatement[16784-16790]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[16807-16816]:SwitchCase[16807-16816]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[16837-16847]:ExpressionStatement[16837-16847]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[16868-16893]:ExpressionStatement[16868-16893]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16914-16920]:BreakStatement[16914-16920]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[16937-16951]:SwitchCase[16937-16951]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[16972-16986]:ExpressionStatement[16972-16986]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[17007-17031]:ExpressionStatement[17007-17031]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17052-17084]:ExpressionStatement[17052-17084]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17105-17111]:BreakStatement[17105-17111]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17128-17136]:SwitchCase[17128-17136]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[17157-17167]:ExpressionStatement[17157-17167]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17188-17220]:ExpressionStatement[17188-17220]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17296-17300]:PrimitiveType[17296-17300]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17301-17305]:SimpleName[17301-17305]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[17306-17317]:SingleVariableDeclaration[17306-17317]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[17319-17336]:SingleVariableDeclaration[17319-17336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17338-17864]:Block[17338-17864]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[17352-17854]:IfStatement[17352-17854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17375-17610]:Block[17375-17610]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[17393-17414]:ExpressionStatement[17393-17414]"
    }, {
      "left" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "right" : "t.dataBuffer.append(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[17431-17487]:ExpressionStatement[17431-17487]"
    }, {
      "left" : "t.emit(\"<\" + r.current());",
      "right" : "t.emit(\"<\" + r.current());",
      "info" : "ExpressionStatement[17504-17530]:ExpressionStatement[17504-17530]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapeStart);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapeStart);",
      "info" : "ExpressionStatement[17547-17596]:ExpressionStatement[17547-17596]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[17616-17854]:IfStatement[17616-17854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17636-17755]:Block[17636-17755]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[17654-17675]:ExpressionStatement[17654-17675]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedEndTagOpen);",
      "right" : "t.advanceTransition(ScriptDataEscapedEndTagOpen);",
      "info" : "ExpressionStatement[17692-17741]:ExpressionStatement[17692-17741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17761-17854]:Block[17761-17854]"
    }, {
      "left" : "t.emit('<');",
      "right" : "t.emit('<');",
      "info" : "ExpressionStatement[17779-17791]:ExpressionStatement[17779-17791]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[17808-17840]:ExpressionStatement[17808-17840]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17914-17918]:PrimitiveType[17914-17918]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[17919-17923]:SimpleName[17919-17923]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[17924-17935]:SingleVariableDeclaration[17924-17935]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[17937-17954]:SingleVariableDeclaration[17937-17954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17956-18357]:Block[17956-18357]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[17970-18347]:IfStatement[17970-18347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17993-18247]:Block[17993-18247]"
    }, {
      "left" : "t.createTagPending(false);",
      "right" : "t.createTagPending(false);",
      "info" : "ExpressionStatement[18011-18037]:ExpressionStatement[18011-18037]"
    }, {
      "left" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "right" : "t.tagPending.appendTagName(Character.toLowerCase(r.current()));",
      "info" : "ExpressionStatement[18054-18117]:ExpressionStatement[18054-18117]"
    }, {
      "left" : "t.dataBuffer.append(r.current());",
      "right" : "t.dataBuffer.append(r.current());",
      "info" : "ExpressionStatement[18134-18167]:ExpressionStatement[18134-18167]"
    }, {
      "left" : "t.advanceTransition(ScriptDataEscapedEndTagName);",
      "right" : "t.advanceTransition(ScriptDataEscapedEndTagName);",
      "info" : "ExpressionStatement[18184-18233]:ExpressionStatement[18184-18233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18253-18347]:Block[18253-18347]"
    }, {
      "left" : "t.emit(\"</\");",
      "right" : "t.emit(\"</\");",
      "info" : "ExpressionStatement[18271-18284]:ExpressionStatement[18271-18284]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[18301-18333]:ExpressionStatement[18301-18333]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19601-19608]:Modifier[19572-19579]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19609-19613]:PrimitiveType[19580-19584]"
    }, {
      "left" : "anythingElse",
      "right" : "anythingElse",
      "info" : "SimpleName[19614-19626]:SimpleName[19585-19597]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[19627-19638]:SingleVariableDeclaration[19598-19609]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[19640-19657]:SingleVariableDeclaration[19611-19628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19659-19767]:Block[19630-19738]"
    }, {
      "left" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "right" : "t.emit(\"</\" + t.dataBuffer.toString());",
      "info" : "ExpressionStatement[19673-19712]:ExpressionStatement[19644-19683]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[19725-19757]:ExpressionStatement[19696-19728]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19817-19821]:PrimitiveType[19788-19792]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[19822-19826]:SimpleName[19793-19797]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[19827-19838]:SingleVariableDeclaration[19798-19809]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[19840-19857]:SingleVariableDeclaration[19811-19828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19859-20704]:Block[19830-20675]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[19873-20079]:IfStatement[19844-20050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19896-20079]:Block[19867-20050]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[19914-19954]:VariableDeclarationStatement[19885-19925]"
    }, {
      "left" : "t.dataBuffer.append(name.toLowerCase());",
      "right" : "t.dataBuffer.append(name.toLowerCase());",
      "info" : "ExpressionStatement[19971-20011]:ExpressionStatement[19942-19982]"
    }, {
      "left" : "t.emit(name);",
      "right" : "t.emit(name);",
      "info" : "ExpressionStatement[20028-20041]:ExpressionStatement[19999-20012]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20058-20065]:ReturnStatement[20029-20036]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[20093-20114]:VariableDeclarationStatement[20064-20085]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataDoubleEscaped);\n                    else\n                        t.transition(ScriptDataEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataEscaped);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataDoubleEscaped);\n                    else\n                        t.transition(ScriptDataEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataEscaped);\n            }",
      "info" : "SwitchStatement[20127-20694]:SwitchStatement[20098-20665]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[20156-20166]:SwitchCase[20127-20137]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[20183-20193]:SwitchCase[20154-20164]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[20210-20220]:SwitchCase[20181-20191]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[20237-20246]:SwitchCase[20208-20217]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[20263-20272]:SwitchCase[20234-20243]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[20289-20298]:SwitchCase[20260-20269]"
    }, {
      "left" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "right" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "info" : "IfStatement[20319-20509]:IfStatement[20290-20480]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[20389-20427]:ExpressionStatement[20360-20398]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[20477-20509]:ExpressionStatement[20448-20480]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[20530-20540]:ExpressionStatement[20501-20511]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20561-20567]:BreakStatement[20532-20538]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20584-20592]:SwitchCase[20555-20563]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[20613-20627]:ExpressionStatement[20584-20598]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[20648-20680]:ExpressionStatement[20619-20651]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[20750-20754]:PrimitiveType[20721-20725]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[20755-20759]:SimpleName[20726-20730]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[20760-20771]:SingleVariableDeclaration[20731-20742]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[20773-20790]:SingleVariableDeclaration[20744-20761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20792-21623]:Block[20763-21594]"
    }, {
      "left" : "char c = r.current();",
      "right" : "char c = r.current();",
      "info" : "VariableDeclarationStatement[20806-20827]:VariableDeclarationStatement[20777-20798]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.emit(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    String data = r.consumeToAny('-', '<', nullChar);\n                    t.emit(data);\n            }",
      "info" : "SwitchStatement[20840-21613]:SwitchStatement[20811-21584]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[20869-20878]:SwitchCase[20840-20849]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[20899-20909]:ExpressionStatement[20870-20880]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapedDash);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapedDash);",
      "info" : "ExpressionStatement[20930-20979]:ExpressionStatement[20901-20950]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21000-21006]:BreakStatement[20971-20977]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[21023-21032]:SwitchCase[20994-21003]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[21053-21063]:ExpressionStatement[21024-21034]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[21084-21141]:ExpressionStatement[21055-21112]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21162-21168]:BreakStatement[21133-21139]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[21185-21199]:SwitchCase[21156-21170]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[21220-21234]:ExpressionStatement[21191-21205]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[21255-21267]:ExpressionStatement[21226-21238]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[21288-21312]:ExpressionStatement[21259-21283]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21333-21339]:BreakStatement[21304-21310]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[21356-21365]:SwitchCase[21327-21336]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[21386-21403]:ExpressionStatement[21357-21374]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[21424-21443]:ExpressionStatement[21395-21414]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21464-21470]:BreakStatement[21435-21441]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21487-21495]:SwitchCase[21458-21466]"
    }, {
      "left" : "String data = r.consumeToAny('-', '<', nullChar);",
      "right" : "String data = r.consumeToAny('-', '<', nullChar);",
      "info" : "VariableDeclarationStatement[21516-21565]:VariableDeclarationStatement[21487-21536]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[21586-21599]:ExpressionStatement[21557-21570]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21673-21677]:PrimitiveType[21644-21648]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[21678-21682]:SimpleName[21649-21653]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[21683-21694]:SingleVariableDeclaration[21654-21665]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[21696-21713]:SingleVariableDeclaration[21667-21684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21715-22548]:Block[21686-22519]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[21729-21750]:VariableDeclarationStatement[21700-21721]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedDashDash);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[21763-22538]:SwitchStatement[21734-22509]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[21792-21801]:SwitchCase[21763-21772]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[21822-21832]:ExpressionStatement[21793-21803]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedDashDash);",
      "right" : "t.transition(ScriptDataDoubleEscapedDashDash);",
      "info" : "ExpressionStatement[21853-21899]:ExpressionStatement[21824-21870]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21920-21926]:BreakStatement[21891-21897]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[21943-21952]:SwitchCase[21914-21923]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[21973-21983]:ExpressionStatement[21944-21954]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[22004-22054]:ExpressionStatement[21975-22025]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22075-22081]:BreakStatement[22046-22052]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[22098-22112]:SwitchCase[22069-22083]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[22133-22147]:ExpressionStatement[22104-22118]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[22168-22192]:ExpressionStatement[22139-22163]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[22213-22251]:ExpressionStatement[22184-22222]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22272-22278]:BreakStatement[22243-22249]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[22295-22304]:SwitchCase[22266-22275]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[22325-22342]:ExpressionStatement[22296-22313]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[22363-22382]:ExpressionStatement[22334-22353]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22403-22409]:BreakStatement[22374-22380]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[22426-22434]:SwitchCase[22397-22405]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22455-22465]:ExpressionStatement[22426-22436]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[22486-22524]:ExpressionStatement[22457-22495]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22602-22606]:PrimitiveType[22573-22577]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[22607-22611]:SimpleName[22578-22582]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[22612-22623]:SingleVariableDeclaration[22583-22594]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[22625-22642]:SingleVariableDeclaration[22596-22613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22644-23540]:Block[22615-23511]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[22658-22679]:VariableDeclarationStatement[22629-22650]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.emit(c);\n                    break;\n                case '<':\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscapedLessthanSign);\n                    break;\n                case '>':\n                    t.emit(c);\n                    t.transition(ScriptData);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.emit(replacementChar);\n                    t.transition(ScriptDataDoubleEscaped);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.emit(c);\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[22692-23530]:SwitchStatement[22663-23501]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[22721-22730]:SwitchCase[22692-22701]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22751-22761]:ExpressionStatement[22722-22732]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22782-22788]:BreakStatement[22753-22759]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[22805-22814]:SwitchCase[22776-22785]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22835-22845]:ExpressionStatement[22806-22816]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "right" : "t.transition(ScriptDataDoubleEscapedLessthanSign);",
      "info" : "ExpressionStatement[22866-22916]:ExpressionStatement[22837-22887]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22937-22943]:BreakStatement[22908-22914]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[22960-22969]:SwitchCase[22931-22940]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[22990-23000]:ExpressionStatement[22961-22971]"
    }, {
      "left" : "t.transition(ScriptData);",
      "right" : "t.transition(ScriptData);",
      "info" : "ExpressionStatement[23021-23046]:ExpressionStatement[22992-23017]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23067-23073]:BreakStatement[23038-23044]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[23090-23104]:SwitchCase[23061-23075]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[23125-23139]:ExpressionStatement[23096-23110]"
    }, {
      "left" : "t.emit(replacementChar);",
      "right" : "t.emit(replacementChar);",
      "info" : "ExpressionStatement[23160-23184]:ExpressionStatement[23131-23155]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23205-23243]:ExpressionStatement[23176-23214]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23264-23270]:BreakStatement[23235-23241]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[23287-23296]:SwitchCase[23258-23267]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[23317-23334]:ExpressionStatement[23288-23305]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[23355-23374]:ExpressionStatement[23326-23345]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23395-23401]:BreakStatement[23366-23372]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[23418-23426]:SwitchCase[23389-23397]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[23447-23457]:ExpressionStatement[23418-23428]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23478-23516]:ExpressionStatement[23449-23487]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23598-23602]:PrimitiveType[23569-23573]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[23603-23607]:SimpleName[23574-23578]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[23608-23619]:SingleVariableDeclaration[23579-23590]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[23621-23638]:SingleVariableDeclaration[23592-23609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23640-23906]:Block[23611-23877]"
    }, {
      "left" : "if (r.matches('/'))",
      "right" : "if (r.matches('/'))",
      "info" : "IfStatement[23654-23896]:IfStatement[23625-23867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23674-23820]:Block[23645-23791]"
    }, {
      "left" : "t.emit('/');",
      "right" : "t.emit('/');",
      "info" : "ExpressionStatement[23692-23704]:ExpressionStatement[23663-23675]"
    }, {
      "left" : "t.createTempBuffer();",
      "right" : "t.createTempBuffer();",
      "info" : "ExpressionStatement[23721-23742]:ExpressionStatement[23692-23713]"
    }, {
      "left" : "t.advanceTransition(ScriptDataDoubleEscapeEnd);",
      "right" : "t.advanceTransition(ScriptDataDoubleEscapeEnd);",
      "info" : "ExpressionStatement[23759-23806]:ExpressionStatement[23730-23777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23826-23896]:Block[23797-23867]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[23844-23882]:ExpressionStatement[23815-23853]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23954-23958]:PrimitiveType[23925-23929]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[23959-23963]:SimpleName[23930-23934]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[23964-23975]:SingleVariableDeclaration[23935-23946]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[23977-23994]:SingleVariableDeclaration[23948-23965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23996-24847]:Block[23967-24818]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[24010-24216]:IfStatement[23981-24187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24033-24216]:Block[24004-24187]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[24051-24091]:VariableDeclarationStatement[24022-24062]"
    }, {
      "left" : "t.dataBuffer.append(name.toLowerCase());",
      "right" : "t.dataBuffer.append(name.toLowerCase());",
      "info" : "ExpressionStatement[24108-24148]:ExpressionStatement[24079-24119]"
    }, {
      "left" : "t.emit(name);",
      "right" : "t.emit(name);",
      "info" : "ExpressionStatement[24165-24178]:ExpressionStatement[24136-24149]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24195-24202]:ReturnStatement[24166-24173]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[24230-24251]:VariableDeclarationStatement[24201-24222]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataEscaped);\n                    else\n                        t.transition(ScriptDataDoubleEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                case '/':\n                case '>':\n                    if (t.dataBuffer.toString().equals(\"script\"))\n                        t.transition(ScriptDataEscaped);\n                    else\n                        t.transition(ScriptDataDoubleEscaped);\n                    t.emit(c);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(ScriptDataDoubleEscaped);\n            }",
      "info" : "SwitchStatement[24264-24837]:SwitchStatement[24235-24808]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[24293-24303]:SwitchCase[24264-24274]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[24320-24330]:SwitchCase[24291-24301]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[24347-24357]:SwitchCase[24318-24328]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[24374-24383]:SwitchCase[24345-24354]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[24400-24409]:SwitchCase[24371-24380]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[24426-24435]:SwitchCase[24397-24406]"
    }, {
      "left" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "right" : "if (t.dataBuffer.toString().equals(\"script\"))",
      "info" : "IfStatement[24456-24646]:IfStatement[24427-24617]"
    }, {
      "left" : "t.transition(ScriptDataEscaped);",
      "right" : "t.transition(ScriptDataEscaped);",
      "info" : "ExpressionStatement[24526-24558]:ExpressionStatement[24497-24529]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[24608-24646]:ExpressionStatement[24579-24617]"
    }, {
      "left" : "t.emit(c);",
      "right" : "t.emit(c);",
      "info" : "ExpressionStatement[24667-24677]:ExpressionStatement[24638-24648]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[24698-24704]:BreakStatement[24669-24675]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[24721-24729]:SwitchCase[24692-24700]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[24750-24764]:ExpressionStatement[24721-24735]"
    }, {
      "left" : "t.transition(ScriptDataDoubleEscaped);",
      "right" : "t.transition(ScriptDataDoubleEscaped);",
      "info" : "ExpressionStatement[24785-24823]:ExpressionStatement[24756-24794]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[24918-24922]:PrimitiveType[24889-24893]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[24923-24927]:SimpleName[24894-24898]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[24928-24939]:SingleVariableDeclaration[24899-24910]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[24941-24958]:SingleVariableDeclaration[24912-24929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24960-26299]:Block[24931-26270]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[24974-24995]:VariableDeclarationStatement[24945-24966]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "info" : "SwitchStatement[25008-26289]:SwitchStatement[24979-26260]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[25037-25047]:SwitchCase[25008-25018]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[25064-25074]:SwitchCase[25035-25045]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[25091-25101]:SwitchCase[25062-25072]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[25118-25127]:SwitchCase[25089-25098]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25148-25154]:BreakStatement[25119-25125]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[25192-25201]:SwitchCase[25163-25172]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[25222-25256]:ExpressionStatement[25193-25227]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25277-25283]:BreakStatement[25248-25254]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[25300-25309]:SwitchCase[25271-25280]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[25330-25349]:ExpressionStatement[25301-25320]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[25370-25389]:ExpressionStatement[25341-25360]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25410-25416]:BreakStatement[25381-25387]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[25433-25447]:SwitchCase[25404-25418]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[25468-25482]:ExpressionStatement[25439-25453]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[25503-25531]:ExpressionStatement[25474-25502]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[25552-25566]:ExpressionStatement[25523-25537]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[25587-25615]:ExpressionStatement[25558-25586]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25636-25642]:BreakStatement[25607-25613]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[25659-25668]:SwitchCase[25630-25639]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[25689-25706]:ExpressionStatement[25660-25677]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[25727-25746]:ExpressionStatement[25698-25717]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[25767-25773]:BreakStatement[25738-25744]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[25790-25799]:SwitchCase[25761-25770]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[25816-25826]:SwitchCase[25787-25797]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[25843-25852]:SwitchCase[25814-25823]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[25869-25878]:SwitchCase[25840-25849]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[25899-25913]:ExpressionStatement[25870-25884]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[25934-25962]:ExpressionStatement[25905-25933]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[25983-26019]:ExpressionStatement[25954-25990]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[26040-26068]:ExpressionStatement[26011-26039]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26089-26095]:BreakStatement[26060-26066]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26112-26120]:SwitchCase[26083-26091]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[26163-26191]:ExpressionStatement[26134-26162]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[26212-26226]:ExpressionStatement[26183-26197]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[26247-26275]:ExpressionStatement[26218-26246]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26373-26377]:PrimitiveType[26344-26348]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[26378-26382]:SimpleName[26349-26353]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[26383-26394]:SingleVariableDeclaration[26354-26365]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[26396-26413]:SingleVariableDeclaration[26367-26384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26415-27734]:Block[26386-27705]"
    }, {
      "left" : "String name = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');",
      "right" : "String name = r.consumeToAny('\\t', '\\n', '\\f', ' ', '/', '=', '>', nullChar, '\"', '\\'', '<');",
      "info" : "VariableDeclarationStatement[26429-26522]:VariableDeclarationStatement[26400-26493]"
    }, {
      "left" : "t.tagPending.appendAttributeName(name.toLowerCase());",
      "right" : "t.tagPending.appendAttributeName(name.toLowerCase());",
      "info" : "ExpressionStatement[26535-26588]:ExpressionStatement[26506-26559]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[26602-26623]:VariableDeclarationStatement[26573-26594]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.appendAttributeName(c);\n                // no default, as covered in consumeToAny\n            }",
      "info" : "SwitchStatement[26636-27724]:SwitchStatement[26607-27695]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[26665-26675]:SwitchCase[26636-26646]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[26692-26702]:SwitchCase[26663-26673]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[26719-26729]:SwitchCase[26690-26700]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[26746-26755]:SwitchCase[26717-26726]"
    }, {
      "left" : "t.transition(AfterAttributeName);",
      "right" : "t.transition(AfterAttributeName);",
      "info" : "ExpressionStatement[26776-26809]:ExpressionStatement[26747-26780]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26830-26836]:BreakStatement[26801-26807]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[26853-26862]:SwitchCase[26824-26833]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[26883-26917]:ExpressionStatement[26854-26888]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[26938-26944]:BreakStatement[26909-26915]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[26961-26970]:SwitchCase[26932-26941]"
    }, {
      "left" : "t.transition(BeforeAttributeValue);",
      "right" : "t.transition(BeforeAttributeValue);",
      "info" : "ExpressionStatement[26991-27026]:ExpressionStatement[26962-26997]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27047-27053]:BreakStatement[27018-27024]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[27070-27079]:SwitchCase[27041-27050]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[27100-27119]:ExpressionStatement[27071-27090]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[27140-27159]:ExpressionStatement[27111-27130]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27180-27186]:BreakStatement[27151-27157]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[27203-27217]:SwitchCase[27174-27188]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[27238-27252]:ExpressionStatement[27209-27223]"
    }, {
      "left" : "t.tagPending.appendAttributeName(replacementChar);",
      "right" : "t.tagPending.appendAttributeName(replacementChar);",
      "info" : "ExpressionStatement[27273-27323]:ExpressionStatement[27244-27294]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27344-27350]:BreakStatement[27315-27321]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[27367-27376]:SwitchCase[27338-27347]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[27397-27414]:ExpressionStatement[27368-27385]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[27435-27454]:ExpressionStatement[27406-27425]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[27475-27481]:BreakStatement[27446-27452]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[27498-27507]:SwitchCase[27469-27478]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[27524-27534]:SwitchCase[27495-27505]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[27551-27560]:SwitchCase[27522-27531]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[27581-27595]:ExpressionStatement[27552-27566]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[27616-27652]:ExpressionStatement[27587-27623]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27775-27779]:PrimitiveType[27746-27750]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[27780-27784]:SimpleName[27751-27755]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[27785-27796]:SingleVariableDeclaration[27756-27767]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[27798-27815]:SingleVariableDeclaration[27769-27786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27817-29235]:Block[27788-29206]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[27831-27852]:VariableDeclarationStatement[27802-27823]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '=':\n                    t.transition(BeforeAttributeValue);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeName(replacementChar);\n                    t.transition(AttributeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                    t.error(this);\n                    t.tagPending.newAttribute();\n                    t.tagPending.appendAttributeName(c);\n                    t.transition(AttributeName);\n                    break;\n                default: // A-Z, anything else\n                    t.tagPending.newAttribute();\n                    r.unconsume();\n                    t.transition(AttributeName);\n            }",
      "info" : "SwitchStatement[27865-29225]:SwitchStatement[27836-29196]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[27894-27904]:SwitchCase[27865-27875]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[27921-27931]:SwitchCase[27892-27902]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[27948-27958]:SwitchCase[27919-27929]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[27975-27984]:SwitchCase[27946-27955]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28035-28041]:BreakStatement[28006-28012]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[28058-28067]:SwitchCase[28029-28038]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[28088-28122]:ExpressionStatement[28059-28093]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28143-28149]:BreakStatement[28114-28120]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[28166-28175]:SwitchCase[28137-28146]"
    }, {
      "left" : "t.transition(BeforeAttributeValue);",
      "right" : "t.transition(BeforeAttributeValue);",
      "info" : "ExpressionStatement[28196-28231]:ExpressionStatement[28167-28202]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28252-28258]:BreakStatement[28223-28229]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[28275-28284]:SwitchCase[28246-28255]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[28305-28324]:ExpressionStatement[28276-28295]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[28345-28364]:ExpressionStatement[28316-28335]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28385-28391]:BreakStatement[28356-28362]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[28408-28422]:SwitchCase[28379-28393]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[28443-28457]:ExpressionStatement[28414-28428]"
    }, {
      "left" : "t.tagPending.appendAttributeName(replacementChar);",
      "right" : "t.tagPending.appendAttributeName(replacementChar);",
      "info" : "ExpressionStatement[28478-28528]:ExpressionStatement[28449-28499]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[28549-28577]:ExpressionStatement[28520-28548]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28598-28604]:BreakStatement[28569-28575]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[28621-28630]:SwitchCase[28592-28601]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[28651-28668]:ExpressionStatement[28622-28639]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[28689-28708]:ExpressionStatement[28660-28679]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28729-28735]:BreakStatement[28700-28706]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[28752-28761]:SwitchCase[28723-28732]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[28778-28788]:SwitchCase[28749-28759]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[28805-28814]:SwitchCase[28776-28785]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[28835-28849]:ExpressionStatement[28806-28820]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[28870-28898]:ExpressionStatement[28841-28869]"
    }, {
      "left" : "t.tagPending.appendAttributeName(c);",
      "right" : "t.tagPending.appendAttributeName(c);",
      "info" : "ExpressionStatement[28919-28955]:ExpressionStatement[28890-28926]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[28976-29004]:ExpressionStatement[28947-28975]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29025-29031]:BreakStatement[28996-29002]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[29048-29056]:SwitchCase[29019-29027]"
    }, {
      "left" : "t.tagPending.newAttribute();",
      "right" : "t.tagPending.newAttribute();",
      "info" : "ExpressionStatement[29099-29127]:ExpressionStatement[29070-29098]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[29148-29162]:ExpressionStatement[29119-29133]"
    }, {
      "left" : "t.transition(AttributeName);",
      "right" : "t.transition(AttributeName);",
      "info" : "ExpressionStatement[29183-29211]:ExpressionStatement[29154-29182]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29278-29282]:PrimitiveType[29249-29253]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[29283-29287]:SimpleName[29254-29258]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[29288-29299]:SingleVariableDeclaration[29259-29270]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[29301-29318]:SingleVariableDeclaration[29272-29289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29320-30847]:Block[29291-30818]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[29334-29355]:VariableDeclarationStatement[29305-29326]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }",
      "info" : "SwitchStatement[29368-30837]:SwitchStatement[29339-30808]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[29397-29407]:SwitchCase[29368-29378]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[29424-29434]:SwitchCase[29395-29405]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[29451-29461]:SwitchCase[29422-29432]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[29478-29487]:SwitchCase[29449-29458]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29538-29544]:BreakStatement[29509-29515]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[29561-29570]:SwitchCase[29532-29541]"
    }, {
      "left" : "t.transition(AttributeValue_doubleQuoted);",
      "right" : "t.transition(AttributeValue_doubleQuoted);",
      "info" : "ExpressionStatement[29591-29633]:ExpressionStatement[29562-29604]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29654-29660]:BreakStatement[29625-29631]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[29677-29686]:SwitchCase[29648-29657]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[29707-29721]:ExpressionStatement[29678-29692]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[29742-29780]:ExpressionStatement[29713-29751]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29801-29807]:BreakStatement[29772-29778]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29824-29834]:SwitchCase[29795-29805]"
    }, {
      "left" : "t.transition(AttributeValue_singleQuoted);",
      "right" : "t.transition(AttributeValue_singleQuoted);",
      "info" : "ExpressionStatement[29855-29897]:ExpressionStatement[29826-29868]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29918-29924]:BreakStatement[29889-29895]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[29941-29955]:SwitchCase[29912-29926]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[29976-29990]:ExpressionStatement[29947-29961]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[30011-30062]:ExpressionStatement[29982-30033]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30083-30121]:ExpressionStatement[30054-30092]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30142-30148]:BreakStatement[30113-30119]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[30165-30174]:SwitchCase[30136-30145]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[30195-30212]:ExpressionStatement[30166-30183]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[30233-30252]:ExpressionStatement[30204-30223]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30273-30279]:BreakStatement[30244-30250]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[30296-30305]:SwitchCase[30267-30276]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[30326-30340]:ExpressionStatement[30297-30311]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[30361-30380]:ExpressionStatement[30332-30351]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[30401-30420]:ExpressionStatement[30372-30391]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30441-30447]:BreakStatement[30412-30418]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[30464-30473]:SwitchCase[30435-30444]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[30490-30499]:SwitchCase[30461-30470]"
    }, {
      "left" : "case '`':",
      "right" : "case '`':",
      "info" : "SwitchCase[30516-30525]:SwitchCase[30487-30496]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[30546-30560]:ExpressionStatement[30517-30531]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(c);",
      "right" : "t.tagPending.appendAttributeValue(c);",
      "info" : "ExpressionStatement[30581-30618]:ExpressionStatement[30552-30589]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30639-30677]:ExpressionStatement[30610-30648]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30698-30704]:BreakStatement[30669-30675]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[30721-30729]:SwitchCase[30692-30700]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[30750-30764]:ExpressionStatement[30721-30735]"
    }, {
      "left" : "t.transition(AttributeValue_unquoted);",
      "right" : "t.transition(AttributeValue_unquoted);",
      "info" : "ExpressionStatement[30785-30823]:ExpressionStatement[30756-30794]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[30897-30901]:PrimitiveType[30868-30872]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[30902-30906]:SimpleName[30873-30877]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[30907-30918]:SingleVariableDeclaration[30878-30889]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[30920-30937]:SingleVariableDeclaration[30891-30908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30939-31974]:Block[30910-31945]"
    }, {
      "left" : "String value = r.consumeToAny('\"', '&', nullChar);",
      "right" : "String value = r.consumeToAny('\"', '&', nullChar);",
      "info" : "VariableDeclarationStatement[30953-31003]:VariableDeclarationStatement[30924-30974]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[31016-31097]:IfStatement[30987-31068]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[31056-31097]:ExpressionStatement[31027-31068]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[31111-31132]:VariableDeclarationStatement[31082-31103]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\"', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\"', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[31145-31964]:SwitchStatement[31116-31935]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[31174-31183]:SwitchCase[31145-31154]"
    }, {
      "left" : "t.transition(AfterAttributeValue_quoted);",
      "right" : "t.transition(AfterAttributeValue_quoted);",
      "info" : "ExpressionStatement[31204-31245]:ExpressionStatement[31175-31216]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31266-31272]:BreakStatement[31237-31243]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[31289-31298]:SwitchCase[31260-31269]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('\"', true);",
      "right" : "Character ref = t.consumeCharacterReference('\"', true);",
      "info" : "VariableDeclarationStatement[31319-31374]:VariableDeclarationStatement[31290-31345]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[31395-31564]:IfStatement[31366-31535]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[31436-31475]:ExpressionStatement[31407-31446]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[31525-31564]:ExpressionStatement[31496-31535]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31585-31591]:BreakStatement[31556-31562]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[31608-31622]:SwitchCase[31579-31593]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[31643-31657]:ExpressionStatement[31614-31628]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[31678-31729]:ExpressionStatement[31649-31700]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31750-31756]:BreakStatement[31721-31727]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[31773-31782]:SwitchCase[31744-31753]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[31803-31820]:ExpressionStatement[31774-31791]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[31841-31860]:ExpressionStatement[31812-31831]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31881-31887]:BreakStatement[31852-31858]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32024-32028]:PrimitiveType[31995-31999]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[32029-32033]:SimpleName[32000-32004]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[32034-32045]:SingleVariableDeclaration[32005-32016]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[32047-32064]:SingleVariableDeclaration[32018-32035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32066-33104]:Block[32037-33075]"
    }, {
      "left" : "String value = r.consumeToAny('\\'', '&', nullChar);",
      "right" : "String value = r.consumeToAny('\\'', '&', nullChar);",
      "info" : "VariableDeclarationStatement[32080-32131]:VariableDeclarationStatement[32051-32102]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[32144-32225]:IfStatement[32115-32196]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[32184-32225]:ExpressionStatement[32155-32196]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[32239-32260]:VariableDeclarationStatement[32210-32231]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\\'', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterAttributeValue_quoted);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('\\'', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[32273-33094]:SwitchStatement[32244-33065]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[32302-32312]:SwitchCase[32273-32283]"
    }, {
      "left" : "t.transition(AfterAttributeValue_quoted);",
      "right" : "t.transition(AfterAttributeValue_quoted);",
      "info" : "ExpressionStatement[32333-32374]:ExpressionStatement[32304-32345]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32395-32401]:BreakStatement[32366-32372]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[32418-32427]:SwitchCase[32389-32398]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('\\'', true);",
      "right" : "Character ref = t.consumeCharacterReference('\\'', true);",
      "info" : "VariableDeclarationStatement[32448-32504]:VariableDeclarationStatement[32419-32475]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[32525-32694]:IfStatement[32496-32665]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[32566-32605]:ExpressionStatement[32537-32576]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[32655-32694]:ExpressionStatement[32626-32665]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32715-32721]:BreakStatement[32686-32692]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[32738-32752]:SwitchCase[32709-32723]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[32773-32787]:ExpressionStatement[32744-32758]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[32808-32859]:ExpressionStatement[32779-32830]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32880-32886]:BreakStatement[32851-32857]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[32903-32912]:SwitchCase[32874-32883]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[32933-32950]:ExpressionStatement[32904-32921]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[32971-32990]:ExpressionStatement[32942-32961]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33011-33017]:BreakStatement[32982-32988]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33150-33154]:PrimitiveType[33121-33125]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[33155-33159]:SimpleName[33126-33130]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[33160-33171]:SingleVariableDeclaration[33131-33142]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[33173-33190]:SingleVariableDeclaration[33144-33161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33192-34735]:Block[33163-34706]"
    }, {
      "left" : "String value = r.consumeToAny('\\t', '\\n', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');",
      "right" : "String value = r.consumeToAny('\\t', '\\n', '\\f', ' ', '&', '>', nullChar, '\"', '\\'', '<', '=', '`');",
      "info" : "VariableDeclarationStatement[33206-33305]:VariableDeclarationStatement[33177-33276]"
    }, {
      "left" : "if (value.length() > 0)",
      "right" : "if (value.length() > 0)",
      "info" : "IfStatement[33318-33399]:IfStatement[33289-33370]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(value);",
      "right" : "t.tagPending.appendAttributeValue(value);",
      "info" : "ExpressionStatement[33358-33399]:ExpressionStatement[33329-33370]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[33413-33434]:VariableDeclarationStatement[33384-33405]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('>', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '&':\n                    Character ref = t.consumeCharacterReference('>', true);\n                    if (ref != null)\n                        t.tagPending.appendAttributeValue(ref);\n                    else\n                        t.tagPending.appendAttributeValue('&');\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '\"':\n                case '\\'':\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    break;\n                // no default, handled in consume to any above\n            }",
      "info" : "SwitchStatement[33447-34724]:SwitchStatement[33418-34695]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[33476-33486]:SwitchCase[33447-33457]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[33503-33513]:SwitchCase[33474-33484]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[33530-33540]:SwitchCase[33501-33511]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[33557-33566]:SwitchCase[33528-33537]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[33587-33621]:ExpressionStatement[33558-33592]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33642-33648]:BreakStatement[33613-33619]"
    }, {
      "left" : "case '&':",
      "right" : "case '&':",
      "info" : "SwitchCase[33665-33674]:SwitchCase[33636-33645]"
    }, {
      "left" : "Character ref = t.consumeCharacterReference('>', true);",
      "right" : "Character ref = t.consumeCharacterReference('>', true);",
      "info" : "VariableDeclarationStatement[33695-33750]:VariableDeclarationStatement[33666-33721]"
    }, {
      "left" : "if (ref != null)",
      "right" : "if (ref != null)",
      "info" : "IfStatement[33771-33940]:IfStatement[33742-33911]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(ref);",
      "right" : "t.tagPending.appendAttributeValue(ref);",
      "info" : "ExpressionStatement[33812-33851]:ExpressionStatement[33783-33822]"
    }, {
      "left" : "t.tagPending.appendAttributeValue('&');",
      "right" : "t.tagPending.appendAttributeValue('&');",
      "info" : "ExpressionStatement[33901-33940]:ExpressionStatement[33872-33911]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[33961-33967]:BreakStatement[33932-33938]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[33984-33993]:SwitchCase[33955-33964]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[34014-34033]:ExpressionStatement[33985-34004]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[34054-34073]:ExpressionStatement[34025-34044]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34094-34100]:BreakStatement[34065-34071]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[34117-34131]:SwitchCase[34088-34102]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[34152-34166]:ExpressionStatement[34123-34137]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(replacementChar);",
      "right" : "t.tagPending.appendAttributeValue(replacementChar);",
      "info" : "ExpressionStatement[34187-34238]:ExpressionStatement[34158-34209]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34259-34265]:BreakStatement[34230-34236]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[34282-34291]:SwitchCase[34253-34262]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[34312-34329]:ExpressionStatement[34283-34300]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[34350-34369]:ExpressionStatement[34321-34340]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34390-34396]:BreakStatement[34361-34367]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[34413-34422]:SwitchCase[34384-34393]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[34439-34449]:SwitchCase[34410-34420]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[34466-34475]:SwitchCase[34437-34446]"
    }, {
      "left" : "case '=':",
      "right" : "case '=':",
      "info" : "SwitchCase[34492-34501]:SwitchCase[34463-34472]"
    }, {
      "left" : "case '`':",
      "right" : "case '`':",
      "info" : "SwitchCase[34518-34527]:SwitchCase[34489-34498]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[34548-34562]:ExpressionStatement[34519-34533]"
    }, {
      "left" : "t.tagPending.appendAttributeValue(c);",
      "right" : "t.tagPending.appendAttributeValue(c);",
      "info" : "ExpressionStatement[34583-34620]:ExpressionStatement[34554-34591]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34641-34647]:BreakStatement[34612-34618]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34847-34851]:PrimitiveType[34818-34822]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[34852-34856]:SimpleName[34823-34827]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[34857-34868]:SingleVariableDeclaration[34828-34839]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[34870-34887]:SingleVariableDeclaration[34841-34858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34889-35685]:Block[34860-35656]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[34903-34924]:VariableDeclarationStatement[34874-34895]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeAttributeName);\n                    break;\n                case '/':\n                    t.transition(SelfClosingStartTag);\n                    break;\n                case '>':\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    r.unconsume();\n                    t.transition(BeforeAttributeName);\n            }",
      "info" : "SwitchStatement[34937-35674]:SwitchStatement[34908-35645]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[34966-34976]:SwitchCase[34937-34947]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[34993-35003]:SwitchCase[34964-34974]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[35020-35030]:SwitchCase[34991-35001]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[35047-35056]:SwitchCase[35018-35027]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[35077-35111]:ExpressionStatement[35048-35082]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35132-35138]:BreakStatement[35103-35109]"
    }, {
      "left" : "case '/':",
      "right" : "case '/':",
      "info" : "SwitchCase[35155-35164]:SwitchCase[35126-35135]"
    }, {
      "left" : "t.transition(SelfClosingStartTag);",
      "right" : "t.transition(SelfClosingStartTag);",
      "info" : "ExpressionStatement[35185-35219]:ExpressionStatement[35156-35190]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35240-35246]:BreakStatement[35211-35217]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[35263-35272]:SwitchCase[35234-35243]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[35293-35312]:ExpressionStatement[35264-35283]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35333-35352]:ExpressionStatement[35304-35323]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35373-35379]:BreakStatement[35344-35350]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[35396-35405]:SwitchCase[35367-35376]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[35426-35443]:ExpressionStatement[35397-35414]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35464-35483]:ExpressionStatement[35435-35454]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35504-35510]:BreakStatement[35475-35481]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35527-35535]:SwitchCase[35498-35506]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[35556-35570]:ExpressionStatement[35527-35541]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[35591-35605]:ExpressionStatement[35562-35576]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[35626-35660]:ExpressionStatement[35597-35631]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[35727-35731]:PrimitiveType[35698-35702]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[35732-35736]:SimpleName[35703-35707]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[35737-35748]:SingleVariableDeclaration[35708-35719]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[35750-35767]:SingleVariableDeclaration[35721-35738]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35769-36285]:Block[35740-36256]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[35783-35804]:VariableDeclarationStatement[35754-35775]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeAttributeName);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.tagPending.selfClosing = true;\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeAttributeName);\n            }",
      "info" : "SwitchStatement[35817-36275]:SwitchStatement[35788-36246]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[35846-35855]:SwitchCase[35817-35826]"
    }, {
      "left" : "t.tagPending.selfClosing = true;",
      "right" : "t.tagPending.selfClosing = true;",
      "info" : "ExpressionStatement[35876-35908]:ExpressionStatement[35847-35879]"
    }, {
      "left" : "t.emitTagPending();",
      "right" : "t.emitTagPending();",
      "info" : "ExpressionStatement[35929-35948]:ExpressionStatement[35900-35919]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[35969-35988]:ExpressionStatement[35940-35959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36009-36015]:BreakStatement[35980-35986]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[36032-36041]:SwitchCase[36003-36012]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[36062-36079]:ExpressionStatement[36033-36050]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[36100-36119]:ExpressionStatement[36071-36090]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36140-36146]:BreakStatement[36111-36117]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[36163-36171]:SwitchCase[36134-36142]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[36192-36206]:ExpressionStatement[36163-36177]"
    }, {
      "left" : "t.transition(BeforeAttributeName);",
      "right" : "t.transition(BeforeAttributeName);",
      "info" : "ExpressionStatement[36227-36261]:ExpressionStatement[36198-36232]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36320-36324]:PrimitiveType[36291-36295]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[36325-36329]:SimpleName[36296-36300]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[36330-36341]:SingleVariableDeclaration[36301-36312]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[36343-36360]:SingleVariableDeclaration[36314-36331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36362-36777]:Block[36333-36748]"
    }, {
      "left" : "r.unconsume();",
      "right" : "r.unconsume();",
      "info" : "ExpressionStatement[36522-36536]:ExpressionStatement[36493-36507]"
    }, {
      "left" : "Token.Comment comment = new Token.Comment();",
      "right" : "Token.Comment comment = new Token.Comment();",
      "info" : "VariableDeclarationStatement[36549-36593]:VariableDeclarationStatement[36520-36564]"
    }, {
      "left" : "comment.data.append(r.consumeTo('>'));",
      "right" : "comment.data.append(r.consumeTo('>'));",
      "info" : "ExpressionStatement[36606-36644]:ExpressionStatement[36577-36615]"
    }, {
      "left" : "t.emit(comment);",
      "right" : "t.emit(comment);",
      "info" : "ExpressionStatement[36712-36728]:ExpressionStatement[36683-36699]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[36741-36767]:ExpressionStatement[36712-36738]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36821-36825]:PrimitiveType[36792-36796]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[36826-36830]:SimpleName[36797-36801]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[36831-36842]:SingleVariableDeclaration[36802-36813]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[36844-36861]:SingleVariableDeclaration[36815-36832]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36863-37647]:Block[36834-37618]"
    }, {
      "left" : "if (r.matchConsume(\"--\"))",
      "right" : "if (r.matchConsume(\"--\"))",
      "info" : "IfStatement[36877-37637]:IfStatement[36848-37608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36903-37004]:Block[36874-36975]"
    }, {
      "left" : "t.createCommentPending();",
      "right" : "t.createCommentPending();",
      "info" : "ExpressionStatement[36921-36946]:ExpressionStatement[36892-36917]"
    }, {
      "left" : "t.transition(CommentStart);",
      "right" : "t.transition(CommentStart);",
      "info" : "ExpressionStatement[36963-36990]:ExpressionStatement[36934-36961]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"DOCTYPE\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"DOCTYPE\"))",
      "info" : "IfStatement[37010-37637]:IfStatement[36981-37608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37051-37105]:Block[37022-37076]"
    }, {
      "left" : "t.transition(Doctype);",
      "right" : "t.transition(Doctype);",
      "info" : "ExpressionStatement[37069-37091]:ExpressionStatement[37040-37062]"
    }, {
      "left" : "if (r.matchConsume(\"[CDATA[\"))",
      "right" : "if (r.matchConsume(\"[CDATA[\"))",
      "info" : "IfStatement[37111-37637]:IfStatement[37082-37608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37142-37469]:Block[37113-37440]"
    }, {
      "left" : "t.transition(CdataSection);",
      "right" : "t.transition(CdataSection);",
      "info" : "ExpressionStatement[37428-37455]:ExpressionStatement[37399-37426]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37475-37637]:Block[37446-37608]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[37493-37507]:ExpressionStatement[37464-37478]"
    }, {
      "left" : "t.advanceTransition(BogusComment);",
      "right" : "t.advanceTransition(BogusComment);",
      "info" : "ExpressionStatement[37524-37558]:ExpressionStatement[37495-37529]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[37682-37686]:PrimitiveType[37653-37657]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[37687-37691]:SimpleName[37658-37662]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[37692-37703]:SingleVariableDeclaration[37663-37674]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[37705-37722]:SingleVariableDeclaration[37676-37693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37724-38584]:Block[37695-38555]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[37738-37759]:VariableDeclarationStatement[37709-37730]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[37772-38574]:SwitchStatement[37743-38545]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[37801-37810]:SwitchCase[37772-37781]"
    }, {
      "left" : "t.transition(CommentStartDash);",
      "right" : "t.transition(CommentStartDash);",
      "info" : "ExpressionStatement[37831-37862]:ExpressionStatement[37802-37833]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37883-37889]:BreakStatement[37854-37860]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[37906-37920]:SwitchCase[37877-37891]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[37941-37955]:ExpressionStatement[37912-37926]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[37976-38022]:ExpressionStatement[37947-37993]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[38043-38065]:ExpressionStatement[38014-38036]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38086-38092]:BreakStatement[38057-38063]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[38109-38118]:SwitchCase[38080-38089]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[38139-38153]:ExpressionStatement[38110-38124]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[38174-38197]:ExpressionStatement[38145-38168]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[38218-38237]:ExpressionStatement[38189-38208]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38258-38264]:BreakStatement[38229-38235]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[38281-38290]:SwitchCase[38252-38261]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[38311-38328]:ExpressionStatement[38282-38299]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[38349-38372]:ExpressionStatement[38320-38343]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[38393-38412]:ExpressionStatement[38364-38383]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38433-38439]:BreakStatement[38404-38410]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[38456-38464]:SwitchCase[38427-38435]"
    }, {
      "left" : "t.commentPending.data.append(c);",
      "right" : "t.commentPending.data.append(c);",
      "info" : "ExpressionStatement[38485-38517]:ExpressionStatement[38456-38488]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[38538-38560]:ExpressionStatement[38509-38531]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[38623-38627]:PrimitiveType[38594-38598]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[38628-38632]:SimpleName[38599-38603]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[38633-38644]:SingleVariableDeclaration[38604-38615]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[38646-38663]:SingleVariableDeclaration[38617-38634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38665-39525]:Block[38636-39496]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[38679-38700]:VariableDeclarationStatement[38650-38671]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentStartDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[38713-39515]:SwitchStatement[38684-39486]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[38742-38751]:SwitchCase[38713-38722]"
    }, {
      "left" : "t.transition(CommentStartDash);",
      "right" : "t.transition(CommentStartDash);",
      "info" : "ExpressionStatement[38772-38803]:ExpressionStatement[38743-38774]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[38824-38830]:BreakStatement[38795-38801]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[38847-38861]:SwitchCase[38818-38832]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[38882-38896]:ExpressionStatement[38853-38867]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[38917-38963]:ExpressionStatement[38888-38934]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[38984-39006]:ExpressionStatement[38955-38977]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39027-39033]:BreakStatement[38998-39004]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[39050-39059]:SwitchCase[39021-39030]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[39080-39094]:ExpressionStatement[39051-39065]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[39115-39138]:ExpressionStatement[39086-39109]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[39159-39178]:ExpressionStatement[39130-39149]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39199-39205]:BreakStatement[39170-39176]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[39222-39231]:SwitchCase[39193-39202]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[39252-39269]:ExpressionStatement[39223-39240]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[39290-39313]:ExpressionStatement[39261-39284]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[39334-39353]:ExpressionStatement[39305-39324]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39374-39380]:BreakStatement[39345-39351]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[39397-39405]:SwitchCase[39368-39376]"
    }, {
      "left" : "t.commentPending.data.append(c);",
      "right" : "t.commentPending.data.append(c);",
      "info" : "ExpressionStatement[39426-39458]:ExpressionStatement[39397-39429]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[39479-39501]:ExpressionStatement[39450-39472]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[39555-39559]:PrimitiveType[39526-39530]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[39560-39564]:SimpleName[39531-39535]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[39565-39576]:SingleVariableDeclaration[39536-39547]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[39578-39595]:SingleVariableDeclaration[39549-39566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39597-40265]:Block[39568-40236]"
    }, {
      "left" : "char c = r.current();",
      "right" : "char c = r.current();",
      "info" : "VariableDeclarationStatement[39611-39632]:VariableDeclarationStatement[39582-39603]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny('-', nullChar));\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.advanceTransition(CommentEndDash);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    r.advance();\n                    t.commentPending.data.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(r.consumeToAny('-', nullChar));\n            }",
      "info" : "SwitchStatement[39645-40255]:SwitchStatement[39616-40226]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[39674-39683]:SwitchCase[39645-39654]"
    }, {
      "left" : "t.advanceTransition(CommentEndDash);",
      "right" : "t.advanceTransition(CommentEndDash);",
      "info" : "ExpressionStatement[39704-39740]:ExpressionStatement[39675-39711]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39761-39767]:BreakStatement[39732-39738]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[39784-39798]:SwitchCase[39755-39769]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[39819-39833]:ExpressionStatement[39790-39804]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[39854-39866]:ExpressionStatement[39825-39837]"
    }, {
      "left" : "t.commentPending.data.append(replacementChar);",
      "right" : "t.commentPending.data.append(replacementChar);",
      "info" : "ExpressionStatement[39887-39933]:ExpressionStatement[39858-39904]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39954-39960]:BreakStatement[39925-39931]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[39977-39986]:SwitchCase[39948-39957]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[40007-40024]:ExpressionStatement[39978-39995]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[40045-40068]:ExpressionStatement[40016-40039]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[40089-40108]:ExpressionStatement[40060-40079]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40129-40135]:BreakStatement[40100-40106]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40152-40160]:SwitchCase[40123-40131]"
    }, {
      "left" : "t.commentPending.data.append(r.consumeToAny('-', nullChar));",
      "right" : "t.commentPending.data.append(r.consumeToAny('-', nullChar));",
      "info" : "ExpressionStatement[40181-40241]:ExpressionStatement[40152-40212]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[40302-40306]:PrimitiveType[40273-40277]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[40307-40311]:SimpleName[40278-40282]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[40312-40323]:SingleVariableDeclaration[40283-40294]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[40325-40342]:SingleVariableDeclaration[40296-40313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40344-41050]:Block[40315-41021]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[40358-40379]:VariableDeclarationStatement[40329-40350]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append('-').append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append('-').append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.transition(CommentEnd);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append('-').append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append('-').append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[40392-41040]:SwitchStatement[40363-41011]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[40421-40430]:SwitchCase[40392-40401]"
    }, {
      "left" : "t.transition(CommentEnd);",
      "right" : "t.transition(CommentEnd);",
      "info" : "ExpressionStatement[40451-40476]:ExpressionStatement[40422-40447]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40497-40503]:BreakStatement[40468-40474]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[40520-40534]:SwitchCase[40491-40505]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[40555-40569]:ExpressionStatement[40526-40540]"
    }, {
      "left" : "t.commentPending.data.append('-').append(replacementChar);",
      "right" : "t.commentPending.data.append('-').append(replacementChar);",
      "info" : "ExpressionStatement[40590-40648]:ExpressionStatement[40561-40619]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[40669-40691]:ExpressionStatement[40640-40662]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40712-40718]:BreakStatement[40683-40689]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[40735-40744]:SwitchCase[40706-40715]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[40765-40782]:ExpressionStatement[40736-40753]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[40803-40826]:ExpressionStatement[40774-40797]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[40847-40866]:ExpressionStatement[40818-40837]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[40887-40893]:BreakStatement[40858-40864]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[40910-40918]:SwitchCase[40881-40889]"
    }, {
      "left" : "t.commentPending.data.append('-').append(c);",
      "right" : "t.commentPending.data.append('-').append(c);",
      "info" : "ExpressionStatement[40939-40983]:ExpressionStatement[40910-40954]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[41004-41026]:ExpressionStatement[40975-40997]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[41083-41087]:PrimitiveType[41054-41058]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[41088-41092]:SimpleName[41059-41063]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[41093-41104]:SingleVariableDeclaration[41064-41075]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[41106-41123]:SingleVariableDeclaration[41077-41094]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41125-42187]:Block[41096-42158]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[41139-41160]:VariableDeclarationStatement[41110-41131]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '!':\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case '-':\n                    t.error(this);\n                    t.commentPending.data.append('-');\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case '!':\n                    t.error(this);\n                    t.transition(CommentEndBang);\n                    break;\n                case '-':\n                    t.error(this);\n                    t.commentPending.data.append('-');\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.commentPending.data.append(\"--\").append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[41173-42177]:SwitchStatement[41144-42148]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[41202-41211]:SwitchCase[41173-41182]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[41232-41255]:ExpressionStatement[41203-41226]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[41276-41295]:ExpressionStatement[41247-41266]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41316-41322]:BreakStatement[41287-41293]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[41339-41353]:SwitchCase[41310-41324]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41374-41388]:ExpressionStatement[41345-41359]"
    }, {
      "left" : "t.commentPending.data.append(\"--\").append(replacementChar);",
      "right" : "t.commentPending.data.append(\"--\").append(replacementChar);",
      "info" : "ExpressionStatement[41409-41468]:ExpressionStatement[41380-41439]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[41489-41511]:ExpressionStatement[41460-41482]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41532-41538]:BreakStatement[41503-41509]"
    }, {
      "left" : "case '!':",
      "right" : "case '!':",
      "info" : "SwitchCase[41555-41564]:SwitchCase[41526-41535]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41585-41599]:ExpressionStatement[41556-41570]"
    }, {
      "left" : "t.transition(CommentEndBang);",
      "right" : "t.transition(CommentEndBang);",
      "info" : "ExpressionStatement[41620-41649]:ExpressionStatement[41591-41620]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41670-41676]:BreakStatement[41641-41647]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[41693-41702]:SwitchCase[41664-41673]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[41723-41737]:ExpressionStatement[41694-41708]"
    }, {
      "left" : "t.commentPending.data.append('-');",
      "right" : "t.commentPending.data.append('-');",
      "info" : "ExpressionStatement[41758-41792]:ExpressionStatement[41729-41763]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41813-41819]:BreakStatement[41784-41790]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[41836-41845]:SwitchCase[41807-41816]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[41866-41883]:ExpressionStatement[41837-41854]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[41904-41927]:ExpressionStatement[41875-41898]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[41948-41967]:ExpressionStatement[41919-41938]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41988-41994]:BreakStatement[41959-41965]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[42011-42019]:SwitchCase[41982-41990]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[42040-42054]:ExpressionStatement[42011-42025]"
    }, {
      "left" : "t.commentPending.data.append(\"--\").append(c);",
      "right" : "t.commentPending.data.append(\"--\").append(c);",
      "info" : "ExpressionStatement[42075-42120]:ExpressionStatement[42046-42091]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[42141-42163]:ExpressionStatement[42112-42134]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[42224-42228]:PrimitiveType[42195-42199]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[42229-42233]:SimpleName[42200-42204]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[42234-42245]:SingleVariableDeclaration[42205-42216]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[42247-42264]:SingleVariableDeclaration[42218-42235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42266-43174]:Block[42237-43145]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[42280-42301]:VariableDeclarationStatement[42251-42272]"
    }, {
      "left" : "switch (c) {\n                case '-':\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }",
      "right" : "switch (c) {\n                case '-':\n                    t.commentPending.data.append(\"--!\");\n                    t.transition(CommentEndDash);\n                    break;\n                case '>':\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.commentPending.data.append(\"--!\").append(replacementChar);\n                    t.transition(Comment);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitCommentPending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.commentPending.data.append(\"--!\").append(c);\n                    t.transition(Comment);\n            }",
      "info" : "SwitchStatement[42314-43164]:SwitchStatement[42285-43135]"
    }, {
      "left" : "case '-':",
      "right" : "case '-':",
      "info" : "SwitchCase[42343-42352]:SwitchCase[42314-42323]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\");",
      "right" : "t.commentPending.data.append(\"--!\");",
      "info" : "ExpressionStatement[42373-42409]:ExpressionStatement[42344-42380]"
    }, {
      "left" : "t.transition(CommentEndDash);",
      "right" : "t.transition(CommentEndDash);",
      "info" : "ExpressionStatement[42430-42459]:ExpressionStatement[42401-42430]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42480-42486]:BreakStatement[42451-42457]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[42503-42512]:SwitchCase[42474-42483]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[42533-42556]:ExpressionStatement[42504-42527]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[42577-42596]:ExpressionStatement[42548-42567]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42617-42623]:BreakStatement[42588-42594]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[42640-42654]:SwitchCase[42611-42625]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[42675-42689]:ExpressionStatement[42646-42660]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\").append(replacementChar);",
      "right" : "t.commentPending.data.append(\"--!\").append(replacementChar);",
      "info" : "ExpressionStatement[42710-42770]:ExpressionStatement[42681-42741]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[42791-42813]:ExpressionStatement[42762-42784]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42834-42840]:BreakStatement[42805-42811]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[42857-42866]:SwitchCase[42828-42837]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[42887-42904]:ExpressionStatement[42858-42875]"
    }, {
      "left" : "t.emitCommentPending();",
      "right" : "t.emitCommentPending();",
      "info" : "ExpressionStatement[42925-42948]:ExpressionStatement[42896-42919]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[42969-42988]:ExpressionStatement[42940-42959]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43009-43015]:BreakStatement[42980-42986]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[43032-43040]:SwitchCase[43003-43011]"
    }, {
      "left" : "t.commentPending.data.append(\"--!\").append(c);",
      "right" : "t.commentPending.data.append(\"--!\").append(c);",
      "info" : "ExpressionStatement[43061-43107]:ExpressionStatement[43032-43078]"
    }, {
      "left" : "t.transition(Comment);",
      "right" : "t.transition(Comment);",
      "info" : "ExpressionStatement[43128-43150]:ExpressionStatement[43099-43121]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43204-43208]:PrimitiveType[43175-43179]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[43209-43213]:SimpleName[43180-43184]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[43214-43225]:SingleVariableDeclaration[43185-43196]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[43227-43244]:SingleVariableDeclaration[43198-43215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43246-43908]:Block[43217-43879]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[43260-43281]:VariableDeclarationStatement[43231-43252]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BeforeDoctypeName);\n            }",
      "info" : "SwitchStatement[43294-43898]:SwitchStatement[43265-43869]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[43323-43333]:SwitchCase[43294-43304]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[43350-43360]:SwitchCase[43321-43331]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[43377-43387]:SwitchCase[43348-43358]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[43404-43413]:SwitchCase[43375-43384]"
    }, {
      "left" : "t.transition(BeforeDoctypeName);",
      "right" : "t.transition(BeforeDoctypeName);",
      "info" : "ExpressionStatement[43434-43466]:ExpressionStatement[43405-43437]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43487-43493]:BreakStatement[43458-43464]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[43510-43519]:SwitchCase[43481-43490]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[43540-43557]:ExpressionStatement[43511-43528]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[43578-43603]:ExpressionStatement[43549-43574]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[43624-43660]:ExpressionStatement[43595-43631]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[43681-43704]:ExpressionStatement[43652-43675]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[43725-43744]:ExpressionStatement[43696-43715]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[43765-43771]:BreakStatement[43736-43742]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[43788-43796]:SwitchCase[43759-43767]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[43817-43831]:ExpressionStatement[43788-43802]"
    }, {
      "left" : "t.transition(BeforeDoctypeName);",
      "right" : "t.transition(BeforeDoctypeName);",
      "info" : "ExpressionStatement[43852-43884]:ExpressionStatement[43823-43855]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[43948-43952]:PrimitiveType[43919-43923]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[43953-43957]:SimpleName[43924-43928]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[43958-43969]:SingleVariableDeclaration[43929-43940]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[43971-43988]:SingleVariableDeclaration[43942-43959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43990-45045]:Block[43961-45016]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[44004-44151]:IfStatement[43975-44122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44027-44151]:Block[43998-44122]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[44045-44070]:ExpressionStatement[44016-44041]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[44087-44113]:ExpressionStatement[44058-44084]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[44130-44137]:ReturnStatement[44101-44108]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[44164-44185]:VariableDeclarationStatement[44135-44156]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break; // ignore whitespace\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    t.transition(DoctypeName);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.createDoctypePending();\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.createDoctypePending();\n                    t.doctypePending.name.append(c);\n                    t.transition(DoctypeName);\n            }",
      "info" : "SwitchStatement[44198-45035]:SwitchStatement[44169-45006]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[44227-44237]:SwitchCase[44198-44208]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[44254-44264]:SwitchCase[44225-44235]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[44281-44291]:SwitchCase[44252-44262]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[44308-44317]:SwitchCase[44279-44288]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44338-44344]:BreakStatement[44309-44315]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[44382-44396]:SwitchCase[44353-44367]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[44417-44431]:ExpressionStatement[44388-44402]"
    }, {
      "left" : "t.doctypePending.name.append(replacementChar);",
      "right" : "t.doctypePending.name.append(replacementChar);",
      "info" : "ExpressionStatement[44452-44498]:ExpressionStatement[44423-44469]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[44519-44545]:ExpressionStatement[44490-44516]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44566-44572]:BreakStatement[44537-44543]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[44589-44598]:SwitchCase[44560-44569]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[44619-44636]:ExpressionStatement[44590-44607]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[44657-44682]:ExpressionStatement[44628-44653]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[44703-44739]:ExpressionStatement[44674-44710]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[44760-44783]:ExpressionStatement[44731-44754]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[44804-44823]:ExpressionStatement[44775-44794]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[44844-44850]:BreakStatement[44815-44821]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[44867-44875]:SwitchCase[44838-44846]"
    }, {
      "left" : "t.createDoctypePending();",
      "right" : "t.createDoctypePending();",
      "info" : "ExpressionStatement[44896-44921]:ExpressionStatement[44867-44892]"
    }, {
      "left" : "t.doctypePending.name.append(c);",
      "right" : "t.doctypePending.name.append(c);",
      "info" : "ExpressionStatement[44942-44974]:ExpressionStatement[44913-44945]"
    }, {
      "left" : "t.transition(DoctypeName);",
      "right" : "t.transition(DoctypeName);",
      "info" : "ExpressionStatement[44995-45021]:ExpressionStatement[44966-44992]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[45079-45083]:PrimitiveType[45050-45054]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[45084-45088]:SimpleName[45055-45059]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[45089-45100]:SingleVariableDeclaration[45060-45071]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[45102-45119]:SingleVariableDeclaration[45073-45090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45121-46196]:Block[45092-46167]"
    }, {
      "left" : "if (r.matchesLetter())",
      "right" : "if (r.matchesLetter())",
      "info" : "IfStatement[45135-45320]:IfStatement[45106-45291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45158-45320]:Block[45129-45291]"
    }, {
      "left" : "String name = r.consumeLetterSequence();",
      "right" : "String name = r.consumeLetterSequence();",
      "info" : "VariableDeclarationStatement[45176-45216]:VariableDeclarationStatement[45147-45187]"
    }, {
      "left" : "t.doctypePending.name.append(name.toLowerCase());",
      "right" : "t.doctypePending.name.append(name.toLowerCase());",
      "info" : "ExpressionStatement[45233-45282]:ExpressionStatement[45204-45253]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[45299-45306]:ReturnStatement[45270-45277]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[45333-45354]:VariableDeclarationStatement[45304-45325]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(AfterDoctypeName);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.name.append(replacementChar);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.name.append(c);\n            }",
      "info" : "SwitchStatement[45367-46186]:SwitchStatement[45338-46157]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[45396-45405]:SwitchCase[45367-45376]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[45426-45449]:ExpressionStatement[45397-45420]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[45470-45489]:ExpressionStatement[45441-45460]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45510-45516]:BreakStatement[45481-45487]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[45533-45543]:SwitchCase[45504-45514]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[45560-45570]:SwitchCase[45531-45541]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[45587-45597]:SwitchCase[45558-45568]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[45614-45623]:SwitchCase[45585-45594]"
    }, {
      "left" : "t.transition(AfterDoctypeName);",
      "right" : "t.transition(AfterDoctypeName);",
      "info" : "ExpressionStatement[45644-45675]:ExpressionStatement[45615-45646]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45696-45702]:BreakStatement[45667-45673]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[45719-45733]:SwitchCase[45690-45704]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[45754-45768]:ExpressionStatement[45725-45739]"
    }, {
      "left" : "t.doctypePending.name.append(replacementChar);",
      "right" : "t.doctypePending.name.append(replacementChar);",
      "info" : "ExpressionStatement[45789-45835]:ExpressionStatement[45760-45806]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45856-45862]:BreakStatement[45827-45833]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[45879-45888]:SwitchCase[45850-45859]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[45909-45926]:ExpressionStatement[45880-45897]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[45947-45983]:ExpressionStatement[45918-45954]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46004-46027]:ExpressionStatement[45975-45998]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[46048-46067]:ExpressionStatement[46019-46038]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[46088-46094]:BreakStatement[46059-46065]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[46111-46119]:SwitchCase[46082-46090]"
    }, {
      "left" : "t.doctypePending.name.append(c);",
      "right" : "t.doctypePending.name.append(c);",
      "info" : "ExpressionStatement[46140-46172]:ExpressionStatement[46111-46143]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[46235-46239]:PrimitiveType[46206-46210]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[46240-46244]:SimpleName[46211-46215]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[46245-46256]:SingleVariableDeclaration[46216-46227]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[46258-46275]:SingleVariableDeclaration[46229-46246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46277-47152]:Block[46248-47123]"
    }, {
      "left" : "if (r.isEmpty())",
      "right" : "if (r.isEmpty())",
      "info" : "IfStatement[46291-46510]:IfStatement[46262-46481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46308-46510]:Block[46279-46481]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[46326-46343]:ExpressionStatement[46297-46314]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[46360-46396]:ExpressionStatement[46331-46367]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46413-46436]:ExpressionStatement[46384-46407]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[46453-46472]:ExpressionStatement[46424-46443]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[46489-46496]:ReturnStatement[46460-46467]"
    }, {
      "left" : "if (r.matchesAny('\\t', '\\n', '\\f', ' '))",
      "right" : "if (r.matchesAny('\\t', '\\n', '\\f', ' '))",
      "info" : "IfStatement[46523-47141]:IfStatement[46494-47112]"
    }, {
      "left" : "r.advance();",
      "right" : "r.advance();",
      "info" : "ExpressionStatement[46580-46592]:ExpressionStatement[46551-46563]"
    }, {
      "left" : "if (r.matches('>'))",
      "right" : "if (r.matches('>'))",
      "info" : "IfStatement[46631-47141]:IfStatement[46602-47112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46651-46749]:Block[46622-46720]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[46669-46692]:ExpressionStatement[46640-46663]"
    }, {
      "left" : "t.advanceTransition(Data);",
      "right" : "t.advanceTransition(Data);",
      "info" : "ExpressionStatement[46709-46735]:ExpressionStatement[46680-46706]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"PUBLIC\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"PUBLIC\"))",
      "info" : "IfStatement[46755-47141]:IfStatement[46726-47112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46795-46867]:Block[46766-46838]"
    }, {
      "left" : "t.transition(AfterDoctypePublicKeyword);",
      "right" : "t.transition(AfterDoctypePublicKeyword);",
      "info" : "ExpressionStatement[46813-46853]:ExpressionStatement[46784-46824]"
    }, {
      "left" : "if (r.matchConsumeIgnoreCase(\"SYSTEM\"))",
      "right" : "if (r.matchConsumeIgnoreCase(\"SYSTEM\"))",
      "info" : "IfStatement[46873-47141]:IfStatement[46844-47112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46913-46985]:Block[46884-46956]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemKeyword);",
      "right" : "t.transition(AfterDoctypeSystemKeyword);",
      "info" : "ExpressionStatement[46931-46971]:ExpressionStatement[46902-46942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46991-47141]:Block[46962-47112]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47009-47023]:ExpressionStatement[46980-46994]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[47040-47076]:ExpressionStatement[47011-47047]"
    }, {
      "left" : "t.advanceTransition(BogusDoctype);",
      "right" : "t.advanceTransition(BogusDoctype);",
      "info" : "ExpressionStatement[47093-47127]:ExpressionStatement[47064-47098]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[47200-47204]:PrimitiveType[47171-47175]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[47205-47209]:SimpleName[47176-47180]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[47210-47221]:SingleVariableDeclaration[47181-47192]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[47223-47240]:SingleVariableDeclaration[47194-47211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47242-48578]:Block[47213-48549]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[47256-47277]:VariableDeclarationStatement[47227-47248]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypePublicIdentifier);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[47290-48568]:SwitchStatement[47261-48539]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[47319-47329]:SwitchCase[47290-47300]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[47346-47356]:SwitchCase[47317-47327]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[47373-47383]:SwitchCase[47344-47354]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[47400-47409]:SwitchCase[47371-47380]"
    }, {
      "left" : "t.transition(BeforeDoctypePublicIdentifier);",
      "right" : "t.transition(BeforeDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[47430-47474]:ExpressionStatement[47401-47445]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47495-47501]:BreakStatement[47466-47472]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[47518-47527]:SwitchCase[47489-47498]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47548-47562]:ExpressionStatement[47519-47533]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[47636-47687]:ExpressionStatement[47607-47658]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47708-47714]:BreakStatement[47679-47685]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[47731-47741]:SwitchCase[47702-47712]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47762-47776]:ExpressionStatement[47733-47747]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[47850-47901]:ExpressionStatement[47821-47872]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[47922-47928]:BreakStatement[47893-47899]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[47945-47954]:SwitchCase[47916-47925]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[47975-47989]:ExpressionStatement[47946-47960]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48010-48046]:ExpressionStatement[47981-48017]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[48067-48090]:ExpressionStatement[48038-48061]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[48111-48130]:ExpressionStatement[48082-48101]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48151-48157]:BreakStatement[48122-48128]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[48174-48183]:SwitchCase[48145-48154]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[48204-48221]:ExpressionStatement[48175-48192]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48242-48278]:ExpressionStatement[48213-48249]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[48299-48322]:ExpressionStatement[48270-48293]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[48343-48362]:ExpressionStatement[48314-48333]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48383-48389]:BreakStatement[48354-48360]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[48406-48414]:SwitchCase[48377-48385]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[48435-48449]:ExpressionStatement[48406-48420]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[48470-48506]:ExpressionStatement[48441-48477]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[48527-48554]:ExpressionStatement[48498-48525]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[48630-48634]:PrimitiveType[48601-48605]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[48635-48639]:SimpleName[48606-48610]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[48640-48651]:SingleVariableDeclaration[48611-48622]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[48653-48670]:SingleVariableDeclaration[48624-48641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48672-49873]:Block[48643-49844]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[48686-48707]:VariableDeclarationStatement[48657-48678]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypePublicIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[48720-49863]:SwitchStatement[48691-49834]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[48749-48759]:SwitchCase[48720-48730]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[48776-48786]:SwitchCase[48747-48757]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[48803-48813]:SwitchCase[48774-48784]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[48830-48839]:SwitchCase[48801-48810]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[48860-48866]:BreakStatement[48831-48837]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[48883-48892]:SwitchCase[48854-48863]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[48966-49017]:ExpressionStatement[48937-48988]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49038-49044]:BreakStatement[49009-49015]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[49061-49071]:SwitchCase[49032-49042]"
    }, {
      "left" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypePublicIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[49145-49196]:ExpressionStatement[49116-49167]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49217-49223]:BreakStatement[49188-49194]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[49240-49249]:SwitchCase[49211-49220]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[49270-49284]:ExpressionStatement[49241-49255]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49305-49341]:ExpressionStatement[49276-49312]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[49362-49385]:ExpressionStatement[49333-49356]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[49406-49425]:ExpressionStatement[49377-49396]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49446-49452]:BreakStatement[49417-49423]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[49469-49478]:SwitchCase[49440-49449]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[49499-49516]:ExpressionStatement[49470-49487]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49537-49573]:ExpressionStatement[49508-49544]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[49594-49617]:ExpressionStatement[49565-49588]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[49638-49657]:ExpressionStatement[49609-49628]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[49678-49684]:BreakStatement[49649-49655]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[49701-49709]:SwitchCase[49672-49680]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[49730-49744]:ExpressionStatement[49701-49715]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[49765-49801]:ExpressionStatement[49736-49772]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[49822-49849]:ExpressionStatement[49793-49820]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[49932-49936]:PrimitiveType[49903-49907]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[49937-49941]:SimpleName[49908-49912]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[49942-49953]:SingleVariableDeclaration[49913-49924]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[49955-49972]:SingleVariableDeclaration[49926-49943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49974-50898]:Block[49945-50869]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[49988-50009]:VariableDeclarationStatement[49959-49980]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[50022-50888]:SwitchStatement[49993-50859]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[50051-50060]:SwitchCase[50022-50031]"
    }, {
      "left" : "t.transition(AfterDoctypePublicIdentifier);",
      "right" : "t.transition(AfterDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[50081-50124]:ExpressionStatement[50052-50095]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50145-50151]:BreakStatement[50116-50122]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[50168-50182]:SwitchCase[50139-50153]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[50203-50217]:ExpressionStatement[50174-50188]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[50238-50296]:ExpressionStatement[50209-50267]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50317-50323]:BreakStatement[50288-50294]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[50340-50349]:SwitchCase[50311-50320]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[50370-50384]:ExpressionStatement[50341-50355]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50405-50441]:ExpressionStatement[50376-50412]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[50462-50485]:ExpressionStatement[50433-50456]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[50506-50525]:ExpressionStatement[50477-50496]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50546-50552]:BreakStatement[50517-50523]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[50569-50578]:SwitchCase[50540-50549]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[50599-50616]:ExpressionStatement[50570-50587]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[50637-50673]:ExpressionStatement[50608-50644]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[50694-50717]:ExpressionStatement[50665-50688]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[50738-50757]:ExpressionStatement[50709-50728]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[50778-50784]:BreakStatement[50749-50755]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[50801-50809]:SwitchCase[50772-50780]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(c);",
      "right" : "t.doctypePending.publicIdentifier.append(c);",
      "info" : "ExpressionStatement[50830-50874]:ExpressionStatement[50801-50845]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[50957-50961]:PrimitiveType[50928-50932]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[50962-50966]:SimpleName[50933-50937]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[50967-50978]:SingleVariableDeclaration[50938-50949]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[50980-50997]:SingleVariableDeclaration[50951-50968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50999-51924]:Block[50970-51895]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[51013-51034]:VariableDeclarationStatement[50984-51005]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypePublicIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.publicIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.publicIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[51047-51914]:SwitchStatement[51018-51885]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[51076-51086]:SwitchCase[51047-51057]"
    }, {
      "left" : "t.transition(AfterDoctypePublicIdentifier);",
      "right" : "t.transition(AfterDoctypePublicIdentifier);",
      "info" : "ExpressionStatement[51107-51150]:ExpressionStatement[51078-51121]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51171-51177]:BreakStatement[51142-51148]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[51194-51208]:SwitchCase[51165-51179]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51229-51243]:ExpressionStatement[51200-51214]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.publicIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[51264-51322]:ExpressionStatement[51235-51293]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51343-51349]:BreakStatement[51314-51320]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[51366-51375]:SwitchCase[51337-51346]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[51396-51410]:ExpressionStatement[51367-51381]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[51431-51467]:ExpressionStatement[51402-51438]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[51488-51511]:ExpressionStatement[51459-51482]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[51532-51551]:ExpressionStatement[51503-51522]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51572-51578]:BreakStatement[51543-51549]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[51595-51604]:SwitchCase[51566-51575]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[51625-51642]:ExpressionStatement[51596-51613]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[51663-51699]:ExpressionStatement[51634-51670]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[51720-51743]:ExpressionStatement[51691-51714]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[51764-51783]:ExpressionStatement[51735-51754]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[51804-51810]:BreakStatement[51775-51781]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[51827-51835]:SwitchCase[51798-51806]"
    }, {
      "left" : "t.doctypePending.publicIdentifier.append(c);",
      "right" : "t.doctypePending.publicIdentifier.append(c);",
      "info" : "ExpressionStatement[51856-51900]:ExpressionStatement[51827-51871]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[51975-51979]:PrimitiveType[51946-51950]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[51980-51984]:SimpleName[51951-51955]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[51985-51996]:SingleVariableDeclaration[51956-51967]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[51998-52015]:SingleVariableDeclaration[51969-51986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52017-53244]:Block[51988-53215]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[52031-52052]:VariableDeclarationStatement[52002-52023]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BetweenDoctypePublicAndSystemIdentifiers);\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[52065-53234]:SwitchStatement[52036-53205]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[52094-52104]:SwitchCase[52065-52075]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[52121-52131]:SwitchCase[52092-52102]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[52148-52158]:SwitchCase[52119-52129]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[52175-52184]:SwitchCase[52146-52155]"
    }, {
      "left" : "t.transition(BetweenDoctypePublicAndSystemIdentifiers);",
      "right" : "t.transition(BetweenDoctypePublicAndSystemIdentifiers);",
      "info" : "ExpressionStatement[52205-52260]:ExpressionStatement[52176-52231]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52281-52287]:BreakStatement[52252-52258]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[52304-52313]:SwitchCase[52275-52284]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[52334-52357]:ExpressionStatement[52305-52328]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[52378-52397]:ExpressionStatement[52349-52368]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52418-52424]:BreakStatement[52389-52395]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[52441-52450]:SwitchCase[52412-52421]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[52471-52485]:ExpressionStatement[52442-52456]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[52545-52596]:ExpressionStatement[52516-52567]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52617-52623]:BreakStatement[52588-52594]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[52640-52650]:SwitchCase[52611-52621]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[52671-52685]:ExpressionStatement[52642-52656]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[52745-52796]:ExpressionStatement[52716-52767]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[52817-52823]:BreakStatement[52788-52794]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[52840-52849]:SwitchCase[52811-52820]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[52870-52887]:ExpressionStatement[52841-52858]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[52908-52944]:ExpressionStatement[52879-52915]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[52965-52988]:ExpressionStatement[52936-52959]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[53009-53028]:ExpressionStatement[52980-52999]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53049-53055]:BreakStatement[53020-53026]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[53072-53080]:SwitchCase[53043-53051]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[53101-53115]:ExpressionStatement[53072-53086]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[53136-53172]:ExpressionStatement[53107-53143]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[53193-53220]:ExpressionStatement[53164-53191]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[53307-53311]:PrimitiveType[53278-53282]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[53312-53316]:SimpleName[53283-53287]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[53317-53328]:SingleVariableDeclaration[53288-53299]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[53330-53347]:SingleVariableDeclaration[53301-53318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53349-54500]:Block[53320-54471]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[53363-53384]:VariableDeclarationStatement[53334-53355]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[53397-54490]:SwitchStatement[53368-54461]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[53426-53436]:SwitchCase[53397-53407]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[53453-53463]:SwitchCase[53424-53434]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[53480-53490]:SwitchCase[53451-53461]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[53507-53516]:SwitchCase[53478-53487]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53537-53543]:BreakStatement[53508-53514]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[53560-53569]:SwitchCase[53531-53540]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[53590-53613]:ExpressionStatement[53561-53584]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[53634-53653]:ExpressionStatement[53605-53624]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53674-53680]:BreakStatement[53645-53651]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[53697-53706]:SwitchCase[53668-53677]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[53727-53741]:ExpressionStatement[53698-53712]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[53801-53852]:ExpressionStatement[53772-53823]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[53873-53879]:BreakStatement[53844-53850]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[53896-53906]:SwitchCase[53867-53877]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[53927-53941]:ExpressionStatement[53898-53912]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[54001-54052]:ExpressionStatement[53972-54023]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54073-54079]:BreakStatement[54044-54050]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[54096-54105]:SwitchCase[54067-54076]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[54126-54143]:ExpressionStatement[54097-54114]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[54164-54200]:ExpressionStatement[54135-54171]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[54221-54244]:ExpressionStatement[54192-54215]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[54265-54284]:ExpressionStatement[54236-54255]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54305-54311]:BreakStatement[54276-54282]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[54328-54336]:SwitchCase[54299-54307]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54357-54371]:ExpressionStatement[54328-54342]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[54392-54428]:ExpressionStatement[54363-54399]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[54449-54476]:ExpressionStatement[54420-54447]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[54548-54552]:PrimitiveType[54519-54523]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[54553-54557]:SimpleName[54524-54528]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[54558-54569]:SingleVariableDeclaration[54529-54540]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[54571-54588]:SingleVariableDeclaration[54542-54559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54590-55894]:Block[54561-55865]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[54604-54625]:VariableDeclarationStatement[54575-54596]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    t.transition(BeforeDoctypeSystemIdentifier);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case '\"':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    t.error(this);\n                    // system id empty\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n            }",
      "info" : "SwitchStatement[54638-55884]:SwitchStatement[54609-55855]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[54667-54677]:SwitchCase[54638-54648]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[54694-54704]:SwitchCase[54665-54675]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[54721-54731]:SwitchCase[54692-54702]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[54748-54757]:SwitchCase[54719-54728]"
    }, {
      "left" : "t.transition(BeforeDoctypeSystemIdentifier);",
      "right" : "t.transition(BeforeDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[54778-54822]:ExpressionStatement[54749-54793]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54843-54849]:BreakStatement[54814-54820]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[54866-54875]:SwitchCase[54837-54846]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[54896-54910]:ExpressionStatement[54867-54881]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[54931-54967]:ExpressionStatement[54902-54938]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[54988-55011]:ExpressionStatement[54959-54982]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[55032-55051]:ExpressionStatement[55003-55022]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55072-55078]:BreakStatement[55043-55049]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[55095-55104]:SwitchCase[55066-55075]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[55125-55139]:ExpressionStatement[55096-55110]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[55199-55250]:ExpressionStatement[55170-55221]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55271-55277]:BreakStatement[55242-55248]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[55294-55304]:SwitchCase[55265-55275]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[55325-55339]:ExpressionStatement[55296-55310]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[55399-55450]:ExpressionStatement[55370-55421]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55471-55477]:BreakStatement[55442-55448]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[55494-55503]:SwitchCase[55465-55474]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[55524-55541]:ExpressionStatement[55495-55512]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[55562-55598]:ExpressionStatement[55533-55569]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[55619-55642]:ExpressionStatement[55590-55613]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[55663-55682]:ExpressionStatement[55634-55653]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55703-55709]:BreakStatement[55674-55680]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[55726-55734]:SwitchCase[55697-55705]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[55755-55769]:ExpressionStatement[55726-55740]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[55790-55826]:ExpressionStatement[55761-55797]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[55847-55870]:ExpressionStatement[55818-55841]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[55946-55950]:PrimitiveType[55917-55921]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[55951-55955]:SimpleName[55922-55926]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[55956-55967]:SingleVariableDeclaration[55927-55938]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[55969-55986]:SingleVariableDeclaration[55940-55957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55988-57189]:Block[55959-57160]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[56002-56023]:VariableDeclarationStatement[55973-55994]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '\"':\n                    // set system id to empty string\n                    t.transition(DoctypeSystemIdentifier_doubleQuoted);\n                    break;\n                case '\\'':\n                    // set public id to empty string\n                    t.transition(DoctypeSystemIdentifier_singleQuoted);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.transition(BogusDoctype);\n            }",
      "info" : "SwitchStatement[56036-57179]:SwitchStatement[56007-57150]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[56065-56075]:SwitchCase[56036-56046]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[56092-56102]:SwitchCase[56063-56073]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[56119-56129]:SwitchCase[56090-56100]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[56146-56155]:SwitchCase[56117-56126]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56176-56182]:BreakStatement[56147-56153]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[56199-56208]:SwitchCase[56170-56179]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_doubleQuoted);",
      "info" : "ExpressionStatement[56282-56333]:ExpressionStatement[56253-56304]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56354-56360]:BreakStatement[56325-56331]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[56377-56387]:SwitchCase[56348-56358]"
    }, {
      "left" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "right" : "t.transition(DoctypeSystemIdentifier_singleQuoted);",
      "info" : "ExpressionStatement[56461-56512]:ExpressionStatement[56432-56483]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56533-56539]:BreakStatement[56504-56510]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[56556-56565]:SwitchCase[56527-56536]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[56586-56600]:ExpressionStatement[56557-56571]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[56621-56657]:ExpressionStatement[56592-56628]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[56678-56701]:ExpressionStatement[56649-56672]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[56722-56741]:ExpressionStatement[56693-56712]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56762-56768]:BreakStatement[56733-56739]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[56785-56794]:SwitchCase[56756-56765]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[56815-56832]:ExpressionStatement[56786-56803]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[56853-56889]:ExpressionStatement[56824-56860]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[56910-56933]:ExpressionStatement[56881-56904]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[56954-56973]:ExpressionStatement[56925-56944]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56994-57000]:BreakStatement[56965-56971]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[57017-57025]:SwitchCase[56988-56996]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[57046-57060]:ExpressionStatement[57017-57031]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[57081-57117]:ExpressionStatement[57052-57088]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[57138-57165]:ExpressionStatement[57109-57136]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[57248-57252]:PrimitiveType[57219-57223]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[57253-57257]:SimpleName[57224-57228]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[57258-57269]:SingleVariableDeclaration[57229-57240]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[57271-57288]:SingleVariableDeclaration[57242-57259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57290-58214]:Block[57261-58185]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[57304-57325]:VariableDeclarationStatement[57275-57296]"
    }, {
      "left" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\"':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[57338-58204]:SwitchStatement[57309-58175]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[57367-57376]:SwitchCase[57338-57347]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemIdentifier);",
      "right" : "t.transition(AfterDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[57397-57440]:ExpressionStatement[57368-57411]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57461-57467]:BreakStatement[57432-57438]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[57484-57498]:SwitchCase[57455-57469]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[57519-57533]:ExpressionStatement[57490-57504]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[57554-57612]:ExpressionStatement[57525-57583]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57633-57639]:BreakStatement[57604-57610]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[57656-57665]:SwitchCase[57627-57636]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[57686-57700]:ExpressionStatement[57657-57671]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[57721-57757]:ExpressionStatement[57692-57728]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[57778-57801]:ExpressionStatement[57749-57772]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[57822-57841]:ExpressionStatement[57793-57812]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57862-57868]:BreakStatement[57833-57839]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[57885-57894]:SwitchCase[57856-57865]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[57915-57932]:ExpressionStatement[57886-57903]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[57953-57989]:ExpressionStatement[57924-57960]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[58010-58033]:ExpressionStatement[57981-58004]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[58054-58073]:ExpressionStatement[58025-58044]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58094-58100]:BreakStatement[58065-58071]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[58117-58125]:SwitchCase[58088-58096]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(c);",
      "right" : "t.doctypePending.systemIdentifier.append(c);",
      "info" : "ExpressionStatement[58146-58190]:ExpressionStatement[58117-58161]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[58273-58277]:PrimitiveType[58244-58248]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[58278-58282]:SimpleName[58249-58253]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[58283-58294]:SingleVariableDeclaration[58254-58265]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[58296-58313]:SingleVariableDeclaration[58267-58284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58315-59240]:Block[58286-59211]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[58329-58350]:VariableDeclarationStatement[58300-58321]"
    }, {
      "left" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "right" : "switch (c) {\n                case '\\'':\n                    t.transition(AfterDoctypeSystemIdentifier);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.doctypePending.systemIdentifier.append(replacementChar);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.doctypePending.systemIdentifier.append(c);\n            }",
      "info" : "SwitchStatement[58363-59230]:SwitchStatement[58334-59201]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[58392-58402]:SwitchCase[58363-58373]"
    }, {
      "left" : "t.transition(AfterDoctypeSystemIdentifier);",
      "right" : "t.transition(AfterDoctypeSystemIdentifier);",
      "info" : "ExpressionStatement[58423-58466]:ExpressionStatement[58394-58437]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58487-58493]:BreakStatement[58458-58464]"
    }, {
      "left" : "case nullChar:",
      "right" : "case nullChar:",
      "info" : "SwitchCase[58510-58524]:SwitchCase[58481-58495]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[58545-58559]:ExpressionStatement[58516-58530]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "right" : "t.doctypePending.systemIdentifier.append(replacementChar);",
      "info" : "ExpressionStatement[58580-58638]:ExpressionStatement[58551-58609]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58659-58665]:BreakStatement[58630-58636]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[58682-58691]:SwitchCase[58653-58662]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[58712-58726]:ExpressionStatement[58683-58697]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[58747-58783]:ExpressionStatement[58718-58754]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[58804-58827]:ExpressionStatement[58775-58798]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[58848-58867]:ExpressionStatement[58819-58838]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[58888-58894]:BreakStatement[58859-58865]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[58911-58920]:SwitchCase[58882-58891]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[58941-58958]:ExpressionStatement[58912-58929]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[58979-59015]:ExpressionStatement[58950-58986]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[59036-59059]:ExpressionStatement[59007-59030]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[59080-59099]:ExpressionStatement[59051-59070]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59120-59126]:BreakStatement[59091-59097]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59143-59151]:SwitchCase[59114-59122]"
    }, {
      "left" : "t.doctypePending.systemIdentifier.append(c);",
      "right" : "t.doctypePending.systemIdentifier.append(c);",
      "info" : "ExpressionStatement[59172-59216]:ExpressionStatement[59143-59187]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[59291-59295]:PrimitiveType[59262-59266]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[59296-59300]:SimpleName[59267-59271]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[59301-59312]:SingleVariableDeclaration[59272-59283]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[59314-59331]:SingleVariableDeclaration[59285-59302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59333-60068]:Block[59304-60039]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[59347-59368]:VariableDeclarationStatement[59318-59339]"
    }, {
      "left" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }",
      "right" : "switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\f':\n                case ' ':\n                    break;\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.doctypePending.forceQuirks = true;\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    t.error(this);\n                    t.transition(BogusDoctype);\n                    // NOT force quirks\n            }",
      "info" : "SwitchStatement[59381-60058]:SwitchStatement[59352-60029]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[59410-59420]:SwitchCase[59381-59391]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[59437-59447]:SwitchCase[59408-59418]"
    }, {
      "left" : "case '\\f':",
      "right" : "case '\\f':",
      "info" : "SwitchCase[59464-59474]:SwitchCase[59435-59445]"
    }, {
      "left" : "case ' ':",
      "right" : "case ' ':",
      "info" : "SwitchCase[59491-59500]:SwitchCase[59462-59471]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59521-59527]:BreakStatement[59492-59498]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[59544-59553]:SwitchCase[59515-59524]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[59574-59597]:ExpressionStatement[59545-59568]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[59618-59637]:ExpressionStatement[59589-59608]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59658-59664]:BreakStatement[59629-59635]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[59681-59690]:SwitchCase[59652-59661]"
    }, {
      "left" : "t.eofError(this);",
      "right" : "t.eofError(this);",
      "info" : "ExpressionStatement[59711-59728]:ExpressionStatement[59682-59699]"
    }, {
      "left" : "t.doctypePending.forceQuirks = true;",
      "right" : "t.doctypePending.forceQuirks = true;",
      "info" : "ExpressionStatement[59749-59785]:ExpressionStatement[59720-59756]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[59806-59829]:ExpressionStatement[59777-59800]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[59850-59869]:ExpressionStatement[59821-59840]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59890-59896]:BreakStatement[59861-59867]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59913-59921]:SwitchCase[59884-59892]"
    }, {
      "left" : "t.error(this);",
      "right" : "t.error(this);",
      "info" : "ExpressionStatement[59942-59956]:ExpressionStatement[59913-59927]"
    }, {
      "left" : "t.transition(BogusDoctype);",
      "right" : "t.transition(BogusDoctype);",
      "info" : "ExpressionStatement[59977-60004]:ExpressionStatement[59948-59975]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60103-60107]:PrimitiveType[60074-60078]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[60108-60112]:SimpleName[60079-60083]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[60113-60124]:SingleVariableDeclaration[60084-60095]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[60126-60143]:SingleVariableDeclaration[60097-60114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60145-60590]:Block[60116-60561]"
    }, {
      "left" : "char c = r.consume();",
      "right" : "char c = r.consume();",
      "info" : "VariableDeclarationStatement[60159-60180]:VariableDeclarationStatement[60130-60151]"
    }, {
      "left" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }",
      "right" : "switch (c) {\n                case '>':\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                case eof:\n                    t.emitDoctypePending();\n                    t.transition(Data);\n                    break;\n                default:\n                    // ignore char\n                    break;\n            }",
      "info" : "SwitchStatement[60193-60580]:SwitchStatement[60164-60551]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[60222-60231]:SwitchCase[60193-60202]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[60252-60275]:ExpressionStatement[60223-60246]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60296-60315]:ExpressionStatement[60267-60286]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60336-60342]:BreakStatement[60307-60313]"
    }, {
      "left" : "case eof:",
      "right" : "case eof:",
      "info" : "SwitchCase[60359-60368]:SwitchCase[60330-60339]"
    }, {
      "left" : "t.emitDoctypePending();",
      "right" : "t.emitDoctypePending();",
      "info" : "ExpressionStatement[60389-60412]:ExpressionStatement[60360-60383]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60433-60452]:ExpressionStatement[60404-60423]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60473-60479]:BreakStatement[60444-60450]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[60496-60504]:SwitchCase[60467-60475]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60560-60566]:BreakStatement[60531-60537]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60625-60629]:PrimitiveType[60596-60600]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[60630-60634]:SimpleName[60601-60605]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[60635-60646]:SingleVariableDeclaration[60606-60617]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[60648-60665]:SingleVariableDeclaration[60619-60636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60667-60817]:Block[60638-60788]"
    }, {
      "left" : "String data = r.consumeTo(\"]]>\");",
      "right" : "String data = r.consumeTo(\"]]>\");",
      "info" : "VariableDeclarationStatement[60681-60714]:VariableDeclarationStatement[60652-60685]"
    }, {
      "left" : "t.emit(data);",
      "right" : "t.emit(data);",
      "info" : "ExpressionStatement[60727-60740]:ExpressionStatement[60698-60711]"
    }, {
      "left" : "r.matchConsume(\"]]>\");",
      "right" : "r.matchConsume(\"]]>\");",
      "info" : "ExpressionStatement[60753-60775]:ExpressionStatement[60724-60746]"
    }, {
      "left" : "t.transition(Data);",
      "right" : "t.transition(Data);",
      "info" : "ExpressionStatement[60788-60807]:ExpressionStatement[60759-60778]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[60831-60839]:Modifier[60802-60810]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[60840-60844]:PrimitiveType[60811-60815]"
    }, {
      "left" : "read",
      "right" : "read",
      "info" : "SimpleName[60845-60849]:SimpleName[60816-60820]"
    }, {
      "left" : "Tokeniser t",
      "right" : "Tokeniser t",
      "info" : "SingleVariableDeclaration[60850-60861]:SingleVariableDeclaration[60821-60832]"
    }, {
      "left" : "CharacterReader r",
      "right" : "CharacterReader r",
      "info" : "SingleVariableDeclaration[60863-60880]:SingleVariableDeclaration[60834-60851]"
    } ]
  },
  "interFileMappings" : { }
}