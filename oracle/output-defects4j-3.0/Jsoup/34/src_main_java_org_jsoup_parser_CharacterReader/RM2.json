{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "TypeDeclaration[88-7295]:TypeDeclaration[88-7313]"
    }, {
      "left" : "static final char EOF = (char) -1;",
      "right" : "static final char EOF = (char) -1;",
      "info" : "FieldDeclaration[202-236]:FieldDeclaration[202-236]"
    }, {
      "left" : "private final char[] input;",
      "right" : "private final char[] input;",
      "info" : "FieldDeclaration[242-269]:FieldDeclaration[242-269]"
    }, {
      "left" : "private final int length;",
      "right" : "private final int length;",
      "info" : "FieldDeclaration[274-299]:FieldDeclaration[274-299]"
    }, {
      "left" : "private int pos = 0;",
      "right" : "private int pos = 0;",
      "info" : "FieldDeclaration[304-324]:FieldDeclaration[304-324]"
    }, {
      "left" : "private int mark = 0;",
      "right" : "private int mark = 0;",
      "info" : "FieldDeclaration[329-350]:FieldDeclaration[329-350]"
    }, {
      "left" : "CharacterReader(String input)",
      "right" : "CharacterReader(String input)",
      "info" : "MethodDeclaration[356-509]:MethodDeclaration[356-509]"
    }, {
      "left" : "int pos()",
      "right" : "int pos()",
      "info" : "MethodDeclaration[515-552]:MethodDeclaration[515-552]"
    }, {
      "left" : "boolean isEmpty()",
      "right" : "boolean isEmpty()",
      "info" : "MethodDeclaration[558-613]:MethodDeclaration[558-613]"
    }, {
      "left" : "char current()",
      "right" : "char current()",
      "info" : "MethodDeclaration[619-686]:MethodDeclaration[619-686]"
    }, {
      "left" : "char consume()",
      "right" : "char consume()",
      "info" : "MethodDeclaration[692-798]:MethodDeclaration[692-798]"
    }, {
      "left" : "void unconsume()",
      "right" : "void unconsume()",
      "info" : "MethodDeclaration[804-843]:MethodDeclaration[804-843]"
    }, {
      "left" : "void advance()",
      "right" : "void advance()",
      "info" : "MethodDeclaration[849-886]:MethodDeclaration[849-886]"
    }, {
      "left" : "void mark()",
      "right" : "void mark()",
      "info" : "MethodDeclaration[892-931]:MethodDeclaration[892-931]"
    }, {
      "left" : "void rewindToMark()",
      "right" : "void rewindToMark()",
      "info" : "MethodDeclaration[937-984]:MethodDeclaration[937-984]"
    }, {
      "left" : "String consumeAsString()",
      "right" : "String consumeAsString()",
      "info" : "MethodDeclaration[990-1066]:MethodDeclaration[990-1066]"
    }, {
      "left" : "int nextIndexOf(char c)",
      "right" : "int nextIndexOf(char c)",
      "info" : "MethodDeclaration[1072-1536]:MethodDeclaration[1072-1536]"
    }, {
      "left" : "int nextIndexOf(CharSequence seq)",
      "right" : "int nextIndexOf(CharSequence seq)",
      "info" : "MethodDeclaration[1542-2490]:MethodDeclaration[1542-2508]"
    }, {
      "left" : "String consumeTo(char c)",
      "right" : "String consumeTo(char c)",
      "info" : "MethodDeclaration[2496-2773]:MethodDeclaration[2514-2791]"
    }, {
      "left" : "String consumeTo(String seq)",
      "right" : "String consumeTo(String seq)",
      "info" : "MethodDeclaration[2779-3062]:MethodDeclaration[2797-3080]"
    }, {
      "left" : "String consumeToAny(final char... chars)",
      "right" : "String consumeToAny(final char... chars)",
      "info" : "MethodDeclaration[3068-3425]:MethodDeclaration[3086-3443]"
    }, {
      "left" : "String consumeToEnd()",
      "right" : "String consumeToEnd()",
      "info" : "MethodDeclaration[3431-3561]:MethodDeclaration[3449-3579]"
    }, {
      "left" : "String consumeLetterSequence()",
      "right" : "String consumeLetterSequence()",
      "info" : "MethodDeclaration[3567-3888]:MethodDeclaration[3585-3906]"
    }, {
      "left" : "String consumeLetterThenDigitSequence()",
      "right" : "String consumeLetterThenDigitSequence()",
      "info" : "MethodDeclaration[3894-4397]:MethodDeclaration[3912-4415]"
    }, {
      "left" : "String consumeHexSequence()",
      "right" : "String consumeHexSequence()",
      "info" : "MethodDeclaration[4403-4746]:MethodDeclaration[4421-4764]"
    }, {
      "left" : "String consumeDigitSequence()",
      "right" : "String consumeDigitSequence()",
      "info" : "MethodDeclaration[4752-5043]:MethodDeclaration[4770-5061]"
    }, {
      "left" : "boolean matches(char c)",
      "right" : "boolean matches(char c)",
      "info" : "MethodDeclaration[5049-5127]:MethodDeclaration[5067-5145]"
    }, {
      "left" : "boolean matches(String seq)",
      "right" : "boolean matches(String seq)",
      "info" : "MethodDeclaration[5133-5441]:MethodDeclaration[5151-5459]"
    }, {
      "left" : "boolean matchesIgnoreCase(String seq)",
      "right" : "boolean matchesIgnoreCase(String seq)",
      "info" : "MethodDeclaration[5447-5897]:MethodDeclaration[5465-5915]"
    }, {
      "left" : "boolean matchesAny(char... seq)",
      "right" : "boolean matchesAny(char... seq)",
      "info" : "MethodDeclaration[5903-6141]:MethodDeclaration[5921-6159]"
    }, {
      "left" : "boolean matchesLetter()",
      "right" : "boolean matchesLetter()",
      "info" : "MethodDeclaration[6147-6321]:MethodDeclaration[6165-6339]"
    }, {
      "left" : "boolean matchesDigit()",
      "right" : "boolean matchesDigit()",
      "info" : "MethodDeclaration[6327-6474]:MethodDeclaration[6345-6492]"
    }, {
      "left" : "boolean matchConsume(String seq)",
      "right" : "boolean matchConsume(String seq)",
      "info" : "MethodDeclaration[6480-6659]:MethodDeclaration[6498-6677]"
    }, {
      "left" : "boolean matchConsumeIgnoreCase(String seq)",
      "right" : "boolean matchConsumeIgnoreCase(String seq)",
      "info" : "MethodDeclaration[6665-6864]:MethodDeclaration[6683-6882]"
    }, {
      "left" : "boolean containsIgnoreCase(String seq)",
      "right" : "boolean containsIgnoreCase(String seq)",
      "info" : "MethodDeclaration[6870-7188]:MethodDeclaration[6888-7206]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[7194-7293]:MethodDeclaration[7212-7311]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[174-179]:TYPE_DECLARATION_KIND[174-179]"
    }, {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "SimpleName[180-195]:SimpleName[180-195]"
    }, {
      "left" : "CharacterReader",
      "right" : "CharacterReader",
      "info" : "SimpleName[356-371]:SimpleName[356-371]"
    }, {
      "left" : "String input",
      "right" : "String input",
      "info" : "SingleVariableDeclaration[372-384]:SingleVariableDeclaration[372-384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[386-509]:Block[386-509]"
    }, {
      "left" : "Validate.notNull(input);",
      "right" : "Validate.notNull(input);",
      "info" : "ExpressionStatement[396-420]:ExpressionStatement[396-420]"
    }, {
      "left" : "this.input = input.toCharArray();",
      "right" : "this.input = input.toCharArray();",
      "info" : "ExpressionStatement[429-462]:ExpressionStatement[429-462]"
    }, {
      "left" : "this.length = this.input.length;",
      "right" : "this.length = this.input.length;",
      "info" : "ExpressionStatement[471-503]:ExpressionStatement[471-503]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[515-518]:PrimitiveType[515-518]"
    }, {
      "left" : "pos",
      "right" : "pos",
      "info" : "SimpleName[519-522]:SimpleName[519-522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[525-552]:Block[525-552]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[535-546]:ReturnStatement[535-546]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[558-565]:PrimitiveType[558-565]"
    }, {
      "left" : "isEmpty",
      "right" : "isEmpty",
      "info" : "SimpleName[566-573]:SimpleName[566-573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[576-613]:Block[576-613]"
    }, {
      "left" : "return pos >= length;",
      "right" : "return pos >= length;",
      "info" : "ReturnStatement[586-607]:ReturnStatement[586-607]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[619-623]:PrimitiveType[619-623]"
    }, {
      "left" : "current",
      "right" : "current",
      "info" : "SimpleName[624-631]:SimpleName[624-631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[634-686]:Block[634-686]"
    }, {
      "left" : "return isEmpty() ? EOF : input[pos];",
      "right" : "return isEmpty() ? EOF : input[pos];",
      "info" : "ReturnStatement[644-680]:ReturnStatement[644-680]"
    }, {
      "left" : "char",
      "right" : "char",
      "info" : "PrimitiveType[692-696]:PrimitiveType[692-696]"
    }, {
      "left" : "consume",
      "right" : "consume",
      "info" : "SimpleName[697-704]:SimpleName[697-704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[707-798]:Block[707-798]"
    }, {
      "left" : "char val = isEmpty() ? EOF : input[pos];",
      "right" : "char val = isEmpty() ? EOF : input[pos];",
      "info" : "VariableDeclarationStatement[717-757]:VariableDeclarationStatement[717-757]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[766-772]:ExpressionStatement[766-772]"
    }, {
      "left" : "return val;",
      "right" : "return val;",
      "info" : "ReturnStatement[781-792]:ReturnStatement[781-792]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[804-808]:PrimitiveType[804-808]"
    }, {
      "left" : "unconsume",
      "right" : "unconsume",
      "info" : "SimpleName[809-818]:SimpleName[809-818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[821-843]:Block[821-843]"
    }, {
      "left" : "pos--;",
      "right" : "pos--;",
      "info" : "ExpressionStatement[831-837]:ExpressionStatement[831-837]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[849-853]:PrimitiveType[849-853]"
    }, {
      "left" : "advance",
      "right" : "advance",
      "info" : "SimpleName[854-861]:SimpleName[854-861]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[864-886]:Block[864-886]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[874-880]:ExpressionStatement[874-880]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[892-896]:PrimitiveType[892-896]"
    }, {
      "left" : "mark",
      "right" : "mark",
      "info" : "SimpleName[897-901]:SimpleName[897-901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[904-931]:Block[904-931]"
    }, {
      "left" : "mark = pos;",
      "right" : "mark = pos;",
      "info" : "ExpressionStatement[914-925]:ExpressionStatement[914-925]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[937-941]:PrimitiveType[937-941]"
    }, {
      "left" : "rewindToMark",
      "right" : "rewindToMark",
      "info" : "SimpleName[942-954]:SimpleName[942-954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[957-984]:Block[957-984]"
    }, {
      "left" : "pos = mark;",
      "right" : "pos = mark;",
      "info" : "ExpressionStatement[967-978]:ExpressionStatement[967-978]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[990-996]:SimpleType[990-996]"
    }, {
      "left" : "consumeAsString",
      "right" : "consumeAsString",
      "info" : "SimpleName[997-1012]:SimpleName[997-1012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1015-1066]:Block[1015-1066]"
    }, {
      "left" : "return new String(input, pos++, 1);",
      "right" : "return new String(input, pos++, 1);",
      "info" : "ReturnStatement[1025-1060]:ReturnStatement[1025-1060]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1318-1321]:PrimitiveType[1318-1321]"
    }, {
      "left" : "nextIndexOf",
      "right" : "nextIndexOf",
      "info" : "SimpleName[1322-1333]:SimpleName[1322-1333]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[1334-1340]:SingleVariableDeclaration[1334-1340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1342-1536]:Block[1342-1536]"
    }, {
      "left" : "for (int i = pos; i < length; i++)",
      "right" : "for (int i = pos; i < length; i++)",
      "info" : "ForStatement[1402-1511]:ForStatement[1402-1511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1437-1511]:Block[1437-1511]"
    }, {
      "left" : "if (c == input[i])",
      "right" : "if (c == input[i])",
      "info" : "IfStatement[1451-1501]:IfStatement[1451-1501]"
    }, {
      "left" : "return i - pos;",
      "right" : "return i - pos;",
      "info" : "ReturnStatement[1486-1501]:ReturnStatement[1486-1501]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[1520-1530]:ReturnStatement[1520-1530]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1801-1804]:PrimitiveType[1801-1804]"
    }, {
      "left" : "nextIndexOf",
      "right" : "nextIndexOf",
      "info" : "SimpleName[1805-1816]:SimpleName[1805-1816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1835-2490]:Block[1835-2508]"
    }, {
      "left" : "char startChar = seq.charAt(0);",
      "right" : "char startChar = seq.charAt(0);",
      "info" : "VariableDeclarationStatement[1895-1926]:VariableDeclarationStatement[1895-1926]"
    }, {
      "left" : "for (int offset = pos; offset < length; offset++)",
      "right" : "for (int offset = pos; offset < length; offset++)",
      "info" : "ForStatement[1935-2465]:ForStatement[1935-2483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1985-2465]:Block[1985-2483]"
    }, {
      "left" : "if (startChar != input[offset])",
      "right" : "if (startChar != input[offset])",
      "info" : "IfStatement[2051-2154]:IfStatement[2051-2154]"
    }, {
      "left" : "while(++offset < length && startChar != input[offset]);",
      "right" : "while(++offset < length && startChar != input[offset]);",
      "info" : "WhileStatement[2099-2154]:WhileStatement[2099-2154]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[2153-2154]:EmptyStatement[2153-2154]"
    }, {
      "left" : "int i = offset + 1;",
      "right" : "int i = offset + 1;",
      "info" : "VariableDeclarationStatement[2167-2186]:VariableDeclarationStatement[2167-2186]"
    }, {
      "left" : "int last = i + seq.length()-1;",
      "right" : "int last = i + seq.length()-1;",
      "info" : "VariableDeclarationStatement[2199-2229]:VariableDeclarationStatement[2199-2229]"
    }, {
      "left" : "if (offset < length)",
      "right" : "if (offset < length && last <= length)",
      "info" : "IfStatement[2242-2455]:IfStatement[2242-2473]"
    }, {
      "left" : "offset < length",
      "right" : "offset < length",
      "info" : "InfixExpression[2246-2261]:InfixExpression[2246-2261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2263-2455]:Block[2281-2473]"
    }, {
      "left" : "for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);",
      "right" : "for (int j = 1; i < last && seq.charAt(j) == input[i]; i++, j++);",
      "info" : "ForStatement[2281-2346]:ForStatement[2299-2364]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[2345-2346]:EmptyStatement[2363-2364]"
    }, {
      "left" : "if (i == last)",
      "right" : "if (i == last)",
      "info" : "IfStatement[2363-2441]:IfStatement[2381-2459]"
    }, {
      "left" : "return offset - pos;",
      "right" : "return offset - pos;",
      "info" : "ReturnStatement[2421-2441]:ReturnStatement[2439-2459]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[2474-2484]:ReturnStatement[2492-2502]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2496-2502]:SimpleType[2514-2520]"
    }, {
      "left" : "consumeTo",
      "right" : "consumeTo",
      "info" : "SimpleName[2503-2512]:SimpleName[2521-2530]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[2513-2519]:SingleVariableDeclaration[2531-2537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2521-2773]:Block[2539-2791]"
    }, {
      "left" : "int offset = nextIndexOf(c);",
      "right" : "int offset = nextIndexOf(c);",
      "info" : "VariableDeclarationStatement[2531-2559]:VariableDeclarationStatement[2549-2577]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[2568-2767]:IfStatement[2586-2785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2586-2715]:Block[2604-2733]"
    }, {
      "left" : "String consumed = new String(input, pos, offset);",
      "right" : "String consumed = new String(input, pos, offset);",
      "info" : "VariableDeclarationStatement[2600-2649]:VariableDeclarationStatement[2618-2667]"
    }, {
      "left" : "pos += offset;",
      "right" : "pos += offset;",
      "info" : "ExpressionStatement[2662-2676]:ExpressionStatement[2680-2694]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[2689-2705]:ReturnStatement[2707-2723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2721-2767]:Block[2739-2785]"
    }, {
      "left" : "return consumeToEnd();",
      "right" : "return consumeToEnd();",
      "info" : "ReturnStatement[2735-2757]:ReturnStatement[2753-2775]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[2779-2785]:SimpleType[2797-2803]"
    }, {
      "left" : "consumeTo",
      "right" : "consumeTo",
      "info" : "SimpleName[2786-2795]:SimpleName[2804-2813]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[2796-2806]:SingleVariableDeclaration[2814-2824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2808-3062]:Block[2826-3080]"
    }, {
      "left" : "int offset = nextIndexOf(seq);",
      "right" : "int offset = nextIndexOf(seq);",
      "info" : "VariableDeclarationStatement[2818-2848]:VariableDeclarationStatement[2836-2866]"
    }, {
      "left" : "if (offset != -1)",
      "right" : "if (offset != -1)",
      "info" : "IfStatement[2857-3056]:IfStatement[2875-3074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2875-3004]:Block[2893-3022]"
    }, {
      "left" : "String consumed = new String(input, pos, offset);",
      "right" : "String consumed = new String(input, pos, offset);",
      "info" : "VariableDeclarationStatement[2889-2938]:VariableDeclarationStatement[2907-2956]"
    }, {
      "left" : "pos += offset;",
      "right" : "pos += offset;",
      "info" : "ExpressionStatement[2951-2965]:ExpressionStatement[2969-2983]"
    }, {
      "left" : "return consumed;",
      "right" : "return consumed;",
      "info" : "ReturnStatement[2978-2994]:ReturnStatement[2996-3012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3010-3056]:Block[3028-3074]"
    }, {
      "left" : "return consumeToEnd();",
      "right" : "return consumeToEnd();",
      "info" : "ReturnStatement[3024-3046]:ReturnStatement[3042-3064]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3068-3074]:SimpleType[3086-3092]"
    }, {
      "left" : "consumeToAny",
      "right" : "consumeToAny",
      "info" : "SimpleName[3075-3087]:SimpleName[3093-3105]"
    }, {
      "left" : "final char... chars",
      "right" : "final char... chars",
      "info" : "SingleVariableDeclaration[3088-3107]:SingleVariableDeclaration[3106-3125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3109-3425]:Block[3127-3443]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[3119-3135]:VariableDeclarationStatement[3137-3153]"
    }, {
      "left" : "OUTER: while (pos < length) {\n            for (int i = 0; i < chars.length; i++) {\n                if (input[pos] == chars[i])\n                    break OUTER;\n            }\n            pos++;\n        }",
      "right" : "OUTER: while (pos < length) {\n            for (int i = 0; i < chars.length; i++) {\n                if (input[pos] == chars[i])\n                    break OUTER;\n            }\n            pos++;\n        }",
      "info" : "LabeledStatement[3145-3347]:LabeledStatement[3163-3365]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[3152-3347]:WhileStatement[3170-3365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3173-3347]:Block[3191-3365]"
    }, {
      "left" : "for (int i = 0; i < chars.length; i++)",
      "right" : "for (int i = 0; i < chars.length; i++)",
      "info" : "ForStatement[3187-3318]:ForStatement[3205-3336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3226-3318]:Block[3244-3336]"
    }, {
      "left" : "if (input[pos] == chars[i])",
      "right" : "if (input[pos] == chars[i])",
      "info" : "IfStatement[3244-3304]:IfStatement[3262-3322]"
    }, {
      "left" : "break OUTER;",
      "right" : "break OUTER;",
      "info" : "BreakStatement[3292-3304]:BreakStatement[3310-3322]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[3331-3337]:ExpressionStatement[3349-3355]"
    }, {
      "left" : "return pos > start ? new String(input, start, pos-start) : \"\";",
      "right" : "return pos > start ? new String(input, start, pos-start) : \"\";",
      "info" : "ReturnStatement[3357-3419]:ReturnStatement[3375-3437]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3431-3437]:SimpleType[3449-3455]"
    }, {
      "left" : "consumeToEnd",
      "right" : "consumeToEnd",
      "info" : "SimpleName[3438-3450]:SimpleName[3456-3468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3453-3561]:Block[3471-3579]"
    }, {
      "left" : "String data = new String(input, pos, length-pos);",
      "right" : "String data = new String(input, pos, length-pos);",
      "info" : "VariableDeclarationStatement[3463-3512]:VariableDeclarationStatement[3481-3530]"
    }, {
      "left" : "pos = length;",
      "right" : "pos = length;",
      "info" : "ExpressionStatement[3521-3534]:ExpressionStatement[3539-3552]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[3543-3555]:ReturnStatement[3561-3573]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3567-3573]:SimpleType[3585-3591]"
    }, {
      "left" : "consumeLetterSequence",
      "right" : "consumeLetterSequence",
      "info" : "SimpleName[3574-3595]:SimpleName[3592-3613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3598-3888]:Block[3616-3906]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[3608-3624]:VariableDeclarationStatement[3626-3642]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[3633-3827]:WhileStatement[3651-3845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3654-3827]:Block[3672-3845]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[3668-3688]:VariableDeclarationStatement[3686-3706]"
    }, {
      "left" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "right" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[3701-3817]:IfStatement[3719-3835]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[3771-3777]:ExpressionStatement[3789-3795]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3811-3817]:BreakStatement[3829-3835]"
    }, {
      "left" : "return new String(input, start, pos - start);",
      "right" : "return new String(input, start, pos - start);",
      "info" : "ReturnStatement[3837-3882]:ReturnStatement[3855-3900]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[3894-3900]:SimpleType[3912-3918]"
    }, {
      "left" : "consumeLetterThenDigitSequence",
      "right" : "consumeLetterThenDigitSequence",
      "info" : "SimpleName[3901-3931]:SimpleName[3919-3949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3934-4397]:Block[3952-4415]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[3944-3960]:VariableDeclarationStatement[3962-3978]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[3969-4163]:WhileStatement[3987-4181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3990-4163]:Block[4008-4181]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[4004-4024]:VariableDeclarationStatement[4022-4042]"
    }, {
      "left" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "right" : "if ((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))",
      "info" : "IfStatement[4037-4153]:IfStatement[4055-4171]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[4107-4113]:ExpressionStatement[4125-4131]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4147-4153]:BreakStatement[4165-4171]"
    }, {
      "left" : "while (!isEmpty())",
      "right" : "while (!isEmpty())",
      "info" : "WhileStatement[4172-4336]:WhileStatement[4190-4354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4191-4336]:Block[4209-4354]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[4205-4225]:VariableDeclarationStatement[4223-4243]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[4238-4326]:IfStatement[4256-4344]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[4280-4286]:ExpressionStatement[4298-4304]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4320-4326]:BreakStatement[4338-4344]"
    }, {
      "left" : "return new String(input, start, pos - start);",
      "right" : "return new String(input, start, pos - start);",
      "info" : "ReturnStatement[4346-4391]:ReturnStatement[4364-4409]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4403-4409]:SimpleType[4421-4427]"
    }, {
      "left" : "consumeHexSequence",
      "right" : "consumeHexSequence",
      "info" : "SimpleName[4410-4428]:SimpleName[4428-4446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4431-4746]:Block[4449-4764]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[4441-4457]:VariableDeclarationStatement[4459-4475]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[4466-4686]:WhileStatement[4484-4704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4487-4686]:Block[4505-4704]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[4501-4521]:VariableDeclarationStatement[4519-4539]"
    }, {
      "left" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
      "right" : "if ((c >= '0' && c <= '9') || (c >= 'A' && c <= 'F') || (c >= 'a' && c <= 'f'))",
      "info" : "IfStatement[4534-4676]:IfStatement[4552-4694]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[4630-4636]:ExpressionStatement[4648-4654]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4670-4676]:BreakStatement[4688-4694]"
    }, {
      "left" : "return new String(input, start, pos - start);",
      "right" : "return new String(input, start, pos - start);",
      "info" : "ReturnStatement[4695-4740]:ReturnStatement[4713-4758]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[4752-4758]:SimpleType[4770-4776]"
    }, {
      "left" : "consumeDigitSequence",
      "right" : "consumeDigitSequence",
      "info" : "SimpleName[4759-4779]:SimpleName[4777-4797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4782-5043]:Block[4800-5061]"
    }, {
      "left" : "int start = pos;",
      "right" : "int start = pos;",
      "info" : "VariableDeclarationStatement[4792-4808]:VariableDeclarationStatement[4810-4826]"
    }, {
      "left" : "while (pos < length)",
      "right" : "while (pos < length)",
      "info" : "WhileStatement[4817-4983]:WhileStatement[4835-5001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4838-4983]:Block[4856-5001]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[4852-4872]:VariableDeclarationStatement[4870-4890]"
    }, {
      "left" : "if (c >= '0' && c <= '9')",
      "right" : "if (c >= '0' && c <= '9')",
      "info" : "IfStatement[4885-4973]:IfStatement[4903-4991]"
    }, {
      "left" : "pos++;",
      "right" : "pos++;",
      "info" : "ExpressionStatement[4927-4933]:ExpressionStatement[4945-4951]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4967-4973]:BreakStatement[4985-4991]"
    }, {
      "left" : "return new String(input, start, pos - start);",
      "right" : "return new String(input, start, pos - start);",
      "info" : "ReturnStatement[4992-5037]:ReturnStatement[5010-5055]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5049-5056]:PrimitiveType[5067-5074]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[5057-5064]:SimpleName[5075-5082]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[5065-5071]:SingleVariableDeclaration[5083-5089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5073-5127]:Block[5091-5145]"
    }, {
      "left" : "return !isEmpty() && input[pos] == c;",
      "right" : "return !isEmpty() && input[pos] == c;",
      "info" : "ReturnStatement[5083-5120]:ReturnStatement[5101-5138]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5133-5140]:PrimitiveType[5151-5158]"
    }, {
      "left" : "matches",
      "right" : "matches",
      "info" : "SimpleName[5141-5148]:SimpleName[5159-5166]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[5149-5159]:SingleVariableDeclaration[5167-5177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5161-5441]:Block[5179-5459]"
    }, {
      "left" : "int scanLength = seq.length();",
      "right" : "int scanLength = seq.length();",
      "info" : "VariableDeclarationStatement[5171-5201]:VariableDeclarationStatement[5189-5219]"
    }, {
      "left" : "if (scanLength > length - pos)",
      "right" : "if (scanLength > length - pos)",
      "info" : "IfStatement[5210-5266]:IfStatement[5228-5284]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5253-5266]:ReturnStatement[5271-5284]"
    }, {
      "left" : "for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;",
      "right" : "for (int offset = 0; offset < scanLength; offset++)\n            if (seq.charAt(offset) != input[pos+offset])\n                return false;",
      "info" : "ForStatement[5276-5414]:ForStatement[5294-5432]"
    }, {
      "left" : "if (seq.charAt(offset) != input[pos+offset])",
      "right" : "if (seq.charAt(offset) != input[pos+offset])",
      "info" : "IfStatement[5340-5414]:IfStatement[5358-5432]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5401-5414]:ReturnStatement[5419-5432]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5423-5435]:ReturnStatement[5441-5453]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5447-5454]:PrimitiveType[5465-5472]"
    }, {
      "left" : "matchesIgnoreCase",
      "right" : "matchesIgnoreCase",
      "info" : "SimpleName[5455-5472]:SimpleName[5473-5490]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[5473-5483]:SingleVariableDeclaration[5491-5501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5485-5897]:Block[5503-5915]"
    }, {
      "left" : "int scanLength = seq.length();",
      "right" : "int scanLength = seq.length();",
      "info" : "VariableDeclarationStatement[5495-5525]:VariableDeclarationStatement[5513-5543]"
    }, {
      "left" : "if (scanLength > length - pos)",
      "right" : "if (scanLength > length - pos)",
      "info" : "IfStatement[5534-5590]:IfStatement[5552-5608]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5577-5590]:ReturnStatement[5595-5608]"
    }, {
      "left" : "for (int offset = 0; offset < scanLength; offset++)",
      "right" : "for (int offset = 0; offset < scanLength; offset++)",
      "info" : "ForStatement[5600-5870]:ForStatement[5618-5888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5652-5870]:Block[5670-5888]"
    }, {
      "left" : "char upScan = Character.toUpperCase(seq.charAt(offset));",
      "right" : "char upScan = Character.toUpperCase(seq.charAt(offset));",
      "info" : "VariableDeclarationStatement[5666-5722]:VariableDeclarationStatement[5684-5740]"
    }, {
      "left" : "char upTarget = Character.toUpperCase(input[pos + offset]);",
      "right" : "char upTarget = Character.toUpperCase(input[pos + offset]);",
      "info" : "VariableDeclarationStatement[5735-5794]:VariableDeclarationStatement[5753-5812]"
    }, {
      "left" : "if (upScan != upTarget)",
      "right" : "if (upScan != upTarget)",
      "info" : "IfStatement[5807-5860]:IfStatement[5825-5878]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5847-5860]:ReturnStatement[5865-5878]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5879-5891]:ReturnStatement[5897-5909]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5903-5910]:PrimitiveType[5921-5928]"
    }, {
      "left" : "matchesAny",
      "right" : "matchesAny",
      "info" : "SimpleName[5911-5921]:SimpleName[5929-5939]"
    }, {
      "left" : "char... seq",
      "right" : "char... seq",
      "info" : "SingleVariableDeclaration[5922-5933]:SingleVariableDeclaration[5940-5951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5935-6141]:Block[5953-6159]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[5945-5985]:IfStatement[5963-6003]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5972-5985]:ReturnStatement[5990-6003]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[5995-6015]:VariableDeclarationStatement[6013-6033]"
    }, {
      "left" : "for (char seek : seq)",
      "right" : "for (char seek : seq)",
      "info" : "EnhancedForStatement[6024-6113]:EnhancedForStatement[6042-6131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6046-6113]:Block[6064-6131]"
    }, {
      "left" : "if (seek == c)",
      "right" : "if (seek == c)",
      "info" : "IfStatement[6060-6103]:IfStatement[6078-6121]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6091-6103]:ReturnStatement[6109-6121]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6122-6135]:ReturnStatement[6140-6153]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6147-6154]:PrimitiveType[6165-6172]"
    }, {
      "left" : "matchesLetter",
      "right" : "matchesLetter",
      "info" : "SimpleName[6155-6168]:SimpleName[6173-6186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6171-6321]:Block[6189-6339]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[6181-6221]:IfStatement[6199-6239]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6208-6221]:ReturnStatement[6226-6239]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[6230-6250]:VariableDeclarationStatement[6248-6268]"
    }, {
      "left" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');",
      "right" : "return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');",
      "info" : "ReturnStatement[6259-6315]:ReturnStatement[6277-6333]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6327-6334]:PrimitiveType[6345-6352]"
    }, {
      "left" : "matchesDigit",
      "right" : "matchesDigit",
      "info" : "SimpleName[6335-6347]:SimpleName[6353-6365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6350-6474]:Block[6368-6492]"
    }, {
      "left" : "if (isEmpty())",
      "right" : "if (isEmpty())",
      "info" : "IfStatement[6360-6400]:IfStatement[6378-6418]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6387-6400]:ReturnStatement[6405-6418]"
    }, {
      "left" : "char c = input[pos];",
      "right" : "char c = input[pos];",
      "info" : "VariableDeclarationStatement[6409-6429]:VariableDeclarationStatement[6427-6447]"
    }, {
      "left" : "return (c >= '0' && c <= '9');",
      "right" : "return (c >= '0' && c <= '9');",
      "info" : "ReturnStatement[6438-6468]:ReturnStatement[6456-6486]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6480-6487]:PrimitiveType[6498-6505]"
    }, {
      "left" : "matchConsume",
      "right" : "matchConsume",
      "info" : "SimpleName[6488-6500]:SimpleName[6506-6518]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[6501-6511]:SingleVariableDeclaration[6519-6529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6513-6659]:Block[6531-6677]"
    }, {
      "left" : "if (matches(seq))",
      "right" : "if (matches(seq))",
      "info" : "IfStatement[6523-6653]:IfStatement[6541-6671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6541-6610]:Block[6559-6628]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[6555-6575]:ExpressionStatement[6573-6593]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6588-6600]:ReturnStatement[6606-6618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6616-6653]:Block[6634-6671]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6630-6643]:ReturnStatement[6648-6661]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6665-6672]:PrimitiveType[6683-6690]"
    }, {
      "left" : "matchConsumeIgnoreCase",
      "right" : "matchConsumeIgnoreCase",
      "info" : "SimpleName[6673-6695]:SimpleName[6691-6713]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[6696-6706]:SingleVariableDeclaration[6714-6724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6708-6864]:Block[6726-6882]"
    }, {
      "left" : "if (matchesIgnoreCase(seq))",
      "right" : "if (matchesIgnoreCase(seq))",
      "info" : "IfStatement[6718-6858]:IfStatement[6736-6876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6746-6815]:Block[6764-6833]"
    }, {
      "left" : "pos += seq.length();",
      "right" : "pos += seq.length();",
      "info" : "ExpressionStatement[6760-6780]:ExpressionStatement[6778-6798]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6793-6805]:ReturnStatement[6811-6823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6821-6858]:Block[6839-6876]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6835-6848]:ReturnStatement[6853-6866]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[6870-6877]:PrimitiveType[6888-6895]"
    }, {
      "left" : "containsIgnoreCase",
      "right" : "containsIgnoreCase",
      "info" : "SimpleName[6878-6896]:SimpleName[6896-6914]"
    }, {
      "left" : "String seq",
      "right" : "String seq",
      "info" : "SingleVariableDeclaration[6897-6907]:SingleVariableDeclaration[6915-6925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6909-7188]:Block[6927-7206]"
    }, {
      "left" : "String loScan = seq.toLowerCase(Locale.ENGLISH);",
      "right" : "String loScan = seq.toLowerCase(Locale.ENGLISH);",
      "info" : "VariableDeclarationStatement[7004-7052]:VariableDeclarationStatement[7022-7070]"
    }, {
      "left" : "String hiScan = seq.toUpperCase(Locale.ENGLISH);",
      "right" : "String hiScan = seq.toUpperCase(Locale.ENGLISH);",
      "info" : "VariableDeclarationStatement[7061-7109]:VariableDeclarationStatement[7079-7127]"
    }, {
      "left" : "return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);",
      "right" : "return (nextIndexOf(loScan) > -1) || (nextIndexOf(hiScan) > -1);",
      "info" : "ReturnStatement[7118-7182]:ReturnStatement[7136-7200]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7194-7203]:MarkerAnnotation[7212-7221]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7208-7214]:Modifier[7226-7232]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7215-7221]:SimpleType[7233-7239]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[7222-7230]:SimpleName[7240-7248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7233-7293]:Block[7251-7311]"
    }, {
      "left" : "return new String(input, pos, length - pos);",
      "right" : "return new String(input, pos, length - pos);",
      "info" : "ReturnStatement[7243-7287]:ReturnStatement[7261-7305]"
    } ]
  },
  "interFileMappings" : { }
}