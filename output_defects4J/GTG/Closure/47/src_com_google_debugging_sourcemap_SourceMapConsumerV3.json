{
  "matchedElements" : [
 {
    "left" : "class : SourceMapConsumerV3",
    "right" : "class : SourceMapConsumerV3",
    "info" : "TypeDeclaration[1225-21905]:TypeDeclaration[1225-21913]"
  }, {
    "left" : "UNMAPPED",
    "right" : "UNMAPPED",
    "info" : "FieldDeclaration[1533-1564]:FieldDeclaration[1533-1564]"
  }, {
    "left" : "sources",
    "right" : "sources",
    "info" : "FieldDeclaration[1568-1593]:FieldDeclaration[1568-1593]"
  }, {
    "left" : "names",
    "right" : "names",
    "info" : "FieldDeclaration[1596-1619]:FieldDeclaration[1596-1619]"
  }, {
    "left" : "lineCount",
    "right" : "lineCount",
    "info" : "FieldDeclaration[1622-1644]:FieldDeclaration[1622-1644]"
  }, {
    "left" : "lines",
    "right" : "lines",
    "info" : "FieldDeclaration[1728-1777]:FieldDeclaration[1728-1777]"
  }, {
    "left" : "reverseSourceMapping",
    "right" : "reverseSourceMapping",
    "info" : "FieldDeclaration[1780-1935]:FieldDeclaration[1780-1935]"
  }, {
    "left" : "public SourceMapConsumerV3()",
    "right" : "public SourceMapConsumerV3()",
    "info" : "MethodDeclaration[1939-1974]:MethodDeclaration[1939-1974]"
  }, {
    "left" : "class : DefaultSourceMapSupplier",
    "right" : "class : DefaultSourceMapSupplier",
    "info" : "TypeDeclaration[1978-2134]:TypeDeclaration[1978-2134]"
  }, {
    "left" : "public getSourceMap(url ) : ",
    "right" : "public getSourceMap(url ) : ",
    "info" : "MethodDeclaration[2051-2130]:MethodDeclaration[2051-2130]"
  }, {
    "left" : "public parse(contents ) : void",
    "right" : "public parse(contents ) : void",
    "info" : "MethodDeclaration[2138-2316]:MethodDeclaration[2138-2316]"
  }, {
    "left" : "public parse(contents , sectionSupplier ) : void",
    "right" : "public parse(contents , sectionSupplier ) : void",
    "info" : "MethodDeclaration[2320-2725]:MethodDeclaration[2320-2725]"
  }, {
    "left" : "public parse(sourceMapRoot ) : void",
    "right" : "public parse(sourceMapRoot ) : void",
    "info" : "MethodDeclaration[2729-2909]:MethodDeclaration[2729-2909]"
  }, {
    "left" : "public parse(sourceMapRoot , sectionSupplier ) : void",
    "right" : "public parse(sourceMapRoot , sectionSupplier ) : void",
    "info" : "MethodDeclaration[2913-4147]:MethodDeclaration[2913-4147]"
  }, {
    "left" : "private parseMetaMap(sourceMapRoot , sectionSupplier ) : void",
    "right" : "private parseMetaMap(sourceMapRoot , sectionSupplier ) : void",
    "info" : "MethodDeclaration[4151-6767]:MethodDeclaration[4151-6767]"
  }, {
    "left" : "public getMappingForLine(lineNumber int, column int) : ",
    "right" : "public getMappingForLine(lineNumber int, column int) : ",
    "info" : "MethodDeclaration[6771-7689]:MethodDeclaration[6771-7689]"
  }, {
    "left" : "public getOriginalSources() : ",
    "right" : "public getOriginalSources() : ",
    "info" : "MethodDeclaration[7693-7792]:MethodDeclaration[7693-7792]"
  }, {
    "left" : "public getReverseMapping(originalFile , line int, column int) : ",
    "right" : "public getReverseMapping(originalFile , line int, column int) : ",
    "info" : "MethodDeclaration[7796-8583]:MethodDeclaration[7796-8583]"
  }, {
    "left" : "private getJavaStringArray(array ) : ",
    "right" : "private getJavaStringArray(array ) : ",
    "info" : "MethodDeclaration[8587-8833]:MethodDeclaration[8587-8833]"
  }, {
    "left" : "class : MappingBuilder",
    "right" : "class : MappingBuilder",
    "info" : "TypeDeclaration[8837-13958]:TypeDeclaration[8837-13958]"
  }, {
    "left" : "MAX_ENTRY_VALUES",
    "right" : "MAX_ENTRY_VALUES",
    "info" : "FieldDeclaration[8872-8918]:FieldDeclaration[8872-8918]"
  }, {
    "left" : "content",
    "right" : "content",
    "info" : "FieldDeclaration[8923-8964]:FieldDeclaration[8923-8964]"
  }, {
    "left" : "line",
    "right" : "line",
    "info" : "FieldDeclaration[8969-8990]:FieldDeclaration[8969-8990]"
  }, {
    "left" : "previousCol",
    "right" : "previousCol",
    "info" : "FieldDeclaration[8995-9023]:FieldDeclaration[8995-9023]"
  }, {
    "left" : "previousSrcId",
    "right" : "previousSrcId",
    "info" : "FieldDeclaration[9028-9058]:FieldDeclaration[9028-9058]"
  }, {
    "left" : "previousSrcLine",
    "right" : "previousSrcLine",
    "info" : "FieldDeclaration[9063-9095]:FieldDeclaration[9063-9095]"
  }, {
    "left" : "previousSrcColumn",
    "right" : "previousSrcColumn",
    "info" : "FieldDeclaration[9100-9134]:FieldDeclaration[9100-9134]"
  }, {
    "left" : "previousNameId",
    "right" : "previousNameId",
    "info" : "FieldDeclaration[9139-9170]:FieldDeclaration[9139-9170]"
  }, {
    "left" : "package MappingBuilder(lineMap )",
    "right" : "package MappingBuilder(lineMap )",
    "info" : "MethodDeclaration[9176-9268]:MethodDeclaration[9176-9268]"
  }, {
    "left" : "package build() : void",
    "right" : "package build() : void",
    "info" : "MethodDeclaration[9274-10420]:MethodDeclaration[9274-10420]"
  }, {
    "left" : "private validateEntry(entry ) : void",
    "right" : "private validateEntry(entry ) : void",
    "info" : "MethodDeclaration[10426-10802]:MethodDeclaration[10426-10802]"
  }, {
    "left" : "private decodeEntry(vals , entryValues int) : ",
    "right" : "private decodeEntry(vals , entryValues int) : ",
    "info" : "MethodDeclaration[10808-13485]:MethodDeclaration[10808-13485]"
  }, {
    "left" : "private tryConsumeToken(token char) : boolean",
    "right" : "private tryConsumeToken(token char) : boolean",
    "info" : "MethodDeclaration[13491-13702]:MethodDeclaration[13491-13702]"
  }, {
    "left" : "private entryComplete() : boolean",
    "right" : "private entryComplete() : boolean",
    "info" : "MethodDeclaration[13708-13877]:MethodDeclaration[13708-13877]"
  }, {
    "left" : "private nextValue() : int",
    "right" : "private nextValue() : int",
    "info" : "MethodDeclaration[13883-13954]:MethodDeclaration[13883-13954]"
  }, {
    "left" : "private search(entries , target int, start int, end int) : int",
    "right" : "private search(entries , target int, start int, end int) : int",
    "info" : "MethodDeclaration[13962-14615]:MethodDeclaration[13962-14615]"
  }, {
    "left" : "private compareEntry(entries , entry int, target int) : int",
    "right" : "private compareEntry(entries , entry int, target int) : int",
    "info" : "MethodDeclaration[14619-14841]:MethodDeclaration[14619-14841]"
  }, {
    "left" : "private getPreviousMapping(lineNumber int) : ",
    "right" : "private getPreviousMapping(lineNumber int) : ",
    "info" : "MethodDeclaration[14845-15280]:MethodDeclaration[14845-15280]"
  }, {
    "left" : "private getOriginalMappingForEntry(entry ) : ",
    "right" : "private getOriginalMappingForEntry(entry ) : ",
    "info" : "MethodDeclaration[15284-15905]:MethodDeclaration[15284-15913]"
  }, {
    "left" : "private createReverseMapping() : void",
    "right" : "private createReverseMapping() : void",
    "info" : "MethodDeclaration[15909-17509]:MethodDeclaration[15917-17517]"
  }, {
    "left" : "class : StringCharIterator",
    "right" : "class : StringCharIterator",
    "info" : "TypeDeclaration[17513-18128]:TypeDeclaration[17521-18136]"
  }, {
    "left" : "content",
    "right" : "content",
    "info" : "FieldDeclaration[17711-17732]:FieldDeclaration[17719-17740]"
  }, {
    "left" : "length",
    "right" : "length",
    "info" : "FieldDeclaration[17737-17754]:FieldDeclaration[17745-17762]"
  }, {
    "left" : "current",
    "right" : "current",
    "info" : "FieldDeclaration[17759-17775]:FieldDeclaration[17767-17783]"
  }, {
    "left" : "package StringCharIterator(content )",
    "right" : "package StringCharIterator(content )",
    "info" : "MethodDeclaration[17781-17891]:MethodDeclaration[17789-17899]"
  }, {
    "left" : "public next() : char",
    "right" : "public next() : char",
    "info" : "MethodDeclaration[17897-17977]:MethodDeclaration[17905-17985]"
  }, {
    "left" : "package peek() : char",
    "right" : "package peek() : char",
    "info" : "MethodDeclaration[17983-18040]:MethodDeclaration[17991-18048]"
  }, {
    "left" : "public hasNext() : boolean",
    "right" : "public hasNext() : boolean",
    "info" : "MethodDeclaration[18046-18124]:MethodDeclaration[18054-18132]"
  }, {
    "left" : "interface : Entry",
    "right" : "interface : Entry",
    "info" : "TypeDeclaration[18132-18354]:TypeDeclaration[18140-18362]"
  }, {
    "left" : "public getGeneratedColumn() : int",
    "right" : "public getGeneratedColumn() : int",
    "info" : "MethodDeclaration[18225-18250]:MethodDeclaration[18233-18258]"
  }, {
    "left" : "public getSourceFileId() : int",
    "right" : "public getSourceFileId() : int",
    "info" : "MethodDeclaration[18255-18277]:MethodDeclaration[18263-18285]"
  }, {
    "left" : "public getSourceLine() : int",
    "right" : "public getSourceLine() : int",
    "info" : "MethodDeclaration[18282-18302]:MethodDeclaration[18290-18310]"
  }, {
    "left" : "public getSourceColumn() : int",
    "right" : "public getSourceColumn() : int",
    "info" : "MethodDeclaration[18307-18329]:MethodDeclaration[18315-18337]"
  }, {
    "left" : "public getNameId() : int",
    "right" : "public getNameId() : int",
    "info" : "MethodDeclaration[18334-18350]:MethodDeclaration[18342-18358]"
  }, {
    "left" : "class : UnmappedEntry",
    "right" : "class : UnmappedEntry",
    "info" : "TypeDeclaration[18358-19033]:TypeDeclaration[18366-19041]"
  }, {
    "left" : "column",
    "right" : "column",
    "info" : "FieldDeclaration[18549-18574]:FieldDeclaration[18557-18582]"
  }, {
    "left" : "package UnmappedEntry(column int)",
    "right" : "package UnmappedEntry(column int)",
    "info" : "MethodDeclaration[18580-18641]:MethodDeclaration[18588-18649]"
  }, {
    "left" : "public getGeneratedColumn() : int",
    "right" : "public getGeneratedColumn() : int",
    "info" : "MethodDeclaration[18647-18721]:MethodDeclaration[18655-18729]"
  }, {
    "left" : "public getSourceFileId() : int",
    "right" : "public getSourceFileId() : int",
    "info" : "MethodDeclaration[18727-18800]:MethodDeclaration[18735-18808]"
  }, {
    "left" : "public getSourceLine() : int",
    "right" : "public getSourceLine() : int",
    "info" : "MethodDeclaration[18806-18877]:MethodDeclaration[18814-18885]"
  }, {
    "left" : "public getSourceColumn() : int",
    "right" : "public getSourceColumn() : int",
    "info" : "MethodDeclaration[18883-18956]:MethodDeclaration[18891-18964]"
  }, {
    "left" : "public getNameId() : int",
    "right" : "public getNameId() : int",
    "info" : "MethodDeclaration[18962-19029]:MethodDeclaration[18970-19037]"
  }, {
    "left" : "class : UnnamedEntry",
    "right" : "class : UnnamedEntry",
    "info" : "TypeDeclaration[19037-19823]:TypeDeclaration[19045-19831]"
  }, {
    "left" : "srcFile",
    "right" : "srcFile",
    "info" : "FieldDeclaration[19228-19254]:FieldDeclaration[19236-19262]"
  }, {
    "left" : "srcLine",
    "right" : "srcLine",
    "info" : "FieldDeclaration[19259-19285]:FieldDeclaration[19267-19293]"
  }, {
    "left" : "srcColumn",
    "right" : "srcColumn",
    "info" : "FieldDeclaration[19290-19318]:FieldDeclaration[19298-19326]"
  }, {
    "left" : "package UnnamedEntry(column int, srcFile int, srcLine int, srcColumn int)",
    "right" : "package UnnamedEntry(column int, srcFile int, srcLine int, srcColumn int)",
    "info" : "MethodDeclaration[19324-19512]:MethodDeclaration[19332-19520]"
  }, {
    "left" : "public getSourceFileId() : int",
    "right" : "public getSourceFileId() : int",
    "info" : "MethodDeclaration[19518-19590]:MethodDeclaration[19526-19598]"
  }, {
    "left" : "public getSourceLine() : int",
    "right" : "public getSourceLine() : int",
    "info" : "MethodDeclaration[19596-19666]:MethodDeclaration[19604-19674]"
  }, {
    "left" : "public getSourceColumn() : int",
    "right" : "public getSourceColumn() : int",
    "info" : "MethodDeclaration[19672-19746]:MethodDeclaration[19680-19754]"
  }, {
    "left" : "public getNameId() : int",
    "right" : "public getNameId() : int",
    "info" : "MethodDeclaration[19752-19819]:MethodDeclaration[19760-19827]"
  }, {
    "left" : "class : NamedEntry",
    "right" : "class : NamedEntry",
    "info" : "TypeDeclaration[19827-20303]:TypeDeclaration[19835-20311]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "FieldDeclaration[20046-20069]:FieldDeclaration[20054-20077]"
  }, {
    "left" : "package NamedEntry(column int, srcFile int, srcLine int, srcColumn int, name int)",
    "right" : "package NamedEntry(column int, srcFile int, srcLine int, srcColumn int, name int)",
    "info" : "MethodDeclaration[20075-20230]:MethodDeclaration[20083-20238]"
  }, {
    "left" : "public getNameId() : int",
    "right" : "public getNameId() : int",
    "info" : "MethodDeclaration[20236-20299]:MethodDeclaration[20244-20307]"
  }, {
    "left" : "interface : EntryVisitor",
    "right" : "interface : EntryVisitor",
    "info" : "TypeDeclaration[20307-20544]:TypeDeclaration[20315-20552]"
  }, {
    "left" : "public visit(sourceName , symbolName , sourceStartPosition , startPosition , endPosition ) : void",
    "right" : "public visit(sourceName , symbolName , sourceStartPosition , startPosition , endPosition ) : void",
    "info" : "MethodDeclaration[20343-20540]:MethodDeclaration[20351-20548]"
  }, {
    "left" : "public visitMappings(visitor ) : void",
    "right" : "public visitMappings(visitor ) : void",
    "info" : "MethodDeclaration[20548-21903]:MethodDeclaration[20556-21911]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1939-1945]:Modifier[1939-1945]"
  }, {
    "left" : "SourceMapConsumerV3",
    "right" : "SourceMapConsumerV3",
    "info" : "SimpleName[1946-1965]:SimpleName[1946-1965]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1968-1974]:Block[1968-1974]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1978-1984]:Modifier[1978-1984]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1985-1990]:TYPE_DECLARATION_KIND[1985-1990]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2051-2060]:MarkerAnnotation[2051-2060]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2065-2071]:Modifier[2065-2071]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[2072-2078]:SimpleType[2072-2078]"
  }, {
    "left" : "getSourceMap",
    "right" : "getSourceMap",
    "info" : "SimpleName[2079-2091]:SimpleName[2079-2091]"
  }, {
    "left" : "String url",
    "right" : "String url",
    "info" : "SingleVariableDeclaration[2092-2102]:SingleVariableDeclaration[2092-2102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2104-2130]:Block[2104-2130]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[2112-2124]:ReturnStatement[2112-2124]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2206-2215]:MarkerAnnotation[2206-2215]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2218-2224]:Modifier[2218-2224]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2225-2229]:PrimitiveType[2225-2229]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[2230-2235]:SimpleName[2230-2235]"
  }, {
    "left" : "String contents",
    "right" : "String contents",
    "info" : "SingleVariableDeclaration[2236-2251]:SingleVariableDeclaration[2236-2251]"
  }, {
    "left" : "SourceMapParseException",
    "right" : "SourceMapParseException",
    "info" : "SimpleType[2260-2283]:SimpleType[2260-2283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2284-2316]:Block[2284-2316]"
  }, {
    "left" : "parse(contents, null);",
    "right" : "parse(contents, null);",
    "info" : "ExpressionStatement[2290-2312]:ExpressionStatement[2290-2312]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2388-2394]:Modifier[2388-2394]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2395-2399]:PrimitiveType[2395-2399]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[2400-2405]:SimpleName[2400-2405]"
  }, {
    "left" : "String contents",
    "right" : "String contents",
    "info" : "SingleVariableDeclaration[2406-2421]:SingleVariableDeclaration[2406-2421]"
  }, {
    "left" : "SourceMapSupplier sectionSupplier",
    "right" : "SourceMapSupplier sectionSupplier",
    "info" : "SingleVariableDeclaration[2423-2456]:SingleVariableDeclaration[2423-2456]"
  }, {
    "left" : "SourceMapParseException",
    "right" : "SourceMapParseException",
    "info" : "SimpleType[2471-2494]:SimpleType[2471-2494]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2495-2725]:Block[2495-2725]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[2501-2721]:TryStatement[2501-2721]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2505-2616]:Block[2505-2616]"
  }, {
    "left" : "JSONObject sourceMapRoot = new JSONObject(contents);",
    "right" : "JSONObject sourceMapRoot = new JSONObject(contents);",
    "info" : "VariableDeclarationStatement[2513-2565]:VariableDeclarationStatement[2513-2565]"
  }, {
    "left" : "parse(sourceMapRoot, sectionSupplier);",
    "right" : "parse(sourceMapRoot, sectionSupplier);",
    "info" : "ExpressionStatement[2572-2610]:ExpressionStatement[2572-2610]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2642-2721]:Block[2642-2721]"
  }, {
    "left" : "throw new SourceMapParseException(\"JSON parse exception: \" + ex);",
    "right" : "throw new SourceMapParseException(\"JSON parse exception: \" + ex);",
    "info" : "ThrowStatement[2650-2715]:ThrowStatement[2650-2715]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2797-2803]:Modifier[2797-2803]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2804-2808]:PrimitiveType[2804-2808]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[2809-2814]:SimpleName[2809-2814]"
  }, {
    "left" : "JSONObject sourceMapRoot",
    "right" : "JSONObject sourceMapRoot",
    "info" : "SingleVariableDeclaration[2815-2839]:SingleVariableDeclaration[2815-2839]"
  }, {
    "left" : "SourceMapParseException",
    "right" : "SourceMapParseException",
    "info" : "SimpleType[2848-2871]:SimpleType[2848-2871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2872-2909]:Block[2872-2909]"
  }, {
    "left" : "parse(sourceMapRoot, null);",
    "right" : "parse(sourceMapRoot, null);",
    "info" : "ExpressionStatement[2878-2905]:ExpressionStatement[2878-2905]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2981-2987]:Modifier[2981-2987]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2988-2992]:PrimitiveType[2988-2992]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[2993-2998]:SimpleName[2993-2998]"
  }, {
    "left" : "JSONObject sourceMapRoot",
    "right" : "JSONObject sourceMapRoot",
    "info" : "SingleVariableDeclaration[2999-3023]:SingleVariableDeclaration[2999-3023]"
  }, {
    "left" : "SourceMapSupplier sectionSupplier",
    "right" : "SourceMapSupplier sectionSupplier",
    "info" : "SingleVariableDeclaration[3025-3058]:SingleVariableDeclaration[3025-3058]"
  }, {
    "left" : "SourceMapParseException",
    "right" : "SourceMapParseException",
    "info" : "SimpleType[3073-3096]:SimpleType[3073-3096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3097-4147]:Block[3097-4147]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[3103-4143]:TryStatement[3103-4143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3107-4038]:Block[3107-4038]"
  }, {
    "left" : "int version = sourceMapRoot.getInt(\"version\");",
    "right" : "int version = sourceMapRoot.getInt(\"version\");",
    "info" : "VariableDeclarationStatement[3165-3211]:VariableDeclarationStatement[3165-3211]"
  }, {
    "left" : "if (version != 3)",
    "right" : "if (version != 3)",
    "info" : "IfStatement[3218-3319]:IfStatement[3218-3319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3236-3319]:Block[3236-3319]"
  }, {
    "left" : "throw new SourceMapParseException(\"Unknown version: \" + version);",
    "right" : "throw new SourceMapParseException(\"Unknown version: \" + version);",
    "info" : "ThrowStatement[3246-3311]:ThrowStatement[3246-3311]"
  }, {
    "left" : "String file = sourceMapRoot.getString(\"file\");",
    "right" : "String file = sourceMapRoot.getString(\"file\");",
    "info" : "VariableDeclarationStatement[3327-3373]:VariableDeclarationStatement[3327-3373]"
  }, {
    "left" : "if (file.isEmpty())",
    "right" : "if (file.isEmpty())",
    "info" : "IfStatement[3380-3486]:IfStatement[3380-3486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3400-3486]:Block[3400-3486]"
  }, {
    "left" : "throw new SourceMapParseException(\"File entry is missing or empty\");",
    "right" : "throw new SourceMapParseException(\"File entry is missing or empty\");",
    "info" : "ThrowStatement[3410-3478]:ThrowStatement[3410-3478]"
  }, {
    "left" : "if (sourceMapRoot.has(\"sections\"))",
    "right" : "if (sourceMapRoot.has(\"sections\"))",
    "info" : "IfStatement[3494-3669]:IfStatement[3494-3669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3529-3669]:Block[3529-3669]"
  }, {
    "left" : "parseMetaMap(sourceMapRoot, sectionSupplier);",
    "right" : "parseMetaMap(sourceMapRoot, sectionSupplier);",
    "info" : "ExpressionStatement[3600-3645]:ExpressionStatement[3600-3645]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[3654-3661]:ReturnStatement[3654-3661]"
  }, {
    "left" : "lineCount = sourceMapRoot.getInt(\"lineCount\");",
    "right" : "lineCount = sourceMapRoot.getInt(\"lineCount\");",
    "info" : "ExpressionStatement[3677-3723]:ExpressionStatement[3677-3723]"
  }, {
    "left" : "String lineMap = sourceMapRoot.getString(\"mappings\");",
    "right" : "String lineMap = sourceMapRoot.getString(\"mappings\");",
    "info" : "VariableDeclarationStatement[3730-3783]:VariableDeclarationStatement[3730-3783]"
  }, {
    "left" : "sources = getJavaStringArray(sourceMapRoot.getJSONArray(\"sources\"));",
    "right" : "sources = getJavaStringArray(sourceMapRoot.getJSONArray(\"sources\"));",
    "info" : "ExpressionStatement[3791-3859]:ExpressionStatement[3791-3859]"
  }, {
    "left" : "names = getJavaStringArray(sourceMapRoot.getJSONArray(\"names\"));",
    "right" : "names = getJavaStringArray(sourceMapRoot.getJSONArray(\"names\"));",
    "info" : "ExpressionStatement[3866-3930]:ExpressionStatement[3866-3930]"
  }, {
    "left" : "lines = Lists.newArrayListWithCapacity(lineCount);",
    "right" : "lines = Lists.newArrayListWithCapacity(lineCount);",
    "info" : "ExpressionStatement[3938-3988]:ExpressionStatement[3938-3988]"
  }, {
    "left" : "new MappingBuilder(lineMap).build();",
    "right" : "new MappingBuilder(lineMap).build();",
    "info" : "ExpressionStatement[3996-4032]:ExpressionStatement[3996-4032]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4064-4143]:Block[4064-4143]"
  }, {
    "left" : "throw new SourceMapParseException(\"JSON parse exception: \" + ex);",
    "right" : "throw new SourceMapParseException(\"JSON parse exception: \" + ex);",
    "info" : "ThrowStatement[4072-4137]:ThrowStatement[4072-4137]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4226-4233]:Modifier[4226-4233]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4234-4238]:PrimitiveType[4234-4238]"
  }, {
    "left" : "parseMetaMap",
    "right" : "parseMetaMap",
    "info" : "SimpleName[4239-4251]:SimpleName[4239-4251]"
  }, {
    "left" : "JSONObject sourceMapRoot",
    "right" : "JSONObject sourceMapRoot",
    "info" : "SingleVariableDeclaration[4259-4283]:SingleVariableDeclaration[4259-4283]"
  }, {
    "left" : "SourceMapSupplier sectionSupplier",
    "right" : "SourceMapSupplier sectionSupplier",
    "info" : "SingleVariableDeclaration[4285-4318]:SingleVariableDeclaration[4285-4318]"
  }, {
    "left" : "SourceMapParseException",
    "right" : "SourceMapParseException",
    "info" : "SimpleType[4333-4356]:SimpleType[4333-4356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4357-6767]:Block[4357-6767]"
  }, {
    "left" : "if (sectionSupplier == null)",
    "right" : "if (sectionSupplier == null)",
    "info" : "IfStatement[4363-4455]:IfStatement[4363-4455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4392-4455]:Block[4392-4455]"
  }, {
    "left" : "sectionSupplier = new DefaultSourceMapSupplier();",
    "right" : "sectionSupplier = new DefaultSourceMapSupplier();",
    "info" : "ExpressionStatement[4400-4449]:ExpressionStatement[4400-4449]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[4461-6763]:TryStatement[4461-6763]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4465-6563]:Block[4465-6563]"
  }, {
    "left" : "int version = sourceMapRoot.getInt(\"version\");",
    "right" : "int version = sourceMapRoot.getInt(\"version\");",
    "info" : "VariableDeclarationStatement[4523-4569]:VariableDeclarationStatement[4523-4569]"
  }, {
    "left" : "if (version != 3)",
    "right" : "if (version != 3)",
    "info" : "IfStatement[4576-4677]:IfStatement[4576-4677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4594-4677]:Block[4594-4677]"
  }, {
    "left" : "throw new SourceMapParseException(\"Unknown version: \" + version);",
    "right" : "throw new SourceMapParseException(\"Unknown version: \" + version);",
    "info" : "ThrowStatement[4604-4669]:ThrowStatement[4604-4669]"
  }, {
    "left" : "String file = sourceMapRoot.getString(\"file\");",
    "right" : "String file = sourceMapRoot.getString(\"file\");",
    "info" : "VariableDeclarationStatement[4685-4731]:VariableDeclarationStatement[4685-4731]"
  }, {
    "left" : "if (file.isEmpty())",
    "right" : "if (file.isEmpty())",
    "info" : "IfStatement[4738-4844]:IfStatement[4738-4844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4758-4844]:Block[4758-4844]"
  }, {
    "left" : "throw new SourceMapParseException(\"File entry is missing or empty\");",
    "right" : "throw new SourceMapParseException(\"File entry is missing or empty\");",
    "info" : "ThrowStatement[4768-4836]:ThrowStatement[4768-4836]"
  }, {
    "left" : "if (sourceMapRoot.has(\"lineCount\")\n          || sourceMapRoot.has(\"mappings\")\n          || sourceMapRoot.has(\"sources\")\n          || sourceMapRoot.has(\"names\"))",
    "right" : "if (sourceMapRoot.has(\"lineCount\")\n          || sourceMapRoot.has(\"mappings\")\n          || sourceMapRoot.has(\"sources\")\n          || sourceMapRoot.has(\"names\"))",
    "info" : "IfStatement[4852-5087]:IfStatement[4852-5087]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5013-5087]:Block[5013-5087]"
  }, {
    "left" : "throw new SourceMapParseException(\"Invalid map format\");",
    "right" : "throw new SourceMapParseException(\"Invalid map format\");",
    "info" : "ThrowStatement[5023-5079]:ThrowStatement[5023-5079]"
  }, {
    "left" : "SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();",
    "right" : "SourceMapGeneratorV3 generator = new SourceMapGeneratorV3();",
    "info" : "VariableDeclarationStatement[5095-5155]:VariableDeclarationStatement[5095-5155]"
  }, {
    "left" : "JSONArray sections = sourceMapRoot.getJSONArray(\"sections\");",
    "right" : "JSONArray sections = sourceMapRoot.getJSONArray(\"sections\");",
    "info" : "VariableDeclarationStatement[5162-5222]:VariableDeclarationStatement[5162-5222]"
  }, {
    "left" : "for (int i = 0, count = sections.length(); i < count; i++)",
    "right" : "for (int i = 0, count = sections.length(); i < count; i++)",
    "info" : "ForStatement[5229-6327]:ForStatement[5229-6327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5288-6327]:Block[5288-6327]"
  }, {
    "left" : "JSONObject section = sections.getJSONObject(i);",
    "right" : "JSONObject section = sections.getJSONObject(i);",
    "info" : "VariableDeclarationStatement[5298-5345]:VariableDeclarationStatement[5298-5345]"
  }, {
    "left" : "if (section.has(\"map\") && section.has(\"url\"))",
    "right" : "if (section.has(\"map\") && section.has(\"url\"))",
    "info" : "IfStatement[5354-5536]:IfStatement[5354-5536]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5400-5536]:Block[5400-5536]"
  }, {
    "left" : "throw new SourceMapParseException(\n              \"Invalid map format: section may not have both 'map' and 'url'\");",
    "right" : "throw new SourceMapParseException(\n              \"Invalid map format: section may not have both 'map' and 'url'\");",
    "info" : "ThrowStatement[5412-5526]:ThrowStatement[5412-5526]"
  }, {
    "left" : "JSONObject offset = section.getJSONObject(\"offset\");",
    "right" : "JSONObject offset = section.getJSONObject(\"offset\");",
    "info" : "VariableDeclarationStatement[5545-5597]:VariableDeclarationStatement[5545-5597]"
  }, {
    "left" : "int line = offset.getInt(\"line\");",
    "right" : "int line = offset.getInt(\"line\");",
    "info" : "VariableDeclarationStatement[5606-5639]:VariableDeclarationStatement[5606-5639]"
  }, {
    "left" : "int column = offset.getInt(\"column\");",
    "right" : "int column = offset.getInt(\"column\");",
    "info" : "VariableDeclarationStatement[5648-5685]:VariableDeclarationStatement[5648-5685]"
  }, {
    "left" : "String mapSectionContents;",
    "right" : "String mapSectionContents;",
    "info" : "VariableDeclarationStatement[5694-5720]:VariableDeclarationStatement[5694-5720]"
  }, {
    "left" : "if (section.has(\"url\"))",
    "right" : "if (section.has(\"url\"))",
    "info" : "IfStatement[5729-6250]:IfStatement[5729-6250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5753-6012]:Block[5753-6012]"
  }, {
    "left" : "String url = section.getString(\"url\");",
    "right" : "String url = section.getString(\"url\");",
    "info" : "VariableDeclarationStatement[5765-5803]:VariableDeclarationStatement[5765-5803]"
  }, {
    "left" : "mapSectionContents = sectionSupplier.getSourceMap(url);",
    "right" : "mapSectionContents = sectionSupplier.getSourceMap(url);",
    "info" : "ExpressionStatement[5814-5869]:ExpressionStatement[5814-5869]"
  }, {
    "left" : "if (mapSectionContents == null)",
    "right" : "if (mapSectionContents == null)",
    "info" : "IfStatement[5880-6002]:IfStatement[5880-6002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5912-6002]:Block[5912-6002]"
  }, {
    "left" : "throw new SourceMapParseException(\"Unable to retrieve: \" + url);",
    "right" : "throw new SourceMapParseException(\"Unable to retrieve: \" + url);",
    "info" : "ThrowStatement[5926-5990]:ThrowStatement[5926-5990]"
  }, {
    "left" : "if (section.has(\"map\"))",
    "right" : "if (section.has(\"map\"))",
    "info" : "IfStatement[6018-6250]:IfStatement[6018-6250]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6042-6110]:Block[6042-6110]"
  }, {
    "left" : "mapSectionContents = section.getString(\"map\");",
    "right" : "mapSectionContents = section.getString(\"map\");",
    "info" : "ExpressionStatement[6054-6100]:ExpressionStatement[6054-6100]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6116-6250]:Block[6116-6250]"
  }, {
    "left" : "throw new SourceMapParseException(\n              \"Invalid map format: section must have either 'map' or 'url'\");",
    "right" : "throw new SourceMapParseException(\n              \"Invalid map format: section must have either 'map' or 'url'\");",
    "info" : "ThrowStatement[6128-6240]:ThrowStatement[6128-6240]"
  }, {
    "left" : "generator.mergeMapSection(line, column, mapSectionContents);",
    "right" : "generator.mergeMapSection(line, column, mapSectionContents);",
    "info" : "ExpressionStatement[6259-6319]:ExpressionStatement[6259-6319]"
  }, {
    "left" : "StringBuilder sb = new StringBuilder();",
    "right" : "StringBuilder sb = new StringBuilder();",
    "info" : "VariableDeclarationStatement[6335-6374]:VariableDeclarationStatement[6335-6374]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[6381-6528]:TryStatement[6381-6528]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6385-6432]:Block[6385-6432]"
  }, {
    "left" : "generator.appendTo(sb, file);",
    "right" : "generator.appendTo(sb, file);",
    "info" : "ExpressionStatement[6395-6424]:ExpressionStatement[6395-6424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6455-6528]:Block[6455-6528]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[6490-6520]:ThrowStatement[6490-6520]"
  }, {
    "left" : "parse(sb.toString());",
    "right" : "parse(sb.toString());",
    "info" : "ExpressionStatement[6536-6557]:ExpressionStatement[6536-6557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6587-6658]:Block[6587-6658]"
  }, {
    "left" : "throw new SourceMapParseException(\"IO exception: \" + ex);",
    "right" : "throw new SourceMapParseException(\"IO exception: \" + ex);",
    "info" : "ThrowStatement[6595-6652]:ThrowStatement[6595-6652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6684-6763]:Block[6684-6763]"
  }, {
    "left" : "throw new SourceMapParseException(\"JSON parse exception: \" + ex);",
    "right" : "throw new SourceMapParseException(\"JSON parse exception: \" + ex);",
    "info" : "ThrowStatement[6692-6757]:ThrowStatement[6692-6757]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[6771-6780]:MarkerAnnotation[6771-6780]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6783-6789]:Modifier[6783-6789]"
  }, {
    "left" : "OriginalMapping",
    "right" : "OriginalMapping",
    "info" : "SimpleType[6790-6805]:SimpleType[6790-6805]"
  }, {
    "left" : "getMappingForLine",
    "right" : "getMappingForLine",
    "info" : "SimpleName[6806-6823]:SimpleName[6806-6823]"
  }, {
    "left" : "int lineNumber",
    "right" : "int lineNumber",
    "info" : "SingleVariableDeclaration[6824-6838]:SingleVariableDeclaration[6824-6838]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[6840-6850]:SingleVariableDeclaration[6840-6850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6852-7689]:Block[6852-7689]"
  }, {
    "left" : "lineNumber--;",
    "right" : "lineNumber--;",
    "info" : "ExpressionStatement[6909-6922]:ExpressionStatement[6909-6922]"
  }, {
    "left" : "column--;",
    "right" : "column--;",
    "info" : "ExpressionStatement[6927-6936]:ExpressionStatement[6927-6936]"
  }, {
    "left" : "if (lineNumber < 0 || lineNumber >= lines.size())",
    "right" : "if (lineNumber < 0 || lineNumber >= lines.size())",
    "info" : "IfStatement[6942-7018]:IfStatement[6942-7018]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6992-7018]:Block[6992-7018]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[7000-7012]:ReturnStatement[7000-7012]"
  }, {
    "left" : "Preconditions.checkState(lineNumber >= 0);",
    "right" : "Preconditions.checkState(lineNumber >= 0);",
    "info" : "ExpressionStatement[7024-7066]:ExpressionStatement[7024-7066]"
  }, {
    "left" : "Preconditions.checkState(column >= 0);",
    "right" : "Preconditions.checkState(column >= 0);",
    "info" : "ExpressionStatement[7071-7109]:ExpressionStatement[7071-7109]"
  }, {
    "left" : "if (lines.get(lineNumber) == null)",
    "right" : "if (lines.get(lineNumber) == null)",
    "info" : "IfStatement[7173-7260]:IfStatement[7173-7260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7208-7260]:Block[7208-7260]"
  }, {
    "left" : "return getPreviousMapping(lineNumber);",
    "right" : "return getPreviousMapping(lineNumber);",
    "info" : "ReturnStatement[7216-7254]:ReturnStatement[7216-7254]"
  }, {
    "left" : "ArrayList<Entry> entries = lines.get(lineNumber);",
    "right" : "ArrayList<Entry> entries = lines.get(lineNumber);",
    "info" : "VariableDeclarationStatement[7266-7315]:VariableDeclarationStatement[7266-7315]"
  }, {
    "left" : "Preconditions.checkState(entries.size() > 0);",
    "right" : "Preconditions.checkState(entries.size() > 0);",
    "info" : "ExpressionStatement[7343-7388]:ExpressionStatement[7343-7388]"
  }, {
    "left" : "if (entries.get(0).getGeneratedColumn() > column)",
    "right" : "if (entries.get(0).getGeneratedColumn() > column)",
    "info" : "IfStatement[7393-7495]:IfStatement[7393-7495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7443-7495]:Block[7443-7495]"
  }, {
    "left" : "return getPreviousMapping(lineNumber);",
    "right" : "return getPreviousMapping(lineNumber);",
    "info" : "ReturnStatement[7451-7489]:ReturnStatement[7451-7489]"
  }, {
    "left" : "int index = search(entries, column, 0, entries.size() - 1);",
    "right" : "int index = search(entries, column, 0, entries.size() - 1);",
    "info" : "VariableDeclarationStatement[7501-7560]:VariableDeclarationStatement[7501-7560]"
  }, {
    "left" : "Preconditions.checkState(index >= 0, \"unexpected:%s\", index);",
    "right" : "Preconditions.checkState(index >= 0, \"unexpected:%s\", index);",
    "info" : "ExpressionStatement[7565-7626]:ExpressionStatement[7565-7626]"
  }, {
    "left" : "return getOriginalMappingForEntry(entries.get(index));",
    "right" : "return getOriginalMappingForEntry(entries.get(index));",
    "info" : "ReturnStatement[7631-7685]:ReturnStatement[7631-7685]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7693-7702]:MarkerAnnotation[7693-7702]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7705-7711]:Modifier[7705-7711]"
  }, {
    "left" : "Collection<String>",
    "right" : "Collection<String>",
    "info" : "ParameterizedType[7712-7730]:ParameterizedType[7712-7730]"
  }, {
    "left" : "getOriginalSources",
    "right" : "getOriginalSources",
    "info" : "SimpleName[7731-7749]:SimpleName[7731-7749]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7752-7792]:Block[7752-7792]"
  }, {
    "left" : "return Arrays.asList(sources);",
    "right" : "return Arrays.asList(sources);",
    "info" : "ReturnStatement[7758-7788]:ReturnStatement[7758-7788]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[7796-7805]:MarkerAnnotation[7796-7805]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7808-7814]:Modifier[7808-7814]"
  }, {
    "left" : "Collection<OriginalMapping>",
    "right" : "Collection<OriginalMapping>",
    "info" : "ParameterizedType[7815-7842]:ParameterizedType[7815-7842]"
  }, {
    "left" : "getReverseMapping",
    "right" : "getReverseMapping",
    "info" : "SimpleName[7843-7860]:SimpleName[7843-7860]"
  }, {
    "left" : "String originalFile",
    "right" : "String originalFile",
    "info" : "SingleVariableDeclaration[7861-7880]:SingleVariableDeclaration[7861-7880]"
  }, {
    "left" : "int line",
    "right" : "int line",
    "info" : "SingleVariableDeclaration[7888-7896]:SingleVariableDeclaration[7888-7896]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[7898-7908]:SingleVariableDeclaration[7898-7908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7910-8583]:Block[7910-8583]"
  }, {
    "left" : "if (reverseSourceMapping == null)",
    "right" : "if (reverseSourceMapping == null)",
    "info" : "IfStatement[8071-8142]:IfStatement[8071-8142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8105-8142]:Block[8105-8142]"
  }, {
    "left" : "createReverseMapping();",
    "right" : "createReverseMapping();",
    "info" : "ExpressionStatement[8113-8136]:ExpressionStatement[8113-8136]"
  }, {
    "left" : "Map<Integer, Collection<OriginalMapping>> sourceLineToCollectionMap =\n        reverseSourceMapping.get(originalFile);",
    "right" : "Map<Integer, Collection<OriginalMapping>> sourceLineToCollectionMap =\n        reverseSourceMapping.get(originalFile);",
    "info" : "VariableDeclarationStatement[8148-8265]:VariableDeclarationStatement[8148-8265]"
  }, {
    "left" : "if (sourceLineToCollectionMap == null)",
    "right" : "if (sourceLineToCollectionMap == null)",
    "info" : "IfStatement[8271-8579]:IfStatement[8271-8579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8310-8355]:Block[8310-8355]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[8318-8349]:ReturnStatement[8318-8349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8361-8579]:Block[8361-8579]"
  }, {
    "left" : "Collection<OriginalMapping> mappings =\n          sourceLineToCollectionMap.get(line);",
    "right" : "Collection<OriginalMapping> mappings =\n          sourceLineToCollectionMap.get(line);",
    "info" : "VariableDeclarationStatement[8369-8454]:VariableDeclarationStatement[8369-8454]"
  }, {
    "left" : "if (mappings == null)",
    "right" : "if (mappings == null)",
    "info" : "IfStatement[8462-8573]:IfStatement[8462-8573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8484-8533]:Block[8484-8533]"
  }, {
    "left" : "return Collections.emptyList();",
    "right" : "return Collections.emptyList();",
    "info" : "ReturnStatement[8494-8525]:ReturnStatement[8494-8525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8539-8573]:Block[8539-8573]"
  }, {
    "left" : "return mappings;",
    "right" : "return mappings;",
    "info" : "ReturnStatement[8549-8565]:ReturnStatement[8549-8565]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8587-8594]:Modifier[8587-8594]"
  }, {
    "left" : "String[]",
    "right" : "String[]",
    "info" : "ArrayType[8595-8603]:ArrayType[8595-8603]"
  }, {
    "left" : "getJavaStringArray",
    "right" : "getJavaStringArray",
    "info" : "SimpleName[8604-8622]:SimpleName[8604-8622]"
  }, {
    "left" : "JSONArray array",
    "right" : "JSONArray array",
    "info" : "SingleVariableDeclaration[8623-8638]:SingleVariableDeclaration[8623-8638]"
  }, {
    "left" : "JSONException",
    "right" : "JSONException",
    "info" : "SimpleType[8647-8660]:SimpleType[8647-8660]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8661-8833]:Block[8661-8833]"
  }, {
    "left" : "int len = array.length();",
    "right" : "int len = array.length();",
    "info" : "VariableDeclarationStatement[8667-8692]:VariableDeclarationStatement[8667-8692]"
  }, {
    "left" : "String[] result = new String[len];",
    "right" : "String[] result = new String[len];",
    "info" : "VariableDeclarationStatement[8697-8731]:VariableDeclarationStatement[8697-8731]"
  }, {
    "left" : "for(int i = 0; i < len; i++)",
    "right" : "for(int i = 0; i < len; i++)",
    "info" : "ForStatement[8736-8810]:ForStatement[8736-8810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8765-8810]:Block[8765-8810]"
  }, {
    "left" : "result[i] = array.getString(i);",
    "right" : "result[i] = array.getString(i);",
    "info" : "ExpressionStatement[8773-8804]:ExpressionStatement[8773-8804]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[8815-8829]:ReturnStatement[8815-8829]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8837-8844]:Modifier[8837-8844]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[8845-8850]:TYPE_DECLARATION_KIND[8845-8850]"
  }, {
    "left" : "MappingBuilder",
    "right" : "MappingBuilder",
    "info" : "SimpleName[9176-9190]:SimpleName[9176-9190]"
  }, {
    "left" : "String lineMap",
    "right" : "String lineMap",
    "info" : "SingleVariableDeclaration[9191-9205]:SingleVariableDeclaration[9191-9205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9207-9268]:Block[9207-9268]"
  }, {
    "left" : "this.content = new StringCharIterator(lineMap);",
    "right" : "this.content = new StringCharIterator(lineMap);",
    "info" : "ExpressionStatement[9215-9262]:ExpressionStatement[9215-9262]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9274-9278]:PrimitiveType[9274-9278]"
  }, {
    "left" : "build",
    "right" : "build",
    "info" : "SimpleName[9279-9284]:SimpleName[9279-9284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9287-10420]:Block[9287-10420]"
  }, {
    "left" : "int [] temp = new int[MAX_ENTRY_VALUES];",
    "right" : "int [] temp = new int[MAX_ENTRY_VALUES];",
    "info" : "VariableDeclarationStatement[9295-9335]:VariableDeclarationStatement[9295-9335]"
  }, {
    "left" : "ArrayList<Entry> entries = new ArrayList<Entry>();",
    "right" : "ArrayList<Entry> entries = new ArrayList<Entry>();",
    "info" : "VariableDeclarationStatement[9342-9392]:VariableDeclarationStatement[9342-9392]"
  }, {
    "left" : "while (content.hasNext())",
    "right" : "while (content.hasNext())",
    "info" : "WhileStatement[9399-10414]:WhileStatement[9399-10414]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9425-10414]:Block[9425-10414]"
  }, {
    "left" : "if (tryConsumeToken(';'))",
    "right" : "if (tryConsumeToken(';'))",
    "info" : "IfStatement[9470-10406]:IfStatement[9470-10406]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9496-9970]:Block[9496-9970]"
  }, {
    "left" : "ArrayList<Entry> result;",
    "right" : "ArrayList<Entry> result;",
    "info" : "VariableDeclarationStatement[9614-9638]:VariableDeclarationStatement[9614-9638]"
  }, {
    "left" : "if (entries.size() > 0)",
    "right" : "if (entries.size() > 0)",
    "info" : "IfStatement[9649-9859]:IfStatement[9649-9859]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9673-9813]:Block[9673-9813]"
  }, {
    "left" : "result = entries;",
    "right" : "result = entries;",
    "info" : "ExpressionStatement[9687-9704]:ExpressionStatement[9687-9704]"
  }, {
    "left" : "entries = new ArrayList<Entry>();",
    "right" : "entries = new ArrayList<Entry>();",
    "info" : "ExpressionStatement[9768-9801]:ExpressionStatement[9768-9801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9819-9859]:Block[9819-9859]"
  }, {
    "left" : "result = null;",
    "right" : "result = null;",
    "info" : "ExpressionStatement[9833-9847]:ExpressionStatement[9833-9847]"
  }, {
    "left" : "lines.add(result);",
    "right" : "lines.add(result);",
    "info" : "ExpressionStatement[9870-9888]:ExpressionStatement[9870-9888]"
  }, {
    "left" : "entries.clear();",
    "right" : "entries.clear();",
    "info" : "ExpressionStatement[9899-9915]:ExpressionStatement[9899-9915]"
  }, {
    "left" : "line++;",
    "right" : "line++;",
    "info" : "ExpressionStatement[9926-9933]:ExpressionStatement[9926-9933]"
  }, {
    "left" : "previousCol = 0;",
    "right" : "previousCol = 0;",
    "info" : "ExpressionStatement[9944-9960]:ExpressionStatement[9944-9960]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9976-10406]:Block[9976-10406]"
  }, {
    "left" : "int entryValues = 0;",
    "right" : "int entryValues = 0;",
    "info" : "VariableDeclarationStatement[10043-10063]:VariableDeclarationStatement[10043-10063]"
  }, {
    "left" : "while (!entryComplete())",
    "right" : "while (!entryComplete())",
    "info" : "WhileStatement[10074-10184]:WhileStatement[10074-10184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10099-10184]:Block[10099-10184]"
  }, {
    "left" : "temp[entryValues] = nextValue();",
    "right" : "temp[entryValues] = nextValue();",
    "info" : "ExpressionStatement[10113-10145]:ExpressionStatement[10113-10145]"
  }, {
    "left" : "entryValues++;",
    "right" : "entryValues++;",
    "info" : "ExpressionStatement[10158-10172]:ExpressionStatement[10158-10172]"
  }, {
    "left" : "Entry entry = decodeEntry(temp, entryValues);",
    "right" : "Entry entry = decodeEntry(temp, entryValues);",
    "info" : "VariableDeclarationStatement[10195-10240]:VariableDeclarationStatement[10195-10240]"
  }, {
    "left" : "validateEntry(entry);",
    "right" : "validateEntry(entry);",
    "info" : "ExpressionStatement[10252-10273]:ExpressionStatement[10252-10273]"
  }, {
    "left" : "entries.add(entry);",
    "right" : "entries.add(entry);",
    "info" : "ExpressionStatement[10284-10303]:ExpressionStatement[10284-10303]"
  }, {
    "left" : "tryConsumeToken(',');",
    "right" : "tryConsumeToken(',');",
    "info" : "ExpressionStatement[10375-10396]:ExpressionStatement[10375-10396]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10473-10480]:Modifier[10473-10480]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10481-10485]:PrimitiveType[10481-10485]"
  }, {
    "left" : "validateEntry",
    "right" : "validateEntry",
    "info" : "SimpleName[10486-10499]:SimpleName[10486-10499]"
  }, {
    "left" : "Entry entry",
    "right" : "Entry entry",
    "info" : "SingleVariableDeclaration[10500-10511]:SingleVariableDeclaration[10500-10511]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10513-10802]:Block[10513-10802]"
  }, {
    "left" : "Preconditions.checkState(line < lineCount);",
    "right" : "Preconditions.checkState(line < lineCount);",
    "info" : "ExpressionStatement[10521-10564]:ExpressionStatement[10521-10564]"
  }, {
    "left" : "Preconditions.checkState(entry.getSourceFileId() == UNMAPPED\n          || entry.getSourceFileId() < sources.length);",
    "right" : "Preconditions.checkState(entry.getSourceFileId() == UNMAPPED\n          || entry.getSourceFileId() < sources.length);",
    "info" : "ExpressionStatement[10571-10687]:ExpressionStatement[10571-10687]"
  }, {
    "left" : "Preconditions.checkState(entry.getNameId() == UNMAPPED\n          || entry.getNameId() < names.length);",
    "right" : "Preconditions.checkState(entry.getNameId() == UNMAPPED\n          || entry.getNameId() < names.length);",
    "info" : "ExpressionStatement[10694-10796]:ExpressionStatement[10694-10796]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[11109-11116]:Modifier[11109-11116]"
  }, {
    "left" : "Entry",
    "right" : "Entry",
    "info" : "SimpleType[11117-11122]:SimpleType[11117-11122]"
  }, {
    "left" : "decodeEntry",
    "right" : "decodeEntry",
    "info" : "SimpleName[11123-11134]:SimpleName[11123-11134]"
  }, {
    "left" : "int[] vals",
    "right" : "int[] vals",
    "info" : "SingleVariableDeclaration[11135-11145]:SingleVariableDeclaration[11135-11145]"
  }, {
    "left" : "int entryValues",
    "right" : "int entryValues",
    "info" : "SingleVariableDeclaration[11147-11162]:SingleVariableDeclaration[11147-11162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11164-13485]:Block[11164-13485]"
  }, {
    "left" : "Entry entry;",
    "right" : "Entry entry;",
    "info" : "VariableDeclarationStatement[11172-11184]:VariableDeclarationStatement[11172-11184]"
  }, {
    "left" : "switch (entryValues) {\n        // The first values, if present are in the following order:\n        //   0: the starting column in the current line of the generated file\n        //   1: the id of the original source file\n        //   2: the starting line in the original source\n        //   3: the starting column in the original source\n        //   4: the id of the original symbol name\n        // The values are relative to the last encountered value for that field.\n        // Note: the previously column value for the generated file is reset\n        // to '0' when a new line is encountered.  This is done in the 'build'\n        // method.\n\n        case 1:\n          // An unmapped section of the generated file.\n          entry = new UnmappedEntry(\n              vals[0] + previousCol);\n          // Set the values see for the next entry.\n          previousCol = entry.getGeneratedColumn();\n          return entry;\n\n        case 4:\n          // A mapped section of the generated file.\n          entry = new UnnamedEntry(\n              vals[0] + previousCol,\n              vals[1] + previousSrcId,\n              vals[2] + previousSrcLine,\n              vals[3] + previousSrcColumn);\n          // Set the values see for the next entry.\n          previousCol = entry.getGeneratedColumn();\n          previousSrcId = entry.getSourceFileId();\n          previousSrcLine = entry.getSourceLine();\n          previousSrcColumn = entry.getSourceColumn();\n          return entry;\n\n        case 5:\n          // A mapped section of the generated file, that has an associated\n          // name.\n          entry = new NamedEntry(\n              vals[0] + previousCol,\n              vals[1] + previousSrcId,\n              vals[2] + previousSrcLine,\n              vals[3] + previousSrcColumn,\n              vals[4] + previousNameId);\n          // Set the values see for the next entry.\n          previousCol = entry.getGeneratedColumn();\n          previousSrcId = entry.getSourceFileId();\n          previousSrcLine = entry.getSourceLine();\n          previousSrcColumn = entry.getSourceColumn();\n          previousNameId = entry.getNameId();\n          return entry;\n\n        default:\n          throw new IllegalStateException(\n              \"Unexpected number of values for entry:\" + entryValues);\n      }",
    "right" : "switch (entryValues) {\n        // The first values, if present are in the following order:\n        //   0: the starting column in the current line of the generated file\n        //   1: the id of the original source file\n        //   2: the starting line in the original source\n        //   3: the starting column in the original source\n        //   4: the id of the original symbol name\n        // The values are relative to the last encountered value for that field.\n        // Note: the previously column value for the generated file is reset\n        // to '0' when a new line is encountered.  This is done in the 'build'\n        // method.\n\n        case 1:\n          // An unmapped section of the generated file.\n          entry = new UnmappedEntry(\n              vals[0] + previousCol);\n          // Set the values see for the next entry.\n          previousCol = entry.getGeneratedColumn();\n          return entry;\n\n        case 4:\n          // A mapped section of the generated file.\n          entry = new UnnamedEntry(\n              vals[0] + previousCol,\n              vals[1] + previousSrcId,\n              vals[2] + previousSrcLine,\n              vals[3] + previousSrcColumn);\n          // Set the values see for the next entry.\n          previousCol = entry.getGeneratedColumn();\n          previousSrcId = entry.getSourceFileId();\n          previousSrcLine = entry.getSourceLine();\n          previousSrcColumn = entry.getSourceColumn();\n          return entry;\n\n        case 5:\n          // A mapped section of the generated file, that has an associated\n          // name.\n          entry = new NamedEntry(\n              vals[0] + previousCol,\n              vals[1] + previousSrcId,\n              vals[2] + previousSrcLine,\n              vals[3] + previousSrcColumn,\n              vals[4] + previousNameId);\n          // Set the values see for the next entry.\n          previousCol = entry.getGeneratedColumn();\n          previousSrcId = entry.getSourceFileId();\n          previousSrcLine = entry.getSourceLine();\n          previousSrcColumn = entry.getSourceColumn();\n          previousNameId = entry.getNameId();\n          return entry;\n\n        default:\n          throw new IllegalStateException(\n              \"Unexpected number of values for entry:\" + entryValues);\n      }",
    "info" : "SwitchStatement[11191-13479]:SwitchStatement[11191-13479]"
  }, {
    "left" : "case 1:",
    "right" : "case 1:",
    "info" : "SwitchCase[11843-11850]:SwitchCase[11843-11850]"
  }, {
    "left" : "entry = new UnmappedEntry(\n              vals[0] + previousCol);",
    "right" : "entry = new UnmappedEntry(\n              vals[0] + previousCol);",
    "info" : "ExpressionStatement[11917-11981]:ExpressionStatement[11917-11981]"
  }, {
    "left" : "previousCol = entry.getGeneratedColumn();",
    "right" : "previousCol = entry.getGeneratedColumn();",
    "info" : "ExpressionStatement[12044-12085]:ExpressionStatement[12044-12085]"
  }, {
    "left" : "return entry;",
    "right" : "return entry;",
    "info" : "ReturnStatement[12096-12109]:ReturnStatement[12096-12109]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[12119-12126]:SwitchCase[12119-12126]"
  }, {
    "left" : "entry = new UnnamedEntry(\n              vals[0] + previousCol,\n              vals[1] + previousSrcId,\n              vals[2] + previousSrcLine,\n              vals[3] + previousSrcColumn);",
    "right" : "entry = new UnnamedEntry(\n              vals[0] + previousCol,\n              vals[1] + previousSrcId,\n              vals[2] + previousSrcLine,\n              vals[3] + previousSrcColumn);",
    "info" : "ExpressionStatement[12190-12376]:ExpressionStatement[12190-12376]"
  }, {
    "left" : "previousCol = entry.getGeneratedColumn();",
    "right" : "previousCol = entry.getGeneratedColumn();",
    "info" : "ExpressionStatement[12439-12480]:ExpressionStatement[12439-12480]"
  }, {
    "left" : "previousSrcId = entry.getSourceFileId();",
    "right" : "previousSrcId = entry.getSourceFileId();",
    "info" : "ExpressionStatement[12491-12531]:ExpressionStatement[12491-12531]"
  }, {
    "left" : "previousSrcLine = entry.getSourceLine();",
    "right" : "previousSrcLine = entry.getSourceLine();",
    "info" : "ExpressionStatement[12542-12582]:ExpressionStatement[12542-12582]"
  }, {
    "left" : "previousSrcColumn = entry.getSourceColumn();",
    "right" : "previousSrcColumn = entry.getSourceColumn();",
    "info" : "ExpressionStatement[12593-12637]:ExpressionStatement[12593-12637]"
  }, {
    "left" : "return entry;",
    "right" : "return entry;",
    "info" : "ReturnStatement[12648-12661]:ReturnStatement[12648-12661]"
  }, {
    "left" : "case 5:",
    "right" : "case 5:",
    "info" : "SwitchCase[12671-12678]:SwitchCase[12671-12678]"
  }, {
    "left" : "entry = new NamedEntry(\n              vals[0] + previousCol,\n              vals[1] + previousSrcId,\n              vals[2] + previousSrcLine,\n              vals[3] + previousSrcColumn,\n              vals[4] + previousNameId);",
    "right" : "entry = new NamedEntry(\n              vals[0] + previousCol,\n              vals[1] + previousSrcId,\n              vals[2] + previousSrcLine,\n              vals[3] + previousSrcColumn,\n              vals[4] + previousNameId);",
    "info" : "ExpressionStatement[12784-13008]:ExpressionStatement[12784-13008]"
  }, {
    "left" : "previousCol = entry.getGeneratedColumn();",
    "right" : "previousCol = entry.getGeneratedColumn();",
    "info" : "ExpressionStatement[13071-13112]:ExpressionStatement[13071-13112]"
  }, {
    "left" : "previousSrcId = entry.getSourceFileId();",
    "right" : "previousSrcId = entry.getSourceFileId();",
    "info" : "ExpressionStatement[13123-13163]:ExpressionStatement[13123-13163]"
  }, {
    "left" : "previousSrcLine = entry.getSourceLine();",
    "right" : "previousSrcLine = entry.getSourceLine();",
    "info" : "ExpressionStatement[13174-13214]:ExpressionStatement[13174-13214]"
  }, {
    "left" : "previousSrcColumn = entry.getSourceColumn();",
    "right" : "previousSrcColumn = entry.getSourceColumn();",
    "info" : "ExpressionStatement[13225-13269]:ExpressionStatement[13225-13269]"
  }, {
    "left" : "previousNameId = entry.getNameId();",
    "right" : "previousNameId = entry.getNameId();",
    "info" : "ExpressionStatement[13280-13315]:ExpressionStatement[13280-13315]"
  }, {
    "left" : "return entry;",
    "right" : "return entry;",
    "info" : "ReturnStatement[13326-13339]:ReturnStatement[13326-13339]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[13349-13357]:SwitchCase[13349-13357]"
  }, {
    "left" : "throw new IllegalStateException(\n              \"Unexpected number of values for entry:\" + entryValues);",
    "right" : "throw new IllegalStateException(\n              \"Unexpected number of values for entry:\" + entryValues);",
    "info" : "ThrowStatement[13368-13471]:ThrowStatement[13368-13471]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13491-13498]:Modifier[13491-13498]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13499-13506]:PrimitiveType[13499-13506]"
  }, {
    "left" : "tryConsumeToken",
    "right" : "tryConsumeToken",
    "info" : "SimpleName[13507-13522]:SimpleName[13507-13522]"
  }, {
    "left" : "char token",
    "right" : "char token",
    "info" : "SingleVariableDeclaration[13523-13533]:SingleVariableDeclaration[13523-13533]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13535-13702]:Block[13535-13702]"
  }, {
    "left" : "if (content.hasNext() && content.peek() == token)",
    "right" : "if (content.hasNext() && content.peek() == token)",
    "info" : "IfStatement[13543-13676]:IfStatement[13543-13676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13593-13676]:Block[13593-13676]"
  }, {
    "left" : "content.next();",
    "right" : "content.next();",
    "info" : "ExpressionStatement[13632-13647]:ExpressionStatement[13632-13647]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[13656-13668]:ReturnStatement[13656-13668]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13683-13696]:ReturnStatement[13683-13696]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13708-13715]:Modifier[13708-13715]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13716-13723]:PrimitiveType[13716-13723]"
  }, {
    "left" : "entryComplete",
    "right" : "entryComplete",
    "info" : "SimpleName[13724-13737]:SimpleName[13724-13737]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13740-13877]:Block[13740-13877]"
  }, {
    "left" : "if (!content.hasNext())",
    "right" : "if (!content.hasNext())",
    "info" : "IfStatement[13748-13802]:IfStatement[13748-13802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13772-13802]:Block[13772-13802]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[13782-13794]:ReturnStatement[13782-13794]"
  }, {
    "left" : "char c = content.peek();",
    "right" : "char c = content.peek();",
    "info" : "VariableDeclarationStatement[13810-13834]:VariableDeclarationStatement[13810-13834]"
  }, {
    "left" : "return (c == ';' || c == ',');",
    "right" : "return (c == ';' || c == ',');",
    "info" : "ReturnStatement[13841-13871]:ReturnStatement[13841-13871]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13883-13890]:Modifier[13883-13890]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[13891-13894]:PrimitiveType[13891-13894]"
  }, {
    "left" : "nextValue",
    "right" : "nextValue",
    "info" : "SimpleName[13895-13904]:SimpleName[13895-13904]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13907-13954]:Block[13907-13954]"
  }, {
    "left" : "return Base64VLQ.decode(content);",
    "right" : "return Base64VLQ.decode(content);",
    "info" : "ReturnStatement[13915-13948]:ReturnStatement[13915-13948]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14070-14077]:Modifier[14070-14077]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14078-14081]:PrimitiveType[14078-14081]"
  }, {
    "left" : "search",
    "right" : "search",
    "info" : "SimpleName[14082-14088]:SimpleName[14082-14088]"
  }, {
    "left" : "ArrayList<Entry> entries",
    "right" : "ArrayList<Entry> entries",
    "info" : "SingleVariableDeclaration[14089-14113]:SingleVariableDeclaration[14089-14113]"
  }, {
    "left" : "int target",
    "right" : "int target",
    "info" : "SingleVariableDeclaration[14115-14125]:SingleVariableDeclaration[14115-14125]"
  }, {
    "left" : "int start",
    "right" : "int start",
    "info" : "SingleVariableDeclaration[14127-14136]:SingleVariableDeclaration[14127-14136]"
  }, {
    "left" : "int end",
    "right" : "int end",
    "info" : "SingleVariableDeclaration[14138-14145]:SingleVariableDeclaration[14138-14145]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14147-14615]:Block[14147-14615]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[14153-14611]:WhileStatement[14153-14611]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14166-14611]:Block[14166-14611]"
  }, {
    "left" : "int mid = ((end - start) / 2) + start;",
    "right" : "int mid = ((end - start) / 2) + start;",
    "info" : "VariableDeclarationStatement[14174-14212]:VariableDeclarationStatement[14174-14212]"
  }, {
    "left" : "int compare = compareEntry(entries, mid, target);",
    "right" : "int compare = compareEntry(entries, mid, target);",
    "info" : "VariableDeclarationStatement[14219-14268]:VariableDeclarationStatement[14219-14268]"
  }, {
    "left" : "if (compare == 0)",
    "right" : "if (compare == 0)",
    "info" : "IfStatement[14275-14605]:IfStatement[14275-14605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14293-14322]:Block[14293-14322]"
  }, {
    "left" : "return mid;",
    "right" : "return mid;",
    "info" : "ReturnStatement[14303-14314]:ReturnStatement[14303-14314]"
  }, {
    "left" : "if (compare < 0)",
    "right" : "if (compare < 0)",
    "info" : "IfStatement[14328-14605]:IfStatement[14328-14605]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14345-14473]:Block[14345-14473]"
  }, {
    "left" : "start = mid + 1;",
    "right" : "start = mid + 1;",
    "info" : "ExpressionStatement[14390-14406]:ExpressionStatement[14390-14406]"
  }, {
    "left" : "if (start > end)",
    "right" : "if (start > end)",
    "info" : "IfStatement[14415-14465]:IfStatement[14415-14465]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14432-14465]:Block[14432-14465]"
  }, {
    "left" : "return end;",
    "right" : "return end;",
    "info" : "ReturnStatement[14444-14455]:ReturnStatement[14444-14455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14479-14605]:Block[14479-14605]"
  }, {
    "left" : "end = mid - 1;",
    "right" : "end = mid - 1;",
    "info" : "ExpressionStatement[14524-14538]:ExpressionStatement[14524-14538]"
  }, {
    "left" : "if (end < start)",
    "right" : "if (end < start)",
    "info" : "IfStatement[14547-14597]:IfStatement[14547-14597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14564-14597]:Block[14564-14597]"
  }, {
    "left" : "return end;",
    "right" : "return end;",
    "info" : "ReturnStatement[14576-14587]:ReturnStatement[14576-14587]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14701-14708]:Modifier[14701-14708]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[14709-14712]:PrimitiveType[14709-14712]"
  }, {
    "left" : "compareEntry",
    "right" : "compareEntry",
    "info" : "SimpleName[14713-14725]:SimpleName[14713-14725]"
  }, {
    "left" : "ArrayList<Entry> entries",
    "right" : "ArrayList<Entry> entries",
    "info" : "SingleVariableDeclaration[14726-14750]:SingleVariableDeclaration[14726-14750]"
  }, {
    "left" : "int entry",
    "right" : "int entry",
    "info" : "SingleVariableDeclaration[14752-14761]:SingleVariableDeclaration[14752-14761]"
  }, {
    "left" : "int target",
    "right" : "int target",
    "info" : "SingleVariableDeclaration[14763-14773]:SingleVariableDeclaration[14763-14773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14775-14841]:Block[14775-14841]"
  }, {
    "left" : "return entries.get(entry).getGeneratedColumn() - target;",
    "right" : "return entries.get(entry).getGeneratedColumn() - target;",
    "info" : "ReturnStatement[14781-14837]:ReturnStatement[14781-14837]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14958-14965]:Modifier[14958-14965]"
  }, {
    "left" : "OriginalMapping",
    "right" : "OriginalMapping",
    "info" : "SimpleType[14966-14981]:SimpleType[14966-14981]"
  }, {
    "left" : "getPreviousMapping",
    "right" : "getPreviousMapping",
    "info" : "SimpleName[14982-15000]:SimpleName[14982-15000]"
  }, {
    "left" : "int lineNumber",
    "right" : "int lineNumber",
    "info" : "SingleVariableDeclaration[15001-15015]:SingleVariableDeclaration[15001-15015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15017-15280]:Block[15017-15280]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[15023-15150]:DoStatement[15023-15150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15026-15111]:Block[15026-15111]"
  }, {
    "left" : "if (lineNumber == 0)",
    "right" : "if (lineNumber == 0)",
    "info" : "IfStatement[15034-15085]:IfStatement[15034-15085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15055-15085]:Block[15055-15085]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[15065-15077]:ReturnStatement[15065-15077]"
  }, {
    "left" : "lineNumber--;",
    "right" : "lineNumber--;",
    "info" : "ExpressionStatement[15092-15105]:ExpressionStatement[15092-15105]"
  }, {
    "left" : "ArrayList<Entry> entries = lines.get(lineNumber);",
    "right" : "ArrayList<Entry> entries = lines.get(lineNumber);",
    "info" : "VariableDeclarationStatement[15155-15204]:VariableDeclarationStatement[15155-15204]"
  }, {
    "left" : "return getOriginalMappingForEntry(entries.get(entries.size() - 1));",
    "right" : "return getOriginalMappingForEntry(entries.get(entries.size() - 1));",
    "info" : "ReturnStatement[15209-15276]:ReturnStatement[15209-15276]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15365-15372]:Modifier[15365-15372]"
  }, {
    "left" : "OriginalMapping",
    "right" : "OriginalMapping",
    "info" : "SimpleType[15373-15388]:SimpleType[15373-15388]"
  }, {
    "left" : "getOriginalMappingForEntry",
    "right" : "getOriginalMappingForEntry",
    "info" : "SimpleName[15389-15415]:SimpleName[15389-15415]"
  }, {
    "left" : "Entry entry",
    "right" : "Entry entry",
    "info" : "SingleVariableDeclaration[15416-15427]:SingleVariableDeclaration[15416-15427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15429-15905]:Block[15429-15913]"
  }, {
    "left" : "if (entry.getSourceFileId() == UNMAPPED)",
    "right" : "if (entry.getSourceFileId() == UNMAPPED)",
    "info" : "IfStatement[15435-15901]:IfStatement[15435-15909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15476-15502]:Block[15476-15502]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[15484-15496]:ReturnStatement[15484-15496]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15508-15901]:Block[15508-15909]"
  }, {
    "left" : "Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine())\n        .setColumnPosition(entry.getSourceColumn());",
    "right" : "Builder x = OriginalMapping.newBuilder()\n        .setOriginalFile(sources[entry.getSourceFileId()])\n        .setLineNumber(entry.getSourceLine() + 1)\n        .setColumnPosition(entry.getSourceColumn() + 1);",
    "info" : "VariableDeclarationStatement[15571-15769]:VariableDeclarationStatement[15571-15777]"
  }, {
    "left" : "entry.getSourceLine()",
    "right" : "entry.getSourceLine()",
    "info" : "MethodInvocation[15694-15715]:MethodInvocation[15694-15715]"
  }, {
    "left" : "entry.getSourceColumn()",
    "right" : "entry.getSourceColumn()",
    "info" : "MethodInvocation[15744-15767]:MethodInvocation[15748-15771]"
  }, {
    "left" : "if (entry.getNameId() != UNMAPPED)",
    "right" : "if (entry.getNameId() != UNMAPPED)",
    "info" : "IfStatement[15776-15871]:IfStatement[15784-15879]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15811-15871]:Block[15819-15879]"
  }, {
    "left" : "x.setIdentifier(names[entry.getNameId()]);",
    "right" : "x.setIdentifier(names[entry.getNameId()]);",
    "info" : "ExpressionStatement[15821-15863]:ExpressionStatement[15829-15871]"
  }, {
    "left" : "return x.build();",
    "right" : "return x.build();",
    "info" : "ReturnStatement[15878-15895]:ReturnStatement[15886-15903]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16087-16094]:Modifier[16095-16102]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16095-16099]:PrimitiveType[16103-16107]"
  }, {
    "left" : "createReverseMapping",
    "right" : "createReverseMapping",
    "info" : "SimpleName[16100-16120]:SimpleName[16108-16128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16123-17509]:Block[16131-17517]"
  }, {
    "left" : "reverseSourceMapping =\n        new HashMap<String, Map<Integer, Collection<OriginalMapping>>>();",
    "right" : "reverseSourceMapping =\n        new HashMap<String, Map<Integer, Collection<OriginalMapping>>>();",
    "info" : "ExpressionStatement[16129-16225]:ExpressionStatement[16137-16233]"
  }, {
    "left" : "for (int targetLine = 0; targetLine < lines.size(); targetLine++)",
    "right" : "for (int targetLine = 0; targetLine < lines.size(); targetLine++)",
    "info" : "ForStatement[16231-17505]:ForStatement[16239-17513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16297-17505]:Block[16305-17513]"
  }, {
    "left" : "ArrayList<Entry> entries = lines.get(targetLine);",
    "right" : "ArrayList<Entry> entries = lines.get(targetLine);",
    "info" : "VariableDeclarationStatement[16305-16354]:VariableDeclarationStatement[16313-16362]"
  }, {
    "left" : "if (entries != null)",
    "right" : "if (entries != null)",
    "info" : "IfStatement[16362-17499]:IfStatement[16370-17507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16383-17499]:Block[16391-17507]"
  }, {
    "left" : "for (Entry entry : entries)",
    "right" : "for (Entry entry : entries)",
    "info" : "EnhancedForStatement[16393-17491]:EnhancedForStatement[16401-17499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16421-17491]:Block[16429-17499]"
  }, {
    "left" : "if (entry.getSourceFileId() != UNMAPPED\n              && entry.getSourceLine() != UNMAPPED)",
    "right" : "if (entry.getSourceFileId() != UNMAPPED\n              && entry.getSourceLine() != UNMAPPED)",
    "info" : "IfStatement[16433-17481]:IfStatement[16441-17489]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16525-17481]:Block[16533-17489]"
  }, {
    "left" : "String originalFile = sources[entry.getSourceFileId()];",
    "right" : "String originalFile = sources[entry.getSourceFileId()];",
    "info" : "VariableDeclarationStatement[16539-16594]:VariableDeclarationStatement[16547-16602]"
  }, {
    "left" : "if (!reverseSourceMapping.containsKey(originalFile))",
    "right" : "if (!reverseSourceMapping.containsKey(originalFile))",
    "info" : "IfStatement[16608-16801]:IfStatement[16616-16809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16661-16801]:Block[16669-16809]"
  }, {
    "left" : "reverseSourceMapping.put(originalFile,\n                  new HashMap<Integer, Collection<OriginalMapping>>());",
    "right" : "reverseSourceMapping.put(originalFile,\n                  new HashMap<Integer, Collection<OriginalMapping>>());",
    "info" : "ExpressionStatement[16677-16787]:ExpressionStatement[16685-16795]"
  }, {
    "left" : "Map<Integer, Collection<OriginalMapping>> lineToCollectionMap =\n                reverseSourceMapping.get(originalFile);",
    "right" : "Map<Integer, Collection<OriginalMapping>> lineToCollectionMap =\n                reverseSourceMapping.get(originalFile);",
    "info" : "VariableDeclarationStatement[16815-16934]:VariableDeclarationStatement[16823-16942]"
  }, {
    "left" : "int sourceLine = entry.getSourceLine();",
    "right" : "int sourceLine = entry.getSourceLine();",
    "info" : "VariableDeclarationStatement[16948-16987]:VariableDeclarationStatement[16956-16995]"
  }, {
    "left" : "if (!lineToCollectionMap.containsKey(sourceLine))",
    "right" : "if (!lineToCollectionMap.containsKey(sourceLine))",
    "info" : "IfStatement[17001-17170]:IfStatement[17009-17178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17051-17170]:Block[17059-17178]"
  }, {
    "left" : "lineToCollectionMap.put(sourceLine,\n                  new ArrayList<OriginalMapping>(1));",
    "right" : "lineToCollectionMap.put(sourceLine,\n                  new ArrayList<OriginalMapping>(1));",
    "info" : "ExpressionStatement[17067-17156]:ExpressionStatement[17075-17164]"
  }, {
    "left" : "Collection<OriginalMapping> mappings =\n                lineToCollectionMap.get(sourceLine);",
    "right" : "Collection<OriginalMapping> mappings =\n                lineToCollectionMap.get(sourceLine);",
    "info" : "VariableDeclarationStatement[17184-17275]:VariableDeclarationStatement[17192-17283]"
  }, {
    "left" : "Builder builder = OriginalMapping.newBuilder().setLineNumber(\n                targetLine).setColumnPosition(entry.getGeneratedColumn());",
    "right" : "Builder builder = OriginalMapping.newBuilder().setLineNumber(\n                targetLine).setColumnPosition(entry.getGeneratedColumn());",
    "info" : "VariableDeclarationStatement[17289-17425]:VariableDeclarationStatement[17297-17433]"
  }, {
    "left" : "mappings.add(builder.build());",
    "right" : "mappings.add(builder.build());",
    "info" : "ExpressionStatement[17439-17469]:ExpressionStatement[17447-17477]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17641-17648]:Modifier[17649-17656]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[17649-17655]:Modifier[17657-17663]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[17656-17661]:TYPE_DECLARATION_KIND[17664-17669]"
  }, {
    "left" : "StringCharIterator",
    "right" : "StringCharIterator",
    "info" : "SimpleName[17781-17799]:SimpleName[17789-17807]"
  }, {
    "left" : "String content",
    "right" : "String content",
    "info" : "SingleVariableDeclaration[17800-17814]:SingleVariableDeclaration[17808-17822]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17816-17891]:Block[17824-17899]"
  }, {
    "left" : "this.content = content;",
    "right" : "this.content = content;",
    "info" : "ExpressionStatement[17824-17847]:ExpressionStatement[17832-17855]"
  }, {
    "left" : "this.length = content.length();",
    "right" : "this.length = content.length();",
    "info" : "ExpressionStatement[17854-17885]:ExpressionStatement[17862-17893]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[17897-17906]:MarkerAnnotation[17905-17914]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17911-17917]:Modifier[17919-17925]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[17918-17922]:PrimitiveType[17926-17930]"
  }, {
    "left" : "next",
    "right" : "next",
    "info" : "SimpleName[17923-17927]:SimpleName[17931-17935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17930-17977]:Block[17938-17985]"
  }, {
    "left" : "return content.charAt(current++);",
    "right" : "return content.charAt(current++);",
    "info" : "ReturnStatement[17938-17971]:ReturnStatement[17946-17979]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[17983-17987]:PrimitiveType[17991-17995]"
  }, {
    "left" : "peek",
    "right" : "peek",
    "info" : "SimpleName[17988-17992]:SimpleName[17996-18000]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17995-18040]:Block[18003-18048]"
  }, {
    "left" : "return content.charAt(current);",
    "right" : "return content.charAt(current);",
    "info" : "ReturnStatement[18003-18034]:ReturnStatement[18011-18042]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18046-18055]:MarkerAnnotation[18054-18063]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18060-18066]:Modifier[18068-18074]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18067-18074]:PrimitiveType[18075-18082]"
  }, {
    "left" : "hasNext",
    "right" : "hasNext",
    "info" : "SimpleName[18075-18082]:SimpleName[18083-18090]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18085-18124]:Block[18093-18132]"
  }, {
    "left" : "return  current < length;",
    "right" : "return  current < length;",
    "info" : "ReturnStatement[18093-18118]:ReturnStatement[18101-18126]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18195-18202]:Modifier[18203-18210]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[18203-18212]:TYPE_DECLARATION_KIND[18211-18220]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18225-18228]:PrimitiveType[18233-18236]"
  }, {
    "left" : "getGeneratedColumn",
    "right" : "getGeneratedColumn",
    "info" : "SimpleName[18229-18247]:SimpleName[18237-18255]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18255-18258]:PrimitiveType[18263-18266]"
  }, {
    "left" : "getSourceFileId",
    "right" : "getSourceFileId",
    "info" : "SimpleName[18259-18274]:SimpleName[18267-18282]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18282-18285]:PrimitiveType[18290-18293]"
  }, {
    "left" : "getSourceLine",
    "right" : "getSourceLine",
    "info" : "SimpleName[18286-18299]:SimpleName[18294-18307]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18307-18310]:PrimitiveType[18315-18318]"
  }, {
    "left" : "getSourceColumn",
    "right" : "getSourceColumn",
    "info" : "SimpleName[18311-18326]:SimpleName[18319-18334]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18334-18337]:PrimitiveType[18342-18345]"
  }, {
    "left" : "getNameId",
    "right" : "getNameId",
    "info" : "SimpleName[18338-18347]:SimpleName[18346-18355]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18491-18498]:Modifier[18499-18506]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[18499-18505]:Modifier[18507-18513]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[18506-18511]:TYPE_DECLARATION_KIND[18514-18519]"
  }, {
    "left" : "UnmappedEntry",
    "right" : "UnmappedEntry",
    "info" : "SimpleName[18580-18593]:SimpleName[18588-18601]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[18594-18604]:SingleVariableDeclaration[18602-18612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18606-18641]:Block[18614-18649]"
  }, {
    "left" : "this.column = column;",
    "right" : "this.column = column;",
    "info" : "ExpressionStatement[18614-18635]:ExpressionStatement[18622-18643]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18647-18656]:MarkerAnnotation[18655-18664]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18661-18667]:Modifier[18669-18675]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18668-18671]:PrimitiveType[18676-18679]"
  }, {
    "left" : "getGeneratedColumn",
    "right" : "getGeneratedColumn",
    "info" : "SimpleName[18672-18690]:SimpleName[18680-18698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18693-18721]:Block[18701-18729]"
  }, {
    "left" : "return column;",
    "right" : "return column;",
    "info" : "ReturnStatement[18701-18715]:ReturnStatement[18709-18723]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18727-18736]:MarkerAnnotation[18735-18744]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18741-18747]:Modifier[18749-18755]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18748-18751]:PrimitiveType[18756-18759]"
  }, {
    "left" : "getSourceFileId",
    "right" : "getSourceFileId",
    "info" : "SimpleName[18752-18767]:SimpleName[18760-18775]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18770-18800]:Block[18778-18808]"
  }, {
    "left" : "return UNMAPPED;",
    "right" : "return UNMAPPED;",
    "info" : "ReturnStatement[18778-18794]:ReturnStatement[18786-18802]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18806-18815]:MarkerAnnotation[18814-18823]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18820-18826]:Modifier[18828-18834]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18827-18830]:PrimitiveType[18835-18838]"
  }, {
    "left" : "getSourceLine",
    "right" : "getSourceLine",
    "info" : "SimpleName[18831-18844]:SimpleName[18839-18852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18847-18877]:Block[18855-18885]"
  }, {
    "left" : "return UNMAPPED;",
    "right" : "return UNMAPPED;",
    "info" : "ReturnStatement[18855-18871]:ReturnStatement[18863-18879]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18883-18892]:MarkerAnnotation[18891-18900]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18897-18903]:Modifier[18905-18911]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18904-18907]:PrimitiveType[18912-18915]"
  }, {
    "left" : "getSourceColumn",
    "right" : "getSourceColumn",
    "info" : "SimpleName[18908-18923]:SimpleName[18916-18931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18926-18956]:Block[18934-18964]"
  }, {
    "left" : "return UNMAPPED;",
    "right" : "return UNMAPPED;",
    "info" : "ReturnStatement[18934-18950]:ReturnStatement[18942-18958]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18962-18971]:MarkerAnnotation[18970-18979]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18976-18982]:Modifier[18984-18990]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[18983-18986]:PrimitiveType[18991-18994]"
  }, {
    "left" : "getNameId",
    "right" : "getNameId",
    "info" : "SimpleName[18987-18996]:SimpleName[18995-19004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18999-19029]:Block[19007-19037]"
  }, {
    "left" : "return UNMAPPED;",
    "right" : "return UNMAPPED;",
    "info" : "ReturnStatement[19007-19023]:ReturnStatement[19015-19031]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19166-19173]:Modifier[19174-19181]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19174-19180]:Modifier[19182-19188]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[19181-19186]:TYPE_DECLARATION_KIND[19189-19194]"
  }, {
    "left" : "UnnamedEntry",
    "right" : "UnnamedEntry",
    "info" : "SimpleName[19324-19336]:SimpleName[19332-19344]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[19337-19347]:SingleVariableDeclaration[19345-19355]"
  }, {
    "left" : "int srcFile",
    "right" : "int srcFile",
    "info" : "SingleVariableDeclaration[19349-19360]:SingleVariableDeclaration[19357-19368]"
  }, {
    "left" : "int srcLine",
    "right" : "int srcLine",
    "info" : "SingleVariableDeclaration[19362-19373]:SingleVariableDeclaration[19370-19381]"
  }, {
    "left" : "int srcColumn",
    "right" : "int srcColumn",
    "info" : "SingleVariableDeclaration[19375-19388]:SingleVariableDeclaration[19383-19396]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19390-19512]:Block[19398-19520]"
  }, {
    "left" : "super(column);",
    "right" : "super(column);",
    "info" : "SuperConstructorInvocation[19398-19412]:SuperConstructorInvocation[19406-19420]"
  }, {
    "left" : "this.srcFile = srcFile;",
    "right" : "this.srcFile = srcFile;",
    "info" : "ExpressionStatement[19419-19442]:ExpressionStatement[19427-19450]"
  }, {
    "left" : "this.srcLine = srcLine;",
    "right" : "this.srcLine = srcLine;",
    "info" : "ExpressionStatement[19449-19472]:ExpressionStatement[19457-19480]"
  }, {
    "left" : "this.srcColumn = srcColumn;",
    "right" : "this.srcColumn = srcColumn;",
    "info" : "ExpressionStatement[19479-19506]:ExpressionStatement[19487-19514]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19518-19527]:MarkerAnnotation[19526-19535]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19532-19538]:Modifier[19540-19546]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[19539-19542]:PrimitiveType[19547-19550]"
  }, {
    "left" : "getSourceFileId",
    "right" : "getSourceFileId",
    "info" : "SimpleName[19543-19558]:SimpleName[19551-19566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19561-19590]:Block[19569-19598]"
  }, {
    "left" : "return srcFile;",
    "right" : "return srcFile;",
    "info" : "ReturnStatement[19569-19584]:ReturnStatement[19577-19592]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19596-19605]:MarkerAnnotation[19604-19613]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19610-19616]:Modifier[19618-19624]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[19617-19620]:PrimitiveType[19625-19628]"
  }, {
    "left" : "getSourceLine",
    "right" : "getSourceLine",
    "info" : "SimpleName[19621-19634]:SimpleName[19629-19642]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19637-19666]:Block[19645-19674]"
  }, {
    "left" : "return srcLine;",
    "right" : "return srcLine;",
    "info" : "ReturnStatement[19645-19660]:ReturnStatement[19653-19668]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19672-19681]:MarkerAnnotation[19680-19689]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19686-19692]:Modifier[19694-19700]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[19693-19696]:PrimitiveType[19701-19704]"
  }, {
    "left" : "getSourceColumn",
    "right" : "getSourceColumn",
    "info" : "SimpleName[19697-19712]:SimpleName[19705-19720]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19715-19746]:Block[19723-19754]"
  }, {
    "left" : "return srcColumn;",
    "right" : "return srcColumn;",
    "info" : "ReturnStatement[19723-19740]:ReturnStatement[19731-19748]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[19752-19761]:MarkerAnnotation[19760-19769]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[19766-19772]:Modifier[19774-19780]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[19773-19776]:PrimitiveType[19781-19784]"
  }, {
    "left" : "getNameId",
    "right" : "getNameId",
    "info" : "SimpleName[19777-19786]:SimpleName[19785-19794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19789-19819]:Block[19797-19827]"
  }, {
    "left" : "return UNMAPPED;",
    "right" : "return UNMAPPED;",
    "info" : "ReturnStatement[19797-19813]:ReturnStatement[19805-19821]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19987-19994]:Modifier[19995-20002]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[19995-20001]:Modifier[20003-20009]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[20002-20007]:TYPE_DECLARATION_KIND[20010-20015]"
  }, {
    "left" : "NamedEntry",
    "right" : "NamedEntry",
    "info" : "SimpleName[20075-20085]:SimpleName[20083-20093]"
  }, {
    "left" : "int column",
    "right" : "int column",
    "info" : "SingleVariableDeclaration[20086-20096]:SingleVariableDeclaration[20094-20104]"
  }, {
    "left" : "int srcFile",
    "right" : "int srcFile",
    "info" : "SingleVariableDeclaration[20098-20109]:SingleVariableDeclaration[20106-20117]"
  }, {
    "left" : "int srcLine",
    "right" : "int srcLine",
    "info" : "SingleVariableDeclaration[20111-20122]:SingleVariableDeclaration[20119-20130]"
  }, {
    "left" : "int srcColumn",
    "right" : "int srcColumn",
    "info" : "SingleVariableDeclaration[20124-20137]:SingleVariableDeclaration[20132-20145]"
  }, {
    "left" : "int name",
    "right" : "int name",
    "info" : "SingleVariableDeclaration[20139-20147]:SingleVariableDeclaration[20147-20155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20149-20230]:Block[20157-20238]"
  }, {
    "left" : "super(column, srcFile, srcLine, srcColumn);",
    "right" : "super(column, srcFile, srcLine, srcColumn);",
    "info" : "SuperConstructorInvocation[20157-20200]:SuperConstructorInvocation[20165-20208]"
  }, {
    "left" : "this.name = name;",
    "right" : "this.name = name;",
    "info" : "ExpressionStatement[20207-20224]:ExpressionStatement[20215-20232]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[20236-20245]:MarkerAnnotation[20244-20253]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20250-20256]:Modifier[20258-20264]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[20257-20260]:PrimitiveType[20265-20268]"
  }, {
    "left" : "getNameId",
    "right" : "getNameId",
    "info" : "SimpleName[20261-20270]:SimpleName[20269-20278]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20273-20299]:Block[20281-20307]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[20281-20293]:ReturnStatement[20289-20301]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20307-20313]:Modifier[20315-20321]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[20314-20323]:TYPE_DECLARATION_KIND[20322-20331]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20343-20347]:PrimitiveType[20351-20355]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[20348-20353]:SimpleName[20356-20361]"
  }, {
    "left" : "String sourceName",
    "right" : "String sourceName",
    "info" : "SingleVariableDeclaration[20354-20371]:SingleVariableDeclaration[20362-20379]"
  }, {
    "left" : "String symbolName",
    "right" : "String symbolName",
    "info" : "SingleVariableDeclaration[20388-20405]:SingleVariableDeclaration[20396-20413]"
  }, {
    "left" : "FilePosition sourceStartPosition",
    "right" : "FilePosition sourceStartPosition",
    "info" : "SingleVariableDeclaration[20422-20454]:SingleVariableDeclaration[20430-20462]"
  }, {
    "left" : "FilePosition startPosition",
    "right" : "FilePosition startPosition",
    "info" : "SingleVariableDeclaration[20471-20497]:SingleVariableDeclaration[20479-20505]"
  }, {
    "left" : "FilePosition endPosition",
    "right" : "FilePosition endPosition",
    "info" : "SingleVariableDeclaration[20514-20538]:SingleVariableDeclaration[20522-20546]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[20548-20554]:Modifier[20556-20562]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20555-20559]:PrimitiveType[20563-20567]"
  }, {
    "left" : "visitMappings",
    "right" : "visitMappings",
    "info" : "SimpleName[20560-20573]:SimpleName[20568-20581]"
  }, {
    "left" : "EntryVisitor visitor",
    "right" : "EntryVisitor visitor",
    "info" : "SingleVariableDeclaration[20574-20594]:SingleVariableDeclaration[20582-20602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20596-21903]:Block[20604-21911]"
  }, {
    "left" : "boolean pending = false;",
    "right" : "boolean pending = false;",
    "info" : "VariableDeclarationStatement[20602-20626]:VariableDeclarationStatement[20610-20634]"
  }, {
    "left" : "String sourceName = null;",
    "right" : "String sourceName = null;",
    "info" : "VariableDeclarationStatement[20631-20656]:VariableDeclarationStatement[20639-20664]"
  }, {
    "left" : "String symbolName = null;",
    "right" : "String symbolName = null;",
    "info" : "VariableDeclarationStatement[20661-20686]:VariableDeclarationStatement[20669-20694]"
  }, {
    "left" : "FilePosition sourceStartPosition = null;",
    "right" : "FilePosition sourceStartPosition = null;",
    "info" : "VariableDeclarationStatement[20691-20731]:VariableDeclarationStatement[20699-20739]"
  }, {
    "left" : "FilePosition startPosition = null;",
    "right" : "FilePosition startPosition = null;",
    "info" : "VariableDeclarationStatement[20736-20770]:VariableDeclarationStatement[20744-20778]"
  }, {
    "left" : "final int lineCount = lines.size();",
    "right" : "final int lineCount = lines.size();",
    "info" : "VariableDeclarationStatement[20776-20811]:VariableDeclarationStatement[20784-20819]"
  }, {
    "left" : "for (int i = 0; i < lineCount; i++)",
    "right" : "for (int i = 0; i < lineCount; i++)",
    "info" : "ForStatement[20816-21899]:ForStatement[20824-21907]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20852-21899]:Block[20860-21907]"
  }, {
    "left" : "ArrayList<Entry> line = lines.get(i);",
    "right" : "ArrayList<Entry> line = lines.get(i);",
    "info" : "VariableDeclarationStatement[20860-20897]:VariableDeclarationStatement[20868-20905]"
  }, {
    "left" : "if (line != null)",
    "right" : "if (line != null)",
    "info" : "IfStatement[20904-21893]:IfStatement[20912-21901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20922-21893]:Block[20930-21901]"
  }, {
    "left" : "final int entryCount = line.size();",
    "right" : "final int entryCount = line.size();",
    "info" : "VariableDeclarationStatement[20932-20967]:VariableDeclarationStatement[20940-20975]"
  }, {
    "left" : "for (int j = 0; j < entryCount; j++)",
    "right" : "for (int j = 0; j < entryCount; j++)",
    "info" : "ForStatement[20976-21885]:ForStatement[20984-21893]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21013-21885]:Block[21021-21893]"
  }, {
    "left" : "Entry entry = line.get(j);",
    "right" : "Entry entry = line.get(j);",
    "info" : "VariableDeclarationStatement[21025-21051]:VariableDeclarationStatement[21033-21059]"
  }, {
    "left" : "if (pending)",
    "right" : "if (pending)",
    "info" : "IfStatement[21062-21403]:IfStatement[21070-21411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21075-21403]:Block[21083-21411]"
  }, {
    "left" : "FilePosition endPosition = new FilePosition(\n                i, entry.getGeneratedColumn());",
    "right" : "FilePosition endPosition = new FilePosition(\n                i, entry.getGeneratedColumn());",
    "info" : "VariableDeclarationStatement[21089-21181]:VariableDeclarationStatement[21097-21189]"
  }, {
    "left" : "visitor.visit(\n                sourceName,\n                symbolName,\n                sourceStartPosition,\n                startPosition,\n                endPosition);",
    "right" : "visitor.visit(\n                sourceName,\n                symbolName,\n                sourceStartPosition,\n                startPosition,\n                endPosition);",
    "info" : "ExpressionStatement[21194-21362]:ExpressionStatement[21202-21370]"
  }, {
    "left" : "pending = false;",
    "right" : "pending = false;",
    "info" : "ExpressionStatement[21375-21391]:ExpressionStatement[21383-21399]"
  }, {
    "left" : "if (entry.getSourceFileId() != UNMAPPED)",
    "right" : "if (entry.getSourceFileId() != UNMAPPED)",
    "info" : "IfStatement[21415-21875]:IfStatement[21423-21883]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21456-21875]:Block[21464-21883]"
  }, {
    "left" : "pending = true;",
    "right" : "pending = true;",
    "info" : "ExpressionStatement[21470-21485]:ExpressionStatement[21478-21493]"
  }, {
    "left" : "sourceName = sources[entry.getSourceFileId()];",
    "right" : "sourceName = sources[entry.getSourceFileId()];",
    "info" : "ExpressionStatement[21498-21544]:ExpressionStatement[21506-21552]"
  }, {
    "left" : "symbolName = (entry.getNameId() != UNMAPPED)\n                ? names[entry.getNameId()] : null;",
    "right" : "symbolName = (entry.getNameId() != UNMAPPED)\n                ? names[entry.getNameId()] : null;",
    "info" : "ExpressionStatement[21557-21652]:ExpressionStatement[21565-21660]"
  }, {
    "left" : "sourceStartPosition = new FilePosition(\n                entry.getSourceLine(), entry.getSourceColumn());",
    "right" : "sourceStartPosition = new FilePosition(\n                entry.getSourceLine(), entry.getSourceColumn());",
    "info" : "ExpressionStatement[21665-21769]:ExpressionStatement[21673-21777]"
  }, {
    "left" : "startPosition = new FilePosition(\n                i, entry.getGeneratedColumn());",
    "right" : "startPosition = new FilePosition(\n                i, entry.getGeneratedColumn());",
    "info" : "ExpressionStatement[21782-21863]:ExpressionStatement[21790-21871]"
  } ]
}