{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final double EPSILON = 0x1.0p-53;",
      "right" : "public static final double EPSILON = 0x1.0p-53;",
      "info" : "FieldDeclaration[1140-1276]:FieldDeclaration[1140-1276]"
    }, {
      "left" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "right" : "public static final double SAFE_MIN = 0x1.0p-1022;",
      "info" : "FieldDeclaration[1282-1512]:FieldDeclaration[1282-1512]"
    }, {
      "left" : "private static final byte  NB = (byte)-1;",
      "right" : "private static final byte  NB = (byte)-1;",
      "info" : "FieldDeclaration[1518-1591]:FieldDeclaration[1518-1591]"
    }, {
      "left" : "private static final short NS = (short)-1;",
      "right" : "private static final short NS = (short)-1;",
      "info" : "FieldDeclaration[1597-1672]:FieldDeclaration[1597-1672]"
    }, {
      "left" : "private static final byte  PB = (byte)1;",
      "right" : "private static final byte  PB = (byte)1;",
      "info" : "FieldDeclaration[1678-1749]:FieldDeclaration[1678-1749]"
    }, {
      "left" : "private static final short PS = (short)1;",
      "right" : "private static final short PS = (short)1;",
      "info" : "FieldDeclaration[1755-1828]:FieldDeclaration[1755-1828]"
    }, {
      "left" : "private static final byte  ZB = (byte)0;",
      "right" : "private static final byte  ZB = (byte)0;",
      "info" : "FieldDeclaration[1834-1905]:FieldDeclaration[1834-1905]"
    }, {
      "left" : "private static final short ZS = (short)0;",
      "right" : "private static final short ZS = (short)0;",
      "info" : "FieldDeclaration[1911-1984]:FieldDeclaration[1911-1984]"
    }, {
      "left" : "private static final double TWO_PI = 2 * Math.PI;",
      "right" : "private static final double TWO_PI = 2 * Math.PI;",
      "info" : "FieldDeclaration[1990-2058]:FieldDeclaration[1990-2058]"
    }, {
      "left" : "private MathUtils()",
      "right" : "private MathUtils()",
      "info" : "MethodDeclaration[2064-2151]:MethodDeclaration[2064-2151]"
    }, {
      "left" : "public static int addAndCheck(int x, int y)",
      "right" : "public static int addAndCheck(int x, int y)",
      "info" : "MethodDeclaration[2157-2678]:MethodDeclaration[2157-2678]"
    }, {
      "left" : "public static long addAndCheck(long a, long b)",
      "right" : "public static long addAndCheck(long a, long b)",
      "info" : "MethodDeclaration[2684-3074]:MethodDeclaration[2684-3074]"
    }, {
      "left" : "private static long addAndCheck(long a, long b, String msg)",
      "right" : "private static long addAndCheck(long a, long b, String msg)",
      "info" : "MethodDeclaration[3084-4491]:MethodDeclaration[3084-4491]"
    }, {
      "left" : "public static long binomialCoefficient(final int n, final int k)",
      "right" : "public static long binomialCoefficient(final int n, final int k)",
      "info" : "MethodDeclaration[4501-7802]:MethodDeclaration[4501-7802]"
    }, {
      "left" : "public static double binomialCoefficientDouble(final int n, final int k)",
      "right" : "public static double binomialCoefficientDouble(final int n, final int k)",
      "info" : "MethodDeclaration[7808-9674]:MethodDeclaration[7808-9674]"
    }, {
      "left" : "public static double binomialCoefficientLog(final int n, final int k)",
      "right" : "public static double binomialCoefficientLog(final int n, final int k)",
      "info" : "MethodDeclaration[9684-11878]:MethodDeclaration[9684-11878]"
    }, {
      "left" : "public static double cosh(double x)",
      "right" : "public static double cosh(double x)",
      "info" : "MethodDeclaration[11888-12229]:MethodDeclaration[11888-12229]"
    }, {
      "left" : "public static boolean equals(double x, double y)",
      "right" : "public static boolean equals(double x, double y)",
      "info" : "MethodDeclaration[12239-12592]:MethodDeclaration[12239-12592]"
    }, {
      "left" : "public static boolean equals(double x, double y, double eps)",
      "right" : "public static boolean equals(double x, double y, double eps)",
      "info" : "MethodDeclaration[12598-13062]:MethodDeclaration[12598-13062]"
    }, {
      "left" : "public static boolean equals(double[] x, double[] y)",
      "right" : "public static boolean equals(double[] x, double[] y)",
      "info" : "MethodDeclaration[13072-13804]:MethodDeclaration[13072-13804]"
    }, {
      "left" : "private static final long[] factorials = new long[] \n       {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n        479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l,\n        355687428096000l, 6402373705728000l, 121645100408832000l,\n        2432902008176640000l};",
      "right" : "private static final long[] factorials = new long[] \n       {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800,\n        479001600, 6227020800l, 87178291200l, 1307674368000l, 20922789888000l,\n        355687428096000l, 6402373705728000l, 121645100408832000l,\n        2432902008176640000l};",
      "info" : "FieldDeclaration[13814-14161]:FieldDeclaration[13814-14161]"
    }, {
      "left" : "public static long factorial(final int n)",
      "right" : "public static long factorial(final int n)",
      "info" : "MethodDeclaration[14167-15409]:MethodDeclaration[14167-15409]"
    }, {
      "left" : "public static double factorialDouble(final int n)",
      "right" : "public static double factorialDouble(final int n)",
      "info" : "MethodDeclaration[15415-16510]:MethodDeclaration[15415-16510]"
    }, {
      "left" : "public static double factorialLog(final int n)",
      "right" : "public static double factorialLog(final int n)",
      "info" : "MethodDeclaration[16516-17269]:MethodDeclaration[16516-17269]"
    }, {
      "left" : "public static int hash(double value)",
      "right" : "public static int hash(double value)",
      "info" : "MethodDeclaration[20475-20733]:MethodDeclaration[20738-20996]"
    }, {
      "left" : "public static int hash(double[] value)",
      "right" : "public static int hash(double[] value)",
      "info" : "MethodDeclaration[20739-21025]:MethodDeclaration[21002-21288]"
    }, {
      "left" : "public static byte indicator(final byte x)",
      "right" : "public static byte indicator(final byte x)",
      "info" : "MethodDeclaration[21031-21343]:MethodDeclaration[21294-21606]"
    }, {
      "left" : "public static double indicator(final double x)",
      "right" : "public static double indicator(final double x)",
      "info" : "MethodDeclaration[21349-21802]:MethodDeclaration[21612-22065]"
    }, {
      "left" : "public static float indicator(final float x)",
      "right" : "public static float indicator(final float x)",
      "info" : "MethodDeclaration[21808-22245]:MethodDeclaration[22071-22508]"
    }, {
      "left" : "public static int indicator(final int x)",
      "right" : "public static int indicator(final int x)",
      "info" : "MethodDeclaration[22251-22520]:MethodDeclaration[22514-22783]"
    }, {
      "left" : "public static long indicator(final long x)",
      "right" : "public static long indicator(final long x)",
      "info" : "MethodDeclaration[22526-22804]:MethodDeclaration[22789-23067]"
    }, {
      "left" : "public static short indicator(final short x)",
      "right" : "public static short indicator(final short x)",
      "info" : "MethodDeclaration[22810-23130]:MethodDeclaration[23073-23393]"
    }, {
      "left" : "public static double log(double base, double x)",
      "right" : "public static double log(double base, double x)",
      "info" : "MethodDeclaration[24247-25087]:MethodDeclaration[24627-25467]"
    }, {
      "left" : "public static int mulAndCheck(int x, int y)",
      "right" : "public static int mulAndCheck(int x, int y)",
      "info" : "MethodDeclaration[25093-25625]:MethodDeclaration[25473-26005]"
    }, {
      "left" : "public static long mulAndCheck(long a, long b)",
      "right" : "public static long mulAndCheck(long a, long b)",
      "info" : "MethodDeclaration[25631-27445]:MethodDeclaration[26011-27825]"
    }, {
      "left" : "public static double nextAfter(double d, double direction)",
      "right" : "public static double nextAfter(double d, double direction)",
      "info" : "MethodDeclaration[27451-29836]:MethodDeclaration[27831-30216]"
    }, {
      "left" : "public static double scalb(final double d, final int scaleFactor)",
      "right" : "public static double scalb(final double d, final int scaleFactor)",
      "info" : "MethodDeclaration[29842-30770]:MethodDeclaration[30222-31150]"
    }, {
      "left" : "public static double normalizeAngle(double a, double center)",
      "right" : "public static double normalizeAngle(double a, double center)",
      "info" : "MethodDeclaration[30776-31952]:MethodDeclaration[31156-32332]"
    }, {
      "left" : "public static double round(double x, int scale)",
      "right" : "public static double round(double x, int scale)",
      "info" : "MethodDeclaration[31958-32410]:MethodDeclaration[32338-32790]"
    }, {
      "left" : "public static double round(double x, int scale, int roundingMethod)",
      "right" : "public static double round(double x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[32416-33335]:MethodDeclaration[32796-33715]"
    }, {
      "left" : "public static float round(float x, int scale)",
      "right" : "public static float round(float x, int scale)",
      "info" : "MethodDeclaration[33341-33792]:MethodDeclaration[33721-34172]"
    }, {
      "left" : "public static float round(float x, int scale, int roundingMethod)",
      "right" : "public static float round(float x, int scale, int roundingMethod)",
      "info" : "MethodDeclaration[33798-34513]:MethodDeclaration[34178-34893]"
    }, {
      "left" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "right" : "private static double roundUnscaled(double unscaled, double sign,\n        int roundingMethod)",
      "info" : "MethodDeclaration[34519-37776]:MethodDeclaration[34899-38156]"
    }, {
      "left" : "public static byte sign(final byte x)",
      "right" : "public static byte sign(final byte x)",
      "info" : "MethodDeclaration[37782-38268]:MethodDeclaration[38162-38648]"
    }, {
      "left" : "public static double sign(final double x)",
      "right" : "public static double sign(final double x)",
      "info" : "MethodDeclaration[38274-38987]:MethodDeclaration[38654-39367]"
    }, {
      "left" : "public static float sign(final float x)",
      "right" : "public static float sign(final float x)",
      "info" : "MethodDeclaration[38993-39609]:MethodDeclaration[39373-39989]"
    }, {
      "left" : "public static int sign(final int x)",
      "right" : "public static int sign(final int x)",
      "info" : "MethodDeclaration[39615-40046]:MethodDeclaration[39995-40426]"
    }, {
      "left" : "public static long sign(final long x)",
      "right" : "public static long sign(final long x)",
      "info" : "MethodDeclaration[40052-40497]:MethodDeclaration[40432-40877]"
    }, {
      "left" : "public static short sign(final short x)",
      "right" : "public static short sign(final short x)",
      "info" : "MethodDeclaration[40503-41015]:MethodDeclaration[40883-41395]"
    }, {
      "left" : "public static double sinh(double x)",
      "right" : "public static double sinh(double x)",
      "info" : "MethodDeclaration[41021-41354]:MethodDeclaration[41401-41734]"
    }, {
      "left" : "public static int subAndCheck(int x, int y)",
      "right" : "public static int subAndCheck(int x, int y)",
      "info" : "MethodDeclaration[41360-41905]:MethodDeclaration[41740-42285]"
    }, {
      "left" : "public static long subAndCheck(long a, long b)",
      "right" : "public static long subAndCheck(long a, long b)",
      "info" : "MethodDeclaration[41911-42630]:MethodDeclaration[42291-43010]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2127-2151]:Block[2127-2151]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[2137-2145]:SuperConstructorInvocation[2137-2145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2480-2678]:Block[2480-2678]"
    }, {
      "left" : "long s = (long)x + (long)y;",
      "right" : "long s = (long)x + (long)y;",
      "info" : "VariableDeclarationStatement[2490-2517]:VariableDeclarationStatement[2490-2517]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[2526-2649]:IfStatement[2526-2649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2578-2649]:Block[2578-2649]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: add\");",
      "right" : "throw new ArithmeticException(\"overflow: add\");",
      "info" : "ThrowStatement[2592-2639]:ThrowStatement[2592-2639]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[2658-2672]:ReturnStatement[2658-2672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3016-3074]:Block[3016-3074]"
    }, {
      "left" : "return addAndCheck(a, b, \"overflow: add\");",
      "right" : "return addAndCheck(a, b, \"overflow: add\");",
      "info" : "ReturnStatement[3026-3068]:ReturnStatement[3026-3068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3492-4491]:Block[3492-4491]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[3502-3511]:VariableDeclarationStatement[3502-3511]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[3520-4465]:IfStatement[3520-4465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3531-3637]:Block[3531-3637]"
    }, {
      "left" : "ret = addAndCheck(b, a, msg);",
      "right" : "ret = addAndCheck(b, a, msg);",
      "info" : "ExpressionStatement[3598-3627]:ExpressionStatement[3598-3627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3643-4465]:Block[3643-4465]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[3699-4455]:IfStatement[3699-4455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3710-4141]:Block[3710-4141]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[3728-4127]:IfStatement[3728-4127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3739-4008]:Block[3739-4008]"
    }, {
      "left" : "if (Long.MIN_VALUE - b <= a)",
      "right" : "if (Long.MIN_VALUE - b <= a)",
      "info" : "IfStatement[3812-3990]:IfStatement[3812-3990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3841-3901]:Block[3841-3901]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[3867-3879]:ExpressionStatement[3867-3879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3907-3990]:Block[3907-3990]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[3933-3968]:ThrowStatement[3933-3968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4014-4127]:Block[4014-4127]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[4097-4109]:ExpressionStatement[4097-4109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4147-4455]:Block[4147-4455]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE - b)",
      "right" : "if (a <= Long.MAX_VALUE - b)",
      "info" : "IfStatement[4279-4441]:IfStatement[4279-4441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4308-4360]:Block[4308-4360]"
    }, {
      "left" : "ret = a + b;",
      "right" : "ret = a + b;",
      "info" : "ExpressionStatement[4330-4342]:ExpressionStatement[4330-4342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4366-4441]:Block[4366-4441]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[4388-4423]:ThrowStatement[4388-4423]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[4474-4485]:ReturnStatement[4474-4485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5701-7802]:Block[5701-7802]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[5711-5849]:IfStatement[5711-5849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5722-5849]:Block[5722-5849]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[5736-5839]:ThrowStatement[5736-5839]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[5858-5996]:IfStatement[5858-5996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5869-5996]:Block[5869-5996]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[5883-5986]:ThrowStatement[5883-5986]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[6005-6064]:IfStatement[6005-6064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6031-6064]:Block[6031-6064]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[6045-6054]:ReturnStatement[6045-6054]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[6073-6136]:IfStatement[6073-6136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6103-6136]:Block[6103-6136]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[6117-6126]:ReturnStatement[6117-6126]"
    }, {
      "left" : "if (k > n / 2)",
      "right" : "if (k > n / 2)",
      "info" : "IfStatement[6181-6245]:IfStatement[6181-6245]"
    }, {
      "left" : "return binomialCoefficient(n, n - k);",
      "right" : "return binomialCoefficient(n, n - k);",
      "info" : "ReturnStatement[6208-6245]:ReturnStatement[6208-6245]"
    }, {
      "left" : "long result = 1;",
      "right" : "long result = 1;",
      "info" : "VariableDeclarationStatement[6477-6493]:VariableDeclarationStatement[6477-6493]"
    }, {
      "left" : "if (n <= 61)",
      "right" : "if (n <= 61)",
      "info" : "IfStatement[6502-7773]:IfStatement[6502-7773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6515-6714]:Block[6515-6714]"
    }, {
      "left" : "for (int j = 1, i = n - k + 1; j <= k; i++, j++)",
      "right" : "for (int j = 1, i = n - k + 1; j <= k; i++, j++)",
      "info" : "ForStatement[6599-6704]:ForStatement[6599-6704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6648-6704]:Block[6648-6704]"
    }, {
      "left" : "result = result * i / j;",
      "right" : "result = result * i / j;",
      "info" : "ExpressionStatement[6666-6690]:ExpressionStatement[6666-6690]"
    }, {
      "left" : "if (n <= 66)",
      "right" : "if (n <= 66)",
      "info" : "IfStatement[6720-7773]:IfStatement[6720-7773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6733-7415]:Block[6733-7415]"
    }, {
      "left" : "for (int j = 1, i = n - k + 1; j <= k; i++, j++)",
      "right" : "for (int j = 1, i = n - k + 1; j <= k; i++, j++)",
      "info" : "ForStatement[6888-7405]:ForStatement[6888-7405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6937-7405]:Block[6937-7405]"
    }, {
      "left" : "long d = gcd(i, j);",
      "right" : "long d = gcd(i, j);",
      "info" : "VariableDeclarationStatement[7317-7336]:VariableDeclarationStatement[7317-7336]"
    }, {
      "left" : "result = (result / (j / d)) * (i / d);",
      "right" : "result = (result / (j / d)) * (i / d);",
      "info" : "ExpressionStatement[7353-7391]:ExpressionStatement[7353-7391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7421-7773]:Block[7421-7773]"
    }, {
      "left" : "for (int j = 1, i = n - k + 1; j <= k; i++, j++)",
      "right" : "for (int j = 1, i = n - k + 1; j <= k; i++, j++)",
      "info" : "ForStatement[7596-7763]:ForStatement[7596-7763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7645-7763]:Block[7645-7763]"
    }, {
      "left" : "long d = gcd(i, j);",
      "right" : "long d = gcd(i, j);",
      "info" : "VariableDeclarationStatement[7663-7682]:VariableDeclarationStatement[7663-7682]"
    }, {
      "left" : "result = mulAndCheck((result / (j / d)), (i / d));",
      "right" : "result = mulAndCheck((result / (j / d)), (i / d));",
      "info" : "ExpressionStatement[7699-7749]:ExpressionStatement[7699-7749]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7782-7796]:ReturnStatement[7782-7796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8880-9674]:Block[8880-9674]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[8890-9028]:IfStatement[8890-9028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8901-9028]:Block[8901-9028]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[8915-9018]:ThrowStatement[8915-9018]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[9037-9175]:IfStatement[9037-9175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9048-9175]:Block[9048-9175]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[9062-9165]:ThrowStatement[9062-9165]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[9184-9244]:IfStatement[9184-9244]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9210-9244]:Block[9210-9244]"
    }, {
      "left" : "return 1d;",
      "right" : "return 1d;",
      "info" : "ReturnStatement[9224-9234]:ReturnStatement[9224-9234]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[9253-9316]:IfStatement[9253-9316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9283-9316]:Block[9283-9316]"
    }, {
      "left" : "return n;",
      "right" : "return n;",
      "info" : "ReturnStatement[9297-9306]:ReturnStatement[9297-9306]"
    }, {
      "left" : "if (k > n/2)",
      "right" : "if (k > n/2)",
      "info" : "IfStatement[9325-9405]:IfStatement[9325-9405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9338-9405]:Block[9338-9405]"
    }, {
      "left" : "return binomialCoefficientDouble(n, n - k);",
      "right" : "return binomialCoefficientDouble(n, n - k);",
      "info" : "ReturnStatement[9352-9395]:ReturnStatement[9352-9395]"
    }, {
      "left" : "if (n < 67)",
      "right" : "if (n < 67)",
      "info" : "IfStatement[9414-9482]:IfStatement[9414-9482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9426-9482]:Block[9426-9482]"
    }, {
      "left" : "return binomialCoefficient(n,k);",
      "right" : "return binomialCoefficient(n,k);",
      "info" : "ReturnStatement[9440-9472]:ReturnStatement[9440-9472]"
    }, {
      "left" : "double result = 1d;",
      "right" : "double result = 1d;",
      "info" : "VariableDeclarationStatement[9500-9519]:VariableDeclarationStatement[9500-9519]"
    }, {
      "left" : "for (int i = 1; i <= k; i++)",
      "right" : "for (int i = 1; i <= k; i++)",
      "info" : "ForStatement[9528-9624]:ForStatement[9528-9624]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9557-9624]:Block[9557-9624]"
    }, {
      "left" : "result *= (double)(n - k + i) / (double)i;",
      "right" : "result *= (double)(n - k + i) / (double)i;",
      "info" : "ExpressionStatement[9572-9614]:ExpressionStatement[9572-9614]"
    }, {
      "left" : "return Math.floor(result + 0.5);",
      "right" : "return Math.floor(result + 0.5);",
      "info" : "ReturnStatement[9636-9668]:ReturnStatement[9636-9668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10465-11878]:Block[10465-11878]"
    }, {
      "left" : "if (n < k)",
      "right" : "if (n < k)",
      "info" : "IfStatement[10475-10613]:IfStatement[10475-10613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10486-10613]:Block[10486-10613]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= k for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[10500-10603]:ThrowStatement[10500-10603]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[10622-10760]:IfStatement[10622-10760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10633-10760]:Block[10633-10760]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "right" : "throw new IllegalArgumentException(\n                \"must have n >= 0 for binomial coefficient (n,k)\");",
      "info" : "ThrowStatement[10647-10750]:ThrowStatement[10647-10750]"
    }, {
      "left" : "if ((n == k) || (k == 0))",
      "right" : "if ((n == k) || (k == 0))",
      "info" : "IfStatement[10769-10828]:IfStatement[10769-10828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10795-10828]:Block[10795-10828]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[10809-10818]:ReturnStatement[10809-10818]"
    }, {
      "left" : "if ((k == 1) || (k == n - 1))",
      "right" : "if ((k == 1) || (k == n - 1))",
      "info" : "IfStatement[10837-10919]:IfStatement[10837-10919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10867-10919]:Block[10867-10919]"
    }, {
      "left" : "return Math.log((double) n);",
      "right" : "return Math.log((double) n);",
      "info" : "ReturnStatement[10881-10909]:ReturnStatement[10881-10909]"
    }, {
      "left" : "if (n < 67)",
      "right" : "if (n < 67)",
      "info" : "IfStatement[11074-11154]:IfStatement[11074-11154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11086-11154]:Block[11086-11154]"
    }, {
      "left" : "return Math.log(binomialCoefficient(n,k));",
      "right" : "return Math.log(binomialCoefficient(n,k));",
      "info" : "ReturnStatement[11102-11144]:ReturnStatement[11102-11144]"
    }, {
      "left" : "if (n < 1030)",
      "right" : "if (n < 1030)",
      "info" : "IfStatement[11321-11409]:IfStatement[11321-11409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11335-11409]:Block[11335-11409]"
    }, {
      "left" : "return Math.log(binomialCoefficientDouble(n, k));",
      "right" : "return Math.log(binomialCoefficientDouble(n, k));",
      "info" : "ReturnStatement[11350-11399]:ReturnStatement[11350-11399]"
    }, {
      "left" : "if (k > n / 2)",
      "right" : "if (k > n / 2)",
      "info" : "IfStatement[11420-11499]:IfStatement[11420-11499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11435-11499]:Block[11435-11499]"
    }, {
      "left" : "return binomialCoefficientLog(n, n - k);",
      "right" : "return binomialCoefficientLog(n, n - k);",
      "info" : "ReturnStatement[11449-11489]:ReturnStatement[11449-11489]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[11583-11601]:VariableDeclarationStatement[11583-11601]"
    }, {
      "left" : "for (int i = n - k + 1; i <= n; i++)",
      "right" : "for (int i = n - k + 1; i <= n; i++)",
      "info" : "ForStatement[11632-11724]:ForStatement[11632-11724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11669-11724]:Block[11669-11724]"
    }, {
      "left" : "logSum += Math.log((double) i);",
      "right" : "logSum += Math.log((double) i);",
      "info" : "ExpressionStatement[11683-11714]:ExpressionStatement[11683-11714]"
    }, {
      "left" : "for (int i = 2; i <= k; i++)",
      "right" : "for (int i = 2; i <= k; i++)",
      "info" : "ForStatement[11758-11842]:ForStatement[11758-11842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11787-11842]:Block[11787-11842]"
    }, {
      "left" : "logSum -= Math.log((double) i);",
      "right" : "logSum -= Math.log((double) i);",
      "info" : "ExpressionStatement[11801-11832]:ExpressionStatement[11801-11832]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[11852-11866]:ReturnStatement[11852-11866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12171-12229]:Block[12171-12229]"
    }, {
      "left" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
      "right" : "return (Math.exp(x) + Math.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[12181-12223]:ReturnStatement[12181-12223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12520-12592]:Block[12520-12592]"
    }, {
      "left" : "return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);",
      "right" : "return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);",
      "info" : "ReturnStatement[12530-12586]:ReturnStatement[12530-12586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12976-13062]:Block[12976-13062]"
    }, {
      "left" : "return x == y || (x < y && (x + eps) >= y) || (x > y && x <= (y + eps));",
      "right" : "return x == y || (x < y && (x + eps) >= y) || (x > y && x <= (y + eps));",
      "info" : "ReturnStatement[12984-13056]:ReturnStatement[12984-13056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13465-13804]:Block[13465-13804]"
    }, {
      "left" : "if ((x == null) || (y == null))",
      "right" : "if ((x == null) || (y == null))",
      "info" : "IfStatement[13475-13567]:IfStatement[13475-13567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13507-13567]:Block[13507-13567]"
    }, {
      "left" : "return !((x == null) ^ (y == null));",
      "right" : "return !((x == null) ^ (y == null));",
      "info" : "ReturnStatement[13521-13557]:ReturnStatement[13521-13557]"
    }, {
      "left" : "if (x.length != y.length)",
      "right" : "if (x.length != y.length)",
      "info" : "IfStatement[13576-13639]:IfStatement[13576-13639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13602-13639]:Block[13602-13639]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13616-13629]:ReturnStatement[13616-13629]"
    }, {
      "left" : "for (int i = 0; i < x.length; ++i)",
      "right" : "for (int i = 0; i < x.length; ++i)",
      "info" : "ForStatement[13648-13777]:ForStatement[13648-13777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13683-13777]:Block[13683-13777]"
    }, {
      "left" : "if (!equals(x[i], y[i]))",
      "right" : "if (!equals(x[i], y[i]))",
      "info" : "IfStatement[13697-13767]:IfStatement[13697-13767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13722-13767]:Block[13722-13767]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13740-13753]:ReturnStatement[13740-13753]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13786-13798]:ReturnStatement[13786-13798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15121-15409]:Block[15121-15409]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[15131-15228]:IfStatement[15131-15228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15142-15228]:Block[15142-15228]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "info" : "ThrowStatement[15156-15218]:ThrowStatement[15156-15218]"
    }, {
      "left" : "if (n > 20)",
      "right" : "if (n > 20)",
      "info" : "IfStatement[15237-15373]:IfStatement[15237-15373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15249-15373]:Block[15249-15373]"
    }, {
      "left" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
      "right" : "throw new ArithmeticException(\n                    \"factorial value is too large to fit in a long\");",
      "info" : "ThrowStatement[15263-15363]:ThrowStatement[15263-15363]"
    }, {
      "left" : "return factorials[n];",
      "right" : "return factorials[n];",
      "info" : "ReturnStatement[15382-15403]:ReturnStatement[15382-15403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16272-16510]:Block[16272-16510]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[16282-16379]:IfStatement[16282-16379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16293-16379]:Block[16293-16379]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n >= 0 for n!\");",
      "info" : "ThrowStatement[16307-16369]:ThrowStatement[16307-16369]"
    }, {
      "left" : "if (n < 21)",
      "right" : "if (n < 21)",
      "info" : "IfStatement[16388-16444]:IfStatement[16388-16444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16400-16444]:Block[16400-16444]"
    }, {
      "left" : "return factorial(n);",
      "right" : "return factorial(n);",
      "info" : "ReturnStatement[16414-16434]:ReturnStatement[16414-16434]"
    }, {
      "left" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
      "right" : "return Math.floor(Math.exp(factorialLog(n)) + 0.5);",
      "info" : "ReturnStatement[16453-16504]:ReturnStatement[16453-16504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16940-17269]:Block[16940-17269]"
    }, {
      "left" : "if (n < 0)",
      "right" : "if (n < 0)",
      "info" : "IfStatement[16950-17046]:IfStatement[16950-17046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16961-17046]:Block[16961-17046]"
    }, {
      "left" : "throw new IllegalArgumentException(\"must have n > 0 for n!\");",
      "right" : "throw new IllegalArgumentException(\"must have n > 0 for n!\");",
      "info" : "ThrowStatement[16975-17036]:ThrowStatement[16975-17036]"
    }, {
      "left" : "if (n < 21)",
      "right" : "if (n < 21)",
      "info" : "IfStatement[17055-17121]:IfStatement[17055-17121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17067-17121]:Block[17067-17121]"
    }, {
      "left" : "return Math.log(factorial(n));",
      "right" : "return Math.log(factorial(n));",
      "info" : "ReturnStatement[17081-17111]:ReturnStatement[17081-17111]"
    }, {
      "left" : "double logSum = 0;",
      "right" : "double logSum = 0;",
      "info" : "VariableDeclarationStatement[17130-17148]:VariableDeclarationStatement[17130-17148]"
    }, {
      "left" : "for (int i = 2; i <= n; i++)",
      "right" : "for (int i = 2; i <= n; i++)",
      "info" : "ForStatement[17157-17240]:ForStatement[17157-17240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17186-17240]:Block[17186-17240]"
    }, {
      "left" : "logSum += Math.log((double)i);",
      "right" : "logSum += Math.log((double)i);",
      "info" : "ExpressionStatement[17200-17230]:ExpressionStatement[17200-17230]"
    }, {
      "left" : "return logSum;",
      "right" : "return logSum;",
      "info" : "ReturnStatement[17249-17263]:ReturnStatement[17249-17263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20681-20733]:Block[20944-20996]"
    }, {
      "left" : "return new Double(value).hashCode();",
      "right" : "return new Double(value).hashCode();",
      "info" : "ReturnStatement[20691-20727]:ReturnStatement[20954-20990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20979-21025]:Block[21242-21288]"
    }, {
      "left" : "return Arrays.hashCode(value);",
      "right" : "return Arrays.hashCode(value);",
      "info" : "ReturnStatement[20989-21019]:ReturnStatement[21252-21282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21300-21343]:Block[21563-21606]"
    }, {
      "left" : "return (x >= ZB) ? PB : NB;",
      "right" : "return (x >= ZB) ? PB : NB;",
      "info" : "ReturnStatement[21310-21337]:ReturnStatement[21573-21600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21683-21802]:Block[21946-22065]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[21693-21756]:IfStatement[21956-22019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21714-21756]:Block[21977-22019]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[21728-21746]:ReturnStatement[21991-22009]"
    }, {
      "left" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "right" : "return (x >= 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[21765-21796]:ReturnStatement[22028-22059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22125-22245]:Block[22388-22508]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[22135-22196]:IfStatement[22398-22459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22155-22196]:Block[22418-22459]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[22169-22186]:ReturnStatement[22432-22449]"
    }, {
      "left" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x >= 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[22205-22239]:ReturnStatement[22468-22502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22479-22520]:Block[22742-22783]"
    }, {
      "left" : "return (x >= 0) ? 1 : -1;",
      "right" : "return (x >= 0) ? 1 : -1;",
      "info" : "ReturnStatement[22489-22514]:ReturnStatement[22752-22777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22760-22804]:Block[23023-23067]"
    }, {
      "left" : "return (x >= 0L) ? 1L : -1L;",
      "right" : "return (x >= 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[22770-22798]:ReturnStatement[23033-23061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23087-23130]:Block[23350-23393]"
    }, {
      "left" : "return (x >= ZS) ? PS : NS;",
      "right" : "return (x >= ZS) ? PS : NS;",
      "info" : "ReturnStatement[23097-23124]:ReturnStatement[23360-23387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25037-25087]:Block[25417-25467]"
    }, {
      "left" : "return Math.log(x)/Math.log(base);",
      "right" : "return Math.log(x)/Math.log(base);",
      "info" : "ReturnStatement[25047-25081]:ReturnStatement[25427-25461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25423-25625]:Block[25803-26005]"
    }, {
      "left" : "long m = ((long)x) * ((long)y);",
      "right" : "long m = ((long)x) * ((long)y);",
      "info" : "VariableDeclarationStatement[25433-25464]:VariableDeclarationStatement[25813-25844]"
    }, {
      "left" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "right" : "if (m < Integer.MIN_VALUE || m > Integer.MAX_VALUE)",
      "info" : "IfStatement[25473-25596]:IfStatement[25853-25976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25525-25596]:Block[25905-25976]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: mul\");",
      "right" : "throw new ArithmeticException(\"overflow: mul\");",
      "info" : "ThrowStatement[25539-25586]:ThrowStatement[25919-25966]"
    }, {
      "left" : "return (int)m;",
      "right" : "return (int)m;",
      "info" : "ReturnStatement[25605-25619]:ReturnStatement[25985-25999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25979-27445]:Block[26359-27825]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[25989-25998]:VariableDeclarationStatement[26369-26378]"
    }, {
      "left" : "String msg = \"overflow: multiply\";",
      "right" : "String msg = \"overflow: multiply\";",
      "info" : "VariableDeclarationStatement[26007-26041]:VariableDeclarationStatement[26387-26421]"
    }, {
      "left" : "if (a > b)",
      "right" : "if (a > b)",
      "info" : "IfStatement[26050-27419]:IfStatement[26430-27799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26061-26162]:Block[26441-26542]"
    }, {
      "left" : "ret = mulAndCheck(b, a);",
      "right" : "ret = mulAndCheck(b, a);",
      "info" : "ExpressionStatement[26128-26152]:ExpressionStatement[26508-26532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26168-27419]:Block[26548-27799]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[26182-27409]:IfStatement[26562-27789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26193-26963]:Block[26573-27343]"
    }, {
      "left" : "if (b < 0)",
      "right" : "if (b < 0)",
      "info" : "IfStatement[26211-26949]:IfStatement[26591-27329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26222-26519]:Block[26602-26899]"
    }, {
      "left" : "if (a >= Long.MAX_VALUE / b)",
      "right" : "if (a >= Long.MAX_VALUE / b)",
      "info" : "IfStatement[26323-26501]:IfStatement[26703-26881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26352-26412]:Block[26732-26792]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[26378-26390]:ExpressionStatement[26758-26770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26418-26501]:Block[26798-26881]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[26444-26479]:ThrowStatement[26824-26859]"
    }, {
      "left" : "if (b > 0)",
      "right" : "if (b > 0)",
      "info" : "IfStatement[26525-26949]:IfStatement[26905-27329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26536-26858]:Block[26916-27238]"
    }, {
      "left" : "if (Long.MIN_VALUE / b <= a)",
      "right" : "if (Long.MIN_VALUE / b <= a)",
      "info" : "IfStatement[26637-26840]:IfStatement[27017-27220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26666-26726]:Block[27046-27106]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[26692-26704]:ExpressionStatement[27072-27084]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26732-26840]:Block[27112-27220]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[26758-26793]:ThrowStatement[27138-27173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26864-26949]:Block[27244-27329]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[26923-26931]:ExpressionStatement[27303-27311]"
    }, {
      "left" : "if (a > 0)",
      "right" : "if (a > 0)",
      "info" : "IfStatement[26969-27409]:IfStatement[27349-27789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26980-27330]:Block[27360-27710]"
    }, {
      "left" : "if (a <= Long.MAX_VALUE / b)",
      "right" : "if (a <= Long.MAX_VALUE / b)",
      "info" : "IfStatement[27154-27316]:IfStatement[27534-27696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27183-27235]:Block[27563-27615]"
    }, {
      "left" : "ret = a * b;",
      "right" : "ret = a * b;",
      "info" : "ExpressionStatement[27205-27217]:ExpressionStatement[27585-27597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27241-27316]:Block[27621-27696]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[27263-27298]:ThrowStatement[27643-27678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27336-27409]:Block[27716-27789]"
    }, {
      "left" : "ret = 0;",
      "right" : "ret = 0;",
      "info" : "ExpressionStatement[27387-27395]:ExpressionStatement[27767-27775]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[27428-27439]:ReturnStatement[27808-27819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28263-29836]:Block[28643-30216]"
    }, {
      "left" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if (Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[28326-28516]:IfStatement[28706-28896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28371-28408]:Block[28751-28788]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[28389-28398]:ReturnStatement[28769-28778]"
    }, {
      "left" : "if (d == 0)",
      "right" : "if (d == 0)",
      "info" : "IfStatement[28414-28516]:IfStatement[28794-28896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28426-28516]:Block[28806-28896]"
    }, {
      "left" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "right" : "return (direction < 0) ? -Double.MIN_VALUE : Double.MIN_VALUE;",
      "info" : "ReturnStatement[28444-28506]:ReturnStatement[28824-28886]"
    }, {
      "left" : "long bits     = Double.doubleToLongBits(d);",
      "right" : "long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[28685-28728]:VariableDeclarationStatement[29065-29108]"
    }, {
      "left" : "long sign     = bits & 0x8000000000000000L;",
      "right" : "long sign     = bits & 0x8000000000000000L;",
      "info" : "VariableDeclarationStatement[28737-28780]:VariableDeclarationStatement[29117-29160]"
    }, {
      "left" : "long exponent = bits & 0x7ff0000000000000L;",
      "right" : "long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[28789-28832]:VariableDeclarationStatement[29169-29212]"
    }, {
      "left" : "long mantissa = bits & 0x000fffffffffffffL;",
      "right" : "long mantissa = bits & 0x000fffffffffffffL;",
      "info" : "VariableDeclarationStatement[28841-28884]:VariableDeclarationStatement[29221-29264]"
    }, {
      "left" : "if (d * (direction - d) >= 0)",
      "right" : "if (d * (direction - d) >= 0)",
      "info" : "IfStatement[28894-29829]:IfStatement[29274-30209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28924-29351]:Block[29304-29731]"
    }, {
      "left" : "if (mantissa == 0x000fffffffffffffL)",
      "right" : "if (mantissa == 0x000fffffffffffffL)",
      "info" : "IfStatement[28993-29341]:IfStatement[29373-29721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29030-29186]:Block[29410-29566]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent + 0x0010000000000000L));",
      "info" : "ReturnStatement[29056-29168]:ReturnStatement[29436-29548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29192-29341]:Block[29572-29721]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa + 1));",
      "info" : "ReturnStatement[29218-29323]:ReturnStatement[29598-29703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29357-29829]:Block[29737-30209]"
    }, {
      "left" : "if (mantissa == 0L)",
      "right" : "if (mantissa == 0L)",
      "info" : "IfStatement[29426-29819]:IfStatement[29806-30199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29446-29664]:Block[29826-30044]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
      "right" : "return Double.longBitsToDouble(sign |\n                                        (exponent - 0x0010000000000000L) |\n                                        0x000fffffffffffffL);",
      "info" : "ReturnStatement[29472-29646]:ReturnStatement[29852-30026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29670-29819]:Block[30050-30199]"
    }, {
      "left" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
      "right" : "return Double.longBitsToDouble(sign |\n                                        exponent | (mantissa - 1));",
      "info" : "ReturnStatement[29696-29801]:ReturnStatement[30076-30181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30230-30770]:Block[30610-31150]"
    }, {
      "left" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "right" : "if ((d == 0) || Double.isNaN(d) || Double.isInfinite(d))",
      "info" : "IfStatement[30293-30383]:IfStatement[30673-30763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30350-30383]:Block[30730-30763]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[30364-30373]:ReturnStatement[30744-30753]"
    }, {
      "left" : "final long bits     = Double.doubleToLongBits(d);",
      "right" : "final long bits     = Double.doubleToLongBits(d);",
      "info" : "VariableDeclarationStatement[30439-30488]:VariableDeclarationStatement[30819-30868]"
    }, {
      "left" : "final long exponent = bits & 0x7ff0000000000000L;",
      "right" : "final long exponent = bits & 0x7ff0000000000000L;",
      "info" : "VariableDeclarationStatement[30497-30546]:VariableDeclarationStatement[30877-30926]"
    }, {
      "left" : "final long rest     = bits & 0x800fffffffffffffL;",
      "right" : "final long rest     = bits & 0x800fffffffffffffL;",
      "info" : "VariableDeclarationStatement[30555-30604]:VariableDeclarationStatement[30935-30984]"
    }, {
      "left" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "right" : "final long newBits = rest | (exponent + (((long) scaleFactor) << 52));",
      "info" : "VariableDeclarationStatement[30644-30714]:VariableDeclarationStatement[31024-31094]"
    }, {
      "left" : "return Double.longBitsToDouble(newBits);",
      "right" : "return Double.longBitsToDouble(newBits);",
      "info" : "ReturnStatement[30723-30763]:ReturnStatement[31103-31143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31870-31952]:Block[32250-32332]"
    }, {
      "left" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
      "right" : "return a - TWO_PI * Math.floor((a + Math.PI - center) / TWO_PI);",
      "info" : "ReturnStatement[31881-31945]:ReturnStatement[32261-32325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32345-32410]:Block[32725-32790]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[32355-32404]:ReturnStatement[32735-32784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32950-33335]:Block[33330-33715]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32960-33329]:TryStatement[33340-33709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32964-33138]:Block[33344-33518]"
    }, {
      "left" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "right" : "return (new BigDecimal\n                   (Double.toString(x))\n                   .setScale(scale, roundingMethod))\n                   .doubleValue();",
      "info" : "ReturnStatement[32978-33128]:ReturnStatement[33358-33508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33172-33329]:Block[33552-33709]"
    }, {
      "left" : "if (Double.isInfinite(x))",
      "right" : "if (Double.isInfinite(x))",
      "info" : "IfStatement[33186-33319]:IfStatement[33566-33699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33212-33263]:Block[33592-33643]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[33230-33239]:ReturnStatement[33610-33619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33269-33319]:Block[33649-33699]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[33287-33305]:ReturnStatement[33667-33685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33727-33792]:Block[34107-34172]"
    }, {
      "left" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "right" : "return round(x, scale, BigDecimal.ROUND_HALF_UP);",
      "info" : "ReturnStatement[33737-33786]:ReturnStatement[34117-34166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34330-34513]:Block[34710-34893]"
    }, {
      "left" : "float sign = indicator(x);",
      "right" : "float sign = indicator(x);",
      "info" : "VariableDeclarationStatement[34340-34366]:VariableDeclarationStatement[34720-34746]"
    }, {
      "left" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
      "right" : "float factor = (float)Math.pow(10.0f, scale) * sign;",
      "info" : "VariableDeclarationStatement[34375-34427]:VariableDeclarationStatement[34755-34807]"
    }, {
      "left" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "right" : "return (float)roundUnscaled(x * factor, sign, roundingMethod) / factor;",
      "info" : "ReturnStatement[34436-34507]:ReturnStatement[34816-34887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35079-37776]:Block[35459-38156]"
    }, {
      "left" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw new IllegalArgumentException(\"Invalid rounding method.\");\n        }",
      "right" : "switch (roundingMethod) {\n        case BigDecimal.ROUND_CEILING :\n            if (sign == -1) {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            } else {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_DOWN :\n            unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            break;\n        case BigDecimal.ROUND_FLOOR :\n            if (sign == -1) {\n                unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));\n            } else {\n                unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));\n            }\n            break;\n        case BigDecimal.ROUND_HALF_DOWN : {\n            unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_EVEN : {\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction > 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else if (fraction < 0.5) {\n                unscaled = Math.floor(unscaled);\n            } else {\n                // The following equality test is intentional and needed for rounding purposes\n                if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0)) { // even\n                    unscaled = Math.floor(unscaled);\n                } else { // odd\n                    unscaled = Math.ceil(unscaled);\n                }\n            }\n            break;\n        }\n        case BigDecimal.ROUND_HALF_UP : {\n            unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);\n            double fraction = unscaled - Math.floor(unscaled);\n            if (fraction >= 0.5) {\n                unscaled = Math.ceil(unscaled);\n            } else {\n                unscaled = Math.floor(unscaled);\n            }\n            break;\n        }\n        case BigDecimal.ROUND_UNNECESSARY :\n            if (unscaled != Math.floor(unscaled)) {\n                throw new ArithmeticException(\"Inexact result from rounding\");\n            }\n            break;\n        case BigDecimal.ROUND_UP :\n            unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));\n            break;\n        default :\n            throw new IllegalArgumentException(\"Invalid rounding method.\");\n        }",
      "info" : "SwitchStatement[35089-37745]:SwitchStatement[35469-38125]"
    }, {
      "left" : "case BigDecimal.ROUND_CEILING :",
      "right" : "case BigDecimal.ROUND_CEILING :",
      "info" : "SwitchCase[35123-35154]:SwitchCase[35503-35534]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[35167-35390]:IfStatement[35547-35770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35183-35284]:Block[35563-35664]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[35201-35270]:ExpressionStatement[35581-35650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35290-35390]:Block[35670-35770]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[35308-35376]:ExpressionStatement[35688-35756]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35403-35409]:BreakStatement[35783-35789]"
    }, {
      "left" : "case BigDecimal.ROUND_DOWN :",
      "right" : "case BigDecimal.ROUND_DOWN :",
      "info" : "SwitchCase[35418-35446]:SwitchCase[35798-35826]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[35459-35528]:ExpressionStatement[35839-35908]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35541-35547]:BreakStatement[35921-35927]"
    }, {
      "left" : "case BigDecimal.ROUND_FLOOR :",
      "right" : "case BigDecimal.ROUND_FLOOR :",
      "info" : "SwitchCase[35556-35585]:SwitchCase[35936-35965]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[35598-35821]:IfStatement[35978-36201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35614-35714]:Block[35994-36094]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled, Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[35632-35700]:ExpressionStatement[36012-36080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35720-35821]:Block[36100-36201]"
    }, {
      "left" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "right" : "unscaled = Math.floor(nextAfter(unscaled, Double.NEGATIVE_INFINITY));",
      "info" : "ExpressionStatement[35738-35807]:ExpressionStatement[36118-36187]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35834-35840]:BreakStatement[36214-36220]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_DOWN :",
      "right" : "case BigDecimal.ROUND_HALF_DOWN :",
      "info" : "SwitchCase[35849-35882]:SwitchCase[36229-36262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35883-36212]:Block[36263-36592]"
    }, {
      "left" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "right" : "unscaled = nextAfter(unscaled, Double.NEGATIVE_INFINITY);",
      "info" : "ExpressionStatement[35897-35954]:ExpressionStatement[36277-36334]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[35967-36017]:VariableDeclarationStatement[36347-36397]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[36030-36183]:IfStatement[36410-36563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36050-36113]:Block[36430-36493]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[36068-36099]:ExpressionStatement[36448-36479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36119-36183]:Block[36499-36563]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[36137-36169]:ExpressionStatement[36517-36549]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36196-36202]:BreakStatement[36576-36582]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_EVEN :",
      "right" : "case BigDecimal.ROUND_HALF_EVEN :",
      "info" : "SwitchCase[36221-36254]:SwitchCase[36601-36634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36255-36926]:Block[36635-37306]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[36269-36319]:VariableDeclarationStatement[36649-36699]"
    }, {
      "left" : "if (fraction > 0.5)",
      "right" : "if (fraction > 0.5)",
      "info" : "IfStatement[36332-36897]:IfStatement[36712-37277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36352-36415]:Block[36732-36795]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[36370-36401]:ExpressionStatement[36750-36781]"
    }, {
      "left" : "if (fraction < 0.5)",
      "right" : "if (fraction < 0.5)",
      "info" : "IfStatement[36421-36897]:IfStatement[36801-37277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36441-36505]:Block[36821-36885]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[36459-36491]:ExpressionStatement[36839-36871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36511-36897]:Block[36891-37277]"
    }, {
      "left" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
      "right" : "if (Math.floor(unscaled) / 2.0 == Math.floor(Math\n                    .floor(unscaled) / 2.0))",
      "info" : "IfStatement[36624-36883]:IfStatement[37004-37263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36719-36799]:Block[37099-37179]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[36749-36781]:ExpressionStatement[37129-37161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36805-36883]:Block[37185-37263]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[36834-36865]:ExpressionStatement[37214-37245]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[36910-36916]:BreakStatement[37290-37296]"
    }, {
      "left" : "case BigDecimal.ROUND_HALF_UP :",
      "right" : "case BigDecimal.ROUND_HALF_UP :",
      "info" : "SwitchCase[36935-36966]:SwitchCase[37315-37346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36967-37297]:Block[37347-37677]"
    }, {
      "left" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "right" : "unscaled = nextAfter(unscaled, Double.POSITIVE_INFINITY);",
      "info" : "ExpressionStatement[36981-37038]:ExpressionStatement[37361-37418]"
    }, {
      "left" : "double fraction = unscaled - Math.floor(unscaled);",
      "right" : "double fraction = unscaled - Math.floor(unscaled);",
      "info" : "VariableDeclarationStatement[37051-37101]:VariableDeclarationStatement[37431-37481]"
    }, {
      "left" : "if (fraction >= 0.5)",
      "right" : "if (fraction >= 0.5)",
      "info" : "IfStatement[37114-37268]:IfStatement[37494-37648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37135-37198]:Block[37515-37578]"
    }, {
      "left" : "unscaled = Math.ceil(unscaled);",
      "right" : "unscaled = Math.ceil(unscaled);",
      "info" : "ExpressionStatement[37153-37184]:ExpressionStatement[37533-37564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37204-37268]:Block[37584-37648]"
    }, {
      "left" : "unscaled = Math.floor(unscaled);",
      "right" : "unscaled = Math.floor(unscaled);",
      "info" : "ExpressionStatement[37222-37254]:ExpressionStatement[37602-37634]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37281-37287]:BreakStatement[37661-37667]"
    }, {
      "left" : "case BigDecimal.ROUND_UNNECESSARY :",
      "right" : "case BigDecimal.ROUND_UNNECESSARY :",
      "info" : "SwitchCase[37306-37341]:SwitchCase[37686-37721]"
    }, {
      "left" : "if (unscaled != Math.floor(unscaled))",
      "right" : "if (unscaled != Math.floor(unscaled))",
      "info" : "IfStatement[37354-37486]:IfStatement[37734-37866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37392-37486]:Block[37772-37866]"
    }, {
      "left" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "right" : "throw new ArithmeticException(\"Inexact result from rounding\");",
      "info" : "ThrowStatement[37410-37472]:ThrowStatement[37790-37852]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37499-37505]:BreakStatement[37879-37885]"
    }, {
      "left" : "case BigDecimal.ROUND_UP :",
      "right" : "case BigDecimal.ROUND_UP :",
      "info" : "SwitchCase[37514-37540]:SwitchCase[37894-37920]"
    }, {
      "left" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "right" : "unscaled = Math.ceil(nextAfter(unscaled,  Double.POSITIVE_INFINITY));",
      "info" : "ExpressionStatement[37553-37622]:ExpressionStatement[37933-38002]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[37635-37641]:BreakStatement[38015-38021]"
    }, {
      "left" : "default :",
      "right" : "default :",
      "info" : "SwitchCase[37650-37659]:SwitchCase[38030-38039]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Invalid rounding method.\");",
      "right" : "throw new IllegalArgumentException(\"Invalid rounding method.\");",
      "info" : "ThrowStatement[37672-37735]:ThrowStatement[38052-38115]"
    }, {
      "left" : "return unscaled;",
      "right" : "return unscaled;",
      "info" : "ReturnStatement[37754-37770]:ReturnStatement[38134-38150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38209-38268]:Block[38589-38648]"
    }, {
      "left" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "right" : "return (x == ZB) ? ZB : (x > ZB) ? PB : NB;",
      "info" : "ReturnStatement[38219-38262]:ReturnStatement[38599-38642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38850-38987]:Block[39230-39367]"
    }, {
      "left" : "if (Double.isNaN(x))",
      "right" : "if (Double.isNaN(x))",
      "info" : "IfStatement[38860-38923]:IfStatement[39240-39303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38881-38923]:Block[39261-39303]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[38895-38913]:ReturnStatement[39275-39293]"
    }, {
      "left" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "right" : "return (x == 0.0) ? 0.0 : (x > 0.0) ? 1.0 : -1.0;",
      "info" : "ReturnStatement[38932-38981]:ReturnStatement[39312-39361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39469-39609]:Block[39849-39989]"
    }, {
      "left" : "if (Float.isNaN(x))",
      "right" : "if (Float.isNaN(x))",
      "info" : "IfStatement[39479-39540]:IfStatement[39859-39920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39499-39540]:Block[39879-39920]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[39513-39530]:ReturnStatement[39893-39910]"
    }, {
      "left" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "right" : "return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;",
      "info" : "ReturnStatement[39549-39603]:ReturnStatement[39929-39983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39991-40046]:Block[40371-40426]"
    }, {
      "left" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "right" : "return (x == 0) ? 0 : (x > 0) ? 1 : -1;",
      "info" : "ReturnStatement[40001-40040]:ReturnStatement[40381-40420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40437-40497]:Block[40817-40877]"
    }, {
      "left" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "right" : "return (x == 0L) ? 0L : (x > 0L) ? 1L : -1L;",
      "info" : "ReturnStatement[40447-40491]:ReturnStatement[40827-40871]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40956-41015]:Block[41336-41395]"
    }, {
      "left" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "right" : "return (x == ZS) ? ZS : (x > ZS) ? PS : NS;",
      "info" : "ReturnStatement[40966-41009]:ReturnStatement[41346-41389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41296-41354]:Block[41676-41734]"
    }, {
      "left" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
      "right" : "return (Math.exp(x) - Math.exp(-x)) / 2.0;",
      "info" : "ReturnStatement[41306-41348]:ReturnStatement[41686-41728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41702-41905]:Block[42082-42285]"
    }, {
      "left" : "long s = (long)x - (long)y;",
      "right" : "long s = (long)x - (long)y;",
      "info" : "VariableDeclarationStatement[41712-41739]:VariableDeclarationStatement[42092-42119]"
    }, {
      "left" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "right" : "if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE)",
      "info" : "IfStatement[41748-41876]:IfStatement[42128-42256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41800-41876]:Block[42180-42256]"
    }, {
      "left" : "throw new ArithmeticException(\"overflow: subtract\");",
      "right" : "throw new ArithmeticException(\"overflow: subtract\");",
      "info" : "ThrowStatement[41814-41866]:ThrowStatement[42194-42246]"
    }, {
      "left" : "return (int)s;",
      "right" : "return (int)s;",
      "info" : "ReturnStatement[41885-41899]:ReturnStatement[42265-42279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42260-42630]:Block[42640-43010]"
    }, {
      "left" : "long ret;",
      "right" : "long ret;",
      "info" : "VariableDeclarationStatement[42270-42279]:VariableDeclarationStatement[42650-42659]"
    }, {
      "left" : "String msg = \"overflow: subtract\";",
      "right" : "String msg = \"overflow: subtract\";",
      "info" : "VariableDeclarationStatement[42288-42322]:VariableDeclarationStatement[42668-42702]"
    }, {
      "left" : "if (b == Long.MIN_VALUE)",
      "right" : "if (b == Long.MIN_VALUE)",
      "info" : "IfStatement[42331-42604]:IfStatement[42711-42984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42356-42508]:Block[42736-42888]"
    }, {
      "left" : "if (a < 0)",
      "right" : "if (a < 0)",
      "info" : "IfStatement[42370-42498]:IfStatement[42750-42878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42381-42425]:Block[42761-42805]"
    }, {
      "left" : "ret = a - b;",
      "right" : "ret = a - b;",
      "info" : "ExpressionStatement[42399-42411]:ExpressionStatement[42779-42791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42431-42498]:Block[42811-42878]"
    }, {
      "left" : "throw new ArithmeticException(msg);",
      "right" : "throw new ArithmeticException(msg);",
      "info" : "ThrowStatement[42449-42484]:ThrowStatement[42829-42864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42514-42604]:Block[42894-42984]"
    }, {
      "left" : "ret = addAndCheck(a, -b, msg);",
      "right" : "ret = addAndCheck(a, -b, msg);",
      "info" : "ExpressionStatement[42564-42594]:ExpressionStatement[42944-42974]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[42613-42624]:ReturnStatement[42993-43004]"
    } ]
  },
  "interFileMappings" : { }
}