{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "IOSTarget",
      "right" : "IOSTarget",
      "info" : "TypeDeclaration[2878-40815]:TypeDeclaration[2878-40902]"
    }, {
      "left" : "private static File iosSimPath;",
      "right" : "private static File iosSimPath;",
      "info" : "FieldDeclaration[2959-2990]:FieldDeclaration[2959-2990]"
    }, {
      "left" : "private Arch arch;",
      "right" : "private Arch arch;",
      "info" : "FieldDeclaration[2996-3014]:FieldDeclaration[2996-3014]"
    }, {
      "left" : "private SDK sdk;",
      "right" : "private SDK sdk;",
      "info" : "FieldDeclaration[3019-3035]:FieldDeclaration[3019-3035]"
    }, {
      "left" : "private File resourceRulesPList;",
      "right" : "private File resourceRulesPList;",
      "info" : "FieldDeclaration[3040-3072]:FieldDeclaration[3040-3072]"
    }, {
      "left" : "private File entitlementsPList;",
      "right" : "private File entitlementsPList;",
      "info" : "FieldDeclaration[3077-3108]:FieldDeclaration[3077-3108]"
    }, {
      "left" : "private SigningIdentity signIdentity;",
      "right" : "private SigningIdentity signIdentity;",
      "info" : "FieldDeclaration[3113-3150]:FieldDeclaration[3113-3150]"
    }, {
      "left" : "private ProvisioningProfile provisioningProfile;",
      "right" : "private ProvisioningProfile provisioningProfile;",
      "info" : "FieldDeclaration[3155-3203]:FieldDeclaration[3155-3203]"
    }, {
      "left" : "private IDevice device;",
      "right" : "private IDevice device;",
      "info" : "FieldDeclaration[3208-3231]:FieldDeclaration[3208-3231]"
    }, {
      "left" : "private File partialPListDir;",
      "right" : "private File partialPListDir;",
      "info" : "FieldDeclaration[3236-3265]:FieldDeclaration[3236-3265]"
    }, {
      "left" : "public IOSTarget()",
      "right" : "public IOSTarget()",
      "info" : "MethodDeclaration[3271-3292]:MethodDeclaration[3271-3292]"
    }, {
      "left" : "public Arch getArch()",
      "right" : "public Arch getArch()",
      "info" : "MethodDeclaration[3298-3362]:MethodDeclaration[3298-3362]"
    }, {
      "left" : "public LaunchParameters createLaunchParameters()",
      "right" : "public LaunchParameters createLaunchParameters()",
      "info" : "MethodDeclaration[3368-3588]:MethodDeclaration[3368-3588]"
    }, {
      "left" : "public static boolean isSimulatorArch(Arch arch)",
      "right" : "public static boolean isSimulatorArch(Arch arch)",
      "info" : "MethodDeclaration[3594-3706]:MethodDeclaration[3594-3706]"
    }, {
      "left" : "public static boolean isDeviceArch(Arch arch)",
      "right" : "public static boolean isDeviceArch(Arch arch)",
      "info" : "MethodDeclaration[3712-3824]:MethodDeclaration[3712-3824]"
    }, {
      "left" : "public static synchronized File getIosSimPath()",
      "right" : "public static synchronized File getIosSimPath()",
      "info" : "MethodDeclaration[3830-4328]:MethodDeclaration[3830-4328]"
    }, {
      "left" : "public List<SDK> getSDKs()",
      "right" : "public List<SDK> getSDKs()",
      "info" : "MethodDeclaration[4334-4517]:MethodDeclaration[4334-4517]"
    }, {
      "left" : "public IDevice getDevice()",
      "right" : "public IDevice getDevice()",
      "info" : "MethodDeclaration[4523-4811]:MethodDeclaration[4523-4811]"
    }, {
      "left" : "protected Launcher createLauncher(LaunchParameters launchParameters) throws IOException",
      "right" : "protected Launcher createLauncher(LaunchParameters launchParameters) throws IOException",
      "info" : "MethodDeclaration[4817-5108]:MethodDeclaration[4817-5108]"
    }, {
      "left" : "private Launcher createIOSSimLauncher(LaunchParameters launchParameters)\n            throws IOException",
      "right" : "private Launcher createIOSSimLauncher(LaunchParameters launchParameters)\n            throws IOException",
      "info" : "MethodDeclaration[5114-6979]:MethodDeclaration[5114-6979]"
    }, {
      "left" : "private Launcher createIOSDevLauncher(LaunchParameters launchParameters)\n            throws IOException",
      "right" : "private Launcher createIOSDevLauncher(LaunchParameters launchParameters)\n            throws IOException",
      "info" : "MethodDeclaration[6985-10312]:MethodDeclaration[6985-10312]"
    }, {
      "left" : "protected void log(String s, Object... args)",
      "right" : "protected void log(String s, Object... args)",
      "info" : "MethodDeclaration[8353-8464]:MethodDeclaration[8353-8464]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "FieldDeclaration[8880-8901]:FieldDeclaration[8880-8901]"
    }, {
      "left" : "public void success()",
      "right" : "public void success()",
      "info" : "MethodDeclaration[8923-9045]:MethodDeclaration[8923-9045]"
    }, {
      "left" : "public void progress(File path, int percentComplete)",
      "right" : "public void progress(File path, int percentComplete)",
      "info" : "MethodDeclaration[9067-9430]:MethodDeclaration[9067-9430]"
    }, {
      "left" : "public void error(String message)",
      "right" : "public void error(String message)",
      "info" : "MethodDeclaration[9452-9488]:MethodDeclaration[9452-9488]"
    }, {
      "left" : "boolean first = true;",
      "right" : "boolean first = true;",
      "info" : "FieldDeclaration[9590-9611]:FieldDeclaration[9590-9611]"
    }, {
      "left" : "public void success()",
      "right" : "public void success()",
      "info" : "MethodDeclaration[9633-9756]:MethodDeclaration[9633-9756]"
    }, {
      "left" : "public void progress(String status, int percentComplete)",
      "right" : "public void progress(String status, int percentComplete)",
      "info" : "MethodDeclaration[9778-10140]:MethodDeclaration[9778-10140]"
    }, {
      "left" : "public void error(String message)",
      "right" : "public void error(String message)",
      "info" : "MethodDeclaration[10162-10198]:MethodDeclaration[10162-10198]"
    }, {
      "left" : "protected void doBuild(File outFile, List<String> ccArgs,\n            List<File> objectFiles, List<String> libArgs)\n            throws IOException",
      "right" : "protected void doBuild(File outFile, List<String> ccArgs,\n            List<File> objectFiles, List<String> libArgs)\n            throws IOException",
      "info" : "MethodDeclaration[10318-12605]:MethodDeclaration[10318-12605]"
    }, {
      "left" : "protected void prepareInstall(File installDir) throws IOException",
      "right" : "protected void prepareInstall(File installDir) throws IOException",
      "info" : "MethodDeclaration[12611-14122]:MethodDeclaration[12611-14180]"
    }, {
      "left" : "private void copyProvisioningProfile(ProvisioningProfile profile, File destDir) throws IOException",
      "right" : "private void copyProvisioningProfile(ProvisioningProfile profile, File destDir) throws IOException",
      "info" : "MethodDeclaration[14128-14558]:MethodDeclaration[14186-14616]"
    }, {
      "left" : "protected void prepareLaunch(File appDir) throws IOException",
      "right" : "protected void prepareLaunch(File appDir) throws IOException",
      "info" : "MethodDeclaration[14564-16264]:MethodDeclaration[14622-15460]"
    }, {
      "left" : "private void codesign(SigningIdentity identity, File entitlementsPList, File appDir) throws IOException",
      "right" : "private void codesign(SigningIdentity identity, File entitlementsPList, File appDir) throws IOException",
      "info" : "MethodDeclaration[16270-17054]:MethodDeclaration[16357-17141]"
    }, {
      "left" : "private void ldid(File entitlementsPList, File appDir) throws IOException",
      "right" : "private void ldid(File entitlementsPList, File appDir) throws IOException",
      "info" : "MethodDeclaration[17060-17686]:MethodDeclaration[17147-17773]"
    }, {
      "left" : "private void copyResourcesPList(File destDir) throws IOException",
      "right" : "private void copyResourcesPList(File destDir) throws IOException",
      "info" : "MethodDeclaration[17692-18056]:MethodDeclaration[17779-18143]"
    }, {
      "left" : "private File getOrCreateEntitlementsPList(boolean getTaskAllow) throws IOException",
      "right" : "private File getOrCreateEntitlementsPList(boolean getTaskAllow) throws IOException",
      "info" : "MethodDeclaration[18062-19399]:MethodDeclaration[18149-19486]"
    }, {
      "left" : "private void generateDsym(final File dir, final String executable, boolean copyToIndexedDir) throws IOException",
      "right" : "private void generateDsym(final File dir, final String executable, boolean copyToIndexedDir) throws IOException",
      "info" : "MethodDeclaration[19405-20268]:MethodDeclaration[19492-20355]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[19941-20229]:MethodDeclaration[20028-20316]"
    }, {
      "left" : "private void strip(File dir, String executable) throws IOException",
      "right" : "private void strip(File dir, String executable) throws IOException",
      "info" : "MethodDeclaration[20274-20487]:MethodDeclaration[20361-20574]"
    }, {
      "left" : "protected void doInstall(File installDir, String executable) throws IOException",
      "right" : "protected void doInstall(File installDir, String executable) throws IOException",
      "info" : "MethodDeclaration[20493-20684]:MethodDeclaration[20580-20771]"
    }, {
      "left" : "protected Process doLaunch(LaunchParameters launchParameters) throws IOException",
      "right" : "protected Process doLaunch(LaunchParameters launchParameters) throws IOException",
      "info" : "MethodDeclaration[20690-21336]:MethodDeclaration[20777-21423]"
    }, {
      "left" : "public void createIpa(List<File> slices) throws IOException",
      "right" : "public void createIpa(List<File> slices) throws IOException",
      "info" : "MethodDeclaration[21342-22482]:MethodDeclaration[21429-22569]"
    }, {
      "left" : "protected boolean processDir(Resource resource, File dir, File destDir) throws IOException",
      "right" : "protected boolean processDir(Resource resource, File dir, File destDir) throws IOException",
      "info" : "MethodDeclaration[22488-23011]:MethodDeclaration[22575-23098]"
    }, {
      "left" : "protected void copyFile(Resource resource, File file, File destDir)\n            throws IOException",
      "right" : "protected void copyFile(Resource resource, File file, File destDir)\n            throws IOException",
      "info" : "MethodDeclaration[23017-24296]:MethodDeclaration[23104-24383]"
    }, {
      "left" : "private File createPartialInfoPlistFile(File f) throws IOException",
      "right" : "private File createPartialInfoPlistFile(File f) throws IOException",
      "info" : "MethodDeclaration[24302-24516]:MethodDeclaration[24389-24603]"
    }, {
      "left" : "protected File getAppDir()",
      "right" : "protected File getAppDir()",
      "info" : "MethodDeclaration[24522-24938]:MethodDeclaration[24609-25025]"
    }, {
      "left" : "protected String getExecutable()",
      "right" : "protected String getExecutable()",
      "info" : "MethodDeclaration[24944-25270]:MethodDeclaration[25031-25357]"
    }, {
      "left" : "protected String getBundleId()",
      "right" : "protected String getBundleId()",
      "info" : "MethodDeclaration[25276-25656]:MethodDeclaration[25363-25743]"
    }, {
      "left" : "protected String getMinimumOSVersion()",
      "right" : "protected String getMinimumOSVersion()",
      "info" : "MethodDeclaration[25662-25980]:MethodDeclaration[25749-26067]"
    }, {
      "left" : "private void putIfAbsent(NSDictionary dict, String key, String value)",
      "right" : "private void putIfAbsent(NSDictionary dict, String key, String value)",
      "info" : "MethodDeclaration[25986-26153]:MethodDeclaration[26073-26240]"
    }, {
      "left" : "protected void customizeInfoPList(NSDictionary dict)",
      "right" : "protected void customizeInfoPList(NSDictionary dict)",
      "info" : "MethodDeclaration[26163-28521]:MethodDeclaration[26250-28608]"
    }, {
      "left" : "protected void createInfoPList(File dir) throws IOException",
      "right" : "protected void createInfoPList(File dir) throws IOException",
      "info" : "MethodDeclaration[28527-33412]:MethodDeclaration[28614-33499]"
    }, {
      "left" : "public void init(Config config)",
      "right" : "public void init(Config config)",
      "info" : "MethodDeclaration[33418-36166]:MethodDeclaration[33505-36253]"
    }, {
      "left" : "public OS getOs()",
      "right" : "public OS getOs()",
      "info" : "MethodDeclaration[36172-36234]:MethodDeclaration[36259-36321]"
    }, {
      "left" : "public boolean canLaunchInPlace()",
      "right" : "public boolean canLaunchInPlace()",
      "info" : "MethodDeclaration[36240-36317]:MethodDeclaration[36327-36404]"
    }, {
      "left" : "private void copyToIndexedDir(File dir, String executable, File dsymDir, File exePath)",
      "right" : "private void copyToIndexedDir(File dir, String executable, File dsymDir, File exePath)",
      "info" : "MethodDeclaration[36323-38867]:MethodDeclaration[36410-38954]"
    }, {
      "left" : "public int compare(File o1, File o2)",
      "right" : "public int compare(File o1, File o2)",
      "info" : "MethodDeclaration[38329-38456]:MethodDeclaration[38416-38543]"
    }, {
      "left" : "private final static Pattern VARIABLE_PATTERN = Pattern.compile(\"\\\\$\\\\{([^}]+)\\\\}\");",
      "right" : "private final static Pattern VARIABLE_PATTERN = Pattern.compile(\"\\\\$\\\\{([^}]+)\\\\}\");",
      "info" : "FieldDeclaration[38873-38957]:FieldDeclaration[38960-39044]"
    }, {
      "left" : "static void replacePropertyRefs(Node node, Properties props)",
      "right" : "static void replacePropertyRefs(Node node, Properties props)",
      "info" : "MethodDeclaration[38963-40092]:MethodDeclaration[39050-40179]"
    }, {
      "left" : "static NSObject parsePropertyList(File file, Properties props) throws Exception",
      "right" : "static NSObject parsePropertyList(File file, Properties props) throws Exception",
      "info" : "MethodDeclaration[40098-40813]:MethodDeclaration[40185-40900]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3290-3292]:Block[3290-3292]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3334-3362]:Block[3334-3362]"
    }, {
      "left" : "return arch;",
      "right" : "return arch;",
      "info" : "ReturnStatement[3344-3356]:ReturnStatement[3344-3356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3431-3588]:Block[3431-3588]"
    }, {
      "left" : "if (isSimulatorArch(arch))",
      "right" : "if (isSimulatorArch(arch))",
      "info" : "IfStatement[3441-3534]:IfStatement[3441-3534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3468-3534]:Block[3468-3534]"
    }, {
      "left" : "return new IOSSimulatorLaunchParameters();",
      "right" : "return new IOSSimulatorLaunchParameters();",
      "info" : "ReturnStatement[3482-3524]:ReturnStatement[3482-3524]"
    }, {
      "left" : "return new IOSDeviceLaunchParameters();",
      "right" : "return new IOSDeviceLaunchParameters();",
      "info" : "ReturnStatement[3543-3582]:ReturnStatement[3543-3582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3643-3706]:Block[3643-3706]"
    }, {
      "left" : "return arch == Arch.x86 || arch == Arch.x86_64;",
      "right" : "return arch == Arch.x86 || arch == Arch.x86_64;",
      "info" : "ReturnStatement[3653-3700]:ReturnStatement[3653-3700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3758-3824]:Block[3758-3824]"
    }, {
      "left" : "return arch == Arch.thumbv7 || arch == Arch.arm64;",
      "right" : "return arch == Arch.thumbv7 || arch == Arch.arm64;",
      "info" : "ReturnStatement[3768-3818]:ReturnStatement[3768-3818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3878-4328]:Block[3878-4328]"
    }, {
      "left" : "if (iosSimPath == null)",
      "right" : "if (iosSimPath == null)",
      "info" : "IfStatement[3888-4295]:IfStatement[3888-4295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3912-4295]:Block[3912-4295]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3926-4285]:TryStatement[3926-4285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3930-4211]:Block[3930-4211]"
    }, {
      "left" : "File path = File.createTempFile(\"ios-sim\", \"\");",
      "right" : "File path = File.createTempFile(\"ios-sim\", \"\");",
      "info" : "VariableDeclarationStatement[3948-3995]:VariableDeclarationStatement[3948-3995]"
    }, {
      "left" : "FileUtils.copyURLToFile(IOSTarget.class.getResource(\"/ios-sim\"), path);",
      "right" : "FileUtils.copyURLToFile(IOSTarget.class.getResource(\"/ios-sim\"), path);",
      "info" : "ExpressionStatement[4012-4083]:ExpressionStatement[4012-4083]"
    }, {
      "left" : "path.setExecutable(true);",
      "right" : "path.setExecutable(true);",
      "info" : "ExpressionStatement[4100-4125]:ExpressionStatement[4100-4125]"
    }, {
      "left" : "path.deleteOnExit();",
      "right" : "path.deleteOnExit();",
      "info" : "ExpressionStatement[4142-4162]:ExpressionStatement[4142-4162]"
    }, {
      "left" : "iosSimPath = path;",
      "right" : "iosSimPath = path;",
      "info" : "ExpressionStatement[4179-4197]:ExpressionStatement[4179-4197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4234-4285]:Block[4234-4285]"
    }, {
      "left" : "throw new Error(e);",
      "right" : "throw new Error(e);",
      "info" : "ThrowStatement[4252-4271]:ThrowStatement[4252-4271]"
    }, {
      "left" : "return iosSimPath;",
      "right" : "return iosSimPath;",
      "info" : "ReturnStatement[4304-4322]:ReturnStatement[4304-4322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4361-4517]:Block[4361-4517]"
    }, {
      "left" : "if (isSimulatorArch(arch))",
      "right" : "if (isSimulatorArch(arch))",
      "info" : "IfStatement[4371-4511]:IfStatement[4371-4511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4398-4453]:Block[4398-4453]"
    }, {
      "left" : "return SDK.listSimulatorSDKs();",
      "right" : "return SDK.listSimulatorSDKs();",
      "info" : "ReturnStatement[4412-4443]:ReturnStatement[4412-4443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4459-4511]:Block[4459-4511]"
    }, {
      "left" : "return SDK.listDeviceSDKs();",
      "right" : "return SDK.listDeviceSDKs();",
      "info" : "ReturnStatement[4473-4501]:ReturnStatement[4473-4501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4781-4811]:Block[4781-4811]"
    }, {
      "left" : "return device;",
      "right" : "return device;",
      "info" : "ReturnStatement[4791-4805]:ReturnStatement[4791-4805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4919-5108]:Block[4919-5108]"
    }, {
      "left" : "if (isSimulatorArch(arch))",
      "right" : "if (isSimulatorArch(arch))",
      "info" : "IfStatement[4929-5102]:IfStatement[4929-5102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4956-5026]:Block[4956-5026]"
    }, {
      "left" : "return createIOSSimLauncher(launchParameters);",
      "right" : "return createIOSSimLauncher(launchParameters);",
      "info" : "ReturnStatement[4970-5016]:ReturnStatement[4970-5016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5032-5102]:Block[5032-5102]"
    }, {
      "left" : "return createIOSDevLauncher(launchParameters);",
      "right" : "return createIOSDevLauncher(launchParameters);",
      "info" : "ReturnStatement[5046-5092]:ReturnStatement[5046-5092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5218-6979]:Block[5218-6979]"
    }, {
      "left" : "File dir = getAppDir();",
      "right" : "File dir = getAppDir();",
      "info" : "VariableDeclarationStatement[5229-5252]:VariableDeclarationStatement[5229-5252]"
    }, {
      "left" : "String iosSimPath = new File(config.getHome().getBinDir(), \"ios-sim\").getAbsolutePath();",
      "right" : "String iosSimPath = new File(config.getHome().getBinDir(), \"ios-sim\").getAbsolutePath();",
      "info" : "VariableDeclarationStatement[5262-5350]:VariableDeclarationStatement[5262-5350]"
    }, {
      "left" : "List<Object> args = new ArrayList<Object>();",
      "right" : "List<Object> args = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[5360-5404]:VariableDeclarationStatement[5360-5404]"
    }, {
      "left" : "args.add(\"launch\");",
      "right" : "args.add(\"launch\");",
      "info" : "ExpressionStatement[5413-5432]:ExpressionStatement[5413-5432]"
    }, {
      "left" : "args.add(dir);",
      "right" : "args.add(dir);",
      "info" : "ExpressionStatement[5441-5455]:ExpressionStatement[5441-5455]"
    }, {
      "left" : "args.add(\"--timeout\");",
      "right" : "args.add(\"--timeout\");",
      "info" : "ExpressionStatement[5464-5486]:ExpressionStatement[5464-5486]"
    }, {
      "left" : "args.add(\"90\");",
      "right" : "args.add(\"90\");",
      "info" : "ExpressionStatement[5495-5510]:ExpressionStatement[5495-5510]"
    }, {
      "left" : "args.add(\"--unbuffered\");",
      "right" : "args.add(\"--unbuffered\");",
      "info" : "ExpressionStatement[5519-5544]:ExpressionStatement[5519-5544]"
    }, {
      "left" : "if (((IOSSimulatorLaunchParameters) launchParameters).getDeviceType() != null)",
      "right" : "if (((IOSSimulatorLaunchParameters) launchParameters).getDeviceType() != null)",
      "info" : "IfStatement[5553-5838]:IfStatement[5553-5838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5632-5838]:Block[5632-5838]"
    }, {
      "left" : "DeviceType deviceType = ((IOSSimulatorLaunchParameters) launchParameters).getDeviceType();",
      "right" : "DeviceType deviceType = ((IOSSimulatorLaunchParameters) launchParameters).getDeviceType();",
      "info" : "VariableDeclarationStatement[5646-5736]:VariableDeclarationStatement[5646-5736]"
    }, {
      "left" : "args.add(\"--devicetypeid\");",
      "right" : "args.add(\"--devicetypeid\");",
      "info" : "ExpressionStatement[5749-5776]:ExpressionStatement[5749-5776]"
    }, {
      "left" : "args.add(deviceType.getDeviceTypeId());",
      "right" : "args.add(deviceType.getDeviceTypeId());",
      "info" : "ExpressionStatement[5789-5828]:ExpressionStatement[5789-5828]"
    }, {
      "left" : "if (launchParameters.getStdoutFifo() != null)",
      "right" : "if (launchParameters.getStdoutFifo() != null)",
      "info" : "IfStatement[5847-5994]:IfStatement[5847-5994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5893-5994]:Block[5893-5994]"
    }, {
      "left" : "args.add(\"--stdout\");",
      "right" : "args.add(\"--stdout\");",
      "info" : "ExpressionStatement[5907-5928]:ExpressionStatement[5907-5928]"
    }, {
      "left" : "args.add(launchParameters.getStdoutFifo());",
      "right" : "args.add(launchParameters.getStdoutFifo());",
      "info" : "ExpressionStatement[5941-5984]:ExpressionStatement[5941-5984]"
    }, {
      "left" : "if (launchParameters.getStderrFifo() != null)",
      "right" : "if (launchParameters.getStderrFifo() != null)",
      "info" : "IfStatement[6003-6150]:IfStatement[6003-6150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6049-6150]:Block[6049-6150]"
    }, {
      "left" : "args.add(\"--stderr\");",
      "right" : "args.add(\"--stderr\");",
      "info" : "ExpressionStatement[6063-6084]:ExpressionStatement[6063-6084]"
    }, {
      "left" : "args.add(launchParameters.getStderrFifo());",
      "right" : "args.add(launchParameters.getStderrFifo());",
      "info" : "ExpressionStatement[6097-6140]:ExpressionStatement[6097-6140]"
    }, {
      "left" : "if (launchParameters.getEnvironment() != null)",
      "right" : "if (launchParameters.getEnvironment() != null)",
      "info" : "IfStatement[6159-6431]:IfStatement[6159-6431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6206-6431]:Block[6206-6431]"
    }, {
      "left" : "for (Entry<String, String> entry : launchParameters.getEnvironment().entrySet())",
      "right" : "for (Entry<String, String> entry : launchParameters.getEnvironment().entrySet())",
      "info" : "EnhancedForStatement[6220-6421]:EnhancedForStatement[6220-6421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6301-6421]:Block[6301-6421]"
    }, {
      "left" : "args.add(\"--setenv\");",
      "right" : "args.add(\"--setenv\");",
      "info" : "ExpressionStatement[6319-6340]:ExpressionStatement[6319-6340]"
    }, {
      "left" : "args.add(entry.getKey() + \"=\" + entry.getValue());",
      "right" : "args.add(entry.getKey() + \"=\" + entry.getValue());",
      "info" : "ExpressionStatement[6357-6407]:ExpressionStatement[6357-6407]"
    }, {
      "left" : "if (!launchParameters.getArguments().isEmpty())",
      "right" : "if (!launchParameters.getArguments().isEmpty())",
      "info" : "IfStatement[6441-6590]:IfStatement[6441-6590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6489-6590]:Block[6489-6590]"
    }, {
      "left" : "args.add(\"--args\");",
      "right" : "args.add(\"--args\");",
      "info" : "ExpressionStatement[6503-6522]:ExpressionStatement[6503-6522]"
    }, {
      "left" : "args.addAll(launchParameters.getArguments());",
      "right" : "args.addAll(launchParameters.getArguments());",
      "info" : "ExpressionStatement[6535-6580]:ExpressionStatement[6535-6580]"
    }, {
      "left" : "File xcodePath = new File(ToolchainUtil.findXcodePath());",
      "right" : "File xcodePath = new File(ToolchainUtil.findXcodePath());",
      "info" : "VariableDeclarationStatement[6600-6657]:VariableDeclarationStatement[6600-6657]"
    }, {
      "left" : "Map<String, String> env = Collections.singletonMap(\"DEVELOPER_DIR\", xcodePath.getAbsolutePath());",
      "right" : "Map<String, String> env = Collections.singletonMap(\"DEVELOPER_DIR\", xcodePath.getAbsolutePath());",
      "info" : "VariableDeclarationStatement[6666-6763]:VariableDeclarationStatement[6666-6763]"
    }, {
      "left" : "return new Executor(config.getLogger(), iosSimPath)\n                .args(args)\n                .wd(launchParameters.getWorkingDirectory())\n                .inheritEnv(false)\n                .env(env);",
      "right" : "return new Executor(config.getLogger(), iosSimPath)\n                .args(args)\n                .wd(launchParameters.getWorkingDirectory())\n                .inheritEnv(false)\n                .env(env);",
      "info" : "ReturnStatement[6772-6973]:ReturnStatement[6772-6973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7089-10312]:Block[7089-10312]"
    }, {
      "left" : "IOSDeviceLaunchParameters deviceLaunchParameters = (IOSDeviceLaunchParameters) launchParameters;",
      "right" : "IOSDeviceLaunchParameters deviceLaunchParameters = (IOSDeviceLaunchParameters) launchParameters;",
      "info" : "VariableDeclarationStatement[7100-7196]:VariableDeclarationStatement[7100-7196]"
    }, {
      "left" : "String deviceId = deviceLaunchParameters.getDeviceId();",
      "right" : "String deviceId = deviceLaunchParameters.getDeviceId();",
      "info" : "VariableDeclarationStatement[7205-7260]:VariableDeclarationStatement[7205-7260]"
    }, {
      "left" : "int forwardPort = deviceLaunchParameters.getForwardPort();",
      "right" : "int forwardPort = deviceLaunchParameters.getForwardPort();",
      "info" : "VariableDeclarationStatement[7269-7327]:VariableDeclarationStatement[7269-7327]"
    }, {
      "left" : "AppLauncherCallback callback = deviceLaunchParameters.getAppPathCallback();",
      "right" : "AppLauncherCallback callback = deviceLaunchParameters.getAppPathCallback();",
      "info" : "VariableDeclarationStatement[7336-7411]:VariableDeclarationStatement[7336-7411]"
    }, {
      "left" : "if (deviceId == null)",
      "right" : "if (deviceId == null)",
      "info" : "IfStatement[7420-7855]:IfStatement[7420-7855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7442-7855]:Block[7442-7855]"
    }, {
      "left" : "String[] udids = IDevice.listUdids();",
      "right" : "String[] udids = IDevice.listUdids();",
      "info" : "VariableDeclarationStatement[7456-7493]:VariableDeclarationStatement[7456-7493]"
    }, {
      "left" : "if (udids.length == 0)",
      "right" : "if (udids.length == 0)",
      "info" : "IfStatement[7506-7612]:IfStatement[7506-7612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7529-7612]:Block[7529-7612]"
    }, {
      "left" : "throw new RuntimeException(\"No devices connected\");",
      "right" : "throw new RuntimeException(\"No devices connected\");",
      "info" : "ThrowStatement[7547-7598]:ThrowStatement[7547-7598]"
    }, {
      "left" : "if (udids.length > 1)",
      "right" : "if (udids.length > 1)",
      "info" : "IfStatement[7625-7812]:IfStatement[7625-7812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7647-7812]:Block[7647-7812]"
    }, {
      "left" : "config.getLogger().warn(\"More than 1 device connected (%s). \"\n                        + \"Using %s.\", Arrays.asList(udids), udids[0]);",
      "right" : "config.getLogger().warn(\"More than 1 device connected (%s). \"\n                        + \"Using %s.\", Arrays.asList(udids), udids[0]);",
      "info" : "ExpressionStatement[7665-7798]:ExpressionStatement[7665-7798]"
    }, {
      "left" : "deviceId = udids[0];",
      "right" : "deviceId = udids[0];",
      "info" : "ExpressionStatement[7825-7845]:ExpressionStatement[7825-7845]"
    }, {
      "left" : "device = new IDevice(deviceId);",
      "right" : "device = new IDevice(deviceId);",
      "info" : "ExpressionStatement[7864-7895]:ExpressionStatement[7864-7895]"
    }, {
      "left" : "OutputStream out = null;",
      "right" : "OutputStream out = null;",
      "info" : "VariableDeclarationStatement[7905-7929]:VariableDeclarationStatement[7905-7929]"
    }, {
      "left" : "if (launchParameters.getStdoutFifo() != null)",
      "right" : "if (launchParameters.getStdoutFifo() != null)",
      "info" : "IfStatement[7938-8127]:IfStatement[7938-8127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7984-8080]:Block[7984-8080]"
    }, {
      "left" : "out = new OpenOnWriteFileOutputStream(launchParameters.getStdoutFifo());",
      "right" : "out = new OpenOnWriteFileOutputStream(launchParameters.getStdoutFifo());",
      "info" : "ExpressionStatement[7998-8070]:ExpressionStatement[7998-8070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8086-8127]:Block[8086-8127]"
    }, {
      "left" : "out = System.out;",
      "right" : "out = System.out;",
      "info" : "ExpressionStatement[8100-8117]:ExpressionStatement[8100-8117]"
    }, {
      "left" : "Map<String, String> env = launchParameters.getEnvironment();",
      "right" : "Map<String, String> env = launchParameters.getEnvironment();",
      "info" : "VariableDeclarationStatement[8137-8197]:VariableDeclarationStatement[8137-8197]"
    }, {
      "left" : "if (env == null)",
      "right" : "if (env == null)",
      "info" : "IfStatement[8206-8269]:IfStatement[8206-8269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8223-8269]:Block[8223-8269]"
    }, {
      "left" : "env = new HashMap<>();",
      "right" : "env = new HashMap<>();",
      "info" : "ExpressionStatement[8237-8259]:ExpressionStatement[8237-8259]"
    }, {
      "left" : "AppLauncher launcher = new AppLauncher(device, getAppDir()) {\n            protected void log(String s, Object... args) {\n                config.getLogger().debug(s, args);\n            }\n        }\n                .stdout(out)\n                .closeOutOnExit(true)\n                .args(launchParameters.getArguments().toArray(new String[0]))\n                .env(env)\n                .forward(forwardPort)\n                .appLauncherCallback(callback)\n                .xcodePath(ToolchainUtil.findXcodePath())\n                .uploadProgressCallback(new UploadProgressCallback() {\n                    boolean first = true;\n\n                    public void success() {\n                        config.getLogger().debug(\"[100%%] Upload complete\");\n                    }\n\n                    public void progress(File path, int percentComplete) {\n                        if (first) {\n                            config.getLogger().debug(\"[  0%%] Beginning upload...\");\n                        }\n                        first = false;\n                        config.getLogger().debug(\"[%3d%%] Uploading %s...\", percentComplete, path);\n                    }\n\n                    public void error(String message) {}\n                })\n                .installStatusCallback(new StatusCallback() {\n                    boolean first = true;\n\n                    public void success() {\n                        config.getLogger().debug(\"[100%%] Install complete\");\n                    }\n\n                    public void progress(String status, int percentComplete) {\n                        if (first) {\n                            config.getLogger().debug(\"[  0%%] Beginning installation...\");\n                        }\n                        first = false;\n                        config.getLogger().debug(\"[%3d%%] %s\", percentComplete, status);\n                    }\n\n                    public void error(String message) {}\n                });",
      "right" : "AppLauncher launcher = new AppLauncher(device, getAppDir()) {\n            protected void log(String s, Object... args) {\n                config.getLogger().debug(s, args);\n            }\n        }\n                .stdout(out)\n                .closeOutOnExit(true)\n                .args(launchParameters.getArguments().toArray(new String[0]))\n                .env(env)\n                .forward(forwardPort)\n                .appLauncherCallback(callback)\n                .xcodePath(ToolchainUtil.findXcodePath())\n                .uploadProgressCallback(new UploadProgressCallback() {\n                    boolean first = true;\n\n                    public void success() {\n                        config.getLogger().debug(\"[100%%] Upload complete\");\n                    }\n\n                    public void progress(File path, int percentComplete) {\n                        if (first) {\n                            config.getLogger().debug(\"[  0%%] Beginning upload...\");\n                        }\n                        first = false;\n                        config.getLogger().debug(\"[%3d%%] Uploading %s...\", percentComplete, path);\n                    }\n\n                    public void error(String message) {}\n                })\n                .installStatusCallback(new StatusCallback() {\n                    boolean first = true;\n\n                    public void success() {\n                        config.getLogger().debug(\"[100%%] Install complete\");\n                    }\n\n                    public void progress(String status, int percentComplete) {\n                        if (first) {\n                            config.getLogger().debug(\"[  0%%] Beginning installation...\");\n                        }\n                        first = false;\n                        config.getLogger().debug(\"[%3d%%] %s\", percentComplete, status);\n                    }\n\n                    public void error(String message) {}\n                });",
      "info" : "VariableDeclarationStatement[8279-10218]:VariableDeclarationStatement[8279-10218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8398-8464]:Block[8398-8464]"
    }, {
      "left" : "config.getLogger().debug(s, args);",
      "right" : "config.getLogger().debug(s, args);",
      "info" : "ExpressionStatement[8416-8450]:ExpressionStatement[8416-8450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8945-9045]:Block[8945-9045]"
    }, {
      "left" : "config.getLogger().debug(\"[100%%] Upload complete\");",
      "right" : "config.getLogger().debug(\"[100%%] Upload complete\");",
      "info" : "ExpressionStatement[8971-9023]:ExpressionStatement[8971-9023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9120-9430]:Block[9120-9430]"
    }, {
      "left" : "if (first)",
      "right" : "if (first)",
      "info" : "IfStatement[9146-9269]:IfStatement[9146-9269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9157-9269]:Block[9157-9269]"
    }, {
      "left" : "config.getLogger().debug(\"[  0%%] Beginning upload...\");",
      "right" : "config.getLogger().debug(\"[  0%%] Beginning upload...\");",
      "info" : "ExpressionStatement[9187-9243]:ExpressionStatement[9187-9243]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[9294-9308]:ExpressionStatement[9294-9308]"
    }, {
      "left" : "config.getLogger().debug(\"[%3d%%] Uploading %s...\", percentComplete, path);",
      "right" : "config.getLogger().debug(\"[%3d%%] Uploading %s...\", percentComplete, path);",
      "info" : "ExpressionStatement[9333-9408]:ExpressionStatement[9333-9408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9486-9488]:Block[9486-9488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9655-9756]:Block[9655-9756]"
    }, {
      "left" : "config.getLogger().debug(\"[100%%] Install complete\");",
      "right" : "config.getLogger().debug(\"[100%%] Install complete\");",
      "info" : "ExpressionStatement[9681-9734]:ExpressionStatement[9681-9734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9835-10140]:Block[9835-10140]"
    }, {
      "left" : "if (first)",
      "right" : "if (first)",
      "info" : "IfStatement[9861-9990]:IfStatement[9861-9990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9872-9990]:Block[9872-9990]"
    }, {
      "left" : "config.getLogger().debug(\"[  0%%] Beginning installation...\");",
      "right" : "config.getLogger().debug(\"[  0%%] Beginning installation...\");",
      "info" : "ExpressionStatement[9902-9964]:ExpressionStatement[9902-9964]"
    }, {
      "left" : "first = false;",
      "right" : "first = false;",
      "info" : "ExpressionStatement[10015-10029]:ExpressionStatement[10015-10029]"
    }, {
      "left" : "config.getLogger().debug(\"[%3d%%] %s\", percentComplete, status);",
      "right" : "config.getLogger().debug(\"[%3d%%] %s\", percentComplete, status);",
      "info" : "ExpressionStatement[10054-10118]:ExpressionStatement[10054-10118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10196-10198]:Block[10196-10198]"
    }, {
      "left" : "return new AppLauncherProcess(config.getLogger(), launcher, launchParameters);",
      "right" : "return new AppLauncherProcess(config.getLogger(), launcher, launchParameters);",
      "info" : "ReturnStatement[10228-10306]:ReturnStatement[10228-10306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10479-12605]:Block[10479-12605]"
    }, {
      "left" : "if (!config.getFrameworks().contains(\"UIKit\"))",
      "right" : "if (!config.getFrameworks().contains(\"UIKit\"))",
      "info" : "IfStatement[10667-10798]:IfStatement[10667-10798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10714-10798]:Block[10714-10798]"
    }, {
      "left" : "libArgs.add(\"-framework\");",
      "right" : "libArgs.add(\"-framework\");",
      "info" : "ExpressionStatement[10728-10754]:ExpressionStatement[10728-10754]"
    }, {
      "left" : "libArgs.add(\"UIKit\");",
      "right" : "libArgs.add(\"UIKit\");",
      "info" : "ExpressionStatement[10767-10788]:ExpressionStatement[10767-10788]"
    }, {
      "left" : "String minVersion = getMinimumOSVersion();",
      "right" : "String minVersion = getMinimumOSVersion();",
      "info" : "VariableDeclarationStatement[10808-10850]:VariableDeclarationStatement[10808-10850]"
    }, {
      "left" : "int majorVersionNumber = -1;",
      "right" : "int majorVersionNumber = -1;",
      "info" : "VariableDeclarationStatement[10860-10888]:VariableDeclarationStatement[10860-10888]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10897-11211]:TryStatement[10897-11211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10901-11013]:Block[10901-11013]"
    }, {
      "left" : "majorVersionNumber = Integer.parseInt(minVersion.substring(0, minVersion.indexOf('.')));",
      "right" : "majorVersionNumber = Integer.parseInt(minVersion.substring(0, minVersion.indexOf('.')));",
      "info" : "ExpressionStatement[10915-11003]:ExpressionStatement[10915-11003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11046-11211]:Block[11046-11211]"
    }, {
      "left" : "throw new CompilerException(\"Failed to get major version number from \"\n                    + \"MinimumOSVersion string '\" + minVersion + \"'\");",
      "right" : "throw new CompilerException(\"Failed to get major version number from \"\n                    + \"MinimumOSVersion string '\" + minVersion + \"'\");",
      "info" : "ThrowStatement[11060-11201]:ThrowStatement[11060-11201]"
    }, {
      "left" : "if (isDeviceArch(arch))",
      "right" : "if (isDeviceArch(arch))",
      "info" : "IfStatement[11220-11623]:IfStatement[11220-11623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11244-11412]:Block[11244-11412]"
    }, {
      "left" : "ccArgs.add(\"-miphoneos-version-min=\" + minVersion);",
      "right" : "ccArgs.add(\"-miphoneos-version-min=\" + minVersion);",
      "info" : "ExpressionStatement[11258-11309]:ExpressionStatement[11258-11309]"
    }, {
      "left" : "if (config.isDebug())",
      "right" : "if (config.isDebug())",
      "info" : "IfStatement[11322-11402]:IfStatement[11322-11402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11344-11402]:Block[11344-11402]"
    }, {
      "left" : "ccArgs.add(\"-Wl,-no_pie\");",
      "right" : "ccArgs.add(\"-Wl,-no_pie\");",
      "info" : "ExpressionStatement[11362-11388]:ExpressionStatement[11362-11388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11418-11623]:Block[11418-11623]"
    }, {
      "left" : "ccArgs.add(\"-mios-simulator-version-min=\" + minVersion);",
      "right" : "ccArgs.add(\"-mios-simulator-version-min=\" + minVersion);",
      "info" : "ExpressionStatement[11432-11488]:ExpressionStatement[11432-11488]"
    }, {
      "left" : "if (config.getArch() == Arch.x86 || config.isDebug())",
      "right" : "if (config.getArch() == Arch.x86 || config.isDebug())",
      "info" : "IfStatement[11501-11613]:IfStatement[11501-11613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11555-11613]:Block[11555-11613]"
    }, {
      "left" : "ccArgs.add(\"-Wl,-no_pie\");",
      "right" : "ccArgs.add(\"-Wl,-no_pie\");",
      "info" : "ExpressionStatement[11573-11599]:ExpressionStatement[11573-11599]"
    }, {
      "left" : "if (majorVersionNumber >= 7)",
      "right" : "if (majorVersionNumber >= 7)",
      "info" : "IfStatement[11632-12091]:IfStatement[11632-12091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11661-12091]:Block[11661-12091]"
    }, {
      "left" : "ccArgs.add(\"-stdlib=libstdc++\");",
      "right" : "ccArgs.add(\"-stdlib=libstdc++\");",
      "info" : "ExpressionStatement[12049-12081]:ExpressionStatement[12049-12081]"
    }, {
      "left" : "ccArgs.add(\"-isysroot\");",
      "right" : "ccArgs.add(\"-isysroot\");",
      "info" : "ExpressionStatement[12100-12124]:ExpressionStatement[12100-12124]"
    }, {
      "left" : "ccArgs.add(sdk.getRoot().getAbsolutePath());",
      "right" : "ccArgs.add(sdk.getRoot().getAbsolutePath());",
      "info" : "ExpressionStatement[12133-12177]:ExpressionStatement[12133-12177]"
    }, {
      "left" : "libArgs.add(\"-Xlinker\");",
      "right" : "libArgs.add(\"-Xlinker\");",
      "info" : "ExpressionStatement[12243-12267]:ExpressionStatement[12243-12267]"
    }, {
      "left" : "libArgs.add(\"-rpath\");",
      "right" : "libArgs.add(\"-rpath\");",
      "info" : "ExpressionStatement[12276-12298]:ExpressionStatement[12276-12298]"
    }, {
      "left" : "libArgs.add(\"-Xlinker\");",
      "right" : "libArgs.add(\"-Xlinker\");",
      "info" : "ExpressionStatement[12307-12331]:ExpressionStatement[12307-12331]"
    }, {
      "left" : "libArgs.add(\"@executable_path/Frameworks\");",
      "right" : "libArgs.add(\"@executable_path/Frameworks\");",
      "info" : "ExpressionStatement[12340-12383]:ExpressionStatement[12340-12383]"
    }, {
      "left" : "libArgs.add(\"-Xlinker\");",
      "right" : "libArgs.add(\"-Xlinker\");",
      "info" : "ExpressionStatement[12392-12416]:ExpressionStatement[12392-12416]"
    }, {
      "left" : "libArgs.add(\"-rpath\");",
      "right" : "libArgs.add(\"-rpath\");",
      "info" : "ExpressionStatement[12425-12447]:ExpressionStatement[12425-12447]"
    }, {
      "left" : "libArgs.add(\"-Xlinker\");",
      "right" : "libArgs.add(\"-Xlinker\");",
      "info" : "ExpressionStatement[12456-12480]:ExpressionStatement[12456-12480]"
    }, {
      "left" : "libArgs.add(\"@loader_path/Frameworks\");",
      "right" : "libArgs.add(\"@loader_path/Frameworks\");",
      "info" : "ExpressionStatement[12489-12528]:ExpressionStatement[12489-12528]"
    }, {
      "left" : "super.doBuild(outFile, ccArgs, objectFiles, libArgs);",
      "right" : "super.doBuild(outFile, ccArgs, objectFiles, libArgs);",
      "info" : "ExpressionStatement[12546-12599]:ExpressionStatement[12546-12599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12677-14122]:Block[12677-14180]"
    }, {
      "left" : "createInfoPList(installDir);",
      "right" : "createInfoPList(installDir);",
      "info" : "ExpressionStatement[12687-12715]:ExpressionStatement[12687-12715]"
    }, {
      "left" : "generateDsym(installDir, getExecutable(), false);",
      "right" : "generateDsym(installDir, getExecutable(), false);",
      "info" : "ExpressionStatement[12724-12773]:ExpressionStatement[12724-12773]"
    }, {
      "left" : "if (isDeviceArch(arch))",
      "right" : "if (isDeviceArch(arch))",
      "info" : "IfStatement[12783-14116]:IfStatement[12783-14174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12807-14116]:Block[12807-14174]"
    }, {
      "left" : "if (!config.isDebug())",
      "right" : "if (!config.isDebug())",
      "info" : "IfStatement[12936-13026]:IfStatement[12936-13026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12959-13026]:Block[12959-13026]"
    }, {
      "left" : "strip(installDir, getExecutable());",
      "right" : "strip(installDir, getExecutable());",
      "info" : "ExpressionStatement[12977-13012]:ExpressionStatement[12977-13012]"
    }, {
      "left" : "copyResourcesPList(installDir);",
      "right" : "copyResourcesPList(installDir);",
      "info" : "ExpressionStatement[13039-13070]:ExpressionStatement[13039-13070]"
    }, {
      "left" : "if (config.isIosSkipSigning())",
      "right" : "if (config.isIosSkipSigning())",
      "info" : "IfStatement[13083-14106]:IfStatement[13083-14164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13114-13354]:Block[13114-13354]"
    }, {
      "left" : "config.getLogger().warn(\"Skipping code signing. The resulting app will \"\n                        + \"be unsigned and will not run on unjailbroken devices\");",
      "right" : "config.getLogger().warn(\"Skipping code signing. The resulting app will \"\n                        + \"be unsigned and will not run on unjailbroken devices\");",
      "info" : "ExpressionStatement[13132-13287]:ExpressionStatement[13132-13287]"
    }, {
      "left" : "ldid(entitlementsPList, installDir);",
      "right" : "ldid(entitlementsPList, installDir);",
      "info" : "ExpressionStatement[13304-13340]:ExpressionStatement[13304-13340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13360-14106]:Block[13360-14164]"
    }, {
      "left" : "copyProvisioningProfile(provisioningProfile, installDir);",
      "right" : "copyProvisioningProfile(provisioningProfile, installDir);",
      "info" : "ExpressionStatement[13427-13484]:ExpressionStatement[13427-13484]"
    }, {
      "left" : "boolean getTaskAllow = provisioningProfile.getType() == Type.Development;",
      "right" : "boolean getTaskAllow = provisioningProfile.getType() == Type.Development;",
      "info" : "VariableDeclarationStatement[13501-13574]:VariableDeclarationStatement[13501-13574]"
    }, {
      "left" : "codesign(signIdentity, getOrCreateEntitlementsPList(getTaskAllow), installDir);",
      "right" : "codesign(signIdentity, getOrCreateEntitlementsPList(getTaskAllow), installDir);",
      "info" : "ExpressionStatement[13591-13670]:ExpressionStatement[13649-13728]"
    }, {
      "left" : "new Executor(config.getLogger(), \"ln\")\n                        .args(\"-f\", \"-s\", \"_CodeSignature/CodeResources\", new File(installDir, \"CodeResources\"))\n                        .exec();",
      "right" : "new Executor(config.getLogger(), \"ln\")\n                        .args(\"-f\", \"-s\", \"_CodeSignature/CodeResources\", new File(installDir, \"CodeResources\"))\n                        .exec();",
      "info" : "ExpressionStatement[13908-14092]:ExpressionStatement[13966-14150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14227-14558]:Block[14285-14616]"
    }, {
      "left" : "config.getLogger().debug(\"Copying %s provisioning profile: %s (%s)\",\n                profile.getType(),\n                profile.getName(),\n                profile.getEntitlements().objectForKey(\"application-identifier\"));",
      "right" : "config.getLogger().debug(\"Copying %s provisioning profile: %s (%s)\",\n                profile.getType(),\n                profile.getName(),\n                profile.getEntitlements().objectForKey(\"application-identifier\"));",
      "info" : "ExpressionStatement[14237-14458]:ExpressionStatement[14295-14516]"
    }, {
      "left" : "FileUtils.copyFile(profile.getFile(), new File(destDir, \"embedded.mobileprovision\"));",
      "right" : "FileUtils.copyFile(profile.getFile(), new File(destDir, \"embedded.mobileprovision\"));",
      "info" : "ExpressionStatement[14467-14552]:ExpressionStatement[14525-14610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14625-16264]:Block[14683-15460]"
    }, {
      "left" : "super.doInstall(appDir, getExecutable());",
      "right" : "super.doInstall(appDir, getExecutable());",
      "info" : "ExpressionStatement[14635-14676]:ExpressionStatement[14693-14734]"
    }, {
      "left" : "createInfoPList(appDir);",
      "right" : "createInfoPList(appDir);",
      "info" : "ExpressionStatement[14685-14709]:ExpressionStatement[14743-14767]"
    }, {
      "left" : "generateDsym(appDir, getExecutable(), true);",
      "right" : "generateDsym(appDir, getExecutable(), true);",
      "info" : "ExpressionStatement[14718-14762]:ExpressionStatement[14776-14820]"
    }, {
      "left" : "if (isDeviceArch(arch))",
      "right" : "if (isDeviceArch(arch))",
      "info" : "IfStatement[14772-16258]:IfStatement[14830-15454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14796-16258]:Block[14854-15454]"
    }, {
      "left" : "copyResourcesPList(appDir);",
      "right" : "copyResourcesPList(appDir);",
      "info" : "ExpressionStatement[14810-14837]:ExpressionStatement[14868-14895]"
    }, {
      "left" : "if (config.isIosSkipSigning())",
      "right" : "if (config.isIosSkipSigning())",
      "info" : "IfStatement[14850-16248]:IfStatement[14908-15444]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14881-15133]:Block[14939-15191]"
    }, {
      "left" : "config.getLogger().warn(\"Skiping code signing. The resulting app will \"\n                        + \"be unsigned and will not run on unjailbroken devices\");",
      "right" : "config.getLogger().warn(\"Skiping code signing. The resulting app will \"\n                        + \"be unsigned and will not run on unjailbroken devices\");",
      "info" : "ExpressionStatement[14899-15053]:ExpressionStatement[14957-15111]"
    }, {
      "left" : "ldid(getOrCreateEntitlementsPList(true), appDir);",
      "right" : "ldid(getOrCreateEntitlementsPList(true), appDir);",
      "info" : "ExpressionStatement[15070-15119]:ExpressionStatement[15128-15177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15139-16248]:Block[15197-15444]"
    }, {
      "left" : "copyProvisioningProfile(provisioningProfile, appDir);",
      "right" : "copyProvisioningProfile(provisioningProfile, appDir);",
      "info" : "ExpressionStatement[15157-15210]:ExpressionStatement[15215-15268]"
    }, {
      "left" : "File frameworksDir = new File(appDir, \"Frameworks\");",
      "right" : "File frameworksDir = new File(appDir, \"Frameworks\");",
      "info" : "VariableDeclarationStatement[15276-15328]:VariableDeclarationStatement[15599-15651]"
    }, {
      "left" : "if (frameworksDir.exists() && frameworksDir.isDirectory())",
      "right" : "if (frameworksDir.exists() && frameworksDir.isDirectory())",
      "info" : "IfStatement[15345-16118]:IfStatement[15660-16345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15404-16118]:Block[15719-16345]"
    }, {
      "left" : "for (File swiftLib : frameworksDir.listFiles())",
      "right" : "for (File swiftLib : frameworksDir.listFiles())",
      "info" : "EnhancedForStatement[15468-15732]:EnhancedForStatement[15767-16007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15516-15732]:Block[15815-16007]"
    }, {
      "left" : "if (swiftLib.getName().endsWith(\".dylib\"))",
      "right" : "if (swiftLib.getName().endsWith(\".dylib\"))",
      "info" : "IfStatement[15542-15710]:IfStatement[15833-15993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15585-15710]:Block[15876-15993]"
    }, {
      "left" : "codesign(signIdentity, getOrCreateEntitlementsPList(true), swiftLib);",
      "right" : "codesign(signIdentity, getOrCreateEntitlementsPList(getTaskAllow), swiftLib);",
      "info" : "ExpressionStatement[15615-15684]:ExpressionStatement[15898-15975]"
    }, {
      "left" : "for (File framework : frameworksDir.listFiles())",
      "right" : "for (File framework : frameworksDir.listFiles())",
      "info" : "EnhancedForStatement[15802-16100]:EnhancedForStatement[16061-16335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15851-16100]:Block[16110-16335]"
    }, {
      "left" : "if (framework.isDirectory() && framework.getName().endsWith(\".framework\"))",
      "right" : "if (framework.isDirectory() && framework.getName().endsWith(\".framework\"))",
      "info" : "IfStatement[15877-16078]:IfStatement[16128-16321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15952-16078]:Block[16203-16321]"
    }, {
      "left" : "codesign(signIdentity, getOrCreateEntitlementsPList(true), framework);",
      "right" : "codesign(signIdentity, getOrCreateEntitlementsPList(getTaskAllow), framework);",
      "info" : "ExpressionStatement[15982-16052]:ExpressionStatement[16225-16303]"
    }, {
      "left" : "codesign(signIdentity, getOrCreateEntitlementsPList(true), appDir);",
      "right" : "codesign(signIdentity, getOrCreateEntitlementsPList(true), appDir);",
      "info" : "ExpressionStatement[16167-16234]:ExpressionStatement[15363-15430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16374-17054]:Block[16461-17141]"
    }, {
      "left" : "config.getLogger().debug(\"Code signing using identity '%s' with fingerprint %s\", identity.getName(),\n                identity.getFingerprint());",
      "right" : "config.getLogger().debug(\"Code signing using identity '%s' with fingerprint %s\", identity.getName(),\n                identity.getFingerprint());",
      "info" : "ExpressionStatement[16384-16528]:ExpressionStatement[16471-16615]"
    }, {
      "left" : "List<Object> args = new ArrayList<Object>();",
      "right" : "List<Object> args = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[16537-16581]:VariableDeclarationStatement[16624-16668]"
    }, {
      "left" : "args.add(\"-f\");",
      "right" : "args.add(\"-f\");",
      "info" : "ExpressionStatement[16590-16605]:ExpressionStatement[16677-16692]"
    }, {
      "left" : "args.add(\"-s\");",
      "right" : "args.add(\"-s\");",
      "info" : "ExpressionStatement[16614-16629]:ExpressionStatement[16701-16716]"
    }, {
      "left" : "args.add(identity.getFingerprint());",
      "right" : "args.add(identity.getFingerprint());",
      "info" : "ExpressionStatement[16638-16674]:ExpressionStatement[16725-16761]"
    }, {
      "left" : "if (entitlementsPList != null)",
      "right" : "if (entitlementsPList != null)",
      "info" : "IfStatement[16683-16806]:IfStatement[16770-16893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16714-16806]:Block[16801-16893]"
    }, {
      "left" : "args.add(\"--entitlements\");",
      "right" : "args.add(\"--entitlements\");",
      "info" : "ExpressionStatement[16728-16755]:ExpressionStatement[16815-16842]"
    }, {
      "left" : "args.add(entitlementsPList);",
      "right" : "args.add(entitlementsPList);",
      "info" : "ExpressionStatement[16768-16796]:ExpressionStatement[16855-16883]"
    }, {
      "left" : "args.add(appDir);",
      "right" : "args.add(appDir);",
      "info" : "ExpressionStatement[16815-16832]:ExpressionStatement[16902-16919]"
    }, {
      "left" : "new Executor(config.getLogger(), \"codesign\")\n                .addEnv(\"CODESIGN_ALLOCATE\", ToolchainUtil.findXcodeCommand(\"codesign_allocate\", \"iphoneos\"))\n                .args(args)\n                .exec();",
      "right" : "new Executor(config.getLogger(), \"codesign\")\n                .addEnv(\"CODESIGN_ALLOCATE\", ToolchainUtil.findXcodeCommand(\"codesign_allocate\", \"iphoneos\"))\n                .args(args)\n                .exec();",
      "info" : "ExpressionStatement[16841-17048]:ExpressionStatement[16928-17135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17134-17686]:Block[17221-17773]"
    }, {
      "left" : "File executableFile = new File(appDir, getExecutable());",
      "right" : "File executableFile = new File(appDir, getExecutable());",
      "info" : "VariableDeclarationStatement[17144-17200]:VariableDeclarationStatement[17231-17287]"
    }, {
      "left" : "config.getLogger().debug(\"Pseudo-signing %s\", executableFile.getAbsolutePath());",
      "right" : "config.getLogger().debug(\"Pseudo-signing %s\", executableFile.getAbsolutePath());",
      "info" : "ExpressionStatement[17209-17289]:ExpressionStatement[17296-17376]"
    }, {
      "left" : "List<Object> args = new ArrayList<Object>();",
      "right" : "List<Object> args = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[17298-17342]:VariableDeclarationStatement[17385-17429]"
    }, {
      "left" : "if (entitlementsPList != null)",
      "right" : "if (entitlementsPList != null)",
      "info" : "IfStatement[17351-17504]:IfStatement[17438-17591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17382-17459]:Block[17469-17546]"
    }, {
      "left" : "args.add(\"-S\" + entitlementsPList.getAbsolutePath());",
      "right" : "args.add(\"-S\" + entitlementsPList.getAbsolutePath());",
      "info" : "ExpressionStatement[17396-17449]:ExpressionStatement[17483-17536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17465-17504]:Block[17552-17591]"
    }, {
      "left" : "args.add(\"-S\");",
      "right" : "args.add(\"-S\");",
      "info" : "ExpressionStatement[17479-17494]:ExpressionStatement[17566-17581]"
    }, {
      "left" : "args.add(executableFile);",
      "right" : "args.add(executableFile);",
      "info" : "ExpressionStatement[17513-17538]:ExpressionStatement[17600-17625]"
    }, {
      "left" : "new Executor(config.getLogger(), new File(config.getHome().getBinDir(), \"ldid\"))\n                .args(args)\n                .exec();",
      "right" : "new Executor(config.getLogger(), new File(config.getHome().getBinDir(), \"ldid\"))\n                .args(args)\n                .exec();",
      "info" : "ExpressionStatement[17547-17680]:ExpressionStatement[17634-17767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17757-18056]:Block[17844-18143]"
    }, {
      "left" : "File destFile = new File(destDir, \"ResourceRules.plist\");",
      "right" : "File destFile = new File(destDir, \"ResourceRules.plist\");",
      "info" : "VariableDeclarationStatement[17767-17824]:VariableDeclarationStatement[17854-17911]"
    }, {
      "left" : "if (resourceRulesPList != null)",
      "right" : "if (resourceRulesPList != null)",
      "info" : "IfStatement[17833-18050]:IfStatement[17920-18137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17865-17938]:Block[17952-18025]"
    }, {
      "left" : "FileUtils.copyFile(resourceRulesPList, destFile);",
      "right" : "FileUtils.copyFile(resourceRulesPList, destFile);",
      "info" : "ExpressionStatement[17879-17928]:ExpressionStatement[17966-18015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17944-18050]:Block[18031-18137]"
    }, {
      "left" : "FileUtils.copyURLToFile(getClass().getResource(\"/ResourceRules.plist\"), destFile);",
      "right" : "FileUtils.copyURLToFile(getClass().getResource(\"/ResourceRules.plist\"), destFile);",
      "info" : "ExpressionStatement[17958-18040]:ExpressionStatement[18045-18127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18145-19399]:Block[18232-19486]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18155-19393]:TryStatement[18242-19480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18159-19263]:Block[18246-19350]"
    }, {
      "left" : "File destFile = new File(config.getTmpDir(), \"Entitlements.plist\");",
      "right" : "File destFile = new File(config.getTmpDir(), \"Entitlements.plist\");",
      "info" : "VariableDeclarationStatement[18173-18240]:VariableDeclarationStatement[18260-18327]"
    }, {
      "left" : "NSDictionary dict = null;",
      "right" : "NSDictionary dict = null;",
      "info" : "VariableDeclarationStatement[18253-18278]:VariableDeclarationStatement[18340-18365]"
    }, {
      "left" : "if (entitlementsPList != null)",
      "right" : "if (entitlementsPList != null)",
      "info" : "IfStatement[18291-18606]:IfStatement[18378-18693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18322-18420]:Block[18409-18507]"
    }, {
      "left" : "dict = (NSDictionary) PropertyListParser.parse(entitlementsPList);",
      "right" : "dict = (NSDictionary) PropertyListParser.parse(entitlementsPList);",
      "info" : "ExpressionStatement[18340-18406]:ExpressionStatement[18427-18493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18426-18606]:Block[18513-18693]"
    }, {
      "left" : "dict = (NSDictionary) PropertyListParser.parse(IOUtils.toByteArray(getClass().getResourceAsStream(\n                        \"/Entitlements.plist\")));",
      "right" : "dict = (NSDictionary) PropertyListParser.parse(IOUtils.toByteArray(getClass().getResourceAsStream(\n                        \"/Entitlements.plist\")));",
      "info" : "ExpressionStatement[18444-18592]:ExpressionStatement[18531-18679]"
    }, {
      "left" : "if (provisioningProfile != null)",
      "right" : "if (provisioningProfile != null)",
      "info" : "IfStatement[18619-19112]:IfStatement[18706-19199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18652-19112]:Block[18739-19199]"
    }, {
      "left" : "NSDictionary profileEntitlements = provisioningProfile.getEntitlements();",
      "right" : "NSDictionary profileEntitlements = provisioningProfile.getEntitlements();",
      "info" : "VariableDeclarationStatement[18670-18743]:VariableDeclarationStatement[18757-18830]"
    }, {
      "left" : "for (String key : profileEntitlements.allKeys())",
      "right" : "for (String key : profileEntitlements.allKeys())",
      "info" : "EnhancedForStatement[18760-18986]:EnhancedForStatement[18847-19073]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18809-18986]:Block[18896-19073]"
    }, {
      "left" : "if (dict.objectForKey(key) == null)",
      "right" : "if (dict.objectForKey(key) == null)",
      "info" : "IfStatement[18831-18968]:IfStatement[18918-19055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18867-18968]:Block[18954-19055]"
    }, {
      "left" : "dict.put(key, profileEntitlements.objectForKey(key));",
      "right" : "dict.put(key, profileEntitlements.objectForKey(key));",
      "info" : "ExpressionStatement[18893-18946]:ExpressionStatement[18980-19033]"
    }, {
      "left" : "dict.put(\"application-identifier\", provisioningProfile.getAppIdPrefix() + \".\" + getBundleId());",
      "right" : "dict.put(\"application-identifier\", provisioningProfile.getAppIdPrefix() + \".\" + getBundleId());",
      "info" : "ExpressionStatement[19003-19098]:ExpressionStatement[19090-19185]"
    }, {
      "left" : "dict.put(\"get-task-allow\", getTaskAllow);",
      "right" : "dict.put(\"get-task-allow\", getTaskAllow);",
      "info" : "ExpressionStatement[19125-19166]:ExpressionStatement[19212-19253]"
    }, {
      "left" : "PropertyListParser.saveAsXML(dict, destFile);",
      "right" : "PropertyListParser.saveAsXML(dict, destFile);",
      "info" : "ExpressionStatement[19179-19224]:ExpressionStatement[19266-19311]"
    }, {
      "left" : "return destFile;",
      "right" : "return destFile;",
      "info" : "ReturnStatement[19237-19253]:ReturnStatement[19324-19340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19286-19318]:Block[19373-19405]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[19300-19308]:ThrowStatement[19387-19395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19339-19393]:Block[19426-19480]"
    }, {
      "left" : "throw new RuntimeException(e);",
      "right" : "throw new RuntimeException(e);",
      "info" : "ThrowStatement[19353-19383]:ThrowStatement[19440-19470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19517-20268]:Block[19604-20355]"
    }, {
      "left" : "final File dsymDir = new File(dir.getParentFile(), dir.getName() + \".dSYM\");",
      "right" : "final File dsymDir = new File(dir.getParentFile(), dir.getName() + \".dSYM\");",
      "info" : "VariableDeclarationStatement[19527-19603]:VariableDeclarationStatement[19614-19690]"
    }, {
      "left" : "final File exePath = new File(dir, executable);",
      "right" : "final File exePath = new File(dir, executable);",
      "info" : "VariableDeclarationStatement[19612-19659]:VariableDeclarationStatement[19699-19746]"
    }, {
      "left" : "FileUtils.deleteDirectory(dsymDir);",
      "right" : "FileUtils.deleteDirectory(dsymDir);",
      "info" : "ExpressionStatement[19668-19703]:ExpressionStatement[19755-19790]"
    }, {
      "left" : "final Process process = new Executor(config.getLogger(), \"xcrun\")\n                .args(\"dsymutil\", \"-o\", dsymDir, exePath)\n                .execAsync();",
      "right" : "final Process process = new Executor(config.getLogger(), \"xcrun\")\n                .args(\"dsymutil\", \"-o\", dsymDir, exePath)\n                .execAsync();",
      "info" : "VariableDeclarationStatement[19712-19865]:VariableDeclarationStatement[19799-19952]"
    }, {
      "left" : "if (copyToIndexedDir)",
      "right" : "if (copyToIndexedDir)",
      "info" : "IfStatement[19874-20262]:IfStatement[19961-20349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19896-20262]:Block[19983-20349]"
    }, {
      "left" : "new Thread() {\n                public void run() {\n                    try {\n                        process.waitFor();\n                    } catch (InterruptedException e) {\n                        return;\n                    }\n                    copyToIndexedDir(dir, executable, dsymDir, exePath);\n                }\n            }.start();",
      "right" : "new Thread() {\n                public void run() {\n                    try {\n                        process.waitFor();\n                    } catch (InterruptedException e) {\n                        return;\n                    }\n                    copyToIndexedDir(dir, executable, dsymDir, exePath);\n                }\n            }.start();",
      "info" : "ExpressionStatement[19910-20252]:ExpressionStatement[19997-20339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19959-20229]:Block[20046-20316]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19981-20138]:TryStatement[20068-20225]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19985-20051]:Block[20072-20138]"
    }, {
      "left" : "process.waitFor();",
      "right" : "process.waitFor();",
      "info" : "ExpressionStatement[20011-20029]:ExpressionStatement[20098-20116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20083-20138]:Block[20170-20225]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[20109-20116]:ReturnStatement[20196-20203]"
    }, {
      "left" : "copyToIndexedDir(dir, executable, dsymDir, exePath);",
      "right" : "copyToIndexedDir(dir, executable, dsymDir, exePath);",
      "info" : "ExpressionStatement[20159-20211]:ExpressionStatement[20246-20298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20341-20487]:Block[20428-20574]"
    }, {
      "left" : "new Executor(config.getLogger(), \"xcrun\")\n                .args(\"strip\", \"-x\", new File(dir, executable))\n                .exec();",
      "right" : "new Executor(config.getLogger(), \"xcrun\")\n                .args(\"strip\", \"-x\", new File(dir, executable))\n                .exec();",
      "info" : "ExpressionStatement[20351-20481]:ExpressionStatement[20438-20568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20587-20684]:Block[20674-20771]"
    }, {
      "left" : "super.doInstall(installDir, getExecutable());",
      "right" : "super.doInstall(installDir, getExecutable());",
      "info" : "ExpressionStatement[20597-20642]:ExpressionStatement[20684-20729]"
    }, {
      "left" : "prepareInstall(installDir);",
      "right" : "prepareInstall(installDir);",
      "info" : "ExpressionStatement[20651-20678]:ExpressionStatement[20738-20765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20785-21336]:Block[20872-21423]"
    }, {
      "left" : "prepareLaunch(getAppDir());",
      "right" : "prepareLaunch(getAppDir());",
      "info" : "ExpressionStatement[20795-20822]:ExpressionStatement[20882-20909]"
    }, {
      "left" : "Process process = super.doLaunch(launchParameters);",
      "right" : "Process process = super.doLaunch(launchParameters);",
      "info" : "VariableDeclarationStatement[20831-20882]:VariableDeclarationStatement[20918-20969]"
    }, {
      "left" : "if (launchParameters instanceof IOSSimulatorLaunchParameters)",
      "right" : "if (launchParameters instanceof IOSSimulatorLaunchParameters)",
      "info" : "IfStatement[20891-21306]:IfStatement[20978-21393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20953-21306]:Block[21040-21393]"
    }, {
      "left" : "File script = File.createTempFile(\"BISTF\", \".scpt\");",
      "right" : "File script = File.createTempFile(\"BISTF\", \".scpt\");",
      "info" : "VariableDeclarationStatement[20967-21019]:VariableDeclarationStatement[21054-21106]"
    }, {
      "left" : "FileUtils.copyURLToFile(getClass().getResource(\"/BringIOSSimulatorToFront.scpt\"), script);",
      "right" : "FileUtils.copyURLToFile(getClass().getResource(\"/BringIOSSimulatorToFront.scpt\"), script);",
      "info" : "ExpressionStatement[21032-21122]:ExpressionStatement[21119-21209]"
    }, {
      "left" : "new Executor(config.getHome().isDev() ? config.getLogger() : Logger.NULL_LOGGER, \"osascript\")\n                    .args(script)\n                    .execAsync();",
      "right" : "new Executor(config.getHome().isDev() ? config.getLogger() : Logger.NULL_LOGGER, \"osascript\")\n                    .args(script)\n                    .execAsync();",
      "info" : "ExpressionStatement[21135-21296]:ExpressionStatement[21222-21383]"
    }, {
      "left" : "return process;",
      "right" : "return process;",
      "info" : "ReturnStatement[21315-21330]:ReturnStatement[21402-21417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21402-22482]:Block[21489-22569]"
    }, {
      "left" : "config.getLogger().debug(\"Creating IPA in %s\", config.getInstallDir());",
      "right" : "config.getLogger().debug(\"Creating IPA in %s\", config.getInstallDir());",
      "info" : "ExpressionStatement[21412-21483]:ExpressionStatement[21499-21570]"
    }, {
      "left" : "config.getInstallDir().mkdirs();",
      "right" : "config.getInstallDir().mkdirs();",
      "info" : "ExpressionStatement[21492-21524]:ExpressionStatement[21579-21611]"
    }, {
      "left" : "if (slices.size() > 1)",
      "right" : "if (slices.size() > 1)",
      "info" : "IfStatement[21533-21860]:IfStatement[21620-21947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21556-21662]:Block[21643-21749]"
    }, {
      "left" : "ToolchainUtil.lipo(config, new File(config.getTmpDir(), getExecutable()), slices);",
      "right" : "ToolchainUtil.lipo(config, new File(config.getTmpDir(), getExecutable()), slices);",
      "info" : "ExpressionStatement[21570-21652]:ExpressionStatement[21657-21739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21668-21860]:Block[21755-21947]"
    }, {
      "left" : "File destFile = new File(config.getTmpDir(), getExecutable());",
      "right" : "File destFile = new File(config.getTmpDir(), getExecutable());",
      "info" : "VariableDeclarationStatement[21682-21744]:VariableDeclarationStatement[21769-21831]"
    }, {
      "left" : "FileUtils.copyFile(slices.get(0), destFile);",
      "right" : "FileUtils.copyFile(slices.get(0), destFile);",
      "info" : "ExpressionStatement[21757-21801]:ExpressionStatement[21844-21888]"
    }, {
      "left" : "destFile.setExecutable(true, false);",
      "right" : "destFile.setExecutable(true, false);",
      "info" : "ExpressionStatement[21814-21850]:ExpressionStatement[21901-21937]"
    }, {
      "left" : "File exportedSymbolsFile = new File(slices.get(0).getParentFile(), \"exported_symbols\");",
      "right" : "File exportedSymbolsFile = new File(slices.get(0).getParentFile(), \"exported_symbols\");",
      "info" : "VariableDeclarationStatement[21939-22026]:VariableDeclarationStatement[22026-22113]"
    }, {
      "left" : "FileUtils.copyFile(exportedSymbolsFile, new File(config.getTmpDir(), \"exported_symbols\"));",
      "right" : "FileUtils.copyFile(exportedSymbolsFile, new File(config.getTmpDir(), \"exported_symbols\"));",
      "info" : "ExpressionStatement[22035-22125]:ExpressionStatement[22122-22212]"
    }, {
      "left" : "File tmpDir = new File(config.getInstallDir(), getExecutable() + \".app\");",
      "right" : "File tmpDir = new File(config.getInstallDir(), getExecutable() + \".app\");",
      "info" : "VariableDeclarationStatement[22135-22208]:VariableDeclarationStatement[22222-22295]"
    }, {
      "left" : "FileUtils.deleteDirectory(tmpDir);",
      "right" : "FileUtils.deleteDirectory(tmpDir);",
      "info" : "ExpressionStatement[22217-22251]:ExpressionStatement[22304-22338]"
    }, {
      "left" : "tmpDir.mkdirs();",
      "right" : "tmpDir.mkdirs();",
      "info" : "ExpressionStatement[22260-22276]:ExpressionStatement[22347-22363]"
    }, {
      "left" : "super.doInstall(tmpDir, getExecutable());",
      "right" : "super.doInstall(tmpDir, getExecutable());",
      "info" : "ExpressionStatement[22285-22326]:ExpressionStatement[22372-22413]"
    }, {
      "left" : "prepareInstall(tmpDir);",
      "right" : "prepareInstall(tmpDir);",
      "info" : "ExpressionStatement[22335-22358]:ExpressionStatement[22422-22445]"
    }, {
      "left" : "ToolchainUtil.packageApplication(config, tmpDir, new File(config.getInstallDir(), getExecutable() + \".ipa\"));",
      "right" : "ToolchainUtil.packageApplication(config, tmpDir, new File(config.getInstallDir(), getExecutable() + \".ipa\"));",
      "info" : "ExpressionStatement[22367-22476]:ExpressionStatement[22454-22563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22593-23011]:Block[22680-23098]"
    }, {
      "left" : "if (dir.getName().endsWith(\".atlas\"))",
      "right" : "if (dir.getName().endsWith(\".atlas\"))",
      "info" : "IfStatement[22603-22948]:IfStatement[22690-23035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22641-22771]:Block[22728-22858]"
    }, {
      "left" : "destDir.mkdirs();",
      "right" : "destDir.mkdirs();",
      "info" : "ExpressionStatement[22655-22672]:ExpressionStatement[22742-22759]"
    }, {
      "left" : "ToolchainUtil.textureatlas(config, dir, destDir);",
      "right" : "ToolchainUtil.textureatlas(config, dir, destDir);",
      "info" : "ExpressionStatement[22686-22735]:ExpressionStatement[22773-22822]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22748-22761]:ReturnStatement[22835-22848]"
    }, {
      "left" : "if (dir.getName().endsWith(\".xcassets\"))",
      "right" : "if (dir.getName().endsWith(\".xcassets\"))",
      "info" : "IfStatement[22777-22948]:IfStatement[22864-23035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22818-22948]:Block[22905-23035]"
    }, {
      "left" : "ToolchainUtil.actool(config, createPartialInfoPlistFile(dir), dir, getAppDir());",
      "right" : "ToolchainUtil.actool(config, createPartialInfoPlistFile(dir), dir, getAppDir());",
      "info" : "ExpressionStatement[22832-22912]:ExpressionStatement[22919-22999]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22925-22938]:ReturnStatement[23012-23025]"
    }, {
      "left" : "return super.processDir(resource, dir, destDir);",
      "right" : "return super.processDir(resource, dir, destDir);",
      "info" : "ReturnStatement[22957-23005]:ReturnStatement[23044-23092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23130-24296]:Block[23217-24383]"
    }, {
      "left" : "if (isDeviceArch(arch) && !resource.isSkipPngCrush()\n                && file.getName().toLowerCase().endsWith(\".png\"))",
      "right" : "if (isDeviceArch(arch) && !resource.isSkipPngCrush()\n                && file.getName().toLowerCase().endsWith(\".png\"))",
      "info" : "IfStatement[23141-24290]:IfStatement[23228-24377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23260-23422]:Block[23347-23509]"
    }, {
      "left" : "destDir.mkdirs();",
      "right" : "destDir.mkdirs();",
      "info" : "ExpressionStatement[23274-23291]:ExpressionStatement[23361-23378]"
    }, {
      "left" : "File outFile = new File(destDir, file.getName());",
      "right" : "File outFile = new File(destDir, file.getName());",
      "info" : "VariableDeclarationStatement[23304-23353]:VariableDeclarationStatement[23391-23440]"
    }, {
      "left" : "ToolchainUtil.pngcrush(config, file, outFile);",
      "right" : "ToolchainUtil.pngcrush(config, file, outFile);",
      "info" : "ExpressionStatement[23366-23412]:ExpressionStatement[23453-23499]"
    }, {
      "left" : "if (file.getName().toLowerCase().endsWith(\".strings\"))",
      "right" : "if (file.getName().toLowerCase().endsWith(\".strings\"))",
      "info" : "IfStatement[23428-24290]:IfStatement[23515-24377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23483-23651]:Block[23570-23738]"
    }, {
      "left" : "destDir.mkdirs();",
      "right" : "destDir.mkdirs();",
      "info" : "ExpressionStatement[23497-23514]:ExpressionStatement[23584-23601]"
    }, {
      "left" : "File outFile = new File(destDir, file.getName());",
      "right" : "File outFile = new File(destDir, file.getName());",
      "info" : "VariableDeclarationStatement[23527-23576]:VariableDeclarationStatement[23614-23663]"
    }, {
      "left" : "ToolchainUtil.compileStrings(config, file, outFile);",
      "right" : "ToolchainUtil.compileStrings(config, file, outFile);",
      "info" : "ExpressionStatement[23589-23641]:ExpressionStatement[23676-23728]"
    }, {
      "left" : "if (file.getName().toLowerCase().endsWith(\".storyboard\"))",
      "right" : "if (file.getName().toLowerCase().endsWith(\".storyboard\"))",
      "info" : "IfStatement[23657-24290]:IfStatement[23744-24377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23715-23847]:Block[23802-23934]"
    }, {
      "left" : "destDir.mkdirs();",
      "right" : "destDir.mkdirs();",
      "info" : "ExpressionStatement[23729-23746]:ExpressionStatement[23816-23833]"
    }, {
      "left" : "ToolchainUtil.ibtool(config, createPartialInfoPlistFile(file), file, destDir);",
      "right" : "ToolchainUtil.ibtool(config, createPartialInfoPlistFile(file), file, destDir);",
      "info" : "ExpressionStatement[23759-23837]:ExpressionStatement[23846-23924]"
    }, {
      "left" : "if (file.getName().toLowerCase().endsWith(\".xib\"))",
      "right" : "if (file.getName().toLowerCase().endsWith(\".xib\"))",
      "info" : "IfStatement[23853-24290]:IfStatement[23940-24377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23904-24220]:Block[23991-24307]"
    }, {
      "left" : "destDir.mkdirs();",
      "right" : "destDir.mkdirs();",
      "info" : "ExpressionStatement[23918-23935]:ExpressionStatement[24005-24022]"
    }, {
      "left" : "String fileName = file.getName();",
      "right" : "String fileName = file.getName();",
      "info" : "VariableDeclarationStatement[23948-23981]:VariableDeclarationStatement[24035-24068]"
    }, {
      "left" : "fileName = fileName.substring(0, fileName.lastIndexOf('.')) + \".nib\";",
      "right" : "fileName = fileName.substring(0, fileName.lastIndexOf('.')) + \".nib\";",
      "info" : "ExpressionStatement[23994-24063]:ExpressionStatement[24081-24150]"
    }, {
      "left" : "File outFile = new File(destDir, fileName);",
      "right" : "File outFile = new File(destDir, fileName);",
      "info" : "VariableDeclarationStatement[24076-24119]:VariableDeclarationStatement[24163-24206]"
    }, {
      "left" : "ToolchainUtil.ibtool(config, createPartialInfoPlistFile(file), file, outFile);",
      "right" : "ToolchainUtil.ibtool(config, createPartialInfoPlistFile(file), file, outFile);",
      "info" : "ExpressionStatement[24132-24210]:ExpressionStatement[24219-24297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24226-24290]:Block[24313-24377]"
    }, {
      "left" : "super.copyFile(resource, file, destDir);",
      "right" : "super.copyFile(resource, file, destDir);",
      "info" : "ExpressionStatement[24240-24280]:ExpressionStatement[24327-24367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24369-24516]:Block[24456-24603]"
    }, {
      "left" : "File tmpFile = File.createTempFile(f.getName() + \"_\", \".plist\", partialPListDir);",
      "right" : "File tmpFile = File.createTempFile(f.getName() + \"_\", \".plist\", partialPListDir);",
      "info" : "VariableDeclarationStatement[24379-24460]:VariableDeclarationStatement[24466-24547]"
    }, {
      "left" : "tmpFile.delete();",
      "right" : "tmpFile.delete();",
      "info" : "ExpressionStatement[24469-24486]:ExpressionStatement[24556-24573]"
    }, {
      "left" : "return tmpFile;",
      "right" : "return tmpFile;",
      "info" : "ReturnStatement[24495-24510]:ReturnStatement[24582-24597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24549-24938]:Block[24636-25025]"
    }, {
      "left" : "File dir = null;",
      "right" : "File dir = null;",
      "info" : "VariableDeclarationStatement[24559-24575]:VariableDeclarationStatement[24646-24662]"
    }, {
      "left" : "if (!config.isSkipInstall())",
      "right" : "if (!config.isSkipInstall())",
      "info" : "IfStatement[24584-24912]:IfStatement[24671-24999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24613-24795]:Block[24700-24882]"
    }, {
      "left" : "dir = new File(config.getInstallDir(), getExecutable() + \".app\");",
      "right" : "dir = new File(config.getInstallDir(), getExecutable() + \".app\");",
      "info" : "ExpressionStatement[24627-24692]:ExpressionStatement[24714-24779]"
    }, {
      "left" : "if (!dir.exists())",
      "right" : "if (!dir.exists())",
      "info" : "IfStatement[24705-24785]:IfStatement[24792-24872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24724-24785]:Block[24811-24872]"
    }, {
      "left" : "dir = config.getInstallDir();",
      "right" : "dir = config.getInstallDir();",
      "info" : "ExpressionStatement[24742-24771]:ExpressionStatement[24829-24858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24801-24912]:Block[24888-24999]"
    }, {
      "left" : "dir = new File(config.getTmpDir(), getExecutable() + \".app\");",
      "right" : "dir = new File(config.getTmpDir(), getExecutable() + \".app\");",
      "info" : "ExpressionStatement[24815-24876]:ExpressionStatement[24902-24963]"
    }, {
      "left" : "dir.mkdirs();",
      "right" : "dir.mkdirs();",
      "info" : "ExpressionStatement[24889-24902]:ExpressionStatement[24976-24989]"
    }, {
      "left" : "return dir;",
      "right" : "return dir;",
      "info" : "ReturnStatement[24921-24932]:ReturnStatement[25008-25019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24977-25270]:Block[25064-25357]"
    }, {
      "left" : "if (config.getIosInfoPList() != null)",
      "right" : "if (config.getIosInfoPList() != null)",
      "info" : "IfStatement[24987-25221]:IfStatement[25074-25308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25025-25221]:Block[25112-25308]"
    }, {
      "left" : "String bundleExecutable = config.getIosInfoPList().getBundleExecutable();",
      "right" : "String bundleExecutable = config.getIosInfoPList().getBundleExecutable();",
      "info" : "VariableDeclarationStatement[25039-25112]:VariableDeclarationStatement[25126-25199]"
    }, {
      "left" : "if (bundleExecutable != null)",
      "right" : "if (bundleExecutable != null)",
      "info" : "IfStatement[25125-25211]:IfStatement[25212-25298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25155-25211]:Block[25242-25298]"
    }, {
      "left" : "return bundleExecutable;",
      "right" : "return bundleExecutable;",
      "info" : "ReturnStatement[25173-25197]:ReturnStatement[25260-25284]"
    }, {
      "left" : "return config.getExecutableName();",
      "right" : "return config.getExecutableName();",
      "info" : "ReturnStatement[25230-25264]:ReturnStatement[25317-25351]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25307-25656]:Block[25394-25743]"
    }, {
      "left" : "if (config.getIosInfoPList() != null)",
      "right" : "if (config.getIosInfoPList() != null)",
      "info" : "IfStatement[25317-25551]:IfStatement[25404-25638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25355-25551]:Block[25442-25638]"
    }, {
      "left" : "String bundleIdentifier = config.getIosInfoPList().getBundleIdentifier();",
      "right" : "String bundleIdentifier = config.getIosInfoPList().getBundleIdentifier();",
      "info" : "VariableDeclarationStatement[25369-25442]:VariableDeclarationStatement[25456-25529]"
    }, {
      "left" : "if (bundleIdentifier != null)",
      "right" : "if (bundleIdentifier != null)",
      "info" : "IfStatement[25455-25541]:IfStatement[25542-25628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25485-25541]:Block[25572-25628]"
    }, {
      "left" : "return bundleIdentifier;",
      "right" : "return bundleIdentifier;",
      "info" : "ReturnStatement[25503-25527]:ReturnStatement[25590-25614]"
    }, {
      "left" : "return config.getMainClass() != null ? config.getMainClass() : config.getExecutableName();",
      "right" : "return config.getMainClass() != null ? config.getMainClass() : config.getExecutableName();",
      "info" : "ReturnStatement[25560-25650]:ReturnStatement[25647-25737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25701-25980]:Block[25788-26067]"
    }, {
      "left" : "if (config.getIosInfoPList() != null)",
      "right" : "if (config.getIosInfoPList() != null)",
      "info" : "IfStatement[25711-25927]:IfStatement[25798-26014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25749-25927]:Block[25836-26014]"
    }, {
      "left" : "String minVersion = config.getIosInfoPList().getMinimumOSVersion();",
      "right" : "String minVersion = config.getIosInfoPList().getMinimumOSVersion();",
      "info" : "VariableDeclarationStatement[25763-25830]:VariableDeclarationStatement[25850-25917]"
    }, {
      "left" : "if (minVersion != null)",
      "right" : "if (minVersion != null)",
      "info" : "IfStatement[25843-25917]:IfStatement[25930-26004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25867-25917]:Block[25954-26004]"
    }, {
      "left" : "return minVersion;",
      "right" : "return minVersion;",
      "info" : "ReturnStatement[25885-25903]:ReturnStatement[25972-25990]"
    }, {
      "left" : "return config.getOs().getMinVersion();",
      "right" : "return config.getOs().getMinVersion();",
      "info" : "ReturnStatement[25936-25974]:ReturnStatement[26023-26061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26056-26153]:Block[26143-26240]"
    }, {
      "left" : "if (dict.objectForKey(key) == null)",
      "right" : "if (dict.objectForKey(key) == null)",
      "info" : "IfStatement[26066-26147]:IfStatement[26153-26234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26102-26147]:Block[26189-26234]"
    }, {
      "left" : "dict.put(key, value);",
      "right" : "dict.put(key, value);",
      "info" : "ExpressionStatement[26116-26137]:ExpressionStatement[26203-26224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26216-28521]:Block[26303-28608]"
    }, {
      "left" : "if (isSimulatorArch(arch))",
      "right" : "if (isSimulatorArch(arch))",
      "info" : "IfStatement[26226-28515]:IfStatement[26313-28602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26253-26362]:Block[26340-26449]"
    }, {
      "left" : "dict.put(\"CFBundleSupportedPlatforms\", new NSArray(new NSString(\"iPhoneSimulator\")));",
      "right" : "dict.put(\"CFBundleSupportedPlatforms\", new NSArray(new NSString(\"iPhoneSimulator\")));",
      "info" : "ExpressionStatement[26267-26352]:ExpressionStatement[26354-26439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26368-28515]:Block[26455-28602]"
    }, {
      "left" : "dict.put(\"CFBundleResourceSpecification\", \"ResourceRules.plist\");",
      "right" : "dict.put(\"CFBundleResourceSpecification\", \"ResourceRules.plist\");",
      "info" : "ExpressionStatement[26382-26447]:ExpressionStatement[26469-26534]"
    }, {
      "left" : "dict.put(\"CFBundleSupportedPlatforms\", new NSArray(new NSString(\"iPhoneOS\")));",
      "right" : "dict.put(\"CFBundleSupportedPlatforms\", new NSArray(new NSString(\"iPhoneOS\")));",
      "info" : "ExpressionStatement[26460-26538]:ExpressionStatement[26547-26625]"
    }, {
      "left" : "dict.put(\"DTPlatformVersion\", sdk.getPlatformVersion());",
      "right" : "dict.put(\"DTPlatformVersion\", sdk.getPlatformVersion());",
      "info" : "ExpressionStatement[26551-26607]:ExpressionStatement[26638-26694]"
    }, {
      "left" : "dict.put(\"DTPlatformBuild\", sdk.getPlatformBuild());",
      "right" : "dict.put(\"DTPlatformBuild\", sdk.getPlatformBuild());",
      "info" : "ExpressionStatement[26620-26672]:ExpressionStatement[26707-26759]"
    }, {
      "left" : "dict.put(\"DTSDKBuild\", sdk.getBuild());",
      "right" : "dict.put(\"DTSDKBuild\", sdk.getBuild());",
      "info" : "ExpressionStatement[26685-26724]:ExpressionStatement[26772-26811]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26862-28338]:TryStatement[26949-28425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26866-28066]:Block[26953-28153]"
    }, {
      "left" : "File versionPListFile = new File(new File(ToolchainUtil.findXcodePath()).getParentFile(),\n                        \"version.plist\");",
      "right" : "File versionPListFile = new File(new File(ToolchainUtil.findXcodePath()).getParentFile(),\n                        \"version.plist\");",
      "info" : "VariableDeclarationStatement[26884-27015]:VariableDeclarationStatement[26971-27102]"
    }, {
      "left" : "NSDictionary versionPList = (NSDictionary) PropertyListParser.parse(versionPListFile);",
      "right" : "NSDictionary versionPList = (NSDictionary) PropertyListParser.parse(versionPListFile);",
      "info" : "VariableDeclarationStatement[27032-27118]:VariableDeclarationStatement[27119-27205]"
    }, {
      "left" : "File xcodeInfoPListFile = new File(new File(ToolchainUtil.findXcodePath()).getParentFile(),\n                        \"Info.plist\");",
      "right" : "File xcodeInfoPListFile = new File(new File(ToolchainUtil.findXcodePath()).getParentFile(),\n                        \"Info.plist\");",
      "info" : "VariableDeclarationStatement[27135-27265]:VariableDeclarationStatement[27222-27352]"
    }, {
      "left" : "NSDictionary xcodeInfoPList = (NSDictionary) PropertyListParser.parse(xcodeInfoPListFile);",
      "right" : "NSDictionary xcodeInfoPList = (NSDictionary) PropertyListParser.parse(xcodeInfoPListFile);",
      "info" : "VariableDeclarationStatement[27282-27372]:VariableDeclarationStatement[27369-27459]"
    }, {
      "left" : "NSString dtXcodeBuild = (NSString) versionPList.objectForKey(\"ProductBuildVersion\");",
      "right" : "NSString dtXcodeBuild = (NSString) versionPList.objectForKey(\"ProductBuildVersion\");",
      "info" : "VariableDeclarationStatement[27389-27473]:VariableDeclarationStatement[27476-27560]"
    }, {
      "left" : "if (dtXcodeBuild == null)",
      "right" : "if (dtXcodeBuild == null)",
      "info" : "IfStatement[27490-27656]:IfStatement[27577-27743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27516-27656]:Block[27603-27743]"
    }, {
      "left" : "throw new NoSuchElementException(\"No ProductBuildVersion in \" + versionPListFile.getAbsolutePath());",
      "right" : "throw new NoSuchElementException(\"No ProductBuildVersion in \" + versionPListFile.getAbsolutePath());",
      "info" : "ThrowStatement[27538-27638]:ThrowStatement[27625-27725]"
    }, {
      "left" : "NSString dtXcode = (NSString) xcodeInfoPList.objectForKey(\"DTXcode\");",
      "right" : "NSString dtXcode = (NSString) xcodeInfoPList.objectForKey(\"DTXcode\");",
      "info" : "VariableDeclarationStatement[27673-27742]:VariableDeclarationStatement[27760-27829]"
    }, {
      "left" : "if (dtXcode == null)",
      "right" : "if (dtXcode == null)",
      "info" : "IfStatement[27759-27910]:IfStatement[27846-27997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27780-27910]:Block[27867-27997]"
    }, {
      "left" : "throw new NoSuchElementException(\"No DTXcode in \" + xcodeInfoPListFile.getAbsolutePath());",
      "right" : "throw new NoSuchElementException(\"No DTXcode in \" + xcodeInfoPListFile.getAbsolutePath());",
      "info" : "ThrowStatement[27802-27892]:ThrowStatement[27889-27979]"
    }, {
      "left" : "putIfAbsent(dict, \"DTXcode\", dtXcode.toString());",
      "right" : "putIfAbsent(dict, \"DTXcode\", dtXcode.toString());",
      "info" : "ExpressionStatement[27927-27976]:ExpressionStatement[28014-28063]"
    }, {
      "left" : "putIfAbsent(dict, \"DTXcodeBuild\", dtXcodeBuild.toString());",
      "right" : "putIfAbsent(dict, \"DTXcodeBuild\", dtXcodeBuild.toString());",
      "info" : "ExpressionStatement[27993-28052]:ExpressionStatement[28080-28139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28087-28338]:Block[28174-28425]"
    }, {
      "left" : "config.getLogger()\n                        .warn(\"Failed to read DTXcodeBuild/DTXcode from current Xcode install. Will use fake values. (%s: %s)\",\n                                e.getClass().getName(), e.getMessage());",
      "right" : "config.getLogger()\n                        .warn(\"Failed to read DTXcodeBuild/DTXcode from current Xcode install. Will use fake values. (%s: %s)\",\n                                e.getClass().getName(), e.getMessage());",
      "info" : "ExpressionStatement[28105-28324]:ExpressionStatement[28192-28411]"
    }, {
      "left" : "putIfAbsent(dict, \"DTXcode\", \"0611\");",
      "right" : "putIfAbsent(dict, \"DTXcode\", \"0611\");",
      "info" : "ExpressionStatement[28410-28447]:ExpressionStatement[28497-28534]"
    }, {
      "left" : "putIfAbsent(dict, \"DTXcodeBuild\", \"6A2008a\");",
      "right" : "putIfAbsent(dict, \"DTXcodeBuild\", \"6A2008a\");",
      "info" : "ExpressionStatement[28460-28505]:ExpressionStatement[28547-28592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28587-33412]:Block[28674-33499]"
    }, {
      "left" : "NSDictionary dict = new NSDictionary();",
      "right" : "NSDictionary dict = new NSDictionary();",
      "info" : "VariableDeclarationStatement[28597-28636]:VariableDeclarationStatement[28684-28723]"
    }, {
      "left" : "if (config.getIosInfoPList() != null && config.getIosInfoPList().getDictionary() != null)",
      "right" : "if (config.getIosInfoPList() != null && config.getIosInfoPList().getDictionary() != null)",
      "info" : "IfStatement[28645-31492]:IfStatement[28732-31579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28735-28964]:Block[28822-29051]"
    }, {
      "left" : "NSDictionary infoPListDict = config.getIosInfoPList().getDictionary();",
      "right" : "NSDictionary infoPListDict = config.getIosInfoPList().getDictionary();",
      "info" : "VariableDeclarationStatement[28749-28819]:VariableDeclarationStatement[28836-28906]"
    }, {
      "left" : "for (String key : infoPListDict.allKeys())",
      "right" : "for (String key : infoPListDict.allKeys())",
      "info" : "EnhancedForStatement[28832-28954]:EnhancedForStatement[28919-29041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28875-28954]:Block[28962-29041]"
    }, {
      "left" : "dict.put(key, infoPListDict.objectForKey(key));",
      "right" : "dict.put(key, infoPListDict.objectForKey(key));",
      "info" : "ExpressionStatement[28893-28940]:ExpressionStatement[28980-29027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28970-31492]:Block[29057-31579]"
    }, {
      "left" : "dict.put(\"CFBundleVersion\", \"1.0\");",
      "right" : "dict.put(\"CFBundleVersion\", \"1.0\");",
      "info" : "ExpressionStatement[28984-29019]:ExpressionStatement[29071-29106]"
    }, {
      "left" : "dict.put(\"CFBundleExecutable\", config.getExecutableName());",
      "right" : "dict.put(\"CFBundleExecutable\", config.getExecutableName());",
      "info" : "ExpressionStatement[29032-29091]:ExpressionStatement[29119-29178]"
    }, {
      "left" : "dict.put(\"CFBundleName\", config.getExecutableName());",
      "right" : "dict.put(\"CFBundleName\", config.getExecutableName());",
      "info" : "ExpressionStatement[29104-29157]:ExpressionStatement[29191-29244]"
    }, {
      "left" : "dict.put(\"CFBundleIdentifier\", getBundleId());",
      "right" : "dict.put(\"CFBundleIdentifier\", getBundleId());",
      "info" : "ExpressionStatement[29170-29216]:ExpressionStatement[29257-29303]"
    }, {
      "left" : "dict.put(\"CFBundlePackageType\", \"APPL\");",
      "right" : "dict.put(\"CFBundlePackageType\", \"APPL\");",
      "info" : "ExpressionStatement[29229-29269]:ExpressionStatement[29316-29356]"
    }, {
      "left" : "dict.put(\"LSRequiresIPhoneOS\", true);",
      "right" : "dict.put(\"LSRequiresIPhoneOS\", true);",
      "info" : "ExpressionStatement[29282-29319]:ExpressionStatement[29369-29406]"
    }, {
      "left" : "NSObject supportedDeviceFamilies = sdk.getDefaultProperty(\"SUPPORTED_DEVICE_FAMILIES\");",
      "right" : "NSObject supportedDeviceFamilies = sdk.getDefaultProperty(\"SUPPORTED_DEVICE_FAMILIES\");",
      "info" : "VariableDeclarationStatement[29332-29419]:VariableDeclarationStatement[29419-29506]"
    }, {
      "left" : "if (supportedDeviceFamilies != null)",
      "right" : "if (supportedDeviceFamilies != null)",
      "info" : "IfStatement[29432-30615]:IfStatement[29519-30702]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29469-30615]:Block[29556-30702]"
    }, {
      "left" : "NSArray families = null;",
      "right" : "NSArray families = null;",
      "info" : "VariableDeclarationStatement[29710-29734]:VariableDeclarationStatement[29797-29821]"
    }, {
      "left" : "if (supportedDeviceFamilies instanceof NSString)",
      "right" : "if (supportedDeviceFamilies instanceof NSString)",
      "info" : "IfStatement[29751-30547]:IfStatement[29838-30634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29800-30192]:Block[29887-30279]"
    }, {
      "left" : "NSString defFamilies = (NSString) supportedDeviceFamilies;",
      "right" : "NSString defFamilies = (NSString) supportedDeviceFamilies;",
      "info" : "VariableDeclarationStatement[29822-29880]:VariableDeclarationStatement[29909-29967]"
    }, {
      "left" : "String[] parts = defFamilies.toString().split(\",\");",
      "right" : "String[] parts = defFamilies.toString().split(\",\");",
      "info" : "VariableDeclarationStatement[29901-29952]:VariableDeclarationStatement[29988-30039]"
    }, {
      "left" : "families = new NSArray(parts.length);",
      "right" : "families = new NSArray(parts.length);",
      "info" : "ExpressionStatement[29973-30010]:ExpressionStatement[30060-30097]"
    }, {
      "left" : "for (int i = 0; i < families.count(); i++)",
      "right" : "for (int i = 0; i < families.count(); i++)",
      "info" : "ForStatement[30031-30174]:ForStatement[30118-30261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30074-30174]:Block[30161-30261]"
    }, {
      "left" : "families.setValue(i, new NSNumber(parts[i].trim()));",
      "right" : "families.setValue(i, new NSNumber(parts[i].trim()));",
      "info" : "ExpressionStatement[30100-30152]:ExpressionStatement[30187-30239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30198-30547]:Block[30285-30634]"
    }, {
      "left" : "NSArray defFamilies = (NSArray) supportedDeviceFamilies;",
      "right" : "NSArray defFamilies = (NSArray) supportedDeviceFamilies;",
      "info" : "VariableDeclarationStatement[30220-30276]:VariableDeclarationStatement[30307-30363]"
    }, {
      "left" : "families = new NSArray(defFamilies.count());",
      "right" : "families = new NSArray(defFamilies.count());",
      "info" : "ExpressionStatement[30297-30341]:ExpressionStatement[30384-30428]"
    }, {
      "left" : "for (int i = 0; i < families.count(); i++)",
      "right" : "for (int i = 0; i < families.count(); i++)",
      "info" : "ForStatement[30362-30529]:ForStatement[30449-30616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30405-30529]:Block[30492-30616]"
    }, {
      "left" : "families.setValue(i, new NSNumber(defFamilies.objectAtIndex(i).toString()));",
      "right" : "families.setValue(i, new NSNumber(defFamilies.objectAtIndex(i).toString()));",
      "info" : "ExpressionStatement[30431-30507]:ExpressionStatement[30518-30594]"
    }, {
      "left" : "dict.put(\"UIDeviceFamily\", families);",
      "right" : "dict.put(\"UIDeviceFamily\", families);",
      "info" : "ExpressionStatement[30564-30601]:ExpressionStatement[30651-30688]"
    }, {
      "left" : "dict.put(\"UISupportedInterfaceOrientations\", new NSArray(\n                    new NSString(\"UIInterfaceOrientationPortrait\"),\n                    new NSString(\"UIInterfaceOrientationLandscapeLeft\"),\n                    new NSString(\"UIInterfaceOrientationLandscapeRight\"),\n                    new NSString(\"UIInterfaceOrientationPortraitUpsideDown\")\n                    ));",
      "right" : "dict.put(\"UISupportedInterfaceOrientations\", new NSArray(\n                    new NSString(\"UIInterfaceOrientationPortrait\"),\n                    new NSString(\"UIInterfaceOrientationLandscapeLeft\"),\n                    new NSString(\"UIInterfaceOrientationLandscapeRight\"),\n                    new NSString(\"UIInterfaceOrientationPortraitUpsideDown\")\n                    ));",
      "info" : "ExpressionStatement[30628-31001]:ExpressionStatement[30715-31088]"
    }, {
      "left" : "dict.put(\"UISupportedInterfaceOrientations~ipad\", new NSArray(\n                    new NSString(\"UIInterfaceOrientationPortrait\"),\n                    new NSString(\"UIInterfaceOrientationLandscapeLeft\"),\n                    new NSString(\"UIInterfaceOrientationLandscapeRight\"),\n                    new NSString(\"UIInterfaceOrientationPortraitUpsideDown\")\n                    ));",
      "right" : "dict.put(\"UISupportedInterfaceOrientations~ipad\", new NSArray(\n                    new NSString(\"UIInterfaceOrientationPortrait\"),\n                    new NSString(\"UIInterfaceOrientationLandscapeLeft\"),\n                    new NSString(\"UIInterfaceOrientationLandscapeRight\"),\n                    new NSString(\"UIInterfaceOrientationPortraitUpsideDown\")\n                    ));",
      "info" : "ExpressionStatement[31014-31392]:ExpressionStatement[31101-31479]"
    }, {
      "left" : "dict.put(\"UIRequiredDeviceCapabilities\", new NSArray(new NSString(\"armv7\")));",
      "right" : "dict.put(\"UIRequiredDeviceCapabilities\", new NSArray(new NSString(\"armv7\")));",
      "info" : "ExpressionStatement[31405-31482]:ExpressionStatement[31492-31569]"
    }, {
      "left" : "dict.put(\"DTPlatformName\", sdk.getPlatformName());",
      "right" : "dict.put(\"DTPlatformName\", sdk.getPlatformName());",
      "info" : "ExpressionStatement[31502-31552]:ExpressionStatement[31589-31639]"
    }, {
      "left" : "dict.put(\"DTSDKName\", sdk.getCanonicalName());",
      "right" : "dict.put(\"DTSDKName\", sdk.getCanonicalName());",
      "info" : "ExpressionStatement[31561-31607]:ExpressionStatement[31648-31694]"
    }, {
      "left" : "for (File f : FileUtils.listFiles(partialPListDir, new String[] {\"plist\"}, false))",
      "right" : "for (File f : FileUtils.listFiles(partialPListDir, new String[] {\"plist\"}, false))",
      "info" : "EnhancedForStatement[31617-31936]:EnhancedForStatement[31704-32023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31700-31936]:Block[31787-32023]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[31714-31926]:TryStatement[31801-32013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31718-31842]:Block[31805-31929]"
    }, {
      "left" : "NSDictionary d = (NSDictionary) PropertyListParser.parse(f);",
      "right" : "NSDictionary d = (NSDictionary) PropertyListParser.parse(f);",
      "info" : "VariableDeclarationStatement[31736-31796]:VariableDeclarationStatement[31823-31883]"
    }, {
      "left" : "dict.putAll(d);",
      "right" : "dict.putAll(d);",
      "info" : "ExpressionStatement[31813-31828]:ExpressionStatement[31900-31915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31863-31926]:Block[31950-32013]"
    }, {
      "left" : "throw new CompilerException(e);",
      "right" : "throw new CompilerException(e);",
      "info" : "ThrowStatement[31881-31912]:ThrowStatement[31968-31999]"
    }, {
      "left" : "if (dict.objectForKey(\"MinimumOSVersion\") == null)",
      "right" : "if (dict.objectForKey(\"MinimumOSVersion\") == null)",
      "info" : "IfStatement[31946-32089]:IfStatement[32033-32176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31997-32089]:Block[32084-32176]"
    }, {
      "left" : "dict.put(\"MinimumOSVersion\", \"6.0\");",
      "right" : "dict.put(\"MinimumOSVersion\", \"6.0\");",
      "info" : "ExpressionStatement[32043-32079]:ExpressionStatement[32130-32166]"
    }, {
      "left" : "customizeInfoPList(dict);",
      "right" : "customizeInfoPList(dict);",
      "info" : "ExpressionStatement[32099-32124]:ExpressionStatement[32186-32211]"
    }, {
      "left" : "NSDictionary newDict = new NSDictionary();",
      "right" : "NSDictionary newDict = new NSDictionary();",
      "info" : "VariableDeclarationStatement[32531-32573]:VariableDeclarationStatement[32618-32660]"
    }, {
      "left" : "if (dict.objectForKey(\"CFBundleShortVersionString\") != null)",
      "right" : "if (dict.objectForKey(\"CFBundleShortVersionString\") != null)",
      "info" : "IfStatement[32582-32813]:IfStatement[32669-32900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32643-32813]:Block[32730-32900]"
    }, {
      "left" : "newDict.put(\"CFBundleShortVersionString\", dict.objectForKey(\"CFBundleShortVersionString\"));",
      "right" : "newDict.put(\"CFBundleShortVersionString\", dict.objectForKey(\"CFBundleShortVersionString\"));",
      "info" : "ExpressionStatement[32657-32748]:ExpressionStatement[32744-32835]"
    }, {
      "left" : "dict.remove(\"CFBundleShortVersionString\");",
      "right" : "dict.remove(\"CFBundleShortVersionString\");",
      "info" : "ExpressionStatement[32761-32803]:ExpressionStatement[32848-32890]"
    }, {
      "left" : "if (dict.objectForKey(\"CFBundleVersion\") != null)",
      "right" : "if (dict.objectForKey(\"CFBundleVersion\") != null)",
      "info" : "IfStatement[32822-33009]:IfStatement[32909-33096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32872-33009]:Block[32959-33096]"
    }, {
      "left" : "newDict.put(\"CFBundleVersion\", dict.objectForKey(\"CFBundleVersion\"));",
      "right" : "newDict.put(\"CFBundleVersion\", dict.objectForKey(\"CFBundleVersion\"));",
      "info" : "ExpressionStatement[32886-32955]:ExpressionStatement[32973-33042]"
    }, {
      "left" : "dict.remove(\"CFBundleVersion\");",
      "right" : "dict.remove(\"CFBundleVersion\");",
      "info" : "ExpressionStatement[32968-32999]:ExpressionStatement[33055-33086]"
    }, {
      "left" : "for (String key : dict.allKeys())",
      "right" : "for (String key : dict.allKeys())",
      "info" : "EnhancedForStatement[33018-33117]:EnhancedForStatement[33105-33204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33052-33117]:Block[33139-33204]"
    }, {
      "left" : "newDict.put(key, dict.objectForKey(key));",
      "right" : "newDict.put(key, dict.objectForKey(key));",
      "info" : "ExpressionStatement[33066-33107]:ExpressionStatement[33153-33194]"
    }, {
      "left" : "File tmpInfoPlist = new File(config.getTmpDir(), \"Info.plist\");",
      "right" : "File tmpInfoPlist = new File(config.getTmpDir(), \"Info.plist\");",
      "info" : "VariableDeclarationStatement[33127-33190]:VariableDeclarationStatement[33214-33277]"
    }, {
      "left" : "PropertyListParser.saveAsBinary(newDict, tmpInfoPlist);",
      "right" : "PropertyListParser.saveAsBinary(newDict, tmpInfoPlist);",
      "info" : "ExpressionStatement[33199-33254]:ExpressionStatement[33286-33341]"
    }, {
      "left" : "config.getLogger().debug(\"Installing Info.plist to %s\", dir);",
      "right" : "config.getLogger().debug(\"Installing Info.plist to %s\", dir);",
      "info" : "ExpressionStatement[33264-33325]:ExpressionStatement[33351-33412]"
    }, {
      "left" : "FileUtils.copyFile(tmpInfoPlist, new File(dir, tmpInfoPlist.getName()));",
      "right" : "FileUtils.copyFile(tmpInfoPlist, new File(dir, tmpInfoPlist.getName()));",
      "info" : "ExpressionStatement[33334-33406]:ExpressionStatement[33421-33493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33450-36166]:Block[33537-36253]"
    }, {
      "left" : "super.init(config);",
      "right" : "super.init(config);",
      "info" : "ExpressionStatement[33460-33479]:ExpressionStatement[33547-33566]"
    }, {
      "left" : "if (config.getArch() == null)",
      "right" : "if (config.getArch() == null)",
      "info" : "IfStatement[33489-33861]:IfStatement[33576-33948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33519-33563]:Block[33606-33650]"
    }, {
      "left" : "arch = Arch.thumbv7;",
      "right" : "arch = Arch.thumbv7;",
      "info" : "ExpressionStatement[33533-33553]:ExpressionStatement[33620-33640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33569-33861]:Block[33656-33948]"
    }, {
      "left" : "if (!isSimulatorArch(config.getArch()) && !isDeviceArch(config.getArch()))",
      "right" : "if (!isSimulatorArch(config.getArch()) && !isDeviceArch(config.getArch()))",
      "info" : "IfStatement[33583-33814]:IfStatement[33670-33901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33658-33814]:Block[33745-33901]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Arch '\" + config.getArch()\n                        + \"' is unsupported for iOS target\");",
      "right" : "throw new IllegalArgumentException(\"Arch '\" + config.getArch()\n                        + \"' is unsupported for iOS target\");",
      "info" : "ThrowStatement[33676-33800]:ThrowStatement[33763-33887]"
    }, {
      "left" : "arch = config.getArch();",
      "right" : "arch = config.getArch();",
      "info" : "ExpressionStatement[33827-33851]:ExpressionStatement[33914-33938]"
    }, {
      "left" : "if (isDeviceArch(arch))",
      "right" : "if (isDeviceArch(arch))",
      "info" : "IfStatement[33871-34266]:IfStatement[33958-34353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33895-34266]:Block[33982-34353]"
    }, {
      "left" : "if (!config.isSkipLinking() && !config.isIosSkipSigning())",
      "right" : "if (!config.isSkipLinking() && !config.isIosSkipSigning())",
      "info" : "IfStatement[33909-34256]:IfStatement[33996-34343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33968-34256]:Block[34055-34343]"
    }, {
      "left" : "signIdentity = config.getIosSignIdentity();",
      "right" : "signIdentity = config.getIosSignIdentity();",
      "info" : "ExpressionStatement[33986-34029]:ExpressionStatement[34073-34116]"
    }, {
      "left" : "if (signIdentity == null)",
      "right" : "if (signIdentity == null)",
      "info" : "IfStatement[34046-34242]:IfStatement[34133-34329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34072-34242]:Block[34159-34329]"
    }, {
      "left" : "signIdentity = SigningIdentity.find(SigningIdentity.list(),\n                            \"/(?i)iPhone Developer|iOS Development/\");",
      "right" : "signIdentity = SigningIdentity.find(SigningIdentity.list(),\n                            \"/(?i)iPhone Developer|iOS Development/\");",
      "info" : "ExpressionStatement[34094-34224]:ExpressionStatement[34181-34311]"
    }, {
      "left" : "if (config.getIosInfoPList() != null)",
      "right" : "if (config.getIosInfoPList() != null)",
      "info" : "IfStatement[34276-34393]:IfStatement[34363-34480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34314-34393]:Block[34401-34480]"
    }, {
      "left" : "config.getIosInfoPList().parse(config.getProperties());",
      "right" : "config.getIosInfoPList().parse(config.getProperties());",
      "info" : "ExpressionStatement[34328-34383]:ExpressionStatement[34415-34470]"
    }, {
      "left" : "if (isDeviceArch(arch))",
      "right" : "if (isDeviceArch(arch))",
      "info" : "IfStatement[34403-35053]:IfStatement[34490-35140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34427-35053]:Block[34514-35140]"
    }, {
      "left" : "if (!config.isSkipLinking() &&!config.isIosSkipSigning())",
      "right" : "if (!config.isSkipLinking() &&!config.isIosSkipSigning())",
      "info" : "IfStatement[34441-35043]:IfStatement[34528-35130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34499-35043]:Block[34586-35130]"
    }, {
      "left" : "provisioningProfile = config.getIosProvisioningProfile();",
      "right" : "provisioningProfile = config.getIosProvisioningProfile();",
      "info" : "ExpressionStatement[34517-34574]:ExpressionStatement[34604-34661]"
    }, {
      "left" : "if (provisioningProfile == null)",
      "right" : "if (provisioningProfile == null)",
      "info" : "IfStatement[34591-35029]:IfStatement[34678-35116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34624-35029]:Block[34711-35116]"
    }, {
      "left" : "String bundleId = \"*\";",
      "right" : "String bundleId = \"*\";",
      "info" : "VariableDeclarationStatement[34646-34668]:VariableDeclarationStatement[34733-34755]"
    }, {
      "left" : "if (config.getIosInfoPList() != null && config.getIosInfoPList().getBundleIdentifier() != null)",
      "right" : "if (config.getIosInfoPList() != null && config.getIosInfoPList().getBundleIdentifier() != null)",
      "info" : "IfStatement[34689-34891]:IfStatement[34776-34978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34785-34891]:Block[34872-34978]"
    }, {
      "left" : "bundleId = config.getIosInfoPList().getBundleIdentifier();",
      "right" : "bundleId = config.getIosInfoPList().getBundleIdentifier();",
      "info" : "ExpressionStatement[34811-34869]:ExpressionStatement[34898-34956]"
    }, {
      "left" : "provisioningProfile = ProvisioningProfile.find(ProvisioningProfile.list(), signIdentity, bundleId);",
      "right" : "provisioningProfile = ProvisioningProfile.find(ProvisioningProfile.list(), signIdentity, bundleId);",
      "info" : "ExpressionStatement[34912-35011]:ExpressionStatement[34999-35098]"
    }, {
      "left" : "String sdkVersion = config.getIosSdkVersion();",
      "right" : "String sdkVersion = config.getIosSdkVersion();",
      "info" : "VariableDeclarationStatement[35063-35109]:VariableDeclarationStatement[35150-35196]"
    }, {
      "left" : "List<SDK> sdks = getSDKs();",
      "right" : "List<SDK> sdks = getSDKs();",
      "info" : "VariableDeclarationStatement[35118-35145]:VariableDeclarationStatement[35205-35232]"
    }, {
      "left" : "if (sdkVersion == null)",
      "right" : "if (sdkVersion == null)",
      "info" : "IfStatement[35154-35831]:IfStatement[35241-35918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35178-35474]:Block[35265-35561]"
    }, {
      "left" : "if (sdks.isEmpty())",
      "right" : "if (sdks.isEmpty())",
      "info" : "IfStatement[35192-35378]:IfStatement[35279-35465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35212-35378]:Block[35299-35465]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No \" + (isDeviceArch(arch) ? \"device\" : \"simulator\")\n                        + \" SDKs installed\");",
      "right" : "throw new IllegalArgumentException(\"No \" + (isDeviceArch(arch) ? \"device\" : \"simulator\")\n                        + \" SDKs installed\");",
      "info" : "ThrowStatement[35230-35364]:ThrowStatement[35317-35451]"
    }, {
      "left" : "Collections.sort(sdks);",
      "right" : "Collections.sort(sdks);",
      "info" : "ExpressionStatement[35391-35414]:ExpressionStatement[35478-35501]"
    }, {
      "left" : "this.sdk = sdks.get(sdks.size() - 1);",
      "right" : "this.sdk = sdks.get(sdks.size() - 1);",
      "info" : "ExpressionStatement[35427-35464]:ExpressionStatement[35514-35551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35480-35831]:Block[35567-35918]"
    }, {
      "left" : "for (SDK sdk : sdks)",
      "right" : "for (SDK sdk : sdks)",
      "info" : "EnhancedForStatement[35494-35670]:EnhancedForStatement[35581-35757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35515-35670]:Block[35602-35757]"
    }, {
      "left" : "if (sdk.getVersion().equals(sdkVersion))",
      "right" : "if (sdk.getVersion().equals(sdkVersion))",
      "info" : "IfStatement[35533-35656]:IfStatement[35620-35743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35574-35656]:Block[35661-35743]"
    }, {
      "left" : "this.sdk = sdk;",
      "right" : "this.sdk = sdk;",
      "info" : "ExpressionStatement[35596-35611]:ExpressionStatement[35683-35698]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35632-35638]:BreakStatement[35719-35725]"
    }, {
      "left" : "if (sdk == null)",
      "right" : "if (sdk == null)",
      "info" : "IfStatement[35683-35821]:IfStatement[35770-35908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35700-35821]:Block[35787-35908]"
    }, {
      "left" : "throw new IllegalArgumentException(\"No SDK found matching version string \" + sdkVersion);",
      "right" : "throw new IllegalArgumentException(\"No SDK found matching version string \" + sdkVersion);",
      "info" : "ThrowStatement[35718-35807]:ThrowStatement[35805-35894]"
    }, {
      "left" : "entitlementsPList = config.getIosEntitlementsPList();",
      "right" : "entitlementsPList = config.getIosEntitlementsPList();",
      "info" : "ExpressionStatement[35841-35894]:ExpressionStatement[35928-35981]"
    }, {
      "left" : "partialPListDir = new File(config.getTmpDir(), \"partial-plists\");",
      "right" : "partialPListDir = new File(config.getTmpDir(), \"partial-plists\");",
      "info" : "ExpressionStatement[35904-35969]:ExpressionStatement[35991-36056]"
    }, {
      "left" : "partialPListDir.mkdirs();",
      "right" : "partialPListDir.mkdirs();",
      "info" : "ExpressionStatement[35978-36003]:ExpressionStatement[36065-36090]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36012-36160]:TryStatement[36099-36247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36016-36082]:Block[36103-36169]"
    }, {
      "left" : "FileUtils.cleanDirectory(partialPListDir);",
      "right" : "FileUtils.cleanDirectory(partialPListDir);",
      "info" : "ExpressionStatement[36030-36072]:ExpressionStatement[36117-36159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36105-36160]:Block[36192-36247]"
    }, {
      "left" : "throw new CompilerException(e);",
      "right" : "throw new CompilerException(e);",
      "info" : "ThrowStatement[36119-36150]:ThrowStatement[36206-36237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36204-36234]:Block[36291-36321]"
    }, {
      "left" : "return OS.ios;",
      "right" : "return OS.ios;",
      "info" : "ReturnStatement[36214-36228]:ReturnStatement[36301-36315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36288-36317]:Block[36375-36404]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36298-36311]:ReturnStatement[36385-36398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36571-38867]:Block[36658-38954]"
    }, {
      "left" : "SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddHHmmss\");",
      "right" : "SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddHHmmss\");",
      "info" : "VariableDeclarationStatement[36581-36643]:VariableDeclarationStatement[36668-36730]"
    }, {
      "left" : "final File indexedDir = new File(System.getProperty(\"user.home\"),\n                \"Library/Developer/Xcode/DerivedData/RoboVM/Build/Products/\"\n                        + FilenameUtils.removeExtension(dir.getName()) + \"_\"\n                        + sdf.format(new Date()));",
      "right" : "final File indexedDir = new File(System.getProperty(\"user.home\"),\n                \"Library/Developer/Xcode/DerivedData/RoboVM/Build/Products/\"\n                        + FilenameUtils.removeExtension(dir.getName()) + \"_\"\n                        + sdf.format(new Date()));",
      "info" : "VariableDeclarationStatement[36652-36922]:VariableDeclarationStatement[36739-37009]"
    }, {
      "left" : "indexedDir.mkdirs();",
      "right" : "indexedDir.mkdirs();",
      "info" : "ExpressionStatement[36931-36951]:ExpressionStatement[37018-37038]"
    }, {
      "left" : "File indexedDSymDir = new File(indexedDir, dsymDir.getName());",
      "right" : "File indexedDSymDir = new File(indexedDir, dsymDir.getName());",
      "info" : "VariableDeclarationStatement[36960-37022]:VariableDeclarationStatement[37047-37109]"
    }, {
      "left" : "File indexedAppDir = new File(indexedDir, dir.getName());",
      "right" : "File indexedAppDir = new File(indexedDir, dir.getName());",
      "info" : "VariableDeclarationStatement[37031-37088]:VariableDeclarationStatement[37118-37175]"
    }, {
      "left" : "indexedAppDir.mkdirs();",
      "right" : "indexedAppDir.mkdirs();",
      "info" : "ExpressionStatement[37097-37120]:ExpressionStatement[37184-37207]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[37130-37575]:TryStatement[37217-37662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37134-37344]:Block[37221-37431]"
    }, {
      "left" : "FileUtils.copyFile(exePath, new File(indexedAppDir, executable));",
      "right" : "FileUtils.copyFile(exePath, new File(indexedAppDir, executable));",
      "info" : "ExpressionStatement[37269-37334]:ExpressionStatement[37356-37421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37367-37575]:Block[37454-37662]"
    }, {
      "left" : "config.getLogger().error(\"Failed to copy %s to indexed dir %s: %s\",\n                    exePath.getAbsolutePath(),\n                    indexedAppDir.getAbsolutePath(), e.getMessage());",
      "right" : "config.getLogger().error(\"Failed to copy %s to indexed dir %s: %s\",\n                    exePath.getAbsolutePath(),\n                    indexedAppDir.getAbsolutePath(), e.getMessage());",
      "info" : "ExpressionStatement[37381-37565]:ExpressionStatement[37468-37652]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[37585-37890]:TryStatement[37672-37977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37589-37662]:Block[37676-37749]"
    }, {
      "left" : "FileUtils.copyDirectory(dsymDir, indexedDSymDir);",
      "right" : "FileUtils.copyDirectory(dsymDir, indexedDSymDir);",
      "info" : "ExpressionStatement[37603-37652]:ExpressionStatement[37690-37739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37685-37890]:Block[37772-37977]"
    }, {
      "left" : "config.getLogger().error(\"Failed to copy %s to indexed dir %s: %s\",\n                    dsymDir.getAbsolutePath(),\n                    indexedDir.getAbsolutePath(), e.getMessage());",
      "right" : "config.getLogger().error(\"Failed to copy %s to indexed dir %s: %s\",\n                    dsymDir.getAbsolutePath(),\n                    indexedDir.getAbsolutePath(), e.getMessage());",
      "info" : "ExpressionStatement[37699-37880]:ExpressionStatement[37786-37967]"
    }, {
      "left" : "List<File> dirs = new ArrayList<>(Arrays.asList(indexedDir.getParentFile().listFiles((FileFilter)\n                new AndFileFilter(\n                        new PrefixFileFilter(FilenameUtils.removeExtension(dir.getName())),\n                        new RegexFileFilter(\".*_\\\\d{14}\")))));",
      "right" : "List<File> dirs = new ArrayList<>(Arrays.asList(indexedDir.getParentFile().listFiles((FileFilter)\n                new AndFileFilter(\n                        new PrefixFileFilter(FilenameUtils.removeExtension(dir.getName())),\n                        new RegexFileFilter(\".*_\\\\d{14}\")))));",
      "info" : "VariableDeclarationStatement[37973-38260]:VariableDeclarationStatement[38060-38347]"
    }, {
      "left" : "Collections.sort(dirs, new Comparator<File>() {\n            public int compare(File o1, File o2) {\n                return Long.compare(o1.lastModified(), o2.lastModified());\n            }\n        });",
      "right" : "Collections.sort(dirs, new Comparator<File>() {\n            public int compare(File o1, File o2) {\n                return Long.compare(o1.lastModified(), o2.lastModified());\n            }\n        });",
      "info" : "ExpressionStatement[38269-38468]:ExpressionStatement[38356-38555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38366-38456]:Block[38453-38543]"
    }, {
      "left" : "return Long.compare(o1.lastModified(), o2.lastModified());",
      "right" : "return Long.compare(o1.lastModified(), o2.lastModified());",
      "info" : "ReturnStatement[38384-38442]:ReturnStatement[38471-38529]"
    }, {
      "left" : "if (dirs.size() > 3)",
      "right" : "if (dirs.size() > 3)",
      "info" : "IfStatement[38477-38861]:IfStatement[38564-38948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38498-38861]:Block[38585-38948]"
    }, {
      "left" : "for (File f : dirs.subList(0, dirs.size() - 3))",
      "right" : "for (File f : dirs.subList(0, dirs.size() - 3))",
      "info" : "EnhancedForStatement[38512-38851]:EnhancedForStatement[38599-38938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38560-38851]:Block[38647-38938]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[38578-38837]:TryStatement[38665-38924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38582-38651]:Block[38669-38738]"
    }, {
      "left" : "FileUtils.deleteDirectory(f);",
      "right" : "FileUtils.deleteDirectory(f);",
      "info" : "ExpressionStatement[38604-38633]:ExpressionStatement[38691-38720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38674-38837]:Block[38761-38924]"
    }, {
      "left" : "config.getLogger().error(\"Failed to delete diretcory %s\",\n                            f.getAbsolutePath(), e.getMessage());",
      "right" : "config.getLogger().error(\"Failed to delete diretcory %s\",\n                            f.getAbsolutePath(), e.getMessage());",
      "info" : "ExpressionStatement[38696-38819]:ExpressionStatement[38783-38906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39024-40092]:Block[39111-40179]"
    }, {
      "left" : "if (node instanceof Text)",
      "right" : "if (node instanceof Text)",
      "info" : "IfStatement[39034-39911]:IfStatement[39121-39998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39060-39911]:Block[39147-39998]"
    }, {
      "left" : "Text el = (Text) node;",
      "right" : "Text el = (Text) node;",
      "info" : "VariableDeclarationStatement[39074-39096]:VariableDeclarationStatement[39161-39183]"
    }, {
      "left" : "String value = el.getNodeValue();",
      "right" : "String value = el.getNodeValue();",
      "info" : "VariableDeclarationStatement[39109-39142]:VariableDeclarationStatement[39196-39229]"
    }, {
      "left" : "if (value != null && value.trim().length() > 0)",
      "right" : "if (value != null && value.trim().length() > 0)",
      "info" : "IfStatement[39155-39901]:IfStatement[39242-39988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39203-39901]:Block[39290-39988]"
    }, {
      "left" : "Matcher matcher = VARIABLE_PATTERN.matcher(value);",
      "right" : "Matcher matcher = VARIABLE_PATTERN.matcher(value);",
      "info" : "VariableDeclarationStatement[39221-39271]:VariableDeclarationStatement[39308-39358]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[39288-39327]:VariableDeclarationStatement[39375-39414]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[39344-39356]:VariableDeclarationStatement[39431-39443]"
    }, {
      "left" : "while (matcher.find())",
      "right" : "while (matcher.find())",
      "info" : "WhileStatement[39373-39724]:WhileStatement[39460-39811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39396-39724]:Block[39483-39811]"
    }, {
      "left" : "if (pos < matcher.start())",
      "right" : "if (pos < matcher.start())",
      "info" : "IfStatement[39418-39542]:IfStatement[39505-39629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39445-39542]:Block[39532-39629]"
    }, {
      "left" : "sb.append(value.substring(pos, matcher.start()));",
      "right" : "sb.append(value.substring(pos, matcher.start()));",
      "info" : "ExpressionStatement[39471-39520]:ExpressionStatement[39558-39607]"
    }, {
      "left" : "String key = matcher.group(1);",
      "right" : "String key = matcher.group(1);",
      "info" : "VariableDeclarationStatement[39563-39593]:VariableDeclarationStatement[39650-39680]"
    }, {
      "left" : "sb.append(props.getProperty(key, matcher.group()));",
      "right" : "sb.append(props.getProperty(key, matcher.group()));",
      "info" : "ExpressionStatement[39614-39665]:ExpressionStatement[39701-39752]"
    }, {
      "left" : "pos = matcher.end();",
      "right" : "pos = matcher.end();",
      "info" : "ExpressionStatement[39686-39706]:ExpressionStatement[39773-39793]"
    }, {
      "left" : "if (pos < value.length())",
      "right" : "if (pos < value.length())",
      "info" : "IfStatement[39741-39839]:IfStatement[39828-39926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39767-39839]:Block[39854-39926]"
    }, {
      "left" : "sb.append(value.substring(pos));",
      "right" : "sb.append(value.substring(pos));",
      "info" : "ExpressionStatement[39789-39821]:ExpressionStatement[39876-39908]"
    }, {
      "left" : "el.setNodeValue(sb.toString());",
      "right" : "el.setNodeValue(sb.toString());",
      "info" : "ExpressionStatement[39856-39887]:ExpressionStatement[39943-39974]"
    }, {
      "left" : "NodeList children = node.getChildNodes();",
      "right" : "NodeList children = node.getChildNodes();",
      "info" : "VariableDeclarationStatement[39920-39961]:VariableDeclarationStatement[40007-40048]"
    }, {
      "left" : "for (int i = 0; i < children.getLength(); i++)",
      "right" : "for (int i = 0; i < children.getLength(); i++)",
      "info" : "ForStatement[39970-40086]:ForStatement[40057-40173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40017-40086]:Block[40104-40173]"
    }, {
      "left" : "replacePropertyRefs(children.item(i), props);",
      "right" : "replacePropertyRefs(children.item(i), props);",
      "info" : "ExpressionStatement[40031-40076]:ExpressionStatement[40118-40163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40178-40813]:Block[40265-40900]"
    }, {
      "left" : "Properties allProps = new Properties(System.getProperties());",
      "right" : "Properties allProps = new Properties(System.getProperties());",
      "info" : "VariableDeclarationStatement[40188-40249]:VariableDeclarationStatement[40275-40336]"
    }, {
      "left" : "allProps.putAll(props);",
      "right" : "allProps.putAll(props);",
      "info" : "ExpressionStatement[40258-40281]:ExpressionStatement[40345-40368]"
    }, {
      "left" : "Method getDocBuilder = XMLPropertyListParser.class.getDeclaredMethod(\"getDocBuilder\");",
      "right" : "Method getDocBuilder = XMLPropertyListParser.class.getDeclaredMethod(\"getDocBuilder\");",
      "info" : "VariableDeclarationStatement[40291-40377]:VariableDeclarationStatement[40378-40464]"
    }, {
      "left" : "getDocBuilder.setAccessible(true);",
      "right" : "getDocBuilder.setAccessible(true);",
      "info" : "ExpressionStatement[40386-40420]:ExpressionStatement[40473-40507]"
    }, {
      "left" : "Method parseDocument = XMLPropertyListParser.class.getDeclaredMethod(\"parseDocument\", Document.class);",
      "right" : "Method parseDocument = XMLPropertyListParser.class.getDeclaredMethod(\"parseDocument\", Document.class);",
      "info" : "VariableDeclarationStatement[40429-40531]:VariableDeclarationStatement[40516-40618]"
    }, {
      "left" : "parseDocument.setAccessible(true);",
      "right" : "parseDocument.setAccessible(true);",
      "info" : "ExpressionStatement[40540-40574]:ExpressionStatement[40627-40661]"
    }, {
      "left" : "DocumentBuilder docBuilder = (DocumentBuilder) getDocBuilder.invoke(null);",
      "right" : "DocumentBuilder docBuilder = (DocumentBuilder) getDocBuilder.invoke(null);",
      "info" : "VariableDeclarationStatement[40583-40657]:VariableDeclarationStatement[40670-40744]"
    }, {
      "left" : "Document doc = docBuilder.parse(file);",
      "right" : "Document doc = docBuilder.parse(file);",
      "info" : "VariableDeclarationStatement[40666-40704]:VariableDeclarationStatement[40753-40791]"
    }, {
      "left" : "replacePropertyRefs(doc, allProps);",
      "right" : "replacePropertyRefs(doc, allProps);",
      "info" : "ExpressionStatement[40713-40748]:ExpressionStatement[40800-40835]"
    }, {
      "left" : "return (NSObject) parseDocument.invoke(null, doc);",
      "right" : "return (NSObject) parseDocument.invoke(null, doc);",
      "info" : "ReturnStatement[40757-40807]:ReturnStatement[40844-40894]"
    } ]
  },
  "interFileMappings" : { }
}