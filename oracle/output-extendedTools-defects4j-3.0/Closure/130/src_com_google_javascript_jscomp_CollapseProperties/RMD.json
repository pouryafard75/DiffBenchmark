{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CollapseProperties",
      "right" : "CollapseProperties",
      "info" : "TypeDeclaration[1668-34684]:TypeDeclaration[1668-34703]"
    }, {
      "left" : "static final DiagnosticType UNSAFE_NAMESPACE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNSAFE_NAMESPACE\",\n          \"incomplete alias created for namespace {0}\");",
      "right" : "static final DiagnosticType UNSAFE_NAMESPACE_WARNING =\n      DiagnosticType.warning(\n          \"JSC_UNSAFE_NAMESPACE\",\n          \"incomplete alias created for namespace {0}\");",
      "info" : "FieldDeclaration[3232-3407]:FieldDeclaration[3232-3407]"
    }, {
      "left" : "static final DiagnosticType NAMESPACE_REDEFINED_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAMESPACE_REDEFINED\",\n          \"namespace {0} should not be redefined\");",
      "right" : "static final DiagnosticType NAMESPACE_REDEFINED_WARNING =\n      DiagnosticType.warning(\n          \"JSC_NAMESPACE_REDEFINED\",\n          \"namespace {0} should not be redefined\");",
      "info" : "FieldDeclaration[3411-3587]:FieldDeclaration[3411-3587]"
    }, {
      "left" : "static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(\n      \"JSC_UNSAFE_THIS\",\n      \"dangerous use of 'this' in static method {0}\");",
      "right" : "static final DiagnosticType UNSAFE_THIS = DiagnosticType.warning(\n      \"JSC_UNSAFE_THIS\",\n      \"dangerous use of 'this' in static method {0}\");",
      "info" : "FieldDeclaration[3591-3736]:FieldDeclaration[3591-3736]"
    }, {
      "left" : "private AbstractCompiler compiler;",
      "right" : "private AbstractCompiler compiler;",
      "info" : "FieldDeclaration[3740-3774]:FieldDeclaration[3740-3774]"
    }, {
      "left" : "private List<Name> globalNames;",
      "right" : "private List<Name> globalNames;",
      "info" : "FieldDeclaration[3778-3840]:FieldDeclaration[3778-3840]"
    }, {
      "left" : "private Map<String, Name> nameMap;",
      "right" : "private Map<String, Name> nameMap;",
      "info" : "FieldDeclaration[3844-3951]:FieldDeclaration[3844-3951]"
    }, {
      "left" : "private final boolean collapsePropertiesOnExternTypes;",
      "right" : "private final boolean collapsePropertiesOnExternTypes;",
      "info" : "FieldDeclaration[3955-4009]:FieldDeclaration[3955-4009]"
    }, {
      "left" : "private final boolean inlineAliases;",
      "right" : "private final boolean inlineAliases;",
      "info" : "FieldDeclaration[4012-4048]:FieldDeclaration[4012-4048]"
    }, {
      "left" : "CollapseProperties(AbstractCompiler compiler,\n      boolean collapsePropertiesOnExternTypes, boolean inlineAliases)",
      "right" : "CollapseProperties(AbstractCompiler compiler,\n      boolean collapsePropertiesOnExternTypes, boolean inlineAliases)",
      "info" : "MethodDeclaration[4052-4668]:MethodDeclaration[4052-4668]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[4672-5558]:MethodDeclaration[4672-5558]"
    }, {
      "left" : "private void inlineAliases(GlobalNamespace namespace)",
      "right" : "private void inlineAliases(GlobalNamespace namespace)",
      "info" : "MethodDeclaration[5562-7683]:MethodDeclaration[5562-7702]"
    }, {
      "left" : "private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace)",
      "right" : "private boolean inlineAliasIfPossible(Ref alias, GlobalNamespace namespace)",
      "info" : "MethodDeclaration[7687-9649]:MethodDeclaration[7706-9668]"
    }, {
      "left" : "private void checkNamespaces()",
      "right" : "private void checkNamespaces()",
      "info" : "MethodDeclaration[9653-10760]:MethodDeclaration[9672-10779]"
    }, {
      "left" : "private void warnAboutNamespaceAliasing(Name nameObj, Ref ref)",
      "right" : "private void warnAboutNamespaceAliasing(Name nameObj, Ref ref)",
      "info" : "MethodDeclaration[10764-11156]:MethodDeclaration[10783-11175]"
    }, {
      "left" : "private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref)",
      "right" : "private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref)",
      "info" : "MethodDeclaration[11160-11564]:MethodDeclaration[11179-11583]"
    }, {
      "left" : "private void flattenReferencesToCollapsibleDescendantNames(\n      Name n, String alias)",
      "right" : "private void flattenReferencesToCollapsibleDescendantNames(\n      Name n, String alias)",
      "info" : "MethodDeclaration[11568-12300]:MethodDeclaration[11587-12319]"
    }, {
      "left" : "private void flattenSimpleStubDeclaration(Name name, String alias)",
      "right" : "private void flattenSimpleStubDeclaration(Name name, String alias)",
      "info" : "MethodDeclaration[12305-12952]:MethodDeclaration[12324-12971]"
    }, {
      "left" : "private void flattenReferencesTo(Name n, String alias)",
      "right" : "private void flattenReferencesTo(Name n, String alias)",
      "info" : "MethodDeclaration[12957-14355]:MethodDeclaration[12976-14374]"
    }, {
      "left" : "private void flattenPrefixes(String alias, Name n, int depth)",
      "right" : "private void flattenPrefixes(String alias, Name n, int depth)",
      "info" : "MethodDeclaration[14359-15633]:MethodDeclaration[14378-15652]"
    }, {
      "left" : "private void flattenNameRefAtDepth(String alias, Node n, int depth,\n      String originalName)",
      "right" : "private void flattenNameRefAtDepth(String alias, Node n, int depth,\n      String originalName)",
      "info" : "MethodDeclaration[15637-16762]:MethodDeclaration[15656-16781]"
    }, {
      "left" : "private void flattenNameRef(String alias, Node n, Node parent,\n      String originalName)",
      "right" : "private void flattenNameRef(String alias, Node n, Node parent,\n      String originalName)",
      "info" : "MethodDeclaration[16766-17887]:MethodDeclaration[16785-17906]"
    }, {
      "left" : "private void collapseDeclarationOfNameAndDescendants(Name n, String alias)",
      "right" : "private void collapseDeclarationOfNameAndDescendants(Name n, String alias)",
      "info" : "MethodDeclaration[17891-19201]:MethodDeclaration[17910-19220]"
    }, {
      "left" : "private void updateSimpleDeclaration(String alias, Name refName, Ref ref)",
      "right" : "private void updateSimpleDeclaration(String alias, Name refName, Ref ref)",
      "info" : "MethodDeclaration[19205-21662]:MethodDeclaration[19224-21681]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclaration(\n      Name n, String alias, boolean canCollapseChildNames)",
      "right" : "private void updateObjLitOrFunctionDeclaration(\n      Name n, String alias, boolean canCollapseChildNames)",
      "info" : "MethodDeclaration[21666-23554]:MethodDeclaration[21685-23573]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclarationAtAssignNode(\n      Name n, String alias, boolean canCollapseChildNames)",
      "right" : "private void updateObjLitOrFunctionDeclarationAtAssignNode(\n      Name n, String alias, boolean canCollapseChildNames)",
      "info" : "MethodDeclaration[23558-26076]:MethodDeclaration[23577-26095]"
    }, {
      "left" : "private void checkForHosedThisReferences(Node function, JSDocInfo docInfo,\n      final Name name)",
      "right" : "private void checkForHosedThisReferences(Node function, JSDocInfo docInfo,\n      final Name name)",
      "info" : "MethodDeclaration[26080-27020]:MethodDeclaration[26099-27039]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[26688-26996]:MethodDeclaration[26707-27015]"
    }, {
      "left" : "private void updateObjLitOrFunctionDeclarationAtVarNode(\n      Name n, boolean canCollapseChildNames)",
      "right" : "private void updateObjLitOrFunctionDeclarationAtVarNode(\n      Name n, boolean canCollapseChildNames)",
      "info" : "MethodDeclaration[27024-28321]:MethodDeclaration[27043-28340]"
    }, {
      "left" : "private void updateFunctionDeclarationAtFunctionNode(\n      Name n, boolean canCollapseChildNames)",
      "right" : "private void updateFunctionDeclarationAtFunctionNode(\n      Name n, boolean canCollapseChildNames)",
      "info" : "MethodDeclaration[28325-28922]:MethodDeclaration[28344-28941]"
    }, {
      "left" : "private int declareVarsForObjLitValues(\n      Name objlitName, String alias, Node objlit, Node varNode,\n      Node nameToAddAfter, Node varParent)",
      "right" : "private int declareVarsForObjLitValues(\n      Name objlitName, String alias, Node objlit, Node varNode,\n      Node nameToAddAfter, Node varParent)",
      "info" : "MethodDeclaration[28926-32607]:MethodDeclaration[28945-32626]"
    }, {
      "left" : "private int addStubsForUndeclaredProperties(\n      Name n, String alias, Node parent, Node addAfter)",
      "right" : "private int addStubsForUndeclaredProperties(\n      Name n, String alias, Node parent, Node addAfter)",
      "info" : "MethodDeclaration[32611-34326]:MethodDeclaration[32630-34345]"
    }, {
      "left" : "private static String appendPropForAlias(String root, String prop)",
      "right" : "private static String appendPropForAlias(String root, String prop)",
      "info" : "MethodDeclaration[34330-34682]:MethodDeclaration[34349-34701]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3164-3169]:TYPE_DECLARATION_KIND[3164-3169]"
    }, {
      "left" : "CollapseProperties",
      "right" : "CollapseProperties",
      "info" : "SimpleName[3170-3188]:SimpleName[3170-3188]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[3200-3212]:SimpleType[3200-3212]"
    }, {
      "left" : "CollapseProperties",
      "right" : "CollapseProperties",
      "info" : "SimpleName[4401-4419]:SimpleName[4401-4419]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[4420-4445]:SingleVariableDeclaration[4420-4445]"
    }, {
      "left" : "boolean collapsePropertiesOnExternTypes",
      "right" : "boolean collapsePropertiesOnExternTypes",
      "info" : "SingleVariableDeclaration[4453-4492]:SingleVariableDeclaration[4453-4492]"
    }, {
      "left" : "boolean inlineAliases",
      "right" : "boolean inlineAliases",
      "info" : "SingleVariableDeclaration[4494-4515]:SingleVariableDeclaration[4494-4515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4517-4668]:Block[4517-4668]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[4523-4548]:ExpressionStatement[4523-4548]"
    }, {
      "left" : "this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;",
      "right" : "this.collapsePropertiesOnExternTypes = collapsePropertiesOnExternTypes;",
      "info" : "ExpressionStatement[4553-4624]:ExpressionStatement[4553-4624]"
    }, {
      "left" : "this.inlineAliases = inlineAliases;",
      "right" : "this.inlineAliases = inlineAliases;",
      "info" : "ExpressionStatement[4629-4664]:ExpressionStatement[4629-4664]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4672-4681]:MarkerAnnotation[4672-4681]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4684-4690]:Modifier[4684-4690]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4691-4695]:PrimitiveType[4691-4695]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[4696-4703]:SimpleName[4696-4703]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[4704-4716]:SingleVariableDeclaration[4704-4716]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[4718-4727]:SingleVariableDeclaration[4718-4727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4729-5558]:Block[4729-5558]"
    }, {
      "left" : "GlobalNamespace namespace;",
      "right" : "GlobalNamespace namespace;",
      "info" : "VariableDeclarationStatement[4735-4761]:VariableDeclarationStatement[4735-4761]"
    }, {
      "left" : "if (collapsePropertiesOnExternTypes)",
      "right" : "if (collapsePropertiesOnExternTypes)",
      "info" : "IfStatement[4766-4942]:IfStatement[4766-4942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4803-4874]:Block[4803-4874]"
    }, {
      "left" : "namespace = new GlobalNamespace(compiler, externs, root);",
      "right" : "namespace = new GlobalNamespace(compiler, externs, root);",
      "info" : "ExpressionStatement[4811-4868]:ExpressionStatement[4811-4868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4880-4942]:Block[4880-4942]"
    }, {
      "left" : "namespace = new GlobalNamespace(compiler, root);",
      "right" : "namespace = new GlobalNamespace(compiler, root);",
      "info" : "ExpressionStatement[4888-4936]:ExpressionStatement[4888-4936]"
    }, {
      "left" : "if (inlineAliases)",
      "right" : "if (inlineAliases)",
      "info" : "IfStatement[4948-5006]:IfStatement[4948-5006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4967-5006]:Block[4967-5006]"
    }, {
      "left" : "inlineAliases(namespace);",
      "right" : "inlineAliases(namespace);",
      "info" : "ExpressionStatement[4975-5000]:ExpressionStatement[4975-5000]"
    }, {
      "left" : "nameMap = namespace.getNameIndex();",
      "right" : "nameMap = namespace.getNameIndex();",
      "info" : "ExpressionStatement[5011-5046]:ExpressionStatement[5011-5046]"
    }, {
      "left" : "globalNames = namespace.getNameForest();",
      "right" : "globalNames = namespace.getNameForest();",
      "info" : "ExpressionStatement[5051-5091]:ExpressionStatement[5051-5091]"
    }, {
      "left" : "checkNamespaces();",
      "right" : "checkNamespaces();",
      "info" : "ExpressionStatement[5096-5114]:ExpressionStatement[5096-5114]"
    }, {
      "left" : "for (Name n : globalNames)",
      "right" : "for (Name n : globalNames)",
      "info" : "EnhancedForStatement[5120-5227]:EnhancedForStatement[5120-5227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5147-5227]:Block[5147-5227]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames(n, n.getBaseName());",
      "right" : "flattenReferencesToCollapsibleDescendantNames(n, n.getBaseName());",
      "info" : "ExpressionStatement[5155-5221]:ExpressionStatement[5155-5221]"
    }, {
      "left" : "for (Name n : globalNames)",
      "right" : "for (Name n : globalNames)",
      "info" : "EnhancedForStatement[5453-5554]:EnhancedForStatement[5453-5554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5480-5554]:Block[5480-5554]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants(n, n.getBaseName());",
      "right" : "collapseDeclarationOfNameAndDescendants(n, n.getBaseName());",
      "info" : "ExpressionStatement[5488-5548]:ExpressionStatement[5488-5548]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6257-6264]:Modifier[6257-6264]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6265-6269]:PrimitiveType[6265-6269]"
    }, {
      "left" : "inlineAliases",
      "right" : "inlineAliases",
      "info" : "SimpleName[6270-6283]:SimpleName[6270-6283]"
    }, {
      "left" : "GlobalNamespace namespace",
      "right" : "GlobalNamespace namespace",
      "info" : "SingleVariableDeclaration[6284-6309]:SingleVariableDeclaration[6284-6309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6311-7683]:Block[6311-7702]"
    }, {
      "left" : "Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());",
      "right" : "Deque<Name> workList = new ArrayDeque<Name>(namespace.getNameForest());",
      "info" : "VariableDeclarationStatement[6385-6456]:VariableDeclarationStatement[6385-6456]"
    }, {
      "left" : "while (!workList.isEmpty())",
      "right" : "while (!workList.isEmpty())",
      "info" : "WhileStatement[6461-7679]:WhileStatement[6461-7698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6489-7679]:Block[6489-7698]"
    }, {
      "left" : "Name name = workList.pop();",
      "right" : "Name name = workList.pop();",
      "info" : "VariableDeclarationStatement[6497-6524]:VariableDeclarationStatement[6497-6524]"
    }, {
      "left" : "if (name.type == Name.Type.GET || name.type == Name.Type.SET)",
      "right" : "if (name.type == Name.Type.GET || name.type == Name.Type.SET)",
      "info" : "IfStatement[6608-6697]:IfStatement[6608-6697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6670-6697]:Block[6670-6697]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[6680-6689]:ContinueStatement[6680-6689]"
    }, {
      "left" : "if (name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0)",
      "right" : "if (!name.inExterns && name.globalSets == 1 && name.localSets == 0 &&\n          name.aliasingGets > 0)",
      "info" : "IfStatement[6705-7265]:IfStatement[6705-7284]"
    }, {
      "left" : "name.globalSets == 1",
      "right" : "name.globalSets == 1",
      "info" : "InfixExpression[6709-6729]:InfixExpression[6728-6748]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6789-7265]:Block[6808-7284]"
    }, {
      "left" : "List<Ref> refs = Lists.newArrayList(name.getRefs());",
      "right" : "List<Ref> refs = Lists.newArrayList(name.getRefs());",
      "info" : "VariableDeclarationStatement[6909-6961]:VariableDeclarationStatement[6928-6980]"
    }, {
      "left" : "for (Ref ref : refs)",
      "right" : "for (Ref ref : refs)",
      "info" : "EnhancedForStatement[6970-7257]:EnhancedForStatement[6989-7276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6991-7257]:Block[7010-7276]"
    }, {
      "left" : "if (ref.type == Type.ALIASING_GET && ref.scope.isLocal())",
      "right" : "if (ref.type == Type.ALIASING_GET && ref.scope.isLocal())",
      "info" : "IfStatement[7003-7247]:IfStatement[7022-7266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7061-7247]:Block[7080-7266]"
    }, {
      "left" : "if (inlineAliasIfPossible(ref, namespace))",
      "right" : "if (inlineAliasIfPossible(ref, namespace))",
      "info" : "IfStatement[7142-7235]:IfStatement[7161-7254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7185-7235]:Block[7204-7254]"
    }, {
      "left" : "name.removeRef(ref);",
      "right" : "name.removeRef(ref);",
      "info" : "ExpressionStatement[7201-7221]:ExpressionStatement[7220-7240]"
    }, {
      "left" : "if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null)",
      "right" : "if ((name.type == Name.Type.OBJECTLIT ||\n           name.type == Name.Type.FUNCTION) &&\n          name.aliasingGets == 0 && name.props != null)",
      "info" : "IfStatement[7372-7673]:IfStatement[7391-7692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7516-7673]:Block[7535-7692]"
    }, {
      "left" : "workList.addAll(name.props);",
      "right" : "workList.addAll(name.props);",
      "info" : "ExpressionStatement[7637-7665]:ExpressionStatement[7656-7684]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7687-7694]:Modifier[7706-7713]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[7695-7702]:PrimitiveType[7714-7721]"
    }, {
      "left" : "inlineAliasIfPossible",
      "right" : "inlineAliasIfPossible",
      "info" : "SimpleName[7703-7724]:SimpleName[7722-7743]"
    }, {
      "left" : "Ref alias",
      "right" : "Ref alias",
      "info" : "SingleVariableDeclaration[7725-7734]:SingleVariableDeclaration[7744-7753]"
    }, {
      "left" : "GlobalNamespace namespace",
      "right" : "GlobalNamespace namespace",
      "info" : "SingleVariableDeclaration[7736-7761]:SingleVariableDeclaration[7755-7780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7763-9649]:Block[7782-9668]"
    }, {
      "left" : "Node aliasParent = alias.node.getParent();",
      "right" : "Node aliasParent = alias.node.getParent();",
      "info" : "VariableDeclarationStatement[7999-8041]:VariableDeclarationStatement[8018-8060]"
    }, {
      "left" : "if (aliasParent.isName())",
      "right" : "if (aliasParent.isName())",
      "info" : "IfStatement[8046-9626]:IfStatement[8065-9645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8072-9626]:Block[8091-9645]"
    }, {
      "left" : "Scope scope = alias.scope;",
      "right" : "Scope scope = alias.scope;",
      "info" : "VariableDeclarationStatement[8158-8184]:VariableDeclarationStatement[8177-8203]"
    }, {
      "left" : "Var aliasVar = scope.getVar(aliasParent.getString());",
      "right" : "Var aliasVar = scope.getVar(aliasParent.getString());",
      "info" : "VariableDeclarationStatement[8191-8244]:VariableDeclarationStatement[8210-8263]"
    }, {
      "left" : "ReferenceCollectingCallback collector =\n          new ReferenceCollectingCallback(compiler,\n              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,\n              Predicates.<Var>equalTo(aliasVar));",
      "right" : "ReferenceCollectingCallback collector =\n          new ReferenceCollectingCallback(compiler,\n              ReferenceCollectingCallback.DO_NOTHING_BEHAVIOR,\n              Predicates.<Var>equalTo(aliasVar));",
      "info" : "VariableDeclarationStatement[8251-8455]:VariableDeclarationStatement[8270-8474]"
    }, {
      "left" : "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);",
      "right" : "(new NodeTraversal(compiler, collector)).traverseAtScope(scope);",
      "info" : "ExpressionStatement[8462-8526]:ExpressionStatement[8481-8545]"
    }, {
      "left" : "ReferenceCollection aliasRefs = collector.getReferences(aliasVar);",
      "right" : "ReferenceCollection aliasRefs = collector.getReferences(aliasVar);",
      "info" : "VariableDeclarationStatement[8534-8600]:VariableDeclarationStatement[8553-8619]"
    }, {
      "left" : "if (aliasRefs.isWellDefined()\n          && aliasRefs.firstReferenceIsAssigningDeclaration()\n          && aliasRefs.isAssignedOnceInLifetime())",
      "right" : "if (aliasRefs.isWellDefined()\n          && aliasRefs.firstReferenceIsAssigningDeclaration()\n          && aliasRefs.isAssignedOnceInLifetime())",
      "info" : "IfStatement[8607-9620]:IfStatement[8626-9639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8750-9620]:Block[8769-9639]"
    }, {
      "left" : "int size = aliasRefs.references.size();",
      "right" : "int size = aliasRefs.references.size();",
      "info" : "VariableDeclarationStatement[8821-8860]:VariableDeclarationStatement[8840-8879]"
    }, {
      "left" : "Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);",
      "right" : "Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);",
      "info" : "VariableDeclarationStatement[8869-8932]:VariableDeclarationStatement[8888-8951]"
    }, {
      "left" : "for (int i = 1; i < size; i++)",
      "right" : "for (int i = 1; i < size; i++)",
      "info" : "ForStatement[8941-9242]:ForStatement[8960-9261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8972-9242]:Block[8991-9261]"
    }, {
      "left" : "ReferenceCollectingCallback.Reference aliasRef =\n              aliasRefs.references.get(i);",
      "right" : "ReferenceCollectingCallback.Reference aliasRef =\n              aliasRefs.references.get(i);",
      "info" : "VariableDeclarationStatement[8984-9075]:VariableDeclarationStatement[9003-9094]"
    }, {
      "left" : "Node newNode = alias.node.cloneTree();",
      "right" : "Node newNode = alias.node.cloneTree();",
      "info" : "VariableDeclarationStatement[9087-9125]:VariableDeclarationStatement[9106-9144]"
    }, {
      "left" : "aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);",
      "right" : "aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);",
      "info" : "ExpressionStatement[9136-9199]:ExpressionStatement[9155-9218]"
    }, {
      "left" : "newNodes.add(newNode);",
      "right" : "newNodes.add(newNode);",
      "info" : "ExpressionStatement[9210-9232]:ExpressionStatement[9229-9251]"
    }, {
      "left" : "aliasParent.replaceChild(alias.node, IR.nullNode());",
      "right" : "aliasParent.replaceChild(alias.node, IR.nullNode());",
      "info" : "ExpressionStatement[9300-9352]:ExpressionStatement[9319-9371]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[9361-9389]:ExpressionStatement[9380-9408]"
    }, {
      "left" : "namespace.scanNewNodes(alias.scope, newNodes);",
      "right" : "namespace.scanNewNodes(alias.scope, newNodes);",
      "info" : "ExpressionStatement[9545-9591]:ExpressionStatement[9564-9610]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9600-9612]:ReturnStatement[9619-9631]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9632-9645]:ReturnStatement[9651-9664]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9795-9802]:Modifier[9814-9821]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9803-9807]:PrimitiveType[9822-9826]"
    }, {
      "left" : "checkNamespaces",
      "right" : "checkNamespaces",
      "info" : "SimpleName[9808-9823]:SimpleName[9827-9842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9826-10760]:Block[9845-10779]"
    }, {
      "left" : "for (Name name : nameMap.values())",
      "right" : "for (Name name : nameMap.values())",
      "info" : "EnhancedForStatement[9832-10756]:EnhancedForStatement[9851-10775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9867-10756]:Block[9886-10775]"
    }, {
      "left" : "if (name.isNamespace() &&\n          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1 ||\n           name.deleteProps > 0))",
      "right" : "if (name.isNamespace() &&\n          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1 ||\n           name.deleteProps > 0))",
      "info" : "IfStatement[9875-10750]:IfStatement[9894-10769]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10011-10750]:Block[10030-10769]"
    }, {
      "left" : "boolean initialized = name.getDeclaration() != null;",
      "right" : "boolean initialized = name.getDeclaration() != null;",
      "info" : "VariableDeclarationStatement[10021-10073]:VariableDeclarationStatement[10040-10092]"
    }, {
      "left" : "for (Ref ref : name.getRefs())",
      "right" : "for (Ref ref : name.getRefs())",
      "info" : "EnhancedForStatement[10082-10742]:EnhancedForStatement[10101-10761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10113-10742]:Block[10132-10761]"
    }, {
      "left" : "if (ref == name.getDeclaration())",
      "right" : "if (ref == name.getDeclaration())",
      "info" : "IfStatement[10125-10194]:IfStatement[10144-10213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10159-10194]:Block[10178-10213]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[10173-10182]:ContinueStatement[10192-10201]"
    }, {
      "left" : "if (ref.type == Ref.Type.DELETE_PROP)",
      "right" : "if (ref.type == Ref.Type.DELETE_PROP)",
      "info" : "IfStatement[10206-10732]:IfStatement[10225-10751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10244-10359]:Block[10263-10378]"
    }, {
      "left" : "if (initialized)",
      "right" : "if (initialized)",
      "info" : "IfStatement[10258-10347]:IfStatement[10277-10366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10275-10347]:Block[10294-10366]"
    }, {
      "left" : "warnAboutNamespaceRedefinition(name, ref);",
      "right" : "warnAboutNamespaceRedefinition(name, ref);",
      "info" : "ExpressionStatement[10291-10333]:ExpressionStatement[10310-10352]"
    }, {
      "left" : "if (\n              ref.type == Ref.Type.SET_FROM_GLOBAL ||\n              ref.type == Ref.Type.SET_FROM_LOCAL)",
      "right" : "if (\n              ref.type == Ref.Type.SET_FROM_GLOBAL ||\n              ref.type == Ref.Type.SET_FROM_LOCAL)",
      "info" : "IfStatement[10365-10732]:IfStatement[10384-10751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10475-10623]:Block[10494-10642]"
    }, {
      "left" : "if (initialized)",
      "right" : "if (initialized)",
      "info" : "IfStatement[10489-10578]:IfStatement[10508-10597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10506-10578]:Block[10525-10597]"
    }, {
      "left" : "warnAboutNamespaceRedefinition(name, ref);",
      "right" : "warnAboutNamespaceRedefinition(name, ref);",
      "info" : "ExpressionStatement[10522-10564]:ExpressionStatement[10541-10583]"
    }, {
      "left" : "initialized = true;",
      "right" : "initialized = true;",
      "info" : "ExpressionStatement[10592-10611]:ExpressionStatement[10611-10630]"
    }, {
      "left" : "if (ref.type == Ref.Type.ALIASING_GET)",
      "right" : "if (ref.type == Ref.Type.ALIASING_GET)",
      "info" : "IfStatement[10629-10732]:IfStatement[10648-10751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10668-10732]:Block[10687-10751]"
    }, {
      "left" : "warnAboutNamespaceAliasing(name, ref);",
      "right" : "warnAboutNamespaceAliasing(name, ref);",
      "info" : "ExpressionStatement[10682-10720]:ExpressionStatement[10701-10739]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10943-10950]:Modifier[10962-10969]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10951-10955]:PrimitiveType[10970-10974]"
    }, {
      "left" : "warnAboutNamespaceAliasing",
      "right" : "warnAboutNamespaceAliasing",
      "info" : "SimpleName[10956-10982]:SimpleName[10975-11001]"
    }, {
      "left" : "Name nameObj",
      "right" : "Name nameObj",
      "info" : "SingleVariableDeclaration[10983-10995]:SingleVariableDeclaration[11002-11014]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[10997-11004]:SingleVariableDeclaration[11016-11023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11006-11156]:Block[11025-11175]"
    }, {
      "left" : "compiler.report(\n        JSError.make(ref.getSourceName(), ref.node,\n                     UNSAFE_NAMESPACE_WARNING, nameObj.getFullName()));",
      "right" : "compiler.report(\n        JSError.make(ref.getSourceName(), ref.node,\n                     UNSAFE_NAMESPACE_WARNING, nameObj.getFullName()));",
      "info" : "ExpressionStatement[11012-11152]:ExpressionStatement[11031-11171]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11344-11351]:Modifier[11363-11370]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11352-11356]:PrimitiveType[11371-11375]"
    }, {
      "left" : "warnAboutNamespaceRedefinition",
      "right" : "warnAboutNamespaceRedefinition",
      "info" : "SimpleName[11357-11387]:SimpleName[11376-11406]"
    }, {
      "left" : "Name nameObj",
      "right" : "Name nameObj",
      "info" : "SingleVariableDeclaration[11388-11400]:SingleVariableDeclaration[11407-11419]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[11402-11409]:SingleVariableDeclaration[11421-11428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11411-11564]:Block[11430-11583]"
    }, {
      "left" : "compiler.report(\n        JSError.make(ref.getSourceName(), ref.node,\n                     NAMESPACE_REDEFINED_WARNING, nameObj.getFullName()));",
      "right" : "compiler.report(\n        JSError.make(ref.getSourceName(), ref.node,\n                     NAMESPACE_REDEFINED_WARNING, nameObj.getFullName()));",
      "info" : "ExpressionStatement[11417-11560]:ExpressionStatement[11436-11579]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11820-11827]:Modifier[11839-11846]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11828-11832]:PrimitiveType[11847-11851]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames",
      "right" : "flattenReferencesToCollapsibleDescendantNames",
      "info" : "SimpleName[11833-11878]:SimpleName[11852-11897]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[11886-11892]:SingleVariableDeclaration[11905-11911]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[11894-11906]:SingleVariableDeclaration[11913-11925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11908-12300]:Block[11927-12319]"
    }, {
      "left" : "if (n.props == null)",
      "right" : "if (n.props == null)",
      "info" : "IfStatement[11914-11942]:IfStatement[11933-11961]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[11935-11942]:ReturnStatement[11954-11961]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[11948-12296]:EnhancedForStatement[11967-12315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11971-12296]:Block[11990-12315]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, p.getBaseName());",
      "right" : "String propAlias = appendPropForAlias(alias, p.getBaseName());",
      "info" : "VariableDeclarationStatement[11979-12041]:VariableDeclarationStatement[11998-12060]"
    }, {
      "left" : "if (p.canCollapse())",
      "right" : "if (p.canCollapse())",
      "info" : "IfStatement[12049-12222]:IfStatement[12068-12241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12070-12122]:Block[12089-12141]"
    }, {
      "left" : "flattenReferencesTo(p, propAlias);",
      "right" : "flattenReferencesTo(p, propAlias);",
      "info" : "ExpressionStatement[12080-12114]:ExpressionStatement[12099-12133]"
    }, {
      "left" : "if (p.isSimpleStubDeclaration())",
      "right" : "if (p.isSimpleStubDeclaration())",
      "info" : "IfStatement[12128-12222]:IfStatement[12147-12241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12161-12222]:Block[12180-12241]"
    }, {
      "left" : "flattenSimpleStubDeclaration(p, propAlias);",
      "right" : "flattenSimpleStubDeclaration(p, propAlias);",
      "info" : "ExpressionStatement[12171-12214]:ExpressionStatement[12190-12233]"
    }, {
      "left" : "flattenReferencesToCollapsibleDescendantNames(p, propAlias);",
      "right" : "flattenReferencesToCollapsibleDescendantNames(p, propAlias);",
      "info" : "ExpressionStatement[12230-12290]:ExpressionStatement[12249-12309]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12403-12410]:Modifier[12422-12429]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12411-12415]:PrimitiveType[12430-12434]"
    }, {
      "left" : "flattenSimpleStubDeclaration",
      "right" : "flattenSimpleStubDeclaration",
      "info" : "SimpleName[12416-12444]:SimpleName[12435-12463]"
    }, {
      "left" : "Name name",
      "right" : "Name name",
      "info" : "SingleVariableDeclaration[12445-12454]:SingleVariableDeclaration[12464-12473]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[12456-12468]:SingleVariableDeclaration[12475-12487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12470-12952]:Block[12489-12971]"
    }, {
      "left" : "Ref ref = Iterables.getOnlyElement(name.getRefs());",
      "right" : "Ref ref = Iterables.getOnlyElement(name.getRefs());",
      "info" : "VariableDeclarationStatement[12476-12527]:VariableDeclarationStatement[12495-12546]"
    }, {
      "left" : "Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, ref.node,\n        name.getFullName());",
      "right" : "Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, ref.node,\n        name.getFullName());",
      "info" : "VariableDeclarationStatement[12532-12651]:VariableDeclarationStatement[12551-12670]"
    }, {
      "left" : "Node varNode = IR.var(nameNode).copyInformationFrom(nameNode);",
      "right" : "Node varNode = IR.var(nameNode).copyInformationFrom(nameNode);",
      "info" : "VariableDeclarationStatement[12656-12718]:VariableDeclarationStatement[12675-12737]"
    }, {
      "left" : "Preconditions.checkState(\n        ref.node.getParent().isExprResult());",
      "right" : "Preconditions.checkState(\n        ref.node.getParent().isExprResult());",
      "info" : "ExpressionStatement[12724-12795]:ExpressionStatement[12743-12814]"
    }, {
      "left" : "Node parent = ref.node.getParent();",
      "right" : "Node parent = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[12800-12835]:VariableDeclarationStatement[12819-12854]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[12840-12873]:VariableDeclarationStatement[12859-12892]"
    }, {
      "left" : "gramps.replaceChild(parent, varNode);",
      "right" : "gramps.replaceChild(parent, varNode);",
      "info" : "ExpressionStatement[12878-12915]:ExpressionStatement[12897-12934]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[12920-12948]:ExpressionStatement[12939-12967]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13208-13215]:Modifier[13227-13234]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13216-13220]:PrimitiveType[13235-13239]"
    }, {
      "left" : "flattenReferencesTo",
      "right" : "flattenReferencesTo",
      "info" : "SimpleName[13221-13240]:SimpleName[13240-13259]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[13241-13247]:SingleVariableDeclaration[13260-13266]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[13249-13261]:SingleVariableDeclaration[13268-13280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13263-14355]:Block[13282-14374]"
    }, {
      "left" : "String originalName = n.getFullName();",
      "right" : "String originalName = n.getFullName();",
      "info" : "VariableDeclarationStatement[13269-13307]:VariableDeclarationStatement[13288-13326]"
    }, {
      "left" : "for (Ref r : n.getRefs())",
      "right" : "for (Ref r : n.getRefs())",
      "info" : "EnhancedForStatement[13312-14013]:EnhancedForStatement[13331-14032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13338-14013]:Block[13357-14032]"
    }, {
      "left" : "if (r == n.getDeclaration())",
      "right" : "if (r == n.getDeclaration())",
      "info" : "IfStatement[13346-13450]:IfStatement[13365-13469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13375-13450]:Block[13394-13469]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[13433-13442]:ContinueStatement[13452-13461]"
    }, {
      "left" : "Node rParent = r.node.getParent();",
      "right" : "Node rParent = r.node.getParent();",
      "info" : "VariableDeclarationStatement[13458-13492]:VariableDeclarationStatement[13477-13511]"
    }, {
      "left" : "if (!NodeUtil.isObjectLitKey(r.node) &&\n          (r.getTwin() == null || r.isSet()))",
      "right" : "if (!NodeUtil.isObjectLitKey(r.node) &&\n          (r.getTwin() == null || r.isSet()))",
      "info" : "IfStatement[13850-14007]:IfStatement[13869-14026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13936-14007]:Block[13955-14026]"
    }, {
      "left" : "flattenNameRef(alias, r.node, rParent, originalName);",
      "right" : "flattenNameRef(alias, r.node, rParent, originalName);",
      "info" : "ExpressionStatement[13946-13999]:ExpressionStatement[13965-14018]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[14246-14351]:IfStatement[14265-14370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14267-14351]:Block[14286-14370]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[14275-14345]:EnhancedForStatement[14294-14364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14298-14345]:Block[14317-14364]"
    }, {
      "left" : "flattenPrefixes(alias, p, 1);",
      "right" : "flattenPrefixes(alias, p, 1);",
      "info" : "ExpressionStatement[14308-14337]:ExpressionStatement[14327-14356]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14696-14703]:Modifier[14715-14722]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14704-14708]:PrimitiveType[14723-14727]"
    }, {
      "left" : "flattenPrefixes",
      "right" : "flattenPrefixes",
      "info" : "SimpleName[14709-14724]:SimpleName[14728-14743]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[14725-14737]:SingleVariableDeclaration[14744-14756]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[14739-14745]:SingleVariableDeclaration[14758-14764]"
    }, {
      "left" : "int depth",
      "right" : "int depth",
      "info" : "SingleVariableDeclaration[14747-14756]:SingleVariableDeclaration[14766-14775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14758-15633]:Block[14777-15652]"
    }, {
      "left" : "String originalName = n.getFullName();",
      "right" : "String originalName = n.getFullName();",
      "info" : "VariableDeclarationStatement[14907-14945]:VariableDeclarationStatement[14926-14964]"
    }, {
      "left" : "Ref decl = n.getDeclaration();",
      "right" : "Ref decl = n.getDeclaration();",
      "info" : "VariableDeclarationStatement[14950-14980]:VariableDeclarationStatement[14969-14999]"
    }, {
      "left" : "if (decl != null && decl.node != null &&\n        decl.node.isGetProp())",
      "right" : "if (decl != null && decl.node != null &&\n        decl.node.isGetProp())",
      "info" : "IfStatement[14985-15132]:IfStatement[15004-15151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15057-15132]:Block[15076-15151]"
    }, {
      "left" : "flattenNameRefAtDepth(alias, decl.node, depth, originalName);",
      "right" : "flattenNameRefAtDepth(alias, decl.node, depth, originalName);",
      "info" : "ExpressionStatement[15065-15126]:ExpressionStatement[15084-15145]"
    }, {
      "left" : "for (Ref r : n.getRefs())",
      "right" : "for (Ref r : n.getRefs())",
      "info" : "EnhancedForStatement[15138-15510]:EnhancedForStatement[15157-15529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15164-15510]:Block[15183-15529]"
    }, {
      "left" : "if (r == decl)",
      "right" : "if (r == decl)",
      "info" : "IfStatement[15172-15262]:IfStatement[15191-15281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15187-15262]:Block[15206-15281]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[15245-15254]:ContinueStatement[15264-15273]"
    }, {
      "left" : "if (r.getTwin() == null || r.isSet())",
      "right" : "if (r.getTwin() == null || r.isSet())",
      "info" : "IfStatement[15390-15504]:IfStatement[15409-15523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15428-15504]:Block[15447-15523]"
    }, {
      "left" : "flattenNameRefAtDepth(alias, r.node, depth, originalName);",
      "right" : "flattenNameRefAtDepth(alias, r.node, depth, originalName);",
      "info" : "ExpressionStatement[15438-15496]:ExpressionStatement[15457-15515]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[15516-15629]:IfStatement[15535-15648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15537-15629]:Block[15556-15648]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[15545-15623]:EnhancedForStatement[15564-15642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15568-15623]:Block[15587-15642]"
    }, {
      "left" : "flattenPrefixes(alias, p, depth + 1);",
      "right" : "flattenPrefixes(alias, p, depth + 1);",
      "info" : "ExpressionStatement[15578-15615]:ExpressionStatement[15597-15634]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16014-16021]:Modifier[16033-16040]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16022-16026]:PrimitiveType[16041-16045]"
    }, {
      "left" : "flattenNameRefAtDepth",
      "right" : "flattenNameRefAtDepth",
      "info" : "SimpleName[16027-16048]:SimpleName[16046-16067]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[16049-16061]:SingleVariableDeclaration[16068-16080]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[16063-16069]:SingleVariableDeclaration[16082-16088]"
    }, {
      "left" : "int depth",
      "right" : "int depth",
      "info" : "SingleVariableDeclaration[16071-16080]:SingleVariableDeclaration[16090-16099]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[16088-16107]:SingleVariableDeclaration[16107-16126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16109-16762]:Block[16128-16781]"
    }, {
      "left" : "int nType = n.getType();",
      "right" : "int nType = n.getType();",
      "info" : "VariableDeclarationStatement[16336-16360]:VariableDeclarationStatement[16355-16379]"
    }, {
      "left" : "boolean isQName = nType == Token.NAME || nType == Token.GETPROP;",
      "right" : "boolean isQName = nType == Token.NAME || nType == Token.GETPROP;",
      "info" : "VariableDeclarationStatement[16365-16429]:VariableDeclarationStatement[16384-16448]"
    }, {
      "left" : "boolean isObjKey = NodeUtil.isObjectLitKey(n);",
      "right" : "boolean isObjKey = NodeUtil.isObjectLitKey(n);",
      "info" : "VariableDeclarationStatement[16434-16480]:VariableDeclarationStatement[16453-16499]"
    }, {
      "left" : "Preconditions.checkState(isObjKey || isQName);",
      "right" : "Preconditions.checkState(isObjKey || isQName);",
      "info" : "ExpressionStatement[16485-16531]:ExpressionStatement[16504-16550]"
    }, {
      "left" : "if (isQName)",
      "right" : "if (isQName)",
      "info" : "IfStatement[16536-16758]:IfStatement[16555-16777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16549-16758]:Block[16568-16777]"
    }, {
      "left" : "for (int i = 1; i < depth && n.hasChildren(); i++)",
      "right" : "for (int i = 1; i < depth && n.hasChildren(); i++)",
      "info" : "ForStatement[16557-16648]:ForStatement[16576-16667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16608-16648]:Block[16627-16667]"
    }, {
      "left" : "n = n.getFirstChild();",
      "right" : "n = n.getFirstChild();",
      "info" : "ExpressionStatement[16618-16640]:ExpressionStatement[16637-16659]"
    }, {
      "left" : "if (n.hasChildren())",
      "right" : "if (n.hasChildren())",
      "info" : "IfStatement[16655-16752]:IfStatement[16674-16771]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16676-16752]:Block[16695-16771]"
    }, {
      "left" : "flattenNameRef(alias, n.getFirstChild(), n, originalName);",
      "right" : "flattenNameRef(alias, n.getFirstChild(), n, originalName);",
      "info" : "ExpressionStatement[16686-16744]:ExpressionStatement[16705-16763]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17066-17073]:Modifier[17085-17092]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17074-17078]:PrimitiveType[17093-17097]"
    }, {
      "left" : "flattenNameRef",
      "right" : "flattenNameRef",
      "info" : "SimpleName[17079-17093]:SimpleName[17098-17112]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[17094-17106]:SingleVariableDeclaration[17113-17125]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[17108-17114]:SingleVariableDeclaration[17127-17133]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[17116-17127]:SingleVariableDeclaration[17135-17146]"
    }, {
      "left" : "String originalName",
      "right" : "String originalName",
      "info" : "SingleVariableDeclaration[17135-17154]:SingleVariableDeclaration[17154-17173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17156-17887]:Block[17175-17906]"
    }, {
      "left" : "Node ref = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, n, originalName);",
      "right" : "Node ref = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, n, originalName);",
      "info" : "VariableDeclarationStatement[17309-17402]:VariableDeclarationStatement[17328-17421]"
    }, {
      "left" : "NodeUtil.copyNameAnnotations(n.getLastChild(), ref);",
      "right" : "NodeUtil.copyNameAnnotations(n.getLastChild(), ref);",
      "info" : "ExpressionStatement[17407-17459]:ExpressionStatement[17426-17478]"
    }, {
      "left" : "if (parent.isCall() && n == parent.getFirstChild())",
      "right" : "if (parent.isCall() && n == parent.getFirstChild())",
      "info" : "IfStatement[17464-17726]:IfStatement[17483-17745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17516-17726]:Block[17535-17745]"
    }, {
      "left" : "parent.putBooleanProp(Node.FREE_CALL, true);",
      "right" : "parent.putBooleanProp(Node.FREE_CALL, true);",
      "info" : "ExpressionStatement[17676-17720]:ExpressionStatement[17695-17739]"
    }, {
      "left" : "JSType type = n.getJSType();",
      "right" : "JSType type = n.getJSType();",
      "info" : "VariableDeclarationStatement[17732-17760]:VariableDeclarationStatement[17751-17779]"
    }, {
      "left" : "if (type != null)",
      "right" : "if (type != null)",
      "info" : "IfStatement[17765-17817]:IfStatement[17784-17836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17783-17817]:Block[17802-17836]"
    }, {
      "left" : "ref.setJSType(type);",
      "right" : "ref.setJSType(type);",
      "info" : "ExpressionStatement[17791-17811]:ExpressionStatement[17810-17830]"
    }, {
      "left" : "parent.replaceChild(n, ref);",
      "right" : "parent.replaceChild(n, ref);",
      "info" : "ExpressionStatement[17822-17850]:ExpressionStatement[17841-17869]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[17855-17883]:ExpressionStatement[17874-17902]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18181-18188]:Modifier[18200-18207]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18189-18193]:PrimitiveType[18208-18212]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants",
      "right" : "collapseDeclarationOfNameAndDescendants",
      "info" : "SimpleName[18194-18233]:SimpleName[18213-18252]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[18234-18240]:SingleVariableDeclaration[18253-18259]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[18242-18254]:SingleVariableDeclaration[18261-18273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18256-19201]:Block[18275-19220]"
    }, {
      "left" : "boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();",
      "right" : "boolean canCollapseChildNames = n.canCollapseUnannotatedChildNames();",
      "info" : "VariableDeclarationStatement[18262-18331]:VariableDeclarationStatement[18281-18350]"
    }, {
      "left" : "if (n.canCollapse())",
      "right" : "if (n.canCollapse())",
      "info" : "IfStatement[18412-18514]:IfStatement[18431-18533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18433-18514]:Block[18452-18533]"
    }, {
      "left" : "updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);",
      "right" : "updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);",
      "info" : "ExpressionStatement[18441-18508]:ExpressionStatement[18460-18527]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[18520-19197]:IfStatement[18539-19216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18541-19197]:Block[18560-19216]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[18549-19191]:EnhancedForStatement[18568-19210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18572-19191]:Block[18591-19210]"
    }, {
      "left" : "collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.getBaseName()));",
      "right" : "collapseDeclarationOfNameAndDescendants(\n            p, appendPropForAlias(alias, p.getBaseName()));",
      "info" : "ExpressionStatement[18661-18761]:ExpressionStatement[18680-18780]"
    }, {
      "left" : "if (!p.inExterns && canCollapseChildNames &&\n            p.getDeclaration() != null &&\n            p.canCollapse() &&\n            p.getDeclaration().node != null &&\n            p.getDeclaration().node.getParent() != null &&\n            p.getDeclaration().node.getParent().isAssign())",
      "right" : "if (!p.inExterns && canCollapseChildNames &&\n            p.getDeclaration() != null &&\n            p.canCollapse() &&\n            p.getDeclaration().node != null &&\n            p.getDeclaration().node.getParent() != null &&\n            p.getDeclaration().node.getParent().isAssign())",
      "info" : "IfStatement[18771-19183]:IfStatement[18790-19202]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19055-19183]:Block[19074-19202]"
    }, {
      "left" : "updateSimpleDeclaration(\n              appendPropForAlias(alias, p.getBaseName()), p, p.getDeclaration());",
      "right" : "updateSimpleDeclaration(\n              appendPropForAlias(alias, p.getBaseName()), p, p.getDeclaration());",
      "info" : "ExpressionStatement[19067-19173]:ExpressionStatement[19086-19192]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19720-19727]:Modifier[19739-19746]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19728-19732]:PrimitiveType[19747-19751]"
    }, {
      "left" : "updateSimpleDeclaration",
      "right" : "updateSimpleDeclaration",
      "info" : "SimpleName[19733-19756]:SimpleName[19752-19775]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[19757-19769]:SingleVariableDeclaration[19776-19788]"
    }, {
      "left" : "Name refName",
      "right" : "Name refName",
      "info" : "SingleVariableDeclaration[19771-19783]:SingleVariableDeclaration[19790-19802]"
    }, {
      "left" : "Ref ref",
      "right" : "Ref ref",
      "info" : "SingleVariableDeclaration[19785-19792]:SingleVariableDeclaration[19804-19811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19794-21662]:Block[19813-21681]"
    }, {
      "left" : "Node rvalue = ref.node.getNext();",
      "right" : "Node rvalue = ref.node.getNext();",
      "info" : "VariableDeclarationStatement[19800-19833]:VariableDeclarationStatement[19819-19852]"
    }, {
      "left" : "Node parent = ref.node.getParent();",
      "right" : "Node parent = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[19838-19873]:VariableDeclarationStatement[19857-19892]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[19878-19911]:VariableDeclarationStatement[19897-19930]"
    }, {
      "left" : "Node greatGramps = gramps.getParent();",
      "right" : "Node greatGramps = gramps.getParent();",
      "info" : "VariableDeclarationStatement[19916-19954]:VariableDeclarationStatement[19935-19973]"
    }, {
      "left" : "if (rvalue != null && rvalue.isFunction())",
      "right" : "if (rvalue != null && rvalue.isFunction())",
      "info" : "IfStatement[19960-20079]:IfStatement[19979-20098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20003-20079]:Block[20022-20098]"
    }, {
      "left" : "checkForHosedThisReferences(rvalue, refName.docInfo, refName);",
      "right" : "checkForHosedThisReferences(rvalue, refName.docInfo, refName);",
      "info" : "ExpressionStatement[20011-20073]:ExpressionStatement[20030-20092]"
    }, {
      "left" : "Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.getFullName());",
      "right" : "Node nameNode = NodeUtil.newName(\n        compiler.getCodingConvention(), alias, gramps.getFirstChild(),\n        refName.getFullName());",
      "info" : "VariableDeclarationStatement[20119-20255]:VariableDeclarationStatement[20138-20274]"
    }, {
      "left" : "NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);",
      "right" : "NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);",
      "info" : "ExpressionStatement[20260-20324]:ExpressionStatement[20279-20343]"
    }, {
      "left" : "if (gramps.isExprResult())",
      "right" : "if (gramps.isExprResult())",
      "info" : "IfStatement[20330-21624]:IfStatement[20349-21643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20357-20874]:Block[20376-20893]"
    }, {
      "left" : "parent.removeChild(rvalue);",
      "right" : "parent.removeChild(rvalue);",
      "info" : "ExpressionStatement[20712-20739]:ExpressionStatement[20731-20758]"
    }, {
      "left" : "nameNode.addChildToFront(rvalue);",
      "right" : "nameNode.addChildToFront(rvalue);",
      "info" : "ExpressionStatement[20746-20779]:ExpressionStatement[20765-20798]"
    }, {
      "left" : "Node varNode = IR.var(nameNode);",
      "right" : "Node varNode = IR.var(nameNode);",
      "info" : "VariableDeclarationStatement[20787-20819]:VariableDeclarationStatement[20806-20838]"
    }, {
      "left" : "greatGramps.replaceChild(gramps, varNode);",
      "right" : "greatGramps.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[20826-20868]:ExpressionStatement[20845-20887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20880-21624]:Block[20899-21643]"
    }, {
      "left" : "Preconditions.checkNotNull(ref.getTwin());",
      "right" : "Preconditions.checkNotNull(ref.getTwin());",
      "info" : "ExpressionStatement[20932-20974]:ExpressionStatement[20951-20993]"
    }, {
      "left" : "Node current = gramps;",
      "right" : "Node current = gramps;",
      "info" : "VariableDeclarationStatement[21091-21113]:VariableDeclarationStatement[21110-21132]"
    }, {
      "left" : "Node currentParent = gramps.getParent();",
      "right" : "Node currentParent = gramps.getParent();",
      "info" : "VariableDeclarationStatement[21120-21160]:VariableDeclarationStatement[21139-21179]"
    }, {
      "left" : "for (; !currentParent.isScript() &&\n             !currentParent.isBlock();\n           current = currentParent,\n           currentParent = currentParent.getParent())",
      "right" : "for (; !currentParent.isScript() &&\n             !currentParent.isBlock();\n           current = currentParent,\n           currentParent = currentParent.getParent())",
      "info" : "ForStatement[21167-21334]:ForStatement[21186-21353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21332-21334]:Block[21351-21353]"
    }, {
      "left" : "Node stubVar = IR.var(nameNode.cloneTree())\n          .copyInformationFrom(nameNode);",
      "right" : "Node stubVar = IR.var(nameNode.cloneTree())\n          .copyInformationFrom(nameNode);",
      "info" : "VariableDeclarationStatement[21431-21516]:VariableDeclarationStatement[21450-21535]"
    }, {
      "left" : "currentParent.addChildBefore(stubVar, current);",
      "right" : "currentParent.addChildBefore(stubVar, current);",
      "info" : "ExpressionStatement[21523-21570]:ExpressionStatement[21542-21589]"
    }, {
      "left" : "parent.replaceChild(ref.node, nameNode);",
      "right" : "parent.replaceChild(ref.node, nameNode);",
      "info" : "ExpressionStatement[21578-21618]:ExpressionStatement[21597-21637]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[21630-21658]:ExpressionStatement[21649-21677]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22690-22697]:Modifier[22709-22716]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[22698-22702]:PrimitiveType[22717-22721]"
    }, {
      "left" : "updateObjLitOrFunctionDeclaration",
      "right" : "updateObjLitOrFunctionDeclaration",
      "info" : "SimpleName[22703-22736]:SimpleName[22722-22755]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[22744-22750]:SingleVariableDeclaration[22763-22769]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[22752-22764]:SingleVariableDeclaration[22771-22783]"
    }, {
      "left" : "boolean canCollapseChildNames",
      "right" : "boolean canCollapseChildNames",
      "info" : "SingleVariableDeclaration[22766-22795]:SingleVariableDeclaration[22785-22814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22797-23554]:Block[22816-23573]"
    }, {
      "left" : "Ref decl = n.getDeclaration();",
      "right" : "Ref decl = n.getDeclaration();",
      "info" : "VariableDeclarationStatement[22803-22833]:VariableDeclarationStatement[22822-22852]"
    }, {
      "left" : "if (decl == null)",
      "right" : "if (decl == null)",
      "info" : "IfStatement[22838-22979]:IfStatement[22857-22998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22856-22979]:Block[22875-22998]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[22966-22973]:ReturnStatement[22985-22992]"
    }, {
      "left" : "if (decl.getTwin() != null)",
      "right" : "if (decl.getTwin() != null)",
      "info" : "IfStatement[22985-23123]:IfStatement[23004-23142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23013-23123]:Block[23032-23142]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[23110-23117]:ReturnStatement[23129-23136]"
    }, {
      "left" : "switch (decl.node.getParent().getType()) {\n      case Token.ASSIGN:\n        updateObjLitOrFunctionDeclarationAtAssignNode(\n            n, alias, canCollapseChildNames);\n        break;\n      case Token.VAR:\n        updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);\n        break;\n      case Token.FUNCTION:\n        updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);\n        break;\n    }",
      "right" : "switch (decl.node.getParent().getType()) {\n      case Token.ASSIGN:\n        updateObjLitOrFunctionDeclarationAtAssignNode(\n            n, alias, canCollapseChildNames);\n        break;\n      case Token.VAR:\n        updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);\n        break;\n      case Token.FUNCTION:\n        updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);\n        break;\n    }",
      "info" : "SwitchStatement[23129-23550]:SwitchStatement[23148-23569]"
    }, {
      "left" : "case Token.ASSIGN:",
      "right" : "case Token.ASSIGN:",
      "info" : "SwitchCase[23178-23196]:SwitchCase[23197-23215]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtAssignNode(\n            n, alias, canCollapseChildNames);",
      "right" : "updateObjLitOrFunctionDeclarationAtAssignNode(\n            n, alias, canCollapseChildNames);",
      "info" : "ExpressionStatement[23205-23297]:ExpressionStatement[23224-23316]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23306-23312]:BreakStatement[23325-23331]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[23319-23334]:SwitchCase[23338-23353]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);",
      "right" : "updateObjLitOrFunctionDeclarationAtVarNode(n, canCollapseChildNames);",
      "info" : "ExpressionStatement[23343-23412]:ExpressionStatement[23362-23431]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23421-23427]:BreakStatement[23440-23446]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[23434-23454]:SwitchCase[23453-23473]"
    }, {
      "left" : "updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);",
      "right" : "updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);",
      "info" : "ExpressionStatement[23463-23529]:ExpressionStatement[23482-23548]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23538-23544]:BreakStatement[23557-23563]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23895-23902]:Modifier[23914-23921]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23903-23907]:PrimitiveType[23922-23926]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtAssignNode",
      "right" : "updateObjLitOrFunctionDeclarationAtAssignNode",
      "info" : "SimpleName[23908-23953]:SimpleName[23927-23972]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[23961-23967]:SingleVariableDeclaration[23980-23986]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[23969-23981]:SingleVariableDeclaration[23988-24000]"
    }, {
      "left" : "boolean canCollapseChildNames",
      "right" : "boolean canCollapseChildNames",
      "info" : "SingleVariableDeclaration[23983-24012]:SingleVariableDeclaration[24002-24031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24014-26076]:Block[24033-26095]"
    }, {
      "left" : "Ref ref = n.getDeclaration();",
      "right" : "Ref ref = n.getDeclaration();",
      "info" : "VariableDeclarationStatement[24223-24252]:VariableDeclarationStatement[24242-24271]"
    }, {
      "left" : "Node rvalue = ref.node.getNext();",
      "right" : "Node rvalue = ref.node.getNext();",
      "info" : "VariableDeclarationStatement[24257-24290]:VariableDeclarationStatement[24276-24309]"
    }, {
      "left" : "Node varNode = new Node(Token.VAR);",
      "right" : "Node varNode = new Node(Token.VAR);",
      "info" : "VariableDeclarationStatement[24295-24330]:VariableDeclarationStatement[24314-24349]"
    }, {
      "left" : "Node varParent = ref.node.getAncestor(3);",
      "right" : "Node varParent = ref.node.getAncestor(3);",
      "info" : "VariableDeclarationStatement[24335-24376]:VariableDeclarationStatement[24354-24395]"
    }, {
      "left" : "Node gramps = ref.node.getAncestor(2);",
      "right" : "Node gramps = ref.node.getAncestor(2);",
      "info" : "VariableDeclarationStatement[24381-24419]:VariableDeclarationStatement[24400-24438]"
    }, {
      "left" : "boolean isObjLit = rvalue.isObjectLit();",
      "right" : "boolean isObjLit = rvalue.isObjectLit();",
      "info" : "VariableDeclarationStatement[24424-24464]:VariableDeclarationStatement[24443-24483]"
    }, {
      "left" : "boolean insertedVarNode = false;",
      "right" : "boolean insertedVarNode = false;",
      "info" : "VariableDeclarationStatement[24469-24501]:VariableDeclarationStatement[24488-24520]"
    }, {
      "left" : "if (isObjLit && n.canEliminate())",
      "right" : "if (isObjLit && n.canEliminate())",
      "info" : "IfStatement[24507-25645]:IfStatement[24526-25664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24541-24699]:Block[24560-24718]"
    }, {
      "left" : "varParent.replaceChild(gramps, varNode);",
      "right" : "varParent.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[24599-24639]:ExpressionStatement[24618-24658]"
    }, {
      "left" : "ref.node = null;",
      "right" : "ref.node = null;",
      "info" : "ExpressionStatement[24646-24662]:ExpressionStatement[24665-24681]"
    }, {
      "left" : "insertedVarNode = true;",
      "right" : "insertedVarNode = true;",
      "info" : "ExpressionStatement[24669-24692]:ExpressionStatement[24688-24711]"
    }, {
      "left" : "if (!n.isSimpleName())",
      "right" : "if (!n.isSimpleName())",
      "info" : "IfStatement[24705-25645]:IfStatement[24724-25664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24728-25645]:Block[24747-25664]"
    }, {
      "left" : "if (rvalue.isFunction())",
      "right" : "if (rvalue.isFunction())",
      "info" : "IfStatement[24784-24877]:IfStatement[24803-24896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24809-24877]:Block[24828-24896]"
    }, {
      "left" : "checkForHosedThisReferences(rvalue, n.docInfo, n);",
      "right" : "checkForHosedThisReferences(rvalue, n.docInfo, n);",
      "info" : "ExpressionStatement[24819-24869]:ExpressionStatement[24838-24888]"
    }, {
      "left" : "ref.node.getParent().removeChild(rvalue);",
      "right" : "ref.node.getParent().removeChild(rvalue);",
      "info" : "ExpressionStatement[24885-24926]:ExpressionStatement[24904-24945]"
    }, {
      "left" : "Node nameNode = NodeUtil.newName(\n          compiler.getCodingConvention(),\n          alias, ref.node.getAncestor(2), n.getFullName());",
      "right" : "Node nameNode = NodeUtil.newName(\n          compiler.getCodingConvention(),\n          alias, ref.node.getAncestor(2), n.getFullName());",
      "info" : "VariableDeclarationStatement[24934-25069]:VariableDeclarationStatement[24953-25088]"
    }, {
      "left" : "JSDocInfo info = ref.node.getParent().getJSDocInfo();",
      "right" : "JSDocInfo info = ref.node.getParent().getJSDocInfo();",
      "info" : "VariableDeclarationStatement[25077-25130]:VariableDeclarationStatement[25096-25149]"
    }, {
      "left" : "if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME) ||\n          (info != null && info.isConstant()))",
      "right" : "if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME) ||\n          (info != null && info.isConstant()))",
      "info" : "IfStatement[25137-25324]:IfStatement[25156-25343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25253-25324]:Block[25272-25343]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[25263-25316]:ExpressionStatement[25282-25335]"
    }, {
      "left" : "if (info != null)",
      "right" : "if (info != null)",
      "info" : "IfStatement[25332-25395]:IfStatement[25351-25414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25350-25395]:Block[25369-25414]"
    }, {
      "left" : "varNode.setJSDocInfo(info);",
      "right" : "varNode.setJSDocInfo(info);",
      "info" : "ExpressionStatement[25360-25387]:ExpressionStatement[25379-25406]"
    }, {
      "left" : "varNode.addChildToBack(nameNode);",
      "right" : "varNode.addChildToBack(nameNode);",
      "info" : "ExpressionStatement[25402-25435]:ExpressionStatement[25421-25454]"
    }, {
      "left" : "nameNode.addChildToFront(rvalue);",
      "right" : "nameNode.addChildToFront(rvalue);",
      "info" : "ExpressionStatement[25442-25475]:ExpressionStatement[25461-25494]"
    }, {
      "left" : "varParent.replaceChild(gramps, varNode);",
      "right" : "varParent.replaceChild(gramps, varNode);",
      "info" : "ExpressionStatement[25482-25522]:ExpressionStatement[25501-25541]"
    }, {
      "left" : "ref.node = nameNode;",
      "right" : "ref.node = nameNode;",
      "info" : "ExpressionStatement[25589-25609]:ExpressionStatement[25608-25628]"
    }, {
      "left" : "insertedVarNode = true;",
      "right" : "insertedVarNode = true;",
      "info" : "ExpressionStatement[25616-25639]:ExpressionStatement[25635-25658]"
    }, {
      "left" : "if (canCollapseChildNames)",
      "right" : "if (canCollapseChildNames)",
      "info" : "IfStatement[25651-25919]:IfStatement[25670-25938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25678-25919]:Block[25697-25938]"
    }, {
      "left" : "if (isObjLit)",
      "right" : "if (isObjLit)",
      "info" : "IfStatement[25686-25843]:IfStatement[25705-25862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25700-25843]:Block[25719-25862]"
    }, {
      "left" : "declareVarsForObjLitValues(\n            n, alias, rvalue,\n            varNode, varParent.getChildBefore(varNode), varParent);",
      "right" : "declareVarsForObjLitValues(\n            n, alias, rvalue,\n            varNode, varParent.getChildBefore(varNode), varParent);",
      "info" : "ExpressionStatement[25710-25835]:ExpressionStatement[25729-25854]"
    }, {
      "left" : "addStubsForUndeclaredProperties(n, alias, varParent, varNode);",
      "right" : "addStubsForUndeclaredProperties(n, alias, varParent, varNode);",
      "info" : "ExpressionStatement[25851-25913]:ExpressionStatement[25870-25932]"
    }, {
      "left" : "if (insertedVarNode)",
      "right" : "if (insertedVarNode)",
      "info" : "IfStatement[25925-26072]:IfStatement[25944-26091]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25946-26072]:Block[25965-26091]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[25954-26031]:IfStatement[25973-26050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25982-26031]:Block[26001-26050]"
    }, {
      "left" : "varParent.removeChild(varNode);",
      "right" : "varParent.removeChild(varNode);",
      "info" : "ExpressionStatement[25992-26023]:ExpressionStatement[26011-26042]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[26038-26066]:ExpressionStatement[26057-26085]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26228-26235]:Modifier[26247-26254]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26236-26240]:PrimitiveType[26255-26259]"
    }, {
      "left" : "checkForHosedThisReferences",
      "right" : "checkForHosedThisReferences",
      "info" : "SimpleName[26241-26268]:SimpleName[26260-26287]"
    }, {
      "left" : "Node function",
      "right" : "Node function",
      "info" : "SingleVariableDeclaration[26269-26282]:SingleVariableDeclaration[26288-26301]"
    }, {
      "left" : "JSDocInfo docInfo",
      "right" : "JSDocInfo docInfo",
      "info" : "SingleVariableDeclaration[26284-26301]:SingleVariableDeclaration[26303-26320]"
    }, {
      "left" : "final Name name",
      "right" : "final Name name",
      "info" : "SingleVariableDeclaration[26309-26324]:SingleVariableDeclaration[26328-26343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26326-27020]:Block[26345-27039]"
    }, {
      "left" : "if (docInfo == null ||\n        (!docInfo.isConstructor() && !docInfo.hasThisType()))",
      "right" : "if (docInfo == null ||\n        (!docInfo.isConstructor() && !docInfo.hasThisType()))",
      "info" : "IfStatement[26469-27016]:IfStatement[26488-27035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26554-27016]:Block[26573-27035]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, function.getLastChild(),\n          new NodeTraversal.AbstractShallowCallback() {\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.isThis()) {\n                compiler.report(\n                    JSError.make(name.getDeclaration().getSourceName(), n,\n                        UNSAFE_THIS, name.getFullName()));\n              }\n            }\n          });",
      "right" : "NodeTraversal.traverse(compiler, function.getLastChild(),\n          new NodeTraversal.AbstractShallowCallback() {\n            @Override\n            public void visit(NodeTraversal t, Node n, Node parent) {\n              if (n.isThis()) {\n                compiler.report(\n                    JSError.make(name.getDeclaration().getSourceName(), n,\n                        UNSAFE_THIS, name.getFullName()));\n              }\n            }\n          });",
      "info" : "ExpressionStatement[26562-27010]:ExpressionStatement[26581-27029]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26688-26697]:MarkerAnnotation[26707-26716]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26710-26716]:Modifier[26729-26735]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26717-26721]:PrimitiveType[26736-26740]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[26722-26727]:SimpleName[26741-26746]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[26728-26743]:SingleVariableDeclaration[26747-26762]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26745-26751]:SingleVariableDeclaration[26764-26770]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[26753-26764]:SingleVariableDeclaration[26772-26783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26766-26996]:Block[26785-27015]"
    }, {
      "left" : "if (n.isThis())",
      "right" : "if (n.isThis())",
      "info" : "IfStatement[26782-26982]:IfStatement[26801-27001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26798-26982]:Block[26817-27001]"
    }, {
      "left" : "compiler.report(\n                    JSError.make(name.getDeclaration().getSourceName(), n,\n                        UNSAFE_THIS, name.getFullName()));",
      "right" : "compiler.report(\n                    JSError.make(name.getDeclaration().getSourceName(), n,\n                        UNSAFE_THIS, name.getFullName()));",
      "info" : "ExpressionStatement[26816-26966]:ExpressionStatement[26835-26985]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27277-27284]:Modifier[27296-27303]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27285-27289]:PrimitiveType[27304-27308]"
    }, {
      "left" : "updateObjLitOrFunctionDeclarationAtVarNode",
      "right" : "updateObjLitOrFunctionDeclarationAtVarNode",
      "info" : "SimpleName[27290-27332]:SimpleName[27309-27351]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[27340-27346]:SingleVariableDeclaration[27359-27365]"
    }, {
      "left" : "boolean canCollapseChildNames",
      "right" : "boolean canCollapseChildNames",
      "info" : "SingleVariableDeclaration[27348-27377]:SingleVariableDeclaration[27367-27396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27379-28321]:Block[27398-28340]"
    }, {
      "left" : "if (!canCollapseChildNames)",
      "right" : "if (!canCollapseChildNames)",
      "info" : "IfStatement[27385-27434]:IfStatement[27404-27453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27413-27434]:Block[27432-27453]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27421-27428]:ReturnStatement[27440-27447]"
    }, {
      "left" : "Ref ref = n.getDeclaration();",
      "right" : "Ref ref = n.getDeclaration();",
      "info" : "VariableDeclarationStatement[27440-27469]:VariableDeclarationStatement[27459-27488]"
    }, {
      "left" : "String name = ref.node.getString();",
      "right" : "String name = ref.node.getString();",
      "info" : "VariableDeclarationStatement[27474-27509]:VariableDeclarationStatement[27493-27528]"
    }, {
      "left" : "Node rvalue = ref.node.getFirstChild();",
      "right" : "Node rvalue = ref.node.getFirstChild();",
      "info" : "VariableDeclarationStatement[27514-27553]:VariableDeclarationStatement[27533-27572]"
    }, {
      "left" : "Node varNode = ref.node.getParent();",
      "right" : "Node varNode = ref.node.getParent();",
      "info" : "VariableDeclarationStatement[27558-27594]:VariableDeclarationStatement[27577-27613]"
    }, {
      "left" : "Node gramps = varNode.getParent();",
      "right" : "Node gramps = varNode.getParent();",
      "info" : "VariableDeclarationStatement[27599-27633]:VariableDeclarationStatement[27618-27652]"
    }, {
      "left" : "boolean isObjLit = rvalue.isObjectLit();",
      "right" : "boolean isObjLit = rvalue.isObjectLit();",
      "info" : "VariableDeclarationStatement[27639-27679]:VariableDeclarationStatement[27658-27698]"
    }, {
      "left" : "int numChanges = 0;",
      "right" : "int numChanges = 0;",
      "info" : "VariableDeclarationStatement[27684-27703]:VariableDeclarationStatement[27703-27722]"
    }, {
      "left" : "if (isObjLit)",
      "right" : "if (isObjLit)",
      "info" : "IfStatement[27709-27865]:IfStatement[27728-27884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27723-27865]:Block[27742-27884]"
    }, {
      "left" : "numChanges += declareVarsForObjLitValues(\n          n, name, rvalue, varNode, gramps.getChildBefore(varNode),\n          gramps);",
      "right" : "numChanges += declareVarsForObjLitValues(\n          n, name, rvalue, varNode, gramps.getChildBefore(varNode),\n          gramps);",
      "info" : "ExpressionStatement[27731-27859]:ExpressionStatement[27750-27878]"
    }, {
      "left" : "numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);",
      "right" : "numChanges += addStubsForUndeclaredProperties(n, name, gramps, varNode);",
      "info" : "ExpressionStatement[27871-27943]:ExpressionStatement[27890-27962]"
    }, {
      "left" : "if (isObjLit && n.canEliminate())",
      "right" : "if (isObjLit && n.canEliminate())",
      "info" : "IfStatement[27949-28249]:IfStatement[27968-28268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27983-28249]:Block[28002-28268]"
    }, {
      "left" : "varNode.removeChild(ref.node);",
      "right" : "varNode.removeChild(ref.node);",
      "info" : "ExpressionStatement[27991-28021]:ExpressionStatement[28010-28040]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[28028-28102]:IfStatement[28047-28121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28056-28102]:Block[28075-28121]"
    }, {
      "left" : "gramps.removeChild(varNode);",
      "right" : "gramps.removeChild(varNode);",
      "info" : "ExpressionStatement[28066-28094]:ExpressionStatement[28085-28113]"
    }, {
      "left" : "numChanges++;",
      "right" : "numChanges++;",
      "info" : "ExpressionStatement[28109-28122]:ExpressionStatement[28128-28141]"
    }, {
      "left" : "ref.node = null;",
      "right" : "ref.node = null;",
      "info" : "ExpressionStatement[28227-28243]:ExpressionStatement[28246-28262]"
    }, {
      "left" : "if (numChanges > 0)",
      "right" : "if (numChanges > 0)",
      "info" : "IfStatement[28255-28317]:IfStatement[28274-28336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28275-28317]:Block[28294-28336]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[28283-28311]:ExpressionStatement[28302-28330]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[28583-28590]:Modifier[28602-28609]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28591-28595]:PrimitiveType[28610-28614]"
    }, {
      "left" : "updateFunctionDeclarationAtFunctionNode",
      "right" : "updateFunctionDeclarationAtFunctionNode",
      "info" : "SimpleName[28596-28635]:SimpleName[28615-28654]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[28643-28649]:SingleVariableDeclaration[28662-28668]"
    }, {
      "left" : "boolean canCollapseChildNames",
      "right" : "boolean canCollapseChildNames",
      "info" : "SingleVariableDeclaration[28651-28680]:SingleVariableDeclaration[28670-28699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28682-28922]:Block[28701-28941]"
    }, {
      "left" : "if (!canCollapseChildNames)",
      "right" : "if (!canCollapseChildNames)",
      "info" : "IfStatement[28688-28737]:IfStatement[28707-28756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28716-28737]:Block[28735-28756]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[28724-28731]:ReturnStatement[28743-28750]"
    }, {
      "left" : "Ref ref = n.getDeclaration();",
      "right" : "Ref ref = n.getDeclaration();",
      "info" : "VariableDeclarationStatement[28743-28772]:VariableDeclarationStatement[28762-28791]"
    }, {
      "left" : "String fnName = ref.node.getString();",
      "right" : "String fnName = ref.node.getString();",
      "info" : "VariableDeclarationStatement[28777-28814]:VariableDeclarationStatement[28796-28833]"
    }, {
      "left" : "addStubsForUndeclaredProperties(\n        n, fnName, ref.node.getAncestor(2), ref.node.getParent());",
      "right" : "addStubsForUndeclaredProperties(\n        n, fnName, ref.node.getAncestor(2), ref.node.getParent());",
      "info" : "ExpressionStatement[28819-28918]:ExpressionStatement[28838-28937]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[29516-29523]:Modifier[29535-29542]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29524-29527]:PrimitiveType[29543-29546]"
    }, {
      "left" : "declareVarsForObjLitValues",
      "right" : "declareVarsForObjLitValues",
      "info" : "SimpleName[29528-29554]:SimpleName[29547-29573]"
    }, {
      "left" : "Name objlitName",
      "right" : "Name objlitName",
      "info" : "SingleVariableDeclaration[29562-29577]:SingleVariableDeclaration[29581-29596]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[29579-29591]:SingleVariableDeclaration[29598-29610]"
    }, {
      "left" : "Node objlit",
      "right" : "Node objlit",
      "info" : "SingleVariableDeclaration[29593-29604]:SingleVariableDeclaration[29612-29623]"
    }, {
      "left" : "Node varNode",
      "right" : "Node varNode",
      "info" : "SingleVariableDeclaration[29606-29618]:SingleVariableDeclaration[29625-29637]"
    }, {
      "left" : "Node nameToAddAfter",
      "right" : "Node nameToAddAfter",
      "info" : "SingleVariableDeclaration[29626-29645]:SingleVariableDeclaration[29645-29664]"
    }, {
      "left" : "Node varParent",
      "right" : "Node varParent",
      "info" : "SingleVariableDeclaration[29647-29661]:SingleVariableDeclaration[29666-29680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29663-32607]:Block[29682-32626]"
    }, {
      "left" : "int numVars = 0;",
      "right" : "int numVars = 0;",
      "info" : "VariableDeclarationStatement[29669-29685]:VariableDeclarationStatement[29688-29704]"
    }, {
      "left" : "int arbitraryNameCounter = 0;",
      "right" : "int arbitraryNameCounter = 0;",
      "info" : "VariableDeclarationStatement[29690-29719]:VariableDeclarationStatement[29709-29738]"
    }, {
      "left" : "boolean discardKeys = !objlitName.shouldKeepKeys();",
      "right" : "boolean discardKeys = !objlitName.shouldKeepKeys();",
      "info" : "VariableDeclarationStatement[29724-29775]:VariableDeclarationStatement[29743-29794]"
    }, {
      "left" : "for (Node key = objlit.getFirstChild(), nextKey; key != null;\n         key = nextKey)",
      "right" : "for (Node key = objlit.getFirstChild(), nextKey; key != null;\n         key = nextKey)",
      "info" : "ForStatement[29781-32583]:ForStatement[29800-32602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29867-32583]:Block[29886-32602]"
    }, {
      "left" : "Node value = key.getFirstChild();",
      "right" : "Node value = key.getFirstChild();",
      "info" : "VariableDeclarationStatement[29875-29908]:VariableDeclarationStatement[29894-29927]"
    }, {
      "left" : "nextKey = key.getNext();",
      "right" : "nextKey = key.getNext();",
      "info" : "ExpressionStatement[29915-29939]:ExpressionStatement[29934-29958]"
    }, {
      "left" : "if (key.isGetterDef() || key.isSetterDef())",
      "right" : "if (key.isGetterDef() || key.isSetterDef())",
      "info" : "IfStatement[30002-30073]:IfStatement[30021-30092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30046-30073]:Block[30065-30092]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30056-30065]:ContinueStatement[30075-30084]"
    }, {
      "left" : "boolean isJsIdentifier = !key.isNumber() &&\n                               TokenStream.isJSIdentifier(key.getString());",
      "right" : "boolean isJsIdentifier = !key.isNumber() &&\n                               TokenStream.isJSIdentifier(key.getString());",
      "info" : "VariableDeclarationStatement[30449-30568]:VariableDeclarationStatement[30468-30587]"
    }, {
      "left" : "String propName = isJsIdentifier ?\n          key.getString() : String.valueOf(++arbitraryNameCounter);",
      "right" : "String propName = isJsIdentifier ?\n          key.getString() : String.valueOf(++arbitraryNameCounter);",
      "info" : "VariableDeclarationStatement[30575-30677]:VariableDeclarationStatement[30594-30696]"
    }, {
      "left" : "String qName = objlitName.getFullName() + '.' + propName;",
      "right" : "String qName = objlitName.getFullName() + '.' + propName;",
      "info" : "VariableDeclarationStatement[30736-30793]:VariableDeclarationStatement[30755-30812]"
    }, {
      "left" : "Name p = nameMap.get(qName);",
      "right" : "Name p = nameMap.get(qName);",
      "info" : "VariableDeclarationStatement[30800-30828]:VariableDeclarationStatement[30819-30847]"
    }, {
      "left" : "if (p != null && !p.canCollapse())",
      "right" : "if (p != null && !p.canCollapse())",
      "info" : "IfStatement[30835-30897]:IfStatement[30854-30916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30870-30897]:Block[30889-30916]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30880-30889]:ContinueStatement[30899-30908]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, propName);",
      "right" : "String propAlias = appendPropForAlias(alias, propName);",
      "info" : "VariableDeclarationStatement[30905-30960]:VariableDeclarationStatement[30924-30979]"
    }, {
      "left" : "Node refNode = null;",
      "right" : "Node refNode = null;",
      "info" : "VariableDeclarationStatement[30967-30987]:VariableDeclarationStatement[30986-31006]"
    }, {
      "left" : "if (discardKeys)",
      "right" : "if (discardKeys)",
      "info" : "IfStatement[30994-31362]:IfStatement[31013-31381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31011-31087]:Block[31030-31106]"
    }, {
      "left" : "objlit.removeChild(key);",
      "right" : "objlit.removeChild(key);",
      "info" : "ExpressionStatement[31021-31045]:ExpressionStatement[31040-31064]"
    }, {
      "left" : "value.detachFromParent();",
      "right" : "value.detachFromParent();",
      "info" : "ExpressionStatement[31054-31079]:ExpressionStatement[31073-31098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31093-31362]:Block[31112-31381]"
    }, {
      "left" : "refNode = IR.name(propAlias);",
      "right" : "refNode = IR.name(propAlias);",
      "info" : "ExpressionStatement[31152-31181]:ExpressionStatement[31171-31200]"
    }, {
      "left" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[31190-31311]:IfStatement[31209-31330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31237-31311]:Block[31256-31330]"
    }, {
      "left" : "refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[31249-31301]:ExpressionStatement[31268-31320]"
    }, {
      "left" : "key.replaceChild(value, refNode);",
      "right" : "key.replaceChild(value, refNode);",
      "info" : "ExpressionStatement[31321-31354]:ExpressionStatement[31340-31373]"
    }, {
      "left" : "Node nameNode = IR.name(propAlias);",
      "right" : "Node nameNode = IR.name(propAlias);",
      "info" : "VariableDeclarationStatement[31445-31480]:VariableDeclarationStatement[31464-31499]"
    }, {
      "left" : "nameNode.addChildToFront(value);",
      "right" : "nameNode.addChildToFront(value);",
      "info" : "ExpressionStatement[31487-31519]:ExpressionStatement[31506-31538]"
    }, {
      "left" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "right" : "if (key.getBooleanProp(Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[31526-31644]:IfStatement[31545-31663]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31573-31644]:Block[31592-31663]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[31583-31636]:ExpressionStatement[31602-31655]"
    }, {
      "left" : "Node newVar = IR.var(nameNode)\n          .copyInformationFromForTree(key);",
      "right" : "Node newVar = IR.var(nameNode)\n          .copyInformationFromForTree(key);",
      "info" : "VariableDeclarationStatement[31651-31725]:VariableDeclarationStatement[31670-31744]"
    }, {
      "left" : "if (nameToAddAfter != null)",
      "right" : "if (nameToAddAfter != null)",
      "info" : "IfStatement[31732-31892]:IfStatement[31751-31911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31760-31826]:Block[31779-31845]"
    }, {
      "left" : "varParent.addChildAfter(newVar, nameToAddAfter);",
      "right" : "varParent.addChildAfter(newVar, nameToAddAfter);",
      "info" : "ExpressionStatement[31770-31818]:ExpressionStatement[31789-31837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31832-31892]:Block[31851-31911]"
    }, {
      "left" : "varParent.addChildBefore(newVar, varNode);",
      "right" : "varParent.addChildBefore(newVar, varNode);",
      "info" : "ExpressionStatement[31842-31884]:ExpressionStatement[31861-31903]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[31899-31927]:ExpressionStatement[31918-31946]"
    }, {
      "left" : "nameToAddAfter = newVar;",
      "right" : "nameToAddAfter = newVar;",
      "info" : "ExpressionStatement[31934-31958]:ExpressionStatement[31953-31977]"
    }, {
      "left" : "if (isJsIdentifier && p != null)",
      "right" : "if (isJsIdentifier && p != null)",
      "info" : "IfStatement[32152-32559]:IfStatement[32171-32578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32185-32559]:Block[32204-32578]"
    }, {
      "left" : "if (!discardKeys)",
      "right" : "if (!discardKeys)",
      "info" : "IfStatement[32195-32390]:IfStatement[32214-32409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32213-32390]:Block[32232-32409]"
    }, {
      "left" : "Ref newAlias =\n              p.getDeclaration().cloneAndReclassify(Ref.Type.ALIASING_GET);",
      "right" : "Ref newAlias =\n              p.getDeclaration().cloneAndReclassify(Ref.Type.ALIASING_GET);",
      "info" : "VariableDeclarationStatement[32225-32315]:VariableDeclarationStatement[32244-32334]"
    }, {
      "left" : "newAlias.node = refNode;",
      "right" : "newAlias.node = refNode;",
      "info" : "ExpressionStatement[32326-32350]:ExpressionStatement[32345-32369]"
    }, {
      "left" : "p.addRef(newAlias);",
      "right" : "p.addRef(newAlias);",
      "info" : "ExpressionStatement[32361-32380]:ExpressionStatement[32380-32399]"
    }, {
      "left" : "p.getDeclaration().node = nameNode;",
      "right" : "p.getDeclaration().node = nameNode;",
      "info" : "ExpressionStatement[32400-32435]:ExpressionStatement[32419-32454]"
    }, {
      "left" : "if (value.isFunction())",
      "right" : "if (value.isFunction())",
      "info" : "IfStatement[32445-32551]:IfStatement[32464-32570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32469-32551]:Block[32488-32570]"
    }, {
      "left" : "checkForHosedThisReferences(value, value.getJSDocInfo(), p);",
      "right" : "checkForHosedThisReferences(value, value.getJSDocInfo(), p);",
      "info" : "ExpressionStatement[32481-32541]:ExpressionStatement[32500-32560]"
    }, {
      "left" : "numVars++;",
      "right" : "numVars++;",
      "info" : "ExpressionStatement[32567-32577]:ExpressionStatement[32586-32596]"
    }, {
      "left" : "return numVars;",
      "right" : "return numVars;",
      "info" : "ReturnStatement[32588-32603]:ReturnStatement[32607-32622]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33185-33192]:Modifier[33204-33211]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[33193-33196]:PrimitiveType[33212-33215]"
    }, {
      "left" : "addStubsForUndeclaredProperties",
      "right" : "addStubsForUndeclaredProperties",
      "info" : "SimpleName[33197-33228]:SimpleName[33216-33247]"
    }, {
      "left" : "Name n",
      "right" : "Name n",
      "info" : "SingleVariableDeclaration[33236-33242]:SingleVariableDeclaration[33255-33261]"
    }, {
      "left" : "String alias",
      "right" : "String alias",
      "info" : "SingleVariableDeclaration[33244-33256]:SingleVariableDeclaration[33263-33275]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[33258-33269]:SingleVariableDeclaration[33277-33288]"
    }, {
      "left" : "Node addAfter",
      "right" : "Node addAfter",
      "info" : "SingleVariableDeclaration[33271-33284]:SingleVariableDeclaration[33290-33303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33286-34326]:Block[33305-34345]"
    }, {
      "left" : "Preconditions.checkState(n.canCollapseUnannotatedChildNames());",
      "right" : "Preconditions.checkState(n.canCollapseUnannotatedChildNames());",
      "info" : "ExpressionStatement[33292-33355]:ExpressionStatement[33311-33374]"
    }, {
      "left" : "Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));",
      "right" : "Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));",
      "info" : "ExpressionStatement[33360-33423]:ExpressionStatement[33379-33442]"
    }, {
      "left" : "Preconditions.checkNotNull(addAfter);",
      "right" : "Preconditions.checkNotNull(addAfter);",
      "info" : "ExpressionStatement[33428-33465]:ExpressionStatement[33447-33484]"
    }, {
      "left" : "int numStubs = 0;",
      "right" : "int numStubs = 0;",
      "info" : "VariableDeclarationStatement[33470-33487]:VariableDeclarationStatement[33489-33506]"
    }, {
      "left" : "if (n.props != null)",
      "right" : "if (n.props != null)",
      "info" : "IfStatement[33492-34301]:IfStatement[33511-34320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33513-34301]:Block[33532-34320]"
    }, {
      "left" : "for (Name p : n.props)",
      "right" : "for (Name p : n.props)",
      "info" : "EnhancedForStatement[33521-34295]:EnhancedForStatement[33540-34314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33544-34295]:Block[33563-34314]"
    }, {
      "left" : "if (p.needsToBeStubbed())",
      "right" : "if (p.needsToBeStubbed())",
      "info" : "IfStatement[33554-34287]:IfStatement[33573-34306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33580-34287]:Block[33599-34306]"
    }, {
      "left" : "String propAlias = appendPropForAlias(alias, p.getBaseName());",
      "right" : "String propAlias = appendPropForAlias(alias, p.getBaseName());",
      "info" : "VariableDeclarationStatement[33592-33654]:VariableDeclarationStatement[33611-33673]"
    }, {
      "left" : "Node nameNode = IR.name(propAlias);",
      "right" : "Node nameNode = IR.name(propAlias);",
      "info" : "VariableDeclarationStatement[33665-33700]:VariableDeclarationStatement[33684-33719]"
    }, {
      "left" : "Node newVar = IR.var(nameNode)\n              .copyInformationFromForTree(addAfter);",
      "right" : "Node newVar = IR.var(nameNode)\n              .copyInformationFromForTree(addAfter);",
      "info" : "VariableDeclarationStatement[33711-33794]:VariableDeclarationStatement[33730-33813]"
    }, {
      "left" : "parent.addChildAfter(newVar, addAfter);",
      "right" : "parent.addChildAfter(newVar, addAfter);",
      "info" : "ExpressionStatement[33805-33844]:ExpressionStatement[33824-33863]"
    }, {
      "left" : "addAfter = newVar;",
      "right" : "addAfter = newVar;",
      "info" : "ExpressionStatement[33855-33873]:ExpressionStatement[33874-33892]"
    }, {
      "left" : "numStubs++;",
      "right" : "numStubs++;",
      "info" : "ExpressionStatement[33884-33895]:ExpressionStatement[33903-33914]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[33906-33934]:ExpressionStatement[33925-33953]"
    }, {
      "left" : "if (p.getRefs().get(0).node.getLastChild().getBooleanProp(\n                  Node.IS_CONSTANT_NAME))",
      "right" : "if (p.getRefs().get(0).node.getLastChild().getBooleanProp(\n                  Node.IS_CONSTANT_NAME))",
      "info" : "IfStatement[34097-34277]:IfStatement[34116-34296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34198-34277]:Block[34217-34296]"
    }, {
      "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
      "info" : "ExpressionStatement[34212-34265]:ExpressionStatement[34231-34284]"
    }, {
      "left" : "return numStubs;",
      "right" : "return numStubs;",
      "info" : "ReturnStatement[34306-34322]:ReturnStatement[34325-34341]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34330-34337]:Modifier[34349-34356]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34338-34344]:Modifier[34357-34363]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[34345-34351]:SimpleType[34364-34370]"
    }, {
      "left" : "appendPropForAlias",
      "right" : "appendPropForAlias",
      "info" : "SimpleName[34352-34370]:SimpleName[34371-34389]"
    }, {
      "left" : "String root",
      "right" : "String root",
      "info" : "SingleVariableDeclaration[34371-34382]:SingleVariableDeclaration[34390-34401]"
    }, {
      "left" : "String prop",
      "right" : "String prop",
      "info" : "SingleVariableDeclaration[34384-34395]:SingleVariableDeclaration[34403-34414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34397-34682]:Block[34416-34701]"
    }, {
      "left" : "if (prop.indexOf('$') != -1)",
      "right" : "if (prop.indexOf('$') != -1)",
      "info" : "IfStatement[34403-34648]:IfStatement[34422-34667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34432-34648]:Block[34451-34667]"
    }, {
      "left" : "prop = prop.replace(\"$\", \"$0\");",
      "right" : "prop = prop.replace(\"$\", \"$0\");",
      "info" : "ExpressionStatement[34611-34642]:ExpressionStatement[34630-34661]"
    }, {
      "left" : "return root + '$' + prop;",
      "right" : "return root + '$' + prop;",
      "info" : "ReturnStatement[34653-34678]:ReturnStatement[34672-34697]"
    } ]
  },
  "interFileMappings" : { }
}