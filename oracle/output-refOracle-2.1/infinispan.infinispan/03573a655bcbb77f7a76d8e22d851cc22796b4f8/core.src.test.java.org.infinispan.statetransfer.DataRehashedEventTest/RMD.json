{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataRehashedEventTest",
      "right" : "DataRehashedEventTest",
      "info" : "TypeDeclaration[727-5637]:TypeDeclaration[727-6435]"
    }, {
      "left" : "private ConfigurationBuilder defaultConfig = getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false);",
      "right" : "private ConfigurationBuilder defaultConfig = getDefaultClusteredCacheConfig(CacheMode.DIST_SYNC, false);",
      "info" : "FieldDeclaration[947-1051]:FieldDeclaration[947-1051]"
    }, {
      "left" : "private DataRehashedListener rehashListener;",
      "right" : "private DataRehashedListener rehashListener;",
      "info" : "FieldDeclaration[1055-1099]:FieldDeclaration[1055-1099]"
    }, {
      "left" : "protected void createCacheManagers() throws Throwable",
      "right" : "protected void createCacheManagers() throws Throwable",
      "info" : "MethodDeclaration[1104-1357]:MethodDeclaration[1104-1224]"
    }, {
      "left" : "public void testJoinAndLeave()",
      "right" : "public void testJoinAndLeave()",
      "info" : "MethodDeclaration[1362-4772]:MethodDeclaration[1229-4772]"
    }, {
      "left" : "DataRehashedListener",
      "right" : "DataRehashedListener",
      "info" : "TypeDeclaration[4777-5635]:TypeDeclaration[5439-6297]"
    }, {
      "left" : "private volatile List<DataRehashedEvent<Object, Object>> events = new CopyOnWriteArrayList<DataRehashedEvent<Object, Object>>();",
      "right" : "private volatile List<DataRehashedEvent<Object, Object>> events = new CopyOnWriteArrayList<DataRehashedEvent<Object, Object>>();",
      "info" : "FieldDeclaration[4832-4960]:FieldDeclaration[5494-5622]"
    }, {
      "left" : "public void onDataRehashed(DataRehashedEvent<Object, Object> e)",
      "right" : "public void onDataRehashed(DataRehashedEvent<Object, Object> e)",
      "info" : "MethodDeclaration[4968-5135]:MethodDeclaration[5630-5797]"
    }, {
      "left" : "List<DataRehashedEvent<Object, Object>> removeEvents()",
      "right" : "List<DataRehashedEvent<Object, Object>> removeEvents()",
      "info" : "MethodDeclaration[5143-5384]:MethodDeclaration[5805-6046]"
    }, {
      "left" : "void waitForEvents(final int count)",
      "right" : "void waitForEvents(final int count)",
      "info" : "MethodDeclaration[5392-5630]:MethodDeclaration[6054-6292]"
    }, {
      "left" : "public boolean isSatisfied() throws Exception",
      "right" : "public boolean isSatisfied() throws Exception",
      "info" : "MethodDeclaration[5480-5609]:MethodDeclaration[6142-6271]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1171-1357]:Block[1171-1224]"
    }, {
      "left" : "createClusteredCaches(1, defaultConfig);",
      "right" : "createClusteredCaches(1, defaultConfig);",
      "info" : "ExpressionStatement[1179-1219]:ExpressionStatement[1179-1219]"
    }, {
      "left" : "Cache<Object, Object> c1 = cache(0);",
      "right" : "Cache<Object, Object> c1 = cache(0);",
      "info" : "VariableDeclarationStatement[1227-1263]:VariableDeclarationStatement[4817-4853]"
    }, {
      "left" : "rehashListener = new DataRehashedListener();",
      "right" : "rehashListener = new DataRehashedListener();",
      "info" : "ExpressionStatement[1270-1314]:ExpressionStatement[1311-1355]"
    }, {
      "left" : "c1.addListener(rehashListener);",
      "right" : "c1.addListener(rehashListener);",
      "info" : "ExpressionStatement[1321-1352]:ExpressionStatement[4918-4949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1393-4772]:Block[1260-4772]"
    }, {
      "left" : "ConsistentHash ch1Node = advancedCache(0).getDistributionManager().getReadConsistentHash();",
      "right" : "ConsistentHash ch1Node = advancedCache(0).getDistributionManager().getReadConsistentHash();",
      "info" : "VariableDeclarationStatement[1401-1492]:VariableDeclarationStatement[1401-1492]"
    }, {
      "left" : "assertEquals(rehashListener.removeEvents().size(), 0);",
      "right" : "assertEquals(rehashListener.removeEvents().size(), 0);",
      "info" : "ExpressionStatement[1499-1553]:ExpressionStatement[1499-1553]"
    }, {
      "left" : "addClusterEnabledCacheManager(defaultConfig);",
      "right" : "addClusterEnabledCacheManager(defaultConfig);",
      "info" : "ExpressionStatement[1624-1669]:ExpressionStatement[1624-1669]"
    }, {
      "left" : "cache(1);",
      "right" : "cache(1);",
      "info" : "ExpressionStatement[1676-1685]:ExpressionStatement[1676-1685]"
    }, {
      "left" : "TestingUtil.waitForRehashToComplete(cache(0), cache(1));",
      "right" : "TestingUtil.waitForRehashToComplete(cache(0), cache(1));",
      "info" : "ExpressionStatement[1692-1748]:ExpressionStatement[1692-1748]"
    }, {
      "left" : "ConsistentHash ch2Nodes = advancedCache(0).getDistributionManager().getReadConsistentHash();",
      "right" : "ConsistentHash ch2Nodes = advancedCache(0).getDistributionManager().getReadConsistentHash();",
      "info" : "VariableDeclarationStatement[1756-1848]:VariableDeclarationStatement[1756-1848]"
    }, {
      "left" : "rehashListener.waitForEvents(2);",
      "right" : "rehashListener.waitForEvents(2);",
      "info" : "ExpressionStatement[1855-1887]:ExpressionStatement[1855-1887]"
    }, {
      "left" : "List<DataRehashedEvent<Object, Object>> events = rehashListener.removeEvents();",
      "right" : "List<DataRehashedEvent<Object, Object>> events = rehashListener.removeEvents();",
      "info" : "VariableDeclarationStatement[1894-1973]:VariableDeclarationStatement[1894-1973]"
    }, {
      "left" : "assertEquals(events.size(), 2);",
      "right" : "assertEquals(events.size(), 2);",
      "info" : "ExpressionStatement[1980-2011]:ExpressionStatement[1980-2011]"
    }, {
      "left" : "DataRehashedEvent<Object, Object> pre = events.get(0);",
      "right" : "DataRehashedEvent<Object, Object> pre = events.get(0);",
      "info" : "VariableDeclarationStatement[2018-2072]:VariableDeclarationStatement[2018-2072]"
    }, {
      "left" : "DataRehashedEvent<Object, Object> post = events.get(1);",
      "right" : "DataRehashedEvent<Object, Object> post = events.get(1);",
      "info" : "VariableDeclarationStatement[2079-2134]:VariableDeclarationStatement[2079-2134]"
    }, {
      "left" : "assertTrue(pre.isPre());",
      "right" : "assertTrue(pre.isPre());",
      "info" : "ExpressionStatement[2142-2166]:ExpressionStatement[2142-2166]"
    }, {
      "left" : "assertEquals(pre.getConsistentHashAtStart(), ch1Node);",
      "right" : "assertEquals(pre.getConsistentHashAtStart(), ch1Node);",
      "info" : "ExpressionStatement[2173-2227]:ExpressionStatement[2173-2227]"
    }, {
      "left" : "assertNotNull(pre.getConsistentHashAtEnd());",
      "right" : "assertNotNull(pre.getConsistentHashAtEnd());",
      "info" : "ExpressionStatement[2334-2378]:ExpressionStatement[2334-2378]"
    }, {
      "left" : "assertEquals(pre.getMembersAtEnd(), ch2Nodes.getMembers());",
      "right" : "assertEquals(pre.getMembersAtEnd(), ch2Nodes.getMembers());",
      "info" : "ExpressionStatement[2385-2444]:ExpressionStatement[2385-2444]"
    }, {
      "left" : "assertFalse(post.isPre());",
      "right" : "assertFalse(post.isPre());",
      "info" : "ExpressionStatement[2452-2478]:ExpressionStatement[2452-2478]"
    }, {
      "left" : "assertEquals(post.getConsistentHashAtStart(), ch1Node);",
      "right" : "assertEquals(post.getConsistentHashAtStart(), ch1Node);",
      "info" : "ExpressionStatement[2485-2540]:ExpressionStatement[2485-2540]"
    }, {
      "left" : "assertEquals(post.getConsistentHashAtEnd(), ch2Nodes);",
      "right" : "assertEquals(post.getConsistentHashAtEnd(), ch2Nodes);",
      "info" : "ExpressionStatement[2547-2601]:ExpressionStatement[2547-2601]"
    }, {
      "left" : "addClusterEnabledCacheManager(defaultConfig);",
      "right" : "addClusterEnabledCacheManager(defaultConfig);",
      "info" : "ExpressionStatement[2671-2716]:ExpressionStatement[2671-2716]"
    }, {
      "left" : "cache(2);",
      "right" : "cache(2);",
      "info" : "ExpressionStatement[2723-2732]:ExpressionStatement[2723-2732]"
    }, {
      "left" : "TestingUtil.waitForRehashToComplete(cache(0), cache(1), cache(2));",
      "right" : "TestingUtil.waitForRehashToComplete(cache(0), cache(1), cache(2));",
      "info" : "ExpressionStatement[2739-2805]:ExpressionStatement[2739-2805]"
    }, {
      "left" : "ConsistentHash ch3Nodes = advancedCache(0).getDistributionManager().getReadConsistentHash();",
      "right" : "ConsistentHash ch3Nodes = advancedCache(0).getDistributionManager().getReadConsistentHash();",
      "info" : "VariableDeclarationStatement[2813-2905]:VariableDeclarationStatement[2813-2905]"
    }, {
      "left" : "rehashListener.waitForEvents(2);",
      "right" : "rehashListener.waitForEvents(2);",
      "info" : "ExpressionStatement[2912-2944]:ExpressionStatement[2912-2944]"
    }, {
      "left" : "events = rehashListener.removeEvents();",
      "right" : "events = rehashListener.removeEvents();",
      "info" : "ExpressionStatement[2951-2990]:ExpressionStatement[2951-2990]"
    }, {
      "left" : "assertEquals(events.size(), 2);",
      "right" : "assertEquals(events.size(), 2);",
      "info" : "ExpressionStatement[2997-3028]:ExpressionStatement[2997-3028]"
    }, {
      "left" : "pre = events.get(0);",
      "right" : "pre = events.get(0);",
      "info" : "ExpressionStatement[3035-3055]:ExpressionStatement[3035-3055]"
    }, {
      "left" : "post = events.get(1);",
      "right" : "post = events.get(1);",
      "info" : "ExpressionStatement[3062-3083]:ExpressionStatement[3062-3083]"
    }, {
      "left" : "assertTrue(pre.isPre());",
      "right" : "assertTrue(pre.isPre());",
      "info" : "ExpressionStatement[3091-3115]:ExpressionStatement[3091-3115]"
    }, {
      "left" : "assertEquals(pre.getConsistentHashAtStart(), ch2Nodes);",
      "right" : "assertEquals(pre.getConsistentHashAtStart(), ch2Nodes);",
      "info" : "ExpressionStatement[3122-3177]:ExpressionStatement[3122-3177]"
    }, {
      "left" : "assertNotNull(pre.getConsistentHashAtEnd());",
      "right" : "assertNotNull(pre.getConsistentHashAtEnd());",
      "info" : "ExpressionStatement[3284-3328]:ExpressionStatement[3284-3328]"
    }, {
      "left" : "assertEquals(pre.getMembersAtEnd(), ch3Nodes.getMembers());",
      "right" : "assertEquals(pre.getMembersAtEnd(), ch3Nodes.getMembers());",
      "info" : "ExpressionStatement[3335-3394]:ExpressionStatement[3335-3394]"
    }, {
      "left" : "assertFalse(post.isPre());",
      "right" : "assertFalse(post.isPre());",
      "info" : "ExpressionStatement[3402-3428]:ExpressionStatement[3402-3428]"
    }, {
      "left" : "assertEquals(post.getConsistentHashAtStart(), ch2Nodes);",
      "right" : "assertEquals(post.getConsistentHashAtStart(), ch2Nodes);",
      "info" : "ExpressionStatement[3435-3491]:ExpressionStatement[3435-3491]"
    }, {
      "left" : "assertEquals(post.getConsistentHashAtEnd(), ch3Nodes);",
      "right" : "assertEquals(post.getConsistentHashAtEnd(), ch3Nodes);",
      "info" : "ExpressionStatement[3498-3552]:ExpressionStatement[3498-3552]"
    }, {
      "left" : "killMember(2);",
      "right" : "killMember(2);",
      "info" : "ExpressionStatement[3616-3630]:ExpressionStatement[3616-3630]"
    }, {
      "left" : "ConsistentHash chAfterLeave = advancedCache(0).getDistributionManager().getReadConsistentHash();",
      "right" : "ConsistentHash chAfterLeave = advancedCache(0).getDistributionManager().getReadConsistentHash();",
      "info" : "VariableDeclarationStatement[3713-3809]:VariableDeclarationStatement[3713-3809]"
    }, {
      "left" : "rehashListener.waitForEvents(2);",
      "right" : "rehashListener.waitForEvents(2);",
      "info" : "ExpressionStatement[3816-3848]:ExpressionStatement[3816-3848]"
    }, {
      "left" : "events = rehashListener.removeEvents();",
      "right" : "events = rehashListener.removeEvents();",
      "info" : "ExpressionStatement[3855-3894]:ExpressionStatement[3855-3894]"
    }, {
      "left" : "assertEquals(events.size(), 2);",
      "right" : "assertEquals(events.size(), 2);",
      "info" : "ExpressionStatement[3901-3932]:ExpressionStatement[3901-3932]"
    }, {
      "left" : "pre = events.get(0);",
      "right" : "pre = events.get(0);",
      "info" : "ExpressionStatement[3939-3959]:ExpressionStatement[3939-3959]"
    }, {
      "left" : "post = events.get(1);",
      "right" : "post = events.get(1);",
      "info" : "ExpressionStatement[3966-3987]:ExpressionStatement[3966-3987]"
    }, {
      "left" : "assertTrue(pre.isPre());",
      "right" : "assertTrue(pre.isPre());",
      "info" : "ExpressionStatement[3995-4019]:ExpressionStatement[3995-4019]"
    }, {
      "left" : "assertNotNull(pre.getConsistentHashAtStart());",
      "right" : "assertNotNull(pre.getConsistentHashAtStart());",
      "info" : "ExpressionStatement[4126-4172]:ExpressionStatement[4126-4172]"
    }, {
      "left" : "assertEquals(pre.getMembersAtStart(), chAfterLeave.getMembers());",
      "right" : "assertEquals(pre.getMembersAtStart(), chAfterLeave.getMembers());",
      "info" : "ExpressionStatement[4179-4244]:ExpressionStatement[4179-4244]"
    }, {
      "left" : "assertEquals(pre.getConsistentHashAtEnd(), chAfterLeave);",
      "right" : "assertEquals(pre.getConsistentHashAtEnd(), chAfterLeave);",
      "info" : "ExpressionStatement[4251-4308]:ExpressionStatement[4251-4308]"
    }, {
      "left" : "assertFalse(post.isPre());",
      "right" : "assertFalse(post.isPre());",
      "info" : "ExpressionStatement[4316-4342]:ExpressionStatement[4316-4342]"
    }, {
      "left" : "assertEquals(post.getConsistentHashAtStart(), pre.getConsistentHashAtStart());",
      "right" : "assertEquals(post.getConsistentHashAtStart(), pre.getConsistentHashAtStart());",
      "info" : "ExpressionStatement[4349-4427]:ExpressionStatement[4349-4427]"
    }, {
      "left" : "assertEquals(post.getConsistentHashAtEnd(), pre.getConsistentHashAtEnd());",
      "right" : "assertEquals(post.getConsistentHashAtEnd(), pre.getConsistentHashAtEnd());",
      "info" : "ExpressionStatement[4434-4508]:ExpressionStatement[4434-4508]"
    }, {
      "left" : "killMember(1);",
      "right" : "killMember(1);",
      "info" : "ExpressionStatement[4572-4586]:ExpressionStatement[4572-4586]"
    }, {
      "left" : "events = rehashListener.removeEvents();",
      "right" : "events = rehashListener.removeEvents();",
      "info" : "ExpressionStatement[4690-4729]:ExpressionStatement[4690-4729]"
    }, {
      "left" : "assertEquals(events.size(), 0);",
      "right" : "assertEquals(events.size(), 0);",
      "info" : "ExpressionStatement[4736-4767]:ExpressionStatement[4736-4767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5052-5135]:Block[5714-5797]"
    }, {
      "left" : "log.tracef(\"New event received: %s\", e);",
      "right" : "log.tracef(\"New event received: %s\", e);",
      "info" : "ExpressionStatement[5063-5103]:ExpressionStatement[5725-5765]"
    }, {
      "left" : "events.add(e);",
      "right" : "events.add(e);",
      "info" : "ExpressionStatement[5113-5127]:ExpressionStatement[5775-5789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5198-5384]:Block[5860-6046]"
    }, {
      "left" : "List<DataRehashedEvent<Object, Object>> oldEvents = events;",
      "right" : "List<DataRehashedEvent<Object, Object>> oldEvents = events;",
      "info" : "VariableDeclarationStatement[5209-5268]:VariableDeclarationStatement[5871-5930]"
    }, {
      "left" : "events = new CopyOnWriteArrayList<DataRehashedEvent<Object, Object>>();",
      "right" : "events = new CopyOnWriteArrayList<DataRehashedEvent<Object, Object>>();",
      "info" : "ExpressionStatement[5278-5349]:ExpressionStatement[5940-6011]"
    }, {
      "left" : "return oldEvents;",
      "right" : "return oldEvents;",
      "info" : "ReturnStatement[5359-5376]:ReturnStatement[6021-6038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5428-5630]:Block[6090-6292]"
    }, {
      "left" : "eventually(new Condition() {\n            @Override\n            public boolean isSatisfied() throws Exception {\n               return events.size() >= count;\n            }\n         });",
      "right" : "eventually(new Condition() {\n            @Override\n            public boolean isSatisfied() throws Exception {\n               return events.size() >= count;\n            }\n         });",
      "info" : "ExpressionStatement[5439-5622]:ExpressionStatement[6101-6284]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5548-5609]:Block[6210-6271]"
    }, {
      "left" : "return events.size() >= count;",
      "right" : "return events.size() >= count;",
      "info" : "ReturnStatement[5565-5595]:ReturnStatement[6227-6257]"
    } ]
  },
  "interFileMappings" : { }
}