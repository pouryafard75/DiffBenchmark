{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static File myTempDirectory;",
      "right" : "private static File myTempDirectory;",
      "info" : "FieldDeclaration[1108-1144]:FieldDeclaration[1108-1144]"
    }, {
      "left" : "private static File myVisitorTestDirectory;",
      "right" : "private static File myVisitorTestDirectory;",
      "info" : "FieldDeclaration[1147-1190]:FieldDeclaration[1147-1190]"
    }, {
      "left" : "private static File myFindTestDirectory;",
      "right" : "private static File myFindTestDirectory;",
      "info" : "FieldDeclaration[1193-1233]:FieldDeclaration[1193-1233]"
    }, {
      "left" : "private static File myFindTestFirstFile;",
      "right" : "private static File myFindTestFirstFile;",
      "info" : "FieldDeclaration[1236-1276]:FieldDeclaration[1236-1276]"
    }, {
      "left" : "private static File myFindTestSecondFile;",
      "right" : "private static File myFindTestSecondFile;",
      "info" : "FieldDeclaration[1279-1320]:FieldDeclaration[1279-1320]"
    }, {
      "left" : "public static void setUp() throws Exception",
      "right" : "public static void setUp() throws Exception",
      "info" : "MethodDeclaration[1324-2283]:MethodDeclaration[1324-2283]"
    }, {
      "left" : "public static void tearDown()",
      "right" : "public static void tearDown()",
      "info" : "MethodDeclaration[2287-2417]:MethodDeclaration[2287-2417]"
    }, {
      "left" : "public void testProcessSimple()",
      "right" : "public void testProcessSimple()",
      "info" : "MethodDeclaration[2421-3110]:MethodDeclaration[2421-3110]"
    }, {
      "left" : "public boolean process(File file)",
      "right" : "public boolean process(File file)",
      "info" : "MethodDeclaration[2626-2833]:MethodDeclaration[2626-2833]"
    }, {
      "left" : "public void testProcessStops()",
      "right" : "public void testProcessStops()",
      "info" : "MethodDeclaration[3114-3423]:MethodDeclaration[3114-3423]"
    }, {
      "left" : "public boolean process(File file)",
      "right" : "public boolean process(File file)",
      "info" : "MethodDeclaration[3282-3381]:MethodDeclaration[3282-3381]"
    }, {
      "left" : "public void testProcessDirectoryFilter()",
      "right" : "public void testProcessDirectoryFilter()",
      "info" : "MethodDeclaration[3427-4524]:MethodDeclaration[3427-4524]"
    }, {
      "left" : "public boolean process(File file)",
      "right" : "public boolean process(File file)",
      "info" : "MethodDeclaration[3641-3848]:MethodDeclaration[3641-3848]"
    }, {
      "left" : "public boolean process(File file)",
      "right" : "public boolean process(File file)",
      "info" : "MethodDeclaration[3919-4125]:MethodDeclaration[3919-4125]"
    }, {
      "left" : "public void nonExistingFileInNonExistentDirectory()",
      "right" : "public void nonExistingFileInNonExistentDirectory()",
      "info" : "MethodDeclaration[4528-4701]:MethodDeclaration[4528-4701]"
    }, {
      "left" : "public void nonExistingFileInDirectory()",
      "right" : "public void nonExistingFileInDirectory()",
      "info" : "MethodDeclaration[4705-4899]:MethodDeclaration[4705-4899]"
    }, {
      "left" : "public void nonExistingFile()",
      "right" : "public void nonExistingFile()",
      "info" : "MethodDeclaration[4903-5125]:MethodDeclaration[4903-5125]"
    }, {
      "left" : "public void existingFileInDirectory()",
      "right" : "public void existingFileInDirectory()",
      "info" : "MethodDeclaration[5129-5342]:MethodDeclaration[5129-5342]"
    }, {
      "left" : "public void existingFile()",
      "right" : "public void existingFile()",
      "info" : "MethodDeclaration[5346-5548]:MethodDeclaration[5346-5548]"
    }, {
      "left" : "public void twoFilesOrderInDirectory()",
      "right" : "public void twoFilesOrderInDirectory()",
      "info" : "MethodDeclaration[5552-5776]:MethodDeclaration[5552-5776]"
    }, {
      "left" : "public void twoFilesOrderInDirectory2()",
      "right" : "public void twoFilesOrderInDirectory2()",
      "info" : "MethodDeclaration[5780-6006]:MethodDeclaration[5780-6006]"
    }, {
      "left" : "public void twoFilesOrder()",
      "right" : "public void twoFilesOrder()",
      "info" : "MethodDeclaration[6010-6223]:MethodDeclaration[6010-6223]"
    }, {
      "left" : "public void twoFilesOrder2()",
      "right" : "public void twoFilesOrder2()",
      "info" : "MethodDeclaration[6227-6441]:MethodDeclaration[6227-6441]"
    }, {
      "left" : "public void testRepeatableOperation() throws IOException",
      "right" : "public void testRepeatableOperation() throws IOException",
      "info" : "MethodDeclaration[6445-7571]:MethodDeclaration[6445-7571]"
    }, {
      "left" : "CountableIOOperation",
      "right" : "CountableIOOperation",
      "info" : "TypeDeclaration[6516-6876]:TypeDeclaration[6516-6876]"
    }, {
      "left" : "private int count = 0;",
      "right" : "private int count = 0;",
      "info" : "FieldDeclaration[6626-6648]:FieldDeclaration[6626-6648]"
    }, {
      "left" : "public Boolean execute(boolean lastAttempt) throws IOException",
      "right" : "public Boolean execute(boolean lastAttempt) throws IOException",
      "info" : "MethodDeclaration[6656-6809]:MethodDeclaration[6656-6809]"
    }, {
      "left" : "protected abstract boolean stop(boolean lastAttempt);",
      "right" : "protected abstract boolean stop(boolean lastAttempt);",
      "info" : "MethodDeclaration[6817-6870]:MethodDeclaration[6817-6870]"
    }, {
      "left" : "protected boolean stop(boolean lastAttempt)",
      "right" : "protected boolean stop(boolean lastAttempt)",
      "info" : "MethodDeclaration[6951-7021]:MethodDeclaration[6951-7021]"
    }, {
      "left" : "protected boolean stop(boolean lastAttempt)",
      "right" : "protected boolean stop(boolean lastAttempt)",
      "info" : "MethodDeclaration[7180-7251]:MethodDeclaration[7180-7251]"
    }, {
      "left" : "protected boolean stop(boolean lastAttempt)",
      "right" : "protected boolean stop(boolean lastAttempt)",
      "info" : "MethodDeclaration[7405-7482]:MethodDeclaration[7405-7482]"
    }, {
      "left" : "public void testSymlinkDeletion() throws Exception",
      "right" : "public void testSymlinkDeletion() throws Exception",
      "info" : "MethodDeclaration[7575-8168]:MethodDeclaration[7575-8168]"
    }, {
      "left" : "public void testCaseSensitivityDetection() throws IOException",
      "right" : "public void testCaseSensitivityDetection() throws IOException",
      "info" : "MethodDeclaration[8172-8394]:MethodDeclaration[11940-12162]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1383-2283]:Block[1383-2283]"
    }, {
      "left" : "myTempDirectory = FileUtil.createTempDirectory(\"FileUtilHeavyTest.\", \".tmp\");",
      "right" : "myTempDirectory = FileUtil.createTempDirectory(\"FileUtilHeavyTest.\", \".tmp\");",
      "info" : "ExpressionStatement[1389-1466]:ExpressionStatement[1389-1466]"
    }, {
      "left" : "myVisitorTestDirectory = IoTestUtil.createTestDir(myTempDirectory, \"visitor_test_dir\");",
      "right" : "myVisitorTestDirectory = IoTestUtil.createTestDir(myTempDirectory, \"visitor_test_dir\");",
      "info" : "ExpressionStatement[1472-1559]:ExpressionStatement[1472-1559]"
    }, {
      "left" : "File dir1 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir1\");",
      "right" : "File dir1 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir1\");",
      "info" : "VariableDeclarationStatement[1564-1633]:VariableDeclarationStatement[1564-1633]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir1, \"1\");",
      "right" : "IoTestUtil.createTestFile(dir1, \"1\");",
      "info" : "ExpressionStatement[1638-1675]:ExpressionStatement[1638-1675]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir1, \"2\");",
      "right" : "IoTestUtil.createTestFile(dir1, \"2\");",
      "info" : "ExpressionStatement[1680-1717]:ExpressionStatement[1680-1717]"
    }, {
      "left" : "File dir2 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir2\");",
      "right" : "File dir2 = IoTestUtil.createTestDir(myVisitorTestDirectory, \"dir2\");",
      "info" : "VariableDeclarationStatement[1722-1791]:VariableDeclarationStatement[1722-1791]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir2, \"1\");",
      "right" : "IoTestUtil.createTestFile(dir2, \"1\");",
      "info" : "ExpressionStatement[1796-1833]:ExpressionStatement[1796-1833]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir2, \"2\");",
      "right" : "IoTestUtil.createTestFile(dir2, \"2\");",
      "info" : "ExpressionStatement[1838-1875]:ExpressionStatement[1838-1875]"
    }, {
      "left" : "File dir21 = IoTestUtil.createTestDir(dir2, \"inner\");",
      "right" : "File dir21 = IoTestUtil.createTestDir(dir2, \"inner\");",
      "info" : "VariableDeclarationStatement[1880-1933]:VariableDeclarationStatement[1880-1933]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir21, \"1\");",
      "right" : "IoTestUtil.createTestFile(dir21, \"1\");",
      "info" : "ExpressionStatement[1938-1976]:ExpressionStatement[1938-1976]"
    }, {
      "left" : "IoTestUtil.createTestFile(dir21, \"2\");",
      "right" : "IoTestUtil.createTestFile(dir21, \"2\");",
      "info" : "ExpressionStatement[1981-2019]:ExpressionStatement[1981-2019]"
    }, {
      "left" : "myFindTestDirectory = IoTestUtil.createTestDir(myTempDirectory, \"find_file_test_dir\");",
      "right" : "myFindTestDirectory = IoTestUtil.createTestDir(myTempDirectory, \"find_file_test_dir\");",
      "info" : "ExpressionStatement[2025-2111]:ExpressionStatement[2025-2111]"
    }, {
      "left" : "myFindTestFirstFile = IoTestUtil.createTestFile(myFindTestDirectory, \"first\");",
      "right" : "myFindTestFirstFile = IoTestUtil.createTestFile(myFindTestDirectory, \"first\");",
      "info" : "ExpressionStatement[2116-2194]:ExpressionStatement[2116-2194]"
    }, {
      "left" : "myFindTestSecondFile = IoTestUtil.createTestFile(myFindTestDirectory, \"second\");",
      "right" : "myFindTestSecondFile = IoTestUtil.createTestFile(myFindTestDirectory, \"second\");",
      "info" : "ExpressionStatement[2199-2279]:ExpressionStatement[2199-2279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2331-2417]:Block[2331-2417]"
    }, {
      "left" : "if (myTempDirectory != null)",
      "right" : "if (myTempDirectory != null)",
      "info" : "IfStatement[2337-2413]:IfStatement[2337-2413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2366-2413]:Block[2366-2413]"
    }, {
      "left" : "FileUtil.delete(myTempDirectory);",
      "right" : "FileUtil.delete(myTempDirectory);",
      "info" : "ExpressionStatement[2374-2407]:ExpressionStatement[2374-2407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2461-3110]:Block[2461-3110]"
    }, {
      "left" : "final Map<String, Integer> result = new HashMap<String, Integer>();",
      "right" : "final Map<String, Integer> result = new HashMap<String, Integer>();",
      "info" : "VariableDeclarationStatement[2467-2534]:VariableDeclarationStatement[2467-2534]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    });",
      "right" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    });",
      "info" : "ExpressionStatement[2539-2841]:ExpressionStatement[2539-2841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2676-2833]:Block[2676-2833]"
    }, {
      "left" : "Integer integer = result.get(file.getName());",
      "right" : "Integer integer = result.get(file.getName());",
      "info" : "VariableDeclarationStatement[2686-2731]:VariableDeclarationStatement[2686-2731]"
    }, {
      "left" : "result.put(file.getName(), integer == null ? 1 : (integer + 1));",
      "right" : "result.put(file.getName(), integer == null ? 1 : (integer + 1));",
      "info" : "ExpressionStatement[2740-2804]:ExpressionStatement[2740-2804]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[2813-2825]:ReturnStatement[2813-2825]"
    }, {
      "left" : "assertEquals(6, result.size());",
      "right" : "assertEquals(6, result.size());",
      "info" : "ExpressionStatement[2847-2878]:ExpressionStatement[2847-2878]"
    }, {
      "left" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "right" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "info" : "ExpressionStatement[2883-2956]:ExpressionStatement[2883-2956]"
    }, {
      "left" : "assertEquals(3, result.get(\"1\").intValue());",
      "right" : "assertEquals(3, result.get(\"1\").intValue());",
      "info" : "ExpressionStatement[2961-3005]:ExpressionStatement[2961-3005]"
    }, {
      "left" : "assertEquals(3, result.get(\"2\").intValue());",
      "right" : "assertEquals(3, result.get(\"2\").intValue());",
      "info" : "ExpressionStatement[3010-3054]:ExpressionStatement[3010-3054]"
    }, {
      "left" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "right" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "info" : "ExpressionStatement[3059-3106]:ExpressionStatement[3059-3106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3153-3423]:Block[3153-3423]"
    }, {
      "left" : "final int[] cnt = new int[]{0};",
      "right" : "final int[] cnt = new int[]{0};",
      "info" : "VariableDeclarationStatement[3159-3190]:VariableDeclarationStatement[3159-3190]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        ++cnt[0];\n        return false;\n      }\n    });",
      "right" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        ++cnt[0];\n        return false;\n      }\n    });",
      "info" : "ExpressionStatement[3195-3389]:ExpressionStatement[3195-3389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3332-3381]:Block[3332-3381]"
    }, {
      "left" : "++cnt[0];",
      "right" : "++cnt[0];",
      "info" : "ExpressionStatement[3342-3351]:ExpressionStatement[3342-3351]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3360-3373]:ReturnStatement[3360-3373]"
    }, {
      "left" : "assertEquals(1, cnt[0]);",
      "right" : "assertEquals(1, cnt[0]);",
      "info" : "ExpressionStatement[3395-3419]:ExpressionStatement[3395-3419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3476-4524]:Block[3476-4524]"
    }, {
      "left" : "final Map<String, Integer> result = new HashMap<String, Integer>();",
      "right" : "final Map<String, Integer> result = new HashMap<String, Integer>();",
      "info" : "VariableDeclarationStatement[3482-3549]:VariableDeclarationStatement[3482-3549]"
    }, {
      "left" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    }, new Processor<File>() {\n                                       @Override\n                                       public boolean process(File file) {\n                                         return ! \"dir2\".equals(file.getName());\n                                       }\n                                     });",
      "right" : "FileUtil.processFilesRecursively(myVisitorTestDirectory, new Processor<File>() {\n      @Override\n      public boolean process(File file) {\n        Integer integer = result.get(file.getName());\n        result.put(file.getName(), integer == null ? 1 : (integer + 1));\n        return true;\n      }\n    }, new Processor<File>() {\n                                       @Override\n                                       public boolean process(File file) {\n                                         return ! \"dir2\".equals(file.getName());\n                                       }\n                                     });",
      "info" : "ExpressionStatement[3554-4166]:ExpressionStatement[3554-4166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3691-3848]:Block[3691-3848]"
    }, {
      "left" : "Integer integer = result.get(file.getName());",
      "right" : "Integer integer = result.get(file.getName());",
      "info" : "VariableDeclarationStatement[3701-3746]:VariableDeclarationStatement[3701-3746]"
    }, {
      "left" : "result.put(file.getName(), integer == null ? 1 : (integer + 1));",
      "right" : "result.put(file.getName(), integer == null ? 1 : (integer + 1));",
      "info" : "ExpressionStatement[3755-3819]:ExpressionStatement[3755-3819]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[3828-3840]:ReturnStatement[3828-3840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4002-4125]:Block[4002-4125]"
    }, {
      "left" : "return ! \"dir2\".equals(file.getName());",
      "right" : "return ! \"dir2\".equals(file.getName());",
      "info" : "ReturnStatement[4045-4084]:ReturnStatement[4045-4084]"
    }, {
      "left" : "assertEquals(5, result.size());",
      "right" : "assertEquals(5, result.size());",
      "info" : "ExpressionStatement[4172-4203]:ExpressionStatement[4172-4203]"
    }, {
      "left" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "right" : "assertEquals(1, result.get(myVisitorTestDirectory.getName()).intValue());",
      "info" : "ExpressionStatement[4208-4281]:ExpressionStatement[4208-4281]"
    }, {
      "left" : "assertEquals(1, result.get(\"1\").intValue());",
      "right" : "assertEquals(1, result.get(\"1\").intValue());",
      "info" : "ExpressionStatement[4286-4330]:ExpressionStatement[4286-4330]"
    }, {
      "left" : "assertEquals(1, result.get(\"2\").intValue());",
      "right" : "assertEquals(1, result.get(\"2\").intValue());",
      "info" : "ExpressionStatement[4335-4379]:ExpressionStatement[4335-4379]"
    }, {
      "left" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "right" : "assertEquals(1, result.get(\"dir1\").intValue());",
      "info" : "ExpressionStatement[4384-4431]:ExpressionStatement[4384-4431]"
    }, {
      "left" : "assertEquals(1, result.get(\"dir2\").intValue());",
      "right" : "assertEquals(1, result.get(\"dir2\").intValue());",
      "info" : "ExpressionStatement[4436-4483]:ExpressionStatement[4436-4483]"
    }, {
      "left" : "assertNull(result.get(\"dir21\"));",
      "right" : "assertNull(result.get(\"dir21\"));",
      "info" : "ExpressionStatement[4488-4520]:ExpressionStatement[4488-4520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4588-4701]:Block[4588-4701]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(\"123\", \"zero\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(\"123\", \"zero\");",
      "info" : "VariableDeclarationStatement[4594-4655]:VariableDeclarationStatement[4594-4655]"
    }, {
      "left" : "assertTrue(StringUtil.isEmpty(path));",
      "right" : "assertTrue(StringUtil.isEmpty(path));",
      "info" : "ExpressionStatement[4660-4697]:ExpressionStatement[4660-4697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4754-4899]:Block[4754-4899]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"zero\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"zero\");",
      "info" : "VariableDeclarationStatement[4760-4853]:VariableDeclarationStatement[4760-4853]"
    }, {
      "left" : "assertTrue(StringUtil.isEmpty(path));",
      "right" : "assertTrue(StringUtil.isEmpty(path));",
      "info" : "ExpressionStatement[4858-4895]:ExpressionStatement[4858-4895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4941-5125]:Block[4941-5125]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath() + \"123\", myFindTestFirstFile.getName() + \"123\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath() + \"123\", myFindTestFirstFile.getName() + \"123\");",
      "info" : "VariableDeclarationStatement[4947-5079]:VariableDeclarationStatement[4947-5079]"
    }, {
      "left" : "assertTrue(StringUtil.isEmpty(path));",
      "right" : "assertTrue(StringUtil.isEmpty(path));",
      "info" : "ExpressionStatement[5084-5121]:ExpressionStatement[5084-5121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5175-5342]:Block[5175-5342]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\");",
      "info" : "VariableDeclarationStatement[5181-5275]:VariableDeclarationStatement[5181-5275]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[5280-5338]:ExpressionStatement[5280-5338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5381-5548]:Block[5381-5548]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\");",
      "info" : "VariableDeclarationStatement[5387-5481]:VariableDeclarationStatement[5387-5481]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[5486-5544]:ExpressionStatement[5486-5544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5599-5776]:Block[5599-5776]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\", \"second\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"first\", \"second\");",
      "info" : "VariableDeclarationStatement[5605-5709]:VariableDeclarationStatement[5605-5709]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[5714-5772]:ExpressionStatement[5714-5772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5828-6006]:Block[5828-6006]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"second\", \"first\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestDirectory.getAbsolutePath(), \"second\", \"first\");",
      "info" : "VariableDeclarationStatement[5834-5938]:VariableDeclarationStatement[5834-5938]"
    }, {
      "left" : "assertEquals(path, myFindTestSecondFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestSecondFile.getAbsolutePath());",
      "info" : "ExpressionStatement[5943-6002]:ExpressionStatement[5943-6002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6046-6223]:Block[6046-6223]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\", \"second\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"first\", \"second\");",
      "info" : "VariableDeclarationStatement[6052-6156]:VariableDeclarationStatement[6052-6156]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[6161-6219]:ExpressionStatement[6161-6219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6264-6441]:Block[6264-6441]"
    }, {
      "left" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"second\", \"first\");",
      "right" : "String path = FileUtil.findFileInProvidedPath(myFindTestFirstFile.getAbsolutePath(), \"second\", \"first\");",
      "info" : "VariableDeclarationStatement[6270-6374]:VariableDeclarationStatement[6270-6374]"
    }, {
      "left" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "right" : "assertEquals(path, myFindTestFirstFile.getAbsolutePath());",
      "info" : "ExpressionStatement[6379-6437]:ExpressionStatement[6379-6437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6510-7571]:Block[6510-7571]"
    }, {
      "left" : "abstract class CountableIOOperation implements FileUtilRt.RepeatableIOOperation<Boolean, IOException> {\n      private int count = 0;\n\n      @Override\n      public Boolean execute(boolean lastAttempt) throws IOException {\n        count++;\n        return stop(lastAttempt) ? true : null;\n      }\n\n      protected abstract boolean stop(boolean lastAttempt);\n    }",
      "right" : "abstract class CountableIOOperation implements FileUtilRt.RepeatableIOOperation<Boolean, IOException> {\n      private int count = 0;\n\n      @Override\n      public Boolean execute(boolean lastAttempt) throws IOException {\n        count++;\n        return stop(lastAttempt) ? true : null;\n      }\n\n      protected abstract boolean stop(boolean lastAttempt);\n    }",
      "info" : "TypeDeclarationStatement[6516-6876]:TypeDeclarationStatement[6516-6876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6735-6809]:Block[6735-6809]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[6745-6753]:ExpressionStatement[6745-6753]"
    }, {
      "left" : "return stop(lastAttempt) ? true : null;",
      "right" : "return stop(lastAttempt) ? true : null;",
      "info" : "ReturnStatement[6762-6801]:ReturnStatement[6762-6801]"
    }, {
      "left" : "CountableIOOperation successful = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return true; }\n    };",
      "right" : "CountableIOOperation successful = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return true; }\n    };",
      "info" : "VariableDeclarationStatement[6882-7028]:VariableDeclarationStatement[6882-7028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7005-7021]:Block[7005-7021]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[7007-7019]:ReturnStatement[7007-7019]"
    }, {
      "left" : "FileUtilRt.doIOOperation(successful);",
      "right" : "FileUtilRt.doIOOperation(successful);",
      "info" : "ExpressionStatement[7033-7070]:ExpressionStatement[7033-7070]"
    }, {
      "left" : "assertEquals(1, successful.count);",
      "right" : "assertEquals(1, successful.count);",
      "info" : "ExpressionStatement[7075-7109]:ExpressionStatement[7075-7109]"
    }, {
      "left" : "CountableIOOperation failed = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return false; }\n    };",
      "right" : "CountableIOOperation failed = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return false; }\n    };",
      "info" : "VariableDeclarationStatement[7115-7258]:VariableDeclarationStatement[7115-7258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7234-7251]:Block[7234-7251]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[7236-7249]:ReturnStatement[7236-7249]"
    }, {
      "left" : "FileUtilRt.doIOOperation(failed);",
      "right" : "FileUtilRt.doIOOperation(failed);",
      "info" : "ExpressionStatement[7263-7296]:ExpressionStatement[7263-7296]"
    }, {
      "left" : "assertEquals(10, failed.count);",
      "right" : "assertEquals(10, failed.count);",
      "info" : "ExpressionStatement[7301-7332]:ExpressionStatement[7301-7332]"
    }, {
      "left" : "CountableIOOperation lastShot = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return lastAttempt; }\n    };",
      "right" : "CountableIOOperation lastShot = new CountableIOOperation() {\n      @Override protected boolean stop(boolean lastAttempt) { return lastAttempt; }\n    };",
      "info" : "VariableDeclarationStatement[7338-7489]:VariableDeclarationStatement[7338-7489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7459-7482]:Block[7459-7482]"
    }, {
      "left" : "return lastAttempt;",
      "right" : "return lastAttempt;",
      "info" : "ReturnStatement[7461-7480]:ReturnStatement[7461-7480]"
    }, {
      "left" : "FileUtilRt.doIOOperation(lastShot);",
      "right" : "FileUtilRt.doIOOperation(lastShot);",
      "info" : "ExpressionStatement[7494-7529]:ExpressionStatement[7494-7529]"
    }, {
      "left" : "assertEquals(10, lastShot.count);",
      "right" : "assertEquals(10, lastShot.count);",
      "info" : "ExpressionStatement[7534-7567]:ExpressionStatement[7534-7567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7634-8168]:Block[7634-8168]"
    }, {
      "left" : "assumeTrue(SystemInfo.isWin7OrNewer || SystemInfo.isUnix);",
      "right" : "assumeTrue(SystemInfo.isWin7OrNewer || SystemInfo.isUnix);",
      "info" : "ExpressionStatement[7640-7698]:ExpressionStatement[7640-7698]"
    }, {
      "left" : "File targetDir = IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_1\");",
      "right" : "File targetDir = IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_1\");",
      "info" : "VariableDeclarationStatement[7704-7782]:VariableDeclarationStatement[7704-7782]"
    }, {
      "left" : "IoTestUtil.createTestFile(targetDir, \"file\");",
      "right" : "IoTestUtil.createTestFile(targetDir, \"file\");",
      "info" : "ExpressionStatement[7787-7832]:ExpressionStatement[7787-7832]"
    }, {
      "left" : "File linkDir = IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_2\");",
      "right" : "File linkDir = IoTestUtil.createTestDir(myTempDirectory, \"link_del_test_2\");",
      "info" : "VariableDeclarationStatement[7837-7913]:VariableDeclarationStatement[7837-7913]"
    }, {
      "left" : "IoTestUtil.createTestFile(linkDir, \"file\");",
      "right" : "IoTestUtil.createTestFile(linkDir, \"file\");",
      "info" : "ExpressionStatement[7918-7961]:ExpressionStatement[7918-7961]"
    }, {
      "left" : "IoTestUtil.createSymLink(targetDir.getPath(), linkDir.getPath() + \"/link\");",
      "right" : "IoTestUtil.createSymLink(targetDir.getPath(), linkDir.getPath() + \"/link\");",
      "info" : "ExpressionStatement[7966-8041]:ExpressionStatement[7966-8041]"
    }, {
      "left" : "assertEquals(1, targetDir.list().length);",
      "right" : "assertEquals(1, targetDir.list().length);",
      "info" : "ExpressionStatement[8047-8088]:ExpressionStatement[8047-8088]"
    }, {
      "left" : "FileUtil.delete(linkDir);",
      "right" : "FileUtil.delete(linkDir);",
      "info" : "ExpressionStatement[8093-8118]:ExpressionStatement[8093-8118]"
    }, {
      "left" : "assertEquals(1, targetDir.list().length);",
      "right" : "assertEquals(1, targetDir.list().length);",
      "info" : "ExpressionStatement[8123-8164]:ExpressionStatement[8123-8164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8242-8394]:Block[12010-12162]"
    }, {
      "left" : "String path = myFindTestFirstFile.getPath();",
      "right" : "String path = myFindTestFirstFile.getPath();",
      "info" : "VariableDeclarationStatement[8248-8292]:VariableDeclarationStatement[12016-12060]"
    }, {
      "left" : "assertEquals(SystemInfo.isFileSystemCaseSensitive, FileUtil.isFileSystemCaseSensitive(path));",
      "right" : "assertEquals(SystemInfo.isFileSystemCaseSensitive, FileUtil.isFileSystemCaseSensitive(path));",
      "info" : "ExpressionStatement[8297-8390]:ExpressionStatement[12065-12158]"
    } ]
  },
  "interFileMappings" : { }
}