{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AbstractDevice",
      "right" : "AbstractDevice",
      "info" : "TypeDeclaration[2241-20049]:TypeDeclaration[2241-20168]"
    }, {
      "left" : "private static final Logger log = Logger.getLogger(AbstractDevice.class.getName());",
      "right" : "private static final Logger log = Logger.getLogger(AbstractDevice.class.getName());",
      "info" : "FieldDeclaration[2307-2390]:FieldDeclaration[2307-2390]"
    }, {
      "left" : "public static final String WD_STATUS_ENDPOINT = \"http://localhost:8080/wd/hub/status\";",
      "right" : "public static final String WD_STATUS_ENDPOINT = \"http://localhost:8080/wd/hub/status\";",
      "info" : "FieldDeclaration[2393-2479]:FieldDeclaration[2393-2479]"
    }, {
      "left" : "protected String serial = null;",
      "right" : "protected String serial = null;",
      "info" : "FieldDeclaration[2482-2513]:FieldDeclaration[2482-2513]"
    }, {
      "left" : "protected String model = null;",
      "right" : "protected String model = null;",
      "info" : "FieldDeclaration[2516-2546]:FieldDeclaration[2516-2546]"
    }, {
      "left" : "protected String apiTargetType = \"android\";",
      "right" : "protected String apiTargetType = \"android\";",
      "info" : "FieldDeclaration[2549-2592]:FieldDeclaration[2549-2592]"
    }, {
      "left" : "protected Integer port = null;",
      "right" : "protected Integer port = null;",
      "info" : "FieldDeclaration[2595-2625]:FieldDeclaration[2595-2625]"
    }, {
      "left" : "protected IDevice device;",
      "right" : "protected IDevice device;",
      "info" : "FieldDeclaration[2628-2653]:FieldDeclaration[2628-2653]"
    }, {
      "left" : "private ByteArrayOutputStream logoutput;",
      "right" : "private ByteArrayOutputStream logoutput;",
      "info" : "FieldDeclaration[2656-2696]:FieldDeclaration[2656-2696]"
    }, {
      "left" : "private ExecuteWatchdog logcatWatchdog;",
      "right" : "private ExecuteWatchdog logcatWatchdog;",
      "info" : "FieldDeclaration[2699-2738]:FieldDeclaration[2699-2738]"
    }, {
      "left" : "private static final Integer COMMAND_TIMEOUT = 20000;",
      "right" : "private static final Integer COMMAND_TIMEOUT = 20000;",
      "info" : "FieldDeclaration[2741-2794]:FieldDeclaration[2741-2794]"
    }, {
      "left" : "private boolean loggingEnabled = true;",
      "right" : "private boolean loggingEnabled = true;",
      "info" : "FieldDeclaration[2797-2835]:FieldDeclaration[2797-2835]"
    }, {
      "left" : "public AbstractDevice(String serial)",
      "right" : "public AbstractDevice(String serial)",
      "info" : "MethodDeclaration[2839-3170]:MethodDeclaration[2839-3170]"
    }, {
      "left" : "public AbstractDevice(IDevice device)",
      "right" : "public AbstractDevice(IDevice device)",
      "info" : "MethodDeclaration[3174-3491]:MethodDeclaration[3174-3491]"
    }, {
      "left" : "protected AbstractDevice()",
      "right" : "protected AbstractDevice()",
      "info" : "MethodDeclaration[3495-3524]:MethodDeclaration[3495-3524]"
    }, {
      "left" : "protected boolean isSerialConfigured()",
      "right" : "protected boolean isSerialConfigured()",
      "info" : "MethodDeclaration[3528-3620]:MethodDeclaration[3528-3620]"
    }, {
      "left" : "public void setVerbose()",
      "right" : "public void setVerbose()",
      "info" : "MethodDeclaration[3624-3686]:MethodDeclaration[3624-3686]"
    }, {
      "left" : "public boolean isDeviceReady()",
      "right" : "public boolean isDeviceReady()",
      "info" : "MethodDeclaration[3690-4114]:MethodDeclaration[3690-4114]"
    }, {
      "left" : "public boolean isInstalled(String appBasePackage) throws AndroidSdkException",
      "right" : "public boolean isInstalled(String appBasePackage) throws AndroidSdkException",
      "info" : "MethodDeclaration[4118-4530]:MethodDeclaration[4118-4530]"
    }, {
      "left" : "public boolean isInstalled(AndroidApp app) throws AndroidSdkException",
      "right" : "public boolean isInstalled(AndroidApp app) throws AndroidSdkException",
      "info" : "MethodDeclaration[4534-4667]:MethodDeclaration[4534-4667]"
    }, {
      "left" : "public void install(AndroidApp app) throws AndroidSdkException",
      "right" : "public void install(AndroidApp app) throws AndroidSdkException",
      "info" : "MethodDeclaration[4671-5254]:MethodDeclaration[4671-5254]"
    }, {
      "left" : "public boolean start(AndroidApp app) throws AndroidSdkException",
      "right" : "public boolean start(AndroidApp app) throws AndroidSdkException",
      "info" : "MethodDeclaration[5258-5909]:MethodDeclaration[5258-5909]"
    }, {
      "left" : "protected String executeCommandQuietly(CommandLine command)",
      "right" : "protected String executeCommandQuietly(CommandLine command)",
      "info" : "MethodDeclaration[5915-6040]:MethodDeclaration[5915-6040]"
    }, {
      "left" : "protected String executeCommandQuietly(CommandLine command, long timeout)",
      "right" : "protected String executeCommandQuietly(CommandLine command, long timeout)",
      "info" : "MethodDeclaration[6044-6374]:MethodDeclaration[6044-6374]"
    }, {
      "left" : "public void uninstall(AndroidApp app) throws AndroidSdkException",
      "right" : "public void uninstall(AndroidApp app) throws AndroidSdkException",
      "info" : "MethodDeclaration[6378-6746]:MethodDeclaration[6378-6746]"
    }, {
      "left" : "public void clearUserData(AndroidApp app) throws AndroidSdkException",
      "right" : "public void clearUserData(AndroidApp app) throws AndroidSdkException",
      "info" : "MethodDeclaration[6750-6956]:MethodDeclaration[6750-6956]"
    }, {
      "left" : "public void kill(AndroidApp aut) throws AndroidDeviceException, AndroidSdkException",
      "right" : "public void kill(AndroidApp aut) throws AndroidDeviceException, AndroidSdkException",
      "info" : "MethodDeclaration[6960-7390]:MethodDeclaration[6960-7390]"
    }, {
      "left" : "private void freeSelendroidPort()",
      "right" : "private void freeSelendroidPort()",
      "info" : "MethodDeclaration[7394-7744]:MethodDeclaration[7394-7744]"
    }, {
      "left" : "public void startSelendroid(AndroidApp aut, int port, SelendroidCapabilities capabilities) throws AndroidSdkException",
      "right" : "public void startSelendroid(AndroidApp aut, int port, SelendroidCapabilities capabilities) throws AndroidSdkException",
      "info" : "MethodDeclaration[7748-9883]:MethodDeclaration[7748-9883]"
    }, {
      "left" : "public void forwardPort(int local, int remote)",
      "right" : "public void forwardPort(int local, int remote)",
      "info" : "MethodDeclaration[9887-10560]:MethodDeclaration[9887-10560]"
    }, {
      "left" : "private void forwardSelendroidPort(int port)",
      "right" : "private void forwardSelendroidPort(int port)",
      "info" : "MethodDeclaration[10564-10643]:MethodDeclaration[10564-10643]"
    }, {
      "left" : "public boolean isSelendroidRunning()",
      "right" : "public boolean isSelendroidRunning()",
      "info" : "MethodDeclaration[10647-11721]:MethodDeclaration[10647-11721]"
    }, {
      "left" : "public int getSelendroidsPort()",
      "right" : "public int getSelendroidsPort()",
      "info" : "MethodDeclaration[11725-11791]:MethodDeclaration[11725-11791]"
    }, {
      "left" : "public List<LogEntry> getLogs()",
      "right" : "public List<LogEntry> getLogs()",
      "info" : "MethodDeclaration[11795-12436]:MethodDeclaration[11795-12436]"
    }, {
      "left" : "public boolean isLoggingEnabled()",
      "right" : "public boolean isLoggingEnabled()",
      "info" : "MethodDeclaration[12440-12518]:MethodDeclaration[12440-12518]"
    }, {
      "left" : "public void setLoggingEnabled(boolean loggingEnabled)",
      "right" : "public void setLoggingEnabled(boolean loggingEnabled)",
      "info" : "MethodDeclaration[12522-12635]:MethodDeclaration[12522-12635]"
    }, {
      "left" : "private void startLogging()",
      "right" : "private void startLogging()",
      "info" : "MethodDeclaration[12639-13407]:MethodDeclaration[12639-13407]"
    }, {
      "left" : "protected String getProp(String key)",
      "right" : "protected String getProp(String key)",
      "info" : "MethodDeclaration[13411-13640]:MethodDeclaration[13411-13640]"
    }, {
      "left" : "protected static String extractValue(String regex, String output)",
      "right" : "protected static String extractValue(String regex, String output)",
      "info" : "MethodDeclaration[13644-13906]:MethodDeclaration[13644-13906]"
    }, {
      "left" : "public boolean screenSizeMatches(String requestedScreenSize)",
      "right" : "public boolean screenSizeMatches(String requestedScreenSize)",
      "info" : "MethodDeclaration[13910-14547]:MethodDeclaration[13910-14547]"
    }, {
      "left" : "public String runAdbCommand(String parameter)",
      "right" : "public String runAdbCommand(String parameter)",
      "info" : "MethodDeclaration[14551-14989]:MethodDeclaration[14551-14989]"
    }, {
      "left" : "public byte[] takeScreenshot() throws AndroidDeviceException",
      "right" : "protected byte[] toByteArray(BufferedImage image) throws AndroidDeviceException",
      "info" : "MethodDeclaration[14993-16811]:MethodDeclaration[16134-16930]"
    }, {
      "left" : "public void inputKeyevent(int value)",
      "right" : "public void inputKeyevent(int value)",
      "info" : "MethodDeclaration[16815-17247]:MethodDeclaration[16934-17366]"
    }, {
      "left" : "public void invokeActivity(String activity)",
      "right" : "public void invokeActivity(String activity)",
      "info" : "MethodDeclaration[17251-17444]:MethodDeclaration[17370-17563]"
    }, {
      "left" : "public void restartADB()",
      "right" : "public void restartADB()",
      "info" : "MethodDeclaration[17448-17633]:MethodDeclaration[17567-17752]"
    }, {
      "left" : "private CommandLine adbCommand()",
      "right" : "private CommandLine adbCommand()",
      "info" : "MethodDeclaration[17639-17878]:MethodDeclaration[17758-17997]"
    }, {
      "left" : "private CommandLine adbCommand(String... args)",
      "right" : "private CommandLine adbCommand(String... args)",
      "info" : "MethodDeclaration[17882-18069]:MethodDeclaration[18001-18188]"
    }, {
      "left" : "public String getExternalStoragePath()",
      "right" : "public String getExternalStoragePath()",
      "info" : "MethodDeclaration[18073-18175]:MethodDeclaration[18192-18294]"
    }, {
      "left" : "public String getCrashLog()",
      "right" : "public String getCrashLog()",
      "info" : "MethodDeclaration[18179-18869]:MethodDeclaration[18298-18988]"
    }, {
      "left" : "public String listRunningThirdPartyProcesses()",
      "right" : "public String listRunningThirdPartyProcesses()",
      "info" : "MethodDeclaration[18873-19386]:MethodDeclaration[18992-19505]"
    }, {
      "left" : "private void sleep(int millis)",
      "right" : "private void sleep(int millis)",
      "info" : "MethodDeclaration[19390-19599]:MethodDeclaration[19509-19718]"
    }, {
      "left" : "public boolean equals(Object o)",
      "right" : "public boolean equals(Object o)",
      "info" : "MethodDeclaration[19603-19852]:MethodDeclaration[19722-19971]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[19856-19925]:MethodDeclaration[19975-20044]"
    }, {
      "left" : "public String getModel()",
      "right" : "public String getModel()",
      "info" : "MethodDeclaration[19929-19977]:MethodDeclaration[20048-20096]"
    }, {
      "left" : "public String getAPITargetType()",
      "right" : "public String getAPITargetType()",
      "info" : "MethodDeclaration[19983-20047]:MethodDeclaration[20102-20166]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2241-2247]:Modifier[2241-2247]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[2248-2256]:Modifier[2248-2256]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2257-2262]:TYPE_DECLARATION_KIND[2257-2262]"
    }, {
      "left" : "AbstractDevice",
      "right" : "AbstractDevice",
      "info" : "SimpleName[2263-2277]:SimpleName[2263-2277]"
    }, {
      "left" : "AndroidDevice",
      "right" : "AndroidDevice",
      "info" : "SimpleType[2289-2302]:SimpleType[2289-2302]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3102-3108]:Modifier[3102-3108]"
    }, {
      "left" : "AbstractDevice",
      "right" : "AbstractDevice",
      "info" : "SimpleName[3109-3123]:SimpleName[3109-3123]"
    }, {
      "left" : "String serial",
      "right" : "String serial",
      "info" : "SingleVariableDeclaration[3124-3137]:SingleVariableDeclaration[3124-3137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3139-3170]:Block[3139-3170]"
    }, {
      "left" : "this.serial = serial;",
      "right" : "this.serial = serial;",
      "info" : "ExpressionStatement[3145-3166]:ExpressionStatement[3145-3166]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3378-3384]:Modifier[3378-3384]"
    }, {
      "left" : "AbstractDevice",
      "right" : "AbstractDevice",
      "info" : "SimpleName[3385-3399]:SimpleName[3385-3399]"
    }, {
      "left" : "IDevice device",
      "right" : "IDevice device",
      "info" : "SingleVariableDeclaration[3400-3414]:SingleVariableDeclaration[3400-3414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3416-3491]:Block[3416-3491]"
    }, {
      "left" : "this.device = device;",
      "right" : "this.device = device;",
      "info" : "ExpressionStatement[3422-3443]:ExpressionStatement[3422-3443]"
    }, {
      "left" : "this.serial = device.getSerialNumber();",
      "right" : "this.serial = device.getSerialNumber();",
      "info" : "ExpressionStatement[3448-3487]:ExpressionStatement[3448-3487]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3495-3504]:Modifier[3495-3504]"
    }, {
      "left" : "AbstractDevice",
      "right" : "AbstractDevice",
      "info" : "SimpleName[3505-3519]:SimpleName[3505-3519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3522-3524]:Block[3522-3524]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3528-3537]:Modifier[3528-3537]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3538-3545]:PrimitiveType[3538-3545]"
    }, {
      "left" : "isSerialConfigured",
      "right" : "isSerialConfigured",
      "info" : "SimpleName[3546-3564]:SimpleName[3546-3564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3567-3620]:Block[3567-3620]"
    }, {
      "left" : "return serial != null && !serial.isEmpty();",
      "right" : "return serial != null && !serial.isEmpty();",
      "info" : "ReturnStatement[3573-3616]:ReturnStatement[3573-3616]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3624-3630]:Modifier[3624-3630]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3631-3635]:PrimitiveType[3631-3635]"
    }, {
      "left" : "setVerbose",
      "right" : "setVerbose",
      "info" : "SimpleName[3636-3646]:SimpleName[3636-3646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3649-3686]:Block[3649-3686]"
    }, {
      "left" : "log.setLevel(Level.FINEST);",
      "right" : "log.setLevel(Level.FINEST);",
      "info" : "ExpressionStatement[3655-3682]:ExpressionStatement[3655-3682]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[3690-3699]:MarkerAnnotation[3690-3699]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3702-3708]:Modifier[3702-3708]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[3709-3716]:PrimitiveType[3709-3716]"
    }, {
      "left" : "isDeviceReady",
      "right" : "isDeviceReady",
      "info" : "SimpleName[3717-3730]:SimpleName[3717-3730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3733-4114]:Block[3733-4114]"
    }, {
      "left" : "CommandLine command = adbCommand(\"shell\", \"getprop init.svc.bootanim\");",
      "right" : "CommandLine command = adbCommand(\"shell\", \"getprop init.svc.bootanim\");",
      "info" : "VariableDeclarationStatement[3739-3810]:VariableDeclarationStatement[3739-3810]"
    }, {
      "left" : "String bootAnimDisplayed = null;",
      "right" : "String bootAnimDisplayed = null;",
      "info" : "VariableDeclarationStatement[3815-3847]:VariableDeclarationStatement[3815-3847]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[3852-4031]:TryStatement[3852-4031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3856-3917]:Block[3856-3917]"
    }, {
      "left" : "bootAnimDisplayed = ShellCommand.exec(command);",
      "right" : "bootAnimDisplayed = ShellCommand.exec(command);",
      "info" : "ExpressionStatement[3864-3911]:ExpressionStatement[3864-3911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3950-4031]:Block[3950-4031]"
    }, {
      "left" : "log.log(Level.INFO, \"Could not get property init.svc.bootanim\", e);",
      "right" : "log.log(Level.INFO, \"Could not get property init.svc.bootanim\", e);",
      "info" : "ExpressionStatement[3958-4025]:ExpressionStatement[3958-4025]"
    }, {
      "left" : "return bootAnimDisplayed != null && bootAnimDisplayed.contains(\"stopped\");",
      "right" : "return bootAnimDisplayed != null && bootAnimDisplayed.contains(\"stopped\");",
      "info" : "ReturnStatement[4036-4110]:ReturnStatement[4036-4110]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4118-4127]:MarkerAnnotation[4118-4127]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4130-4136]:Modifier[4130-4136]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4137-4144]:PrimitiveType[4137-4144]"
    }, {
      "left" : "isInstalled",
      "right" : "isInstalled",
      "info" : "SimpleName[4145-4156]:SimpleName[4145-4156]"
    }, {
      "left" : "String appBasePackage",
      "right" : "String appBasePackage",
      "info" : "SingleVariableDeclaration[4157-4178]:SingleVariableDeclaration[4157-4178]"
    }, {
      "left" : "AndroidSdkException",
      "right" : "AndroidSdkException",
      "info" : "SimpleType[4187-4206]:SimpleType[4187-4206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4207-4530]:Block[4207-4530]"
    }, {
      "left" : "CommandLine command = adbCommand(\"shell\", \"pm\", \"list\", \"packages\");",
      "right" : "CommandLine command = adbCommand(\"shell\", \"pm\", \"list\", \"packages\");",
      "info" : "VariableDeclarationStatement[4213-4281]:VariableDeclarationStatement[4213-4281]"
    }, {
      "left" : "command.addArgument(appBasePackage, false);",
      "right" : "command.addArgument(appBasePackage, false);",
      "info" : "ExpressionStatement[4287-4330]:ExpressionStatement[4287-4330]"
    }, {
      "left" : "String result = null;",
      "right" : "String result = null;",
      "info" : "VariableDeclarationStatement[4335-4356]:VariableDeclarationStatement[4335-4356]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4361-4450]:TryStatement[4361-4450]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4365-4415]:Block[4365-4415]"
    }, {
      "left" : "result = ShellCommand.exec(command);",
      "right" : "result = ShellCommand.exec(command);",
      "info" : "ExpressionStatement[4373-4409]:ExpressionStatement[4373-4409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4448-4450]:Block[4448-4450]"
    }, {
      "left" : "return result != null && result.contains(\"package:\" + appBasePackage);",
      "right" : "return result != null && result.contains(\"package:\" + appBasePackage);",
      "info" : "ReturnStatement[4456-4526]:ReturnStatement[4456-4526]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4534-4543]:MarkerAnnotation[4534-4543]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4546-4552]:Modifier[4546-4552]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4553-4560]:PrimitiveType[4553-4560]"
    }, {
      "left" : "isInstalled",
      "right" : "isInstalled",
      "info" : "SimpleName[4561-4572]:SimpleName[4561-4572]"
    }, {
      "left" : "AndroidApp app",
      "right" : "AndroidApp app",
      "info" : "SingleVariableDeclaration[4573-4587]:SingleVariableDeclaration[4573-4587]"
    }, {
      "left" : "AndroidSdkException",
      "right" : "AndroidSdkException",
      "info" : "SimpleType[4596-4615]:SimpleType[4596-4615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4616-4667]:Block[4616-4667]"
    }, {
      "left" : "return isInstalled(app.getBasePackage());",
      "right" : "return isInstalled(app.getBasePackage());",
      "info" : "ReturnStatement[4622-4663]:ReturnStatement[4622-4663]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4671-4680]:MarkerAnnotation[4671-4680]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4683-4689]:Modifier[4683-4689]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4690-4694]:PrimitiveType[4690-4694]"
    }, {
      "left" : "install",
      "right" : "install",
      "info" : "SimpleName[4695-4702]:SimpleName[4695-4702]"
    }, {
      "left" : "AndroidApp app",
      "right" : "AndroidApp app",
      "info" : "SingleVariableDeclaration[4703-4717]:SingleVariableDeclaration[4703-4717]"
    }, {
      "left" : "AndroidSdkException",
      "right" : "AndroidSdkException",
      "info" : "SimpleType[4726-4745]:SimpleType[4726-4745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4746-5254]:Block[4746-5254]"
    }, {
      "left" : "CommandLine command = adbCommand(\"install\", \"-r\", app.getAbsolutePath());",
      "right" : "CommandLine command = adbCommand(\"install\", \"-r\", app.getAbsolutePath());",
      "info" : "VariableDeclarationStatement[4809-4882]:VariableDeclarationStatement[4809-4882]"
    }, {
      "left" : "String out = executeCommandQuietly(command, COMMAND_TIMEOUT * 6);",
      "right" : "String out = executeCommandQuietly(command, COMMAND_TIMEOUT * 6);",
      "info" : "VariableDeclarationStatement[4888-4953]:VariableDeclarationStatement[4888-4953]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4958-5127]:TryStatement[4958-5127]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4962-5049]:Block[4962-5049]"
    }, {
      "left" : "Thread.sleep(1000);",
      "right" : "Thread.sleep(1000);",
      "info" : "ExpressionStatement[5024-5043]:ExpressionStatement[5024-5043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5082-5127]:Block[5082-5127]"
    }, {
      "left" : "throw new RuntimeException(ie);",
      "right" : "throw new RuntimeException(ie);",
      "info" : "ThrowStatement[5090-5121]:ThrowStatement[5090-5121]"
    }, {
      "left" : "if (!out.contains(\"Success\"))",
      "right" : "if (!out.contains(\"Success\"))",
      "info" : "IfStatement[5132-5250]:IfStatement[5132-5250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5162-5250]:Block[5162-5250]"
    }, {
      "left" : "throw new AndroidSdkException(\"APK installation failed. Output:\\n\" + out);",
      "right" : "throw new AndroidSdkException(\"APK installation failed. Output:\\n\" + out);",
      "info" : "ThrowStatement[5170-5244]:ThrowStatement[5170-5244]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5258-5264]:Modifier[5258-5264]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5265-5272]:PrimitiveType[5265-5272]"
    }, {
      "left" : "start",
      "right" : "start",
      "info" : "SimpleName[5273-5278]:SimpleName[5273-5278]"
    }, {
      "left" : "AndroidApp app",
      "right" : "AndroidApp app",
      "info" : "SingleVariableDeclaration[5279-5293]:SingleVariableDeclaration[5279-5293]"
    }, {
      "left" : "AndroidSdkException",
      "right" : "AndroidSdkException",
      "info" : "SimpleType[5302-5321]:SimpleType[5302-5321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5322-5909]:Block[5322-5909]"
    }, {
      "left" : "if (!isInstalled(app))",
      "right" : "if (!isInstalled(app))",
      "info" : "IfStatement[5328-5378]:IfStatement[5328-5378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5351-5378]:Block[5351-5378]"
    }, {
      "left" : "install(app);",
      "right" : "install(app);",
      "info" : "ExpressionStatement[5359-5372]:ExpressionStatement[5359-5372]"
    }, {
      "left" : "String mainActivity = app.getMainActivity().replace(app.getBasePackage(), \"\");",
      "right" : "String mainActivity = app.getMainActivity().replace(app.getBasePackage(), \"\");",
      "info" : "VariableDeclarationStatement[5384-5462]:VariableDeclarationStatement[5384-5462]"
    }, {
      "left" : "CommandLine command =\n        adbCommand(\"shell\", \"am\", \"start\", \"-a\", \"android.intent.action.MAIN\", \"-n\",\n            app.getBasePackage() + \"/\" + mainActivity);",
      "right" : "CommandLine command =\n        adbCommand(\"shell\", \"am\", \"start\", \"-a\", \"android.intent.action.MAIN\", \"-n\",\n            app.getBasePackage() + \"/\" + mainActivity);",
      "info" : "VariableDeclarationStatement[5467-5629]:VariableDeclarationStatement[5467-5629]"
    }, {
      "left" : "String out = executeCommandQuietly(command);",
      "right" : "String out = executeCommandQuietly(command);",
      "info" : "VariableDeclarationStatement[5635-5679]:VariableDeclarationStatement[5635-5679]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[5684-5860]:TryStatement[5684-5860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5688-5782]:Block[5688-5782]"
    }, {
      "left" : "Thread.sleep(1000);",
      "right" : "Thread.sleep(1000);",
      "info" : "ExpressionStatement[5757-5776]:ExpressionStatement[5757-5776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5815-5860]:Block[5815-5860]"
    }, {
      "left" : "throw new RuntimeException(ie);",
      "right" : "throw new RuntimeException(ie);",
      "info" : "ThrowStatement[5823-5854]:ThrowStatement[5823-5854]"
    }, {
      "left" : "return out.contains(\"Starting: Intent\");",
      "right" : "return out.contains(\"Starting: Intent\");",
      "info" : "ReturnStatement[5865-5905]:ReturnStatement[5865-5905]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5915-5924]:Modifier[5915-5924]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5925-5931]:SimpleType[5925-5931]"
    }, {
      "left" : "executeCommandQuietly",
      "right" : "executeCommandQuietly",
      "info" : "SimpleName[5932-5953]:SimpleName[5932-5953]"
    }, {
      "left" : "CommandLine command",
      "right" : "CommandLine command",
      "info" : "SingleVariableDeclaration[5954-5973]:SingleVariableDeclaration[5954-5973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5975-6040]:Block[5975-6040]"
    }, {
      "left" : "return executeCommandQuietly(command, COMMAND_TIMEOUT);",
      "right" : "return executeCommandQuietly(command, COMMAND_TIMEOUT);",
      "info" : "ReturnStatement[5981-6036]:ReturnStatement[5981-6036]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6044-6053]:Modifier[6044-6053]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6054-6060]:SimpleType[6054-6060]"
    }, {
      "left" : "executeCommandQuietly",
      "right" : "executeCommandQuietly",
      "info" : "SimpleName[6061-6082]:SimpleName[6061-6082]"
    }, {
      "left" : "CommandLine command",
      "right" : "CommandLine command",
      "info" : "SingleVariableDeclaration[6083-6102]:SingleVariableDeclaration[6083-6102]"
    }, {
      "left" : "long timeout",
      "right" : "long timeout",
      "info" : "SingleVariableDeclaration[6104-6116]:SingleVariableDeclaration[6104-6116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6118-6374]:Block[6118-6374]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6124-6370]:TryStatement[6124-6370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6128-6185]:Block[6128-6185]"
    }, {
      "left" : "return ShellCommand.exec(command, timeout);",
      "right" : "return ShellCommand.exec(command, timeout);",
      "info" : "ReturnStatement[6136-6179]:ReturnStatement[6136-6179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6218-6370]:Block[6218-6370]"
    }, {
      "left" : "String logMessage = String.format(\"Could not execute command: %s\", command);",
      "right" : "String logMessage = String.format(\"Could not execute command: %s\", command);",
      "info" : "VariableDeclarationStatement[6226-6302]:VariableDeclarationStatement[6226-6302]"
    }, {
      "left" : "log.log(Level.WARNING, logMessage, e);",
      "right" : "log.log(Level.WARNING, logMessage, e);",
      "info" : "ExpressionStatement[6309-6347]:ExpressionStatement[6309-6347]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[6354-6364]:ReturnStatement[6354-6364]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6378-6387]:MarkerAnnotation[6378-6387]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6390-6396]:Modifier[6390-6396]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6397-6401]:PrimitiveType[6397-6401]"
    }, {
      "left" : "uninstall",
      "right" : "uninstall",
      "info" : "SimpleName[6402-6411]:SimpleName[6402-6411]"
    }, {
      "left" : "AndroidApp app",
      "right" : "AndroidApp app",
      "info" : "SingleVariableDeclaration[6412-6426]:SingleVariableDeclaration[6412-6426]"
    }, {
      "left" : "AndroidSdkException",
      "right" : "AndroidSdkException",
      "info" : "SimpleType[6435-6454]:SimpleType[6435-6454]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6455-6746]:Block[6455-6746]"
    }, {
      "left" : "CommandLine command = adbCommand(\"uninstall\", app.getBasePackage());",
      "right" : "CommandLine command = adbCommand(\"uninstall\", app.getBasePackage());",
      "info" : "VariableDeclarationStatement[6461-6529]:VariableDeclarationStatement[6461-6529]"
    }, {
      "left" : "executeCommandQuietly(command);",
      "right" : "executeCommandQuietly(command);",
      "info" : "ExpressionStatement[6535-6566]:ExpressionStatement[6535-6566]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6571-6742]:TryStatement[6571-6742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6575-6664]:Block[6575-6664]"
    }, {
      "left" : "Thread.sleep(1000);",
      "right" : "Thread.sleep(1000);",
      "info" : "ExpressionStatement[6639-6658]:ExpressionStatement[6639-6658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6697-6742]:Block[6697-6742]"
    }, {
      "left" : "throw new RuntimeException(ie);",
      "right" : "throw new RuntimeException(ie);",
      "info" : "ThrowStatement[6705-6736]:ThrowStatement[6705-6736]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6750-6759]:MarkerAnnotation[6750-6759]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6762-6768]:Modifier[6762-6768]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6769-6773]:PrimitiveType[6769-6773]"
    }, {
      "left" : "clearUserData",
      "right" : "clearUserData",
      "info" : "SimpleName[6774-6787]:SimpleName[6774-6787]"
    }, {
      "left" : "AndroidApp app",
      "right" : "AndroidApp app",
      "info" : "SingleVariableDeclaration[6788-6802]:SingleVariableDeclaration[6788-6802]"
    }, {
      "left" : "AndroidSdkException",
      "right" : "AndroidSdkException",
      "info" : "SimpleType[6811-6830]:SimpleType[6811-6830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6831-6956]:Block[6831-6956]"
    }, {
      "left" : "CommandLine command = adbCommand(\"shell\", \"pm\", \"clear\", app.getBasePackage());",
      "right" : "CommandLine command = adbCommand(\"shell\", \"pm\", \"clear\", app.getBasePackage());",
      "info" : "VariableDeclarationStatement[6837-6916]:VariableDeclarationStatement[6837-6916]"
    }, {
      "left" : "executeCommandQuietly(command);",
      "right" : "executeCommandQuietly(command);",
      "info" : "ExpressionStatement[6921-6952]:ExpressionStatement[6921-6952]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6960-6969]:MarkerAnnotation[6960-6969]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6972-6978]:Modifier[6972-6978]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6979-6983]:PrimitiveType[6979-6983]"
    }, {
      "left" : "kill",
      "right" : "kill",
      "info" : "SimpleName[6984-6988]:SimpleName[6984-6988]"
    }, {
      "left" : "AndroidApp aut",
      "right" : "AndroidApp aut",
      "info" : "SingleVariableDeclaration[6989-7003]:SingleVariableDeclaration[6989-7003]"
    }, {
      "left" : "AndroidDeviceException",
      "right" : "AndroidDeviceException",
      "info" : "SimpleType[7012-7034]:SimpleType[7012-7034]"
    }, {
      "left" : "AndroidSdkException",
      "right" : "AndroidSdkException",
      "info" : "SimpleType[7036-7055]:SimpleType[7036-7055]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7056-7390]:Block[7056-7390]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7062-7246]:TryStatement[7062-7246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7066-7202]:Block[7066-7202]"
    }, {
      "left" : "CommandLine command = adbCommand(\"shell\", \"am\", \"force-stop\", aut.getBasePackage());",
      "right" : "CommandLine command = adbCommand(\"shell\", \"am\", \"force-stop\", aut.getBasePackage());",
      "info" : "VariableDeclarationStatement[7074-7158]:VariableDeclarationStatement[7074-7158]"
    }, {
      "left" : "executeCommandQuietly(command);",
      "right" : "executeCommandQuietly(command);",
      "info" : "ExpressionStatement[7165-7196]:ExpressionStatement[7165-7196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7211-7246]:Block[7211-7246]"
    }, {
      "left" : "freeSelendroidPort();",
      "right" : "freeSelendroidPort();",
      "info" : "ExpressionStatement[7219-7240]:ExpressionStatement[7219-7240]"
    }, {
      "left" : "if (logcatWatchdog != null && logcatWatchdog.isWatching())",
      "right" : "if (logcatWatchdog != null && logcatWatchdog.isWatching())",
      "info" : "IfStatement[7252-7386]:IfStatement[7252-7386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7311-7386]:Block[7311-7386]"
    }, {
      "left" : "logcatWatchdog.destroyProcess();",
      "right" : "logcatWatchdog.destroyProcess();",
      "info" : "ExpressionStatement[7319-7351]:ExpressionStatement[7319-7351]"
    }, {
      "left" : "logcatWatchdog = null;",
      "right" : "logcatWatchdog = null;",
      "info" : "ExpressionStatement[7358-7380]:ExpressionStatement[7358-7380]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7394-7401]:Modifier[7394-7401]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7402-7406]:PrimitiveType[7402-7406]"
    }, {
      "left" : "freeSelendroidPort",
      "right" : "freeSelendroidPort",
      "info" : "SimpleName[7407-7425]:SimpleName[7407-7425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7428-7744]:Block[7428-7744]"
    }, {
      "left" : "if (this.port == null)",
      "right" : "if (this.port == null)",
      "info" : "IfStatement[7434-7495]:IfStatement[7434-7495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7457-7495]:Block[7457-7495]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7482-7489]:ReturnStatement[7482-7489]"
    }, {
      "left" : "CommandLine command = adbCommand(\"forward\", \"--remove\", \"tcp:\" + this.port);",
      "right" : "CommandLine command = adbCommand(\"forward\", \"--remove\", \"tcp:\" + this.port);",
      "info" : "VariableDeclarationStatement[7500-7576]:VariableDeclarationStatement[7500-7576]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7581-7740]:TryStatement[7581-7740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7585-7633]:Block[7585-7633]"
    }, {
      "left" : "ShellCommand.exec(command, 20000);",
      "right" : "ShellCommand.exec(command, 20000);",
      "info" : "ExpressionStatement[7593-7627]:ExpressionStatement[7593-7627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7666-7740]:Block[7666-7740]"
    }, {
      "left" : "log.log(Level.WARNING, \"Could not free Selendroid port\", e);",
      "right" : "log.log(Level.WARNING, \"Could not free Selendroid port\", e);",
      "info" : "ExpressionStatement[7674-7734]:ExpressionStatement[7674-7734]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7748-7757]:MarkerAnnotation[7748-7757]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7760-7766]:Modifier[7760-7766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7767-7771]:PrimitiveType[7767-7771]"
    }, {
      "left" : "startSelendroid",
      "right" : "startSelendroid",
      "info" : "SimpleName[7772-7787]:SimpleName[7772-7787]"
    }, {
      "left" : "AndroidApp aut",
      "right" : "AndroidApp aut",
      "info" : "SingleVariableDeclaration[7788-7802]:SingleVariableDeclaration[7788-7802]"
    }, {
      "left" : "int port",
      "right" : "int port",
      "info" : "SingleVariableDeclaration[7804-7812]:SingleVariableDeclaration[7804-7812]"
    }, {
      "left" : "SelendroidCapabilities capabilities",
      "right" : "SelendroidCapabilities capabilities",
      "info" : "SingleVariableDeclaration[7814-7849]:SingleVariableDeclaration[7814-7849]"
    }, {
      "left" : "AndroidSdkException",
      "right" : "AndroidSdkException",
      "info" : "SimpleType[7858-7877]:SimpleType[7858-7877]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7878-9883]:Block[7878-9883]"
    }, {
      "left" : "this.port = port;",
      "right" : "this.port = port;",
      "info" : "ExpressionStatement[7884-7901]:ExpressionStatement[7884-7901]"
    }, {
      "left" : "List<String> argList = Lists.newArrayList(\n        \"-e\", \"main_activity\", aut.getMainActivity(),\n        \"-e\", \"server_port\", Integer.toString(port));",
      "right" : "List<String> argList = Lists.newArrayList(\n        \"-e\", \"main_activity\", aut.getMainActivity(),\n        \"-e\", \"server_port\", Integer.toString(port));",
      "info" : "VariableDeclarationStatement[7907-8057]:VariableDeclarationStatement[7907-8057]"
    }, {
      "left" : "if (capabilities.getSelendroidExtensions() != null)",
      "right" : "if (capabilities.getSelendroidExtensions() != null)",
      "info" : "IfStatement[8062-8365]:IfStatement[8062-8365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8114-8365]:Block[8114-8365]"
    }, {
      "left" : "argList.addAll(Lists.newArrayList(\"-e\", \"load_extensions\", \"true\"));",
      "right" : "argList.addAll(Lists.newArrayList(\"-e\", \"load_extensions\", \"true\"));",
      "info" : "ExpressionStatement[8122-8190]:ExpressionStatement[8122-8190]"
    }, {
      "left" : "if (capabilities.getBootstrapClassNames() != null)",
      "right" : "if (capabilities.getBootstrapClassNames() != null)",
      "info" : "IfStatement[8197-8359]:IfStatement[8197-8359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8248-8359]:Block[8248-8359]"
    }, {
      "left" : "argList.addAll(Lists.newArrayList(\"-e\", \"bootstrap\", capabilities.getBootstrapClassNames()));",
      "right" : "argList.addAll(Lists.newArrayList(\"-e\", \"bootstrap\", capabilities.getBootstrapClassNames()));",
      "info" : "ExpressionStatement[8258-8351]:ExpressionStatement[8258-8351]"
    }, {
      "left" : "argList.add(\"io.selendroid.\" + aut.getBasePackage() + \"/io.selendroid.server.ServerInstrumentation\");",
      "right" : "argList.add(\"io.selendroid.\" + aut.getBasePackage() + \"/io.selendroid.server.ServerInstrumentation\");",
      "info" : "ExpressionStatement[8370-8471]:ExpressionStatement[8370-8471]"
    }, {
      "left" : "String[] args = argList.toArray(new String[argList.size()]);",
      "right" : "String[] args = argList.toArray(new String[argList.size()]);",
      "info" : "VariableDeclarationStatement[8477-8537]:VariableDeclarationStatement[8477-8537]"
    }, {
      "left" : "CommandLine command\n        = adbCommand(ObjectArrays.concat(new String[]{\"shell\", \"am\", \"instrument\"}, args, String.class));",
      "right" : "CommandLine command\n        = adbCommand(ObjectArrays.concat(new String[]{\"shell\", \"am\", \"instrument\"}, args, String.class));",
      "info" : "VariableDeclarationStatement[8542-8667]:VariableDeclarationStatement[8542-8667]"
    }, {
      "left" : "String result = executeCommandQuietly(command);",
      "right" : "String result = executeCommandQuietly(command);",
      "info" : "VariableDeclarationStatement[8673-8720]:VariableDeclarationStatement[8673-8720]"
    }, {
      "left" : "if (result.contains(\"FAILED\"))",
      "right" : "if (result.contains(\"FAILED\"))",
      "info" : "IfStatement[8725-9787]:IfStatement[8725-9787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8756-9787]:Block[8756-9787]"
    }, {
      "left" : "String genericMessage = \"Could not start the app under test using instrumentation.\";",
      "right" : "String genericMessage = \"Could not start the app under test using instrumentation.\";",
      "info" : "VariableDeclarationStatement[8764-8848]:VariableDeclarationStatement[8764-8848]"
    }, {
      "left" : "String detailedMessage;",
      "right" : "String detailedMessage;",
      "info" : "VariableDeclarationStatement[8855-8878]:VariableDeclarationStatement[8855-8878]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8885-9727]:TryStatement[8885-9727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8889-9601]:Block[8889-9601]"
    }, {
      "left" : "String[] instrumentCmd =\n            ObjectArrays.concat(new String[]{\"shell\", \"am\", \"instrument\", \"-w\"}, args, String.class);",
      "right" : "String[] instrumentCmd =\n            ObjectArrays.concat(new String[]{\"shell\", \"am\", \"instrument\", \"-w\"}, args, String.class);",
      "info" : "VariableDeclarationStatement[8998-9124]:VariableDeclarationStatement[8998-9124]"
    }, {
      "left" : "CommandLine getDetailedErrorCommand = adbCommand(instrumentCmd);",
      "right" : "CommandLine getDetailedErrorCommand = adbCommand(instrumentCmd);",
      "info" : "VariableDeclarationStatement[9133-9197]:VariableDeclarationStatement[9133-9197]"
    }, {
      "left" : "String detailedResult = executeCommandQuietly(getDetailedErrorCommand);",
      "right" : "String detailedResult = executeCommandQuietly(getDetailedErrorCommand);",
      "info" : "VariableDeclarationStatement[9206-9277]:VariableDeclarationStatement[9206-9277]"
    }, {
      "left" : "if (detailedResult.contains(\"package\"))",
      "right" : "if (detailedResult.contains(\"package\"))",
      "info" : "IfStatement[9286-9593]:IfStatement[9286-9593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9326-9484]:Block[9326-9484]"
    }, {
      "left" : "detailedMessage =\n              genericMessage + \" Is the correct app under test installed? Read the details below:\\n\" + detailedResult;",
      "right" : "detailedMessage =\n              genericMessage + \" Is the correct app under test installed? Read the details below:\\n\" + detailedResult;",
      "info" : "ExpressionStatement[9338-9474]:ExpressionStatement[9338-9474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9490-9593]:Block[9490-9593]"
    }, {
      "left" : "detailedMessage = genericMessage + \" Read the details below:\\n\" + detailedResult;",
      "right" : "detailedMessage = genericMessage + \" Read the details below:\\n\" + detailedResult;",
      "info" : "ExpressionStatement[9502-9583]:ExpressionStatement[9502-9583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9622-9727]:Block[9622-9727]"
    }, {
      "left" : "throw new SelendroidException(genericMessage, e);",
      "right" : "throw new SelendroidException(genericMessage, e);",
      "info" : "ThrowStatement[9670-9719]:ThrowStatement[9670-9719]"
    }, {
      "left" : "throw new SelendroidException(detailedMessage);",
      "right" : "throw new SelendroidException(detailedMessage);",
      "info" : "ThrowStatement[9734-9781]:ThrowStatement[9734-9781]"
    }, {
      "left" : "forwardSelendroidPort(port);",
      "right" : "forwardSelendroidPort(port);",
      "info" : "ExpressionStatement[9793-9821]:ExpressionStatement[9793-9821]"
    }, {
      "left" : "if(isLoggingEnabled())",
      "right" : "if(isLoggingEnabled())",
      "info" : "IfStatement[9827-9879]:IfStatement[9827-9879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9850-9879]:Block[9850-9879]"
    }, {
      "left" : "startLogging();",
      "right" : "startLogging();",
      "info" : "ExpressionStatement[9858-9873]:ExpressionStatement[9858-9873]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9887-9893]:Modifier[9887-9893]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9894-9898]:PrimitiveType[9894-9898]"
    }, {
      "left" : "forwardPort",
      "right" : "forwardPort",
      "info" : "SimpleName[9899-9910]:SimpleName[9899-9910]"
    }, {
      "left" : "int local",
      "right" : "int local",
      "info" : "SingleVariableDeclaration[9911-9920]:SingleVariableDeclaration[9911-9920]"
    }, {
      "left" : "int remote",
      "right" : "int remote",
      "info" : "SingleVariableDeclaration[9922-9932]:SingleVariableDeclaration[9922-9932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9934-10560]:Block[9934-10560]"
    }, {
      "left" : "CommandLine command = adbCommand(\"forward\", \"tcp:\" + local, \"tcp:\" + remote);",
      "right" : "CommandLine command = adbCommand(\"forward\", \"tcp:\" + local, \"tcp:\" + remote);",
      "info" : "VariableDeclarationStatement[9940-10017]:VariableDeclarationStatement[9940-10017]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10022-10556]:TryStatement[10022-10556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10026-10074]:Block[10026-10074]"
    }, {
      "left" : "ShellCommand.exec(command, 20000);",
      "right" : "ShellCommand.exec(command, 20000);",
      "info" : "ExpressionStatement[10034-10068]:ExpressionStatement[10034-10068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10122-10556]:Block[10122-10556]"
    }, {
      "left" : "String debugForwardList;",
      "right" : "String debugForwardList;",
      "info" : "VariableDeclarationStatement[10130-10154]:VariableDeclarationStatement[10130-10154]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10161-10383]:TryStatement[10161-10383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10165-10260]:Block[10165-10260]"
    }, {
      "left" : "debugForwardList = ShellCommand.exec(adbCommand(\"forward\", \"--list\"), 10000);",
      "right" : "debugForwardList = ShellCommand.exec(adbCommand(\"forward\", \"--list\"), 10000);",
      "info" : "ExpressionStatement[10175-10252]:ExpressionStatement[10175-10252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10305-10383]:Block[10305-10383]"
    }, {
      "left" : "debugForwardList = \"Could not get list of forwarded ports.\";",
      "right" : "debugForwardList = \"Could not get list of forwarded ports.\";",
      "info" : "ExpressionStatement[10315-10375]:ExpressionStatement[10315-10375]"
    }, {
      "left" : "throw new SelendroidException(\n          \"Could not forward port: \" + command + \"\\nList of forwarded ports:\\n\" + debugForwardList,\n          forwardException);",
      "right" : "throw new SelendroidException(\n          \"Could not forward port: \" + command + \"\\nList of forwarded ports:\\n\" + debugForwardList,\n          forwardException);",
      "info" : "ThrowStatement[10391-10550]:ThrowStatement[10391-10550]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10564-10571]:Modifier[10564-10571]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10572-10576]:PrimitiveType[10572-10576]"
    }, {
      "left" : "forwardSelendroidPort",
      "right" : "forwardSelendroidPort",
      "info" : "SimpleName[10577-10598]:SimpleName[10577-10598]"
    }, {
      "left" : "int port",
      "right" : "int port",
      "info" : "SingleVariableDeclaration[10599-10607]:SingleVariableDeclaration[10599-10607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10609-10643]:Block[10609-10643]"
    }, {
      "left" : "forwardPort(port, port);",
      "right" : "forwardPort(port, port);",
      "info" : "ExpressionStatement[10615-10639]:ExpressionStatement[10615-10639]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10647-10656]:MarkerAnnotation[10647-10656]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10659-10665]:Modifier[10659-10665]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[10666-10673]:PrimitiveType[10666-10673]"
    }, {
      "left" : "isSelendroidRunning",
      "right" : "isSelendroidRunning",
      "info" : "SimpleName[10674-10693]:SimpleName[10674-10693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10696-11721]:Block[10696-11721]"
    }, {
      "left" : "HttpClient httpClient = HttpClientBuilder.create().build();",
      "right" : "HttpClient httpClient = HttpClientBuilder.create().build();",
      "info" : "VariableDeclarationStatement[10702-10761]:VariableDeclarationStatement[10702-10761]"
    }, {
      "left" : "String url = WD_STATUS_ENDPOINT.replace(\"8080\", String.valueOf(port));",
      "right" : "String url = WD_STATUS_ENDPOINT.replace(\"8080\", String.valueOf(port));",
      "info" : "VariableDeclarationStatement[10766-10836]:VariableDeclarationStatement[10766-10836]"
    }, {
      "left" : "log.info(\"Checking if the Selendroid server is running: \" + url);",
      "right" : "log.info(\"Checking if the Selendroid server is running: \" + url);",
      "info" : "ExpressionStatement[10841-10906]:ExpressionStatement[10841-10906]"
    }, {
      "left" : "HttpRequestBase request = new HttpGet(url);",
      "right" : "HttpRequestBase request = new HttpGet(url);",
      "info" : "VariableDeclarationStatement[10911-10954]:VariableDeclarationStatement[10911-10954]"
    }, {
      "left" : "HttpResponse response;",
      "right" : "HttpResponse response;",
      "info" : "VariableDeclarationStatement[10959-10981]:VariableDeclarationStatement[10959-10981]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10986-11174]:TryStatement[10986-11174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10990-11043]:Block[10990-11043]"
    }, {
      "left" : "response = httpClient.execute(request);",
      "right" : "response = httpClient.execute(request);",
      "info" : "ExpressionStatement[10998-11037]:ExpressionStatement[10998-11037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11064-11174]:Block[11064-11174]"
    }, {
      "left" : "log.info(\"Can't connect to Selendroid server, assuming it is not running.\");",
      "right" : "log.info(\"Can't connect to Selendroid server, assuming it is not running.\");",
      "info" : "ExpressionStatement[11072-11148]:ExpressionStatement[11072-11148]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11155-11168]:ReturnStatement[11155-11168]"
    }, {
      "left" : "int statusCode = response.getStatusLine().getStatusCode();",
      "right" : "int statusCode = response.getStatusLine().getStatusCode();",
      "info" : "VariableDeclarationStatement[11180-11238]:VariableDeclarationStatement[11180-11238]"
    }, {
      "left" : "log.info(\"Got response status code: \" + statusCode);",
      "right" : "log.info(\"Got response status code: \" + statusCode);",
      "info" : "ExpressionStatement[11243-11295]:ExpressionStatement[11243-11295]"
    }, {
      "left" : "String responseValue;",
      "right" : "String responseValue;",
      "info" : "VariableDeclarationStatement[11300-11321]:VariableDeclarationStatement[11300-11321]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11326-11646]:TryStatement[11326-11646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11330-11468]:Block[11330-11468]"
    }, {
      "left" : "responseValue = IOUtils.toString(response.getEntity().getContent());",
      "right" : "responseValue = IOUtils.toString(response.getEntity().getContent());",
      "info" : "ExpressionStatement[11338-11406]:ExpressionStatement[11338-11406]"
    }, {
      "left" : "log.info(\"Got response value: \" + responseValue);",
      "right" : "log.info(\"Got response value: \" + responseValue);",
      "info" : "ExpressionStatement[11413-11462]:ExpressionStatement[11413-11462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11489-11646]:Block[11489-11646]"
    }, {
      "left" : "log.log(Level.INFO, \"Error reading response from selendroid-server\", e);",
      "right" : "log.log(Level.INFO, \"Error reading response from selendroid-server\", e);",
      "info" : "ExpressionStatement[11497-11569]:ExpressionStatement[11497-11569]"
    }, {
      "left" : "log.info(\"Assuming server has not started\");",
      "right" : "log.info(\"Assuming server has not started\");",
      "info" : "ExpressionStatement[11576-11620]:ExpressionStatement[11576-11620]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11627-11640]:ReturnStatement[11627-11640]"
    }, {
      "left" : "return statusCode == 200 && responseValue.contains(\"selendroid\");",
      "right" : "return statusCode == 200 && responseValue.contains(\"selendroid\");",
      "info" : "ReturnStatement[11652-11717]:ReturnStatement[11652-11717]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11725-11734]:MarkerAnnotation[11725-11734]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11737-11743]:Modifier[11737-11743]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11744-11747]:PrimitiveType[11744-11747]"
    }, {
      "left" : "getSelendroidsPort",
      "right" : "getSelendroidsPort",
      "info" : "SimpleName[11748-11766]:SimpleName[11748-11766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11769-11791]:Block[11769-11791]"
    }, {
      "left" : "return port;",
      "right" : "return port;",
      "info" : "ReturnStatement[11775-11787]:ReturnStatement[11775-11787]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11795-11804]:MarkerAnnotation[11795-11804]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11807-11813]:Modifier[11807-11813]"
    }, {
      "left" : "List<LogEntry>",
      "right" : "List<LogEntry>",
      "info" : "ParameterizedType[11814-11828]:ParameterizedType[11814-11828]"
    }, {
      "left" : "getLogs",
      "right" : "getLogs",
      "info" : "SimpleName[11829-11836]:SimpleName[11829-11836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11839-12436]:Block[11839-12436]"
    }, {
      "left" : "List<LogEntry> logs = Lists.newArrayList();",
      "right" : "List<LogEntry> logs = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[11845-11888]:VariableDeclarationStatement[11845-11888]"
    }, {
      "left" : "String result = logoutput != null ? logoutput.toString() : \"\";",
      "right" : "String result = logoutput != null ? logoutput.toString() : \"\";",
      "info" : "VariableDeclarationStatement[11893-11955]:VariableDeclarationStatement[11893-11955]"
    }, {
      "left" : "String[] lines = result.split(\"\\\\r?\\\\n\");",
      "right" : "String[] lines = result.split(\"\\\\r?\\\\n\");",
      "info" : "VariableDeclarationStatement[11960-12001]:VariableDeclarationStatement[11960-12001]"
    }, {
      "left" : "log.fine(\"getting logcat\");",
      "right" : "log.fine(\"getting logcat\");",
      "info" : "ExpressionStatement[12006-12033]:ExpressionStatement[12006-12033]"
    }, {
      "left" : "for (String line : lines)",
      "right" : "for (String line : lines)",
      "info" : "EnhancedForStatement[12038-12415]:EnhancedForStatement[12038-12415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12064-12415]:Block[12064-12415]"
    }, {
      "left" : "Level l;",
      "right" : "Level l;",
      "info" : "VariableDeclarationStatement[12072-12080]:VariableDeclarationStatement[12072-12080]"
    }, {
      "left" : "if (line.startsWith(\"I\"))",
      "right" : "if (line.startsWith(\"I\"))",
      "info" : "IfStatement[12087-12320]:IfStatement[12087-12320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12113-12146]:Block[12113-12146]"
    }, {
      "left" : "l = Level.INFO;",
      "right" : "l = Level.INFO;",
      "info" : "ExpressionStatement[12123-12138]:ExpressionStatement[12123-12138]"
    }, {
      "left" : "if (line.startsWith(\"W\"))",
      "right" : "if (line.startsWith(\"W\"))",
      "info" : "IfStatement[12152-12320]:IfStatement[12152-12320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12178-12214]:Block[12178-12214]"
    }, {
      "left" : "l = Level.WARNING;",
      "right" : "l = Level.WARNING;",
      "info" : "ExpressionStatement[12188-12206]:ExpressionStatement[12188-12206]"
    }, {
      "left" : "if (line.startsWith(\"S\"))",
      "right" : "if (line.startsWith(\"S\"))",
      "info" : "IfStatement[12220-12320]:IfStatement[12220-12320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12246-12281]:Block[12246-12281]"
    }, {
      "left" : "l = Level.SEVERE;",
      "right" : "l = Level.SEVERE;",
      "info" : "ExpressionStatement[12256-12273]:ExpressionStatement[12256-12273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12287-12320]:Block[12287-12320]"
    }, {
      "left" : "l = Level.FINE;",
      "right" : "l = Level.FINE;",
      "info" : "ExpressionStatement[12297-12312]:ExpressionStatement[12297-12312]"
    }, {
      "left" : "logs.add(new LogEntry(l, System.currentTimeMillis(), line));",
      "right" : "logs.add(new LogEntry(l, System.currentTimeMillis(), line));",
      "info" : "ExpressionStatement[12327-12387]:ExpressionStatement[12327-12387]"
    }, {
      "left" : "log.fine(line);",
      "right" : "log.fine(line);",
      "info" : "ExpressionStatement[12394-12409]:ExpressionStatement[12394-12409]"
    }, {
      "left" : "return logs;",
      "right" : "return logs;",
      "info" : "ReturnStatement[12420-12432]:ReturnStatement[12420-12432]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12440-12449]:MarkerAnnotation[12440-12449]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12452-12458]:Modifier[12452-12458]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[12459-12466]:PrimitiveType[12459-12466]"
    }, {
      "left" : "isLoggingEnabled",
      "right" : "isLoggingEnabled",
      "info" : "SimpleName[12467-12483]:SimpleName[12467-12483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12486-12518]:Block[12486-12518]"
    }, {
      "left" : "return loggingEnabled;",
      "right" : "return loggingEnabled;",
      "info" : "ReturnStatement[12492-12514]:ReturnStatement[12492-12514]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[12522-12531]:MarkerAnnotation[12522-12531]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12534-12540]:Modifier[12534-12540]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12541-12545]:PrimitiveType[12541-12545]"
    }, {
      "left" : "setLoggingEnabled",
      "right" : "setLoggingEnabled",
      "info" : "SimpleName[12546-12563]:SimpleName[12546-12563]"
    }, {
      "left" : "boolean loggingEnabled",
      "right" : "boolean loggingEnabled",
      "info" : "SingleVariableDeclaration[12564-12586]:SingleVariableDeclaration[12564-12586]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12588-12635]:Block[12588-12635]"
    }, {
      "left" : "this.loggingEnabled = loggingEnabled;",
      "right" : "this.loggingEnabled = loggingEnabled;",
      "info" : "ExpressionStatement[12594-12631]:ExpressionStatement[12594-12631]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12639-12646]:Modifier[12639-12646]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12647-12651]:PrimitiveType[12647-12651]"
    }, {
      "left" : "startLogging",
      "right" : "startLogging",
      "info" : "SimpleName[12652-12664]:SimpleName[12652-12664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12667-13407]:Block[12667-13407]"
    }, {
      "left" : "logoutput = new ByteArrayOutputStream();",
      "right" : "logoutput = new ByteArrayOutputStream();",
      "info" : "ExpressionStatement[12673-12713]:ExpressionStatement[12673-12713]"
    }, {
      "left" : "DefaultExecutor exec = new DefaultExecutor();",
      "right" : "DefaultExecutor exec = new DefaultExecutor();",
      "info" : "VariableDeclarationStatement[12718-12763]:VariableDeclarationStatement[12718-12763]"
    }, {
      "left" : "exec.setStreamHandler(new PumpStreamHandler(logoutput));",
      "right" : "exec.setStreamHandler(new PumpStreamHandler(logoutput));",
      "info" : "ExpressionStatement[12768-12824]:ExpressionStatement[12768-12824]"
    }, {
      "left" : "CommandLine command = adbCommand(\"logcat\", \"ResourceType:S\", \"dalvikvm:S\", \"Trace:S\", \"SurfaceFlinger:S\",\n        \"StrictMode:S\", \"ExchangeService:S\", \"SVGAndroid:S\", \"skia:S\", \"LoaderManager:S\", \"ActivityThread:S\", \"-v\", \"time\");",
      "right" : "CommandLine command = adbCommand(\"logcat\", \"ResourceType:S\", \"dalvikvm:S\", \"Trace:S\", \"SurfaceFlinger:S\",\n        \"StrictMode:S\", \"ExchangeService:S\", \"SVGAndroid:S\", \"skia:S\", \"LoaderManager:S\", \"ActivityThread:S\", \"-v\", \"time\");",
      "info" : "VariableDeclarationStatement[12829-13059]:VariableDeclarationStatement[12829-13059]"
    }, {
      "left" : "log.info(\"starting logcat:\");",
      "right" : "log.info(\"starting logcat:\");",
      "info" : "ExpressionStatement[13064-13093]:ExpressionStatement[13064-13093]"
    }, {
      "left" : "log.fine(command.toString());",
      "right" : "log.fine(command.toString());",
      "info" : "ExpressionStatement[13098-13127]:ExpressionStatement[13098-13127]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13132-13403]:TryStatement[13132-13403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13136-13325]:Block[13136-13325]"
    }, {
      "left" : "exec.execute(command, new DefaultExecuteResultHandler());",
      "right" : "exec.execute(command, new DefaultExecuteResultHandler());",
      "info" : "ExpressionStatement[13144-13201]:ExpressionStatement[13144-13201]"
    }, {
      "left" : "logcatWatchdog = new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT);",
      "right" : "logcatWatchdog = new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT);",
      "info" : "ExpressionStatement[13208-13279]:ExpressionStatement[13208-13279]"
    }, {
      "left" : "exec.setWatchdog(logcatWatchdog);",
      "right" : "exec.setWatchdog(logcatWatchdog);",
      "info" : "ExpressionStatement[13286-13319]:ExpressionStatement[13286-13319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13348-13403]:Block[13348-13403]"
    }, {
      "left" : "log.log(Level.SEVERE, e.getMessage(), e);",
      "right" : "log.log(Level.SEVERE, e.getMessage(), e);",
      "info" : "ExpressionStatement[13356-13397]:ExpressionStatement[13356-13397]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13411-13420]:Modifier[13411-13420]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13421-13427]:SimpleType[13421-13427]"
    }, {
      "left" : "getProp",
      "right" : "getProp",
      "info" : "SimpleName[13428-13435]:SimpleName[13428-13435]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[13436-13446]:SingleVariableDeclaration[13436-13446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13448-13640]:Block[13448-13640]"
    }, {
      "left" : "CommandLine command = adbCommand(\"shell\", \"getprop\", key);",
      "right" : "CommandLine command = adbCommand(\"shell\", \"getprop\", key);",
      "info" : "VariableDeclarationStatement[13454-13512]:VariableDeclarationStatement[13454-13512]"
    }, {
      "left" : "String prop = executeCommandQuietly(command);",
      "right" : "String prop = executeCommandQuietly(command);",
      "info" : "VariableDeclarationStatement[13517-13562]:VariableDeclarationStatement[13517-13562]"
    }, {
      "left" : "return prop == null ? \"\" : prop.replace(\"\\r\", \"\").replace(\"\\n\", \"\");",
      "right" : "return prop == null ? \"\" : prop.replace(\"\\r\", \"\").replace(\"\\n\", \"\");",
      "info" : "ReturnStatement[13568-13636]:ReturnStatement[13568-13636]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[13644-13653]:Modifier[13644-13653]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[13654-13660]:Modifier[13654-13660]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13661-13667]:SimpleType[13661-13667]"
    }, {
      "left" : "extractValue",
      "right" : "extractValue",
      "info" : "SimpleName[13668-13680]:SimpleName[13668-13680]"
    }, {
      "left" : "String regex",
      "right" : "String regex",
      "info" : "SingleVariableDeclaration[13681-13693]:SingleVariableDeclaration[13681-13693]"
    }, {
      "left" : "String output",
      "right" : "String output",
      "info" : "SingleVariableDeclaration[13695-13708]:SingleVariableDeclaration[13695-13708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13710-13906]:Block[13710-13906]"
    }, {
      "left" : "Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);",
      "right" : "Pattern pattern = Pattern.compile(regex, Pattern.MULTILINE);",
      "info" : "VariableDeclarationStatement[13716-13776]:VariableDeclarationStatement[13716-13776]"
    }, {
      "left" : "Matcher matcher = pattern.matcher(output);",
      "right" : "Matcher matcher = pattern.matcher(output);",
      "info" : "VariableDeclarationStatement[13781-13823]:VariableDeclarationStatement[13781-13823]"
    }, {
      "left" : "if (matcher.find())",
      "right" : "if (matcher.find())",
      "info" : "IfStatement[13828-13886]:IfStatement[13828-13886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13848-13886]:Block[13848-13886]"
    }, {
      "left" : "return matcher.group(1);",
      "right" : "return matcher.group(1);",
      "info" : "ReturnStatement[13856-13880]:ReturnStatement[13856-13880]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[13892-13902]:ReturnStatement[13892-13902]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13910-13916]:Modifier[13910-13916]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[13917-13924]:PrimitiveType[13917-13924]"
    }, {
      "left" : "screenSizeMatches",
      "right" : "screenSizeMatches",
      "info" : "SimpleName[13925-13942]:SimpleName[13925-13942]"
    }, {
      "left" : "String requestedScreenSize",
      "right" : "String requestedScreenSize",
      "info" : "SingleVariableDeclaration[13943-13969]:SingleVariableDeclaration[13943-13969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13971-14547]:Block[13971-14547]"
    }, {
      "left" : "if (requestedScreenSize == null || requestedScreenSize.isEmpty())",
      "right" : "if (requestedScreenSize == null || requestedScreenSize.isEmpty())",
      "info" : "IfStatement[14032-14124]:IfStatement[14032-14124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14098-14124]:Block[14098-14124]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[14106-14118]:ReturnStatement[14106-14118]"
    }, {
      "left" : "Pattern dimensionPattern = Pattern.compile(\"([0-9]+)x([0-9]+)\");",
      "right" : "Pattern dimensionPattern = Pattern.compile(\"([0-9]+)x([0-9]+)\");",
      "info" : "VariableDeclarationStatement[14130-14194]:VariableDeclarationStatement[14130-14194]"
    }, {
      "left" : "Matcher dimensionMatcher = dimensionPattern.matcher(requestedScreenSize);",
      "right" : "Matcher dimensionMatcher = dimensionPattern.matcher(requestedScreenSize);",
      "info" : "VariableDeclarationStatement[14199-14272]:VariableDeclarationStatement[14199-14272]"
    }, {
      "left" : "if (dimensionMatcher.matches())",
      "right" : "if (dimensionMatcher.matches())",
      "info" : "IfStatement[14277-14543]:IfStatement[14277-14543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14309-14510]:Block[14309-14510]"
    }, {
      "left" : "int width = Integer.parseInt(dimensionMatcher.group(1));",
      "right" : "int width = Integer.parseInt(dimensionMatcher.group(1));",
      "info" : "VariableDeclarationStatement[14317-14373]:VariableDeclarationStatement[14317-14373]"
    }, {
      "left" : "int height = Integer.parseInt(dimensionMatcher.group(2));",
      "right" : "int height = Integer.parseInt(dimensionMatcher.group(2));",
      "info" : "VariableDeclarationStatement[14380-14437]:VariableDeclarationStatement[14380-14437]"
    }, {
      "left" : "return getScreenSize().equals(new Dimension(width, height));",
      "right" : "return getScreenSize().equals(new Dimension(width, height));",
      "info" : "ReturnStatement[14444-14504]:ReturnStatement[14444-14504]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14516-14543]:Block[14516-14543]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[14524-14537]:ReturnStatement[14524-14537]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14551-14557]:Modifier[14551-14557]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14558-14564]:SimpleType[14558-14564]"
    }, {
      "left" : "runAdbCommand",
      "right" : "runAdbCommand",
      "info" : "SimpleName[14565-14578]:SimpleName[14565-14578]"
    }, {
      "left" : "String parameter",
      "right" : "String parameter",
      "info" : "SingleVariableDeclaration[14579-14595]:SingleVariableDeclaration[14579-14595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14597-14989]:Block[14597-14989]"
    }, {
      "left" : "if (parameter == null || parameter.isEmpty())",
      "right" : "if (parameter == null || parameter.isEmpty())",
      "info" : "IfStatement[14603-14675]:IfStatement[14603-14675]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14649-14675]:Block[14649-14675]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[14657-14669]:ReturnStatement[14657-14669]"
    }, {
      "left" : "log.fine(\"running command: adb \" + parameter);",
      "right" : "log.fine(\"running command: adb \" + parameter);",
      "info" : "ExpressionStatement[14680-14726]:ExpressionStatement[14680-14726]"
    }, {
      "left" : "CommandLine command = adbCommand();",
      "right" : "CommandLine command = adbCommand();",
      "info" : "VariableDeclarationStatement[14731-14766]:VariableDeclarationStatement[14731-14766]"
    }, {
      "left" : "String[] params = parameter.split(\" \");",
      "right" : "String[] params = parameter.split(\" \");",
      "info" : "VariableDeclarationStatement[14772-14811]:VariableDeclarationStatement[14772-14811]"
    }, {
      "left" : "for (String param : params)",
      "right" : "for (String param : params)",
      "info" : "EnhancedForStatement[14816-14892]:EnhancedForStatement[14816-14892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14844-14892]:Block[14844-14892]"
    }, {
      "left" : "command.addArgument(param, false);",
      "right" : "command.addArgument(param, false);",
      "info" : "ExpressionStatement[14852-14886]:ExpressionStatement[14852-14886]"
    }, {
      "left" : "String commandOutput = executeCommandQuietly(command);",
      "right" : "String commandOutput = executeCommandQuietly(command);",
      "info" : "VariableDeclarationStatement[14898-14952]:VariableDeclarationStatement[14898-14952]"
    }, {
      "left" : "return commandOutput.trim();",
      "right" : "return commandOutput.trim();",
      "info" : "ReturnStatement[14957-14985]:ReturnStatement[14957-14985]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14993-14999]:Modifier[14993-14999]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[15000-15006]:ArrayType[15000-15006]"
    }, {
      "left" : "takeScreenshot",
      "right" : "takeScreenshot",
      "info" : "SimpleName[15007-15021]:SimpleName[15007-15021]"
    }, {
      "left" : "AndroidDeviceException",
      "right" : "AndroidDeviceException",
      "info" : "SimpleType[15031-15053]:SimpleType[15031-15053]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15054-16811]:Block[16214-16930]"
    }, {
      "left" : "if (device == null)",
      "right" : "if (device == null)",
      "info" : "IfStatement[15060-15164]:IfStatement[15060-15164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15080-15164]:Block[15080-15164]"
    }, {
      "left" : "throw new AndroidDeviceException(\"Device not accessible via ddmlib.\");",
      "right" : "throw new AndroidDeviceException(\"Device not accessible via ddmlib.\");",
      "info" : "ThrowStatement[15088-15158]:ThrowStatement[15088-15158]"
    }, {
      "left" : "RawImage rawImage;",
      "right" : "RawImage rawImage;",
      "info" : "VariableDeclarationStatement[15169-15187]:VariableDeclarationStatement[15169-15187]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15192-15656]:TryStatement[15192-15656]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15196-15244]:Block[15196-15244]"
    }, {
      "left" : "rawImage = device.getScreenshot();",
      "right" : "rawImage = device.getScreenshot();",
      "info" : "ExpressionStatement[15204-15238]:ExpressionStatement[15204-15238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15269-15367]:Block[15269-15367]"
    }, {
      "left" : "throw new AndroidDeviceException(\"Unable to get frame buffer: \" + ioe.getMessage());",
      "right" : "throw new AndroidDeviceException(\"Unable to get frame buffer: \" + ioe.getMessage());",
      "info" : "ThrowStatement[15277-15361]:ThrowStatement[15277-15361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15395-15506]:Block[15395-15506]"
    }, {
      "left" : "log.log(Level.SEVERE, e.getMessage(), e);",
      "right" : "log.log(Level.SEVERE, e.getMessage(), e);",
      "info" : "ExpressionStatement[15403-15444]:ExpressionStatement[15403-15444]"
    }, {
      "left" : "throw new AndroidDeviceException(e.getMessage());",
      "right" : "throw new AndroidDeviceException(e.getMessage());",
      "info" : "ThrowStatement[15451-15500]:ThrowStatement[15451-15500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15545-15656]:Block[15545-15656]"
    }, {
      "left" : "log.log(Level.SEVERE, e.getMessage(), e);",
      "right" : "log.log(Level.SEVERE, e.getMessage(), e);",
      "info" : "ExpressionStatement[15553-15594]:ExpressionStatement[15553-15594]"
    }, {
      "left" : "throw new AndroidDeviceException(e.getMessage());",
      "right" : "throw new AndroidDeviceException(e.getMessage());",
      "info" : "ThrowStatement[15601-15650]:ThrowStatement[15601-15650]"
    }, {
      "left" : "if (rawImage == null)",
      "right" : "if (rawImage == null)",
      "info" : "IfStatement[15695-15729]:IfStatement[15695-15729]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15717-15729]:ReturnStatement[15717-15729]"
    }, {
      "left" : "BufferedImage image =\n        new BufferedImage(rawImage.width, rawImage.height, BufferedImage.TYPE_3BYTE_BGR);",
      "right" : "BufferedImage image =\n        new BufferedImage(rawImage.width, rawImage.height, BufferedImage.TYPE_3BYTE_BGR);",
      "info" : "VariableDeclarationStatement[15735-15846]:VariableDeclarationStatement[15735-15846]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[15852-15866]:VariableDeclarationStatement[15852-15866]"
    }, {
      "left" : "int IndexInc = rawImage.bpp >> 3;",
      "right" : "int IndexInc = rawImage.bpp >> 3;",
      "info" : "VariableDeclarationStatement[15871-15904]:VariableDeclarationStatement[15871-15904]"
    }, {
      "left" : "for (int y = 0; y < rawImage.height; y++)",
      "right" : "for (int y = 0; y < rawImage.height; y++)",
      "info" : "ForStatement[15909-16095]:ForStatement[15909-16095]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15951-16095]:Block[15951-16095]"
    }, {
      "left" : "for (int x = 0; x < rawImage.width; x++)",
      "right" : "for (int x = 0; x < rawImage.width; x++)",
      "info" : "ForStatement[15959-16089]:ForStatement[15959-16089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16000-16089]:Block[16000-16089]"
    }, {
      "left" : "image.setRGB(x, y, rawImage.getARGB(index));",
      "right" : "image.setRGB(x, y, rawImage.getARGB(index));",
      "info" : "ExpressionStatement[16010-16054]:ExpressionStatement[16010-16054]"
    }, {
      "left" : "index += IndexInc;",
      "right" : "index += IndexInc;",
      "info" : "ExpressionStatement[16063-16081]:ExpressionStatement[16063-16081]"
    }, {
      "left" : "ByteArrayOutputStream stream = new ByteArrayOutputStream();",
      "right" : "ByteArrayOutputStream stream = new ByteArrayOutputStream();",
      "info" : "VariableDeclarationStatement[16100-16159]:VariableDeclarationStatement[16220-16279]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16165-16438]:TryStatement[16285-16558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16169-16294]:Block[16289-16414]"
    }, {
      "left" : "if (!ImageIO.write(image, \"png\", stream))",
      "right" : "if (!ImageIO.write(image, \"png\", stream))",
      "info" : "IfStatement[16177-16288]:IfStatement[16297-16408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16219-16288]:Block[16339-16408]"
    }, {
      "left" : "throw new IOException(\"Failed to find png writer\");",
      "right" : "throw new IOException(\"Failed to find png writer\");",
      "info" : "ThrowStatement[16229-16280]:ThrowStatement[16349-16400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16317-16438]:Block[16437-16558]"
    }, {
      "left" : "log.log(Level.SEVERE, \"Cannot take screenshot\", e);",
      "right" : "log.log(Level.SEVERE, \"Cannot take screenshot\", e);",
      "info" : "ExpressionStatement[16325-16376]:ExpressionStatement[16445-16496]"
    }, {
      "left" : "throw new AndroidDeviceException(e.getMessage());",
      "right" : "throw new AndroidDeviceException(e.getMessage());",
      "info" : "ThrowStatement[16383-16432]:ThrowStatement[16503-16552]"
    }, {
      "left" : "byte[] raw = null;",
      "right" : "byte[] raw = null;",
      "info" : "VariableDeclarationStatement[16443-16461]:VariableDeclarationStatement[16563-16581]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16466-16790]:TryStatement[16586-16910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16470-16555]:Block[16590-16675]"
    }, {
      "left" : "stream.flush();",
      "right" : "stream.flush();",
      "info" : "ExpressionStatement[16478-16493]:ExpressionStatement[16598-16613]"
    }, {
      "left" : "raw = stream.toByteArray();",
      "right" : "raw = stream.toByteArray();",
      "info" : "ExpressionStatement[16500-16527]:ExpressionStatement[16620-16647]"
    }, {
      "left" : "stream.close();",
      "right" : "stream.close();",
      "info" : "ExpressionStatement[16534-16549]:ExpressionStatement[16654-16669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16578-16678]:Block[16698-16798]"
    }, {
      "left" : "throw new RuntimeException(\"I/O Error while capturing screenshot: \" + e.getMessage());",
      "right" : "throw new RuntimeException(\"I/O Error while capturing screenshot: \" + e.getMessage());",
      "info" : "ThrowStatement[16586-16672]:ThrowStatement[16706-16792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16687-16790]:Block[16807-16910]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[16695-16784]:TryStatement[16815-16904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16699-16732]:Block[16819-16852]"
    }, {
      "left" : "stream.close();",
      "right" : "stream.close();",
      "info" : "ExpressionStatement[16709-16724]:ExpressionStatement[16829-16844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16757-16784]:Block[16877-16904]"
    }, {
      "left" : "return raw;",
      "right" : "return raw;",
      "info" : "ReturnStatement[16796-16807]:ReturnStatement[16915-16926]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17059-17065]:Modifier[17178-17184]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17066-17070]:PrimitiveType[17185-17189]"
    }, {
      "left" : "inputKeyevent",
      "right" : "inputKeyevent",
      "info" : "SimpleName[17071-17084]:SimpleName[17190-17203]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[17085-17094]:SingleVariableDeclaration[17204-17213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17096-17247]:Block[17215-17366]"
    }, {
      "left" : "executeCommandQuietly(adbCommand(\"shell\", \"input\", \"keyevent\", \"\" + value));",
      "right" : "executeCommandQuietly(adbCommand(\"shell\", \"input\", \"keyevent\", \"\" + value));",
      "info" : "ExpressionStatement[17102-17178]:ExpressionStatement[17221-17297]"
    }, {
      "left" : "sleep(500);",
      "right" : "sleep(500);",
      "info" : "ExpressionStatement[17232-17243]:ExpressionStatement[17351-17362]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17251-17257]:Modifier[17370-17376]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17258-17262]:PrimitiveType[17377-17381]"
    }, {
      "left" : "invokeActivity",
      "right" : "invokeActivity",
      "info" : "SimpleName[17263-17277]:SimpleName[17382-17396]"
    }, {
      "left" : "String activity",
      "right" : "String activity",
      "info" : "SingleVariableDeclaration[17278-17293]:SingleVariableDeclaration[17397-17412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17295-17444]:Block[17414-17563]"
    }, {
      "left" : "executeCommandQuietly(adbCommand(\"shell\", \"am\", \"start\", \"-a\", activity));",
      "right" : "executeCommandQuietly(adbCommand(\"shell\", \"am\", \"start\", \"-a\", activity));",
      "info" : "ExpressionStatement[17301-17375]:ExpressionStatement[17420-17494]"
    }, {
      "left" : "sleep(500);",
      "right" : "sleep(500);",
      "info" : "ExpressionStatement[17429-17440]:ExpressionStatement[17548-17559]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17448-17454]:Modifier[17567-17573]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17455-17459]:PrimitiveType[17574-17578]"
    }, {
      "left" : "restartADB",
      "right" : "restartADB",
      "info" : "SimpleName[17460-17470]:SimpleName[17579-17589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17473-17633]:Block[17592-17752]"
    }, {
      "left" : "executeCommandQuietly(adbCommand(\"kill-server\"));",
      "right" : "executeCommandQuietly(adbCommand(\"kill-server\"));",
      "info" : "ExpressionStatement[17479-17528]:ExpressionStatement[17598-17647]"
    }, {
      "left" : "sleep(500);",
      "right" : "sleep(500);",
      "info" : "ExpressionStatement[17533-17544]:ExpressionStatement[17652-17663]"
    }, {
      "left" : "executeCommandQuietly(adbCommand(\"devices\"));",
      "right" : "executeCommandQuietly(adbCommand(\"devices\"));",
      "info" : "ExpressionStatement[17584-17629]:ExpressionStatement[17703-17748]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17639-17646]:Modifier[17758-17765]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[17647-17658]:SimpleType[17766-17777]"
    }, {
      "left" : "adbCommand",
      "right" : "adbCommand",
      "info" : "SimpleName[17659-17669]:SimpleName[17778-17788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17672-17878]:Block[17791-17997]"
    }, {
      "left" : "CommandLine command = new CommandLine(AndroidSdk.adb());",
      "right" : "CommandLine command = new CommandLine(AndroidSdk.adb());",
      "info" : "VariableDeclarationStatement[17678-17734]:VariableDeclarationStatement[17797-17853]"
    }, {
      "left" : "if (isSerialConfigured())",
      "right" : "if (isSerialConfigured())",
      "info" : "IfStatement[17739-17854]:IfStatement[17858-17973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17765-17854]:Block[17884-17973]"
    }, {
      "left" : "command.addArgument(\"-s\", false);",
      "right" : "command.addArgument(\"-s\", false);",
      "info" : "ExpressionStatement[17773-17806]:ExpressionStatement[17892-17925]"
    }, {
      "left" : "command.addArgument(serial, false);",
      "right" : "command.addArgument(serial, false);",
      "info" : "ExpressionStatement[17813-17848]:ExpressionStatement[17932-17967]"
    }, {
      "left" : "return command;",
      "right" : "return command;",
      "info" : "ReturnStatement[17859-17874]:ReturnStatement[17978-17993]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17882-17889]:Modifier[18001-18008]"
    }, {
      "left" : "CommandLine",
      "right" : "CommandLine",
      "info" : "SimpleType[17890-17901]:SimpleType[18009-18020]"
    }, {
      "left" : "adbCommand",
      "right" : "adbCommand",
      "info" : "SimpleName[17902-17912]:SimpleName[18021-18031]"
    }, {
      "left" : "String... args",
      "right" : "String... args",
      "info" : "SingleVariableDeclaration[17913-17927]:SingleVariableDeclaration[18032-18046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17929-18069]:Block[18048-18188]"
    }, {
      "left" : "CommandLine command = adbCommand();",
      "right" : "CommandLine command = adbCommand();",
      "info" : "VariableDeclarationStatement[17935-17970]:VariableDeclarationStatement[18054-18089]"
    }, {
      "left" : "for (String arg : args)",
      "right" : "for (String arg : args)",
      "info" : "EnhancedForStatement[17975-18045]:EnhancedForStatement[18094-18164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17999-18045]:Block[18118-18164]"
    }, {
      "left" : "command.addArgument(arg, false);",
      "right" : "command.addArgument(arg, false);",
      "info" : "ExpressionStatement[18007-18039]:ExpressionStatement[18126-18158]"
    }, {
      "left" : "return command;",
      "right" : "return command;",
      "info" : "ReturnStatement[18050-18065]:ReturnStatement[18169-18184]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18073-18079]:Modifier[18192-18198]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[18080-18086]:SimpleType[18199-18205]"
    }, {
      "left" : "getExternalStoragePath",
      "right" : "getExternalStoragePath",
      "info" : "SimpleName[18087-18109]:SimpleName[18206-18228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18112-18175]:Block[18231-18294]"
    }, {
      "left" : "return runAdbCommand(\"shell echo $EXTERNAL_STORAGE\");",
      "right" : "return runAdbCommand(\"shell echo $EXTERNAL_STORAGE\");",
      "info" : "ReturnStatement[18118-18171]:ReturnStatement[18237-18290]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18202-18208]:Modifier[18321-18327]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[18209-18215]:SimpleType[18328-18334]"
    }, {
      "left" : "getCrashLog",
      "right" : "getCrashLog",
      "info" : "SimpleName[18216-18227]:SimpleName[18335-18346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18230-18869]:Block[18349-18988]"
    }, {
      "left" : "String crashLogFileName = ExternalStorageFile.APP_CRASH_LOG.toString();",
      "right" : "String crashLogFileName = ExternalStorageFile.APP_CRASH_LOG.toString();",
      "info" : "VariableDeclarationStatement[18236-18307]:VariableDeclarationStatement[18355-18426]"
    }, {
      "left" : "String crashLogDirPath = getExternalStoragePath();",
      "right" : "String crashLogDirPath = getExternalStoragePath();",
      "info" : "VariableDeclarationStatement[18401-18451]:VariableDeclarationStatement[18520-18570]"
    }, {
      "left" : "if (!crashLogDirPath.endsWith(\"/\"))",
      "right" : "if (!crashLogDirPath.endsWith(\"/\"))",
      "info" : "IfStatement[18456-18597]:IfStatement[18575-18716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18492-18597]:Block[18611-18716]"
    }, {
      "left" : "crashLogDirPath += \"/\";",
      "right" : "crashLogDirPath += \"/\";",
      "info" : "ExpressionStatement[18500-18523]:ExpressionStatement[18619-18642]"
    }, {
      "left" : "String directoryList = executeCommandQuietly(adbCommand(\"shell\", \"ls\", crashLogDirPath));",
      "right" : "String directoryList = executeCommandQuietly(adbCommand(\"shell\", \"ls\", crashLogDirPath));",
      "info" : "VariableDeclarationStatement[18602-18691]:VariableDeclarationStatement[18721-18810]"
    }, {
      "left" : "if (directoryList.contains(crashLogFileName))",
      "right" : "if (directoryList.contains(crashLogFileName))",
      "info" : "IfStatement[18696-18849]:IfStatement[18815-18968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18742-18849]:Block[18861-18968]"
    }, {
      "left" : "return executeCommandQuietly(adbCommand(\"shell\", \"cat\", crashLogDirPath + crashLogFileName));",
      "right" : "return executeCommandQuietly(adbCommand(\"shell\", \"cat\", crashLogDirPath + crashLogFileName));",
      "info" : "ReturnStatement[18750-18843]:ReturnStatement[18869-18962]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[18855-18865]:ReturnStatement[18974-18984]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18896-18902]:Modifier[19015-19021]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[18903-18909]:SimpleType[19022-19028]"
    }, {
      "left" : "listRunningThirdPartyProcesses",
      "right" : "listRunningThirdPartyProcesses",
      "info" : "SimpleName[18910-18940]:SimpleName[19029-19059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18943-19386]:Block[19062-19505]"
    }, {
      "left" : "String psOutput = runAdbCommand(\"shell ps\");",
      "right" : "String psOutput = runAdbCommand(\"shell ps\");",
      "info" : "VariableDeclarationStatement[18949-18993]:VariableDeclarationStatement[19068-19112]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[18998-19037]:VariableDeclarationStatement[19117-19156]"
    }, {
      "left" : "boolean isFirstHeaderLine = true;",
      "right" : "boolean isFirstHeaderLine = true;",
      "info" : "VariableDeclarationStatement[19042-19075]:VariableDeclarationStatement[19161-19194]"
    }, {
      "left" : "for (String line: Splitter.on(\"\\n\").split(psOutput))",
      "right" : "for (String line: Splitter.on(\"\\n\").split(psOutput))",
      "info" : "EnhancedForStatement[19080-19356]:EnhancedForStatement[19199-19475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19133-19356]:Block[19252-19475]"
    }, {
      "left" : "boolean isThirdPartyProcess = line.contains(\".\") && !line.contains(\"com.android\");",
      "right" : "boolean isThirdPartyProcess = line.contains(\".\") && !line.contains(\"com.android\");",
      "info" : "VariableDeclarationStatement[19141-19223]:VariableDeclarationStatement[19260-19342]"
    }, {
      "left" : "if (isFirstHeaderLine || isThirdPartyProcess)",
      "right" : "if (isFirstHeaderLine || isThirdPartyProcess)",
      "info" : "IfStatement[19230-19317]:IfStatement[19349-19436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19276-19317]:Block[19395-19436]"
    }, {
      "left" : "sb.append(line + \"\\n\");",
      "right" : "sb.append(line + \"\\n\");",
      "info" : "ExpressionStatement[19286-19309]:ExpressionStatement[19405-19428]"
    }, {
      "left" : "isFirstHeaderLine = false;",
      "right" : "isFirstHeaderLine = false;",
      "info" : "ExpressionStatement[19324-19350]:ExpressionStatement[19443-19469]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[19361-19382]:ReturnStatement[19480-19501]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[19390-19397]:Modifier[19509-19516]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[19398-19402]:PrimitiveType[19517-19521]"
    }, {
      "left" : "sleep",
      "right" : "sleep",
      "info" : "SimpleName[19403-19408]:SimpleName[19522-19527]"
    }, {
      "left" : "int millis",
      "right" : "int millis",
      "info" : "SingleVariableDeclaration[19409-19419]:SingleVariableDeclaration[19528-19538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19421-19599]:Block[19540-19718]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[19427-19595]:TryStatement[19546-19714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19431-19466]:Block[19550-19585]"
    }, {
      "left" : "Thread.sleep(millis);",
      "right" : "Thread.sleep(millis);",
      "info" : "ExpressionStatement[19439-19460]:ExpressionStatement[19558-19579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19498-19595]:Block[19617-19714]"
    }, {
      "left" : "Thread.currentThread().interrupt();",
      "right" : "Thread.currentThread().interrupt();",
      "info" : "ExpressionStatement[19506-19541]:ExpressionStatement[19625-19660]"
    }, {
      "left" : "log.log(Level.SEVERE, e.getMessage(), e);",
      "right" : "log.log(Level.SEVERE, e.getMessage(), e);",
      "info" : "ExpressionStatement[19548-19589]:ExpressionStatement[19667-19708]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19603-19612]:MarkerAnnotation[19722-19731]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19615-19621]:Modifier[19734-19740]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[19622-19629]:PrimitiveType[19741-19748]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[19630-19636]:SimpleName[19749-19755]"
    }, {
      "left" : "Object o",
      "right" : "Object o",
      "info" : "SingleVariableDeclaration[19637-19645]:SingleVariableDeclaration[19756-19764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19647-19852]:Block[19766-19971]"
    }, {
      "left" : "if (this == o)",
      "right" : "if (this == o)",
      "info" : "IfStatement[19653-19680]:IfStatement[19772-19799]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[19668-19680]:ReturnStatement[19787-19799]"
    }, {
      "left" : "if (o == null || getClass() != o.getClass() || device == null)",
      "right" : "if (o == null || getClass() != o.getClass() || device == null)",
      "info" : "IfStatement[19685-19761]:IfStatement[19804-19880]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19748-19761]:ReturnStatement[19867-19880]"
    }, {
      "left" : "AbstractDevice that = (AbstractDevice) o;",
      "right" : "AbstractDevice that = (AbstractDevice) o;",
      "info" : "VariableDeclarationStatement[19767-19808]:VariableDeclarationStatement[19886-19927]"
    }, {
      "left" : "return device.equals(that.device);",
      "right" : "return device.equals(that.device);",
      "info" : "ReturnStatement[19814-19848]:ReturnStatement[19933-19967]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[19856-19865]:MarkerAnnotation[19975-19984]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19868-19874]:Modifier[19987-19993]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[19875-19878]:PrimitiveType[19994-19997]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[19879-19887]:SimpleName[19998-20006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19890-19925]:Block[20009-20044]"
    }, {
      "left" : "return device.hashCode();",
      "right" : "return device.hashCode();",
      "info" : "ReturnStatement[19896-19921]:ReturnStatement[20015-20040]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19929-19935]:Modifier[20048-20054]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19936-19942]:SimpleType[20055-20061]"
    }, {
      "left" : "getModel",
      "right" : "getModel",
      "info" : "SimpleName[19943-19951]:SimpleName[20062-20070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19954-19977]:Block[20073-20096]"
    }, {
      "left" : "return model;",
      "right" : "return model;",
      "info" : "ReturnStatement[19960-19973]:ReturnStatement[20079-20092]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19983-19989]:Modifier[20102-20108]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[19990-19996]:SimpleType[20109-20115]"
    }, {
      "left" : "getAPITargetType",
      "right" : "getAPITargetType",
      "info" : "SimpleName[19997-20013]:SimpleName[20116-20132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20016-20047]:Block[20135-20166]"
    }, {
      "left" : "return apiTargetType;",
      "right" : "return apiTargetType;",
      "info" : "ReturnStatement[20022-20043]:ReturnStatement[20141-20162]"
    } ]
  },
  "interFileMappings" : { }
}