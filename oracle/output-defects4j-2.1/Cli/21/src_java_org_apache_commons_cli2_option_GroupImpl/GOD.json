{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "GroupImpl",
      "right" : "GroupImpl",
      "info" : "TypeDeclaration[1532-16786]:TypeDeclaration[1532-16990]"
    }, {
      "left" : "private final String name;",
      "right" : "private final String name;",
      "info" : "FieldDeclaration[1639-1665]:FieldDeclaration[1639-1665]"
    }, {
      "left" : "private final String description;",
      "right" : "private final String description;",
      "info" : "FieldDeclaration[1670-1703]:FieldDeclaration[1670-1703]"
    }, {
      "left" : "private final List options;",
      "right" : "private final List options;",
      "info" : "FieldDeclaration[1708-1735]:FieldDeclaration[1708-1735]"
    }, {
      "left" : "private final int minimum;",
      "right" : "private final int minimum;",
      "info" : "FieldDeclaration[1740-1766]:FieldDeclaration[1740-1766]"
    }, {
      "left" : "private final int maximum;",
      "right" : "private final int maximum;",
      "info" : "FieldDeclaration[1771-1797]:FieldDeclaration[1771-1797]"
    }, {
      "left" : "private final List anonymous;",
      "right" : "private final List anonymous;",
      "info" : "FieldDeclaration[1802-1831]:FieldDeclaration[1802-1831]"
    }, {
      "left" : "private final SortedMap optionMap;",
      "right" : "private final SortedMap optionMap;",
      "info" : "FieldDeclaration[1836-1870]:FieldDeclaration[1836-1870]"
    }, {
      "left" : "private final Set prefixes;",
      "right" : "private final Set prefixes;",
      "info" : "FieldDeclaration[1875-1902]:FieldDeclaration[1875-1902]"
    }, {
      "left" : "public GroupImpl(final List options,\n                     final String name,\n                     final String description,\n                     final int minimum,\n                     final int maximum,\n                     final boolean required)",
      "right" : "public GroupImpl(final List options,\n                     final String name,\n                     final String description,\n                     final int minimum,\n                     final int maximum,\n                     final boolean required)",
      "info" : "MethodDeclaration[1908-4145]:MethodDeclaration[1908-4145]"
    }, {
      "left" : "public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg)",
      "right" : "public boolean canProcess(final WriteableCommandLine commandLine,\n                              final String arg)",
      "info" : "MethodDeclaration[4151-5056]:MethodDeclaration[4151-5056]"
    }, {
      "left" : "public Set getPrefixes()",
      "right" : "public Set getPrefixes()",
      "info" : "MethodDeclaration[5062-5119]:MethodDeclaration[5062-5119]"
    }, {
      "left" : "public Set getTriggers()",
      "right" : "public Set getTriggers()",
      "info" : "MethodDeclaration[5125-5192]:MethodDeclaration[5125-5192]"
    }, {
      "left" : "public void process(final WriteableCommandLine commandLine,\n                        final ListIterator arguments)\n        throws OptionException",
      "right" : "public void process(final WriteableCommandLine commandLine,\n                        final ListIterator arguments)\n        throws OptionException",
      "info" : "MethodDeclaration[5198-8246]:MethodDeclaration[5198-8246]"
    }, {
      "left" : "public void validate(final WriteableCommandLine commandLine)\n        throws OptionException",
      "right" : "public void validate(final WriteableCommandLine commandLine)\n        throws OptionException",
      "info" : "MethodDeclaration[8252-9683]:MethodDeclaration[8252-9683]"
    }, {
      "left" : "public String getPreferredName()",
      "right" : "public String getPreferredName()",
      "info" : "MethodDeclaration[9689-9750]:MethodDeclaration[9689-9750]"
    }, {
      "left" : "public String getDescription()",
      "right" : "public String getDescription()",
      "info" : "MethodDeclaration[9756-9822]:MethodDeclaration[9756-9822]"
    }, {
      "left" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)",
      "right" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp)",
      "info" : "MethodDeclaration[9828-10043]:MethodDeclaration[9828-10043]"
    }, {
      "left" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)",
      "right" : "public void appendUsage(final StringBuffer buffer,\n                            final Set helpSettings,\n                            final Comparator comp,\n                            final String separator)",
      "info" : "MethodDeclaration[10049-13038]:MethodDeclaration[10049-13038]"
    }, {
      "left" : "public List helpLines(final int depth,\n                          final Set helpSettings,\n                          final Comparator comp)",
      "right" : "public List helpLines(final int depth,\n                          final Set helpSettings,\n                          final Comparator comp)",
      "info" : "MethodDeclaration[13044-14495]:MethodDeclaration[13044-14495]"
    }, {
      "left" : "public List getOptions()",
      "right" : "public List getOptions()",
      "info" : "MethodDeclaration[14501-14725]:MethodDeclaration[14501-14725]"
    }, {
      "left" : "public List getAnonymous()",
      "right" : "public List getAnonymous()",
      "info" : "MethodDeclaration[14731-14908]:MethodDeclaration[14731-14908]"
    }, {
      "left" : "public Option findOption(final String trigger)",
      "right" : "public Option findOption(final String trigger)",
      "info" : "MethodDeclaration[14914-15275]:MethodDeclaration[14914-15275]"
    }, {
      "left" : "public int getMinimum()",
      "right" : "public int getMinimum()",
      "info" : "MethodDeclaration[15281-15336]:MethodDeclaration[15281-15336]"
    }, {
      "left" : "public int getMaximum()",
      "right" : "public int getMaximum()",
      "info" : "MethodDeclaration[15342-15397]:MethodDeclaration[15342-15397]"
    }, {
      "left" : "public boolean isRequired()",
      "right" : "public boolean isRequired()",
      "info" : "MethodDeclaration[15403-15788]:MethodDeclaration[15403-15788]"
    }, {
      "left" : "public void defaults(final WriteableCommandLine commandLine)",
      "right" : "public void defaults(final WriteableCommandLine commandLine)",
      "info" : "MethodDeclaration[15794-16249]:MethodDeclaration[15794-16249]"
    }, {
      "left" : "private boolean looksLikeOption(final WriteableCommandLine commandLine,\n            final String trigger)",
      "right" : "private boolean looksLikeOption(final WriteableCommandLine commandLine,\n            final String trigger)",
      "info" : "MethodDeclaration[16255-16784]:MethodDeclaration[16255-16988]"
    }, {
      "left" : "ReverseStringComparator",
      "right" : "ReverseStringComparator",
      "info" : "TypeDeclaration[16789-17422]:TypeDeclaration[16993-17626]"
    }, {
      "left" : "private static final Comparator instance = new ReverseStringComparator();",
      "right" : "private static final Comparator instance = new ReverseStringComparator();",
      "info" : "FieldDeclaration[16847-16920]:FieldDeclaration[17051-17124]"
    }, {
      "left" : "private ReverseStringComparator()",
      "right" : "private ReverseStringComparator()",
      "info" : "MethodDeclaration[16926-17019]:MethodDeclaration[17130-17223]"
    }, {
      "left" : "public static final Comparator getInstance()",
      "right" : "public static final Comparator getInstance()",
      "info" : "MethodDeclaration[17025-17218]:MethodDeclaration[17229-17422]"
    }, {
      "left" : "public int compare(final Object o1,\n                       final Object o2)",
      "right" : "public int compare(final Object o1,\n                       final Object o2)",
      "info" : "MethodDeclaration[17224-17420]:MethodDeclaration[17428-17624]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2632-4145]:Block[2632-4145]"
    }, {
      "left" : "super(0, required);",
      "right" : "super(0, required);",
      "info" : "SuperConstructorInvocation[2642-2661]:SuperConstructorInvocation[2642-2661]"
    }, {
      "left" : "this.name = name;",
      "right" : "this.name = name;",
      "info" : "ExpressionStatement[2671-2688]:ExpressionStatement[2671-2688]"
    }, {
      "left" : "this.description = description;",
      "right" : "this.description = description;",
      "info" : "ExpressionStatement[2697-2728]:ExpressionStatement[2697-2728]"
    }, {
      "left" : "this.minimum = minimum;",
      "right" : "this.minimum = minimum;",
      "info" : "ExpressionStatement[2737-2760]:ExpressionStatement[2737-2760]"
    }, {
      "left" : "this.maximum = maximum;",
      "right" : "this.maximum = maximum;",
      "info" : "ExpressionStatement[2769-2792]:ExpressionStatement[2769-2792]"
    }, {
      "left" : "this.options = Collections.unmodifiableList(options);",
      "right" : "this.options = Collections.unmodifiableList(options);",
      "info" : "ExpressionStatement[2883-2936]:ExpressionStatement[2883-2936]"
    }, {
      "left" : "final List newAnonymous = new ArrayList();",
      "right" : "final List newAnonymous = new ArrayList();",
      "info" : "VariableDeclarationStatement[2994-3036]:VariableDeclarationStatement[2994-3036]"
    }, {
      "left" : "final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());",
      "right" : "final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());",
      "info" : "VariableDeclarationStatement[3108-3190]:VariableDeclarationStatement[3108-3190]"
    }, {
      "left" : "final Set newPrefixes = new HashSet();",
      "right" : "final Set newPrefixes = new HashSet();",
      "info" : "VariableDeclarationStatement[3238-3276]:VariableDeclarationStatement[3238-3276]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[3317-3929]:ForStatement[3317-3929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3375-3929]:Block[3375-3929]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[3389-3429]:VariableDeclarationStatement[3389-3429]"
    }, {
      "left" : "option.setParent(this);",
      "right" : "option.setParent(this);",
      "info" : "ExpressionStatement[3442-3465]:ExpressionStatement[3442-3465]"
    }, {
      "left" : "if (option instanceof Argument)",
      "right" : "if (option instanceof Argument)",
      "info" : "IfStatement[3479-3919]:IfStatement[3479-3919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3511-3596]:Block[3511-3596]"
    }, {
      "left" : "i.remove();",
      "right" : "i.remove();",
      "info" : "ExpressionStatement[3529-3540]:ExpressionStatement[3529-3540]"
    }, {
      "left" : "newAnonymous.add(option);",
      "right" : "newAnonymous.add(option);",
      "info" : "ExpressionStatement[3557-3582]:ExpressionStatement[3557-3582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3602-3919]:Block[3602-3919]"
    }, {
      "left" : "final Set triggers = option.getTriggers();",
      "right" : "final Set triggers = option.getTriggers();",
      "info" : "VariableDeclarationStatement[3620-3662]:VariableDeclarationStatement[3620-3662]"
    }, {
      "left" : "for (Iterator j = triggers.iterator(); j.hasNext())",
      "right" : "for (Iterator j = triggers.iterator(); j.hasNext())",
      "info" : "ForStatement[3680-3808]:ForStatement[3680-3808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3733-3808]:Block[3733-3808]"
    }, {
      "left" : "newOptionMap.put(j.next(), option);",
      "right" : "newOptionMap.put(j.next(), option);",
      "info" : "ExpressionStatement[3755-3790]:ExpressionStatement[3755-3790]"
    }, {
      "left" : "newPrefixes.addAll(option.getPrefixes());",
      "right" : "newPrefixes.addAll(option.getPrefixes());",
      "info" : "ExpressionStatement[3864-3905]:ExpressionStatement[3864-3905]"
    }, {
      "left" : "this.anonymous = Collections.unmodifiableList(newAnonymous);",
      "right" : "this.anonymous = Collections.unmodifiableList(newAnonymous);",
      "info" : "ExpressionStatement[3939-3999]:ExpressionStatement[3939-3999]"
    }, {
      "left" : "this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);",
      "right" : "this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);",
      "info" : "ExpressionStatement[4008-4073]:ExpressionStatement[4008-4073]"
    }, {
      "left" : "this.prefixes = Collections.unmodifiableSet(newPrefixes);",
      "right" : "this.prefixes = Collections.unmodifiableSet(newPrefixes);",
      "info" : "ExpressionStatement[4082-4139]:ExpressionStatement[4082-4139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4265-5056]:Block[4265-5056]"
    }, {
      "left" : "if (arg == null)",
      "right" : "if (arg == null)",
      "info" : "IfStatement[4275-4329]:IfStatement[4275-4329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4292-4329]:Block[4292-4329]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4306-4319]:ReturnStatement[4306-4319]"
    }, {
      "left" : "if (optionMap.containsKey(arg))",
      "right" : "if (optionMap.containsKey(arg))",
      "info" : "IfStatement[4383-4451]:IfStatement[4383-4451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4415-4451]:Block[4415-4451]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4429-4441]:ReturnStatement[4429-4441]"
    }, {
      "left" : "final Map tailMap = optionMap.tailMap(arg);",
      "right" : "final Map tailMap = optionMap.tailMap(arg);",
      "info" : "VariableDeclarationStatement[4479-4522]:VariableDeclarationStatement[4479-4522]"
    }, {
      "left" : "for (final Iterator iter = tailMap.values().iterator(); iter.hasNext())",
      "right" : "for (final Iterator iter = tailMap.values().iterator(); iter.hasNext())",
      "info" : "ForStatement[4573-4812]:ForStatement[4573-4812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4646-4812]:Block[4646-4812]"
    }, {
      "left" : "final Option option = (Option) iter.next();",
      "right" : "final Option option = (Option) iter.next();",
      "info" : "VariableDeclarationStatement[4660-4703]:VariableDeclarationStatement[4660-4703]"
    }, {
      "left" : "if (option.canProcess(commandLine, arg))",
      "right" : "if (option.canProcess(commandLine, arg))",
      "info" : "IfStatement[4717-4802]:IfStatement[4717-4802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4758-4802]:Block[4758-4802]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4776-4788]:ReturnStatement[4776-4788]"
    }, {
      "left" : "if (looksLikeOption(commandLine, arg))",
      "right" : "if (looksLikeOption(commandLine, arg))",
      "info" : "IfStatement[4822-4898]:IfStatement[4822-4898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4861-4898]:Block[4861-4898]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4875-4888]:ReturnStatement[4875-4888]"
    }, {
      "left" : "if (anonymous.size() > 0)",
      "right" : "if (anonymous.size() > 0)",
      "info" : "IfStatement[4965-5027]:IfStatement[4965-5027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4991-5027]:Block[4991-5027]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5005-5017]:ReturnStatement[5005-5017]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[5037-5050]:ReturnStatement[5037-5050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5087-5119]:Block[5087-5119]"
    }, {
      "left" : "return prefixes;",
      "right" : "return prefixes;",
      "info" : "ReturnStatement[5097-5113]:ReturnStatement[5097-5113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5150-5192]:Block[5150-5192]"
    }, {
      "left" : "return optionMap.keySet();",
      "right" : "return optionMap.keySet();",
      "info" : "ReturnStatement[5160-5186]:ReturnStatement[5160-5186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5343-8246]:Block[5343-8246]"
    }, {
      "left" : "String previous = null;",
      "right" : "String previous = null;",
      "info" : "VariableDeclarationStatement[5353-5376]:VariableDeclarationStatement[5353-5376]"
    }, {
      "left" : "while (arguments.hasNext())",
      "right" : "while (arguments.hasNext())",
      "info" : "WhileStatement[5436-8200]:WhileStatement[5436-8200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5464-8200]:Block[5464-8200]"
    }, {
      "left" : "final String arg = (String) arguments.next();",
      "right" : "final String arg = (String) arguments.next();",
      "info" : "VariableDeclarationStatement[5516-5561]:VariableDeclarationStatement[5516-5561]"
    }, {
      "left" : "if (arg == previous)",
      "right" : "if (arg == previous)",
      "info" : "IfStatement[5637-5773]:IfStatement[5637-5773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5658-5773]:Block[5658-5773]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[5714-5735]:ExpressionStatement[5714-5735]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5753-5759]:BreakStatement[5753-5759]"
    }, {
      "left" : "previous = arg;",
      "right" : "previous = arg;",
      "info" : "ExpressionStatement[5835-5850]:ExpressionStatement[5835-5850]"
    }, {
      "left" : "final Option opt = (Option) optionMap.get(arg);",
      "right" : "final Option opt = (Option) optionMap.get(arg);",
      "info" : "VariableDeclarationStatement[5864-5911]:VariableDeclarationStatement[5864-5911]"
    }, {
      "left" : "if (opt != null)",
      "right" : "if (opt != null)",
      "info" : "IfStatement[5953-8165]:IfStatement[5953-8165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5970-6076]:Block[5970-6076]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[5988-6009]:ExpressionStatement[5988-6009]"
    }, {
      "left" : "opt.process(commandLine, arguments);",
      "right" : "opt.process(commandLine, arguments);",
      "info" : "ExpressionStatement[6026-6062]:ExpressionStatement[6026-6062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6133-8165]:Block[6133-8165]"
    }, {
      "left" : "if (looksLikeOption(commandLine, arg))",
      "right" : "if (looksLikeOption(commandLine, arg))",
      "info" : "IfStatement[6272-8117]:IfStatement[6272-8117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6311-7171]:Block[6311-7171]"
    }, {
      "left" : "final Collection values = optionMap.tailMap(arg).values();",
      "right" : "final Collection values = optionMap.tailMap(arg).values();",
      "info" : "VariableDeclarationStatement[6374-6432]:VariableDeclarationStatement[6374-6432]"
    }, {
      "left" : "boolean foundMemberOption = false;",
      "right" : "boolean foundMemberOption = false;",
      "info" : "VariableDeclarationStatement[6454-6488]:VariableDeclarationStatement[6454-6488]"
    }, {
      "left" : "for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption)",
      "right" : "for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption)",
      "info" : "ForStatement[6510-6937]:ForStatement[6510-6937]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6583-6937]:Block[6583-6937]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[6609-6649]:VariableDeclarationStatement[6609-6649]"
    }, {
      "left" : "if (option.canProcess(commandLine, arg))",
      "right" : "if (option.canProcess(commandLine, arg))",
      "info" : "IfStatement[6675-6915]:IfStatement[6675-6915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6716-6915]:Block[6716-6915]"
    }, {
      "left" : "foundMemberOption = true;",
      "right" : "foundMemberOption = true;",
      "info" : "ExpressionStatement[6746-6771]:ExpressionStatement[6746-6771]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[6800-6821]:ExpressionStatement[6800-6821]"
    }, {
      "left" : "option.process(commandLine, arguments);",
      "right" : "option.process(commandLine, arguments);",
      "info" : "ExpressionStatement[6850-6889]:ExpressionStatement[6850-6889]"
    }, {
      "left" : "if (!foundMemberOption)",
      "right" : "if (!foundMemberOption)",
      "info" : "IfStatement[7027-7153]:IfStatement[7027-7153]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7051-7153]:Block[7051-7153]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[7077-7098]:ExpressionStatement[7077-7098]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[7124-7131]:ReturnStatement[7124-7131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7280-8117]:Block[7280-8117]"
    }, {
      "left" : "arguments.previous();",
      "right" : "arguments.previous();",
      "info" : "ExpressionStatement[7368-7389]:ExpressionStatement[7368-7389]"
    }, {
      "left" : "if (anonymous.isEmpty())",
      "right" : "if (anonymous.isEmpty())",
      "info" : "IfStatement[7536-7615]:IfStatement[7536-7615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7561-7615]:Block[7561-7615]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7587-7593]:BreakStatement[7587-7593]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[7773-8099]:ForStatement[7773-8099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7833-8099]:Block[7833-8099]"
    }, {
      "left" : "final Argument argument = (Argument) i.next();",
      "right" : "final Argument argument = (Argument) i.next();",
      "info" : "VariableDeclarationStatement[7859-7905]:VariableDeclarationStatement[7859-7905]"
    }, {
      "left" : "if (argument.canProcess(commandLine, arguments))",
      "right" : "if (argument.canProcess(commandLine, arguments))",
      "info" : "IfStatement[7931-8077]:IfStatement[7931-8077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7980-8077]:Block[7980-8077]"
    }, {
      "left" : "argument.process(commandLine, arguments);",
      "right" : "argument.process(commandLine, arguments);",
      "info" : "ExpressionStatement[8010-8051]:ExpressionStatement[8010-8051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8344-9683]:Block[8344-9683]"
    }, {
      "left" : "int present = 0;",
      "right" : "int present = 0;",
      "info" : "VariableDeclarationStatement[8389-8405]:VariableDeclarationStatement[8389-8405]"
    }, {
      "left" : "Option unexpected = null;",
      "right" : "Option unexpected = null;",
      "info" : "VariableDeclarationStatement[8463-8488]:VariableDeclarationStatement[8463-8488]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[8498-9085]:ForStatement[8498-9085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8556-9085]:Block[8556-9085]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[8570-8610]:VariableDeclarationStatement[8570-8610]"
    }, {
      "left" : "boolean validate = option.isRequired();",
      "right" : "boolean validate = option.isRequired();",
      "info" : "VariableDeclarationStatement[8657-8696]:VariableDeclarationStatement[8657-8696]"
    }, {
      "left" : "if (commandLine.hasOption(option))",
      "right" : "if (commandLine.hasOption(option))",
      "info" : "IfStatement[8773-8986]:IfStatement[8773-8986]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8808-8986]:Block[8808-8986]"
    }, {
      "left" : "if (++present > maximum)",
      "right" : "if (++present > maximum)",
      "info" : "IfStatement[8826-8939]:IfStatement[8826-8939]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8851-8939]:Block[8851-8939]"
    }, {
      "left" : "unexpected = option;",
      "right" : "unexpected = option;",
      "info" : "ExpressionStatement[8873-8893]:ExpressionStatement[8873-8893]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8915-8921]:BreakStatement[8915-8921]"
    }, {
      "left" : "validate = true;",
      "right" : "validate = true;",
      "info" : "ExpressionStatement[8956-8972]:ExpressionStatement[8956-8972]"
    }, {
      "left" : "if (validate)",
      "right" : "if (validate)",
      "info" : "IfStatement[9000-9075]:IfStatement[9000-9075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9014-9075]:Block[9014-9075]"
    }, {
      "left" : "option.validate(commandLine);",
      "right" : "option.validate(commandLine);",
      "info" : "ExpressionStatement[9032-9061]:ExpressionStatement[9032-9061]"
    }, {
      "left" : "if (unexpected != null)",
      "right" : "if (unexpected != null)",
      "info" : "IfStatement[9123-9308]:IfStatement[9123-9308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9147-9308]:Block[9147-9308]"
    }, {
      "left" : "throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());",
      "right" : "throw new OptionException(this, ResourceConstants.UNEXPECTED_TOKEN,\n                                      unexpected.getPreferredName());",
      "info" : "ThrowStatement[9161-9298]:ThrowStatement[9161-9298]"
    }, {
      "left" : "if (present < minimum)",
      "right" : "if (present < minimum)",
      "info" : "IfStatement[9344-9457]:IfStatement[9344-9457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9367-9457]:Block[9367-9457]"
    }, {
      "left" : "throw new OptionException(this, ResourceConstants.MISSING_OPTION);",
      "right" : "throw new OptionException(this, ResourceConstants.MISSING_OPTION);",
      "info" : "ThrowStatement[9381-9447]:ThrowStatement[9381-9447]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[9511-9677]:ForStatement[9511-9677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9571-9677]:Block[9571-9677]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[9585-9625]:VariableDeclarationStatement[9585-9625]"
    }, {
      "left" : "option.validate(commandLine);",
      "right" : "option.validate(commandLine);",
      "info" : "ExpressionStatement[9638-9667]:ExpressionStatement[9638-9667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9722-9750]:Block[9722-9750]"
    }, {
      "left" : "return name;",
      "right" : "return name;",
      "info" : "ReturnStatement[9732-9744]:ReturnStatement[9732-9744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9787-9822]:Block[9787-9822]"
    }, {
      "left" : "return description;",
      "right" : "return description;",
      "info" : "ReturnStatement[9797-9816]:ReturnStatement[9797-9816]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9982-10043]:Block[9982-10043]"
    }, {
      "left" : "appendUsage(buffer, helpSettings, comp, \"|\");",
      "right" : "appendUsage(buffer, helpSettings, comp, \"|\");",
      "info" : "ExpressionStatement[9992-10037]:ExpressionStatement[9992-10037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10255-13038]:Block[10255-13038]"
    }, {
      "left" : "final Set helpSettingsCopy = new HashSet(helpSettings);",
      "right" : "final Set helpSettingsCopy = new HashSet(helpSettings);",
      "info" : "VariableDeclarationStatement[10265-10320]:VariableDeclarationStatement[10265-10320]"
    }, {
      "left" : "final boolean optional = !isRequired()\n                && (helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL) ||\n                        helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL_CHILD_GROUP));",
      "right" : "final boolean optional = !isRequired()\n                && (helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL) ||\n                        helpSettingsCopy.contains(DisplaySetting.DISPLAY_OPTIONAL_CHILD_GROUP));",
      "info" : "VariableDeclarationStatement[10330-10547]:VariableDeclarationStatement[10330-10547]"
    }, {
      "left" : "final boolean expanded =\n            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);",
      "right" : "final boolean expanded =\n            (name == null) || helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED);",
      "info" : "VariableDeclarationStatement[10557-10677]:VariableDeclarationStatement[10557-10677]"
    }, {
      "left" : "final boolean named =\n            !expanded ||\n            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));",
      "right" : "final boolean named =\n            !expanded ||\n            ((name != null) && helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_NAME));",
      "info" : "VariableDeclarationStatement[10687-10827]:VariableDeclarationStatement[10687-10827]"
    }, {
      "left" : "final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);",
      "right" : "final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);",
      "info" : "VariableDeclarationStatement[10837-10928]:VariableDeclarationStatement[10837-10928]"
    }, {
      "left" : "final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "right" : "final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "info" : "VariableDeclarationStatement[10938-11022]:VariableDeclarationStatement[10938-11022]"
    }, {
      "left" : "helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "right" : "helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);",
      "info" : "ExpressionStatement[11032-11092]:ExpressionStatement[11032-11092]"
    }, {
      "left" : "final boolean both = named && expanded;",
      "right" : "final boolean both = named && expanded;",
      "info" : "VariableDeclarationStatement[11102-11141]:VariableDeclarationStatement[11102-11141]"
    }, {
      "left" : "if (optional)",
      "right" : "if (optional)",
      "info" : "IfStatement[11151-11208]:IfStatement[11151-11208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11165-11208]:Block[11165-11208]"
    }, {
      "left" : "buffer.append('[');",
      "right" : "buffer.append('[');",
      "info" : "ExpressionStatement[11179-11198]:ExpressionStatement[11179-11198]"
    }, {
      "left" : "if (named)",
      "right" : "if (named)",
      "info" : "IfStatement[11218-11273]:IfStatement[11218-11273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11229-11273]:Block[11229-11273]"
    }, {
      "left" : "buffer.append(name);",
      "right" : "buffer.append(name);",
      "info" : "ExpressionStatement[11243-11263]:ExpressionStatement[11243-11263]"
    }, {
      "left" : "if (both)",
      "right" : "if (both)",
      "info" : "IfStatement[11283-11337]:IfStatement[11283-11337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11293-11337]:Block[11293-11337]"
    }, {
      "left" : "buffer.append(\" (\");",
      "right" : "buffer.append(\" (\");",
      "info" : "ExpressionStatement[11307-11327]:ExpressionStatement[11307-11327]"
    }, {
      "left" : "if (expanded)",
      "right" : "if (expanded)",
      "info" : "IfStatement[11347-12530]:IfStatement[11347-12530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11361-12530]:Block[11361-12530]"
    }, {
      "left" : "final Set childSettings;",
      "right" : "final Set childSettings;",
      "info" : "VariableDeclarationStatement[11375-11399]:VariableDeclarationStatement[11375-11399]"
    }, {
      "left" : "if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "right" : "if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "info" : "IfStatement[11413-11707]:IfStatement[11413-11707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11484-11552]:Block[11484-11552]"
    }, {
      "left" : "childSettings = DisplaySetting.NONE;",
      "right" : "childSettings = DisplaySetting.NONE;",
      "info" : "ExpressionStatement[11502-11538]:ExpressionStatement[11502-11538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11558-11707]:Block[11558-11707]"
    }, {
      "left" : "childSettings = new HashSet(helpSettingsCopy);",
      "right" : "childSettings = new HashSet(helpSettingsCopy);",
      "info" : "ExpressionStatement[11576-11622]:ExpressionStatement[11576-11622]"
    }, {
      "left" : "childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);",
      "right" : "childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);",
      "info" : "ExpressionStatement[11639-11693]:ExpressionStatement[11639-11693]"
    }, {
      "left" : "final List list;",
      "right" : "final List list;",
      "info" : "VariableDeclarationStatement[11772-11788]:VariableDeclarationStatement[11772-11788]"
    }, {
      "left" : "if (comp == null)",
      "right" : "if (comp == null)",
      "info" : "IfStatement[11802-12093]:IfStatement[11802-12093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11820-11921]:Block[11820-11921]"
    }, {
      "left" : "list = options;",
      "right" : "list = options;",
      "info" : "ExpressionStatement[11892-11907]:ExpressionStatement[11892-11907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11927-12093]:Block[11927-12093]"
    }, {
      "left" : "list = new ArrayList(options);",
      "right" : "list = new ArrayList(options);",
      "info" : "ExpressionStatement[12003-12033]:ExpressionStatement[12003-12033]"
    }, {
      "left" : "Collections.sort(list, comp);",
      "right" : "Collections.sort(list, comp);",
      "info" : "ExpressionStatement[12050-12079]:ExpressionStatement[12050-12079]"
    }, {
      "left" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "info" : "ForStatement[12139-12520]:ForStatement[12139-12520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12194-12520]:Block[12194-12520]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[12212-12252]:VariableDeclarationStatement[12212-12252]"
    }, {
      "left" : "option.appendUsage(buffer, childSettings, comp);",
      "right" : "option.appendUsage(buffer, childSettings, comp);",
      "info" : "ExpressionStatement[12314-12362]:ExpressionStatement[12314-12362]"
    }, {
      "left" : "if (i.hasNext())",
      "right" : "if (i.hasNext())",
      "info" : "IfStatement[12424-12506]:IfStatement[12424-12506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12441-12506]:Block[12441-12506]"
    }, {
      "left" : "buffer.append(separator);",
      "right" : "buffer.append(separator);",
      "info" : "ExpressionStatement[12463-12488]:ExpressionStatement[12463-12488]"
    }, {
      "left" : "if (both)",
      "right" : "if (both)",
      "info" : "IfStatement[12540-12593]:IfStatement[12540-12593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12550-12593]:Block[12550-12593]"
    }, {
      "left" : "buffer.append(')');",
      "right" : "buffer.append(')');",
      "info" : "ExpressionStatement[12564-12583]:ExpressionStatement[12564-12583]"
    }, {
      "left" : "if (optional && outer)",
      "right" : "if (optional && outer)",
      "info" : "IfStatement[12603-12669]:IfStatement[12603-12669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12626-12669]:Block[12626-12669]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[12640-12659]:ExpressionStatement[12640-12659]"
    }, {
      "left" : "if (arguments)",
      "right" : "if (arguments)",
      "info" : "IfStatement[12679-12955]:IfStatement[12679-12955]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12694-12955]:Block[12694-12955]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[12708-12945]:ForStatement[12708-12945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12768-12945]:Block[12768-12945]"
    }, {
      "left" : "buffer.append(' ');",
      "right" : "buffer.append(' ');",
      "info" : "ExpressionStatement[12786-12805]:ExpressionStatement[12786-12805]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[12823-12863]:VariableDeclarationStatement[12823-12863]"
    }, {
      "left" : "option.appendUsage(buffer, helpSettingsCopy, comp);",
      "right" : "option.appendUsage(buffer, helpSettingsCopy, comp);",
      "info" : "ExpressionStatement[12880-12931]:ExpressionStatement[12880-12931]"
    }, {
      "left" : "if (optional && !outer)",
      "right" : "if (optional && !outer)",
      "info" : "IfStatement[12965-13032]:IfStatement[12965-13032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12989-13032]:Block[12989-13032]"
    }, {
      "left" : "buffer.append(']');",
      "right" : "buffer.append(']');",
      "info" : "ExpressionStatement[13003-13022]:ExpressionStatement[13003-13022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13182-14495]:Block[13182-14495]"
    }, {
      "left" : "final List helpLines = new ArrayList();",
      "right" : "final List helpLines = new ArrayList();",
      "info" : "VariableDeclarationStatement[13192-13231]:VariableDeclarationStatement[13192-13231]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_NAME))",
      "info" : "IfStatement[13241-13420]:IfStatement[13241-13420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13303-13420]:Block[13303-13420]"
    }, {
      "left" : "final HelpLine helpLine = new HelpLineImpl(this, depth);",
      "right" : "final HelpLine helpLine = new HelpLineImpl(this, depth);",
      "info" : "VariableDeclarationStatement[13317-13373]:VariableDeclarationStatement[13317-13373]"
    }, {
      "left" : "helpLines.add(helpLine);",
      "right" : "helpLines.add(helpLine);",
      "info" : "ExpressionStatement[13386-13410]:ExpressionStatement[13386-13410]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED))",
      "info" : "IfStatement[13430-14147]:IfStatement[13430-14147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13496-14147]:Block[13496-14147]"
    }, {
      "left" : "final List list;",
      "right" : "final List list;",
      "info" : "VariableDeclarationStatement[13561-13577]:VariableDeclarationStatement[13561-13577]"
    }, {
      "left" : "if (comp == null)",
      "right" : "if (comp == null)",
      "info" : "IfStatement[13591-13882]:IfStatement[13591-13882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13609-13710]:Block[13609-13710]"
    }, {
      "left" : "list = options;",
      "right" : "list = options;",
      "info" : "ExpressionStatement[13681-13696]:ExpressionStatement[13681-13696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13716-13882]:Block[13716-13882]"
    }, {
      "left" : "list = new ArrayList(options);",
      "right" : "list = new ArrayList(options);",
      "info" : "ExpressionStatement[13792-13822]:ExpressionStatement[13792-13822]"
    }, {
      "left" : "Collections.sort(list, comp);",
      "right" : "Collections.sort(list, comp);",
      "info" : "ExpressionStatement[13839-13868]:ExpressionStatement[13839-13868]"
    }, {
      "left" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = list.iterator(); i.hasNext())",
      "info" : "ForStatement[13927-14137]:ForStatement[13927-14137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13982-14137]:Block[13982-14137]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[14000-14040]:VariableDeclarationStatement[14000-14040]"
    }, {
      "left" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "right" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "info" : "ExpressionStatement[14057-14123]:ExpressionStatement[14057-14123]"
    }, {
      "left" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT))",
      "right" : "if (helpSettings.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT))",
      "info" : "IfStatement[14157-14462]:IfStatement[14157-14462]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14223-14462]:Block[14223-14462]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[14237-14452]:ForStatement[14237-14452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14297-14452]:Block[14297-14452]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[14315-14355]:VariableDeclarationStatement[14315-14355]"
    }, {
      "left" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "right" : "helpLines.addAll(option.helpLines(depth + 1, helpSettings, comp));",
      "info" : "ExpressionStatement[14372-14438]:ExpressionStatement[14372-14438]"
    }, {
      "left" : "return helpLines;",
      "right" : "return helpLines;",
      "info" : "ReturnStatement[14472-14489]:ReturnStatement[14472-14489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14694-14725]:Block[14694-14725]"
    }, {
      "left" : "return options;",
      "right" : "return options;",
      "info" : "ReturnStatement[14704-14719]:ReturnStatement[14704-14719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14875-14908]:Block[14875-14908]"
    }, {
      "left" : "return anonymous;",
      "right" : "return anonymous;",
      "info" : "ReturnStatement[14885-14902]:ReturnStatement[14885-14902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14961-15275]:Block[14961-15275]"
    }, {
      "left" : "final Iterator i = getOptions().iterator();",
      "right" : "final Iterator i = getOptions().iterator();",
      "info" : "VariableDeclarationStatement[14971-15014]:VariableDeclarationStatement[14971-15014]"
    }, {
      "left" : "while (i.hasNext())",
      "right" : "while (i.hasNext())",
      "info" : "WhileStatement[15024-15247]:WhileStatement[15024-15247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15044-15247]:Block[15044-15247]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[15058-15098]:VariableDeclarationStatement[15058-15098]"
    }, {
      "left" : "final Option found = option.findOption(trigger);",
      "right" : "final Option found = option.findOption(trigger);",
      "info" : "VariableDeclarationStatement[15111-15159]:VariableDeclarationStatement[15111-15159]"
    }, {
      "left" : "if (found != null)",
      "right" : "if (found != null)",
      "info" : "IfStatement[15173-15237]:IfStatement[15173-15237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15192-15237]:Block[15192-15237]"
    }, {
      "left" : "return found;",
      "right" : "return found;",
      "info" : "ReturnStatement[15210-15223]:ReturnStatement[15210-15223]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[15257-15269]:ReturnStatement[15257-15269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15305-15336]:Block[15305-15336]"
    }, {
      "left" : "return minimum;",
      "right" : "return minimum;",
      "info" : "ReturnStatement[15315-15330]:ReturnStatement[15315-15330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15366-15397]:Block[15366-15397]"
    }, {
      "left" : "return maximum;",
      "right" : "return maximum;",
      "info" : "ReturnStatement[15376-15391]:ReturnStatement[15376-15391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15701-15788]:Block[15701-15788]"
    }, {
      "left" : "return (getParent() == null || super.isRequired()) && getMinimum() > 0;",
      "right" : "return (getParent() == null || super.isRequired()) && getMinimum() > 0;",
      "info" : "ReturnStatement[15711-15782]:ReturnStatement[15711-15782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15855-16249]:Block[15855-16249]"
    }, {
      "left" : "super.defaults(commandLine);",
      "right" : "super.defaults(commandLine);",
      "info" : "ExpressionStatement[15865-15893]:ExpressionStatement[15865-15893]"
    }, {
      "left" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = options.iterator(); i.hasNext())",
      "info" : "ForStatement[15903-16067]:ForStatement[15903-16067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15961-16067]:Block[15961-16067]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[15975-16015]:VariableDeclarationStatement[15975-16015]"
    }, {
      "left" : "option.defaults(commandLine);",
      "right" : "option.defaults(commandLine);",
      "info" : "ExpressionStatement[16028-16057]:ExpressionStatement[16028-16057]"
    }, {
      "left" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "right" : "for (final Iterator i = anonymous.iterator(); i.hasNext())",
      "info" : "ForStatement[16077-16243]:ForStatement[16077-16243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16137-16243]:Block[16137-16243]"
    }, {
      "left" : "final Option option = (Option) i.next();",
      "right" : "final Option option = (Option) i.next();",
      "info" : "VariableDeclarationStatement[16151-16191]:VariableDeclarationStatement[16151-16191]"
    }, {
      "left" : "option.defaults(commandLine);",
      "right" : "option.defaults(commandLine);",
      "info" : "ExpressionStatement[16204-16233]:ExpressionStatement[16204-16233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16720-16784]:Block[16720-16988]"
    }, {
      "left" : "return commandLine.looksLikeOption(trigger);",
      "right" : "return commandLine.looksLikeOption(trigger);",
      "info" : "ReturnStatement[16734-16778]:ReturnStatement[16855-16899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16960-17019]:Block[17164-17223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17186-17218]:Block[17390-17422]"
    }, {
      "left" : "return instance;",
      "right" : "return instance;",
      "info" : "ReturnStatement[17196-17212]:ReturnStatement[17400-17416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17300-17420]:Block[17504-17624]"
    }, {
      "left" : "final String s1 = (String) o1;",
      "right" : "final String s1 = (String) o1;",
      "info" : "VariableDeclarationStatement[17310-17340]:VariableDeclarationStatement[17514-17544]"
    }, {
      "left" : "final String s2 = (String) o2;",
      "right" : "final String s2 = (String) o2;",
      "info" : "VariableDeclarationStatement[17349-17379]:VariableDeclarationStatement[17553-17583]"
    }, {
      "left" : "return -s1.compareTo(s2);",
      "right" : "return -s1.compareTo(s2);",
      "info" : "ReturnStatement[17389-17414]:ReturnStatement[17593-17618]"
    } ]
  },
  "interFileMappings" : { }
}