{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FilteringParserDelegate",
      "right" : "FilteringParserDelegate",
      "info" : "TypeDeclaration[314-33595]:TypeDeclaration[314-33989]"
    }, {
      "left" : "protected TokenFilter rootFilter;",
      "right" : "protected TokenFilter rootFilter;",
      "info" : "FieldDeclaration[727-890]:FieldDeclaration[727-890]"
    }, {
      "left" : "protected boolean _allowMultipleMatches;",
      "right" : "protected boolean _allowMultipleMatches;",
      "info" : "FieldDeclaration[896-1289]:FieldDeclaration[896-1289]"
    }, {
      "left" : "protected boolean _includePath;",
      "right" : "protected boolean _includePath;",
      "info" : "FieldDeclaration[1295-1649]:FieldDeclaration[1295-1649]"
    }, {
      "left" : "@Deprecated\n    protected boolean _includeImmediateParent;",
      "right" : "@Deprecated\n    protected boolean _includeImmediateParent;",
      "info" : "FieldDeclaration[2053-2111]:FieldDeclaration[2053-2111]"
    }, {
      "left" : "protected JsonToken _currToken;",
      "right" : "protected JsonToken _currToken;",
      "info" : "FieldDeclaration[2278-2503]:FieldDeclaration[2278-2503]"
    }, {
      "left" : "protected JsonToken _lastClearedToken;",
      "right" : "protected JsonToken _lastClearedToken;",
      "info" : "FieldDeclaration[2509-2683]:FieldDeclaration[2509-2683]"
    }, {
      "left" : "protected TokenFilterContext _headContext;",
      "right" : "protected TokenFilterContext _headContext;",
      "info" : "FieldDeclaration[2693-2957]:FieldDeclaration[2693-2957]"
    }, {
      "left" : "protected TokenFilterContext _exposedContext;",
      "right" : "protected TokenFilterContext _exposedContext;",
      "info" : "FieldDeclaration[2963-3259]:FieldDeclaration[2963-3259]"
    }, {
      "left" : "protected TokenFilter _itemFilter;",
      "right" : "protected TokenFilter _itemFilter;",
      "info" : "FieldDeclaration[3265-3520]:FieldDeclaration[3265-3520]"
    }, {
      "left" : "protected int _matchCount;",
      "right" : "protected int _matchCount;",
      "info" : "FieldDeclaration[3530-3664]:FieldDeclaration[3530-3664]"
    }, {
      "left" : "public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)",
      "right" : "public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)",
      "info" : "MethodDeclaration[3850-4272]:MethodDeclaration[3850-4272]"
    }, {
      "left" : "public TokenFilter getFilter()",
      "right" : "public TokenFilter getFilter()",
      "info" : "MethodDeclaration[4442-4495]:MethodDeclaration[4442-4495]"
    }, {
      "left" : "public int getMatchCount()",
      "right" : "public int getMatchCount()",
      "info" : "MethodDeclaration[4501-4709]:MethodDeclaration[4501-4709]"
    }, {
      "left" : "public JsonToken getCurrentToken()",
      "right" : "public JsonToken getCurrentToken()",
      "info" : "MethodDeclaration[4894-4961]:MethodDeclaration[4894-4961]"
    }, {
      "left" : "public final int getCurrentTokenId()",
      "right" : "public final int getCurrentTokenId()",
      "info" : "MethodDeclaration[4967-5124]:MethodDeclaration[4967-5124]"
    }, {
      "left" : "public boolean hasCurrentToken()",
      "right" : "public boolean hasCurrentToken()",
      "info" : "MethodDeclaration[5130-5203]:MethodDeclaration[5130-5203]"
    }, {
      "left" : "public boolean hasTokenId(int id)",
      "right" : "public boolean hasTokenId(int id)",
      "info" : "MethodDeclaration[5208-5415]:MethodDeclaration[5208-5415]"
    }, {
      "left" : "public final boolean hasToken(JsonToken t)",
      "right" : "public final boolean hasToken(JsonToken t)",
      "info" : "MethodDeclaration[5421-5515]:MethodDeclaration[5421-5515]"
    }, {
      "left" : "public boolean isExpectedStartArrayToken()",
      "right" : "public boolean isExpectedStartArrayToken()",
      "info" : "MethodDeclaration[5525-5625]:MethodDeclaration[5525-5625]"
    }, {
      "left" : "public boolean isExpectedStartObjectToken()",
      "right" : "public boolean isExpectedStartObjectToken()",
      "info" : "MethodDeclaration[5630-5732]:MethodDeclaration[5630-5732]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[5738-5830]:MethodDeclaration[5738-5830]"
    }, {
      "left" : "public JsonStreamContext getParsingContext()",
      "right" : "public JsonStreamContext getParsingContext()",
      "info" : "MethodDeclaration[5836-5935]:MethodDeclaration[5836-5935]"
    }, {
      "left" : "public String getCurrentName() throws IOException",
      "right" : "public String getCurrentName() throws IOException",
      "info" : "MethodDeclaration[6029-6417]:MethodDeclaration[6029-6417]"
    }, {
      "left" : "public void clearCurrentToken()",
      "right" : "public void clearCurrentToken()",
      "info" : "MethodDeclaration[6608-6780]:MethodDeclaration[6608-6780]"
    }, {
      "left" : "public JsonToken getLastClearedToken()",
      "right" : "public JsonToken getLastClearedToken()",
      "info" : "MethodDeclaration[6786-6868]:MethodDeclaration[6786-6868]"
    }, {
      "left" : "public void overrideCurrentName(String name)",
      "right" : "public void overrideCurrentName(String name)",
      "info" : "MethodDeclaration[6874-7257]:MethodDeclaration[6874-7257]"
    }, {
      "left" : "public JsonToken nextToken() throws IOException",
      "right" : "public JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[7436-15434]:MethodDeclaration[7436-15828]"
    }, {
      "left" : "protected final JsonToken _nextToken2() throws IOException",
      "right" : "protected final JsonToken _nextToken2() throws IOException",
      "info" : "MethodDeclaration[15440-21603]:MethodDeclaration[15834-21997]"
    }, {
      "left" : "protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException",
      "right" : "protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException",
      "info" : "MethodDeclaration[21609-26826]:MethodDeclaration[22003-27220]"
    }, {
      "left" : "private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException",
      "right" : "private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException",
      "info" : "MethodDeclaration[26832-27867]:MethodDeclaration[27226-28261]"
    }, {
      "left" : "public JsonToken nextValue() throws IOException",
      "right" : "public JsonToken nextValue() throws IOException",
      "info" : "MethodDeclaration[27877-28132]:MethodDeclaration[28271-28526]"
    }, {
      "left" : "public JsonParser skipChildren() throws IOException",
      "right" : "public JsonParser skipChildren() throws IOException",
      "info" : "MethodDeclaration[28138-29082]:MethodDeclaration[28532-29476]"
    }, {
      "left" : "public String getText() throws IOException",
      "right" : "public String getText() throws IOException",
      "info" : "MethodDeclaration[29289-29373]:MethodDeclaration[29683-29767]"
    }, {
      "left" : "public boolean hasTextCharacters()",
      "right" : "public boolean hasTextCharacters()",
      "info" : "MethodDeclaration[29378-29463]:MethodDeclaration[29772-29857]"
    }, {
      "left" : "public char[] getTextCharacters() throws IOException",
      "right" : "public char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[29468-29571]:MethodDeclaration[29862-29965]"
    }, {
      "left" : "public int getTextLength() throws IOException",
      "right" : "public int getTextLength() throws IOException",
      "info" : "MethodDeclaration[29576-29668]:MethodDeclaration[29970-30062]"
    }, {
      "left" : "public int getTextOffset() throws IOException",
      "right" : "public int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[29673-29765]:MethodDeclaration[30067-30159]"
    }, {
      "left" : "public BigInteger getBigIntegerValue() throws IOException",
      "right" : "public BigInteger getBigIntegerValue() throws IOException",
      "info" : "MethodDeclaration[29975-30088]:MethodDeclaration[30369-30482]"
    }, {
      "left" : "public boolean getBooleanValue() throws IOException",
      "right" : "public boolean getBooleanValue() throws IOException",
      "info" : "MethodDeclaration[30094-30198]:MethodDeclaration[30488-30592]"
    }, {
      "left" : "public byte getByteValue() throws IOException",
      "right" : "public byte getByteValue() throws IOException",
      "info" : "MethodDeclaration[30208-30303]:MethodDeclaration[30602-30697]"
    }, {
      "left" : "public short getShortValue() throws IOException",
      "right" : "public short getShortValue() throws IOException",
      "info" : "MethodDeclaration[30309-30407]:MethodDeclaration[30703-30801]"
    }, {
      "left" : "public BigDecimal getDecimalValue() throws IOException",
      "right" : "public BigDecimal getDecimalValue() throws IOException",
      "info" : "MethodDeclaration[30413-30520]:MethodDeclaration[30807-30914]"
    }, {
      "left" : "public double getDoubleValue() throws IOException",
      "right" : "public double getDoubleValue() throws IOException",
      "info" : "MethodDeclaration[30526-30627]:MethodDeclaration[30920-31021]"
    }, {
      "left" : "public float getFloatValue() throws IOException",
      "right" : "public float getFloatValue() throws IOException",
      "info" : "MethodDeclaration[30633-30731]:MethodDeclaration[31027-31125]"
    }, {
      "left" : "public int getIntValue() throws IOException",
      "right" : "public int getIntValue() throws IOException",
      "info" : "MethodDeclaration[30737-30829]:MethodDeclaration[31131-31223]"
    }, {
      "left" : "public long getLongValue() throws IOException",
      "right" : "public long getLongValue() throws IOException",
      "info" : "MethodDeclaration[30835-30930]:MethodDeclaration[31229-31324]"
    }, {
      "left" : "public NumberType getNumberType() throws IOException",
      "right" : "public NumberType getNumberType() throws IOException",
      "info" : "MethodDeclaration[30936-31039]:MethodDeclaration[31330-31433]"
    }, {
      "left" : "public Number getNumberValue() throws IOException",
      "right" : "public Number getNumberValue() throws IOException",
      "info" : "MethodDeclaration[31045-31146]:MethodDeclaration[31439-31540]"
    }, {
      "left" : "public int getValueAsInt() throws IOException",
      "right" : "public int getValueAsInt() throws IOException",
      "info" : "MethodDeclaration[31368-31460]:MethodDeclaration[31762-31854]"
    }, {
      "left" : "public int getValueAsInt(int defaultValue) throws IOException",
      "right" : "public int getValueAsInt(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[31465-31585]:MethodDeclaration[31859-31979]"
    }, {
      "left" : "public long getValueAsLong() throws IOException",
      "right" : "public long getValueAsLong() throws IOException",
      "info" : "MethodDeclaration[31590-31685]:MethodDeclaration[31984-32079]"
    }, {
      "left" : "public long getValueAsLong(long defaultValue) throws IOException",
      "right" : "public long getValueAsLong(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[31690-31814]:MethodDeclaration[32084-32208]"
    }, {
      "left" : "public double getValueAsDouble() throws IOException",
      "right" : "public double getValueAsDouble() throws IOException",
      "info" : "MethodDeclaration[31819-31920]:MethodDeclaration[32213-32314]"
    }, {
      "left" : "public double getValueAsDouble(double defaultValue) throws IOException",
      "right" : "public double getValueAsDouble(double defaultValue) throws IOException",
      "info" : "MethodDeclaration[31925-32057]:MethodDeclaration[32319-32451]"
    }, {
      "left" : "public boolean getValueAsBoolean() throws IOException",
      "right" : "public boolean getValueAsBoolean() throws IOException",
      "info" : "MethodDeclaration[32062-32166]:MethodDeclaration[32456-32560]"
    }, {
      "left" : "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
      "right" : "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
      "info" : "MethodDeclaration[32171-32307]:MethodDeclaration[32565-32701]"
    }, {
      "left" : "public String getValueAsString() throws IOException",
      "right" : "public String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[32312-32413]:MethodDeclaration[32706-32807]"
    }, {
      "left" : "public String getValueAsString(String defaultValue) throws IOException",
      "right" : "public String getValueAsString(String defaultValue) throws IOException",
      "info" : "MethodDeclaration[32418-32550]:MethodDeclaration[32812-32944]"
    }, {
      "left" : "public Object getEmbeddedObject() throws IOException",
      "right" : "public Object getEmbeddedObject() throws IOException",
      "info" : "MethodDeclaration[32753-32856]:MethodDeclaration[33147-33250]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[32861-32992]:MethodDeclaration[33255-33386]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "info" : "MethodDeclaration[32997-33150]:MethodDeclaration[33391-33544]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[33155-33243]:MethodDeclaration[33549-33637]"
    }, {
      "left" : "protected JsonStreamContext _filterContext()",
      "right" : "protected JsonStreamContext _filterContext()",
      "info" : "MethodDeclaration[33424-33590]:MethodDeclaration[33818-33984]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[488-494]:Modifier[488-494]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[495-500]:TYPE_DECLARATION_KIND[495-500]"
    }, {
      "left" : "FilteringParserDelegate",
      "right" : "FilteringParserDelegate",
      "info" : "SimpleName[501-524]:SimpleName[501-524]"
    }, {
      "left" : "JsonParserDelegate",
      "right" : "JsonParserDelegate",
      "info" : "SimpleType[533-551]:SimpleType[533-551]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3850-3856]:Modifier[3850-3856]"
    }, {
      "left" : "FilteringParserDelegate",
      "right" : "FilteringParserDelegate",
      "info" : "SimpleName[3857-3880]:SimpleName[3857-3880]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[3881-3893]:SingleVariableDeclaration[3881-3893]"
    }, {
      "left" : "TokenFilter f",
      "right" : "TokenFilter f",
      "info" : "SingleVariableDeclaration[3895-3908]:SingleVariableDeclaration[3895-3908]"
    }, {
      "left" : "boolean includePath",
      "right" : "boolean includePath",
      "info" : "SingleVariableDeclaration[3922-3941]:SingleVariableDeclaration[3922-3941]"
    }, {
      "left" : "boolean allowMultipleMatches",
      "right" : "boolean allowMultipleMatches",
      "info" : "SingleVariableDeclaration[3943-3971]:SingleVariableDeclaration[3943-3971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3977-4272]:Block[3977-4272]"
    }, {
      "left" : "super(p);",
      "right" : "super(p);",
      "info" : "SuperConstructorInvocation[3987-3996]:SuperConstructorInvocation[3987-3996]"
    }, {
      "left" : "rootFilter = f;",
      "right" : "rootFilter = f;",
      "info" : "ExpressionStatement[4005-4020]:ExpressionStatement[4005-4020]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[4096-4112]:ExpressionStatement[4096-4112]"
    }, {
      "left" : "_headContext = TokenFilterContext.createRootContext(f);",
      "right" : "_headContext = TokenFilterContext.createRootContext(f);",
      "info" : "ExpressionStatement[4121-4176]:ExpressionStatement[4121-4176]"
    }, {
      "left" : "_includePath = includePath;",
      "right" : "_includePath = includePath;",
      "info" : "ExpressionStatement[4185-4212]:ExpressionStatement[4185-4212]"
    }, {
      "left" : "_allowMultipleMatches = allowMultipleMatches;",
      "right" : "_allowMultipleMatches = allowMultipleMatches;",
      "info" : "ExpressionStatement[4221-4266]:ExpressionStatement[4221-4266]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4442-4448]:Modifier[4442-4448]"
    }, {
      "left" : "TokenFilter",
      "right" : "TokenFilter",
      "info" : "SimpleType[4449-4460]:SimpleType[4449-4460]"
    }, {
      "left" : "getFilter",
      "right" : "getFilter",
      "info" : "SimpleName[4461-4470]:SimpleName[4461-4470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4473-4495]:Block[4473-4495]"
    }, {
      "left" : "return rootFilter;",
      "right" : "return rootFilter;",
      "info" : "ReturnStatement[4475-4493]:ReturnStatement[4475-4493]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4647-4653]:Modifier[4647-4653]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4654-4657]:PrimitiveType[4654-4657]"
    }, {
      "left" : "getMatchCount",
      "right" : "getMatchCount",
      "info" : "SimpleName[4658-4671]:SimpleName[4658-4671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4674-4709]:Block[4674-4709]"
    }, {
      "left" : "return _matchCount;",
      "right" : "return _matchCount;",
      "info" : "ReturnStatement[4684-4703]:ReturnStatement[4684-4703]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4894-4903]:MarkerAnnotation[4894-4903]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4904-4910]:Modifier[4904-4910]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[4911-4920]:SimpleType[4911-4920]"
    }, {
      "left" : "getCurrentToken",
      "right" : "getCurrentToken",
      "info" : "SimpleName[4921-4936]:SimpleName[4921-4936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4939-4961]:Block[4939-4961]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[4941-4959]:ReturnStatement[4941-4959]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4967-4976]:MarkerAnnotation[4967-4976]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4977-4983]:Modifier[4977-4983]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4984-4989]:Modifier[4984-4989]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4990-4993]:PrimitiveType[4990-4993]"
    }, {
      "left" : "getCurrentTokenId",
      "right" : "getCurrentTokenId",
      "info" : "SimpleName[4994-5011]:SimpleName[4994-5011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5014-5124]:Block[5014-5124]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[5024-5055]:VariableDeclarationStatement[5024-5055]"
    }, {
      "left" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "right" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "info" : "ReturnStatement[5064-5118]:ReturnStatement[5064-5118]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5130-5139]:MarkerAnnotation[5130-5139]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5140-5146]:Modifier[5140-5146]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5147-5154]:PrimitiveType[5147-5154]"
    }, {
      "left" : "hasCurrentToken",
      "right" : "hasCurrentToken",
      "info" : "SimpleName[5155-5170]:SimpleName[5155-5170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5173-5203]:Block[5173-5203]"
    }, {
      "left" : "return _currToken != null;",
      "right" : "return _currToken != null;",
      "info" : "ReturnStatement[5175-5201]:ReturnStatement[5175-5201]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5208-5217]:MarkerAnnotation[5208-5217]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5218-5224]:Modifier[5218-5224]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5225-5232]:PrimitiveType[5225-5232]"
    }, {
      "left" : "hasTokenId",
      "right" : "hasTokenId",
      "info" : "SimpleName[5233-5243]:SimpleName[5233-5243]"
    }, {
      "left" : "int id",
      "right" : "int id",
      "info" : "SingleVariableDeclaration[5244-5250]:SingleVariableDeclaration[5244-5250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5252-5415]:Block[5252-5415]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[5262-5293]:VariableDeclarationStatement[5262-5293]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[5302-5380]:IfStatement[5302-5380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5317-5380]:Block[5317-5380]"
    }, {
      "left" : "return (JsonTokenId.ID_NO_TOKEN == id);",
      "right" : "return (JsonTokenId.ID_NO_TOKEN == id);",
      "info" : "ReturnStatement[5331-5370]:ReturnStatement[5331-5370]"
    }, {
      "left" : "return t.id() == id;",
      "right" : "return t.id() == id;",
      "info" : "ReturnStatement[5389-5409]:ReturnStatement[5389-5409]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5421-5430]:MarkerAnnotation[5421-5430]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5431-5437]:Modifier[5431-5437]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5438-5443]:Modifier[5438-5443]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5444-5451]:PrimitiveType[5444-5451]"
    }, {
      "left" : "hasToken",
      "right" : "hasToken",
      "info" : "SimpleName[5452-5460]:SimpleName[5452-5460]"
    }, {
      "left" : "JsonToken t",
      "right" : "JsonToken t",
      "info" : "SingleVariableDeclaration[5461-5472]:SingleVariableDeclaration[5461-5472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5474-5515]:Block[5474-5515]"
    }, {
      "left" : "return (_currToken == t);",
      "right" : "return (_currToken == t);",
      "info" : "ReturnStatement[5484-5509]:ReturnStatement[5484-5509]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5525-5534]:MarkerAnnotation[5525-5534]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5535-5541]:Modifier[5535-5541]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5542-5549]:PrimitiveType[5542-5549]"
    }, {
      "left" : "isExpectedStartArrayToken",
      "right" : "isExpectedStartArrayToken",
      "info" : "SimpleName[5550-5575]:SimpleName[5550-5575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5578-5625]:Block[5578-5625]"
    }, {
      "left" : "return _currToken == JsonToken.START_ARRAY;",
      "right" : "return _currToken == JsonToken.START_ARRAY;",
      "info" : "ReturnStatement[5580-5623]:ReturnStatement[5580-5623]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5630-5639]:MarkerAnnotation[5630-5639]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5640-5646]:Modifier[5640-5646]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5647-5654]:PrimitiveType[5647-5654]"
    }, {
      "left" : "isExpectedStartObjectToken",
      "right" : "isExpectedStartObjectToken",
      "info" : "SimpleName[5655-5681]:SimpleName[5655-5681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5684-5732]:Block[5684-5732]"
    }, {
      "left" : "return _currToken == JsonToken.START_OBJECT;",
      "right" : "return _currToken == JsonToken.START_OBJECT;",
      "info" : "ReturnStatement[5686-5730]:ReturnStatement[5686-5730]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5738-5747]:MarkerAnnotation[5738-5747]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5748-5754]:Modifier[5748-5754]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[5755-5767]:SimpleType[5755-5767]"
    }, {
      "left" : "getCurrentLocation",
      "right" : "getCurrentLocation",
      "info" : "SimpleName[5768-5786]:SimpleName[5768-5786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5789-5830]:Block[5789-5830]"
    }, {
      "left" : "return delegate.getCurrentLocation();",
      "right" : "return delegate.getCurrentLocation();",
      "info" : "ReturnStatement[5791-5828]:ReturnStatement[5791-5828]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5836-5845]:MarkerAnnotation[5836-5845]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5850-5856]:Modifier[5850-5856]"
    }, {
      "left" : "JsonStreamContext",
      "right" : "JsonStreamContext",
      "info" : "SimpleType[5857-5874]:SimpleType[5857-5874]"
    }, {
      "left" : "getParsingContext",
      "right" : "getParsingContext",
      "info" : "SimpleName[5875-5892]:SimpleName[5875-5892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5895-5935]:Block[5895-5935]"
    }, {
      "left" : "return _filterContext();",
      "right" : "return _filterContext();",
      "info" : "ReturnStatement[5905-5929]:ReturnStatement[5905-5929]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6029-6038]:MarkerAnnotation[6029-6038]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6043-6049]:Modifier[6043-6049]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6050-6056]:SimpleType[6050-6056]"
    }, {
      "left" : "getCurrentName",
      "right" : "getCurrentName",
      "info" : "SimpleName[6057-6071]:SimpleName[6057-6071]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6081-6092]:SimpleType[6081-6092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6093-6417]:Block[6093-6417]"
    }, {
      "left" : "JsonStreamContext ctxt = _filterContext();",
      "right" : "JsonStreamContext ctxt = _filterContext();",
      "info" : "VariableDeclarationStatement[6103-6145]:VariableDeclarationStatement[6103-6145]"
    }, {
      "left" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "right" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "info" : "IfStatement[6154-6373]:IfStatement[6154-6373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6235-6373]:Block[6235-6373]"
    }, {
      "left" : "JsonStreamContext parent = ctxt.getParent();",
      "right" : "JsonStreamContext parent = ctxt.getParent();",
      "info" : "VariableDeclarationStatement[6249-6293]:VariableDeclarationStatement[6249-6293]"
    }, {
      "left" : "return (parent == null) ? null : parent.getCurrentName();",
      "right" : "return (parent == null) ? null : parent.getCurrentName();",
      "info" : "ReturnStatement[6306-6363]:ReturnStatement[6306-6363]"
    }, {
      "left" : "return ctxt.getCurrentName();",
      "right" : "return ctxt.getCurrentName();",
      "info" : "ReturnStatement[6382-6411]:ReturnStatement[6382-6411]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6608-6617]:MarkerAnnotation[6608-6617]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6622-6628]:Modifier[6622-6628]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6629-6633]:PrimitiveType[6629-6633]"
    }, {
      "left" : "clearCurrentToken",
      "right" : "clearCurrentToken",
      "info" : "SimpleName[6634-6651]:SimpleName[6634-6651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6654-6780]:Block[6654-6780]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[6664-6774]:IfStatement[6664-6774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6688-6774]:Block[6688-6774]"
    }, {
      "left" : "_lastClearedToken = _currToken;",
      "right" : "_lastClearedToken = _currToken;",
      "info" : "ExpressionStatement[6702-6733]:ExpressionStatement[6702-6733]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[6746-6764]:ExpressionStatement[6746-6764]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6786-6795]:MarkerAnnotation[6786-6795]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6800-6806]:Modifier[6800-6806]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[6807-6816]:SimpleType[6807-6816]"
    }, {
      "left" : "getLastClearedToken",
      "right" : "getLastClearedToken",
      "info" : "SimpleName[6817-6836]:SimpleName[6817-6836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6839-6868]:Block[6839-6868]"
    }, {
      "left" : "return _lastClearedToken;",
      "right" : "return _lastClearedToken;",
      "info" : "ReturnStatement[6841-6866]:ReturnStatement[6841-6866]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6874-6883]:MarkerAnnotation[6874-6883]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6888-6894]:Modifier[6888-6894]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6895-6899]:PrimitiveType[6895-6899]"
    }, {
      "left" : "overrideCurrentName",
      "right" : "overrideCurrentName",
      "info" : "SimpleName[6900-6919]:SimpleName[6900-6919]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[6920-6931]:SingleVariableDeclaration[6920-6931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6933-7257]:Block[6933-7257]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");",
      "right" : "throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");",
      "info" : "ThrowStatement[7154-7251]:ThrowStatement[7154-7251]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7436-7445]:MarkerAnnotation[7436-7445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7450-7456]:Modifier[7450-7456]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[7457-7466]:SimpleType[7457-7466]"
    }, {
      "left" : "nextToken",
      "right" : "nextToken",
      "info" : "SimpleName[7467-7476]:SimpleName[7467-7476]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7486-7497]:SimpleType[7486-7497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7502-15434]:Block[7502-15828]"
    }, {
      "left" : "TokenFilterContext ctxt = _exposedContext;",
      "right" : "TokenFilterContext ctxt = _exposedContext;",
      "info" : "VariableDeclarationStatement[7980-8022]:VariableDeclarationStatement[8374-8416]"
    }, {
      "left" : "if (ctxt != null)",
      "right" : "if (ctxt != null)",
      "info" : "IfStatement[8032-9464]:IfStatement[8426-9858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8050-9464]:Block[8444-9858]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[8064-9454]:WhileStatement[8458-9848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8077-9454]:Block[8471-9848]"
    }, {
      "left" : "JsonToken t = ctxt.nextTokenToRead();",
      "right" : "JsonToken t = ctxt.nextTokenToRead();",
      "info" : "VariableDeclarationStatement[8095-8132]:VariableDeclarationStatement[8489-8526]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[8149-8249]:IfStatement[8543-8643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8164-8249]:Block[8558-8643]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[8186-8201]:ExpressionStatement[8580-8595]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[8222-8231]:ReturnStatement[8616-8625]"
    }, {
      "left" : "if (ctxt == _headContext)",
      "right" : "if (ctxt == _headContext)",
      "info" : "IfStatement[8315-9111]:IfStatement[8709-9505]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8341-9111]:Block[8735-9505]"
    }, {
      "left" : "_exposedContext = null;",
      "right" : "_exposedContext = null;",
      "info" : "ExpressionStatement[8363-8386]:ExpressionStatement[8757-8780]"
    }, {
      "left" : "if (ctxt.inArray())",
      "right" : "if (ctxt.inArray())",
      "info" : "IfStatement[8407-8694]:IfStatement[8801-9088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8427-8694]:Block[8821-9088]"
    }, {
      "left" : "t = delegate.getCurrentToken();",
      "right" : "t = delegate.getCurrentToken();",
      "info" : "ExpressionStatement[8453-8484]:ExpressionStatement[8847-8878]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[8623-8638]:ExpressionStatement[9017-9032]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[8663-8672]:ReturnStatement[9057-9066]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9087-9093]:BreakStatement[9481-9487]"
    }, {
      "left" : "ctxt = _headContext.findChildOf(ctxt);",
      "right" : "ctxt = _headContext.findChildOf(ctxt);",
      "info" : "ExpressionStatement[9187-9225]:ExpressionStatement[9581-9619]"
    }, {
      "left" : "_exposedContext = ctxt;",
      "right" : "_exposedContext = ctxt;",
      "info" : "ExpressionStatement[9242-9265]:ExpressionStatement[9636-9659]"
    }, {
      "left" : "if (ctxt == null)",
      "right" : "if (ctxt == null)",
      "info" : "IfStatement[9282-9440]:IfStatement[9676-9834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9300-9440]:Block[9694-9834]"
    }, {
      "left" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "right" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "info" : "ThrowStatement[9344-9422]:ThrowStatement[9738-9816]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[9527-9562]:VariableDeclarationStatement[9921-9956]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[9571-9702]:IfStatement[9965-10096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9586-9702]:Block[9980-10096]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[9668-9692]:ReturnStatement[10062-10086]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[9755-9769]:VariableDeclarationStatement[10149-10163]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }",
      "right" : "switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }",
      "info" : "SwitchStatement[9787-15328]:SwitchStatement[10181-15722]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[9813-9833]:SwitchCase[10207-10227]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[9846-9862]:ExpressionStatement[10240-10256]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[9875-10043]:IfStatement[10269-10437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9909-10043]:Block[10303-10437]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[9927-9988]:ExpressionStatement[10321-10382]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[10005-10029]:ReturnStatement[10399-10423]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[10056-10170]:IfStatement[10450-10564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10071-10170]:Block[10465-10564]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[10109-10133]:ExpressionStatement[10503-10527]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10150-10156]:BreakStatement[10544-10550]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[10234-10265]:ExpressionStatement[10628-10659]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[10278-10372]:IfStatement[10672-10766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10293-10372]:Block[10687-10766]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[10311-10335]:ExpressionStatement[10705-10729]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10352-10358]:BreakStatement[10746-10752]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[10385-10476]:IfStatement[10779-10870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10419-10476]:Block[10813-10870]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[10437-10462]:ExpressionStatement[10831-10856]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[10489-10505]:ExpressionStatement[10883-10899]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[10518-10686]:IfStatement[10912-11080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10552-10686]:Block[10946-11080]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[10570-10631]:ExpressionStatement[10964-11025]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[10648-10672]:ReturnStatement[11042-11066]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[10699-10761]:ExpressionStatement[11093-11155]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[10858-11067]:IfStatement[11252-11461]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10876-11067]:Block[11270-11461]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[10894-10936]:ExpressionStatement[11288-11330]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[10953-11053]:IfStatement[11347-11447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10968-11053]:Block[11362-11447]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[10990-11005]:ExpressionStatement[11384-11399]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[11026-11035]:ReturnStatement[11420-11429]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11080-11086]:BreakStatement[11474-11480]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[11096-11117]:SwitchCase[11490-11511]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[11130-11146]:ExpressionStatement[11524-11540]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[11159-11328]:IfStatement[11553-11722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11193-11328]:Block[11587-11722]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[11211-11273]:ExpressionStatement[11605-11667]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[11290-11314]:ReturnStatement[11684-11708]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[11341-11455]:IfStatement[11735-11849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11356-11455]:Block[11750-11849]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[11394-11418]:ExpressionStatement[11788-11812]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11435-11441]:BreakStatement[11829-11835]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[11519-11550]:ExpressionStatement[11913-11944]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[11563-11657]:IfStatement[11957-12051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11578-11657]:Block[11972-12051]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[11596-11620]:ExpressionStatement[11990-12014]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11637-11643]:BreakStatement[12031-12037]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[11670-11762]:IfStatement[12064-12156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11704-11762]:Block[12098-12156]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[11722-11748]:ExpressionStatement[12116-12142]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[11775-11791]:ExpressionStatement[12169-12185]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[11804-11973]:IfStatement[12198-12367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11838-11973]:Block[12232-12367]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[11856-11918]:ExpressionStatement[12250-12312]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[11935-11959]:ReturnStatement[12329-12353]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[11986-12049]:ExpressionStatement[12380-12443]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[12133-12342]:IfStatement[12527-12736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12151-12342]:Block[12545-12736]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[12169-12211]:ExpressionStatement[12563-12605]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[12228-12328]:IfStatement[12622-12722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12243-12328]:Block[12637-12722]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[12265-12280]:ExpressionStatement[12659-12674]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[12301-12310]:ReturnStatement[12695-12704]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12457-12463]:BreakStatement[12851-12857]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[12473-12491]:SwitchCase[12867-12885]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[12500-12519]:SwitchCase[12894-12913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12532-12999]:Block[12926-13393]"
    }, {
      "left" : "boolean returnEnd = _headContext.isStartHandled();",
      "right" : "boolean returnEnd = _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[12550-12600]:VariableDeclarationStatement[12944-12994]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[12617-12646]:ExpressionStatement[13011-13040]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[12663-12776]:IfStatement[13057-13170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12714-12776]:Block[13108-13170]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[12736-12758]:ExpressionStatement[13130-13152]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[12793-12833]:ExpressionStatement[13187-13227]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[12850-12889]:ExpressionStatement[13244-13283]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[12906-12985]:IfStatement[13300-13379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12921-12985]:Block[13315-13379]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[12943-12967]:ReturnStatement[13337-13361]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13012-13018]:BreakStatement[13406-13412]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[13028-13047]:SwitchCase[13422-13441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13060-14781]:Block[13454-15175]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[13078-13124]:VariableDeclarationStatement[13472-13518]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[13204-13240]:ExpressionStatement[13598-13634]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[13257-13905]:IfStatement[13651-14299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13291-13905]:Block[13685-14299]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[13313-13329]:ExpressionStatement[13707-13723]"
    }, {
      "left" : "if (!_includePath)",
      "right" : "if (!_includePath)",
      "info" : "IfStatement[13350-13842]:IfStatement[13744-14236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13369-13842]:Block[13763-14236]"
    }, {
      "left" : "if (_includeImmediateParent && !_headContext.isStartHandled())",
      "right" : "if (_includeImmediateParent && !_headContext.isStartHandled())",
      "info" : "IfStatement[13556-13820]:IfStatement[13950-14214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13619-13820]:Block[14013-14214]"
    }, {
      "left" : "t = _headContext.nextTokenToRead();",
      "right" : "t = _headContext.nextTokenToRead();",
      "info" : "ExpressionStatement[13649-13684]:ExpressionStatement[14043-14078]"
    }, {
      "left" : "_exposedContext = _headContext;",
      "right" : "_exposedContext = _headContext;",
      "info" : "ExpressionStatement[13763-13794]:ExpressionStatement[14157-14188]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[13863-13887]:ReturnStatement[14257-14281]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[13922-14070]:IfStatement[14316-14464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13937-14070]:Block[14331-14464]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[13959-13980]:ExpressionStatement[14353-14374]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[14001-14025]:ExpressionStatement[14395-14419]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14046-14052]:BreakStatement[14440-14446]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[14087-14115]:ExpressionStatement[14481-14509]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[14132-14280]:IfStatement[14526-14674]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14147-14280]:Block[14541-14674]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[14169-14190]:ExpressionStatement[14563-14584]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[14211-14235]:ExpressionStatement[14605-14629]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14256-14262]:BreakStatement[14650-14656]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[14297-14313]:ExpressionStatement[14691-14707]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[14330-14494]:IfStatement[14724-14888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14364-14494]:Block[14758-14888]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[14386-14476]:IfStatement[14780-14870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14404-14476]:Block[14798-14870]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[14430-14454]:ReturnStatement[14824-14848]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[14511-14744]:IfStatement[14905-15138]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14529-14744]:Block[14923-15138]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[14551-14593]:ExpressionStatement[14945-14987]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[14614-14726]:IfStatement[15008-15120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14629-14726]:Block[15023-15120]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[14655-14670]:ExpressionStatement[15049-15064]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[14695-14704]:ReturnStatement[15089-15098]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14761-14767]:BreakStatement[15155-15161]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14791-14799]:SwitchCase[15185-15193]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[14828-14844]:ExpressionStatement[15222-15238]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[14857-14947]:IfStatement[15251-15341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14891-14947]:Block[15285-15341]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[14909-14933]:ReturnStatement[15303-15327]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[14960-15224]:IfStatement[15354-15618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14975-15224]:Block[15369-15618]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[14993-15024]:ExpressionStatement[15387-15418]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[15041-15210]:IfStatement[15435-15604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15146-15210]:Block[15540-15604]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[15168-15192]:ReturnStatement[15562-15586]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15312-15318]:BreakStatement[15706-15712]"
    }, {
      "left" : "return _nextToken2();",
      "right" : "return _nextToken2();",
      "info" : "ReturnStatement[15407-15428]:ReturnStatement[15801-15822]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15692-15701]:Modifier[16086-16095]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[15702-15707]:Modifier[16096-16101]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[15708-15717]:SimpleType[16102-16111]"
    }, {
      "left" : "_nextToken2",
      "right" : "_nextToken2",
      "info" : "SimpleName[15718-15729]:SimpleName[16112-16123]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15739-15750]:SimpleType[16133-16144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15755-21603]:Block[16149-21997]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return (_currToken = t);\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return (_currToken = t);\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }",
      "info" : "LabeledStatement[15765-21597]:LabeledStatement[16159-21991]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[15784-21597]:WhileStatement[16178-21991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15797-21597]:Block[16191-21991]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[15811-15846]:VariableDeclarationStatement[16205-16240]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[15859-15953]:IfStatement[16253-16347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15874-15953]:Block[16268-16347]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[15915-15939]:ReturnStatement[16309-16333]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[15966-15980]:VariableDeclarationStatement[16360-16374]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }",
      "right" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }",
      "info" : "SwitchStatement[15994-21587]:SwitchStatement[16388-21981]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[16024-16044]:SwitchCase[16418-16438]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[16061-16077]:ExpressionStatement[16455-16471]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[16094-16274]:IfStatement[16488-16668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16128-16274]:Block[16522-16668]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[16150-16211]:ExpressionStatement[16544-16605]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[16232-16256]:ReturnStatement[16626-16650]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[16291-16430]:IfStatement[16685-16824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16306-16430]:Block[16700-16824]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[16348-16372]:ExpressionStatement[16742-16766]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[16393-16412]:ContinueStatement[16787-16806]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[16502-16533]:ExpressionStatement[16896-16927]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[16550-16669]:IfStatement[16944-17063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16565-16669]:Block[16959-17063]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[16587-16611]:ExpressionStatement[16981-17005]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[16632-16651]:ContinueStatement[17026-17045]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[16686-16785]:IfStatement[17080-17179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16720-16785]:Block[17114-17179]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[16742-16767]:ExpressionStatement[17136-17161]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[16802-16818]:ExpressionStatement[17196-17212]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[16835-17015]:IfStatement[17229-17409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16869-17015]:Block[17263-17409]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[16891-16952]:ExpressionStatement[17285-17346]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[16973-16997]:ReturnStatement[17367-17391]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[17032-17094]:ExpressionStatement[17426-17488]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[17197-17430]:IfStatement[17591-17824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17215-17430]:Block[17609-17824]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[17237-17279]:ExpressionStatement[17631-17673]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[17300-17412]:IfStatement[17694-17806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17315-17412]:Block[17709-17806]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[17341-17356]:ExpressionStatement[17735-17750]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[17381-17390]:ReturnStatement[17775-17784]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[17447-17466]:ContinueStatement[17841-17860]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[17480-17501]:SwitchCase[17874-17895]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[17518-17534]:ExpressionStatement[17912-17928]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[17551-17732]:IfStatement[17945-18126]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17585-17732]:Block[17979-18126]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[17607-17669]:ExpressionStatement[18001-18063]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[17690-17714]:ReturnStatement[18084-18108]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[17749-17888]:IfStatement[18143-18282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17764-17888]:Block[18158-18282]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[17806-17830]:ExpressionStatement[18200-18224]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[17851-17870]:ContinueStatement[18245-18264]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[17960-17991]:ExpressionStatement[18354-18385]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[18008-18127]:IfStatement[18402-18521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18023-18127]:Block[18417-18521]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[18045-18069]:ExpressionStatement[18439-18463]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[18090-18109]:ContinueStatement[18484-18503]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[18144-18244]:IfStatement[18538-18638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18178-18244]:Block[18572-18638]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[18200-18226]:ExpressionStatement[18594-18620]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[18261-18277]:ExpressionStatement[18655-18671]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[18294-18475]:IfStatement[18688-18869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18328-18475]:Block[18722-18869]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[18350-18412]:ExpressionStatement[18744-18806]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[18433-18457]:ReturnStatement[18827-18851]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[18492-18555]:ExpressionStatement[18886-18949]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[18572-18805]:IfStatement[18966-19199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18590-18805]:Block[18984-19199]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[18612-18654]:ExpressionStatement[19006-19048]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[18675-18787]:IfStatement[19069-19181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18690-18787]:Block[19084-19181]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[18716-18731]:ExpressionStatement[19110-19125]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[18756-18765]:ReturnStatement[19150-19159]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[18822-18841]:ContinueStatement[19216-19235]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[18855-18873]:SwitchCase[19249-19267]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[18886-18905]:SwitchCase[19280-19299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18922-19433]:Block[19316-19827]"
    }, {
      "left" : "boolean returnEnd = _headContext.isStartHandled();",
      "right" : "boolean returnEnd = _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[18944-18994]:VariableDeclarationStatement[19338-19388]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[19015-19044]:ExpressionStatement[19409-19438]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[19065-19186]:IfStatement[19459-19580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19116-19186]:Block[19510-19580]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[19142-19164]:ExpressionStatement[19536-19558]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[19207-19247]:ExpressionStatement[19601-19641]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[19268-19307]:ExpressionStatement[19662-19701]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[19328-19415]:IfStatement[19722-19809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19343-19415]:Block[19737-19809]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[19369-19393]:ReturnStatement[19763-19787]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[19450-19469]:ContinueStatement[19844-19863]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[19483-19502]:SwitchCase[19877-19896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19519-20944]:Block[19913-21338]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[19541-19587]:VariableDeclarationStatement[19935-19981]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[19608-19644]:ExpressionStatement[20002-20038]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[19665-19812]:IfStatement[20059-20206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19699-19812]:Block[20093-20206]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[19725-19741]:ExpressionStatement[20119-20135]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[19766-19790]:ReturnStatement[20160-20184]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[19833-20034]:IfStatement[20227-20428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19848-20034]:Block[20242-20428]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[19898-19919]:ExpressionStatement[20292-20313]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[19944-19968]:ExpressionStatement[20338-20362]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[19993-20012]:ContinueStatement[20387-20406]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[20055-20083]:ExpressionStatement[20449-20477]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[20104-20305]:IfStatement[20498-20699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20119-20305]:Block[20513-20699]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[20169-20190]:ExpressionStatement[20563-20584]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[20215-20239]:ExpressionStatement[20609-20633]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[20264-20283]:ContinueStatement[20658-20677]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[20326-20342]:ExpressionStatement[20720-20736]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[20363-20648]:IfStatement[20757-21042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20397-20648]:Block[20791-21042]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[20423-20521]:IfStatement[20817-20915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20441-20521]:Block[20835-20915]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[20471-20495]:ReturnStatement[20865-20889]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[20607-20626]:ContinueStatement[21001-21020]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[20669-20926]:IfStatement[21063-21320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20687-20926]:Block[21081-21320]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[20713-20755]:ExpressionStatement[21107-21149]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[20780-20904]:IfStatement[21174-21298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20795-20904]:Block[21189-21298]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[20825-20840]:ExpressionStatement[21219-21234]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[20869-20878]:ReturnStatement[21263-21272]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[20961-20980]:ContinueStatement[21355-21374]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[20994-21002]:SwitchCase[21388-21396]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[21035-21051]:ExpressionStatement[21429-21445]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[21068-21166]:IfStatement[21462-21560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21102-21166]:Block[21496-21560]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[21124-21148]:ReturnStatement[21518-21542]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[21183-21471]:IfStatement[21577-21865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21198-21471]:Block[21592-21865]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[21220-21251]:ExpressionStatement[21614-21645]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[21272-21453]:IfStatement[21666-21847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21381-21453]:Block[21775-21847]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[21407-21431]:ReturnStatement[21801-21825]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21567-21573]:BreakStatement[21961-21967]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21696-21705]:Modifier[22090-22099]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[21706-21711]:Modifier[22100-22105]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[21712-21721]:SimpleType[22106-22115]"
    }, {
      "left" : "_nextTokenWithBuffering",
      "right" : "_nextTokenWithBuffering",
      "info" : "SimpleName[21722-21745]:SimpleName[22116-22139]"
    }, {
      "left" : "final TokenFilterContext buffRoot",
      "right" : "final TokenFilterContext buffRoot",
      "info" : "SingleVariableDeclaration[21746-21779]:SingleVariableDeclaration[22140-22173]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21796-21807]:SimpleType[22190-22201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21812-26826]:Block[22206-27220]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }",
      "info" : "LabeledStatement[21822-26820]:LabeledStatement[22216-27214]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[21841-26820]:WhileStatement[22235-27214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21854-26820]:Block[22248-27214]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[21868-21903]:VariableDeclarationStatement[22262-22297]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[21916-21995]:IfStatement[22310-22389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21931-21995]:Block[22325-22389]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[21972-21981]:ReturnStatement[22366-22375]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[22008-22022]:VariableDeclarationStatement[22402-22416]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }",
      "right" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }",
      "info" : "SwitchStatement[22243-26810]:SwitchStatement[22637-27204]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[22273-22293]:SwitchCase[22667-22687]"
    }, {
      "left" : "f = _headContext.checkValue(_itemFilter);",
      "right" : "f = _headContext.checkValue(_itemFilter);",
      "info" : "ExpressionStatement[22310-22351]:ExpressionStatement[22704-22745]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[22368-22487]:IfStatement[22762-22881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22383-22487]:Block[22777-22881]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[22405-22429]:ExpressionStatement[22799-22823]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[22450-22469]:ContinueStatement[22844-22863]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[22504-22603]:IfStatement[22898-22997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22538-22603]:Block[22932-22997]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[22560-22585]:ExpressionStatement[22954-22979]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[22620-22636]:ExpressionStatement[23014-23030]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[22653-22840]:IfStatement[23047-23234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22687-22840]:Block[23081-23234]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[22709-22770]:ExpressionStatement[23103-23164]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[22791-22822]:ReturnStatement[23185-23216]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[22857-22919]:ExpressionStatement[23251-23313]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[22936-22955]:ContinueStatement[23330-23349]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[22969-22990]:SwitchCase[23363-23384]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[23007-23023]:ExpressionStatement[23401-23417]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[23040-23206]:IfStatement[23434-23600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23074-23206]:Block[23468-23600]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[23096-23158]:ExpressionStatement[23490-23552]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[23179-23188]:ReturnStatement[23573-23582]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[23223-23362]:IfStatement[23617-23756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23238-23362]:Block[23632-23756]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[23280-23304]:ExpressionStatement[23674-23698]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[23325-23344]:ContinueStatement[23719-23738]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[23434-23465]:ExpressionStatement[23828-23859]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[23482-23601]:IfStatement[23876-23995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23497-23601]:Block[23891-23995]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[23519-23543]:ExpressionStatement[23913-23937]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[23564-23583]:ContinueStatement[23958-23977]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[23618-23718]:IfStatement[24012-24112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23652-23718]:Block[24046-24112]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[23674-23700]:ExpressionStatement[24068-24094]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[23735-23751]:ExpressionStatement[24129-24145]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[23768-23956]:IfStatement[24162-24350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23802-23956]:Block[24196-24350]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[23824-23886]:ExpressionStatement[24218-24280]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[23907-23938]:ReturnStatement[24301-24332]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[23973-24036]:ExpressionStatement[24367-24430]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[24053-24072]:ContinueStatement[24447-24466]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[24086-24104]:SwitchCase[24480-24498]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[24117-24136]:SwitchCase[24511-24530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24153-25072]:Block[24547-25466]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[24320-24349]:ExpressionStatement[24714-24743]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[24370-24491]:IfStatement[24764-24885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24421-24491]:Block[24815-24885]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[24447-24469]:ExpressionStatement[24841-24863]"
    }, {
      "left" : "boolean gotEnd = (_headContext == buffRoot);",
      "right" : "boolean gotEnd = (_headContext == buffRoot);",
      "info" : "VariableDeclarationStatement[24512-24556]:VariableDeclarationStatement[24906-24950]"
    }, {
      "left" : "boolean returnEnd = gotEnd && _headContext.isStartHandled();",
      "right" : "boolean returnEnd = gotEnd && _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[24577-24637]:VariableDeclarationStatement[24971-25031]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[24659-24699]:ExpressionStatement[25053-25093]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[24720-24759]:ExpressionStatement[25114-25153]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[24781-24853]:IfStatement[25175-25247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24796-24853]:Block[25190-25247]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[24822-24831]:ReturnStatement[25216-25225]"
    }, {
      "left" : "if (gotEnd || (_headContext == buffRoot))",
      "right" : "if (gotEnd || (_headContext == buffRoot))",
      "info" : "IfStatement[24952-25054]:IfStatement[25346-25448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24994-25054]:Block[25388-25448]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25020-25032]:ReturnStatement[25414-25426]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[25089-25108]:ContinueStatement[25483-25502]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[25122-25141]:SwitchCase[25516-25535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25158-26140]:Block[25552-26534]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[25180-25226]:VariableDeclarationStatement[25574-25620]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[25247-25283]:ExpressionStatement[25641-25677]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[25304-25458]:IfStatement[25698-25852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25338-25458]:Block[25732-25852]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[25364-25380]:ExpressionStatement[25758-25774]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[25405-25436]:ReturnStatement[25799-25830]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[25479-25680]:IfStatement[25873-26074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25494-25680]:Block[25888-26074]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[25544-25565]:ExpressionStatement[25938-25959]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[25590-25614]:ExpressionStatement[25984-26008]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[25639-25658]:ContinueStatement[26033-26052]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[25701-25729]:ExpressionStatement[26095-26123]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[25750-25951]:IfStatement[26144-26345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25765-25951]:Block[26159-26345]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[25815-25836]:ExpressionStatement[26209-26230]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[25861-25885]:ExpressionStatement[26255-26279]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[25910-25929]:ContinueStatement[26304-26323]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[25972-25988]:ExpressionStatement[26366-26382]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[26009-26122]:IfStatement[26403-26516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26043-26122]:Block[26437-26516]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[26069-26100]:ReturnStatement[26463-26494]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[26157-26176]:ContinueStatement[26551-26570]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26190-26198]:SwitchCase[26584-26592]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[26231-26247]:ExpressionStatement[26625-26641]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[26264-26369]:IfStatement[26658-26763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26298-26369]:Block[26692-26763]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[26320-26351]:ReturnStatement[26714-26745]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[26386-26681]:IfStatement[26780-27075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26401-26681]:Block[26795-27075]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[26423-26454]:ExpressionStatement[26817-26848]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[26475-26663]:IfStatement[26869-27057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26584-26663]:Block[26978-27057]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[26610-26641]:ReturnStatement[27004-27035]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[26777-26796]:ContinueStatement[27171-27190]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26832-26839]:Modifier[27226-27233]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[26840-26849]:SimpleType[27234-27243]"
    }, {
      "left" : "_nextBuffered",
      "right" : "_nextBuffered",
      "info" : "SimpleName[26850-26863]:SimpleName[27244-27257]"
    }, {
      "left" : "TokenFilterContext buffRoot",
      "right" : "TokenFilterContext buffRoot",
      "info" : "SingleVariableDeclaration[26864-26891]:SingleVariableDeclaration[27258-27285]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26900-26911]:SimpleType[27294-27305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26916-27867]:Block[27310-28261]"
    }, {
      "left" : "_exposedContext = buffRoot;",
      "right" : "_exposedContext = buffRoot;",
      "info" : "ExpressionStatement[26926-26953]:ExpressionStatement[27320-27347]"
    }, {
      "left" : "TokenFilterContext ctxt = buffRoot;",
      "right" : "TokenFilterContext ctxt = buffRoot;",
      "info" : "VariableDeclarationStatement[26962-26997]:VariableDeclarationStatement[27356-27391]"
    }, {
      "left" : "JsonToken t = ctxt.nextTokenToRead();",
      "right" : "JsonToken t = ctxt.nextTokenToRead();",
      "info" : "VariableDeclarationStatement[27006-27043]:VariableDeclarationStatement[27400-27437]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[27052-27100]:IfStatement[27446-27494]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27067-27100]:Block[27461-27494]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[27081-27090]:ReturnStatement[27475-27484]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[27109-27861]:WhileStatement[27503-28255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27122-27861]:Block[27516-28255]"
    }, {
      "left" : "if (ctxt == _headContext)",
      "right" : "if (ctxt == _headContext)",
      "info" : "IfStatement[27181-27423]:IfStatement[27575-27817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27207-27423]:Block[27601-27817]"
    }, {
      "left" : "throw _constructError(\"Internal error: failed to locate expected buffered tokens\");",
      "right" : "throw _constructError(\"Internal error: failed to locate expected buffered tokens\");",
      "info" : "ThrowStatement[27225-27308]:ThrowStatement[27619-27702]"
    }, {
      "left" : "ctxt = _exposedContext.findChildOf(ctxt);",
      "right" : "ctxt = _exposedContext.findChildOf(ctxt);",
      "info" : "ExpressionStatement[27491-27532]:ExpressionStatement[27885-27926]"
    }, {
      "left" : "_exposedContext = ctxt;",
      "right" : "_exposedContext = ctxt;",
      "info" : "ExpressionStatement[27545-27568]:ExpressionStatement[27939-27962]"
    }, {
      "left" : "if (ctxt == null)",
      "right" : "if (ctxt == null)",
      "info" : "IfStatement[27581-27731]:IfStatement[27975-28125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27599-27731]:Block[27993-28125]"
    }, {
      "left" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "right" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "info" : "ThrowStatement[27639-27717]:ThrowStatement[28033-28111]"
    }, {
      "left" : "t = _exposedContext.nextTokenToRead();",
      "right" : "t = _exposedContext.nextTokenToRead();",
      "info" : "ExpressionStatement[27744-27782]:ExpressionStatement[28138-28176]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[27795-27851]:IfStatement[28189-28245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27810-27851]:Block[28204-28245]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[27828-27837]:ReturnStatement[28222-28231]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[27877-27886]:MarkerAnnotation[28271-28280]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[27891-27897]:Modifier[28285-28291]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[27898-27907]:SimpleType[28292-28301]"
    }, {
      "left" : "nextValue",
      "right" : "nextValue",
      "info" : "SimpleName[27908-27917]:SimpleName[28302-28311]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27927-27938]:SimpleType[28321-28332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27939-28132]:Block[28333-28526]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[28002-28028]:VariableDeclarationStatement[28396-28422]"
    }, {
      "left" : "if (t == JsonToken.FIELD_NAME)",
      "right" : "if (t == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[28037-28108]:IfStatement[28431-28502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28068-28108]:Block[28462-28502]"
    }, {
      "left" : "t = nextToken();",
      "right" : "t = nextToken();",
      "info" : "ExpressionStatement[28082-28098]:ExpressionStatement[28476-28492]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[28117-28126]:ReturnStatement[28511-28520]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28326-28335]:MarkerAnnotation[28720-28729]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28340-28346]:Modifier[28734-28740]"
    }, {
      "left" : "JsonParser",
      "right" : "JsonParser",
      "info" : "SimpleType[28347-28357]:SimpleType[28741-28751]"
    }, {
      "left" : "skipChildren",
      "right" : "skipChildren",
      "info" : "SimpleName[28358-28370]:SimpleName[28752-28764]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28380-28391]:SimpleType[28774-28785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28396-29082]:Block[28790-29476]"
    }, {
      "left" : "if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY))",
      "right" : "if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY))",
      "info" : "IfStatement[28406-28539]:IfStatement[28800-28933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28503-28539]:Block[28897-28933]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[28517-28529]:ReturnStatement[28911-28923]"
    }, {
      "left" : "int open = 1;",
      "right" : "int open = 1;",
      "info" : "VariableDeclarationStatement[28548-28561]:VariableDeclarationStatement[28942-28955]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[28700-29076]:WhileStatement[29094-29470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28713-29076]:Block[29107-29470]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[28727-28753]:VariableDeclarationStatement[29121-29147]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[28766-28863]:IfStatement[29160-29257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28781-28863]:Block[29175-29257]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[28837-28849]:ReturnStatement[29231-29243]"
    }, {
      "left" : "if (t.isStructStart())",
      "right" : "if (t.isStructStart())",
      "info" : "IfStatement[28876-29066]:IfStatement[29270-29460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28899-28938]:Block[29293-29332]"
    }, {
      "left" : "++open;",
      "right" : "++open;",
      "info" : "ExpressionStatement[28917-28924]:ExpressionStatement[29311-29318]"
    }, {
      "left" : "if (t.isStructEnd())",
      "right" : "if (t.isStructEnd())",
      "info" : "IfStatement[28944-29066]:IfStatement[29338-29460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28965-29066]:Block[29359-29460]"
    }, {
      "left" : "if (--open == 0)",
      "right" : "if (--open == 0)",
      "info" : "IfStatement[28983-29052]:IfStatement[29377-29446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29000-29052]:Block[29394-29446]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[29022-29034]:ReturnStatement[29416-29428]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29289-29298]:MarkerAnnotation[29683-29692]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29299-29305]:Modifier[29693-29699]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29306-29312]:SimpleType[29700-29706]"
    }, {
      "left" : "getText",
      "right" : "getText",
      "info" : "SimpleName[29313-29320]:SimpleName[29707-29714]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29330-29341]:SimpleType[29724-29735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29342-29373]:Block[29736-29767]"
    }, {
      "left" : "return delegate.getText();",
      "right" : "return delegate.getText();",
      "info" : "ReturnStatement[29344-29370]:ReturnStatement[29738-29764]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29378-29387]:MarkerAnnotation[29772-29781]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29388-29394]:Modifier[29782-29788]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[29395-29402]:PrimitiveType[29789-29796]"
    }, {
      "left" : "hasTextCharacters",
      "right" : "hasTextCharacters",
      "info" : "SimpleName[29403-29420]:SimpleName[29797-29814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29423-29463]:Block[29817-29857]"
    }, {
      "left" : "return delegate.hasTextCharacters();",
      "right" : "return delegate.hasTextCharacters();",
      "info" : "ReturnStatement[29425-29461]:ReturnStatement[29819-29855]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29468-29477]:MarkerAnnotation[29862-29871]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29478-29484]:Modifier[29872-29878]"
    }, {
      "left" : "char[]",
      "right" : "char[]",
      "info" : "ArrayType[29485-29491]:ArrayType[29879-29885]"
    }, {
      "left" : "getTextCharacters",
      "right" : "getTextCharacters",
      "info" : "SimpleName[29492-29509]:SimpleName[29886-29903]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29519-29530]:SimpleType[29913-29924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29531-29571]:Block[29925-29965]"
    }, {
      "left" : "return delegate.getTextCharacters();",
      "right" : "return delegate.getTextCharacters();",
      "info" : "ReturnStatement[29533-29569]:ReturnStatement[29927-29963]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29576-29585]:MarkerAnnotation[29970-29979]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29586-29592]:Modifier[29980-29986]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29593-29596]:PrimitiveType[29987-29990]"
    }, {
      "left" : "getTextLength",
      "right" : "getTextLength",
      "info" : "SimpleName[29597-29610]:SimpleName[29991-30004]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29620-29631]:SimpleType[30014-30025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29632-29668]:Block[30026-30062]"
    }, {
      "left" : "return delegate.getTextLength();",
      "right" : "return delegate.getTextLength();",
      "info" : "ReturnStatement[29634-29666]:ReturnStatement[30028-30060]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29673-29682]:MarkerAnnotation[30067-30076]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29683-29689]:Modifier[30077-30083]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[29690-29693]:PrimitiveType[30084-30087]"
    }, {
      "left" : "getTextOffset",
      "right" : "getTextOffset",
      "info" : "SimpleName[29694-29707]:SimpleName[30088-30101]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29717-29728]:SimpleType[30111-30122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29729-29765]:Block[30123-30159]"
    }, {
      "left" : "return delegate.getTextOffset();",
      "right" : "return delegate.getTextOffset();",
      "info" : "ReturnStatement[29731-29763]:ReturnStatement[30125-30157]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29975-29984]:MarkerAnnotation[30369-30378]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29989-29995]:Modifier[30383-30389]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[29996-30006]:SimpleType[30390-30400]"
    }, {
      "left" : "getBigIntegerValue",
      "right" : "getBigIntegerValue",
      "info" : "SimpleName[30007-30025]:SimpleName[30401-30419]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30035-30046]:SimpleType[30429-30440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30047-30088]:Block[30441-30482]"
    }, {
      "left" : "return delegate.getBigIntegerValue();",
      "right" : "return delegate.getBigIntegerValue();",
      "info" : "ReturnStatement[30049-30086]:ReturnStatement[30443-30480]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30094-30103]:MarkerAnnotation[30488-30497]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30108-30114]:Modifier[30502-30508]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30115-30122]:PrimitiveType[30509-30516]"
    }, {
      "left" : "getBooleanValue",
      "right" : "getBooleanValue",
      "info" : "SimpleName[30123-30138]:SimpleName[30517-30532]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30148-30159]:SimpleType[30542-30553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30160-30198]:Block[30554-30592]"
    }, {
      "left" : "return delegate.getBooleanValue();",
      "right" : "return delegate.getBooleanValue();",
      "info" : "ReturnStatement[30162-30196]:ReturnStatement[30556-30590]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30208-30217]:MarkerAnnotation[30602-30611]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30222-30228]:Modifier[30616-30622]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[30229-30233]:PrimitiveType[30623-30627]"
    }, {
      "left" : "getByteValue",
      "right" : "getByteValue",
      "info" : "SimpleName[30234-30246]:SimpleName[30628-30640]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30256-30267]:SimpleType[30650-30661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30268-30303]:Block[30662-30697]"
    }, {
      "left" : "return delegate.getByteValue();",
      "right" : "return delegate.getByteValue();",
      "info" : "ReturnStatement[30270-30301]:ReturnStatement[30664-30695]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30309-30318]:MarkerAnnotation[30703-30712]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30323-30329]:Modifier[30717-30723]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[30330-30335]:PrimitiveType[30724-30729]"
    }, {
      "left" : "getShortValue",
      "right" : "getShortValue",
      "info" : "SimpleName[30336-30349]:SimpleName[30730-30743]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30359-30370]:SimpleType[30753-30764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30371-30407]:Block[30765-30801]"
    }, {
      "left" : "return delegate.getShortValue();",
      "right" : "return delegate.getShortValue();",
      "info" : "ReturnStatement[30373-30405]:ReturnStatement[30767-30799]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30413-30422]:MarkerAnnotation[30807-30816]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30427-30433]:Modifier[30821-30827]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[30434-30444]:SimpleType[30828-30838]"
    }, {
      "left" : "getDecimalValue",
      "right" : "getDecimalValue",
      "info" : "SimpleName[30445-30460]:SimpleName[30839-30854]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30470-30481]:SimpleType[30864-30875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30482-30520]:Block[30876-30914]"
    }, {
      "left" : "return delegate.getDecimalValue();",
      "right" : "return delegate.getDecimalValue();",
      "info" : "ReturnStatement[30484-30518]:ReturnStatement[30878-30912]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30526-30535]:MarkerAnnotation[30920-30929]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30540-30546]:Modifier[30934-30940]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[30547-30553]:PrimitiveType[30941-30947]"
    }, {
      "left" : "getDoubleValue",
      "right" : "getDoubleValue",
      "info" : "SimpleName[30554-30568]:SimpleName[30948-30962]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30578-30589]:SimpleType[30972-30983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30590-30627]:Block[30984-31021]"
    }, {
      "left" : "return delegate.getDoubleValue();",
      "right" : "return delegate.getDoubleValue();",
      "info" : "ReturnStatement[30592-30625]:ReturnStatement[30986-31019]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30633-30642]:MarkerAnnotation[31027-31036]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30647-30653]:Modifier[31041-31047]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[30654-30659]:PrimitiveType[31048-31053]"
    }, {
      "left" : "getFloatValue",
      "right" : "getFloatValue",
      "info" : "SimpleName[30660-30673]:SimpleName[31054-31067]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30683-30694]:SimpleType[31077-31088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30695-30731]:Block[31089-31125]"
    }, {
      "left" : "return delegate.getFloatValue();",
      "right" : "return delegate.getFloatValue();",
      "info" : "ReturnStatement[30697-30729]:ReturnStatement[31091-31123]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30737-30746]:MarkerAnnotation[31131-31140]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30751-30757]:Modifier[31145-31151]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30758-30761]:PrimitiveType[31152-31155]"
    }, {
      "left" : "getIntValue",
      "right" : "getIntValue",
      "info" : "SimpleName[30762-30773]:SimpleName[31156-31167]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30783-30794]:SimpleType[31177-31188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30795-30829]:Block[31189-31223]"
    }, {
      "left" : "return delegate.getIntValue();",
      "right" : "return delegate.getIntValue();",
      "info" : "ReturnStatement[30797-30827]:ReturnStatement[31191-31221]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30835-30844]:MarkerAnnotation[31229-31238]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30849-30855]:Modifier[31243-31249]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[30856-30860]:PrimitiveType[31250-31254]"
    }, {
      "left" : "getLongValue",
      "right" : "getLongValue",
      "info" : "SimpleName[30861-30873]:SimpleName[31255-31267]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30883-30894]:SimpleType[31277-31288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30895-30930]:Block[31289-31324]"
    }, {
      "left" : "return delegate.getLongValue();",
      "right" : "return delegate.getLongValue();",
      "info" : "ReturnStatement[30897-30928]:ReturnStatement[31291-31322]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30936-30945]:MarkerAnnotation[31330-31339]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30950-30956]:Modifier[31344-31350]"
    }, {
      "left" : "NumberType",
      "right" : "NumberType",
      "info" : "SimpleType[30957-30967]:SimpleType[31351-31361]"
    }, {
      "left" : "getNumberType",
      "right" : "getNumberType",
      "info" : "SimpleName[30968-30981]:SimpleName[31362-31375]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30991-31002]:SimpleType[31385-31396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31003-31039]:Block[31397-31433]"
    }, {
      "left" : "return delegate.getNumberType();",
      "right" : "return delegate.getNumberType();",
      "info" : "ReturnStatement[31005-31037]:ReturnStatement[31399-31431]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31045-31054]:MarkerAnnotation[31439-31448]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31059-31065]:Modifier[31453-31459]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[31066-31072]:SimpleType[31460-31466]"
    }, {
      "left" : "getNumberValue",
      "right" : "getNumberValue",
      "info" : "SimpleName[31073-31087]:SimpleName[31467-31481]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31097-31108]:SimpleType[31491-31502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31109-31146]:Block[31503-31540]"
    }, {
      "left" : "return delegate.getNumberValue();",
      "right" : "return delegate.getNumberValue();",
      "info" : "ReturnStatement[31111-31144]:ReturnStatement[31505-31538]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31368-31377]:MarkerAnnotation[31762-31771]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31378-31384]:Modifier[31772-31778]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[31385-31388]:PrimitiveType[31779-31782]"
    }, {
      "left" : "getValueAsInt",
      "right" : "getValueAsInt",
      "info" : "SimpleName[31389-31402]:SimpleName[31783-31796]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31412-31423]:SimpleType[31806-31817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31424-31460]:Block[31818-31854]"
    }, {
      "left" : "return delegate.getValueAsInt();",
      "right" : "return delegate.getValueAsInt();",
      "info" : "ReturnStatement[31426-31458]:ReturnStatement[31820-31852]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31465-31474]:MarkerAnnotation[31859-31868]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31475-31481]:Modifier[31869-31875]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[31482-31485]:PrimitiveType[31876-31879]"
    }, {
      "left" : "getValueAsInt",
      "right" : "getValueAsInt",
      "info" : "SimpleName[31486-31499]:SimpleName[31880-31893]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[31500-31516]:SingleVariableDeclaration[31894-31910]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31525-31536]:SimpleType[31919-31930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31537-31585]:Block[31931-31979]"
    }, {
      "left" : "return delegate.getValueAsInt(defaultValue);",
      "right" : "return delegate.getValueAsInt(defaultValue);",
      "info" : "ReturnStatement[31539-31583]:ReturnStatement[31933-31977]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31590-31599]:MarkerAnnotation[31984-31993]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31600-31606]:Modifier[31994-32000]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[31607-31611]:PrimitiveType[32001-32005]"
    }, {
      "left" : "getValueAsLong",
      "right" : "getValueAsLong",
      "info" : "SimpleName[31612-31626]:SimpleName[32006-32020]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31636-31647]:SimpleType[32030-32041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31648-31685]:Block[32042-32079]"
    }, {
      "left" : "return delegate.getValueAsLong();",
      "right" : "return delegate.getValueAsLong();",
      "info" : "ReturnStatement[31650-31683]:ReturnStatement[32044-32077]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31690-31699]:MarkerAnnotation[32084-32093]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31700-31706]:Modifier[32094-32100]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[31707-31711]:PrimitiveType[32101-32105]"
    }, {
      "left" : "getValueAsLong",
      "right" : "getValueAsLong",
      "info" : "SimpleName[31712-31726]:SimpleName[32106-32120]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[31727-31744]:SingleVariableDeclaration[32121-32138]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31753-31764]:SimpleType[32147-32158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31765-31814]:Block[32159-32208]"
    }, {
      "left" : "return delegate.getValueAsLong(defaultValue);",
      "right" : "return delegate.getValueAsLong(defaultValue);",
      "info" : "ReturnStatement[31767-31812]:ReturnStatement[32161-32206]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31819-31828]:MarkerAnnotation[32213-32222]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31829-31835]:Modifier[32223-32229]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[31836-31842]:PrimitiveType[32230-32236]"
    }, {
      "left" : "getValueAsDouble",
      "right" : "getValueAsDouble",
      "info" : "SimpleName[31843-31859]:SimpleName[32237-32253]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31869-31880]:SimpleType[32263-32274]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31881-31920]:Block[32275-32314]"
    }, {
      "left" : "return delegate.getValueAsDouble();",
      "right" : "return delegate.getValueAsDouble();",
      "info" : "ReturnStatement[31883-31918]:ReturnStatement[32277-32312]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31925-31934]:MarkerAnnotation[32319-32328]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31935-31941]:Modifier[32329-32335]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[31942-31948]:PrimitiveType[32336-32342]"
    }, {
      "left" : "getValueAsDouble",
      "right" : "getValueAsDouble",
      "info" : "SimpleName[31949-31965]:SimpleName[32343-32359]"
    }, {
      "left" : "double defaultValue",
      "right" : "double defaultValue",
      "info" : "SingleVariableDeclaration[31966-31985]:SingleVariableDeclaration[32360-32379]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31994-32005]:SimpleType[32388-32399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32006-32057]:Block[32400-32451]"
    }, {
      "left" : "return delegate.getValueAsDouble(defaultValue);",
      "right" : "return delegate.getValueAsDouble(defaultValue);",
      "info" : "ReturnStatement[32008-32055]:ReturnStatement[32402-32449]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32062-32071]:MarkerAnnotation[32456-32465]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32072-32078]:Modifier[32466-32472]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32079-32086]:PrimitiveType[32473-32480]"
    }, {
      "left" : "getValueAsBoolean",
      "right" : "getValueAsBoolean",
      "info" : "SimpleName[32087-32104]:SimpleName[32481-32498]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32114-32125]:SimpleType[32508-32519]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32126-32166]:Block[32520-32560]"
    }, {
      "left" : "return delegate.getValueAsBoolean();",
      "right" : "return delegate.getValueAsBoolean();",
      "info" : "ReturnStatement[32128-32164]:ReturnStatement[32522-32558]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32171-32180]:MarkerAnnotation[32565-32574]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32181-32187]:Modifier[32575-32581]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32188-32195]:PrimitiveType[32582-32589]"
    }, {
      "left" : "getValueAsBoolean",
      "right" : "getValueAsBoolean",
      "info" : "SimpleName[32196-32213]:SimpleName[32590-32607]"
    }, {
      "left" : "boolean defaultValue",
      "right" : "boolean defaultValue",
      "info" : "SingleVariableDeclaration[32214-32234]:SingleVariableDeclaration[32608-32628]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32243-32254]:SimpleType[32637-32648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32255-32307]:Block[32649-32701]"
    }, {
      "left" : "return delegate.getValueAsBoolean(defaultValue);",
      "right" : "return delegate.getValueAsBoolean(defaultValue);",
      "info" : "ReturnStatement[32257-32305]:ReturnStatement[32651-32699]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32312-32321]:MarkerAnnotation[32706-32715]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32322-32328]:Modifier[32716-32722]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32329-32335]:SimpleType[32723-32729]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[32336-32352]:SimpleName[32730-32746]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32362-32373]:SimpleType[32756-32767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32374-32413]:Block[32768-32807]"
    }, {
      "left" : "return delegate.getValueAsString();",
      "right" : "return delegate.getValueAsString();",
      "info" : "ReturnStatement[32376-32411]:ReturnStatement[32770-32805]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32418-32427]:MarkerAnnotation[32812-32821]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32428-32434]:Modifier[32822-32828]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32435-32441]:SimpleType[32829-32835]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[32442-32458]:SimpleName[32836-32852]"
    }, {
      "left" : "String defaultValue",
      "right" : "String defaultValue",
      "info" : "SingleVariableDeclaration[32459-32478]:SingleVariableDeclaration[32853-32872]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32487-32498]:SimpleType[32881-32892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32499-32550]:Block[32893-32944]"
    }, {
      "left" : "return delegate.getValueAsString(defaultValue);",
      "right" : "return delegate.getValueAsString(defaultValue);",
      "info" : "ReturnStatement[32501-32548]:ReturnStatement[32895-32942]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32753-32762]:MarkerAnnotation[33147-33156]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32763-32769]:Modifier[33157-33163]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[32770-32776]:SimpleType[33164-33170]"
    }, {
      "left" : "getEmbeddedObject",
      "right" : "getEmbeddedObject",
      "info" : "SimpleName[32777-32794]:SimpleName[33171-33188]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32804-32815]:SimpleType[33198-33209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32816-32856]:Block[33210-33250]"
    }, {
      "left" : "return delegate.getEmbeddedObject();",
      "right" : "return delegate.getEmbeddedObject();",
      "info" : "ReturnStatement[32818-32854]:ReturnStatement[33212-33248]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32861-32870]:MarkerAnnotation[33255-33264]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32871-32877]:Modifier[33265-33271]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[32878-32884]:ArrayType[33272-33278]"
    }, {
      "left" : "getBinaryValue",
      "right" : "getBinaryValue",
      "info" : "SimpleName[32885-32899]:SimpleName[33279-33293]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[32900-32924]:SingleVariableDeclaration[33294-33318]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32933-32944]:SimpleType[33327-33338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32945-32992]:Block[33339-33386]"
    }, {
      "left" : "return delegate.getBinaryValue(b64variant);",
      "right" : "return delegate.getBinaryValue(b64variant);",
      "info" : "ReturnStatement[32947-32990]:ReturnStatement[33341-33384]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32997-33006]:MarkerAnnotation[33391-33400]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33007-33013]:Modifier[33401-33407]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[33014-33017]:PrimitiveType[33408-33411]"
    }, {
      "left" : "readBinaryValue",
      "right" : "readBinaryValue",
      "info" : "SimpleName[33018-33033]:SimpleName[33412-33427]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[33034-33058]:SingleVariableDeclaration[33428-33452]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[33060-33076]:SingleVariableDeclaration[33454-33470]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33085-33096]:SimpleType[33479-33490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33097-33150]:Block[33491-33544]"
    }, {
      "left" : "return delegate.readBinaryValue(b64variant, out);",
      "right" : "return delegate.readBinaryValue(b64variant, out);",
      "info" : "ReturnStatement[33099-33148]:ReturnStatement[33493-33542]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33155-33164]:MarkerAnnotation[33549-33558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33165-33171]:Modifier[33559-33565]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[33172-33184]:SimpleType[33566-33578]"
    }, {
      "left" : "getTokenLocation",
      "right" : "getTokenLocation",
      "info" : "SimpleName[33185-33201]:SimpleName[33579-33595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33204-33243]:Block[33598-33637]"
    }, {
      "left" : "return delegate.getTokenLocation();",
      "right" : "return delegate.getTokenLocation();",
      "info" : "ReturnStatement[33206-33241]:ReturnStatement[33600-33635]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[33424-33433]:Modifier[33818-33827]"
    }, {
      "left" : "JsonStreamContext",
      "right" : "JsonStreamContext",
      "info" : "SimpleType[33434-33451]:SimpleType[33828-33845]"
    }, {
      "left" : "_filterContext",
      "right" : "_filterContext",
      "info" : "SimpleName[33452-33466]:SimpleName[33846-33860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33469-33590]:Block[33863-33984]"
    }, {
      "left" : "if (_exposedContext != null)",
      "right" : "if (_exposedContext != null)",
      "info" : "IfStatement[33479-33555]:IfStatement[33873-33949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33508-33555]:Block[33902-33949]"
    }, {
      "left" : "return _exposedContext;",
      "right" : "return _exposedContext;",
      "info" : "ReturnStatement[33522-33545]:ReturnStatement[33916-33939]"
    }, {
      "left" : "return _headContext;",
      "right" : "return _headContext;",
      "info" : "ReturnStatement[33564-33584]:ReturnStatement[33958-33978]"
    } ]
  },
  "interFileMappings" : { }
}