{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DefaultInjectionEngine",
      "right" : "DefaultInjectionEngine",
      "info" : "TypeDeclaration[783-4161]:TypeDeclaration[783-4216]"
    }, {
      "left" : "private final MockCandidateFilter mockCandidateFilter = new TypeBasedCandidateFilter(new NameBasedCandidateFilter(new FinalMockCandidateFilter()));",
      "right" : "private final MockCandidateFilter mockCandidateFilter = new TypeBasedCandidateFilter(new NameBasedCandidateFilter(new FinalMockCandidateFilter()));",
      "info" : "FieldDeclaration[978-1125]:FieldDeclaration[978-1125]"
    }, {
      "left" : "private Comparator<Field> supertypesLast = new Comparator<Field>() {\r\n        public int compare(Field field1, Field field2) {\r\n            Class<?> field1Type = field1.getType();\r\n            Class<?> field2Type = field2.getType();\r\n\r\n            if(field1Type.isAssignableFrom(field2Type)) {\r\n                return 1;\r\n            }\r\n            if(field2Type.isAssignableFrom(field1Type)) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        }\r\n    };",
      "right" : "private Comparator<Field> supertypesLast = new Comparator<Field>() {\r\n        public int compare(Field field1, Field field2) {\r\n            Class<?> field1Type = field1.getType();\r\n            Class<?> field2Type = field2.getType();\r\n\r\n            if(field1Type.isAssignableFrom(field2Type)) {\r\n                return 1;\r\n            }\r\n            if(field2Type.isAssignableFrom(field1Type)) {\r\n                return -1;\r\n            }\r\n            return 0;\r\n        }\r\n    };",
      "info" : "FieldDeclaration[1131-1610]:FieldDeclaration[1131-1610]"
    }, {
      "left" : "public int compare(Field field1, Field field2)",
      "right" : "public int compare(Field field1, Field field2)",
      "info" : "MethodDeclaration[1209-1602]:MethodDeclaration[1209-1602]"
    }, {
      "left" : "public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks, Object testClassInstance)",
      "right" : "public void injectMocksOnFields(Set<Field> injectMocksFields, Set<Object> mocks, Object testClassInstance)",
      "info" : "MethodDeclaration[1618-3595]:MethodDeclaration[1618-3595]"
    }, {
      "left" : "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance)",
      "right" : "private void injectMockCandidate(Class<?> awaitingInjectionClazz, Set<Object> mocks, Object fieldInstance)",
      "info" : "MethodDeclaration[3603-3901]:MethodDeclaration[3603-3956]"
    }, {
      "left" : "private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz)",
      "right" : "private Field[] orderedInstanceFieldsFrom(Class<?> awaitingInjectionClazz)",
      "info" : "MethodDeclaration[3909-4156]:MethodDeclaration[3964-4211]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1256-1602]:Block[1256-1602]"
    }, {
      "left" : "Class<?> field1Type = field1.getType();",
      "right" : "Class<?> field1Type = field1.getType();",
      "info" : "VariableDeclarationStatement[1271-1310]:VariableDeclarationStatement[1271-1310]"
    }, {
      "left" : "Class<?> field2Type = field2.getType();",
      "right" : "Class<?> field2Type = field2.getType();",
      "info" : "VariableDeclarationStatement[1324-1363]:VariableDeclarationStatement[1324-1363]"
    }, {
      "left" : "if(field1Type.isAssignableFrom(field2Type))",
      "right" : "if(field1Type.isAssignableFrom(field2Type))",
      "info" : "IfStatement[1379-1466]:IfStatement[1379-1466]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1423-1466]:Block[1423-1466]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[1442-1451]:ReturnStatement[1442-1451]"
    }, {
      "left" : "if(field2Type.isAssignableFrom(field1Type))",
      "right" : "if(field2Type.isAssignableFrom(field1Type))",
      "info" : "IfStatement[1480-1568]:IfStatement[1480-1568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1524-1568]:Block[1524-1568]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[1543-1553]:ReturnStatement[1543-1553]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[1582-1591]:ReturnStatement[1582-1591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2778-3595]:Block[2778-3595]"
    }, {
      "left" : "for (Field field : injectMocksFields)",
      "right" : "for (Field field : injectMocksFields)",
      "info" : "EnhancedForStatement[2789-3588]:EnhancedForStatement[2789-3588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2827-3588]:Block[2827-3588]"
    }, {
      "left" : "Set<Object> mocksToBeInjected = new HashSet<Object>(mocks);",
      "right" : "Set<Object> mocksToBeInjected = new HashSet<Object>(mocks);",
      "info" : "VariableDeclarationStatement[2842-2901]:VariableDeclarationStatement[2842-2901]"
    }, {
      "left" : "Object injectMocksFieldInstance = null;",
      "right" : "Object injectMocksFieldInstance = null;",
      "info" : "VariableDeclarationStatement[2915-2954]:VariableDeclarationStatement[2915-2954]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2968-3231]:TryStatement[2968-3231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2972-3093]:Block[2972-3093]"
    }, {
      "left" : "injectMocksFieldInstance = new FieldInitializer(testClassInstance, field).initialize();",
      "right" : "injectMocksFieldInstance = new FieldInitializer(testClassInstance, field).initialize();",
      "info" : "ExpressionStatement[2991-3078]:ExpressionStatement[2991-3078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3121-3231]:Block[3121-3231]"
    }, {
      "left" : "new Reporter().cannotInitializeForInjectMocksAnnotation(field.getName(), e);",
      "right" : "new Reporter().cannotInitializeForInjectMocksAnnotation(field.getName(), e);",
      "info" : "ExpressionStatement[3140-3216]:ExpressionStatement[3140-3216]"
    }, {
      "left" : "Class<?> fieldClass = injectMocksFieldInstance.getClass();",
      "right" : "Class<?> fieldClass = injectMocksFieldInstance.getClass();",
      "info" : "VariableDeclarationStatement[3301-3359]:VariableDeclarationStatement[3301-3359]"
    }, {
      "left" : "while (fieldClass != Object.class)",
      "right" : "while (fieldClass != Object.class)",
      "info" : "WhileStatement[3373-3577]:WhileStatement[3373-3577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3408-3577]:Block[3408-3577]"
    }, {
      "left" : "injectMockCandidate(fieldClass, mocksToBeInjected, injectMocksFieldInstance);",
      "right" : "injectMockCandidate(fieldClass, mocksToBeInjected, injectMocksFieldInstance);",
      "info" : "ExpressionStatement[3427-3504]:ExpressionStatement[3427-3504]"
    }, {
      "left" : "fieldClass = fieldClass.getSuperclass();",
      "right" : "fieldClass = fieldClass.getSuperclass();",
      "info" : "ExpressionStatement[3522-3562]:ExpressionStatement[3522-3562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3710-3901]:Block[3710-3956]"
    }, {
      "left" : "for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz))",
      "right" : "for(Field field : orderedInstanceFieldsFrom(awaitingInjectionClazz))",
      "info" : "EnhancedForStatement[3721-3894]:EnhancedForStatement[3721-3949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3790-3894]:Block[3790-3949]"
    }, {
      "left" : "mockCandidateFilter.filterCandidate(mocks, field, fieldInstance).thenInject();",
      "right" : "mocks.remove(injected);",
      "info" : "ExpressionStatement[3805-3883]:ExpressionStatement[3915-3938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3984-4156]:Block[4039-4211]"
    }, {
      "left" : "Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
      "right" : "Field[] declaredFields = awaitingInjectionClazz.getDeclaredFields();",
      "info" : "VariableDeclarationStatement[3995-4063]:VariableDeclarationStatement[4050-4118]"
    }, {
      "left" : "Arrays.sort(declaredFields, supertypesLast);",
      "right" : "Arrays.sort(declaredFields, supertypesLast);",
      "info" : "ExpressionStatement[4073-4117]:ExpressionStatement[4128-4172]"
    }, {
      "left" : "return declaredFields;",
      "right" : "return declaredFields;",
      "info" : "ReturnStatement[4127-4149]:ReturnStatement[4182-4204]"
    } ]
  },
  "interFileMappings" : { }
}