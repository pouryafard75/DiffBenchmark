{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ResultImpl",
      "right" : "ResultImpl",
      "info" : "TypeDeclaration[3664-76366]:TypeDeclaration[3664-77784]"
    }, {
      "left" : "private static final long serialVersionUID = 6416154375799578362L;",
      "right" : "private static final long serialVersionUID = 6416154375799578362L;",
      "info" : "FieldDeclaration[3845-3948]:FieldDeclaration[3845-3948]"
    }, {
      "left" : "private Configuration     configuration;",
      "right" : "private Configuration     configuration;",
      "info" : "FieldDeclaration[3954-3994]:FieldDeclaration[3954-3994]"
    }, {
      "left" : "private final Fields<R>   fields;",
      "right" : "private final Fields<R>   fields;",
      "info" : "FieldDeclaration[3999-4032]:FieldDeclaration[3999-4032]"
    }, {
      "left" : "private final List<R>     records;",
      "right" : "private final List<R>     records;",
      "info" : "FieldDeclaration[4037-4071]:FieldDeclaration[4037-4071]"
    }, {
      "left" : "ResultImpl(Configuration configuration, Collection<? extends Field<?>> fields)",
      "right" : "ResultImpl(Configuration configuration, Collection<? extends Field<?>> fields)",
      "info" : "MethodDeclaration[4077-4215]:MethodDeclaration[4077-4215]"
    }, {
      "left" : "ResultImpl(Configuration configuration, Field<?>... fields)",
      "right" : "ResultImpl(Configuration configuration, Field<?>... fields)",
      "info" : "MethodDeclaration[4221-4340]:MethodDeclaration[4221-4340]"
    }, {
      "left" : "ResultImpl(Configuration configuration, Fields<R> fields)",
      "right" : "ResultImpl(Configuration configuration, Fields<R> fields)",
      "info" : "MethodDeclaration[4346-4528]:MethodDeclaration[4346-4528]"
    }, {
      "left" : "public final void attach(Configuration c)",
      "right" : "public final void attach(Configuration c)",
      "info" : "MethodDeclaration[4724-4947]:MethodDeclaration[4724-4947]"
    }, {
      "left" : "public final void detach()",
      "right" : "public final void detach()",
      "info" : "MethodDeclaration[4953-5023]:MethodDeclaration[4953-5023]"
    }, {
      "left" : "public final Configuration configuration()",
      "right" : "public final Configuration configuration()",
      "info" : "MethodDeclaration[5029-5123]:MethodDeclaration[5029-5123]"
    }, {
      "left" : "public final RecordType<R> recordType()",
      "right" : "public final RecordType<R> recordType()",
      "info" : "MethodDeclaration[5315-5399]:MethodDeclaration[5315-5399]"
    }, {
      "left" : "public final Row fieldsRow()",
      "right" : "public final Row fieldsRow()",
      "info" : "MethodDeclaration[5405-5491]:MethodDeclaration[5405-5491]"
    }, {
      "left" : "public final <T> Field<T> field(Field<T> field)",
      "right" : "public final <T> Field<T> field(Field<T> field)",
      "info" : "MethodDeclaration[5497-5602]:MethodDeclaration[5497-5602]"
    }, {
      "left" : "public final Field<?> field(String name)",
      "right" : "public final Field<?> field(String name)",
      "info" : "MethodDeclaration[5608-5705]:MethodDeclaration[5608-5705]"
    }, {
      "left" : "public final <T> Field<T> field(String name, Class<T> type)",
      "right" : "public final <T> Field<T> field(String name, Class<T> type)",
      "info" : "MethodDeclaration[5711-5833]:MethodDeclaration[5711-5833]"
    }, {
      "left" : "public final <T> Field<T> field(String name, DataType<T> dataType)",
      "right" : "public final <T> Field<T> field(String name, DataType<T> dataType)",
      "info" : "MethodDeclaration[5839-5972]:MethodDeclaration[5839-5972]"
    }, {
      "left" : "public final Field<?> field(Name name)",
      "right" : "public final Field<?> field(Name name)",
      "info" : "MethodDeclaration[5978-6073]:MethodDeclaration[5978-6073]"
    }, {
      "left" : "public final <T> Field<T> field(Name name, Class<T> type)",
      "right" : "public final <T> Field<T> field(Name name, Class<T> type)",
      "info" : "MethodDeclaration[6079-6199]:MethodDeclaration[6079-6199]"
    }, {
      "left" : "public final <T> Field<T> field(Name name, DataType<T> dataType)",
      "right" : "public final <T> Field<T> field(Name name, DataType<T> dataType)",
      "info" : "MethodDeclaration[6205-6336]:MethodDeclaration[6205-6336]"
    }, {
      "left" : "public final Field<?> field(int index)",
      "right" : "public final Field<?> field(int index)",
      "info" : "MethodDeclaration[6342-6438]:MethodDeclaration[6342-6438]"
    }, {
      "left" : "public final <T> Field<T> field(int index, Class<T> type)",
      "right" : "public final <T> Field<T> field(int index, Class<T> type)",
      "info" : "MethodDeclaration[6444-6565]:MethodDeclaration[6444-6565]"
    }, {
      "left" : "public final <T> Field<T> field(int index, DataType<T> dataType)",
      "right" : "public final <T> Field<T> field(int index, DataType<T> dataType)",
      "info" : "MethodDeclaration[6571-6703]:MethodDeclaration[6571-6703]"
    }, {
      "left" : "public final Field<?>[] fields()",
      "right" : "public final Field<?>[] fields()",
      "info" : "MethodDeclaration[6709-6803]:MethodDeclaration[6709-6803]"
    }, {
      "left" : "final Field<?>[] fields(Field<?>... f)",
      "right" : "final Field<?>[] fields(Field<?>... f)",
      "info" : "MethodDeclaration[6857-7057]:MethodDeclaration[6857-7057]"
    }, {
      "left" : "final Field<?>[] fields(int... indexes)",
      "right" : "final Field<?>[] fields(int... indexes)",
      "info" : "MethodDeclaration[7111-7330]:MethodDeclaration[7111-7330]"
    }, {
      "left" : "final Field<?>[] fields(String... names)",
      "right" : "final Field<?>[] fields(String... names)",
      "info" : "MethodDeclaration[7384-7598]:MethodDeclaration[7384-7598]"
    }, {
      "left" : "final Field<?>[] fields(Name... names)",
      "right" : "final Field<?>[] fields(Name... names)",
      "info" : "MethodDeclaration[7652-7864]:MethodDeclaration[7652-7864]"
    }, {
      "left" : "public final boolean isEmpty()",
      "right" : "public final boolean isEmpty()",
      "info" : "MethodDeclaration[7870-7956]:MethodDeclaration[7870-7956]"
    }, {
      "left" : "public final boolean isNotEmpty()",
      "right" : "public final boolean isNotEmpty()",
      "info" : "MethodDeclaration[7962-8052]:MethodDeclaration[7962-8052]"
    }, {
      "left" : "public final <T> T getValue(int index, Field<T> field)",
      "right" : "public final <T> T getValue(int index, Field<T> field)",
      "info" : "MethodDeclaration[8058-8177]:MethodDeclaration[8058-8177]"
    }, {
      "left" : "public final <T> T getValue(int index, Field<T> field, T defaultValue)",
      "right" : "public final <T> T getValue(int index, Field<T> field, T defaultValue)",
      "info" : "MethodDeclaration[8183-8348]:MethodDeclaration[8183-8348]"
    }, {
      "left" : "public final Object getValue(int index, int fieldIndex)",
      "right" : "public final Object getValue(int index, int fieldIndex)",
      "info" : "MethodDeclaration[8354-8479]:MethodDeclaration[8354-8479]"
    }, {
      "left" : "public final Object getValue(int index, int fieldIndex, Object defaultValue)",
      "right" : "public final Object getValue(int index, int fieldIndex, Object defaultValue)",
      "info" : "MethodDeclaration[8485-8661]:MethodDeclaration[8485-8661]"
    }, {
      "left" : "public final Object getValue(int index, String fieldName)",
      "right" : "public final Object getValue(int index, String fieldName)",
      "info" : "MethodDeclaration[8667-8793]:MethodDeclaration[8667-8793]"
    }, {
      "left" : "public final Object getValue(int index, String fieldName, Object defaultValue)",
      "right" : "public final Object getValue(int index, String fieldName, Object defaultValue)",
      "info" : "MethodDeclaration[8799-8976]:MethodDeclaration[8799-8976]"
    }, {
      "left" : "public final <T> List<T> getValues(Field<T> field)",
      "right" : "public final <T> List<T> getValues(Field<T> field)",
      "info" : "MethodDeclaration[8982-9123]:MethodDeclaration[8982-9123]"
    }, {
      "left" : "public final <T> List<T> getValues(Field<?> field, Class<? extends T> type)",
      "right" : "public final <T> List<T> getValues(Field<?> field, Class<? extends T> type)",
      "info" : "MethodDeclaration[9129-9282]:MethodDeclaration[9129-9282]"
    }, {
      "left" : "public final <T, U> List<U> getValues(Field<T> field, Converter<? super T, U> converter)",
      "right" : "public final <T, U> List<U> getValues(Field<T> field, Converter<? super T, U> converter)",
      "info" : "MethodDeclaration[9288-9459]:MethodDeclaration[9288-9459]"
    }, {
      "left" : "public final List<?> getValues(int fieldIndex)",
      "right" : "public final List<?> getValues(int fieldIndex)",
      "info" : "MethodDeclaration[9465-9714]:MethodDeclaration[9465-9714]"
    }, {
      "left" : "public final <T> List<T> getValues(int fieldIndex, Class<? extends T> type)",
      "right" : "public final <T> List<T> getValues(int fieldIndex, Class<? extends T> type)",
      "info" : "MethodDeclaration[9720-9878]:MethodDeclaration[9720-9878]"
    }, {
      "left" : "public final <U> List<U> getValues(int fieldIndex, Converter<?, U> converter)",
      "right" : "public final <U> List<U> getValues(int fieldIndex, Converter<?, U> converter)",
      "info" : "MethodDeclaration[9884-10049]:MethodDeclaration[9884-10049]"
    }, {
      "left" : "public final List<?> getValues(String fieldName)",
      "right" : "public final List<?> getValues(String fieldName)",
      "info" : "MethodDeclaration[10055-10169]:MethodDeclaration[10055-10169]"
    }, {
      "left" : "public final <T> List<T> getValues(String fieldName, Class<? extends T> type)",
      "right" : "public final <T> List<T> getValues(String fieldName, Class<? extends T> type)",
      "info" : "MethodDeclaration[10175-10334]:MethodDeclaration[10175-10334]"
    }, {
      "left" : "public final <U> List<U> getValues(String fieldName, Converter<?, U> converter)",
      "right" : "public final <U> List<U> getValues(String fieldName, Converter<?, U> converter)",
      "info" : "MethodDeclaration[10340-10506]:MethodDeclaration[10340-10506]"
    }, {
      "left" : "public final List<?> getValues(Name fieldName)",
      "right" : "public final List<?> getValues(Name fieldName)",
      "info" : "MethodDeclaration[10512-10624]:MethodDeclaration[10512-10624]"
    }, {
      "left" : "public final <T> List<T> getValues(Name fieldName, Class<? extends T> type)",
      "right" : "public final <T> List<T> getValues(Name fieldName, Class<? extends T> type)",
      "info" : "MethodDeclaration[10630-10787]:MethodDeclaration[10630-10787]"
    }, {
      "left" : "public final <U> List<U> getValues(Name fieldName, Converter<?, U> converter)",
      "right" : "public final <U> List<U> getValues(Name fieldName, Converter<?, U> converter)",
      "info" : "MethodDeclaration[10793-10957]:MethodDeclaration[10793-10957]"
    }, {
      "left" : "final void addRecord(R record)",
      "right" : "final void addRecord(R record)",
      "info" : "MethodDeclaration[10963-11030]:MethodDeclaration[10963-11030]"
    }, {
      "left" : "public final String format()",
      "right" : "public final String format()",
      "info" : "MethodDeclaration[11036-11194]:MethodDeclaration[11036-11194]"
    }, {
      "left" : "public final void format(OutputStream stream)",
      "right" : "public final void format(OutputStream stream)",
      "info" : "MethodDeclaration[11200-11315]:MethodDeclaration[11200-11315]"
    }, {
      "left" : "public final void format(Writer writer)",
      "right" : "public final void format(Writer writer)",
      "info" : "MethodDeclaration[11321-11410]:MethodDeclaration[11321-11410]"
    }, {
      "left" : "public final String format(int maxRecords)",
      "right" : "public final String format(int maxRecords)",
      "info" : "MethodDeclaration[11416-11600]:MethodDeclaration[11416-11600]"
    }, {
      "left" : "public final void format(OutputStream stream, int maxRecords)",
      "right" : "public final void format(OutputStream stream, int maxRecords)",
      "info" : "MethodDeclaration[11606-11749]:MethodDeclaration[11606-11749]"
    }, {
      "left" : "public final void format(Writer writer, int maxRecords)",
      "right" : "public final void format(Writer writer, int maxRecords)",
      "info" : "MethodDeclaration[11755-17465]:MethodDeclaration[11755-17465]"
    }, {
      "left" : "private static final String alignNumberValue(Integer columnDecimalPlaces, String value)",
      "right" : "private static final String alignNumberValue(Integer columnDecimalPlaces, String value)",
      "info" : "MethodDeclaration[17471-18071]:MethodDeclaration[17471-18071]"
    }, {
      "left" : "private static final int getDecimalPlaces(String value)",
      "right" : "private static final int getDecimalPlaces(String value)",
      "info" : "MethodDeclaration[18077-18345]:MethodDeclaration[18077-18345]"
    }, {
      "left" : "public final String formatHTML()",
      "right" : "public final String formatHTML()",
      "info" : "MethodDeclaration[18351-18517]:MethodDeclaration[18351-18517]"
    }, {
      "left" : "public final void formatHTML(OutputStream stream)",
      "right" : "public final void formatHTML(OutputStream stream)",
      "info" : "MethodDeclaration[18523-18646]:MethodDeclaration[18523-18646]"
    }, {
      "left" : "public final void formatHTML(Writer writer)",
      "right" : "public final void formatHTML(Writer writer)",
      "info" : "MethodDeclaration[18652-19758]:MethodDeclaration[18652-19758]"
    }, {
      "left" : "public final String formatCSV()",
      "right" : "public final String formatCSV(boolean header)",
      "info" : "MethodDeclaration[19764-19928]:MethodDeclaration[19855-20041]"
    }, {
      "left" : "public final void formatCSV(OutputStream stream)",
      "right" : "public final void formatCSV(OutputStream stream)",
      "info" : "MethodDeclaration[19934-20055]:MethodDeclaration[20047-20150]"
    }, {
      "left" : "public final void formatCSV(Writer writer)",
      "right" : "public final void formatCSV(Writer writer, boolean header)",
      "info" : "MethodDeclaration[20061-20161]:MethodDeclaration[20410-20534]"
    }, {
      "left" : "public final String formatCSV(char delimiter)",
      "right" : "public final String formatCSV(boolean header, char delimiter)",
      "info" : "MethodDeclaration[20167-20356]:MethodDeclaration[20656-20861]"
    }, {
      "left" : "public final void formatCSV(OutputStream stream, char delimiter)",
      "right" : "public final void formatCSV(OutputStream stream, boolean header, char delimiter)",
      "info" : "MethodDeclaration[20362-20510]:MethodDeclaration[21003-21167]"
    }, {
      "left" : "public final void formatCSV(Writer writer, char delimiter)",
      "right" : "public final void formatCSV(Writer writer, boolean header, char delimiter)",
      "info" : "MethodDeclaration[20516-20638]:MethodDeclaration[21303-21449]"
    }, {
      "left" : "public final String formatCSV(char delimiter, String nullString)",
      "right" : "public final String formatCSV(boolean header, char delimiter, String nullString)",
      "info" : "MethodDeclaration[20644-20864]:MethodDeclaration[21602-21846]"
    }, {
      "left" : "public final void formatCSV(OutputStream stream, char delimiter, String nullString)",
      "right" : "public final void formatCSV(OutputStream stream, char delimiter, String nullString)",
      "info" : "MethodDeclaration[20870-21049]:MethodDeclaration[21852-22013]"
    }, {
      "left" : "public final void formatCSV(Writer writer, char delimiter, String nullString)",
      "right" : "public final void formatCSV(Writer writer, boolean header, char delimiter, String nullString)",
      "info" : "MethodDeclaration[21055-21989]:MethodDeclaration[22389-23407]"
    }, {
      "left" : "private final String formatCSV0(Object value, String nullString)",
      "right" : "private final String formatCSV0(Object value, String nullString)",
      "info" : "MethodDeclaration[21995-22627]:MethodDeclaration[23413-24045]"
    }, {
      "left" : "private final Object formatJSON0(Object value)",
      "right" : "private final Object formatJSON0(Object value)",
      "info" : "MethodDeclaration[22633-22819]:MethodDeclaration[24051-24237]"
    }, {
      "left" : "private static final String format0(Object value, boolean changed, boolean visual)",
      "right" : "private static final String format0(Object value, boolean changed, boolean visual)",
      "info" : "MethodDeclaration[22825-23853]:MethodDeclaration[24243-25271]"
    }, {
      "left" : "public final String formatJSON()",
      "right" : "public final String formatJSON()",
      "info" : "MethodDeclaration[23859-24025]:MethodDeclaration[25277-25443]"
    }, {
      "left" : "public final void formatJSON(OutputStream stream)",
      "right" : "public final void formatJSON(OutputStream stream)",
      "info" : "MethodDeclaration[24031-24154]:MethodDeclaration[25449-25572]"
    }, {
      "left" : "public final void formatJSON(Writer writer)",
      "right" : "public final void formatJSON(Writer writer)",
      "info" : "MethodDeclaration[24160-25379]:MethodDeclaration[25578-26797]"
    }, {
      "left" : "public final String formatXML()",
      "right" : "public final String formatXML()",
      "info" : "MethodDeclaration[25385-25549]:MethodDeclaration[26803-26967]"
    }, {
      "left" : "public final void formatXML(OutputStream stream)",
      "right" : "public final void formatXML(OutputStream stream)",
      "info" : "MethodDeclaration[25555-25676]:MethodDeclaration[26973-27094]"
    }, {
      "left" : "public final void formatXML(Writer writer)",
      "right" : "public final void formatXML(Writer writer)",
      "info" : "MethodDeclaration[25682-27365]:MethodDeclaration[27100-28783]"
    }, {
      "left" : "public final String formatInsert()",
      "right" : "public final String formatInsert()",
      "info" : "MethodDeclaration[27371-27541]:MethodDeclaration[28789-28959]"
    }, {
      "left" : "public final void formatInsert(OutputStream stream)",
      "right" : "public final void formatInsert(OutputStream stream)",
      "info" : "MethodDeclaration[27547-27674]:MethodDeclaration[28965-29092]"
    }, {
      "left" : "public final void formatInsert(Writer writer)",
      "right" : "public final void formatInsert(Writer writer)",
      "info" : "MethodDeclaration[27680-28044]:MethodDeclaration[29098-29462]"
    }, {
      "left" : "public final String formatInsert(Table<?> table, Field<?>... f)",
      "right" : "public final String formatInsert(Table<?> table, Field<?>... f)",
      "info" : "MethodDeclaration[28050-28259]:MethodDeclaration[29468-29677]"
    }, {
      "left" : "public final void formatInsert(OutputStream stream, Table<?> table, Field<?>... f)",
      "right" : "public final void formatInsert(OutputStream stream, Table<?> table, Field<?>... f)",
      "info" : "MethodDeclaration[28265-28433]:MethodDeclaration[29683-29851]"
    }, {
      "left" : "public final void formatInsert(Writer writer, Table<?> table, Field<?>... f)",
      "right" : "public final void formatInsert(Writer writer, Table<?> table, Field<?>... f)",
      "info" : "MethodDeclaration[28439-28925]:MethodDeclaration[29857-30343]"
    }, {
      "left" : "public final Document intoXML()",
      "right" : "public final Document intoXML()",
      "info" : "MethodDeclaration[28931-30819]:MethodDeclaration[30349-32237]"
    }, {
      "left" : "public final <H extends ContentHandler> H intoXML(H handler) throws SAXException",
      "right" : "public final <H extends ContentHandler> H intoXML(H handler) throws SAXException",
      "info" : "MethodDeclaration[30825-32669]:MethodDeclaration[32243-34087]"
    }, {
      "left" : "private final String escapeXML(String string)",
      "right" : "private final String escapeXML(String string)",
      "info" : "MethodDeclaration[32675-32904]:MethodDeclaration[34093-34322]"
    }, {
      "left" : "public final List<Map<String, Object>> intoMaps()",
      "right" : "public final List<Map<String, Object>> intoMaps()",
      "info" : "MethodDeclaration[32910-33165]:MethodDeclaration[34328-34583]"
    }, {
      "left" : "public final <K> Map<K, R> intoMap(Field<K> key)",
      "right" : "public final <K> Map<K, R> intoMap(Field<K> key)",
      "info" : "MethodDeclaration[33171-33297]:MethodDeclaration[34589-34715]"
    }, {
      "left" : "public final Map<?, R> intoMap(int keyFieldIndex)",
      "right" : "public final Map<?, R> intoMap(int keyFieldIndex)",
      "info" : "MethodDeclaration[33303-33414]:MethodDeclaration[34721-34832]"
    }, {
      "left" : "public final Map<?, R> intoMap(String keyFieldName)",
      "right" : "public final Map<?, R> intoMap(String keyFieldName)",
      "info" : "MethodDeclaration[33420-33538]:MethodDeclaration[34838-34956]"
    }, {
      "left" : "public final Map<?, R> intoMap(Name keyFieldName)",
      "right" : "public final Map<?, R> intoMap(Name keyFieldName)",
      "info" : "MethodDeclaration[33544-33660]:MethodDeclaration[34962-35078]"
    }, {
      "left" : "private final <K> Map<K, R> intoMap0(int keyFieldIndex)",
      "right" : "private final <K> Map<K, R> intoMap0(int keyFieldIndex)",
      "info" : "MethodDeclaration[33666-34024]:MethodDeclaration[35084-35442]"
    }, {
      "left" : "public final <K, V> Map<K, V> intoMap(Field<K> key, Field<V> value)",
      "right" : "public final <K, V> Map<K, V> intoMap(Field<K> key, Field<V> value)",
      "info" : "MethodDeclaration[34030-34267]:MethodDeclaration[35448-35685]"
    }, {
      "left" : "public final Map<?, ?> intoMap(int keyFieldIndex, int valueFieldIndex)",
      "right" : "public final Map<?, ?> intoMap(int keyFieldIndex, int valueFieldIndex)",
      "info" : "MethodDeclaration[34273-34422]:MethodDeclaration[35691-35840]"
    }, {
      "left" : "public final Map<?, ?> intoMap(String keyFieldName, String valueFieldName)",
      "right" : "public final Map<?, ?> intoMap(String keyFieldName, String valueFieldName)",
      "info" : "MethodDeclaration[34428-34592]:MethodDeclaration[35846-36010]"
    }, {
      "left" : "public final Map<?, ?> intoMap(Name keyFieldName, Name valueFieldName)",
      "right" : "public final Map<?, ?> intoMap(Name keyFieldName, Name valueFieldName)",
      "info" : "MethodDeclaration[34598-34758]:MethodDeclaration[36016-36176]"
    }, {
      "left" : "private final <K, V> Map<K, V> intoMap0(int kIndex, int vIndex)",
      "right" : "private final <K, V> Map<K, V> intoMap0(int kIndex, int vIndex)",
      "info" : "MethodDeclaration[34764-35137]:MethodDeclaration[36182-36555]"
    }, {
      "left" : "public final Map<Record, R> intoMap(int[] keyFieldIndexes)",
      "right" : "public final Map<Record, R> intoMap(int[] keyFieldIndexes)",
      "info" : "MethodDeclaration[35143-35272]:MethodDeclaration[36561-36690]"
    }, {
      "left" : "public final Map<Record, R> intoMap(String[] keyFieldNames)",
      "right" : "public final Map<Record, R> intoMap(String[] keyFieldNames)",
      "info" : "MethodDeclaration[35278-35406]:MethodDeclaration[36696-36824]"
    }, {
      "left" : "public final Map<Record, R> intoMap(Name[] keyFieldNames)",
      "right" : "public final Map<Record, R> intoMap(Name[] keyFieldNames)",
      "info" : "MethodDeclaration[35412-35538]:MethodDeclaration[36830-36956]"
    }, {
      "left" : "public final Map<Record, R> intoMap(Field<?>[] keys)",
      "right" : "public final Map<Record, R> intoMap(Field<?>[] keys)",
      "info" : "MethodDeclaration[35544-36171]:MethodDeclaration[36962-37589]"
    }, {
      "left" : "public final <E> Map<List<?>, E> intoMap(int[] keyFieldIndexes, Class<? extends E> type)",
      "right" : "public final <E> Map<List<?>, E> intoMap(int[] keyFieldIndexes, Class<? extends E> type)",
      "info" : "MethodDeclaration[36177-36342]:MethodDeclaration[37595-37760]"
    }, {
      "left" : "public final <E> Map<List<?>, E> intoMap(String[] keyFieldNames, Class<? extends E> type)",
      "right" : "public final <E> Map<List<?>, E> intoMap(String[] keyFieldNames, Class<? extends E> type)",
      "info" : "MethodDeclaration[36348-36512]:MethodDeclaration[37766-37930]"
    }, {
      "left" : "public final <E> Map<List<?>, E> intoMap(Name[] keyFieldNames, Class<? extends E> type)",
      "right" : "public final <E> Map<List<?>, E> intoMap(Name[] keyFieldNames, Class<? extends E> type)",
      "info" : "MethodDeclaration[36518-36680]:MethodDeclaration[37936-38098]"
    }, {
      "left" : "public final <E> Map<List<?>, E> intoMap(Field<?>[] keys, Class<? extends E> type)",
      "right" : "public final <E> Map<List<?>, E> intoMap(Field<?>[] keys, Class<? extends E> type)",
      "info" : "MethodDeclaration[36686-36892]:MethodDeclaration[38104-38310]"
    }, {
      "left" : "public final <E> Map<List<?>, E> intoMap(int[] keyFieldIndexes, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<List<?>, E> intoMap(int[] keyFieldIndexes, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[36898-37075]:MethodDeclaration[38316-38493]"
    }, {
      "left" : "public final <E> Map<List<?>, E> intoMap(String[] keyFieldNames, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<List<?>, E> intoMap(String[] keyFieldNames, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[37081-37257]:MethodDeclaration[38499-38675]"
    }, {
      "left" : "public final <E> Map<List<?>, E> intoMap(Name[] keyFieldNames, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<List<?>, E> intoMap(Name[] keyFieldNames, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[37263-37437]:MethodDeclaration[38681-38855]"
    }, {
      "left" : "public final <E> Map<List<?>, E> intoMap(Field<?>[] keys, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<List<?>, E> intoMap(Field<?>[] keys, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[37443-38134]:MethodDeclaration[38861-39552]"
    }, {
      "left" : "public final <S extends Record> Map<S, R> intoMap(Table<S> table)",
      "right" : "public final <S extends Record> Map<S, R> intoMap(Table<S> table)",
      "info" : "MethodDeclaration[38140-38555]:MethodDeclaration[39558-39973]"
    }, {
      "left" : "public final <E, S extends Record> Map<S, E> intoMap(Table<S> table, Class<? extends E> type)",
      "right" : "public final <E, S extends Record> Map<S, E> intoMap(Table<S> table, Class<? extends E> type)",
      "info" : "MethodDeclaration[38561-38779]:MethodDeclaration[39979-40197]"
    }, {
      "left" : "public final <E, S extends Record> Map<S, E> intoMap(Table<S> table, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E, S extends Record> Map<S, E> intoMap(Table<S> table, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[38785-39250]:MethodDeclaration[40203-40668]"
    }, {
      "left" : "public final <E> Map<?, E> intoMap(int keyFieldIndex, Class<? extends E> type)",
      "right" : "public final <E> Map<?, E> intoMap(int keyFieldIndex, Class<? extends E> type)",
      "info" : "MethodDeclaration[39256-39467]:MethodDeclaration[40674-40885]"
    }, {
      "left" : "public final <E> Map<?, E> intoMap(String keyFieldName, Class<? extends E> type)",
      "right" : "public final <E> Map<?, E> intoMap(String keyFieldName, Class<? extends E> type)",
      "info" : "MethodDeclaration[39473-39685]:MethodDeclaration[40891-41103]"
    }, {
      "left" : "public final <E> Map<?, E> intoMap(Name keyFieldName, Class<? extends E> type)",
      "right" : "public final <E> Map<?, E> intoMap(Name keyFieldName, Class<? extends E> type)",
      "info" : "MethodDeclaration[39691-39901]:MethodDeclaration[41109-41319]"
    }, {
      "left" : "public final <K, E> Map<K, E> intoMap(Field<K> key, Class<? extends E> type)",
      "right" : "public final <K, E> Map<K, E> intoMap(Field<K> key, Class<? extends E> type)",
      "info" : "MethodDeclaration[39907-40106]:MethodDeclaration[41325-41524]"
    }, {
      "left" : "public final <E> Map<?, E> intoMap(int keyFieldIndex, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<?, E> intoMap(int keyFieldIndex, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[40112-40270]:MethodDeclaration[41530-41688]"
    }, {
      "left" : "public final <E> Map<?, E> intoMap(String keyFieldName, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<?, E> intoMap(String keyFieldName, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[40276-40441]:MethodDeclaration[41694-41859]"
    }, {
      "left" : "public final <E> Map<?, E> intoMap(Name keyFieldName, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<?, E> intoMap(Name keyFieldName, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[40447-40610]:MethodDeclaration[41865-42028]"
    }, {
      "left" : "public final <K, E> Map<K, E> intoMap(Field<K> key, RecordMapper<? super R, E> mapper)",
      "right" : "public final <K, E> Map<K, E> intoMap(Field<K> key, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[40616-40788]:MethodDeclaration[42034-42206]"
    }, {
      "left" : "private final <K, E> Map<K, E> intoMap0(int keyFieldIndex, RecordMapper<? super R, E> mapper)",
      "right" : "private final <K, E> Map<K, E> intoMap0(int keyFieldIndex, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[40794-41202]:MethodDeclaration[42212-42620]"
    }, {
      "left" : "public final <K> Map<K, Result<R>> intoGroups(Field<K> key)",
      "right" : "public final <K> Map<K, Result<R>> intoGroups(Field<K> key)",
      "info" : "MethodDeclaration[41208-41348]:MethodDeclaration[42626-42766]"
    }, {
      "left" : "public final Map<?, Result<R>> intoGroups(int keyFieldIndex)",
      "right" : "public final Map<?, Result<R>> intoGroups(int keyFieldIndex)",
      "info" : "MethodDeclaration[41354-41479]:MethodDeclaration[42772-42897]"
    }, {
      "left" : "public final Map<?, Result<R>> intoGroups(String keyFieldName)",
      "right" : "public final Map<?, Result<R>> intoGroups(String keyFieldName)",
      "info" : "MethodDeclaration[41485-41617]:MethodDeclaration[42903-43035]"
    }, {
      "left" : "public final Map<?, Result<R>> intoGroups(Name keyFieldName)",
      "right" : "public final Map<?, Result<R>> intoGroups(Name keyFieldName)",
      "info" : "MethodDeclaration[41623-41753]:MethodDeclaration[43041-43171]"
    }, {
      "left" : "private final <K> Map<K, Result<R>> intoGroups0(int keyFieldIndex)",
      "right" : "private final <K> Map<K, Result<R>> intoGroups0(int keyFieldIndex)",
      "info" : "MethodDeclaration[41759-42252]:MethodDeclaration[43177-43670]"
    }, {
      "left" : "public final <K, V> Map<K, List<V>> intoGroups(Field<K> key, Field<V> value)",
      "right" : "public final <K, V> Map<K, List<V>> intoGroups(Field<K> key, Field<V> value)",
      "info" : "MethodDeclaration[42258-42507]:MethodDeclaration[43676-43925]"
    }, {
      "left" : "public final Map<?, List<?>> intoGroups(int keyFieldIndex, int valueFieldIndex)",
      "right" : "public final Map<?, List<?>> intoGroups(int keyFieldIndex, int valueFieldIndex)",
      "info" : "MethodDeclaration[42513-42680]:MethodDeclaration[43931-44098]"
    }, {
      "left" : "public final Map<?, List<?>> intoGroups(String keyFieldName, String valueFieldName)",
      "right" : "public final Map<?, List<?>> intoGroups(String keyFieldName, String valueFieldName)",
      "info" : "MethodDeclaration[42686-42868]:MethodDeclaration[44104-44286]"
    }, {
      "left" : "public final Map<?, List<?>> intoGroups(Name keyFieldName, Name valueFieldName)",
      "right" : "public final Map<?, List<?>> intoGroups(Name keyFieldName, Name valueFieldName)",
      "info" : "MethodDeclaration[42874-43052]:MethodDeclaration[44292-44470]"
    }, {
      "left" : "private final <K, V> Map<K, List<V>> intoGroups0(int kIndex, int vIndex)",
      "right" : "private final <K, V> Map<K, List<V>> intoGroups0(int kIndex, int vIndex)",
      "info" : "MethodDeclaration[43058-43558]:MethodDeclaration[44476-44976]"
    }, {
      "left" : "public final <E> Map<?, List<E>> intoGroups(int keyFieldIndex, Class<? extends E> type)",
      "right" : "public final <E> Map<?, List<E>> intoGroups(int keyFieldIndex, Class<? extends E> type)",
      "info" : "MethodDeclaration[43564-43787]:MethodDeclaration[44982-45205]"
    }, {
      "left" : "public final <E> Map<?, List<E>> intoGroups(String keyFieldName, Class<? extends E> type)",
      "right" : "public final <E> Map<?, List<E>> intoGroups(String keyFieldName, Class<? extends E> type)",
      "info" : "MethodDeclaration[43793-44017]:MethodDeclaration[45211-45435]"
    }, {
      "left" : "public final <E> Map<?, List<E>> intoGroups(Name keyFieldName, Class<? extends E> type)",
      "right" : "public final <E> Map<?, List<E>> intoGroups(Name keyFieldName, Class<? extends E> type)",
      "info" : "MethodDeclaration[44023-44245]:MethodDeclaration[45441-45663]"
    }, {
      "left" : "public final <K, E> Map<K, List<E>> intoGroups(Field<K> key, Class<? extends E> type)",
      "right" : "public final <K, E> Map<K, List<E>> intoGroups(Field<K> key, Class<? extends E> type)",
      "info" : "MethodDeclaration[44251-44462]:MethodDeclaration[45669-45880]"
    }, {
      "left" : "public final <K, E> Map<K, List<E>> intoGroups(Field<K> key, RecordMapper<? super R, E> mapper)",
      "right" : "public final <K, E> Map<K, List<E>> intoGroups(Field<K> key, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[44468-44652]:MethodDeclaration[45886-46070]"
    }, {
      "left" : "public final <E> Map<?, List<E>> intoGroups(int keyFieldIndex, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<?, List<E>> intoGroups(int keyFieldIndex, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[44658-44828]:MethodDeclaration[46076-46246]"
    }, {
      "left" : "public final <E> Map<?, List<E>> intoGroups(String keyFieldName, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<?, List<E>> intoGroups(String keyFieldName, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[44834-45011]:MethodDeclaration[46252-46429]"
    }, {
      "left" : "public final <E> Map<?, List<E>> intoGroups(Name keyFieldName, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<?, List<E>> intoGroups(Name keyFieldName, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[45017-45192]:MethodDeclaration[46435-46610]"
    }, {
      "left" : "private final <K, E> Map<K, List<E>> intoGroups0(int keyFieldIndex, RecordMapper<? super R, E> mapper)",
      "right" : "private final <K, E> Map<K, List<E>> intoGroups0(int keyFieldIndex, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[45198-45710]:MethodDeclaration[46616-47128]"
    }, {
      "left" : "public final Map<Record, Result<R>> intoGroups(int[] keyFieldIndexes)",
      "right" : "public final Map<Record, Result<R>> intoGroups(int[] keyFieldIndexes)",
      "info" : "MethodDeclaration[45716-45859]:MethodDeclaration[47134-47277]"
    }, {
      "left" : "public final Map<Record, Result<R>> intoGroups(String[] keyFieldNames)",
      "right" : "public final Map<Record, Result<R>> intoGroups(String[] keyFieldNames)",
      "info" : "MethodDeclaration[45865-46007]:MethodDeclaration[47283-47425]"
    }, {
      "left" : "public final Map<Record, Result<R>> intoGroups(Name[] keyFieldNames)",
      "right" : "public final Map<Record, Result<R>> intoGroups(Name[] keyFieldNames)",
      "info" : "MethodDeclaration[46013-46153]:MethodDeclaration[47431-47571]"
    }, {
      "left" : "public final Map<Record, Result<R>> intoGroups(Field<?>[] keys)",
      "right" : "public final Map<Record, Result<R>> intoGroups(Field<?>[] keys)",
      "info" : "MethodDeclaration[46159-46863]:MethodDeclaration[47577-48281]"
    }, {
      "left" : "public <E> Map<Record, List<E>> intoGroups(int[] keyFieldIndexes, Class<? extends E> type)",
      "right" : "public <E> Map<Record, List<E>> intoGroups(int[] keyFieldIndexes, Class<? extends E> type)",
      "info" : "MethodDeclaration[46869-47097]:MethodDeclaration[48287-48515]"
    }, {
      "left" : "public <E> Map<Record, List<E>> intoGroups(String[] keyFieldNames, Class<? extends E> type)",
      "right" : "public <E> Map<Record, List<E>> intoGroups(String[] keyFieldNames, Class<? extends E> type)",
      "info" : "MethodDeclaration[47103-47330]:MethodDeclaration[48521-48748]"
    }, {
      "left" : "public <E> Map<Record, List<E>> intoGroups(Name[] keyFieldNames, Class<? extends E> type)",
      "right" : "public <E> Map<Record, List<E>> intoGroups(Name[] keyFieldNames, Class<? extends E> type)",
      "info" : "MethodDeclaration[47336-47561]:MethodDeclaration[48754-48979]"
    }, {
      "left" : "public final <E> Map<Record, List<E>> intoGroups(Field<?>[] keys, Class<? extends E> type)",
      "right" : "public final <E> Map<Record, List<E>> intoGroups(Field<?>[] keys, Class<? extends E> type)",
      "info" : "MethodDeclaration[47567-47784]:MethodDeclaration[48985-49202]"
    }, {
      "left" : "public final <E> Map<Record, List<E>> intoGroups(int[] keyFieldIndexes, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<Record, List<E>> intoGroups(int[] keyFieldIndexes, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[47790-47978]:MethodDeclaration[49208-49396]"
    }, {
      "left" : "public final <E> Map<Record, List<E>> intoGroups(String[] keyFieldNames, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<Record, List<E>> intoGroups(String[] keyFieldNames, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[47984-48171]:MethodDeclaration[49402-49589]"
    }, {
      "left" : "public final <E> Map<Record, List<E>> intoGroups(Name[] keyFieldNames, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<Record, List<E>> intoGroups(Name[] keyFieldNames, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[48177-48362]:MethodDeclaration[49595-49780]"
    }, {
      "left" : "public final <E> Map<Record, List<E>> intoGroups(Field<?>[] keys, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> Map<Record, List<E>> intoGroups(Field<?>[] keys, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[48368-49076]:MethodDeclaration[49786-50494]"
    }, {
      "left" : "public final <S extends Record> Map<S, Result<R>> intoGroups(Table<S> table)",
      "right" : "public final <S extends Record> Map<S, Result<R>> intoGroups(Table<S> table)",
      "info" : "MethodDeclaration[49082-49590]:MethodDeclaration[50500-51008]"
    }, {
      "left" : "public final <E, S extends Record> Map<S, List<E>> intoGroups(Table<S> table, Class<? extends E> type)",
      "right" : "public final <E, S extends Record> Map<S, List<E>> intoGroups(Table<S> table, Class<? extends E> type)",
      "info" : "MethodDeclaration[49596-49826]:MethodDeclaration[51014-51244]"
    }, {
      "left" : "public final <E, S extends Record> Map<S, List<E>> intoGroups(Table<S> table, RecordMapper<? super R, E> mapper)",
      "right" : "public final <E, S extends Record> Map<S, List<E>> intoGroups(Table<S> table, RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[49832-50343]:MethodDeclaration[51250-51761]"
    }, {
      "left" : "public final Object[][] intoArray()",
      "right" : "public final Object[][] intoArray()",
      "info" : "MethodDeclaration[50349-50451]:MethodDeclaration[51767-51869]"
    }, {
      "left" : "public final Object[][] intoArrays()",
      "right" : "public final Object[][] intoArrays()",
      "info" : "MethodDeclaration[50457-50707]:MethodDeclaration[51875-52125]"
    }, {
      "left" : "public final Object[] intoArray(int fieldIndex)",
      "right" : "public final Object[] intoArray(int fieldIndex)",
      "info" : "MethodDeclaration[50713-50967]:MethodDeclaration[52131-52385]"
    }, {
      "left" : "public final <T> T[] intoArray(int fieldIndex, Class<? extends T> type)",
      "right" : "public final <T> T[] intoArray(int fieldIndex, Class<? extends T> type)",
      "info" : "MethodDeclaration[50973-51138]:MethodDeclaration[52391-52556]"
    }, {
      "left" : "public final <U> U[] intoArray(int fieldIndex, Converter<?, U> converter)",
      "right" : "public final <U> U[] intoArray(int fieldIndex, Converter<?, U> converter)",
      "info" : "MethodDeclaration[51144-51310]:MethodDeclaration[52562-52728]"
    }, {
      "left" : "public final Object[] intoArray(String fieldName)",
      "right" : "public final Object[] intoArray(String fieldName)",
      "info" : "MethodDeclaration[51316-51562]:MethodDeclaration[52734-52980]"
    }, {
      "left" : "public final <T> T[] intoArray(String fieldName, Class<? extends T> type)",
      "right" : "public final <T> T[] intoArray(String fieldName, Class<? extends T> type)",
      "info" : "MethodDeclaration[51568-51734]:MethodDeclaration[52986-53152]"
    }, {
      "left" : "public final <U> U[] intoArray(String fieldName, Converter<?, U> converter)",
      "right" : "public final <U> U[] intoArray(String fieldName, Converter<?, U> converter)",
      "info" : "MethodDeclaration[51740-51907]:MethodDeclaration[53158-53325]"
    }, {
      "left" : "public final Object[] intoArray(Name fieldName)",
      "right" : "public final Object[] intoArray(Name fieldName)",
      "info" : "MethodDeclaration[51913-52157]:MethodDeclaration[53331-53575]"
    }, {
      "left" : "public final <T> T[] intoArray(Name fieldName, Class<? extends T> type)",
      "right" : "public final <T> T[] intoArray(Name fieldName, Class<? extends T> type)",
      "info" : "MethodDeclaration[52163-52327]:MethodDeclaration[53581-53745]"
    }, {
      "left" : "public final <U> U[] intoArray(Name fieldName, Converter<?, U> converter)",
      "right" : "public final <U> U[] intoArray(Name fieldName, Converter<?, U> converter)",
      "info" : "MethodDeclaration[52333-52498]:MethodDeclaration[53751-53916]"
    }, {
      "left" : "public final <T> T[] intoArray(Field<T> field)",
      "right" : "public final <T> T[] intoArray(Field<T> field)",
      "info" : "MethodDeclaration[52504-52658]:MethodDeclaration[53922-54076]"
    }, {
      "left" : "public final <T> T[] intoArray(Field<?> field, Class<? extends T> type)",
      "right" : "public final <T> T[] intoArray(Field<?> field, Class<? extends T> type)",
      "info" : "MethodDeclaration[52664-52824]:MethodDeclaration[54082-54242]"
    }, {
      "left" : "public final <T, U> U[] intoArray(Field<T> field, Converter<? super T, U> converter)",
      "right" : "public final <T, U> U[] intoArray(Field<T> field, Converter<? super T, U> converter)",
      "info" : "MethodDeclaration[52830-53002]:MethodDeclaration[54248-54420]"
    }, {
      "left" : "public final Set<?> intoSet(int fieldIndex)",
      "right" : "public final Set<?> intoSet(int fieldIndex)",
      "info" : "MethodDeclaration[53008-53138]:MethodDeclaration[54426-54556]"
    }, {
      "left" : "public final <T> Set<T> intoSet(int fieldIndex, Class<? extends T> type)",
      "right" : "public final <T> Set<T> intoSet(int fieldIndex, Class<? extends T> type)",
      "info" : "MethodDeclaration[53144-53304]:MethodDeclaration[54562-54722]"
    }, {
      "left" : "public final <U> Set<U> intoSet(int fieldIndex, Converter<?, U> converter)",
      "right" : "public final <U> Set<U> intoSet(int fieldIndex, Converter<?, U> converter)",
      "info" : "MethodDeclaration[53310-53477]:MethodDeclaration[54728-54895]"
    }, {
      "left" : "public final Set<?> intoSet(String fieldName)",
      "right" : "public final Set<?> intoSet(String fieldName)",
      "info" : "MethodDeclaration[53483-53614]:MethodDeclaration[54901-55032]"
    }, {
      "left" : "public final <T> Set<T> intoSet(String fieldName, Class<? extends T> type)",
      "right" : "public final <T> Set<T> intoSet(String fieldName, Class<? extends T> type)",
      "info" : "MethodDeclaration[53620-53781]:MethodDeclaration[55038-55199]"
    }, {
      "left" : "public final <U> Set<U> intoSet(String fieldName, Converter<?, U> converter)",
      "right" : "public final <U> Set<U> intoSet(String fieldName, Converter<?, U> converter)",
      "info" : "MethodDeclaration[53787-53955]:MethodDeclaration[55205-55373]"
    }, {
      "left" : "public final Set<?> intoSet(Name fieldName)",
      "right" : "public final Set<?> intoSet(Name fieldName)",
      "info" : "MethodDeclaration[53961-54090]:MethodDeclaration[55379-55508]"
    }, {
      "left" : "public final <T> Set<T> intoSet(Name fieldName, Class<? extends T> type)",
      "right" : "public final <T> Set<T> intoSet(Name fieldName, Class<? extends T> type)",
      "info" : "MethodDeclaration[54096-54255]:MethodDeclaration[55514-55673]"
    }, {
      "left" : "public final <U> Set<U> intoSet(Name fieldName, Converter<?, U> converter)",
      "right" : "public final <U> Set<U> intoSet(Name fieldName, Converter<?, U> converter)",
      "info" : "MethodDeclaration[54261-54427]:MethodDeclaration[55679-55845]"
    }, {
      "left" : "public final <T> Set<T> intoSet(Field<T> field)",
      "right" : "public final <T> Set<T> intoSet(Field<T> field)",
      "info" : "MethodDeclaration[54433-54557]:MethodDeclaration[55851-55975]"
    }, {
      "left" : "public final <T> Set<T> intoSet(Field<?> field, Class<? extends T> type)",
      "right" : "public final <T> Set<T> intoSet(Field<?> field, Class<? extends T> type)",
      "info" : "MethodDeclaration[54563-54718]:MethodDeclaration[55981-56136]"
    }, {
      "left" : "public final <T, U> Set<U> intoSet(Field<T> field, Converter<? super T, U> converter)",
      "right" : "public final <T, U> Set<U> intoSet(Field<T> field, Converter<? super T, U> converter)",
      "info" : "MethodDeclaration[54724-54897]:MethodDeclaration[56142-56315]"
    }, {
      "left" : "public final Result<Record> into(Field<?>... f)",
      "right" : "public final Result<Record> into(Field<?>... f)",
      "info" : "MethodDeclaration[54903-55158]:MethodDeclaration[56321-56576]"
    }, {
      "left" : "public final <T1> Result<Record1<T1>> into(Field<T1> field1)",
      "right" : "public final <T1> Result<Record1<T1>> into(Field<T1> field1)",
      "info" : "MethodDeclaration[55205-55341]:MethodDeclaration[56623-56759]"
    }, {
      "left" : "public final <T1, T2> Result<Record2<T1, T2>> into(Field<T1> field1, Field<T2> field2)",
      "right" : "public final <T1, T2> Result<Record2<T1, T2>> into(Field<T1> field1, Field<T2> field2)",
      "info" : "MethodDeclaration[55347-55517]:MethodDeclaration[56765-56935]"
    }, {
      "left" : "public final <T1, T2, T3> Result<Record3<T1, T2, T3>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3)",
      "right" : "public final <T1, T2, T3> Result<Record3<T1, T2, T3>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3)",
      "info" : "MethodDeclaration[55523-55727]:MethodDeclaration[56941-57145]"
    }, {
      "left" : "public final <T1, T2, T3, T4> Result<Record4<T1, T2, T3, T4>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4)",
      "right" : "public final <T1, T2, T3, T4> Result<Record4<T1, T2, T3, T4>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4)",
      "info" : "MethodDeclaration[55733-55971]:MethodDeclaration[57151-57389]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5> Result<Record5<T1, T2, T3, T4, T5>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5)",
      "right" : "public final <T1, T2, T3, T4, T5> Result<Record5<T1, T2, T3, T4, T5>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5)",
      "info" : "MethodDeclaration[55977-56249]:MethodDeclaration[57395-57667]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6> Result<Record6<T1, T2, T3, T4, T5, T6>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6)",
      "right" : "public final <T1, T2, T3, T4, T5, T6> Result<Record6<T1, T2, T3, T4, T5, T6>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6)",
      "info" : "MethodDeclaration[56255-56561]:MethodDeclaration[57673-57979]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7> Result<Record7<T1, T2, T3, T4, T5, T6, T7>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7> Result<Record7<T1, T2, T3, T4, T5, T6, T7>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7)",
      "info" : "MethodDeclaration[56567-56907]:MethodDeclaration[57985-58325]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8> Result<Record8<T1, T2, T3, T4, T5, T6, T7, T8>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8> Result<Record8<T1, T2, T3, T4, T5, T6, T7, T8>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8)",
      "info" : "MethodDeclaration[56913-57287]:MethodDeclaration[58331-58705]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9> Result<Record9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9> Result<Record9<T1, T2, T3, T4, T5, T6, T7, T8, T9>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9)",
      "info" : "MethodDeclaration[57293-57701]:MethodDeclaration[58711-59119]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Result<Record10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Result<Record10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10)",
      "info" : "MethodDeclaration[57707-58155]:MethodDeclaration[59125-59573]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Result<Record11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Result<Record11<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11)",
      "info" : "MethodDeclaration[58161-58648]:MethodDeclaration[59579-60066]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Result<Record12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Result<Record12<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12)",
      "info" : "MethodDeclaration[58654-59180]:MethodDeclaration[60072-60598]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Result<Record13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Result<Record13<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13)",
      "info" : "MethodDeclaration[59186-59751]:MethodDeclaration[60604-61169]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Result<Record14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Result<Record14<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14)",
      "info" : "MethodDeclaration[59757-60361]:MethodDeclaration[61175-61779]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Result<Record15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Result<Record15<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15)",
      "info" : "MethodDeclaration[60367-61010]:MethodDeclaration[61785-62428]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Result<Record16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> Result<Record16<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16)",
      "info" : "MethodDeclaration[61016-61698]:MethodDeclaration[62434-63116]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Result<Record17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> Result<Record17<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17)",
      "info" : "MethodDeclaration[61704-62425]:MethodDeclaration[63122-63843]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Result<Record18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> Result<Record18<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18)",
      "info" : "MethodDeclaration[62431-63191]:MethodDeclaration[63849-64609]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Result<Record19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18, Field<T19> field19)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> Result<Record19<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18, Field<T19> field19)",
      "info" : "MethodDeclaration[63197-63996]:MethodDeclaration[64615-65414]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Result<Record20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18, Field<T19> field19, Field<T20> field20)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> Result<Record20<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18, Field<T19> field19, Field<T20> field20)",
      "info" : "MethodDeclaration[64002-64840]:MethodDeclaration[65420-66258]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> Result<Record21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18, Field<T19> field19, Field<T20> field20, Field<T21> field21)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> Result<Record21<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18, Field<T19> field19, Field<T20> field20, Field<T21> field21)",
      "info" : "MethodDeclaration[64846-65723]:MethodDeclaration[66264-67141]"
    }, {
      "left" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> Result<Record22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18, Field<T19> field19, Field<T20> field20, Field<T21> field21, Field<T22> field22)",
      "right" : "public final <T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> Result<Record22<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>> into(Field<T1> field1, Field<T2> field2, Field<T3> field3, Field<T4> field4, Field<T5> field5, Field<T6> field6, Field<T7> field7, Field<T8> field8, Field<T9> field9, Field<T10> field10, Field<T11> field11, Field<T12> field12, Field<T13> field13, Field<T14> field14, Field<T15> field15, Field<T16> field16, Field<T17> field17, Field<T18> field18, Field<T19> field19, Field<T20> field20, Field<T21> field21, Field<T22> field22)",
      "info" : "MethodDeclaration[65729-66645]:MethodDeclaration[67147-68063]"
    }, {
      "left" : "public final <E> List<E> into(Class<? extends E> type)",
      "right" : "public final <E> List<E> into(Class<? extends E> type)",
      "info" : "MethodDeclaration[66686-67026]:MethodDeclaration[68104-68444]"
    }, {
      "left" : "public final <Z extends Record> Result<Z> into(Table<Z> table)",
      "right" : "public final <Z extends Record> Result<Z> into(Table<Z> table)",
      "info" : "MethodDeclaration[67032-67300]:MethodDeclaration[68450-68718]"
    }, {
      "left" : "public final <H extends RecordHandler<? super R>> H into(H handler)",
      "right" : "public final <H extends RecordHandler<? super R>> H into(H handler)",
      "info" : "MethodDeclaration[67306-67496]:MethodDeclaration[68724-68914]"
    }, {
      "left" : "public final ResultSet intoResultSet()",
      "right" : "public final ResultSet intoResultSet()",
      "info" : "MethodDeclaration[67502-67602]:MethodDeclaration[68920-69020]"
    }, {
      "left" : "public final <E> List<E> map(RecordMapper<? super R, E> mapper)",
      "right" : "public final <E> List<E> map(RecordMapper<? super R, E> mapper)",
      "info" : "MethodDeclaration[67608-67849]:MethodDeclaration[69026-69267]"
    }, {
      "left" : "public final <T extends Comparable<? super T>> Result<R> sortAsc(Field<T> field)",
      "right" : "public final <T extends Comparable<? super T>> Result<R> sortAsc(Field<T> field)",
      "info" : "MethodDeclaration[67855-68016]:MethodDeclaration[69273-69434]"
    }, {
      "left" : "public final Result<R> sortAsc(int fieldIndex)",
      "right" : "public final Result<R> sortAsc(int fieldIndex)",
      "info" : "MethodDeclaration[68022-68151]:MethodDeclaration[69440-69569]"
    }, {
      "left" : "public final Result<R> sortAsc(String fieldName)",
      "right" : "public final Result<R> sortAsc(String fieldName)",
      "info" : "MethodDeclaration[68157-68287]:MethodDeclaration[69575-69705]"
    }, {
      "left" : "public final Result<R> sortAsc(Name fieldName)",
      "right" : "public final Result<R> sortAsc(Name fieldName)",
      "info" : "MethodDeclaration[68293-68421]:MethodDeclaration[69711-69839]"
    }, {
      "left" : "public final <T> Result<R> sortAsc(Field<T> field, Comparator<? super T> comparator)",
      "right" : "public final <T> Result<R> sortAsc(Field<T> field, Comparator<? super T> comparator)",
      "info" : "MethodDeclaration[68427-68602]:MethodDeclaration[69845-70020]"
    }, {
      "left" : "public final Result<R> sortAsc(int fieldIndex, Comparator<?> comparator)",
      "right" : "public final Result<R> sortAsc(int fieldIndex, Comparator<?> comparator)",
      "info" : "MethodDeclaration[68608-68772]:MethodDeclaration[70026-70190]"
    }, {
      "left" : "public final Result<R> sortAsc(String fieldName, Comparator<?> comparator)",
      "right" : "public final Result<R> sortAsc(String fieldName, Comparator<?> comparator)",
      "info" : "MethodDeclaration[68778-68947]:MethodDeclaration[70196-70365]"
    }, {
      "left" : "public final Result<R> sortAsc(Name fieldName, Comparator<?> comparator)",
      "right" : "public final Result<R> sortAsc(Name fieldName, Comparator<?> comparator)",
      "info" : "MethodDeclaration[68953-69120]:MethodDeclaration[70371-70538]"
    }, {
      "left" : "public final Result<R> sortAsc(Comparator<? super R> comparator)",
      "right" : "public final Result<R> sortAsc(Comparator<? super R> comparator)",
      "info" : "MethodDeclaration[69126-69277]:MethodDeclaration[70544-70695]"
    }, {
      "left" : "public final <T extends Comparable<? super T>> Result<R> sortDesc(Field<T> field)",
      "right" : "public final <T extends Comparable<? super T>> Result<R> sortDesc(Field<T> field)",
      "info" : "MethodDeclaration[69283-69471]:MethodDeclaration[70701-70889]"
    }, {
      "left" : "public final Result<R> sortDesc(int fieldIndex)",
      "right" : "public final Result<R> sortDesc(int fieldIndex)",
      "info" : "MethodDeclaration[69477-69633]:MethodDeclaration[70895-71051]"
    }, {
      "left" : "public final Result<R> sortDesc(String fieldName)",
      "right" : "public final Result<R> sortDesc(String fieldName)",
      "info" : "MethodDeclaration[69639-69796]:MethodDeclaration[71057-71214]"
    }, {
      "left" : "public final Result<R> sortDesc(Name fieldName)",
      "right" : "public final Result<R> sortDesc(Name fieldName)",
      "info" : "MethodDeclaration[69802-69957]:MethodDeclaration[71220-71375]"
    }, {
      "left" : "public final <T> Result<R> sortDesc(Field<T> field, Comparator<? super T> comparator)",
      "right" : "public final <T> Result<R> sortDesc(Field<T> field, Comparator<? super T> comparator)",
      "info" : "MethodDeclaration[69963-70139]:MethodDeclaration[71381-71557]"
    }, {
      "left" : "public final Result<R> sortDesc(int fieldIndex, Comparator<?> comparator)",
      "right" : "public final Result<R> sortDesc(int fieldIndex, Comparator<?> comparator)",
      "info" : "MethodDeclaration[70145-70314]:MethodDeclaration[71563-71732]"
    }, {
      "left" : "public final Result<R> sortDesc(String fieldName, Comparator<?> comparator)",
      "right" : "public final Result<R> sortDesc(String fieldName, Comparator<?> comparator)",
      "info" : "MethodDeclaration[70320-70490]:MethodDeclaration[71738-71908]"
    }, {
      "left" : "public final Result<R> sortDesc(Name fieldName, Comparator<?> comparator)",
      "right" : "public final Result<R> sortDesc(Name fieldName, Comparator<?> comparator)",
      "info" : "MethodDeclaration[70496-70664]:MethodDeclaration[71914-72082]"
    }, {
      "left" : "public final Result<R> sortDesc(Comparator<? super R> comparator)",
      "right" : "public final Result<R> sortDesc(Comparator<? super R> comparator)",
      "info" : "MethodDeclaration[70670-70819]:MethodDeclaration[72088-72237]"
    }, {
      "left" : "public final Result<R> intern(Field<?>... f)",
      "right" : "public final Result<R> intern(Field<?>... f)",
      "info" : "MethodDeclaration[70825-70935]:MethodDeclaration[72243-72353]"
    }, {
      "left" : "public final Result<R> intern(int... fieldIndexes)",
      "right" : "public final Result<R> intern(int... fieldIndexes)",
      "info" : "MethodDeclaration[70941-71306]:MethodDeclaration[72359-72724]"
    }, {
      "left" : "public final Result<R> intern(String... fieldNames)",
      "right" : "public final Result<R> intern(String... fieldNames)",
      "info" : "MethodDeclaration[71312-71438]:MethodDeclaration[72730-72856]"
    }, {
      "left" : "public final Result<R> intern(Name... fieldNames)",
      "right" : "public final Result<R> intern(Name... fieldNames)",
      "info" : "MethodDeclaration[71444-71568]:MethodDeclaration[72862-72986]"
    }, {
      "left" : "RecordComparator",
      "right" : "RecordComparator",
      "info" : "TypeDeclaration[71574-72210]:TypeDeclaration[72992-73628]"
    }, {
      "left" : "private final Comparator<? super T> comparator;",
      "right" : "private final Comparator<? super T> comparator;",
      "info" : "FieldDeclaration[71760-71807]:FieldDeclaration[73178-73225]"
    }, {
      "left" : "private final int fieldIndex;",
      "right" : "private final int fieldIndex;",
      "info" : "FieldDeclaration[71816-71845]:FieldDeclaration[73234-73263]"
    }, {
      "left" : "RecordComparator(int fieldIndex, Comparator<? super T> comparator)",
      "right" : "RecordComparator(int fieldIndex, Comparator<? super T> comparator)",
      "info" : "MethodDeclaration[71855-72017]:MethodDeclaration[73273-73435]"
    }, {
      "left" : "public int compare(R record1, R record2)",
      "right" : "public int compare(R record1, R record2)",
      "info" : "MethodDeclaration[72027-72204]:MethodDeclaration[73445-73622]"
    }, {
      "left" : "NaturalComparator",
      "right" : "NaturalComparator",
      "info" : "TypeDeclaration[72216-72706]:TypeDeclaration[73634-74124]"
    }, {
      "left" : "public int compare(T o1, T o2)",
      "right" : "public int compare(T o1, T o2)",
      "info" : "MethodDeclaration[72368-72700]:MethodDeclaration[73786-74118]"
    }, {
      "left" : "public final <O extends UpdatableRecord<O>> Result<O> fetchParents(ForeignKey<R, O> key)",
      "right" : "public final <O extends UpdatableRecord<O>> Result<O> fetchParents(ForeignKey<R, O> key)",
      "info" : "MethodDeclaration[72918-73067]:MethodDeclaration[74336-74485]"
    }, {
      "left" : "public final <O extends TableRecord<O>> Result<O> fetchChildren(ForeignKey<O, R> key)",
      "right" : "public final <O extends TableRecord<O>> Result<O> fetchChildren(ForeignKey<O, R> key)",
      "info" : "MethodDeclaration[73073-73220]:MethodDeclaration[74491-74638]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[73411-73482]:MethodDeclaration[74829-74900]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[73488-73566]:MethodDeclaration[74906-74984]"
    }, {
      "left" : "public boolean equals(Object obj)",
      "right" : "public boolean equals(Object obj)",
      "info" : "MethodDeclaration[73572-73869]:MethodDeclaration[74990-75287]"
    }, {
      "left" : "public final int size()",
      "right" : "public final int size()",
      "info" : "MethodDeclaration[74059-74135]:MethodDeclaration[75477-75553]"
    }, {
      "left" : "public final boolean contains(Object o)",
      "right" : "public final boolean contains(Object o)",
      "info" : "MethodDeclaration[74141-74238]:MethodDeclaration[75559-75656]"
    }, {
      "left" : "public final Object[] toArray()",
      "right" : "public final Object[] toArray()",
      "info" : "MethodDeclaration[74244-74331]:MethodDeclaration[75662-75749]"
    }, {
      "left" : "public final <T> T[] toArray(T[] a)",
      "right" : "public final <T> T[] toArray(T[] a)",
      "info" : "MethodDeclaration[74337-74429]:MethodDeclaration[75755-75847]"
    }, {
      "left" : "public final boolean add(R e)",
      "right" : "public final boolean add(R e)",
      "info" : "MethodDeclaration[74435-74517]:MethodDeclaration[75853-75935]"
    }, {
      "left" : "public final boolean remove(Object o)",
      "right" : "public final boolean remove(Object o)",
      "info" : "MethodDeclaration[74523-74616]:MethodDeclaration[75941-76034]"
    }, {
      "left" : "public final boolean containsAll(Collection<?> c)",
      "right" : "public final boolean containsAll(Collection<?> c)",
      "info" : "MethodDeclaration[74622-74732]:MethodDeclaration[76040-76150]"
    }, {
      "left" : "public final boolean addAll(Collection<? extends R> c)",
      "right" : "public final boolean addAll(Collection<? extends R> c)",
      "info" : "MethodDeclaration[74738-74848]:MethodDeclaration[76156-76266]"
    }, {
      "left" : "public final boolean addAll(int index, Collection<? extends R> c)",
      "right" : "public final boolean addAll(int index, Collection<? extends R> c)",
      "info" : "MethodDeclaration[74854-74982]:MethodDeclaration[76272-76400]"
    }, {
      "left" : "public final boolean removeAll(Collection<?> c)",
      "right" : "public final boolean removeAll(Collection<?> c)",
      "info" : "MethodDeclaration[74988-75094]:MethodDeclaration[76406-76512]"
    }, {
      "left" : "public final boolean retainAll(Collection<?> c)",
      "right" : "public final boolean retainAll(Collection<?> c)",
      "info" : "MethodDeclaration[75100-75206]:MethodDeclaration[76518-76624]"
    }, {
      "left" : "public final void clear()",
      "right" : "public final void clear()",
      "info" : "MethodDeclaration[75212-75284]:MethodDeclaration[76630-76702]"
    }, {
      "left" : "public final R get(int index)",
      "right" : "public final R get(int index)",
      "info" : "MethodDeclaration[75290-75376]:MethodDeclaration[76708-76794]"
    }, {
      "left" : "public final R set(int index, R element)",
      "right" : "public final R set(int index, R element)",
      "info" : "MethodDeclaration[75382-75488]:MethodDeclaration[76800-76906]"
    }, {
      "left" : "public final void add(int index, R element)",
      "right" : "public final void add(int index, R element)",
      "info" : "MethodDeclaration[75494-75596]:MethodDeclaration[76912-77014]"
    }, {
      "left" : "public final R remove(int index)",
      "right" : "public final R remove(int index)",
      "info" : "MethodDeclaration[75602-75694]:MethodDeclaration[77020-77112]"
    }, {
      "left" : "public final int indexOf(Object o)",
      "right" : "public final int indexOf(Object o)",
      "info" : "MethodDeclaration[75700-75791]:MethodDeclaration[77118-77209]"
    }, {
      "left" : "public final int lastIndexOf(Object o)",
      "right" : "public final int lastIndexOf(Object o)",
      "info" : "MethodDeclaration[75797-75896]:MethodDeclaration[77215-77314]"
    }, {
      "left" : "public final Iterator<R> iterator()",
      "right" : "public final Iterator<R> iterator()",
      "info" : "MethodDeclaration[75902-75994]:MethodDeclaration[77320-77412]"
    }, {
      "left" : "public final ListIterator<R> listIterator()",
      "right" : "public final ListIterator<R> listIterator()",
      "info" : "MethodDeclaration[76000-76104]:MethodDeclaration[77418-77522]"
    }, {
      "left" : "public final ListIterator<R> listIterator(int index)",
      "right" : "public final ListIterator<R> listIterator(int index)",
      "info" : "MethodDeclaration[76110-76228]:MethodDeclaration[77528-77646]"
    }, {
      "left" : "public final List<R> subList(int fromIndex, int toIndex)",
      "right" : "public final List<R> subList(int fromIndex, int toIndex)",
      "info" : "MethodDeclaration[76234-76364]:MethodDeclaration[77652-77782]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4156-4215]:Block[4156-4215]"
    }, {
      "left" : "this(configuration, new Fields<R>(fields));",
      "right" : "this(configuration, new Fields<R>(fields));",
      "info" : "ConstructorInvocation[4166-4209]:ConstructorInvocation[4166-4209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4281-4340]:Block[4281-4340]"
    }, {
      "left" : "this(configuration, new Fields<R>(fields));",
      "right" : "this(configuration, new Fields<R>(fields));",
      "info" : "ConstructorInvocation[4291-4334]:ConstructorInvocation[4291-4334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4404-4528]:Block[4404-4528]"
    }, {
      "left" : "this.configuration = configuration;",
      "right" : "this.configuration = configuration;",
      "info" : "ExpressionStatement[4414-4449]:ExpressionStatement[4414-4449]"
    }, {
      "left" : "this.fields = fields;",
      "right" : "this.fields = fields;",
      "info" : "ExpressionStatement[4458-4479]:ExpressionStatement[4458-4479]"
    }, {
      "left" : "this.records = new ArrayList<R>();",
      "right" : "this.records = new ArrayList<R>();",
      "info" : "ExpressionStatement[4488-4522]:ExpressionStatement[4488-4522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4780-4947]:Block[4780-4947]"
    }, {
      "left" : "this.configuration = c;",
      "right" : "this.configuration = c;",
      "info" : "ExpressionStatement[4790-4813]:ExpressionStatement[4790-4813]"
    }, {
      "left" : "for (R record : records)",
      "right" : "for (R record : records)",
      "info" : "EnhancedForStatement[4823-4941]:EnhancedForStatement[4823-4941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4848-4941]:Block[4848-4941]"
    }, {
      "left" : "if (record != null)",
      "right" : "if (record != null)",
      "info" : "IfStatement[4862-4931]:IfStatement[4862-4931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4882-4931]:Block[4882-4931]"
    }, {
      "left" : "record.attach(c);",
      "right" : "record.attach(c);",
      "info" : "ExpressionStatement[4900-4917]:ExpressionStatement[4900-4917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4994-5023]:Block[4994-5023]"
    }, {
      "left" : "attach(null);",
      "right" : "attach(null);",
      "info" : "ExpressionStatement[5004-5017]:ExpressionStatement[5004-5017]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5086-5123]:Block[5086-5123]"
    }, {
      "left" : "return configuration;",
      "right" : "return configuration;",
      "info" : "ReturnStatement[5096-5117]:ReturnStatement[5096-5117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5369-5399]:Block[5369-5399]"
    }, {
      "left" : "return fields;",
      "right" : "return fields;",
      "info" : "ReturnStatement[5379-5393]:ReturnStatement[5379-5393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5448-5491]:Block[5448-5491]"
    }, {
      "left" : "return new RowImpl(fields);",
      "right" : "return new RowImpl(fields);",
      "info" : "ReturnStatement[5458-5485]:ReturnStatement[5458-5485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5559-5602]:Block[5559-5602]"
    }, {
      "left" : "return fields.field(field);",
      "right" : "return fields.field(field);",
      "info" : "ReturnStatement[5569-5596]:ReturnStatement[5569-5596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5663-5705]:Block[5663-5705]"
    }, {
      "left" : "return fields.field(name);",
      "right" : "return fields.field(name);",
      "info" : "ReturnStatement[5673-5699]:ReturnStatement[5673-5699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5785-5833]:Block[5785-5833]"
    }, {
      "left" : "return fields.field(name, type);",
      "right" : "return fields.field(name, type);",
      "info" : "ReturnStatement[5795-5827]:ReturnStatement[5795-5827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5920-5972]:Block[5920-5972]"
    }, {
      "left" : "return fields.field(name, dataType);",
      "right" : "return fields.field(name, dataType);",
      "info" : "ReturnStatement[5930-5966]:ReturnStatement[5930-5966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6031-6073]:Block[6031-6073]"
    }, {
      "left" : "return fields.field(name);",
      "right" : "return fields.field(name);",
      "info" : "ReturnStatement[6041-6067]:ReturnStatement[6041-6067]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6151-6199]:Block[6151-6199]"
    }, {
      "left" : "return fields.field(name, type);",
      "right" : "return fields.field(name, type);",
      "info" : "ReturnStatement[6161-6193]:ReturnStatement[6161-6193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6284-6336]:Block[6284-6336]"
    }, {
      "left" : "return fields.field(name, dataType);",
      "right" : "return fields.field(name, dataType);",
      "info" : "ReturnStatement[6294-6330]:ReturnStatement[6294-6330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6395-6438]:Block[6395-6438]"
    }, {
      "left" : "return fields.field(index);",
      "right" : "return fields.field(index);",
      "info" : "ReturnStatement[6405-6432]:ReturnStatement[6405-6432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6516-6565]:Block[6516-6565]"
    }, {
      "left" : "return fields.field(index, type);",
      "right" : "return fields.field(index, type);",
      "info" : "ReturnStatement[6526-6559]:ReturnStatement[6526-6559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6650-6703]:Block[6650-6703]"
    }, {
      "left" : "return fields.field(index, dataType);",
      "right" : "return fields.field(index, dataType);",
      "info" : "ReturnStatement[6660-6697]:ReturnStatement[6660-6697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6756-6803]:Block[6756-6803]"
    }, {
      "left" : "return fields.fields().clone();",
      "right" : "return fields.fields().clone();",
      "info" : "ReturnStatement[6766-6797]:ReturnStatement[6766-6797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6896-7057]:Block[6896-7057]"
    }, {
      "left" : "Field<?>[] result = new Field[f.length];",
      "right" : "Field<?>[] result = new Field[f.length];",
      "info" : "VariableDeclarationStatement[6906-6946]:VariableDeclarationStatement[6906-6946]"
    }, {
      "left" : "for (int i = 0; i < f.length; i++)\n            result[i] = field(f[i]);",
      "right" : "for (int i = 0; i < f.length; i++)\n            result[i] = field(f[i]);",
      "info" : "ForStatement[6956-7027]:ForStatement[6956-7027]"
    }, {
      "left" : "result[i] = field(f[i]);",
      "right" : "result[i] = field(f[i]);",
      "info" : "ExpressionStatement[7003-7027]:ExpressionStatement[7003-7027]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7037-7051]:ReturnStatement[7037-7051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7151-7330]:Block[7151-7330]"
    }, {
      "left" : "Field<?>[] result = new Field[indexes.length];",
      "right" : "Field<?>[] result = new Field[indexes.length];",
      "info" : "VariableDeclarationStatement[7161-7207]:VariableDeclarationStatement[7161-7207]"
    }, {
      "left" : "for (int i = 0; i < indexes.length; i++)\n            result[i] = field(indexes[i]);",
      "right" : "for (int i = 0; i < indexes.length; i++)\n            result[i] = field(indexes[i]);",
      "info" : "ForStatement[7217-7300]:ForStatement[7217-7300]"
    }, {
      "left" : "result[i] = field(indexes[i]);",
      "right" : "result[i] = field(indexes[i]);",
      "info" : "ExpressionStatement[7270-7300]:ExpressionStatement[7270-7300]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7310-7324]:ReturnStatement[7310-7324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7425-7598]:Block[7425-7598]"
    }, {
      "left" : "Field<?>[] result = new Field[names.length];",
      "right" : "Field<?>[] result = new Field[names.length];",
      "info" : "VariableDeclarationStatement[7435-7479]:VariableDeclarationStatement[7435-7479]"
    }, {
      "left" : "for (int i = 0; i < names.length; i++)\n            result[i] = field(names[i]);",
      "right" : "for (int i = 0; i < names.length; i++)\n            result[i] = field(names[i]);",
      "info" : "ForStatement[7489-7568]:ForStatement[7489-7568]"
    }, {
      "left" : "result[i] = field(names[i]);",
      "right" : "result[i] = field(names[i]);",
      "info" : "ExpressionStatement[7540-7568]:ExpressionStatement[7540-7568]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7578-7592]:ReturnStatement[7578-7592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7691-7864]:Block[7691-7864]"
    }, {
      "left" : "Field<?>[] result = new Field[names.length];",
      "right" : "Field<?>[] result = new Field[names.length];",
      "info" : "VariableDeclarationStatement[7701-7745]:VariableDeclarationStatement[7701-7745]"
    }, {
      "left" : "for (int i = 0; i < names.length; i++)\n            result[i] = field(names[i]);",
      "right" : "for (int i = 0; i < names.length; i++)\n            result[i] = field(names[i]);",
      "info" : "ForStatement[7755-7834]:ForStatement[7755-7834]"
    }, {
      "left" : "result[i] = field(names[i]);",
      "right" : "result[i] = field(names[i]);",
      "info" : "ExpressionStatement[7806-7834]:ExpressionStatement[7806-7834]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[7844-7858]:ReturnStatement[7844-7858]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7915-7956]:Block[7915-7956]"
    }, {
      "left" : "return records.isEmpty();",
      "right" : "return records.isEmpty();",
      "info" : "ReturnStatement[7925-7950]:ReturnStatement[7925-7950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8010-8052]:Block[8010-8052]"
    }, {
      "left" : "return !records.isEmpty();",
      "right" : "return !records.isEmpty();",
      "info" : "ReturnStatement[8020-8046]:ReturnStatement[8020-8046]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8127-8177]:Block[8127-8177]"
    }, {
      "left" : "return get(index).getValue(field);",
      "right" : "return get(index).getValue(field);",
      "info" : "ReturnStatement[8137-8171]:ReturnStatement[8137-8171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8284-8348]:Block[8284-8348]"
    }, {
      "left" : "return get(index).getValue(field, defaultValue);",
      "right" : "return get(index).getValue(field, defaultValue);",
      "info" : "ReturnStatement[8294-8342]:ReturnStatement[8294-8342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8424-8479]:Block[8424-8479]"
    }, {
      "left" : "return get(index).getValue(fieldIndex);",
      "right" : "return get(index).getValue(fieldIndex);",
      "info" : "ReturnStatement[8434-8473]:ReturnStatement[8434-8473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8592-8661]:Block[8592-8661]"
    }, {
      "left" : "return get(index).getValue(fieldIndex, defaultValue);",
      "right" : "return get(index).getValue(fieldIndex, defaultValue);",
      "info" : "ReturnStatement[8602-8655]:ReturnStatement[8602-8655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8739-8793]:Block[8739-8793]"
    }, {
      "left" : "return get(index).getValue(fieldName);",
      "right" : "return get(index).getValue(fieldName);",
      "info" : "ReturnStatement[8749-8787]:ReturnStatement[8749-8787]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8908-8976]:Block[8908-8976]"
    }, {
      "left" : "return get(index).getValue(fieldName, defaultValue);",
      "right" : "return get(index).getValue(fieldName, defaultValue);",
      "info" : "ReturnStatement[8918-8970]:ReturnStatement[8918-8970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9047-9123]:Block[9047-9123]"
    }, {
      "left" : "return (List<T>) getValues(indexOrFail(fieldsRow(), field));",
      "right" : "return (List<T>) getValues(indexOrFail(fieldsRow(), field));",
      "info" : "ReturnStatement[9057-9117]:ReturnStatement[9057-9117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9219-9282]:Block[9219-9282]"
    }, {
      "left" : "return Convert.convert(getValues(field), type);",
      "right" : "return Convert.convert(getValues(field), type);",
      "info" : "ReturnStatement[9229-9276]:ReturnStatement[9229-9276]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9391-9459]:Block[9391-9459]"
    }, {
      "left" : "return Convert.convert(getValues(field), converter);",
      "right" : "return Convert.convert(getValues(field), converter);",
      "info" : "ReturnStatement[9401-9453]:ReturnStatement[9401-9453]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9526-9714]:Block[9526-9714]"
    }, {
      "left" : "List<Object> result = new ArrayList<Object>(size());",
      "right" : "List<Object> result = new ArrayList<Object>(size());",
      "info" : "VariableDeclarationStatement[9536-9588]:VariableDeclarationStatement[9536-9588]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[9598-9684]:EnhancedForStatement[9598-9684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9620-9684]:Block[9620-9684]"
    }, {
      "left" : "result.add(record.getValue(fieldIndex));",
      "right" : "result.add(record.getValue(fieldIndex));",
      "info" : "ExpressionStatement[9634-9674]:ExpressionStatement[9634-9674]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[9694-9708]:ReturnStatement[9694-9708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9810-9878]:Block[9810-9878]"
    }, {
      "left" : "return Convert.convert(getValues(fieldIndex), type);",
      "right" : "return Convert.convert(getValues(fieldIndex), type);",
      "info" : "ReturnStatement[9820-9872]:ReturnStatement[9820-9872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9976-10049]:Block[9976-10049]"
    }, {
      "left" : "return Convert.convert(getValues(fieldIndex), converter);",
      "right" : "return Convert.convert(getValues(fieldIndex), converter);",
      "info" : "ReturnStatement[9986-10043]:ReturnStatement[9986-10043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10118-10169]:Block[10118-10169]"
    }, {
      "left" : "return getValues(field(fieldName));",
      "right" : "return getValues(field(fieldName));",
      "info" : "ReturnStatement[10128-10163]:ReturnStatement[10128-10163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10267-10334]:Block[10267-10334]"
    }, {
      "left" : "return Convert.convert(getValues(fieldName), type);",
      "right" : "return Convert.convert(getValues(fieldName), type);",
      "info" : "ReturnStatement[10277-10328]:ReturnStatement[10277-10328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10434-10506]:Block[10434-10506]"
    }, {
      "left" : "return Convert.convert(getValues(fieldName), converter);",
      "right" : "return Convert.convert(getValues(fieldName), converter);",
      "info" : "ReturnStatement[10444-10500]:ReturnStatement[10444-10500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10573-10624]:Block[10573-10624]"
    }, {
      "left" : "return getValues(field(fieldName));",
      "right" : "return getValues(field(fieldName));",
      "info" : "ReturnStatement[10583-10618]:ReturnStatement[10583-10618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10720-10787]:Block[10720-10787]"
    }, {
      "left" : "return Convert.convert(getValues(fieldName), type);",
      "right" : "return Convert.convert(getValues(fieldName), type);",
      "info" : "ReturnStatement[10730-10781]:ReturnStatement[10730-10781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10885-10957]:Block[10885-10957]"
    }, {
      "left" : "return Convert.convert(getValues(fieldName), converter);",
      "right" : "return Convert.convert(getValues(fieldName), converter);",
      "info" : "ReturnStatement[10895-10951]:ReturnStatement[10895-10951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10994-11030]:Block[10994-11030]"
    }, {
      "left" : "records.add(record);",
      "right" : "records.add(record);",
      "info" : "ExpressionStatement[11004-11024]:ExpressionStatement[11004-11024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11079-11194]:Block[11079-11194]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[11089-11130]:VariableDeclarationStatement[11089-11130]"
    }, {
      "left" : "format(writer);",
      "right" : "format(writer);",
      "info" : "ExpressionStatement[11139-11154]:ExpressionStatement[11139-11154]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[11163-11188]:ReturnStatement[11163-11188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11260-11315]:Block[11260-11315]"
    }, {
      "left" : "format(new OutputStreamWriter(stream));",
      "right" : "format(new OutputStreamWriter(stream));",
      "info" : "ExpressionStatement[11270-11309]:ExpressionStatement[11270-11309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11375-11410]:Block[11375-11410]"
    }, {
      "left" : "format(writer, 50);",
      "right" : "format(writer, 50);",
      "info" : "ExpressionStatement[11385-11404]:ExpressionStatement[11385-11404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11473-11600]:Block[11473-11600]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[11483-11524]:VariableDeclarationStatement[11483-11524]"
    }, {
      "left" : "format(writer, maxRecords);",
      "right" : "format(writer, maxRecords);",
      "info" : "ExpressionStatement[11533-11560]:ExpressionStatement[11533-11560]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[11569-11594]:ReturnStatement[11569-11594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11682-11749]:Block[11682-11749]"
    }, {
      "left" : "format(new OutputStreamWriter(stream), maxRecords);",
      "right" : "format(new OutputStreamWriter(stream), maxRecords);",
      "info" : "ExpressionStatement[11692-11743]:ExpressionStatement[11692-11743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11825-17465]:Block[11825-17465]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11835-17459]:TryStatement[11835-17459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11839-17339]:Block[11839-17339]"
    }, {
      "left" : "final int COL_MIN_WIDTH = 4;",
      "right" : "final int COL_MIN_WIDTH = 4;",
      "info" : "VariableDeclarationStatement[11853-11881]:VariableDeclarationStatement[11853-11881]"
    }, {
      "left" : "final int COL_MAX_WIDTH = 50;",
      "right" : "final int COL_MAX_WIDTH = 50;",
      "info" : "VariableDeclarationStatement[11894-11923]:VariableDeclarationStatement[11894-11923]"
    }, {
      "left" : "final int NUM_COL_MAX_WIDTH = 100;",
      "right" : "final int NUM_COL_MAX_WIDTH = 100;",
      "info" : "VariableDeclarationStatement[12018-12052]:VariableDeclarationStatement[12018-12052]"
    }, {
      "left" : "final int MAX_RECORDS = min(50, maxRecords);",
      "right" : "final int MAX_RECORDS = min(50, maxRecords);",
      "info" : "VariableDeclarationStatement[12155-12199]:VariableDeclarationStatement[12155-12199]"
    }, {
      "left" : "final int[] decimalPlaces = new int[fields.fields.length];",
      "right" : "final int[] decimalPlaces = new int[fields.fields.length];",
      "info" : "VariableDeclarationStatement[12276-12334]:VariableDeclarationStatement[12276-12334]"
    }, {
      "left" : "final int[] widths = new int[fields.fields.length];",
      "right" : "final int[] widths = new int[fields.fields.length];",
      "info" : "VariableDeclarationStatement[12347-12398]:VariableDeclarationStatement[12347-12398]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[12412-13226]:ForStatement[12412-13226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12471-13226]:Block[12471-13226]"
    }, {
      "left" : "if (Number.class.isAssignableFrom(fields.fields[index].getType()))",
      "right" : "if (Number.class.isAssignableFrom(fields.fields[index].getType()))",
      "info" : "IfStatement[12489-13212]:IfStatement[12489-13212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12556-13212]:Block[12556-13212]"
    }, {
      "left" : "List<Integer> decimalPlacesList = new ArrayList<Integer>();",
      "right" : "List<Integer> decimalPlacesList = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[12578-12637]:VariableDeclarationStatement[12578-12637]"
    }, {
      "left" : "decimalPlacesList.add(0);",
      "right" : "decimalPlacesList.add(0);",
      "info" : "ExpressionStatement[12693-12718]:ExpressionStatement[12693-12718]"
    }, {
      "left" : "String value;",
      "right" : "String value;",
      "info" : "VariableDeclarationStatement[12812-12825]:VariableDeclarationStatement[12812-12825]"
    }, {
      "left" : "for (int i = 0; i < min(MAX_RECORDS, size()); i++)",
      "right" : "for (int i = 0; i < min(MAX_RECORDS, size()); i++)",
      "info" : "ForStatement[12846-13082]:ForStatement[12846-13082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12897-13082]:Block[12897-13082]"
    }, {
      "left" : "value = format0(getValue(i, index), get(i).changed(index), true);",
      "right" : "value = format0(getValue(i, index), get(i).changed(index), true);",
      "info" : "ExpressionStatement[12923-12988]:ExpressionStatement[12923-12988]"
    }, {
      "left" : "decimalPlacesList.add(getDecimalPlaces(value));",
      "right" : "decimalPlacesList.add(getDecimalPlaces(value));",
      "info" : "ExpressionStatement[13013-13060]:ExpressionStatement[13013-13060]"
    }, {
      "left" : "decimalPlaces[index] = Collections.max(decimalPlacesList);",
      "right" : "decimalPlaces[index] = Collections.max(decimalPlacesList);",
      "info" : "ExpressionStatement[13136-13194]:ExpressionStatement[13136-13194]"
    }, {
      "left" : "int colMaxWidth;",
      "right" : "int colMaxWidth;",
      "info" : "VariableDeclarationStatement[13277-13293]:VariableDeclarationStatement[13277-13293]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[13306-14486]:ForStatement[13306-14486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13365-14486]:Block[13365-14486]"
    }, {
      "left" : "boolean isNumCol = Number.class.isAssignableFrom(fields.fields[index].getType());",
      "right" : "boolean isNumCol = Number.class.isAssignableFrom(fields.fields[index].getType());",
      "info" : "VariableDeclarationStatement[13421-13502]:VariableDeclarationStatement[13421-13502]"
    }, {
      "left" : "colMaxWidth = isNumCol ? NUM_COL_MAX_WIDTH : COL_MAX_WIDTH;",
      "right" : "colMaxWidth = isNumCol ? NUM_COL_MAX_WIDTH : COL_MAX_WIDTH;",
      "info" : "ExpressionStatement[13520-13579]:ExpressionStatement[13520-13579]"
    }, {
      "left" : "List<Integer> widthList = new ArrayList<Integer>();",
      "right" : "List<Integer> widthList = new ArrayList<Integer>();",
      "info" : "VariableDeclarationStatement[13650-13701]:VariableDeclarationStatement[13650-13701]"
    }, {
      "left" : "widthList.add(min(colMaxWidth, max(COL_MIN_WIDTH, fields.fields[index].getName().length())));",
      "right" : "widthList.add(min(colMaxWidth, max(COL_MIN_WIDTH, fields.fields[index].getName().length())));",
      "info" : "ExpressionStatement[13766-13859]:ExpressionStatement[13766-13859]"
    }, {
      "left" : "String value;",
      "right" : "String value;",
      "info" : "VariableDeclarationStatement[13920-13933]:VariableDeclarationStatement[13920-13933]"
    }, {
      "left" : "for (int i = 0; i < min(MAX_RECORDS, size()); i++)",
      "right" : "for (int i = 0; i < min(MAX_RECORDS, size()); i++)",
      "info" : "ForStatement[13950-14383]:ForStatement[13950-14383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14001-14383]:Block[14001-14383]"
    }, {
      "left" : "value = format0(getValue(i, index), get(i).changed(index), true);",
      "right" : "value = format0(getValue(i, index), get(i).changed(index), true);",
      "info" : "ExpressionStatement[14023-14088]:ExpressionStatement[14023-14088]"
    }, {
      "left" : "if (isNumCol)",
      "right" : "if (isNumCol)",
      "info" : "IfStatement[14179-14295]:IfStatement[14179-14295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14193-14295]:Block[14193-14295]"
    }, {
      "left" : "value = alignNumberValue(decimalPlaces[index], value);",
      "right" : "value = alignNumberValue(decimalPlaces[index], value);",
      "info" : "ExpressionStatement[14219-14273]:ExpressionStatement[14219-14273]"
    }, {
      "left" : "widthList.add(min(colMaxWidth, value.length()));",
      "right" : "widthList.add(min(colMaxWidth, value.length()));",
      "info" : "ExpressionStatement[14317-14365]:ExpressionStatement[14317-14365]"
    }, {
      "left" : "widths[index] = Collections.max(widthList);",
      "right" : "widths[index] = Collections.max(widthList);",
      "info" : "ExpressionStatement[14429-14472]:ExpressionStatement[14429-14472]"
    }, {
      "left" : "writer.append(\"+\");",
      "right" : "writer.append(\"+\");",
      "info" : "ExpressionStatement[14649-14668]:ExpressionStatement[14649-14668]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[14681-14856]:ForStatement[14681-14856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14740-14856]:Block[14740-14856]"
    }, {
      "left" : "writer.append(rightPad(\"\", widths[index], \"-\"));",
      "right" : "writer.append(rightPad(\"\", widths[index], \"-\"));",
      "info" : "ExpressionStatement[14758-14806]:ExpressionStatement[14758-14806]"
    }, {
      "left" : "writer.append(\"+\");",
      "right" : "writer.append(\"+\");",
      "info" : "ExpressionStatement[14823-14842]:ExpressionStatement[14823-14842]"
    }, {
      "left" : "writer.append(\"\\n|\");",
      "right" : "writer.append(\"\\n|\");",
      "info" : "ExpressionStatement[14899-14920]:ExpressionStatement[14899-14920]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[14933-15457]:ForStatement[14933-15457]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14992-15457]:Block[14992-15457]"
    }, {
      "left" : "String padded;",
      "right" : "String padded;",
      "info" : "VariableDeclarationStatement[15010-15024]:VariableDeclarationStatement[15010-15024]"
    }, {
      "left" : "if (Number.class.isAssignableFrom(fields.fields[index].getType()))",
      "right" : "if (Number.class.isAssignableFrom(fields.fields[index].getType()))",
      "info" : "IfStatement[15042-15340]:IfStatement[15042-15340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15109-15213]:Block[15109-15213]"
    }, {
      "left" : "padded = leftPad(fields.fields[index].getName(), widths[index]);",
      "right" : "padded = leftPad(fields.fields[index].getName(), widths[index]);",
      "info" : "ExpressionStatement[15131-15195]:ExpressionStatement[15131-15195]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15235-15340]:Block[15235-15340]"
    }, {
      "left" : "padded = rightPad(fields.fields[index].getName(), widths[index]);",
      "right" : "padded = rightPad(fields.fields[index].getName(), widths[index]);",
      "info" : "ExpressionStatement[15257-15322]:ExpressionStatement[15257-15322]"
    }, {
      "left" : "writer.append(abbreviate(padded, widths[index]));",
      "right" : "writer.append(abbreviate(padded, widths[index]));",
      "info" : "ExpressionStatement[15358-15407]:ExpressionStatement[15358-15407]"
    }, {
      "left" : "writer.append(\"|\");",
      "right" : "writer.append(\"|\");",
      "info" : "ExpressionStatement[15424-15443]:ExpressionStatement[15424-15443]"
    }, {
      "left" : "writer.append(\"\\n+\");",
      "right" : "writer.append(\"\\n+\");",
      "info" : "ExpressionStatement[15502-15523]:ExpressionStatement[15502-15523]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[15536-15711]:ForStatement[15536-15711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15595-15711]:Block[15595-15711]"
    }, {
      "left" : "writer.append(rightPad(\"\", widths[index], \"-\"));",
      "right" : "writer.append(rightPad(\"\", widths[index], \"-\"));",
      "info" : "ExpressionStatement[15613-15661]:ExpressionStatement[15613-15661]"
    }, {
      "left" : "writer.append(\"+\");",
      "right" : "writer.append(\"+\");",
      "info" : "ExpressionStatement[15678-15697]:ExpressionStatement[15678-15697]"
    }, {
      "left" : "for (int i = 0; i < min(maxRecords, size()); i++)",
      "right" : "for (int i = 0; i < min(maxRecords, size()); i++)",
      "info" : "ForStatement[15754-16741]:ForStatement[15754-16741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15804-16741]:Block[15804-16741]"
    }, {
      "left" : "writer.append(\"\\n|\");",
      "right" : "writer.append(\"\\n|\");",
      "info" : "ExpressionStatement[15822-15843]:ExpressionStatement[15822-15843]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[15861-16727]:ForStatement[15861-16727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15920-16727]:Block[15920-16727]"
    }, {
      "left" : "String value = format0(getValue(i, index), get(i).changed(index), true).replace(\"\\n\", \"{lf}\").replace(\"\\r\", \"{cr}\");",
      "right" : "String value = format0(getValue(i, index), get(i).changed(index), true).replace(\"\\n\", \"{lf}\").replace(\"\\r\", \"{cr}\");",
      "info" : "VariableDeclarationStatement[15942-16058]:VariableDeclarationStatement[15942-16058]"
    }, {
      "left" : "String padded;",
      "right" : "String padded;",
      "info" : "VariableDeclarationStatement[16080-16094]:VariableDeclarationStatement[16080-16094]"
    }, {
      "left" : "if (Number.class.isAssignableFrom(fields.fields[index].getType()))",
      "right" : "if (Number.class.isAssignableFrom(fields.fields[index].getType()))",
      "info" : "IfStatement[16115-16598]:IfStatement[16115-16598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16182-16447]:Block[16182-16447]"
    }, {
      "left" : "value = alignNumberValue(decimalPlaces[index], value);",
      "right" : "value = alignNumberValue(decimalPlaces[index], value);",
      "info" : "ExpressionStatement[16270-16324]:ExpressionStatement[16270-16324]"
    }, {
      "left" : "padded = leftPad(value, widths[index]);",
      "right" : "padded = leftPad(value, widths[index]);",
      "info" : "ExpressionStatement[16386-16425]:ExpressionStatement[16386-16425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16473-16598]:Block[16473-16598]"
    }, {
      "left" : "padded = rightPad(value, widths[index]);",
      "right" : "padded = rightPad(value, widths[index]);",
      "info" : "ExpressionStatement[16536-16576]:ExpressionStatement[16536-16576]"
    }, {
      "left" : "writer.append(abbreviate(padded, widths[index]));",
      "right" : "writer.append(abbreviate(padded, widths[index]));",
      "info" : "ExpressionStatement[16620-16669]:ExpressionStatement[16620-16669]"
    }, {
      "left" : "writer.append(\"|\");",
      "right" : "writer.append(\"|\");",
      "info" : "ExpressionStatement[16690-16709]:ExpressionStatement[16690-16709]"
    }, {
      "left" : "if (size() > 0)",
      "right" : "if (size() > 0)",
      "info" : "IfStatement[16788-17062]:IfStatement[16788-17062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16804-17062]:Block[16804-17062]"
    }, {
      "left" : "writer.append(\"\\n+\");",
      "right" : "writer.append(\"\\n+\");",
      "info" : "ExpressionStatement[16822-16843]:ExpressionStatement[16822-16843]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[16861-17048]:ForStatement[16861-17048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16920-17048]:Block[16920-17048]"
    }, {
      "left" : "writer.append(rightPad(\"\", widths[index], \"-\"));",
      "right" : "writer.append(rightPad(\"\", widths[index], \"-\"));",
      "info" : "ExpressionStatement[16942-16990]:ExpressionStatement[16942-16990]"
    }, {
      "left" : "writer.append(\"+\");",
      "right" : "writer.append(\"+\");",
      "info" : "ExpressionStatement[17011-17030]:ExpressionStatement[17011-17030]"
    }, {
      "left" : "if (maxRecords < size())",
      "right" : "if (maxRecords < size())",
      "info" : "IfStatement[17131-17329]:IfStatement[17131-17329]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17156-17329]:Block[17156-17329]"
    }, {
      "left" : "writer.append(\"\\n|...\");",
      "right" : "writer.append(\"\\n|...\");",
      "info" : "ExpressionStatement[17174-17198]:ExpressionStatement[17174-17198]"
    }, {
      "left" : "writer.append(\"\" + (size() - maxRecords));",
      "right" : "writer.append(\"\" + (size() - maxRecords));",
      "info" : "ExpressionStatement[17215-17257]:ExpressionStatement[17215-17257]"
    }, {
      "left" : "writer.append(\" record(s) truncated...\");",
      "right" : "writer.append(\" record(s) truncated...\");",
      "info" : "ExpressionStatement[17274-17315]:ExpressionStatement[17274-17315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17378-17459]:Block[17378-17459]"
    }, {
      "left" : "throw new IOException(\"Exception while writing TEXT\", e);",
      "right" : "throw new IOException(\"Exception while writing TEXT\", e);",
      "info" : "ThrowStatement[17392-17449]:ThrowStatement[17392-17449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17559-18071]:Block[17559-18071]"
    }, {
      "left" : "if (!\"{null}\".equals(value) && columnDecimalPlaces != 0)",
      "right" : "if (!\"{null}\".equals(value) && columnDecimalPlaces != 0)",
      "info" : "IfStatement[17569-18042]:IfStatement[17569-18042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17626-18042]:Block[17626-18042]"
    }, {
      "left" : "int decimalPlaces = getDecimalPlaces(value);",
      "right" : "int decimalPlaces = getDecimalPlaces(value);",
      "info" : "VariableDeclarationStatement[17640-17684]:VariableDeclarationStatement[17640-17684]"
    }, {
      "left" : "int rightPadSize = value.length() + columnDecimalPlaces - decimalPlaces;",
      "right" : "int rightPadSize = value.length() + columnDecimalPlaces - decimalPlaces;",
      "info" : "VariableDeclarationStatement[17697-17769]:VariableDeclarationStatement[17697-17769]"
    }, {
      "left" : "if (decimalPlaces == 0)",
      "right" : "if (decimalPlaces == 0)",
      "info" : "IfStatement[17783-18032]:IfStatement[17783-18032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17807-17944]:Block[17807-17944]"
    }, {
      "left" : "value = rightPad(value, rightPadSize + 1);",
      "right" : "value = rightPad(value, rightPadSize + 1);",
      "info" : "ExpressionStatement[17888-17930]:ExpressionStatement[17888-17930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17962-18032]:Block[17962-18032]"
    }, {
      "left" : "value = rightPad(value, rightPadSize);",
      "right" : "value = rightPad(value, rightPadSize);",
      "info" : "ExpressionStatement[17980-18018]:ExpressionStatement[17980-18018]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[18052-18065]:ReturnStatement[18052-18065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18133-18345]:Block[18133-18345]"
    }, {
      "left" : "int decimalPlaces = 0;",
      "right" : "int decimalPlaces = 0;",
      "info" : "VariableDeclarationStatement[18143-18165]:VariableDeclarationStatement[18143-18165]"
    }, {
      "left" : "int dotIndex = value.indexOf(\".\");",
      "right" : "int dotIndex = value.indexOf(\".\");",
      "info" : "VariableDeclarationStatement[18175-18209]:VariableDeclarationStatement[18175-18209]"
    }, {
      "left" : "if (dotIndex != -1)",
      "right" : "if (dotIndex != -1)",
      "info" : "IfStatement[18218-18308]:IfStatement[18218-18308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18238-18308]:Block[18238-18308]"
    }, {
      "left" : "decimalPlaces = value.length() - dotIndex - 1;",
      "right" : "decimalPlaces = value.length() - dotIndex - 1;",
      "info" : "ExpressionStatement[18252-18298]:ExpressionStatement[18252-18298]"
    }, {
      "left" : "return decimalPlaces;",
      "right" : "return decimalPlaces;",
      "info" : "ReturnStatement[18318-18339]:ReturnStatement[18318-18339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18398-18517]:Block[18398-18517]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[18408-18449]:VariableDeclarationStatement[18408-18449]"
    }, {
      "left" : "formatHTML(writer);",
      "right" : "formatHTML(writer);",
      "info" : "ExpressionStatement[18458-18477]:ExpressionStatement[18458-18477]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[18486-18511]:ReturnStatement[18486-18511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18587-18646]:Block[18587-18646]"
    }, {
      "left" : "formatHTML(new OutputStreamWriter(stream));",
      "right" : "formatHTML(new OutputStreamWriter(stream));",
      "info" : "ExpressionStatement[18597-18640]:ExpressionStatement[18597-18640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18710-19758]:Block[18710-19758]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18720-19752]:TryStatement[18720-19752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18724-19632]:Block[18724-19632]"
    }, {
      "left" : "writer.append(\"<table>\");",
      "right" : "writer.append(\"<table>\");",
      "info" : "ExpressionStatement[18738-18763]:ExpressionStatement[18738-18763]"
    }, {
      "left" : "writer.append(\"<thead>\");",
      "right" : "writer.append(\"<thead>\");",
      "info" : "ExpressionStatement[18776-18801]:ExpressionStatement[18776-18801]"
    }, {
      "left" : "writer.append(\"<tr>\");",
      "right" : "writer.append(\"<tr>\");",
      "info" : "ExpressionStatement[18814-18836]:ExpressionStatement[18814-18836]"
    }, {
      "left" : "for (Field<?> field : fields.fields)",
      "right" : "for (Field<?> field : fields.fields)",
      "info" : "EnhancedForStatement[18850-19029]:EnhancedForStatement[18850-19029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18887-19029]:Block[18887-19029]"
    }, {
      "left" : "writer.append(\"<th>\");",
      "right" : "writer.append(\"<th>\");",
      "info" : "ExpressionStatement[18905-18927]:ExpressionStatement[18905-18927]"
    }, {
      "left" : "writer.append(field.getName());",
      "right" : "writer.append(field.getName());",
      "info" : "ExpressionStatement[18944-18975]:ExpressionStatement[18944-18975]"
    }, {
      "left" : "writer.append(\"</th>\");",
      "right" : "writer.append(\"</th>\");",
      "info" : "ExpressionStatement[18992-19015]:ExpressionStatement[18992-19015]"
    }, {
      "left" : "writer.append(\"</tr>\");",
      "right" : "writer.append(\"</tr>\");",
      "info" : "ExpressionStatement[19043-19066]:ExpressionStatement[19043-19066]"
    }, {
      "left" : "writer.append(\"</thead>\");",
      "right" : "writer.append(\"</thead>\");",
      "info" : "ExpressionStatement[19079-19105]:ExpressionStatement[19079-19105]"
    }, {
      "left" : "writer.append(\"<tbody>\");",
      "right" : "writer.append(\"<tbody>\");",
      "info" : "ExpressionStatement[19118-19143]:ExpressionStatement[19118-19143]"
    }, {
      "left" : "for (Record record : this)",
      "right" : "for (Record record : this)",
      "info" : "EnhancedForStatement[19157-19543]:EnhancedForStatement[19157-19543]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19184-19543]:Block[19184-19543]"
    }, {
      "left" : "writer.append(\"<tr>\");",
      "right" : "writer.append(\"<tr>\");",
      "info" : "ExpressionStatement[19202-19224]:ExpressionStatement[19202-19224]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[19242-19488]:ForStatement[19242-19488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19301-19488]:Block[19301-19488]"
    }, {
      "left" : "writer.append(\"<td>\");",
      "right" : "writer.append(\"<td>\");",
      "info" : "ExpressionStatement[19323-19345]:ExpressionStatement[19323-19345]"
    }, {
      "left" : "writer.append(format0(record.getValue(index), false, true));",
      "right" : "writer.append(format0(record.getValue(index), false, true));",
      "info" : "ExpressionStatement[19366-19426]:ExpressionStatement[19366-19426]"
    }, {
      "left" : "writer.append(\"</td>\");",
      "right" : "writer.append(\"</td>\");",
      "info" : "ExpressionStatement[19447-19470]:ExpressionStatement[19447-19470]"
    }, {
      "left" : "writer.append(\"</tr>\");",
      "right" : "writer.append(\"</tr>\");",
      "info" : "ExpressionStatement[19506-19529]:ExpressionStatement[19506-19529]"
    }, {
      "left" : "writer.append(\"</tbody>\");",
      "right" : "writer.append(\"</tbody>\");",
      "info" : "ExpressionStatement[19557-19583]:ExpressionStatement[19557-19583]"
    }, {
      "left" : "writer.append(\"</table>\");",
      "right" : "writer.append(\"</table>\");",
      "info" : "ExpressionStatement[19596-19622]:ExpressionStatement[19596-19622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19671-19752]:Block[19671-19752]"
    }, {
      "left" : "throw new IOException(\"Exception while writing HTML\", e);",
      "right" : "throw new IOException(\"Exception while writing HTML\", e);",
      "info" : "ThrowStatement[19685-19742]:ThrowStatement[19685-19742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19810-19928]:Block[19915-20041]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[19820-19861]:VariableDeclarationStatement[19925-19966]"
    }, {
      "left" : "formatCSV(writer);",
      "right" : "formatCSV(writer, header);",
      "info" : "ExpressionStatement[19870-19888]:ExpressionStatement[19975-20001]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[19897-19922]:ReturnStatement[20010-20035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19997-20055]:Block[20235-20301]"
    }, {
      "left" : "formatCSV(new OutputStreamWriter(stream));",
      "right" : "formatCSV(new OutputStreamWriter(stream), header);",
      "info" : "ExpressionStatement[20007-20049]:ExpressionStatement[20245-20295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20118-20161]:Block[20483-20534]"
    }, {
      "left" : "formatCSV(writer, ',', \"\");",
      "right" : "formatCSV(writer, header, ',', \"\");",
      "info" : "ExpressionStatement[20128-20155]:ExpressionStatement[20493-20528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20227-20356]:Block[20732-20861]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[20237-20278]:VariableDeclarationStatement[20742-20783]"
    }, {
      "left" : "formatCSV(writer, delimiter);",
      "right" : "formatCSV(writer, delimiter);",
      "info" : "ExpressionStatement[20287-20316]:ExpressionStatement[20792-20821]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[20325-20350]:ReturnStatement[20830-20855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20441-20510]:Block[21098-21167]"
    }, {
      "left" : "formatCSV(new OutputStreamWriter(stream), delimiter);",
      "right" : "formatCSV(new OutputStreamWriter(stream), delimiter);",
      "info" : "ExpressionStatement[20451-20504]:ExpressionStatement[21108-21161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20589-20638]:Block[21392-21449]"
    }, {
      "left" : "formatCSV(writer, delimiter, \"\");",
      "right" : "formatCSV(writer, header, delimiter, \"\");",
      "info" : "ExpressionStatement[20599-20632]:ExpressionStatement[21402-21443]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20723-20864]:Block[21697-21846]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[20733-20774]:VariableDeclarationStatement[21707-21748]"
    }, {
      "left" : "formatCSV(writer, delimiter, nullString);",
      "right" : "formatCSV(writer, header, delimiter, nullString);",
      "info" : "ExpressionStatement[20783-20824]:ExpressionStatement[21757-21806]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[20833-20858]:ReturnStatement[21815-21840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20968-21049]:Block[22133-22222]"
    }, {
      "left" : "formatCSV(new OutputStreamWriter(stream), delimiter, nullString);",
      "right" : "formatCSV(new OutputStreamWriter(stream), header, delimiter, nullString);",
      "info" : "ExpressionStatement[20978-21043]:ExpressionStatement[22143-22216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21147-21989]:Block[22497-23407]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[21157-21983]:TryStatement[22507-23401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21161-21864]:Block[22511-23282]"
    }, {
      "left" : "String sep1 = \"\";",
      "right" : "String sep1 = \"\";",
      "info" : "VariableDeclarationStatement[21175-21192]:VariableDeclarationStatement[22555-22572]"
    }, {
      "left" : "for (Field<?> field : fields.fields)",
      "right" : "for (Field<?> field : fields.fields)",
      "info" : "EnhancedForStatement[21205-21413]:EnhancedForStatement[22589-22813]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21242-21413]:Block[22626-22813]"
    }, {
      "left" : "writer.append(sep1);",
      "right" : "writer.append(sep1);",
      "info" : "ExpressionStatement[21260-21280]:ExpressionStatement[22648-22668]"
    }, {
      "left" : "writer.append(formatCSV0(field.getName(), \"\"));",
      "right" : "writer.append(formatCSV0(field.getName(), \"\"));",
      "info" : "ExpressionStatement[21297-21344]:ExpressionStatement[22689-22736]"
    }, {
      "left" : "sep1 = Character.toString(delimiter);",
      "right" : "sep1 = Character.toString(delimiter);",
      "info" : "ExpressionStatement[21362-21399]:ExpressionStatement[22758-22795]"
    }, {
      "left" : "writer.append(\"\\n\");",
      "right" : "writer.append(\"\\n\");",
      "info" : "ExpressionStatement[21427-21447]:ExpressionStatement[22831-22851]"
    }, {
      "left" : "for (Record record : this)",
      "right" : "for (Record record : this)",
      "info" : "EnhancedForStatement[21461-21854]:EnhancedForStatement[22879-23272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21488-21854]:Block[22906-23272]"
    }, {
      "left" : "String sep2 = \"\";",
      "right" : "String sep2 = \"\";",
      "info" : "VariableDeclarationStatement[21506-21523]:VariableDeclarationStatement[22924-22941]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[21541-21802]:ForStatement[22959-23220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21600-21802]:Block[23018-23220]"
    }, {
      "left" : "writer.append(sep2);",
      "right" : "writer.append(sep2);",
      "info" : "ExpressionStatement[21622-21642]:ExpressionStatement[23040-23060]"
    }, {
      "left" : "writer.append(formatCSV0(record.getValue(index), nullString));",
      "right" : "writer.append(formatCSV0(record.getValue(index), nullString));",
      "info" : "ExpressionStatement[21663-21725]:ExpressionStatement[23081-23143]"
    }, {
      "left" : "sep2 = Character.toString(delimiter);",
      "right" : "sep2 = Character.toString(delimiter);",
      "info" : "ExpressionStatement[21747-21784]:ExpressionStatement[23165-23202]"
    }, {
      "left" : "writer.append(\"\\n\");",
      "right" : "writer.append(\"\\n\");",
      "info" : "ExpressionStatement[21820-21840]:ExpressionStatement[23238-23258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21903-21983]:Block[23321-23401]"
    }, {
      "left" : "throw new IOException(\"Exception while writing CSV\", e);",
      "right" : "throw new IOException(\"Exception while writing CSV\", e);",
      "info" : "ThrowStatement[21917-21973]:ThrowStatement[23335-23391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22060-22627]:Block[23478-24045]"
    }, {
      "left" : "if (value == null || \"\".equals(value))",
      "right" : "if (value == null || \"\".equals(value))",
      "info" : "IfStatement[22112-22326]:IfStatement[23530-23744]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22151-22326]:Block[23569-23744]"
    }, {
      "left" : "if (StringUtils.isEmpty(nullString))",
      "right" : "if (StringUtils.isEmpty(nullString))",
      "info" : "IfStatement[22165-22316]:IfStatement[23583-23734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22202-22248]:Block[23620-23666]"
    }, {
      "left" : "return \"\\\"\\\"\";",
      "right" : "return \"\\\"\\\"\";",
      "info" : "ReturnStatement[22220-22234]:ReturnStatement[23638-23652]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22266-22316]:Block[23684-23734]"
    }, {
      "left" : "return nullString;",
      "right" : "return nullString;",
      "info" : "ReturnStatement[22284-22302]:ReturnStatement[23702-23720]"
    }, {
      "left" : "String result = format0(value, false, false);",
      "right" : "String result = format0(value, false, false);",
      "info" : "VariableDeclarationStatement[22336-22381]:VariableDeclarationStatement[23754-23799]"
    }, {
      "left" : "if (StringUtils.containsAny(result, ',', ';', '\\t', '\"', '\\n', '\\r', '\\'', '\\\\'))",
      "right" : "if (StringUtils.containsAny(result, ',', ';', '\\t', '\"', '\\n', '\\r', '\\'', '\\\\'))",
      "info" : "IfStatement[22391-22621]:IfStatement[23809-24039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22473-22569]:Block[23891-23987]"
    }, {
      "left" : "return \"\\\"\" + result.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";",
      "right" : "return \"\\\"\" + result.replace(\"\\\\\", \"\\\\\\\\\").replace(\"\\\"\", \"\\\"\\\"\") + \"\\\"\";",
      "info" : "ReturnStatement[22487-22559]:ReturnStatement[23905-23977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22583-22621]:Block[24001-24039]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[22597-22611]:ReturnStatement[24015-24029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22680-22819]:Block[24098-24237]"
    }, {
      "left" : "if (value instanceof byte[])",
      "right" : "if (value instanceof byte[])",
      "info" : "IfStatement[22690-22790]:IfStatement[24108-24208]"
    }, {
      "left" : "return DatatypeConverter.printBase64Binary((byte[]) value);",
      "right" : "return DatatypeConverter.printBase64Binary((byte[]) value);",
      "info" : "ReturnStatement[22731-22790]:ReturnStatement[24149-24208]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[22800-22813]:ReturnStatement[24218-24231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23111-23853]:Block[24529-25271]"
    }, {
      "left" : "String formatted = changed && visual ? \"*\" : \"\";",
      "right" : "String formatted = changed && visual ? \"*\" : \"\";",
      "info" : "VariableDeclarationStatement[23121-23169]:VariableDeclarationStatement[24539-24587]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[23179-23820]:IfStatement[24597-25238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23198-23260]:Block[24616-24678]"
    }, {
      "left" : "formatted += visual ? \"{null}\" : null;",
      "right" : "formatted += visual ? \"{null}\" : null;",
      "info" : "ExpressionStatement[23212-23250]:ExpressionStatement[24630-24668]"
    }, {
      "left" : "if (value.getClass() == byte[].class)",
      "right" : "if (value.getClass() == byte[].class)",
      "info" : "IfStatement[23274-23820]:IfStatement[24692-25238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23312-23401]:Block[24730-24819]"
    }, {
      "left" : "formatted += DatatypeConverter.printBase64Binary((byte[]) value);",
      "right" : "formatted += DatatypeConverter.printBase64Binary((byte[]) value);",
      "info" : "ExpressionStatement[23326-23391]:ExpressionStatement[24744-24809]"
    }, {
      "left" : "if (value.getClass().isArray())",
      "right" : "if (value.getClass().isArray())",
      "info" : "IfStatement[23415-23820]:IfStatement[24833-25238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23447-23518]:Block[24865-24936]"
    }, {
      "left" : "formatted += Arrays.toString((Object[]) value);",
      "right" : "formatted += Arrays.toString((Object[]) value);",
      "info" : "ExpressionStatement[23461-23508]:ExpressionStatement[24879-24926]"
    }, {
      "left" : "if (value instanceof EnumType)",
      "right" : "if (value instanceof EnumType)",
      "info" : "IfStatement[23532-23820]:IfStatement[24950-25238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23563-23632]:Block[24981-25050]"
    }, {
      "left" : "formatted += ((EnumType) value).getLiteral();",
      "right" : "formatted += ((EnumType) value).getLiteral();",
      "info" : "ExpressionStatement[23577-23622]:ExpressionStatement[24995-25040]"
    }, {
      "left" : "if (value instanceof Record)",
      "right" : "if (value instanceof Record)",
      "info" : "IfStatement[23646-23820]:IfStatement[25064-25238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23675-23752]:Block[25093-25170]"
    }, {
      "left" : "formatted += ((Record) value).valuesRow().toString();",
      "right" : "formatted += ((Record) value).valuesRow().toString();",
      "info" : "ExpressionStatement[23689-23742]:ExpressionStatement[25107-25160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23766-23820]:Block[25184-25238]"
    }, {
      "left" : "formatted += value.toString();",
      "right" : "formatted += value.toString();",
      "info" : "ExpressionStatement[23780-23810]:ExpressionStatement[25198-25228]"
    }, {
      "left" : "return formatted;",
      "right" : "return formatted;",
      "info" : "ReturnStatement[23830-23847]:ReturnStatement[25248-25265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23906-24025]:Block[25324-25443]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[23916-23957]:VariableDeclarationStatement[25334-25375]"
    }, {
      "left" : "formatJSON(writer);",
      "right" : "formatJSON(writer);",
      "info" : "ExpressionStatement[23966-23985]:ExpressionStatement[25384-25403]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[23994-24019]:ReturnStatement[25412-25437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24095-24154]:Block[25513-25572]"
    }, {
      "left" : "formatJSON(new OutputStreamWriter(stream));",
      "right" : "formatJSON(new OutputStreamWriter(stream));",
      "info" : "ExpressionStatement[24105-24148]:ExpressionStatement[25523-25566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24218-25379]:Block[25636-26797]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[24228-25373]:TryStatement[25646-26791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24232-25253]:Block[25650-26671]"
    }, {
      "left" : "List<Map<String, String>> f = new ArrayList<Map<String, String>>();",
      "right" : "List<Map<String, String>> f = new ArrayList<Map<String, String>>();",
      "info" : "VariableDeclarationStatement[24246-24313]:VariableDeclarationStatement[25664-25731]"
    }, {
      "left" : "List<List<Object>> r = new ArrayList<List<Object>>();",
      "right" : "List<List<Object>> r = new ArrayList<List<Object>>();",
      "info" : "VariableDeclarationStatement[24326-24379]:VariableDeclarationStatement[25744-25797]"
    }, {
      "left" : "Map<String, String> fieldMap;",
      "right" : "Map<String, String> fieldMap;",
      "info" : "VariableDeclarationStatement[24393-24422]:VariableDeclarationStatement[25811-25840]"
    }, {
      "left" : "for (Field<?> field : fields.fields)",
      "right" : "for (Field<?> field : fields.fields)",
      "info" : "EnhancedForStatement[24435-24727]:EnhancedForStatement[25853-26145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24472-24727]:Block[25890-26145]"
    }, {
      "left" : "fieldMap = new LinkedHashMap<String, String>();",
      "right" : "fieldMap = new LinkedHashMap<String, String>();",
      "info" : "ExpressionStatement[24490-24537]:ExpressionStatement[25908-25955]"
    }, {
      "left" : "fieldMap.put(\"name\", field.getName());",
      "right" : "fieldMap.put(\"name\", field.getName());",
      "info" : "ExpressionStatement[24554-24592]:ExpressionStatement[25972-26010]"
    }, {
      "left" : "fieldMap.put(\"type\", field.getDataType().getTypeName().toUpperCase());",
      "right" : "fieldMap.put(\"type\", field.getDataType().getTypeName().toUpperCase());",
      "info" : "ExpressionStatement[24609-24679]:ExpressionStatement[26027-26097]"
    }, {
      "left" : "f.add(fieldMap);",
      "right" : "f.add(fieldMap);",
      "info" : "ExpressionStatement[24697-24713]:ExpressionStatement[26115-26131]"
    }, {
      "left" : "for (Record record : this)",
      "right" : "for (Record record : this)",
      "info" : "EnhancedForStatement[24741-25037]:EnhancedForStatement[26159-26455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24768-25037]:Block[26186-26455]"
    }, {
      "left" : "List<Object> list = new ArrayList<Object>();",
      "right" : "List<Object> list = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[24786-24830]:VariableDeclarationStatement[26204-26248]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[24848-24993]:ForStatement[26266-26411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24907-24993]:Block[26325-26411]"
    }, {
      "left" : "list.add(formatJSON0(record.getValue(index)));",
      "right" : "list.add(formatJSON0(record.getValue(index)));",
      "info" : "ExpressionStatement[24929-24975]:ExpressionStatement[26347-26393]"
    }, {
      "left" : "r.add(list);",
      "right" : "r.add(list);",
      "info" : "ExpressionStatement[25011-25023]:ExpressionStatement[26429-26441]"
    }, {
      "left" : "Map<String, List<?>> map = new LinkedHashMap<String, List<?>>();",
      "right" : "Map<String, List<?>> map = new LinkedHashMap<String, List<?>>();",
      "info" : "VariableDeclarationStatement[25051-25115]:VariableDeclarationStatement[26469-26533]"
    }, {
      "left" : "map.put(\"fields\", f);",
      "right" : "map.put(\"fields\", f);",
      "info" : "ExpressionStatement[25129-25150]:ExpressionStatement[26547-26568]"
    }, {
      "left" : "map.put(\"records\", r);",
      "right" : "map.put(\"records\", r);",
      "info" : "ExpressionStatement[25163-25185]:ExpressionStatement[26581-26603]"
    }, {
      "left" : "writer.append(JSONObject.toJSONString(map));",
      "right" : "writer.append(JSONObject.toJSONString(map));",
      "info" : "ExpressionStatement[25199-25243]:ExpressionStatement[26617-26661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25292-25373]:Block[26710-26791]"
    }, {
      "left" : "throw new IOException(\"Exception while writing JSON\", e);",
      "right" : "throw new IOException(\"Exception while writing JSON\", e);",
      "info" : "ThrowStatement[25306-25363]:ThrowStatement[26724-26781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25431-25549]:Block[26849-26967]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[25441-25482]:VariableDeclarationStatement[26859-26900]"
    }, {
      "left" : "formatXML(writer);",
      "right" : "formatXML(writer);",
      "info" : "ExpressionStatement[25491-25509]:ExpressionStatement[26909-26927]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[25518-25543]:ReturnStatement[26936-26961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25618-25676]:Block[27036-27094]"
    }, {
      "left" : "formatXML(new OutputStreamWriter(stream));",
      "right" : "formatXML(new OutputStreamWriter(stream));",
      "info" : "ExpressionStatement[25628-25670]:ExpressionStatement[27046-27088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25739-27365]:Block[27157-28783]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25749-27359]:TryStatement[27167-28777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25753-27240]:Block[27171-28658]"
    }, {
      "left" : "writer.append(\"<result xmlns=\\\"http://www.jooq.org/xsd/jooq-export-2.6.0.xsd\\\">\");",
      "right" : "writer.append(\"<result xmlns=\\\"http://www.jooq.org/xsd/jooq-export-2.6.0.xsd\\\">\");",
      "info" : "ExpressionStatement[25767-25849]:ExpressionStatement[27185-27267]"
    }, {
      "left" : "writer.append(\"<fields>\");",
      "right" : "writer.append(\"<fields>\");",
      "info" : "ExpressionStatement[25862-25888]:ExpressionStatement[27280-27306]"
    }, {
      "left" : "for (Field<?> field : fields.fields)",
      "right" : "for (Field<?> field : fields.fields)",
      "info" : "EnhancedForStatement[25902-26261]:EnhancedForStatement[27320-27679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25939-26261]:Block[27357-27679]"
    }, {
      "left" : "writer.append(\"<field name=\\\"\");",
      "right" : "writer.append(\"<field name=\\\"\");",
      "info" : "ExpressionStatement[25957-25989]:ExpressionStatement[27375-27407]"
    }, {
      "left" : "writer.append(escapeXML(field.getName()));",
      "right" : "writer.append(escapeXML(field.getName()));",
      "info" : "ExpressionStatement[26006-26048]:ExpressionStatement[27424-27466]"
    }, {
      "left" : "writer.append(\"\\\" \");",
      "right" : "writer.append(\"\\\" \");",
      "info" : "ExpressionStatement[26065-26086]:ExpressionStatement[27483-27504]"
    }, {
      "left" : "writer.append(\"type=\\\"\");",
      "right" : "writer.append(\"type=\\\"\");",
      "info" : "ExpressionStatement[26103-26128]:ExpressionStatement[27521-27546]"
    }, {
      "left" : "writer.append(field.getDataType().getTypeName().toUpperCase());",
      "right" : "writer.append(field.getDataType().getTypeName().toUpperCase());",
      "info" : "ExpressionStatement[26145-26208]:ExpressionStatement[27563-27626]"
    }, {
      "left" : "writer.append(\"\\\"/>\");",
      "right" : "writer.append(\"\\\"/>\");",
      "info" : "ExpressionStatement[26225-26247]:ExpressionStatement[27643-27665]"
    }, {
      "left" : "writer.append(\"</fields>\");",
      "right" : "writer.append(\"</fields>\");",
      "info" : "ExpressionStatement[26275-26302]:ExpressionStatement[27693-27720]"
    }, {
      "left" : "writer.append(\"<records>\");",
      "right" : "writer.append(\"<records>\");",
      "info" : "ExpressionStatement[26315-26342]:ExpressionStatement[27733-27760]"
    }, {
      "left" : "for (Record record : this)",
      "right" : "for (Record record : this)",
      "info" : "EnhancedForStatement[26356-27148]:EnhancedForStatement[27774-28566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26383-27148]:Block[27801-28566]"
    }, {
      "left" : "writer.append(\"<record>\");",
      "right" : "writer.append(\"<record>\");",
      "info" : "ExpressionStatement[26401-26427]:ExpressionStatement[27819-27845]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[26445-27089]:ForStatement[27863-28507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26504-27089]:Block[27922-28507]"
    }, {
      "left" : "Object value = record.getValue(index);",
      "right" : "Object value = record.getValue(index);",
      "info" : "VariableDeclarationStatement[26526-26564]:VariableDeclarationStatement[27944-27982]"
    }, {
      "left" : "writer.append(\"<value field=\\\"\");",
      "right" : "writer.append(\"<value field=\\\"\");",
      "info" : "ExpressionStatement[26586-26619]:ExpressionStatement[28004-28037]"
    }, {
      "left" : "writer.append(escapeXML(fields.fields[index].getName()));",
      "right" : "writer.append(escapeXML(fields.fields[index].getName()));",
      "info" : "ExpressionStatement[26640-26697]:ExpressionStatement[28058-28115]"
    }, {
      "left" : "writer.append(\"\\\"\");",
      "right" : "writer.append(\"\\\"\");",
      "info" : "ExpressionStatement[26718-26738]:ExpressionStatement[28136-28156]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[26760-27071]:IfStatement[28178-28489]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26779-26847]:Block[28197-28265]"
    }, {
      "left" : "writer.append(\"/>\");",
      "right" : "writer.append(\"/>\");",
      "info" : "ExpressionStatement[26805-26825]:ExpressionStatement[28223-28243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26873-27071]:Block[28291-28489]"
    }, {
      "left" : "writer.append(\">\");",
      "right" : "writer.append(\">\");",
      "info" : "ExpressionStatement[26899-26918]:ExpressionStatement[28317-28336]"
    }, {
      "left" : "writer.append(escapeXML(format0(value, false, false)));",
      "right" : "writer.append(escapeXML(format0(value, false, false)));",
      "info" : "ExpressionStatement[26943-26998]:ExpressionStatement[28361-28416]"
    }, {
      "left" : "writer.append(\"</value>\");",
      "right" : "writer.append(\"</value>\");",
      "info" : "ExpressionStatement[27023-27049]:ExpressionStatement[28441-28467]"
    }, {
      "left" : "writer.append(\"</record>\");",
      "right" : "writer.append(\"</record>\");",
      "info" : "ExpressionStatement[27107-27134]:ExpressionStatement[28525-28552]"
    }, {
      "left" : "writer.append(\"</records>\");",
      "right" : "writer.append(\"</records>\");",
      "info" : "ExpressionStatement[27162-27190]:ExpressionStatement[28580-28608]"
    }, {
      "left" : "writer.append(\"</result>\");",
      "right" : "writer.append(\"</result>\");",
      "info" : "ExpressionStatement[27203-27230]:ExpressionStatement[28621-28648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27279-27359]:Block[28697-28777]"
    }, {
      "left" : "throw new IOException(\"Exception while writing XML\", e);",
      "right" : "throw new IOException(\"Exception while writing XML\", e);",
      "info" : "ThrowStatement[27293-27349]:ThrowStatement[28711-28767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27420-27541]:Block[28838-28959]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[27430-27471]:VariableDeclarationStatement[28848-28889]"
    }, {
      "left" : "formatInsert(writer);",
      "right" : "formatInsert(writer);",
      "info" : "ExpressionStatement[27480-27501]:ExpressionStatement[28898-28919]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[27510-27535]:ReturnStatement[28928-28953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27613-27674]:Block[29031-29092]"
    }, {
      "left" : "formatInsert(new OutputStreamWriter(stream));",
      "right" : "formatInsert(new OutputStreamWriter(stream));",
      "info" : "ExpressionStatement[27623-27668]:ExpressionStatement[29041-29086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27740-28044]:Block[29158-29462]"
    }, {
      "left" : "Table<?> table = null;",
      "right" : "Table<?> table = null;",
      "info" : "VariableDeclarationStatement[27750-27772]:VariableDeclarationStatement[29168-29190]"
    }, {
      "left" : "if (records.size() > 0 && records.get(0) instanceof TableRecord)",
      "right" : "if (records.size() > 0 && records.get(0) instanceof TableRecord)",
      "info" : "IfStatement[27782-27912]:IfStatement[29200-29330]"
    }, {
      "left" : "table = ((TableRecord<?>) records.get(0)).getTable();",
      "right" : "table = ((TableRecord<?>) records.get(0)).getTable();",
      "info" : "ExpressionStatement[27859-27912]:ExpressionStatement[29277-29330]"
    }, {
      "left" : "if (table == null)",
      "right" : "if (table == null)",
      "info" : "IfStatement[27922-27990]:IfStatement[29340-29408]"
    }, {
      "left" : "table = table(name(\"UNKNOWN_TABLE\"));",
      "right" : "table = table(name(\"UNKNOWN_TABLE\"));",
      "info" : "ExpressionStatement[27953-27990]:ExpressionStatement[29371-29408]"
    }, {
      "left" : "formatInsert(writer, table, fields());",
      "right" : "formatInsert(writer, table, fields());",
      "info" : "ExpressionStatement[28000-28038]:ExpressionStatement[29418-29456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28128-28259]:Block[29546-29677]"
    }, {
      "left" : "StringWriter writer = new StringWriter();",
      "right" : "StringWriter writer = new StringWriter();",
      "info" : "VariableDeclarationStatement[28138-28179]:VariableDeclarationStatement[29556-29597]"
    }, {
      "left" : "formatInsert(writer, table, f);",
      "right" : "formatInsert(writer, table, f);",
      "info" : "ExpressionStatement[28188-28219]:ExpressionStatement[29606-29637]"
    }, {
      "left" : "return writer.toString();",
      "right" : "return writer.toString();",
      "info" : "ReturnStatement[28228-28253]:ReturnStatement[29646-29671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28362-28433]:Block[29780-29851]"
    }, {
      "left" : "formatInsert(new OutputStreamWriter(stream), table, f);",
      "right" : "formatInsert(new OutputStreamWriter(stream), table, f);",
      "info" : "ExpressionStatement[28372-28427]:ExpressionStatement[29790-29845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28530-28925]:Block[29948-30343]"
    }, {
      "left" : "DSLContext ctx = DSL.using(configuration());",
      "right" : "DSLContext ctx = DSL.using(configuration());",
      "info" : "VariableDeclarationStatement[28540-28584]:VariableDeclarationStatement[29958-30002]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28594-28919]:TryStatement[30012-30337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28598-28796]:Block[30016-30214]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[28612-28786]:EnhancedForStatement[30030-30204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28634-28786]:Block[30052-30204]"
    }, {
      "left" : "writer.append(ctx.renderInlined(insertInto(table, f).values(record.intoArray())));",
      "right" : "writer.append(ctx.renderInlined(insertInto(table, f).values(record.intoArray())));",
      "info" : "ExpressionStatement[28652-28734]:ExpressionStatement[30070-30152]"
    }, {
      "left" : "writer.append(\";\\n\");",
      "right" : "writer.append(\";\\n\");",
      "info" : "ExpressionStatement[28751-28772]:ExpressionStatement[30169-30190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28835-28919]:Block[30253-30337]"
    }, {
      "left" : "throw new IOException(\"Exception while writing INSERTs\", e);",
      "right" : "throw new IOException(\"Exception while writing INSERTs\", e);",
      "info" : "ThrowStatement[28849-28909]:ThrowStatement[30267-30327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28977-30819]:Block[30395-32237]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[28987-30813]:TryStatement[30405-32231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28991-30701]:Block[30409-32119]"
    }, {
      "left" : "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "right" : "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();",
      "info" : "VariableDeclarationStatement[29005-29075]:VariableDeclarationStatement[30423-30493]"
    }, {
      "left" : "DocumentBuilder builder = factory.newDocumentBuilder();",
      "right" : "DocumentBuilder builder = factory.newDocumentBuilder();",
      "info" : "VariableDeclarationStatement[29088-29143]:VariableDeclarationStatement[30506-30561]"
    }, {
      "left" : "Document document = builder.newDocument();",
      "right" : "Document document = builder.newDocument();",
      "info" : "VariableDeclarationStatement[29156-29198]:VariableDeclarationStatement[30574-30616]"
    }, {
      "left" : "Element eResult = document.createElement(\"result\");",
      "right" : "Element eResult = document.createElement(\"result\");",
      "info" : "VariableDeclarationStatement[29212-29263]:VariableDeclarationStatement[30630-30681]"
    }, {
      "left" : "eResult.setAttribute(\"xmlns\", \"http://www.jooq.org/xsd/jooq-export-2.6.0.xsd\");",
      "right" : "eResult.setAttribute(\"xmlns\", \"http://www.jooq.org/xsd/jooq-export-2.6.0.xsd\");",
      "info" : "ExpressionStatement[29276-29355]:ExpressionStatement[30694-30773]"
    }, {
      "left" : "document.appendChild(eResult);",
      "right" : "document.appendChild(eResult);",
      "info" : "ExpressionStatement[29368-29398]:ExpressionStatement[30786-30816]"
    }, {
      "left" : "Element eFields = document.createElement(\"fields\");",
      "right" : "Element eFields = document.createElement(\"fields\");",
      "info" : "VariableDeclarationStatement[29412-29463]:VariableDeclarationStatement[30830-30881]"
    }, {
      "left" : "eResult.appendChild(eFields);",
      "right" : "eResult.appendChild(eFields);",
      "info" : "ExpressionStatement[29476-29505]:ExpressionStatement[30894-30923]"
    }, {
      "left" : "for (Field<?> field : fields.fields)",
      "right" : "for (Field<?> field : fields.fields)",
      "info" : "EnhancedForStatement[29519-29838]:EnhancedForStatement[30937-31256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29556-29838]:Block[30974-31256]"
    }, {
      "left" : "Element eField = document.createElement(\"field\");",
      "right" : "Element eField = document.createElement(\"field\");",
      "info" : "VariableDeclarationStatement[29574-29623]:VariableDeclarationStatement[30992-31041]"
    }, {
      "left" : "eField.setAttribute(\"name\", field.getName());",
      "right" : "eField.setAttribute(\"name\", field.getName());",
      "info" : "ExpressionStatement[29640-29685]:ExpressionStatement[31058-31103]"
    }, {
      "left" : "eField.setAttribute(\"type\", field.getDataType().getTypeName().toUpperCase());",
      "right" : "eField.setAttribute(\"type\", field.getDataType().getTypeName().toUpperCase());",
      "info" : "ExpressionStatement[29702-29779]:ExpressionStatement[31120-31197]"
    }, {
      "left" : "eFields.appendChild(eField);",
      "right" : "eFields.appendChild(eField);",
      "info" : "ExpressionStatement[29796-29824]:ExpressionStatement[31214-31242]"
    }, {
      "left" : "Element eRecords = document.createElement(\"records\");",
      "right" : "Element eRecords = document.createElement(\"records\");",
      "info" : "VariableDeclarationStatement[29852-29905]:VariableDeclarationStatement[31270-31323]"
    }, {
      "left" : "eResult.appendChild(eRecords);",
      "right" : "eResult.appendChild(eRecords);",
      "info" : "ExpressionStatement[29918-29948]:ExpressionStatement[31336-31366]"
    }, {
      "left" : "for (Record record : this)",
      "right" : "for (Record record : this)",
      "info" : "EnhancedForStatement[29962-30661]:EnhancedForStatement[31380-32079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29989-30661]:Block[31407-32079]"
    }, {
      "left" : "Element eRecord = document.createElement(\"record\");",
      "right" : "Element eRecord = document.createElement(\"record\");",
      "info" : "VariableDeclarationStatement[30007-30058]:VariableDeclarationStatement[31425-31476]"
    }, {
      "left" : "eRecords.appendChild(eRecord);",
      "right" : "eRecords.appendChild(eRecord);",
      "info" : "ExpressionStatement[30075-30105]:ExpressionStatement[31493-31523]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[30123-30647]:ForStatement[31541-32065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30182-30647]:Block[31600-32065]"
    }, {
      "left" : "Field<?> field = fields.fields[index];",
      "right" : "Field<?> field = fields.fields[index];",
      "info" : "VariableDeclarationStatement[30204-30242]:VariableDeclarationStatement[31622-31660]"
    }, {
      "left" : "Object value = record.getValue(index);",
      "right" : "Object value = record.getValue(index);",
      "info" : "VariableDeclarationStatement[30263-30301]:VariableDeclarationStatement[31681-31719]"
    }, {
      "left" : "Element eValue = document.createElement(\"value\");",
      "right" : "Element eValue = document.createElement(\"value\");",
      "info" : "VariableDeclarationStatement[30323-30372]:VariableDeclarationStatement[31741-31790]"
    }, {
      "left" : "eValue.setAttribute(\"field\", field.getName());",
      "right" : "eValue.setAttribute(\"field\", field.getName());",
      "info" : "ExpressionStatement[30393-30439]:ExpressionStatement[31811-31857]"
    }, {
      "left" : "eRecord.appendChild(eValue);",
      "right" : "eRecord.appendChild(eValue);",
      "info" : "ExpressionStatement[30460-30488]:ExpressionStatement[31878-31906]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[30510-30629]:IfStatement[31928-32047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30529-30629]:Block[31947-32047]"
    }, {
      "left" : "eValue.setTextContent(format0(value, false, false));",
      "right" : "eValue.setTextContent(format0(value, false, false));",
      "info" : "ExpressionStatement[30555-30607]:ExpressionStatement[31973-32025]"
    }, {
      "left" : "return document;",
      "right" : "return document;",
      "info" : "ReturnStatement[30675-30691]:ReturnStatement[32093-32109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30754-30813]:Block[32172-32231]"
    }, {
      "left" : "throw new RuntimeException(ignore);",
      "right" : "throw new RuntimeException(ignore);",
      "info" : "ThrowStatement[30768-30803]:ThrowStatement[32186-32221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30920-32669]:Block[32338-34087]"
    }, {
      "left" : "Attributes empty = new AttributesImpl();",
      "right" : "Attributes empty = new AttributesImpl();",
      "info" : "VariableDeclarationStatement[30930-30970]:VariableDeclarationStatement[32348-32388]"
    }, {
      "left" : "handler.startDocument();",
      "right" : "handler.startDocument();",
      "info" : "ExpressionStatement[30980-31004]:ExpressionStatement[32398-32422]"
    }, {
      "left" : "handler.startPrefixMapping(\"\", \"http://www.jooq.org/xsd/jooq-export-2.6.0.xsd\");",
      "right" : "handler.startPrefixMapping(\"\", \"http://www.jooq.org/xsd/jooq-export-2.6.0.xsd\");",
      "info" : "ExpressionStatement[31013-31093]:ExpressionStatement[32431-32511]"
    }, {
      "left" : "handler.startElement(\"\", \"\", \"result\", empty);",
      "right" : "handler.startElement(\"\", \"\", \"result\", empty);",
      "info" : "ExpressionStatement[31102-31148]:ExpressionStatement[32520-32566]"
    }, {
      "left" : "handler.startElement(\"\", \"\", \"fields\", empty);",
      "right" : "handler.startElement(\"\", \"\", \"fields\", empty);",
      "info" : "ExpressionStatement[31157-31203]:ExpressionStatement[32575-32621]"
    }, {
      "left" : "for (Field<?> field : fields.fields)",
      "right" : "for (Field<?> field : fields.fields)",
      "info" : "EnhancedForStatement[31213-31606]:EnhancedForStatement[32631-33024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31250-31606]:Block[32668-33024]"
    }, {
      "left" : "AttributesImpl attrs = new AttributesImpl();",
      "right" : "AttributesImpl attrs = new AttributesImpl();",
      "info" : "VariableDeclarationStatement[31264-31308]:VariableDeclarationStatement[32682-32726]"
    }, {
      "left" : "attrs.addAttribute(\"\", \"\", \"name\", \"CDATA\", field.getName());",
      "right" : "attrs.addAttribute(\"\", \"\", \"name\", \"CDATA\", field.getName());",
      "info" : "ExpressionStatement[31321-31382]:ExpressionStatement[32739-32800]"
    }, {
      "left" : "attrs.addAttribute(\"\", \"\", \"type\", \"CDATA\", field.getDataType().getTypeName().toUpperCase());",
      "right" : "attrs.addAttribute(\"\", \"\", \"type\", \"CDATA\", field.getDataType().getTypeName().toUpperCase());",
      "info" : "ExpressionStatement[31395-31488]:ExpressionStatement[32813-32906]"
    }, {
      "left" : "handler.startElement(\"\", \"\", \"field\", attrs);",
      "right" : "handler.startElement(\"\", \"\", \"field\", attrs);",
      "info" : "ExpressionStatement[31502-31547]:ExpressionStatement[32920-32965]"
    }, {
      "left" : "handler.endElement(\"\", \"\", \"field\");",
      "right" : "handler.endElement(\"\", \"\", \"field\");",
      "info" : "ExpressionStatement[31560-31596]:ExpressionStatement[32978-33014]"
    }, {
      "left" : "handler.endElement(\"\", \"\", \"fields\");",
      "right" : "handler.endElement(\"\", \"\", \"fields\");",
      "info" : "ExpressionStatement[31616-31653]:ExpressionStatement[33034-33071]"
    }, {
      "left" : "handler.startElement(\"\", \"\", \"records\", empty);",
      "right" : "handler.startElement(\"\", \"\", \"records\", empty);",
      "info" : "ExpressionStatement[31662-31709]:ExpressionStatement[33080-33127]"
    }, {
      "left" : "for (Record record : this)",
      "right" : "for (Record record : this)",
      "info" : "EnhancedForStatement[31719-32522]:EnhancedForStatement[33137-33940]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31746-32522]:Block[33164-33940]"
    }, {
      "left" : "handler.startElement(\"\", \"\", \"record\", empty);",
      "right" : "handler.startElement(\"\", \"\", \"record\", empty);",
      "info" : "ExpressionStatement[31760-31806]:ExpressionStatement[33178-33224]"
    }, {
      "left" : "for (int index = 0; index < fields.fields.length; index++)",
      "right" : "for (int index = 0; index < fields.fields.length; index++)",
      "info" : "ForStatement[31820-32461]:ForStatement[33238-33879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31879-32461]:Block[33297-33879]"
    }, {
      "left" : "Field<?> field = fields.fields[index];",
      "right" : "Field<?> field = fields.fields[index];",
      "info" : "VariableDeclarationStatement[31897-31935]:VariableDeclarationStatement[33315-33353]"
    }, {
      "left" : "Object value = record.getValue(index);",
      "right" : "Object value = record.getValue(index);",
      "info" : "VariableDeclarationStatement[31952-31990]:VariableDeclarationStatement[33370-33408]"
    }, {
      "left" : "AttributesImpl attrs = new AttributesImpl();",
      "right" : "AttributesImpl attrs = new AttributesImpl();",
      "info" : "VariableDeclarationStatement[32008-32052]:VariableDeclarationStatement[33426-33470]"
    }, {
      "left" : "attrs.addAttribute(\"\", \"\", \"field\", \"CDATA\", field.getName());",
      "right" : "attrs.addAttribute(\"\", \"\", \"field\", \"CDATA\", field.getName());",
      "info" : "ExpressionStatement[32069-32131]:ExpressionStatement[33487-33549]"
    }, {
      "left" : "handler.startElement(\"\", \"\", \"value\", attrs);",
      "right" : "handler.startElement(\"\", \"\", \"value\", attrs);",
      "info" : "ExpressionStatement[32149-32194]:ExpressionStatement[33567-33612]"
    }, {
      "left" : "if (value != null)",
      "right" : "if (value != null)",
      "info" : "IfStatement[32212-32393]:IfStatement[33630-33811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32231-32393]:Block[33649-33811]"
    }, {
      "left" : "char[] chars = format0(value, false, false).toCharArray();",
      "right" : "char[] chars = format0(value, false, false).toCharArray();",
      "info" : "VariableDeclarationStatement[32253-32311]:VariableDeclarationStatement[33671-33729]"
    }, {
      "left" : "handler.characters(chars, 0, chars.length);",
      "right" : "handler.characters(chars, 0, chars.length);",
      "info" : "ExpressionStatement[32332-32375]:ExpressionStatement[33750-33793]"
    }, {
      "left" : "handler.endElement(\"\", \"\", \"value\");",
      "right" : "handler.endElement(\"\", \"\", \"value\");",
      "info" : "ExpressionStatement[32411-32447]:ExpressionStatement[33829-33865]"
    }, {
      "left" : "handler.endElement(\"\", \"\", \"record\");",
      "right" : "handler.endElement(\"\", \"\", \"record\");",
      "info" : "ExpressionStatement[32475-32512]:ExpressionStatement[33893-33930]"
    }, {
      "left" : "handler.endElement(\"\", \"\", \"records\");",
      "right" : "handler.endElement(\"\", \"\", \"records\");",
      "info" : "ExpressionStatement[32532-32570]:ExpressionStatement[33950-33988]"
    }, {
      "left" : "handler.endPrefixMapping(\"\");",
      "right" : "handler.endPrefixMapping(\"\");",
      "info" : "ExpressionStatement[32579-32608]:ExpressionStatement[33997-34026]"
    }, {
      "left" : "handler.endDocument();",
      "right" : "handler.endDocument();",
      "info" : "ExpressionStatement[32617-32639]:ExpressionStatement[34035-34057]"
    }, {
      "left" : "return handler;",
      "right" : "return handler;",
      "info" : "ReturnStatement[32648-32663]:ReturnStatement[34066-34081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32721-32904]:Block[34139-34322]"
    }, {
      "left" : "return StringUtils.replaceEach(string,\n            new String[] { \"\\\"\", \"'\", \"<\", \">\", \"&\" },\n            new String[] { \"&quot;\", \"&apos;\", \"&lt;\", \"&gt;\", \"&amp;\"});",
      "right" : "return StringUtils.replaceEach(string,\n            new String[] { \"\\\"\", \"'\", \"<\", \">\", \"&\" },\n            new String[] { \"&quot;\", \"&apos;\", \"&lt;\", \"&gt;\", \"&amp;\"});",
      "info" : "ReturnStatement[32731-32898]:ReturnStatement[34149-34316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32974-33165]:Block[34392-34583]"
    }, {
      "left" : "List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();",
      "right" : "List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();",
      "info" : "VariableDeclarationStatement[32984-33054]:VariableDeclarationStatement[34402-34472]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[33064-33137]:EnhancedForStatement[34482-34555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33086-33137]:Block[34504-34555]"
    }, {
      "left" : "list.add(record.intoMap());",
      "right" : "list.add(record.intoMap());",
      "info" : "ExpressionStatement[33100-33127]:ExpressionStatement[34518-34545]"
    }, {
      "left" : "return list;",
      "right" : "return list;",
      "info" : "ReturnStatement[33147-33159]:ReturnStatement[34565-34577]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33234-33297]:Block[34652-34715]"
    }, {
      "left" : "return intoMap0(indexOrFail(fieldsRow(), key));",
      "right" : "return intoMap0(indexOrFail(fieldsRow(), key));",
      "info" : "ReturnStatement[33244-33291]:ReturnStatement[34662-34709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33367-33414]:Block[34785-34832]"
    }, {
      "left" : "return intoMap0(keyFieldIndex);",
      "right" : "return intoMap0(keyFieldIndex);",
      "info" : "ReturnStatement[33377-33408]:ReturnStatement[34795-34826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33486-33538]:Block[34904-34956]"
    }, {
      "left" : "return intoMap(field(keyFieldName));",
      "right" : "return intoMap(field(keyFieldName));",
      "info" : "ReturnStatement[33496-33532]:ReturnStatement[34914-34950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33608-33660]:Block[35026-35078]"
    }, {
      "left" : "return intoMap(field(keyFieldName));",
      "right" : "return intoMap(field(keyFieldName));",
      "info" : "ReturnStatement[33618-33654]:ReturnStatement[35036-35072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33722-34024]:Block[35140-35442]"
    }, {
      "left" : "Map<K, R> map = new LinkedHashMap<K, R>();",
      "right" : "Map<K, R> map = new LinkedHashMap<K, R>();",
      "info" : "VariableDeclarationStatement[33732-33774]:VariableDeclarationStatement[35150-35192]"
    }, {
      "left" : "for (R record : this)\n            if (map.put((K) record.getValue(keyFieldIndex), record) != null)\n                throw new InvalidResultException(\"Key \" + keyFieldIndex + \" is not unique in Result for \" + this);",
      "right" : "for (R record : this)\n            if (map.put((K) record.getValue(keyFieldIndex), record) != null)\n                throw new InvalidResultException(\"Key \" + keyFieldIndex + \" is not unique in Result for \" + this);",
      "info" : "EnhancedForStatement[33784-33997]:EnhancedForStatement[35202-35415]"
    }, {
      "left" : "if (map.put((K) record.getValue(keyFieldIndex), record) != null)",
      "right" : "if (map.put((K) record.getValue(keyFieldIndex), record) != null)",
      "info" : "IfStatement[33818-33997]:IfStatement[35236-35415]"
    }, {
      "left" : "throw new InvalidResultException(\"Key \" + keyFieldIndex + \" is not unique in Result for \" + this);",
      "right" : "throw new InvalidResultException(\"Key \" + keyFieldIndex + \" is not unique in Result for \" + this);",
      "info" : "ThrowStatement[33899-33997]:ThrowStatement[35317-35415]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[34007-34018]:ReturnStatement[35425-35436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34112-34267]:Block[35530-35685]"
    }, {
      "left" : "int kIndex = indexOrFail(fieldsRow(), key);",
      "right" : "int kIndex = indexOrFail(fieldsRow(), key);",
      "info" : "VariableDeclarationStatement[34122-34165]:VariableDeclarationStatement[35540-35583]"
    }, {
      "left" : "int vIndex = indexOrFail(fieldsRow(), value);",
      "right" : "int vIndex = indexOrFail(fieldsRow(), value);",
      "info" : "VariableDeclarationStatement[34174-34219]:VariableDeclarationStatement[35592-35637]"
    }, {
      "left" : "return intoMap0(kIndex, vIndex);",
      "right" : "return intoMap0(kIndex, vIndex);",
      "info" : "ReturnStatement[34229-34261]:ReturnStatement[35647-35679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34358-34422]:Block[35776-35840]"
    }, {
      "left" : "return intoMap0(keyFieldIndex, valueFieldIndex);",
      "right" : "return intoMap0(keyFieldIndex, valueFieldIndex);",
      "info" : "ReturnStatement[34368-34416]:ReturnStatement[35786-35834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34517-34592]:Block[35935-36010]"
    }, {
      "left" : "return intoMap(field(keyFieldName), field(valueFieldName));",
      "right" : "return intoMap(field(keyFieldName), field(valueFieldName));",
      "info" : "ReturnStatement[34527-34586]:ReturnStatement[35945-36004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34683-34758]:Block[36101-36176]"
    }, {
      "left" : "return intoMap(field(keyFieldName), field(valueFieldName));",
      "right" : "return intoMap(field(keyFieldName), field(valueFieldName));",
      "info" : "ReturnStatement[34693-34752]:ReturnStatement[36111-36170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34828-35137]:Block[36246-36555]"
    }, {
      "left" : "Map<K, V> map = new LinkedHashMap<K, V>();",
      "right" : "Map<K, V> map = new LinkedHashMap<K, V>();",
      "info" : "VariableDeclarationStatement[34838-34880]:VariableDeclarationStatement[36256-36298]"
    }, {
      "left" : "for (R record : this)\n            if (map.put((K) record.getValue(kIndex), (V) record.getValue(vIndex)) != null)\n                throw new InvalidResultException(\"Key \" + kIndex + \" is not unique in Result for \" + this);",
      "right" : "for (R record : this)\n            if (map.put((K) record.getValue(kIndex), (V) record.getValue(vIndex)) != null)\n                throw new InvalidResultException(\"Key \" + kIndex + \" is not unique in Result for \" + this);",
      "info" : "EnhancedForStatement[34890-35110]:EnhancedForStatement[36308-36528]"
    }, {
      "left" : "if (map.put((K) record.getValue(kIndex), (V) record.getValue(vIndex)) != null)",
      "right" : "if (map.put((K) record.getValue(kIndex), (V) record.getValue(vIndex)) != null)",
      "info" : "IfStatement[34924-35110]:IfStatement[36342-36528]"
    }, {
      "left" : "throw new InvalidResultException(\"Key \" + kIndex + \" is not unique in Result for \" + this);",
      "right" : "throw new InvalidResultException(\"Key \" + kIndex + \" is not unique in Result for \" + this);",
      "info" : "ThrowStatement[35019-35110]:ThrowStatement[36437-36528]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[35120-35131]:ReturnStatement[36538-36549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35216-35272]:Block[36634-36690]"
    }, {
      "left" : "return intoMap(fields(keyFieldIndexes));",
      "right" : "return intoMap(fields(keyFieldIndexes));",
      "info" : "ReturnStatement[35226-35266]:ReturnStatement[36644-36684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35352-35406]:Block[36770-36824]"
    }, {
      "left" : "return intoMap(fields(keyFieldNames));",
      "right" : "return intoMap(fields(keyFieldNames));",
      "info" : "ReturnStatement[35362-35400]:ReturnStatement[36780-36818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35484-35538]:Block[36902-36956]"
    }, {
      "left" : "return intoMap(fields(keyFieldNames));",
      "right" : "return intoMap(fields(keyFieldNames));",
      "info" : "ReturnStatement[35494-35532]:ReturnStatement[36912-36950]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35611-36171]:Block[37029-37589]"
    }, {
      "left" : "if (keys == null)",
      "right" : "if (keys == null)",
      "info" : "IfStatement[35621-35683]:IfStatement[37039-37101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35639-35683]:Block[37057-37101]"
    }, {
      "left" : "keys = new Field[0];",
      "right" : "keys = new Field[0];",
      "info" : "ExpressionStatement[35653-35673]:ExpressionStatement[37071-37091]"
    }, {
      "left" : "Map<Record, R> map = new LinkedHashMap<Record, R>();",
      "right" : "Map<Record, R> map = new LinkedHashMap<Record, R>();",
      "info" : "VariableDeclarationStatement[35693-35745]:VariableDeclarationStatement[37111-37163]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[35754-36144]:EnhancedForStatement[37172-37562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35776-36144]:Block[37194-37562]"
    }, {
      "left" : "RecordImpl key = new RecordImpl(keys);",
      "right" : "RecordImpl key = new RecordImpl(keys);",
      "info" : "VariableDeclarationStatement[35790-35828]:VariableDeclarationStatement[37208-37246]"
    }, {
      "left" : "for (Field<?> field : keys)",
      "right" : "for (Field<?> field : keys)",
      "info" : "EnhancedForStatement[35842-35945]:EnhancedForStatement[37260-37363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35870-35945]:Block[37288-37363]"
    }, {
      "left" : "Utils.copyValue(key, field, record, field);",
      "right" : "Utils.copyValue(key, field, record, field);",
      "info" : "ExpressionStatement[35888-35931]:ExpressionStatement[37306-37349]"
    }, {
      "left" : "if (map.put(key, record) != null)",
      "right" : "if (map.put(key, record) != null)",
      "info" : "IfStatement[35959-36134]:IfStatement[37377-37552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35993-36134]:Block[37411-37552]"
    }, {
      "left" : "throw new InvalidResultException(\"Key list \" + Arrays.asList(keys) + \" is not unique in Result for \" + this);",
      "right" : "throw new InvalidResultException(\"Key list \" + Arrays.asList(keys) + \" is not unique in Result for \" + this);",
      "info" : "ThrowStatement[36011-36120]:ThrowStatement[37429-37538]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[36154-36165]:ReturnStatement[37572-37583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36280-36342]:Block[37698-37760]"
    }, {
      "left" : "return intoMap(fields(keyFieldIndexes), type);",
      "right" : "return intoMap(fields(keyFieldIndexes), type);",
      "info" : "ReturnStatement[36290-36336]:ReturnStatement[37708-37754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36452-36512]:Block[37870-37930]"
    }, {
      "left" : "return intoMap(fields(keyFieldNames), type);",
      "right" : "return intoMap(fields(keyFieldNames), type);",
      "info" : "ReturnStatement[36462-36506]:ReturnStatement[37880-37924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36620-36680]:Block[38038-38098]"
    }, {
      "left" : "return intoMap(fields(keyFieldNames), type);",
      "right" : "return intoMap(fields(keyFieldNames), type);",
      "info" : "ReturnStatement[36630-36674]:ReturnStatement[38048-38092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36783-36892]:Block[38201-38310]"
    }, {
      "left" : "return intoMap(keys, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoMap(keys, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[36793-36886]:ReturnStatement[38211-38304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37011-37075]:Block[38429-38493]"
    }, {
      "left" : "return intoMap(fields(keyFieldIndexes), mapper);",
      "right" : "return intoMap(fields(keyFieldIndexes), mapper);",
      "info" : "ReturnStatement[37021-37069]:ReturnStatement[38439-38487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37195-37257]:Block[38613-38675]"
    }, {
      "left" : "return intoMap(fields(keyFieldNames), mapper);",
      "right" : "return intoMap(fields(keyFieldNames), mapper);",
      "info" : "ReturnStatement[37205-37251]:ReturnStatement[38623-38669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37375-37437]:Block[38793-38855]"
    }, {
      "left" : "return intoMap(fields(keyFieldNames), mapper);",
      "right" : "return intoMap(fields(keyFieldNames), mapper);",
      "info" : "ReturnStatement[37385-37431]:ReturnStatement[38803-38849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37550-38134]:Block[38968-39552]"
    }, {
      "left" : "if (keys == null)",
      "right" : "if (keys == null)",
      "info" : "IfStatement[37560-37622]:IfStatement[38978-39040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37578-37622]:Block[38996-39040]"
    }, {
      "left" : "keys = new Field[0];",
      "right" : "keys = new Field[0];",
      "info" : "ExpressionStatement[37592-37612]:ExpressionStatement[39010-39030]"
    }, {
      "left" : "Map<List<?>, E> map = new LinkedHashMap<List<?>, E>();",
      "right" : "Map<List<?>, E> map = new LinkedHashMap<List<?>, E>();",
      "info" : "VariableDeclarationStatement[37632-37686]:VariableDeclarationStatement[39050-39104]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[37696-38107]:EnhancedForStatement[39114-39525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37718-38107]:Block[39136-39525]"
    }, {
      "left" : "List<Object> keyValueList = new ArrayList<Object>();",
      "right" : "List<Object> keyValueList = new ArrayList<Object>();",
      "info" : "VariableDeclarationStatement[37732-37784]:VariableDeclarationStatement[39150-39202]"
    }, {
      "left" : "for (Field<?> key : keys)",
      "right" : "for (Field<?> key : keys)",
      "info" : "EnhancedForStatement[37797-37894]:EnhancedForStatement[39215-39312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37823-37894]:Block[39241-39312]"
    }, {
      "left" : "keyValueList.add(record.getValue(key));",
      "right" : "keyValueList.add(record.getValue(key));",
      "info" : "ExpressionStatement[37841-37880]:ExpressionStatement[39259-39298]"
    }, {
      "left" : "if (map.put(keyValueList, mapper.map(record)) != null)",
      "right" : "if (map.put(keyValueList, mapper.map(record)) != null)",
      "info" : "IfStatement[37908-38097]:IfStatement[39326-39515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37963-38097]:Block[39381-39515]"
    }, {
      "left" : "throw new InvalidResultException(\"Key list \" + keyValueList + \" is not unique in Result for \" + this);",
      "right" : "throw new InvalidResultException(\"Key list \" + keyValueList + \" is not unique in Result for \" + this);",
      "info" : "ThrowStatement[37981-38083]:ThrowStatement[39399-39501]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[38117-38128]:ReturnStatement[39535-39546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38220-38555]:Block[39638-39973]"
    }, {
      "left" : "Map<S, R> map = new LinkedHashMap<S, R>();",
      "right" : "Map<S, R> map = new LinkedHashMap<S, R>();",
      "info" : "VariableDeclarationStatement[38230-38272]:VariableDeclarationStatement[39648-39690]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[38282-38528]:EnhancedForStatement[39700-39946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38304-38528]:Block[39722-39946]"
    }, {
      "left" : "S key = record.into(table);",
      "right" : "S key = record.into(table);",
      "info" : "VariableDeclarationStatement[38318-38345]:VariableDeclarationStatement[39736-39763]"
    }, {
      "left" : "if (map.put(key, record) != null)",
      "right" : "if (map.put(key, record) != null)",
      "info" : "IfStatement[38359-38518]:IfStatement[39777-39936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38393-38518]:Block[39811-39936]"
    }, {
      "left" : "throw new InvalidResultException(\"Key list \" + key + \" is not unique in Result for \" + this);",
      "right" : "throw new InvalidResultException(\"Key list \" + key + \" is not unique in Result for \" + this);",
      "info" : "ThrowStatement[38411-38504]:ThrowStatement[39829-39922]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[38538-38549]:ReturnStatement[39956-39967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38669-38779]:Block[40087-40197]"
    }, {
      "left" : "return intoMap(table, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoMap(table, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[38679-38773]:ReturnStatement[40097-40191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38903-39250]:Block[40321-40668]"
    }, {
      "left" : "Map<S, E> map = new LinkedHashMap<S, E>();",
      "right" : "Map<S, E> map = new LinkedHashMap<S, E>();",
      "info" : "VariableDeclarationStatement[38913-38955]:VariableDeclarationStatement[40331-40373]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[38965-39223]:EnhancedForStatement[40383-40641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38987-39223]:Block[40405-40641]"
    }, {
      "left" : "S key = record.into(table);",
      "right" : "S key = record.into(table);",
      "info" : "VariableDeclarationStatement[39001-39028]:VariableDeclarationStatement[40419-40446]"
    }, {
      "left" : "if (map.put(key, mapper.map(record)) != null)",
      "right" : "if (map.put(key, mapper.map(record)) != null)",
      "info" : "IfStatement[39042-39213]:IfStatement[40460-40631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39088-39213]:Block[40506-40631]"
    }, {
      "left" : "throw new InvalidResultException(\"Key list \" + key + \" is not unique in Result for \" + this);",
      "right" : "throw new InvalidResultException(\"Key list \" + key + \" is not unique in Result for \" + this);",
      "info" : "ThrowStatement[39106-39199]:ThrowStatement[40524-40617]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[39233-39244]:ReturnStatement[40651-40662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39349-39467]:Block[40767-40885]"
    }, {
      "left" : "return intoMap(keyFieldIndex, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoMap(keyFieldIndex, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[39359-39461]:ReturnStatement[40777-40879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39568-39685]:Block[40986-41103]"
    }, {
      "left" : "return intoMap(keyFieldName, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoMap(keyFieldName, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[39578-39679]:ReturnStatement[40996-41097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39784-39901]:Block[41202-41319]"
    }, {
      "left" : "return intoMap(keyFieldName, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoMap(keyFieldName, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[39794-39895]:ReturnStatement[41212-41313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39998-40106]:Block[41416-41524]"
    }, {
      "left" : "return intoMap(key, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoMap(key, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[40008-40100]:ReturnStatement[41426-41518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40215-40270]:Block[41633-41688]"
    }, {
      "left" : "return intoMap0(keyFieldIndex, mapper);",
      "right" : "return intoMap0(keyFieldIndex, mapper);",
      "info" : "ReturnStatement[40225-40264]:ReturnStatement[41643-41682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40381-40441]:Block[41799-41859]"
    }, {
      "left" : "return intoMap(field(keyFieldName), mapper);",
      "right" : "return intoMap(field(keyFieldName), mapper);",
      "info" : "ReturnStatement[40391-40435]:ReturnStatement[41809-41853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40550-40610]:Block[41968-42028]"
    }, {
      "left" : "return intoMap(field(keyFieldName), mapper);",
      "right" : "return intoMap(field(keyFieldName), mapper);",
      "info" : "ReturnStatement[40560-40604]:ReturnStatement[41978-42022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40717-40788]:Block[42135-42206]"
    }, {
      "left" : "return intoMap0(indexOrFail(fieldsRow(), key), mapper);",
      "right" : "return intoMap0(indexOrFail(fieldsRow(), key), mapper);",
      "info" : "ReturnStatement[40727-40782]:ReturnStatement[42145-42200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40888-41202]:Block[42306-42620]"
    }, {
      "left" : "Map<K, E> map = new LinkedHashMap<K, E>();",
      "right" : "Map<K, E> map = new LinkedHashMap<K, E>();",
      "info" : "VariableDeclarationStatement[40898-40940]:VariableDeclarationStatement[42316-42358]"
    }, {
      "left" : "for (R record : this)\n            if (map.put((K) record.getValue(keyFieldIndex), mapper.map(record)) != null)\n                throw new InvalidResultException(\"Key \" + keyFieldIndex + \" is not unique in Result for \" + this);",
      "right" : "for (R record : this)\n            if (map.put((K) record.getValue(keyFieldIndex), mapper.map(record)) != null)\n                throw new InvalidResultException(\"Key \" + keyFieldIndex + \" is not unique in Result for \" + this);",
      "info" : "EnhancedForStatement[40950-41175]:EnhancedForStatement[42368-42593]"
    }, {
      "left" : "if (map.put((K) record.getValue(keyFieldIndex), mapper.map(record)) != null)",
      "right" : "if (map.put((K) record.getValue(keyFieldIndex), mapper.map(record)) != null)",
      "info" : "IfStatement[40984-41175]:IfStatement[42402-42593]"
    }, {
      "left" : "throw new InvalidResultException(\"Key \" + keyFieldIndex + \" is not unique in Result for \" + this);",
      "right" : "throw new InvalidResultException(\"Key \" + keyFieldIndex + \" is not unique in Result for \" + this);",
      "info" : "ThrowStatement[41077-41175]:ThrowStatement[42495-42593]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[41185-41196]:ReturnStatement[42603-42614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41282-41348]:Block[42700-42766]"
    }, {
      "left" : "return intoGroups0(indexOrFail(fieldsRow(), key));",
      "right" : "return intoGroups0(indexOrFail(fieldsRow(), key));",
      "info" : "ReturnStatement[41292-41342]:ReturnStatement[42710-42760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41429-41479]:Block[42847-42897]"
    }, {
      "left" : "return intoGroups0(keyFieldIndex);",
      "right" : "return intoGroups0(keyFieldIndex);",
      "info" : "ReturnStatement[41439-41473]:ReturnStatement[42857-42891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41562-41617]:Block[42980-43035]"
    }, {
      "left" : "return intoGroups(field(keyFieldName));",
      "right" : "return intoGroups(field(keyFieldName));",
      "info" : "ReturnStatement[41572-41611]:ReturnStatement[42990-43029]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41698-41753]:Block[43116-43171]"
    }, {
      "left" : "return intoGroups(field(keyFieldName));",
      "right" : "return intoGroups(field(keyFieldName));",
      "info" : "ReturnStatement[41708-41747]:ReturnStatement[43126-43165]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41826-42252]:Block[43244-43670]"
    }, {
      "left" : "Map<K, Result<R>> map = new LinkedHashMap<K, Result<R>>();",
      "right" : "Map<K, Result<R>> map = new LinkedHashMap<K, Result<R>>();",
      "info" : "VariableDeclarationStatement[41836-41894]:VariableDeclarationStatement[43254-43312]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[41904-42225]:EnhancedForStatement[43322-43643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41926-42225]:Block[43344-43643]"
    }, {
      "left" : "K val = (K) record.getValue(keyFieldIndex);",
      "right" : "K val = (K) record.getValue(keyFieldIndex);",
      "info" : "VariableDeclarationStatement[41940-41983]:VariableDeclarationStatement[43358-43401]"
    }, {
      "left" : "Result<R> result = map.get(val);",
      "right" : "Result<R> result = map.get(val);",
      "info" : "VariableDeclarationStatement[41996-42028]:VariableDeclarationStatement[43414-43446]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[42042-42182]:IfStatement[43460-43600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42062-42182]:Block[43480-43600]"
    }, {
      "left" : "result = new ResultImpl<R>(configuration, fields);",
      "right" : "result = new ResultImpl<R>(configuration, fields);",
      "info" : "ExpressionStatement[42080-42130]:ExpressionStatement[43498-43548]"
    }, {
      "left" : "map.put(val, result);",
      "right" : "map.put(val, result);",
      "info" : "ExpressionStatement[42147-42168]:ExpressionStatement[43565-43586]"
    }, {
      "left" : "result.add(record);",
      "right" : "result.add(record);",
      "info" : "ExpressionStatement[42196-42215]:ExpressionStatement[43614-43633]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[42235-42246]:ReturnStatement[43653-43664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42349-42507]:Block[43767-43925]"
    }, {
      "left" : "int kIndex = indexOrFail(fieldsRow(), key);",
      "right" : "int kIndex = indexOrFail(fieldsRow(), key);",
      "info" : "VariableDeclarationStatement[42359-42402]:VariableDeclarationStatement[43777-43820]"
    }, {
      "left" : "int vIndex = indexOrFail(fieldsRow(), value);",
      "right" : "int vIndex = indexOrFail(fieldsRow(), value);",
      "info" : "VariableDeclarationStatement[42411-42456]:VariableDeclarationStatement[43829-43874]"
    }, {
      "left" : "return intoGroups0(kIndex, vIndex);",
      "right" : "return intoGroups0(kIndex, vIndex);",
      "info" : "ReturnStatement[42466-42501]:ReturnStatement[43884-43919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42607-42680]:Block[44025-44098]"
    }, {
      "left" : "return (Map) intoGroups0(keyFieldIndex, valueFieldIndex);",
      "right" : "return (Map) intoGroups0(keyFieldIndex, valueFieldIndex);",
      "info" : "ReturnStatement[42617-42674]:ReturnStatement[44035-44092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42784-42868]:Block[44202-44286]"
    }, {
      "left" : "return (Map) intoGroups(field(keyFieldName), field(valueFieldName));",
      "right" : "return (Map) intoGroups(field(keyFieldName), field(valueFieldName));",
      "info" : "ReturnStatement[42794-42862]:ReturnStatement[44212-44280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42968-43052]:Block[44386-44470]"
    }, {
      "left" : "return (Map) intoGroups(field(keyFieldName), field(valueFieldName));",
      "right" : "return (Map) intoGroups(field(keyFieldName), field(valueFieldName));",
      "info" : "ReturnStatement[42978-43046]:ReturnStatement[44396-44464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43131-43558]:Block[44549-44976]"
    }, {
      "left" : "Map<K, List<V>> map = new LinkedHashMap<K, List<V>>();",
      "right" : "Map<K, List<V>> map = new LinkedHashMap<K, List<V>>();",
      "info" : "VariableDeclarationStatement[43141-43195]:VariableDeclarationStatement[44559-44613]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[43205-43531]:EnhancedForStatement[44623-44949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43227-43531]:Block[44645-44949]"
    }, {
      "left" : "K k = (K) record.getValue(kIndex);",
      "right" : "K k = (K) record.getValue(kIndex);",
      "info" : "VariableDeclarationStatement[43241-43275]:VariableDeclarationStatement[44659-44693]"
    }, {
      "left" : "V v = (V) record.getValue(vIndex);",
      "right" : "V v = (V) record.getValue(vIndex);",
      "info" : "VariableDeclarationStatement[43288-43322]:VariableDeclarationStatement[44706-44740]"
    }, {
      "left" : "List<V> result = map.get(k);",
      "right" : "List<V> result = map.get(k);",
      "info" : "VariableDeclarationStatement[43335-43363]:VariableDeclarationStatement[44753-44781]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[43377-43493]:IfStatement[44795-44911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43397-43493]:Block[44815-44911]"
    }, {
      "left" : "result = new ArrayList<V>();",
      "right" : "result = new ArrayList<V>();",
      "info" : "ExpressionStatement[43415-43443]:ExpressionStatement[44833-44861]"
    }, {
      "left" : "map.put(k, result);",
      "right" : "map.put(k, result);",
      "info" : "ExpressionStatement[43460-43479]:ExpressionStatement[44878-44897]"
    }, {
      "left" : "result.add(v);",
      "right" : "result.add(v);",
      "info" : "ExpressionStatement[43507-43521]:ExpressionStatement[44925-44939]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[43541-43552]:ReturnStatement[44959-44970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43666-43787]:Block[45084-45205]"
    }, {
      "left" : "return intoGroups(keyFieldIndex, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(keyFieldIndex, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[43676-43781]:ReturnStatement[45094-45199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43897-44017]:Block[45315-45435]"
    }, {
      "left" : "return intoGroups(keyFieldName, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(keyFieldName, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[43907-44011]:ReturnStatement[45325-45429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44125-44245]:Block[45543-45663]"
    }, {
      "left" : "return intoGroups(keyFieldName, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(keyFieldName, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[44135-44239]:ReturnStatement[45553-45657]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44351-44462]:Block[45769-45880]"
    }, {
      "left" : "return intoGroups(key, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(key, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[44361-44456]:ReturnStatement[45779-45874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44578-44652]:Block[45996-46070]"
    }, {
      "left" : "return intoGroups0(indexOrFail(fieldsRow(), key), mapper);",
      "right" : "return intoGroups0(indexOrFail(fieldsRow(), key), mapper);",
      "info" : "ReturnStatement[44588-44646]:ReturnStatement[46006-46064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44770-44828]:Block[46188-46246]"
    }, {
      "left" : "return intoGroups0(keyFieldIndex, mapper);",
      "right" : "return intoGroups0(keyFieldIndex, mapper);",
      "info" : "ReturnStatement[44780-44822]:ReturnStatement[46198-46240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44948-45011]:Block[46366-46429]"
    }, {
      "left" : "return intoGroups(field(keyFieldName), mapper);",
      "right" : "return intoGroups(field(keyFieldName), mapper);",
      "info" : "ReturnStatement[44958-45005]:ReturnStatement[46376-46423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45129-45192]:Block[46547-46610]"
    }, {
      "left" : "return intoGroups(field(keyFieldName), mapper);",
      "right" : "return intoGroups(field(keyFieldName), mapper);",
      "info" : "ReturnStatement[45139-45186]:ReturnStatement[46557-46604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45301-45710]:Block[46719-47128]"
    }, {
      "left" : "Map<K, List<E>> map = new LinkedHashMap<K, List<E>>();",
      "right" : "Map<K, List<E>> map = new LinkedHashMap<K, List<E>>();",
      "info" : "VariableDeclarationStatement[45311-45365]:VariableDeclarationStatement[46729-46783]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[45375-45683]:EnhancedForStatement[46793-47101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45397-45683]:Block[46815-47101]"
    }, {
      "left" : "K keyVal = (K) record.getValue(keyFieldIndex);",
      "right" : "K keyVal = (K) record.getValue(keyFieldIndex);",
      "info" : "VariableDeclarationStatement[45411-45457]:VariableDeclarationStatement[46829-46875]"
    }, {
      "left" : "List<E> list = map.get(keyVal);",
      "right" : "List<E> list = map.get(keyVal);",
      "info" : "VariableDeclarationStatement[45471-45502]:VariableDeclarationStatement[46889-46920]"
    }, {
      "left" : "if (list == null)",
      "right" : "if (list == null)",
      "info" : "IfStatement[45515-45630]:IfStatement[46933-47048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45533-45630]:Block[46951-47048]"
    }, {
      "left" : "list = new ArrayList<E>();",
      "right" : "list = new ArrayList<E>();",
      "info" : "ExpressionStatement[45551-45577]:ExpressionStatement[46969-46995]"
    }, {
      "left" : "map.put(keyVal, list);",
      "right" : "map.put(keyVal, list);",
      "info" : "ExpressionStatement[45594-45616]:ExpressionStatement[47012-47034]"
    }, {
      "left" : "list.add(mapper.map(record));",
      "right" : "list.add(mapper.map(record));",
      "info" : "ExpressionStatement[45644-45673]:ExpressionStatement[47062-47091]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[45693-45704]:ReturnStatement[47111-47122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45800-45859]:Block[47218-47277]"
    }, {
      "left" : "return intoGroups(fields(keyFieldIndexes));",
      "right" : "return intoGroups(fields(keyFieldIndexes));",
      "info" : "ReturnStatement[45810-45853]:ReturnStatement[47228-47271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45950-46007]:Block[47368-47425]"
    }, {
      "left" : "return intoGroups(fields(keyFieldNames));",
      "right" : "return intoGroups(fields(keyFieldNames));",
      "info" : "ReturnStatement[45960-46001]:ReturnStatement[47378-47419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46096-46153]:Block[47514-47571]"
    }, {
      "left" : "return intoGroups(fields(keyFieldNames));",
      "right" : "return intoGroups(fields(keyFieldNames));",
      "info" : "ReturnStatement[46106-46147]:ReturnStatement[47524-47565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46237-46863]:Block[47655-48281]"
    }, {
      "left" : "if (keys == null)",
      "right" : "if (keys == null)",
      "info" : "IfStatement[46247-46309]:IfStatement[47665-47727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46265-46309]:Block[47683-47727]"
    }, {
      "left" : "keys = new Field[0];",
      "right" : "keys = new Field[0];",
      "info" : "ExpressionStatement[46279-46299]:ExpressionStatement[47697-47717]"
    }, {
      "left" : "Map<Record, Result<R>> map = new LinkedHashMap<Record, Result<R>>();",
      "right" : "Map<Record, Result<R>> map = new LinkedHashMap<Record, Result<R>>();",
      "info" : "VariableDeclarationStatement[46319-46387]:VariableDeclarationStatement[47737-47805]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[46396-46836]:EnhancedForStatement[47814-48254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46418-46836]:Block[47836-48254]"
    }, {
      "left" : "RecordImpl key = new RecordImpl(keys);",
      "right" : "RecordImpl key = new RecordImpl(keys);",
      "info" : "VariableDeclarationStatement[46432-46470]:VariableDeclarationStatement[47850-47888]"
    }, {
      "left" : "for (Field<?> field : keys)",
      "right" : "for (Field<?> field : keys)",
      "info" : "EnhancedForStatement[46484-46587]:EnhancedForStatement[47902-48005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46512-46587]:Block[47930-48005]"
    }, {
      "left" : "Utils.copyValue(key, field, record, field);",
      "right" : "Utils.copyValue(key, field, record, field);",
      "info" : "ExpressionStatement[46530-46573]:ExpressionStatement[47948-47991]"
    }, {
      "left" : "Result<R> result = map.get(key);",
      "right" : "Result<R> result = map.get(key);",
      "info" : "VariableDeclarationStatement[46601-46633]:VariableDeclarationStatement[48019-48051]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[46646-46793]:IfStatement[48064-48211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46666-46793]:Block[48084-48211]"
    }, {
      "left" : "result = new ResultImpl<R>(configuration(), this.fields);",
      "right" : "result = new ResultImpl<R>(configuration(), this.fields);",
      "info" : "ExpressionStatement[46684-46741]:ExpressionStatement[48102-48159]"
    }, {
      "left" : "map.put(key, result);",
      "right" : "map.put(key, result);",
      "info" : "ExpressionStatement[46758-46779]:ExpressionStatement[48176-48197]"
    }, {
      "left" : "result.add(record);",
      "right" : "result.add(record);",
      "info" : "ExpressionStatement[46807-46826]:ExpressionStatement[48225-48244]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[46846-46857]:ReturnStatement[48264-48275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46974-47097]:Block[48392-48515]"
    }, {
      "left" : "return intoGroups(keyFieldIndexes, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(keyFieldIndexes, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[46984-47091]:ReturnStatement[48402-48509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47209-47330]:Block[48627-48748]"
    }, {
      "left" : "return intoGroups(keyFieldNames, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(keyFieldNames, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[47219-47324]:ReturnStatement[48637-48742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47440-47561]:Block[48858-48979]"
    }, {
      "left" : "return intoGroups(keyFieldNames, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(keyFieldNames, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[47450-47555]:ReturnStatement[48868-48973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47672-47784]:Block[49090-49202]"
    }, {
      "left" : "return intoGroups(keys, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(keys, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[47682-47778]:ReturnStatement[49100-49196]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47911-47978]:Block[49329-49396]"
    }, {
      "left" : "return intoGroups(fields(keyFieldIndexes), mapper);",
      "right" : "return intoGroups(fields(keyFieldIndexes), mapper);",
      "info" : "ReturnStatement[47921-47972]:ReturnStatement[49339-49390]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48106-48171]:Block[49524-49589]"
    }, {
      "left" : "return intoGroups(fields(keyFieldNames), mapper);",
      "right" : "return intoGroups(fields(keyFieldNames), mapper);",
      "info" : "ReturnStatement[48116-48165]:ReturnStatement[49534-49583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48297-48362]:Block[49715-49780]"
    }, {
      "left" : "return intoGroups(fields(keyFieldNames), mapper);",
      "right" : "return intoGroups(fields(keyFieldNames), mapper);",
      "info" : "ReturnStatement[48307-48356]:ReturnStatement[49725-49774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48483-49076]:Block[49901-50494]"
    }, {
      "left" : "if (keys == null)",
      "right" : "if (keys == null)",
      "info" : "IfStatement[48493-48555]:IfStatement[49911-49973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48511-48555]:Block[49929-49973]"
    }, {
      "left" : "keys = new Field[0];",
      "right" : "keys = new Field[0];",
      "info" : "ExpressionStatement[48525-48545]:ExpressionStatement[49943-49963]"
    }, {
      "left" : "Map<Record, List<E>> map = new LinkedHashMap<Record, List<E>>();",
      "right" : "Map<Record, List<E>> map = new LinkedHashMap<Record, List<E>>();",
      "info" : "VariableDeclarationStatement[48565-48629]:VariableDeclarationStatement[49983-50047]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[48638-49049]:EnhancedForStatement[50056-50467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48660-49049]:Block[50078-50467]"
    }, {
      "left" : "RecordImpl key = new RecordImpl(keys);",
      "right" : "RecordImpl key = new RecordImpl(keys);",
      "info" : "VariableDeclarationStatement[48674-48712]:VariableDeclarationStatement[50092-50130]"
    }, {
      "left" : "for (Field<?> field : keys)",
      "right" : "for (Field<?> field : keys)",
      "info" : "EnhancedForStatement[48726-48829]:EnhancedForStatement[50144-50247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48754-48829]:Block[50172-50247]"
    }, {
      "left" : "Utils.copyValue(key, field, record, field);",
      "right" : "Utils.copyValue(key, field, record, field);",
      "info" : "ExpressionStatement[48772-48815]:ExpressionStatement[50190-50233]"
    }, {
      "left" : "List<E> list = map.get(key);",
      "right" : "List<E> list = map.get(key);",
      "info" : "VariableDeclarationStatement[48843-48871]:VariableDeclarationStatement[50261-50289]"
    }, {
      "left" : "if (list == null)",
      "right" : "if (list == null)",
      "info" : "IfStatement[48884-48996]:IfStatement[50302-50414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48902-48996]:Block[50320-50414]"
    }, {
      "left" : "list = new ArrayList<E>();",
      "right" : "list = new ArrayList<E>();",
      "info" : "ExpressionStatement[48920-48946]:ExpressionStatement[50338-50364]"
    }, {
      "left" : "map.put(key, list);",
      "right" : "map.put(key, list);",
      "info" : "ExpressionStatement[48963-48982]:ExpressionStatement[50381-50400]"
    }, {
      "left" : "list.add(mapper.map(record));",
      "right" : "list.add(mapper.map(record));",
      "info" : "ExpressionStatement[49010-49039]:ExpressionStatement[50428-50457]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[49059-49070]:ReturnStatement[50477-50488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49173-49590]:Block[50591-51008]"
    }, {
      "left" : "Map<S, Result<R>> map = new LinkedHashMap<S, Result<R>>();",
      "right" : "Map<S, Result<R>> map = new LinkedHashMap<S, Result<R>>();",
      "info" : "VariableDeclarationStatement[49183-49241]:VariableDeclarationStatement[50601-50659]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[49251-49563]:EnhancedForStatement[50669-50981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49273-49563]:Block[50691-50981]"
    }, {
      "left" : "S key = record.into(table);",
      "right" : "S key = record.into(table);",
      "info" : "VariableDeclarationStatement[49287-49314]:VariableDeclarationStatement[50705-50732]"
    }, {
      "left" : "Result<R> result = map.get(key);",
      "right" : "Result<R> result = map.get(key);",
      "info" : "VariableDeclarationStatement[49328-49360]:VariableDeclarationStatement[50746-50778]"
    }, {
      "left" : "if (result == null)",
      "right" : "if (result == null)",
      "info" : "IfStatement[49373-49520]:IfStatement[50791-50938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49393-49520]:Block[50811-50938]"
    }, {
      "left" : "result = new ResultImpl<R>(configuration(), this.fields);",
      "right" : "result = new ResultImpl<R>(configuration(), this.fields);",
      "info" : "ExpressionStatement[49411-49468]:ExpressionStatement[50829-50886]"
    }, {
      "left" : "map.put(key, result);",
      "right" : "map.put(key, result);",
      "info" : "ExpressionStatement[49485-49506]:ExpressionStatement[50903-50924]"
    }, {
      "left" : "result.add(record);",
      "right" : "result.add(record);",
      "info" : "ExpressionStatement[49534-49553]:ExpressionStatement[50952-50971]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[49573-49584]:ReturnStatement[50991-51002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49713-49826]:Block[51131-51244]"
    }, {
      "left" : "return intoGroups(table, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "right" : "return intoGroups(table, Utils.configuration(this).recordMapperProvider().provide(fields, type));",
      "info" : "ReturnStatement[49723-49820]:ReturnStatement[51141-51238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49959-50343]:Block[51377-51761]"
    }, {
      "left" : "Map<S, List<E>> map = new LinkedHashMap<S, List<E>>();",
      "right" : "Map<S, List<E>> map = new LinkedHashMap<S, List<E>>();",
      "info" : "VariableDeclarationStatement[49969-50023]:VariableDeclarationStatement[51387-51441]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[50033-50316]:EnhancedForStatement[51451-51734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50055-50316]:Block[51473-51734]"
    }, {
      "left" : "S key = record.into(table);",
      "right" : "S key = record.into(table);",
      "info" : "VariableDeclarationStatement[50069-50096]:VariableDeclarationStatement[51487-51514]"
    }, {
      "left" : "List<E> list = map.get(key);",
      "right" : "List<E> list = map.get(key);",
      "info" : "VariableDeclarationStatement[50110-50138]:VariableDeclarationStatement[51528-51556]"
    }, {
      "left" : "if (list == null)",
      "right" : "if (list == null)",
      "info" : "IfStatement[50151-50263]:IfStatement[51569-51681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50169-50263]:Block[51587-51681]"
    }, {
      "left" : "list = new ArrayList<E>();",
      "right" : "list = new ArrayList<E>();",
      "info" : "ExpressionStatement[50187-50213]:ExpressionStatement[51605-51631]"
    }, {
      "left" : "map.put(key, list);",
      "right" : "map.put(key, list);",
      "info" : "ExpressionStatement[50230-50249]:ExpressionStatement[51648-51667]"
    }, {
      "left" : "list.add(mapper.map(record));",
      "right" : "list.add(mapper.map(record));",
      "info" : "ExpressionStatement[50277-50306]:ExpressionStatement[51695-51724]"
    }, {
      "left" : "return map;",
      "right" : "return map;",
      "info" : "ReturnStatement[50326-50337]:ReturnStatement[51744-51755]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50415-50451]:Block[51833-51869]"
    }, {
      "left" : "return intoArrays();",
      "right" : "return intoArrays();",
      "info" : "ReturnStatement[50425-50445]:ReturnStatement[51843-51863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50508-50707]:Block[51926-52125]"
    }, {
      "left" : "int size = size();",
      "right" : "int size = size();",
      "info" : "VariableDeclarationStatement[50518-50536]:VariableDeclarationStatement[51936-51954]"
    }, {
      "left" : "Object[][] array = new Object[size][];",
      "right" : "Object[][] array = new Object[size][];",
      "info" : "VariableDeclarationStatement[50545-50583]:VariableDeclarationStatement[51963-52001]"
    }, {
      "left" : "for (int i = 0; i < size; i++)",
      "right" : "for (int i = 0; i < size; i++)",
      "info" : "ForStatement[50593-50678]:ForStatement[52011-52096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50624-50678]:Block[52042-52096]"
    }, {
      "left" : "array[i] = get(i).intoArray();",
      "right" : "array[i] = get(i).intoArray();",
      "info" : "ExpressionStatement[50638-50668]:ExpressionStatement[52056-52086]"
    }, {
      "left" : "return array;",
      "right" : "return array;",
      "info" : "ReturnStatement[50688-50701]:ReturnStatement[52106-52119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50775-50967]:Block[52193-52385]"
    }, {
      "left" : "Class<?> type = fields.fields[fieldIndex].getType();",
      "right" : "Class<?> type = fields.fields[fieldIndex].getType();",
      "info" : "VariableDeclarationStatement[50785-50837]:VariableDeclarationStatement[52203-52255]"
    }, {
      "left" : "List<?> list = getValues(fieldIndex);",
      "right" : "List<?> list = getValues(fieldIndex);",
      "info" : "VariableDeclarationStatement[50846-50883]:VariableDeclarationStatement[52264-52301]"
    }, {
      "left" : "return list.toArray((Object[]) Array.newInstance(type, list.size()));",
      "right" : "return list.toArray((Object[]) Array.newInstance(type, list.size()));",
      "info" : "ReturnStatement[50892-50961]:ReturnStatement[52310-52379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51059-51138]:Block[52477-52556]"
    }, {
      "left" : "return (T[]) Convert.convertArray(intoArray(fieldIndex), type);",
      "right" : "return (T[]) Convert.convertArray(intoArray(fieldIndex), type);",
      "info" : "ReturnStatement[51069-51132]:ReturnStatement[52487-52550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51232-51310]:Block[52650-52728]"
    }, {
      "left" : "return Convert.convertArray(intoArray(fieldIndex), converter);",
      "right" : "return Convert.convertArray(intoArray(fieldIndex), converter);",
      "info" : "ReturnStatement[51242-51304]:ReturnStatement[52660-52722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51380-51562]:Block[52798-52980]"
    }, {
      "left" : "Class<?> type = field(fieldName).getType();",
      "right" : "Class<?> type = field(fieldName).getType();",
      "info" : "VariableDeclarationStatement[51390-51433]:VariableDeclarationStatement[52808-52851]"
    }, {
      "left" : "List<?> list = getValues(fieldName);",
      "right" : "List<?> list = getValues(fieldName);",
      "info" : "VariableDeclarationStatement[51442-51478]:VariableDeclarationStatement[52860-52896]"
    }, {
      "left" : "return list.toArray((Object[]) Array.newInstance(type, list.size()));",
      "right" : "return list.toArray((Object[]) Array.newInstance(type, list.size()));",
      "info" : "ReturnStatement[51487-51556]:ReturnStatement[52905-52974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51656-51734]:Block[53074-53152]"
    }, {
      "left" : "return (T[]) Convert.convertArray(intoArray(fieldName), type);",
      "right" : "return (T[]) Convert.convertArray(intoArray(fieldName), type);",
      "info" : "ReturnStatement[51666-51728]:ReturnStatement[53084-53146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51830-51907]:Block[53248-53325]"
    }, {
      "left" : "return Convert.convertArray(intoArray(fieldName), converter);",
      "right" : "return Convert.convertArray(intoArray(fieldName), converter);",
      "info" : "ReturnStatement[51840-51901]:ReturnStatement[53258-53319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51975-52157]:Block[53393-53575]"
    }, {
      "left" : "Class<?> type = field(fieldName).getType();",
      "right" : "Class<?> type = field(fieldName).getType();",
      "info" : "VariableDeclarationStatement[51985-52028]:VariableDeclarationStatement[53403-53446]"
    }, {
      "left" : "List<?> list = getValues(fieldName);",
      "right" : "List<?> list = getValues(fieldName);",
      "info" : "VariableDeclarationStatement[52037-52073]:VariableDeclarationStatement[53455-53491]"
    }, {
      "left" : "return list.toArray((Object[]) Array.newInstance(type, list.size()));",
      "right" : "return list.toArray((Object[]) Array.newInstance(type, list.size()));",
      "info" : "ReturnStatement[52082-52151]:ReturnStatement[53500-53569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52249-52327]:Block[53667-53745]"
    }, {
      "left" : "return (T[]) Convert.convertArray(intoArray(fieldName), type);",
      "right" : "return (T[]) Convert.convertArray(intoArray(fieldName), type);",
      "info" : "ReturnStatement[52259-52321]:ReturnStatement[53677-53739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52421-52498]:Block[53839-53916]"
    }, {
      "left" : "return Convert.convertArray(intoArray(fieldName), converter);",
      "right" : "return Convert.convertArray(intoArray(fieldName), converter);",
      "info" : "ReturnStatement[52431-52492]:ReturnStatement[53849-53910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52565-52658]:Block[53983-54076]"
    }, {
      "left" : "return getValues(field).toArray((T[]) Array.newInstance(field.getType(), 0));",
      "right" : "return getValues(field).toArray((T[]) Array.newInstance(field.getType(), 0));",
      "info" : "ReturnStatement[52575-52652]:ReturnStatement[53993-54070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52750-52824]:Block[54168-54242]"
    }, {
      "left" : "return (T[]) Convert.convertArray(intoArray(field), type);",
      "right" : "return (T[]) Convert.convertArray(intoArray(field), type);",
      "info" : "ReturnStatement[52760-52818]:ReturnStatement[54178-54236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52929-53002]:Block[54347-54420]"
    }, {
      "left" : "return Convert.convertArray(intoArray(field), converter);",
      "right" : "return Convert.convertArray(intoArray(field), converter);",
      "info" : "ReturnStatement[52939-52996]:ReturnStatement[54357-54414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53066-53138]:Block[54484-54556]"
    }, {
      "left" : "return new LinkedHashSet<Object>(getValues(fieldIndex));",
      "right" : "return new LinkedHashSet<Object>(getValues(fieldIndex));",
      "info" : "ReturnStatement[53076-53132]:ReturnStatement[54494-54550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53231-53304]:Block[54649-54722]"
    }, {
      "left" : "return new LinkedHashSet<T>(getValues(fieldIndex, type));",
      "right" : "return new LinkedHashSet<T>(getValues(fieldIndex, type));",
      "info" : "ReturnStatement[53241-53298]:ReturnStatement[54659-54716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53399-53477]:Block[54817-54895]"
    }, {
      "left" : "return new LinkedHashSet<U>(getValues(fieldIndex, converter));",
      "right" : "return new LinkedHashSet<U>(getValues(fieldIndex, converter));",
      "info" : "ReturnStatement[53409-53471]:ReturnStatement[54827-54889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53543-53614]:Block[54961-55032]"
    }, {
      "left" : "return new LinkedHashSet<Object>(getValues(fieldName));",
      "right" : "return new LinkedHashSet<Object>(getValues(fieldName));",
      "info" : "ReturnStatement[53553-53608]:ReturnStatement[54971-55026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53709-53781]:Block[55127-55199]"
    }, {
      "left" : "return new LinkedHashSet<T>(getValues(fieldName, type));",
      "right" : "return new LinkedHashSet<T>(getValues(fieldName, type));",
      "info" : "ReturnStatement[53719-53775]:ReturnStatement[55137-55193]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53878-53955]:Block[55296-55373]"
    }, {
      "left" : "return new LinkedHashSet<U>(getValues(fieldName, converter));",
      "right" : "return new LinkedHashSet<U>(getValues(fieldName, converter));",
      "info" : "ReturnStatement[53888-53949]:ReturnStatement[55306-55367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54019-54090]:Block[55437-55508]"
    }, {
      "left" : "return new LinkedHashSet<Object>(getValues(fieldName));",
      "right" : "return new LinkedHashSet<Object>(getValues(fieldName));",
      "info" : "ReturnStatement[54029-54084]:ReturnStatement[55447-55502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54183-54255]:Block[55601-55673]"
    }, {
      "left" : "return new LinkedHashSet<T>(getValues(fieldName, type));",
      "right" : "return new LinkedHashSet<T>(getValues(fieldName, type));",
      "info" : "ReturnStatement[54193-54249]:ReturnStatement[55611-55667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54350-54427]:Block[55768-55845]"
    }, {
      "left" : "return new LinkedHashSet<U>(getValues(fieldName, converter));",
      "right" : "return new LinkedHashSet<U>(getValues(fieldName, converter));",
      "info" : "ReturnStatement[54360-54421]:ReturnStatement[55778-55839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54495-54557]:Block[55913-55975]"
    }, {
      "left" : "return new LinkedHashSet<T>(getValues(field));",
      "right" : "return new LinkedHashSet<T>(getValues(field));",
      "info" : "ReturnStatement[54505-54551]:ReturnStatement[55923-55969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54650-54718]:Block[56068-56136]"
    }, {
      "left" : "return new LinkedHashSet<T>(getValues(field, type));",
      "right" : "return new LinkedHashSet<T>(getValues(field, type));",
      "info" : "ReturnStatement[54660-54712]:ReturnStatement[56078-56130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54824-54897]:Block[56242-56315]"
    }, {
      "left" : "return new LinkedHashSet<U>(getValues(field, converter));",
      "right" : "return new LinkedHashSet<U>(getValues(field, converter));",
      "info" : "ReturnStatement[54834-54891]:ReturnStatement[56252-56309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54965-55158]:Block[56383-56576]"
    }, {
      "left" : "Result<Record> result = new ResultImpl<Record>(Utils.configuration(this), f);",
      "right" : "Result<Record> result = new ResultImpl<Record>(Utils.configuration(this), f);",
      "info" : "VariableDeclarationStatement[54975-55052]:VariableDeclarationStatement[56393-56470]"
    }, {
      "left" : "for (Record record : this)\n            result.add(record.into(f));",
      "right" : "for (Record record : this)\n            result.add(record.into(f));",
      "info" : "EnhancedForStatement[55062-55128]:EnhancedForStatement[56480-56546]"
    }, {
      "left" : "result.add(record.into(f));",
      "right" : "result.add(record.into(f));",
      "info" : "ExpressionStatement[55101-55128]:ExpressionStatement[56519-56546]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[55138-55152]:ReturnStatement[56556-56570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55280-55341]:Block[56698-56759]"
    }, {
      "left" : "return (Result) into(new Field[] { field1 });",
      "right" : "return (Result) into(new Field[] { field1 });",
      "info" : "ReturnStatement[55290-55335]:ReturnStatement[56708-56753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55448-55517]:Block[56866-56935]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2 });",
      "right" : "return (Result) into(new Field[] { field1, field2 });",
      "info" : "ReturnStatement[55458-55511]:ReturnStatement[56876-56929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55650-55727]:Block[57068-57145]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3 });",
      "info" : "ReturnStatement[55660-55721]:ReturnStatement[57078-57139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55886-55971]:Block[57304-57389]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4 });",
      "info" : "ReturnStatement[55896-55965]:ReturnStatement[57314-57383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56156-56249]:Block[57574-57667]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5 });",
      "info" : "ReturnStatement[56166-56243]:ReturnStatement[57584-57661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56460-56561]:Block[57878-57979]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6 });",
      "info" : "ReturnStatement[56470-56555]:ReturnStatement[57888-57973]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56798-56907]:Block[58216-58325]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7 });",
      "info" : "ReturnStatement[56808-56901]:ReturnStatement[58226-58319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57170-57287]:Block[58588-58705]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8 });",
      "info" : "ReturnStatement[57180-57281]:ReturnStatement[58598-58699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57576-57701]:Block[58994-59119]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9 });",
      "info" : "ReturnStatement[57586-57695]:ReturnStatement[59004-59113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58021-58155]:Block[59439-59573]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10 });",
      "info" : "ReturnStatement[58031-58149]:ReturnStatement[59449-59567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58505-58648]:Block[59923-60066]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11 });",
      "info" : "ReturnStatement[58515-58642]:ReturnStatement[59933-60060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59028-59180]:Block[60446-60598]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12 });",
      "info" : "ReturnStatement[59038-59174]:ReturnStatement[60456-60592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59590-59751]:Block[61008-61169]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13 });",
      "info" : "ReturnStatement[59600-59745]:ReturnStatement[61018-61163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60191-60361]:Block[61609-61779]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14 });",
      "info" : "ReturnStatement[60201-60355]:ReturnStatement[61619-61773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60831-61010]:Block[62249-62428]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15 });",
      "info" : "ReturnStatement[60841-61004]:ReturnStatement[62259-62422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61510-61698]:Block[62928-63116]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16 });",
      "info" : "ReturnStatement[61520-61692]:ReturnStatement[62938-63110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62228-62425]:Block[63646-63843]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17 });",
      "info" : "ReturnStatement[62238-62419]:ReturnStatement[63656-63837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62985-63191]:Block[64403-64609]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18 });",
      "info" : "ReturnStatement[62995-63185]:ReturnStatement[64413-64603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63781-63996]:Block[65199-65414]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19 });",
      "info" : "ReturnStatement[63791-63990]:ReturnStatement[65209-65408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64616-64840]:Block[66034-66258]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20 });",
      "info" : "ReturnStatement[64626-64834]:ReturnStatement[66044-66252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65490-65723]:Block[66908-67141]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21 });",
      "info" : "ReturnStatement[65500-65717]:ReturnStatement[66918-67135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66403-66645]:Block[67821-68063]"
    }, {
      "left" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21, field22 });",
      "right" : "return (Result) into(new Field[] { field1, field2, field3, field4, field5, field6, field7, field8, field9, field10, field11, field12, field13, field14, field15, field16, field17, field18, field19, field20, field21, field22 });",
      "info" : "ReturnStatement[66413-66639]:ReturnStatement[67831-68057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66755-67026]:Block[68173-68444]"
    }, {
      "left" : "List<E> list = new ArrayList<E>(size());",
      "right" : "List<E> list = new ArrayList<E>(size());",
      "info" : "VariableDeclarationStatement[66765-66805]:VariableDeclarationStatement[68183-68223]"
    }, {
      "left" : "RecordMapper<R, E> mapper = Utils.configuration(this).recordMapperProvider().provide(fields, type);",
      "right" : "RecordMapper<R, E> mapper = Utils.configuration(this).recordMapperProvider().provide(fields, type);",
      "info" : "VariableDeclarationStatement[66814-66913]:VariableDeclarationStatement[68232-68331]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[66923-66998]:EnhancedForStatement[68341-68416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66945-66998]:Block[68363-68416]"
    }, {
      "left" : "list.add(mapper.map(record));",
      "right" : "list.add(mapper.map(record));",
      "info" : "ExpressionStatement[66959-66988]:ExpressionStatement[68377-68406]"
    }, {
      "left" : "return list;",
      "right" : "return list;",
      "info" : "ReturnStatement[67008-67020]:ReturnStatement[68426-68438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67109-67300]:Block[68527-68718]"
    }, {
      "left" : "Result<Z> list = new ResultImpl<Z>(configuration(), table.fields());",
      "right" : "Result<Z> list = new ResultImpl<Z>(configuration(), table.fields());",
      "info" : "VariableDeclarationStatement[67119-67187]:VariableDeclarationStatement[68537-68605]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[67197-67272]:EnhancedForStatement[68615-68690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67219-67272]:Block[68637-68690]"
    }, {
      "left" : "list.add(record.into(table));",
      "right" : "list.add(record.into(table));",
      "info" : "ExpressionStatement[67233-67262]:ExpressionStatement[68651-68680]"
    }, {
      "left" : "return list;",
      "right" : "return list;",
      "info" : "ReturnStatement[67282-67294]:ReturnStatement[68700-68712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67388-67496]:Block[68806-68914]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[67398-67465]:EnhancedForStatement[68816-68883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67420-67465]:Block[68838-68883]"
    }, {
      "left" : "handler.next(record);",
      "right" : "handler.next(record);",
      "info" : "ExpressionStatement[67434-67455]:ExpressionStatement[68852-68873]"
    }, {
      "left" : "return handler;",
      "right" : "return handler;",
      "info" : "ReturnStatement[67475-67490]:ReturnStatement[68893-68908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67555-67602]:Block[68973-69020]"
    }, {
      "left" : "return new MockResultSet(this);",
      "right" : "return new MockResultSet(this);",
      "info" : "ReturnStatement[67565-67596]:ReturnStatement[68983-69014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67686-67849]:Block[69104-69267]"
    }, {
      "left" : "List<E> result = new ArrayList<E>();",
      "right" : "List<E> result = new ArrayList<E>();",
      "info" : "VariableDeclarationStatement[67696-67732]:VariableDeclarationStatement[69114-69150]"
    }, {
      "left" : "for (R record : this)",
      "right" : "for (R record : this)",
      "info" : "EnhancedForStatement[67742-67819]:EnhancedForStatement[69160-69237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67764-67819]:Block[69182-69237]"
    }, {
      "left" : "result.add(mapper.map(record));",
      "right" : "result.add(mapper.map(record));",
      "info" : "ExpressionStatement[67778-67809]:ExpressionStatement[69196-69227]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[67829-67843]:ReturnStatement[69247-69261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67950-68016]:Block[69368-69434]"
    }, {
      "left" : "return sortAsc(field, new NaturalComparator<T>());",
      "right" : "return sortAsc(field, new NaturalComparator<T>());",
      "info" : "ReturnStatement[67960-68010]:ReturnStatement[69378-69428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68083-68151]:Block[69501-69569]"
    }, {
      "left" : "return sortAsc(fieldIndex, new NaturalComparator());",
      "right" : "return sortAsc(fieldIndex, new NaturalComparator());",
      "info" : "ReturnStatement[68093-68145]:ReturnStatement[69511-69563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68220-68287]:Block[69638-69705]"
    }, {
      "left" : "return sortAsc(fieldName, new NaturalComparator());",
      "right" : "return sortAsc(fieldName, new NaturalComparator());",
      "info" : "ReturnStatement[68230-68281]:ReturnStatement[69648-69699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68354-68421]:Block[69772-69839]"
    }, {
      "left" : "return sortAsc(fieldName, new NaturalComparator());",
      "right" : "return sortAsc(fieldName, new NaturalComparator());",
      "info" : "ReturnStatement[68364-68415]:ReturnStatement[69782-69833]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68526-68602]:Block[69944-70020]"
    }, {
      "left" : "return sortAsc(indexOrFail(fieldsRow(), field), comparator);",
      "right" : "return sortAsc(indexOrFail(fieldsRow(), field), comparator);",
      "info" : "ReturnStatement[68536-68596]:ReturnStatement[69954-70014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68695-68772]:Block[70113-70190]"
    }, {
      "left" : "return sortAsc(new RecordComparator(fieldIndex, comparator));",
      "right" : "return sortAsc(new RecordComparator(fieldIndex, comparator));",
      "info" : "ReturnStatement[68705-68766]:ReturnStatement[70123-70184]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68867-68947]:Block[70285-70365]"
    }, {
      "left" : "return sortAsc(indexOrFail(fieldsRow(), fieldName), comparator);",
      "right" : "return sortAsc(indexOrFail(fieldsRow(), fieldName), comparator);",
      "info" : "ReturnStatement[68877-68941]:ReturnStatement[70295-70359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69040-69120]:Block[70458-70538]"
    }, {
      "left" : "return sortAsc(indexOrFail(fieldsRow(), fieldName), comparator);",
      "right" : "return sortAsc(indexOrFail(fieldsRow(), fieldName), comparator);",
      "info" : "ReturnStatement[69050-69114]:ReturnStatement[70468-70532]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69205-69277]:Block[70623-70695]"
    }, {
      "left" : "Collections.sort(this, comparator);",
      "right" : "Collections.sort(this, comparator);",
      "info" : "ExpressionStatement[69215-69250]:ExpressionStatement[70633-70668]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[69259-69271]:ReturnStatement[70677-70689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69379-69471]:Block[70797-70889]"
    }, {
      "left" : "return sortAsc(field, Collections.reverseOrder(new NaturalComparator<T>()));",
      "right" : "return sortAsc(field, Collections.reverseOrder(new NaturalComparator<T>()));",
      "info" : "ReturnStatement[69389-69465]:ReturnStatement[70807-70883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69539-69633]:Block[70957-71051]"
    }, {
      "left" : "return sortAsc(fieldIndex, Collections.reverseOrder(new NaturalComparator()));",
      "right" : "return sortAsc(fieldIndex, Collections.reverseOrder(new NaturalComparator()));",
      "info" : "ReturnStatement[69549-69627]:ReturnStatement[70967-71045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69703-69796]:Block[71121-71214]"
    }, {
      "left" : "return sortAsc(fieldName, Collections.reverseOrder(new NaturalComparator()));",
      "right" : "return sortAsc(fieldName, Collections.reverseOrder(new NaturalComparator()));",
      "info" : "ReturnStatement[69713-69790]:ReturnStatement[71131-71208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69864-69957]:Block[71282-71375]"
    }, {
      "left" : "return sortAsc(fieldName, Collections.reverseOrder(new NaturalComparator()));",
      "right" : "return sortAsc(fieldName, Collections.reverseOrder(new NaturalComparator()));",
      "info" : "ReturnStatement[69874-69951]:ReturnStatement[71292-71369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70063-70139]:Block[71481-71557]"
    }, {
      "left" : "return sortAsc(field, Collections.reverseOrder(comparator));",
      "right" : "return sortAsc(field, Collections.reverseOrder(comparator));",
      "info" : "ReturnStatement[70073-70133]:ReturnStatement[71491-71551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70233-70314]:Block[71651-71732]"
    }, {
      "left" : "return sortAsc(fieldIndex, Collections.reverseOrder(comparator));",
      "right" : "return sortAsc(fieldIndex, Collections.reverseOrder(comparator));",
      "info" : "ReturnStatement[70243-70308]:ReturnStatement[71661-71726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70410-70490]:Block[71828-71908]"
    }, {
      "left" : "return sortAsc(fieldName, Collections.reverseOrder(comparator));",
      "right" : "return sortAsc(fieldName, Collections.reverseOrder(comparator));",
      "info" : "ReturnStatement[70420-70484]:ReturnStatement[71838-71902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70584-70664]:Block[72002-72082]"
    }, {
      "left" : "return sortAsc(fieldName, Collections.reverseOrder(comparator));",
      "right" : "return sortAsc(fieldName, Collections.reverseOrder(comparator));",
      "info" : "ReturnStatement[70594-70658]:ReturnStatement[72012-72076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70750-70819]:Block[72168-72237]"
    }, {
      "left" : "return sortAsc(Collections.reverseOrder(comparator));",
      "right" : "return sortAsc(Collections.reverseOrder(comparator));",
      "info" : "ReturnStatement[70760-70813]:ReturnStatement[72178-72231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70884-70935]:Block[72302-72353]"
    }, {
      "left" : "return intern(fields.indexesOf(f));",
      "right" : "return intern(fields.indexesOf(f));",
      "info" : "ReturnStatement[70894-70929]:ReturnStatement[72312-72347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71006-71306]:Block[72424-72724]"
    }, {
      "left" : "for (int fieldIndex : fieldIndexes)",
      "right" : "for (int fieldIndex : fieldIndexes)",
      "info" : "EnhancedForStatement[71016-71278]:EnhancedForStatement[72434-72696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71052-71278]:Block[72470-72696]"
    }, {
      "left" : "if (fields.fields[fieldIndex].getType() == String.class)",
      "right" : "if (fields.fields[fieldIndex].getType() == String.class)",
      "info" : "IfStatement[71066-71268]:IfStatement[72484-72686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71123-71268]:Block[72541-72686]"
    }, {
      "left" : "for (Record record : this)",
      "right" : "for (Record record : this)",
      "info" : "EnhancedForStatement[71141-71254]:EnhancedForStatement[72559-72672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71168-71254]:Block[72586-72672]"
    }, {
      "left" : "((AbstractRecord) record).intern0(fieldIndex);",
      "right" : "((AbstractRecord) record).intern0(fieldIndex);",
      "info" : "ExpressionStatement[71190-71236]:ExpressionStatement[72608-72654]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[71288-71300]:ReturnStatement[72706-72718]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71378-71438]:Block[72796-72856]"
    }, {
      "left" : "return intern(fields.indexesOf(fieldNames));",
      "right" : "return intern(fields.indexesOf(fieldNames));",
      "info" : "ReturnStatement[71388-71432]:ReturnStatement[72806-72850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71508-71568]:Block[72926-72986]"
    }, {
      "left" : "return intern(fields.indexesOf(fieldNames));",
      "right" : "return intern(fields.indexesOf(fieldNames));",
      "info" : "ReturnStatement[71518-71562]:ReturnStatement[72936-72980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71922-72017]:Block[73340-73435]"
    }, {
      "left" : "this.fieldIndex = fieldIndex;",
      "right" : "this.fieldIndex = fieldIndex;",
      "info" : "ExpressionStatement[71936-71965]:ExpressionStatement[73354-73383]"
    }, {
      "left" : "this.comparator = comparator;",
      "right" : "this.comparator = comparator;",
      "info" : "ExpressionStatement[71978-72007]:ExpressionStatement[73396-73425]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72086-72204]:Block[73504-73622]"
    }, {
      "left" : "return comparator.compare((T) record1.getValue(fieldIndex), (T) record2.getValue(fieldIndex));",
      "right" : "return comparator.compare((T) record1.getValue(fieldIndex), (T) record2.getValue(fieldIndex));",
      "info" : "ReturnStatement[72100-72194]:ReturnStatement[73518-73612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72417-72700]:Block[73835-74118]"
    }, {
      "left" : "if (o1 == null && o2 == null)",
      "right" : "if (o1 == null && o2 == null)",
      "info" : "IfStatement[72431-72653]:IfStatement[73849-74071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72461-72502]:Block[73879-73920]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[72479-72488]:ReturnStatement[73897-73906]"
    }, {
      "left" : "if (o1 == null)",
      "right" : "if (o1 == null)",
      "info" : "IfStatement[72520-72653]:IfStatement[73938-74071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72536-72578]:Block[73954-73996]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[72554-72564]:ReturnStatement[73972-73982]"
    }, {
      "left" : "if (o2 == null)",
      "right" : "if (o2 == null)",
      "info" : "IfStatement[72596-72653]:IfStatement[74014-74071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72612-72653]:Block[74030-74071]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[72630-72639]:ReturnStatement[74048-74057]"
    }, {
      "left" : "return o1.compareTo(o2);",
      "right" : "return o1.compareTo(o2);",
      "info" : "ReturnStatement[72666-72690]:ReturnStatement[74084-74108]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73021-73067]:Block[74439-74485]"
    }, {
      "left" : "return key.fetchParents(this);",
      "right" : "return key.fetchParents(this);",
      "info" : "ReturnStatement[73031-73061]:ReturnStatement[74449-74479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73173-73220]:Block[74591-74638]"
    }, {
      "left" : "return key.fetchChildren(this);",
      "right" : "return key.fetchChildren(this);",
      "info" : "ReturnStatement[73183-73214]:ReturnStatement[74601-74632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73450-73482]:Block[74868-74900]"
    }, {
      "left" : "return format();",
      "right" : "return format();",
      "info" : "ReturnStatement[73460-73476]:ReturnStatement[74878-74894]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73524-73566]:Block[74942-74984]"
    }, {
      "left" : "return records.hashCode();",
      "right" : "return records.hashCode();",
      "info" : "ReturnStatement[73534-73560]:ReturnStatement[74952-74978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73620-73869]:Block[75038-75287]"
    }, {
      "left" : "if (this == obj)",
      "right" : "if (this == obj)",
      "info" : "IfStatement[73630-73683]:IfStatement[75048-75101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73647-73683]:Block[75065-75101]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[73661-73673]:ReturnStatement[75079-75091]"
    }, {
      "left" : "if (obj instanceof ResultImpl)",
      "right" : "if (obj instanceof ResultImpl)",
      "info" : "IfStatement[73693-73840]:IfStatement[75111-75258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73724-73840]:Block[75142-75258]"
    }, {
      "left" : "ResultImpl<R> other = (ResultImpl<R>) obj;",
      "right" : "ResultImpl<R> other = (ResultImpl<R>) obj;",
      "info" : "VariableDeclarationStatement[73738-73780]:VariableDeclarationStatement[75156-75198]"
    }, {
      "left" : "return records.equals(other.records);",
      "right" : "return records.equals(other.records);",
      "info" : "ReturnStatement[73793-73830]:ReturnStatement[75211-75248]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[73850-73863]:ReturnStatement[75268-75281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74097-74135]:Block[75515-75553]"
    }, {
      "left" : "return records.size();",
      "right" : "return records.size();",
      "info" : "ReturnStatement[74107-74129]:ReturnStatement[75525-75547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74195-74238]:Block[75613-75656]"
    }, {
      "left" : "return records.contains(o);",
      "right" : "return records.contains(o);",
      "info" : "ReturnStatement[74205-74232]:ReturnStatement[75623-75650]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74290-74331]:Block[75708-75749]"
    }, {
      "left" : "return records.toArray();",
      "right" : "return records.toArray();",
      "info" : "ReturnStatement[74300-74325]:ReturnStatement[75718-75743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74387-74429]:Block[75805-75847]"
    }, {
      "left" : "return records.toArray(a);",
      "right" : "return records.toArray(a);",
      "info" : "ReturnStatement[74397-74423]:ReturnStatement[75815-75841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74479-74517]:Block[75897-75935]"
    }, {
      "left" : "return records.add(e);",
      "right" : "return records.add(e);",
      "info" : "ReturnStatement[74489-74511]:ReturnStatement[75907-75929]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74575-74616]:Block[75993-76034]"
    }, {
      "left" : "return records.remove(o);",
      "right" : "return records.remove(o);",
      "info" : "ReturnStatement[74585-74610]:ReturnStatement[76003-76028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74686-74732]:Block[76104-76150]"
    }, {
      "left" : "return records.containsAll(c);",
      "right" : "return records.containsAll(c);",
      "info" : "ReturnStatement[74696-74726]:ReturnStatement[76114-76144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74807-74848]:Block[76225-76266]"
    }, {
      "left" : "return records.addAll(c);",
      "right" : "return records.addAll(c);",
      "info" : "ReturnStatement[74817-74842]:ReturnStatement[76235-76260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74934-74982]:Block[76352-76400]"
    }, {
      "left" : "return records.addAll(index, c);",
      "right" : "return records.addAll(index, c);",
      "info" : "ReturnStatement[74944-74976]:ReturnStatement[76362-76394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75050-75094]:Block[76468-76512]"
    }, {
      "left" : "return records.removeAll(c);",
      "right" : "return records.removeAll(c);",
      "info" : "ReturnStatement[75060-75088]:ReturnStatement[76478-76506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75162-75206]:Block[76580-76624]"
    }, {
      "left" : "return records.retainAll(c);",
      "right" : "return records.retainAll(c);",
      "info" : "ReturnStatement[75172-75200]:ReturnStatement[76590-76618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75252-75284]:Block[76670-76702]"
    }, {
      "left" : "records.clear();",
      "right" : "records.clear();",
      "info" : "ExpressionStatement[75262-75278]:ExpressionStatement[76680-76696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75334-75376]:Block[76752-76794]"
    }, {
      "left" : "return records.get(index);",
      "right" : "return records.get(index);",
      "info" : "ReturnStatement[75344-75370]:ReturnStatement[76762-76788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75437-75488]:Block[76855-76906]"
    }, {
      "left" : "return records.set(index, element);",
      "right" : "return records.set(index, element);",
      "info" : "ReturnStatement[75447-75482]:ReturnStatement[76865-76900]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75552-75596]:Block[76970-77014]"
    }, {
      "left" : "records.add(index, element);",
      "right" : "records.add(index, element);",
      "info" : "ExpressionStatement[75562-75590]:ExpressionStatement[76980-77008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75649-75694]:Block[77067-77112]"
    }, {
      "left" : "return records.remove(index);",
      "right" : "return records.remove(index);",
      "info" : "ReturnStatement[75659-75688]:ReturnStatement[77077-77106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75749-75791]:Block[77167-77209]"
    }, {
      "left" : "return records.indexOf(o);",
      "right" : "return records.indexOf(o);",
      "info" : "ReturnStatement[75759-75785]:ReturnStatement[77177-77203]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75850-75896]:Block[77268-77314]"
    }, {
      "left" : "return records.lastIndexOf(o);",
      "right" : "return records.lastIndexOf(o);",
      "info" : "ReturnStatement[75860-75890]:ReturnStatement[77278-77308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75952-75994]:Block[77370-77412]"
    }, {
      "left" : "return records.iterator();",
      "right" : "return records.iterator();",
      "info" : "ReturnStatement[75962-75988]:ReturnStatement[77380-77406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76058-76104]:Block[77476-77522]"
    }, {
      "left" : "return records.listIterator();",
      "right" : "return records.listIterator();",
      "info" : "ReturnStatement[76068-76098]:ReturnStatement[77486-77516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76177-76228]:Block[77595-77646]"
    }, {
      "left" : "return records.listIterator(index);",
      "right" : "return records.listIterator(index);",
      "info" : "ReturnStatement[76187-76222]:ReturnStatement[77605-77640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76305-76364]:Block[77723-77782]"
    }, {
      "left" : "return records.subList(fromIndex, toIndex);",
      "right" : "return records.subList(fromIndex, toIndex);",
      "info" : "ReturnStatement[76315-76358]:ReturnStatement[77733-77776]"
    } ]
  },
  "interFileMappings" : { }
}