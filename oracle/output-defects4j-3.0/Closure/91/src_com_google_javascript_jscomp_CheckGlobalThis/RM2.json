{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CheckGlobalThis",
      "right" : "CheckGlobalThis",
      "info" : "TypeDeclaration[873-6136]:TypeDeclaration[873-6472]"
    }, {
      "left" : "static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
      "right" : "static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
      "info" : "FieldDeclaration[1875-2022]:FieldDeclaration[1875-2022]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2026-2066]:FieldDeclaration[2026-2066]"
    }, {
      "left" : "private final CheckLevel level;",
      "right" : "private final CheckLevel level;",
      "info" : "FieldDeclaration[2069-2100]:FieldDeclaration[2069-2100]"
    }, {
      "left" : "private Node assignLhsChild = null;",
      "right" : "private Node assignLhsChild = null;",
      "info" : "FieldDeclaration[2104-2330]:FieldDeclaration[2104-2330]"
    }, {
      "left" : "CheckGlobalThis(AbstractCompiler compiler, CheckLevel level)",
      "right" : "CheckGlobalThis(AbstractCompiler compiler, CheckLevel level)",
      "info" : "MethodDeclaration[2334-2454]:MethodDeclaration[2334-2454]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[2458-4760]:MethodDeclaration[2458-5096]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4764-5024]:MethodDeclaration[5100-5360]"
    }, {
      "left" : "private boolean shouldReportThis(Node n, Node parent)",
      "right" : "private boolean shouldReportThis(Node n, Node parent)",
      "info" : "MethodDeclaration[5028-5311]:MethodDeclaration[5364-5647]"
    }, {
      "left" : "private JSDocInfo getFunctionJsDocInfo(Node n)",
      "right" : "private JSDocInfo getFunctionJsDocInfo(Node n)",
      "info" : "MethodDeclaration[5315-6134]:MethodDeclaration[5651-6470]"
    } ],
    "mappings" : [
 {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1828-1833]:TYPE_DECLARATION_KIND[1828-1833]"
    }, {
      "left" : "CheckGlobalThis",
      "right" : "CheckGlobalThis",
      "info" : "SimpleName[1834-1849]:SimpleName[1834-1849]"
    }, {
      "left" : "Callback",
      "right" : "Callback",
      "info" : "SimpleType[1861-1869]:SimpleType[1861-1869]"
    }, {
      "left" : "CheckGlobalThis",
      "right" : "CheckGlobalThis",
      "info" : "SimpleName[2334-2349]:SimpleName[2334-2349]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2350-2375]:SingleVariableDeclaration[2350-2375]"
    }, {
      "left" : "CheckLevel level",
      "right" : "CheckLevel level",
      "info" : "SingleVariableDeclaration[2377-2393]:SingleVariableDeclaration[2377-2393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2395-2454]:Block[2395-2454]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2401-2426]:ExpressionStatement[2401-2426]"
    }, {
      "left" : "this.level = level;",
      "right" : "this.level = level;",
      "info" : "ExpressionStatement[2431-2450]:ExpressionStatement[2431-2450]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2619-2625]:Modifier[2619-2625]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2626-2633]:PrimitiveType[2626-2633]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[2634-2648]:SimpleName[2634-2648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2687-4760]:Block[2687-5096]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION)",
      "right" : "if (n.getType() == Token.FUNCTION)",
      "info" : "IfStatement[2694-3760]:IfStatement[2694-4096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2729-3760]:Block[2729-4096]"
    }, {
      "left" : "JSDocInfo jsDoc = getFunctionJsDocInfo(n);",
      "right" : "JSDocInfo jsDoc = getFunctionJsDocInfo(n);",
      "info" : "VariableDeclarationStatement[2845-2887]:VariableDeclarationStatement[2845-2887]"
    }, {
      "left" : "if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride()))",
      "right" : "if (jsDoc != null &&\n          (jsDoc.isConstructor() ||\n           jsDoc.isInterface() ||\n           jsDoc.hasThisType() ||\n           jsDoc.isOverride()))",
      "info" : "IfStatement[2894-3082]:IfStatement[2894-3082]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3051-3082]:Block[3051-3082]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3061-3074]:ReturnStatement[3061-3074]"
    }, {
      "left" : "int pType = parent.getType();",
      "right" : "int pType = parent.getType();",
      "info" : "VariableDeclarationStatement[3366-3395]:VariableDeclarationStatement[3366-3395]"
    }, {
      "left" : "if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER))",
      "right" : "if (!(pType == Token.BLOCK ||\n            pType == Token.SCRIPT ||\n            pType == Token.NAME ||\n            pType == Token.ASSIGN ||\n\n            // object literal keys\n            pType == Token.STRING ||\n            pType == Token.NUMBER))",
      "info" : "IfStatement[3402-3681]:IfStatement[3402-3681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3650-3681]:Block[3650-3681]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3660-3673]:ReturnStatement[3660-3673]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.ASSIGN)",
      "right" : "if (parent != null && parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[3766-4738]:IfStatement[4102-5074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3822-4738]:Block[4158-5074]"
    }, {
      "left" : "Node lhs = parent.getFirstChild();",
      "right" : "Node lhs = parent.getFirstChild();",
      "info" : "VariableDeclarationStatement[3830-3864]:VariableDeclarationStatement[4166-4200]"
    }, {
      "left" : "Node rhs = lhs.getNext();",
      "right" : "Node rhs = lhs.getNext();",
      "info" : "VariableDeclarationStatement[3871-3896]:VariableDeclarationStatement[4207-4232]"
    }, {
      "left" : "if (n == lhs)",
      "right" : "if (n == lhs)",
      "info" : "IfStatement[3904-4732]:IfStatement[4240-5068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3918-4202]:Block[4254-4538]"
    }, {
      "left" : "if (assignLhsChild == null)",
      "right" : "if (assignLhsChild == null)",
      "info" : "IfStatement[4123-4194]:IfStatement[4459-4530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4151-4194]:Block[4487-4530]"
    }, {
      "left" : "assignLhsChild = lhs;",
      "right" : "assignLhsChild = lhs;",
      "info" : "ExpressionStatement[4163-4184]:ExpressionStatement[4499-4520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4208-4732]:Block[4544-5068]"
    }, {
      "left" : "if (NodeUtil.isGet(lhs))",
      "right" : "if (NodeUtil.isGet(lhs))",
      "info" : "IfStatement[4335-4724]:IfStatement[4671-5060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4360-4724]:Block[4696-5060]"
    }, {
      "left" : "if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (lhs.getType() == Token.GETPROP &&\n              lhs.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[4372-4515]:IfStatement[4708-4851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4476-4515]:Block[4812-4851]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4490-4503]:ReturnStatement[4826-4839]"
    }, {
      "left" : "Node llhs = lhs.getFirstChild();",
      "right" : "Node llhs = lhs.getFirstChild();",
      "info" : "VariableDeclarationStatement[4526-4558]:VariableDeclarationStatement[4862-4894]"
    }, {
      "left" : "if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (llhs.getType() == Token.GETPROP &&\n              llhs.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[4569-4714]:IfStatement[4905-5050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4675-4714]:Block[5011-5050]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4689-4702]:ReturnStatement[5025-5038]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4744-4756]:ReturnStatement[5080-5092]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4764-4770]:Modifier[5100-5106]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4771-4775]:PrimitiveType[5107-5111]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[4776-4781]:SimpleName[5112-5117]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4782-4797]:SingleVariableDeclaration[5118-5133]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4799-4805]:SingleVariableDeclaration[5135-5141]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4807-4818]:SingleVariableDeclaration[5143-5154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4820-5024]:Block[5156-5360]"
    }, {
      "left" : "if (n.getType() == Token.THIS && shouldReportThis(n, parent))",
      "right" : "if (n.getType() == Token.THIS && shouldReportThis(n, parent))",
      "info" : "IfStatement[4826-4954]:IfStatement[5162-5290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4888-4954]:Block[5224-5290]"
    }, {
      "left" : "compiler.report(t.makeError(n, level, GLOBAL_THIS));",
      "right" : "compiler.report(t.makeError(n, level, GLOBAL_THIS));",
      "info" : "ExpressionStatement[4896-4948]:ExpressionStatement[5232-5284]"
    }, {
      "left" : "if (n == assignLhsChild)",
      "right" : "if (n == assignLhsChild)",
      "info" : "IfStatement[4959-5020]:IfStatement[5295-5356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4984-5020]:Block[5320-5356]"
    }, {
      "left" : "assignLhsChild = null;",
      "right" : "assignLhsChild = null;",
      "info" : "ExpressionStatement[4992-5014]:ExpressionStatement[5328-5350]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5028-5035]:Modifier[5364-5371]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5036-5043]:PrimitiveType[5372-5379]"
    }, {
      "left" : "shouldReportThis",
      "right" : "shouldReportThis",
      "info" : "SimpleName[5044-5060]:SimpleName[5380-5396]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5061-5067]:SingleVariableDeclaration[5397-5403]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[5069-5080]:SingleVariableDeclaration[5405-5416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5082-5311]:Block[5418-5647]"
    }, {
      "left" : "if (assignLhsChild != null)",
      "right" : "if (assignLhsChild != null)",
      "info" : "IfStatement[5088-5203]:IfStatement[5424-5539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5116-5203]:Block[5452-5539]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5185-5197]:ReturnStatement[5521-5533]"
    }, {
      "left" : "return parent != null && NodeUtil.isGet(parent);",
      "right" : "return parent != null && NodeUtil.isGet(parent);",
      "info" : "ReturnStatement[5259-5307]:ReturnStatement[5595-5643]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5591-5598]:Modifier[5927-5934]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[5599-5608]:SimpleType[5935-5944]"
    }, {
      "left" : "getFunctionJsDocInfo",
      "right" : "getFunctionJsDocInfo",
      "info" : "SimpleName[5609-5629]:SimpleName[5945-5965]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[5630-5636]:SingleVariableDeclaration[5966-5972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5638-6134]:Block[5974-6470]"
    }, {
      "left" : "JSDocInfo jsDoc = n.getJSDocInfo();",
      "right" : "JSDocInfo jsDoc = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[5644-5679]:VariableDeclarationStatement[5980-6015]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[5684-5712]:VariableDeclarationStatement[6020-6048]"
    }, {
      "left" : "if (jsDoc == null)",
      "right" : "if (jsDoc == null)",
      "info" : "IfStatement[5717-6112]:IfStatement[6053-6448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5736-6112]:Block[6072-6448]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[5744-5778]:VariableDeclarationStatement[6080-6114]"
    }, {
      "left" : "if (parentType == Token.NAME || parentType == Token.ASSIGN)",
      "right" : "if (parentType == Token.NAME || parentType == Token.ASSIGN)",
      "info" : "IfStatement[5785-6106]:IfStatement[6121-6442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5845-6106]:Block[6181-6442]"
    }, {
      "left" : "jsDoc = parent.getJSDocInfo();",
      "right" : "jsDoc = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[5855-5885]:ExpressionStatement[6191-6221]"
    }, {
      "left" : "if (jsDoc == null && parentType == Token.NAME)",
      "right" : "if (jsDoc == null && parentType == Token.NAME)",
      "info" : "IfStatement[5894-6098]:IfStatement[6230-6434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5941-6098]:Block[6277-6434]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[5953-5986]:VariableDeclarationStatement[6289-6322]"
    }, {
      "left" : "if (gramps.getType() == Token.VAR)",
      "right" : "if (gramps.getType() == Token.VAR)",
      "info" : "IfStatement[5997-6088]:IfStatement[6333-6424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6032-6088]:Block[6368-6424]"
    }, {
      "left" : "jsDoc = gramps.getJSDocInfo();",
      "right" : "jsDoc = gramps.getJSDocInfo();",
      "info" : "ExpressionStatement[6046-6076]:ExpressionStatement[6382-6412]"
    }, {
      "left" : "return jsDoc;",
      "right" : "return jsDoc;",
      "info" : "ReturnStatement[6117-6130]:ReturnStatement[6453-6466]"
    } ]
  },
  "interFileMappings" : { }
}