{
  "matchedElements" : [
 {
    "left" : "class : ClassTestDescriptor",
    "right" : "class : ClassTestDescriptor",
    "info" : "TypeDeclaration[2462-10590]:TypeDeclaration[2356-8863]"
  }, {
    "left" : "conditionEvaluator",
    "right" : "conditionEvaluator",
    "info" : "FieldDeclaration[2678-2764]:FieldDeclaration[2572-2658]"
  }, {
    "left" : "displayName",
    "right" : "displayName",
    "info" : "FieldDeclaration[2767-2800]:FieldDeclaration[2661-2694]"
  }, {
    "left" : "testClass",
    "right" : "testClass",
    "info" : "FieldDeclaration[2803-2836]:FieldDeclaration[2697-2730]"
  }, {
    "left" : "beforeAllMethods",
    "right" : "beforeAllMethods",
    "info" : "FieldDeclaration[2839-2883]:FieldDeclaration[2733-2777]"
  }, {
    "left" : "afterAllMethods",
    "right" : "afterAllMethods",
    "info" : "FieldDeclaration[2886-2929]:FieldDeclaration[2780-2823]"
  }, {
    "left" : "public ClassTestDescriptor(uniqueId , testClass )",
    "right" : "public ClassTestDescriptor(uniqueId , testClass )",
    "info" : "MethodDeclaration[2932-3334]:MethodDeclaration[2921-3443]"
  }, {
    "left" : "public getTestClass() : ",
    "right" : "public getTestClass() : ",
    "info" : "MethodDeclaration[3337-3403]:MethodDeclaration[3446-3512]"
  }, {
    "left" : "public getName() : ",
    "right" : "public getName() : ",
    "info" : "MethodDeclaration[3406-3486]:MethodDeclaration[3515-3595]"
  }, {
    "left" : "public getDisplayName() : ",
    "right" : "public getDisplayName() : ",
    "info" : "MethodDeclaration[3489-3568]:MethodDeclaration[3598-3677]"
  }, {
    "left" : "public getTags() : ",
    "right" : "public getTags() : ",
    "info" : "MethodDeclaration[3571-3650]:MethodDeclaration[3680-3759]"
  }, {
    "left" : "public isTest() : boolean",
    "right" : "public isTest() : boolean",
    "info" : "MethodDeclaration[3653-3714]:MethodDeclaration[3762-3823]"
  }, {
    "left" : "public isContainer() : boolean",
    "right" : "public isContainer() : boolean",
    "info" : "MethodDeclaration[3717-3782]:MethodDeclaration[3826-3891]"
  }, {
    "left" : "public prepare(context ) : ",
    "right" : "public prepare(context ) : ",
    "info" : "MethodDeclaration[3785-4531]:MethodDeclaration[3894-4645]"
  }, {
    "left" : "public shouldBeSkipped(context ) : ",
    "right" : "public shouldBeSkipped(context ) : ",
    "info" : "MethodDeclaration[4534-4973]:MethodDeclaration[4648-5087]"
  }, {
    "left" : "public beforeAll(context ) : ",
    "right" : "public beforeAll(context ) : ",
    "info" : "MethodDeclaration[4976-5391]:MethodDeclaration[5090-5505]"
  }, {
    "left" : "public afterAll(context ) : ",
    "right" : "public afterAll(context ) : ",
    "info" : "MethodDeclaration[5394-5950]:MethodDeclaration[5508-6064]"
  }, {
    "left" : "protected testInstanceProvider(context ) : ",
    "right" : "protected testInstanceProvider(context ) : ",
    "info" : "MethodDeclaration[5953-6102]:MethodDeclaration[6067-6216]"
  }, {
    "left" : "private invokeBeforeAllCallbacks(registry , context ) : void",
    "right" : "private invokeBeforeAllCallbacks(registry , context ) : void",
    "info" : "MethodDeclaration[6105-6343]:MethodDeclaration[6219-6457]"
  }, {
    "left" : "private invokeBeforeAllMethods(registry , context ) : void",
    "right" : "private invokeBeforeAllMethods(registry , context ) : void",
    "info" : "MethodDeclaration[6346-6698]:MethodDeclaration[6460-6725]"
  }, {
    "left" : "private invokeAfterAllMethods(registry , context , throwableCollector ) : void",
    "right" : "private invokeAfterAllMethods(registry , context , throwableCollector ) : void",
    "info" : "MethodDeclaration[6701-7023]:MethodDeclaration[6728-7037]"
  }, {
    "left" : "private invokeAfterAllCallbacks(registry , context , throwableCollector ) : void",
    "right" : "private invokeAfterAllCallbacks(registry , context , throwableCollector ) : void",
    "info" : "MethodDeclaration[7026-7314]:MethodDeclaration[7040-7328]"
  }, {
    "left" : "private registerBeforeEachMethodAdapters(extensionRegistry ) : void",
    "right" : "private registerBeforeEachMethodAdapters(registry ) : void",
    "info" : "MethodDeclaration[7317-7579]:MethodDeclaration[7331-7515]"
  }, {
    "left" : "private registerAfterEachMethodAdapters(extensionRegistry ) : void",
    "right" : "private registerAfterEachMethodAdapters(registry ) : void",
    "info" : "MethodDeclaration[7582-7840]:MethodDeclaration[7518-7699]"
  }, {
    "left" : "private registerAnnotatedMethodsAsExtensions(extensionRegistry , annotationType , extensionType , methodValidator , extensionSynthesizer ) : void",
    "right" : "private registerMethodsAsExtensions(methods , registry , extensionSynthesizer ) : void",
    "info" : "MethodDeclaration[7843-8473]:MethodDeclaration[7702-7983]"
  }, {
    "left" : "private synthesizeBeforeEachMethodAdapter(registry , method ) : ",
    "right" : "private synthesizeBeforeEachMethodAdapter(registry , method ) : ",
    "info" : "MethodDeclaration[8476-8690]:MethodDeclaration[7986-8200]"
  }, {
    "left" : "private synthesizeAfterEachMethodAdapter(registry , method ) : ",
    "right" : "private synthesizeAfterEachMethodAdapter(registry , method ) : ",
    "info" : "MethodDeclaration[8693-8905]:MethodDeclaration[8203-8415]"
  }, {
    "left" : "private invokeMethodInTestExtensionContext(method , context , registry ) : void",
    "right" : "private invokeMethodInTestExtensionContext(method , context , registry ) : void",
    "info" : "MethodDeclaration[8908-9350]:MethodDeclaration[8418-8860]"
  } ],
  "mappings" : [
 {
    "left" : "@API(Internal)",
    "right" : "@API(Internal)",
    "info" : "SingleMemberAnnotation[2546-2560]:SingleMemberAnnotation[2440-2454]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2561-2567]:Modifier[2455-2461]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[2568-2573]:TYPE_DECLARATION_KIND[2462-2467]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2932-2938]:Modifier[2921-2927]"
  }, {
    "left" : "ClassTestDescriptor",
    "right" : "ClassTestDescriptor",
    "info" : "SimpleName[2939-2958]:SimpleName[2928-2947]"
  }, {
    "left" : "UniqueId uniqueId",
    "right" : "UniqueId uniqueId",
    "info" : "SingleVariableDeclaration[2959-2976]:SingleVariableDeclaration[2948-2965]"
  }, {
    "left" : "Class<?> testClass",
    "right" : "Class<?> testClass",
    "info" : "SingleVariableDeclaration[2978-2996]:SingleVariableDeclaration[2967-2985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2998-3334]:Block[2987-3443]"
  }, {
    "left" : "super(uniqueId);",
    "right" : "super(uniqueId);",
    "info" : "SuperConstructorInvocation[3002-3018]:SuperConstructorInvocation[2991-3007]"
  }, {
    "left" : "this.testClass = Preconditions.notNull(testClass, \"Class must not be null\");",
    "right" : "this.testClass = Preconditions.notNull(testClass, \"Class must not be null\");",
    "info" : "ExpressionStatement[3022-3098]:ExpressionStatement[3011-3087]"
  }, {
    "left" : "this.displayName = determineDisplayName(testClass, testClass.getName());",
    "right" : "this.displayName = determineDisplayName(testClass, testClass.getName());",
    "info" : "ExpressionStatement[3101-3173]:ExpressionStatement[3090-3162]"
  }, {
    "left" : "this.beforeAllMethods = findBeforeAllMethods(testClass);",
    "right" : "this.beforeAllMethods = findBeforeAllMethods(testClass);",
    "info" : "ExpressionStatement[3177-3233]:ExpressionStatement[3166-3222]"
  }, {
    "left" : "this.afterAllMethods = findAfterAllMethods(testClass);",
    "right" : "this.afterAllMethods = findAfterAllMethods(testClass);",
    "info" : "ExpressionStatement[3236-3290]:ExpressionStatement[3225-3279]"
  }, {
    "left" : "setSource(new JavaSource(testClass));",
    "right" : "setSource(new JavaSource(testClass));",
    "info" : "ExpressionStatement[3294-3331]:ExpressionStatement[3403-3440]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3337-3343]:Modifier[3446-3452]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[3344-3349]:Modifier[3453-3458]"
  }, {
    "left" : "Class<?>",
    "right" : "Class<?>",
    "info" : "ParameterizedType[3350-3358]:ParameterizedType[3459-3467]"
  }, {
    "left" : "getTestClass",
    "right" : "getTestClass",
    "info" : "SimpleName[3359-3371]:SimpleName[3468-3480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3374-3403]:Block[3483-3512]"
  }, {
    "left" : "return this.testClass;",
    "right" : "return this.testClass;",
    "info" : "ReturnStatement[3378-3400]:ReturnStatement[3487-3509]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3406-3415]:MarkerAnnotation[3515-3524]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3417-3423]:Modifier[3526-3532]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[3424-3429]:Modifier[3533-3538]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[3430-3436]:SimpleType[3539-3545]"
  }, {
    "left" : "getName",
    "right" : "getName",
    "info" : "SimpleName[3437-3444]:SimpleName[3546-3553]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3447-3486]:Block[3556-3595]"
  }, {
    "left" : "return getTestClass().getName();",
    "right" : "return getTestClass().getName();",
    "info" : "ReturnStatement[3451-3483]:ReturnStatement[3560-3592]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3489-3498]:MarkerAnnotation[3598-3607]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3500-3506]:Modifier[3609-3615]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[3507-3512]:Modifier[3616-3621]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[3513-3519]:SimpleType[3622-3628]"
  }, {
    "left" : "getDisplayName",
    "right" : "getDisplayName",
    "info" : "SimpleName[3520-3534]:SimpleName[3629-3643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3537-3568]:Block[3646-3677]"
  }, {
    "left" : "return this.displayName;",
    "right" : "return this.displayName;",
    "info" : "ReturnStatement[3541-3565]:ReturnStatement[3650-3674]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3571-3580]:MarkerAnnotation[3680-3689]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3582-3588]:Modifier[3691-3697]"
  }, {
    "left" : "Set<TestTag>",
    "right" : "Set<TestTag>",
    "info" : "ParameterizedType[3589-3601]:ParameterizedType[3698-3710]"
  }, {
    "left" : "getTags",
    "right" : "getTags",
    "info" : "SimpleName[3602-3609]:SimpleName[3711-3718]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3612-3650]:Block[3721-3759]"
  }, {
    "left" : "return getTags(this.testClass);",
    "right" : "return getTags(this.testClass);",
    "info" : "ReturnStatement[3616-3647]:ReturnStatement[3725-3756]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3653-3662]:MarkerAnnotation[3762-3771]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3664-3670]:Modifier[3773-3779]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[3671-3676]:Modifier[3780-3785]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3677-3684]:PrimitiveType[3786-3793]"
  }, {
    "left" : "isTest",
    "right" : "isTest",
    "info" : "SimpleName[3685-3691]:SimpleName[3794-3800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3694-3714]:Block[3803-3823]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[3698-3711]:ReturnStatement[3807-3820]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3717-3726]:MarkerAnnotation[3826-3835]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3728-3734]:Modifier[3837-3843]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[3735-3740]:Modifier[3844-3849]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[3741-3748]:PrimitiveType[3850-3857]"
  }, {
    "left" : "isContainer",
    "right" : "isContainer",
    "info" : "SimpleName[3749-3760]:SimpleName[3858-3869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3763-3782]:Block[3872-3891]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3767-3779]:ReturnStatement[3876-3888]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3785-3794]:MarkerAnnotation[3894-3903]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3796-3802]:Modifier[3905-3911]"
  }, {
    "left" : "JUnit5EngineExecutionContext",
    "right" : "JUnit5EngineExecutionContext",
    "info" : "SimpleType[3803-3831]:SimpleType[3912-3940]"
  }, {
    "left" : "prepare",
    "right" : "prepare",
    "info" : "SimpleName[3832-3839]:SimpleName[3941-3948]"
  }, {
    "left" : "JUnit5EngineExecutionContext context",
    "right" : "JUnit5EngineExecutionContext context",
    "info" : "SingleVariableDeclaration[3840-3876]:SingleVariableDeclaration[3949-3985]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3878-4531]:Block[3987-4645]"
  }, {
    "left" : "ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(testClass,\n\t\t\tcontext.getExtensionRegistry());",
    "right" : "ExtensionRegistry registry = populateNewExtensionRegistryFromExtendWith(this.testClass,\n\t\t\tcontext.getExtensionRegistry());",
    "info" : "VariableDeclarationStatement[3882-4000]:VariableDeclarationStatement[3991-4114]"
  }, {
    "left" : "testClass",
    "right" : "testClass",
    "info" : "SimpleName[3954-3963]:SimpleName[4068-4077]"
  }, {
    "left" : "registerBeforeEachMethodAdapters(registry);",
    "right" : "registerBeforeEachMethodAdapters(registry);",
    "info" : "ExpressionStatement[4004-4047]:ExpressionStatement[4118-4161]"
  }, {
    "left" : "registerAfterEachMethodAdapters(registry);",
    "right" : "registerAfterEachMethodAdapters(registry);",
    "info" : "ExpressionStatement[4050-4092]:ExpressionStatement[4164-4206]"
  }, {
    "left" : "context = context.extend().withExtensionRegistry(registry).build();",
    "right" : "context = context.extend().withExtensionRegistry(registry).build();",
    "info" : "ExpressionStatement[4096-4163]:ExpressionStatement[4210-4277]"
  }, {
    "left" : "ContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n\t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);",
    "right" : "ContainerExtensionContext containerExtensionContext = new ClassBasedContainerExtensionContext(\n\t\t\tcontext.getExtensionContext(), context.getExecutionListener(), this);",
    "info" : "VariableDeclarationStatement[4167-4334]:VariableDeclarationStatement[4281-4448]"
  }, {
    "left" : "return context.extend()\n\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n\t\t\t\t.withExtensionContext(containerExtensionContext)\n\t\t\t\t.build();",
    "right" : "return context.extend()\n\t\t\t\t.withTestInstanceProvider(testInstanceProvider(context))\n\t\t\t\t.withExtensionContext(containerExtensionContext)\n\t\t\t\t.build();",
    "info" : "ReturnStatement[4358-4509]:ReturnStatement[4472-4623]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4534-4543]:MarkerAnnotation[4648-4657]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4545-4551]:Modifier[4659-4665]"
  }, {
    "left" : "SkipResult",
    "right" : "SkipResult",
    "info" : "SimpleType[4552-4562]:SimpleType[4666-4676]"
  }, {
    "left" : "shouldBeSkipped",
    "right" : "shouldBeSkipped",
    "info" : "SimpleName[4563-4578]:SimpleName[4677-4692]"
  }, {
    "left" : "JUnit5EngineExecutionContext context",
    "right" : "JUnit5EngineExecutionContext context",
    "info" : "SingleVariableDeclaration[4579-4615]:SingleVariableDeclaration[4693-4729]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[4624-4633]:SimpleType[4738-4747]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4634-4973]:Block[4748-5087]"
  }, {
    "left" : "ConditionEvaluationResult evaluationResult = conditionEvaluator.evaluateForContainer(\n\t\t\tcontext.getExtensionRegistry(), (ContainerExtensionContext) context.getExtensionContext());",
    "right" : "ConditionEvaluationResult evaluationResult = conditionEvaluator.evaluateForContainer(\n\t\t\tcontext.getExtensionRegistry(), (ContainerExtensionContext) context.getExtensionContext());",
    "info" : "VariableDeclarationStatement[4638-4818]:VariableDeclarationStatement[4752-4932]"
  }, {
    "left" : "if (evaluationResult.isDisabled())",
    "right" : "if (evaluationResult.isDisabled())",
    "info" : "IfStatement[4821-4938]:IfStatement[4935-5052]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4856-4938]:Block[4970-5052]"
  }, {
    "left" : "return SkipResult.skip(evaluationResult.getReason().orElse(\"<unknown>\"));",
    "right" : "return SkipResult.skip(evaluationResult.getReason().orElse(\"<unknown>\"));",
    "info" : "ReturnStatement[4861-4934]:ReturnStatement[4975-5048]"
  }, {
    "left" : "return SkipResult.dontSkip();",
    "right" : "return SkipResult.dontSkip();",
    "info" : "ReturnStatement[4941-4970]:ReturnStatement[5055-5084]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4976-4985]:MarkerAnnotation[5090-5099]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4987-4993]:Modifier[5101-5107]"
  }, {
    "left" : "JUnit5EngineExecutionContext",
    "right" : "JUnit5EngineExecutionContext",
    "info" : "SimpleType[4994-5022]:SimpleType[5108-5136]"
  }, {
    "left" : "beforeAll",
    "right" : "beforeAll",
    "info" : "SimpleName[5023-5032]:SimpleName[5137-5146]"
  }, {
    "left" : "JUnit5EngineExecutionContext context",
    "right" : "JUnit5EngineExecutionContext context",
    "info" : "SingleVariableDeclaration[5033-5069]:SingleVariableDeclaration[5147-5183]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[5078-5087]:SimpleType[5192-5201]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5088-5391]:Block[5202-5505]"
  }, {
    "left" : "ExtensionRegistry registry = context.getExtensionRegistry();",
    "right" : "ExtensionRegistry registry = context.getExtensionRegistry();",
    "info" : "VariableDeclarationStatement[5092-5152]:VariableDeclarationStatement[5206-5266]"
  }, {
    "left" : "ContainerExtensionContext extensionContext = (ContainerExtensionContext) context.getExtensionContext();",
    "right" : "ContainerExtensionContext extensionContext = (ContainerExtensionContext) context.getExtensionContext();",
    "info" : "VariableDeclarationStatement[5155-5258]:VariableDeclarationStatement[5269-5372]"
  }, {
    "left" : "invokeBeforeAllCallbacks(registry, extensionContext);",
    "right" : "invokeBeforeAllCallbacks(registry, extensionContext);",
    "info" : "ExpressionStatement[5262-5315]:ExpressionStatement[5376-5429]"
  }, {
    "left" : "invokeBeforeAllMethods(registry, extensionContext);",
    "right" : "invokeBeforeAllMethods(registry, extensionContext);",
    "info" : "ExpressionStatement[5318-5369]:ExpressionStatement[5432-5483]"
  }, {
    "left" : "return context;",
    "right" : "return context;",
    "info" : "ReturnStatement[5373-5388]:ReturnStatement[5487-5502]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5394-5403]:MarkerAnnotation[5508-5517]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5405-5411]:Modifier[5519-5525]"
  }, {
    "left" : "JUnit5EngineExecutionContext",
    "right" : "JUnit5EngineExecutionContext",
    "info" : "SimpleType[5412-5440]:SimpleType[5526-5554]"
  }, {
    "left" : "afterAll",
    "right" : "afterAll",
    "info" : "SimpleName[5441-5449]:SimpleName[5555-5563]"
  }, {
    "left" : "JUnit5EngineExecutionContext context",
    "right" : "JUnit5EngineExecutionContext context",
    "info" : "SingleVariableDeclaration[5450-5486]:SingleVariableDeclaration[5564-5600]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[5495-5504]:SimpleType[5609-5618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5505-5950]:Block[5619-6064]"
  }, {
    "left" : "ExtensionRegistry registry = context.getExtensionRegistry();",
    "right" : "ExtensionRegistry registry = context.getExtensionRegistry();",
    "info" : "VariableDeclarationStatement[5509-5569]:VariableDeclarationStatement[5623-5683]"
  }, {
    "left" : "ContainerExtensionContext extensionContext = (ContainerExtensionContext) context.getExtensionContext();",
    "right" : "ContainerExtensionContext extensionContext = (ContainerExtensionContext) context.getExtensionContext();",
    "info" : "VariableDeclarationStatement[5572-5675]:VariableDeclarationStatement[5686-5789]"
  }, {
    "left" : "ThrowableCollector throwableCollector = new ThrowableCollector();",
    "right" : "ThrowableCollector throwableCollector = new ThrowableCollector();",
    "info" : "VariableDeclarationStatement[5678-5743]:VariableDeclarationStatement[5792-5857]"
  }, {
    "left" : "invokeAfterAllMethods(registry, extensionContext, throwableCollector);",
    "right" : "invokeAfterAllMethods(registry, extensionContext, throwableCollector);",
    "info" : "ExpressionStatement[5747-5817]:ExpressionStatement[5861-5931]"
  }, {
    "left" : "invokeAfterAllCallbacks(registry, extensionContext, throwableCollector);",
    "right" : "invokeAfterAllCallbacks(registry, extensionContext, throwableCollector);",
    "info" : "ExpressionStatement[5820-5892]:ExpressionStatement[5934-6006]"
  }, {
    "left" : "throwableCollector.assertEmpty();",
    "right" : "throwableCollector.assertEmpty();",
    "info" : "ExpressionStatement[5895-5928]:ExpressionStatement[6009-6042]"
  }, {
    "left" : "return context;",
    "right" : "return context;",
    "info" : "ReturnStatement[5932-5947]:ReturnStatement[6046-6061]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[5953-5962]:Modifier[6067-6076]"
  }, {
    "left" : "TestInstanceProvider",
    "right" : "TestInstanceProvider",
    "info" : "SimpleType[5963-5983]:SimpleType[6077-6097]"
  }, {
    "left" : "testInstanceProvider",
    "right" : "testInstanceProvider",
    "info" : "SimpleName[5984-6004]:SimpleName[6098-6118]"
  }, {
    "left" : "JUnit5EngineExecutionContext context",
    "right" : "JUnit5EngineExecutionContext context",
    "info" : "SingleVariableDeclaration[6005-6041]:SingleVariableDeclaration[6119-6155]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6043-6102]:Block[6157-6216]"
  }, {
    "left" : "return () -> ReflectionUtils.newInstance(testClass);",
    "right" : "return () -> ReflectionUtils.newInstance(testClass);",
    "info" : "ReturnStatement[6047-6099]:ReturnStatement[6161-6213]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6105-6112]:Modifier[6219-6226]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6113-6117]:PrimitiveType[6227-6231]"
  }, {
    "left" : "invokeBeforeAllCallbacks",
    "right" : "invokeBeforeAllCallbacks",
    "info" : "SimpleName[6118-6142]:SimpleName[6232-6256]"
  }, {
    "left" : "ExtensionRegistry registry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[6143-6169]:SingleVariableDeclaration[6257-6283]"
  }, {
    "left" : "ContainerExtensionContext context",
    "right" : "ContainerExtensionContext context",
    "info" : "SingleVariableDeclaration[6171-6204]:SingleVariableDeclaration[6285-6318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6206-6343]:Block[6320-6457]"
  }, {
    "left" : "registry.stream(BeforeAllCallback.class)//\n\t\t\t\t.forEach(extension -> executeAndMaskThrowable(() -> extension.beforeAll(context)));",
    "right" : "registry.stream(BeforeAllCallback.class)//\n\t\t\t\t.forEach(extension -> executeAndMaskThrowable(() -> extension.beforeAll(context)));",
    "info" : "ExpressionStatement[6210-6340]:ExpressionStatement[6324-6454]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6346-6353]:Modifier[6460-6467]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6354-6358]:PrimitiveType[6468-6472]"
  }, {
    "left" : "invokeBeforeAllMethods",
    "right" : "invokeBeforeAllMethods",
    "info" : "SimpleName[6359-6381]:SimpleName[6473-6495]"
  }, {
    "left" : "ExtensionRegistry registry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[6382-6408]:SingleVariableDeclaration[6496-6522]"
  }, {
    "left" : "ContainerExtensionContext context",
    "right" : "ContainerExtensionContext context",
    "info" : "SingleVariableDeclaration[6410-6443]:SingleVariableDeclaration[6524-6557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6445-6698]:Block[6559-6725]"
  }, {
    "left" : "method",
    "right" : "method",
    "info" : "SimpleName[6461-6467]:SimpleName[6593-6599]"
  }, {
    "left" : "this.beforeAllMethods",
    "right" : "this.beforeAllMethods",
    "info" : "FieldAccess[6470-6491]:FieldAccess[6563-6584]"
  }, {
    "left" : "new MethodInvoker(context, registry).invoke(methodInvocationContext(null, method));",
    "right" : "this.beforeAllMethods.forEach(method -> executeAndMaskThrowable(\n\t\t\t() -> new MethodInvoker(context, registry).invoke(methodInvocationContext(null, method))));",
    "info" : "ExpressionStatement[6508-6591]:ExpressionStatement[6563-6722]"
  }, {
    "left" : "new MethodInvoker(context, registry).invoke(methodInvocationContext(null, method))",
    "right" : "new MethodInvoker(context, registry).invoke(methodInvocationContext(null, method))",
    "info" : "MethodInvocation[6508-6590]:MethodInvocation[6637-6719]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6701-6708]:Modifier[6728-6735]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6709-6713]:PrimitiveType[6736-6740]"
  }, {
    "left" : "invokeAfterAllMethods",
    "right" : "invokeAfterAllMethods",
    "info" : "SimpleName[6714-6735]:SimpleName[6741-6762]"
  }, {
    "left" : "ExtensionRegistry registry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[6736-6762]:SingleVariableDeclaration[6763-6789]"
  }, {
    "left" : "ContainerExtensionContext context",
    "right" : "ContainerExtensionContext context",
    "info" : "SingleVariableDeclaration[6764-6797]:SingleVariableDeclaration[6791-6824]"
  }, {
    "left" : "ThrowableCollector throwableCollector",
    "right" : "ThrowableCollector throwableCollector",
    "info" : "SingleVariableDeclaration[6802-6839]:SingleVariableDeclaration[6829-6866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6841-7023]:Block[6868-7037]"
  }, {
    "left" : "method",
    "right" : "method",
    "info" : "SimpleName[6858-6864]:SimpleName[6902-6908]"
  }, {
    "left" : "this.afterAllMethods",
    "right" : "this.afterAllMethods",
    "info" : "FieldAccess[6867-6887]:FieldAccess[6873-6893]"
  }, {
    "left" : "throwableCollector.execute(\n\t\t\t\t() -> new MethodInvoker(context, registry).invoke(methodInvocationContext(null, method)))",
    "right" : "throwableCollector.execute(\n\t\t\t() -> new MethodInvoker(context, registry).invoke(methodInvocationContext(null, method)))",
    "info" : "MethodInvocation[6894-7015]:MethodInvocation[6912-7032]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7026-7033]:Modifier[7040-7047]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7034-7038]:PrimitiveType[7048-7052]"
  }, {
    "left" : "invokeAfterAllCallbacks",
    "right" : "invokeAfterAllCallbacks",
    "info" : "SimpleName[7039-7062]:SimpleName[7053-7076]"
  }, {
    "left" : "ExtensionRegistry registry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[7063-7089]:SingleVariableDeclaration[7077-7103]"
  }, {
    "left" : "ContainerExtensionContext context",
    "right" : "ContainerExtensionContext context",
    "info" : "SingleVariableDeclaration[7091-7124]:SingleVariableDeclaration[7105-7138]"
  }, {
    "left" : "ThrowableCollector throwableCollector",
    "right" : "ThrowableCollector throwableCollector",
    "info" : "SingleVariableDeclaration[7129-7166]:SingleVariableDeclaration[7143-7180]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7168-7314]:Block[7182-7328]"
  }, {
    "left" : "registry.reverseStream(AfterAllCallback.class)//\n\t\t\t\t.forEach(extension -> throwableCollector.execute(() -> extension.afterAll(context)));",
    "right" : "registry.reverseStream(AfterAllCallback.class)//\n\t\t\t\t.forEach(extension -> throwableCollector.execute(() -> extension.afterAll(context)));",
    "info" : "ExpressionStatement[7173-7311]:ExpressionStatement[7187-7325]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7317-7324]:Modifier[7331-7338]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7325-7329]:PrimitiveType[7339-7343]"
  }, {
    "left" : "registerBeforeEachMethodAdapters",
    "right" : "registerBeforeEachMethodAdapters",
    "info" : "SimpleName[7330-7362]:SimpleName[7344-7376]"
  }, {
    "left" : "ExtensionRegistry extensionRegistry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[7363-7398]:SingleVariableDeclaration[7377-7403]"
  }, {
    "left" : "extensionRegistry",
    "right" : "registry",
    "info" : "SimpleName[7381-7398]:SimpleName[7395-7403]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7400-7579]:Block[7405-7515]"
  }, {
    "left" : "this::synthesizeBeforeEachMethodAdapter",
    "right" : "this::synthesizeBeforeEachMethodAdapter",
    "info" : "ExpressionMethodReference[7535-7574]:ExpressionMethodReference[7471-7510]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7582-7589]:Modifier[7518-7525]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7590-7594]:PrimitiveType[7526-7530]"
  }, {
    "left" : "registerAfterEachMethodAdapters",
    "right" : "registerAfterEachMethodAdapters",
    "info" : "SimpleName[7595-7626]:SimpleName[7531-7562]"
  }, {
    "left" : "ExtensionRegistry extensionRegistry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[7627-7662]:SingleVariableDeclaration[7563-7589]"
  }, {
    "left" : "extensionRegistry",
    "right" : "registry",
    "info" : "SimpleName[7645-7662]:SimpleName[7581-7589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7664-7840]:Block[7591-7699]"
  }, {
    "left" : "this::synthesizeAfterEachMethodAdapter",
    "right" : "this::synthesizeAfterEachMethodAdapter",
    "info" : "ExpressionMethodReference[7797-7835]:ExpressionMethodReference[7656-7694]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7843-7850]:Modifier[7702-7709]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7873-7877]:PrimitiveType[7710-7714]"
  }, {
    "left" : "registerAnnotatedMethodsAsExtensions",
    "right" : "registerMethodsAsExtensions",
    "info" : "SimpleName[7878-7914]:SimpleName[7715-7742]"
  }, {
    "left" : "ExtensionRegistry extensionRegistry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[7915-7950]:SingleVariableDeclaration[7765-7791]"
  }, {
    "left" : "extensionRegistry",
    "right" : "registry",
    "info" : "SimpleName[7933-7950]:SimpleName[7783-7791]"
  }, {
    "left" : "BiFunction<ExtensionRegistry, Method, Extension> extensionSynthesizer",
    "right" : "BiFunction<ExtensionRegistry, Method, Extension> extensionSynthesizer",
    "info" : "SingleVariableDeclaration[8075-8144]:SingleVariableDeclaration[7796-7865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8146-8473]:Block[7867-7983]"
  }, {
    "left" : "findAnnotatedMethods(testClass, annotationType, MethodSortOrder.HierarchyDown).stream()\n\t\t\t.peek(method -> methodValidator.accept(extensionType, method))\n\t\t\t.forEach(method ->\n\t\t\t\textensionRegistry.registerExtension(extensionSynthesizer.apply(extensionRegistry, method), method));",
    "right" : "methods.forEach(method -> registry.registerExtension(extensionSynthesizer.apply(registry, method), method));",
    "info" : "ExpressionStatement[8171-8451]:ExpressionStatement[7872-7980]"
  }, {
    "left" : "extensionRegistry",
    "right" : "registry",
    "info" : "SimpleName[8351-8368]:SimpleName[7898-7906]"
  }, {
    "left" : "extensionRegistry",
    "right" : "registry",
    "info" : "SimpleName[8414-8431]:SimpleName[7952-7960]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8476-8483]:Modifier[7986-7993]"
  }, {
    "left" : "BeforeEachMethodAdapter",
    "right" : "BeforeEachMethodAdapter",
    "info" : "SimpleType[8484-8507]:SimpleType[7994-8017]"
  }, {
    "left" : "synthesizeBeforeEachMethodAdapter",
    "right" : "synthesizeBeforeEachMethodAdapter",
    "info" : "SimpleName[8508-8541]:SimpleName[8018-8051]"
  }, {
    "left" : "ExtensionRegistry registry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[8542-8568]:SingleVariableDeclaration[8052-8078]"
  }, {
    "left" : "Method method",
    "right" : "Method method",
    "info" : "SingleVariableDeclaration[8570-8583]:SingleVariableDeclaration[8080-8093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8585-8690]:Block[8095-8200]"
  }, {
    "left" : "return extensionContext -> invokeMethodInTestExtensionContext(method, extensionContext, registry);",
    "right" : "return extensionContext -> invokeMethodInTestExtensionContext(method, extensionContext, registry);",
    "info" : "ReturnStatement[8589-8687]:ReturnStatement[8099-8197]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8693-8700]:Modifier[8203-8210]"
  }, {
    "left" : "AfterEachMethodAdapter",
    "right" : "AfterEachMethodAdapter",
    "info" : "SimpleType[8701-8723]:SimpleType[8211-8233]"
  }, {
    "left" : "synthesizeAfterEachMethodAdapter",
    "right" : "synthesizeAfterEachMethodAdapter",
    "info" : "SimpleName[8724-8756]:SimpleName[8234-8266]"
  }, {
    "left" : "ExtensionRegistry registry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[8757-8783]:SingleVariableDeclaration[8267-8293]"
  }, {
    "left" : "Method method",
    "right" : "Method method",
    "info" : "SingleVariableDeclaration[8785-8798]:SingleVariableDeclaration[8295-8308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8800-8905]:Block[8310-8415]"
  }, {
    "left" : "return extensionContext -> invokeMethodInTestExtensionContext(method, extensionContext, registry);",
    "right" : "return extensionContext -> invokeMethodInTestExtensionContext(method, extensionContext, registry);",
    "info" : "ReturnStatement[8804-8902]:ReturnStatement[8314-8412]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8908-8915]:Modifier[8418-8425]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8916-8920]:PrimitiveType[8426-8430]"
  }, {
    "left" : "invokeMethodInTestExtensionContext",
    "right" : "invokeMethodInTestExtensionContext",
    "info" : "SimpleName[8921-8955]:SimpleName[8431-8465]"
  }, {
    "left" : "Method method",
    "right" : "Method method",
    "info" : "SingleVariableDeclaration[8956-8969]:SingleVariableDeclaration[8466-8479]"
  }, {
    "left" : "TestExtensionContext context",
    "right" : "TestExtensionContext context",
    "info" : "SingleVariableDeclaration[8971-8999]:SingleVariableDeclaration[8481-8509]"
  }, {
    "left" : "ExtensionRegistry registry",
    "right" : "ExtensionRegistry registry",
    "info" : "SingleVariableDeclaration[9004-9030]:SingleVariableDeclaration[8514-8540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9032-9350]:Block[8542-8860]"
  }, {
    "left" : "Object instance = ReflectionUtils.getOuterInstance(context.getTestInstance(),\n\t\t\tmethod.getDeclaringClass()).orElseThrow(\n\t\t\t\t() -> new JUnitException(\"Failed to find instance for method: \" + method.toGenericString()));",
    "right" : "Object instance = ReflectionUtils.getOuterInstance(context.getTestInstance(),\n\t\t\tmethod.getDeclaringClass()).orElseThrow(\n\t\t\t\t() -> new JUnitException(\"Failed to find instance for method: \" + method.toGenericString()));",
    "info" : "VariableDeclarationStatement[9037-9256]:VariableDeclarationStatement[8547-8766]"
  }, {
    "left" : "new MethodInvoker(context, registry).invoke(methodInvocationContext(instance, method));",
    "right" : "new MethodInvoker(context, registry).invoke(methodInvocationContext(instance, method));",
    "info" : "ExpressionStatement[9260-9347]:ExpressionStatement[8770-8857]"
  } ]
}