{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "UpdateMapper",
      "right" : "UpdateMapper",
      "info" : "TypeDeclaration[1610-11451]:TypeDeclaration[1610-11339]"
    }, {
      "left" : "private final MongoConverter converter;",
      "right" : "private final MongoConverter converter;",
      "info" : "FieldDeclaration[1839-1878]:FieldDeclaration[1839-1878]"
    }, {
      "left" : "public UpdateMapper(MongoConverter converter)",
      "right" : "public UpdateMapper(MongoConverter converter)",
      "info" : "MethodDeclaration[1881-2126]:MethodDeclaration[1881-2126]"
    }, {
      "left" : "protected Object delegateConvertToMongoType(Object source, MongoPersistentEntity<?> entity)",
      "right" : "protected Object delegateConvertToMongoType(Object source, MongoPersistentEntity<?> entity)",
      "info" : "MethodDeclaration[2129-2712]:MethodDeclaration[2129-2712]"
    }, {
      "left" : "protected Entry<String, Object> getMappedObjectForField(Field field, Object rawValue)",
      "right" : "protected Entry<String, Object> getMappedObjectForField(Field field, Object rawValue)",
      "info" : "MethodDeclaration[2916-3455]:MethodDeclaration[2916-3455]"
    }, {
      "left" : "private Entry<String, Object> getMappedUpdateModifier(Field field, Object rawValue)",
      "right" : "private Entry<String, Object> getMappedUpdateModifier(Field field, Object rawValue)",
      "info" : "MethodDeclaration[3458-4124]:MethodDeclaration[3458-4124]"
    }, {
      "left" : "protected boolean isAssociationConversionNecessary(Field documentField, Object value)",
      "right" : "protected boolean isAssociationConversionNecessary(Field documentField, Object value)",
      "info" : "MethodDeclaration[4337-4548]:MethodDeclaration[4337-4548]"
    }, {
      "left" : "private boolean isUpdateModifier(Object value)",
      "right" : "private boolean isUpdateModifier(Object value)",
      "info" : "MethodDeclaration[4551-4668]:MethodDeclaration[4551-4668]"
    }, {
      "left" : "private boolean isQuery(Object value)",
      "right" : "private boolean isQuery(Object value)",
      "info" : "MethodDeclaration[4671-4746]:MethodDeclaration[4671-4746]"
    }, {
      "left" : "private DBObject getMappedValue(Field field, Modifier modifier)",
      "right" : "private DBObject getMappedValue(Field field, Modifier modifier)",
      "info" : "MethodDeclaration[4749-5050]:MethodDeclaration[4749-5050]"
    }, {
      "left" : "private TypeInformation<?> processTypeHintForNestedDocuments(Object source, TypeInformation<?> info)",
      "right" : "private TypeInformation<?> getTypeHintForEntity(Object source, MongoPersistentEntity<?> entity)",
      "info" : "MethodDeclaration[5237-5591]:MethodDeclaration[5053-5479]"
    }, {
      "left" : "protected Field createPropertyField(MongoPersistentEntity<?> entity, String key,\n\t\t\tMappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext)",
      "right" : "protected Field createPropertyField(MongoPersistentEntity<?> entity, String key,\n\t\t\tMappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext)",
      "info" : "MethodDeclaration[5853-6192]:MethodDeclaration[5741-6080]"
    }, {
      "left" : "MetadataBackedUpdateField",
      "right" : "MetadataBackedUpdateField",
      "info" : "TypeDeclaration[6195-11449]:TypeDeclaration[6083-11337]"
    }, {
      "left" : "private final String key;",
      "right" : "private final String key;",
      "info" : "FieldDeclaration[6725-6750]:FieldDeclaration[6613-6638]"
    }, {
      "left" : "public MetadataBackedUpdateField(MongoPersistentEntity<?> entity, String key,\n\t\t\t\tMappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext)",
      "right" : "public MetadataBackedUpdateField(MongoPersistentEntity<?> entity, String key,\n\t\t\t\tMappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext)",
      "info" : "MethodDeclaration[6754-7435]:MethodDeclaration[6642-7323]"
    }, {
      "left" : "public String getMappedKey()",
      "right" : "public String getMappedKey()",
      "info" : "MethodDeclaration[7572-7681]:MethodDeclaration[7460-7569]"
    }, {
      "left" : "protected Converter<MongoPersistentProperty, String> getPropertyConverter()",
      "right" : "protected Converter<MongoPersistentProperty, String> getPropertyConverter()",
      "info" : "MethodDeclaration[7827-7964]:MethodDeclaration[7715-7852]"
    }, {
      "left" : "protected Converter<MongoPersistentProperty, String> getAssociationConverter()",
      "right" : "protected Converter<MongoPersistentProperty, String> getAssociationConverter()",
      "info" : "MethodDeclaration[8112-8273]:MethodDeclaration[8000-8161]"
    }, {
      "left" : "UpdateKeyMapper",
      "right" : "UpdateKeyMapper",
      "info" : "TypeDeclaration[8277-9580]:TypeDeclaration[8165-9468]"
    }, {
      "left" : "private final Iterator<String> iterator;",
      "right" : "private final Iterator<String> iterator;",
      "info" : "FieldDeclaration[8470-8510]:FieldDeclaration[8358-8398]"
    }, {
      "left" : "protected UpdateKeyMapper(String rawKey)",
      "right" : "protected UpdateKeyMapper(String rawKey)",
      "info" : "MethodDeclaration[8515-8719]:MethodDeclaration[8403-8607]"
    }, {
      "left" : "protected String mapPropertyName(MongoPersistentProperty property)",
      "right" : "protected String mapPropertyName(MongoPersistentProperty property)",
      "info" : "MethodDeclaration[8724-9340]:MethodDeclaration[8612-9228]"
    }, {
      "left" : "boolean isPositionalParameter(String partial)",
      "right" : "boolean isPositionalParameter(String partial)",
      "info" : "MethodDeclaration[9345-9575]:MethodDeclaration[9233-9463]"
    }, {
      "left" : "UpdatePropertyConverter",
      "right" : "UpdatePropertyConverter",
      "info" : "TypeDeclaration[9584-10556]:TypeDeclaration[9472-10444]"
    }, {
      "left" : "private final UpdateKeyMapper mapper;",
      "right" : "private final UpdateKeyMapper mapper;",
      "info" : "FieldDeclaration[9921-9958]:FieldDeclaration[9809-9846]"
    }, {
      "left" : "public UpdatePropertyConverter(String updateKey)",
      "right" : "public UpdatePropertyConverter(String updateKey)",
      "info" : "MethodDeclaration[9963-10303]:MethodDeclaration[9851-10191]"
    }, {
      "left" : "public String convert(MongoPersistentProperty property)",
      "right" : "public String convert(MongoPersistentProperty property)",
      "info" : "MethodDeclaration[10432-10552]:MethodDeclaration[10320-10440]"
    }, {
      "left" : "UpdateAssociationConverter",
      "right" : "UpdateAssociationConverter",
      "info" : "TypeDeclaration[10560-11446]:TypeDeclaration[10448-11334]"
    }, {
      "left" : "private final UpdateKeyMapper mapper;",
      "right" : "private final UpdateKeyMapper mapper;",
      "info" : "FieldDeclaration[10786-10823]:FieldDeclaration[10674-10711]"
    }, {
      "left" : "public UpdateAssociationConverter(Association<MongoPersistentProperty> association, String key)",
      "right" : "public UpdateAssociationConverter(Association<MongoPersistentProperty> association, String key)",
      "info" : "MethodDeclaration[10828-11158]:MethodDeclaration[10716-11046]"
    }, {
      "left" : "public String convert(MongoPersistentProperty source)",
      "right" : "public String convert(MongoPersistentProperty source)",
      "info" : "MethodDeclaration[11287-11442]:MethodDeclaration[11175-11330]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1789-1795]:Modifier[1789-1795]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1796-1801]:TYPE_DECLARATION_KIND[1796-1801]"
    }, {
      "left" : "UpdateMapper",
      "right" : "UpdateMapper",
      "info" : "SimpleName[1802-1814]:SimpleName[1802-1814]"
    }, {
      "left" : "QueryMapper",
      "right" : "QueryMapper",
      "info" : "SimpleType[1823-1834]:SimpleType[1823-1834]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2025-2031]:Modifier[2025-2031]"
    }, {
      "left" : "UpdateMapper",
      "right" : "UpdateMapper",
      "info" : "SimpleName[2032-2044]:SimpleName[2032-2044]"
    }, {
      "left" : "MongoConverter converter",
      "right" : "MongoConverter converter",
      "info" : "SingleVariableDeclaration[2045-2069]:SingleVariableDeclaration[2045-2069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2071-2126]:Block[2071-2126]"
    }, {
      "left" : "super(converter);",
      "right" : "super(converter);",
      "info" : "SuperConstructorInvocation[2076-2093]:SuperConstructorInvocation[2076-2093]"
    }, {
      "left" : "this.converter = converter;",
      "right" : "this.converter = converter;",
      "info" : "ExpressionStatement[2096-2123]:ExpressionStatement[2096-2123]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2469-2478]:MarkerAnnotation[2469-2478]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2480-2489]:Modifier[2480-2489]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[2490-2496]:SimpleType[2490-2496]"
    }, {
      "left" : "delegateConvertToMongoType",
      "right" : "delegateConvertToMongoType",
      "info" : "SimpleName[2497-2523]:SimpleName[2497-2523]"
    }, {
      "left" : "Object source",
      "right" : "Object source",
      "info" : "SingleVariableDeclaration[2524-2537]:SingleVariableDeclaration[2524-2537]"
    }, {
      "left" : "MongoPersistentEntity<?> entity",
      "right" : "MongoPersistentEntity<?> entity",
      "info" : "SingleVariableDeclaration[2539-2570]:SingleVariableDeclaration[2539-2570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2572-2712]:Block[2572-2712]"
    }, {
      "left" : "return converter.convertToMongoType(source,\n\t\t\t\tentity == null ? ClassTypeInformation.OBJECT : getTypeHintForEntity(source, entity));",
      "right" : "return converter.convertToMongoType(source,\n\t\t\t\tentity == null ? ClassTypeInformation.OBJECT : getTypeHintForEntity(source, entity));",
      "info" : "ReturnStatement[2576-2709]:ReturnStatement[2576-2709]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[2916-2925]:MarkerAnnotation[2916-2925]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2927-2936]:Modifier[2927-2936]"
    }, {
      "left" : "Entry<String, Object>",
      "right" : "Entry<String, Object>",
      "info" : "ParameterizedType[2937-2958]:ParameterizedType[2937-2958]"
    }, {
      "left" : "getMappedObjectForField",
      "right" : "getMappedObjectForField",
      "info" : "SimpleName[2959-2982]:SimpleName[2959-2982]"
    }, {
      "left" : "Field field",
      "right" : "Field field",
      "info" : "SingleVariableDeclaration[2983-2994]:SingleVariableDeclaration[2983-2994]"
    }, {
      "left" : "Object rawValue",
      "right" : "Object rawValue",
      "info" : "SingleVariableDeclaration[2996-3011]:SingleVariableDeclaration[2996-3011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3013-3455]:Block[3013-3455]"
    }, {
      "left" : "if (isDBObject(rawValue))",
      "right" : "if (isDBObject(rawValue))",
      "info" : "IfStatement[3018-3144]:IfStatement[3018-3144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3044-3144]:Block[3044-3144]"
    }, {
      "left" : "return createMapEntry(field, convertSimpleOrDBObject(rawValue, field.getPropertyEntity()));",
      "right" : "return createMapEntry(field, convertSimpleOrDBObject(rawValue, field.getPropertyEntity()));",
      "info" : "ReturnStatement[3049-3140]:ReturnStatement[3049-3140]"
    }, {
      "left" : "if (isQuery(rawValue))",
      "right" : "if (isQuery(rawValue))",
      "info" : "IfStatement[3148-3301]:IfStatement[3148-3301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3171-3301]:Block[3171-3301]"
    }, {
      "left" : "return createMapEntry(field,\n\t\t\t\t\tsuper.getMappedObject(((Query) rawValue).getQueryObject(), field.getPropertyEntity()));",
      "right" : "return createMapEntry(field,\n\t\t\t\t\tsuper.getMappedObject(((Query) rawValue).getQueryObject(), field.getPropertyEntity()));",
      "info" : "ReturnStatement[3176-3297]:ReturnStatement[3176-3297]"
    }, {
      "left" : "if (isUpdateModifier(rawValue))",
      "right" : "if (isUpdateModifier(rawValue))",
      "info" : "IfStatement[3305-3394]:IfStatement[3305-3394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3337-3394]:Block[3337-3394]"
    }, {
      "left" : "return getMappedUpdateModifier(field, rawValue);",
      "right" : "return getMappedUpdateModifier(field, rawValue);",
      "info" : "ReturnStatement[3342-3390]:ReturnStatement[3342-3390]"
    }, {
      "left" : "return super.getMappedObjectForField(field, rawValue);",
      "right" : "return super.getMappedObjectForField(field, rawValue);",
      "info" : "ReturnStatement[3398-3452]:ReturnStatement[3398-3452]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3458-3465]:Modifier[3458-3465]"
    }, {
      "left" : "Entry<String, Object>",
      "right" : "Entry<String, Object>",
      "info" : "ParameterizedType[3466-3487]:ParameterizedType[3466-3487]"
    }, {
      "left" : "getMappedUpdateModifier",
      "right" : "getMappedUpdateModifier",
      "info" : "SimpleName[3488-3511]:SimpleName[3488-3511]"
    }, {
      "left" : "Field field",
      "right" : "Field field",
      "info" : "SingleVariableDeclaration[3512-3523]:SingleVariableDeclaration[3512-3523]"
    }, {
      "left" : "Object rawValue",
      "right" : "Object rawValue",
      "info" : "SingleVariableDeclaration[3525-3540]:SingleVariableDeclaration[3525-3540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3542-4124]:Block[3542-4124]"
    }, {
      "left" : "Object value = null;",
      "right" : "Object value = null;",
      "info" : "VariableDeclarationStatement[3546-3566]:VariableDeclarationStatement[3546-3566]"
    }, {
      "left" : "if (rawValue instanceof Modifier)",
      "right" : "if (rawValue instanceof Modifier)",
      "info" : "IfStatement[3570-4081]:IfStatement[3570-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3604-3666]:Block[3604-3666]"
    }, {
      "left" : "value = getMappedValue(field, (Modifier) rawValue);",
      "right" : "value = getMappedValue(field, (Modifier) rawValue);",
      "info" : "ExpressionStatement[3610-3661]:ExpressionStatement[3610-3661]"
    }, {
      "left" : "if (rawValue instanceof Modifiers)",
      "right" : "if (rawValue instanceof Modifiers)",
      "info" : "IfStatement[3672-4081]:IfStatement[3672-4081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3707-3958]:Block[3707-3958]"
    }, {
      "left" : "DBObject modificationOperations = new BasicDBObject();",
      "right" : "DBObject modificationOperations = new BasicDBObject();",
      "info" : "VariableDeclarationStatement[3713-3767]:VariableDeclarationStatement[3713-3767]"
    }, {
      "left" : "for (Modifier modifier : ((Modifiers) rawValue).getModifiers())",
      "right" : "for (Modifier modifier : ((Modifiers) rawValue).getModifiers())",
      "info" : "EnhancedForStatement[3772-3918]:EnhancedForStatement[3772-3918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3836-3918]:Block[3836-3918]"
    }, {
      "left" : "modificationOperations.putAll(getMappedValue(field, modifier).toMap());",
      "right" : "modificationOperations.putAll(getMappedValue(field, modifier).toMap());",
      "info" : "ExpressionStatement[3842-3913]:ExpressionStatement[3842-3913]"
    }, {
      "left" : "value = modificationOperations;",
      "right" : "value = modificationOperations;",
      "info" : "ExpressionStatement[3923-3954]:ExpressionStatement[3923-3954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3964-4081]:Block[3964-4081]"
    }, {
      "left" : "throw new IllegalArgumentException(String.format(\"Unable to map value of type '%s'!\", rawValue.getClass()));",
      "right" : "throw new IllegalArgumentException(String.format(\"Unable to map value of type '%s'!\", rawValue.getClass()));",
      "info" : "ThrowStatement[3969-4077]:ThrowStatement[3969-4077]"
    }, {
      "left" : "return createMapEntry(field, value);",
      "right" : "return createMapEntry(field, value);",
      "info" : "ReturnStatement[4085-4121]:ReturnStatement[4085-4121]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4337-4346]:MarkerAnnotation[4337-4346]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4348-4357]:Modifier[4348-4357]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4358-4365]:PrimitiveType[4358-4365]"
    }, {
      "left" : "isAssociationConversionNecessary",
      "right" : "isAssociationConversionNecessary",
      "info" : "SimpleName[4366-4398]:SimpleName[4366-4398]"
    }, {
      "left" : "Field documentField",
      "right" : "Field documentField",
      "info" : "SingleVariableDeclaration[4399-4418]:SingleVariableDeclaration[4399-4418]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[4420-4432]:SingleVariableDeclaration[4420-4432]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4434-4548]:Block[4434-4548]"
    }, {
      "left" : "return super.isAssociationConversionNecessary(documentField, value) || documentField.containsAssociation();",
      "right" : "return super.isAssociationConversionNecessary(documentField, value) || documentField.containsAssociation();",
      "info" : "ReturnStatement[4438-4545]:ReturnStatement[4438-4545]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4551-4558]:Modifier[4551-4558]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4559-4566]:PrimitiveType[4559-4566]"
    }, {
      "left" : "isUpdateModifier",
      "right" : "isUpdateModifier",
      "info" : "SimpleName[4567-4583]:SimpleName[4567-4583]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[4584-4596]:SingleVariableDeclaration[4584-4596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4598-4668]:Block[4598-4668]"
    }, {
      "left" : "return value instanceof Modifier || value instanceof Modifiers;",
      "right" : "return value instanceof Modifier || value instanceof Modifiers;",
      "info" : "ReturnStatement[4602-4665]:ReturnStatement[4602-4665]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4671-4678]:Modifier[4671-4678]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4679-4686]:PrimitiveType[4679-4686]"
    }, {
      "left" : "isQuery",
      "right" : "isQuery",
      "info" : "SimpleName[4687-4694]:SimpleName[4687-4694]"
    }, {
      "left" : "Object value",
      "right" : "Object value",
      "info" : "SingleVariableDeclaration[4695-4707]:SingleVariableDeclaration[4695-4707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4709-4746]:Block[4709-4746]"
    }, {
      "left" : "return value instanceof Query;",
      "right" : "return value instanceof Query;",
      "info" : "ReturnStatement[4713-4743]:ReturnStatement[4713-4743]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4749-4756]:Modifier[4749-4756]"
    }, {
      "left" : "DBObject",
      "right" : "DBObject",
      "info" : "SimpleType[4757-4765]:SimpleType[4757-4765]"
    }, {
      "left" : "getMappedValue",
      "right" : "getMappedValue",
      "info" : "SimpleName[4766-4780]:SimpleName[4766-4780]"
    }, {
      "left" : "Field field",
      "right" : "Field field",
      "info" : "SingleVariableDeclaration[4781-4792]:SingleVariableDeclaration[4781-4792]"
    }, {
      "left" : "Modifier modifier",
      "right" : "Modifier modifier",
      "info" : "SingleVariableDeclaration[4794-4811]:SingleVariableDeclaration[4794-4811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4813-5050]:Block[4813-5050]"
    }, {
      "left" : "TypeInformation<?> typeHint = field == null ? ClassTypeInformation.OBJECT : field.getTypeHint();",
      "right" : "TypeInformation<?> typeHint = field == null ? ClassTypeInformation.OBJECT : field.getTypeHint();",
      "info" : "VariableDeclarationStatement[4818-4914]:VariableDeclarationStatement[4818-4914]"
    }, {
      "left" : "Object value = converter.convertToMongoType(modifier.getValue(), typeHint);",
      "right" : "Object value = converter.convertToMongoType(modifier.getValue(), typeHint);",
      "info" : "VariableDeclarationStatement[4918-4993]:VariableDeclarationStatement[4918-4993]"
    }, {
      "left" : "return new BasicDBObject(modifier.getKey(), value);",
      "right" : "return new BasicDBObject(modifier.getKey(), value);",
      "info" : "ReturnStatement[4996-5047]:ReturnStatement[4996-5047]"
    }, {
      "left" : "MongoPersistentEntity<?> entity",
      "right" : "MongoPersistentEntity<?> entity",
      "info" : "SingleVariableDeclaration[5116-5147]:SingleVariableDeclaration[5116-5147]"
    }, {
      "left" : "entity.getTypeInformation()",
      "right" : "entity.getTypeInformation()",
      "info" : "MethodInvocation[5202-5229]:MethodInvocation[5180-5207]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[5237-5244]:Modifier[5053-5060]"
    }, {
      "left" : "TypeInformation<?>",
      "right" : "TypeInformation<?>",
      "info" : "ParameterizedType[5245-5263]:ParameterizedType[5061-5079]"
    }, {
      "left" : "processTypeHintForNestedDocuments",
      "right" : "getTypeHintForEntity",
      "info" : "SimpleName[5264-5297]:SimpleName[5080-5100]"
    }, {
      "left" : "Object source",
      "right" : "Object source",
      "info" : "SingleVariableDeclaration[5298-5311]:SingleVariableDeclaration[5101-5114]"
    }, {
      "left" : "TypeInformation<?>",
      "right" : "TypeInformation<?>",
      "info" : "ParameterizedType[5313-5331]:ParameterizedType[5154-5172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5338-5591]:Block[5149-5479]"
    }, {
      "left" : "Class<?> type = info.getActualType().getType();",
      "right" : "Class<?> type = info.getActualType().getType();",
      "info" : "VariableDeclarationStatement[5343-5390]:VariableDeclarationStatement[5211-5258]"
    }, {
      "left" : "if (type.isInterface() || java.lang.reflect.Modifier.isAbstract(type.getModifiers()))",
      "right" : "if (source == null || type.isInterface() || java.lang.reflect.Modifier.isAbstract(type.getModifiers()))",
      "info" : "IfStatement[5393-5500]:IfStatement[5262-5387]"
    }, {
      "left" : "type.isInterface()",
      "right" : "type.isInterface()",
      "info" : "MethodInvocation[5397-5415]:MethodInvocation[5284-5302]"
    }, {
      "left" : "||",
      "right" : "||",
      "info" : "INFIX_EXPRESSION_OPERATOR[5416-5418]:INFIX_EXPRESSION_OPERATOR[5281-5283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5479-5500]:Block[5366-5387]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[5484-5496]:ReturnStatement[5371-5383]"
    }, {
      "left" : "if (!type.equals(source.getClass()))",
      "right" : "if (!type.equals(source.getClass()))",
      "info" : "IfStatement[5504-5562]:IfStatement[5391-5449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5541-5562]:Block[5428-5449]"
    }, {
      "left" : "return info;",
      "right" : "return info;",
      "info" : "ReturnStatement[5546-5558]:ReturnStatement[5433-5445]"
    }, {
      "left" : "return NESTED_DOCUMENT;",
      "right" : "return NESTED_DOCUMENT;",
      "info" : "ReturnStatement[5565-5588]:ReturnStatement[5453-5476]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5853-5862]:MarkerAnnotation[5741-5750]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5864-5873]:Modifier[5752-5761]"
    }, {
      "left" : "Field",
      "right" : "Field",
      "info" : "SimpleType[5874-5879]:SimpleType[5762-5767]"
    }, {
      "left" : "createPropertyField",
      "right" : "createPropertyField",
      "info" : "SimpleName[5880-5899]:SimpleName[5768-5787]"
    }, {
      "left" : "MongoPersistentEntity<?> entity",
      "right" : "MongoPersistentEntity<?> entity",
      "info" : "SingleVariableDeclaration[5900-5931]:SingleVariableDeclaration[5788-5819]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[5933-5943]:SingleVariableDeclaration[5821-5831]"
    }, {
      "left" : "MappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext",
      "right" : "MappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext",
      "info" : "SingleVariableDeclaration[5948-6038]:SingleVariableDeclaration[5836-5926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6040-6192]:Block[5928-6080]"
    }, {
      "left" : "return entity == null ? super.createPropertyField(entity, key, mappingContext)\n\t\t\t\t: new MetadataBackedUpdateField(entity, key, mappingContext);",
      "right" : "return entity == null ? super.createPropertyField(entity, key, mappingContext)\n\t\t\t\t: new MetadataBackedUpdateField(entity, key, mappingContext);",
      "info" : "ReturnStatement[6045-6189]:ReturnStatement[5933-6077]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6645-6652]:Modifier[6533-6540]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6653-6659]:Modifier[6541-6547]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[6660-6665]:TYPE_DECLARATION_KIND[6548-6553]"
    }, {
      "left" : "MetadataBackedUpdateField",
      "right" : "MetadataBackedUpdateField",
      "info" : "SimpleName[6666-6691]:SimpleName[6554-6579]"
    }, {
      "left" : "MetadataBackedField",
      "right" : "MetadataBackedField",
      "info" : "SimpleType[6700-6719]:SimpleType[6588-6607]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7172-7178]:Modifier[7060-7066]"
    }, {
      "left" : "MetadataBackedUpdateField",
      "right" : "MetadataBackedUpdateField",
      "info" : "SimpleName[7179-7204]:SimpleName[7067-7092]"
    }, {
      "left" : "MongoPersistentEntity<?> entity",
      "right" : "MongoPersistentEntity<?> entity",
      "info" : "SingleVariableDeclaration[7205-7236]:SingleVariableDeclaration[7093-7124]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[7238-7248]:SingleVariableDeclaration[7126-7136]"
    }, {
      "left" : "MappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext",
      "right" : "MappingContext<? extends MongoPersistentEntity<?>, MongoPersistentProperty> mappingContext",
      "info" : "SingleVariableDeclaration[7254-7344]:SingleVariableDeclaration[7142-7232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7346-7435]:Block[7234-7323]"
    }, {
      "left" : "super(key.replaceAll(\"\\\\.\\\\$\", \"\"), entity, mappingContext);",
      "right" : "super(key.replaceAll(\"\\\\.\\\\$\", \"\"), entity, mappingContext);",
      "info" : "SuperConstructorInvocation[7352-7412]:SuperConstructorInvocation[7240-7300]"
    }, {
      "left" : "this.key = key;",
      "right" : "this.key = key;",
      "info" : "ExpressionStatement[7416-7431]:ExpressionStatement[7304-7319]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7572-7581]:MarkerAnnotation[7460-7469]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7584-7590]:Modifier[7472-7478]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[7591-7597]:SimpleType[7479-7485]"
    }, {
      "left" : "getMappedKey",
      "right" : "getMappedKey",
      "info" : "SimpleName[7598-7610]:SimpleName[7486-7498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7613-7681]:Block[7501-7569]"
    }, {
      "left" : "return this.getPath() == null ? key : super.getMappedKey();",
      "right" : "return this.getPath() == null ? key : super.getMappedKey();",
      "info" : "ReturnStatement[7618-7677]:ReturnStatement[7506-7565]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7827-7836]:MarkerAnnotation[7715-7724]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7839-7848]:Modifier[7727-7736]"
    }, {
      "left" : "Converter<MongoPersistentProperty, String>",
      "right" : "Converter<MongoPersistentProperty, String>",
      "info" : "ParameterizedType[7849-7891]:ParameterizedType[7737-7779]"
    }, {
      "left" : "getPropertyConverter",
      "right" : "getPropertyConverter",
      "info" : "SimpleName[7892-7912]:SimpleName[7780-7800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7915-7964]:Block[7803-7852]"
    }, {
      "left" : "return new UpdatePropertyConverter(key);",
      "right" : "return new UpdatePropertyConverter(key);",
      "info" : "ReturnStatement[7920-7960]:ReturnStatement[7808-7848]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8112-8121]:MarkerAnnotation[8000-8009]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8124-8133]:Modifier[8012-8021]"
    }, {
      "left" : "Converter<MongoPersistentProperty, String>",
      "right" : "Converter<MongoPersistentProperty, String>",
      "info" : "ParameterizedType[8134-8176]:ParameterizedType[8022-8064]"
    }, {
      "left" : "getAssociationConverter",
      "right" : "getAssociationConverter",
      "info" : "SimpleName[8177-8200]:SimpleName[8065-8088]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8203-8273]:Block[8091-8161]"
    }, {
      "left" : "return new UpdateAssociationConverter(getAssociation(), key);",
      "right" : "return new UpdateAssociationConverter(getAssociation(), key);",
      "info" : "ReturnStatement[8208-8269]:ReturnStatement[8096-8157]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8427-8434]:Modifier[8315-8322]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8435-8441]:Modifier[8323-8329]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[8442-8447]:TYPE_DECLARATION_KIND[8330-8335]"
    }, {
      "left" : "UpdateKeyMapper",
      "right" : "UpdateKeyMapper",
      "info" : "SimpleName[8448-8463]:SimpleName[8336-8351]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8515-8524]:Modifier[8403-8412]"
    }, {
      "left" : "UpdateKeyMapper",
      "right" : "UpdateKeyMapper",
      "info" : "SimpleName[8525-8540]:SimpleName[8413-8428]"
    }, {
      "left" : "String rawKey",
      "right" : "String rawKey",
      "info" : "SingleVariableDeclaration[8541-8554]:SingleVariableDeclaration[8429-8442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8556-8719]:Block[8444-8607]"
    }, {
      "left" : "Assert.hasText(rawKey, \"Key must not be null or empty!\");",
      "right" : "Assert.hasText(rawKey, \"Key must not be null or empty!\");",
      "info" : "ExpressionStatement[8563-8620]:ExpressionStatement[8451-8508]"
    }, {
      "left" : "this.iterator = Arrays.asList(rawKey.split(\"\\\\.\")).iterator();",
      "right" : "this.iterator = Arrays.asList(rawKey.split(\"\\\\.\")).iterator();",
      "info" : "ExpressionStatement[8626-8688]:ExpressionStatement[8514-8576]"
    }, {
      "left" : "this.iterator.next();",
      "right" : "this.iterator.next();",
      "info" : "ExpressionStatement[8693-8714]:ExpressionStatement[8581-8602]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[8870-8879]:Modifier[8758-8767]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[8880-8886]:SimpleType[8768-8774]"
    }, {
      "left" : "mapPropertyName",
      "right" : "mapPropertyName",
      "info" : "SimpleName[8887-8902]:SimpleName[8775-8790]"
    }, {
      "left" : "MongoPersistentProperty property",
      "right" : "MongoPersistentProperty property",
      "info" : "SingleVariableDeclaration[8903-8935]:SingleVariableDeclaration[8791-8823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8937-9340]:Block[8825-9228]"
    }, {
      "left" : "String mappedName = PropertyToFieldNameConverter.INSTANCE.convert(property);",
      "right" : "String mappedName = PropertyToFieldNameConverter.INSTANCE.convert(property);",
      "info" : "VariableDeclarationStatement[8944-9020]:VariableDeclarationStatement[8832-8908]"
    }, {
      "left" : "boolean inspect = iterator.hasNext();",
      "right" : "boolean inspect = iterator.hasNext();",
      "info" : "VariableDeclarationStatement[9026-9063]:VariableDeclarationStatement[8914-8951]"
    }, {
      "left" : "while (inspect)",
      "right" : "while (inspect)",
      "info" : "WhileStatement[9068-9311]:WhileStatement[8956-9199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9084-9311]:Block[8972-9199]"
    }, {
      "left" : "String partial = iterator.next();",
      "right" : "String partial = iterator.next();",
      "info" : "VariableDeclarationStatement[9092-9125]:VariableDeclarationStatement[8980-9013]"
    }, {
      "left" : "boolean isPositional = isPositionalParameter(partial);",
      "right" : "boolean isPositional = isPositionalParameter(partial);",
      "info" : "VariableDeclarationStatement[9132-9186]:VariableDeclarationStatement[9020-9074]"
    }, {
      "left" : "if (isPositional)",
      "right" : "if (isPositional)",
      "info" : "IfStatement[9192-9253]:IfStatement[9080-9141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9210-9253]:Block[9098-9141]"
    }, {
      "left" : "mappedName += \".\" + partial;",
      "right" : "mappedName += \".\" + partial;",
      "info" : "ExpressionStatement[9218-9246]:ExpressionStatement[9106-9134]"
    }, {
      "left" : "inspect = isPositional && iterator.hasNext();",
      "right" : "inspect = isPositional && iterator.hasNext();",
      "info" : "ExpressionStatement[9260-9305]:ExpressionStatement[9148-9193]"
    }, {
      "left" : "return mappedName;",
      "right" : "return mappedName;",
      "info" : "ReturnStatement[9317-9335]:ReturnStatement[9205-9223]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[9345-9352]:PrimitiveType[9233-9240]"
    }, {
      "left" : "isPositionalParameter",
      "right" : "isPositionalParameter",
      "info" : "SimpleName[9353-9374]:SimpleName[9241-9262]"
    }, {
      "left" : "String partial",
      "right" : "String partial",
      "info" : "SingleVariableDeclaration[9375-9389]:SingleVariableDeclaration[9263-9277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9391-9575]:Block[9279-9463]"
    }, {
      "left" : "if (partial.equals(\"$\"))",
      "right" : "if (partial.equals(\"$\"))",
      "info" : "IfStatement[9398-9448]:IfStatement[9286-9336]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9423-9448]:Block[9311-9336]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9430-9442]:ReturnStatement[9318-9330]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9454-9570]:TryStatement[9342-9458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9458-9511]:Block[9346-9399]"
    }, {
      "left" : "Long.valueOf(partial);",
      "right" : "Long.valueOf(partial);",
      "info" : "ExpressionStatement[9465-9487]:ExpressionStatement[9353-9375]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9493-9505]:ReturnStatement[9381-9393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9544-9570]:Block[9432-9458]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9551-9564]:ReturnStatement[9439-9452]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9816-9823]:Modifier[9704-9711]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9824-9830]:Modifier[9712-9718]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[9831-9836]:TYPE_DECLARATION_KIND[9719-9724]"
    }, {
      "left" : "UpdatePropertyConverter",
      "right" : "UpdatePropertyConverter",
      "info" : "SimpleName[9837-9860]:SimpleName[9725-9748]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10124-10130]:Modifier[10012-10018]"
    }, {
      "left" : "UpdatePropertyConverter",
      "right" : "UpdatePropertyConverter",
      "info" : "SimpleName[10131-10154]:SimpleName[10019-10042]"
    }, {
      "left" : "String updateKey",
      "right" : "String updateKey",
      "info" : "SingleVariableDeclaration[10155-10171]:SingleVariableDeclaration[10043-10059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10173-10303]:Block[10061-10191]"
    }, {
      "left" : "Assert.hasText(updateKey, \"Update key must not be null or empty!\");",
      "right" : "Assert.hasText(updateKey, \"Update key must not be null or empty!\");",
      "info" : "ExpressionStatement[10180-10247]:ExpressionStatement[10068-10135]"
    }, {
      "left" : "this.mapper = new UpdateKeyMapper(updateKey);",
      "right" : "this.mapper = new UpdateKeyMapper(updateKey);",
      "info" : "ExpressionStatement[10253-10298]:ExpressionStatement[10141-10186]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[10432-10441]:MarkerAnnotation[10320-10329]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10445-10451]:Modifier[10333-10339]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[10452-10458]:SimpleType[10340-10346]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[10459-10466]:SimpleName[10347-10354]"
    }, {
      "left" : "MongoPersistentProperty property",
      "right" : "MongoPersistentProperty property",
      "info" : "SingleVariableDeclaration[10467-10499]:SingleVariableDeclaration[10355-10387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10501-10552]:Block[10389-10440]"
    }, {
      "left" : "return mapper.mapPropertyName(property);",
      "right" : "return mapper.mapPropertyName(property);",
      "info" : "ReturnStatement[10507-10547]:ReturnStatement[10395-10435]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[10701-10710]:Modifier[10589-10598]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10711-10717]:Modifier[10599-10605]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[10718-10723]:TYPE_DECLARATION_KIND[10606-10611]"
    }, {
      "left" : "UpdateAssociationConverter",
      "right" : "UpdateAssociationConverter",
      "info" : "SimpleName[10724-10750]:SimpleName[10612-10638]"
    }, {
      "left" : "AssociationConverter",
      "right" : "AssociationConverter",
      "info" : "SimpleType[10759-10779]:SimpleType[10647-10667]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10987-10993]:Modifier[10875-10881]"
    }, {
      "left" : "UpdateAssociationConverter",
      "right" : "UpdateAssociationConverter",
      "info" : "SimpleName[10994-11020]:SimpleName[10882-10908]"
    }, {
      "left" : "Association<MongoPersistentProperty> association",
      "right" : "Association<MongoPersistentProperty> association",
      "info" : "SingleVariableDeclaration[11021-11069]:SingleVariableDeclaration[10909-10957]"
    }, {
      "left" : "String key",
      "right" : "String key",
      "info" : "SingleVariableDeclaration[11071-11081]:SingleVariableDeclaration[10959-10969]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11083-11158]:Block[10971-11046]"
    }, {
      "left" : "super(association);",
      "right" : "super(association);",
      "info" : "SuperConstructorInvocation[11090-11109]:SuperConstructorInvocation[10978-10997]"
    }, {
      "left" : "this.mapper = new UpdateKeyMapper(key);",
      "right" : "this.mapper = new UpdateKeyMapper(key);",
      "info" : "ExpressionStatement[11114-11153]:ExpressionStatement[11002-11041]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[11287-11296]:MarkerAnnotation[11175-11184]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11300-11306]:Modifier[11188-11194]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11307-11313]:SimpleType[11195-11201]"
    }, {
      "left" : "convert",
      "right" : "convert",
      "info" : "SimpleName[11314-11321]:SimpleName[11202-11209]"
    }, {
      "left" : "MongoPersistentProperty source",
      "right" : "MongoPersistentProperty source",
      "info" : "SingleVariableDeclaration[11322-11352]:SingleVariableDeclaration[11210-11240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11354-11442]:Block[11242-11330]"
    }, {
      "left" : "return super.convert(source) == null ? null : mapper.mapPropertyName(source);",
      "right" : "return super.convert(source) == null ? null : mapper.mapPropertyName(source);",
      "info" : "ReturnStatement[11360-11437]:ReturnStatement[11248-11325]"
    } ]
  },
  "interFileMappings" : { }
}