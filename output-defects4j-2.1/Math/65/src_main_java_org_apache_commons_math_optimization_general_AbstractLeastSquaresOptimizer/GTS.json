{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AbstractLeastSquaresOptimizer",
      "right" : "AbstractLeastSquaresOptimizer",
      "info" : "TypeDeclaration[1853-13431]:TypeDeclaration[1853-13237]"
    }, {
      "left" : "public static final int DEFAULT_MAX_ITERATIONS = 100;",
      "right" : "public static final int DEFAULT_MAX_ITERATIONS = 100;",
      "info" : "FieldDeclaration[2207-2317]:FieldDeclaration[2207-2317]"
    }, {
      "left" : "protected VectorialConvergenceChecker checker;",
      "right" : "protected VectorialConvergenceChecker checker;",
      "info" : "FieldDeclaration[2323-2401]:FieldDeclaration[2323-2401]"
    }, {
      "left" : "protected double[][] jacobian;",
      "right" : "protected double[][] jacobian;",
      "info" : "FieldDeclaration[2407-2734]:FieldDeclaration[2407-2734]"
    }, {
      "left" : "protected int cols;",
      "right" : "protected int cols;",
      "info" : "FieldDeclaration[2740-2812]:FieldDeclaration[2740-2812]"
    }, {
      "left" : "protected int rows;",
      "right" : "protected int rows;",
      "info" : "FieldDeclaration[2818-2887]:FieldDeclaration[2818-2887]"
    }, {
      "left" : "protected double[] targetValues;",
      "right" : "protected double[] targetValues;",
      "info" : "FieldDeclaration[2893-3019]:FieldDeclaration[2893-3019]"
    }, {
      "left" : "protected double[] residualsWeights;",
      "right" : "protected double[] residualsWeights;",
      "info" : "FieldDeclaration[3025-3149]:FieldDeclaration[3025-3149]"
    }, {
      "left" : "protected double[] point;",
      "right" : "protected double[] point;",
      "info" : "FieldDeclaration[3155-3206]:FieldDeclaration[3155-3206]"
    }, {
      "left" : "protected double[] objective;",
      "right" : "protected double[] objective;",
      "info" : "FieldDeclaration[3212-3286]:FieldDeclaration[3212-3286]"
    }, {
      "left" : "protected double[] residuals;",
      "right" : "protected double[] residuals;",
      "info" : "FieldDeclaration[3292-3351]:FieldDeclaration[3292-3351]"
    }, {
      "left" : "protected double cost;",
      "right" : "protected double cost;",
      "info" : "FieldDeclaration[3357-3444]:FieldDeclaration[3357-3444]"
    }, {
      "left" : "private int maxIterations;",
      "right" : "private int maxIterations;",
      "info" : "FieldDeclaration[3450-3525]:FieldDeclaration[3450-3525]"
    }, {
      "left" : "private int iterations;",
      "right" : "private int iterations;",
      "info" : "FieldDeclaration[3531-3605]:FieldDeclaration[3531-3605]"
    }, {
      "left" : "private int maxEvaluations;",
      "right" : "private int maxEvaluations;",
      "info" : "FieldDeclaration[3611-3688]:FieldDeclaration[3611-3688]"
    }, {
      "left" : "private int objectiveEvaluations;",
      "right" : "private int objectiveEvaluations;",
      "info" : "FieldDeclaration[3694-3779]:FieldDeclaration[3694-3779]"
    }, {
      "left" : "private int jacobianEvaluations;",
      "right" : "private int jacobianEvaluations;",
      "info" : "FieldDeclaration[3785-3860]:FieldDeclaration[3785-3860]"
    }, {
      "left" : "private DifferentiableMultivariateVectorialFunction function;",
      "right" : "private DifferentiableMultivariateVectorialFunction function;",
      "info" : "FieldDeclaration[3866-3958]:FieldDeclaration[3866-3958]"
    }, {
      "left" : "private MultivariateMatrixFunction jF;",
      "right" : "private MultivariateMatrixFunction jF;",
      "info" : "FieldDeclaration[3964-4045]:FieldDeclaration[3964-4045]"
    }, {
      "left" : "protected AbstractLeastSquaresOptimizer()",
      "right" : "protected AbstractLeastSquaresOptimizer()",
      "info" : "MethodDeclaration[4051-4477]:MethodDeclaration[4051-4477]"
    }, {
      "left" : "public void setMaxIterations(int maxIterations)",
      "right" : "public void setMaxIterations(int maxIterations)",
      "info" : "MethodDeclaration[4483-4607]:MethodDeclaration[4483-4607]"
    }, {
      "left" : "public int getMaxIterations()",
      "right" : "public int getMaxIterations()",
      "info" : "MethodDeclaration[4613-4705]:MethodDeclaration[4613-4705]"
    }, {
      "left" : "public int getIterations()",
      "right" : "public int getIterations()",
      "info" : "MethodDeclaration[4711-4797]:MethodDeclaration[4711-4797]"
    }, {
      "left" : "public void setMaxEvaluations(int maxEvaluations)",
      "right" : "public void setMaxEvaluations(int maxEvaluations)",
      "info" : "MethodDeclaration[4803-4931]:MethodDeclaration[4803-4931]"
    }, {
      "left" : "public int getMaxEvaluations()",
      "right" : "public int getMaxEvaluations()",
      "info" : "MethodDeclaration[4937-5031]:MethodDeclaration[4937-5031]"
    }, {
      "left" : "public int getEvaluations()",
      "right" : "public int getEvaluations()",
      "info" : "MethodDeclaration[5037-5134]:MethodDeclaration[5037-5134]"
    }, {
      "left" : "public int getJacobianEvaluations()",
      "right" : "public int getJacobianEvaluations()",
      "info" : "MethodDeclaration[5140-5244]:MethodDeclaration[5140-5244]"
    }, {
      "left" : "public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker)",
      "right" : "public void setConvergenceChecker(VectorialConvergenceChecker convergenceChecker)",
      "info" : "MethodDeclaration[5250-5407]:MethodDeclaration[5250-5407]"
    }, {
      "left" : "public VectorialConvergenceChecker getConvergenceChecker()",
      "right" : "public VectorialConvergenceChecker getConvergenceChecker()",
      "info" : "MethodDeclaration[5413-5528]:MethodDeclaration[5413-5528]"
    }, {
      "left" : "protected void incrementIterationsCounter()\n        throws OptimizationException",
      "right" : "protected void incrementIterationsCounter()\n        throws OptimizationException",
      "info" : "MethodDeclaration[5534-5922]:MethodDeclaration[5534-5922]"
    }, {
      "left" : "protected void updateJacobian() throws FunctionEvaluationException",
      "right" : "protected void updateJacobian() throws FunctionEvaluationException",
      "info" : "MethodDeclaration[5928-6747]:MethodDeclaration[5928-6747]"
    }, {
      "left" : "protected void updateResidualsAndCost()\n        throws FunctionEvaluationException",
      "right" : "protected void updateResidualsAndCost()\n        throws FunctionEvaluationException",
      "info" : "MethodDeclaration[6753-7928]:MethodDeclaration[6753-7928]"
    }, {
      "left" : "public double getRMS()",
      "right" : "public double getChiSquare()",
      "info" : "MethodDeclaration[7934-8634]:MethodDeclaration[8446-8937]"
    }, {
      "left" : "public double[][] getCovariances()\n        throws FunctionEvaluationException, OptimizationException",
      "right" : "public double[][] getCovariances()\n        throws FunctionEvaluationException, OptimizationException",
      "info" : "MethodDeclaration[9137-10482]:MethodDeclaration[8943-10288]"
    }, {
      "left" : "public double[] guessParametersErrors()\n        throws FunctionEvaluationException, OptimizationException",
      "right" : "public double[] guessParametersErrors()\n        throws FunctionEvaluationException, OptimizationException",
      "info" : "MethodDeclaration[10488-11570]:MethodDeclaration[10294-11376]"
    }, {
      "left" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,\n                                            final double[] target, final double[] weights,\n                                            final double[] startPoint)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
      "right" : "public VectorialPointValuePair optimize(final DifferentiableMultivariateVectorialFunction f,\n                                            final double[] target, final double[] weights,\n                                            final double[] startPoint)\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException",
      "info" : "MethodDeclaration[11576-12865]:MethodDeclaration[11382-12671]"
    }, {
      "left" : "protected abstract VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;",
      "right" : "protected abstract VectorialPointValuePair doOptimize()\n        throws FunctionEvaluationException, OptimizationException, IllegalArgumentException;",
      "info" : "MethodDeclaration[12871-13428]:MethodDeclaration[12677-13234]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4308-4477]:Block[4308-4477]"
    }, {
      "left" : "setConvergenceChecker(new SimpleVectorialValueChecker());",
      "right" : "setConvergenceChecker(new SimpleVectorialValueChecker());",
      "info" : "ExpressionStatement[4318-4375]:ExpressionStatement[4318-4375]"
    }, {
      "left" : "setMaxIterations(DEFAULT_MAX_ITERATIONS);",
      "right" : "setMaxIterations(DEFAULT_MAX_ITERATIONS);",
      "info" : "ExpressionStatement[4384-4425]:ExpressionStatement[4384-4425]"
    }, {
      "left" : "setMaxEvaluations(Integer.MAX_VALUE);",
      "right" : "setMaxEvaluations(Integer.MAX_VALUE);",
      "info" : "ExpressionStatement[4434-4471]:ExpressionStatement[4434-4471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4556-4607]:Block[4556-4607]"
    }, {
      "left" : "this.maxIterations = maxIterations;",
      "right" : "this.maxIterations = maxIterations;",
      "info" : "ExpressionStatement[4566-4601]:ExpressionStatement[4566-4601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4668-4705]:Block[4668-4705]"
    }, {
      "left" : "return maxIterations;",
      "right" : "return maxIterations;",
      "info" : "ReturnStatement[4678-4699]:ReturnStatement[4678-4699]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4763-4797]:Block[4763-4797]"
    }, {
      "left" : "return iterations;",
      "right" : "return iterations;",
      "info" : "ReturnStatement[4773-4791]:ReturnStatement[4773-4791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4878-4931]:Block[4878-4931]"
    }, {
      "left" : "this.maxEvaluations = maxEvaluations;",
      "right" : "this.maxEvaluations = maxEvaluations;",
      "info" : "ExpressionStatement[4888-4925]:ExpressionStatement[4888-4925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4993-5031]:Block[4993-5031]"
    }, {
      "left" : "return maxEvaluations;",
      "right" : "return maxEvaluations;",
      "info" : "ReturnStatement[5003-5025]:ReturnStatement[5003-5025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5090-5134]:Block[5090-5134]"
    }, {
      "left" : "return objectiveEvaluations;",
      "right" : "return objectiveEvaluations;",
      "info" : "ReturnStatement[5100-5128]:ReturnStatement[5100-5128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5201-5244]:Block[5201-5244]"
    }, {
      "left" : "return jacobianEvaluations;",
      "right" : "return jacobianEvaluations;",
      "info" : "ReturnStatement[5211-5238]:ReturnStatement[5211-5238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5357-5407]:Block[5357-5407]"
    }, {
      "left" : "this.checker = convergenceChecker;",
      "right" : "this.checker = convergenceChecker;",
      "info" : "ExpressionStatement[5367-5401]:ExpressionStatement[5367-5401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5497-5528]:Block[5497-5528]"
    }, {
      "left" : "return checker;",
      "right" : "return checker;",
      "info" : "ReturnStatement[5507-5522]:ReturnStatement[5507-5522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5765-5922]:Block[5765-5922]"
    }, {
      "left" : "if (++iterations > maxIterations)",
      "right" : "if (++iterations > maxIterations)",
      "info" : "IfStatement[5775-5916]:IfStatement[5775-5916]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5809-5916]:Block[5809-5916]"
    }, {
      "left" : "throw new OptimizationException(new MaxIterationsExceededException(maxIterations));",
      "right" : "throw new OptimizationException(new MaxIterationsExceededException(maxIterations));",
      "info" : "ThrowStatement[5823-5906]:ThrowStatement[5823-5906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6193-6747]:Block[6193-6747]"
    }, {
      "left" : "++jacobianEvaluations;",
      "right" : "++jacobianEvaluations;",
      "info" : "ExpressionStatement[6203-6225]:ExpressionStatement[6203-6225]"
    }, {
      "left" : "jacobian = jF.value(point);",
      "right" : "jacobian = jF.value(point);",
      "info" : "ExpressionStatement[6234-6261]:ExpressionStatement[6234-6261]"
    }, {
      "left" : "if (jacobian.length != rows)",
      "right" : "if (jacobian.length != rows)",
      "info" : "IfStatement[6270-6486]:IfStatement[6270-6486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6299-6486]:Block[6299-6486]"
    }, {
      "left" : "throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n                                                  jacobian.length, rows);",
      "right" : "throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n                                                  jacobian.length, rows);",
      "info" : "ThrowStatement[6313-6476]:ThrowStatement[6313-6476]"
    }, {
      "left" : "for (int i = 0; i < rows; i++)",
      "right" : "for (int i = 0; i < rows; i++)",
      "info" : "ForStatement[6495-6741]:ForStatement[6495-6741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6526-6741]:Block[6526-6741]"
    }, {
      "left" : "final double[] ji = jacobian[i];",
      "right" : "final double[] ji = jacobian[i];",
      "info" : "VariableDeclarationStatement[6540-6572]:VariableDeclarationStatement[6540-6572]"
    }, {
      "left" : "final double factor = -Math.sqrt(residualsWeights[i]);",
      "right" : "final double factor = -Math.sqrt(residualsWeights[i]);",
      "info" : "VariableDeclarationStatement[6585-6639]:VariableDeclarationStatement[6585-6639]"
    }, {
      "left" : "for (int j = 0; j < cols; ++j)",
      "right" : "for (int j = 0; j < cols; ++j)",
      "info" : "ForStatement[6652-6731]:ForStatement[6652-6731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6683-6731]:Block[6683-6731]"
    }, {
      "left" : "ji[j] *= factor;",
      "right" : "ji[j] *= factor;",
      "info" : "ExpressionStatement[6701-6717]:ExpressionStatement[6701-6717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7104-7928]:Block[7104-7928]"
    }, {
      "left" : "if (++objectiveEvaluations > maxEvaluations)",
      "right" : "if (++objectiveEvaluations > maxEvaluations)",
      "info" : "IfStatement[7115-7332]:IfStatement[7115-7332]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7160-7332]:Block[7160-7332]"
    }, {
      "left" : "throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),\n                                                  point);",
      "right" : "throw new FunctionEvaluationException(new MaxEvaluationsExceededException(maxEvaluations),\n                                                  point);",
      "info" : "ThrowStatement[7174-7322]:ThrowStatement[7174-7322]"
    }, {
      "left" : "objective = function.value(point);",
      "right" : "objective = function.value(point);",
      "info" : "ExpressionStatement[7341-7375]:ExpressionStatement[7341-7375]"
    }, {
      "left" : "if (objective.length != rows)",
      "right" : "if (objective.length != rows)",
      "info" : "IfStatement[7384-7602]:IfStatement[7384-7602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7414-7602]:Block[7414-7602]"
    }, {
      "left" : "throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n                                                  objective.length, rows);",
      "right" : "throw new FunctionEvaluationException(point, LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n                                                  objective.length, rows);",
      "info" : "ThrowStatement[7428-7592]:ThrowStatement[7428-7592]"
    }, {
      "left" : "cost = 0;",
      "right" : "cost = 0;",
      "info" : "ExpressionStatement[7611-7620]:ExpressionStatement[7611-7620]"
    }, {
      "left" : "int index = 0;",
      "right" : "int index = 0;",
      "info" : "VariableDeclarationStatement[7629-7643]:VariableDeclarationStatement[7629-7643]"
    }, {
      "left" : "for (int i = 0; i < rows; i++)",
      "right" : "for (int i = 0; i < rows; i++)",
      "info" : "ForStatement[7652-7889]:ForStatement[7652-7889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7683-7889]:Block[7683-7889]"
    }, {
      "left" : "final double residual = targetValues[i] - objective[i];",
      "right" : "final double residual = targetValues[i] - objective[i];",
      "info" : "VariableDeclarationStatement[7697-7752]:VariableDeclarationStatement[7697-7752]"
    }, {
      "left" : "residuals[i] = residual;",
      "right" : "residuals[i] = residual;",
      "info" : "ExpressionStatement[7765-7789]:ExpressionStatement[7765-7789]"
    }, {
      "left" : "cost += residualsWeights[i] * residual * residual;",
      "right" : "cost += residualsWeights[i] * residual * residual;",
      "info" : "ExpressionStatement[7802-7852]:ExpressionStatement[7802-7852]"
    }, {
      "left" : "index += cols;",
      "right" : "index += cols;",
      "info" : "ExpressionStatement[7865-7879]:ExpressionStatement[7865-7879]"
    }, {
      "left" : "cost = Math.sqrt(cost);",
      "right" : "cost = Math.sqrt(cost);",
      "info" : "ExpressionStatement[7898-7921]:ExpressionStatement[7898-7921]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8384-8634]:Block[8705-8937]"
    }, {
      "left" : "for (int i = 0; i < rows; ++i)",
      "right" : "for (int i = 0; i < rows; ++i)",
      "info" : "ForStatement[8424-8584]:ForStatement[8745-8905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8455-8584]:Block[8776-8905]"
    }, {
      "left" : "final double residual = residuals[i];",
      "right" : "final double residual = residuals[i];",
      "info" : "VariableDeclarationStatement[8469-8506]:VariableDeclarationStatement[8790-8827]"
    }, {
      "left" : "criterion += residual * residual * residualsWeights[i];",
      "right" : "chiSquare += residual * residual * residualsWeights[i];",
      "info" : "ExpressionStatement[8519-8574]:ExpressionStatement[8840-8895]"
    }, {
      "left" : "double chiSquare = 0;",
      "right" : "double chiSquare = 0;",
      "info" : "VariableDeclarationStatement[8909-8930]:VariableDeclarationStatement[8715-8736]"
    }, {
      "left" : "return chiSquare;",
      "right" : "return chiSquare;",
      "info" : "ReturnStatement[9108-9125]:ReturnStatement[8914-8931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9553-10482]:Block[9359-10288]"
    }, {
      "left" : "updateJacobian();",
      "right" : "updateJacobian();",
      "info" : "ExpressionStatement[9595-9612]:ExpressionStatement[9401-9418]"
    }, {
      "left" : "double[][] jTj = new double[cols][cols];",
      "right" : "double[][] jTj = new double[cols][cols];",
      "info" : "VariableDeclarationStatement[9701-9741]:VariableDeclarationStatement[9507-9547]"
    }, {
      "left" : "for (int i = 0; i < cols; ++i)",
      "right" : "for (int i = 0; i < cols; ++i)",
      "info" : "ForStatement[9750-10076]:ForStatement[9556-9882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9781-10076]:Block[9587-9882]"
    }, {
      "left" : "for (int j = i; j < cols; ++j)",
      "right" : "for (int j = i; j < cols; ++j)",
      "info" : "ForStatement[9795-10066]:ForStatement[9601-9872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9826-10066]:Block[9632-9872]"
    }, {
      "left" : "double sum = 0;",
      "right" : "double sum = 0;",
      "info" : "VariableDeclarationStatement[9844-9859]:VariableDeclarationStatement[9650-9665]"
    }, {
      "left" : "for (int k = 0; k < rows; ++k)",
      "right" : "for (int k = 0; k < rows; ++k)",
      "info" : "ForStatement[9876-9986]:ForStatement[9682-9792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9907-9986]:Block[9713-9792]"
    }, {
      "left" : "sum += jacobian[k][i] * jacobian[k][j];",
      "right" : "sum += jacobian[k][i] * jacobian[k][j];",
      "info" : "ExpressionStatement[9929-9968]:ExpressionStatement[9735-9774]"
    }, {
      "left" : "jTj[i][j] = sum;",
      "right" : "jTj[i][j] = sum;",
      "info" : "ExpressionStatement[10003-10019]:ExpressionStatement[9809-9825]"
    }, {
      "left" : "jTj[j][i] = sum;",
      "right" : "jTj[j][i] = sum;",
      "info" : "ExpressionStatement[10036-10052]:ExpressionStatement[9842-9858]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10086-10475]:TryStatement[9892-10281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10090-10319]:Block[9896-10125]"
    }, {
      "left" : "RealMatrix inverse =\n                new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();",
      "right" : "RealMatrix inverse =\n                new LUDecompositionImpl(MatrixUtils.createRealMatrix(jTj)).getSolver().getInverse();",
      "info" : "VariableDeclarationStatement[10150-10271]:VariableDeclarationStatement[9956-10077]"
    }, {
      "left" : "return inverse.getData();",
      "right" : "return inverse.getData();",
      "info" : "ReturnStatement[10284-10309]:ReturnStatement[10090-10115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10355-10475]:Block[10161-10281]"
    }, {
      "left" : "throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);",
      "right" : "throw new OptimizationException(LocalizedFormats.UNABLE_TO_COMPUTE_COVARIANCE_SINGULAR_PROBLEM);",
      "info" : "ThrowStatement[10369-10465]:ThrowStatement[10175-10271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11095-11570]:Block[10901-11376]"
    }, {
      "left" : "if (rows <= cols)",
      "right" : "if (rows <= cols)",
      "info" : "IfStatement[11105-11272]:IfStatement[10911-11078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11123-11272]:Block[10929-11078]"
    }, {
      "left" : "throw new OptimizationException(\n                    LocalizedFormats.NO_DEGREES_OF_FREEDOM,\n                    rows, cols);",
      "right" : "throw new OptimizationException(\n                    LocalizedFormats.NO_DEGREES_OF_FREEDOM,\n                    rows, cols);",
      "info" : "ThrowStatement[11137-11262]:ThrowStatement[10943-11068]"
    }, {
      "left" : "double[] errors = new double[cols];",
      "right" : "double[] errors = new double[cols];",
      "info" : "VariableDeclarationStatement[11281-11316]:VariableDeclarationStatement[11087-11122]"
    }, {
      "left" : "final double c = Math.sqrt(getChiSquare() / (rows - cols));",
      "right" : "final double c = Math.sqrt(getChiSquare() / (rows - cols));",
      "info" : "VariableDeclarationStatement[11325-11384]:VariableDeclarationStatement[11131-11190]"
    }, {
      "left" : "double[][] covar = getCovariances();",
      "right" : "double[][] covar = getCovariances();",
      "info" : "VariableDeclarationStatement[11393-11429]:VariableDeclarationStatement[11199-11235]"
    }, {
      "left" : "for (int i = 0; i < errors.length; ++i)",
      "right" : "for (int i = 0; i < errors.length; ++i)",
      "info" : "ForStatement[11438-11541]:ForStatement[11244-11347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11478-11541]:Block[11284-11347]"
    }, {
      "left" : "errors[i] = Math.sqrt(covar[i][i]) * c;",
      "right" : "errors[i] = Math.sqrt(covar[i][i]) * c;",
      "info" : "ExpressionStatement[11492-11531]:ExpressionStatement[11298-11337]"
    }, {
      "left" : "return errors;",
      "right" : "return errors;",
      "info" : "ReturnStatement[11550-11564]:ReturnStatement[11356-11370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11948-12865]:Block[11754-12671]"
    }, {
      "left" : "if (target.length != weights.length)",
      "right" : "if (target.length != weights.length)",
      "info" : "IfStatement[11959-12172]:IfStatement[11765-11978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11996-12172]:Block[11802-11978]"
    }, {
      "left" : "throw new OptimizationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n                                            target.length, weights.length);",
      "right" : "throw new OptimizationException(LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,\n                                            target.length, weights.length);",
      "info" : "ThrowStatement[12010-12162]:ThrowStatement[11816-11968]"
    }, {
      "left" : "iterations           = 0;",
      "right" : "iterations           = 0;",
      "info" : "ExpressionStatement[12208-12233]:ExpressionStatement[12014-12039]"
    }, {
      "left" : "objectiveEvaluations = 0;",
      "right" : "objectiveEvaluations = 0;",
      "info" : "ExpressionStatement[12242-12267]:ExpressionStatement[12048-12073]"
    }, {
      "left" : "jacobianEvaluations  = 0;",
      "right" : "jacobianEvaluations  = 0;",
      "info" : "ExpressionStatement[12276-12301]:ExpressionStatement[12082-12107]"
    }, {
      "left" : "function         = f;",
      "right" : "function         = f;",
      "info" : "ExpressionStatement[12366-12387]:ExpressionStatement[12172-12193]"
    }, {
      "left" : "jF               = f.jacobian();",
      "right" : "jF               = f.jacobian();",
      "info" : "ExpressionStatement[12396-12428]:ExpressionStatement[12202-12234]"
    }, {
      "left" : "targetValues     = target.clone();",
      "right" : "targetValues     = target.clone();",
      "info" : "ExpressionStatement[12437-12471]:ExpressionStatement[12243-12277]"
    }, {
      "left" : "residualsWeights = weights.clone();",
      "right" : "residualsWeights = weights.clone();",
      "info" : "ExpressionStatement[12480-12515]:ExpressionStatement[12286-12321]"
    }, {
      "left" : "this.point       = startPoint.clone();",
      "right" : "this.point       = startPoint.clone();",
      "info" : "ExpressionStatement[12524-12562]:ExpressionStatement[12330-12368]"
    }, {
      "left" : "this.residuals   = new double[target.length];",
      "right" : "this.residuals   = new double[target.length];",
      "info" : "ExpressionStatement[12571-12616]:ExpressionStatement[12377-12422]"
    }, {
      "left" : "rows      = target.length;",
      "right" : "rows      = target.length;",
      "info" : "ExpressionStatement[12682-12708]:ExpressionStatement[12488-12514]"
    }, {
      "left" : "cols      = point.length;",
      "right" : "cols      = point.length;",
      "info" : "ExpressionStatement[12717-12742]:ExpressionStatement[12523-12548]"
    }, {
      "left" : "jacobian  = new double[rows][cols];",
      "right" : "jacobian  = new double[rows][cols];",
      "info" : "ExpressionStatement[12751-12786]:ExpressionStatement[12557-12592]"
    }, {
      "left" : "cost = Double.POSITIVE_INFINITY;",
      "right" : "cost = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[12796-12828]:ExpressionStatement[12602-12634]"
    }, {
      "left" : "return doOptimize();",
      "right" : "return doOptimize();",
      "info" : "ReturnStatement[12838-12858]:ReturnStatement[12644-12664]"
    } ]
  },
  "interFileMappings" : { }
}