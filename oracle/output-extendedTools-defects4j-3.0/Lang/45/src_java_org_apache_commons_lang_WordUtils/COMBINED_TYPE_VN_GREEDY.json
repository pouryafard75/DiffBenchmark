{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "WordUtils",
      "right" : "WordUtils",
      "info" : "TypeDeclaration[839-25439]:TypeDeclaration[839-25523]"
    }, {
      "left" : "public WordUtils()",
      "right" : "public WordUtils()",
      "info" : "MethodDeclaration[1326-1693]:MethodDeclaration[1326-1693]"
    }, {
      "left" : "public static String wrap(String str, int wrapLength)",
      "right" : "public static String wrap(String str, int wrapLength)",
      "info" : "MethodDeclaration[4936-5746]:MethodDeclaration[4936-5746]"
    }, {
      "left" : "public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords)",
      "right" : "public static String wrap(String str, int wrapLength, String newLineStr, boolean wrapLongWords)",
      "info" : "MethodDeclaration[5756-8640]:MethodDeclaration[5756-8640]"
    }, {
      "left" : "public static String capitalize(String str)",
      "right" : "public static String capitalize(String str)",
      "info" : "MethodDeclaration[8744-9732]:MethodDeclaration[8744-9732]"
    }, {
      "left" : "public static String capitalize(String str, char[] delimiters)",
      "right" : "public static String capitalize(String str, char[] delimiters)",
      "info" : "MethodDeclaration[9738-11861]:MethodDeclaration[9738-11861]"
    }, {
      "left" : "public static String capitalizeFully(String str)",
      "right" : "public static String capitalizeFully(String str)",
      "info" : "MethodDeclaration[11945-12850]:MethodDeclaration[11945-12850]"
    }, {
      "left" : "public static String capitalizeFully(String str, char[] delimiters)",
      "right" : "public static String capitalizeFully(String str, char[] delimiters)",
      "info" : "MethodDeclaration[12856-14374]:MethodDeclaration[12856-14374]"
    }, {
      "left" : "public static String uncapitalize(String str)",
      "right" : "public static String uncapitalize(String str)",
      "info" : "MethodDeclaration[14458-15212]:MethodDeclaration[14458-15212]"
    }, {
      "left" : "public static String uncapitalize(String str, char[] delimiters)",
      "right" : "public static String uncapitalize(String str, char[] delimiters)",
      "info" : "MethodDeclaration[15218-17174]:MethodDeclaration[15218-17174]"
    }, {
      "left" : "public static String swapCase(String str)",
      "right" : "public static String swapCase(String str)",
      "info" : "MethodDeclaration[17258-19160]:MethodDeclaration[17258-19160]"
    }, {
      "left" : "public static String initials(String str)",
      "right" : "public static String initials(String str)",
      "info" : "MethodDeclaration[19244-20176]:MethodDeclaration[19244-20176]"
    }, {
      "left" : "public static String initials(String str, char[] delimiters)",
      "right" : "public static String initials(String str, char[] delimiters)",
      "info" : "MethodDeclaration[20182-22150]:MethodDeclaration[20182-22150]"
    }, {
      "left" : "private static boolean isDelimiter(char ch, char[] delimiters)",
      "right" : "private static boolean isDelimiter(char ch, char[] delimiters)",
      "info" : "MethodDeclaration[22234-22761]:MethodDeclaration[22234-22761]"
    }, {
      "left" : "public static String abbreviate(String str, int lower, int upper, String appendToEnd)",
      "right" : "public static String abbreviate(String str, int lower, int upper, String appendToEnd)",
      "info" : "MethodDeclaration[22845-25436]:MethodDeclaration[22845-25520]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1652-1658]:Modifier[1652-1658]"
    }, {
      "left" : "WordUtils",
      "right" : "WordUtils",
      "info" : "SimpleName[1659-1668]:SimpleName[1659-1668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1671-1693]:Block[1671-1693]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[1679-1687]:SuperConstructorInvocation[1679-1687]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5634-5640]:Modifier[5634-5640]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5641-5647]:Modifier[5641-5647]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5648-5654]:SimpleType[5648-5654]"
    }, {
      "left" : "wrap",
      "right" : "wrap",
      "info" : "SimpleName[5655-5659]:SimpleName[5655-5659]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[5660-5670]:SingleVariableDeclaration[5660-5670]"
    }, {
      "left" : "int wrapLength",
      "right" : "int wrapLength",
      "info" : "SingleVariableDeclaration[5672-5686]:SingleVariableDeclaration[5672-5686]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5688-5746]:Block[5688-5746]"
    }, {
      "left" : "return wrap(str, wrapLength, null, false);",
      "right" : "return wrap(str, wrapLength, null, false);",
      "info" : "ReturnStatement[5698-5740]:ReturnStatement[5698-5740]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6524-6530]:Modifier[6524-6530]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6531-6537]:Modifier[6531-6537]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6538-6544]:SimpleType[6538-6544]"
    }, {
      "left" : "wrap",
      "right" : "wrap",
      "info" : "SimpleName[6545-6549]:SimpleName[6545-6549]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[6550-6560]:SingleVariableDeclaration[6550-6560]"
    }, {
      "left" : "int wrapLength",
      "right" : "int wrapLength",
      "info" : "SingleVariableDeclaration[6562-6576]:SingleVariableDeclaration[6562-6576]"
    }, {
      "left" : "String newLineStr",
      "right" : "String newLineStr",
      "info" : "SingleVariableDeclaration[6578-6595]:SingleVariableDeclaration[6578-6595]"
    }, {
      "left" : "boolean wrapLongWords",
      "right" : "boolean wrapLongWords",
      "info" : "SingleVariableDeclaration[6597-6618]:SingleVariableDeclaration[6597-6618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6620-8640]:Block[6620-8640]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[6630-6683]:IfStatement[6630-6683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6647-6683]:Block[6647-6683]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6661-6673]:ReturnStatement[6661-6673]"
    }, {
      "left" : "if (newLineStr == null)",
      "right" : "if (newLineStr == null)",
      "info" : "IfStatement[6692-6780]:IfStatement[6692-6780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6716-6780]:Block[6716-6780]"
    }, {
      "left" : "newLineStr = SystemUtils.LINE_SEPARATOR;",
      "right" : "newLineStr = SystemUtils.LINE_SEPARATOR;",
      "info" : "ExpressionStatement[6730-6770]:ExpressionStatement[6730-6770]"
    }, {
      "left" : "if (wrapLength < 1)",
      "right" : "if (wrapLength < 1)",
      "info" : "IfStatement[6789-6848]:IfStatement[6789-6848]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6809-6848]:Block[6809-6848]"
    }, {
      "left" : "wrapLength = 1;",
      "right" : "wrapLength = 1;",
      "info" : "ExpressionStatement[6823-6838]:ExpressionStatement[6823-6838]"
    }, {
      "left" : "int inputLineLength = str.length();",
      "right" : "int inputLineLength = str.length();",
      "info" : "VariableDeclarationStatement[6857-6892]:VariableDeclarationStatement[6857-6892]"
    }, {
      "left" : "int offset = 0;",
      "right" : "int offset = 0;",
      "info" : "VariableDeclarationStatement[6901-6916]:VariableDeclarationStatement[6901-6916]"
    }, {
      "left" : "StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);",
      "right" : "StringBuffer wrappedLine = new StringBuffer(inputLineLength + 32);",
      "info" : "VariableDeclarationStatement[6925-6991]:VariableDeclarationStatement[6925-6991]"
    }, {
      "left" : "while ((inputLineLength - offset) > wrapLength)",
      "right" : "while ((inputLineLength - offset) > wrapLength)",
      "info" : "WhileStatement[7009-8469]:WhileStatement[7009-8469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7057-8469]:Block[7057-8469]"
    }, {
      "left" : "if (str.charAt(offset) == ' ')",
      "right" : "if (str.charAt(offset) == ' ')",
      "info" : "IfStatement[7071-7169]:IfStatement[7071-7169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7102-7169]:Block[7102-7169]"
    }, {
      "left" : "offset++;",
      "right" : "offset++;",
      "info" : "ExpressionStatement[7120-7129]:ExpressionStatement[7120-7129]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7146-7155]:ContinueStatement[7146-7155]"
    }, {
      "left" : "int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);",
      "right" : "int spaceToWrapAt = str.lastIndexOf(' ', wrapLength + offset);",
      "info" : "VariableDeclarationStatement[7182-7244]:VariableDeclarationStatement[7182-7244]"
    }, {
      "left" : "if (spaceToWrapAt >= offset)",
      "right" : "if (spaceToWrapAt >= offset)",
      "info" : "IfStatement[7258-8459]:IfStatement[7258-8459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7287-7516]:Block[7287-7516]"
    }, {
      "left" : "wrappedLine.append(str.substring(offset, spaceToWrapAt));",
      "right" : "wrappedLine.append(str.substring(offset, spaceToWrapAt));",
      "info" : "ExpressionStatement[7336-7393]:ExpressionStatement[7336-7393]"
    }, {
      "left" : "wrappedLine.append(newLineStr);",
      "right" : "wrappedLine.append(newLineStr);",
      "info" : "ExpressionStatement[7410-7441]:ExpressionStatement[7410-7441]"
    }, {
      "left" : "offset = spaceToWrapAt + 1;",
      "right" : "offset = spaceToWrapAt + 1;",
      "info" : "ExpressionStatement[7458-7485]:ExpressionStatement[7458-7485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7522-8459]:Block[7522-8459]"
    }, {
      "left" : "if (wrapLongWords)",
      "right" : "if (wrapLongWords)",
      "info" : "IfStatement[7583-8445]:IfStatement[7583-8445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7602-7863]:Block[7602-7863]"
    }, {
      "left" : "wrappedLine.append(str.substring(offset, wrapLength + offset));",
      "right" : "wrappedLine.append(str.substring(offset, wrapLength + offset));",
      "info" : "ExpressionStatement[7688-7751]:ExpressionStatement[7688-7751]"
    }, {
      "left" : "wrappedLine.append(newLineStr);",
      "right" : "wrappedLine.append(newLineStr);",
      "info" : "ExpressionStatement[7772-7803]:ExpressionStatement[7772-7803]"
    }, {
      "left" : "offset += wrapLength;",
      "right" : "offset += wrapLength;",
      "info" : "ExpressionStatement[7824-7845]:ExpressionStatement[7824-7845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7869-8445]:Block[7869-8445]"
    }, {
      "left" : "spaceToWrapAt = str.indexOf(' ', wrapLength + offset);",
      "right" : "spaceToWrapAt = str.indexOf(' ', wrapLength + offset);",
      "info" : "ExpressionStatement[7969-8023]:ExpressionStatement[7969-8023]"
    }, {
      "left" : "if (spaceToWrapAt >= 0)",
      "right" : "if (spaceToWrapAt >= 0)",
      "info" : "IfStatement[8044-8427]:IfStatement[8044-8427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8068-8281]:Block[8068-8281]"
    }, {
      "left" : "wrappedLine.append(str.substring(offset, spaceToWrapAt));",
      "right" : "wrappedLine.append(str.substring(offset, spaceToWrapAt));",
      "info" : "ExpressionStatement[8094-8151]:ExpressionStatement[8094-8151]"
    }, {
      "left" : "wrappedLine.append(newLineStr);",
      "right" : "wrappedLine.append(newLineStr);",
      "info" : "ExpressionStatement[8176-8207]:ExpressionStatement[8176-8207]"
    }, {
      "left" : "offset = spaceToWrapAt + 1;",
      "right" : "offset = spaceToWrapAt + 1;",
      "info" : "ExpressionStatement[8232-8259]:ExpressionStatement[8232-8259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8287-8427]:Block[8287-8427]"
    }, {
      "left" : "wrappedLine.append(str.substring(offset));",
      "right" : "wrappedLine.append(str.substring(offset));",
      "info" : "ExpressionStatement[8313-8355]:ExpressionStatement[8313-8355]"
    }, {
      "left" : "offset = inputLineLength;",
      "right" : "offset = inputLineLength;",
      "info" : "ExpressionStatement[8380-8405]:ExpressionStatement[8380-8405]"
    }, {
      "left" : "wrappedLine.append(str.substring(offset));",
      "right" : "wrappedLine.append(str.substring(offset));",
      "info" : "ExpressionStatement[8552-8594]:ExpressionStatement[8552-8594]"
    }, {
      "left" : "return wrappedLine.toString();",
      "right" : "return wrappedLine.toString();",
      "info" : "ReturnStatement[8604-8634]:ReturnStatement[8604-8634]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9643-9649]:Modifier[9643-9649]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9650-9656]:Modifier[9650-9656]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[9657-9663]:SimpleType[9657-9663]"
    }, {
      "left" : "capitalize",
      "right" : "capitalize",
      "info" : "SimpleName[9664-9674]:SimpleName[9664-9674]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[9675-9685]:SingleVariableDeclaration[9675-9685]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9687-9732]:Block[9687-9732]"
    }, {
      "left" : "return capitalize(str, null);",
      "right" : "return capitalize(str, null);",
      "info" : "ReturnStatement[9697-9726]:ReturnStatement[9697-9726]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11037-11043]:Modifier[11037-11043]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11044-11050]:Modifier[11044-11050]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[11051-11057]:SimpleType[11051-11057]"
    }, {
      "left" : "capitalize",
      "right" : "capitalize",
      "info" : "SimpleName[11058-11068]:SimpleName[11058-11068]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[11069-11079]:SingleVariableDeclaration[11069-11079]"
    }, {
      "left" : "char[] delimiters",
      "right" : "char[] delimiters",
      "info" : "SingleVariableDeclaration[11081-11098]:SingleVariableDeclaration[11081-11098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11100-11861]:Block[11100-11861]"
    }, {
      "left" : "int delimLen = (delimiters == null ? -1 : delimiters.length);",
      "right" : "int delimLen = (delimiters == null ? -1 : delimiters.length);",
      "info" : "VariableDeclarationStatement[11110-11171]:VariableDeclarationStatement[11110-11171]"
    }, {
      "left" : "if (str == null || str.length() == 0 || delimLen == 0)",
      "right" : "if (str == null || str.length() == 0 || delimLen == 0)",
      "info" : "IfStatement[11180-11270]:IfStatement[11180-11270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11235-11270]:Block[11235-11270]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[11249-11260]:ReturnStatement[11249-11260]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[11279-11305]:VariableDeclarationStatement[11279-11305]"
    }, {
      "left" : "StringBuffer buffer = new StringBuffer(strLen);",
      "right" : "StringBuffer buffer = new StringBuffer(strLen);",
      "info" : "VariableDeclarationStatement[11314-11361]:VariableDeclarationStatement[11314-11361]"
    }, {
      "left" : "boolean capitalizeNext = true;",
      "right" : "boolean capitalizeNext = true;",
      "info" : "VariableDeclarationStatement[11370-11400]:VariableDeclarationStatement[11370-11400]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[11409-11821]:ForStatement[11409-11821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11442-11821]:Block[11442-11821]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[11456-11480]:VariableDeclarationStatement[11456-11480]"
    }, {
      "left" : "if (isDelimiter(ch, delimiters))",
      "right" : "if (isDelimiter(ch, delimiters))",
      "info" : "IfStatement[11494-11811]:IfStatement[11494-11811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11527-11616]:Block[11527-11616]"
    }, {
      "left" : "buffer.append(ch);",
      "right" : "buffer.append(ch);",
      "info" : "ExpressionStatement[11545-11563]:ExpressionStatement[11545-11563]"
    }, {
      "left" : "capitalizeNext = true;",
      "right" : "capitalizeNext = true;",
      "info" : "ExpressionStatement[11580-11602]:ExpressionStatement[11580-11602]"
    }, {
      "left" : "if (capitalizeNext)",
      "right" : "if (capitalizeNext)",
      "info" : "IfStatement[11622-11811]:IfStatement[11622-11811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11642-11755]:Block[11642-11755]"
    }, {
      "left" : "buffer.append(Character.toTitleCase(ch));",
      "right" : "buffer.append(Character.toTitleCase(ch));",
      "info" : "ExpressionStatement[11660-11701]:ExpressionStatement[11660-11701]"
    }, {
      "left" : "capitalizeNext = false;",
      "right" : "capitalizeNext = false;",
      "info" : "ExpressionStatement[11718-11741]:ExpressionStatement[11718-11741]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11761-11811]:Block[11761-11811]"
    }, {
      "left" : "buffer.append(ch);",
      "right" : "buffer.append(ch);",
      "info" : "ExpressionStatement[11779-11797]:ExpressionStatement[11779-11797]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[11830-11855]:ReturnStatement[11830-11855]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12751-12757]:Modifier[12751-12757]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12758-12764]:Modifier[12758-12764]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[12765-12771]:SimpleType[12765-12771]"
    }, {
      "left" : "capitalizeFully",
      "right" : "capitalizeFully",
      "info" : "SimpleName[12772-12787]:SimpleName[12772-12787]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[12788-12798]:SingleVariableDeclaration[12788-12798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12800-12850]:Block[12800-12850]"
    }, {
      "left" : "return capitalizeFully(str, null);",
      "right" : "return capitalizeFully(str, null);",
      "info" : "ReturnStatement[12810-12844]:ReturnStatement[12810-12844]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14053-14059]:Modifier[14053-14059]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14060-14066]:Modifier[14060-14066]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14067-14073]:SimpleType[14067-14073]"
    }, {
      "left" : "capitalizeFully",
      "right" : "capitalizeFully",
      "info" : "SimpleName[14074-14089]:SimpleName[14074-14089]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[14090-14100]:SingleVariableDeclaration[14090-14100]"
    }, {
      "left" : "char[] delimiters",
      "right" : "char[] delimiters",
      "info" : "SingleVariableDeclaration[14102-14119]:SingleVariableDeclaration[14102-14119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14121-14374]:Block[14121-14374]"
    }, {
      "left" : "int delimLen = (delimiters == null ? -1 : delimiters.length);",
      "right" : "int delimLen = (delimiters == null ? -1 : delimiters.length);",
      "info" : "VariableDeclarationStatement[14131-14192]:VariableDeclarationStatement[14131-14192]"
    }, {
      "left" : "if (str == null || str.length() == 0 || delimLen == 0)",
      "right" : "if (str == null || str.length() == 0 || delimLen == 0)",
      "info" : "IfStatement[14201-14291]:IfStatement[14201-14291]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14256-14291]:Block[14256-14291]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[14270-14281]:ReturnStatement[14270-14281]"
    }, {
      "left" : "str = str.toLowerCase();",
      "right" : "str = str.toLowerCase();",
      "info" : "ExpressionStatement[14300-14324]:ExpressionStatement[14300-14324]"
    }, {
      "left" : "return capitalize(str, delimiters);",
      "right" : "return capitalize(str, delimiters);",
      "info" : "ReturnStatement[14333-14368]:ReturnStatement[14333-14368]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15119-15125]:Modifier[15119-15125]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15126-15132]:Modifier[15126-15132]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[15133-15139]:SimpleType[15133-15139]"
    }, {
      "left" : "uncapitalize",
      "right" : "uncapitalize",
      "info" : "SimpleName[15140-15152]:SimpleName[15140-15152]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[15153-15163]:SingleVariableDeclaration[15153-15163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15165-15212]:Block[15165-15212]"
    }, {
      "left" : "return uncapitalize(str, null);",
      "right" : "return uncapitalize(str, null);",
      "info" : "ReturnStatement[15175-15206]:ReturnStatement[15175-15206]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16340-16346]:Modifier[16340-16346]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[16347-16353]:Modifier[16347-16353]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[16354-16360]:SimpleType[16354-16360]"
    }, {
      "left" : "uncapitalize",
      "right" : "uncapitalize",
      "info" : "SimpleName[16361-16373]:SimpleName[16361-16373]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[16374-16384]:SingleVariableDeclaration[16374-16384]"
    }, {
      "left" : "char[] delimiters",
      "right" : "char[] delimiters",
      "info" : "SingleVariableDeclaration[16386-16403]:SingleVariableDeclaration[16386-16403]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16405-17174]:Block[16405-17174]"
    }, {
      "left" : "int delimLen = (delimiters == null ? -1 : delimiters.length);",
      "right" : "int delimLen = (delimiters == null ? -1 : delimiters.length);",
      "info" : "VariableDeclarationStatement[16415-16476]:VariableDeclarationStatement[16415-16476]"
    }, {
      "left" : "if (str == null || str.length() == 0 || delimLen == 0)",
      "right" : "if (str == null || str.length() == 0 || delimLen == 0)",
      "info" : "IfStatement[16485-16575]:IfStatement[16485-16575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16540-16575]:Block[16540-16575]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[16554-16565]:ReturnStatement[16554-16565]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[16584-16610]:VariableDeclarationStatement[16584-16610]"
    }, {
      "left" : "StringBuffer buffer = new StringBuffer(strLen);",
      "right" : "StringBuffer buffer = new StringBuffer(strLen);",
      "info" : "VariableDeclarationStatement[16619-16666]:VariableDeclarationStatement[16619-16666]"
    }, {
      "left" : "boolean uncapitalizeNext = true;",
      "right" : "boolean uncapitalizeNext = true;",
      "info" : "VariableDeclarationStatement[16675-16707]:VariableDeclarationStatement[16675-16707]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[16716-17134]:ForStatement[16716-17134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16749-17134]:Block[16749-17134]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[16763-16787]:VariableDeclarationStatement[16763-16787]"
    }, {
      "left" : "if (isDelimiter(ch, delimiters))",
      "right" : "if (isDelimiter(ch, delimiters))",
      "info" : "IfStatement[16801-17124]:IfStatement[16801-17124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16834-16925]:Block[16834-16925]"
    }, {
      "left" : "buffer.append(ch);",
      "right" : "buffer.append(ch);",
      "info" : "ExpressionStatement[16852-16870]:ExpressionStatement[16852-16870]"
    }, {
      "left" : "uncapitalizeNext = true;",
      "right" : "uncapitalizeNext = true;",
      "info" : "ExpressionStatement[16887-16911]:ExpressionStatement[16887-16911]"
    }, {
      "left" : "if (uncapitalizeNext)",
      "right" : "if (uncapitalizeNext)",
      "info" : "IfStatement[16931-17124]:IfStatement[16931-17124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16953-17068]:Block[16953-17068]"
    }, {
      "left" : "buffer.append(Character.toLowerCase(ch));",
      "right" : "buffer.append(Character.toLowerCase(ch));",
      "info" : "ExpressionStatement[16971-17012]:ExpressionStatement[16971-17012]"
    }, {
      "left" : "uncapitalizeNext = false;",
      "right" : "uncapitalizeNext = false;",
      "info" : "ExpressionStatement[17029-17054]:ExpressionStatement[17029-17054]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17074-17124]:Block[17074-17124]"
    }, {
      "left" : "buffer.append(ch);",
      "right" : "buffer.append(ch);",
      "info" : "ExpressionStatement[17092-17110]:ExpressionStatement[17092-17110]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[17143-17168]:ReturnStatement[17143-17168]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18167-18173]:Modifier[18167-18173]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[18174-18180]:Modifier[18174-18180]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[18181-18187]:SimpleType[18181-18187]"
    }, {
      "left" : "swapCase",
      "right" : "swapCase",
      "info" : "SimpleName[18188-18196]:SimpleName[18188-18196]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[18197-18207]:SingleVariableDeclaration[18197-18207]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18209-19160]:Block[18209-19160]"
    }, {
      "left" : "int strLen;",
      "right" : "int strLen;",
      "info" : "VariableDeclarationStatement[18219-18230]:VariableDeclarationStatement[18219-18230]"
    }, {
      "left" : "if (str == null || (strLen = str.length()) == 0)",
      "right" : "if (str == null || (strLen = str.length()) == 0)",
      "info" : "IfStatement[18239-18323]:IfStatement[18239-18323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18288-18323]:Block[18288-18323]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[18302-18313]:ReturnStatement[18302-18313]"
    }, {
      "left" : "StringBuffer buffer = new StringBuffer(strLen);",
      "right" : "StringBuffer buffer = new StringBuffer(strLen);",
      "info" : "VariableDeclarationStatement[18332-18379]:VariableDeclarationStatement[18332-18379]"
    }, {
      "left" : "boolean whitespace = true;",
      "right" : "boolean whitespace = true;",
      "info" : "VariableDeclarationStatement[18389-18415]:VariableDeclarationStatement[18389-18415]"
    }, {
      "left" : "char ch = 0;",
      "right" : "char ch = 0;",
      "info" : "VariableDeclarationStatement[18424-18436]:VariableDeclarationStatement[18424-18436]"
    }, {
      "left" : "char tmp = 0;",
      "right" : "char tmp = 0;",
      "info" : "VariableDeclarationStatement[18445-18458]:VariableDeclarationStatement[18445-18458]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[18468-19120]:ForStatement[18468-19120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18501-19120]:Block[18501-19120]"
    }, {
      "left" : "ch = str.charAt(i);",
      "right" : "ch = str.charAt(i);",
      "info" : "ExpressionStatement[18515-18534]:ExpressionStatement[18515-18534]"
    }, {
      "left" : "if (Character.isUpperCase(ch))",
      "right" : "if (Character.isUpperCase(ch))",
      "info" : "IfStatement[18547-19025]:IfStatement[18547-19025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18578-18642]:Block[18578-18642]"
    }, {
      "left" : "tmp = Character.toLowerCase(ch);",
      "right" : "tmp = Character.toLowerCase(ch);",
      "info" : "ExpressionStatement[18596-18628]:ExpressionStatement[18596-18628]"
    }, {
      "left" : "if (Character.isTitleCase(ch))",
      "right" : "if (Character.isTitleCase(ch))",
      "info" : "IfStatement[18648-19025]:IfStatement[18648-19025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18679-18743]:Block[18679-18743]"
    }, {
      "left" : "tmp = Character.toLowerCase(ch);",
      "right" : "tmp = Character.toLowerCase(ch);",
      "info" : "ExpressionStatement[18697-18729]:ExpressionStatement[18697-18729]"
    }, {
      "left" : "if (Character.isLowerCase(ch))",
      "right" : "if (Character.isLowerCase(ch))",
      "info" : "IfStatement[18749-19025]:IfStatement[18749-19025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18780-18978]:Block[18780-18978]"
    }, {
      "left" : "if (whitespace)",
      "right" : "if (whitespace)",
      "info" : "IfStatement[18798-18964]:IfStatement[18798-18964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18814-18886]:Block[18814-18886]"
    }, {
      "left" : "tmp = Character.toTitleCase(ch);",
      "right" : "tmp = Character.toTitleCase(ch);",
      "info" : "ExpressionStatement[18836-18868]:ExpressionStatement[18836-18868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18892-18964]:Block[18892-18964]"
    }, {
      "left" : "tmp = Character.toUpperCase(ch);",
      "right" : "tmp = Character.toUpperCase(ch);",
      "info" : "ExpressionStatement[18914-18946]:ExpressionStatement[18914-18946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18984-19025]:Block[18984-19025]"
    }, {
      "left" : "tmp = ch;",
      "right" : "tmp = ch;",
      "info" : "ExpressionStatement[19002-19011]:ExpressionStatement[19002-19011]"
    }, {
      "left" : "buffer.append(tmp);",
      "right" : "buffer.append(tmp);",
      "info" : "ExpressionStatement[19038-19057]:ExpressionStatement[19038-19057]"
    }, {
      "left" : "whitespace = Character.isWhitespace(ch);",
      "right" : "whitespace = Character.isWhitespace(ch);",
      "info" : "ExpressionStatement[19070-19110]:ExpressionStatement[19070-19110]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[19129-19154]:ReturnStatement[19129-19154]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20091-20097]:Modifier[20091-20097]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[20098-20104]:Modifier[20098-20104]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[20105-20111]:SimpleType[20105-20111]"
    }, {
      "left" : "initials",
      "right" : "initials",
      "info" : "SimpleName[20112-20120]:SimpleName[20112-20120]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[20121-20131]:SingleVariableDeclaration[20121-20131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20133-20176]:Block[20133-20176]"
    }, {
      "left" : "return initials(str, null);",
      "right" : "return initials(str, null);",
      "info" : "ReturnStatement[20143-20170]:ReturnStatement[20143-20170]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21380-21386]:Modifier[21380-21386]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[21387-21393]:Modifier[21387-21393]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[21394-21400]:SimpleType[21394-21400]"
    }, {
      "left" : "initials",
      "right" : "initials",
      "info" : "SimpleName[21401-21409]:SimpleName[21401-21409]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[21410-21420]:SingleVariableDeclaration[21410-21420]"
    }, {
      "left" : "char[] delimiters",
      "right" : "char[] delimiters",
      "info" : "SingleVariableDeclaration[21422-21439]:SingleVariableDeclaration[21422-21439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21441-22150]:Block[21441-22150]"
    }, {
      "left" : "if (str == null || str.length() == 0)",
      "right" : "if (str == null || str.length() == 0)",
      "info" : "IfStatement[21451-21524]:IfStatement[21451-21524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21489-21524]:Block[21489-21524]"
    }, {
      "left" : "return str;",
      "right" : "return str;",
      "info" : "ReturnStatement[21503-21514]:ReturnStatement[21503-21514]"
    }, {
      "left" : "if (delimiters != null && delimiters.length == 0)",
      "right" : "if (delimiters != null && delimiters.length == 0)",
      "info" : "IfStatement[21533-21617]:IfStatement[21533-21617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21583-21617]:Block[21583-21617]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[21597-21607]:ReturnStatement[21597-21607]"
    }, {
      "left" : "int strLen = str.length();",
      "right" : "int strLen = str.length();",
      "info" : "VariableDeclarationStatement[21626-21652]:VariableDeclarationStatement[21626-21652]"
    }, {
      "left" : "char[] buf = new char[strLen / 2 + 1];",
      "right" : "char[] buf = new char[strLen / 2 + 1];",
      "info" : "VariableDeclarationStatement[21661-21699]:VariableDeclarationStatement[21661-21699]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[21708-21722]:VariableDeclarationStatement[21708-21722]"
    }, {
      "left" : "boolean lastWasGap = true;",
      "right" : "boolean lastWasGap = true;",
      "info" : "VariableDeclarationStatement[21731-21757]:VariableDeclarationStatement[21731-21757]"
    }, {
      "left" : "for (int i = 0; i < strLen; i++)",
      "right" : "for (int i = 0; i < strLen; i++)",
      "info" : "ForStatement[21766-22102]:ForStatement[21766-22102]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21799-22102]:Block[21799-22102]"
    }, {
      "left" : "char ch = str.charAt(i);",
      "right" : "char ch = str.charAt(i);",
      "info" : "VariableDeclarationStatement[21813-21837]:VariableDeclarationStatement[21813-21837]"
    }, {
      "left" : "if (isDelimiter(ch, delimiters))",
      "right" : "if (isDelimiter(ch, delimiters))",
      "info" : "IfStatement[21851-22092]:IfStatement[21851-22092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21884-21934]:Block[21884-21934]"
    }, {
      "left" : "lastWasGap = true;",
      "right" : "lastWasGap = true;",
      "info" : "ExpressionStatement[21902-21920]:ExpressionStatement[21902-21920]"
    }, {
      "left" : "if (lastWasGap)",
      "right" : "if (lastWasGap)",
      "info" : "IfStatement[21940-22092]:IfStatement[21940-22092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21956-22042]:Block[21956-22042]"
    }, {
      "left" : "buf[count++] = ch;",
      "right" : "buf[count++] = ch;",
      "info" : "ExpressionStatement[21974-21992]:ExpressionStatement[21974-21992]"
    }, {
      "left" : "lastWasGap = false;",
      "right" : "lastWasGap = false;",
      "info" : "ExpressionStatement[22009-22028]:ExpressionStatement[22009-22028]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22048-22092]:Block[22048-22092]"
    }, {
      "left" : "return new String(buf, 0, count);",
      "right" : "return new String(buf, 0, count);",
      "info" : "ReturnStatement[22111-22144]:ReturnStatement[22111-22144]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22417-22424]:Modifier[22417-22424]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22425-22431]:Modifier[22425-22431]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22432-22439]:PrimitiveType[22432-22439]"
    }, {
      "left" : "isDelimiter",
      "right" : "isDelimiter",
      "info" : "SimpleName[22440-22451]:SimpleName[22440-22451]"
    }, {
      "left" : "char ch",
      "right" : "char ch",
      "info" : "SingleVariableDeclaration[22452-22459]:SingleVariableDeclaration[22452-22459]"
    }, {
      "left" : "char[] delimiters",
      "right" : "char[] delimiters",
      "info" : "SingleVariableDeclaration[22461-22478]:SingleVariableDeclaration[22461-22478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22480-22761]:Block[22480-22761]"
    }, {
      "left" : "if (delimiters == null)",
      "right" : "if (delimiters == null)",
      "info" : "IfStatement[22490-22572]:IfStatement[22490-22572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22514-22572]:Block[22514-22572]"
    }, {
      "left" : "return Character.isWhitespace(ch);",
      "right" : "return Character.isWhitespace(ch);",
      "info" : "ReturnStatement[22528-22562]:ReturnStatement[22528-22562]"
    }, {
      "left" : "for (int i = 0, isize = delimiters.length; i < isize; i++)",
      "right" : "for (int i = 0, isize = delimiters.length; i < isize; i++)",
      "info" : "ForStatement[22581-22733]:ForStatement[22581-22733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22640-22733]:Block[22640-22733]"
    }, {
      "left" : "if (ch == delimiters[i])",
      "right" : "if (ch == delimiters[i])",
      "info" : "IfStatement[22654-22723]:IfStatement[22654-22723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22679-22723]:Block[22679-22723]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22697-22709]:ReturnStatement[22697-22709]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22742-22755]:ReturnStatement[22742-22755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23957-23963]:Modifier[23957-23963]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[23964-23970]:Modifier[23964-23970]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[23971-23977]:SimpleType[23971-23977]"
    }, {
      "left" : "abbreviate",
      "right" : "abbreviate",
      "info" : "SimpleName[23978-23988]:SimpleName[23978-23988]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[23989-23999]:SingleVariableDeclaration[23989-23999]"
    }, {
      "left" : "int lower",
      "right" : "int lower",
      "info" : "SingleVariableDeclaration[24001-24010]:SingleVariableDeclaration[24001-24010]"
    }, {
      "left" : "int upper",
      "right" : "int upper",
      "info" : "SingleVariableDeclaration[24012-24021]:SingleVariableDeclaration[24012-24021]"
    }, {
      "left" : "String appendToEnd",
      "right" : "String appendToEnd",
      "info" : "SingleVariableDeclaration[24023-24041]:SingleVariableDeclaration[24023-24041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24043-25436]:Block[24043-25520]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24089-24142]:IfStatement[24089-24142]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24106-24142]:Block[24106-24142]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24120-24132]:ReturnStatement[24120-24132]"
    }, {
      "left" : "if (str.length() == 0)",
      "right" : "if (str.length() == 0)",
      "info" : "IfStatement[24151-24223]:IfStatement[24151-24223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24174-24223]:Block[24174-24223]"
    }, {
      "left" : "return StringUtils.EMPTY;",
      "right" : "return StringUtils.EMPTY;",
      "info" : "ReturnStatement[24188-24213]:ReturnStatement[24188-24213]"
    }, {
      "left" : "if (upper == -1 || upper > str.length())",
      "right" : "if (upper == -1 || upper > str.length())",
      "info" : "IfStatement[24488-24574]:IfStatement[24572-24658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24529-24574]:Block[24613-24658]"
    }, {
      "left" : "upper = str.length();",
      "right" : "upper = str.length();",
      "info" : "ExpressionStatement[24543-24564]:ExpressionStatement[24627-24648]"
    }, {
      "left" : "if (upper < lower)",
      "right" : "if (upper < lower)",
      "info" : "IfStatement[24641-24698]:IfStatement[24725-24782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24660-24698]:Block[24744-24782]"
    }, {
      "left" : "upper = lower;",
      "right" : "upper = lower;",
      "info" : "ExpressionStatement[24674-24688]:ExpressionStatement[24758-24772]"
    }, {
      "left" : "StringBuffer result = new StringBuffer();",
      "right" : "StringBuffer result = new StringBuffer();",
      "info" : "VariableDeclarationStatement[24708-24749]:VariableDeclarationStatement[24792-24833]"
    }, {
      "left" : "int index = StringUtils.indexOf(str, \" \", lower);",
      "right" : "int index = StringUtils.indexOf(str, \" \", lower);",
      "info" : "VariableDeclarationStatement[24758-24807]:VariableDeclarationStatement[24842-24891]"
    }, {
      "left" : "if (index == -1)",
      "right" : "if (index == -1)",
      "info" : "IfStatement[24816-25396]:IfStatement[24900-25480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24833-25105]:Block[24917-25189]"
    }, {
      "left" : "result.append(str.substring(0, upper));",
      "right" : "result.append(str.substring(0, upper));",
      "info" : "ExpressionStatement[24847-24886]:ExpressionStatement[24931-24970]"
    }, {
      "left" : "if (upper != str.length())",
      "right" : "if (upper != str.length())",
      "info" : "IfStatement[24982-25095]:IfStatement[25066-25179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25009-25095]:Block[25093-25179]"
    }, {
      "left" : "result.append(StringUtils.defaultString(appendToEnd));",
      "right" : "result.append(StringUtils.defaultString(appendToEnd));",
      "info" : "ExpressionStatement[25027-25081]:ExpressionStatement[25111-25165]"
    }, {
      "left" : "if (index > upper)",
      "right" : "if (index > upper)",
      "info" : "IfStatement[25111-25396]:IfStatement[25195-25480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25130-25260]:Block[25214-25344]"
    }, {
      "left" : "result.append(str.substring(0, upper));",
      "right" : "result.append(str.substring(0, upper));",
      "info" : "ExpressionStatement[25144-25183]:ExpressionStatement[25228-25267]"
    }, {
      "left" : "result.append(StringUtils.defaultString(appendToEnd));",
      "right" : "result.append(StringUtils.defaultString(appendToEnd));",
      "info" : "ExpressionStatement[25196-25250]:ExpressionStatement[25280-25334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25266-25396]:Block[25350-25480]"
    }, {
      "left" : "result.append(str.substring(0, index));",
      "right" : "result.append(str.substring(0, index));",
      "info" : "ExpressionStatement[25280-25319]:ExpressionStatement[25364-25403]"
    }, {
      "left" : "result.append(StringUtils.defaultString(appendToEnd));",
      "right" : "result.append(StringUtils.defaultString(appendToEnd));",
      "info" : "ExpressionStatement[25332-25386]:ExpressionStatement[25416-25470]"
    }, {
      "left" : "return result.toString();",
      "right" : "return result.toString();",
      "info" : "ReturnStatement[25405-25430]:ReturnStatement[25489-25514]"
    } ]
  },
  "interFileMappings" : { }
}