{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final long serialVersionUID = -1011428905656140431L;",
      "right" : "private static final long serialVersionUID = -1011428905656140431L;",
      "info" : "FieldDeclaration[2224-2319]:FieldDeclaration[2224-2319]"
    }, {
      "left" : "protected BigDecimal data[][] = null;",
      "right" : "protected BigDecimal data[][] = null;",
      "info" : "FieldDeclaration[2329-2399]:FieldDeclaration[2329-2399]"
    }, {
      "left" : "protected BigDecimal lu[][] = null;",
      "right" : "protected BigDecimal lu[][] = null;",
      "info" : "FieldDeclaration[2409-2575]:FieldDeclaration[2409-2575]"
    }, {
      "left" : "protected int[] permutation = null;",
      "right" : "protected int[] permutation = null;",
      "info" : "FieldDeclaration[2585-2676]:FieldDeclaration[2585-2676]"
    }, {
      "left" : "protected int parity = 1;",
      "right" : "protected int parity = 1;",
      "info" : "FieldDeclaration[2686-2785]:FieldDeclaration[2686-2785]"
    }, {
      "left" : "private int roundingMode = BigDecimal.ROUND_HALF_UP;",
      "right" : "private int roundingMode = BigDecimal.ROUND_HALF_UP;",
      "info" : "FieldDeclaration[2795-2887]:FieldDeclaration[2795-2887]"
    }, {
      "left" : "private int scale = 64;",
      "right" : "private int scale = 64;",
      "info" : "FieldDeclaration[2897-2951]:FieldDeclaration[2897-2951]"
    }, {
      "left" : "private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);",
      "right" : "private static final BigDecimal TOO_SMALL = new BigDecimal(10E-12);",
      "info" : "FieldDeclaration[2961-3100]:FieldDeclaration[2961-3100]"
    }, {
      "left" : "static final BigDecimal ZERO = new BigDecimal(0);",
      "right" : "static final BigDecimal ZERO = new BigDecimal(0);",
      "info" : "FieldDeclaration[3110-3183]:FieldDeclaration[3110-3183]"
    }, {
      "left" : "static final BigDecimal ONE = new BigDecimal(1);",
      "right" : "static final BigDecimal ONE = new BigDecimal(1);",
      "info" : "FieldDeclaration[3188-3260]:FieldDeclaration[3188-3260]"
    }, {
      "left" : "public BigMatrixImpl()",
      "right" : "public BigMatrixImpl()",
      "info" : "MethodDeclaration[3270-3354]:MethodDeclaration[3270-3354]"
    }, {
      "left" : "public BigMatrixImpl(int rowDimension, int columnDimension)",
      "right" : "public BigMatrixImpl(int rowDimension, int columnDimension)",
      "info" : "MethodDeclaration[3364-4014]:MethodDeclaration[3364-4014]"
    }, {
      "left" : "public BigMatrixImpl(BigDecimal[][] d)",
      "right" : "public BigMatrixImpl(BigDecimal[][] d)",
      "info" : "MethodDeclaration[4024-4670]:MethodDeclaration[4024-4670]"
    }, {
      "left" : "public BigMatrixImpl(BigDecimal[][] d, boolean copyArray)",
      "right" : "public BigMatrixImpl(BigDecimal[][] d, boolean copyArray)",
      "info" : "MethodDeclaration[4676-6319]:MethodDeclaration[4676-6319]"
    }, {
      "left" : "public BigMatrixImpl(double[][] d)",
      "right" : "public BigMatrixImpl(double[][] d)",
      "info" : "MethodDeclaration[6325-7440]:MethodDeclaration[6325-7440]"
    }, {
      "left" : "public BigMatrixImpl(String[][] d)",
      "right" : "public BigMatrixImpl(String[][] d)",
      "info" : "MethodDeclaration[7450-8494]:MethodDeclaration[7450-8494]"
    }, {
      "left" : "public BigMatrixImpl(BigDecimal[] v)",
      "right" : "public BigMatrixImpl(BigDecimal[] v)",
      "info" : "MethodDeclaration[8504-9022]:MethodDeclaration[8504-9022]"
    }, {
      "left" : "public BigMatrix copy()",
      "right" : "public BigMatrix copy()",
      "info" : "MethodDeclaration[9032-9232]:MethodDeclaration[9032-9232]"
    }, {
      "left" : "public BigMatrix add(BigMatrix m) throws IllegalArgumentException",
      "right" : "public BigMatrix add(BigMatrix m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[9242-10426]:MethodDeclaration[9242-10426]"
    }, {
      "left" : "public BigMatrixImpl add(BigMatrixImpl m) throws IllegalArgumentException",
      "right" : "public BigMatrixImpl add(BigMatrixImpl m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[10432-11504]:MethodDeclaration[10432-11504]"
    }, {
      "left" : "public BigMatrix subtract(BigMatrix m) throws IllegalArgumentException",
      "right" : "public BigMatrix subtract(BigMatrix m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[11510-12704]:MethodDeclaration[11510-12704]"
    }, {
      "left" : "public BigMatrixImpl subtract(BigMatrixImpl m) throws IllegalArgumentException",
      "right" : "public BigMatrixImpl subtract(BigMatrixImpl m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[12710-13789]:MethodDeclaration[12710-13789]"
    }, {
      "left" : "public BigMatrix scalarAdd(BigDecimal d)",
      "right" : "public BigMatrix scalarAdd(BigDecimal d)",
      "info" : "MethodDeclaration[13795-14540]:MethodDeclaration[13795-14540]"
    }, {
      "left" : "public BigMatrix scalarMultiply(BigDecimal d)",
      "right" : "public BigMatrix scalarMultiply(BigDecimal d)",
      "info" : "MethodDeclaration[14546-15306]:MethodDeclaration[14546-15306]"
    }, {
      "left" : "public BigMatrix multiply(BigMatrix m) throws IllegalArgumentException",
      "right" : "public BigMatrix multiply(BigMatrix m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[15312-16742]:MethodDeclaration[15312-16742]"
    }, {
      "left" : "public BigMatrixImpl multiply(BigMatrixImpl m) throws IllegalArgumentException",
      "right" : "public BigMatrixImpl multiply(BigMatrixImpl m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[16748-18003]:MethodDeclaration[16748-18003]"
    }, {
      "left" : "public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException",
      "right" : "public BigMatrix preMultiply(BigMatrix m) throws IllegalArgumentException",
      "info" : "MethodDeclaration[18009-18383]:MethodDeclaration[18009-18383]"
    }, {
      "left" : "public BigDecimal[][] getData()",
      "right" : "public BigDecimal[][] getData()",
      "info" : "MethodDeclaration[18389-18649]:MethodDeclaration[18389-18649]"
    }, {
      "left" : "public double[][] getDataAsDoubleArray()",
      "right" : "public double[][] getDataAsDoubleArray()",
      "info" : "MethodDeclaration[18659-19279]:MethodDeclaration[18659-19279]"
    }, {
      "left" : "public BigDecimal[][] getDataRef()",
      "right" : "public BigDecimal[][] getDataRef()",
      "info" : "MethodDeclaration[19289-19551]:MethodDeclaration[19289-19551]"
    }, {
      "left" : "public int getRoundingMode()",
      "right" : "public int getRoundingMode()",
      "info" : "MethodDeclaration[19561-19820]:MethodDeclaration[19561-19820]"
    }, {
      "left" : "public void setRoundingMode(int roundingMode)",
      "right" : "public void setRoundingMode(int roundingMode)",
      "info" : "MethodDeclaration[19830-20081]:MethodDeclaration[19830-20081]"
    }, {
      "left" : "public int getScale()",
      "right" : "public int getScale()",
      "info" : "MethodDeclaration[20091-20279]:MethodDeclaration[20091-20279]"
    }, {
      "left" : "public void setScale(int scale)",
      "right" : "public void setScale(int scale)",
      "info" : "MethodDeclaration[20289-20493]:MethodDeclaration[20289-20493]"
    }, {
      "left" : "public BigDecimal getNorm()",
      "right" : "public BigDecimal getNorm()",
      "info" : "MethodDeclaration[20503-21083]:MethodDeclaration[20503-21083]"
    }, {
      "left" : "public BigMatrix getSubMatrix(int startRow, int endRow,\n                                  int startColumn, int endColumn)\n        throws MatrixIndexException",
      "right" : "public BigMatrix getSubMatrix(int startRow, int endRow,\n                                  int startColumn, int endColumn)\n        throws MatrixIndexException",
      "info" : "MethodDeclaration[21093-22400]:MethodDeclaration[21093-22400]"
    }, {
      "left" : "public BigMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n        throws MatrixIndexException",
      "right" : "public BigMatrix getSubMatrix(int[] selectedRows, int[] selectedColumns)\n        throws MatrixIndexException",
      "info" : "MethodDeclaration[22410-23853]:MethodDeclaration[22410-23853]"
    }, {
      "left" : "public void setSubMatrix(BigDecimal[][] subMatrix, int row, int column) \n    throws MatrixIndexException",
      "right" : "public void setSubMatrix(BigDecimal[][] subMatrix, int row, int column) \n    throws MatrixIndexException",
      "info" : "MethodDeclaration[23864-26502]:MethodDeclaration[23864-26502]"
    }, {
      "left" : "public BigMatrix getRowMatrix(int row) throws MatrixIndexException",
      "right" : "public BigMatrix getRowMatrix(int row) throws MatrixIndexException",
      "info" : "MethodDeclaration[26512-27197]:MethodDeclaration[26512-27197]"
    }, {
      "left" : "public BigMatrix getColumnMatrix(int column) throws MatrixIndexException",
      "right" : "public BigMatrix getColumnMatrix(int column) throws MatrixIndexException",
      "info" : "MethodDeclaration[27208-27971]:MethodDeclaration[27208-27971]"
    }, {
      "left" : "public BigDecimal[] getRow(int row) throws MatrixIndexException",
      "right" : "public BigDecimal[] getRow(int row) throws MatrixIndexException",
      "info" : "MethodDeclaration[27981-28758]:MethodDeclaration[27981-28758]"
    }, {
      "left" : "public double[] getRowAsDoubleArray(int row) throws MatrixIndexException",
      "right" : "public double[] getRowAsDoubleArray(int row) throws MatrixIndexException",
      "info" : "MethodDeclaration[28769-29611]:MethodDeclaration[28769-29611]"
    }, {
      "left" : "public BigDecimal[] getColumn(int col) throws MatrixIndexException",
      "right" : "public BigDecimal[] getColumn(int col) throws MatrixIndexException",
      "info" : "MethodDeclaration[29622-30453]:MethodDeclaration[29622-30453]"
    }, {
      "left" : "public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException",
      "right" : "public double[] getColumnAsDoubleArray(int col) throws MatrixIndexException",
      "info" : "MethodDeclaration[30463-31329]:MethodDeclaration[30463-31329]"
    }, {
      "left" : "public BigDecimal getEntry(int row, int column)\n    throws MatrixIndexException",
      "right" : "public BigDecimal getEntry(int row, int column)\n    throws MatrixIndexException",
      "info" : "MethodDeclaration[31340-32210]:MethodDeclaration[31340-32210]"
    }, {
      "left" : "public double getEntryAsDouble(int row, int column) throws MatrixIndexException",
      "right" : "public double getEntryAsDouble(int row, int column) throws MatrixIndexException",
      "info" : "MethodDeclaration[32220-32968]:MethodDeclaration[32220-32968]"
    }, {
      "left" : "public BigMatrix transpose()",
      "right" : "public BigMatrix transpose()",
      "info" : "MethodDeclaration[32978-33554]:MethodDeclaration[32978-33554]"
    }, {
      "left" : "public BigMatrix inverse() throws InvalidMatrixException",
      "right" : "public BigMatrix inverse() throws InvalidMatrixException",
      "info" : "MethodDeclaration[33564-33888]:MethodDeclaration[33564-33888]"
    }, {
      "left" : "public BigDecimal getDeterminant() throws InvalidMatrixException",
      "right" : "public BigDecimal getDeterminant() throws InvalidMatrixException",
      "info" : "MethodDeclaration[33898-34598]:MethodDeclaration[33898-34598]"
    }, {
      "left" : "public boolean isSquare()",
      "right" : "public boolean isSquare()",
      "info" : "MethodDeclaration[34609-34837]:MethodDeclaration[34609-34837]"
    }, {
      "left" : "public boolean isSingular()",
      "right" : "public boolean isSingular()",
      "info" : "MethodDeclaration[34847-35313]:MethodDeclaration[34847-35313]"
    }, {
      "left" : "public int getRowDimension()",
      "right" : "public int getRowDimension()",
      "info" : "MethodDeclaration[35323-35487]:MethodDeclaration[35323-35487]"
    }, {
      "left" : "public int getColumnDimension()",
      "right" : "public int getColumnDimension()",
      "info" : "MethodDeclaration[35497-35673]:MethodDeclaration[35497-35673]"
    }, {
      "left" : "public BigDecimal getTrace() throws IllegalArgumentException",
      "right" : "public BigDecimal getTrace() throws IllegalArgumentException",
      "info" : "MethodDeclaration[35684-36311]:MethodDeclaration[35684-36311]"
    }, {
      "left" : "public BigDecimal[] operate(double[] v) throws IllegalArgumentException",
      "right" : "public BigDecimal[] operate(double[] v) throws IllegalArgumentException",
      "info" : "MethodDeclaration[37208-37704]:MethodDeclaration[37205-37701]"
    }, {
      "left" : "public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException",
      "right" : "public BigDecimal[] preMultiply(BigDecimal[] v) throws IllegalArgumentException",
      "info" : "MethodDeclaration[37714-38593]:MethodDeclaration[37711-38590]"
    }, {
      "left" : "public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public BigDecimal[] solve(BigDecimal[] b) throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[38603-39671]:MethodDeclaration[38600-39668]"
    }, {
      "left" : "public BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public BigDecimal[] solve(double[] b) throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[39681-40430]:MethodDeclaration[39678-40427]"
    }, {
      "left" : "public BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException",
      "right" : "public BigMatrix solve(BigMatrix b) throws IllegalArgumentException, InvalidMatrixException",
      "info" : "MethodDeclaration[40440-43014]:MethodDeclaration[40437-43011]"
    }, {
      "left" : "public void luDecompose() throws InvalidMatrixException",
      "right" : "public void luDecompose() throws InvalidMatrixException",
      "info" : "MethodDeclaration[43024-46701]:MethodDeclaration[43021-46698]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[46711-47480]:MethodDeclaration[46708-47477]"
    }, {
      "left" : "public boolean equals(Object object)",
      "right" : "public boolean equals(Object object)",
      "info" : "MethodDeclaration[47491-48637]:MethodDeclaration[47488-48634]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[48647-49262]:MethodDeclaration[48644-49259]"
    }, {
      "left" : "protected BigMatrix getLUMatrix() throws InvalidMatrixException",
      "right" : "protected BigMatrix getLUMatrix() throws InvalidMatrixException",
      "info" : "MethodDeclaration[49326-50865]:MethodDeclaration[49323-50862]"
    }, {
      "left" : "protected int[] getPermutation()",
      "right" : "protected int[] getPermutation()",
      "info" : "MethodDeclaration[50875-51492]:MethodDeclaration[50872-51489]"
    }, {
      "left" : "private BigDecimal[][] copyOut()",
      "right" : "private BigDecimal[][] copyOut()",
      "info" : "MethodDeclaration[51554-52077]:MethodDeclaration[51551-52074]"
    }, {
      "left" : "private void copyIn(BigDecimal[][] in)",
      "right" : "private void copyIn(BigDecimal[][] in)",
      "info" : "MethodDeclaration[52087-52512]:MethodDeclaration[52084-52509]"
    }, {
      "left" : "private void copyIn(double[][] in)",
      "right" : "private void copyIn(double[][] in)",
      "info" : "MethodDeclaration[52522-53071]:MethodDeclaration[52519-53068]"
    }, {
      "left" : "private void copyIn(String[][] in)",
      "right" : "private void copyIn(String[][] in)",
      "info" : "MethodDeclaration[53081-53663]:MethodDeclaration[53078-53660]"
    }, {
      "left" : "private boolean isValidCoordinate(int row, int col)",
      "right" : "private boolean isValidCoordinate(int row, int col)",
      "info" : "MethodDeclaration[53673-54124]:MethodDeclaration[53670-54121]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3347-3354]:Block[3347-3354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3754-4014]:Block[3754-4014]"
    }, {
      "left" : "if (rowDimension <=0 || columnDimension <=0)",
      "right" : "if (rowDimension <=0 || columnDimension <=0)",
      "info" : "IfStatement[3764-3927]:IfStatement[3764-3927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3809-3927]:Block[3809-3927]"
    }, {
      "left" : "throw new IllegalArgumentException\n            (\"row and column dimensions must be positive\");",
      "right" : "throw new IllegalArgumentException\n            (\"row and column dimensions must be positive\");",
      "info" : "ThrowStatement[3823-3917]:ThrowStatement[3823-3917]"
    }, {
      "left" : "data = new BigDecimal[rowDimension][columnDimension];",
      "right" : "data = new BigDecimal[rowDimension][columnDimension];",
      "info" : "ExpressionStatement[3936-3989]:ExpressionStatement[3936-3989]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[3998-4008]:ExpressionStatement[3998-4008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4620-4670]:Block[4620-4670]"
    }, {
      "left" : "this.copyIn(d);",
      "right" : "this.copyIn(d);",
      "info" : "ExpressionStatement[4630-4645]:ExpressionStatement[4630-4645]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[4654-4664]:ExpressionStatement[4654-4664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5514-6319]:Block[5514-6319]"
    }, {
      "left" : "if (copyArray)",
      "right" : "if (copyArray)",
      "info" : "IfStatement[5524-6294]:IfStatement[5524-6294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5539-5573]:Block[5539-5573]"
    }, {
      "left" : "copyIn(d);",
      "right" : "copyIn(d);",
      "info" : "ExpressionStatement[5553-5563]:ExpressionStatement[5553-5563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5579-6294]:Block[5579-6294]"
    }, {
      "left" : "if (d == null)",
      "right" : "if (d == null)",
      "info" : "IfStatement[5593-5673]:IfStatement[5593-5673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5608-5673]:Block[5608-5673]"
    }, {
      "left" : "throw new NullPointerException();",
      "right" : "throw new NullPointerException();",
      "info" : "ThrowStatement[5626-5659]:ThrowStatement[5626-5659]"
    }, {
      "left" : "final int nRows = d.length;",
      "right" : "final int nRows = d.length;",
      "info" : "VariableDeclarationStatement[5689-5716]:VariableDeclarationStatement[5689-5716]"
    }, {
      "left" : "if (nRows == 0)",
      "right" : "if (nRows == 0)",
      "info" : "IfStatement[5729-5851]:IfStatement[5729-5851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5745-5851]:Block[5745-5851]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Matrix must have at least one row.\");",
      "right" : "throw new IllegalArgumentException(\"Matrix must have at least one row.\");",
      "info" : "ThrowStatement[5763-5836]:ThrowStatement[5763-5836]"
    }, {
      "left" : "final int nCols = d[0].length;",
      "right" : "final int nCols = d[0].length;",
      "info" : "VariableDeclarationStatement[5864-5894]:VariableDeclarationStatement[5864-5894]"
    }, {
      "left" : "if (nCols == 0)",
      "right" : "if (nCols == 0)",
      "info" : "IfStatement[5907-6032]:IfStatement[5907-6032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5923-6032]:Block[5923-6032]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Matrix must have at least one column.\");",
      "right" : "throw new IllegalArgumentException(\"Matrix must have at least one column.\");",
      "info" : "ThrowStatement[5941-6017]:ThrowStatement[5941-6017]"
    }, {
      "left" : "for (int r = 1; r < nRows; r++)",
      "right" : "for (int r = 1; r < nRows; r++)",
      "info" : "ForStatement[6045-6255]:ForStatement[6045-6255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6077-6255]:Block[6077-6255]"
    }, {
      "left" : "if (d[r].length != nCols)",
      "right" : "if (d[r].length != nCols)",
      "info" : "IfStatement[6095-6241]:IfStatement[6095-6241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6121-6241]:Block[6121-6241]"
    }, {
      "left" : "throw new IllegalArgumentException(\"All input rows must have the same length.\");",
      "right" : "throw new IllegalArgumentException(\"All input rows must have the same length.\");",
      "info" : "ThrowStatement[6143-6223]:ThrowStatement[6143-6223]"
    }, {
      "left" : "data = d;",
      "right" : "data = d;",
      "info" : "ExpressionStatement[6275-6284]:ExpressionStatement[6275-6284]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[6303-6313]:ExpressionStatement[6303-6313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6812-7440]:Block[6812-7440]"
    }, {
      "left" : "final int nRows = d.length;",
      "right" : "final int nRows = d.length;",
      "info" : "VariableDeclarationStatement[6822-6849]:VariableDeclarationStatement[6822-6849]"
    }, {
      "left" : "if (nRows == 0)",
      "right" : "if (nRows == 0)",
      "info" : "IfStatement[6858-6985]:IfStatement[6858-6985]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6874-6985]:Block[6874-6985]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
      "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
      "info" : "ThrowStatement[6888-6974]:ThrowStatement[6888-6974]"
    }, {
      "left" : "final int nCols = d[0].length;",
      "right" : "final int nCols = d[0].length;",
      "info" : "VariableDeclarationStatement[6994-7024]:VariableDeclarationStatement[6994-7024]"
    }, {
      "left" : "if (nCols == 0)",
      "right" : "if (nCols == 0)",
      "info" : "IfStatement[7033-7163]:IfStatement[7033-7163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7049-7163]:Block[7049-7163]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
      "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
      "info" : "ThrowStatement[7063-7152]:ThrowStatement[7063-7152]"
    }, {
      "left" : "for (int row = 1; row < nRows; row++)",
      "right" : "for (int row = 1; row < nRows; row++)",
      "info" : "ForStatement[7172-7391]:ForStatement[7172-7391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7210-7391]:Block[7210-7391]"
    }, {
      "left" : "if (d[row].length != nCols)",
      "right" : "if (d[row].length != nCols)",
      "info" : "IfStatement[7224-7381]:IfStatement[7224-7381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7252-7381]:Block[7252-7381]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
      "right" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
      "info" : "ThrowStatement[7270-7367]:ThrowStatement[7270-7367]"
    }, {
      "left" : "this.copyIn(d);",
      "right" : "this.copyIn(d);",
      "info" : "ExpressionStatement[7400-7415]:ExpressionStatement[7400-7415]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[7424-7434]:ExpressionStatement[7424-7434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7866-8494]:Block[7866-8494]"
    }, {
      "left" : "final int nRows = d.length;",
      "right" : "final int nRows = d.length;",
      "info" : "VariableDeclarationStatement[7876-7903]:VariableDeclarationStatement[7876-7903]"
    }, {
      "left" : "if (nRows == 0)",
      "right" : "if (nRows == 0)",
      "info" : "IfStatement[7912-8039]:IfStatement[7912-8039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7928-8039]:Block[7928-8039]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
      "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
      "info" : "ThrowStatement[7942-8028]:ThrowStatement[7942-8028]"
    }, {
      "left" : "final int nCols = d[0].length;",
      "right" : "final int nCols = d[0].length;",
      "info" : "VariableDeclarationStatement[8048-8078]:VariableDeclarationStatement[8048-8078]"
    }, {
      "left" : "if (nCols == 0)",
      "right" : "if (nCols == 0)",
      "info" : "IfStatement[8087-8217]:IfStatement[8087-8217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8103-8217]:Block[8103-8217]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
      "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
      "info" : "ThrowStatement[8117-8206]:ThrowStatement[8117-8206]"
    }, {
      "left" : "for (int row = 1; row < nRows; row++)",
      "right" : "for (int row = 1; row < nRows; row++)",
      "info" : "ForStatement[8226-8445]:ForStatement[8226-8445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8264-8445]:Block[8264-8445]"
    }, {
      "left" : "if (d[row].length != nCols)",
      "right" : "if (d[row].length != nCols)",
      "info" : "IfStatement[8278-8435]:IfStatement[8278-8435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8306-8435]:Block[8306-8435]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
      "right" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
      "info" : "ThrowStatement[8324-8421]:ThrowStatement[8324-8421]"
    }, {
      "left" : "this.copyIn(d);",
      "right" : "this.copyIn(d);",
      "info" : "ExpressionStatement[8454-8469]:ExpressionStatement[8454-8469]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[8478-8488]:ExpressionStatement[8478-8488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8845-9022]:Block[8845-9022]"
    }, {
      "left" : "final int nRows = v.length;",
      "right" : "final int nRows = v.length;",
      "info" : "VariableDeclarationStatement[8855-8882]:VariableDeclarationStatement[8855-8882]"
    }, {
      "left" : "data = new BigDecimal[nRows][1];",
      "right" : "data = new BigDecimal[nRows][1];",
      "info" : "ExpressionStatement[8891-8923]:ExpressionStatement[8891-8923]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[8932-9016]:ForStatement[8932-9016]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8970-9016]:Block[8970-9016]"
    }, {
      "left" : "data[row][0] = v[row];",
      "right" : "data[row][0] = v[row];",
      "info" : "ExpressionStatement[8984-9006]:ExpressionStatement[8984-9006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9168-9232]:Block[9168-9232]"
    }, {
      "left" : "return new BigMatrixImpl(this.copyOut(), false);",
      "right" : "return new BigMatrixImpl(this.copyOut(), false);",
      "info" : "ReturnStatement[9178-9226]:ReturnStatement[9178-9226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9523-10426]:Block[9523-10426]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9533-10420]:TryStatement[9533-10420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9537-9591]:Block[9537-9591]"
    }, {
      "left" : "return add((BigMatrixImpl) m);",
      "right" : "return add((BigMatrixImpl) m);",
      "info" : "ReturnStatement[9551-9581]:ReturnStatement[9551-9581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9623-10420]:Block[9623-10420]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[9637-9679]:VariableDeclarationStatement[9637-9679]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[9692-9737]:VariableDeclarationStatement[9692-9737]"
    }, {
      "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "info" : "IfStatement[9750-9924]:IfStatement[9750-9924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9828-9924]:Block[9828-9924]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[9846-9910]:ThrowStatement[9846-9910]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[9937-10006]:VariableDeclarationStatement[9937-10006]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[10019-10356]:ForStatement[10019-10356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10060-10356]:Block[10060-10356]"
    }, {
      "left" : "final BigDecimal[] dataRow    = data[row];",
      "right" : "final BigDecimal[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[10078-10120]:VariableDeclarationStatement[10078-10120]"
    }, {
      "left" : "final BigDecimal[] outDataRow = outData[row];",
      "right" : "final BigDecimal[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[10137-10182]:VariableDeclarationStatement[10137-10182]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[10199-10340]:ForStatement[10199-10340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10243-10340]:Block[10243-10340]"
    }, {
      "left" : "outDataRow[col] = dataRow[col].add(m.getEntry(row, col));",
      "right" : "outDataRow[col] = dataRow[col].add(m.getEntry(row, col));",
      "info" : "ExpressionStatement[10265-10322]:ExpressionStatement[10265-10322]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[10369-10410]:ReturnStatement[10369-10410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10721-11504]:Block[10721-11504]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[10731-10773]:VariableDeclarationStatement[10731-10773]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[10782-10827]:VariableDeclarationStatement[10782-10827]"
    }, {
      "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "info" : "IfStatement[10836-11002]:IfStatement[10836-11002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10914-11002]:Block[10914-11002]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[10928-10992]:ThrowStatement[10928-10992]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[11011-11080]:VariableDeclarationStatement[11011-11080]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[11089-11448]:ForStatement[11089-11448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11130-11448]:Block[11130-11448]"
    }, {
      "left" : "final BigDecimal[] dataRow    = data[row];",
      "right" : "final BigDecimal[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[11144-11186]:VariableDeclarationStatement[11144-11186]"
    }, {
      "left" : "final BigDecimal[] mRow       = m.data[row];",
      "right" : "final BigDecimal[] mRow       = m.data[row];",
      "info" : "VariableDeclarationStatement[11199-11243]:VariableDeclarationStatement[11199-11243]"
    }, {
      "left" : "final BigDecimal[] outDataRow = outData[row];",
      "right" : "final BigDecimal[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[11256-11301]:VariableDeclarationStatement[11256-11301]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[11314-11436]:ForStatement[11314-11436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11358-11436]:Block[11358-11436]"
    }, {
      "left" : "outDataRow[col] = dataRow[col].add(mRow[col]);",
      "right" : "outDataRow[col] = dataRow[col].add(mRow[col]);",
      "info" : "ExpressionStatement[11376-11422]:ExpressionStatement[11376-11422]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[11457-11498]:ReturnStatement[11457-11498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11793-12704]:Block[11793-12704]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11803-12698]:TryStatement[11803-12698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11807-11866]:Block[11807-11866]"
    }, {
      "left" : "return subtract((BigMatrixImpl) m);",
      "right" : "return subtract((BigMatrixImpl) m);",
      "info" : "ReturnStatement[11821-11856]:ReturnStatement[11821-11856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11898-12698]:Block[11898-12698]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[11912-11954]:VariableDeclarationStatement[11912-11954]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[11967-12012]:VariableDeclarationStatement[11967-12012]"
    }, {
      "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "info" : "IfStatement[12025-12199]:IfStatement[12025-12199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12103-12199]:Block[12103-12199]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[12121-12185]:ThrowStatement[12121-12185]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[12212-12281]:VariableDeclarationStatement[12212-12281]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[12294-12634]:ForStatement[12294-12634]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12335-12634]:Block[12335-12634]"
    }, {
      "left" : "final BigDecimal[] dataRow    = data[row];",
      "right" : "final BigDecimal[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[12353-12395]:VariableDeclarationStatement[12353-12395]"
    }, {
      "left" : "final BigDecimal[] outDataRow = outData[row];",
      "right" : "final BigDecimal[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[12412-12457]:VariableDeclarationStatement[12412-12457]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[12474-12618]:ForStatement[12474-12618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12518-12618]:Block[12518-12618]"
    }, {
      "left" : "outDataRow[col] = dataRow[col].subtract(getEntry(row, col));",
      "right" : "outDataRow[col] = dataRow[col].subtract(getEntry(row, col));",
      "info" : "ExpressionStatement[12540-12600]:ExpressionStatement[12540-12600]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[12647-12688]:ReturnStatement[12647-12688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13001-13789]:Block[13001-13789]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[13011-13053]:VariableDeclarationStatement[13011-13053]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[13062-13107]:VariableDeclarationStatement[13062-13107]"
    }, {
      "left" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "right" : "if (columnCount != m.getColumnDimension() || rowCount != m.getRowDimension())",
      "info" : "IfStatement[13116-13282]:IfStatement[13116-13282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13194-13282]:Block[13194-13282]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "right" : "throw new IllegalArgumentException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[13208-13272]:ThrowStatement[13208-13272]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[13291-13360]:VariableDeclarationStatement[13291-13360]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[13369-13733]:ForStatement[13369-13733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13410-13733]:Block[13410-13733]"
    }, {
      "left" : "final BigDecimal[] dataRow    = data[row];",
      "right" : "final BigDecimal[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[13424-13466]:VariableDeclarationStatement[13424-13466]"
    }, {
      "left" : "final BigDecimal[] mRow       = m.data[row];",
      "right" : "final BigDecimal[] mRow       = m.data[row];",
      "info" : "VariableDeclarationStatement[13479-13523]:VariableDeclarationStatement[13479-13523]"
    }, {
      "left" : "final BigDecimal[] outDataRow = outData[row];",
      "right" : "final BigDecimal[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[13536-13581]:VariableDeclarationStatement[13536-13581]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[13594-13721]:ForStatement[13594-13721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13638-13721]:Block[13638-13721]"
    }, {
      "left" : "outDataRow[col] = dataRow[col].subtract(mRow[col]);",
      "right" : "outDataRow[col] = dataRow[col].subtract(mRow[col]);",
      "info" : "ExpressionStatement[13656-13707]:ExpressionStatement[13656-13707]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[13742-13783]:ReturnStatement[13742-13783]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13999-14540]:Block[13999-14540]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[14009-14051]:VariableDeclarationStatement[14009-14051]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[14060-14105]:VariableDeclarationStatement[14060-14105]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[14114-14183]:VariableDeclarationStatement[14114-14183]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[14192-14484]:ForStatement[14192-14484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14233-14484]:Block[14233-14484]"
    }, {
      "left" : "final BigDecimal[] dataRow    = data[row];",
      "right" : "final BigDecimal[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[14247-14289]:VariableDeclarationStatement[14247-14289]"
    }, {
      "left" : "final BigDecimal[] outDataRow = outData[row];",
      "right" : "final BigDecimal[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[14302-14347]:VariableDeclarationStatement[14302-14347]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[14360-14474]:ForStatement[14360-14474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14404-14474]:Block[14404-14474]"
    }, {
      "left" : "outDataRow[col] = dataRow[col].add(d);",
      "right" : "outDataRow[col] = dataRow[col].add(d);",
      "info" : "ExpressionStatement[14422-14460]:ExpressionStatement[14422-14460]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[14493-14534]:ReturnStatement[14493-14534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14760-15306]:Block[14760-15306]"
    }, {
      "left" : "final int rowCount    = getRowDimension();",
      "right" : "final int rowCount    = getRowDimension();",
      "info" : "VariableDeclarationStatement[14770-14812]:VariableDeclarationStatement[14770-14812]"
    }, {
      "left" : "final int columnCount = getColumnDimension();",
      "right" : "final int columnCount = getColumnDimension();",
      "info" : "VariableDeclarationStatement[14821-14866]:VariableDeclarationStatement[14821-14866]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[rowCount][columnCount];",
      "info" : "VariableDeclarationStatement[14875-14944]:VariableDeclarationStatement[14875-14944]"
    }, {
      "left" : "for (int row = 0; row < rowCount; row++)",
      "right" : "for (int row = 0; row < rowCount; row++)",
      "info" : "ForStatement[14953-15250]:ForStatement[14953-15250]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14994-15250]:Block[14994-15250]"
    }, {
      "left" : "final BigDecimal[] dataRow    = data[row];",
      "right" : "final BigDecimal[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[15008-15050]:VariableDeclarationStatement[15008-15050]"
    }, {
      "left" : "final BigDecimal[] outDataRow = outData[row];",
      "right" : "final BigDecimal[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[15063-15108]:VariableDeclarationStatement[15063-15108]"
    }, {
      "left" : "for (int col = 0; col < columnCount; col++)",
      "right" : "for (int col = 0; col < columnCount; col++)",
      "info" : "ForStatement[15121-15240]:ForStatement[15121-15240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15165-15240]:Block[15165-15240]"
    }, {
      "left" : "outDataRow[col] = dataRow[col].multiply(d);",
      "right" : "outDataRow[col] = dataRow[col].multiply(d);",
      "info" : "ExpressionStatement[15183-15226]:ExpressionStatement[15183-15226]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[15259-15300]:ReturnStatement[15259-15300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15646-16742]:Block[15646-16742]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15656-16736]:TryStatement[15656-16736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15660-15719]:Block[15660-15719]"
    }, {
      "left" : "return multiply((BigMatrixImpl) m);",
      "right" : "return multiply((BigMatrixImpl) m);",
      "info" : "ReturnStatement[15674-15709]:ReturnStatement[15674-15709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15751-16736]:Block[15751-16736]"
    }, {
      "left" : "if (this.getColumnDimension() != m.getRowDimension())",
      "right" : "if (this.getColumnDimension() != m.getRowDimension())",
      "info" : "IfStatement[15765-15933]:IfStatement[15765-15933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15819-15933]:Block[15819-15933]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
      "right" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
      "info" : "ThrowStatement[15837-15919]:ThrowStatement[15837-15919]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[15946-15987]:VariableDeclarationStatement[15946-15987]"
    }, {
      "left" : "final int nCols = m.getColumnDimension();",
      "right" : "final int nCols = m.getColumnDimension();",
      "info" : "VariableDeclarationStatement[16000-16041]:VariableDeclarationStatement[16000-16041]"
    }, {
      "left" : "final int nSum = this.getColumnDimension();",
      "right" : "final int nSum = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[16054-16097]:VariableDeclarationStatement[16054-16097]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[nRows][nCols];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[nRows][nCols];",
      "info" : "VariableDeclarationStatement[16110-16170]:VariableDeclarationStatement[16110-16170]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[16183-16672]:ForStatement[16183-16672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16221-16672]:Block[16221-16672]"
    }, {
      "left" : "final BigDecimal[] dataRow    = data[row];",
      "right" : "final BigDecimal[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[16239-16281]:VariableDeclarationStatement[16239-16281]"
    }, {
      "left" : "final BigDecimal[] outDataRow = outData[row];",
      "right" : "final BigDecimal[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[16298-16343]:VariableDeclarationStatement[16298-16343]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[16360-16658]:ForStatement[16360-16658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16398-16658]:Block[16398-16658]"
    }, {
      "left" : "BigDecimal sum = ZERO;",
      "right" : "BigDecimal sum = ZERO;",
      "info" : "VariableDeclarationStatement[16420-16442]:VariableDeclarationStatement[16420-16442]"
    }, {
      "left" : "for (int i = 0; i < nSum; i++)",
      "right" : "for (int i = 0; i < nSum; i++)",
      "info" : "ForStatement[16463-16597]:ForStatement[16463-16597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16494-16597]:Block[16494-16597]"
    }, {
      "left" : "sum = sum.add(dataRow[i].multiply(m.getEntry(i, col)));",
      "right" : "sum = sum.add(dataRow[i].multiply(m.getEntry(i, col)));",
      "info" : "ExpressionStatement[16520-16575]:ExpressionStatement[16520-16575]"
    }, {
      "left" : "outDataRow[col] = sum;",
      "right" : "outDataRow[col] = sum;",
      "info" : "ExpressionStatement[16618-16640]:ExpressionStatement[16618-16640]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[16685-16726]:ReturnStatement[16685-16726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17090-18003]:Block[17090-18003]"
    }, {
      "left" : "if (this.getColumnDimension() != m.getRowDimension())",
      "right" : "if (this.getColumnDimension() != m.getRowDimension())",
      "info" : "IfStatement[17100-17260]:IfStatement[17100-17260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17154-17260]:Block[17154-17260]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
      "right" : "throw new IllegalArgumentException(\"Matrices are not multiplication compatible.\");",
      "info" : "ThrowStatement[17168-17250]:ThrowStatement[17168-17250]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[17269-17310]:VariableDeclarationStatement[17269-17310]"
    }, {
      "left" : "final int nCols = m.getColumnDimension();",
      "right" : "final int nCols = m.getColumnDimension();",
      "info" : "VariableDeclarationStatement[17319-17360]:VariableDeclarationStatement[17319-17360]"
    }, {
      "left" : "final int nSum = this.getColumnDimension();",
      "right" : "final int nSum = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[17369-17412]:VariableDeclarationStatement[17369-17412]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[nRows][nCols];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[nRows][nCols];",
      "info" : "VariableDeclarationStatement[17421-17481]:VariableDeclarationStatement[17421-17481]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[17490-17935]:ForStatement[17490-17935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17528-17935]:Block[17528-17935]"
    }, {
      "left" : "final BigDecimal[] dataRow    = data[row];",
      "right" : "final BigDecimal[] dataRow    = data[row];",
      "info" : "VariableDeclarationStatement[17542-17584]:VariableDeclarationStatement[17542-17584]"
    }, {
      "left" : "final BigDecimal[] outDataRow = outData[row];",
      "right" : "final BigDecimal[] outDataRow = outData[row];",
      "info" : "VariableDeclarationStatement[17597-17642]:VariableDeclarationStatement[17597-17642]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[17655-17925]:ForStatement[17655-17925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17693-17925]:Block[17693-17925]"
    }, {
      "left" : "BigDecimal sum = ZERO;",
      "right" : "BigDecimal sum = ZERO;",
      "info" : "VariableDeclarationStatement[17711-17733]:VariableDeclarationStatement[17711-17733]"
    }, {
      "left" : "for (int i = 0; i < nSum; i++)",
      "right" : "for (int i = 0; i < nSum; i++)",
      "info" : "ForStatement[17750-17872]:ForStatement[17750-17872]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17781-17872]:Block[17781-17872]"
    }, {
      "left" : "sum = sum.add(dataRow[i].multiply(m.data[i][col]));",
      "right" : "sum = sum.add(dataRow[i].multiply(m.data[i][col]));",
      "info" : "ExpressionStatement[17803-17854]:ExpressionStatement[17803-17854]"
    }, {
      "left" : "outDataRow[col] = sum;",
      "right" : "outDataRow[col] = sum;",
      "info" : "ExpressionStatement[17889-17911]:ExpressionStatement[17889-17911]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[17956-17997]:ReturnStatement[17956-17997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18343-18383]:Block[18343-18383]"
    }, {
      "left" : "return m.multiply(this);",
      "right" : "return m.multiply(this);",
      "info" : "ReturnStatement[18353-18377]:ReturnStatement[18353-18377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18616-18649]:Block[18616-18649]"
    }, {
      "left" : "return copyOut();",
      "right" : "return copyOut();",
      "info" : "ReturnStatement[18626-18643]:ReturnStatement[18626-18643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18942-19279]:Block[18942-19279]"
    }, {
      "left" : "final int nRows = getRowDimension();",
      "right" : "final int nRows = getRowDimension();",
      "info" : "VariableDeclarationStatement[18952-18988]:VariableDeclarationStatement[18952-18988]"
    }, {
      "left" : "final int nCols = getColumnDimension();",
      "right" : "final int nCols = getColumnDimension();",
      "info" : "VariableDeclarationStatement[18997-19036]:VariableDeclarationStatement[18997-19036]"
    }, {
      "left" : "final double d[][] = new double[nRows][nCols];",
      "right" : "final double d[][] = new double[nRows][nCols];",
      "info" : "VariableDeclarationStatement[19045-19091]:VariableDeclarationStatement[19045-19091]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[19100-19255]:ForStatement[19100-19255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19132-19255]:Block[19132-19255]"
    }, {
      "left" : "for (int j = 0; j < nCols; j++)",
      "right" : "for (int j = 0; j < nCols; j++)",
      "info" : "ForStatement[19146-19245]:ForStatement[19146-19245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19178-19245]:Block[19178-19245]"
    }, {
      "left" : "d[i][j] = data[i][j].doubleValue();",
      "right" : "d[i][j] = data[i][j].doubleValue();",
      "info" : "ExpressionStatement[19196-19231]:ExpressionStatement[19196-19231]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[19264-19273]:ReturnStatement[19264-19273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19523-19551]:Block[19523-19551]"
    }, {
      "left" : "return data;",
      "right" : "return data;",
      "info" : "ReturnStatement[19533-19545]:ReturnStatement[19533-19545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19784-19820]:Block[19784-19820]"
    }, {
      "left" : "return roundingMode;",
      "right" : "return roundingMode;",
      "info" : "ReturnStatement[19794-19814]:ReturnStatement[19794-19814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20032-20081]:Block[20032-20081]"
    }, {
      "left" : "this.roundingMode = roundingMode;",
      "right" : "this.roundingMode = roundingMode;",
      "info" : "ExpressionStatement[20042-20075]:ExpressionStatement[20042-20075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20250-20279]:Block[20250-20279]"
    }, {
      "left" : "return scale;",
      "right" : "return scale;",
      "info" : "ReturnStatement[20260-20273]:ReturnStatement[20260-20273]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20458-20493]:Block[20458-20493]"
    }, {
      "left" : "this.scale = scale;",
      "right" : "this.scale = scale;",
      "info" : "ExpressionStatement[20468-20487]:ExpressionStatement[20468-20487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20720-21083]:Block[20720-21083]"
    }, {
      "left" : "BigDecimal maxColSum = ZERO;",
      "right" : "BigDecimal maxColSum = ZERO;",
      "info" : "VariableDeclarationStatement[20730-20758]:VariableDeclarationStatement[20730-20758]"
    }, {
      "left" : "for (int col = 0; col < this.getColumnDimension(); col++)",
      "right" : "for (int col = 0; col < this.getColumnDimension(); col++)",
      "info" : "ForStatement[20767-21051]:ForStatement[20767-21051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20825-21051]:Block[20825-21051]"
    }, {
      "left" : "BigDecimal sum = ZERO;",
      "right" : "BigDecimal sum = ZERO;",
      "info" : "VariableDeclarationStatement[20839-20861]:VariableDeclarationStatement[20839-20861]"
    }, {
      "left" : "for (int row = 0; row < this.getRowDimension(); row++)",
      "right" : "for (int row = 0; row < this.getRowDimension(); row++)",
      "info" : "ForStatement[20874-20997]:ForStatement[20874-20997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20929-20997]:Block[20929-20997]"
    }, {
      "left" : "sum = sum.add(data[row][col].abs());",
      "right" : "sum = sum.add(data[row][col].abs());",
      "info" : "ExpressionStatement[20947-20983]:ExpressionStatement[20947-20983]"
    }, {
      "left" : "maxColSum = maxColSum.max(sum);",
      "right" : "maxColSum = maxColSum.max(sum);",
      "info" : "ExpressionStatement[21010-21041]:ExpressionStatement[21010-21041]"
    }, {
      "left" : "return maxColSum;",
      "right" : "return maxColSum;",
      "info" : "ReturnStatement[21060-21077]:ReturnStatement[21060-21077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21708-22400]:Block[21708-22400]"
    }, {
      "left" : "if (startRow < 0 || startRow > endRow || endRow > data.length ||\n                startColumn < 0 || startColumn > endColumn ||\n                endColumn > data[0].length)",
      "right" : "if (startRow < 0 || startRow > endRow || endRow > data.length ||\n                startColumn < 0 || startColumn > endColumn ||\n                endColumn > data[0].length)",
      "info" : "IfStatement[21718-21999]:IfStatement[21718-21999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21890-21999]:Block[21890-21999]"
    }, {
      "left" : "throw new MatrixIndexException(\n            \"invalid row or column index selection\");",
      "right" : "throw new MatrixIndexException(\n            \"invalid row or column index selection\");",
      "info" : "ThrowStatement[21904-21989]:ThrowStatement[21904-21989]"
    }, {
      "left" : "final BigDecimal[][] subMatrixData =\n            new BigDecimal[endRow - startRow + 1][endColumn - startColumn + 1];",
      "right" : "final BigDecimal[][] subMatrixData =\n            new BigDecimal[endRow - startRow + 1][endColumn - startColumn + 1];",
      "info" : "VariableDeclarationStatement[22008-22124]:VariableDeclarationStatement[22008-22124]"
    }, {
      "left" : "for (int i = startRow; i <= endRow; i++)",
      "right" : "for (int i = startRow; i <= endRow; i++)",
      "info" : "ForStatement[22133-22338]:ForStatement[22133-22338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22174-22338]:Block[22174-22338]"
    }, {
      "left" : "System.arraycopy(data[i], startColumn,\n                    subMatrixData[i - startRow], 0,\n                    endColumn - startColumn + 1);",
      "right" : "System.arraycopy(data[i], startColumn,\n                    subMatrixData[i - startRow], 0,\n                    endColumn - startColumn + 1);",
      "info" : "ExpressionStatement[22188-22328]:ExpressionStatement[22188-22328]"
    }, {
      "left" : "return new BigMatrixImpl(subMatrixData, false);",
      "right" : "return new BigMatrixImpl(subMatrixData, false);",
      "info" : "ReturnStatement[22347-22394]:ReturnStatement[22347-22394]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22965-23853]:Block[22965-23853]"
    }, {
      "left" : "if (selectedRows.length * selectedColumns.length == 0)",
      "right" : "if (selectedRows.length * selectedColumns.length == 0)",
      "info" : "IfStatement[22975-23156]:IfStatement[22975-23156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23030-23156]:Block[23030-23156]"
    }, {
      "left" : "throw new MatrixIndexException(\n            \"selected row and column index arrays must be non-empty\");",
      "right" : "throw new MatrixIndexException(\n            \"selected row and column index arrays must be non-empty\");",
      "info" : "ThrowStatement[23044-23146]:ThrowStatement[23044-23146]"
    }, {
      "left" : "final BigDecimal[][] subMatrixData =\n            new BigDecimal[selectedRows.length][selectedColumns.length];",
      "right" : "final BigDecimal[][] subMatrixData =\n            new BigDecimal[selectedRows.length][selectedColumns.length];",
      "info" : "VariableDeclarationStatement[23165-23274]:VariableDeclarationStatement[23165-23274]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[23283-23791]:TryStatement[23283-23791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23288-23657]:Block[23288-23657]"
    }, {
      "left" : "for (int i = 0; i < selectedRows.length; i++)",
      "right" : "for (int i = 0; i < selectedRows.length; i++)",
      "info" : "ForStatement[23302-23647]:ForStatement[23302-23647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23348-23647]:Block[23348-23647]"
    }, {
      "left" : "final BigDecimal[] subI = subMatrixData[i];",
      "right" : "final BigDecimal[] subI = subMatrixData[i];",
      "info" : "VariableDeclarationStatement[23366-23409]:VariableDeclarationStatement[23366-23409]"
    }, {
      "left" : "final BigDecimal[] dataSelectedI = data[selectedRows[i]];",
      "right" : "final BigDecimal[] dataSelectedI = data[selectedRows[i]];",
      "info" : "VariableDeclarationStatement[23426-23483]:VariableDeclarationStatement[23426-23483]"
    }, {
      "left" : "for (int j = 0; j < selectedColumns.length; j++)",
      "right" : "for (int j = 0; j < selectedColumns.length; j++)",
      "info" : "ForStatement[23500-23633]:ForStatement[23500-23633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23549-23633]:Block[23549-23633]"
    }, {
      "left" : "subI[j] = dataSelectedI[selectedColumns[j]];",
      "right" : "subI[j] = dataSelectedI[selectedColumns[j]];",
      "info" : "ExpressionStatement[23571-23615]:ExpressionStatement[23571-23615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23707-23791]:Block[23707-23791]"
    }, {
      "left" : "throw new MatrixIndexException(\"matrix dimension mismatch\");",
      "right" : "throw new MatrixIndexException(\"matrix dimension mismatch\");",
      "info" : "ThrowStatement[23721-23781]:ThrowStatement[23721-23781]"
    }, {
      "left" : "return new BigMatrixImpl(subMatrixData, false);",
      "right" : "return new BigMatrixImpl(subMatrixData, false);",
      "info" : "ReturnStatement[23800-23847]:ReturnStatement[23800-23847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25047-26502]:Block[25047-26502]"
    }, {
      "left" : "if ((row < 0) || (column < 0))",
      "right" : "if ((row < 0) || (column < 0))",
      "info" : "IfStatement[25057-25206]:IfStatement[25057-25206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25087-25206]:Block[25087-25206]"
    }, {
      "left" : "throw new MatrixIndexException\n            (\"invalid row or column index selection\");",
      "right" : "throw new MatrixIndexException\n            (\"invalid row or column index selection\");",
      "info" : "ThrowStatement[25101-25186]:ThrowStatement[25101-25186]"
    }, {
      "left" : "final int nRows = subMatrix.length;",
      "right" : "final int nRows = subMatrix.length;",
      "info" : "VariableDeclarationStatement[25215-25250]:VariableDeclarationStatement[25215-25250]"
    }, {
      "left" : "if (nRows == 0)",
      "right" : "if (nRows == 0)",
      "info" : "IfStatement[25259-25386]:IfStatement[25259-25386]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25275-25386]:Block[25275-25386]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
      "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one row.\");",
      "info" : "ThrowStatement[25289-25375]:ThrowStatement[25289-25375]"
    }, {
      "left" : "final int nCols = subMatrix[0].length;",
      "right" : "final int nCols = subMatrix[0].length;",
      "info" : "VariableDeclarationStatement[25395-25433]:VariableDeclarationStatement[25395-25433]"
    }, {
      "left" : "if (nCols == 0)",
      "right" : "if (nCols == 0)",
      "info" : "IfStatement[25442-25572]:IfStatement[25442-25572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25458-25572]:Block[25458-25572]"
    }, {
      "left" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
      "right" : "throw new IllegalArgumentException(\n            \"Matrix must have at least one column.\");",
      "info" : "ThrowStatement[25472-25561]:ThrowStatement[25472-25561]"
    }, {
      "left" : "for (int r = 1; r < nRows; r++)",
      "right" : "for (int r = 1; r < nRows; r++)",
      "info" : "ForStatement[25581-25800]:ForStatement[25581-25800]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25613-25800]:Block[25613-25800]"
    }, {
      "left" : "if (subMatrix[r].length != nCols)",
      "right" : "if (subMatrix[r].length != nCols)",
      "info" : "IfStatement[25627-25790]:IfStatement[25627-25790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25661-25790]:Block[25661-25790]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
      "right" : "throw new IllegalArgumentException(\n                \"All input rows must have the same length.\");",
      "info" : "ThrowStatement[25679-25776]:ThrowStatement[25679-25776]"
    }, {
      "left" : "if (data == null)",
      "right" : "if (data == null)",
      "info" : "IfStatement[25816-26113]:IfStatement[25816-26113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25834-26113]:Block[25834-26113]"
    }, {
      "left" : "if ((row > 0)||(column > 0))",
      "right" : "if ((row > 0)||(column > 0))",
      "info" : "IfStatement[25848-25973]:IfStatement[25848-25973]"
    }, {
      "left" : "throw new MatrixIndexException\n            (\"matrix must be initialized to perfom this method\");",
      "right" : "throw new MatrixIndexException\n            (\"matrix must be initialized to perfom this method\");",
      "info" : "ThrowStatement[25877-25973]:ThrowStatement[25877-25973]"
    }, {
      "left" : "data = new BigDecimal[nRows][nCols];",
      "right" : "data = new BigDecimal[nRows][nCols];",
      "info" : "ExpressionStatement[25986-26022]:ExpressionStatement[25986-26022]"
    }, {
      "left" : "System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);",
      "right" : "System.arraycopy(subMatrix, 0, data, 0, subMatrix.length);",
      "info" : "ExpressionStatement[26035-26093]:ExpressionStatement[26035-26093]"
    }, {
      "left" : "if (((nRows + row) > this.getRowDimension()) ||\n            (nCols + column > this.getColumnDimension()))",
      "right" : "if (((nRows + row) > this.getRowDimension()) ||\n            (nCols + column > this.getColumnDimension()))",
      "info" : "IfStatement[26125-26328]:IfStatement[26125-26328]"
    }, {
      "left" : "throw new MatrixIndexException(\n            \"invalid row or column index selection\");",
      "right" : "throw new MatrixIndexException(\n            \"invalid row or column index selection\");",
      "info" : "ThrowStatement[26243-26328]:ThrowStatement[26243-26328]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[26356-26476]:ForStatement[26356-26476]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26388-26476]:Block[26388-26476]"
    }, {
      "left" : "System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);",
      "right" : "System.arraycopy(subMatrix[i], 0, data[row + i], column, nCols);",
      "info" : "ExpressionStatement[26402-26466]:ExpressionStatement[26402-26466]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[26486-26496]:ExpressionStatement[26486-26496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26849-27197]:Block[26849-27197]"
    }, {
      "left" : "if ( !isValidCoordinate( row, 0))",
      "right" : "if ( !isValidCoordinate( row, 0))",
      "info" : "IfStatement[26859-26972]:IfStatement[26859-26972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26893-26972]:Block[26893-26972]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal row argument\");",
      "right" : "throw new MatrixIndexException(\"illegal row argument\");",
      "info" : "ThrowStatement[26907-26962]:ThrowStatement[26907-26962]"
    }, {
      "left" : "final int ncols = this.getColumnDimension();",
      "right" : "final int ncols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[26981-27025]:VariableDeclarationStatement[26981-27025]"
    }, {
      "left" : "final BigDecimal[][] out = new BigDecimal[1][ncols];",
      "right" : "final BigDecimal[][] out = new BigDecimal[1][ncols];",
      "info" : "VariableDeclarationStatement[27034-27086]:VariableDeclarationStatement[27034-27086]"
    }, {
      "left" : "System.arraycopy(data[row], 0, out[0], 0, ncols);",
      "right" : "System.arraycopy(data[row], 0, out[0], 0, ncols);",
      "info" : "ExpressionStatement[27096-27145]:ExpressionStatement[27096-27145]"
    }, {
      "left" : "return new BigMatrixImpl(out, false);",
      "right" : "return new BigMatrixImpl(out, false);",
      "info" : "ReturnStatement[27154-27191]:ReturnStatement[27154-27191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27575-27971]:Block[27575-27971]"
    }, {
      "left" : "if ( !isValidCoordinate( 0, column))",
      "right" : "if ( !isValidCoordinate( 0, column))",
      "info" : "IfStatement[27585-27704]:IfStatement[27585-27704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27622-27704]:Block[27622-27704]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal column argument\");",
      "right" : "throw new MatrixIndexException(\"illegal column argument\");",
      "info" : "ThrowStatement[27636-27694]:ThrowStatement[27636-27694]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[27713-27754]:VariableDeclarationStatement[27713-27754]"
    }, {
      "left" : "final BigDecimal[][] out = new BigDecimal[nRows][1];",
      "right" : "final BigDecimal[][] out = new BigDecimal[nRows][1];",
      "info" : "VariableDeclarationStatement[27763-27815]:VariableDeclarationStatement[27763-27815]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[27825-27919]:ForStatement[27825-27919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27863-27919]:Block[27863-27919]"
    }, {
      "left" : "out[row][0] = data[row][column];",
      "right" : "out[row][0] = data[row][column];",
      "info" : "ExpressionStatement[27877-27909]:ExpressionStatement[27877-27909]"
    }, {
      "left" : "return new BigMatrixImpl(out, false);",
      "right" : "return new BigMatrixImpl(out, false);",
      "info" : "ReturnStatement[27928-27965]:ReturnStatement[27928-27965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28443-28758]:Block[28443-28758]"
    }, {
      "left" : "if ( !isValidCoordinate( row, 0 ))",
      "right" : "if ( !isValidCoordinate( row, 0 ))",
      "info" : "IfStatement[28453-28568]:IfStatement[28453-28568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28489-28568]:Block[28489-28568]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal row argument\");",
      "right" : "throw new MatrixIndexException(\"illegal row argument\");",
      "info" : "ThrowStatement[28503-28558]:ThrowStatement[28503-28558]"
    }, {
      "left" : "final int ncols = this.getColumnDimension();",
      "right" : "final int ncols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[28577-28621]:VariableDeclarationStatement[28577-28621]"
    }, {
      "left" : "final BigDecimal[] out = new BigDecimal[ncols];",
      "right" : "final BigDecimal[] out = new BigDecimal[ncols];",
      "info" : "VariableDeclarationStatement[28630-28677]:VariableDeclarationStatement[28630-28677]"
    }, {
      "left" : "System.arraycopy(data[row], 0, out, 0, ncols);",
      "right" : "System.arraycopy(data[row], 0, out, 0, ncols);",
      "info" : "ExpressionStatement[28686-28732]:ExpressionStatement[28686-28732]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[28741-28752]:ReturnStatement[28741-28752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29264-29611]:Block[29264-29611]"
    }, {
      "left" : "if ( !isValidCoordinate( row, 0 ))",
      "right" : "if ( !isValidCoordinate( row, 0 ))",
      "info" : "IfStatement[29274-29389]:IfStatement[29274-29389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29310-29389]:Block[29310-29389]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal row argument\");",
      "right" : "throw new MatrixIndexException(\"illegal row argument\");",
      "info" : "ThrowStatement[29324-29379]:ThrowStatement[29324-29379]"
    }, {
      "left" : "final int ncols = this.getColumnDimension();",
      "right" : "final int ncols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[29398-29442]:VariableDeclarationStatement[29398-29442]"
    }, {
      "left" : "final double[] out = new double[ncols];",
      "right" : "final double[] out = new double[ncols];",
      "info" : "VariableDeclarationStatement[29451-29490]:VariableDeclarationStatement[29451-29490]"
    }, {
      "left" : "for (int i=0;i<ncols;i++)",
      "right" : "for (int i=0;i<ncols;i++)",
      "info" : "ForStatement[29499-29585]:ForStatement[29499-29585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29525-29585]:Block[29525-29585]"
    }, {
      "left" : "out[i] = data[row][i].doubleValue();",
      "right" : "out[i] = data[row][i].doubleValue();",
      "info" : "ExpressionStatement[29539-29575]:ExpressionStatement[29539-29575]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[29594-29605]:ReturnStatement[29594-29605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30108-30453]:Block[30108-30453]"
    }, {
      "left" : "if ( !isValidCoordinate(0, col))",
      "right" : "if ( !isValidCoordinate(0, col))",
      "info" : "IfStatement[30118-30234]:IfStatement[30118-30234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30152-30234]:Block[30152-30234]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal column argument\");",
      "right" : "throw new MatrixIndexException(\"illegal column argument\");",
      "info" : "ThrowStatement[30166-30224]:ThrowStatement[30166-30224]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[30243-30284]:VariableDeclarationStatement[30243-30284]"
    }, {
      "left" : "final BigDecimal[] out = new BigDecimal[nRows];",
      "right" : "final BigDecimal[] out = new BigDecimal[nRows];",
      "info" : "VariableDeclarationStatement[30293-30340]:VariableDeclarationStatement[30293-30340]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[30349-30427]:ForStatement[30349-30427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30381-30427]:Block[30381-30427]"
    }, {
      "left" : "out[i] = data[i][col];",
      "right" : "out[i] = data[i][col];",
      "info" : "ExpressionStatement[30395-30417]:ExpressionStatement[30395-30417]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[30436-30447]:ReturnStatement[30436-30447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30982-31329]:Block[30982-31329]"
    }, {
      "left" : "if ( !isValidCoordinate( 0, col ))",
      "right" : "if ( !isValidCoordinate( 0, col ))",
      "info" : "IfStatement[30992-31110]:IfStatement[30992-31110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31028-31110]:Block[31028-31110]"
    }, {
      "left" : "throw new MatrixIndexException(\"illegal column argument\");",
      "right" : "throw new MatrixIndexException(\"illegal column argument\");",
      "info" : "ThrowStatement[31042-31100]:ThrowStatement[31042-31100]"
    }, {
      "left" : "final int nrows = this.getRowDimension();",
      "right" : "final int nrows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[31119-31160]:VariableDeclarationStatement[31119-31160]"
    }, {
      "left" : "final double[] out = new double[nrows];",
      "right" : "final double[] out = new double[nrows];",
      "info" : "VariableDeclarationStatement[31169-31208]:VariableDeclarationStatement[31169-31208]"
    }, {
      "left" : "for (int i=0;i<nrows;i++)",
      "right" : "for (int i=0;i<nrows;i++)",
      "info" : "ForStatement[31217-31303]:ForStatement[31217-31303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31243-31303]:Block[31243-31303]"
    }, {
      "left" : "out[i] = data[i][col].doubleValue();",
      "right" : "out[i] = data[i][col].doubleValue();",
      "info" : "ExpressionStatement[31257-31293]:ExpressionStatement[31257-31293]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[31312-31323]:ReturnStatement[31312-31323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32013-32210]:Block[32013-32210]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32023-32204]:TryStatement[32023-32204]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32027-32076]:Block[32027-32076]"
    }, {
      "left" : "return data[row][column];",
      "right" : "return data[row][column];",
      "info" : "ReturnStatement[32041-32066]:ReturnStatement[32041-32066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32118-32204]:Block[32118-32204]"
    }, {
      "left" : "throw new MatrixIndexException(\"matrix entry does not exist\");",
      "right" : "throw new MatrixIndexException(\"matrix entry does not exist\");",
      "info" : "ThrowStatement[32132-32194]:ThrowStatement[32132-32194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32910-32968]:Block[32910-32968]"
    }, {
      "left" : "return getEntry(row,column).doubleValue();",
      "right" : "return getEntry(row,column).doubleValue();",
      "info" : "ReturnStatement[32920-32962]:ReturnStatement[32920-32962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33099-33554]:Block[33099-33554]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[33109-33150]:VariableDeclarationStatement[33109-33150]"
    }, {
      "left" : "final int nCols = this.getColumnDimension();",
      "right" : "final int nCols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[33159-33203]:VariableDeclarationStatement[33159-33203]"
    }, {
      "left" : "final BigDecimal[][] outData = new BigDecimal[nCols][nRows];",
      "right" : "final BigDecimal[][] outData = new BigDecimal[nCols][nRows];",
      "info" : "VariableDeclarationStatement[33212-33272]:VariableDeclarationStatement[33212-33272]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[33281-33498]:ForStatement[33281-33498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33319-33498]:Block[33319-33498]"
    }, {
      "left" : "final BigDecimal[] dataRow = data[row];",
      "right" : "final BigDecimal[] dataRow = data[row];",
      "info" : "VariableDeclarationStatement[33333-33372]:VariableDeclarationStatement[33333-33372]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[33385-33488]:ForStatement[33385-33488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33423-33488]:Block[33423-33488]"
    }, {
      "left" : "outData[col][row] = dataRow[col];",
      "right" : "outData[col][row] = dataRow[col];",
      "info" : "ExpressionStatement[33441-33474]:ExpressionStatement[33441-33474]"
    }, {
      "left" : "return new BigMatrixImpl(outData, false);",
      "right" : "return new BigMatrixImpl(outData, false);",
      "info" : "ReturnStatement[33507-33548]:ReturnStatement[33507-33548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33803-33888]:Block[33803-33888]"
    }, {
      "left" : "return solve(MatrixUtils.createBigIdentityMatrix(getRowDimension()));",
      "right" : "return solve(MatrixUtils.createBigIdentityMatrix(getRowDimension()));",
      "info" : "ReturnStatement[33813-33882]:ReturnStatement[33813-33882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34122-34598]:Block[34122-34598]"
    }, {
      "left" : "if (!isSquare())",
      "right" : "if (!isSquare())",
      "info" : "IfStatement[34132-34230]:IfStatement[34132-34230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34149-34230]:Block[34149-34230]"
    }, {
      "left" : "throw new InvalidMatrixException(\"matrix is not square\");",
      "right" : "throw new InvalidMatrixException(\"matrix is not square\");",
      "info" : "ThrowStatement[34163-34220]:ThrowStatement[34163-34220]"
    }, {
      "left" : "if (isSingular())",
      "right" : "if (isSingular())",
      "info" : "IfStatement[34239-34592]:IfStatement[34239-34592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34257-34363]:Block[34257-34363]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[34341-34353]:ReturnStatement[34341-34353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34369-34592]:Block[34369-34592]"
    }, {
      "left" : "BigDecimal det = (parity == 1) ? ONE : ONE.negate();",
      "right" : "BigDecimal det = (parity == 1) ? ONE : ONE.negate();",
      "info" : "VariableDeclarationStatement[34383-34435]:VariableDeclarationStatement[34383-34435]"
    }, {
      "left" : "for (int i = 0; i < this.getRowDimension(); i++)",
      "right" : "for (int i = 0; i < this.getRowDimension(); i++)",
      "info" : "ForStatement[34448-34558]:ForStatement[34448-34558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34497-34558]:Block[34497-34558]"
    }, {
      "left" : "det = det.multiply(lu[i][i]);",
      "right" : "det = det.multiply(lu[i][i]);",
      "info" : "ExpressionStatement[34515-34544]:ExpressionStatement[34515-34544]"
    }, {
      "left" : "return det;",
      "right" : "return det;",
      "info" : "ReturnStatement[34571-34582]:ReturnStatement[34571-34582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34760-34837]:Block[34760-34837]"
    }, {
      "left" : "return (this.getColumnDimension() == this.getRowDimension());",
      "right" : "return (this.getColumnDimension() == this.getRowDimension());",
      "info" : "ReturnStatement[34770-34831]:ReturnStatement[34770-34831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34971-35313]:Block[34971-35313]"
    }, {
      "left" : "if (lu == null)",
      "right" : "if (lu == null)",
      "info" : "IfStatement[34981-35307]:IfStatement[34981-35307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34997-35180]:Block[34997-35180]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[35011-35170]:TryStatement[35011-35170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35015-35091]:Block[35015-35091]"
    }, {
      "left" : "luDecompose();",
      "right" : "luDecompose();",
      "info" : "ExpressionStatement[35033-35047]:ExpressionStatement[35033-35047]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35064-35077]:ReturnStatement[35064-35077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35126-35170]:Block[35126-35170]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[35144-35156]:ReturnStatement[35144-35156]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35186-35307]:Block[35186-35307]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[35251-35264]:ReturnStatement[35251-35264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35452-35487]:Block[35452-35487]"
    }, {
      "left" : "return data.length;",
      "right" : "return data.length;",
      "info" : "ReturnStatement[35462-35481]:ReturnStatement[35462-35481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35635-35673]:Block[35635-35673]"
    }, {
      "left" : "return data[0].length;",
      "right" : "return data[0].length;",
      "info" : "ReturnStatement[35645-35667]:ReturnStatement[35645-35667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36022-36311]:Block[36022-36311]"
    }, {
      "left" : "if (!isSquare())",
      "right" : "if (!isSquare())",
      "info" : "IfStatement[36032-36132]:IfStatement[36032-36132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36049-36132]:Block[36049-36132]"
    }, {
      "left" : "throw new IllegalArgumentException(\"matrix is not square\");",
      "right" : "throw new IllegalArgumentException(\"matrix is not square\");",
      "info" : "ThrowStatement[36063-36122]:ThrowStatement[36063-36122]"
    }, {
      "left" : "BigDecimal trace = data[0][0];",
      "right" : "BigDecimal trace = data[0][0];",
      "info" : "VariableDeclarationStatement[36141-36171]:VariableDeclarationStatement[36141-36171]"
    }, {
      "left" : "for (int i = 1; i < this.getRowDimension(); i++)",
      "right" : "for (int i = 1; i < this.getRowDimension(); i++)",
      "info" : "ForStatement[36180-36283]:ForStatement[36180-36283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36229-36283]:Block[36229-36283]"
    }, {
      "left" : "trace = trace.add(data[i][i]);",
      "right" : "trace = trace.add(data[i][i]);",
      "info" : "ExpressionStatement[36243-36273]:ExpressionStatement[36243-36273]"
    }, {
      "left" : "return trace;",
      "right" : "return trace;",
      "info" : "ReturnStatement[36292-36305]:ReturnStatement[36292-36305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37513-37704]:Block[37510-37701]"
    }, {
      "left" : "final BigDecimal bd[] = new BigDecimal[v.length];",
      "right" : "final BigDecimal bd[] = new BigDecimal[v.length];",
      "info" : "VariableDeclarationStatement[37523-37572]:VariableDeclarationStatement[37520-37569]"
    }, {
      "left" : "for (int i = 0; i < bd.length; i++)",
      "right" : "for (int i = 0; i < bd.length; i++)",
      "info" : "ForStatement[37581-37670]:ForStatement[37578-37667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37617-37670]:Block[37614-37667]"
    }, {
      "left" : "bd[i] = new BigDecimal(v[i]);",
      "right" : "bd[i] = new BigDecimal(v[i]);",
      "info" : "ExpressionStatement[37631-37660]:ExpressionStatement[37628-37657]"
    }, {
      "left" : "return operate(bd);",
      "right" : "return operate(bd);",
      "info" : "ReturnStatement[37679-37698]:ReturnStatement[37676-37695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38048-38593]:Block[38045-38590]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[38058-38099]:VariableDeclarationStatement[38055-38096]"
    }, {
      "left" : "if (v.length != nRows)",
      "right" : "if (v.length != nRows)",
      "info" : "IfStatement[38108-38217]:IfStatement[38105-38214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38131-38217]:Block[38128-38214]"
    }, {
      "left" : "throw new IllegalArgumentException(\"vector has wrong length\");",
      "right" : "throw new IllegalArgumentException(\"vector has wrong length\");",
      "info" : "ThrowStatement[38145-38207]:ThrowStatement[38142-38204]"
    }, {
      "left" : "final int nCols = this.getColumnDimension();",
      "right" : "final int nCols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[38226-38270]:VariableDeclarationStatement[38223-38267]"
    }, {
      "left" : "final BigDecimal[] out = new BigDecimal[nCols];",
      "right" : "final BigDecimal[] out = new BigDecimal[nCols];",
      "info" : "VariableDeclarationStatement[38279-38326]:VariableDeclarationStatement[38276-38323]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[38335-38567]:ForStatement[38332-38564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38373-38567]:Block[38370-38564]"
    }, {
      "left" : "BigDecimal sum = ZERO;",
      "right" : "BigDecimal sum = ZERO;",
      "info" : "VariableDeclarationStatement[38387-38409]:VariableDeclarationStatement[38384-38406]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[38422-38529]:ForStatement[38419-38526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38454-38529]:Block[38451-38526]"
    }, {
      "left" : "sum = sum.add(data[i][col].multiply(v[i]));",
      "right" : "sum = sum.add(data[i][col].multiply(v[i]));",
      "info" : "ExpressionStatement[38472-38515]:ExpressionStatement[38469-38512]"
    }, {
      "left" : "out[col] = sum;",
      "right" : "out[col] = sum;",
      "info" : "ExpressionStatement[38542-38557]:ExpressionStatement[38539-38554]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[38576-38587]:ReturnStatement[38573-38584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39167-39671]:Block[39164-39668]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[39177-39218]:VariableDeclarationStatement[39174-39215]"
    }, {
      "left" : "if (b.length != nRows)",
      "right" : "if (b.length != nRows)",
      "info" : "IfStatement[39227-39345]:IfStatement[39224-39342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39250-39345]:Block[39247-39342]"
    }, {
      "left" : "throw new IllegalArgumentException(\"constant vector has wrong length\");",
      "right" : "throw new IllegalArgumentException(\"constant vector has wrong length\");",
      "info" : "ThrowStatement[39264-39335]:ThrowStatement[39261-39332]"
    }, {
      "left" : "final BigMatrix bMatrix = new BigMatrixImpl(b);",
      "right" : "final BigMatrix bMatrix = new BigMatrixImpl(b);",
      "info" : "VariableDeclarationStatement[39354-39401]:VariableDeclarationStatement[39351-39398]"
    }, {
      "left" : "final BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();",
      "right" : "final BigDecimal[][] solution = ((BigMatrixImpl) (solve(bMatrix))).getDataRef();",
      "info" : "VariableDeclarationStatement[39410-39490]:VariableDeclarationStatement[39407-39487]"
    }, {
      "left" : "final BigDecimal[] out = new BigDecimal[nRows];",
      "right" : "final BigDecimal[] out = new BigDecimal[nRows];",
      "info" : "VariableDeclarationStatement[39499-39546]:VariableDeclarationStatement[39496-39543]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[39555-39645]:ForStatement[39552-39642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39593-39645]:Block[39590-39642]"
    }, {
      "left" : "out[row] = solution[row][0];",
      "right" : "out[row] = solution[row][0];",
      "info" : "ExpressionStatement[39607-39635]:ExpressionStatement[39604-39632]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[39654-39665]:ReturnStatement[39651-39662]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40241-40430]:Block[40238-40427]"
    }, {
      "left" : "final BigDecimal bd[] = new BigDecimal[b.length];",
      "right" : "final BigDecimal bd[] = new BigDecimal[b.length];",
      "info" : "VariableDeclarationStatement[40251-40300]:VariableDeclarationStatement[40248-40297]"
    }, {
      "left" : "for (int i = 0; i < bd.length; i++)",
      "right" : "for (int i = 0; i < bd.length; i++)",
      "info" : "ForStatement[40309-40398]:ForStatement[40306-40395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40345-40398]:Block[40342-40395]"
    }, {
      "left" : "bd[i] = new BigDecimal(b[i]);",
      "right" : "bd[i] = new BigDecimal(b[i]);",
      "info" : "ExpressionStatement[40359-40388]:ExpressionStatement[40356-40385]"
    }, {
      "left" : "return solve(bd);",
      "right" : "return solve(bd);",
      "info" : "ReturnStatement[40407-40424]:ReturnStatement[40404-40421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41019-43014]:Block[41016-43011]"
    }, {
      "left" : "if (b.getRowDimension() != this.getRowDimension())",
      "right" : "if (b.getRowDimension() != this.getRowDimension())",
      "info" : "IfStatement[41029-41166]:IfStatement[41026-41163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41080-41166]:Block[41077-41163]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Incorrect row dimension\");",
      "right" : "throw new IllegalArgumentException(\"Incorrect row dimension\");",
      "info" : "ThrowStatement[41094-41156]:ThrowStatement[41091-41153]"
    }, {
      "left" : "if (!this.isSquare())",
      "right" : "if (!this.isSquare())",
      "info" : "IfStatement[41175-41290]:IfStatement[41172-41287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41197-41290]:Block[41194-41287]"
    }, {
      "left" : "throw new InvalidMatrixException(\"coefficient matrix is not square\");",
      "right" : "throw new InvalidMatrixException(\"coefficient matrix is not square\");",
      "info" : "ThrowStatement[41211-41280]:ThrowStatement[41208-41277]"
    }, {
      "left" : "if (this.isSingular())",
      "right" : "if (this.isSingular())",
      "info" : "IfStatement[41299-41436]:IfStatement[41296-41433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41322-41436]:Block[41319-41433]"
    }, {
      "left" : "throw new InvalidMatrixException(\"Matrix is singular.\");",
      "right" : "throw new InvalidMatrixException(\"Matrix is singular.\");",
      "info" : "ThrowStatement[41370-41426]:ThrowStatement[41367-41423]"
    }, {
      "left" : "final int nCol = this.getColumnDimension();",
      "right" : "final int nCol = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[41454-41497]:VariableDeclarationStatement[41451-41494]"
    }, {
      "left" : "final int nColB = b.getColumnDimension();",
      "right" : "final int nColB = b.getColumnDimension();",
      "info" : "VariableDeclarationStatement[41506-41547]:VariableDeclarationStatement[41503-41544]"
    }, {
      "left" : "final int nRowB = b.getRowDimension();",
      "right" : "final int nRowB = b.getRowDimension();",
      "info" : "VariableDeclarationStatement[41556-41594]:VariableDeclarationStatement[41553-41591]"
    }, {
      "left" : "final BigDecimal[][] bp = new BigDecimal[nRowB][nColB];",
      "right" : "final BigDecimal[][] bp = new BigDecimal[nRowB][nColB];",
      "info" : "VariableDeclarationStatement[41647-41702]:VariableDeclarationStatement[41644-41699]"
    }, {
      "left" : "for (int row = 0; row < nRowB; row++)",
      "right" : "for (int row = 0; row < nRowB; row++)",
      "info" : "ForStatement[41711-41938]:ForStatement[41708-41935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41749-41938]:Block[41746-41935]"
    }, {
      "left" : "final BigDecimal[] bpRow = bp[row];",
      "right" : "final BigDecimal[] bpRow = bp[row];",
      "info" : "VariableDeclarationStatement[41763-41798]:VariableDeclarationStatement[41760-41795]"
    }, {
      "left" : "for (int col = 0; col < nColB; col++)",
      "right" : "for (int col = 0; col < nColB; col++)",
      "info" : "ForStatement[41811-41928]:ForStatement[41808-41925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41849-41928]:Block[41846-41925]"
    }, {
      "left" : "bpRow[col] = b.getEntry(permutation[row], col);",
      "right" : "bpRow[col] = b.getEntry(permutation[row], col);",
      "info" : "ExpressionStatement[41867-41914]:ExpressionStatement[41864-41911]"
    }, {
      "left" : "for (int col = 0; col < nCol; col++)",
      "right" : "for (int col = 0; col < nCol; col++)",
      "info" : "ForStatement[41980-42334]:ForStatement[41977-42331]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42017-42334]:Block[42014-42331]"
    }, {
      "left" : "for (int i = col + 1; i < nCol; i++)",
      "right" : "for (int i = col + 1; i < nCol; i++)",
      "info" : "ForStatement[42031-42324]:ForStatement[42028-42321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42068-42324]:Block[42065-42321]"
    }, {
      "left" : "final BigDecimal[] bpI = bp[i];",
      "right" : "final BigDecimal[] bpI = bp[i];",
      "info" : "VariableDeclarationStatement[42086-42117]:VariableDeclarationStatement[42083-42114]"
    }, {
      "left" : "final BigDecimal[] luI = lu[i];",
      "right" : "final BigDecimal[] luI = lu[i];",
      "info" : "VariableDeclarationStatement[42134-42165]:VariableDeclarationStatement[42131-42162]"
    }, {
      "left" : "for (int j = 0; j < nColB; j++)",
      "right" : "for (int j = 0; j < nColB; j++)",
      "info" : "ForStatement[42182-42310]:ForStatement[42179-42307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42214-42310]:Block[42211-42307]"
    }, {
      "left" : "bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));",
      "right" : "bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));",
      "info" : "ExpressionStatement[42236-42292]:ExpressionStatement[42233-42289]"
    }, {
      "left" : "for (int col = nCol - 1; col >= 0; col--)",
      "right" : "for (int col = nCol - 1; col >= 0; col--)",
      "info" : "ForStatement[42376-42961]:ForStatement[42373-42958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42418-42961]:Block[42415-42958]"
    }, {
      "left" : "final BigDecimal[] bpCol = bp[col];",
      "right" : "final BigDecimal[] bpCol = bp[col];",
      "info" : "VariableDeclarationStatement[42432-42467]:VariableDeclarationStatement[42429-42464]"
    }, {
      "left" : "final BigDecimal luDiag = lu[col][col];",
      "right" : "final BigDecimal luDiag = lu[col][col];",
      "info" : "VariableDeclarationStatement[42480-42519]:VariableDeclarationStatement[42477-42516]"
    }, {
      "left" : "for (int j = 0; j < nColB; j++)",
      "right" : "for (int j = 0; j < nColB; j++)",
      "info" : "ForStatement[42532-42652]:ForStatement[42529-42649]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42564-42652]:Block[42561-42649]"
    }, {
      "left" : "bpCol[j] = bpCol[j].divide(luDiag, scale, roundingMode);",
      "right" : "bpCol[j] = bpCol[j].divide(luDiag, scale, roundingMode);",
      "info" : "ExpressionStatement[42582-42638]:ExpressionStatement[42579-42635]"
    }, {
      "left" : "for (int i = 0; i < col; i++)",
      "right" : "for (int i = 0; i < col; i++)",
      "info" : "ForStatement[42665-42951]:ForStatement[42662-42948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42695-42951]:Block[42692-42948]"
    }, {
      "left" : "final BigDecimal[] bpI = bp[i];",
      "right" : "final BigDecimal[] bpI = bp[i];",
      "info" : "VariableDeclarationStatement[42713-42744]:VariableDeclarationStatement[42710-42741]"
    }, {
      "left" : "final BigDecimal[] luI = lu[i];",
      "right" : "final BigDecimal[] luI = lu[i];",
      "info" : "VariableDeclarationStatement[42761-42792]:VariableDeclarationStatement[42758-42789]"
    }, {
      "left" : "for (int j = 0; j < nColB; j++)",
      "right" : "for (int j = 0; j < nColB; j++)",
      "info" : "ForStatement[42809-42937]:ForStatement[42806-42934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42841-42937]:Block[42838-42934]"
    }, {
      "left" : "bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));",
      "right" : "bpI[j] = bpI[j].subtract(bp[col][j].multiply(luI[col]));",
      "info" : "ExpressionStatement[42863-42919]:ExpressionStatement[42860-42916]"
    }, {
      "left" : "return new BigMatrixImpl(bp, false);",
      "right" : "return new BigMatrixImpl(bp, false);",
      "info" : "ReturnStatement[42971-43007]:ReturnStatement[42968-43004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43965-46701]:Block[43962-46698]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[43984-44025]:VariableDeclarationStatement[43981-44022]"
    }, {
      "left" : "final int nCols = this.getColumnDimension();",
      "right" : "final int nCols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[44034-44078]:VariableDeclarationStatement[44031-44075]"
    }, {
      "left" : "if (nRows != nCols)",
      "right" : "if (nRows != nCols)",
      "info" : "IfStatement[44087-44220]:IfStatement[44084-44217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44107-44220]:Block[44104-44217]"
    }, {
      "left" : "throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");",
      "right" : "throw new InvalidMatrixException(\"LU decomposition requires that the matrix be square.\");",
      "info" : "ThrowStatement[44121-44210]:ThrowStatement[44118-44207]"
    }, {
      "left" : "lu = this.getData();",
      "right" : "lu = this.getData();",
      "info" : "ExpressionStatement[44229-44249]:ExpressionStatement[44226-44246]"
    }, {
      "left" : "permutation = new int[nRows];",
      "right" : "permutation = new int[nRows];",
      "info" : "ExpressionStatement[44318-44347]:ExpressionStatement[44315-44344]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[44356-44441]:ForStatement[44353-44438]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44394-44441]:Block[44391-44438]"
    }, {
      "left" : "permutation[row] = row;",
      "right" : "permutation[row] = row;",
      "info" : "ExpressionStatement[44408-44431]:ExpressionStatement[44405-44428]"
    }, {
      "left" : "parity = 1;",
      "right" : "parity = 1;",
      "info" : "ExpressionStatement[44450-44461]:ExpressionStatement[44447-44458]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[44508-46686]:ForStatement[44505-46683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44546-46686]:Block[44543-46683]"
    }, {
      "left" : "BigDecimal sum = ZERO;",
      "right" : "BigDecimal sum = ZERO;",
      "info" : "VariableDeclarationStatement[44573-44595]:VariableDeclarationStatement[44570-44592]"
    }, {
      "left" : "for (int row = 0; row < col; row++)",
      "right" : "for (int row = 0; row < col; row++)",
      "info" : "ForStatement[44642-44950]:ForStatement[44639-44947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44678-44950]:Block[44675-44947]"
    }, {
      "left" : "final BigDecimal[] luRow = lu[row];",
      "right" : "final BigDecimal[] luRow = lu[row];",
      "info" : "VariableDeclarationStatement[44696-44731]:VariableDeclarationStatement[44693-44728]"
    }, {
      "left" : "sum = luRow[col];",
      "right" : "sum = luRow[col];",
      "info" : "ExpressionStatement[44748-44765]:ExpressionStatement[44745-44762]"
    }, {
      "left" : "for (int i = 0; i < row; i++)",
      "right" : "for (int i = 0; i < row; i++)",
      "info" : "ForStatement[44782-44902]:ForStatement[44779-44899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44812-44902]:Block[44809-44899]"
    }, {
      "left" : "sum = sum.subtract(luRow[i].multiply(lu[i][col]));",
      "right" : "sum = sum.subtract(luRow[i].multiply(lu[i][col]));",
      "info" : "ExpressionStatement[44834-44884]:ExpressionStatement[44831-44881]"
    }, {
      "left" : "luRow[col] = sum;",
      "right" : "luRow[col] = sum;",
      "info" : "ExpressionStatement[44919-44936]:ExpressionStatement[44916-44933]"
    }, {
      "left" : "int max = col;",
      "right" : "int max = col;",
      "info" : "VariableDeclarationStatement[44997-45011]:VariableDeclarationStatement[44994-45008]"
    }, {
      "left" : "BigDecimal largest = ZERO;",
      "right" : "BigDecimal largest = ZERO;",
      "info" : "VariableDeclarationStatement[45043-45069]:VariableDeclarationStatement[45040-45066]"
    }, {
      "left" : "for (int row = col; row < nRows; row++)",
      "right" : "for (int row = col; row < nRows; row++)",
      "info" : "ForStatement[45082-45610]:ForStatement[45079-45607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45122-45610]:Block[45119-45607]"
    }, {
      "left" : "final BigDecimal[] luRow = lu[row];",
      "right" : "final BigDecimal[] luRow = lu[row];",
      "info" : "VariableDeclarationStatement[45140-45175]:VariableDeclarationStatement[45137-45172]"
    }, {
      "left" : "sum = luRow[col];",
      "right" : "sum = luRow[col];",
      "info" : "ExpressionStatement[45192-45209]:ExpressionStatement[45189-45206]"
    }, {
      "left" : "for (int i = 0; i < col; i++)",
      "right" : "for (int i = 0; i < col; i++)",
      "info" : "ForStatement[45226-45346]:ForStatement[45223-45343]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45256-45346]:Block[45253-45343]"
    }, {
      "left" : "sum = sum.subtract(luRow[i].multiply(lu[i][col]));",
      "right" : "sum = sum.subtract(luRow[i].multiply(lu[i][col]));",
      "info" : "ExpressionStatement[45278-45328]:ExpressionStatement[45275-45325]"
    }, {
      "left" : "luRow[col] = sum;",
      "right" : "luRow[col] = sum;",
      "info" : "ExpressionStatement[45363-45380]:ExpressionStatement[45360-45377]"
    }, {
      "left" : "if (sum.abs().compareTo(largest) == 1)",
      "right" : "if (sum.abs().compareTo(largest) == 1)",
      "info" : "IfStatement[45466-45596]:IfStatement[45463-45593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45505-45596]:Block[45502-45593]"
    }, {
      "left" : "largest = sum.abs();",
      "right" : "largest = sum.abs();",
      "info" : "ExpressionStatement[45527-45547]:ExpressionStatement[45524-45544]"
    }, {
      "left" : "max = row;",
      "right" : "max = row;",
      "info" : "ExpressionStatement[45568-45578]:ExpressionStatement[45565-45575]"
    }, {
      "left" : "if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0)",
      "right" : "if (lu[max][col].abs().compareTo(TOO_SMALL) <= 0)",
      "info" : "IfStatement[45669-45833]:IfStatement[45666-45830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45719-45833]:Block[45716-45830]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[45737-45747]:ExpressionStatement[45734-45744]"
    }, {
      "left" : "throw new InvalidMatrixException(\"matrix is singular\");",
      "right" : "throw new InvalidMatrixException(\"matrix is singular\");",
      "info" : "ThrowStatement[45764-45819]:ThrowStatement[45761-45816]"
    }, {
      "left" : "if (max != col)",
      "right" : "if (max != col)",
      "info" : "IfStatement[45893-46325]:IfStatement[45890-46322]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45909-46325]:Block[45906-46322]"
    }, {
      "left" : "BigDecimal tmp = ZERO;",
      "right" : "BigDecimal tmp = ZERO;",
      "info" : "VariableDeclarationStatement[45927-45949]:VariableDeclarationStatement[45924-45946]"
    }, {
      "left" : "for (int i = 0; i < nCols; i++)",
      "right" : "for (int i = 0; i < nCols; i++)",
      "info" : "ForStatement[45966-46138]:ForStatement[45963-46135]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45998-46138]:Block[45995-46135]"
    }, {
      "left" : "tmp = lu[max][i];",
      "right" : "tmp = lu[max][i];",
      "info" : "ExpressionStatement[46020-46037]:ExpressionStatement[46017-46034]"
    }, {
      "left" : "lu[max][i] = lu[col][i];",
      "right" : "lu[max][i] = lu[col][i];",
      "info" : "ExpressionStatement[46058-46082]:ExpressionStatement[46055-46079]"
    }, {
      "left" : "lu[col][i] = tmp;",
      "right" : "lu[col][i] = tmp;",
      "info" : "ExpressionStatement[46103-46120]:ExpressionStatement[46100-46117]"
    }, {
      "left" : "int temp = permutation[max];",
      "right" : "int temp = permutation[max];",
      "info" : "VariableDeclarationStatement[46155-46183]:VariableDeclarationStatement[46152-46180]"
    }, {
      "left" : "permutation[max] = permutation[col];",
      "right" : "permutation[max] = permutation[col];",
      "info" : "ExpressionStatement[46200-46236]:ExpressionStatement[46197-46233]"
    }, {
      "left" : "permutation[col] = temp;",
      "right" : "permutation[col] = temp;",
      "info" : "ExpressionStatement[46253-46277]:ExpressionStatement[46250-46274]"
    }, {
      "left" : "parity = -parity;",
      "right" : "parity = -parity;",
      "info" : "ExpressionStatement[46294-46311]:ExpressionStatement[46291-46308]"
    }, {
      "left" : "final BigDecimal luDiag = lu[col][col];",
      "right" : "final BigDecimal luDiag = lu[col][col];",
      "info" : "VariableDeclarationStatement[46423-46462]:VariableDeclarationStatement[46420-46459]"
    }, {
      "left" : "for (int row = col + 1; row < nRows; row++)",
      "right" : "for (int row = col + 1; row < nRows; row++)",
      "info" : "ForStatement[46475-46663]:ForStatement[46472-46660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46519-46663]:Block[46516-46660]"
    }, {
      "left" : "final BigDecimal[] luRow = lu[row];",
      "right" : "final BigDecimal[] luRow = lu[row];",
      "info" : "VariableDeclarationStatement[46537-46572]:VariableDeclarationStatement[46534-46569]"
    }, {
      "left" : "luRow[col] = luRow[col].divide(luDiag, scale, roundingMode);",
      "right" : "luRow[col] = luRow[col].divide(luDiag, scale, roundingMode);",
      "info" : "ExpressionStatement[46589-46649]:ExpressionStatement[46586-46646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46859-47480]:Block[46856-47477]"
    }, {
      "left" : "StringBuffer res = new StringBuffer();",
      "right" : "StringBuffer res = new StringBuffer();",
      "info" : "VariableDeclarationStatement[46869-46907]:VariableDeclarationStatement[46866-46904]"
    }, {
      "left" : "res.append(\"BigMatrixImpl{\");",
      "right" : "res.append(\"BigMatrixImpl{\");",
      "info" : "ExpressionStatement[46916-46945]:ExpressionStatement[46913-46942]"
    }, {
      "left" : "if (data != null)",
      "right" : "if (data != null)",
      "info" : "IfStatement[46954-47418]:IfStatement[46951-47415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46972-47418]:Block[46969-47415]"
    }, {
      "left" : "for (int i = 0; i < data.length; i++)",
      "right" : "for (int i = 0; i < data.length; i++)",
      "info" : "ForStatement[46986-47407]:ForStatement[46983-47404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47024-47407]:Block[47021-47404]"
    }, {
      "left" : "if (i > 0)",
      "right" : "if (i > 0)",
      "info" : "IfStatement[47042-47109]:IfStatement[47039-47106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47053-47109]:Block[47050-47106]"
    }, {
      "left" : "res.append(\",\");",
      "right" : "res.append(\",\");",
      "info" : "ExpressionStatement[47075-47091]:ExpressionStatement[47072-47088]"
    }, {
      "left" : "res.append(\"{\");",
      "right" : "res.append(\"{\");",
      "info" : "ExpressionStatement[47126-47142]:ExpressionStatement[47123-47139]"
    }, {
      "left" : "for (int j = 0; j < data[0].length; j++)",
      "right" : "for (int j = 0; j < data[0].length; j++)",
      "info" : "ForStatement[47159-47359]:ForStatement[47156-47356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47200-47359]:Block[47197-47356]"
    }, {
      "left" : "if (j > 0)",
      "right" : "if (j > 0)",
      "info" : "IfStatement[47222-47297]:IfStatement[47219-47294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47233-47297]:Block[47230-47294]"
    }, {
      "left" : "res.append(\",\");",
      "right" : "res.append(\",\");",
      "info" : "ExpressionStatement[47259-47275]:ExpressionStatement[47256-47272]"
    }, {
      "left" : "res.append(data[i][j]);",
      "right" : "res.append(data[i][j]);",
      "info" : "ExpressionStatement[47318-47341]:ExpressionStatement[47315-47338]"
    }, {
      "left" : "res.append(\"}\");",
      "right" : "res.append(\"}\");",
      "info" : "ExpressionStatement[47377-47393]:ExpressionStatement[47374-47390]"
    }, {
      "left" : "res.append(\"}\");",
      "right" : "res.append(\"}\");",
      "info" : "ExpressionStatement[47427-47443]:ExpressionStatement[47424-47440]"
    }, {
      "left" : "return res.toString();",
      "right" : "return res.toString();",
      "info" : "ReturnStatement[47452-47474]:ReturnStatement[47449-47471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47901-48637]:Block[47898-48634]"
    }, {
      "left" : "if (object == this)",
      "right" : "if (object == this)",
      "info" : "IfStatement[47911-47968]:IfStatement[47908-47965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47932-47968]:Block[47929-47965]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47946-47958]:ReturnStatement[47943-47955]"
    }, {
      "left" : "if (object instanceof BigMatrixImpl == false)",
      "right" : "if (object instanceof BigMatrixImpl == false)",
      "info" : "IfStatement[47977-48060]:IfStatement[47974-48057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48023-48060]:Block[48020-48057]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48037-48050]:ReturnStatement[48034-48047]"
    }, {
      "left" : "final BigMatrix m = (BigMatrix) object;",
      "right" : "final BigMatrix m = (BigMatrix) object;",
      "info" : "VariableDeclarationStatement[48069-48108]:VariableDeclarationStatement[48066-48105]"
    }, {
      "left" : "final int nRows = getRowDimension();",
      "right" : "final int nRows = getRowDimension();",
      "info" : "VariableDeclarationStatement[48117-48153]:VariableDeclarationStatement[48114-48150]"
    }, {
      "left" : "final int nCols = getColumnDimension();",
      "right" : "final int nCols = getColumnDimension();",
      "info" : "VariableDeclarationStatement[48162-48201]:VariableDeclarationStatement[48159-48198]"
    }, {
      "left" : "if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows)",
      "right" : "if (m.getColumnDimension() != nCols || m.getRowDimension() != nRows)",
      "info" : "IfStatement[48210-48316]:IfStatement[48207-48313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48279-48316]:Block[48276-48313]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48293-48306]:ReturnStatement[48290-48303]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[48325-48610]:ForStatement[48322-48607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48363-48610]:Block[48360-48607]"
    }, {
      "left" : "final BigDecimal[] dataRow = data[row];",
      "right" : "final BigDecimal[] dataRow = data[row];",
      "info" : "VariableDeclarationStatement[48377-48416]:VariableDeclarationStatement[48374-48413]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[48429-48600]:ForStatement[48426-48597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48467-48600]:Block[48464-48597]"
    }, {
      "left" : "if (!dataRow[col].equals(m.getEntry(row, col)))",
      "right" : "if (!dataRow[col].equals(m.getEntry(row, col)))",
      "info" : "IfStatement[48485-48586]:IfStatement[48482-48583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48533-48586]:Block[48530-48583]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48555-48568]:ReturnStatement[48552-48565]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[48619-48631]:ReturnStatement[48616-48628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48771-49262]:Block[48768-49259]"
    }, {
      "left" : "int ret = 7;",
      "right" : "int ret = 7;",
      "info" : "VariableDeclarationStatement[48781-48793]:VariableDeclarationStatement[48778-48790]"
    }, {
      "left" : "final int nRows = getRowDimension();",
      "right" : "final int nRows = getRowDimension();",
      "info" : "VariableDeclarationStatement[48802-48838]:VariableDeclarationStatement[48799-48835]"
    }, {
      "left" : "final int nCols = getColumnDimension();",
      "right" : "final int nCols = getColumnDimension();",
      "info" : "VariableDeclarationStatement[48847-48886]:VariableDeclarationStatement[48844-48883]"
    }, {
      "left" : "ret = ret * 31 + nRows;",
      "right" : "ret = ret * 31 + nRows;",
      "info" : "ExpressionStatement[48895-48918]:ExpressionStatement[48892-48915]"
    }, {
      "left" : "ret = ret * 31 + nCols;",
      "right" : "ret = ret * 31 + nCols;",
      "info" : "ExpressionStatement[48927-48950]:ExpressionStatement[48924-48947]"
    }, {
      "left" : "for (int row = 0; row < nRows; row++)",
      "right" : "for (int row = 0; row < nRows; row++)",
      "info" : "ForStatement[48959-49233]:ForStatement[48956-49230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48997-49233]:Block[48994-49230]"
    }, {
      "left" : "final BigDecimal[] dataRow = data[row];",
      "right" : "final BigDecimal[] dataRow = data[row];",
      "info" : "VariableDeclarationStatement[49011-49050]:VariableDeclarationStatement[49008-49047]"
    }, {
      "left" : "for (int col = 0; col < nCols; col++)",
      "right" : "for (int col = 0; col < nCols; col++)",
      "info" : "ForStatement[49063-49223]:ForStatement[49060-49220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49101-49223]:Block[49098-49220]"
    }, {
      "left" : "ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * \n                dataRow[col].hashCode();",
      "right" : "ret = ret * 31 + (11 * (row+1) + 17 * (col+1)) * \n                dataRow[col].hashCode();",
      "info" : "ExpressionStatement[49119-49209]:ExpressionStatement[49116-49206]"
    }, {
      "left" : "return ret;",
      "right" : "return ret;",
      "info" : "ReturnStatement[49245-49256]:ReturnStatement[49242-49253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50757-50865]:Block[50754-50862]"
    }, {
      "left" : "if (lu == null)",
      "right" : "if (lu == null)",
      "info" : "IfStatement[50767-50821]:IfStatement[50764-50818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50783-50821]:Block[50780-50818]"
    }, {
      "left" : "luDecompose();",
      "right" : "luDecompose();",
      "info" : "ExpressionStatement[50797-50811]:ExpressionStatement[50794-50808]"
    }, {
      "left" : "return new BigMatrixImpl(lu);",
      "right" : "return new BigMatrixImpl(lu);",
      "info" : "ReturnStatement[50830-50859]:ReturnStatement[50827-50856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51340-51492]:Block[51337-51489]"
    }, {
      "left" : "final int[] out = new int[permutation.length];",
      "right" : "final int[] out = new int[permutation.length];",
      "info" : "VariableDeclarationStatement[51350-51396]:VariableDeclarationStatement[51347-51393]"
    }, {
      "left" : "System.arraycopy(permutation, 0, out, 0, permutation.length);",
      "right" : "System.arraycopy(permutation, 0, out, 0, permutation.length);",
      "info" : "ExpressionStatement[51405-51466]:ExpressionStatement[51402-51463]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[51475-51486]:ReturnStatement[51472-51483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51720-52077]:Block[51717-52074]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[51730-51771]:VariableDeclarationStatement[51727-51768]"
    }, {
      "left" : "final BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];",
      "right" : "final BigDecimal[][] out = new BigDecimal[nRows][this.getColumnDimension()];",
      "info" : "VariableDeclarationStatement[51780-51856]:VariableDeclarationStatement[51777-51853]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[51939-52051]:ForStatement[51936-52048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51971-52051]:Block[51968-52048]"
    }, {
      "left" : "System.arraycopy(data[i], 0, out[i], 0, data[i].length);",
      "right" : "System.arraycopy(data[i], 0, out[i], 0, data[i].length);",
      "info" : "ExpressionStatement[51985-52041]:ExpressionStatement[51982-52038]"
    }, {
      "left" : "return out;",
      "right" : "return out;",
      "info" : "ReturnStatement[52060-52071]:ReturnStatement[52057-52068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52475-52512]:Block[52472-52509]"
    }, {
      "left" : "setSubMatrix(in,0,0);",
      "right" : "setSubMatrix(in,0,0);",
      "info" : "ExpressionStatement[52485-52506]:ExpressionStatement[52482-52503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52672-53071]:Block[52669-53068]"
    }, {
      "left" : "final int nRows = in.length;",
      "right" : "final int nRows = in.length;",
      "info" : "VariableDeclarationStatement[52682-52710]:VariableDeclarationStatement[52679-52707]"
    }, {
      "left" : "final int nCols = in[0].length;",
      "right" : "final int nCols = in[0].length;",
      "info" : "VariableDeclarationStatement[52719-52750]:VariableDeclarationStatement[52716-52747]"
    }, {
      "left" : "data = new BigDecimal[nRows][nCols];",
      "right" : "data = new BigDecimal[nRows][nCols];",
      "info" : "ExpressionStatement[52759-52795]:ExpressionStatement[52756-52792]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[52804-53046]:ForStatement[52801-53043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52836-53046]:Block[52833-53043]"
    }, {
      "left" : "final BigDecimal[] dataI = data[i];",
      "right" : "final BigDecimal[] dataI = data[i];",
      "info" : "VariableDeclarationStatement[52850-52885]:VariableDeclarationStatement[52847-52882]"
    }, {
      "left" : "final double[] inI = in[i];",
      "right" : "final double[] inI = in[i];",
      "info" : "VariableDeclarationStatement[52898-52925]:VariableDeclarationStatement[52895-52922]"
    }, {
      "left" : "for (int j = 0; j < nCols; j++)",
      "right" : "for (int j = 0; j < nCols; j++)",
      "info" : "ForStatement[52938-53036]:ForStatement[52935-53033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52970-53036]:Block[52967-53033]"
    }, {
      "left" : "dataI[j] = new BigDecimal(inI[j]);",
      "right" : "dataI[j] = new BigDecimal(inI[j]);",
      "info" : "ExpressionStatement[52988-53022]:ExpressionStatement[52985-53019]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[53055-53065]:ExpressionStatement[53052-53062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53264-53663]:Block[53261-53660]"
    }, {
      "left" : "final int nRows = in.length;",
      "right" : "final int nRows = in.length;",
      "info" : "VariableDeclarationStatement[53274-53302]:VariableDeclarationStatement[53271-53299]"
    }, {
      "left" : "final int nCols = in[0].length;",
      "right" : "final int nCols = in[0].length;",
      "info" : "VariableDeclarationStatement[53311-53342]:VariableDeclarationStatement[53308-53339]"
    }, {
      "left" : "data = new BigDecimal[nRows][nCols];",
      "right" : "data = new BigDecimal[nRows][nCols];",
      "info" : "ExpressionStatement[53351-53387]:ExpressionStatement[53348-53384]"
    }, {
      "left" : "for (int i = 0; i < nRows; i++)",
      "right" : "for (int i = 0; i < nRows; i++)",
      "info" : "ForStatement[53396-53638]:ForStatement[53393-53635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53428-53638]:Block[53425-53635]"
    }, {
      "left" : "final BigDecimal[] dataI = data[i];",
      "right" : "final BigDecimal[] dataI = data[i];",
      "info" : "VariableDeclarationStatement[53442-53477]:VariableDeclarationStatement[53439-53474]"
    }, {
      "left" : "final String[] inI = in[i];",
      "right" : "final String[] inI = in[i];",
      "info" : "VariableDeclarationStatement[53490-53517]:VariableDeclarationStatement[53487-53514]"
    }, {
      "left" : "for (int j = 0; j < nCols; j++)",
      "right" : "for (int j = 0; j < nCols; j++)",
      "info" : "ForStatement[53530-53628]:ForStatement[53527-53625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53562-53628]:Block[53559-53625]"
    }, {
      "left" : "dataI[j] = new BigDecimal(inI[j]);",
      "right" : "dataI[j] = new BigDecimal(inI[j]);",
      "info" : "ExpressionStatement[53580-53614]:ExpressionStatement[53577-53611]"
    }, {
      "left" : "lu = null;",
      "right" : "lu = null;",
      "info" : "ExpressionStatement[53647-53657]:ExpressionStatement[53644-53654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53944-54124]:Block[53941-54121]"
    }, {
      "left" : "final int nRows = this.getRowDimension();",
      "right" : "final int nRows = this.getRowDimension();",
      "info" : "VariableDeclarationStatement[53954-53995]:VariableDeclarationStatement[53951-53992]"
    }, {
      "left" : "final int nCols = this.getColumnDimension();",
      "right" : "final int nCols = this.getColumnDimension();",
      "info" : "VariableDeclarationStatement[54004-54048]:VariableDeclarationStatement[54001-54045]"
    }, {
      "left" : "return !(row < 0 || row >= nRows || col < 0 || col >= nCols);",
      "right" : "return !(row < 0 || row >= nRows || col < 0 || col >= nCols);",
      "info" : "ReturnStatement[54057-54118]:ReturnStatement[54054-54115]"
    } ]
  },
  "interFileMappings" : { }
}