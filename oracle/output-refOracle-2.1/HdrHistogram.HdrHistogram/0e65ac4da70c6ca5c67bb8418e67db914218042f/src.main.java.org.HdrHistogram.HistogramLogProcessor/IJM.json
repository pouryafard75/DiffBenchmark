{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "HistogramLogProcessor",
      "right" : "HistogramLogProcessor",
      "info" : "TypeDeclaration[351-18388]:TypeDeclaration[351-18361]"
    }, {
      "left" : "public static final String versionString = \"Histogram Log Processor version \" + Version.version;",
      "right" : "public static final String versionString = \"Histogram Log Processor version \" + Version.version;",
      "info" : "FieldDeclaration[1963-2059]:FieldDeclaration[1963-2059]"
    }, {
      "left" : "private final HistogramLogProcessorConfiguration config;",
      "right" : "private final HistogramLogProcessorConfiguration config;",
      "info" : "FieldDeclaration[2065-2121]:FieldDeclaration[2065-2121]"
    }, {
      "left" : "private HistogramLogReader logReader;",
      "right" : "private HistogramLogReader logReader;",
      "info" : "FieldDeclaration[2127-2164]:FieldDeclaration[2127-2164]"
    }, {
      "left" : "HistogramLogProcessorConfiguration",
      "right" : "HistogramLogProcessorConfiguration",
      "info" : "TypeDeclaration[2170-6360]:TypeDeclaration[2170-6360]"
    }, {
      "left" : "public boolean verbose = false;",
      "right" : "public boolean verbose = false;",
      "info" : "FieldDeclaration[2236-2267]:FieldDeclaration[2236-2267]"
    }, {
      "left" : "public String outputFileName = null;",
      "right" : "public String outputFileName = null;",
      "info" : "FieldDeclaration[2276-2312]:FieldDeclaration[2276-2312]"
    }, {
      "left" : "public String inputFileName = null;",
      "right" : "public String inputFileName = null;",
      "info" : "FieldDeclaration[2321-2356]:FieldDeclaration[2321-2356]"
    }, {
      "left" : "public double rangeStartTimeSec = 0.0;",
      "right" : "public double rangeStartTimeSec = 0.0;",
      "info" : "FieldDeclaration[2366-2404]:FieldDeclaration[2366-2404]"
    }, {
      "left" : "public double rangeEndTimeSec = Double.MAX_VALUE;",
      "right" : "public double rangeEndTimeSec = Double.MAX_VALUE;",
      "info" : "FieldDeclaration[2413-2462]:FieldDeclaration[2413-2462]"
    }, {
      "left" : "public boolean logFormatCsv = false;",
      "right" : "public boolean logFormatCsv = false;",
      "info" : "FieldDeclaration[2472-2508]:FieldDeclaration[2472-2508]"
    }, {
      "left" : "public int percentilesOutputTicksPerHalf = 5;",
      "right" : "public int percentilesOutputTicksPerHalf = 5;",
      "info" : "FieldDeclaration[2518-2563]:FieldDeclaration[2518-2563]"
    }, {
      "left" : "public Double outputValueUnitRatio = 1000000.0;",
      "right" : "public Double outputValueUnitRatio = 1000000.0;",
      "info" : "FieldDeclaration[2572-2619]:FieldDeclaration[2572-2619]"
    }, {
      "left" : "public boolean error = false;",
      "right" : "public boolean error = false;",
      "info" : "FieldDeclaration[2666-2695]:FieldDeclaration[2666-2695]"
    }, {
      "left" : "public String errorMessage = \"\";",
      "right" : "public String errorMessage = \"\";",
      "info" : "FieldDeclaration[2704-2736]:FieldDeclaration[2704-2736]"
    }, {
      "left" : "public HistogramLogProcessorConfiguration(final String[] args)",
      "right" : "public HistogramLogProcessorConfiguration(final String[] args)",
      "info" : "MethodDeclaration[2746-6354]:MethodDeclaration[2746-6354]"
    }, {
      "left" : "private void outputTimeRange(final PrintStream log, final String title)",
      "right" : "private void outputTimeRange(final PrintStream log, final String title)",
      "info" : "MethodDeclaration[6366-6779]:MethodDeclaration[6366-6779]"
    }, {
      "left" : "private void outputStartTime(final PrintStream log, final Double startTime)",
      "right" : "private void outputStartTime(final PrintStream log, final Double startTime)",
      "info" : "MethodDeclaration[6785-7026]:MethodDeclaration[6785-7026]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[7032-16472]:MethodDeclaration[7653-16445]"
    }, {
      "left" : "public HistogramLogProcessor(final String[] args) throws FileNotFoundException",
      "right" : "public HistogramLogProcessor(final String[] args) throws FileNotFoundException",
      "info" : "MethodDeclaration[16478-17974]:MethodDeclaration[16451-17947]"
    }, {
      "left" : "public static void main(final String[] args)",
      "right" : "public static void main(final String[] args)",
      "info" : "MethodDeclaration[17980-18386]:MethodDeclaration[17953-18359]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2809-6354]:Block[2809-6354]"
    }, {
      "left" : "boolean askedForHelp= false;",
      "right" : "boolean askedForHelp= false;",
      "info" : "VariableDeclarationStatement[2823-2851]:VariableDeclarationStatement[2823-2851]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[2864-6344]:TryStatement[2864-6344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2868-4234]:Block[2868-4234]"
    }, {
      "left" : "for (int i = 0; i < args.length; ++i)",
      "right" : "for (int i = 0; i < args.length; ++i)",
      "info" : "ForStatement[2886-4219]:ForStatement[2886-4219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2924-4219]:Block[2924-4219]"
    }, {
      "left" : "if (args[i].equals(\"-csv\"))",
      "right" : "if (args[i].equals(\"-csv\"))",
      "info" : "IfStatement[2946-4201]:IfStatement[2946-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2974-3042]:Block[2974-3042]"
    }, {
      "left" : "logFormatCsv = true;",
      "right" : "logFormatCsv = true;",
      "info" : "ExpressionStatement[3000-3020]:ExpressionStatement[3000-3020]"
    }, {
      "left" : "if (args[i].equals(\"-v\"))",
      "right" : "if (args[i].equals(\"-v\"))",
      "info" : "IfStatement[3048-4201]:IfStatement[3048-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3074-3137]:Block[3074-3137]"
    }, {
      "left" : "verbose = true;",
      "right" : "verbose = true;",
      "info" : "ExpressionStatement[3100-3115]:ExpressionStatement[3100-3115]"
    }, {
      "left" : "if (args[i].equals(\"-i\"))",
      "right" : "if (args[i].equals(\"-i\"))",
      "info" : "IfStatement[3143-4201]:IfStatement[3143-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3169-3243]:Block[3169-3243]"
    }, {
      "left" : "inputFileName = args[++i];",
      "right" : "inputFileName = args[++i];",
      "info" : "ExpressionStatement[3195-3221]:ExpressionStatement[3195-3221]"
    }, {
      "left" : "if (args[i].equals(\"-start\"))",
      "right" : "if (args[i].equals(\"-start\"))",
      "info" : "IfStatement[3249-4201]:IfStatement[3249-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3279-3377]:Block[3279-3377]"
    }, {
      "left" : "rangeStartTimeSec = Double.parseDouble(args[++i]);",
      "right" : "rangeStartTimeSec = Double.parseDouble(args[++i]);",
      "info" : "ExpressionStatement[3305-3355]:ExpressionStatement[3305-3355]"
    }, {
      "left" : "if (args[i].equals(\"-end\"))",
      "right" : "if (args[i].equals(\"-end\"))",
      "info" : "IfStatement[3383-4201]:IfStatement[3383-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3411-3507]:Block[3411-3507]"
    }, {
      "left" : "rangeEndTimeSec = Double.parseDouble(args[++i]);",
      "right" : "rangeEndTimeSec = Double.parseDouble(args[++i]);",
      "info" : "ExpressionStatement[3437-3485]:ExpressionStatement[3437-3485]"
    }, {
      "left" : "if (args[i].equals(\"-o\"))",
      "right" : "if (args[i].equals(\"-o\"))",
      "info" : "IfStatement[3513-4201]:IfStatement[3513-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3539-3614]:Block[3539-3614]"
    }, {
      "left" : "outputFileName = args[++i];",
      "right" : "outputFileName = args[++i];",
      "info" : "ExpressionStatement[3565-3592]:ExpressionStatement[3565-3592]"
    }, {
      "left" : "if (args[i].equals(\"-percentilesOutputTicksPerHalf\"))",
      "right" : "if (args[i].equals(\"-percentilesOutputTicksPerHalf\"))",
      "info" : "IfStatement[3620-4201]:IfStatement[3620-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3674-3782]:Block[3674-3782]"
    }, {
      "left" : "percentilesOutputTicksPerHalf = Integer.parseInt(args[++i]);",
      "right" : "percentilesOutputTicksPerHalf = Integer.parseInt(args[++i]);",
      "info" : "ExpressionStatement[3700-3760]:ExpressionStatement[3700-3760]"
    }, {
      "left" : "if (args[i].equals(\"-outputValueUnitRatio\"))",
      "right" : "if (args[i].equals(\"-outputValueUnitRatio\"))",
      "info" : "IfStatement[3788-4201]:IfStatement[3788-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3833-3934]:Block[3833-3934]"
    }, {
      "left" : "outputValueUnitRatio = Double.parseDouble(args[++i]);",
      "right" : "outputValueUnitRatio = Double.parseDouble(args[++i]);",
      "info" : "ExpressionStatement[3859-3912]:ExpressionStatement[3859-3912]"
    }, {
      "left" : "if (args[i].equals(\"-h\"))",
      "right" : "if (args[i].equals(\"-h\"))",
      "info" : "IfStatement[3940-4201]:IfStatement[3940-4201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3966-4099]:Block[3966-4099]"
    }, {
      "left" : "askedForHelp = true;",
      "right" : "askedForHelp = true;",
      "info" : "ExpressionStatement[3992-4012]:ExpressionStatement[3992-4012]"
    }, {
      "left" : "throw new Exception(\"Help: \" + args[i]);",
      "right" : "throw new Exception(\"Help: \" + args[i]);",
      "info" : "ThrowStatement[4037-4077]:ThrowStatement[4037-4077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4105-4201]:Block[4105-4201]"
    }, {
      "left" : "throw new Exception(\"Invalid args: \" + args[i]);",
      "right" : "throw new Exception(\"Invalid args: \" + args[i]);",
      "info" : "ThrowStatement[4131-4179]:ThrowStatement[4131-4179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4255-6344]:Block[4255-6344]"
    }, {
      "left" : "error = true;",
      "right" : "error = true;",
      "info" : "ExpressionStatement[4273-4286]:ExpressionStatement[4273-4286]"
    }, {
      "left" : "errorMessage = \"Error: \" + versionString + \" launched with the following args:\\n\";",
      "right" : "errorMessage = \"Error: \" + versionString + \" launched with the following args:\\n\";",
      "info" : "ExpressionStatement[4303-4385]:ExpressionStatement[4303-4385]"
    }, {
      "left" : "for (String arg : args)",
      "right" : "for (String arg : args)",
      "info" : "EnhancedForStatement[4403-4493]:EnhancedForStatement[4403-4493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4427-4493]:Block[4427-4493]"
    }, {
      "left" : "errorMessage += arg + \" \";",
      "right" : "errorMessage += arg + \" \";",
      "info" : "ExpressionStatement[4449-4475]:ExpressionStatement[4449-4475]"
    }, {
      "left" : "if (!askedForHelp)",
      "right" : "if (!askedForHelp)",
      "info" : "IfStatement[4510-4717]:IfStatement[4510-4717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4529-4717]:Block[4529-4717]"
    }, {
      "left" : "errorMessage += \"\\nWhich was parsed as an error, indicated by the following exception:\\n\" + e;",
      "right" : "errorMessage += \"\\nWhich was parsed as an error, indicated by the following exception:\\n\" + e;",
      "info" : "ExpressionStatement[4551-4645]:ExpressionStatement[4551-4645]"
    }, {
      "left" : "System.err.println(errorMessage);",
      "right" : "System.err.println(errorMessage);",
      "info" : "ExpressionStatement[4666-4699]:ExpressionStatement[4666-4699]"
    }, {
      "left" : "final String validArgs =\n                        \"\\\"[-csv] [-v] [-i inputFileName] [-o outputFileName] \" +\n                                \"[-start rangeStartTimeSec] [-end rangeEndTimeSec] \" +\n                                \"[-outputValueUnitRatio r]\";",
      "right" : "final String validArgs =\n                        \"\\\"[-csv] [-v] [-i inputFileName] [-o outputFileName] \" +\n                                \"[-start rangeStartTimeSec] [-end rangeEndTimeSec] \" +\n                                \"[-outputValueUnitRatio r]\";",
      "info" : "VariableDeclarationStatement[4735-4989]:VariableDeclarationStatement[4735-4989]"
    }, {
      "left" : "System.err.println(\"valid arguments = \" + validArgs);",
      "right" : "System.err.println(\"valid arguments = \" + validArgs);",
      "info" : "ExpressionStatement[5007-5060]:ExpressionStatement[5007-5060]"
    }, {
      "left" : "System.err.println(\n                        \" [-h]                        help\\n\" +\n                                \" [-v]                        Provide verbose error output\\n\" +\n                                \" [-csv]                      Use CSV format for output log files\\n\" +\n                                \" [-i logFileName]            File name of Histogram Log to process (default is standard input)\\n\" +\n                                \" [-o outputFileName]         File name to output to (default is standard output)\\n\" +\n                                \"                             (will replace occurrences of %pid and %date with appropriate information)\\n\" +\n                                \" [-start rangeStartTimeSec]  The start time for the range in the file, in seconds (default 0.0)\\n\" +\n                                \" [-end rangeEndTimeSec]      The end time for the range in the file, in seconds (default is infinite)\\n\" +\n                                \" [-outputValueUnitRatio r]   The scaling factor by which to divide histogram recorded values units\\n\" +\n                                \"                             in output. [default = 1000000.0 (1 msec in nsec)]\\n\"\n                );",
      "right" : "System.err.println(\n                        \" [-h]                        help\\n\" +\n                                \" [-v]                        Provide verbose error output\\n\" +\n                                \" [-csv]                      Use CSV format for output log files\\n\" +\n                                \" [-i logFileName]            File name of Histogram Log to process (default is standard input)\\n\" +\n                                \" [-o outputFileName]         File name to output to (default is standard output)\\n\" +\n                                \"                             (will replace occurrences of %pid and %date with appropriate information)\\n\" +\n                                \" [-start rangeStartTimeSec]  The start time for the range in the file, in seconds (default 0.0)\\n\" +\n                                \" [-end rangeEndTimeSec]      The end time for the range in the file, in seconds (default is infinite)\\n\" +\n                                \" [-outputValueUnitRatio r]   The scaling factor by which to divide histogram recorded values units\\n\" +\n                                \"                             in output. [default = 1000000.0 (1 msec in nsec)]\\n\"\n                );",
      "info" : "ExpressionStatement[5078-6298]:ExpressionStatement[5078-6298]"
    }, {
      "left" : "System.exit(1);",
      "right" : "System.exit(1);",
      "info" : "ExpressionStatement[6315-6330]:ExpressionStatement[6315-6330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6438-6779]:Block[6438-6779]"
    }, {
      "left" : "log.format(Locale.US, \"#[%s between %.3f and\", title, config.rangeStartTimeSec);",
      "right" : "log.format(Locale.US, \"#[%s between %.3f and\", title, config.rangeStartTimeSec);",
      "info" : "ExpressionStatement[6448-6528]:ExpressionStatement[6448-6528]"
    }, {
      "left" : "if (config.rangeEndTimeSec < Double.MAX_VALUE)",
      "right" : "if (config.rangeEndTimeSec < Double.MAX_VALUE)",
      "info" : "IfStatement[6537-6714]:IfStatement[6537-6714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6584-6652]:Block[6584-6652]"
    }, {
      "left" : "log.format(\" %.3f\", config.rangeEndTimeSec);",
      "right" : "log.format(\" %.3f\", config.rangeEndTimeSec);",
      "info" : "ExpressionStatement[6598-6642]:ExpressionStatement[6598-6642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6658-6714]:Block[6658-6714]"
    }, {
      "left" : "log.format(\" %s\", \"<Infinite>\");",
      "right" : "log.format(\" %s\", \"<Infinite>\");",
      "info" : "ExpressionStatement[6672-6704]:ExpressionStatement[6672-6704]"
    }, {
      "left" : "log.format(\" seconds (relative to StartTime)]\\n\");",
      "right" : "log.format(\" seconds (relative to StartTime)]\\n\");",
      "info" : "ExpressionStatement[6723-6773]:ExpressionStatement[6723-6773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6861-7026]:Block[6861-7026]"
    }, {
      "left" : "log.format(Locale.US, \"#[StartTime: %.3f (seconds since epoch), %s]\\n\",\n                startTime, (new Date((long) (startTime * 1000))).toString());",
      "right" : "log.format(Locale.US, \"#[StartTime: %.3f (seconds since epoch), %s]\\n\",\n                startTime, (new Date((long) (startTime * 1000))).toString());",
      "info" : "ExpressionStatement[6871-7020]:ExpressionStatement[6871-7020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7148-16472]:Block[7769-16445]"
    }, {
      "left" : "PrintStream timeIntervalLog = null;",
      "right" : "PrintStream timeIntervalLog = null;",
      "info" : "VariableDeclarationStatement[7158-7193]:VariableDeclarationStatement[7779-7814]"
    }, {
      "left" : "PrintStream histogramPercentileLog = System.out;",
      "right" : "PrintStream histogramPercentileLog = System.out;",
      "info" : "VariableDeclarationStatement[7202-7250]:VariableDeclarationStatement[7823-7871]"
    }, {
      "left" : "Double firstStartTime = 0.0;",
      "right" : "Double firstStartTime = 0.0;",
      "info" : "VariableDeclarationStatement[7259-7287]:VariableDeclarationStatement[7880-7908]"
    }, {
      "left" : "boolean timeIntervalLogLegendWritten = false;",
      "right" : "boolean timeIntervalLogLegendWritten = false;",
      "info" : "VariableDeclarationStatement[7296-7341]:VariableDeclarationStatement[7917-7962]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7378-16466]:TryStatement[7971-16439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7382-16294]:Block[7975-16267]"
    }, {
      "left" : "if (config.outputFileName != null)",
      "right" : "if (config.outputFileName != null)",
      "info" : "IfStatement[7396-8313]:IfStatement[7989-8906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7431-8313]:Block[8024-8906]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7449-7808]:TryStatement[8042-8401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7453-7660]:Block[8046-8253]"
    }, {
      "left" : "timeIntervalLog = new PrintStream(new FileOutputStream(config.outputFileName), false);",
      "right" : "timeIntervalLog = new PrintStream(new FileOutputStream(config.outputFileName), false);",
      "info" : "ExpressionStatement[7475-7561]:ExpressionStatement[8068-8154]"
    }, {
      "left" : "outputTimeRange(timeIntervalLog, \"Interval percentile log\");",
      "right" : "outputTimeRange(timeIntervalLog, \"Interval percentile log\");",
      "info" : "ExpressionStatement[7582-7642]:ExpressionStatement[8175-8235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7694-7808]:Block[8287-8401]"
    }, {
      "left" : "System.err.println(\"Failed to open output file \" + config.outputFileName);",
      "right" : "System.err.println(\"Failed to open output file \" + config.outputFileName);",
      "info" : "ExpressionStatement[7716-7790]:ExpressionStatement[8309-8383]"
    }, {
      "left" : "String hgrmOutputFileName = config.outputFileName + \".hgrm\";",
      "right" : "String hgrmOutputFileName = config.outputFileName + \".hgrm\";",
      "info" : "VariableDeclarationStatement[7825-7885]:VariableDeclarationStatement[8418-8478]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[7902-8299]:TryStatement[8495-8892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7906-8132]:Block[8499-8725]"
    }, {
      "left" : "histogramPercentileLog = new PrintStream(new FileOutputStream(hgrmOutputFileName), false);",
      "right" : "histogramPercentileLog = new PrintStream(new FileOutputStream(hgrmOutputFileName), false);",
      "info" : "ExpressionStatement[7928-8018]:ExpressionStatement[8521-8611]"
    }, {
      "left" : "outputTimeRange(histogramPercentileLog, \"Overall percentile distribution\");",
      "right" : "outputTimeRange(histogramPercentileLog, \"Overall percentile distribution\");",
      "info" : "ExpressionStatement[8039-8114]:ExpressionStatement[8632-8707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8166-8299]:Block[8759-8892]"
    }, {
      "left" : "System.err.println(\"Failed to open percentiles histogram output file \" + hgrmOutputFileName);",
      "right" : "System.err.println(\"Failed to open percentiles histogram output file \" + hgrmOutputFileName);",
      "info" : "ExpressionStatement[8188-8281]:ExpressionStatement[8781-8874]"
    }, {
      "left" : "final String logFormat;",
      "right" : "final String logFormat;",
      "info" : "VariableDeclarationStatement[8327-8350]:VariableDeclarationStatement[8920-8943]"
    }, {
      "left" : "if (config.logFormatCsv)",
      "right" : "if (config.logFormatCsv)",
      "info" : "IfStatement[8363-8625]:IfStatement[8956-9218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8388-8492]:Block[8981-9085]"
    }, {
      "left" : "logFormat = \"%.3f,%d,%.3f,%.3f,%.3f,%d,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\\n\";",
      "right" : "logFormat = \"%.3f,%d,%.3f,%.3f,%.3f,%d,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\\n\";",
      "info" : "ExpressionStatement[8406-8478]:ExpressionStatement[8999-9071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8498-8625]:Block[9091-9218]"
    }, {
      "left" : "logFormat = \"%4.3f: I:%d ( %7.3f %7.3f %7.3f ) T:%d ( %7.3f %7.3f %7.3f %7.3f %7.3f %7.3f )\\n\";",
      "right" : "logFormat = \"%4.3f: I:%d ( %7.3f %7.3f %7.3f ) T:%d ( %7.3f %7.3f %7.3f %7.3f %7.3f %7.3f )\\n\";",
      "info" : "ExpressionStatement[8516-8611]:ExpressionStatement[9109-9204]"
    }, {
      "left" : "EncodableHistogram intervalHistogram = logReader.nextIntervalHistogram(config.rangeStartTimeSec, config.rangeEndTimeSec);",
      "right" : "EncodableHistogram intervalHistogram = getIntervalHistogram();",
      "info" : "VariableDeclarationStatement[8640-8761]:VariableDeclarationStatement[9233-9295]"
    }, {
      "left" : "Histogram accumulatedRegularHistogram = null;",
      "right" : "Histogram accumulatedRegularHistogram = null;",
      "info" : "VariableDeclarationStatement[8776-8821]:VariableDeclarationStatement[9310-9355]"
    }, {
      "left" : "DoubleHistogram accumulatedDoubleHistogram = null;",
      "right" : "DoubleHistogram accumulatedDoubleHistogram = null;",
      "info" : "VariableDeclarationStatement[8834-8884]:VariableDeclarationStatement[9368-9418]"
    }, {
      "left" : "if (intervalHistogram != null)",
      "right" : "if (intervalHistogram != null)",
      "info" : "IfStatement[8898-9605]:IfStatement[9432-10139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8929-9605]:Block[9463-10139]"
    }, {
      "left" : "if (intervalHistogram instanceof DoubleHistogram)",
      "right" : "if (intervalHistogram instanceof DoubleHistogram)",
      "info" : "IfStatement[9062-9591]:IfStatement[9596-10125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9112-9350]:Block[9646-9884]"
    }, {
      "left" : "accumulatedDoubleHistogram = ((DoubleHistogram) intervalHistogram).copy();",
      "right" : "accumulatedDoubleHistogram = ((DoubleHistogram) intervalHistogram).copy();",
      "info" : "ExpressionStatement[9134-9208]:ExpressionStatement[9668-9742]"
    }, {
      "left" : "accumulatedDoubleHistogram.reset();",
      "right" : "accumulatedDoubleHistogram.reset();",
      "info" : "ExpressionStatement[9229-9264]:ExpressionStatement[9763-9798]"
    }, {
      "left" : "accumulatedDoubleHistogram.setAutoResize(true);",
      "right" : "accumulatedDoubleHistogram.setAutoResize(true);",
      "info" : "ExpressionStatement[9285-9332]:ExpressionStatement[9819-9866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9356-9591]:Block[9890-10125]"
    }, {
      "left" : "accumulatedRegularHistogram = ((Histogram) intervalHistogram).copy();",
      "right" : "accumulatedRegularHistogram = ((Histogram) intervalHistogram).copy();",
      "info" : "ExpressionStatement[9378-9447]:ExpressionStatement[9912-9981]"
    }, {
      "left" : "accumulatedRegularHistogram.reset();",
      "right" : "accumulatedRegularHistogram.reset();",
      "info" : "ExpressionStatement[9468-9504]:ExpressionStatement[10002-10038]"
    }, {
      "left" : "accumulatedRegularHistogram.setAutoResize(true);",
      "right" : "accumulatedRegularHistogram.setAutoResize(true);",
      "info" : "ExpressionStatement[9525-9573]:ExpressionStatement[10059-10107]"
    }, {
      "left" : "while (intervalHistogram != null)",
      "right" : "while (intervalHistogram != null)",
      "info" : "WhileStatement[9619-15422]:WhileStatement[10153-15395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9653-15422]:Block[10187-15395]"
    }, {
      "left" : "if (intervalHistogram instanceof DoubleHistogram)",
      "right" : "if (intervalHistogram instanceof DoubleHistogram)",
      "info" : "IfStatement[9671-10345]:IfStatement[10205-10879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9721-10032]:Block[10255-10566]"
    }, {
      "left" : "if (accumulatedDoubleHistogram == null)",
      "right" : "if (accumulatedDoubleHistogram == null)",
      "info" : "IfStatement[9743-9925]:IfStatement[10277-10459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9783-9925]:Block[10317-10459]"
    }, {
      "left" : "throw new IllegalStateException(\"Encountered a DoubleHistogram line in a log of Histograms.\");",
      "right" : "throw new IllegalStateException(\"Encountered a DoubleHistogram line in a log of Histograms.\");",
      "info" : "ThrowStatement[9809-9903]:ThrowStatement[10343-10437]"
    }, {
      "left" : "accumulatedDoubleHistogram.add((DoubleHistogram) intervalHistogram);",
      "right" : "accumulatedDoubleHistogram.add((DoubleHistogram) intervalHistogram);",
      "info" : "ExpressionStatement[9946-10014]:ExpressionStatement[10480-10548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10038-10345]:Block[10572-10879]"
    }, {
      "left" : "if (accumulatedRegularHistogram == null)",
      "right" : "if (accumulatedRegularHistogram == null)",
      "info" : "IfStatement[10060-10243]:IfStatement[10594-10777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10101-10243]:Block[10635-10777]"
    }, {
      "left" : "throw new IllegalStateException(\"Encountered a Histogram line in a log of DoubleHistograms.\");",
      "right" : "throw new IllegalStateException(\"Encountered a Histogram line in a log of DoubleHistograms.\");",
      "info" : "ThrowStatement[10127-10221]:ThrowStatement[10661-10755]"
    }, {
      "left" : "accumulatedRegularHistogram.add((Histogram) intervalHistogram);",
      "right" : "accumulatedRegularHistogram.add((Histogram) intervalHistogram);",
      "info" : "ExpressionStatement[10264-10327]:ExpressionStatement[10798-10861]"
    }, {
      "left" : "if ((firstStartTime == 0.0) && (logReader.getStartTimeSec() != 0.0))",
      "right" : "if ((firstStartTime == 0.0) && (logReader.getStartTimeSec() != 0.0))",
      "info" : "IfStatement[10363-10743]:IfStatement[10897-11277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10432-10743]:Block[10966-11277]"
    }, {
      "left" : "firstStartTime = logReader.getStartTimeSec();",
      "right" : "firstStartTime = logReader.getStartTimeSec();",
      "info" : "ExpressionStatement[10454-10499]:ExpressionStatement[10988-11033]"
    }, {
      "left" : "outputStartTime(histogramPercentileLog, firstStartTime);",
      "right" : "outputStartTime(histogramPercentileLog, firstStartTime);",
      "info" : "ExpressionStatement[10521-10577]:ExpressionStatement[11055-11111]"
    }, {
      "left" : "if (timeIntervalLog != null)",
      "right" : "if (timeIntervalLog != null)",
      "info" : "IfStatement[10599-10725]:IfStatement[11133-11259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10628-10725]:Block[11162-11259]"
    }, {
      "left" : "outputStartTime(timeIntervalLog, firstStartTime);",
      "right" : "outputStartTime(timeIntervalLog, firstStartTime);",
      "info" : "ExpressionStatement[10654-10703]:ExpressionStatement[11188-11237]"
    }, {
      "left" : "if (timeIntervalLog != null)",
      "right" : "if (timeIntervalLog != null)",
      "info" : "IfStatement[10761-14786]:IfStatement[11295-15320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10790-14786]:Block[11324-15320]"
    }, {
      "left" : "if (!timeIntervalLogLegendWritten)",
      "right" : "if (!timeIntervalLogLegendWritten)",
      "info" : "IfStatement[10812-11467]:IfStatement[11346-12001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10847-11467]:Block[11381-12001]"
    }, {
      "left" : "timeIntervalLogLegendWritten = true;",
      "right" : "timeIntervalLogLegendWritten = true;",
      "info" : "ExpressionStatement[10873-10909]:ExpressionStatement[11407-11443]"
    }, {
      "left" : "if (config.logFormatCsv)",
      "right" : "if (config.logFormatCsv)",
      "info" : "IfStatement[10934-11445]:IfStatement[11468-11979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10959-11252]:Block[11493-11786]"
    }, {
      "left" : "timeIntervalLog.println(\"\\\"Timestamp\\\",\\\"Int_Count\\\",\\\"Int_50%\\\",\\\"Int_90%\\\",\\\"Int_Max\\\",\\\"Total_Count\\\",\" +\n                                    \"\\\"Total_50%\\\",\\\"Total_90%\\\",\\\"Total_99%\\\",\\\"Total_99.9%\\\",\\\"Total_99.99%\\\",\\\"Total_Max\\\"\");",
      "right" : "timeIntervalLog.println(\"\\\"Timestamp\\\",\\\"Int_Count\\\",\\\"Int_50%\\\",\\\"Int_90%\\\",\\\"Int_Max\\\",\\\"Total_Count\\\",\" +\n                                    \"\\\"Total_50%\\\",\\\"Total_90%\\\",\\\"Total_99%\\\",\\\"Total_99.9%\\\",\\\"Total_99.99%\\\",\\\"Total_Max\\\"\");",
      "info" : "ExpressionStatement[10989-11226]:ExpressionStatement[11523-11760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11258-11445]:Block[11792-11979]"
    }, {
      "left" : "timeIntervalLog.println(\"Time: IntervalPercentiles:count ( 50% 90% Max ) TotalPercentiles:count ( 50% 90% 99% 99.9% 99.99% Max )\");",
      "right" : "timeIntervalLog.println(\"Time: IntervalPercentiles:count ( 50% 90% Max ) TotalPercentiles:count ( 50% 90% 99% 99.9% 99.99% Max )\");",
      "info" : "ExpressionStatement[11288-11419]:ExpressionStatement[11822-11953]"
    }, {
      "left" : "if (intervalHistogram instanceof DoubleHistogram)",
      "right" : "if (intervalHistogram instanceof DoubleHistogram)",
      "info" : "IfStatement[11489-14768]:IfStatement[12023-15302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11539-13159]:Block[12073-13693]"
    }, {
      "left" : "timeIntervalLog.format(Locale.US, logFormat,\n                                ((intervalHistogram.getEndTimeStamp() / 1000.0) - logReader.getStartTimeSec()),\n                                // values recorded during the last reporting interval\n                                ((DoubleHistogram) intervalHistogram).getTotalCount(),\n                                ((DoubleHistogram) intervalHistogram).getValueAtPercentile(50.0) / config.outputValueUnitRatio,\n                                ((DoubleHistogram) intervalHistogram).getValueAtPercentile(90.0) / config.outputValueUnitRatio,\n                                ((DoubleHistogram) intervalHistogram).getMaxValue() / config.outputValueUnitRatio,\n                                // values recorded from the beginning until now\n                                accumulatedDoubleHistogram.getTotalCount(),\n                                accumulatedDoubleHistogram.getValueAtPercentile(50.0) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getValueAtPercentile(90.0) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getValueAtPercentile(99.0) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getValueAtPercentile(99.9) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getValueAtPercentile(99.99) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getMaxValue() / config.outputValueUnitRatio\n                        );",
      "right" : "timeIntervalLog.format(Locale.US, logFormat,\n                                ((intervalHistogram.getEndTimeStamp() / 1000.0) - logReader.getStartTimeSec()),\n                                // values recorded during the last reporting interval\n                                ((DoubleHistogram) intervalHistogram).getTotalCount(),\n                                ((DoubleHistogram) intervalHistogram).getValueAtPercentile(50.0) / config.outputValueUnitRatio,\n                                ((DoubleHistogram) intervalHistogram).getValueAtPercentile(90.0) / config.outputValueUnitRatio,\n                                ((DoubleHistogram) intervalHistogram).getMaxValue() / config.outputValueUnitRatio,\n                                // values recorded from the beginning until now\n                                accumulatedDoubleHistogram.getTotalCount(),\n                                accumulatedDoubleHistogram.getValueAtPercentile(50.0) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getValueAtPercentile(90.0) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getValueAtPercentile(99.0) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getValueAtPercentile(99.9) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getValueAtPercentile(99.99) / config.outputValueUnitRatio,\n                                accumulatedDoubleHistogram.getMaxValue() / config.outputValueUnitRatio\n                        );",
      "info" : "ExpressionStatement[11565-13137]:ExpressionStatement[12099-13671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13165-14768]:Block[13699-15302]"
    }, {
      "left" : "timeIntervalLog.format(Locale.US, logFormat,\n                                ((intervalHistogram.getEndTimeStamp() / 1000.0) - logReader.getStartTimeSec()),\n                                // values recorded during the last reporting interval\n                                ((Histogram) intervalHistogram).getTotalCount(),\n                                ((Histogram) intervalHistogram).getValueAtPercentile(50.0) / config.outputValueUnitRatio,\n                                ((Histogram) intervalHistogram).getValueAtPercentile(90.0) / config.outputValueUnitRatio,\n                                ((Histogram) intervalHistogram).getMaxValue() / config.outputValueUnitRatio,\n                                // values recorded from the beginning until now\n                                accumulatedRegularHistogram.getTotalCount(),\n                                accumulatedRegularHistogram.getValueAtPercentile(50.0) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getValueAtPercentile(90.0) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getValueAtPercentile(99.0) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getValueAtPercentile(99.9) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getValueAtPercentile(99.99) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getMaxValue() / config.outputValueUnitRatio\n                        );",
      "right" : "timeIntervalLog.format(Locale.US, logFormat,\n                                ((intervalHistogram.getEndTimeStamp() / 1000.0) - logReader.getStartTimeSec()),\n                                // values recorded during the last reporting interval\n                                ((Histogram) intervalHistogram).getTotalCount(),\n                                ((Histogram) intervalHistogram).getValueAtPercentile(50.0) / config.outputValueUnitRatio,\n                                ((Histogram) intervalHistogram).getValueAtPercentile(90.0) / config.outputValueUnitRatio,\n                                ((Histogram) intervalHistogram).getMaxValue() / config.outputValueUnitRatio,\n                                // values recorded from the beginning until now\n                                accumulatedRegularHistogram.getTotalCount(),\n                                accumulatedRegularHistogram.getValueAtPercentile(50.0) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getValueAtPercentile(90.0) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getValueAtPercentile(99.0) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getValueAtPercentile(99.9) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getValueAtPercentile(99.99) / config.outputValueUnitRatio,\n                                accumulatedRegularHistogram.getMaxValue() / config.outputValueUnitRatio\n                        );",
      "info" : "ExpressionStatement[13191-14746]:ExpressionStatement[13725-15280]"
    }, {
      "left" : "lineNumber++;",
      "right" : "lineNumber++;",
      "info" : "ExpressionStatement[14804-14817]:ExpressionStatement[7603-7616]"
    }, {
      "left" : "intervalHistogram = logReader.nextIntervalHistogram(config.rangeStartTimeSec, config.rangeEndTimeSec);",
      "right" : "intervalHistogram = getIntervalHistogram();",
      "info" : "ExpressionStatement[14914-15016]:ExpressionStatement[15338-15381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15063-15408]:Block[7313-7594]"
    }, {
      "left" : "System.err.println(\"Log file parsing error at line number \" + lineNumber +\n                            \": line appears to be malformed.\");",
      "right" : "System.err.println(\"Log file parsing error at line number \" + lineNumber +\n                    \": line appears to be malformed.\");",
      "info" : "ExpressionStatement[15085-15223]:ExpressionStatement[7327-7457]"
    }, {
      "left" : "if (config.verbose)",
      "right" : "if (config.verbose)",
      "info" : "IfStatement[15244-15390]:IfStatement[7470-7584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15264-15321]:Block[7490-7531]"
    }, {
      "left" : "throw ex;",
      "right" : "throw ex;",
      "info" : "ThrowStatement[15290-15299]:ThrowStatement[7508-7517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15327-15390]:Block[7537-7584]"
    }, {
      "left" : "System.exit(1);",
      "right" : "System.exit(1);",
      "info" : "ExpressionStatement[15353-15368]:ExpressionStatement[7555-7570]"
    }, {
      "left" : "if (accumulatedDoubleHistogram != null)",
      "right" : "if (accumulatedDoubleHistogram != null)",
      "info" : "IfStatement[15436-16284]:IfStatement[15409-16257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15476-15700]:Block[15449-15673]"
    }, {
      "left" : "accumulatedDoubleHistogram.outputPercentileDistribution(histogramPercentileLog,\n                        config.percentilesOutputTicksPerHalf, config.outputValueUnitRatio, config.logFormatCsv);",
      "right" : "accumulatedDoubleHistogram.outputPercentileDistribution(histogramPercentileLog,\n                        config.percentilesOutputTicksPerHalf, config.outputValueUnitRatio, config.logFormatCsv);",
      "info" : "ExpressionStatement[15494-15686]:ExpressionStatement[15467-15659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15706-16284]:Block[15679-16257]"
    }, {
      "left" : "if (accumulatedRegularHistogram == null)",
      "right" : "if (accumulatedRegularHistogram == null)",
      "info" : "IfStatement[15724-16060]:IfStatement[15697-16033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15765-16060]:Block[15738-16033]"
    }, {
      "left" : "accumulatedRegularHistogram = new Histogram(1000000L, 2);",
      "right" : "accumulatedRegularHistogram = new Histogram(1000000L, 2);",
      "info" : "ExpressionStatement[15985-16042]:ExpressionStatement[15958-16015]"
    }, {
      "left" : "accumulatedRegularHistogram.outputPercentileDistribution(histogramPercentileLog,\n                        config.percentilesOutputTicksPerHalf, config.outputValueUnitRatio, config.logFormatCsv);",
      "right" : "accumulatedRegularHistogram.outputPercentileDistribution(histogramPercentileLog,\n                        config.percentilesOutputTicksPerHalf, config.outputValueUnitRatio, config.logFormatCsv);",
      "info" : "ExpressionStatement[16077-16270]:ExpressionStatement[16050-16243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16303-16466]:Block[16276-16439]"
    }, {
      "left" : "if (config.outputFileName != null)",
      "right" : "if (config.outputFileName != null)",
      "info" : "IfStatement[16317-16456]:IfStatement[16290-16429]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16352-16456]:Block[16325-16429]"
    }, {
      "left" : "timeIntervalLog.close();",
      "right" : "timeIntervalLog.close();",
      "info" : "ExpressionStatement[16370-16394]:ExpressionStatement[16343-16367]"
    }, {
      "left" : "histogramPercentileLog.close();",
      "right" : "histogramPercentileLog.close();",
      "info" : "ExpressionStatement[16411-16442]:ExpressionStatement[16384-16415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17657-17974]:Block[17630-17947]"
    }, {
      "left" : "this.setName(\"HistogramLogProcessor\");",
      "right" : "this.setName(\"HistogramLogProcessor\");",
      "info" : "ExpressionStatement[17667-17705]:ExpressionStatement[17640-17678]"
    }, {
      "left" : "config = new HistogramLogProcessorConfiguration(args);",
      "right" : "config = new HistogramLogProcessorConfiguration(args);",
      "info" : "ExpressionStatement[17714-17768]:ExpressionStatement[17687-17741]"
    }, {
      "left" : "if (config.inputFileName != null)",
      "right" : "if (config.inputFileName != null)",
      "info" : "IfStatement[17777-17968]:IfStatement[17750-17941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17811-17892]:Block[17784-17865]"
    }, {
      "left" : "logReader = new HistogramLogReader(config.inputFileName);",
      "right" : "logReader = new HistogramLogReader(config.inputFileName);",
      "info" : "ExpressionStatement[17825-17882]:ExpressionStatement[17798-17855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17898-17968]:Block[17871-17941]"
    }, {
      "left" : "logReader = new HistogramLogReader(System.in);",
      "right" : "logReader = new HistogramLogReader(System.in);",
      "info" : "ExpressionStatement[17912-17958]:ExpressionStatement[17885-17931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18113-18386]:Block[18086-18359]"
    }, {
      "left" : "final HistogramLogProcessor processor;",
      "right" : "final HistogramLogProcessor processor;",
      "info" : "VariableDeclarationStatement[18123-18161]:VariableDeclarationStatement[18096-18134]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[18170-18380]:TryStatement[18143-18353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18174-18273]:Block[18147-18246]"
    }, {
      "left" : "processor = new HistogramLogProcessor(args);",
      "right" : "processor = new HistogramLogProcessor(args);",
      "info" : "ExpressionStatement[18188-18232]:ExpressionStatement[18161-18205]"
    }, {
      "left" : "processor.start();",
      "right" : "processor.start();",
      "info" : "ExpressionStatement[18245-18263]:ExpressionStatement[18218-18236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18307-18380]:Block[18280-18353]"
    }, {
      "left" : "System.err.println(\"failed to open input file.\");",
      "right" : "System.err.println(\"failed to open input file.\");",
      "info" : "ExpressionStatement[18321-18370]:ExpressionStatement[18294-18343]"
    } ]
  },
  "interFileMappings" : { }
}