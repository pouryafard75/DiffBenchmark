{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "protected AbstractEstimator()",
      "right" : "protected AbstractEstimator()",
      "info" : "MethodDeclaration[1286-1402]:MethodDeclaration[1286-1402]"
    }, {
      "left" : "public final void setMaxCostEval(int maxCostEval)",
      "right" : "public final void setMaxCostEval(int maxCostEval)",
      "info" : "MethodDeclaration[1408-1679]:MethodDeclaration[1408-1679]"
    }, {
      "left" : "public final int getCostEvaluations()",
      "right" : "public final int getCostEvaluations()",
      "info" : "MethodDeclaration[1685-1873]:MethodDeclaration[1685-1873]"
    }, {
      "left" : "public final int getJacobianEvaluations()",
      "right" : "public final int getJacobianEvaluations()",
      "info" : "MethodDeclaration[1879-2084]:MethodDeclaration[1879-2084]"
    }, {
      "left" : "protected void updateJacobian()",
      "right" : "protected void updateJacobian()",
      "info" : "MethodDeclaration[2090-2568]:MethodDeclaration[2090-2568]"
    }, {
      "left" : "protected final void incrementJacobianEvaluationsCounter()",
      "right" : "protected final void incrementJacobianEvaluationsCounter()",
      "info" : "MethodDeclaration[2574-2736]:MethodDeclaration[2574-2736]"
    }, {
      "left" : "protected void updateResidualsAndCost()\n    throws EstimationException",
      "right" : "protected void updateResidualsAndCost()\n    throws EstimationException",
      "info" : "MethodDeclaration[2742-3591]:MethodDeclaration[2742-3591]"
    }, {
      "left" : "public double getRMS(EstimationProblem problem)",
      "right" : "public double getRMS(EstimationProblem problem)",
      "info" : "MethodDeclaration[3597-4436]:MethodDeclaration[3597-4436]"
    }, {
      "left" : "public double getChiSquare(EstimationProblem problem)",
      "right" : "public double getChiSquare(EstimationProblem problem)",
      "info" : "MethodDeclaration[4442-4916]:MethodDeclaration[4442-4916]"
    }, {
      "left" : "protected void initializeEstimate(EstimationProblem problem)",
      "right" : "protected void initializeEstimate(EstimationProblem problem)",
      "info" : "MethodDeclaration[7537-8385]:MethodDeclaration[7549-8397]"
    }, {
      "left" : "public abstract void estimate(EstimationProblem problem)\n    throws EstimationException;",
      "right" : "public abstract void estimate(EstimationProblem problem)\n    throws EstimationException;",
      "info" : "MethodDeclaration[8391-9079]:MethodDeclaration[8403-9091]"
    }, {
      "left" : "protected WeightedMeasurement[] measurements;",
      "right" : "protected WeightedMeasurement[] measurements;",
      "info" : "FieldDeclaration[9085-9164]:FieldDeclaration[9097-9176]"
    }, {
      "left" : "protected EstimatedParameter[] parameters;",
      "right" : "protected EstimatedParameter[] parameters;",
      "info" : "FieldDeclaration[9170-9244]:FieldDeclaration[9182-9256]"
    }, {
      "left" : "protected double[] jacobian;",
      "right" : "protected double[] jacobian;",
      "info" : "FieldDeclaration[9250-9576]:FieldDeclaration[9262-9588]"
    }, {
      "left" : "protected int cols;",
      "right" : "protected int cols;",
      "info" : "FieldDeclaration[9582-9654]:FieldDeclaration[9594-9666]"
    }, {
      "left" : "protected int rows;",
      "right" : "protected int rows;",
      "info" : "FieldDeclaration[9660-9729]:FieldDeclaration[9672-9741]"
    }, {
      "left" : "protected double[] residuals;",
      "right" : "protected double[] residuals;",
      "info" : "FieldDeclaration[9735-10053]:FieldDeclaration[9747-10065]"
    }, {
      "left" : "protected double cost;",
      "right" : "protected double cost;",
      "info" : "FieldDeclaration[10059-10146]:FieldDeclaration[10071-10158]"
    }, {
      "left" : "private int maxCostEval;",
      "right" : "private int maxCostEval;",
      "info" : "FieldDeclaration[10152-10231]:FieldDeclaration[10164-10243]"
    }, {
      "left" : "private int costEvaluations;",
      "right" : "private int costEvaluations;",
      "info" : "FieldDeclaration[10237-10304]:FieldDeclaration[10249-10316]"
    }, {
      "left" : "private int jacobianEvaluations;",
      "right" : "private int jacobianEvaluations;",
      "info" : "FieldDeclaration[10310-10385]:FieldDeclaration[10322-10397]"
    } ],
    "mappings" : [
 {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[1365-1374]:Modifier[1365-1374]"
    }, {
      "left" : "AbstractEstimator",
      "right" : "AbstractEstimator",
      "info" : "SimpleName[1375-1392]:SimpleName[1375-1392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1395-1402]:Block[1395-1402]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1582-1588]:Modifier[1582-1588]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1589-1594]:Modifier[1589-1594]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1595-1599]:PrimitiveType[1595-1599]"
    }, {
      "left" : "setMaxCostEval",
      "right" : "setMaxCostEval",
      "info" : "SimpleName[1600-1614]:SimpleName[1600-1614]"
    }, {
      "left" : "int maxCostEval",
      "right" : "int maxCostEval",
      "info" : "SingleVariableDeclaration[1615-1630]:SingleVariableDeclaration[1615-1630]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1632-1679]:Block[1632-1679]"
    }, {
      "left" : "this.maxCostEval = maxCostEval;",
      "right" : "this.maxCostEval = maxCostEval;",
      "info" : "ExpressionStatement[1642-1673]:ExpressionStatement[1642-1673]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1796-1802]:Modifier[1796-1802]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1803-1808]:Modifier[1803-1808]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1809-1812]:PrimitiveType[1809-1812]"
    }, {
      "left" : "getCostEvaluations",
      "right" : "getCostEvaluations",
      "info" : "SimpleName[1813-1831]:SimpleName[1813-1831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1834-1873]:Block[1834-1873]"
    }, {
      "left" : "return costEvaluations;",
      "right" : "return costEvaluations;",
      "info" : "ReturnStatement[1844-1867]:ReturnStatement[1844-1867]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1999-2005]:Modifier[1999-2005]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[2006-2011]:Modifier[2006-2011]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[2012-2015]:PrimitiveType[2012-2015]"
    }, {
      "left" : "getJacobianEvaluations",
      "right" : "getJacobianEvaluations",
      "info" : "SimpleName[2016-2038]:SimpleName[2016-2038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2041-2084]:Block[2041-2084]"
    }, {
      "left" : "return jacobianEvaluations;",
      "right" : "return jacobianEvaluations;",
      "info" : "ReturnStatement[2051-2078]:ReturnStatement[2051-2078]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2142-2151]:Modifier[2142-2151]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2152-2156]:PrimitiveType[2152-2156]"
    }, {
      "left" : "updateJacobian",
      "right" : "updateJacobian",
      "info" : "SimpleName[2157-2171]:SimpleName[2157-2171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2174-2568]:Block[2174-2568]"
    }, {
      "left" : "incrementJacobianEvaluationsCounter();",
      "right" : "incrementJacobianEvaluationsCounter();",
      "info" : "ExpressionStatement[2184-2222]:ExpressionStatement[2184-2222]"
    }, {
      "left" : "Arrays.fill(jacobian, 0);",
      "right" : "Arrays.fill(jacobian, 0);",
      "info" : "ExpressionStatement[2231-2256]:ExpressionStatement[2231-2256]"
    }, {
      "left" : "for (int i = 0, index = 0; i < rows; i++)",
      "right" : "for (int i = 0, index = 0; i < rows; i++)",
      "info" : "ForStatement[2265-2562]:ForStatement[2265-2562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2307-2562]:Block[2307-2562]"
    }, {
      "left" : "WeightedMeasurement wm = measurements[i];",
      "right" : "WeightedMeasurement wm = measurements[i];",
      "info" : "VariableDeclarationStatement[2321-2362]:VariableDeclarationStatement[2321-2362]"
    }, {
      "left" : "double factor = -Math.sqrt(wm.getWeight());",
      "right" : "double factor = -Math.sqrt(wm.getWeight());",
      "info" : "VariableDeclarationStatement[2375-2418]:VariableDeclarationStatement[2375-2418]"
    }, {
      "left" : "for (int j = 0; j < cols; ++j)",
      "right" : "for (int j = 0; j < cols; ++j)",
      "info" : "ForStatement[2431-2552]:ForStatement[2431-2552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2462-2552]:Block[2462-2552]"
    }, {
      "left" : "jacobian[index++] = factor * wm.getPartial(parameters[j]);",
      "right" : "jacobian[index++] = factor * wm.getPartial(parameters[j]);",
      "info" : "ExpressionStatement[2480-2538]:ExpressionStatement[2480-2538]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2641-2650]:Modifier[2641-2650]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[2651-2656]:Modifier[2651-2656]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2657-2661]:PrimitiveType[2657-2661]"
    }, {
      "left" : "incrementJacobianEvaluationsCounter",
      "right" : "incrementJacobianEvaluationsCounter",
      "info" : "SimpleName[2662-2697]:SimpleName[2662-2697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2700-2736]:Block[2700-2736]"
    }, {
      "left" : "++jacobianEvaluations;",
      "right" : "++jacobianEvaluations;",
      "info" : "ExpressionStatement[2708-2730]:ExpressionStatement[2708-2730]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[2925-2934]:Modifier[2925-2934]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2935-2939]:PrimitiveType[2935-2939]"
    }, {
      "left" : "updateResidualsAndCost",
      "right" : "updateResidualsAndCost",
      "info" : "SimpleName[2940-2962]:SimpleName[2940-2962]"
    }, {
      "left" : "EstimationException",
      "right" : "EstimationException",
      "info" : "SimpleType[2976-2995]:SimpleType[2976-2995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2996-3591]:Block[2996-3591]"
    }, {
      "left" : "if (++costEvaluations > maxCostEval)",
      "right" : "if (++costEvaluations > maxCostEval)",
      "info" : "IfStatement[3007-3231]:IfStatement[3007-3231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3044-3231]:Block[3044-3231]"
    }, {
      "left" : "throw new EstimationException(\"maximal number of evaluations exceeded ({0})\",\n                                          new Object[] { new Integer(maxCostEval) });",
      "right" : "throw new EstimationException(\"maximal number of evaluations exceeded ({0})\",\n                                          new Object[] { new Integer(maxCostEval) });",
      "info" : "ThrowStatement[3058-3221]:ThrowStatement[3058-3221]"
    }, {
      "left" : "cost = 0;",
      "right" : "cost = 0;",
      "info" : "ExpressionStatement[3241-3250]:ExpressionStatement[3241-3250]"
    }, {
      "left" : "for (int i = 0, index = 0; i < rows; i++, index += cols)",
      "right" : "for (int i = 0, index = 0; i < rows; i++, index += cols)",
      "info" : "ForStatement[3259-3552]:ForStatement[3259-3552]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3316-3552]:Block[3316-3552]"
    }, {
      "left" : "WeightedMeasurement wm = measurements[i];",
      "right" : "WeightedMeasurement wm = measurements[i];",
      "info" : "VariableDeclarationStatement[3330-3371]:VariableDeclarationStatement[3330-3371]"
    }, {
      "left" : "double residual = wm.getResidual();",
      "right" : "double residual = wm.getResidual();",
      "info" : "VariableDeclarationStatement[3384-3419]:VariableDeclarationStatement[3384-3419]"
    }, {
      "left" : "residuals[i] = Math.sqrt(wm.getWeight()) * residual;",
      "right" : "residuals[i] = Math.sqrt(wm.getWeight()) * residual;",
      "info" : "ExpressionStatement[3432-3484]:ExpressionStatement[3432-3484]"
    }, {
      "left" : "cost += wm.getWeight() * residual * residual;",
      "right" : "cost += wm.getWeight() * residual * residual;",
      "info" : "ExpressionStatement[3497-3542]:ExpressionStatement[3497-3542]"
    }, {
      "left" : "cost = Math.sqrt(cost);",
      "right" : "cost = Math.sqrt(cost);",
      "info" : "ExpressionStatement[3561-3584]:ExpressionStatement[3561-3584]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4067-4073]:Modifier[4067-4073]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[4074-4080]:PrimitiveType[4074-4080]"
    }, {
      "left" : "getRMS",
      "right" : "getRMS",
      "info" : "SimpleName[4081-4087]:SimpleName[4081-4087]"
    }, {
      "left" : "EstimationProblem problem",
      "right" : "EstimationProblem problem",
      "info" : "SingleVariableDeclaration[4088-4113]:SingleVariableDeclaration[4088-4113]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4115-4436]:Block[4115-4436]"
    }, {
      "left" : "WeightedMeasurement[] wm = problem.getMeasurements();",
      "right" : "WeightedMeasurement[] wm = problem.getMeasurements();",
      "info" : "VariableDeclarationStatement[4125-4178]:VariableDeclarationStatement[4125-4178]"
    }, {
      "left" : "double criterion = 0;",
      "right" : "double criterion = 0;",
      "info" : "VariableDeclarationStatement[4187-4208]:VariableDeclarationStatement[4187-4208]"
    }, {
      "left" : "for (int i = 0; i < wm.length; ++i)",
      "right" : "for (int i = 0; i < wm.length; ++i)",
      "info" : "ForStatement[4217-4381]:ForStatement[4217-4381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4253-4381]:Block[4253-4381]"
    }, {
      "left" : "double residual = wm[i].getResidual();",
      "right" : "double residual = wm[i].getResidual();",
      "info" : "VariableDeclarationStatement[4267-4305]:VariableDeclarationStatement[4267-4305]"
    }, {
      "left" : "criterion += wm[i].getWeight() * residual * residual;",
      "right" : "criterion += wm[i].getWeight() * residual * residual;",
      "info" : "ExpressionStatement[4318-4371]:ExpressionStatement[4318-4371]"
    }, {
      "left" : "return Math.sqrt(criterion / wm.length);",
      "right" : "return Math.sqrt(criterion / wm.length);",
      "info" : "ReturnStatement[4390-4430]:ReturnStatement[4390-4430]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4564-4570]:Modifier[4564-4570]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[4571-4577]:PrimitiveType[4571-4577]"
    }, {
      "left" : "getChiSquare",
      "right" : "getChiSquare",
      "info" : "SimpleName[4578-4590]:SimpleName[4578-4590]"
    }, {
      "left" : "EstimationProblem problem",
      "right" : "EstimationProblem problem",
      "info" : "SingleVariableDeclaration[4591-4616]:SingleVariableDeclaration[4591-4616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4618-4916]:Block[4618-4916]"
    }, {
      "left" : "WeightedMeasurement[] wm = problem.getMeasurements();",
      "right" : "WeightedMeasurement[] wm = problem.getMeasurements();",
      "info" : "VariableDeclarationStatement[4628-4681]:VariableDeclarationStatement[4628-4681]"
    }, {
      "left" : "double chiSquare = 0;",
      "right" : "double chiSquare = 0;",
      "info" : "VariableDeclarationStatement[4690-4711]:VariableDeclarationStatement[4690-4711]"
    }, {
      "left" : "for (int i = 0; i < wm.length; ++i)",
      "right" : "for (int i = 0; i < wm.length; ++i)",
      "info" : "ForStatement[4720-4884]:ForStatement[4720-4884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4756-4884]:Block[4756-4884]"
    }, {
      "left" : "double residual = wm[i].getResidual();",
      "right" : "double residual = wm[i].getResidual();",
      "info" : "VariableDeclarationStatement[4770-4808]:VariableDeclarationStatement[4770-4808]"
    }, {
      "left" : "chiSquare += residual * residual / wm[i].getWeight();",
      "right" : "chiSquare += residual * residual / wm[i].getWeight();",
      "info" : "ExpressionStatement[4821-4874]:ExpressionStatement[4821-4874]"
    }, {
      "left" : "return chiSquare;",
      "right" : "return chiSquare;",
      "info" : "ReturnStatement[4893-4910]:ReturnStatement[4893-4910]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7802-7811]:Modifier[7814-7823]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7812-7816]:PrimitiveType[7824-7828]"
    }, {
      "left" : "initializeEstimate",
      "right" : "initializeEstimate",
      "info" : "SimpleName[7817-7835]:SimpleName[7829-7847]"
    }, {
      "left" : "EstimationProblem problem",
      "right" : "EstimationProblem problem",
      "info" : "SingleVariableDeclaration[7836-7861]:SingleVariableDeclaration[7848-7873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7863-8385]:Block[7875-8397]"
    }, {
      "left" : "costEvaluations     = 0;",
      "right" : "costEvaluations     = 0;",
      "info" : "ExpressionStatement[7900-7924]:ExpressionStatement[7912-7936]"
    }, {
      "left" : "jacobianEvaluations = 0;",
      "right" : "jacobianEvaluations = 0;",
      "info" : "ExpressionStatement[7933-7957]:ExpressionStatement[7945-7969]"
    }, {
      "left" : "measurements = problem.getMeasurements();",
      "right" : "measurements = problem.getMeasurements();",
      "info" : "ExpressionStatement[8020-8061]:ExpressionStatement[8032-8073]"
    }, {
      "left" : "parameters   = problem.getUnboundParameters();",
      "right" : "parameters   = problem.getUnboundParameters();",
      "info" : "ExpressionStatement[8070-8116]:ExpressionStatement[8082-8128]"
    }, {
      "left" : "rows      = measurements.length;",
      "right" : "rows      = measurements.length;",
      "info" : "ExpressionStatement[8182-8214]:ExpressionStatement[8194-8226]"
    }, {
      "left" : "cols      = parameters.length;",
      "right" : "cols      = parameters.length;",
      "info" : "ExpressionStatement[8223-8253]:ExpressionStatement[8235-8265]"
    }, {
      "left" : "jacobian  = new double[rows * cols];",
      "right" : "jacobian  = new double[rows * cols];",
      "info" : "ExpressionStatement[8262-8298]:ExpressionStatement[8274-8310]"
    }, {
      "left" : "residuals = new double[rows];",
      "right" : "residuals = new double[rows];",
      "info" : "ExpressionStatement[8307-8336]:ExpressionStatement[8319-8348]"
    }, {
      "left" : "cost = Double.POSITIVE_INFINITY;",
      "right" : "cost = Double.POSITIVE_INFINITY;",
      "info" : "ExpressionStatement[8346-8378]:ExpressionStatement[8358-8390]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8991-8997]:Modifier[9003-9009]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[8998-9006]:Modifier[9010-9018]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9007-9011]:PrimitiveType[9019-9023]"
    }, {
      "left" : "estimate",
      "right" : "estimate",
      "info" : "SimpleName[9012-9020]:SimpleName[9024-9032]"
    }, {
      "left" : "EstimationProblem problem",
      "right" : "EstimationProblem problem",
      "info" : "SingleVariableDeclaration[9021-9046]:SingleVariableDeclaration[9033-9058]"
    }, {
      "left" : "EstimationException",
      "right" : "EstimationException",
      "info" : "SimpleType[9059-9078]:SimpleType[9071-9090]"
    } ]
  },
  "interFileMappings" : { }
}