{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public void hasSize()",
      "right" : "public void hasSize()",
      "info" : "MethodDeclaration[1295-1384]:MethodDeclaration[1236-1325]"
    }, {
      "left" : "public void hasSizeZero()",
      "right" : "public void hasSizeZero()",
      "info" : "MethodDeclaration[1388-1474]:MethodDeclaration[1329-1415]"
    }, {
      "left" : "public void hasSizeFails()",
      "right" : "public void hasSizeFails()",
      "info" : "MethodDeclaration[1478-1741]:MethodDeclaration[1419-1682]"
    }, {
      "left" : "public void hasSizeNegative()",
      "right" : "public void hasSizeNegative()",
      "info" : "MethodDeclaration[1745-1925]:MethodDeclaration[1686-1866]"
    }, {
      "left" : "public void arrayContainsExactly()",
      "right" : "public void arrayContainsExactly()",
      "info" : "MethodDeclaration[12276-12471]:MethodDeclaration[12043-12238]"
    }, {
      "left" : "HashCodeThrower",
      "right" : "HashCodeThrower",
      "info" : "TypeDeclaration[14550-14852]:TypeDeclaration[14285-14587]"
    }, {
      "left" : "public boolean equals(Object other)",
      "right" : "public boolean equals(Object other)",
      "info" : "MethodDeclaration[14593-14678]:MethodDeclaration[14328-14413]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[14684-14776]:MethodDeclaration[14419-14511]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[14782-14848]:MethodDeclaration[14517-14583]"
    }, {
      "left" : "public void iterableContainsExactlyElementsInErrorMessageIsOrdered()",
      "right" : "public void iterableContainsExactlyElementsInErrorMessageIsOrdered()",
      "info" : "MethodDeclaration[14856-15333]:MethodDeclaration[14591-15068]"
    } ],
    "mappings" : [
 {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1295-1300]:MarkerAnnotation[1236-1241]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1303-1309]:Modifier[1244-1250]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1310-1314]:PrimitiveType[1251-1255]"
    }, {
      "left" : "hasSize",
      "right" : "hasSize",
      "info" : "SimpleName[1315-1322]:SimpleName[1256-1263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1325-1384]:Block[1266-1325]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(3);",
      "info" : "ExpressionStatement[1331-1380]:ExpressionStatement[1272-1321]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1388-1393]:MarkerAnnotation[1329-1334]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1396-1402]:Modifier[1337-1343]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1403-1407]:PrimitiveType[1344-1348]"
    }, {
      "left" : "hasSizeZero",
      "right" : "hasSizeZero",
      "info" : "SimpleName[1408-1419]:SimpleName[1349-1360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1422-1474]:Block[1363-1415]"
    }, {
      "left" : "assertThat(ImmutableList.of()).hasSize(0);",
      "right" : "assertThat(ImmutableList.of()).hasSize(0);",
      "info" : "ExpressionStatement[1428-1470]:ExpressionStatement[1369-1411]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1478-1483]:MarkerAnnotation[1419-1424]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1486-1492]:Modifier[1427-1433]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1493-1497]:PrimitiveType[1434-1438]"
    }, {
      "left" : "hasSizeFails",
      "right" : "hasSizeFails",
      "info" : "SimpleName[1498-1510]:SimpleName[1439-1451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1513-1741]:Block[1454-1682]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1519-1737]:TryStatement[1460-1678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1523-1600]:Block[1464-1541]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(4);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(4);",
      "info" : "ExpressionStatement[1531-1580]:ExpressionStatement[1472-1521]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[1587-1594]:ExpressionStatement[1528-1535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1633-1737]:Block[1574-1678]"
    }, {
      "left" : "assertThat(expected).hasMessage(\"Not true that <[1, 2, 3]> has a size of <4>. It is <3>\");",
      "right" : "assertThat(expected).hasMessage(\"Not true that <[1, 2, 3]> has a size of <4>. It is <3>\");",
      "info" : "ExpressionStatement[1641-1731]:ExpressionStatement[1582-1672]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[1745-1750]:MarkerAnnotation[1686-1691]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1753-1759]:Modifier[1694-1700]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1760-1764]:PrimitiveType[1701-1705]"
    }, {
      "left" : "hasSizeNegative",
      "right" : "hasSizeNegative",
      "info" : "SimpleName[1765-1780]:SimpleName[1706-1721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1783-1925]:Block[1724-1866]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1789-1921]:TryStatement[1730-1862]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1793-1871]:Block[1734-1812]"
    }, {
      "left" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);",
      "right" : "assertThat(ImmutableList.of(1, 2, 3)).hasSize(-1);",
      "info" : "ExpressionStatement[1801-1851]:ExpressionStatement[1742-1792]"
    }, {
      "left" : "fail();",
      "right" : "fail();",
      "info" : "ExpressionStatement[1858-1865]:ExpressionStatement[1799-1806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1914-1921]:Block[1855-1862]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[12276-12281]:MarkerAnnotation[12043-12048]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[12284-12290]:Modifier[12051-12057]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[12291-12295]:PrimitiveType[12058-12062]"
    }, {
      "left" : "arrayContainsExactly",
      "right" : "arrayContainsExactly",
      "info" : "SimpleName[12296-12316]:SimpleName[12063-12083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12319-12471]:Block[12086-12238]"
    }, {
      "left" : "ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");",
      "right" : "ImmutableList<String> iterable = ImmutableList.of(\"a\", \"b\");",
      "info" : "VariableDeclarationStatement[12325-12385]:VariableDeclarationStatement[12092-12152]"
    }, {
      "left" : "String[] array = {\"a\", \"b\"};",
      "right" : "String[] array = {\"a\", \"b\"};",
      "info" : "VariableDeclarationStatement[12390-12418]:VariableDeclarationStatement[12157-12185]"
    }, {
      "left" : "assertThat(iterable).containsExactly(array);",
      "right" : "assertThat(iterable).containsExactly(array);",
      "info" : "ExpressionStatement[12423-12467]:ExpressionStatement[12190-12234]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[14550-14557]:Modifier[14285-14292]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14558-14564]:Modifier[14293-14299]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[14565-14570]:TYPE_DECLARATION_KIND[14300-14305]"
    }, {
      "left" : "HashCodeThrower",
      "right" : "HashCodeThrower",
      "info" : "SimpleName[14571-14586]:SimpleName[14306-14321]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14593-14602]:MarkerAnnotation[14328-14337]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14607-14613]:Modifier[14342-14348]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[14614-14621]:PrimitiveType[14349-14356]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[14622-14628]:SimpleName[14357-14363]"
    }, {
      "left" : "Object other",
      "right" : "Object other",
      "info" : "SingleVariableDeclaration[14629-14641]:SingleVariableDeclaration[14364-14376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14643-14678]:Block[14378-14413]"
    }, {
      "left" : "return this == other;",
      "right" : "return this == other;",
      "info" : "ReturnStatement[14651-14672]:ReturnStatement[14386-14407]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14684-14693]:MarkerAnnotation[14419-14428]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14698-14704]:Modifier[14433-14439]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[14705-14708]:PrimitiveType[14440-14443]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[14709-14717]:SimpleName[14444-14452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14720-14776]:Block[14455-14511]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[14728-14770]:ThrowStatement[14463-14505]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14782-14791]:MarkerAnnotation[14517-14526]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14796-14802]:Modifier[14531-14537]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[14803-14809]:SimpleType[14538-14544]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[14810-14818]:SimpleName[14545-14553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14821-14848]:Block[14556-14583]"
    }, {
      "left" : "return \"HCT\";",
      "right" : "return \"HCT\";",
      "info" : "ReturnStatement[14829-14842]:ReturnStatement[14564-14577]"
    }, {
      "left" : "@Test",
      "right" : "@Test",
      "info" : "MarkerAnnotation[14856-14861]:MarkerAnnotation[14591-14596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14864-14870]:Modifier[14599-14605]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14871-14875]:PrimitiveType[14606-14610]"
    }, {
      "left" : "iterableContainsExactlyElementsInErrorMessageIsOrdered",
      "right" : "iterableContainsExactlyElementsInErrorMessageIsOrdered",
      "info" : "SimpleName[14876-14930]:SimpleName[14611-14665]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14933-15333]:Block[14668-15068]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[14939-15296]:TryStatement[14674-15031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14943-15038]:Block[14678-14773]"
    }, {
      "left" : "assertThat(asList(\"foo OR bar\")).containsExactlyElementsIn(asList(\"foo\", \"bar\"));",
      "right" : "assertThat(asList(\"foo OR bar\")).containsExactlyElementsIn(asList(\"foo\", \"bar\"));",
      "info" : "ExpressionStatement[14951-15032]:ExpressionStatement[14686-14767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15064-15296]:Block[14799-15031]"
    }, {
      "left" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[foo OR bar]> contains exactly <[foo, bar]>. \"\n                  + \"It is missing <[foo, bar]> and has unexpected items <[foo OR bar]>\");",
      "right" : "assertThat(e)\n          .hasMessage(\n              \"Not true that <[foo OR bar]> contains exactly <[foo, bar]>. \"\n                  + \"It is missing <[foo, bar]> and has unexpected items <[foo OR bar]>\");",
      "info" : "ExpressionStatement[15072-15276]:ExpressionStatement[14807-15011]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[15283-15290]:ReturnStatement[15018-15025]"
    }, {
      "left" : "fail(\"Should have thrown.\");",
      "right" : "fail(\"Should have thrown.\");",
      "info" : "ExpressionStatement[15301-15329]:ExpressionStatement[15036-15064]"
    } ]
  },
  "interFileMappings" : { }
}