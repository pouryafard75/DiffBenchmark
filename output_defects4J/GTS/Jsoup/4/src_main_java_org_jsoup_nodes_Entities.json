{
  "matchedElements" : [
 {
    "left" : "class : Entities",
    "right" : "class : Entities",
    "info" : "TypeDeclaration[179-75470]:TypeDeclaration[179-75428]"
  }, {
    "left" : "full",
    "right" : "full",
    "info" : "FieldDeclaration[513-562]:FieldDeclaration[513-562]"
  }, {
    "left" : "baseByVal",
    "right" : "baseByVal",
    "info" : "FieldDeclaration[567-621]:FieldDeclaration[567-621]"
  }, {
    "left" : "fullByVal",
    "right" : "fullByVal",
    "info" : "FieldDeclaration[626-680]:FieldDeclaration[626-680]"
  }, {
    "left" : "unescapePattern",
    "right" : "unescapePattern",
    "info" : "FieldDeclaration[685-788]:FieldDeclaration[685-788]"
  }, {
    "left" : "package escape(string , out ) : ",
    "right" : "package escape(string , out ) : ",
    "info" : "MethodDeclaration[794-930]:MethodDeclaration[794-930]"
  }, {
    "left" : "package escape(string , encoder , escapeMode ) : ",
    "right" : "package escape(string , encoder , escapeMode ) : ",
    "info" : "MethodDeclaration[936-1612]:MethodDeclaration[936-1612]"
  }, {
    "left" : "package unescape(string ) : ",
    "right" : "package unescape(string ) : ",
    "info" : "MethodDeclaration[1618-2859]:MethodDeclaration[1618-2845]"
  }, {
    "left" : "baseArray",
    "right" : "baseArray",
    "info" : "FieldDeclaration[2952-6377]:FieldDeclaration[2938-6363]"
  }, {
    "left" : "fullArray",
    "right" : "fullArray",
    "info" : "FieldDeclaration[6591-74783]:FieldDeclaration[6577-74769]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[426-432]:Modifier[426-432]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[433-438]:TYPE_DECLARATION_KIND[433-438]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[794-800]:Modifier[794-800]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[801-807]:SimpleType[801-807]"
  }, {
    "left" : "escape",
    "right" : "escape",
    "info" : "SimpleName[808-814]:SimpleName[808-814]"
  }, {
    "left" : "String string",
    "right" : "String string",
    "info" : "SingleVariableDeclaration[815-828]:SingleVariableDeclaration[815-828]"
  }, {
    "left" : "Document.OutputSettings out",
    "right" : "Document.OutputSettings out",
    "info" : "SingleVariableDeclaration[830-857]:SingleVariableDeclaration[830-857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[859-930]:Block[859-930]"
  }, {
    "left" : "return escape(string, out.encoder(), out.escapeMode());",
    "right" : "return escape(string, out.encoder(), out.escapeMode());",
    "info" : "ReturnStatement[869-924]:ReturnStatement[869-924]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[936-942]:Modifier[936-942]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[943-949]:SimpleType[943-949]"
  }, {
    "left" : "escape",
    "right" : "escape",
    "info" : "SimpleName[950-956]:SimpleName[950-956]"
  }, {
    "left" : "String string",
    "right" : "String string",
    "info" : "SingleVariableDeclaration[957-970]:SingleVariableDeclaration[957-970]"
  }, {
    "left" : "CharsetEncoder encoder",
    "right" : "CharsetEncoder encoder",
    "info" : "SingleVariableDeclaration[972-994]:SingleVariableDeclaration[972-994]"
  }, {
    "left" : "EscapeMode escapeMode",
    "right" : "EscapeMode escapeMode",
    "info" : "SingleVariableDeclaration[996-1017]:SingleVariableDeclaration[996-1017]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1019-1612]:Block[1019-1612]"
  }, {
    "left" : "StringBuilder accum = new StringBuilder(string.length() * 2);",
    "right" : "StringBuilder accum = new StringBuilder(string.length() * 2);",
    "info" : "VariableDeclarationStatement[1029-1090]:VariableDeclarationStatement[1029-1090]"
  }, {
    "left" : "Map<Character, String> map = escapeMode == EscapeMode.extended ? fullByVal : baseByVal;",
    "right" : "Map<Character, String> map = escapeMode == EscapeMode.extended ? fullByVal : baseByVal;",
    "info" : "VariableDeclarationStatement[1099-1186]:VariableDeclarationStatement[1099-1186]"
  }, {
    "left" : "for (int pos = 0; pos < string.length(); pos++)",
    "right" : "for (int pos = 0; pos < string.length(); pos++)",
    "info" : "ForStatement[1196-1572]:ForStatement[1196-1572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1244-1572]:Block[1244-1572]"
  }, {
    "left" : "Character c = string.charAt(pos);",
    "right" : "Character c = string.charAt(pos);",
    "info" : "VariableDeclarationStatement[1258-1291]:VariableDeclarationStatement[1258-1291]"
  }, {
    "left" : "if (map.containsKey(c))",
    "right" : "if (map.containsKey(c))",
    "info" : "IfStatement[1304-1562]:IfStatement[1304-1562]"
  }, {
    "left" : "accum.append('&').append(map.get(c)).append(';');",
    "right" : "accum.append('&').append(map.get(c)).append(';');",
    "info" : "ExpressionStatement[1344-1393]:ExpressionStatement[1344-1393]"
  }, {
    "left" : "if (encoder.canEncode(c))",
    "right" : "if (encoder.canEncode(c))",
    "info" : "IfStatement[1411-1562]:IfStatement[1411-1562]"
  }, {
    "left" : "accum.append(c.charValue());",
    "right" : "accum.append(c.charValue());",
    "info" : "ExpressionStatement[1453-1481]:ExpressionStatement[1453-1481]"
  }, {
    "left" : "accum.append(\"&#\").append((int) c).append(';');",
    "right" : "accum.append(\"&#\").append((int) c).append(';');",
    "info" : "ExpressionStatement[1515-1562]:ExpressionStatement[1515-1562]"
  }, {
    "left" : "return accum.toString();",
    "right" : "return accum.toString();",
    "info" : "ReturnStatement[1582-1606]:ReturnStatement[1582-1606]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[1618-1624]:Modifier[1618-1624]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[1625-1631]:SimpleType[1625-1631]"
  }, {
    "left" : "unescape",
    "right" : "unescape",
    "info" : "SimpleName[1632-1640]:SimpleName[1632-1640]"
  }, {
    "left" : "String string",
    "right" : "String string",
    "info" : "SingleVariableDeclaration[1641-1654]:SingleVariableDeclaration[1641-1654]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1656-2859]:Block[1656-2845]"
  }, {
    "left" : "if (!string.contains(\"&\"))",
    "right" : "if (!string.contains(\"&\"))",
    "info" : "IfStatement[1666-1719]:IfStatement[1666-1719]"
  }, {
    "left" : "return string;",
    "right" : "return string;",
    "info" : "ReturnStatement[1705-1719]:ReturnStatement[1705-1719]"
  }, {
    "left" : "Matcher m = unescapePattern.matcher(string);",
    "right" : "Matcher m = unescapePattern.matcher(string);",
    "info" : "VariableDeclarationStatement[1729-1773]:VariableDeclarationStatement[1729-1773]"
  }, {
    "left" : "StringBuffer accum = new StringBuffer(string.length());",
    "right" : "StringBuffer accum = new StringBuffer(string.length());",
    "info" : "VariableDeclarationStatement[1822-1877]:VariableDeclarationStatement[1822-1877]"
  }, {
    "left" : "while (m.find())",
    "right" : "while (m.find())",
    "info" : "WhileStatement[1940-2791]:WhileStatement[1940-2777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1957-2791]:Block[1957-2777]"
  }, {
    "left" : "int charval = -1;",
    "right" : "int charval = -1;",
    "info" : "VariableDeclarationStatement[1971-1988]:VariableDeclarationStatement[1971-1988]"
  }, {
    "left" : "String num = m.group(3);",
    "right" : "String num = m.group(3);",
    "info" : "VariableDeclarationStatement[2001-2025]:VariableDeclarationStatement[2001-2025]"
  }, {
    "left" : "if (num != null)",
    "right" : "if (num != null)",
    "info" : "IfStatement[2038-2478]:IfStatement[2038-2464]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2055-2311]:Block[2055-2311]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[2073-2289]:TryStatement[2073-2289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2077-2237]:Block[2077-2237]"
  }, {
    "left" : "int base = m.group(2) != null ? 16 : 10;",
    "right" : "int base = m.group(2) != null ? 16 : 10;",
    "info" : "VariableDeclarationStatement[2099-2139]:VariableDeclarationStatement[2099-2139]"
  }, {
    "left" : "charval = Integer.valueOf(num, base);",
    "right" : "charval = Integer.valueOf(num, base);",
    "info" : "ExpressionStatement[2182-2219]:ExpressionStatement[2182-2219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2270-2289]:Block[2270-2289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2317-2478]:Block[2317-2464]"
  }, {
    "left" : "String name = m.group(1).toLowerCase();",
    "right" : "String name = m.group(1);",
    "info" : "VariableDeclarationStatement[2335-2374]:VariableDeclarationStatement[2335-2360]"
  }, {
    "left" : "m.group(1)",
    "right" : "m.group(1)",
    "info" : "MethodInvocation[2349-2359]:MethodInvocation[2349-2359]"
  }, {
    "left" : "if (full.containsKey(name))",
    "right" : "if (full.containsKey(name))",
    "info" : "IfStatement[2391-2464]:IfStatement[2377-2450]"
  }, {
    "left" : "charval = full.get(name);",
    "right" : "charval = full.get(name);",
    "info" : "ExpressionStatement[2439-2464]:ExpressionStatement[2425-2450]"
  }, {
    "left" : "if (charval != -1 || charval > 0xFFFF)",
    "right" : "if (charval != -1 || charval > 0xFFFF)",
    "info" : "IfStatement[2492-2781]:IfStatement[2478-2767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2531-2672]:Block[2517-2658]"
  }, {
    "left" : "String c = Character.toString((char) charval);",
    "right" : "String c = Character.toString((char) charval);",
    "info" : "VariableDeclarationStatement[2565-2611]:VariableDeclarationStatement[2551-2597]"
  }, {
    "left" : "m.appendReplacement(accum, c);",
    "right" : "m.appendReplacement(accum, c);",
    "info" : "ExpressionStatement[2628-2658]:ExpressionStatement[2614-2644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2678-2781]:Block[2664-2767]"
  }, {
    "left" : "m.appendReplacement(accum, m.group(0));",
    "right" : "m.appendReplacement(accum, m.group(0));",
    "info" : "ExpressionStatement[2696-2735]:ExpressionStatement[2682-2721]"
  }, {
    "left" : "m.appendTail(accum);",
    "right" : "m.appendTail(accum);",
    "info" : "ExpressionStatement[2800-2820]:ExpressionStatement[2786-2806]"
  }, {
    "left" : "return accum.toString();",
    "right" : "return accum.toString();",
    "info" : "ReturnStatement[2829-2853]:ReturnStatement[2815-2839]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74796-75466]:Block[74782-75424]"
  }, {
    "left" : "full = new HashMap<String, Character>(fullArray.length);",
    "right" : "full = new HashMap<String, Character>(fullArray.length);",
    "info" : "ExpressionStatement[74806-74862]:ExpressionStatement[74792-74848]"
  }, {
    "left" : "baseByVal = new HashMap<Character, String>(baseArray.length);",
    "right" : "baseByVal = new HashMap<Character, String>(baseArray.length);",
    "info" : "ExpressionStatement[74871-74932]:ExpressionStatement[74857-74918]"
  }, {
    "left" : "fullByVal = new HashMap<Character, String>(fullArray.length);",
    "right" : "fullByVal = new HashMap<Character, String>(fullArray.length);",
    "info" : "ExpressionStatement[74941-75002]:ExpressionStatement[74927-74988]"
  }, {
    "left" : "for (Object[] entity : baseArray)",
    "right" : "for (Object[] entity : baseArray)",
    "info" : "EnhancedForStatement[75012-75209]:EnhancedForStatement[74998-75181]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75046-75209]:Block[75032-75181]"
  }, {
    "left" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "right" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "info" : "VariableDeclarationStatement[75060-75133]:VariableDeclarationStatement[75046-75119]"
  }, {
    "left" : "baseByVal",
    "right" : "baseByVal",
    "info" : "METHOD_INVOCATION_RECEIVER[75146-75155]:METHOD_INVOCATION_RECEIVER[75132-75141]"
  }, {
    "left" : "baseByVal.put(c, ((String) entity[0]).toLowerCase());",
    "right" : "baseByVal.put(c, ((String) entity[0]));",
    "info" : "ExpressionStatement[75146-75199]:ExpressionStatement[75132-75171]"
  }, {
    "left" : "c, ((String) entity[0]).toLowerCase()",
    "right" : "c, ((String) entity[0])",
    "info" : "METHOD_INVOCATION_ARGUMENTS[75160-75197]:METHOD_INVOCATION_ARGUMENTS[75146-75169]"
  }, {
    "left" : "((String) entity[0]).toLowerCase()",
    "right" : "baseByVal.put(c, ((String) entity[0]))",
    "info" : "MethodInvocation[75163-75197]:MethodInvocation[75132-75170]"
  }, {
    "left" : "((String) entity[0])",
    "right" : "((String) entity[0])",
    "info" : "ParenthesizedExpression[75163-75183]:ParenthesizedExpression[75149-75169]"
  }, {
    "left" : "toLowerCase",
    "right" : "put",
    "info" : "SimpleName[75184-75195]:SimpleName[75142-75145]"
  }, {
    "left" : "for (Object[] entity : fullArray)",
    "right" : "for (Object[] entity : fullArray)",
    "info" : "EnhancedForStatement[75218-75460]:EnhancedForStatement[75190-75418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75252-75460]:Block[75224-75418]"
  }, {
    "left" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "right" : "Character c = Character.valueOf((char) ((Integer) entity[1]).intValue());",
    "info" : "VariableDeclarationStatement[75266-75339]:VariableDeclarationStatement[75238-75311]"
  }, {
    "left" : "full.put((String) entity[0], c);",
    "right" : "full.put((String) entity[0], c);",
    "info" : "ExpressionStatement[75352-75384]:ExpressionStatement[75324-75356]"
  }, {
    "left" : "fullByVal",
    "right" : "fullByVal",
    "info" : "METHOD_INVOCATION_RECEIVER[75397-75406]:METHOD_INVOCATION_RECEIVER[75369-75378]"
  }, {
    "left" : "fullByVal.put(c, ((String) entity[0]).toLowerCase());",
    "right" : "fullByVal.put(c, ((String) entity[0]));",
    "info" : "ExpressionStatement[75397-75450]:ExpressionStatement[75369-75408]"
  }, {
    "left" : "c, ((String) entity[0]).toLowerCase()",
    "right" : "c, ((String) entity[0])",
    "info" : "METHOD_INVOCATION_ARGUMENTS[75411-75448]:METHOD_INVOCATION_ARGUMENTS[75383-75406]"
  }, {
    "left" : "((String) entity[0]).toLowerCase()",
    "right" : "fullByVal.put(c, ((String) entity[0]))",
    "info" : "MethodInvocation[75414-75448]:MethodInvocation[75369-75407]"
  }, {
    "left" : "((String) entity[0])",
    "right" : "((String) entity[0])",
    "info" : "ParenthesizedExpression[75414-75434]:ParenthesizedExpression[75386-75406]"
  }, {
    "left" : "toLowerCase",
    "right" : "put",
    "info" : "SimpleName[75435-75446]:SimpleName[75379-75382]"
  } ]
}