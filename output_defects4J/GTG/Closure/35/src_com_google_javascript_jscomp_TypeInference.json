{
  "matchedElements" : [
 {
    "left" : "class : TypeInference",
    "right" : "class : TypeInference",
    "info" : "TypeDeclaration[2358-50178]:TypeDeclaration[2358-49591]"
  }, {
    "left" : "TEMPLATE_TYPE_NOT_OBJECT_TYPE",
    "right" : "TEMPLATE_TYPE_NOT_OBJECT_TYPE",
    "info" : "FieldDeclaration[2573-2770]:FieldDeclaration[2573-2770]"
  }, {
    "left" : "TEMPLATE_TYPE_OF_THIS_EXPECTED",
    "right" : "TEMPLATE_TYPE_OF_THIS_EXPECTED",
    "info" : "FieldDeclaration[2774-3013]:FieldDeclaration[2774-3013]"
  }, {
    "left" : "FUNCTION_LITERAL_UNDEFINED_THIS",
    "right" : "FUNCTION_LITERAL_UNDEFINED_THIS",
    "info" : "FieldDeclaration[3017-3225]:FieldDeclaration[3017-3225]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[3229-3269]:FieldDeclaration[3229-3269]"
  }, {
    "left" : "registry",
    "right" : "registry",
    "info" : "FieldDeclaration[3272-3310]:FieldDeclaration[3272-3310]"
  }, {
    "left" : "reverseInterpreter",
    "right" : "reverseInterpreter",
    "info" : "FieldDeclaration[3313-3373]:FieldDeclaration[3313-3373]"
  }, {
    "left" : "syntacticScope",
    "right" : "syntacticScope",
    "info" : "FieldDeclaration[3376-3411]:FieldDeclaration[3376-3411]"
  }, {
    "left" : "functionScope",
    "right" : "functionScope",
    "info" : "FieldDeclaration[3414-3452]:FieldDeclaration[3414-3452]"
  }, {
    "left" : "bottomScope",
    "right" : "bottomScope",
    "info" : "FieldDeclaration[3455-3491]:FieldDeclaration[3455-3491]"
  }, {
    "left" : "assertionFunctionsMap",
    "right" : "assertionFunctionsMap",
    "info" : "FieldDeclaration[3494-3565]:FieldDeclaration[3494-3565]"
  }, {
    "left" : "package TypeInference(compiler , cfg , reverseInterpreter , functionScope , assertionFunctionsMap )",
    "right" : "package TypeInference(compiler , cfg , reverseInterpreter , functionScope , assertionFunctionsMap )",
    "info" : "MethodDeclaration[3569-4714]:MethodDeclaration[3569-4714]"
  }, {
    "left" : "package createInitialEstimateLattice() : ",
    "right" : "package createInitialEstimateLattice() : ",
    "info" : "MethodDeclaration[4718-4800]:MethodDeclaration[4718-4800]"
  }, {
    "left" : "package createEntryLattice() : ",
    "right" : "package createEntryLattice() : ",
    "info" : "MethodDeclaration[4804-4878]:MethodDeclaration[4804-4878]"
  }, {
    "left" : "package flowThrough(n , input ) : ",
    "right" : "package flowThrough(n , input ) : ",
    "info" : "MethodDeclaration[4882-5230]:MethodDeclaration[4882-5230]"
  }, {
    "left" : "package branchedFlowThrough(source , input ) : ",
    "right" : "package branchedFlowThrough(source , input ) : ",
    "info" : "MethodDeclaration[5234-9890]:MethodDeclaration[5234-9890]"
  }, {
    "left" : "private traverse(n , scope ) : ",
    "right" : "private traverse(n , scope ) : ",
    "info" : "MethodDeclaration[9894-14026]:MethodDeclaration[9894-14026]"
  }, {
    "left" : "private traverseReturn(n , scope ) : ",
    "right" : "private traverseReturn(n , scope ) : ",
    "info" : "MethodDeclaration[14030-14568]:MethodDeclaration[14030-14568]"
  }, {
    "left" : "private traverseCatch(n , scope ) : ",
    "right" : "private traverseCatch(n , scope ) : ",
    "info" : "MethodDeclaration[14572-14959]:MethodDeclaration[14572-14959]"
  }, {
    "left" : "private traverseAssign(n , scope ) : ",
    "right" : "private traverseAssign(n , scope ) : ",
    "info" : "MethodDeclaration[14963-15329]:MethodDeclaration[14963-15329]"
  }, {
    "left" : "private updateScopeForTypeChange(scope , left , leftType , resultType ) : void",
    "right" : "private updateScopeForTypeChange(scope , left , leftType , resultType ) : void",
    "info" : "MethodDeclaration[15333-17244]:MethodDeclaration[15333-17244]"
  }, {
    "left" : "private ensurePropertyDefined(getprop , rightType ) : void",
    "right" : "private ensurePropertyDefined(getprop , rightType ) : void",
    "info" : "MethodDeclaration[17248-19258]:MethodDeclaration[17248-19258]"
  }, {
    "left" : "private ensurePropertyDeclared(getprop ) : void",
    "right" : "private ensurePropertyDeclared(getprop ) : void",
    "info" : "MethodDeclaration[19262-19795]:MethodDeclaration[19262-19795]"
  }, {
    "left" : "private ensurePropertyDeclaredHelper(getprop , objectType ) : boolean",
    "right" : "private ensurePropertyDeclaredHelper(getprop , objectType ) : boolean",
    "info" : "MethodDeclaration[19799-20744]:MethodDeclaration[19799-20744]"
  }, {
    "left" : "private traverseName(n , scope ) : ",
    "right" : "private traverseName(n , scope ) : ",
    "info" : "MethodDeclaration[20748-22168]:MethodDeclaration[20748-22168]"
  }, {
    "left" : "private traverseArrayLiteral(n , scope ) : ",
    "right" : "private traverseArrayLiteral(n , scope ) : ",
    "info" : "MethodDeclaration[22172-22388]:MethodDeclaration[22172-22388]"
  }, {
    "left" : "private traverseObjectLiteral(n , scope ) : ",
    "right" : "private traverseObjectLiteral(n , scope ) : ",
    "info" : "MethodDeclaration[22392-24650]:MethodDeclaration[22392-24650]"
  }, {
    "left" : "private traverseAdd(n , scope ) : ",
    "right" : "private traverseAdd(n , scope ) : ",
    "info" : "MethodDeclaration[24654-25818]:MethodDeclaration[24654-25818]"
  }, {
    "left" : "private isAddedAsNumber(type ) : boolean",
    "right" : "private isAddedAsNumber(type ) : boolean",
    "info" : "MethodDeclaration[25822-26019]:MethodDeclaration[25822-26019]"
  }, {
    "left" : "private traverseHook(n , scope ) : ",
    "right" : "private traverseHook(n , scope ) : ",
    "info" : "MethodDeclaration[26023-27169]:MethodDeclaration[26023-27169]"
  }, {
    "left" : "private traverseCall(n , scope ) : ",
    "right" : "private traverseCall(n , scope ) : ",
    "info" : "MethodDeclaration[27173-27840]:MethodDeclaration[27173-27840]"
  }, {
    "left" : "private tightenTypesAfterAssertions(scope , callNode ) : ",
    "right" : "private tightenTypesAfterAssertions(scope , callNode ) : ",
    "info" : "MethodDeclaration[27844-29675]:MethodDeclaration[27844-29675]"
  }, {
    "left" : "private narrowScope(scope , node , narrowed ) : ",
    "right" : "private narrowScope(scope , node , narrowed ) : ",
    "info" : "MethodDeclaration[29679-30016]:MethodDeclaration[29679-30016]"
  }, {
    "left" : "private backwardsInferenceFromCallSite(n , fnType ) : void",
    "right" : "private backwardsInferenceFromCallSite(n , fnType ) : void",
    "info" : "MethodDeclaration[30020-31128]:MethodDeclaration[30020-31128]"
  }, {
    "left" : "private updateBind(n , fnType ) : void",
    "right" : "private updateBind(n , fnType ) : void",
    "info" : "MethodDeclaration[31132-31939]:MethodDeclaration[31132-31939]"
  }, {
    "left" : "private updateTypeOfParameters(n , fnType ) : void",
    "right" : "private updateTypeOfParameters(n , fnType ) : void",
    "info" : "MethodDeclaration[31943-32970]:MethodDeclaration[31943-32970]"
  }, {
    "left" : "private updateTypeOfThisOnClosure(n , fnType ) : void",
    "right" : "private updateTypeOfThisOnClosure(n , fnType ) : void",
    "info" : "MethodDeclaration[32974-36827]:MethodDeclaration[32974-36827]"
  }, {
    "left" : "private traverseNew(n , scope ) : ",
    "right" : "private traverseNew(n , scope ) : ",
    "info" : "MethodDeclaration[36831-37958]:MethodDeclaration[36831-37958]"
  }, {
    "left" : "private traverseAnd(n , scope ) : ",
    "right" : "private traverseAnd(n , scope ) : ",
    "info" : "MethodDeclaration[37962-38088]:MethodDeclaration[37962-38088]"
  }, {
    "left" : "private traverseChildren(n , scope ) : ",
    "right" : "private traverseChildren(n , scope ) : ",
    "info" : "MethodDeclaration[38092-38287]:MethodDeclaration[38092-38287]"
  }, {
    "left" : "private traverseGetElem(n , scope ) : ",
    "right" : "private traverseGetElem(n , scope ) : ",
    "info" : "MethodDeclaration[38291-38706]:MethodDeclaration[38291-38706]"
  }, {
    "left" : "private traverseGetProp(n , scope ) : ",
    "right" : "private traverseGetProp(n , scope ) : ",
    "info" : "MethodDeclaration[38710-39056]:MethodDeclaration[38710-39056]"
  }, {
    "left" : "private inferPropertyTypesToMatchConstraint(type , constraint ) : void",
    "right" : "private inferPropertyTypesToMatchConstraint(type , constraint ) : void",
    "info" : "MethodDeclaration[39060-40518]:MethodDeclaration[39060-39931]"
  }, {
    "left" : "private dereferencePointer(n , scope ) : ",
    "right" : "private dereferencePointer(n , scope ) : ",
    "info" : "MethodDeclaration[40522-40928]:MethodDeclaration[39935-40341]"
  }, {
    "left" : "private getPropertyType(objType , propName , n , scope ) : ",
    "right" : "private getPropertyType(objType , propName , n , scope ) : ",
    "info" : "MethodDeclaration[40932-42186]:MethodDeclaration[40345-41599]"
  }, {
    "left" : "private traverseOr(n , scope ) : ",
    "right" : "private traverseOr(n , scope ) : ",
    "info" : "MethodDeclaration[42190-42316]:MethodDeclaration[41603-41729]"
  }, {
    "left" : "private traverseShortCircuitingBinOp(n , scope , condition boolean) : ",
    "right" : "private traverseShortCircuitingBinOp(n , scope , condition boolean) : ",
    "info" : "MethodDeclaration[42320-44679]:MethodDeclaration[41733-44092]"
  }, {
    "left" : "private traverseWithinShortCircuitingBinOp(n , scope ) : ",
    "right" : "private traverseWithinShortCircuitingBinOp(n , scope ) : ",
    "info" : "MethodDeclaration[44683-45045]:MethodDeclaration[44096-44458]"
  }, {
    "left" : "package getBooleanOutcomePair(left , right , condition boolean) : ",
    "right" : "package getBooleanOutcomePair(left , right , condition boolean) : ",
    "info" : "MethodDeclaration[45049-45681]:MethodDeclaration[44462-45094]"
  }, {
    "left" : "package getBooleanOutcomes(left , right , condition boolean) : ",
    "right" : "package getBooleanOutcomes(left , right , condition boolean) : ",
    "info" : "MethodDeclaration[45685-46543]:MethodDeclaration[45098-45956]"
  }, {
    "left" : "class : BooleanOutcomePair",
    "right" : "class : BooleanOutcomePair",
    "info" : "TypeDeclaration[46547-48405]:TypeDeclaration[45960-47818]"
  }, {
    "left" : "toBooleanOutcomes",
    "right" : "toBooleanOutcomes",
    "info" : "FieldDeclaration[46875-46917]:FieldDeclaration[46288-46330]"
  }, {
    "left" : "booleanValues",
    "right" : "booleanValues",
    "info" : "FieldDeclaration[46922-46960]:FieldDeclaration[46335-46373]"
  }, {
    "left" : "leftScope",
    "right" : "leftScope",
    "info" : "FieldDeclaration[47041-47067]:FieldDeclaration[46454-46480]"
  }, {
    "left" : "rightScope",
    "right" : "rightScope",
    "info" : "FieldDeclaration[47126-47153]:FieldDeclaration[46539-46566]"
  }, {
    "left" : "joinedScope",
    "right" : "joinedScope",
    "info" : "FieldDeclaration[47235-47264]:FieldDeclaration[46648-46677]"
  }, {
    "left" : "package BooleanOutcomePair(toBooleanOutcomes , booleanValues , leftScope , rightScope )",
    "right" : "package BooleanOutcomePair(toBooleanOutcomes , booleanValues , leftScope , rightScope )",
    "info" : "MethodDeclaration[47270-47588]:MethodDeclaration[46683-47001]"
  }, {
    "left" : "package getJoinedFlowScope() : ",
    "right" : "package getJoinedFlowScope() : ",
    "info" : "MethodDeclaration[47594-47978]:MethodDeclaration[47007-47391]"
  }, {
    "left" : "package getOutcomeFlowScope(nodeType int, outcome boolean) : ",
    "right" : "package getOutcomeFlowScope(nodeType int, outcome boolean) : ",
    "info" : "MethodDeclaration[47984-48401]:MethodDeclaration[47397-47814]"
  }, {
    "left" : "private newBooleanOutcomePair(jsType , flowScope ) : ",
    "right" : "private newBooleanOutcomePair(jsType , flowScope ) : ",
    "info" : "MethodDeclaration[48409-48887]:MethodDeclaration[47822-48300]"
  }, {
    "left" : "private redeclareSimpleVar(scope , nameNode , varType ) : void",
    "right" : "private redeclareSimpleVar(scope , nameNode , varType ) : void",
    "info" : "MethodDeclaration[48891-49285]:MethodDeclaration[48304-48698]"
  }, {
    "left" : "private isUnflowable(v ) : boolean",
    "right" : "private isUnflowable(v ) : boolean",
    "info" : "MethodDeclaration[49289-49503]:MethodDeclaration[48702-48916]"
  }, {
    "left" : "private getJSType(n ) : ",
    "right" : "private getJSType(n ) : ",
    "info" : "MethodDeclaration[49507-50074]:MethodDeclaration[48920-49487]"
  }, {
    "left" : "private getNativeType(typeId ) : ",
    "right" : "private getNativeType(typeId ) : ",
    "info" : "MethodDeclaration[50078-50176]:MethodDeclaration[49491-49589]"
  } ],
  "mappings" : [
 {
    "left" : "TypeInference",
    "right" : "TypeInference",
    "info" : "SimpleName[3569-3582]:SimpleName[3569-3582]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[3583-3608]:SingleVariableDeclaration[3583-3608]"
  }, {
    "left" : "ControlFlowGraph<Node> cfg",
    "right" : "ControlFlowGraph<Node> cfg",
    "info" : "SingleVariableDeclaration[3610-3636]:SingleVariableDeclaration[3610-3636]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[3654-3699]:SingleVariableDeclaration[3654-3699]"
  }, {
    "left" : "Scope functionScope",
    "right" : "Scope functionScope",
    "info" : "SingleVariableDeclaration[3717-3736]:SingleVariableDeclaration[3717-3736]"
  }, {
    "left" : "Map<String, AssertionFunctionSpec> assertionFunctionsMap",
    "right" : "Map<String, AssertionFunctionSpec> assertionFunctionsMap",
    "info" : "SingleVariableDeclaration[3754-3810]:SingleVariableDeclaration[3754-3810]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3812-4714]:Block[3812-4714]"
  }, {
    "left" : "super(cfg, new LinkedFlowScope.FlowScopeJoinOp());",
    "right" : "super(cfg, new LinkedFlowScope.FlowScopeJoinOp());",
    "info" : "SuperConstructorInvocation[3818-3868]:SuperConstructorInvocation[3818-3868]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[3873-3898]:ExpressionStatement[3873-3898]"
  }, {
    "left" : "this.registry = compiler.getTypeRegistry();",
    "right" : "this.registry = compiler.getTypeRegistry();",
    "info" : "ExpressionStatement[3903-3946]:ExpressionStatement[3903-3946]"
  }, {
    "left" : "this.reverseInterpreter = reverseInterpreter;",
    "right" : "this.reverseInterpreter = reverseInterpreter;",
    "info" : "ExpressionStatement[3951-3996]:ExpressionStatement[3951-3996]"
  }, {
    "left" : "this.syntacticScope = functionScope;",
    "right" : "this.syntacticScope = functionScope;",
    "info" : "ExpressionStatement[4001-4037]:ExpressionStatement[4001-4037]"
  }, {
    "left" : "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);",
    "right" : "this.functionScope = LinkedFlowScope.createEntryLattice(functionScope);",
    "info" : "ExpressionStatement[4042-4113]:ExpressionStatement[4042-4113]"
  }, {
    "left" : "this.assertionFunctionsMap = assertionFunctionsMap;",
    "right" : "this.assertionFunctionsMap = assertionFunctionsMap;",
    "info" : "ExpressionStatement[4118-4169]:ExpressionStatement[4118-4169]"
  }, {
    "left" : "Iterator<Var> varIt =\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();",
    "right" : "Iterator<Var> varIt =\n        functionScope.getDeclarativelyUnboundVarsWithoutTypes();",
    "info" : "VariableDeclarationStatement[4268-4354]:VariableDeclarationStatement[4268-4354]"
  }, {
    "left" : "while (varIt.hasNext())",
    "right" : "while (varIt.hasNext())",
    "info" : "WhileStatement[4359-4570]:WhileStatement[4359-4570]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4383-4570]:Block[4383-4570]"
  }, {
    "left" : "Var var = varIt.next();",
    "right" : "Var var = varIt.next();",
    "info" : "VariableDeclarationStatement[4391-4414]:VariableDeclarationStatement[4391-4414]"
  }, {
    "left" : "if (isUnflowable(var))",
    "right" : "if (isUnflowable(var))",
    "info" : "IfStatement[4421-4471]:IfStatement[4421-4471]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4444-4471]:Block[4444-4471]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[4454-4463]:ContinueStatement[4454-4463]"
  }, {
    "left" : "this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));",
    "right" : "this.functionScope.inferSlotType(\n          var.getName(), getNativeType(VOID_TYPE));",
    "info" : "ExpressionStatement[4479-4564]:ExpressionStatement[4479-4564]"
  }, {
    "left" : "this.bottomScope = LinkedFlowScope.createEntryLattice(\n        new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis()));",
    "right" : "this.bottomScope = LinkedFlowScope.createEntryLattice(\n        new Scope(functionScope.getRootNode(), functionScope.getTypeOfThis()));",
    "info" : "ExpressionStatement[4576-4710]:ExpressionStatement[4576-4710]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4718-4727]:MarkerAnnotation[4718-4727]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[4730-4739]:SimpleType[4730-4739]"
  }, {
    "left" : "createInitialEstimateLattice",
    "right" : "createInitialEstimateLattice",
    "info" : "SimpleName[4740-4768]:SimpleName[4740-4768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4771-4800]:Block[4771-4800]"
  }, {
    "left" : "return bottomScope;",
    "right" : "return bottomScope;",
    "info" : "ReturnStatement[4777-4796]:ReturnStatement[4777-4796]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4804-4813]:MarkerAnnotation[4804-4813]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[4816-4825]:SimpleType[4816-4825]"
  }, {
    "left" : "createEntryLattice",
    "right" : "createEntryLattice",
    "info" : "SimpleName[4826-4844]:SimpleName[4826-4844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4847-4878]:Block[4847-4878]"
  }, {
    "left" : "return functionScope;",
    "right" : "return functionScope;",
    "info" : "ReturnStatement[4853-4874]:ReturnStatement[4853-4874]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4882-4891]:MarkerAnnotation[4882-4891]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[4894-4903]:SimpleType[4894-4903]"
  }, {
    "left" : "flowThrough",
    "right" : "flowThrough",
    "info" : "SimpleName[4904-4915]:SimpleName[4904-4915]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4916-4922]:SingleVariableDeclaration[4916-4922]"
  }, {
    "left" : "FlowScope input",
    "right" : "FlowScope input",
    "info" : "SingleVariableDeclaration[4924-4939]:SingleVariableDeclaration[4924-4939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4941-5230]:Block[4941-5230]"
  }, {
    "left" : "if (input == bottomScope)",
    "right" : "if (input == bottomScope)",
    "info" : "IfStatement[5066-5119]:IfStatement[5066-5119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5092-5119]:Block[5092-5119]"
  }, {
    "left" : "return input;",
    "right" : "return input;",
    "info" : "ReturnStatement[5100-5113]:ReturnStatement[5100-5113]"
  }, {
    "left" : "FlowScope output = input.createChildFlowScope();",
    "right" : "FlowScope output = input.createChildFlowScope();",
    "info" : "VariableDeclarationStatement[5125-5173]:VariableDeclarationStatement[5125-5173]"
  }, {
    "left" : "output = traverse(n, output);",
    "right" : "output = traverse(n, output);",
    "info" : "ExpressionStatement[5178-5207]:ExpressionStatement[5178-5207]"
  }, {
    "left" : "return output;",
    "right" : "return output;",
    "info" : "ReturnStatement[5212-5226]:ReturnStatement[5212-5226]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[5234-5243]:MarkerAnnotation[5234-5243]"
  }, {
    "left" : "@SuppressWarnings(\"fallthrough\")",
    "right" : "@SuppressWarnings(\"fallthrough\")",
    "info" : "SingleMemberAnnotation[5246-5278]:SingleMemberAnnotation[5246-5278]"
  }, {
    "left" : "List<FlowScope>",
    "right" : "List<FlowScope>",
    "info" : "ParameterizedType[5281-5296]:ParameterizedType[5281-5296]"
  }, {
    "left" : "branchedFlowThrough",
    "right" : "branchedFlowThrough",
    "info" : "SimpleName[5297-5316]:SimpleName[5297-5316]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[5317-5328]:SingleVariableDeclaration[5317-5328]"
  }, {
    "left" : "FlowScope input",
    "right" : "FlowScope input",
    "info" : "SingleVariableDeclaration[5330-5345]:SingleVariableDeclaration[5330-5345]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5347-9890]:Block[5347-9890]"
  }, {
    "left" : "FlowScope output = flowThrough(source, input);",
    "right" : "FlowScope output = flowThrough(source, input);",
    "info" : "VariableDeclarationStatement[5668-5714]:VariableDeclarationStatement[5668-5714]"
  }, {
    "left" : "Node condition = null;",
    "right" : "Node condition = null;",
    "info" : "VariableDeclarationStatement[5719-5741]:VariableDeclarationStatement[5719-5741]"
  }, {
    "left" : "FlowScope conditionFlowScope = null;",
    "right" : "FlowScope conditionFlowScope = null;",
    "info" : "VariableDeclarationStatement[5746-5782]:VariableDeclarationStatement[5746-5782]"
  }, {
    "left" : "BooleanOutcomePair conditionOutcomes = null;",
    "right" : "BooleanOutcomePair conditionOutcomes = null;",
    "info" : "VariableDeclarationStatement[5787-5831]:VariableDeclarationStatement[5787-5831]"
  }, {
    "left" : "List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);",
    "right" : "List<DiGraphEdge<Node, Branch>> branchEdges = getCfg().getOutEdges(source);",
    "info" : "VariableDeclarationStatement[5837-5912]:VariableDeclarationStatement[5837-5912]"
  }, {
    "left" : "List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());",
    "right" : "List<FlowScope> result = Lists.newArrayListWithCapacity(branchEdges.size());",
    "info" : "VariableDeclarationStatement[5917-5993]:VariableDeclarationStatement[5917-5993]"
  }, {
    "left" : "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges)",
    "right" : "for (DiGraphEdge<Node, Branch> branchEdge : branchEdges)",
    "info" : "EnhancedForStatement[5998-9867]:EnhancedForStatement[5998-9867]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6055-9867]:Block[6055-9867]"
  }, {
    "left" : "Branch branch = branchEdge.getValue();",
    "right" : "Branch branch = branchEdge.getValue();",
    "info" : "VariableDeclarationStatement[6063-6101]:VariableDeclarationStatement[6063-6101]"
  }, {
    "left" : "FlowScope newScope = output;",
    "right" : "FlowScope newScope = output;",
    "info" : "VariableDeclarationStatement[6108-6136]:VariableDeclarationStatement[6108-6136]"
  }, {
    "left" : "switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            Node obj = item.getNext();\n\n            FlowScope informed = traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item = item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType = getNativeType(STRING_TYPE);\n              ObjectType objType = getJSType(obj).dereference();\n              JSType objIndexType = objType == null ?\n                  null : objType.getIndexType();\n              if (objIndexType != null && !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType = narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope = informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.isCase()) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }",
    "right" : "switch (branch) {\n        case ON_TRUE:\n          if (NodeUtil.isForIn(source)) {\n            // item is assigned a property name, so its type should be string.\n            Node item = source.getFirstChild();\n            Node obj = item.getNext();\n\n            FlowScope informed = traverse(obj, output.createChildFlowScope());\n\n            if (item.isVar()) {\n              item = item.getFirstChild();\n            }\n            if (item.isName()) {\n              JSType iterKeyType = getNativeType(STRING_TYPE);\n              ObjectType objType = getJSType(obj).dereference();\n              JSType objIndexType = objType == null ?\n                  null : objType.getIndexType();\n              if (objIndexType != null && !objIndexType.isUnknownType()) {\n                JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);\n                if (!narrowedKeyType.isEmptyType()) {\n                  iterKeyType = narrowedKeyType;\n                }\n              }\n              redeclareSimpleVar(informed, item, iterKeyType);\n            }\n            newScope = informed;\n            break;\n          }\n\n          // FALL THROUGH\n\n        case ON_FALSE:\n          if (condition == null) {\n            condition = NodeUtil.getConditionExpression(source);\n            if (condition == null && source.isCase()) {\n              condition = source;\n\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());\n              }\n            }\n          }\n\n          if (condition != null) {\n            if (condition.isAnd() ||\n                condition.isOr()) {\n              // When handling the short-circuiting binary operators,\n              // the outcome scope on true can be different than the outcome\n              // scope on false.\n              //\n              // TODO(nicksantos): The \"right\" way to do this is to\n              // carry the known outcome all the way through the\n              // recursive traversal, so that we can construct a\n              // different flow scope based on the outcome. However,\n              // this would require a bunch of code and a bunch of\n              // extra computation for an edge case. This seems to be\n              // a \"good enough\" approximation.\n\n              // conditionOutcomes is cached from previous iterations\n              // of the loop.\n              if (conditionOutcomes == null) {\n                conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);\n            } else {\n              // conditionFlowScope is cached from previous iterations\n              // of the loop.\n              if (conditionFlowScope == null) {\n                conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());\n              }\n              newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);\n            }\n          }\n          break;\n      }",
    "info" : "SwitchStatement[6144-9821]:SwitchStatement[6144-9821]"
  }, {
    "left" : "case ON_TRUE:",
    "right" : "case ON_TRUE:",
    "info" : "SwitchCase[6170-6183]:SwitchCase[6170-6183]"
  }, {
    "left" : "if (NodeUtil.isForIn(source))",
    "right" : "if (NodeUtil.isForIn(source))",
    "info" : "IfStatement[6194-7285]:IfStatement[6194-7285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6224-7285]:Block[6224-7285]"
  }, {
    "left" : "Node item = source.getFirstChild();",
    "right" : "Node item = source.getFirstChild();",
    "info" : "VariableDeclarationStatement[6317-6352]:VariableDeclarationStatement[6317-6352]"
  }, {
    "left" : "Node obj = item.getNext();",
    "right" : "Node obj = item.getNext();",
    "info" : "VariableDeclarationStatement[6365-6391]:VariableDeclarationStatement[6365-6391]"
  }, {
    "left" : "FlowScope informed = traverse(obj, output.createChildFlowScope());",
    "right" : "FlowScope informed = traverse(obj, output.createChildFlowScope());",
    "info" : "VariableDeclarationStatement[6405-6471]:VariableDeclarationStatement[6405-6471]"
  }, {
    "left" : "if (item.isVar())",
    "right" : "if (item.isVar())",
    "info" : "IfStatement[6485-6561]:IfStatement[6485-6561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6503-6561]:Block[6503-6561]"
  }, {
    "left" : "item = item.getFirstChild();",
    "right" : "item = item.getFirstChild();",
    "info" : "ExpressionStatement[6519-6547]:ExpressionStatement[6519-6547]"
  }, {
    "left" : "if (item.isName())",
    "right" : "if (item.isName())",
    "info" : "IfStatement[6574-7221]:IfStatement[6574-7221]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6593-7221]:Block[6593-7221]"
  }, {
    "left" : "JSType iterKeyType = getNativeType(STRING_TYPE);",
    "right" : "JSType iterKeyType = getNativeType(STRING_TYPE);",
    "info" : "VariableDeclarationStatement[6609-6657]:VariableDeclarationStatement[6609-6657]"
  }, {
    "left" : "ObjectType objType = getJSType(obj).dereference();",
    "right" : "ObjectType objType = getJSType(obj).dereference();",
    "info" : "VariableDeclarationStatement[6672-6722]:VariableDeclarationStatement[6672-6722]"
  }, {
    "left" : "JSType objIndexType = objType == null ?\n                  null : objType.getIndexType();",
    "right" : "JSType objIndexType = objType == null ?\n                  null : objType.getIndexType();",
    "info" : "VariableDeclarationStatement[6737-6825]:VariableDeclarationStatement[6737-6825]"
  }, {
    "left" : "if (objIndexType != null && !objIndexType.isUnknownType())",
    "right" : "if (objIndexType != null && !objIndexType.isUnknownType())",
    "info" : "IfStatement[6840-7144]:IfStatement[6840-7144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6899-7144]:Block[6899-7144]"
  }, {
    "left" : "JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);",
    "right" : "JSType narrowedKeyType =\n                    iterKeyType.getGreatestSubtype(objIndexType);",
    "info" : "VariableDeclarationStatement[6917-7007]:VariableDeclarationStatement[6917-7007]"
  }, {
    "left" : "if (!narrowedKeyType.isEmptyType())",
    "right" : "if (!narrowedKeyType.isEmptyType())",
    "info" : "IfStatement[7024-7128]:IfStatement[7024-7128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7060-7128]:Block[7060-7128]"
  }, {
    "left" : "iterKeyType = narrowedKeyType;",
    "right" : "iterKeyType = narrowedKeyType;",
    "info" : "ExpressionStatement[7080-7110]:ExpressionStatement[7080-7110]"
  }, {
    "left" : "redeclareSimpleVar(informed, item, iterKeyType);",
    "right" : "redeclareSimpleVar(informed, item, iterKeyType);",
    "info" : "ExpressionStatement[7159-7207]:ExpressionStatement[7159-7207]"
  }, {
    "left" : "newScope = informed;",
    "right" : "newScope = informed;",
    "info" : "ExpressionStatement[7234-7254]:ExpressionStatement[7234-7254]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[7267-7273]:BreakStatement[7267-7273]"
  }, {
    "left" : "case ON_FALSE:",
    "right" : "case ON_FALSE:",
    "info" : "SwitchCase[7322-7336]:SwitchCase[7322-7336]"
  }, {
    "left" : "if (condition == null)",
    "right" : "if (condition == null)",
    "info" : "IfStatement[7347-7844]:IfStatement[7347-7844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7370-7844]:Block[7370-7844]"
  }, {
    "left" : "condition = NodeUtil.getConditionExpression(source);",
    "right" : "condition = NodeUtil.getConditionExpression(source);",
    "info" : "ExpressionStatement[7384-7436]:ExpressionStatement[7384-7436]"
  }, {
    "left" : "if (condition == null && source.isCase())",
    "right" : "if (condition == null && source.isCase())",
    "info" : "IfStatement[7449-7832]:IfStatement[7449-7832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7491-7832]:Block[7491-7832]"
  }, {
    "left" : "condition = source;",
    "right" : "condition = source;",
    "info" : "ExpressionStatement[7507-7526]:ExpressionStatement[7507-7526]"
  }, {
    "left" : "if (conditionFlowScope == null)",
    "right" : "if (conditionFlowScope == null)",
    "info" : "IfStatement[7643-7818]:IfStatement[7643-7818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7675-7818]:Block[7675-7818]"
  }, {
    "left" : "conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());",
    "right" : "conditionFlowScope = traverse(\n                    condition.getFirstChild(), output.createChildFlowScope());",
    "info" : "ExpressionStatement[7693-7802]:ExpressionStatement[7693-7802]"
  }, {
    "left" : "if (condition != null)",
    "right" : "if (condition != null)",
    "info" : "IfStatement[7856-9796]:IfStatement[7856-9796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7879-9796]:Block[7879-9796]"
  }, {
    "left" : "if (condition.isAnd() ||\n                condition.isOr())",
    "right" : "if (condition.isAnd() ||\n                condition.isOr())",
    "info" : "IfStatement[7893-9784]:IfStatement[7893-9784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7952-9306]:Block[7952-9306]"
  }, {
    "left" : "if (conditionOutcomes == null)",
    "right" : "if (conditionOutcomes == null)",
    "info" : "IfStatement[8718-8972]:IfStatement[8718-8972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8749-8972]:Block[8749-8972]"
  }, {
    "left" : "conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());",
    "right" : "conditionOutcomes = condition.isAnd() ?\n                    traverseAnd(condition, output.createChildFlowScope()) :\n                    traverseOr(condition, output.createChildFlowScope());",
    "info" : "ExpressionStatement[8767-8956]:ExpressionStatement[8767-8956]"
  }, {
    "left" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);",
    "right" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition,\n                      conditionOutcomes.getOutcomeFlowScope(\n                          condition.getType(), branch == Branch.ON_TRUE),\n                      branch == Branch.ON_TRUE);",
    "info" : "ExpressionStatement[8987-9292]:ExpressionStatement[8987-9292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9312-9784]:Block[9312-9784]"
  }, {
    "left" : "if (conditionFlowScope == null)",
    "right" : "if (conditionFlowScope == null)",
    "info" : "IfStatement[9429-9587]:IfStatement[9429-9587]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9461-9587]:Block[9461-9587]"
  }, {
    "left" : "conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());",
    "right" : "conditionFlowScope =\n                    traverse(condition, output.createChildFlowScope());",
    "info" : "ExpressionStatement[9479-9571]:ExpressionStatement[9479-9571]"
  }, {
    "left" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);",
    "right" : "newScope =\n                  reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n                      condition, conditionFlowScope, branch == Branch.ON_TRUE);",
    "info" : "ExpressionStatement[9602-9770]:ExpressionStatement[9602-9770]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[9807-9813]:BreakStatement[9807-9813]"
  }, {
    "left" : "result.add(newScope.optimize());",
    "right" : "result.add(newScope.optimize());",
    "info" : "ExpressionStatement[9829-9861]:ExpressionStatement[9829-9861]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[9872-9886]:ReturnStatement[9872-9886]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9894-9901]:Modifier[9894-9901]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[9902-9911]:SimpleType[9902-9911]"
  }, {
    "left" : "traverse",
    "right" : "traverse",
    "info" : "SimpleName[9912-9920]:SimpleName[9912-9920]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[9921-9927]:SingleVariableDeclaration[9921-9927]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[9929-9944]:SingleVariableDeclaration[9929-9944]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9946-14026]:Block[9946-14026]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope = traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n        scope = traverseAssign(n, scope);\n        break;\n\n      case Token.NAME:\n        scope = traverseName(n, scope);\n        break;\n\n      case Token.GETPROP:\n        scope = traverseGetProp(n, scope);\n        break;\n\n      case Token.AND:\n        scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.OR:\n        scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();\n        break;\n\n      case Token.HOOK:\n        scope = traverseHook(n, scope);\n        break;\n\n      case Token.OBJECTLIT:\n        scope = traverseObjectLiteral(n, scope);\n        break;\n\n      case Token.CALL:\n        scope = traverseCall(n, scope);\n        break;\n\n      case Token.NEW:\n        scope = traverseNew(n, scope);\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        scope = traverseAdd(n, scope);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        scope = traverse(n.getFirstChild(), scope);  // Find types.\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.ARRAYLIT:\n        scope = traverseArrayLiteral(n, scope);\n        break;\n\n      case Token.THIS:\n        n.setJSType(scope.getTypeOfThis());\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n      case Token.MUL:\n      case Token.SUB:\n      case Token.DEC:\n      case Token.INC:\n      case Token.BITNOT:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(NUMBER_TYPE));\n        break;\n\n      case Token.PARAM_LIST:\n        scope = traverse(n.getFirstChild(), scope);\n        n.setJSType(getJSType(n.getFirstChild()));\n        break;\n\n      case Token.COMMA:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getJSType(n.getLastChild()));\n        break;\n\n      case Token.TYPEOF:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(STRING_TYPE));\n        break;\n\n      case Token.DELPROP:\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n      case Token.NOT:\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.INSTANCEOF:\n      case Token.IN:\n        scope = traverseChildren(n, scope);\n        n.setJSType(getNativeType(BOOLEAN_TYPE));\n        break;\n\n      case Token.GETELEM:\n        scope = traverseGetElem(n, scope);\n        break;\n\n      case Token.EXPR_RESULT:\n        scope = traverseChildren(n, scope);\n        if (n.getFirstChild().isGetProp()) {\n          ensurePropertyDeclared(n.getFirstChild());\n        }\n        break;\n\n      case Token.SWITCH:\n        scope = traverse(n.getFirstChild(), scope);\n        break;\n\n      case Token.RETURN:\n        scope = traverseReturn(n, scope);\n        break;\n\n      case Token.VAR:\n      case Token.THROW:\n        scope = traverseChildren(n, scope);\n        break;\n\n      case Token.CATCH:\n        scope = traverseCatch(n, scope);\n        break;\n    }",
    "info" : "SwitchStatement[9952-13425]:SwitchStatement[9952-13425]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[9981-9999]:SwitchCase[9981-9999]"
  }, {
    "left" : "scope = traverseAssign(n, scope);",
    "right" : "scope = traverseAssign(n, scope);",
    "info" : "ExpressionStatement[10008-10041]:ExpressionStatement[10008-10041]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10050-10056]:BreakStatement[10050-10056]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[10064-10080]:SwitchCase[10064-10080]"
  }, {
    "left" : "scope = traverseName(n, scope);",
    "right" : "scope = traverseName(n, scope);",
    "info" : "ExpressionStatement[10089-10120]:ExpressionStatement[10089-10120]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10129-10135]:BreakStatement[10129-10135]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[10143-10162]:SwitchCase[10143-10162]"
  }, {
    "left" : "scope = traverseGetProp(n, scope);",
    "right" : "scope = traverseGetProp(n, scope);",
    "info" : "ExpressionStatement[10171-10205]:ExpressionStatement[10171-10205]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10214-10220]:BreakStatement[10214-10220]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[10228-10243]:SwitchCase[10228-10243]"
  }, {
    "left" : "scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
    "right" : "scope = traverseAnd(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
    "info" : "ExpressionStatement[10252-10339]:ExpressionStatement[10252-10339]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10348-10354]:BreakStatement[10348-10354]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[10362-10376]:SwitchCase[10362-10376]"
  }, {
    "left" : "scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
    "right" : "scope = traverseOr(n, scope).getJoinedFlowScope()\n            .createChildFlowScope();",
    "info" : "ExpressionStatement[10385-10471]:ExpressionStatement[10385-10471]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10480-10486]:BreakStatement[10480-10486]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[10494-10510]:SwitchCase[10494-10510]"
  }, {
    "left" : "scope = traverseHook(n, scope);",
    "right" : "scope = traverseHook(n, scope);",
    "info" : "ExpressionStatement[10519-10550]:ExpressionStatement[10519-10550]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10559-10565]:BreakStatement[10559-10565]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[10573-10594]:SwitchCase[10573-10594]"
  }, {
    "left" : "scope = traverseObjectLiteral(n, scope);",
    "right" : "scope = traverseObjectLiteral(n, scope);",
    "info" : "ExpressionStatement[10603-10643]:ExpressionStatement[10603-10643]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10652-10658]:BreakStatement[10652-10658]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[10666-10682]:SwitchCase[10666-10682]"
  }, {
    "left" : "scope = traverseCall(n, scope);",
    "right" : "scope = traverseCall(n, scope);",
    "info" : "ExpressionStatement[10691-10722]:ExpressionStatement[10691-10722]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10731-10737]:BreakStatement[10731-10737]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[10745-10760]:SwitchCase[10745-10760]"
  }, {
    "left" : "scope = traverseNew(n, scope);",
    "right" : "scope = traverseNew(n, scope);",
    "info" : "ExpressionStatement[10769-10799]:ExpressionStatement[10769-10799]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10808-10814]:BreakStatement[10808-10814]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[10822-10844]:SwitchCase[10822-10844]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[10851-10866]:SwitchCase[10851-10866]"
  }, {
    "left" : "scope = traverseAdd(n, scope);",
    "right" : "scope = traverseAdd(n, scope);",
    "info" : "ExpressionStatement[10875-10905]:ExpressionStatement[10875-10905]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[10914-10920]:BreakStatement[10914-10920]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[10928-10943]:SwitchCase[10928-10943]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[10950-10965]:SwitchCase[10950-10965]"
  }, {
    "left" : "scope = traverse(n.getFirstChild(), scope);",
    "right" : "scope = traverse(n.getFirstChild(), scope);",
    "info" : "ExpressionStatement[10974-11017]:ExpressionStatement[10974-11017]"
  }, {
    "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "info" : "ExpressionStatement[11042-11082]:ExpressionStatement[11042-11082]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11091-11097]:BreakStatement[11091-11097]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[11105-11125]:SwitchCase[11105-11125]"
  }, {
    "left" : "scope = traverseArrayLiteral(n, scope);",
    "right" : "scope = traverseArrayLiteral(n, scope);",
    "info" : "ExpressionStatement[11134-11173]:ExpressionStatement[11134-11173]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11182-11188]:BreakStatement[11182-11188]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[11196-11212]:SwitchCase[11196-11212]"
  }, {
    "left" : "n.setJSType(scope.getTypeOfThis());",
    "right" : "n.setJSType(scope.getTypeOfThis());",
    "info" : "ExpressionStatement[11221-11256]:ExpressionStatement[11221-11256]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11265-11271]:BreakStatement[11265-11271]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[11279-11301]:SwitchCase[11279-11301]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[11308-11330]:SwitchCase[11308-11330]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[11337-11352]:SwitchCase[11337-11352]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[11359-11374]:SwitchCase[11359-11374]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[11381-11404]:SwitchCase[11381-11404]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[11411-11427]:SwitchCase[11411-11427]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[11434-11456]:SwitchCase[11434-11456]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[11463-11485]:SwitchCase[11463-11485]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[11492-11517]:SwitchCase[11492-11517]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[11524-11549]:SwitchCase[11524-11549]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[11556-11580]:SwitchCase[11556-11580]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[11587-11609]:SwitchCase[11587-11609]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[11616-11638]:SwitchCase[11616-11638]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[11645-11660]:SwitchCase[11645-11660]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[11667-11682]:SwitchCase[11667-11682]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[11689-11707]:SwitchCase[11689-11707]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[11714-11732]:SwitchCase[11714-11732]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[11739-11756]:SwitchCase[11739-11756]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[11763-11778]:SwitchCase[11763-11778]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[11785-11800]:SwitchCase[11785-11800]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[11807-11822]:SwitchCase[11807-11822]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[11829-11844]:SwitchCase[11829-11844]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[11851-11869]:SwitchCase[11851-11869]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[11878-11913]:ExpressionStatement[11878-11913]"
  }, {
    "left" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "right" : "n.setJSType(getNativeType(NUMBER_TYPE));",
    "info" : "ExpressionStatement[11922-11962]:ExpressionStatement[11922-11962]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[11971-11977]:BreakStatement[11971-11977]"
  }, {
    "left" : "case Token.PARAM_LIST:",
    "right" : "case Token.PARAM_LIST:",
    "info" : "SwitchCase[11985-12007]:SwitchCase[11985-12007]"
  }, {
    "left" : "scope = traverse(n.getFirstChild(), scope);",
    "right" : "scope = traverse(n.getFirstChild(), scope);",
    "info" : "ExpressionStatement[12016-12059]:ExpressionStatement[12016-12059]"
  }, {
    "left" : "n.setJSType(getJSType(n.getFirstChild()));",
    "right" : "n.setJSType(getJSType(n.getFirstChild()));",
    "info" : "ExpressionStatement[12068-12110]:ExpressionStatement[12068-12110]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12119-12125]:BreakStatement[12119-12125]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[12133-12150]:SwitchCase[12133-12150]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[12159-12194]:ExpressionStatement[12159-12194]"
  }, {
    "left" : "n.setJSType(getJSType(n.getLastChild()));",
    "right" : "n.setJSType(getJSType(n.getLastChild()));",
    "info" : "ExpressionStatement[12203-12244]:ExpressionStatement[12203-12244]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12253-12259]:BreakStatement[12253-12259]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[12267-12285]:SwitchCase[12267-12285]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[12294-12329]:ExpressionStatement[12294-12329]"
  }, {
    "left" : "n.setJSType(getNativeType(STRING_TYPE));",
    "right" : "n.setJSType(getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[12338-12378]:ExpressionStatement[12338-12378]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12387-12393]:BreakStatement[12387-12393]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[12401-12420]:SwitchCase[12401-12420]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[12427-12441]:SwitchCase[12427-12441]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[12448-12462]:SwitchCase[12448-12462]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[12469-12483]:SwitchCase[12469-12483]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[12490-12504]:SwitchCase[12490-12504]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[12511-12526]:SwitchCase[12511-12526]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[12533-12547]:SwitchCase[12533-12547]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[12554-12568]:SwitchCase[12554-12568]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[12575-12591]:SwitchCase[12575-12591]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[12598-12614]:SwitchCase[12598-12614]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[12621-12643]:SwitchCase[12621-12643]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[12650-12664]:SwitchCase[12650-12664]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[12673-12708]:ExpressionStatement[12673-12708]"
  }, {
    "left" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
    "right" : "n.setJSType(getNativeType(BOOLEAN_TYPE));",
    "info" : "ExpressionStatement[12717-12758]:ExpressionStatement[12717-12758]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12767-12773]:BreakStatement[12767-12773]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[12781-12800]:SwitchCase[12781-12800]"
  }, {
    "left" : "scope = traverseGetElem(n, scope);",
    "right" : "scope = traverseGetElem(n, scope);",
    "info" : "ExpressionStatement[12809-12843]:ExpressionStatement[12809-12843]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[12852-12858]:BreakStatement[12852-12858]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[12866-12889]:SwitchCase[12866-12889]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[12898-12933]:ExpressionStatement[12898-12933]"
  }, {
    "left" : "if (n.getFirstChild().isGetProp())",
    "right" : "if (n.getFirstChild().isGetProp())",
    "info" : "IfStatement[12942-13041]:IfStatement[12942-13041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12977-13041]:Block[12977-13041]"
  }, {
    "left" : "ensurePropertyDeclared(n.getFirstChild());",
    "right" : "ensurePropertyDeclared(n.getFirstChild());",
    "info" : "ExpressionStatement[12989-13031]:ExpressionStatement[12989-13031]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13050-13056]:BreakStatement[13050-13056]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[13064-13082]:SwitchCase[13064-13082]"
  }, {
    "left" : "scope = traverse(n.getFirstChild(), scope);",
    "right" : "scope = traverse(n.getFirstChild(), scope);",
    "info" : "ExpressionStatement[13091-13134]:ExpressionStatement[13091-13134]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13143-13149]:BreakStatement[13143-13149]"
  }, {
    "left" : "case Token.RETURN:",
    "right" : "case Token.RETURN:",
    "info" : "SwitchCase[13157-13175]:SwitchCase[13157-13175]"
  }, {
    "left" : "scope = traverseReturn(n, scope);",
    "right" : "scope = traverseReturn(n, scope);",
    "info" : "ExpressionStatement[13184-13217]:ExpressionStatement[13184-13217]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13226-13232]:BreakStatement[13226-13232]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[13240-13255]:SwitchCase[13240-13255]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[13262-13279]:SwitchCase[13262-13279]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[13288-13323]:ExpressionStatement[13288-13323]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13332-13338]:BreakStatement[13332-13338]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[13346-13363]:SwitchCase[13346-13363]"
  }, {
    "left" : "scope = traverseCatch(n, scope);",
    "right" : "scope = traverseCatch(n, scope);",
    "info" : "ExpressionStatement[13372-13404]:ExpressionStatement[13372-13404]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[13413-13419]:BreakStatement[13413-13419]"
  }, {
    "left" : "if (!n.isFunction())",
    "right" : "if (!n.isFunction())",
    "info" : "IfStatement[13430-14003]:IfStatement[13430-14003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13451-14003]:Block[13451-14003]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[13459-13493]:VariableDeclarationStatement[13459-13493]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[13500-13997]:IfStatement[13500-13997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13536-13997]:Block[13536-13997]"
  }, {
    "left" : "JSType castType = info.getType().evaluate(syntacticScope, registry);",
    "right" : "JSType castType = info.getType().evaluate(syntacticScope, registry);",
    "info" : "VariableDeclarationStatement[13546-13614]:VariableDeclarationStatement[13546-13614]"
  }, {
    "left" : "if (n.isQualifiedName() &&\n            n.getParent().isExprResult())",
    "right" : "if (n.isQualifiedName() &&\n            n.getParent().isExprResult())",
    "info" : "IfStatement[13806-13957]:IfStatement[13806-13957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13875-13957]:Block[13875-13957]"
  }, {
    "left" : "updateScopeForTypeChange(scope, n, n.getJSType(), castType);",
    "right" : "updateScopeForTypeChange(scope, n, n.getJSType(), castType);",
    "info" : "ExpressionStatement[13887-13947]:ExpressionStatement[13887-13947]"
  }, {
    "left" : "n.setJSType(castType);",
    "right" : "n.setJSType(castType);",
    "info" : "ExpressionStatement[13967-13989]:ExpressionStatement[13967-13989]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[14009-14022]:ReturnStatement[14009-14022]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14072-14079]:Modifier[14072-14079]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[14080-14089]:SimpleType[14080-14089]"
  }, {
    "left" : "traverseReturn",
    "right" : "traverseReturn",
    "info" : "SimpleName[14090-14104]:SimpleName[14090-14104]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14105-14111]:SingleVariableDeclaration[14105-14111]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[14113-14128]:SingleVariableDeclaration[14113-14128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14130-14568]:Block[14130-14568]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[14136-14171]:ExpressionStatement[14136-14171]"
  }, {
    "left" : "Node retValue = n.getFirstChild();",
    "right" : "Node retValue = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[14177-14211]:VariableDeclarationStatement[14177-14211]"
  }, {
    "left" : "if (retValue != null)",
    "right" : "if (retValue != null)",
    "info" : "IfStatement[14216-14546]:IfStatement[14216-14546]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14238-14546]:Block[14238-14546]"
  }, {
    "left" : "JSType type = functionScope.getRootNode().getJSType();",
    "right" : "JSType type = functionScope.getRootNode().getJSType();",
    "info" : "VariableDeclarationStatement[14246-14300]:VariableDeclarationStatement[14246-14300]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[14307-14540]:IfStatement[14307-14540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14325-14540]:Block[14325-14540]"
  }, {
    "left" : "FunctionType fnType = type.toMaybeFunctionType();",
    "right" : "FunctionType fnType = type.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[14335-14384]:VariableDeclarationStatement[14335-14384]"
  }, {
    "left" : "if (fnType != null)",
    "right" : "if (fnType != null)",
    "info" : "IfStatement[14393-14532]:IfStatement[14393-14532]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14413-14532]:Block[14413-14532]"
  }, {
    "left" : "inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());",
    "right" : "inferPropertyTypesToMatchConstraint(\n              retValue.getJSType(), fnType.getReturnType());",
    "info" : "ExpressionStatement[14425-14522]:ExpressionStatement[14425-14522]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[14551-14564]:ReturnStatement[14551-14564]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14715-14722]:Modifier[14715-14722]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[14723-14732]:SimpleType[14723-14732]"
  }, {
    "left" : "traverseCatch",
    "right" : "traverseCatch",
    "info" : "SimpleName[14733-14746]:SimpleName[14733-14746]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14747-14753]:SingleVariableDeclaration[14747-14753]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[14755-14770]:SingleVariableDeclaration[14755-14770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14772-14959]:Block[14772-14959]"
  }, {
    "left" : "Node name = n.getFirstChild();",
    "right" : "Node name = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[14778-14808]:VariableDeclarationStatement[14778-14808]"
  }, {
    "left" : "JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "right" : "JSType type = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "info" : "VariableDeclarationStatement[14813-14868]:VariableDeclarationStatement[14813-14868]"
  }, {
    "left" : "name.setJSType(type);",
    "right" : "name.setJSType(type);",
    "info" : "ExpressionStatement[14873-14894]:ExpressionStatement[14873-14894]"
  }, {
    "left" : "redeclareSimpleVar(scope, name, type);",
    "right" : "redeclareSimpleVar(scope, name, type);",
    "info" : "ExpressionStatement[14899-14937]:ExpressionStatement[14899-14937]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[14942-14955]:ReturnStatement[14942-14955]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14963-14970]:Modifier[14963-14970]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[14971-14980]:SimpleType[14971-14980]"
  }, {
    "left" : "traverseAssign",
    "right" : "traverseAssign",
    "info" : "SimpleName[14981-14995]:SimpleName[14981-14995]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14996-15002]:SingleVariableDeclaration[14996-15002]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[15004-15019]:SingleVariableDeclaration[15004-15019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15021-15329]:Block[15021-15329]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[15027-15057]:VariableDeclarationStatement[15027-15057]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[15062-15092]:VariableDeclarationStatement[15062-15092]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[15097-15132]:ExpressionStatement[15097-15132]"
  }, {
    "left" : "JSType leftType = left.getJSType();",
    "right" : "JSType leftType = left.getJSType();",
    "info" : "VariableDeclarationStatement[15138-15173]:VariableDeclarationStatement[15138-15173]"
  }, {
    "left" : "JSType rightType = getJSType(right);",
    "right" : "JSType rightType = getJSType(right);",
    "info" : "VariableDeclarationStatement[15178-15214]:VariableDeclarationStatement[15178-15214]"
  }, {
    "left" : "n.setJSType(rightType);",
    "right" : "n.setJSType(rightType);",
    "info" : "ExpressionStatement[15219-15242]:ExpressionStatement[15219-15242]"
  }, {
    "left" : "updateScopeForTypeChange(scope, left, leftType, rightType);",
    "right" : "updateScopeForTypeChange(scope, left, leftType, rightType);",
    "info" : "ExpressionStatement[15248-15307]:ExpressionStatement[15248-15307]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[15312-15325]:ReturnStatement[15312-15325]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15450-15457]:Modifier[15450-15457]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15458-15462]:PrimitiveType[15458-15462]"
  }, {
    "left" : "updateScopeForTypeChange",
    "right" : "updateScopeForTypeChange",
    "info" : "SimpleName[15463-15487]:SimpleName[15463-15487]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[15495-15510]:SingleVariableDeclaration[15495-15510]"
  }, {
    "left" : "Node left",
    "right" : "Node left",
    "info" : "SingleVariableDeclaration[15512-15521]:SingleVariableDeclaration[15512-15521]"
  }, {
    "left" : "JSType leftType",
    "right" : "JSType leftType",
    "info" : "SingleVariableDeclaration[15523-15538]:SingleVariableDeclaration[15523-15538]"
  }, {
    "left" : "JSType resultType",
    "right" : "JSType resultType",
    "info" : "SingleVariableDeclaration[15540-15557]:SingleVariableDeclaration[15540-15557]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15559-17244]:Block[15559-17244]"
  }, {
    "left" : "Preconditions.checkNotNull(resultType);",
    "right" : "Preconditions.checkNotNull(resultType);",
    "info" : "ExpressionStatement[15565-15604]:ExpressionStatement[15565-15604]"
  }, {
    "left" : "switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }",
    "right" : "switch (left.getType()) {\n      case Token.NAME:\n        String varName = left.getString();\n        Var var = syntacticScope.getVar(varName);\n\n        // When looking at VAR initializers for declared VARs, we trust\n        // the declared type over the type it's being initialized to.\n        // This has two purposes:\n        // 1) We avoid re-declaring declared variables so that built-in\n        //    types defined in externs are not redeclared.\n        // 2) When there's a lexical closure like\n        //    /** @type {?string} */ var x = null;\n        //    function f() { x = 'xyz'; }\n        //    the inference will ignore the lexical closure,\n        //    which is just wrong. This bug needs to be fixed eventually.\n        boolean isVarDeclaration = left.hasChildren();\n        if (!isVarDeclaration || var == null || var.isTypeInferred()) {\n          redeclareSimpleVar(scope, left, resultType);\n        }\n        left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);\n\n        if (var != null && var.isTypeInferred()) {\n          JSType oldType = var.getType();\n          var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));\n        }\n        break;\n      case Token.GETPROP:\n        String qualifiedName = left.getQualifiedName();\n        if (qualifiedName != null) {\n          scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);\n        }\n\n        left.setJSType(resultType);\n        ensurePropertyDefined(left, resultType);\n        break;\n    }",
    "info" : "SwitchStatement[15609-17240]:SwitchStatement[15609-17240]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[15641-15657]:SwitchCase[15641-15657]"
  }, {
    "left" : "String varName = left.getString();",
    "right" : "String varName = left.getString();",
    "info" : "VariableDeclarationStatement[15666-15700]:VariableDeclarationStatement[15666-15700]"
  }, {
    "left" : "Var var = syntacticScope.getVar(varName);",
    "right" : "Var var = syntacticScope.getVar(varName);",
    "info" : "VariableDeclarationStatement[15709-15750]:VariableDeclarationStatement[15709-15750]"
  }, {
    "left" : "boolean isVarDeclaration = left.hasChildren();",
    "right" : "boolean isVarDeclaration = left.hasChildren();",
    "info" : "VariableDeclarationStatement[16345-16391]:VariableDeclarationStatement[16345-16391]"
  }, {
    "left" : "if (!isVarDeclaration || var == null || var.isTypeInferred())",
    "right" : "if (!isVarDeclaration || var == null || var.isTypeInferred())",
    "info" : "IfStatement[16400-16528]:IfStatement[16400-16528]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16462-16528]:Block[16462-16528]"
  }, {
    "left" : "redeclareSimpleVar(scope, left, resultType);",
    "right" : "redeclareSimpleVar(scope, left, resultType);",
    "info" : "ExpressionStatement[16474-16518]:ExpressionStatement[16474-16518]"
  }, {
    "left" : "left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);",
    "right" : "left.setJSType(isVarDeclaration || leftType == null ?\n            resultType : null);",
    "info" : "ExpressionStatement[16537-16622]:ExpressionStatement[16537-16622]"
  }, {
    "left" : "if (var != null && var.isTypeInferred())",
    "right" : "if (var != null && var.isTypeInferred())",
    "info" : "IfStatement[16632-16833]:IfStatement[16632-16833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16673-16833]:Block[16673-16833]"
  }, {
    "left" : "JSType oldType = var.getType();",
    "right" : "JSType oldType = var.getType();",
    "info" : "VariableDeclarationStatement[16685-16716]:VariableDeclarationStatement[16685-16716]"
  }, {
    "left" : "var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));",
    "right" : "var.setType(oldType == null ?\n              resultType : oldType.getLeastSupertype(resultType));",
    "info" : "ExpressionStatement[16727-16823]:ExpressionStatement[16727-16823]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16842-16848]:BreakStatement[16842-16848]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[16855-16874]:SwitchCase[16855-16874]"
  }, {
    "left" : "String qualifiedName = left.getQualifiedName();",
    "right" : "String qualifiedName = left.getQualifiedName();",
    "info" : "VariableDeclarationStatement[16883-16930]:VariableDeclarationStatement[16883-16930]"
  }, {
    "left" : "if (qualifiedName != null)",
    "right" : "if (qualifiedName != null)",
    "info" : "IfStatement[16939-17133]:IfStatement[16939-17133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16966-17133]:Block[16966-17133]"
  }, {
    "left" : "scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);",
    "right" : "scope.inferQualifiedSlot(left, qualifiedName,\n              leftType == null ? getNativeType(UNKNOWN_TYPE) : leftType,\n              resultType);",
    "info" : "ExpressionStatement[16978-17123]:ExpressionStatement[16978-17123]"
  }, {
    "left" : "left.setJSType(resultType);",
    "right" : "left.setJSType(resultType);",
    "info" : "ExpressionStatement[17143-17170]:ExpressionStatement[17143-17170]"
  }, {
    "left" : "ensurePropertyDefined(left, resultType);",
    "right" : "ensurePropertyDefined(left, resultType);",
    "info" : "ExpressionStatement[17179-17219]:ExpressionStatement[17179-17219]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17228-17234]:BreakStatement[17228-17234]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[17326-17333]:Modifier[17326-17333]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17334-17338]:PrimitiveType[17334-17338]"
  }, {
    "left" : "ensurePropertyDefined",
    "right" : "ensurePropertyDefined",
    "info" : "SimpleName[17339-17360]:SimpleName[17339-17360]"
  }, {
    "left" : "Node getprop",
    "right" : "Node getprop",
    "info" : "SingleVariableDeclaration[17361-17373]:SingleVariableDeclaration[17361-17373]"
  }, {
    "left" : "JSType rightType",
    "right" : "JSType rightType",
    "info" : "SingleVariableDeclaration[17375-17391]:SingleVariableDeclaration[17375-17391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17393-19258]:Block[17393-19258]"
  }, {
    "left" : "String propName = getprop.getLastChild().getString();",
    "right" : "String propName = getprop.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[17399-17452]:VariableDeclarationStatement[17399-17452]"
  }, {
    "left" : "JSType nodeType = getJSType(getprop.getFirstChild());",
    "right" : "JSType nodeType = getJSType(getprop.getFirstChild());",
    "info" : "VariableDeclarationStatement[17457-17510]:VariableDeclarationStatement[17457-17510]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());",
    "right" : "ObjectType objectType = ObjectType.cast(\n        nodeType.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[17515-17605]:VariableDeclarationStatement[17515-17605]"
  }, {
    "left" : "if (objectType == null)",
    "right" : "if (objectType == null)",
    "info" : "IfStatement[17610-19254]:IfStatement[17610-19254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17634-17700]:Block[17634-17700]"
  }, {
    "left" : "registry.registerPropertyOnType(propName, nodeType);",
    "right" : "registry.registerPropertyOnType(propName, nodeType);",
    "info" : "ExpressionStatement[17642-17694]:ExpressionStatement[17642-17694]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17706-19254]:Block[17706-19254]"
  }, {
    "left" : "if (ensurePropertyDeclaredHelper(getprop, objectType))",
    "right" : "if (ensurePropertyDeclaredHelper(getprop, objectType))",
    "info" : "IfStatement[17714-17794]:IfStatement[17714-17794]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17769-17794]:Block[17769-17794]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[17779-17786]:ReturnStatement[17779-17786]"
  }, {
    "left" : "if (!objectType.isPropertyTypeDeclared(propName))",
    "right" : "if (!objectType.isPropertyTypeDeclared(propName))",
    "info" : "IfStatement[17802-19248]:IfStatement[17802-19248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17852-19248]:Block[17852-19248]"
  }, {
    "left" : "if (objectType.hasProperty(propName) ||\n            !objectType.isInstanceType())",
    "right" : "if (objectType.hasProperty(propName) ||\n            !objectType.isInstanceType())",
    "info" : "IfStatement[18550-19240]:IfStatement[18550-19240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18632-18908]:Block[18632-18908]"
  }, {
    "left" : "if (\"prototype\".equals(propName))",
    "right" : "if (\"prototype\".equals(propName))",
    "info" : "IfStatement[18644-18898]:IfStatement[18644-18898]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18678-18785]:Block[18678-18785]"
  }, {
    "left" : "objectType.defineDeclaredProperty(\n                propName, rightType, getprop);",
    "right" : "objectType.defineDeclaredProperty(\n                propName, rightType, getprop);",
    "info" : "ExpressionStatement[18692-18773]:ExpressionStatement[18692-18773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18791-18898]:Block[18791-18898]"
  }, {
    "left" : "objectType.defineInferredProperty(\n                propName, rightType, getprop);",
    "right" : "objectType.defineInferredProperty(\n                propName, rightType, getprop);",
    "info" : "ExpressionStatement[18805-18886]:ExpressionStatement[18805-18886]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18914-19240]:Block[18914-19240]"
  }, {
    "left" : "if (getprop.getFirstChild().isThis() &&\n              getJSType(syntacticScope.getRootNode()).isConstructor())",
    "right" : "if (getprop.getFirstChild().isThis() &&\n              getJSType(syntacticScope.getRootNode()).isConstructor())",
    "info" : "IfStatement[18926-19230]:IfStatement[18926-19230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19037-19144]:Block[19037-19144]"
  }, {
    "left" : "objectType.defineInferredProperty(\n                propName, rightType, getprop);",
    "right" : "objectType.defineInferredProperty(\n                propName, rightType, getprop);",
    "info" : "ExpressionStatement[19051-19132]:ExpressionStatement[19051-19132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19150-19230]:Block[19150-19230]"
  }, {
    "left" : "registry.registerPropertyOnType(propName, objectType);",
    "right" : "registry.registerPropertyOnType(propName, objectType);",
    "info" : "ExpressionStatement[19164-19218]:ExpressionStatement[19164-19218]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19529-19536]:Modifier[19529-19536]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19537-19541]:PrimitiveType[19537-19541]"
  }, {
    "left" : "ensurePropertyDeclared",
    "right" : "ensurePropertyDeclared",
    "info" : "SimpleName[19542-19564]:SimpleName[19542-19564]"
  }, {
    "left" : "Node getprop",
    "right" : "Node getprop",
    "info" : "SingleVariableDeclaration[19565-19577]:SingleVariableDeclaration[19565-19577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19579-19795]:Block[19579-19795]"
  }, {
    "left" : "ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());",
    "right" : "ObjectType ownerType = ObjectType.cast(\n        getJSType(getprop.getFirstChild()).restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[19585-19700]:VariableDeclarationStatement[19585-19700]"
  }, {
    "left" : "if (ownerType != null)",
    "right" : "if (ownerType != null)",
    "info" : "IfStatement[19705-19791]:IfStatement[19705-19791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19728-19791]:Block[19728-19791]"
  }, {
    "left" : "ensurePropertyDeclaredHelper(getprop, ownerType);",
    "right" : "ensurePropertyDeclaredHelper(getprop, ownerType);",
    "info" : "ExpressionStatement[19736-19785]:ExpressionStatement[19736-19785]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19910-19917]:Modifier[19910-19917]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[19918-19925]:PrimitiveType[19918-19925]"
  }, {
    "left" : "ensurePropertyDeclaredHelper",
    "right" : "ensurePropertyDeclaredHelper",
    "info" : "SimpleName[19926-19954]:SimpleName[19926-19954]"
  }, {
    "left" : "Node getprop",
    "right" : "Node getprop",
    "info" : "SingleVariableDeclaration[19962-19974]:SingleVariableDeclaration[19962-19974]"
  }, {
    "left" : "ObjectType objectType",
    "right" : "ObjectType objectType",
    "info" : "SingleVariableDeclaration[19976-19997]:SingleVariableDeclaration[19976-19997]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19999-20744]:Block[19999-20744]"
  }, {
    "left" : "String propName = getprop.getLastChild().getString();",
    "right" : "String propName = getprop.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[20005-20058]:VariableDeclarationStatement[20005-20058]"
  }, {
    "left" : "String qName = getprop.getQualifiedName();",
    "right" : "String qName = getprop.getQualifiedName();",
    "info" : "VariableDeclarationStatement[20063-20105]:VariableDeclarationStatement[20063-20105]"
  }, {
    "left" : "if (qName != null)",
    "right" : "if (qName != null)",
    "info" : "IfStatement[20110-20722]:IfStatement[20110-20722]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20129-20722]:Block[20129-20722]"
  }, {
    "left" : "Var var = syntacticScope.getVar(qName);",
    "right" : "Var var = syntacticScope.getVar(qName);",
    "info" : "VariableDeclarationStatement[20137-20176]:VariableDeclarationStatement[20137-20176]"
  }, {
    "left" : "if (var != null && !var.isTypeInferred())",
    "right" : "if (var != null && !var.isTypeInferred())",
    "info" : "IfStatement[20183-20716]:IfStatement[20183-20716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20225-20716]:Block[20225-20716]"
  }, {
    "left" : "if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType()))))",
    "right" : "if (propName.equals(\"prototype\") ||\n        // Handle prototype declarations that could not be addressed earlier.\n            (!objectType.hasOwnProperty(propName) &&\n             (!objectType.isInstanceType() ||\n                 (var.isExtern() && !objectType.isNativeObjectType()))))",
    "info" : "IfStatement[20310-20708]:IfStatement[20310-20708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20596-20708]:Block[20596-20708]"
  }, {
    "left" : "return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);",
    "right" : "return objectType.defineDeclaredProperty(\n              propName, var.getType(), getprop);",
    "info" : "ReturnStatement[20608-20698]:ReturnStatement[20608-20698]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[20727-20740]:ReturnStatement[20727-20740]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20748-20755]:Modifier[20748-20755]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[20756-20765]:SimpleType[20756-20765]"
  }, {
    "left" : "traverseName",
    "right" : "traverseName",
    "info" : "SimpleName[20766-20778]:SimpleName[20766-20778]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[20779-20785]:SingleVariableDeclaration[20779-20785]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[20787-20802]:SingleVariableDeclaration[20787-20802]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20804-22168]:Block[20804-22168]"
  }, {
    "left" : "String varName = n.getString();",
    "right" : "String varName = n.getString();",
    "info" : "VariableDeclarationStatement[20810-20841]:VariableDeclarationStatement[20810-20841]"
  }, {
    "left" : "Node value = n.getFirstChild();",
    "right" : "Node value = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[20846-20877]:VariableDeclarationStatement[20846-20877]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[20882-20910]:VariableDeclarationStatement[20882-20910]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[20915-22123]:IfStatement[20915-22123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20934-21104]:Block[20934-21104]"
  }, {
    "left" : "scope = traverse(value, scope);",
    "right" : "scope = traverse(value, scope);",
    "info" : "ExpressionStatement[20942-20973]:ExpressionStatement[20942-20973]"
  }, {
    "left" : "updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));",
    "right" : "updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,\n          getJSType(value));",
    "info" : "ExpressionStatement[20980-21078]:ExpressionStatement[20980-21078]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[21085-21098]:ReturnStatement[21085-21098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21110-22123]:Block[21110-22123]"
  }, {
    "left" : "StaticSlot<JSType> var = scope.getSlot(varName);",
    "right" : "StaticSlot<JSType> var = scope.getSlot(varName);",
    "info" : "VariableDeclarationStatement[21118-21166]:VariableDeclarationStatement[21118-21166]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[21173-22117]:IfStatement[21173-22117]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21190-22117]:Block[21190-22117]"
  }, {
    "left" : "boolean isInferred = var.isTypeInferred();",
    "right" : "boolean isInferred = var.isTypeInferred();",
    "info" : "VariableDeclarationStatement[21453-21495]:VariableDeclarationStatement[21453-21495]"
  }, {
    "left" : "boolean unflowable = isInferred &&\n            isUnflowable(syntacticScope.getVar(varName));",
    "right" : "boolean unflowable = isInferred &&\n            isUnflowable(syntacticScope.getVar(varName));",
    "info" : "VariableDeclarationStatement[21504-21596]:VariableDeclarationStatement[21504-21596]"
  }, {
    "left" : "boolean nonLocalInferredSlot =\n            isInferred &&\n            syntacticScope.getParent() != null &&\n            var == syntacticScope.getParent().getSlot(varName);",
    "right" : "boolean nonLocalInferredSlot =\n            isInferred &&\n            syntacticScope.getParent() != null &&\n            var == syntacticScope.getParent().getSlot(varName);",
    "info" : "VariableDeclarationStatement[21754-21924]:VariableDeclarationStatement[21754-21924]"
  }, {
    "left" : "if (!unflowable && !nonLocalInferredSlot)",
    "right" : "if (!unflowable && !nonLocalInferredSlot)",
    "info" : "IfStatement[21934-22109]:IfStatement[21934-22109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21976-22109]:Block[21976-22109]"
  }, {
    "left" : "type = var.getType();",
    "right" : "type = var.getType();",
    "info" : "ExpressionStatement[21988-22009]:ExpressionStatement[21988-22009]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[22020-22099]:IfStatement[22020-22099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22038-22099]:Block[22038-22099]"
  }, {
    "left" : "type = getNativeType(UNKNOWN_TYPE);",
    "right" : "type = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[22052-22087]:ExpressionStatement[22052-22087]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[22128-22146]:ExpressionStatement[22128-22146]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[22151-22164]:ReturnStatement[22151-22164]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22217-22224]:Modifier[22217-22224]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[22225-22234]:SimpleType[22225-22234]"
  }, {
    "left" : "traverseArrayLiteral",
    "right" : "traverseArrayLiteral",
    "info" : "SimpleName[22235-22255]:SimpleName[22235-22255]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[22256-22262]:SingleVariableDeclaration[22256-22262]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[22264-22279]:SingleVariableDeclaration[22264-22279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22281-22388]:Block[22281-22388]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[22287-22322]:ExpressionStatement[22287-22322]"
  }, {
    "left" : "n.setJSType(getNativeType(ARRAY_TYPE));",
    "right" : "n.setJSType(getNativeType(ARRAY_TYPE));",
    "info" : "ExpressionStatement[22327-22366]:ExpressionStatement[22327-22366]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[22371-22384]:ReturnStatement[22371-22384]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[22392-22399]:Modifier[22392-22399]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[22400-22409]:SimpleType[22400-22409]"
  }, {
    "left" : "traverseObjectLiteral",
    "right" : "traverseObjectLiteral",
    "info" : "SimpleName[22410-22431]:SimpleName[22410-22431]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[22432-22438]:SingleVariableDeclaration[22432-22438]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[22440-22455]:SingleVariableDeclaration[22440-22455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22457-24650]:Block[22457-24650]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[22463-22491]:VariableDeclarationStatement[22463-22491]"
  }, {
    "left" : "Preconditions.checkNotNull(type);",
    "right" : "Preconditions.checkNotNull(type);",
    "info" : "ExpressionStatement[22496-22529]:ExpressionStatement[22496-22529]"
  }, {
    "left" : "for (Node name = n.getFirstChild(); name != null; name = name.getNext())",
    "right" : "for (Node name = n.getFirstChild(); name != null; name = name.getNext())",
    "info" : "ForStatement[22535-22668]:ForStatement[22535-22668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22608-22668]:Block[22608-22668]"
  }, {
    "left" : "scope = traverse(name.getFirstChild(), scope);",
    "right" : "scope = traverse(name.getFirstChild(), scope);",
    "info" : "ExpressionStatement[22616-22662]:ExpressionStatement[22616-22662]"
  }, {
    "left" : "ObjectType objectType = ObjectType.cast(type);",
    "right" : "ObjectType objectType = ObjectType.cast(type);",
    "info" : "VariableDeclarationStatement[22981-23027]:VariableDeclarationStatement[22981-23027]"
  }, {
    "left" : "if (objectType == null)",
    "right" : "if (objectType == null)",
    "info" : "IfStatement[23032-23083]:IfStatement[23032-23083]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23056-23083]:Block[23056-23083]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[23064-23077]:ReturnStatement[23064-23077]"
  }, {
    "left" : "boolean hasLendsName = n.getJSDocInfo() != null &&\n        n.getJSDocInfo().getLendsName() != null;",
    "right" : "boolean hasLendsName = n.getJSDocInfo() != null &&\n        n.getJSDocInfo().getLendsName() != null;",
    "info" : "VariableDeclarationStatement[23089-23188]:VariableDeclarationStatement[23089-23188]"
  }, {
    "left" : "if (objectType.hasReferenceName() && !hasLendsName)",
    "right" : "if (objectType.hasReferenceName() && !hasLendsName)",
    "info" : "IfStatement[23193-23272]:IfStatement[23193-23272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23245-23272]:Block[23245-23272]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[23253-23266]:ReturnStatement[23253-23266]"
  }, {
    "left" : "String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));",
    "right" : "String qObjName = NodeUtil.getBestLValueName(\n        NodeUtil.getBestLValue(n));",
    "info" : "VariableDeclarationStatement[23278-23359]:VariableDeclarationStatement[23278-23359]"
  }, {
    "left" : "for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext())",
    "right" : "for (Node name = n.getFirstChild(); name != null;\n         name = name.getNext())",
    "info" : "ForStatement[23364-24628]:ForStatement[23364-24628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23446-24628]:Block[23446-24628]"
  }, {
    "left" : "Node value = name.getFirstChild();",
    "right" : "Node value = name.getFirstChild();",
    "info" : "VariableDeclarationStatement[23454-23488]:VariableDeclarationStatement[23454-23488]"
  }, {
    "left" : "String memberName = NodeUtil.getObjectLitKeyName(name);",
    "right" : "String memberName = NodeUtil.getObjectLitKeyName(name);",
    "info" : "VariableDeclarationStatement[23495-23550]:VariableDeclarationStatement[23495-23550]"
  }, {
    "left" : "if (memberName != null)",
    "right" : "if (memberName != null)",
    "info" : "IfStatement[23557-24622]:IfStatement[23557-24622]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23581-24557]:Block[23581-24557]"
  }, {
    "left" : "JSType rawValueType =  name.getFirstChild().getJSType();",
    "right" : "JSType rawValueType =  name.getFirstChild().getJSType();",
    "info" : "VariableDeclarationStatement[23591-23647]:VariableDeclarationStatement[23591-23647]"
  }, {
    "left" : "JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);",
    "right" : "JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(\n            name, rawValueType);",
    "info" : "VariableDeclarationStatement[23656-23750]:VariableDeclarationStatement[23656-23750]"
  }, {
    "left" : "if (valueType == null)",
    "right" : "if (valueType == null)",
    "info" : "IfStatement[23759-23844]:IfStatement[23759-23844]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23782-23844]:Block[23782-23844]"
  }, {
    "left" : "valueType = getNativeType(UNKNOWN_TYPE);",
    "right" : "valueType = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[23794-23834]:ExpressionStatement[23794-23834]"
  }, {
    "left" : "objectType.defineInferredProperty(memberName, valueType, name);",
    "right" : "objectType.defineInferredProperty(memberName, valueType, name);",
    "info" : "ExpressionStatement[23853-23916]:ExpressionStatement[23853-23916]"
  }, {
    "left" : "if (qObjName != null && name.isString())",
    "right" : "if (qObjName != null && name.isString())",
    "info" : "IfStatement[24003-24549]:IfStatement[24003-24549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24044-24549]:Block[24044-24549]"
  }, {
    "left" : "String qKeyName = qObjName + \".\" + memberName;",
    "right" : "String qKeyName = qObjName + \".\" + memberName;",
    "info" : "VariableDeclarationStatement[24056-24102]:VariableDeclarationStatement[24056-24102]"
  }, {
    "left" : "Var var = syntacticScope.getVar(qKeyName);",
    "right" : "Var var = syntacticScope.getVar(qKeyName);",
    "info" : "VariableDeclarationStatement[24113-24155]:VariableDeclarationStatement[24113-24155]"
  }, {
    "left" : "JSType oldType = var == null ? null : var.getType();",
    "right" : "JSType oldType = var == null ? null : var.getType();",
    "info" : "VariableDeclarationStatement[24166-24218]:VariableDeclarationStatement[24166-24218]"
  }, {
    "left" : "if (var != null && var.isTypeInferred())",
    "right" : "if (var != null && var.isTypeInferred())",
    "info" : "IfStatement[24229-24390]:IfStatement[24229-24390]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24270-24390]:Block[24270-24390]"
  }, {
    "left" : "var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));",
    "right" : "var.setType(oldType == null ?\n                valueType : oldType.getLeastSupertype(oldType));",
    "info" : "ExpressionStatement[24284-24378]:ExpressionStatement[24284-24378]"
  }, {
    "left" : "scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,\n              valueType);",
    "right" : "scope.inferQualifiedSlot(name, qKeyName,\n              oldType == null ? getNativeType(UNKNOWN_TYPE) : oldType,\n              valueType);",
    "info" : "ExpressionStatement[24402-24539]:ExpressionStatement[24402-24539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24563-24622]:Block[24563-24622]"
  }, {
    "left" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
    "right" : "n.setJSType(getNativeType(UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[24573-24614]:ExpressionStatement[24573-24614]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[24633-24646]:ReturnStatement[24633-24646]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24654-24661]:Modifier[24654-24661]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[24662-24671]:SimpleType[24662-24671]"
  }, {
    "left" : "traverseAdd",
    "right" : "traverseAdd",
    "info" : "SimpleName[24672-24683]:SimpleName[24672-24683]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24684-24690]:SingleVariableDeclaration[24684-24690]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[24692-24707]:SingleVariableDeclaration[24692-24707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24709-25818]:Block[24709-25818]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[24715-24745]:VariableDeclarationStatement[24715-24745]"
  }, {
    "left" : "Node right = left.getNext();",
    "right" : "Node right = left.getNext();",
    "info" : "VariableDeclarationStatement[24750-24778]:VariableDeclarationStatement[24750-24778]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[24783-24818]:ExpressionStatement[24783-24818]"
  }, {
    "left" : "JSType leftType = left.getJSType();",
    "right" : "JSType leftType = left.getJSType();",
    "info" : "VariableDeclarationStatement[24824-24859]:VariableDeclarationStatement[24824-24859]"
  }, {
    "left" : "JSType rightType = right.getJSType();",
    "right" : "JSType rightType = right.getJSType();",
    "info" : "VariableDeclarationStatement[24864-24901]:VariableDeclarationStatement[24864-24901]"
  }, {
    "left" : "JSType type = getNativeType(UNKNOWN_TYPE);",
    "right" : "JSType type = getNativeType(UNKNOWN_TYPE);",
    "info" : "VariableDeclarationStatement[24907-24949]:VariableDeclarationStatement[24907-24949]"
  }, {
    "left" : "if (leftType != null && rightType != null)",
    "right" : "if (leftType != null && rightType != null)",
    "info" : "IfStatement[24954-25677]:IfStatement[24954-25677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24997-25677]:Block[24997-25677]"
  }, {
    "left" : "boolean leftIsUnknown = leftType.isUnknownType();",
    "right" : "boolean leftIsUnknown = leftType.isUnknownType();",
    "info" : "VariableDeclarationStatement[25005-25054]:VariableDeclarationStatement[25005-25054]"
  }, {
    "left" : "boolean rightIsUnknown = rightType.isUnknownType();",
    "right" : "boolean rightIsUnknown = rightType.isUnknownType();",
    "info" : "VariableDeclarationStatement[25061-25112]:VariableDeclarationStatement[25061-25112]"
  }, {
    "left" : "if (leftIsUnknown && rightIsUnknown)",
    "right" : "if (leftIsUnknown && rightIsUnknown)",
    "info" : "IfStatement[25119-25671]:IfStatement[25119-25671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25156-25209]:Block[25156-25209]"
  }, {
    "left" : "type = getNativeType(UNKNOWN_TYPE);",
    "right" : "type = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[25166-25201]:ExpressionStatement[25166-25201]"
  }, {
    "left" : "if ((!leftIsUnknown && leftType.isString()) ||\n                 (!rightIsUnknown && rightType.isString()))",
    "right" : "if ((!leftIsUnknown && leftType.isString()) ||\n                 (!rightIsUnknown && rightType.isString()))",
    "info" : "IfStatement[25215-25671]:IfStatement[25215-25671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25322-25374]:Block[25322-25374]"
  }, {
    "left" : "type = getNativeType(STRING_TYPE);",
    "right" : "type = getNativeType(STRING_TYPE);",
    "info" : "ExpressionStatement[25332-25366]:ExpressionStatement[25332-25366]"
  }, {
    "left" : "if (leftIsUnknown || rightIsUnknown)",
    "right" : "if (leftIsUnknown || rightIsUnknown)",
    "info" : "IfStatement[25380-25671]:IfStatement[25380-25671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25417-25470]:Block[25417-25470]"
  }, {
    "left" : "type = getNativeType(UNKNOWN_TYPE);",
    "right" : "type = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[25427-25462]:ExpressionStatement[25427-25462]"
  }, {
    "left" : "if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType))",
    "right" : "if (isAddedAsNumber(leftType) && isAddedAsNumber(rightType))",
    "info" : "IfStatement[25476-25671]:IfStatement[25476-25671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25537-25589]:Block[25537-25589]"
  }, {
    "left" : "type = getNativeType(NUMBER_TYPE);",
    "right" : "type = getNativeType(NUMBER_TYPE);",
    "info" : "ExpressionStatement[25547-25581]:ExpressionStatement[25547-25581]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25595-25671]:Block[25595-25671]"
  }, {
    "left" : "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE);",
    "right" : "type = registry.createUnionType(STRING_TYPE, NUMBER_TYPE);",
    "info" : "ExpressionStatement[25605-25663]:ExpressionStatement[25605-25663]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[25682-25700]:ExpressionStatement[25682-25700]"
  }, {
    "left" : "if (n.isAssignAdd())",
    "right" : "if (n.isAssignAdd())",
    "info" : "IfStatement[25706-25795]:IfStatement[25706-25795]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25727-25795]:Block[25727-25795]"
  }, {
    "left" : "updateScopeForTypeChange(scope, left, leftType, type);",
    "right" : "updateScopeForTypeChange(scope, left, leftType, type);",
    "info" : "ExpressionStatement[25735-25789]:ExpressionStatement[25735-25789]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[25801-25814]:ReturnStatement[25801-25814]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[25822-25829]:Modifier[25822-25829]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25830-25837]:PrimitiveType[25830-25837]"
  }, {
    "left" : "isAddedAsNumber",
    "right" : "isAddedAsNumber",
    "info" : "SimpleName[25838-25853]:SimpleName[25838-25853]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[25854-25865]:SingleVariableDeclaration[25854-25865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25867-26019]:Block[25867-26019]"
  }, {
    "left" : "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));",
    "right" : "return type.isSubtype(registry.createUnionType(VOID_TYPE, NULL_TYPE,\n        NUMBER_VALUE_OR_OBJECT_TYPE, BOOLEAN_TYPE, BOOLEAN_OBJECT_TYPE));",
    "info" : "ReturnStatement[25873-26015]:ReturnStatement[25873-26015]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[26023-26030]:Modifier[26023-26030]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[26031-26040]:SimpleType[26031-26040]"
  }, {
    "left" : "traverseHook",
    "right" : "traverseHook",
    "info" : "SimpleName[26041-26053]:SimpleName[26041-26053]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[26054-26060]:SingleVariableDeclaration[26054-26060]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[26062-26077]:SingleVariableDeclaration[26062-26077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26079-27169]:Block[26079-27169]"
  }, {
    "left" : "Node condition = n.getFirstChild();",
    "right" : "Node condition = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[26085-26120]:VariableDeclarationStatement[26085-26120]"
  }, {
    "left" : "Node trueNode = condition.getNext();",
    "right" : "Node trueNode = condition.getNext();",
    "info" : "VariableDeclarationStatement[26125-26161]:VariableDeclarationStatement[26125-26161]"
  }, {
    "left" : "Node falseNode = n.getLastChild();",
    "right" : "Node falseNode = n.getLastChild();",
    "info" : "VariableDeclarationStatement[26166-26200]:VariableDeclarationStatement[26166-26200]"
  }, {
    "left" : "scope = traverse(condition, scope);",
    "right" : "scope = traverse(condition, scope);",
    "info" : "ExpressionStatement[26234-26269]:ExpressionStatement[26234-26269]"
  }, {
    "left" : "FlowScope trueScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);",
    "right" : "FlowScope trueScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, true);",
    "info" : "VariableDeclarationStatement[26349-26476]:VariableDeclarationStatement[26349-26476]"
  }, {
    "left" : "FlowScope falseScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);",
    "right" : "FlowScope falseScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            condition, scope, false);",
    "info" : "VariableDeclarationStatement[26481-26610]:VariableDeclarationStatement[26481-26610]"
  }, {
    "left" : "traverse(trueNode, trueScope.createChildFlowScope());",
    "right" : "traverse(trueNode, trueScope.createChildFlowScope());",
    "info" : "ExpressionStatement[26665-26718]:ExpressionStatement[26665-26718]"
  }, {
    "left" : "traverse(falseNode, falseScope.createChildFlowScope());",
    "right" : "traverse(falseNode, falseScope.createChildFlowScope());",
    "info" : "ExpressionStatement[26775-26830]:ExpressionStatement[26775-26830]"
  }, {
    "left" : "JSType trueType = trueNode.getJSType();",
    "right" : "JSType trueType = trueNode.getJSType();",
    "info" : "VariableDeclarationStatement[26887-26926]:VariableDeclarationStatement[26887-26926]"
  }, {
    "left" : "JSType falseType = falseNode.getJSType();",
    "right" : "JSType falseType = falseNode.getJSType();",
    "info" : "VariableDeclarationStatement[26931-26972]:VariableDeclarationStatement[26931-26972]"
  }, {
    "left" : "if (trueType != null && falseType != null)",
    "right" : "if (trueType != null && falseType != null)",
    "info" : "IfStatement[26977-27123]:IfStatement[26977-27123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27020-27085]:Block[27020-27085]"
  }, {
    "left" : "n.setJSType(trueType.getLeastSupertype(falseType));",
    "right" : "n.setJSType(trueType.getLeastSupertype(falseType));",
    "info" : "ExpressionStatement[27028-27079]:ExpressionStatement[27028-27079]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27091-27123]:Block[27091-27123]"
  }, {
    "left" : "n.setJSType(null);",
    "right" : "n.setJSType(null);",
    "info" : "ExpressionStatement[27099-27117]:ExpressionStatement[27099-27117]"
  }, {
    "left" : "return scope.createChildFlowScope();",
    "right" : "return scope.createChildFlowScope();",
    "info" : "ReturnStatement[27129-27165]:ReturnStatement[27129-27165]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27173-27180]:Modifier[27173-27180]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[27181-27190]:SimpleType[27181-27190]"
  }, {
    "left" : "traverseCall",
    "right" : "traverseCall",
    "info" : "SimpleName[27191-27203]:SimpleName[27191-27203]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[27204-27210]:SingleVariableDeclaration[27204-27210]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[27212-27227]:SingleVariableDeclaration[27212-27227]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27229-27840]:Block[27229-27840]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[27235-27270]:ExpressionStatement[27235-27270]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[27276-27306]:VariableDeclarationStatement[27276-27306]"
  }, {
    "left" : "JSType functionType = getJSType(left).restrictByNotNullOrUndefined();",
    "right" : "JSType functionType = getJSType(left).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[27311-27380]:VariableDeclarationStatement[27311-27380]"
  }, {
    "left" : "if (functionType != null)",
    "right" : "if (functionType != null)",
    "info" : "IfStatement[27385-27766]:IfStatement[27385-27766]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27411-27766]:Block[27411-27766]"
  }, {
    "left" : "if (functionType.isFunctionType())",
    "right" : "if (functionType.isFunctionType())",
    "info" : "IfStatement[27419-27760]:IfStatement[27419-27760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27454-27625]:Block[27454-27625]"
  }, {
    "left" : "FunctionType fnType = functionType.toMaybeFunctionType();",
    "right" : "FunctionType fnType = functionType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[27464-27521]:VariableDeclarationStatement[27464-27521]"
  }, {
    "left" : "n.setJSType(fnType.getReturnType());",
    "right" : "n.setJSType(fnType.getReturnType());",
    "info" : "ExpressionStatement[27530-27566]:ExpressionStatement[27530-27566]"
  }, {
    "left" : "backwardsInferenceFromCallSite(n, fnType);",
    "right" : "backwardsInferenceFromCallSite(n, fnType);",
    "info" : "ExpressionStatement[27575-27617]:ExpressionStatement[27575-27617]"
  }, {
    "left" : "if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE)))",
    "right" : "if (functionType.equals(getNativeType(CHECKED_UNKNOWN_TYPE)))",
    "info" : "IfStatement[27631-27760]:IfStatement[27631-27760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27693-27760]:Block[27693-27760]"
  }, {
    "left" : "n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));",
    "right" : "n.setJSType(getNativeType(CHECKED_UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[27703-27752]:ExpressionStatement[27703-27752]"
  }, {
    "left" : "scope = tightenTypesAfterAssertions(scope, n);",
    "right" : "scope = tightenTypesAfterAssertions(scope, n);",
    "info" : "ExpressionStatement[27772-27818]:ExpressionStatement[27772-27818]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[27823-27836]:ReturnStatement[27823-27836]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27844-27851]:Modifier[27844-27851]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[27852-27861]:SimpleType[27852-27861]"
  }, {
    "left" : "tightenTypesAfterAssertions",
    "right" : "tightenTypesAfterAssertions",
    "info" : "SimpleName[27862-27889]:SimpleName[27862-27889]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[27890-27905]:SingleVariableDeclaration[27890-27905]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[27913-27926]:SingleVariableDeclaration[27913-27926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27928-29675]:Block[27928-29675]"
  }, {
    "left" : "Node left = callNode.getFirstChild();",
    "right" : "Node left = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[27934-27971]:VariableDeclarationStatement[27934-27971]"
  }, {
    "left" : "Node firstParam = left.getNext();",
    "right" : "Node firstParam = left.getNext();",
    "info" : "VariableDeclarationStatement[27976-28009]:VariableDeclarationStatement[27976-28009]"
  }, {
    "left" : "AssertionFunctionSpec assertionFunctionSpec =\n        assertionFunctionsMap.get(left.getQualifiedName());",
    "right" : "AssertionFunctionSpec assertionFunctionSpec =\n        assertionFunctionsMap.get(left.getQualifiedName());",
    "info" : "VariableDeclarationStatement[28014-28119]:VariableDeclarationStatement[28014-28119]"
  }, {
    "left" : "if (assertionFunctionSpec == null || firstParam == null)",
    "right" : "if (assertionFunctionSpec == null || firstParam == null)",
    "info" : "IfStatement[28124-28208]:IfStatement[28124-28208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28181-28208]:Block[28181-28208]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[28189-28202]:ReturnStatement[28189-28202]"
  }, {
    "left" : "Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);",
    "right" : "Node assertedNode = assertionFunctionSpec.getAssertedParam(firstParam);",
    "info" : "VariableDeclarationStatement[28213-28284]:VariableDeclarationStatement[28213-28284]"
  }, {
    "left" : "if (assertedNode == null)",
    "right" : "if (assertedNode == null)",
    "info" : "IfStatement[28289-28342]:IfStatement[28289-28342]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28315-28342]:Block[28315-28342]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[28323-28336]:ReturnStatement[28323-28336]"
  }, {
    "left" : "JSTypeNative assertedType = assertionFunctionSpec.getAssertedType();",
    "right" : "JSTypeNative assertedType = assertionFunctionSpec.getAssertedType();",
    "info" : "VariableDeclarationStatement[28347-28415]:VariableDeclarationStatement[28347-28415]"
  }, {
    "left" : "String assertedNodeName = assertedNode.getQualifiedName();",
    "right" : "String assertedNodeName = assertedNode.getQualifiedName();",
    "info" : "VariableDeclarationStatement[28420-28478]:VariableDeclarationStatement[28420-28478]"
  }, {
    "left" : "if (assertedType == null)",
    "right" : "if (assertedType == null)",
    "info" : "IfStatement[28551-29653]:IfStatement[28551-29653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28577-29276]:Block[28577-29276]"
  }, {
    "left" : "if (assertedNodeName != null)",
    "right" : "if (assertedNodeName != null)",
    "info" : "IfStatement[28585-29270]:IfStatement[28585-29270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28615-28878]:Block[28615-28878]"
  }, {
    "left" : "JSType type = getJSType(assertedNode);",
    "right" : "JSType type = getJSType(assertedNode);",
    "info" : "VariableDeclarationStatement[28625-28663]:VariableDeclarationStatement[28625-28663]"
  }, {
    "left" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
    "right" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[28672-28726]:VariableDeclarationStatement[28672-28726]"
  }, {
    "left" : "if (type != narrowed)",
    "right" : "if (type != narrowed)",
    "info" : "IfStatement[28735-28870]:IfStatement[28735-28870]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28757-28870]:Block[28757-28870]"
  }, {
    "left" : "scope = narrowScope(scope, assertedNode, narrowed);",
    "right" : "scope = narrowScope(scope, assertedNode, narrowed);",
    "info" : "ExpressionStatement[28769-28820]:ExpressionStatement[28769-28820]"
  }, {
    "left" : "callNode.setJSType(narrowed);",
    "right" : "callNode.setJSType(narrowed);",
    "info" : "ExpressionStatement[28831-28860]:ExpressionStatement[28831-28860]"
  }, {
    "left" : "if (assertedNode.isAnd() ||\n                 assertedNode.isOr())",
    "right" : "if (assertedNode.isAnd() ||\n                 assertedNode.isOr())",
    "info" : "IfStatement[28884-29270]:IfStatement[28884-29270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28950-29270]:Block[28950-29270]"
  }, {
    "left" : "BooleanOutcomePair conditionOutcomes =\n            traverseWithinShortCircuitingBinOp(assertedNode, scope);",
    "right" : "BooleanOutcomePair conditionOutcomes =\n            traverseWithinShortCircuitingBinOp(assertedNode, scope);",
    "info" : "VariableDeclarationStatement[28960-29067]:VariableDeclarationStatement[28960-29067]"
  }, {
    "left" : "scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n            assertedNode, conditionOutcomes.getOutcomeFlowScope(\n                assertedNode.getType(), true), true);",
    "right" : "scope = reverseInterpreter.getPreciserScopeKnowingConditionOutcome(\n            assertedNode, conditionOutcomes.getOutcomeFlowScope(\n                assertedNode.getType(), true), true);",
    "info" : "ExpressionStatement[29076-29262]:ExpressionStatement[29076-29262]"
  }, {
    "left" : "if (assertedNodeName != null)",
    "right" : "if (assertedNodeName != null)",
    "info" : "IfStatement[29282-29653]:IfStatement[29282-29653]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29312-29653]:Block[29312-29653]"
  }, {
    "left" : "JSType type = getJSType(assertedNode);",
    "right" : "JSType type = getJSType(assertedNode);",
    "info" : "VariableDeclarationStatement[29395-29433]:VariableDeclarationStatement[29395-29433]"
  }, {
    "left" : "JSType narrowed = type.getGreatestSubtype(getNativeType(assertedType));",
    "right" : "JSType narrowed = type.getGreatestSubtype(getNativeType(assertedType));",
    "info" : "VariableDeclarationStatement[29440-29511]:VariableDeclarationStatement[29440-29511]"
  }, {
    "left" : "if (type != narrowed)",
    "right" : "if (type != narrowed)",
    "info" : "IfStatement[29518-29647]:IfStatement[29518-29647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29540-29647]:Block[29540-29647]"
  }, {
    "left" : "scope = narrowScope(scope, assertedNode, narrowed);",
    "right" : "scope = narrowScope(scope, assertedNode, narrowed);",
    "info" : "ExpressionStatement[29550-29601]:ExpressionStatement[29550-29601]"
  }, {
    "left" : "callNode.setJSType(narrowed);",
    "right" : "callNode.setJSType(narrowed);",
    "info" : "ExpressionStatement[29610-29639]:ExpressionStatement[29610-29639]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[29658-29671]:ReturnStatement[29658-29671]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[29679-29686]:Modifier[29679-29686]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[29687-29696]:SimpleType[29687-29696]"
  }, {
    "left" : "narrowScope",
    "right" : "narrowScope",
    "info" : "SimpleName[29697-29708]:SimpleName[29697-29708]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[29709-29724]:SingleVariableDeclaration[29709-29724]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[29726-29735]:SingleVariableDeclaration[29726-29735]"
  }, {
    "left" : "JSType narrowed",
    "right" : "JSType narrowed",
    "info" : "SingleVariableDeclaration[29737-29752]:SingleVariableDeclaration[29737-29752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29754-30016]:Block[29754-30016]"
  }, {
    "left" : "scope = scope.createChildFlowScope();",
    "right" : "scope = scope.createChildFlowScope();",
    "info" : "ExpressionStatement[29760-29797]:ExpressionStatement[29760-29797]"
  }, {
    "left" : "if (node.isGetProp())",
    "right" : "if (node.isGetProp())",
    "info" : "IfStatement[29802-29994]:IfStatement[29802-29994]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29824-29932]:Block[29824-29932]"
  }, {
    "left" : "scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);",
    "right" : "scope.inferQualifiedSlot(\n          node, node.getQualifiedName(), getJSType(node), narrowed);",
    "info" : "ExpressionStatement[29832-29926]:ExpressionStatement[29832-29926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29938-29994]:Block[29938-29994]"
  }, {
    "left" : "redeclareSimpleVar(scope, node, narrowed);",
    "right" : "redeclareSimpleVar(scope, node, narrowed);",
    "info" : "ExpressionStatement[29946-29988]:ExpressionStatement[29946-29988]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[29999-30012]:ReturnStatement[29999-30012]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[30942-30949]:Modifier[30942-30949]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[30950-30954]:PrimitiveType[30950-30954]"
  }, {
    "left" : "backwardsInferenceFromCallSite",
    "right" : "backwardsInferenceFromCallSite",
    "info" : "SimpleName[30955-30985]:SimpleName[30955-30985]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[30986-30992]:SingleVariableDeclaration[30986-30992]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[30994-31013]:SingleVariableDeclaration[30994-31013]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31015-31128]:Block[31015-31128]"
  }, {
    "left" : "updateTypeOfParameters(n, fnType);",
    "right" : "updateTypeOfParameters(n, fnType);",
    "info" : "ExpressionStatement[31021-31055]:ExpressionStatement[31021-31055]"
  }, {
    "left" : "updateTypeOfThisOnClosure(n, fnType);",
    "right" : "updateTypeOfThisOnClosure(n, fnType);",
    "info" : "ExpressionStatement[31060-31097]:ExpressionStatement[31060-31097]"
  }, {
    "left" : "updateBind(n, fnType);",
    "right" : "updateBind(n, fnType);",
    "info" : "ExpressionStatement[31102-31124]:ExpressionStatement[31102-31124]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31299-31306]:Modifier[31299-31306]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31307-31311]:PrimitiveType[31307-31311]"
  }, {
    "left" : "updateBind",
    "right" : "updateBind",
    "info" : "SimpleName[31312-31322]:SimpleName[31312-31322]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[31323-31329]:SingleVariableDeclaration[31323-31329]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[31331-31350]:SingleVariableDeclaration[31331-31350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31352-31939]:Block[31352-31939]"
  }, {
    "left" : "Node calledFn = n.getFirstChild();",
    "right" : "Node calledFn = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[31452-31486]:VariableDeclarationStatement[31452-31486]"
  }, {
    "left" : "boolean looksLikeBind = calledFn.isGetProp()\n        && calledFn.getLastChild().getString().equals(\"bind\");",
    "right" : "boolean looksLikeBind = calledFn.isGetProp()\n        && calledFn.getLastChild().getString().equals(\"bind\");",
    "info" : "VariableDeclarationStatement[31491-31598]:VariableDeclarationStatement[31491-31598]"
  }, {
    "left" : "if (!looksLikeBind)",
    "right" : "if (!looksLikeBind)",
    "info" : "IfStatement[31603-31644]:IfStatement[31603-31644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31623-31644]:Block[31623-31644]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[31631-31638]:ReturnStatement[31631-31638]"
  }, {
    "left" : "Node callTarget = calledFn.getFirstChild();",
    "right" : "Node callTarget = calledFn.getFirstChild();",
    "info" : "VariableDeclarationStatement[31650-31693]:VariableDeclarationStatement[31650-31693]"
  }, {
    "left" : "FunctionType callTargetFn = getJSType(callTarget)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();",
    "right" : "FunctionType callTargetFn = getJSType(callTarget)\n        .restrictByNotNullOrUndefined().toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[31698-31810]:VariableDeclarationStatement[31698-31810]"
  }, {
    "left" : "if (callTargetFn == null)",
    "right" : "if (callTargetFn == null)",
    "info" : "IfStatement[31815-31862]:IfStatement[31815-31862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31841-31862]:Block[31841-31862]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[31849-31856]:ReturnStatement[31849-31856]"
  }, {
    "left" : "n.setJSType(callTargetFn.getBindReturnType(n.getChildCount() - 1));",
    "right" : "n.setJSType(callTargetFn.getBindReturnType(n.getChildCount() - 1));",
    "info" : "ExpressionStatement[31868-31935]:ExpressionStatement[31868-31935]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[32103-32110]:Modifier[32103-32110]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[32111-32115]:PrimitiveType[32111-32115]"
  }, {
    "left" : "updateTypeOfParameters",
    "right" : "updateTypeOfParameters",
    "info" : "SimpleName[32116-32138]:SimpleName[32116-32138]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32139-32145]:SingleVariableDeclaration[32139-32145]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[32147-32166]:SingleVariableDeclaration[32147-32166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32168-32970]:Block[32168-32970]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[32174-32184]:VariableDeclarationStatement[32174-32184]"
  }, {
    "left" : "int childCount = n.getChildCount();",
    "right" : "int childCount = n.getChildCount();",
    "info" : "VariableDeclarationStatement[32189-32224]:VariableDeclarationStatement[32189-32224]"
  }, {
    "left" : "for (Node iParameter : fnType.getParameters())",
    "right" : "for (Node iParameter : fnType.getParameters())",
    "info" : "EnhancedForStatement[32229-32966]:EnhancedForStatement[32229-32966]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32276-32966]:Block[32276-32966]"
  }, {
    "left" : "if (i + 1 >= childCount)",
    "right" : "if (i + 1 >= childCount)",
    "info" : "IfStatement[32284-32397]:IfStatement[32284-32397]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32309-32397]:Block[32309-32397]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[32382-32389]:ReturnStatement[32382-32389]"
  }, {
    "left" : "JSType iParameterType = getJSType(iParameter);",
    "right" : "JSType iParameterType = getJSType(iParameter);",
    "info" : "VariableDeclarationStatement[32405-32451]:VariableDeclarationStatement[32405-32451]"
  }, {
    "left" : "Node iArgument = n.getChildAtIndex(i + 1);",
    "right" : "Node iArgument = n.getChildAtIndex(i + 1);",
    "info" : "VariableDeclarationStatement[32458-32500]:VariableDeclarationStatement[32458-32500]"
  }, {
    "left" : "JSType iArgumentType = getJSType(iArgument);",
    "right" : "JSType iArgumentType = getJSType(iArgument);",
    "info" : "VariableDeclarationStatement[32507-32551]:VariableDeclarationStatement[32507-32551]"
  }, {
    "left" : "inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);",
    "right" : "inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);",
    "info" : "ExpressionStatement[32558-32625]:ExpressionStatement[32558-32625]"
  }, {
    "left" : "if (iParameterType.isFunctionType())",
    "right" : "if (iParameterType.isFunctionType())",
    "info" : "IfStatement[32633-32949]:IfStatement[32633-32949]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32670-32949]:Block[32670-32949]"
  }, {
    "left" : "FunctionType iParameterFnType = iParameterType.toMaybeFunctionType();",
    "right" : "FunctionType iParameterFnType = iParameterType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[32680-32749]:VariableDeclarationStatement[32680-32749]"
  }, {
    "left" : "if (iArgument.isFunction() &&\n            iArgumentType.isFunctionType() &&\n            iArgument.getJSDocInfo() == null)",
    "right" : "if (iArgument.isFunction() &&\n            iArgumentType.isFunctionType() &&\n            iArgument.getJSDocInfo() == null)",
    "info" : "IfStatement[32759-32941]:IfStatement[32759-32941]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32881-32941]:Block[32881-32941]"
  }, {
    "left" : "iArgument.setJSType(iParameterFnType);",
    "right" : "iArgument.setJSType(iParameterFnType);",
    "info" : "ExpressionStatement[32893-32931]:ExpressionStatement[32893-32931]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[32956-32960]:ExpressionStatement[32956-32960]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33165-33172]:Modifier[33165-33172]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[33173-33177]:PrimitiveType[33173-33177]"
  }, {
    "left" : "updateTypeOfThisOnClosure",
    "right" : "updateTypeOfThisOnClosure",
    "info" : "SimpleName[33178-33203]:SimpleName[33178-33203]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33204-33210]:SingleVariableDeclaration[33204-33210]"
  }, {
    "left" : "FunctionType fnType",
    "right" : "FunctionType fnType",
    "info" : "SingleVariableDeclaration[33212-33231]:SingleVariableDeclaration[33212-33231]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33233-36827]:Block[33233-36827]"
  }, {
    "left" : "if (fnType.getTemplateTypeName() == null)",
    "right" : "if (fnType.getTemplateTypeName() == null)",
    "info" : "IfStatement[33297-33360]:IfStatement[33297-33360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33339-33360]:Block[33339-33360]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33347-33354]:ReturnStatement[33347-33354]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[33366-33376]:VariableDeclarationStatement[33366-33376]"
  }, {
    "left" : "int childCount = n.getChildCount();",
    "right" : "int childCount = n.getChildCount();",
    "info" : "VariableDeclarationStatement[33381-33416]:VariableDeclarationStatement[33381-33416]"
  }, {
    "left" : "for (Node iParameter : fnType.getParameters())",
    "right" : "for (Node iParameter : fnType.getParameters())",
    "info" : "EnhancedForStatement[33480-36823]:EnhancedForStatement[33480-36823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33527-36823]:Block[33527-36823]"
  }, {
    "left" : "JSType iParameterType =\n          getJSType(iParameter).restrictByNotNullOrUndefined();",
    "right" : "JSType iParameterType =\n          getJSType(iParameter).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[33535-33622]:VariableDeclarationStatement[33535-33622]"
  }, {
    "left" : "if (iParameterType.isTemplateType())",
    "right" : "if (iParameterType.isTemplateType())",
    "info" : "IfStatement[33629-36806]:IfStatement[33629-36806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33666-36806]:Block[33666-36806]"
  }, {
    "left" : "ObjectType iArgumentType = null;",
    "right" : "ObjectType iArgumentType = null;",
    "info" : "VariableDeclarationStatement[33726-33758]:VariableDeclarationStatement[33726-33758]"
  }, {
    "left" : "if (i + 1 < childCount)",
    "right" : "if (i + 1 < childCount)",
    "info" : "IfStatement[33767-34291]:IfStatement[33767-34291]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33791-34291]:Block[33791-34291]"
  }, {
    "left" : "Node iArgument = n.getChildAtIndex(i + 1);",
    "right" : "Node iArgument = n.getChildAtIndex(i + 1);",
    "info" : "VariableDeclarationStatement[33803-33845]:VariableDeclarationStatement[33803-33845]"
  }, {
    "left" : "iArgumentType = getJSType(iArgument)\n              .restrictByNotNullOrUndefined()\n              .collapseUnion()\n              .toObjectType();",
    "right" : "iArgumentType = getJSType(iArgument)\n              .restrictByNotNullOrUndefined()\n              .collapseUnion()\n              .toObjectType();",
    "info" : "ExpressionStatement[33856-34000]:ExpressionStatement[33856-34000]"
  }, {
    "left" : "if (iArgumentType == null)",
    "right" : "if (iArgumentType == null)",
    "info" : "IfStatement[34011-34281]:IfStatement[34011-34281]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34038-34281]:Block[34038-34281]"
  }, {
    "left" : "compiler.report(\n                JSError.make(NodeUtil.getSourceName(iArgument), iArgument,\n                    TEMPLATE_TYPE_NOT_OBJECT_TYPE,\n                    getJSType(iArgument).toString()));",
    "right" : "compiler.report(\n                JSError.make(NodeUtil.getSourceName(iArgument), iArgument,\n                    TEMPLATE_TYPE_NOT_OBJECT_TYPE,\n                    getJSType(iArgument).toString()));",
    "info" : "ExpressionStatement[34052-34249]:ExpressionStatement[34052-34249]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[34262-34269]:ReturnStatement[34262-34269]"
  }, {
    "left" : "boolean foundTemplateTypeOfThisParameter = false;",
    "right" : "boolean foundTemplateTypeOfThisParameter = false;",
    "info" : "VariableDeclarationStatement[34368-34417]:VariableDeclarationStatement[34368-34417]"
  }, {
    "left" : "int j = 0;",
    "right" : "int j = 0;",
    "info" : "VariableDeclarationStatement[34426-34436]:VariableDeclarationStatement[34426-34436]"
  }, {
    "left" : "for (Node jParameter : fnType.getParameters())",
    "right" : "for (Node jParameter : fnType.getParameters())",
    "info" : "EnhancedForStatement[34445-36603]:EnhancedForStatement[34445-36603]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34492-36603]:Block[34492-36603]"
  }, {
    "left" : "JSType jParameterType =\n              getJSType(jParameter).restrictByNotNullOrUndefined();",
    "right" : "JSType jParameterType =\n              getJSType(jParameter).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[34504-34595]:VariableDeclarationStatement[34504-34595]"
  }, {
    "left" : "if (jParameterType.isFunctionType())",
    "right" : "if (jParameterType.isFunctionType())",
    "info" : "IfStatement[34606-36578]:IfStatement[34606-36578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34643-36578]:Block[34643-36578]"
  }, {
    "left" : "FunctionType jParameterFnType = jParameterType.toMaybeFunctionType();",
    "right" : "FunctionType jParameterFnType = jParameterType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[34657-34726]:VariableDeclarationStatement[34657-34726]"
  }, {
    "left" : "if (jParameterFnType.getTypeOfThis().equals(iParameterType))",
    "right" : "if (jParameterFnType.getTypeOfThis().equals(iParameterType))",
    "info" : "IfStatement[34739-36566]:IfStatement[34739-36566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34800-36566]:Block[34800-36566]"
  }, {
    "left" : "foundTemplateTypeOfThisParameter = true;",
    "right" : "foundTemplateTypeOfThisParameter = true;",
    "info" : "ExpressionStatement[34816-34856]:ExpressionStatement[34816-34856]"
  }, {
    "left" : "if (j + 1 >= childCount)",
    "right" : "if (j + 1 >= childCount)",
    "info" : "IfStatement[34931-35067]:IfStatement[34931-35067]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34956-35067]:Block[34956-35067]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[35044-35051]:ReturnStatement[35044-35051]"
  }, {
    "left" : "Node jArgument = n.getChildAtIndex(j + 1);",
    "right" : "Node jArgument = n.getChildAtIndex(j + 1);",
    "info" : "VariableDeclarationStatement[35082-35124]:VariableDeclarationStatement[35082-35124]"
  }, {
    "left" : "JSType jArgumentType = getJSType(jArgument);",
    "right" : "JSType jArgumentType = getJSType(jArgument);",
    "info" : "VariableDeclarationStatement[35139-35183]:VariableDeclarationStatement[35139-35183]"
  }, {
    "left" : "if (jArgument.isFunction() &&\n                  jArgumentType.isFunctionType())",
    "right" : "if (jArgument.isFunction() &&\n                  jArgumentType.isFunctionType())",
    "info" : "IfStatement[35198-36436]:IfStatement[35198-36436]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35278-36436]:Block[35278-36436]"
  }, {
    "left" : "if (iArgumentType != null &&\n                    // null and undefined get filtered out above.\n                    !iArgumentType.isNoType())",
    "right" : "if (iArgumentType != null &&\n                    // null and undefined get filtered out above.\n                    !iArgumentType.isNoType())",
    "info" : "IfStatement[35296-36420]:IfStatement[35296-36420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35438-36047]:Block[35438-36047]"
  }, {
    "left" : "FunctionType jArgumentFnType = jArgumentType.toMaybeFunctionType();",
    "right" : "FunctionType jArgumentFnType = jArgumentType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[35584-35651]:VariableDeclarationStatement[35584-35651]"
  }, {
    "left" : "if (jArgumentFnType.getTypeOfThis().isUnknownType())",
    "right" : "if (jArgumentFnType.getTypeOfThis().isUnknownType())",
    "info" : "IfStatement[35670-36029]:IfStatement[35670-36029]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35723-36029]:Block[35723-36029]"
  }, {
    "left" : "jArgument.setJSType(\n                        registry.createFunctionTypeWithNewThisType(\n                            jArgumentFnType, iArgumentType));",
    "right" : "jArgument.setJSType(\n                        registry.createFunctionTypeWithNewThisType(\n                            jArgumentFnType, iArgumentType));",
    "info" : "ExpressionStatement[35859-36009]:ExpressionStatement[35859-36009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36053-36420]:Block[36053-36420]"
  }, {
    "left" : "if (NodeUtil.referencesThis(\n                          NodeUtil.getFunctionBody(jArgument)))",
    "right" : "if (NodeUtil.referencesThis(\n                          NodeUtil.getFunctionBody(jArgument)))",
    "info" : "IfStatement[36150-36402]:IfStatement[36150-36402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36243-36402]:Block[36243-36402]"
  }, {
    "left" : "compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n                        FUNCTION_LITERAL_UNDEFINED_THIS));",
    "right" : "compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n                        FUNCTION_LITERAL_UNDEFINED_THIS));",
    "info" : "ExpressionStatement[36265-36382]:ExpressionStatement[36265-36382]"
  }, {
    "left" : "j++;",
    "right" : "j++;",
    "info" : "ExpressionStatement[36589-36593]:ExpressionStatement[36589-36593]"
  }, {
    "left" : "if (!foundTemplateTypeOfThisParameter)",
    "right" : "if (!foundTemplateTypeOfThisParameter)",
    "info" : "IfStatement[36613-36798]:IfStatement[36613-36798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36652-36798]:Block[36652-36798]"
  }, {
    "left" : "compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n              TEMPLATE_TYPE_OF_THIS_EXPECTED));",
    "right" : "compiler.report(JSError.make(NodeUtil.getSourceName(n), n,\n              TEMPLATE_TYPE_OF_THIS_EXPECTED));",
    "info" : "ExpressionStatement[36664-36770]:ExpressionStatement[36664-36770]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36781-36788]:ReturnStatement[36781-36788]"
  }, {
    "left" : "i++;",
    "right" : "i++;",
    "info" : "ExpressionStatement[36813-36817]:ExpressionStatement[36813-36817]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36831-36838]:Modifier[36831-36838]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[36839-36848]:SimpleType[36839-36848]"
  }, {
    "left" : "traverseNew",
    "right" : "traverseNew",
    "info" : "SimpleName[36849-36860]:SimpleName[36849-36860]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36861-36867]:SingleVariableDeclaration[36861-36867]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[36869-36884]:SingleVariableDeclaration[36869-36884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36886-37958]:Block[36886-37958]"
  }, {
    "left" : "Node constructor = n.getFirstChild();",
    "right" : "Node constructor = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[36892-36929]:VariableDeclarationStatement[36892-36929]"
  }, {
    "left" : "scope = traverse(constructor, scope);",
    "right" : "scope = traverse(constructor, scope);",
    "info" : "ExpressionStatement[36934-36971]:ExpressionStatement[36934-36971]"
  }, {
    "left" : "JSType constructorType = constructor.getJSType();",
    "right" : "JSType constructorType = constructor.getJSType();",
    "info" : "VariableDeclarationStatement[36977-37026]:VariableDeclarationStatement[36977-37026]"
  }, {
    "left" : "JSType type = null;",
    "right" : "JSType type = null;",
    "info" : "VariableDeclarationStatement[37031-37050]:VariableDeclarationStatement[37031-37050]"
  }, {
    "left" : "if (constructorType != null)",
    "right" : "if (constructorType != null)",
    "info" : "IfStatement[37055-37791]:IfStatement[37055-37791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37084-37791]:Block[37084-37791]"
  }, {
    "left" : "constructorType = constructorType.restrictByNotNullOrUndefined();",
    "right" : "constructorType = constructorType.restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[37092-37157]:ExpressionStatement[37092-37157]"
  }, {
    "left" : "if (constructorType.isUnknownType())",
    "right" : "if (constructorType.isUnknownType())",
    "info" : "IfStatement[37164-37785]:IfStatement[37164-37785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37201-37254]:Block[37201-37254]"
  }, {
    "left" : "type = getNativeType(UNKNOWN_TYPE);",
    "right" : "type = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[37211-37246]:ExpressionStatement[37211-37246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37260-37785]:Block[37260-37785]"
  }, {
    "left" : "FunctionType ct = constructorType.toMaybeFunctionType();",
    "right" : "FunctionType ct = constructorType.toMaybeFunctionType();",
    "info" : "VariableDeclarationStatement[37270-37326]:VariableDeclarationStatement[37270-37326]"
  }, {
    "left" : "if (ct == null && constructorType instanceof FunctionType)",
    "right" : "if (ct == null && constructorType instanceof FunctionType)",
    "info" : "IfStatement[37335-37680]:IfStatement[37335-37680]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37394-37680]:Block[37394-37680]"
  }, {
    "left" : "ct = (FunctionType) constructorType;",
    "right" : "ct = (FunctionType) constructorType;",
    "info" : "ExpressionStatement[37634-37670]:ExpressionStatement[37634-37670]"
  }, {
    "left" : "if (ct != null && ct.isConstructor())",
    "right" : "if (ct != null && ct.isConstructor())",
    "info" : "IfStatement[37689-37777]:IfStatement[37689-37777]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37727-37777]:Block[37727-37777]"
  }, {
    "left" : "type = ct.getInstanceType();",
    "right" : "type = ct.getInstanceType();",
    "info" : "ExpressionStatement[37739-37767]:ExpressionStatement[37739-37767]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[37796-37814]:ExpressionStatement[37796-37814]"
  }, {
    "left" : "for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext())",
    "right" : "for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext())",
    "info" : "ForStatement[37820-37936]:ForStatement[37820-37936]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37893-37936]:Block[37893-37936]"
  }, {
    "left" : "scope = traverse(arg, scope);",
    "right" : "scope = traverse(arg, scope);",
    "info" : "ExpressionStatement[37901-37930]:ExpressionStatement[37901-37930]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[37941-37954]:ReturnStatement[37941-37954]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[37962-37969]:Modifier[37962-37969]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[37970-37988]:SimpleType[37970-37988]"
  }, {
    "left" : "traverseAnd",
    "right" : "traverseAnd",
    "info" : "SimpleName[37989-38000]:SimpleName[37989-38000]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38001-38007]:SingleVariableDeclaration[38001-38007]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[38009-38024]:SingleVariableDeclaration[38009-38024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38026-38088]:Block[38026-38088]"
  }, {
    "left" : "return traverseShortCircuitingBinOp(n, scope, true);",
    "right" : "return traverseShortCircuitingBinOp(n, scope, true);",
    "info" : "ReturnStatement[38032-38084]:ReturnStatement[38032-38084]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38092-38099]:Modifier[38092-38099]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[38100-38109]:SimpleType[38100-38109]"
  }, {
    "left" : "traverseChildren",
    "right" : "traverseChildren",
    "info" : "SimpleName[38110-38126]:SimpleName[38110-38126]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38127-38133]:SingleVariableDeclaration[38127-38133]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[38135-38150]:SingleVariableDeclaration[38135-38150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38152-38287]:Block[38152-38287]"
  }, {
    "left" : "for (Node el = n.getFirstChild(); el != null; el = el.getNext())",
    "right" : "for (Node el = n.getFirstChild(); el != null; el = el.getNext())",
    "info" : "ForStatement[38158-38265]:ForStatement[38158-38265]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38223-38265]:Block[38223-38265]"
  }, {
    "left" : "scope = traverse(el, scope);",
    "right" : "scope = traverse(el, scope);",
    "info" : "ExpressionStatement[38231-38259]:ExpressionStatement[38231-38259]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[38270-38283]:ReturnStatement[38270-38283]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38291-38298]:Modifier[38291-38298]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[38299-38308]:SimpleType[38299-38308]"
  }, {
    "left" : "traverseGetElem",
    "right" : "traverseGetElem",
    "info" : "SimpleName[38309-38324]:SimpleName[38309-38324]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38325-38331]:SingleVariableDeclaration[38325-38331]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[38333-38348]:SingleVariableDeclaration[38333-38348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38350-38706]:Block[38350-38706]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[38356-38391]:ExpressionStatement[38356-38391]"
  }, {
    "left" : "ObjectType objType = ObjectType.cast(\n        getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());",
    "right" : "ObjectType objType = ObjectType.cast(\n        getJSType(n.getFirstChild()).restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[38396-38503]:VariableDeclarationStatement[38396-38503]"
  }, {
    "left" : "if (objType != null)",
    "right" : "if (objType != null)",
    "info" : "IfStatement[38508-38645]:IfStatement[38508-38645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38529-38645]:Block[38529-38645]"
  }, {
    "left" : "JSType type = objType.getParameterType();",
    "right" : "JSType type = objType.getParameterType();",
    "info" : "VariableDeclarationStatement[38537-38578]:VariableDeclarationStatement[38537-38578]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[38585-38639]:IfStatement[38585-38639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38603-38639]:Block[38603-38639]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[38613-38631]:ExpressionStatement[38613-38631]"
  }, {
    "left" : "return dereferencePointer(n.getFirstChild(), scope);",
    "right" : "return dereferencePointer(n.getFirstChild(), scope);",
    "info" : "ReturnStatement[38650-38702]:ReturnStatement[38650-38702]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38710-38717]:Modifier[38710-38717]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[38718-38727]:SimpleType[38718-38727]"
  }, {
    "left" : "traverseGetProp",
    "right" : "traverseGetProp",
    "info" : "SimpleName[38728-38743]:SimpleName[38728-38743]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38744-38750]:SingleVariableDeclaration[38744-38750]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[38752-38767]:SingleVariableDeclaration[38752-38767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38769-39056]:Block[38769-39056]"
  }, {
    "left" : "Node objNode = n.getFirstChild();",
    "right" : "Node objNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[38775-38808]:VariableDeclarationStatement[38775-38808]"
  }, {
    "left" : "Node property = n.getLastChild();",
    "right" : "Node property = n.getLastChild();",
    "info" : "VariableDeclarationStatement[38813-38846]:VariableDeclarationStatement[38813-38846]"
  }, {
    "left" : "scope = traverseChildren(n, scope);",
    "right" : "scope = traverseChildren(n, scope);",
    "info" : "ExpressionStatement[38851-38886]:ExpressionStatement[38851-38886]"
  }, {
    "left" : "n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));",
    "right" : "n.setJSType(\n        getPropertyType(\n            objNode.getJSType(), property.getString(), n, scope));",
    "info" : "ExpressionStatement[38891-38995]:ExpressionStatement[38891-38995]"
  }, {
    "left" : "return dereferencePointer(n.getFirstChild(), scope);",
    "right" : "return dereferencePointer(n.getFirstChild(), scope);",
    "info" : "ReturnStatement[39000-39052]:ReturnStatement[39000-39052]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39590-39597]:Modifier[39590-39597]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39598-39602]:PrimitiveType[39598-39602]"
  }, {
    "left" : "inferPropertyTypesToMatchConstraint",
    "right" : "inferPropertyTypesToMatchConstraint",
    "info" : "SimpleName[39603-39638]:SimpleName[39603-39638]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[39646-39657]:SingleVariableDeclaration[39646-39657]"
  }, {
    "left" : "JSType constraint",
    "right" : "JSType constraint",
    "info" : "SingleVariableDeclaration[39659-39676]:SingleVariableDeclaration[39659-39676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39678-40518]:Block[39678-39931]"
  }, {
    "left" : "if (type == null || constraint == null)",
    "right" : "if (type == null || constraint == null)",
    "info" : "IfStatement[39684-39745]:IfStatement[39684-39745]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39724-39745]:Block[39724-39745]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[39732-39739]:ReturnStatement[39732-39739]"
  }, {
    "left" : "ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());",
    "right" : "ObjectType constraintObj =\n        ObjectType.cast(constraint.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[39751-39845]:VariableDeclarationStatement[39751-39845]"
  }, {
    "left" : "if (constraintObj != null && constraintObj.isRecordType())",
    "right" : "if (constraintObj != null)",
    "info" : "IfStatement[39850-40514]:IfStatement[39850-39927]"
  }, {
    "left" : "constraintObj != null",
    "right" : "constraintObj != null",
    "info" : "InfixExpression[39854-39875]:InfixExpression[39854-39875]"
  }, {
    "left" : "type.restrictByNotNullOrUndefined()",
    "right" : "type.matchConstraint(constraintObj)",
    "info" : "MethodInvocation[39954-39989]:MethodInvocation[39885-39920]"
  }, {
    "left" : "restrictByNotNullOrUndefined",
    "right" : "constraintObj",
    "info" : "SimpleName[39959-39987]:SimpleName[39906-39919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40205-40490]:Block[39877-39927]"
  }, {
    "left" : "objType.defineInferredProperty(prop, typeToInfer, null);",
    "right" : "type.matchConstraint(constraintObj);",
    "info" : "ExpressionStatement[40422-40478]:ExpressionStatement[39885-39921]"
  }, {
    "left" : "defineInferredProperty",
    "right" : "matchConstraint",
    "info" : "SimpleName[40430-40452]:SimpleName[39890-39905]"
  }, {
    "left" : "prop, typeToInfer, null",
    "right" : "constraintObj",
    "info" : "METHOD_INVOCATION_ARGUMENTS[40453-40476]:METHOD_INVOCATION_ARGUMENTS[39906-39919]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40624-40631]:Modifier[40037-40044]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[40632-40641]:SimpleType[40045-40054]"
  }, {
    "left" : "dereferencePointer",
    "right" : "dereferencePointer",
    "info" : "SimpleName[40642-40660]:SimpleName[40055-40073]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[40661-40667]:SingleVariableDeclaration[40074-40080]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[40669-40684]:SingleVariableDeclaration[40082-40097]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40686-40928]:Block[40099-40341]"
  }, {
    "left" : "if (n.isQualifiedName())",
    "right" : "if (n.isQualifiedName())",
    "info" : "IfStatement[40692-40906]:IfStatement[40105-40319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40717-40906]:Block[40130-40319]"
  }, {
    "left" : "JSType type = getJSType(n);",
    "right" : "JSType type = getJSType(n);",
    "info" : "VariableDeclarationStatement[40725-40752]:VariableDeclarationStatement[40138-40165]"
  }, {
    "left" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
    "right" : "JSType narrowed = type.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[40759-40813]:VariableDeclarationStatement[40172-40226]"
  }, {
    "left" : "if (type != narrowed)",
    "right" : "if (type != narrowed)",
    "info" : "IfStatement[40820-40900]:IfStatement[40233-40313]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40842-40900]:Block[40255-40313]"
  }, {
    "left" : "scope = narrowScope(scope, n, narrowed);",
    "right" : "scope = narrowScope(scope, n, narrowed);",
    "info" : "ExpressionStatement[40852-40892]:ExpressionStatement[40265-40305]"
  }, {
    "left" : "return scope;",
    "right" : "return scope;",
    "info" : "ReturnStatement[40911-40924]:ReturnStatement[40324-40337]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40932-40939]:Modifier[40345-40352]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[40940-40946]:SimpleType[40353-40359]"
  }, {
    "left" : "getPropertyType",
    "right" : "getPropertyType",
    "info" : "SimpleName[40947-40962]:SimpleName[40360-40375]"
  }, {
    "left" : "JSType objType",
    "right" : "JSType objType",
    "info" : "SingleVariableDeclaration[40963-40977]:SingleVariableDeclaration[40376-40390]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[40979-40994]:SingleVariableDeclaration[40392-40407]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41002-41008]:SingleVariableDeclaration[40415-40421]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[41010-41025]:SingleVariableDeclaration[40423-40438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41027-42186]:Block[40440-41599]"
  }, {
    "left" : "String qualifiedName = n.getQualifiedName();",
    "right" : "String qualifiedName = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[41107-41151]:VariableDeclarationStatement[40520-40564]"
  }, {
    "left" : "StaticSlot<JSType> var = scope.getSlot(qualifiedName);",
    "right" : "StaticSlot<JSType> var = scope.getSlot(qualifiedName);",
    "info" : "VariableDeclarationStatement[41156-41210]:VariableDeclarationStatement[40569-40623]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[41215-41689]:IfStatement[40628-41102]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41232-41689]:Block[40645-41102]"
  }, {
    "left" : "JSType varType = var.getType();",
    "right" : "JSType varType = var.getType();",
    "info" : "VariableDeclarationStatement[41240-41271]:VariableDeclarationStatement[40653-40684]"
  }, {
    "left" : "if (varType != null)",
    "right" : "if (varType != null)",
    "info" : "IfStatement[41278-41683]:IfStatement[40691-41096]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41299-41683]:Block[40712-41096]"
  }, {
    "left" : "if (varType.equals(getNativeType(UNKNOWN_TYPE)) &&\n            var != syntacticScope.getSlot(qualifiedName))",
    "right" : "if (varType.equals(getNativeType(UNKNOWN_TYPE)) &&\n            var != syntacticScope.getSlot(qualifiedName))",
    "info" : "IfStatement[41309-41675]:IfStatement[40722-41088]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41418-41632]:Block[40831-41045]"
  }, {
    "left" : "return getNativeType(CHECKED_UNKNOWN_TYPE);",
    "right" : "return getNativeType(CHECKED_UNKNOWN_TYPE);",
    "info" : "ReturnStatement[41579-41622]:ReturnStatement[40992-41035]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41638-41675]:Block[41051-41088]"
  }, {
    "left" : "return varType;",
    "right" : "return varType;",
    "info" : "ReturnStatement[41650-41665]:ReturnStatement[41063-41078]"
  }, {
    "left" : "JSType propertyType = null;",
    "right" : "JSType propertyType = null;",
    "info" : "VariableDeclarationStatement[41695-41722]:VariableDeclarationStatement[41108-41135]"
  }, {
    "left" : "if (objType != null)",
    "right" : "if (objType != null)",
    "info" : "IfStatement[41727-41812]:IfStatement[41140-41225]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41748-41812]:Block[41161-41225]"
  }, {
    "left" : "propertyType = objType.findPropertyType(propName);",
    "right" : "propertyType = objType.findPropertyType(propName);",
    "info" : "ExpressionStatement[41756-41806]:ExpressionStatement[41169-41219]"
  }, {
    "left" : "if ((propertyType == null || propertyType.isUnknownType()) &&\n        qualifiedName != null)",
    "right" : "if ((propertyType == null || propertyType.isUnknownType()) &&\n        qualifiedName != null)",
    "info" : "IfStatement[41818-42156]:IfStatement[41231-41569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41911-42156]:Block[41324-41569]"
  }, {
    "left" : "ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));",
    "right" : "ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));",
    "info" : "VariableDeclarationStatement[41994-42064]:VariableDeclarationStatement[41407-41477]"
  }, {
    "left" : "if (regType != null)",
    "right" : "if (regType != null)",
    "info" : "IfStatement[42071-42150]:IfStatement[41484-41563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42092-42150]:Block[41505-41563]"
  }, {
    "left" : "propertyType = regType.getConstructor();",
    "right" : "propertyType = regType.getConstructor();",
    "info" : "ExpressionStatement[42102-42142]:ExpressionStatement[41515-41555]"
  }, {
    "left" : "return propertyType;",
    "right" : "return propertyType;",
    "info" : "ReturnStatement[42162-42182]:ReturnStatement[41575-41595]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42190-42197]:Modifier[41603-41610]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[42198-42216]:SimpleType[41611-41629]"
  }, {
    "left" : "traverseOr",
    "right" : "traverseOr",
    "info" : "SimpleName[42217-42227]:SimpleName[41630-41640]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42228-42234]:SingleVariableDeclaration[41641-41647]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[42236-42251]:SingleVariableDeclaration[41649-41664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42253-42316]:Block[41666-41729]"
  }, {
    "left" : "return traverseShortCircuitingBinOp(n, scope, false);",
    "right" : "return traverseShortCircuitingBinOp(n, scope, false);",
    "info" : "ReturnStatement[42259-42312]:ReturnStatement[41672-41725]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42320-42327]:Modifier[41733-41740]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[42328-42346]:SimpleType[41741-41759]"
  }, {
    "left" : "traverseShortCircuitingBinOp",
    "right" : "traverseShortCircuitingBinOp",
    "info" : "SimpleName[42347-42375]:SimpleName[41760-41788]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42383-42389]:SingleVariableDeclaration[41796-41802]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[42391-42406]:SingleVariableDeclaration[41804-41819]"
  }, {
    "left" : "boolean condition",
    "right" : "boolean condition",
    "info" : "SingleVariableDeclaration[42408-42425]:SingleVariableDeclaration[41821-41838]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42427-44679]:Block[41840-44092]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[42433-42463]:VariableDeclarationStatement[41846-41876]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[42468-42498]:VariableDeclarationStatement[41881-41911]"
  }, {
    "left" : "BooleanOutcomePair leftLiterals =\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());",
    "right" : "BooleanOutcomePair leftLiterals =\n        traverseWithinShortCircuitingBinOp(left,\n            scope.createChildFlowScope());",
    "info" : "VariableDeclarationStatement[42530-42655]:VariableDeclarationStatement[41943-42068]"
  }, {
    "left" : "JSType leftType = left.getJSType();",
    "right" : "JSType leftType = left.getJSType();",
    "info" : "VariableDeclarationStatement[42660-42695]:VariableDeclarationStatement[42073-42108]"
  }, {
    "left" : "FlowScope rightScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);",
    "right" : "FlowScope rightScope = reverseInterpreter.\n        getPreciserScopeKnowingConditionOutcome(\n            left, leftLiterals.getOutcomeFlowScope(left.getType(), condition),\n            condition);",
    "info" : "VariableDeclarationStatement[42819-43013]:VariableDeclarationStatement[42232-42426]"
  }, {
    "left" : "BooleanOutcomePair rightLiterals =\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());",
    "right" : "BooleanOutcomePair rightLiterals =\n        traverseWithinShortCircuitingBinOp(\n            right, rightScope.createChildFlowScope());",
    "info" : "VariableDeclarationStatement[43046-43179]:VariableDeclarationStatement[42459-42592]"
  }, {
    "left" : "JSType rightType = right.getJSType();",
    "right" : "JSType rightType = right.getJSType();",
    "info" : "VariableDeclarationStatement[43184-43221]:VariableDeclarationStatement[42597-42634]"
  }, {
    "left" : "JSType type;",
    "right" : "JSType type;",
    "info" : "VariableDeclarationStatement[43227-43239]:VariableDeclarationStatement[42640-42652]"
  }, {
    "left" : "BooleanOutcomePair literals;",
    "right" : "BooleanOutcomePair literals;",
    "info" : "VariableDeclarationStatement[43244-43272]:VariableDeclarationStatement[42657-42685]"
  }, {
    "left" : "if (leftType != null && rightType != null)",
    "right" : "if (leftType != null && rightType != null)",
    "info" : "IfStatement[43277-44630]:IfStatement[42690-44043]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43320-44407]:Block[42733-43820]"
  }, {
    "left" : "leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);",
    "right" : "leftType = leftType.getRestrictedTypeGivenToBooleanOutcome(!condition);",
    "info" : "ExpressionStatement[43328-43399]:ExpressionStatement[42741-42812]"
  }, {
    "left" : "if (leftLiterals.toBooleanOutcomes ==\n          BooleanLiteralSet.get(!condition))",
    "right" : "if (leftLiterals.toBooleanOutcomes ==\n          BooleanLiteralSet.get(!condition))",
    "info" : "IfStatement[43406-43947]:IfStatement[42819-43360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43489-43651]:Block[42902-43064]"
  }, {
    "left" : "type = leftType;",
    "right" : "type = leftType;",
    "info" : "ExpressionStatement[43594-43610]:ExpressionStatement[43007-43023]"
  }, {
    "left" : "literals = leftLiterals;",
    "right" : "literals = leftLiterals;",
    "info" : "ExpressionStatement[43619-43643]:ExpressionStatement[43032-43056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43657-43947]:Block[43070-43360]"
  }, {
    "left" : "type = leftType.getLeastSupertype(rightType);",
    "right" : "type = leftType.getLeastSupertype(rightType);",
    "info" : "ExpressionStatement[43800-43845]:ExpressionStatement[43213-43258]"
  }, {
    "left" : "literals =\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);",
    "right" : "literals =\n            getBooleanOutcomePair(leftLiterals, rightLiterals, condition);",
    "info" : "ExpressionStatement[43854-43939]:ExpressionStatement[43267-43352]"
  }, {
    "left" : "if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n          getNativeType(BOOLEAN_TYPE).isSubtype(type))",
    "right" : "if (literals.booleanValues == BooleanLiteralSet.EMPTY &&\n          getNativeType(BOOLEAN_TYPE).isSubtype(type))",
    "info" : "IfStatement[44076-44401]:IfStatement[43489-43814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44188-44401]:Block[43601-43814]"
  }, {
    "left" : "if (type.isUnionType())",
    "right" : "if (type.isUnionType())",
    "info" : "IfStatement[44253-44393]:IfStatement[43666-43806]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44277-44393]:Block[43690-43806]"
  }, {
    "left" : "type = type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));",
    "right" : "type = type.toMaybeUnionType().getRestrictedUnion(\n              getNativeType(BOOLEAN_TYPE));",
    "info" : "ExpressionStatement[44289-44383]:ExpressionStatement[43702-43796]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44413-44630]:Block[43826-44043]"
  }, {
    "left" : "type = null;",
    "right" : "type = null;",
    "info" : "ExpressionStatement[44421-44433]:ExpressionStatement[43834-43846]"
  }, {
    "left" : "literals = new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());",
    "right" : "literals = new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH,\n          leftLiterals.getJoinedFlowScope(),\n          rightLiterals.getJoinedFlowScope());",
    "info" : "ExpressionStatement[44440-44624]:ExpressionStatement[43853-44037]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[44635-44653]:ExpressionStatement[44048-44066]"
  }, {
    "left" : "return literals;",
    "right" : "return literals;",
    "info" : "ReturnStatement[44659-44675]:ReturnStatement[44072-44088]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44683-44690]:Modifier[44096-44103]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[44691-44709]:SimpleType[44104-44122]"
  }, {
    "left" : "traverseWithinShortCircuitingBinOp",
    "right" : "traverseWithinShortCircuitingBinOp",
    "info" : "SimpleName[44710-44744]:SimpleName[44123-44157]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44745-44751]:SingleVariableDeclaration[44158-44164]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[44759-44774]:SingleVariableDeclaration[44172-44187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44776-45045]:Block[44189-44458]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope = traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.AND:\n        return traverseAnd(n, scope);\n\n      case Token.OR:\n        return traverseOr(n, scope);\n\n      default:\n        scope = traverse(n, scope);\n        return newBooleanOutcomePair(n.getJSType(), scope);\n    }",
    "info" : "SwitchStatement[44782-45041]:SwitchStatement[44195-44454]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[44811-44826]:SwitchCase[44224-44239]"
  }, {
    "left" : "return traverseAnd(n, scope);",
    "right" : "return traverseAnd(n, scope);",
    "info" : "ReturnStatement[44835-44864]:ReturnStatement[44248-44277]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[44872-44886]:SwitchCase[44285-44299]"
  }, {
    "left" : "return traverseOr(n, scope);",
    "right" : "return traverseOr(n, scope);",
    "info" : "ReturnStatement[44895-44923]:ReturnStatement[44308-44336]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44931-44939]:SwitchCase[44344-44352]"
  }, {
    "left" : "scope = traverse(n, scope);",
    "right" : "scope = traverse(n, scope);",
    "info" : "ExpressionStatement[44948-44975]:ExpressionStatement[44361-44388]"
  }, {
    "left" : "return newBooleanOutcomePair(n.getJSType(), scope);",
    "right" : "return newBooleanOutcomePair(n.getJSType(), scope);",
    "info" : "ReturnStatement[44984-45035]:ReturnStatement[44397-44448]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[45265-45283]:SimpleType[44678-44696]"
  }, {
    "left" : "getBooleanOutcomePair",
    "right" : "getBooleanOutcomePair",
    "info" : "SimpleName[45284-45305]:SimpleName[44697-44718]"
  }, {
    "left" : "BooleanOutcomePair left",
    "right" : "BooleanOutcomePair left",
    "info" : "SingleVariableDeclaration[45306-45329]:SingleVariableDeclaration[44719-44742]"
  }, {
    "left" : "BooleanOutcomePair right",
    "right" : "BooleanOutcomePair right",
    "info" : "SingleVariableDeclaration[45337-45361]:SingleVariableDeclaration[44750-44774]"
  }, {
    "left" : "boolean condition",
    "right" : "boolean condition",
    "info" : "SingleVariableDeclaration[45363-45380]:SingleVariableDeclaration[44776-44793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45382-45681]:Block[44795-45094]"
  }, {
    "left" : "return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());",
    "right" : "return new BooleanOutcomePair(\n        getBooleanOutcomes(left.toBooleanOutcomes, right.toBooleanOutcomes,\n                           condition),\n        getBooleanOutcomes(left.booleanValues, right.booleanValues, condition),\n        left.getJoinedFlowScope(), right.getJoinedFlowScope());",
    "info" : "ReturnStatement[45388-45677]:ReturnStatement[44801-45090]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46342-46348]:Modifier[45755-45761]"
  }, {
    "left" : "BooleanLiteralSet",
    "right" : "BooleanLiteralSet",
    "info" : "SimpleType[46349-46366]:SimpleType[45762-45779]"
  }, {
    "left" : "getBooleanOutcomes",
    "right" : "getBooleanOutcomes",
    "info" : "SimpleName[46367-46385]:SimpleName[45780-45798]"
  }, {
    "left" : "BooleanLiteralSet left",
    "right" : "BooleanLiteralSet left",
    "info" : "SingleVariableDeclaration[46386-46408]:SingleVariableDeclaration[45799-45821]"
  }, {
    "left" : "BooleanLiteralSet right",
    "right" : "BooleanLiteralSet right",
    "info" : "SingleVariableDeclaration[46416-46439]:SingleVariableDeclaration[45829-45852]"
  }, {
    "left" : "boolean condition",
    "right" : "boolean condition",
    "info" : "SingleVariableDeclaration[46441-46458]:SingleVariableDeclaration[45854-45871]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46460-46543]:Block[45873-45956]"
  }, {
    "left" : "return right.union(left.intersection(BooleanLiteralSet.get(!condition)));",
    "right" : "return right.union(left.intersection(BooleanLiteralSet.get(!condition)));",
    "info" : "ReturnStatement[46466-46539]:ReturnStatement[45879-45952]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46830-46837]:Modifier[46243-46250]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[46838-46843]:Modifier[46251-46256]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[46844-46849]:TYPE_DECLARATION_KIND[46257-46262]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleName[47270-47288]:SimpleName[46683-46701]"
  }, {
    "left" : "BooleanLiteralSet toBooleanOutcomes",
    "right" : "BooleanLiteralSet toBooleanOutcomes",
    "info" : "SingleVariableDeclaration[47298-47333]:SingleVariableDeclaration[46711-46746]"
  }, {
    "left" : "BooleanLiteralSet booleanValues",
    "right" : "BooleanLiteralSet booleanValues",
    "info" : "SingleVariableDeclaration[47335-47366]:SingleVariableDeclaration[46748-46779]"
  }, {
    "left" : "FlowScope leftScope",
    "right" : "FlowScope leftScope",
    "info" : "SingleVariableDeclaration[47376-47395]:SingleVariableDeclaration[46789-46808]"
  }, {
    "left" : "FlowScope rightScope",
    "right" : "FlowScope rightScope",
    "info" : "SingleVariableDeclaration[47397-47417]:SingleVariableDeclaration[46810-46830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47419-47588]:Block[46832-47001]"
  }, {
    "left" : "this.toBooleanOutcomes = toBooleanOutcomes;",
    "right" : "this.toBooleanOutcomes = toBooleanOutcomes;",
    "info" : "ExpressionStatement[47427-47470]:ExpressionStatement[46840-46883]"
  }, {
    "left" : "this.booleanValues = booleanValues;",
    "right" : "this.booleanValues = booleanValues;",
    "info" : "ExpressionStatement[47477-47512]:ExpressionStatement[46890-46925]"
  }, {
    "left" : "this.leftScope = leftScope;",
    "right" : "this.leftScope = leftScope;",
    "info" : "ExpressionStatement[47519-47546]:ExpressionStatement[46932-46959]"
  }, {
    "left" : "this.rightScope = rightScope;",
    "right" : "this.rightScope = rightScope;",
    "info" : "ExpressionStatement[47553-47582]:ExpressionStatement[46966-46995]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[47718-47727]:SimpleType[47131-47140]"
  }, {
    "left" : "getJoinedFlowScope",
    "right" : "getJoinedFlowScope",
    "info" : "SimpleName[47728-47746]:SimpleName[47141-47159]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47749-47978]:Block[47162-47391]"
  }, {
    "left" : "if (joinedScope == null)",
    "right" : "if (joinedScope == null)",
    "info" : "IfStatement[47757-47946]:IfStatement[47170-47359]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47782-47946]:Block[47195-47359]"
  }, {
    "left" : "if (leftScope == rightScope)",
    "right" : "if (leftScope == rightScope)",
    "info" : "IfStatement[47792-47938]:IfStatement[47205-47351]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47821-47868]:Block[47234-47281]"
  }, {
    "left" : "joinedScope = rightScope;",
    "right" : "joinedScope = rightScope;",
    "info" : "ExpressionStatement[47833-47858]:ExpressionStatement[47246-47271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47874-47938]:Block[47287-47351]"
  }, {
    "left" : "joinedScope = join(leftScope, rightScope);",
    "right" : "joinedScope = join(leftScope, rightScope);",
    "info" : "ExpressionStatement[47886-47928]:ExpressionStatement[47299-47341]"
  }, {
    "left" : "return joinedScope;",
    "right" : "return joinedScope;",
    "info" : "ReturnStatement[47953-47972]:ReturnStatement[47366-47385]"
  }, {
    "left" : "FlowScope",
    "right" : "FlowScope",
    "info" : "SimpleType[48089-48098]:SimpleType[47502-47511]"
  }, {
    "left" : "getOutcomeFlowScope",
    "right" : "getOutcomeFlowScope",
    "info" : "SimpleName[48099-48118]:SimpleName[47512-47531]"
  }, {
    "left" : "int nodeType",
    "right" : "int nodeType",
    "info" : "SingleVariableDeclaration[48119-48131]:SingleVariableDeclaration[47532-47544]"
  }, {
    "left" : "boolean outcome",
    "right" : "boolean outcome",
    "info" : "SingleVariableDeclaration[48133-48148]:SingleVariableDeclaration[47546-47561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48150-48401]:Block[47563-47814]"
  }, {
    "left" : "if (nodeType == Token.AND && outcome ||\n          nodeType == Token.OR && !outcome)",
    "right" : "if (nodeType == Token.AND && outcome ||\n          nodeType == Token.OR && !outcome)",
    "info" : "IfStatement[48158-48395]:IfStatement[47571-47808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48242-48343]:Block[47655-47756]"
  }, {
    "left" : "return rightScope;",
    "right" : "return rightScope;",
    "info" : "ReturnStatement[48317-48335]:ReturnStatement[47730-47748]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48349-48395]:Block[47762-47808]"
  }, {
    "left" : "return getJoinedFlowScope();",
    "right" : "return getJoinedFlowScope();",
    "info" : "ReturnStatement[48359-48387]:ReturnStatement[47772-47800]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48409-48416]:Modifier[47822-47829]"
  }, {
    "left" : "BooleanOutcomePair",
    "right" : "BooleanOutcomePair",
    "info" : "SimpleType[48417-48435]:SimpleType[47830-47848]"
  }, {
    "left" : "newBooleanOutcomePair",
    "right" : "newBooleanOutcomePair",
    "info" : "SimpleName[48436-48457]:SimpleName[47849-47870]"
  }, {
    "left" : "JSType jsType",
    "right" : "JSType jsType",
    "info" : "SingleVariableDeclaration[48465-48478]:SingleVariableDeclaration[47878-47891]"
  }, {
    "left" : "FlowScope flowScope",
    "right" : "FlowScope flowScope",
    "info" : "SingleVariableDeclaration[48480-48499]:SingleVariableDeclaration[47893-47912]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48501-48887]:Block[47914-48300]"
  }, {
    "left" : "if (jsType == null)",
    "right" : "if (jsType == null)",
    "info" : "IfStatement[48507-48652]:IfStatement[47920-48065]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48527-48652]:Block[47940-48065]"
  }, {
    "left" : "return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);",
    "right" : "return new BooleanOutcomePair(\n          BooleanLiteralSet.BOTH, BooleanLiteralSet.BOTH, flowScope, flowScope);",
    "info" : "ReturnStatement[48535-48646]:ReturnStatement[47948-48059]"
  }, {
    "left" : "return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);",
    "right" : "return new BooleanOutcomePair(jsType.getPossibleToBooleanOutcomes(),\n        registry.getNativeType(BOOLEAN_TYPE).isSubtype(jsType) ?\n            BooleanLiteralSet.BOTH : BooleanLiteralSet.EMPTY,\n        flowScope, flowScope);",
    "info" : "ReturnStatement[48657-48883]:ReturnStatement[48070-48296]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48891-48898]:Modifier[48304-48311]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48899-48903]:PrimitiveType[48312-48316]"
  }, {
    "left" : "redeclareSimpleVar",
    "right" : "redeclareSimpleVar",
    "info" : "SimpleName[48904-48922]:SimpleName[48317-48335]"
  }, {
    "left" : "FlowScope scope",
    "right" : "FlowScope scope",
    "info" : "SingleVariableDeclaration[48930-48945]:SingleVariableDeclaration[48343-48358]"
  }, {
    "left" : "Node nameNode",
    "right" : "Node nameNode",
    "info" : "SingleVariableDeclaration[48947-48960]:SingleVariableDeclaration[48360-48373]"
  }, {
    "left" : "JSType varType",
    "right" : "JSType varType",
    "info" : "SingleVariableDeclaration[48962-48976]:SingleVariableDeclaration[48375-48389]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48978-49285]:Block[48391-48698]"
  }, {
    "left" : "Preconditions.checkState(nameNode.isName());",
    "right" : "Preconditions.checkState(nameNode.isName());",
    "info" : "ExpressionStatement[48984-49028]:ExpressionStatement[48397-48441]"
  }, {
    "left" : "String varName = nameNode.getString();",
    "right" : "String varName = nameNode.getString();",
    "info" : "VariableDeclarationStatement[49033-49071]:VariableDeclarationStatement[48446-48484]"
  }, {
    "left" : "if (varType == null)",
    "right" : "if (varType == null)",
    "info" : "IfStatement[49076-49162]:IfStatement[48489-48575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49097-49162]:Block[48510-48575]"
  }, {
    "left" : "varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "right" : "varType = getNativeType(JSTypeNative.UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[49105-49156]:ExpressionStatement[48518-48569]"
  }, {
    "left" : "if (isUnflowable(syntacticScope.getVar(varName)))",
    "right" : "if (isUnflowable(syntacticScope.getVar(varName)))",
    "info" : "IfStatement[49167-49238]:IfStatement[48580-48651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49217-49238]:Block[48630-48651]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49225-49232]:ReturnStatement[48638-48645]"
  }, {
    "left" : "scope.inferSlotType(varName, varType);",
    "right" : "scope.inferSlotType(varName, varType);",
    "info" : "ExpressionStatement[49243-49281]:ExpressionStatement[48656-48694]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49289-49296]:Modifier[48702-48709]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[49297-49304]:PrimitiveType[48710-48717]"
  }, {
    "left" : "isUnflowable",
    "right" : "isUnflowable",
    "info" : "SimpleName[49305-49317]:SimpleName[48718-48730]"
  }, {
    "left" : "Var v",
    "right" : "Var v",
    "info" : "SingleVariableDeclaration[49318-49323]:SingleVariableDeclaration[48731-48736]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49325-49503]:Block[48738-48916]"
  }, {
    "left" : "return v != null && v.isLocal() && v.isMarkedEscaped() &&\n        // It's OK to flow a variable in the scope where it's escaped.\n        v.getScope() == syntacticScope;",
    "right" : "return v != null && v.isLocal() && v.isMarkedEscaped() &&\n        // It's OK to flow a variable in the scope where it's escaped.\n        v.getScope() == syntacticScope;",
    "info" : "ReturnStatement[49331-49499]:ReturnStatement[48744-48912]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49613-49620]:Modifier[49026-49033]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[49621-49627]:SimpleType[49034-49040]"
  }, {
    "left" : "getJSType",
    "right" : "getJSType",
    "info" : "SimpleName[49628-49637]:SimpleName[49041-49050]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[49638-49644]:SingleVariableDeclaration[49051-49057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49646-50074]:Block[49059-49487]"
  }, {
    "left" : "JSType jsType = n.getJSType();",
    "right" : "JSType jsType = n.getJSType();",
    "info" : "VariableDeclarationStatement[49652-49682]:VariableDeclarationStatement[49065-49095]"
  }, {
    "left" : "if (jsType == null)",
    "right" : "if (jsType == null)",
    "info" : "IfStatement[49687-50070]:IfStatement[49100-49483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49707-50036]:Block[49120-49449]"
  }, {
    "left" : "return getNativeType(UNKNOWN_TYPE);",
    "right" : "return getNativeType(UNKNOWN_TYPE);",
    "info" : "ReturnStatement[49995-50030]:ReturnStatement[49408-49443]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50042-50070]:Block[49455-49483]"
  }, {
    "left" : "return jsType;",
    "right" : "return jsType;",
    "info" : "ReturnStatement[50050-50064]:ReturnStatement[49463-49477]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50078-50085]:Modifier[49491-49498]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[50086-50092]:SimpleType[49499-49505]"
  }, {
    "left" : "getNativeType",
    "right" : "getNativeType",
    "info" : "SimpleName[50093-50106]:SimpleName[49506-49519]"
  }, {
    "left" : "JSTypeNative typeId",
    "right" : "JSTypeNative typeId",
    "info" : "SingleVariableDeclaration[50107-50126]:SingleVariableDeclaration[49520-49539]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50128-50176]:Block[49541-49589]"
  }, {
    "left" : "return registry.getNativeType(typeId);",
    "right" : "return registry.getNativeType(typeId);",
    "info" : "ReturnStatement[50134-50172]:ReturnStatement[49547-49585]"
  } ]
}