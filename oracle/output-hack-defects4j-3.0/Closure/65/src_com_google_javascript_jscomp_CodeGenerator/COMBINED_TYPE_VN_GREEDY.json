{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "TypeDeclaration[1096-37651]:TypeDeclaration[1096-37653]"
    }, {
      "left" : "private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
      "right" : "private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();",
      "info" : "FieldDeclaration[1282-1355]:FieldDeclaration[1282-1355]"
    }, {
      "left" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "right" : "private static final char[] HEX_CHARS\n      = { '0', '1', '2', '3', '4', '5', '6', '7',\n          '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };",
      "info" : "FieldDeclaration[1359-1498]:FieldDeclaration[1359-1498]"
    }, {
      "left" : "private final CodeConsumer cc;",
      "right" : "private final CodeConsumer cc;",
      "info" : "FieldDeclaration[1502-1532]:FieldDeclaration[1502-1532]"
    }, {
      "left" : "private final CharsetEncoder outputCharsetEncoder;",
      "right" : "private final CharsetEncoder outputCharsetEncoder;",
      "info" : "FieldDeclaration[1536-1586]:FieldDeclaration[1536-1586]"
    }, {
      "left" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "right" : "CodeGenerator(\n      CodeConsumer consumer, Charset outputCharset)",
      "info" : "MethodDeclaration[1590-2150]:MethodDeclaration[1590-2150]"
    }, {
      "left" : "CodeGenerator(CodeConsumer consumer)",
      "right" : "CodeGenerator(CodeConsumer consumer)",
      "info" : "MethodDeclaration[2154-2222]:MethodDeclaration[2154-2222]"
    }, {
      "left" : "public void tagAsStrict()",
      "right" : "public void tagAsStrict()",
      "info" : "MethodDeclaration[2226-2341]:MethodDeclaration[2226-2341]"
    }, {
      "left" : "void add(String str)",
      "right" : "void add(String str)",
      "info" : "MethodDeclaration[2345-2388]:MethodDeclaration[2345-2388]"
    }, {
      "left" : "private void addIdentifier(String identifier)",
      "right" : "private void addIdentifier(String identifier)",
      "info" : "MethodDeclaration[2392-2495]:MethodDeclaration[2392-2495]"
    }, {
      "left" : "void add(Node n)",
      "right" : "void add(Node n)",
      "info" : "MethodDeclaration[2499-2548]:MethodDeclaration[2499-2548]"
    }, {
      "left" : "void add(Node n, Context context)",
      "right" : "void add(Node n, Context context)",
      "info" : "MethodDeclaration[2552-22027]:MethodDeclaration[2552-22027]"
    }, {
      "left" : "static boolean isSimpleNumber(String s)",
      "right" : "static boolean isSimpleNumber(String s)",
      "info" : "MethodDeclaration[22031-22270]:MethodDeclaration[22031-22270]"
    }, {
      "left" : "static double getSimpleNumber(String s)",
      "right" : "static double getSimpleNumber(String s)",
      "info" : "MethodDeclaration[22274-22627]:MethodDeclaration[22274-22627]"
    }, {
      "left" : "private boolean isIndirectEval(Node n)",
      "right" : "private boolean isIndirectEval(Node n)",
      "info" : "MethodDeclaration[22631-22855]:MethodDeclaration[22631-22855]"
    }, {
      "left" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "right" : "private void addNonEmptyStatement(\n      Node n, Context context, boolean allowNonBlockChild)",
      "info" : "MethodDeclaration[22859-25015]:MethodDeclaration[22859-25015]"
    }, {
      "left" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "right" : "private boolean isOneExactlyFunctionOrDo(Node n)",
      "info" : "MethodDeclaration[25019-25934]:MethodDeclaration[25019-25934]"
    }, {
      "left" : "void addLeftExpr(Node n, int minPrecedence, Context context)",
      "right" : "void addLeftExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[25938-26478]:MethodDeclaration[25938-26478]"
    }, {
      "left" : "void addExpr(Node n, int minPrecedence)",
      "right" : "void addExpr(Node n, int minPrecedence)",
      "info" : "MethodDeclaration[26482-26573]:MethodDeclaration[26482-26573]"
    }, {
      "left" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "right" : "private void addExpr(Node n, int minPrecedence, Context context)",
      "info" : "MethodDeclaration[26577-26924]:MethodDeclaration[26577-26924]"
    }, {
      "left" : "void addList(Node firstInList)",
      "right" : "void addList(Node firstInList)",
      "info" : "MethodDeclaration[26928-27011]:MethodDeclaration[26928-27011]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument)",
      "info" : "MethodDeclaration[27015-27154]:MethodDeclaration[27015-27154]"
    }, {
      "left" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "right" : "void addList(Node firstInList, boolean isArrayOrFunctionArgument,\n               Context lhsContext)",
      "info" : "MethodDeclaration[27158-27571]:MethodDeclaration[27158-27571]"
    }, {
      "left" : "void addArrayList(Node firstInList)",
      "right" : "void addArrayList(Node firstInList)",
      "info" : "MethodDeclaration[27575-28261]:MethodDeclaration[27575-28261]"
    }, {
      "left" : "void addCaseBody(Node caseBody)",
      "right" : "void addCaseBody(Node caseBody)",
      "info" : "MethodDeclaration[28265-28367]:MethodDeclaration[28265-28367]"
    }, {
      "left" : "void addAllSiblings(Node n)",
      "right" : "void addAllSiblings(Node n)",
      "info" : "MethodDeclaration[28371-28475]:MethodDeclaration[28371-28475]"
    }, {
      "left" : "void addJsString(String s)",
      "right" : "void addJsString(String s)",
      "info" : "MethodDeclaration[28479-28756]:MethodDeclaration[28479-28756]"
    }, {
      "left" : "String jsString(String s)",
      "right" : "String jsString(String s)",
      "info" : "MethodDeclaration[28760-29505]:MethodDeclaration[28760-29505]"
    }, {
      "left" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "right" : "static String regexpEscape(String s, CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[29509-29693]:MethodDeclaration[29509-29693]"
    }, {
      "left" : "static String escapeToDoubleQuotedJsString(String s)",
      "right" : "static String escapeToDoubleQuotedJsString(String s)",
      "info" : "MethodDeclaration[29697-29902]:MethodDeclaration[29697-29902]"
    }, {
      "left" : "static String regexpEscape(String s)",
      "right" : "static String regexpEscape(String s)",
      "info" : "MethodDeclaration[30031-30107]:MethodDeclaration[30031-30107]"
    }, {
      "left" : "static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder)",
      "right" : "static String strEscape(String s, char quote,\n                          String doublequoteEscape,\n                          String singlequoteEscape,\n                          String backslashEscape,\n                          CharsetEncoder outputCharsetEncoder)",
      "info" : "MethodDeclaration[30111-32975]:MethodDeclaration[30111-32977]"
    }, {
      "left" : "static String identifierEscape(String s)",
      "right" : "static String identifierEscape(String s)",
      "info" : "MethodDeclaration[32979-33669]:MethodDeclaration[32981-33671]"
    }, {
      "left" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "right" : "private static int getNonEmptyChildCount(Node n, int maxCount)",
      "info" : "MethodDeclaration[33672-34189]:MethodDeclaration[33674-34191]"
    }, {
      "left" : "private static Node getFirstNonEmptyChild(Node n)",
      "right" : "private static Node getFirstNonEmptyChild(Node n)",
      "info" : "MethodDeclaration[34193-34623]:MethodDeclaration[34195-34625]"
    }, {
      "left" : "enum : Context",
      "right" : "enum : Context",
      "info" : "EnumDeclaration[34828-35230]:EnumDeclaration[34830-35232]"
    }, {
      "left" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "right" : "private Context getContextForNonEmptyExpression(Context currentContext)",
      "info" : "MethodDeclaration[35234-35425]:MethodDeclaration[35236-35427]"
    }, {
      "left" : "private  Context getContextForNoInOperator(Context context)",
      "right" : "private  Context getContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[35429-35764]:MethodDeclaration[35431-35766]"
    }, {
      "left" : "private  Context clearContextForNoInOperator(Context context)",
      "right" : "private  Context clearContextForNoInOperator(Context context)",
      "info" : "MethodDeclaration[35768-36205]:MethodDeclaration[35770-36207]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      StringBuilder sb, char c)",
      "info" : "MethodDeclaration[36209-36559]:MethodDeclaration[36211-36561]"
    }, {
      "left" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "right" : "private static void appendHexJavaScriptRepresentation(\n      int codePoint, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[36563-37649]:MethodDeclaration[36565-37651]"
    } ],
    "mappings" : [
 {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[1590-1603]:SimpleName[1590-1603]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[1611-1632]:SingleVariableDeclaration[1611-1632]"
    }, {
      "left" : "Charset outputCharset",
      "right" : "Charset outputCharset",
      "info" : "SingleVariableDeclaration[1634-1655]:SingleVariableDeclaration[1634-1655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1657-2150]:Block[1657-2150]"
    }, {
      "left" : "cc = consumer;",
      "right" : "cc = consumer;",
      "info" : "ExpressionStatement[1663-1677]:ExpressionStatement[1663-1677]"
    }, {
      "left" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "right" : "if (outputCharset == null || outputCharset == Charsets.US_ASCII)",
      "info" : "IfStatement[1682-2146]:IfStatement[1682-2146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1747-2071]:Block[1747-2071]"
    }, {
      "left" : "this.outputCharsetEncoder = null;",
      "right" : "this.outputCharsetEncoder = null;",
      "info" : "ExpressionStatement[2032-2065]:ExpressionStatement[2032-2065]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2077-2146]:Block[2077-2146]"
    }, {
      "left" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "right" : "this.outputCharsetEncoder = outputCharset.newEncoder();",
      "info" : "ExpressionStatement[2085-2140]:ExpressionStatement[2085-2140]"
    }, {
      "left" : "CodeGenerator",
      "right" : "CodeGenerator",
      "info" : "SimpleName[2154-2167]:SimpleName[2154-2167]"
    }, {
      "left" : "CodeConsumer consumer",
      "right" : "CodeConsumer consumer",
      "info" : "SingleVariableDeclaration[2168-2189]:SingleVariableDeclaration[2168-2189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2191-2222]:Block[2191-2222]"
    }, {
      "left" : "this(consumer, null);",
      "right" : "this(consumer, null);",
      "info" : "ConstructorInvocation[2197-2218]:ConstructorInvocation[2197-2218]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2284-2290]:Modifier[2284-2290]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2291-2295]:PrimitiveType[2291-2295]"
    }, {
      "left" : "tagAsStrict",
      "right" : "tagAsStrict",
      "info" : "SimpleName[2296-2307]:SimpleName[2296-2307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2310-2341]:Block[2310-2341]"
    }, {
      "left" : "add(\"'use strict';\");",
      "right" : "add(\"'use strict';\");",
      "info" : "ExpressionStatement[2316-2337]:ExpressionStatement[2316-2337]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2345-2349]:PrimitiveType[2345-2349]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2350-2353]:SimpleName[2350-2353]"
    }, {
      "left" : "String str",
      "right" : "String str",
      "info" : "SingleVariableDeclaration[2354-2364]:SingleVariableDeclaration[2354-2364]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2366-2388]:Block[2366-2388]"
    }, {
      "left" : "cc.add(str);",
      "right" : "cc.add(str);",
      "info" : "ExpressionStatement[2372-2384]:ExpressionStatement[2372-2384]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[2392-2399]:Modifier[2392-2399]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2400-2404]:PrimitiveType[2400-2404]"
    }, {
      "left" : "addIdentifier",
      "right" : "addIdentifier",
      "info" : "SimpleName[2405-2418]:SimpleName[2405-2418]"
    }, {
      "left" : "String identifier",
      "right" : "String identifier",
      "info" : "SingleVariableDeclaration[2419-2436]:SingleVariableDeclaration[2419-2436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2438-2495]:Block[2438-2495]"
    }, {
      "left" : "cc.addIdentifier(identifierEscape(identifier));",
      "right" : "cc.addIdentifier(identifierEscape(identifier));",
      "info" : "ExpressionStatement[2444-2491]:ExpressionStatement[2444-2491]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2499-2503]:PrimitiveType[2499-2503]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2504-2507]:SimpleName[2504-2507]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2508-2514]:SingleVariableDeclaration[2508-2514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2516-2548]:Block[2516-2548]"
    }, {
      "left" : "add(n, Context.OTHER);",
      "right" : "add(n, Context.OTHER);",
      "info" : "ExpressionStatement[2522-2544]:ExpressionStatement[2522-2544]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[2552-2556]:PrimitiveType[2552-2556]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[2557-2560]:SimpleName[2557-2560]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2561-2567]:SingleVariableDeclaration[2561-2567]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[2569-2584]:SingleVariableDeclaration[2569-2584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2586-22027]:Block[2586-22027]"
    }, {
      "left" : "if (!cc.continueProcessing())",
      "right" : "if (!cc.continueProcessing())",
      "info" : "IfStatement[2592-2643]:IfStatement[2592-2643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2622-2643]:Block[2622-2643]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[2630-2637]:ReturnStatement[2630-2637]"
    }, {
      "left" : "int type = n.getType();",
      "right" : "int type = n.getType();",
      "info" : "VariableDeclarationStatement[2649-2672]:VariableDeclarationStatement[2649-2672]"
    }, {
      "left" : "String opstr = NodeUtil.opToStr(type);",
      "right" : "String opstr = NodeUtil.opToStr(type);",
      "info" : "VariableDeclarationStatement[2677-2715]:VariableDeclarationStatement[2677-2715]"
    }, {
      "left" : "int childCount = n.getChildCount();",
      "right" : "int childCount = n.getChildCount();",
      "info" : "VariableDeclarationStatement[2720-2755]:VariableDeclarationStatement[2720-2755]"
    }, {
      "left" : "Node first = n.getFirstChild();",
      "right" : "Node first = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[2760-2791]:VariableDeclarationStatement[2760-2791]"
    }, {
      "left" : "Node last = n.getLastChild();",
      "right" : "Node last = n.getLastChild();",
      "info" : "VariableDeclarationStatement[2796-2825]:VariableDeclarationStatement[2796-2825]"
    }, {
      "left" : "if (opstr != null && first != last)",
      "right" : "if (opstr != null && first != last)",
      "info" : "IfStatement[2866-3857]:IfStatement[2866-3857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2902-3857]:Block[2902-3857]"
    }, {
      "left" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "right" : "Preconditions.checkState(\n          childCount == 2,\n          \"Bad binary operator \\\"%s\\\": expected 2 arguments but got %s\",\n          opstr, childCount);",
      "info" : "ExpressionStatement[2910-3065]:ExpressionStatement[2910-3065]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[3072-3106]:VariableDeclarationStatement[3072-3106]"
    }, {
      "left" : "addLeftExpr(first, p, context);",
      "right" : "addLeftExpr(first, p, context);",
      "info" : "ExpressionStatement[3113-3144]:ExpressionStatement[3113-3144]"
    }, {
      "left" : "cc.addOp(opstr, true);",
      "right" : "cc.addOp(opstr, true);",
      "info" : "ExpressionStatement[3151-3173]:ExpressionStatement[3151-3173]"
    }, {
      "left" : "Context rhsContext = getContextForNoInOperator(context);",
      "right" : "Context rhsContext = getContextForNoInOperator(context);",
      "info" : "VariableDeclarationStatement[3288-3344]:VariableDeclarationStatement[3288-3344]"
    }, {
      "left" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "right" : "if (last.getType() == type &&\n          NodeUtil.isAssociative(type))",
      "info" : "IfStatement[3474-3837]:IfStatement[3474-3837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3544-3591]:Block[3544-3591]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[3554-3583]:ExpressionStatement[3554-3583]"
    }, {
      "left" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "right" : "if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last))",
      "info" : "IfStatement[3597-3837]:IfStatement[3597-3837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3662-3780]:Block[3662-3780]"
    }, {
      "left" : "addExpr(last, p, rhsContext);",
      "right" : "addExpr(last, p, rhsContext);",
      "info" : "ExpressionStatement[3743-3772]:ExpressionStatement[3743-3772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3786-3837]:Block[3786-3837]"
    }, {
      "left" : "addExpr(last, p + 1, rhsContext);",
      "right" : "addExpr(last, p + 1, rhsContext);",
      "info" : "ExpressionStatement[3796-3829]:ExpressionStatement[3796-3829]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3844-3851]:ReturnStatement[3844-3851]"
    }, {
      "left" : "cc.startSourceMapping(n);",
      "right" : "cc.startSourceMapping(n);",
      "info" : "ExpressionStatement[3863-3888]:ExpressionStatement[3863-3888]"
    }, {
      "left" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().getType() == Token.NUMBER) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type));\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.getType() == Token.FUNCTION);\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GET) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n.getString());\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n          add(\")\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction())) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n.getString());\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.getType() == Token.GET || c.getType() == Token.SET) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.getType() == Token.STRING);\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "right" : "switch (type) {\n      case Token.TRY: {\n        Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());\n        Preconditions.checkState(childCount >= 2 && childCount <= 3);\n\n        add(\"try\");\n        add(first, Context.PRESERVE_BLOCK);\n\n        // second child contains the catch block, or nothing if there\n        // isn't a catch block\n        Node catchblock = first.getNext().getFirstChild();\n        if (catchblock != null) {\n          add(catchblock);\n        }\n\n        if (childCount == 3) {\n          add(\"finally\");\n          add(last, Context.PRESERVE_BLOCK);\n        }\n        break;\n      }\n\n      case Token.CATCH:\n        Preconditions.checkState(childCount == 2);\n        add(\"catch(\");\n        add(first);\n        add(\")\");\n        add(last, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.THROW:\n        Preconditions.checkState(childCount == 1);\n        add(\"throw\");\n        add(first);\n\n        // Must have a ';' after a throw statement, otherwise safari can't\n        // parse this.\n        cc.endStatement(true);\n        break;\n\n      case Token.RETURN:\n        add(\"return\");\n        if (childCount == 1) {\n          add(first);\n        } else {\n          Preconditions.checkState(childCount == 0);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.VAR:\n        if (first != null) {\n          add(\"var \");\n          addList(first, false, getContextForNoInOperator(context));\n        }\n        break;\n\n      case Token.LABEL_NAME:\n        Preconditions.checkState(!n.getString().isEmpty());\n        addIdentifier(n.getString());\n        break;\n\n      case Token.NAME:\n        if (first == null || first.getType() == Token.EMPTY) {\n          addIdentifier(n.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          addIdentifier(n.getString());\n          cc.addOp(\"=\", true);\n          if (first.getType() == Token.COMMA) {\n            addExpr(first, NodeUtil.precedence(Token.ASSIGN));\n          } else {\n            // Add expression, consider nearby code at lowest level of\n            // precedence.\n            addExpr(first, 0, getContextForNoInOperator(context));\n          }\n        }\n        break;\n\n      case Token.ARRAYLIT:\n        add(\"[\");\n        addArrayList(first);\n        add(\"]\");\n        break;\n\n      case Token.LP:\n        add(\"(\");\n        addList(first);\n        add(\")\");\n        break;\n\n      case Token.COMMA:\n        Preconditions.checkState(childCount == 2);\n        addList(first, false, context);\n        break;\n\n      case Token.NUMBER:\n        Preconditions.checkState(childCount == 0);\n        cc.addNumber(n.getDouble());\n        break;\n\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS: {\n        // All of these unary operators are right-associative\n        Preconditions.checkState(childCount == 1);\n        cc.addOp(NodeUtil.opToStrNoFail(type), false);\n        addExpr(first, NodeUtil.precedence(type));\n        break;\n      }\n\n      case Token.NEG: {\n        Preconditions.checkState(childCount == 1);\n\n        // It's important to our sanity checker that the code\n        // we print produces the same AST as the code we parse back.\n        // NEG is a weird case because Rhino parses \"- -2\" as \"2\".\n        if (n.getFirstChild().getType() == Token.NUMBER) {\n          cc.addNumber(-n.getFirstChild().getDouble());\n        } else {\n          cc.addOp(NodeUtil.opToStrNoFail(type), false);\n          addExpr(first, NodeUtil.precedence(type));\n        }\n\n        break;\n      }\n\n      case Token.HOOK: {\n        Preconditions.checkState(childCount == 3);\n        int p = NodeUtil.precedence(type);\n        addLeftExpr(first, p + 1, context);\n        cc.addOp(\"?\", true);\n        addExpr(first.getNext(), 1);\n        cc.addOp(\":\", true);\n        addExpr(last, 1);\n        break;\n      }\n\n      case Token.REGEXP:\n        if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING) {\n          throw new Error(\"Expected children to be strings\");\n        }\n\n        String regexp = regexpEscape(first.getString(), outputCharsetEncoder);\n\n        // I only use one .add because whitespace matters\n        if (childCount == 2) {\n          add(regexp + last.getString());\n        } else {\n          Preconditions.checkState(childCount == 1);\n          add(regexp);\n        }\n        break;\n\n      case Token.GET_REF:\n        add(first);\n        break;\n\n      case Token.REF_SPECIAL:\n        Preconditions.checkState(childCount == 1);\n        add(first);\n        add(\".\");\n        add((String) n.getProp(Node.NAME_PROP));\n        break;\n\n      case Token.FUNCTION:\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        Preconditions.checkState(childCount == 3);\n        boolean funcNeedsParens = (context == Context.START_OF_EXPR);\n        if (funcNeedsParens) {\n          add(\"(\");\n        }\n\n        add(\"function\");\n        add(first);\n\n        add(first.getNext());\n        add(last, Context.PRESERVE_BLOCK);\n        cc.endFunction(context == Context.STATEMENT);\n\n        if (funcNeedsParens) {\n          add(\")\");\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);\n        Preconditions.checkState(childCount == 1);\n        Preconditions.checkState(first.getType() == Token.FUNCTION);\n\n        // Get methods are unnamed\n        Preconditions.checkState(first.getFirstChild().getString().isEmpty());\n        if (type == Token.GET) {\n          // Get methods have no parameters.\n          Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());\n          add(\"get \");\n        } else {\n          // Set methods have one parameter.\n          Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());\n          add(\"set \");\n        }\n\n        // The name is on the GET or SET node.\n        String name = n.getString();\n        Node fn = first;\n        Node parameters = fn.getChildAtIndex(1);\n        Node body = fn.getLastChild();\n\n        // Add the property name.\n        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name)) {\n          add(name);\n        } else {\n          // Determine if the string is a simple number.\n          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            addJsString(n.getString());\n          }\n        }\n\n        add(parameters);\n        add(body, Context.PRESERVE_BLOCK);\n        break;\n\n      case Token.SCRIPT:\n      case Token.BLOCK: {\n        if (n.getClass() != Node.class) {\n          throw new Error(\"Unexpected Node subclass.\");\n        }\n        boolean preserveBlock = context == Context.PRESERVE_BLOCK;\n        if (preserveBlock) {\n          cc.beginBlock();\n        }\n\n        boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);\n        for (Node c = first; c != null; c = c.getNext()) {\n          add(c, Context.STATEMENT);\n\n          // VAR doesn't include ';' since it gets used in expressions\n          if (c.getType() == Token.VAR) {\n            cc.endStatement();\n          }\n\n          if (c.getType() == Token.FUNCTION) {\n            cc.maybeLineBreak();\n          }\n\n          // Prefer to break lines in between top-level statements\n          // because top level statements are more homogeneous.\n          if (preferLineBreaks) {\n            cc.notePreferredLineBreak();\n          }\n        }\n        if (preserveBlock) {\n          cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));\n        }\n        break;\n      }\n\n      case Token.FOR:\n        if (childCount == 4) {\n          add(\"for(\");\n          if (first.getType() == Token.VAR) {\n            add(first, Context.IN_FOR_INIT_CLAUSE);\n          } else {\n            addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);\n          }\n          add(\";\");\n          add(first.getNext());\n          add(\";\");\n          add(first.getNext().getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          Preconditions.checkState(childCount == 3);\n          add(\"for(\");\n          add(first);\n          add(\"in\");\n          add(first.getNext());\n          add(\")\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        }\n        break;\n\n      case Token.DO:\n        Preconditions.checkState(childCount == 2);\n        add(\"do\");\n        addNonEmptyStatement(first, Context.OTHER, false);\n        add(\"while(\");\n        add(last);\n        add(\")\");\n        cc.endStatement();\n        break;\n\n      case Token.WHILE:\n        Preconditions.checkState(childCount == 2);\n        add(\"while(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.EMPTY:\n        Preconditions.checkState(childCount == 0);\n        break;\n\n      case Token.GETPROP: {\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);\n        Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");\n        boolean needsParens = (first.getType() == Token.NUMBER);\n        if (needsParens) {\n          add(\"(\");\n        }\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        if (needsParens) {\n          add(\")\");\n        }\n        add(\".\");\n        addIdentifier(last.getString());\n        break;\n      }\n\n      case Token.GETELEM:\n        Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);\n        addLeftExpr(first, NodeUtil.precedence(type), context);\n        add(\"[\");\n        add(first.getNext());\n        add(\"]\");\n        break;\n\n      case Token.WITH:\n        Preconditions.checkState(childCount == 2);\n        add(\"with(\");\n        add(first);\n        add(\")\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);\n        break;\n\n      case Token.INC:\n      case Token.DEC: {\n        Preconditions.checkState(childCount == 1);\n        String o = type == Token.INC ? \"++\" : \"--\";\n        int postProp = n.getIntProp(Node.INCRDECR_PROP);\n        // A non-zero post-prop value indicates a post inc/dec, default of zero\n        // is a pre-inc/dec.\n        if (postProp != 0) {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n          cc.addOp(o, false);\n        } else {\n          cc.addOp(o, false);\n          add(first);\n        }\n        break;\n      }\n\n      case Token.CALL:\n        // We have two special cases here:\n        // 1) If the left hand side of the call is a direct reference to eval,\n        // then it must have a DIRECT_EVAL annotation. If it does not, then\n        // that means it was originally an indirect call to eval, and that\n        // indirectness must be preserved.\n        // 2) If the left hand side of the call is a property reference,\n        // then the call must not a FREE_CALL annotation. If it does, then\n        // that means it was originally an call without an explicit this and\n        // that must be preserved.\n        if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first)) {\n          add(\"(0,\");\n          addExpr(first, NodeUtil.precedence(Token.COMMA));\n          add(\")\");\n        } else {\n          addLeftExpr(first, NodeUtil.precedence(type), context);\n        }\n        add(\"(\");\n        addList(first.getNext());\n        add(\")\");\n        break;\n\n      case Token.IF:\n        boolean hasElse = childCount == 3;\n        boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;\n        if (ambiguousElseClause) {\n          cc.beginBlock();\n        }\n\n        add(\"if(\");\n        add(first);\n        add(\")\");\n\n        if (hasElse) {\n          addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);\n          add(\"else\");\n          addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);\n        } else {\n          addNonEmptyStatement(first.getNext(), Context.OTHER, false);\n          Preconditions.checkState(childCount == 2);\n        }\n\n        if (ambiguousElseClause) {\n          cc.endBlock();\n        }\n        break;\n\n      case Token.NULL:\n      case Token.THIS:\n      case Token.FALSE:\n      case Token.TRUE:\n        Preconditions.checkState(childCount == 0);\n        add(Node.tokenToName(type));\n        break;\n\n      case Token.CONTINUE:\n        Preconditions.checkState(childCount <= 1);\n        add(\"continue\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.DEBUGGER:\n        Preconditions.checkState(childCount == 0);\n        add(\"debugger\");\n        cc.endStatement();\n        break;\n\n      case Token.BREAK:\n        Preconditions.checkState(childCount <= 1);\n        add(\"break\");\n        if (childCount == 1) {\n          if (first.getType() != Token.LABEL_NAME) {\n            throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n          }\n          add(\" \");\n          add(first);\n        }\n        cc.endStatement();\n        break;\n\n      case Token.EXPR_VOID:\n        throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");\n\n      case Token.EXPR_RESULT:\n        Preconditions.checkState(childCount == 1);\n        add(first, Context.START_OF_EXPR);\n        cc.endStatement();\n        break;\n\n      case Token.NEW:\n        add(\"new \");\n        int precedence = NodeUtil.precedence(type);\n\n        // If the first child contains a CALL, then claim higher precedence\n        // to force parentheses. Otherwise, when parsed, NEW will bind to the\n        // first viable parentheses (don't traverse into functions).\n        if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction())) {\n          precedence = NodeUtil.precedence(first.getType()) + 1;\n        }\n        addExpr(first, precedence);\n\n        // '()' is optional when no arguments are present\n        Node next = first.getNext();\n        if (next != null) {\n          add(\"(\");\n          addList(next);\n          add(\")\");\n        }\n        break;\n\n      case Token.STRING:\n        if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0)) {\n          throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());\n        }\n        addJsString(n.getString());\n        break;\n\n      case Token.DELPROP:\n        Preconditions.checkState(childCount == 1);\n        add(\"delete \");\n        add(first);\n        break;\n\n      case Token.OBJECTLIT: {\n        boolean needsParens = (context == Context.START_OF_EXPR);\n        if (needsParens) {\n          add(\"(\");\n        }\n        add(\"{\");\n        for (Node c = first; c != null; c = c.getNext()) {\n          if (c != first) {\n            cc.listSeparator();\n          }\n\n          if (c.getType() == Token.GET || c.getType() == Token.SET) {\n            add(c);\n          } else {\n            Preconditions.checkState(c.getType() == Token.STRING);\n            String key = c.getString();\n            // Object literal property names don't have to be quoted if they\n            // are not JavaScript keywords\n            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key)) {\n              add(key);\n            } else {\n              // Determine if the string is a simple number.\n              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1);\n              }\n            }\n            add(\":\");\n            addExpr(c.getFirstChild(), 1);\n          }\n        }\n        add(\"}\");\n        if (needsParens) {\n          add(\")\");\n        }\n        break;\n      }\n\n      case Token.SWITCH:\n        add(\"switch(\");\n        add(first);\n        add(\")\");\n        cc.beginBlock();\n        addAllSiblings(first.getNext());\n        cc.endBlock(context == Context.STATEMENT);\n        break;\n\n      case Token.CASE:\n        Preconditions.checkState(childCount == 2);\n        add(\"case \");\n        add(first);\n        addCaseBody(last);\n        break;\n\n      case Token.DEFAULT:\n        Preconditions.checkState(childCount == 1);\n        add(\"default\");\n        addCaseBody(first);\n        break;\n\n      case Token.LABEL:\n        Preconditions.checkState(childCount == 2);\n        if (first.getType() != Token.LABEL_NAME) {\n          throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");\n        }\n        add(first);\n        add(\":\");\n        addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);\n        break;\n\n      // This node is auto generated in anonymous functions and should just get\n      // ignored for our purposes.\n      case Token.SETNAME:\n        break;\n\n      default:\n        throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());\n    }",
      "info" : "SwitchStatement[3894-21994]:SwitchStatement[3894-21994]"
    }, {
      "left" : "case Token.TRY:",
      "right" : "case Token.TRY:",
      "info" : "SwitchCase[3916-3931]:SwitchCase[3916-3931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3932-4570]:Block[3932-4570]"
    }, {
      "left" : "Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());",
      "right" : "Preconditions.checkState(first.getNext().getType() == Token.BLOCK &&\n                !first.getNext().hasMoreThanOneChild());",
      "info" : "ExpressionStatement[3942-4067]:ExpressionStatement[3942-4067]"
    }, {
      "left" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "right" : "Preconditions.checkState(childCount >= 2 && childCount <= 3);",
      "info" : "ExpressionStatement[4076-4137]:ExpressionStatement[4076-4137]"
    }, {
      "left" : "add(\"try\");",
      "right" : "add(\"try\");",
      "info" : "ExpressionStatement[4147-4158]:ExpressionStatement[4147-4158]"
    }, {
      "left" : "add(first, Context.PRESERVE_BLOCK);",
      "right" : "add(first, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4167-4202]:ExpressionStatement[4167-4202]"
    }, {
      "left" : "Node catchblock = first.getNext().getFirstChild();",
      "right" : "Node catchblock = first.getNext().getFirstChild();",
      "info" : "VariableDeclarationStatement[4313-4363]:VariableDeclarationStatement[4313-4363]"
    }, {
      "left" : "if (catchblock != null)",
      "right" : "if (catchblock != null)",
      "info" : "IfStatement[4372-4434]:IfStatement[4372-4434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4396-4434]:Block[4396-4434]"
    }, {
      "left" : "add(catchblock);",
      "right" : "add(catchblock);",
      "info" : "ExpressionStatement[4408-4424]:ExpressionStatement[4408-4424]"
    }, {
      "left" : "if (childCount == 3)",
      "right" : "if (childCount == 3)",
      "info" : "IfStatement[4444-4547]:IfStatement[4444-4547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4465-4547]:Block[4465-4547]"
    }, {
      "left" : "add(\"finally\");",
      "right" : "add(\"finally\");",
      "info" : "ExpressionStatement[4477-4492]:ExpressionStatement[4477-4492]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4503-4537]:ExpressionStatement[4503-4537]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4556-4562]:BreakStatement[4556-4562]"
    }, {
      "left" : "case Token.CATCH:",
      "right" : "case Token.CATCH:",
      "info" : "SwitchCase[4578-4595]:SwitchCase[4578-4595]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[4604-4646]:ExpressionStatement[4604-4646]"
    }, {
      "left" : "add(\"catch(\");",
      "right" : "add(\"catch(\");",
      "info" : "ExpressionStatement[4655-4669]:ExpressionStatement[4655-4669]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4678-4689]:ExpressionStatement[4678-4689]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[4698-4707]:ExpressionStatement[4698-4707]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[4716-4750]:ExpressionStatement[4716-4750]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[4759-4765]:BreakStatement[4759-4765]"
    }, {
      "left" : "case Token.THROW:",
      "right" : "case Token.THROW:",
      "info" : "SwitchCase[4773-4790]:SwitchCase[4773-4790]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[4799-4841]:ExpressionStatement[4799-4841]"
    }, {
      "left" : "add(\"throw\");",
      "right" : "add(\"throw\");",
      "info" : "ExpressionStatement[4850-4863]:ExpressionStatement[4850-4863]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[4872-4883]:ExpressionStatement[4872-4883]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[4991-5013]:ExpressionStatement[4991-5013]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5022-5028]:BreakStatement[5022-5028]"
    }, {
      "left" : "case Token.RETURN:",
      "right" : "case Token.RETURN:",
      "info" : "SwitchCase[5036-5054]:SwitchCase[5036-5054]"
    }, {
      "left" : "add(\"return\");",
      "right" : "add(\"return\");",
      "info" : "ExpressionStatement[5063-5077]:ExpressionStatement[5063-5077]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[5086-5210]:IfStatement[5086-5210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5107-5140]:Block[5107-5140]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[5119-5130]:ExpressionStatement[5119-5130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5146-5210]:Block[5146-5210]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[5158-5200]:ExpressionStatement[5158-5200]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[5219-5237]:ExpressionStatement[5219-5237]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5246-5252]:BreakStatement[5246-5252]"
    }, {
      "left" : "case Token.VAR:",
      "right" : "case Token.VAR:",
      "info" : "SwitchCase[5260-5275]:SwitchCase[5260-5275]"
    }, {
      "left" : "if (first != null)",
      "right" : "if (first != null)",
      "info" : "IfStatement[5284-5406]:IfStatement[5284-5406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5303-5406]:Block[5303-5406]"
    }, {
      "left" : "add(\"var \");",
      "right" : "add(\"var \");",
      "info" : "ExpressionStatement[5315-5327]:ExpressionStatement[5315-5327]"
    }, {
      "left" : "addList(first, false, getContextForNoInOperator(context));",
      "right" : "addList(first, false, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[5338-5396]:ExpressionStatement[5338-5396]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5415-5421]:BreakStatement[5415-5421]"
    }, {
      "left" : "case Token.LABEL_NAME:",
      "right" : "case Token.LABEL_NAME:",
      "info" : "SwitchCase[5429-5451]:SwitchCase[5429-5451]"
    }, {
      "left" : "Preconditions.checkState(!n.getString().isEmpty());",
      "right" : "Preconditions.checkState(!n.getString().isEmpty());",
      "info" : "ExpressionStatement[5460-5511]:ExpressionStatement[5460-5511]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5520-5549]:ExpressionStatement[5520-5549]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5558-5564]:BreakStatement[5558-5564]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[5572-5588]:SwitchCase[5572-5588]"
    }, {
      "left" : "if (first == null || first.getType() == Token.EMPTY)",
      "right" : "if (first == null || first.getType() == Token.EMPTY)",
      "info" : "IfStatement[5597-6149]:IfStatement[5597-6149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5650-5701]:Block[5650-5701]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5662-5691]:ExpressionStatement[5662-5691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5707-6149]:Block[5707-6149]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[5719-5761]:ExpressionStatement[5719-5761]"
    }, {
      "left" : "addIdentifier(n.getString());",
      "right" : "addIdentifier(n.getString());",
      "info" : "ExpressionStatement[5772-5801]:ExpressionStatement[5772-5801]"
    }, {
      "left" : "cc.addOp(\"=\", true);",
      "right" : "cc.addOp(\"=\", true);",
      "info" : "ExpressionStatement[5812-5832]:ExpressionStatement[5812-5832]"
    }, {
      "left" : "if (first.getType() == Token.COMMA)",
      "right" : "if (first.getType() == Token.COMMA)",
      "info" : "IfStatement[5843-6139]:IfStatement[5843-6139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5879-5955]:Block[5879-5955]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN));",
      "right" : "addExpr(first, NodeUtil.precedence(Token.ASSIGN));",
      "info" : "ExpressionStatement[5893-5943]:ExpressionStatement[5893-5943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5961-6139]:Block[5961-6139]"
    }, {
      "left" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "right" : "addExpr(first, 0, getContextForNoInOperator(context));",
      "info" : "ExpressionStatement[6073-6127]:ExpressionStatement[6073-6127]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6158-6164]:BreakStatement[6158-6164]"
    }, {
      "left" : "case Token.ARRAYLIT:",
      "right" : "case Token.ARRAYLIT:",
      "info" : "SwitchCase[6172-6192]:SwitchCase[6172-6192]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[6201-6210]:ExpressionStatement[6201-6210]"
    }, {
      "left" : "addArrayList(first);",
      "right" : "addArrayList(first);",
      "info" : "ExpressionStatement[6219-6239]:ExpressionStatement[6219-6239]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[6248-6257]:ExpressionStatement[6248-6257]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6266-6272]:BreakStatement[6266-6272]"
    }, {
      "left" : "case Token.LP:",
      "right" : "case Token.LP:",
      "info" : "SwitchCase[6280-6294]:SwitchCase[6280-6294]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[6303-6312]:ExpressionStatement[6303-6312]"
    }, {
      "left" : "addList(first);",
      "right" : "addList(first);",
      "info" : "ExpressionStatement[6321-6336]:ExpressionStatement[6321-6336]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[6345-6354]:ExpressionStatement[6345-6354]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6363-6369]:BreakStatement[6363-6369]"
    }, {
      "left" : "case Token.COMMA:",
      "right" : "case Token.COMMA:",
      "info" : "SwitchCase[6377-6394]:SwitchCase[6377-6394]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[6403-6445]:ExpressionStatement[6403-6445]"
    }, {
      "left" : "addList(first, false, context);",
      "right" : "addList(first, false, context);",
      "info" : "ExpressionStatement[6454-6485]:ExpressionStatement[6454-6485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6494-6500]:BreakStatement[6494-6500]"
    }, {
      "left" : "case Token.NUMBER:",
      "right" : "case Token.NUMBER:",
      "info" : "SwitchCase[6508-6526]:SwitchCase[6508-6526]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[6535-6577]:ExpressionStatement[6535-6577]"
    }, {
      "left" : "cc.addNumber(n.getDouble());",
      "right" : "cc.addNumber(n.getDouble());",
      "info" : "ExpressionStatement[6586-6614]:ExpressionStatement[6586-6614]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6623-6629]:BreakStatement[6623-6629]"
    }, {
      "left" : "case Token.TYPEOF:",
      "right" : "case Token.TYPEOF:",
      "info" : "SwitchCase[6637-6655]:SwitchCase[6637-6655]"
    }, {
      "left" : "case Token.VOID:",
      "right" : "case Token.VOID:",
      "info" : "SwitchCase[6662-6678]:SwitchCase[6662-6678]"
    }, {
      "left" : "case Token.NOT:",
      "right" : "case Token.NOT:",
      "info" : "SwitchCase[6685-6700]:SwitchCase[6685-6700]"
    }, {
      "left" : "case Token.BITNOT:",
      "right" : "case Token.BITNOT:",
      "info" : "SwitchCase[6707-6725]:SwitchCase[6707-6725]"
    }, {
      "left" : "case Token.POS:",
      "right" : "case Token.POS:",
      "info" : "SwitchCase[6732-6747]:SwitchCase[6732-6747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6748-6991]:Block[6748-6991]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[6820-6862]:ExpressionStatement[6820-6862]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[6871-6917]:ExpressionStatement[6871-6917]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type));",
      "right" : "addExpr(first, NodeUtil.precedence(type));",
      "info" : "ExpressionStatement[6926-6968]:ExpressionStatement[6926-6968]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6977-6983]:BreakStatement[6977-6983]"
    }, {
      "left" : "case Token.NEG:",
      "right" : "case Token.NEG:",
      "info" : "SwitchCase[6999-7014]:SwitchCase[6999-7014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7015-7542]:Block[7015-7542]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[7025-7067]:ExpressionStatement[7025-7067]"
    }, {
      "left" : "if (n.getFirstChild().getType() == Token.NUMBER)",
      "right" : "if (n.getFirstChild().getType() == Token.NUMBER)",
      "info" : "IfStatement[7275-7518]:IfStatement[7275-7518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7324-7391]:Block[7324-7391]"
    }, {
      "left" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "right" : "cc.addNumber(-n.getFirstChild().getDouble());",
      "info" : "ExpressionStatement[7336-7381]:ExpressionStatement[7336-7381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7397-7518]:Block[7397-7518]"
    }, {
      "left" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "right" : "cc.addOp(NodeUtil.opToStrNoFail(type), false);",
      "info" : "ExpressionStatement[7409-7455]:ExpressionStatement[7409-7455]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(type));",
      "right" : "addExpr(first, NodeUtil.precedence(type));",
      "info" : "ExpressionStatement[7466-7508]:ExpressionStatement[7466-7508]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7528-7534]:BreakStatement[7528-7534]"
    }, {
      "left" : "case Token.HOOK:",
      "right" : "case Token.HOOK:",
      "info" : "SwitchCase[7550-7566]:SwitchCase[7550-7566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7567-7850]:Block[7567-7850]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[7577-7619]:ExpressionStatement[7577-7619]"
    }, {
      "left" : "int p = NodeUtil.precedence(type);",
      "right" : "int p = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[7628-7662]:VariableDeclarationStatement[7628-7662]"
    }, {
      "left" : "addLeftExpr(first, p + 1, context);",
      "right" : "addLeftExpr(first, p + 1, context);",
      "info" : "ExpressionStatement[7671-7706]:ExpressionStatement[7671-7706]"
    }, {
      "left" : "cc.addOp(\"?\", true);",
      "right" : "cc.addOp(\"?\", true);",
      "info" : "ExpressionStatement[7715-7735]:ExpressionStatement[7715-7735]"
    }, {
      "left" : "addExpr(first.getNext(), 1);",
      "right" : "addExpr(first.getNext(), 1);",
      "info" : "ExpressionStatement[7744-7772]:ExpressionStatement[7744-7772]"
    }, {
      "left" : "cc.addOp(\":\", true);",
      "right" : "cc.addOp(\":\", true);",
      "info" : "ExpressionStatement[7781-7801]:ExpressionStatement[7781-7801]"
    }, {
      "left" : "addExpr(last, 1);",
      "right" : "addExpr(last, 1);",
      "info" : "ExpressionStatement[7810-7827]:ExpressionStatement[7810-7827]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[7836-7842]:BreakStatement[7836-7842]"
    }, {
      "left" : "case Token.REGEXP:",
      "right" : "case Token.REGEXP:",
      "info" : "SwitchCase[7858-7876]:SwitchCase[7858-7876]"
    }, {
      "left" : "if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING)",
      "right" : "if (first.getType() != Token.STRING ||\n            last.getType() != Token.STRING)",
      "info" : "IfStatement[7885-8041]:IfStatement[7885-8041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7968-8041]:Block[7968-8041]"
    }, {
      "left" : "throw new Error(\"Expected children to be strings\");",
      "right" : "throw new Error(\"Expected children to be strings\");",
      "info" : "ThrowStatement[7980-8031]:ThrowStatement[7980-8031]"
    }, {
      "left" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "right" : "String regexp = regexpEscape(first.getString(), outputCharsetEncoder);",
      "info" : "VariableDeclarationStatement[8051-8121]:VariableDeclarationStatement[8051-8121]"
    }, {
      "left" : "if (childCount == 2)",
      "right" : "if (childCount == 2)",
      "info" : "IfStatement[8189-8356]:IfStatement[8189-8356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8210-8263]:Block[8210-8263]"
    }, {
      "left" : "add(regexp + last.getString());",
      "right" : "add(regexp + last.getString());",
      "info" : "ExpressionStatement[8222-8253]:ExpressionStatement[8222-8253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8269-8356]:Block[8269-8356]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[8281-8323]:ExpressionStatement[8281-8323]"
    }, {
      "left" : "add(regexp);",
      "right" : "add(regexp);",
      "info" : "ExpressionStatement[8334-8346]:ExpressionStatement[8334-8346]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8365-8371]:BreakStatement[8365-8371]"
    }, {
      "left" : "case Token.GET_REF:",
      "right" : "case Token.GET_REF:",
      "info" : "SwitchCase[8379-8398]:SwitchCase[8379-8398]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[8407-8418]:ExpressionStatement[8407-8418]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8427-8433]:BreakStatement[8427-8433]"
    }, {
      "left" : "case Token.REF_SPECIAL:",
      "right" : "case Token.REF_SPECIAL:",
      "info" : "SwitchCase[8441-8464]:SwitchCase[8441-8464]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[8473-8515]:ExpressionStatement[8473-8515]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[8524-8535]:ExpressionStatement[8524-8535]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[8544-8553]:ExpressionStatement[8544-8553]"
    }, {
      "left" : "add((String) n.getProp(Node.NAME_PROP));",
      "right" : "add((String) n.getProp(Node.NAME_PROP));",
      "info" : "ExpressionStatement[8562-8602]:ExpressionStatement[8562-8602]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8611-8617]:BreakStatement[8611-8617]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[8625-8645]:SwitchCase[8625-8645]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[8654-8753]:IfStatement[8654-8753]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8686-8753]:Block[8686-8753]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[8698-8743]:ThrowStatement[8698-8743]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[8762-8804]:ExpressionStatement[8762-8804]"
    }, {
      "left" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean funcNeedsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[8813-8874]:VariableDeclarationStatement[8813-8874]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[8883-8935]:IfStatement[8883-8935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8904-8935]:Block[8904-8935]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[8916-8925]:ExpressionStatement[8916-8925]"
    }, {
      "left" : "add(\"function\");",
      "right" : "add(\"function\");",
      "info" : "ExpressionStatement[8945-8961]:ExpressionStatement[8945-8961]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[8970-8981]:ExpressionStatement[8970-8981]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[8991-9012]:ExpressionStatement[8991-9012]"
    }, {
      "left" : "add(last, Context.PRESERVE_BLOCK);",
      "right" : "add(last, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[9021-9055]:ExpressionStatement[9021-9055]"
    }, {
      "left" : "cc.endFunction(context == Context.STATEMENT);",
      "right" : "cc.endFunction(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[9064-9109]:ExpressionStatement[9064-9109]"
    }, {
      "left" : "if (funcNeedsParens)",
      "right" : "if (funcNeedsParens)",
      "info" : "IfStatement[9119-9171]:IfStatement[9119-9171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9140-9171]:Block[9140-9171]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[9152-9161]:ExpressionStatement[9152-9161]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9180-9186]:BreakStatement[9180-9186]"
    }, {
      "left" : "case Token.GET:",
      "right" : "case Token.GET:",
      "info" : "SwitchCase[9194-9209]:SwitchCase[9194-9209]"
    }, {
      "left" : "case Token.SET:",
      "right" : "case Token.SET:",
      "info" : "SwitchCase[9216-9231]:SwitchCase[9216-9231]"
    }, {
      "left" : "Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);",
      "right" : "Preconditions.checkState(n.getParent().getType() == Token.OBJECTLIT);",
      "info" : "ExpressionStatement[9240-9309]:ExpressionStatement[9240-9309]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[9318-9360]:ExpressionStatement[9318-9360]"
    }, {
      "left" : "Preconditions.checkState(first.getType() == Token.FUNCTION);",
      "right" : "Preconditions.checkState(first.getType() == Token.FUNCTION);",
      "info" : "ExpressionStatement[9369-9429]:ExpressionStatement[9369-9429]"
    }, {
      "left" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "right" : "Preconditions.checkState(first.getFirstChild().getString().isEmpty());",
      "info" : "ExpressionStatement[9474-9544]:ExpressionStatement[9474-9544]"
    }, {
      "left" : "if (type == Token.GET)",
      "right" : "if (type == Token.GET)",
      "info" : "IfStatement[9553-9893]:IfStatement[9553-9893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9576-9732]:Block[9576-9732]"
    }, {
      "left" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "right" : "Preconditions.checkState(!first.getChildAtIndex(1).hasChildren());",
      "info" : "ExpressionStatement[9633-9699]:ExpressionStatement[9633-9699]"
    }, {
      "left" : "add(\"get \");",
      "right" : "add(\"get \");",
      "info" : "ExpressionStatement[9710-9722]:ExpressionStatement[9710-9722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9738-9893]:Block[9738-9893]"
    }, {
      "left" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "right" : "Preconditions.checkState(first.getChildAtIndex(1).hasOneChild());",
      "info" : "ExpressionStatement[9795-9860]:ExpressionStatement[9795-9860]"
    }, {
      "left" : "add(\"set \");",
      "right" : "add(\"set \");",
      "info" : "ExpressionStatement[9871-9883]:ExpressionStatement[9871-9883]"
    }, {
      "left" : "String name = n.getString();",
      "right" : "String name = n.getString();",
      "info" : "VariableDeclarationStatement[9950-9978]:VariableDeclarationStatement[9950-9978]"
    }, {
      "left" : "Node fn = first;",
      "right" : "Node fn = first;",
      "info" : "VariableDeclarationStatement[9987-10003]:VariableDeclarationStatement[9987-10003]"
    }, {
      "left" : "Node parameters = fn.getChildAtIndex(1);",
      "right" : "Node parameters = fn.getChildAtIndex(1);",
      "info" : "VariableDeclarationStatement[10012-10052]:VariableDeclarationStatement[10012-10052]"
    }, {
      "left" : "Node body = fn.getLastChild();",
      "right" : "Node body = fn.getLastChild();",
      "info" : "VariableDeclarationStatement[10061-10091]:VariableDeclarationStatement[10061-10091]"
    }, {
      "left" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name))",
      "right" : "if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n            // do not encode literally any non-literal characters that were\n            // unicode escaped.\n            NodeUtil.isLatin(name))",
      "info" : "IfStatement[10135-10638]:IfStatement[10135-10638]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10354-10386]:Block[10354-10386]"
    }, {
      "left" : "add(name);",
      "right" : "add(name);",
      "info" : "ExpressionStatement[10366-10376]:ExpressionStatement[10366-10376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10392-10638]:Block[10392-10638]"
    }, {
      "left" : "double d = getSimpleNumber(name);",
      "right" : "double d = getSimpleNumber(name);",
      "info" : "VariableDeclarationStatement[10461-10494]:VariableDeclarationStatement[10461-10494]"
    }, {
      "left" : "if (!Double.isNaN(d))",
      "right" : "if (!Double.isNaN(d))",
      "info" : "IfStatement[10505-10628]:IfStatement[10505-10628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10527-10569]:Block[10527-10569]"
    }, {
      "left" : "cc.addNumber(d);",
      "right" : "cc.addNumber(d);",
      "info" : "ExpressionStatement[10541-10557]:ExpressionStatement[10541-10557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10575-10628]:Block[10575-10628]"
    }, {
      "left" : "addJsString(n.getString());",
      "right" : "addJsString(n.getString());",
      "info" : "ExpressionStatement[10589-10616]:ExpressionStatement[10589-10616]"
    }, {
      "left" : "add(parameters);",
      "right" : "add(parameters);",
      "info" : "ExpressionStatement[10648-10664]:ExpressionStatement[10648-10664]"
    }, {
      "left" : "add(body, Context.PRESERVE_BLOCK);",
      "right" : "add(body, Context.PRESERVE_BLOCK);",
      "info" : "ExpressionStatement[10673-10707]:ExpressionStatement[10673-10707]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10716-10722]:BreakStatement[10716-10722]"
    }, {
      "left" : "case Token.SCRIPT:",
      "right" : "case Token.SCRIPT:",
      "info" : "SwitchCase[10730-10748]:SwitchCase[10730-10748]"
    }, {
      "left" : "case Token.BLOCK:",
      "right" : "case Token.BLOCK:",
      "info" : "SwitchCase[10755-10772]:SwitchCase[10755-10772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10773-11972]:Block[10773-11972]"
    }, {
      "left" : "if (n.getClass() != Node.class)",
      "right" : "if (n.getClass() != Node.class)",
      "info" : "IfStatement[10783-10882]:IfStatement[10783-10882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10815-10882]:Block[10815-10882]"
    }, {
      "left" : "throw new Error(\"Unexpected Node subclass.\");",
      "right" : "throw new Error(\"Unexpected Node subclass.\");",
      "info" : "ThrowStatement[10827-10872]:ThrowStatement[10827-10872]"
    }, {
      "left" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "right" : "boolean preserveBlock = context == Context.PRESERVE_BLOCK;",
      "info" : "VariableDeclarationStatement[10891-10949]:VariableDeclarationStatement[10891-10949]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[10958-11015]:IfStatement[10958-11015]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10977-11015]:Block[10977-11015]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[10989-11005]:ExpressionStatement[10989-11005]"
    }, {
      "left" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);",
      "right" : "boolean preferLineBreaks =\n            type == Token.SCRIPT ||\n            (type == Token.BLOCK &&\n                !preserveBlock &&\n                n.getParent() != null &&\n                n.getParent().getType() == Token.SCRIPT);",
      "info" : "VariableDeclarationStatement[11025-11256]:VariableDeclarationStatement[11025-11256]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[11265-11831]:ForStatement[11265-11831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11314-11831]:Block[11314-11831]"
    }, {
      "left" : "add(c, Context.STATEMENT);",
      "right" : "add(c, Context.STATEMENT);",
      "info" : "ExpressionStatement[11326-11352]:ExpressionStatement[11326-11352]"
    }, {
      "left" : "if (c.getType() == Token.VAR)",
      "right" : "if (c.getType() == Token.VAR)",
      "info" : "IfStatement[11435-11509]:IfStatement[11435-11509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11465-11509]:Block[11465-11509]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[11479-11497]:ExpressionStatement[11479-11497]"
    }, {
      "left" : "if (c.getType() == Token.FUNCTION)",
      "right" : "if (c.getType() == Token.FUNCTION)",
      "info" : "IfStatement[11521-11602]:IfStatement[11521-11602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11556-11602]:Block[11556-11602]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[11570-11590]:ExpressionStatement[11570-11590]"
    }, {
      "left" : "if (preferLineBreaks)",
      "right" : "if (preferLineBreaks)",
      "info" : "IfStatement[11745-11821]:IfStatement[11745-11821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11767-11821]:Block[11767-11821]"
    }, {
      "left" : "cc.notePreferredLineBreak();",
      "right" : "cc.notePreferredLineBreak();",
      "info" : "ExpressionStatement[11781-11809]:ExpressionStatement[11781-11809]"
    }, {
      "left" : "if (preserveBlock)",
      "right" : "if (preserveBlock)",
      "info" : "IfStatement[11840-11949]:IfStatement[11840-11949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11859-11949]:Block[11859-11949]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[11871-11939]:ExpressionStatement[11871-11939]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11958-11964]:BreakStatement[11958-11964]"
    }, {
      "left" : "case Token.FOR:",
      "right" : "case Token.FOR:",
      "info" : "SwitchCase[11980-11995]:SwitchCase[11980-11995]"
    }, {
      "left" : "if (childCount == 4)",
      "right" : "if (childCount == 4)",
      "info" : "IfStatement[12004-12773]:IfStatement[12004-12773]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12025-12483]:Block[12025-12483]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[12037-12049]:ExpressionStatement[12037-12049]"
    }, {
      "left" : "if (first.getType() == Token.VAR)",
      "right" : "if (first.getType() == Token.VAR)",
      "info" : "IfStatement[12060-12237]:IfStatement[12060-12237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12094-12159]:Block[12094-12159]"
    }, {
      "left" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "add(first, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[12108-12147]:ExpressionStatement[12108-12147]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12165-12237]:Block[12165-12237]"
    }, {
      "left" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "right" : "addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);",
      "info" : "ExpressionStatement[12179-12225]:ExpressionStatement[12179-12225]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12248-12257]:ExpressionStatement[12248-12257]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12268-12289]:ExpressionStatement[12268-12289]"
    }, {
      "left" : "add(\";\");",
      "right" : "add(\";\");",
      "info" : "ExpressionStatement[12300-12309]:ExpressionStatement[12300-12309]"
    }, {
      "left" : "add(first.getNext().getNext());",
      "right" : "add(first.getNext().getNext());",
      "info" : "ExpressionStatement[12320-12351]:ExpressionStatement[12320-12351]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12362-12371]:ExpressionStatement[12362-12371]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12382-12473]:ExpressionStatement[12382-12473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12489-12773]:Block[12489-12773]"
    }, {
      "left" : "Preconditions.checkState(childCount == 3);",
      "right" : "Preconditions.checkState(childCount == 3);",
      "info" : "ExpressionStatement[12501-12543]:ExpressionStatement[12501-12543]"
    }, {
      "left" : "add(\"for(\");",
      "right" : "add(\"for(\");",
      "info" : "ExpressionStatement[12554-12566]:ExpressionStatement[12554-12566]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[12577-12588]:ExpressionStatement[12577-12588]"
    }, {
      "left" : "add(\"in\");",
      "right" : "add(\"in\");",
      "info" : "ExpressionStatement[12599-12609]:ExpressionStatement[12599-12609]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[12620-12641]:ExpressionStatement[12620-12641]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12652-12661]:ExpressionStatement[12652-12661]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[12672-12763]:ExpressionStatement[12672-12763]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12782-12788]:BreakStatement[12782-12788]"
    }, {
      "left" : "case Token.DO:",
      "right" : "case Token.DO:",
      "info" : "SwitchCase[12796-12810]:SwitchCase[12796-12810]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[12819-12861]:ExpressionStatement[12819-12861]"
    }, {
      "left" : "add(\"do\");",
      "right" : "add(\"do\");",
      "info" : "ExpressionStatement[12870-12880]:ExpressionStatement[12870-12880]"
    }, {
      "left" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first, Context.OTHER, false);",
      "info" : "ExpressionStatement[12889-12939]:ExpressionStatement[12889-12939]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[12948-12962]:ExpressionStatement[12948-12962]"
    }, {
      "left" : "add(last);",
      "right" : "add(last);",
      "info" : "ExpressionStatement[12971-12981]:ExpressionStatement[12971-12981]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[12990-12999]:ExpressionStatement[12990-12999]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[13008-13026]:ExpressionStatement[13008-13026]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13035-13041]:BreakStatement[13035-13041]"
    }, {
      "left" : "case Token.WHILE:",
      "right" : "case Token.WHILE:",
      "info" : "SwitchCase[13049-13066]:SwitchCase[13049-13066]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[13075-13117]:ExpressionStatement[13075-13117]"
    }, {
      "left" : "add(\"while(\");",
      "right" : "add(\"while(\");",
      "info" : "ExpressionStatement[13126-13140]:ExpressionStatement[13126-13140]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[13149-13160]:ExpressionStatement[13149-13160]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13169-13178]:ExpressionStatement[13169-13178]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[13187-13276]:ExpressionStatement[13187-13276]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13285-13291]:BreakStatement[13285-13291]"
    }, {
      "left" : "case Token.EMPTY:",
      "right" : "case Token.EMPTY:",
      "info" : "SwitchCase[13299-13316]:SwitchCase[13299-13316]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[13325-13367]:ExpressionStatement[13325-13367]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13376-13382]:BreakStatement[13376-13382]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[13390-13409]:SwitchCase[13390-13409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13410-14000]:Block[13410-14000]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETPROP: expected 2 children, but got %s\", childCount);",
      "info" : "ExpressionStatement[13420-13547]:ExpressionStatement[13420-13547]"
    }, {
      "left" : "Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");",
      "right" : "Preconditions.checkState(\n            last.getType() == Token.STRING,\n            \"Bad GETPROP: RHS should be STRING\");",
      "info" : "ExpressionStatement[13556-13675]:ExpressionStatement[13556-13675]"
    }, {
      "left" : "boolean needsParens = (first.getType() == Token.NUMBER);",
      "right" : "boolean needsParens = (first.getType() == Token.NUMBER);",
      "info" : "VariableDeclarationStatement[13684-13740]:VariableDeclarationStatement[13684-13740]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[13749-13797]:IfStatement[13749-13797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13766-13797]:Block[13766-13797]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[13778-13787]:ExpressionStatement[13778-13787]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[13806-13861]:ExpressionStatement[13806-13861]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[13870-13918]:IfStatement[13870-13918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13887-13918]:Block[13887-13918]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[13899-13908]:ExpressionStatement[13899-13908]"
    }, {
      "left" : "add(\".\");",
      "right" : "add(\".\");",
      "info" : "ExpressionStatement[13927-13936]:ExpressionStatement[13927-13936]"
    }, {
      "left" : "addIdentifier(last.getString());",
      "right" : "addIdentifier(last.getString());",
      "info" : "ExpressionStatement[13945-13977]:ExpressionStatement[13945-13977]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13986-13992]:BreakStatement[13986-13992]"
    }, {
      "left" : "case Token.GETELEM:",
      "right" : "case Token.GETELEM:",
      "info" : "SwitchCase[14008-14027]:SwitchCase[14008-14027]"
    }, {
      "left" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "right" : "Preconditions.checkState(\n            childCount == 2,\n            \"Bad GETELEM: expected 2 children but got %s\", childCount);",
      "info" : "ExpressionStatement[14036-14162]:ExpressionStatement[14036-14162]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[14171-14226]:ExpressionStatement[14171-14226]"
    }, {
      "left" : "add(\"[\");",
      "right" : "add(\"[\");",
      "info" : "ExpressionStatement[14235-14244]:ExpressionStatement[14235-14244]"
    }, {
      "left" : "add(first.getNext());",
      "right" : "add(first.getNext());",
      "info" : "ExpressionStatement[14253-14274]:ExpressionStatement[14253-14274]"
    }, {
      "left" : "add(\"]\");",
      "right" : "add(\"]\");",
      "info" : "ExpressionStatement[14283-14292]:ExpressionStatement[14283-14292]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14301-14307]:BreakStatement[14301-14307]"
    }, {
      "left" : "case Token.WITH:",
      "right" : "case Token.WITH:",
      "info" : "SwitchCase[14315-14331]:SwitchCase[14315-14331]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[14340-14382]:ExpressionStatement[14340-14382]"
    }, {
      "left" : "add(\"with(\");",
      "right" : "add(\"with(\");",
      "info" : "ExpressionStatement[14391-14404]:ExpressionStatement[14391-14404]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[14413-14424]:ExpressionStatement[14413-14424]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[14433-14442]:ExpressionStatement[14433-14442]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[14451-14540]:ExpressionStatement[14451-14540]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14549-14555]:BreakStatement[14549-14555]"
    }, {
      "left" : "case Token.INC:",
      "right" : "case Token.INC:",
      "info" : "SwitchCase[14563-14578]:SwitchCase[14563-14578]"
    }, {
      "left" : "case Token.DEC:",
      "right" : "case Token.DEC:",
      "info" : "SwitchCase[14585-14600]:SwitchCase[14585-14600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14601-15098]:Block[14601-15098]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[14611-14653]:ExpressionStatement[14611-14653]"
    }, {
      "left" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "right" : "String o = type == Token.INC ? \"++\" : \"--\";",
      "info" : "VariableDeclarationStatement[14662-14705]:VariableDeclarationStatement[14662-14705]"
    }, {
      "left" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "right" : "int postProp = n.getIntProp(Node.INCRDECR_PROP);",
      "info" : "VariableDeclarationStatement[14714-14762]:VariableDeclarationStatement[14714-14762]"
    }, {
      "left" : "if (postProp != 0)",
      "right" : "if (postProp != 0)",
      "info" : "IfStatement[14880-15075]:IfStatement[14880-15075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14899-15006]:Block[14899-15006]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[14911-14966]:ExpressionStatement[14911-14966]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[14977-14996]:ExpressionStatement[14977-14996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15012-15075]:Block[15012-15075]"
    }, {
      "left" : "cc.addOp(o, false);",
      "right" : "cc.addOp(o, false);",
      "info" : "ExpressionStatement[15024-15043]:ExpressionStatement[15024-15043]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[15054-15065]:ExpressionStatement[15054-15065]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15084-15090]:BreakStatement[15084-15090]"
    }, {
      "left" : "case Token.CALL:",
      "right" : "case Token.CALL:",
      "info" : "SwitchCase[15106-15122]:SwitchCase[15106-15122]"
    }, {
      "left" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "right" : "if (isIndirectEval(first)\n            || n.getBooleanProp(Node.FREE_CALL) && NodeUtil.isGet(first))",
      "info" : "IfStatement[15707-16003]:IfStatement[15707-16003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15807-15920]:Block[15807-15920]"
    }, {
      "left" : "add(\"(0,\");",
      "right" : "add(\"(0,\");",
      "info" : "ExpressionStatement[15819-15830]:ExpressionStatement[15819-15830]"
    }, {
      "left" : "addExpr(first, NodeUtil.precedence(Token.COMMA));",
      "right" : "addExpr(first, NodeUtil.precedence(Token.COMMA));",
      "info" : "ExpressionStatement[15841-15890]:ExpressionStatement[15841-15890]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[15901-15910]:ExpressionStatement[15901-15910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15926-16003]:Block[15926-16003]"
    }, {
      "left" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "right" : "addLeftExpr(first, NodeUtil.precedence(type), context);",
      "info" : "ExpressionStatement[15938-15993]:ExpressionStatement[15938-15993]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[16012-16021]:ExpressionStatement[16012-16021]"
    }, {
      "left" : "addList(first.getNext());",
      "right" : "addList(first.getNext());",
      "info" : "ExpressionStatement[16030-16055]:ExpressionStatement[16030-16055]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16064-16073]:ExpressionStatement[16064-16073]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16082-16088]:BreakStatement[16082-16088]"
    }, {
      "left" : "case Token.IF:",
      "right" : "case Token.IF:",
      "info" : "SwitchCase[16096-16110]:SwitchCase[16096-16110]"
    }, {
      "left" : "boolean hasElse = childCount == 3;",
      "right" : "boolean hasElse = childCount == 3;",
      "info" : "VariableDeclarationStatement[16119-16153]:VariableDeclarationStatement[16119-16153]"
    }, {
      "left" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "right" : "boolean ambiguousElseClause =\n            context == Context.BEFORE_DANGLING_ELSE && !hasElse;",
      "info" : "VariableDeclarationStatement[16162-16256]:VariableDeclarationStatement[16162-16256]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[16265-16328]:IfStatement[16265-16328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16290-16328]:Block[16290-16328]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[16302-16318]:ExpressionStatement[16302-16318]"
    }, {
      "left" : "add(\"if(\");",
      "right" : "add(\"if(\");",
      "info" : "ExpressionStatement[16338-16349]:ExpressionStatement[16338-16349]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[16358-16369]:ExpressionStatement[16358-16369]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[16378-16387]:ExpressionStatement[16378-16387]"
    }, {
      "left" : "if (hasElse)",
      "right" : "if (hasElse)",
      "info" : "IfStatement[16397-16788]:IfStatement[16397-16788]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16410-16647]:Block[16410-16647]"
    }, {
      "left" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "right" : "addNonEmptyStatement(\n              first.getNext(), Context.BEFORE_DANGLING_ELSE, false);",
      "info" : "ExpressionStatement[16422-16512]:ExpressionStatement[16422-16512]"
    }, {
      "left" : "add(\"else\");",
      "right" : "add(\"else\");",
      "info" : "ExpressionStatement[16523-16535]:ExpressionStatement[16523-16535]"
    }, {
      "left" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "right" : "addNonEmptyStatement(\n              last, getContextForNonEmptyExpression(context), false);",
      "info" : "ExpressionStatement[16546-16637]:ExpressionStatement[16546-16637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16653-16788]:Block[16653-16788]"
    }, {
      "left" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "right" : "addNonEmptyStatement(first.getNext(), Context.OTHER, false);",
      "info" : "ExpressionStatement[16665-16725]:ExpressionStatement[16665-16725]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[16736-16778]:ExpressionStatement[16736-16778]"
    }, {
      "left" : "if (ambiguousElseClause)",
      "right" : "if (ambiguousElseClause)",
      "info" : "IfStatement[16798-16859]:IfStatement[16798-16859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16823-16859]:Block[16823-16859]"
    }, {
      "left" : "cc.endBlock();",
      "right" : "cc.endBlock();",
      "info" : "ExpressionStatement[16835-16849]:ExpressionStatement[16835-16849]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16868-16874]:BreakStatement[16868-16874]"
    }, {
      "left" : "case Token.NULL:",
      "right" : "case Token.NULL:",
      "info" : "SwitchCase[16882-16898]:SwitchCase[16882-16898]"
    }, {
      "left" : "case Token.THIS:",
      "right" : "case Token.THIS:",
      "info" : "SwitchCase[16905-16921]:SwitchCase[16905-16921]"
    }, {
      "left" : "case Token.FALSE:",
      "right" : "case Token.FALSE:",
      "info" : "SwitchCase[16928-16945]:SwitchCase[16928-16945]"
    }, {
      "left" : "case Token.TRUE:",
      "right" : "case Token.TRUE:",
      "info" : "SwitchCase[16952-16968]:SwitchCase[16952-16968]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[16977-17019]:ExpressionStatement[16977-17019]"
    }, {
      "left" : "add(Node.tokenToName(type));",
      "right" : "add(Node.tokenToName(type));",
      "info" : "ExpressionStatement[17028-17056]:ExpressionStatement[17028-17056]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17065-17071]:BreakStatement[17065-17071]"
    }, {
      "left" : "case Token.CONTINUE:",
      "right" : "case Token.CONTINUE:",
      "info" : "SwitchCase[17079-17099]:SwitchCase[17079-17099]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[17108-17150]:ExpressionStatement[17108-17150]"
    }, {
      "left" : "add(\"continue\");",
      "right" : "add(\"continue\");",
      "info" : "ExpressionStatement[17159-17175]:ExpressionStatement[17159-17175]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[17184-17400]:IfStatement[17184-17400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17205-17400]:Block[17205-17400]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[17217-17348]:IfStatement[17217-17348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17258-17348]:Block[17258-17348]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[17272-17336]:ThrowStatement[17272-17336]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[17359-17368]:ExpressionStatement[17359-17368]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17379-17390]:ExpressionStatement[17379-17390]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17409-17427]:ExpressionStatement[17409-17427]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17436-17442]:BreakStatement[17436-17442]"
    }, {
      "left" : "case Token.DEBUGGER:",
      "right" : "case Token.DEBUGGER:",
      "info" : "SwitchCase[17450-17470]:SwitchCase[17450-17470]"
    }, {
      "left" : "Preconditions.checkState(childCount == 0);",
      "right" : "Preconditions.checkState(childCount == 0);",
      "info" : "ExpressionStatement[17479-17521]:ExpressionStatement[17479-17521]"
    }, {
      "left" : "add(\"debugger\");",
      "right" : "add(\"debugger\");",
      "info" : "ExpressionStatement[17530-17546]:ExpressionStatement[17530-17546]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17555-17573]:ExpressionStatement[17555-17573]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17582-17588]:BreakStatement[17582-17588]"
    }, {
      "left" : "case Token.BREAK:",
      "right" : "case Token.BREAK:",
      "info" : "SwitchCase[17596-17613]:SwitchCase[17596-17613]"
    }, {
      "left" : "Preconditions.checkState(childCount <= 1);",
      "right" : "Preconditions.checkState(childCount <= 1);",
      "info" : "ExpressionStatement[17622-17664]:ExpressionStatement[17622-17664]"
    }, {
      "left" : "add(\"break\");",
      "right" : "add(\"break\");",
      "info" : "ExpressionStatement[17673-17686]:ExpressionStatement[17673-17686]"
    }, {
      "left" : "if (childCount == 1)",
      "right" : "if (childCount == 1)",
      "info" : "IfStatement[17695-17911]:IfStatement[17695-17911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17716-17911]:Block[17716-17911]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[17728-17859]:IfStatement[17728-17859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17769-17859]:Block[17769-17859]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[17783-17847]:ThrowStatement[17783-17847]"
    }, {
      "left" : "add(\" \");",
      "right" : "add(\" \");",
      "info" : "ExpressionStatement[17870-17879]:ExpressionStatement[17870-17879]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[17890-17901]:ExpressionStatement[17890-17901]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[17920-17938]:ExpressionStatement[17920-17938]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[17947-17953]:BreakStatement[17947-17953]"
    }, {
      "left" : "case Token.EXPR_VOID:",
      "right" : "case Token.EXPR_VOID:",
      "info" : "SwitchCase[17961-17982]:SwitchCase[17961-17982]"
    }, {
      "left" : "throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");",
      "right" : "throw new Error(\"Unexpected EXPR_VOID. Should be EXPR_RESULT.\");",
      "info" : "ThrowStatement[17991-18055]:ThrowStatement[17991-18055]"
    }, {
      "left" : "case Token.EXPR_RESULT:",
      "right" : "case Token.EXPR_RESULT:",
      "info" : "SwitchCase[18063-18086]:SwitchCase[18063-18086]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[18095-18137]:ExpressionStatement[18095-18137]"
    }, {
      "left" : "add(first, Context.START_OF_EXPR);",
      "right" : "add(first, Context.START_OF_EXPR);",
      "info" : "ExpressionStatement[18146-18180]:ExpressionStatement[18146-18180]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[18189-18207]:ExpressionStatement[18189-18207]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18216-18222]:BreakStatement[18216-18222]"
    }, {
      "left" : "case Token.NEW:",
      "right" : "case Token.NEW:",
      "info" : "SwitchCase[18230-18245]:SwitchCase[18230-18245]"
    }, {
      "left" : "add(\"new \");",
      "right" : "add(\"new \");",
      "info" : "ExpressionStatement[18254-18266]:ExpressionStatement[18254-18266]"
    }, {
      "left" : "int precedence = NodeUtil.precedence(type);",
      "right" : "int precedence = NodeUtil.precedence(type);",
      "info" : "VariableDeclarationStatement[18275-18318]:VariableDeclarationStatement[18275-18318]"
    }, {
      "left" : "if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction()))",
      "right" : "if (NodeUtil.containsType(first, Token.CALL, new MatchNotFunction()))",
      "info" : "IfStatement[18551-18697]:IfStatement[18551-18697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18621-18697]:Block[18621-18697]"
    }, {
      "left" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "right" : "precedence = NodeUtil.precedence(first.getType()) + 1;",
      "info" : "ExpressionStatement[18633-18687]:ExpressionStatement[18633-18687]"
    }, {
      "left" : "addExpr(first, precedence);",
      "right" : "addExpr(first, precedence);",
      "info" : "ExpressionStatement[18706-18733]:ExpressionStatement[18706-18733]"
    }, {
      "left" : "Node next = first.getNext();",
      "right" : "Node next = first.getNext();",
      "info" : "VariableDeclarationStatement[18801-18829]:VariableDeclarationStatement[18801-18829]"
    }, {
      "left" : "if (next != null)",
      "right" : "if (next != null)",
      "info" : "IfStatement[18838-18932]:IfStatement[18838-18932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18856-18932]:Block[18856-18932]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[18868-18877]:ExpressionStatement[18868-18877]"
    }, {
      "left" : "addList(next);",
      "right" : "addList(next);",
      "info" : "ExpressionStatement[18888-18902]:ExpressionStatement[18888-18902]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[18913-18922]:ExpressionStatement[18913-18922]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[18941-18947]:BreakStatement[18941-18947]"
    }, {
      "left" : "case Token.STRING:",
      "right" : "case Token.STRING:",
      "info" : "SwitchCase[18955-18973]:SwitchCase[18955-18973]"
    }, {
      "left" : "if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0))",
      "right" : "if (childCount !=\n            ((n.getParent() != null &&\n              n.getParent().getType() == Token.OBJECTLIT) ? 1 : 0))",
      "info" : "IfStatement[18982-19239]:IfStatement[18982-19239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19107-19239]:Block[19107-19239]"
    }, {
      "left" : "throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\n              \"Unexpected String children: \" + n.getParent().toStringTree());",
      "info" : "ThrowStatement[19119-19229]:ThrowStatement[19119-19229]"
    }, {
      "left" : "addJsString(n.getString());",
      "right" : "addJsString(n.getString());",
      "info" : "ExpressionStatement[19248-19275]:ExpressionStatement[19248-19275]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19284-19290]:BreakStatement[19284-19290]"
    }, {
      "left" : "case Token.DELPROP:",
      "right" : "case Token.DELPROP:",
      "info" : "SwitchCase[19298-19317]:SwitchCase[19298-19317]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[19326-19368]:ExpressionStatement[19326-19368]"
    }, {
      "left" : "add(\"delete \");",
      "right" : "add(\"delete \");",
      "info" : "ExpressionStatement[19377-19392]:ExpressionStatement[19377-19392]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[19401-19412]:ExpressionStatement[19401-19412]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19421-19427]:BreakStatement[19421-19427]"
    }, {
      "left" : "case Token.OBJECTLIT:",
      "right" : "case Token.OBJECTLIT:",
      "info" : "SwitchCase[19435-19456]:SwitchCase[19435-19456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19457-20854]:Block[19457-20854]"
    }, {
      "left" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "right" : "boolean needsParens = (context == Context.START_OF_EXPR);",
      "info" : "VariableDeclarationStatement[19467-19524]:VariableDeclarationStatement[19467-19524]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[19533-19581]:IfStatement[19533-19581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19550-19581]:Block[19550-19581]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[19562-19571]:ExpressionStatement[19562-19571]"
    }, {
      "left" : "add(\"{\");",
      "right" : "add(\"{\");",
      "info" : "ExpressionStatement[19590-19599]:ExpressionStatement[19590-19599]"
    }, {
      "left" : "for (Node c = first; c != null; c = c.getNext())",
      "right" : "for (Node c = first; c != null; c = c.getNext())",
      "info" : "ForStatement[19608-20756]:ForStatement[19608-20756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19657-20756]:Block[19657-20756]"
    }, {
      "left" : "if (c != first)",
      "right" : "if (c != first)",
      "info" : "IfStatement[19669-19730]:IfStatement[19669-19730]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19685-19730]:Block[19685-19730]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[19699-19718]:ExpressionStatement[19699-19718]"
    }, {
      "left" : "if (c.getType() == Token.GET || c.getType() == Token.SET)",
      "right" : "if (c.getType() == Token.GET || c.getType() == Token.SET)",
      "info" : "IfStatement[19742-20746]:IfStatement[19742-20746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19800-19833]:Block[19800-19833]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[19814-19821]:ExpressionStatement[19814-19821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19839-20746]:Block[19839-20746]"
    }, {
      "left" : "Preconditions.checkState(c.getType() == Token.STRING);",
      "right" : "Preconditions.checkState(c.getType() == Token.STRING);",
      "info" : "ExpressionStatement[19853-19907]:ExpressionStatement[19853-19907]"
    }, {
      "left" : "String key = c.getString();",
      "right" : "String key = c.getString();",
      "info" : "VariableDeclarationStatement[19920-19947]:VariableDeclarationStatement[19920-19947]"
    }, {
      "left" : "if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key))",
      "right" : "if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n                // do not encode literally any non-literal characters that\n                // were unicode escaped.\n                NodeUtil.isLatin(key))",
      "info" : "IfStatement[20080-20669]:IfStatement[20080-20669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20360-20399]:Block[20360-20399]"
    }, {
      "left" : "add(key);",
      "right" : "add(key);",
      "info" : "ExpressionStatement[20376-20385]:ExpressionStatement[20376-20385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20405-20669]:Block[20405-20669]"
    }, {
      "left" : "double d = getSimpleNumber(key);",
      "right" : "double d = getSimpleNumber(key);",
      "info" : "VariableDeclarationStatement[20482-20514]:VariableDeclarationStatement[20482-20514]"
    }, {
      "left" : "if (!Double.isNaN(d))",
      "right" : "if (!Double.isNaN(d))",
      "info" : "IfStatement[20529-20655]:IfStatement[20529-20655]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20551-20601]:Block[20551-20601]"
    }, {
      "left" : "cc.addNumber(d);",
      "right" : "cc.addNumber(d);",
      "info" : "ExpressionStatement[20569-20585]:ExpressionStatement[20569-20585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20607-20655]:Block[20607-20655]"
    }, {
      "left" : "addExpr(c, 1);",
      "right" : "addExpr(c, 1);",
      "info" : "ExpressionStatement[20625-20639]:ExpressionStatement[20625-20639]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[20682-20691]:ExpressionStatement[20682-20691]"
    }, {
      "left" : "addExpr(c.getFirstChild(), 1);",
      "right" : "addExpr(c.getFirstChild(), 1);",
      "info" : "ExpressionStatement[20704-20734]:ExpressionStatement[20704-20734]"
    }, {
      "left" : "add(\"}\");",
      "right" : "add(\"}\");",
      "info" : "ExpressionStatement[20765-20774]:ExpressionStatement[20765-20774]"
    }, {
      "left" : "if (needsParens)",
      "right" : "if (needsParens)",
      "info" : "IfStatement[20783-20831]:IfStatement[20783-20831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20800-20831]:Block[20800-20831]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[20812-20821]:ExpressionStatement[20812-20821]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[20840-20846]:BreakStatement[20840-20846]"
    }, {
      "left" : "case Token.SWITCH:",
      "right" : "case Token.SWITCH:",
      "info" : "SwitchCase[20862-20880]:SwitchCase[20862-20880]"
    }, {
      "left" : "add(\"switch(\");",
      "right" : "add(\"switch(\");",
      "info" : "ExpressionStatement[20889-20904]:ExpressionStatement[20889-20904]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[20913-20924]:ExpressionStatement[20913-20924]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[20933-20942]:ExpressionStatement[20933-20942]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[20951-20967]:ExpressionStatement[20951-20967]"
    }, {
      "left" : "addAllSiblings(first.getNext());",
      "right" : "addAllSiblings(first.getNext());",
      "info" : "ExpressionStatement[20976-21008]:ExpressionStatement[20976-21008]"
    }, {
      "left" : "cc.endBlock(context == Context.STATEMENT);",
      "right" : "cc.endBlock(context == Context.STATEMENT);",
      "info" : "ExpressionStatement[21017-21059]:ExpressionStatement[21017-21059]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21068-21074]:BreakStatement[21068-21074]"
    }, {
      "left" : "case Token.CASE:",
      "right" : "case Token.CASE:",
      "info" : "SwitchCase[21082-21098]:SwitchCase[21082-21098]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[21107-21149]:ExpressionStatement[21107-21149]"
    }, {
      "left" : "add(\"case \");",
      "right" : "add(\"case \");",
      "info" : "ExpressionStatement[21158-21171]:ExpressionStatement[21158-21171]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[21180-21191]:ExpressionStatement[21180-21191]"
    }, {
      "left" : "addCaseBody(last);",
      "right" : "addCaseBody(last);",
      "info" : "ExpressionStatement[21200-21218]:ExpressionStatement[21200-21218]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21227-21233]:BreakStatement[21227-21233]"
    }, {
      "left" : "case Token.DEFAULT:",
      "right" : "case Token.DEFAULT:",
      "info" : "SwitchCase[21241-21260]:SwitchCase[21241-21260]"
    }, {
      "left" : "Preconditions.checkState(childCount == 1);",
      "right" : "Preconditions.checkState(childCount == 1);",
      "info" : "ExpressionStatement[21269-21311]:ExpressionStatement[21269-21311]"
    }, {
      "left" : "add(\"default\");",
      "right" : "add(\"default\");",
      "info" : "ExpressionStatement[21320-21335]:ExpressionStatement[21320-21335]"
    }, {
      "left" : "addCaseBody(first);",
      "right" : "addCaseBody(first);",
      "info" : "ExpressionStatement[21344-21363]:ExpressionStatement[21344-21363]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21372-21378]:BreakStatement[21372-21378]"
    }, {
      "left" : "case Token.LABEL:",
      "right" : "case Token.LABEL:",
      "info" : "SwitchCase[21386-21403]:SwitchCase[21386-21403]"
    }, {
      "left" : "Preconditions.checkState(childCount == 2);",
      "right" : "Preconditions.checkState(childCount == 2);",
      "info" : "ExpressionStatement[21412-21454]:ExpressionStatement[21412-21454]"
    }, {
      "left" : "if (first.getType() != Token.LABEL_NAME)",
      "right" : "if (first.getType() != Token.LABEL_NAME)",
      "info" : "IfStatement[21463-21590]:IfStatement[21463-21590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21504-21590]:Block[21504-21590]"
    }, {
      "left" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "right" : "throw new Error(\"Unexpected token type. Should be LABEL_NAME.\");",
      "info" : "ThrowStatement[21516-21580]:ThrowStatement[21516-21580]"
    }, {
      "left" : "add(first);",
      "right" : "add(first);",
      "info" : "ExpressionStatement[21599-21610]:ExpressionStatement[21599-21610]"
    }, {
      "left" : "add(\":\");",
      "right" : "add(\":\");",
      "info" : "ExpressionStatement[21619-21628]:ExpressionStatement[21619-21628]"
    }, {
      "left" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "right" : "addNonEmptyStatement(\n            last, getContextForNonEmptyExpression(context), true);",
      "info" : "ExpressionStatement[21637-21725]:ExpressionStatement[21637-21725]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21734-21740]:BreakStatement[21734-21740]"
    }, {
      "left" : "case Token.SETNAME:",
      "right" : "case Token.SETNAME:",
      "info" : "SwitchCase[21863-21882]:SwitchCase[21863-21882]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[21891-21897]:BreakStatement[21891-21897]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21905-21913]:SwitchCase[21905-21913]"
    }, {
      "left" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "right" : "throw new Error(\"Unknown type \" + type + \"\\n\" + n.toStringTree());",
      "info" : "ThrowStatement[21922-21988]:ThrowStatement[21922-21988]"
    }, {
      "left" : "cc.endSourceMapping(n);",
      "right" : "cc.endSourceMapping(n);",
      "info" : "ExpressionStatement[22000-22023]:ExpressionStatement[22000-22023]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22031-22037]:Modifier[22031-22037]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22038-22045]:PrimitiveType[22038-22045]"
    }, {
      "left" : "isSimpleNumber",
      "right" : "isSimpleNumber",
      "info" : "SimpleName[22046-22060]:SimpleName[22046-22060]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[22061-22069]:SingleVariableDeclaration[22061-22069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22071-22270]:Block[22071-22270]"
    }, {
      "left" : "int len = s.length();",
      "right" : "int len = s.length();",
      "info" : "VariableDeclarationStatement[22077-22098]:VariableDeclarationStatement[22077-22098]"
    }, {
      "left" : "for (int index = 0; index < len; index++)",
      "right" : "for (int index = 0; index < len; index++)",
      "info" : "ForStatement[22103-22246]:ForStatement[22103-22246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22145-22246]:Block[22145-22246]"
    }, {
      "left" : "char c = s.charAt(index);",
      "right" : "char c = s.charAt(index);",
      "info" : "VariableDeclarationStatement[22153-22178]:VariableDeclarationStatement[22153-22178]"
    }, {
      "left" : "if (c < '0' || c > '9')",
      "right" : "if (c < '0' || c > '9')",
      "info" : "IfStatement[22185-22240]:IfStatement[22185-22240]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22209-22240]:Block[22209-22240]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22219-22232]:ReturnStatement[22219-22232]"
    }, {
      "left" : "return len > 0;",
      "right" : "return len > 0;",
      "info" : "ReturnStatement[22251-22266]:ReturnStatement[22251-22266]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[22274-22280]:Modifier[22274-22280]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[22281-22287]:PrimitiveType[22281-22287]"
    }, {
      "left" : "getSimpleNumber",
      "right" : "getSimpleNumber",
      "info" : "SimpleName[22288-22303]:SimpleName[22288-22303]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[22304-22312]:SingleVariableDeclaration[22304-22312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22314-22627]:Block[22314-22627]"
    }, {
      "left" : "if (isSimpleNumber(s))",
      "right" : "if (isSimpleNumber(s))",
      "info" : "IfStatement[22320-22600]:IfStatement[22320-22600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22343-22600]:Block[22343-22600]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[22351-22594]:TryStatement[22351-22594]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22355-22486]:Block[22355-22486]"
    }, {
      "left" : "long l = Long.parseLong(s);",
      "right" : "long l = Long.parseLong(s);",
      "info" : "VariableDeclarationStatement[22365-22392]:VariableDeclarationStatement[22365-22392]"
    }, {
      "left" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "right" : "if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER)",
      "info" : "IfStatement[22401-22478]:IfStatement[22401-22478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22447-22478]:Block[22447-22478]"
    }, {
      "left" : "return l;",
      "right" : "return l;",
      "info" : "ReturnStatement[22459-22468]:ReturnStatement[22459-22468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22519-22594]:Block[22519-22594]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[22605-22623]:ReturnStatement[22605-22623]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22694-22701]:Modifier[22694-22701]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[22702-22709]:PrimitiveType[22702-22709]"
    }, {
      "left" : "isIndirectEval",
      "right" : "isIndirectEval",
      "info" : "SimpleName[22710-22724]:SimpleName[22710-22724]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[22725-22731]:SingleVariableDeclaration[22725-22731]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22733-22855]:Block[22733-22855]"
    }, {
      "left" : "return n.getType() == Token.NAME && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "right" : "return n.getType() == Token.NAME && \"eval\".equals(n.getString()) &&\n        !n.getBooleanProp(Node.DIRECT_EVAL);",
      "info" : "ReturnStatement[22739-22851]:ReturnStatement[22739-22851]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23132-23139]:Modifier[23132-23139]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[23140-23144]:PrimitiveType[23140-23144]"
    }, {
      "left" : "addNonEmptyStatement",
      "right" : "addNonEmptyStatement",
      "info" : "SimpleName[23145-23165]:SimpleName[23145-23165]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[23173-23179]:SingleVariableDeclaration[23173-23179]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[23181-23196]:SingleVariableDeclaration[23181-23196]"
    }, {
      "left" : "boolean allowNonBlockChild",
      "right" : "boolean allowNonBlockChild",
      "info" : "SingleVariableDeclaration[23198-23224]:SingleVariableDeclaration[23198-23224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23226-25015]:Block[23226-25015]"
    }, {
      "left" : "Node nodeToProcess = n;",
      "right" : "Node nodeToProcess = n;",
      "info" : "VariableDeclarationStatement[23232-23255]:VariableDeclarationStatement[23232-23255]"
    }, {
      "left" : "if (!allowNonBlockChild && n.getType() != Token.BLOCK)",
      "right" : "if (!allowNonBlockChild && n.getType() != Token.BLOCK)",
      "info" : "IfStatement[23261-23370]:IfStatement[23261-23370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23316-23370]:Block[23316-23370]"
    }, {
      "left" : "throw new Error(\"Missing BLOCK child.\");",
      "right" : "throw new Error(\"Missing BLOCK child.\");",
      "info" : "ThrowStatement[23324-23364]:ThrowStatement[23324-23364]"
    }, {
      "left" : "if (n.getType() == Token.BLOCK)",
      "right" : "if (n.getType() == Token.BLOCK)",
      "info" : "IfStatement[23501-24642]:IfStatement[23501-24642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23533-24642]:Block[23533-24642]"
    }, {
      "left" : "int count = getNonEmptyChildCount(n, 2);",
      "right" : "int count = getNonEmptyChildCount(n, 2);",
      "info" : "VariableDeclarationStatement[23541-23581]:VariableDeclarationStatement[23541-23581]"
    }, {
      "left" : "if (count == 0)",
      "right" : "if (count == 0)",
      "info" : "IfStatement[23588-23841]:IfStatement[23588-23841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23604-23841]:Block[23604-23841]"
    }, {
      "left" : "if (cc.shouldPreserveExtraBlocks())",
      "right" : "if (cc.shouldPreserveExtraBlocks())",
      "info" : "IfStatement[23614-23817]:IfStatement[23614-23817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23650-23767]:Block[23650-23767]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[23662-23678]:ExpressionStatement[23662-23678]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[23689-23757]:ExpressionStatement[23689-23757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23773-23817]:Block[23773-23817]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[23785-23807]:ExpressionStatement[23785-23807]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[23826-23833]:ReturnStatement[23826-23833]"
    }, {
      "left" : "if (count == 1)",
      "right" : "if (count == 1)",
      "info" : "IfStatement[23849-24562]:IfStatement[23849-24562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23865-24562]:Block[23865-24562]"
    }, {
      "left" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "right" : "Node firstAndOnlyChild = getFirstNonEmptyChild(n);",
      "info" : "VariableDeclarationStatement[24033-24083]:VariableDeclarationStatement[24033-24083]"
    }, {
      "left" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "right" : "boolean alwaysWrapInBlock = cc.shouldPreserveExtraBlocks();",
      "info" : "VariableDeclarationStatement[24092-24151]:VariableDeclarationStatement[24092-24151]"
    }, {
      "left" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "right" : "if (alwaysWrapInBlock || isOneExactlyFunctionOrDo(firstAndOnlyChild))",
      "info" : "IfStatement[24160-24554]:IfStatement[24160-24554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24230-24449]:Block[24230-24449]"
    }, {
      "left" : "cc.beginBlock();",
      "right" : "cc.beginBlock();",
      "info" : "ExpressionStatement[24242-24258]:ExpressionStatement[24242-24258]"
    }, {
      "left" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "right" : "add(firstAndOnlyChild, Context.STATEMENT);",
      "info" : "ExpressionStatement[24269-24311]:ExpressionStatement[24269-24311]"
    }, {
      "left" : "cc.maybeLineBreak();",
      "right" : "cc.maybeLineBreak();",
      "info" : "ExpressionStatement[24322-24342]:ExpressionStatement[24322-24342]"
    }, {
      "left" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "right" : "cc.endBlock(cc.breakAfterBlockFor(n, context == Context.STATEMENT));",
      "info" : "ExpressionStatement[24353-24421]:ExpressionStatement[24353-24421]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[24432-24439]:ReturnStatement[24432-24439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24455-24554]:Block[24455-24554]"
    }, {
      "left" : "nodeToProcess = firstAndOnlyChild;",
      "right" : "nodeToProcess = firstAndOnlyChild;",
      "info" : "ExpressionStatement[24510-24544]:ExpressionStatement[24510-24544]"
    }, {
      "left" : "if (count > 1)",
      "right" : "if (count > 1)",
      "info" : "IfStatement[24570-24636]:IfStatement[24570-24636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24585-24636]:Block[24585-24636]"
    }, {
      "left" : "context = Context.PRESERVE_BLOCK;",
      "right" : "context = Context.PRESERVE_BLOCK;",
      "info" : "ExpressionStatement[24595-24628]:ExpressionStatement[24595-24628]"
    }, {
      "left" : "if (nodeToProcess.getType() == Token.EMPTY)",
      "right" : "if (nodeToProcess.getType() == Token.EMPTY)",
      "info" : "IfStatement[24648-25011]:IfStatement[24648-25011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24692-24728]:Block[24692-24728]"
    }, {
      "left" : "cc.endStatement(true);",
      "right" : "cc.endStatement(true);",
      "info" : "ExpressionStatement[24700-24722]:ExpressionStatement[24700-24722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24734-25011]:Block[24734-25011]"
    }, {
      "left" : "add(nodeToProcess, context);",
      "right" : "add(nodeToProcess, context);",
      "info" : "ExpressionStatement[24742-24770]:ExpressionStatement[24742-24770]"
    }, {
      "left" : "if (nodeToProcess.getType() == Token.VAR)",
      "right" : "if (nodeToProcess.getType() == Token.VAR)",
      "info" : "IfStatement[24927-25005]:IfStatement[24927-25005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24969-25005]:Block[24969-25005]"
    }, {
      "left" : "cc.endStatement();",
      "right" : "cc.endStatement();",
      "info" : "ExpressionStatement[24979-24997]:ExpressionStatement[24979-24997]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25112-25119]:Modifier[25112-25119]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25120-25127]:PrimitiveType[25120-25127]"
    }, {
      "left" : "isOneExactlyFunctionOrDo",
      "right" : "isOneExactlyFunctionOrDo",
      "info" : "SimpleName[25128-25152]:SimpleName[25128-25152]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[25153-25159]:SingleVariableDeclaration[25153-25159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25161-25934]:Block[25161-25934]"
    }, {
      "left" : "if (n.getType() == Token.LABEL)",
      "right" : "if (n.getType() == Token.LABEL)",
      "info" : "IfStatement[25167-25930]:IfStatement[25167-25930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25199-25844]:Block[25199-25844]"
    }, {
      "left" : "Node labeledStatement = n.getLastChild();",
      "right" : "Node labeledStatement = n.getLastChild();",
      "info" : "VariableDeclarationStatement[25207-25248]:VariableDeclarationStatement[25207-25248]"
    }, {
      "left" : "if (labeledStatement.getType() != Token.BLOCK)",
      "right" : "if (labeledStatement.getType() != Token.BLOCK)",
      "info" : "IfStatement[25255-25838]:IfStatement[25255-25838]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25302-25370]:Block[25302-25370]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "right" : "return isOneExactlyFunctionOrDo(labeledStatement);",
      "info" : "ReturnStatement[25312-25362]:ReturnStatement[25312-25362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25376-25838]:Block[25376-25838]"
    }, {
      "left" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "right" : "if (getNonEmptyChildCount(n, 2) == 1)",
      "info" : "IfStatement[25551-25830]:IfStatement[25551-25830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25589-25669]:Block[25589-25669]"
    }, {
      "left" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "right" : "return isOneExactlyFunctionOrDo(getFirstNonEmptyChild(n));",
      "info" : "ReturnStatement[25601-25659]:ReturnStatement[25601-25659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25675-25830]:Block[25675-25830]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25807-25820]:ReturnStatement[25807-25820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25850-25930]:Block[25850-25930]"
    }, {
      "left" : "return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);",
      "right" : "return (n.getType() == Token.FUNCTION || n.getType() == Token.DO);",
      "info" : "ReturnStatement[25858-25924]:ReturnStatement[25858-25924]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26372-26376]:PrimitiveType[26372-26376]"
    }, {
      "left" : "addLeftExpr",
      "right" : "addLeftExpr",
      "info" : "SimpleName[26377-26388]:SimpleName[26377-26388]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26389-26395]:SingleVariableDeclaration[26389-26395]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[26397-26414]:SingleVariableDeclaration[26397-26414]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[26416-26431]:SingleVariableDeclaration[26416-26431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26433-26478]:Block[26433-26478]"
    }, {
      "left" : "addExpr(n, minPrecedence, context);",
      "right" : "addExpr(n, minPrecedence, context);",
      "info" : "ExpressionStatement[26439-26474]:ExpressionStatement[26439-26474]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26482-26486]:PrimitiveType[26482-26486]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[26487-26494]:SimpleName[26487-26494]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26495-26501]:SingleVariableDeclaration[26495-26501]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[26503-26520]:SingleVariableDeclaration[26503-26520]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26522-26573]:Block[26522-26573]"
    }, {
      "left" : "addExpr(n, minPrecedence, Context.OTHER);",
      "right" : "addExpr(n, minPrecedence, Context.OTHER);",
      "info" : "ExpressionStatement[26528-26569]:ExpressionStatement[26528-26569]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26577-26584]:Modifier[26577-26584]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26585-26589]:PrimitiveType[26585-26589]"
    }, {
      "left" : "addExpr",
      "right" : "addExpr",
      "info" : "SimpleName[26590-26597]:SimpleName[26590-26597]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[26598-26604]:SingleVariableDeclaration[26598-26604]"
    }, {
      "left" : "int minPrecedence",
      "right" : "int minPrecedence",
      "info" : "SingleVariableDeclaration[26606-26623]:SingleVariableDeclaration[26606-26623]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[26625-26640]:SingleVariableDeclaration[26625-26640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26642-26924]:Block[26642-26924]"
    }, {
      "left" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN)))",
      "right" : "if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||\n        ((context == Context.IN_FOR_INIT_CLAUSE) &&\n        (n.getType() == Token.IN)))",
      "info" : "IfStatement[26648-26920]:IfStatement[26648-26920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26793-26884]:Block[26793-26884]"
    }, {
      "left" : "add(\"(\");",
      "right" : "add(\"(\");",
      "info" : "ExpressionStatement[26801-26810]:ExpressionStatement[26801-26810]"
    }, {
      "left" : "add(n, clearContextForNoInOperator(context));",
      "right" : "add(n, clearContextForNoInOperator(context));",
      "info" : "ExpressionStatement[26817-26862]:ExpressionStatement[26817-26862]"
    }, {
      "left" : "add(\")\");",
      "right" : "add(\")\");",
      "info" : "ExpressionStatement[26869-26878]:ExpressionStatement[26869-26878]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26890-26920]:Block[26890-26920]"
    }, {
      "left" : "add(n, context);",
      "right" : "add(n, context);",
      "info" : "ExpressionStatement[26898-26914]:ExpressionStatement[26898-26914]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26928-26932]:PrimitiveType[26928-26932]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[26933-26940]:SimpleName[26933-26940]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[26941-26957]:SingleVariableDeclaration[26941-26957]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26959-27011]:Block[26959-27011]"
    }, {
      "left" : "addList(firstInList, true, Context.OTHER);",
      "right" : "addList(firstInList, true, Context.OTHER);",
      "info" : "ExpressionStatement[26965-27007]:ExpressionStatement[26965-27007]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27015-27019]:PrimitiveType[27015-27019]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[27020-27027]:SimpleName[27020-27027]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27028-27044]:SingleVariableDeclaration[27028-27044]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[27046-27079]:SingleVariableDeclaration[27046-27079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27081-27154]:Block[27081-27154]"
    }, {
      "left" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "right" : "addList(firstInList, isArrayOrFunctionArgument, Context.OTHER);",
      "info" : "ExpressionStatement[27087-27150]:ExpressionStatement[27087-27150]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27158-27162]:PrimitiveType[27158-27162]"
    }, {
      "left" : "addList",
      "right" : "addList",
      "info" : "SimpleName[27163-27170]:SimpleName[27163-27170]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27171-27187]:SingleVariableDeclaration[27171-27187]"
    }, {
      "left" : "boolean isArrayOrFunctionArgument",
      "right" : "boolean isArrayOrFunctionArgument",
      "info" : "SingleVariableDeclaration[27189-27222]:SingleVariableDeclaration[27189-27222]"
    }, {
      "left" : "Context lhsContext",
      "right" : "Context lhsContext",
      "info" : "SingleVariableDeclaration[27239-27257]:SingleVariableDeclaration[27239-27257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27259-27571]:Block[27259-27571]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[27265-27567]:ForStatement[27265-27567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27320-27567]:Block[27320-27567]"
    }, {
      "left" : "boolean isFirst = n == firstInList;",
      "right" : "boolean isFirst = n == firstInList;",
      "info" : "VariableDeclarationStatement[27328-27363]:VariableDeclarationStatement[27328-27363]"
    }, {
      "left" : "if (isFirst)",
      "right" : "if (isFirst)",
      "info" : "IfStatement[27370-27561]:IfStatement[27370-27561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27383-27463]:Block[27383-27463]"
    }, {
      "left" : "addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "right" : "addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);",
      "info" : "ExpressionStatement[27393-27455]:ExpressionStatement[27393-27455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27469-27561]:Block[27469-27561]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[27479-27498]:ExpressionStatement[27479-27498]"
    }, {
      "left" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0);",
      "right" : "addExpr(n, isArrayOrFunctionArgument ? 1 : 0);",
      "info" : "ExpressionStatement[27507-27553]:ExpressionStatement[27507-27553]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[27926-27930]:PrimitiveType[27926-27930]"
    }, {
      "left" : "addArrayList",
      "right" : "addArrayList",
      "info" : "SimpleName[27931-27943]:SimpleName[27931-27943]"
    }, {
      "left" : "Node firstInList",
      "right" : "Node firstInList",
      "info" : "SingleVariableDeclaration[27944-27960]:SingleVariableDeclaration[27944-27960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27962-28261]:Block[27962-28261]"
    }, {
      "left" : "boolean lastWasEmpty = false;",
      "right" : "boolean lastWasEmpty = false;",
      "info" : "VariableDeclarationStatement[27968-27997]:VariableDeclarationStatement[27968-27997]"
    }, {
      "left" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "right" : "for (Node n = firstInList; n != null; n = n.getNext())",
      "info" : "ForStatement[28002-28200]:ForStatement[28002-28200]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28057-28200]:Block[28057-28200]"
    }, {
      "left" : "if (n != firstInList)",
      "right" : "if (n != firstInList)",
      "info" : "IfStatement[28065-28124]:IfStatement[28065-28124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28087-28124]:Block[28087-28124]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[28097-28116]:ExpressionStatement[28097-28116]"
    }, {
      "left" : "addExpr(n, 1);",
      "right" : "addExpr(n, 1);",
      "info" : "ExpressionStatement[28131-28145]:ExpressionStatement[28131-28145]"
    }, {
      "left" : "lastWasEmpty = n.getType() == Token.EMPTY;",
      "right" : "lastWasEmpty = n.getType() == Token.EMPTY;",
      "info" : "ExpressionStatement[28152-28194]:ExpressionStatement[28152-28194]"
    }, {
      "left" : "if (lastWasEmpty)",
      "right" : "if (lastWasEmpty)",
      "info" : "IfStatement[28206-28257]:IfStatement[28206-28257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28224-28257]:Block[28224-28257]"
    }, {
      "left" : "cc.listSeparator();",
      "right" : "cc.listSeparator();",
      "info" : "ExpressionStatement[28232-28251]:ExpressionStatement[28232-28251]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28265-28269]:PrimitiveType[28265-28269]"
    }, {
      "left" : "addCaseBody",
      "right" : "addCaseBody",
      "info" : "SimpleName[28270-28281]:SimpleName[28270-28281]"
    }, {
      "left" : "Node caseBody",
      "right" : "Node caseBody",
      "info" : "SingleVariableDeclaration[28282-28295]:SingleVariableDeclaration[28282-28295]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28297-28367]:Block[28297-28367]"
    }, {
      "left" : "cc.beginCaseBody();",
      "right" : "cc.beginCaseBody();",
      "info" : "ExpressionStatement[28303-28322]:ExpressionStatement[28303-28322]"
    }, {
      "left" : "add(caseBody);",
      "right" : "add(caseBody);",
      "info" : "ExpressionStatement[28327-28341]:ExpressionStatement[28327-28341]"
    }, {
      "left" : "cc.endCaseBody();",
      "right" : "cc.endCaseBody();",
      "info" : "ExpressionStatement[28346-28363]:ExpressionStatement[28346-28363]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28371-28375]:PrimitiveType[28371-28375]"
    }, {
      "left" : "addAllSiblings",
      "right" : "addAllSiblings",
      "info" : "SimpleName[28376-28390]:SimpleName[28376-28390]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[28391-28397]:SingleVariableDeclaration[28391-28397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28399-28475]:Block[28399-28475]"
    }, {
      "left" : "for (Node c = n; c != null; c = c.getNext())",
      "right" : "for (Node c = n; c != null; c = c.getNext())",
      "info" : "ForStatement[28405-28471]:ForStatement[28405-28471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28450-28471]:Block[28450-28471]"
    }, {
      "left" : "add(c);",
      "right" : "add(c);",
      "info" : "ExpressionStatement[28458-28465]:ExpressionStatement[28458-28465]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[28559-28563]:PrimitiveType[28559-28563]"
    }, {
      "left" : "addJsString",
      "right" : "addJsString",
      "info" : "SimpleName[28564-28575]:SimpleName[28564-28575]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[28576-28584]:SingleVariableDeclaration[28576-28584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28586-28756]:Block[28586-28756]"
    }, {
      "left" : "String cached = ESCAPED_JS_STRINGS.get(s);",
      "right" : "String cached = ESCAPED_JS_STRINGS.get(s);",
      "info" : "VariableDeclarationStatement[28592-28634]:VariableDeclarationStatement[28592-28634]"
    }, {
      "left" : "if (cached == null)",
      "right" : "if (cached == null)",
      "info" : "IfStatement[28639-28735]:IfStatement[28639-28735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28659-28735]:Block[28659-28735]"
    }, {
      "left" : "cached = jsString(s);",
      "right" : "cached = jsString(s);",
      "info" : "ExpressionStatement[28667-28688]:ExpressionStatement[28667-28688]"
    }, {
      "left" : "ESCAPED_JS_STRINGS.put(s, cached);",
      "right" : "ESCAPED_JS_STRINGS.put(s, cached);",
      "info" : "ExpressionStatement[28695-28729]:ExpressionStatement[28695-28729]"
    }, {
      "left" : "add(cached);",
      "right" : "add(cached);",
      "info" : "ExpressionStatement[28740-28752]:ExpressionStatement[28740-28752]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[28760-28766]:SimpleType[28760-28766]"
    }, {
      "left" : "jsString",
      "right" : "jsString",
      "info" : "SimpleName[28767-28775]:SimpleName[28767-28775]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[28776-28784]:SingleVariableDeclaration[28776-28784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28786-29505]:Block[28786-29505]"
    }, {
      "left" : "int singleq = 0, doubleq = 0;",
      "right" : "int singleq = 0, doubleq = 0;",
      "info" : "VariableDeclarationStatement[28792-28821]:VariableDeclarationStatement[28792-28821]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[28894-29048]:ForStatement[28894-29048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28931-29048]:Block[28931-29048]"
    }, {
      "left" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "right" : "switch (s.charAt(i)) {\n        case '\"': doubleq++; break;\n        case '\\'': singleq++; break;\n      }",
      "info" : "SwitchStatement[28939-29042]:SwitchStatement[28939-29042]"
    }, {
      "left" : "case '\"':",
      "right" : "case '\"':",
      "info" : "SwitchCase[28970-28979]:SwitchCase[28970-28979]"
    }, {
      "left" : "doubleq++;",
      "right" : "doubleq++;",
      "info" : "ExpressionStatement[28980-28990]:ExpressionStatement[28980-28990]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[28991-28997]:BreakStatement[28991-28997]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[29006-29016]:SwitchCase[29006-29016]"
    }, {
      "left" : "singleq++;",
      "right" : "singleq++;",
      "info" : "ExpressionStatement[29017-29027]:ExpressionStatement[29017-29027]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[29028-29034]:BreakStatement[29028-29034]"
    }, {
      "left" : "String doublequote, singlequote;",
      "right" : "String doublequote, singlequote;",
      "info" : "VariableDeclarationStatement[29054-29086]:VariableDeclarationStatement[29054-29086]"
    }, {
      "left" : "char quote;",
      "right" : "char quote;",
      "info" : "VariableDeclarationStatement[29091-29102]:VariableDeclarationStatement[29091-29102]"
    }, {
      "left" : "if (singleq < doubleq)",
      "right" : "if (singleq < doubleq)",
      "info" : "IfStatement[29107-29404]:IfStatement[29107-29404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29130-29267]:Block[29130-29267]"
    }, {
      "left" : "quote = '\\'';",
      "right" : "quote = '\\'';",
      "info" : "ExpressionStatement[29194-29207]:ExpressionStatement[29194-29207]"
    }, {
      "left" : "doublequote = \"\\\"\";",
      "right" : "doublequote = \"\\\"\";",
      "info" : "ExpressionStatement[29214-29233]:ExpressionStatement[29214-29233]"
    }, {
      "left" : "singlequote = \"\\\\\\'\";",
      "right" : "singlequote = \"\\\\\\'\";",
      "info" : "ExpressionStatement[29240-29261]:ExpressionStatement[29240-29261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29273-29404]:Block[29273-29404]"
    }, {
      "left" : "quote = '\\\"';",
      "right" : "quote = '\\\"';",
      "info" : "ExpressionStatement[29331-29344]:ExpressionStatement[29331-29344]"
    }, {
      "left" : "doublequote = \"\\\\\\\"\";",
      "right" : "doublequote = \"\\\\\\\"\";",
      "info" : "ExpressionStatement[29351-29372]:ExpressionStatement[29351-29372]"
    }, {
      "left" : "singlequote = \"\\'\";",
      "right" : "singlequote = \"\\'\";",
      "info" : "ExpressionStatement[29379-29398]:ExpressionStatement[29379-29398]"
    }, {
      "left" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);",
      "right" : "return strEscape(s, quote, doublequote, singlequote, \"\\\\\\\\\",\n        outputCharsetEncoder);",
      "info" : "ReturnStatement[29410-29501]:ReturnStatement[29410-29501]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29545-29551]:Modifier[29545-29551]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29552-29558]:SimpleType[29552-29558]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[29559-29571]:SimpleName[29559-29571]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[29572-29580]:SingleVariableDeclaration[29572-29580]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[29582-29617]:SingleVariableDeclaration[29582-29617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29619-29693]:Block[29619-29693]"
    }, {
      "left" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);",
      "right" : "return strEscape(s, '/', \"\\\"\", \"'\", \"\\\\\", outputCharsetEncoder);",
      "info" : "ReturnStatement[29625-29689]:ReturnStatement[29625-29689]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29785-29791]:Modifier[29785-29791]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[29792-29798]:SimpleType[29792-29798]"
    }, {
      "left" : "escapeToDoubleQuotedJsString",
      "right" : "escapeToDoubleQuotedJsString",
      "info" : "SimpleName[29799-29827]:SimpleName[29799-29827]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[29828-29836]:SingleVariableDeclaration[29828-29836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29838-29902]:Block[29838-29902]"
    }, {
      "left" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);",
      "right" : "return strEscape(s, '\"',  \"\\\\\\\"\", \"\\'\", \"\\\\\\\\\", null);",
      "info" : "ReturnStatement[29844-29898]:ReturnStatement[29844-29898]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30031-30037]:Modifier[30031-30037]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30038-30044]:SimpleType[30038-30044]"
    }, {
      "left" : "regexpEscape",
      "right" : "regexpEscape",
      "info" : "SimpleName[30045-30057]:SimpleName[30045-30057]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30058-30066]:SingleVariableDeclaration[30058-30066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30068-30107]:Block[30068-30107]"
    }, {
      "left" : "return regexpEscape(s, null);",
      "right" : "return regexpEscape(s, null);",
      "info" : "ReturnStatement[30074-30103]:ReturnStatement[30074-30103]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[30185-30191]:Modifier[30185-30191]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30192-30198]:SimpleType[30192-30198]"
    }, {
      "left" : "strEscape",
      "right" : "strEscape",
      "info" : "SimpleName[30199-30208]:SimpleName[30199-30208]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[30209-30217]:SingleVariableDeclaration[30209-30217]"
    }, {
      "left" : "char quote",
      "right" : "char quote",
      "info" : "SingleVariableDeclaration[30219-30229]:SingleVariableDeclaration[30219-30229]"
    }, {
      "left" : "String doublequoteEscape",
      "right" : "String doublequoteEscape",
      "info" : "SingleVariableDeclaration[30257-30281]:SingleVariableDeclaration[30257-30281]"
    }, {
      "left" : "String singlequoteEscape",
      "right" : "String singlequoteEscape",
      "info" : "SingleVariableDeclaration[30309-30333]:SingleVariableDeclaration[30309-30333]"
    }, {
      "left" : "String backslashEscape",
      "right" : "String backslashEscape",
      "info" : "SingleVariableDeclaration[30361-30383]:SingleVariableDeclaration[30361-30383]"
    }, {
      "left" : "CharsetEncoder outputCharsetEncoder",
      "right" : "CharsetEncoder outputCharsetEncoder",
      "info" : "SingleVariableDeclaration[30411-30446]:SingleVariableDeclaration[30411-30446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30448-32975]:Block[30448-32977]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "right" : "StringBuilder sb = new StringBuilder(s.length() + 2);",
      "info" : "VariableDeclarationStatement[30454-30507]:VariableDeclarationStatement[30454-30507]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[30512-30529]:ExpressionStatement[30512-30529]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[30534-32923]:ForStatement[30534-32925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30571-32923]:Block[30571-32925]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[30579-30600]:VariableDeclarationStatement[30579-30600]"
    }, {
      "left" : "switch (c) {\n        case '\\0': sb.append(\"\\\\0\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "right" : "switch (c) {\n        case '\\0': sb.append(\"\\\\000\"); break;\n        case '\\n': sb.append(\"\\\\n\"); break;\n        case '\\r': sb.append(\"\\\\r\"); break;\n        case '\\t': sb.append(\"\\\\t\"); break;\n        case '\\\\': sb.append(backslashEscape); break;\n        case '\\\"': sb.append(doublequoteEscape); break;\n        case '\\'': sb.append(singlequoteEscape); break;\n        case '>':                       // Break --> into --\\> or ]]> into ]]\\>\n          if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']'))) {\n            sb.append(\"\\\\>\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        case '<':\n          // Break </script into <\\/script\n          final String END_SCRIPT = \"/script\";\n\n          // Break <!-- into <\\!--\n          final String START_COMMENT = \"!--\";\n\n          if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length())) {\n            sb.append(\"<\\\\\");\n          } else if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length())) {\n            sb.append(\"<\\\\\");\n          } else {\n            sb.append(c);\n          }\n          break;\n        default:\n          // If we're given an outputCharsetEncoder, then check if the\n          //  character can be represented in this character set.\n          if (outputCharsetEncoder != null) {\n            if (outputCharsetEncoder.canEncode(c)) {\n              sb.append(c);\n            } else {\n              // Unicode-escape the character.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          } else {\n            // No charsetEncoder provided - pass straight latin characters\n            // through, and escape the rest.  Doing the explicit character\n            // check is measurably faster than using the CharsetEncoder.\n            if (c > 0x1f && c < 0x7f) {\n              sb.append(c);\n            } else {\n              // Other characters can be misinterpreted by some js parsers,\n              // or perhaps mangled by proxies along the way,\n              // so we play it safe and unicode escape them.\n              appendHexJavaScriptRepresentation(sb, c);\n            }\n          }\n      }",
      "info" : "SwitchStatement[30607-32917]:SwitchStatement[30607-32919]"
    }, {
      "left" : "case '\\0':",
      "right" : "case '\\0':",
      "info" : "SwitchCase[30628-30638]:SwitchCase[30628-30638]"
    }, {
      "left" : "sb.append(\"\\\\0\");",
      "right" : "sb.append(\"\\\\000\");",
      "info" : "ExpressionStatement[30639-30656]:ExpressionStatement[30639-30658]"
    }, {
      "left" : "\"\\\\0\"",
      "right" : "\"\\\\000\"",
      "info" : "StringLiteral[30649-30654]:StringLiteral[30649-30656]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30657-30663]:BreakStatement[30659-30665]"
    }, {
      "left" : "case '\\n':",
      "right" : "case '\\n':",
      "info" : "SwitchCase[30672-30682]:SwitchCase[30674-30684]"
    }, {
      "left" : "sb.append(\"\\\\n\");",
      "right" : "sb.append(\"\\\\n\");",
      "info" : "ExpressionStatement[30683-30700]:ExpressionStatement[30685-30702]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30701-30707]:BreakStatement[30703-30709]"
    }, {
      "left" : "case '\\r':",
      "right" : "case '\\r':",
      "info" : "SwitchCase[30716-30726]:SwitchCase[30718-30728]"
    }, {
      "left" : "sb.append(\"\\\\r\");",
      "right" : "sb.append(\"\\\\r\");",
      "info" : "ExpressionStatement[30727-30744]:ExpressionStatement[30729-30746]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30745-30751]:BreakStatement[30747-30753]"
    }, {
      "left" : "case '\\t':",
      "right" : "case '\\t':",
      "info" : "SwitchCase[30760-30770]:SwitchCase[30762-30772]"
    }, {
      "left" : "sb.append(\"\\\\t\");",
      "right" : "sb.append(\"\\\\t\");",
      "info" : "ExpressionStatement[30771-30788]:ExpressionStatement[30773-30790]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30789-30795]:BreakStatement[30791-30797]"
    }, {
      "left" : "case '\\\\':",
      "right" : "case '\\\\':",
      "info" : "SwitchCase[30804-30814]:SwitchCase[30806-30816]"
    }, {
      "left" : "sb.append(backslashEscape);",
      "right" : "sb.append(backslashEscape);",
      "info" : "ExpressionStatement[30815-30842]:ExpressionStatement[30817-30844]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30843-30849]:BreakStatement[30845-30851]"
    }, {
      "left" : "case '\\\"':",
      "right" : "case '\\\"':",
      "info" : "SwitchCase[30858-30868]:SwitchCase[30860-30870]"
    }, {
      "left" : "sb.append(doublequoteEscape);",
      "right" : "sb.append(doublequoteEscape);",
      "info" : "ExpressionStatement[30869-30898]:ExpressionStatement[30871-30900]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30899-30905]:BreakStatement[30901-30907]"
    }, {
      "left" : "case '\\'':",
      "right" : "case '\\'':",
      "info" : "SwitchCase[30914-30924]:SwitchCase[30916-30926]"
    }, {
      "left" : "sb.append(singlequoteEscape);",
      "right" : "sb.append(singlequoteEscape);",
      "info" : "ExpressionStatement[30925-30954]:ExpressionStatement[30927-30956]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[30955-30961]:BreakStatement[30957-30963]"
    }, {
      "left" : "case '>':",
      "right" : "case '>':",
      "info" : "SwitchCase[30970-30979]:SwitchCase[30972-30981]"
    }, {
      "left" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "right" : "if (i >= 2 &&\n              ((s.charAt(i - 1) == '-' && s.charAt(i - 2) == '-') ||\n               (s.charAt(i - 1) == ']' && s.charAt(i - 2) == ']')))",
      "info" : "IfStatement[31052-31291]:IfStatement[31054-31293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31203-31246]:Block[31205-31248]"
    }, {
      "left" : "sb.append(\"\\\\>\");",
      "right" : "sb.append(\"\\\\>\");",
      "info" : "ExpressionStatement[31217-31234]:ExpressionStatement[31219-31236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31252-31291]:Block[31254-31293]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[31266-31279]:ExpressionStatement[31268-31281]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31302-31308]:BreakStatement[31304-31310]"
    }, {
      "left" : "case '<':",
      "right" : "case '<':",
      "info" : "SwitchCase[31317-31326]:SwitchCase[31319-31328]"
    }, {
      "left" : "final String END_SCRIPT = \"/script\";",
      "right" : "final String END_SCRIPT = \"/script\";",
      "info" : "VariableDeclarationStatement[31380-31416]:VariableDeclarationStatement[31382-31418]"
    }, {
      "left" : "final String START_COMMENT = \"!--\";",
      "right" : "final String START_COMMENT = \"!--\";",
      "info" : "VariableDeclarationStatement[31463-31498]:VariableDeclarationStatement[31465-31500]"
    }, {
      "left" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "right" : "if (s.regionMatches(true, i + 1, END_SCRIPT, 0,\n                              END_SCRIPT.length()))",
      "info" : "IfStatement[31510-31861]:IfStatement[31512-31863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31610-31653]:Block[31612-31655]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[31624-31641]:ExpressionStatement[31626-31643]"
    }, {
      "left" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "right" : "if (s.regionMatches(false, i + 1, START_COMMENT, 0,\n                                     START_COMMENT.length()))",
      "info" : "IfStatement[31659-31861]:IfStatement[31661-31863]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31773-31816]:Block[31775-31818]"
    }, {
      "left" : "sb.append(\"<\\\\\");",
      "right" : "sb.append(\"<\\\\\");",
      "info" : "ExpressionStatement[31787-31804]:ExpressionStatement[31789-31806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31822-31861]:Block[31824-31863]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[31836-31849]:ExpressionStatement[31838-31851]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31872-31878]:BreakStatement[31874-31880]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31887-31895]:SwitchCase[31889-31897]"
    }, {
      "left" : "if (outputCharsetEncoder != null)",
      "right" : "if (outputCharsetEncoder != null)",
      "info" : "IfStatement[32043-32909]:IfStatement[32045-32911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32077-32309]:Block[32079-32311]"
    }, {
      "left" : "if (outputCharsetEncoder.canEncode(c))",
      "right" : "if (outputCharsetEncoder.canEncode(c))",
      "info" : "IfStatement[32091-32297]:IfStatement[32093-32299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32130-32173]:Block[32132-32175]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32146-32159]:ExpressionStatement[32148-32161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32179-32297]:Block[32181-32299]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[32242-32283]:ExpressionStatement[32244-32285]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32315-32909]:Block[32317-32911]"
    }, {
      "left" : "if (c > 0x1f && c < 0x7f)",
      "right" : "if (c > 0x1f && c < 0x7f)",
      "info" : "IfStatement[32552-32897]:IfStatement[32554-32899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32578-32621]:Block[32580-32623]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[32594-32607]:ExpressionStatement[32596-32609]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32627-32897]:Block[32629-32899]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[32842-32883]:ExpressionStatement[32844-32885]"
    }, {
      "left" : "sb.append(quote);",
      "right" : "sb.append(quote);",
      "info" : "ExpressionStatement[32928-32945]:ExpressionStatement[32930-32947]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[32950-32971]:ReturnStatement[32952-32973]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[32979-32985]:Modifier[32981-32987]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[32986-32992]:SimpleType[32988-32994]"
    }, {
      "left" : "identifierEscape",
      "right" : "identifierEscape",
      "info" : "SimpleName[32993-33009]:SimpleName[32995-33011]"
    }, {
      "left" : "String s",
      "right" : "String s",
      "info" : "SingleVariableDeclaration[33010-33018]:SingleVariableDeclaration[33012-33020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33020-33669]:Block[33022-33671]"
    }, {
      "left" : "if (NodeUtil.isLatin(s))",
      "right" : "if (NodeUtil.isLatin(s))",
      "info" : "IfStatement[33101-33149]:IfStatement[33103-33151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33126-33149]:Block[33128-33151]"
    }, {
      "left" : "return s;",
      "right" : "return s;",
      "info" : "ReturnStatement[33134-33143]:ReturnStatement[33136-33145]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[33233-33272]:VariableDeclarationStatement[33235-33274]"
    }, {
      "left" : "for (int i = 0; i < s.length(); i++)",
      "right" : "for (int i = 0; i < s.length(); i++)",
      "info" : "ForStatement[33277-33639]:ForStatement[33279-33641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33314-33639]:Block[33316-33641]"
    }, {
      "left" : "char c = s.charAt(i);",
      "right" : "char c = s.charAt(i);",
      "info" : "VariableDeclarationStatement[33322-33343]:VariableDeclarationStatement[33324-33345]"
    }, {
      "left" : "if (c > 0x1F && c < 0x7F)",
      "right" : "if (c > 0x1F && c < 0x7F)",
      "info" : "IfStatement[33511-33633]:IfStatement[33513-33635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33537-33568]:Block[33539-33570]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[33547-33560]:ExpressionStatement[33549-33562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33574-33633]:Block[33576-33635]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(sb, c);",
      "right" : "appendHexJavaScriptRepresentation(sb, c);",
      "info" : "ExpressionStatement[33584-33625]:ExpressionStatement[33586-33627]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[33644-33665]:ReturnStatement[33646-33667]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33838-33845]:Modifier[33840-33847]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[33846-33852]:Modifier[33848-33854]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[33853-33856]:PrimitiveType[33855-33858]"
    }, {
      "left" : "getNonEmptyChildCount",
      "right" : "getNonEmptyChildCount",
      "info" : "SimpleName[33857-33878]:SimpleName[33859-33880]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[33879-33885]:SingleVariableDeclaration[33881-33887]"
    }, {
      "left" : "int maxCount",
      "right" : "int maxCount",
      "info" : "SingleVariableDeclaration[33887-33899]:SingleVariableDeclaration[33889-33901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33901-34189]:Block[33903-34191]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[33907-33917]:VariableDeclarationStatement[33909-33919]"
    }, {
      "left" : "Node c = n.getFirstChild();",
      "right" : "Node c = n.getFirstChild();",
      "info" : "VariableDeclarationStatement[33922-33949]:VariableDeclarationStatement[33924-33951]"
    }, {
      "left" : "for (; c != null && i < maxCount; c = c.getNext())",
      "right" : "for (; c != null && i < maxCount; c = c.getNext())",
      "info" : "ForStatement[33954-34171]:ForStatement[33956-34173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34005-34171]:Block[34007-34173]"
    }, {
      "left" : "if (c.getType() == Token.BLOCK)",
      "right" : "if (c.getType() == Token.BLOCK)",
      "info" : "IfStatement[34013-34165]:IfStatement[34015-34167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34045-34105]:Block[34047-34107]"
    }, {
      "left" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "right" : "i += getNonEmptyChildCount(c, maxCount-i);",
      "info" : "ExpressionStatement[34055-34097]:ExpressionStatement[34057-34099]"
    }, {
      "left" : "if (c.getType() != Token.EMPTY)",
      "right" : "if (c.getType() != Token.EMPTY)",
      "info" : "IfStatement[34111-34165]:IfStatement[34113-34167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34143-34165]:Block[34145-34167]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[34153-34157]:ExpressionStatement[34155-34159]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[34176-34185]:ReturnStatement[34178-34187]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34252-34259]:Modifier[34254-34261]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[34260-34266]:Modifier[34262-34268]"
    }, {
      "left" : "Node",
      "right" : "Node",
      "info" : "SimpleType[34267-34271]:SimpleType[34269-34273]"
    }, {
      "left" : "getFirstNonEmptyChild",
      "right" : "getFirstNonEmptyChild",
      "info" : "SimpleName[34272-34293]:SimpleName[34274-34295]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[34294-34300]:SingleVariableDeclaration[34296-34302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34302-34623]:Block[34304-34625]"
    }, {
      "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[34308-34602]:ForStatement[34310-34604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34369-34602]:Block[34371-34604]"
    }, {
      "left" : "if (c.getType() == Token.BLOCK)",
      "right" : "if (c.getType() == Token.BLOCK)",
      "info" : "IfStatement[34377-34596]:IfStatement[34379-34598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34409-34531]:Block[34411-34533]"
    }, {
      "left" : "Node result = getFirstNonEmptyChild(c);",
      "right" : "Node result = getFirstNonEmptyChild(c);",
      "info" : "VariableDeclarationStatement[34419-34458]:VariableDeclarationStatement[34421-34460]"
    }, {
      "left" : "if (result != null)",
      "right" : "if (result != null)",
      "info" : "IfStatement[34467-34523]:IfStatement[34469-34525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34487-34523]:Block[34489-34525]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[34499-34513]:ReturnStatement[34501-34515]"
    }, {
      "left" : "if (c.getType() != Token.EMPTY)",
      "right" : "if (c.getType() != Token.EMPTY)",
      "info" : "IfStatement[34537-34596]:IfStatement[34539-34598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34569-34596]:Block[34571-34598]"
    }, {
      "left" : "return c;",
      "right" : "return c;",
      "info" : "ReturnStatement[34579-34588]:ReturnStatement[34581-34590]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[34607-34619]:ReturnStatement[34609-34621]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35234-35241]:Modifier[35236-35243]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[35242-35249]:SimpleType[35244-35251]"
    }, {
      "left" : "getContextForNonEmptyExpression",
      "right" : "getContextForNonEmptyExpression",
      "info" : "SimpleName[35250-35281]:SimpleName[35252-35283]"
    }, {
      "left" : "Context currentContext",
      "right" : "Context currentContext",
      "info" : "SingleVariableDeclaration[35282-35304]:SingleVariableDeclaration[35284-35306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35306-35425]:Block[35308-35427]"
    }, {
      "left" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "right" : "return currentContext == Context.BEFORE_DANGLING_ELSE ?\n        Context.BEFORE_DANGLING_ELSE : Context.OTHER;",
      "info" : "ReturnStatement[35312-35421]:ReturnStatement[35314-35423]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[35594-35601]:Modifier[35596-35603]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[35603-35610]:SimpleType[35605-35612]"
    }, {
      "left" : "getContextForNoInOperator",
      "right" : "getContextForNoInOperator",
      "info" : "SimpleName[35611-35636]:SimpleName[35613-35638]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[35637-35652]:SingleVariableDeclaration[35639-35654]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35654-35764]:Block[35656-35766]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.IN_FOR_INIT_CLAUSE : Context.OTHER);",
      "info" : "ReturnStatement[35660-35760]:ReturnStatement[35662-35762]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36052-36059]:Modifier[36054-36061]"
    }, {
      "left" : "Context",
      "right" : "Context",
      "info" : "SimpleType[36061-36068]:SimpleType[36063-36070]"
    }, {
      "left" : "clearContextForNoInOperator",
      "right" : "clearContextForNoInOperator",
      "info" : "SimpleName[36069-36096]:SimpleName[36071-36098]"
    }, {
      "left" : "Context context",
      "right" : "Context context",
      "info" : "SingleVariableDeclaration[36097-36112]:SingleVariableDeclaration[36099-36114]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36114-36205]:Block[36116-36207]"
    }, {
      "left" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "right" : "return (context == Context.IN_FOR_INIT_CLAUSE\n        ? Context.OTHER : context);",
      "info" : "ReturnStatement[36120-36201]:ReturnStatement[36122-36203]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36283-36290]:Modifier[36285-36292]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36291-36297]:Modifier[36293-36299]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36298-36302]:PrimitiveType[36300-36304]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[36303-36336]:SimpleName[36305-36338]"
    }, {
      "left" : "StringBuilder sb",
      "right" : "StringBuilder sb",
      "info" : "SingleVariableDeclaration[36344-36360]:SingleVariableDeclaration[36346-36362]"
    }, {
      "left" : "char c",
      "right" : "char c",
      "info" : "SingleVariableDeclaration[36362-36368]:SingleVariableDeclaration[36364-36370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36370-36559]:Block[36372-36561]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[36376-36555]:TryStatement[36378-36557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36380-36435]:Block[36382-36437]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(c, sb);",
      "right" : "appendHexJavaScriptRepresentation(c, sb);",
      "info" : "ExpressionStatement[36388-36429]:ExpressionStatement[36390-36431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36459-36555]:Block[36461-36557]"
    }, {
      "left" : "throw new RuntimeException(ex);",
      "right" : "throw new RuntimeException(ex);",
      "info" : "ThrowStatement[36518-36549]:ThrowStatement[36520-36551]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[36794-36801]:Modifier[36796-36803]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[36802-36808]:Modifier[36804-36810]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[36809-36813]:PrimitiveType[36811-36815]"
    }, {
      "left" : "appendHexJavaScriptRepresentation",
      "right" : "appendHexJavaScriptRepresentation",
      "info" : "SimpleName[36814-36847]:SimpleName[36816-36849]"
    }, {
      "left" : "int codePoint",
      "right" : "int codePoint",
      "info" : "SingleVariableDeclaration[36855-36868]:SingleVariableDeclaration[36857-36870]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[36870-36884]:SingleVariableDeclaration[36872-36886]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[36899-36910]:SimpleType[36901-36912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36911-37649]:Block[36913-37651]"
    }, {
      "left" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "right" : "if (Character.isSupplementaryCodePoint(codePoint))",
      "info" : "IfStatement[36917-37421]:IfStatement[36919-37423]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36968-37421]:Block[36970-37423]"
    }, {
      "left" : "char[] surrogates = Character.toChars(codePoint);",
      "right" : "char[] surrogates = Character.toChars(codePoint);",
      "info" : "VariableDeclarationStatement[37230-37279]:VariableDeclarationStatement[37232-37281]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[0], out);",
      "info" : "ExpressionStatement[37286-37340]:ExpressionStatement[37288-37342]"
    }, {
      "left" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "right" : "appendHexJavaScriptRepresentation(surrogates[1], out);",
      "info" : "ExpressionStatement[37347-37401]:ExpressionStatement[37349-37403]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[37408-37415]:ReturnStatement[37410-37417]"
    }, {
      "left" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "right" : "out.append(\"\\\\u\")\n        .append(HEX_CHARS[(codePoint >>> 12) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 8) & 0xf])\n        .append(HEX_CHARS[(codePoint >>> 4) & 0xf])\n        .append(HEX_CHARS[codePoint & 0xf]);",
      "info" : "ExpressionStatement[37426-37645]:ExpressionStatement[37428-37647]"
    } ]
  },
  "interFileMappings" : { }
}