{
  "matchedElements" : [
 {
    "left" : "class : TypeCheck",
    "right" : "class : TypeCheck",
    "info" : "TypeDeclaration[2222-66537]:TypeDeclaration[2222-66879]"
  }, {
    "left" : "UNEXPECTED_TOKEN",
    "right" : "UNEXPECTED_TOKEN",
    "info" : "FieldDeclaration[2427-2595]:FieldDeclaration[2427-2595]"
  }, {
    "left" : "BAD_DELETE",
    "right" : "BAD_DELETE",
    "info" : "FieldDeclaration[2627-2829]:FieldDeclaration[2627-2829]"
  }, {
    "left" : "OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
    "right" : "OVERRIDING_PROTOTYPE_WITH_NON_OBJECT",
    "info" : "FieldDeclaration[2864-2978]:FieldDeclaration[2864-2978]"
  }, {
    "left" : "DETERMINISTIC_TEST",
    "right" : "DETERMINISTIC_TEST",
    "info" : "FieldDeclaration[3112-3328]:FieldDeclaration[3112-3328]"
  }, {
    "left" : "DETERMINISTIC_TEST_NO_RESULT",
    "right" : "DETERMINISTIC_TEST_NO_RESULT",
    "info" : "FieldDeclaration[3332-3579]:FieldDeclaration[3332-3579]"
  }, {
    "left" : "INEXISTENT_ENUM_ELEMENT",
    "right" : "INEXISTENT_ENUM_ELEMENT",
    "info" : "FieldDeclaration[3583-3761]:FieldDeclaration[3583-3761]"
  }, {
    "left" : "INEXISTENT_PROPERTY",
    "right" : "INEXISTENT_PROPERTY",
    "info" : "FieldDeclaration[3858-4023]:FieldDeclaration[3858-4023]"
  }, {
    "left" : "NOT_A_CONSTRUCTOR",
    "right" : "NOT_A_CONSTRUCTOR",
    "info" : "FieldDeclaration[4027-4198]:FieldDeclaration[4027-4198]"
  }, {
    "left" : "BIT_OPERATION",
    "right" : "BIT_OPERATION",
    "info" : "FieldDeclaration[4202-4371]:FieldDeclaration[4202-4371]"
  }, {
    "left" : "NOT_CALLABLE",
    "right" : "NOT_CALLABLE",
    "info" : "FieldDeclaration[4375-4529]:FieldDeclaration[4375-4529]"
  }, {
    "left" : "CONSTRUCTOR_NOT_CALLABLE",
    "right" : "CONSTRUCTOR_NOT_CALLABLE",
    "info" : "FieldDeclaration[4533-4731]:FieldDeclaration[4533-4731]"
  }, {
    "left" : "FUNCTION_MASKS_VARIABLE",
    "right" : "FUNCTION_MASKS_VARIABLE",
    "info" : "FieldDeclaration[4735-4910]:FieldDeclaration[4735-4910]"
  }, {
    "left" : "MULTIPLE_VAR_DEF",
    "right" : "MULTIPLE_VAR_DEF",
    "info" : "FieldDeclaration[4914-5087]:FieldDeclaration[4914-5087]"
  }, {
    "left" : "ENUM_DUP",
    "right" : "ENUM_DUP",
    "info" : "FieldDeclaration[5091-5209]:FieldDeclaration[5091-5209]"
  }, {
    "left" : "ENUM_NOT_CONSTANT",
    "right" : "ENUM_NOT_CONSTANT",
    "info" : "FieldDeclaration[5213-5370]:FieldDeclaration[5213-5370]"
  }, {
    "left" : "INVALID_INTERFACE_MEMBER_DECLARATION",
    "right" : "INVALID_INTERFACE_MEMBER_DECLARATION",
    "info" : "FieldDeclaration[5374-5631]:FieldDeclaration[5374-5631]"
  }, {
    "left" : "INTERFACE_FUNCTION_NOT_EMPTY",
    "right" : "INTERFACE_FUNCTION_NOT_EMPTY",
    "info" : "FieldDeclaration[5635-5834]:FieldDeclaration[5635-5834]"
  }, {
    "left" : "CONFLICTING_EXTENDED_TYPE",
    "right" : "CONFLICTING_EXTENDED_TYPE",
    "info" : "FieldDeclaration[5838-6121]:FieldDeclaration[5838-6121]"
  }, {
    "left" : "CONFLICTING_IMPLEMENTED_TYPE",
    "right" : "CONFLICTING_IMPLEMENTED_TYPE",
    "info" : "FieldDeclaration[6125-6371]:FieldDeclaration[6125-6371]"
  }, {
    "left" : "BAD_IMPLEMENTED_TYPE",
    "right" : "BAD_IMPLEMENTED_TYPE",
    "info" : "FieldDeclaration[6375-6541]:FieldDeclaration[6375-6541]"
  }, {
    "left" : "HIDDEN_SUPERCLASS_PROPERTY",
    "right" : "HIDDEN_SUPERCLASS_PROPERTY",
    "info" : "FieldDeclaration[6545-6781]:FieldDeclaration[6545-6781]"
  }, {
    "left" : "HIDDEN_INTERFACE_PROPERTY",
    "right" : "HIDDEN_INTERFACE_PROPERTY",
    "info" : "FieldDeclaration[6785-7018]:FieldDeclaration[6785-7018]"
  }, {
    "left" : "HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
    "right" : "HIDDEN_SUPERCLASS_PROPERTY_MISMATCH",
    "info" : "FieldDeclaration[7022-7344]:FieldDeclaration[7022-7344]"
  }, {
    "left" : "UNKNOWN_OVERRIDE",
    "right" : "UNKNOWN_OVERRIDE",
    "info" : "FieldDeclaration[7348-7522]:FieldDeclaration[7348-7522]"
  }, {
    "left" : "INTERFACE_METHOD_OVERRIDE",
    "right" : "INTERFACE_METHOD_OVERRIDE",
    "info" : "FieldDeclaration[7526-7730]:FieldDeclaration[7526-7730]"
  }, {
    "left" : "UNKNOWN_EXPR_TYPE",
    "right" : "UNKNOWN_EXPR_TYPE",
    "info" : "FieldDeclaration[7734-7897]:FieldDeclaration[7734-7897]"
  }, {
    "left" : "UNRESOLVED_TYPE",
    "right" : "UNRESOLVED_TYPE",
    "info" : "FieldDeclaration[7901-8053]:FieldDeclaration[7901-8053]"
  }, {
    "left" : "WRONG_ARGUMENT_COUNT",
    "right" : "WRONG_ARGUMENT_COUNT",
    "info" : "FieldDeclaration[8057-8294]:FieldDeclaration[8057-8294]"
  }, {
    "left" : "ILLEGAL_IMPLICIT_CAST",
    "right" : "ILLEGAL_IMPLICIT_CAST",
    "info" : "FieldDeclaration[8298-8517]:FieldDeclaration[8298-8517]"
  }, {
    "left" : "INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
    "right" : "INCOMPATIBLE_EXTENDED_PROPERTY_TYPE",
    "info" : "FieldDeclaration[8521-8791]:FieldDeclaration[8521-8791]"
  }, {
    "left" : "EXPECTED_THIS_TYPE",
    "right" : "EXPECTED_THIS_TYPE",
    "info" : "FieldDeclaration[8795-8967]:FieldDeclaration[8795-8967]"
  }, {
    "left" : "ALL_DIAGNOSTICS",
    "right" : "ALL_DIAGNOSTICS",
    "info" : "FieldDeclaration[8971-10131]:FieldDeclaration[8971-10131]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[10135-10175]:FieldDeclaration[10135-10175]"
  }, {
    "left" : "validator",
    "right" : "validator",
    "info" : "FieldDeclaration[10178-10216]:FieldDeclaration[10178-10216]"
  }, {
    "left" : "reverseInterpreter",
    "right" : "reverseInterpreter",
    "info" : "FieldDeclaration[10220-10280]:FieldDeclaration[10220-10280]"
  }, {
    "left" : "typeRegistry",
    "right" : "typeRegistry",
    "info" : "FieldDeclaration[10284-10326]:FieldDeclaration[10284-10326]"
  }, {
    "left" : "topScope",
    "right" : "topScope",
    "info" : "FieldDeclaration[10329-10352]:FieldDeclaration[10329-10352]"
  }, {
    "left" : "scopeCreator",
    "right" : "scopeCreator",
    "info" : "FieldDeclaration[10356-10390]:FieldDeclaration[10356-10390]"
  }, {
    "left" : "reportMissingOverride",
    "right" : "reportMissingOverride",
    "info" : "FieldDeclaration[10394-10441]:FieldDeclaration[10394-10441]"
  }, {
    "left" : "reportUnknownTypes",
    "right" : "reportUnknownTypes",
    "info" : "FieldDeclaration[10444-10488]:FieldDeclaration[10444-10488]"
  }, {
    "left" : "reportMissingProperties",
    "right" : "reportMissingProperties",
    "info" : "FieldDeclaration[10588-10635]:FieldDeclaration[10588-10635]"
  }, {
    "left" : "inferJSDocInfo",
    "right" : "inferJSDocInfo",
    "info" : "FieldDeclaration[10639-10684]:FieldDeclaration[10639-10684]"
  }, {
    "left" : "typedCount",
    "right" : "typedCount",
    "info" : "FieldDeclaration[10765-10792]:FieldDeclaration[10765-10792]"
  }, {
    "left" : "nullCount",
    "right" : "nullCount",
    "info" : "FieldDeclaration[10795-10821]:FieldDeclaration[10795-10821]"
  }, {
    "left" : "unknownCount",
    "right" : "unknownCount",
    "info" : "FieldDeclaration[10824-10853]:FieldDeclaration[10824-10853]"
  }, {
    "left" : "inExterns",
    "right" : "inExterns",
    "info" : "FieldDeclaration[10856-10882]:FieldDeclaration[10856-10882]"
  }, {
    "left" : "noTypeCheckSection",
    "right" : "noTypeCheckSection",
    "info" : "FieldDeclaration[10973-11008]:FieldDeclaration[10973-11008]"
  }, {
    "left" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , topScope , scopeCreator , reportMissingOverride , reportUnknownTypes ...)",
    "right" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , topScope , scopeCreator , reportMissingOverride , reportUnknownTypes ...)",
    "info" : "MethodDeclaration[11012-11679]:MethodDeclaration[11012-11679]"
  }, {
    "left" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , reportMissingOverride , reportUnknownTypes ...)",
    "right" : "public TypeCheck(compiler , reverseInterpreter , typeRegistry , reportMissingOverride , reportUnknownTypes ...)",
    "info" : "MethodDeclaration[11683-12014]:MethodDeclaration[11683-12014]"
  }, {
    "left" : "package TypeCheck(compiler , reverseInterpreter , typeRegistry )",
    "right" : "package TypeCheck(compiler , reverseInterpreter , typeRegistry )",
    "info" : "MethodDeclaration[12018-12259]:MethodDeclaration[12018-12259]"
  }, {
    "left" : "package reportMissingProperties(report boolean) : ",
    "right" : "package reportMissingProperties(report boolean) : ",
    "info" : "MethodDeclaration[12263-12450]:MethodDeclaration[12263-12450]"
  }, {
    "left" : "public process(externsRoot , jsRoot ) : void",
    "right" : "public process(externsRoot , jsRoot ) : void",
    "info" : "MethodDeclaration[12454-13138]:MethodDeclaration[12454-13138]"
  }, {
    "left" : "public processForTesting(externsRoot , jsRoot ) : ",
    "right" : "public processForTesting(externsRoot , jsRoot ) : ",
    "info" : "MethodDeclaration[13142-13839]:MethodDeclaration[13142-13839]"
  }, {
    "left" : "public check(node , externs boolean) : void",
    "right" : "public check(node , externs boolean) : void",
    "info" : "MethodDeclaration[13844-14193]:MethodDeclaration[13844-14193]"
  }, {
    "left" : "private checkNoTypeCheckSection(n , enterSection boolean) : void",
    "right" : "private checkNoTypeCheckSection(n , enterSection boolean) : void",
    "info" : "MethodDeclaration[14198-14735]:MethodDeclaration[14198-14735]"
  }, {
    "left" : "private report(t , n , diagnosticType , ) : void",
    "right" : "private report(t , n , diagnosticType , ) : void",
    "info" : "MethodDeclaration[14739-14934]:MethodDeclaration[14739-14934]"
  }, {
    "left" : "public shouldTraverse(t , n , parent ) : boolean",
    "right" : "public shouldTraverse(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[14938-16181]:MethodDeclaration[14938-16181]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[16185-26928]:MethodDeclaration[16185-26928]"
  }, {
    "left" : "private doPercentTypedAccounting(t , n ) : void",
    "right" : "private doPercentTypedAccounting(t , n ) : void",
    "info" : "MethodDeclaration[26932-27422]:MethodDeclaration[26932-27422]"
  }, {
    "left" : "private visitAssign(t , assign ) : void",
    "right" : "private visitAssign(t , assign ) : void",
    "info" : "MethodDeclaration[27426-31526]:MethodDeclaration[27426-31526]"
  }, {
    "left" : "private visitObjLitKey(t , key , objlit ) : void",
    "right" : "private visitObjLitKey(t , key , objlit ) : void",
    "info" : "MethodDeclaration[31530-33504]:MethodDeclaration[31530-33504]"
  }, {
    "left" : "private propertyIsImplicitCast(type , prop ) : boolean",
    "right" : "private propertyIsImplicitCast(type , prop ) : boolean",
    "info" : "MethodDeclaration[33508-33931]:MethodDeclaration[33508-33931]"
  }, {
    "left" : "private checkDeclaredPropertyInheritance(t , n , ctorType , propertyName , info , propertyType ) : void",
    "right" : "private checkDeclaredPropertyInheritance(t , n , ctorType , propertyName , info , propertyType ) : void",
    "info" : "MethodDeclaration[33935-38459]:MethodDeclaration[33935-38459]"
  }, {
    "left" : "private hasUnknownOrEmptySupertype(ctor ) : boolean",
    "right" : "private hasUnknownOrEmptySupertype(ctor ) : boolean",
    "info" : "MethodDeclaration[38463-39412]:MethodDeclaration[38463-39412]"
  }, {
    "left" : "private visitInterfaceGetprop(t , assign , object , property , lvalue , rvalue ) : void",
    "right" : "private visitInterfaceGetprop(t , assign , object , property , lvalue , rvalue ) : void",
    "info" : "MethodDeclaration[39416-40743]:MethodDeclaration[39416-40743]"
  }, {
    "left" : "private visitAnnotatedAssignGetprop(t , assign , type , object , property , rvalue ) : void",
    "right" : "private visitAnnotatedAssignGetprop(t , assign , type , object , property , rvalue ) : void",
    "info" : "MethodDeclaration[40747-41196]:MethodDeclaration[40747-41196]"
  }, {
    "left" : "package visitName(t , n , parent ) : boolean",
    "right" : "package visitName(t , n , parent ) : boolean",
    "info" : "MethodDeclaration[41200-42605]:MethodDeclaration[41200-42605]"
  }, {
    "left" : "private visitGetProp(t , n , parent ) : void",
    "right" : "private visitGetProp(t , n , parent ) : void",
    "info" : "MethodDeclaration[42609-43941]:MethodDeclaration[42609-43941]"
  }, {
    "left" : "private checkPropertyAccess(childType , propName , t , n ) : void",
    "right" : "private checkPropertyAccess(childType , propName , t , n ) : void",
    "info" : "MethodDeclaration[43945-45036]:MethodDeclaration[43945-45036]"
  }, {
    "left" : "private isPropertyTest(getProp ) : boolean",
    "right" : "private isPropertyTest(getProp ) : boolean",
    "info" : "MethodDeclaration[45040-46010]:MethodDeclaration[45040-46010]"
  }, {
    "left" : "private visitGetElem(t , n ) : void",
    "right" : "private visitGetElem(t , n ) : void",
    "info" : "MethodDeclaration[46014-46462]:MethodDeclaration[46014-46462]"
  }, {
    "left" : "private visitVar(t , n ) : void",
    "right" : "private visitVar(t , n ) : void",
    "info" : "MethodDeclaration[46466-48024]:MethodDeclaration[46466-48024]"
  }, {
    "left" : "private visitNew(t , n ) : void",
    "right" : "private visitNew(t , n ) : void",
    "info" : "MethodDeclaration[48028-48927]:MethodDeclaration[48028-48927]"
  }, {
    "left" : "private checkInterfaceConflictProperties(t , n , functionName , properties , currentProperties , interfaceType ) : void",
    "right" : "private checkInterfaceConflictProperties(t , n , functionName , properties , currentProperties , interfaceType ) : void",
    "info" : "MethodDeclaration[48931-50439]:MethodDeclaration[48931-50439]"
  }, {
    "left" : "private visitFunction(t , n ) : void",
    "right" : "private visitFunction(t , n ) : void",
    "info" : "MethodDeclaration[50443-53508]:MethodDeclaration[50443-53508]"
  }, {
    "left" : "private visitCall(t , n ) : void",
    "right" : "private visitCall(t , n ) : void",
    "info" : "MethodDeclaration[53512-55492]:MethodDeclaration[53512-55834]"
  }, {
    "left" : "private visitParameterList(t , call , functionType ) : void",
    "right" : "private visitParameterList(t , call , functionType ) : void",
    "info" : "MethodDeclaration[55496-56946]:MethodDeclaration[55838-57288]"
  }, {
    "left" : "private visitReturn(t , n ) : void",
    "right" : "private visitReturn(t , n ) : void",
    "info" : "MethodDeclaration[56950-58245]:MethodDeclaration[57292-58587]"
  }, {
    "left" : "private visitBinaryOperator(op int, t , n ) : void",
    "right" : "private visitBinaryOperator(op int, t , n ) : void",
    "info" : "MethodDeclaration[58249-60328]:MethodDeclaration[58591-60670]"
  }, {
    "left" : "private checkEnumInitializer(t , value , primitiveType ) : void",
    "right" : "private checkEnumInitializer(t , value , primitiveType ) : void",
    "info" : "MethodDeclaration[60332-62283]:MethodDeclaration[60674-62625]"
  }, {
    "left" : "private isReference(n ) : boolean",
    "right" : "private isReference(n ) : boolean",
    "info" : "MethodDeclaration[62288-62768]:MethodDeclaration[62630-63110]"
  }, {
    "left" : "private getJSType(n ) : ",
    "right" : "private getJSType(n ) : ",
    "info" : "MethodDeclaration[62772-63339]:MethodDeclaration[63114-63681]"
  }, {
    "left" : "private getFunctionType(n ) : ",
    "right" : "private getFunctionType(n ) : ",
    "info" : "MethodDeclaration[63343-63780]:MethodDeclaration[63685-64122]"
  }, {
    "left" : "private ensureTyped(t , n ) : void",
    "right" : "private ensureTyped(t , n ) : void",
    "info" : "MethodDeclaration[64108-64326]:MethodDeclaration[64450-64668]"
  }, {
    "left" : "private ensureTyped(t , n , type ) : void",
    "right" : "private ensureTyped(t , n , type ) : void",
    "info" : "MethodDeclaration[64330-64448]:MethodDeclaration[64672-64790]"
  }, {
    "left" : "private ensureTyped(t , n , type ) : void",
    "right" : "private ensureTyped(t , n , type ) : void",
    "info" : "MethodDeclaration[64452-66118]:MethodDeclaration[64794-66460]"
  }, {
    "left" : "package getTypedPercent() : double",
    "right" : "package getTypedPercent() : double",
    "info" : "MethodDeclaration[66122-66429]:MethodDeclaration[66464-66771]"
  }, {
    "left" : "private getNativeType(typeId ) : ",
    "right" : "private getNativeType(typeId ) : ",
    "info" : "MethodDeclaration[66433-66535]:MethodDeclaration[66775-66877]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11012-11018]:Modifier[11012-11018]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[11019-11028]:SimpleName[11019-11028]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[11029-11054]:SingleVariableDeclaration[11029-11054]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[11062-11107]:SingleVariableDeclaration[11062-11107]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[11115-11142]:SingleVariableDeclaration[11115-11142]"
  }, {
    "left" : "Scope topScope",
    "right" : "Scope topScope",
    "info" : "SingleVariableDeclaration[11150-11164]:SingleVariableDeclaration[11150-11164]"
  }, {
    "left" : "ScopeCreator scopeCreator",
    "right" : "ScopeCreator scopeCreator",
    "info" : "SingleVariableDeclaration[11172-11197]:SingleVariableDeclaration[11172-11197]"
  }, {
    "left" : "CheckLevel reportMissingOverride",
    "right" : "CheckLevel reportMissingOverride",
    "info" : "SingleVariableDeclaration[11205-11237]:SingleVariableDeclaration[11205-11237]"
  }, {
    "left" : "CheckLevel reportUnknownTypes",
    "right" : "CheckLevel reportUnknownTypes",
    "info" : "SingleVariableDeclaration[11245-11274]:SingleVariableDeclaration[11245-11274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11276-11679]:Block[11276-11679]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[11282-11307]:ExpressionStatement[11282-11307]"
  }, {
    "left" : "this.validator = compiler.getTypeValidator();",
    "right" : "this.validator = compiler.getTypeValidator();",
    "info" : "ExpressionStatement[11312-11357]:ExpressionStatement[11312-11357]"
  }, {
    "left" : "this.reverseInterpreter = reverseInterpreter;",
    "right" : "this.reverseInterpreter = reverseInterpreter;",
    "info" : "ExpressionStatement[11362-11407]:ExpressionStatement[11362-11407]"
  }, {
    "left" : "this.typeRegistry = typeRegistry;",
    "right" : "this.typeRegistry = typeRegistry;",
    "info" : "ExpressionStatement[11412-11445]:ExpressionStatement[11412-11445]"
  }, {
    "left" : "this.topScope = topScope;",
    "right" : "this.topScope = topScope;",
    "info" : "ExpressionStatement[11450-11475]:ExpressionStatement[11450-11475]"
  }, {
    "left" : "this.scopeCreator = scopeCreator;",
    "right" : "this.scopeCreator = scopeCreator;",
    "info" : "ExpressionStatement[11480-11513]:ExpressionStatement[11480-11513]"
  }, {
    "left" : "this.reportMissingOverride = reportMissingOverride;",
    "right" : "this.reportMissingOverride = reportMissingOverride;",
    "info" : "ExpressionStatement[11518-11569]:ExpressionStatement[11518-11569]"
  }, {
    "left" : "this.reportUnknownTypes = reportUnknownTypes;",
    "right" : "this.reportUnknownTypes = reportUnknownTypes;",
    "info" : "ExpressionStatement[11574-11619]:ExpressionStatement[11574-11619]"
  }, {
    "left" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
    "right" : "this.inferJSDocInfo = new InferJSDocInfo(compiler);",
    "info" : "ExpressionStatement[11624-11675]:ExpressionStatement[11624-11675]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11683-11689]:Modifier[11683-11689]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[11690-11699]:SimpleName[11690-11699]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[11700-11725]:SingleVariableDeclaration[11700-11725]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[11733-11778]:SingleVariableDeclaration[11733-11778]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[11786-11813]:SingleVariableDeclaration[11786-11813]"
  }, {
    "left" : "CheckLevel reportMissingOverride",
    "right" : "CheckLevel reportMissingOverride",
    "info" : "SingleVariableDeclaration[11821-11853]:SingleVariableDeclaration[11821-11853]"
  }, {
    "left" : "CheckLevel reportUnknownTypes",
    "right" : "CheckLevel reportUnknownTypes",
    "info" : "SingleVariableDeclaration[11861-11890]:SingleVariableDeclaration[11861-11890]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11892-12014]:Block[11892-12014]"
  }, {
    "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
    "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n        reportMissingOverride, reportUnknownTypes);",
    "info" : "ConstructorInvocation[11898-12010]:ConstructorInvocation[11898-12010]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleName[12018-12027]:SimpleName[12018-12027]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[12028-12053]:SingleVariableDeclaration[12028-12053]"
  }, {
    "left" : "ReverseAbstractInterpreter reverseInterpreter",
    "right" : "ReverseAbstractInterpreter reverseInterpreter",
    "info" : "SingleVariableDeclaration[12061-12106]:SingleVariableDeclaration[12061-12106]"
  }, {
    "left" : "JSTypeRegistry typeRegistry",
    "right" : "JSTypeRegistry typeRegistry",
    "info" : "SingleVariableDeclaration[12114-12141]:SingleVariableDeclaration[12114-12141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12143-12259]:Block[12143-12259]"
  }, {
    "left" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
    "right" : "this(compiler, reverseInterpreter, typeRegistry, null, null,\n         CheckLevel.WARNING, CheckLevel.OFF);",
    "info" : "ConstructorInvocation[12149-12255]:ConstructorInvocation[12149-12255]"
  }, {
    "left" : "TypeCheck",
    "right" : "TypeCheck",
    "info" : "SimpleType[12340-12349]:SimpleType[12340-12349]"
  }, {
    "left" : "reportMissingProperties",
    "right" : "reportMissingProperties",
    "info" : "SimpleName[12350-12373]:SimpleName[12350-12373]"
  }, {
    "left" : "boolean report",
    "right" : "boolean report",
    "info" : "SingleVariableDeclaration[12374-12388]:SingleVariableDeclaration[12374-12388]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12390-12450]:Block[12390-12450]"
  }, {
    "left" : "reportMissingProperties = report;",
    "right" : "reportMissingProperties = report;",
    "info" : "ExpressionStatement[12396-12429]:ExpressionStatement[12396-12429]"
  }, {
    "left" : "return this;",
    "right" : "return this;",
    "info" : "ReturnStatement[12434-12446]:ReturnStatement[12434-12446]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12703-12709]:Modifier[12703-12709]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12710-12714]:PrimitiveType[12710-12714]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[12715-12722]:SimpleName[12715-12722]"
  }, {
    "left" : "Node externsRoot",
    "right" : "Node externsRoot",
    "info" : "SingleVariableDeclaration[12723-12739]:SingleVariableDeclaration[12723-12739]"
  }, {
    "left" : "Node jsRoot",
    "right" : "Node jsRoot",
    "info" : "SingleVariableDeclaration[12741-12752]:SingleVariableDeclaration[12741-12752]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12754-13138]:Block[12754-13138]"
  }, {
    "left" : "Preconditions.checkNotNull(scopeCreator);",
    "right" : "Preconditions.checkNotNull(scopeCreator);",
    "info" : "ExpressionStatement[12760-12801]:ExpressionStatement[12760-12801]"
  }, {
    "left" : "Preconditions.checkNotNull(topScope);",
    "right" : "Preconditions.checkNotNull(topScope);",
    "info" : "ExpressionStatement[12806-12843]:ExpressionStatement[12806-12843]"
  }, {
    "left" : "Node externsAndJs = jsRoot.getParent();",
    "right" : "Node externsAndJs = jsRoot.getParent();",
    "info" : "VariableDeclarationStatement[12849-12888]:VariableDeclarationStatement[12849-12888]"
  }, {
    "left" : "Preconditions.checkState(externsAndJs != null);",
    "right" : "Preconditions.checkState(externsAndJs != null);",
    "info" : "ExpressionStatement[12893-12940]:ExpressionStatement[12893-12940]"
  }, {
    "left" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
    "right" : "Preconditions.checkState(\n        externsRoot == null || externsAndJs.hasChild(externsRoot));",
    "info" : "ExpressionStatement[12945-13038]:ExpressionStatement[12945-13038]"
  }, {
    "left" : "if (externsRoot != null)",
    "right" : "if (externsRoot != null)",
    "info" : "IfStatement[13044-13108]:IfStatement[13044-13108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13069-13108]:Block[13069-13108]"
  }, {
    "left" : "check(externsRoot, true);",
    "right" : "check(externsRoot, true);",
    "info" : "ExpressionStatement[13077-13102]:ExpressionStatement[13077-13102]"
  }, {
    "left" : "check(jsRoot, false);",
    "right" : "check(jsRoot, false);",
    "info" : "ExpressionStatement[13113-13134]:ExpressionStatement[13113-13134]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13200-13206]:Modifier[13200-13206]"
  }, {
    "left" : "Scope",
    "right" : "Scope",
    "info" : "SimpleType[13207-13212]:SimpleType[13207-13212]"
  }, {
    "left" : "processForTesting",
    "right" : "processForTesting",
    "info" : "SimpleName[13213-13230]:SimpleName[13213-13230]"
  }, {
    "left" : "Node externsRoot",
    "right" : "Node externsRoot",
    "info" : "SingleVariableDeclaration[13231-13247]:SingleVariableDeclaration[13231-13247]"
  }, {
    "left" : "Node jsRoot",
    "right" : "Node jsRoot",
    "info" : "SingleVariableDeclaration[13249-13260]:SingleVariableDeclaration[13249-13260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13262-13839]:Block[13262-13839]"
  }, {
    "left" : "Preconditions.checkState(scopeCreator == null);",
    "right" : "Preconditions.checkState(scopeCreator == null);",
    "info" : "ExpressionStatement[13268-13315]:ExpressionStatement[13268-13315]"
  }, {
    "left" : "Preconditions.checkState(topScope == null);",
    "right" : "Preconditions.checkState(topScope == null);",
    "info" : "ExpressionStatement[13320-13363]:ExpressionStatement[13320-13363]"
  }, {
    "left" : "Preconditions.checkState(jsRoot.getParent() != null);",
    "right" : "Preconditions.checkState(jsRoot.getParent() != null);",
    "info" : "ExpressionStatement[13369-13422]:ExpressionStatement[13369-13422]"
  }, {
    "left" : "Node externsAndJsRoot = jsRoot.getParent();",
    "right" : "Node externsAndJsRoot = jsRoot.getParent();",
    "info" : "VariableDeclarationStatement[13427-13470]:VariableDeclarationStatement[13427-13470]"
  }, {
    "left" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
    "right" : "scopeCreator = new MemoizedScopeCreator(new TypedScopeCreator(compiler));",
    "info" : "ExpressionStatement[13476-13549]:ExpressionStatement[13476-13549]"
  }, {
    "left" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
    "right" : "topScope = scopeCreator.createScope(externsAndJsRoot, null);",
    "info" : "ExpressionStatement[13554-13614]:ExpressionStatement[13554-13614]"
  }, {
    "left" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
    "right" : "TypeInferencePass inference = new TypeInferencePass(compiler,\n        reverseInterpreter, topScope, scopeCreator);",
    "info" : "VariableDeclarationStatement[13620-13734]:VariableDeclarationStatement[13620-13734]"
  }, {
    "left" : "inference.process(externsRoot, jsRoot);",
    "right" : "inference.process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[13740-13779]:ExpressionStatement[13740-13779]"
  }, {
    "left" : "process(externsRoot, jsRoot);",
    "right" : "process(externsRoot, jsRoot);",
    "info" : "ExpressionStatement[13784-13813]:ExpressionStatement[13784-13813]"
  }, {
    "left" : "return topScope;",
    "right" : "return topScope;",
    "info" : "ReturnStatement[13819-13835]:ReturnStatement[13819-13835]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13844-13850]:Modifier[13844-13850]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13851-13855]:PrimitiveType[13851-13855]"
  }, {
    "left" : "check",
    "right" : "check",
    "info" : "SimpleName[13856-13861]:SimpleName[13856-13861]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[13862-13871]:SingleVariableDeclaration[13862-13871]"
  }, {
    "left" : "boolean externs",
    "right" : "boolean externs",
    "info" : "SingleVariableDeclaration[13873-13888]:SingleVariableDeclaration[13873-13888]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13890-14193]:Block[13890-14193]"
  }, {
    "left" : "Preconditions.checkNotNull(node);",
    "right" : "Preconditions.checkNotNull(node);",
    "info" : "ExpressionStatement[13896-13929]:ExpressionStatement[13896-13929]"
  }, {
    "left" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
    "right" : "NodeTraversal t = new NodeTraversal(compiler, this, scopeCreator);",
    "info" : "VariableDeclarationStatement[13935-14001]:VariableDeclarationStatement[13935-14001]"
  }, {
    "left" : "inExterns = externs;",
    "right" : "inExterns = externs;",
    "info" : "ExpressionStatement[14006-14026]:ExpressionStatement[14006-14026]"
  }, {
    "left" : "t.traverseWithScope(node, topScope);",
    "right" : "t.traverseWithScope(node, topScope);",
    "info" : "ExpressionStatement[14031-14067]:ExpressionStatement[14031-14067]"
  }, {
    "left" : "if (externs)",
    "right" : "if (externs)",
    "info" : "IfStatement[14072-14189]:IfStatement[14072-14189]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14085-14134]:Block[14085-14134]"
  }, {
    "left" : "inferJSDocInfo.process(node, null);",
    "right" : "inferJSDocInfo.process(node, null);",
    "info" : "ExpressionStatement[14093-14128]:ExpressionStatement[14093-14128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14140-14189]:Block[14140-14189]"
  }, {
    "left" : "inferJSDocInfo.process(null, node);",
    "right" : "inferJSDocInfo.process(null, node);",
    "info" : "ExpressionStatement[14148-14183]:ExpressionStatement[14148-14183]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14198-14205]:Modifier[14198-14205]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14206-14210]:PrimitiveType[14206-14210]"
  }, {
    "left" : "checkNoTypeCheckSection",
    "right" : "checkNoTypeCheckSection",
    "info" : "SimpleName[14211-14234]:SimpleName[14211-14234]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14235-14241]:SingleVariableDeclaration[14235-14241]"
  }, {
    "left" : "boolean enterSection",
    "right" : "boolean enterSection",
    "info" : "SingleVariableDeclaration[14243-14263]:SingleVariableDeclaration[14243-14263]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14265-14735]:Block[14265-14735]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.VAR:\n      case Token.FUNCTION:\n      case Token.ASSIGN:\n        JSDocInfo info = n.getJSDocInfo();\n        if (info != null && info.isNoTypeCheck()) {\n          if (enterSection) {\n            noTypeCheckSection++;\n          } else {\n            noTypeCheckSection--;\n          }\n        }\n        validator.setShouldReport(noTypeCheckSection == 0);\n        break;\n    }",
    "info" : "SwitchStatement[14271-14731]:SwitchStatement[14271-14731]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[14300-14318]:SwitchCase[14300-14318]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[14325-14342]:SwitchCase[14325-14342]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[14349-14364]:SwitchCase[14349-14364]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[14371-14391]:SwitchCase[14371-14391]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[14398-14416]:SwitchCase[14398-14416]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[14425-14459]:VariableDeclarationStatement[14425-14459]"
  }, {
    "left" : "if (info != null && info.isNoTypeCheck())",
    "right" : "if (info != null && info.isNoTypeCheck())",
    "info" : "IfStatement[14468-14650]:IfStatement[14468-14650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14510-14650]:Block[14510-14650]"
  }, {
    "left" : "if (enterSection)",
    "right" : "if (enterSection)",
    "info" : "IfStatement[14522-14640]:IfStatement[14522-14640]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14540-14587]:Block[14540-14587]"
  }, {
    "left" : "noTypeCheckSection++;",
    "right" : "noTypeCheckSection++;",
    "info" : "ExpressionStatement[14554-14575]:ExpressionStatement[14554-14575]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14593-14640]:Block[14593-14640]"
  }, {
    "left" : "noTypeCheckSection--;",
    "right" : "noTypeCheckSection--;",
    "info" : "ExpressionStatement[14607-14628]:ExpressionStatement[14607-14628]"
  }, {
    "left" : "validator.setShouldReport(noTypeCheckSection == 0);",
    "right" : "validator.setShouldReport(noTypeCheckSection == 0);",
    "info" : "ExpressionStatement[14659-14710]:ExpressionStatement[14659-14710]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[14719-14725]:BreakStatement[14719-14725]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[14739-14746]:Modifier[14739-14746]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14747-14751]:PrimitiveType[14747-14751]"
  }, {
    "left" : "report",
    "right" : "report",
    "info" : "SimpleName[14752-14758]:SimpleName[14752-14758]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14759-14774]:SingleVariableDeclaration[14759-14774]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14776-14782]:SingleVariableDeclaration[14776-14782]"
  }, {
    "left" : "DiagnosticType diagnosticType",
    "right" : "DiagnosticType diagnosticType",
    "info" : "SingleVariableDeclaration[14784-14813]:SingleVariableDeclaration[14784-14813]"
  }, {
    "left" : "String... arguments",
    "right" : "String... arguments",
    "info" : "SingleVariableDeclaration[14821-14840]:SingleVariableDeclaration[14821-14840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14842-14934]:Block[14842-14934]"
  }, {
    "left" : "if (noTypeCheckSection == 0)",
    "right" : "if (noTypeCheckSection == 0)",
    "info" : "IfStatement[14848-14930]:IfStatement[14848-14930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14877-14930]:Block[14877-14930]"
  }, {
    "left" : "t.report(n, diagnosticType, arguments);",
    "right" : "t.report(n, diagnosticType, arguments);",
    "info" : "ExpressionStatement[14885-14924]:ExpressionStatement[14885-14924]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14938-14944]:Modifier[14938-14944]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14945-14952]:PrimitiveType[14945-14952]"
  }, {
    "left" : "shouldTraverse",
    "right" : "shouldTraverse",
    "info" : "SimpleName[14953-14967]:SimpleName[14953-14967]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[14975-14990]:SingleVariableDeclaration[14975-14990]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14992-14998]:SingleVariableDeclaration[14992-14998]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[15000-15011]:SingleVariableDeclaration[15000-15011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15013-16181]:Block[15013-16181]"
  }, {
    "left" : "checkNoTypeCheckSection(n, true);",
    "right" : "checkNoTypeCheckSection(n, true);",
    "info" : "ExpressionStatement[15019-15052]:ExpressionStatement[15019-15052]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        // normal type checking\n        final TypeCheck outerThis = this;\n        final Scope outerScope = t.getScope();\n        final FunctionType functionType = (FunctionType) n.getJSType();\n        final String functionPrivateName = n.getFirstChild().getString();\n        if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType)) {\n          report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);\n        }\n\n        // TODO(user): Only traverse the function's body. The function's\n        // name and arguments are traversed by the scope creator, and ideally\n        // should not be traversed by the type checker.\n        break;\n    }",
    "info" : "SwitchStatement[15057-16160]:SwitchStatement[15057-16160]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[15086-15106]:SwitchCase[15086-15106]"
  }, {
    "left" : "final TypeCheck outerThis = this;",
    "right" : "final TypeCheck outerThis = this;",
    "info" : "VariableDeclarationStatement[15147-15180]:VariableDeclarationStatement[15147-15180]"
  }, {
    "left" : "final Scope outerScope = t.getScope();",
    "right" : "final Scope outerScope = t.getScope();",
    "info" : "VariableDeclarationStatement[15189-15227]:VariableDeclarationStatement[15189-15227]"
  }, {
    "left" : "final FunctionType functionType = (FunctionType) n.getJSType();",
    "right" : "final FunctionType functionType = (FunctionType) n.getJSType();",
    "info" : "VariableDeclarationStatement[15236-15299]:VariableDeclarationStatement[15236-15299]"
  }, {
    "left" : "final String functionPrivateName = n.getFirstChild().getString();",
    "right" : "final String functionPrivateName = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[15308-15373]:VariableDeclarationStatement[15308-15373]"
  }, {
    "left" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
    "right" : "if (functionPrivateName != null && functionPrivateName.length() > 0 &&\n            outerScope.isDeclared(functionPrivateName, false) &&\n            // Ideally, we would want to check whether the type in the scope\n            // differs from the type being defined, but then the extern\n            // redeclarations of built-in types generates spurious warnings.\n            !(outerScope.getVar(\n                functionPrivateName).getType() instanceof FunctionType))",
    "info" : "IfStatement[15382-15931]:IfStatement[15382-15931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15850-15931]:Block[15850-15931]"
  }, {
    "left" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
    "right" : "report(t, n, FUNCTION_MASKS_VARIABLE, functionPrivateName);",
    "info" : "ExpressionStatement[15862-15921]:ExpressionStatement[15862-15921]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16148-16154]:BreakStatement[16148-16154]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16165-16177]:ReturnStatement[16165-16177]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16630-16636]:Modifier[16630-16636]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16637-16641]:PrimitiveType[16637-16641]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[16642-16647]:SimpleName[16642-16647]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[16648-16663]:SingleVariableDeclaration[16648-16663]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[16665-16671]:SingleVariableDeclaration[16665-16671]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[16673-16684]:SingleVariableDeclaration[16673-16684]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16686-26928]:Block[16686-26928]"
  }, {
    "left" : "JSType childType;",
    "right" : "JSType childType;",
    "info" : "VariableDeclarationStatement[16692-16709]:VariableDeclarationStatement[16692-16709]"
  }, {
    "left" : "JSType leftType, rightType;",
    "right" : "JSType leftType, rightType;",
    "info" : "VariableDeclarationStatement[16714-16741]:VariableDeclarationStatement[16714-16741]"
  }, {
    "left" : "Node left, right;",
    "right" : "Node left, right;",
    "info" : "VariableDeclarationStatement[16746-16763]:VariableDeclarationStatement[16746-16763]"
  }, {
    "left" : "boolean typeable = true;",
    "right" : "boolean typeable = true;",
    "info" : "VariableDeclarationStatement[16834-16858]:VariableDeclarationStatement[16834-16858]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        // Object literal keys are handled with OBJECTLIT\n        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n          ensureTyped(t, n, STRING_TYPE);\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          report(t, n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.getType() == Token.OBJECTLIT) {\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.NAME:\n        typeable = visitName(t, n, parent);\n        break;\n\n      case Token.LP:\n        // If this is under a FUNCTION node, it is a parameter list and can be\n        // ignored here.\n        if (parent.getType() != Token.FUNCTION) {\n          ensureTyped(t, n, getJSType(n.getFirstChild()));\n        } else {\n          typeable = false;\n        }\n        break;\n\n      case Token.COMMA:\n        ensureTyped(t, n, getJSType(n.getLastChild()));\n        break;\n\n      case Token.TRUE:\n      case Token.FALSE:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.THIS:\n        ensureTyped(t, n, t.getScope().getTypeOfThis());\n        break;\n\n      case Token.REF_SPECIAL:\n        ensureTyped(t, n);\n        break;\n\n      case Token.GET_REF:\n        ensureTyped(t, n, getJSType(n.getFirstChild()));\n        break;\n\n      case Token.NULL:\n        ensureTyped(t, n, NULL_TYPE);\n        break;\n\n      case Token.NUMBER:\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.STRING:\n        // Object literal keys are handled with OBJECTLIT\n        if (!NodeUtil.isObjectLitKey(n, n.getParent())) {\n          ensureTyped(t, n, STRING_TYPE);\n        }\n        break;\n\n      case Token.GET:\n      case Token.SET:\n        // Object literal keys are handled with OBJECTLIT\n        break;\n\n      case Token.ARRAYLIT:\n        ensureTyped(t, n, ARRAY_TYPE);\n        break;\n\n      case Token.REGEXP:\n        ensureTyped(t, n, REGEXP_TYPE);\n        break;\n\n      case Token.GETPROP:\n        visitGetProp(t, n, parent);\n        typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);\n        break;\n\n      case Token.GETELEM:\n        visitGetElem(t, n);\n        // The type of GETELEM is always unknown, so no point counting that.\n        // If that unknown leaks elsewhere (say by an assignment to another\n        // variable), then it will be counted.\n        typeable = false;\n        break;\n\n      case Token.VAR:\n        visitVar(t, n);\n        typeable = false;\n        break;\n\n      case Token.NEW:\n        visitNew(t, n);\n        typeable = true;\n        break;\n\n      case Token.CALL:\n        visitCall(t, n);\n        typeable = !NodeUtil.isExpressionNode(parent);\n        break;\n\n      case Token.RETURN:\n        visitReturn(t, n);\n        typeable = false;\n        break;\n\n      case Token.DEC:\n      case Token.INC:\n        left = n.getFirstChild();\n        validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.NOT:\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.VOID:\n        ensureTyped(t, n, VOID_TYPE);\n        break;\n\n      case Token.TYPEOF:\n        ensureTyped(t, n, STRING_TYPE);\n        break;\n\n      case Token.BITNOT:\n        childType = getJSType(n.getFirstChild());\n        if (!childType.matchesInt32Context()) {\n          report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());\n        }\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.POS:\n      case Token.NEG:\n        left = n.getFirstChild();\n        validator.expectNumber(t, left, getJSType(left), \"sign operator\");\n        ensureTyped(t, n, NUMBER_TYPE);\n        break;\n\n      case Token.EQ:\n      case Token.NE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);\n        if (result != TernaryValue.UNKNOWN) {\n          if (n.getType() == Token.NE) {\n            result = result.not();\n          }\n          report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.SHEQ:\n      case Token.SHNE: {\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n\n        JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();\n        JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();\n        if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted)) {\n          report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n      }\n\n      case Token.LT:\n      case Token.LE:\n      case Token.GT:\n      case Token.GE:\n        leftType = getJSType(n.getFirstChild());\n        rightType = getJSType(n.getLastChild());\n        if (rightType.isNumber()) {\n          validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");\n        } else if (leftType.isNumber()) {\n          validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");\n        } else if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext()) {\n          // OK.\n        } else {\n          // Whether the comparison is numeric will be determined at runtime\n          // each time the expression is evaluated. Regardless, both operands\n          // should match a string context.\n          String message = \"left side of comparison\";\n          validator.expectString(t, n, leftType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));\n          message = \"right side of comparison\";\n          validator.expectString(t, n, rightType, message);\n          validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.IN:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right);\n        validator.expectObject(t, n, rightType, \"'in' requires an object\");\n        validator.expectString(t, left, leftType, \"left side of 'in'\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.INSTANCEOF:\n        left = n.getFirstChild();\n        right = n.getLastChild();\n        leftType = getJSType(left);\n        rightType = getJSType(right).restrictByNotNullOrUndefined();\n\n        validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");\n        validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.ASSIGN:\n        visitAssign(t, n);\n        typeable = false;\n        break;\n\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_MUL:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.BITAND:\n      case Token.SUB:\n      case Token.ADD:\n      case Token.MUL:\n        visitBinaryOperator(n.getType(), t, n);\n        break;\n\n      case Token.DELPROP:\n        if (!isReference(n.getFirstChild())) {\n          report(t, n, BAD_DELETE);\n        }\n        ensureTyped(t, n, BOOLEAN_TYPE);\n        break;\n\n      case Token.CASE:\n        JSType switchType = getJSType(parent.getFirstChild());\n        JSType caseType = getJSType(n.getFirstChild());\n        validator.expectSwitchMatchesCase(t, n, switchType, caseType);\n        typeable = false;\n        break;\n\n      case Token.WITH: {\n        Node child = n.getFirstChild();\n        childType = getJSType(child);\n        validator.expectObject(\n            t, child, childType, \"with requires an object\");\n        typeable = false;\n        break;\n      }\n\n      case Token.FUNCTION:\n        visitFunction(t, n);\n        break;\n\n      // These nodes have no interesting type behavior.\n      case Token.LABEL:\n      case Token.LABEL_NAME:\n      case Token.SWITCH:\n      case Token.BREAK:\n      case Token.CATCH:\n      case Token.TRY:\n      case Token.SCRIPT:\n      case Token.EXPR_RESULT:\n      case Token.BLOCK:\n      case Token.EMPTY:\n      case Token.DEFAULT:\n      case Token.CONTINUE:\n      case Token.DEBUGGER:\n      case Token.THROW:\n        typeable = false;\n        break;\n\n      // These nodes require data flow analysis.\n      case Token.DO:\n      case Token.FOR:\n      case Token.IF:\n      case Token.WHILE:\n        typeable = false;\n        break;\n\n      // These nodes are typed during the type inference.\n      case Token.AND:\n      case Token.HOOK:\n      case Token.OBJECTLIT:\n      case Token.OR:\n        if (n.getJSType() != null) { // If we didn't run type inference.\n          ensureTyped(t, n);\n        } else {\n          // If this is an enum, then give that type to the objectlit as well.\n          if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType)) {\n            ensureTyped(t, n, parent.getJSType());\n          } else {\n            ensureTyped(t, n);\n          }\n        }\n        if (n.getType() == Token.OBJECTLIT) {\n          for (Node key : n.children()) {\n            visitObjLitKey(t, key, n);\n          }\n        }\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));\n        ensureTyped(t, n);\n        break;\n    }",
    "info" : "SwitchStatement[16864-26702]:SwitchStatement[16864-26702]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[16893-16909]:SwitchCase[16893-16909]"
  }, {
    "left" : "typeable = visitName(t, n, parent);",
    "right" : "typeable = visitName(t, n, parent);",
    "info" : "ExpressionStatement[16918-16953]:ExpressionStatement[16918-16953]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16962-16968]:BreakStatement[16962-16968]"
  }, {
    "left" : "case Token.LP:",
    "right" : "case Token.LP:",
    "info" : "SwitchCase[16976-16990]:SwitchCase[16976-16990]"
  }, {
    "left" : "if (parent.getType() != Token.FUNCTION)",
    "right" : "if (parent.getType() != Token.FUNCTION)",
    "info" : "IfStatement[17103-17258]:IfStatement[17103-17258]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17143-17213]:Block[17143-17213]"
  }, {
    "left" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
    "right" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
    "info" : "ExpressionStatement[17155-17203]:ExpressionStatement[17155-17203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17219-17258]:Block[17219-17258]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[17231-17248]:ExpressionStatement[17231-17248]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17267-17273]:BreakStatement[17267-17273]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[17281-17298]:SwitchCase[17281-17298]"
  }, {
    "left" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
    "right" : "ensureTyped(t, n, getJSType(n.getLastChild()));",
    "info" : "ExpressionStatement[17307-17354]:ExpressionStatement[17307-17354]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17363-17369]:BreakStatement[17363-17369]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[17377-17393]:SwitchCase[17377-17393]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[17400-17417]:SwitchCase[17400-17417]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[17426-17458]:ExpressionStatement[17426-17458]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17467-17473]:BreakStatement[17467-17473]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[17481-17497]:SwitchCase[17481-17497]"
  }, {
    "left" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
    "right" : "ensureTyped(t, n, t.getScope().getTypeOfThis());",
    "info" : "ExpressionStatement[17506-17554]:ExpressionStatement[17506-17554]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17563-17569]:BreakStatement[17563-17569]"
  }, {
    "left" : "case Token.REF_SPECIAL:",
    "right" : "case Token.REF_SPECIAL:",
    "info" : "SwitchCase[17577-17600]:SwitchCase[17577-17600]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[17609-17627]:ExpressionStatement[17609-17627]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17636-17642]:BreakStatement[17636-17642]"
  }, {
    "left" : "case Token.GET_REF:",
    "right" : "case Token.GET_REF:",
    "info" : "SwitchCase[17650-17669]:SwitchCase[17650-17669]"
  }, {
    "left" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
    "right" : "ensureTyped(t, n, getJSType(n.getFirstChild()));",
    "info" : "ExpressionStatement[17678-17726]:ExpressionStatement[17678-17726]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17735-17741]:BreakStatement[17735-17741]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[17749-17765]:SwitchCase[17749-17765]"
  }, {
    "left" : "ensureTyped(t, n, NULL_TYPE);",
    "right" : "ensureTyped(t, n, NULL_TYPE);",
    "info" : "ExpressionStatement[17774-17803]:ExpressionStatement[17774-17803]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17812-17818]:BreakStatement[17812-17818]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[17826-17844]:SwitchCase[17826-17844]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[17853-17884]:ExpressionStatement[17853-17884]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17893-17899]:BreakStatement[17893-17899]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[17907-17925]:SwitchCase[17907-17925]"
  }, {
    "left" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
    "right" : "if (!NodeUtil.isObjectLitKey(n, n.getParent()))",
    "info" : "IfStatement[17992-18093]:IfStatement[17992-18093]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18040-18093]:Block[18040-18093]"
  }, {
    "left" : "ensureTyped(t, n, STRING_TYPE);",
    "right" : "ensureTyped(t, n, STRING_TYPE);",
    "info" : "ExpressionStatement[18052-18083]:ExpressionStatement[18052-18083]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18102-18108]:BreakStatement[18102-18108]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[18116-18131]:SwitchCase[18116-18131]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[18138-18153]:SwitchCase[18138-18153]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18220-18226]:BreakStatement[18220-18226]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[18234-18254]:SwitchCase[18234-18254]"
  }, {
    "left" : "ensureTyped(t, n, ARRAY_TYPE);",
    "right" : "ensureTyped(t, n, ARRAY_TYPE);",
    "info" : "ExpressionStatement[18263-18293]:ExpressionStatement[18263-18293]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18302-18308]:BreakStatement[18302-18308]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[18316-18334]:SwitchCase[18316-18334]"
  }, {
    "left" : "ensureTyped(t, n, REGEXP_TYPE);",
    "right" : "ensureTyped(t, n, REGEXP_TYPE);",
    "info" : "ExpressionStatement[18343-18374]:ExpressionStatement[18343-18374]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18383-18389]:BreakStatement[18383-18389]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[18397-18416]:SwitchCase[18397-18416]"
  }, {
    "left" : "visitGetProp(t, n, parent);",
    "right" : "visitGetProp(t, n, parent);",
    "info" : "ExpressionStatement[18425-18452]:ExpressionStatement[18425-18452]"
  }, {
    "left" : "typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);",
    "right" : "typeable = !(parent.getType() == Token.ASSIGN &&\n                     parent.getFirstChild() == n);",
    "info" : "ExpressionStatement[18461-18560]:ExpressionStatement[18461-18560]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18569-18575]:BreakStatement[18569-18575]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[18583-18602]:SwitchCase[18583-18602]"
  }, {
    "left" : "visitGetElem(t, n);",
    "right" : "visitGetElem(t, n);",
    "info" : "ExpressionStatement[18611-18630]:ExpressionStatement[18611-18630]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[18839-18856]:ExpressionStatement[18839-18856]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18865-18871]:BreakStatement[18865-18871]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[18879-18894]:SwitchCase[18879-18894]"
  }, {
    "left" : "visitVar(t, n);",
    "right" : "visitVar(t, n);",
    "info" : "ExpressionStatement[18903-18918]:ExpressionStatement[18903-18918]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[18927-18944]:ExpressionStatement[18927-18944]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18953-18959]:BreakStatement[18953-18959]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[18967-18982]:SwitchCase[18967-18982]"
  }, {
    "left" : "visitNew(t, n);",
    "right" : "visitNew(t, n);",
    "info" : "ExpressionStatement[18991-19006]:ExpressionStatement[18991-19006]"
  }, {
    "left" : "typeable = true;",
    "right" : "typeable = true;",
    "info" : "ExpressionStatement[19015-19031]:ExpressionStatement[19015-19031]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19040-19046]:BreakStatement[19040-19046]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[19054-19070]:SwitchCase[19054-19070]"
  }, {
    "left" : "visitCall(t, n);",
    "right" : "visitCall(t, n);",
    "info" : "ExpressionStatement[19079-19095]:ExpressionStatement[19079-19095]"
  }, {
    "left" : "typeable = !NodeUtil.isExpressionNode(parent);",
    "right" : "typeable = !NodeUtil.isExpressionNode(parent);",
    "info" : "ExpressionStatement[19104-19150]:ExpressionStatement[19104-19150]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19159-19165]:BreakStatement[19159-19165]"
  }, {
    "left" : "case Token.RETURN:",
    "right" : "case Token.RETURN:",
    "info" : "SwitchCase[19173-19191]:SwitchCase[19173-19191]"
  }, {
    "left" : "visitReturn(t, n);",
    "right" : "visitReturn(t, n);",
    "info" : "ExpressionStatement[19200-19218]:ExpressionStatement[19200-19218]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[19227-19244]:ExpressionStatement[19227-19244]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19253-19259]:BreakStatement[19253-19259]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[19267-19282]:SwitchCase[19267-19282]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[19289-19304]:SwitchCase[19289-19304]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[19313-19338]:ExpressionStatement[19313-19338]"
  }, {
    "left" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
    "right" : "validator.expectNumber(\n            t, left, getJSType(left), \"increment/decrement\");",
    "info" : "ExpressionStatement[19347-19432]:ExpressionStatement[19347-19432]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[19441-19472]:ExpressionStatement[19441-19472]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19481-19487]:BreakStatement[19481-19487]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[19495-19510]:SwitchCase[19495-19510]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[19519-19551]:ExpressionStatement[19519-19551]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19560-19566]:BreakStatement[19560-19566]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[19574-19590]:SwitchCase[19574-19590]"
  }, {
    "left" : "ensureTyped(t, n, VOID_TYPE);",
    "right" : "ensureTyped(t, n, VOID_TYPE);",
    "info" : "ExpressionStatement[19599-19628]:ExpressionStatement[19599-19628]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19637-19643]:BreakStatement[19637-19643]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[19651-19669]:SwitchCase[19651-19669]"
  }, {
    "left" : "ensureTyped(t, n, STRING_TYPE);",
    "right" : "ensureTyped(t, n, STRING_TYPE);",
    "info" : "ExpressionStatement[19678-19709]:ExpressionStatement[19678-19709]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[19718-19724]:BreakStatement[19718-19724]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[19732-19750]:SwitchCase[19732-19750]"
  }, {
    "left" : "childType = getJSType(n.getFirstChild());",
    "right" : "childType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[19759-19800]:ExpressionStatement[19759-19800]"
  }, {
    "left" : "if (!childType.matchesInt32Context())",
    "right" : "if (!childType.matchesInt32Context())",
    "info" : "IfStatement[19809-19964]:IfStatement[19809-19964]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19847-19964]:Block[19847-19964]"
  }, {
    "left" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
    "right" : "report(t, n, BIT_OPERATION, NodeUtil.opToStr(n.getType()),\n              childType.toString());",
    "info" : "ExpressionStatement[19859-19954]:ExpressionStatement[19859-19954]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[19973-20004]:ExpressionStatement[19973-20004]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20013-20019]:BreakStatement[20013-20019]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[20027-20042]:SwitchCase[20027-20042]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[20049-20064]:SwitchCase[20049-20064]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[20073-20098]:ExpressionStatement[20073-20098]"
  }, {
    "left" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
    "right" : "validator.expectNumber(t, left, getJSType(left), \"sign operator\");",
    "info" : "ExpressionStatement[20107-20173]:ExpressionStatement[20107-20173]"
  }, {
    "left" : "ensureTyped(t, n, NUMBER_TYPE);",
    "right" : "ensureTyped(t, n, NUMBER_TYPE);",
    "info" : "ExpressionStatement[20182-20213]:ExpressionStatement[20182-20213]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20222-20228]:BreakStatement[20222-20228]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[20236-20250]:SwitchCase[20236-20250]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[20257-20271]:SwitchCase[20257-20271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20272-20955]:Block[20272-20955]"
  }, {
    "left" : "leftType = getJSType(n.getFirstChild());",
    "right" : "leftType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[20282-20322]:ExpressionStatement[20282-20322]"
  }, {
    "left" : "rightType = getJSType(n.getLastChild());",
    "right" : "rightType = getJSType(n.getLastChild());",
    "info" : "ExpressionStatement[20331-20371]:ExpressionStatement[20331-20371]"
  }, {
    "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[20381-20449]:VariableDeclarationStatement[20381-20449]"
  }, {
    "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[20458-20528]:VariableDeclarationStatement[20458-20528]"
  }, {
    "left" : "TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);",
    "right" : "TernaryValue result =\n            leftTypeRestricted.testForEquality(rightTypeRestricted);",
    "info" : "VariableDeclarationStatement[20537-20627]:VariableDeclarationStatement[20537-20627]"
  }, {
    "left" : "if (result != TernaryValue.UNKNOWN)",
    "right" : "if (result != TernaryValue.UNKNOWN)",
    "info" : "IfStatement[20636-20891]:IfStatement[20636-20891]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20672-20891]:Block[20672-20891]"
  }, {
    "left" : "if (n.getType() == Token.NE)",
    "right" : "if (n.getType() == Token.NE)",
    "info" : "IfStatement[20684-20761]:IfStatement[20684-20761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20713-20761]:Block[20713-20761]"
  }, {
    "left" : "result = result.not();",
    "right" : "result = result.not();",
    "info" : "ExpressionStatement[20727-20749]:ExpressionStatement[20727-20749]"
  }, {
    "left" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
    "right" : "report(t, n, DETERMINISTIC_TEST, leftType.toString(),\n              rightType.toString(), result.toString());",
    "info" : "ExpressionStatement[20772-20881]:ExpressionStatement[20772-20881]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[20900-20932]:ExpressionStatement[20900-20932]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20941-20947]:BreakStatement[20941-20947]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[20963-20979]:SwitchCase[20963-20979]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[20986-21002]:SwitchCase[20986-21002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21003-21547]:Block[21003-21547]"
  }, {
    "left" : "leftType = getJSType(n.getFirstChild());",
    "right" : "leftType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[21013-21053]:ExpressionStatement[21013-21053]"
  }, {
    "left" : "rightType = getJSType(n.getLastChild());",
    "right" : "rightType = getJSType(n.getLastChild());",
    "info" : "ExpressionStatement[21062-21102]:ExpressionStatement[21062-21102]"
  }, {
    "left" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "right" : "JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[21112-21180]:VariableDeclarationStatement[21112-21180]"
  }, {
    "left" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "right" : "JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[21189-21259]:VariableDeclarationStatement[21189-21259]"
  }, {
    "left" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted))",
    "right" : "if (!leftTypeRestricted.canTestForShallowEqualityWith(\n                rightTypeRestricted))",
    "info" : "IfStatement[21268-21483]:IfStatement[21268-21483]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21361-21483]:Block[21361-21483]"
  }, {
    "left" : "report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());",
    "right" : "report(t, n, DETERMINISTIC_TEST_NO_RESULT, leftType.toString(),\n              rightType.toString());",
    "info" : "ExpressionStatement[21373-21473]:ExpressionStatement[21373-21473]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[21492-21524]:ExpressionStatement[21492-21524]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21533-21539]:BreakStatement[21533-21539]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[21555-21569]:SwitchCase[21555-21569]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[21576-21590]:SwitchCase[21576-21590]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[21597-21611]:SwitchCase[21597-21611]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[21618-21632]:SwitchCase[21618-21632]"
  }, {
    "left" : "leftType = getJSType(n.getFirstChild());",
    "right" : "leftType = getJSType(n.getFirstChild());",
    "info" : "ExpressionStatement[21641-21681]:ExpressionStatement[21641-21681]"
  }, {
    "left" : "rightType = getJSType(n.getLastChild());",
    "right" : "rightType = getJSType(n.getLastChild());",
    "info" : "ExpressionStatement[21690-21730]:ExpressionStatement[21690-21730]"
  }, {
    "left" : "if (rightType.isNumber())",
    "right" : "if (rightType.isNumber())",
    "info" : "IfStatement[21739-22812]:IfStatement[21739-22812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21765-21876]:Block[21765-21876]"
  }, {
    "left" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
    "right" : "validator.expectNumber(\n              t, n, leftType, \"left side of numeric comparison\");",
    "info" : "ExpressionStatement[21777-21866]:ExpressionStatement[21777-21866]"
  }, {
    "left" : "if (leftType.isNumber())",
    "right" : "if (leftType.isNumber())",
    "info" : "IfStatement[21882-22812]:IfStatement[21882-22812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21907-22020]:Block[21907-22020]"
  }, {
    "left" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
    "right" : "validator.expectNumber(\n              t, n, rightType, \"right side of numeric comparison\");",
    "info" : "ExpressionStatement[21919-22010]:ExpressionStatement[21919-22010]"
  }, {
    "left" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
    "right" : "if (leftType.matchesNumberContext() &&\n                   rightType.matchesNumberContext())",
    "info" : "IfStatement[22026-22812]:IfStatement[22026-22812]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22118-22146]:Block[22118-22146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22152-22812]:Block[22152-22812]"
  }, {
    "left" : "String message = \"left side of comparison\";",
    "right" : "String message = \"left side of comparison\";",
    "info" : "VariableDeclarationStatement[22363-22406]:VariableDeclarationStatement[22363-22406]"
  }, {
    "left" : "validator.expectString(t, n, leftType, message);",
    "right" : "validator.expectString(t, n, leftType, message);",
    "info" : "ExpressionStatement[22417-22465]:ExpressionStatement[22417-22465]"
  }, {
    "left" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
    "right" : "validator.expectNotNullOrUndefined(\n              t, n, leftType, message, getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[22476-22579]:ExpressionStatement[22476-22579]"
  }, {
    "left" : "message = \"right side of comparison\";",
    "right" : "message = \"right side of comparison\";",
    "info" : "ExpressionStatement[22590-22627]:ExpressionStatement[22590-22627]"
  }, {
    "left" : "validator.expectString(t, n, rightType, message);",
    "right" : "validator.expectString(t, n, rightType, message);",
    "info" : "ExpressionStatement[22638-22687]:ExpressionStatement[22638-22687]"
  }, {
    "left" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
    "right" : "validator.expectNotNullOrUndefined(\n              t, n, rightType, message, getNativeType(STRING_TYPE));",
    "info" : "ExpressionStatement[22698-22802]:ExpressionStatement[22698-22802]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[22821-22853]:ExpressionStatement[22821-22853]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22862-22868]:BreakStatement[22862-22868]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[22876-22890]:SwitchCase[22876-22890]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[22899-22924]:ExpressionStatement[22899-22924]"
  }, {
    "left" : "right = n.getLastChild();",
    "right" : "right = n.getLastChild();",
    "info" : "ExpressionStatement[22933-22958]:ExpressionStatement[22933-22958]"
  }, {
    "left" : "leftType = getJSType(left);",
    "right" : "leftType = getJSType(left);",
    "info" : "ExpressionStatement[22967-22994]:ExpressionStatement[22967-22994]"
  }, {
    "left" : "rightType = getJSType(right);",
    "right" : "rightType = getJSType(right);",
    "info" : "ExpressionStatement[23003-23032]:ExpressionStatement[23003-23032]"
  }, {
    "left" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
    "right" : "validator.expectObject(t, n, rightType, \"'in' requires an object\");",
    "info" : "ExpressionStatement[23041-23108]:ExpressionStatement[23041-23108]"
  }, {
    "left" : "validator.expectString(t, left, leftType, \"left side of 'in'\");",
    "right" : "validator.expectString(t, left, leftType, \"left side of 'in'\");",
    "info" : "ExpressionStatement[23117-23180]:ExpressionStatement[23117-23180]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[23189-23221]:ExpressionStatement[23189-23221]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23230-23236]:BreakStatement[23230-23236]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[23244-23266]:SwitchCase[23244-23266]"
  }, {
    "left" : "left = n.getFirstChild();",
    "right" : "left = n.getFirstChild();",
    "info" : "ExpressionStatement[23275-23300]:ExpressionStatement[23275-23300]"
  }, {
    "left" : "right = n.getLastChild();",
    "right" : "right = n.getLastChild();",
    "info" : "ExpressionStatement[23309-23334]:ExpressionStatement[23309-23334]"
  }, {
    "left" : "leftType = getJSType(left);",
    "right" : "leftType = getJSType(left);",
    "info" : "ExpressionStatement[23343-23370]:ExpressionStatement[23343-23370]"
  }, {
    "left" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
    "right" : "rightType = getJSType(right).restrictByNotNullOrUndefined();",
    "info" : "ExpressionStatement[23379-23439]:ExpressionStatement[23379-23439]"
  }, {
    "left" : "validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");",
    "right" : "validator.expectAnyObject(\n            t, left, leftType, \"deterministic instanceof yields false\");",
    "info" : "ExpressionStatement[23449-23548]:ExpressionStatement[23449-23548]"
  }, {
    "left" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
    "right" : "validator.expectActualObject(\n            t, right, rightType, \"instanceof requires an object\");",
    "info" : "ExpressionStatement[23557-23653]:ExpressionStatement[23557-23653]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[23662-23694]:ExpressionStatement[23662-23694]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23703-23709]:BreakStatement[23703-23709]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[23717-23735]:SwitchCase[23717-23735]"
  }, {
    "left" : "visitAssign(t, n);",
    "right" : "visitAssign(t, n);",
    "info" : "ExpressionStatement[23744-23762]:ExpressionStatement[23744-23762]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[23771-23788]:ExpressionStatement[23771-23788]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[23797-23803]:BreakStatement[23797-23803]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[23811-23833]:SwitchCase[23811-23833]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[23840-23862]:SwitchCase[23840-23862]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[23869-23892]:SwitchCase[23869-23892]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[23899-23921]:SwitchCase[23899-23921]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[23928-23950]:SwitchCase[23928-23950]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[23957-23981]:SwitchCase[23957-23981]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[23988-24013]:SwitchCase[23988-24013]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[24020-24045]:SwitchCase[24020-24045]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[24052-24074]:SwitchCase[24052-24074]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[24081-24103]:SwitchCase[24081-24103]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[24110-24132]:SwitchCase[24110-24132]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[24139-24154]:SwitchCase[24139-24154]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[24161-24176]:SwitchCase[24161-24176]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[24183-24199]:SwitchCase[24183-24199]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[24206-24221]:SwitchCase[24206-24221]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[24228-24243]:SwitchCase[24228-24243]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[24250-24267]:SwitchCase[24250-24267]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[24274-24292]:SwitchCase[24274-24292]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[24299-24317]:SwitchCase[24299-24317]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[24324-24339]:SwitchCase[24324-24339]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[24346-24361]:SwitchCase[24346-24361]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[24368-24383]:SwitchCase[24368-24383]"
  }, {
    "left" : "visitBinaryOperator(n.getType(), t, n);",
    "right" : "visitBinaryOperator(n.getType(), t, n);",
    "info" : "ExpressionStatement[24392-24431]:ExpressionStatement[24392-24431]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24440-24446]:BreakStatement[24440-24446]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[24454-24473]:SwitchCase[24454-24473]"
  }, {
    "left" : "if (!isReference(n.getFirstChild()))",
    "right" : "if (!isReference(n.getFirstChild()))",
    "info" : "IfStatement[24482-24566]:IfStatement[24482-24566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24519-24566]:Block[24519-24566]"
  }, {
    "left" : "report(t, n, BAD_DELETE);",
    "right" : "report(t, n, BAD_DELETE);",
    "info" : "ExpressionStatement[24531-24556]:ExpressionStatement[24531-24556]"
  }, {
    "left" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "right" : "ensureTyped(t, n, BOOLEAN_TYPE);",
    "info" : "ExpressionStatement[24575-24607]:ExpressionStatement[24575-24607]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24616-24622]:BreakStatement[24616-24622]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[24630-24646]:SwitchCase[24630-24646]"
  }, {
    "left" : "JSType switchType = getJSType(parent.getFirstChild());",
    "right" : "JSType switchType = getJSType(parent.getFirstChild());",
    "info" : "VariableDeclarationStatement[24655-24709]:VariableDeclarationStatement[24655-24709]"
  }, {
    "left" : "JSType caseType = getJSType(n.getFirstChild());",
    "right" : "JSType caseType = getJSType(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[24718-24765]:VariableDeclarationStatement[24718-24765]"
  }, {
    "left" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
    "right" : "validator.expectSwitchMatchesCase(t, n, switchType, caseType);",
    "info" : "ExpressionStatement[24774-24836]:ExpressionStatement[24774-24836]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[24845-24862]:ExpressionStatement[24845-24862]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[24871-24877]:BreakStatement[24871-24877]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[24885-24901]:SwitchCase[24885-24901]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24902-25123]:Block[24902-25123]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[24912-24943]:VariableDeclarationStatement[24912-24943]"
  }, {
    "left" : "childType = getJSType(child);",
    "right" : "childType = getJSType(child);",
    "info" : "ExpressionStatement[24952-24981]:ExpressionStatement[24952-24981]"
  }, {
    "left" : "validator.expectObject(\n            t, child, childType, \"with requires an object\");",
    "right" : "validator.expectObject(\n            t, child, childType, \"with requires an object\");",
    "info" : "ExpressionStatement[24990-25074]:ExpressionStatement[24990-25074]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[25083-25100]:ExpressionStatement[25083-25100]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25109-25115]:BreakStatement[25109-25115]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[25131-25151]:SwitchCase[25131-25151]"
  }, {
    "left" : "visitFunction(t, n);",
    "right" : "visitFunction(t, n);",
    "info" : "ExpressionStatement[25160-25180]:ExpressionStatement[25160-25180]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25189-25195]:BreakStatement[25189-25195]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[25259-25276]:SwitchCase[25259-25276]"
  }, {
    "left" : "case Token.LABEL_NAME:",
    "right" : "case Token.LABEL_NAME:",
    "info" : "SwitchCase[25283-25305]:SwitchCase[25283-25305]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[25312-25330]:SwitchCase[25312-25330]"
  }, {
    "left" : "case Token.BREAK:",
    "right" : "case Token.BREAK:",
    "info" : "SwitchCase[25337-25354]:SwitchCase[25337-25354]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[25361-25378]:SwitchCase[25361-25378]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[25385-25400]:SwitchCase[25385-25400]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[25407-25425]:SwitchCase[25407-25425]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[25432-25455]:SwitchCase[25432-25455]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[25462-25479]:SwitchCase[25462-25479]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[25486-25503]:SwitchCase[25486-25503]"
  }, {
    "left" : "case Token.DEFAULT:",
    "right" : "case Token.DEFAULT:",
    "info" : "SwitchCase[25510-25529]:SwitchCase[25510-25529]"
  }, {
    "left" : "case Token.CONTINUE:",
    "right" : "case Token.CONTINUE:",
    "info" : "SwitchCase[25536-25556]:SwitchCase[25536-25556]"
  }, {
    "left" : "case Token.DEBUGGER:",
    "right" : "case Token.DEBUGGER:",
    "info" : "SwitchCase[25563-25583]:SwitchCase[25563-25583]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[25590-25607]:SwitchCase[25590-25607]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[25616-25633]:ExpressionStatement[25616-25633]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25642-25648]:BreakStatement[25642-25648]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[25705-25719]:SwitchCase[25705-25719]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[25726-25741]:SwitchCase[25726-25741]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[25748-25762]:SwitchCase[25748-25762]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[25769-25786]:SwitchCase[25769-25786]"
  }, {
    "left" : "typeable = false;",
    "right" : "typeable = false;",
    "info" : "ExpressionStatement[25795-25812]:ExpressionStatement[25795-25812]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[25821-25827]:BreakStatement[25821-25827]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[25893-25908]:SwitchCase[25893-25908]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[25915-25931]:SwitchCase[25915-25931]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[25938-25959]:SwitchCase[25938-25959]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[25966-25980]:SwitchCase[25966-25980]"
  }, {
    "left" : "if (n.getJSType() != null)",
    "right" : "if (n.getJSType() != null)",
    "info" : "IfStatement[25989-26409]:IfStatement[25989-26409]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26016-26092]:Block[26016-26092]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[26064-26082]:ExpressionStatement[26064-26082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26098-26409]:Block[26098-26409]"
  }, {
    "left" : "if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType))",
    "right" : "if ((n.getType() == Token.OBJECTLIT)\n              && (parent.getJSType() instanceof EnumType))",
    "info" : "IfStatement[26189-26399]:IfStatement[26189-26399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26285-26349]:Block[26285-26349]"
  }, {
    "left" : "ensureTyped(t, n, parent.getJSType());",
    "right" : "ensureTyped(t, n, parent.getJSType());",
    "info" : "ExpressionStatement[26299-26337]:ExpressionStatement[26299-26337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26355-26399]:Block[26355-26399]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[26369-26387]:ExpressionStatement[26369-26387]"
  }, {
    "left" : "if (n.getType() == Token.OBJECTLIT)",
    "right" : "if (n.getType() == Token.OBJECTLIT)",
    "info" : "IfStatement[26418-26558]:IfStatement[26418-26558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26454-26558]:Block[26454-26558]"
  }, {
    "left" : "for (Node key : n.children())",
    "right" : "for (Node key : n.children())",
    "info" : "EnhancedForStatement[26466-26548]:EnhancedForStatement[26466-26548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26496-26548]:Block[26496-26548]"
  }, {
    "left" : "visitObjLitKey(t, key, n);",
    "right" : "visitObjLitKey(t, key, n);",
    "info" : "ExpressionStatement[26510-26536]:ExpressionStatement[26510-26536]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26567-26573]:BreakStatement[26567-26573]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[26581-26589]:SwitchCase[26581-26589]"
  }, {
    "left" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
    "right" : "report(t, n, UNEXPECTED_TOKEN, Token.name(n.getType()));",
    "info" : "ExpressionStatement[26598-26654]:ExpressionStatement[26598-26654]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[26663-26681]:ExpressionStatement[26663-26681]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[26690-26696]:BreakStatement[26690-26696]"
  }, {
    "left" : "typeable = typeable && !inExterns;",
    "right" : "typeable = typeable && !inExterns;",
    "info" : "ExpressionStatement[26785-26819]:ExpressionStatement[26785-26819]"
  }, {
    "left" : "if (typeable)",
    "right" : "if (typeable)",
    "info" : "IfStatement[26825-26884]:IfStatement[26825-26884]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26839-26884]:Block[26839-26884]"
  }, {
    "left" : "doPercentTypedAccounting(t, n);",
    "right" : "doPercentTypedAccounting(t, n);",
    "info" : "ExpressionStatement[26847-26878]:ExpressionStatement[26847-26878]"
  }, {
    "left" : "checkNoTypeCheckSection(n, false);",
    "right" : "checkNoTypeCheckSection(n, false);",
    "info" : "ExpressionStatement[26890-26924]:ExpressionStatement[26890-26924]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27038-27045]:Modifier[27038-27045]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27046-27050]:PrimitiveType[27046-27050]"
  }, {
    "left" : "doPercentTypedAccounting",
    "right" : "doPercentTypedAccounting",
    "info" : "SimpleName[27051-27075]:SimpleName[27051-27075]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[27076-27091]:SingleVariableDeclaration[27076-27091]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[27093-27099]:SingleVariableDeclaration[27093-27099]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27101-27422]:Block[27101-27422]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[27107-27135]:VariableDeclarationStatement[27107-27135]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[27140-27418]:IfStatement[27140-27418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27158-27184]:Block[27158-27184]"
  }, {
    "left" : "nullCount++;",
    "right" : "nullCount++;",
    "info" : "ExpressionStatement[27166-27178]:ExpressionStatement[27166-27178]"
  }, {
    "left" : "if (type.isUnknownType())",
    "right" : "if (type.isUnknownType())",
    "info" : "IfStatement[27190-27418]:IfStatement[27190-27418]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27216-27385]:Block[27216-27385]"
  }, {
    "left" : "if (reportUnknownTypes.isOn())",
    "right" : "if (reportUnknownTypes.isOn())",
    "info" : "IfStatement[27224-27357]:IfStatement[27224-27357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27255-27357]:Block[27255-27357]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
    "right" : "compiler.report(\n            t.makeError(n, reportUnknownTypes, UNKNOWN_EXPR_TYPE));",
    "info" : "ExpressionStatement[27265-27349]:ExpressionStatement[27265-27349]"
  }, {
    "left" : "unknownCount++;",
    "right" : "unknownCount++;",
    "info" : "ExpressionStatement[27364-27379]:ExpressionStatement[27364-27379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27391-27418]:Block[27391-27418]"
  }, {
    "left" : "typedCount++;",
    "right" : "typedCount++;",
    "info" : "ExpressionStatement[27399-27412]:ExpressionStatement[27399-27412]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[27761-27768]:Modifier[27761-27768]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[27769-27773]:PrimitiveType[27769-27773]"
  }, {
    "left" : "visitAssign",
    "right" : "visitAssign",
    "info" : "SimpleName[27774-27785]:SimpleName[27774-27785]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[27786-27801]:SingleVariableDeclaration[27786-27801]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[27803-27814]:SingleVariableDeclaration[27803-27814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27816-31526]:Block[27816-31526]"
  }, {
    "left" : "JSDocInfo info = assign.getJSDocInfo();",
    "right" : "JSDocInfo info = assign.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[27822-27861]:VariableDeclarationStatement[27822-27861]"
  }, {
    "left" : "Node lvalue = assign.getFirstChild();",
    "right" : "Node lvalue = assign.getFirstChild();",
    "info" : "VariableDeclarationStatement[27866-27903]:VariableDeclarationStatement[27866-27903]"
  }, {
    "left" : "Node rvalue = assign.getLastChild();",
    "right" : "Node rvalue = assign.getLastChild();",
    "info" : "VariableDeclarationStatement[27908-27944]:VariableDeclarationStatement[27908-27944]"
  }, {
    "left" : "if (lvalue.getType() == Token.GETPROP)",
    "right" : "if (lvalue.getType() == Token.GETPROP)",
    "info" : "IfStatement[27950-31176]:IfStatement[27950-31176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27989-30871]:Block[27989-30871]"
  }, {
    "left" : "Node object = lvalue.getFirstChild();",
    "right" : "Node object = lvalue.getFirstChild();",
    "info" : "VariableDeclarationStatement[27997-28034]:VariableDeclarationStatement[27997-28034]"
  }, {
    "left" : "JSType objectJsType = getJSType(object);",
    "right" : "JSType objectJsType = getJSType(object);",
    "info" : "VariableDeclarationStatement[28041-28081]:VariableDeclarationStatement[28041-28081]"
  }, {
    "left" : "String property = lvalue.getLastChild().getString();",
    "right" : "String property = lvalue.getLastChild().getString();",
    "info" : "VariableDeclarationStatement[28088-28140]:VariableDeclarationStatement[28088-28140]"
  }, {
    "left" : "if (object.getType() == Token.GETPROP)",
    "right" : "if (object.getType() == Token.GETPROP)",
    "info" : "IfStatement[28268-28568]:IfStatement[28268-28568]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28307-28568]:Block[28307-28568]"
  }, {
    "left" : "JSType jsType = getJSType(object.getFirstChild());",
    "right" : "JSType jsType = getJSType(object.getFirstChild());",
    "info" : "VariableDeclarationStatement[28317-28367]:VariableDeclarationStatement[28317-28367]"
  }, {
    "left" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
    "right" : "if (jsType.isInterface() &&\n            object.getLastChild().getString().equals(\"prototype\"))",
    "info" : "IfStatement[28376-28560]:IfStatement[28376-28560]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28471-28560]:Block[28471-28560]"
  }, {
    "left" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
    "right" : "visitInterfaceGetprop(t, assign, object, property, lvalue, rvalue);",
    "info" : "ExpressionStatement[28483-28550]:ExpressionStatement[28483-28550]"
  }, {
    "left" : "if (info != null && info.hasType())",
    "right" : "if (info != null && info.hasType())",
    "info" : "IfStatement[28620-28832]:IfStatement[28620-28832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28656-28832]:Block[28656-28832]"
  }, {
    "left" : "visitAnnotatedAssignGetprop(t, assign,\n            info.getType().evaluate(t.getScope(), typeRegistry), object,\n            property, rvalue);",
    "right" : "visitAnnotatedAssignGetprop(t, assign,\n            info.getType().evaluate(t.getScope(), typeRegistry), object,\n            property, rvalue);",
    "info" : "ExpressionStatement[28666-28808]:ExpressionStatement[28666-28808]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[28817-28824]:ReturnStatement[28817-28824]"
  }, {
    "left" : "if (info != null && info.hasEnumParameterType())",
    "right" : "if (info != null && info.hasEnumParameterType())",
    "info" : "IfStatement[28884-29095]:IfStatement[28884-29095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28933-29095]:Block[28933-29095]"
  }, {
    "left" : "checkEnumInitializer(\n            t, rvalue, info.getEnumParameterType().evaluate(\n                t.getScope(), typeRegistry));",
    "right" : "checkEnumInitializer(\n            t, rvalue, info.getEnumParameterType().evaluate(\n                t.getScope(), typeRegistry));",
    "info" : "ExpressionStatement[28943-29071]:ExpressionStatement[28943-29071]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[29080-29087]:ReturnStatement[29080-29087]"
  }, {
    "left" : "if (property.equals(\"prototype\"))",
    "right" : "if (property.equals(\"prototype\"))",
    "info" : "IfStatement[29136-29613]:IfStatement[29136-29613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29170-29613]:Block[29170-29613]"
  }, {
    "left" : "if (objectJsType instanceof FunctionType)",
    "right" : "if (objectJsType instanceof FunctionType)",
    "info" : "IfStatement[29180-29589]:IfStatement[29180-29589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29222-29523]:Block[29222-29523]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) objectJsType;",
    "right" : "FunctionType functionType = (FunctionType) objectJsType;",
    "info" : "VariableDeclarationStatement[29234-29290]:VariableDeclarationStatement[29234-29290]"
  }, {
    "left" : "if (functionType.isConstructor())",
    "right" : "if (functionType.isConstructor())",
    "info" : "IfStatement[29301-29513]:IfStatement[29301-29513]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29335-29513]:Block[29335-29513]"
  }, {
    "left" : "JSType rvalueType = rvalue.getJSType();",
    "right" : "JSType rvalueType = rvalue.getJSType();",
    "info" : "VariableDeclarationStatement[29349-29388]:VariableDeclarationStatement[29349-29388]"
  }, {
    "left" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
    "right" : "validator.expectObject(t, rvalue, rvalueType,\n                OVERRIDING_PROTOTYPE_WITH_NON_OBJECT);",
    "info" : "ExpressionStatement[29401-29501]:ExpressionStatement[29401-29501]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29529-29589]:Block[29529-29589]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[29598-29605]:ReturnStatement[29598-29605]"
  }, {
    "left" : "if (object.getType() == Token.GETPROP)",
    "right" : "if (object.getType() == Token.GETPROP)",
    "info" : "IfStatement[29663-30366]:IfStatement[29663-30366]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29702-30366]:Block[29702-30366]"
  }, {
    "left" : "Node object2 = object.getFirstChild();",
    "right" : "Node object2 = object.getFirstChild();",
    "info" : "VariableDeclarationStatement[29712-29750]:VariableDeclarationStatement[29712-29750]"
  }, {
    "left" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
    "right" : "String property2 = NodeUtil.getStringValue(object.getLastChild());",
    "info" : "VariableDeclarationStatement[29759-29825]:VariableDeclarationStatement[29759-29825]"
  }, {
    "left" : "if (\"prototype\".equals(property2))",
    "right" : "if (\"prototype\".equals(property2))",
    "info" : "IfStatement[29835-30358]:IfStatement[29835-30358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29870-30358]:Block[29870-30358]"
  }, {
    "left" : "JSType jsType = object2.getJSType();",
    "right" : "JSType jsType = object2.getJSType();",
    "info" : "VariableDeclarationStatement[29882-29918]:VariableDeclarationStatement[29882-29918]"
  }, {
    "left" : "if (jsType instanceof FunctionType)",
    "right" : "if (jsType instanceof FunctionType)",
    "info" : "IfStatement[29929-30330]:IfStatement[29929-30330]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29965-30260]:Block[29965-30260]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) jsType;",
    "right" : "FunctionType functionType = (FunctionType) jsType;",
    "info" : "VariableDeclarationStatement[29979-30029]:VariableDeclarationStatement[29979-30029]"
  }, {
    "left" : "if (functionType.isConstructor() || functionType.isInterface())",
    "right" : "if (functionType.isConstructor() || functionType.isInterface())",
    "info" : "IfStatement[30042-30248]:IfStatement[30042-30248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30106-30248]:Block[30106-30248]"
  }, {
    "left" : "checkDeclaredPropertyInheritance(\n                  t, assign, functionType, property, info, getJSType(rvalue));",
    "right" : "checkDeclaredPropertyInheritance(\n                  t, assign, functionType, property, info, getJSType(rvalue));",
    "info" : "ExpressionStatement[30122-30234]:ExpressionStatement[30122-30234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30266-30330]:Block[30266-30330]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[30341-30348]:ReturnStatement[30341-30348]"
  }, {
    "left" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
    "right" : "ObjectType type = ObjectType.cast(\n          objectJsType.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[30406-30496]:VariableDeclarationStatement[30406-30496]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[30503-30865]:IfStatement[30503-30865]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30521-30865]:Block[30521-30865]"
  }, {
    "left" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
    "right" : "if (type.hasProperty(property) &&\n            !type.isPropertyTypeInferred(property) &&\n            !propertyIsImplicitCast(type, property))",
    "info" : "IfStatement[30531-30841]:IfStatement[30531-30841]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30672-30841]:Block[30672-30841]"
  }, {
    "left" : "validator.expectCanAssignToPropertyOf(\n              t, assign, getJSType(rvalue),\n              type.getPropertyType(property), object, property);",
    "right" : "validator.expectCanAssignToPropertyOf(\n              t, assign, getJSType(rvalue),\n              type.getPropertyType(property), object, property);",
    "info" : "ExpressionStatement[30684-30831]:ExpressionStatement[30684-30831]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[30850-30857]:ReturnStatement[30850-30857]"
  }, {
    "left" : "if (lvalue.getType() == Token.NAME)",
    "right" : "if (lvalue.getType() == Token.NAME)",
    "info" : "IfStatement[30877-31176]:IfStatement[30877-31176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30913-31176]:Block[30913-31176]"
  }, {
    "left" : "JSType rvalueType = getJSType(assign.getLastChild());",
    "right" : "JSType rvalueType = getJSType(assign.getLastChild());",
    "info" : "VariableDeclarationStatement[30963-31016]:VariableDeclarationStatement[30963-31016]"
  }, {
    "left" : "Var var = t.getScope().getVar(lvalue.getString());",
    "right" : "Var var = t.getScope().getVar(lvalue.getString());",
    "info" : "VariableDeclarationStatement[31023-31073]:VariableDeclarationStatement[31023-31073]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[31080-31170]:IfStatement[31080-31170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31097-31170]:Block[31097-31170]"
  }, {
    "left" : "if (var.isTypeInferred())",
    "right" : "if (var.isTypeInferred())",
    "info" : "IfStatement[31107-31162]:IfStatement[31107-31162]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31133-31162]:Block[31133-31162]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[31145-31152]:ReturnStatement[31145-31152]"
  }, {
    "left" : "JSType leftType = getJSType(lvalue);",
    "right" : "JSType leftType = getJSType(lvalue);",
    "info" : "VariableDeclarationStatement[31207-31243]:VariableDeclarationStatement[31207-31243]"
  }, {
    "left" : "Node rightChild = assign.getLastChild();",
    "right" : "Node rightChild = assign.getLastChild();",
    "info" : "VariableDeclarationStatement[31248-31288]:VariableDeclarationStatement[31248-31288]"
  }, {
    "left" : "JSType rightType = getJSType(rightChild);",
    "right" : "JSType rightType = getJSType(rightChild);",
    "info" : "VariableDeclarationStatement[31293-31334]:VariableDeclarationStatement[31293-31334]"
  }, {
    "left" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
    "right" : "if (validator.expectCanAssignTo(\n            t, assign, rightType, leftType, \"assignment\"))",
    "info" : "IfStatement[31339-31522]:IfStatement[31339-31522]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31431-31479]:Block[31431-31479]"
  }, {
    "left" : "ensureTyped(t, assign, rightType);",
    "right" : "ensureTyped(t, assign, rightType);",
    "info" : "ExpressionStatement[31439-31473]:ExpressionStatement[31439-31473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31485-31522]:Block[31485-31522]"
  }, {
    "left" : "ensureTyped(t, assign);",
    "right" : "ensureTyped(t, assign);",
    "info" : "ExpressionStatement[31493-31516]:ExpressionStatement[31493-31516]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[31811-31818]:Modifier[31811-31818]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[31819-31823]:PrimitiveType[31819-31823]"
  }, {
    "left" : "visitObjLitKey",
    "right" : "visitObjLitKey",
    "info" : "SimpleName[31824-31838]:SimpleName[31824-31838]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[31839-31854]:SingleVariableDeclaration[31839-31854]"
  }, {
    "left" : "Node key",
    "right" : "Node key",
    "info" : "SingleVariableDeclaration[31856-31864]:SingleVariableDeclaration[31856-31864]"
  }, {
    "left" : "Node objlit",
    "right" : "Node objlit",
    "info" : "SingleVariableDeclaration[31866-31877]:SingleVariableDeclaration[31866-31877]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31879-33504]:Block[31879-33504]"
  }, {
    "left" : "Node rvalue = key.getFirstChild();",
    "right" : "Node rvalue = key.getFirstChild();",
    "info" : "VariableDeclarationStatement[32112-32146]:VariableDeclarationStatement[32112-32146]"
  }, {
    "left" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
    "right" : "JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(\n        key, getJSType(rvalue));",
    "info" : "VariableDeclarationStatement[32151-32245]:VariableDeclarationStatement[32151-32245]"
  }, {
    "left" : "if (rightType == null)",
    "right" : "if (rightType == null)",
    "info" : "IfStatement[32250-32327]:IfStatement[32250-32327]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32273-32327]:Block[32273-32327]"
  }, {
    "left" : "rightType = getNativeType(UNKNOWN_TYPE);",
    "right" : "rightType = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[32281-32321]:ExpressionStatement[32281-32321]"
  }, {
    "left" : "Node owner = objlit;",
    "right" : "Node owner = objlit;",
    "info" : "VariableDeclarationStatement[32333-32353]:VariableDeclarationStatement[32333-32353]"
  }, {
    "left" : "JSType keyType = getJSType(key);",
    "right" : "JSType keyType = getJSType(key);",
    "info" : "VariableDeclarationStatement[32413-32445]:VariableDeclarationStatement[32413-32445]"
  }, {
    "left" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, keyType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
    "right" : "boolean valid = validator.expectCanAssignToPropertyOf(t, key,\n        rightType, keyType,\n        owner, NodeUtil.getObjectLitKeyName(key));",
    "info" : "VariableDeclarationStatement[32450-32590]:VariableDeclarationStatement[32450-32590]"
  }, {
    "left" : "if (valid)",
    "right" : "if (valid)",
    "info" : "IfStatement[32595-32691]:IfStatement[32595-32691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32606-32651]:Block[32606-32651]"
  }, {
    "left" : "ensureTyped(t, key, rightType);",
    "right" : "ensureTyped(t, key, rightType);",
    "info" : "ExpressionStatement[32614-32645]:ExpressionStatement[32614-32645]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32657-32691]:Block[32657-32691]"
  }, {
    "left" : "ensureTyped(t, key);",
    "right" : "ensureTyped(t, key);",
    "info" : "ExpressionStatement[32665-32685]:ExpressionStatement[32665-32685]"
  }, {
    "left" : "JSType objlitType = getJSType(objlit);",
    "right" : "JSType objlitType = getJSType(objlit);",
    "info" : "VariableDeclarationStatement[32977-33015]:VariableDeclarationStatement[32977-33015]"
  }, {
    "left" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
    "right" : "ObjectType type = ObjectType.cast(\n        objlitType.restrictByNotNullOrUndefined());",
    "info" : "VariableDeclarationStatement[33020-33106]:VariableDeclarationStatement[33020-33106]"
  }, {
    "left" : "if (type != null)",
    "right" : "if (type != null)",
    "info" : "IfStatement[33111-33500]:IfStatement[33111-33500]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33129-33500]:Block[33129-33500]"
  }, {
    "left" : "String property = NodeUtil.getObjectLitKeyName(key);",
    "right" : "String property = NodeUtil.getObjectLitKeyName(key);",
    "info" : "VariableDeclarationStatement[33137-33189]:VariableDeclarationStatement[33137-33189]"
  }, {
    "left" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
    "right" : "if (type.hasProperty(property) &&\n          !type.isPropertyTypeInferred(property) &&\n          !propertyIsImplicitCast(type, property))",
    "info" : "IfStatement[33196-33480]:IfStatement[33196-33480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33333-33480]:Block[33333-33480]"
  }, {
    "left" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
    "right" : "validator.expectCanAssignToPropertyOf(\n            t, key, keyType,\n            type.getPropertyType(property), owner, property);",
    "info" : "ExpressionStatement[33343-33472]:ExpressionStatement[33343-33472]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[33487-33494]:ReturnStatement[33487-33494]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33622-33629]:Modifier[33622-33629]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33630-33637]:PrimitiveType[33630-33637]"
  }, {
    "left" : "propertyIsImplicitCast",
    "right" : "propertyIsImplicitCast",
    "info" : "SimpleName[33638-33660]:SimpleName[33638-33660]"
  }, {
    "left" : "ObjectType type",
    "right" : "ObjectType type",
    "info" : "SingleVariableDeclaration[33661-33676]:SingleVariableDeclaration[33661-33676]"
  }, {
    "left" : "String prop",
    "right" : "String prop",
    "info" : "SingleVariableDeclaration[33678-33689]:SingleVariableDeclaration[33678-33689]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33691-33931]:Block[33691-33931]"
  }, {
    "left" : "for (; type != null; type = type.getImplicitPrototype())",
    "right" : "for (; type != null; type = type.getImplicitPrototype())",
    "info" : "ForStatement[33697-33909]:ForStatement[33697-33909]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33754-33909]:Block[33754-33909]"
  }, {
    "left" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
    "right" : "JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);",
    "info" : "VariableDeclarationStatement[33762-33817]:VariableDeclarationStatement[33762-33817]"
  }, {
    "left" : "if (docInfo != null && docInfo.isImplicitCast())",
    "right" : "if (docInfo != null && docInfo.isImplicitCast())",
    "info" : "IfStatement[33824-33903]:IfStatement[33824-33903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33873-33903]:Block[33873-33903]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[33883-33895]:ReturnStatement[33883-33895]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[33914-33927]:ReturnStatement[33914-33927]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34187-34194]:Modifier[34187-34194]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[34195-34199]:PrimitiveType[34195-34199]"
  }, {
    "left" : "checkDeclaredPropertyInheritance",
    "right" : "checkDeclaredPropertyInheritance",
    "info" : "SimpleName[34200-34232]:SimpleName[34200-34232]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[34240-34255]:SingleVariableDeclaration[34240-34255]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34257-34263]:SingleVariableDeclaration[34257-34263]"
  }, {
    "left" : "FunctionType ctorType",
    "right" : "FunctionType ctorType",
    "info" : "SingleVariableDeclaration[34265-34286]:SingleVariableDeclaration[34265-34286]"
  }, {
    "left" : "String propertyName",
    "right" : "String propertyName",
    "info" : "SingleVariableDeclaration[34288-34307]:SingleVariableDeclaration[34288-34307]"
  }, {
    "left" : "JSDocInfo info",
    "right" : "JSDocInfo info",
    "info" : "SingleVariableDeclaration[34315-34329]:SingleVariableDeclaration[34315-34329]"
  }, {
    "left" : "JSType propertyType",
    "right" : "JSType propertyType",
    "info" : "SingleVariableDeclaration[34331-34350]:SingleVariableDeclaration[34331-34350]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34352-38459]:Block[34352-38459]"
  }, {
    "left" : "if (hasUnknownOrEmptySupertype(ctorType))",
    "right" : "if (hasUnknownOrEmptySupertype(ctorType))",
    "info" : "IfStatement[34449-34512]:IfStatement[34449-34512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34491-34512]:Block[34491-34512]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[34499-34506]:ReturnStatement[34499-34506]"
  }, {
    "left" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
    "right" : "FunctionType superClass = ctorType.getSuperClassConstructor();",
    "info" : "VariableDeclarationStatement[34518-34580]:VariableDeclarationStatement[34518-34580]"
  }, {
    "left" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getPrototype().hasProperty(propertyName);",
    "right" : "boolean superClassHasProperty = superClass != null &&\n        superClass.getPrototype().hasProperty(propertyName);",
    "info" : "VariableDeclarationStatement[34585-34699]:VariableDeclarationStatement[34585-34699]"
  }, {
    "left" : "boolean superInterfacesHasProperty = false;",
    "right" : "boolean superInterfacesHasProperty = false;",
    "info" : "VariableDeclarationStatement[34725-34768]:VariableDeclarationStatement[34725-34768]"
  }, {
    "left" : "if (ctorType.isInterface())",
    "right" : "if (ctorType.isInterface())",
    "info" : "IfStatement[34773-35008]:IfStatement[34773-35008]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34801-35008]:Block[34801-35008]"
  }, {
    "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[34809-35002]:EnhancedForStatement[34809-35002]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34875-35002]:Block[34875-35002]"
  }, {
    "left" : "superInterfacesHasProperty =\n          superInterfacesHasProperty || interfaceType.hasProperty(propertyName);",
    "right" : "superInterfacesHasProperty =\n          superInterfacesHasProperty || interfaceType.hasProperty(propertyName);",
    "info" : "ExpressionStatement[34885-34994]:ExpressionStatement[34885-34994]"
  }, {
    "left" : "boolean declaredOverride = info != null && info.isOverride();",
    "right" : "boolean declaredOverride = info != null && info.isOverride();",
    "info" : "VariableDeclarationStatement[35013-35074]:VariableDeclarationStatement[35013-35074]"
  }, {
    "left" : "boolean foundInterfaceProperty = false;",
    "right" : "boolean foundInterfaceProperty = false;",
    "info" : "VariableDeclarationStatement[35080-35119]:VariableDeclarationStatement[35080-35119]"
  }, {
    "left" : "if (ctorType.isConstructor())",
    "right" : "if (ctorType.isConstructor())",
    "info" : "IfStatement[35124-36147]:IfStatement[35124-36147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35154-36147]:Block[35154-36147]"
  }, {
    "left" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
    "right" : "for (JSType implementedInterface :\n          ctorType.getAllImplementedInterfaces())",
    "info" : "EnhancedForStatement[35162-36141]:EnhancedForStatement[35162-36141]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35247-36141]:Block[35247-36141]"
  }, {
    "left" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
    "right" : "if (implementedInterface.isUnknownType() ||\n            implementedInterface.isEmptyType())",
    "info" : "IfStatement[35257-35380]:IfStatement[35257-35380]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35349-35380]:Block[35349-35380]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[35361-35370]:ContinueStatement[35361-35370]"
  }, {
    "left" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
    "right" : "FunctionType interfaceType =\n            implementedInterface.toObjectType().getConstructor();",
    "info" : "VariableDeclarationStatement[35389-35483]:VariableDeclarationStatement[35389-35483]"
  }, {
    "left" : "Preconditions.checkNotNull(interfaceType);",
    "right" : "Preconditions.checkNotNull(interfaceType);",
    "info" : "ExpressionStatement[35492-35534]:ExpressionStatement[35492-35534]"
  }, {
    "left" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
    "right" : "boolean interfaceHasProperty =\n            interfaceType.getPrototype().hasProperty(propertyName);",
    "info" : "VariableDeclarationStatement[35543-35641]:VariableDeclarationStatement[35543-35641]"
  }, {
    "left" : "foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;",
    "right" : "foundInterfaceProperty = foundInterfaceProperty || interfaceHasProperty;",
    "info" : "ExpressionStatement[35650-35722]:ExpressionStatement[35650-35722]"
  }, {
    "left" : "if (reportMissingOverride.isOn() && !declaredOverride &&\n            interfaceHasProperty)",
    "right" : "if (reportMissingOverride.isOn() && !declaredOverride &&\n            interfaceHasProperty)",
    "info" : "IfStatement[35731-36133]:IfStatement[35731-36133]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35822-36133]:Block[35822-36133]"
  }, {
    "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
    "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n              HIDDEN_INTERFACE_PROPERTY, propertyName,\n              interfaceType.getTopMostDefiningType(propertyName).toString()));",
    "info" : "ExpressionStatement[35936-36123]:ExpressionStatement[35936-36123]"
  }, {
    "left" : "if (!declaredOverride && !superClassHasProperty\n        && !superInterfacesHasProperty)",
    "right" : "if (!declaredOverride && !superClassHasProperty\n        && !superInterfacesHasProperty)",
    "info" : "IfStatement[36153-36322]:IfStatement[36153-36322]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36241-36322]:Block[36241-36322]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36309-36316]:ReturnStatement[36309-36316]"
  }, {
    "left" : "JSType topInstanceType = superClassHasProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
    "right" : "JSType topInstanceType = superClassHasProperty ?\n        superClass.getTopMostDefiningType(propertyName) : null;",
    "info" : "VariableDeclarationStatement[36328-36440]:VariableDeclarationStatement[36328-36440]"
  }, {
    "left" : "if (reportMissingOverride.isOn() && ctorType.isConstructor() &&\n        !declaredOverride && superClassHasProperty)",
    "right" : "if (reportMissingOverride.isOn() && ctorType.isConstructor() &&\n        !declaredOverride && superClassHasProperty)",
    "info" : "IfStatement[36445-36814]:IfStatement[36445-36814]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36561-36814]:Block[36561-36814]"
  }, {
    "left" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
    "right" : "compiler.report(t.makeError(n, reportMissingOverride,\n          HIDDEN_SUPERCLASS_PROPERTY, propertyName,\n          topInstanceType.toString()));",
    "info" : "ExpressionStatement[36663-36808]:ExpressionStatement[36663-36808]"
  }, {
    "left" : "if (!declaredOverride)",
    "right" : "if (!declaredOverride)",
    "info" : "IfStatement[36819-36902]:IfStatement[36819-36902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36842-36902]:Block[36842-36902]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36889-36896]:ReturnStatement[36889-36896]"
  }, {
    "left" : "if (superClassHasProperty)",
    "right" : "if (superClassHasProperty)",
    "info" : "IfStatement[36970-38455]:IfStatement[36970-38455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36997-37439]:Block[36997-37439]"
  }, {
    "left" : "JSType superClassPropType =\n          superClass.getPrototype().getPropertyType(propertyName);",
    "right" : "JSType superClassPropType =\n          superClass.getPrototype().getPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[37051-37145]:VariableDeclarationStatement[37051-37145]"
  }, {
    "left" : "if (!propertyType.canAssignTo(superClassPropType))",
    "right" : "if (!propertyType.canAssignTo(superClassPropType))",
    "info" : "IfStatement[37152-37433]:IfStatement[37152-37433]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37203-37433]:Block[37203-37433]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
    "right" : "compiler.report(\n            t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                propertyName, topInstanceType.toString(),\n                superClassPropType.toString(), propertyType.toString()));",
    "info" : "ExpressionStatement[37213-37425]:ExpressionStatement[37213-37425]"
  }, {
    "left" : "if (superInterfacesHasProperty)",
    "right" : "if (superInterfacesHasProperty)",
    "info" : "IfStatement[37445-38455]:IfStatement[37445-38455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37477-38217]:Block[37477-38217]"
  }, {
    "left" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : ctorType.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[37531-38211]:EnhancedForStatement[37531-38211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37597-38211]:Block[37597-38211]"
  }, {
    "left" : "if (interfaceType.hasProperty(propertyName))",
    "right" : "if (interfaceType.hasProperty(propertyName))",
    "info" : "IfStatement[37607-38203]:IfStatement[37607-38203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37652-38203]:Block[37652-38203]"
  }, {
    "left" : "JSType superPropertyType =\n            interfaceType.getPropertyType(propertyName);",
    "right" : "JSType superPropertyType =\n            interfaceType.getPropertyType(propertyName);",
    "info" : "VariableDeclarationStatement[37664-37747]:VariableDeclarationStatement[37664-37747]"
  }, {
    "left" : "if (!propertyType.canAssignTo(superPropertyType))",
    "right" : "if (!propertyType.canAssignTo(superPropertyType))",
    "info" : "IfStatement[37758-38193]:IfStatement[37758-38193]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37808-38193]:Block[37808-38193]"
  }, {
    "left" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
    "right" : "topInstanceType = interfaceType.getConstructor().\n                getTopMostDefiningType(propertyName);",
    "info" : "ExpressionStatement[37822-37925]:ExpressionStatement[37822-37925]"
  }, {
    "left" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
    "right" : "compiler.report(\n                t.makeError(n, HIDDEN_SUPERCLASS_PROPERTY_MISMATCH,\n                    propertyName, topInstanceType.toString(),\n                    superPropertyType.toString(),\n                    propertyType.toString()));",
    "info" : "ExpressionStatement[37938-38181]:ExpressionStatement[37938-38181]"
  }, {
    "left" : "if (!foundInterfaceProperty)",
    "right" : "if (!foundInterfaceProperty)",
    "info" : "IfStatement[38223-38455]:IfStatement[38223-38455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38252-38455]:Block[38252-38455]"
  }, {
    "left" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
    "right" : "compiler.report(\n          t.makeError(n, UNKNOWN_OVERRIDE,\n              propertyName, ctorType.getInstanceType().toString()));",
    "info" : "ExpressionStatement[38321-38449]:ExpressionStatement[38321-38449]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[38597-38604]:Modifier[38597-38604]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38605-38611]:Modifier[38605-38611]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38612-38619]:PrimitiveType[38612-38619]"
  }, {
    "left" : "hasUnknownOrEmptySupertype",
    "right" : "hasUnknownOrEmptySupertype",
    "info" : "SimpleName[38620-38646]:SimpleName[38620-38646]"
  }, {
    "left" : "FunctionType ctor",
    "right" : "FunctionType ctor",
    "info" : "SingleVariableDeclaration[38647-38664]:SingleVariableDeclaration[38647-38664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38666-39412]:Block[38666-39412]"
  }, {
    "left" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
    "right" : "Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());",
    "info" : "ExpressionStatement[38672-38744]:ExpressionStatement[38672-38744]"
  }, {
    "left" : "Preconditions.checkArgument(!ctor.isUnknownType());",
    "right" : "Preconditions.checkArgument(!ctor.isUnknownType());",
    "info" : "ExpressionStatement[38749-38800]:ExpressionStatement[38749-38800]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[38901-39408]:WhileStatement[38901-39408]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38914-39408]:Block[38914-39408]"
  }, {
    "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
    "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
    "info" : "VariableDeclarationStatement[38922-39011]:VariableDeclarationStatement[38922-39011]"
  }, {
    "left" : "if (maybeSuperInstanceType == null)",
    "right" : "if (maybeSuperInstanceType == null)",
    "info" : "IfStatement[39018-39085]:IfStatement[39018-39085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39054-39085]:Block[39054-39085]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39064-39077]:ReturnStatement[39064-39077]"
  }, {
    "left" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
    "right" : "if (maybeSuperInstanceType.isUnknownType() ||\n          maybeSuperInstanceType.isEmptyType())",
    "info" : "IfStatement[39092-39216]:IfStatement[39092-39216]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39186-39216]:Block[39186-39216]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[39196-39208]:ReturnStatement[39196-39208]"
  }, {
    "left" : "ctor = maybeSuperInstanceType.getConstructor();",
    "right" : "ctor = maybeSuperInstanceType.getConstructor();",
    "info" : "ExpressionStatement[39223-39270]:ExpressionStatement[39223-39270]"
  }, {
    "left" : "if (ctor == null)",
    "right" : "if (ctor == null)",
    "info" : "IfStatement[39277-39326]:IfStatement[39277-39326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39295-39326]:Block[39295-39326]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[39305-39318]:ReturnStatement[39305-39318]"
  }, {
    "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
    "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
    "info" : "ExpressionStatement[39333-39402]:ExpressionStatement[39333-39402]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[39537-39544]:Modifier[39537-39544]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39545-39549]:PrimitiveType[39545-39549]"
  }, {
    "left" : "visitInterfaceGetprop",
    "right" : "visitInterfaceGetprop",
    "info" : "SimpleName[39550-39571]:SimpleName[39550-39571]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[39572-39587]:SingleVariableDeclaration[39572-39587]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[39589-39600]:SingleVariableDeclaration[39589-39600]"
  }, {
    "left" : "Node object",
    "right" : "Node object",
    "info" : "SingleVariableDeclaration[39602-39613]:SingleVariableDeclaration[39602-39613]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[39621-39636]:SingleVariableDeclaration[39621-39636]"
  }, {
    "left" : "Node lvalue",
    "right" : "Node lvalue",
    "info" : "SingleVariableDeclaration[39638-39649]:SingleVariableDeclaration[39638-39649]"
  }, {
    "left" : "Node rvalue",
    "right" : "Node rvalue",
    "info" : "SingleVariableDeclaration[39651-39662]:SingleVariableDeclaration[39651-39662]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39664-40743]:Block[39664-40743]"
  }, {
    "left" : "JSType rvalueType = getJSType(rvalue);",
    "right" : "JSType rvalueType = getJSType(rvalue);",
    "info" : "VariableDeclarationStatement[39671-39709]:VariableDeclarationStatement[39671-39709]"
  }, {
    "left" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
    "right" : "String abstractMethodName =\n        compiler.getCodingConvention().getAbstractMethodName();",
    "info" : "VariableDeclarationStatement[39908-39999]:VariableDeclarationStatement[39908-39999]"
  }, {
    "left" : "if (!rvalueType.isOrdinaryFunction() &&\n        !(rvalue.isQualifiedName() &&\n          rvalue.getQualifiedName().equals(abstractMethodName)))",
    "right" : "if (!rvalueType.isOrdinaryFunction() &&\n        !(rvalue.isQualifiedName() &&\n          rvalue.getQualifiedName().equals(abstractMethodName)))",
    "info" : "IfStatement[40004-40480]:IfStatement[40004-40480]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40147-40480]:Block[40147-40480]"
  }, {
    "left" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
    "right" : "String abstractMethodMessage = (abstractMethodName != null)\n         ? \", or \" + abstractMethodName\n         : \"\";",
    "info" : "VariableDeclarationStatement[40230-40344]:VariableDeclarationStatement[40230-40344]"
  }, {
    "left" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
    "right" : "compiler.report(\n          t.makeError(object, INVALID_INTERFACE_MEMBER_DECLARATION,\n              abstractMethodMessage));",
    "info" : "ExpressionStatement[40351-40474]:ExpressionStatement[40351-40474]"
  }, {
    "left" : "if (assign.getLastChild().getType() == Token.FUNCTION\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
    "right" : "if (assign.getLastChild().getType() == Token.FUNCTION\n        && !NodeUtil.isEmptyBlock(assign.getLastChild().getLastChild()))",
    "info" : "IfStatement[40486-40739]:IfStatement[40486-40739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40613-40739]:Block[40613-40739]"
  }, {
    "left" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
    "right" : "compiler.report(\n          t.makeError(object, INTERFACE_FUNCTION_NOT_EMPTY,\n              abstractMethodName));",
    "info" : "ExpressionStatement[40621-40733]:ExpressionStatement[40621-40733]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40899-40906]:Modifier[40899-40906]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40907-40911]:PrimitiveType[40907-40911]"
  }, {
    "left" : "visitAnnotatedAssignGetprop",
    "right" : "visitAnnotatedAssignGetprop",
    "info" : "SimpleName[40912-40939]:SimpleName[40912-40939]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[40940-40955]:SingleVariableDeclaration[40940-40955]"
  }, {
    "left" : "Node assign",
    "right" : "Node assign",
    "info" : "SingleVariableDeclaration[40963-40974]:SingleVariableDeclaration[40963-40974]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[40976-40987]:SingleVariableDeclaration[40976-40987]"
  }, {
    "left" : "Node object",
    "right" : "Node object",
    "info" : "SingleVariableDeclaration[40989-41000]:SingleVariableDeclaration[40989-41000]"
  }, {
    "left" : "String property",
    "right" : "String property",
    "info" : "SingleVariableDeclaration[41002-41017]:SingleVariableDeclaration[41002-41017]"
  }, {
    "left" : "Node rvalue",
    "right" : "Node rvalue",
    "info" : "SingleVariableDeclaration[41019-41030]:SingleVariableDeclaration[41019-41030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41032-41196]:Block[41032-41196]"
  }, {
    "left" : "validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,\n        object, property);",
    "right" : "validator.expectCanAssignToPropertyOf(t, assign, getJSType(rvalue), type,\n        object, property);",
    "info" : "ExpressionStatement[41092-41192]:ExpressionStatement[41092-41192]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41517-41524]:PrimitiveType[41517-41524]"
  }, {
    "left" : "visitName",
    "right" : "visitName",
    "info" : "SimpleName[41525-41534]:SimpleName[41525-41534]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[41535-41550]:SingleVariableDeclaration[41535-41550]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41552-41558]:SingleVariableDeclaration[41552-41558]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[41560-41571]:SingleVariableDeclaration[41560-41571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41573-42605]:Block[41573-42605]"
  }, {
    "left" : "int parentNodeType = parent.getType();",
    "right" : "int parentNodeType = parent.getType();",
    "info" : "VariableDeclarationStatement[42031-42069]:VariableDeclarationStatement[42031-42069]"
  }, {
    "left" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR)",
    "right" : "if (parentNodeType == Token.FUNCTION ||\n        parentNodeType == Token.CATCH ||\n        parentNodeType == Token.LP ||\n        parentNodeType == Token.VAR)",
    "info" : "IfStatement[42074-42257]:IfStatement[42074-42257]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42230-42257]:Block[42230-42257]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[42238-42251]:ReturnStatement[42238-42251]"
  }, {
    "left" : "JSType type = n.getJSType();",
    "right" : "JSType type = n.getJSType();",
    "info" : "VariableDeclarationStatement[42263-42291]:VariableDeclarationStatement[42263-42291]"
  }, {
    "left" : "if (type == null)",
    "right" : "if (type == null)",
    "info" : "IfStatement[42296-42555]:IfStatement[42296-42555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42314-42555]:Block[42314-42555]"
  }, {
    "left" : "type = getNativeType(UNKNOWN_TYPE);",
    "right" : "type = getNativeType(UNKNOWN_TYPE);",
    "info" : "ExpressionStatement[42322-42357]:ExpressionStatement[42322-42357]"
  }, {
    "left" : "Var var = t.getScope().getVar(n.getString());",
    "right" : "Var var = t.getScope().getVar(n.getString());",
    "info" : "VariableDeclarationStatement[42364-42409]:VariableDeclarationStatement[42364-42409]"
  }, {
    "left" : "if (var != null)",
    "right" : "if (var != null)",
    "info" : "IfStatement[42416-42549]:IfStatement[42416-42549]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42433-42549]:Block[42433-42549]"
  }, {
    "left" : "JSType varType = var.getType();",
    "right" : "JSType varType = var.getType();",
    "info" : "VariableDeclarationStatement[42443-42474]:VariableDeclarationStatement[42443-42474]"
  }, {
    "left" : "if (varType != null)",
    "right" : "if (varType != null)",
    "info" : "IfStatement[42483-42541]:IfStatement[42483-42541]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42504-42541]:Block[42504-42541]"
  }, {
    "left" : "type = varType;",
    "right" : "type = varType;",
    "info" : "ExpressionStatement[42516-42531]:ExpressionStatement[42516-42531]"
  }, {
    "left" : "ensureTyped(t, n, type);",
    "right" : "ensureTyped(t, n, type);",
    "info" : "ExpressionStatement[42560-42584]:ExpressionStatement[42560-42584]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42589-42601]:ReturnStatement[42589-42601]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42883-42890]:Modifier[42883-42890]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[42891-42895]:PrimitiveType[42891-42895]"
  }, {
    "left" : "visitGetProp",
    "right" : "visitGetProp",
    "info" : "SimpleName[42896-42908]:SimpleName[42896-42908]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[42909-42924]:SingleVariableDeclaration[42909-42924]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42926-42932]:SingleVariableDeclaration[42926-42932]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[42934-42945]:SingleVariableDeclaration[42934-42945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42947-43941]:Block[42947-43941]"
  }, {
    "left" : "if (n.getJSType() != null && parent.getType() == Token.ASSIGN)",
    "right" : "if (n.getJSType() != null && parent.getType() == Token.ASSIGN)",
    "info" : "IfStatement[43164-43248]:IfStatement[43164-43248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43227-43248]:Block[43227-43248]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[43235-43242]:ReturnStatement[43235-43242]"
  }, {
    "left" : "Node property = n.getLastChild();",
    "right" : "Node property = n.getLastChild();",
    "info" : "VariableDeclarationStatement[43460-43493]:VariableDeclarationStatement[43460-43493]"
  }, {
    "left" : "Node objNode = n.getFirstChild();",
    "right" : "Node objNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[43498-43531]:VariableDeclarationStatement[43498-43531]"
  }, {
    "left" : "JSType childType = getJSType(objNode);",
    "right" : "JSType childType = getJSType(objNode);",
    "info" : "VariableDeclarationStatement[43536-43574]:VariableDeclarationStatement[43536-43574]"
  }, {
    "left" : "if (!validator.expectNotNullOrUndefined(t, n, childType,\n            childType + \" has no properties\", getNativeType(OBJECT_TYPE)))",
    "right" : "if (!validator.expectNotNullOrUndefined(t, n, childType,\n            childType + \" has no properties\", getNativeType(OBJECT_TYPE)))",
    "info" : "IfStatement[43671-43849]:IfStatement[43671-43849]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43803-43849]:Block[43803-43849]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[43811-43829]:ExpressionStatement[43811-43829]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[43836-43843]:ReturnStatement[43836-43843]"
  }, {
    "left" : "checkPropertyAccess(childType, property.getString(), t, n);",
    "right" : "checkPropertyAccess(childType, property.getString(), t, n);",
    "info" : "ExpressionStatement[43855-43914]:ExpressionStatement[43855-43914]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[43919-43937]:ExpressionStatement[43919-43937]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[44012-44019]:Modifier[44012-44019]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[44020-44024]:PrimitiveType[44020-44024]"
  }, {
    "left" : "checkPropertyAccess",
    "right" : "checkPropertyAccess",
    "info" : "SimpleName[44025-44044]:SimpleName[44025-44044]"
  }, {
    "left" : "JSType childType",
    "right" : "JSType childType",
    "info" : "SingleVariableDeclaration[44045-44061]:SingleVariableDeclaration[44045-44061]"
  }, {
    "left" : "String propName",
    "right" : "String propName",
    "info" : "SingleVariableDeclaration[44063-44078]:SingleVariableDeclaration[44063-44078]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[44086-44101]:SingleVariableDeclaration[44086-44101]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44103-44109]:SingleVariableDeclaration[44103-44109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44111-45036]:Block[44111-45036]"
  }, {
    "left" : "ObjectType objectType = childType.dereference();",
    "right" : "ObjectType objectType = childType.dereference();",
    "info" : "VariableDeclarationStatement[44117-44165]:VariableDeclarationStatement[44117-44165]"
  }, {
    "left" : "if (objectType != null)",
    "right" : "if (objectType != null)",
    "info" : "IfStatement[44170-45032]:IfStatement[44170-45032]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44194-44882]:Block[44194-44882]"
  }, {
    "left" : "JSType propType = getJSType(n);",
    "right" : "JSType propType = getJSType(n);",
    "info" : "VariableDeclarationStatement[44202-44233]:VariableDeclarationStatement[44202-44233]"
  }, {
    "left" : "if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
    "right" : "if ((!objectType.hasProperty(propName) ||\n           objectType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE))) &&\n          propType.equals(typeRegistry.getNativeType(UNKNOWN_TYPE)))",
    "info" : "IfStatement[44240-44876]:IfStatement[44240-44876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44426-44876]:Block[44426-44876]"
  }, {
    "left" : "if (objectType instanceof EnumType)",
    "right" : "if (objectType instanceof EnumType)",
    "info" : "IfStatement[44436-44868]:IfStatement[44436-44868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44472-44542]:Block[44472-44542]"
  }, {
    "left" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
    "right" : "report(t, n, INEXISTENT_ENUM_ELEMENT, propName);",
    "info" : "ExpressionStatement[44484-44532]:ExpressionStatement[44484-44532]"
  }, {
    "left" : "if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n))",
    "right" : "if (!objectType.isEmptyType() &&\n            reportMissingProperties && !isPropertyTest(n))",
    "info" : "IfStatement[44548-44868]:IfStatement[44548-44868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44640-44868]:Block[44640-44868]"
  }, {
    "left" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
    "right" : "if (!typeRegistry.canPropertyBeDefined(objectType, propName))",
    "info" : "IfStatement[44652-44858]:IfStatement[44652-44858]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44714-44858]:Block[44714-44858]"
  }, {
    "left" : "report(t, n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));",
    "right" : "report(t, n, INEXISTENT_PROPERTY, propName,\n                validator.getReadableJSTypeName(n.getFirstChild(), true));",
    "info" : "ExpressionStatement[44728-44846]:ExpressionStatement[44728-44846]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44888-45032]:Block[44888-45032]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45247-45254]:Modifier[45247-45254]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45255-45262]:PrimitiveType[45255-45262]"
  }, {
    "left" : "isPropertyTest",
    "right" : "isPropertyTest",
    "info" : "SimpleName[45263-45277]:SimpleName[45263-45277]"
  }, {
    "left" : "Node getProp",
    "right" : "Node getProp",
    "info" : "SingleVariableDeclaration[45278-45290]:SingleVariableDeclaration[45278-45290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45292-46010]:Block[45292-46010]"
  }, {
    "left" : "Node parent = getProp.getParent();",
    "right" : "Node parent = getProp.getParent();",
    "info" : "VariableDeclarationStatement[45298-45332]:VariableDeclarationStatement[45298-45332]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.CALL:\n        return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);\n\n      case Token.IF:\n      case Token.WHILE:\n      case Token.DO:\n      case Token.FOR:\n        return NodeUtil.getConditionExpression(parent) == getProp;\n\n      case Token.INSTANCEOF:\n      case Token.TYPEOF:\n        return true;\n\n      case Token.AND:\n      case Token.HOOK:\n        return parent.getFirstChild() == getProp;\n\n      case Token.NOT:\n        return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;\n    }",
    "info" : "SwitchStatement[45337-45988]:SwitchStatement[45337-45988]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[45371-45387]:SwitchCase[45371-45387]"
  }, {
    "left" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
    "right" : "return parent.getFirstChild() != getProp &&\n            compiler.getCodingConvention().isPropertyTestFunction(parent);",
    "info" : "ReturnStatement[45396-45514]:ReturnStatement[45396-45514]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[45522-45536]:SwitchCase[45522-45536]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[45543-45560]:SwitchCase[45543-45560]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[45567-45581]:SwitchCase[45567-45581]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[45588-45603]:SwitchCase[45588-45603]"
  }, {
    "left" : "return NodeUtil.getConditionExpression(parent) == getProp;",
    "right" : "return NodeUtil.getConditionExpression(parent) == getProp;",
    "info" : "ReturnStatement[45612-45670]:ReturnStatement[45612-45670]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[45678-45700]:SwitchCase[45678-45700]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[45707-45725]:SwitchCase[45707-45725]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[45734-45746]:ReturnStatement[45734-45746]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[45754-45769]:SwitchCase[45754-45769]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[45776-45792]:SwitchCase[45776-45792]"
  }, {
    "left" : "return parent.getFirstChild() == getProp;",
    "right" : "return parent.getFirstChild() == getProp;",
    "info" : "ReturnStatement[45801-45842]:ReturnStatement[45801-45842]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[45850-45865]:SwitchCase[45850-45865]"
  }, {
    "left" : "return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;",
    "right" : "return parent.getParent().getType() == Token.OR &&\n            parent.getParent().getFirstChild() == parent;",
    "info" : "ReturnStatement[45874-45982]:ReturnStatement[45874-45982]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45993-46006]:ReturnStatement[45993-46006]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46240-46247]:Modifier[46240-46247]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[46248-46252]:PrimitiveType[46248-46252]"
  }, {
    "left" : "visitGetElem",
    "right" : "visitGetElem",
    "info" : "SimpleName[46253-46265]:SimpleName[46253-46265]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[46266-46281]:SingleVariableDeclaration[46266-46281]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46283-46289]:SingleVariableDeclaration[46283-46289]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46291-46462]:Block[46291-46462]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[46297-46327]:VariableDeclarationStatement[46297-46327]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[46332-46362]:VariableDeclarationStatement[46332-46362]"
  }, {
    "left" : "validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));",
    "right" : "validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));",
    "info" : "ExpressionStatement[46367-46435]:ExpressionStatement[46367-46435]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[46440-46458]:ExpressionStatement[46440-46458]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[46688-46695]:Modifier[46688-46695]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[46696-46700]:PrimitiveType[46696-46700]"
  }, {
    "left" : "visitVar",
    "right" : "visitVar",
    "info" : "SimpleName[46701-46709]:SimpleName[46701-46709]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[46710-46725]:SingleVariableDeclaration[46710-46725]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[46727-46733]:SingleVariableDeclaration[46727-46733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46735-48024]:Block[46735-48024]"
  }, {
    "left" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
    "right" : "JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;",
    "info" : "VariableDeclarationStatement[46903-46965]:VariableDeclarationStatement[46903-46965]"
  }, {
    "left" : "for (Node name : n.children())",
    "right" : "for (Node name : n.children())",
    "info" : "EnhancedForStatement[46970-48020]:EnhancedForStatement[46970-48020]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47001-48020]:Block[47001-48020]"
  }, {
    "left" : "Node value = name.getFirstChild();",
    "right" : "Node value = name.getFirstChild();",
    "info" : "VariableDeclarationStatement[47009-47043]:VariableDeclarationStatement[47009-47043]"
  }, {
    "left" : "Var var = t.getScope().getVar(name.getString());",
    "right" : "Var var = t.getScope().getVar(name.getString());",
    "info" : "VariableDeclarationStatement[47120-47168]:VariableDeclarationStatement[47120-47168]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[47176-48014]:IfStatement[47176-48014]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47195-48014]:Block[47195-48014]"
  }, {
    "left" : "JSType valueType = getJSType(value);",
    "right" : "JSType valueType = getJSType(value);",
    "info" : "VariableDeclarationStatement[47205-47241]:VariableDeclarationStatement[47205-47241]"
  }, {
    "left" : "JSType nameType = var.getType();",
    "right" : "JSType nameType = var.getType();",
    "info" : "VariableDeclarationStatement[47250-47282]:VariableDeclarationStatement[47250-47282]"
  }, {
    "left" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
    "right" : "nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;",
    "info" : "ExpressionStatement[47291-47362]:ExpressionStatement[47291-47362]"
  }, {
    "left" : "JSDocInfo info = name.getJSDocInfo();",
    "right" : "JSDocInfo info = name.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[47372-47409]:VariableDeclarationStatement[47372-47409]"
  }, {
    "left" : "if (info == null)",
    "right" : "if (info == null)",
    "info" : "IfStatement[47418-47473]:IfStatement[47418-47473]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47436-47473]:Block[47436-47473]"
  }, {
    "left" : "info = varInfo;",
    "right" : "info = varInfo;",
    "info" : "ExpressionStatement[47448-47463]:ExpressionStatement[47448-47463]"
  }, {
    "left" : "if (info != null && info.hasEnumParameterType())",
    "right" : "if (info != null && info.hasEnumParameterType())",
    "info" : "IfStatement[47482-48006]:IfStatement[47482-48006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47531-47793]:Block[47531-47793]"
  }, {
    "left" : "checkEnumInitializer(\n              t, value,\n              info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));",
    "right" : "checkEnumInitializer(\n              t, value,\n              info.getEnumParameterType().evaluate(t.getScope(), typeRegistry));",
    "info" : "ExpressionStatement[47657-47783]:ExpressionStatement[47657-47783]"
  }, {
    "left" : "if (var.isTypeInferred())",
    "right" : "if (var.isTypeInferred())",
    "info" : "IfStatement[47799-48006]:IfStatement[47799-48006]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47825-47879]:Block[47825-47879]"
  }, {
    "left" : "ensureTyped(t, name, valueType);",
    "right" : "ensureTyped(t, name, valueType);",
    "info" : "ExpressionStatement[47837-47869]:ExpressionStatement[47837-47869]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47885-48006]:Block[47885-48006]"
  }, {
    "left" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
    "right" : "validator.expectCanAssignTo(\n              t, value, valueType, nameType, \"initializing variable\");",
    "info" : "ExpressionStatement[47897-47996]:ExpressionStatement[47897-47996]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[48064-48071]:Modifier[48064-48071]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[48072-48076]:PrimitiveType[48072-48076]"
  }, {
    "left" : "visitNew",
    "right" : "visitNew",
    "info" : "SimpleName[48077-48085]:SimpleName[48077-48085]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[48086-48101]:SingleVariableDeclaration[48086-48101]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[48103-48109]:SingleVariableDeclaration[48103-48109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48111-48927]:Block[48111-48927]"
  }, {
    "left" : "Node constructor = n.getFirstChild();",
    "right" : "Node constructor = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[48117-48154]:VariableDeclarationStatement[48117-48154]"
  }, {
    "left" : "FunctionType type = getFunctionType(constructor);",
    "right" : "FunctionType type = getFunctionType(constructor);",
    "info" : "VariableDeclarationStatement[48159-48208]:VariableDeclarationStatement[48159-48208]"
  }, {
    "left" : "if (type != null && type.isConstructor())",
    "right" : "if (type != null && type.isConstructor())",
    "info" : "IfStatement[48213-48923]:IfStatement[48213-48923]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48255-48349]:Block[48255-48349]"
  }, {
    "left" : "visitParameterList(t, n, type);",
    "right" : "visitParameterList(t, n, type);",
    "info" : "ExpressionStatement[48263-48294]:ExpressionStatement[48263-48294]"
  }, {
    "left" : "ensureTyped(t, n, type.getInstanceType());",
    "right" : "ensureTyped(t, n, type.getInstanceType());",
    "info" : "ExpressionStatement[48301-48343]:ExpressionStatement[48301-48343]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48355-48923]:Block[48355-48923]"
  }, {
    "left" : "if (constructor.getType() != Token.GETPROP)",
    "right" : "if (constructor.getType() != Token.GETPROP)",
    "info" : "IfStatement[48420-48892]:IfStatement[48420-48892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48464-48892]:Block[48464-48892]"
  }, {
    "left" : "Node line;",
    "right" : "Node line;",
    "info" : "VariableDeclarationStatement[48679-48689]:VariableDeclarationStatement[48679-48689]"
  }, {
    "left" : "if (constructor.getLineno() < 0 || constructor.getCharno() < 0)",
    "right" : "if (constructor.getLineno() < 0 || constructor.getCharno() < 0)",
    "info" : "IfStatement[48698-48840]:IfStatement[48698-48840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48762-48793]:Block[48762-48793]"
  }, {
    "left" : "line = n;",
    "right" : "line = n;",
    "info" : "ExpressionStatement[48774-48783]:ExpressionStatement[48774-48783]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48799-48840]:Block[48799-48840]"
  }, {
    "left" : "line = constructor;",
    "right" : "line = constructor;",
    "info" : "ExpressionStatement[48811-48830]:ExpressionStatement[48811-48830]"
  }, {
    "left" : "report(t, line, NOT_A_CONSTRUCTOR);",
    "right" : "report(t, line, NOT_A_CONSTRUCTOR);",
    "info" : "ExpressionStatement[48849-48884]:ExpressionStatement[48849-48884]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[48899-48917]:ExpressionStatement[48899-48917]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49452-49459]:Modifier[49452-49459]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49460-49464]:PrimitiveType[49460-49464]"
  }, {
    "left" : "checkInterfaceConflictProperties",
    "right" : "checkInterfaceConflictProperties",
    "info" : "SimpleName[49465-49497]:SimpleName[49465-49497]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[49498-49513]:SingleVariableDeclaration[49498-49513]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[49515-49521]:SingleVariableDeclaration[49515-49521]"
  }, {
    "left" : "String functionName",
    "right" : "String functionName",
    "info" : "SingleVariableDeclaration[49529-49548]:SingleVariableDeclaration[49529-49548]"
  }, {
    "left" : "HashMap<String, ObjectType> properties",
    "right" : "HashMap<String, ObjectType> properties",
    "info" : "SingleVariableDeclaration[49550-49588]:SingleVariableDeclaration[49550-49588]"
  }, {
    "left" : "HashMap<String, ObjectType> currentProperties",
    "right" : "HashMap<String, ObjectType> currentProperties",
    "info" : "SingleVariableDeclaration[49596-49641]:SingleVariableDeclaration[49596-49641]"
  }, {
    "left" : "ObjectType interfaceType",
    "right" : "ObjectType interfaceType",
    "info" : "SingleVariableDeclaration[49649-49673]:SingleVariableDeclaration[49649-49673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49675-50439]:Block[49675-50439]"
  }, {
    "left" : "Set<String> currentPropertyNames = interfaceType.getPropertyNames();",
    "right" : "Set<String> currentPropertyNames = interfaceType.getPropertyNames();",
    "info" : "VariableDeclarationStatement[49681-49749]:VariableDeclarationStatement[49681-49749]"
  }, {
    "left" : "for (String name : currentPropertyNames)",
    "right" : "for (String name : currentPropertyNames)",
    "info" : "EnhancedForStatement[49754-50248]:EnhancedForStatement[49754-50248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49795-50248]:Block[49795-50248]"
  }, {
    "left" : "ObjectType oType = properties.get(name);",
    "right" : "ObjectType oType = properties.get(name);",
    "info" : "VariableDeclarationStatement[49803-49843]:VariableDeclarationStatement[49803-49843]"
  }, {
    "left" : "if (oType != null)",
    "right" : "if (oType != null)",
    "info" : "IfStatement[49850-50192]:IfStatement[49850-50192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49869-50192]:Block[49869-50192]"
  }, {
    "left" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
    "right" : "if (!interfaceType.getPropertyType(name).isEquivalentTo(\n            oType.getPropertyType(name)))",
    "info" : "IfStatement[49879-50184]:IfStatement[49879-50184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49978-50184]:Block[49978-50184]"
  }, {
    "left" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
    "right" : "compiler.report(\n              t.makeError(n, INCOMPATIBLE_EXTENDED_PROPERTY_TYPE,\n                  functionName, name, oType.toString(),\n                  interfaceType.toString()));",
    "info" : "ExpressionStatement[49990-50174]:ExpressionStatement[49990-50174]"
  }, {
    "left" : "currentProperties.put(name, interfaceType);",
    "right" : "currentProperties.put(name, interfaceType);",
    "info" : "ExpressionStatement[50199-50242]:ExpressionStatement[50199-50242]"
  }, {
    "left" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
    "right" : "for (ObjectType iType : interfaceType.getCtorExtendedInterfaces())",
    "info" : "EnhancedForStatement[50253-50435]:EnhancedForStatement[50253-50435]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50320-50435]:Block[50320-50435]"
  }, {
    "left" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
    "right" : "checkInterfaceConflictProperties(t, n, functionName, properties,\n          currentProperties, iType);",
    "info" : "ExpressionStatement[50328-50429]:ExpressionStatement[50328-50429]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[50684-50691]:Modifier[50684-50691]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50692-50696]:PrimitiveType[50692-50696]"
  }, {
    "left" : "visitFunction",
    "right" : "visitFunction",
    "info" : "SimpleName[50697-50710]:SimpleName[50697-50710]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[50711-50726]:SingleVariableDeclaration[50711-50726]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[50728-50734]:SingleVariableDeclaration[50728-50734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50736-53508]:Block[50736-53508]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) n.getJSType();",
    "right" : "FunctionType functionType = (FunctionType) n.getJSType();",
    "info" : "VariableDeclarationStatement[50742-50799]:VariableDeclarationStatement[50742-50799]"
  }, {
    "left" : "String functionPrivateName = n.getFirstChild().getString();",
    "right" : "String functionPrivateName = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[50804-50863]:VariableDeclarationStatement[50804-50863]"
  }, {
    "left" : "if (functionType.isConstructor())",
    "right" : "if (functionType.isConstructor())",
    "info" : "IfStatement[50868-53504]:IfStatement[50868-53504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50902-52182]:Block[50902-52182]"
  }, {
    "left" : "FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();",
    "right" : "FunctionType baseConstructor = functionType.\n          getPrototype().getImplicitPrototype().getConstructor();",
    "info" : "VariableDeclarationStatement[50910-51020]:VariableDeclarationStatement[50910-51020]"
  }, {
    "left" : "if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isInterface() && functionType.isConstructor()))",
    "right" : "if (baseConstructor != null &&\n          baseConstructor != getNativeType(OBJECT_FUNCTION_TYPE) &&\n          (baseConstructor.isInterface() && functionType.isConstructor()))",
    "info" : "IfStatement[51027-52176]:IfStatement[51027-52176]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51201-51312]:Block[51201-51312]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
    "right" : "compiler.report(\n            t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
    "info" : "ExpressionStatement[51211-51304]:ExpressionStatement[51211-51304]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51318-52176]:Block[51318-52176]"
  }, {
    "left" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
    "right" : "for (JSType baseInterface : functionType.getImplementedInterfaces())",
    "info" : "EnhancedForStatement[51390-52072]:EnhancedForStatement[51390-52072]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51459-52072]:Block[51459-52072]"
  }, {
    "left" : "boolean badImplementedType = false;",
    "right" : "boolean badImplementedType = false;",
    "info" : "VariableDeclarationStatement[51471-51506]:VariableDeclarationStatement[51471-51506]"
  }, {
    "left" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
    "right" : "ObjectType baseInterfaceObj = ObjectType.cast(baseInterface);",
    "info" : "VariableDeclarationStatement[51517-51578]:VariableDeclarationStatement[51517-51578]"
  }, {
    "left" : "if (baseInterfaceObj != null)",
    "right" : "if (baseInterfaceObj != null)",
    "info" : "IfStatement[51589-51945]:IfStatement[51589-51945]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51619-51887]:Block[51619-51887]"
  }, {
    "left" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
    "right" : "FunctionType interfaceConstructor =\n              baseInterfaceObj.getConstructor();",
    "info" : "VariableDeclarationStatement[51633-51717]:VariableDeclarationStatement[51633-51717]"
  }, {
    "left" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
    "right" : "if (interfaceConstructor != null &&\n                !interfaceConstructor.isInterface())",
    "info" : "IfStatement[51730-51875]:IfStatement[51730-51875]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51819-51875]:Block[51819-51875]"
  }, {
    "left" : "badImplementedType = true;",
    "right" : "badImplementedType = true;",
    "info" : "ExpressionStatement[51835-51861]:ExpressionStatement[51835-51861]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51893-51945]:Block[51893-51945]"
  }, {
    "left" : "badImplementedType = true;",
    "right" : "badImplementedType = true;",
    "info" : "ExpressionStatement[51907-51933]:ExpressionStatement[51907-51933]"
  }, {
    "left" : "if (badImplementedType)",
    "right" : "if (badImplementedType)",
    "info" : "IfStatement[51956-52062]:IfStatement[51956-52062]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51980-52062]:Block[51980-52062]"
  }, {
    "left" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
    "right" : "report(t, n, BAD_IMPLEMENTED_TYPE, functionPrivateName);",
    "info" : "ExpressionStatement[51994-52050]:ExpressionStatement[51994-52050]"
  }, {
    "left" : "validator.expectAllInterfaceProperties(t, n, functionType);",
    "right" : "validator.expectAllInterfaceProperties(t, n, functionType);",
    "info" : "ExpressionStatement[52109-52168]:ExpressionStatement[52109-52168]"
  }, {
    "left" : "if (functionType.isInterface())",
    "right" : "if (functionType.isInterface())",
    "info" : "IfStatement[52188-53504]:IfStatement[52188-53504]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52220-53504]:Block[52220-53504]"
  }, {
    "left" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
    "right" : "for (ObjectType extInterface : functionType.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[52275-52582]:EnhancedForStatement[52275-52582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52344-52582]:Block[52344-52582]"
  }, {
    "left" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
    "right" : "if (extInterface.getConstructor() != null\n            && !extInterface.getConstructor().isInterface())",
    "info" : "IfStatement[52354-52574]:IfStatement[52354-52574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52457-52574]:Block[52457-52574]"
  }, {
    "left" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
    "right" : "compiler.report(\n              t.makeError(n, CONFLICTING_EXTENDED_TYPE, functionPrivateName));",
    "info" : "ExpressionStatement[52469-52564]:ExpressionStatement[52469-52564]"
  }, {
    "left" : "if (functionType.hasImplementedInterfaces())",
    "right" : "if (functionType.hasImplementedInterfaces())",
    "info" : "IfStatement[52640-52798]:IfStatement[52640-52798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52685-52798]:Block[52685-52798]"
  }, {
    "left" : "compiler.report(t.makeError(n,\n            CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));",
    "right" : "compiler.report(t.makeError(n,\n            CONFLICTING_IMPLEMENTED_TYPE, functionPrivateName));",
    "info" : "ExpressionStatement[52695-52790]:ExpressionStatement[52695-52790]"
  }, {
    "left" : "if (functionType.getExtendedInterfacesCount() > 1)",
    "right" : "if (functionType.getExtendedInterfacesCount() > 1)",
    "info" : "IfStatement[52871-53498]:IfStatement[52871-53498]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52922-53498]:Block[52922-53498]"
  }, {
    "left" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
    "right" : "HashMap<String, ObjectType> properties\n            = new HashMap<String, ObjectType>();",
    "info" : "VariableDeclarationStatement[52994-53081]:VariableDeclarationStatement[52994-53081]"
  }, {
    "left" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
    "right" : "HashMap<String, ObjectType> currentProperties\n            = new HashMap<String, ObjectType>();",
    "info" : "VariableDeclarationStatement[53090-53184]:VariableDeclarationStatement[53090-53184]"
  }, {
    "left" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
    "right" : "for (ObjectType interfaceType : functionType.getExtendedInterfaces())",
    "info" : "EnhancedForStatement[53193-53490]:EnhancedForStatement[53193-53490]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53263-53490]:Block[53263-53490]"
  }, {
    "left" : "currentProperties.clear();",
    "right" : "currentProperties.clear();",
    "info" : "ExpressionStatement[53275-53301]:ExpressionStatement[53275-53301]"
  }, {
    "left" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
    "right" : "checkInterfaceConflictProperties(t, n, functionPrivateName,\n              properties, currentProperties, interfaceType);",
    "info" : "ExpressionStatement[53312-53432]:ExpressionStatement[53312-53432]"
  }, {
    "left" : "properties.putAll(currentProperties);",
    "right" : "properties.putAll(currentProperties);",
    "info" : "ExpressionStatement[53443-53480]:ExpressionStatement[53443-53480]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[53735-53742]:Modifier[53735-53742]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[53743-53747]:PrimitiveType[53743-53747]"
  }, {
    "left" : "visitCall",
    "right" : "visitCall",
    "info" : "SimpleName[53748-53757]:SimpleName[53748-53757]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[53758-53773]:SingleVariableDeclaration[53758-53773]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[53775-53781]:SingleVariableDeclaration[53775-53781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53783-55492]:Block[53783-55834]"
  }, {
    "left" : "Node child = n.getFirstChild();",
    "right" : "Node child = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[53789-53820]:VariableDeclarationStatement[53789-53820]"
  }, {
    "left" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
    "right" : "JSType childType = getJSType(child).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[53825-53892]:VariableDeclarationStatement[53825-53892]"
  }, {
    "left" : "if (!childType.canBeCalled())",
    "right" : "if (!childType.canBeCalled())",
    "info" : "IfStatement[53898-54030]:IfStatement[53898-54030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53928-54030]:Block[53928-54030]"
  }, {
    "left" : "report(t, n, NOT_CALLABLE, childType.toString());",
    "right" : "report(t, n, NOT_CALLABLE, childType.toString());",
    "info" : "ExpressionStatement[53936-53985]:ExpressionStatement[53936-53985]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[53992-54010]:ExpressionStatement[53992-54010]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[54017-54024]:ReturnStatement[54017-54024]"
  }, {
    "left" : "if (childType instanceof FunctionType)",
    "right" : "if (childType instanceof FunctionType)",
    "info" : "IfStatement[54161-55279]:IfStatement[54161-55621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54200-55241]:Block[54200-55583]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) childType;",
    "right" : "FunctionType functionType = (FunctionType) childType;",
    "info" : "VariableDeclarationStatement[54208-54261]:VariableDeclarationStatement[54208-54261]"
  }, {
    "left" : "boolean isExtern = false;",
    "right" : "boolean isExtern = false;",
    "info" : "VariableDeclarationStatement[54269-54294]:VariableDeclarationStatement[54269-54294]"
  }, {
    "left" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
    "right" : "JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[54301-54359]:VariableDeclarationStatement[54301-54359]"
  }, {
    "left" : "if(functionJSDocInfo != null)",
    "right" : "if(functionJSDocInfo != null)",
    "info" : "IfStatement[54366-54584]:IfStatement[54366-54584]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54396-54584]:Block[54396-54584]"
  }, {
    "left" : "String sourceName = functionJSDocInfo.getSourceName();",
    "right" : "String sourceName = functionJSDocInfo.getSourceName();",
    "info" : "VariableDeclarationStatement[54406-54460]:VariableDeclarationStatement[54406-54460]"
  }, {
    "left" : "CompilerInput functionSource = compiler.getInput(sourceName);",
    "right" : "CompilerInput functionSource = compiler.getInput(sourceName);",
    "info" : "VariableDeclarationStatement[54469-54530]:VariableDeclarationStatement[54469-54530]"
  }, {
    "left" : "isExtern = functionSource.isExtern();",
    "right" : "isExtern = functionSource.isExtern();",
    "info" : "ExpressionStatement[54539-54576]:ExpressionStatement[54539-54576]"
  }, {
    "left" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
    "right" : "if (functionType.isConstructor() &&\n          !functionType.isNativeObjectType() &&\n          (functionType.getReturnType().isUnknownType() ||\n           functionType.getReturnType().isVoidType() ||\n           !isExtern))",
    "info" : "IfStatement[54737-55038]:IfStatement[54737-55038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54959-55038]:Block[54959-55038]"
  }, {
    "left" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
    "right" : "report(t, n, CONSTRUCTOR_NOT_CALLABLE, childType.toString());",
    "info" : "ExpressionStatement[54969-55030]:ExpressionStatement[54969-55030]"
  }, {
    "left" : "visitParameterList(t, n, functionType);",
    "right" : "visitParameterList(t, n, functionType);",
    "info" : "ExpressionStatement[55141-55180]:ExpressionStatement[55483-55522]"
  }, {
    "left" : "ensureTyped(t, n, functionType.getReturnType());",
    "right" : "ensureTyped(t, n, functionType.getReturnType());",
    "info" : "ExpressionStatement[55187-55235]:ExpressionStatement[55529-55577]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55247-55279]:Block[55589-55621]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[55255-55273]:ExpressionStatement[55597-55615]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[55560-55567]:Modifier[55902-55909]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[55568-55572]:PrimitiveType[55910-55914]"
  }, {
    "left" : "visitParameterList",
    "right" : "visitParameterList",
    "info" : "SimpleName[55573-55591]:SimpleName[55915-55933]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[55592-55607]:SingleVariableDeclaration[55934-55949]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[55609-55618]:SingleVariableDeclaration[55951-55960]"
  }, {
    "left" : "FunctionType functionType",
    "right" : "FunctionType functionType",
    "info" : "SingleVariableDeclaration[55626-55651]:SingleVariableDeclaration[55968-55993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55653-56946]:Block[55995-57288]"
  }, {
    "left" : "Iterator<Node> arguments = call.children().iterator();",
    "right" : "Iterator<Node> arguments = call.children().iterator();",
    "info" : "VariableDeclarationStatement[55659-55713]:VariableDeclarationStatement[56001-56055]"
  }, {
    "left" : "arguments.next();",
    "right" : "arguments.next();",
    "info" : "ExpressionStatement[55718-55735]:ExpressionStatement[56060-56077]"
  }, {
    "left" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
    "right" : "Iterator<Node> parameters = functionType.getParameters().iterator();",
    "info" : "VariableDeclarationStatement[55767-55835]:VariableDeclarationStatement[56109-56177]"
  }, {
    "left" : "int ordinal = 0;",
    "right" : "int ordinal = 0;",
    "info" : "VariableDeclarationStatement[55840-55856]:VariableDeclarationStatement[56182-56198]"
  }, {
    "left" : "Node parameter = null;",
    "right" : "Node parameter = null;",
    "info" : "VariableDeclarationStatement[55861-55883]:VariableDeclarationStatement[56203-56225]"
  }, {
    "left" : "Node argument = null;",
    "right" : "Node argument = null;",
    "info" : "VariableDeclarationStatement[55888-55909]:VariableDeclarationStatement[56230-56251]"
  }, {
    "left" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
    "right" : "while (arguments.hasNext() &&\n           (parameters.hasNext() ||\n            parameter != null && parameter.isVarArgs()))",
    "info" : "WhileStatement[55914-56443]:WhileStatement[56256-56785]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56037-56443]:Block[56379-56785]"
  }, {
    "left" : "if (parameters.hasNext())",
    "right" : "if (parameters.hasNext())",
    "info" : "IfStatement[56181-56255]:IfStatement[56523-56597]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56207-56255]:Block[56549-56597]"
  }, {
    "left" : "parameter = parameters.next();",
    "right" : "parameter = parameters.next();",
    "info" : "ExpressionStatement[56217-56247]:ExpressionStatement[56559-56589]"
  }, {
    "left" : "argument = arguments.next();",
    "right" : "argument = arguments.next();",
    "info" : "ExpressionStatement[56262-56290]:ExpressionStatement[56604-56632]"
  }, {
    "left" : "ordinal++;",
    "right" : "ordinal++;",
    "info" : "ExpressionStatement[56297-56307]:ExpressionStatement[56639-56649]"
  }, {
    "left" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
    "right" : "validator.expectArgumentMatchesParameter(t, argument,\n          getJSType(argument), getJSType(parameter), call, ordinal);",
    "info" : "ExpressionStatement[56315-56437]:ExpressionStatement[56657-56779]"
  }, {
    "left" : "int numArgs = call.getChildCount() - 1;",
    "right" : "int numArgs = call.getChildCount() - 1;",
    "info" : "VariableDeclarationStatement[56449-56488]:VariableDeclarationStatement[56791-56830]"
  }, {
    "left" : "int minArgs = functionType.getMinArguments();",
    "right" : "int minArgs = functionType.getMinArguments();",
    "info" : "VariableDeclarationStatement[56493-56538]:VariableDeclarationStatement[56835-56880]"
  }, {
    "left" : "int maxArgs = functionType.getMaxArguments();",
    "right" : "int maxArgs = functionType.getMaxArguments();",
    "info" : "VariableDeclarationStatement[56543-56588]:VariableDeclarationStatement[56885-56930]"
  }, {
    "left" : "if (minArgs > numArgs || maxArgs < numArgs)",
    "right" : "if (minArgs > numArgs || maxArgs < numArgs)",
    "info" : "IfStatement[56593-56942]:IfStatement[56935-57284]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56637-56942]:Block[56979-57284]"
  }, {
    "left" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
    "right" : "report(t, call, WRONG_ARGUMENT_COUNT,\n              validator.getReadableJSTypeName(call.getFirstChild(), false),\n              String.valueOf(numArgs), String.valueOf(minArgs),\n              maxArgs != Integer.MAX_VALUE ?\n              \" and no more than \" + maxArgs + \" argument(s)\" : \"\");",
    "info" : "ExpressionStatement[56645-56936]:ExpressionStatement[56987-57278]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[57175-57182]:Modifier[57517-57524]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[57183-57187]:PrimitiveType[57525-57529]"
  }, {
    "left" : "visitReturn",
    "right" : "visitReturn",
    "info" : "SimpleName[57188-57199]:SimpleName[57530-57541]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[57200-57215]:SingleVariableDeclaration[57542-57557]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[57217-57223]:SingleVariableDeclaration[57559-57565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57225-58245]:Block[57567-58587]"
  }, {
    "left" : "Node function = t.getEnclosingFunction();",
    "right" : "Node function = t.getEnclosingFunction();",
    "info" : "VariableDeclarationStatement[57231-57272]:VariableDeclarationStatement[57573-57614]"
  }, {
    "left" : "if (function == null)",
    "right" : "if (function == null)",
    "info" : "IfStatement[57372-57415]:IfStatement[57714-57757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57394-57415]:Block[57736-57757]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[57402-57409]:ReturnStatement[57744-57751]"
  }, {
    "left" : "JSType jsType = getJSType(function);",
    "right" : "JSType jsType = getJSType(function);",
    "info" : "VariableDeclarationStatement[57420-57456]:VariableDeclarationStatement[57762-57798]"
  }, {
    "left" : "if (jsType instanceof FunctionType)",
    "right" : "if (jsType instanceof FunctionType)",
    "info" : "IfStatement[57462-58241]:IfStatement[57804-58583]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57498-58241]:Block[57840-58583]"
  }, {
    "left" : "FunctionType functionType = (FunctionType) jsType;",
    "right" : "FunctionType functionType = (FunctionType) jsType;",
    "info" : "VariableDeclarationStatement[57506-57556]:VariableDeclarationStatement[57848-57898]"
  }, {
    "left" : "JSType returnType = functionType.getReturnType();",
    "right" : "JSType returnType = functionType.getReturnType();",
    "info" : "VariableDeclarationStatement[57564-57613]:VariableDeclarationStatement[57906-57955]"
  }, {
    "left" : "if (returnType == null)",
    "right" : "if (returnType == null)",
    "info" : "IfStatement[57721-57801]:IfStatement[58063-58143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57745-57801]:Block[58087-58143]"
  }, {
    "left" : "returnType = getNativeType(VOID_TYPE);",
    "right" : "returnType = getNativeType(VOID_TYPE);",
    "info" : "ExpressionStatement[57755-57793]:ExpressionStatement[58097-58135]"
  }, {
    "left" : "Node valueNode = n.getFirstChild();",
    "right" : "Node valueNode = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[57853-57888]:VariableDeclarationStatement[58195-58230]"
  }, {
    "left" : "JSType actualReturnType;",
    "right" : "JSType actualReturnType;",
    "info" : "VariableDeclarationStatement[57895-57919]:VariableDeclarationStatement[58237-58261]"
  }, {
    "left" : "if (valueNode == null)",
    "right" : "if (valueNode == null)",
    "info" : "IfStatement[57926-58098]:IfStatement[58268-58440]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57949-58034]:Block[58291-58376]"
  }, {
    "left" : "actualReturnType = getNativeType(VOID_TYPE);",
    "right" : "actualReturnType = getNativeType(VOID_TYPE);",
    "info" : "ExpressionStatement[57959-58003]:ExpressionStatement[58301-58345]"
  }, {
    "left" : "valueNode = n;",
    "right" : "valueNode = n;",
    "info" : "ExpressionStatement[58012-58026]:ExpressionStatement[58354-58368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58040-58098]:Block[58382-58440]"
  }, {
    "left" : "actualReturnType = getJSType(valueNode);",
    "right" : "actualReturnType = getJSType(valueNode);",
    "info" : "ExpressionStatement[58050-58090]:ExpressionStatement[58392-58432]"
  }, {
    "left" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
    "right" : "validator.expectCanAssignTo(t, valueNode, actualReturnType, returnType,\n          \"inconsistent return type\");",
    "info" : "ExpressionStatement[58125-58235]:ExpressionStatement[58467-58577]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[58640-58647]:Modifier[58982-58989]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[58648-58652]:PrimitiveType[58990-58994]"
  }, {
    "left" : "visitBinaryOperator",
    "right" : "visitBinaryOperator",
    "info" : "SimpleName[58653-58672]:SimpleName[58995-59014]"
  }, {
    "left" : "int op",
    "right" : "int op",
    "info" : "SingleVariableDeclaration[58673-58679]:SingleVariableDeclaration[59015-59021]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[58681-58696]:SingleVariableDeclaration[59023-59038]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[58698-58704]:SingleVariableDeclaration[59040-59046]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58706-60328]:Block[59048-60670]"
  }, {
    "left" : "Node left = n.getFirstChild();",
    "right" : "Node left = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[58712-58742]:VariableDeclarationStatement[59054-59084]"
  }, {
    "left" : "JSType leftType = getJSType(left);",
    "right" : "JSType leftType = getJSType(left);",
    "info" : "VariableDeclarationStatement[58747-58781]:VariableDeclarationStatement[59089-59123]"
  }, {
    "left" : "Node right = n.getLastChild();",
    "right" : "Node right = n.getLastChild();",
    "info" : "VariableDeclarationStatement[58786-58816]:VariableDeclarationStatement[59128-59158]"
  }, {
    "left" : "JSType rightType = getJSType(right);",
    "right" : "JSType rightType = getJSType(right);",
    "info" : "VariableDeclarationStatement[58821-58857]:VariableDeclarationStatement[59163-59199]"
  }, {
    "left" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }",
    "right" : "switch (op) {\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.LSH:\n      case Token.RSH:\n      case Token.ASSIGN_URSH:\n      case Token.URSH:\n        if (!leftType.matchesInt32Context()) {\n          report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());\n        }\n        if (!rightType.matchesUint32Context()) {\n          report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());\n        }\n        break;\n\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_SUB:\n      case Token.DIV:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.SUB:\n        validator.expectNumber(t, left, leftType, \"left operand\");\n        validator.expectNumber(t, right, rightType, \"right operand\");\n        break;\n\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITOR:\n      case Token.BITAND:\n      case Token.BITXOR:\n      case Token.BITOR:\n        validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");\n        validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");\n        break;\n\n      case Token.ASSIGN_ADD:\n      case Token.ADD:\n        break;\n\n      default:\n        report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));\n    }",
    "info" : "SwitchStatement[58862-60301]:SwitchStatement[59204-60643]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[58882-58904]:SwitchCase[59224-59246]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[58911-58933]:SwitchCase[59253-59275]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[58940-58955]:SwitchCase[59282-59297]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[58962-58977]:SwitchCase[59304-59319]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[58984-59007]:SwitchCase[59326-59349]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[59014-59030]:SwitchCase[59356-59372]"
  }, {
    "left" : "if (!leftType.matchesInt32Context())",
    "right" : "if (!leftType.matchesInt32Context())",
    "info" : "IfStatement[59039-59200]:IfStatement[59381-59542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59076-59200]:Block[59418-59542]"
  }, {
    "left" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
    "right" : "report(t, left, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), leftType.toString());",
    "info" : "ExpressionStatement[59088-59190]:ExpressionStatement[59430-59532]"
  }, {
    "left" : "if (!rightType.matchesUint32Context())",
    "right" : "if (!rightType.matchesUint32Context())",
    "info" : "IfStatement[59209-59374]:IfStatement[59551-59716]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59248-59374]:Block[59590-59716]"
  }, {
    "left" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
    "right" : "report(t, right, BIT_OPERATION,\n                   NodeUtil.opToStr(n.getType()), rightType.toString());",
    "info" : "ExpressionStatement[59260-59364]:ExpressionStatement[59602-59706]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59383-59389]:BreakStatement[59725-59731]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[59397-59419]:SwitchCase[59739-59761]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[59426-59448]:SwitchCase[59768-59790]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[59455-59477]:SwitchCase[59797-59819]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[59484-59506]:SwitchCase[59826-59848]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[59513-59528]:SwitchCase[59855-59870]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[59535-59550]:SwitchCase[59877-59892]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[59557-59572]:SwitchCase[59899-59914]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[59579-59594]:SwitchCase[59921-59936]"
  }, {
    "left" : "validator.expectNumber(t, left, leftType, \"left operand\");",
    "right" : "validator.expectNumber(t, left, leftType, \"left operand\");",
    "info" : "ExpressionStatement[59603-59661]:ExpressionStatement[59945-60003]"
  }, {
    "left" : "validator.expectNumber(t, right, rightType, \"right operand\");",
    "right" : "validator.expectNumber(t, right, rightType, \"right operand\");",
    "info" : "ExpressionStatement[59670-59731]:ExpressionStatement[60012-60073]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[59740-59746]:BreakStatement[60082-60088]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[59754-59779]:SwitchCase[60096-60121]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[59786-59811]:SwitchCase[60128-60153]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[59818-59842]:SwitchCase[60160-60184]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[59849-59867]:SwitchCase[60191-60209]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[59874-59892]:SwitchCase[60216-60234]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[59899-59916]:SwitchCase[60241-60258]"
  }, {
    "left" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
    "right" : "validator.expectBitwiseable(t, left, leftType,\n            \"bad left operand to bitwise operator\");",
    "info" : "ExpressionStatement[59925-60024]:ExpressionStatement[60267-60366]"
  }, {
    "left" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
    "right" : "validator.expectBitwiseable(t, right, rightType,\n            \"bad right operand to bitwise operator\");",
    "info" : "ExpressionStatement[60033-60135]:ExpressionStatement[60375-60477]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60144-60150]:BreakStatement[60486-60492]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[60158-60180]:SwitchCase[60500-60522]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[60187-60202]:SwitchCase[60529-60544]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[60211-60217]:BreakStatement[60553-60559]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[60225-60233]:SwitchCase[60567-60575]"
  }, {
    "left" : "report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));",
    "right" : "report(t, n, UNEXPECTED_TOKEN, Node.tokenToName(op));",
    "info" : "ExpressionStatement[60242-60295]:ExpressionStatement[60584-60637]"
  }, {
    "left" : "ensureTyped(t, n);",
    "right" : "ensureTyped(t, n);",
    "info" : "ExpressionStatement[60306-60324]:ExpressionStatement[60648-60666]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[60995-61002]:Modifier[61337-61344]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[61003-61007]:PrimitiveType[61345-61349]"
  }, {
    "left" : "checkEnumInitializer",
    "right" : "checkEnumInitializer",
    "info" : "SimpleName[61008-61028]:SimpleName[61350-61370]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[61036-61051]:SingleVariableDeclaration[61378-61393]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[61053-61063]:SingleVariableDeclaration[61395-61405]"
  }, {
    "left" : "JSType primitiveType",
    "right" : "JSType primitiveType",
    "info" : "SingleVariableDeclaration[61065-61085]:SingleVariableDeclaration[61407-61427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61087-62283]:Block[61429-62625]"
  }, {
    "left" : "if (value.getType() == Token.OBJECTLIT)",
    "right" : "if (value.getType() == Token.OBJECTLIT)",
    "info" : "IfStatement[61093-62279]:IfStatement[61435-62621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61133-61515]:Block[61475-61857]"
  }, {
    "left" : "for (Node key = value.getFirstChild();\n           key != null; key = key.getNext())",
    "right" : "for (Node key = value.getFirstChild();\n           key != null; key = key.getNext())",
    "info" : "ForStatement[61141-61509]:ForStatement[61483-61851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61225-61509]:Block[61567-61851]"
  }, {
    "left" : "Node propValue = key.getFirstChild();",
    "right" : "Node propValue = key.getFirstChild();",
    "info" : "VariableDeclarationStatement[61235-61272]:VariableDeclarationStatement[61577-61614]"
  }, {
    "left" : "validator.expectCanAssignTo(\n            t, propValue, getJSType(propValue), primitiveType,\n            \"element type must match enum's type\");",
    "right" : "validator.expectCanAssignTo(\n            t, propValue, getJSType(propValue), primitiveType,\n            \"element type must match enum's type\");",
    "info" : "ExpressionStatement[61358-61501]:ExpressionStatement[61700-61843]"
  }, {
    "left" : "if (value.getJSType() instanceof EnumType)",
    "right" : "if (value.getJSType() instanceof EnumType)",
    "info" : "IfStatement[61521-62279]:IfStatement[61863-62621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61564-62204]:Block[61906-62546]"
  }, {
    "left" : "EnumType valueEnumType = (EnumType) value.getJSType();",
    "right" : "EnumType valueEnumType = (EnumType) value.getJSType();",
    "info" : "VariableDeclarationStatement[61915-61969]:VariableDeclarationStatement[62257-62311]"
  }, {
    "left" : "JSType valueEnumPrimitiveType =\n          valueEnumType.getElementsType().getPrimitiveType();",
    "right" : "JSType valueEnumPrimitiveType =\n          valueEnumType.getElementsType().getPrimitiveType();",
    "info" : "VariableDeclarationStatement[61976-62069]:VariableDeclarationStatement[62318-62411]"
  }, {
    "left" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n          primitiveType, \"incompatible enum element types\");",
    "right" : "validator.expectCanAssignTo(t, value, valueEnumPrimitiveType,\n          primitiveType, \"incompatible enum element types\");",
    "info" : "ExpressionStatement[62076-62198]:ExpressionStatement[62418-62540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62210-62279]:Block[62552-62621]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62552-62559]:Modifier[62894-62901]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[62560-62566]:Modifier[62902-62908]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[62567-62574]:PrimitiveType[62909-62916]"
  }, {
    "left" : "isReference",
    "right" : "isReference",
    "info" : "SimpleName[62575-62586]:SimpleName[62917-62928]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[62587-62593]:SingleVariableDeclaration[62929-62935]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62595-62768]:Block[62937-63110]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.NAME:\n        return true;\n\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.NAME:\n        return true;\n\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[62601-62763]:SwitchStatement[62943-63105]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[62630-62649]:SwitchCase[62972-62991]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[62656-62675]:SwitchCase[62998-63017]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[62682-62698]:SwitchCase[63024-63040]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[62707-62719]:ReturnStatement[63049-63061]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[62727-62735]:SwitchCase[63069-63077]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[62744-62757]:ReturnStatement[63086-63099]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62878-62885]:Modifier[63220-63227]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[62886-62892]:SimpleType[63228-63234]"
  }, {
    "left" : "getJSType",
    "right" : "getJSType",
    "info" : "SimpleName[62893-62902]:SimpleName[63235-63244]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[62903-62909]:SingleVariableDeclaration[63245-63251]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62911-63339]:Block[63253-63681]"
  }, {
    "left" : "JSType jsType = n.getJSType();",
    "right" : "JSType jsType = n.getJSType();",
    "info" : "VariableDeclarationStatement[62917-62947]:VariableDeclarationStatement[63259-63289]"
  }, {
    "left" : "if (jsType == null)",
    "right" : "if (jsType == null)",
    "info" : "IfStatement[62952-63335]:IfStatement[63294-63677]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62972-63301]:Block[63314-63643]"
  }, {
    "left" : "return getNativeType(UNKNOWN_TYPE);",
    "right" : "return getNativeType(UNKNOWN_TYPE);",
    "info" : "ReturnStatement[63260-63295]:ReturnStatement[63602-63637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63307-63335]:Block[63649-63677]"
  }, {
    "left" : "return jsType;",
    "right" : "return jsType;",
    "info" : "ReturnStatement[63315-63329]:ReturnStatement[63657-63671]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[63445-63452]:Modifier[63787-63794]"
  }, {
    "left" : "FunctionType",
    "right" : "FunctionType",
    "info" : "SimpleType[63453-63465]:SimpleType[63795-63807]"
  }, {
    "left" : "getFunctionType",
    "right" : "getFunctionType",
    "info" : "SimpleName[63466-63481]:SimpleName[63808-63823]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[63482-63488]:SingleVariableDeclaration[63824-63830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63490-63780]:Block[63832-64122]"
  }, {
    "left" : "JSType type = getJSType(n).restrictByNotNullOrUndefined();",
    "right" : "JSType type = getJSType(n).restrictByNotNullOrUndefined();",
    "info" : "VariableDeclarationStatement[63496-63554]:VariableDeclarationStatement[63838-63896]"
  }, {
    "left" : "if (type.isUnknownType())",
    "right" : "if (type.isUnknownType())",
    "info" : "IfStatement[63559-63776]:IfStatement[63901-64118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63585-63663]:Block[63927-64005]"
  }, {
    "left" : "return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);",
    "right" : "return typeRegistry.getNativeFunctionType(U2U_CONSTRUCTOR_TYPE);",
    "info" : "ReturnStatement[63593-63657]:ReturnStatement[63935-63999]"
  }, {
    "left" : "if (type instanceof FunctionType)",
    "right" : "if (type instanceof FunctionType)",
    "info" : "IfStatement[63669-63776]:IfStatement[64011-64118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63703-63744]:Block[64045-64086]"
  }, {
    "left" : "return (FunctionType) type;",
    "right" : "return (FunctionType) type;",
    "info" : "ReturnStatement[63711-63738]:ReturnStatement[64053-64080]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63750-63776]:Block[64092-64118]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[63758-63770]:ReturnStatement[64100-64112]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[64219-64226]:Modifier[64561-64568]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[64227-64231]:PrimitiveType[64569-64573]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[64232-64243]:SimpleName[64574-64585]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[64244-64259]:SingleVariableDeclaration[64586-64601]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[64261-64267]:SingleVariableDeclaration[64603-64609]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64269-64326]:Block[64611-64668]"
  }, {
    "left" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
    "right" : "ensureTyped(t, n, getNativeType(UNKNOWN_TYPE));",
    "info" : "ExpressionStatement[64275-64322]:ExpressionStatement[64617-64664]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[64330-64337]:Modifier[64672-64679]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[64338-64342]:PrimitiveType[64680-64684]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[64343-64354]:SimpleName[64685-64696]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[64355-64370]:SingleVariableDeclaration[64697-64712]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[64372-64378]:SingleVariableDeclaration[64714-64720]"
  }, {
    "left" : "JSTypeNative type",
    "right" : "JSTypeNative type",
    "info" : "SingleVariableDeclaration[64380-64397]:SingleVariableDeclaration[64722-64739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64399-64448]:Block[64741-64790]"
  }, {
    "left" : "ensureTyped(t, n, getNativeType(type));",
    "right" : "ensureTyped(t, n, getNativeType(type));",
    "info" : "ExpressionStatement[64405-64444]:ExpressionStatement[64747-64786]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[65264-65271]:Modifier[65606-65613]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[65272-65276]:PrimitiveType[65614-65618]"
  }, {
    "left" : "ensureTyped",
    "right" : "ensureTyped",
    "info" : "SimpleName[65277-65288]:SimpleName[65619-65630]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[65289-65304]:SingleVariableDeclaration[65631-65646]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[65306-65312]:SingleVariableDeclaration[65648-65654]"
  }, {
    "left" : "JSType type",
    "right" : "JSType type",
    "info" : "SingleVariableDeclaration[65314-65325]:SingleVariableDeclaration[65656-65667]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65327-66118]:Block[65669-66460]"
  }, {
    "left" : "Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());",
    "right" : "Preconditions.checkState(n.getType() != Token.FUNCTION ||\n            type instanceof FunctionType ||\n            type.isUnknownType());",
    "info" : "ExpressionStatement[65391-65527]:ExpressionStatement[65733-65869]"
  }, {
    "left" : "JSDocInfo info = n.getJSDocInfo();",
    "right" : "JSDocInfo info = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[65532-65566]:VariableDeclarationStatement[65874-65908]"
  }, {
    "left" : "if (info != null)",
    "right" : "if (info != null)",
    "info" : "IfStatement[65571-66049]:IfStatement[65913-66391]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65589-66049]:Block[65931-66391]"
  }, {
    "left" : "if (info.hasType())",
    "right" : "if (info.hasType())",
    "info" : "IfStatement[65597-65785]:IfStatement[65939-66127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65617-65785]:Block[65959-66127]"
  }, {
    "left" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
    "right" : "JSType infoType = info.getType().evaluate(t.getScope(), typeRegistry);",
    "info" : "VariableDeclarationStatement[65627-65697]:VariableDeclarationStatement[65969-66039]"
  }, {
    "left" : "validator.expectCanCast(t, n, infoType, type);",
    "right" : "validator.expectCanCast(t, n, infoType, type);",
    "info" : "ExpressionStatement[65706-65752]:ExpressionStatement[66048-66094]"
  }, {
    "left" : "type = infoType;",
    "right" : "type = infoType;",
    "info" : "ExpressionStatement[65761-65777]:ExpressionStatement[66103-66119]"
  }, {
    "left" : "if (info.isImplicitCast() && !inExterns)",
    "right" : "if (info.isImplicitCast() && !inExterns)",
    "info" : "IfStatement[65793-66043]:IfStatement[66135-66385]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65834-66043]:Block[66176-66385]"
  }, {
    "left" : "String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";",
    "right" : "String propName = n.getType() == Token.GETPROP ?\n            n.getLastChild().getString() : \"(missing)\";",
    "info" : "VariableDeclarationStatement[65844-65948]:VariableDeclarationStatement[66186-66290]"
  }, {
    "left" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
    "right" : "compiler.report(\n            t.makeError(n, ILLEGAL_IMPLICIT_CAST, propName));",
    "info" : "ExpressionStatement[65957-66035]:ExpressionStatement[66299-66377]"
  }, {
    "left" : "if (n.getJSType() == null)",
    "right" : "if (n.getJSType() == null)",
    "info" : "IfStatement[66055-66114]:IfStatement[66397-66456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66082-66114]:Block[66424-66456]"
  }, {
    "left" : "n.setJSType(type);",
    "right" : "n.setJSType(type);",
    "info" : "ExpressionStatement[66090-66108]:ExpressionStatement[66432-66450]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[66242-66248]:PrimitiveType[66584-66590]"
  }, {
    "left" : "getTypedPercent",
    "right" : "getTypedPercent",
    "info" : "SimpleName[66249-66264]:SimpleName[66591-66606]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66267-66429]:Block[66609-66771]"
  }, {
    "left" : "int total = nullCount + unknownCount + typedCount;",
    "right" : "int total = nullCount + unknownCount + typedCount;",
    "info" : "VariableDeclarationStatement[66273-66323]:VariableDeclarationStatement[66615-66665]"
  }, {
    "left" : "if (total == 0)",
    "right" : "if (total == 0)",
    "info" : "IfStatement[66328-66425]:IfStatement[66670-66767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66344-66369]:Block[66686-66711]"
  }, {
    "left" : "return 0.0;",
    "right" : "return 0.0;",
    "info" : "ReturnStatement[66352-66363]:ReturnStatement[66694-66705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66375-66425]:Block[66717-66767]"
  }, {
    "left" : "return (100.0 * typedCount) / total;",
    "right" : "return (100.0 * typedCount) / total;",
    "info" : "ReturnStatement[66383-66419]:ReturnStatement[66725-66761]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[66433-66440]:Modifier[66775-66782]"
  }, {
    "left" : "JSType",
    "right" : "JSType",
    "info" : "SimpleType[66441-66447]:SimpleType[66783-66789]"
  }, {
    "left" : "getNativeType",
    "right" : "getNativeType",
    "info" : "SimpleName[66448-66461]:SimpleName[66790-66803]"
  }, {
    "left" : "JSTypeNative typeId",
    "right" : "JSTypeNative typeId",
    "info" : "SingleVariableDeclaration[66462-66481]:SingleVariableDeclaration[66804-66823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66483-66535]:Block[66825-66877]"
  }, {
    "left" : "return typeRegistry.getNativeType(typeId);",
    "right" : "return typeRegistry.getNativeType(typeId);",
    "info" : "ReturnStatement[66489-66531]:ReturnStatement[66831-66873]"
  } ]
}