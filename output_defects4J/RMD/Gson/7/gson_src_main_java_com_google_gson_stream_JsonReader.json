{
  "matchedElements" : [
 {
    "left" : "class : JsonReader",
    "right" : "class : JsonReader",
    "info" : "TypeDeclaration[852-50939]:TypeDeclaration[852-51189]"
  }, {
    "left" : "NON_EXECUTE_PREFIX",
    "right" : "NON_EXECUTE_PREFIX",
    "info" : "FieldDeclaration[7245-7374]:FieldDeclaration[7245-7374]"
  }, {
    "left" : "MIN_INCOMPLETE_INTEGER",
    "right" : "MIN_INCOMPLETE_INTEGER",
    "info" : "FieldDeclaration[7377-7448]:FieldDeclaration[7377-7448]"
  }, {
    "left" : "PEEKED_NONE",
    "right" : "PEEKED_NONE",
    "info" : "FieldDeclaration[7452-7493]:FieldDeclaration[7452-7493]"
  }, {
    "left" : "PEEKED_BEGIN_OBJECT",
    "right" : "PEEKED_BEGIN_OBJECT",
    "info" : "FieldDeclaration[7496-7545]:FieldDeclaration[7496-7545]"
  }, {
    "left" : "PEEKED_END_OBJECT",
    "right" : "PEEKED_END_OBJECT",
    "info" : "FieldDeclaration[7548-7595]:FieldDeclaration[7548-7595]"
  }, {
    "left" : "PEEKED_BEGIN_ARRAY",
    "right" : "PEEKED_BEGIN_ARRAY",
    "info" : "FieldDeclaration[7598-7646]:FieldDeclaration[7598-7646]"
  }, {
    "left" : "PEEKED_END_ARRAY",
    "right" : "PEEKED_END_ARRAY",
    "info" : "FieldDeclaration[7649-7695]:FieldDeclaration[7649-7695]"
  }, {
    "left" : "PEEKED_TRUE",
    "right" : "PEEKED_TRUE",
    "info" : "FieldDeclaration[7698-7739]:FieldDeclaration[7698-7739]"
  }, {
    "left" : "PEEKED_FALSE",
    "right" : "PEEKED_FALSE",
    "info" : "FieldDeclaration[7742-7784]:FieldDeclaration[7742-7784]"
  }, {
    "left" : "PEEKED_NULL",
    "right" : "PEEKED_NULL",
    "info" : "FieldDeclaration[7787-7828]:FieldDeclaration[7787-7828]"
  }, {
    "left" : "PEEKED_SINGLE_QUOTED",
    "right" : "PEEKED_SINGLE_QUOTED",
    "info" : "FieldDeclaration[7831-7881]:FieldDeclaration[7831-7881]"
  }, {
    "left" : "PEEKED_DOUBLE_QUOTED",
    "right" : "PEEKED_DOUBLE_QUOTED",
    "info" : "FieldDeclaration[7884-7934]:FieldDeclaration[7884-7934]"
  }, {
    "left" : "PEEKED_UNQUOTED",
    "right" : "PEEKED_UNQUOTED",
    "info" : "FieldDeclaration[7937-7983]:FieldDeclaration[7937-7983]"
  }, {
    "left" : "PEEKED_BUFFERED",
    "right" : "PEEKED_BUFFERED",
    "info" : "FieldDeclaration[7986-8108]:FieldDeclaration[7986-8108]"
  }, {
    "left" : "PEEKED_SINGLE_QUOTED_NAME",
    "right" : "PEEKED_SINGLE_QUOTED_NAME",
    "info" : "FieldDeclaration[8111-8167]:FieldDeclaration[8111-8167]"
  }, {
    "left" : "PEEKED_DOUBLE_QUOTED_NAME",
    "right" : "PEEKED_DOUBLE_QUOTED_NAME",
    "info" : "FieldDeclaration[8170-8226]:FieldDeclaration[8170-8226]"
  }, {
    "left" : "PEEKED_UNQUOTED_NAME",
    "right" : "PEEKED_UNQUOTED_NAME",
    "info" : "FieldDeclaration[8229-8280]:FieldDeclaration[8229-8280]"
  }, {
    "left" : "PEEKED_LONG",
    "right" : "PEEKED_LONG",
    "info" : "FieldDeclaration[8283-8400]:FieldDeclaration[8283-8400]"
  }, {
    "left" : "PEEKED_NUMBER",
    "right" : "PEEKED_NUMBER",
    "info" : "FieldDeclaration[8403-8447]:FieldDeclaration[8403-8447]"
  }, {
    "left" : "PEEKED_EOF",
    "right" : "PEEKED_EOF",
    "info" : "FieldDeclaration[8450-8491]:FieldDeclaration[8450-8491]"
  }, {
    "left" : "NUMBER_CHAR_NONE",
    "right" : "NUMBER_CHAR_NONE",
    "info" : "FieldDeclaration[8538-8584]:FieldDeclaration[8538-8584]"
  }, {
    "left" : "NUMBER_CHAR_SIGN",
    "right" : "NUMBER_CHAR_SIGN",
    "info" : "FieldDeclaration[8587-8633]:FieldDeclaration[8587-8633]"
  }, {
    "left" : "NUMBER_CHAR_DIGIT",
    "right" : "NUMBER_CHAR_DIGIT",
    "info" : "FieldDeclaration[8636-8683]:FieldDeclaration[8636-8683]"
  }, {
    "left" : "NUMBER_CHAR_DECIMAL",
    "right" : "NUMBER_CHAR_DECIMAL",
    "info" : "FieldDeclaration[8686-8735]:FieldDeclaration[8686-8735]"
  }, {
    "left" : "NUMBER_CHAR_FRACTION_DIGIT",
    "right" : "NUMBER_CHAR_FRACTION_DIGIT",
    "info" : "FieldDeclaration[8738-8794]:FieldDeclaration[8738-8794]"
  }, {
    "left" : "NUMBER_CHAR_EXP_E",
    "right" : "NUMBER_CHAR_EXP_E",
    "info" : "FieldDeclaration[8797-8844]:FieldDeclaration[8797-8844]"
  }, {
    "left" : "NUMBER_CHAR_EXP_SIGN",
    "right" : "NUMBER_CHAR_EXP_SIGN",
    "info" : "FieldDeclaration[8847-8897]:FieldDeclaration[8847-8897]"
  }, {
    "left" : "NUMBER_CHAR_EXP_DIGIT",
    "right" : "NUMBER_CHAR_EXP_DIGIT",
    "info" : "FieldDeclaration[8900-8951]:FieldDeclaration[8900-8951]"
  }, {
    "left" : "in",
    "right" : "in",
    "info" : "FieldDeclaration[8955-9004]:FieldDeclaration[8955-9004]"
  }, {
    "left" : "lenient",
    "right" : "lenient",
    "info" : "FieldDeclaration[9008-9088]:FieldDeclaration[9008-9088]"
  }, {
    "left" : "buffer",
    "right" : "buffer",
    "info" : "FieldDeclaration[9092-9443]:FieldDeclaration[9092-9443]"
  }, {
    "left" : "pos",
    "right" : "pos",
    "info" : "FieldDeclaration[9446-9466]:FieldDeclaration[9446-9466]"
  }, {
    "left" : "limit",
    "right" : "limit",
    "info" : "FieldDeclaration[9469-9491]:FieldDeclaration[9469-9491]"
  }, {
    "left" : "lineNumber",
    "right" : "lineNumber",
    "info" : "FieldDeclaration[9495-9522]:FieldDeclaration[9495-9522]"
  }, {
    "left" : "lineStart",
    "right" : "lineStart",
    "info" : "FieldDeclaration[9525-9551]:FieldDeclaration[9525-9551]"
  }, {
    "left" : "peeked",
    "right" : "peeked",
    "info" : "FieldDeclaration[9555-9580]:FieldDeclaration[9555-9580]"
  }, {
    "left" : "peekedLong",
    "right" : "peekedLong",
    "info" : "FieldDeclaration[9584-9755]:FieldDeclaration[9584-9755]"
  }, {
    "left" : "peekedNumberLength",
    "right" : "peekedNumberLength",
    "info" : "FieldDeclaration[9759-9913]:FieldDeclaration[9759-9913]"
  }, {
    "left" : "peekedString",
    "right" : "peekedString",
    "info" : "FieldDeclaration[9917-10129]:FieldDeclaration[9917-10129]"
  }, {
    "left" : "stack",
    "right" : "stack",
    "info" : "FieldDeclaration[10225-10259]:FieldDeclaration[10225-10259]"
  }, {
    "left" : "stackSize",
    "right" : "stackSize",
    "info" : "FieldDeclaration[10262-10288]:FieldDeclaration[10262-10288]"
  }, {
    "left" : "pathNames",
    "right" : "pathNames",
    "info" : "FieldDeclaration[10814-10858]:FieldDeclaration[10814-10858]"
  }, {
    "left" : "pathIndices",
    "right" : "pathIndices",
    "info" : "FieldDeclaration[10861-10901]:FieldDeclaration[10861-10901]"
  }, {
    "left" : "public JsonReader(in )",
    "right" : "public JsonReader(in )",
    "info" : "MethodDeclaration[10905-11127]:MethodDeclaration[10905-11127]"
  }, {
    "left" : "public setLenient(lenient boolean) : void",
    "right" : "public setLenient(lenient boolean) : void",
    "info" : "MethodDeclaration[11131-12766]:MethodDeclaration[11131-12766]"
  }, {
    "left" : "public isLenient() : boolean",
    "right" : "public isLenient() : boolean",
    "info" : "MethodDeclaration[12770-12904]:MethodDeclaration[12770-12904]"
  }, {
    "left" : "public beginArray() : void",
    "right" : "public beginArray() : void",
    "info" : "MethodDeclaration[12908-13485]:MethodDeclaration[12908-13485]"
  }, {
    "left" : "public endArray() : void",
    "right" : "public endArray() : void",
    "info" : "MethodDeclaration[13489-14042]:MethodDeclaration[13489-14042]"
  }, {
    "left" : "public beginObject() : void",
    "right" : "public beginObject() : void",
    "info" : "MethodDeclaration[14046-14590]:MethodDeclaration[14046-14590]"
  }, {
    "left" : "public endObject() : void",
    "right" : "public endObject() : void",
    "info" : "MethodDeclaration[14594-15250]:MethodDeclaration[14594-15250]"
  }, {
    "left" : "public hasNext() : boolean",
    "right" : "public hasNext() : boolean",
    "info" : "MethodDeclaration[15254-15519]:MethodDeclaration[15254-15519]"
  }, {
    "left" : "public peek() : ",
    "right" : "public peek() : ",
    "info" : "MethodDeclaration[15523-16586]:MethodDeclaration[15523-16586]"
  }, {
    "left" : "package doPeek() : int",
    "right" : "package doPeek() : int",
    "info" : "MethodDeclaration[16590-20571]:MethodDeclaration[16590-20571]"
  }, {
    "left" : "private peekKeyword() : int",
    "right" : "private peekKeyword() : int",
    "info" : "MethodDeclaration[20575-21864]:MethodDeclaration[20575-21864]"
  }, {
    "left" : "private peekNumber() : int",
    "right" : "private peekNumber() : int",
    "info" : "MethodDeclaration[21868-24983]:MethodDeclaration[21868-24983]"
  }, {
    "left" : "private isLiteral(c char) : boolean",
    "right" : "private isLiteral(c char) : boolean",
    "info" : "MethodDeclaration[24987-25387]:MethodDeclaration[24987-25387]"
  }, {
    "left" : "public nextName() : ",
    "right" : "public nextName() : ",
    "info" : "MethodDeclaration[25391-26285]:MethodDeclaration[25391-26285]"
  }, {
    "left" : "public nextString() : ",
    "right" : "public nextString() : ",
    "info" : "MethodDeclaration[26289-27557]:MethodDeclaration[26289-27557]"
  }, {
    "left" : "public nextBoolean() : boolean",
    "right" : "public nextBoolean() : boolean",
    "info" : "MethodDeclaration[27561-28341]:MethodDeclaration[27561-28341]"
  }, {
    "left" : "public nextNull() : void",
    "right" : "public nextNull() : void",
    "info" : "MethodDeclaration[28345-28963]:MethodDeclaration[28345-28963]"
  }, {
    "left" : "public nextDouble() : double",
    "right" : "public nextDouble() : double",
    "info" : "MethodDeclaration[28967-30760]:MethodDeclaration[28967-30760]"
  }, {
    "left" : "public nextLong() : long",
    "right" : "public nextLong() : long",
    "info" : "MethodDeclaration[30764-32823]:MethodDeclaration[30764-32948]"
  }, {
    "left" : "private nextQuotedValue(quote char) : ",
    "right" : "private nextQuotedValue(quote char) : ",
    "info" : "MethodDeclaration[32827-34307]:MethodDeclaration[32952-34432]"
  }, {
    "left" : "private nextUnquotedValue() : ",
    "right" : "private nextUnquotedValue() : ",
    "info" : "MethodDeclaration[34311-35737]:MethodDeclaration[34436-35862]"
  }, {
    "left" : "private skipQuotedValue(quote char) : void",
    "right" : "private skipQuotedValue(quote char) : void",
    "info" : "MethodDeclaration[35741-36486]:MethodDeclaration[35866-36611]"
  }, {
    "left" : "private skipUnquotedValue() : void",
    "right" : "private skipUnquotedValue() : void",
    "info" : "MethodDeclaration[36490-37081]:MethodDeclaration[36615-37206]"
  }, {
    "left" : "public nextInt() : int",
    "right" : "public nextInt() : int",
    "info" : "MethodDeclaration[37085-39452]:MethodDeclaration[37210-39702]"
  }, {
    "left" : "public close() : void",
    "right" : "public close() : void",
    "info" : "MethodDeclaration[39456-39678]:MethodDeclaration[39706-39928]"
  }, {
    "left" : "public skipValue() : void",
    "right" : "public skipValue() : void",
    "info" : "MethodDeclaration[39682-40948]:MethodDeclaration[39932-41198]"
  }, {
    "left" : "private push(newTop int) : void",
    "right" : "private push(newTop int) : void",
    "info" : "MethodDeclaration[40952-41506]:MethodDeclaration[41202-41756]"
  }, {
    "left" : "private fillBuffer(minimum int) : boolean",
    "right" : "private fillBuffer(minimum int) : boolean",
    "info" : "MethodDeclaration[41510-42380]:MethodDeclaration[41760-42630]"
  }, {
    "left" : "package getLineNumber() : int",
    "right" : "package getLineNumber() : int",
    "info" : "MethodDeclaration[42384-42436]:MethodDeclaration[42634-42686]"
  }, {
    "left" : "package getColumnNumber() : int",
    "right" : "package getColumnNumber() : int",
    "info" : "MethodDeclaration[42440-42499]:MethodDeclaration[42690-42749]"
  }, {
    "left" : "private nextNonWhitespace(throwOnEof boolean) : int",
    "right" : "private nextNonWhitespace(throwOnEof boolean) : int",
    "info" : "MethodDeclaration[42503-45205]:MethodDeclaration[42753-45455]"
  }, {
    "left" : "private checkLenient() : void",
    "right" : "private checkLenient() : void",
    "info" : "MethodDeclaration[45209-45372]:MethodDeclaration[45459-45622]"
  }, {
    "left" : "private skipToEndOfLine() : void",
    "right" : "private skipToEndOfLine() : void",
    "info" : "MethodDeclaration[45376-45829]:MethodDeclaration[45626-46079]"
  }, {
    "left" : "private skipTo(toFind ) : boolean",
    "right" : "private skipTo(toFind ) : boolean",
    "info" : "MethodDeclaration[45833-46370]:MethodDeclaration[46083-46620]"
  }, {
    "left" : "public toString() : ",
    "right" : "public toString() : ",
    "info" : "MethodDeclaration[46374-46526]:MethodDeclaration[46624-46776]"
  }, {
    "left" : "public getPath() : ",
    "right" : "public getPath() : ",
    "info" : "MethodDeclaration[46530-47422]:MethodDeclaration[46780-47672]"
  }, {
    "left" : "private readEscapeCharacter() : char",
    "right" : "private readEscapeCharacter() : char",
    "info" : "MethodDeclaration[47426-49047]:MethodDeclaration[47676-49297]"
  }, {
    "left" : "private syntaxError(message ) : ",
    "right" : "private syntaxError(message ) : ",
    "info" : "MethodDeclaration[49051-49387]:MethodDeclaration[49301-49637]"
  }, {
    "left" : "private consumeNonExecutePrefix() : void",
    "right" : "private consumeNonExecutePrefix() : void",
    "info" : "MethodDeclaration[49391-49966]:MethodDeclaration[49641-50216]"
  }, {
    "left" : "public promoteNameToValue(reader ) : void",
    "right" : "public promoteNameToValue(reader ) : void",
    "info" : "MethodDeclaration[50058-50926]:MethodDeclaration[50308-51176]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7196-7202]:Modifier[7196-7202]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[7203-7208]:TYPE_DECLARATION_KIND[7203-7208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10291-10347]:Block[10291-10347]"
  }, {
    "left" : "stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;",
    "right" : "stack[stackSize++] = JsonScope.EMPTY_DOCUMENT;",
    "info" : "ExpressionStatement[10297-10343]:ExpressionStatement[10297-10343]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10995-11001]:Modifier[10995-11001]"
  }, {
    "left" : "JsonReader",
    "right" : "JsonReader",
    "info" : "SimpleName[11002-11012]:SimpleName[11002-11012]"
  }, {
    "left" : "Reader in",
    "right" : "Reader in",
    "info" : "SingleVariableDeclaration[11013-11022]:SingleVariableDeclaration[11013-11022]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11024-11127]:Block[11024-11127]"
  }, {
    "left" : "if (in == null)",
    "right" : "if (in == null)",
    "info" : "IfStatement[11030-11105]:IfStatement[11030-11105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11046-11105]:Block[11046-11105]"
  }, {
    "left" : "throw new NullPointerException(\"in == null\");",
    "right" : "throw new NullPointerException(\"in == null\");",
    "info" : "ThrowStatement[11054-11099]:ThrowStatement[11054-11099]"
  }, {
    "left" : "this.in = in;",
    "right" : "this.in = in;",
    "info" : "ExpressionStatement[11110-11123]:ExpressionStatement[11110-11123]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12687-12693]:Modifier[12687-12693]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12694-12699]:Modifier[12694-12699]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12700-12704]:PrimitiveType[12700-12704]"
  }, {
    "left" : "setLenient",
    "right" : "setLenient",
    "info" : "SimpleName[12705-12715]:SimpleName[12705-12715]"
  }, {
    "left" : "boolean lenient",
    "right" : "boolean lenient",
    "info" : "SingleVariableDeclaration[12716-12731]:SingleVariableDeclaration[12716-12731]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12733-12766]:Block[12733-12766]"
  }, {
    "left" : "this.lenient = lenient;",
    "right" : "this.lenient = lenient;",
    "info" : "ExpressionStatement[12739-12762]:ExpressionStatement[12739-12762]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12846-12852]:Modifier[12846-12852]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[12853-12858]:Modifier[12853-12858]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12859-12866]:PrimitiveType[12859-12866]"
  }, {
    "left" : "isLenient",
    "right" : "isLenient",
    "info" : "SimpleName[12867-12876]:SimpleName[12867-12876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12879-12904]:Block[12879-12904]"
  }, {
    "left" : "return lenient;",
    "right" : "return lenient;",
    "info" : "ReturnStatement[12885-12900]:ReturnStatement[12885-12900]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13028-13034]:Modifier[13028-13034]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13035-13039]:PrimitiveType[13035-13039]"
  }, {
    "left" : "beginArray",
    "right" : "beginArray",
    "info" : "SimpleName[13040-13050]:SimpleName[13040-13050]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13060-13071]:SimpleType[13060-13071]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13072-13485]:Block[13072-13485]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[13078-13093]:VariableDeclarationStatement[13078-13093]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[13098-13147]:IfStatement[13098-13147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13120-13147]:Block[13120-13147]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[13128-13141]:ExpressionStatement[13128-13141]"
  }, {
    "left" : "if (p == PEEKED_BEGIN_ARRAY)",
    "right" : "if (p == PEEKED_BEGIN_ARRAY)",
    "info" : "IfStatement[13152-13481]:IfStatement[13152-13481]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13181-13289]:Block[13181-13289]"
  }, {
    "left" : "push(JsonScope.EMPTY_ARRAY);",
    "right" : "push(JsonScope.EMPTY_ARRAY);",
    "info" : "ExpressionStatement[13189-13217]:ExpressionStatement[13189-13217]"
  }, {
    "left" : "pathIndices[stackSize - 1] = 0;",
    "right" : "pathIndices[stackSize - 1] = 0;",
    "info" : "ExpressionStatement[13224-13255]:ExpressionStatement[13224-13255]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[13262-13283]:ExpressionStatement[13262-13283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13295-13481]:Block[13295-13481]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected BEGIN_ARRAY but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[13303-13475]:ThrowStatement[13303-13475]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13609-13615]:Modifier[13609-13615]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13616-13620]:PrimitiveType[13616-13620]"
  }, {
    "left" : "endArray",
    "right" : "endArray",
    "info" : "SimpleName[13621-13629]:SimpleName[13621-13629]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13639-13650]:SimpleType[13639-13650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13651-14042]:Block[13651-14042]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[13657-13672]:VariableDeclarationStatement[13657-13672]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[13677-13726]:IfStatement[13677-13726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13699-13726]:Block[13699-13726]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[13707-13720]:ExpressionStatement[13707-13720]"
  }, {
    "left" : "if (p == PEEKED_END_ARRAY)",
    "right" : "if (p == PEEKED_END_ARRAY)",
    "info" : "IfStatement[13731-14038]:IfStatement[13731-14038]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13758-13848]:Block[13758-13848]"
  }, {
    "left" : "stackSize--;",
    "right" : "stackSize--;",
    "info" : "ExpressionStatement[13766-13778]:ExpressionStatement[13766-13778]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[13785-13814]:ExpressionStatement[13785-13814]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[13821-13842]:ExpressionStatement[13821-13842]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13854-14038]:Block[13854-14038]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected END_ARRAY but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[13862-14032]:ThrowStatement[13862-14032]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14167-14173]:Modifier[14167-14173]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14174-14178]:PrimitiveType[14174-14178]"
  }, {
    "left" : "beginObject",
    "right" : "beginObject",
    "info" : "SimpleName[14179-14190]:SimpleName[14179-14190]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[14200-14211]:SimpleType[14200-14211]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14212-14590]:Block[14212-14590]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[14218-14233]:VariableDeclarationStatement[14218-14233]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[14238-14287]:IfStatement[14238-14287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14260-14287]:Block[14260-14287]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[14268-14281]:ExpressionStatement[14268-14281]"
  }, {
    "left" : "if (p == PEEKED_BEGIN_OBJECT)",
    "right" : "if (p == PEEKED_BEGIN_OBJECT)",
    "info" : "IfStatement[14292-14586]:IfStatement[14292-14586]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14322-14393]:Block[14322-14393]"
  }, {
    "left" : "push(JsonScope.EMPTY_OBJECT);",
    "right" : "push(JsonScope.EMPTY_OBJECT);",
    "info" : "ExpressionStatement[14330-14359]:ExpressionStatement[14330-14359]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[14366-14387]:ExpressionStatement[14366-14387]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14399-14586]:Block[14399-14586]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected BEGIN_OBJECT but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[14407-14580]:ThrowStatement[14407-14580]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14715-14721]:Modifier[14715-14721]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14722-14726]:PrimitiveType[14722-14726]"
  }, {
    "left" : "endObject",
    "right" : "endObject",
    "info" : "SimpleName[14727-14736]:SimpleName[14727-14736]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[14746-14757]:SimpleType[14746-14757]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14758-15250]:Block[14758-15250]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[14764-14779]:VariableDeclarationStatement[14764-14779]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[14784-14833]:IfStatement[14784-14833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14806-14833]:Block[14806-14833]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[14814-14827]:ExpressionStatement[14814-14827]"
  }, {
    "left" : "if (p == PEEKED_END_OBJECT)",
    "right" : "if (p == PEEKED_END_OBJECT)",
    "info" : "IfStatement[14838-15246]:IfStatement[14838-15246]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14866-15055]:Block[14866-15055]"
  }, {
    "left" : "stackSize--;",
    "right" : "stackSize--;",
    "info" : "ExpressionStatement[14874-14886]:ExpressionStatement[14874-14886]"
  }, {
    "left" : "pathNames[stackSize] = null;",
    "right" : "pathNames[stackSize] = null;",
    "info" : "ExpressionStatement[14893-14921]:ExpressionStatement[14893-14921]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[14992-15021]:ExpressionStatement[14992-15021]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[15028-15049]:ExpressionStatement[15028-15049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15061-15246]:Block[15061-15246]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected END_OBJECT but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[15069-15240]:ThrowStatement[15069-15240]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15336-15342]:Modifier[15336-15342]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15343-15350]:PrimitiveType[15343-15350]"
  }, {
    "left" : "hasNext",
    "right" : "hasNext",
    "info" : "SimpleName[15351-15358]:SimpleName[15351-15358]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[15368-15379]:SimpleType[15368-15379]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15380-15519]:Block[15380-15519]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[15386-15401]:VariableDeclarationStatement[15386-15401]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[15406-15455]:IfStatement[15406-15455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15428-15455]:Block[15428-15455]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[15436-15449]:ExpressionStatement[15436-15449]"
  }, {
    "left" : "return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;",
    "right" : "return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;",
    "info" : "ReturnStatement[15460-15515]:ReturnStatement[15460-15515]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15597-15603]:Modifier[15597-15603]"
  }, {
    "left" : "JsonToken",
    "right" : "JsonToken",
    "info" : "SimpleType[15604-15613]:SimpleType[15604-15613]"
  }, {
    "left" : "peek",
    "right" : "peek",
    "info" : "SimpleName[15614-15618]:SimpleName[15614-15618]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[15628-15639]:SimpleType[15628-15639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15640-16586]:Block[15640-16586]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[15646-15661]:VariableDeclarationStatement[15646-15661]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[15666-15715]:IfStatement[15666-15715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15688-15715]:Block[15688-15715]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[15696-15709]:ExpressionStatement[15696-15709]"
  }, {
    "left" : "switch (p) {\n    case PEEKED_BEGIN_OBJECT:\n      return JsonToken.BEGIN_OBJECT;\n    case PEEKED_END_OBJECT:\n      return JsonToken.END_OBJECT;\n    case PEEKED_BEGIN_ARRAY:\n      return JsonToken.BEGIN_ARRAY;\n    case PEEKED_END_ARRAY:\n      return JsonToken.END_ARRAY;\n    case PEEKED_SINGLE_QUOTED_NAME:\n    case PEEKED_DOUBLE_QUOTED_NAME:\n    case PEEKED_UNQUOTED_NAME:\n      return JsonToken.NAME;\n    case PEEKED_TRUE:\n    case PEEKED_FALSE:\n      return JsonToken.BOOLEAN;\n    case PEEKED_NULL:\n      return JsonToken.NULL;\n    case PEEKED_SINGLE_QUOTED:\n    case PEEKED_DOUBLE_QUOTED:\n    case PEEKED_UNQUOTED:\n    case PEEKED_BUFFERED:\n      return JsonToken.STRING;\n    case PEEKED_LONG:\n    case PEEKED_NUMBER:\n      return JsonToken.NUMBER;\n    case PEEKED_EOF:\n      return JsonToken.END_DOCUMENT;\n    default:\n      throw new AssertionError();\n    }",
    "right" : "switch (p) {\n    case PEEKED_BEGIN_OBJECT:\n      return JsonToken.BEGIN_OBJECT;\n    case PEEKED_END_OBJECT:\n      return JsonToken.END_OBJECT;\n    case PEEKED_BEGIN_ARRAY:\n      return JsonToken.BEGIN_ARRAY;\n    case PEEKED_END_ARRAY:\n      return JsonToken.END_ARRAY;\n    case PEEKED_SINGLE_QUOTED_NAME:\n    case PEEKED_DOUBLE_QUOTED_NAME:\n    case PEEKED_UNQUOTED_NAME:\n      return JsonToken.NAME;\n    case PEEKED_TRUE:\n    case PEEKED_FALSE:\n      return JsonToken.BOOLEAN;\n    case PEEKED_NULL:\n      return JsonToken.NULL;\n    case PEEKED_SINGLE_QUOTED:\n    case PEEKED_DOUBLE_QUOTED:\n    case PEEKED_UNQUOTED:\n    case PEEKED_BUFFERED:\n      return JsonToken.STRING;\n    case PEEKED_LONG:\n    case PEEKED_NUMBER:\n      return JsonToken.NUMBER;\n    case PEEKED_EOF:\n      return JsonToken.END_DOCUMENT;\n    default:\n      throw new AssertionError();\n    }",
    "info" : "SwitchStatement[15721-16582]:SwitchStatement[15721-16582]"
  }, {
    "left" : "case PEEKED_BEGIN_OBJECT:",
    "right" : "case PEEKED_BEGIN_OBJECT:",
    "info" : "SwitchCase[15738-15763]:SwitchCase[15738-15763]"
  }, {
    "left" : "return JsonToken.BEGIN_OBJECT;",
    "right" : "return JsonToken.BEGIN_OBJECT;",
    "info" : "ReturnStatement[15770-15800]:ReturnStatement[15770-15800]"
  }, {
    "left" : "case PEEKED_END_OBJECT:",
    "right" : "case PEEKED_END_OBJECT:",
    "info" : "SwitchCase[15805-15828]:SwitchCase[15805-15828]"
  }, {
    "left" : "return JsonToken.END_OBJECT;",
    "right" : "return JsonToken.END_OBJECT;",
    "info" : "ReturnStatement[15835-15863]:ReturnStatement[15835-15863]"
  }, {
    "left" : "case PEEKED_BEGIN_ARRAY:",
    "right" : "case PEEKED_BEGIN_ARRAY:",
    "info" : "SwitchCase[15868-15892]:SwitchCase[15868-15892]"
  }, {
    "left" : "return JsonToken.BEGIN_ARRAY;",
    "right" : "return JsonToken.BEGIN_ARRAY;",
    "info" : "ReturnStatement[15899-15928]:ReturnStatement[15899-15928]"
  }, {
    "left" : "case PEEKED_END_ARRAY:",
    "right" : "case PEEKED_END_ARRAY:",
    "info" : "SwitchCase[15933-15955]:SwitchCase[15933-15955]"
  }, {
    "left" : "return JsonToken.END_ARRAY;",
    "right" : "return JsonToken.END_ARRAY;",
    "info" : "ReturnStatement[15962-15989]:ReturnStatement[15962-15989]"
  }, {
    "left" : "case PEEKED_SINGLE_QUOTED_NAME:",
    "right" : "case PEEKED_SINGLE_QUOTED_NAME:",
    "info" : "SwitchCase[15994-16025]:SwitchCase[15994-16025]"
  }, {
    "left" : "case PEEKED_DOUBLE_QUOTED_NAME:",
    "right" : "case PEEKED_DOUBLE_QUOTED_NAME:",
    "info" : "SwitchCase[16030-16061]:SwitchCase[16030-16061]"
  }, {
    "left" : "case PEEKED_UNQUOTED_NAME:",
    "right" : "case PEEKED_UNQUOTED_NAME:",
    "info" : "SwitchCase[16066-16092]:SwitchCase[16066-16092]"
  }, {
    "left" : "return JsonToken.NAME;",
    "right" : "return JsonToken.NAME;",
    "info" : "ReturnStatement[16099-16121]:ReturnStatement[16099-16121]"
  }, {
    "left" : "case PEEKED_TRUE:",
    "right" : "case PEEKED_TRUE:",
    "info" : "SwitchCase[16126-16143]:SwitchCase[16126-16143]"
  }, {
    "left" : "case PEEKED_FALSE:",
    "right" : "case PEEKED_FALSE:",
    "info" : "SwitchCase[16148-16166]:SwitchCase[16148-16166]"
  }, {
    "left" : "return JsonToken.BOOLEAN;",
    "right" : "return JsonToken.BOOLEAN;",
    "info" : "ReturnStatement[16173-16198]:ReturnStatement[16173-16198]"
  }, {
    "left" : "case PEEKED_NULL:",
    "right" : "case PEEKED_NULL:",
    "info" : "SwitchCase[16203-16220]:SwitchCase[16203-16220]"
  }, {
    "left" : "return JsonToken.NULL;",
    "right" : "return JsonToken.NULL;",
    "info" : "ReturnStatement[16227-16249]:ReturnStatement[16227-16249]"
  }, {
    "left" : "case PEEKED_SINGLE_QUOTED:",
    "right" : "case PEEKED_SINGLE_QUOTED:",
    "info" : "SwitchCase[16254-16280]:SwitchCase[16254-16280]"
  }, {
    "left" : "case PEEKED_DOUBLE_QUOTED:",
    "right" : "case PEEKED_DOUBLE_QUOTED:",
    "info" : "SwitchCase[16285-16311]:SwitchCase[16285-16311]"
  }, {
    "left" : "case PEEKED_UNQUOTED:",
    "right" : "case PEEKED_UNQUOTED:",
    "info" : "SwitchCase[16316-16337]:SwitchCase[16316-16337]"
  }, {
    "left" : "case PEEKED_BUFFERED:",
    "right" : "case PEEKED_BUFFERED:",
    "info" : "SwitchCase[16342-16363]:SwitchCase[16342-16363]"
  }, {
    "left" : "return JsonToken.STRING;",
    "right" : "return JsonToken.STRING;",
    "info" : "ReturnStatement[16370-16394]:ReturnStatement[16370-16394]"
  }, {
    "left" : "case PEEKED_LONG:",
    "right" : "case PEEKED_LONG:",
    "info" : "SwitchCase[16399-16416]:SwitchCase[16399-16416]"
  }, {
    "left" : "case PEEKED_NUMBER:",
    "right" : "case PEEKED_NUMBER:",
    "info" : "SwitchCase[16421-16440]:SwitchCase[16421-16440]"
  }, {
    "left" : "return JsonToken.NUMBER;",
    "right" : "return JsonToken.NUMBER;",
    "info" : "ReturnStatement[16447-16471]:ReturnStatement[16447-16471]"
  }, {
    "left" : "case PEEKED_EOF:",
    "right" : "case PEEKED_EOF:",
    "info" : "SwitchCase[16476-16492]:SwitchCase[16476-16492]"
  }, {
    "left" : "return JsonToken.END_DOCUMENT;",
    "right" : "return JsonToken.END_DOCUMENT;",
    "info" : "ReturnStatement[16499-16529]:ReturnStatement[16499-16529]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[16534-16542]:SwitchCase[16534-16542]"
  }, {
    "left" : "throw new AssertionError();",
    "right" : "throw new AssertionError();",
    "info" : "ThrowStatement[16549-16576]:ThrowStatement[16549-16576]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[16590-16593]:PrimitiveType[16590-16593]"
  }, {
    "left" : "doPeek",
    "right" : "doPeek",
    "info" : "SimpleName[16594-16600]:SimpleName[16594-16600]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[16610-16621]:SimpleType[16610-16621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16622-20571]:Block[16622-20571]"
  }, {
    "left" : "int peekStack = stack[stackSize - 1];",
    "right" : "int peekStack = stack[stackSize - 1];",
    "info" : "VariableDeclarationStatement[16628-16665]:VariableDeclarationStatement[16628-16665]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
    "right" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
    "info" : "IfStatement[16670-19364]:IfStatement[16670-19364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16710-16772]:Block[16710-16772]"
  }, {
    "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;",
    "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_ARRAY;",
    "info" : "ExpressionStatement[16718-16766]:ExpressionStatement[16718-16766]"
  }, {
    "left" : "if (peekStack == JsonScope.NONEMPTY_ARRAY)",
    "right" : "if (peekStack == JsonScope.NONEMPTY_ARRAY)",
    "info" : "IfStatement[16778-19364]:IfStatement[16778-19364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16821-17154]:Block[16821-17154]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[16880-16912]:VariableDeclarationStatement[16880-16912]"
  }, {
    "left" : "switch (c) {\n      case ']':\n        return peeked = PEEKED_END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }",
    "right" : "switch (c) {\n      case ']':\n        return peeked = PEEKED_END_ARRAY;\n      case ';':\n        checkLenient(); // fall-through\n      case ',':\n        break;\n      default:\n        throw syntaxError(\"Unterminated array\");\n      }",
    "info" : "SwitchStatement[16919-17148]:SwitchStatement[16919-17148]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[16938-16947]:SwitchCase[16938-16947]"
  }, {
    "left" : "return peeked = PEEKED_END_ARRAY;",
    "right" : "return peeked = PEEKED_END_ARRAY;",
    "info" : "ReturnStatement[16956-16989]:ReturnStatement[16956-16989]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[16996-17005]:SwitchCase[16996-17005]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[17014-17029]:ExpressionStatement[17014-17029]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[17052-17061]:SwitchCase[17052-17061]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17070-17076]:BreakStatement[17070-17076]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[17083-17091]:SwitchCase[17083-17091]"
  }, {
    "left" : "throw syntaxError(\"Unterminated array\");",
    "right" : "throw syntaxError(\"Unterminated array\");",
    "info" : "ThrowStatement[17100-17140]:ThrowStatement[17100-17140]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT)",
    "right" : "if (peekStack == JsonScope.EMPTY_OBJECT || peekStack == JsonScope.NONEMPTY_OBJECT)",
    "info" : "IfStatement[17160-19364]:IfStatement[17160-19364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17243-18397]:Block[17243-18397]"
  }, {
    "left" : "stack[stackSize - 1] = JsonScope.DANGLING_NAME;",
    "right" : "stack[stackSize - 1] = JsonScope.DANGLING_NAME;",
    "info" : "ExpressionStatement[17251-17298]:ExpressionStatement[17251-17298]"
  }, {
    "left" : "if (peekStack == JsonScope.NONEMPTY_OBJECT)",
    "right" : "if (peekStack == JsonScope.NONEMPTY_OBJECT)",
    "info" : "IfStatement[17356-17708]:IfStatement[17356-17708]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17400-17708]:Block[17400-17708]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[17410-17442]:VariableDeclarationStatement[17410-17442]"
  }, {
    "left" : "switch (c) {\n        case '}':\n          return peeked = PEEKED_END_OBJECT;\n        case ';':\n          checkLenient(); // fall-through\n        case ',':\n          break;\n        default:\n          throw syntaxError(\"Unterminated object\");\n        }",
    "right" : "switch (c) {\n        case '}':\n          return peeked = PEEKED_END_OBJECT;\n        case ';':\n          checkLenient(); // fall-through\n        case ',':\n          break;\n        default:\n          throw syntaxError(\"Unterminated object\");\n        }",
    "info" : "SwitchStatement[17451-17700]:SwitchStatement[17451-17700]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[17472-17481]:SwitchCase[17472-17481]"
  }, {
    "left" : "return peeked = PEEKED_END_OBJECT;",
    "right" : "return peeked = PEEKED_END_OBJECT;",
    "info" : "ReturnStatement[17492-17526]:ReturnStatement[17492-17526]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[17535-17544]:SwitchCase[17535-17544]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[17555-17570]:ExpressionStatement[17555-17570]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[17595-17604]:SwitchCase[17595-17604]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17615-17621]:BreakStatement[17615-17621]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[17630-17638]:SwitchCase[17630-17638]"
  }, {
    "left" : "throw syntaxError(\"Unterminated object\");",
    "right" : "throw syntaxError(\"Unterminated object\");",
    "info" : "ThrowStatement[17649-17690]:ThrowStatement[17649-17690]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[17715-17747]:VariableDeclarationStatement[17715-17747]"
  }, {
    "left" : "switch (c) {\n      case '\"':\n        return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n      case '\\'':\n        checkLenient();\n        return peeked = PEEKED_SINGLE_QUOTED_NAME;\n      case '}':\n        if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n          return peeked = PEEKED_END_OBJECT;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      default:\n        checkLenient();\n        pos--; // Don't consume the first character in an unquoted string.\n        if (isLiteral((char) c)) {\n          return peeked = PEEKED_UNQUOTED_NAME;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      }",
    "right" : "switch (c) {\n      case '\"':\n        return peeked = PEEKED_DOUBLE_QUOTED_NAME;\n      case '\\'':\n        checkLenient();\n        return peeked = PEEKED_SINGLE_QUOTED_NAME;\n      case '}':\n        if (peekStack != JsonScope.NONEMPTY_OBJECT) {\n          return peeked = PEEKED_END_OBJECT;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      default:\n        checkLenient();\n        pos--; // Don't consume the first character in an unquoted string.\n        if (isLiteral((char) c)) {\n          return peeked = PEEKED_UNQUOTED_NAME;\n        } else {\n          throw syntaxError(\"Expected name\");\n        }\n      }",
    "info" : "SwitchStatement[17754-18391]:SwitchStatement[17754-18391]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[17773-17782]:SwitchCase[17773-17782]"
  }, {
    "left" : "return peeked = PEEKED_DOUBLE_QUOTED_NAME;",
    "right" : "return peeked = PEEKED_DOUBLE_QUOTED_NAME;",
    "info" : "ReturnStatement[17791-17833]:ReturnStatement[17791-17833]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[17840-17850]:SwitchCase[17840-17850]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[17859-17874]:ExpressionStatement[17859-17874]"
  }, {
    "left" : "return peeked = PEEKED_SINGLE_QUOTED_NAME;",
    "right" : "return peeked = PEEKED_SINGLE_QUOTED_NAME;",
    "info" : "ReturnStatement[17883-17925]:ReturnStatement[17883-17925]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[17932-17941]:SwitchCase[17932-17941]"
  }, {
    "left" : "if (peekStack != JsonScope.NONEMPTY_OBJECT)",
    "right" : "if (peekStack != JsonScope.NONEMPTY_OBJECT)",
    "info" : "IfStatement[17950-18113]:IfStatement[17950-18113]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17994-18050]:Block[17994-18050]"
  }, {
    "left" : "return peeked = PEEKED_END_OBJECT;",
    "right" : "return peeked = PEEKED_END_OBJECT;",
    "info" : "ReturnStatement[18006-18040]:ReturnStatement[18006-18040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18056-18113]:Block[18056-18113]"
  }, {
    "left" : "throw syntaxError(\"Expected name\");",
    "right" : "throw syntaxError(\"Expected name\");",
    "info" : "ThrowStatement[18068-18103]:ThrowStatement[18068-18103]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[18120-18128]:SwitchCase[18120-18128]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[18137-18152]:ExpressionStatement[18137-18152]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[18161-18167]:ExpressionStatement[18161-18167]"
  }, {
    "left" : "if (isLiteral((char) c))",
    "right" : "if (isLiteral((char) c))",
    "info" : "IfStatement[18236-18383]:IfStatement[18236-18383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18261-18320]:Block[18261-18320]"
  }, {
    "left" : "return peeked = PEEKED_UNQUOTED_NAME;",
    "right" : "return peeked = PEEKED_UNQUOTED_NAME;",
    "info" : "ReturnStatement[18273-18310]:ReturnStatement[18273-18310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18326-18383]:Block[18326-18383]"
  }, {
    "left" : "throw syntaxError(\"Expected name\");",
    "right" : "throw syntaxError(\"Expected name\");",
    "info" : "ThrowStatement[18338-18373]:ThrowStatement[18338-18373]"
  }, {
    "left" : "if (peekStack == JsonScope.DANGLING_NAME)",
    "right" : "if (peekStack == JsonScope.DANGLING_NAME)",
    "info" : "IfStatement[18403-19364]:IfStatement[18403-19364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18445-18857]:Block[18445-18857]"
  }, {
    "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;",
    "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_OBJECT;",
    "info" : "ExpressionStatement[18453-18502]:ExpressionStatement[18453-18502]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[18553-18585]:VariableDeclarationStatement[18553-18585]"
  }, {
    "left" : "switch (c) {\n      case ':':\n        break;\n      case '=':\n        checkLenient();\n        if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\n          pos++;\n        }\n        break;\n      default:\n        throw syntaxError(\"Expected ':'\");\n      }",
    "right" : "switch (c) {\n      case ':':\n        break;\n      case '=':\n        checkLenient();\n        if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>') {\n          pos++;\n        }\n        break;\n      default:\n        throw syntaxError(\"Expected ':'\");\n      }",
    "info" : "SwitchStatement[18592-18851]:SwitchStatement[18592-18851]"
  }, {
    "left" : "case ':':",
    "right" : "case ':':",
    "info" : "SwitchCase[18611-18620]:SwitchCase[18611-18620]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18629-18635]:BreakStatement[18629-18635]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[18642-18651]:SwitchCase[18642-18651]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[18660-18675]:ExpressionStatement[18660-18675]"
  }, {
    "left" : "if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>')",
    "right" : "if ((pos < limit || fillBuffer(1)) && buffer[pos] == '>')",
    "info" : "IfStatement[18684-18770]:IfStatement[18684-18770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18742-18770]:Block[18742-18770]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[18754-18760]:ExpressionStatement[18754-18760]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18779-18785]:BreakStatement[18779-18785]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[18792-18800]:SwitchCase[18792-18800]"
  }, {
    "left" : "throw syntaxError(\"Expected ':'\");",
    "right" : "throw syntaxError(\"Expected ':'\");",
    "info" : "ThrowStatement[18809-18843]:ThrowStatement[18809-18843]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_DOCUMENT)",
    "right" : "if (peekStack == JsonScope.EMPTY_DOCUMENT)",
    "info" : "IfStatement[18863-19364]:IfStatement[18863-19364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18906-19035]:Block[18906-19035]"
  }, {
    "left" : "if (lenient)",
    "right" : "if (lenient)",
    "info" : "IfStatement[18914-18971]:IfStatement[18914-18971]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18927-18971]:Block[18927-18971]"
  }, {
    "left" : "consumeNonExecutePrefix();",
    "right" : "consumeNonExecutePrefix();",
    "info" : "ExpressionStatement[18937-18963]:ExpressionStatement[18937-18963]"
  }, {
    "left" : "stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;",
    "right" : "stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;",
    "info" : "ExpressionStatement[18978-19029]:ExpressionStatement[18978-19029]"
  }, {
    "left" : "if (peekStack == JsonScope.NONEMPTY_DOCUMENT)",
    "right" : "if (peekStack == JsonScope.NONEMPTY_DOCUMENT)",
    "info" : "IfStatement[19041-19364]:IfStatement[19041-19364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19087-19253]:Block[19087-19253]"
  }, {
    "left" : "int c = nextNonWhitespace(false);",
    "right" : "int c = nextNonWhitespace(false);",
    "info" : "VariableDeclarationStatement[19095-19128]:VariableDeclarationStatement[19095-19128]"
  }, {
    "left" : "if (c == -1)",
    "right" : "if (c == -1)",
    "info" : "IfStatement[19135-19247]:IfStatement[19135-19247]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19148-19193]:Block[19148-19193]"
  }, {
    "left" : "return peeked = PEEKED_EOF;",
    "right" : "return peeked = PEEKED_EOF;",
    "info" : "ReturnStatement[19158-19185]:ReturnStatement[19158-19185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19199-19247]:Block[19199-19247]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[19209-19224]:ExpressionStatement[19209-19224]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[19233-19239]:ExpressionStatement[19233-19239]"
  }, {
    "left" : "if (peekStack == JsonScope.CLOSED)",
    "right" : "if (peekStack == JsonScope.CLOSED)",
    "info" : "IfStatement[19259-19364]:IfStatement[19259-19364]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19294-19364]:Block[19294-19364]"
  }, {
    "left" : "throw new IllegalStateException(\"JsonReader is closed\");",
    "right" : "throw new IllegalStateException(\"JsonReader is closed\");",
    "info" : "ThrowStatement[19302-19358]:ThrowStatement[19302-19358]"
  }, {
    "left" : "int c = nextNonWhitespace(true);",
    "right" : "int c = nextNonWhitespace(true);",
    "info" : "VariableDeclarationStatement[19370-19402]:VariableDeclarationStatement[19370-19402]"
  }, {
    "left" : "switch (c) {\n    case ']':\n      if (peekStack == JsonScope.EMPTY_ARRAY) {\n        return peeked = PEEKED_END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      // In lenient mode, a 0-length literal in an array means 'null'.\n      if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n        checkLenient();\n        pos--;\n        return peeked = PEEKED_NULL;\n      } else {\n        throw syntaxError(\"Unexpected value\");\n      }\n    case '\\'':\n      checkLenient();\n      return peeked = PEEKED_SINGLE_QUOTED;\n    case '\"':\n      return peeked = PEEKED_DOUBLE_QUOTED;\n    case '[':\n      return peeked = PEEKED_BEGIN_ARRAY;\n    case '{':\n      return peeked = PEEKED_BEGIN_OBJECT;\n    default:\n      pos--; // Don't consume the first character in a literal value.\n    }",
    "right" : "switch (c) {\n    case ']':\n      if (peekStack == JsonScope.EMPTY_ARRAY) {\n        return peeked = PEEKED_END_ARRAY;\n      }\n      // fall-through to handle \",]\"\n    case ';':\n    case ',':\n      // In lenient mode, a 0-length literal in an array means 'null'.\n      if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY) {\n        checkLenient();\n        pos--;\n        return peeked = PEEKED_NULL;\n      } else {\n        throw syntaxError(\"Unexpected value\");\n      }\n    case '\\'':\n      checkLenient();\n      return peeked = PEEKED_SINGLE_QUOTED;\n    case '\"':\n      return peeked = PEEKED_DOUBLE_QUOTED;\n    case '[':\n      return peeked = PEEKED_BEGIN_ARRAY;\n    case '{':\n      return peeked = PEEKED_BEGIN_OBJECT;\n    default:\n      pos--; // Don't consume the first character in a literal value.\n    }",
    "info" : "SwitchStatement[19407-20243]:SwitchStatement[19407-20243]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[19424-19433]:SwitchCase[19424-19433]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
    "right" : "if (peekStack == JsonScope.EMPTY_ARRAY)",
    "info" : "IfStatement[19440-19531]:IfStatement[19440-19531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19480-19531]:Block[19480-19531]"
  }, {
    "left" : "return peeked = PEEKED_END_ARRAY;",
    "right" : "return peeked = PEEKED_END_ARRAY;",
    "info" : "ReturnStatement[19490-19523]:ReturnStatement[19490-19523]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[19573-19582]:SwitchCase[19573-19582]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[19587-19596]:SwitchCase[19587-19596]"
  }, {
    "left" : "if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY)",
    "right" : "if (peekStack == JsonScope.EMPTY_ARRAY || peekStack == JsonScope.NONEMPTY_ARRAY)",
    "info" : "IfStatement[19674-19902]:IfStatement[19674-19902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19755-19840]:Block[19755-19840]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[19765-19780]:ExpressionStatement[19765-19780]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[19789-19795]:ExpressionStatement[19789-19795]"
  }, {
    "left" : "return peeked = PEEKED_NULL;",
    "right" : "return peeked = PEEKED_NULL;",
    "info" : "ReturnStatement[19804-19832]:ReturnStatement[19804-19832]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19846-19902]:Block[19846-19902]"
  }, {
    "left" : "throw syntaxError(\"Unexpected value\");",
    "right" : "throw syntaxError(\"Unexpected value\");",
    "info" : "ThrowStatement[19856-19894]:ThrowStatement[19856-19894]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[19907-19917]:SwitchCase[19907-19917]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[19924-19939]:ExpressionStatement[19924-19939]"
  }, {
    "left" : "return peeked = PEEKED_SINGLE_QUOTED;",
    "right" : "return peeked = PEEKED_SINGLE_QUOTED;",
    "info" : "ReturnStatement[19946-19983]:ReturnStatement[19946-19983]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[19988-19997]:SwitchCase[19988-19997]"
  }, {
    "left" : "return peeked = PEEKED_DOUBLE_QUOTED;",
    "right" : "return peeked = PEEKED_DOUBLE_QUOTED;",
    "info" : "ReturnStatement[20004-20041]:ReturnStatement[20004-20041]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[20046-20055]:SwitchCase[20046-20055]"
  }, {
    "left" : "return peeked = PEEKED_BEGIN_ARRAY;",
    "right" : "return peeked = PEEKED_BEGIN_ARRAY;",
    "info" : "ReturnStatement[20062-20097]:ReturnStatement[20062-20097]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[20102-20111]:SwitchCase[20102-20111]"
  }, {
    "left" : "return peeked = PEEKED_BEGIN_OBJECT;",
    "right" : "return peeked = PEEKED_BEGIN_OBJECT;",
    "info" : "ReturnStatement[20118-20154]:ReturnStatement[20118-20154]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[20159-20167]:SwitchCase[20159-20167]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[20174-20180]:ExpressionStatement[20174-20180]"
  }, {
    "left" : "int result = peekKeyword();",
    "right" : "int result = peekKeyword();",
    "info" : "VariableDeclarationStatement[20249-20276]:VariableDeclarationStatement[20249-20276]"
  }, {
    "left" : "if (result != PEEKED_NONE)",
    "right" : "if (result != PEEKED_NONE)",
    "info" : "IfStatement[20281-20336]:IfStatement[20281-20336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20308-20336]:Block[20308-20336]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[20316-20330]:ReturnStatement[20316-20330]"
  }, {
    "left" : "result = peekNumber();",
    "right" : "result = peekNumber();",
    "info" : "ExpressionStatement[20342-20364]:ExpressionStatement[20342-20364]"
  }, {
    "left" : "if (result != PEEKED_NONE)",
    "right" : "if (result != PEEKED_NONE)",
    "info" : "IfStatement[20369-20424]:IfStatement[20369-20424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20396-20424]:Block[20396-20424]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[20404-20418]:ReturnStatement[20404-20418]"
  }, {
    "left" : "if (!isLiteral(buffer[pos]))",
    "right" : "if (!isLiteral(buffer[pos]))",
    "info" : "IfStatement[20430-20509]:IfStatement[20430-20509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20459-20509]:Block[20459-20509]"
  }, {
    "left" : "throw syntaxError(\"Expected value\");",
    "right" : "throw syntaxError(\"Expected value\");",
    "info" : "ThrowStatement[20467-20503]:ThrowStatement[20467-20503]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[20515-20530]:ExpressionStatement[20515-20530]"
  }, {
    "left" : "return peeked = PEEKED_UNQUOTED;",
    "right" : "return peeked = PEEKED_UNQUOTED;",
    "info" : "ReturnStatement[20535-20567]:ReturnStatement[20535-20567]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20575-20582]:Modifier[20575-20582]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[20583-20586]:PrimitiveType[20583-20586]"
  }, {
    "left" : "peekKeyword",
    "right" : "peekKeyword",
    "info" : "SimpleName[20587-20598]:SimpleName[20587-20598]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[20608-20619]:SimpleType[20608-20619]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20620-21864]:Block[20620-21864]"
  }, {
    "left" : "char c = buffer[pos];",
    "right" : "char c = buffer[pos];",
    "info" : "VariableDeclarationStatement[20705-20726]:VariableDeclarationStatement[20705-20726]"
  }, {
    "left" : "String keyword;",
    "right" : "String keyword;",
    "info" : "VariableDeclarationStatement[20731-20746]:VariableDeclarationStatement[20731-20746]"
  }, {
    "left" : "String keywordUpper;",
    "right" : "String keywordUpper;",
    "info" : "VariableDeclarationStatement[20751-20771]:VariableDeclarationStatement[20751-20771]"
  }, {
    "left" : "int peeking;",
    "right" : "int peeking;",
    "info" : "VariableDeclarationStatement[20776-20788]:VariableDeclarationStatement[20776-20788]"
  }, {
    "left" : "if (c == 't' || c == 'T')",
    "right" : "if (c == 't' || c == 'T')",
    "info" : "IfStatement[20793-21192]:IfStatement[20793-21192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20819-20908]:Block[20819-20908]"
  }, {
    "left" : "keyword = \"true\";",
    "right" : "keyword = \"true\";",
    "info" : "ExpressionStatement[20827-20844]:ExpressionStatement[20827-20844]"
  }, {
    "left" : "keywordUpper = \"TRUE\";",
    "right" : "keywordUpper = \"TRUE\";",
    "info" : "ExpressionStatement[20851-20873]:ExpressionStatement[20851-20873]"
  }, {
    "left" : "peeking = PEEKED_TRUE;",
    "right" : "peeking = PEEKED_TRUE;",
    "info" : "ExpressionStatement[20880-20902]:ExpressionStatement[20880-20902]"
  }, {
    "left" : "if (c == 'f' || c == 'F')",
    "right" : "if (c == 'f' || c == 'F')",
    "info" : "IfStatement[20914-21192]:IfStatement[20914-21192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20940-21032]:Block[20940-21032]"
  }, {
    "left" : "keyword = \"false\";",
    "right" : "keyword = \"false\";",
    "info" : "ExpressionStatement[20948-20966]:ExpressionStatement[20948-20966]"
  }, {
    "left" : "keywordUpper = \"FALSE\";",
    "right" : "keywordUpper = \"FALSE\";",
    "info" : "ExpressionStatement[20973-20996]:ExpressionStatement[20973-20996]"
  }, {
    "left" : "peeking = PEEKED_FALSE;",
    "right" : "peeking = PEEKED_FALSE;",
    "info" : "ExpressionStatement[21003-21026]:ExpressionStatement[21003-21026]"
  }, {
    "left" : "if (c == 'n' || c == 'N')",
    "right" : "if (c == 'n' || c == 'N')",
    "info" : "IfStatement[21038-21192]:IfStatement[21038-21192]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21064-21153]:Block[21064-21153]"
  }, {
    "left" : "keyword = \"null\";",
    "right" : "keyword = \"null\";",
    "info" : "ExpressionStatement[21072-21089]:ExpressionStatement[21072-21089]"
  }, {
    "left" : "keywordUpper = \"NULL\";",
    "right" : "keywordUpper = \"NULL\";",
    "info" : "ExpressionStatement[21096-21118]:ExpressionStatement[21096-21118]"
  }, {
    "left" : "peeking = PEEKED_NULL;",
    "right" : "peeking = PEEKED_NULL;",
    "info" : "ExpressionStatement[21125-21147]:ExpressionStatement[21125-21147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21159-21192]:Block[21159-21192]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[21167-21186]:ReturnStatement[21167-21186]"
  }, {
    "left" : "int length = keyword.length();",
    "right" : "int length = keyword.length();",
    "info" : "VariableDeclarationStatement[21255-21285]:VariableDeclarationStatement[21255-21285]"
  }, {
    "left" : "for (int i = 1; i < length; i++)",
    "right" : "for (int i = 1; i < length; i++)",
    "info" : "ForStatement[21290-21548]:ForStatement[21290-21548]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21323-21548]:Block[21323-21548]"
  }, {
    "left" : "if (pos + i >= limit && !fillBuffer(i + 1))",
    "right" : "if (pos + i >= limit && !fillBuffer(i + 1))",
    "info" : "IfStatement[21331-21412]:IfStatement[21331-21412]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21375-21412]:Block[21375-21412]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[21385-21404]:ReturnStatement[21385-21404]"
  }, {
    "left" : "c = buffer[pos + i];",
    "right" : "c = buffer[pos + i];",
    "info" : "ExpressionStatement[21419-21439]:ExpressionStatement[21419-21439]"
  }, {
    "left" : "if (c != keyword.charAt(i) && c != keywordUpper.charAt(i))",
    "right" : "if (c != keyword.charAt(i) && c != keywordUpper.charAt(i))",
    "info" : "IfStatement[21446-21542]:IfStatement[21446-21542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21505-21542]:Block[21505-21542]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[21515-21534]:ReturnStatement[21515-21534]"
  }, {
    "left" : "if ((pos + length < limit || fillBuffer(length + 1))\n        && isLiteral(buffer[pos + length]))",
    "right" : "if ((pos + length < limit || fillBuffer(length + 1))\n        && isLiteral(buffer[pos + length]))",
    "info" : "IfStatement[21554-21726]:IfStatement[21554-21726]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21651-21726]:Block[21651-21726]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[21659-21678]:ReturnStatement[21659-21678]"
  }, {
    "left" : "pos += length;",
    "right" : "pos += length;",
    "info" : "ExpressionStatement[21817-21831]:ExpressionStatement[21817-21831]"
  }, {
    "left" : "return peeked = peeking;",
    "right" : "return peeked = peeking;",
    "info" : "ReturnStatement[21836-21860]:ReturnStatement[21836-21860]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[21868-21875]:Modifier[21868-21875]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[21876-21879]:PrimitiveType[21876-21879]"
  }, {
    "left" : "peekNumber",
    "right" : "peekNumber",
    "info" : "SimpleName[21880-21890]:SimpleName[21880-21890]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[21900-21911]:SimpleType[21900-21911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21912-24983]:Block[21912-24983]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[22011-22039]:VariableDeclarationStatement[22011-22039]"
  }, {
    "left" : "int p = pos;",
    "right" : "int p = pos;",
    "info" : "VariableDeclarationStatement[22044-22056]:VariableDeclarationStatement[22044-22056]"
  }, {
    "left" : "int l = limit;",
    "right" : "int l = limit;",
    "info" : "VariableDeclarationStatement[22061-22075]:VariableDeclarationStatement[22061-22075]"
  }, {
    "left" : "long value = 0;",
    "right" : "long value = 0;",
    "info" : "VariableDeclarationStatement[22081-22096]:VariableDeclarationStatement[22081-22096]"
  }, {
    "left" : "boolean negative = false;",
    "right" : "boolean negative = false;",
    "info" : "VariableDeclarationStatement[22156-22181]:VariableDeclarationStatement[22156-22181]"
  }, {
    "left" : "boolean fitsInLong = true;",
    "right" : "boolean fitsInLong = true;",
    "info" : "VariableDeclarationStatement[22186-22212]:VariableDeclarationStatement[22186-22212]"
  }, {
    "left" : "int last = NUMBER_CHAR_NONE;",
    "right" : "int last = NUMBER_CHAR_NONE;",
    "info" : "VariableDeclarationStatement[22217-22245]:VariableDeclarationStatement[22217-22245]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[22251-22261]:VariableDeclarationStatement[22251-22261]"
  }, {
    "left" : "charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == buffer.length) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        if (!fillBuffer(i + 1)) {\n          break;\n        }\n        p = pos;\n        l = limit;\n      }\n\n      char c = buffer[p + i];\n      switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }\n    }",
    "right" : "charactersOfNumber:\n    for (; true; i++) {\n      if (p + i == l) {\n        if (i == buffer.length) {\n          // Though this looks like a well-formed number, it's too long to continue reading. Give up\n          // and let the application handle this as an unquoted literal.\n          return PEEKED_NONE;\n        }\n        if (!fillBuffer(i + 1)) {\n          break;\n        }\n        p = pos;\n        l = limit;\n      }\n\n      char c = buffer[p + i];\n      switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }\n    }",
    "info" : "LabeledStatement[22267-24468]:LabeledStatement[22267-24468]"
  }, {
    "left" : "for (; true; i++)",
    "right" : "for (; true; i++)",
    "info" : "ForStatement[22291-24468]:ForStatement[22291-24468]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22309-24468]:Block[22309-24468]"
  }, {
    "left" : "if (p + i == l)",
    "right" : "if (p + i == l)",
    "info" : "IfStatement[22317-22687]:IfStatement[22317-22687]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22333-22687]:Block[22333-22687]"
  }, {
    "left" : "if (i == buffer.length)",
    "right" : "if (i == buffer.length)",
    "info" : "IfStatement[22343-22582]:IfStatement[22343-22582]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22367-22582]:Block[22367-22582]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[22553-22572]:ReturnStatement[22553-22572]"
  }, {
    "left" : "if (!fillBuffer(i + 1))",
    "right" : "if (!fillBuffer(i + 1))",
    "info" : "IfStatement[22591-22643]:IfStatement[22591-22643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22615-22643]:Block[22615-22643]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[22627-22633]:BreakStatement[22627-22633]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[22652-22660]:ExpressionStatement[22652-22660]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[22669-22679]:ExpressionStatement[22669-22679]"
  }, {
    "left" : "char c = buffer[p + i];",
    "right" : "char c = buffer[p + i];",
    "info" : "VariableDeclarationStatement[22695-22718]:VariableDeclarationStatement[22695-22718]"
  }, {
    "left" : "switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }",
    "right" : "switch (c) {\n      case '-':\n        if (last == NUMBER_CHAR_NONE) {\n          negative = true;\n          last = NUMBER_CHAR_SIGN;\n          continue;\n        } else if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '+':\n        if (last == NUMBER_CHAR_EXP_E) {\n          last = NUMBER_CHAR_EXP_SIGN;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case 'e':\n      case 'E':\n        if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {\n          last = NUMBER_CHAR_EXP_E;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      case '.':\n        if (last == NUMBER_CHAR_DIGIT) {\n          last = NUMBER_CHAR_DECIMAL;\n          continue;\n        }\n        return PEEKED_NONE;\n\n      default:\n        if (c < '0' || c > '9') {\n          if (!isLiteral(c)) {\n            break charactersOfNumber;\n          }\n          return PEEKED_NONE;\n        }\n        if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {\n          value = -(c - '0');\n          last = NUMBER_CHAR_DIGIT;\n        } else if (last == NUMBER_CHAR_DIGIT) {\n          if (value == 0) {\n            return PEEKED_NONE; // Leading '0' prefix is not allowed (since it could be octal).\n          }\n          long newValue = value * 10 - (c - '0');\n          fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);\n          value = newValue;\n        } else if (last == NUMBER_CHAR_DECIMAL) {\n          last = NUMBER_CHAR_FRACTION_DIGIT;\n        } else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {\n          last = NUMBER_CHAR_EXP_DIGIT;\n        }\n      }",
    "info" : "SwitchStatement[22725-24462]:SwitchStatement[22725-24462]"
  }, {
    "left" : "case '-':",
    "right" : "case '-':",
    "info" : "SwitchCase[22744-22753]:SwitchCase[22744-22753]"
  }, {
    "left" : "if (last == NUMBER_CHAR_NONE)",
    "right" : "if (last == NUMBER_CHAR_NONE)",
    "info" : "IfStatement[22762-22992]:IfStatement[22762-22992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22792-22885]:Block[22792-22885]"
  }, {
    "left" : "negative = true;",
    "right" : "negative = true;",
    "info" : "ExpressionStatement[22804-22820]:ExpressionStatement[22804-22820]"
  }, {
    "left" : "last = NUMBER_CHAR_SIGN;",
    "right" : "last = NUMBER_CHAR_SIGN;",
    "info" : "ExpressionStatement[22831-22855]:ExpressionStatement[22831-22855]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[22866-22875]:ContinueStatement[22866-22875]"
  }, {
    "left" : "if (last == NUMBER_CHAR_EXP_E)",
    "right" : "if (last == NUMBER_CHAR_EXP_E)",
    "info" : "IfStatement[22891-22992]:IfStatement[22891-22992]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22922-22992]:Block[22922-22992]"
  }, {
    "left" : "last = NUMBER_CHAR_EXP_SIGN;",
    "right" : "last = NUMBER_CHAR_EXP_SIGN;",
    "info" : "ExpressionStatement[22934-22962]:ExpressionStatement[22934-22962]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[22973-22982]:ContinueStatement[22973-22982]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23001-23020]:ReturnStatement[23001-23020]"
  }, {
    "left" : "case '+':",
    "right" : "case '+':",
    "info" : "SwitchCase[23028-23037]:SwitchCase[23028-23037]"
  }, {
    "left" : "if (last == NUMBER_CHAR_EXP_E)",
    "right" : "if (last == NUMBER_CHAR_EXP_E)",
    "info" : "IfStatement[23046-23147]:IfStatement[23046-23147]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23077-23147]:Block[23077-23147]"
  }, {
    "left" : "last = NUMBER_CHAR_EXP_SIGN;",
    "right" : "last = NUMBER_CHAR_EXP_SIGN;",
    "info" : "ExpressionStatement[23089-23117]:ExpressionStatement[23089-23117]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[23128-23137]:ContinueStatement[23128-23137]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23156-23175]:ReturnStatement[23156-23175]"
  }, {
    "left" : "case 'e':",
    "right" : "case 'e':",
    "info" : "SwitchCase[23183-23192]:SwitchCase[23183-23192]"
  }, {
    "left" : "case 'E':",
    "right" : "case 'E':",
    "info" : "SwitchCase[23199-23208]:SwitchCase[23199-23208]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT)",
    "right" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT)",
    "info" : "IfStatement[23217-23353]:IfStatement[23217-23353]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23286-23353]:Block[23286-23353]"
  }, {
    "left" : "last = NUMBER_CHAR_EXP_E;",
    "right" : "last = NUMBER_CHAR_EXP_E;",
    "info" : "ExpressionStatement[23298-23323]:ExpressionStatement[23298-23323]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[23334-23343]:ContinueStatement[23334-23343]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23362-23381]:ReturnStatement[23362-23381]"
  }, {
    "left" : "case '.':",
    "right" : "case '.':",
    "info" : "SwitchCase[23389-23398]:SwitchCase[23389-23398]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT)",
    "right" : "if (last == NUMBER_CHAR_DIGIT)",
    "info" : "IfStatement[23407-23507]:IfStatement[23407-23507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23438-23507]:Block[23438-23507]"
  }, {
    "left" : "last = NUMBER_CHAR_DECIMAL;",
    "right" : "last = NUMBER_CHAR_DECIMAL;",
    "info" : "ExpressionStatement[23450-23477]:ExpressionStatement[23450-23477]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[23488-23497]:ContinueStatement[23488-23497]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23516-23535]:ReturnStatement[23516-23535]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[23543-23551]:SwitchCase[23543-23551]"
  }, {
    "left" : "if (c < '0' || c > '9')",
    "right" : "if (c < '0' || c > '9')",
    "info" : "IfStatement[23560-23706]:IfStatement[23560-23706]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23584-23706]:Block[23584-23706]"
  }, {
    "left" : "if (!isLiteral(c))",
    "right" : "if (!isLiteral(c))",
    "info" : "IfStatement[23596-23666]:IfStatement[23596-23666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23615-23666]:Block[23615-23666]"
  }, {
    "left" : "break charactersOfNumber;",
    "right" : "break charactersOfNumber;",
    "info" : "BreakStatement[23629-23654]:BreakStatement[23629-23654]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23677-23696]:ReturnStatement[23677-23696]"
  }, {
    "left" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE)",
    "right" : "if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE)",
    "info" : "IfStatement[23715-24454]:IfStatement[23715-24454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23773-23850]:Block[23773-23850]"
  }, {
    "left" : "value = -(c - '0');",
    "right" : "value = -(c - '0');",
    "info" : "ExpressionStatement[23785-23804]:ExpressionStatement[23785-23804]"
  }, {
    "left" : "last = NUMBER_CHAR_DIGIT;",
    "right" : "last = NUMBER_CHAR_DIGIT;",
    "info" : "ExpressionStatement[23815-23840]:ExpressionStatement[23815-23840]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT)",
    "right" : "if (last == NUMBER_CHAR_DIGIT)",
    "info" : "IfStatement[23856-24454]:IfStatement[23856-24454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23887-24239]:Block[23887-24239]"
  }, {
    "left" : "if (value == 0)",
    "right" : "if (value == 0)",
    "info" : "IfStatement[23899-24024]:IfStatement[23899-24024]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23915-24024]:Block[23915-24024]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[23929-23948]:ReturnStatement[23929-23948]"
  }, {
    "left" : "long newValue = value * 10 - (c - '0');",
    "right" : "long newValue = value * 10 - (c - '0');",
    "info" : "VariableDeclarationStatement[24035-24074]:VariableDeclarationStatement[24035-24074]"
  }, {
    "left" : "fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);",
    "right" : "fitsInLong &= value > MIN_INCOMPLETE_INTEGER\n              || (value == MIN_INCOMPLETE_INTEGER && newValue < value);",
    "info" : "ExpressionStatement[24085-24201]:ExpressionStatement[24085-24201]"
  }, {
    "left" : "value = newValue;",
    "right" : "value = newValue;",
    "info" : "ExpressionStatement[24212-24229]:ExpressionStatement[24212-24229]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DECIMAL)",
    "right" : "if (last == NUMBER_CHAR_DECIMAL)",
    "info" : "IfStatement[24245-24454]:IfStatement[24245-24454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24278-24334]:Block[24278-24334]"
  }, {
    "left" : "last = NUMBER_CHAR_FRACTION_DIGIT;",
    "right" : "last = NUMBER_CHAR_FRACTION_DIGIT;",
    "info" : "ExpressionStatement[24290-24324]:ExpressionStatement[24290-24324]"
  }, {
    "left" : "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN)",
    "right" : "if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN)",
    "info" : "IfStatement[24340-24454]:IfStatement[24340-24454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24403-24454]:Block[24403-24454]"
  }, {
    "left" : "last = NUMBER_CHAR_EXP_DIGIT;",
    "right" : "last = NUMBER_CHAR_EXP_DIGIT;",
    "info" : "ExpressionStatement[24415-24444]:ExpressionStatement[24415-24444]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative))",
    "right" : "if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative))",
    "info" : "IfStatement[24560-24979]:IfStatement[24560-24979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24646-24750]:Block[24646-24750]"
  }, {
    "left" : "peekedLong = negative ? value : -value;",
    "right" : "peekedLong = negative ? value : -value;",
    "info" : "ExpressionStatement[24654-24693]:ExpressionStatement[24654-24693]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[24700-24709]:ExpressionStatement[24700-24709]"
  }, {
    "left" : "return peeked = PEEKED_LONG;",
    "right" : "return peeked = PEEKED_LONG;",
    "info" : "ReturnStatement[24716-24744]:ReturnStatement[24716-24744]"
  }, {
    "left" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT\n        || last == NUMBER_CHAR_EXP_DIGIT)",
    "right" : "if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT\n        || last == NUMBER_CHAR_EXP_DIGIT)",
    "info" : "IfStatement[24756-24979]:IfStatement[24756-24979]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24866-24940]:Block[24866-24940]"
  }, {
    "left" : "peekedNumberLength = i;",
    "right" : "peekedNumberLength = i;",
    "info" : "ExpressionStatement[24874-24897]:ExpressionStatement[24874-24897]"
  }, {
    "left" : "return peeked = PEEKED_NUMBER;",
    "right" : "return peeked = PEEKED_NUMBER;",
    "info" : "ReturnStatement[24904-24934]:ReturnStatement[24904-24934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24946-24979]:Block[24946-24979]"
  }, {
    "left" : "return PEEKED_NONE;",
    "right" : "return PEEKED_NONE;",
    "info" : "ReturnStatement[24954-24973]:ReturnStatement[24954-24973]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[24987-24994]:Modifier[24987-24994]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24995-25002]:PrimitiveType[24995-25002]"
  }, {
    "left" : "isLiteral",
    "right" : "isLiteral",
    "info" : "SimpleName[25003-25012]:SimpleName[25003-25012]"
  }, {
    "left" : "char c",
    "right" : "char c",
    "info" : "SingleVariableDeclaration[25013-25019]:SingleVariableDeclaration[25013-25019]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[25028-25039]:SimpleType[25028-25039]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25040-25387]:Block[25040-25387]"
  }, {
    "left" : "switch (c) {\n    case '/':\n    case '\\\\':\n    case ';':\n    case '#':\n    case '=':\n      checkLenient(); // fall-through\n    case '{':\n    case '}':\n    case '[':\n    case ']':\n    case ':':\n    case ',':\n    case ' ':\n    case '\\t':\n    case '\\f':\n    case '\\r':\n    case '\\n':\n      return false;\n    default:\n      return true;\n    }",
    "right" : "switch (c) {\n    case '/':\n    case '\\\\':\n    case ';':\n    case '#':\n    case '=':\n      checkLenient(); // fall-through\n    case '{':\n    case '}':\n    case '[':\n    case ']':\n    case ':':\n    case ',':\n    case ' ':\n    case '\\t':\n    case '\\f':\n    case '\\r':\n    case '\\n':\n      return false;\n    default:\n      return true;\n    }",
    "info" : "SwitchStatement[25046-25383]:SwitchStatement[25046-25383]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[25063-25072]:SwitchCase[25063-25072]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[25077-25087]:SwitchCase[25077-25087]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[25092-25101]:SwitchCase[25092-25101]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[25106-25115]:SwitchCase[25106-25115]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[25120-25129]:SwitchCase[25120-25129]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[25136-25151]:ExpressionStatement[25136-25151]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[25172-25181]:SwitchCase[25172-25181]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[25186-25195]:SwitchCase[25186-25195]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[25200-25209]:SwitchCase[25200-25209]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[25214-25223]:SwitchCase[25214-25223]"
  }, {
    "left" : "case ':':",
    "right" : "case ':':",
    "info" : "SwitchCase[25228-25237]:SwitchCase[25228-25237]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[25242-25251]:SwitchCase[25242-25251]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[25256-25265]:SwitchCase[25256-25265]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[25270-25280]:SwitchCase[25270-25280]"
  }, {
    "left" : "case '\\f':",
    "right" : "case '\\f':",
    "info" : "SwitchCase[25285-25295]:SwitchCase[25285-25295]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[25300-25310]:SwitchCase[25300-25310]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[25315-25325]:SwitchCase[25315-25325]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25332-25345]:ReturnStatement[25332-25345]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[25350-25358]:SwitchCase[25350-25358]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[25365-25377]:ReturnStatement[25365-25377]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[25620-25626]:Modifier[25620-25626]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[25627-25633]:SimpleType[25627-25633]"
  }, {
    "left" : "nextName",
    "right" : "nextName",
    "info" : "SimpleName[25634-25642]:SimpleName[25634-25642]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[25652-25663]:SimpleType[25652-25663]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25664-26285]:Block[25664-26285]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[25670-25685]:VariableDeclarationStatement[25670-25685]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[25690-25739]:IfStatement[25690-25739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25712-25739]:Block[25712-25739]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[25720-25733]:ExpressionStatement[25720-25733]"
  }, {
    "left" : "String result;",
    "right" : "String result;",
    "info" : "VariableDeclarationStatement[25744-25758]:VariableDeclarationStatement[25744-25758]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED_NAME)",
    "right" : "if (p == PEEKED_UNQUOTED_NAME)",
    "info" : "IfStatement[25763-26197]:IfStatement[25763-26197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25794-25837]:Block[25794-25837]"
  }, {
    "left" : "result = nextUnquotedValue();",
    "right" : "result = nextUnquotedValue();",
    "info" : "ExpressionStatement[25802-25831]:ExpressionStatement[25802-25831]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
    "info" : "IfStatement[25843-26197]:IfStatement[25843-26197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25879-25924]:Block[25879-25924]"
  }, {
    "left" : "result = nextQuotedValue('\\'');",
    "right" : "result = nextQuotedValue('\\'');",
    "info" : "ExpressionStatement[25887-25918]:ExpressionStatement[25887-25918]"
  }, {
    "left" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
    "info" : "IfStatement[25930-26197]:IfStatement[25930-26197]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25966-26010]:Block[25966-26010]"
  }, {
    "left" : "result = nextQuotedValue('\"');",
    "right" : "result = nextQuotedValue('\"');",
    "info" : "ExpressionStatement[25974-26004]:ExpressionStatement[25974-26004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26016-26197]:Block[26016-26197]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a name but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected a name but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[26024-26191]:ThrowStatement[26024-26191]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[26202-26223]:ExpressionStatement[26202-26223]"
  }, {
    "left" : "pathNames[stackSize - 1] = result;",
    "right" : "pathNames[stackSize - 1] = result;",
    "info" : "ExpressionStatement[26228-26262]:ExpressionStatement[26228-26262]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[26267-26281]:ReturnStatement[26267-26281]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[26606-26612]:Modifier[26606-26612]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[26613-26619]:SimpleType[26613-26619]"
  }, {
    "left" : "nextString",
    "right" : "nextString",
    "info" : "SimpleName[26620-26630]:SimpleName[26620-26630]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[26640-26651]:SimpleType[26640-26651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26652-27557]:Block[26652-27557]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[26658-26673]:VariableDeclarationStatement[26658-26673]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[26678-26727]:IfStatement[26678-26727]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26700-26727]:Block[26700-26727]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[26708-26721]:ExpressionStatement[26708-26721]"
  }, {
    "left" : "String result;",
    "right" : "String result;",
    "info" : "VariableDeclarationStatement[26732-26746]:VariableDeclarationStatement[26732-26746]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[26751-27474]:IfStatement[26751-27474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26777-26820]:Block[26777-26820]"
  }, {
    "left" : "result = nextUnquotedValue();",
    "right" : "result = nextUnquotedValue();",
    "info" : "ExpressionStatement[26785-26814]:ExpressionStatement[26785-26814]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED)",
    "info" : "IfStatement[26826-27474]:IfStatement[26826-27474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26857-26902]:Block[26857-26902]"
  }, {
    "left" : "result = nextQuotedValue('\\'');",
    "right" : "result = nextQuotedValue('\\'');",
    "info" : "ExpressionStatement[26865-26896]:ExpressionStatement[26865-26896]"
  }, {
    "left" : "if (p == PEEKED_DOUBLE_QUOTED)",
    "right" : "if (p == PEEKED_DOUBLE_QUOTED)",
    "info" : "IfStatement[26908-27474]:IfStatement[26908-27474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26939-26983]:Block[26939-26983]"
  }, {
    "left" : "result = nextQuotedValue('\"');",
    "right" : "result = nextQuotedValue('\"');",
    "info" : "ExpressionStatement[26947-26977]:ExpressionStatement[26947-26977]"
  }, {
    "left" : "if (p == PEEKED_BUFFERED)",
    "right" : "if (p == PEEKED_BUFFERED)",
    "info" : "IfStatement[26989-27474]:IfStatement[26989-27474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27015-27078]:Block[27015-27078]"
  }, {
    "left" : "result = peekedString;",
    "right" : "result = peekedString;",
    "info" : "ExpressionStatement[27023-27045]:ExpressionStatement[27023-27045]"
  }, {
    "left" : "peekedString = null;",
    "right" : "peekedString = null;",
    "info" : "ExpressionStatement[27052-27072]:ExpressionStatement[27052-27072]"
  }, {
    "left" : "if (p == PEEKED_LONG)",
    "right" : "if (p == PEEKED_LONG)",
    "info" : "IfStatement[27084-27474]:IfStatement[27084-27474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27106-27155]:Block[27106-27155]"
  }, {
    "left" : "result = Long.toString(peekedLong);",
    "right" : "result = Long.toString(peekedLong);",
    "info" : "ExpressionStatement[27114-27149]:ExpressionStatement[27114-27149]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[27161-27474]:IfStatement[27161-27474]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27185-27285]:Block[27185-27285]"
  }, {
    "left" : "result = new String(buffer, pos, peekedNumberLength);",
    "right" : "result = new String(buffer, pos, peekedNumberLength);",
    "info" : "ExpressionStatement[27193-27246]:ExpressionStatement[27193-27246]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[27253-27279]:ExpressionStatement[27253-27279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27291-27474]:Block[27291-27474]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a string but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected a string but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[27299-27468]:ThrowStatement[27299-27468]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[27479-27500]:ExpressionStatement[27479-27500]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[27505-27534]:ExpressionStatement[27505-27534]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[27539-27553]:ReturnStatement[27539-27553]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[27804-27810]:Modifier[27804-27810]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[27811-27818]:PrimitiveType[27811-27818]"
  }, {
    "left" : "nextBoolean",
    "right" : "nextBoolean",
    "info" : "SimpleName[27819-27830]:SimpleName[27819-27830]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[27840-27851]:SimpleType[27840-27851]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27852-28341]:Block[27852-28341]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[27858-27873]:VariableDeclarationStatement[27858-27873]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[27878-27927]:IfStatement[27878-27927]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27900-27927]:Block[27900-27927]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[27908-27921]:ExpressionStatement[27908-27921]"
  }, {
    "left" : "if (p == PEEKED_TRUE)",
    "right" : "if (p == PEEKED_TRUE)",
    "info" : "IfStatement[27932-28164]:IfStatement[27932-28164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27954-28044]:Block[27954-28044]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[27962-27983]:ExpressionStatement[27962-27983]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[27990-28019]:ExpressionStatement[27990-28019]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[28026-28038]:ReturnStatement[28026-28038]"
  }, {
    "left" : "if (p == PEEKED_FALSE)",
    "right" : "if (p == PEEKED_FALSE)",
    "info" : "IfStatement[28050-28164]:IfStatement[28050-28164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28073-28164]:Block[28073-28164]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[28081-28102]:ExpressionStatement[28081-28102]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[28109-28138]:ExpressionStatement[28109-28138]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[28145-28158]:ReturnStatement[28145-28158]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a boolean but was \" + peek()\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected a boolean but was \" + peek()\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[28169-28337]:ThrowStatement[28169-28337]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[28559-28565]:Modifier[28559-28565]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[28566-28570]:PrimitiveType[28566-28570]"
  }, {
    "left" : "nextNull",
    "right" : "nextNull",
    "info" : "SimpleName[28571-28579]:SimpleName[28571-28579]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[28589-28600]:SimpleType[28589-28600]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28601-28963]:Block[28601-28963]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[28607-28622]:VariableDeclarationStatement[28607-28622]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[28627-28676]:IfStatement[28627-28676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28649-28676]:Block[28649-28676]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[28657-28670]:ExpressionStatement[28657-28670]"
  }, {
    "left" : "if (p == PEEKED_NULL)",
    "right" : "if (p == PEEKED_NULL)",
    "info" : "IfStatement[28681-28959]:IfStatement[28681-28959]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28703-28774]:Block[28703-28774]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[28711-28732]:ExpressionStatement[28711-28732]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[28739-28768]:ExpressionStatement[28739-28768]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[28780-28959]:Block[28780-28959]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected null but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected null but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[28788-28953]:ThrowStatement[28788-28953]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[29422-29428]:Modifier[29422-29428]"
  }, {
    "left" : "double",
    "right" : "double",
    "info" : "PrimitiveType[29429-29435]:PrimitiveType[29429-29435]"
  }, {
    "left" : "nextDouble",
    "right" : "nextDouble",
    "info" : "SimpleName[29436-29446]:SimpleName[29436-29446]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[29456-29467]:SimpleType[29456-29467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29468-30760]:Block[29468-30760]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[29474-29489]:VariableDeclarationStatement[29474-29489]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[29494-29543]:IfStatement[29494-29543]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29516-29543]:Block[29516-29543]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[29524-29537]:ExpressionStatement[29524-29537]"
  }, {
    "left" : "if (p == PEEKED_LONG)",
    "right" : "if (p == PEEKED_LONG)",
    "info" : "IfStatement[29549-29676]:IfStatement[29549-29676]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29571-29676]:Block[29571-29676]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[29579-29600]:ExpressionStatement[29579-29600]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[29607-29636]:ExpressionStatement[29607-29636]"
  }, {
    "left" : "return (double) peekedLong;",
    "right" : "return (double) peekedLong;",
    "info" : "ReturnStatement[29643-29670]:ReturnStatement[29643-29670]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[29682-30259]:IfStatement[29682-30259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29706-29812]:Block[29706-29812]"
  }, {
    "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "info" : "ExpressionStatement[29714-29773]:ExpressionStatement[29714-29773]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[29780-29806]:ExpressionStatement[29780-29806]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
    "info" : "IfStatement[29818-30259]:IfStatement[29818-30259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29878-29963]:Block[29878-29963]"
  }, {
    "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "info" : "ExpressionStatement[29886-29957]:ExpressionStatement[29886-29957]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[29969-30259]:IfStatement[29969-30259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29995-30044]:Block[29995-30044]"
  }, {
    "left" : "peekedString = nextUnquotedValue();",
    "right" : "peekedString = nextUnquotedValue();",
    "info" : "ExpressionStatement[30003-30038]:ExpressionStatement[30003-30038]"
  }, {
    "left" : "if (p != PEEKED_BUFFERED)",
    "right" : "if (p != PEEKED_BUFFERED)",
    "info" : "IfStatement[30050-30259]:IfStatement[30050-30259]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30076-30259]:Block[30076-30259]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a double but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected a double but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[30084-30253]:ThrowStatement[30084-30253]"
  }, {
    "left" : "peeked = PEEKED_BUFFERED;",
    "right" : "peeked = PEEKED_BUFFERED;",
    "info" : "ExpressionStatement[30265-30290]:ExpressionStatement[30265-30290]"
  }, {
    "left" : "double result = Double.parseDouble(peekedString);",
    "right" : "double result = Double.parseDouble(peekedString);",
    "info" : "VariableDeclarationStatement[30295-30344]:VariableDeclarationStatement[30295-30344]"
  }, {
    "left" : "if (!lenient && (Double.isNaN(result) || Double.isInfinite(result)))",
    "right" : "if (!lenient && (Double.isNaN(result) || Double.isInfinite(result)))",
    "info" : "IfStatement[30392-30652]:IfStatement[30392-30652]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30461-30652]:Block[30461-30652]"
  }, {
    "left" : "throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new MalformedJsonException(\"JSON forbids NaN and infinities: \" + result\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[30469-30646]:ThrowStatement[30469-30646]"
  }, {
    "left" : "peekedString = null;",
    "right" : "peekedString = null;",
    "info" : "ExpressionStatement[30657-30677]:ExpressionStatement[30657-30677]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[30682-30703]:ExpressionStatement[30682-30703]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[30708-30737]:ExpressionStatement[30708-30737]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[30742-30756]:ReturnStatement[30742-30756]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[31303-31309]:Modifier[31303-31309]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[31310-31314]:PrimitiveType[31310-31314]"
  }, {
    "left" : "nextLong",
    "right" : "nextLong",
    "info" : "SimpleName[31315-31323]:SimpleName[31315-31323]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[31333-31344]:SimpleType[31333-31344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31345-32823]:Block[31345-32948]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[31351-31366]:VariableDeclarationStatement[31351-31366]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[31371-31420]:IfStatement[31371-31420]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31393-31420]:Block[31393-31420]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[31401-31414]:ExpressionStatement[31401-31414]"
  }, {
    "left" : "if (p == PEEKED_LONG)",
    "right" : "if (p == PEEKED_LONG)",
    "info" : "IfStatement[31426-31544]:IfStatement[31426-31544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31448-31544]:Block[31448-31544]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[31456-31477]:ExpressionStatement[31456-31477]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[31484-31513]:ExpressionStatement[31484-31513]"
  }, {
    "left" : "return peekedLong;",
    "right" : "return peekedLong;",
    "info" : "ReturnStatement[31520-31538]:ReturnStatement[31520-31538]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[31550-32280]:IfStatement[31550-32405]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31574-31680]:Block[31574-31680]"
  }, {
    "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "info" : "ExpressionStatement[31582-31641]:ExpressionStatement[31582-31641]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[31648-31674]:ExpressionStatement[31648-31674]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[31686-32280]:IfStatement[31686-32405]"
  }, {
    "left" : "p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED",
    "right" : "p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED",
    "info" : "InfixExpression[31690-31744]:InfixExpression[31690-31744]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31746-32093]:Block[31770-32218]"
  }, {
    "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "info" : "ExpressionStatement[31756-31827]:ExpressionStatement[31873-31944]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[31834-32087]:TryStatement[31959-32212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31838-31990]:Block[31963-32115]"
  }, {
    "left" : "long result = Long.parseLong(peekedString);",
    "right" : "long result = Long.parseLong(peekedString);",
    "info" : "VariableDeclarationStatement[31848-31891]:VariableDeclarationStatement[31973-32016]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[31900-31921]:ExpressionStatement[32025-32046]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[31930-31959]:ExpressionStatement[32055-32084]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[31968-31982]:ReturnStatement[32093-32107]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32029-32087]:Block[32154-32212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32099-32280]:Block[32224-32405]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a long but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected a long but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[32107-32274]:ThrowStatement[32232-32399]"
  }, {
    "left" : "peeked = PEEKED_BUFFERED;",
    "right" : "peeked = PEEKED_BUFFERED;",
    "info" : "ExpressionStatement[32286-32311]:ExpressionStatement[32411-32436]"
  }, {
    "left" : "double asDouble = Double.parseDouble(peekedString);",
    "right" : "double asDouble = Double.parseDouble(peekedString);",
    "info" : "VariableDeclarationStatement[32316-32367]:VariableDeclarationStatement[32441-32492]"
  }, {
    "left" : "long result = (long) asDouble;",
    "right" : "long result = (long) asDouble;",
    "info" : "VariableDeclarationStatement[32415-32445]:VariableDeclarationStatement[32540-32570]"
  }, {
    "left" : "if (result != asDouble)",
    "right" : "if (result != asDouble)",
    "info" : "IfStatement[32450-32715]:IfStatement[32575-32840]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32474-32715]:Block[32599-32840]"
  }, {
    "left" : "throw new NumberFormatException(\"Expected a long but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new NumberFormatException(\"Expected a long but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[32536-32709]:ThrowStatement[32661-32834]"
  }, {
    "left" : "peekedString = null;",
    "right" : "peekedString = null;",
    "info" : "ExpressionStatement[32720-32740]:ExpressionStatement[32845-32865]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[32745-32766]:ExpressionStatement[32870-32891]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[32771-32800]:ExpressionStatement[32896-32925]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[32805-32819]:ReturnStatement[32930-32944]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[33245-33252]:Modifier[33370-33377]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[33253-33259]:SimpleType[33378-33384]"
  }, {
    "left" : "nextQuotedValue",
    "right" : "nextQuotedValue",
    "info" : "SimpleName[33260-33275]:SimpleName[33385-33400]"
  }, {
    "left" : "char quote",
    "right" : "char quote",
    "info" : "SingleVariableDeclaration[33276-33286]:SingleVariableDeclaration[33401-33411]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[33295-33306]:SimpleType[33420-33431]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33307-34307]:Block[33432-34432]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[33406-33434]:VariableDeclarationStatement[33531-33559]"
  }, {
    "left" : "StringBuilder builder = new StringBuilder();",
    "right" : "StringBuilder builder = new StringBuilder();",
    "info" : "VariableDeclarationStatement[33439-33483]:VariableDeclarationStatement[33564-33608]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[33488-34303]:WhileStatement[33613-34428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33501-34303]:Block[33626-34428]"
  }, {
    "left" : "int p = pos;",
    "right" : "int p = pos;",
    "info" : "VariableDeclarationStatement[33509-33521]:VariableDeclarationStatement[33634-33646]"
  }, {
    "left" : "int l = limit;",
    "right" : "int l = limit;",
    "info" : "VariableDeclarationStatement[33528-33542]:VariableDeclarationStatement[33653-33667]"
  }, {
    "left" : "int start = p;",
    "right" : "int start = p;",
    "info" : "VariableDeclarationStatement[33627-33641]:VariableDeclarationStatement[33752-33766]"
  }, {
    "left" : "while (p < l)",
    "right" : "while (p < l)",
    "info" : "WhileStatement[33648-34147]:WhileStatement[33773-34272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33662-34147]:Block[33787-34272]"
  }, {
    "left" : "int c = buffer[p++];",
    "right" : "int c = buffer[p++];",
    "info" : "VariableDeclarationStatement[33672-33692]:VariableDeclarationStatement[33797-33817]"
  }, {
    "left" : "if (c == quote)",
    "right" : "if (c == quote)",
    "info" : "IfStatement[33702-34139]:IfStatement[33827-34264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33718-33841]:Block[33843-33966]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[33730-33738]:ExpressionStatement[33855-33863]"
  }, {
    "left" : "builder.append(buffer, start, p - start - 1);",
    "right" : "builder.append(buffer, start, p - start - 1);",
    "info" : "ExpressionStatement[33749-33794]:ExpressionStatement[33874-33919]"
  }, {
    "left" : "return builder.toString();",
    "right" : "return builder.toString();",
    "info" : "ReturnStatement[33805-33831]:ReturnStatement[33930-33956]"
  }, {
    "left" : "if (c == '\\\\')",
    "right" : "if (c == '\\\\')",
    "info" : "IfStatement[33847-34139]:IfStatement[33972-34264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33862-34058]:Block[33987-34183]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[33874-33882]:ExpressionStatement[33999-34007]"
  }, {
    "left" : "builder.append(buffer, start, p - start - 1);",
    "right" : "builder.append(buffer, start, p - start - 1);",
    "info" : "ExpressionStatement[33893-33938]:ExpressionStatement[34018-34063]"
  }, {
    "left" : "builder.append(readEscapeCharacter());",
    "right" : "builder.append(readEscapeCharacter());",
    "info" : "ExpressionStatement[33949-33987]:ExpressionStatement[34074-34112]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[33998-34006]:ExpressionStatement[34123-34131]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[34017-34027]:ExpressionStatement[34142-34152]"
  }, {
    "left" : "start = p;",
    "right" : "start = p;",
    "info" : "ExpressionStatement[34038-34048]:ExpressionStatement[34163-34173]"
  }, {
    "left" : "if (c == '\\n')",
    "right" : "if (c == '\\n')",
    "info" : "IfStatement[34064-34139]:IfStatement[34189-34264]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34079-34139]:Block[34204-34264]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[34091-34104]:ExpressionStatement[34216-34229]"
  }, {
    "left" : "lineStart = p;",
    "right" : "lineStart = p;",
    "info" : "ExpressionStatement[34115-34129]:ExpressionStatement[34240-34254]"
  }, {
    "left" : "builder.append(buffer, start, p - start);",
    "right" : "builder.append(buffer, start, p - start);",
    "info" : "ExpressionStatement[34155-34196]:ExpressionStatement[34280-34321]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[34203-34211]:ExpressionStatement[34328-34336]"
  }, {
    "left" : "if (!fillBuffer(1))",
    "right" : "if (!fillBuffer(1))",
    "info" : "IfStatement[34218-34297]:IfStatement[34343-34422]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34238-34297]:Block[34363-34422]"
  }, {
    "left" : "throw syntaxError(\"Unterminated string\");",
    "right" : "throw syntaxError(\"Unterminated string\");",
    "info" : "ThrowStatement[34248-34289]:ThrowStatement[34373-34414]"
  }, {
    "left" : "@SuppressWarnings(\"fallthrough\")",
    "right" : "@SuppressWarnings(\"fallthrough\")",
    "info" : "SingleMemberAnnotation[34367-34399]:SingleMemberAnnotation[34492-34524]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[34402-34409]:Modifier[34527-34534]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[34410-34416]:SimpleType[34535-34541]"
  }, {
    "left" : "nextUnquotedValue",
    "right" : "nextUnquotedValue",
    "info" : "SimpleName[34417-34434]:SimpleName[34542-34559]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[34444-34455]:SimpleType[34569-34580]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34456-35737]:Block[34581-35862]"
  }, {
    "left" : "StringBuilder builder = null;",
    "right" : "StringBuilder builder = null;",
    "info" : "VariableDeclarationStatement[34462-34491]:VariableDeclarationStatement[34587-34616]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[34496-34506]:VariableDeclarationStatement[34621-34631]"
  }, {
    "left" : "findNonLiteralCharacter:\n    while (true) {\n      for (; pos + i < limit; i++) {\n        switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }\n      }\n\n      // Attempt to load the entire literal into the buffer at once.\n      if (i < buffer.length) {\n        if (fillBuffer(i + 1)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n\n      // use a StringBuilder when the value is too long. This is too long to be a number!\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, pos, i);\n      pos += i;\n      i = 0;\n      if (!fillBuffer(1)) {\n        break;\n      }\n    }",
    "right" : "findNonLiteralCharacter:\n    while (true) {\n      for (; pos + i < limit; i++) {\n        switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }\n      }\n\n      // Attempt to load the entire literal into the buffer at once.\n      if (i < buffer.length) {\n        if (fillBuffer(i + 1)) {\n          continue;\n        } else {\n          break;\n        }\n      }\n\n      // use a StringBuilder when the value is too long. This is too long to be a number!\n      if (builder == null) {\n        builder = new StringBuilder();\n      }\n      builder.append(buffer, pos, i);\n      pos += i;\n      i = 0;\n      if (!fillBuffer(1)) {\n        break;\n      }\n    }",
    "info" : "LabeledStatement[34512-35518]:LabeledStatement[34637-35643]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[34541-35518]:WhileStatement[34666-35643]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34554-35518]:Block[34679-35643]"
  }, {
    "left" : "for (; pos + i < limit; i++)",
    "right" : "for (; pos + i < limit; i++)",
    "info" : "ForStatement[34562-35021]:ForStatement[34687-35146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34591-35021]:Block[34716-35146]"
  }, {
    "left" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }",
    "right" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          break findNonLiteralCharacter;\n        }",
    "info" : "SwitchStatement[34601-35013]:SwitchStatement[34726-35138]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[34636-34645]:SwitchCase[34761-34770]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[34654-34664]:SwitchCase[34779-34789]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[34673-34682]:SwitchCase[34798-34807]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[34691-34700]:SwitchCase[34816-34825]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[34709-34718]:SwitchCase[34834-34843]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[34729-34744]:ExpressionStatement[34854-34869]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[34769-34778]:SwitchCase[34894-34903]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[34787-34796]:SwitchCase[34912-34921]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[34805-34814]:SwitchCase[34930-34939]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[34823-34832]:SwitchCase[34948-34957]"
  }, {
    "left" : "case ':':",
    "right" : "case ':':",
    "info" : "SwitchCase[34841-34850]:SwitchCase[34966-34975]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[34859-34868]:SwitchCase[34984-34993]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[34877-34886]:SwitchCase[35002-35011]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[34895-34905]:SwitchCase[35020-35030]"
  }, {
    "left" : "case '\\f':",
    "right" : "case '\\f':",
    "info" : "SwitchCase[34914-34924]:SwitchCase[35039-35049]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[34933-34943]:SwitchCase[35058-35068]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[34952-34962]:SwitchCase[35077-35087]"
  }, {
    "left" : "break findNonLiteralCharacter;",
    "right" : "break findNonLiteralCharacter;",
    "info" : "BreakStatement[34973-35003]:BreakStatement[35098-35128]"
  }, {
    "left" : "if (i < buffer.length)",
    "right" : "if (i < buffer.length)",
    "info" : "IfStatement[35098-35227]:IfStatement[35223-35352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35121-35227]:Block[35246-35352]"
  }, {
    "left" : "if (fillBuffer(i + 1))",
    "right" : "if (fillBuffer(i + 1))",
    "info" : "IfStatement[35131-35219]:IfStatement[35256-35344]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35154-35185]:Block[35279-35310]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[35166-35175]:ContinueStatement[35291-35300]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35191-35219]:Block[35316-35344]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35203-35209]:BreakStatement[35328-35334]"
  }, {
    "left" : "if (builder == null)",
    "right" : "if (builder == null)",
    "info" : "IfStatement[35325-35394]:IfStatement[35450-35519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35346-35394]:Block[35471-35519]"
  }, {
    "left" : "builder = new StringBuilder();",
    "right" : "builder = new StringBuilder();",
    "info" : "ExpressionStatement[35356-35386]:ExpressionStatement[35481-35511]"
  }, {
    "left" : "builder.append(buffer, pos, i);",
    "right" : "builder.append(buffer, pos, i);",
    "info" : "ExpressionStatement[35401-35432]:ExpressionStatement[35526-35557]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[35439-35448]:ExpressionStatement[35564-35573]"
  }, {
    "left" : "i = 0;",
    "right" : "i = 0;",
    "info" : "ExpressionStatement[35455-35461]:ExpressionStatement[35580-35586]"
  }, {
    "left" : "if (!fillBuffer(1))",
    "right" : "if (!fillBuffer(1))",
    "info" : "IfStatement[35468-35512]:IfStatement[35593-35637]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35488-35512]:Block[35613-35637]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35498-35504]:BreakStatement[35623-35629]"
  }, {
    "left" : "String result;",
    "right" : "String result;",
    "info" : "VariableDeclarationStatement[35524-35538]:VariableDeclarationStatement[35649-35663]"
  }, {
    "left" : "if (builder == null)",
    "right" : "if (builder == null)",
    "info" : "IfStatement[35543-35700]:IfStatement[35668-35825]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35564-35614]:Block[35689-35739]"
  }, {
    "left" : "result = new String(buffer, pos, i);",
    "right" : "result = new String(buffer, pos, i);",
    "info" : "ExpressionStatement[35572-35608]:ExpressionStatement[35697-35733]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35620-35700]:Block[35745-35825]"
  }, {
    "left" : "builder.append(buffer, pos, i);",
    "right" : "builder.append(buffer, pos, i);",
    "info" : "ExpressionStatement[35628-35659]:ExpressionStatement[35753-35784]"
  }, {
    "left" : "result = builder.toString();",
    "right" : "result = builder.toString();",
    "info" : "ExpressionStatement[35666-35694]:ExpressionStatement[35791-35819]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[35705-35714]:ExpressionStatement[35830-35839]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[35719-35733]:ReturnStatement[35844-35858]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[35741-35748]:Modifier[35866-35873]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[35749-35753]:PrimitiveType[35874-35878]"
  }, {
    "left" : "skipQuotedValue",
    "right" : "skipQuotedValue",
    "info" : "SimpleName[35754-35769]:SimpleName[35879-35894]"
  }, {
    "left" : "char quote",
    "right" : "char quote",
    "info" : "SingleVariableDeclaration[35770-35780]:SingleVariableDeclaration[35895-35905]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[35789-35800]:SimpleType[35914-35925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35801-36486]:Block[35926-36611]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[35900-35928]:VariableDeclarationStatement[36025-36053]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[35933-36436]:DoStatement[36058-36561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35936-36413]:Block[36061-36538]"
  }, {
    "left" : "int p = pos;",
    "right" : "int p = pos;",
    "info" : "VariableDeclarationStatement[35944-35956]:VariableDeclarationStatement[36069-36081]"
  }, {
    "left" : "int l = limit;",
    "right" : "int l = limit;",
    "info" : "VariableDeclarationStatement[35963-35977]:VariableDeclarationStatement[36088-36102]"
  }, {
    "left" : "while (p < l)",
    "right" : "while (p < l)",
    "info" : "WhileStatement[36062-36392]:WhileStatement[36187-36517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36076-36392]:Block[36201-36517]"
  }, {
    "left" : "int c = buffer[p++];",
    "right" : "int c = buffer[p++];",
    "info" : "VariableDeclarationStatement[36086-36106]:VariableDeclarationStatement[36211-36231]"
  }, {
    "left" : "if (c == quote)",
    "right" : "if (c == quote)",
    "info" : "IfStatement[36115-36384]:IfStatement[36240-36509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36131-36179]:Block[36256-36304]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[36143-36151]:ExpressionStatement[36268-36276]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[36162-36169]:ReturnStatement[36287-36294]"
  }, {
    "left" : "if (c == '\\\\')",
    "right" : "if (c == '\\\\')",
    "info" : "IfStatement[36185-36384]:IfStatement[36310-36509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36200-36303]:Block[36325-36428]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[36212-36220]:ExpressionStatement[36337-36345]"
  }, {
    "left" : "readEscapeCharacter();",
    "right" : "readEscapeCharacter();",
    "info" : "ExpressionStatement[36231-36253]:ExpressionStatement[36356-36378]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[36264-36272]:ExpressionStatement[36389-36397]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[36283-36293]:ExpressionStatement[36408-36418]"
  }, {
    "left" : "if (c == '\\n')",
    "right" : "if (c == '\\n')",
    "info" : "IfStatement[36309-36384]:IfStatement[36434-36509]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36324-36384]:Block[36449-36509]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[36336-36349]:ExpressionStatement[36461-36474]"
  }, {
    "left" : "lineStart = p;",
    "right" : "lineStart = p;",
    "info" : "ExpressionStatement[36360-36374]:ExpressionStatement[36485-36499]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[36399-36407]:ExpressionStatement[36524-36532]"
  }, {
    "left" : "throw syntaxError(\"Unterminated string\");",
    "right" : "throw syntaxError(\"Unterminated string\");",
    "info" : "ThrowStatement[36441-36482]:ThrowStatement[36566-36607]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[36490-36497]:Modifier[36615-36622]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[36498-36502]:PrimitiveType[36623-36627]"
  }, {
    "left" : "skipUnquotedValue",
    "right" : "skipUnquotedValue",
    "info" : "SimpleName[36503-36520]:SimpleName[36628-36645]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[36530-36541]:SimpleType[36655-36666]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36542-37081]:Block[36667-37206]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[36548-37077]:DoStatement[36673-37202]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36551-37054]:Block[36676-37179]"
  }, {
    "left" : "int i = 0;",
    "right" : "int i = 0;",
    "info" : "VariableDeclarationStatement[36559-36569]:VariableDeclarationStatement[36684-36694]"
  }, {
    "left" : "for (; pos + i < limit; i++)",
    "right" : "for (; pos + i < limit; i++)",
    "info" : "ForStatement[36576-37032]:ForStatement[36701-37157]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36605-37032]:Block[36730-37157]"
  }, {
    "left" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos += i;\n          return;\n        }",
    "right" : "switch (buffer[pos + i]) {\n        case '/':\n        case '\\\\':\n        case ';':\n        case '#':\n        case '=':\n          checkLenient(); // fall-through\n        case '{':\n        case '}':\n        case '[':\n        case ']':\n        case ':':\n        case ',':\n        case ' ':\n        case '\\t':\n        case '\\f':\n        case '\\r':\n        case '\\n':\n          pos += i;\n          return;\n        }",
    "info" : "SwitchStatement[36615-37024]:SwitchStatement[36740-37149]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[36650-36659]:SwitchCase[36775-36784]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[36668-36678]:SwitchCase[36793-36803]"
  }, {
    "left" : "case ';':",
    "right" : "case ';':",
    "info" : "SwitchCase[36687-36696]:SwitchCase[36812-36821]"
  }, {
    "left" : "case '#':",
    "right" : "case '#':",
    "info" : "SwitchCase[36705-36714]:SwitchCase[36830-36839]"
  }, {
    "left" : "case '=':",
    "right" : "case '=':",
    "info" : "SwitchCase[36723-36732]:SwitchCase[36848-36857]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[36743-36758]:ExpressionStatement[36868-36883]"
  }, {
    "left" : "case '{':",
    "right" : "case '{':",
    "info" : "SwitchCase[36783-36792]:SwitchCase[36908-36917]"
  }, {
    "left" : "case '}':",
    "right" : "case '}':",
    "info" : "SwitchCase[36801-36810]:SwitchCase[36926-36935]"
  }, {
    "left" : "case '[':",
    "right" : "case '[':",
    "info" : "SwitchCase[36819-36828]:SwitchCase[36944-36953]"
  }, {
    "left" : "case ']':",
    "right" : "case ']':",
    "info" : "SwitchCase[36837-36846]:SwitchCase[36962-36971]"
  }, {
    "left" : "case ':':",
    "right" : "case ':':",
    "info" : "SwitchCase[36855-36864]:SwitchCase[36980-36989]"
  }, {
    "left" : "case ',':",
    "right" : "case ',':",
    "info" : "SwitchCase[36873-36882]:SwitchCase[36998-37007]"
  }, {
    "left" : "case ' ':",
    "right" : "case ' ':",
    "info" : "SwitchCase[36891-36900]:SwitchCase[37016-37025]"
  }, {
    "left" : "case '\\t':",
    "right" : "case '\\t':",
    "info" : "SwitchCase[36909-36919]:SwitchCase[37034-37044]"
  }, {
    "left" : "case '\\f':",
    "right" : "case '\\f':",
    "info" : "SwitchCase[36928-36938]:SwitchCase[37053-37063]"
  }, {
    "left" : "case '\\r':",
    "right" : "case '\\r':",
    "info" : "SwitchCase[36947-36957]:SwitchCase[37072-37082]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[36966-36976]:SwitchCase[37091-37101]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[36987-36996]:ExpressionStatement[37112-37121]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[37007-37014]:ReturnStatement[37132-37139]"
  }, {
    "left" : "pos += i;",
    "right" : "pos += i;",
    "info" : "ExpressionStatement[37039-37048]:ExpressionStatement[37164-37173]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[37622-37628]:Modifier[37747-37753]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[37629-37632]:PrimitiveType[37754-37757]"
  }, {
    "left" : "nextInt",
    "right" : "nextInt",
    "info" : "SimpleName[37633-37640]:SimpleName[37758-37765]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[37650-37661]:SimpleType[37775-37786]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37662-39452]:Block[37787-39702]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[37668-37683]:VariableDeclarationStatement[37793-37808]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[37688-37737]:IfStatement[37813-37862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37710-37737]:Block[37835-37862]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[37718-37731]:ExpressionStatement[37843-37856]"
  }, {
    "left" : "int result;",
    "right" : "int result;",
    "info" : "VariableDeclarationStatement[37743-37754]:VariableDeclarationStatement[37868-37879]"
  }, {
    "left" : "if (p == PEEKED_LONG)",
    "right" : "if (p == PEEKED_LONG)",
    "info" : "IfStatement[37759-38183]:IfStatement[37884-38308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37781-38183]:Block[37906-38308]"
  }, {
    "left" : "result = (int) peekedLong;",
    "right" : "result = (int) peekedLong;",
    "info" : "ExpressionStatement[37789-37815]:ExpressionStatement[37914-37940]"
  }, {
    "left" : "if (peekedLong != result)",
    "right" : "if (peekedLong != result)",
    "info" : "IfStatement[37822-38092]:IfStatement[37947-38217]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37848-38092]:Block[37973-38217]"
  }, {
    "left" : "throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new NumberFormatException(\"Expected an int but was \" + peekedLong\n            + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[37911-38084]:ThrowStatement[38036-38209]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[38099-38120]:ExpressionStatement[38224-38245]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[38127-38156]:ExpressionStatement[38252-38281]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[38163-38177]:ReturnStatement[38288-38302]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[38189-38916]:IfStatement[38314-39166]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38213-38319]:Block[38338-38444]"
  }, {
    "left" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "right" : "peekedString = new String(buffer, pos, peekedNumberLength);",
    "info" : "ExpressionStatement[38221-38280]:ExpressionStatement[38346-38405]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[38287-38313]:ExpressionStatement[38412-38438]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED || p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[38325-38916]:IfStatement[38450-39166]"
  }, {
    "left" : "p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED",
    "right" : "p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED",
    "info" : "InfixExpression[38329-38383]:InfixExpression[38454-38508]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38385-38729]:Block[38534-38979]"
  }, {
    "left" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "right" : "peekedString = nextQuotedValue(p == PEEKED_SINGLE_QUOTED ? '\\'' : '\"');",
    "info" : "ExpressionStatement[38395-38466]:ExpressionStatement[38637-38708]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[38473-38723]:TryStatement[38723-38973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38477-38626]:Block[38727-38876]"
  }, {
    "left" : "result = Integer.parseInt(peekedString);",
    "right" : "result = Integer.parseInt(peekedString);",
    "info" : "ExpressionStatement[38487-38527]:ExpressionStatement[38737-38777]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[38536-38557]:ExpressionStatement[38786-38807]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[38566-38595]:ExpressionStatement[38816-38845]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[38604-38618]:ReturnStatement[38854-38868]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38665-38723]:Block[38915-38973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38735-38916]:Block[38985-39166]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected an int but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new IllegalStateException(\"Expected an int but was \" + peek()\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[38743-38910]:ThrowStatement[38993-39160]"
  }, {
    "left" : "peeked = PEEKED_BUFFERED;",
    "right" : "peeked = PEEKED_BUFFERED;",
    "info" : "ExpressionStatement[38922-38947]:ExpressionStatement[39172-39197]"
  }, {
    "left" : "double asDouble = Double.parseDouble(peekedString);",
    "right" : "double asDouble = Double.parseDouble(peekedString);",
    "info" : "VariableDeclarationStatement[38952-39003]:VariableDeclarationStatement[39202-39253]"
  }, {
    "left" : "result = (int) asDouble;",
    "right" : "result = (int) asDouble;",
    "info" : "ExpressionStatement[39051-39075]:ExpressionStatement[39301-39325]"
  }, {
    "left" : "if (result != asDouble)",
    "right" : "if (result != asDouble)",
    "info" : "IfStatement[39080-39344]:IfStatement[39330-39594]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39104-39344]:Block[39354-39594]"
  }, {
    "left" : "throw new NumberFormatException(\"Expected an int but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new NumberFormatException(\"Expected an int but was \" + peekedString\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[39165-39338]:ThrowStatement[39415-39588]"
  }, {
    "left" : "peekedString = null;",
    "right" : "peekedString = null;",
    "info" : "ExpressionStatement[39349-39369]:ExpressionStatement[39599-39619]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[39374-39395]:ExpressionStatement[39624-39645]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[39400-39429]:ExpressionStatement[39650-39679]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[39434-39448]:ReturnStatement[39684-39698]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39540-39546]:Modifier[39790-39796]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39547-39551]:PrimitiveType[39797-39801]"
  }, {
    "left" : "close",
    "right" : "close",
    "info" : "SimpleName[39552-39557]:SimpleName[39802-39807]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[39567-39578]:SimpleType[39817-39828]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39579-39678]:Block[39829-39928]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[39585-39606]:ExpressionStatement[39835-39856]"
  }, {
    "left" : "stack[0] = JsonScope.CLOSED;",
    "right" : "stack[0] = JsonScope.CLOSED;",
    "info" : "ExpressionStatement[39611-39639]:ExpressionStatement[39861-39889]"
  }, {
    "left" : "stackSize = 1;",
    "right" : "stackSize = 1;",
    "info" : "ExpressionStatement[39644-39658]:ExpressionStatement[39894-39908]"
  }, {
    "left" : "in.close();",
    "right" : "in.close();",
    "info" : "ExpressionStatement[39663-39674]:ExpressionStatement[39913-39924]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[39907-39913]:Modifier[40157-40163]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39914-39918]:PrimitiveType[40164-40168]"
  }, {
    "left" : "skipValue",
    "right" : "skipValue",
    "info" : "SimpleName[39919-39928]:SimpleName[40169-40178]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[39938-39949]:SimpleType[40188-40199]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39950-40948]:Block[40200-41198]"
  }, {
    "left" : "int count = 0;",
    "right" : "int count = 0;",
    "info" : "VariableDeclarationStatement[39956-39970]:VariableDeclarationStatement[40206-40220]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[39975-40870]:DoStatement[40225-41120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39978-40850]:Block[40228-41100]"
  }, {
    "left" : "int p = peeked;",
    "right" : "int p = peeked;",
    "info" : "VariableDeclarationStatement[39986-40001]:VariableDeclarationStatement[40236-40251]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[40008-40061]:IfStatement[40258-40311]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40030-40061]:Block[40280-40311]"
  }, {
    "left" : "p = doPeek();",
    "right" : "p = doPeek();",
    "info" : "ExpressionStatement[40040-40053]:ExpressionStatement[40290-40303]"
  }, {
    "left" : "if (p == PEEKED_BEGIN_ARRAY)",
    "right" : "if (p == PEEKED_BEGIN_ARRAY)",
    "info" : "IfStatement[40069-40816]:IfStatement[40319-41066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40098-40161]:Block[40348-40411]"
  }, {
    "left" : "push(JsonScope.EMPTY_ARRAY);",
    "right" : "push(JsonScope.EMPTY_ARRAY);",
    "info" : "ExpressionStatement[40108-40136]:ExpressionStatement[40358-40386]"
  }, {
    "left" : "count++;",
    "right" : "count++;",
    "info" : "ExpressionStatement[40145-40153]:ExpressionStatement[40395-40403]"
  }, {
    "left" : "if (p == PEEKED_BEGIN_OBJECT)",
    "right" : "if (p == PEEKED_BEGIN_OBJECT)",
    "info" : "IfStatement[40167-40816]:IfStatement[40417-41066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40197-40261]:Block[40447-40511]"
  }, {
    "left" : "push(JsonScope.EMPTY_OBJECT);",
    "right" : "push(JsonScope.EMPTY_OBJECT);",
    "info" : "ExpressionStatement[40207-40236]:ExpressionStatement[40457-40486]"
  }, {
    "left" : "count++;",
    "right" : "count++;",
    "info" : "ExpressionStatement[40245-40253]:ExpressionStatement[40495-40503]"
  }, {
    "left" : "if (p == PEEKED_END_ARRAY)",
    "right" : "if (p == PEEKED_END_ARRAY)",
    "info" : "IfStatement[40267-40816]:IfStatement[40517-41066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40294-40341]:Block[40544-40591]"
  }, {
    "left" : "stackSize--;",
    "right" : "stackSize--;",
    "info" : "ExpressionStatement[40304-40316]:ExpressionStatement[40554-40566]"
  }, {
    "left" : "count--;",
    "right" : "count--;",
    "info" : "ExpressionStatement[40325-40333]:ExpressionStatement[40575-40583]"
  }, {
    "left" : "if (p == PEEKED_END_OBJECT)",
    "right" : "if (p == PEEKED_END_OBJECT)",
    "info" : "IfStatement[40347-40816]:IfStatement[40597-41066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40375-40422]:Block[40625-40672]"
  }, {
    "left" : "stackSize--;",
    "right" : "stackSize--;",
    "info" : "ExpressionStatement[40385-40397]:ExpressionStatement[40635-40647]"
  }, {
    "left" : "count--;",
    "right" : "count--;",
    "info" : "ExpressionStatement[40406-40414]:ExpressionStatement[40656-40664]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED)",
    "right" : "if (p == PEEKED_UNQUOTED_NAME || p == PEEKED_UNQUOTED)",
    "info" : "IfStatement[40428-40816]:IfStatement[40678-41066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40483-40521]:Block[40733-40771]"
  }, {
    "left" : "skipUnquotedValue();",
    "right" : "skipUnquotedValue();",
    "info" : "ExpressionStatement[40493-40513]:ExpressionStatement[40743-40763]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_SINGLE_QUOTED_NAME)",
    "info" : "IfStatement[40527-40816]:IfStatement[40777-41066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40592-40632]:Block[40842-40882]"
  }, {
    "left" : "skipQuotedValue('\\'');",
    "right" : "skipQuotedValue('\\'');",
    "info" : "ExpressionStatement[40602-40624]:ExpressionStatement[40852-40874]"
  }, {
    "left" : "if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_DOUBLE_QUOTED || p == PEEKED_DOUBLE_QUOTED_NAME)",
    "info" : "IfStatement[40638-40816]:IfStatement[40888-41066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40703-40742]:Block[40953-40992]"
  }, {
    "left" : "skipQuotedValue('\"');",
    "right" : "skipQuotedValue('\"');",
    "info" : "ExpressionStatement[40713-40734]:ExpressionStatement[40963-40984]"
  }, {
    "left" : "if (p == PEEKED_NUMBER)",
    "right" : "if (p == PEEKED_NUMBER)",
    "info" : "IfStatement[40748-40816]:IfStatement[40998-41066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40772-40816]:Block[41022-41066]"
  }, {
    "left" : "pos += peekedNumberLength;",
    "right" : "pos += peekedNumberLength;",
    "info" : "ExpressionStatement[40782-40808]:ExpressionStatement[41032-41058]"
  }, {
    "left" : "peeked = PEEKED_NONE;",
    "right" : "peeked = PEEKED_NONE;",
    "info" : "ExpressionStatement[40823-40844]:ExpressionStatement[41073-41094]"
  }, {
    "left" : "pathIndices[stackSize - 1]++;",
    "right" : "pathIndices[stackSize - 1]++;",
    "info" : "ExpressionStatement[40876-40905]:ExpressionStatement[41126-41155]"
  }, {
    "left" : "pathNames[stackSize - 1] = \"null\";",
    "right" : "pathNames[stackSize - 1] = \"null\";",
    "info" : "ExpressionStatement[40910-40944]:ExpressionStatement[41160-41194]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[40952-40959]:Modifier[41202-41209]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[40960-40964]:PrimitiveType[41210-41214]"
  }, {
    "left" : "push",
    "right" : "push",
    "info" : "SimpleName[40965-40969]:SimpleName[41215-41219]"
  }, {
    "left" : "int newTop",
    "right" : "int newTop",
    "info" : "SingleVariableDeclaration[40970-40980]:SingleVariableDeclaration[41220-41230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40982-41506]:Block[41232-41756]"
  }, {
    "left" : "if (stackSize == stack.length)",
    "right" : "if (stackSize == stack.length)",
    "info" : "IfStatement[40988-41469]:IfStatement[41238-41719]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41019-41469]:Block[41269-41719]"
  }, {
    "left" : "int[] newStack = new int[stackSize * 2];",
    "right" : "int[] newStack = new int[stackSize * 2];",
    "info" : "VariableDeclarationStatement[41027-41067]:VariableDeclarationStatement[41277-41317]"
  }, {
    "left" : "int[] newPathIndices = new int[stackSize * 2];",
    "right" : "int[] newPathIndices = new int[stackSize * 2];",
    "info" : "VariableDeclarationStatement[41074-41120]:VariableDeclarationStatement[41324-41370]"
  }, {
    "left" : "String[] newPathNames = new String[stackSize * 2];",
    "right" : "String[] newPathNames = new String[stackSize * 2];",
    "info" : "VariableDeclarationStatement[41127-41177]:VariableDeclarationStatement[41377-41427]"
  }, {
    "left" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
    "right" : "System.arraycopy(stack, 0, newStack, 0, stackSize);",
    "info" : "ExpressionStatement[41184-41235]:ExpressionStatement[41434-41485]"
  }, {
    "left" : "System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);",
    "right" : "System.arraycopy(pathIndices, 0, newPathIndices, 0, stackSize);",
    "info" : "ExpressionStatement[41242-41305]:ExpressionStatement[41492-41555]"
  }, {
    "left" : "System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);",
    "right" : "System.arraycopy(pathNames, 0, newPathNames, 0, stackSize);",
    "info" : "ExpressionStatement[41312-41371]:ExpressionStatement[41562-41621]"
  }, {
    "left" : "stack = newStack;",
    "right" : "stack = newStack;",
    "info" : "ExpressionStatement[41378-41395]:ExpressionStatement[41628-41645]"
  }, {
    "left" : "pathIndices = newPathIndices;",
    "right" : "pathIndices = newPathIndices;",
    "info" : "ExpressionStatement[41402-41431]:ExpressionStatement[41652-41681]"
  }, {
    "left" : "pathNames = newPathNames;",
    "right" : "pathNames = newPathNames;",
    "info" : "ExpressionStatement[41438-41463]:ExpressionStatement[41688-41713]"
  }, {
    "left" : "stack[stackSize++] = newTop;",
    "right" : "stack[stackSize++] = newTop;",
    "info" : "ExpressionStatement[41474-41502]:ExpressionStatement[41724-41752]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[41675-41682]:Modifier[41925-41932]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41683-41690]:PrimitiveType[41933-41940]"
  }, {
    "left" : "fillBuffer",
    "right" : "fillBuffer",
    "info" : "SimpleName[41691-41701]:SimpleName[41941-41951]"
  }, {
    "left" : "int minimum",
    "right" : "int minimum",
    "info" : "SingleVariableDeclaration[41702-41713]:SingleVariableDeclaration[41952-41963]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[41722-41733]:SimpleType[41972-41983]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41734-42380]:Block[41984-42630]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[41740-41768]:VariableDeclarationStatement[41990-42018]"
  }, {
    "left" : "lineStart -= pos;",
    "right" : "lineStart -= pos;",
    "info" : "ExpressionStatement[41773-41790]:ExpressionStatement[42023-42040]"
  }, {
    "left" : "if (limit != pos)",
    "right" : "if (limit != pos)",
    "info" : "IfStatement[41795-41925]:IfStatement[42045-42175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41813-41895]:Block[42063-42145]"
  }, {
    "left" : "limit -= pos;",
    "right" : "limit -= pos;",
    "info" : "ExpressionStatement[41821-41834]:ExpressionStatement[42071-42084]"
  }, {
    "left" : "System.arraycopy(buffer, pos, buffer, 0, limit);",
    "right" : "System.arraycopy(buffer, pos, buffer, 0, limit);",
    "info" : "ExpressionStatement[41841-41889]:ExpressionStatement[42091-42139]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41901-41925]:Block[42151-42175]"
  }, {
    "left" : "limit = 0;",
    "right" : "limit = 0;",
    "info" : "ExpressionStatement[41909-41919]:ExpressionStatement[42159-42169]"
  }, {
    "left" : "pos = 0;",
    "right" : "pos = 0;",
    "info" : "ExpressionStatement[41931-41939]:ExpressionStatement[42181-42189]"
  }, {
    "left" : "int total;",
    "right" : "int total;",
    "info" : "VariableDeclarationStatement[41944-41954]:VariableDeclarationStatement[42194-42204]"
  }, {
    "left" : "while ((total = in.read(buffer, limit, buffer.length - limit)) != -1)",
    "right" : "while ((total = in.read(buffer, limit, buffer.length - limit)) != -1)",
    "info" : "WhileStatement[41959-42358]:WhileStatement[42209-42608]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42029-42358]:Block[42279-42608]"
  }, {
    "left" : "limit += total;",
    "right" : "limit += total;",
    "info" : "ExpressionStatement[42037-42052]:ExpressionStatement[42287-42302]"
  }, {
    "left" : "if (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff')",
    "right" : "if (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\\ufeff')",
    "info" : "IfStatement[42151-42292]:IfStatement[42401-42542]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42228-42292]:Block[42478-42542]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[42238-42244]:ExpressionStatement[42488-42494]"
  }, {
    "left" : "lineStart++;",
    "right" : "lineStart++;",
    "info" : "ExpressionStatement[42253-42265]:ExpressionStatement[42503-42515]"
  }, {
    "left" : "minimum++;",
    "right" : "minimum++;",
    "info" : "ExpressionStatement[42274-42284]:ExpressionStatement[42524-42534]"
  }, {
    "left" : "if (limit >= minimum)",
    "right" : "if (limit >= minimum)",
    "info" : "IfStatement[42300-42352]:IfStatement[42550-42602]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42322-42352]:Block[42572-42602]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[42332-42344]:ReturnStatement[42582-42594]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[42363-42376]:ReturnStatement[42613-42626]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[42384-42387]:PrimitiveType[42634-42637]"
  }, {
    "left" : "getLineNumber",
    "right" : "getLineNumber",
    "info" : "SimpleName[42388-42401]:SimpleName[42638-42651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42404-42436]:Block[42654-42686]"
  }, {
    "left" : "return lineNumber + 1;",
    "right" : "return lineNumber + 1;",
    "info" : "ReturnStatement[42410-42432]:ReturnStatement[42660-42682]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[42440-42443]:PrimitiveType[42690-42693]"
  }, {
    "left" : "getColumnNumber",
    "right" : "getColumnNumber",
    "info" : "SimpleName[42444-42459]:SimpleName[42694-42709]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42462-42499]:Block[42712-42749]"
  }, {
    "left" : "return pos - lineStart + 1;",
    "right" : "return pos - lineStart + 1;",
    "info" : "ReturnStatement[42468-42495]:ReturnStatement[42718-42745]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[42801-42808]:Modifier[43051-43058]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[42809-42812]:PrimitiveType[43059-43062]"
  }, {
    "left" : "nextNonWhitespace",
    "right" : "nextNonWhitespace",
    "info" : "SimpleName[42813-42830]:SimpleName[43063-43080]"
  }, {
    "left" : "boolean throwOnEof",
    "right" : "boolean throwOnEof",
    "info" : "SingleVariableDeclaration[42831-42849]:SingleVariableDeclaration[43081-43099]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[42858-42869]:SimpleType[43108-43119]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42870-45205]:Block[43120-45455]"
  }, {
    "left" : "char[] buffer = this.buffer;",
    "right" : "char[] buffer = this.buffer;",
    "info" : "VariableDeclarationStatement[43355-43383]:VariableDeclarationStatement[43605-43633]"
  }, {
    "left" : "int p = pos;",
    "right" : "int p = pos;",
    "info" : "VariableDeclarationStatement[43388-43400]:VariableDeclarationStatement[43638-43650]"
  }, {
    "left" : "int l = limit;",
    "right" : "int l = limit;",
    "info" : "VariableDeclarationStatement[43405-43419]:VariableDeclarationStatement[43655-43669]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[43424-45022]:WhileStatement[43674-45272]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43437-45022]:Block[43687-45272]"
  }, {
    "left" : "if (p == l)",
    "right" : "if (p == l)",
    "info" : "IfStatement[43445-43576]:IfStatement[43695-43826]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43457-43576]:Block[43707-43826]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[43467-43475]:ExpressionStatement[43717-43725]"
  }, {
    "left" : "if (!fillBuffer(1))",
    "right" : "if (!fillBuffer(1))",
    "info" : "IfStatement[43484-43532]:IfStatement[43734-43782]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43504-43532]:Block[43754-43782]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[43516-43522]:BreakStatement[43766-43772]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[43541-43549]:ExpressionStatement[43791-43799]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[43558-43568]:ExpressionStatement[43808-43818]"
  }, {
    "left" : "int c = buffer[p++];",
    "right" : "int c = buffer[p++];",
    "info" : "VariableDeclarationStatement[43584-43604]:VariableDeclarationStatement[43834-43854]"
  }, {
    "left" : "if (c == '\\n')",
    "right" : "if (c == '\\n')",
    "info" : "IfStatement[43611-43771]:IfStatement[43861-44021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43626-43698]:Block[43876-43948]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[43636-43649]:ExpressionStatement[43886-43899]"
  }, {
    "left" : "lineStart = p;",
    "right" : "lineStart = p;",
    "info" : "ExpressionStatement[43658-43672]:ExpressionStatement[43908-43922]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[43681-43690]:ContinueStatement[43931-43940]"
  }, {
    "left" : "if (c == ' ' || c == '\\r' || c == '\\t')",
    "right" : "if (c == ' ' || c == '\\r' || c == '\\t')",
    "info" : "IfStatement[43704-43771]:IfStatement[43954-44021]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43744-43771]:Block[43994-44021]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[43754-43763]:ContinueStatement[44004-44013]"
  }, {
    "left" : "if (c == '/')",
    "right" : "if (c == '/')",
    "info" : "IfStatement[43779-45016]:IfStatement[44029-45266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43793-44628]:Block[44043-44878]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[43803-43811]:ExpressionStatement[44053-44061]"
  }, {
    "left" : "if (p == l)",
    "right" : "if (p == l)",
    "info" : "IfStatement[43820-44083]:IfStatement[44070-44333]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43832-44083]:Block[44082-44333]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[43844-43850]:ExpressionStatement[44094-44100]"
  }, {
    "left" : "boolean charsLoaded = fillBuffer(2);",
    "right" : "boolean charsLoaded = fillBuffer(2);",
    "info" : "VariableDeclarationStatement[43931-43967]:VariableDeclarationStatement[44181-44217]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[43978-43984]:ExpressionStatement[44228-44234]"
  }, {
    "left" : "if (!charsLoaded)",
    "right" : "if (!charsLoaded)",
    "info" : "IfStatement[44020-44073]:IfStatement[44270-44323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44038-44073]:Block[44288-44323]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[44052-44061]:ReturnStatement[44302-44311]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[44093-44108]:ExpressionStatement[44343-44358]"
  }, {
    "left" : "char peek = buffer[pos];",
    "right" : "char peek = buffer[pos];",
    "info" : "VariableDeclarationStatement[44117-44141]:VariableDeclarationStatement[44367-44391]"
  }, {
    "left" : "switch (peek) {\n        case '*':\n          // skip a /* c-style comment */\n          pos++;\n          if (!skipTo(\"*/\")) {\n            throw syntaxError(\"Unterminated comment\");\n          }\n          p = pos + 2;\n          l = limit;\n          continue;\n\n        case '/':\n          // skip a // end-of-line comment\n          pos++;\n          skipToEndOfLine();\n          p = pos;\n          l = limit;\n          continue;\n\n        default:\n          return c;\n        }",
    "right" : "switch (peek) {\n        case '*':\n          // skip a /* c-style comment */\n          pos++;\n          if (!skipTo(\"*/\")) {\n            throw syntaxError(\"Unterminated comment\");\n          }\n          p = pos + 2;\n          l = limit;\n          continue;\n\n        case '/':\n          // skip a // end-of-line comment\n          pos++;\n          skipToEndOfLine();\n          p = pos;\n          l = limit;\n          continue;\n\n        default:\n          return c;\n        }",
    "info" : "SwitchStatement[44150-44620]:SwitchStatement[44400-44870]"
  }, {
    "left" : "case '*':",
    "right" : "case '*':",
    "info" : "SwitchCase[44174-44183]:SwitchCase[44424-44433]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[44236-44242]:ExpressionStatement[44486-44492]"
  }, {
    "left" : "if (!skipTo(\"*/\"))",
    "right" : "if (!skipTo(\"*/\"))",
    "info" : "IfStatement[44253-44340]:IfStatement[44503-44590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44272-44340]:Block[44522-44590]"
  }, {
    "left" : "throw syntaxError(\"Unterminated comment\");",
    "right" : "throw syntaxError(\"Unterminated comment\");",
    "info" : "ThrowStatement[44286-44328]:ThrowStatement[44536-44578]"
  }, {
    "left" : "p = pos + 2;",
    "right" : "p = pos + 2;",
    "info" : "ExpressionStatement[44351-44363]:ExpressionStatement[44601-44613]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[44374-44384]:ExpressionStatement[44624-44634]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[44395-44404]:ContinueStatement[44645-44654]"
  }, {
    "left" : "case '/':",
    "right" : "case '/':",
    "info" : "SwitchCase[44414-44423]:SwitchCase[44664-44673]"
  }, {
    "left" : "pos++;",
    "right" : "pos++;",
    "info" : "ExpressionStatement[44477-44483]:ExpressionStatement[44727-44733]"
  }, {
    "left" : "skipToEndOfLine();",
    "right" : "skipToEndOfLine();",
    "info" : "ExpressionStatement[44494-44512]:ExpressionStatement[44744-44762]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[44523-44531]:ExpressionStatement[44773-44781]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[44542-44552]:ExpressionStatement[44792-44802]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[44563-44572]:ContinueStatement[44813-44822]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[44582-44590]:SwitchCase[44832-44840]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[44601-44610]:ReturnStatement[44851-44860]"
  }, {
    "left" : "if (c == '#')",
    "right" : "if (c == '#')",
    "info" : "IfStatement[44634-45016]:IfStatement[44884-45266]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44648-44966]:Block[44898-45216]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[44658-44666]:ExpressionStatement[44908-44916]"
  }, {
    "left" : "checkLenient();",
    "right" : "checkLenient();",
    "info" : "ExpressionStatement[44880-44895]:ExpressionStatement[45130-45145]"
  }, {
    "left" : "skipToEndOfLine();",
    "right" : "skipToEndOfLine();",
    "info" : "ExpressionStatement[44904-44922]:ExpressionStatement[45154-45172]"
  }, {
    "left" : "p = pos;",
    "right" : "p = pos;",
    "info" : "ExpressionStatement[44931-44939]:ExpressionStatement[45181-45189]"
  }, {
    "left" : "l = limit;",
    "right" : "l = limit;",
    "info" : "ExpressionStatement[44948-44958]:ExpressionStatement[45198-45208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44972-45016]:Block[45222-45266]"
  }, {
    "left" : "pos = p;",
    "right" : "pos = p;",
    "info" : "ExpressionStatement[44982-44990]:ExpressionStatement[45232-45240]"
  }, {
    "left" : "return c;",
    "right" : "return c;",
    "info" : "ReturnStatement[44999-45008]:ReturnStatement[45249-45258]"
  }, {
    "left" : "if (throwOnEof)",
    "right" : "if (throwOnEof)",
    "info" : "IfStatement[45027-45201]:IfStatement[45277-45451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45043-45171]:Block[45293-45421]"
  }, {
    "left" : "throw new EOFException(\"End of input\"\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
    "right" : "throw new EOFException(\"End of input\"\n          + \" at line \" + getLineNumber() + \" column \" + getColumnNumber());",
    "info" : "ThrowStatement[45051-45165]:ThrowStatement[45301-45415]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45177-45201]:Block[45427-45451]"
  }, {
    "left" : "return -1;",
    "right" : "return -1;",
    "info" : "ReturnStatement[45185-45195]:ReturnStatement[45435-45445]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45209-45216]:Modifier[45459-45466]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45217-45221]:PrimitiveType[45467-45471]"
  }, {
    "left" : "checkLenient",
    "right" : "checkLenient",
    "info" : "SimpleName[45222-45234]:SimpleName[45472-45484]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[45244-45255]:SimpleType[45494-45505]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45256-45372]:Block[45506-45622]"
  }, {
    "left" : "if (!lenient)",
    "right" : "if (!lenient)",
    "info" : "IfStatement[45262-45368]:IfStatement[45512-45618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45276-45368]:Block[45526-45618]"
  }, {
    "left" : "throw syntaxError(\"Use JsonReader.setLenient(true) to accept malformed JSON\");",
    "right" : "throw syntaxError(\"Use JsonReader.setLenient(true) to accept malformed JSON\");",
    "info" : "ThrowStatement[45284-45362]:ThrowStatement[45534-45612]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45557-45564]:Modifier[45807-45814]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[45565-45569]:PrimitiveType[45815-45819]"
  }, {
    "left" : "skipToEndOfLine",
    "right" : "skipToEndOfLine",
    "info" : "SimpleName[45570-45585]:SimpleName[45820-45835]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[45595-45606]:SimpleType[45845-45856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45607-45829]:Block[45857-46079]"
  }, {
    "left" : "while (pos < limit || fillBuffer(1))",
    "right" : "while (pos < limit || fillBuffer(1))",
    "info" : "WhileStatement[45613-45825]:WhileStatement[45863-46075]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45650-45825]:Block[45900-46075]"
  }, {
    "left" : "char c = buffer[pos++];",
    "right" : "char c = buffer[pos++];",
    "info" : "VariableDeclarationStatement[45658-45681]:VariableDeclarationStatement[45908-45931]"
  }, {
    "left" : "if (c == '\\n')",
    "right" : "if (c == '\\n')",
    "info" : "IfStatement[45688-45819]:IfStatement[45938-46069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45703-45774]:Block[45953-46024]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[45713-45726]:ExpressionStatement[45963-45976]"
  }, {
    "left" : "lineStart = pos;",
    "right" : "lineStart = pos;",
    "info" : "ExpressionStatement[45735-45751]:ExpressionStatement[45985-46001]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[45760-45766]:BreakStatement[46010-46016]"
  }, {
    "left" : "if (c == '\\r')",
    "right" : "if (c == '\\r')",
    "info" : "IfStatement[45780-45819]:IfStatement[46030-46069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45795-45819]:Block[46045-46069]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[45805-45811]:BreakStatement[46055-46061]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[45916-45923]:Modifier[46166-46173]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45924-45931]:PrimitiveType[46174-46181]"
  }, {
    "left" : "skipTo",
    "right" : "skipTo",
    "info" : "SimpleName[45932-45938]:SimpleName[46182-46188]"
  }, {
    "left" : "String toFind",
    "right" : "String toFind",
    "info" : "SingleVariableDeclaration[45939-45952]:SingleVariableDeclaration[46189-46202]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[45961-45972]:SimpleType[46211-46222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45973-46370]:Block[46223-46620]"
  }, {
    "left" : "outer:\n    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n      if (buffer[pos] == '\\n') {\n        lineNumber++;\n        lineStart = pos + 1;\n        continue;\n      }\n      for (int c = 0; c < toFind.length(); c++) {\n        if (buffer[pos + c] != toFind.charAt(c)) {\n          continue outer;\n        }\n      }\n      return true;\n    }",
    "right" : "outer:\n    for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++) {\n      if (buffer[pos] == '\\n') {\n        lineNumber++;\n        lineStart = pos + 1;\n        continue;\n      }\n      for (int c = 0; c < toFind.length(); c++) {\n        if (buffer[pos + c] != toFind.charAt(c)) {\n          continue outer;\n        }\n      }\n      return true;\n    }",
    "info" : "LabeledStatement[45979-46348]:LabeledStatement[46229-46598]"
  }, {
    "left" : "for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++)",
    "right" : "for (; pos + toFind.length() <= limit || fillBuffer(toFind.length()); pos++)",
    "info" : "ForStatement[45990-46348]:ForStatement[46240-46598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46067-46348]:Block[46317-46598]"
  }, {
    "left" : "if (buffer[pos] == '\\n')",
    "right" : "if (buffer[pos] == '\\n')",
    "info" : "IfStatement[46075-46178]:IfStatement[46325-46428]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46100-46178]:Block[46350-46428]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[46110-46123]:ExpressionStatement[46360-46373]"
  }, {
    "left" : "lineStart = pos + 1;",
    "right" : "lineStart = pos + 1;",
    "info" : "ExpressionStatement[46132-46152]:ExpressionStatement[46382-46402]"
  }, {
    "left" : "continue;",
    "right" : "continue;",
    "info" : "ContinueStatement[46161-46170]:ContinueStatement[46411-46420]"
  }, {
    "left" : "for (int c = 0; c < toFind.length(); c++)",
    "right" : "for (int c = 0; c < toFind.length(); c++)",
    "info" : "ForStatement[46185-46323]:ForStatement[46435-46573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46227-46323]:Block[46477-46573]"
  }, {
    "left" : "if (buffer[pos + c] != toFind.charAt(c))",
    "right" : "if (buffer[pos + c] != toFind.charAt(c))",
    "info" : "IfStatement[46237-46315]:IfStatement[46487-46565]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46278-46315]:Block[46528-46565]"
  }, {
    "left" : "continue outer;",
    "right" : "continue outer;",
    "info" : "ContinueStatement[46290-46305]:ContinueStatement[46540-46555]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[46330-46342]:ReturnStatement[46580-46592]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46353-46366]:ReturnStatement[46603-46616]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[46374-46383]:MarkerAnnotation[46624-46633]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46384-46390]:Modifier[46634-46640]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[46391-46397]:SimpleType[46641-46647]"
  }, {
    "left" : "toString",
    "right" : "toString",
    "info" : "SimpleName[46398-46406]:SimpleName[46648-46656]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46409-46526]:Block[46659-46776]"
  }, {
    "left" : "return getClass().getSimpleName()\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();",
    "right" : "return getClass().getSimpleName()\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber();",
    "info" : "ReturnStatement[46415-46522]:ReturnStatement[46665-46772]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[46667-46673]:Modifier[46917-46923]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[46674-46680]:SimpleType[46924-46930]"
  }, {
    "left" : "getPath",
    "right" : "getPath",
    "info" : "SimpleName[46681-46688]:SimpleName[46931-46938]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46691-47422]:Block[46941-47672]"
  }, {
    "left" : "StringBuilder result = new StringBuilder().append('$');",
    "right" : "StringBuilder result = new StringBuilder().append('$');",
    "info" : "VariableDeclarationStatement[46697-46752]:VariableDeclarationStatement[46947-47002]"
  }, {
    "left" : "for (int i = 0, size = stackSize; i < size; i++)",
    "right" : "for (int i = 0, size = stackSize; i < size; i++)",
    "info" : "ForStatement[46757-47388]:ForStatement[47007-47638]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46806-47388]:Block[47056-47638]"
  }, {
    "left" : "switch (stack[i]) {\n        case JsonScope.EMPTY_ARRAY:\n        case JsonScope.NONEMPTY_ARRAY:\n          result.append('[').append(pathIndices[i]).append(']');\n          break;\n\n        case JsonScope.EMPTY_OBJECT:\n        case JsonScope.DANGLING_NAME:\n        case JsonScope.NONEMPTY_OBJECT:\n          result.append('.');\n          if (pathNames[i] != null) {\n            result.append(pathNames[i]);\n          }\n          break;\n\n        case JsonScope.NONEMPTY_DOCUMENT:\n        case JsonScope.EMPTY_DOCUMENT:\n        case JsonScope.CLOSED:\n          break;\n      }",
    "right" : "switch (stack[i]) {\n        case JsonScope.EMPTY_ARRAY:\n        case JsonScope.NONEMPTY_ARRAY:\n          result.append('[').append(pathIndices[i]).append(']');\n          break;\n\n        case JsonScope.EMPTY_OBJECT:\n        case JsonScope.DANGLING_NAME:\n        case JsonScope.NONEMPTY_OBJECT:\n          result.append('.');\n          if (pathNames[i] != null) {\n            result.append(pathNames[i]);\n          }\n          break;\n\n        case JsonScope.NONEMPTY_DOCUMENT:\n        case JsonScope.EMPTY_DOCUMENT:\n        case JsonScope.CLOSED:\n          break;\n      }",
    "info" : "SwitchStatement[46814-47382]:SwitchStatement[47064-47632]"
  }, {
    "left" : "case JsonScope.EMPTY_ARRAY:",
    "right" : "case JsonScope.EMPTY_ARRAY:",
    "info" : "SwitchCase[46842-46869]:SwitchCase[47092-47119]"
  }, {
    "left" : "case JsonScope.NONEMPTY_ARRAY:",
    "right" : "case JsonScope.NONEMPTY_ARRAY:",
    "info" : "SwitchCase[46878-46908]:SwitchCase[47128-47158]"
  }, {
    "left" : "result.append('[').append(pathIndices[i]).append(']');",
    "right" : "result.append('[').append(pathIndices[i]).append(']');",
    "info" : "ExpressionStatement[46919-46973]:ExpressionStatement[47169-47223]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[46984-46990]:BreakStatement[47234-47240]"
  }, {
    "left" : "case JsonScope.EMPTY_OBJECT:",
    "right" : "case JsonScope.EMPTY_OBJECT:",
    "info" : "SwitchCase[47000-47028]:SwitchCase[47250-47278]"
  }, {
    "left" : "case JsonScope.DANGLING_NAME:",
    "right" : "case JsonScope.DANGLING_NAME:",
    "info" : "SwitchCase[47037-47066]:SwitchCase[47287-47316]"
  }, {
    "left" : "case JsonScope.NONEMPTY_OBJECT:",
    "right" : "case JsonScope.NONEMPTY_OBJECT:",
    "info" : "SwitchCase[47075-47106]:SwitchCase[47325-47356]"
  }, {
    "left" : "result.append('.');",
    "right" : "result.append('.');",
    "info" : "ExpressionStatement[47117-47136]:ExpressionStatement[47367-47386]"
  }, {
    "left" : "if (pathNames[i] != null)",
    "right" : "if (pathNames[i] != null)",
    "info" : "IfStatement[47147-47227]:IfStatement[47397-47477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47173-47227]:Block[47423-47477]"
  }, {
    "left" : "result.append(pathNames[i]);",
    "right" : "result.append(pathNames[i]);",
    "info" : "ExpressionStatement[47187-47215]:ExpressionStatement[47437-47465]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[47238-47244]:BreakStatement[47488-47494]"
  }, {
    "left" : "case JsonScope.NONEMPTY_DOCUMENT:",
    "right" : "case JsonScope.NONEMPTY_DOCUMENT:",
    "info" : "SwitchCase[47254-47287]:SwitchCase[47504-47537]"
  }, {
    "left" : "case JsonScope.EMPTY_DOCUMENT:",
    "right" : "case JsonScope.EMPTY_DOCUMENT:",
    "info" : "SwitchCase[47296-47326]:SwitchCase[47546-47576]"
  }, {
    "left" : "case JsonScope.CLOSED:",
    "right" : "case JsonScope.CLOSED:",
    "info" : "SwitchCase[47335-47357]:SwitchCase[47585-47607]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[47368-47374]:BreakStatement[47618-47624]"
  }, {
    "left" : "return result.toString();",
    "right" : "return result.toString();",
    "info" : "ReturnStatement[47393-47418]:ReturnStatement[47643-47668]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[47781-47788]:Modifier[48031-48038]"
  }, {
    "left" : "char",
    "right" : "char",
    "info" : "PrimitiveType[47789-47793]:PrimitiveType[48039-48043]"
  }, {
    "left" : "readEscapeCharacter",
    "right" : "readEscapeCharacter",
    "info" : "SimpleName[47794-47813]:SimpleName[48044-48063]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[47823-47834]:SimpleType[48073-48084]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47835-49047]:Block[48085-49297]"
  }, {
    "left" : "if (pos == limit && !fillBuffer(1))",
    "right" : "if (pos == limit && !fillBuffer(1))",
    "info" : "IfStatement[47841-47941]:IfStatement[48091-48191]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47877-47941]:Block[48127-48191]"
  }, {
    "left" : "throw syntaxError(\"Unterminated escape sequence\");",
    "right" : "throw syntaxError(\"Unterminated escape sequence\");",
    "info" : "ThrowStatement[47885-47935]:ThrowStatement[48135-48185]"
  }, {
    "left" : "char escaped = buffer[pos++];",
    "right" : "char escaped = buffer[pos++];",
    "info" : "VariableDeclarationStatement[47947-47976]:VariableDeclarationStatement[48197-48226]"
  }, {
    "left" : "switch (escaped) {\n    case 'u':\n      if (pos + 4 > limit && !fillBuffer(4)) {\n        throw syntaxError(\"Unterminated escape sequence\");\n      }\n      // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n      char result = 0;\n      for (int i = pos, end = i + 4; i < end; i++) {\n        char c = buffer[i];\n        result <<= 4;\n        if (c >= '0' && c <= '9') {\n          result += (c - '0');\n        } else if (c >= 'a' && c <= 'f') {\n          result += (c - 'a' + 10);\n        } else if (c >= 'A' && c <= 'F') {\n          result += (c - 'A' + 10);\n        } else {\n          throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));\n        }\n      }\n      pos += 4;\n      return result;\n\n    case 't':\n      return '\\t';\n\n    case 'b':\n      return '\\b';\n\n    case 'n':\n      return '\\n';\n\n    case 'r':\n      return '\\r';\n\n    case 'f':\n      return '\\f';\n\n    case '\\n':\n      lineNumber++;\n      lineStart = pos;\n      // fall-through\n\n    case '\\'':\n    case '\"':\n    case '\\\\':\n    default:\n      return escaped;\n    }",
    "right" : "switch (escaped) {\n    case 'u':\n      if (pos + 4 > limit && !fillBuffer(4)) {\n        throw syntaxError(\"Unterminated escape sequence\");\n      }\n      // Equivalent to Integer.parseInt(stringPool.get(buffer, pos, 4), 16);\n      char result = 0;\n      for (int i = pos, end = i + 4; i < end; i++) {\n        char c = buffer[i];\n        result <<= 4;\n        if (c >= '0' && c <= '9') {\n          result += (c - '0');\n        } else if (c >= 'a' && c <= 'f') {\n          result += (c - 'a' + 10);\n        } else if (c >= 'A' && c <= 'F') {\n          result += (c - 'A' + 10);\n        } else {\n          throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));\n        }\n      }\n      pos += 4;\n      return result;\n\n    case 't':\n      return '\\t';\n\n    case 'b':\n      return '\\b';\n\n    case 'n':\n      return '\\n';\n\n    case 'r':\n      return '\\r';\n\n    case 'f':\n      return '\\f';\n\n    case '\\n':\n      lineNumber++;\n      lineStart = pos;\n      // fall-through\n\n    case '\\'':\n    case '\"':\n    case '\\\\':\n    default:\n      return escaped;\n    }",
    "info" : "SwitchStatement[47981-49043]:SwitchStatement[48231-49293]"
  }, {
    "left" : "case 'u':",
    "right" : "case 'u':",
    "info" : "SwitchCase[48004-48013]:SwitchCase[48254-48263]"
  }, {
    "left" : "if (pos + 4 > limit && !fillBuffer(4))",
    "right" : "if (pos + 4 > limit && !fillBuffer(4))",
    "info" : "IfStatement[48020-48127]:IfStatement[48270-48377]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48059-48127]:Block[48309-48377]"
  }, {
    "left" : "throw syntaxError(\"Unterminated escape sequence\");",
    "right" : "throw syntaxError(\"Unterminated escape sequence\");",
    "info" : "ThrowStatement[48069-48119]:ThrowStatement[48319-48369]"
  }, {
    "left" : "char result = 0;",
    "right" : "char result = 0;",
    "info" : "VariableDeclarationStatement[48211-48227]:VariableDeclarationStatement[48461-48477]"
  }, {
    "left" : "for (int i = pos, end = i + 4; i < end; i++)",
    "right" : "for (int i = pos, end = i + 4; i < end; i++)",
    "info" : "ForStatement[48234-48669]:ForStatement[48484-48919]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48279-48669]:Block[48529-48919]"
  }, {
    "left" : "char c = buffer[i];",
    "right" : "char c = buffer[i];",
    "info" : "VariableDeclarationStatement[48289-48308]:VariableDeclarationStatement[48539-48558]"
  }, {
    "left" : "result <<= 4;",
    "right" : "result <<= 4;",
    "info" : "ExpressionStatement[48317-48330]:ExpressionStatement[48567-48580]"
  }, {
    "left" : "if (c >= '0' && c <= '9')",
    "right" : "if (c >= '0' && c <= '9')",
    "info" : "IfStatement[48339-48661]:IfStatement[48589-48911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48365-48407]:Block[48615-48657]"
  }, {
    "left" : "result += (c - '0');",
    "right" : "result += (c - '0');",
    "info" : "ExpressionStatement[48377-48397]:ExpressionStatement[48627-48647]"
  }, {
    "left" : "if (c >= 'a' && c <= 'f')",
    "right" : "if (c >= 'a' && c <= 'f')",
    "info" : "IfStatement[48413-48661]:IfStatement[48663-48911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48439-48486]:Block[48689-48736]"
  }, {
    "left" : "result += (c - 'a' + 10);",
    "right" : "result += (c - 'a' + 10);",
    "info" : "ExpressionStatement[48451-48476]:ExpressionStatement[48701-48726]"
  }, {
    "left" : "if (c >= 'A' && c <= 'F')",
    "right" : "if (c >= 'A' && c <= 'F')",
    "info" : "IfStatement[48492-48661]:IfStatement[48742-48911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48518-48565]:Block[48768-48815]"
  }, {
    "left" : "result += (c - 'A' + 10);",
    "right" : "result += (c - 'A' + 10);",
    "info" : "ExpressionStatement[48530-48555]:ExpressionStatement[48780-48805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48571-48661]:Block[48821-48911]"
  }, {
    "left" : "throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));",
    "right" : "throw new NumberFormatException(\"\\\\u\" + new String(buffer, pos, 4));",
    "info" : "ThrowStatement[48583-48651]:ThrowStatement[48833-48901]"
  }, {
    "left" : "pos += 4;",
    "right" : "pos += 4;",
    "info" : "ExpressionStatement[48676-48685]:ExpressionStatement[48926-48935]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[48692-48706]:ReturnStatement[48942-48956]"
  }, {
    "left" : "case 't':",
    "right" : "case 't':",
    "info" : "SwitchCase[48712-48721]:SwitchCase[48962-48971]"
  }, {
    "left" : "return '\\t';",
    "right" : "return '\\t';",
    "info" : "ReturnStatement[48728-48740]:ReturnStatement[48978-48990]"
  }, {
    "left" : "case 'b':",
    "right" : "case 'b':",
    "info" : "SwitchCase[48746-48755]:SwitchCase[48996-49005]"
  }, {
    "left" : "return '\\b';",
    "right" : "return '\\b';",
    "info" : "ReturnStatement[48762-48774]:ReturnStatement[49012-49024]"
  }, {
    "left" : "case 'n':",
    "right" : "case 'n':",
    "info" : "SwitchCase[48780-48789]:SwitchCase[49030-49039]"
  }, {
    "left" : "return '\\n';",
    "right" : "return '\\n';",
    "info" : "ReturnStatement[48796-48808]:ReturnStatement[49046-49058]"
  }, {
    "left" : "case 'r':",
    "right" : "case 'r':",
    "info" : "SwitchCase[48814-48823]:SwitchCase[49064-49073]"
  }, {
    "left" : "return '\\r';",
    "right" : "return '\\r';",
    "info" : "ReturnStatement[48830-48842]:ReturnStatement[49080-49092]"
  }, {
    "left" : "case 'f':",
    "right" : "case 'f':",
    "info" : "SwitchCase[48848-48857]:SwitchCase[49098-49107]"
  }, {
    "left" : "return '\\f';",
    "right" : "return '\\f';",
    "info" : "ReturnStatement[48864-48876]:ReturnStatement[49114-49126]"
  }, {
    "left" : "case '\\n':",
    "right" : "case '\\n':",
    "info" : "SwitchCase[48882-48892]:SwitchCase[49132-49142]"
  }, {
    "left" : "lineNumber++;",
    "right" : "lineNumber++;",
    "info" : "ExpressionStatement[48899-48912]:ExpressionStatement[49149-49162]"
  }, {
    "left" : "lineStart = pos;",
    "right" : "lineStart = pos;",
    "info" : "ExpressionStatement[48919-48935]:ExpressionStatement[49169-49185]"
  }, {
    "left" : "case '\\'':",
    "right" : "case '\\'':",
    "info" : "SwitchCase[48963-48973]:SwitchCase[49213-49223]"
  }, {
    "left" : "case '\"':",
    "right" : "case '\"':",
    "info" : "SwitchCase[48978-48987]:SwitchCase[49228-49237]"
  }, {
    "left" : "case '\\\\':",
    "right" : "case '\\\\':",
    "info" : "SwitchCase[48992-49002]:SwitchCase[49242-49252]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[49007-49015]:SwitchCase[49257-49265]"
  }, {
    "left" : "return escaped;",
    "right" : "return escaped;",
    "info" : "ReturnStatement[49022-49037]:ReturnStatement[49272-49287]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49172-49179]:Modifier[49422-49429]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[49180-49191]:SimpleType[49430-49441]"
  }, {
    "left" : "syntaxError",
    "right" : "syntaxError",
    "info" : "SimpleName[49192-49203]:SimpleName[49442-49453]"
  }, {
    "left" : "String message",
    "right" : "String message",
    "info" : "SingleVariableDeclaration[49204-49218]:SingleVariableDeclaration[49454-49468]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[49227-49238]:SimpleType[49477-49488]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49239-49387]:Block[49489-49637]"
  }, {
    "left" : "throw new MalformedJsonException(message\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "right" : "throw new MalformedJsonException(message\n        + \" at line \" + getLineNumber() + \" column \" + getColumnNumber() + \" path \" + getPath());",
    "info" : "ThrowStatement[49245-49383]:ThrowStatement[49495-49633]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[49454-49461]:Modifier[49704-49711]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[49462-49466]:PrimitiveType[49712-49716]"
  }, {
    "left" : "consumeNonExecutePrefix",
    "right" : "consumeNonExecutePrefix",
    "info" : "SimpleName[49467-49490]:SimpleName[49717-49740]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[49500-49511]:SimpleType[49750-49761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49512-49966]:Block[49762-50216]"
  }, {
    "left" : "nextNonWhitespace(true);",
    "right" : "nextNonWhitespace(true);",
    "info" : "ExpressionStatement[49569-49593]:ExpressionStatement[49819-49843]"
  }, {
    "left" : "pos--;",
    "right" : "pos--;",
    "info" : "ExpressionStatement[49598-49604]:ExpressionStatement[49848-49854]"
  }, {
    "left" : "if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length))",
    "right" : "if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length))",
    "info" : "IfStatement[49610-49718]:IfStatement[49860-49968]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49697-49718]:Block[49947-49968]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49705-49712]:ReturnStatement[49955-49962]"
  }, {
    "left" : "for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++)",
    "right" : "for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++)",
    "info" : "ForStatement[49724-49886]:ForStatement[49974-50136]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49776-49886]:Block[50026-50136]"
  }, {
    "left" : "if (buffer[pos + i] != NON_EXECUTE_PREFIX[i])",
    "right" : "if (buffer[pos + i] != NON_EXECUTE_PREFIX[i])",
    "info" : "IfStatement[49784-49880]:IfStatement[50034-50130]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49830-49880]:Block[50080-50130]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[49840-49847]:ReturnStatement[50090-50097]"
  }, {
    "left" : "pos += NON_EXECUTE_PREFIX.length;",
    "right" : "pos += NON_EXECUTE_PREFIX.length;",
    "info" : "ExpressionStatement[49929-49962]:ExpressionStatement[50179-50212]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[49977-50937]:Block[50227-51187]"
  }, {
    "left" : "JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n      @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n        if (reader instanceof JsonTreeReader) {\n          ((JsonTreeReader)reader).promoteNameToValue();\n          return;\n        }\n        int p = reader.peeked;\n        if (p == PEEKED_NONE) {\n          p = reader.doPeek();\n        }\n        if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_DOUBLE_QUOTED;\n        } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_SINGLE_QUOTED;\n        } else if (p == PEEKED_UNQUOTED_NAME) {\n          reader.peeked = PEEKED_UNQUOTED;\n        } else {\n          throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n              + \" path \" + reader.getPath());\n        }\n      }\n    };",
    "right" : "JsonReaderInternalAccess.INSTANCE = new JsonReaderInternalAccess() {\n      @Override public void promoteNameToValue(JsonReader reader) throws IOException {\n        if (reader instanceof JsonTreeReader) {\n          ((JsonTreeReader)reader).promoteNameToValue();\n          return;\n        }\n        int p = reader.peeked;\n        if (p == PEEKED_NONE) {\n          p = reader.doPeek();\n        }\n        if (p == PEEKED_DOUBLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_DOUBLE_QUOTED;\n        } else if (p == PEEKED_SINGLE_QUOTED_NAME) {\n          reader.peeked = PEEKED_SINGLE_QUOTED;\n        } else if (p == PEEKED_UNQUOTED_NAME) {\n          reader.peeked = PEEKED_UNQUOTED;\n        } else {\n          throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n              + \" path \" + reader.getPath());\n        }\n      }\n    };",
    "info" : "ExpressionStatement[49983-50933]:ExpressionStatement[50233-51183]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[50058-50067]:MarkerAnnotation[50308-50317]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[50068-50074]:Modifier[50318-50324]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[50075-50079]:PrimitiveType[50325-50329]"
  }, {
    "left" : "promoteNameToValue",
    "right" : "promoteNameToValue",
    "info" : "SimpleName[50080-50098]:SimpleName[50330-50348]"
  }, {
    "left" : "JsonReader reader",
    "right" : "JsonReader reader",
    "info" : "SingleVariableDeclaration[50099-50116]:SingleVariableDeclaration[50349-50366]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[50125-50136]:SimpleType[50375-50386]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50137-50926]:Block[50387-51176]"
  }, {
    "left" : "if (reader instanceof JsonTreeReader)",
    "right" : "if (reader instanceof JsonTreeReader)",
    "info" : "IfStatement[50147-50271]:IfStatement[50397-50521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50185-50271]:Block[50435-50521]"
  }, {
    "left" : "((JsonTreeReader)reader).promoteNameToValue();",
    "right" : "((JsonTreeReader)reader).promoteNameToValue();",
    "info" : "ExpressionStatement[50197-50243]:ExpressionStatement[50447-50493]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[50254-50261]:ReturnStatement[50504-50511]"
  }, {
    "left" : "int p = reader.peeked;",
    "right" : "int p = reader.peeked;",
    "info" : "VariableDeclarationStatement[50280-50302]:VariableDeclarationStatement[50530-50552]"
  }, {
    "left" : "if (p == PEEKED_NONE)",
    "right" : "if (p == PEEKED_NONE)",
    "info" : "IfStatement[50311-50375]:IfStatement[50561-50625]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50333-50375]:Block[50583-50625]"
  }, {
    "left" : "p = reader.doPeek();",
    "right" : "p = reader.doPeek();",
    "info" : "ExpressionStatement[50345-50365]:ExpressionStatement[50595-50615]"
  }, {
    "left" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_DOUBLE_QUOTED_NAME)",
    "info" : "IfStatement[50384-50918]:IfStatement[50634-51168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50420-50479]:Block[50670-50729]"
  }, {
    "left" : "reader.peeked = PEEKED_DOUBLE_QUOTED;",
    "right" : "reader.peeked = PEEKED_DOUBLE_QUOTED;",
    "info" : "ExpressionStatement[50432-50469]:ExpressionStatement[50682-50719]"
  }, {
    "left" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
    "right" : "if (p == PEEKED_SINGLE_QUOTED_NAME)",
    "info" : "IfStatement[50485-50918]:IfStatement[50735-51168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50521-50580]:Block[50771-50830]"
  }, {
    "left" : "reader.peeked = PEEKED_SINGLE_QUOTED;",
    "right" : "reader.peeked = PEEKED_SINGLE_QUOTED;",
    "info" : "ExpressionStatement[50533-50570]:ExpressionStatement[50783-50820]"
  }, {
    "left" : "if (p == PEEKED_UNQUOTED_NAME)",
    "right" : "if (p == PEEKED_UNQUOTED_NAME)",
    "info" : "IfStatement[50586-50918]:IfStatement[50836-51168]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50617-50671]:Block[50867-50921]"
  }, {
    "left" : "reader.peeked = PEEKED_UNQUOTED;",
    "right" : "reader.peeked = PEEKED_UNQUOTED;",
    "info" : "ExpressionStatement[50629-50661]:ExpressionStatement[50879-50911]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50677-50918]:Block[50927-51168]"
  }, {
    "left" : "throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n              + \" path \" + reader.getPath());",
    "right" : "throw new IllegalStateException(\"Expected a name but was \" + reader.peek() + \" \"\n              + \" at line \" + reader.getLineNumber() + \" column \" + reader.getColumnNumber()\n              + \" path \" + reader.getPath());",
    "info" : "ThrowStatement[50689-50908]:ThrowStatement[50939-51158]"
  } ]
}