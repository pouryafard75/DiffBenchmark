{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "ExtendedMessageFormat",
      "right" : "ExtendedMessageFormat",
      "info" : "TypeDeclaration[1154-18261]:TypeDeclaration[1154-19189]"
    }, {
      "left" : "private static final long serialVersionUID = -2362048321261811743L;",
      "right" : "private static final long serialVersionUID = -2362048321261811743L;",
      "info" : "FieldDeclaration[3392-3459]:FieldDeclaration[3392-3459]"
    }, {
      "left" : "private static final String DUMMY_PATTERN = \"\";",
      "right" : "private static final String DUMMY_PATTERN = \"\";",
      "info" : "FieldDeclaration[3465-3512]:FieldDeclaration[3510-3557]"
    }, {
      "left" : "private static final String ESCAPED_QUOTE = \"''\";",
      "right" : "private static final String ESCAPED_QUOTE = \"''\";",
      "info" : "FieldDeclaration[3517-3566]:FieldDeclaration[3562-3611]"
    }, {
      "left" : "private static final char START_FMT = ',';",
      "right" : "private static final char START_FMT = ',';",
      "info" : "FieldDeclaration[3571-3613]:FieldDeclaration[3616-3658]"
    }, {
      "left" : "private static final char END_FE = '}';",
      "right" : "private static final char END_FE = '}';",
      "info" : "FieldDeclaration[3618-3657]:FieldDeclaration[3663-3702]"
    }, {
      "left" : "private static final char START_FE = '{';",
      "right" : "private static final char START_FE = '{';",
      "info" : "FieldDeclaration[3662-3703]:FieldDeclaration[3707-3748]"
    }, {
      "left" : "private static final char QUOTE = '\\'';",
      "right" : "private static final char QUOTE = '\\'';",
      "info" : "FieldDeclaration[3708-3747]:FieldDeclaration[3753-3792]"
    }, {
      "left" : "private String toPattern;",
      "right" : "private String toPattern;",
      "info" : "FieldDeclaration[3753-3778]:FieldDeclaration[3798-3823]"
    }, {
      "left" : "private final Map<String, ? extends FormatFactory> registry;",
      "right" : "private final Map<String, ? extends FormatFactory> registry;",
      "info" : "FieldDeclaration[3783-3843]:FieldDeclaration[3828-3888]"
    }, {
      "left" : "public ExtendedMessageFormat(String pattern)",
      "right" : "public ExtendedMessageFormat(String pattern)",
      "info" : "MethodDeclaration[3849-4153]:MethodDeclaration[3894-4198]"
    }, {
      "left" : "public ExtendedMessageFormat(String pattern, Locale locale)",
      "right" : "public ExtendedMessageFormat(String pattern, Locale locale)",
      "info" : "MethodDeclaration[4159-4498]:MethodDeclaration[4204-4543]"
    }, {
      "left" : "public ExtendedMessageFormat(String pattern, Map<String, ? extends FormatFactory> registry)",
      "right" : "public ExtendedMessageFormat(String pattern, Map<String, ? extends FormatFactory> registry)",
      "info" : "MethodDeclaration[4504-4935]:MethodDeclaration[4549-4980]"
    }, {
      "left" : "public ExtendedMessageFormat(String pattern, Locale locale, Map<String, ? extends FormatFactory> registry)",
      "right" : "public ExtendedMessageFormat(String pattern, Locale locale, Map<String, ? extends FormatFactory> registry)",
      "info" : "MethodDeclaration[4941-5482]:MethodDeclaration[4986-5527]"
    }, {
      "left" : "public String toPattern()",
      "right" : "public String toPattern()",
      "info" : "MethodDeclaration[5488-5598]:MethodDeclaration[5533-5643]"
    }, {
      "left" : "public final void applyPattern(String pattern)",
      "right" : "public final void applyPattern(String pattern)",
      "info" : "MethodDeclaration[5604-8516]:MethodDeclaration[5649-8561]"
    }, {
      "left" : "public void setFormat(int formatElementIndex, Format newFormat)",
      "right" : "public void setFormat(int formatElementIndex, Format newFormat)",
      "info" : "MethodDeclaration[8522-8897]:MethodDeclaration[8567-8942]"
    }, {
      "left" : "public void setFormatByArgumentIndex(int argumentIndex, Format newFormat)",
      "right" : "public void setFormatByArgumentIndex(int argumentIndex, Format newFormat)",
      "info" : "MethodDeclaration[8903-9277]:MethodDeclaration[8948-9322]"
    }, {
      "left" : "public void setFormats(Format[] newFormats)",
      "right" : "public void setFormats(Format[] newFormats)",
      "info" : "MethodDeclaration[9283-9582]:MethodDeclaration[9328-9627]"
    }, {
      "left" : "public void setFormatsByArgumentIndex(Format[] newFormats)",
      "right" : "public void setFormatsByArgumentIndex(Format[] newFormats)",
      "info" : "MethodDeclaration[9588-9902]:MethodDeclaration[9633-9947]"
    }, {
      "left" : "private Format getFormat(String desc)",
      "right" : "private Format getFormat(String desc)",
      "info" : "MethodDeclaration[10197-10856]:MethodDeclaration[11125-11784]"
    }, {
      "left" : "private int readArgumentIndex(String pattern, ParsePosition pos)",
      "right" : "private int readArgumentIndex(String pattern, ParsePosition pos)",
      "info" : "MethodDeclaration[10862-12519]:MethodDeclaration[11790-13447]"
    }, {
      "left" : "private String parseFormatDescription(String pattern, ParsePosition pos)",
      "right" : "private String parseFormatDescription(String pattern, ParsePosition pos)",
      "info" : "MethodDeclaration[12525-13554]:MethodDeclaration[13453-14482]"
    }, {
      "left" : "private String insertFormats(String pattern, ArrayList<String> customPatterns)",
      "right" : "private String insertFormats(String pattern, ArrayList<String> customPatterns)",
      "info" : "MethodDeclaration[13560-15042]:MethodDeclaration[14488-15970]"
    }, {
      "left" : "private void seekNonWs(String pattern, ParsePosition pos)",
      "right" : "private void seekNonWs(String pattern, ParsePosition pos)",
      "info" : "MethodDeclaration[15048-15538]:MethodDeclaration[15976-16466]"
    }, {
      "left" : "private ParsePosition next(ParsePosition pos)",
      "right" : "private ParsePosition next(ParsePosition pos)",
      "info" : "MethodDeclaration[15544-15804]:MethodDeclaration[16472-16732]"
    }, {
      "left" : "private StringBuilder appendQuotedString(String pattern, ParsePosition pos,\n            StringBuilder appendTo, boolean escapingOn)",
      "right" : "private StringBuilder appendQuotedString(String pattern, ParsePosition pos,\n            StringBuilder appendTo, boolean escapingOn)",
      "info" : "MethodDeclaration[15810-17354]:MethodDeclaration[16738-18282]"
    }, {
      "left" : "private void getQuotedString(String pattern, ParsePosition pos,\n            boolean escapingOn)",
      "right" : "private void getQuotedString(String pattern, ParsePosition pos,\n            boolean escapingOn)",
      "info" : "MethodDeclaration[17360-17720]:MethodDeclaration[18288-18648]"
    }, {
      "left" : "private boolean containsElements(Collection<?> coll)",
      "right" : "private boolean containsElements(Collection<?> coll)",
      "info" : "MethodDeclaration[17726-18259]:MethodDeclaration[18654-19187]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3329-3335]:Modifier[3329-3335]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[3336-3341]:TYPE_DECLARATION_KIND[3336-3341]"
    }, {
      "left" : "ExtendedMessageFormat",
      "right" : "ExtendedMessageFormat",
      "info" : "SimpleName[3342-3363]:SimpleName[3342-3363]"
    }, {
      "left" : "MessageFormat",
      "right" : "MessageFormat",
      "info" : "SimpleType[3372-3385]:SimpleType[3372-3385]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4057-4063]:Modifier[4102-4108]"
    }, {
      "left" : "ExtendedMessageFormat",
      "right" : "ExtendedMessageFormat",
      "info" : "SimpleName[4064-4085]:SimpleName[4109-4130]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[4086-4100]:SingleVariableDeclaration[4131-4145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4102-4153]:Block[4147-4198]"
    }, {
      "left" : "this(pattern, Locale.getDefault());",
      "right" : "this(pattern, Locale.getDefault());",
      "info" : "ConstructorInvocation[4112-4147]:ConstructorInvocation[4157-4192]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4394-4400]:Modifier[4439-4445]"
    }, {
      "left" : "ExtendedMessageFormat",
      "right" : "ExtendedMessageFormat",
      "info" : "SimpleName[4401-4422]:SimpleName[4446-4467]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[4423-4437]:SingleVariableDeclaration[4468-4482]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[4439-4452]:SingleVariableDeclaration[4484-4497]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4454-4498]:Block[4499-4543]"
    }, {
      "left" : "this(pattern, locale, null);",
      "right" : "this(pattern, locale, null);",
      "info" : "ConstructorInvocation[4464-4492]:ConstructorInvocation[4509-4537]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4782-4788]:Modifier[4827-4833]"
    }, {
      "left" : "ExtendedMessageFormat",
      "right" : "ExtendedMessageFormat",
      "info" : "SimpleName[4789-4810]:SimpleName[4834-4855]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[4811-4825]:SingleVariableDeclaration[4856-4870]"
    }, {
      "left" : "Map<String, ? extends FormatFactory> registry",
      "right" : "Map<String, ? extends FormatFactory> registry",
      "info" : "SingleVariableDeclaration[4827-4872]:SingleVariableDeclaration[4872-4917]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4874-4935]:Block[4919-4980]"
    }, {
      "left" : "this(pattern, Locale.getDefault(), registry);",
      "right" : "this(pattern, Locale.getDefault(), registry);",
      "info" : "ConstructorInvocation[4884-4929]:ConstructorInvocation[4929-4974]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5246-5252]:Modifier[5291-5297]"
    }, {
      "left" : "ExtendedMessageFormat",
      "right" : "ExtendedMessageFormat",
      "info" : "SimpleName[5253-5274]:SimpleName[5298-5319]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[5275-5289]:SingleVariableDeclaration[5320-5334]"
    }, {
      "left" : "Locale locale",
      "right" : "Locale locale",
      "info" : "SingleVariableDeclaration[5291-5304]:SingleVariableDeclaration[5336-5349]"
    }, {
      "left" : "Map<String, ? extends FormatFactory> registry",
      "right" : "Map<String, ? extends FormatFactory> registry",
      "info" : "SingleVariableDeclaration[5306-5351]:SingleVariableDeclaration[5351-5396]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5353-5482]:Block[5398-5527]"
    }, {
      "left" : "super(DUMMY_PATTERN);",
      "right" : "super(DUMMY_PATTERN);",
      "info" : "SuperConstructorInvocation[5363-5384]:SuperConstructorInvocation[5408-5429]"
    }, {
      "left" : "setLocale(locale);",
      "right" : "setLocale(locale);",
      "info" : "ExpressionStatement[5393-5411]:ExpressionStatement[5438-5456]"
    }, {
      "left" : "this.registry = registry;",
      "right" : "this.registry = registry;",
      "info" : "ExpressionStatement[5420-5445]:ExpressionStatement[5465-5490]"
    }, {
      "left" : "applyPattern(pattern);",
      "right" : "applyPattern(pattern);",
      "info" : "ExpressionStatement[5454-5476]:ExpressionStatement[5499-5521]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5525-5534]:MarkerAnnotation[5570-5579]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5539-5545]:Modifier[5584-5590]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[5546-5552]:SimpleType[5591-5597]"
    }, {
      "left" : "toPattern",
      "right" : "toPattern",
      "info" : "SimpleName[5553-5562]:SimpleName[5598-5607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5565-5598]:Block[5610-5643]"
    }, {
      "left" : "return toPattern;",
      "right" : "return toPattern;",
      "info" : "ReturnStatement[5575-5592]:ReturnStatement[5620-5637]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5693-5702]:MarkerAnnotation[5738-5747]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5707-5713]:Modifier[5752-5758]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5714-5719]:Modifier[5759-5764]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5720-5724]:PrimitiveType[5765-5769]"
    }, {
      "left" : "applyPattern",
      "right" : "applyPattern",
      "info" : "SimpleName[5725-5737]:SimpleName[5770-5782]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[5738-5752]:SingleVariableDeclaration[5783-5797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5754-8516]:Block[5799-8561]"
    }, {
      "left" : "if (registry == null)",
      "right" : "if (registry == null)",
      "info" : "IfStatement[5764-5901]:IfStatement[5809-5946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5786-5901]:Block[5831-5946]"
    }, {
      "left" : "super.applyPattern(pattern);",
      "right" : "super.applyPattern(pattern);",
      "info" : "ExpressionStatement[5800-5828]:ExpressionStatement[5845-5873]"
    }, {
      "left" : "toPattern = super.toPattern();",
      "right" : "toPattern = super.toPattern();",
      "info" : "ExpressionStatement[5841-5871]:ExpressionStatement[5886-5916]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[5884-5891]:ReturnStatement[5929-5936]"
    }, {
      "left" : "ArrayList<Format> foundFormats = new ArrayList<Format>();",
      "right" : "ArrayList<Format> foundFormats = new ArrayList<Format>();",
      "info" : "VariableDeclarationStatement[5910-5967]:VariableDeclarationStatement[5955-6012]"
    }, {
      "left" : "ArrayList<String> foundDescriptions = new ArrayList<String>();",
      "right" : "ArrayList<String> foundDescriptions = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[5976-6038]:VariableDeclarationStatement[6021-6083]"
    }, {
      "left" : "StringBuilder stripCustom = new StringBuilder(pattern.length());",
      "right" : "StringBuilder stripCustom = new StringBuilder(pattern.length());",
      "info" : "VariableDeclarationStatement[6047-6111]:VariableDeclarationStatement[6092-6156]"
    }, {
      "left" : "ParsePosition pos = new ParsePosition(0);",
      "right" : "ParsePosition pos = new ParsePosition(0);",
      "info" : "VariableDeclarationStatement[6121-6162]:VariableDeclarationStatement[6166-6207]"
    }, {
      "left" : "char[] c = pattern.toCharArray();",
      "right" : "char[] c = pattern.toCharArray();",
      "info" : "VariableDeclarationStatement[6171-6204]:VariableDeclarationStatement[6216-6249]"
    }, {
      "left" : "int fmtCount = 0;",
      "right" : "int fmtCount = 0;",
      "info" : "VariableDeclarationStatement[6213-6230]:VariableDeclarationStatement[6258-6275]"
    }, {
      "left" : "while (pos.getIndex() < pattern.length())",
      "right" : "while (pos.getIndex() < pattern.length())",
      "info" : "WhileStatement[6239-7847]:WhileStatement[6284-7892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6281-7847]:Block[6326-7892]"
    }, {
      "left" : "switch (c[pos.getIndex()]) {\n            case QUOTE:\n                appendQuotedString(pattern, pos, stripCustom, true);\n                break;\n            case START_FE:\n                fmtCount++;\n                seekNonWs(pattern, pos);\n                int start = pos.getIndex();\n                int index = readArgumentIndex(pattern, next(pos));\n                stripCustom.append(START_FE).append(index);\n                seekNonWs(pattern, pos);\n                Format format = null;\n                String formatDescription = null;\n                if (c[pos.getIndex()] == START_FMT) {\n                    formatDescription = parseFormatDescription(pattern,\n                            next(pos));\n                    format = getFormat(formatDescription);\n                    if (format == null) {\n                        stripCustom.append(START_FMT).append(formatDescription);\n                    }\n                }\n                foundFormats.add(format);\n                foundDescriptions.add(format == null ? null : formatDescription);\n                Validate.isTrue(foundFormats.size() == fmtCount);\n                Validate.isTrue(foundDescriptions.size() == fmtCount);\n                if (c[pos.getIndex()] != END_FE) {\n                    throw new IllegalArgumentException(\n                            \"Unreadable format element at position \" + start);\n                }\n                //$FALL-THROUGH$\n            default:\n                stripCustom.append(c[pos.getIndex()]);\n                next(pos);\n            }",
      "right" : "switch (c[pos.getIndex()]) {\n            case QUOTE:\n                appendQuotedString(pattern, pos, stripCustom, true);\n                break;\n            case START_FE:\n                fmtCount++;\n                seekNonWs(pattern, pos);\n                int start = pos.getIndex();\n                int index = readArgumentIndex(pattern, next(pos));\n                stripCustom.append(START_FE).append(index);\n                seekNonWs(pattern, pos);\n                Format format = null;\n                String formatDescription = null;\n                if (c[pos.getIndex()] == START_FMT) {\n                    formatDescription = parseFormatDescription(pattern,\n                            next(pos));\n                    format = getFormat(formatDescription);\n                    if (format == null) {\n                        stripCustom.append(START_FMT).append(formatDescription);\n                    }\n                }\n                foundFormats.add(format);\n                foundDescriptions.add(format == null ? null : formatDescription);\n                Validate.isTrue(foundFormats.size() == fmtCount);\n                Validate.isTrue(foundDescriptions.size() == fmtCount);\n                if (c[pos.getIndex()] != END_FE) {\n                    throw new IllegalArgumentException(\n                            \"Unreadable format element at position \" + start);\n                }\n                //$FALL-THROUGH$\n            default:\n                stripCustom.append(c[pos.getIndex()]);\n                next(pos);\n            }",
      "info" : "SwitchStatement[6295-7837]:SwitchStatement[6340-7882]"
    }, {
      "left" : "case QUOTE:",
      "right" : "case QUOTE:",
      "info" : "SwitchCase[6336-6347]:SwitchCase[6381-6392]"
    }, {
      "left" : "appendQuotedString(pattern, pos, stripCustom, true);",
      "right" : "appendQuotedString(pattern, pos, stripCustom, true);",
      "info" : "ExpressionStatement[6364-6416]:ExpressionStatement[6409-6461]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6433-6439]:BreakStatement[6478-6484]"
    }, {
      "left" : "case START_FE:",
      "right" : "case START_FE:",
      "info" : "SwitchCase[6452-6466]:SwitchCase[6497-6511]"
    }, {
      "left" : "fmtCount++;",
      "right" : "fmtCount++;",
      "info" : "ExpressionStatement[6483-6494]:ExpressionStatement[6528-6539]"
    }, {
      "left" : "seekNonWs(pattern, pos);",
      "right" : "seekNonWs(pattern, pos);",
      "info" : "ExpressionStatement[6511-6535]:ExpressionStatement[6556-6580]"
    }, {
      "left" : "int start = pos.getIndex();",
      "right" : "int start = pos.getIndex();",
      "info" : "VariableDeclarationStatement[6552-6579]:VariableDeclarationStatement[6597-6624]"
    }, {
      "left" : "int index = readArgumentIndex(pattern, next(pos));",
      "right" : "int index = readArgumentIndex(pattern, next(pos));",
      "info" : "VariableDeclarationStatement[6596-6646]:VariableDeclarationStatement[6641-6691]"
    }, {
      "left" : "stripCustom.append(START_FE).append(index);",
      "right" : "stripCustom.append(START_FE).append(index);",
      "info" : "ExpressionStatement[6663-6706]:ExpressionStatement[6708-6751]"
    }, {
      "left" : "seekNonWs(pattern, pos);",
      "right" : "seekNonWs(pattern, pos);",
      "info" : "ExpressionStatement[6723-6747]:ExpressionStatement[6768-6792]"
    }, {
      "left" : "Format format = null;",
      "right" : "Format format = null;",
      "info" : "VariableDeclarationStatement[6764-6785]:VariableDeclarationStatement[6809-6830]"
    }, {
      "left" : "String formatDescription = null;",
      "right" : "String formatDescription = null;",
      "info" : "VariableDeclarationStatement[6802-6834]:VariableDeclarationStatement[6847-6879]"
    }, {
      "left" : "if (c[pos.getIndex()] == START_FMT)",
      "right" : "if (c[pos.getIndex()] == START_FMT)",
      "info" : "IfStatement[6851-7222]:IfStatement[6896-7267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6887-7222]:Block[6932-7267]"
    }, {
      "left" : "formatDescription = parseFormatDescription(pattern,\n                            next(pos));",
      "right" : "formatDescription = parseFormatDescription(pattern,\n                            next(pos));",
      "info" : "ExpressionStatement[6909-7000]:ExpressionStatement[6954-7045]"
    }, {
      "left" : "format = getFormat(formatDescription);",
      "right" : "format = getFormat(formatDescription);",
      "info" : "ExpressionStatement[7021-7059]:ExpressionStatement[7066-7104]"
    }, {
      "left" : "if (format == null)",
      "right" : "if (format == null)",
      "info" : "IfStatement[7080-7204]:IfStatement[7125-7249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7100-7204]:Block[7145-7249]"
    }, {
      "left" : "stripCustom.append(START_FMT).append(formatDescription);",
      "right" : "stripCustom.append(START_FMT).append(formatDescription);",
      "info" : "ExpressionStatement[7126-7182]:ExpressionStatement[7171-7227]"
    }, {
      "left" : "foundFormats.add(format);",
      "right" : "foundFormats.add(format);",
      "info" : "ExpressionStatement[7239-7264]:ExpressionStatement[7284-7309]"
    }, {
      "left" : "foundDescriptions.add(format == null ? null : formatDescription);",
      "right" : "foundDescriptions.add(format == null ? null : formatDescription);",
      "info" : "ExpressionStatement[7281-7346]:ExpressionStatement[7326-7391]"
    }, {
      "left" : "Validate.isTrue(foundFormats.size() == fmtCount);",
      "right" : "Validate.isTrue(foundFormats.size() == fmtCount);",
      "info" : "ExpressionStatement[7363-7412]:ExpressionStatement[7408-7457]"
    }, {
      "left" : "Validate.isTrue(foundDescriptions.size() == fmtCount);",
      "right" : "Validate.isTrue(foundDescriptions.size() == fmtCount);",
      "info" : "ExpressionStatement[7429-7483]:ExpressionStatement[7474-7528]"
    }, {
      "left" : "if (c[pos.getIndex()] != END_FE)",
      "right" : "if (c[pos.getIndex()] != END_FE)",
      "info" : "IfStatement[7500-7687]:IfStatement[7545-7732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7533-7687]:Block[7578-7732]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                            \"Unreadable format element at position \" + start);",
      "right" : "throw new IllegalArgumentException(\n                            \"Unreadable format element at position \" + start);",
      "info" : "ThrowStatement[7555-7669]:ThrowStatement[7600-7714]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[7733-7741]:SwitchCase[7778-7786]"
    }, {
      "left" : "stripCustom.append(c[pos.getIndex()]);",
      "right" : "stripCustom.append(c[pos.getIndex()]);",
      "info" : "ExpressionStatement[7758-7796]:ExpressionStatement[7803-7841]"
    }, {
      "left" : "next(pos);",
      "right" : "next(pos);",
      "info" : "ExpressionStatement[7813-7823]:ExpressionStatement[7858-7868]"
    }, {
      "left" : "super.applyPattern(stripCustom.toString());",
      "right" : "super.applyPattern(stripCustom.toString());",
      "info" : "ExpressionStatement[7856-7899]:ExpressionStatement[7901-7944]"
    }, {
      "left" : "toPattern = insertFormats(super.toPattern(), foundDescriptions);",
      "right" : "toPattern = insertFormats(super.toPattern(), foundDescriptions);",
      "info" : "ExpressionStatement[7908-7972]:ExpressionStatement[7953-8017]"
    }, {
      "left" : "if (containsElements(foundFormats))",
      "right" : "if (containsElements(foundFormats))",
      "info" : "IfStatement[7981-8510]:IfStatement[8026-8555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8017-8510]:Block[8062-8555]"
    }, {
      "left" : "Format[] origFormats = getFormats();",
      "right" : "Format[] origFormats = getFormats();",
      "info" : "VariableDeclarationStatement[8031-8067]:VariableDeclarationStatement[8076-8112]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[8219-8229]:VariableDeclarationStatement[8264-8274]"
    }, {
      "left" : "for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++)",
      "right" : "for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++)",
      "info" : "ForStatement[8242-8457]:ForStatement[8287-8502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8313-8457]:Block[8358-8502]"
    }, {
      "left" : "Format f = it.next();",
      "right" : "Format f = it.next();",
      "info" : "VariableDeclarationStatement[8331-8352]:VariableDeclarationStatement[8376-8397]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[8369-8443]:IfStatement[8414-8488]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8384-8443]:Block[8429-8488]"
    }, {
      "left" : "origFormats[i] = f;",
      "right" : "origFormats[i] = f;",
      "info" : "ExpressionStatement[8406-8425]:ExpressionStatement[8451-8470]"
    }, {
      "left" : "super.setFormats(origFormats);",
      "right" : "super.setFormats(origFormats);",
      "info" : "ExpressionStatement[8470-8500]:ExpressionStatement[8515-8545]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[8761-8770]:MarkerAnnotation[8806-8815]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8775-8781]:Modifier[8820-8826]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8782-8786]:PrimitiveType[8827-8831]"
    }, {
      "left" : "setFormat",
      "right" : "setFormat",
      "info" : "SimpleName[8787-8796]:SimpleName[8832-8841]"
    }, {
      "left" : "int formatElementIndex",
      "right" : "int formatElementIndex",
      "info" : "SingleVariableDeclaration[8797-8819]:SingleVariableDeclaration[8842-8864]"
    }, {
      "left" : "Format newFormat",
      "right" : "Format newFormat",
      "info" : "SingleVariableDeclaration[8821-8837]:SingleVariableDeclaration[8866-8882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8839-8897]:Block[8884-8942]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[8849-8891]:ThrowStatement[8894-8936]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9131-9140]:MarkerAnnotation[9176-9185]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9145-9151]:Modifier[9190-9196]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9152-9156]:PrimitiveType[9197-9201]"
    }, {
      "left" : "setFormatByArgumentIndex",
      "right" : "setFormatByArgumentIndex",
      "info" : "SimpleName[9157-9181]:SimpleName[9202-9226]"
    }, {
      "left" : "int argumentIndex",
      "right" : "int argumentIndex",
      "info" : "SingleVariableDeclaration[9182-9199]:SingleVariableDeclaration[9227-9244]"
    }, {
      "left" : "Format newFormat",
      "right" : "Format newFormat",
      "info" : "SingleVariableDeclaration[9201-9217]:SingleVariableDeclaration[9246-9262]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9219-9277]:Block[9264-9322]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[9229-9271]:ThrowStatement[9274-9316]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9466-9475]:MarkerAnnotation[9511-9520]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9480-9486]:Modifier[9525-9531]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9487-9491]:PrimitiveType[9532-9536]"
    }, {
      "left" : "setFormats",
      "right" : "setFormats",
      "info" : "SimpleName[9492-9502]:SimpleName[9537-9547]"
    }, {
      "left" : "Format[] newFormats",
      "right" : "Format[] newFormats",
      "info" : "SingleVariableDeclaration[9503-9522]:SingleVariableDeclaration[9548-9567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9524-9582]:Block[9569-9627]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[9534-9576]:ThrowStatement[9579-9621]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[9771-9780]:MarkerAnnotation[9816-9825]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9785-9791]:Modifier[9830-9836]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9792-9796]:PrimitiveType[9837-9841]"
    }, {
      "left" : "setFormatsByArgumentIndex",
      "right" : "setFormatsByArgumentIndex",
      "info" : "SimpleName[9797-9822]:SimpleName[9842-9867]"
    }, {
      "left" : "Format[] newFormats",
      "right" : "Format[] newFormats",
      "info" : "SingleVariableDeclaration[9823-9842]:SingleVariableDeclaration[9868-9887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9844-9902]:Block[9889-9947]"
    }, {
      "left" : "throw new UnsupportedOperationException();",
      "right" : "throw new UnsupportedOperationException();",
      "info" : "ThrowStatement[9854-9896]:ThrowStatement[9899-9941]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10323-10330]:Modifier[11251-11258]"
    }, {
      "left" : "Format",
      "right" : "Format",
      "info" : "SimpleType[10331-10337]:SimpleType[11259-11265]"
    }, {
      "left" : "getFormat",
      "right" : "getFormat",
      "info" : "SimpleName[10338-10347]:SimpleName[11266-11275]"
    }, {
      "left" : "String desc",
      "right" : "String desc",
      "info" : "SingleVariableDeclaration[10348-10359]:SingleVariableDeclaration[11276-11287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10361-10856]:Block[11289-11784]"
    }, {
      "left" : "if (registry != null)",
      "right" : "if (registry != null)",
      "info" : "IfStatement[10371-10829]:IfStatement[11299-11757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10393-10829]:Block[11321-11757]"
    }, {
      "left" : "String name = desc;",
      "right" : "String name = desc;",
      "info" : "VariableDeclarationStatement[10407-10426]:VariableDeclarationStatement[11335-11354]"
    }, {
      "left" : "String args = null;",
      "right" : "String args = null;",
      "info" : "VariableDeclarationStatement[10439-10458]:VariableDeclarationStatement[11367-11386]"
    }, {
      "left" : "int i = desc.indexOf(START_FMT);",
      "right" : "int i = desc.indexOf(START_FMT);",
      "info" : "VariableDeclarationStatement[10471-10503]:VariableDeclarationStatement[11399-11431]"
    }, {
      "left" : "if (i > 0)",
      "right" : "if (i > 0)",
      "info" : "IfStatement[10516-10647]:IfStatement[11444-11575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10527-10647]:Block[11455-11575]"
    }, {
      "left" : "name = desc.substring(0, i).trim();",
      "right" : "name = desc.substring(0, i).trim();",
      "info" : "ExpressionStatement[10545-10580]:ExpressionStatement[11473-11508]"
    }, {
      "left" : "args = desc.substring(i + 1).trim();",
      "right" : "args = desc.substring(i + 1).trim();",
      "info" : "ExpressionStatement[10597-10633]:ExpressionStatement[11525-11561]"
    }, {
      "left" : "FormatFactory factory = registry.get(name);",
      "right" : "FormatFactory factory = registry.get(name);",
      "info" : "VariableDeclarationStatement[10660-10703]:VariableDeclarationStatement[11588-11631]"
    }, {
      "left" : "if (factory != null)",
      "right" : "if (factory != null)",
      "info" : "IfStatement[10716-10819]:IfStatement[11644-11747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10737-10819]:Block[11665-11747]"
    }, {
      "left" : "return factory.getFormat(name, args, getLocale());",
      "right" : "return factory.getFormat(name, args, getLocale());",
      "info" : "ReturnStatement[10755-10805]:ReturnStatement[11683-11733]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10838-10850]:ReturnStatement[11766-11778]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11059-11066]:Modifier[11987-11994]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[11067-11070]:PrimitiveType[11995-11998]"
    }, {
      "left" : "readArgumentIndex",
      "right" : "readArgumentIndex",
      "info" : "SimpleName[11071-11088]:SimpleName[11999-12016]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[11089-11103]:SingleVariableDeclaration[12017-12031]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[11105-11122]:SingleVariableDeclaration[12033-12050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11124-12519]:Block[12052-13447]"
    }, {
      "left" : "int start = pos.getIndex();",
      "right" : "int start = pos.getIndex();",
      "info" : "VariableDeclarationStatement[11134-11161]:VariableDeclarationStatement[12062-12089]"
    }, {
      "left" : "seekNonWs(pattern, pos);",
      "right" : "seekNonWs(pattern, pos);",
      "info" : "ExpressionStatement[11170-11194]:ExpressionStatement[12098-12122]"
    }, {
      "left" : "StringBuffer result = new StringBuffer();",
      "right" : "StringBuffer result = new StringBuffer();",
      "info" : "VariableDeclarationStatement[11203-11244]:VariableDeclarationStatement[12131-12172]"
    }, {
      "left" : "boolean error = false;",
      "right" : "boolean error = false;",
      "info" : "VariableDeclarationStatement[11253-11275]:VariableDeclarationStatement[12181-12203]"
    }, {
      "left" : "for (; !error && pos.getIndex() < pattern.length(); next(pos))",
      "right" : "for (; !error && pos.getIndex() < pattern.length(); next(pos))",
      "info" : "ForStatement[11284-12168]:ForStatement[12212-13096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11347-12168]:Block[12275-13096]"
    }, {
      "left" : "char c = pattern.charAt(pos.getIndex());",
      "right" : "char c = pattern.charAt(pos.getIndex());",
      "info" : "VariableDeclarationStatement[11361-11401]:VariableDeclarationStatement[12289-12329]"
    }, {
      "left" : "if (Character.isWhitespace(c))",
      "right" : "if (Character.isWhitespace(c))",
      "info" : "IfStatement[11414-11688]:IfStatement[12342-12616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11445-11688]:Block[12373-12616]"
    }, {
      "left" : "seekNonWs(pattern, pos);",
      "right" : "seekNonWs(pattern, pos);",
      "info" : "ExpressionStatement[11463-11487]:ExpressionStatement[12391-12415]"
    }, {
      "left" : "c = pattern.charAt(pos.getIndex());",
      "right" : "c = pattern.charAt(pos.getIndex());",
      "info" : "ExpressionStatement[11504-11539]:ExpressionStatement[12432-12467]"
    }, {
      "left" : "if (c != START_FMT && c != END_FE)",
      "right" : "if (c != START_FMT && c != END_FE)",
      "info" : "IfStatement[11556-11674]:IfStatement[12484-12602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11591-11674]:Block[12519-12602]"
    }, {
      "left" : "error = true;",
      "right" : "error = true;",
      "info" : "ExpressionStatement[11613-11626]:ExpressionStatement[12541-12554]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[11647-11656]:ContinueStatement[12575-12584]"
    }, {
      "left" : "if ((c == START_FMT || c == END_FE) && result.length() > 0)",
      "right" : "if ((c == START_FMT || c == END_FE) && result.length() > 0)",
      "info" : "IfStatement[11701-12085]:IfStatement[12629-13013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11761-12085]:Block[12689-13013]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11779-12071]:TryStatement[12707-12999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11783-11866]:Block[12711-12794]"
    }, {
      "left" : "return Integer.parseInt(result.toString());",
      "right" : "return Integer.parseInt(result.toString());",
      "info" : "ReturnStatement[11805-11848]:ReturnStatement[12733-12776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11899-12071]:Block[12827-12999]"
    }, {
      "left" : "error = !Character.isDigit(c);",
      "right" : "error = !Character.isDigit(c);",
      "info" : "ExpressionStatement[12098-12128]:ExpressionStatement[13026-13056]"
    }, {
      "left" : "result.append(c);",
      "right" : "result.append(c);",
      "info" : "ExpressionStatement[12141-12158]:ExpressionStatement[13069-13086]"
    }, {
      "left" : "if (error)",
      "right" : "if (error)",
      "info" : "IfStatement[12177-12400]:IfStatement[13105-13328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12188-12400]:Block[13116-13328]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Invalid format argument index at position \" + start + \": \"\n                            + pattern.substring(start, pos.getIndex()));",
      "right" : "throw new IllegalArgumentException(\n                    \"Invalid format argument index at position \" + start + \": \"\n                            + pattern.substring(start, pos.getIndex()));",
      "info" : "ThrowStatement[12202-12390]:ThrowStatement[13130-13318]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Unterminated format element at position \" + start);",
      "right" : "throw new IllegalArgumentException(\n                \"Unterminated format element at position \" + start);",
      "info" : "ThrowStatement[12409-12513]:ThrowStatement[13337-13441]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[12724-12731]:Modifier[13652-13659]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[12732-12738]:SimpleType[13660-13666]"
    }, {
      "left" : "parseFormatDescription",
      "right" : "parseFormatDescription",
      "info" : "SimpleName[12739-12761]:SimpleName[13667-13689]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[12762-12776]:SingleVariableDeclaration[13690-13704]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[12778-12795]:SingleVariableDeclaration[13706-13723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12797-13554]:Block[13725-14482]"
    }, {
      "left" : "int start = pos.getIndex();",
      "right" : "int start = pos.getIndex();",
      "info" : "VariableDeclarationStatement[12807-12834]:VariableDeclarationStatement[13735-13762]"
    }, {
      "left" : "seekNonWs(pattern, pos);",
      "right" : "seekNonWs(pattern, pos);",
      "info" : "ExpressionStatement[12843-12867]:ExpressionStatement[13771-13795]"
    }, {
      "left" : "int text = pos.getIndex();",
      "right" : "int text = pos.getIndex();",
      "info" : "VariableDeclarationStatement[12876-12902]:VariableDeclarationStatement[13804-13830]"
    }, {
      "left" : "int depth = 1;",
      "right" : "int depth = 1;",
      "info" : "VariableDeclarationStatement[12911-12925]:VariableDeclarationStatement[13839-13853]"
    }, {
      "left" : "for (; pos.getIndex() < pattern.length(); next(pos))",
      "right" : "for (; pos.getIndex() < pattern.length(); next(pos))",
      "info" : "ForStatement[12934-13435]:ForStatement[13862-14363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12987-13435]:Block[13915-14363]"
    }, {
      "left" : "switch (pattern.charAt(pos.getIndex())) {\n            case START_FE:\n                depth++;\n                break;\n            case END_FE:\n                depth--;\n                if (depth == 0) {\n                    return pattern.substring(text, pos.getIndex());\n                }\n                break;\n            case QUOTE:\n                getQuotedString(pattern, pos, false);\n                break;\n            }",
      "right" : "switch (pattern.charAt(pos.getIndex())) {\n            case START_FE:\n                depth++;\n                break;\n            case END_FE:\n                depth--;\n                if (depth == 0) {\n                    return pattern.substring(text, pos.getIndex());\n                }\n                break;\n            case QUOTE:\n                getQuotedString(pattern, pos, false);\n                break;\n            }",
      "info" : "SwitchStatement[13001-13425]:SwitchStatement[13929-14353]"
    }, {
      "left" : "case START_FE:",
      "right" : "case START_FE:",
      "info" : "SwitchCase[13055-13069]:SwitchCase[13983-13997]"
    }, {
      "left" : "depth++;",
      "right" : "depth++;",
      "info" : "ExpressionStatement[13086-13094]:ExpressionStatement[14014-14022]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13111-13117]:BreakStatement[14039-14045]"
    }, {
      "left" : "case END_FE:",
      "right" : "case END_FE:",
      "info" : "SwitchCase[13130-13142]:SwitchCase[14058-14070]"
    }, {
      "left" : "depth--;",
      "right" : "depth--;",
      "info" : "ExpressionStatement[13159-13167]:ExpressionStatement[14087-14095]"
    }, {
      "left" : "if (depth == 0)",
      "right" : "if (depth == 0)",
      "info" : "IfStatement[13184-13287]:IfStatement[14112-14215]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13200-13287]:Block[14128-14215]"
    }, {
      "left" : "return pattern.substring(text, pos.getIndex());",
      "right" : "return pattern.substring(text, pos.getIndex());",
      "info" : "ReturnStatement[13222-13269]:ReturnStatement[14150-14197]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13304-13310]:BreakStatement[14232-14238]"
    }, {
      "left" : "case QUOTE:",
      "right" : "case QUOTE:",
      "info" : "SwitchCase[13323-13334]:SwitchCase[14251-14262]"
    }, {
      "left" : "getQuotedString(pattern, pos, false);",
      "right" : "getQuotedString(pattern, pos, false);",
      "info" : "ExpressionStatement[13351-13388]:ExpressionStatement[14279-14316]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13405-13411]:BreakStatement[14333-14339]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Unterminated format element at position \" + start);",
      "right" : "throw new IllegalArgumentException(\n                \"Unterminated format element at position \" + start);",
      "info" : "ThrowStatement[13444-13548]:ThrowStatement[14372-14476]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[13779-13786]:Modifier[14707-14714]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[13787-13793]:SimpleType[14715-14721]"
    }, {
      "left" : "insertFormats",
      "right" : "insertFormats",
      "info" : "SimpleName[13794-13807]:SimpleName[14722-14735]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[13808-13822]:SingleVariableDeclaration[14736-14750]"
    }, {
      "left" : "ArrayList<String> customPatterns",
      "right" : "ArrayList<String> customPatterns",
      "info" : "SingleVariableDeclaration[13824-13856]:SingleVariableDeclaration[14752-14784]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13858-15042]:Block[14786-15970]"
    }, {
      "left" : "if (!containsElements(customPatterns))",
      "right" : "if (!containsElements(customPatterns))",
      "info" : "IfStatement[13868-13946]:IfStatement[14796-14874]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13907-13946]:Block[14835-14874]"
    }, {
      "left" : "return pattern;",
      "right" : "return pattern;",
      "info" : "ReturnStatement[13921-13936]:ReturnStatement[14849-14864]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(pattern.length() * 2);",
      "right" : "StringBuilder sb = new StringBuilder(pattern.length() * 2);",
      "info" : "VariableDeclarationStatement[13955-14014]:VariableDeclarationStatement[14883-14942]"
    }, {
      "left" : "ParsePosition pos = new ParsePosition(0);",
      "right" : "ParsePosition pos = new ParsePosition(0);",
      "info" : "VariableDeclarationStatement[14023-14064]:VariableDeclarationStatement[14951-14992]"
    }, {
      "left" : "int fe = -1;",
      "right" : "int fe = -1;",
      "info" : "VariableDeclarationStatement[14073-14085]:VariableDeclarationStatement[15001-15013]"
    }, {
      "left" : "int depth = 0;",
      "right" : "int depth = 0;",
      "info" : "VariableDeclarationStatement[14094-14108]:VariableDeclarationStatement[15022-15036]"
    }, {
      "left" : "while (pos.getIndex() < pattern.length())",
      "right" : "while (pos.getIndex() < pattern.length())",
      "info" : "WhileStatement[14117-15006]:WhileStatement[15045-15934]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14159-15006]:Block[15087-15934]"
    }, {
      "left" : "char c = pattern.charAt(pos.getIndex());",
      "right" : "char c = pattern.charAt(pos.getIndex());",
      "info" : "VariableDeclarationStatement[14173-14213]:VariableDeclarationStatement[15101-15141]"
    }, {
      "left" : "switch (c) {\n            case QUOTE:\n                appendQuotedString(pattern, pos, sb, false);\n                break;\n            case START_FE:\n                depth++;\n                if (depth == 1) {\n                    fe++;\n                    sb.append(START_FE).append(\n                            readArgumentIndex(pattern, next(pos)));\n                    String customPattern = customPatterns.get(fe);\n                    if (customPattern != null) {\n                        sb.append(START_FMT).append(customPattern);\n                    }\n                }\n                break;\n            case END_FE:\n                depth--;\n                //$FALL-THROUGH$\n            default:\n                sb.append(c);\n                next(pos);\n            }",
      "right" : "switch (c) {\n            case QUOTE:\n                appendQuotedString(pattern, pos, sb, false);\n                break;\n            case START_FE:\n                depth++;\n                if (depth == 1) {\n                    fe++;\n                    sb.append(START_FE).append(\n                            readArgumentIndex(pattern, next(pos)));\n                    String customPattern = customPatterns.get(fe);\n                    if (customPattern != null) {\n                        sb.append(START_FMT).append(customPattern);\n                    }\n                }\n                break;\n            case END_FE:\n                depth--;\n                //$FALL-THROUGH$\n            default:\n                sb.append(c);\n                next(pos);\n            }",
      "info" : "SwitchStatement[14226-14996]:SwitchStatement[15154-15924]"
    }, {
      "left" : "case QUOTE:",
      "right" : "case QUOTE:",
      "info" : "SwitchCase[14251-14262]:SwitchCase[15179-15190]"
    }, {
      "left" : "appendQuotedString(pattern, pos, sb, false);",
      "right" : "appendQuotedString(pattern, pos, sb, false);",
      "info" : "ExpressionStatement[14279-14323]:ExpressionStatement[15207-15251]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14340-14346]:BreakStatement[15268-15274]"
    }, {
      "left" : "case START_FE:",
      "right" : "case START_FE:",
      "info" : "SwitchCase[14359-14373]:SwitchCase[15287-15301]"
    }, {
      "left" : "depth++;",
      "right" : "depth++;",
      "info" : "ExpressionStatement[14390-14398]:ExpressionStatement[15318-15326]"
    }, {
      "left" : "if (depth == 1)",
      "right" : "if (depth == 1)",
      "info" : "IfStatement[14415-14798]:IfStatement[15343-15726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14431-14798]:Block[15359-15726]"
    }, {
      "left" : "fe++;",
      "right" : "fe++;",
      "info" : "ExpressionStatement[14453-14458]:ExpressionStatement[15381-15386]"
    }, {
      "left" : "sb.append(START_FE).append(\n                            readArgumentIndex(pattern, next(pos)));",
      "right" : "sb.append(START_FE).append(\n                            readArgumentIndex(pattern, next(pos)));",
      "info" : "ExpressionStatement[14479-14574]:ExpressionStatement[15407-15502]"
    }, {
      "left" : "String customPattern = customPatterns.get(fe);",
      "right" : "String customPattern = customPatterns.get(fe);",
      "info" : "VariableDeclarationStatement[14595-14641]:VariableDeclarationStatement[15523-15569]"
    }, {
      "left" : "if (customPattern != null)",
      "right" : "if (customPattern != null)",
      "info" : "IfStatement[14662-14780]:IfStatement[15590-15708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14689-14780]:Block[15617-15708]"
    }, {
      "left" : "sb.append(START_FMT).append(customPattern);",
      "right" : "sb.append(START_FMT).append(customPattern);",
      "info" : "ExpressionStatement[14715-14758]:ExpressionStatement[15643-15686]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14815-14821]:BreakStatement[15743-15749]"
    }, {
      "left" : "case END_FE:",
      "right" : "case END_FE:",
      "info" : "SwitchCase[14834-14846]:SwitchCase[15762-15774]"
    }, {
      "left" : "depth--;",
      "right" : "depth--;",
      "info" : "ExpressionStatement[14863-14871]:ExpressionStatement[15791-15799]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[14917-14925]:SwitchCase[15845-15853]"
    }, {
      "left" : "sb.append(c);",
      "right" : "sb.append(c);",
      "info" : "ExpressionStatement[14942-14955]:ExpressionStatement[15870-15883]"
    }, {
      "left" : "next(pos);",
      "right" : "next(pos);",
      "info" : "ExpressionStatement[14972-14982]:ExpressionStatement[15900-15910]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[15015-15036]:ReturnStatement[15943-15964]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15203-15210]:Modifier[16131-16138]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15211-15215]:PrimitiveType[16139-16143]"
    }, {
      "left" : "seekNonWs",
      "right" : "seekNonWs",
      "info" : "SimpleName[15216-15225]:SimpleName[16144-16153]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[15226-15240]:SingleVariableDeclaration[16154-16168]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[15242-15259]:SingleVariableDeclaration[16170-16187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15261-15538]:Block[16189-16466]"
    }, {
      "left" : "int len = 0;",
      "right" : "int len = 0;",
      "info" : "VariableDeclarationStatement[15271-15283]:VariableDeclarationStatement[16199-16211]"
    }, {
      "left" : "char[] buffer = pattern.toCharArray();",
      "right" : "char[] buffer = pattern.toCharArray();",
      "info" : "VariableDeclarationStatement[15292-15330]:VariableDeclarationStatement[16220-16258]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[15339-15532]:DoStatement[16267-16460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15342-15478]:Block[16270-16406]"
    }, {
      "left" : "len = StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());",
      "right" : "len = StrMatcher.splitMatcher().isMatch(buffer, pos.getIndex());",
      "info" : "ExpressionStatement[15356-15420]:ExpressionStatement[16284-16348]"
    }, {
      "left" : "pos.setIndex(pos.getIndex() + len);",
      "right" : "pos.setIndex(pos.getIndex() + len);",
      "info" : "ExpressionStatement[15433-15468]:ExpressionStatement[16361-16396]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15689-15696]:Modifier[16617-16624]"
    }, {
      "left" : "ParsePosition",
      "right" : "ParsePosition",
      "info" : "SimpleType[15697-15710]:SimpleType[16625-16638]"
    }, {
      "left" : "next",
      "right" : "next",
      "info" : "SimpleName[15711-15715]:SimpleName[16639-16643]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[15716-15733]:SingleVariableDeclaration[16644-16661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15735-15804]:Block[16663-16732]"
    }, {
      "left" : "pos.setIndex(pos.getIndex() + 1);",
      "right" : "pos.setIndex(pos.getIndex() + 1);",
      "info" : "ExpressionStatement[15745-15778]:ExpressionStatement[16673-16706]"
    }, {
      "left" : "return pos;",
      "right" : "return pos;",
      "info" : "ReturnStatement[15787-15798]:ReturnStatement[16715-16726]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16153-16160]:Modifier[17081-17088]"
    }, {
      "left" : "StringBuilder",
      "right" : "StringBuilder",
      "info" : "SimpleType[16161-16174]:SimpleType[17089-17102]"
    }, {
      "left" : "appendQuotedString",
      "right" : "appendQuotedString",
      "info" : "SimpleName[16175-16193]:SimpleName[17103-17121]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[16194-16208]:SingleVariableDeclaration[17122-17136]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[16210-16227]:SingleVariableDeclaration[17138-17155]"
    }, {
      "left" : "StringBuilder appendTo",
      "right" : "StringBuilder appendTo",
      "info" : "SingleVariableDeclaration[16241-16263]:SingleVariableDeclaration[17169-17191]"
    }, {
      "left" : "boolean escapingOn",
      "right" : "boolean escapingOn",
      "info" : "SingleVariableDeclaration[16265-16283]:SingleVariableDeclaration[17193-17211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16285-17354]:Block[17213-18282]"
    }, {
      "left" : "int start = pos.getIndex();",
      "right" : "int start = pos.getIndex();",
      "info" : "VariableDeclarationStatement[16295-16322]:VariableDeclarationStatement[17223-17250]"
    }, {
      "left" : "char[] c = pattern.toCharArray();",
      "right" : "char[] c = pattern.toCharArray();",
      "info" : "VariableDeclarationStatement[16331-16364]:VariableDeclarationStatement[17259-17292]"
    }, {
      "left" : "if (escapingOn && c[start] == QUOTE)",
      "right" : "if (escapingOn && c[start] == QUOTE)",
      "info" : "IfStatement[16373-16513]:IfStatement[17301-17441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16410-16513]:Block[17338-17441]"
    }, {
      "left" : "next(pos);",
      "right" : "next(pos);",
      "info" : "ExpressionStatement[16424-16434]:ExpressionStatement[17352-17362]"
    }, {
      "left" : "return appendTo == null ? null : appendTo.append(QUOTE);",
      "right" : "return appendTo == null ? null : appendTo.append(QUOTE);",
      "info" : "ReturnStatement[16447-16503]:ReturnStatement[17375-17431]"
    }, {
      "left" : "int lastHold = start;",
      "right" : "int lastHold = start;",
      "info" : "VariableDeclarationStatement[16522-16543]:VariableDeclarationStatement[17450-17471]"
    }, {
      "left" : "for (int i = pos.getIndex(); i < pattern.length(); i++)",
      "right" : "for (int i = pos.getIndex(); i < pattern.length(); i++)",
      "info" : "ForStatement[16552-17236]:ForStatement[17480-18164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16608-17236]:Block[17536-18164]"
    }, {
      "left" : "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE))",
      "right" : "if (escapingOn && pattern.substring(i).startsWith(ESCAPED_QUOTE))",
      "info" : "IfStatement[16622-16942]:IfStatement[17550-17870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16688-16942]:Block[17616-17870]"
    }, {
      "left" : "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                        QUOTE);",
      "right" : "appendTo.append(c, lastHold, pos.getIndex() - lastHold).append(\n                        QUOTE);",
      "info" : "ExpressionStatement[16706-16801]:ExpressionStatement[17634-17729]"
    }, {
      "left" : "pos.setIndex(i + ESCAPED_QUOTE.length());",
      "right" : "pos.setIndex(i + ESCAPED_QUOTE.length());",
      "info" : "ExpressionStatement[16818-16859]:ExpressionStatement[17746-17787]"
    }, {
      "left" : "lastHold = pos.getIndex();",
      "right" : "lastHold = pos.getIndex();",
      "info" : "ExpressionStatement[16876-16902]:ExpressionStatement[17804-17830]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[16919-16928]:ContinueStatement[17847-17856]"
    }, {
      "left" : "switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold);\n            default:\n                next(pos);\n            }",
      "right" : "switch (c[pos.getIndex()]) {\n            case QUOTE:\n                next(pos);\n                return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold);\n            default:\n                next(pos);\n            }",
      "info" : "SwitchStatement[16955-17226]:SwitchStatement[17883-18154]"
    }, {
      "left" : "case QUOTE:",
      "right" : "case QUOTE:",
      "info" : "SwitchCase[16996-17007]:SwitchCase[17924-17935]"
    }, {
      "left" : "next(pos);",
      "right" : "next(pos);",
      "info" : "ExpressionStatement[17024-17034]:ExpressionStatement[17952-17962]"
    }, {
      "left" : "return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold);",
      "right" : "return appendTo == null ? null : appendTo.append(c, lastHold,\n                        pos.getIndex() - lastHold);",
      "info" : "ReturnStatement[17051-17164]:ReturnStatement[17979-18092]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[17177-17185]:SwitchCase[18105-18113]"
    }, {
      "left" : "next(pos);",
      "right" : "next(pos);",
      "info" : "ExpressionStatement[17202-17212]:ExpressionStatement[18130-18140]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);",
      "right" : "throw new IllegalArgumentException(\n                \"Unterminated quoted string at position \" + start);",
      "info" : "ThrowStatement[17245-17348]:ThrowStatement[18173-18276]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17557-17564]:Modifier[18485-18492]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17565-17569]:PrimitiveType[18493-18497]"
    }, {
      "left" : "getQuotedString",
      "right" : "getQuotedString",
      "info" : "SimpleName[17570-17585]:SimpleName[18498-18513]"
    }, {
      "left" : "String pattern",
      "right" : "String pattern",
      "info" : "SingleVariableDeclaration[17586-17600]:SingleVariableDeclaration[18514-18528]"
    }, {
      "left" : "ParsePosition pos",
      "right" : "ParsePosition pos",
      "info" : "SingleVariableDeclaration[17602-17619]:SingleVariableDeclaration[18530-18547]"
    }, {
      "left" : "boolean escapingOn",
      "right" : "boolean escapingOn",
      "info" : "SingleVariableDeclaration[17633-17651]:SingleVariableDeclaration[18561-18579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17653-17720]:Block[18581-18648]"
    }, {
      "left" : "appendQuotedString(pattern, pos, null, escapingOn);",
      "right" : "appendQuotedString(pattern, pos, null, escapingOn);",
      "info" : "ExpressionStatement[17663-17714]:ExpressionStatement[18591-18642]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17933-17940]:Modifier[18861-18868]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[17941-17948]:PrimitiveType[18869-18876]"
    }, {
      "left" : "containsElements",
      "right" : "containsElements",
      "info" : "SimpleName[17949-17965]:SimpleName[18877-18893]"
    }, {
      "left" : "Collection<?> coll",
      "right" : "Collection<?> coll",
      "info" : "SingleVariableDeclaration[17966-17984]:SingleVariableDeclaration[18894-18912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17986-18259]:Block[18914-19187]"
    }, {
      "left" : "if (coll == null || coll.size() == 0)",
      "right" : "if (coll == null || coll.size() == 0)",
      "info" : "IfStatement[17996-18071]:IfStatement[18924-18999]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18034-18071]:Block[18962-18999]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18048-18061]:ReturnStatement[18976-18989]"
    }, {
      "left" : "for (Iterator<?> iter = coll.iterator(); iter.hasNext())",
      "right" : "for (Iterator<?> iter = coll.iterator(); iter.hasNext())",
      "info" : "ForStatement[18080-18231]:ForStatement[19008-19159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18138-18231]:Block[19066-19159]"
    }, {
      "left" : "if (iter.next() != null)",
      "right" : "if (iter.next() != null)",
      "info" : "IfStatement[18152-18221]:IfStatement[19080-19149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18177-18221]:Block[19105-19149]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18195-18207]:ReturnStatement[19123-19135]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18240-18253]:ReturnStatement[19168-19181]"
    } ]
  },
  "interFileMappings" : { }
}