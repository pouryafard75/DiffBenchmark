{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CheckGlobalThis",
      "right" : "CheckGlobalThis",
      "info" : "TypeDeclaration[873-5498]:TypeDeclaration[873-5745]"
    }, {
      "left" : "static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
      "right" : "static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(\n      \"JSC_USED_GLOBAL_THIS\",\n      \"dangerous use of the global 'this' object\");",
      "info" : "FieldDeclaration[1879-2026]:FieldDeclaration[1879-2026]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2030-2070]:FieldDeclaration[2030-2070]"
    }, {
      "left" : "private final CheckLevel level;",
      "right" : "private final CheckLevel level;",
      "info" : "FieldDeclaration[2073-2104]:FieldDeclaration[2073-2104]"
    }, {
      "left" : "private Node assignLhsChild = null;",
      "right" : "private Node assignLhsChild = null;",
      "info" : "FieldDeclaration[2110-2336]:FieldDeclaration[2110-2336]"
    }, {
      "left" : "CheckGlobalThis(AbstractCompiler compiler, CheckLevel level)",
      "right" : "CheckGlobalThis(AbstractCompiler compiler, CheckLevel level)",
      "info" : "MethodDeclaration[2340-2460]:MethodDeclaration[2340-2460]"
    }, {
      "left" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "right" : "public boolean shouldTraverse(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[2464-4157]:MethodDeclaration[2464-4369]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[4161-4421]:MethodDeclaration[4373-4633]"
    }, {
      "left" : "private boolean shouldReportThis(Node n, Node parent)",
      "right" : "private boolean shouldReportThis(Node n, Node parent)",
      "info" : "MethodDeclaration[4425-4673]:MethodDeclaration[4637-4920]"
    }, {
      "left" : "private JSDocInfo getFunctionJsDocInfo(Node n)",
      "right" : "private JSDocInfo getFunctionJsDocInfo(Node n)",
      "info" : "MethodDeclaration[4677-5496]:MethodDeclaration[4924-5743]"
    } ],
    "mappings" : [
 {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1826-1831]:Modifier[1826-1831]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1832-1837]:TYPE_DECLARATION_KIND[1832-1837]"
    }, {
      "left" : "CheckGlobalThis",
      "right" : "CheckGlobalThis",
      "info" : "SimpleName[1838-1853]:SimpleName[1838-1853]"
    }, {
      "left" : "Callback",
      "right" : "Callback",
      "info" : "SimpleType[1865-1873]:SimpleType[1865-1873]"
    }, {
      "left" : "CheckGlobalThis",
      "right" : "CheckGlobalThis",
      "info" : "SimpleName[2340-2355]:SimpleName[2340-2355]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[2356-2381]:SingleVariableDeclaration[2356-2381]"
    }, {
      "left" : "CheckLevel level",
      "right" : "CheckLevel level",
      "info" : "SingleVariableDeclaration[2383-2399]:SingleVariableDeclaration[2383-2399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2401-2460]:Block[2401-2460]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2407-2432]:ExpressionStatement[2407-2432]"
    }, {
      "left" : "this.level = level;",
      "right" : "this.level = level;",
      "info" : "ExpressionStatement[2437-2456]:ExpressionStatement[2437-2456]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2625-2631]:Modifier[2625-2631]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[2632-2639]:PrimitiveType[2632-2639]"
    }, {
      "left" : "shouldTraverse",
      "right" : "shouldTraverse",
      "info" : "SimpleName[2640-2654]:SimpleName[2640-2654]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[2655-2670]:SingleVariableDeclaration[2655-2670]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[2672-2678]:SingleVariableDeclaration[2672-2678]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[2680-2691]:SingleVariableDeclaration[2680-2691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2693-4157]:Block[2693-4369]"
    }, {
      "left" : "if (n.getType() == Token.FUNCTION)",
      "right" : "if (n.getType() == Token.FUNCTION)",
      "info" : "IfStatement[2700-3227]:IfStatement[2700-3439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2735-3227]:Block[2735-3439]"
    }, {
      "left" : "JSDocInfo jsDoc = getFunctionJsDocInfo(n);",
      "right" : "JSDocInfo jsDoc = getFunctionJsDocInfo(n);",
      "info" : "VariableDeclarationStatement[2838-2880]:VariableDeclarationStatement[2838-2880]"
    }, {
      "left" : "if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType()))",
      "right" : "if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType()))",
      "info" : "IfStatement[2887-2987]:IfStatement[2887-2987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2956-2987]:Block[2956-2987]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[2966-2979]:ReturnStatement[2966-2979]"
    }, {
      "left" : "if (parent != null && parent.getType() == Token.ASSIGN)",
      "right" : "if (parent != null && parent.getType() == Token.ASSIGN)",
      "info" : "IfStatement[3233-4135]:IfStatement[3445-4347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3289-4135]:Block[3501-4347]"
    }, {
      "left" : "Node lhs = parent.getFirstChild();",
      "right" : "Node lhs = parent.getFirstChild();",
      "info" : "VariableDeclarationStatement[3297-3331]:VariableDeclarationStatement[3509-3543]"
    }, {
      "left" : "Node rhs = lhs.getNext();",
      "right" : "Node rhs = lhs.getNext();",
      "info" : "VariableDeclarationStatement[3338-3363]:VariableDeclarationStatement[3550-3575]"
    }, {
      "left" : "if (n == lhs)",
      "right" : "if (n == lhs)",
      "info" : "IfStatement[3377-4129]:IfStatement[3589-4341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3391-3675]:Block[3603-3887]"
    }, {
      "left" : "if (assignLhsChild == null)",
      "right" : "if (assignLhsChild == null)",
      "info" : "IfStatement[3596-3667]:IfStatement[3808-3879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3624-3667]:Block[3836-3879]"
    }, {
      "left" : "assignLhsChild = lhs;",
      "right" : "assignLhsChild = lhs;",
      "info" : "ExpressionStatement[3636-3657]:ExpressionStatement[3848-3869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3681-4129]:Block[3893-4341]"
    }, {
      "left" : "if (lhs.getType() == Token.GETPROP)",
      "right" : "if (lhs.getType() == Token.GETPROP)",
      "info" : "IfStatement[3808-4121]:IfStatement[4020-4333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3844-4121]:Block[4056-4333]"
    }, {
      "left" : "if (lhs.getLastChild().getString().equals(\"prototype\"))",
      "right" : "if (lhs.getLastChild().getString().equals(\"prototype\"))",
      "info" : "IfStatement[3856-3951]:IfStatement[4068-4163]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3912-3951]:Block[4124-4163]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[3926-3939]:ReturnStatement[4138-4151]"
    }, {
      "left" : "String leftName = lhs.getQualifiedName();",
      "right" : "String leftName = lhs.getQualifiedName();",
      "info" : "VariableDeclarationStatement[3962-4003]:VariableDeclarationStatement[4174-4215]"
    }, {
      "left" : "if (leftName != null && leftName.contains(\".prototype.\"))",
      "right" : "if (leftName != null && leftName.contains(\".prototype.\"))",
      "info" : "IfStatement[4014-4111]:IfStatement[4226-4323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4072-4111]:Block[4284-4323]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4086-4099]:ReturnStatement[4298-4311]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4141-4153]:ReturnStatement[4353-4365]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4161-4167]:Modifier[4373-4379]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4168-4172]:PrimitiveType[4380-4384]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[4173-4178]:SimpleName[4385-4390]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[4179-4194]:SingleVariableDeclaration[4391-4406]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4196-4202]:SingleVariableDeclaration[4408-4414]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4204-4215]:SingleVariableDeclaration[4416-4427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4217-4421]:Block[4429-4633]"
    }, {
      "left" : "if (n.getType() == Token.THIS && shouldReportThis(n, parent))",
      "right" : "if (n.getType() == Token.THIS && shouldReportThis(n, parent))",
      "info" : "IfStatement[4223-4351]:IfStatement[4435-4563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4285-4351]:Block[4497-4563]"
    }, {
      "left" : "compiler.report(t.makeError(n, level, GLOBAL_THIS));",
      "right" : "compiler.report(t.makeError(n, level, GLOBAL_THIS));",
      "info" : "ExpressionStatement[4293-4345]:ExpressionStatement[4505-4557]"
    }, {
      "left" : "if (n == assignLhsChild)",
      "right" : "if (n == assignLhsChild)",
      "info" : "IfStatement[4356-4417]:IfStatement[4568-4629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4381-4417]:Block[4593-4629]"
    }, {
      "left" : "assignLhsChild = null;",
      "right" : "assignLhsChild = null;",
      "info" : "ExpressionStatement[4389-4411]:ExpressionStatement[4601-4623]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4425-4432]:Modifier[4637-4644]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[4433-4440]:PrimitiveType[4645-4652]"
    }, {
      "left" : "shouldReportThis",
      "right" : "shouldReportThis",
      "info" : "SimpleName[4441-4457]:SimpleName[4653-4669]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4458-4464]:SingleVariableDeclaration[4670-4676]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[4466-4477]:SingleVariableDeclaration[4678-4689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4479-4673]:Block[4691-4920]"
    }, {
      "left" : "if (assignLhsChild != null)",
      "right" : "if (assignLhsChild != null)",
      "info" : "IfStatement[4485-4600]:IfStatement[4697-4812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4513-4600]:Block[4725-4812]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[4582-4594]:ReturnStatement[4794-4806]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[4656-4669]:ReturnStatement[3412-3425]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[4953-4960]:Modifier[5200-5207]"
    }, {
      "left" : "JSDocInfo",
      "right" : "JSDocInfo",
      "info" : "SimpleType[4961-4970]:SimpleType[5208-5217]"
    }, {
      "left" : "getFunctionJsDocInfo",
      "right" : "getFunctionJsDocInfo",
      "info" : "SimpleName[4971-4991]:SimpleName[5218-5238]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[4992-4998]:SingleVariableDeclaration[5239-5245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5000-5496]:Block[5247-5743]"
    }, {
      "left" : "JSDocInfo jsDoc = n.getJSDocInfo();",
      "right" : "JSDocInfo jsDoc = n.getJSDocInfo();",
      "info" : "VariableDeclarationStatement[5006-5041]:VariableDeclarationStatement[5253-5288]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[5046-5074]:VariableDeclarationStatement[5293-5321]"
    }, {
      "left" : "if (jsDoc == null)",
      "right" : "if (jsDoc == null)",
      "info" : "IfStatement[5079-5474]:IfStatement[5326-5721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5098-5474]:Block[5345-5721]"
    }, {
      "left" : "int parentType = parent.getType();",
      "right" : "int parentType = parent.getType();",
      "info" : "VariableDeclarationStatement[5106-5140]:VariableDeclarationStatement[5353-5387]"
    }, {
      "left" : "if (parentType == Token.NAME || parentType == Token.ASSIGN)",
      "right" : "if (parentType == Token.NAME || parentType == Token.ASSIGN)",
      "info" : "IfStatement[5147-5468]:IfStatement[5394-5715]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5207-5468]:Block[5454-5715]"
    }, {
      "left" : "jsDoc = parent.getJSDocInfo();",
      "right" : "jsDoc = parent.getJSDocInfo();",
      "info" : "ExpressionStatement[5217-5247]:ExpressionStatement[5464-5494]"
    }, {
      "left" : "if (jsDoc == null && parentType == Token.NAME)",
      "right" : "if (jsDoc == null && parentType == Token.NAME)",
      "info" : "IfStatement[5256-5460]:IfStatement[5503-5707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5303-5460]:Block[5550-5707]"
    }, {
      "left" : "Node gramps = parent.getParent();",
      "right" : "Node gramps = parent.getParent();",
      "info" : "VariableDeclarationStatement[5315-5348]:VariableDeclarationStatement[5562-5595]"
    }, {
      "left" : "if (gramps.getType() == Token.VAR)",
      "right" : "if (gramps.getType() == Token.VAR)",
      "info" : "IfStatement[5359-5450]:IfStatement[5606-5697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5394-5450]:Block[5641-5697]"
    }, {
      "left" : "jsDoc = gramps.getJSDocInfo();",
      "right" : "jsDoc = gramps.getJSDocInfo();",
      "info" : "ExpressionStatement[5408-5438]:ExpressionStatement[5655-5685]"
    }, {
      "left" : "return jsDoc;",
      "right" : "return jsDoc;",
      "info" : "ReturnStatement[5479-5492]:ReturnStatement[5726-5739]"
    } ]
  },
  "interFileMappings" : { }
}