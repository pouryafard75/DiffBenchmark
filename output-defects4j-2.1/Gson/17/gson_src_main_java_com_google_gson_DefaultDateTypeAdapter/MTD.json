{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DefaultDateTypeAdapter",
      "right" : "DefaultDateTypeAdapter",
      "info" : "TypeDeclaration[1037-4719]:TypeDeclaration[1037-4684]"
    }, {
      "left" : "private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";",
      "right" : "private static final String SIMPLE_NAME = \"DefaultDateTypeAdapter\";",
      "info" : "FieldDeclaration[1259-1326]:FieldDeclaration[1259-1326]"
    }, {
      "left" : "private final Class<? extends Date> dateType;",
      "right" : "private final Class<? extends Date> dateType;",
      "info" : "FieldDeclaration[1330-1375]:FieldDeclaration[1330-1375]"
    }, {
      "left" : "private final DateFormat enUsFormat;",
      "right" : "private final DateFormat enUsFormat;",
      "info" : "FieldDeclaration[1378-1414]:FieldDeclaration[1378-1414]"
    }, {
      "left" : "private final DateFormat localFormat;",
      "right" : "private final DateFormat localFormat;",
      "info" : "FieldDeclaration[1417-1454]:FieldDeclaration[1417-1454]"
    }, {
      "left" : "DefaultDateTypeAdapter(Class<? extends Date> dateType)",
      "right" : "DefaultDateTypeAdapter(Class<? extends Date> dateType)",
      "info" : "MethodDeclaration[1460-1711]:MethodDeclaration[1460-1711]"
    }, {
      "left" : "DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern)",
      "right" : "DefaultDateTypeAdapter(Class<? extends Date> dateType, String datePattern)",
      "info" : "MethodDeclaration[1715-1896]:MethodDeclaration[1715-1896]"
    }, {
      "left" : "DefaultDateTypeAdapter(Class<? extends Date> dateType, int style)",
      "right" : "DefaultDateTypeAdapter(Class<? extends Date> dateType, int style)",
      "info" : "MethodDeclaration[1900-2072]:MethodDeclaration[1900-2072]"
    }, {
      "left" : "public DefaultDateTypeAdapter(int dateStyle, int timeStyle)",
      "right" : "public DefaultDateTypeAdapter(int dateStyle, int timeStyle)",
      "info" : "MethodDeclaration[2076-2298]:MethodDeclaration[2076-2298]"
    }, {
      "left" : "public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle)",
      "right" : "public DefaultDateTypeAdapter(Class<? extends Date> dateType, int dateStyle, int timeStyle)",
      "info" : "MethodDeclaration[2302-2554]:MethodDeclaration[2302-2554]"
    }, {
      "left" : "DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat)",
      "right" : "DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat)",
      "info" : "MethodDeclaration[2558-3045]:MethodDeclaration[2558-3045]"
    }, {
      "left" : "public void write(JsonWriter out, Date value) throws IOException",
      "right" : "public void write(JsonWriter out, Date value) throws IOException",
      "info" : "MethodDeclaration[3160-3446]:MethodDeclaration[3160-3446]"
    }, {
      "left" : "public Date read(JsonReader in) throws IOException",
      "right" : "public Date read(JsonReader in) throws IOException",
      "info" : "MethodDeclaration[3450-4064]:MethodDeclaration[3450-4029]"
    }, {
      "left" : "private Date deserializeToDate(String s)",
      "right" : "private Date deserializeToDate(String s)",
      "info" : "MethodDeclaration[4068-4494]:MethodDeclaration[4033-4459]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[4498-4717]:MethodDeclaration[4463-4682]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1515-1711]:Block[1515-1711]"
    }, {
      "left" : "this(dateType,\n        DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n        DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));",
      "right" : "this(dateType,\n        DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT, Locale.US),\n        DateFormat.getDateTimeInstance(DateFormat.DEFAULT, DateFormat.DEFAULT));",
      "info" : "ConstructorInvocation[1521-1707]:ConstructorInvocation[1521-1707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1790-1896]:Block[1790-1896]"
    }, {
      "left" : "this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));",
      "right" : "this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));",
      "info" : "ConstructorInvocation[1796-1892]:ConstructorInvocation[1796-1892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1966-2072]:Block[1966-2072]"
    }, {
      "left" : "this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));",
      "right" : "this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));",
      "info" : "ConstructorInvocation[1972-2068]:ConstructorInvocation[1972-2068]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2136-2298]:Block[2136-2298]"
    }, {
      "left" : "this(Date.class,\n        DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n        DateFormat.getDateTimeInstance(dateStyle, timeStyle));",
      "right" : "this(Date.class,\n        DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n        DateFormat.getDateTimeInstance(dateStyle, timeStyle));",
      "info" : "ConstructorInvocation[2142-2294]:ConstructorInvocation[2142-2294]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2394-2554]:Block[2394-2554]"
    }, {
      "left" : "this(dateType,\n        DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n        DateFormat.getDateTimeInstance(dateStyle, timeStyle));",
      "right" : "this(dateType,\n        DateFormat.getDateTimeInstance(dateStyle, timeStyle, Locale.US),\n        DateFormat.getDateTimeInstance(dateStyle, timeStyle));",
      "info" : "ConstructorInvocation[2400-2550]:ConstructorInvocation[2400-2550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2666-3045]:Block[2666-3045]"
    }, {
      "left" : "if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class)",
      "right" : "if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class)",
      "info" : "IfStatement[2672-2941]:IfStatement[2672-2941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2768-2941]:Block[2768-2941]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Date type must be one of \" + Date.class + \", \" + Timestamp.class + \", or \" + java.sql.Date.class + \" but was \" + dateType);",
      "right" : "throw new IllegalArgumentException(\"Date type must be one of \" + Date.class + \", \" + Timestamp.class + \", or \" + java.sql.Date.class + \" but was \" + dateType);",
      "info" : "ThrowStatement[2776-2935]:ThrowStatement[2776-2935]"
    }, {
      "left" : "this.dateType = dateType;",
      "right" : "this.dateType = dateType;",
      "info" : "ExpressionStatement[2946-2971]:ExpressionStatement[2946-2971]"
    }, {
      "left" : "this.enUsFormat = enUsFormat;",
      "right" : "this.enUsFormat = enUsFormat;",
      "info" : "ExpressionStatement[2976-3005]:ExpressionStatement[2976-3005]"
    }, {
      "left" : "this.localFormat = localFormat;",
      "right" : "this.localFormat = localFormat;",
      "info" : "ExpressionStatement[3010-3041]:ExpressionStatement[3010-3041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3237-3446]:Block[3237-3446]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[3243-3306]:IfStatement[3243-3306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3262-3306]:Block[3262-3306]"
    }, {
      "left" : "out.nullValue();",
      "right" : "out.nullValue();",
      "info" : "ExpressionStatement[3270-3286]:ExpressionStatement[3270-3286]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[3293-3300]:ReturnStatement[3293-3300]"
    }, {
      "left" : "synchronized (localFormat) {\n      String dateFormatAsString = enUsFormat.format(value);\n      out.value(dateFormatAsString);\n    }",
      "right" : "synchronized (localFormat) {\n      String dateFormatAsString = enUsFormat.format(value);\n      out.value(dateFormatAsString);\n    }",
      "info" : "SynchronizedStatement[3311-3442]:SynchronizedStatement[3311-3442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3338-3442]:Block[3338-3442]"
    }, {
      "left" : "String dateFormatAsString = enUsFormat.format(value);",
      "right" : "String dateFormatAsString = enUsFormat.format(value);",
      "info" : "VariableDeclarationStatement[3346-3399]:VariableDeclarationStatement[3346-3399]"
    }, {
      "left" : "out.value(dateFormatAsString);",
      "right" : "out.value(dateFormatAsString);",
      "info" : "ExpressionStatement[3406-3436]:ExpressionStatement[3406-3436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3513-4064]:Block[3513-4029]"
    }, {
      "left" : "if (in.peek() != JsonToken.STRING)",
      "right" : "if (in.peek() == JsonToken.NULL)",
      "info" : "IfStatement[3519-3634]:IfStatement[3519-3599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3554-3634]:Block[3552-3599]"
    }, {
      "left" : "Date date = deserializeToDate(in.nextString());",
      "right" : "Date date = deserializeToDate(in.nextString());",
      "info" : "VariableDeclarationStatement[3639-3686]:VariableDeclarationStatement[3604-3651]"
    }, {
      "left" : "if (dateType == Date.class)",
      "right" : "if (dateType == Date.class)",
      "info" : "IfStatement[3691-4060]:IfStatement[3656-4025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3719-3745]:Block[3684-3710]"
    }, {
      "left" : "return date;",
      "right" : "return date;",
      "info" : "ReturnStatement[3727-3739]:ReturnStatement[3692-3704]"
    }, {
      "left" : "if (dateType == Timestamp.class)",
      "right" : "if (dateType == Timestamp.class)",
      "info" : "IfStatement[3751-4060]:IfStatement[3716-4025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3784-3835]:Block[3749-3800]"
    }, {
      "left" : "return new Timestamp(date.getTime());",
      "right" : "return new Timestamp(date.getTime());",
      "info" : "ReturnStatement[3792-3829]:ReturnStatement[3757-3794]"
    }, {
      "left" : "if (dateType == java.sql.Date.class)",
      "right" : "if (dateType == java.sql.Date.class)",
      "info" : "IfStatement[3841-4060]:IfStatement[3806-4025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3878-3933]:Block[3843-3898]"
    }, {
      "left" : "return new java.sql.Date(date.getTime());",
      "right" : "return new java.sql.Date(date.getTime());",
      "info" : "ReturnStatement[3886-3927]:ReturnStatement[3851-3892]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3939-4060]:Block[3904-4025]"
    }, {
      "left" : "throw new AssertionError();",
      "right" : "throw new AssertionError();",
      "info" : "ThrowStatement[4027-4054]:ThrowStatement[3992-4019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4109-4494]:Block[4074-4459]"
    }, {
      "left" : "synchronized (localFormat) {\n      try {\n        return localFormat.parse(s);\n      } catch (ParseException ignored) {}\n      try {\n        return enUsFormat.parse(s);\n      } catch (ParseException ignored) {}\n      try {\n        return ISO8601Utils.parse(s, new ParsePosition(0));\n      } catch (ParseException e) {\n        throw new JsonSyntaxException(s, e);\n      }\n    }",
      "right" : "synchronized (localFormat) {\n      try {\n        return localFormat.parse(s);\n      } catch (ParseException ignored) {}\n      try {\n        return enUsFormat.parse(s);\n      } catch (ParseException ignored) {}\n      try {\n        return ISO8601Utils.parse(s, new ParsePosition(0));\n      } catch (ParseException e) {\n        throw new JsonSyntaxException(s, e);\n      }\n    }",
      "info" : "SynchronizedStatement[4115-4490]:SynchronizedStatement[4080-4455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4142-4490]:Block[4107-4455]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4150-4234]:TryStatement[4115-4199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4154-4200]:Block[4119-4165]"
    }, {
      "left" : "return localFormat.parse(s);",
      "right" : "return localFormat.parse(s);",
      "info" : "ReturnStatement[4164-4192]:ReturnStatement[4129-4157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4232-4234]:Block[4197-4199]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4241-4324]:TryStatement[4206-4289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4245-4290]:Block[4210-4255]"
    }, {
      "left" : "return enUsFormat.parse(s);",
      "right" : "return enUsFormat.parse(s);",
      "info" : "ReturnStatement[4255-4282]:ReturnStatement[4220-4247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4322-4324]:Block[4287-4289]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4331-4484]:TryStatement[4296-4449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4335-4404]:Block[4300-4369]"
    }, {
      "left" : "return ISO8601Utils.parse(s, new ParsePosition(0));",
      "right" : "return ISO8601Utils.parse(s, new ParsePosition(0));",
      "info" : "ReturnStatement[4345-4396]:ReturnStatement[4310-4361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4430-4484]:Block[4395-4449]"
    }, {
      "left" : "throw new JsonSyntaxException(s, e);",
      "right" : "throw new JsonSyntaxException(s, e);",
      "info" : "ThrowStatement[4440-4476]:ThrowStatement[4405-4441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4535-4717]:Block[4500-4682]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder();",
      "right" : "StringBuilder sb = new StringBuilder();",
      "info" : "VariableDeclarationStatement[4541-4580]:VariableDeclarationStatement[4506-4545]"
    }, {
      "left" : "sb.append(SIMPLE_NAME);",
      "right" : "sb.append(SIMPLE_NAME);",
      "info" : "ExpressionStatement[4585-4608]:ExpressionStatement[4550-4573]"
    }, {
      "left" : "sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');",
      "right" : "sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');",
      "info" : "ExpressionStatement[4613-4687]:ExpressionStatement[4578-4652]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[4692-4713]:ReturnStatement[4657-4678]"
    } ]
  },
  "interFileMappings" : { }
}