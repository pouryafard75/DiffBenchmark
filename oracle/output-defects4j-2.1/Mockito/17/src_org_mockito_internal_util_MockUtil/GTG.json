{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "MockUtil",
      "right" : "MockUtil",
      "info" : "TypeDeclaration[701-3647]:TypeDeclaration[731-3894]"
    }, {
      "left" : "private final CreationValidator creationValidator;",
      "right" : "private final CreationValidator creationValidator;",
      "info" : "FieldDeclaration[768-818]:FieldDeclaration[798-848]"
    }, {
      "left" : "public MockUtil(CreationValidator creationValidator)",
      "right" : "public MockUtil(CreationValidator creationValidator)",
      "info" : "MethodDeclaration[826-940]:MethodDeclaration[856-970]"
    }, {
      "left" : "public MockUtil()",
      "right" : "public MockUtil()",
      "info" : "MethodDeclaration[952-1018]:MethodDeclaration[982-1048]"
    }, {
      "left" : "public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings)",
      "right" : "public <T> T createMock(Class<T> classToMock, MockSettingsImpl settings)",
      "info" : "MethodDeclaration[1026-2071]:MethodDeclaration[1056-2318]"
    }, {
      "left" : "public <T> void resetMock(T mock)",
      "right" : "public <T> void resetMock(T mock)",
      "info" : "MethodDeclaration[2079-2506]:MethodDeclaration[2326-2753]"
    }, {
      "left" : "public <T> MockHandlerInterface<T> getMockHandler(T mock)",
      "right" : "public <T> MockHandlerInterface<T> getMockHandler(T mock)",
      "info" : "MethodDeclaration[2514-2949]:MethodDeclaration[2761-3196]"
    }, {
      "left" : "private <T> boolean isMockitoMock(T mock)",
      "right" : "private <T> boolean isMockitoMock(T mock)",
      "info" : "MethodDeclaration[2957-3093]:MethodDeclaration[3204-3340]"
    }, {
      "left" : "public boolean isMock(Object mock)",
      "right" : "public boolean isMock(Object mock)",
      "info" : "MethodDeclaration[3101-3197]:MethodDeclaration[3348-3444]"
    }, {
      "left" : "private <T> MethodInterceptorFilter getInterceptor(T mock)",
      "right" : "private <T> MethodInterceptorFilter getInterceptor(T mock)",
      "info" : "MethodDeclaration[3205-3517]:MethodDeclaration[3452-3764]"
    }, {
      "left" : "public MockName getMockName(Object mock)",
      "right" : "public MockName getMockName(Object mock)",
      "info" : "MethodDeclaration[3525-3644]:MethodDeclaration[3772-3891]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[879-940]:Block[909-970]"
    }, {
      "left" : "this.creationValidator = creationValidator;",
      "right" : "this.creationValidator = creationValidator;",
      "info" : "ExpressionStatement[890-933]:ExpressionStatement[920-963]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[970-1018]:Block[1000-1048]"
    }, {
      "left" : "this(new CreationValidator());",
      "right" : "this(new CreationValidator());",
      "info" : "ConstructorInvocation[981-1011]:ConstructorInvocation[1011-1041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1099-2071]:Block[1129-2318]"
    }, {
      "left" : "creationValidator.validateType(classToMock);",
      "right" : "creationValidator.validateType(classToMock);",
      "info" : "ExpressionStatement[1110-1154]:ExpressionStatement[1140-1184]"
    }, {
      "left" : "creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());",
      "right" : "creationValidator.validateExtraInterfaces(classToMock, settings.getExtraInterfaces());",
      "info" : "ExpressionStatement[1164-1250]:ExpressionStatement[1194-1280]"
    }, {
      "left" : "creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());",
      "right" : "creationValidator.validateMockedType(classToMock, settings.getSpiedInstance());",
      "info" : "ExpressionStatement[1260-1339]:ExpressionStatement[1290-1369]"
    }, {
      "left" : "settings.initiateMockName(classToMock);",
      "right" : "settings.initiateMockName(classToMock);",
      "info" : "ExpressionStatement[1351-1390]:ExpressionStatement[1381-1420]"
    }, {
      "left" : "MockHandler<T> mockHandler = new MockHandler<T>(settings);",
      "right" : "MockHandler<T> mockHandler = new MockHandler<T>(settings);",
      "info" : "VariableDeclarationStatement[1402-1460]:VariableDeclarationStatement[1432-1490]"
    }, {
      "left" : "MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);",
      "right" : "MethodInterceptorFilter filter = new MethodInterceptorFilter(mockHandler, settings);",
      "info" : "VariableDeclarationStatement[1470-1554]:VariableDeclarationStatement[1500-1584]"
    }, {
      "left" : "Class<?>[] interfaces = settings.getExtraInterfaces();",
      "right" : "Class<?>[] interfaces = settings.getExtraInterfaces();",
      "info" : "VariableDeclarationStatement[1564-1618]:VariableDeclarationStatement[1594-1648]"
    }, {
      "left" : "Class<?>[] ancillaryTypes;",
      "right" : "Class<?>[] ancillaryTypes;",
      "info" : "VariableDeclarationStatement[1630-1656]:VariableDeclarationStatement[1660-1686]"
    }, {
      "left" : "ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;",
      "right" : "ancillaryTypes = interfaces == null ? new Class<?>[0] : interfaces;",
      "info" : "ExpressionStatement[1670-1737]:ExpressionStatement[1906-1973]"
    }, {
      "left" : "Object spiedInstance = settings.getSpiedInstance();",
      "right" : "Object spiedInstance = settings.getSpiedInstance();",
      "info" : "VariableDeclarationStatement[1749-1800]:VariableDeclarationStatement[1996-2047]"
    }, {
      "left" : "T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);",
      "right" : "T mock = ClassImposterizer.INSTANCE.imposterise(filter, classToMock, ancillaryTypes);",
      "info" : "VariableDeclarationStatement[1820-1905]:VariableDeclarationStatement[2067-2152]"
    }, {
      "left" : "if (spiedInstance != null)",
      "right" : "if (spiedInstance != null)",
      "info" : "IfStatement[1925-2032]:IfStatement[2172-2279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1952-2032]:Block[2199-2279]"
    }, {
      "left" : "new LenientCopyTool().copyToMock(spiedInstance, mock);",
      "right" : "new LenientCopyTool().copyToMock(spiedInstance, mock);",
      "info" : "ExpressionStatement[1967-2021]:ExpressionStatement[2214-2268]"
    }, {
      "left" : "return mock;",
      "right" : "return mock;",
      "info" : "ReturnStatement[2052-2064]:ReturnStatement[2299-2311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2113-2506]:Block[2360-2753]"
    }, {
      "left" : "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);",
      "right" : "MockHandlerInterface<T> oldMockHandler = getMockHandler(mock);",
      "info" : "VariableDeclarationStatement[2124-2186]:VariableDeclarationStatement[2371-2433]"
    }, {
      "left" : "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);",
      "right" : "MockHandler<T> newMockHandler = new MockHandler<T>(oldMockHandler);",
      "info" : "VariableDeclarationStatement[2196-2263]:VariableDeclarationStatement[2443-2510]"
    }, {
      "left" : "MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, \r\n                        (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));",
      "right" : "MethodInterceptorFilter newFilter = new MethodInterceptorFilter(newMockHandler, \r\n                        (MockSettingsImpl) withSettings().defaultAnswer(RETURNS_DEFAULTS));",
      "info" : "VariableDeclarationStatement[2273-2446]:VariableDeclarationStatement[2520-2693]"
    }, {
      "left" : "((Factory) mock).setCallback(0, newFilter);",
      "right" : "((Factory) mock).setCallback(0, newFilter);",
      "info" : "ExpressionStatement[2456-2499]:ExpressionStatement[2703-2746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2572-2949]:Block[2819-3196]"
    }, {
      "left" : "if (mock == null)",
      "right" : "if (mock == null)",
      "info" : "IfStatement[2583-2698]:IfStatement[2830-2945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2601-2698]:Block[2848-2945]"
    }, {
      "left" : "throw new NotAMockException(\"Argument should be a mock, but is null!\");",
      "right" : "throw new NotAMockException(\"Argument should be a mock, but is null!\");",
      "info" : "ThrowStatement[2616-2687]:ThrowStatement[2863-2934]"
    }, {
      "left" : "if (isMockitoMock(mock))",
      "right" : "if (isMockitoMock(mock))",
      "info" : "IfStatement[2710-2942]:IfStatement[2957-3189]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2735-2825]:Block[2982-3072]"
    }, {
      "left" : "return (MockHandlerInterface) getInterceptor(mock).getHandler();",
      "right" : "return (MockHandlerInterface) getInterceptor(mock).getHandler();",
      "info" : "ReturnStatement[2750-2814]:ReturnStatement[2997-3061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2831-2942]:Block[3078-3189]"
    }, {
      "left" : "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());",
      "right" : "throw new NotAMockException(\"Argument should be a mock, but is: \" + mock.getClass());",
      "info" : "ThrowStatement[2846-2931]:ThrowStatement[3093-3178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2999-3093]:Block[3246-3340]"
    }, {
      "left" : "return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null;",
      "right" : "return Enhancer.isEnhanced(mock.getClass()) && getInterceptor(mock) != null;",
      "info" : "ReturnStatement[3010-3086]:ReturnStatement[3257-3333]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3136-3197]:Block[3383-3444]"
    }, {
      "left" : "return mock != null && isMockitoMock(mock);",
      "right" : "return mock != null && isMockitoMock(mock);",
      "info" : "ReturnStatement[3147-3190]:ReturnStatement[3394-3437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3264-3517]:Block[3511-3764]"
    }, {
      "left" : "Factory factory = (Factory) mock;",
      "right" : "Factory factory = (Factory) mock;",
      "info" : "VariableDeclarationStatement[3275-3308]:VariableDeclarationStatement[3522-3555]"
    }, {
      "left" : "Callback callback = factory.getCallback(0);",
      "right" : "Callback callback = factory.getCallback(0);",
      "info" : "VariableDeclarationStatement[3318-3361]:VariableDeclarationStatement[3565-3608]"
    }, {
      "left" : "if (callback instanceof MethodInterceptorFilter)",
      "right" : "if (callback instanceof MethodInterceptorFilter)",
      "info" : "IfStatement[3371-3488]:IfStatement[3618-3735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3420-3488]:Block[3667-3735]"
    }, {
      "left" : "return (MethodInterceptorFilter) callback;",
      "right" : "return (MethodInterceptorFilter) callback;",
      "info" : "ReturnStatement[3435-3477]:ReturnStatement[3682-3724]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[3498-3510]:ReturnStatement[3745-3757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3566-3644]:Block[3813-3891]"
    }, {
      "left" : "return getMockHandler(mock).getMockSettings().getMockName();",
      "right" : "return getMockHandler(mock).getMockSettings().getMockName();",
      "info" : "ReturnStatement[3577-3637]:ReturnStatement[3824-3884]"
    } ]
  },
  "interFileMappings" : { }
}