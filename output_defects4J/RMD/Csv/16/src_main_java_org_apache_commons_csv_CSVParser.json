{
  "matchedElements" : [
 {
    "left" : "class : CSVParser",
    "right" : "class : CSVParser",
    "info" : "TypeDeclaration[1448-22341]:TypeDeclaration[1448-22511]"
  }, {
    "left" : "public parse(file , charset , format ) : ",
    "right" : "public parse(file , charset , format ) : ",
    "info" : "MethodDeclaration[4530-5397]:MethodDeclaration[4530-5397]"
  }, {
    "left" : "public parse(inputStream , charset , format ) : ",
    "right" : "public parse(inputStream , charset , format ) : ",
    "info" : "MethodDeclaration[5403-6648]:MethodDeclaration[5403-6648]"
  }, {
    "left" : "public parse(path , charset , format ) : ",
    "right" : "public parse(path , charset , format ) : ",
    "info" : "MethodDeclaration[6654-7478]:MethodDeclaration[6654-7478]"
  }, {
    "left" : "public parse(reader , format ) : ",
    "right" : "public parse(reader , format ) : ",
    "info" : "MethodDeclaration[7484-8456]:MethodDeclaration[7484-8456]"
  }, {
    "left" : "public parse(string , format ) : ",
    "right" : "public parse(string , format ) : ",
    "info" : "MethodDeclaration[8462-9206]:MethodDeclaration[8462-9206]"
  }, {
    "left" : "public parse(url , charset , format ) : ",
    "right" : "public parse(url , charset , format ) : ",
    "info" : "MethodDeclaration[9212-10297]:MethodDeclaration[9212-10297]"
  }, {
    "left" : "format",
    "right" : "format",
    "info" : "FieldDeclaration[10362-10393]:FieldDeclaration[10362-10393]"
  }, {
    "left" : "headerMap",
    "right" : "headerMap",
    "info" : "FieldDeclaration[10399-10499]:FieldDeclaration[10399-10499]"
  }, {
    "left" : "lexer",
    "right" : "lexer",
    "info" : "FieldDeclaration[10505-10531]:FieldDeclaration[10505-10531]"
  }, {
    "left" : "recordList",
    "right" : "recordList",
    "info" : "FieldDeclaration[10542-10678]:FieldDeclaration[10597-10733]"
  }, {
    "left" : "recordNumber",
    "right" : "recordNumber",
    "info" : "FieldDeclaration[10684-10767]:FieldDeclaration[10739-10822]"
  }, {
    "left" : "characterOffset",
    "right" : "characterOffset",
    "info" : "FieldDeclaration[10773-10978]:FieldDeclaration[10828-11033]"
  }, {
    "left" : "reusableToken",
    "right" : "reusableToken",
    "info" : "FieldDeclaration[10984-11032]:FieldDeclaration[11039-11087]"
  }, {
    "left" : "public CSVParser(reader , format ) : ",
    "right" : "public CSVParser(reader , format ) : ",
    "info" : "MethodDeclaration[11038-11894]:MethodDeclaration[11093-11949]"
  }, {
    "left" : "public CSVParser(reader , format , characterOffset long, recordNumber long) : ",
    "right" : "public CSVParser(reader , format , characterOffset long, recordNumber long) : ",
    "info" : "MethodDeclaration[11900-13390]:MethodDeclaration[11955-13503]"
  }, {
    "left" : "private addRecordValue(lastRecord boolean) : void",
    "right" : "private addRecordValue(lastRecord boolean) : void",
    "info" : "MethodDeclaration[13396-13866]:MethodDeclaration[13509-13979]"
  }, {
    "left" : "public close() : void",
    "right" : "public close() : void",
    "info" : "MethodDeclaration[13872-14125]:MethodDeclaration[13985-14238]"
  }, {
    "left" : "public getCurrentLineNumber() : long",
    "right" : "public getCurrentLineNumber() : long",
    "info" : "MethodDeclaration[14131-14516]:MethodDeclaration[14244-14629]"
  }, {
    "left" : "public getFirstEndOfLine() : ",
    "right" : "public getFirstEndOfLine() : ",
    "info" : "MethodDeclaration[14522-14738]:MethodDeclaration[14635-14851]"
  }, {
    "left" : "public getHeaderMap() : ",
    "right" : "public getHeaderMap() : ",
    "info" : "MethodDeclaration[14744-15133]:MethodDeclaration[14857-15246]"
  }, {
    "left" : "public getRecordNumber() : long",
    "right" : "public getRecordNumber() : long",
    "info" : "MethodDeclaration[15139-15505]:MethodDeclaration[15252-15618]"
  }, {
    "left" : "public getRecords() : ",
    "right" : "public getRecords() : ",
    "info" : "MethodDeclaration[15511-16185]:MethodDeclaration[15624-16298]"
  }, {
    "left" : "private initializeHeader() : ",
    "right" : "private initializeHeader() : ",
    "info" : "MethodDeclaration[16191-18201]:MethodDeclaration[16304-18314]"
  }, {
    "left" : "public isClosed() : boolean",
    "right" : "public isClosed() : boolean",
    "info" : "MethodDeclaration[18207-18390]:MethodDeclaration[18320-18503]"
  }, {
    "left" : "public iterator() : ",
    "right" : "public iterator() : ",
    "info" : "MethodDeclaration[18396-20234]:MethodDeclaration[18509-18947]"
  }, {
    "left" : "package nextRecord() : ",
    "right" : "package nextRecord() : ",
    "info" : "MethodDeclaration[20240-22338]:MethodDeclaration[20410-22508]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4452-4458]:Modifier[4452-4458]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[4459-4464]:Modifier[4459-4464]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4465-4470]:TYPE_DECLARATION_KIND[4465-4470]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")",
    "right" : "@SuppressWarnings(\"resource\")",
    "info" : "SingleMemberAnnotation[5058-5087]:SingleMemberAnnotation[5058-5087]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5092-5098]:Modifier[5092-5098]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5099-5105]:Modifier[5099-5105]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[5106-5115]:SimpleType[5106-5115]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[5116-5121]:SimpleName[5116-5121]"
  }, {
    "left" : "final File file",
    "right" : "final File file",
    "info" : "SingleVariableDeclaration[5122-5137]:SingleVariableDeclaration[5122-5137]"
  }, {
    "left" : "final Charset charset",
    "right" : "final Charset charset",
    "info" : "SingleVariableDeclaration[5139-5160]:SingleVariableDeclaration[5139-5160]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[5162-5184]:SingleVariableDeclaration[5162-5184]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[5193-5204]:SimpleType[5193-5204]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5205-5397]:Block[5205-5397]"
  }, {
    "left" : "Assertions.notNull(file, \"file\");",
    "right" : "Assertions.notNull(file, \"file\");",
    "info" : "ExpressionStatement[5215-5248]:ExpressionStatement[5215-5248]"
  }, {
    "left" : "Assertions.notNull(format, \"format\");",
    "right" : "Assertions.notNull(format, \"format\");",
    "info" : "ExpressionStatement[5257-5294]:ExpressionStatement[5257-5294]"
  }, {
    "left" : "return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);",
    "right" : "return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);",
    "info" : "ReturnStatement[5303-5391]:ReturnStatement[5303-5391]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")",
    "right" : "@SuppressWarnings(\"resource\")",
    "info" : "SingleMemberAnnotation[6291-6320]:SingleMemberAnnotation[6291-6320]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6325-6331]:Modifier[6325-6331]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[6332-6338]:Modifier[6332-6338]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[6339-6348]:SimpleType[6339-6348]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[6349-6354]:SimpleName[6349-6354]"
  }, {
    "left" : "final InputStream inputStream",
    "right" : "final InputStream inputStream",
    "info" : "SingleVariableDeclaration[6355-6384]:SingleVariableDeclaration[6355-6384]"
  }, {
    "left" : "final Charset charset",
    "right" : "final Charset charset",
    "info" : "SingleVariableDeclaration[6386-6407]:SingleVariableDeclaration[6386-6407]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[6409-6431]:SingleVariableDeclaration[6409-6431]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[6452-6463]:SimpleType[6452-6463]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6464-6648]:Block[6464-6648]"
  }, {
    "left" : "Assertions.notNull(inputStream, \"inputStream\");",
    "right" : "Assertions.notNull(inputStream, \"inputStream\");",
    "info" : "ExpressionStatement[6474-6521]:ExpressionStatement[6474-6521]"
  }, {
    "left" : "Assertions.notNull(format, \"format\");",
    "right" : "Assertions.notNull(format, \"format\");",
    "info" : "ExpressionStatement[6530-6567]:ExpressionStatement[6530-6567]"
  }, {
    "left" : "return parse(new InputStreamReader(inputStream, charset), format);",
    "right" : "return parse(new InputStreamReader(inputStream, charset), format);",
    "info" : "ReturnStatement[6576-6642]:ReturnStatement[6576-6642]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7200-7206]:Modifier[7200-7206]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7207-7213]:Modifier[7207-7213]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[7214-7223]:SimpleType[7214-7223]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[7224-7229]:SimpleName[7224-7229]"
  }, {
    "left" : "final Path path",
    "right" : "final Path path",
    "info" : "SingleVariableDeclaration[7230-7245]:SingleVariableDeclaration[7230-7245]"
  }, {
    "left" : "final Charset charset",
    "right" : "final Charset charset",
    "info" : "SingleVariableDeclaration[7247-7268]:SingleVariableDeclaration[7247-7268]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[7270-7292]:SingleVariableDeclaration[7270-7292]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[7301-7312]:SimpleType[7301-7312]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7313-7478]:Block[7313-7478]"
  }, {
    "left" : "Assertions.notNull(path, \"path\");",
    "right" : "Assertions.notNull(path, \"path\");",
    "info" : "ExpressionStatement[7323-7356]:ExpressionStatement[7323-7356]"
  }, {
    "left" : "Assertions.notNull(format, \"format\");",
    "right" : "Assertions.notNull(format, \"format\");",
    "info" : "ExpressionStatement[7365-7402]:ExpressionStatement[7365-7402]"
  }, {
    "left" : "return parse(Files.newBufferedReader(path, charset), format);",
    "right" : "return parse(Files.newBufferedReader(path, charset), format);",
    "info" : "ReturnStatement[7411-7472]:ReturnStatement[7411-7472]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8309-8315]:Modifier[8309-8315]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8316-8322]:Modifier[8316-8322]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[8323-8332]:SimpleType[8323-8332]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[8333-8338]:SimpleName[8333-8338]"
  }, {
    "left" : "final Reader reader",
    "right" : "final Reader reader",
    "info" : "SingleVariableDeclaration[8339-8358]:SingleVariableDeclaration[8339-8358]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[8360-8382]:SingleVariableDeclaration[8360-8382]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[8391-8402]:SimpleType[8391-8402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8403-8456]:Block[8403-8456]"
  }, {
    "left" : "return new CSVParser(reader, format);",
    "right" : "return new CSVParser(reader, format);",
    "info" : "ReturnStatement[8413-8450]:ReturnStatement[8413-8450]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8948-8954]:Modifier[8948-8954]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8955-8961]:Modifier[8955-8961]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[8962-8971]:SimpleType[8962-8971]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[8972-8977]:SimpleName[8972-8977]"
  }, {
    "left" : "final String string",
    "right" : "final String string",
    "info" : "SingleVariableDeclaration[8978-8997]:SingleVariableDeclaration[8978-8997]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[8999-9021]:SingleVariableDeclaration[8999-9021]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[9030-9041]:SimpleType[9030-9041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9042-9206]:Block[9042-9206]"
  }, {
    "left" : "Assertions.notNull(string, \"string\");",
    "right" : "Assertions.notNull(string, \"string\");",
    "info" : "ExpressionStatement[9052-9089]:ExpressionStatement[9052-9089]"
  }, {
    "left" : "Assertions.notNull(format, \"format\");",
    "right" : "Assertions.notNull(format, \"format\");",
    "info" : "ExpressionStatement[9098-9135]:ExpressionStatement[9098-9135]"
  }, {
    "left" : "return new CSVParser(new StringReader(string), format);",
    "right" : "return new CSVParser(new StringReader(string), format);",
    "info" : "ReturnStatement[9145-9200]:ReturnStatement[9145-9200]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9956-9962]:Modifier[9956-9962]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[9963-9969]:Modifier[9963-9969]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleType[9970-9979]:SimpleType[9970-9979]"
  }, {
    "left" : "parse",
    "right" : "parse",
    "info" : "SimpleName[9980-9985]:SimpleName[9980-9985]"
  }, {
    "left" : "final URL url",
    "right" : "final URL url",
    "info" : "SingleVariableDeclaration[9986-9999]:SingleVariableDeclaration[9986-9999]"
  }, {
    "left" : "final Charset charset",
    "right" : "final Charset charset",
    "info" : "SingleVariableDeclaration[10001-10022]:SingleVariableDeclaration[10001-10022]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[10024-10046]:SingleVariableDeclaration[10024-10046]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[10055-10066]:SimpleType[10055-10066]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10067-10297]:Block[10067-10297]"
  }, {
    "left" : "Assertions.notNull(url, \"url\");",
    "right" : "Assertions.notNull(url, \"url\");",
    "info" : "ExpressionStatement[10077-10108]:ExpressionStatement[10077-10108]"
  }, {
    "left" : "Assertions.notNull(charset, \"charset\");",
    "right" : "Assertions.notNull(charset, \"charset\");",
    "info" : "ExpressionStatement[10117-10156]:ExpressionStatement[10117-10156]"
  }, {
    "left" : "Assertions.notNull(format, \"format\");",
    "right" : "Assertions.notNull(format, \"format\");",
    "info" : "ExpressionStatement[10165-10202]:ExpressionStatement[10165-10202]"
  }, {
    "left" : "return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
    "right" : "return new CSVParser(new InputStreamReader(url.openStream(), charset), format);",
    "info" : "ReturnStatement[10212-10291]:ReturnStatement[10212-10291]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11770-11776]:Modifier[11825-11831]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleName[11777-11786]:SimpleName[11832-11841]"
  }, {
    "left" : "final Reader reader",
    "right" : "final Reader reader",
    "info" : "SingleVariableDeclaration[11787-11806]:SingleVariableDeclaration[11842-11861]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[11808-11830]:SingleVariableDeclaration[11863-11885]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[11839-11850]:SimpleType[11894-11905]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11851-11894]:Block[11906-11949]"
  }, {
    "left" : "this(reader, format, 0, 1);",
    "right" : "this(reader, format, 0, 1);",
    "info" : "ConstructorInvocation[11861-11888]:ConstructorInvocation[11916-11943]"
  }, {
    "left" : "@SuppressWarnings(\"resource\")",
    "right" : "@SuppressWarnings(\"resource\")",
    "info" : "SingleMemberAnnotation[12860-12889]:SingleMemberAnnotation[12915-12944]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12894-12900]:Modifier[12949-12955]"
  }, {
    "left" : "CSVParser",
    "right" : "CSVParser",
    "info" : "SimpleName[12901-12910]:SimpleName[12956-12965]"
  }, {
    "left" : "final Reader reader",
    "right" : "final Reader reader",
    "info" : "SingleVariableDeclaration[12911-12930]:SingleVariableDeclaration[12966-12985]"
  }, {
    "left" : "final CSVFormat format",
    "right" : "final CSVFormat format",
    "info" : "SingleVariableDeclaration[12932-12954]:SingleVariableDeclaration[12987-13009]"
  }, {
    "left" : "final long characterOffset",
    "right" : "final long characterOffset",
    "info" : "SingleVariableDeclaration[12956-12982]:SingleVariableDeclaration[13011-13037]"
  }, {
    "left" : "final long recordNumber",
    "right" : "final long recordNumber",
    "info" : "SingleVariableDeclaration[12984-13007]:SingleVariableDeclaration[13039-13062]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[13028-13039]:SimpleType[13083-13094]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13040-13390]:Block[13095-13503]"
  }, {
    "left" : "Assertions.notNull(reader, \"reader\");",
    "right" : "Assertions.notNull(reader, \"reader\");",
    "info" : "ExpressionStatement[13050-13087]:ExpressionStatement[13105-13142]"
  }, {
    "left" : "Assertions.notNull(format, \"format\");",
    "right" : "Assertions.notNull(format, \"format\");",
    "info" : "ExpressionStatement[13096-13133]:ExpressionStatement[13151-13188]"
  }, {
    "left" : "this.format = format;",
    "right" : "this.format = format;",
    "info" : "ExpressionStatement[13143-13164]:ExpressionStatement[13198-13219]"
  }, {
    "left" : "this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
    "right" : "this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));",
    "info" : "ExpressionStatement[13173-13240]:ExpressionStatement[13228-13295]"
  }, {
    "left" : "this.headerMap = this.initializeHeader();",
    "right" : "this.headerMap = this.initializeHeader();",
    "info" : "ExpressionStatement[13249-13290]:ExpressionStatement[13362-13403]"
  }, {
    "left" : "this.characterOffset = characterOffset;",
    "right" : "this.characterOffset = characterOffset;",
    "info" : "ExpressionStatement[13299-13338]:ExpressionStatement[13412-13451]"
  }, {
    "left" : "this.recordNumber = recordNumber - 1;",
    "right" : "this.recordNumber = recordNumber - 1;",
    "info" : "ExpressionStatement[13347-13384]:ExpressionStatement[13460-13497]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[13396-13403]:Modifier[13509-13516]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13404-13408]:PrimitiveType[13517-13521]"
  }, {
    "left" : "addRecordValue",
    "right" : "addRecordValue",
    "info" : "SimpleName[13409-13423]:SimpleName[13522-13536]"
  }, {
    "left" : "final boolean lastRecord",
    "right" : "final boolean lastRecord",
    "info" : "SingleVariableDeclaration[13424-13448]:SingleVariableDeclaration[13537-13561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13450-13866]:Block[13563-13979]"
  }, {
    "left" : "final String input = this.reusableToken.content.toString();",
    "right" : "final String input = this.reusableToken.content.toString();",
    "info" : "VariableDeclarationStatement[13460-13519]:VariableDeclarationStatement[13573-13632]"
  }, {
    "left" : "final String inputClean = this.format.getTrim() ? input.trim() : input;",
    "right" : "final String inputClean = this.format.getTrim() ? input.trim() : input;",
    "info" : "VariableDeclarationStatement[13528-13599]:VariableDeclarationStatement[13641-13712]"
  }, {
    "left" : "if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter())",
    "right" : "if (lastRecord && inputClean.isEmpty() && this.format.getTrailingDelimiter())",
    "info" : "IfStatement[13608-13717]:IfStatement[13721-13830]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13686-13717]:Block[13799-13830]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[13700-13707]:ReturnStatement[13813-13820]"
  }, {
    "left" : "final String nullString = this.format.getNullString();",
    "right" : "final String nullString = this.format.getNullString();",
    "info" : "VariableDeclarationStatement[13726-13780]:VariableDeclarationStatement[13839-13893]"
  }, {
    "left" : "this.recordList.add(inputClean.equals(nullString) ? null : inputClean);",
    "right" : "this.recordList.add(inputClean.equals(nullString) ? null : inputClean);",
    "info" : "ExpressionStatement[13789-13860]:ExpressionStatement[13902-13973]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[13989-13998]:MarkerAnnotation[14102-14111]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14003-14009]:Modifier[14116-14122]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14010-14014]:PrimitiveType[14123-14127]"
  }, {
    "left" : "close",
    "right" : "close",
    "info" : "SimpleName[14015-14020]:SimpleName[14128-14133]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[14030-14041]:SimpleType[14143-14154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14042-14125]:Block[14155-14238]"
  }, {
    "left" : "if (this.lexer != null)",
    "right" : "if (this.lexer != null)",
    "info" : "IfStatement[14052-14119]:IfStatement[14165-14232]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14076-14119]:Block[14189-14232]"
  }, {
    "left" : "this.lexer.close();",
    "right" : "this.lexer.close();",
    "info" : "ExpressionStatement[14090-14109]:ExpressionStatement[14203-14222]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14424-14430]:Modifier[14537-14543]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[14431-14435]:PrimitiveType[14544-14548]"
  }, {
    "left" : "getCurrentLineNumber",
    "right" : "getCurrentLineNumber",
    "info" : "SimpleName[14436-14456]:SimpleName[14549-14569]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14459-14516]:Block[14572-14629]"
  }, {
    "left" : "return this.lexer.getCurrentLineNumber();",
    "right" : "return this.lexer.getCurrentLineNumber();",
    "info" : "ReturnStatement[14469-14510]:ReturnStatement[14582-14623]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14661-14667]:Modifier[14774-14780]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[14668-14674]:SimpleType[14781-14787]"
  }, {
    "left" : "getFirstEndOfLine",
    "right" : "getFirstEndOfLine",
    "info" : "SimpleName[14675-14692]:SimpleName[14788-14805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14695-14738]:Block[14808-14851]"
  }, {
    "left" : "return lexer.getFirstEol();",
    "right" : "return lexer.getFirstEol();",
    "info" : "ReturnStatement[14705-14732]:ReturnStatement[14818-14845]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14999-15005]:Modifier[15112-15118]"
  }, {
    "left" : "Map<String, Integer>",
    "right" : "Map<String, Integer>",
    "info" : "ParameterizedType[15006-15026]:ParameterizedType[15119-15139]"
  }, {
    "left" : "getHeaderMap",
    "right" : "getHeaderMap",
    "info" : "SimpleName[15027-15039]:SimpleName[15140-15152]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15042-15133]:Block[15155-15246]"
  }, {
    "left" : "return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap);",
    "right" : "return this.headerMap == null ? null : new LinkedHashMap<>(this.headerMap);",
    "info" : "ReturnStatement[15052-15127]:ReturnStatement[15165-15240]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15434-15440]:Modifier[15547-15553]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[15441-15445]:PrimitiveType[15554-15558]"
  }, {
    "left" : "getRecordNumber",
    "right" : "getRecordNumber",
    "info" : "SimpleName[15446-15461]:SimpleName[15559-15574]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15464-15505]:Block[15577-15618]"
  }, {
    "left" : "return this.recordNumber;",
    "right" : "return this.recordNumber;",
    "info" : "ReturnStatement[15474-15499]:ReturnStatement[15587-15612]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15925-15931]:Modifier[16038-16044]"
  }, {
    "left" : "List<CSVRecord>",
    "right" : "List<CSVRecord>",
    "info" : "ParameterizedType[15932-15947]:ParameterizedType[16045-16060]"
  }, {
    "left" : "getRecords",
    "right" : "getRecords",
    "info" : "SimpleName[15948-15958]:SimpleName[16061-16071]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[15968-15979]:SimpleType[16081-16092]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15980-16185]:Block[16093-16298]"
  }, {
    "left" : "CSVRecord rec;",
    "right" : "CSVRecord rec;",
    "info" : "VariableDeclarationStatement[15990-16004]:VariableDeclarationStatement[16103-16117]"
  }, {
    "left" : "final List<CSVRecord> records = new ArrayList<>();",
    "right" : "final List<CSVRecord> records = new ArrayList<>();",
    "info" : "VariableDeclarationStatement[16013-16063]:VariableDeclarationStatement[16126-16176]"
  }, {
    "left" : "while ((rec = this.nextRecord()) != null)",
    "right" : "while ((rec = this.nextRecord()) != null)",
    "info" : "WhileStatement[16072-16155]:WhileStatement[16185-16268]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16114-16155]:Block[16227-16268]"
  }, {
    "left" : "records.add(rec);",
    "right" : "records.add(rec);",
    "info" : "ExpressionStatement[16128-16145]:ExpressionStatement[16241-16258]"
  }, {
    "left" : "return records;",
    "right" : "return records;",
    "info" : "ReturnStatement[16164-16179]:ReturnStatement[16277-16292]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[16437-16444]:Modifier[16550-16557]"
  }, {
    "left" : "Map<String, Integer>",
    "right" : "Map<String, Integer>",
    "info" : "ParameterizedType[16445-16465]:ParameterizedType[16558-16578]"
  }, {
    "left" : "initializeHeader",
    "right" : "initializeHeader",
    "info" : "SimpleName[16466-16482]:SimpleName[16579-16595]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[16492-16503]:SimpleType[16605-16616]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16504-18201]:Block[16617-18314]"
  }, {
    "left" : "Map<String, Integer> hdrMap = null;",
    "right" : "Map<String, Integer> hdrMap = null;",
    "info" : "VariableDeclarationStatement[16514-16549]:VariableDeclarationStatement[16627-16662]"
  }, {
    "left" : "final String[] formatHeader = this.format.getHeader();",
    "right" : "final String[] formatHeader = this.format.getHeader();",
    "info" : "VariableDeclarationStatement[16558-16612]:VariableDeclarationStatement[16671-16725]"
  }, {
    "left" : "if (formatHeader != null)",
    "right" : "if (formatHeader != null)",
    "info" : "IfStatement[16621-18172]:IfStatement[16734-18285]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16647-18172]:Block[16760-18285]"
  }, {
    "left" : "hdrMap = this.format.getIgnoreHeaderCase() ?\n                    new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) :\n                    new LinkedHashMap<String, Integer>();",
    "right" : "hdrMap = this.format.getIgnoreHeaderCase() ?\n                    new TreeMap<String, Integer>(String.CASE_INSENSITIVE_ORDER) :\n                    new LinkedHashMap<String, Integer>();",
    "info" : "ExpressionStatement[16661-16845]:ExpressionStatement[16774-16958]"
  }, {
    "left" : "String[] headerRecord = null;",
    "right" : "String[] headerRecord = null;",
    "info" : "VariableDeclarationStatement[16859-16888]:VariableDeclarationStatement[16972-17001]"
  }, {
    "left" : "if (formatHeader.length == 0)",
    "right" : "if (formatHeader.length == 0)",
    "info" : "IfStatement[16901-17373]:IfStatement[17014-17486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16931-17193]:Block[17044-17306]"
  }, {
    "left" : "final CSVRecord nextRecord = this.nextRecord();",
    "right" : "final CSVRecord nextRecord = this.nextRecord();",
    "info" : "VariableDeclarationStatement[17016-17063]:VariableDeclarationStatement[17129-17176]"
  }, {
    "left" : "if (nextRecord != null)",
    "right" : "if (nextRecord != null)",
    "info" : "IfStatement[17080-17179]:IfStatement[17193-17292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17104-17179]:Block[17217-17292]"
  }, {
    "left" : "headerRecord = nextRecord.values();",
    "right" : "headerRecord = nextRecord.values();",
    "info" : "ExpressionStatement[17126-17161]:ExpressionStatement[17239-17274]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17199-17373]:Block[17312-17486]"
  }, {
    "left" : "if (this.format.getSkipHeaderRecord())",
    "right" : "if (this.format.getSkipHeaderRecord())",
    "info" : "IfStatement[17217-17314]:IfStatement[17330-17427]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17256-17314]:Block[17369-17427]"
  }, {
    "left" : "this.nextRecord();",
    "right" : "this.nextRecord();",
    "info" : "ExpressionStatement[17278-17296]:ExpressionStatement[17391-17409]"
  }, {
    "left" : "headerRecord = formatHeader;",
    "right" : "headerRecord = formatHeader;",
    "info" : "ExpressionStatement[17331-17359]:ExpressionStatement[17444-17472]"
  }, {
    "left" : "if (headerRecord != null)",
    "right" : "if (headerRecord != null)",
    "info" : "IfStatement[17435-18162]:IfStatement[17548-18275]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17461-18162]:Block[17574-18275]"
  }, {
    "left" : "for (int i = 0; i < headerRecord.length; i++)",
    "right" : "for (int i = 0; i < headerRecord.length; i++)",
    "info" : "ForStatement[17479-18148]:ForStatement[17592-18261]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17525-18148]:Block[17638-18261]"
  }, {
    "left" : "final String header = headerRecord[i];",
    "right" : "final String header = headerRecord[i];",
    "info" : "VariableDeclarationStatement[17547-17585]:VariableDeclarationStatement[17660-17698]"
  }, {
    "left" : "final boolean containsHeader = hdrMap.containsKey(header);",
    "right" : "final boolean containsHeader = hdrMap.containsKey(header);",
    "info" : "VariableDeclarationStatement[17606-17664]:VariableDeclarationStatement[17719-17777]"
  }, {
    "left" : "final boolean emptyHeader = header == null || header.trim().isEmpty();",
    "right" : "final boolean emptyHeader = header == null || header.trim().isEmpty();",
    "info" : "VariableDeclarationStatement[17685-17755]:VariableDeclarationStatement[17798-17868]"
  }, {
    "left" : "if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames()))",
    "right" : "if (containsHeader && (!emptyHeader || !this.format.getAllowMissingColumnNames()))",
    "info" : "IfStatement[17776-18070]:IfStatement[17889-18183]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17859-18070]:Block[17972-18183]"
  }, {
    "left" : "throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                \"\\\" in \" + Arrays.toString(headerRecord));",
    "right" : "throw new IllegalArgumentException(\"The header contains a duplicate name: \\\"\" + header +\n                                \"\\\" in \" + Arrays.toString(headerRecord));",
    "info" : "ThrowStatement[17885-18048]:ThrowStatement[17998-18161]"
  }, {
    "left" : "hdrMap.put(header, Integer.valueOf(i));",
    "right" : "hdrMap.put(header, Integer.valueOf(i));",
    "info" : "ExpressionStatement[18091-18130]:ExpressionStatement[18204-18243]"
  }, {
    "left" : "return hdrMap;",
    "right" : "return hdrMap;",
    "info" : "ReturnStatement[18181-18195]:ReturnStatement[18294-18308]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18319-18325]:Modifier[18432-18438]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[18326-18333]:PrimitiveType[18439-18446]"
  }, {
    "left" : "isClosed",
    "right" : "isClosed",
    "info" : "SimpleName[18334-18342]:SimpleName[18447-18455]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18345-18390]:Block[18458-18503]"
  }, {
    "left" : "return this.lexer.isClosed();",
    "right" : "return this.lexer.isClosed();",
    "info" : "ReturnStatement[18355-18384]:ReturnStatement[18468-18497]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[18741-18750]:MarkerAnnotation[18854-18863]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[18755-18761]:Modifier[18868-18874]"
  }, {
    "left" : "Iterator<CSVRecord>",
    "right" : "Iterator<CSVRecord>",
    "info" : "ParameterizedType[18762-18781]:ParameterizedType[18875-18894]"
  }, {
    "left" : "iterator",
    "right" : "iterator",
    "info" : "SimpleName[18782-18790]:SimpleName[18895-18903]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18793-20234]:Block[18906-18947]"
  }, {
    "left" : "CSVRecord",
    "right" : "CSVRecord",
    "info" : "SimpleType[20521-20530]:SimpleType[20691-20700]"
  }, {
    "left" : "nextRecord",
    "right" : "nextRecord",
    "info" : "SimpleName[20531-20541]:SimpleName[20701-20711]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[20551-20562]:SimpleType[20721-20732]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20563-22338]:Block[20733-22508]"
  }, {
    "left" : "CSVRecord result = null;",
    "right" : "CSVRecord result = null;",
    "info" : "VariableDeclarationStatement[20573-20597]:VariableDeclarationStatement[20743-20767]"
  }, {
    "left" : "this.recordList.clear();",
    "right" : "this.recordList.clear();",
    "info" : "ExpressionStatement[20606-20630]:ExpressionStatement[20776-20800]"
  }, {
    "left" : "StringBuilder sb = null;",
    "right" : "StringBuilder sb = null;",
    "info" : "VariableDeclarationStatement[20639-20663]:VariableDeclarationStatement[20809-20833]"
  }, {
    "left" : "final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;",
    "right" : "final long startCharPosition = lexer.getCharacterPosition() + this.characterOffset;",
    "info" : "VariableDeclarationStatement[20672-20755]:VariableDeclarationStatement[20842-20925]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[20764-21973]:DoStatement[20934-22143]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20767-21931]:Block[20937-22101]"
  }, {
    "left" : "this.reusableToken.reset();",
    "right" : "this.reusableToken.reset();",
    "info" : "ExpressionStatement[20781-20808]:ExpressionStatement[20951-20978]"
  }, {
    "left" : "this.lexer.nextToken(this.reusableToken);",
    "right" : "this.lexer.nextToken(this.reusableToken);",
    "info" : "ExpressionStatement[20821-20862]:ExpressionStatement[20991-21032]"
  }, {
    "left" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue(false);\n                break;\n            case EORECORD:\n                this.addRecordValue(true);\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue(true);\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n            }",
    "right" : "switch (this.reusableToken.type) {\n            case TOKEN:\n                this.addRecordValue(false);\n                break;\n            case EORECORD:\n                this.addRecordValue(true);\n                break;\n            case EOF:\n                if (this.reusableToken.isReady) {\n                    this.addRecordValue(true);\n                }\n                break;\n            case INVALID:\n                throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");\n            case COMMENT: // Ignored currently\n                if (sb == null) { // first comment for this record\n                    sb = new StringBuilder();\n                } else {\n                    sb.append(Constants.LF);\n                }\n                sb.append(this.reusableToken.content);\n                this.reusableToken.type = TOKEN; // Read another token\n                break;\n            default:\n                throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);\n            }",
    "info" : "SwitchStatement[20875-21921]:SwitchStatement[21045-22091]"
  }, {
    "left" : "case TOKEN:",
    "right" : "case TOKEN:",
    "info" : "SwitchCase[20922-20933]:SwitchCase[21092-21103]"
  }, {
    "left" : "this.addRecordValue(false);",
    "right" : "this.addRecordValue(false);",
    "info" : "ExpressionStatement[20950-20977]:ExpressionStatement[21120-21147]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[20994-21000]:BreakStatement[21164-21170]"
  }, {
    "left" : "case EORECORD:",
    "right" : "case EORECORD:",
    "info" : "SwitchCase[21013-21027]:SwitchCase[21183-21197]"
  }, {
    "left" : "this.addRecordValue(true);",
    "right" : "this.addRecordValue(true);",
    "info" : "ExpressionStatement[21044-21070]:ExpressionStatement[21214-21240]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21087-21093]:BreakStatement[21257-21263]"
  }, {
    "left" : "case EOF:",
    "right" : "case EOF:",
    "info" : "SwitchCase[21106-21115]:SwitchCase[21276-21285]"
  }, {
    "left" : "if (this.reusableToken.isReady)",
    "right" : "if (this.reusableToken.isReady)",
    "info" : "IfStatement[21132-21230]:IfStatement[21302-21400]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21164-21230]:Block[21334-21400]"
  }, {
    "left" : "this.addRecordValue(true);",
    "right" : "this.addRecordValue(true);",
    "info" : "ExpressionStatement[21186-21212]:ExpressionStatement[21356-21382]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21247-21253]:BreakStatement[21417-21423]"
  }, {
    "left" : "case INVALID:",
    "right" : "case INVALID:",
    "info" : "SwitchCase[21266-21279]:SwitchCase[21436-21449]"
  }, {
    "left" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
    "right" : "throw new IOException(\"(line \" + this.getCurrentLineNumber() + \") invalid parse sequence\");",
    "info" : "ThrowStatement[21296-21387]:ThrowStatement[21466-21557]"
  }, {
    "left" : "case COMMENT:",
    "right" : "case COMMENT:",
    "info" : "SwitchCase[21400-21413]:SwitchCase[21570-21583]"
  }, {
    "left" : "if (sb == null)",
    "right" : "if (sb == null)",
    "info" : "IfStatement[21451-21635]:IfStatement[21621-21805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21467-21565]:Block[21637-21735]"
  }, {
    "left" : "sb = new StringBuilder();",
    "right" : "sb = new StringBuilder();",
    "info" : "ExpressionStatement[21522-21547]:ExpressionStatement[21692-21717]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21571-21635]:Block[21741-21805]"
  }, {
    "left" : "sb.append(Constants.LF);",
    "right" : "sb.append(Constants.LF);",
    "info" : "ExpressionStatement[21593-21617]:ExpressionStatement[21763-21787]"
  }, {
    "left" : "sb.append(this.reusableToken.content);",
    "right" : "sb.append(this.reusableToken.content);",
    "info" : "ExpressionStatement[21652-21690]:ExpressionStatement[21822-21860]"
  }, {
    "left" : "this.reusableToken.type = TOKEN;",
    "right" : "this.reusableToken.type = TOKEN;",
    "info" : "ExpressionStatement[21707-21739]:ExpressionStatement[21877-21909]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[21778-21784]:BreakStatement[21948-21954]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[21797-21805]:SwitchCase[21967-21975]"
  }, {
    "left" : "throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
    "right" : "throw new IllegalStateException(\"Unexpected Token type: \" + this.reusableToken.type);",
    "info" : "ThrowStatement[21822-21907]:ThrowStatement[21992-22077]"
  }, {
    "left" : "if (!this.recordList.isEmpty())",
    "right" : "if (!this.recordList.isEmpty())",
    "info" : "IfStatement[21983-22309]:IfStatement[22153-22479]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22015-22309]:Block[22185-22479]"
  }, {
    "left" : "this.recordNumber++;",
    "right" : "this.recordNumber++;",
    "info" : "ExpressionStatement[22029-22049]:ExpressionStatement[22199-22219]"
  }, {
    "left" : "final String comment = sb == null ? null : sb.toString();",
    "right" : "final String comment = sb == null ? null : sb.toString();",
    "info" : "VariableDeclarationStatement[22062-22119]:VariableDeclarationStatement[22232-22289]"
  }, {
    "left" : "result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\n                    this.recordNumber, startCharPosition);",
    "right" : "result = new CSVRecord(this.recordList.toArray(new String[this.recordList.size()]), this.headerMap, comment,\n                    this.recordNumber, startCharPosition);",
    "info" : "ExpressionStatement[22132-22299]:ExpressionStatement[22302-22469]"
  }, {
    "left" : "return result;",
    "right" : "return result;",
    "info" : "ReturnStatement[22318-22332]:ReturnStatement[22488-22502]"
  } ]
}