{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final int RADIX = 10000;",
      "right" : "public static final int RADIX = 10000;",
      "info" : "FieldDeclaration[4351-4449]:FieldDeclaration[4351-4449]"
    }, {
      "left" : "public static final int MIN_EXP = -32767;",
      "right" : "public static final int MIN_EXP = -32767;",
      "info" : "FieldDeclaration[4455-4605]:FieldDeclaration[4455-4605]"
    }, {
      "left" : "public static final int MAX_EXP =  32768;",
      "right" : "public static final int MAX_EXP =  32768;",
      "info" : "FieldDeclaration[4611-4752]:FieldDeclaration[4611-4752]"
    }, {
      "left" : "public static final int ERR_SCALE = 32760;",
      "right" : "public static final int ERR_SCALE = 32760;",
      "info" : "FieldDeclaration[4758-4881]:FieldDeclaration[4758-4881]"
    }, {
      "left" : "public static final byte FINITE = 0;",
      "right" : "public static final byte FINITE = 0;",
      "info" : "FieldDeclaration[4887-4977]:FieldDeclaration[4887-4977]"
    }, {
      "left" : "public static final byte INFINITE = 1;",
      "right" : "public static final byte INFINITE = 1;",
      "info" : "FieldDeclaration[4983-5062]:FieldDeclaration[4983-5062]"
    }, {
      "left" : "public static final byte SNAN = 2;",
      "right" : "public static final byte SNAN = 2;",
      "info" : "FieldDeclaration[5068-5148]:FieldDeclaration[5068-5148]"
    }, {
      "left" : "public static final byte QNAN = 3;",
      "right" : "public static final byte QNAN = 3;",
      "info" : "FieldDeclaration[5154-5230]:FieldDeclaration[5154-5230]"
    }, {
      "left" : "private static final String NAN_STRING = \"NaN\";",
      "right" : "private static final String NAN_STRING = \"NaN\";",
      "info" : "FieldDeclaration[5236-5325]:FieldDeclaration[5236-5325]"
    }, {
      "left" : "private static final String POS_INFINITY_STRING = \"Infinity\";",
      "right" : "private static final String POS_INFINITY_STRING = \"Infinity\";",
      "info" : "FieldDeclaration[5331-5448]:FieldDeclaration[5331-5448]"
    }, {
      "left" : "private static final String NEG_INFINITY_STRING = \"-Infinity\";",
      "right" : "private static final String NEG_INFINITY_STRING = \"-Infinity\";",
      "info" : "FieldDeclaration[5454-5572]:FieldDeclaration[5454-5572]"
    }, {
      "left" : "private static final String ADD_TRAP = \"add\";",
      "right" : "private static final String ADD_TRAP = \"add\";",
      "info" : "FieldDeclaration[5578-5672]:FieldDeclaration[5578-5672]"
    }, {
      "left" : "private static final String MULTIPLY_TRAP = \"multiply\";",
      "right" : "private static final String MULTIPLY_TRAP = \"multiply\";",
      "info" : "FieldDeclaration[5678-5788]:FieldDeclaration[5678-5788]"
    }, {
      "left" : "private static final String DIVIDE_TRAP = \"divide\";",
      "right" : "private static final String DIVIDE_TRAP = \"divide\";",
      "info" : "FieldDeclaration[5794-5894]:FieldDeclaration[5794-5894]"
    }, {
      "left" : "private static final String SQRT_TRAP = \"sqrt\";",
      "right" : "private static final String SQRT_TRAP = \"sqrt\";",
      "info" : "FieldDeclaration[5900-5999]:FieldDeclaration[5900-5999]"
    }, {
      "left" : "private static final String ALIGN_TRAP = \"align\";",
      "right" : "private static final String ALIGN_TRAP = \"align\";",
      "info" : "FieldDeclaration[6005-6104]:FieldDeclaration[6005-6104]"
    }, {
      "left" : "private static final String TRUNC_TRAP = \"trunc\";",
      "right" : "private static final String TRUNC_TRAP = \"trunc\";",
      "info" : "FieldDeclaration[6110-6210]:FieldDeclaration[6110-6210]"
    }, {
      "left" : "private static final String NEXT_AFTER_TRAP = \"nextAfter\";",
      "right" : "private static final String NEXT_AFTER_TRAP = \"nextAfter\";",
      "info" : "FieldDeclaration[6216-6324]:FieldDeclaration[6216-6324]"
    }, {
      "left" : "private static final String LESS_THAN_TRAP = \"lessThan\";",
      "right" : "private static final String LESS_THAN_TRAP = \"lessThan\";",
      "info" : "FieldDeclaration[6330-6435]:FieldDeclaration[6330-6435]"
    }, {
      "left" : "private static final String GREATER_THAN_TRAP = \"greaterThan\";",
      "right" : "private static final String GREATER_THAN_TRAP = \"greaterThan\";",
      "info" : "FieldDeclaration[6441-6555]:FieldDeclaration[6441-6555]"
    }, {
      "left" : "private static final String NEW_INSTANCE_TRAP = \"newInstance\";",
      "right" : "private static final String NEW_INSTANCE_TRAP = \"newInstance\";",
      "info" : "FieldDeclaration[6561-6675]:FieldDeclaration[6561-6675]"
    }, {
      "left" : "protected int[] mant;",
      "right" : "protected int[] mant;",
      "info" : "FieldDeclaration[6681-6723]:FieldDeclaration[6681-6723]"
    }, {
      "left" : "protected byte sign;",
      "right" : "protected byte sign;",
      "info" : "FieldDeclaration[6729-6803]:FieldDeclaration[6729-6803]"
    }, {
      "left" : "protected int exp;",
      "right" : "protected int exp;",
      "info" : "FieldDeclaration[6809-6848]:FieldDeclaration[6809-6848]"
    }, {
      "left" : "protected byte nans;",
      "right" : "protected byte nans;",
      "info" : "FieldDeclaration[6854-6931]:FieldDeclaration[6854-6931]"
    }, {
      "left" : "private final DfpField field;",
      "right" : "private final DfpField field;",
      "info" : "FieldDeclaration[6937-7009]:FieldDeclaration[6937-7009]"
    }, {
      "left" : "protected Dfp(final DfpField field)",
      "right" : "protected Dfp(final DfpField field)",
      "info" : "MethodDeclaration[7015-7305]:MethodDeclaration[7015-7305]"
    }, {
      "left" : "protected Dfp(final DfpField field, byte x)",
      "right" : "protected Dfp(final DfpField field, byte x)",
      "info" : "MethodDeclaration[7311-7552]:MethodDeclaration[7311-7552]"
    }, {
      "left" : "protected Dfp(final DfpField field, int x)",
      "right" : "protected Dfp(final DfpField field, int x)",
      "info" : "MethodDeclaration[7558-7798]:MethodDeclaration[7558-7798]"
    }, {
      "left" : "protected Dfp(final DfpField field, long x)",
      "right" : "protected Dfp(final DfpField field, long x)",
      "info" : "MethodDeclaration[7804-9137]:MethodDeclaration[7804-9137]"
    }, {
      "left" : "public Dfp(final Dfp d)",
      "right" : "public Dfp(final Dfp d)",
      "info" : "MethodDeclaration[10995-11221]:MethodDeclaration[11101-11327]"
    }, {
      "left" : "protected Dfp(final DfpField field, final String s)",
      "right" : "protected Dfp(final DfpField field, final String s)",
      "info" : "MethodDeclaration[11227-16935]:MethodDeclaration[11333-17041]"
    }, {
      "left" : "protected Dfp(final DfpField field, final byte sign, final byte nans)",
      "right" : "protected Dfp(final DfpField field, final byte sign, final byte nans)",
      "info" : "MethodDeclaration[16941-17458]:MethodDeclaration[17047-17564]"
    }, {
      "left" : "public Dfp newInstance()",
      "right" : "public Dfp newInstance()",
      "info" : "MethodDeclaration[17464-17716]:MethodDeclaration[17570-17822]"
    }, {
      "left" : "public Dfp newInstance(final byte x)",
      "right" : "public Dfp newInstance(final byte x)",
      "info" : "MethodDeclaration[17722-17950]:MethodDeclaration[17828-18056]"
    }, {
      "left" : "public Dfp newInstance(final int x)",
      "right" : "public Dfp newInstance(final int x)",
      "info" : "MethodDeclaration[17956-18183]:MethodDeclaration[18062-18289]"
    }, {
      "left" : "public Dfp newInstance(final long x)",
      "right" : "public Dfp newInstance(final long x)",
      "info" : "MethodDeclaration[18189-18417]:MethodDeclaration[18295-18523]"
    }, {
      "left" : "public Dfp newInstance(final double x)",
      "right" : "public Dfp newInstance(final double x)",
      "info" : "MethodDeclaration[18423-18655]:MethodDeclaration[18529-18761]"
    }, {
      "left" : "public Dfp newInstance(final Dfp d)",
      "right" : "public Dfp newInstance(final Dfp d)",
      "info" : "MethodDeclaration[18661-19336]:MethodDeclaration[18767-19442]"
    }, {
      "left" : "public Dfp newInstance(final String s)",
      "right" : "public Dfp newInstance(final String s)",
      "info" : "MethodDeclaration[19342-19683]:MethodDeclaration[19448-19789]"
    }, {
      "left" : "public Dfp newInstance(final byte sig, final byte code)",
      "right" : "public Dfp newInstance(final byte sig, final byte code)",
      "info" : "MethodDeclaration[19689-20060]:MethodDeclaration[19795-20166]"
    }, {
      "left" : "public DfpField getField()",
      "right" : "public DfpField getField()",
      "info" : "MethodDeclaration[20066-20496]:MethodDeclaration[20172-20602]"
    }, {
      "left" : "public int getRadixDigits()",
      "right" : "public int getRadixDigits()",
      "info" : "MethodDeclaration[20502-20678]:MethodDeclaration[20608-20784]"
    }, {
      "left" : "public Dfp getZero()",
      "right" : "public Dfp getZero()",
      "info" : "MethodDeclaration[20684-20817]:MethodDeclaration[20790-20923]"
    }, {
      "left" : "public Dfp getOne()",
      "right" : "public Dfp getOne()",
      "info" : "MethodDeclaration[20823-20953]:MethodDeclaration[20929-21059]"
    }, {
      "left" : "public Dfp getTwo()",
      "right" : "public Dfp getTwo()",
      "info" : "MethodDeclaration[20959-21089]:MethodDeclaration[21065-21195]"
    }, {
      "left" : "protected void shiftLeft()",
      "right" : "protected void shiftLeft()",
      "info" : "MethodDeclaration[21095-21340]:MethodDeclaration[21201-21446]"
    }, {
      "left" : "protected void shiftRight()",
      "right" : "protected void shiftRight()",
      "info" : "MethodDeclaration[21447-21708]:MethodDeclaration[21553-21814]"
    }, {
      "left" : "protected int align(int e)",
      "right" : "protected int align(int e)",
      "info" : "MethodDeclaration[21714-23397]:MethodDeclaration[21820-23503]"
    }, {
      "left" : "public boolean lessThan(final Dfp x)",
      "right" : "public boolean lessThan(final Dfp x)",
      "info" : "MethodDeclaration[23403-24339]:MethodDeclaration[23509-24445]"
    }, {
      "left" : "public boolean greaterThan(final Dfp x)",
      "right" : "public boolean greaterThan(final Dfp x)",
      "info" : "MethodDeclaration[24345-25296]:MethodDeclaration[24451-25402]"
    }, {
      "left" : "public boolean isInfinite()",
      "right" : "public boolean isInfinite()",
      "info" : "MethodDeclaration[25302-25461]:MethodDeclaration[25408-25567]"
    }, {
      "left" : "public boolean isNaN()",
      "right" : "public boolean isNaN()",
      "info" : "MethodDeclaration[25467-25645]:MethodDeclaration[25573-25751]"
    }, {
      "left" : "public boolean equals(final Object other)",
      "right" : "public boolean equals(final Object other)",
      "info" : "MethodDeclaration[25651-26190]:MethodDeclaration[25757-26296]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[26196-26423]:MethodDeclaration[26302-26529]"
    }, {
      "left" : "public boolean unequal(final Dfp x)",
      "right" : "public boolean unequal(final Dfp x)",
      "info" : "MethodDeclaration[26429-26834]:MethodDeclaration[26535-26940]"
    }, {
      "left" : "private static int compare(final Dfp a, final Dfp b)",
      "right" : "private static int compare(final Dfp a, final Dfp b)",
      "info" : "MethodDeclaration[26840-28459]:MethodDeclaration[26946-28565]"
    }, {
      "left" : "public Dfp rint()",
      "right" : "public Dfp rint()",
      "info" : "MethodDeclaration[28465-28771]:MethodDeclaration[28571-28877]"
    }, {
      "left" : "public Dfp floor()",
      "right" : "public Dfp floor()",
      "info" : "MethodDeclaration[28777-28993]:MethodDeclaration[28883-29099]"
    }, {
      "left" : "public Dfp ceil()",
      "right" : "public Dfp ceil()",
      "info" : "MethodDeclaration[28999-29212]:MethodDeclaration[29105-29318]"
    }, {
      "left" : "public Dfp remainder(final Dfp d)",
      "right" : "public Dfp remainder(final Dfp d)",
      "info" : "MethodDeclaration[29218-29690]:MethodDeclaration[29324-29796]"
    }, {
      "left" : "protected Dfp trunc(final DfpField.RoundingMode rmode)",
      "right" : "protected Dfp trunc(final DfpField.RoundingMode rmode)",
      "info" : "MethodDeclaration[29696-32773]:MethodDeclaration[29802-32879]"
    }, {
      "left" : "public int intValue()",
      "right" : "public int intValue()",
      "info" : "MethodDeclaration[32779-33508]:MethodDeclaration[32885-33614]"
    }, {
      "left" : "public int log10K()",
      "right" : "public int log10K()",
      "info" : "MethodDeclaration[33514-33809]:MethodDeclaration[33620-33915]"
    }, {
      "left" : "public Dfp power10K(final int e)",
      "right" : "public Dfp power10K(final int e)",
      "info" : "MethodDeclaration[33815-34049]:MethodDeclaration[33921-34155]"
    }, {
      "left" : "public int log10()",
      "right" : "public int log10()",
      "info" : "MethodDeclaration[34055-34503]:MethodDeclaration[34161-34609]"
    }, {
      "left" : "public Dfp power10(final int e)",
      "right" : "public Dfp power10(final int e)",
      "info" : "MethodDeclaration[34509-35138]:MethodDeclaration[34615-35244]"
    }, {
      "left" : "protected int complement(int extra)",
      "right" : "protected int complement(int extra)",
      "info" : "MethodDeclaration[35144-35807]:MethodDeclaration[35250-35913]"
    }, {
      "left" : "public Dfp add(final Dfp x)",
      "right" : "public Dfp add(final Dfp x)",
      "info" : "MethodDeclaration[35813-40401]:MethodDeclaration[35919-40507]"
    }, {
      "left" : "public Dfp negate()",
      "right" : "public Dfp negate()",
      "info" : "MethodDeclaration[40407-40658]:MethodDeclaration[40513-40764]"
    }, {
      "left" : "public Dfp subtract(final Dfp x)",
      "right" : "public Dfp subtract(final Dfp x)",
      "info" : "MethodDeclaration[40664-40849]:MethodDeclaration[40770-40955]"
    }, {
      "left" : "protected int round(int n)",
      "right" : "protected int round(int n)",
      "info" : "MethodDeclaration[40855-43053]:MethodDeclaration[40961-43159]"
    }, {
      "left" : "public Dfp multiply(final Dfp x)",
      "right" : "public Dfp multiply(final Dfp x)",
      "info" : "MethodDeclaration[43059-46567]:MethodDeclaration[43165-46673]"
    }, {
      "left" : "public Dfp multiply(final int x)",
      "right" : "public Dfp multiply(final int x)",
      "info" : "MethodDeclaration[46573-48460]:MethodDeclaration[46679-48566]"
    }, {
      "left" : "public Dfp divide(Dfp divisor)",
      "right" : "public Dfp divide(Dfp divisor)",
      "info" : "MethodDeclaration[48466-56014]:MethodDeclaration[48572-56120]"
    }, {
      "left" : "public Dfp divide(int divisor)",
      "right" : "public Dfp divide(int divisor)",
      "info" : "MethodDeclaration[56020-58003]:MethodDeclaration[56126-58109]"
    }, {
      "left" : "public Dfp sqrt()",
      "right" : "public Dfp sqrt()",
      "info" : "MethodDeclaration[58009-60642]:MethodDeclaration[58115-60748]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[60648-61197]:MethodDeclaration[60754-61303]"
    }, {
      "left" : "protected String dfp2sci()",
      "right" : "protected String dfp2sci()",
      "info" : "MethodDeclaration[61203-63369]:MethodDeclaration[61309-63475]"
    }, {
      "left" : "protected String dfp2string()",
      "right" : "protected String dfp2string()",
      "info" : "MethodDeclaration[63375-65160]:MethodDeclaration[63481-65266]"
    }, {
      "left" : "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)",
      "right" : "public Dfp dotrap(int type, String what, Dfp oper, Dfp result)",
      "info" : "MethodDeclaration[65166-67427]:MethodDeclaration[65272-67533]"
    }, {
      "left" : "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)",
      "right" : "protected Dfp trap(int type, String what, Dfp oper, Dfp def, Dfp result)",
      "info" : "MethodDeclaration[67433-68111]:MethodDeclaration[67539-68217]"
    }, {
      "left" : "public int classify()",
      "right" : "public int classify()",
      "info" : "MethodDeclaration[68117-68273]:MethodDeclaration[68223-68379]"
    }, {
      "left" : "public static Dfp copysign(final Dfp x, final Dfp y)",
      "right" : "public static Dfp copysign(final Dfp x, final Dfp y)",
      "info" : "MethodDeclaration[68279-68715]:MethodDeclaration[68385-68821]"
    }, {
      "left" : "public Dfp nextAfter(final Dfp x)",
      "right" : "public Dfp nextAfter(final Dfp x)",
      "info" : "MethodDeclaration[68721-70897]:MethodDeclaration[68827-71003]"
    }, {
      "left" : "public double[] toSplitDouble()",
      "right" : "public double[] toSplitDouble()",
      "info" : "MethodDeclaration[73133-73582]:MethodDeclaration[73348-73797]"
    } ],
    "mappings" : [
 {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7128-7137]:Modifier[7128-7137]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[7138-7141]:SimpleName[7138-7141]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[7142-7162]:SingleVariableDeclaration[7142-7162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7164-7305]:Block[7164-7305]"
    }, {
      "left" : "mant = new int[field.getRadixDigits()];",
      "right" : "mant = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[7174-7213]:ExpressionStatement[7174-7213]"
    }, {
      "left" : "sign = 1;",
      "right" : "sign = 1;",
      "info" : "ExpressionStatement[7222-7231]:ExpressionStatement[7222-7231]"
    }, {
      "left" : "exp = 0;",
      "right" : "exp = 0;",
      "info" : "ExpressionStatement[7240-7248]:ExpressionStatement[7240-7248]"
    }, {
      "left" : "nans = FINITE;",
      "right" : "nans = FINITE;",
      "info" : "ExpressionStatement[7257-7271]:ExpressionStatement[7257-7271]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[7280-7299]:ExpressionStatement[7280-7299]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7470-7479]:Modifier[7470-7479]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[7480-7483]:SimpleName[7480-7483]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[7484-7504]:SingleVariableDeclaration[7484-7504]"
    }, {
      "left" : "byte x",
      "right" : "byte x",
      "info" : "SingleVariableDeclaration[7506-7512]:SingleVariableDeclaration[7506-7512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7514-7552]:Block[7514-7552]"
    }, {
      "left" : "this(field, (long) x);",
      "right" : "this(field, (long) x);",
      "info" : "ConstructorInvocation[7524-7546]:ConstructorInvocation[7524-7546]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7717-7726]:Modifier[7717-7726]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[7727-7730]:SimpleName[7727-7730]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[7731-7751]:SingleVariableDeclaration[7731-7751]"
    }, {
      "left" : "int x",
      "right" : "int x",
      "info" : "SingleVariableDeclaration[7753-7758]:SingleVariableDeclaration[7753-7758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7760-7798]:Block[7760-7798]"
    }, {
      "left" : "this(field, (long) x);",
      "right" : "this(field, (long) x);",
      "info" : "ConstructorInvocation[7770-7792]:ConstructorInvocation[7770-7792]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7963-7972]:Modifier[7963-7972]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[7973-7976]:SimpleName[7973-7976]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[7977-7997]:SingleVariableDeclaration[7977-7997]"
    }, {
      "left" : "long x",
      "right" : "long x",
      "info" : "SingleVariableDeclaration[7999-8005]:SingleVariableDeclaration[7999-8005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8007-9137]:Block[8007-9137]"
    }, {
      "left" : "mant = new int[field.getRadixDigits()];",
      "right" : "mant = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[8048-8087]:ExpressionStatement[8048-8087]"
    }, {
      "left" : "nans = FINITE;",
      "right" : "nans = FINITE;",
      "info" : "ExpressionStatement[8096-8110]:ExpressionStatement[8096-8110]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[8119-8138]:ExpressionStatement[8119-8138]"
    }, {
      "left" : "boolean isLongMin = false;",
      "right" : "boolean isLongMin = false;",
      "info" : "VariableDeclarationStatement[8148-8174]:VariableDeclarationStatement[8148-8174]"
    }, {
      "left" : "if (x == Long.MIN_VALUE)",
      "right" : "if (x == Long.MIN_VALUE)",
      "info" : "IfStatement[8183-8401]:IfStatement[8183-8401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8208-8401]:Block[8208-8401]"
    }, {
      "left" : "isLongMin = true;",
      "right" : "isLongMin = true;",
      "info" : "ExpressionStatement[8357-8374]:ExpressionStatement[8357-8374]"
    }, {
      "left" : "++x;",
      "right" : "++x;",
      "info" : "ExpressionStatement[8387-8391]:ExpressionStatement[8387-8391]"
    }, {
      "left" : "if (x < 0)",
      "right" : "if (x < 0)",
      "info" : "IfStatement[8435-8539]:IfStatement[8435-8539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8446-8500]:Block[8446-8500]"
    }, {
      "left" : "sign = -1;",
      "right" : "sign = -1;",
      "info" : "ExpressionStatement[8460-8470]:ExpressionStatement[8460-8470]"
    }, {
      "left" : "x = -x;",
      "right" : "x = -x;",
      "info" : "ExpressionStatement[8483-8490]:ExpressionStatement[8483-8490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8506-8539]:Block[8506-8539]"
    }, {
      "left" : "sign = 1;",
      "right" : "sign = 1;",
      "info" : "ExpressionStatement[8520-8529]:ExpressionStatement[8520-8529]"
    }, {
      "left" : "exp = 0;",
      "right" : "exp = 0;",
      "info" : "ExpressionStatement[8549-8557]:ExpressionStatement[8549-8557]"
    }, {
      "left" : "while (x != 0)",
      "right" : "while (x != 0)",
      "info" : "WhileStatement[8566-8779]:WhileStatement[8566-8779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8581-8779]:Block[8581-8779]"
    }, {
      "left" : "System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",
      "right" : "System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp);",
      "info" : "ExpressionStatement[8595-8671]:ExpressionStatement[8595-8671]"
    }, {
      "left" : "mant[mant.length - 1] = (int) (x % RADIX);",
      "right" : "mant[mant.length - 1] = (int) (x % RADIX);",
      "info" : "ExpressionStatement[8684-8726]:ExpressionStatement[8684-8726]"
    }, {
      "left" : "x /= RADIX;",
      "right" : "x /= RADIX;",
      "info" : "ExpressionStatement[8739-8750]:ExpressionStatement[8739-8750]"
    }, {
      "left" : "exp++;",
      "right" : "exp++;",
      "info" : "ExpressionStatement[8763-8769]:ExpressionStatement[8763-8769]"
    }, {
      "left" : "if (isLongMin)",
      "right" : "if (isLongMin)",
      "info" : "IfStatement[8789-9131]:IfStatement[8789-9131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8804-9131]:Block[8804-9131]"
    }, {
      "left" : "for (int i = 0; i < mant.length - 1; i++)",
      "right" : "for (int i = 0; i < mant.length - 1; i++)",
      "info" : "ForStatement[8952-9121]:ForStatement[8952-9121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8994-9121]:Block[8994-9121]"
    }, {
      "left" : "if (mant[i] != 0)",
      "right" : "if (mant[i] != 0)",
      "info" : "IfStatement[9012-9107]:IfStatement[9012-9107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9030-9107]:Block[9030-9107]"
    }, {
      "left" : "mant[i]++;",
      "right" : "mant[i]++;",
      "info" : "ExpressionStatement[9052-9062]:ExpressionStatement[9052-9062]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9083-9089]:BreakStatement[9083-9089]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11062-11068]:Modifier[11168-11174]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[11069-11072]:SimpleName[11175-11178]"
    }, {
      "left" : "final Dfp d",
      "right" : "final Dfp d",
      "info" : "SingleVariableDeclaration[11073-11084]:SingleVariableDeclaration[11179-11190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11086-11221]:Block[11192-11327]"
    }, {
      "left" : "mant  = d.mant.clone();",
      "right" : "mant  = d.mant.clone();",
      "info" : "ExpressionStatement[11096-11119]:ExpressionStatement[11202-11225]"
    }, {
      "left" : "sign  = d.sign;",
      "right" : "sign  = d.sign;",
      "info" : "ExpressionStatement[11128-11143]:ExpressionStatement[11234-11249]"
    }, {
      "left" : "exp   = d.exp;",
      "right" : "exp   = d.exp;",
      "info" : "ExpressionStatement[11152-11166]:ExpressionStatement[11258-11272]"
    }, {
      "left" : "nans  = d.nans;",
      "right" : "nans  = d.nans;",
      "info" : "ExpressionStatement[11175-11190]:ExpressionStatement[11281-11296]"
    }, {
      "left" : "field = d.field;",
      "right" : "field = d.field;",
      "info" : "ExpressionStatement[11199-11215]:ExpressionStatement[11305-11321]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[11403-11412]:Modifier[11509-11518]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[11413-11416]:SimpleName[11519-11522]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[11417-11437]:SingleVariableDeclaration[11523-11543]"
    }, {
      "left" : "final String s",
      "right" : "final String s",
      "info" : "SingleVariableDeclaration[11439-11453]:SingleVariableDeclaration[11545-11559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11455-16935]:Block[11561-17041]"
    }, {
      "left" : "mant = new int[field.getRadixDigits()];",
      "right" : "mant = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[11496-11535]:ExpressionStatement[11602-11641]"
    }, {
      "left" : "sign = 1;",
      "right" : "sign = 1;",
      "info" : "ExpressionStatement[11544-11553]:ExpressionStatement[11650-11659]"
    }, {
      "left" : "exp = 0;",
      "right" : "exp = 0;",
      "info" : "ExpressionStatement[11562-11570]:ExpressionStatement[11668-11676]"
    }, {
      "left" : "nans = FINITE;",
      "right" : "nans = FINITE;",
      "info" : "ExpressionStatement[11579-11593]:ExpressionStatement[11685-11699]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[11602-11621]:ExpressionStatement[11708-11727]"
    }, {
      "left" : "boolean decimalFound = false;",
      "right" : "boolean decimalFound = false;",
      "info" : "VariableDeclarationStatement[11631-11660]:VariableDeclarationStatement[11737-11766]"
    }, {
      "left" : "final int rsize = 4;",
      "right" : "final int rsize = 4;",
      "info" : "VariableDeclarationStatement[11669-11689]:VariableDeclarationStatement[11775-11795]"
    }, {
      "left" : "final int offset = 4;",
      "right" : "final int offset = 4;",
      "info" : "VariableDeclarationStatement[11735-11756]:VariableDeclarationStatement[11841-11862]"
    }, {
      "left" : "final char[] striped = new char[getRadixDigits() * rsize + offset * 2];",
      "right" : "final char[] striped = new char[getRadixDigits() * rsize + offset * 2];",
      "info" : "VariableDeclarationStatement[11798-11869]:VariableDeclarationStatement[11904-11975]"
    }, {
      "left" : "if (s.equals(POS_INFINITY_STRING))",
      "right" : "if (s.equals(POS_INFINITY_STRING))",
      "info" : "IfStatement[11915-12039]:IfStatement[12021-12145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11950-12039]:Block[12056-12145]"
    }, {
      "left" : "sign = (byte) 1;",
      "right" : "sign = (byte) 1;",
      "info" : "ExpressionStatement[11964-11980]:ExpressionStatement[12070-12086]"
    }, {
      "left" : "nans = INFINITE;",
      "right" : "nans = INFINITE;",
      "info" : "ExpressionStatement[11993-12009]:ExpressionStatement[12099-12115]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12022-12029]:ReturnStatement[12128-12135]"
    }, {
      "left" : "if (s.equals(NEG_INFINITY_STRING))",
      "right" : "if (s.equals(NEG_INFINITY_STRING))",
      "info" : "IfStatement[12049-12174]:IfStatement[12155-12280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12084-12174]:Block[12190-12280]"
    }, {
      "left" : "sign = (byte) -1;",
      "right" : "sign = (byte) -1;",
      "info" : "ExpressionStatement[12098-12115]:ExpressionStatement[12204-12221]"
    }, {
      "left" : "nans = INFINITE;",
      "right" : "nans = INFINITE;",
      "info" : "ExpressionStatement[12128-12144]:ExpressionStatement[12234-12250]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12157-12164]:ReturnStatement[12263-12270]"
    }, {
      "left" : "if (s.equals(NAN_STRING))",
      "right" : "if (s.equals(NAN_STRING))",
      "info" : "IfStatement[12184-12295]:IfStatement[12290-12401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12210-12295]:Block[12316-12401]"
    }, {
      "left" : "sign = (byte) 1;",
      "right" : "sign = (byte) 1;",
      "info" : "ExpressionStatement[12224-12240]:ExpressionStatement[12330-12346]"
    }, {
      "left" : "nans = QNAN;",
      "right" : "nans = QNAN;",
      "info" : "ExpressionStatement[12253-12265]:ExpressionStatement[12359-12371]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[12278-12285]:ReturnStatement[12384-12391]"
    }, {
      "left" : "int p = s.indexOf(\"e\");",
      "right" : "int p = s.indexOf(\"e\");",
      "info" : "VariableDeclarationStatement[12346-12369]:VariableDeclarationStatement[12452-12475]"
    }, {
      "left" : "if (p == -1)",
      "right" : "if (p == -1)",
      "info" : "IfStatement[12378-12453]:IfStatement[12484-12559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12391-12453]:Block[12497-12559]"
    }, {
      "left" : "p = s.indexOf(\"E\");",
      "right" : "p = s.indexOf(\"E\");",
      "info" : "ExpressionStatement[12424-12443]:ExpressionStatement[12530-12549]"
    }, {
      "left" : "final String fpdecimal;",
      "right" : "final String fpdecimal;",
      "info" : "VariableDeclarationStatement[12463-12486]:VariableDeclarationStatement[12569-12592]"
    }, {
      "left" : "int sciexp = 0;",
      "right" : "int sciexp = 0;",
      "info" : "VariableDeclarationStatement[12495-12510]:VariableDeclarationStatement[12601-12616]"
    }, {
      "left" : "if (p != -1)",
      "right" : "if (p != -1)",
      "info" : "IfStatement[12519-13213]:IfStatement[12625-13319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12532-13142]:Block[12638-13248]"
    }, {
      "left" : "fpdecimal = s.substring(0, p);",
      "right" : "fpdecimal = s.substring(0, p);",
      "info" : "ExpressionStatement[12581-12611]:ExpressionStatement[12687-12717]"
    }, {
      "left" : "String fpexp = s.substring(p+1);",
      "right" : "String fpexp = s.substring(p+1);",
      "info" : "VariableDeclarationStatement[12624-12656]:VariableDeclarationStatement[12730-12762]"
    }, {
      "left" : "boolean negative = false;",
      "right" : "boolean negative = false;",
      "info" : "VariableDeclarationStatement[12669-12694]:VariableDeclarationStatement[12775-12800]"
    }, {
      "left" : "for (int i=0; i<fpexp.length(); i++)",
      "right" : "for (int i=0; i<fpexp.length(); i++)",
      "info" : "ForStatement[12708-13055]:ForStatement[12814-13161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12757-13055]:Block[12863-13161]"
    }, {
      "left" : "if (fpexp.charAt(i) == '-')",
      "right" : "if (fpexp.charAt(i) == '-')",
      "info" : "IfStatement[12775-12905]:IfStatement[12881-13011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12819-12905]:Block[12925-13011]"
    }, {
      "left" : "negative = true;",
      "right" : "negative = true;",
      "info" : "ExpressionStatement[12841-12857]:ExpressionStatement[12947-12963]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[12878-12887]:ContinueStatement[12984-12993]"
    }, {
      "left" : "if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9')",
      "right" : "if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9')",
      "info" : "IfStatement[12922-13041]:IfStatement[13028-13147]"
    }, {
      "left" : "sciexp = sciexp * 10 + fpexp.charAt(i) - '0';",
      "right" : "sciexp = sciexp * 10 + fpexp.charAt(i) - '0';",
      "info" : "ExpressionStatement[12996-13041]:ExpressionStatement[13102-13147]"
    }, {
      "left" : "if (negative)",
      "right" : "if (negative)",
      "info" : "IfStatement[13069-13132]:IfStatement[13175-13238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13083-13132]:Block[13189-13238]"
    }, {
      "left" : "sciexp = -sciexp;",
      "right" : "sciexp = -sciexp;",
      "info" : "ExpressionStatement[13101-13118]:ExpressionStatement[13207-13224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13148-13213]:Block[13254-13319]"
    }, {
      "left" : "fpdecimal = s;",
      "right" : "fpdecimal = s;",
      "info" : "ExpressionStatement[13189-13203]:ExpressionStatement[13295-13309]"
    }, {
      "left" : "if (fpdecimal.indexOf(\"-\") !=  -1)",
      "right" : "if (fpdecimal.indexOf(\"-\") !=  -1)",
      "info" : "IfStatement[13293-13362]:IfStatement[13399-13468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13328-13362]:Block[13434-13468]"
    }, {
      "left" : "sign = -1;",
      "right" : "sign = -1;",
      "info" : "ExpressionStatement[13342-13352]:ExpressionStatement[13448-13458]"
    }, {
      "left" : "p = 0;",
      "right" : "p = 0;",
      "info" : "ExpressionStatement[13464-13470]:ExpressionStatement[13570-13576]"
    }, {
      "left" : "int decimalPos = 0;",
      "right" : "int decimalPos = 0;",
      "info" : "VariableDeclarationStatement[13525-13544]:VariableDeclarationStatement[13631-13650]"
    }, {
      "left" : "for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        })",
      "right" : "for (;;) {\n            if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {\n                break;\n            }\n\n            if (decimalFound && fpdecimal.charAt(p) == '0') {\n                decimalPos--;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n            }\n\n            p++;\n\n            if (p == fpdecimal.length()) {\n                break;\n            }\n        })",
      "info" : "ForStatement[13553-13990]:ForStatement[13659-14096]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13562-13990]:Block[13668-14096]"
    }, {
      "left" : "if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9')",
      "right" : "if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9')",
      "info" : "IfStatement[13576-13676]:IfStatement[13682-13782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13638-13676]:Block[13744-13782]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13656-13662]:BreakStatement[13762-13768]"
    }, {
      "left" : "if (decimalFound && fpdecimal.charAt(p) == '0')",
      "right" : "if (decimalFound && fpdecimal.charAt(p) == '0')",
      "info" : "IfStatement[13690-13783]:IfStatement[13796-13889]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13738-13783]:Block[13844-13889]"
    }, {
      "left" : "decimalPos--;",
      "right" : "decimalPos--;",
      "info" : "ExpressionStatement[13756-13769]:ExpressionStatement[13862-13875]"
    }, {
      "left" : "if (fpdecimal.charAt(p) == '.')",
      "right" : "if (fpdecimal.charAt(p) == '.')",
      "info" : "IfStatement[13797-13881]:IfStatement[13903-13987]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13829-13881]:Block[13935-13987]"
    }, {
      "left" : "decimalFound = true;",
      "right" : "decimalFound = true;",
      "info" : "ExpressionStatement[13847-13867]:ExpressionStatement[13953-13973]"
    }, {
      "left" : "p++;",
      "right" : "p++;",
      "info" : "ExpressionStatement[13895-13899]:ExpressionStatement[14001-14005]"
    }, {
      "left" : "if (p == fpdecimal.length())",
      "right" : "if (p == fpdecimal.length())",
      "info" : "IfStatement[13913-13980]:IfStatement[14019-14086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13942-13980]:Block[14048-14086]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13960-13966]:BreakStatement[14066-14072]"
    }, {
      "left" : "int q = offset;",
      "right" : "int q = offset;",
      "info" : "VariableDeclarationStatement[14041-14056]:VariableDeclarationStatement[14147-14162]"
    }, {
      "left" : "striped[0] = '0';",
      "right" : "striped[0] = '0';",
      "info" : "ExpressionStatement[14065-14082]:ExpressionStatement[14171-14188]"
    }, {
      "left" : "striped[1] = '0';",
      "right" : "striped[1] = '0';",
      "info" : "ExpressionStatement[14091-14108]:ExpressionStatement[14197-14214]"
    }, {
      "left" : "striped[2] = '0';",
      "right" : "striped[2] = '0';",
      "info" : "ExpressionStatement[14117-14134]:ExpressionStatement[14223-14240]"
    }, {
      "left" : "striped[3] = '0';",
      "right" : "striped[3] = '0';",
      "info" : "ExpressionStatement[14143-14160]:ExpressionStatement[14249-14266]"
    }, {
      "left" : "int significantDigits=0;",
      "right" : "int significantDigits=0;",
      "info" : "VariableDeclarationStatement[14169-14193]:VariableDeclarationStatement[14275-14299]"
    }, {
      "left" : "for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        })",
      "right" : "for(;;) {\n            if (p == (fpdecimal.length())) {\n                break;\n            }\n\n            // Don't want to run pass the end of the array\n            if (q == mant.length*rsize+offset+1) {\n                break;\n            }\n\n            if (fpdecimal.charAt(p) == '.') {\n                decimalFound = true;\n                decimalPos = significantDigits;\n                p++;\n                continue;\n            }\n\n            if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9') {\n                p++;\n                continue;\n            }\n\n            striped[q] = fpdecimal.charAt(p);\n            q++;\n            p++;\n            significantDigits++;\n        })",
      "info" : "ForStatement[14202-14894]:ForStatement[14308-15000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14210-14894]:Block[14316-15000]"
    }, {
      "left" : "if (p == (fpdecimal.length()))",
      "right" : "if (p == (fpdecimal.length()))",
      "info" : "IfStatement[14224-14293]:IfStatement[14330-14399]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14255-14293]:Block[14361-14399]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14273-14279]:BreakStatement[14379-14385]"
    }, {
      "left" : "if (q == mant.length*rsize+offset+1)",
      "right" : "if (q == mant.length*rsize+offset+1)",
      "info" : "IfStatement[14366-14441]:IfStatement[14472-14547]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14403-14441]:Block[14509-14547]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14421-14427]:BreakStatement[14527-14533]"
    }, {
      "left" : "if (fpdecimal.charAt(p) == '.')",
      "right" : "if (fpdecimal.charAt(p) == '.')",
      "info" : "IfStatement[14455-14634]:IfStatement[14561-14740]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14487-14634]:Block[14593-14740]"
    }, {
      "left" : "decimalFound = true;",
      "right" : "decimalFound = true;",
      "info" : "ExpressionStatement[14505-14525]:ExpressionStatement[14611-14631]"
    }, {
      "left" : "decimalPos = significantDigits;",
      "right" : "decimalPos = significantDigits;",
      "info" : "ExpressionStatement[14542-14573]:ExpressionStatement[14648-14679]"
    }, {
      "left" : "p++;",
      "right" : "p++;",
      "info" : "ExpressionStatement[14590-14594]:ExpressionStatement[14696-14700]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[14611-14620]:ContinueStatement[14717-14726]"
    }, {
      "left" : "if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9')",
      "right" : "if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '9')",
      "info" : "IfStatement[14648-14770]:IfStatement[14754-14876]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14708-14770]:Block[14814-14876]"
    }, {
      "left" : "p++;",
      "right" : "p++;",
      "info" : "ExpressionStatement[14726-14730]:ExpressionStatement[14832-14836]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[14747-14756]:ContinueStatement[14853-14862]"
    }, {
      "left" : "striped[q] = fpdecimal.charAt(p);",
      "right" : "striped[q] = fpdecimal.charAt(p);",
      "info" : "ExpressionStatement[14784-14817]:ExpressionStatement[14890-14923]"
    }, {
      "left" : "q++;",
      "right" : "q++;",
      "info" : "ExpressionStatement[14830-14834]:ExpressionStatement[14936-14940]"
    }, {
      "left" : "p++;",
      "right" : "p++;",
      "info" : "ExpressionStatement[14847-14851]:ExpressionStatement[14953-14957]"
    }, {
      "left" : "significantDigits++;",
      "right" : "significantDigits++;",
      "info" : "ExpressionStatement[14864-14884]:ExpressionStatement[14970-14990]"
    }, {
      "left" : "if (decimalFound && q != offset)",
      "right" : "if (decimalFound && q != offset)",
      "info" : "IfStatement[14984-15318]:IfStatement[15090-15424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15017-15318]:Block[15123-15424]"
    }, {
      "left" : "for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            })",
      "right" : "for (;;) {\n                q--;\n                if (q == offset) {\n                    break;\n                }\n                if (striped[q] == '0') {\n                    significantDigits--;\n                } else {\n                    break;\n                }\n            })",
      "info" : "ForStatement[15031-15308]:ForStatement[15137-15414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15040-15308]:Block[15146-15414]"
    }, {
      "left" : "q--;",
      "right" : "q--;",
      "info" : "ExpressionStatement[15058-15062]:ExpressionStatement[15164-15168]"
    }, {
      "left" : "if (q == offset)",
      "right" : "if (q == offset)",
      "info" : "IfStatement[15079-15142]:IfStatement[15185-15248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15096-15142]:Block[15202-15248]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15118-15124]:BreakStatement[15224-15230]"
    }, {
      "left" : "if (striped[q] == '0')",
      "right" : "if (striped[q] == '0')",
      "info" : "IfStatement[15159-15294]:IfStatement[15265-15400]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15182-15242]:Block[15288-15348]"
    }, {
      "left" : "significantDigits--;",
      "right" : "significantDigits--;",
      "info" : "ExpressionStatement[15204-15224]:ExpressionStatement[15310-15330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15248-15294]:Block[15354-15400]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15270-15276]:BreakStatement[15376-15382]"
    }, {
      "left" : "if (decimalFound && significantDigits == 0)",
      "right" : "if (decimalFound && significantDigits == 0)",
      "info" : "IfStatement[15378-15461]:IfStatement[15484-15567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15422-15461]:Block[15528-15567]"
    }, {
      "left" : "decimalPos = 0;",
      "right" : "decimalPos = 0;",
      "info" : "ExpressionStatement[15436-15451]:ExpressionStatement[15542-15557]"
    }, {
      "left" : "if (!decimalFound)",
      "right" : "if (!decimalFound)",
      "info" : "IfStatement[15537-15602]:IfStatement[15643-15708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15556-15602]:Block[15662-15708]"
    }, {
      "left" : "decimalPos = q-offset;",
      "right" : "decimalPos = q-offset;",
      "info" : "ExpressionStatement[15570-15592]:ExpressionStatement[15676-15698]"
    }, {
      "left" : "q = offset;",
      "right" : "q = offset;",
      "info" : "ExpressionStatement[15669-15680]:ExpressionStatement[15775-15786]"
    }, {
      "left" : "p = significantDigits-1+offset;",
      "right" : "p = significantDigits-1+offset;",
      "info" : "ExpressionStatement[15727-15758]:ExpressionStatement[15833-15864]"
    }, {
      "left" : "int trailingZeros = 0;",
      "right" : "int trailingZeros = 0;",
      "info" : "VariableDeclarationStatement[15768-15790]:VariableDeclarationStatement[15874-15896]"
    }, {
      "left" : "while (p > q)",
      "right" : "while (p > q)",
      "info" : "WhileStatement[15799-15944]:WhileStatement[15905-16050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15813-15944]:Block[15919-16050]"
    }, {
      "left" : "if (striped[p] != '0')",
      "right" : "if (striped[p] != '0')",
      "info" : "IfStatement[15827-15888]:IfStatement[15933-15994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15850-15888]:Block[15956-15994]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15868-15874]:BreakStatement[15974-15980]"
    }, {
      "left" : "trailingZeros++;",
      "right" : "trailingZeros++;",
      "info" : "ExpressionStatement[15901-15917]:ExpressionStatement[16007-16023]"
    }, {
      "left" : "p--;",
      "right" : "p--;",
      "info" : "ExpressionStatement[15930-15934]:ExpressionStatement[16036-16040]"
    }, {
      "left" : "int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;",
      "right" : "int i = ((rsize * 100) - decimalPos - sciexp % rsize) % rsize;",
      "info" : "VariableDeclarationStatement[16014-16076]:VariableDeclarationStatement[16120-16182]"
    }, {
      "left" : "q -= i;",
      "right" : "q -= i;",
      "info" : "ExpressionStatement[16085-16092]:ExpressionStatement[16191-16198]"
    }, {
      "left" : "decimalPos += i;",
      "right" : "decimalPos += i;",
      "info" : "ExpressionStatement[16101-16117]:ExpressionStatement[16207-16223]"
    }, {
      "left" : "while ((p - q) < (mant.length * rsize))",
      "right" : "while ((p - q) < (mant.length * rsize))",
      "info" : "WhileStatement[16209-16352]:WhileStatement[16315-16458]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16249-16352]:Block[16355-16458]"
    }, {
      "left" : "for (i = 0; i < rsize; i++)",
      "right" : "for (i = 0; i < rsize; i++)",
      "info" : "ForStatement[16263-16342]:ForStatement[16369-16448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16291-16342]:Block[16397-16448]"
    }, {
      "left" : "striped[++p] = '0';",
      "right" : "striped[++p] = '0';",
      "info" : "ExpressionStatement[16309-16328]:ExpressionStatement[16415-16434]"
    }, {
      "left" : "for (i = mant.length - 1; i >= 0; i--)",
      "right" : "for (i = mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[16476-16746]:ForStatement[16582-16852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16515-16746]:Block[16621-16852]"
    }, {
      "left" : "mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');",
      "right" : "mant[i] = (striped[q]   - '0') * 1000 +\n                      (striped[q+1] - '0') * 100  +\n                      (striped[q+2] - '0') * 10   +\n                      (striped[q+3] - '0');",
      "info" : "ExpressionStatement[16529-16716]:ExpressionStatement[16635-16822]"
    }, {
      "left" : "q += 4;",
      "right" : "q += 4;",
      "info" : "ExpressionStatement[16729-16736]:ExpressionStatement[16835-16842]"
    }, {
      "left" : "exp = (decimalPos+sciexp) / rsize;",
      "right" : "exp = (decimalPos+sciexp) / rsize;",
      "info" : "ExpressionStatement[16757-16791]:ExpressionStatement[16863-16897]"
    }, {
      "left" : "if (q < striped.length)",
      "right" : "if (q < striped.length)",
      "info" : "IfStatement[16801-16928]:IfStatement[16907-17034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16825-16928]:Block[16931-17034]"
    }, {
      "left" : "round((striped[q] - '0')*1000);",
      "right" : "round((striped[q] - '0')*1000);",
      "info" : "ExpressionStatement[16887-16918]:ExpressionStatement[16993-17024]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[17213-17222]:Modifier[17319-17328]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleName[17223-17226]:SimpleName[17329-17332]"
    }, {
      "left" : "final DfpField field",
      "right" : "final DfpField field",
      "info" : "SingleVariableDeclaration[17227-17247]:SingleVariableDeclaration[17333-17353]"
    }, {
      "left" : "final byte sign",
      "right" : "final byte sign",
      "info" : "SingleVariableDeclaration[17249-17264]:SingleVariableDeclaration[17355-17370]"
    }, {
      "left" : "final byte nans",
      "right" : "final byte nans",
      "info" : "SingleVariableDeclaration[17266-17281]:SingleVariableDeclaration[17372-17387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17283-17458]:Block[17389-17564]"
    }, {
      "left" : "this.field = field;",
      "right" : "this.field = field;",
      "info" : "ExpressionStatement[17293-17312]:ExpressionStatement[17399-17418]"
    }, {
      "left" : "this.mant    = new int[field.getRadixDigits()];",
      "right" : "this.mant    = new int[field.getRadixDigits()];",
      "info" : "ExpressionStatement[17321-17368]:ExpressionStatement[17427-17474]"
    }, {
      "left" : "this.sign    = sign;",
      "right" : "this.sign    = sign;",
      "info" : "ExpressionStatement[17377-17397]:ExpressionStatement[17483-17503]"
    }, {
      "left" : "this.exp     = 0;",
      "right" : "this.exp     = 0;",
      "info" : "ExpressionStatement[17406-17423]:ExpressionStatement[17512-17529]"
    }, {
      "left" : "this.nans    = nans;",
      "right" : "this.nans    = nans;",
      "info" : "ExpressionStatement[17432-17452]:ExpressionStatement[17538-17558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17648-17654]:Modifier[17754-17760]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[17655-17658]:SimpleType[17761-17764]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[17659-17670]:SimpleName[17765-17776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17673-17716]:Block[17779-17822]"
    }, {
      "left" : "return new Dfp(getField());",
      "right" : "return new Dfp(getField());",
      "info" : "ReturnStatement[17683-17710]:ReturnStatement[17789-17816]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[17867-17873]:Modifier[17973-17979]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[17874-17877]:SimpleType[17980-17983]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[17878-17889]:SimpleName[17984-17995]"
    }, {
      "left" : "final byte x",
      "right" : "final byte x",
      "info" : "SingleVariableDeclaration[17890-17902]:SingleVariableDeclaration[17996-18008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17904-17950]:Block[18010-18056]"
    }, {
      "left" : "return new Dfp(getField(), x);",
      "right" : "return new Dfp(getField(), x);",
      "info" : "ReturnStatement[17914-17944]:ReturnStatement[18020-18050]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18101-18107]:Modifier[18207-18213]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[18108-18111]:SimpleType[18214-18217]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[18112-18123]:SimpleName[18218-18229]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[18124-18135]:SingleVariableDeclaration[18230-18241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18137-18183]:Block[18243-18289]"
    }, {
      "left" : "return new Dfp(getField(), x);",
      "right" : "return new Dfp(getField(), x);",
      "info" : "ReturnStatement[18147-18177]:ReturnStatement[18253-18283]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18334-18340]:Modifier[18440-18446]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[18341-18344]:SimpleType[18447-18450]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[18345-18356]:SimpleName[18451-18462]"
    }, {
      "left" : "final long x",
      "right" : "final long x",
      "info" : "SingleVariableDeclaration[18357-18369]:SingleVariableDeclaration[18463-18475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18371-18417]:Block[18477-18523]"
    }, {
      "left" : "return new Dfp(getField(), x);",
      "right" : "return new Dfp(getField(), x);",
      "info" : "ReturnStatement[18381-18411]:ReturnStatement[18487-18517]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18570-18576]:Modifier[18676-18682]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[18577-18580]:SimpleType[18683-18686]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[18581-18592]:SimpleName[18687-18698]"
    }, {
      "left" : "final double x",
      "right" : "final double x",
      "info" : "SingleVariableDeclaration[18593-18607]:SingleVariableDeclaration[18699-18713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18609-18655]:Block[18715-18761]"
    }, {
      "left" : "return new Dfp(getField(), x);",
      "right" : "return new Dfp(getField(), x);",
      "info" : "ReturnStatement[18619-18649]:ReturnStatement[18725-18755]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18895-18901]:Modifier[19001-19007]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[18902-18905]:SimpleType[19008-19011]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[18906-18917]:SimpleName[19012-19023]"
    }, {
      "left" : "final Dfp d",
      "right" : "final Dfp d",
      "info" : "SingleVariableDeclaration[18918-18929]:SingleVariableDeclaration[19024-19035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18931-19336]:Block[19037-19442]"
    }, {
      "left" : "if (field.getRadixDigits() != d.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != d.field.getRadixDigits())",
      "info" : "IfStatement[19008-19301]:IfStatement[19114-19407]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19064-19301]:Block[19170-19407]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[19078-19124]:ExpressionStatement[19184-19230]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[19137-19179]:VariableDeclarationStatement[19243-19285]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[19192-19211]:ExpressionStatement[19298-19317]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, NEW_INSTANCE_TRAP, d, result);",
      "info" : "ReturnStatement[19224-19291]:ReturnStatement[19330-19397]"
    }, {
      "left" : "return new Dfp(d);",
      "right" : "return new Dfp(d);",
      "info" : "ReturnStatement[19311-19329]:ReturnStatement[19417-19435]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19603-19609]:Modifier[19709-19715]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[19610-19613]:SimpleType[19716-19719]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[19614-19625]:SimpleName[19720-19731]"
    }, {
      "left" : "final String s",
      "right" : "final String s",
      "info" : "SingleVariableDeclaration[19626-19640]:SingleVariableDeclaration[19732-19746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19642-19683]:Block[19748-19789]"
    }, {
      "left" : "return new Dfp(field, s);",
      "right" : "return new Dfp(field, s);",
      "info" : "ReturnStatement[19652-19677]:ReturnStatement[19758-19783]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[19957-19963]:Modifier[20063-20069]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[19964-19967]:SimpleType[20070-20073]"
    }, {
      "left" : "newInstance",
      "right" : "newInstance",
      "info" : "SimpleName[19968-19979]:SimpleName[20074-20085]"
    }, {
      "left" : "final byte sig",
      "right" : "final byte sig",
      "info" : "SingleVariableDeclaration[19980-19994]:SingleVariableDeclaration[20086-20100]"
    }, {
      "left" : "final byte code",
      "right" : "final byte code",
      "info" : "SingleVariableDeclaration[19996-20011]:SingleVariableDeclaration[20102-20117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20013-20060]:Block[20119-20166]"
    }, {
      "left" : "return field.newDfp(sig, code);",
      "right" : "return field.newDfp(sig, code);",
      "info" : "ReturnStatement[20023-20054]:ReturnStatement[20129-20160]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20440-20446]:Modifier[20546-20552]"
    }, {
      "left" : "DfpField",
      "right" : "DfpField",
      "info" : "SimpleType[20447-20455]:SimpleType[20553-20561]"
    }, {
      "left" : "getField",
      "right" : "getField",
      "info" : "SimpleName[20456-20464]:SimpleName[20562-20570]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20467-20496]:Block[20573-20602]"
    }, {
      "left" : "return field;",
      "right" : "return field;",
      "info" : "ReturnStatement[20477-20490]:ReturnStatement[20583-20596]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20604-20610]:Modifier[20710-20716]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[20611-20614]:PrimitiveType[20717-20720]"
    }, {
      "left" : "getRadixDigits",
      "right" : "getRadixDigits",
      "info" : "SimpleName[20615-20629]:SimpleName[20721-20735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20632-20678]:Block[20738-20784]"
    }, {
      "left" : "return field.getRadixDigits();",
      "right" : "return field.getRadixDigits();",
      "info" : "ReturnStatement[20642-20672]:ReturnStatement[20748-20778]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20757-20763]:Modifier[20863-20869]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[20764-20767]:SimpleType[20870-20873]"
    }, {
      "left" : "getZero",
      "right" : "getZero",
      "info" : "SimpleName[20768-20775]:SimpleName[20874-20881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20778-20817]:Block[20884-20923]"
    }, {
      "left" : "return field.getZero();",
      "right" : "return field.getZero();",
      "info" : "ReturnStatement[20788-20811]:ReturnStatement[20894-20917]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[20895-20901]:Modifier[21001-21007]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[20902-20905]:SimpleType[21008-21011]"
    }, {
      "left" : "getOne",
      "right" : "getOne",
      "info" : "SimpleName[20906-20912]:SimpleName[21012-21018]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20915-20953]:Block[21021-21059]"
    }, {
      "left" : "return field.getOne();",
      "right" : "return field.getOne();",
      "info" : "ReturnStatement[20925-20947]:ReturnStatement[21031-21053]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[21031-21037]:Modifier[21137-21143]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[21038-21041]:SimpleType[21144-21147]"
    }, {
      "left" : "getTwo",
      "right" : "getTwo",
      "info" : "SimpleName[21042-21048]:SimpleName[21148-21154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21051-21089]:Block[21157-21195]"
    }, {
      "left" : "return field.getTwo();",
      "right" : "return field.getTwo();",
      "info" : "ReturnStatement[21061-21083]:ReturnStatement[21167-21189]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21175-21184]:Modifier[21281-21290]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21185-21189]:PrimitiveType[21291-21295]"
    }, {
      "left" : "shiftLeft",
      "right" : "shiftLeft",
      "info" : "SimpleName[21190-21199]:SimpleName[21296-21305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21202-21340]:Block[21308-21446]"
    }, {
      "left" : "for (int i = mant.length - 1; i > 0; i--)",
      "right" : "for (int i = mant.length - 1; i > 0; i--)",
      "info" : "ForStatement[21212-21298]:ForStatement[21318-21404]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21254-21298]:Block[21360-21404]"
    }, {
      "left" : "mant[i] = mant[i-1];",
      "right" : "mant[i] = mant[i-1];",
      "info" : "ExpressionStatement[21268-21288]:ExpressionStatement[21374-21394]"
    }, {
      "left" : "mant[0] = 0;",
      "right" : "mant[0] = 0;",
      "info" : "ExpressionStatement[21307-21319]:ExpressionStatement[21413-21425]"
    }, {
      "left" : "exp--;",
      "right" : "exp--;",
      "info" : "ExpressionStatement[21328-21334]:ExpressionStatement[21434-21440]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21528-21537]:Modifier[21634-21643]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[21538-21542]:PrimitiveType[21644-21648]"
    }, {
      "left" : "shiftRight",
      "right" : "shiftRight",
      "info" : "SimpleName[21543-21553]:SimpleName[21649-21659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21556-21708]:Block[21662-21814]"
    }, {
      "left" : "for (int i = 0; i < mant.length - 1; i++)",
      "right" : "for (int i = 0; i < mant.length - 1; i++)",
      "info" : "ForStatement[21566-21652]:ForStatement[21672-21758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21608-21652]:Block[21714-21758]"
    }, {
      "left" : "mant[i] = mant[i+1];",
      "right" : "mant[i] = mant[i+1];",
      "info" : "ExpressionStatement[21622-21642]:ExpressionStatement[21728-21748]"
    }, {
      "left" : "mant[mant.length - 1] = 0;",
      "right" : "mant[mant.length - 1] = 0;",
      "info" : "ExpressionStatement[21661-21687]:ExpressionStatement[21767-21793]"
    }, {
      "left" : "exp++;",
      "right" : "exp++;",
      "info" : "ExpressionStatement[21696-21702]:ExpressionStatement[21802-21808]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[22122-22131]:Modifier[22228-22237]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[22132-22135]:PrimitiveType[22238-22241]"
    }, {
      "left" : "align",
      "right" : "align",
      "info" : "SimpleName[22136-22141]:SimpleName[22242-22247]"
    }, {
      "left" : "int e",
      "right" : "int e",
      "info" : "SingleVariableDeclaration[22142-22147]:SingleVariableDeclaration[22248-22253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22149-23397]:Block[22255-23503]"
    }, {
      "left" : "int lostdigit = 0;",
      "right" : "int lostdigit = 0;",
      "info" : "VariableDeclarationStatement[22159-22177]:VariableDeclarationStatement[22265-22283]"
    }, {
      "left" : "boolean inexact = false;",
      "right" : "boolean inexact = false;",
      "info" : "VariableDeclarationStatement[22186-22210]:VariableDeclarationStatement[22292-22316]"
    }, {
      "left" : "int diff = exp - e;",
      "right" : "int diff = exp - e;",
      "info" : "VariableDeclarationStatement[22220-22239]:VariableDeclarationStatement[22326-22345]"
    }, {
      "left" : "int adiff = diff;",
      "right" : "int adiff = diff;",
      "info" : "VariableDeclarationStatement[22249-22266]:VariableDeclarationStatement[22355-22372]"
    }, {
      "left" : "if (adiff < 0)",
      "right" : "if (adiff < 0)",
      "info" : "IfStatement[22275-22329]:IfStatement[22381-22435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22290-22329]:Block[22396-22435]"
    }, {
      "left" : "adiff = -adiff;",
      "right" : "adiff = -adiff;",
      "info" : "ExpressionStatement[22304-22319]:ExpressionStatement[22410-22425]"
    }, {
      "left" : "if (diff == 0)",
      "right" : "if (diff == 0)",
      "info" : "IfStatement[22339-22387]:IfStatement[22445-22493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22354-22387]:Block[22460-22493]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[22368-22377]:ReturnStatement[22474-22483]"
    }, {
      "left" : "if (adiff > (mant.length + 1))",
      "right" : "if (adiff > (mant.length + 1))",
      "info" : "IfStatement[22397-22672]:IfStatement[22503-22778]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22428-22672]:Block[22534-22778]"
    }, {
      "left" : "Arrays.fill(mant, 0);",
      "right" : "Arrays.fill(mant, 0);",
      "info" : "ExpressionStatement[22470-22491]:ExpressionStatement[22576-22597]"
    }, {
      "left" : "exp = e;",
      "right" : "exp = e;",
      "info" : "ExpressionStatement[22504-22512]:ExpressionStatement[22610-22618]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[22526-22572]:ExpressionStatement[22632-22678]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",
      "right" : "dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",
      "info" : "ExpressionStatement[22585-22639]:ExpressionStatement[22691-22745]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[22653-22662]:ReturnStatement[22759-22768]"
    }, {
      "left" : "for (int i = 0; i < adiff; i++)",
      "right" : "for (int i = 0; i < adiff; i++)",
      "info" : "ForStatement[22682-23203]:ForStatement[22788-23309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22714-23203]:Block[22820-23309]"
    }, {
      "left" : "if (diff < 0)",
      "right" : "if (diff < 0)",
      "info" : "IfStatement[22728-23193]:IfStatement[22834-23299]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22742-23143]:Block[22848-23249]"
    }, {
      "left" : "if (lostdigit != 0)",
      "right" : "if (lostdigit != 0)",
      "info" : "IfStatement[22985-23060]:IfStatement[23091-23166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23005-23060]:Block[23111-23166]"
    }, {
      "left" : "inexact = true;",
      "right" : "inexact = true;",
      "info" : "ExpressionStatement[23027-23042]:ExpressionStatement[23133-23148]"
    }, {
      "left" : "lostdigit = mant[0];",
      "right" : "lostdigit = mant[0];",
      "info" : "ExpressionStatement[23078-23098]:ExpressionStatement[23184-23204]"
    }, {
      "left" : "shiftRight();",
      "right" : "shiftRight();",
      "info" : "ExpressionStatement[23116-23129]:ExpressionStatement[23222-23235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23149-23193]:Block[23255-23299]"
    }, {
      "left" : "shiftLeft();",
      "right" : "shiftLeft();",
      "info" : "ExpressionStatement[23167-23179]:ExpressionStatement[23273-23285]"
    }, {
      "left" : "if (inexact)",
      "right" : "if (inexact)",
      "info" : "IfStatement[23213-23363]:IfStatement[23319-23469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23226-23363]:Block[23332-23469]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[23240-23286]:ExpressionStatement[23346-23392]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",
      "right" : "dotrap(DfpField.FLAG_INEXACT, ALIGN_TRAP, this, this);",
      "info" : "ExpressionStatement[23299-23353]:ExpressionStatement[23405-23459]"
    }, {
      "left" : "return lostdigit;",
      "right" : "return lostdigit;",
      "info" : "ReturnStatement[23373-23390]:ReturnStatement[23479-23496]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[23586-23592]:Modifier[23692-23698]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[23593-23600]:PrimitiveType[23699-23706]"
    }, {
      "left" : "lessThan",
      "right" : "lessThan",
      "info" : "SimpleName[23601-23609]:SimpleName[23707-23715]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[23610-23621]:SingleVariableDeclaration[23716-23727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23623-24339]:Block[23729-24445]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[23700-24009]:IfStatement[23806-24115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23756-24009]:Block[23862-24115]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[23770-23816]:ExpressionStatement[23876-23922]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[23829-23871]:VariableDeclarationStatement[23935-23977]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[23884-23903]:ExpressionStatement[23990-24009]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, result);",
      "info" : "ExpressionStatement[23916-23973]:ExpressionStatement[24022-24079]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23986-23999]:ReturnStatement[24092-24105]"
    }, {
      "left" : "if (isNaN() || x.isNaN())",
      "right" : "if (isNaN() || x.isNaN())",
      "info" : "IfStatement[24087-24295]:IfStatement[24193-24401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24113-24295]:Block[24219-24401]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[24127-24173]:ExpressionStatement[24233-24279]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, LESS_THAN_TRAP, x, newInstance(getZero()));",
      "info" : "ExpressionStatement[24186-24259]:ExpressionStatement[24292-24365]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24272-24285]:ReturnStatement[24378-24391]"
    }, {
      "left" : "return compare(this, x) < 0;",
      "right" : "return compare(this, x) < 0;",
      "info" : "ReturnStatement[24305-24333]:ReturnStatement[24411-24439]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[24534-24540]:Modifier[24640-24646]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[24541-24548]:PrimitiveType[24647-24654]"
    }, {
      "left" : "greaterThan",
      "right" : "greaterThan",
      "info" : "SimpleName[24549-24560]:SimpleName[24655-24666]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[24561-24572]:SingleVariableDeclaration[24667-24678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24574-25296]:Block[24680-25402]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[24651-24963]:IfStatement[24757-25069]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24707-24963]:Block[24813-25069]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[24721-24767]:ExpressionStatement[24827-24873]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[24780-24822]:VariableDeclarationStatement[24886-24928]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[24835-24854]:ExpressionStatement[24941-24960]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);",
      "right" : "dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, result);",
      "info" : "ExpressionStatement[24867-24927]:ExpressionStatement[24973-25033]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24940-24953]:ReturnStatement[25046-25059]"
    }, {
      "left" : "if (isNaN() || x.isNaN())",
      "right" : "if (isNaN() || x.isNaN())",
      "info" : "IfStatement[25041-25252]:IfStatement[25147-25358]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25067-25252]:Block[25173-25358]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[25081-25127]:ExpressionStatement[25187-25233]"
    }, {
      "left" : "dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",
      "right" : "dotrap(DfpField.FLAG_INVALID, GREATER_THAN_TRAP, x, newInstance(getZero()));",
      "info" : "ExpressionStatement[25140-25216]:ExpressionStatement[25246-25322]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25229-25242]:ReturnStatement[25335-25348]"
    }, {
      "left" : "return compare(this, x) > 0;",
      "right" : "return compare(this, x) > 0;",
      "info" : "ReturnStatement[25262-25290]:ReturnStatement[25368-25396]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25393-25399]:Modifier[25499-25505]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25400-25407]:PrimitiveType[25506-25513]"
    }, {
      "left" : "isInfinite",
      "right" : "isInfinite",
      "info" : "SimpleName[25408-25418]:SimpleName[25514-25524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25421-25461]:Block[25527-25567]"
    }, {
      "left" : "return nans == INFINITE;",
      "right" : "return nans == INFINITE;",
      "info" : "ReturnStatement[25431-25455]:ReturnStatement[25537-25561]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25566-25572]:Modifier[25672-25678]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25573-25580]:PrimitiveType[25679-25686]"
    }, {
      "left" : "isNaN",
      "right" : "isNaN",
      "info" : "SimpleName[25581-25586]:SimpleName[25687-25692]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25589-25645]:Block[25695-25751]"
    }, {
      "left" : "return (nans == QNAN) || (nans == SNAN);",
      "right" : "return (nans == QNAN) || (nans == SNAN);",
      "info" : "ReturnStatement[25599-25639]:ReturnStatement[25705-25745]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[25836-25845]:MarkerAnnotation[25942-25951]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[25850-25856]:Modifier[25956-25962]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[25857-25864]:PrimitiveType[25963-25970]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[25865-25871]:SimpleName[25971-25977]"
    }, {
      "left" : "final Object other",
      "right" : "final Object other",
      "info" : "SingleVariableDeclaration[25872-25890]:SingleVariableDeclaration[25978-25996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25892-26190]:Block[25998-26296]"
    }, {
      "left" : "if (other instanceof Dfp)",
      "right" : "if (other instanceof Dfp)",
      "info" : "IfStatement[25903-26160]:IfStatement[26009-26266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25929-26160]:Block[26035-26266]"
    }, {
      "left" : "final Dfp x = (Dfp) other;",
      "right" : "final Dfp x = (Dfp) other;",
      "info" : "VariableDeclarationStatement[25943-25969]:VariableDeclarationStatement[26049-26075]"
    }, {
      "left" : "if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[25982-26107]:IfStatement[26088-26213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26062-26107]:Block[26168-26213]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26080-26093]:ReturnStatement[26186-26199]"
    }, {
      "left" : "return compare(this, x) == 0;",
      "right" : "return compare(this, x) == 0;",
      "info" : "ReturnStatement[26121-26150]:ReturnStatement[26227-26256]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26170-26183]:ReturnStatement[26276-26289]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[26302-26311]:MarkerAnnotation[26408-26417]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26316-26322]:Modifier[26422-26428]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[26323-26326]:PrimitiveType[26429-26432]"
    }, {
      "left" : "hashCode",
      "right" : "hashCode",
      "info" : "SimpleName[26327-26335]:SimpleName[26433-26441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26338-26423]:Block[26444-26529]"
    }, {
      "left" : "return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);",
      "right" : "return 17 + (sign << 8) + (nans << 16) + exp + Arrays.hashCode(mant);",
      "info" : "ReturnStatement[26348-26417]:ReturnStatement[26454-26523]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[26618-26624]:Modifier[26724-26730]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[26625-26632]:PrimitiveType[26731-26738]"
    }, {
      "left" : "unequal",
      "right" : "unequal",
      "info" : "SimpleName[26633-26640]:SimpleName[26739-26746]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[26641-26652]:SingleVariableDeclaration[26747-26758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26654-26834]:Block[26760-26940]"
    }, {
      "left" : "if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (isNaN() || x.isNaN() || field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[26664-26781]:IfStatement[26770-26887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26744-26781]:Block[26850-26887]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26758-26771]:ReturnStatement[26864-26877]"
    }, {
      "left" : "return greaterThan(x) || lessThan(x);",
      "right" : "return greaterThan(x) || lessThan(x);",
      "info" : "ReturnStatement[26791-26828]:ReturnStatement[26897-26934]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27111-27118]:Modifier[27217-27224]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[27119-27125]:Modifier[27225-27231]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[27126-27129]:PrimitiveType[27232-27235]"
    }, {
      "left" : "compare",
      "right" : "compare",
      "info" : "SimpleName[27130-27137]:SimpleName[27236-27243]"
    }, {
      "left" : "final Dfp a",
      "right" : "final Dfp a",
      "info" : "SingleVariableDeclaration[27138-27149]:SingleVariableDeclaration[27244-27255]"
    }, {
      "left" : "final Dfp b",
      "right" : "final Dfp b",
      "info" : "SingleVariableDeclaration[27151-27162]:SingleVariableDeclaration[27257-27268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27164-28459]:Block[27270-28565]"
    }, {
      "left" : "if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE)",
      "right" : "if (a.mant[a.mant.length - 1] == 0 && b.mant[b.mant.length - 1] == 0 &&\n            a.nans == FINITE && b.nans == FINITE)",
      "info" : "IfStatement[27209-27364]:IfStatement[27315-27470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27331-27364]:Block[27437-27470]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[27345-27354]:ReturnStatement[27451-27460]"
    }, {
      "left" : "if (a.sign != b.sign)",
      "right" : "if (a.sign != b.sign)",
      "info" : "IfStatement[27374-27527]:IfStatement[27480-27633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27396-27527]:Block[27502-27633]"
    }, {
      "left" : "if (a.sign == -1)",
      "right" : "if (a.sign == -1)",
      "info" : "IfStatement[27410-27517]:IfStatement[27516-27623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27428-27470]:Block[27534-27576]"
    }, {
      "left" : "return -1;",
      "right" : "return -1;",
      "info" : "ReturnStatement[27446-27456]:ReturnStatement[27552-27562]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27476-27517]:Block[27582-27623]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[27494-27503]:ReturnStatement[27600-27609]"
    }, {
      "left" : "if (a.nans == INFINITE && b.nans == FINITE)",
      "right" : "if (a.nans == INFINITE && b.nans == FINITE)",
      "info" : "IfStatement[27573-27655]:IfStatement[27679-27761]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27617-27655]:Block[27723-27761]"
    }, {
      "left" : "return a.sign;",
      "right" : "return a.sign;",
      "info" : "ReturnStatement[27631-27645]:ReturnStatement[27737-27751]"
    }, {
      "left" : "if (a.nans == FINITE && b.nans == INFINITE)",
      "right" : "if (a.nans == FINITE && b.nans == INFINITE)",
      "info" : "IfStatement[27665-27748]:IfStatement[27771-27854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27709-27748]:Block[27815-27854]"
    }, {
      "left" : "return -b.sign;",
      "right" : "return -b.sign;",
      "info" : "ReturnStatement[27723-27738]:ReturnStatement[27829-27844]"
    }, {
      "left" : "if (a.nans == INFINITE && b.nans == INFINITE)",
      "right" : "if (a.nans == INFINITE && b.nans == INFINITE)",
      "info" : "IfStatement[27758-27837]:IfStatement[27864-27943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27804-27837]:Block[27910-27943]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[27818-27827]:ReturnStatement[27924-27933]"
    }, {
      "left" : "if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0)",
      "right" : "if (b.mant[b.mant.length-1] != 0 && a.mant[b.mant.length-1] != 0)",
      "info" : "IfStatement[27925-28160]:IfStatement[28031-28266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27991-28160]:Block[28097-28266]"
    }, {
      "left" : "if (a.exp < b.exp)",
      "right" : "if (a.exp < b.exp)",
      "info" : "IfStatement[28005-28071]:IfStatement[28111-28177]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28024-28071]:Block[28130-28177]"
    }, {
      "left" : "return -a.sign;",
      "right" : "return -a.sign;",
      "info" : "ReturnStatement[28042-28057]:ReturnStatement[28148-28163]"
    }, {
      "left" : "if (a.exp > b.exp)",
      "right" : "if (a.exp > b.exp)",
      "info" : "IfStatement[28085-28150]:IfStatement[28191-28256]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28104-28150]:Block[28210-28256]"
    }, {
      "left" : "return a.sign;",
      "right" : "return a.sign;",
      "info" : "ReturnStatement[28122-28136]:ReturnStatement[28228-28242]"
    }, {
      "left" : "for (int i = a.mant.length - 1; i >= 0; i--)",
      "right" : "for (int i = a.mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[28203-28433]:ForStatement[28309-28539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28248-28433]:Block[28354-28539]"
    }, {
      "left" : "if (a.mant[i] > b.mant[i])",
      "right" : "if (a.mant[i] > b.mant[i])",
      "info" : "IfStatement[28262-28335]:IfStatement[28368-28441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28289-28335]:Block[28395-28441]"
    }, {
      "left" : "return a.sign;",
      "right" : "return a.sign;",
      "info" : "ReturnStatement[28307-28321]:ReturnStatement[28413-28427]"
    }, {
      "left" : "if (a.mant[i] < b.mant[i])",
      "right" : "if (a.mant[i] < b.mant[i])",
      "info" : "IfStatement[28349-28423]:IfStatement[28455-28529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28376-28423]:Block[28482-28529]"
    }, {
      "left" : "return -a.sign;",
      "right" : "return -a.sign;",
      "info" : "ReturnStatement[28394-28409]:ReturnStatement[28500-28515]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[28443-28452]:ReturnStatement[28549-28558]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28685-28691]:Modifier[28791-28797]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[28692-28695]:SimpleType[28798-28801]"
    }, {
      "left" : "rint",
      "right" : "rint",
      "info" : "SimpleName[28696-28700]:SimpleName[28802-28806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28703-28771]:Block[28809-28877]"
    }, {
      "left" : "return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);",
      "right" : "return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);",
      "info" : "ReturnStatement[28713-28765]:ReturnStatement[28819-28871]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28910-28916]:Modifier[29016-29022]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[28917-28920]:SimpleType[29023-29026]"
    }, {
      "left" : "floor",
      "right" : "floor",
      "info" : "SimpleName[28921-28926]:SimpleName[29027-29032]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28929-28993]:Block[29035-29099]"
    }, {
      "left" : "return trunc(DfpField.RoundingMode.ROUND_FLOOR);",
      "right" : "return trunc(DfpField.RoundingMode.ROUND_FLOOR);",
      "info" : "ReturnStatement[28939-28987]:ReturnStatement[29045-29093]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29131-29137]:Modifier[29237-29243]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[29138-29141]:SimpleType[29244-29247]"
    }, {
      "left" : "ceil",
      "right" : "ceil",
      "info" : "SimpleName[29142-29146]:SimpleName[29248-29252]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29149-29212]:Block[29255-29318]"
    }, {
      "left" : "return trunc(DfpField.RoundingMode.ROUND_CEIL);",
      "right" : "return trunc(DfpField.RoundingMode.ROUND_CEIL);",
      "info" : "ReturnStatement[29159-29206]:ReturnStatement[29265-29312]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29365-29371]:Modifier[29471-29477]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[29372-29375]:SimpleType[29478-29481]"
    }, {
      "left" : "remainder",
      "right" : "remainder",
      "info" : "SimpleName[29376-29385]:SimpleName[29482-29491]"
    }, {
      "left" : "final Dfp d",
      "right" : "final Dfp d",
      "info" : "SingleVariableDeclaration[29386-29397]:SingleVariableDeclaration[29492-29503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29399-29690]:Block[29505-29796]"
    }, {
      "left" : "final Dfp result = this.subtract(this.divide(d).rint().multiply(d));",
      "right" : "final Dfp result = this.subtract(this.divide(d).rint().multiply(d));",
      "info" : "VariableDeclarationStatement[29410-29478]:VariableDeclarationStatement[29516-29584]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[29579-29659]:IfStatement[29685-29765]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29616-29659]:Block[29722-29765]"
    }, {
      "left" : "result.sign = sign;",
      "right" : "result.sign = sign;",
      "info" : "ExpressionStatement[29630-29649]:ExpressionStatement[29736-29755]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[29669-29683]:ReturnStatement[29775-29789]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[29842-29851]:Modifier[29948-29957]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[29852-29855]:SimpleType[29958-29961]"
    }, {
      "left" : "trunc",
      "right" : "trunc",
      "info" : "SimpleName[29856-29861]:SimpleName[29962-29967]"
    }, {
      "left" : "final DfpField.RoundingMode rmode",
      "right" : "final DfpField.RoundingMode rmode",
      "info" : "SingleVariableDeclaration[29862-29895]:SingleVariableDeclaration[29968-30001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29897-32773]:Block[30003-32879]"
    }, {
      "left" : "boolean changed = false;",
      "right" : "boolean changed = false;",
      "info" : "VariableDeclarationStatement[29907-29931]:VariableDeclarationStatement[30013-30037]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[29941-30003]:IfStatement[30047-30109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29954-30003]:Block[30060-30109]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[29968-29993]:ReturnStatement[30074-30099]"
    }, {
      "left" : "if (nans == INFINITE)",
      "right" : "if (nans == INFINITE)",
      "info" : "IfStatement[30013-30084]:IfStatement[30119-30190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30035-30084]:Block[30141-30190]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[30049-30074]:ReturnStatement[30155-30180]"
    }, {
      "left" : "if (mant[mant.length-1] == 0)",
      "right" : "if (mant[mant.length-1] == 0)",
      "info" : "IfStatement[30094-30198]:IfStatement[30200-30304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30124-30198]:Block[30230-30304]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[30163-30188]:ReturnStatement[30269-30294]"
    }, {
      "left" : "if (exp < 0)",
      "right" : "if (exp < 0)",
      "info" : "IfStatement[30301-30538]:IfStatement[30407-30644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30314-30538]:Block[30420-30644]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[30328-30374]:ExpressionStatement[30434-30480]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[30387-30423]:VariableDeclarationStatement[30493-30529]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",
      "right" : "result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",
      "info" : "ExpressionStatement[30436-30501]:ExpressionStatement[30542-30607]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[30514-30528]:ReturnStatement[30620-30634]"
    }, {
      "left" : "if (exp >= mant.length)",
      "right" : "if (exp >= mant.length)",
      "info" : "IfStatement[30729-30802]:IfStatement[30835-30908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30753-30802]:Block[30859-30908]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[30767-30792]:ReturnStatement[30873-30898]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[30939-30970]:VariableDeclarationStatement[31045-31076]"
    }, {
      "left" : "for (int i = 0; i < mant.length-result.exp; i++)",
      "right" : "for (int i = 0; i < mant.length-result.exp; i++)",
      "info" : "ForStatement[30979-31115]:ForStatement[31085-31221]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31028-31115]:Block[31134-31221]"
    }, {
      "left" : "changed |= result.mant[i] != 0;",
      "right" : "changed |= result.mant[i] != 0;",
      "info" : "ExpressionStatement[31042-31073]:ExpressionStatement[31148-31179]"
    }, {
      "left" : "result.mant[i] = 0;",
      "right" : "result.mant[i] = 0;",
      "info" : "ExpressionStatement[31086-31105]:ExpressionStatement[31192-31211]"
    }, {
      "left" : "if (changed)",
      "right" : "if (changed)",
      "info" : "IfStatement[31125-32743]:IfStatement[31231-32849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31138-32743]:Block[31244-32849]"
    }, {
      "left" : "switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }",
      "right" : "switch (rmode) {\n                case ROUND_FLOOR:\n                    if (result.sign == -1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(newInstance(-1));\n                    }\n                    break;\n\n                case ROUND_CEIL:\n                    if (result.sign == 1) {\n                        // then we must increment the mantissa by one\n                        result = result.add(getOne());\n                    }\n                    break;\n\n                case ROUND_HALF_EVEN:\n                default:\n                    final Dfp half = newInstance(\"0.5\");\n                    Dfp a = subtract(result);  // difference between this and result\n                    a.sign = 1;            // force positive (take abs)\n                    if (a.greaterThan(half)) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n\n                    /** If exactly equal to 1/2 and odd then increment */\n                    if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0) {\n                        a = newInstance(getOne());\n                        a.sign = sign;\n                        result = result.add(a);\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[31152-32549]:SwitchStatement[31258-32655]"
    }, {
      "left" : "case ROUND_FLOOR:",
      "right" : "case ROUND_FLOOR:",
      "info" : "SwitchCase[31185-31202]:SwitchCase[31291-31308]"
    }, {
      "left" : "if (result.sign == -1)",
      "right" : "if (result.sign == -1)",
      "info" : "IfStatement[31223-31401]:IfStatement[31329-31507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31246-31401]:Block[31352-31507]"
    }, {
      "left" : "result = result.add(newInstance(-1));",
      "right" : "result = result.add(newInstance(-1));",
      "info" : "ExpressionStatement[31342-31379]:ExpressionStatement[31448-31485]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31422-31428]:BreakStatement[31528-31534]"
    }, {
      "left" : "case ROUND_CEIL:",
      "right" : "case ROUND_CEIL:",
      "info" : "SwitchCase[31446-31462]:SwitchCase[31552-31568]"
    }, {
      "left" : "if (result.sign == 1)",
      "right" : "if (result.sign == 1)",
      "info" : "IfStatement[31483-31653]:IfStatement[31589-31759]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31505-31653]:Block[31611-31759]"
    }, {
      "left" : "result = result.add(getOne());",
      "right" : "result = result.add(getOne());",
      "info" : "ExpressionStatement[31601-31631]:ExpressionStatement[31707-31737]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[31674-31680]:BreakStatement[31780-31786]"
    }, {
      "left" : "case ROUND_HALF_EVEN:",
      "right" : "case ROUND_HALF_EVEN:",
      "info" : "SwitchCase[31698-31719]:SwitchCase[31804-31825]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[31736-31744]:SwitchCase[31842-31850]"
    }, {
      "left" : "final Dfp half = newInstance(\"0.5\");",
      "right" : "final Dfp half = newInstance(\"0.5\");",
      "info" : "VariableDeclarationStatement[31765-31801]:VariableDeclarationStatement[31871-31907]"
    }, {
      "left" : "Dfp a = subtract(result);",
      "right" : "Dfp a = subtract(result);",
      "info" : "VariableDeclarationStatement[31822-31847]:VariableDeclarationStatement[31928-31953]"
    }, {
      "left" : "a.sign = 1;",
      "right" : "a.sign = 1;",
      "info" : "ExpressionStatement[31907-31918]:ExpressionStatement[32013-32024]"
    }, {
      "left" : "if (a.greaterThan(half))",
      "right" : "if (a.greaterThan(half))",
      "info" : "IfStatement[31979-32165]:IfStatement[32085-32271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32004-32165]:Block[32110-32271]"
    }, {
      "left" : "a = newInstance(getOne());",
      "right" : "a = newInstance(getOne());",
      "info" : "ExpressionStatement[32030-32056]:ExpressionStatement[32136-32162]"
    }, {
      "left" : "a.sign = sign;",
      "right" : "a.sign = sign;",
      "info" : "ExpressionStatement[32081-32095]:ExpressionStatement[32187-32201]"
    }, {
      "left" : "result = result.add(a);",
      "right" : "result = result.add(a);",
      "info" : "ExpressionStatement[32120-32143]:ExpressionStatement[32226-32249]"
    }, {
      "left" : "if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0)",
      "right" : "if (a.equals(half) && result.exp > 0 && (result.mant[mant.length-result.exp]&1) != 0)",
      "info" : "IfStatement[32261-32508]:IfStatement[32367-32614]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32347-32508]:Block[32453-32614]"
    }, {
      "left" : "a = newInstance(getOne());",
      "right" : "a = newInstance(getOne());",
      "info" : "ExpressionStatement[32373-32399]:ExpressionStatement[32479-32505]"
    }, {
      "left" : "a.sign = sign;",
      "right" : "a.sign = sign;",
      "info" : "ExpressionStatement[32424-32438]:ExpressionStatement[32530-32544]"
    }, {
      "left" : "result = result.add(a);",
      "right" : "result = result.add(a);",
      "info" : "ExpressionStatement[32463-32486]:ExpressionStatement[32569-32592]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[32529-32535]:BreakStatement[32635-32641]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[32563-32609]:ExpressionStatement[32669-32715]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",
      "right" : "result = dotrap(DfpField.FLAG_INEXACT, TRUNC_TRAP, this, result);",
      "info" : "ExpressionStatement[32641-32706]:ExpressionStatement[32747-32812]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32719-32733]:ReturnStatement[32825-32839]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[32753-32767]:ReturnStatement[32859-32873]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32962-32968]:Modifier[33068-33074]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32969-32972]:PrimitiveType[33075-33078]"
    }, {
      "left" : "intValue",
      "right" : "intValue",
      "info" : "SimpleName[32973-32981]:SimpleName[33079-33087]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32984-33508]:Block[33090-33614]"
    }, {
      "left" : "Dfp rounded;",
      "right" : "Dfp rounded;",
      "info" : "VariableDeclarationStatement[32994-33006]:VariableDeclarationStatement[33100-33112]"
    }, {
      "left" : "int result = 0;",
      "right" : "int result = 0;",
      "info" : "VariableDeclarationStatement[33015-33030]:VariableDeclarationStatement[33121-33136]"
    }, {
      "left" : "rounded = rint();",
      "right" : "rounded = rint();",
      "info" : "ExpressionStatement[33040-33057]:ExpressionStatement[33146-33163]"
    }, {
      "left" : "if (rounded.greaterThan(newInstance(2147483647)))",
      "right" : "if (rounded.greaterThan(newInstance(2147483647)))",
      "info" : "IfStatement[33067-33159]:IfStatement[33173-33265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33117-33159]:Block[33223-33265]"
    }, {
      "left" : "return 2147483647;",
      "right" : "return 2147483647;",
      "info" : "ReturnStatement[33131-33149]:ReturnStatement[33237-33255]"
    }, {
      "left" : "if (rounded.lessThan(newInstance(-2147483648)))",
      "right" : "if (rounded.lessThan(newInstance(-2147483648)))",
      "info" : "IfStatement[33169-33260]:IfStatement[33275-33366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33217-33260]:Block[33323-33366]"
    }, {
      "left" : "return -2147483648;",
      "right" : "return -2147483648;",
      "info" : "ReturnStatement[33231-33250]:ReturnStatement[33337-33356]"
    }, {
      "left" : "for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--)",
      "right" : "for (int i = mant.length - 1; i >= mant.length - rounded.exp; i--)",
      "info" : "ForStatement[33270-33403]:ForStatement[33376-33509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33337-33403]:Block[33443-33509]"
    }, {
      "left" : "result = result * RADIX + rounded.mant[i];",
      "right" : "result = result * RADIX + rounded.mant[i];",
      "info" : "ExpressionStatement[33351-33393]:ExpressionStatement[33457-33499]"
    }, {
      "left" : "if (rounded.sign == -1)",
      "right" : "if (rounded.sign == -1)",
      "info" : "IfStatement[33413-33478]:IfStatement[33519-33584]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33437-33478]:Block[33543-33584]"
    }, {
      "left" : "result = -result;",
      "right" : "result = -result;",
      "info" : "ExpressionStatement[33451-33468]:ExpressionStatement[33557-33574]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[33488-33502]:ReturnStatement[33594-33608]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33758-33764]:Modifier[33864-33870]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[33765-33768]:PrimitiveType[33871-33874]"
    }, {
      "left" : "log10K",
      "right" : "log10K",
      "info" : "SimpleName[33769-33775]:SimpleName[33875-33881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33778-33809]:Block[33884-33915]"
    }, {
      "left" : "return exp - 1;",
      "right" : "return exp - 1;",
      "info" : "ReturnStatement[33788-33803]:ReturnStatement[33894-33909]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33929-33935]:Modifier[34035-34041]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[33936-33939]:SimpleType[34042-34045]"
    }, {
      "left" : "power10K",
      "right" : "power10K",
      "info" : "SimpleName[33940-33948]:SimpleName[34046-34054]"
    }, {
      "left" : "final int e",
      "right" : "final int e",
      "info" : "SingleVariableDeclaration[33949-33960]:SingleVariableDeclaration[34055-34066]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33962-34049]:Block[34068-34155]"
    }, {
      "left" : "Dfp d = newInstance(getOne());",
      "right" : "Dfp d = newInstance(getOne());",
      "info" : "VariableDeclarationStatement[33972-34002]:VariableDeclarationStatement[34078-34108]"
    }, {
      "left" : "d.exp = e + 1;",
      "right" : "d.exp = e + 1;",
      "info" : "ExpressionStatement[34011-34025]:ExpressionStatement[34117-34131]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[34034-34043]:ReturnStatement[34140-34149]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34199-34205]:Modifier[34305-34311]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[34206-34209]:PrimitiveType[34312-34315]"
    }, {
      "left" : "log10",
      "right" : "log10",
      "info" : "SimpleName[34210-34215]:SimpleName[34316-34321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34219-34503]:Block[34325-34609]"
    }, {
      "left" : "if (mant[mant.length-1] > 1000)",
      "right" : "if (mant[mant.length-1] > 1000)",
      "info" : "IfStatement[34229-34304]:IfStatement[34335-34410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34261-34304]:Block[34367-34410]"
    }, {
      "left" : "return exp * 4 - 1;",
      "right" : "return exp * 4 - 1;",
      "info" : "ReturnStatement[34275-34294]:ReturnStatement[34381-34400]"
    }, {
      "left" : "if (mant[mant.length-1] > 100)",
      "right" : "if (mant[mant.length-1] > 100)",
      "info" : "IfStatement[34313-34387]:IfStatement[34419-34493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34344-34387]:Block[34450-34493]"
    }, {
      "left" : "return exp * 4 - 2;",
      "right" : "return exp * 4 - 2;",
      "info" : "ReturnStatement[34358-34377]:ReturnStatement[34464-34483]"
    }, {
      "left" : "if (mant[mant.length-1] > 10)",
      "right" : "if (mant[mant.length-1] > 10)",
      "info" : "IfStatement[34396-34469]:IfStatement[34502-34575]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34426-34469]:Block[34532-34575]"
    }, {
      "left" : "return exp * 4 - 3;",
      "right" : "return exp * 4 - 3;",
      "info" : "ReturnStatement[34440-34459]:ReturnStatement[34546-34565]"
    }, {
      "left" : "return exp * 4 - 4;",
      "right" : "return exp * 4 - 4;",
      "info" : "ReturnStatement[34478-34497]:ReturnStatement[34584-34603]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[34620-34626]:Modifier[34726-34732]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[34627-34630]:SimpleType[34733-34736]"
    }, {
      "left" : "power10",
      "right" : "power10",
      "info" : "SimpleName[34631-34638]:SimpleName[34737-34744]"
    }, {
      "left" : "final int e",
      "right" : "final int e",
      "info" : "SingleVariableDeclaration[34639-34650]:SingleVariableDeclaration[34745-34756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34652-35138]:Block[34758-35244]"
    }, {
      "left" : "Dfp d = newInstance(getOne());",
      "right" : "Dfp d = newInstance(getOne());",
      "info" : "VariableDeclarationStatement[34662-34692]:VariableDeclarationStatement[34768-34798]"
    }, {
      "left" : "if (e >= 0)",
      "right" : "if (e >= 0)",
      "info" : "IfStatement[34702-34806]:IfStatement[34808-34912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34714-34756]:Block[34820-34862]"
    }, {
      "left" : "d.exp = e / 4 + 1;",
      "right" : "d.exp = e / 4 + 1;",
      "info" : "ExpressionStatement[34728-34746]:ExpressionStatement[34834-34852]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34762-34806]:Block[34868-34912]"
    }, {
      "left" : "d.exp = (e + 1) / 4;",
      "right" : "d.exp = (e + 1) / 4;",
      "info" : "ExpressionStatement[34776-34796]:ExpressionStatement[34882-34902]"
    }, {
      "left" : "switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }",
      "right" : "switch ((e % 4 + 4) % 4) {\n            case 0:\n                break;\n            case 1:\n                d = d.multiply(10);\n                break;\n            case 2:\n                d = d.multiply(100);\n                break;\n            default:\n                d = d.multiply(1000);\n        }",
      "info" : "SwitchStatement[34816-35113]:SwitchStatement[34922-35219]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[34855-34862]:SwitchCase[34961-34968]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34879-34885]:BreakStatement[34985-34991]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[34898-34905]:SwitchCase[35004-35011]"
    }, {
      "left" : "d = d.multiply(10);",
      "right" : "d = d.multiply(10);",
      "info" : "ExpressionStatement[34922-34941]:ExpressionStatement[35028-35047]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[34958-34964]:BreakStatement[35064-35070]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[34977-34984]:SwitchCase[35083-35090]"
    }, {
      "left" : "d = d.multiply(100);",
      "right" : "d = d.multiply(100);",
      "info" : "ExpressionStatement[35001-35021]:ExpressionStatement[35107-35127]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[35038-35044]:BreakStatement[35144-35150]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[35057-35065]:SwitchCase[35163-35171]"
    }, {
      "left" : "d = d.multiply(1000);",
      "right" : "d = d.multiply(1000);",
      "info" : "ExpressionStatement[35082-35103]:ExpressionStatement[35188-35209]"
    }, {
      "left" : "return d;",
      "right" : "return d;",
      "info" : "ReturnStatement[35123-35132]:ReturnStatement[35229-35238]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[35381-35390]:Modifier[35487-35496]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[35391-35394]:PrimitiveType[35497-35500]"
    }, {
      "left" : "complement",
      "right" : "complement",
      "info" : "SimpleName[35395-35405]:SimpleName[35501-35511]"
    }, {
      "left" : "int extra",
      "right" : "int extra",
      "info" : "SingleVariableDeclaration[35406-35415]:SingleVariableDeclaration[35512-35521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35417-35807]:Block[35523-35913]"
    }, {
      "left" : "extra = RADIX-extra;",
      "right" : "extra = RADIX-extra;",
      "info" : "ExpressionStatement[35428-35448]:ExpressionStatement[35534-35554]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[35457-35545]:ForStatement[35563-35651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35495-35545]:Block[35601-35651]"
    }, {
      "left" : "mant[i] = RADIX-mant[i]-1;",
      "right" : "mant[i] = RADIX-mant[i]-1;",
      "info" : "ExpressionStatement[35509-35535]:ExpressionStatement[35615-35641]"
    }, {
      "left" : "int rh = extra / RADIX;",
      "right" : "int rh = extra / RADIX;",
      "info" : "VariableDeclarationStatement[35555-35578]:VariableDeclarationStatement[35661-35684]"
    }, {
      "left" : "extra = extra - rh * RADIX;",
      "right" : "extra = extra - rh * RADIX;",
      "info" : "ExpressionStatement[35587-35614]:ExpressionStatement[35693-35720]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[35623-35778]:ForStatement[35729-35884]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35661-35778]:Block[35767-35884]"
    }, {
      "left" : "final int r = mant[i] + rh;",
      "right" : "final int r = mant[i] + rh;",
      "info" : "VariableDeclarationStatement[35675-35702]:VariableDeclarationStatement[35781-35808]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[35715-35730]:ExpressionStatement[35821-35836]"
    }, {
      "left" : "mant[i] = r - rh * RADIX;",
      "right" : "mant[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[35743-35768]:ExpressionStatement[35849-35874]"
    }, {
      "left" : "return extra;",
      "right" : "return extra;",
      "info" : "ReturnStatement[35788-35801]:ReturnStatement[35894-35907]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[35907-35913]:Modifier[36013-36019]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[35914-35917]:SimpleType[36020-36023]"
    }, {
      "left" : "add",
      "right" : "add",
      "info" : "SimpleName[35918-35921]:SimpleName[36024-36027]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[35922-35933]:SingleVariableDeclaration[36028-36039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35935-40401]:Block[36041-40507]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[36012-36296]:IfStatement[36118-36402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36068-36296]:Block[36174-36402]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[36082-36128]:ExpressionStatement[36188-36234]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[36141-36183]:VariableDeclarationStatement[36247-36289]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[36196-36215]:ExpressionStatement[36302-36321]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",
      "info" : "ReturnStatement[36228-36286]:ReturnStatement[36334-36392]"
    }, {
      "left" : "if (nans != FINITE || x.nans != FINITE)",
      "right" : "if (nans != FINITE || x.nans != FINITE)",
      "info" : "IfStatement[36341-37197]:IfStatement[36447-37303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36381-37197]:Block[36487-37303]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[36395-36452]:IfStatement[36501-36558]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36408-36452]:Block[36514-36558]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36426-36438]:ReturnStatement[36532-36544]"
    }, {
      "left" : "if (x.isNaN())",
      "right" : "if (x.isNaN())",
      "info" : "IfStatement[36466-36522]:IfStatement[36572-36628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36481-36522]:Block[36587-36628]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[36499-36508]:ReturnStatement[36605-36614]"
    }, {
      "left" : "if (nans == INFINITE && x.nans == FINITE)",
      "right" : "if (nans == INFINITE && x.nans == FINITE)",
      "info" : "IfStatement[36536-36622]:IfStatement[36642-36728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36578-36622]:Block[36684-36728]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36596-36608]:ReturnStatement[36702-36714]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == FINITE)",
      "right" : "if (x.nans == INFINITE && nans == FINITE)",
      "info" : "IfStatement[36636-36719]:IfStatement[36742-36825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36678-36719]:Block[36784-36825]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[36696-36705]:ReturnStatement[36802-36811]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == INFINITE && sign == x.sign)",
      "right" : "if (x.nans == INFINITE && nans == INFINITE && sign == x.sign)",
      "info" : "IfStatement[36733-36836]:IfStatement[36839-36942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36795-36836]:Block[36901-36942]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[36813-36822]:ReturnStatement[36919-36928]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == INFINITE && sign != x.sign)",
      "right" : "if (x.nans == INFINITE && nans == INFINITE && sign != x.sign)",
      "info" : "IfStatement[36850-37187]:IfStatement[36956-37293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36912-37187]:Block[37018-37293]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[36930-36976]:ExpressionStatement[37036-37082]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[36993-37029]:VariableDeclarationStatement[37099-37135]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[37046-37065]:ExpressionStatement[37152-37171]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, ADD_TRAP, x, result);",
      "info" : "ExpressionStatement[37082-37142]:ExpressionStatement[37188-37248]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[37159-37173]:ReturnStatement[37265-37279]"
    }, {
      "left" : "Dfp a = newInstance(this);",
      "right" : "Dfp a = newInstance(this);",
      "info" : "VariableDeclarationStatement[37243-37269]:VariableDeclarationStatement[37349-37375]"
    }, {
      "left" : "Dfp b = newInstance(x);",
      "right" : "Dfp b = newInstance(x);",
      "info" : "VariableDeclarationStatement[37278-37301]:VariableDeclarationStatement[37384-37407]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[37354-37390]:VariableDeclarationStatement[37460-37496]"
    }, {
      "left" : "final byte asign = a.sign;",
      "right" : "final byte asign = a.sign;",
      "info" : "VariableDeclarationStatement[37465-37491]:VariableDeclarationStatement[37571-37597]"
    }, {
      "left" : "final byte bsign = b.sign;",
      "right" : "final byte bsign = b.sign;",
      "info" : "VariableDeclarationStatement[37500-37526]:VariableDeclarationStatement[37606-37632]"
    }, {
      "left" : "a.sign = 1;",
      "right" : "a.sign = 1;",
      "info" : "ExpressionStatement[37536-37547]:ExpressionStatement[37642-37653]"
    }, {
      "left" : "b.sign = 1;",
      "right" : "b.sign = 1;",
      "info" : "ExpressionStatement[37556-37567]:ExpressionStatement[37662-37673]"
    }, {
      "left" : "byte rsign = bsign;",
      "right" : "byte rsign = bsign;",
      "info" : "VariableDeclarationStatement[37654-37673]:VariableDeclarationStatement[37760-37779]"
    }, {
      "left" : "if (compare(a, b) > 0)",
      "right" : "if (compare(a, b) > 0)",
      "info" : "IfStatement[37682-37743]:IfStatement[37788-37849]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37705-37743]:Block[37811-37849]"
    }, {
      "left" : "rsign = asign;",
      "right" : "rsign = asign;",
      "info" : "ExpressionStatement[37719-37733]:ExpressionStatement[37825-37839]"
    }, {
      "left" : "if (b.mant[mant.length-1] == 0)",
      "right" : "if (b.mant[mant.length-1] == 0)",
      "info" : "IfStatement[37963-38033]:IfStatement[38069-38139]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37995-38033]:Block[38101-38139]"
    }, {
      "left" : "b.exp = a.exp;",
      "right" : "b.exp = a.exp;",
      "info" : "ExpressionStatement[38009-38023]:ExpressionStatement[38115-38129]"
    }, {
      "left" : "if (a.mant[mant.length-1] == 0)",
      "right" : "if (a.mant[mant.length-1] == 0)",
      "info" : "IfStatement[38043-38113]:IfStatement[38149-38219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38075-38113]:Block[38181-38219]"
    }, {
      "left" : "a.exp = b.exp;",
      "right" : "a.exp = b.exp;",
      "info" : "ExpressionStatement[38089-38103]:ExpressionStatement[38195-38209]"
    }, {
      "left" : "int aextradigit = 0;",
      "right" : "int aextradigit = 0;",
      "info" : "VariableDeclarationStatement[38176-38196]:VariableDeclarationStatement[38282-38302]"
    }, {
      "left" : "int bextradigit = 0;",
      "right" : "int bextradigit = 0;",
      "info" : "VariableDeclarationStatement[38205-38225]:VariableDeclarationStatement[38311-38331]"
    }, {
      "left" : "if (a.exp < b.exp)",
      "right" : "if (a.exp < b.exp)",
      "info" : "IfStatement[38234-38365]:IfStatement[38340-38471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38253-38306]:Block[38359-38412]"
    }, {
      "left" : "aextradigit = a.align(b.exp);",
      "right" : "aextradigit = a.align(b.exp);",
      "info" : "ExpressionStatement[38267-38296]:ExpressionStatement[38373-38402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38312-38365]:Block[38418-38471]"
    }, {
      "left" : "bextradigit = b.align(a.exp);",
      "right" : "bextradigit = b.align(a.exp);",
      "info" : "ExpressionStatement[38326-38355]:ExpressionStatement[38432-38461]"
    }, {
      "left" : "if (asign != bsign)",
      "right" : "if (asign != bsign)",
      "info" : "IfStatement[38450-38664]:IfStatement[38556-38770]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38470-38664]:Block[38576-38770]"
    }, {
      "left" : "if (asign == rsign)",
      "right" : "if (asign == rsign)",
      "info" : "IfStatement[38484-38654]:IfStatement[38590-38760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38504-38576]:Block[38610-38682]"
    }, {
      "left" : "bextradigit = b.complement(bextradigit);",
      "right" : "bextradigit = b.complement(bextradigit);",
      "info" : "ExpressionStatement[38522-38562]:ExpressionStatement[38628-38668]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38582-38654]:Block[38688-38760]"
    }, {
      "left" : "aextradigit = a.complement(aextradigit);",
      "right" : "aextradigit = a.complement(aextradigit);",
      "info" : "ExpressionStatement[38600-38640]:ExpressionStatement[38706-38746]"
    }, {
      "left" : "int rh = 0;",
      "right" : "int rh = 0;",
      "info" : "VariableDeclarationStatement[38706-38717]:VariableDeclarationStatement[38812-38823]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[38748-38920]:ForStatement[38854-39026]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38786-38920]:Block[38892-39026]"
    }, {
      "left" : "final int r = a.mant[i]+b.mant[i]+rh;",
      "right" : "final int r = a.mant[i]+b.mant[i]+rh;",
      "info" : "VariableDeclarationStatement[38800-38837]:VariableDeclarationStatement[38906-38943]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[38850-38865]:ExpressionStatement[38956-38971]"
    }, {
      "left" : "result.mant[i] = r - rh * RADIX;",
      "right" : "result.mant[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[38878-38910]:ExpressionStatement[38984-39016]"
    }, {
      "left" : "result.exp = a.exp;",
      "right" : "result.exp = a.exp;",
      "info" : "ExpressionStatement[38929-38948]:ExpressionStatement[39035-39054]"
    }, {
      "left" : "result.sign = rsign;",
      "right" : "result.sign = rsign;",
      "info" : "ExpressionStatement[38957-38977]:ExpressionStatement[39063-39083]"
    }, {
      "left" : "if (rh != 0 && (asign == bsign))",
      "right" : "if (rh != 0 && (asign == bsign))",
      "info" : "IfStatement[39102-39431]:IfStatement[39208-39537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39135-39431]:Block[39241-39537]"
    }, {
      "left" : "final int lostdigit = result.mant[0];",
      "right" : "final int lostdigit = result.mant[0];",
      "info" : "VariableDeclarationStatement[39149-39186]:VariableDeclarationStatement[39255-39292]"
    }, {
      "left" : "result.shiftRight();",
      "right" : "result.shiftRight();",
      "info" : "ExpressionStatement[39199-39219]:ExpressionStatement[39305-39325]"
    }, {
      "left" : "result.mant[mant.length-1] = rh;",
      "right" : "result.mant[mant.length-1] = rh;",
      "info" : "ExpressionStatement[39232-39264]:ExpressionStatement[39338-39370]"
    }, {
      "left" : "final int excp = result.round(lostdigit);",
      "right" : "final int excp = result.round(lostdigit);",
      "info" : "VariableDeclarationStatement[39277-39318]:VariableDeclarationStatement[39383-39424]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[39331-39421]:IfStatement[39437-39527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39346-39421]:Block[39452-39527]"
    }, {
      "left" : "result = dotrap(excp, ADD_TRAP, x, result);",
      "right" : "result = dotrap(excp, ADD_TRAP, x, result);",
      "info" : "ExpressionStatement[39364-39407]:ExpressionStatement[39470-39513]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[39476-39809]:ForStatement[39582-39915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39514-39809]:Block[39620-39915]"
    }, {
      "left" : "if (result.mant[mant.length-1] != 0)",
      "right" : "if (result.mant[mant.length-1] != 0)",
      "info" : "IfStatement[39528-39603]:IfStatement[39634-39709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39565-39603]:Block[39671-39709]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[39583-39589]:BreakStatement[39689-39695]"
    }, {
      "left" : "result.shiftLeft();",
      "right" : "result.shiftLeft();",
      "info" : "ExpressionStatement[39616-39635]:ExpressionStatement[39722-39741]"
    }, {
      "left" : "if (i == 0)",
      "right" : "if (i == 0)",
      "info" : "IfStatement[39648-39799]:IfStatement[39754-39905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39660-39799]:Block[39766-39905]"
    }, {
      "left" : "result.mant[0] = aextradigit+bextradigit;",
      "right" : "result.mant[0] = aextradigit+bextradigit;",
      "info" : "ExpressionStatement[39678-39719]:ExpressionStatement[39784-39825]"
    }, {
      "left" : "aextradigit = 0;",
      "right" : "aextradigit = 0;",
      "info" : "ExpressionStatement[39736-39752]:ExpressionStatement[39842-39858]"
    }, {
      "left" : "bextradigit = 0;",
      "right" : "bextradigit = 0;",
      "info" : "ExpressionStatement[39769-39785]:ExpressionStatement[39875-39891]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[39899-40159]:IfStatement[40005-40265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39936-40159]:Block[40042-40265]"
    }, {
      "left" : "result.exp = 0;",
      "right" : "result.exp = 0;",
      "info" : "ExpressionStatement[39950-39965]:ExpressionStatement[40056-40071]"
    }, {
      "left" : "if (asign != bsign)",
      "right" : "if (asign != bsign)",
      "info" : "IfStatement[39979-40149]:IfStatement[40085-40255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39999-40149]:Block[40105-40255]"
    }, {
      "left" : "result.sign = 1;",
      "right" : "result.sign = 1;",
      "info" : "ExpressionStatement[40085-40101]:ExpressionStatement[40191-40207]"
    }, {
      "left" : "final int excp = result.round(aextradigit + bextradigit);",
      "right" : "final int excp = result.round(aextradigit + bextradigit);",
      "info" : "VariableDeclarationStatement[40223-40280]:VariableDeclarationStatement[40329-40386]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[40289-40371]:IfStatement[40395-40477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40304-40371]:Block[40410-40477]"
    }, {
      "left" : "result = dotrap(excp, ADD_TRAP, x, result);",
      "right" : "result = dotrap(excp, ADD_TRAP, x, result);",
      "info" : "ExpressionStatement[40318-40361]:ExpressionStatement[40424-40467]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[40381-40395]:ReturnStatement[40487-40501]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40524-40530]:Modifier[40630-40636]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[40531-40534]:SimpleType[40637-40640]"
    }, {
      "left" : "negate",
      "right" : "negate",
      "info" : "SimpleName[40535-40541]:SimpleName[40641-40647]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40544-40658]:Block[40650-40764]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[40554-40585]:VariableDeclarationStatement[40660-40691]"
    }, {
      "left" : "result.sign = (byte) - result.sign;",
      "right" : "result.sign = (byte) - result.sign;",
      "info" : "ExpressionStatement[40594-40629]:ExpressionStatement[40700-40735]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[40638-40652]:ReturnStatement[40744-40758]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[40777-40783]:Modifier[40883-40889]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[40784-40787]:SimpleType[40890-40893]"
    }, {
      "left" : "subtract",
      "right" : "subtract",
      "info" : "SimpleName[40788-40796]:SimpleName[40894-40902]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[40797-40808]:SingleVariableDeclaration[40903-40914]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40810-40849]:Block[40916-40955]"
    }, {
      "left" : "return add(x.negate());",
      "right" : "return add(x.negate());",
      "info" : "ReturnStatement[40820-40843]:ReturnStatement[40926-40949]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[41012-41021]:Modifier[41118-41127]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[41022-41025]:PrimitiveType[41128-41131]"
    }, {
      "left" : "round",
      "right" : "round",
      "info" : "SimpleName[41026-41031]:SimpleName[41132-41137]"
    }, {
      "left" : "int n",
      "right" : "int n",
      "info" : "SingleVariableDeclaration[41032-41037]:SingleVariableDeclaration[41138-41143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41039-43053]:Block[41145-43159]"
    }, {
      "left" : "boolean inc = false;",
      "right" : "boolean inc = false;",
      "info" : "VariableDeclarationStatement[41049-41069]:VariableDeclarationStatement[41155-41175]"
    }, {
      "left" : "switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }",
      "right" : "switch (field.getRoundingMode()) {\n            case ROUND_DOWN:\n                inc = false;\n                break;\n\n            case ROUND_UP:\n                inc = n != 0;       // round up if n!=0\n                break;\n\n            case ROUND_HALF_UP:\n                inc = n >= 5000;  // round half up\n                break;\n\n            case ROUND_HALF_DOWN:\n                inc = n > 5000;  // round half down\n                break;\n\n            case ROUND_HALF_EVEN:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);  // round half-even\n                break;\n\n            case ROUND_HALF_ODD:\n                inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);  // round half-odd\n                break;\n\n            case ROUND_CEIL:\n                inc = sign == 1 && n != 0;  // round ceil\n                break;\n\n            case ROUND_FLOOR:\n            default:\n                inc = sign == -1 && n != 0;  // round floor\n                break;\n        }",
      "info" : "SwitchStatement[41078-42065]:SwitchStatement[41184-42171]"
    }, {
      "left" : "case ROUND_DOWN:",
      "right" : "case ROUND_DOWN:",
      "info" : "SwitchCase[41125-41141]:SwitchCase[41231-41247]"
    }, {
      "left" : "inc = false;",
      "right" : "inc = false;",
      "info" : "ExpressionStatement[41158-41170]:ExpressionStatement[41264-41276]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41187-41193]:BreakStatement[41293-41299]"
    }, {
      "left" : "case ROUND_UP:",
      "right" : "case ROUND_UP:",
      "info" : "SwitchCase[41207-41221]:SwitchCase[41313-41327]"
    }, {
      "left" : "inc = n != 0;",
      "right" : "inc = n != 0;",
      "info" : "ExpressionStatement[41238-41251]:ExpressionStatement[41344-41357]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41294-41300]:BreakStatement[41400-41406]"
    }, {
      "left" : "case ROUND_HALF_UP:",
      "right" : "case ROUND_HALF_UP:",
      "info" : "SwitchCase[41314-41333]:SwitchCase[41420-41439]"
    }, {
      "left" : "inc = n >= 5000;",
      "right" : "inc = n >= 5000;",
      "info" : "ExpressionStatement[41350-41366]:ExpressionStatement[41456-41472]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41401-41407]:BreakStatement[41507-41513]"
    }, {
      "left" : "case ROUND_HALF_DOWN:",
      "right" : "case ROUND_HALF_DOWN:",
      "info" : "SwitchCase[41421-41442]:SwitchCase[41527-41548]"
    }, {
      "left" : "inc = n > 5000;",
      "right" : "inc = n > 5000;",
      "info" : "ExpressionStatement[41459-41474]:ExpressionStatement[41565-41580]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41511-41517]:BreakStatement[41617-41623]"
    }, {
      "left" : "case ROUND_HALF_EVEN:",
      "right" : "case ROUND_HALF_EVEN:",
      "info" : "SwitchCase[41531-41552]:SwitchCase[41637-41658]"
    }, {
      "left" : "inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);",
      "right" : "inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 1);",
      "info" : "ExpressionStatement[41569-41621]:ExpressionStatement[41675-41727]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41658-41664]:BreakStatement[41764-41770]"
    }, {
      "left" : "case ROUND_HALF_ODD:",
      "right" : "case ROUND_HALF_ODD:",
      "info" : "SwitchCase[41678-41698]:SwitchCase[41784-41804]"
    }, {
      "left" : "inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);",
      "right" : "inc = n > 5000 || (n == 5000 && (mant[0] & 1) == 0);",
      "info" : "ExpressionStatement[41715-41767]:ExpressionStatement[41821-41873]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41803-41809]:BreakStatement[41909-41915]"
    }, {
      "left" : "case ROUND_CEIL:",
      "right" : "case ROUND_CEIL:",
      "info" : "SwitchCase[41823-41839]:SwitchCase[41929-41945]"
    }, {
      "left" : "inc = sign == 1 && n != 0;",
      "right" : "inc = sign == 1 && n != 0;",
      "info" : "ExpressionStatement[41856-41882]:ExpressionStatement[41962-41988]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[41914-41920]:BreakStatement[42020-42026]"
    }, {
      "left" : "case ROUND_FLOOR:",
      "right" : "case ROUND_FLOOR:",
      "info" : "SwitchCase[41934-41951]:SwitchCase[42040-42057]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[41964-41972]:SwitchCase[42070-42078]"
    }, {
      "left" : "inc = sign == -1 && n != 0;",
      "right" : "inc = sign == -1 && n != 0;",
      "info" : "ExpressionStatement[41989-42016]:ExpressionStatement[42095-42122]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[42049-42055]:BreakStatement[42155-42161]"
    }, {
      "left" : "if (inc)",
      "right" : "if (inc)",
      "info" : "IfStatement[42075-42455]:IfStatement[42181-42561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42084-42455]:Block[42190-42561]"
    }, {
      "left" : "int rh = 1;",
      "right" : "int rh = 1;",
      "info" : "VariableDeclarationStatement[42136-42147]:VariableDeclarationStatement[42242-42253]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[42160-42331]:ForStatement[42266-42437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42198-42331]:Block[42304-42437]"
    }, {
      "left" : "final int r = mant[i] + rh;",
      "right" : "final int r = mant[i] + rh;",
      "info" : "VariableDeclarationStatement[42216-42243]:VariableDeclarationStatement[42322-42349]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[42260-42275]:ExpressionStatement[42366-42381]"
    }, {
      "left" : "mant[i] = r - rh * RADIX;",
      "right" : "mant[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[42292-42317]:ExpressionStatement[42398-42423]"
    }, {
      "left" : "if (rh != 0)",
      "right" : "if (rh != 0)",
      "info" : "IfStatement[42345-42445]:IfStatement[42451-42551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42358-42445]:Block[42464-42551]"
    }, {
      "left" : "shiftRight();",
      "right" : "shiftRight();",
      "info" : "ExpressionStatement[42376-42389]:ExpressionStatement[42482-42495]"
    }, {
      "left" : "mant[mant.length-1] = rh;",
      "right" : "mant[mant.length-1] = rh;",
      "info" : "ExpressionStatement[42406-42431]:ExpressionStatement[42512-42537]"
    }, {
      "left" : "if (exp < MIN_EXP)",
      "right" : "if (exp < MIN_EXP)",
      "info" : "IfStatement[42535-42703]:IfStatement[42641-42809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42554-42703]:Block[42660-42809]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_UNDERFLOW);",
      "info" : "ExpressionStatement[42601-42649]:ExpressionStatement[42707-42755]"
    }, {
      "left" : "return DfpField.FLAG_UNDERFLOW;",
      "right" : "return DfpField.FLAG_UNDERFLOW;",
      "info" : "ReturnStatement[42662-42693]:ReturnStatement[42768-42799]"
    }, {
      "left" : "if (exp > MAX_EXP)",
      "right" : "if (exp > MAX_EXP)",
      "info" : "IfStatement[42713-42870]:IfStatement[42819-42976]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42732-42870]:Block[42838-42976]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_OVERFLOW);",
      "info" : "ExpressionStatement[42770-42817]:ExpressionStatement[42876-42923]"
    }, {
      "left" : "return DfpField.FLAG_OVERFLOW;",
      "right" : "return DfpField.FLAG_OVERFLOW;",
      "info" : "ReturnStatement[42830-42860]:ReturnStatement[42936-42966]"
    }, {
      "left" : "if (n != 0)",
      "right" : "if (n != 0)",
      "info" : "IfStatement[42880-43027]:IfStatement[42986-43133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42892-43027]:Block[42998-43133]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[42929-42975]:ExpressionStatement[43035-43081]"
    }, {
      "left" : "return DfpField.FLAG_INEXACT;",
      "right" : "return DfpField.FLAG_INEXACT;",
      "info" : "ReturnStatement[42988-43017]:ReturnStatement[43094-43123]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[43037-43046]:ReturnStatement[43143-43152]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[43161-43167]:Modifier[43267-43273]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[43168-43171]:SimpleType[43274-43277]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[43172-43180]:SimpleName[43278-43286]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[43181-43192]:SingleVariableDeclaration[43287-43298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43194-46567]:Block[43300-46673]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[43271-43560]:IfStatement[43377-43666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43327-43560]:Block[43433-43666]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[43341-43387]:ExpressionStatement[43447-43493]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[43400-43442]:VariableDeclarationStatement[43506-43548]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[43455-43474]:ExpressionStatement[43561-43580]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",
      "info" : "ReturnStatement[43487-43550]:ReturnStatement[43593-43656]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[43570-43606]:VariableDeclarationStatement[43676-43712]"
    }, {
      "left" : "if (nans != FINITE || x.nans != FINITE)",
      "right" : "if (nans != FINITE || x.nans != FINITE)",
      "info" : "IfStatement[43651-44955]:IfStatement[43757-45061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43691-44955]:Block[43797-45061]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[43705-43762]:IfStatement[43811-43868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43718-43762]:Block[43824-43868]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43736-43748]:ReturnStatement[43842-43854]"
    }, {
      "left" : "if (x.isNaN())",
      "right" : "if (x.isNaN())",
      "info" : "IfStatement[43776-43832]:IfStatement[43882-43938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43791-43832]:Block[43897-43938]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[43809-43818]:ReturnStatement[43915-43924]"
    }, {
      "left" : "if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0)",
      "right" : "if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0)",
      "info" : "IfStatement[43846-44062]:IfStatement[43952-44168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43918-44062]:Block[44024-44168]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[43936-43963]:ExpressionStatement[44042-44069]"
    }, {
      "left" : "result.sign = (byte) (sign * x.sign);",
      "right" : "result.sign = (byte) (sign * x.sign);",
      "info" : "ExpressionStatement[43980-44017]:ExpressionStatement[44086-44123]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[44034-44048]:ReturnStatement[44140-44154]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0)",
      "right" : "if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0)",
      "info" : "IfStatement[44076-44287]:IfStatement[44182-44393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44146-44287]:Block[44252-44393]"
    }, {
      "left" : "result = newInstance(x);",
      "right" : "result = newInstance(x);",
      "info" : "ExpressionStatement[44164-44188]:ExpressionStatement[44270-44294]"
    }, {
      "left" : "result.sign = (byte) (sign * x.sign);",
      "right" : "result.sign = (byte) (sign * x.sign);",
      "info" : "ExpressionStatement[44205-44242]:ExpressionStatement[44311-44348]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[44259-44273]:ReturnStatement[44365-44379]"
    }, {
      "left" : "if (x.nans == INFINITE && nans == INFINITE)",
      "right" : "if (x.nans == INFINITE && nans == INFINITE)",
      "info" : "IfStatement[44301-44489]:IfStatement[44407-44595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44345-44489]:Block[44451-44595]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[44363-44390]:ExpressionStatement[44469-44496]"
    }, {
      "left" : "result.sign = (byte) (sign * x.sign);",
      "right" : "result.sign = (byte) (sign * x.sign);",
      "info" : "ExpressionStatement[44407-44444]:ExpressionStatement[44513-44550]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[44461-44475]:ReturnStatement[44567-44581]"
    }, {
      "left" : "if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0))",
      "right" : "if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||\n                    (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] == 0))",
      "info" : "IfStatement[44503-44945]:IfStatement[44609-45051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44669-44945]:Block[44775-45051]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[44687-44733]:ExpressionStatement[44793-44839]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[44750-44782]:ExpressionStatement[44856-44888]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[44799-44818]:ExpressionStatement[44905-44924]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);",
      "info" : "ExpressionStatement[44835-44900]:ExpressionStatement[44941-45006]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[44917-44931]:ReturnStatement[45023-45037]"
    }, {
      "left" : "int[] product = new int[mant.length*2];",
      "right" : "int[] product = new int[mant.length*2];",
      "info" : "VariableDeclarationStatement[44965-45004]:VariableDeclarationStatement[45071-45110]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[45061-45496]:ForStatement[45167-45602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45099-45496]:Block[45205-45602]"
    }, {
      "left" : "int rh = 0;",
      "right" : "int rh = 0;",
      "info" : "VariableDeclarationStatement[45113-45124]:VariableDeclarationStatement[45219-45230]"
    }, {
      "left" : "for (int j=0; j<mant.length; j++)",
      "right" : "for (int j=0; j<mant.length; j++)",
      "info" : "ForStatement[45157-45445]:ForStatement[45263-45551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45191-45445]:Block[45297-45551]"
    }, {
      "left" : "int r = mant[i] * x.mant[j];",
      "right" : "int r = mant[i] * x.mant[j];",
      "info" : "VariableDeclarationStatement[45209-45237]:VariableDeclarationStatement[45315-45343]"
    }, {
      "left" : "r = r + product[i+j] + rh;",
      "right" : "r = r + product[i+j] + rh;",
      "info" : "ExpressionStatement[45282-45308]:ExpressionStatement[45388-45414]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[45369-45384]:ExpressionStatement[45475-45490]"
    }, {
      "left" : "product[i+j] = r - rh * RADIX;",
      "right" : "product[i+j] = r - rh * RADIX;",
      "info" : "ExpressionStatement[45401-45431]:ExpressionStatement[45507-45537]"
    }, {
      "left" : "product[i+mant.length] = rh;",
      "right" : "product[i+mant.length] = rh;",
      "info" : "ExpressionStatement[45458-45486]:ExpressionStatement[45564-45592]"
    }, {
      "left" : "int md = mant.length * 2 - 1;",
      "right" : "int md = mant.length * 2 - 1;",
      "info" : "VariableDeclarationStatement[45541-45570]:VariableDeclarationStatement[45647-45676]"
    }, {
      "left" : "for (int i = mant.length * 2 - 1; i >= 0; i--)",
      "right" : "for (int i = mant.length * 2 - 1; i >= 0; i--)",
      "info" : "ForStatement[45615-45769]:ForStatement[45721-45875]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45662-45769]:Block[45768-45875]"
    }, {
      "left" : "if (product[i] != 0)",
      "right" : "if (product[i] != 0)",
      "info" : "IfStatement[45676-45759]:IfStatement[45782-45865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45697-45759]:Block[45803-45865]"
    }, {
      "left" : "md = i;",
      "right" : "md = i;",
      "info" : "ExpressionStatement[45715-45722]:ExpressionStatement[45821-45828]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[45739-45745]:BreakStatement[45845-45851]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[45822-45935]:ForStatement[45928-46041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45860-45935]:Block[45966-46041]"
    }, {
      "left" : "result.mant[mant.length - i - 1] = product[md - i];",
      "right" : "result.mant[mant.length - i - 1] = product[md - i];",
      "info" : "ExpressionStatement[45874-45925]:ExpressionStatement[45980-46031]"
    }, {
      "left" : "result.exp = exp + x.exp + md - 2 * mant.length + 1;",
      "right" : "result.exp = exp + x.exp + md - 2 * mant.length + 1;",
      "info" : "ExpressionStatement[45976-46028]:ExpressionStatement[46082-46134]"
    }, {
      "left" : "result.sign = (byte)((sign == x.sign)?1:-1);",
      "right" : "result.sign = (byte)((sign == x.sign)?1:-1);",
      "info" : "ExpressionStatement[46037-46081]:ExpressionStatement[46143-46187]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[46091-46217]:IfStatement[46197-46323]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46128-46217]:Block[46234-46323]"
    }, {
      "left" : "result.exp = 0;",
      "right" : "result.exp = 0;",
      "info" : "ExpressionStatement[46192-46207]:ExpressionStatement[46298-46313]"
    }, {
      "left" : "final int excp;",
      "right" : "final int excp;",
      "info" : "VariableDeclarationStatement[46227-46242]:VariableDeclarationStatement[46333-46348]"
    }, {
      "left" : "if (md > (mant.length-1))",
      "right" : "if (md > (mant.length-1))",
      "info" : "IfStatement[46251-46439]:IfStatement[46357-46545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46277-46346]:Block[46383-46452]"
    }, {
      "left" : "excp = result.round(product[md-mant.length]);",
      "right" : "excp = result.round(product[md-mant.length]);",
      "info" : "ExpressionStatement[46291-46336]:ExpressionStatement[46397-46442]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46352-46439]:Block[46458-46545]"
    }, {
      "left" : "excp = result.round(0);",
      "right" : "excp = result.round(0);",
      "info" : "ExpressionStatement[46366-46389]:ExpressionStatement[46472-46495]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[46449-46536]:IfStatement[46555-46642]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46464-46536]:Block[46570-46642]"
    }, {
      "left" : "result = dotrap(excp, MULTIPLY_TRAP, x, result);",
      "right" : "result = dotrap(excp, MULTIPLY_TRAP, x, result);",
      "info" : "ExpressionStatement[46478-46526]:ExpressionStatement[46584-46632]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[46546-46560]:ReturnStatement[46652-46666]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[46760-46766]:Modifier[46866-46872]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[46767-46770]:SimpleType[46873-46876]"
    }, {
      "left" : "multiply",
      "right" : "multiply",
      "info" : "SimpleName[46771-46779]:SimpleName[46877-46885]"
    }, {
      "left" : "final int x",
      "right" : "final int x",
      "info" : "SingleVariableDeclaration[46780-46791]:SingleVariableDeclaration[46886-46897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46793-48460]:Block[46899-48566]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[46803-46834]:VariableDeclarationStatement[46909-46940]"
    }, {
      "left" : "if (nans != FINITE)",
      "right" : "if (nans != FINITE)",
      "info" : "IfStatement[46879-47459]:IfStatement[46985-47565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46899-47459]:Block[47005-47565]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[46913-46970]:IfStatement[47019-47076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46926-46970]:Block[47032-47076]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[46944-46956]:ReturnStatement[47050-47062]"
    }, {
      "left" : "if (nans == INFINITE && x != 0)",
      "right" : "if (nans == INFINITE && x != 0)",
      "info" : "IfStatement[46984-47106]:IfStatement[47090-47212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47016-47106]:Block[47122-47212]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[47034-47061]:ExpressionStatement[47140-47167]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47078-47092]:ReturnStatement[47184-47198]"
    }, {
      "left" : "if (nans == INFINITE && x == 0)",
      "right" : "if (nans == INFINITE && x == 0)",
      "info" : "IfStatement[47120-47449]:IfStatement[47226-47555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47152-47449]:Block[47258-47555]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[47170-47216]:ExpressionStatement[47276-47322]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[47233-47265]:ExpressionStatement[47339-47371]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[47282-47301]:ExpressionStatement[47388-47407]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);",
      "info" : "ExpressionStatement[47318-47404]:ExpressionStatement[47424-47510]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47421-47435]:ReturnStatement[47527-47541]"
    }, {
      "left" : "if (x < 0 || x >= RADIX)",
      "right" : "if (x < 0 || x >= RADIX)",
      "info" : "IfStatement[47497-47779]:IfStatement[47603-47885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47522-47779]:Block[47628-47885]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[47536-47582]:ExpressionStatement[47642-47688]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[47595-47627]:ExpressionStatement[47701-47733]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[47640-47659]:ExpressionStatement[47746-47765]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);",
      "info" : "ExpressionStatement[47672-47742]:ExpressionStatement[47778-47848]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[47755-47769]:ReturnStatement[47861-47875]"
    }, {
      "left" : "int rh = 0;",
      "right" : "int rh = 0;",
      "info" : "VariableDeclarationStatement[47789-47800]:VariableDeclarationStatement[47895-47906]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[47809-47975]:ForStatement[47915-48081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47847-47975]:Block[47953-48081]"
    }, {
      "left" : "final int r = mant[i] * x + rh;",
      "right" : "final int r = mant[i] * x + rh;",
      "info" : "VariableDeclarationStatement[47861-47892]:VariableDeclarationStatement[47967-47998]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[47905-47920]:ExpressionStatement[48011-48026]"
    }, {
      "left" : "result.mant[i] = r - rh * RADIX;",
      "right" : "result.mant[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[47933-47965]:ExpressionStatement[48039-48071]"
    }, {
      "left" : "int lostdigit = 0;",
      "right" : "int lostdigit = 0;",
      "info" : "VariableDeclarationStatement[47985-48003]:VariableDeclarationStatement[48091-48109]"
    }, {
      "left" : "if (rh != 0)",
      "right" : "if (rh != 0)",
      "info" : "IfStatement[48012-48154]:IfStatement[48118-48260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48025-48154]:Block[48131-48260]"
    }, {
      "left" : "lostdigit = result.mant[0];",
      "right" : "lostdigit = result.mant[0];",
      "info" : "ExpressionStatement[48039-48066]:ExpressionStatement[48145-48172]"
    }, {
      "left" : "result.shiftRight();",
      "right" : "result.shiftRight();",
      "info" : "ExpressionStatement[48079-48099]:ExpressionStatement[48185-48205]"
    }, {
      "left" : "result.mant[mant.length-1] = rh;",
      "right" : "result.mant[mant.length-1] = rh;",
      "info" : "ExpressionStatement[48112-48144]:ExpressionStatement[48218-48250]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[48164-48278]:IfStatement[48270-48384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48201-48278]:Block[48307-48384]"
    }, {
      "left" : "result.exp = 0;",
      "right" : "result.exp = 0;",
      "info" : "ExpressionStatement[48253-48268]:ExpressionStatement[48359-48374]"
    }, {
      "left" : "final int excp = result.round(lostdigit);",
      "right" : "final int excp = result.round(lostdigit);",
      "info" : "VariableDeclarationStatement[48288-48329]:VariableDeclarationStatement[48394-48435]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[48338-48430]:IfStatement[48444-48536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48353-48430]:Block[48459-48536]"
    }, {
      "left" : "result = dotrap(excp, MULTIPLY_TRAP, result, result);",
      "right" : "result = dotrap(excp, MULTIPLY_TRAP, result, result);",
      "info" : "ExpressionStatement[48367-48420]:ExpressionStatement[48473-48526]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[48440-48454]:ReturnStatement[48546-48560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[48579-48585]:Modifier[48685-48691]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[48586-48589]:SimpleType[48692-48695]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[48590-48596]:SimpleName[48696-48702]"
    }, {
      "left" : "Dfp divisor",
      "right" : "Dfp divisor",
      "info" : "SingleVariableDeclaration[48597-48608]:SingleVariableDeclaration[48703-48714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48610-56014]:Block[48716-56120]"
    }, {
      "left" : "int dividend[];",
      "right" : "int dividend[];",
      "info" : "VariableDeclarationStatement[48620-48635]:VariableDeclarationStatement[48726-48741]"
    }, {
      "left" : "int quotient[];",
      "right" : "int quotient[];",
      "info" : "VariableDeclarationStatement[48678-48693]:VariableDeclarationStatement[48784-48799]"
    }, {
      "left" : "int remainder[];",
      "right" : "int remainder[];",
      "info" : "VariableDeclarationStatement[48714-48730]:VariableDeclarationStatement[48820-48836]"
    }, {
      "left" : "int qd;",
      "right" : "int qd;",
      "info" : "VariableDeclarationStatement[48751-48758]:VariableDeclarationStatement[48857-48864]"
    }, {
      "left" : "int nsqd;",
      "right" : "int nsqd;",
      "info" : "VariableDeclarationStatement[48820-48829]:VariableDeclarationStatement[48926-48935]"
    }, {
      "left" : "int trial=0;",
      "right" : "int trial=0;",
      "info" : "VariableDeclarationStatement[48893-48905]:VariableDeclarationStatement[48999-49011]"
    }, {
      "left" : "int minadj;",
      "right" : "int minadj;",
      "info" : "VariableDeclarationStatement[48941-48952]:VariableDeclarationStatement[49047-49058]"
    }, {
      "left" : "boolean trialgood;",
      "right" : "boolean trialgood;",
      "info" : "VariableDeclarationStatement[48987-49005]:VariableDeclarationStatement[49093-49111]"
    }, {
      "left" : "int md=0;",
      "right" : "int md=0;",
      "info" : "VariableDeclarationStatement[49053-49062]:VariableDeclarationStatement[49159-49168]"
    }, {
      "left" : "int excp;",
      "right" : "int excp;",
      "info" : "VariableDeclarationStatement[49105-49114]:VariableDeclarationStatement[49211-49220]"
    }, {
      "left" : "if (field.getRadixDigits() != divisor.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != divisor.field.getRadixDigits())",
      "info" : "IfStatement[49210-49509]:IfStatement[49316-49615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49272-49509]:Block[49378-49615]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[49286-49332]:ExpressionStatement[49392-49438]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[49345-49387]:VariableDeclarationStatement[49451-49493]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[49400-49419]:ExpressionStatement[49506-49525]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",
      "info" : "ReturnStatement[49432-49499]:ReturnStatement[49538-49605]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[49519-49555]:VariableDeclarationStatement[49625-49661]"
    }, {
      "left" : "if (nans != FINITE || divisor.nans != FINITE)",
      "right" : "if (nans != FINITE || divisor.nans != FINITE)",
      "info" : "IfStatement[49600-50582]:IfStatement[49706-50688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49646-50582]:Block[49752-50688]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[49660-49717]:IfStatement[49766-49823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49673-49717]:Block[49779-49823]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[49691-49703]:ReturnStatement[49797-49809]"
    }, {
      "left" : "if (divisor.isNaN())",
      "right" : "if (divisor.isNaN())",
      "info" : "IfStatement[49731-49799]:IfStatement[49837-49905]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49752-49799]:Block[49858-49905]"
    }, {
      "left" : "return divisor;",
      "right" : "return divisor;",
      "info" : "ReturnStatement[49770-49785]:ReturnStatement[49876-49891]"
    }, {
      "left" : "if (nans == INFINITE && divisor.nans == FINITE)",
      "right" : "if (nans == INFINITE && divisor.nans == FINITE)",
      "info" : "IfStatement[49813-50011]:IfStatement[49919-50117]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49861-50011]:Block[49967-50117]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[49879-49906]:ExpressionStatement[49985-50012]"
    }, {
      "left" : "result.sign = (byte) (sign * divisor.sign);",
      "right" : "result.sign = (byte) (sign * divisor.sign);",
      "info" : "ExpressionStatement[49923-49966]:ExpressionStatement[50029-50072]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[49983-49997]:ReturnStatement[50089-50103]"
    }, {
      "left" : "if (divisor.nans == INFINITE && nans == FINITE)",
      "right" : "if (divisor.nans == INFINITE && nans == FINITE)",
      "info" : "IfStatement[50025-50228]:IfStatement[50131-50334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50073-50228]:Block[50179-50334]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[50091-50123]:ExpressionStatement[50197-50229]"
    }, {
      "left" : "result.sign = (byte) (sign * divisor.sign);",
      "right" : "result.sign = (byte) (sign * divisor.sign);",
      "info" : "ExpressionStatement[50140-50183]:ExpressionStatement[50246-50289]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[50200-50214]:ReturnStatement[50306-50320]"
    }, {
      "left" : "if (divisor.nans == INFINITE && nans == INFINITE)",
      "right" : "if (divisor.nans == INFINITE && nans == INFINITE)",
      "info" : "IfStatement[50242-50572]:IfStatement[50348-50678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50292-50572]:Block[50398-50678]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[50310-50356]:ExpressionStatement[50416-50462]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[50373-50405]:ExpressionStatement[50479-50511]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[50422-50441]:ExpressionStatement[50528-50547]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, divisor, result);",
      "info" : "ExpressionStatement[50458-50527]:ExpressionStatement[50564-50633]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[50544-50558]:ReturnStatement[50650-50664]"
    }, {
      "left" : "if (divisor.mant[mant.length-1] == 0)",
      "right" : "if (divisor.mant[mant.length-1] == 0)",
      "info" : "IfStatement[50630-50986]:IfStatement[50736-51092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50668-50986]:Block[50774-51092]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);",
      "info" : "ExpressionStatement[50682-50729]:ExpressionStatement[50788-50835]"
    }, {
      "left" : "result = newInstance(getZero());",
      "right" : "result = newInstance(getZero());",
      "info" : "ExpressionStatement[50742-50774]:ExpressionStatement[50848-50880]"
    }, {
      "left" : "result.sign = (byte) (sign * divisor.sign);",
      "right" : "result.sign = (byte) (sign * divisor.sign);",
      "info" : "ExpressionStatement[50787-50830]:ExpressionStatement[50893-50936]"
    }, {
      "left" : "result.nans = INFINITE;",
      "right" : "result.nans = INFINITE;",
      "info" : "ExpressionStatement[50843-50866]:ExpressionStatement[50949-50972]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",
      "right" : "result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, divisor, result);",
      "info" : "ExpressionStatement[50879-50949]:ExpressionStatement[50985-51055]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[50962-50976]:ReturnStatement[51068-51082]"
    }, {
      "left" : "dividend = new int[mant.length+1];",
      "right" : "dividend = new int[mant.length+1];",
      "info" : "ExpressionStatement[50996-51030]:ExpressionStatement[51102-51136]"
    }, {
      "left" : "quotient = new int[mant.length+2];",
      "right" : "quotient = new int[mant.length+2];",
      "info" : "ExpressionStatement[51066-51100]:ExpressionStatement[51172-51206]"
    }, {
      "left" : "remainder = new int[mant.length+1];",
      "right" : "remainder = new int[mant.length+1];",
      "info" : "ExpressionStatement[51168-51203]:ExpressionStatement[51274-51309]"
    }, {
      "left" : "dividend[mant.length] = 0;",
      "right" : "dividend[mant.length] = 0;",
      "info" : "ExpressionStatement[51301-51327]:ExpressionStatement[51407-51433]"
    }, {
      "left" : "quotient[mant.length] = 0;",
      "right" : "quotient[mant.length] = 0;",
      "info" : "ExpressionStatement[51336-51362]:ExpressionStatement[51442-51468]"
    }, {
      "left" : "quotient[mant.length+1] = 0;",
      "right" : "quotient[mant.length+1] = 0;",
      "info" : "ExpressionStatement[51371-51399]:ExpressionStatement[51477-51505]"
    }, {
      "left" : "remainder[mant.length] = 0;",
      "right" : "remainder[mant.length] = 0;",
      "info" : "ExpressionStatement[51408-51435]:ExpressionStatement[51514-51541]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[51547-51690]:ForStatement[51653-51796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51585-51690]:Block[51691-51796]"
    }, {
      "left" : "dividend[i] = mant[i];",
      "right" : "dividend[i] = mant[i];",
      "info" : "ExpressionStatement[51599-51621]:ExpressionStatement[51705-51727]"
    }, {
      "left" : "quotient[i] = 0;",
      "right" : "quotient[i] = 0;",
      "info" : "ExpressionStatement[51634-51650]:ExpressionStatement[51740-51756]"
    }, {
      "left" : "remainder[i] = 0;",
      "right" : "remainder[i] = 0;",
      "info" : "ExpressionStatement[51663-51680]:ExpressionStatement[51769-51786]"
    }, {
      "left" : "nsqd = 0;",
      "right" : "nsqd = 0;",
      "info" : "ExpressionStatement[51751-51760]:ExpressionStatement[51857-51866]"
    }, {
      "left" : "for (qd = mant.length+1; qd >= 0; qd--)",
      "right" : "for (qd = mant.length+1; qd >= 0; qd--)",
      "info" : "ForStatement[51769-55045]:ForStatement[51875-55151]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51809-55045]:Block[51915-55151]"
    }, {
      "left" : "final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];",
      "right" : "final int divMsb = dividend[mant.length]*RADIX+dividend[mant.length-1];",
      "info" : "VariableDeclarationStatement[51937-52008]:VariableDeclarationStatement[52043-52114]"
    }, {
      "left" : "int min = divMsb       / (divisor.mant[mant.length-1]+1);",
      "right" : "int min = divMsb       / (divisor.mant[mant.length-1]+1);",
      "info" : "VariableDeclarationStatement[52021-52078]:VariableDeclarationStatement[52127-52184]"
    }, {
      "left" : "int max = (divMsb + 1) / divisor.mant[mant.length-1];",
      "right" : "int max = (divMsb + 1) / divisor.mant[mant.length-1];",
      "info" : "VariableDeclarationStatement[52091-52144]:VariableDeclarationStatement[52197-52250]"
    }, {
      "left" : "trialgood = false;",
      "right" : "trialgood = false;",
      "info" : "ExpressionStatement[52158-52176]:ExpressionStatement[52264-52282]"
    }, {
      "left" : "while (!trialgood)",
      "right" : "while (!trialgood)",
      "info" : "WhileStatement[52189-54354]:WhileStatement[52295-54460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52208-54354]:Block[52314-54460]"
    }, {
      "left" : "trial = (min+max)/2;",
      "right" : "trial = (min+max)/2;",
      "info" : "ExpressionStatement[52258-52278]:ExpressionStatement[52364-52384]"
    }, {
      "left" : "int rh = 0;",
      "right" : "int rh = 0;",
      "info" : "VariableDeclarationStatement[52361-52372]:VariableDeclarationStatement[52467-52478]"
    }, {
      "left" : "for (int i = 0; i < mant.length + 1; i++)",
      "right" : "for (int i = 0; i < mant.length + 1; i++)",
      "info" : "ForStatement[52389-52654]:ForStatement[52495-52760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52431-52654]:Block[52537-52760]"
    }, {
      "left" : "int dm = (i<mant.length)?divisor.mant[i]:0;",
      "right" : "int dm = (i<mant.length)?divisor.mant[i]:0;",
      "info" : "VariableDeclarationStatement[52453-52496]:VariableDeclarationStatement[52559-52602]"
    }, {
      "left" : "final int r = (dm * trial) + rh;",
      "right" : "final int r = (dm * trial) + rh;",
      "info" : "VariableDeclarationStatement[52517-52549]:VariableDeclarationStatement[52623-52655]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[52570-52585]:ExpressionStatement[52676-52691]"
    }, {
      "left" : "remainder[i] = r - rh * RADIX;",
      "right" : "remainder[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[52606-52636]:ExpressionStatement[52712-52742]"
    }, {
      "left" : "rh = 1;",
      "right" : "rh = 1;",
      "info" : "ExpressionStatement[52735-52742]:ExpressionStatement[52841-52848]"
    }, {
      "left" : "for (int i = 0; i < mant.length + 1; i++)",
      "right" : "for (int i = 0; i < mant.length + 1; i++)",
      "info" : "ForStatement[52795-53024]:ForStatement[52901-53130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52837-53024]:Block[52943-53130]"
    }, {
      "left" : "final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;",
      "right" : "final int r = ((RADIX-1) - remainder[i]) + dividend[i] + rh;",
      "info" : "VariableDeclarationStatement[52859-52919]:VariableDeclarationStatement[52965-53025]"
    }, {
      "left" : "rh = r / RADIX;",
      "right" : "rh = r / RADIX;",
      "info" : "ExpressionStatement[52940-52955]:ExpressionStatement[53046-53061]"
    }, {
      "left" : "remainder[i] = r - rh * RADIX;",
      "right" : "remainder[i] = r - rh * RADIX;",
      "info" : "ExpressionStatement[52976-53006]:ExpressionStatement[53082-53112]"
    }, {
      "left" : "if (rh == 0)",
      "right" : "if (rh == 0)",
      "info" : "IfStatement[53095-53254]:IfStatement[53201-53360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53108-53254]:Block[53214-53360]"
    }, {
      "left" : "max = trial-1;",
      "right" : "max = trial-1;",
      "info" : "ExpressionStatement[53192-53206]:ExpressionStatement[53298-53312]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[53227-53236]:ContinueStatement[53333-53342]"
    }, {
      "left" : "minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];",
      "right" : "minadj = (remainder[mant.length] * RADIX)+remainder[mant.length-1];",
      "info" : "ExpressionStatement[53350-53417]:ExpressionStatement[53456-53523]"
    }, {
      "left" : "minadj = minadj / (divisor.mant[mant.length-1]+1);",
      "right" : "minadj = minadj / (divisor.mant[mant.length-1]+1);",
      "info" : "ExpressionStatement[53434-53484]:ExpressionStatement[53540-53590]"
    }, {
      "left" : "if (minadj >= 2)",
      "right" : "if (minadj >= 2)",
      "info" : "IfStatement[53502-53631]:IfStatement[53608-53737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53519-53631]:Block[53625-53737]"
    }, {
      "left" : "min = trial+minadj;",
      "right" : "min = trial+minadj;",
      "info" : "ExpressionStatement[53541-53560]:ExpressionStatement[53647-53666]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[53604-53613]:ContinueStatement[53710-53719]"
    }, {
      "left" : "trialgood = false;",
      "right" : "trialgood = false;",
      "info" : "ExpressionStatement[53788-53806]:ExpressionStatement[53894-53912]"
    }, {
      "left" : "for (int i = mant.length - 1; i >= 0; i--)",
      "right" : "for (int i = mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[53840-54135]:ForStatement[53946-54241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53883-54135]:Block[53989-54241]"
    }, {
      "left" : "if (divisor.mant[i] > remainder[i])",
      "right" : "if (divisor.mant[i] > remainder[i])",
      "info" : "IfStatement[53905-54006]:IfStatement[54011-54112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53941-54006]:Block[54047-54112]"
    }, {
      "left" : "trialgood = true;",
      "right" : "trialgood = true;",
      "info" : "ExpressionStatement[53967-53984]:ExpressionStatement[54073-54090]"
    }, {
      "left" : "if (divisor.mant[i] < remainder[i])",
      "right" : "if (divisor.mant[i] < remainder[i])",
      "info" : "IfStatement[54027-54117]:IfStatement[54133-54223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54063-54117]:Block[54169-54223]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54089-54095]:BreakStatement[54195-54201]"
    }, {
      "left" : "if (remainder[mant.length] != 0)",
      "right" : "if (remainder[mant.length] != 0)",
      "info" : "IfStatement[54153-54244]:IfStatement[54259-54350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54186-54244]:Block[54292-54350]"
    }, {
      "left" : "trialgood = false;",
      "right" : "trialgood = false;",
      "info" : "ExpressionStatement[54208-54226]:ExpressionStatement[54314-54332]"
    }, {
      "left" : "if (trialgood == false)",
      "right" : "if (trialgood == false)",
      "info" : "IfStatement[54262-54340]:IfStatement[54368-54446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54286-54340]:Block[54392-54446]"
    }, {
      "left" : "min = trial+1;",
      "right" : "min = trial+1;",
      "info" : "ExpressionStatement[54308-54322]:ExpressionStatement[54414-54428]"
    }, {
      "left" : "quotient[qd] = trial;",
      "right" : "quotient[qd] = trial;",
      "info" : "ExpressionStatement[54409-54430]:ExpressionStatement[54515-54536]"
    }, {
      "left" : "if (trial != 0 || nsqd != 0)",
      "right" : "if (trial != 0 || nsqd != 0)",
      "info" : "IfStatement[54443-54511]:IfStatement[54549-54617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54472-54511]:Block[54578-54617]"
    }, {
      "left" : "nsqd++;",
      "right" : "nsqd++;",
      "info" : "ExpressionStatement[54490-54497]:ExpressionStatement[54596-54603]"
    }, {
      "left" : "if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length)",
      "right" : "if (field.getRoundingMode() == DfpField.RoundingMode.ROUND_DOWN && nsqd == mant.length)",
      "info" : "IfStatement[54525-54699]:IfStatement[54631-54805]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54613-54699]:Block[54719-54805]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54679-54685]:BreakStatement[54785-54791]"
    }, {
      "left" : "if (nsqd > mant.length)",
      "right" : "if (nsqd > mant.length)",
      "info" : "IfStatement[54713-54816]:IfStatement[54819-54922]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54737-54816]:Block[54843-54922]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[54796-54802]:BreakStatement[54902-54908]"
    }, {
      "left" : "dividend[0] = 0;",
      "right" : "dividend[0] = 0;",
      "info" : "ExpressionStatement[54905-54921]:ExpressionStatement[55011-55027]"
    }, {
      "left" : "for (int i = 0; i < mant.length; i++)",
      "right" : "for (int i = 0; i < mant.length; i++)",
      "info" : "ForStatement[54934-55035]:ForStatement[55040-55141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54972-55035]:Block[55078-55141]"
    }, {
      "left" : "dividend[i + 1] = remainder[i];",
      "right" : "dividend[i + 1] = remainder[i];",
      "info" : "ExpressionStatement[54990-55021]:ExpressionStatement[55096-55127]"
    }, {
      "left" : "md = mant.length;",
      "right" : "md = mant.length;",
      "info" : "ExpressionStatement[55093-55110]:ExpressionStatement[55199-55216]"
    }, {
      "left" : "for (int i = mant.length + 1; i >= 0; i--)",
      "right" : "for (int i = mant.length + 1; i >= 0; i--)",
      "info" : "ForStatement[55131-55282]:ForStatement[55237-55388]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55174-55282]:Block[55280-55388]"
    }, {
      "left" : "if (quotient[i] != 0)",
      "right" : "if (quotient[i] != 0)",
      "info" : "IfStatement[55188-55272]:IfStatement[55294-55378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55210-55272]:Block[55316-55378]"
    }, {
      "left" : "md = i;",
      "right" : "md = i;",
      "info" : "ExpressionStatement[55228-55235]:ExpressionStatement[55334-55341]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55252-55258]:BreakStatement[55358-55364]"
    }, {
      "left" : "for (int i=0; i<mant.length; i++)",
      "right" : "for (int i=0; i<mant.length; i++)",
      "info" : "ForStatement[55338-55442]:ForStatement[55444-55548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55372-55442]:Block[55478-55548]"
    }, {
      "left" : "result.mant[mant.length-i-1] = quotient[md-i];",
      "right" : "result.mant[mant.length-i-1] = quotient[md-i];",
      "info" : "ExpressionStatement[55386-55432]:ExpressionStatement[55492-55538]"
    }, {
      "left" : "result.exp = exp - divisor.exp + md - mant.length;",
      "right" : "result.exp = exp - divisor.exp + md - mant.length;",
      "info" : "ExpressionStatement[55486-55536]:ExpressionStatement[55592-55642]"
    }, {
      "left" : "result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);",
      "right" : "result.sign = (byte) ((sign == divisor.sign) ? 1 : -1);",
      "info" : "ExpressionStatement[55545-55600]:ExpressionStatement[55651-55706]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[55610-55724]:IfStatement[55716-55830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55647-55724]:Block[55753-55830]"
    }, {
      "left" : "result.exp = 0;",
      "right" : "result.exp = 0;",
      "info" : "ExpressionStatement[55699-55714]:ExpressionStatement[55805-55820]"
    }, {
      "left" : "if (md > (mant.length-1))",
      "right" : "if (md > (mant.length-1))",
      "info" : "IfStatement[55734-55883]:IfStatement[55840-55989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55760-55830]:Block[55866-55936]"
    }, {
      "left" : "excp = result.round(quotient[md-mant.length]);",
      "right" : "excp = result.round(quotient[md-mant.length]);",
      "info" : "ExpressionStatement[55774-55820]:ExpressionStatement[55880-55926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55836-55883]:Block[55942-55989]"
    }, {
      "left" : "excp = result.round(0);",
      "right" : "excp = result.round(0);",
      "info" : "ExpressionStatement[55850-55873]:ExpressionStatement[55956-55979]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[55893-55984]:IfStatement[55999-56090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55908-55984]:Block[56014-56090]"
    }, {
      "left" : "result = dotrap(excp, DIVIDE_TRAP, divisor, result);",
      "right" : "result = dotrap(excp, DIVIDE_TRAP, divisor, result);",
      "info" : "ExpressionStatement[55922-55974]:ExpressionStatement[56028-56080]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[55994-56008]:ReturnStatement[56100-56114]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[56231-56237]:Modifier[56337-56343]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[56238-56241]:SimpleType[56344-56347]"
    }, {
      "left" : "divide",
      "right" : "divide",
      "info" : "SimpleName[56242-56248]:SimpleName[56348-56354]"
    }, {
      "left" : "int divisor",
      "right" : "int divisor",
      "info" : "SingleVariableDeclaration[56249-56260]:SingleVariableDeclaration[56355-56366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56262-58003]:Block[56368-58109]"
    }, {
      "left" : "if (nans != FINITE)",
      "right" : "if (nans != FINITE)",
      "info" : "IfStatement[56305-56499]:IfStatement[56411-56605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56325-56499]:Block[56431-56605]"
    }, {
      "left" : "if (isNaN())",
      "right" : "if (isNaN())",
      "info" : "IfStatement[56339-56396]:IfStatement[56445-56502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56352-56396]:Block[56458-56502]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[56370-56382]:ReturnStatement[56476-56488]"
    }, {
      "left" : "if (nans == INFINITE)",
      "right" : "if (nans == INFINITE)",
      "info" : "IfStatement[56410-56489]:IfStatement[56516-56595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56432-56489]:Block[56538-56595]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[56450-56475]:ReturnStatement[56556-56581]"
    }, {
      "left" : "if (divisor == 0)",
      "right" : "if (divisor == 0)",
      "info" : "IfStatement[56544-56862]:IfStatement[56650-56968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56562-56862]:Block[56668-56968]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_DIV_ZERO);",
      "info" : "ExpressionStatement[56576-56623]:ExpressionStatement[56682-56729]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[56636-56672]:VariableDeclarationStatement[56742-56778]"
    }, {
      "left" : "result.sign = sign;",
      "right" : "result.sign = sign;",
      "info" : "ExpressionStatement[56685-56704]:ExpressionStatement[56791-56810]"
    }, {
      "left" : "result.nans = INFINITE;",
      "right" : "result.nans = INFINITE;",
      "info" : "ExpressionStatement[56717-56740]:ExpressionStatement[56823-56846]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",
      "right" : "result = dotrap(DfpField.FLAG_DIV_ZERO, DIVIDE_TRAP, getZero(), result);",
      "info" : "ExpressionStatement[56753-56825]:ExpressionStatement[56859-56931]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[56838-56852]:ReturnStatement[56944-56958]"
    }, {
      "left" : "if (divisor < 0 || divisor >= RADIX)",
      "right" : "if (divisor < 0 || divisor >= RADIX)",
      "info" : "IfStatement[56903-57199]:IfStatement[57009-57305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[56940-57199]:Block[57046-57305]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[56954-57000]:ExpressionStatement[57060-57106]"
    }, {
      "left" : "Dfp result = newInstance(getZero());",
      "right" : "Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[57013-57049]:VariableDeclarationStatement[57119-57155]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[57062-57081]:ExpressionStatement[57168-57187]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, DIVIDE_TRAP, result, result);",
      "info" : "ExpressionStatement[57094-57162]:ExpressionStatement[57200-57268]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[57175-57189]:ReturnStatement[57281-57295]"
    }, {
      "left" : "Dfp result = newInstance(this);",
      "right" : "Dfp result = newInstance(this);",
      "info" : "VariableDeclarationStatement[57209-57240]:VariableDeclarationStatement[57315-57346]"
    }, {
      "left" : "int rl = 0;",
      "right" : "int rl = 0;",
      "info" : "VariableDeclarationStatement[57250-57261]:VariableDeclarationStatement[57356-57367]"
    }, {
      "left" : "for (int i = mant.length-1; i >= 0; i--)",
      "right" : "for (int i = mant.length-1; i >= 0; i--)",
      "info" : "ForStatement[57270-57483]:ForStatement[57376-57589]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57311-57483]:Block[57417-57589]"
    }, {
      "left" : "final int r = rl*RADIX + result.mant[i];",
      "right" : "final int r = rl*RADIX + result.mant[i];",
      "info" : "VariableDeclarationStatement[57325-57365]:VariableDeclarationStatement[57431-57471]"
    }, {
      "left" : "final int rh = r / divisor;",
      "right" : "final int rh = r / divisor;",
      "info" : "VariableDeclarationStatement[57378-57405]:VariableDeclarationStatement[57484-57511]"
    }, {
      "left" : "rl = r - rh * divisor;",
      "right" : "rl = r - rh * divisor;",
      "info" : "ExpressionStatement[57418-57440]:ExpressionStatement[57524-57546]"
    }, {
      "left" : "result.mant[i] = rh;",
      "right" : "result.mant[i] = rh;",
      "info" : "ExpressionStatement[57453-57473]:ExpressionStatement[57559-57579]"
    }, {
      "left" : "if (result.mant[mant.length-1] == 0)",
      "right" : "if (result.mant[mant.length-1] == 0)",
      "info" : "IfStatement[57493-57791]:IfStatement[57599-57897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57530-57791]:Block[57636-57897]"
    }, {
      "left" : "result.shiftLeft();",
      "right" : "result.shiftLeft();",
      "info" : "ExpressionStatement[57569-57588]:ExpressionStatement[57675-57694]"
    }, {
      "left" : "final int r = rl * RADIX;",
      "right" : "final int r = rl * RADIX;",
      "info" : "VariableDeclarationStatement[57601-57626]:VariableDeclarationStatement[57707-57732]"
    }, {
      "left" : "final int rh = r / divisor;",
      "right" : "final int rh = r / divisor;",
      "info" : "VariableDeclarationStatement[57686-57713]:VariableDeclarationStatement[57792-57819]"
    }, {
      "left" : "rl = r - rh * divisor;",
      "right" : "rl = r - rh * divisor;",
      "info" : "ExpressionStatement[57726-57748]:ExpressionStatement[57832-57854]"
    }, {
      "left" : "result.mant[0] = rh;",
      "right" : "result.mant[0] = rh;",
      "info" : "ExpressionStatement[57761-57781]:ExpressionStatement[57867-57887]"
    }, {
      "left" : "final int excp = result.round(rl * RADIX / divisor);",
      "right" : "final int excp = result.round(rl * RADIX / divisor);",
      "info" : "VariableDeclarationStatement[57801-57853]:VariableDeclarationStatement[57907-57959]"
    }, {
      "left" : "if (excp != 0)",
      "right" : "if (excp != 0)",
      "info" : "IfStatement[57882-57972]:IfStatement[57988-58078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57897-57972]:Block[58003-58078]"
    }, {
      "left" : "result = dotrap(excp, DIVIDE_TRAP, result, result);",
      "right" : "result = dotrap(excp, DIVIDE_TRAP, result, result);",
      "info" : "ExpressionStatement[57911-57962]:ExpressionStatement[58017-58068]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[57982-57996]:ReturnStatement[58088-58102]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[58093-58099]:Modifier[58199-58205]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[58100-58103]:SimpleType[58206-58209]"
    }, {
      "left" : "sqrt",
      "right" : "sqrt",
      "info" : "SimpleName[58104-58108]:SimpleName[58210-58214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58111-60642]:Block[58217-60748]"
    }, {
      "left" : "if (nans == FINITE && mant[mant.length-1] == 0)",
      "right" : "if (nans == FINITE && mant[mant.length-1] == 0)",
      "info" : "IfStatement[58157-58277]:IfStatement[58263-58383]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58205-58277]:Block[58311-58383]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[58242-58267]:ReturnStatement[58348-58373]"
    }, {
      "left" : "if (nans != FINITE)",
      "right" : "if (nans != FINITE)",
      "info" : "IfStatement[58287-58847]:IfStatement[58393-58953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58307-58847]:Block[58413-58953]"
    }, {
      "left" : "if (nans == INFINITE && sign == 1)",
      "right" : "if (nans == INFINITE && sign == 1)",
      "info" : "IfStatement[58321-58453]:IfStatement[58427-58559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58356-58453]:Block[58462-58559]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[58414-58439]:ReturnStatement[58520-58545]"
    }, {
      "left" : "if (nans == QNAN)",
      "right" : "if (nans == QNAN)",
      "info" : "IfStatement[58467-58542]:IfStatement[58573-58648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58485-58542]:Block[58591-58648]"
    }, {
      "left" : "return newInstance(this);",
      "right" : "return newInstance(this);",
      "info" : "ReturnStatement[58503-58528]:ReturnStatement[58609-58634]"
    }, {
      "left" : "if (nans == SNAN)",
      "right" : "if (nans == SNAN)",
      "info" : "IfStatement[58556-58837]:IfStatement[58662-58943]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58574-58837]:Block[58680-58943]"
    }, {
      "left" : "Dfp result;",
      "right" : "Dfp result;",
      "info" : "VariableDeclarationStatement[58592-58603]:VariableDeclarationStatement[58698-58709]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[58621-58667]:ExpressionStatement[58727-58773]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[58684-58711]:ExpressionStatement[58790-58817]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",
      "info" : "ExpressionStatement[58728-58792]:ExpressionStatement[58834-58898]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[58809-58823]:ReturnStatement[58915-58929]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[58857-59171]:IfStatement[58963-59277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58873-59171]:Block[58979-59277]"
    }, {
      "left" : "Dfp result;",
      "right" : "Dfp result;",
      "info" : "VariableDeclarationStatement[58914-58925]:VariableDeclarationStatement[59020-59031]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[58939-58985]:ExpressionStatement[59045-59091]"
    }, {
      "left" : "result = newInstance(this);",
      "right" : "result = newInstance(this);",
      "info" : "ExpressionStatement[58998-59025]:ExpressionStatement[59104-59131]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[59038-59057]:ExpressionStatement[59144-59163]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",
      "right" : "result = dotrap(DfpField.FLAG_INVALID, SQRT_TRAP, null, result);",
      "info" : "ExpressionStatement[59070-59134]:ExpressionStatement[59176-59240]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[59147-59161]:ReturnStatement[59253-59267]"
    }, {
      "left" : "Dfp x = newInstance(this);",
      "right" : "Dfp x = newInstance(this);",
      "info" : "VariableDeclarationStatement[59181-59207]:VariableDeclarationStatement[59287-59313]"
    }, {
      "left" : "if (x.exp < -1 || x.exp > 1)",
      "right" : "if (x.exp < -1 || x.exp > 1)",
      "info" : "IfStatement[59294-59368]:IfStatement[59400-59474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59323-59368]:Block[59429-59474]"
    }, {
      "left" : "x.exp = this.exp / 2;",
      "right" : "x.exp = this.exp / 2;",
      "info" : "ExpressionStatement[59337-59358]:ExpressionStatement[59443-59464]"
    }, {
      "left" : "switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }",
      "right" : "switch (x.mant[mant.length-1] / 2000) {\n            case 0:\n                x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;\n                break;\n            case 2:\n                x.mant[mant.length-1] = 1500;\n                break;\n            case 3:\n                x.mant[mant.length-1] = 2200;\n                break;\n            default:\n                x.mant[mant.length-1] = 3000;\n        }",
      "info" : "SwitchStatement[59423-59827]:SwitchStatement[59529-59933]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[59475-59482]:SwitchCase[59581-59588]"
    }, {
      "left" : "x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;",
      "right" : "x.mant[mant.length-1] = x.mant[mant.length-1]/2+1;",
      "info" : "ExpressionStatement[59499-59549]:ExpressionStatement[59605-59655]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59566-59572]:BreakStatement[59672-59678]"
    }, {
      "left" : "case 2:",
      "right" : "case 2:",
      "info" : "SwitchCase[59585-59592]:SwitchCase[59691-59698]"
    }, {
      "left" : "x.mant[mant.length-1] = 1500;",
      "right" : "x.mant[mant.length-1] = 1500;",
      "info" : "ExpressionStatement[59609-59638]:ExpressionStatement[59715-59744]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59655-59661]:BreakStatement[59761-59767]"
    }, {
      "left" : "case 3:",
      "right" : "case 3:",
      "info" : "SwitchCase[59674-59681]:SwitchCase[59780-59787]"
    }, {
      "left" : "x.mant[mant.length-1] = 2200;",
      "right" : "x.mant[mant.length-1] = 2200;",
      "info" : "ExpressionStatement[59698-59727]:ExpressionStatement[59804-59833]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[59744-59750]:BreakStatement[59850-59856]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[59763-59771]:SwitchCase[59869-59877]"
    }, {
      "left" : "x.mant[mant.length-1] = 3000;",
      "right" : "x.mant[mant.length-1] = 3000;",
      "info" : "ExpressionStatement[59788-59817]:ExpressionStatement[59894-59923]"
    }, {
      "left" : "Dfp dx = newInstance(x);",
      "right" : "Dfp dx = newInstance(x);",
      "info" : "VariableDeclarationStatement[59837-59861]:VariableDeclarationStatement[59943-59967]"
    }, {
      "left" : "Dfp px  = getZero();",
      "right" : "Dfp px  = getZero();",
      "info" : "VariableDeclarationStatement[59990-60010]:VariableDeclarationStatement[60096-60116]"
    }, {
      "left" : "Dfp ppx = getZero();",
      "right" : "Dfp ppx = getZero();",
      "info" : "VariableDeclarationStatement[60019-60039]:VariableDeclarationStatement[60125-60145]"
    }, {
      "left" : "while (x.unequal(px))",
      "right" : "while (x.unequal(px))",
      "info" : "WhileStatement[60048-60616]:WhileStatement[60154-60722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60070-60616]:Block[60176-60722]"
    }, {
      "left" : "dx = newInstance(x);",
      "right" : "dx = newInstance(x);",
      "info" : "ExpressionStatement[60084-60104]:ExpressionStatement[60190-60210]"
    }, {
      "left" : "dx.sign = -1;",
      "right" : "dx.sign = -1;",
      "info" : "ExpressionStatement[60117-60130]:ExpressionStatement[60223-60236]"
    }, {
      "left" : "dx = dx.add(this.divide(x));",
      "right" : "dx = dx.add(this.divide(x));",
      "info" : "ExpressionStatement[60143-60171]:ExpressionStatement[60249-60277]"
    }, {
      "left" : "dx = dx.divide(2);",
      "right" : "dx = dx.divide(2);",
      "info" : "ExpressionStatement[60184-60202]:ExpressionStatement[60290-60308]"
    }, {
      "left" : "ppx = px;",
      "right" : "ppx = px;",
      "info" : "ExpressionStatement[60215-60224]:ExpressionStatement[60321-60330]"
    }, {
      "left" : "px = x;",
      "right" : "px = x;",
      "info" : "ExpressionStatement[60237-60244]:ExpressionStatement[60343-60350]"
    }, {
      "left" : "x = x.add(dx);",
      "right" : "x = x.add(dx);",
      "info" : "ExpressionStatement[60257-60271]:ExpressionStatement[60363-60377]"
    }, {
      "left" : "if (x.equals(ppx))",
      "right" : "if (x.equals(ppx))",
      "info" : "IfStatement[60285-60392]:IfStatement[60391-60498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60304-60392]:Block[60410-60498]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60372-60378]:BreakStatement[60478-60484]"
    }, {
      "left" : "if (dx.mant[mant.length-1] == 0)",
      "right" : "if (dx.mant[mant.length-1] == 0)",
      "info" : "IfStatement[60535-60606]:IfStatement[60641-60712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60568-60606]:Block[60674-60712]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[60586-60592]:BreakStatement[60692-60698]"
    }, {
      "left" : "return x;",
      "right" : "return x;",
      "info" : "ReturnStatement[60626-60635]:ReturnStatement[60732-60741]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[60762-60771]:MarkerAnnotation[60868-60877]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[60776-60782]:Modifier[60882-60888]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[60783-60789]:SimpleType[60889-60895]"
    }, {
      "left" : "toString",
      "right" : "toString",
      "info" : "SimpleName[60790-60798]:SimpleName[60896-60904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60801-61197]:Block[60907-61303]"
    }, {
      "left" : "if (nans != FINITE)",
      "right" : "if (nans != FINITE)",
      "info" : "IfStatement[60811-61074]:IfStatement[60917-61180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60831-61074]:Block[60937-61180]"
    }, {
      "left" : "if (nans == INFINITE)",
      "right" : "if (nans == INFINITE)",
      "info" : "IfStatement[60892-61064]:IfStatement[60998-61170]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60914-61008]:Block[61020-61114]"
    }, {
      "left" : "return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;",
      "right" : "return (sign < 0) ? NEG_INFINITY_STRING : POS_INFINITY_STRING;",
      "info" : "ReturnStatement[60932-60994]:ReturnStatement[61038-61100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61014-61064]:Block[61120-61170]"
    }, {
      "left" : "return NAN_STRING;",
      "right" : "return NAN_STRING;",
      "info" : "ReturnStatement[61032-61050]:ReturnStatement[61138-61156]"
    }, {
      "left" : "if (exp > mant.length || exp < -1)",
      "right" : "if (exp > mant.length || exp < -1)",
      "info" : "IfStatement[61084-61160]:IfStatement[61190-61266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61119-61160]:Block[61225-61266]"
    }, {
      "left" : "return dfp2sci();",
      "right" : "return dfp2sci();",
      "info" : "ReturnStatement[61133-61150]:ReturnStatement[61239-61256]"
    }, {
      "left" : "return dfp2string();",
      "right" : "return dfp2string();",
      "info" : "ReturnStatement[61170-61190]:ReturnStatement[61276-61296]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[61354-61363]:Modifier[61460-61469]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[61364-61370]:SimpleType[61470-61476]"
    }, {
      "left" : "dfp2sci",
      "right" : "dfp2sci",
      "info" : "SimpleName[61371-61378]:SimpleName[61477-61484]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61381-63369]:Block[61487-63475]"
    }, {
      "left" : "char rawdigits[]    = new char[mant.length * 4];",
      "right" : "char rawdigits[]    = new char[mant.length * 4];",
      "info" : "VariableDeclarationStatement[61391-61439]:VariableDeclarationStatement[61497-61545]"
    }, {
      "left" : "char outputbuffer[] = new char[mant.length * 4 + 20];",
      "right" : "char outputbuffer[] = new char[mant.length * 4 + 20];",
      "info" : "VariableDeclarationStatement[61448-61501]:VariableDeclarationStatement[61554-61607]"
    }, {
      "left" : "int p;",
      "right" : "int p;",
      "info" : "VariableDeclarationStatement[61510-61516]:VariableDeclarationStatement[61616-61622]"
    }, {
      "left" : "int q;",
      "right" : "int q;",
      "info" : "VariableDeclarationStatement[61525-61531]:VariableDeclarationStatement[61631-61637]"
    }, {
      "left" : "int e;",
      "right" : "int e;",
      "info" : "VariableDeclarationStatement[61540-61546]:VariableDeclarationStatement[61646-61652]"
    }, {
      "left" : "int ae;",
      "right" : "int ae;",
      "info" : "VariableDeclarationStatement[61555-61562]:VariableDeclarationStatement[61661-61668]"
    }, {
      "left" : "int shf;",
      "right" : "int shf;",
      "info" : "VariableDeclarationStatement[61571-61579]:VariableDeclarationStatement[61677-61685]"
    }, {
      "left" : "p = 0;",
      "right" : "p = 0;",
      "info" : "ExpressionStatement[61619-61625]:ExpressionStatement[61725-61731]"
    }, {
      "left" : "for (int i = mant.length - 1; i >= 0; i--)",
      "right" : "for (int i = mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[61634-61946]:ForStatement[61740-62052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61677-61946]:Block[61783-62052]"
    }, {
      "left" : "rawdigits[p++] = (char) ((mant[i] / 1000) + '0');",
      "right" : "rawdigits[p++] = (char) ((mant[i] / 1000) + '0');",
      "info" : "ExpressionStatement[61691-61740]:ExpressionStatement[61797-61846]"
    }, {
      "left" : "rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');",
      "right" : "rawdigits[p++] = (char) (((mant[i] / 100) %10) + '0');",
      "info" : "ExpressionStatement[61753-61807]:ExpressionStatement[61859-61913]"
    }, {
      "left" : "rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');",
      "right" : "rawdigits[p++] = (char) (((mant[i] / 10) % 10) + '0');",
      "info" : "ExpressionStatement[61820-61874]:ExpressionStatement[61926-61980]"
    }, {
      "left" : "rawdigits[p++] = (char) (((mant[i]) % 10) + '0');",
      "right" : "rawdigits[p++] = (char) (((mant[i]) % 10) + '0');",
      "info" : "ExpressionStatement[61887-61936]:ExpressionStatement[61993-62042]"
    }, {
      "left" : "for (p = 0; p < rawdigits.length; p++)",
      "right" : "for (p = 0; p < rawdigits.length; p++)",
      "info" : "ForStatement[61995-62121]:ForStatement[62101-62227]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62034-62121]:Block[62140-62227]"
    }, {
      "left" : "if (rawdigits[p] != '0')",
      "right" : "if (rawdigits[p] != '0')",
      "info" : "IfStatement[62048-62111]:IfStatement[62154-62217]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62073-62111]:Block[62179-62217]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[62091-62097]:BreakStatement[62197-62203]"
    }, {
      "left" : "shf = p;",
      "right" : "shf = p;",
      "info" : "ExpressionStatement[62130-62138]:ExpressionStatement[62236-62244]"
    }, {
      "left" : "q = 0;",
      "right" : "q = 0;",
      "info" : "ExpressionStatement[62181-62187]:ExpressionStatement[62287-62293]"
    }, {
      "left" : "if (sign == -1)",
      "right" : "if (sign == -1)",
      "info" : "IfStatement[62196-62260]:IfStatement[62302-62366]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62212-62260]:Block[62318-62366]"
    }, {
      "left" : "outputbuffer[q++] = '-';",
      "right" : "outputbuffer[q++] = '-';",
      "info" : "ExpressionStatement[62226-62250]:ExpressionStatement[62332-62356]"
    }, {
      "left" : "if (p != rawdigits.length)",
      "right" : "if (p != rawdigits.length)",
      "info" : "IfStatement[62270-62798]:IfStatement[62376-62904]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62297-62545]:Block[62403-62651]"
    }, {
      "left" : "outputbuffer[q++] = rawdigits[p++];",
      "right" : "outputbuffer[q++] = rawdigits[p++];",
      "info" : "ExpressionStatement[62355-62390]:ExpressionStatement[62461-62496]"
    }, {
      "left" : "outputbuffer[q++] = '.';",
      "right" : "outputbuffer[q++] = '.';",
      "info" : "ExpressionStatement[62403-62427]:ExpressionStatement[62509-62533]"
    }, {
      "left" : "while (p<rawdigits.length)",
      "right" : "while (p<rawdigits.length)",
      "info" : "WhileStatement[62441-62535]:WhileStatement[62547-62641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62468-62535]:Block[62574-62641]"
    }, {
      "left" : "outputbuffer[q++] = rawdigits[p++];",
      "right" : "outputbuffer[q++] = rawdigits[p++];",
      "info" : "ExpressionStatement[62486-62521]:ExpressionStatement[62592-62627]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62551-62798]:Block[62657-62904]"
    }, {
      "left" : "outputbuffer[q++] = '0';",
      "right" : "outputbuffer[q++] = '0';",
      "info" : "ExpressionStatement[62565-62589]:ExpressionStatement[62671-62695]"
    }, {
      "left" : "outputbuffer[q++] = '.';",
      "right" : "outputbuffer[q++] = '.';",
      "info" : "ExpressionStatement[62602-62626]:ExpressionStatement[62708-62732]"
    }, {
      "left" : "outputbuffer[q++] = '0';",
      "right" : "outputbuffer[q++] = '0';",
      "info" : "ExpressionStatement[62639-62663]:ExpressionStatement[62745-62769]"
    }, {
      "left" : "outputbuffer[q++] = 'e';",
      "right" : "outputbuffer[q++] = 'e';",
      "info" : "ExpressionStatement[62676-62700]:ExpressionStatement[62782-62806]"
    }, {
      "left" : "outputbuffer[q++] = '0';",
      "right" : "outputbuffer[q++] = '0';",
      "info" : "ExpressionStatement[62713-62737]:ExpressionStatement[62819-62843]"
    }, {
      "left" : "return new String(outputbuffer, 0, 5);",
      "right" : "return new String(outputbuffer, 0, 5);",
      "info" : "ReturnStatement[62750-62788]:ReturnStatement[62856-62894]"
    }, {
      "left" : "outputbuffer[q++] = 'e';",
      "right" : "outputbuffer[q++] = 'e';",
      "info" : "ExpressionStatement[62808-62832]:ExpressionStatement[62914-62938]"
    }, {
      "left" : "e = exp * 4 - shf - 1;",
      "right" : "e = exp * 4 - shf - 1;",
      "info" : "ExpressionStatement[62883-62905]:ExpressionStatement[62989-63011]"
    }, {
      "left" : "ae = e;",
      "right" : "ae = e;",
      "info" : "ExpressionStatement[62914-62921]:ExpressionStatement[63020-63027]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[62930-62973]:IfStatement[63036-63079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62941-62973]:Block[63047-63079]"
    }, {
      "left" : "ae = -e;",
      "right" : "ae = -e;",
      "info" : "ExpressionStatement[62955-62963]:ExpressionStatement[63061-63069]"
    }, {
      "left" : "for (p = 1000000000; p > ae; p /= 10)",
      "right" : "for (p = 1000000000; p > ae; p /= 10)",
      "info" : "ForStatement[63029-63107]:ForStatement[63135-63213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63067-63107]:Block[63173-63213]"
    }, {
      "left" : "if (e < 0)",
      "right" : "if (e < 0)",
      "info" : "IfStatement[63117-63176]:IfStatement[63223-63282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63128-63176]:Block[63234-63282]"
    }, {
      "left" : "outputbuffer[q++] = '-';",
      "right" : "outputbuffer[q++] = '-';",
      "info" : "ExpressionStatement[63142-63166]:ExpressionStatement[63248-63272]"
    }, {
      "left" : "while (p > 0)",
      "right" : "while (p > 0)",
      "info" : "WhileStatement[63186-63314]:WhileStatement[63292-63420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63200-63314]:Block[63306-63420]"
    }, {
      "left" : "outputbuffer[q++] = (char)(ae / p + '0');",
      "right" : "outputbuffer[q++] = (char)(ae / p + '0');",
      "info" : "ExpressionStatement[63214-63255]:ExpressionStatement[63320-63361]"
    }, {
      "left" : "ae = ae % p;",
      "right" : "ae = ae % p;",
      "info" : "ExpressionStatement[63268-63280]:ExpressionStatement[63374-63386]"
    }, {
      "left" : "p = p / 10;",
      "right" : "p = p / 10;",
      "info" : "ExpressionStatement[63293-63304]:ExpressionStatement[63399-63410]"
    }, {
      "left" : "return new String(outputbuffer, 0, q);",
      "right" : "return new String(outputbuffer, 0, q);",
      "info" : "ReturnStatement[63324-63362]:ReturnStatement[63430-63468]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[63518-63527]:Modifier[63624-63633]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[63528-63534]:SimpleType[63634-63640]"
    }, {
      "left" : "dfp2string",
      "right" : "dfp2string",
      "info" : "SimpleName[63535-63545]:SimpleName[63641-63651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63548-65160]:Block[63654-65266]"
    }, {
      "left" : "char buffer[] = new char[mant.length*4 + 20];",
      "right" : "char buffer[] = new char[mant.length*4 + 20];",
      "info" : "VariableDeclarationStatement[63558-63603]:VariableDeclarationStatement[63664-63709]"
    }, {
      "left" : "int p = 1;",
      "right" : "int p = 1;",
      "info" : "VariableDeclarationStatement[63612-63622]:VariableDeclarationStatement[63718-63728]"
    }, {
      "left" : "int q;",
      "right" : "int q;",
      "info" : "VariableDeclarationStatement[63631-63637]:VariableDeclarationStatement[63737-63743]"
    }, {
      "left" : "int e = exp;",
      "right" : "int e = exp;",
      "info" : "VariableDeclarationStatement[63646-63658]:VariableDeclarationStatement[63752-63764]"
    }, {
      "left" : "boolean pointInserted = false;",
      "right" : "boolean pointInserted = false;",
      "info" : "VariableDeclarationStatement[63667-63697]:VariableDeclarationStatement[63773-63803]"
    }, {
      "left" : "buffer[0] = ' ';",
      "right" : "buffer[0] = ' ';",
      "info" : "ExpressionStatement[63707-63723]:ExpressionStatement[63813-63829]"
    }, {
      "left" : "if (e <= 0)",
      "right" : "if (e <= 0)",
      "info" : "IfStatement[63733-63852]:IfStatement[63839-63958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63745-63852]:Block[63851-63958]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[63759-63777]:ExpressionStatement[63865-63883]"
    }, {
      "left" : "buffer[p++] = '.';",
      "right" : "buffer[p++] = '.';",
      "info" : "ExpressionStatement[63790-63808]:ExpressionStatement[63896-63914]"
    }, {
      "left" : "pointInserted = true;",
      "right" : "pointInserted = true;",
      "info" : "ExpressionStatement[63821-63842]:ExpressionStatement[63927-63948]"
    }, {
      "left" : "while (e < 0)",
      "right" : "while (e < 0)",
      "info" : "WhileStatement[63862-64028]:WhileStatement[63968-64134]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63876-64028]:Block[63982-64134]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[63890-63908]:ExpressionStatement[63996-64014]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[63921-63939]:ExpressionStatement[64027-64045]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[63952-63970]:ExpressionStatement[64058-64076]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[63983-64001]:ExpressionStatement[64089-64107]"
    }, {
      "left" : "e++;",
      "right" : "e++;",
      "info" : "ExpressionStatement[64014-64018]:ExpressionStatement[64120-64124]"
    }, {
      "left" : "for (int i = mant.length - 1; i >= 0; i--)",
      "right" : "for (int i = mant.length - 1; i >= 0; i--)",
      "info" : "ForStatement[64038-64454]:ForStatement[64144-64560]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64081-64454]:Block[64187-64560]"
    }, {
      "left" : "buffer[p++] = (char) ((mant[i] / 1000) + '0');",
      "right" : "buffer[p++] = (char) ((mant[i] / 1000) + '0');",
      "info" : "ExpressionStatement[64095-64141]:ExpressionStatement[64201-64247]"
    }, {
      "left" : "buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');",
      "right" : "buffer[p++] = (char) (((mant[i] / 100) % 10) + '0');",
      "info" : "ExpressionStatement[64154-64206]:ExpressionStatement[64260-64312]"
    }, {
      "left" : "buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');",
      "right" : "buffer[p++] = (char) (((mant[i] / 10) % 10) + '0');",
      "info" : "ExpressionStatement[64219-64270]:ExpressionStatement[64325-64376]"
    }, {
      "left" : "buffer[p++] = (char) (((mant[i]) % 10) + '0');",
      "right" : "buffer[p++] = (char) (((mant[i]) % 10) + '0');",
      "info" : "ExpressionStatement[64283-64329]:ExpressionStatement[64389-64435]"
    }, {
      "left" : "if (--e == 0)",
      "right" : "if (--e == 0)",
      "info" : "IfStatement[64342-64444]:IfStatement[64448-64550]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64356-64444]:Block[64462-64550]"
    }, {
      "left" : "buffer[p++] = '.';",
      "right" : "buffer[p++] = '.';",
      "info" : "ExpressionStatement[64374-64392]:ExpressionStatement[64480-64498]"
    }, {
      "left" : "pointInserted = true;",
      "right" : "pointInserted = true;",
      "info" : "ExpressionStatement[64409-64430]:ExpressionStatement[64515-64536]"
    }, {
      "left" : "while (e > 0)",
      "right" : "while (e > 0)",
      "info" : "WhileStatement[64464-64630]:WhileStatement[64570-64736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64478-64630]:Block[64584-64736]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[64492-64510]:ExpressionStatement[64598-64616]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[64523-64541]:ExpressionStatement[64629-64647]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[64554-64572]:ExpressionStatement[64660-64678]"
    }, {
      "left" : "buffer[p++] = '0';",
      "right" : "buffer[p++] = '0';",
      "info" : "ExpressionStatement[64585-64603]:ExpressionStatement[64691-64709]"
    }, {
      "left" : "e--;",
      "right" : "e--;",
      "info" : "ExpressionStatement[64616-64620]:ExpressionStatement[64722-64726]"
    }, {
      "left" : "if (!pointInserted)",
      "right" : "if (!pointInserted)",
      "info" : "IfStatement[64640-64747]:IfStatement[64746-64853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64660-64747]:Block[64766-64853]"
    }, {
      "left" : "buffer[p++] = '.';",
      "right" : "buffer[p++] = '.';",
      "info" : "ExpressionStatement[64719-64737]:ExpressionStatement[64825-64843]"
    }, {
      "left" : "q = 1;",
      "right" : "q = 1;",
      "info" : "ExpressionStatement[64791-64797]:ExpressionStatement[64897-64903]"
    }, {
      "left" : "while (buffer[q] == '0')",
      "right" : "while (buffer[q] == '0')",
      "info" : "WhileStatement[64806-64859]:WhileStatement[64912-64965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64831-64859]:Block[64937-64965]"
    }, {
      "left" : "q++;",
      "right" : "q++;",
      "info" : "ExpressionStatement[64845-64849]:ExpressionStatement[64951-64955]"
    }, {
      "left" : "if (buffer[q] == '.')",
      "right" : "if (buffer[q] == '.')",
      "info" : "IfStatement[64868-64918]:IfStatement[64974-65024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64890-64918]:Block[64996-65024]"
    }, {
      "left" : "q--;",
      "right" : "q--;",
      "info" : "ExpressionStatement[64904-64908]:ExpressionStatement[65010-65014]"
    }, {
      "left" : "while (buffer[p-1] == '0')",
      "right" : "while (buffer[p-1] == '0')",
      "info" : "WhileStatement[64963-65018]:WhileStatement[65069-65124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64990-65018]:Block[65096-65124]"
    }, {
      "left" : "p--;",
      "right" : "p--;",
      "info" : "ExpressionStatement[65004-65008]:ExpressionStatement[65110-65114]"
    }, {
      "left" : "if (sign < 0)",
      "right" : "if (sign < 0)",
      "info" : "IfStatement[65051-65107]:IfStatement[65157-65213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65065-65107]:Block[65171-65213]"
    }, {
      "left" : "buffer[--q] = '-';",
      "right" : "buffer[--q] = '-';",
      "info" : "ExpressionStatement[65079-65097]:ExpressionStatement[65185-65203]"
    }, {
      "left" : "return new String(buffer, q, p - q);",
      "right" : "return new String(buffer, q, p - q);",
      "info" : "ReturnStatement[65117-65153]:ReturnStatement[65223-65259]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[65513-65519]:Modifier[65619-65625]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[65520-65523]:SimpleType[65626-65629]"
    }, {
      "left" : "dotrap",
      "right" : "dotrap",
      "info" : "SimpleName[65524-65530]:SimpleName[65630-65636]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[65531-65539]:SingleVariableDeclaration[65637-65645]"
    }, {
      "left" : "String what",
      "right" : "String what",
      "info" : "SingleVariableDeclaration[65541-65552]:SingleVariableDeclaration[65647-65658]"
    }, {
      "left" : "Dfp oper",
      "right" : "Dfp oper",
      "info" : "SingleVariableDeclaration[65554-65562]:SingleVariableDeclaration[65660-65668]"
    }, {
      "left" : "Dfp result",
      "right" : "Dfp result",
      "info" : "SingleVariableDeclaration[65564-65574]:SingleVariableDeclaration[65670-65680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65576-67427]:Block[65682-67533]"
    }, {
      "left" : "Dfp def = result;",
      "right" : "Dfp def = result;",
      "info" : "VariableDeclarationStatement[65586-65603]:VariableDeclarationStatement[65692-65709]"
    }, {
      "left" : "switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp = result.exp + ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp = result.exp - ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }",
      "right" : "switch (type) {\n            case DfpField.FLAG_INVALID:\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = QNAN;\n                break;\n\n            case DfpField.FLAG_DIV_ZERO:\n                if (nans == FINITE && mant[mant.length-1] != 0) {\n                    // normal case, we are finite, non-zero\n                    def = newInstance(getZero());\n                    def.sign = (byte)(sign*oper.sign);\n                    def.nans = INFINITE;\n                }\n\n                if (nans == FINITE && mant[mant.length-1] == 0) {\n                    //  0/0\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == QNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n\n                if (nans == INFINITE || nans == SNAN) {\n                    def = newInstance(getZero());\n                    def.nans = QNAN;\n                }\n                break;\n\n            case DfpField.FLAG_UNDERFLOW:\n                if ( (result.exp+mant.length) < MIN_EXP) {\n                    def = newInstance(getZero());\n                    def.sign = result.sign;\n                } else {\n                    def = newInstance(result);  // gradual underflow\n                }\n                result.exp = result.exp + ERR_SCALE;\n                break;\n\n            case DfpField.FLAG_OVERFLOW:\n                result.exp = result.exp - ERR_SCALE;\n                def = newInstance(getZero());\n                def.sign = result.sign;\n                def.nans = INFINITE;\n                break;\n\n            default: def = result; break;\n        }",
      "info" : "SwitchStatement[65613-67367]:SwitchStatement[65719-67473]"
    }, {
      "left" : "case DfpField.FLAG_INVALID:",
      "right" : "case DfpField.FLAG_INVALID:",
      "info" : "SwitchCase[65641-65668]:SwitchCase[65747-65774]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[65685-65714]:ExpressionStatement[65791-65820]"
    }, {
      "left" : "def.sign = result.sign;",
      "right" : "def.sign = result.sign;",
      "info" : "ExpressionStatement[65731-65754]:ExpressionStatement[65837-65860]"
    }, {
      "left" : "def.nans = QNAN;",
      "right" : "def.nans = QNAN;",
      "info" : "ExpressionStatement[65771-65787]:ExpressionStatement[65877-65893]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[65804-65810]:BreakStatement[65910-65916]"
    }, {
      "left" : "case DfpField.FLAG_DIV_ZERO:",
      "right" : "case DfpField.FLAG_DIV_ZERO:",
      "info" : "SwitchCase[65824-65852]:SwitchCase[65930-65958]"
    }, {
      "left" : "if (nans == FINITE && mant[mant.length-1] != 0)",
      "right" : "if (nans == FINITE && mant[mant.length-1] != 0)",
      "info" : "IfStatement[65869-66142]:IfStatement[65975-66248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65917-66142]:Block[66023-66248]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[65999-66028]:ExpressionStatement[66105-66134]"
    }, {
      "left" : "def.sign = (byte)(sign*oper.sign);",
      "right" : "def.sign = (byte)(sign*oper.sign);",
      "info" : "ExpressionStatement[66049-66083]:ExpressionStatement[66155-66189]"
    }, {
      "left" : "def.nans = INFINITE;",
      "right" : "def.nans = INFINITE;",
      "info" : "ExpressionStatement[66104-66124]:ExpressionStatement[66210-66230]"
    }, {
      "left" : "if (nans == FINITE && mant[mant.length-1] == 0)",
      "right" : "if (nans == FINITE && mant[mant.length-1] == 0)",
      "info" : "IfStatement[66160-66342]:IfStatement[66266-66448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66208-66342]:Block[66314-66448]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[66258-66287]:ExpressionStatement[66364-66393]"
    }, {
      "left" : "def.nans = QNAN;",
      "right" : "def.nans = QNAN;",
      "info" : "ExpressionStatement[66308-66324]:ExpressionStatement[66414-66430]"
    }, {
      "left" : "if (nans == INFINITE || nans == QNAN)",
      "right" : "if (nans == INFINITE || nans == QNAN)",
      "info" : "IfStatement[66360-66504]:IfStatement[66466-66610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66398-66504]:Block[66504-66610]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[66420-66449]:ExpressionStatement[66526-66555]"
    }, {
      "left" : "def.nans = QNAN;",
      "right" : "def.nans = QNAN;",
      "info" : "ExpressionStatement[66470-66486]:ExpressionStatement[66576-66592]"
    }, {
      "left" : "if (nans == INFINITE || nans == SNAN)",
      "right" : "if (nans == INFINITE || nans == SNAN)",
      "info" : "IfStatement[66522-66666]:IfStatement[66628-66772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66560-66666]:Block[66666-66772]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[66582-66611]:ExpressionStatement[66688-66717]"
    }, {
      "left" : "def.nans = QNAN;",
      "right" : "def.nans = QNAN;",
      "info" : "ExpressionStatement[66632-66648]:ExpressionStatement[66738-66754]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[66683-66689]:BreakStatement[66789-66795]"
    }, {
      "left" : "case DfpField.FLAG_UNDERFLOW:",
      "right" : "case DfpField.FLAG_UNDERFLOW:",
      "info" : "SwitchCase[66703-66732]:SwitchCase[66809-66838]"
    }, {
      "left" : "if ( (result.exp+mant.length) < MIN_EXP)",
      "right" : "if ( (result.exp+mant.length) < MIN_EXP)",
      "info" : "IfStatement[66749-66997]:IfStatement[66855-67103]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66790-66903]:Block[66896-67009]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[66812-66841]:ExpressionStatement[66918-66947]"
    }, {
      "left" : "def.sign = result.sign;",
      "right" : "def.sign = result.sign;",
      "info" : "ExpressionStatement[66862-66885]:ExpressionStatement[66968-66991]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66909-66997]:Block[67015-67103]"
    }, {
      "left" : "def = newInstance(result);",
      "right" : "def = newInstance(result);",
      "info" : "ExpressionStatement[66931-66957]:ExpressionStatement[67037-67063]"
    }, {
      "left" : "result.exp = result.exp + ERR_SCALE;",
      "right" : "result.exp = result.exp + ERR_SCALE;",
      "info" : "ExpressionStatement[67014-67050]:ExpressionStatement[67120-67156]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67067-67073]:BreakStatement[67173-67179]"
    }, {
      "left" : "case DfpField.FLAG_OVERFLOW:",
      "right" : "case DfpField.FLAG_OVERFLOW:",
      "info" : "SwitchCase[67087-67115]:SwitchCase[67193-67221]"
    }, {
      "left" : "result.exp = result.exp - ERR_SCALE;",
      "right" : "result.exp = result.exp - ERR_SCALE;",
      "info" : "ExpressionStatement[67132-67168]:ExpressionStatement[67238-67274]"
    }, {
      "left" : "def = newInstance(getZero());",
      "right" : "def = newInstance(getZero());",
      "info" : "ExpressionStatement[67185-67214]:ExpressionStatement[67291-67320]"
    }, {
      "left" : "def.sign = result.sign;",
      "right" : "def.sign = result.sign;",
      "info" : "ExpressionStatement[67231-67254]:ExpressionStatement[67337-67360]"
    }, {
      "left" : "def.nans = INFINITE;",
      "right" : "def.nans = INFINITE;",
      "info" : "ExpressionStatement[67271-67291]:ExpressionStatement[67377-67397]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67308-67314]:BreakStatement[67414-67420]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[67328-67336]:SwitchCase[67434-67442]"
    }, {
      "left" : "def = result;",
      "right" : "def = result;",
      "info" : "ExpressionStatement[67337-67350]:ExpressionStatement[67443-67456]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[67351-67357]:BreakStatement[67457-67463]"
    }, {
      "left" : "return trap(type, what, oper, def, result);",
      "right" : "return trap(type, what, oper, def, result);",
      "info" : "ReturnStatement[67377-67420]:ReturnStatement[67483-67526]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[68011-68020]:Modifier[68117-68126]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[68021-68024]:SimpleType[68127-68130]"
    }, {
      "left" : "trap",
      "right" : "trap",
      "info" : "SimpleName[68025-68029]:SimpleName[68131-68135]"
    }, {
      "left" : "int type",
      "right" : "int type",
      "info" : "SingleVariableDeclaration[68030-68038]:SingleVariableDeclaration[68136-68144]"
    }, {
      "left" : "String what",
      "right" : "String what",
      "info" : "SingleVariableDeclaration[68040-68051]:SingleVariableDeclaration[68146-68157]"
    }, {
      "left" : "Dfp oper",
      "right" : "Dfp oper",
      "info" : "SingleVariableDeclaration[68053-68061]:SingleVariableDeclaration[68159-68167]"
    }, {
      "left" : "Dfp def",
      "right" : "Dfp def",
      "info" : "SingleVariableDeclaration[68063-68070]:SingleVariableDeclaration[68169-68176]"
    }, {
      "left" : "Dfp result",
      "right" : "Dfp result",
      "info" : "SingleVariableDeclaration[68072-68082]:SingleVariableDeclaration[68178-68188]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68084-68111]:Block[68190-68217]"
    }, {
      "left" : "return def;",
      "right" : "return def;",
      "info" : "ReturnStatement[68094-68105]:ReturnStatement[68200-68211]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68223-68229]:Modifier[68329-68335]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[68230-68233]:PrimitiveType[68336-68339]"
    }, {
      "left" : "classify",
      "right" : "classify",
      "info" : "SimpleName[68234-68242]:SimpleName[68340-68348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68245-68273]:Block[68351-68379]"
    }, {
      "left" : "return nans;",
      "right" : "return nans;",
      "info" : "ReturnStatement[68255-68267]:ReturnStatement[68361-68373]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68563-68569]:Modifier[68669-68675]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[68570-68576]:Modifier[68676-68682]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[68577-68580]:SimpleType[68683-68686]"
    }, {
      "left" : "copysign",
      "right" : "copysign",
      "info" : "SimpleName[68581-68589]:SimpleName[68687-68695]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[68590-68601]:SingleVariableDeclaration[68696-68707]"
    }, {
      "left" : "final Dfp y",
      "right" : "final Dfp y",
      "info" : "SingleVariableDeclaration[68603-68614]:SingleVariableDeclaration[68709-68720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68616-68715]:Block[68722-68821]"
    }, {
      "left" : "Dfp result = x.newInstance(x);",
      "right" : "Dfp result = x.newInstance(x);",
      "info" : "VariableDeclarationStatement[68626-68656]:VariableDeclarationStatement[68732-68762]"
    }, {
      "left" : "result.sign = y.sign;",
      "right" : "result.sign = y.sign;",
      "info" : "ExpressionStatement[68665-68686]:ExpressionStatement[68771-68792]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[68695-68709]:ReturnStatement[68801-68815]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[68962-68968]:Modifier[69068-69074]"
    }, {
      "left" : "Dfp",
      "right" : "Dfp",
      "info" : "SimpleType[68969-68972]:SimpleType[69075-69078]"
    }, {
      "left" : "nextAfter",
      "right" : "nextAfter",
      "info" : "SimpleName[68973-68982]:SimpleName[69079-69088]"
    }, {
      "left" : "final Dfp x",
      "right" : "final Dfp x",
      "info" : "SingleVariableDeclaration[68983-68994]:SingleVariableDeclaration[69089-69100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68996-70897]:Block[69102-71003]"
    }, {
      "left" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "right" : "if (field.getRadixDigits() != x.field.getRadixDigits())",
      "info" : "IfStatement[69073-69364]:IfStatement[69179-69470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69129-69364]:Block[69235-69470]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INVALID);",
      "info" : "ExpressionStatement[69143-69189]:ExpressionStatement[69249-69295]"
    }, {
      "left" : "final Dfp result = newInstance(getZero());",
      "right" : "final Dfp result = newInstance(getZero());",
      "info" : "VariableDeclarationStatement[69202-69244]:VariableDeclarationStatement[69308-69350]"
    }, {
      "left" : "result.nans = QNAN;",
      "right" : "result.nans = QNAN;",
      "info" : "ExpressionStatement[69257-69276]:ExpressionStatement[69363-69382]"
    }, {
      "left" : "return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",
      "right" : "return dotrap(DfpField.FLAG_INVALID, NEXT_AFTER_TRAP, x, result);",
      "info" : "ReturnStatement[69289-69354]:ReturnStatement[69395-69460]"
    }, {
      "left" : "boolean up = false;",
      "right" : "boolean up = false;",
      "info" : "VariableDeclarationStatement[69411-69430]:VariableDeclarationStatement[69517-69536]"
    }, {
      "left" : "if (this.lessThan(x))",
      "right" : "if (this.lessThan(x))",
      "info" : "IfStatement[69439-69495]:IfStatement[69545-69601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69461-69495]:Block[69567-69601]"
    }, {
      "left" : "up = true;",
      "right" : "up = true;",
      "info" : "ExpressionStatement[69475-69485]:ExpressionStatement[69581-69591]"
    }, {
      "left" : "if (compare(this, x) == 0)",
      "right" : "if (compare(this, x) == 0)",
      "info" : "IfStatement[69505-69578]:IfStatement[69611-69684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69532-69578]:Block[69638-69684]"
    }, {
      "left" : "return newInstance(x);",
      "right" : "return newInstance(x);",
      "info" : "ReturnStatement[69546-69568]:ReturnStatement[69652-69674]"
    }, {
      "left" : "if (lessThan(getZero()))",
      "right" : "if (lessThan(getZero()))",
      "info" : "IfStatement[69588-69646]:IfStatement[69694-69752]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69613-69646]:Block[69719-69752]"
    }, {
      "left" : "up = !up;",
      "right" : "up = !up;",
      "info" : "ExpressionStatement[69627-69636]:ExpressionStatement[69733-69742]"
    }, {
      "left" : "final Dfp inc;",
      "right" : "final Dfp inc;",
      "info" : "VariableDeclarationStatement[69656-69670]:VariableDeclarationStatement[69762-69776]"
    }, {
      "left" : "Dfp result;",
      "right" : "Dfp result;",
      "info" : "VariableDeclarationStatement[69679-69690]:VariableDeclarationStatement[69785-69796]"
    }, {
      "left" : "if (up)",
      "right" : "if (up)",
      "info" : "IfStatement[69699-70415]:IfStatement[69805-70521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69707-69975]:Block[69813-70081]"
    }, {
      "left" : "inc = newInstance(getOne());",
      "right" : "inc = newInstance(getOne());",
      "info" : "ExpressionStatement[69721-69749]:ExpressionStatement[69827-69855]"
    }, {
      "left" : "inc.exp = this.exp-mant.length+1;",
      "right" : "inc.exp = this.exp-mant.length+1;",
      "info" : "ExpressionStatement[69762-69795]:ExpressionStatement[69868-69901]"
    }, {
      "left" : "inc.sign = this.sign;",
      "right" : "inc.sign = this.sign;",
      "info" : "ExpressionStatement[69808-69829]:ExpressionStatement[69914-69935]"
    }, {
      "left" : "if (this.equals(getZero()))",
      "right" : "if (this.equals(getZero()))",
      "info" : "IfStatement[69843-69933]:IfStatement[69949-70039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69871-69933]:Block[69977-70039]"
    }, {
      "left" : "inc.exp = MIN_EXP-mant.length;",
      "right" : "inc.exp = MIN_EXP-mant.length;",
      "info" : "ExpressionStatement[69889-69919]:ExpressionStatement[69995-70025]"
    }, {
      "left" : "result = add(inc);",
      "right" : "result = add(inc);",
      "info" : "ExpressionStatement[69947-69965]:ExpressionStatement[70053-70071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69981-70415]:Block[70087-70521]"
    }, {
      "left" : "inc = newInstance(getOne());",
      "right" : "inc = newInstance(getOne());",
      "info" : "ExpressionStatement[69995-70023]:ExpressionStatement[70101-70129]"
    }, {
      "left" : "inc.exp = this.exp;",
      "right" : "inc.exp = this.exp;",
      "info" : "ExpressionStatement[70036-70055]:ExpressionStatement[70142-70161]"
    }, {
      "left" : "inc.sign = this.sign;",
      "right" : "inc.sign = this.sign;",
      "info" : "ExpressionStatement[70068-70089]:ExpressionStatement[70174-70195]"
    }, {
      "left" : "if (this.equals(inc))",
      "right" : "if (this.equals(inc))",
      "info" : "IfStatement[70103-70259]:IfStatement[70209-70365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70125-70188]:Block[70231-70294]"
    }, {
      "left" : "inc.exp = this.exp-mant.length;",
      "right" : "inc.exp = this.exp-mant.length;",
      "info" : "ExpressionStatement[70143-70174]:ExpressionStatement[70249-70280]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70194-70259]:Block[70300-70365]"
    }, {
      "left" : "inc.exp = this.exp-mant.length+1;",
      "right" : "inc.exp = this.exp-mant.length+1;",
      "info" : "ExpressionStatement[70212-70245]:ExpressionStatement[70318-70351]"
    }, {
      "left" : "if (this.equals(getZero()))",
      "right" : "if (this.equals(getZero()))",
      "info" : "IfStatement[70273-70363]:IfStatement[70379-70469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70301-70363]:Block[70407-70469]"
    }, {
      "left" : "inc.exp = MIN_EXP-mant.length;",
      "right" : "inc.exp = MIN_EXP-mant.length;",
      "info" : "ExpressionStatement[70319-70349]:ExpressionStatement[70425-70455]"
    }, {
      "left" : "result = this.subtract(inc);",
      "right" : "result = this.subtract(inc);",
      "info" : "ExpressionStatement[70377-70405]:ExpressionStatement[70483-70511]"
    }, {
      "left" : "if (result.classify() == INFINITE && this.classify() != INFINITE)",
      "right" : "if (result.classify() == INFINITE && this.classify() != INFINITE)",
      "info" : "IfStatement[70425-70641]:IfStatement[70531-70747]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70491-70641]:Block[70597-70747]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[70505-70551]:ExpressionStatement[70611-70657]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",
      "right" : "result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",
      "info" : "ExpressionStatement[70564-70631]:ExpressionStatement[70670-70737]"
    }, {
      "left" : "if (result.equals(getZero()) && this.equals(getZero()) == false)",
      "right" : "if (result.equals(getZero()) && this.equals(getZero()) == false)",
      "info" : "IfStatement[70651-70866]:IfStatement[70757-70972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70716-70866]:Block[70822-70972]"
    }, {
      "left" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "right" : "field.setIEEEFlagsBits(DfpField.FLAG_INEXACT);",
      "info" : "ExpressionStatement[70730-70776]:ExpressionStatement[70836-70882]"
    }, {
      "left" : "result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",
      "right" : "result = dotrap(DfpField.FLAG_INEXACT, NEXT_AFTER_TRAP, x, result);",
      "info" : "ExpressionStatement[70789-70856]:ExpressionStatement[70895-70962]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[70876-70890]:ReturnStatement[70982-70996]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[73287-73293]:Modifier[73502-73508]"
    }, {
      "left" : "double[]",
      "right" : "double[]",
      "info" : "ArrayType[73294-73302]:ArrayType[73509-73517]"
    }, {
      "left" : "toSplitDouble",
      "right" : "toSplitDouble",
      "info" : "SimpleName[73303-73316]:SimpleName[73518-73531]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73319-73582]:Block[73534-73797]"
    }, {
      "left" : "double split[] = new double[2];",
      "right" : "double split[] = new double[2];",
      "info" : "VariableDeclarationStatement[73329-73360]:VariableDeclarationStatement[73544-73575]"
    }, {
      "left" : "long mask = 0xffffffffc0000000L;",
      "right" : "long mask = 0xffffffffc0000000L;",
      "info" : "VariableDeclarationStatement[73369-73401]:VariableDeclarationStatement[73584-73616]"
    }, {
      "left" : "split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);",
      "right" : "split[0] = Double.longBitsToDouble(Double.doubleToLongBits(toDouble()) & mask);",
      "info" : "ExpressionStatement[73411-73490]:ExpressionStatement[73626-73705]"
    }, {
      "left" : "split[1] = subtract(newInstance(split[0])).toDouble();",
      "right" : "split[1] = subtract(newInstance(split[0])).toDouble();",
      "info" : "ExpressionStatement[73499-73553]:ExpressionStatement[73714-73768]"
    }, {
      "left" : "return split;",
      "right" : "return split;",
      "info" : "ReturnStatement[73563-73576]:ReturnStatement[73778-73791]"
    } ]
  },
  "interFileMappings" : { }
}