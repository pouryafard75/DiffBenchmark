{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "JsdocToEs6TypedConverter",
      "right" : "JsdocToEs6TypedConverter",
      "info" : "TypeDeclaration[1061-3414]:TypeDeclaration[2156-11302]"
    }, {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[1416-1456]:FieldDeclaration[2511-2551]"
    }, {
      "left" : "public JsdocToEs6TypedConverter(AbstractCompiler compiler)",
      "right" : "public JsdocToEs6TypedConverter(AbstractCompiler compiler)",
      "info" : "MethodDeclaration[1460-1554]:MethodDeclaration[2555-2649]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[1558-1670]:MethodDeclaration[2653-2765]"
    }, {
      "left" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "right" : "public void visit(NodeTraversal t, Node n, Node parent)",
      "info" : "MethodDeclaration[1674-3189]:MethodDeclaration[2769-4284]"
    }, {
      "left" : "private void setTypeExpression(Node n, JSTypeExpression type)",
      "right" : "private void setTypeExpression(Node n, JSTypeExpression type)",
      "info" : "MethodDeclaration[3193-3412]:MethodDeclaration[4288-4533]"
    } ],
    "mappings" : [
 {
      "left" : "com.google.javascript.jscomp.parsing.TypeDeclarationsIRFactory.convert",
      "right" : "com.google.javascript.rhino.TypeDeclarationsIR.stringType",
      "info" : "QualifiedName[667-737]:QualifiedName[1336-1393]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1305-1311]:Modifier[2400-2406]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[1312-1317]:Modifier[2407-2412]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[1318-1323]:TYPE_DECLARATION_KIND[2413-2418]"
    }, {
      "left" : "JsdocToEs6TypedConverter",
      "right" : "JsdocToEs6TypedConverter",
      "info" : "SimpleName[1324-1348]:SimpleName[2419-2443]"
    }, {
      "left" : "AbstractPostOrderCallback",
      "right" : "AbstractPostOrderCallback",
      "info" : "SimpleType[1361-1386]:SimpleType[2456-2481]"
    }, {
      "left" : "CompilerPass",
      "right" : "CompilerPass",
      "info" : "SimpleType[1398-1410]:SimpleType[2493-2505]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1460-1466]:Modifier[2555-2561]"
    }, {
      "left" : "JsdocToEs6TypedConverter",
      "right" : "JsdocToEs6TypedConverter",
      "info" : "SimpleName[1467-1491]:SimpleName[2562-2586]"
    }, {
      "left" : "AbstractCompiler compiler",
      "right" : "AbstractCompiler compiler",
      "info" : "SingleVariableDeclaration[1492-1517]:SingleVariableDeclaration[2587-2612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1519-1554]:Block[2614-2649]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[1525-1550]:ExpressionStatement[2620-2645]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1558-1567]:MarkerAnnotation[2653-2662]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1570-1576]:Modifier[2665-2671]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1577-1581]:PrimitiveType[2672-2676]"
    }, {
      "left" : "process",
      "right" : "process",
      "info" : "SimpleName[1582-1589]:SimpleName[2677-2684]"
    }, {
      "left" : "Node externs",
      "right" : "Node externs",
      "info" : "SingleVariableDeclaration[1590-1602]:SingleVariableDeclaration[2685-2697]"
    }, {
      "left" : "Node root",
      "right" : "Node root",
      "info" : "SingleVariableDeclaration[1604-1613]:SingleVariableDeclaration[2699-2708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1615-1670]:Block[2710-2765]"
    }, {
      "left" : "NodeTraversal.traverse(compiler, root, this);",
      "right" : "NodeTraversal.traverse(compiler, root, this);",
      "info" : "ExpressionStatement[1621-1666]:ExpressionStatement[2716-2761]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[1674-1683]:MarkerAnnotation[2769-2778]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1686-1692]:Modifier[2781-2787]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[1693-1697]:PrimitiveType[2788-2792]"
    }, {
      "left" : "visit",
      "right" : "visit",
      "info" : "SimpleName[1698-1703]:SimpleName[2793-2798]"
    }, {
      "left" : "NodeTraversal t",
      "right" : "NodeTraversal t",
      "info" : "SingleVariableDeclaration[1704-1719]:SingleVariableDeclaration[2799-2814]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[1721-1727]:SingleVariableDeclaration[2816-2822]"
    }, {
      "left" : "Node parent",
      "right" : "Node parent",
      "info" : "SingleVariableDeclaration[1729-1740]:SingleVariableDeclaration[2824-2835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1742-3189]:Block[2837-4284]"
    }, {
      "left" : "JSDocInfo bestJSDocInfo = NodeUtil.getBestJSDocInfo(n);",
      "right" : "JSDocInfo bestJSDocInfo = NodeUtil.getBestJSDocInfo(n);",
      "info" : "VariableDeclarationStatement[1748-1803]:VariableDeclarationStatement[2843-2898]"
    }, {
      "left" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        if (bestJSDocInfo != null) {\n          setTypeExpression(n, bestJSDocInfo.getReturnType());\n        }\n        break;\n      case Token.NAME:\n      case Token.GETPROP:\n        if (parent == null) {\n          break;\n        }\n        if (parent.isVar() || parent.isAssign() || parent.isExprResult()) {\n          if (bestJSDocInfo != null) {\n            setTypeExpression(n, bestJSDocInfo.getType());\n          }\n        } else if (parent.isParamList()) {\n          JSDocInfo parentDocInfo = NodeUtil.getBestJSDocInfo(parent);\n          if (parentDocInfo == null) {\n            break;\n          }\n          JSTypeExpression parameterType =\n              parentDocInfo.getParameterType(n.getString());\n          if (parameterType != null) {\n            Node attachTypeExpr = n;\n            // Modify the primary AST to represent a function parameter as a\n            // REST node, if the type indicates it is a rest parameter.\n            if (parameterType.getRoot().getType() == Token.ELLIPSIS) {\n              attachTypeExpr = Node.newString(Token.REST, n.getString());\n              n.getParent().replaceChild(n, attachTypeExpr);\n              compiler.reportCodeChange();\n            }\n            setTypeExpression(attachTypeExpr, parameterType);\n          }\n        }\n        break;\n      default:\n        break;\n    }",
      "right" : "switch (n.getType()) {\n      case Token.FUNCTION:\n        if (bestJSDocInfo != null) {\n          setTypeExpression(n, bestJSDocInfo.getReturnType());\n        }\n        break;\n      case Token.NAME:\n      case Token.GETPROP:\n        if (parent == null) {\n          break;\n        }\n        if (parent.isVar() || parent.isAssign() || parent.isExprResult()) {\n          if (bestJSDocInfo != null) {\n            setTypeExpression(n, bestJSDocInfo.getType());\n          }\n        } else if (parent.isParamList()) {\n          JSDocInfo parentDocInfo = NodeUtil.getBestJSDocInfo(parent);\n          if (parentDocInfo == null) {\n            break;\n          }\n          JSTypeExpression parameterType =\n              parentDocInfo.getParameterType(n.getString());\n          if (parameterType != null) {\n            Node attachTypeExpr = n;\n            // Modify the primary AST to represent a function parameter as a\n            // REST node, if the type indicates it is a rest parameter.\n            if (parameterType.getRoot().getType() == Token.ELLIPSIS) {\n              attachTypeExpr = Node.newString(Token.REST, n.getString());\n              n.getParent().replaceChild(n, attachTypeExpr);\n              compiler.reportCodeChange();\n            }\n            setTypeExpression(attachTypeExpr, parameterType);\n          }\n        }\n        break;\n      default:\n        break;\n    }",
      "info" : "SwitchStatement[1808-3185]:SwitchStatement[2903-4280]"
    }, {
      "left" : "case Token.FUNCTION:",
      "right" : "case Token.FUNCTION:",
      "info" : "SwitchCase[1837-1857]:SwitchCase[2932-2952]"
    }, {
      "left" : "if (bestJSDocInfo != null)",
      "right" : "if (bestJSDocInfo != null)",
      "info" : "IfStatement[1866-1967]:IfStatement[2961-3062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1893-1967]:Block[2988-3062]"
    }, {
      "left" : "setTypeExpression(n, bestJSDocInfo.getReturnType());",
      "right" : "setTypeExpression(n, bestJSDocInfo.getReturnType());",
      "info" : "ExpressionStatement[1905-1957]:ExpressionStatement[3000-3052]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[1976-1982]:BreakStatement[3071-3077]"
    }, {
      "left" : "case Token.NAME:",
      "right" : "case Token.NAME:",
      "info" : "SwitchCase[1989-2005]:SwitchCase[3084-3100]"
    }, {
      "left" : "case Token.GETPROP:",
      "right" : "case Token.GETPROP:",
      "info" : "SwitchCase[2012-2031]:SwitchCase[3107-3126]"
    }, {
      "left" : "if (parent == null)",
      "right" : "if (parent == null)",
      "info" : "IfStatement[2040-2088]:IfStatement[3135-3183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2060-2088]:Block[3155-3183]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2072-2078]:BreakStatement[3167-3173]"
    }, {
      "left" : "if (parent.isVar() || parent.isAssign() || parent.isExprResult())",
      "right" : "if (parent.isVar() || parent.isAssign() || parent.isExprResult())",
      "info" : "IfStatement[2097-3134]:IfStatement[3192-4229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2163-2284]:Block[3258-3379]"
    }, {
      "left" : "if (bestJSDocInfo != null)",
      "right" : "if (bestJSDocInfo != null)",
      "info" : "IfStatement[2175-2274]:IfStatement[3270-3369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2202-2274]:Block[3297-3369]"
    }, {
      "left" : "setTypeExpression(n, bestJSDocInfo.getType());",
      "right" : "setTypeExpression(n, bestJSDocInfo.getType());",
      "info" : "ExpressionStatement[2216-2262]:ExpressionStatement[3311-3357]"
    }, {
      "left" : "if (parent.isParamList())",
      "right" : "if (parent.isParamList())",
      "info" : "IfStatement[2290-3134]:IfStatement[3385-4229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2316-3134]:Block[3411-4229]"
    }, {
      "left" : "JSDocInfo parentDocInfo = NodeUtil.getBestJSDocInfo(parent);",
      "right" : "JSDocInfo parentDocInfo = NodeUtil.getBestJSDocInfo(parent);",
      "info" : "VariableDeclarationStatement[2328-2388]:VariableDeclarationStatement[3423-3483]"
    }, {
      "left" : "if (parentDocInfo == null)",
      "right" : "if (parentDocInfo == null)",
      "info" : "IfStatement[2399-2458]:IfStatement[3494-3553]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2426-2458]:Block[3521-3553]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[2440-2446]:BreakStatement[3535-3541]"
    }, {
      "left" : "JSTypeExpression parameterType =\n              parentDocInfo.getParameterType(n.getString());",
      "right" : "JSTypeExpression parameterType =\n              parentDocInfo.getParameterType(n.getString());",
      "info" : "VariableDeclarationStatement[2469-2562]:VariableDeclarationStatement[3564-3657]"
    }, {
      "left" : "if (parameterType != null)",
      "right" : "if (parameterType != null)",
      "info" : "IfStatement[2573-3124]:IfStatement[3668-4219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2600-3124]:Block[3695-4219]"
    }, {
      "left" : "Node attachTypeExpr = n;",
      "right" : "Node attachTypeExpr = n;",
      "info" : "VariableDeclarationStatement[2614-2638]:VariableDeclarationStatement[3709-3733]"
    }, {
      "left" : "if (parameterType.getRoot().getType() == Token.ELLIPSIS)",
      "right" : "if (parameterType.getRoot().getType() == Token.ELLIPSIS)",
      "info" : "IfStatement[2800-3050]:IfStatement[3895-4145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2857-3050]:Block[3952-4145]"
    }, {
      "left" : "attachTypeExpr = Node.newString(Token.REST, n.getString());",
      "right" : "attachTypeExpr = Node.newString(Token.REST, n.getString());",
      "info" : "ExpressionStatement[2873-2932]:ExpressionStatement[3968-4027]"
    }, {
      "left" : "n.getParent().replaceChild(n, attachTypeExpr);",
      "right" : "n.getParent().replaceChild(n, attachTypeExpr);",
      "info" : "ExpressionStatement[2947-2993]:ExpressionStatement[4042-4088]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[3008-3036]:ExpressionStatement[4103-4131]"
    }, {
      "left" : "setTypeExpression(attachTypeExpr, parameterType);",
      "right" : "setTypeExpression(attachTypeExpr, parameterType);",
      "info" : "ExpressionStatement[3063-3112]:ExpressionStatement[4158-4207]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3143-3149]:BreakStatement[4238-4244]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3156-3164]:SwitchCase[4251-4259]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[3173-3179]:BreakStatement[4268-4274]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[3193-3200]:Modifier[4288-4295]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3201-3205]:PrimitiveType[4296-4300]"
    }, {
      "left" : "setTypeExpression",
      "right" : "setTypeExpression",
      "info" : "SimpleName[3206-3223]:SimpleName[4301-4318]"
    }, {
      "left" : "Node n",
      "right" : "Node n",
      "info" : "SingleVariableDeclaration[3224-3230]:SingleVariableDeclaration[4319-4325]"
    }, {
      "left" : "JSTypeExpression type",
      "right" : "JSTypeExpression type",
      "info" : "SingleVariableDeclaration[3232-3253]:SingleVariableDeclaration[4327-4348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3255-3412]:Block[4350-4533]"
    }, {
      "left" : "TypeDeclarationNode node = convert(type);",
      "right" : "TypeDeclarationNode node = TypeDeclarationsIRFactory.convert(type);",
      "info" : "VariableDeclarationStatement[3261-3302]:VariableDeclarationStatement[4356-4423]"
    }, {
      "left" : "if (node != null)",
      "right" : "if (node != null)",
      "info" : "IfStatement[3307-3408]:IfStatement[4428-4529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3325-3408]:Block[4446-4529]"
    }, {
      "left" : "n.setDeclaredTypeExpression(node);",
      "right" : "n.setDeclaredTypeExpression(node);",
      "info" : "ExpressionStatement[3333-3367]:ExpressionStatement[4454-4488]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[3374-3402]:ExpressionStatement[4495-4523]"
    } ]
  },
  "interFileMappings" : { }
}