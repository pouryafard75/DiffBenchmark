{
  "matchedElements" : [
 {
    "left" : "class : ProcessCommonJSModules",
    "right" : "class : ProcessCommonJSModules",
    "info" : "TypeDeclaration[1006-9628]:TypeDeclaration[1006-9651]"
  }, {
    "left" : "MODULE_SLASH",
    "right" : "MODULE_SLASH",
    "info" : "FieldDeclaration[1575-1622]:FieldDeclaration[1575-1622]"
  }, {
    "left" : "DEFAULT_FILENAME_PREFIX",
    "right" : "DEFAULT_FILENAME_PREFIX",
    "info" : "FieldDeclaration[1626-1698]:FieldDeclaration[1626-1698]"
  }, {
    "left" : "MODULE_NAME_SEPARATOR",
    "right" : "MODULE_NAME_SEPARATOR",
    "info" : "FieldDeclaration[1702-1760]:FieldDeclaration[1702-1760]"
  }, {
    "left" : "MODULE_NAME_PREFIX",
    "right" : "MODULE_NAME_PREFIX",
    "info" : "FieldDeclaration[1763-1822]:FieldDeclaration[1763-1822]"
  }, {
    "left" : "compiler",
    "right" : "compiler",
    "info" : "FieldDeclaration[1826-1866]:FieldDeclaration[1826-1866]"
  }, {
    "left" : "filenamePrefix",
    "right" : "filenamePrefix",
    "info" : "FieldDeclaration[1869-1905]:FieldDeclaration[1869-1905]"
  }, {
    "left" : "reportDependencies",
    "right" : "reportDependencies",
    "info" : "FieldDeclaration[1908-1949]:FieldDeclaration[1908-1949]"
  }, {
    "left" : "module",
    "right" : "module",
    "info" : "FieldDeclaration[1952-1976]:FieldDeclaration[1952-1976]"
  }, {
    "left" : "package ProcessCommonJSModules(compiler , filenamePrefix )",
    "right" : "package ProcessCommonJSModules(compiler , filenamePrefix )",
    "info" : "MethodDeclaration[1980-2100]:MethodDeclaration[1980-2100]"
  }, {
    "left" : "package ProcessCommonJSModules(compiler , filenamePrefix , reportDependencies boolean)",
    "right" : "package ProcessCommonJSModules(compiler , filenamePrefix , reportDependencies boolean)",
    "info" : "MethodDeclaration[2104-2418]:MethodDeclaration[2104-2418]"
  }, {
    "left" : "public process(externs , root ) : void",
    "right" : "public process(externs , root ) : void",
    "info" : "MethodDeclaration[2422-2575]:MethodDeclaration[2422-2575]"
  }, {
    "left" : "package guessCJSModuleName(filename ) : ",
    "right" : "package guessCJSModuleName(filename ) : ",
    "info" : "MethodDeclaration[2579-2683]:MethodDeclaration[2579-2683]"
  }, {
    "left" : "package getModule() : ",
    "right" : "package getModule() : ",
    "info" : "MethodDeclaration[2687-2838]:MethodDeclaration[2687-2838]"
  }, {
    "left" : "public toModuleName(filename ) : ",
    "right" : "public toModuleName(filename ) : ",
    "info" : "MethodDeclaration[2842-3372]:MethodDeclaration[2842-3372]"
  }, {
    "left" : "public toModuleName(requiredFilename , currentFilename ) : ",
    "right" : "public toModuleName(requiredFilename , currentFilename ) : ",
    "info" : "MethodDeclaration[3376-4116]:MethodDeclaration[3376-4116]"
  }, {
    "left" : "private normalizeSourceName(filename ) : ",
    "right" : "private normalizeSourceName(filename ) : ",
    "info" : "MethodDeclaration[4120-4411]:MethodDeclaration[4120-4455]"
  }, {
    "left" : "class : ProcessCommonJsModulesCallback",
    "right" : "class : ProcessCommonJsModulesCallback",
    "info" : "TypeDeclaration[4415-8722]:TypeDeclaration[4459-8745]"
  }, {
    "left" : "scriptNodeCount",
    "right" : "scriptNodeCount",
    "info" : "FieldDeclaration[4595-4627]:FieldDeclaration[4639-4671]"
  }, {
    "left" : "modulesWithExports",
    "right" : "modulesWithExports",
    "info" : "FieldDeclaration[4632-4691]:FieldDeclaration[4676-4735]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[4697-5200]:MethodDeclaration[4741-5244]"
  }, {
    "left" : "private visitRequireCall(t , require , parent ) : void",
    "right" : "private visitRequireCall(t , require , parent ) : void",
    "info" : "MethodDeclaration[5206-6072]:MethodDeclaration[5250-6116]"
  }, {
    "left" : "private visitScript(t , script ) : void",
    "right" : "private visitScript(t , script ) : void",
    "info" : "MethodDeclaration[6078-7301]:MethodDeclaration[6122-7324]"
  }, {
    "left" : "private emitOptionalModuleExportsOverride(script , moduleName ) : void",
    "right" : "private emitOptionalModuleExportsOverride(script , moduleName ) : void",
    "info" : "MethodDeclaration[7307-7959]:MethodDeclaration[7330-7982]"
  }, {
    "left" : "private visitModuleExports(prop ) : void",
    "right" : "private visitModuleExports(prop ) : void",
    "info" : "MethodDeclaration[7965-8489]:MethodDeclaration[7988-8512]"
  }, {
    "left" : "private getCurrentScriptNode(n ) : ",
    "right" : "private getCurrentScriptNode(n ) : ",
    "info" : "MethodDeclaration[8495-8718]:MethodDeclaration[8518-8741]"
  }, {
    "left" : "class : SuffixVarsCallback",
    "right" : "class : SuffixVarsCallback",
    "info" : "TypeDeclaration[8726-9626]:TypeDeclaration[8749-9649]"
  }, {
    "left" : "EXPORTS",
    "right" : "EXPORTS",
    "info" : "FieldDeclaration[8890-8938]:FieldDeclaration[8913-8961]"
  }, {
    "left" : "suffix",
    "right" : "suffix",
    "info" : "FieldDeclaration[8944-8972]:FieldDeclaration[8967-8995]"
  }, {
    "left" : "package SuffixVarsCallback(suffix )",
    "right" : "package SuffixVarsCallback(suffix )",
    "info" : "MethodDeclaration[8978-9047]:MethodDeclaration[9001-9070]"
  }, {
    "left" : "public visit(t , n , parent ) : void",
    "right" : "public visit(t , n , parent ) : void",
    "info" : "MethodDeclaration[9053-9622]:MethodDeclaration[9076-9645]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1419-1425]:Modifier[1419-1425]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1426-1431]:TYPE_DECLARATION_KIND[1426-1431]"
  }, {
    "left" : "ProcessCommonJSModules",
    "right" : "ProcessCommonJSModules",
    "info" : "SimpleName[1980-2002]:SimpleName[1980-2002]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[2003-2028]:SingleVariableDeclaration[2003-2028]"
  }, {
    "left" : "String filenamePrefix",
    "right" : "String filenamePrefix",
    "info" : "SingleVariableDeclaration[2030-2051]:SingleVariableDeclaration[2030-2051]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2053-2100]:Block[2053-2100]"
  }, {
    "left" : "this(compiler, filenamePrefix, true);",
    "right" : "this(compiler, filenamePrefix, true);",
    "info" : "ConstructorInvocation[2059-2096]:ConstructorInvocation[2059-2096]"
  }, {
    "left" : "ProcessCommonJSModules",
    "right" : "ProcessCommonJSModules",
    "info" : "SimpleName[2104-2126]:SimpleName[2104-2126]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[2127-2152]:SingleVariableDeclaration[2127-2152]"
  }, {
    "left" : "String filenamePrefix",
    "right" : "String filenamePrefix",
    "info" : "SingleVariableDeclaration[2154-2175]:SingleVariableDeclaration[2154-2175]"
  }, {
    "left" : "boolean reportDependencies",
    "right" : "boolean reportDependencies",
    "info" : "SingleVariableDeclaration[2183-2209]:SingleVariableDeclaration[2183-2209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2211-2418]:Block[2211-2418]"
  }, {
    "left" : "this.compiler = compiler;",
    "right" : "this.compiler = compiler;",
    "info" : "ExpressionStatement[2217-2242]:ExpressionStatement[2217-2242]"
  }, {
    "left" : "this.filenamePrefix = filenamePrefix.endsWith(MODULE_SLASH) ?\n        filenamePrefix : filenamePrefix + MODULE_SLASH;",
    "right" : "this.filenamePrefix = filenamePrefix.endsWith(MODULE_SLASH) ?\n        filenamePrefix : filenamePrefix + MODULE_SLASH;",
    "info" : "ExpressionStatement[2247-2364]:ExpressionStatement[2247-2364]"
  }, {
    "left" : "this.reportDependencies = reportDependencies;",
    "right" : "this.reportDependencies = reportDependencies;",
    "info" : "ExpressionStatement[2369-2414]:ExpressionStatement[2369-2414]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[2422-2431]:MarkerAnnotation[2422-2431]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2434-2440]:Modifier[2434-2440]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2441-2445]:PrimitiveType[2441-2445]"
  }, {
    "left" : "process",
    "right" : "process",
    "info" : "SimpleName[2446-2453]:SimpleName[2446-2453]"
  }, {
    "left" : "Node externs",
    "right" : "Node externs",
    "info" : "SingleVariableDeclaration[2454-2466]:SingleVariableDeclaration[2454-2466]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[2468-2477]:SingleVariableDeclaration[2468-2477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2479-2575]:Block[2479-2575]"
  }, {
    "left" : "NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());",
    "right" : "NodeTraversal\n        .traverse(compiler, root, new ProcessCommonJsModulesCallback());",
    "info" : "ExpressionStatement[2485-2571]:ExpressionStatement[2485-2571]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[2579-2585]:SimpleType[2579-2585]"
  }, {
    "left" : "guessCJSModuleName",
    "right" : "guessCJSModuleName",
    "info" : "SimpleName[2586-2604]:SimpleName[2586-2604]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[2605-2620]:SingleVariableDeclaration[2605-2620]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2622-2683]:Block[2622-2683]"
  }, {
    "left" : "return toModuleName(normalizeSourceName(filename));",
    "right" : "return toModuleName(normalizeSourceName(filename));",
    "info" : "ReturnStatement[2628-2679]:ReturnStatement[2628-2679]"
  }, {
    "left" : "JSModule",
    "right" : "JSModule",
    "info" : "SimpleType[2793-2801]:SimpleType[2793-2801]"
  }, {
    "left" : "getModule",
    "right" : "getModule",
    "info" : "SimpleName[2802-2811]:SimpleName[2802-2811]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2814-2838]:Block[2814-2838]"
  }, {
    "left" : "return module;",
    "right" : "return module;",
    "info" : "ReturnStatement[2820-2834]:ReturnStatement[2820-2834]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3078-3084]:Modifier[3078-3084]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3085-3091]:Modifier[3085-3091]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[3092-3098]:SimpleType[3092-3098]"
  }, {
    "left" : "toModuleName",
    "right" : "toModuleName",
    "info" : "SimpleName[3099-3111]:SimpleName[3099-3111]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[3112-3127]:SingleVariableDeclaration[3112-3127]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3129-3372]:Block[3129-3372]"
  }, {
    "left" : "return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");",
    "right" : "return MODULE_NAME_PREFIX +\n        filename.replaceAll(\"^\\\\.\" + Pattern.quote(MODULE_SLASH), \"\")\n            .replaceAll(Pattern.quote(MODULE_SLASH), MODULE_NAME_SEPARATOR)\n            .replaceAll(\"\\\\.js$\", \"\").replaceAll(\"-\", \"_\");",
    "info" : "ReturnStatement[3135-3368]:ReturnStatement[3135-3368]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3511-3517]:Modifier[3511-3517]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3518-3524]:Modifier[3518-3524]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[3525-3531]:SimpleType[3525-3531]"
  }, {
    "left" : "toModuleName",
    "right" : "toModuleName",
    "info" : "SimpleName[3532-3544]:SimpleName[3532-3544]"
  }, {
    "left" : "String requiredFilename",
    "right" : "String requiredFilename",
    "info" : "SingleVariableDeclaration[3545-3568]:SingleVariableDeclaration[3545-3568]"
  }, {
    "left" : "String currentFilename",
    "right" : "String currentFilename",
    "info" : "SingleVariableDeclaration[3576-3598]:SingleVariableDeclaration[3576-3598]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3600-4116]:Block[3600-4116]"
  }, {
    "left" : "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
    "right" : "requiredFilename = requiredFilename.replaceAll(\"\\\\.js$\", \"\");",
    "info" : "ExpressionStatement[3606-3667]:ExpressionStatement[3606-3667]"
  }, {
    "left" : "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
    "right" : "currentFilename = currentFilename.replaceAll(\"\\\\.js$\", \"\");",
    "info" : "ExpressionStatement[3672-3731]:ExpressionStatement[3672-3731]"
  }, {
    "left" : "if (requiredFilename.startsWith(\".\" + MODULE_SLASH) ||\n        requiredFilename.startsWith(\"..\" + MODULE_SLASH))",
    "right" : "if (requiredFilename.startsWith(\".\" + MODULE_SLASH) ||\n        requiredFilename.startsWith(\"..\" + MODULE_SLASH))",
    "info" : "IfStatement[3737-4069]:IfStatement[3737-4069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3850-4069]:Block[3850-4069]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[3858-4063]:TryStatement[3858-4063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3862-3985]:Block[3862-3985]"
  }, {
    "left" : "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();",
    "right" : "requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))\n            .toString();",
    "info" : "ExpressionStatement[3872-3977]:ExpressionStatement[3872-3977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4015-4063]:Block[4015-4063]"
  }, {
    "left" : "throw new RuntimeException(e);",
    "right" : "throw new RuntimeException(e);",
    "info" : "ThrowStatement[4025-4055]:ThrowStatement[4025-4055]"
  }, {
    "left" : "return toModuleName(requiredFilename);",
    "right" : "return toModuleName(requiredFilename);",
    "info" : "ReturnStatement[4074-4112]:ReturnStatement[4074-4112]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4120-4127]:Modifier[4120-4127]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[4128-4134]:SimpleType[4128-4134]"
  }, {
    "left" : "normalizeSourceName",
    "right" : "normalizeSourceName",
    "info" : "SimpleName[4135-4154]:SimpleName[4135-4154]"
  }, {
    "left" : "String filename",
    "right" : "String filename",
    "info" : "SingleVariableDeclaration[4155-4170]:SingleVariableDeclaration[4155-4170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4172-4411]:Block[4172-4455]"
  }, {
    "left" : "if (filename.indexOf(filenamePrefix) == 0)",
    "right" : "if (filename.indexOf(filenamePrefix) == 0)",
    "info" : "IfStatement[4273-4385]:IfStatement[4317-4429]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4316-4385]:Block[4360-4429]"
  }, {
    "left" : "filename = filename.substring(filenamePrefix.length());",
    "right" : "filename = filename.substring(filenamePrefix.length());",
    "info" : "ExpressionStatement[4324-4379]:ExpressionStatement[4368-4423]"
  }, {
    "left" : "return filename;",
    "right" : "return filename;",
    "info" : "ReturnStatement[4391-4407]:ReturnStatement[4435-4451]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4503-4510]:Modifier[4547-4554]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[4511-4516]:TYPE_DECLARATION_KIND[4555-4560]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4697-4706]:MarkerAnnotation[4741-4750]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4711-4717]:Modifier[4755-4761]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4718-4722]:PrimitiveType[4762-4766]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[4723-4728]:SimpleName[4767-4772]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[4729-4744]:SingleVariableDeclaration[4773-4788]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4746-4752]:SingleVariableDeclaration[4790-4796]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[4754-4765]:SingleVariableDeclaration[4798-4809]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4767-5200]:Block[4811-5244]"
  }, {
    "left" : "if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString())",
    "right" : "if (n.isCall() && n.getChildCount() == 2 &&\n          \"require\".equals(n.getFirstChild().getQualifiedName()) &&\n          n.getChildAtIndex(1).isString())",
    "info" : "IfStatement[4775-4979]:IfStatement[4819-5023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4930-4979]:Block[4974-5023]"
  }, {
    "left" : "visitRequireCall(t, n, parent);",
    "right" : "visitRequireCall(t, n, parent);",
    "info" : "ExpressionStatement[4940-4971]:ExpressionStatement[4984-5015]"
  }, {
    "left" : "if (n.isScript())",
    "right" : "if (n.isScript())",
    "info" : "IfStatement[4987-5068]:IfStatement[5031-5112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5005-5068]:Block[5049-5112]"
  }, {
    "left" : "scriptNodeCount++;",
    "right" : "scriptNodeCount++;",
    "info" : "ExpressionStatement[5015-5033]:ExpressionStatement[5059-5077]"
  }, {
    "left" : "visitScript(t, n);",
    "right" : "visitScript(t, n);",
    "info" : "ExpressionStatement[5042-5060]:ExpressionStatement[5086-5104]"
  }, {
    "left" : "if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName()))",
    "right" : "if (n.isGetProp() &&\n          \"module.exports\".equals(n.getQualifiedName()))",
    "info" : "IfStatement[5076-5194]:IfStatement[5120-5238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5154-5194]:Block[5198-5238]"
  }, {
    "left" : "visitModuleExports(n);",
    "right" : "visitModuleExports(n);",
    "info" : "ExpressionStatement[5164-5186]:ExpressionStatement[5208-5230]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5361-5368]:Modifier[5405-5412]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5369-5373]:PrimitiveType[5413-5417]"
  }, {
    "left" : "visitRequireCall",
    "right" : "visitRequireCall",
    "info" : "SimpleName[5374-5390]:SimpleName[5418-5434]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[5391-5406]:SingleVariableDeclaration[5435-5450]"
  }, {
    "left" : "Node require",
    "right" : "Node require",
    "info" : "SingleVariableDeclaration[5408-5420]:SingleVariableDeclaration[5452-5464]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[5422-5433]:SingleVariableDeclaration[5466-5477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5435-6072]:Block[5479-6116]"
  }, {
    "left" : "String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));",
    "right" : "String moduleName = toModuleName(require.getChildAtIndex(1).getString(),\n          normalizeSourceName(t.getSourceName()));",
    "info" : "VariableDeclarationStatement[5443-5566]:VariableDeclarationStatement[5487-5610]"
  }, {
    "left" : "Node moduleRef = IR.name(moduleName).srcref(require);",
    "right" : "Node moduleRef = IR.name(moduleName).srcref(require);",
    "info" : "VariableDeclarationStatement[5573-5626]:VariableDeclarationStatement[5617-5670]"
  }, {
    "left" : "parent.replaceChild(require, moduleRef);",
    "right" : "parent.replaceChild(require, moduleRef);",
    "info" : "ExpressionStatement[5633-5673]:ExpressionStatement[5677-5717]"
  }, {
    "left" : "Node script = getCurrentScriptNode(parent);",
    "right" : "Node script = getCurrentScriptNode(parent);",
    "info" : "VariableDeclarationStatement[5680-5723]:VariableDeclarationStatement[5724-5767]"
  }, {
    "left" : "if (reportDependencies)",
    "right" : "if (reportDependencies)",
    "info" : "IfStatement[5730-5808]:IfStatement[5774-5852]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5754-5808]:Block[5798-5852]"
  }, {
    "left" : "t.getInput().addRequire(moduleName);",
    "right" : "t.getInput().addRequire(moduleName);",
    "info" : "ExpressionStatement[5764-5800]:ExpressionStatement[5808-5844]"
  }, {
    "left" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));",
    "right" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"require\")),\n              IR.string(moduleName))).copyInformationFromForTree(require));",
    "info" : "ExpressionStatement[5849-6031]:ExpressionStatement[5893-6075]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[6038-6066]:ExpressionStatement[6082-6110]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6199-6206]:Modifier[6243-6250]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6207-6211]:PrimitiveType[6251-6255]"
  }, {
    "left" : "visitScript",
    "right" : "visitScript",
    "info" : "SimpleName[6212-6223]:SimpleName[6256-6267]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[6224-6239]:SingleVariableDeclaration[6268-6283]"
  }, {
    "left" : "Node script",
    "right" : "Node script",
    "info" : "SingleVariableDeclaration[6241-6252]:SingleVariableDeclaration[6285-6296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6254-7301]:Block[6298-7324]"
  }, {
    "left" : "Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");",
    "right" : "Preconditions.checkArgument(scriptNodeCount == 1,\n          \"ProcessCommonJSModules supports only one invocation per \" +\n          \"CompilerInput / script node\");",
    "info" : "ExpressionStatement[6262-6424]:ExpressionStatement[6306-6468]"
  }, {
    "left" : "String moduleName = guessCJSModuleName(normalizeSourceName(script.getSourceFileName()));",
    "right" : "String moduleName = guessCJSModuleName(script.getSourceFileName());",
    "info" : "VariableDeclarationStatement[6431-6519]:VariableDeclarationStatement[6475-6542]"
  }, {
    "left" : "script.getSourceFileName()",
    "right" : "script.getSourceFileName()",
    "info" : "METHOD_INVOCATION_ARGUMENTS[6490-6516]:METHOD_INVOCATION_ARGUMENTS[6514-6540]"
  }, {
    "left" : "script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));",
    "right" : "script.addChildToFront(IR.var(IR.name(moduleName), IR.objectlit())\n          .copyInformationFromForTree(script));",
    "info" : "ExpressionStatement[6526-6640]:ExpressionStatement[6549-6663]"
  }, {
    "left" : "if (reportDependencies)",
    "right" : "if (reportDependencies)",
    "info" : "IfStatement[6647-6859]:IfStatement[6670-6882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6671-6859]:Block[6694-6882]"
  }, {
    "left" : "CompilerInput ci = t.getInput();",
    "right" : "CompilerInput ci = t.getInput();",
    "info" : "VariableDeclarationStatement[6681-6713]:VariableDeclarationStatement[6704-6736]"
  }, {
    "left" : "ci.addProvide(moduleName);",
    "right" : "ci.addProvide(moduleName);",
    "info" : "ExpressionStatement[6722-6748]:ExpressionStatement[6745-6771]"
  }, {
    "left" : "JSModule m = new JSModule(moduleName);",
    "right" : "JSModule m = new JSModule(moduleName);",
    "info" : "VariableDeclarationStatement[6757-6795]:VariableDeclarationStatement[6780-6818]"
  }, {
    "left" : "m.addAndOverrideModule(ci);",
    "right" : "m.addAndOverrideModule(ci);",
    "info" : "ExpressionStatement[6804-6831]:ExpressionStatement[6827-6854]"
  }, {
    "left" : "module = m;",
    "right" : "module = m;",
    "info" : "ExpressionStatement[6840-6851]:ExpressionStatement[6863-6874]"
  }, {
    "left" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));",
    "right" : "script.addChildToFront(IR.exprResult(\n          IR.call(IR.getprop(IR.name(\"goog\"), IR.string(\"provide\")),\n              IR.string(moduleName))).copyInformationFromForTree(script));",
    "info" : "ExpressionStatement[6866-7047]:ExpressionStatement[6889-7070]"
  }, {
    "left" : "emitOptionalModuleExportsOverride(script, moduleName);",
    "right" : "emitOptionalModuleExportsOverride(script, moduleName);",
    "info" : "ExpressionStatement[7055-7109]:ExpressionStatement[7078-7132]"
  }, {
    "left" : "NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));",
    "right" : "NodeTraversal.traverse(compiler, script, new SuffixVarsCallback(\n          moduleName));",
    "info" : "ExpressionStatement[7171-7259]:ExpressionStatement[7194-7282]"
  }, {
    "left" : "compiler.reportCodeChange();",
    "right" : "compiler.reportCodeChange();",
    "info" : "ExpressionStatement[7267-7295]:ExpressionStatement[7290-7318]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7455-7462]:Modifier[7478-7485]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7463-7467]:PrimitiveType[7486-7490]"
  }, {
    "left" : "emitOptionalModuleExportsOverride",
    "right" : "emitOptionalModuleExportsOverride",
    "info" : "SimpleName[7468-7501]:SimpleName[7491-7524]"
  }, {
    "left" : "Node script",
    "right" : "Node script",
    "info" : "SingleVariableDeclaration[7502-7513]:SingleVariableDeclaration[7525-7536]"
  }, {
    "left" : "String moduleName",
    "right" : "String moduleName",
    "info" : "SingleVariableDeclaration[7523-7540]:SingleVariableDeclaration[7546-7563]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7542-7959]:Block[7565-7982]"
  }, {
    "left" : "if (!modulesWithExports.contains(moduleName))",
    "right" : "if (!modulesWithExports.contains(moduleName))",
    "info" : "IfStatement[7550-7621]:IfStatement[7573-7644]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7596-7621]:Block[7619-7644]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[7606-7613]:ReturnStatement[7629-7636]"
  }, {
    "left" : "Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));",
    "right" : "Node moduleExportsProp = IR.getprop(IR.name(moduleName),\n          IR.string(\"module$exports\"));",
    "info" : "VariableDeclarationStatement[7629-7725]:VariableDeclarationStatement[7652-7748]"
  }, {
    "left" : "script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));",
    "right" : "script.addChildToBack(IR.ifNode(\n          moduleExportsProp,\n          IR.block(IR.exprResult(IR.assign(IR.name(moduleName),\n              moduleExportsProp.cloneTree())))).copyInformationFromForTree(\n          script));",
    "info" : "ExpressionStatement[7732-7953]:ExpressionStatement[7755-7976]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8041-8048]:Modifier[8064-8071]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8049-8053]:PrimitiveType[8072-8076]"
  }, {
    "left" : "visitModuleExports",
    "right" : "visitModuleExports",
    "info" : "SimpleName[8054-8072]:SimpleName[8077-8095]"
  }, {
    "left" : "Node prop",
    "right" : "Node prop",
    "info" : "SingleVariableDeclaration[8073-8082]:SingleVariableDeclaration[8096-8105]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8084-8489]:Block[8107-8512]"
  }, {
    "left" : "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
    "right" : "String moduleName = guessCJSModuleName(prop.getSourceFileName());",
    "info" : "VariableDeclarationStatement[8092-8157]:VariableDeclarationStatement[8115-8180]"
  }, {
    "left" : "Node module = prop.getChildAtIndex(0);",
    "right" : "Node module = prop.getChildAtIndex(0);",
    "info" : "VariableDeclarationStatement[8164-8202]:VariableDeclarationStatement[8187-8225]"
  }, {
    "left" : "module.putProp(Node.ORIGINALNAME_PROP, \"module\");",
    "right" : "module.putProp(Node.ORIGINALNAME_PROP, \"module\");",
    "info" : "ExpressionStatement[8209-8258]:ExpressionStatement[8232-8281]"
  }, {
    "left" : "module.setString(moduleName);",
    "right" : "module.setString(moduleName);",
    "info" : "ExpressionStatement[8265-8294]:ExpressionStatement[8288-8317]"
  }, {
    "left" : "Node exports = prop.getChildAtIndex(1);",
    "right" : "Node exports = prop.getChildAtIndex(1);",
    "info" : "VariableDeclarationStatement[8301-8340]:VariableDeclarationStatement[8324-8363]"
  }, {
    "left" : "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");",
    "right" : "exports.putProp(Node.ORIGINALNAME_PROP, \"exports\");",
    "info" : "ExpressionStatement[8347-8398]:ExpressionStatement[8370-8421]"
  }, {
    "left" : "exports.setString(\"module$exports\");",
    "right" : "exports.setString(\"module$exports\");",
    "info" : "ExpressionStatement[8405-8441]:ExpressionStatement[8428-8464]"
  }, {
    "left" : "modulesWithExports.add(moduleName);",
    "right" : "modulesWithExports.add(moduleName);",
    "info" : "ExpressionStatement[8448-8483]:ExpressionStatement[8471-8506]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8555-8562]:Modifier[8578-8585]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[8563-8567]:SimpleType[8586-8590]"
  }, {
    "left" : "getCurrentScriptNode",
    "right" : "getCurrentScriptNode",
    "info" : "SimpleName[8568-8588]:SimpleName[8591-8611]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8589-8595]:SingleVariableDeclaration[8612-8618]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8597-8718]:Block[8620-8741]"
  }, {
    "left" : "while (true)",
    "right" : "while (true)",
    "info" : "WhileStatement[8605-8712]:WhileStatement[8628-8735]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8618-8712]:Block[8641-8735]"
  }, {
    "left" : "if (n.isScript())",
    "right" : "if (n.isScript())",
    "info" : "IfStatement[8628-8677]:IfStatement[8651-8700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8646-8677]:Block[8669-8700]"
  }, {
    "left" : "return n;",
    "right" : "return n;",
    "info" : "ReturnStatement[8658-8667]:ReturnStatement[8681-8690]"
  }, {
    "left" : "n = n.getParent();",
    "right" : "n = n.getParent();",
    "info" : "ExpressionStatement[8686-8704]:ExpressionStatement[8709-8727]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[8816-8823]:Modifier[8839-8846]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[8824-8829]:TYPE_DECLARATION_KIND[8847-8852]"
  }, {
    "left" : "SuffixVarsCallback",
    "right" : "SuffixVarsCallback",
    "info" : "SimpleName[8978-8996]:SimpleName[9001-9019]"
  }, {
    "left" : "String suffix",
    "right" : "String suffix",
    "info" : "SingleVariableDeclaration[8997-9010]:SingleVariableDeclaration[9020-9033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9012-9047]:Block[9035-9070]"
  }, {
    "left" : "this.suffix = suffix;",
    "right" : "this.suffix = suffix;",
    "info" : "ExpressionStatement[9020-9041]:ExpressionStatement[9043-9064]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[9053-9062]:MarkerAnnotation[9076-9085]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9067-9073]:Modifier[9090-9096]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9074-9078]:PrimitiveType[9097-9101]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[9079-9084]:SimpleName[9102-9107]"
  }, {
    "left" : "NodeTraversal t",
    "right" : "NodeTraversal t",
    "info" : "SingleVariableDeclaration[9085-9100]:SingleVariableDeclaration[9108-9123]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[9102-9108]:SingleVariableDeclaration[9125-9131]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[9110-9121]:SingleVariableDeclaration[9133-9144]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9123-9622]:Block[9146-9645]"
  }, {
    "left" : "if (n.isName())",
    "right" : "if (n.isName())",
    "info" : "IfStatement[9131-9616]:IfStatement[9154-9639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9147-9616]:Block[9170-9639]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[9157-9185]:VariableDeclarationStatement[9180-9208]"
  }, {
    "left" : "if (suffix.equals(name))",
    "right" : "if (suffix.equals(name))",
    "info" : "IfStatement[9194-9248]:IfStatement[9217-9271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9219-9248]:Block[9242-9271]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[9231-9238]:ReturnStatement[9254-9261]"
  }, {
    "left" : "if (EXPORTS.equals(name))",
    "right" : "if (EXPORTS.equals(name))",
    "info" : "IfStatement[9257-9608]:IfStatement[9280-9631]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9283-9379]:Block[9306-9402]"
  }, {
    "left" : "n.setString(suffix);",
    "right" : "n.setString(suffix);",
    "info" : "ExpressionStatement[9295-9315]:ExpressionStatement[9318-9338]"
  }, {
    "left" : "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);",
    "right" : "n.putProp(Node.ORIGINALNAME_PROP, EXPORTS);",
    "info" : "ExpressionStatement[9326-9369]:ExpressionStatement[9349-9392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9385-9608]:Block[9408-9631]"
  }, {
    "left" : "Scope.Var var = t.getScope().getVar(name);",
    "right" : "Scope.Var var = t.getScope().getVar(name);",
    "info" : "VariableDeclarationStatement[9397-9439]:VariableDeclarationStatement[9420-9462]"
  }, {
    "left" : "if (var != null && var.isGlobal())",
    "right" : "if (var != null && var.isGlobal())",
    "info" : "IfStatement[9450-9598]:IfStatement[9473-9621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9485-9598]:Block[9508-9621]"
  }, {
    "left" : "n.setString(name + \"$$\" + suffix);",
    "right" : "n.setString(name + \"$$\" + suffix);",
    "info" : "ExpressionStatement[9499-9533]:ExpressionStatement[9522-9556]"
  }, {
    "left" : "n.putProp(Node.ORIGINALNAME_PROP, name);",
    "right" : "n.putProp(Node.ORIGINALNAME_PROP, name);",
    "info" : "ExpressionStatement[9546-9586]:ExpressionStatement[9569-9609]"
  } ]
}