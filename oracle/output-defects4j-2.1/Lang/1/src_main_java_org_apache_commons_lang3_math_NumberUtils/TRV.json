{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public static final Long LONG_ZERO = Long.valueOf(0L);",
      "right" : "public static final Long LONG_ZERO = Long.valueOf(0L);",
      "info" : "FieldDeclaration[1124-1222]:FieldDeclaration[1124-1222]"
    }, {
      "left" : "public static final Long LONG_ONE = Long.valueOf(1L);",
      "right" : "public static final Long LONG_ONE = Long.valueOf(1L);",
      "info" : "FieldDeclaration[1227-1323]:FieldDeclaration[1227-1323]"
    }, {
      "left" : "public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);",
      "right" : "public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);",
      "info" : "FieldDeclaration[1328-1437]:FieldDeclaration[1328-1437]"
    }, {
      "left" : "public static final Integer INTEGER_ZERO = Integer.valueOf(0);",
      "right" : "public static final Integer INTEGER_ZERO = Integer.valueOf(0);",
      "info" : "FieldDeclaration[1442-1551]:FieldDeclaration[1442-1551]"
    }, {
      "left" : "public static final Integer INTEGER_ONE = Integer.valueOf(1);",
      "right" : "public static final Integer INTEGER_ONE = Integer.valueOf(1);",
      "info" : "FieldDeclaration[1556-1663]:FieldDeclaration[1556-1663]"
    }, {
      "left" : "public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);",
      "right" : "public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);",
      "info" : "FieldDeclaration[1668-1788]:FieldDeclaration[1668-1788]"
    }, {
      "left" : "public static final Short SHORT_ZERO = Short.valueOf((short) 0);",
      "right" : "public static final Short SHORT_ZERO = Short.valueOf((short) 0);",
      "info" : "FieldDeclaration[1793-1902]:FieldDeclaration[1793-1902]"
    }, {
      "left" : "public static final Short SHORT_ONE = Short.valueOf((short) 1);",
      "right" : "public static final Short SHORT_ONE = Short.valueOf((short) 1);",
      "info" : "FieldDeclaration[1907-2014]:FieldDeclaration[1907-2014]"
    }, {
      "left" : "public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);",
      "right" : "public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);",
      "info" : "FieldDeclaration[2019-2139]:FieldDeclaration[2019-2139]"
    }, {
      "left" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "right" : "public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);",
      "info" : "FieldDeclaration[2144-2248]:FieldDeclaration[2144-2248]"
    }, {
      "left" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "right" : "public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);",
      "info" : "FieldDeclaration[2253-2355]:FieldDeclaration[2253-2355]"
    }, {
      "left" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "right" : "public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);",
      "info" : "FieldDeclaration[2360-2475]:FieldDeclaration[2360-2475]"
    }, {
      "left" : "public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);",
      "right" : "public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);",
      "info" : "FieldDeclaration[2480-2588]:FieldDeclaration[2480-2588]"
    }, {
      "left" : "public static final Double DOUBLE_ONE = Double.valueOf(1.0d);",
      "right" : "public static final Double DOUBLE_ONE = Double.valueOf(1.0d);",
      "info" : "FieldDeclaration[2593-2699]:FieldDeclaration[2593-2699]"
    }, {
      "left" : "public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);",
      "right" : "public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);",
      "info" : "FieldDeclaration[2704-2823]:FieldDeclaration[2704-2823]"
    }, {
      "left" : "public static final Float FLOAT_ZERO = Float.valueOf(0.0f);",
      "right" : "public static final Float FLOAT_ZERO = Float.valueOf(0.0f);",
      "info" : "FieldDeclaration[2828-2932]:FieldDeclaration[2828-2932]"
    }, {
      "left" : "public static final Float FLOAT_ONE = Float.valueOf(1.0f);",
      "right" : "public static final Float FLOAT_ONE = Float.valueOf(1.0f);",
      "info" : "FieldDeclaration[2937-3039]:FieldDeclaration[2937-3039]"
    }, {
      "left" : "public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);",
      "right" : "public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);",
      "info" : "FieldDeclaration[3044-3159]:FieldDeclaration[3044-3159]"
    }, {
      "left" : "public NumberUtils()",
      "right" : "public NumberUtils()",
      "info" : "MethodDeclaration[3165-3524]:MethodDeclaration[3165-3524]"
    }, {
      "left" : "public static int toInt(final String str)",
      "right" : "public static int toInt(final String str)",
      "info" : "MethodDeclaration[3608-4242]:MethodDeclaration[3608-4242]"
    }, {
      "left" : "public static int toInt(final String str, final int defaultValue)",
      "right" : "public static int toInt(final String str, final int defaultValue)",
      "info" : "MethodDeclaration[4248-5135]:MethodDeclaration[4248-5135]"
    }, {
      "left" : "public static long toLong(final String str)",
      "right" : "public static long toLong(final String str)",
      "info" : "MethodDeclaration[5141-5783]:MethodDeclaration[5141-5783]"
    }, {
      "left" : "public static long toLong(final String str, final long defaultValue)",
      "right" : "public static long toLong(final String str, final long defaultValue)",
      "info" : "MethodDeclaration[5789-6688]:MethodDeclaration[5789-6688]"
    }, {
      "left" : "public static float toFloat(final String str)",
      "right" : "public static float toFloat(final String str)",
      "info" : "MethodDeclaration[6694-7397]:MethodDeclaration[6694-7397]"
    }, {
      "left" : "public static float toFloat(final String str, final float defaultValue)",
      "right" : "public static float toFloat(final String str, final float defaultValue)",
      "info" : "MethodDeclaration[7403-8363]:MethodDeclaration[7403-8363]"
    }, {
      "left" : "public static double toDouble(final String str)",
      "right" : "public static double toDouble(final String str)",
      "info" : "MethodDeclaration[8369-9080]:MethodDeclaration[8369-9080]"
    }, {
      "left" : "public static double toDouble(final String str, final double defaultValue)",
      "right" : "public static double toDouble(final String str, final double defaultValue)",
      "info" : "MethodDeclaration[9086-10051]:MethodDeclaration[9086-10051]"
    }, {
      "left" : "public static byte toByte(final String str)",
      "right" : "public static byte toByte(final String str)",
      "info" : "MethodDeclaration[10137-10785]:MethodDeclaration[10137-10785]"
    }, {
      "left" : "public static byte toByte(final String str, final byte defaultValue)",
      "right" : "public static byte toByte(final String str, final byte defaultValue)",
      "info" : "MethodDeclaration[10791-11683]:MethodDeclaration[10791-11683]"
    }, {
      "left" : "public static short toShort(final String str)",
      "right" : "public static short toShort(final String str)",
      "info" : "MethodDeclaration[11689-12346]:MethodDeclaration[11689-12346]"
    }, {
      "left" : "public static short toShort(final String str, final short defaultValue)",
      "right" : "public static short toShort(final String str, final short defaultValue)",
      "info" : "MethodDeclaration[12352-13255]:MethodDeclaration[12352-13255]"
    }, {
      "left" : "private static boolean isAllZeros(final String str)",
      "right" : "private static boolean isAllZeros(final String str)",
      "info" : "MethodDeclaration[23167-23735]:MethodDeclaration[23600-24168]"
    }, {
      "left" : "public static Float createFloat(final String str)",
      "right" : "public static Float createFloat(final String str)",
      "info" : "MethodDeclaration[23819-24359]:MethodDeclaration[24252-24792]"
    }, {
      "left" : "public static Double createDouble(final String str)",
      "right" : "public static Double createDouble(final String str)",
      "info" : "MethodDeclaration[24365-24910]:MethodDeclaration[24798-25343]"
    }, {
      "left" : "public static Integer createInteger(final String str)",
      "right" : "public static Integer createInteger(final String str)",
      "info" : "MethodDeclaration[24916-25575]:MethodDeclaration[25349-26008]"
    }, {
      "left" : "public static Long createLong(final String str)",
      "right" : "public static Long createLong(final String str)",
      "info" : "MethodDeclaration[25581-26169]:MethodDeclaration[26014-26602]"
    }, {
      "left" : "public static BigInteger createBigInteger(final String str)",
      "right" : "public static BigInteger createBigInteger(final String str)",
      "info" : "MethodDeclaration[26175-27579]:MethodDeclaration[26608-28012]"
    }, {
      "left" : "public static BigDecimal createBigDecimal(final String str)",
      "right" : "public static BigDecimal createBigDecimal(final String str)",
      "info" : "MethodDeclaration[27585-28732]:MethodDeclaration[28018-29165]"
    }, {
      "left" : "public static long min(final long[] array)",
      "right" : "public static long min(final long[] array)",
      "info" : "MethodDeclaration[28833-29505]:MethodDeclaration[29266-29938]"
    }, {
      "left" : "public static int min(final int[] array)",
      "right" : "public static int min(final int[] array)",
      "info" : "MethodDeclaration[29511-30180]:MethodDeclaration[29944-30613]"
    }, {
      "left" : "public static short min(final short[] array)",
      "right" : "public static short min(final short[] array)",
      "info" : "MethodDeclaration[30186-30861]:MethodDeclaration[30619-31294]"
    }, {
      "left" : "public static byte min(final byte[] array)",
      "right" : "public static byte min(final byte[] array)",
      "info" : "MethodDeclaration[30867-31539]:MethodDeclaration[31300-31972]"
    }, {
      "left" : "public static double min(final double[] array)",
      "right" : "public static double min(final double[] array)",
      "info" : "MethodDeclaration[31546-32427]:MethodDeclaration[31979-32860]"
    }, {
      "left" : "public static float min(final float[] array)",
      "right" : "public static float min(final float[] array)",
      "info" : "MethodDeclaration[32433-33308]:MethodDeclaration[32866-33741]"
    }, {
      "left" : "public static long max(final long[] array)",
      "right" : "public static long max(final long[] array)",
      "info" : "MethodDeclaration[33409-34073]:MethodDeclaration[33842-34506]"
    }, {
      "left" : "public static int max(final int[] array)",
      "right" : "public static int max(final int[] array)",
      "info" : "MethodDeclaration[34079-34748]:MethodDeclaration[34512-35181]"
    }, {
      "left" : "public static short max(final short[] array)",
      "right" : "public static short max(final short[] array)",
      "info" : "MethodDeclaration[34754-35429]:MethodDeclaration[35187-35862]"
    }, {
      "left" : "public static byte max(final byte[] array)",
      "right" : "public static byte max(final byte[] array)",
      "info" : "MethodDeclaration[35435-36107]:MethodDeclaration[35868-36540]"
    }, {
      "left" : "public static double max(final double[] array)",
      "right" : "public static double max(final double[] array)",
      "info" : "MethodDeclaration[36113-36990]:MethodDeclaration[36546-37423]"
    }, {
      "left" : "public static float max(final float[] array)",
      "right" : "public static float max(final float[] array)",
      "info" : "MethodDeclaration[36996-37863]:MethodDeclaration[37429-38296]"
    }, {
      "left" : "private static void validateArray(final Object array)",
      "right" : "private static void validateArray(final Object array)",
      "info" : "MethodDeclaration[37869-38387]:MethodDeclaration[38302-38820]"
    }, {
      "left" : "public static long min(long a, final long b, final long c)",
      "right" : "public static long min(long a, final long b, final long c)",
      "info" : "MethodDeclaration[38495-38887]:MethodDeclaration[38928-39320]"
    }, {
      "left" : "public static int min(int a, final int b, final int c)",
      "right" : "public static int min(int a, final int b, final int c)",
      "info" : "MethodDeclaration[38893-39280]:MethodDeclaration[39326-39713]"
    }, {
      "left" : "public static short min(short a, final short b, final short c)",
      "right" : "public static short min(short a, final short b, final short c)",
      "info" : "MethodDeclaration[39286-39683]:MethodDeclaration[39719-40116]"
    }, {
      "left" : "public static byte min(byte a, final byte b, final byte c)",
      "right" : "public static byte min(byte a, final byte b, final byte c)",
      "info" : "MethodDeclaration[39689-40081]:MethodDeclaration[40122-40514]"
    }, {
      "left" : "public static double min(final double a, final double b, final double c)",
      "right" : "public static double min(final double a, final double b, final double c)",
      "info" : "MethodDeclaration[40087-40647]:MethodDeclaration[40520-41080]"
    }, {
      "left" : "public static float min(final float a, final float b, final float c)",
      "right" : "public static float min(final float a, final float b, final float c)",
      "info" : "MethodDeclaration[40653-41204]:MethodDeclaration[41086-41637]"
    }, {
      "left" : "public static long max(long a, final long b, final long c)",
      "right" : "public static long max(long a, final long b, final long c)",
      "info" : "MethodDeclaration[41307-41698]:MethodDeclaration[41740-42131]"
    }, {
      "left" : "public static int max(int a, final int b, final int c)",
      "right" : "public static int max(int a, final int b, final int c)",
      "info" : "MethodDeclaration[41704-42090]:MethodDeclaration[42137-42523]"
    }, {
      "left" : "public static short max(short a, final short b, final short c)",
      "right" : "public static short max(short a, final short b, final short c)",
      "info" : "MethodDeclaration[42096-42492]:MethodDeclaration[42529-42925]"
    }, {
      "left" : "public static byte max(byte a, final byte b, final byte c)",
      "right" : "public static byte max(byte a, final byte b, final byte c)",
      "info" : "MethodDeclaration[42498-42889]:MethodDeclaration[42931-43322]"
    }, {
      "left" : "public static double max(final double a, final double b, final double c)",
      "right" : "public static double max(final double a, final double b, final double c)",
      "info" : "MethodDeclaration[42895-43453]:MethodDeclaration[43328-43886]"
    }, {
      "left" : "public static float max(final float a, final float b, final float c)",
      "right" : "public static float max(final float a, final float b, final float c)",
      "info" : "MethodDeclaration[43459-44009]:MethodDeclaration[43892-44442]"
    }, {
      "left" : "public static boolean isDigits(final String str)",
      "right" : "public static boolean isDigits(final String str)",
      "info" : "MethodDeclaration[44093-44734]:MethodDeclaration[44526-45167]"
    }, {
      "left" : "public static boolean isNumber(final String str)",
      "right" : "public static boolean isNumber(final String str)",
      "info" : "MethodDeclaration[44740-49041]:MethodDeclaration[45173-49474]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3500-3524]:Block[3500-3524]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[3510-3518]:SuperConstructorInvocation[3510-3518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4205-4242]:Block[4205-4242]"
    }, {
      "left" : "return toInt(str, 0);",
      "right" : "return toInt(str, 0);",
      "info" : "ReturnStatement[4215-4236]:ReturnStatement[4215-4236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4908-5135]:Block[4908-5135]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[4918-4978]:IfStatement[4918-4978]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4934-4978]:Block[4934-4978]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[4948-4968]:ReturnStatement[4948-4968]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[4987-5129]:TryStatement[4987-5129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4991-5044]:Block[4991-5044]"
    }, {
      "left" : "return Integer.parseInt(str);",
      "right" : "return Integer.parseInt(str);",
      "info" : "ReturnStatement[5005-5034]:ReturnStatement[5005-5034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5085-5129]:Block[5085-5129]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[5099-5119]:ReturnStatement[5099-5119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5744-5783]:Block[5744-5783]"
    }, {
      "left" : "return toLong(str, 0L);",
      "right" : "return toLong(str, 0L);",
      "info" : "ReturnStatement[5754-5777]:ReturnStatement[5754-5777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6462-6688]:Block[6462-6688]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[6472-6533]:IfStatement[6472-6533]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6489-6533]:Block[6489-6533]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6503-6523]:ReturnStatement[6503-6523]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6542-6682]:TryStatement[6542-6682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6546-6597]:Block[6546-6597]"
    }, {
      "left" : "return Long.parseLong(str);",
      "right" : "return Long.parseLong(str);",
      "info" : "ReturnStatement[6560-6587]:ReturnStatement[6560-6587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6638-6682]:Block[6638-6682]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[6652-6672]:ReturnStatement[6652-6672]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7355-7397]:Block[7355-7397]"
    }, {
      "left" : "return toFloat(str, 0.0f);",
      "right" : "return toFloat(str, 0.0f);",
      "info" : "ReturnStatement[7365-7391]:ReturnStatement[7365-7391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8146-8363]:Block[8146-8363]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[8154-8211]:IfStatement[8154-8211]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8171-8211]:Block[8171-8211]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8183-8203]:ReturnStatement[8183-8203]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8223-8357]:TryStatement[8223-8357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8227-8276]:Block[8227-8276]"
    }, {
      "left" : "return Float.parseFloat(str);",
      "right" : "return Float.parseFloat(str);",
      "info" : "ReturnStatement[8239-8268]:ReturnStatement[8239-8268]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8317-8357]:Block[8317-8357]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[8329-8349]:ReturnStatement[8329-8349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9037-9080]:Block[9037-9080]"
    }, {
      "left" : "return toDouble(str, 0.0d);",
      "right" : "return toDouble(str, 0.0d);",
      "info" : "ReturnStatement[9047-9074]:ReturnStatement[9047-9074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9837-10051]:Block[9837-10051]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[9845-9902]:IfStatement[9845-9902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9862-9902]:Block[9862-9902]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[9874-9894]:ReturnStatement[9874-9894]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9909-10045]:TryStatement[9909-10045]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9913-9964]:Block[9913-9964]"
    }, {
      "left" : "return Double.parseDouble(str);",
      "right" : "return Double.parseDouble(str);",
      "info" : "ReturnStatement[9925-9956]:ReturnStatement[9925-9956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10005-10045]:Block[10005-10045]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[10017-10037]:ReturnStatement[10017-10037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10740-10785]:Block[10740-10785]"
    }, {
      "left" : "return toByte(str, (byte) 0);",
      "right" : "return toByte(str, (byte) 0);",
      "info" : "ReturnStatement[10750-10779]:ReturnStatement[10750-10779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11458-11683]:Block[11458-11683]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[11468-11528]:IfStatement[11468-11528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11484-11528]:Block[11484-11528]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11498-11518]:ReturnStatement[11498-11518]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11537-11677]:TryStatement[11537-11677]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11541-11592]:Block[11541-11592]"
    }, {
      "left" : "return Byte.parseByte(str);",
      "right" : "return Byte.parseByte(str);",
      "info" : "ReturnStatement[11555-11582]:ReturnStatement[11555-11582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11633-11677]:Block[11633-11677]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[11647-11667]:ReturnStatement[11647-11667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12299-12346]:Block[12299-12346]"
    }, {
      "left" : "return toShort(str, (short) 0);",
      "right" : "return toShort(str, (short) 0);",
      "info" : "ReturnStatement[12309-12340]:ReturnStatement[12309-12340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13028-13255]:Block[13028-13255]"
    }, {
      "left" : "if(str == null)",
      "right" : "if(str == null)",
      "info" : "IfStatement[13038-13098]:IfStatement[13038-13098]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13054-13098]:Block[13054-13098]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13068-13088]:ReturnStatement[13068-13088]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[13107-13249]:TryStatement[13107-13249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13111-13164]:Block[13111-13164]"
    }, {
      "left" : "return Short.parseShort(str);",
      "right" : "return Short.parseShort(str);",
      "info" : "ReturnStatement[13125-13154]:ReturnStatement[13125-13154]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13205-13249]:Block[13205-13249]"
    }, {
      "left" : "return defaultValue;",
      "right" : "return defaultValue;",
      "info" : "ReturnStatement[13219-13239]:ReturnStatement[13219-13239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23485-23735]:Block[23918-24168]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[23495-23548]:IfStatement[23928-23981]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23512-23548]:Block[23945-23981]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23526-23538]:ReturnStatement[23959-23971]"
    }, {
      "left" : "for (int i = str.length() - 1; i >= 0; i--)",
      "right" : "for (int i = str.length() - 1; i >= 0; i--)",
      "info" : "ForStatement[23557-23696]:ForStatement[23990-24129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23601-23696]:Block[24034-24129]"
    }, {
      "left" : "if (str.charAt(i) != '0')",
      "right" : "if (str.charAt(i) != '0')",
      "info" : "IfStatement[23615-23686]:IfStatement[24048-24119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23641-23686]:Block[24074-24119]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23659-23672]:ReturnStatement[24092-24105]"
    }, {
      "left" : "return str.length() > 0;",
      "right" : "return str.length() > 0;",
      "info" : "ReturnStatement[23705-23729]:ReturnStatement[24138-24162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24255-24359]:Block[24688-24792]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24265-24318]:IfStatement[24698-24751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24282-24318]:Block[24715-24751]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24296-24308]:ReturnStatement[24729-24741]"
    }, {
      "left" : "return Float.valueOf(str);",
      "right" : "return Float.valueOf(str);",
      "info" : "ReturnStatement[24327-24353]:ReturnStatement[24760-24786]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24805-24910]:Block[25238-25343]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[24815-24868]:IfStatement[25248-25301]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24832-24868]:Block[25265-25301]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24846-24858]:ReturnStatement[25279-25291]"
    }, {
      "left" : "return Double.valueOf(str);",
      "right" : "return Double.valueOf(str);",
      "info" : "ReturnStatement[24877-24904]:ReturnStatement[25310-25337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25401-25575]:Block[25834-26008]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[25411-25464]:IfStatement[25844-25897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25428-25464]:Block[25861-25897]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25442-25454]:ReturnStatement[25875-25887]"
    }, {
      "left" : "return Integer.decode(str);",
      "right" : "return Integer.decode(str);",
      "info" : "ReturnStatement[25542-25569]:ReturnStatement[25975-26002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26067-26169]:Block[26500-26602]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[26077-26130]:IfStatement[26510-26563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26094-26130]:Block[26527-26563]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26108-26120]:ReturnStatement[26541-26553]"
    }, {
      "left" : "return Long.decode(str);",
      "right" : "return Long.decode(str);",
      "info" : "ReturnStatement[26139-26163]:ReturnStatement[26572-26596]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26698-27579]:Block[27131-28012]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[26708-26761]:IfStatement[27141-27194]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26725-26761]:Block[27158-27194]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[26739-26751]:ReturnStatement[27172-27184]"
    }, {
      "left" : "int pos = 0;",
      "right" : "int pos = 0;",
      "info" : "VariableDeclarationStatement[26770-26782]:VariableDeclarationStatement[27203-27215]"
    }, {
      "left" : "int radix = 10;",
      "right" : "int radix = 10;",
      "info" : "VariableDeclarationStatement[26815-26830]:VariableDeclarationStatement[27248-27263]"
    }, {
      "left" : "boolean negate = false;",
      "right" : "boolean negate = false;",
      "info" : "VariableDeclarationStatement[26839-26862]:VariableDeclarationStatement[27272-27295]"
    }, {
      "left" : "if (str.startsWith(\"-\"))",
      "right" : "if (str.startsWith(\"-\"))",
      "info" : "IfStatement[26896-26980]:IfStatement[27329-27413]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26921-26980]:Block[27354-27413]"
    }, {
      "left" : "negate = true;",
      "right" : "negate = true;",
      "info" : "ExpressionStatement[26935-26949]:ExpressionStatement[27368-27382]"
    }, {
      "left" : "pos = 1;",
      "right" : "pos = 1;",
      "info" : "ExpressionStatement[26962-26970]:ExpressionStatement[27395-27403]"
    }, {
      "left" : "if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos))",
      "right" : "if (str.startsWith(\"0x\", pos) || str.startsWith(\"0x\", pos))",
      "info" : "IfStatement[26989-27414]:IfStatement[27422-27847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27049-27113]:Block[27482-27546]"
    }, {
      "left" : "radix = 16;",
      "right" : "radix = 16;",
      "info" : "ExpressionStatement[27070-27081]:ExpressionStatement[27503-27514]"
    }, {
      "left" : "pos += 2;",
      "right" : "pos += 2;",
      "info" : "ExpressionStatement[27094-27103]:ExpressionStatement[27527-27536]"
    }, {
      "left" : "if (str.startsWith(\"#\", pos))",
      "right" : "if (str.startsWith(\"#\", pos))",
      "info" : "IfStatement[27119-27414]:IfStatement[27552-27847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27149-27249]:Block[27582-27682]"
    }, {
      "left" : "radix = 16;",
      "right" : "radix = 16;",
      "info" : "ExpressionStatement[27208-27219]:ExpressionStatement[27641-27652]"
    }, {
      "left" : "pos ++;",
      "right" : "pos ++;",
      "info" : "ExpressionStatement[27232-27239]:ExpressionStatement[27665-27672]"
    }, {
      "left" : "if (str.startsWith(\"0\", pos) && str.length() > pos + 1)",
      "right" : "if (str.startsWith(\"0\", pos) && str.length() > pos + 1)",
      "info" : "IfStatement[27255-27414]:IfStatement[27688-27847]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27311-27414]:Block[27744-27847]"
    }, {
      "left" : "radix = 8;",
      "right" : "radix = 8;",
      "info" : "ExpressionStatement[27374-27384]:ExpressionStatement[27807-27817]"
    }, {
      "left" : "pos ++;",
      "right" : "pos ++;",
      "info" : "ExpressionStatement[27397-27404]:ExpressionStatement[27830-27837]"
    }, {
      "left" : "final BigInteger value = new BigInteger(str.substring(pos), radix);",
      "right" : "final BigInteger value = new BigInteger(str.substring(pos), radix);",
      "info" : "VariableDeclarationStatement[27458-27525]:VariableDeclarationStatement[27891-27958]"
    }, {
      "left" : "return negate ? value.negate() : value;",
      "right" : "return negate ? value.negate() : value;",
      "info" : "ReturnStatement[27534-27573]:ReturnStatement[27967-28006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28041-28732]:Block[28474-29165]"
    }, {
      "left" : "if (str == null)",
      "right" : "if (str == null)",
      "info" : "IfStatement[28051-28104]:IfStatement[28484-28537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28068-28104]:Block[28501-28537]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[28082-28094]:ReturnStatement[28515-28527]"
    }, {
      "left" : "if (StringUtils.isBlank(str))",
      "right" : "if (StringUtils.isBlank(str))",
      "info" : "IfStatement[28186-28312]:IfStatement[28619-28745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28216-28312]:Block[28649-28745]"
    }, {
      "left" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "right" : "throw new NumberFormatException(\"A blank string is not a valid number\");",
      "info" : "ThrowStatement[28230-28302]:ThrowStatement[28663-28735]"
    }, {
      "left" : "if (str.trim().startsWith(\"--\"))",
      "right" : "if (str.trim().startsWith(\"--\"))",
      "info" : "IfStatement[28321-28690]:IfStatement[28754-29123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28354-28690]:Block[28787-29123]"
    }, {
      "left" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "right" : "throw new NumberFormatException(str + \" is not a valid number.\");",
      "info" : "ThrowStatement[28615-28680]:ThrowStatement[29048-29113]"
    }, {
      "left" : "return new BigDecimal(str);",
      "right" : "return new BigDecimal(str);",
      "info" : "ReturnStatement[28699-28726]:ReturnStatement[29132-29159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29210-29505]:Block[29643-29938]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[29247-29268]:ExpressionStatement[29680-29701]"
    }, {
      "left" : "long min = array[0];",
      "right" : "long min = array[0];",
      "info" : "VariableDeclarationStatement[29315-29335]:VariableDeclarationStatement[29748-29768]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[29344-29474]:ForStatement[29777-29907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29383-29474]:Block[29816-29907]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[29397-29464]:IfStatement[29830-29897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29417-29464]:Block[29850-29897]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[29435-29450]:ExpressionStatement[29868-29883]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[29488-29499]:ReturnStatement[29921-29932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29886-30180]:Block[30319-30613]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[29923-29944]:ExpressionStatement[30356-30377]"
    }, {
      "left" : "int min = array[0];",
      "right" : "int min = array[0];",
      "info" : "VariableDeclarationStatement[29991-30010]:VariableDeclarationStatement[30424-30443]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[30019-30149]:ForStatement[30452-30582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30058-30149]:Block[30491-30582]"
    }, {
      "left" : "if (array[j] < min)",
      "right" : "if (array[j] < min)",
      "info" : "IfStatement[30072-30139]:IfStatement[30505-30572]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30092-30139]:Block[30525-30572]"
    }, {
      "left" : "min = array[j];",
      "right" : "min = array[j];",
      "info" : "ExpressionStatement[30110-30125]:ExpressionStatement[30543-30558]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[30163-30174]:ReturnStatement[30596-30607]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30565-30861]:Block[30998-31294]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[30602-30623]:ExpressionStatement[31035-31056]"
    }, {
      "left" : "short min = array[0];",
      "right" : "short min = array[0];",
      "info" : "VariableDeclarationStatement[30670-30691]:VariableDeclarationStatement[31103-31124]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[30700-30830]:ForStatement[31133-31263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30739-30830]:Block[31172-31263]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[30753-30820]:IfStatement[31186-31253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30773-30820]:Block[31206-31253]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[30791-30806]:ExpressionStatement[31224-31239]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[30844-30855]:ReturnStatement[31277-31288]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31244-31539]:Block[31677-31972]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[31281-31302]:ExpressionStatement[31714-31735]"
    }, {
      "left" : "byte min = array[0];",
      "right" : "byte min = array[0];",
      "info" : "VariableDeclarationStatement[31349-31369]:VariableDeclarationStatement[31782-31802]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[31378-31508]:ForStatement[31811-31941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31417-31508]:Block[31850-31941]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[31431-31498]:IfStatement[31864-31931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31451-31498]:Block[31884-31931]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[31469-31484]:ExpressionStatement[31902-31917]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[31522-31533]:ReturnStatement[31955-31966]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32039-32427]:Block[32472-32860]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[32076-32097]:ExpressionStatement[32509-32530]"
    }, {
      "left" : "double min = array[0];",
      "right" : "double min = array[0];",
      "info" : "VariableDeclarationStatement[32144-32166]:VariableDeclarationStatement[32577-32599]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[32175-32396]:ForStatement[32608-32829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32214-32396]:Block[32647-32829]"
    }, {
      "left" : "if (Double.isNaN(array[i]))",
      "right" : "if (Double.isNaN(array[i]))",
      "info" : "IfStatement[32228-32306]:IfStatement[32661-32739]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32256-32306]:Block[32689-32739]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[32274-32292]:ReturnStatement[32707-32725]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[32319-32386]:IfStatement[32752-32819]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32339-32386]:Block[32772-32819]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[32357-32372]:ExpressionStatement[32790-32805]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[32410-32421]:ReturnStatement[32843-32854]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32923-33308]:Block[33356-33741]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[32960-32981]:ExpressionStatement[33393-33414]"
    }, {
      "left" : "float min = array[0];",
      "right" : "float min = array[0];",
      "info" : "VariableDeclarationStatement[33028-33049]:VariableDeclarationStatement[33461-33482]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[33058-33277]:ForStatement[33491-33710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33097-33277]:Block[33530-33710]"
    }, {
      "left" : "if (Float.isNaN(array[i]))",
      "right" : "if (Float.isNaN(array[i]))",
      "info" : "IfStatement[33111-33187]:IfStatement[33544-33620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33138-33187]:Block[33571-33620]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[33156-33173]:ReturnStatement[33589-33606]"
    }, {
      "left" : "if (array[i] < min)",
      "right" : "if (array[i] < min)",
      "info" : "IfStatement[33200-33267]:IfStatement[33633-33700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33220-33267]:Block[33653-33700]"
    }, {
      "left" : "min = array[i];",
      "right" : "min = array[i];",
      "info" : "ExpressionStatement[33238-33253]:ExpressionStatement[33671-33686]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[33291-33302]:ReturnStatement[33724-33735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33786-34073]:Block[34219-34506]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[33823-33844]:ExpressionStatement[34256-34277]"
    }, {
      "left" : "long max = array[0];",
      "right" : "long max = array[0];",
      "info" : "VariableDeclarationStatement[33887-33907]:VariableDeclarationStatement[34320-34340]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[33916-34046]:ForStatement[34349-34479]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33955-34046]:Block[34388-34479]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[33969-34036]:IfStatement[34402-34469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33989-34036]:Block[34422-34469]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[34007-34022]:ExpressionStatement[34440-34455]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[34056-34067]:ReturnStatement[34489-34500]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34454-34748]:Block[34887-35181]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[34491-34512]:ExpressionStatement[34924-34945]"
    }, {
      "left" : "int max = array[0];",
      "right" : "int max = array[0];",
      "info" : "VariableDeclarationStatement[34559-34578]:VariableDeclarationStatement[34992-35011]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[34587-34717]:ForStatement[35020-35150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34626-34717]:Block[35059-35150]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[34640-34707]:IfStatement[35073-35140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34660-34707]:Block[35093-35140]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[34678-34693]:ExpressionStatement[35111-35126]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[34731-34742]:ReturnStatement[35164-35175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35133-35429]:Block[35566-35862]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[35170-35191]:ExpressionStatement[35603-35624]"
    }, {
      "left" : "short max = array[0];",
      "right" : "short max = array[0];",
      "info" : "VariableDeclarationStatement[35238-35259]:VariableDeclarationStatement[35671-35692]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[35268-35398]:ForStatement[35701-35831]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35307-35398]:Block[35740-35831]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[35321-35388]:IfStatement[35754-35821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35341-35388]:Block[35774-35821]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[35359-35374]:ExpressionStatement[35792-35807]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[35412-35423]:ReturnStatement[35845-35856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35812-36107]:Block[36245-36540]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[35849-35870]:ExpressionStatement[36282-36303]"
    }, {
      "left" : "byte max = array[0];",
      "right" : "byte max = array[0];",
      "info" : "VariableDeclarationStatement[35917-35937]:VariableDeclarationStatement[36350-36370]"
    }, {
      "left" : "for (int i = 1; i < array.length; i++)",
      "right" : "for (int i = 1; i < array.length; i++)",
      "info" : "ForStatement[35946-36076]:ForStatement[36379-36509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35985-36076]:Block[36418-36509]"
    }, {
      "left" : "if (array[i] > max)",
      "right" : "if (array[i] > max)",
      "info" : "IfStatement[35999-36066]:IfStatement[36432-36499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36019-36066]:Block[36452-36499]"
    }, {
      "left" : "max = array[i];",
      "right" : "max = array[i];",
      "info" : "ExpressionStatement[36037-36052]:ExpressionStatement[36470-36485]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[36090-36101]:ReturnStatement[36523-36534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36606-36990]:Block[37039-37423]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[36643-36664]:ExpressionStatement[37076-37097]"
    }, {
      "left" : "double max = array[0];",
      "right" : "double max = array[0];",
      "info" : "VariableDeclarationStatement[36707-36729]:VariableDeclarationStatement[37140-37162]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[36738-36959]:ForStatement[37171-37392]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36777-36959]:Block[37210-37392]"
    }, {
      "left" : "if (Double.isNaN(array[j]))",
      "right" : "if (Double.isNaN(array[j]))",
      "info" : "IfStatement[36791-36869]:IfStatement[37224-37302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36819-36869]:Block[37252-37302]"
    }, {
      "left" : "return Double.NaN;",
      "right" : "return Double.NaN;",
      "info" : "ReturnStatement[36837-36855]:ReturnStatement[37270-37288]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[36882-36949]:IfStatement[37315-37382]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36902-36949]:Block[37335-37382]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[36920-36935]:ExpressionStatement[37353-37368]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[36973-36984]:ReturnStatement[37406-37417]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37486-37863]:Block[37919-38296]"
    }, {
      "left" : "validateArray(array);",
      "right" : "validateArray(array);",
      "info" : "ExpressionStatement[37523-37544]:ExpressionStatement[37956-37977]"
    }, {
      "left" : "float max = array[0];",
      "right" : "float max = array[0];",
      "info" : "VariableDeclarationStatement[37587-37608]:VariableDeclarationStatement[38020-38041]"
    }, {
      "left" : "for (int j = 1; j < array.length; j++)",
      "right" : "for (int j = 1; j < array.length; j++)",
      "info" : "ForStatement[37617-37836]:ForStatement[38050-38269]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37656-37836]:Block[38089-38269]"
    }, {
      "left" : "if (Float.isNaN(array[j]))",
      "right" : "if (Float.isNaN(array[j]))",
      "info" : "IfStatement[37670-37746]:IfStatement[38103-38179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37697-37746]:Block[38130-38179]"
    }, {
      "left" : "return Float.NaN;",
      "right" : "return Float.NaN;",
      "info" : "ReturnStatement[37715-37732]:ReturnStatement[38148-38165]"
    }, {
      "left" : "if (array[j] > max)",
      "right" : "if (array[j] > max)",
      "info" : "IfStatement[37759-37826]:IfStatement[38192-38259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37779-37826]:Block[38212-38259]"
    }, {
      "left" : "max = array[j];",
      "right" : "max = array[j];",
      "info" : "ExpressionStatement[37797-37812]:ExpressionStatement[38230-38245]"
    }, {
      "left" : "return max;",
      "right" : "return max;",
      "info" : "ReturnStatement[37846-37857]:ReturnStatement[38279-38290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38139-38387]:Block[38572-38820]"
    }, {
      "left" : "if (array == null)",
      "right" : "if (array == null)",
      "info" : "IfStatement[38149-38381]:IfStatement[38582-38814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38168-38257]:Block[38601-38690]"
    }, {
      "left" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "right" : "throw new IllegalArgumentException(\"The Array must not be null\");",
      "info" : "ThrowStatement[38182-38247]:ThrowStatement[38615-38680]"
    }, {
      "left" : "if (Array.getLength(array) == 0)",
      "right" : "if (Array.getLength(array) == 0)",
      "info" : "IfStatement[38263-38381]:IfStatement[38696-38814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38296-38381]:Block[38729-38814]"
    }, {
      "left" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "right" : "throw new IllegalArgumentException(\"Array cannot be empty.\");",
      "info" : "ThrowStatement[38310-38371]:ThrowStatement[38743-38804]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38762-38887]:Block[39195-39320]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[38772-38813]:IfStatement[39205-39246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38783-38813]:Block[39216-39246]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[38797-38803]:ExpressionStatement[39230-39236]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[38822-38863]:IfStatement[39255-39296]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38833-38863]:Block[39266-39296]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[38847-38853]:ExpressionStatement[39280-39286]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[38872-38881]:ReturnStatement[39305-39314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39155-39280]:Block[39588-39713]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39165-39206]:IfStatement[39598-39639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39176-39206]:Block[39609-39639]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39190-39196]:ExpressionStatement[39623-39629]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[39215-39256]:IfStatement[39648-39689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39226-39256]:Block[39659-39689]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[39240-39246]:ExpressionStatement[39673-39679]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39265-39274]:ReturnStatement[39698-39707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39558-39683]:Block[39991-40116]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39568-39609]:IfStatement[40001-40042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39579-39609]:Block[40012-40042]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39593-39599]:ExpressionStatement[40026-40032]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[39618-39659]:IfStatement[40051-40092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39629-39659]:Block[40062-40092]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[39643-39649]:ExpressionStatement[40076-40082]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[39668-39677]:ReturnStatement[40101-40110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39956-40081]:Block[40389-40514]"
    }, {
      "left" : "if (b < a)",
      "right" : "if (b < a)",
      "info" : "IfStatement[39966-40007]:IfStatement[40399-40440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39977-40007]:Block[40410-40440]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[39991-39997]:ExpressionStatement[40424-40430]"
    }, {
      "left" : "if (c < a)",
      "right" : "if (c < a)",
      "info" : "IfStatement[40016-40057]:IfStatement[40449-40490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40027-40057]:Block[40460-40490]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[40041-40047]:ExpressionStatement[40474-40480]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[40066-40075]:ReturnStatement[40499-40508]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40596-40647]:Block[41029-41080]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[40606-40641]:ReturnStatement[41039-41074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41153-41204]:Block[41586-41637]"
    }, {
      "left" : "return Math.min(Math.min(a, b), c);",
      "right" : "return Math.min(Math.min(a, b), c);",
      "info" : "ReturnStatement[41163-41198]:ReturnStatement[41596-41631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41573-41698]:Block[42006-42131]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41583-41624]:IfStatement[42016-42057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41594-41624]:Block[42027-42057]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[41608-41614]:ExpressionStatement[42041-42047]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[41633-41674]:IfStatement[42066-42107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41644-41674]:Block[42077-42107]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[41658-41664]:ExpressionStatement[42091-42097]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[41683-41692]:ReturnStatement[42116-42125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41965-42090]:Block[42398-42523]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[41975-42016]:IfStatement[42408-42449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41986-42016]:Block[42419-42449]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42000-42006]:ExpressionStatement[42433-42439]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42025-42066]:IfStatement[42458-42499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42036-42066]:Block[42469-42499]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42050-42056]:ExpressionStatement[42483-42489]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42075-42084]:ReturnStatement[42508-42517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42367-42492]:Block[42800-42925]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[42377-42418]:IfStatement[42810-42851]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42388-42418]:Block[42821-42851]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42402-42408]:ExpressionStatement[42835-42841]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42427-42468]:IfStatement[42860-42901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42438-42468]:Block[42871-42901]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42452-42458]:ExpressionStatement[42885-42891]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42477-42486]:ReturnStatement[42910-42919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42764-42889]:Block[43197-43322]"
    }, {
      "left" : "if (b > a)",
      "right" : "if (b > a)",
      "info" : "IfStatement[42774-42815]:IfStatement[43207-43248]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42785-42815]:Block[43218-43248]"
    }, {
      "left" : "a = b;",
      "right" : "a = b;",
      "info" : "ExpressionStatement[42799-42805]:ExpressionStatement[43232-43238]"
    }, {
      "left" : "if (c > a)",
      "right" : "if (c > a)",
      "info" : "IfStatement[42824-42865]:IfStatement[43257-43298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42835-42865]:Block[43268-43298]"
    }, {
      "left" : "a = c;",
      "right" : "a = c;",
      "info" : "ExpressionStatement[42849-42855]:ExpressionStatement[43282-43288]"
    }, {
      "left" : "return a;",
      "right" : "return a;",
      "info" : "ReturnStatement[42874-42883]:ReturnStatement[43307-43316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43402-43453]:Block[43835-43886]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[43412-43447]:ReturnStatement[43845-43880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43958-44009]:Block[44391-44442]"
    }, {
      "left" : "return Math.max(Math.max(a, b), c);",
      "right" : "return Math.max(Math.max(a, b), c);",
      "info" : "ReturnStatement[43968-44003]:ReturnStatement[44401-44436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44474-44734]:Block[44907-45167]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[44484-44551]:IfStatement[44917-44984]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44514-44551]:Block[44947-44984]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44528-44541]:ReturnStatement[44961-44974]"
    }, {
      "left" : "for (int i = 0; i < str.length(); i++)",
      "right" : "for (int i = 0; i < str.length(); i++)",
      "info" : "ForStatement[44560-44707]:ForStatement[44993-45140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44599-44707]:Block[45032-45140]"
    }, {
      "left" : "if (!Character.isDigit(str.charAt(i)))",
      "right" : "if (!Character.isDigit(str.charAt(i)))",
      "info" : "IfStatement[44613-44697]:IfStatement[45046-45130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44652-44697]:Block[45085-45130]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[44670-44683]:ReturnStatement[45103-45116]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[44716-44728]:ReturnStatement[45149-45161]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45285-49041]:Block[45718-49474]"
    }, {
      "left" : "if (StringUtils.isEmpty(str))",
      "right" : "if (StringUtils.isEmpty(str))",
      "info" : "IfStatement[45295-45362]:IfStatement[45728-45795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45325-45362]:Block[45758-45795]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45339-45352]:ReturnStatement[45772-45785]"
    }, {
      "left" : "final char[] chars = str.toCharArray();",
      "right" : "final char[] chars = str.toCharArray();",
      "info" : "VariableDeclarationStatement[45371-45410]:VariableDeclarationStatement[45804-45843]"
    }, {
      "left" : "int sz = chars.length;",
      "right" : "int sz = chars.length;",
      "info" : "VariableDeclarationStatement[45419-45441]:VariableDeclarationStatement[45852-45874]"
    }, {
      "left" : "boolean hasExp = false;",
      "right" : "boolean hasExp = false;",
      "info" : "VariableDeclarationStatement[45450-45473]:VariableDeclarationStatement[45883-45906]"
    }, {
      "left" : "boolean hasDecPoint = false;",
      "right" : "boolean hasDecPoint = false;",
      "info" : "VariableDeclarationStatement[45482-45510]:VariableDeclarationStatement[45915-45943]"
    }, {
      "left" : "boolean allowSigns = false;",
      "right" : "boolean allowSigns = false;",
      "info" : "VariableDeclarationStatement[45519-45546]:VariableDeclarationStatement[45952-45979]"
    }, {
      "left" : "boolean foundDigit = false;",
      "right" : "boolean foundDigit = false;",
      "info" : "VariableDeclarationStatement[45555-45582]:VariableDeclarationStatement[45988-46015]"
    }, {
      "left" : "final int start = (chars[0] == '-') ? 1 : 0;",
      "right" : "final int start = (chars[0] == '-') ? 1 : 0;",
      "info" : "VariableDeclarationStatement[45639-45683]:VariableDeclarationStatement[46072-46116]"
    }, {
      "left" : "if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x')",
      "right" : "if (sz > start + 1 && chars[start] == '0' && chars[start + 1] == 'x')",
      "info" : "IfStatement[45692-46255]:IfStatement[46125-46688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45762-46255]:Block[46195-46688]"
    }, {
      "left" : "int i = start + 2;",
      "right" : "int i = start + 2;",
      "info" : "VariableDeclarationStatement[45776-45794]:VariableDeclarationStatement[46209-46227]"
    }, {
      "left" : "if (i == sz)",
      "right" : "if (i == sz)",
      "info" : "IfStatement[45807-45880]:IfStatement[46240-46313]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45820-45880]:Block[46253-46313]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[45838-45851]:ReturnStatement[46271-46284]"
    }, {
      "left" : "for (; i < chars.length; i++)",
      "right" : "for (; i < chars.length; i++)",
      "info" : "ForStatement[45949-46220]:ForStatement[46382-46653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45979-46220]:Block[46412-46653]"
    }, {
      "left" : "if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F'))",
      "right" : "if ((chars[i] < '0' || chars[i] > '9')\n                    && (chars[i] < 'a' || chars[i] > 'f')\n                    && (chars[i] < 'A' || chars[i] > 'F'))",
      "info" : "IfStatement[45997-46206]:IfStatement[46430-46639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46153-46206]:Block[46586-46639]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46175-46188]:ReturnStatement[46608-46621]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[46233-46245]:ReturnStatement[46666-46678]"
    }, {
      "left" : "sz--;",
      "right" : "sz--;",
      "info" : "ExpressionStatement[46264-46269]:ExpressionStatement[46697-46702]"
    }, {
      "left" : "int i = start;",
      "right" : "int i = start;",
      "info" : "VariableDeclarationStatement[46375-46389]:VariableDeclarationStatement[46808-46822]"
    }, {
      "left" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "right" : "while (i < sz || (i < sz + 1 && allowSigns && !foundDigit))",
      "info" : "WhileStatement[46547-47695]:WhileStatement[46980-48128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46607-47695]:Block[47040-48128]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[46621-47668]:IfStatement[47054-48101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46661-46748]:Block[47094-47181]"
    }, {
      "left" : "foundDigit = true;",
      "right" : "foundDigit = true;",
      "info" : "ExpressionStatement[46679-46697]:ExpressionStatement[47112-47130]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[46714-46733]:ExpressionStatement[47147-47166]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[46754-47668]:IfStatement[47187-48101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46775-46987]:Block[47208-47420]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[46793-46937]:IfStatement[47226-47370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46820-46937]:Block[47253-47370]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[46906-46919]:ReturnStatement[47339-47352]"
    }, {
      "left" : "hasDecPoint = true;",
      "right" : "hasDecPoint = true;",
      "info" : "ExpressionStatement[46954-46973]:ExpressionStatement[47387-47406]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[46993-47668]:IfStatement[47426-48101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47033-47366]:Block[47466-47799]"
    }, {
      "left" : "if (hasExp)",
      "right" : "if (hasExp)",
      "info" : "IfStatement[47103-47199]:IfStatement[47536-47632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47115-47199]:Block[47548-47632]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47168-47181]:ReturnStatement[47601-47614]"
    }, {
      "left" : "if (!foundDigit)",
      "right" : "if (!foundDigit)",
      "info" : "IfStatement[47216-47286]:IfStatement[47649-47719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47233-47286]:Block[47666-47719]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47255-47268]:ReturnStatement[47688-47701]"
    }, {
      "left" : "hasExp = true;",
      "right" : "hasExp = true;",
      "info" : "ExpressionStatement[47303-47317]:ExpressionStatement[47736-47750]"
    }, {
      "left" : "allowSigns = true;",
      "right" : "allowSigns = true;",
      "info" : "ExpressionStatement[47334-47352]:ExpressionStatement[47767-47785]"
    }, {
      "left" : "if (chars[i] == '+' || chars[i] == '-')",
      "right" : "if (chars[i] == '+' || chars[i] == '-')",
      "info" : "IfStatement[47372-47668]:IfStatement[47805-48101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47412-47617]:Block[47845-48050]"
    }, {
      "left" : "if (!allowSigns)",
      "right" : "if (!allowSigns)",
      "info" : "IfStatement[47430-47500]:IfStatement[47863-47933]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47447-47500]:Block[47880-47933]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47469-47482]:ReturnStatement[47902-47915]"
    }, {
      "left" : "allowSigns = false;",
      "right" : "allowSigns = false;",
      "info" : "ExpressionStatement[47517-47536]:ExpressionStatement[47950-47969]"
    }, {
      "left" : "foundDigit = false;",
      "right" : "foundDigit = false;",
      "info" : "ExpressionStatement[47553-47572]:ExpressionStatement[47986-48005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47623-47668]:Block[48056-48101]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47641-47654]:ReturnStatement[48074-48087]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[47681-47685]:ExpressionStatement[48114-48118]"
    }, {
      "left" : "if (i < chars.length)",
      "right" : "if (i < chars.length)",
      "info" : "IfStatement[47704-48856]:IfStatement[48137-49289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47726-48856]:Block[48159-49289]"
    }, {
      "left" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "right" : "if (chars[i] >= '0' && chars[i] <= '9')",
      "info" : "IfStatement[47740-47865]:IfStatement[48173-48298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47780-47865]:Block[48213-48298]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[47839-47851]:ReturnStatement[48272-48284]"
    }, {
      "left" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "right" : "if (chars[i] == 'e' || chars[i] == 'E')",
      "info" : "IfStatement[47878-48015]:IfStatement[48311-48448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47918-48015]:Block[48351-48448]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[47988-48001]:ReturnStatement[48421-48434]"
    }, {
      "left" : "if (chars[i] == '.')",
      "right" : "if (chars[i] == '.')",
      "info" : "IfStatement[48028-48331]:IfStatement[48461-48764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48049-48331]:Block[48482-48764]"
    }, {
      "left" : "if (hasDecPoint || hasExp)",
      "right" : "if (hasDecPoint || hasExp)",
      "info" : "IfStatement[48067-48208]:IfStatement[48500-48641]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48094-48208]:Block[48527-48641]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48177-48190]:ReturnStatement[48610-48623]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[48299-48317]:ReturnStatement[48732-48750]"
    }, {
      "left" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "right" : "if (!allowSigns\n                && (chars[i] == 'd'\n                    || chars[i] == 'D'\n                    || chars[i] == 'f'\n                    || chars[i] == 'F'))",
      "info" : "IfStatement[48344-48565]:IfStatement[48777-48998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48515-48565]:Block[48948-48998]"
    }, {
      "left" : "return foundDigit;",
      "right" : "return foundDigit;",
      "info" : "ReturnStatement[48533-48551]:ReturnStatement[48966-48984]"
    }, {
      "left" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "right" : "if (chars[i] == 'l'\n                || chars[i] == 'L')",
      "info" : "IfStatement[48578-48779]:IfStatement[49011-49212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48634-48779]:Block[49067-49212]"
    }, {
      "left" : "return foundDigit && !hasExp && !hasDecPoint;",
      "right" : "return foundDigit && !hasExp && !hasDecPoint;",
      "info" : "ReturnStatement[48720-48765]:ReturnStatement[49153-49198]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[48833-48846]:ReturnStatement[49266-49279]"
    }, {
      "left" : "return !allowSigns && foundDigit;",
      "right" : "return !allowSigns && foundDigit;",
      "info" : "ReturnStatement[49002-49035]:ReturnStatement[49435-49468]"
    } ]
  },
  "interFileMappings" : { }
}