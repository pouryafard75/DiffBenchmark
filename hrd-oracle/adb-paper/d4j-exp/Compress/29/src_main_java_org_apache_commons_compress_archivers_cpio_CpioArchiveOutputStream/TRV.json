{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private CpioArchiveEntry entry;",
      "right" : "private CpioArchiveEntry entry;",
      "info" : "FieldDeclaration[2697-2728]:FieldDeclaration[2697-2728]"
    }, {
      "left" : "private boolean closed = false;",
      "right" : "private boolean closed = false;",
      "info" : "FieldDeclaration[2734-2765]:FieldDeclaration[2734-2765]"
    }, {
      "left" : "private boolean finished;",
      "right" : "private boolean finished;",
      "info" : "FieldDeclaration[2771-2845]:FieldDeclaration[2771-2845]"
    }, {
      "left" : "private final short entryFormat;",
      "right" : "private final short entryFormat;",
      "info" : "FieldDeclaration[2851-2973]:FieldDeclaration[2851-2973]"
    }, {
      "left" : "private final HashMap<String, CpioArchiveEntry> names =\n        new HashMap<String, CpioArchiveEntry>();",
      "right" : "private final HashMap<String, CpioArchiveEntry> names =\n        new HashMap<String, CpioArchiveEntry>();",
      "info" : "FieldDeclaration[2979-3083]:FieldDeclaration[2979-3083]"
    }, {
      "left" : "private long crc = 0;",
      "right" : "private long crc = 0;",
      "info" : "FieldDeclaration[3089-3110]:FieldDeclaration[3089-3110]"
    }, {
      "left" : "private long written;",
      "right" : "private long written;",
      "info" : "FieldDeclaration[3116-3137]:FieldDeclaration[3116-3137]"
    }, {
      "left" : "private final OutputStream out;",
      "right" : "private final OutputStream out;",
      "info" : "FieldDeclaration[3143-3174]:FieldDeclaration[3143-3174]"
    }, {
      "left" : "private final int blockSize;",
      "right" : "private final int blockSize;",
      "info" : "FieldDeclaration[3180-3208]:FieldDeclaration[3180-3208]"
    }, {
      "left" : "private long nextArtificalDeviceAndInode = 1;",
      "right" : "private long nextArtificalDeviceAndInode = 1;",
      "info" : "FieldDeclaration[3214-3259]:FieldDeclaration[3214-3259]"
    }, {
      "left" : "private final ZipEncoding zipEncoding;",
      "right" : "private final ZipEncoding zipEncoding;",
      "info" : "FieldDeclaration[3265-3372]:FieldDeclaration[3265-3372]"
    }, {
      "left" : "public CpioArchiveOutputStream(final OutputStream out, final short format)",
      "right" : "public CpioArchiveOutputStream(final OutputStream out, final short format)",
      "info" : "MethodDeclaration[3425-3890]:MethodDeclaration[3452-3917]"
    }, {
      "left" : "public CpioArchiveOutputStream(final OutputStream out, final short format,\n                                   final int blockSize)",
      "right" : "public CpioArchiveOutputStream(final OutputStream out, final short format,\n                                   final int blockSize)",
      "info" : "MethodDeclaration[3896-4444]:MethodDeclaration[3923-4471]"
    }, {
      "left" : "public CpioArchiveOutputStream(final OutputStream out)",
      "right" : "public CpioArchiveOutputStream(final OutputStream out)",
      "info" : "MethodDeclaration[5539-5844]:MethodDeclaration[5600-5905]"
    }, {
      "left" : "public CpioArchiveOutputStream(final OutputStream out, String encoding)",
      "right" : "public CpioArchiveOutputStream(final OutputStream out, String encoding)",
      "info" : "MethodDeclaration[5850-6311]:MethodDeclaration[5911-6372]"
    }, {
      "left" : "private void ensureOpen() throws IOException",
      "right" : "private void ensureOpen() throws IOException",
      "info" : "MethodDeclaration[6317-6623]:MethodDeclaration[6378-6684]"
    }, {
      "left" : "public void putArchiveEntry(ArchiveEntry entry) throws IOException",
      "right" : "public void putArchiveEntry(ArchiveEntry entry) throws IOException",
      "info" : "MethodDeclaration[6629-8161]:MethodDeclaration[6690-8222]"
    }, {
      "left" : "private void writeHeader(final CpioArchiveEntry e) throws IOException",
      "right" : "private void writeHeader(final CpioArchiveEntry e) throws IOException",
      "info" : "MethodDeclaration[8167-9076]:MethodDeclaration[8228-9137]"
    }, {
      "left" : "private void writeNewEntry(final CpioArchiveEntry entry) throws IOException",
      "right" : "private void writeNewEntry(final CpioArchiveEntry entry) throws IOException",
      "info" : "MethodDeclaration[9082-10485]:MethodDeclaration[9143-10546]"
    }, {
      "left" : "private void writeOldAsciiEntry(final CpioArchiveEntry entry)\n            throws IOException",
      "right" : "private void writeOldAsciiEntry(final CpioArchiveEntry entry)\n            throws IOException",
      "info" : "MethodDeclaration[10491-11685]:MethodDeclaration[10552-11746]"
    }, {
      "left" : "private void writeOldBinaryEntry(final CpioArchiveEntry entry,\n            final boolean swapHalfWord) throws IOException",
      "right" : "private void writeOldBinaryEntry(final CpioArchiveEntry entry,\n            final boolean swapHalfWord) throws IOException",
      "info" : "MethodDeclaration[11691-13069]:MethodDeclaration[11752-13130]"
    }, {
      "left" : "public void closeArchiveEntry() throws IOException",
      "right" : "public void closeArchiveEntry() throws IOException",
      "info" : "MethodDeclaration[13216-14045]:MethodDeclaration[13277-14106]"
    }, {
      "left" : "public void write(final byte[] b, final int off, final int len)\n            throws IOException",
      "right" : "public void write(final byte[] b, final int off, final int len)\n            throws IOException",
      "info" : "MethodDeclaration[14051-15342]:MethodDeclaration[14112-15403]"
    }, {
      "left" : "public void finish() throws IOException",
      "right" : "public void finish() throws IOException",
      "info" : "MethodDeclaration[15348-16427]:MethodDeclaration[15409-16488]"
    }, {
      "left" : "public void close() throws IOException",
      "right" : "public void close() throws IOException",
      "info" : "MethodDeclaration[16433-16875]:MethodDeclaration[16494-16936]"
    }, {
      "left" : "private void pad(int count) throws IOExceptio",
      "right" : "private void pad(int count) throws IOExceptio",
      "info" : "MethodDeclaration[16881-17066]:MethodDeclaration[16942-17127]"
    }, {
      "left" : "private void writeBinaryLong(final long number, final int length,\n            final boolean swapHalfWord) throws IOException",
      "right" : "private void writeBinaryLong(final long number, final int length,\n            final boolean swapHalfWord) throws IOException",
      "info" : "MethodDeclaration[17072-17331]:MethodDeclaration[17133-17392]"
    }, {
      "left" : "private void writeAsciiLong(final long number, final int length,\n            final int radix) throws IOException",
      "right" : "private void writeAsciiLong(final long number, final int length,\n            final int radix) throws IOException",
      "info" : "MethodDeclaration[17337-18192]:MethodDeclaration[17398-18253]"
    }, {
      "left" : "private void writeCString(final String str) throws IOException",
      "right" : "private void writeCString(final String str) throws IOException",
      "info" : "MethodDeclaration[18198-18651]:MethodDeclaration[18259-18712]"
    }, {
      "left" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "right" : "public ArchiveEntry createArchiveEntry(File inputFile, String entryName)\n            throws IOException",
      "info" : "MethodDeclaration[18657-19172]:MethodDeclaration[18718-19233]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3746-3752]:Modifier[3773-3779]"
    }, {
      "left" : "CpioArchiveOutputStream",
      "right" : "CpioArchiveOutputStream",
      "info" : "SimpleName[3753-3776]:SimpleName[3780-3803]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[3777-3799]:SingleVariableDeclaration[3804-3826]"
    }, {
      "left" : "final short format",
      "right" : "final short format",
      "info" : "SingleVariableDeclaration[3801-3819]:SingleVariableDeclaration[3828-3846]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3821-3890]:Block[3848-3917]"
    }, {
      "left" : "this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII);",
      "right" : "this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII);",
      "info" : "ConstructorInvocation[3831-3884]:ConstructorInvocation[3858-3911]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4245-4251]:Modifier[4272-4278]"
    }, {
      "left" : "CpioArchiveOutputStream",
      "right" : "CpioArchiveOutputStream",
      "info" : "SimpleName[4252-4275]:SimpleName[4279-4302]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[4276-4298]:SingleVariableDeclaration[4303-4325]"
    }, {
      "left" : "final short format",
      "right" : "final short format",
      "info" : "SingleVariableDeclaration[4300-4318]:SingleVariableDeclaration[4327-4345]"
    }, {
      "left" : "final int blockSize",
      "right" : "final int blockSize",
      "info" : "SingleVariableDeclaration[4355-4374]:SingleVariableDeclaration[4382-4401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4376-4444]:Block[4403-4471]"
    }, {
      "left" : "this(out, format, blockSize, CharsetNames.US_ASCII);",
      "right" : "this(out, format, blockSize, CharsetNames.US_ASCII);",
      "info" : "ConstructorInvocation[4386-4438]:ConstructorInvocation[4413-4465]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5751-5757]:Modifier[5812-5818]"
    }, {
      "left" : "CpioArchiveOutputStream",
      "right" : "CpioArchiveOutputStream",
      "info" : "SimpleName[5758-5781]:SimpleName[5819-5842]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[5782-5804]:SingleVariableDeclaration[5843-5865]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5806-5844]:Block[5867-5905]"
    }, {
      "left" : "this(out, FORMAT_NEW);",
      "right" : "this(out, FORMAT_NEW);",
      "info" : "ConstructorInvocation[5816-5838]:ConstructorInvocation[5877-5899]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6179-6185]:Modifier[6240-6246]"
    }, {
      "left" : "CpioArchiveOutputStream",
      "right" : "CpioArchiveOutputStream",
      "info" : "SimpleName[6186-6209]:SimpleName[6247-6270]"
    }, {
      "left" : "final OutputStream out",
      "right" : "final OutputStream out",
      "info" : "SingleVariableDeclaration[6210-6232]:SingleVariableDeclaration[6271-6293]"
    }, {
      "left" : "String encoding",
      "right" : "String encoding",
      "info" : "SingleVariableDeclaration[6234-6249]:SingleVariableDeclaration[6295-6310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6251-6311]:Block[6312-6372]"
    }, {
      "left" : "this(out, FORMAT_NEW, BLOCK_SIZE, encoding);",
      "right" : "this(out, FORMAT_NEW, BLOCK_SIZE, encoding);",
      "info" : "ConstructorInvocation[6261-6305]:ConstructorInvocation[6322-6366]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[6482-6489]:Modifier[6543-6550]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6490-6494]:PrimitiveType[6551-6555]"
    }, {
      "left" : "ensureOpen",
      "right" : "ensureOpen",
      "info" : "SimpleName[6495-6505]:SimpleName[6556-6566]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6515-6526]:SimpleType[6576-6587]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6527-6623]:Block[6588-6684]"
    }, {
      "left" : "if (this.closed)",
      "right" : "if (this.closed)",
      "info" : "IfStatement[6537-6617]:IfStatement[6598-6678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6554-6617]:Block[6615-6678]"
    }, {
      "left" : "throw new IOException(\"Stream closed\");",
      "right" : "throw new IOException(\"Stream closed\");",
      "info" : "ThrowStatement[6568-6607]:ThrowStatement[6629-6668]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7269-7278]:MarkerAnnotation[7330-7339]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7283-7289]:Modifier[7344-7350]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7290-7294]:PrimitiveType[7351-7355]"
    }, {
      "left" : "putArchiveEntry",
      "right" : "putArchiveEntry",
      "info" : "SimpleName[7295-7310]:SimpleName[7356-7371]"
    }, {
      "left" : "ArchiveEntry entry",
      "right" : "ArchiveEntry entry",
      "info" : "SingleVariableDeclaration[7311-7329]:SingleVariableDeclaration[7372-7390]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7338-7349]:SimpleType[7399-7410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7350-8161]:Block[7411-8222]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[7360-7455]:IfStatement[7421-7516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7373-7455]:Block[7434-7516]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[7387-7445]:ThrowStatement[7448-7506]"
    }, {
      "left" : "CpioArchiveEntry e = (CpioArchiveEntry) entry;",
      "right" : "CpioArchiveEntry e = (CpioArchiveEntry) entry;",
      "info" : "VariableDeclarationStatement[7465-7511]:VariableDeclarationStatement[7526-7572]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[7520-7533]:ExpressionStatement[7581-7594]"
    }, {
      "left" : "if (this.entry != null)",
      "right" : "if (this.entry != null)",
      "info" : "IfStatement[7542-7634]:IfStatement[7603-7695]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7566-7634]:Block[7627-7695]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[7580-7600]:ExpressionStatement[7641-7661]"
    }, {
      "left" : "if (e.getTime() == -1)",
      "right" : "if (e.getTime() == -1)",
      "info" : "IfStatement[7643-7735]:IfStatement[7704-7796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7666-7735]:Block[7727-7796]"
    }, {
      "left" : "e.setTime(System.currentTimeMillis() / 1000);",
      "right" : "e.setTime(System.currentTimeMillis() / 1000);",
      "info" : "ExpressionStatement[7680-7725]:ExpressionStatement[7741-7786]"
    }, {
      "left" : "final short format = e.getFormat();",
      "right" : "final short format = e.getFormat();",
      "info" : "VariableDeclarationStatement[7745-7780]:VariableDeclarationStatement[7806-7841]"
    }, {
      "left" : "if (format != this.entryFormat)",
      "right" : "if (format != this.entryFormat)",
      "info" : "IfStatement[7789-7945]:IfStatement[7850-8006]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7820-7945]:Block[7881-8006]"
    }, {
      "left" : "throw new IOException(\"Header format: \"+format+\" does not match existing format: \"+this.entryFormat);",
      "right" : "throw new IOException(\"Header format: \"+format+\" does not match existing format: \"+this.entryFormat);",
      "info" : "ThrowStatement[7834-7935]:ThrowStatement[7895-7996]"
    }, {
      "left" : "if (this.names.put(e.getName(), e) != null)",
      "right" : "if (this.names.put(e.getName(), e) != null)",
      "info" : "IfStatement[7955-8080]:IfStatement[8016-8141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7999-8080]:Block[8060-8141]"
    }, {
      "left" : "throw new IOException(\"duplicate entry: \" + e.getName());",
      "right" : "throw new IOException(\"duplicate entry: \" + e.getName());",
      "info" : "ThrowStatement[8013-8070]:ThrowStatement[8074-8131]"
    }, {
      "left" : "writeHeader(e);",
      "right" : "writeHeader(e);",
      "info" : "ExpressionStatement[8090-8105]:ExpressionStatement[8151-8166]"
    }, {
      "left" : "this.entry = e;",
      "right" : "this.entry = e;",
      "info" : "ExpressionStatement[8114-8129]:ExpressionStatement[8175-8190]"
    }, {
      "left" : "this.written = 0;",
      "right" : "this.written = 0;",
      "info" : "ExpressionStatement[8138-8155]:ExpressionStatement[8199-8216]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8167-8174]:Modifier[8228-8235]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8175-8179]:PrimitiveType[8236-8240]"
    }, {
      "left" : "writeHeader",
      "right" : "writeHeader",
      "info" : "SimpleName[8180-8191]:SimpleName[8241-8252]"
    }, {
      "left" : "final CpioArchiveEntry e",
      "right" : "final CpioArchiveEntry e",
      "info" : "SingleVariableDeclaration[8192-8216]:SingleVariableDeclaration[8253-8277]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8225-8236]:SimpleType[8286-8297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8237-9076]:Block[8298-9137]"
    }, {
      "left" : "switch (e.getFormat()) {\n        case FORMAT_NEW:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));\n            count(6);\n            writeNewEntry(e);\n            break;\n        case FORMAT_NEW_CRC:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));\n            count(6);\n            writeNewEntry(e);\n            break;\n        case FORMAT_OLD_ASCII:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));\n            count(6);\n            writeOldAsciiEntry(e);\n            break;\n        case FORMAT_OLD_BINARY:\n            boolean swapHalfWord = true;\n            writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);\n            writeOldBinaryEntry(e, swapHalfWord);\n            break;\n        default:\n            throw new IOException(\"unknown format \" + e.getFormat());\n        }",
      "right" : "switch (e.getFormat()) {\n        case FORMAT_NEW:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));\n            count(6);\n            writeNewEntry(e);\n            break;\n        case FORMAT_NEW_CRC:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));\n            count(6);\n            writeNewEntry(e);\n            break;\n        case FORMAT_OLD_ASCII:\n            out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));\n            count(6);\n            writeOldAsciiEntry(e);\n            break;\n        case FORMAT_OLD_BINARY:\n            boolean swapHalfWord = true;\n            writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);\n            writeOldBinaryEntry(e, swapHalfWord);\n            break;\n        default:\n            throw new IOException(\"unknown format \" + e.getFormat());\n        }",
      "info" : "SwitchStatement[8247-9070]:SwitchStatement[8308-9131]"
    }, {
      "left" : "case FORMAT_NEW:",
      "right" : "case FORMAT_NEW:",
      "info" : "SwitchCase[8280-8296]:SwitchCase[8341-8357]"
    }, {
      "left" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));",
      "right" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW));",
      "info" : "ExpressionStatement[8309-8357]:ExpressionStatement[8370-8418]"
    }, {
      "left" : "count(6);",
      "right" : "count(6);",
      "info" : "ExpressionStatement[8370-8379]:ExpressionStatement[8431-8440]"
    }, {
      "left" : "writeNewEntry(e);",
      "right" : "writeNewEntry(e);",
      "info" : "ExpressionStatement[8392-8409]:ExpressionStatement[8453-8470]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8422-8428]:BreakStatement[8483-8489]"
    }, {
      "left" : "case FORMAT_NEW_CRC:",
      "right" : "case FORMAT_NEW_CRC:",
      "info" : "SwitchCase[8437-8457]:SwitchCase[8498-8518]"
    }, {
      "left" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));",
      "right" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_NEW_CRC));",
      "info" : "ExpressionStatement[8470-8522]:ExpressionStatement[8531-8583]"
    }, {
      "left" : "count(6);",
      "right" : "count(6);",
      "info" : "ExpressionStatement[8535-8544]:ExpressionStatement[8596-8605]"
    }, {
      "left" : "writeNewEntry(e);",
      "right" : "writeNewEntry(e);",
      "info" : "ExpressionStatement[8557-8574]:ExpressionStatement[8618-8635]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8587-8593]:BreakStatement[8648-8654]"
    }, {
      "left" : "case FORMAT_OLD_ASCII:",
      "right" : "case FORMAT_OLD_ASCII:",
      "info" : "SwitchCase[8602-8624]:SwitchCase[8663-8685]"
    }, {
      "left" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));",
      "right" : "out.write(ArchiveUtils.toAsciiBytes(MAGIC_OLD_ASCII));",
      "info" : "ExpressionStatement[8637-8691]:ExpressionStatement[8698-8752]"
    }, {
      "left" : "count(6);",
      "right" : "count(6);",
      "info" : "ExpressionStatement[8704-8713]:ExpressionStatement[8765-8774]"
    }, {
      "left" : "writeOldAsciiEntry(e);",
      "right" : "writeOldAsciiEntry(e);",
      "info" : "ExpressionStatement[8726-8748]:ExpressionStatement[8787-8809]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8761-8767]:BreakStatement[8822-8828]"
    }, {
      "left" : "case FORMAT_OLD_BINARY:",
      "right" : "case FORMAT_OLD_BINARY:",
      "info" : "SwitchCase[8776-8799]:SwitchCase[8837-8860]"
    }, {
      "left" : "boolean swapHalfWord = true;",
      "right" : "boolean swapHalfWord = true;",
      "info" : "VariableDeclarationStatement[8812-8840]:VariableDeclarationStatement[8873-8901]"
    }, {
      "left" : "writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);",
      "right" : "writeBinaryLong(MAGIC_OLD_BINARY, 2, swapHalfWord);",
      "info" : "ExpressionStatement[8853-8904]:ExpressionStatement[8914-8965]"
    }, {
      "left" : "writeOldBinaryEntry(e, swapHalfWord);",
      "right" : "writeOldBinaryEntry(e, swapHalfWord);",
      "info" : "ExpressionStatement[8917-8954]:ExpressionStatement[8978-9015]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[8967-8973]:BreakStatement[9028-9034]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[8982-8990]:SwitchCase[9043-9051]"
    }, {
      "left" : "throw new IOException(\"unknown format \" + e.getFormat());",
      "right" : "throw new IOException(\"unknown format \" + e.getFormat());",
      "info" : "ThrowStatement[9003-9060]:ThrowStatement[9064-9121]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[9082-9089]:Modifier[9143-9150]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[9090-9094]:PrimitiveType[9151-9155]"
    }, {
      "left" : "writeNewEntry",
      "right" : "writeNewEntry",
      "info" : "SimpleName[9095-9108]:SimpleName[9156-9169]"
    }, {
      "left" : "final CpioArchiveEntry entry",
      "right" : "final CpioArchiveEntry entry",
      "info" : "SingleVariableDeclaration[9109-9137]:SingleVariableDeclaration[9170-9198]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9146-9157]:SimpleType[9207-9218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9158-10485]:Block[9219-10546]"
    }, {
      "left" : "long inode = entry.getInode();",
      "right" : "long inode = entry.getInode();",
      "info" : "VariableDeclarationStatement[9168-9198]:VariableDeclarationStatement[9229-9259]"
    }, {
      "left" : "long devMin = entry.getDeviceMin();",
      "right" : "long devMin = entry.getDeviceMin();",
      "info" : "VariableDeclarationStatement[9207-9242]:VariableDeclarationStatement[9268-9303]"
    }, {
      "left" : "if (CPIO_TRAILER.equals(entry.getName()))",
      "right" : "if (CPIO_TRAILER.equals(entry.getName()))",
      "info" : "IfStatement[9251-9745]:IfStatement[9312-9806]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9293-9336]:Block[9354-9397]"
    }, {
      "left" : "inode = devMin = 0;",
      "right" : "inode = devMin = 0;",
      "info" : "ExpressionStatement[9307-9326]:ExpressionStatement[9368-9387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9342-9745]:Block[9403-9806]"
    }, {
      "left" : "if (inode == 0 && devMin == 0)",
      "right" : "if (inode == 0 && devMin == 0)",
      "info" : "IfStatement[9356-9735]:IfStatement[9417-9796]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9387-9545]:Block[9448-9606]"
    }, {
      "left" : "inode = nextArtificalDeviceAndInode & 0xFFFFFFFF;",
      "right" : "inode = nextArtificalDeviceAndInode & 0xFFFFFFFF;",
      "info" : "ExpressionStatement[9405-9454]:ExpressionStatement[9466-9515]"
    }, {
      "left" : "devMin = (nextArtificalDeviceAndInode++ >> 32) & 0xFFFFFFFF;",
      "right" : "devMin = (nextArtificalDeviceAndInode++ >> 32) & 0xFFFFFFFF;",
      "info" : "ExpressionStatement[9471-9531]:ExpressionStatement[9532-9592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9551-9735]:Block[9612-9796]"
    }, {
      "left" : "nextArtificalDeviceAndInode =\n                    Math.max(nextArtificalDeviceAndInode,\n                             inode + 0x100000000L * devMin) + 1;",
      "right" : "nextArtificalDeviceAndInode =\n                    Math.max(nextArtificalDeviceAndInode,\n                             inode + 0x100000000L * devMin) + 1;",
      "info" : "ExpressionStatement[9569-9721]:ExpressionStatement[9630-9782]"
    }, {
      "left" : "writeAsciiLong(inode, 8, 16);",
      "right" : "writeAsciiLong(inode, 8, 16);",
      "info" : "ExpressionStatement[9755-9784]:ExpressionStatement[9816-9845]"
    }, {
      "left" : "writeAsciiLong(entry.getMode(), 8, 16);",
      "right" : "writeAsciiLong(entry.getMode(), 8, 16);",
      "info" : "ExpressionStatement[9793-9832]:ExpressionStatement[9854-9893]"
    }, {
      "left" : "writeAsciiLong(entry.getUID(), 8, 16);",
      "right" : "writeAsciiLong(entry.getUID(), 8, 16);",
      "info" : "ExpressionStatement[9841-9879]:ExpressionStatement[9902-9940]"
    }, {
      "left" : "writeAsciiLong(entry.getGID(), 8, 16);",
      "right" : "writeAsciiLong(entry.getGID(), 8, 16);",
      "info" : "ExpressionStatement[9888-9926]:ExpressionStatement[9949-9987]"
    }, {
      "left" : "writeAsciiLong(entry.getNumberOfLinks(), 8, 16);",
      "right" : "writeAsciiLong(entry.getNumberOfLinks(), 8, 16);",
      "info" : "ExpressionStatement[9935-9983]:ExpressionStatement[9996-10044]"
    }, {
      "left" : "writeAsciiLong(entry.getTime(), 8, 16);",
      "right" : "writeAsciiLong(entry.getTime(), 8, 16);",
      "info" : "ExpressionStatement[9992-10031]:ExpressionStatement[10053-10092]"
    }, {
      "left" : "writeAsciiLong(entry.getSize(), 8, 16);",
      "right" : "writeAsciiLong(entry.getSize(), 8, 16);",
      "info" : "ExpressionStatement[10040-10079]:ExpressionStatement[10101-10140]"
    }, {
      "left" : "writeAsciiLong(entry.getDeviceMaj(), 8, 16);",
      "right" : "writeAsciiLong(entry.getDeviceMaj(), 8, 16);",
      "info" : "ExpressionStatement[10088-10132]:ExpressionStatement[10149-10193]"
    }, {
      "left" : "writeAsciiLong(devMin, 8, 16);",
      "right" : "writeAsciiLong(devMin, 8, 16);",
      "info" : "ExpressionStatement[10141-10171]:ExpressionStatement[10202-10232]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDeviceMaj(), 8, 16);",
      "right" : "writeAsciiLong(entry.getRemoteDeviceMaj(), 8, 16);",
      "info" : "ExpressionStatement[10180-10230]:ExpressionStatement[10241-10291]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDeviceMin(), 8, 16);",
      "right" : "writeAsciiLong(entry.getRemoteDeviceMin(), 8, 16);",
      "info" : "ExpressionStatement[10239-10289]:ExpressionStatement[10300-10350]"
    }, {
      "left" : "writeAsciiLong(entry.getName().length() + 1, 8, 16);",
      "right" : "writeAsciiLong(entry.getName().length() + 1, 8, 16);",
      "info" : "ExpressionStatement[10298-10350]:ExpressionStatement[10359-10411]"
    }, {
      "left" : "writeAsciiLong(entry.getChksum(), 8, 16);",
      "right" : "writeAsciiLong(entry.getChksum(), 8, 16);",
      "info" : "ExpressionStatement[10359-10400]:ExpressionStatement[10420-10461]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[10409-10439]:ExpressionStatement[10470-10500]"
    }, {
      "left" : "pad(entry.getHeaderPadCount());",
      "right" : "pad(entry.getHeaderPadCount());",
      "info" : "ExpressionStatement[10448-10479]:ExpressionStatement[10509-10540]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[10491-10498]:Modifier[10552-10559]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[10499-10503]:PrimitiveType[10560-10564]"
    }, {
      "left" : "writeOldAsciiEntry",
      "right" : "writeOldAsciiEntry",
      "info" : "SimpleName[10504-10522]:SimpleName[10565-10583]"
    }, {
      "left" : "final CpioArchiveEntry entry",
      "right" : "final CpioArchiveEntry entry",
      "info" : "SingleVariableDeclaration[10523-10551]:SingleVariableDeclaration[10584-10612]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[10572-10583]:SimpleType[10633-10644]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10584-11685]:Block[10645-11746]"
    }, {
      "left" : "long inode = entry.getInode();",
      "right" : "long inode = entry.getInode();",
      "info" : "VariableDeclarationStatement[10594-10624]:VariableDeclarationStatement[10655-10685]"
    }, {
      "left" : "long device = entry.getDevice();",
      "right" : "long device = entry.getDevice();",
      "info" : "VariableDeclarationStatement[10633-10665]:VariableDeclarationStatement[10694-10726]"
    }, {
      "left" : "if (CPIO_TRAILER.equals(entry.getName()))",
      "right" : "if (CPIO_TRAILER.equals(entry.getName()))",
      "info" : "IfStatement[10674-11158]:IfStatement[10735-11219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10716-10759]:Block[10777-10820]"
    }, {
      "left" : "inode = device = 0;",
      "right" : "inode = device = 0;",
      "info" : "ExpressionStatement[10730-10749]:ExpressionStatement[10791-10810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10765-11158]:Block[10826-11219]"
    }, {
      "left" : "if (inode == 0 && device == 0)",
      "right" : "if (inode == 0 && device == 0)",
      "info" : "IfStatement[10779-11148]:IfStatement[10840-11209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10810-10962]:Block[10871-11023]"
    }, {
      "left" : "inode = nextArtificalDeviceAndInode & 0777777;",
      "right" : "inode = nextArtificalDeviceAndInode & 0777777;",
      "info" : "ExpressionStatement[10828-10874]:ExpressionStatement[10889-10935]"
    }, {
      "left" : "device = (nextArtificalDeviceAndInode++ >> 18) & 0777777;",
      "right" : "device = (nextArtificalDeviceAndInode++ >> 18) & 0777777;",
      "info" : "ExpressionStatement[10891-10948]:ExpressionStatement[10952-11009]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10968-11148]:Block[11029-11209]"
    }, {
      "left" : "nextArtificalDeviceAndInode =\n                    Math.max(nextArtificalDeviceAndInode,\n                             inode + 01000000 * device) + 1;",
      "right" : "nextArtificalDeviceAndInode =\n                    Math.max(nextArtificalDeviceAndInode,\n                             inode + 01000000 * device) + 1;",
      "info" : "ExpressionStatement[10986-11134]:ExpressionStatement[11047-11195]"
    }, {
      "left" : "writeAsciiLong(device, 6, 8);",
      "right" : "writeAsciiLong(device, 6, 8);",
      "info" : "ExpressionStatement[11168-11197]:ExpressionStatement[11229-11258]"
    }, {
      "left" : "writeAsciiLong(inode, 6, 8);",
      "right" : "writeAsciiLong(inode, 6, 8);",
      "info" : "ExpressionStatement[11206-11234]:ExpressionStatement[11267-11295]"
    }, {
      "left" : "writeAsciiLong(entry.getMode(), 6, 8);",
      "right" : "writeAsciiLong(entry.getMode(), 6, 8);",
      "info" : "ExpressionStatement[11243-11281]:ExpressionStatement[11304-11342]"
    }, {
      "left" : "writeAsciiLong(entry.getUID(), 6, 8);",
      "right" : "writeAsciiLong(entry.getUID(), 6, 8);",
      "info" : "ExpressionStatement[11290-11327]:ExpressionStatement[11351-11388]"
    }, {
      "left" : "writeAsciiLong(entry.getGID(), 6, 8);",
      "right" : "writeAsciiLong(entry.getGID(), 6, 8);",
      "info" : "ExpressionStatement[11336-11373]:ExpressionStatement[11397-11434]"
    }, {
      "left" : "writeAsciiLong(entry.getNumberOfLinks(), 6, 8);",
      "right" : "writeAsciiLong(entry.getNumberOfLinks(), 6, 8);",
      "info" : "ExpressionStatement[11382-11429]:ExpressionStatement[11443-11490]"
    }, {
      "left" : "writeAsciiLong(entry.getRemoteDevice(), 6, 8);",
      "right" : "writeAsciiLong(entry.getRemoteDevice(), 6, 8);",
      "info" : "ExpressionStatement[11438-11484]:ExpressionStatement[11499-11545]"
    }, {
      "left" : "writeAsciiLong(entry.getTime(), 11, 8);",
      "right" : "writeAsciiLong(entry.getTime(), 11, 8);",
      "info" : "ExpressionStatement[11493-11532]:ExpressionStatement[11554-11593]"
    }, {
      "left" : "writeAsciiLong(entry.getName().length() + 1, 6, 8);",
      "right" : "writeAsciiLong(entry.getName().length() + 1, 6, 8);",
      "info" : "ExpressionStatement[11541-11592]:ExpressionStatement[11602-11653]"
    }, {
      "left" : "writeAsciiLong(entry.getSize(), 11, 8);",
      "right" : "writeAsciiLong(entry.getSize(), 11, 8);",
      "info" : "ExpressionStatement[11601-11640]:ExpressionStatement[11662-11701]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[11649-11679]:ExpressionStatement[11710-11740]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[11691-11698]:Modifier[11752-11759]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[11699-11703]:PrimitiveType[11760-11764]"
    }, {
      "left" : "writeOldBinaryEntry",
      "right" : "writeOldBinaryEntry",
      "info" : "SimpleName[11704-11723]:SimpleName[11765-11784]"
    }, {
      "left" : "final CpioArchiveEntry entry",
      "right" : "final CpioArchiveEntry entry",
      "info" : "SingleVariableDeclaration[11724-11752]:SingleVariableDeclaration[11785-11813]"
    }, {
      "left" : "final boolean swapHalfWord",
      "right" : "final boolean swapHalfWord",
      "info" : "SingleVariableDeclaration[11766-11792]:SingleVariableDeclaration[11827-11853]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[11801-11812]:SimpleType[11862-11873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11813-13069]:Block[11874-13130]"
    }, {
      "left" : "long inode = entry.getInode();",
      "right" : "long inode = entry.getInode();",
      "info" : "VariableDeclarationStatement[11823-11853]:VariableDeclarationStatement[11884-11914]"
    }, {
      "left" : "long device = entry.getDevice();",
      "right" : "long device = entry.getDevice();",
      "info" : "VariableDeclarationStatement[11862-11894]:VariableDeclarationStatement[11923-11955]"
    }, {
      "left" : "if (CPIO_TRAILER.equals(entry.getName()))",
      "right" : "if (CPIO_TRAILER.equals(entry.getName()))",
      "info" : "IfStatement[11903-12384]:IfStatement[11964-12445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11945-11988]:Block[12006-12049]"
    }, {
      "left" : "inode = device = 0;",
      "right" : "inode = device = 0;",
      "info" : "ExpressionStatement[11959-11978]:ExpressionStatement[12020-12039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11994-12384]:Block[12055-12445]"
    }, {
      "left" : "if (inode == 0 && device == 0)",
      "right" : "if (inode == 0 && device == 0)",
      "info" : "IfStatement[12008-12374]:IfStatement[12069-12435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12039-12189]:Block[12100-12250]"
    }, {
      "left" : "inode = nextArtificalDeviceAndInode & 0xFFFF;",
      "right" : "inode = nextArtificalDeviceAndInode & 0xFFFF;",
      "info" : "ExpressionStatement[12057-12102]:ExpressionStatement[12118-12163]"
    }, {
      "left" : "device = (nextArtificalDeviceAndInode++ >> 16) & 0xFFFF;",
      "right" : "device = (nextArtificalDeviceAndInode++ >> 16) & 0xFFFF;",
      "info" : "ExpressionStatement[12119-12175]:ExpressionStatement[12180-12236]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12195-12374]:Block[12256-12435]"
    }, {
      "left" : "nextArtificalDeviceAndInode =\n                    Math.max(nextArtificalDeviceAndInode,\n                             inode + 0x10000 * device) + 1;",
      "right" : "nextArtificalDeviceAndInode =\n                    Math.max(nextArtificalDeviceAndInode,\n                             inode + 0x10000 * device) + 1;",
      "info" : "ExpressionStatement[12213-12360]:ExpressionStatement[12274-12421]"
    }, {
      "left" : "writeBinaryLong(device, 2, swapHalfWord);",
      "right" : "writeBinaryLong(device, 2, swapHalfWord);",
      "info" : "ExpressionStatement[12394-12435]:ExpressionStatement[12455-12496]"
    }, {
      "left" : "writeBinaryLong(inode, 2, swapHalfWord);",
      "right" : "writeBinaryLong(inode, 2, swapHalfWord);",
      "info" : "ExpressionStatement[12444-12484]:ExpressionStatement[12505-12545]"
    }, {
      "left" : "writeBinaryLong(entry.getMode(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getMode(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[12493-12543]:ExpressionStatement[12554-12604]"
    }, {
      "left" : "writeBinaryLong(entry.getUID(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getUID(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[12552-12601]:ExpressionStatement[12613-12662]"
    }, {
      "left" : "writeBinaryLong(entry.getGID(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getGID(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[12610-12659]:ExpressionStatement[12671-12720]"
    }, {
      "left" : "writeBinaryLong(entry.getNumberOfLinks(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getNumberOfLinks(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[12668-12727]:ExpressionStatement[12729-12788]"
    }, {
      "left" : "writeBinaryLong(entry.getRemoteDevice(), 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getRemoteDevice(), 2, swapHalfWord);",
      "info" : "ExpressionStatement[12736-12794]:ExpressionStatement[12797-12855]"
    }, {
      "left" : "writeBinaryLong(entry.getTime(), 4, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getTime(), 4, swapHalfWord);",
      "info" : "ExpressionStatement[12803-12853]:ExpressionStatement[12864-12914]"
    }, {
      "left" : "writeBinaryLong(entry.getName().length() + 1, 2, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getName().length() + 1, 2, swapHalfWord);",
      "info" : "ExpressionStatement[12862-12925]:ExpressionStatement[12923-12986]"
    }, {
      "left" : "writeBinaryLong(entry.getSize(), 4, swapHalfWord);",
      "right" : "writeBinaryLong(entry.getSize(), 4, swapHalfWord);",
      "info" : "ExpressionStatement[12934-12984]:ExpressionStatement[12995-13045]"
    }, {
      "left" : "writeCString(entry.getName());",
      "right" : "writeCString(entry.getName());",
      "info" : "ExpressionStatement[12993-13023]:ExpressionStatement[13054-13084]"
    }, {
      "left" : "pad(entry.getHeaderPadCount());",
      "right" : "pad(entry.getHeaderPadCount());",
      "info" : "ExpressionStatement[13032-13063]:ExpressionStatement[13093-13124]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[13216-13225]:MarkerAnnotation[13277-13286]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[13230-13236]:Modifier[13291-13297]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[13237-13241]:PrimitiveType[13298-13302]"
    }, {
      "left" : "closeArchiveEntry",
      "right" : "closeArchiveEntry",
      "info" : "SimpleName[13242-13259]:SimpleName[13303-13320]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[13269-13280]:SimpleType[13330-13341]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13281-14045]:Block[13342-14106]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[13291-13386]:IfStatement[13352-13447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13304-13386]:Block[13365-13447]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[13318-13376]:ThrowStatement[13379-13437]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[13396-13409]:ExpressionStatement[13457-13470]"
    }, {
      "left" : "if (entry == null)",
      "right" : "if (entry == null)",
      "info" : "IfStatement[13419-13522]:IfStatement[13480-13583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13438-13522]:Block[13499-13583]"
    }, {
      "left" : "throw new IOException(\"Trying to close non-existent entry\");",
      "right" : "throw new IOException(\"Trying to close non-existent entry\");",
      "info" : "ThrowStatement[13452-13512]:ThrowStatement[13513-13573]"
    }, {
      "left" : "if (this.entry.getSize() != this.written)",
      "right" : "if (this.entry.getSize() != this.written)",
      "info" : "IfStatement[13532-13757]:IfStatement[13593-13818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13574-13757]:Block[13635-13818]"
    }, {
      "left" : "throw new IOException(\"invalid entry size (expected \"\n                    + this.entry.getSize() + \" but got \" + this.written\n                    + \" bytes)\");",
      "right" : "throw new IOException(\"invalid entry size (expected \"\n                    + this.entry.getSize() + \" but got \" + this.written\n                    + \" bytes)\");",
      "info" : "ThrowStatement[13588-13747]:ThrowStatement[13649-13808]"
    }, {
      "left" : "pad(this.entry.getDataPadCount());",
      "right" : "pad(this.entry.getDataPadCount());",
      "info" : "ExpressionStatement[13766-13800]:ExpressionStatement[13827-13861]"
    }, {
      "left" : "if (this.entry.getFormat() == FORMAT_NEW_CRC\n            && this.crc != this.entry.getChksum())",
      "right" : "if (this.entry.getFormat() == FORMAT_NEW_CRC\n            && this.crc != this.entry.getChksum())",
      "info" : "IfStatement[13809-13964]:IfStatement[13870-14025]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13905-13964]:Block[13966-14025]"
    }, {
      "left" : "throw new IOException(\"CRC Error\");",
      "right" : "throw new IOException(\"CRC Error\");",
      "info" : "ThrowStatement[13919-13954]:ThrowStatement[13980-14015]"
    }, {
      "left" : "this.entry = null;",
      "right" : "this.entry = null;",
      "info" : "ExpressionStatement[13973-13991]:ExpressionStatement[14034-14052]"
    }, {
      "left" : "this.crc = 0;",
      "right" : "this.crc = 0;",
      "info" : "ExpressionStatement[14000-14013]:ExpressionStatement[14061-14074]"
    }, {
      "left" : "this.written = 0;",
      "right" : "this.written = 0;",
      "info" : "ExpressionStatement[14022-14039]:ExpressionStatement[14083-14100]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[14528-14537]:MarkerAnnotation[14589-14598]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[14542-14548]:Modifier[14603-14609]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14549-14553]:PrimitiveType[14610-14614]"
    }, {
      "left" : "write",
      "right" : "write",
      "info" : "SimpleName[14554-14559]:SimpleName[14615-14620]"
    }, {
      "left" : "final byte[] b",
      "right" : "final byte[] b",
      "info" : "SingleVariableDeclaration[14560-14574]:SingleVariableDeclaration[14621-14635]"
    }, {
      "left" : "final int off",
      "right" : "final int off",
      "info" : "SingleVariableDeclaration[14576-14589]:SingleVariableDeclaration[14637-14650]"
    }, {
      "left" : "final int len",
      "right" : "final int len",
      "info" : "SingleVariableDeclaration[14591-14604]:SingleVariableDeclaration[14652-14665]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14625-14636]:SimpleType[14686-14697]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14637-15342]:Block[14698-15403]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[14647-14660]:ExpressionStatement[14708-14721]"
    }, {
      "left" : "if (off < 0 || len < 0 || off > b.length - len)",
      "right" : "if (off < 0 || len < 0 || off > b.length - len)",
      "info" : "IfStatement[14669-14830]:IfStatement[14730-14891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14717-14779]:Block[14778-14840]"
    }, {
      "left" : "throw new IndexOutOfBoundsException();",
      "right" : "throw new IndexOutOfBoundsException();",
      "info" : "ThrowStatement[14731-14769]:ThrowStatement[14792-14830]"
    }, {
      "left" : "if (len == 0)",
      "right" : "if (len == 0)",
      "info" : "IfStatement[14785-14830]:IfStatement[14846-14891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14799-14830]:Block[14860-14891]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[14813-14820]:ReturnStatement[14874-14881]"
    }, {
      "left" : "if (this.entry == null)",
      "right" : "if (this.entry == null)",
      "info" : "IfStatement[14840-14935]:IfStatement[14901-14996]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14864-14935]:Block[14925-14996]"
    }, {
      "left" : "throw new IOException(\"no current CPIO entry\");",
      "right" : "throw new IOException(\"no current CPIO entry\");",
      "info" : "ThrowStatement[14878-14925]:ThrowStatement[14939-14986]"
    }, {
      "left" : "if (this.written + len > this.entry.getSize())",
      "right" : "if (this.written + len > this.entry.getSize())",
      "info" : "IfStatement[14944-15082]:IfStatement[15005-15143]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14991-15082]:Block[15052-15143]"
    }, {
      "left" : "throw new IOException(\"attempt to write past end of STORED entry\");",
      "right" : "throw new IOException(\"attempt to write past end of STORED entry\");",
      "info" : "ThrowStatement[15005-15072]:ThrowStatement[15066-15133]"
    }, {
      "left" : "out.write(b, off, len);",
      "right" : "out.write(b, off, len);",
      "info" : "ExpressionStatement[15091-15114]:ExpressionStatement[15152-15175]"
    }, {
      "left" : "this.written += len;",
      "right" : "this.written += len;",
      "info" : "ExpressionStatement[15123-15143]:ExpressionStatement[15184-15204]"
    }, {
      "left" : "if (this.entry.getFormat() == FORMAT_NEW_CRC)",
      "right" : "if (this.entry.getFormat() == FORMAT_NEW_CRC)",
      "info" : "IfStatement[15152-15316]:IfStatement[15213-15377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15198-15316]:Block[15259-15377]"
    }, {
      "left" : "for (int pos = 0; pos < len; pos++)",
      "right" : "for (int pos = 0; pos < len; pos++)",
      "info" : "ForStatement[15212-15306]:ForStatement[15273-15367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15248-15306]:Block[15309-15367]"
    }, {
      "left" : "this.crc += b[pos] & 0xFF;",
      "right" : "this.crc += b[pos] & 0xFF;",
      "info" : "ExpressionStatement[15266-15292]:ExpressionStatement[15327-15353]"
    }, {
      "left" : "count(len);",
      "right" : "count(len);",
      "info" : "ExpressionStatement[15325-15336]:ExpressionStatement[15386-15397]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[15711-15720]:MarkerAnnotation[15772-15781]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[15725-15731]:Modifier[15786-15792]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15732-15736]:PrimitiveType[15793-15797]"
    }, {
      "left" : "finish",
      "right" : "finish",
      "info" : "SimpleName[15737-15743]:SimpleName[15798-15804]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15753-15764]:SimpleType[15814-15825]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15765-16427]:Block[15826-16488]"
    }, {
      "left" : "ensureOpen();",
      "right" : "ensureOpen();",
      "info" : "ExpressionStatement[15775-15788]:ExpressionStatement[15836-15849]"
    }, {
      "left" : "if (finished)",
      "right" : "if (finished)",
      "info" : "IfStatement[15797-15899]:IfStatement[15858-15960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15811-15899]:Block[15872-15960]"
    }, {
      "left" : "throw new IOException(\"This archive has already been finished\");",
      "right" : "throw new IOException(\"This archive has already been finished\");",
      "info" : "ThrowStatement[15825-15889]:ThrowStatement[15886-15950]"
    }, {
      "left" : "if (this.entry != null)",
      "right" : "if (this.entry != null)",
      "info" : "IfStatement[15909-16022]:IfStatement[15970-16083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15933-16022]:Block[15994-16083]"
    }, {
      "left" : "throw new IOException(\"This archive contains unclosed entries.\");",
      "right" : "throw new IOException(\"This archive contains unclosed entries.\");",
      "info" : "ThrowStatement[15947-16012]:ThrowStatement[16008-16073]"
    }, {
      "left" : "this.entry = new CpioArchiveEntry(this.entryFormat);",
      "right" : "this.entry = new CpioArchiveEntry(this.entryFormat);",
      "info" : "ExpressionStatement[16031-16083]:ExpressionStatement[16092-16144]"
    }, {
      "left" : "this.entry.setName(CPIO_TRAILER);",
      "right" : "this.entry.setName(CPIO_TRAILER);",
      "info" : "ExpressionStatement[16092-16125]:ExpressionStatement[16153-16186]"
    }, {
      "left" : "this.entry.setNumberOfLinks(1);",
      "right" : "this.entry.setNumberOfLinks(1);",
      "info" : "ExpressionStatement[16134-16165]:ExpressionStatement[16195-16226]"
    }, {
      "left" : "writeHeader(this.entry);",
      "right" : "writeHeader(this.entry);",
      "info" : "ExpressionStatement[16174-16198]:ExpressionStatement[16235-16259]"
    }, {
      "left" : "closeArchiveEntry();",
      "right" : "closeArchiveEntry();",
      "info" : "ExpressionStatement[16207-16227]:ExpressionStatement[16268-16288]"
    }, {
      "left" : "int lengthOfLastBlock = (int) (getBytesWritten() % blockSize);",
      "right" : "int lengthOfLastBlock = (int) (getBytesWritten() % blockSize);",
      "info" : "VariableDeclarationStatement[16237-16299]:VariableDeclarationStatement[16298-16360]"
    }, {
      "left" : "if (lengthOfLastBlock != 0)",
      "right" : "if (lengthOfLastBlock != 0)",
      "info" : "IfStatement[16308-16395]:IfStatement[16369-16456]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16336-16395]:Block[16397-16456]"
    }, {
      "left" : "pad(blockSize - lengthOfLastBlock);",
      "right" : "pad(blockSize - lengthOfLastBlock);",
      "info" : "ExpressionStatement[16350-16385]:ExpressionStatement[16411-16446]"
    }, {
      "left" : "finished = true;",
      "right" : "finished = true;",
      "info" : "ExpressionStatement[16405-16421]:ExpressionStatement[16466-16482]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[16663-16672]:MarkerAnnotation[16724-16733]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[16677-16683]:Modifier[16738-16744]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16684-16688]:PrimitiveType[16745-16749]"
    }, {
      "left" : "close",
      "right" : "close",
      "info" : "SimpleName[16689-16694]:SimpleName[16750-16755]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16704-16715]:SimpleType[16765-16776]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16716-16875]:Block[16777-16936]"
    }, {
      "left" : "if(!finished)",
      "right" : "if(!finished)",
      "info" : "IfStatement[16726-16773]:IfStatement[16787-16834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16740-16773]:Block[16801-16834]"
    }, {
      "left" : "finish();",
      "right" : "finish();",
      "info" : "ExpressionStatement[16754-16763]:ExpressionStatement[16815-16824]"
    }, {
      "left" : "if (!this.closed)",
      "right" : "if (!this.closed)",
      "info" : "IfStatement[16783-16869]:IfStatement[16844-16930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16801-16869]:Block[16862-16930]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[16815-16827]:ExpressionStatement[16876-16888]"
    }, {
      "left" : "this.closed = true;",
      "right" : "this.closed = true;",
      "info" : "ExpressionStatement[16840-16859]:ExpressionStatement[16901-16920]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[16881-16888]:Modifier[16942-16949]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[16889-16893]:PrimitiveType[16950-16954]"
    }, {
      "left" : "pad",
      "right" : "pad",
      "info" : "SimpleName[16894-16897]:SimpleName[16955-16958]"
    }, {
      "left" : "int count",
      "right" : "int count",
      "info" : "SingleVariableDeclaration[16898-16907]:SingleVariableDeclaration[16959-16968]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16916-16927]:SimpleType[16977-16988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16927-17066]:Block[16988-17127]"
    }, {
      "left" : "if (count > 0)",
      "right" : "if (count > 0)",
      "info" : "IfStatement[16937-17060]:IfStatement[16998-17121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16951-17060]:Block[17012-17121]"
    }, {
      "left" : "byte buff[] = new byte[count];",
      "right" : "byte buff[] = new byte[count];",
      "info" : "VariableDeclarationStatement[16965-16995]:VariableDeclarationStatement[17026-17056]"
    }, {
      "left" : "out.write(buff);",
      "right" : "out.write(buff);",
      "info" : "ExpressionStatement[17008-17024]:ExpressionStatement[17069-17085]"
    }, {
      "left" : "count(count);",
      "right" : "count(count);",
      "info" : "ExpressionStatement[17037-17050]:ExpressionStatement[17098-17111]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17072-17079]:Modifier[17133-17140]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17080-17084]:PrimitiveType[17141-17145]"
    }, {
      "left" : "writeBinaryLong",
      "right" : "writeBinaryLong",
      "info" : "SimpleName[17085-17100]:SimpleName[17146-17161]"
    }, {
      "left" : "final long number",
      "right" : "final long number",
      "info" : "SingleVariableDeclaration[17101-17118]:SingleVariableDeclaration[17162-17179]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[17120-17136]:SingleVariableDeclaration[17181-17197]"
    }, {
      "left" : "final boolean swapHalfWord",
      "right" : "final boolean swapHalfWord",
      "info" : "SingleVariableDeclaration[17150-17176]:SingleVariableDeclaration[17211-17237]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17185-17196]:SimpleType[17246-17257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17197-17331]:Block[17258-17392]"
    }, {
      "left" : "byte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);",
      "right" : "byte tmp[] = CpioUtil.long2byteArray(number, length, swapHalfWord);",
      "info" : "VariableDeclarationStatement[17207-17274]:VariableDeclarationStatement[17268-17335]"
    }, {
      "left" : "out.write(tmp);",
      "right" : "out.write(tmp);",
      "info" : "ExpressionStatement[17283-17298]:ExpressionStatement[17344-17359]"
    }, {
      "left" : "count(tmp.length);",
      "right" : "count(tmp.length);",
      "info" : "ExpressionStatement[17307-17325]:ExpressionStatement[17368-17386]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[17337-17344]:Modifier[17398-17405]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[17345-17349]:PrimitiveType[17406-17410]"
    }, {
      "left" : "writeAsciiLong",
      "right" : "writeAsciiLong",
      "info" : "SimpleName[17350-17364]:SimpleName[17411-17425]"
    }, {
      "left" : "final long number",
      "right" : "final long number",
      "info" : "SingleVariableDeclaration[17365-17382]:SingleVariableDeclaration[17426-17443]"
    }, {
      "left" : "final int length",
      "right" : "final int length",
      "info" : "SingleVariableDeclaration[17384-17400]:SingleVariableDeclaration[17445-17461]"
    }, {
      "left" : "final int radix",
      "right" : "final int radix",
      "info" : "SingleVariableDeclaration[17414-17429]:SingleVariableDeclaration[17475-17490]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17438-17449]:SimpleType[17499-17510]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17450-18192]:Block[17511-18253]"
    }, {
      "left" : "StringBuilder tmp = new StringBuilder();",
      "right" : "StringBuilder tmp = new StringBuilder();",
      "info" : "VariableDeclarationStatement[17460-17500]:VariableDeclarationStatement[17521-17561]"
    }, {
      "left" : "String tmpStr;",
      "right" : "String tmpStr;",
      "info" : "VariableDeclarationStatement[17509-17523]:VariableDeclarationStatement[17570-17584]"
    }, {
      "left" : "if (radix == 16)",
      "right" : "if (radix == 16)",
      "info" : "IfStatement[17532-17759]:IfStatement[17593-17820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17549-17610]:Block[17610-17671]"
    }, {
      "left" : "tmp.append(Long.toHexString(number));",
      "right" : "tmp.append(Long.toHexString(number));",
      "info" : "ExpressionStatement[17563-17600]:ExpressionStatement[17624-17661]"
    }, {
      "left" : "if (radix == 8)",
      "right" : "if (radix == 8)",
      "info" : "IfStatement[17616-17759]:IfStatement[17677-17820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17632-17695]:Block[17693-17756]"
    }, {
      "left" : "tmp.append(Long.toOctalString(number));",
      "right" : "tmp.append(Long.toOctalString(number));",
      "info" : "ExpressionStatement[17646-17685]:ExpressionStatement[17707-17746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17701-17759]:Block[17762-17820]"
    }, {
      "left" : "tmp.append(Long.toString(number));",
      "right" : "tmp.append(Long.toString(number));",
      "info" : "ExpressionStatement[17715-17749]:ExpressionStatement[17776-17810]"
    }, {
      "left" : "if (tmp.length() <= length)",
      "right" : "if (tmp.length() <= length)",
      "info" : "IfStatement[17769-18085]:IfStatement[17830-18146]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17797-18009]:Block[17858-18070]"
    }, {
      "left" : "long insertLength = length - tmp.length();",
      "right" : "long insertLength = length - tmp.length();",
      "info" : "VariableDeclarationStatement[17811-17853]:VariableDeclarationStatement[17872-17914]"
    }, {
      "left" : "for (int pos = 0; pos < insertLength; pos++)",
      "right" : "for (int pos = 0; pos < insertLength; pos++)",
      "info" : "ForStatement[17866-17962]:ForStatement[17927-18023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17911-17962]:Block[17972-18023]"
    }, {
      "left" : "tmp.insert(0, \"0\");",
      "right" : "tmp.insert(0, \"0\");",
      "info" : "ExpressionStatement[17929-17948]:ExpressionStatement[17990-18009]"
    }, {
      "left" : "tmpStr = tmp.toString();",
      "right" : "tmpStr = tmp.toString();",
      "info" : "ExpressionStatement[17975-17999]:ExpressionStatement[18036-18060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18015-18085]:Block[18076-18146]"
    }, {
      "left" : "tmpStr = tmp.substring(tmp.length() - length);",
      "right" : "tmpStr = tmp.substring(tmp.length() - length);",
      "info" : "ExpressionStatement[18029-18075]:ExpressionStatement[18090-18136]"
    }, {
      "left" : "byte[] b = ArchiveUtils.toAsciiBytes(tmpStr);",
      "right" : "byte[] b = ArchiveUtils.toAsciiBytes(tmpStr);",
      "info" : "VariableDeclarationStatement[18094-18139]:VariableDeclarationStatement[18155-18200]"
    }, {
      "left" : "out.write(b);",
      "right" : "out.write(b);",
      "info" : "ExpressionStatement[18148-18161]:ExpressionStatement[18209-18222]"
    }, {
      "left" : "count(b.length);",
      "right" : "count(b.length);",
      "info" : "ExpressionStatement[18170-18186]:ExpressionStatement[18231-18247]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[18372-18379]:Modifier[18433-18440]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[18380-18384]:PrimitiveType[18441-18445]"
    }, {
      "left" : "writeCString",
      "right" : "writeCString",
      "info" : "SimpleName[18385-18397]:SimpleName[18446-18458]"
    }, {
      "left" : "final String str",
      "right" : "final String str",
      "info" : "SingleVariableDeclaration[18398-18414]:SingleVariableDeclaration[18459-18475]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18423-18434]:SimpleType[18484-18495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18435-18651]:Block[18496-18712]"
    }, {
      "left" : "ByteBuffer buf = zipEncoding.encode(str);",
      "right" : "ByteBuffer buf = zipEncoding.encode(str);",
      "info" : "VariableDeclarationStatement[18445-18486]:VariableDeclarationStatement[18506-18547]"
    }, {
      "left" : "final int len = buf.limit() - buf.position();",
      "right" : "final int len = buf.limit() - buf.position();",
      "info" : "VariableDeclarationStatement[18495-18540]:VariableDeclarationStatement[18556-18601]"
    }, {
      "left" : "out.write(buf.array(), buf.arrayOffset(), len);",
      "right" : "out.write(buf.array(), buf.arrayOffset(), len);",
      "info" : "ExpressionStatement[18549-18596]:ExpressionStatement[18610-18657]"
    }, {
      "left" : "out.write('\\0');",
      "right" : "out.write('\\0');",
      "info" : "ExpressionStatement[18605-18621]:ExpressionStatement[18666-18682]"
    }, {
      "left" : "count(len + 1);",
      "right" : "count(len + 1);",
      "info" : "ExpressionStatement[18630-18645]:ExpressionStatement[18691-18706]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[18884-18893]:MarkerAnnotation[18945-18954]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[18898-18904]:Modifier[18959-18965]"
    }, {
      "left" : "ArchiveEntry",
      "right" : "ArchiveEntry",
      "info" : "SimpleType[18905-18917]:SimpleType[18966-18978]"
    }, {
      "left" : "createArchiveEntry",
      "right" : "createArchiveEntry",
      "info" : "SimpleName[18918-18936]:SimpleName[18979-18997]"
    }, {
      "left" : "File inputFile",
      "right" : "File inputFile",
      "info" : "SingleVariableDeclaration[18937-18951]:SingleVariableDeclaration[18998-19012]"
    }, {
      "left" : "String entryName",
      "right" : "String entryName",
      "info" : "SingleVariableDeclaration[18953-18969]:SingleVariableDeclaration[19014-19030]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[18990-19001]:SimpleType[19051-19062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19002-19172]:Block[19063-19233]"
    }, {
      "left" : "if(finished)",
      "right" : "if(finished)",
      "info" : "IfStatement[19012-19107]:IfStatement[19073-19168]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19025-19107]:Block[19086-19168]"
    }, {
      "left" : "throw new IOException(\"Stream has already been finished\");",
      "right" : "throw new IOException(\"Stream has already been finished\");",
      "info" : "ThrowStatement[19039-19097]:ThrowStatement[19100-19158]"
    }, {
      "left" : "return new CpioArchiveEntry(inputFile, entryName);",
      "right" : "return new CpioArchiveEntry(inputFile, entryName);",
      "info" : "ReturnStatement[19116-19166]:ReturnStatement[19177-19227]"
    } ]
  },
  "interFileMappings" : { }
}