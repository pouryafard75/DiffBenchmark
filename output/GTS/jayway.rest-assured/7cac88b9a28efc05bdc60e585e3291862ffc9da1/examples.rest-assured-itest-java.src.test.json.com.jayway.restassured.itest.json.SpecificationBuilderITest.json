{
  "matchedElements" : [ {
    "left" : "class : SpecificationBuilderITest",
    "right" : "class : SpecificationBuilderITest",
    "info" : "TypeDeclaration[1754-18521]:TypeDeclaration[1682-17795]"
  }, {
    "left" : "public expectingSpecificationMergesTheCurrentSpecificationWithTheSuppliedOne() : void",
    "right" : "public expectingSpecificationMergesTheCurrentSpecificationWithTheSuppliedOne() : void",
    "info" : "MethodDeclaration[1818-2355]:MethodDeclaration[1746-2283]"
  }, {
    "left" : "public supportsSpecifyingDefaultResponseSpec() : void",
    "right" : "public supportsSpecifyingDefaultResponseSpec() : void",
    "info" : "MethodDeclaration[2361-2819]:MethodDeclaration[2289-2747]"
  }, {
    "left" : "public expectingSpecMergesTheCurrentSpecificationWithTheSuppliedOne() : void",
    "right" : "public expectingSpecMergesTheCurrentSpecificationWithTheSuppliedOne() : void",
    "info" : "MethodDeclaration[2825-3344]:MethodDeclaration[2753-3272]"
  }, {
    "left" : "public bodyExpectationsAreNotOverwritten() : void",
    "right" : "public bodyExpectationsAreNotOverwritten() : void",
    "info" : "MethodDeclaration[3350-3964]:MethodDeclaration[3278-3892]"
  }, {
    "left" : "public responseSpecificationSupportsMergingWithAnotherResponseSpecification() : void",
    "right" : "public responseSpecificationSupportsMergingWithAnotherResponseSpecification() : void",
    "info" : "MethodDeclaration[3970-4618]:MethodDeclaration[3898-4546]"
  }, {
    "left" : "public responseSpecificationCanExpectBodyWithArgs() : void",
    "right" : "public responseSpecificationCanExpectBodyWithArgs() : void",
    "info" : "MethodDeclaration[4624-5048]:MethodDeclaration[4552-4976]"
  }, {
    "left" : "public responseSpecificationCanExpectContentWithArgs() : void",
    "right" : "public responseSpecificationCanExpectContentWithArgs() : void",
    "info" : "MethodDeclaration[5054-5487]:MethodDeclaration[4982-5415]"
  }, {
    "left" : "public supportsSpecifyingParametersInRequestSpecBuilder() : void",
    "right" : "public supportsSpecifyingParametersInRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[5493-5962]:MethodDeclaration[5421-5890]"
  }, {
    "left" : "public supportsSpecifyingDefaultRequestSpec() : void",
    "right" : "public supportsSpecifyingDefaultRequestSpec() : void",
    "info" : "MethodDeclaration[5968-6477]:MethodDeclaration[5896-6405]"
  }, {
    "left" : "public supportsSpecifyingQueryParametersInRequestSpecBuilderWhenGet() : void",
    "right" : "public supportsSpecifyingQueryParametersInRequestSpecBuilderWhenGet() : void",
    "info" : "MethodDeclaration[6483-6974]:MethodDeclaration[6411-6902]"
  }, {
    "left" : "public supportsSpecifyingQueryParametersInRequestSpecBuilderWhenPost() : void",
    "right" : "public supportsSpecifyingQueryParametersInRequestSpecBuilderWhenPost() : void",
    "info" : "MethodDeclaration[6980-7473]:MethodDeclaration[6908-7401]"
  }, {
    "left" : "public supportsMergesParametersWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergesParametersWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[7479-7965]:MethodDeclaration[7407-7893]"
  }, {
    "left" : "public supportsMergingCookiesWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingCookiesWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[7971-8534]:MethodDeclaration[7899-8462]"
  }, {
    "left" : "public supportsMergingHeadersWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingHeadersWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[8540-9000]:MethodDeclaration[8468-8928]"
  }, {
    "left" : "public supportsMergingRequestSpecHeadersUsingTheBuilder() : void",
    "right" : "public supportsMergingRequestSpecHeadersUsingTheBuilder() : void",
    "info" : "MethodDeclaration[9006-9625]:MethodDeclaration[8934-9553]"
  }, {
    "left" : "public requestSpecBuilderSupportsSettingAuthentication() : void",
    "right" : "public requestSpecBuilderSupportsSettingAuthentication() : void",
    "info" : "MethodDeclaration[9631-9988]:MethodDeclaration[9559-9916]"
  }, {
    "left" : "public supportsMergingMultiValueParametersWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingMultiValueParametersWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[9994-10382]:MethodDeclaration[9922-10310]"
  }, {
    "left" : "public supportsMergingMultiValueQueryParametersWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingMultiValueQueryParametersWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[10388-10786]:MethodDeclaration[10316-10714]"
  }, {
    "left" : "public supportsMergingMultiValueFormParametersWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingMultiValueFormParametersWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[10792-11188]:MethodDeclaration[10720-11116]"
  }, {
    "left" : "public supportsMergingMultiValueParametersUsingListWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingMultiValueParametersUsingListWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[11194-11599]:MethodDeclaration[11122-11527]"
  }, {
    "left" : "public supportsMergingMultiValueQueryParametersUsingListWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingMultiValueQueryParametersUsingListWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[11605-12020]:MethodDeclaration[11533-11948]"
  }, {
    "left" : "public supportsMergingMultiValueFormParametersUsingListWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingMultiValueFormParametersUsingListWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[12026-12439]:MethodDeclaration[11954-12367]"
  }, {
    "left" : "public supportsMergingFormParametersWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingFormParametersWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[12445-12898]:MethodDeclaration[12373-12826]"
  }, {
    "left" : "public supportsMergingPathParametersWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsMergingPathParametersWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[12904-13351]:MethodDeclaration[12832-13279]"
  }, {
    "left" : "public supportsSettingLoggingWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsSettingLoggingWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[13357-14393]:MethodDeclaration[13285-14321]"
  }, {
    "left" : "public supportsSettingConfigWhenUsingRequestSpecBuilder() : void",
    "right" : "public supportsSettingConfigWhenUsingRequestSpecBuilder() : void",
    "info" : "MethodDeclaration[14399-14903]:MethodDeclaration[14327-14831]"
  }, {
    "left" : "public mergesStaticallyDefinedResponseSpecificationsCorrectly() : void",
    "right" : "public mergesStaticallyDefinedResponseSpecificationsCorrectly() : void",
    "info" : "MethodDeclaration[14909-16516]:MethodDeclaration[14837-16444]"
  }, {
    "left" : "public mergesStaticallyDefinedRequestSpecificationsCorrectly() : void",
    "right" : "public mergesStaticallyDefinedRequestSpecificationsCorrectly() : void",
    "info" : "MethodDeclaration[16522-17865]:MethodDeclaration[16450-17793]"
  } ],
  "mappings" : [ {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[1818-1823]:MarkerAnnotation[1746-1751]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1828-1834]:Modifier[1756-1762]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[1835-1839]:PrimitiveType[1763-1767]"
  }, {
    "left" : "expectingSpecificationMergesTheCurrentSpecificationWithTheSuppliedOne",
    "right" : "expectingSpecificationMergesTheCurrentSpecificationWithTheSuppliedOne",
    "info" : "SimpleName[1840-1909]:SimpleName[1768-1837]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[1919-1928]:SimpleType[1847-1856]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1929-2355]:Block[1857-2283]"
  }, {
    "left" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
    "right" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
    "info" : "VariableDeclarationStatement[1939-2001]:VariableDeclarationStatement[1867-1929]"
  }, {
    "left" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
    "right" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
    "info" : "ExpressionStatement[2010-2079]:ExpressionStatement[1938-2007]"
  }, {
    "left" : "final ResponseSpecification responseSpecification = builder.build();",
    "right" : "final ResponseSpecification responseSpecification = builder.build();",
    "info" : "VariableDeclarationStatement[2088-2156]:VariableDeclarationStatement[2016-2084]"
  }, {
    "left" : "expect().\n                specification(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
    "right" : "expect().\n                specification(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
    "info" : "ExpressionStatement[2166-2349]:ExpressionStatement[2094-2277]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2361-2366]:MarkerAnnotation[2289-2294]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2371-2377]:Modifier[2299-2305]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2378-2382]:PrimitiveType[2306-2310]"
  }, {
    "left" : "supportsSpecifyingDefaultResponseSpec",
    "right" : "supportsSpecifyingDefaultResponseSpec",
    "info" : "SimpleName[2383-2420]:SimpleName[2311-2348]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[2430-2439]:SimpleType[2358-2367]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2440-2819]:Block[2368-2747]"
  }, {
    "left" : "RestAssured.responseSpecification = new ResponseSpecBuilder().expectBody(\"store.book.size()\", is(4)).expectStatusCode(200).build();",
    "right" : "RestAssured.responseSpecification = new ResponseSpecBuilder().expectBody(\"store.book.size()\", is(4)).expectStatusCode(200).build();",
    "info" : "ExpressionStatement[2450-2581]:ExpressionStatement[2378-2509]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[2591-2813]:TryStatement[2519-2741]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2595-2760]:Block[2523-2688]"
  }, {
    "left" : "expect().\n                    body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n            when().\n                    get(\"/jsonStore\");",
    "right" : "expect().\n                    body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n            when().\n                    get(\"/jsonStore\");",
    "info" : "ExpressionStatement[2609-2750]:ExpressionStatement[2537-2678]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2769-2813]:Block[2697-2741]"
  }, {
    "left" : "RestAssured.reset();",
    "right" : "RestAssured.reset();",
    "info" : "ExpressionStatement[2783-2803]:ExpressionStatement[2711-2731]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2825-2830]:MarkerAnnotation[2753-2758]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2835-2841]:Modifier[2763-2769]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2842-2846]:PrimitiveType[2770-2774]"
  }, {
    "left" : "expectingSpecMergesTheCurrentSpecificationWithTheSuppliedOne",
    "right" : "expectingSpecMergesTheCurrentSpecificationWithTheSuppliedOne",
    "info" : "SimpleName[2847-2907]:SimpleName[2775-2835]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[2917-2926]:SimpleType[2845-2854]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2927-3344]:Block[2855-3272]"
  }, {
    "left" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
    "right" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
    "info" : "VariableDeclarationStatement[2937-2999]:VariableDeclarationStatement[2865-2927]"
  }, {
    "left" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
    "right" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
    "info" : "ExpressionStatement[3008-3077]:ExpressionStatement[2936-3005]"
  }, {
    "left" : "final ResponseSpecification responseSpecification = builder.build();",
    "right" : "final ResponseSpecification responseSpecification = builder.build();",
    "info" : "VariableDeclarationStatement[3086-3154]:VariableDeclarationStatement[3014-3082]"
  }, {
    "left" : "expect().\n                spec(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
    "right" : "expect().\n                spec(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
    "info" : "ExpressionStatement[3164-3338]:ExpressionStatement[3092-3266]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[3350-3355]:MarkerAnnotation[3278-3283]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3360-3366]:Modifier[3288-3294]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3367-3371]:PrimitiveType[3295-3299]"
  }, {
    "left" : "bodyExpectationsAreNotOverwritten",
    "right" : "bodyExpectationsAreNotOverwritten",
    "info" : "SimpleName[3372-3405]:SimpleName[3300-3333]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[3415-3424]:SimpleType[3343-3352]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3425-3964]:Block[3353-3892]"
  }, {
    "left" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
    "right" : "final ResponseSpecBuilder builder = new ResponseSpecBuilder();",
    "info" : "VariableDeclarationStatement[3435-3497]:VariableDeclarationStatement[3363-3425]"
  }, {
    "left" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
    "right" : "builder.expectBody(\"store.book.size()\", is(4)).expectStatusCode(200);",
    "info" : "ExpressionStatement[3506-3575]:ExpressionStatement[3434-3503]"
  }, {
    "left" : "final ResponseSpecification responseSpecification = builder.build();",
    "right" : "final ResponseSpecification responseSpecification = builder.build();",
    "info" : "VariableDeclarationStatement[3584-3652]:VariableDeclarationStatement[3512-3580]"
  }, {
    "left" : "expect().\n                body(\"store.book.author\", hasItems(\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"J. R. R. Tolkien\")).\n                spec(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
    "right" : "expect().\n                body(\"store.book.author\", hasItems(\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"J. R. R. Tolkien\")).\n                spec(responseSpecification).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
    "info" : "ExpressionStatement[3662-3958]:ExpressionStatement[3590-3886]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[3970-3975]:MarkerAnnotation[3898-3903]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3980-3986]:Modifier[3908-3914]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3987-3991]:PrimitiveType[3915-3919]"
  }, {
    "left" : "responseSpecificationSupportsMergingWithAnotherResponseSpecification",
    "right" : "responseSpecificationSupportsMergingWithAnotherResponseSpecification",
    "info" : "SimpleName[3992-4060]:SimpleName[3920-3988]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[4070-4079]:SimpleType[3998-4007]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4080-4618]:Block[4008-4546]"
  }, {
    "left" : "final ResponseSpecification specification = expect().body(\"store.book.size()\", equalTo(4));",
    "right" : "final ResponseSpecification specification = expect().body(\"store.book.size()\", equalTo(4));",
    "info" : "VariableDeclarationStatement[4090-4181]:VariableDeclarationStatement[4018-4109]"
  }, {
    "left" : "final ResponseSpecification built = new ResponseSpecBuilder().expectStatusCode(200).addResponseSpecification(specification).build();",
    "right" : "final ResponseSpecification built = new ResponseSpecBuilder().expectStatusCode(200).addResponseSpecification(specification).build();",
    "info" : "VariableDeclarationStatement[4190-4322]:VariableDeclarationStatement[4118-4250]"
  }, {
    "left" : "expect().\n                body(\"store.book.author\", hasItems(\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"J. R. R. Tolkien\")).\n                spec(built).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
    "right" : "expect().\n                body(\"store.book.author\", hasItems(\"Nigel Rees\", \"Evelyn Waugh\", \"Herman Melville\", \"J. R. R. Tolkien\")).\n                spec(built).\n                body(\"store.book[0].author\", equalTo(\"Nigel Rees\")).\n        when().\n                get(\"/jsonStore\");",
    "info" : "ExpressionStatement[4332-4612]:ExpressionStatement[4260-4540]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[4624-4629]:MarkerAnnotation[4552-4557]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4634-4640]:Modifier[4562-4568]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4641-4645]:PrimitiveType[4569-4573]"
  }, {
    "left" : "responseSpecificationCanExpectBodyWithArgs",
    "right" : "responseSpecificationCanExpectBodyWithArgs",
    "info" : "SimpleName[4646-4688]:SimpleName[4574-4616]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[4699-4708]:SimpleType[4627-4636]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4709-5048]:Block[4637-4976]"
  }, {
    "left" : "final ResponseSpecification spec = new ResponseSpecBuilder().rootPath(\"store.book[%d]\").expectBody(\"author\", withArgs(0), equalTo(\"Nigel Rees\")).build();",
    "right" : "final ResponseSpecification spec = new ResponseSpecBuilder().rootPath(\"store.book[%d]\").expectBody(\"author\", withArgs(0), equalTo(\"Nigel Rees\")).build();",
    "info" : "VariableDeclarationStatement[4719-4872]:VariableDeclarationStatement[4647-4800]"
  }, {
    "left" : "expect().\n                spec(spec).\n                body(\"title\", withArgs(1), equalTo(\"Sword of Honour\")).\n        when().\n                get(\"/jsonStore\");",
    "right" : "expect().\n                spec(spec).\n                body(\"title\", withArgs(1), equalTo(\"Sword of Honour\")).\n        when().\n                get(\"/jsonStore\");",
    "info" : "ExpressionStatement[4882-5042]:ExpressionStatement[4810-4970]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[5054-5059]:MarkerAnnotation[4982-4987]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5064-5070]:Modifier[4992-4998]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5071-5075]:PrimitiveType[4999-5003]"
  }, {
    "left" : "responseSpecificationCanExpectContentWithArgs",
    "right" : "responseSpecificationCanExpectContentWithArgs",
    "info" : "SimpleName[5076-5121]:SimpleName[5004-5049]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[5132-5141]:SimpleType[5060-5069]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5142-5487]:Block[5070-5415]"
  }, {
    "left" : "final ResponseSpecification spec = new ResponseSpecBuilder().rootPath(\"store.book[%d]\").expectContent(\"author\", withArgs(0), equalTo(\"Nigel Rees\")).build();",
    "right" : "final ResponseSpecification spec = new ResponseSpecBuilder().rootPath(\"store.book[%d]\").expectContent(\"author\", withArgs(0), equalTo(\"Nigel Rees\")).build();",
    "info" : "VariableDeclarationStatement[5152-5308]:VariableDeclarationStatement[5080-5236]"
  }, {
    "left" : "expect().\n                spec(spec).\n                content(\"title\", withArgs(1), equalTo(\"Sword of Honour\")).\n        when().\n                get(\"/jsonStore\");",
    "right" : "expect().\n                spec(spec).\n                content(\"title\", withArgs(1), equalTo(\"Sword of Honour\")).\n        when().\n                get(\"/jsonStore\");",
    "info" : "ExpressionStatement[5318-5481]:ExpressionStatement[5246-5409]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[5493-5498]:MarkerAnnotation[5421-5426]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5503-5509]:Modifier[5431-5437]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5510-5514]:PrimitiveType[5438-5442]"
  }, {
    "left" : "supportsSpecifyingParametersInRequestSpecBuilder",
    "right" : "supportsSpecifyingParametersInRequestSpecBuilder",
    "info" : "SimpleName[5515-5563]:SimpleName[5443-5491]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[5573-5582]:SimpleType[5501-5510]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5583-5962]:Block[5511-5890]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").addParam(\"lastName\", \"Doe\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").addParam(\"lastName\", \"Doe\").build();",
    "info" : "VariableDeclarationStatement[5593-5722]:VariableDeclarationStatement[5521-5650]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
    "info" : "ExpressionStatement[5732-5956]:ExpressionStatement[5660-5884]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[5968-5973]:MarkerAnnotation[5896-5901]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5978-5984]:Modifier[5906-5912]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5985-5989]:PrimitiveType[5913-5917]"
  }, {
    "left" : "supportsSpecifyingDefaultRequestSpec",
    "right" : "supportsSpecifyingDefaultRequestSpec",
    "info" : "SimpleName[5990-6026]:SimpleName[5918-5954]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[6036-6045]:SimpleType[5964-5973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6046-6477]:Block[5974-6405]"
  }, {
    "left" : "RestAssured.requestSpecification = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").addParam(\"lastName\", \"Doe\").build();",
    "right" : "RestAssured.requestSpecification = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").addParam(\"lastName\", \"Doe\").build();",
    "info" : "ExpressionStatement[6056-6186]:ExpressionStatement[5984-6114]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[6195-6471]:TryStatement[6123-6399]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6199-6418]:Block[6127-6346]"
  }, {
    "left" : "expect().\n                    body(\"greeting.firstName\", equalTo(\"John\")).\n                    body(\"greeting.lastName\", equalTo(\"Doe\")).\n            when().\n                    get(\"/greetXML\");",
    "right" : "expect().\n                    body(\"greeting.firstName\", equalTo(\"John\")).\n                    body(\"greeting.lastName\", equalTo(\"Doe\")).\n            when().\n                    get(\"/greetXML\");",
    "info" : "ExpressionStatement[6213-6408]:ExpressionStatement[6141-6336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6427-6471]:Block[6355-6399]"
  }, {
    "left" : "RestAssured.reset();",
    "right" : "RestAssured.reset();",
    "info" : "ExpressionStatement[6441-6461]:ExpressionStatement[6369-6389]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[6483-6488]:MarkerAnnotation[6411-6416]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6493-6499]:Modifier[6421-6427]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6500-6504]:PrimitiveType[6428-6432]"
  }, {
    "left" : "supportsSpecifyingQueryParametersInRequestSpecBuilderWhenGet",
    "right" : "supportsSpecifyingQueryParametersInRequestSpecBuilderWhenGet",
    "info" : "SimpleName[6505-6565]:SimpleName[6433-6493]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[6575-6584]:SimpleType[6503-6512]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6585-6974]:Block[6513-6902]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParameter(\"firstName\", \"John\").addQueryParam(\"lastName\", \"Doe\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParameter(\"firstName\", \"John\").addQueryParam(\"lastName\", \"Doe\").build();",
    "info" : "VariableDeclarationStatement[6595-6734]:VariableDeclarationStatement[6523-6662]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
    "info" : "ExpressionStatement[6744-6968]:ExpressionStatement[6672-6896]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[6980-6985]:MarkerAnnotation[6908-6913]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6990-6996]:Modifier[6918-6924]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6997-7001]:PrimitiveType[6925-6929]"
  }, {
    "left" : "supportsSpecifyingQueryParametersInRequestSpecBuilderWhenPost",
    "right" : "supportsSpecifyingQueryParametersInRequestSpecBuilderWhenPost",
    "info" : "SimpleName[7002-7063]:SimpleName[6930-6991]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[7073-7082]:SimpleType[7001-7010]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7083-7473]:Block[7011-7401]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParameter(\"firstName\", \"John\").addQueryParam(\"lastName\", \"Doe\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParameter(\"firstName\", \"John\").addQueryParam(\"lastName\", \"Doe\").build();",
    "info" : "VariableDeclarationStatement[7093-7232]:VariableDeclarationStatement[7021-7160]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                post(\"/greetXML\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                post(\"/greetXML\");",
    "info" : "ExpressionStatement[7242-7467]:ExpressionStatement[7170-7395]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[7479-7484]:MarkerAnnotation[7407-7412]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7489-7495]:Modifier[7417-7423]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7496-7500]:PrimitiveType[7424-7428]"
  }, {
    "left" : "supportsMergesParametersWhenUsingRequestSpecBuilder",
    "right" : "supportsMergesParametersWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[7501-7552]:SimpleName[7429-7480]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[7562-7571]:SimpleType[7490-7499]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7572-7965]:Block[7500-7893]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addParameter(\"firstName\", \"John\").build();",
    "info" : "VariableDeclarationStatement[7582-7683]:VariableDeclarationStatement[7510-7611]"
  }, {
    "left" : "given().\n                spec(spec).\n                param(\"lastName\", \"Doe\").\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
    "right" : "given().\n                spec(spec).\n                param(\"lastName\", \"Doe\").\n        expect().\n                body(\"greeting.firstName\", equalTo(\"John\")).\n                body(\"greeting.lastName\", equalTo(\"Doe\")).\n        when().\n                get(\"/greetXML\");",
    "info" : "ExpressionStatement[7693-7959]:ExpressionStatement[7621-7887]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[7971-7976]:MarkerAnnotation[7899-7904]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7981-7987]:Modifier[7909-7915]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7988-7992]:PrimitiveType[7916-7920]"
  }, {
    "left" : "supportsMergingCookiesWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingCookiesWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[7993-8042]:SimpleName[7921-7970]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[8052-8061]:SimpleType[7980-7989]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8062-8534]:Block[7990-8462]"
  }, {
    "left" : "final RequestSpecification spec1 = new RequestSpecBuilder().addCookie(\"cookie3\", \"value3\").build();",
    "right" : "final RequestSpecification spec1 = new RequestSpecBuilder().addCookie(\"cookie3\", \"value3\").build();",
    "info" : "VariableDeclarationStatement[8072-8171]:VariableDeclarationStatement[8000-8099]"
  }, {
    "left" : "final RequestSpecification spec2 = new RequestSpecBuilder().addCookie(\"cookie1\", \"value1\").addRequestSpecification(spec1).build();",
    "right" : "final RequestSpecification spec2 = new RequestSpecBuilder().addCookie(\"cookie1\", \"value1\").addRequestSpecification(spec1).build();",
    "info" : "VariableDeclarationStatement[8180-8310]:VariableDeclarationStatement[8108-8238]"
  }, {
    "left" : "given().\n                spec(spec2).\n                cookie(\"cookie2\", \"value2\").\n        expect().\n                body(equalTo(\"cookie1, cookie3, cookie2\")).\n        when().\n                get(\"/cookie\");",
    "right" : "given().\n                spec(spec2).\n                cookie(\"cookie2\", \"value2\").\n        expect().\n                body(equalTo(\"cookie1, cookie3, cookie2\")).\n        when().\n                get(\"/cookie\");",
    "info" : "ExpressionStatement[8320-8528]:ExpressionStatement[8248-8456]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[8540-8545]:MarkerAnnotation[8468-8473]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8550-8556]:Modifier[8478-8484]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8557-8561]:PrimitiveType[8485-8489]"
  }, {
    "left" : "supportsMergingHeadersWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingHeadersWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[8562-8611]:SimpleName[8490-8539]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[8621-8630]:SimpleType[8549-8558]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8631-9000]:Block[8559-8928]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addHeader(\"header1\", \"value1\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addHeader(\"header1\", \"value1\").build();",
    "info" : "VariableDeclarationStatement[8641-8739]:VariableDeclarationStatement[8569-8667]"
  }, {
    "left" : "given().\n                spec(spec).\n                header(\"header2\", \"value2\").\n        expect().\n                body(containsString(\"header1\")).\n                body(containsString(\"header2\")).\n        when().\n                get(\"/header\");",
    "right" : "given().\n                spec(spec).\n                header(\"header2\", \"value2\").\n        expect().\n                body(containsString(\"header1\")).\n                body(containsString(\"header2\")).\n        when().\n                get(\"/header\");",
    "info" : "ExpressionStatement[8749-8994]:ExpressionStatement[8677-8922]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[9006-9011]:MarkerAnnotation[8934-8939]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9016-9022]:Modifier[8944-8950]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9023-9027]:PrimitiveType[8951-8955]"
  }, {
    "left" : "supportsMergingRequestSpecHeadersUsingTheBuilder",
    "right" : "supportsMergingRequestSpecHeadersUsingTheBuilder",
    "info" : "SimpleName[9028-9076]:SimpleName[8956-9004]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[9086-9095]:SimpleType[9014-9023]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9096-9625]:Block[9024-9553]"
  }, {
    "left" : "final RequestSpecification spec = given().header(\"header2\", \"value2\");",
    "right" : "final RequestSpecification spec = given().header(\"header2\", \"value2\");",
    "info" : "VariableDeclarationStatement[9106-9176]:VariableDeclarationStatement[9034-9104]"
  }, {
    "left" : "final RequestSpecification spec2 = new RequestSpecBuilder().addHeader(\"header1\", \"value1\").addRequestSpecification(spec).build();",
    "right" : "final RequestSpecification spec2 = new RequestSpecBuilder().addHeader(\"header1\", \"value1\").addRequestSpecification(spec).build();",
    "info" : "VariableDeclarationStatement[9185-9314]:VariableDeclarationStatement[9113-9242]"
  }, {
    "left" : "given().\n                spec(spec2).\n                header(\"header3\", \"value3\").\n        expect().\n                body(containsString(\"header1\")).\n                body(containsString(\"header2\")).\n                body(containsString(\"header3\")).\n        when().\n                get(\"/header\");",
    "right" : "given().\n                spec(spec2).\n                header(\"header3\", \"value3\").\n        expect().\n                body(containsString(\"header1\")).\n                body(containsString(\"header2\")).\n                body(containsString(\"header3\")).\n        when().\n                get(\"/header\");",
    "info" : "ExpressionStatement[9324-9619]:ExpressionStatement[9252-9547]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[9631-9636]:MarkerAnnotation[9559-9564]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9641-9647]:Modifier[9569-9575]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9648-9652]:PrimitiveType[9576-9580]"
  }, {
    "left" : "requestSpecBuilderSupportsSettingAuthentication",
    "right" : "requestSpecBuilderSupportsSettingAuthentication",
    "info" : "SimpleName[9653-9700]:SimpleName[9581-9628]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[9710-9719]:SimpleType[9638-9647]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9720-9988]:Block[9648-9916]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().setAuth(basic(\"jetty\", \"jetty\")).build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().setAuth(basic(\"jetty\", \"jetty\")).build();",
    "info" : "VariableDeclarationStatement[9730-9830]:VariableDeclarationStatement[9658-9758]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                statusCode(200).\n        when().\n                get(\"/secured/hello\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                statusCode(200).\n        when().\n                get(\"/secured/hello\");",
    "info" : "ExpressionStatement[9840-9982]:ExpressionStatement[9768-9910]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[9994-9999]:MarkerAnnotation[9922-9927]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10004-10010]:Modifier[9932-9938]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10011-10015]:PrimitiveType[9939-9943]"
  }, {
    "left" : "supportsMergingMultiValueParametersWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingMultiValueParametersWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[10016-10078]:SimpleName[9944-10006]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[10088-10097]:SimpleType[10016-10025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10098-10382]:Block[10026-10310]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addParam(\"list\", \"1\", \"2\", \"3\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addParam(\"list\", \"1\", \"2\", \"3\").build();",
    "info" : "VariableDeclarationStatement[10108-10207]:VariableDeclarationStatement[10036-10135]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
    "info" : "ExpressionStatement[10217-10376]:ExpressionStatement[10145-10304]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[10388-10393]:MarkerAnnotation[10316-10321]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10398-10404]:Modifier[10326-10332]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10405-10409]:PrimitiveType[10333-10337]"
  }, {
    "left" : "supportsMergingMultiValueQueryParametersWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingMultiValueQueryParametersWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[10410-10477]:SimpleName[10338-10405]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[10487-10496]:SimpleType[10415-10424]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10497-10786]:Block[10425-10714]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParam(\"list\", \"1\", \"2\", \"3\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParam(\"list\", \"1\", \"2\", \"3\").build();",
    "info" : "VariableDeclarationStatement[10507-10611]:VariableDeclarationStatement[10435-10539]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
    "info" : "ExpressionStatement[10621-10780]:ExpressionStatement[10549-10708]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[10792-10797]:MarkerAnnotation[10720-10725]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10802-10808]:Modifier[10730-10736]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10809-10813]:PrimitiveType[10737-10741]"
  }, {
    "left" : "supportsMergingMultiValueFormParametersWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingMultiValueFormParametersWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[10814-10880]:SimpleName[10742-10808]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[10890-10899]:SimpleType[10818-10827]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10900-11188]:Block[10828-11116]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"list\", \"1\", \"2\", \"3\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"list\", \"1\", \"2\", \"3\").build();",
    "info" : "VariableDeclarationStatement[10910-11013]:VariableDeclarationStatement[10838-10941]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                put(\"/multiValueParam\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                put(\"/multiValueParam\");",
    "info" : "ExpressionStatement[11023-11182]:ExpressionStatement[10951-11110]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[11194-11199]:MarkerAnnotation[11122-11127]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11204-11210]:Modifier[11132-11138]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11211-11215]:PrimitiveType[11139-11143]"
  }, {
    "left" : "supportsMergingMultiValueParametersUsingListWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingMultiValueParametersUsingListWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[11216-11287]:SimpleName[11144-11215]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[11297-11306]:SimpleType[11225-11234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11307-11599]:Block[11235-11527]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
    "info" : "VariableDeclarationStatement[11317-11424]:VariableDeclarationStatement[11245-11352]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
    "info" : "ExpressionStatement[11434-11593]:ExpressionStatement[11362-11521]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[11605-11610]:MarkerAnnotation[11533-11538]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[11615-11621]:Modifier[11543-11549]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[11622-11626]:PrimitiveType[11550-11554]"
  }, {
    "left" : "supportsMergingMultiValueQueryParametersUsingListWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingMultiValueQueryParametersUsingListWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[11627-11703]:SimpleName[11555-11631]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[11713-11722]:SimpleType[11641-11650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11723-12020]:Block[11651-11948]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addQueryParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
    "info" : "VariableDeclarationStatement[11733-11845]:VariableDeclarationStatement[11661-11773]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                get(\"/multiValueParam\");",
    "info" : "ExpressionStatement[11855-12014]:ExpressionStatement[11783-11942]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[12026-12031]:MarkerAnnotation[11954-11959]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12036-12042]:Modifier[11964-11970]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12043-12047]:PrimitiveType[11971-11975]"
  }, {
    "left" : "supportsMergingMultiValueFormParametersUsingListWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingMultiValueFormParametersUsingListWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[12048-12123]:SimpleName[11976-12051]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[12133-12142]:SimpleType[12061-12070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12143-12439]:Block[12071-12367]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"list\", asList(\"1\", \"2\", \"3\")).build();",
    "info" : "VariableDeclarationStatement[12153-12264]:VariableDeclarationStatement[12081-12192]"
  }, {
    "left" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                put(\"/multiValueParam\");",
    "right" : "given().\n                spec(spec).\n        expect().\n                body(\"list\", equalTo(\"1,2,3\")).\n        when().\n                put(\"/multiValueParam\");",
    "info" : "ExpressionStatement[12274-12433]:ExpressionStatement[12202-12361]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[12445-12450]:MarkerAnnotation[12373-12378]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12455-12461]:Modifier[12383-12389]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12462-12466]:PrimitiveType[12390-12394]"
  }, {
    "left" : "supportsMergingFormParametersWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingFormParametersWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[12467-12523]:SimpleName[12395-12451]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[12533-12542]:SimpleType[12461-12470]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12543-12898]:Block[12471-12826]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"lastName\", \"Doe\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addFormParam(\"lastName\", \"Doe\").build();",
    "info" : "VariableDeclarationStatement[12553-12652]:VariableDeclarationStatement[12481-12580]"
  }, {
    "left" : "given().\n                spec(spec).\n                formParameter(\"firstName\", \"John\").\n        expect().\n                body(\"greeting\", Matchers.equalTo(\"Greetings John Doe\")).\n        when().\n                put(\"/greetPut\");",
    "right" : "given().\n                spec(spec).\n                formParameter(\"firstName\", \"John\").\n        expect().\n                body(\"greeting\", Matchers.equalTo(\"Greetings John Doe\")).\n        when().\n                put(\"/greetPut\");",
    "info" : "ExpressionStatement[12662-12892]:ExpressionStatement[12590-12820]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[12904-12909]:MarkerAnnotation[12832-12837]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12914-12920]:Modifier[12842-12848]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12921-12925]:PrimitiveType[12849-12853]"
  }, {
    "left" : "supportsMergingPathParametersWhenUsingRequestSpecBuilder",
    "right" : "supportsMergingPathParametersWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[12926-12982]:SimpleName[12854-12910]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[12992-13001]:SimpleType[12920-12929]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13002-13351]:Block[12930-13279]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().addPathParam(\"lastName\", \"Doe\").build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().addPathParam(\"lastName\", \"Doe\").build();",
    "info" : "VariableDeclarationStatement[13012-13111]:VariableDeclarationStatement[12940-13039]"
  }, {
    "left" : "given().\n                spec(spec).\n                pathParameter(\"firstName\", \"John\").\n        expect().\n                body(\"fullName\", equalTo(\"John Doe\")).\n        when().\n               get(\"/{firstName}/{lastName}\");",
    "right" : "given().\n                spec(spec).\n                pathParameter(\"firstName\", \"John\").\n        expect().\n                body(\"fullName\", equalTo(\"John Doe\")).\n        when().\n               get(\"/{firstName}/{lastName}\");",
    "info" : "ExpressionStatement[13121-13345]:ExpressionStatement[13049-13273]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[13357-13362]:MarkerAnnotation[13285-13290]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13367-13373]:Modifier[13295-13301]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[13374-13378]:PrimitiveType[13302-13306]"
  }, {
    "left" : "supportsSettingLoggingWhenUsingRequestSpecBuilder",
    "right" : "supportsSettingLoggingWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[13379-13428]:SimpleName[13307-13356]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[13438-13447]:SimpleType[13366-13375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13448-14393]:Block[13376-14321]"
  }, {
    "left" : "final StringWriter writer = new StringWriter();",
    "right" : "final StringWriter writer = new StringWriter();",
    "info" : "VariableDeclarationStatement[13458-13505]:VariableDeclarationStatement[13386-13433]"
  }, {
    "left" : "final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);",
    "right" : "final PrintStream captor = new PrintStream(new WriterOutputStream(writer), true);",
    "info" : "VariableDeclarationStatement[13514-13595]:VariableDeclarationStatement[13442-13523]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().logConfig(logConfig().defaultStream(captor))).and().log(ALL).build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().logConfig(logConfig().defaultStream(captor))).and().log(ALL).build();",
    "info" : "VariableDeclarationStatement[13604-13754]:VariableDeclarationStatement[13532-13682]"
  }, {
    "left" : "given().\n                spec(spec).\n                pathParameter(\"firstName\", \"John\").\n                pathParameter(\"lastName\", \"Doe\").\n        when().\n                get(\"/{firstName}/{lastName}\").\n        then().\n                body(\"fullName\", equalTo(\"John Doe\"));",
    "right" : "given().\n                spec(spec).\n                pathParameter(\"firstName\", \"John\").\n                pathParameter(\"lastName\", \"Doe\").\n        when().\n                get(\"/{firstName}/{lastName}\").\n        then().\n                body(\"fullName\", equalTo(\"John Doe\"));",
    "info" : "ExpressionStatement[13764-14037]:ExpressionStatement[13692-13965]"
  }, {
    "left" : "assertThat(writer.toString(), equalTo(\"Request method:\\tGET\\nRequest path:\\thttp://localhost:8080/John/Doe\\nProxy:\\t\\t\\t<none>\\nRequest params:\\t<none>\\nQuery params:\\t<none>\\nForm params:\\t<none>\\nPath params:\\tfirstName=John\\n\\t\\t\\t\\tlastName=Doe\\nMultiparts:\\t\\t<none>\\nHeaders:\\t\\tAccept=*/*\\nCookies:\\t\\t<none>\\nBody:\\t\\t\\t<none>\\n\"));",
    "right" : "assertThat(writer.toString(), equalTo(\"Request method:\\tGET\\nRequest path:\\thttp://localhost:8080/John/Doe\\nProxy:\\t\\t\\t<none>\\nRequest params:\\t<none>\\nQuery params:\\t<none>\\nForm params:\\t<none>\\nPath params:\\tfirstName=John\\n\\t\\t\\t\\tlastName=Doe\\nMultiparts:\\t\\t<none>\\nHeaders:\\t\\tAccept=*/*\\nCookies:\\t\\t<none>\\nBody:\\t\\t\\t<none>\\n\"));",
    "info" : "ExpressionStatement[14047-14387]:ExpressionStatement[13975-14315]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[14399-14404]:MarkerAnnotation[14327-14332]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14409-14415]:Modifier[14337-14343]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14416-14420]:PrimitiveType[14344-14348]"
  }, {
    "left" : "supportsSettingConfigWhenUsingRequestSpecBuilder",
    "right" : "supportsSettingConfigWhenUsingRequestSpecBuilder",
    "info" : "SimpleName[14421-14469]:SimpleName[14349-14397]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[14479-14488]:SimpleType[14407-14416]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14489-14903]:Block[14417-14831]"
  }, {
    "left" : "final RequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().redirect(redirectConfig().followRedirects(false))).build();",
    "right" : "final RequestSpecification spec = new RequestSpecBuilder().setConfig(newConfig().redirect(redirectConfig().followRedirects(false))).build();",
    "info" : "VariableDeclarationStatement[14499-14639]:VariableDeclarationStatement[14427-14567]"
  }, {
    "left" : "given().\n                param(\"url\", \"/hello\").\n                spec(spec).\n        expect().\n                statusCode(302).\n                header(\"Location\", is(\"http://localhost:8080/hello\")).\n        when().\n                get(\"/redirect\");",
    "right" : "given().\n                param(\"url\", \"/hello\").\n                spec(spec).\n        expect().\n                statusCode(302).\n                header(\"Location\", is(\"http://localhost:8080/hello\")).\n        when().\n                get(\"/redirect\");",
    "info" : "ExpressionStatement[14649-14897]:ExpressionStatement[14577-14825]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[14909-14914]:MarkerAnnotation[14837-14842]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14919-14925]:Modifier[14847-14853]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14926-14930]:PrimitiveType[14854-14858]"
  }, {
    "left" : "mergesStaticallyDefinedResponseSpecificationsCorrectly",
    "right" : "mergesStaticallyDefinedResponseSpecificationsCorrectly",
    "info" : "SimpleName[14931-14985]:SimpleName[14859-14913]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[14995-15004]:SimpleType[14923-14932]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15005-16516]:Block[14933-16444]"
  }, {
    "left" : "RestAssured.responseSpecification = new ResponseSpecBuilder().expectCookie(\"Cookie1\", \"Value1\").build();",
    "right" : "RestAssured.responseSpecification = new ResponseSpecBuilder().expectCookie(\"Cookie1\", \"Value1\").build();",
    "info" : "ExpressionStatement[15015-15119]:ExpressionStatement[14943-15047]"
  }, {
    "left" : "ResponseSpecification reqSpec1 = new ResponseSpecBuilder().expectCookie(\"Cookie2\", \"Value2\").build();",
    "right" : "ResponseSpecification reqSpec1 = new ResponseSpecBuilder().expectCookie(\"Cookie2\", \"Value2\").build();",
    "info" : "VariableDeclarationStatement[15128-15229]:VariableDeclarationStatement[15056-15157]"
  }, {
    "left" : "ResponseSpecification reqSpec2 = new ResponseSpecBuilder().expectCookie(\"Cookie3\", \"Value3\").build();",
    "right" : "ResponseSpecification reqSpec2 = new ResponseSpecBuilder().expectCookie(\"Cookie3\", \"Value3\").build();",
    "info" : "VariableDeclarationStatement[15238-15339]:VariableDeclarationStatement[15166-15267]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[15349-16510]:TryStatement[15277-16438]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15353-16457]:Block[15281-16385]"
  }, {
    "left" : "Cookies cookies =\n            given().\n                    cookie(\"Cookie1\", \"Value1\").\n                    cookie(\"Cookie2\", \"Value2\").\n            when().\n                    get(\"/reflect\").\n            then().\n                    assertThat().\n                    spec(reqSpec1).\n            extract().\n                    detailedCookies();",
    "right" : "Cookies cookies =\n            given().\n                    cookie(\"Cookie1\", \"Value1\").\n                    cookie(\"Cookie2\", \"Value2\").\n            when().\n                    get(\"/reflect\").\n            then().\n                    assertThat().\n                    spec(reqSpec1).\n            extract().\n                    detailedCookies();",
    "info" : "VariableDeclarationStatement[15367-15712]:VariableDeclarationStatement[15295-15640]"
  }, {
    "left" : "assertThat(cookies.size(), is(2));",
    "right" : "assertThat(cookies.size(), is(2));",
    "info" : "ExpressionStatement[15726-15760]:ExpressionStatement[15654-15688]"
  }, {
    "left" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
    "right" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
    "info" : "ExpressionStatement[15773-15832]:ExpressionStatement[15701-15760]"
  }, {
    "left" : "assertThat(cookies.hasCookieWithName(\"Cookie2\"), is(true));",
    "right" : "assertThat(cookies.hasCookieWithName(\"Cookie2\"), is(true));",
    "info" : "ExpressionStatement[15845-15904]:ExpressionStatement[15773-15832]"
  }, {
    "left" : "cookies =\n            given().\n                    cookie(\"Cookie1\", \"Value1\").\n                    cookie(\"Cookie3\", \"Value3\").\n            when().\n                    get(\"/reflect\").\n            then().\n                    assertThat().\n                    spec(reqSpec2).\n            extract().\n                    detailedCookies();",
    "right" : "cookies =\n            given().\n                    cookie(\"Cookie1\", \"Value1\").\n                    cookie(\"Cookie3\", \"Value3\").\n            when().\n                    get(\"/reflect\").\n            then().\n                    assertThat().\n                    spec(reqSpec2).\n            extract().\n                    detailedCookies();",
    "info" : "ExpressionStatement[15918-16255]:ExpressionStatement[15846-16183]"
  }, {
    "left" : "assertThat(cookies.size(), is(2));",
    "right" : "assertThat(cookies.size(), is(2));",
    "info" : "ExpressionStatement[16269-16303]:ExpressionStatement[16197-16231]"
  }, {
    "left" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
    "right" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
    "info" : "ExpressionStatement[16316-16375]:ExpressionStatement[16244-16303]"
  }, {
    "left" : "assertThat(cookies.hasCookieWithName(\"Cookie3\"), is(true));",
    "right" : "assertThat(cookies.hasCookieWithName(\"Cookie3\"), is(true));",
    "info" : "ExpressionStatement[16388-16447]:ExpressionStatement[16316-16375]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16466-16510]:Block[16394-16438]"
  }, {
    "left" : "RestAssured.reset();",
    "right" : "RestAssured.reset();",
    "info" : "ExpressionStatement[16480-16500]:ExpressionStatement[16408-16428]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[16522-16527]:MarkerAnnotation[16450-16455]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16532-16538]:Modifier[16460-16466]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[16539-16543]:PrimitiveType[16467-16471]"
  }, {
    "left" : "mergesStaticallyDefinedRequestSpecificationsCorrectly",
    "right" : "mergesStaticallyDefinedRequestSpecificationsCorrectly",
    "info" : "SimpleName[16544-16597]:SimpleName[16472-16525]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[16607-16616]:SimpleType[16535-16544]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16617-17865]:Block[16545-17793]"
  }, {
    "left" : "RestAssured.requestSpecification = new RequestSpecBuilder().addCookie(\"Cookie1\", \"Value1\").build();",
    "right" : "RestAssured.requestSpecification = new RequestSpecBuilder().addCookie(\"Cookie1\", \"Value1\").build();",
    "info" : "ExpressionStatement[16627-16726]:ExpressionStatement[16555-16654]"
  }, {
    "left" : "RequestSpecification reqSpec1 = new RequestSpecBuilder().addCookie(\"Cookie2\", \"Value2\").build();",
    "right" : "RequestSpecification reqSpec1 = new RequestSpecBuilder().addCookie(\"Cookie2\", \"Value2\").build();",
    "info" : "VariableDeclarationStatement[16735-16831]:VariableDeclarationStatement[16663-16759]"
  }, {
    "left" : "RequestSpecification reqSpec2 = new RequestSpecBuilder().addCookie(\"Cookie3\", \"Value3\").build();",
    "right" : "RequestSpecification reqSpec2 = new RequestSpecBuilder().addCookie(\"Cookie3\", \"Value3\").build();",
    "info" : "VariableDeclarationStatement[16840-16936]:VariableDeclarationStatement[16768-16864]"
  }, {
    "left" : "try{...}",
    "right" : "try{...}",
    "info" : "TryStatement[16946-17859]:TryStatement[16874-17787]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16950-17806]:Block[16878-17734]"
  }, {
    "left" : "Cookies cookies =\n            given().\n                    spec(reqSpec1).\n            when().\n                    get(\"/reflect\").\n            then().\n                    extract().\n                    detailedCookies();",
    "right" : "Cookies cookies =\n            given().\n                    spec(reqSpec1).\n            when().\n                    get(\"/reflect\").\n            then().\n                    extract().\n                    detailedCookies();",
    "info" : "VariableDeclarationStatement[16964-17185]:VariableDeclarationStatement[16892-17113]"
  }, {
    "left" : "assertThat(cookies.size(), is(2));",
    "right" : "assertThat(cookies.size(), is(2));",
    "info" : "ExpressionStatement[17199-17233]:ExpressionStatement[17127-17161]"
  }, {
    "left" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
    "right" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
    "info" : "ExpressionStatement[17246-17305]:ExpressionStatement[17174-17233]"
  }, {
    "left" : "assertThat(cookies.hasCookieWithName(\"Cookie2\"), is(true));",
    "right" : "assertThat(cookies.hasCookieWithName(\"Cookie2\"), is(true));",
    "info" : "ExpressionStatement[17318-17377]:ExpressionStatement[17246-17305]"
  }, {
    "left" : "cookies =\n            given().\n                    spec(reqSpec2).\n            when().\n                    get(\"/reflect\").\n            then().\n                    extract().\n                    detailedCookies();",
    "right" : "cookies =\n            given().\n                    spec(reqSpec2).\n            when().\n                    get(\"/reflect\").\n            then().\n                    extract().\n                    detailedCookies();",
    "info" : "ExpressionStatement[17391-17604]:ExpressionStatement[17319-17532]"
  }, {
    "left" : "assertThat(cookies.size(), is(2));",
    "right" : "assertThat(cookies.size(), is(2));",
    "info" : "ExpressionStatement[17618-17652]:ExpressionStatement[17546-17580]"
  }, {
    "left" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
    "right" : "assertThat(cookies.hasCookieWithName(\"Cookie1\"), is(true));",
    "info" : "ExpressionStatement[17665-17724]:ExpressionStatement[17593-17652]"
  }, {
    "left" : "assertThat(cookies.hasCookieWithName(\"Cookie3\"), is(true));",
    "right" : "assertThat(cookies.hasCookieWithName(\"Cookie3\"), is(true));",
    "info" : "ExpressionStatement[17737-17796]:ExpressionStatement[17665-17724]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17815-17859]:Block[17743-17787]"
  }, {
    "left" : "RestAssured.reset();",
    "right" : "RestAssured.reset();",
    "info" : "ExpressionStatement[17829-17849]:ExpressionStatement[17757-17777]"
  } ]
}