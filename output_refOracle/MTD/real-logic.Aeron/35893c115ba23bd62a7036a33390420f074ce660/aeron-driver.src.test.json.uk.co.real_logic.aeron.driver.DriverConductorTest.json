{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[2253-21121]:TypeDeclaration[2102-21229]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2292-2353]:FieldDeclaration[2141-2202]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2358-2409]:FieldDeclaration[2207-2258]"
  }, {
    "left" : "private static final int STREAM_ID_1 = 10;",
    "right" : "private static final int STREAM_ID_1 = 10;",
    "info" : "FieldDeclaration[2414-2456]:FieldDeclaration[2263-2305]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2461-2503]:FieldDeclaration[2310-2352]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2508-2550]:FieldDeclaration[2357-2399]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2555-2638]:FieldDeclaration[2404-2487]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2643-2693]:FieldDeclaration[2492-2542]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2698-2748]:FieldDeclaration[2547-2597]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2753-2803]:FieldDeclaration[2602-2652]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2808-2858]:FieldDeclaration[2657-2707]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2863-2906]:FieldDeclaration[2712-2755]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2911-2964]:FieldDeclaration[2760-2813]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[2970-3077]:FieldDeclaration[2819-2926]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3082-3238]:FieldDeclaration[2931-3087]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3244-3320]:FieldDeclaration[3093-3169]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3325-3399]:FieldDeclaration[3174-3248]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3405-3509]:FieldDeclaration[3254-3358]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3514-3612]:FieldDeclaration[3363-3461]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3617-3685]:FieldDeclaration[3466-3534]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3691-3788]:FieldDeclaration[3540-3637]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3793-3893]:FieldDeclaration[3642-3742]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3898-3980]:FieldDeclaration[3747-3829]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[3985-4079]:FieldDeclaration[3834-3928]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4084-4174]:FieldDeclaration[3933-4023]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4180-4252]:FieldDeclaration[4029-4101]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4258-4322]:FieldDeclaration[4107-4171]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4327-4397]:FieldDeclaration[4176-4246]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4402-4497]:FieldDeclaration[4251-4346]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4502-4599]:FieldDeclaration[4351-4448]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4605-4630]:FieldDeclaration[4454-4479]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4635-4789]:FieldDeclaration[4484-4638]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4795-4835]:FieldDeclaration[4644-4684]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[4841-5157]:FieldDeclaration[4690-5006]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[5163-7303]:MethodDeclaration[5012-7152]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[7309-7406]:MethodDeclaration[7158-7255]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[7412-7774]:MethodDeclaration[7261-7927]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[7780-8202]:MethodDeclaration[7933-8355]"
  }, {
    "left" : "@Test\n    public void shouldBeAbleToAddAndRemoveSingleSubscription() throws Exception\n    {\n        writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);\n        writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);\n\n        driverConductor.doWork();\n\n        assertNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));\n    }",
    "right" : "@Test\n    public void shouldBeAbleToAddAndRemoveSingleSubscription() throws Exception\n    {\n        writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);\n        writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);\n\n        driverConductor.doWork();\n\n        assertNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));\n    }",
    "info" : "MethodDeclaration[8208-8693]:MethodDeclaration[8361-8846]"
  }, {
    "left" : "@Test\n    public void shouldBeAbleToAddMultipleStreams() throws Exception\n    {\n        writePublicationMessage(ADD_PUBLICATION, 1, 2, 4001, CORRELATION_ID_1);\n        writePublicationMessage(ADD_PUBLICATION, 1, 3, 4002, CORRELATION_ID_2);\n        writePublicationMessage(ADD_PUBLICATION, 3, 2, 4003, CORRELATION_ID_3);\n        writePublicationMessage(ADD_PUBLICATION, 3, 4, 4004, CORRELATION_ID_4);\n\n        driverConductor.doWork();\n\n        verify(senderProxy, times(4)).newPublication(any(), any(), any());\n    }",
    "right" : "@Test\n    public void shouldBeAbleToAddMultipleStreams() throws Exception\n    {\n        writePublicationMessage(ADD_PUBLICATION, 1, 2, 4001, CORRELATION_ID_1);\n        writePublicationMessage(ADD_PUBLICATION, 1, 3, 4002, CORRELATION_ID_2);\n        writePublicationMessage(ADD_PUBLICATION, 3, 2, 4003, CORRELATION_ID_3);\n        writePublicationMessage(ADD_PUBLICATION, 3, 4, 4004, CORRELATION_ID_4);\n\n        driverConductor.doWork();\n\n        verify(senderProxy, times(4)).newPublication(any(), any(), any());\n    }",
    "info" : "MethodDeclaration[8699-9215]:MethodDeclaration[8852-9368]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[9221-9775]:MethodDeclaration[9374-9921]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[9781-10621]:MethodDeclaration[9927-10760]"
  }, {
    "left" : "private registrationId long) : void",
    "right" : "private registrationId long) : void",
    "info" : "MethodDeclaration[10676-10965]:MethodDeclaration[10815-11104]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[10971-12213]:MethodDeclaration[11110-12352]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[12219-13700]:MethodDeclaration[12358-13839]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[13706-14235]:MethodDeclaration[13845-14455]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[14241-14762]:MethodDeclaration[14461-15133]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[14768-15306]:MethodDeclaration[15139-15720]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[15312-15813]:MethodDeclaration[15726-16455]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[15819-16485]:MethodDeclaration[16461-17351]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[16491-17116]:MethodDeclaration[17357-18183]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[17122-18032]:MethodDeclaration[18189-19257]"
  }, {
    "left" : "private msgTypeId int, sessionId int, streamId int, port int, correlationId long) : void",
    "right" : "private msgTypeId int, sessionId int, streamId int, port int, correlationId long) : void",
    "info" : "MethodDeclaration[18714-19272]:MethodDeclaration[19263-19821]"
  }, {
    "left" : "private msgTypeId int, channel String, streamId int, registrationCorrelationId long) : void",
    "right" : "private msgTypeId int, channel String, streamId int, registrationCorrelationId long) : void",
    "info" : "MethodDeclaration[19712-20304]:MethodDeclaration[19827-20419]"
  }, {
    "left" : "private ) : void",
    "right" : "private ) : void",
    "info" : "MethodDeclaration[20310-20629]:MethodDeclaration[20425-20744]"
  }, {
    "left" : "private long processTimersUntil(final BooleanSupplier condition) throws Exception\n    {\n        final long startTime = wheel.clock().nanoTime();\n\n        while (!condition.getAsBoolean())\n        {\n            if (wheel.computeDelayInMs() > 0)\n            {\n                currentTime += TimeUnit.MICROSECONDS.toNanos(Configuration.CONDUCTOR_TICK_DURATION_US);\n            }\n\n            driverConductor.doWork();\n        }\n\n        return wheel.clock().nanoTime() - startTime;\n    }",
    "right" : "private long doWorkUntil(final BooleanSupplier condition) throws Exception\n    {\n        final long startTime = wheel.clock().nanoTime();\n\n        while (!condition.getAsBoolean())\n        {\n            if (wheel.computeDelayInMs() > 0)\n            {\n                currentTime += TimeUnit.MICROSECONDS.toNanos(Configuration.CONDUCTOR_TICK_DURATION_US);\n            }\n\n            driverConductor.doWork();\n        }\n\n        return wheel.clock().nanoTime() - startTime;\n    }",
    "info" : "MethodDeclaration[20635-21119]:MethodDeclaration[20750-21227]"
  } ],
  "mappings" : [
 {
    "left" : "import org.mockito.verification.VerificationMode;",
    "right" : "import uk.co.real_logic.aeron.driver.buffer.RawLogFactory;",
    "info" : "ImportDeclaration[785-834]:ImportDeclaration[826-884]"
  }, {
    "left" : "import uk.co.real_logic.aeron.driver.media.ReceiveChannelEndpoint;",
    "right" : "import uk.co.real_logic.aeron.driver.media.UdpChannel;",
    "info" : "ImportDeclaration[1054-1120]:ImportDeclaration[1131-1185]"
  }, {
    "left" : "import uk.co.real_logic.agrona.TimerWheel;",
    "right" : "import uk.co.real_logic.agrona.concurrent.ringbuffer.ManyToOneRingBuffer;",
    "info" : "ImportDeclaration[1236-1278]:ImportDeclaration[1274-1347]"
  }, {
    "left" : "import uk.co.real_logic.agrona.concurrent.ringbuffer.RingBuffer;",
    "right" : "import java.nio.ByteBuffer;",
    "info" : "ImportDeclaration[1398-1462]:ImportDeclaration[1489-1516]"
  }, {
    "left" : "import java.util.concurrent.TimeUnit;",
    "right" : "import static org.hamcrest.Matchers.*;",
    "info" : "ImportDeclaration[1567-1604]:ImportDeclaration[1599-1637]"
  }, {
    "left" : "import static org.junit.Assert.*;",
    "right" : "import static org.mockito.Mockito.*;",
    "info" : "ImportDeclaration[1688-1721]:ImportDeclaration[1711-1747]"
  }, {
    "left" : "import static uk.co.real_logic.aeron.ErrorCode.INVALID_CHANNEL;",
    "right" : "import static uk.co.real_logic.aeron.command.ControlProtocolEvents.*;",
    "info" : "ImportDeclaration[1798-1861]:ImportDeclaration[1880-1949]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2253-2259]:Modifier[2102-2108]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4929-5156]:Block[4778-5005]"
  }, {
    "left" : "final Object args[] = invocation.getArguments();",
    "right" : "final Object args[] = invocation.getArguments();",
    "info" : "VariableDeclarationStatement[4943-4991]:VariableDeclarationStatement[4792-4840]"
  }, {
    "left" : "final ReceiveChannelEndpoint channelEndpoint = (ReceiveChannelEndpoint)args[0];",
    "right" : "final ReceiveChannelEndpoint channelEndpoint = (ReceiveChannelEndpoint)args[0];",
    "info" : "VariableDeclarationStatement[5004-5083]:VariableDeclarationStatement[4853-4932]"
  }, {
    "left" : "channelEndpoint.close();",
    "right" : "channelEndpoint.close();",
    "info" : "ExpressionStatement[5096-5120]:ExpressionStatement[4945-4969]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[5134-5146]:ReturnStatement[4983-4995]"
  }, {
    "left" : "@Before",
    "right" : "@Before",
    "info" : "MarkerAnnotation[5163-5170]:MarkerAnnotation[5012-5019]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[5175-5181]:Modifier[5024-5030]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[5182-5186]:PrimitiveType[5031-5035]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[5202-5211]:SimpleType[5051-5060]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5216-7303]:Block[5065-7152]"
  }, {
    "left" : "when(mockRawLogFactory.newPublication(anyObject(), anyInt(), anyInt(), anyInt()))\n            .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_SZ, TERM_META_DATA_LENGTH));",
    "right" : "when(mockRawLogFactory.newPublication(anyObject(), anyInt(), anyInt(), anyInt()))\n            .thenReturn(LogBufferHelper.newTestLogBuffers(TERM_BUFFER_SZ, TERM_META_DATA_LENGTH));",
    "info" : "ExpressionStatement[5226-5406]:ExpressionStatement[5075-5255]"
  }, {
    "left" : "currentTime = 0;",
    "right" : "currentTime = 0;",
    "info" : "ExpressionStatement[5416-5432]:ExpressionStatement[5265-5281]"
  }, {
    "left" : "final UnsafeBuffer counterBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(BUFFER_LENGTH));",
    "right" : "final UnsafeBuffer counterBuffer = new UnsafeBuffer(ByteBuffer.allocateDirect(BUFFER_LENGTH));",
    "info" : "VariableDeclarationStatement[5442-5536]:VariableDeclarationStatement[5291-5385]"
  }, {
    "left" : "final CountersManager countersManager = new CountersManager(\n            new UnsafeBuffer(ByteBuffer.allocateDirect(BUFFER_LENGTH)), counterBuffer);",
    "right" : "final CountersManager countersManager = new CountersManager(\n            new UnsafeBuffer(ByteBuffer.allocateDirect(BUFFER_LENGTH)), counterBuffer);",
    "info" : "VariableDeclarationStatement[5545-5693]:VariableDeclarationStatement[5394-5542]"
  }, {
    "left" : "final MediaDriver.Context ctx = new MediaDriver.Context()\n            .receiverNioSelector(transportPoller)\n            .senderNioSelector(transportPoller)\n            .unicastSenderFlowControl(UnicastFlowControl::new)\n            .multicastSenderFlowControl(MaxMulticastFlowControl::new)\n            .conductorTimerWheel(wheel)\n            // TODO: remove\n            .toConductorFromReceiverCommandQueue(new OneToOneConcurrentArrayQueue<>(1024))\n            .toConductorFromSenderCommandQueue(new OneToOneConcurrentArrayQueue<>(1024))\n            .eventLogger(mockConductorLogger)\n            .rawLogBuffersFactory(mockRawLogFactory)\n            .countersManager(countersManager);",
    "right" : "final MediaDriver.Context ctx = new MediaDriver.Context()\n            .receiverNioSelector(transportPoller)\n            .senderNioSelector(transportPoller)\n            .unicastSenderFlowControl(UnicastFlowControl::new)\n            .multicastSenderFlowControl(MaxMulticastFlowControl::new)\n            .conductorTimerWheel(wheel)\n            // TODO: remove\n            .toConductorFromReceiverCommandQueue(new OneToOneConcurrentArrayQueue<>(1024))\n            .toConductorFromSenderCommandQueue(new OneToOneConcurrentArrayQueue<>(1024))\n            .eventLogger(mockConductorLogger)\n            .rawLogBuffersFactory(mockRawLogFactory)\n            .countersManager(countersManager);",
    "info" : "VariableDeclarationStatement[5703-6385]:VariableDeclarationStatement[5552-6234]"
  }, {
    "left" : "ctx.toEventReader(toEventReader);",
    "right" : "ctx.toEventReader(toEventReader);",
    "info" : "ExpressionStatement[6395-6428]:ExpressionStatement[6244-6277]"
  }, {
    "left" : "ctx.toDriverCommands(fromClientCommands);",
    "right" : "ctx.toDriverCommands(fromClientCommands);",
    "info" : "ExpressionStatement[6437-6478]:ExpressionStatement[6286-6327]"
  }, {
    "left" : "ctx.clientProxy(mockClientProxy);",
    "right" : "ctx.clientProxy(mockClientProxy);",
    "info" : "ExpressionStatement[6487-6520]:ExpressionStatement[6336-6369]"
  }, {
    "left" : "ctx.countersBuffer(counterBuffer);",
    "right" : "ctx.countersBuffer(counterBuffer);",
    "info" : "ExpressionStatement[6529-6563]:ExpressionStatement[6378-6412]"
  }, {
    "left" : "final SystemCounters mockSystemCounters = mock(SystemCounters.class);",
    "right" : "final SystemCounters mockSystemCounters = mock(SystemCounters.class);",
    "info" : "VariableDeclarationStatement[6573-6642]:VariableDeclarationStatement[6422-6491]"
  }, {
    "left" : "ctx.systemCounters(mockSystemCounters);",
    "right" : "ctx.systemCounters(mockSystemCounters);",
    "info" : "ExpressionStatement[6651-6690]:ExpressionStatement[6500-6539]"
  }, {
    "left" : "when(mockSystemCounters.bytesReceived()).thenReturn(mock(AtomicCounter.class));",
    "right" : "when(mockSystemCounters.bytesReceived()).thenReturn(mock(AtomicCounter.class));",
    "info" : "ExpressionStatement[6699-6778]:ExpressionStatement[6548-6627]"
  }, {
    "left" : "when(mockSystemCounters.clientKeepAlives()).thenReturn(mock(AtomicCounter.class));",
    "right" : "when(mockSystemCounters.clientKeepAlives()).thenReturn(mock(AtomicCounter.class));",
    "info" : "ExpressionStatement[6787-6869]:ExpressionStatement[6636-6718]"
  }, {
    "left" : "ctx.epochClock(new SystemEpochClock());",
    "right" : "ctx.epochClock(new SystemEpochClock());",
    "info" : "ExpressionStatement[6879-6918]:ExpressionStatement[6728-6767]"
  }, {
    "left" : "ctx.receiverProxy(receiverProxy);",
    "right" : "ctx.receiverProxy(receiverProxy);",
    "info" : "ExpressionStatement[6927-6960]:ExpressionStatement[6776-6809]"
  }, {
    "left" : "ctx.senderProxy(senderProxy);",
    "right" : "ctx.senderProxy(senderProxy);",
    "info" : "ExpressionStatement[6969-6998]:ExpressionStatement[6818-6847]"
  }, {
    "left" : "ctx.fromReceiverDriverConductorProxy(fromReceiverConductorProxy);",
    "right" : "ctx.fromReceiverDriverConductorProxy(fromReceiverConductorProxy);",
    "info" : "ExpressionStatement[7007-7072]:ExpressionStatement[6856-6921]"
  }, {
    "left" : "ctx.fromSenderDriverConductorProxy(fromSenderConductorProxy);",
    "right" : "ctx.fromSenderDriverConductorProxy(fromSenderConductorProxy);",
    "info" : "ExpressionStatement[7081-7142]:ExpressionStatement[6930-6991]"
  }, {
    "left" : "driverConductor = new DriverConductor(ctx);",
    "right" : "driverConductor = new DriverConductor(ctx);",
    "info" : "ExpressionStatement[7152-7195]:ExpressionStatement[7001-7044]"
  }, {
    "left" : "doAnswer(closeChannelEndpointAnswer).when(receiverProxy).closeReceiveChannelEndpoint(any());",
    "right" : "doAnswer(closeChannelEndpointAnswer).when(receiverProxy).closeReceiveChannelEndpoint(any());",
    "info" : "ExpressionStatement[7205-7297]:ExpressionStatement[7054-7146]"
  }, {
    "left" : "@After",
    "right" : "@After",
    "info" : "MarkerAnnotation[7309-7315]:MarkerAnnotation[7158-7164]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7320-7326]:Modifier[7169-7175]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7327-7331]:PrimitiveType[7176-7180]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[7350-7359]:SimpleType[7199-7208]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7364-7406]:Block[7213-7255]"
  }, {
    "left" : "driverConductor.onClose();",
    "right" : "driverConductor.onClose();",
    "info" : "ExpressionStatement[7374-7400]:ExpressionStatement[7223-7249]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[7412-7417]:MarkerAnnotation[7261-7266]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7422-7428]:Modifier[7271-7277]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7429-7433]:PrimitiveType[7278-7282]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[7478-7487]:SimpleType[7327-7336]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7492-7774]:Block[7341-7927]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[7502-7573]:ExpressionStatement[7351-7422]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[7583-7608]:ExpressionStatement[7432-7457]"
  }, {
    "left" : "verifySenderNotifiedOfNewPublication();",
    "right" : "verify(senderProxy, times(1)).newPublication(captor.capture(), any(), any());",
    "info" : "ExpressionStatement[7618-7657]:ExpressionStatement[7576-7653]"
  }, {
    "left" : "verifySenderNotifiedOfNewPublication()",
    "right" : "any()",
    "info" : "MethodInvocation[7618-7656]:MethodInvocation[7639-7644]"
  }, {
    "left" : "verify(mockClientProxy).onPublicationReady(\n            eq(2), anyInt(), any(), anyLong(), anyInt());",
    "right" : "verify(mockClientProxy).onPublicationReady(eq(2), anyInt(), any(), anyLong(), anyInt());",
    "info" : "ExpressionStatement[7667-7768]:ExpressionStatement[7833-7921]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[7780-7785]:MarkerAnnotation[7933-7938]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[7790-7796]:Modifier[7943-7949]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7797-7801]:PrimitiveType[7950-7954]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[7847-7856]:SimpleType[8000-8009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7861-8202]:Block[8014-8355]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[7871-7987]:ExpressionStatement[8024-8140]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[7997-8022]:ExpressionStatement[8150-8175]"
  }, {
    "left" : "verify(mockClientProxy).operationSucceeded(CORRELATION_ID_1);",
    "right" : "verify(mockClientProxy).operationSucceeded(CORRELATION_ID_1);",
    "info" : "ExpressionStatement[8032-8093]:ExpressionStatement[8185-8246]"
  }, {
    "left" : "assertNotNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "right" : "assertNotNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "info" : "ExpressionStatement[8103-8196]:ExpressionStatement[8256-8349]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[8208-8213]:MarkerAnnotation[8361-8366]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8218-8224]:Modifier[8371-8377]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8225-8229]:PrimitiveType[8378-8382]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[8284-8293]:SimpleType[8437-8446]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8298-8693]:Block[8451-8846]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[8308-8424]:ExpressionStatement[8461-8577]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[8433-8552]:ExpressionStatement[8586-8705]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[8562-8587]:ExpressionStatement[8715-8740]"
  }, {
    "left" : "assertNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "right" : "assertNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "info" : "ExpressionStatement[8597-8687]:ExpressionStatement[8750-8840]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[8699-8704]:MarkerAnnotation[8852-8857]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[8709-8715]:Modifier[8862-8868]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[8716-8720]:PrimitiveType[8869-8873]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[8763-8772]:SimpleType[8916-8925]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8777-9215]:Block[8930-9368]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4001, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4001, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[8787-8858]:ExpressionStatement[8940-9011]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 3, 4002, CORRELATION_ID_2);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 3, 4002, CORRELATION_ID_2);",
    "info" : "ExpressionStatement[8867-8938]:ExpressionStatement[9020-9091]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 3, 2, 4003, CORRELATION_ID_3);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 3, 2, 4003, CORRELATION_ID_3);",
    "info" : "ExpressionStatement[8947-9018]:ExpressionStatement[9100-9171]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 3, 4, 4004, CORRELATION_ID_4);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 3, 4, 4004, CORRELATION_ID_4);",
    "info" : "ExpressionStatement[9027-9098]:ExpressionStatement[9180-9251]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[9108-9133]:ExpressionStatement[9261-9286]"
  }, {
    "left" : "verify(senderProxy, times(4)).newPublication(any(), any(), any());",
    "right" : "verify(senderProxy, times(4)).newPublication(any(), any(), any());",
    "info" : "ExpressionStatement[9143-9209]:ExpressionStatement[9296-9362]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[9221-9226]:MarkerAnnotation[9374-9379]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9231-9237]:Modifier[9384-9390]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9238-9242]:PrimitiveType[9391-9395]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[9285-9294]:SimpleType[9438-9447]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9299-9775]:Block[9452-9921]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4005, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4005, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[9309-9380]:ExpressionStatement[9462-9533]"
  }, {
    "left" : "writePublicationMessage(REMOVE_PUBLICATION, 1, 2, 4005, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(REMOVE_PUBLICATION, 1, 2, 4005, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[9389-9463]:ExpressionStatement[9542-9616]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[9473-9498]:ExpressionStatement[9626-9651]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + PUBLICATION_LINGER_NS * 2)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + PUBLICATION_LINGER_NS * 2)",
    "info" : "MethodInvocation[9508-9616]:MethodInvocation[9661-9762]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + PUBLICATION_LINGER_NS * 2);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + PUBLICATION_LINGER_NS * 2);",
    "info" : "ExpressionStatement[9508-9617]:ExpressionStatement[9661-9763]"
  }, {
    "left" : "verify(senderProxy).removePublication(any());",
    "right" : "verify(senderProxy).removePublication(any());",
    "info" : "ExpressionStatement[9627-9672]:ExpressionStatement[9773-9818]"
  }, {
    "left" : "assertNull(driverConductor.senderChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4005)));",
    "right" : "assertNull(driverConductor.senderChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4005)));",
    "info" : "ExpressionStatement[9681-9769]:ExpressionStatement[9827-9915]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[9781-9786]:MarkerAnnotation[9927-9932]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[9791-9797]:Modifier[9937-9943]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[9798-9802]:PrimitiveType[9944-9948]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[9848-9857]:SimpleType[9994-10003]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9862-10621]:Block[10008-10760]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4006, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4006, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[9872-9943]:ExpressionStatement[10018-10089]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 3, 4007, CORRELATION_ID_2);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 3, 4007, CORRELATION_ID_2);",
    "info" : "ExpressionStatement[9952-10023]:ExpressionStatement[10098-10169]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 3, 2, 4008, CORRELATION_ID_3);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 3, 2, 4008, CORRELATION_ID_3);",
    "info" : "ExpressionStatement[10032-10103]:ExpressionStatement[10178-10249]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 3, 4, 4008, CORRELATION_ID_4);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 3, 4, 4008, CORRELATION_ID_4);",
    "info" : "ExpressionStatement[10112-10183]:ExpressionStatement[10258-10329]"
  }, {
    "left" : "removePublicationMessage(CORRELATION_ID_1);",
    "right" : "removePublicationMessage(CORRELATION_ID_1);",
    "info" : "ExpressionStatement[10193-10236]:ExpressionStatement[10339-10382]"
  }, {
    "left" : "removePublicationMessage(CORRELATION_ID_2);",
    "right" : "removePublicationMessage(CORRELATION_ID_2);",
    "info" : "ExpressionStatement[10245-10288]:ExpressionStatement[10391-10434]"
  }, {
    "left" : "removePublicationMessage(CORRELATION_ID_3);",
    "right" : "removePublicationMessage(CORRELATION_ID_3);",
    "info" : "ExpressionStatement[10297-10340]:ExpressionStatement[10443-10486]"
  }, {
    "left" : "removePublicationMessage(CORRELATION_ID_4);",
    "right" : "removePublicationMessage(CORRELATION_ID_4);",
    "info" : "ExpressionStatement[10349-10392]:ExpressionStatement[10495-10538]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[10402-10427]:ExpressionStatement[10548-10573]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= PUBLICATION_LINGER_NS * 2 + CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= PUBLICATION_LINGER_NS * 2 + CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "info" : "MethodInvocation[10437-10549]:MethodInvocation[10583-10688]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= PUBLICATION_LINGER_NS * 2 + CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= PUBLICATION_LINGER_NS * 2 + CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "info" : "ExpressionStatement[10437-10550]:ExpressionStatement[10583-10689]"
  }, {
    "left" : "verify(senderProxy, times(4)).removePublication(any());",
    "right" : "verify(senderProxy, times(4)).removePublication(any());",
    "info" : "ExpressionStatement[10560-10615]:ExpressionStatement[10699-10754]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[10676-10683]:Modifier[10815-10822]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10684-10688]:PrimitiveType[10823-10827]"
  }, {
    "left" : "final long registrationId",
    "right" : "final long registrationId",
    "info" : "SingleVariableDeclaration[10714-10739]:SingleVariableDeclaration[10853-10878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10745-10965]:Block[10884-11104]"
  }, {
    "left" : "removeMessage.wrap(writeBuffer, 0);",
    "right" : "removeMessage.wrap(writeBuffer, 0);",
    "info" : "ExpressionStatement[10755-10790]:ExpressionStatement[10894-10929]"
  }, {
    "left" : "removeMessage.registrationId(registrationId);",
    "right" : "removeMessage.registrationId(registrationId);",
    "info" : "ExpressionStatement[10799-10844]:ExpressionStatement[10938-10983]"
  }, {
    "left" : "assertTrue(fromClientCommands.write(REMOVE_PUBLICATION, writeBuffer, 0, RemoveMessageFlyweight.length()));",
    "right" : "assertTrue(fromClientCommands.write(REMOVE_PUBLICATION, writeBuffer, 0, RemoveMessageFlyweight.length()));",
    "info" : "ExpressionStatement[10853-10959]:ExpressionStatement[10992-11098]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[10971-10976]:MarkerAnnotation[11110-11115]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[10981-10987]:Modifier[11120-11126]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[10988-10992]:PrimitiveType[11127-11131]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[11070-11079]:SimpleType[11209-11218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11084-12213]:Block[11223-12352]"
  }, {
    "left" : "final UdpChannel udpChannel = UdpChannel.parse(CHANNEL_URI + 4000);",
    "right" : "final UdpChannel udpChannel = UdpChannel.parse(CHANNEL_URI + 4000);",
    "info" : "VariableDeclarationStatement[11094-11161]:VariableDeclarationStatement[11233-11300]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[11171-11287]:ExpressionStatement[11310-11426]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_2, CORRELATION_ID_2);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_2, CORRELATION_ID_2);",
    "info" : "ExpressionStatement[11296-11412]:ExpressionStatement[11435-11551]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_3, CORRELATION_ID_3);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_3, CORRELATION_ID_3);",
    "info" : "ExpressionStatement[11421-11537]:ExpressionStatement[11560-11676]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[11547-11572]:ExpressionStatement[11686-11711]"
  }, {
    "left" : "final ReceiveChannelEndpoint channelEndpoint = driverConductor.receiverChannelEndpoint(udpChannel);",
    "right" : "final ReceiveChannelEndpoint channelEndpoint = driverConductor.receiverChannelEndpoint(udpChannel);",
    "info" : "VariableDeclarationStatement[11582-11681]:VariableDeclarationStatement[11721-11820]"
  }, {
    "left" : "assertNotNull(channelEndpoint);",
    "right" : "assertNotNull(channelEndpoint);",
    "info" : "ExpressionStatement[11691-11722]:ExpressionStatement[11830-11861]"
  }, {
    "left" : "assertThat(channelEndpoint.streamCount(), is(3));",
    "right" : "assertThat(channelEndpoint.streamCount(), is(3));",
    "info" : "ExpressionStatement[11731-11780]:ExpressionStatement[11870-11919]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[11790-11909]:ExpressionStatement[11929-12048]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_2, CORRELATION_ID_2);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_2, CORRELATION_ID_2);",
    "info" : "ExpressionStatement[11918-12037]:ExpressionStatement[12057-12176]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[12047-12072]:ExpressionStatement[12186-12211]"
  }, {
    "left" : "assertNotNull(driverConductor.receiverChannelEndpoint(udpChannel));",
    "right" : "assertNotNull(driverConductor.receiverChannelEndpoint(udpChannel));",
    "info" : "ExpressionStatement[12082-12149]:ExpressionStatement[12221-12288]"
  }, {
    "left" : "assertThat(channelEndpoint.streamCount(), is(1));",
    "right" : "assertThat(channelEndpoint.streamCount(), is(1));",
    "info" : "ExpressionStatement[12158-12207]:ExpressionStatement[12297-12346]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[12219-12224]:MarkerAnnotation[12358-12363]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[12229-12235]:Modifier[12368-12374]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[12236-12240]:PrimitiveType[12375-12379]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[12319-12328]:SimpleType[12458-12467]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12333-13700]:Block[12472-13839]"
  }, {
    "left" : "final UdpChannel udpChannel = UdpChannel.parse(CHANNEL_URI + 4000);",
    "right" : "final UdpChannel udpChannel = UdpChannel.parse(CHANNEL_URI + 4000);",
    "info" : "VariableDeclarationStatement[12343-12410]:VariableDeclarationStatement[12482-12549]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[12420-12536]:ExpressionStatement[12559-12675]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_2, CORRELATION_ID_2);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_2, CORRELATION_ID_2);",
    "info" : "ExpressionStatement[12545-12661]:ExpressionStatement[12684-12800]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_3, CORRELATION_ID_3);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_3, CORRELATION_ID_3);",
    "info" : "ExpressionStatement[12670-12786]:ExpressionStatement[12809-12925]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[12796-12821]:ExpressionStatement[12935-12960]"
  }, {
    "left" : "final ReceiveChannelEndpoint channelEndpoint = driverConductor.receiverChannelEndpoint(udpChannel);",
    "right" : "final ReceiveChannelEndpoint channelEndpoint = driverConductor.receiverChannelEndpoint(udpChannel);",
    "info" : "VariableDeclarationStatement[12831-12930]:VariableDeclarationStatement[12970-13069]"
  }, {
    "left" : "assertNotNull(channelEndpoint);",
    "right" : "assertNotNull(channelEndpoint);",
    "info" : "ExpressionStatement[12940-12971]:ExpressionStatement[13079-13110]"
  }, {
    "left" : "assertThat(channelEndpoint.streamCount(), is(3));",
    "right" : "assertThat(channelEndpoint.streamCount(), is(3));",
    "info" : "ExpressionStatement[12980-13029]:ExpressionStatement[13119-13168]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_2, CORRELATION_ID_2);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_2, CORRELATION_ID_2);",
    "info" : "ExpressionStatement[13039-13158]:ExpressionStatement[13178-13297]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_3, CORRELATION_ID_3);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_3, CORRELATION_ID_3);",
    "info" : "ExpressionStatement[13167-13286]:ExpressionStatement[13306-13425]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[13296-13321]:ExpressionStatement[13435-13460]"
  }, {
    "left" : "assertNotNull(driverConductor.receiverChannelEndpoint(udpChannel));",
    "right" : "assertNotNull(driverConductor.receiverChannelEndpoint(udpChannel));",
    "info" : "ExpressionStatement[13331-13398]:ExpressionStatement[13470-13537]"
  }, {
    "left" : "assertThat(channelEndpoint.streamCount(), is(1));",
    "right" : "assertThat(channelEndpoint.streamCount(), is(1));",
    "info" : "ExpressionStatement[13407-13456]:ExpressionStatement[13546-13595]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.REMOVE_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[13466-13585]:ExpressionStatement[13605-13724]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[13595-13620]:ExpressionStatement[13734-13759]"
  }, {
    "left" : "assertNull(driverConductor.receiverChannelEndpoint(udpChannel));",
    "right" : "assertNull(driverConductor.receiverChannelEndpoint(udpChannel));",
    "info" : "ExpressionStatement[13630-13694]:ExpressionStatement[13769-13833]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[13706-13711]:MarkerAnnotation[13845-13850]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[13716-13722]:Modifier[13855-13861]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[13782-13791]:SimpleType[13921-13930]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13796-14235]:Block[13935-14455]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[13806-13877]:ExpressionStatement[13945-14016]"
  }, {
    "left" : "writePublicationMessage(REMOVE_PUBLICATION, 2, 2, 4000, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(REMOVE_PUBLICATION, 2, 2, 4000, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[13886-13960]:ExpressionStatement[14025-14099]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[13970-13995]:ExpressionStatement[14109-14134]"
  }, {
    "left" : "verifySenderNotifiedOfNewPublication();",
    "right" : "verify(senderProxy).newPublication(any(), any(), any());",
    "info" : "ExpressionStatement[14005-14044]:ExpressionStatement[14144-14200]"
  }, {
    "left" : "verifySenderNotifiedOfNewPublication()",
    "right" : "anyLong()",
    "info" : "MethodInvocation[14005-14043]:MethodInvocation[14381-14390]"
  }, {
    "left" : "verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any(), anyInt());",
    "right" : "verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any(), anyInt());",
    "info" : "ExpressionStatement[14054-14165]:ExpressionStatement[14209-14320]"
  }, {
    "left" : "isEmptyOrNullString()",
    "right" : "any()",
    "info" : "MethodInvocation[14123-14144]:MethodInvocation[14179-14184]"
  }, {
    "left" : "any()",
    "right" : "any()",
    "info" : "MethodInvocation[14148-14153]:MethodInvocation[14193-14198]"
  }, {
    "left" : "anyInt()",
    "right" : "any()",
    "info" : "MethodInvocation[14155-14163]:MethodInvocation[14186-14191]"
  }, {
    "left" : "verifyNeverSucceeds()",
    "right" : "anyInt()",
    "info" : "MethodInvocation[14174-14195]:MethodInvocation[14310-14318]"
  }, {
    "left" : "verifyNeverSucceeds();",
    "right" : "verify(mockClientProxy, never()).operationSucceeded(anyLong());",
    "info" : "ExpressionStatement[14174-14196]:ExpressionStatement[14329-14392]"
  }, {
    "left" : "verifyExceptionLogged()",
    "right" : "any()",
    "info" : "MethodInvocation[14205-14228]:MethodInvocation[14303-14308]"
  }, {
    "left" : "verifyExceptionLogged();",
    "right" : "verify(mockConductorLogger).logException(any());",
    "info" : "ExpressionStatement[14205-14229]:ExpressionStatement[14401-14449]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[14241-14246]:MarkerAnnotation[14461-14466]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14251-14257]:Modifier[14471-14477]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14258-14262]:PrimitiveType[13862-13866]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[14316-14325]:SimpleType[14536-14545]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14330-14762]:Block[14550-15133]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[14340-14411]:ExpressionStatement[14560-14631]"
  }, {
    "left" : "writePublicationMessage(REMOVE_PUBLICATION, 1, 3, 4000, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(REMOVE_PUBLICATION, 1, 3, 4000, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[14420-14494]:ExpressionStatement[14640-14714]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[14504-14529]:ExpressionStatement[14724-14749]"
  }, {
    "left" : "verifyPublicationClosed(never())",
    "right" : "verify(senderProxy).newPublication(any(), any(), any())",
    "info" : "MethodInvocation[14539-14571]:MethodInvocation[14759-14814]"
  }, {
    "left" : "verifyPublicationClosed(never());",
    "right" : "verify(senderProxy).newPublication(any(), any(), any());",
    "info" : "ExpressionStatement[14539-14572]:ExpressionStatement[14759-14815]"
  }, {
    "left" : "never()",
    "right" : "isEmptyOrNullString()",
    "info" : "MethodInvocation[14563-14570]:MethodInvocation[14278-14299]"
  }, {
    "left" : "verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any(), anyInt());",
    "right" : "verify(mockClientProxy).onError(eq(UNKNOWN_PUBLICATION), argThat(not(isEmptyOrNullString())), any(), anyInt());",
    "info" : "ExpressionStatement[14581-14692]:ExpressionStatement[14887-14998]"
  }, {
    "left" : "mockClientProxy",
    "right" : "mockClientProxy",
    "info" : "SimpleName[14588-14603]:SimpleName[14336-14351]"
  }, {
    "left" : "eq(UNKNOWN_PUBLICATION)",
    "right" : "not(isEmptyOrNullString())",
    "info" : "MethodInvocation[14613-14636]:MethodInvocation[14952-14978]"
  }, {
    "left" : "UNKNOWN_PUBLICATION",
    "right" : "UNKNOWN_PUBLICATION",
    "info" : "SimpleName[14616-14635]:SimpleName[14922-14941]"
  }, {
    "left" : "argThat(not(isEmptyOrNullString()))",
    "right" : "any()",
    "info" : "MethodInvocation[14638-14673]:MethodInvocation[14981-14986]"
  }, {
    "left" : "not(isEmptyOrNullString())",
    "right" : "argThat(not(isEmptyOrNullString()))",
    "info" : "MethodInvocation[14646-14672]:MethodInvocation[14944-14979]"
  }, {
    "left" : "isEmptyOrNullString()",
    "right" : "any()",
    "info" : "MethodInvocation[14650-14671]:MethodInvocation[14442-14447]"
  }, {
    "left" : "any()",
    "right" : "never()",
    "info" : "MethodInvocation[14675-14680]:MethodInvocation[14353-14360]"
  }, {
    "left" : "anyInt()",
    "right" : "any()",
    "info" : "MethodInvocation[14682-14690]:MethodInvocation[14794-14799]"
  }, {
    "left" : "verifyNeverSucceeds()",
    "right" : "any()",
    "info" : "MethodInvocation[14701-14722]:MethodInvocation[14808-14813]"
  }, {
    "left" : "verifyNeverSucceeds();",
    "right" : "verify(mockClientProxy, never()).operationSucceeded(anyLong());",
    "info" : "ExpressionStatement[14701-14723]:ExpressionStatement[15007-15070]"
  }, {
    "left" : "verifyExceptionLogged()",
    "right" : "any()",
    "info" : "MethodInvocation[14732-14755]:MethodInvocation[14801-14806]"
  }, {
    "left" : "verifyExceptionLogged();",
    "right" : "verify(mockConductorLogger).logException(any());",
    "info" : "ExpressionStatement[14732-14756]:ExpressionStatement[15079-15127]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[14768-14773]:MarkerAnnotation[15139-15144]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14778-14784]:Modifier[15149-15155]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[14785-14789]:PrimitiveType[14478-14482]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[14842-14851]:SimpleType[15213-15222]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14856-15306]:Block[15227-15720]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, INVALID_URI, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ADD_SUBSCRIPTION, INVALID_URI, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[14866-14975]:ExpressionStatement[15237-15324]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[14985-15010]:ExpressionStatement[15334-15359]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[14985-15000]:SimpleName[15887-15902]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[15019-15034]:SimpleName[15334-15349]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[15019-15044]:ExpressionStatement[15368-15393]"
  }, {
    "left" : "verify(senderProxy, never()).newPublication(any(), any(), any());",
    "right" : "verify(senderProxy, never()).newPublication(any(), any(), any());",
    "info" : "ExpressionStatement[15054-15119]:ExpressionStatement[15403-15468]"
  }, {
    "left" : "verify(mockClientProxy).onError(eq(INVALID_CHANNEL), argThat(not(isEmptyOrNullString())), any(), anyInt());",
    "right" : "verify(mockClientProxy).onError(eq(INVALID_CHANNEL), argThat(not(isEmptyOrNullString())), any(), anyInt());",
    "info" : "ExpressionStatement[15129-15236]:ExpressionStatement[15478-15585]"
  }, {
    "left" : "verifyNeverSucceeds()",
    "right" : "any()",
    "info" : "MethodInvocation[15245-15266]:MethodInvocation[14871-14876]"
  }, {
    "left" : "verifyNeverSucceeds();",
    "right" : "verify(mockClientProxy, never()).operationSucceeded(anyLong());",
    "info" : "ExpressionStatement[15245-15267]:ExpressionStatement[15594-15657]"
  }, {
    "left" : "verifyExceptionLogged()",
    "right" : "isEmptyOrNullString()",
    "info" : "MethodInvocation[15276-15299]:MethodInvocation[14956-14977]"
  }, {
    "left" : "verifyExceptionLogged();",
    "right" : "verify(mockConductorLogger).logException(any());",
    "info" : "ExpressionStatement[15276-15300]:ExpressionStatement[15666-15714]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[15312-15317]:MarkerAnnotation[15726-15731]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15322-15328]:Modifier[15736-15742]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15329-15333]:PrimitiveType[15156-15160]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[15368-15377]:SimpleType[15782-15791]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15382-15813]:Block[15796-16455]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[15392-15463]:ExpressionStatement[15806-15877]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[15473-15488]:SimpleName[15368-15383]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[15473-15498]:ExpressionStatement[15887-15912]"
  }, {
    "left" : "verifySenderNotifiedOfNewPublication()",
    "right" : "never()",
    "info" : "MethodInvocation[15508-15546]:MethodInvocation[15031-15038]"
  }, {
    "left" : "verifySenderNotifiedOfNewPublication();",
    "right" : "verify(senderProxy, times(1)).newPublication(captor.capture(), any(), any());",
    "info" : "ExpressionStatement[15508-15547]:ExpressionStatement[16031-16108]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= PUBLICATION_LINGER_NS + CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= PUBLICATION_LINGER_NS + CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "info" : "MethodInvocation[15557-15665]:MethodInvocation[16185-16286]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= PUBLICATION_LINGER_NS + CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= PUBLICATION_LINGER_NS + CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "info" : "ExpressionStatement[15557-15666]:ExpressionStatement[16185-16287]"
  }, {
    "left" : "verifyPublicationClosed(times(1))",
    "right" : "verify(senderProxy).removePublication(eq(publication))",
    "info" : "MethodInvocation[15676-15709]:MethodInvocation[16297-16351]"
  }, {
    "left" : "verifyPublicationClosed(times(1));",
    "right" : "verify(senderProxy).removePublication(eq(publication));",
    "info" : "ExpressionStatement[15676-15710]:ExpressionStatement[16297-16352]"
  }, {
    "left" : "times(1)",
    "right" : "eq(publication)",
    "info" : "MethodInvocation[15700-15708]:MethodInvocation[16335-16350]"
  }, {
    "left" : "1",
    "right" : "1",
    "info" : "NumberLiteral[15706-15707]:NumberLiteral[16596-16597]"
  }, {
    "left" : "assertNull(driverConductor.senderChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "right" : "assertNull(driverConductor.senderChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "info" : "ExpressionStatement[15719-15807]:ExpressionStatement[16361-16449]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[15819-15824]:MarkerAnnotation[16461-16466]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[15829-15835]:Modifier[16471-16477]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[15836-15840]:PrimitiveType[15743-15747]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[15889-15898]:SimpleType[16531-16540]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15903-16485]:Block[16545-17351]"
  }, {
    "left" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "right" : "writePublicationMessage(ADD_PUBLICATION, 1, 2, 4000, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[15913-15984]:ExpressionStatement[16555-16626]"
  }, {
    "left" : "1",
    "right" : "1",
    "info" : "NumberLiteral[15954-15955]:NumberLiteral[16057-16058]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[15994-16019]:ExpressionStatement[16636-16661]"
  }, {
    "left" : "verifySenderNotifiedOfNewPublication()",
    "right" : "never()",
    "info" : "MethodInvocation[16029-16067]:MethodInvocation[15618-15625]"
  }, {
    "left" : "verifySenderNotifiedOfNewPublication();",
    "right" : "verify(senderProxy, times(1)).newPublication(captor.capture(), any(), any());",
    "info" : "ExpressionStatement[16029-16068]:ExpressionStatement[16780-16857]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS / 2)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS / 2)",
    "info" : "MethodInvocation[16078-16162]:MethodInvocation[16934-17011]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS / 2);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS / 2);",
    "info" : "ExpressionStatement[16078-16163]:ExpressionStatement[16934-17012]"
  }, {
    "left" : "writeKeepaliveClientMessage()",
    "right" : "any()",
    "info" : "MethodInvocation[16173-16202]:MethodInvocation[15707-15712]"
  }, {
    "left" : "writeKeepaliveClientMessage();",
    "right" : "writeKeepaliveClientMessage();",
    "info" : "ExpressionStatement[16173-16203]:ExpressionStatement[17022-17052]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + 1000)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + 1000)",
    "info" : "MethodInvocation[16213-16300]:MethodInvocation[17062-17142]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + 1000);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + 1000);",
    "info" : "ExpressionStatement[16213-16301]:ExpressionStatement[17062-17143]"
  }, {
    "left" : "wheel.clock()",
    "right" : "eq(receiveChannelEndpoint)",
    "info" : "MethodInvocation[16238-16251]:MethodInvocation[17838-17864]"
  }, {
    "left" : "wheel",
    "right" : "wheel",
    "info" : "SimpleName[16238-16243]:SimpleName[19012-19017]"
  }, {
    "left" : "CLIENT_LIVENESS_TIMEOUT_NS",
    "right" : "CLIENT_LIVENESS_TIMEOUT_NS",
    "info" : "SimpleName[16266-16292]:SimpleName[19040-19066]"
  }, {
    "left" : "writeKeepaliveClientMessage()",
    "right" : "anyLong()",
    "info" : "MethodInvocation[16311-16340]:MethodInvocation[15646-15655]"
  }, {
    "left" : "writeKeepaliveClientMessage();",
    "right" : "writeKeepaliveClientMessage();",
    "info" : "ExpressionStatement[16311-16341]:ExpressionStatement[17153-17183]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "info" : "MethodInvocation[16351-16435]:MethodInvocation[17193-17270]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "info" : "ExpressionStatement[16351-16436]:ExpressionStatement[17193-17271]"
  }, {
    "left" : "2",
    "right" : "2",
    "info" : "NumberLiteral[16433-16434]:NumberLiteral[17968-17969]"
  }, {
    "left" : "verifyPublicationClosed(never())",
    "right" : "verify(senderProxy, never()).removePublication(eq(publication))",
    "info" : "MethodInvocation[16446-16478]:MethodInvocation[17281-17344]"
  }, {
    "left" : "verifyPublicationClosed(never());",
    "right" : "verify(senderProxy, never()).removePublication(eq(publication));",
    "info" : "ExpressionStatement[16446-16479]:ExpressionStatement[17281-17345]"
  }, {
    "left" : "never()",
    "right" : "any()",
    "info" : "MethodInvocation[16470-16477]:MethodInvocation[15120-15125]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[16491-16496]:MarkerAnnotation[17357-17362]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[16501-16507]:Modifier[17367-17373]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[16548-16557]:SimpleType[17414-17423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16562-17116]:Block[17428-18183]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[16572-16688]:ExpressionStatement[17438-17554]"
  }, {
    "left" : "4000",
    "right" : "4000",
    "info" : "NumberLiteral[16651-16655]:NumberLiteral[19243-19247]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[16698-16723]:ExpressionStatement[17564-17589]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[16698-16713]:SimpleName[19172-19187]"
  }, {
    "left" : "verifyReceiverSubscribes()",
    "right" : "any()",
    "info" : "MethodInvocation[16733-16759]:MethodInvocation[16101-16106]"
  }, {
    "left" : "assertNotNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "right" : "assertNotNull(receiveChannelEndpoint);",
    "info" : "ExpressionStatement[16769-16862]:ExpressionStatement[17752-17790]"
  }, {
    "left" : "driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000))",
    "right" : "driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000))",
    "info" : "MethodInvocation[16783-16860]:MethodInvocation[17665-17742]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[16783-16798]:SimpleName[18098-18113]"
  }, {
    "left" : "4000",
    "right" : "4000",
    "info" : "NumberLiteral[16854-16858]:NumberLiteral[18169-18173]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "info" : "MethodInvocation[16872-16956]:MethodInvocation[17893-17970]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "info" : "ExpressionStatement[16872-16957]:ExpressionStatement[17893-17971]"
  }, {
    "left" : "wheel.clock()",
    "right" : "wheel.clock()",
    "info" : "MethodInvocation[16897-16910]:MethodInvocation[17080-17093]"
  }, {
    "left" : "CLIENT_LIVENESS_TIMEOUT_NS",
    "right" : "CLIENT_LIVENESS_TIMEOUT_NS",
    "info" : "SimpleName[16925-16951]:SimpleName[17108-17134]"
  }, {
    "left" : "2",
    "right" : "2",
    "info" : "NumberLiteral[16954-16955]:NumberLiteral[17268-17269]"
  }, {
    "left" : "verifyReceiverRemovesSubscription(times(1))",
    "right" : "verify(receiverProxy, times(1)).removeSubscription(eq(receiveChannelEndpoint), eq(STREAM_ID_1))",
    "info" : "MethodInvocation[16967-17010]:MethodInvocation[17981-18076]"
  }, {
    "left" : "verifyReceiverRemovesSubscription(times(1));",
    "right" : "verify(receiverProxy, times(1)).removeSubscription(eq(receiveChannelEndpoint), eq(STREAM_ID_1));",
    "info" : "ExpressionStatement[16967-17011]:ExpressionStatement[17981-18077]"
  }, {
    "left" : "times(1)",
    "right" : "verify(receiverProxy, times(1))",
    "info" : "MethodInvocation[17001-17009]:MethodInvocation[17981-18012]"
  }, {
    "left" : "1",
    "right" : "1",
    "info" : "NumberLiteral[17007-17008]:NumberLiteral[16806-16807]"
  }, {
    "left" : "assertNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "right" : "assertNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "info" : "ExpressionStatement[17020-17110]:ExpressionStatement[18087-18177]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[17031-17046]:SimpleName[17564-17579]"
  }, {
    "left" : "4000",
    "right" : "4000",
    "info" : "NumberLiteral[17102-17106]:NumberLiteral[17517-17521]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[17122-17127]:MarkerAnnotation[18189-18194]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[17132-17138]:Modifier[18199-18205]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[17139-17143]:PrimitiveType[16478-16482]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[17193-17202]:SimpleType[18260-18269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17207-18032]:Block[18274-19257]"
  }, {
    "left" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "right" : "writeSubscriptionMessage(ControlProtocolEvents.ADD_SUBSCRIPTION, CHANNEL_URI + 4000, STREAM_ID_1, CORRELATION_ID_1);",
    "info" : "ExpressionStatement[17217-17333]:ExpressionStatement[18284-18400]"
  }, {
    "left" : "4000",
    "right" : "4000",
    "info" : "NumberLiteral[17296-17300]:NumberLiteral[18582-18586]"
  }, {
    "left" : "STREAM_ID_1",
    "right" : "STREAM_ID_1",
    "info" : "SimpleName[17302-17313]:SimpleName[17869-17880]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[17343-17368]:ExpressionStatement[18410-18435]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[17343-17358]:SimpleName[18511-18526]"
  }, {
    "left" : "assertNotNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "right" : "assertNotNull(receiveChannelEndpoint);",
    "info" : "ExpressionStatement[17378-17471]:ExpressionStatement[18598-18636]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[17392-17407]:SimpleName[17665-17680]"
  }, {
    "left" : "driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000))",
    "right" : "driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000))",
    "info" : "MethodInvocation[17392-17469]:MethodInvocation[18511-18588]"
  }, {
    "left" : "4000",
    "right" : "4000",
    "info" : "NumberLiteral[17463-17467]:NumberLiteral[17736-17740]"
  }, {
    "left" : "verifyReceiverSubscribes()",
    "right" : "any()",
    "info" : "MethodInvocation[17480-17506]:MethodInvocation[16850-16855]"
  }, {
    "left" : "verifyReceiverSubscribes();",
    "right" : "verify(receiverProxy).addSubscription(eq(receiveChannelEndpoint), eq(STREAM_ID_1));",
    "info" : "ExpressionStatement[17480-17507]:ExpressionStatement[18646-18729]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS)",
    "info" : "MethodInvocation[17517-17597]:MethodInvocation[18739-18812]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS);",
    "info" : "ExpressionStatement[17517-17598]:ExpressionStatement[18739-18813]"
  }, {
    "left" : "writeKeepaliveClientMessage()",
    "right" : "any()",
    "info" : "MethodInvocation[17608-17637]:MethodInvocation[16843-16848]"
  }, {
    "left" : "writeKeepaliveClientMessage();",
    "right" : "writeKeepaliveClientMessage();",
    "info" : "ExpressionStatement[17608-17638]:ExpressionStatement[18823-18853]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + 1000)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + 1000)",
    "info" : "MethodInvocation[17648-17735]:MethodInvocation[18863-18943]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + 1000);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS + 1000);",
    "info" : "ExpressionStatement[17648-17736]:ExpressionStatement[18863-18944]"
  }, {
    "left" : "wheel",
    "right" : "wheel",
    "info" : "SimpleName[17673-17678]:SimpleName[17911-17916]"
  }, {
    "left" : "CLIENT_LIVENESS_TIMEOUT_NS",
    "right" : "CLIENT_LIVENESS_TIMEOUT_NS",
    "info" : "SimpleName[17701-17727]:SimpleName[17939-17965]"
  }, {
    "left" : "writeKeepaliveClientMessage()",
    "right" : "any()",
    "info" : "MethodInvocation[17746-17775]:MethodInvocation[16094-16099]"
  }, {
    "left" : "writeKeepaliveClientMessage();",
    "right" : "writeKeepaliveClientMessage();",
    "info" : "ExpressionStatement[17746-17776]:ExpressionStatement[18954-18984]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2)",
    "info" : "MethodInvocation[17786-17870]:MethodInvocation[18994-19071]"
  }, {
    "left" : "processTimersUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "right" : "doWorkUntil(() -> wheel.clock().nanoTime() >= CLIENT_LIVENESS_TIMEOUT_NS * 2);",
    "info" : "ExpressionStatement[17786-17871]:ExpressionStatement[18994-19072]"
  }, {
    "left" : "wheel",
    "right" : "wheel",
    "info" : "SimpleName[17811-17816]:SimpleName[18881-18886]"
  }, {
    "left" : "CLIENT_LIVENESS_TIMEOUT_NS",
    "right" : "CLIENT_LIVENESS_TIMEOUT_NS",
    "info" : "SimpleName[17839-17865]:SimpleName[18909-18935]"
  }, {
    "left" : "verifyReceiverRemovesSubscription(never())",
    "right" : "verify(receiverProxy, never()).removeSubscription(any(), anyInt())",
    "info" : "MethodInvocation[17881-17923]:MethodInvocation[19082-19148]"
  }, {
    "left" : "verifyReceiverRemovesSubscription(never());",
    "right" : "verify(receiverProxy, never()).removeSubscription(any(), anyInt());",
    "info" : "ExpressionStatement[17881-17924]:ExpressionStatement[19082-19149]"
  }, {
    "left" : "never()",
    "right" : "never()",
    "info" : "MethodInvocation[17915-17922]:MethodInvocation[17301-17308]"
  }, {
    "left" : "assertNotNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "right" : "assertNotNull(driverConductor.receiverChannelEndpoint(UdpChannel.parse(CHANNEL_URI + 4000)));",
    "info" : "ExpressionStatement[17933-18026]:ExpressionStatement[19158-19251]"
  }, {
    "left" : "driverConductor",
    "right" : "driverConductor",
    "info" : "SimpleName[17947-17962]:SimpleName[18410-18425]"
  }, {
    "left" : "4000",
    "right" : "4000",
    "info" : "NumberLiteral[18018-18022]:NumberLiteral[18363-18367]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18046-18050]:PrimitiveType[17374-17378]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[18085-18090]:Modifier[16867-16872]"
  }, {
    "left" : "receiverProxy",
    "right" : "receiverProxy",
    "info" : "SimpleName[18136-18149]:SimpleName[17988-18001]"
  }, {
    "left" : "any()",
    "right" : "anyLong()",
    "info" : "MethodInvocation[18177-18182]:MethodInvocation[15059-15068]"
  }, {
    "left" : "anyInt()",
    "right" : "anyInt()",
    "info" : "MethodInvocation[18184-18192]:MethodInvocation[14988-14996]"
  }, {
    "left" : "receiverProxy",
    "right" : "receiverProxy",
    "info" : "SimpleName[18267-18280]:SimpleName[17807-17820]"
  }, {
    "left" : "any()",
    "right" : "writeKeepaliveClientMessage()",
    "info" : "MethodInvocation[18298-18303]:MethodInvocation[17153-17182]"
  }, {
    "left" : "STREAM_ID_1",
    "right" : "STREAM_ID_1",
    "info" : "SimpleName[18308-18319]:SimpleName[18063-18074]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[18371-18376]:Modifier[17599-17604]"
  }, {
    "left" : "senderProxy",
    "right" : "senderProxy",
    "info" : "SimpleName[18422-18433]:SimpleName[17288-17299]"
  }, {
    "left" : "any()",
    "right" : "writeKeepaliveClientMessage()",
    "info" : "MethodInvocation[18460-18465]:MethodInvocation[17022-17051]"
  }, {
    "left" : "mockConductorLogger",
    "right" : "mockConductorLogger",
    "info" : "SimpleName[18537-18556]:SimpleName[15673-15692]"
  }, {
    "left" : "any()",
    "right" : "writeKeepaliveClientMessage()",
    "info" : "MethodInvocation[18571-18576]:MethodInvocation[18823-18852]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18598-18602]:PrimitiveType[18206-18210]"
  }, {
    "left" : "mockClientProxy",
    "right" : "mockClientProxy",
    "info" : "SimpleName[18646-18661]:SimpleName[15601-15616]"
  }, {
    "left" : "never()",
    "right" : "writeKeepaliveClientMessage()",
    "info" : "MethodInvocation[18663-18670]:MethodInvocation[18954-18983]"
  }, {
    "left" : "anyLong()",
    "right" : "never()",
    "info" : "MethodInvocation[18691-18700]:MethodInvocation[19104-19111]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[18714-18721]:Modifier[19263-19270]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[18722-18726]:PrimitiveType[19271-19275]"
  }, {
    "left" : "final int msgTypeId",
    "right" : "final int msgTypeId",
    "info" : "SingleVariableDeclaration[18760-18779]:SingleVariableDeclaration[19309-19328]"
  }, {
    "left" : "final int sessionId",
    "right" : "final int sessionId",
    "info" : "SingleVariableDeclaration[18781-18800]:SingleVariableDeclaration[19330-19349]"
  }, {
    "left" : "final int streamId",
    "right" : "final int streamId",
    "info" : "SingleVariableDeclaration[18802-18820]:SingleVariableDeclaration[19351-19369]"
  }, {
    "left" : "final int port",
    "right" : "final int port",
    "info" : "SingleVariableDeclaration[18822-18836]:SingleVariableDeclaration[19371-19385]"
  }, {
    "left" : "final long correlationId",
    "right" : "final long correlationId",
    "info" : "SingleVariableDeclaration[18838-18862]:SingleVariableDeclaration[19387-19411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18868-19272]:Block[19417-19821]"
  }, {
    "left" : "publicationMessage.wrap(writeBuffer, 0);",
    "right" : "publicationMessage.wrap(writeBuffer, 0);",
    "info" : "ExpressionStatement[18878-18918]:ExpressionStatement[19427-19467]"
  }, {
    "left" : "publicationMessage.streamId(streamId);",
    "right" : "publicationMessage.streamId(streamId);",
    "info" : "ExpressionStatement[18927-18965]:ExpressionStatement[19476-19514]"
  }, {
    "left" : "publicationMessage.sessionId(sessionId);",
    "right" : "publicationMessage.sessionId(sessionId);",
    "info" : "ExpressionStatement[18974-19014]:ExpressionStatement[19523-19563]"
  }, {
    "left" : "publicationMessage.channel(CHANNEL_URI + port);",
    "right" : "publicationMessage.channel(CHANNEL_URI + port);",
    "info" : "ExpressionStatement[19023-19070]:ExpressionStatement[19572-19619]"
  }, {
    "left" : "publicationMessage.clientId(CLIENT_ID);",
    "right" : "publicationMessage.clientId(CLIENT_ID);",
    "info" : "ExpressionStatement[19079-19118]:ExpressionStatement[19628-19667]"
  }, {
    "left" : "publicationMessage.correlationId(correlationId);",
    "right" : "publicationMessage.correlationId(correlationId);",
    "info" : "ExpressionStatement[19127-19175]:ExpressionStatement[19676-19724]"
  }, {
    "left" : "fromClientCommands.write(msgTypeId, writeBuffer, 0, publicationMessage.length());",
    "right" : "fromClientCommands.write(msgTypeId, writeBuffer, 0, publicationMessage.length());",
    "info" : "ExpressionStatement[19185-19266]:ExpressionStatement[19734-19815]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[19344-19349]:Modifier[18445-18450]"
  }, {
    "left" : "ArgumentCaptor<NetworkPublication>",
    "right" : "ArgumentCaptor<NetworkPublication>",
    "info" : "ParameterizedType[19350-19384]:ParameterizedType[16677-16711]"
  }, {
    "left" : "ArgumentCaptor",
    "right" : "ArgumentCaptor",
    "info" : "SimpleName[19394-19408]:SimpleName[16721-16735]"
  }, {
    "left" : "NetworkPublication",
    "right" : "NetworkPublication",
    "info" : "SimpleType[19418-19436]:SimpleType[16873-16891]"
  }, {
    "left" : "senderProxy",
    "right" : "senderProxy",
    "info" : "SimpleName[19460-19471]:SimpleName[16787-16798]"
  }, {
    "left" : "1",
    "right" : "1",
    "info" : "NumberLiteral[19479-19480]:NumberLiteral[18009-18010]"
  }, {
    "left" : "captor",
    "right" : "captor",
    "info" : "SimpleName[19498-19504]:SimpleName[16906-16912]"
  }, {
    "left" : "any()",
    "right" : "anyInt()",
    "info" : "MethodInvocation[19516-19521]:MethodInvocation[19139-19147]"
  }, {
    "left" : "any()",
    "right" : "any()",
    "info" : "MethodInvocation[19523-19528]:MethodInvocation[19132-19137]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[19540-19545]:Modifier[16671-16676]"
  }, {
    "left" : "NetworkPublication",
    "right" : "NetworkPublication",
    "info" : "SimpleType[19546-19564]:SimpleType[16745-16763]"
  }, {
    "left" : "captor",
    "right" : "captor",
    "info" : "SimpleName[19579-19585]:SimpleName[16825-16831]"
  }, {
    "left" : "assertThat(publication.sessionId(), is(1));",
    "right" : "assertThat(publication.sessionId(), is(1));",
    "info" : "ExpressionStatement[19606-19649]:ExpressionStatement[7729-7772]"
  }, {
    "left" : "assertThat(publication.streamId(), is(2));",
    "right" : "assertThat(publication.streamId(), is(2));",
    "info" : "ExpressionStatement[19658-19700]:ExpressionStatement[7781-7823]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[19712-19719]:Modifier[19827-19834]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[19720-19724]:PrimitiveType[19835-19839]"
  }, {
    "left" : "final int msgTypeId",
    "right" : "final int msgTypeId",
    "info" : "SingleVariableDeclaration[19759-19778]:SingleVariableDeclaration[19874-19893]"
  }, {
    "left" : "final String channel",
    "right" : "final String channel",
    "info" : "SingleVariableDeclaration[19780-19800]:SingleVariableDeclaration[19895-19915]"
  }, {
    "left" : "final int streamId",
    "right" : "final int streamId",
    "info" : "SingleVariableDeclaration[19802-19820]:SingleVariableDeclaration[19917-19935]"
  }, {
    "left" : "final long registrationCorrelationId",
    "right" : "final long registrationCorrelationId",
    "info" : "SingleVariableDeclaration[19822-19858]:SingleVariableDeclaration[19937-19973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19864-20304]:Block[19979-20419]"
  }, {
    "left" : "subscriptionMessage.wrap(writeBuffer, 0);",
    "right" : "subscriptionMessage.wrap(writeBuffer, 0);",
    "info" : "ExpressionStatement[19874-19915]:ExpressionStatement[19989-20030]"
  }, {
    "left" : "subscriptionMessage.streamId(streamId)\n                           .channel(channel)\n                           .registrationCorrelationId(registrationCorrelationId)\n                           .correlationId(registrationCorrelationId)\n                           .clientId(CLIENT_ID);",
    "right" : "subscriptionMessage.streamId(streamId)\n                           .channel(channel)\n                           .registrationCorrelationId(registrationCorrelationId)\n                           .correlationId(registrationCorrelationId)\n                           .clientId(CLIENT_ID);",
    "info" : "ExpressionStatement[19924-20206]:ExpressionStatement[20039-20321]"
  }, {
    "left" : "fromClientCommands.write(msgTypeId, writeBuffer, 0, subscriptionMessage.length());",
    "right" : "fromClientCommands.write(msgTypeId, writeBuffer, 0, subscriptionMessage.length());",
    "info" : "ExpressionStatement[20216-20298]:ExpressionStatement[20331-20413]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20310-20317]:Modifier[20425-20432]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[20318-20322]:PrimitiveType[20433-20437]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20357-20629]:Block[20472-20744]"
  }, {
    "left" : "correlatedMessage.wrap(writeBuffer, 0);",
    "right" : "correlatedMessage.wrap(writeBuffer, 0);",
    "info" : "ExpressionStatement[20367-20406]:ExpressionStatement[20482-20521]"
  }, {
    "left" : "correlatedMessage.clientId(CLIENT_ID);",
    "right" : "correlatedMessage.clientId(CLIENT_ID);",
    "info" : "ExpressionStatement[20415-20453]:ExpressionStatement[20530-20568]"
  }, {
    "left" : "correlatedMessage.correlationId(0);",
    "right" : "correlatedMessage.correlationId(0);",
    "info" : "ExpressionStatement[20462-20497]:ExpressionStatement[20577-20612]"
  }, {
    "left" : "fromClientCommands.write(ControlProtocolEvents.CLIENT_KEEPALIVE, writeBuffer, 0, CorrelatedMessageFlyweight.LENGTH);",
    "right" : "fromClientCommands.write(ControlProtocolEvents.CLIENT_KEEPALIVE, writeBuffer, 0, CorrelatedMessageFlyweight.LENGTH);",
    "info" : "ExpressionStatement[20507-20623]:ExpressionStatement[20622-20738]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[20635-20642]:Modifier[20750-20757]"
  }, {
    "left" : "long",
    "right" : "long",
    "info" : "PrimitiveType[20643-20647]:PrimitiveType[20758-20762]"
  }, {
    "left" : "final BooleanSupplier condition",
    "right" : "final BooleanSupplier condition",
    "info" : "SingleVariableDeclaration[20667-20698]:SingleVariableDeclaration[20775-20806]"
  }, {
    "left" : "Exception",
    "right" : "Exception",
    "info" : "SimpleType[20707-20716]:SimpleType[20815-20824]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20721-21119]:Block[20829-21227]"
  }, {
    "left" : "final long startTime = wheel.clock().nanoTime();",
    "right" : "final long startTime = wheel.clock().nanoTime();",
    "info" : "VariableDeclarationStatement[20731-20779]:VariableDeclarationStatement[20839-20887]"
  }, {
    "left" : "while (!condition.getAsBoolean())",
    "right" : "while (!condition.getAsBoolean())",
    "info" : "WhileStatement[20789-21059]:WhileStatement[20897-21167]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20831-21059]:Block[20939-21167]"
  }, {
    "left" : "if (wheel.computeDelayInMs() > 0)",
    "right" : "if (wheel.computeDelayInMs() > 0)",
    "info" : "IfStatement[20845-21010]:IfStatement[20953-21118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20891-21010]:Block[20999-21118]"
  }, {
    "left" : "currentTime += TimeUnit.MICROSECONDS.toNanos(Configuration.CONDUCTOR_TICK_DURATION_US);",
    "right" : "currentTime += TimeUnit.MICROSECONDS.toNanos(Configuration.CONDUCTOR_TICK_DURATION_US);",
    "info" : "ExpressionStatement[20909-20996]:ExpressionStatement[21017-21104]"
  }, {
    "left" : "driverConductor.doWork();",
    "right" : "driverConductor.doWork();",
    "info" : "ExpressionStatement[21024-21049]:ExpressionStatement[21132-21157]"
  }, {
    "left" : "return wheel.clock().nanoTime() - startTime;",
    "right" : "return wheel.clock().nanoTime() - startTime;",
    "info" : "ReturnStatement[21069-21113]:ReturnStatement[21177-21221]"
  } ]
}