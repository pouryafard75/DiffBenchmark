{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "public HarmonicFitter(final DifferentiableMultivariateVectorOptimizer optimizer)",
      "right" : "public HarmonicFitter(final DifferentiableMultivariateVectorOptimizer optimizer)",
      "info" : "MethodDeclaration[1832-2047]:MethodDeclaration[1832-2047]"
    }, {
      "left" : "public double[] fit(double[] initialGuess)",
      "right" : "public double[] fit(double[] initialGuess)",
      "info" : "MethodDeclaration[2053-2560]:MethodDeclaration[2053-2560]"
    }, {
      "left" : "public double[] fit()",
      "right" : "public double[] fit()",
      "info" : "MethodDeclaration[2566-3173]:MethodDeclaration[2566-3173]"
    }, {
      "left" : "private final WeightedObservedPoint[] observations;",
      "right" : "private final WeightedObservedPoint[] observations;",
      "info" : "FieldDeclaration[8289-8377]:FieldDeclaration[8289-8377]"
    }, {
      "left" : "private double a;",
      "right" : "private double a;",
      "info" : "FieldDeclaration[8386-8429]:FieldDeclaration[8386-8429]"
    }, {
      "left" : "private double omega;",
      "right" : "private double omega;",
      "info" : "FieldDeclaration[8438-8493]:FieldDeclaration[8438-8493]"
    }, {
      "left" : "private double phi;",
      "right" : "private double phi;",
      "info" : "FieldDeclaration[8502-8543]:FieldDeclaration[8502-8543]"
    }, {
      "left" : "public ParameterGuesser(WeightedObservedPoint[] observations)",
      "right" : "public ParameterGuesser(WeightedObservedPoint[] observations)",
      "info" : "MethodDeclaration[8553-9162]:MethodDeclaration[8553-9162]"
    }, {
      "left" : "public double[] guess()",
      "right" : "public double[] guess()",
      "info" : "MethodDeclaration[9172-9630]:MethodDeclaration[9172-9630]"
    }, {
      "left" : "private void sortObservations()",
      "right" : "private void sortObservations()",
      "info" : "MethodDeclaration[9640-10822]:MethodDeclaration[9640-10822]"
    }, {
      "left" : "private void guessPhi()",
      "right" : "private void guessPhi()",
      "info" : "MethodDeclaration[14311-15394]:MethodDeclaration[14452-15535]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2014-2047]:Block[2014-2047]"
    }, {
      "left" : "super(optimizer);",
      "right" : "super(optimizer);",
      "info" : "SuperConstructorInvocation[2024-2041]:SuperConstructorInvocation[2024-2041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2482-2560]:Block[2482-2560]"
    }, {
      "left" : "return fit(new HarmonicOscillator.Parametric(), initialGuess);",
      "right" : "return fit(new HarmonicOscillator.Parametric(), initialGuess);",
      "info" : "ReturnStatement[2492-2554]:ReturnStatement[2492-2554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3095-3173]:Block[3095-3173]"
    }, {
      "left" : "return fit((new ParameterGuesser(getObservations())).guess());",
      "right" : "return fit((new ParameterGuesser(getObservations())).guess());",
      "info" : "ReturnStatement[3105-3167]:ReturnStatement[3105-3167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8847-9162]:Block[8847-9162]"
    }, {
      "left" : "if (observations.length < 4)",
      "right" : "if (observations.length < 4)",
      "info" : "IfStatement[8861-9097]:IfStatement[8861-9097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8890-9097]:Block[8890-9097]"
    }, {
      "left" : "throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n                                                    observations.length, 4, true);",
      "right" : "throw new NumberIsTooSmallException(LocalizedFormats.INSUFFICIENT_OBSERVED_POINTS_IN_SAMPLE,\n                                                    observations.length, 4, true);",
      "info" : "ThrowStatement[8908-9083]:ThrowStatement[8908-9083]"
    }, {
      "left" : "this.observations = observations.clone();",
      "right" : "this.observations = observations.clone();",
      "info" : "ExpressionStatement[9111-9152]:ExpressionStatement[9111-9152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9485-9630]:Block[9485-9630]"
    }, {
      "left" : "sortObservations();",
      "right" : "sortObservations();",
      "info" : "ExpressionStatement[9499-9518]:ExpressionStatement[9499-9518]"
    }, {
      "left" : "guessAOmega();",
      "right" : "guessAOmega();",
      "info" : "ExpressionStatement[9531-9545]:ExpressionStatement[9531-9545]"
    }, {
      "left" : "guessPhi();",
      "right" : "guessPhi();",
      "info" : "ExpressionStatement[9558-9569]:ExpressionStatement[9558-9569]"
    }, {
      "left" : "return new double[] { a, omega, phi };",
      "right" : "return new double[] { a, omega, phi };",
      "info" : "ReturnStatement[9582-9620]:ReturnStatement[9582-9620]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9759-10822]:Block[9759-10822]"
    }, {
      "left" : "WeightedObservedPoint curr = observations[0];",
      "right" : "WeightedObservedPoint curr = observations[0];",
      "info" : "VariableDeclarationStatement[10002-10047]:VariableDeclarationStatement[10002-10047]"
    }, {
      "left" : "for (int j = 1; j < observations.length; ++j)",
      "right" : "for (int j = 1; j < observations.length; ++j)",
      "info" : "ForStatement[10060-10812]:ForStatement[10060-10812]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10106-10812]:Block[10106-10812]"
    }, {
      "left" : "WeightedObservedPoint prec = curr;",
      "right" : "WeightedObservedPoint prec = curr;",
      "info" : "VariableDeclarationStatement[10124-10158]:VariableDeclarationStatement[10124-10158]"
    }, {
      "left" : "curr = observations[j];",
      "right" : "curr = observations[j];",
      "info" : "ExpressionStatement[10175-10198]:ExpressionStatement[10175-10198]"
    }, {
      "left" : "if (curr.getX() < prec.getX())",
      "right" : "if (curr.getX() < prec.getX())",
      "info" : "IfStatement[10215-10798]:IfStatement[10215-10798]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10246-10798]:Block[10246-10798]"
    }, {
      "left" : "int i = j - 1;",
      "right" : "int i = j - 1;",
      "info" : "VariableDeclarationStatement[10354-10368]:VariableDeclarationStatement[10354-10368]"
    }, {
      "left" : "WeightedObservedPoint mI = observations[i];",
      "right" : "WeightedObservedPoint mI = observations[i];",
      "info" : "VariableDeclarationStatement[10389-10432]:VariableDeclarationStatement[10389-10432]"
    }, {
      "left" : "while ((i >= 0) && (curr.getX() < mI.getX()))",
      "right" : "while ((i >= 0) && (curr.getX() < mI.getX()))",
      "info" : "WhileStatement[10453-10688]:WhileStatement[10453-10688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10499-10688]:Block[10499-10688]"
    }, {
      "left" : "observations[i + 1] = mI;",
      "right" : "observations[i + 1] = mI;",
      "info" : "ExpressionStatement[10525-10550]:ExpressionStatement[10525-10550]"
    }, {
      "left" : "if (i-- != 0)",
      "right" : "if (i-- != 0)",
      "info" : "IfStatement[10575-10666]:IfStatement[10575-10666]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10589-10666]:Block[10589-10666]"
    }, {
      "left" : "mI = observations[i];",
      "right" : "mI = observations[i];",
      "info" : "ExpressionStatement[10619-10640]:ExpressionStatement[10619-10640]"
    }, {
      "left" : "observations[i + 1] = curr;",
      "right" : "observations[i + 1] = curr;",
      "info" : "ExpressionStatement[10709-10736]:ExpressionStatement[10709-10736]"
    }, {
      "left" : "curr = observations[j];",
      "right" : "curr = observations[j];",
      "info" : "ExpressionStatement[10757-10780]:ExpressionStatement[10757-10780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14407-15394]:Block[14548-15535]"
    }, {
      "left" : "double fcMean = 0;",
      "right" : "double fcMean = 0;",
      "info" : "VariableDeclarationStatement[14457-14475]:VariableDeclarationStatement[14598-14616]"
    }, {
      "left" : "double fsMean = 0;",
      "right" : "double fsMean = 0;",
      "info" : "VariableDeclarationStatement[14488-14506]:VariableDeclarationStatement[14629-14647]"
    }, {
      "left" : "double currentX = observations[0].getX();",
      "right" : "double currentX = observations[0].getX();",
      "info" : "VariableDeclarationStatement[14520-14561]:VariableDeclarationStatement[14661-14702]"
    }, {
      "left" : "double currentY = observations[0].getY();",
      "right" : "double currentY = observations[0].getY();",
      "info" : "VariableDeclarationStatement[14574-14615]:VariableDeclarationStatement[14715-14756]"
    }, {
      "left" : "for (int i = 1; i < observations.length; ++i)",
      "right" : "for (int i = 1; i < observations.length; ++i)",
      "info" : "ForStatement[14628-15332]:ForStatement[14769-15473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14674-15332]:Block[14815-15473]"
    }, {
      "left" : "final double previousX = currentX;",
      "right" : "final double previousX = currentX;",
      "info" : "VariableDeclarationStatement[14728-14762]:VariableDeclarationStatement[14869-14903]"
    }, {
      "left" : "final double previousY = currentY;",
      "right" : "final double previousY = currentY;",
      "info" : "VariableDeclarationStatement[14779-14813]:VariableDeclarationStatement[14920-14954]"
    }, {
      "left" : "currentX = observations[i].getX();",
      "right" : "currentX = observations[i].getX();",
      "info" : "ExpressionStatement[14830-14864]:ExpressionStatement[14971-15005]"
    }, {
      "left" : "currentY = observations[i].getY();",
      "right" : "currentY = observations[i].getY();",
      "info" : "ExpressionStatement[14881-14915]:ExpressionStatement[15022-15056]"
    }, {
      "left" : "final double currentYPrime = (currentY - previousY) / (currentX - previousX);",
      "right" : "final double currentYPrime = (currentY - previousY) / (currentX - previousX);",
      "info" : "VariableDeclarationStatement[14932-15009]:VariableDeclarationStatement[15073-15150]"
    }, {
      "left" : "double omegaX = omega * currentX;",
      "right" : "double omegaX = omega * currentX;",
      "info" : "VariableDeclarationStatement[15027-15060]:VariableDeclarationStatement[15168-15201]"
    }, {
      "left" : "double cosine = FastMath.cos(omegaX);",
      "right" : "double cosine = FastMath.cos(omegaX);",
      "info" : "VariableDeclarationStatement[15077-15114]:VariableDeclarationStatement[15218-15255]"
    }, {
      "left" : "double sine = FastMath.sin(omegaX);",
      "right" : "double sine = FastMath.sin(omegaX);",
      "info" : "VariableDeclarationStatement[15131-15166]:VariableDeclarationStatement[15272-15307]"
    }, {
      "left" : "fcMean += omega * currentY * cosine - currentYPrime * sine;",
      "right" : "fcMean += omega * currentY * cosine - currentYPrime * sine;",
      "info" : "ExpressionStatement[15183-15242]:ExpressionStatement[15324-15383]"
    }, {
      "left" : "fsMean += omega * currentY * sine + currentYPrime * cosine;",
      "right" : "fsMean += omega * currentY * sine + currentYPrime * cosine;",
      "info" : "ExpressionStatement[15259-15318]:ExpressionStatement[15400-15459]"
    }, {
      "left" : "phi = FastMath.atan2(-fsMean, fcMean);",
      "right" : "phi = FastMath.atan2(-fsMean, fcMean);",
      "info" : "ExpressionStatement[15346-15384]:ExpressionStatement[15487-15525]"
    } ]
  },
  "interFileMappings" : { }
}