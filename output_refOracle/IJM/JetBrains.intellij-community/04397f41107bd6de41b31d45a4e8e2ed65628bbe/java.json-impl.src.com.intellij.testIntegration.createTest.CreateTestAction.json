{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1616-6309]:TypeDeclaration[1616-6145]"
  }, {
    "left" : "private static final String CREATE_TEST_IN_THE_SAME_ROOT = \"create.test.in.the.same.root\";",
    "right" : "private static final String CREATE_TEST_IN_THE_SAME_ROOT = \"create.test.in.the.same.root\";",
    "info" : "FieldDeclaration[1689-1779]:FieldDeclaration[1689-1779]"
  }, {
    "left" : "public ) : String",
    "right" : "public ) : String",
    "info" : "MethodDeclaration[1783-1886]:MethodDeclaration[1783-1886]"
  }, {
    "left" : "@NotNull\n  public String getFamilyName() {\n    return getText();\n  }",
    "right" : "@NotNull\n  public String getFamilyName() {\n    return getText();\n  }",
    "info" : "MethodDeclaration[1890-1958]:MethodDeclaration[1890-1958]"
  }, {
    "left" : "public project Project, editor Editor, element PsiElement) : boolean",
    "right" : "public project Project, editor Editor, element PsiElement) : boolean",
    "info" : "MethodDeclaration[1962-2558]:MethodDeclaration[1962-2558]"
  }, {
    "left" : "public element PsiElement) : boolean",
    "right" : "public element PsiElement) : boolean",
    "info" : "MethodDeclaration[2562-3103]:MethodDeclaration[2562-3103]"
  }, {
    "left" : "@Override\n  public void invoke(final @NotNull Project project, Editor editor, @NotNull PsiElement element) throws IncorrectOperationException {\n    final Module srcModule = ModuleUtilCore.findModuleForPsiElement(element);\n    final PsiClass srcClass = getContainingClass(element);\n\n    if (srcClass == null) return;\n\n    PsiDirectory srcDir = element.getContainingFile().getContainingDirectory();\n    PsiPackage srcPackage = JavaDirectoryService.getInstance().getPackage(srcDir);\n\n    final PropertiesComponent propertiesComponent = PropertiesComponent.getInstance();\n    final HashSet<VirtualFile> testFolders = new HashSet<VirtualFile>();\n    checkForTestRoots(srcModule, testFolders);\n    if (testFolders.isEmpty() && !propertiesComponent.getBoolean(CREATE_TEST_IN_THE_SAME_ROOT, false)) {\n      if (Messages.showOkCancelDialog(project, \"Create test in the same source root?\", \"No Test Roots Found\", Messages.getQuestionIcon()) !=\n          Messages.OK) {\n        return;\n      }\n\n      propertiesComponent.setValue(CREATE_TEST_IN_THE_SAME_ROOT, String.valueOf(true));\n    }\n\n    final CreateTestDialog d = createTestDialog(project, srcModule, srcClass, srcPackage);\n    if (!d.showAndGet()) {\n      return;\n    }\n\n    CommandProcessor.getInstance().executeCommand(project, new Runnable() {\n      @Override\n      public void run() {\n        TestFramework framework = d.getSelectedTestFrameworkDescriptor();\n        TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());\n        generator.generateTest(project, d);\n      }\n    }, CodeInsightBundle.message(\"intention.create.test\"), this);\n  }",
    "right" : "@Override\n  public void invoke(final @NotNull Project project, Editor editor, @NotNull PsiElement element) throws IncorrectOperationException {\n    final Module srcModule = ModuleUtilCore.findModuleForPsiElement(element);\n    final PsiClass srcClass = getContainingClass(element);\n\n    if (srcClass == null) return;\n\n    PsiDirectory srcDir = element.getContainingFile().getContainingDirectory();\n    PsiPackage srcPackage = JavaDirectoryService.getInstance().getPackage(srcDir);\n\n    final PropertiesComponent propertiesComponent = PropertiesComponent.getInstance();\n    final HashSet<VirtualFile> testFolders = new HashSet<VirtualFile>();\n    checkForTestRoots(srcModule, testFolders);\n    if (testFolders.isEmpty() && !propertiesComponent.getBoolean(CREATE_TEST_IN_THE_SAME_ROOT, false)) {\n      if (Messages.showOkCancelDialog(project, \"Create test in the same source root?\", \"No Test Roots Found\", Messages.getQuestionIcon()) !=\n          Messages.OK) {\n        return;\n      }\n\n      propertiesComponent.setValue(CREATE_TEST_IN_THE_SAME_ROOT, String.valueOf(true));\n    }\n\n    final CreateTestDialog d = createTestDialog(project, srcModule, srcClass, srcPackage);\n    if (!d.showAndGet()) {\n      return;\n    }\n\n    CommandProcessor.getInstance().executeCommand(project, new Runnable() {\n      @Override\n      public void run() {\n        TestFramework framework = d.getSelectedTestFrameworkDescriptor();\n        TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());\n        generator.generateTest(project, d);\n      }\n    }, CodeInsightBundle.message(\"intention.create.test\"), this);\n  }",
    "info" : "MethodDeclaration[3107-4734]:MethodDeclaration[3107-4734]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[4407-4664]:MethodDeclaration[4407-4664]"
  }, {
    "left" : "protected project Project, srcModule Module, srcClass PsiClass, srcPackage PsiPackage) : CreateTestDialog",
    "right" : "protected project Project, srcModule Module, srcClass PsiClass, srcPackage PsiPackage) : CreateTestDialog",
    "info" : "MethodDeclaration[4738-4950]:MethodDeclaration[4738-4950]"
  }, {
    "left" : "protected srcModule Module, testFolders Set<VirtualFile>) : void",
    "right" : "protected srcModule Module, testFolders Set<VirtualFile>) : void",
    "info" : "MethodDeclaration[4954-5117]:MethodDeclaration[4954-5569]"
  }, {
    "left" : "@Nullable\n  private static PsiClass getContainingClass(PsiElement element) {\n    final PsiClass psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class, false);\n    if (psiClass == null) {\n      final PsiFile containingFile = element.getContainingFile();\n      if (containingFile instanceof PsiClassOwner){\n        final PsiClass[] classes = ((PsiClassOwner)containingFile).getClasses();\n        if (classes.length == 1) {\n          return classes[0];\n        }\n      }\n    }\n    return psiClass;\n  }",
    "right" : "@Nullable\n  private static PsiClass getContainingClass(PsiElement element) {\n    final PsiClass psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class, false);\n    if (psiClass == null) {\n      final PsiFile containingFile = element.getContainingFile();\n      if (containingFile instanceof PsiClassOwner){\n        final PsiClass[] classes = ((PsiClassOwner)containingFile).getClasses();\n        if (classes.length == 1) {\n          return classes[0];\n        }\n      }\n    }\n    return psiClass;\n  }",
    "info" : "MethodDeclaration[5737-6244]:MethodDeclaration[5573-6080]"
  }, {
    "left" : "public ) : boolean",
    "right" : "public ) : boolean",
    "info" : "MethodDeclaration[6248-6307]:MethodDeclaration[6084-6143]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1616-1622]:Modifier[1616-1622]"
  }, {
    "left" : "PsiElementBaseIntentionAction",
    "right" : "PsiElementBaseIntentionAction",
    "info" : "SimpleType[1654-1683]:SimpleType[1654-1683]"
  }, {
    "left" : "@NotNull",
    "right" : "@NotNull",
    "info" : "MarkerAnnotation[1783-1791]:MarkerAnnotation[1783-1791]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1794-1800]:Modifier[1794-1800]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[1801-1807]:SimpleType[1801-1807]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1818-1886]:Block[1818-1886]"
  }, {
    "left" : "return CodeInsightBundle.message(\"intention.create.test\");",
    "right" : "return CodeInsightBundle.message(\"intention.create.test\");",
    "info" : "ReturnStatement[1824-1882]:ReturnStatement[1824-1882]"
  }, {
    "left" : "@NotNull",
    "right" : "@NotNull",
    "info" : "MarkerAnnotation[1890-1898]:MarkerAnnotation[1890-1898]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1901-1907]:Modifier[1901-1907]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[1908-1914]:SimpleType[1908-1914]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1931-1958]:Block[1931-1958]"
  }, {
    "left" : "return getText();",
    "right" : "return getText();",
    "info" : "ReturnStatement[1937-1954]:ReturnStatement[1937-1954]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1962-1968]:Modifier[1962-1968]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[1969-1976]:PrimitiveType[1969-1976]"
  }, {
    "left" : "@NotNull Project project",
    "right" : "@NotNull Project project",
    "info" : "SingleVariableDeclaration[1989-2013]:SingleVariableDeclaration[1989-2013]"
  }, {
    "left" : "Editor editor",
    "right" : "Editor editor",
    "info" : "SingleVariableDeclaration[2015-2028]:SingleVariableDeclaration[2015-2028]"
  }, {
    "left" : "@NotNull PsiElement element",
    "right" : "@NotNull PsiElement element",
    "info" : "SingleVariableDeclaration[2030-2057]:SingleVariableDeclaration[2030-2057]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2059-2558]:Block[2059-2558]"
  }, {
    "left" : "if (!isAvailableForElement(element))",
    "right" : "if (!isAvailableForElement(element))",
    "info" : "IfStatement[2065-2115]:IfStatement[2065-2115]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2102-2115]:ReturnStatement[2102-2115]"
  }, {
    "left" : "PsiClass psiClass = getContainingClass(element);",
    "right" : "PsiClass psiClass = getContainingClass(element);",
    "info" : "VariableDeclarationStatement[2121-2169]:VariableDeclarationStatement[2121-2169]"
  }, {
    "left" : "assert psiClass != null;",
    "right" : "assert psiClass != null;",
    "info" : "AssertStatement[2175-2199]:AssertStatement[2175-2199]"
  }, {
    "left" : "PsiElement leftBrace = psiClass.getLBrace();",
    "right" : "PsiElement leftBrace = psiClass.getLBrace();",
    "info" : "VariableDeclarationStatement[2204-2248]:VariableDeclarationStatement[2204-2248]"
  }, {
    "left" : "if (leftBrace == null)",
    "right" : "if (leftBrace == null)",
    "info" : "IfStatement[2253-2289]:IfStatement[2253-2289]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2276-2289]:ReturnStatement[2276-2289]"
  }, {
    "left" : "if (element.getTextOffset() >= leftBrace.getTextOffset())",
    "right" : "if (element.getTextOffset() >= leftBrace.getTextOffset())",
    "info" : "IfStatement[2294-2365]:IfStatement[2294-2365]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2352-2365]:ReturnStatement[2352-2365]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[2542-2554]:ReturnStatement[2542-2554]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2562-2568]:Modifier[2562-2568]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2569-2575]:Modifier[2569-2575]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[2576-2583]:PrimitiveType[2576-2583]"
  }, {
    "left" : "PsiElement element",
    "right" : "PsiElement element",
    "info" : "SingleVariableDeclaration[2606-2624]:SingleVariableDeclaration[2606-2624]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2626-3103]:Block[2626-3103]"
  }, {
    "left" : "if (Extensions.getExtensions(TestFramework.EXTENSION_NAME).length == 0)",
    "right" : "if (Extensions.getExtensions(TestFramework.EXTENSION_NAME).length == 0)",
    "info" : "IfStatement[2632-2717]:IfStatement[2632-2717]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2704-2717]:ReturnStatement[2704-2717]"
  }, {
    "left" : "if (element == null)",
    "right" : "if (element == null)",
    "info" : "IfStatement[2723-2757]:IfStatement[2723-2757]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2744-2757]:ReturnStatement[2744-2757]"
  }, {
    "left" : "PsiClass psiClass = getContainingClass(element);",
    "right" : "PsiClass psiClass = getContainingClass(element);",
    "info" : "VariableDeclarationStatement[2763-2811]:VariableDeclarationStatement[2763-2811]"
  }, {
    "left" : "if (psiClass == null)",
    "right" : "if (psiClass == null)",
    "info" : "IfStatement[2817-2852]:IfStatement[2817-2852]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2839-2852]:ReturnStatement[2839-2852]"
  }, {
    "left" : "Module srcModule = ModuleUtilCore.findModuleForPsiElement(psiClass);",
    "right" : "Module srcModule = ModuleUtilCore.findModuleForPsiElement(psiClass);",
    "info" : "VariableDeclarationStatement[2858-2926]:VariableDeclarationStatement[2858-2926]"
  }, {
    "left" : "if (srcModule == null)",
    "right" : "if (srcModule == null)",
    "info" : "IfStatement[2931-2967]:IfStatement[2931-2967]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[2954-2967]:ReturnStatement[2954-2967]"
  }, {
    "left" : "if (psiClass.isAnnotationType() ||\n        psiClass instanceof PsiAnonymousClass)",
    "right" : "if (psiClass.isAnnotationType() ||\n        psiClass instanceof PsiAnonymousClass)",
    "info" : "IfStatement[2973-3082]:IfStatement[2973-3082]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3055-3082]:Block[3055-3082]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[3063-3076]:ReturnStatement[3063-3076]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[3087-3099]:ReturnStatement[3087-3099]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[3107-3116]:MarkerAnnotation[3107-3116]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[3119-3125]:Modifier[3119-3125]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3126-3130]:PrimitiveType[3126-3130]"
  }, {
    "left" : "final @NotNull Project project",
    "right" : "final @NotNull Project project",
    "info" : "SingleVariableDeclaration[3138-3168]:SingleVariableDeclaration[3138-3168]"
  }, {
    "left" : "Editor editor",
    "right" : "Editor editor",
    "info" : "SingleVariableDeclaration[3170-3183]:SingleVariableDeclaration[3170-3183]"
  }, {
    "left" : "@NotNull PsiElement element",
    "right" : "@NotNull PsiElement element",
    "info" : "SingleVariableDeclaration[3185-3212]:SingleVariableDeclaration[3185-3212]"
  }, {
    "left" : "IncorrectOperationException",
    "right" : "IncorrectOperationException",
    "info" : "SimpleType[3221-3248]:SimpleType[3221-3248]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3249-4734]:Block[3249-4734]"
  }, {
    "left" : "final Module srcModule = ModuleUtilCore.findModuleForPsiElement(element);",
    "right" : "final Module srcModule = ModuleUtilCore.findModuleForPsiElement(element);",
    "info" : "VariableDeclarationStatement[3255-3328]:VariableDeclarationStatement[3255-3328]"
  }, {
    "left" : "final PsiClass srcClass = getContainingClass(element);",
    "right" : "final PsiClass srcClass = getContainingClass(element);",
    "info" : "VariableDeclarationStatement[3333-3387]:VariableDeclarationStatement[3333-3387]"
  }, {
    "left" : "if (srcClass == null)",
    "right" : "if (srcClass == null)",
    "info" : "IfStatement[3393-3422]:IfStatement[3393-3422]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[3415-3422]:ReturnStatement[3415-3422]"
  }, {
    "left" : "PsiDirectory srcDir = element.getContainingFile().getContainingDirectory();",
    "right" : "PsiDirectory srcDir = element.getContainingFile().getContainingDirectory();",
    "info" : "VariableDeclarationStatement[3428-3503]:VariableDeclarationStatement[3428-3503]"
  }, {
    "left" : "PsiPackage srcPackage = JavaDirectoryService.getInstance().getPackage(srcDir);",
    "right" : "PsiPackage srcPackage = JavaDirectoryService.getInstance().getPackage(srcDir);",
    "info" : "VariableDeclarationStatement[3508-3586]:VariableDeclarationStatement[3508-3586]"
  }, {
    "left" : "final PropertiesComponent propertiesComponent = PropertiesComponent.getInstance();",
    "right" : "final PropertiesComponent propertiesComponent = PropertiesComponent.getInstance();",
    "info" : "VariableDeclarationStatement[3592-3674]:VariableDeclarationStatement[3592-3674]"
  }, {
    "left" : "final HashSet<VirtualFile> testFolders = new HashSet<VirtualFile>();",
    "right" : "final HashSet<VirtualFile> testFolders = new HashSet<VirtualFile>();",
    "info" : "VariableDeclarationStatement[3679-3747]:VariableDeclarationStatement[3679-3747]"
  }, {
    "left" : "checkForTestRoots(srcModule, testFolders);",
    "right" : "checkForTestRoots(srcModule, testFolders);",
    "info" : "ExpressionStatement[3752-3794]:ExpressionStatement[3752-3794]"
  }, {
    "left" : "if (testFolders.isEmpty() && !propertiesComponent.getBoolean(CREATE_TEST_IN_THE_SAME_ROOT, false))",
    "right" : "if (testFolders.isEmpty() && !propertiesComponent.getBoolean(CREATE_TEST_IN_THE_SAME_ROOT, false))",
    "info" : "IfStatement[3799-4184]:IfStatement[3799-4184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3898-4184]:Block[3898-4184]"
  }, {
    "left" : "if (Messages.showOkCancelDialog(project, \"Create test in the same source root?\", \"No Test Roots Found\", Messages.getQuestionIcon()) !=\n          Messages.OK)",
    "right" : "if (Messages.showOkCancelDialog(project, \"Create test in the same source root?\", \"No Test Roots Found\", Messages.getQuestionIcon()) !=\n          Messages.OK)",
    "info" : "IfStatement[3906-4089]:IfStatement[3906-4089]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4064-4089]:Block[4064-4089]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4074-4081]:ReturnStatement[4074-4081]"
  }, {
    "left" : "propertiesComponent.setValue(CREATE_TEST_IN_THE_SAME_ROOT, String.valueOf(true));",
    "right" : "propertiesComponent.setValue(CREATE_TEST_IN_THE_SAME_ROOT, String.valueOf(true));",
    "info" : "ExpressionStatement[4097-4178]:ExpressionStatement[4097-4178]"
  }, {
    "left" : "final CreateTestDialog d = createTestDialog(project, srcModule, srcClass, srcPackage);",
    "right" : "final CreateTestDialog d = createTestDialog(project, srcModule, srcClass, srcPackage);",
    "info" : "VariableDeclarationStatement[4190-4276]:VariableDeclarationStatement[4190-4276]"
  }, {
    "left" : "if (!d.showAndGet())",
    "right" : "if (!d.showAndGet())",
    "info" : "IfStatement[4281-4323]:IfStatement[4281-4323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4302-4323]:Block[4302-4323]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[4310-4317]:ReturnStatement[4310-4317]"
  }, {
    "left" : "CommandProcessor.getInstance().executeCommand(project, new Runnable() {\n      @Override\n      public void run() {\n        TestFramework framework = d.getSelectedTestFrameworkDescriptor();\n        TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());\n        generator.generateTest(project, d);\n      }\n    }, CodeInsightBundle.message(\"intention.create.test\"), this);",
    "right" : "CommandProcessor.getInstance().executeCommand(project, new Runnable() {\n      @Override\n      public void run() {\n        TestFramework framework = d.getSelectedTestFrameworkDescriptor();\n        TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());\n        generator.generateTest(project, d);\n      }\n    }, CodeInsightBundle.message(\"intention.create.test\"), this);",
    "info" : "ExpressionStatement[4329-4730]:ExpressionStatement[4329-4730]"
  }, {
    "left" : "@Override",
    "right" : "@Override",
    "info" : "MarkerAnnotation[4407-4416]:MarkerAnnotation[4407-4416]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[4423-4429]:Modifier[4423-4429]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4430-4434]:PrimitiveType[4430-4434]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4441-4664]:Block[4441-4664]"
  }, {
    "left" : "TestFramework framework = d.getSelectedTestFrameworkDescriptor();",
    "right" : "TestFramework framework = d.getSelectedTestFrameworkDescriptor();",
    "info" : "VariableDeclarationStatement[4451-4516]:VariableDeclarationStatement[4451-4516]"
  }, {
    "left" : "TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());",
    "right" : "TestGenerator generator = TestGenerators.INSTANCE.forLanguage(framework.getLanguage());",
    "info" : "VariableDeclarationStatement[4525-4612]:VariableDeclarationStatement[4525-4612]"
  }, {
    "left" : "generator.generateTest(project, d);",
    "right" : "generator.generateTest(project, d);",
    "info" : "ExpressionStatement[4621-4656]:ExpressionStatement[4621-4656]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4738-4747]:Modifier[4738-4747]"
  }, {
    "left" : "CreateTestDialog",
    "right" : "CreateTestDialog",
    "info" : "SimpleType[4748-4764]:SimpleType[4748-4764]"
  }, {
    "left" : "Project project",
    "right" : "Project project",
    "info" : "SingleVariableDeclaration[4782-4797]:SingleVariableDeclaration[4782-4797]"
  }, {
    "left" : "Module srcModule",
    "right" : "Module srcModule",
    "info" : "SingleVariableDeclaration[4799-4815]:SingleVariableDeclaration[4799-4815]"
  }, {
    "left" : "PsiClass srcClass",
    "right" : "PsiClass srcClass",
    "info" : "SingleVariableDeclaration[4817-4834]:SingleVariableDeclaration[4817-4834]"
  }, {
    "left" : "PsiPackage srcPackage",
    "right" : "PsiPackage srcPackage",
    "info" : "SingleVariableDeclaration[4836-4857]:SingleVariableDeclaration[4836-4857]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4859-4950]:Block[4859-4950]"
  }, {
    "left" : "return new CreateTestDialog(project, getText(), srcClass, srcPackage, srcModule);",
    "right" : "return new CreateTestDialog(project, getText(), srcClass, srcPackage, srcModule);",
    "info" : "ReturnStatement[4865-4946]:ReturnStatement[4865-4946]"
  }, {
    "left" : "protected",
    "right" : "protected",
    "info" : "Modifier[4954-4963]:Modifier[4954-4963]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4964-4970]:Modifier[4964-4970]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[4971-4975]:PrimitiveType[4971-4975]"
  }, {
    "left" : "Module srcModule",
    "right" : "Module srcModule",
    "info" : "SingleVariableDeclaration[4994-5010]:SingleVariableDeclaration[4994-5010]"
  }, {
    "left" : "Set<VirtualFile> testFolders",
    "right" : "Set<VirtualFile> testFolders",
    "info" : "SingleVariableDeclaration[5012-5040]:SingleVariableDeclaration[5012-5040]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5042-5117]:Block[5042-5569]"
  }, {
    "left" : "testFolders.addAll(ModuleRootManager.getInstance(srcModule).getSourceRoots(JavaSourceRootType.TEST_SOURCE));",
    "right" : "testFolders.addAll(ModuleRootManager.getInstance(srcModule).getSourceRoots(JavaSourceRootType.TEST_SOURCE));",
    "info" : "ExpressionStatement[5347-5455]:ExpressionStatement[5048-5156]"
  }, {
    "left" : "!testFolders.isEmpty()",
    "right" : "!testFolders.isEmpty()",
    "info" : "PrefixExpression[5475-5497]:PrefixExpression[5202-5224]"
  }, {
    "left" : "final HashSet<Module> modules = new HashSet<Module>();",
    "right" : "final HashSet<Module> modules = new HashSet<Module>();",
    "info" : "VariableDeclarationStatement[5512-5566]:VariableDeclarationStatement[5293-5347]"
  }, {
    "left" : "ModuleUtilCore.collectModulesDependsOn(srcModule, modules);",
    "right" : "ModuleUtilCore.collectModulesDependsOn(srcModule, modules);",
    "info" : "ExpressionStatement[5571-5630]:ExpressionStatement[5352-5411]"
  }, {
    "left" : "Module module",
    "right" : "Module module",
    "info" : "SingleVariableDeclaration[5640-5653]:SingleVariableDeclaration[5421-5434]"
  }, {
    "left" : "@Nullable",
    "right" : "@Nullable",
    "info" : "MarkerAnnotation[5737-5746]:MarkerAnnotation[5573-5582]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[5749-5756]:Modifier[5585-5592]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5757-5763]:Modifier[5593-5599]"
  }, {
    "left" : "PsiClass",
    "right" : "PsiClass",
    "info" : "SimpleType[5764-5772]:SimpleType[5600-5608]"
  }, {
    "left" : "PsiElement element",
    "right" : "PsiElement element",
    "info" : "SingleVariableDeclaration[5792-5810]:SingleVariableDeclaration[5628-5646]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5812-6244]:Block[5648-6080]"
  }, {
    "left" : "final PsiClass psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class, false);",
    "right" : "final PsiClass psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class, false);",
    "info" : "VariableDeclarationStatement[5818-5904]:VariableDeclarationStatement[5654-5740]"
  }, {
    "left" : "if (psiClass == null)",
    "right" : "if (psiClass == null)",
    "info" : "IfStatement[5909-6219]:IfStatement[5745-6055]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5931-6219]:Block[5767-6055]"
  }, {
    "left" : "final PsiFile containingFile = element.getContainingFile();",
    "right" : "final PsiFile containingFile = element.getContainingFile();",
    "info" : "VariableDeclarationStatement[5939-5998]:VariableDeclarationStatement[5775-5834]"
  }, {
    "left" : "if (containingFile instanceof PsiClassOwner)",
    "right" : "if (containingFile instanceof PsiClassOwner)",
    "info" : "IfStatement[6005-6213]:IfStatement[5841-6049]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6049-6213]:Block[5885-6049]"
  }, {
    "left" : "final PsiClass[] classes = ((PsiClassOwner)containingFile).getClasses();",
    "right" : "final PsiClass[] classes = ((PsiClassOwner)containingFile).getClasses();",
    "info" : "VariableDeclarationStatement[6059-6131]:VariableDeclarationStatement[5895-5967]"
  }, {
    "left" : "if (classes.length == 1)",
    "right" : "if (classes.length == 1)",
    "info" : "IfStatement[6140-6205]:IfStatement[5976-6041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6165-6205]:Block[6001-6041]"
  }, {
    "left" : "return classes[0];",
    "right" : "return classes[0];",
    "info" : "ReturnStatement[6177-6195]:ReturnStatement[6013-6031]"
  }, {
    "left" : "return psiClass;",
    "right" : "return psiClass;",
    "info" : "ReturnStatement[6224-6240]:ReturnStatement[6060-6076]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[6248-6254]:Modifier[6084-6090]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[6255-6262]:PrimitiveType[6091-6098]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6284-6307]:Block[6120-6143]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[6290-6303]:ReturnStatement[6126-6139]"
  } ]
}