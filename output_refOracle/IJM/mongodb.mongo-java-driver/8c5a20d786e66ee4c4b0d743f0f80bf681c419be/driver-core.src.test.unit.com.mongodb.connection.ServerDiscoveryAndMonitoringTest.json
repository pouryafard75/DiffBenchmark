{
  "matchedElements" : [
 {
    "left" : "",
    "right" : "",
    "info" : "TypeDeclaration[1829-10034]:TypeDeclaration[1822-10027]"
  }, {
    "left" : "",
    "right" : "",
    "info" : "FieldDeclaration[1911-1999]:FieldDeclaration[1904-1992]"
  }, {
    "left" : "private final BsonDocument definition;",
    "right" : "private final BsonDocument definition;",
    "info" : "FieldDeclaration[2004-2042]:FieldDeclaration[1997-2035]"
  }, {
    "left" : "private final BaseCluster cluster;",
    "right" : "private final BaseCluster cluster;",
    "info" : "FieldDeclaration[2047-2081]:FieldDeclaration[2040-2074]"
  }, {
    "left" : "public ServerDiscoveryAndMonitoringTest(final String description, final BsonDocument definition) {\n        this.definition = definition;\n        cluster = getCluster(definition.getString(\"uri\").getValue());\n    }",
    "right" : "public ServerDiscoveryAndMonitoringTest(final String description, final BsonDocument definition) {\n        this.definition = definition;\n        cluster = getCluster(definition.getString(\"uri\").getValue());\n    }",
    "info" : "MethodDeclaration[2087-2299]:MethodDeclaration[2080-2292]"
  }, {
    "left" : "public ) : void",
    "right" : "public ) : void",
    "info" : "MethodDeclaration[2305-2794]:MethodDeclaration[2298-2787]"
  }, {
    "left" : "@Parameterized.Parameters(name = \"{0}\")\n    public static Collection<Object[]> data() throws URISyntaxException, IOException {\n        List<Object[]> data = new ArrayList<Object[]>();\n        for (File file : JsonPoweredTestHelper.getTestFiles(\"/server-discovery-and-monitoring\")) {\n            BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);\n            data.add(new Object[]{testDocument.getString(\"description\").getValue(), testDocument});\n        }\n        return data;\n    }",
    "right" : "@Parameterized.Parameters(name = \"{0}\")\n    public static Collection<Object[]> data() throws URISyntaxException, IOException {\n        List<Object[]> data = new ArrayList<Object[]>();\n        for (File file : JsonPoweredTestHelper.getTestFiles(\"/server-discovery-and-monitoring\")) {\n            BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);\n            data.add(new Object[]{testDocument.getString(\"description\").getValue(), testDocument});\n        }\n        return data;\n    }",
    "info" : "MethodDeclaration[2800-3304]:MethodDeclaration[2793-3297]"
  }, {
    "left" : "private void assertServers(final BsonDocument servers) {\n        if (servers.size() != cluster.getCurrentDescription().getAll().size()) {\n            fail(\"Cluster description contains servers that are not part of the expected outcome\");\n        }\n\n        for (String serverName : servers.keySet()) {\n            assertServer(serverName, servers.getDocument(serverName));\n        }\n    }",
    "right" : "private void assertServers(final BsonDocument servers) {\n        if (servers.size() != cluster.getCurrentDescription().getAll().size()) {\n            fail(\"Cluster description contains servers that are not part of the expected outcome\");\n        }\n\n        for (String serverName : servers.keySet()) {\n            assertServer(serverName, servers.getDocument(serverName));\n        }\n    }",
    "info" : "MethodDeclaration[3310-3698]:MethodDeclaration[3303-3691]"
  }, {
    "left" : "private void assertServer(final String serverName, final BsonDocument expectedServerDescriptionDocument) {\n        ServerDescription serverDescription = getServerDescription(serverName);\n\n        assertNotNull(serverDescription);\n        assertEquals(getServerType(expectedServerDescriptionDocument.getString(\"type\").getValue()), serverDescription.getType());\n\n        if (expectedServerDescriptionDocument.isString(\"setName\")) {\n            assertNotNull(serverDescription.getSetName());\n            assertEquals(serverDescription.getSetName(), expectedServerDescriptionDocument.getString(\"setName\").getValue());\n        }\n    }",
    "right" : "private void assertServer(final String serverName, final BsonDocument expectedServerDescriptionDocument) {\n        ServerDescription serverDescription = getServerDescription(serverName);\n\n        assertNotNull(serverDescription);\n        assertEquals(getServerType(expectedServerDescriptionDocument.getString(\"type\").getValue()), serverDescription.getType());\n\n        if (expectedServerDescriptionDocument.isString(\"setName\")) {\n            assertNotNull(serverDescription.getSetName());\n            assertEquals(serverDescription.getSetName(), expectedServerDescriptionDocument.getString(\"setName\").getValue());\n        }\n    }",
    "info" : "MethodDeclaration[3704-4333]:MethodDeclaration[3697-4326]"
  }, {
    "left" : "private serverName String) : ServerDescription",
    "right" : "private serverName String) : ServerDescription",
    "info" : "MethodDeclaration[4339-4747]:MethodDeclaration[4332-4740]"
  }, {
    "left" : "private ServerType getServerType(final String serverTypeString) {\n        ServerType serverType;\n        if (serverTypeString.equals(\"RSPrimary\")) {\n            serverType = ServerType.REPLICA_SET_PRIMARY;\n        } else if (serverTypeString.equals(\"RSSecondary\")) {\n            serverType = ServerType.REPLICA_SET_SECONDARY;\n        } else if (serverTypeString.equals(\"RSArbiter\")) {\n            serverType = ServerType.REPLICA_SET_ARBITER;\n        } else if (serverTypeString.equals(\"RSGhost\")) {\n            serverType = ServerType.REPLICA_SET_GHOST;\n        } else if (serverTypeString.equals(\"RSOther\")) {\n            serverType = ServerType.REPLICA_SET_OTHER;\n        } else if (serverTypeString.equals(\"Mongos\")) {\n            serverType = ServerType.SHARD_ROUTER;\n        } else if (serverTypeString.equals(\"Standalone\")) {\n            serverType = ServerType.STANDALONE;\n        } else if (serverTypeString.equals(\"PossiblePrimary\")) {\n            serverType = ServerType.UNKNOWN;\n        } else if (serverTypeString.equals(\"Unknown\")) {\n            serverType = ServerType.UNKNOWN;\n        } else {\n            throw new UnsupportedOperationException(\"No handler for server type \" + serverTypeString);\n        }\n        return serverType;\n    }",
    "right" : "private ServerType getServerType(final String serverTypeString) {\n        ServerType serverType;\n        if (serverTypeString.equals(\"RSPrimary\")) {\n            serverType = ServerType.REPLICA_SET_PRIMARY;\n        } else if (serverTypeString.equals(\"RSSecondary\")) {\n            serverType = ServerType.REPLICA_SET_SECONDARY;\n        } else if (serverTypeString.equals(\"RSArbiter\")) {\n            serverType = ServerType.REPLICA_SET_ARBITER;\n        } else if (serverTypeString.equals(\"RSGhost\")) {\n            serverType = ServerType.REPLICA_SET_GHOST;\n        } else if (serverTypeString.equals(\"RSOther\")) {\n            serverType = ServerType.REPLICA_SET_OTHER;\n        } else if (serverTypeString.equals(\"Mongos\")) {\n            serverType = ServerType.SHARD_ROUTER;\n        } else if (serverTypeString.equals(\"Standalone\")) {\n            serverType = ServerType.STANDALONE;\n        } else if (serverTypeString.equals(\"PossiblePrimary\")) {\n            serverType = ServerType.UNKNOWN;\n        } else if (serverTypeString.equals(\"Unknown\")) {\n            serverType = ServerType.UNKNOWN;\n        } else {\n            throw new UnsupportedOperationException(\"No handler for server type \" + serverTypeString);\n        }\n        return serverType;\n    }",
    "info" : "MethodDeclaration[4753-6007]:MethodDeclaration[4746-6000]"
  }, {
    "left" : "private void assertTopologyType(final String topologyType) {\n        if (topologyType.equals(\"Single\")) {\n            assertEquals(SingleServerCluster.class, cluster.getClass());\n        } else if (topologyType.equals(\"ReplicaSetWithPrimary\")) {\n            assertEquals(MultiServerCluster.class, cluster.getClass());\n            assertEquals(REPLICA_SET, cluster.getCurrentDescription().getType());\n            assertEquals(1, cluster.getCurrentDescription().getPrimaries().size());\n        } else if (topologyType.equals(\"ReplicaSetNoPrimary\")) {\n            assertEquals(MultiServerCluster.class, cluster.getClass());\n            assertEquals(REPLICA_SET, cluster.getCurrentDescription().getType());\n            assertEquals(0, cluster.getCurrentDescription().getPrimaries().size());\n        } else if (topologyType.equals(\"Sharded\")) {\n            assertEquals(MultiServerCluster.class, cluster.getClass());\n            assertEquals(SHARDED, cluster.getCurrentDescription().getType());\n        } else if (topologyType.equals(\"Unknown\")) {\n            assertEquals(UNKNOWN, cluster.getCurrentDescription().getType());\n        } else {\n            throw new UnsupportedOperationException(\"No handler for topology type \" + topologyType);\n        }\n    }",
    "right" : "private void assertTopologyType(final String topologyType) {\n        if (topologyType.equals(\"Single\")) {\n            assertEquals(SingleServerCluster.class, cluster.getClass());\n        } else if (topologyType.equals(\"ReplicaSetWithPrimary\")) {\n            assertEquals(MultiServerCluster.class, cluster.getClass());\n            assertEquals(REPLICA_SET, cluster.getCurrentDescription().getType());\n            assertEquals(1, cluster.getCurrentDescription().getPrimaries().size());\n        } else if (topologyType.equals(\"ReplicaSetNoPrimary\")) {\n            assertEquals(MultiServerCluster.class, cluster.getClass());\n            assertEquals(REPLICA_SET, cluster.getCurrentDescription().getType());\n            assertEquals(0, cluster.getCurrentDescription().getPrimaries().size());\n        } else if (topologyType.equals(\"Sharded\")) {\n            assertEquals(MultiServerCluster.class, cluster.getClass());\n            assertEquals(SHARDED, cluster.getCurrentDescription().getType());\n        } else if (topologyType.equals(\"Unknown\")) {\n            assertEquals(UNKNOWN, cluster.getCurrentDescription().getType());\n        } else {\n            throw new UnsupportedOperationException(\"No handler for topology type \" + topologyType);\n        }\n    }",
    "info" : "MethodDeclaration[6013-7267]:MethodDeclaration[6006-7260]"
  }, {
    "left" : "private response BsonArray) : void",
    "right" : "private response BsonArray) : void",
    "info" : "MethodDeclaration[7273-8439]:MethodDeclaration[7266-8432]"
  }, {
    "left" : "BaseCluster getCluster(final String uri) {\n        ConnectionString connectionString = new ConnectionString(uri);\n\n        ClusterSettings settings = ClusterSettings.builder()\n                                                  .serverSelectionTimeout(1, TimeUnit.SECONDS)\n                                                  .hosts(getHosts(connectionString))\n                                                  .mode(getMode(connectionString))\n                                                  .requiredReplicaSetName(connectionString.getRequiredReplicaSetName())\n                                                  .build();\n\n        if (settings.getMode() == ClusterConnectionMode.SINGLE) {\n            return new SingleServerCluster(new ClusterId(), settings, factory, new NoOpClusterListener());\n        } else {\n            return new MultiServerCluster(new ClusterId(), settings, factory, new NoOpClusterListener());\n        }\n    }",
    "right" : "BaseCluster getCluster(final String uri) {\n        ConnectionString connectionString = new ConnectionString(uri);\n\n        ClusterSettings settings = ClusterSettings.builder()\n                                                  .serverSelectionTimeout(1, TimeUnit.SECONDS)\n                                                  .hosts(getHosts(connectionString))\n                                                  .mode(getMode(connectionString))\n                                                  .requiredReplicaSetName(connectionString.getRequiredReplicaSetName())\n                                                  .build();\n\n        if (settings.getMode() == ClusterConnectionMode.SINGLE) {\n            return new SingleServerCluster(new ClusterId(), settings, factory, new NoOpClusterListener());\n        } else {\n            return new MultiServerCluster(new ClusterId(), settings, factory, new NoOpClusterListener());\n        }\n    }",
    "info" : "MethodDeclaration[8445-9376]:MethodDeclaration[8438-9369]"
  }, {
    "left" : "private List<ServerAddress> getHosts(final ConnectionString connectionString) {\n        List<ServerAddress> serverAddresses = new ArrayList<ServerAddress>();\n        for (String host : connectionString.getHosts()) {\n            serverAddresses.add(new ServerAddress(host));\n        }\n        return serverAddresses;\n    }",
    "right" : "private List<ServerAddress> getHosts(final ConnectionString connectionString) {\n        List<ServerAddress> serverAddresses = new ArrayList<ServerAddress>();\n        for (String host : connectionString.getHosts()) {\n            serverAddresses.add(new ServerAddress(host));\n        }\n        return serverAddresses;\n    }",
    "info" : "MethodDeclaration[9382-9703]:MethodDeclaration[9375-9696]"
  }, {
    "left" : "private ClusterConnectionMode getMode(final ConnectionString connectionString) {\n        if (connectionString.getHosts().size() > 1 || connectionString.getRequiredReplicaSetName() != null) {\n            return ClusterConnectionMode.MULTIPLE;\n        } else {\n            return ClusterConnectionMode.SINGLE;\n        }\n    }",
    "right" : "private ClusterConnectionMode getMode(final ConnectionString connectionString) {\n        if (connectionString.getHosts().size() > 1 || connectionString.getRequiredReplicaSetName() != null) {\n            return ClusterConnectionMode.MULTIPLE;\n        } else {\n            return ClusterConnectionMode.SINGLE;\n        }\n    }",
    "info" : "MethodDeclaration[9709-10032]:MethodDeclaration[9702-10025]"
  } ],
  "mappings" : [
 {
    "left" : "import com.mongodb.JsonPoweredTestHelper;",
    "right" : "import util.JsonPoweredTestHelper;",
    "info" : "ImportDeclaration[671-712]:ImportDeclaration[912-946]"
  }, {
    "left" : "@RunWith(Parameterized.class)",
    "right" : "@RunWith(Parameterized.class)",
    "info" : "SingleMemberAnnotation[1829-1858]:SingleMemberAnnotation[1822-1851]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1859-1865]:Modifier[1852-1858]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2087-2093]:Modifier[2080-2086]"
  }, {
    "left" : "final String description",
    "right" : "final String description",
    "info" : "SingleVariableDeclaration[2127-2151]:SingleVariableDeclaration[2120-2144]"
  }, {
    "left" : "final BsonDocument definition",
    "right" : "final BsonDocument definition",
    "info" : "SingleVariableDeclaration[2153-2182]:SingleVariableDeclaration[2146-2175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2184-2299]:Block[2177-2292]"
  }, {
    "left" : "this.definition = definition;",
    "right" : "this.definition = definition;",
    "info" : "ExpressionStatement[2194-2223]:ExpressionStatement[2187-2216]"
  }, {
    "left" : "cluster = getCluster(definition.getString(\"uri\").getValue());",
    "right" : "cluster = getCluster(definition.getString(\"uri\").getValue());",
    "info" : "ExpressionStatement[2232-2293]:ExpressionStatement[2225-2286]"
  }, {
    "left" : "@Test",
    "right" : "@Test",
    "info" : "MarkerAnnotation[2305-2310]:MarkerAnnotation[2298-2303]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2315-2321]:Modifier[2308-2314]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[2322-2326]:PrimitiveType[2315-2319]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2351-2794]:Block[2344-2787]"
  }, {
    "left" : "for (BsonValue phase : definition.getArray(\"phases\"))",
    "right" : "for (BsonValue phase : definition.getArray(\"phases\"))",
    "info" : "EnhancedForStatement[2361-2788]:EnhancedForStatement[2354-2781]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2415-2788]:Block[2408-2781]"
  }, {
    "left" : "for (BsonValue response : phase.asDocument().getArray(\"responses\"))",
    "right" : "for (BsonValue response : phase.asDocument().getArray(\"responses\"))",
    "info" : "EnhancedForStatement[2429-2563]:EnhancedForStatement[2422-2556]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2497-2563]:Block[2490-2556]"
  }, {
    "left" : "applyResponse(response.asArray());",
    "right" : "applyResponse(response.asArray());",
    "info" : "ExpressionStatement[2515-2549]:ExpressionStatement[2508-2542]"
  }, {
    "left" : "BsonDocument outcome = phase.asDocument().getDocument(\"outcome\");",
    "right" : "BsonDocument outcome = phase.asDocument().getDocument(\"outcome\");",
    "info" : "VariableDeclarationStatement[2576-2641]:VariableDeclarationStatement[2569-2634]"
  }, {
    "left" : "assertTopologyType(outcome.getString(\"topologyType\").getValue());",
    "right" : "assertTopologyType(outcome.getString(\"topologyType\").getValue());",
    "info" : "ExpressionStatement[2654-2719]:ExpressionStatement[2647-2712]"
  }, {
    "left" : "assertServers(outcome.getDocument(\"servers\"));",
    "right" : "assertServers(outcome.getDocument(\"servers\"));",
    "info" : "ExpressionStatement[2732-2778]:ExpressionStatement[2725-2771]"
  }, {
    "left" : "@Parameterized.Parameters(name = \"{0}\")",
    "right" : "@Parameterized.Parameters(name = \"{0}\")",
    "info" : "NormalAnnotation[2800-2839]:NormalAnnotation[2793-2832]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[2844-2850]:Modifier[2837-2843]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2851-2857]:Modifier[2844-2850]"
  }, {
    "left" : "Collection<Object[]>",
    "right" : "Collection<Object[]>",
    "info" : "ParameterizedType[2858-2878]:ParameterizedType[2851-2871]"
  }, {
    "left" : "URISyntaxException",
    "right" : "URISyntaxException",
    "info" : "SimpleType[2893-2911]:SimpleType[2886-2904]"
  }, {
    "left" : "IOException",
    "right" : "IOException",
    "info" : "SimpleType[2913-2924]:SimpleType[2906-2917]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2925-3304]:Block[2918-3297]"
  }, {
    "left" : "List<Object[]> data = new ArrayList<Object[]>();",
    "right" : "List<Object[]> data = new ArrayList<Object[]>();",
    "info" : "VariableDeclarationStatement[2935-2983]:VariableDeclarationStatement[2928-2976]"
  }, {
    "left" : "for (File file : JsonPoweredTestHelper.getTestFiles(\"/server-discovery-and-monitoring\"))",
    "right" : "for (File file : JsonPoweredTestHelper.getTestFiles(\"/server-discovery-and-monitoring\"))",
    "info" : "EnhancedForStatement[2992-3277]:EnhancedForStatement[2985-3270]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3081-3277]:Block[3074-3270]"
  }, {
    "left" : "BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);",
    "right" : "BsonDocument testDocument = JsonPoweredTestHelper.getTestDocument(file);",
    "info" : "VariableDeclarationStatement[3095-3167]:VariableDeclarationStatement[3088-3160]"
  }, {
    "left" : "data.add(new Object[]{testDocument.getString(\"description\").getValue(), testDocument});",
    "right" : "data.add(new Object[]{testDocument.getString(\"description\").getValue(), testDocument});",
    "info" : "ExpressionStatement[3180-3267]:ExpressionStatement[3173-3260]"
  }, {
    "left" : "return data;",
    "right" : "return data;",
    "info" : "ReturnStatement[3286-3298]:ReturnStatement[3279-3291]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3310-3317]:Modifier[3303-3310]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3318-3322]:PrimitiveType[3311-3315]"
  }, {
    "left" : "final BsonDocument servers",
    "right" : "final BsonDocument servers",
    "info" : "SingleVariableDeclaration[3337-3363]:SingleVariableDeclaration[3330-3356]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3365-3698]:Block[3358-3691]"
  }, {
    "left" : "if (servers.size() != cluster.getCurrentDescription().getAll().size())",
    "right" : "if (servers.size() != cluster.getCurrentDescription().getAll().size())",
    "info" : "IfStatement[3375-3557]:IfStatement[3368-3550]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3446-3557]:Block[3439-3550]"
  }, {
    "left" : "fail(\"Cluster description contains servers that are not part of the expected outcome\");",
    "right" : "fail(\"Cluster description contains servers that are not part of the expected outcome\");",
    "info" : "ExpressionStatement[3460-3547]:ExpressionStatement[3453-3540]"
  }, {
    "left" : "for (String serverName : servers.keySet())",
    "right" : "for (String serverName : servers.keySet())",
    "info" : "EnhancedForStatement[3567-3692]:EnhancedForStatement[3560-3685]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3610-3692]:Block[3603-3685]"
  }, {
    "left" : "assertServer(serverName, servers.getDocument(serverName));",
    "right" : "assertServer(serverName, servers.getDocument(serverName));",
    "info" : "ExpressionStatement[3624-3682]:ExpressionStatement[3617-3675]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[3704-3711]:Modifier[3697-3704]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[3712-3716]:PrimitiveType[3705-3709]"
  }, {
    "left" : "final String serverName",
    "right" : "final String serverName",
    "info" : "SingleVariableDeclaration[3730-3753]:SingleVariableDeclaration[3723-3746]"
  }, {
    "left" : "final BsonDocument expectedServerDescriptionDocument",
    "right" : "final BsonDocument expectedServerDescriptionDocument",
    "info" : "SingleVariableDeclaration[3755-3807]:SingleVariableDeclaration[3748-3800]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3809-4333]:Block[3802-4326]"
  }, {
    "left" : "ServerDescription serverDescription = getServerDescription(serverName);",
    "right" : "ServerDescription serverDescription = getServerDescription(serverName);",
    "info" : "VariableDeclarationStatement[3819-3890]:VariableDeclarationStatement[3812-3883]"
  }, {
    "left" : "assertNotNull(serverDescription);",
    "right" : "assertNotNull(serverDescription);",
    "info" : "ExpressionStatement[3900-3933]:ExpressionStatement[3893-3926]"
  }, {
    "left" : "assertEquals(getServerType(expectedServerDescriptionDocument.getString(\"type\").getValue()), serverDescription.getType());",
    "right" : "assertEquals(getServerType(expectedServerDescriptionDocument.getString(\"type\").getValue()), serverDescription.getType());",
    "info" : "ExpressionStatement[3942-4063]:ExpressionStatement[3935-4056]"
  }, {
    "left" : "if (expectedServerDescriptionDocument.isString(\"setName\"))",
    "right" : "if (expectedServerDescriptionDocument.isString(\"setName\"))",
    "info" : "IfStatement[4073-4327]:IfStatement[4066-4320]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4132-4327]:Block[4125-4320]"
  }, {
    "left" : "assertNotNull(serverDescription.getSetName());",
    "right" : "assertNotNull(serverDescription.getSetName());",
    "info" : "ExpressionStatement[4146-4192]:ExpressionStatement[4139-4185]"
  }, {
    "left" : "assertEquals(serverDescription.getSetName(), expectedServerDescriptionDocument.getString(\"setName\").getValue());",
    "right" : "assertEquals(serverDescription.getSetName(), expectedServerDescriptionDocument.getString(\"setName\").getValue());",
    "info" : "ExpressionStatement[4205-4317]:ExpressionStatement[4198-4310]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4339-4346]:Modifier[4332-4339]"
  }, {
    "left" : "ServerDescription",
    "right" : "ServerDescription",
    "info" : "SimpleType[4347-4364]:SimpleType[4340-4357]"
  }, {
    "left" : "final String serverName",
    "right" : "final String serverName",
    "info" : "SingleVariableDeclaration[4386-4409]:SingleVariableDeclaration[4379-4402]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4411-4747]:Block[4404-4740]"
  }, {
    "left" : "ServerDescription serverDescription  = null;",
    "right" : "ServerDescription serverDescription  = null;",
    "info" : "VariableDeclarationStatement[4421-4465]:VariableDeclarationStatement[4414-4458]"
  }, {
    "left" : "for (ServerDescription cur: cluster.getCurrentDescription().getAll())",
    "right" : "for (ServerDescription cur: cluster.getCurrentDescription().getAll())",
    "info" : "EnhancedForStatement[4474-4707]:EnhancedForStatement[4467-4700]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4544-4707]:Block[4537-4700]"
  }, {
    "left" : "if (cur.getAddress().equals(new ServerAddress(serverName)))",
    "right" : "if (cur.getAddress().equals(new ServerAddress(serverName)))",
    "info" : "IfStatement[4558-4697]:IfStatement[4551-4690]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4618-4697]:Block[4611-4690]"
  }, {
    "left" : "serverDescription = cur;",
    "right" : "serverDescription = cur;",
    "info" : "ExpressionStatement[4636-4660]:ExpressionStatement[4629-4653]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4677-4683]:BreakStatement[4670-4676]"
  }, {
    "left" : "return serverDescription;",
    "right" : "return serverDescription;",
    "info" : "ReturnStatement[4716-4741]:ReturnStatement[4709-4734]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[4753-4760]:Modifier[4746-4753]"
  }, {
    "left" : "ServerType",
    "right" : "ServerType",
    "info" : "SimpleType[4761-4771]:SimpleType[4754-4764]"
  }, {
    "left" : "final String serverTypeString",
    "right" : "final String serverTypeString",
    "info" : "SingleVariableDeclaration[4786-4815]:SingleVariableDeclaration[4779-4808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4817-6007]:Block[4810-6000]"
  }, {
    "left" : "ServerType serverType;",
    "right" : "ServerType serverType;",
    "info" : "VariableDeclarationStatement[4827-4849]:VariableDeclarationStatement[4820-4842]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSPrimary\"))",
    "right" : "if (serverTypeString.equals(\"RSPrimary\"))",
    "info" : "IfStatement[4858-5974]:IfStatement[4851-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4900-4968]:Block[4893-4961]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_PRIMARY;",
    "right" : "serverType = ServerType.REPLICA_SET_PRIMARY;",
    "info" : "ExpressionStatement[4914-4958]:ExpressionStatement[4907-4951]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSSecondary\"))",
    "right" : "if (serverTypeString.equals(\"RSSecondary\"))",
    "info" : "IfStatement[4974-5974]:IfStatement[4967-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5018-5088]:Block[5011-5081]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_SECONDARY;",
    "right" : "serverType = ServerType.REPLICA_SET_SECONDARY;",
    "info" : "ExpressionStatement[5032-5078]:ExpressionStatement[5025-5071]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSArbiter\"))",
    "right" : "if (serverTypeString.equals(\"RSArbiter\"))",
    "info" : "IfStatement[5094-5974]:IfStatement[5087-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5136-5204]:Block[5129-5197]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_ARBITER;",
    "right" : "serverType = ServerType.REPLICA_SET_ARBITER;",
    "info" : "ExpressionStatement[5150-5194]:ExpressionStatement[5143-5187]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSGhost\"))",
    "right" : "if (serverTypeString.equals(\"RSGhost\"))",
    "info" : "IfStatement[5210-5974]:IfStatement[5203-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5250-5316]:Block[5243-5309]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_GHOST;",
    "right" : "serverType = ServerType.REPLICA_SET_GHOST;",
    "info" : "ExpressionStatement[5264-5306]:ExpressionStatement[5257-5299]"
  }, {
    "left" : "if (serverTypeString.equals(\"RSOther\"))",
    "right" : "if (serverTypeString.equals(\"RSOther\"))",
    "info" : "IfStatement[5322-5974]:IfStatement[5315-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5362-5428]:Block[5355-5421]"
  }, {
    "left" : "serverType = ServerType.REPLICA_SET_OTHER;",
    "right" : "serverType = ServerType.REPLICA_SET_OTHER;",
    "info" : "ExpressionStatement[5376-5418]:ExpressionStatement[5369-5411]"
  }, {
    "left" : "if (serverTypeString.equals(\"Mongos\"))",
    "right" : "if (serverTypeString.equals(\"Mongos\"))",
    "info" : "IfStatement[5434-5974]:IfStatement[5427-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5473-5534]:Block[5466-5527]"
  }, {
    "left" : "serverType = ServerType.SHARD_ROUTER;",
    "right" : "serverType = ServerType.SHARD_ROUTER;",
    "info" : "ExpressionStatement[5487-5524]:ExpressionStatement[5480-5517]"
  }, {
    "left" : "if (serverTypeString.equals(\"Standalone\"))",
    "right" : "if (serverTypeString.equals(\"Standalone\"))",
    "info" : "IfStatement[5540-5974]:IfStatement[5533-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5583-5642]:Block[5576-5635]"
  }, {
    "left" : "serverType = ServerType.STANDALONE;",
    "right" : "serverType = ServerType.STANDALONE;",
    "info" : "ExpressionStatement[5597-5632]:ExpressionStatement[5590-5625]"
  }, {
    "left" : "if (serverTypeString.equals(\"PossiblePrimary\"))",
    "right" : "if (serverTypeString.equals(\"PossiblePrimary\"))",
    "info" : "IfStatement[5648-5974]:IfStatement[5641-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5696-5752]:Block[5689-5745]"
  }, {
    "left" : "serverType = ServerType.UNKNOWN;",
    "right" : "serverType = ServerType.UNKNOWN;",
    "info" : "ExpressionStatement[5710-5742]:ExpressionStatement[5703-5735]"
  }, {
    "left" : "if (serverTypeString.equals(\"Unknown\"))",
    "right" : "if (serverTypeString.equals(\"Unknown\"))",
    "info" : "IfStatement[5758-5974]:IfStatement[5751-5967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5798-5854]:Block[5791-5847]"
  }, {
    "left" : "serverType = ServerType.UNKNOWN;",
    "right" : "serverType = ServerType.UNKNOWN;",
    "info" : "ExpressionStatement[5812-5844]:ExpressionStatement[5805-5837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5860-5974]:Block[5853-5967]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"No handler for server type \" + serverTypeString);",
    "right" : "throw new UnsupportedOperationException(\"No handler for server type \" + serverTypeString);",
    "info" : "ThrowStatement[5874-5964]:ThrowStatement[5867-5957]"
  }, {
    "left" : "return serverType;",
    "right" : "return serverType;",
    "info" : "ReturnStatement[5983-6001]:ReturnStatement[5976-5994]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[6013-6020]:Modifier[6006-6013]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[6021-6025]:PrimitiveType[6014-6018]"
  }, {
    "left" : "final String topologyType",
    "right" : "final String topologyType",
    "info" : "SingleVariableDeclaration[6045-6070]:SingleVariableDeclaration[6038-6063]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6072-7267]:Block[6065-7260]"
  }, {
    "left" : "if (topologyType.equals(\"Single\"))",
    "right" : "if (topologyType.equals(\"Single\"))",
    "info" : "IfStatement[6082-7261]:IfStatement[6075-7254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6117-6201]:Block[6110-6194]"
  }, {
    "left" : "assertEquals(SingleServerCluster.class, cluster.getClass());",
    "right" : "assertEquals(SingleServerCluster.class, cluster.getClass());",
    "info" : "ExpressionStatement[6131-6191]:ExpressionStatement[6124-6184]"
  }, {
    "left" : "if (topologyType.equals(\"ReplicaSetWithPrimary\"))",
    "right" : "if (topologyType.equals(\"ReplicaSetWithPrimary\"))",
    "info" : "IfStatement[6207-7261]:IfStatement[6200-7254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6257-6506]:Block[6250-6499]"
  }, {
    "left" : "assertEquals(MultiServerCluster.class, cluster.getClass());",
    "right" : "assertEquals(MultiServerCluster.class, cluster.getClass());",
    "info" : "ExpressionStatement[6271-6330]:ExpressionStatement[6264-6323]"
  }, {
    "left" : "assertEquals(REPLICA_SET, cluster.getCurrentDescription().getType());",
    "right" : "assertEquals(REPLICA_SET, cluster.getCurrentDescription().getType());",
    "info" : "ExpressionStatement[6343-6412]:ExpressionStatement[6336-6405]"
  }, {
    "left" : "assertEquals(1, cluster.getCurrentDescription().getPrimaries().size());",
    "right" : "assertEquals(1, cluster.getCurrentDescription().getPrimaries().size());",
    "info" : "ExpressionStatement[6425-6496]:ExpressionStatement[6418-6489]"
  }, {
    "left" : "if (topologyType.equals(\"ReplicaSetNoPrimary\"))",
    "right" : "if (topologyType.equals(\"ReplicaSetNoPrimary\"))",
    "info" : "IfStatement[6512-7261]:IfStatement[6505-7254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6560-6809]:Block[6553-6802]"
  }, {
    "left" : "assertEquals(MultiServerCluster.class, cluster.getClass());",
    "right" : "assertEquals(MultiServerCluster.class, cluster.getClass());",
    "info" : "ExpressionStatement[6574-6633]:ExpressionStatement[6567-6626]"
  }, {
    "left" : "assertEquals(REPLICA_SET, cluster.getCurrentDescription().getType());",
    "right" : "assertEquals(REPLICA_SET, cluster.getCurrentDescription().getType());",
    "info" : "ExpressionStatement[6646-6715]:ExpressionStatement[6639-6708]"
  }, {
    "left" : "assertEquals(0, cluster.getCurrentDescription().getPrimaries().size());",
    "right" : "assertEquals(0, cluster.getCurrentDescription().getPrimaries().size());",
    "info" : "ExpressionStatement[6728-6799]:ExpressionStatement[6721-6792]"
  }, {
    "left" : "if (topologyType.equals(\"Sharded\"))",
    "right" : "if (topologyType.equals(\"Sharded\"))",
    "info" : "IfStatement[6815-7261]:IfStatement[6808-7254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6851-7012]:Block[6844-7005]"
  }, {
    "left" : "assertEquals(MultiServerCluster.class, cluster.getClass());",
    "right" : "assertEquals(MultiServerCluster.class, cluster.getClass());",
    "info" : "ExpressionStatement[6865-6924]:ExpressionStatement[6858-6917]"
  }, {
    "left" : "assertEquals(SHARDED, cluster.getCurrentDescription().getType());",
    "right" : "assertEquals(SHARDED, cluster.getCurrentDescription().getType());",
    "info" : "ExpressionStatement[6937-7002]:ExpressionStatement[6930-6995]"
  }, {
    "left" : "if (topologyType.equals(\"Unknown\"))",
    "right" : "if (topologyType.equals(\"Unknown\"))",
    "info" : "IfStatement[7018-7261]:IfStatement[7011-7254]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7054-7143]:Block[7047-7136]"
  }, {
    "left" : "assertEquals(UNKNOWN, cluster.getCurrentDescription().getType());",
    "right" : "assertEquals(UNKNOWN, cluster.getCurrentDescription().getType());",
    "info" : "ExpressionStatement[7068-7133]:ExpressionStatement[7061-7126]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7149-7261]:Block[7142-7254]"
  }, {
    "left" : "throw new UnsupportedOperationException(\"No handler for topology type \" + topologyType);",
    "right" : "throw new UnsupportedOperationException(\"No handler for topology type \" + topologyType);",
    "info" : "ThrowStatement[7163-7251]:ThrowStatement[7156-7244]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[7273-7280]:Modifier[7266-7273]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[7281-7285]:PrimitiveType[7274-7278]"
  }, {
    "left" : "final BsonArray response",
    "right" : "final BsonArray response",
    "info" : "SingleVariableDeclaration[7300-7324]:SingleVariableDeclaration[7293-7317]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7326-8439]:Block[7319-8432]"
  }, {
    "left" : "ServerAddress serverAddress = new ServerAddress(response.get(0).asString().getValue());",
    "right" : "ServerAddress serverAddress = new ServerAddress(response.get(0).asString().getValue());",
    "info" : "VariableDeclarationStatement[7336-7423]:VariableDeclarationStatement[7329-7416]"
  }, {
    "left" : "BsonDocument isMasterResult = response.get(1).asDocument();",
    "right" : "BsonDocument isMasterResult = response.get(1).asDocument();",
    "info" : "VariableDeclarationStatement[7432-7491]:VariableDeclarationStatement[7425-7484]"
  }, {
    "left" : "ServerDescription serverDescription;",
    "right" : "ServerDescription serverDescription;",
    "info" : "VariableDeclarationStatement[7500-7536]:VariableDeclarationStatement[7493-7529]"
  }, {
    "left" : "if (isMasterResult.isEmpty())",
    "right" : "if (isMasterResult.isEmpty())",
    "info" : "IfStatement[7546-8365]:IfStatement[7539-8358]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7576-7722]:Block[7569-7715]"
  }, {
    "left" : "serverDescription = ServerDescription.builder().type(ServerType.UNKNOWN).state(CONNECTING).address(serverAddress).build();",
    "right" : "serverDescription = ServerDescription.builder().type(ServerType.UNKNOWN).state(CONNECTING).address(serverAddress).build();",
    "info" : "ExpressionStatement[7590-7712]:ExpressionStatement[7583-7705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7728-8365]:Block[7721-8358]"
  }, {
    "left" : "serverDescription = createServerDescription(serverAddress, isMasterResult,\n                                                        getVersion(new BsonDocument(\"versionArray\",\n                                                                                    new BsonArray(asList(new BsonInt32(2),\n                                                                                                         new BsonInt32(6),\n                                                                                                         new BsonInt32(0))))),\n                                                        5000000);",
    "right" : "serverDescription = createServerDescription(serverAddress, isMasterResult,\n                                                        getVersion(new BsonDocument(\"versionArray\",\n                                                                                    new BsonArray(asList(new BsonInt32(2),\n                                                                                                         new BsonInt32(6),\n                                                                                                         new BsonInt32(0))))),\n                                                        5000000);",
    "info" : "ExpressionStatement[7742-8355]:ExpressionStatement[7735-8348]"
  }, {
    "left" : "factory.sendNotification(serverAddress, serverDescription);",
    "right" : "factory.sendNotification(serverAddress, serverDescription);",
    "info" : "ExpressionStatement[8374-8433]:ExpressionStatement[8367-8426]"
  }, {
    "left" : "BaseCluster",
    "right" : "BaseCluster",
    "info" : "SimpleType[8445-8456]:SimpleType[8438-8449]"
  }, {
    "left" : "final String uri",
    "right" : "final String uri",
    "info" : "SingleVariableDeclaration[8468-8484]:SingleVariableDeclaration[8461-8477]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8486-9376]:Block[8479-9369]"
  }, {
    "left" : "ConnectionString connectionString = new ConnectionString(uri);",
    "right" : "ConnectionString connectionString = new ConnectionString(uri);",
    "info" : "VariableDeclarationStatement[8496-8558]:VariableDeclarationStatement[8489-8551]"
  }, {
    "left" : "ClusterSettings settings = ClusterSettings.builder()\n                                                  .serverSelectionTimeout(1, TimeUnit.SECONDS)\n                                                  .hosts(getHosts(connectionString))\n                                                  .mode(getMode(connectionString))\n                                                  .requiredReplicaSetName(connectionString.getRequiredReplicaSetName())\n                                                  .build();",
    "right" : "ClusterSettings settings = ClusterSettings.builder()\n                                                  .serverSelectionTimeout(1, TimeUnit.SECONDS)\n                                                  .hosts(getHosts(connectionString))\n                                                  .mode(getMode(connectionString))\n                                                  .requiredReplicaSetName(connectionString.getRequiredReplicaSetName())\n                                                  .build();",
    "info" : "VariableDeclarationStatement[8568-9063]:VariableDeclarationStatement[8561-9056]"
  }, {
    "left" : "if (settings.getMode() == ClusterConnectionMode.SINGLE)",
    "right" : "if (settings.getMode() == ClusterConnectionMode.SINGLE)",
    "info" : "IfStatement[9073-9370]:IfStatement[9066-9363]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9129-9247]:Block[9122-9240]"
  }, {
    "left" : "return new SingleServerCluster(new ClusterId(), settings, factory, new NoOpClusterListener());",
    "right" : "return new SingleServerCluster(new ClusterId(), settings, factory, new NoOpClusterListener());",
    "info" : "ReturnStatement[9143-9237]:ReturnStatement[9136-9230]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9253-9370]:Block[9246-9363]"
  }, {
    "left" : "return new MultiServerCluster(new ClusterId(), settings, factory, new NoOpClusterListener());",
    "right" : "return new MultiServerCluster(new ClusterId(), settings, factory, new NoOpClusterListener());",
    "info" : "ReturnStatement[9267-9360]:ReturnStatement[9260-9353]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9382-9389]:Modifier[9375-9382]"
  }, {
    "left" : "List<ServerAddress>",
    "right" : "List<ServerAddress>",
    "info" : "ParameterizedType[9390-9409]:ParameterizedType[9383-9402]"
  }, {
    "left" : "final ConnectionString connectionString",
    "right" : "final ConnectionString connectionString",
    "info" : "SingleVariableDeclaration[9419-9458]:SingleVariableDeclaration[9412-9451]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9460-9703]:Block[9453-9696]"
  }, {
    "left" : "List<ServerAddress> serverAddresses = new ArrayList<ServerAddress>();",
    "right" : "List<ServerAddress> serverAddresses = new ArrayList<ServerAddress>();",
    "info" : "VariableDeclarationStatement[9470-9539]:VariableDeclarationStatement[9463-9532]"
  }, {
    "left" : "for (String host : connectionString.getHosts())",
    "right" : "for (String host : connectionString.getHosts())",
    "info" : "EnhancedForStatement[9548-9665]:EnhancedForStatement[9541-9658]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9596-9665]:Block[9589-9658]"
  }, {
    "left" : "serverAddresses.add(new ServerAddress(host));",
    "right" : "serverAddresses.add(new ServerAddress(host));",
    "info" : "ExpressionStatement[9610-9655]:ExpressionStatement[9603-9648]"
  }, {
    "left" : "return serverAddresses;",
    "right" : "return serverAddresses;",
    "info" : "ReturnStatement[9674-9697]:ReturnStatement[9667-9690]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[9709-9716]:Modifier[9702-9709]"
  }, {
    "left" : "ClusterConnectionMode",
    "right" : "ClusterConnectionMode",
    "info" : "SimpleType[9717-9738]:SimpleType[9710-9731]"
  }, {
    "left" : "final ConnectionString connectionString",
    "right" : "final ConnectionString connectionString",
    "info" : "SingleVariableDeclaration[9747-9786]:SingleVariableDeclaration[9740-9779]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9788-10032]:Block[9781-10025]"
  }, {
    "left" : "if (connectionString.getHosts().size() > 1 || connectionString.getRequiredReplicaSetName() != null)",
    "right" : "if (connectionString.getHosts().size() > 1 || connectionString.getRequiredReplicaSetName() != null)",
    "info" : "IfStatement[9798-10026]:IfStatement[9791-10019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9898-9960]:Block[9891-9953]"
  }, {
    "left" : "return ClusterConnectionMode.MULTIPLE;",
    "right" : "return ClusterConnectionMode.MULTIPLE;",
    "info" : "ReturnStatement[9912-9950]:ReturnStatement[9905-9943]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[9966-10026]:Block[9959-10019]"
  }, {
    "left" : "return ClusterConnectionMode.SINGLE;",
    "right" : "return ClusterConnectionMode.SINGLE;",
    "info" : "ReturnStatement[9980-10016]:ReturnStatement[9973-10009]"
  } ]
}