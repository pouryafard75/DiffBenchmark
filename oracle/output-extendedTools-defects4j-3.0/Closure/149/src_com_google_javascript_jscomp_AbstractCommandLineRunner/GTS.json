{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "AbstractCommandLineRunner",
      "right" : "AbstractCommandLineRunner",
      "info" : "TypeDeclaration[1472-45338]:TypeDeclaration[1472-45553]"
    }, {
      "left" : "private final CommandLineConfig config;",
      "right" : "private final CommandLineConfig config;",
      "info" : "FieldDeclaration[2618-2657]:FieldDeclaration[2618-2657]"
    }, {
      "left" : "private Appendable out;",
      "right" : "private Appendable out;",
      "info" : "FieldDeclaration[2661-2684]:FieldDeclaration[2661-2684]"
    }, {
      "left" : "private final PrintStream err;",
      "right" : "private final PrintStream err;",
      "info" : "FieldDeclaration[2687-2717]:FieldDeclaration[2687-2717]"
    }, {
      "left" : "private A compiler;",
      "right" : "private A compiler;",
      "info" : "FieldDeclaration[2720-2739]:FieldDeclaration[2720-2739]"
    }, {
      "left" : "private static Charset inputCharset;",
      "right" : "private static Charset inputCharset;",
      "info" : "FieldDeclaration[2743-2779]:FieldDeclaration[2743-2779]"
    }, {
      "left" : "private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
      "right" : "private static final int NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER = 100;",
      "info" : "FieldDeclaration[2836-2903]:FieldDeclaration[2836-2903]"
    }, {
      "left" : "private final RunTimeStats runTimeStats = new RunTimeStats();",
      "right" : "private final RunTimeStats runTimeStats = new RunTimeStats();",
      "info" : "FieldDeclaration[2907-2968]:FieldDeclaration[2907-2968]"
    }, {
      "left" : "AbstractCommandLineRunner()",
      "right" : "AbstractCommandLineRunner()",
      "info" : "MethodDeclaration[2972-3039]:MethodDeclaration[2972-3039]"
    }, {
      "left" : "AbstractCommandLineRunner(PrintStream out, PrintStream err)",
      "right" : "AbstractCommandLineRunner(PrintStream out, PrintStream err)",
      "info" : "MethodDeclaration[3043-3191]:MethodDeclaration[3043-3191]"
    }, {
      "left" : "protected CommandLineConfig getCommandLineConfig()",
      "right" : "protected CommandLineConfig getCommandLineConfig()",
      "info" : "MethodDeclaration[3195-3347]:MethodDeclaration[3195-3347]"
    }, {
      "left" : "protected abstract A createCompiler();",
      "right" : "protected abstract A createCompiler();",
      "info" : "MethodDeclaration[3351-3486]:MethodDeclaration[3351-3486]"
    }, {
      "left" : "protected abstract B createOptions();",
      "right" : "protected abstract B createOptions();",
      "info" : "MethodDeclaration[3490-3749]:MethodDeclaration[3490-3749]"
    }, {
      "left" : "protected DiagnosticGroups getDiagnosticGroups()",
      "right" : "protected DiagnosticGroups getDiagnosticGroups()",
      "info" : "MethodDeclaration[3753-3842]:MethodDeclaration[3753-3842]"
    }, {
      "left" : "protected void initOptionsFromFlags(CompilerOptions options)",
      "right" : "protected void initOptionsFromFlags(CompilerOptions options)",
      "info" : "MethodDeclaration[3846-3957]:MethodDeclaration[3846-3957]"
    }, {
      "left" : "final protected void setRunOptions(CompilerOptions options)\n      throws FlagUsageException, IOException",
      "right" : "final protected void setRunOptions(CompilerOptions options)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[3961-5601]:MethodDeclaration[3961-5649]"
    }, {
      "left" : "final protected A getCompiler()",
      "right" : "final protected A getCompiler()",
      "info" : "MethodDeclaration[5605-5663]:MethodDeclaration[5653-5711]"
    }, {
      "left" : "final public void run()",
      "right" : "final public void run()",
      "info" : "MethodDeclaration[5667-6289]:MethodDeclaration[5715-6337]"
    }, {
      "left" : "void exit(RunTimeStats runTimeStats, Throwable error)",
      "right" : "void exit(RunTimeStats runTimeStats, Throwable error)",
      "info" : "MethodDeclaration[6293-6841]:MethodDeclaration[6341-6889]"
    }, {
      "left" : "protected PrintStream getErrorPrintStream()",
      "right" : "protected PrintStream getErrorPrintStream()",
      "info" : "MethodDeclaration[6845-7023]:MethodDeclaration[6893-7071]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "TypeDeclaration[7027-7298]:TypeDeclaration[7075-7346]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[7176-7224]:FieldDeclaration[7224-7272]"
    }, {
      "left" : "FlagUsageException(String message)",
      "right" : "FlagUsageException(String message)",
      "info" : "MethodDeclaration[7230-7294]:MethodDeclaration[7278-7342]"
    }, {
      "left" : "private static List<JSSourceFile> createInputs(List<String> files,\n      boolean allowStdIn) throws FlagUsageException, IOException",
      "right" : "private static List<JSSourceFile> createInputs(List<String> files,\n      boolean allowStdIn) throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[7302-8350]:MethodDeclaration[7350-8398]"
    }, {
      "left" : "private static List<JSSourceFile> createSourceInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "right" : "private static List<JSSourceFile> createSourceInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[8354-8790]:MethodDeclaration[8402-8838]"
    }, {
      "left" : "private static List<JSSourceFile> createExternInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "right" : "private static List<JSSourceFile> createExternInputs(List<String> files)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[8794-9256]:MethodDeclaration[8842-9304]"
    }, {
      "left" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles)\n      throws FlagUsageException, IOException",
      "right" : "static JSModule[] createJsModules(List<String> specs, List<String> jsFiles)\n      throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[9260-12531]:MethodDeclaration[9308-12579]"
    }, {
      "left" : "static Map<String, String> parseModuleWrappers(List<String> specs,\n      JSModule[] modules) throws FlagUsageException",
      "right" : "static Map<String, String> parseModuleWrappers(List<String> specs,\n      JSModule[] modules) throws FlagUsageException",
      "info" : "MethodDeclaration[12535-14048]:MethodDeclaration[12583-14096]"
    }, {
      "left" : "static void writeOutput(Appendable out, Compiler compiler, String code,\n      String wrapper, String codePlaceholder) throws IOException",
      "right" : "static void writeOutput(Appendable out, Compiler compiler, String code,\n      String wrapper, String codePlaceholder) throws IOException",
      "info" : "MethodDeclaration[14052-15165]:MethodDeclaration[14100-15213]"
    }, {
      "left" : "private static void maybeCreateDirsForPath(String pathPrefix)",
      "right" : "private static void maybeCreateDirsForPath(String pathPrefix)",
      "info" : "MethodDeclaration[15169-15676]:MethodDeclaration[15217-15724]"
    }, {
      "left" : "protected int doRun() throws FlagUsageException, IOException",
      "right" : "protected int doRun() throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[15680-17215]:MethodDeclaration[15728-17109]"
    }, {
      "left" : "int processResults(Result result, JSModule[] modules, B options)\n       throws FlagUsageException, IOException",
      "right" : "int processResults(Result result, JSModule[] modules, B options)\n       throws FlagUsageException, IOException",
      "info" : "MethodDeclaration[17219-20509]:MethodDeclaration[17113-20403]"
    }, {
      "left" : "private Charset getInputCharset() throws FlagUsageException",
      "right" : "private Charset getInputCharset() throws FlagUsageException",
      "info" : "MethodDeclaration[20513-21090]:MethodDeclaration[20407-20984]"
    }, {
      "left" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "right" : "protected List<JSSourceFile> createExterns() throws FlagUsageException,\n      IOException",
      "info" : "MethodDeclaration[21094-21717]:MethodDeclaration[21790-21932]"
    }, {
      "left" : "private boolean shouldGenerateMapPerModule(B options)",
      "right" : "private boolean shouldGenerateMapPerModule(B options)",
      "info" : "MethodDeclaration[21721-22113]:MethodDeclaration[21936-22328]"
    }, {
      "left" : "private Writer openExternExportsStream(B options,\n      String path) throws IOException",
      "right" : "private Writer openExternExportsStream(B options,\n      String path) throws IOException",
      "info" : "MethodDeclaration[22117-22790]:MethodDeclaration[22332-23005]"
    }, {
      "left" : "private String expandCommandLinePath(\n      String path, JSModule forModule)",
      "right" : "private String expandCommandLinePath(\n      String path, JSModule forModule)",
      "info" : "MethodDeclaration[22794-23833]:MethodDeclaration[23009-24048]"
    }, {
      "left" : "String expandSourceMapPath(B options, JSModule forModule)",
      "right" : "String expandSourceMapPath(B options, JSModule forModule)",
      "info" : "MethodDeclaration[23837-24120]:MethodDeclaration[24052-24335]"
    }, {
      "left" : "String expandManifest(JSModule forModule)",
      "right" : "String expandManifest(JSModule forModule)",
      "info" : "MethodDeclaration[24124-24381]:MethodDeclaration[24339-24596]"
    }, {
      "left" : "private Writer toWriter(String fileName) throws IOException",
      "right" : "private Writer toWriter(String fileName) throws IOException",
      "info" : "MethodDeclaration[24385-24724]:MethodDeclaration[24600-24939]"
    }, {
      "left" : "private Writer toWriter(String fileName, String charSet)\n      throws IOException",
      "right" : "private Writer toWriter(String fileName, String charSet)\n      throws IOException",
      "info" : "MethodDeclaration[24728-25127]:MethodDeclaration[24943-25342]"
    }, {
      "left" : "private void outputSourceMap(B options)\n      throws IOException",
      "right" : "private void outputSourceMap(B options)\n      throws IOException",
      "info" : "MethodDeclaration[25131-25595]:MethodDeclaration[25346-25810]"
    }, {
      "left" : "private String getMapPath(String outputFile)",
      "right" : "private String getMapPath(String outputFile)",
      "info" : "MethodDeclaration[25599-26603]:MethodDeclaration[25814-26818]"
    }, {
      "left" : "private void outputNameMaps(B options) throws FlagUsageException,\n      IOException",
      "right" : "private void outputNameMaps(B options) throws FlagUsageException,\n      IOException",
      "info" : "MethodDeclaration[26607-28784]:MethodDeclaration[26822-28999]"
    }, {
      "left" : "static void createDefineReplacements(List<String> definitions,\n      CompilerOptions options)",
      "right" : "static void createDefineReplacements(List<String> definitions,\n      CompilerOptions options)",
      "info" : "MethodDeclaration[28788-30938]:MethodDeclaration[29003-31153]"
    }, {
      "left" : "private boolean shouldGenerateManifestPerModule()",
      "right" : "private boolean shouldGenerateManifestPerModule()",
      "info" : "MethodDeclaration[30942-31264]:MethodDeclaration[31157-31479]"
    }, {
      "left" : "private void outputManifest() throws IOException",
      "right" : "private void outputManifest() throws IOException",
      "info" : "MethodDeclaration[31268-32222]:MethodDeclaration[31483-32437]"
    }, {
      "left" : "void printModuleGraphManifestTo(\n      JSModuleGraph graph, Appendable out) throws IOException",
      "right" : "void printModuleGraphManifestTo(\n      JSModuleGraph graph, Appendable out) throws IOException",
      "info" : "MethodDeclaration[32226-33024]:MethodDeclaration[32441-33239]"
    }, {
      "left" : "private void printManifestTo(Iterable<CompilerInput> inputs, Appendable out)\n      throws IOException",
      "right" : "private void printManifestTo(Iterable<CompilerInput> inputs, Appendable out)\n      throws IOException",
      "info" : "MethodDeclaration[33028-33450]:MethodDeclaration[33243-33665]"
    }, {
      "left" : "RunTimeStats",
      "right" : "RunTimeStats",
      "info" : "TypeDeclaration[33454-34737]:TypeDeclaration[33669-34952]"
    }, {
      "left" : "private long bestRunTime = Long.MAX_VALUE;",
      "right" : "private long bestRunTime = Long.MAX_VALUE;",
      "info" : "FieldDeclaration[33479-33521]:FieldDeclaration[33694-33736]"
    }, {
      "left" : "private long worstRunTime = Long.MIN_VALUE;",
      "right" : "private long worstRunTime = Long.MIN_VALUE;",
      "info" : "FieldDeclaration[33526-33569]:FieldDeclaration[33741-33784]"
    }, {
      "left" : "long lastStartTime = 0;",
      "right" : "long lastStartTime = 0;",
      "info" : "FieldDeclaration[33574-33597]:FieldDeclaration[33789-33812]"
    }, {
      "left" : "private List<List<String>> loopedPassesInBestRun = null;",
      "right" : "private List<List<String>> loopedPassesInBestRun = null;",
      "info" : "FieldDeclaration[33602-33658]:FieldDeclaration[33817-33873]"
    }, {
      "left" : "private void recordStartRun()",
      "right" : "private void recordStartRun()",
      "info" : "MethodDeclaration[33664-33839]:MethodDeclaration[33879-34054]"
    }, {
      "left" : "private void recordEndRun()",
      "right" : "private void recordEndRun()",
      "info" : "MethodDeclaration[33845-34209]:MethodDeclaration[34060-34424]"
    }, {
      "left" : "private void outputBestPhaseOrdering()",
      "right" : "private void outputBestPhaseOrdering()",
      "info" : "MethodDeclaration[34215-34733]:MethodDeclaration[34430-34948]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "TypeDeclaration[34741-45336]:TypeDeclaration[34956-45551]"
    }, {
      "left" : "private boolean printTree = false;",
      "right" : "private boolean printTree = false;",
      "info" : "FieldDeclaration[35061-35095]:FieldDeclaration[35276-35310]"
    }, {
      "left" : "CommandLineConfig setPrintTree(boolean printTree)",
      "right" : "CommandLineConfig setPrintTree(boolean printTree)",
      "info" : "MethodDeclaration[35101-35258]:MethodDeclaration[35316-35473]"
    }, {
      "left" : "private boolean computePhaseOrdering = false;",
      "right" : "private boolean computePhaseOrdering = false;",
      "info" : "FieldDeclaration[35264-35309]:FieldDeclaration[35479-35524]"
    }, {
      "left" : "CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering)",
      "right" : "CommandLineConfig setComputePhaseOrdering(boolean computePhaseOrdering)",
      "info" : "MethodDeclaration[35315-35586]:MethodDeclaration[35530-35801]"
    }, {
      "left" : "private boolean printAst = false;",
      "right" : "private boolean printAst = false;",
      "info" : "FieldDeclaration[35592-35625]:FieldDeclaration[35807-35840]"
    }, {
      "left" : "CommandLineConfig setPrintAst(boolean printAst)",
      "right" : "CommandLineConfig setPrintAst(boolean printAst)",
      "info" : "MethodDeclaration[35631-35840]:MethodDeclaration[35846-36055]"
    }, {
      "left" : "private boolean printPassGraph = false;",
      "right" : "private boolean printPassGraph = false;",
      "info" : "FieldDeclaration[35846-35885]:FieldDeclaration[36061-36100]"
    }, {
      "left" : "CommandLineConfig setPrintPassGraph(boolean printPassGraph)",
      "right" : "CommandLineConfig setPrintPassGraph(boolean printPassGraph)",
      "info" : "MethodDeclaration[35891-36100]:MethodDeclaration[36106-36315]"
    }, {
      "left" : "private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
      "right" : "private CompilerOptions.DevMode jscompDevMode = CompilerOptions.DevMode.OFF;",
      "info" : "FieldDeclaration[36106-36182]:FieldDeclaration[36321-36397]"
    }, {
      "left" : "CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode)",
      "right" : "CommandLineConfig setJscompDevMode(CompilerOptions.DevMode jscompDevMode)",
      "info" : "MethodDeclaration[36188-36370]:MethodDeclaration[36403-36585]"
    }, {
      "left" : "private String loggingLevel = Level.WARNING.getName();",
      "right" : "private String loggingLevel = Level.WARNING.getName();",
      "info" : "FieldDeclaration[36376-36430]:FieldDeclaration[36591-36645]"
    }, {
      "left" : "CommandLineConfig setLoggingLevel(String loggingLevel)",
      "right" : "CommandLineConfig setLoggingLevel(String loggingLevel)",
      "info" : "MethodDeclaration[36436-36755]:MethodDeclaration[36651-36970]"
    }, {
      "left" : "private final List<String> externs = Lists.newArrayList();",
      "right" : "private final List<String> externs = Lists.newArrayList();",
      "info" : "FieldDeclaration[36761-36819]:FieldDeclaration[36976-37034]"
    }, {
      "left" : "CommandLineConfig setExterns(List<String> externs)",
      "right" : "CommandLineConfig setExterns(List<String> externs)",
      "info" : "MethodDeclaration[36825-37055]:MethodDeclaration[37040-37270]"
    }, {
      "left" : "private final List<String> js = Lists.newArrayList();",
      "right" : "private final List<String> js = Lists.newArrayList();",
      "info" : "FieldDeclaration[37061-37114]:FieldDeclaration[37276-37329]"
    }, {
      "left" : "CommandLineConfig setJs(List<String> js)",
      "right" : "CommandLineConfig setJs(List<String> js)",
      "info" : "MethodDeclaration[37120-37310]:MethodDeclaration[37335-37525]"
    }, {
      "left" : "private String jsOutputFile = \"\";",
      "right" : "private String jsOutputFile = \"\";",
      "info" : "FieldDeclaration[37316-37349]:FieldDeclaration[37531-37564]"
    }, {
      "left" : "CommandLineConfig setJsOutputFile(String jsOutputFile)",
      "right" : "CommandLineConfig setJsOutputFile(String jsOutputFile)",
      "info" : "MethodDeclaration[37355-37570]:MethodDeclaration[37570-37785]"
    }, {
      "left" : "private final List<String> module = Lists.newArrayList();",
      "right" : "private final List<String> module = Lists.newArrayList();",
      "info" : "FieldDeclaration[37576-37633]:FieldDeclaration[37791-37848]"
    }, {
      "left" : "CommandLineConfig setModule(List<String> module)",
      "right" : "CommandLineConfig setModule(List<String> module)",
      "info" : "MethodDeclaration[37639-38189]:MethodDeclaration[37854-38404]"
    }, {
      "left" : "private String variableMapInputFile = \"\";",
      "right" : "private String variableMapInputFile = \"\";",
      "info" : "FieldDeclaration[38195-38236]:FieldDeclaration[38410-38451]"
    }, {
      "left" : "CommandLineConfig setVariableMapInputFile(String variableMapInputFile)",
      "right" : "CommandLineConfig setVariableMapInputFile(String variableMapInputFile)",
      "info" : "MethodDeclaration[38242-38528]:MethodDeclaration[38457-38743]"
    }, {
      "left" : "private String propertyMapInputFile = \"\";",
      "right" : "private String propertyMapInputFile = \"\";",
      "info" : "FieldDeclaration[38534-38575]:FieldDeclaration[38749-38790]"
    }, {
      "left" : "CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile)",
      "right" : "CommandLineConfig setPropertyMapInputFile(String propertyMapInputFile)",
      "info" : "MethodDeclaration[38581-38867]:MethodDeclaration[38796-39082]"
    }, {
      "left" : "private String variableMapOutputFile = \"\";",
      "right" : "private String variableMapOutputFile = \"\";",
      "info" : "FieldDeclaration[38873-38915]:FieldDeclaration[39088-39130]"
    }, {
      "left" : "CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile)",
      "right" : "CommandLineConfig setVariableMapOutputFile(String variableMapOutputFile)",
      "info" : "MethodDeclaration[38921-39196]:MethodDeclaration[39136-39411]"
    }, {
      "left" : "private boolean createNameMapFiles = false;",
      "right" : "private boolean createNameMapFiles = false;",
      "info" : "FieldDeclaration[39202-39245]:FieldDeclaration[39417-39460]"
    }, {
      "left" : "CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles)",
      "right" : "CommandLineConfig setCreateNameMapFiles(boolean createNameMapFiles)",
      "info" : "MethodDeclaration[39251-39702]:MethodDeclaration[39466-39917]"
    }, {
      "left" : "private String propertyMapOutputFile = \"\";",
      "right" : "private String propertyMapOutputFile = \"\";",
      "info" : "FieldDeclaration[39708-39750]:FieldDeclaration[39923-39965]"
    }, {
      "left" : "CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile)",
      "right" : "CommandLineConfig setPropertyMapOutputFile(String propertyMapOutputFile)",
      "info" : "MethodDeclaration[39756-40031]:MethodDeclaration[39971-40246]"
    }, {
      "left" : "private CodingConvention codingConvention = new DefaultCodingConvention();",
      "right" : "private CodingConvention codingConvention = new DefaultCodingConvention();",
      "info" : "FieldDeclaration[40037-40111]:FieldDeclaration[40252-40326]"
    }, {
      "left" : "CommandLineConfig setCodingConvention(CodingConvention codingConvention)",
      "right" : "CommandLineConfig setCodingConvention(CodingConvention codingConvention)",
      "info" : "MethodDeclaration[40117-40326]:MethodDeclaration[40332-40541]"
    }, {
      "left" : "private int summaryDetailLevel = 1;",
      "right" : "private int summaryDetailLevel = 1;",
      "info" : "FieldDeclaration[40332-40367]:FieldDeclaration[40547-40582]"
    }, {
      "left" : "CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel)",
      "right" : "CommandLineConfig setSummaryDetailLevel(int summaryDetailLevel)",
      "info" : "MethodDeclaration[40373-40816]:MethodDeclaration[40588-41031]"
    }, {
      "left" : "private String outputWrapper = \"\";",
      "right" : "private String outputWrapper = \"\";",
      "info" : "FieldDeclaration[40822-40856]:FieldDeclaration[41037-41071]"
    }, {
      "left" : "CommandLineConfig setOutputWrapper(String outputWrapper)",
      "right" : "CommandLineConfig setOutputWrapper(String outputWrapper)",
      "info" : "MethodDeclaration[40862-41133]:MethodDeclaration[41077-41348]"
    }, {
      "left" : "private String outputWrapperMarker = \"\";",
      "right" : "private String outputWrapperMarker = \"\";",
      "info" : "FieldDeclaration[41139-41179]:FieldDeclaration[41354-41394]"
    }, {
      "left" : "CommandLineConfig setOutputWrapperMarker(String outputWrapperMarker)",
      "right" : "CommandLineConfig setOutputWrapperMarker(String outputWrapperMarker)",
      "info" : "MethodDeclaration[41185-41430]:MethodDeclaration[41400-41645]"
    }, {
      "left" : "private final List<String> moduleWrapper = Lists.newArrayList();",
      "right" : "private final List<String> moduleWrapper = Lists.newArrayList();",
      "info" : "FieldDeclaration[41436-41500]:FieldDeclaration[41651-41715]"
    }, {
      "left" : "CommandLineConfig setModuleWrapper(List<String> moduleWrapper)",
      "right" : "CommandLineConfig setModuleWrapper(List<String> moduleWrapper)",
      "info" : "MethodDeclaration[41506-41931]:MethodDeclaration[41721-42146]"
    }, {
      "left" : "private String moduleOutputPathPrefix = \"\";",
      "right" : "private String moduleOutputPathPrefix = \"\";",
      "info" : "FieldDeclaration[41937-41980]:FieldDeclaration[42152-42195]"
    }, {
      "left" : "CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix)",
      "right" : "CommandLineConfig setModuleOutputPathPrefix(String moduleOutputPathPrefix)",
      "info" : "MethodDeclaration[41986-42336]:MethodDeclaration[42201-42551]"
    }, {
      "left" : "private String createSourceMap = \"\";",
      "right" : "private String createSourceMap = \"\";",
      "info" : "FieldDeclaration[42342-42378]:FieldDeclaration[42557-42593]"
    }, {
      "left" : "CommandLineConfig setCreateSourceMap(String createSourceMap)",
      "right" : "CommandLineConfig setCreateSourceMap(String createSourceMap)",
      "info" : "MethodDeclaration[42384-42811]:MethodDeclaration[42599-43026]"
    }, {
      "left" : "private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
      "right" : "private SourceMap.DetailLevel sourceMapDetailLevel =\n        SourceMap.DetailLevel.ALL;",
      "info" : "FieldDeclaration[42817-42904]:FieldDeclaration[43032-43119]"
    }, {
      "left" : "CommandLineConfig setSourceMapDetailLevel(SourceMap.DetailLevel level)",
      "right" : "CommandLineConfig setSourceMapDetailLevel(SourceMap.DetailLevel level)",
      "info" : "MethodDeclaration[42910-43129]:MethodDeclaration[43125-43344]"
    }, {
      "left" : "private final List<String> jscompError = Lists.newArrayList();",
      "right" : "private final List<String> jscompError = Lists.newArrayList();",
      "info" : "FieldDeclaration[43135-43197]:FieldDeclaration[43350-43412]"
    }, {
      "left" : "CommandLineConfig setJscompError(List<String> jscompError)",
      "right" : "CommandLineConfig setJscompError(List<String> jscompError)",
      "info" : "MethodDeclaration[43203-43430]:MethodDeclaration[43418-43645]"
    }, {
      "left" : "private final List<String> jscompWarning = Lists.newArrayList();",
      "right" : "private final List<String> jscompWarning = Lists.newArrayList();",
      "info" : "FieldDeclaration[43436-43500]:FieldDeclaration[43651-43715]"
    }, {
      "left" : "CommandLineConfig setJscompWarning(List<String> jscompWarning)",
      "right" : "CommandLineConfig setJscompWarning(List<String> jscompWarning)",
      "info" : "MethodDeclaration[43506-43751]:MethodDeclaration[43721-43966]"
    }, {
      "left" : "private final List<String> jscompOff = Lists.newArrayList();",
      "right" : "private final List<String> jscompOff = Lists.newArrayList();",
      "info" : "FieldDeclaration[43757-43817]:FieldDeclaration[43972-44032]"
    }, {
      "left" : "CommandLineConfig setJscompOff(List<String> jscompOff)",
      "right" : "CommandLineConfig setJscompOff(List<String> jscompOff)",
      "info" : "MethodDeclaration[43823-44035]:MethodDeclaration[44038-44250]"
    }, {
      "left" : "private final List<String> define = Lists.newArrayList();",
      "right" : "private final List<String> define = Lists.newArrayList();",
      "info" : "FieldDeclaration[44041-44098]:FieldDeclaration[44256-44313]"
    }, {
      "left" : "CommandLineConfig setDefine(List<String> define)",
      "right" : "CommandLineConfig setDefine(List<String> define)",
      "info" : "MethodDeclaration[44104-44562]:MethodDeclaration[44319-44777]"
    }, {
      "left" : "private String charset = \"\";",
      "right" : "private String charset = \"\";",
      "info" : "FieldDeclaration[44568-44596]:FieldDeclaration[44783-44811]"
    }, {
      "left" : "CommandLineConfig setCharset(String charset)",
      "right" : "CommandLineConfig setCharset(String charset)",
      "info" : "MethodDeclaration[44602-44755]:MethodDeclaration[44817-44970]"
    }, {
      "left" : "private boolean manageClosureDependencies = false;",
      "right" : "private boolean manageClosureDependencies = false;",
      "info" : "FieldDeclaration[44761-44811]:FieldDeclaration[44976-45026]"
    }, {
      "left" : "CommandLineConfig setManageClosureDependencies(boolean newVal)",
      "right" : "CommandLineConfig setManageClosureDependencies(boolean newVal)",
      "info" : "MethodDeclaration[44817-45086]:MethodDeclaration[45032-45301]"
    }, {
      "left" : "private String outputManifest = \"\";",
      "right" : "private String outputManifest = \"\";",
      "info" : "FieldDeclaration[45092-45127]:FieldDeclaration[45307-45342]"
    }, {
      "left" : "CommandLineConfig setOutputManifest(String outputManifest)",
      "right" : "CommandLineConfig setOutputManifest(String outputManifest)",
      "info" : "MethodDeclaration[45133-45332]:MethodDeclaration[45348-45547]"
    } ],
    "mappings" : [
 {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[2521-2529]:Modifier[2521-2529]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[2530-2535]:TYPE_DECLARATION_KIND[2530-2535]"
    }, {
      "left" : "AbstractCommandLineRunner",
      "right" : "AbstractCommandLineRunner",
      "info" : "SimpleName[2536-2561]:SimpleName[2536-2561]"
    }, {
      "left" : "AbstractCommandLineRunner",
      "right" : "AbstractCommandLineRunner",
      "info" : "SimpleName[2972-2997]:SimpleName[2972-2997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3000-3039]:Block[3000-3039]"
    }, {
      "left" : "this(System.out, System.err);",
      "right" : "this(System.out, System.err);",
      "info" : "ConstructorInvocation[3006-3035]:ConstructorInvocation[3006-3035]"
    }, {
      "left" : "AbstractCommandLineRunner",
      "right" : "AbstractCommandLineRunner",
      "info" : "SimpleName[3043-3068]:SimpleName[3043-3068]"
    }, {
      "left" : "PrintStream out",
      "right" : "PrintStream out",
      "info" : "SingleVariableDeclaration[3069-3084]:SingleVariableDeclaration[3069-3084]"
    }, {
      "left" : "PrintStream err",
      "right" : "PrintStream err",
      "info" : "SingleVariableDeclaration[3086-3101]:SingleVariableDeclaration[3086-3101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3103-3191]:Block[3103-3191]"
    }, {
      "left" : "this.config = new CommandLineConfig();",
      "right" : "this.config = new CommandLineConfig();",
      "info" : "ExpressionStatement[3109-3147]:ExpressionStatement[3109-3147]"
    }, {
      "left" : "this.out = out;",
      "right" : "this.out = out;",
      "info" : "ExpressionStatement[3152-3167]:ExpressionStatement[3152-3167]"
    }, {
      "left" : "this.err = err;",
      "right" : "this.err = err;",
      "info" : "ExpressionStatement[3172-3187]:ExpressionStatement[3172-3187]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3272-3281]:Modifier[3272-3281]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[3282-3299]:SimpleType[3282-3299]"
    }, {
      "left" : "getCommandLineConfig",
      "right" : "getCommandLineConfig",
      "info" : "SimpleName[3300-3320]:SimpleName[3300-3320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3323-3347]:Block[3323-3347]"
    }, {
      "left" : "return config;",
      "right" : "return config;",
      "info" : "ReturnStatement[3329-3343]:ReturnStatement[3329-3343]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3448-3457]:Modifier[3448-3457]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[3458-3466]:Modifier[3458-3466]"
    }, {
      "left" : "A",
      "right" : "A",
      "info" : "SimpleType[3467-3468]:SimpleType[3467-3468]"
    }, {
      "left" : "createCompiler",
      "right" : "createCompiler",
      "info" : "SimpleName[3469-3483]:SimpleName[3469-3483]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3712-3721]:Modifier[3712-3721]"
    }, {
      "left" : "abstract",
      "right" : "abstract",
      "info" : "Modifier[3722-3730]:Modifier[3722-3730]"
    }, {
      "left" : "B",
      "right" : "B",
      "info" : "SimpleType[3731-3732]:SimpleType[3731-3732]"
    }, {
      "left" : "createOptions",
      "right" : "createOptions",
      "info" : "SimpleName[3733-3746]:SimpleName[3733-3746]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3753-3762]:Modifier[3753-3762]"
    }, {
      "left" : "DiagnosticGroups",
      "right" : "DiagnosticGroups",
      "info" : "SimpleType[3763-3779]:SimpleType[3763-3779]"
    }, {
      "left" : "getDiagnosticGroups",
      "right" : "getDiagnosticGroups",
      "info" : "SimpleName[3780-3799]:SimpleName[3780-3799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3802-3842]:Block[3802-3842]"
    }, {
      "left" : "return new DiagnosticGroups();",
      "right" : "return new DiagnosticGroups();",
      "info" : "ReturnStatement[3808-3838]:ReturnStatement[3808-3838]"
    }, {
      "left" : "@Deprecated",
      "right" : "@Deprecated",
      "info" : "MarkerAnnotation[3880-3891]:MarkerAnnotation[3880-3891]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[3894-3903]:Modifier[3894-3903]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[3904-3908]:PrimitiveType[3904-3908]"
    }, {
      "left" : "initOptionsFromFlags",
      "right" : "initOptionsFromFlags",
      "info" : "SimpleName[3909-3929]:SimpleName[3909-3929]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[3930-3953]:SingleVariableDeclaration[3930-3953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3955-3957]:Block[3955-3957]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[4194-4199]:Modifier[4194-4199]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[4200-4209]:Modifier[4200-4209]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[4210-4214]:PrimitiveType[4210-4214]"
    }, {
      "left" : "setRunOptions",
      "right" : "setRunOptions",
      "info" : "SimpleName[4215-4228]:SimpleName[4215-4228]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[4229-4252]:SingleVariableDeclaration[4229-4252]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[4267-4285]:SimpleType[4267-4285]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[4287-4298]:SimpleType[4287-4298]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4299-5601]:Block[4299-5649]"
    }, {
      "left" : "DiagnosticGroups diagnosticGroups = getDiagnosticGroups();",
      "right" : "DiagnosticGroups diagnosticGroups = getDiagnosticGroups();",
      "info" : "VariableDeclarationStatement[4305-4363]:VariableDeclarationStatement[4305-4363]"
    }, {
      "left" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompError, CheckLevel.ERROR);",
      "right" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompError, CheckLevel.ERROR);",
      "info" : "ExpressionStatement[4369-4459]:ExpressionStatement[4369-4459]"
    }, {
      "left" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompWarning, CheckLevel.WARNING);",
      "right" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompWarning, CheckLevel.WARNING);",
      "info" : "ExpressionStatement[4464-4558]:ExpressionStatement[4464-4558]"
    }, {
      "left" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompOff, CheckLevel.OFF);",
      "right" : "diagnosticGroups.setWarningLevels(\n        options, config.jscompOff, CheckLevel.OFF);",
      "info" : "ExpressionStatement[4563-4649]:ExpressionStatement[4563-4649]"
    }, {
      "left" : "createDefineReplacements(config.define, options);",
      "right" : "createDefineReplacements(config.define, options);",
      "info" : "ExpressionStatement[4655-4704]:ExpressionStatement[4655-4704]"
    }, {
      "left" : "options.manageClosureDependencies = config.manageClosureDependencies;",
      "right" : "options.manageClosureDependencies = config.manageClosureDependencies;",
      "info" : "ExpressionStatement[4710-4779]:ExpressionStatement[4710-4779]"
    }, {
      "left" : "options.devMode = config.jscompDevMode;",
      "right" : "options.devMode = config.jscompDevMode;",
      "info" : "ExpressionStatement[4784-4823]:ExpressionStatement[4784-4823]"
    }, {
      "left" : "options.setCodingConvention(config.codingConvention);",
      "right" : "options.setCodingConvention(config.codingConvention);",
      "info" : "ExpressionStatement[4828-4881]:ExpressionStatement[4828-4881]"
    }, {
      "left" : "options.setSummaryDetailLevel(config.summaryDetailLevel);",
      "right" : "options.setSummaryDetailLevel(config.summaryDetailLevel);",
      "info" : "ExpressionStatement[4886-4943]:ExpressionStatement[4886-4943]"
    }, {
      "left" : "inputCharset = getInputCharset();",
      "right" : "inputCharset = getInputCharset();",
      "info" : "ExpressionStatement[4949-4982]:ExpressionStatement[4997-5030]"
    }, {
      "left" : "if (config.jsOutputFile.length() > 0)",
      "right" : "if (config.jsOutputFile.length() > 0)",
      "info" : "IfStatement[4988-5083]:IfStatement[5036-5131]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5026-5083]:Block[5074-5131]"
    }, {
      "left" : "options.jsOutputFile = config.jsOutputFile;",
      "right" : "options.jsOutputFile = config.jsOutputFile;",
      "info" : "ExpressionStatement[5034-5077]:ExpressionStatement[5082-5125]"
    }, {
      "left" : "if (config.createSourceMap.length() > 0)",
      "right" : "if (config.createSourceMap.length() > 0)",
      "info" : "IfStatement[5089-5197]:IfStatement[5137-5245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5130-5197]:Block[5178-5245]"
    }, {
      "left" : "options.sourceMapOutputPath = config.createSourceMap;",
      "right" : "options.sourceMapOutputPath = config.createSourceMap;",
      "info" : "ExpressionStatement[5138-5191]:ExpressionStatement[5186-5239]"
    }, {
      "left" : "options.sourceMapDetailLevel = config.sourceMapDetailLevel;",
      "right" : "options.sourceMapDetailLevel = config.sourceMapDetailLevel;",
      "info" : "ExpressionStatement[5202-5261]:ExpressionStatement[5250-5309]"
    }, {
      "left" : "if (!config.variableMapInputFile.equals(\"\"))",
      "right" : "if (!config.variableMapInputFile.equals(\"\"))",
      "info" : "IfStatement[5267-5429]:IfStatement[5315-5477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5312-5429]:Block[5360-5477]"
    }, {
      "left" : "options.inputVariableMapSerialized =\n          VariableMap.load(config.variableMapInputFile).toBytes();",
      "right" : "options.inputVariableMapSerialized =\n          VariableMap.load(config.variableMapInputFile).toBytes();",
      "info" : "ExpressionStatement[5320-5423]:ExpressionStatement[5368-5471]"
    }, {
      "left" : "if (!config.propertyMapInputFile.equals(\"\"))",
      "right" : "if (!config.propertyMapInputFile.equals(\"\"))",
      "info" : "IfStatement[5435-5597]:IfStatement[5483-5645]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5480-5597]:Block[5528-5645]"
    }, {
      "left" : "options.inputPropertyMapSerialized =\n          VariableMap.load(config.propertyMapInputFile).toBytes();",
      "right" : "options.inputPropertyMapSerialized =\n          VariableMap.load(config.propertyMapInputFile).toBytes();",
      "info" : "ExpressionStatement[5488-5591]:ExpressionStatement[5536-5639]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5605-5610]:Modifier[5653-5658]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[5611-5620]:Modifier[5659-5668]"
    }, {
      "left" : "A",
      "right" : "A",
      "info" : "SimpleType[5621-5622]:SimpleType[5669-5670]"
    }, {
      "left" : "getCompiler",
      "right" : "getCompiler",
      "info" : "SimpleName[5623-5634]:SimpleName[5671-5682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5637-5663]:Block[5685-5711]"
    }, {
      "left" : "return compiler;",
      "right" : "return compiler;",
      "info" : "ReturnStatement[5643-5659]:ReturnStatement[5691-5707]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5804-5809]:Modifier[5852-5857]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5810-5816]:Modifier[5858-5864]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[5817-5821]:PrimitiveType[5865-5869]"
    }, {
      "left" : "run",
      "right" : "run",
      "info" : "SimpleName[5822-5825]:SimpleName[5870-5873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5828-6289]:Block[5876-6337]"
    }, {
      "left" : "int result = 0;",
      "right" : "int result = 0;",
      "info" : "VariableDeclarationStatement[5834-5849]:VariableDeclarationStatement[5882-5897]"
    }, {
      "left" : "int runs = 1;",
      "right" : "int runs = 1;",
      "info" : "VariableDeclarationStatement[5854-5867]:VariableDeclarationStatement[5902-5915]"
    }, {
      "left" : "Throwable error = null;",
      "right" : "Throwable error = null;",
      "info" : "VariableDeclarationStatement[5872-5895]:VariableDeclarationStatement[5920-5943]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[5900-6029]:IfStatement[5948-6077]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5933-6029]:Block[5981-6077]"
    }, {
      "left" : "runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;",
      "right" : "runs = NUM_RUNS_TO_DETERMINE_OPTIMAL_ORDER;",
      "info" : "ExpressionStatement[5941-5984]:ExpressionStatement[5989-6032]"
    }, {
      "left" : "PhaseOptimizer.randomizeLoops();",
      "right" : "PhaseOptimizer.randomizeLoops();",
      "info" : "ExpressionStatement[5991-6023]:ExpressionStatement[6039-6071]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[6034-6254]:TryStatement[6082-6302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6038-6209]:Block[6086-6257]"
    }, {
      "left" : "for (int i = 0; i < runs && result == 0; i++)",
      "right" : "for (int i = 0; i < runs && result == 0; i++)",
      "info" : "ForStatement[6046-6203]:ForStatement[6094-6251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6092-6203]:Block[6140-6251]"
    }, {
      "left" : "runTimeStats.recordStartRun();",
      "right" : "runTimeStats.recordStartRun();",
      "info" : "ExpressionStatement[6102-6132]:ExpressionStatement[6150-6180]"
    }, {
      "left" : "result = doRun();",
      "right" : "result = doRun();",
      "info" : "ExpressionStatement[6141-6158]:ExpressionStatement[6189-6206]"
    }, {
      "left" : "runTimeStats.recordEndRun();",
      "right" : "runTimeStats.recordEndRun();",
      "info" : "ExpressionStatement[6167-6195]:ExpressionStatement[6215-6243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6230-6254]:Block[6278-6302]"
    }, {
      "left" : "error = t;",
      "right" : "error = t;",
      "info" : "ExpressionStatement[6238-6248]:ExpressionStatement[6286-6296]"
    }, {
      "left" : "exit(runTimeStats, error);",
      "right" : "exit(runTimeStats, error);",
      "info" : "ExpressionStatement[6259-6285]:ExpressionStatement[6307-6333]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6418-6422]:PrimitiveType[6466-6470]"
    }, {
      "left" : "exit",
      "right" : "exit",
      "info" : "SimpleName[6423-6427]:SimpleName[6471-6475]"
    }, {
      "left" : "RunTimeStats runTimeStats",
      "right" : "RunTimeStats runTimeStats",
      "info" : "SingleVariableDeclaration[6428-6453]:SingleVariableDeclaration[6476-6501]"
    }, {
      "left" : "Throwable error",
      "right" : "Throwable error",
      "info" : "SingleVariableDeclaration[6455-6470]:SingleVariableDeclaration[6503-6518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6472-6841]:Block[6520-6889]"
    }, {
      "left" : "int result = 0;",
      "right" : "int result = 0;",
      "info" : "VariableDeclarationStatement[6478-6493]:VariableDeclarationStatement[6526-6541]"
    }, {
      "left" : "if (error instanceof AbstractCommandLineRunner.FlagUsageException)",
      "right" : "if (error instanceof AbstractCommandLineRunner.FlagUsageException)",
      "info" : "IfStatement[6498-6719]:IfStatement[6546-6767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6565-6637]:Block[6613-6685]"
    }, {
      "left" : "System.err.println(error.getMessage());",
      "right" : "System.err.println(error.getMessage());",
      "info" : "ExpressionStatement[6573-6612]:ExpressionStatement[6621-6660]"
    }, {
      "left" : "result = -1;",
      "right" : "result = -1;",
      "info" : "ExpressionStatement[6619-6631]:ExpressionStatement[6667-6679]"
    }, {
      "left" : "if (error != null)",
      "right" : "if (error != null)",
      "info" : "IfStatement[6643-6719]:IfStatement[6691-6767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6662-6719]:Block[6710-6767]"
    }, {
      "left" : "error.printStackTrace();",
      "right" : "error.printStackTrace();",
      "info" : "ExpressionStatement[6670-6694]:ExpressionStatement[6718-6742]"
    }, {
      "left" : "result = -2;",
      "right" : "result = -2;",
      "info" : "ExpressionStatement[6701-6713]:ExpressionStatement[6749-6761]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[6725-6811]:IfStatement[6773-6859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6758-6811]:Block[6806-6859]"
    }, {
      "left" : "runTimeStats.outputBestPhaseOrdering();",
      "right" : "runTimeStats.outputBestPhaseOrdering();",
      "info" : "ExpressionStatement[6766-6805]:ExpressionStatement[6814-6853]"
    }, {
      "left" : "System.exit(result);",
      "right" : "System.exit(result);",
      "info" : "ExpressionStatement[6817-6837]:ExpressionStatement[6865-6885]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[6958-6967]:Modifier[7006-7015]"
    }, {
      "left" : "PrintStream",
      "right" : "PrintStream",
      "info" : "SimpleType[6968-6979]:SimpleType[7016-7027]"
    }, {
      "left" : "getErrorPrintStream",
      "right" : "getErrorPrintStream",
      "info" : "SimpleName[6980-6999]:SimpleName[7028-7047]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7002-7023]:Block[7050-7071]"
    }, {
      "left" : "return err;",
      "right" : "return err;",
      "info" : "ReturnStatement[7008-7019]:ReturnStatement[7056-7067]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[7110-7119]:Modifier[7158-7167]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7120-7126]:Modifier[7168-7174]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[7127-7132]:TYPE_DECLARATION_KIND[7175-7180]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleName[7133-7151]:SimpleName[7181-7199]"
    }, {
      "left" : "Exception",
      "right" : "Exception",
      "info" : "SimpleType[7160-7169]:SimpleType[7208-7217]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleName[7230-7248]:SimpleName[7278-7296]"
    }, {
      "left" : "String message",
      "right" : "String message",
      "info" : "SingleVariableDeclaration[7249-7263]:SingleVariableDeclaration[7297-7311]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7265-7294]:Block[7313-7342]"
    }, {
      "left" : "super(message);",
      "right" : "super(message);",
      "info" : "SuperConstructorInvocation[7273-7288]:SuperConstructorInvocation[7321-7336]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[7575-7582]:Modifier[7623-7630]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7583-7589]:Modifier[7631-7637]"
    }, {
      "left" : "List<JSSourceFile>",
      "right" : "List<JSSourceFile>",
      "info" : "ParameterizedType[7590-7608]:ParameterizedType[7638-7656]"
    }, {
      "left" : "createInputs",
      "right" : "createInputs",
      "info" : "SimpleName[7609-7621]:SimpleName[7657-7669]"
    }, {
      "left" : "List<String> files",
      "right" : "List<String> files",
      "info" : "SingleVariableDeclaration[7622-7640]:SingleVariableDeclaration[7670-7688]"
    }, {
      "left" : "boolean allowStdIn",
      "right" : "boolean allowStdIn",
      "info" : "SingleVariableDeclaration[7648-7666]:SingleVariableDeclaration[7696-7714]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[7675-7693]:SimpleType[7723-7741]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7695-7706]:SimpleType[7743-7754]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7707-8350]:Block[7755-8398]"
    }, {
      "left" : "List<JSSourceFile> inputs = new ArrayList<JSSourceFile>(files.size());",
      "right" : "List<JSSourceFile> inputs = new ArrayList<JSSourceFile>(files.size());",
      "info" : "VariableDeclarationStatement[7713-7783]:VariableDeclarationStatement[7761-7831]"
    }, {
      "left" : "boolean usingStdin = false;",
      "right" : "boolean usingStdin = false;",
      "info" : "VariableDeclarationStatement[7788-7815]:VariableDeclarationStatement[7836-7863]"
    }, {
      "left" : "for (String filename : files)",
      "right" : "for (String filename : files)",
      "info" : "EnhancedForStatement[7820-8327]:EnhancedForStatement[7868-8375]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7850-8327]:Block[7898-8375]"
    }, {
      "left" : "if (!\"-\".equals(filename))",
      "right" : "if (!\"-\".equals(filename))",
      "info" : "IfStatement[7858-8321]:IfStatement[7906-8369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7885-8001]:Block[7933-8049]"
    }, {
      "left" : "JSSourceFile newFile = JSSourceFile.fromFile(filename, inputCharset);",
      "right" : "JSSourceFile newFile = JSSourceFile.fromFile(filename, inputCharset);",
      "info" : "VariableDeclarationStatement[7895-7964]:VariableDeclarationStatement[7943-8012]"
    }, {
      "left" : "inputs.add(newFile);",
      "right" : "inputs.add(newFile);",
      "info" : "ExpressionStatement[7973-7993]:ExpressionStatement[8021-8041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8007-8321]:Block[8055-8369]"
    }, {
      "left" : "if (!allowStdIn)",
      "right" : "if (!allowStdIn)",
      "info" : "IfStatement[8017-8109]:IfStatement[8065-8157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8034-8109]:Block[8082-8157]"
    }, {
      "left" : "throw new FlagUsageException(\"Can't specify stdin.\");",
      "right" : "throw new FlagUsageException(\"Can't specify stdin.\");",
      "info" : "ThrowStatement[8046-8099]:ThrowStatement[8094-8147]"
    }, {
      "left" : "if (usingStdin)",
      "right" : "if (usingStdin)",
      "info" : "IfStatement[8118-8215]:IfStatement[8166-8263]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8134-8215]:Block[8182-8263]"
    }, {
      "left" : "throw new FlagUsageException(\"Can't specify stdin twice.\");",
      "right" : "throw new FlagUsageException(\"Can't specify stdin twice.\");",
      "info" : "ThrowStatement[8146-8205]:ThrowStatement[8194-8253]"
    }, {
      "left" : "inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));",
      "right" : "inputs.add(JSSourceFile.fromInputStream(\"stdin\", System.in));",
      "info" : "ExpressionStatement[8225-8286]:ExpressionStatement[8273-8334]"
    }, {
      "left" : "usingStdin = true;",
      "right" : "usingStdin = true;",
      "info" : "ExpressionStatement[8295-8313]:ExpressionStatement[8343-8361]"
    }, {
      "left" : "return inputs;",
      "right" : "return inputs;",
      "info" : "ReturnStatement[8332-8346]:ReturnStatement[8380-8394]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8423-8430]:Modifier[8471-8478]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8431-8437]:Modifier[8479-8485]"
    }, {
      "left" : "List<JSSourceFile>",
      "right" : "List<JSSourceFile>",
      "info" : "ParameterizedType[8438-8456]:ParameterizedType[8486-8504]"
    }, {
      "left" : "createSourceInputs",
      "right" : "createSourceInputs",
      "info" : "SimpleName[8457-8475]:SimpleName[8505-8523]"
    }, {
      "left" : "List<String> files",
      "right" : "List<String> files",
      "info" : "SingleVariableDeclaration[8476-8494]:SingleVariableDeclaration[8524-8542]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[8509-8527]:SimpleType[8557-8575]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8529-8540]:SimpleType[8577-8588]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8541-8790]:Block[8589-8838]"
    }, {
      "left" : "if (files.isEmpty())",
      "right" : "if (files.isEmpty())",
      "info" : "IfStatement[8547-8621]:IfStatement[8595-8669]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8568-8621]:Block[8616-8669]"
    }, {
      "left" : "files = Collections.singletonList(\"-\");",
      "right" : "files = Collections.singletonList(\"-\");",
      "info" : "ExpressionStatement[8576-8615]:ExpressionStatement[8624-8663]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[8626-8786]:TryStatement[8674-8834]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8630-8677]:Block[8678-8725]"
    }, {
      "left" : "return createInputs(files, true);",
      "right" : "return createInputs(files, true);",
      "info" : "ReturnStatement[8638-8671]:ReturnStatement[8686-8719]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8707-8786]:Block[8755-8834]"
    }, {
      "left" : "throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());",
      "right" : "throw new FlagUsageException(\"Bad --js flag. \" + e.getMessage());",
      "info" : "ThrowStatement[8715-8780]:ThrowStatement[8763-8828]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[8858-8865]:Modifier[8906-8913]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8866-8872]:Modifier[8914-8920]"
    }, {
      "left" : "List<JSSourceFile>",
      "right" : "List<JSSourceFile>",
      "info" : "ParameterizedType[8873-8891]:ParameterizedType[8921-8939]"
    }, {
      "left" : "createExternInputs",
      "right" : "createExternInputs",
      "info" : "SimpleName[8892-8910]:SimpleName[8940-8958]"
    }, {
      "left" : "List<String> files",
      "right" : "List<String> files",
      "info" : "SingleVariableDeclaration[8911-8929]:SingleVariableDeclaration[8959-8977]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[8944-8962]:SimpleType[8992-9010]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[8964-8975]:SimpleType[9012-9023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8976-9256]:Block[9024-9304]"
    }, {
      "left" : "if (files.isEmpty())",
      "right" : "if (files.isEmpty())",
      "info" : "IfStatement[8982-9081]:IfStatement[9030-9129]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9003-9081]:Block[9051-9129]"
    }, {
      "left" : "return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\"));",
      "right" : "return ImmutableList.of(JSSourceFile.fromCode(\"/dev/null\", \"\"));",
      "info" : "ReturnStatement[9011-9075]:ReturnStatement[9059-9123]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9086-9252]:TryStatement[9134-9300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9090-9138]:Block[9138-9186]"
    }, {
      "left" : "return createInputs(files, false);",
      "right" : "return createInputs(files, false);",
      "info" : "ReturnStatement[9098-9132]:ReturnStatement[9146-9180]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9168-9252]:Block[9216-9300]"
    }, {
      "left" : "throw new FlagUsageException(\"Bad --externs flag. \" + e.getMessage());",
      "right" : "throw new FlagUsageException(\"Bad --externs flag. \" + e.getMessage());",
      "info" : "ThrowStatement[9176-9246]:ThrowStatement[9224-9294]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9647-9653]:Modifier[9695-9701]"
    }, {
      "left" : "JSModule[]",
      "right" : "JSModule[]",
      "info" : "ArrayType[9654-9664]:ArrayType[9702-9712]"
    }, {
      "left" : "createJsModules",
      "right" : "createJsModules",
      "info" : "SimpleName[9665-9680]:SimpleName[9713-9728]"
    }, {
      "left" : "List<String> specs",
      "right" : "List<String> specs",
      "info" : "SingleVariableDeclaration[9681-9699]:SingleVariableDeclaration[9729-9747]"
    }, {
      "left" : "List<String> jsFiles",
      "right" : "List<String> jsFiles",
      "info" : "SingleVariableDeclaration[9701-9721]:SingleVariableDeclaration[9749-9769]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[9736-9754]:SimpleType[9784-9802]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[9756-9767]:SimpleType[9804-9815]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9768-12531]:Block[9816-12579]"
    }, {
      "left" : "Preconditions.checkState(specs != null);",
      "right" : "Preconditions.checkState(specs != null);",
      "info" : "ExpressionStatement[9774-9814]:ExpressionStatement[9822-9862]"
    }, {
      "left" : "Preconditions.checkState(!specs.isEmpty());",
      "right" : "Preconditions.checkState(!specs.isEmpty());",
      "info" : "ExpressionStatement[9819-9862]:ExpressionStatement[9867-9910]"
    }, {
      "left" : "Preconditions.checkState(jsFiles != null);",
      "right" : "Preconditions.checkState(jsFiles != null);",
      "info" : "ExpressionStatement[9867-9909]:ExpressionStatement[9915-9957]"
    }, {
      "left" : "final int totalNumJsFiles = jsFiles.size();",
      "right" : "final int totalNumJsFiles = jsFiles.size();",
      "info" : "VariableDeclarationStatement[9915-9958]:VariableDeclarationStatement[9963-10006]"
    }, {
      "left" : "int nextJsFileIndex = 0;",
      "right" : "int nextJsFileIndex = 0;",
      "info" : "VariableDeclarationStatement[9963-9987]:VariableDeclarationStatement[10011-10035]"
    }, {
      "left" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
      "right" : "Map<String, JSModule> modulesByName = Maps.newLinkedHashMap();",
      "info" : "VariableDeclarationStatement[9993-10055]:VariableDeclarationStatement[10041-10103]"
    }, {
      "left" : "for (String spec : specs)",
      "right" : "for (String spec : specs)",
      "info" : "EnhancedForStatement[10060-12255]:EnhancedForStatement[10108-12303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10086-12255]:Block[10134-12303]"
    }, {
      "left" : "String[] parts = spec.split(\":\");",
      "right" : "String[] parts = spec.split(\":\");",
      "info" : "VariableDeclarationStatement[10156-10189]:VariableDeclarationStatement[10204-10237]"
    }, {
      "left" : "if (parts.length < 2 || parts.length > 4)",
      "right" : "if (parts.length < 2 || parts.length > 4)",
      "info" : "IfStatement[10196-10364]:IfStatement[10244-10412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10238-10364]:Block[10286-10412]"
    }, {
      "left" : "throw new FlagUsageException(\"Expected 2-4 colon-delimited parts in \"\n            + \"module spec: \" + spec);",
      "right" : "throw new FlagUsageException(\"Expected 2-4 colon-delimited parts in \"\n            + \"module spec: \" + spec);",
      "info" : "ThrowStatement[10248-10356]:ThrowStatement[10296-10404]"
    }, {
      "left" : "String name = parts[0];",
      "right" : "String name = parts[0];",
      "info" : "VariableDeclarationStatement[10400-10423]:VariableDeclarationStatement[10448-10471]"
    }, {
      "left" : "if (!TokenStream.isJSIdentifier(name))",
      "right" : "if (!TokenStream.isJSIdentifier(name))",
      "info" : "IfStatement[10430-10555]:IfStatement[10478-10603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10469-10555]:Block[10517-10603]"
    }, {
      "left" : "throw new FlagUsageException(\"Invalid module name: '\" + name + \"'\");",
      "right" : "throw new FlagUsageException(\"Invalid module name: '\" + name + \"'\");",
      "info" : "ThrowStatement[10479-10547]:ThrowStatement[10527-10595]"
    }, {
      "left" : "if (modulesByName.containsKey(name))",
      "right" : "if (modulesByName.containsKey(name))",
      "info" : "IfStatement[10562-10680]:IfStatement[10610-10728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10599-10680]:Block[10647-10728]"
    }, {
      "left" : "throw new FlagUsageException(\"Duplicate module name: \" + name);",
      "right" : "throw new FlagUsageException(\"Duplicate module name: \" + name);",
      "info" : "ThrowStatement[10609-10672]:ThrowStatement[10657-10720]"
    }, {
      "left" : "JSModule module = new JSModule(name);",
      "right" : "JSModule module = new JSModule(name);",
      "info" : "VariableDeclarationStatement[10687-10724]:VariableDeclarationStatement[10735-10772]"
    }, {
      "left" : "int numJsFiles = -1;",
      "right" : "int numJsFiles = -1;",
      "info" : "VariableDeclarationStatement[10762-10782]:VariableDeclarationStatement[10810-10830]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10789-10924]:TryStatement[10837-10972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10793-10851]:Block[10841-10899]"
    }, {
      "left" : "numJsFiles = Integer.parseInt(parts[1]);",
      "right" : "numJsFiles = Integer.parseInt(parts[1]);",
      "info" : "ExpressionStatement[10803-10843]:ExpressionStatement[10851-10891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10890-10924]:Block[10938-10972]"
    }, {
      "left" : "numJsFiles = -1;",
      "right" : "numJsFiles = -1;",
      "info" : "ExpressionStatement[10900-10916]:ExpressionStatement[10948-10964]"
    }, {
      "left" : "if (numJsFiles < 0)",
      "right" : "if (numJsFiles < 0)",
      "info" : "IfStatement[10978-11121]:IfStatement[11026-11169]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10998-11121]:Block[11046-11169]"
    }, {
      "left" : "throw new FlagUsageException(\"Invalid js file count '\" + parts[1]\n            + \"' for module: \" + name);",
      "right" : "throw new FlagUsageException(\"Invalid js file count '\" + parts[1]\n            + \"' for module: \" + name);",
      "info" : "ThrowStatement[11008-11113]:ThrowStatement[11056-11161]"
    }, {
      "left" : "if (nextJsFileIndex + numJsFiles > totalNumJsFiles)",
      "right" : "if (nextJsFileIndex + numJsFiles > totalNumJsFiles)",
      "info" : "IfStatement[11128-11374]:IfStatement[11176-11422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11180-11374]:Block[11228-11422]"
    }, {
      "left" : "throw new FlagUsageException(\"Not enough js files specified. Expected \"\n            + (nextJsFileIndex + numJsFiles - totalNumJsFiles)\n            + \" more in module:\" + name);",
      "right" : "throw new FlagUsageException(\"Not enough js files specified. Expected \"\n            + (nextJsFileIndex + numJsFiles - totalNumJsFiles)\n            + \" more in module:\" + name);",
      "info" : "ThrowStatement[11190-11366]:ThrowStatement[11238-11414]"
    }, {
      "left" : "List<String> moduleJsFiles =\n          jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);",
      "right" : "List<String> moduleJsFiles =\n          jsFiles.subList(nextJsFileIndex, nextJsFileIndex + numJsFiles);",
      "info" : "VariableDeclarationStatement[11381-11483]:VariableDeclarationStatement[11429-11531]"
    }, {
      "left" : "for (JSSourceFile input : createInputs(moduleJsFiles, false))",
      "right" : "for (JSSourceFile input : createInputs(moduleJsFiles, false))",
      "info" : "EnhancedForStatement[11490-11588]:EnhancedForStatement[11538-11636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11552-11588]:Block[11600-11636]"
    }, {
      "left" : "module.add(input);",
      "right" : "module.add(input);",
      "info" : "ExpressionStatement[11562-11580]:ExpressionStatement[11610-11628]"
    }, {
      "left" : "nextJsFileIndex += numJsFiles;",
      "right" : "nextJsFileIndex += numJsFiles;",
      "info" : "ExpressionStatement[11595-11625]:ExpressionStatement[11643-11673]"
    }, {
      "left" : "if (parts.length > 2)",
      "right" : "if (parts.length > 2)",
      "info" : "IfStatement[11633-12209]:IfStatement[11681-12257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11655-12209]:Block[11703-12257]"
    }, {
      "left" : "String depList = parts[2];",
      "right" : "String depList = parts[2];",
      "info" : "VariableDeclarationStatement[11703-11729]:VariableDeclarationStatement[11751-11777]"
    }, {
      "left" : "if (depList.length() > 0)",
      "right" : "if (depList.length() > 0)",
      "info" : "IfStatement[11738-12201]:IfStatement[11786-12249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11764-12201]:Block[11812-12249]"
    }, {
      "left" : "String[] deps = depList.split(\",\");",
      "right" : "String[] deps = depList.split(\",\");",
      "info" : "VariableDeclarationStatement[11776-11811]:VariableDeclarationStatement[11824-11859]"
    }, {
      "left" : "for (String dep : deps)",
      "right" : "for (String dep : deps)",
      "info" : "EnhancedForStatement[11822-12191]:EnhancedForStatement[11870-12239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11846-12191]:Block[11894-12239]"
    }, {
      "left" : "JSModule other = modulesByName.get(dep);",
      "right" : "JSModule other = modulesByName.get(dep);",
      "info" : "VariableDeclarationStatement[11860-11900]:VariableDeclarationStatement[11908-11948]"
    }, {
      "left" : "if (other == null)",
      "right" : "if (other == null)",
      "info" : "IfStatement[11913-12138]:IfStatement[11961-12186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11932-12138]:Block[11980-12186]"
    }, {
      "left" : "throw new FlagUsageException(\"Module '\" + name\n                  + \"' depends on unknown module '\" + dep\n                  + \"'. Be sure to list modules in dependency order.\");",
      "right" : "throw new FlagUsageException(\"Module '\" + name\n                  + \"' depends on unknown module '\" + dep\n                  + \"'. Be sure to list modules in dependency order.\");",
      "info" : "ThrowStatement[11948-12124]:ThrowStatement[11996-12172]"
    }, {
      "left" : "module.addDependency(other);",
      "right" : "module.addDependency(other);",
      "info" : "ExpressionStatement[12151-12179]:ExpressionStatement[12199-12227]"
    }, {
      "left" : "modulesByName.put(name, module);",
      "right" : "modulesByName.put(name, module);",
      "info" : "ExpressionStatement[12217-12249]:ExpressionStatement[12265-12297]"
    }, {
      "left" : "if (nextJsFileIndex < totalNumJsFiles)",
      "right" : "if (nextJsFileIndex < totalNumJsFiles)",
      "info" : "IfStatement[12261-12447]:IfStatement[12309-12495]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12300-12447]:Block[12348-12495]"
    }, {
      "left" : "throw new FlagUsageException(\"Too many js files specified. Expected \"\n          + nextJsFileIndex + \" but found \" + totalNumJsFiles);",
      "right" : "throw new FlagUsageException(\"Too many js files specified. Expected \"\n          + nextJsFileIndex + \" but found \" + totalNumJsFiles);",
      "info" : "ThrowStatement[12308-12441]:ThrowStatement[12356-12489]"
    }, {
      "left" : "return modulesByName.values().toArray(new JSModule[modulesByName.size()]);",
      "right" : "return modulesByName.values().toArray(new JSModule[modulesByName.size()]);",
      "info" : "ReturnStatement[12453-12527]:ReturnStatement[12501-12575]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[12944-12950]:Modifier[12992-12998]"
    }, {
      "left" : "Map<String, String>",
      "right" : "Map<String, String>",
      "info" : "ParameterizedType[12951-12970]:ParameterizedType[12999-13018]"
    }, {
      "left" : "parseModuleWrappers",
      "right" : "parseModuleWrappers",
      "info" : "SimpleName[12971-12990]:SimpleName[13019-13038]"
    }, {
      "left" : "List<String> specs",
      "right" : "List<String> specs",
      "info" : "SingleVariableDeclaration[12991-13009]:SingleVariableDeclaration[13039-13057]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[13017-13035]:SingleVariableDeclaration[13065-13083]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[13044-13062]:SimpleType[13092-13110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13063-14048]:Block[13111-14096]"
    }, {
      "left" : "Preconditions.checkState(specs != null);",
      "right" : "Preconditions.checkState(specs != null);",
      "info" : "ExpressionStatement[13069-13109]:ExpressionStatement[13117-13157]"
    }, {
      "left" : "Map<String, String> wrappers =\n        Maps.newHashMapWithExpectedSize(modules.length);",
      "right" : "Map<String, String> wrappers =\n        Maps.newHashMapWithExpectedSize(modules.length);",
      "info" : "VariableDeclarationStatement[13115-13202]:VariableDeclarationStatement[13163-13250]"
    }, {
      "left" : "for (JSModule m : modules)",
      "right" : "for (JSModule m : modules)",
      "info" : "EnhancedForStatement[13254-13325]:EnhancedForStatement[13302-13373]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13281-13325]:Block[13329-13373]"
    }, {
      "left" : "wrappers.put(m.getName(), \"\");",
      "right" : "wrappers.put(m.getName(), \"\");",
      "info" : "ExpressionStatement[13289-13319]:ExpressionStatement[13337-13367]"
    }, {
      "left" : "for (String spec : specs)",
      "right" : "for (String spec : specs)",
      "info" : "EnhancedForStatement[13331-14023]:EnhancedForStatement[13379-14071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13357-14023]:Block[13405-14071]"
    }, {
      "left" : "int pos = spec.indexOf(':');",
      "right" : "int pos = spec.indexOf(':');",
      "info" : "VariableDeclarationStatement[13405-13433]:VariableDeclarationStatement[13453-13481]"
    }, {
      "left" : "if (pos == -1)",
      "right" : "if (pos == -1)",
      "info" : "IfStatement[13440-13587]:IfStatement[13488-13635]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13455-13587]:Block[13503-13635]"
    }, {
      "left" : "throw new FlagUsageException(\"Expected module wrapper to have \"\n            + \"<name>:<wrapper> format: \" + spec);",
      "right" : "throw new FlagUsageException(\"Expected module wrapper to have \"\n            + \"<name>:<wrapper> format: \" + spec);",
      "info" : "ThrowStatement[13465-13579]:ThrowStatement[13513-13627]"
    }, {
      "left" : "String name = spec.substring(0, pos);",
      "right" : "String name = spec.substring(0, pos);",
      "info" : "VariableDeclarationStatement[13623-13660]:VariableDeclarationStatement[13671-13708]"
    }, {
      "left" : "if (!wrappers.containsKey(name))",
      "right" : "if (!wrappers.containsKey(name))",
      "info" : "IfStatement[13667-13781]:IfStatement[13715-13829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13700-13781]:Block[13748-13829]"
    }, {
      "left" : "throw new FlagUsageException(\"Unknown module: '\" + name + \"'\");",
      "right" : "throw new FlagUsageException(\"Unknown module: '\" + name + \"'\");",
      "info" : "ThrowStatement[13710-13773]:ThrowStatement[13758-13821]"
    }, {
      "left" : "String wrapper = spec.substring(pos + 1);",
      "right" : "String wrapper = spec.substring(pos + 1);",
      "info" : "VariableDeclarationStatement[13788-13829]:VariableDeclarationStatement[13836-13877]"
    }, {
      "left" : "if (!wrapper.contains(\"%s\"))",
      "right" : "if (!wrapper.contains(\"%s\"))",
      "info" : "IfStatement[13836-13982]:IfStatement[13884-14030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13865-13982]:Block[13913-14030]"
    }, {
      "left" : "throw new FlagUsageException(\"No %s placeholder in module wrapper: '\"\n            + wrapper + \"'\");",
      "right" : "throw new FlagUsageException(\"No %s placeholder in module wrapper: '\"\n            + wrapper + \"'\");",
      "info" : "ThrowStatement[13875-13974]:ThrowStatement[13923-14022]"
    }, {
      "left" : "wrappers.put(name, wrapper);",
      "right" : "wrappers.put(name, wrapper);",
      "info" : "ExpressionStatement[13989-14017]:ExpressionStatement[14037-14065]"
    }, {
      "left" : "return wrappers;",
      "right" : "return wrappers;",
      "info" : "ReturnStatement[14028-14044]:ReturnStatement[14076-14092]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[14217-14223]:Modifier[14265-14271]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[14224-14228]:PrimitiveType[14272-14276]"
    }, {
      "left" : "writeOutput",
      "right" : "writeOutput",
      "info" : "SimpleName[14229-14240]:SimpleName[14277-14288]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[14241-14255]:SingleVariableDeclaration[14289-14303]"
    }, {
      "left" : "Compiler compiler",
      "right" : "Compiler compiler",
      "info" : "SingleVariableDeclaration[14257-14274]:SingleVariableDeclaration[14305-14322]"
    }, {
      "left" : "String code",
      "right" : "String code",
      "info" : "SingleVariableDeclaration[14276-14287]:SingleVariableDeclaration[14324-14335]"
    }, {
      "left" : "String wrapper",
      "right" : "String wrapper",
      "info" : "SingleVariableDeclaration[14295-14309]:SingleVariableDeclaration[14343-14357]"
    }, {
      "left" : "String codePlaceholder",
      "right" : "String codePlaceholder",
      "info" : "SingleVariableDeclaration[14311-14333]:SingleVariableDeclaration[14359-14381]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[14342-14353]:SimpleType[14390-14401]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14354-15165]:Block[14402-15213]"
    }, {
      "left" : "int pos = wrapper.indexOf(codePlaceholder);",
      "right" : "int pos = wrapper.indexOf(codePlaceholder);",
      "info" : "VariableDeclarationStatement[14360-14403]:VariableDeclarationStatement[14408-14451]"
    }, {
      "left" : "if (pos != -1)",
      "right" : "if (pos != -1)",
      "info" : "IfStatement[14408-15161]:IfStatement[14456-15209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14423-15100]:Block[14471-15148]"
    }, {
      "left" : "String prefix = \"\";",
      "right" : "String prefix = \"\";",
      "info" : "VariableDeclarationStatement[14431-14450]:VariableDeclarationStatement[14479-14498]"
    }, {
      "left" : "if (pos > 0)",
      "right" : "if (pos > 0)",
      "info" : "IfStatement[14458-14552]:IfStatement[14506-14600]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14471-14552]:Block[14519-14600]"
    }, {
      "left" : "prefix = wrapper.substring(0, pos);",
      "right" : "prefix = wrapper.substring(0, pos);",
      "info" : "ExpressionStatement[14481-14516]:ExpressionStatement[14529-14564]"
    }, {
      "left" : "out.append(prefix);",
      "right" : "out.append(prefix);",
      "info" : "ExpressionStatement[14525-14544]:ExpressionStatement[14573-14592]"
    }, {
      "left" : "out.append(code);",
      "right" : "out.append(code);",
      "info" : "ExpressionStatement[14560-14577]:ExpressionStatement[14608-14625]"
    }, {
      "left" : "int suffixStart = pos + codePlaceholder.length();",
      "right" : "int suffixStart = pos + codePlaceholder.length();",
      "info" : "VariableDeclarationStatement[14585-14634]:VariableDeclarationStatement[14633-14682]"
    }, {
      "left" : "if (suffixStart != wrapper.length())",
      "right" : "if (suffixStart != wrapper.length())",
      "info" : "IfStatement[14641-14779]:IfStatement[14689-14827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14678-14779]:Block[14726-14827]"
    }, {
      "left" : "out.append(wrapper.substring(suffixStart));",
      "right" : "out.append(wrapper.substring(suffixStart));",
      "info" : "ExpressionStatement[14728-14771]:ExpressionStatement[14776-14819]"
    }, {
      "left" : "out.append('\\n');",
      "right" : "out.append('\\n');",
      "info" : "ExpressionStatement[14844-14861]:ExpressionStatement[14892-14909]"
    }, {
      "left" : "if (compiler != null && compiler.getSourceMap() != null)",
      "right" : "if (compiler != null && compiler.getSourceMap() != null)",
      "info" : "IfStatement[14969-15093]:IfStatement[15017-15141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15026-15093]:Block[15074-15141]"
    }, {
      "left" : "compiler.getSourceMap().setWrapperPrefix(prefix);",
      "right" : "compiler.getSourceMap().setWrapperPrefix(prefix);",
      "info" : "ExpressionStatement[15036-15085]:ExpressionStatement[15084-15133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15106-15161]:Block[15154-15209]"
    }, {
      "left" : "out.append(code);",
      "right" : "out.append(code);",
      "info" : "ExpressionStatement[15114-15131]:ExpressionStatement[15162-15179]"
    }, {
      "left" : "out.append('\\n');",
      "right" : "out.append('\\n');",
      "info" : "ExpressionStatement[15138-15155]:ExpressionStatement[15186-15203]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[15277-15284]:Modifier[15325-15332]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[15285-15291]:Modifier[15333-15339]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[15292-15296]:PrimitiveType[15340-15344]"
    }, {
      "left" : "maybeCreateDirsForPath",
      "right" : "maybeCreateDirsForPath",
      "info" : "SimpleName[15297-15319]:SimpleName[15345-15367]"
    }, {
      "left" : "String pathPrefix",
      "right" : "String pathPrefix",
      "info" : "SingleVariableDeclaration[15320-15337]:SingleVariableDeclaration[15368-15385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15339-15676]:Block[15387-15724]"
    }, {
      "left" : "if (pathPrefix.length() > 0)",
      "right" : "if (pathPrefix.length() > 0)",
      "info" : "IfStatement[15345-15672]:IfStatement[15393-15720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15374-15672]:Block[15422-15720]"
    }, {
      "left" : "String dirName =\n          pathPrefix.charAt(pathPrefix.length() - 1) == File.separatorChar\n              ? pathPrefix.substring(0, pathPrefix.length() - 1) : new File(\n                  pathPrefix).getParent();",
      "right" : "String dirName =\n          pathPrefix.charAt(pathPrefix.length() - 1) == File.separatorChar\n              ? pathPrefix.substring(0, pathPrefix.length() - 1) : new File(\n                  pathPrefix).getParent();",
      "info" : "VariableDeclarationStatement[15382-15593]:VariableDeclarationStatement[15430-15641]"
    }, {
      "left" : "if (dirName != null)",
      "right" : "if (dirName != null)",
      "info" : "IfStatement[15600-15666]:IfStatement[15648-15714]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15621-15666]:Block[15669-15714]"
    }, {
      "left" : "new File(dirName).mkdirs();",
      "right" : "new File(dirName).mkdirs();",
      "info" : "ExpressionStatement[15631-15658]:ExpressionStatement[15679-15706]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[15787-15796]:Modifier[15835-15844]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[15797-15800]:PrimitiveType[15845-15848]"
    }, {
      "left" : "doRun",
      "right" : "doRun",
      "info" : "SimpleName[15801-15806]:SimpleName[15849-15854]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[15816-15834]:SimpleType[15864-15882]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[15836-15847]:SimpleType[15884-15895]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15848-17215]:Block[15896-17109]"
    }, {
      "left" : "Compiler.setLoggingLevel(Level.parse(config.loggingLevel));",
      "right" : "Compiler.setLoggingLevel(Level.parse(config.loggingLevel));",
      "info" : "ExpressionStatement[15854-15913]:ExpressionStatement[15902-15961]"
    }, {
      "left" : "List<JSSourceFile> externsList = createExterns();",
      "right" : "List<JSSourceFile> externsList = createExterns();",
      "info" : "VariableDeclarationStatement[15919-15968]:VariableDeclarationStatement[15967-16016]"
    }, {
      "left" : "JSSourceFile[] externs = new JSSourceFile[externsList.size()];",
      "right" : "JSSourceFile[] externs = new JSSourceFile[externsList.size()];",
      "info" : "VariableDeclarationStatement[15973-16035]:VariableDeclarationStatement[16021-16083]"
    }, {
      "left" : "externsList.toArray(externs);",
      "right" : "externsList.toArray(externs);",
      "info" : "ExpressionStatement[16040-16069]:ExpressionStatement[16088-16117]"
    }, {
      "left" : "compiler = createCompiler();",
      "right" : "compiler = createCompiler();",
      "info" : "ExpressionStatement[16075-16103]:ExpressionStatement[16123-16151]"
    }, {
      "left" : "B options = createOptions();",
      "right" : "B options = createOptions();",
      "info" : "VariableDeclarationStatement[16108-16136]:VariableDeclarationStatement[16156-16184]"
    }, {
      "left" : "JSModule[] modules = null;",
      "right" : "JSModule[] modules = null;",
      "info" : "VariableDeclarationStatement[16142-16168]:VariableDeclarationStatement[16190-16216]"
    }, {
      "left" : "Result result;",
      "right" : "Result result;",
      "info" : "VariableDeclarationStatement[16173-16187]:VariableDeclarationStatement[16221-16235]"
    }, {
      "left" : "setRunOptions(options);",
      "right" : "setRunOptions(options);",
      "info" : "ExpressionStatement[16193-16216]:ExpressionStatement[16241-16264]"
    }, {
      "left" : "boolean writeOutputToFile = !options.jsOutputFile.isEmpty();",
      "right" : "boolean writeOutputToFile = !options.jsOutputFile.isEmpty();",
      "info" : "VariableDeclarationStatement[16376-16436]:VariableDeclarationStatement[16270-16330]"
    }, {
      "left" : "if (writeOutputToFile)",
      "right" : "if (writeOutputToFile)",
      "info" : "IfStatement[16441-16536]:IfStatement[16335-16430]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16464-16536]:Block[16358-16430]"
    }, {
      "left" : "out = toWriter(options.jsOutputFile, inputCharset.name());",
      "right" : "out = toWriter(options.jsOutputFile, inputCharset.name());",
      "info" : "ExpressionStatement[16472-16530]:ExpressionStatement[16366-16424]"
    }, {
      "left" : "List<String> jsFiles = config.js;",
      "right" : "List<String> jsFiles = config.js;",
      "info" : "VariableDeclarationStatement[16542-16575]:VariableDeclarationStatement[16436-16469]"
    }, {
      "left" : "List<String> moduleSpecs = config.module;",
      "right" : "List<String> moduleSpecs = config.module;",
      "info" : "VariableDeclarationStatement[16580-16621]:VariableDeclarationStatement[16474-16515]"
    }, {
      "left" : "if (!moduleSpecs.isEmpty())",
      "right" : "if (!moduleSpecs.isEmpty())",
      "info" : "IfStatement[16626-17013]:IfStatement[16520-16907]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16654-16776]:Block[16548-16670]"
    }, {
      "left" : "modules = createJsModules(moduleSpecs, jsFiles);",
      "right" : "modules = createJsModules(moduleSpecs, jsFiles);",
      "info" : "ExpressionStatement[16662-16710]:ExpressionStatement[16556-16604]"
    }, {
      "left" : "result = compiler.compile(externs, modules, options);",
      "right" : "result = compiler.compile(externs, modules, options);",
      "info" : "ExpressionStatement[16717-16770]:ExpressionStatement[16611-16664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16782-17013]:Block[16676-16907]"
    }, {
      "left" : "List<JSSourceFile> inputList = createSourceInputs(jsFiles);",
      "right" : "List<JSSourceFile> inputList = createSourceInputs(jsFiles);",
      "info" : "VariableDeclarationStatement[16790-16849]:VariableDeclarationStatement[16684-16743]"
    }, {
      "left" : "JSSourceFile[] inputs = new JSSourceFile[inputList.size()];",
      "right" : "JSSourceFile[] inputs = new JSSourceFile[inputList.size()];",
      "info" : "VariableDeclarationStatement[16856-16915]:VariableDeclarationStatement[16750-16809]"
    }, {
      "left" : "inputList.toArray(inputs);",
      "right" : "inputList.toArray(inputs);",
      "info" : "ExpressionStatement[16922-16948]:ExpressionStatement[16816-16842]"
    }, {
      "left" : "result = compiler.compile(externs, inputs, options);",
      "right" : "result = compiler.compile(externs, inputs, options);",
      "info" : "ExpressionStatement[16955-17007]:ExpressionStatement[16849-16901]"
    }, {
      "left" : "int errCode = processResults(result, modules, options);",
      "right" : "int errCode = processResults(result, modules, options);",
      "info" : "VariableDeclarationStatement[17019-17074]:VariableDeclarationStatement[16913-16968]"
    }, {
      "left" : "if (writeOutputToFile)",
      "right" : "if (writeOutputToFile)",
      "info" : "IfStatement[17132-17191]:IfStatement[17026-17085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17155-17191]:Block[17049-17085]"
    }, {
      "left" : "((Writer)out).close();",
      "right" : "((Writer)out).close();",
      "info" : "ExpressionStatement[17163-17185]:ExpressionStatement[17057-17079]"
    }, {
      "left" : "return errCode;",
      "right" : "return errCode;",
      "info" : "ReturnStatement[17196-17211]:ReturnStatement[17090-17105]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[17305-17308]:PrimitiveType[17199-17202]"
    }, {
      "left" : "processResults",
      "right" : "processResults",
      "info" : "SimpleName[17309-17323]:SimpleName[17203-17217]"
    }, {
      "left" : "Result result",
      "right" : "Result result",
      "info" : "SingleVariableDeclaration[17324-17337]:SingleVariableDeclaration[17218-17231]"
    }, {
      "left" : "JSModule[] modules",
      "right" : "JSModule[] modules",
      "info" : "SingleVariableDeclaration[17339-17357]:SingleVariableDeclaration[17233-17251]"
    }, {
      "left" : "B options",
      "right" : "B options",
      "info" : "SingleVariableDeclaration[17359-17368]:SingleVariableDeclaration[17253-17262]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[17384-17402]:SimpleType[17278-17296]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[17404-17415]:SimpleType[17298-17309]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17416-20509]:Block[17310-20403]"
    }, {
      "left" : "if (config.computePhaseOrdering)",
      "right" : "if (config.computePhaseOrdering)",
      "info" : "IfStatement[17422-17478]:IfStatement[17316-17372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17455-17478]:Block[17349-17372]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[17463-17472]:ReturnStatement[17357-17366]"
    }, {
      "left" : "if (config.printPassGraph)",
      "right" : "if (config.printPassGraph)",
      "info" : "IfStatement[17484-17724]:IfStatement[17378-17618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17511-17724]:Block[17405-17618]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[17519-17718]:IfStatement[17413-17612]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17551-17578]:Block[17445-17472]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[17561-17570]:ReturnStatement[17455-17464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17584-17718]:Block[17478-17612]"
    }, {
      "left" : "out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));",
      "right" : "out.append(DotFormatter.toDot(compiler.getPassConfig().getPassGraph()));",
      "info" : "ExpressionStatement[17594-17666]:ExpressionStatement[17488-17560]"
    }, {
      "left" : "out.append('\\n');",
      "right" : "out.append('\\n');",
      "info" : "ExpressionStatement[17675-17692]:ExpressionStatement[17569-17586]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[17701-17710]:ReturnStatement[17595-17604]"
    }, {
      "left" : "if (config.printAst)",
      "right" : "if (config.printAst)",
      "info" : "IfStatement[17730-18005]:IfStatement[17624-17899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17751-18005]:Block[17645-17899]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[17759-17999]:IfStatement[17653-17893]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17791-17818]:Block[17685-17712]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[17801-17810]:ReturnStatement[17695-17704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17824-17999]:Block[17718-17893]"
    }, {
      "left" : "ControlFlowGraph<Node> cfg = compiler.computeCFG();",
      "right" : "ControlFlowGraph<Node> cfg = compiler.computeCFG();",
      "info" : "VariableDeclarationStatement[17834-17885]:VariableDeclarationStatement[17728-17779]"
    }, {
      "left" : "DotFormatter.appendDot(compiler.getRoot(), cfg, out);",
      "right" : "DotFormatter.appendDot(compiler.getRoot(), cfg, out);",
      "info" : "ExpressionStatement[17894-17947]:ExpressionStatement[17788-17841]"
    }, {
      "left" : "out.append('\\n');",
      "right" : "out.append('\\n');",
      "info" : "ExpressionStatement[17956-17973]:ExpressionStatement[17850-17867]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[17982-17991]:ReturnStatement[17876-17885]"
    }, {
      "left" : "if (config.printTree)",
      "right" : "if (config.printTree)",
      "info" : "IfStatement[18011-18285]:IfStatement[17905-18179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18033-18285]:Block[17927-18179]"
    }, {
      "left" : "if (compiler.getRoot() == null)",
      "right" : "if (compiler.getRoot() == null)",
      "info" : "IfStatement[18041-18279]:IfStatement[17935-18173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18073-18170]:Block[17967-18064]"
    }, {
      "left" : "out.append(\"Code contains errors; no tree was generated.\\n\");",
      "right" : "out.append(\"Code contains errors; no tree was generated.\\n\");",
      "info" : "ExpressionStatement[18083-18144]:ExpressionStatement[17977-18038]"
    }, {
      "left" : "return 1;",
      "right" : "return 1;",
      "info" : "ReturnStatement[18153-18162]:ReturnStatement[18047-18056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18176-18279]:Block[18070-18173]"
    }, {
      "left" : "compiler.getRoot().appendStringTree(out);",
      "right" : "compiler.getRoot().appendStringTree(out);",
      "info" : "ExpressionStatement[18186-18227]:ExpressionStatement[18080-18121]"
    }, {
      "left" : "out.append(\"\\n\");",
      "right" : "out.append(\"\\n\");",
      "info" : "ExpressionStatement[18236-18253]:ExpressionStatement[18130-18147]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[18262-18271]:ReturnStatement[18156-18165]"
    }, {
      "left" : "if (result.success)",
      "right" : "if (result.success)",
      "info" : "IfStatement[18291-20399]:IfStatement[18185-20293]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18311-20399]:Block[18205-20293]"
    }, {
      "left" : "if (modules == null)",
      "right" : "if (modules == null)",
      "info" : "IfStatement[18319-19973]:IfStatement[18213-19867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18340-18550]:Block[18234-18444]"
    }, {
      "left" : "writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,\n            config.outputWrapperMarker);",
      "right" : "writeOutput(out, compiler, compiler.toSource(), config.outputWrapper,\n            config.outputWrapperMarker);",
      "info" : "ExpressionStatement[18350-18460]:ExpressionStatement[18244-18354]"
    }, {
      "left" : "outputSourceMap(options);",
      "right" : "outputSourceMap(options);",
      "info" : "ExpressionStatement[18517-18542]:ExpressionStatement[18411-18436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18556-19973]:Block[18450-19867]"
    }, {
      "left" : "String moduleFilePrefix = config.moduleOutputPathPrefix;",
      "right" : "String moduleFilePrefix = config.moduleOutputPathPrefix;",
      "info" : "VariableDeclarationStatement[18566-18622]:VariableDeclarationStatement[18460-18516]"
    }, {
      "left" : "maybeCreateDirsForPath(moduleFilePrefix);",
      "right" : "maybeCreateDirsForPath(moduleFilePrefix);",
      "info" : "ExpressionStatement[18631-18672]:ExpressionStatement[18525-18566]"
    }, {
      "left" : "Map<String, String> moduleWrappers =\n            parseModuleWrappers(config.moduleWrapper, modules);",
      "right" : "Map<String, String> moduleWrappers =\n            parseModuleWrappers(config.moduleWrapper, modules);",
      "info" : "VariableDeclarationStatement[18681-18781]:VariableDeclarationStatement[18575-18675]"
    }, {
      "left" : "Writer mapOut = null;",
      "right" : "Writer mapOut = null;",
      "info" : "VariableDeclarationStatement[18952-18973]:VariableDeclarationStatement[18846-18867]"
    }, {
      "left" : "if (!shouldGenerateMapPerModule(options))",
      "right" : "if (!shouldGenerateMapPerModule(options))",
      "info" : "IfStatement[18983-19101]:IfStatement[18877-18995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19025-19101]:Block[18919-18995]"
    }, {
      "left" : "mapOut = toWriter(expandSourceMapPath(options, null));",
      "right" : "mapOut = toWriter(expandSourceMapPath(options, null));",
      "info" : "ExpressionStatement[19037-19091]:ExpressionStatement[18931-18985]"
    }, {
      "left" : "for (JSModule m : modules)",
      "right" : "for (JSModule m : modules)",
      "info" : "EnhancedForStatement[19111-19898]:EnhancedForStatement[19005-19792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19138-19898]:Block[19032-19792]"
    }, {
      "left" : "if (shouldGenerateMapPerModule(options))",
      "right" : "if (shouldGenerateMapPerModule(options))",
      "info" : "IfStatement[19150-19268]:IfStatement[19044-19162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19191-19268]:Block[19085-19162]"
    }, {
      "left" : "mapOut = toWriter(expandSourceMapPath(options, m));",
      "right" : "mapOut = toWriter(expandSourceMapPath(options, m));",
      "info" : "ExpressionStatement[19205-19256]:ExpressionStatement[19099-19150]"
    }, {
      "left" : "Writer writer = toWriter(\n              moduleFilePrefix + m.getName() + \".js\");",
      "right" : "Writer writer = toWriter(\n              moduleFilePrefix + m.getName() + \".js\");",
      "info" : "VariableDeclarationStatement[19280-19360]:VariableDeclarationStatement[19174-19254]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[19372-19471]:IfStatement[19266-19365]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19413-19471]:Block[19307-19365]"
    }, {
      "left" : "compiler.getSourceMap().reset();",
      "right" : "compiler.getSourceMap().reset();",
      "info" : "ExpressionStatement[19427-19459]:ExpressionStatement[19321-19353]"
    }, {
      "left" : "writeOutput(writer, compiler, compiler.toSource(m), moduleWrappers.get(\n              m.getName()), \"%s\");",
      "right" : "writeOutput(writer, compiler, compiler.toSource(m), moduleWrappers.get(\n              m.getName()), \"%s\");",
      "info" : "ExpressionStatement[19483-19589]:ExpressionStatement[19377-19483]"
    }, {
      "left" : "if (options.sourceMapOutputPath != null)",
      "right" : "if (options.sourceMapOutputPath != null)",
      "info" : "IfStatement[19601-19722]:IfStatement[19495-19616]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19642-19722]:Block[19536-19616]"
    }, {
      "left" : "compiler.getSourceMap().appendTo(mapOut, m.getName());",
      "right" : "compiler.getSourceMap().appendTo(mapOut, m.getName());",
      "info" : "ExpressionStatement[19656-19710]:ExpressionStatement[19550-19604]"
    }, {
      "left" : "writer.close();",
      "right" : "writer.close();",
      "info" : "ExpressionStatement[19734-19749]:ExpressionStatement[19628-19643]"
    }, {
      "left" : "if (shouldGenerateMapPerModule(options) && mapOut != null)",
      "right" : "if (shouldGenerateMapPerModule(options) && mapOut != null)",
      "info" : "IfStatement[19761-19888]:IfStatement[19655-19782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19820-19888]:Block[19714-19782]"
    }, {
      "left" : "mapOut.close();",
      "right" : "mapOut.close();",
      "info" : "ExpressionStatement[19834-19849]:ExpressionStatement[19728-19743]"
    }, {
      "left" : "mapOut = null;",
      "right" : "mapOut = null;",
      "info" : "ExpressionStatement[19862-19876]:ExpressionStatement[19756-19770]"
    }, {
      "left" : "if (mapOut != null)",
      "right" : "if (mapOut != null)",
      "info" : "IfStatement[19908-19965]:IfStatement[19802-19859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19928-19965]:Block[19822-19859]"
    }, {
      "left" : "mapOut.close();",
      "right" : "mapOut.close();",
      "info" : "ExpressionStatement[19940-19955]:ExpressionStatement[19834-19849]"
    }, {
      "left" : "if (options.externExportsPath != null)",
      "right" : "if (options.externExportsPath != null)",
      "info" : "IfStatement[20022-20227]:IfStatement[19916-20121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20061-20227]:Block[19955-20121]"
    }, {
      "left" : "Writer eeOut =\n            openExternExportsStream(options, options.jsOutputFile);",
      "right" : "Writer eeOut =\n            openExternExportsStream(options, options.jsOutputFile);",
      "info" : "VariableDeclarationStatement[20071-20153]:VariableDeclarationStatement[19965-20047]"
    }, {
      "left" : "eeOut.append(result.externExport);",
      "right" : "eeOut.append(result.externExport);",
      "info" : "ExpressionStatement[20162-20196]:ExpressionStatement[20056-20090]"
    }, {
      "left" : "eeOut.close();",
      "right" : "eeOut.close();",
      "info" : "ExpressionStatement[20205-20219]:ExpressionStatement[20099-20113]"
    }, {
      "left" : "outputNameMaps(options);",
      "right" : "outputNameMaps(options);",
      "info" : "ExpressionStatement[20301-20325]:ExpressionStatement[20195-20219]"
    }, {
      "left" : "outputManifest();",
      "right" : "outputManifest();",
      "info" : "ExpressionStatement[20376-20393]:ExpressionStatement[20270-20287]"
    }, {
      "left" : "return Math.min(result.errors.length, 0x7f);",
      "right" : "return Math.min(result.errors.length, 0x7f);",
      "info" : "ReturnStatement[20461-20505]:ReturnStatement[20355-20399]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[20751-20758]:Modifier[20645-20652]"
    }, {
      "left" : "Charset",
      "right" : "Charset",
      "info" : "SimpleType[20759-20766]:SimpleType[20653-20660]"
    }, {
      "left" : "getInputCharset",
      "right" : "getInputCharset",
      "info" : "SimpleName[20767-20782]:SimpleName[20661-20676]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[20792-20810]:SimpleType[20686-20704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20811-21090]:Block[20705-20984]"
    }, {
      "left" : "if (!config.charset.isEmpty())",
      "right" : "if (!config.charset.isEmpty())",
      "info" : "IfStatement[20817-21059]:IfStatement[20711-20953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20848-21059]:Block[20742-20953]"
    }, {
      "left" : "if (!Charset.isSupported(config.charset))",
      "right" : "if (!Charset.isSupported(config.charset))",
      "info" : "IfStatement[20856-21007]:IfStatement[20750-20901]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20898-21007]:Block[20792-20901]"
    }, {
      "left" : "throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");",
      "right" : "throw new FlagUsageException(config.charset +\n            \" is not a valid charset name.\");",
      "info" : "ThrowStatement[20908-20999]:ThrowStatement[20802-20893]"
    }, {
      "left" : "return Charset.forName(config.charset);",
      "right" : "return Charset.forName(config.charset);",
      "info" : "ReturnStatement[21014-21053]:ReturnStatement[20908-20947]"
    }, {
      "left" : "return Charsets.UTF_8;",
      "right" : "return Charsets.UTF_8;",
      "info" : "ReturnStatement[21064-21086]:ReturnStatement[20958-20980]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[21575-21584]:Modifier[21790-21799]"
    }, {
      "left" : "List<JSSourceFile>",
      "right" : "List<JSSourceFile>",
      "info" : "ParameterizedType[21585-21603]:ParameterizedType[21800-21818]"
    }, {
      "left" : "createExterns",
      "right" : "createExterns",
      "info" : "SimpleName[21604-21617]:SimpleName[21819-21832]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[21627-21645]:SimpleType[21842-21860]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[21653-21664]:SimpleType[21868-21879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21665-21717]:Block[21880-21932]"
    }, {
      "left" : "return createExternInputs(config.externs);",
      "right" : "return createExternInputs(config.externs);",
      "info" : "ReturnStatement[21671-21713]:ReturnStatement[21886-21928]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[21945-21952]:Modifier[22160-22167]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[21953-21960]:PrimitiveType[22168-22175]"
    }, {
      "left" : "shouldGenerateMapPerModule",
      "right" : "shouldGenerateMapPerModule",
      "info" : "SimpleName[21961-21987]:SimpleName[22176-22202]"
    }, {
      "left" : "B options",
      "right" : "B options",
      "info" : "SingleVariableDeclaration[21988-21997]:SingleVariableDeclaration[22203-22212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21999-22113]:Block[22214-22328]"
    }, {
      "left" : "return options.sourceMapOutputPath != null\n        && options.sourceMapOutputPath.contains(\"%outname%\");",
      "right" : "return options.sourceMapOutputPath != null\n        && options.sourceMapOutputPath.contains(\"%outname%\");",
      "info" : "ReturnStatement[22005-22109]:ReturnStatement[22220-22324]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[22389-22396]:Modifier[22604-22611]"
    }, {
      "left" : "Writer",
      "right" : "Writer",
      "info" : "SimpleType[22397-22403]:SimpleType[22612-22618]"
    }, {
      "left" : "openExternExportsStream",
      "right" : "openExternExportsStream",
      "info" : "SimpleName[22404-22427]:SimpleName[22619-22642]"
    }, {
      "left" : "B options",
      "right" : "B options",
      "info" : "SingleVariableDeclaration[22428-22437]:SingleVariableDeclaration[22643-22652]"
    }, {
      "left" : "String path",
      "right" : "String path",
      "info" : "SingleVariableDeclaration[22445-22456]:SingleVariableDeclaration[22660-22671]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22465-22476]:SimpleType[22680-22691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22477-22790]:Block[22692-23005]"
    }, {
      "left" : "if (options.externExportsPath == null)",
      "right" : "if (options.externExportsPath == null)",
      "info" : "IfStatement[22483-22548]:IfStatement[22698-22763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22522-22548]:Block[22737-22763]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[22530-22542]:ReturnStatement[22745-22757]"
    }, {
      "left" : "String exPath = options.externExportsPath;",
      "right" : "String exPath = options.externExportsPath;",
      "info" : "VariableDeclarationStatement[22554-22596]:VariableDeclarationStatement[22769-22811]"
    }, {
      "left" : "if (!exPath.contains(File.separator))",
      "right" : "if (!exPath.contains(File.separator))",
      "info" : "IfStatement[22602-22756]:IfStatement[22817-22971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22640-22756]:Block[22855-22971]"
    }, {
      "left" : "File outputFile = new File(path);",
      "right" : "File outputFile = new File(path);",
      "info" : "VariableDeclarationStatement[22648-22681]:VariableDeclarationStatement[22863-22896]"
    }, {
      "left" : "exPath = outputFile.getParent() + File.separatorChar + exPath;",
      "right" : "exPath = outputFile.getParent() + File.separatorChar + exPath;",
      "info" : "ExpressionStatement[22688-22750]:ExpressionStatement[22903-22965]"
    }, {
      "left" : "return toWriter(exPath);",
      "right" : "return toWriter(exPath);",
      "info" : "ReturnStatement[22762-22786]:ReturnStatement[22977-23001]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[23452-23459]:Modifier[23667-23674]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[23460-23466]:SimpleType[23675-23681]"
    }, {
      "left" : "expandCommandLinePath",
      "right" : "expandCommandLinePath",
      "info" : "SimpleName[23467-23488]:SimpleName[23682-23703]"
    }, {
      "left" : "String path",
      "right" : "String path",
      "info" : "SingleVariableDeclaration[23496-23507]:SingleVariableDeclaration[23711-23722]"
    }, {
      "left" : "JSModule forModule",
      "right" : "JSModule forModule",
      "info" : "SingleVariableDeclaration[23509-23527]:SingleVariableDeclaration[23724-23742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23529-23833]:Block[23744-24048]"
    }, {
      "left" : "String sub;",
      "right" : "String sub;",
      "info" : "VariableDeclarationStatement[23535-23546]:VariableDeclarationStatement[23750-23761]"
    }, {
      "left" : "if (forModule != null)",
      "right" : "if (forModule != null)",
      "info" : "IfStatement[23551-23786]:IfStatement[23766-24001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23574-23654]:Block[23789-23869]"
    }, {
      "left" : "sub = config.moduleOutputPathPrefix + forModule.getName() + \".js\";",
      "right" : "sub = config.moduleOutputPathPrefix + forModule.getName() + \".js\";",
      "info" : "ExpressionStatement[23582-23648]:ExpressionStatement[23797-23863]"
    }, {
      "left" : "if (!config.module.isEmpty())",
      "right" : "if (!config.module.isEmpty())",
      "info" : "IfStatement[23660-23786]:IfStatement[23875-24001]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23690-23740]:Block[23905-23955]"
    }, {
      "left" : "sub = config.moduleOutputPathPrefix;",
      "right" : "sub = config.moduleOutputPathPrefix;",
      "info" : "ExpressionStatement[23698-23734]:ExpressionStatement[23913-23949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23746-23786]:Block[23961-24001]"
    }, {
      "left" : "sub = config.jsOutputFile;",
      "right" : "sub = config.jsOutputFile;",
      "info" : "ExpressionStatement[23754-23780]:ExpressionStatement[23969-23995]"
    }, {
      "left" : "return path.replace(\"%outname%\", sub);",
      "right" : "return path.replace(\"%outname%\", sub);",
      "info" : "ReturnStatement[23791-23829]:ReturnStatement[24006-24044]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[23881-23899]:MarkerAnnotation[24096-24114]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[23902-23908]:SimpleType[24117-24123]"
    }, {
      "left" : "expandSourceMapPath",
      "right" : "expandSourceMapPath",
      "info" : "SimpleName[23909-23928]:SimpleName[24124-24143]"
    }, {
      "left" : "B options",
      "right" : "B options",
      "info" : "SingleVariableDeclaration[23929-23938]:SingleVariableDeclaration[24144-24153]"
    }, {
      "left" : "JSModule forModule",
      "right" : "JSModule forModule",
      "info" : "SingleVariableDeclaration[23940-23958]:SingleVariableDeclaration[24155-24173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23960-24120]:Block[24175-24335]"
    }, {
      "left" : "if (Strings.isEmpty(options.sourceMapOutputPath))",
      "right" : "if (Strings.isEmpty(options.sourceMapOutputPath))",
      "info" : "IfStatement[23966-24042]:IfStatement[24181-24257]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24016-24042]:Block[24231-24257]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24024-24036]:ReturnStatement[24239-24251]"
    }, {
      "left" : "return expandCommandLinePath(options.sourceMapOutputPath, forModule);",
      "right" : "return expandCommandLinePath(options.sourceMapOutputPath, forModule);",
      "info" : "ReturnStatement[24047-24116]:ReturnStatement[24262-24331]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[24170-24188]:MarkerAnnotation[24385-24403]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[24191-24197]:SimpleType[24406-24412]"
    }, {
      "left" : "expandManifest",
      "right" : "expandManifest",
      "info" : "SimpleName[24198-24212]:SimpleName[24413-24427]"
    }, {
      "left" : "JSModule forModule",
      "right" : "JSModule forModule",
      "info" : "SingleVariableDeclaration[24213-24231]:SingleVariableDeclaration[24428-24446]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24233-24381]:Block[24448-24596]"
    }, {
      "left" : "if (Strings.isEmpty(config.outputManifest))",
      "right" : "if (Strings.isEmpty(config.outputManifest))",
      "info" : "IfStatement[24239-24309]:IfStatement[24454-24524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24283-24309]:Block[24498-24524]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24291-24303]:ReturnStatement[24506-24518]"
    }, {
      "left" : "return expandCommandLinePath(config.outputManifest, forModule);",
      "right" : "return expandCommandLinePath(config.outputManifest, forModule);",
      "info" : "ReturnStatement[24314-24377]:ReturnStatement[24529-24592]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24482-24489]:Modifier[24697-24704]"
    }, {
      "left" : "Writer",
      "right" : "Writer",
      "info" : "SimpleType[24490-24496]:SimpleType[24705-24711]"
    }, {
      "left" : "toWriter",
      "right" : "toWriter",
      "info" : "SimpleName[24497-24505]:SimpleName[24712-24720]"
    }, {
      "left" : "String fileName",
      "right" : "String fileName",
      "info" : "SingleVariableDeclaration[24506-24521]:SingleVariableDeclaration[24721-24736]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24530-24541]:SimpleType[24745-24756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24542-24724]:Block[24757-24939]"
    }, {
      "left" : "if (fileName == null)",
      "right" : "if (fileName == null)",
      "info" : "IfStatement[24548-24596]:IfStatement[24763-24811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24570-24596]:Block[24785-24811]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24578-24590]:ReturnStatement[24793-24805]"
    }, {
      "left" : "return new BufferedWriter(new FileWriter(fileName));",
      "right" : "return new BufferedWriter(new FileWriter(fileName));",
      "info" : "ReturnStatement[24668-24720]:ReturnStatement[24883-24935]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[24825-24832]:Modifier[25040-25047]"
    }, {
      "left" : "Writer",
      "right" : "Writer",
      "info" : "SimpleType[24833-24839]:SimpleType[25048-25054]"
    }, {
      "left" : "toWriter",
      "right" : "toWriter",
      "info" : "SimpleName[24840-24848]:SimpleName[25055-25063]"
    }, {
      "left" : "String fileName",
      "right" : "String fileName",
      "info" : "SingleVariableDeclaration[24849-24864]:SingleVariableDeclaration[25064-25079]"
    }, {
      "left" : "String charSet",
      "right" : "String charSet",
      "info" : "SingleVariableDeclaration[24866-24880]:SingleVariableDeclaration[25081-25095]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[24895-24906]:SimpleType[25110-25121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24907-25127]:Block[25122-25342]"
    }, {
      "left" : "if (fileName == null)",
      "right" : "if (fileName == null)",
      "info" : "IfStatement[24913-24961]:IfStatement[25128-25176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24935-24961]:Block[25150-25176]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[24943-24955]:ReturnStatement[25158-25170]"
    }, {
      "left" : "return new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(fileName), charSet));",
      "right" : "return new BufferedWriter(\n        new OutputStreamWriter(new FileOutputStream(fileName), charSet));",
      "info" : "ReturnStatement[25023-25123]:ReturnStatement[25238-25338]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25286-25293]:Modifier[25501-25508]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[25294-25298]:PrimitiveType[25509-25513]"
    }, {
      "left" : "outputSourceMap",
      "right" : "outputSourceMap",
      "info" : "SimpleName[25299-25314]:SimpleName[25514-25529]"
    }, {
      "left" : "B options",
      "right" : "B options",
      "info" : "SingleVariableDeclaration[25315-25324]:SingleVariableDeclaration[25530-25539]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[25339-25350]:SimpleType[25554-25565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25351-25595]:Block[25566-25810]"
    }, {
      "left" : "if (Strings.isEmpty(options.sourceMapOutputPath))",
      "right" : "if (Strings.isEmpty(options.sourceMapOutputPath))",
      "info" : "IfStatement[25357-25428]:IfStatement[25572-25643]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25407-25428]:Block[25622-25643]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[25415-25422]:ReturnStatement[25630-25637]"
    }, {
      "left" : "String outName = expandSourceMapPath(options, null);",
      "right" : "String outName = expandSourceMapPath(options, null);",
      "info" : "VariableDeclarationStatement[25434-25486]:VariableDeclarationStatement[25649-25701]"
    }, {
      "left" : "Writer out = toWriter(outName);",
      "right" : "Writer out = toWriter(outName);",
      "info" : "VariableDeclarationStatement[25491-25522]:VariableDeclarationStatement[25706-25737]"
    }, {
      "left" : "compiler.getSourceMap().appendTo(out, outName);",
      "right" : "compiler.getSourceMap().appendTo(out, outName);",
      "info" : "ExpressionStatement[25527-25574]:ExpressionStatement[25742-25789]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[25579-25591]:ExpressionStatement[25794-25806]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[25798-25805]:Modifier[26013-26020]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[25806-25812]:SimpleType[26021-26027]"
    }, {
      "left" : "getMapPath",
      "right" : "getMapPath",
      "info" : "SimpleName[25813-25823]:SimpleName[26028-26038]"
    }, {
      "left" : "String outputFile",
      "right" : "String outputFile",
      "info" : "SingleVariableDeclaration[25824-25841]:SingleVariableDeclaration[26039-26056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25843-26603]:Block[26058-26818]"
    }, {
      "left" : "String basePath = \"\";",
      "right" : "String basePath = \"\";",
      "info" : "VariableDeclarationStatement[25849-25870]:VariableDeclarationStatement[26064-26085]"
    }, {
      "left" : "if (outputFile.equals(\"\"))",
      "right" : "if (outputFile.equals(\"\"))",
      "info" : "IfStatement[25876-26577]:IfStatement[26091-26792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25903-26175]:Block[26118-26390]"
    }, {
      "left" : "if (!config.moduleOutputPathPrefix.equals(\"\"))",
      "right" : "if (!config.moduleOutputPathPrefix.equals(\"\"))",
      "info" : "IfStatement[26015-26169]:IfStatement[26230-26384]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26062-26121]:Block[26277-26336]"
    }, {
      "left" : "basePath = config.moduleOutputPathPrefix;",
      "right" : "basePath = config.moduleOutputPathPrefix;",
      "info" : "ExpressionStatement[26072-26113]:ExpressionStatement[26287-26328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26127-26169]:Block[26342-26384]"
    }, {
      "left" : "basePath = \"jscompiler\";",
      "right" : "basePath = \"jscompiler\";",
      "info" : "ExpressionStatement[26137-26161]:ExpressionStatement[26352-26376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26181-26577]:Block[26396-26792]"
    }, {
      "left" : "File file = new File(outputFile);",
      "right" : "File file = new File(outputFile);",
      "info" : "VariableDeclarationStatement[26231-26264]:VariableDeclarationStatement[26446-26479]"
    }, {
      "left" : "String outputFileName = file.getName();",
      "right" : "String outputFileName = file.getName();",
      "info" : "VariableDeclarationStatement[26272-26311]:VariableDeclarationStatement[26487-26526]"
    }, {
      "left" : "if (outputFileName.endsWith(\".js\"))",
      "right" : "if (outputFileName.endsWith(\".js\"))",
      "info" : "IfStatement[26357-26497]:IfStatement[26572-26712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26393-26497]:Block[26608-26712]"
    }, {
      "left" : "outputFileName =\n            outputFileName.substring(0, outputFileName.length() - 3);",
      "right" : "outputFileName =\n            outputFileName.substring(0, outputFileName.length() - 3);",
      "info" : "ExpressionStatement[26403-26489]:ExpressionStatement[26618-26704]"
    }, {
      "left" : "basePath = file.getParent() + File.separatorChar + outputFileName;",
      "right" : "basePath = file.getParent() + File.separatorChar + outputFileName;",
      "info" : "ExpressionStatement[26505-26571]:ExpressionStatement[26720-26786]"
    }, {
      "left" : "return basePath;",
      "right" : "return basePath;",
      "info" : "ReturnStatement[26583-26599]:ReturnStatement[26798-26814]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[26729-26736]:Modifier[26944-26951]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[26737-26741]:PrimitiveType[26952-26956]"
    }, {
      "left" : "outputNameMaps",
      "right" : "outputNameMaps",
      "info" : "SimpleName[26742-26756]:SimpleName[26957-26971]"
    }, {
      "left" : "B options",
      "right" : "B options",
      "info" : "SingleVariableDeclaration[26757-26766]:SingleVariableDeclaration[26972-26981]"
    }, {
      "left" : "FlagUsageException",
      "right" : "FlagUsageException",
      "info" : "SimpleType[26775-26793]:SimpleType[26990-27008]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[26801-26812]:SimpleType[27016-27027]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26813-28784]:Block[27028-28999]"
    }, {
      "left" : "String propertyMapOutputPath = null;",
      "right" : "String propertyMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[26820-26856]:VariableDeclarationStatement[27035-27071]"
    }, {
      "left" : "String variableMapOutputPath = null;",
      "right" : "String variableMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[26861-26897]:VariableDeclarationStatement[27076-27112]"
    }, {
      "left" : "String functionInformationMapOutputPath = null;",
      "right" : "String functionInformationMapOutputPath = null;",
      "info" : "VariableDeclarationStatement[26902-26949]:VariableDeclarationStatement[27117-27164]"
    }, {
      "left" : "if (config.createNameMapFiles)",
      "right" : "if (config.createNameMapFiles)",
      "info" : "IfStatement[27000-27288]:IfStatement[27215-27503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27031-27288]:Block[27246-27503]"
    }, {
      "left" : "String basePath = getMapPath(options.jsOutputFile);",
      "right" : "String basePath = getMapPath(options.jsOutputFile);",
      "info" : "VariableDeclarationStatement[27039-27090]:VariableDeclarationStatement[27254-27305]"
    }, {
      "left" : "propertyMapOutputPath = basePath + \"_props_map.out\";",
      "right" : "propertyMapOutputPath = basePath + \"_props_map.out\";",
      "info" : "ExpressionStatement[27098-27150]:ExpressionStatement[27313-27365]"
    }, {
      "left" : "variableMapOutputPath = basePath + \"_vars_map.out\";",
      "right" : "variableMapOutputPath = basePath + \"_vars_map.out\";",
      "info" : "ExpressionStatement[27157-27208]:ExpressionStatement[27372-27423]"
    }, {
      "left" : "functionInformationMapOutputPath = basePath + \"_functions_map.out\";",
      "right" : "functionInformationMapOutputPath = basePath + \"_functions_map.out\";",
      "info" : "ExpressionStatement[27215-27282]:ExpressionStatement[27430-27497]"
    }, {
      "left" : "if (!config.variableMapOutputFile.equals(\"\"))",
      "right" : "if (!config.variableMapOutputFile.equals(\"\"))",
      "info" : "IfStatement[27329-27649]:IfStatement[27544-27864]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27375-27649]:Block[27590-27864]"
    }, {
      "left" : "if (variableMapOutputPath != null)",
      "right" : "if (variableMapOutputPath != null)",
      "info" : "IfStatement[27383-27582]:IfStatement[27598-27797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27418-27582]:Block[27633-27797]"
    }, {
      "left" : "throw new FlagUsageException(\"The flags variable_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "right" : "throw new FlagUsageException(\"The flags variable_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "info" : "ThrowStatement[27428-27574]:ThrowStatement[27643-27789]"
    }, {
      "left" : "variableMapOutputPath = config.variableMapOutputFile;",
      "right" : "variableMapOutputPath = config.variableMapOutputFile;",
      "info" : "ExpressionStatement[27590-27643]:ExpressionStatement[27805-27858]"
    }, {
      "left" : "if (!config.propertyMapOutputFile.equals(\"\"))",
      "right" : "if (!config.propertyMapOutputFile.equals(\"\"))",
      "info" : "IfStatement[27655-27975]:IfStatement[27870-28190]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27701-27975]:Block[27916-28190]"
    }, {
      "left" : "if (propertyMapOutputPath != null)",
      "right" : "if (propertyMapOutputPath != null)",
      "info" : "IfStatement[27709-27908]:IfStatement[27924-28123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27744-27908]:Block[27959-28123]"
    }, {
      "left" : "throw new FlagUsageException(\"The flags property_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "right" : "throw new FlagUsageException(\"The flags property_map_output_file and \"\n            + \"create_name_map_files cannot both be used simultaniously.\");",
      "info" : "ThrowStatement[27754-27900]:ThrowStatement[27969-28115]"
    }, {
      "left" : "propertyMapOutputPath = config.propertyMapOutputFile;",
      "right" : "propertyMapOutputPath = config.propertyMapOutputFile;",
      "info" : "ExpressionStatement[27916-27969]:ExpressionStatement[28131-28184]"
    }, {
      "left" : "if (variableMapOutputPath != null)",
      "right" : "if (variableMapOutputPath != null)",
      "info" : "IfStatement[28005-28165]:IfStatement[28220-28380]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28040-28165]:Block[28255-28380]"
    }, {
      "left" : "if (compiler.getVariableMap() != null)",
      "right" : "if (compiler.getVariableMap() != null)",
      "info" : "IfStatement[28048-28159]:IfStatement[28263-28374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28087-28159]:Block[28302-28374]"
    }, {
      "left" : "compiler.getVariableMap().save(variableMapOutputPath);",
      "right" : "compiler.getVariableMap().save(variableMapOutputPath);",
      "info" : "ExpressionStatement[28097-28151]:ExpressionStatement[28312-28366]"
    }, {
      "left" : "if (propertyMapOutputPath != null)",
      "right" : "if (propertyMapOutputPath != null)",
      "info" : "IfStatement[28171-28331]:IfStatement[28386-28546]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28206-28331]:Block[28421-28546]"
    }, {
      "left" : "if (compiler.getPropertyMap() != null)",
      "right" : "if (compiler.getPropertyMap() != null)",
      "info" : "IfStatement[28214-28325]:IfStatement[28429-28540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28253-28325]:Block[28468-28540]"
    }, {
      "left" : "compiler.getPropertyMap().save(propertyMapOutputPath);",
      "right" : "compiler.getPropertyMap().save(propertyMapOutputPath);",
      "info" : "ExpressionStatement[28263-28317]:ExpressionStatement[28478-28532]"
    }, {
      "left" : "if (functionInformationMapOutputPath != null)",
      "right" : "if (functionInformationMapOutputPath != null)",
      "info" : "IfStatement[28337-28780]:IfStatement[28552-28995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28383-28780]:Block[28598-28995]"
    }, {
      "left" : "if (compiler.getFunctionalInformationMap() != null)",
      "right" : "if (compiler.getFunctionalInformationMap() != null)",
      "info" : "IfStatement[28391-28774]:IfStatement[28606-28989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28443-28774]:Block[28658-28989]"
    }, {
      "left" : "FileOutputStream file =\n            new FileOutputStream(functionInformationMapOutputPath);",
      "right" : "FileOutputStream file =\n            new FileOutputStream(functionInformationMapOutputPath);",
      "info" : "VariableDeclarationStatement[28453-28544]:VariableDeclarationStatement[28668-28759]"
    }, {
      "left" : "CodedOutputStream outputStream = CodedOutputStream.newInstance(file);",
      "right" : "CodedOutputStream outputStream = CodedOutputStream.newInstance(file);",
      "info" : "VariableDeclarationStatement[28553-28622]:VariableDeclarationStatement[28768-28837]"
    }, {
      "left" : "compiler.getFunctionalInformationMap().writeTo(outputStream);",
      "right" : "compiler.getFunctionalInformationMap().writeTo(outputStream);",
      "info" : "ExpressionStatement[28631-28692]:ExpressionStatement[28846-28907]"
    }, {
      "left" : "outputStream.flush();",
      "right" : "outputStream.flush();",
      "info" : "ExpressionStatement[28701-28722]:ExpressionStatement[28916-28937]"
    }, {
      "left" : "file.flush();",
      "right" : "file.flush();",
      "info" : "ExpressionStatement[28731-28744]:ExpressionStatement[28946-28959]"
    }, {
      "left" : "file.close();",
      "right" : "file.close();",
      "info" : "ExpressionStatement[28753-28766]:ExpressionStatement[28968-28981]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[29100-29118]:MarkerAnnotation[29315-29333]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[29121-29127]:Modifier[29336-29342]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[29128-29132]:PrimitiveType[29343-29347]"
    }, {
      "left" : "createDefineReplacements",
      "right" : "createDefineReplacements",
      "info" : "SimpleName[29133-29157]:SimpleName[29348-29372]"
    }, {
      "left" : "List<String> definitions",
      "right" : "List<String> definitions",
      "info" : "SingleVariableDeclaration[29158-29182]:SingleVariableDeclaration[29373-29397]"
    }, {
      "left" : "CompilerOptions options",
      "right" : "CompilerOptions options",
      "info" : "SingleVariableDeclaration[29190-29213]:SingleVariableDeclaration[29405-29428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29215-30938]:Block[29430-31153]"
    }, {
      "left" : "for (String override : definitions)",
      "right" : "for (String override : definitions)",
      "info" : "EnhancedForStatement[29250-30934]:EnhancedForStatement[29465-31149]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29286-30934]:Block[29501-31149]"
    }, {
      "left" : "String[] assignment = override.split(\"=\", 2);",
      "right" : "String[] assignment = override.split(\"=\", 2);",
      "info" : "VariableDeclarationStatement[29294-29339]:VariableDeclarationStatement[29509-29554]"
    }, {
      "left" : "String defName = assignment[0];",
      "right" : "String defName = assignment[0];",
      "info" : "VariableDeclarationStatement[29346-29377]:VariableDeclarationStatement[29561-29592]"
    }, {
      "left" : "if (defName.length() > 0)",
      "right" : "if (defName.length() > 0)",
      "info" : "IfStatement[29385-30837]:IfStatement[29600-31052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29411-30837]:Block[29626-31052]"
    }, {
      "left" : "if (assignment.length == 1)",
      "right" : "if (assignment.length == 1)",
      "info" : "IfStatement[29421-30829]:IfStatement[29636-31044]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29449-29540]:Block[29664-29755]"
    }, {
      "left" : "options.setDefineToBooleanLiteral(defName, true);",
      "right" : "options.setDefineToBooleanLiteral(defName, true);",
      "info" : "ExpressionStatement[29461-29510]:ExpressionStatement[29676-29725]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29521-29530]:ContinueStatement[29736-29745]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29546-30829]:Block[29761-31044]"
    }, {
      "left" : "String defValue = assignment[1];",
      "right" : "String defValue = assignment[1];",
      "info" : "VariableDeclarationStatement[29558-29590]:VariableDeclarationStatement[29773-29805]"
    }, {
      "left" : "if (defValue.equals(\"true\"))",
      "right" : "if (defValue.equals(\"true\"))",
      "info" : "IfStatement[29602-30819]:IfStatement[29817-31034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29631-29728]:Block[29846-29943]"
    }, {
      "left" : "options.setDefineToBooleanLiteral(defName, true);",
      "right" : "options.setDefineToBooleanLiteral(defName, true);",
      "info" : "ExpressionStatement[29645-29694]:ExpressionStatement[29860-29909]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29707-29716]:ContinueStatement[29922-29931]"
    }, {
      "left" : "if (defValue.equals(\"false\"))",
      "right" : "if (defValue.equals(\"false\"))",
      "info" : "IfStatement[29734-30819]:IfStatement[29949-31034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29764-29862]:Block[29979-30077]"
    }, {
      "left" : "options.setDefineToBooleanLiteral(defName, false);",
      "right" : "options.setDefineToBooleanLiteral(defName, false);",
      "info" : "ExpressionStatement[29778-29828]:ExpressionStatement[29993-30043]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[29841-29850]:ContinueStatement[30056-30065]"
    }, {
      "left" : "if (defValue.length() > 1\n              && ((defValue.charAt(0) == '\\'' &&\n                  defValue.charAt(defValue.length() - 1) == '\\'')\n                  || (defValue.charAt(0) == '\\\"' &&\n                      defValue.charAt(defValue.length() - 1) == '\\\"')))",
      "right" : "if (defValue.length() > 1\n              && ((defValue.charAt(0) == '\\'' &&\n                  defValue.charAt(defValue.length() - 1) == '\\'')\n                  || (defValue.charAt(0) == '\\\"' &&\n                      defValue.charAt(defValue.length() - 1) == '\\\"')))",
      "info" : "IfStatement[29868-30819]:IfStatement[30083-31034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30133-30533]:Block[30348-30748]"
    }, {
      "left" : "String maybeStringVal =\n                defValue.substring(1, defValue.length() - 1);",
      "right" : "String maybeStringVal =\n                defValue.substring(1, defValue.length() - 1);",
      "info" : "VariableDeclarationStatement[30257-30342]:VariableDeclarationStatement[30472-30557]"
    }, {
      "left" : "if (maybeStringVal.indexOf(defValue.charAt(0)) == -1)",
      "right" : "if (maybeStringVal.indexOf(defValue.charAt(0)) == -1)",
      "info" : "IfStatement[30355-30521]:IfStatement[30570-30736]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30409-30521]:Block[30624-30736]"
    }, {
      "left" : "options.setDefineToStringLiteral(defName, maybeStringVal);",
      "right" : "options.setDefineToStringLiteral(defName, maybeStringVal);",
      "info" : "ExpressionStatement[30425-30483]:ExpressionStatement[30640-30698]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30498-30507]:ContinueStatement[30713-30722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30539-30819]:Block[30754-31034]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[30553-30807]:TryStatement[30768-31022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30557-30701]:Block[30772-30916]"
    }, {
      "left" : "options.setDefineToDoubleLiteral(defName,\n                  Double.parseDouble(defValue));",
      "right" : "options.setDefineToDoubleLiteral(defName,\n                  Double.parseDouble(defValue));",
      "info" : "ExpressionStatement[30573-30663]:ExpressionStatement[30788-30878]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[30678-30687]:ContinueStatement[30893-30902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30734-30807]:Block[30949-31022]"
    }, {
      "left" : "throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);",
      "right" : "throw new RuntimeException(\n          \"--define flag syntax invalid: \" + override);",
      "info" : "ThrowStatement[30845-30928]:ThrowStatement[31060-31143]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31076-31083]:Modifier[31291-31298]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[31084-31091]:PrimitiveType[31299-31306]"
    }, {
      "left" : "shouldGenerateManifestPerModule",
      "right" : "shouldGenerateManifestPerModule",
      "info" : "SimpleName[31092-31123]:SimpleName[31307-31338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31126-31264]:Block[31341-31479]"
    }, {
      "left" : "return !config.module.isEmpty()\n        && config.outputManifest != null\n        && config.outputManifest.contains(\"%outname%\");",
      "right" : "return !config.module.isEmpty()\n        && config.outputManifest != null\n        && config.outputManifest.contains(\"%outname%\");",
      "info" : "ReturnStatement[31132-31260]:ReturnStatement[31347-31475]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[31395-31402]:Modifier[31610-31617]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[31403-31407]:PrimitiveType[31618-31622]"
    }, {
      "left" : "outputManifest",
      "right" : "outputManifest",
      "info" : "SimpleName[31408-31422]:SimpleName[31623-31637]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31432-31443]:SimpleType[31647-31658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31444-32222]:Block[31659-32437]"
    }, {
      "left" : "String outputManifest = config.outputManifest;",
      "right" : "String outputManifest = config.outputManifest;",
      "info" : "VariableDeclarationStatement[31450-31496]:VariableDeclarationStatement[31665-31711]"
    }, {
      "left" : "if (Strings.isEmpty(outputManifest))",
      "right" : "if (Strings.isEmpty(outputManifest))",
      "info" : "IfStatement[31501-31559]:IfStatement[31716-31774]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31538-31559]:Block[31753-31774]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[31546-31553]:ReturnStatement[31761-31768]"
    }, {
      "left" : "JSModuleGraph graph = compiler.getModuleGraph();",
      "right" : "JSModuleGraph graph = compiler.getModuleGraph();",
      "info" : "VariableDeclarationStatement[31565-31613]:VariableDeclarationStatement[31780-31828]"
    }, {
      "left" : "if (shouldGenerateManifestPerModule())",
      "right" : "if (shouldGenerateManifestPerModule())",
      "info" : "IfStatement[31618-32218]:IfStatement[31833-32433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31657-31936]:Block[31872-32151]"
    }, {
      "left" : "Iterable<JSModule> modules = graph.getAllModules();",
      "right" : "Iterable<JSModule> modules = graph.getAllModules();",
      "info" : "VariableDeclarationStatement[31705-31756]:VariableDeclarationStatement[31920-31971]"
    }, {
      "left" : "for (JSModule module : modules)",
      "right" : "for (JSModule module : modules)",
      "info" : "EnhancedForStatement[31763-31930]:EnhancedForStatement[31978-32145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31795-31930]:Block[32010-32145]"
    }, {
      "left" : "Writer out = toWriter(expandManifest(module));",
      "right" : "Writer out = toWriter(expandManifest(module));",
      "info" : "VariableDeclarationStatement[31805-31851]:VariableDeclarationStatement[32020-32066]"
    }, {
      "left" : "printManifestTo(module.getInputs(), out);",
      "right" : "printManifestTo(module.getInputs(), out);",
      "info" : "ExpressionStatement[31860-31901]:ExpressionStatement[32075-32116]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[31910-31922]:ExpressionStatement[32125-32137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31942-32218]:Block[32157-32433]"
    }, {
      "left" : "Writer out = toWriter(expandManifest(null));",
      "right" : "Writer out = toWriter(expandManifest(null));",
      "info" : "VariableDeclarationStatement[31992-32036]:VariableDeclarationStatement[32207-32251]"
    }, {
      "left" : "if (graph == null)",
      "right" : "if (graph == null)",
      "info" : "IfStatement[32043-32193]:IfStatement[32258-32408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32062-32130]:Block[32277-32345]"
    }, {
      "left" : "printManifestTo(compiler.getInputsInOrder(), out);",
      "right" : "printManifestTo(compiler.getInputsInOrder(), out);",
      "info" : "ExpressionStatement[32072-32122]:ExpressionStatement[32287-32337]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32136-32193]:Block[32351-32408]"
    }, {
      "left" : "printModuleGraphManifestTo(graph, out);",
      "right" : "printModuleGraphManifestTo(graph, out);",
      "info" : "ExpressionStatement[32146-32185]:ExpressionStatement[32361-32400]"
    }, {
      "left" : "out.close();",
      "right" : "out.close();",
      "info" : "ExpressionStatement[32200-32212]:ExpressionStatement[32415-32427]"
    }, {
      "left" : "@VisibleForTesting",
      "right" : "@VisibleForTesting",
      "info" : "MarkerAnnotation[32289-32307]:MarkerAnnotation[32504-32522]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[32310-32314]:PrimitiveType[32525-32529]"
    }, {
      "left" : "printModuleGraphManifestTo",
      "right" : "printModuleGraphManifestTo",
      "info" : "SimpleName[32315-32341]:SimpleName[32530-32556]"
    }, {
      "left" : "JSModuleGraph graph",
      "right" : "JSModuleGraph graph",
      "info" : "SingleVariableDeclaration[32349-32368]:SingleVariableDeclaration[32564-32583]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[32370-32384]:SingleVariableDeclaration[32585-32599]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32393-32404]:SimpleType[32608-32619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32405-33024]:Block[32620-33239]"
    }, {
      "left" : "Joiner commas = Joiner.on(\",\");",
      "right" : "Joiner commas = Joiner.on(\",\");",
      "info" : "VariableDeclarationStatement[32411-32442]:VariableDeclarationStatement[32626-32657]"
    }, {
      "left" : "boolean requiresNewline = false;",
      "right" : "boolean requiresNewline = false;",
      "info" : "VariableDeclarationStatement[32447-32479]:VariableDeclarationStatement[32662-32694]"
    }, {
      "left" : "for (JSModule module : graph.getAllModulesInDependencyOrder())",
      "right" : "for (JSModule module : graph.getAllModulesInDependencyOrder())",
      "info" : "EnhancedForStatement[32484-33020]:EnhancedForStatement[32699-33235]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32547-33020]:Block[32762-33235]"
    }, {
      "left" : "if (requiresNewline)",
      "right" : "if (requiresNewline)",
      "info" : "IfStatement[32555-32611]:IfStatement[32770-32826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32576-32611]:Block[32791-32826]"
    }, {
      "left" : "out.append(\"\\n\");",
      "right" : "out.append(\"\\n\");",
      "info" : "ExpressionStatement[32586-32603]:ExpressionStatement[32801-32818]"
    }, {
      "left" : "String dependencies = commas.join(module.getSortedDependencyNames());",
      "right" : "String dependencies = commas.join(module.getSortedDependencyNames());",
      "info" : "VariableDeclarationStatement[32715-32784]:VariableDeclarationStatement[32930-32999]"
    }, {
      "left" : "out.append(\n          String.format(\"{%s%s}\\n\",\n              module.getName(),\n              dependencies.isEmpty() ? \"\" : \":\" + dependencies));",
      "right" : "out.append(\n          String.format(\"{%s%s}\\n\",\n              module.getName(),\n              dependencies.isEmpty() ? \"\" : \":\" + dependencies));",
      "info" : "ExpressionStatement[32791-32936]:ExpressionStatement[33006-33151]"
    }, {
      "left" : "printManifestTo(module.getInputs(), out);",
      "right" : "printManifestTo(module.getInputs(), out);",
      "info" : "ExpressionStatement[32943-32984]:ExpressionStatement[33158-33199]"
    }, {
      "left" : "requiresNewline = true;",
      "right" : "requiresNewline = true;",
      "info" : "ExpressionStatement[32991-33014]:ExpressionStatement[33206-33229]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33120-33127]:Modifier[33335-33342]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33128-33132]:PrimitiveType[33343-33347]"
    }, {
      "left" : "printManifestTo",
      "right" : "printManifestTo",
      "info" : "SimpleName[33133-33148]:SimpleName[33348-33363]"
    }, {
      "left" : "Iterable<CompilerInput> inputs",
      "right" : "Iterable<CompilerInput> inputs",
      "info" : "SingleVariableDeclaration[33149-33179]:SingleVariableDeclaration[33364-33394]"
    }, {
      "left" : "Appendable out",
      "right" : "Appendable out",
      "info" : "SingleVariableDeclaration[33181-33195]:SingleVariableDeclaration[33396-33410]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33210-33221]:SimpleType[33425-33436]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33222-33450]:Block[33437-33665]"
    }, {
      "left" : "List<String> names = Lists.newArrayList();",
      "right" : "List<String> names = Lists.newArrayList();",
      "info" : "VariableDeclarationStatement[33228-33270]:VariableDeclarationStatement[33443-33485]"
    }, {
      "left" : "for (CompilerInput input : inputs)",
      "right" : "for (CompilerInput input : inputs)",
      "info" : "EnhancedForStatement[33275-33351]:EnhancedForStatement[33490-33566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33310-33351]:Block[33525-33566]"
    }, {
      "left" : "names.add(input.getName());",
      "right" : "names.add(input.getName());",
      "info" : "ExpressionStatement[33318-33345]:ExpressionStatement[33533-33560]"
    }, {
      "left" : "String result = Joiner.on(\"\\n\").join(names);",
      "right" : "String result = Joiner.on(\"\\n\").join(names);",
      "info" : "VariableDeclarationStatement[33356-33400]:VariableDeclarationStatement[33571-33615]"
    }, {
      "left" : "out.append(result);",
      "right" : "out.append(result);",
      "info" : "ExpressionStatement[33405-33424]:ExpressionStatement[33620-33639]"
    }, {
      "left" : "out.append(\"\\n\");",
      "right" : "out.append(\"\\n\");",
      "info" : "ExpressionStatement[33429-33446]:ExpressionStatement[33644-33661]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[33454-33459]:TYPE_DECLARATION_KIND[33669-33674]"
    }, {
      "left" : "RunTimeStats",
      "right" : "RunTimeStats",
      "info" : "SimpleName[33460-33472]:SimpleName[33675-33687]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33714-33721]:Modifier[33929-33936]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33722-33726]:PrimitiveType[33937-33941]"
    }, {
      "left" : "recordStartRun",
      "right" : "recordStartRun",
      "info" : "SimpleName[33727-33741]:SimpleName[33942-33956]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33744-33839]:Block[33959-34054]"
    }, {
      "left" : "lastStartTime = System.currentTimeMillis();",
      "right" : "lastStartTime = System.currentTimeMillis();",
      "info" : "ExpressionStatement[33752-33795]:ExpressionStatement[33967-34010]"
    }, {
      "left" : "PhaseOptimizer.clearLoopsRun();",
      "right" : "PhaseOptimizer.clearLoopsRun();",
      "info" : "ExpressionStatement[33802-33833]:ExpressionStatement[34017-34048]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[33893-33900]:Modifier[34108-34115]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[33901-33905]:PrimitiveType[34116-34120]"
    }, {
      "left" : "recordEndRun",
      "right" : "recordEndRun",
      "info" : "SimpleName[33906-33918]:SimpleName[34121-34133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33921-34209]:Block[34136-34424]"
    }, {
      "left" : "long endTime = System.currentTimeMillis();",
      "right" : "long endTime = System.currentTimeMillis();",
      "info" : "VariableDeclarationStatement[33929-33971]:VariableDeclarationStatement[34144-34186]"
    }, {
      "left" : "long length = endTime - lastStartTime;",
      "right" : "long length = endTime - lastStartTime;",
      "info" : "VariableDeclarationStatement[33978-34016]:VariableDeclarationStatement[34193-34231]"
    }, {
      "left" : "worstRunTime = Math.max(length, worstRunTime);",
      "right" : "worstRunTime = Math.max(length, worstRunTime);",
      "info" : "ExpressionStatement[34023-34069]:ExpressionStatement[34238-34284]"
    }, {
      "left" : "if (length < bestRunTime)",
      "right" : "if (length < bestRunTime)",
      "info" : "IfStatement[34076-34203]:IfStatement[34291-34418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34102-34203]:Block[34317-34418]"
    }, {
      "left" : "loopedPassesInBestRun = PhaseOptimizer.getLoopsRun();",
      "right" : "loopedPassesInBestRun = PhaseOptimizer.getLoopsRun();",
      "info" : "ExpressionStatement[34112-34165]:ExpressionStatement[34327-34380]"
    }, {
      "left" : "bestRunTime = length;",
      "right" : "bestRunTime = length;",
      "info" : "ExpressionStatement[34174-34195]:ExpressionStatement[34389-34410]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[34275-34282]:Modifier[34490-34497]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[34283-34287]:PrimitiveType[34498-34502]"
    }, {
      "left" : "outputBestPhaseOrdering",
      "right" : "outputBestPhaseOrdering",
      "info" : "SimpleName[34288-34311]:SimpleName[34503-34526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34314-34733]:Block[34529-34948]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[34322-34727]:TryStatement[34537-34942]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34326-34632]:Block[34541-34847]"
    }, {
      "left" : "out.append(\"Best time: \" + bestRunTime + \"\\n\");",
      "right" : "out.append(\"Best time: \" + bestRunTime + \"\\n\");",
      "info" : "ExpressionStatement[34336-34383]:ExpressionStatement[34551-34598]"
    }, {
      "left" : "out.append(\"Worst time: \" + worstRunTime + \"\\n\");",
      "right" : "out.append(\"Worst time: \" + worstRunTime + \"\\n\");",
      "info" : "ExpressionStatement[34392-34441]:ExpressionStatement[34607-34656]"
    }, {
      "left" : "int i = 1;",
      "right" : "int i = 1;",
      "info" : "VariableDeclarationStatement[34451-34461]:VariableDeclarationStatement[34666-34676]"
    }, {
      "left" : "for (List<String> loop : loopedPassesInBestRun)",
      "right" : "for (List<String> loop : loopedPassesInBestRun)",
      "info" : "EnhancedForStatement[34470-34624]:EnhancedForStatement[34685-34839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34518-34624]:Block[34733-34839]"
    }, {
      "left" : "out.append(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop)+ \"\\n\");",
      "right" : "out.append(\"\\nLoop \" + i + \":\\n\" + Joiner.on(\"\\n\").join(loop)+ \"\\n\");",
      "info" : "ExpressionStatement[34530-34599]:ExpressionStatement[34745-34814]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[34610-34614]:ExpressionStatement[34825-34829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34655-34727]:Block[34870-34942]"
    }, {
      "left" : "throw new RuntimeException(\"unexpected exception\", e);",
      "right" : "throw new RuntimeException(\"unexpected exception\", e);",
      "info" : "ThrowStatement[34665-34719]:ThrowStatement[34880-34934]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[35024-35030]:Modifier[35239-35245]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[35031-35036]:TYPE_DECLARATION_KIND[35246-35251]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleName[35037-35054]:SimpleName[35252-35269]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[35148-35165]:SimpleType[35363-35380]"
    }, {
      "left" : "setPrintTree",
      "right" : "setPrintTree",
      "info" : "SimpleName[35166-35178]:SimpleName[35381-35393]"
    }, {
      "left" : "boolean printTree",
      "right" : "boolean printTree",
      "info" : "SingleVariableDeclaration[35179-35196]:SingleVariableDeclaration[35394-35411]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35198-35258]:Block[35413-35473]"
    }, {
      "left" : "this.printTree = printTree;",
      "right" : "this.printTree = printTree;",
      "info" : "ExpressionStatement[35206-35233]:ExpressionStatement[35421-35448]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[35240-35252]:ReturnStatement[35455-35467]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[35432-35449]:SimpleType[35647-35664]"
    }, {
      "left" : "setComputePhaseOrdering",
      "right" : "setComputePhaseOrdering",
      "info" : "SimpleName[35450-35473]:SimpleName[35665-35688]"
    }, {
      "left" : "boolean computePhaseOrdering",
      "right" : "boolean computePhaseOrdering",
      "info" : "SingleVariableDeclaration[35474-35502]:SingleVariableDeclaration[35689-35717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35504-35586]:Block[35719-35801]"
    }, {
      "left" : "this.computePhaseOrdering = computePhaseOrdering;",
      "right" : "this.computePhaseOrdering = computePhaseOrdering;",
      "info" : "ExpressionStatement[35512-35561]:ExpressionStatement[35727-35776]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[35568-35580]:ReturnStatement[35783-35795]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[35734-35751]:SimpleType[35949-35966]"
    }, {
      "left" : "setPrintAst",
      "right" : "setPrintAst",
      "info" : "SimpleName[35752-35763]:SimpleName[35967-35978]"
    }, {
      "left" : "boolean printAst",
      "right" : "boolean printAst",
      "info" : "SingleVariableDeclaration[35764-35780]:SingleVariableDeclaration[35979-35995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35782-35840]:Block[35997-36055]"
    }, {
      "left" : "this.printAst = printAst;",
      "right" : "this.printAst = printAst;",
      "info" : "ExpressionStatement[35790-35815]:ExpressionStatement[36005-36030]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[35822-35834]:ReturnStatement[36037-36049]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[35970-35987]:SimpleType[36185-36202]"
    }, {
      "left" : "setPrintPassGraph",
      "right" : "setPrintPassGraph",
      "info" : "SimpleName[35988-36005]:SimpleName[36203-36220]"
    }, {
      "left" : "boolean printPassGraph",
      "right" : "boolean printPassGraph",
      "info" : "SingleVariableDeclaration[36006-36028]:SingleVariableDeclaration[36221-36243]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36030-36100]:Block[36245-36315]"
    }, {
      "left" : "this.printPassGraph = printPassGraph;",
      "right" : "this.printPassGraph = printPassGraph;",
      "info" : "ExpressionStatement[36038-36075]:ExpressionStatement[36253-36290]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36082-36094]:ReturnStatement[36297-36309]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[36228-36245]:SimpleType[36443-36460]"
    }, {
      "left" : "setJscompDevMode",
      "right" : "setJscompDevMode",
      "info" : "SimpleName[36246-36262]:SimpleName[36461-36477]"
    }, {
      "left" : "CompilerOptions.DevMode jscompDevMode",
      "right" : "CompilerOptions.DevMode jscompDevMode",
      "info" : "SingleVariableDeclaration[36263-36300]:SingleVariableDeclaration[36478-36515]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36302-36370]:Block[36517-36585]"
    }, {
      "left" : "this.jscompDevMode = jscompDevMode;",
      "right" : "this.jscompDevMode = jscompDevMode;",
      "info" : "ExpressionStatement[36310-36345]:ExpressionStatement[36525-36560]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36352-36364]:ReturnStatement[36567-36579]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[36634-36651]:SimpleType[36849-36866]"
    }, {
      "left" : "setLoggingLevel",
      "right" : "setLoggingLevel",
      "info" : "SimpleName[36652-36667]:SimpleName[36867-36882]"
    }, {
      "left" : "String loggingLevel",
      "right" : "String loggingLevel",
      "info" : "SingleVariableDeclaration[36668-36687]:SingleVariableDeclaration[36883-36902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36689-36755]:Block[36904-36970]"
    }, {
      "left" : "this.loggingLevel = loggingLevel;",
      "right" : "this.loggingLevel = loggingLevel;",
      "info" : "ExpressionStatement[36697-36730]:ExpressionStatement[36912-36945]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[36737-36749]:ReturnStatement[36952-36964]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[36914-36931]:SimpleType[37129-37146]"
    }, {
      "left" : "setExterns",
      "right" : "setExterns",
      "info" : "SimpleName[36932-36942]:SimpleName[37147-37157]"
    }, {
      "left" : "List<String> externs",
      "right" : "List<String> externs",
      "info" : "SingleVariableDeclaration[36943-36963]:SingleVariableDeclaration[37158-37178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36965-37055]:Block[37180-37270]"
    }, {
      "left" : "this.externs.clear();",
      "right" : "this.externs.clear();",
      "info" : "ExpressionStatement[36973-36994]:ExpressionStatement[37188-37209]"
    }, {
      "left" : "this.externs.addAll(externs);",
      "right" : "this.externs.addAll(externs);",
      "info" : "ExpressionStatement[37001-37030]:ExpressionStatement[37216-37245]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[37037-37049]:ReturnStatement[37252-37264]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[37194-37211]:SimpleType[37409-37426]"
    }, {
      "left" : "setJs",
      "right" : "setJs",
      "info" : "SimpleName[37212-37217]:SimpleName[37427-37432]"
    }, {
      "left" : "List<String> js",
      "right" : "List<String> js",
      "info" : "SingleVariableDeclaration[37218-37233]:SingleVariableDeclaration[37433-37448]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37235-37310]:Block[37450-37525]"
    }, {
      "left" : "this.js.clear();",
      "right" : "this.js.clear();",
      "info" : "ExpressionStatement[37243-37259]:ExpressionStatement[37458-37474]"
    }, {
      "left" : "this.js.addAll(js);",
      "right" : "this.js.addAll(js);",
      "info" : "ExpressionStatement[37266-37285]:ExpressionStatement[37481-37500]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[37292-37304]:ReturnStatement[37507-37519]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[37449-37466]:SimpleType[37664-37681]"
    }, {
      "left" : "setJsOutputFile",
      "right" : "setJsOutputFile",
      "info" : "SimpleName[37467-37482]:SimpleName[37682-37697]"
    }, {
      "left" : "String jsOutputFile",
      "right" : "String jsOutputFile",
      "info" : "SingleVariableDeclaration[37483-37502]:SingleVariableDeclaration[37698-37717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37504-37570]:Block[37719-37785]"
    }, {
      "left" : "this.jsOutputFile = jsOutputFile;",
      "right" : "this.jsOutputFile = jsOutputFile;",
      "info" : "ExpressionStatement[37512-37545]:ExpressionStatement[37727-37760]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[37552-37564]:ReturnStatement[37767-37779]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[38053-38070]:SimpleType[38268-38285]"
    }, {
      "left" : "setModule",
      "right" : "setModule",
      "info" : "SimpleName[38071-38080]:SimpleName[38286-38295]"
    }, {
      "left" : "List<String> module",
      "right" : "List<String> module",
      "info" : "SingleVariableDeclaration[38081-38100]:SingleVariableDeclaration[38296-38315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38102-38189]:Block[38317-38404]"
    }, {
      "left" : "this.module.clear();",
      "right" : "this.module.clear();",
      "info" : "ExpressionStatement[38110-38130]:ExpressionStatement[38325-38345]"
    }, {
      "left" : "this.module.addAll(module);",
      "right" : "this.module.addAll(module);",
      "info" : "ExpressionStatement[38137-38164]:ExpressionStatement[38352-38379]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[38171-38183]:ReturnStatement[38386-38398]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[38375-38392]:SimpleType[38590-38607]"
    }, {
      "left" : "setVariableMapInputFile",
      "right" : "setVariableMapInputFile",
      "info" : "SimpleName[38393-38416]:SimpleName[38608-38631]"
    }, {
      "left" : "String variableMapInputFile",
      "right" : "String variableMapInputFile",
      "info" : "SingleVariableDeclaration[38417-38444]:SingleVariableDeclaration[38632-38659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38446-38528]:Block[38661-38743]"
    }, {
      "left" : "this.variableMapInputFile = variableMapInputFile;",
      "right" : "this.variableMapInputFile = variableMapInputFile;",
      "info" : "ExpressionStatement[38454-38503]:ExpressionStatement[38669-38718]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[38510-38522]:ReturnStatement[38725-38737]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[38714-38731]:SimpleType[38929-38946]"
    }, {
      "left" : "setPropertyMapInputFile",
      "right" : "setPropertyMapInputFile",
      "info" : "SimpleName[38732-38755]:SimpleName[38947-38970]"
    }, {
      "left" : "String propertyMapInputFile",
      "right" : "String propertyMapInputFile",
      "info" : "SingleVariableDeclaration[38756-38783]:SingleVariableDeclaration[38971-38998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38785-38867]:Block[39000-39082]"
    }, {
      "left" : "this.propertyMapInputFile = propertyMapInputFile;",
      "right" : "this.propertyMapInputFile = propertyMapInputFile;",
      "info" : "ExpressionStatement[38793-38842]:ExpressionStatement[39008-39057]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[38849-38861]:ReturnStatement[39064-39076]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[39039-39056]:SimpleType[39254-39271]"
    }, {
      "left" : "setVariableMapOutputFile",
      "right" : "setVariableMapOutputFile",
      "info" : "SimpleName[39057-39081]:SimpleName[39272-39296]"
    }, {
      "left" : "String variableMapOutputFile",
      "right" : "String variableMapOutputFile",
      "info" : "SingleVariableDeclaration[39082-39110]:SingleVariableDeclaration[39297-39325]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39112-39196]:Block[39327-39411]"
    }, {
      "left" : "this.variableMapOutputFile = variableMapOutputFile;",
      "right" : "this.variableMapOutputFile = variableMapOutputFile;",
      "info" : "ExpressionStatement[39120-39171]:ExpressionStatement[39335-39386]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[39178-39190]:ReturnStatement[39393-39405]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[39556-39573]:SimpleType[39771-39788]"
    }, {
      "left" : "setCreateNameMapFiles",
      "right" : "setCreateNameMapFiles",
      "info" : "SimpleName[39574-39595]:SimpleName[39789-39810]"
    }, {
      "left" : "boolean createNameMapFiles",
      "right" : "boolean createNameMapFiles",
      "info" : "SingleVariableDeclaration[39596-39622]:SingleVariableDeclaration[39811-39837]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39624-39702]:Block[39839-39917]"
    }, {
      "left" : "this.createNameMapFiles = createNameMapFiles;",
      "right" : "this.createNameMapFiles = createNameMapFiles;",
      "info" : "ExpressionStatement[39632-39677]:ExpressionStatement[39847-39892]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[39684-39696]:ReturnStatement[39899-39911]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[39874-39891]:SimpleType[40089-40106]"
    }, {
      "left" : "setPropertyMapOutputFile",
      "right" : "setPropertyMapOutputFile",
      "info" : "SimpleName[39892-39916]:SimpleName[40107-40131]"
    }, {
      "left" : "String propertyMapOutputFile",
      "right" : "String propertyMapOutputFile",
      "info" : "SingleVariableDeclaration[39917-39945]:SingleVariableDeclaration[40132-40160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39947-40031]:Block[40162-40246]"
    }, {
      "left" : "this.propertyMapOutputFile = propertyMapOutputFile;",
      "right" : "this.propertyMapOutputFile = propertyMapOutputFile;",
      "info" : "ExpressionStatement[39955-40006]:ExpressionStatement[40170-40221]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[40013-40025]:ReturnStatement[40228-40240]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[40179-40196]:SimpleType[40394-40411]"
    }, {
      "left" : "setCodingConvention",
      "right" : "setCodingConvention",
      "info" : "SimpleName[40197-40216]:SimpleName[40412-40431]"
    }, {
      "left" : "CodingConvention codingConvention",
      "right" : "CodingConvention codingConvention",
      "info" : "SingleVariableDeclaration[40217-40250]:SingleVariableDeclaration[40432-40465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40252-40326]:Block[40467-40541]"
    }, {
      "left" : "this.codingConvention = codingConvention;",
      "right" : "this.codingConvention = codingConvention;",
      "info" : "ExpressionStatement[40260-40301]:ExpressionStatement[40475-40516]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[40308-40320]:ReturnStatement[40523-40535]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[40674-40691]:SimpleType[40889-40906]"
    }, {
      "left" : "setSummaryDetailLevel",
      "right" : "setSummaryDetailLevel",
      "info" : "SimpleName[40692-40713]:SimpleName[40907-40928]"
    }, {
      "left" : "int summaryDetailLevel",
      "right" : "int summaryDetailLevel",
      "info" : "SingleVariableDeclaration[40714-40736]:SingleVariableDeclaration[40929-40951]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40738-40816]:Block[40953-41031]"
    }, {
      "left" : "this.summaryDetailLevel = summaryDetailLevel;",
      "right" : "this.summaryDetailLevel = summaryDetailLevel;",
      "info" : "ExpressionStatement[40746-40791]:ExpressionStatement[40961-41006]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[40798-40810]:ReturnStatement[41013-41025]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[41008-41025]:SimpleType[41223-41240]"
    }, {
      "left" : "setOutputWrapper",
      "right" : "setOutputWrapper",
      "info" : "SimpleName[41026-41042]:SimpleName[41241-41257]"
    }, {
      "left" : "String outputWrapper",
      "right" : "String outputWrapper",
      "info" : "SingleVariableDeclaration[41043-41063]:SingleVariableDeclaration[41258-41278]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41065-41133]:Block[41280-41348]"
    }, {
      "left" : "this.outputWrapper = outputWrapper;",
      "right" : "this.outputWrapper = outputWrapper;",
      "info" : "ExpressionStatement[41073-41108]:ExpressionStatement[41288-41323]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[41115-41127]:ReturnStatement[41330-41342]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[41281-41298]:SimpleType[41496-41513]"
    }, {
      "left" : "setOutputWrapperMarker",
      "right" : "setOutputWrapperMarker",
      "info" : "SimpleName[41299-41321]:SimpleName[41514-41536]"
    }, {
      "left" : "String outputWrapperMarker",
      "right" : "String outputWrapperMarker",
      "info" : "SingleVariableDeclaration[41322-41348]:SingleVariableDeclaration[41537-41563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41350-41430]:Block[41565-41645]"
    }, {
      "left" : "this.outputWrapperMarker = outputWrapperMarker;",
      "right" : "this.outputWrapperMarker = outputWrapperMarker;",
      "info" : "ExpressionStatement[41358-41405]:ExpressionStatement[41573-41620]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[41412-41424]:ReturnStatement[41627-41639]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[41760-41777]:SimpleType[41975-41992]"
    }, {
      "left" : "setModuleWrapper",
      "right" : "setModuleWrapper",
      "info" : "SimpleName[41778-41794]:SimpleName[41993-42009]"
    }, {
      "left" : "List<String> moduleWrapper",
      "right" : "List<String> moduleWrapper",
      "info" : "SingleVariableDeclaration[41795-41821]:SingleVariableDeclaration[42010-42036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41823-41931]:Block[42038-42146]"
    }, {
      "left" : "this.moduleWrapper.clear();",
      "right" : "this.moduleWrapper.clear();",
      "info" : "ExpressionStatement[41831-41858]:ExpressionStatement[42046-42073]"
    }, {
      "left" : "this.moduleWrapper.addAll(moduleWrapper);",
      "right" : "this.moduleWrapper.addAll(moduleWrapper);",
      "info" : "ExpressionStatement[41865-41906]:ExpressionStatement[42080-42121]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[41913-41925]:ReturnStatement[42128-42140]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[42175-42192]:SimpleType[42390-42407]"
    }, {
      "left" : "setModuleOutputPathPrefix",
      "right" : "setModuleOutputPathPrefix",
      "info" : "SimpleName[42193-42218]:SimpleName[42408-42433]"
    }, {
      "left" : "String moduleOutputPathPrefix",
      "right" : "String moduleOutputPathPrefix",
      "info" : "SingleVariableDeclaration[42219-42248]:SingleVariableDeclaration[42434-42463]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42250-42336]:Block[42465-42551]"
    }, {
      "left" : "this.moduleOutputPathPrefix = moduleOutputPathPrefix;",
      "right" : "this.moduleOutputPathPrefix = moduleOutputPathPrefix;",
      "info" : "ExpressionStatement[42258-42311]:ExpressionStatement[42473-42526]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[42318-42330]:ReturnStatement[42533-42545]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[42678-42695]:SimpleType[42893-42910]"
    }, {
      "left" : "setCreateSourceMap",
      "right" : "setCreateSourceMap",
      "info" : "SimpleName[42696-42714]:SimpleName[42911-42929]"
    }, {
      "left" : "String createSourceMap",
      "right" : "String createSourceMap",
      "info" : "SingleVariableDeclaration[42715-42737]:SingleVariableDeclaration[42930-42952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[42739-42811]:Block[42954-43026]"
    }, {
      "left" : "this.createSourceMap = createSourceMap;",
      "right" : "this.createSourceMap = createSourceMap;",
      "info" : "ExpressionStatement[42747-42786]:ExpressionStatement[42962-43001]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[42793-42805]:ReturnStatement[43008-43020]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[42991-43008]:SimpleType[43206-43223]"
    }, {
      "left" : "setSourceMapDetailLevel",
      "right" : "setSourceMapDetailLevel",
      "info" : "SimpleName[43009-43032]:SimpleName[43224-43247]"
    }, {
      "left" : "SourceMap.DetailLevel level",
      "right" : "SourceMap.DetailLevel level",
      "info" : "SingleVariableDeclaration[43033-43060]:SingleVariableDeclaration[43248-43275]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43062-43129]:Block[43277-43344]"
    }, {
      "left" : "this.sourceMapDetailLevel = level;",
      "right" : "this.sourceMapDetailLevel = level;",
      "info" : "ExpressionStatement[43070-43104]:ExpressionStatement[43285-43319]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43111-43123]:ReturnStatement[43326-43338]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[43269-43286]:SimpleType[43484-43501]"
    }, {
      "left" : "setJscompError",
      "right" : "setJscompError",
      "info" : "SimpleName[43287-43301]:SimpleName[43502-43516]"
    }, {
      "left" : "List<String> jscompError",
      "right" : "List<String> jscompError",
      "info" : "SingleVariableDeclaration[43302-43326]:SingleVariableDeclaration[43517-43541]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43328-43430]:Block[43543-43645]"
    }, {
      "left" : "this.jscompError.clear();",
      "right" : "this.jscompError.clear();",
      "info" : "ExpressionStatement[43336-43361]:ExpressionStatement[43551-43576]"
    }, {
      "left" : "this.jscompError.addAll(jscompError);",
      "right" : "this.jscompError.addAll(jscompError);",
      "info" : "ExpressionStatement[43368-43405]:ExpressionStatement[43583-43620]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43412-43424]:ReturnStatement[43627-43639]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[43580-43597]:SimpleType[43795-43812]"
    }, {
      "left" : "setJscompWarning",
      "right" : "setJscompWarning",
      "info" : "SimpleName[43598-43614]:SimpleName[43813-43829]"
    }, {
      "left" : "List<String> jscompWarning",
      "right" : "List<String> jscompWarning",
      "info" : "SingleVariableDeclaration[43615-43641]:SingleVariableDeclaration[43830-43856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43643-43751]:Block[43858-43966]"
    }, {
      "left" : "this.jscompWarning.clear();",
      "right" : "this.jscompWarning.clear();",
      "info" : "ExpressionStatement[43651-43678]:ExpressionStatement[43866-43893]"
    }, {
      "left" : "this.jscompWarning.addAll(jscompWarning);",
      "right" : "this.jscompWarning.addAll(jscompWarning);",
      "info" : "ExpressionStatement[43685-43726]:ExpressionStatement[43900-43941]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[43733-43745]:ReturnStatement[43948-43960]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[43884-43901]:SimpleType[44099-44116]"
    }, {
      "left" : "setJscompOff",
      "right" : "setJscompOff",
      "info" : "SimpleName[43902-43914]:SimpleName[44117-44129]"
    }, {
      "left" : "List<String> jscompOff",
      "right" : "List<String> jscompOff",
      "info" : "SingleVariableDeclaration[43915-43937]:SingleVariableDeclaration[44130-44152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43939-44035]:Block[44154-44250]"
    }, {
      "left" : "this.jscompOff.clear();",
      "right" : "this.jscompOff.clear();",
      "info" : "ExpressionStatement[43947-43970]:ExpressionStatement[44162-44185]"
    }, {
      "left" : "this.jscompOff.addAll(jscompOff);",
      "right" : "this.jscompOff.addAll(jscompOff);",
      "info" : "ExpressionStatement[43977-44010]:ExpressionStatement[44192-44225]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[44017-44029]:ReturnStatement[44232-44244]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[44426-44443]:SimpleType[44641-44658]"
    }, {
      "left" : "setDefine",
      "right" : "setDefine",
      "info" : "SimpleName[44444-44453]:SimpleName[44659-44668]"
    }, {
      "left" : "List<String> define",
      "right" : "List<String> define",
      "info" : "SingleVariableDeclaration[44454-44473]:SingleVariableDeclaration[44669-44688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44475-44562]:Block[44690-44777]"
    }, {
      "left" : "this.define.clear();",
      "right" : "this.define.clear();",
      "info" : "ExpressionStatement[44483-44503]:ExpressionStatement[44698-44718]"
    }, {
      "left" : "this.define.addAll(define);",
      "right" : "this.define.addAll(define);",
      "info" : "ExpressionStatement[44510-44537]:ExpressionStatement[44725-44752]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[44544-44556]:ReturnStatement[44759-44771]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[44654-44671]:SimpleType[44869-44886]"
    }, {
      "left" : "setCharset",
      "right" : "setCharset",
      "info" : "SimpleName[44672-44682]:SimpleName[44887-44897]"
    }, {
      "left" : "String charset",
      "right" : "String charset",
      "info" : "SingleVariableDeclaration[44683-44697]:SingleVariableDeclaration[44898-44912]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44699-44755]:Block[44914-44970]"
    }, {
      "left" : "this.charset = charset;",
      "right" : "this.charset = charset;",
      "info" : "ExpressionStatement[44707-44730]:ExpressionStatement[44922-44945]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[44737-44749]:ReturnStatement[44952-44964]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[44950-44967]:SimpleType[45165-45182]"
    }, {
      "left" : "setManageClosureDependencies",
      "right" : "setManageClosureDependencies",
      "info" : "SimpleName[44968-44996]:SimpleName[45183-45211]"
    }, {
      "left" : "boolean newVal",
      "right" : "boolean newVal",
      "info" : "SingleVariableDeclaration[44997-45011]:SingleVariableDeclaration[45212-45226]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45013-45086]:Block[45228-45301]"
    }, {
      "left" : "this.manageClosureDependencies = newVal;",
      "right" : "this.manageClosureDependencies = newVal;",
      "info" : "ExpressionStatement[45021-45061]:ExpressionStatement[45236-45276]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[45068-45080]:ReturnStatement[45283-45295]"
    }, {
      "left" : "CommandLineConfig",
      "right" : "CommandLineConfig",
      "info" : "SimpleType[45203-45220]:SimpleType[45418-45435]"
    }, {
      "left" : "setOutputManifest",
      "right" : "setOutputManifest",
      "info" : "SimpleName[45221-45238]:SimpleName[45436-45453]"
    }, {
      "left" : "String outputManifest",
      "right" : "String outputManifest",
      "info" : "SingleVariableDeclaration[45239-45260]:SingleVariableDeclaration[45454-45475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45262-45332]:Block[45477-45547]"
    }, {
      "left" : "this.outputManifest = outputManifest;",
      "right" : "this.outputManifest = outputManifest;",
      "info" : "ExpressionStatement[45270-45307]:ExpressionStatement[45485-45522]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[45314-45326]:ReturnStatement[45529-45541]"
    } ]
  },
  "interFileMappings" : { }
}