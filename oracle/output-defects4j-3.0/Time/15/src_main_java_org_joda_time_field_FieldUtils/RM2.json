{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FieldUtils",
      "right" : "FieldUtils",
      "info" : "TypeDeclaration[773-11460]:TypeDeclaration[773-11634]"
    }, {
      "left" : "private FieldUtils()",
      "right" : "private FieldUtils()",
      "info" : "MethodDeclaration[957-1049]:MethodDeclaration[957-1049]"
    }, {
      "left" : "public static int safeNegate(int value)",
      "right" : "public static int safeNegate(int value)",
      "info" : "MethodDeclaration[1138-1597]:MethodDeclaration[1138-1597]"
    }, {
      "left" : "public static int safeAdd(int val1, int val2)",
      "right" : "public static int safeAdd(int val1, int val2)",
      "info" : "MethodDeclaration[1607-2238]:MethodDeclaration[1607-2238]"
    }, {
      "left" : "public static long safeAdd(long val1, long val2)",
      "right" : "public static long safeAdd(long val1, long val2)",
      "info" : "MethodDeclaration[2248-2883]:MethodDeclaration[2248-2883]"
    }, {
      "left" : "public static long safeSubtract(long val1, long val2)",
      "right" : "public static long safeSubtract(long val1, long val2)",
      "info" : "MethodDeclaration[2893-3591]:MethodDeclaration[2893-3591]"
    }, {
      "left" : "public static int safeMultiply(int val1, int val2)",
      "right" : "public static int safeMultiply(int val1, int val2)",
      "info" : "MethodDeclaration[3601-4200]:MethodDeclaration[3601-4200]"
    }, {
      "left" : "public static long safeMultiply(long val1, int val2)",
      "right" : "public static long safeMultiply(long val1, int val2)",
      "info" : "MethodDeclaration[4206-4934]:MethodDeclaration[4206-5108]"
    }, {
      "left" : "public static long safeMultiply(long val1, long val2)",
      "right" : "public static long safeMultiply(long val1, long val2)",
      "info" : "MethodDeclaration[4940-5742]:MethodDeclaration[5114-5916]"
    }, {
      "left" : "public static int safeToInt(long value)",
      "right" : "public static int safeToInt(long value)",
      "info" : "MethodDeclaration[5752-6219]:MethodDeclaration[5926-6393]"
    }, {
      "left" : "public static int safeMultiplyToInt(long val1, long val2)",
      "right" : "public static int safeMultiplyToInt(long val1, long val2)",
      "info" : "MethodDeclaration[6229-6676]:MethodDeclaration[6403-6850]"
    }, {
      "left" : "public static void verifyValueBounds(DateTimeField field, \n                                         int value, int lowerBound, int upperBound)",
      "right" : "public static void verifyValueBounds(DateTimeField field, \n                                         int value, int lowerBound, int upperBound)",
      "info" : "MethodDeclaration[6760-7490]:MethodDeclaration[6934-7664]"
    }, {
      "left" : "public static void verifyValueBounds(DateTimeFieldType fieldType, \n                                         int value, int lowerBound, int upperBound)",
      "right" : "public static void verifyValueBounds(DateTimeFieldType fieldType, \n                                         int value, int lowerBound, int upperBound)",
      "info" : "MethodDeclaration[7496-8246]:MethodDeclaration[7670-8420]"
    }, {
      "left" : "public static void verifyValueBounds(String fieldName,\n                                         int value, int lowerBound, int upperBound)",
      "right" : "public static void verifyValueBounds(String fieldName,\n                                         int value, int lowerBound, int upperBound)",
      "info" : "MethodDeclaration[8252-8972]:MethodDeclaration[8426-9146]"
    }, {
      "left" : "public static int getWrappedValue(int currentValue, int wrapValue,\n                                      int minValue, int maxValue)",
      "right" : "public static int getWrappedValue(int currentValue, int wrapValue,\n                                      int minValue, int maxValue)",
      "info" : "MethodDeclaration[8978-9875]:MethodDeclaration[9152-10049]"
    }, {
      "left" : "public static int getWrappedValue(int value, int minValue, int maxValue)",
      "right" : "public static int getWrappedValue(int value, int minValue, int maxValue)",
      "info" : "MethodDeclaration[9881-10905]:MethodDeclaration[10055-11079]"
    }, {
      "left" : "public static boolean equals(Object object1, Object object2)",
      "right" : "public static boolean equals(Object object1, Object object2)",
      "info" : "MethodDeclaration[10989-11457]:MethodDeclaration[11163-11631]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[926-932]:Modifier[926-932]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[933-938]:TYPE_DECLARATION_KIND[933-938]"
    }, {
      "left" : "FieldUtils",
      "right" : "FieldUtils",
      "info" : "SimpleName[939-949]:SimpleName[939-949]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[1004-1011]:Modifier[1004-1011]"
    }, {
      "left" : "FieldUtils",
      "right" : "FieldUtils",
      "info" : "SimpleName[1012-1022]:SimpleName[1012-1022]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1025-1049]:Block[1025-1049]"
    }, {
      "left" : "super();",
      "right" : "super();",
      "info" : "SuperConstructorInvocation[1035-1043]:SuperConstructorInvocation[1035-1043]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1393-1399]:Modifier[1393-1399]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1400-1406]:Modifier[1400-1406]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1407-1410]:PrimitiveType[1407-1410]"
    }, {
      "left" : "safeNegate",
      "right" : "safeNegate",
      "info" : "SimpleName[1411-1421]:SimpleName[1411-1421]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[1422-1431]:SingleVariableDeclaration[1422-1431]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1433-1597]:Block[1433-1597]"
    }, {
      "left" : "if (value == Integer.MIN_VALUE)",
      "right" : "if (value == Integer.MIN_VALUE)",
      "info" : "IfStatement[1443-1568]:IfStatement[1443-1568]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1475-1568]:Block[1475-1568]"
    }, {
      "left" : "throw new ArithmeticException(\"Integer.MIN_VALUE cannot be negated\");",
      "right" : "throw new ArithmeticException(\"Integer.MIN_VALUE cannot be negated\");",
      "info" : "ThrowStatement[1489-1558]:ThrowStatement[1489-1558]"
    }, {
      "left" : "return -value;",
      "right" : "return -value;",
      "info" : "ReturnStatement[1577-1591]:ReturnStatement[1577-1591]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[1869-1875]:Modifier[1869-1875]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[1876-1882]:Modifier[1876-1882]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[1883-1886]:PrimitiveType[1883-1886]"
    }, {
      "left" : "safeAdd",
      "right" : "safeAdd",
      "info" : "SimpleName[1887-1894]:SimpleName[1887-1894]"
    }, {
      "left" : "int val1",
      "right" : "int val1",
      "info" : "SingleVariableDeclaration[1895-1903]:SingleVariableDeclaration[1895-1903]"
    }, {
      "left" : "int val2",
      "right" : "int val2",
      "info" : "SingleVariableDeclaration[1905-1913]:SingleVariableDeclaration[1905-1913]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1915-2238]:Block[1915-2238]"
    }, {
      "left" : "int sum = val1 + val2;",
      "right" : "int sum = val1 + val2;",
      "info" : "VariableDeclarationStatement[1925-1947]:VariableDeclarationStatement[1925-1947]"
    }, {
      "left" : "if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0)",
      "right" : "if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0)",
      "info" : "IfStatement[2035-2212]:IfStatement[2035-2212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2079-2212]:Block[2079-2212]"
    }, {
      "left" : "throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);",
      "right" : "throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);",
      "info" : "ThrowStatement[2093-2202]:ThrowStatement[2093-2202]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[2221-2232]:ReturnStatement[2221-2232]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[2510-2516]:Modifier[2510-2516]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[2517-2523]:Modifier[2517-2523]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[2524-2528]:PrimitiveType[2524-2528]"
    }, {
      "left" : "safeAdd",
      "right" : "safeAdd",
      "info" : "SimpleName[2529-2536]:SimpleName[2529-2536]"
    }, {
      "left" : "long val1",
      "right" : "long val1",
      "info" : "SingleVariableDeclaration[2537-2546]:SingleVariableDeclaration[2537-2546]"
    }, {
      "left" : "long val2",
      "right" : "long val2",
      "info" : "SingleVariableDeclaration[2548-2557]:SingleVariableDeclaration[2548-2557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2559-2883]:Block[2559-2883]"
    }, {
      "left" : "long sum = val1 + val2;",
      "right" : "long sum = val1 + val2;",
      "info" : "VariableDeclarationStatement[2569-2592]:VariableDeclarationStatement[2569-2592]"
    }, {
      "left" : "if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0)",
      "right" : "if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0)",
      "info" : "IfStatement[2680-2857]:IfStatement[2680-2857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2724-2857]:Block[2724-2857]"
    }, {
      "left" : "throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);",
      "right" : "throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" + \" + val2);",
      "info" : "ThrowStatement[2738-2847]:ThrowStatement[2738-2847]"
    }, {
      "left" : "return sum;",
      "right" : "return sum;",
      "info" : "ReturnStatement[2866-2877]:ReturnStatement[2866-2877]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3209-3215]:Modifier[3209-3215]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3216-3222]:Modifier[3216-3222]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[3223-3227]:PrimitiveType[3223-3227]"
    }, {
      "left" : "safeSubtract",
      "right" : "safeSubtract",
      "info" : "SimpleName[3228-3240]:SimpleName[3228-3240]"
    }, {
      "left" : "long val1",
      "right" : "long val1",
      "info" : "SingleVariableDeclaration[3241-3250]:SingleVariableDeclaration[3241-3250]"
    }, {
      "left" : "long val2",
      "right" : "long val2",
      "info" : "SingleVariableDeclaration[3252-3261]:SingleVariableDeclaration[3252-3261]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3263-3591]:Block[3263-3591]"
    }, {
      "left" : "long diff = val1 - val2;",
      "right" : "long diff = val1 - val2;",
      "info" : "VariableDeclarationStatement[3273-3297]:VariableDeclarationStatement[3273-3297]"
    }, {
      "left" : "if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0)",
      "right" : "if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0)",
      "info" : "IfStatement[3387-3564]:IfStatement[3387-3564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3431-3564]:Block[3431-3564]"
    }, {
      "left" : "throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" - \" + val2);",
      "right" : "throw new ArithmeticException\n                (\"The calculation caused an overflow: \" + val1 + \" - \" + val2);",
      "info" : "ThrowStatement[3445-3554]:ThrowStatement[3445-3554]"
    }, {
      "left" : "return diff;",
      "right" : "return diff;",
      "info" : "ReturnStatement[3573-3585]:ReturnStatement[3573-3585]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3886-3892]:Modifier[3886-3892]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[3893-3899]:Modifier[3893-3899]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[3900-3903]:PrimitiveType[3900-3903]"
    }, {
      "left" : "safeMultiply",
      "right" : "safeMultiply",
      "info" : "SimpleName[3904-3916]:SimpleName[3904-3916]"
    }, {
      "left" : "int val1",
      "right" : "int val1",
      "info" : "SingleVariableDeclaration[3917-3925]:SingleVariableDeclaration[3917-3925]"
    }, {
      "left" : "int val2",
      "right" : "int val2",
      "info" : "SingleVariableDeclaration[3927-3935]:SingleVariableDeclaration[3927-3935]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3937-4200]:Block[3937-4200]"
    }, {
      "left" : "long total = (long) val1 * (long) val2;",
      "right" : "long total = (long) val1 * (long) val2;",
      "info" : "VariableDeclarationStatement[3947-3986]:VariableDeclarationStatement[3947-3986]"
    }, {
      "left" : "if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE)",
      "right" : "if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE)",
      "info" : "IfStatement[3995-4166]:IfStatement[3995-4166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4055-4166]:Block[4055-4166]"
    }, {
      "left" : "throw new ArithmeticException(\"Multiplication overflows an int: \" + val1 + \" * \" + val2);",
      "right" : "throw new ArithmeticException(\"Multiplication overflows an int: \" + val1 + \" * \" + val2);",
      "info" : "ThrowStatement[4067-4156]:ThrowStatement[4067-4156]"
    }, {
      "left" : "return (int) total;",
      "right" : "return (int) total;",
      "info" : "ReturnStatement[4175-4194]:ReturnStatement[4175-4194]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4491-4497]:Modifier[4491-4497]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[4498-4504]:Modifier[4498-4504]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[4505-4509]:PrimitiveType[4505-4509]"
    }, {
      "left" : "safeMultiply",
      "right" : "safeMultiply",
      "info" : "SimpleName[4510-4522]:SimpleName[4510-4522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4544-4934]:Block[4544-5108]"
    }, {
      "left" : "switch (val2) {\n            case -1:\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }",
      "right" : "switch (val2) {\n            case -1:\n                if (val1 == Long.MIN_VALUE) {\n                    throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);\n                }\n                return -val1;\n            case 0:\n                return 0L;\n            case 1:\n                return val1;\n        }",
      "info" : "SwitchStatement[4554-4726]:SwitchStatement[4554-4900]"
    }, {
      "left" : "case -1:",
      "right" : "case -1:",
      "info" : "SwitchCase[4582-4590]:SwitchCase[4582-4590]"
    }, {
      "left" : "return -val1;",
      "right" : "return -val1;",
      "info" : "ReturnStatement[4607-4620]:ReturnStatement[4781-4794]"
    }, {
      "left" : "case 0:",
      "right" : "case 0:",
      "info" : "SwitchCase[4633-4640]:SwitchCase[4807-4814]"
    }, {
      "left" : "return 0L;",
      "right" : "return 0L;",
      "info" : "ReturnStatement[4657-4667]:ReturnStatement[4831-4841]"
    }, {
      "left" : "case 1:",
      "right" : "case 1:",
      "info" : "SwitchCase[4680-4687]:SwitchCase[4854-4861]"
    }, {
      "left" : "return val1;",
      "right" : "return val1;",
      "info" : "ReturnStatement[4704-4716]:ReturnStatement[4878-4890]"
    }, {
      "left" : "long total = val1 * val2;",
      "right" : "long total = val1 * val2;",
      "info" : "VariableDeclarationStatement[4735-4760]:VariableDeclarationStatement[4909-4934]"
    }, {
      "left" : "if (total / val2 != val1)",
      "right" : "if (total / val2 != val1)",
      "info" : "IfStatement[4769-4906]:IfStatement[4943-5080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4795-4906]:Block[4969-5080]"
    }, {
      "left" : "throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);",
      "right" : "throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);",
      "info" : "ThrowStatement[4807-4896]:ThrowStatement[4981-5070]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[4915-4928]:ReturnStatement[5089-5102]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5207-5213]:Modifier[5381-5387]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5214-5220]:Modifier[5388-5394]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[5221-5225]:PrimitiveType[5395-5399]"
    }, {
      "left" : "safeMultiply",
      "right" : "safeMultiply",
      "info" : "SimpleName[5226-5238]:SimpleName[5400-5412]"
    }, {
      "left" : "long val1",
      "right" : "long val1",
      "info" : "SingleVariableDeclaration[5239-5248]:SingleVariableDeclaration[5413-5422]"
    }, {
      "left" : "long val2",
      "right" : "long val2",
      "info" : "SingleVariableDeclaration[5250-5259]:SingleVariableDeclaration[5424-5433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5261-5742]:Block[5435-5916]"
    }, {
      "left" : "if (val2 == 1)",
      "right" : "if (val2 == 1)",
      "info" : "IfStatement[5271-5322]:IfStatement[5445-5496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5286-5322]:Block[5460-5496]"
    }, {
      "left" : "return val1;",
      "right" : "return val1;",
      "info" : "ReturnStatement[5300-5312]:ReturnStatement[5474-5486]"
    }, {
      "left" : "if (val1 == 1)",
      "right" : "if (val1 == 1)",
      "info" : "IfStatement[5331-5382]:IfStatement[5505-5556]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5346-5382]:Block[5520-5556]"
    }, {
      "left" : "return val2;",
      "right" : "return val2;",
      "info" : "ReturnStatement[5360-5372]:ReturnStatement[5534-5546]"
    }, {
      "left" : "if (val1 == 0 || val2 == 0)",
      "right" : "if (val1 == 0 || val2 == 0)",
      "info" : "IfStatement[5391-5452]:IfStatement[5565-5626]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5419-5452]:Block[5593-5626]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[5433-5442]:ReturnStatement[5607-5616]"
    }, {
      "left" : "long total = val1 * val2;",
      "right" : "long total = val1 * val2;",
      "info" : "VariableDeclarationStatement[5461-5486]:VariableDeclarationStatement[5635-5660]"
    }, {
      "left" : "if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1)",
      "right" : "if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1)",
      "info" : "IfStatement[5495-5714]:IfStatement[5669-5888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5601-5714]:Block[5775-5888]"
    }, {
      "left" : "throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);",
      "right" : "throw new ArithmeticException(\"Multiplication overflows a long: \" + val1 + \" * \" + val2);",
      "info" : "ThrowStatement[5615-5704]:ThrowStatement[5789-5878]"
    }, {
      "left" : "return total;",
      "right" : "return total;",
      "info" : "ReturnStatement[5723-5736]:ReturnStatement[5897-5910]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5979-5985]:Modifier[6153-6159]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[5986-5992]:Modifier[6160-6166]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5993-5996]:PrimitiveType[6167-6170]"
    }, {
      "left" : "safeToInt",
      "right" : "safeToInt",
      "info" : "SimpleName[5997-6006]:SimpleName[6171-6180]"
    }, {
      "left" : "long value",
      "right" : "long value",
      "info" : "SingleVariableDeclaration[6007-6017]:SingleVariableDeclaration[6181-6191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6019-6219]:Block[6193-6393]"
    }, {
      "left" : "if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE)",
      "right" : "if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE)",
      "info" : "IfStatement[6029-6134]:IfStatement[6203-6308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6091-6134]:Block[6265-6308]"
    }, {
      "left" : "return (int) value;",
      "right" : "return (int) value;",
      "info" : "ReturnStatement[6105-6124]:ReturnStatement[6279-6298]"
    }, {
      "left" : "throw new ArithmeticException(\"Value cannot fit in an int: \" + value);",
      "right" : "throw new ArithmeticException(\"Value cannot fit in an int: \" + value);",
      "info" : "ThrowStatement[6143-6213]:ThrowStatement[6317-6387]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6513-6519]:Modifier[6687-6693]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[6520-6526]:Modifier[6694-6700]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[6527-6530]:PrimitiveType[6701-6704]"
    }, {
      "left" : "safeMultiplyToInt",
      "right" : "safeMultiplyToInt",
      "info" : "SimpleName[6531-6548]:SimpleName[6705-6722]"
    }, {
      "left" : "long val1",
      "right" : "long val1",
      "info" : "SingleVariableDeclaration[6549-6558]:SingleVariableDeclaration[6723-6732]"
    }, {
      "left" : "long val2",
      "right" : "long val2",
      "info" : "SingleVariableDeclaration[6560-6569]:SingleVariableDeclaration[6734-6743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6571-6676]:Block[6745-6850]"
    }, {
      "left" : "long val = FieldUtils.safeMultiply(val1, val2);",
      "right" : "long val = FieldUtils.safeMultiply(val1, val2);",
      "info" : "VariableDeclarationStatement[6581-6628]:VariableDeclarationStatement[6755-6802]"
    }, {
      "left" : "return FieldUtils.safeToInt(val);",
      "right" : "return FieldUtils.safeToInt(val);",
      "info" : "ReturnStatement[6637-6670]:ReturnStatement[6811-6844]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7087-7093]:Modifier[7261-7267]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7094-7100]:Modifier[7268-7274]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7101-7105]:PrimitiveType[7275-7279]"
    }, {
      "left" : "verifyValueBounds",
      "right" : "verifyValueBounds",
      "info" : "SimpleName[7106-7123]:SimpleName[7280-7297]"
    }, {
      "left" : "DateTimeField field",
      "right" : "DateTimeField field",
      "info" : "SingleVariableDeclaration[7124-7143]:SingleVariableDeclaration[7298-7317]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[7187-7196]:SingleVariableDeclaration[7361-7370]"
    }, {
      "left" : "int lowerBound",
      "right" : "int lowerBound",
      "info" : "SingleVariableDeclaration[7198-7212]:SingleVariableDeclaration[7372-7386]"
    }, {
      "left" : "int upperBound",
      "right" : "int upperBound",
      "info" : "SingleVariableDeclaration[7214-7228]:SingleVariableDeclaration[7388-7402]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7230-7490]:Block[7404-7664]"
    }, {
      "left" : "if ((value < lowerBound) || (value > upperBound))",
      "right" : "if ((value < lowerBound) || (value > upperBound))",
      "info" : "IfStatement[7240-7484]:IfStatement[7414-7658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7290-7484]:Block[7464-7658]"
    }, {
      "left" : "throw new IllegalFieldValueException\n                (field.getType(), Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));",
      "right" : "throw new IllegalFieldValueException\n                (field.getType(), Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));",
      "info" : "ThrowStatement[7304-7474]:ThrowStatement[7478-7648]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7841-7847]:Modifier[8015-8021]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[7848-7854]:Modifier[8022-8028]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7855-7859]:PrimitiveType[8029-8033]"
    }, {
      "left" : "verifyValueBounds",
      "right" : "verifyValueBounds",
      "info" : "SimpleName[7860-7877]:SimpleName[8034-8051]"
    }, {
      "left" : "DateTimeFieldType fieldType",
      "right" : "DateTimeFieldType fieldType",
      "info" : "SingleVariableDeclaration[7878-7905]:SingleVariableDeclaration[8052-8079]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[7949-7958]:SingleVariableDeclaration[8123-8132]"
    }, {
      "left" : "int lowerBound",
      "right" : "int lowerBound",
      "info" : "SingleVariableDeclaration[7960-7974]:SingleVariableDeclaration[8134-8148]"
    }, {
      "left" : "int upperBound",
      "right" : "int upperBound",
      "info" : "SingleVariableDeclaration[7976-7990]:SingleVariableDeclaration[8150-8164]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7992-8246]:Block[8166-8420]"
    }, {
      "left" : "if ((value < lowerBound) || (value > upperBound))",
      "right" : "if ((value < lowerBound) || (value > upperBound))",
      "info" : "IfStatement[8002-8240]:IfStatement[8176-8414]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8052-8240]:Block[8226-8414]"
    }, {
      "left" : "throw new IllegalFieldValueException\n                (fieldType, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));",
      "right" : "throw new IllegalFieldValueException\n                (fieldType, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));",
      "info" : "ThrowStatement[8066-8230]:ThrowStatement[8240-8404]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[8579-8585]:Modifier[8753-8759]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[8586-8592]:Modifier[8760-8766]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[8593-8597]:PrimitiveType[8767-8771]"
    }, {
      "left" : "verifyValueBounds",
      "right" : "verifyValueBounds",
      "info" : "SimpleName[8598-8615]:SimpleName[8772-8789]"
    }, {
      "left" : "String fieldName",
      "right" : "String fieldName",
      "info" : "SingleVariableDeclaration[8616-8632]:SingleVariableDeclaration[8790-8806]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[8675-8684]:SingleVariableDeclaration[8849-8858]"
    }, {
      "left" : "int lowerBound",
      "right" : "int lowerBound",
      "info" : "SingleVariableDeclaration[8686-8700]:SingleVariableDeclaration[8860-8874]"
    }, {
      "left" : "int upperBound",
      "right" : "int upperBound",
      "info" : "SingleVariableDeclaration[8702-8716]:SingleVariableDeclaration[8876-8890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8718-8972]:Block[8892-9146]"
    }, {
      "left" : "if ((value < lowerBound) || (value > upperBound))",
      "right" : "if ((value < lowerBound) || (value > upperBound))",
      "info" : "IfStatement[8728-8966]:IfStatement[8902-9140]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8778-8966]:Block[8952-9140]"
    }, {
      "left" : "throw new IllegalFieldValueException\n                (fieldName, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));",
      "right" : "throw new IllegalFieldValueException\n                (fieldName, Integer.valueOf(value),\n                 Integer.valueOf(lowerBound), Integer.valueOf(upperBound));",
      "info" : "ThrowStatement[8792-8956]:ThrowStatement[8966-9130]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[9657-9663]:Modifier[9831-9837]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[9664-9670]:Modifier[9838-9844]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[9671-9674]:PrimitiveType[9845-9848]"
    }, {
      "left" : "getWrappedValue",
      "right" : "getWrappedValue",
      "info" : "SimpleName[9675-9690]:SimpleName[9849-9864]"
    }, {
      "left" : "int currentValue",
      "right" : "int currentValue",
      "info" : "SingleVariableDeclaration[9691-9707]:SingleVariableDeclaration[9865-9881]"
    }, {
      "left" : "int wrapValue",
      "right" : "int wrapValue",
      "info" : "SingleVariableDeclaration[9709-9722]:SingleVariableDeclaration[9883-9896]"
    }, {
      "left" : "int minValue",
      "right" : "int minValue",
      "info" : "SingleVariableDeclaration[9762-9774]:SingleVariableDeclaration[9936-9948]"
    }, {
      "left" : "int maxValue",
      "right" : "int maxValue",
      "info" : "SingleVariableDeclaration[9776-9788]:SingleVariableDeclaration[9950-9962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9790-9875]:Block[9964-10049]"
    }, {
      "left" : "return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",
      "right" : "return getWrappedValue(currentValue + wrapValue, minValue, maxValue);",
      "info" : "ReturnStatement[9800-9869]:ReturnStatement[9974-10043]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[10378-10384]:Modifier[10552-10558]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[10385-10391]:Modifier[10559-10565]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[10392-10395]:PrimitiveType[10566-10569]"
    }, {
      "left" : "getWrappedValue",
      "right" : "getWrappedValue",
      "info" : "SimpleName[10396-10411]:SimpleName[10570-10585]"
    }, {
      "left" : "int value",
      "right" : "int value",
      "info" : "SingleVariableDeclaration[10412-10421]:SingleVariableDeclaration[10586-10595]"
    }, {
      "left" : "int minValue",
      "right" : "int minValue",
      "info" : "SingleVariableDeclaration[10423-10435]:SingleVariableDeclaration[10597-10609]"
    }, {
      "left" : "int maxValue",
      "right" : "int maxValue",
      "info" : "SingleVariableDeclaration[10437-10449]:SingleVariableDeclaration[10611-10623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10451-10905]:Block[10625-11079]"
    }, {
      "left" : "if (minValue >= maxValue)",
      "right" : "if (minValue >= maxValue)",
      "info" : "IfStatement[10461-10559]:IfStatement[10635-10733]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10487-10559]:Block[10661-10733]"
    }, {
      "left" : "throw new IllegalArgumentException(\"MIN > MAX\");",
      "right" : "throw new IllegalArgumentException(\"MIN > MAX\");",
      "info" : "ThrowStatement[10501-10549]:ThrowStatement[10675-10723]"
    }, {
      "left" : "int wrapRange = maxValue - minValue + 1;",
      "right" : "int wrapRange = maxValue - minValue + 1;",
      "info" : "VariableDeclarationStatement[10569-10609]:VariableDeclarationStatement[10743-10783]"
    }, {
      "left" : "value -= minValue;",
      "right" : "value -= minValue;",
      "info" : "ExpressionStatement[10618-10636]:ExpressionStatement[10792-10810]"
    }, {
      "left" : "if (value >= 0)",
      "right" : "if (value >= 0)",
      "info" : "IfStatement[10646-10724]:IfStatement[10820-10898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10662-10724]:Block[10836-10898]"
    }, {
      "left" : "return (value % wrapRange) + minValue;",
      "right" : "return (value % wrapRange) + minValue;",
      "info" : "ReturnStatement[10676-10714]:ReturnStatement[10850-10888]"
    }, {
      "left" : "int remByRange = (-value) % wrapRange;",
      "right" : "int remByRange = (-value) % wrapRange;",
      "info" : "VariableDeclarationStatement[10734-10772]:VariableDeclarationStatement[10908-10946]"
    }, {
      "left" : "if (remByRange == 0)",
      "right" : "if (remByRange == 0)",
      "info" : "IfStatement[10782-10847]:IfStatement[10956-11021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10803-10847]:Block[10977-11021]"
    }, {
      "left" : "return 0 + minValue;",
      "right" : "return 0 + minValue;",
      "info" : "ReturnStatement[10817-10837]:ReturnStatement[10991-11011]"
    }, {
      "left" : "return (wrapRange - remByRange) + minValue;",
      "right" : "return (wrapRange - remByRange) + minValue;",
      "info" : "ReturnStatement[10856-10899]:ReturnStatement[11030-11073]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[11194-11200]:Modifier[11368-11374]"
    }, {
      "left" : "static",
      "right" : "static",
      "info" : "Modifier[11201-11207]:Modifier[11375-11381]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[11208-11215]:PrimitiveType[11382-11389]"
    }, {
      "left" : "equals",
      "right" : "equals",
      "info" : "SimpleName[11216-11222]:SimpleName[11390-11396]"
    }, {
      "left" : "Object object1",
      "right" : "Object object1",
      "info" : "SingleVariableDeclaration[11223-11237]:SingleVariableDeclaration[11397-11411]"
    }, {
      "left" : "Object object2",
      "right" : "Object object2",
      "info" : "SingleVariableDeclaration[11239-11253]:SingleVariableDeclaration[11413-11427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11255-11457]:Block[11429-11631]"
    }, {
      "left" : "if (object1 == object2)",
      "right" : "if (object1 == object2)",
      "info" : "IfStatement[11265-11325]:IfStatement[11439-11499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11289-11325]:Block[11463-11499]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[11303-11315]:ReturnStatement[11477-11489]"
    }, {
      "left" : "if (object1 == null || object2 == null)",
      "right" : "if (object1 == null || object2 == null)",
      "info" : "IfStatement[11334-11411]:IfStatement[11508-11585]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11374-11411]:Block[11548-11585]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[11388-11401]:ReturnStatement[11562-11575]"
    }, {
      "left" : "return object1.equals(object2);",
      "right" : "return object1.equals(object2);",
      "info" : "ReturnStatement[11420-11451]:ReturnStatement[11594-11625]"
    } ]
  },
  "interFileMappings" : { }
}