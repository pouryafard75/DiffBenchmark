{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FunctionType",
      "right" : "FunctionType",
      "info" : "TypeDeclaration[2139-27526]:TypeDeclaration[2139-27528]"
    }, {
      "left" : "private static final long serialVersionUID = 1L;",
      "right" : "private static final long serialVersionUID = 1L;",
      "info" : "FieldDeclaration[2540-2588]:FieldDeclaration[2540-2588]"
    }, {
      "left" : "enum : Kind",
      "right" : "enum : Kind",
      "info" : "EnumDeclaration[2592-2660]:EnumDeclaration[2592-2660]"
    }, {
      "left" : "private ArrowType call;",
      "right" : "private ArrowType call;",
      "info" : "FieldDeclaration[2664-2731]:FieldDeclaration[2664-2731]"
    }, {
      "left" : "private FunctionPrototypeType prototype;",
      "right" : "private FunctionPrototypeType prototype;",
      "info" : "FieldDeclaration[2735-3108]:FieldDeclaration[2735-3108]"
    }, {
      "left" : "private final Kind kind;",
      "right" : "private final Kind kind;",
      "info" : "FieldDeclaration[3112-3239]:FieldDeclaration[3112-3239]"
    }, {
      "left" : "private ObjectType typeOfThis;",
      "right" : "private ObjectType typeOfThis;",
      "info" : "FieldDeclaration[3243-3346]:FieldDeclaration[3243-3346]"
    }, {
      "left" : "private Node source;",
      "right" : "private Node source;",
      "info" : "FieldDeclaration[3350-3457]:FieldDeclaration[3350-3457]"
    }, {
      "left" : "private List<ObjectType> implementedInterfaces = ImmutableList.of();",
      "right" : "private List<ObjectType> implementedInterfaces = ImmutableList.of();",
      "info" : "FieldDeclaration[3461-3668]:FieldDeclaration[3461-3668]"
    }, {
      "left" : "private List<FunctionType> subTypes;",
      "right" : "private List<FunctionType> subTypes;",
      "info" : "FieldDeclaration[3672-3839]:FieldDeclaration[3672-3839]"
    }, {
      "left" : "private String templateTypeName;",
      "right" : "private String templateTypeName;",
      "info" : "FieldDeclaration[3843-3937]:FieldDeclaration[3843-3937]"
    }, {
      "left" : "FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType)",
      "right" : "FunctionType(JSTypeRegistry registry, String name, Node source,\n      ArrowType arrowType, ObjectType typeOfThis,\n      String templateTypeName,  boolean isConstructor, boolean nativeType)",
      "info" : "MethodDeclaration[3941-4963]:MethodDeclaration[3941-4963]"
    }, {
      "left" : "private FunctionType(JSTypeRegistry registry, String name, Node source)",
      "right" : "private FunctionType(JSTypeRegistry registry, String name, Node source)",
      "info" : "MethodDeclaration[4967-5541]:MethodDeclaration[4967-5541]"
    }, {
      "left" : "static FunctionType forInterface(\n      JSTypeRegistry registry, String name, Node source)",
      "right" : "static FunctionType forInterface(\n      JSTypeRegistry registry, String name, Node source)",
      "info" : "MethodDeclaration[5545-5760]:MethodDeclaration[5545-5760]"
    }, {
      "left" : "public boolean isInstanceType()",
      "right" : "public boolean isInstanceType()",
      "info" : "MethodDeclaration[5764-5951]:MethodDeclaration[5764-5951]"
    }, {
      "left" : "public boolean isConstructor()",
      "right" : "public boolean isConstructor()",
      "info" : "MethodDeclaration[5955-6040]:MethodDeclaration[5955-6040]"
    }, {
      "left" : "public boolean isInterface()",
      "right" : "public boolean isInterface()",
      "info" : "MethodDeclaration[6044-6125]:MethodDeclaration[6044-6125]"
    }, {
      "left" : "public boolean isOrdinaryFunction()",
      "right" : "public boolean isOrdinaryFunction()",
      "info" : "MethodDeclaration[6129-6216]:MethodDeclaration[6129-6216]"
    }, {
      "left" : "public boolean isFunctionType()",
      "right" : "public boolean isFunctionType()",
      "info" : "MethodDeclaration[6220-6286]:MethodDeclaration[6220-6286]"
    }, {
      "left" : "public boolean canBeCalled()",
      "right" : "public boolean canBeCalled()",
      "info" : "MethodDeclaration[6290-6353]:MethodDeclaration[6290-6353]"
    }, {
      "left" : "public Iterable<Node> getParameters()",
      "right" : "public Iterable<Node> getParameters()",
      "info" : "MethodDeclaration[6357-6538]:MethodDeclaration[6357-6538]"
    }, {
      "left" : "public Node getParametersNode()",
      "right" : "public Node getParametersNode()",
      "info" : "MethodDeclaration[6542-6671]:MethodDeclaration[6542-6671]"
    }, {
      "left" : "public int getMinArguments()",
      "right" : "public int getMinArguments()",
      "info" : "MethodDeclaration[6675-7156]:MethodDeclaration[6675-7156]"
    }, {
      "left" : "public int getMaxArguments()",
      "right" : "public int getMaxArguments()",
      "info" : "MethodDeclaration[7160-7596]:MethodDeclaration[7160-7596]"
    }, {
      "left" : "public JSType getReturnType()",
      "right" : "public JSType getReturnType()",
      "info" : "MethodDeclaration[7600-7663]:MethodDeclaration[7600-7663]"
    }, {
      "left" : "public boolean isReturnTypeInferred()",
      "right" : "public boolean isReturnTypeInferred()",
      "info" : "MethodDeclaration[7667-7746]:MethodDeclaration[7667-7746]"
    }, {
      "left" : "ArrowType getInternalArrowType()",
      "right" : "ArrowType getInternalArrowType()",
      "info" : "MethodDeclaration[7750-7872]:MethodDeclaration[7750-7872]"
    }, {
      "left" : "public FunctionPrototypeType getPrototype()",
      "right" : "public FunctionPrototypeType getPrototype()",
      "info" : "MethodDeclaration[7876-8255]:MethodDeclaration[7876-8255]"
    }, {
      "left" : "public void setPrototypeBasedOn(ObjectType baseType)",
      "right" : "public void setPrototypeBasedOn(ObjectType baseType)",
      "info" : "MethodDeclaration[8259-8668]:MethodDeclaration[8259-8668]"
    }, {
      "left" : "public boolean setPrototype(FunctionPrototypeType prototype)",
      "right" : "public boolean setPrototype(FunctionPrototypeType prototype)",
      "info" : "MethodDeclaration[8672-9331]:MethodDeclaration[8672-9331]"
    }, {
      "left" : "public Iterable<ObjectType> getAllImplementedInterfaces()",
      "right" : "public Iterable<ObjectType> getAllImplementedInterfaces()",
      "info" : "MethodDeclaration[9335-9806]:MethodDeclaration[9335-9806]"
    }, {
      "left" : "private void addRelatedInterfaces(ObjectType instance, Set<ObjectType> set)",
      "right" : "private void addRelatedInterfaces(ObjectType instance, Set<ObjectType> set)",
      "info" : "MethodDeclaration[9810-10251]:MethodDeclaration[9810-10251]"
    }, {
      "left" : "public Iterable<ObjectType> getImplementedInterfaces()",
      "right" : "public Iterable<ObjectType> getImplementedInterfaces()",
      "info" : "MethodDeclaration[10255-10671]:MethodDeclaration[10255-10671]"
    }, {
      "left" : "public void setImplementedInterfaces(List<ObjectType> implementedInterfaces)",
      "right" : "public void setImplementedInterfaces(List<ObjectType> implementedInterfaces)",
      "info" : "MethodDeclaration[10675-11012]:MethodDeclaration[10675-11012]"
    }, {
      "left" : "public boolean hasProperty(String name)",
      "right" : "public boolean hasProperty(String name)",
      "info" : "MethodDeclaration[11016-11137]:MethodDeclaration[11016-11137]"
    }, {
      "left" : "public boolean hasOwnProperty(String name)",
      "right" : "public boolean hasOwnProperty(String name)",
      "info" : "MethodDeclaration[11141-11268]:MethodDeclaration[11141-11268]"
    }, {
      "left" : "public JSType getPropertyType(String name)",
      "right" : "public JSType getPropertyType(String name)",
      "info" : "MethodDeclaration[11272-13420]:MethodDeclaration[11272-13420]"
    }, {
      "left" : "boolean defineProperty(String name, JSType type,\n      boolean inferred, boolean inExterns)",
      "right" : "boolean defineProperty(String name, JSType type,\n      boolean inferred, boolean inExterns)",
      "info" : "MethodDeclaration[13424-13978]:MethodDeclaration[13424-13978]"
    }, {
      "left" : "public boolean isPropertyTypeInferred(String property)",
      "right" : "public boolean isPropertyTypeInferred(String property)",
      "info" : "MethodDeclaration[13982-14145]:MethodDeclaration[13982-14145]"
    }, {
      "left" : "public JSType getLeastSupertype(JSType that)",
      "right" : "public JSType getLeastSupertype(JSType that)",
      "info" : "MethodDeclaration[14149-14251]:MethodDeclaration[14149-14251]"
    }, {
      "left" : "public JSType getGreatestSubtype(JSType that)",
      "right" : "public JSType getGreatestSubtype(JSType that)",
      "info" : "MethodDeclaration[14255-14359]:MethodDeclaration[14255-14359]"
    }, {
      "left" : "private JSType supAndInfHelper(JSType that, boolean leastSuper)",
      "right" : "private JSType supAndInfHelper(JSType that, boolean leastSuper)",
      "info" : "MethodDeclaration[14363-16702]:MethodDeclaration[14363-16702]"
    }, {
      "left" : "FunctionType cloneWithNewReturnType(JSType newReturnType, boolean inferred)",
      "right" : "FunctionType cloneWithNewReturnType(JSType newReturnType, boolean inferred)",
      "info" : "MethodDeclaration[16706-16975]:MethodDeclaration[16706-16977]"
    }, {
      "left" : "public FunctionType getSuperClassConstructor()",
      "right" : "public FunctionType getSuperClassConstructor()",
      "info" : "MethodDeclaration[16979-17423]:MethodDeclaration[16981-17425]"
    }, {
      "left" : "public boolean hasUnknownSupertype()",
      "right" : "public boolean hasUnknownSupertype()",
      "info" : "MethodDeclaration[17427-18354]:MethodDeclaration[17429-18356]"
    }, {
      "left" : "public JSType getTopMostDefiningType(String propertyName)",
      "right" : "public JSType getTopMostDefiningType(String propertyName)",
      "info" : "MethodDeclaration[18358-19000]:MethodDeclaration[18360-19002]"
    }, {
      "left" : "public boolean isEquivalentTo(JSType otherType)",
      "right" : "public boolean isEquivalentTo(JSType otherType)",
      "info" : "MethodDeclaration[19004-19872]:MethodDeclaration[19006-19874]"
    }, {
      "left" : "public int hashCode()",
      "right" : "public int hashCode()",
      "info" : "MethodDeclaration[19876-19991]:MethodDeclaration[19878-19993]"
    }, {
      "left" : "public boolean hasEqualCallType(FunctionType otherType)",
      "right" : "public boolean hasEqualCallType(FunctionType otherType)",
      "info" : "MethodDeclaration[19995-20109]:MethodDeclaration[19997-20111]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[20113-21442]:MethodDeclaration[20115-21444]"
    }, {
      "left" : "private void appendVarArgsString(StringBuilder builder, JSType paramType)",
      "right" : "private void appendVarArgsString(StringBuilder builder, JSType paramType)",
      "info" : "MethodDeclaration[21446-21868]:MethodDeclaration[21448-21870]"
    }, {
      "left" : "public boolean isSubtype(JSType that)",
      "right" : "public boolean isSubtype(JSType that)",
      "info" : "MethodDeclaration[21872-23518]:MethodDeclaration[21874-23520]"
    }, {
      "left" : "public <T> T visit(Visitor<T> visitor)",
      "right" : "public <T> T visit(Visitor<T> visitor)",
      "info" : "MethodDeclaration[23522-23621]:MethodDeclaration[23524-23623]"
    }, {
      "left" : "public ObjectType getInstanceType()",
      "right" : "public ObjectType getInstanceType()",
      "info" : "MethodDeclaration[23625-23917]:MethodDeclaration[23627-23919]"
    }, {
      "left" : "void setInstanceType(ObjectType instanceType)",
      "right" : "void setInstanceType(ObjectType instanceType)",
      "info" : "MethodDeclaration[23921-24087]:MethodDeclaration[23923-24089]"
    }, {
      "left" : "public boolean hasInstanceType()",
      "right" : "public boolean hasInstanceType()",
      "info" : "MethodDeclaration[24091-24248]:MethodDeclaration[24093-24250]"
    }, {
      "left" : "public ObjectType getTypeOfThis()",
      "right" : "public ObjectType getTypeOfThis()",
      "info" : "MethodDeclaration[24252-24474]:MethodDeclaration[24254-24476]"
    }, {
      "left" : "public Node getSource()",
      "right" : "public Node getSource()",
      "info" : "MethodDeclaration[24478-24604]:MethodDeclaration[24480-24606]"
    }, {
      "left" : "public void setSource(Node source)",
      "right" : "public void setSource(Node source)",
      "info" : "MethodDeclaration[24608-24713]:MethodDeclaration[24610-24715]"
    }, {
      "left" : "private void addSubType(FunctionType subType)",
      "right" : "private void addSubType(FunctionType subType)",
      "info" : "MethodDeclaration[24717-24928]:MethodDeclaration[24719-24930]"
    }, {
      "left" : "public List<FunctionType> getSubTypes()",
      "right" : "public List<FunctionType> getSubTypes()",
      "info" : "MethodDeclaration[24932-25199]:MethodDeclaration[24934-25201]"
    }, {
      "left" : "public boolean hasCachedValues()",
      "right" : "public boolean hasCachedValues()",
      "info" : "MethodDeclaration[25203-25310]:MethodDeclaration[25205-25312]"
    }, {
      "left" : "public String getTemplateTypeName()",
      "right" : "public String getTemplateTypeName()",
      "info" : "MethodDeclaration[25314-25430]:MethodDeclaration[25316-25432]"
    }, {
      "left" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "right" : "JSType resolveInternal(ErrorReporter t, StaticScope<JSType> scope)",
      "info" : "MethodDeclaration[25434-26381]:MethodDeclaration[25436-26383]"
    }, {
      "left" : "public String toDebugHashCodeString()",
      "right" : "public String toDebugHashCodeString()",
      "info" : "MethodDeclaration[26385-27357]:MethodDeclaration[26387-27359]"
    }, {
      "left" : "private String getDebugHashCodeStringOf(JSType type)",
      "right" : "private String getDebugHashCodeStringOf(JSType type)",
      "info" : "MethodDeclaration[27361-27524]:MethodDeclaration[27363-27526]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4203-4963]:Block[4203-4963]"
    }, {
      "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
      "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE),\n        nativeType);",
      "info" : "SuperConstructorInvocation[4209-4326]:SuperConstructorInvocation[4209-4326]"
    }, {
      "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "info" : "ExpressionStatement[4331-4421]:ExpressionStatement[4331-4421]"
    }, {
      "left" : "Preconditions.checkNotNull(arrowType);",
      "right" : "Preconditions.checkNotNull(arrowType);",
      "info" : "ExpressionStatement[4426-4464]:ExpressionStatement[4426-4464]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[4469-4490]:ExpressionStatement[4469-4490]"
    }, {
      "left" : "this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;",
      "right" : "this.kind = isConstructor ? Kind.CONSTRUCTOR : Kind.ORDINARY;",
      "info" : "ExpressionStatement[4495-4556]:ExpressionStatement[4495-4556]"
    }, {
      "left" : "if (isConstructor)",
      "right" : "if (isConstructor)",
      "info" : "IfStatement[4561-4886]:IfStatement[4561-4886]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4580-4738]:Block[4580-4738]"
    }, {
      "left" : "this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
      "right" : "this.typeOfThis = typeOfThis != null && typeOfThis.isNoObjectType() ?\n          typeOfThis : new InstanceObjectType(registry, this, nativeType);",
      "info" : "ExpressionStatement[4588-4732]:ExpressionStatement[4588-4732]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4744-4886]:Block[4744-4886]"
    }, {
      "left" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
      "right" : "this.typeOfThis = typeOfThis != null ?\n          typeOfThis :\n          registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE);",
      "info" : "ExpressionStatement[4752-4880]:ExpressionStatement[4752-4880]"
    }, {
      "left" : "this.call = arrowType;",
      "right" : "this.call = arrowType;",
      "info" : "ExpressionStatement[4891-4913]:ExpressionStatement[4891-4913]"
    }, {
      "left" : "this.templateTypeName = templateTypeName;",
      "right" : "this.templateTypeName = templateTypeName;",
      "info" : "ExpressionStatement[4918-4959]:ExpressionStatement[4918-4959]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5105-5541]:Block[5105-5541]"
    }, {
      "left" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
      "right" : "super(registry, name,\n        registry.getNativeObjectType(JSTypeNative.FUNCTION_INSTANCE_TYPE));",
      "info" : "SuperConstructorInvocation[5111-5208]:SuperConstructorInvocation[5111-5208]"
    }, {
      "left" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "right" : "Preconditions.checkArgument(source == null ||\n        Token.FUNCTION == source.getType());",
      "info" : "ExpressionStatement[5213-5303]:ExpressionStatement[5213-5303]"
    }, {
      "left" : "Preconditions.checkArgument(name != null);",
      "right" : "Preconditions.checkArgument(name != null);",
      "info" : "ExpressionStatement[5308-5350]:ExpressionStatement[5308-5350]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[5355-5376]:ExpressionStatement[5355-5376]"
    }, {
      "left" : "this.call = new ArrowType(registry, new Node(Token.LP), null);",
      "right" : "this.call = new ArrowType(registry, new Node(Token.LP), null);",
      "info" : "ExpressionStatement[5381-5443]:ExpressionStatement[5381-5443]"
    }, {
      "left" : "this.kind = Kind.INTERFACE;",
      "right" : "this.kind = Kind.INTERFACE;",
      "info" : "ExpressionStatement[5448-5475]:ExpressionStatement[5448-5475]"
    }, {
      "left" : "this.typeOfThis = new InstanceObjectType(registry, this);",
      "right" : "this.typeOfThis = new InstanceObjectType(registry, this);",
      "info" : "ExpressionStatement[5480-5537]:ExpressionStatement[5480-5537]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5702-5760]:Block[5702-5760]"
    }, {
      "left" : "return new FunctionType(registry, name, source);",
      "right" : "return new FunctionType(registry, name, source);",
      "info" : "ReturnStatement[5708-5756]:ReturnStatement[5708-5756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5808-5951]:Block[5808-5951]"
    }, {
      "left" : "return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "right" : "return isEquivalentTo(registry.getNativeType(U2U_CONSTRUCTOR_TYPE));",
      "info" : "ReturnStatement[5879-5947]:ReturnStatement[5879-5947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5998-6040]:Block[5998-6040]"
    }, {
      "left" : "return kind == Kind.CONSTRUCTOR;",
      "right" : "return kind == Kind.CONSTRUCTOR;",
      "info" : "ReturnStatement[6004-6036]:ReturnStatement[6004-6036]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6085-6125]:Block[6085-6125]"
    }, {
      "left" : "return kind == Kind.INTERFACE;",
      "right" : "return kind == Kind.INTERFACE;",
      "info" : "ReturnStatement[6091-6121]:ReturnStatement[6091-6121]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6177-6216]:Block[6177-6216]"
    }, {
      "left" : "return kind == Kind.ORDINARY;",
      "right" : "return kind == Kind.ORDINARY;",
      "info" : "ReturnStatement[6183-6212]:ReturnStatement[6183-6212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6264-6286]:Block[6264-6286]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6270-6282]:ReturnStatement[6270-6282]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6331-6353]:Block[6331-6353]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[6337-6349]:ReturnStatement[6337-6349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6395-6538]:Block[6395-6538]"
    }, {
      "left" : "Node n = getParametersNode();",
      "right" : "Node n = getParametersNode();",
      "info" : "VariableDeclarationStatement[6401-6430]:VariableDeclarationStatement[6401-6430]"
    }, {
      "left" : "if (n != null)",
      "right" : "if (n != null)",
      "info" : "IfStatement[6435-6534]:IfStatement[6435-6534]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6450-6484]:Block[6450-6484]"
    }, {
      "left" : "return n.children();",
      "right" : "return n.children();",
      "info" : "ReturnStatement[6458-6478]:ReturnStatement[6458-6478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6490-6534]:Block[6490-6534]"
    }, {
      "left" : "return Collections.emptySet();",
      "right" : "return Collections.emptySet();",
      "info" : "ReturnStatement[6498-6528]:ReturnStatement[6498-6528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6638-6671]:Block[6638-6671]"
    }, {
      "left" : "return call.parameters;",
      "right" : "return call.parameters;",
      "info" : "ReturnStatement[6644-6667]:ReturnStatement[6644-6667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6779-7156]:Block[6779-7156]"
    }, {
      "left" : "int i = 0;",
      "right" : "int i = 0;",
      "info" : "VariableDeclarationStatement[6980-6990]:VariableDeclarationStatement[6980-6990]"
    }, {
      "left" : "int min = 0;",
      "right" : "int min = 0;",
      "info" : "VariableDeclarationStatement[6995-7007]:VariableDeclarationStatement[6995-7007]"
    }, {
      "left" : "for (Node n : getParameters())",
      "right" : "for (Node n : getParameters())",
      "info" : "EnhancedForStatement[7012-7136]:EnhancedForStatement[7012-7136]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7043-7136]:Block[7043-7136]"
    }, {
      "left" : "i++;",
      "right" : "i++;",
      "info" : "ExpressionStatement[7051-7055]:ExpressionStatement[7051-7055]"
    }, {
      "left" : "if (!n.isOptionalArg() && !n.isVarArgs())",
      "right" : "if (!n.isOptionalArg() && !n.isVarArgs())",
      "info" : "IfStatement[7062-7130]:IfStatement[7062-7130]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7104-7130]:Block[7104-7130]"
    }, {
      "left" : "min = i;",
      "right" : "min = i;",
      "info" : "ExpressionStatement[7114-7122]:ExpressionStatement[7114-7122]"
    }, {
      "left" : "return min;",
      "right" : "return min;",
      "info" : "ReturnStatement[7141-7152]:ReturnStatement[7141-7152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7339-7596]:Block[7339-7596]"
    }, {
      "left" : "Node params = getParametersNode();",
      "right" : "Node params = getParametersNode();",
      "info" : "VariableDeclarationStatement[7345-7379]:VariableDeclarationStatement[7345-7379]"
    }, {
      "left" : "if (params != null)",
      "right" : "if (params != null)",
      "info" : "IfStatement[7384-7561]:IfStatement[7384-7561]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7404-7561]:Block[7404-7561]"
    }, {
      "left" : "Node lastParam = params.getLastChild();",
      "right" : "Node lastParam = params.getLastChild();",
      "info" : "VariableDeclarationStatement[7412-7451]:VariableDeclarationStatement[7412-7451]"
    }, {
      "left" : "if (lastParam == null || !lastParam.isVarArgs())",
      "right" : "if (lastParam == null || !lastParam.isVarArgs())",
      "info" : "IfStatement[7458-7555]:IfStatement[7458-7555]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7507-7555]:Block[7507-7555]"
    }, {
      "left" : "return params.getChildCount();",
      "right" : "return params.getChildCount();",
      "info" : "ReturnStatement[7517-7547]:ReturnStatement[7517-7547]"
    }, {
      "left" : "return Integer.MAX_VALUE;",
      "right" : "return Integer.MAX_VALUE;",
      "info" : "ReturnStatement[7567-7592]:ReturnStatement[7567-7592]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7630-7663]:Block[7630-7663]"
    }, {
      "left" : "return call.returnType;",
      "right" : "return call.returnType;",
      "info" : "ReturnStatement[7636-7659]:ReturnStatement[7636-7659]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7705-7746]:Block[7705-7746]"
    }, {
      "left" : "return call.returnTypeInferred;",
      "right" : "return call.returnTypeInferred;",
      "info" : "ReturnStatement[7711-7742]:ReturnStatement[7711-7742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7850-7872]:Block[7850-7872]"
    }, {
      "left" : "return call;",
      "right" : "return call;",
      "info" : "ReturnStatement[7856-7868]:ReturnStatement[7856-7868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8074-8255]:Block[8074-8255]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[8130-8229]:IfStatement[8130-8229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8153-8229]:Block[8153-8229]"
    }, {
      "left" : "setPrototype(new FunctionPrototypeType(registry, this, null));",
      "right" : "setPrototype(new FunctionPrototypeType(registry, this, null));",
      "info" : "ExpressionStatement[8161-8223]:ExpressionStatement[8161-8223]"
    }, {
      "left" : "return prototype;",
      "right" : "return prototype;",
      "info" : "ReturnStatement[8234-8251]:ReturnStatement[8234-8251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8446-8668]:Block[8446-8668]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[8452-8664]:IfStatement[8452-8664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8475-8603]:Block[8475-8603]"
    }, {
      "left" : "setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));",
      "right" : "setPrototype(\n          new FunctionPrototypeType(\n              registry, this, baseType, isNativeObjectType()));",
      "info" : "ExpressionStatement[8483-8597]:ExpressionStatement[8483-8597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8609-8664]:Block[8609-8664]"
    }, {
      "left" : "prototype.setImplicitPrototype(baseType);",
      "right" : "prototype.setImplicitPrototype(baseType);",
      "info" : "ExpressionStatement[8617-8658]:ExpressionStatement[8617-8658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8880-9331]:Block[8880-9331]"
    }, {
      "left" : "if (prototype == null)",
      "right" : "if (prototype == null)",
      "info" : "IfStatement[8886-8936]:IfStatement[8886-8936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8909-8936]:Block[8909-8936]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8917-8930]:ReturnStatement[8917-8930]"
    }, {
      "left" : "if (isConstructor() && prototype == getInstanceType())",
      "right" : "if (isConstructor() && prototype == getInstanceType())",
      "info" : "IfStatement[9007-9089]:IfStatement[9007-9089]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9062-9089]:Block[9062-9089]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[9070-9083]:ReturnStatement[9070-9083]"
    }, {
      "left" : "this.prototype = prototype;",
      "right" : "this.prototype = prototype;",
      "info" : "ExpressionStatement[9095-9122]:ExpressionStatement[9095-9122]"
    }, {
      "left" : "if (isConstructor() || isInterface())",
      "right" : "if (isConstructor() || isInterface())",
      "info" : "IfStatement[9128-9310]:IfStatement[9128-9310]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9166-9310]:Block[9166-9310]"
    }, {
      "left" : "FunctionType superClass = getSuperClassConstructor();",
      "right" : "FunctionType superClass = getSuperClassConstructor();",
      "info" : "VariableDeclarationStatement[9174-9227]:VariableDeclarationStatement[9174-9227]"
    }, {
      "left" : "if (superClass != null)",
      "right" : "if (superClass != null)",
      "info" : "IfStatement[9234-9304]:IfStatement[9234-9304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9258-9304]:Block[9258-9304]"
    }, {
      "left" : "superClass.addSubType(this);",
      "right" : "superClass.addSubType(this);",
      "info" : "ExpressionStatement[9268-9296]:ExpressionStatement[9268-9296]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[9315-9327]:ReturnStatement[9315-9327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9616-9806]:Block[9616-9806]"
    }, {
      "left" : "Set<ObjectType> interfaces = Sets.newHashSet();",
      "right" : "Set<ObjectType> interfaces = Sets.newHashSet();",
      "info" : "VariableDeclarationStatement[9622-9669]:VariableDeclarationStatement[9622-9669]"
    }, {
      "left" : "for (ObjectType type : getImplementedInterfaces())",
      "right" : "for (ObjectType type : getImplementedInterfaces())",
      "info" : "EnhancedForStatement[9675-9779]:EnhancedForStatement[9675-9779]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9726-9779]:Block[9726-9779]"
    }, {
      "left" : "addRelatedInterfaces(type, interfaces);",
      "right" : "addRelatedInterfaces(type, interfaces);",
      "info" : "ExpressionStatement[9734-9773]:ExpressionStatement[9734-9773]"
    }, {
      "left" : "return interfaces;",
      "right" : "return interfaces;",
      "info" : "ReturnStatement[9784-9802]:ReturnStatement[9784-9802]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9886-10251]:Block[9886-10251]"
    }, {
      "left" : "FunctionType constructor = instance.getConstructor();",
      "right" : "FunctionType constructor = instance.getConstructor();",
      "info" : "VariableDeclarationStatement[9892-9945]:VariableDeclarationStatement[9892-9945]"
    }, {
      "left" : "if (constructor != null)",
      "right" : "if (constructor != null)",
      "info" : "IfStatement[9950-10247]:IfStatement[9950-10247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9975-10247]:Block[9975-10247]"
    }, {
      "left" : "if (!constructor.isInterface())",
      "right" : "if (!constructor.isInterface())",
      "info" : "IfStatement[9983-10040]:IfStatement[9983-10040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10015-10040]:Block[10015-10040]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[10025-10032]:ReturnStatement[10025-10032]"
    }, {
      "left" : "set.add(instance);",
      "right" : "set.add(instance);",
      "info" : "ExpressionStatement[10048-10066]:ExpressionStatement[10048-10066]"
    }, {
      "left" : "if (constructor.getSuperClassConstructor() != null)",
      "right" : "if (constructor.getSuperClassConstructor() != null)",
      "info" : "IfStatement[10074-10241]:IfStatement[10074-10241]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10126-10241]:Block[10126-10241]"
    }, {
      "left" : "addRelatedInterfaces(\n            constructor.getSuperClassConstructor().getInstanceType(), set);",
      "right" : "addRelatedInterfaces(\n            constructor.getSuperClassConstructor().getInstanceType(), set);",
      "info" : "ExpressionStatement[10136-10233]:ExpressionStatement[10136-10233]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10389-10671]:Block[10389-10671]"
    }, {
      "left" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
      "right" : "FunctionType superCtor = isConstructor() ?\n        getSuperClassConstructor() : null;",
      "info" : "VariableDeclarationStatement[10395-10480]:VariableDeclarationStatement[10395-10480]"
    }, {
      "left" : "if (superCtor == null)",
      "right" : "if (superCtor == null)",
      "info" : "IfStatement[10485-10667]:IfStatement[10485-10667]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10508-10551]:Block[10508-10551]"
    }, {
      "left" : "return implementedInterfaces;",
      "right" : "return implementedInterfaces;",
      "info" : "ReturnStatement[10516-10545]:ReturnStatement[10516-10545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10557-10667]:Block[10557-10667]"
    }, {
      "left" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
      "right" : "return Iterables.concat(\n          implementedInterfaces, superCtor.getImplementedInterfaces());",
      "info" : "ReturnStatement[10565-10661]:ReturnStatement[10565-10661]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10752-11012]:Block[10752-11012]"
    }, {
      "left" : "for (ObjectType type : implementedInterfaces)",
      "right" : "for (ObjectType type : implementedInterfaces)",
      "info" : "EnhancedForStatement[10815-10930]:EnhancedForStatement[10815-10930]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10861-10930]:Block[10861-10930]"
    }, {
      "left" : "registry.registerTypeImplementingInterface(this, type);",
      "right" : "registry.registerTypeImplementingInterface(this, type);",
      "info" : "ExpressionStatement[10869-10924]:ExpressionStatement[10869-10924]"
    }, {
      "left" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
      "right" : "this.implementedInterfaces = ImmutableList.copyOf(implementedInterfaces);",
      "info" : "ExpressionStatement[10935-11008]:ExpressionStatement[10935-11008]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11068-11137]:Block[11068-11137]"
    }, {
      "left" : "return super.hasProperty(name) || \"prototype\".equals(name);",
      "right" : "return super.hasProperty(name) || \"prototype\".equals(name);",
      "info" : "ReturnStatement[11074-11133]:ReturnStatement[11074-11133]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11196-11268]:Block[11196-11268]"
    }, {
      "left" : "return super.hasOwnProperty(name) || \"prototype\".equals(name);",
      "right" : "return super.hasOwnProperty(name) || \"prototype\".equals(name);",
      "info" : "ReturnStatement[11202-11264]:ReturnStatement[11202-11264]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11327-13420]:Block[11327-13420]"
    }, {
      "left" : "if (\"prototype\".equals(name))",
      "right" : "if (\"prototype\".equals(name))",
      "info" : "IfStatement[11333-13416]:IfStatement[11333-13416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11363-11399]:Block[11363-11399]"
    }, {
      "left" : "return getPrototype();",
      "right" : "return getPrototype();",
      "info" : "ReturnStatement[11371-11393]:ReturnStatement[11371-11393]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11405-13416]:Block[11405-13416]"
    }, {
      "left" : "if (!hasOwnProperty(name))",
      "right" : "if (!hasOwnProperty(name))",
      "info" : "IfStatement[11413-13367]:IfStatement[11413-13367]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11440-13367]:Block[11440-13367]"
    }, {
      "left" : "if (\"call\".equals(name))",
      "right" : "if (\"call\".equals(name))",
      "info" : "IfStatement[11450-13359]:IfStatement[11450-13359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11475-12500]:Block[11475-12500]"
    }, {
      "left" : "Node params = getParametersNode();",
      "right" : "Node params = getParametersNode();",
      "info" : "VariableDeclarationStatement[11535-11569]:VariableDeclarationStatement[11535-11569]"
    }, {
      "left" : "if (params == null)",
      "right" : "if (params == null)",
      "info" : "IfStatement[11580-12490]:IfStatement[11580-12490]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11600-11915]:Block[11600-11915]"
    }, {
      "left" : "defineDeclaredProperty(name,\n                new FunctionBuilder(registry)\n                    .withReturnType(getReturnType())\n                    .build(),\n                false);",
      "right" : "defineDeclaredProperty(name,\n                new FunctionBuilder(registry)\n                    .withReturnType(getReturnType())\n                    .build(),\n                false);",
      "info" : "ExpressionStatement[11722-11903]:ExpressionStatement[11722-11903]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11921-12490]:Block[11921-12490]"
    }, {
      "left" : "params = params.cloneTree();",
      "right" : "params = params.cloneTree();",
      "info" : "ExpressionStatement[11935-11963]:ExpressionStatement[11935-11963]"
    }, {
      "left" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
      "right" : "Node thisTypeNode = Node.newString(Token.NAME, \"thisType\");",
      "info" : "VariableDeclarationStatement[11976-12035]:VariableDeclarationStatement[11976-12035]"
    }, {
      "left" : "thisTypeNode.setJSType(\n                registry.createOptionalNullableType(getTypeOfThis()));",
      "right" : "thisTypeNode.setJSType(\n                registry.createOptionalNullableType(getTypeOfThis()));",
      "info" : "ExpressionStatement[12048-12142]:ExpressionStatement[12048-12142]"
    }, {
      "left" : "params.addChildToFront(thisTypeNode);",
      "right" : "params.addChildToFront(thisTypeNode);",
      "info" : "ExpressionStatement[12155-12192]:ExpressionStatement[12155-12192]"
    }, {
      "left" : "thisTypeNode.setOptionalArg(true);",
      "right" : "thisTypeNode.setOptionalArg(true);",
      "info" : "ExpressionStatement[12205-12239]:ExpressionStatement[12205-12239]"
    }, {
      "left" : "defineDeclaredProperty(name,\n                new FunctionBuilder(registry)\n                    .withParamsNode(params)\n                    .withReturnType(getReturnType())\n                    .build(),\n                false);",
      "right" : "defineDeclaredProperty(name,\n                new FunctionBuilder(registry)\n                    .withParamsNode(params)\n                    .withReturnType(getReturnType())\n                    .build(),\n                false);",
      "info" : "ExpressionStatement[12253-12478]:ExpressionStatement[12253-12478]"
    }, {
      "left" : "if (\"apply\".equals(name))",
      "right" : "if (\"apply\".equals(name))",
      "info" : "IfStatement[12506-13359]:IfStatement[12506-13359]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12532-13359]:Block[12532-13359]"
    }, {
      "left" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
      "right" : "FunctionParamBuilder builder = new FunctionParamBuilder(registry);",
      "info" : "VariableDeclarationStatement[12593-12659]:VariableDeclarationStatement[12593-12659]"
    }, {
      "left" : "builder.addOptionalParams(\n              registry.createNullableType(getTypeOfThis()),\n              registry.createNullableType(\n                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
      "right" : "builder.addOptionalParams(\n              registry.createNullableType(getTypeOfThis()),\n              registry.createNullableType(\n                  registry.getNativeType(JSTypeNative.OBJECT_TYPE)));",
      "info" : "ExpressionStatement[12926-13125]:ExpressionStatement[12926-13125]"
    }, {
      "left" : "defineDeclaredProperty(name,\n              new FunctionBuilder(registry)\n                  .withParams(builder)\n                  .withReturnType(getReturnType())\n                  .build(),\n              false);",
      "right" : "defineDeclaredProperty(name,\n              new FunctionBuilder(registry)\n                  .withParams(builder)\n                  .withReturnType(getReturnType())\n                  .build(),\n              false);",
      "info" : "ExpressionStatement[13137-13349]:ExpressionStatement[13137-13349]"
    }, {
      "left" : "return super.getPropertyType(name);",
      "right" : "return super.getPropertyType(name);",
      "info" : "ReturnStatement[13375-13410]:ReturnStatement[13375-13410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13528-13978]:Block[13528-13978]"
    }, {
      "left" : "if (\"prototype\".equals(name))",
      "right" : "if (\"prototype\".equals(name))",
      "info" : "IfStatement[13534-13908]:IfStatement[13534-13908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13564-13908]:Block[13564-13908]"
    }, {
      "left" : "ObjectType objType = type.toObjectType();",
      "right" : "ObjectType objType = type.toObjectType();",
      "info" : "VariableDeclarationStatement[13572-13613]:VariableDeclarationStatement[13572-13613]"
    }, {
      "left" : "if (objType != null)",
      "right" : "if (objType != null)",
      "info" : "IfStatement[13620-13902]:IfStatement[13620-13902]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13641-13865]:Block[13641-13865]"
    }, {
      "left" : "if (objType.isEquivalentTo(prototype))",
      "right" : "if (objType.isEquivalentTo(prototype))",
      "info" : "IfStatement[13651-13724]:IfStatement[13651-13724]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13690-13724]:Block[13690-13724]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[13702-13714]:ReturnStatement[13702-13714]"
    }, {
      "left" : "return setPrototype(\n            new FunctionPrototypeType(\n                registry, this, objType, isNativeObjectType()));",
      "right" : "return setPrototype(\n            new FunctionPrototypeType(\n                registry, this, objType, isNativeObjectType()));",
      "info" : "ReturnStatement[13733-13857]:ReturnStatement[13733-13857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13871-13902]:Block[13871-13902]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[13881-13894]:ReturnStatement[13881-13894]"
    }, {
      "left" : "return super.defineProperty(name, type, inferred, inExterns);",
      "right" : "return super.defineProperty(name, type, inferred, inExterns);",
      "info" : "ReturnStatement[13913-13974]:ReturnStatement[13913-13974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14049-14145]:Block[14049-14145]"
    }, {
      "left" : "return \"prototype\".equals(property) ||\n        super.isPropertyTypeInferred(property);",
      "right" : "return \"prototype\".equals(property) ||\n        super.isPropertyTypeInferred(property);",
      "info" : "ReturnStatement[14055-14141]:ReturnStatement[14055-14141]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14206-14251]:Block[14206-14251]"
    }, {
      "left" : "return supAndInfHelper(that, true);",
      "right" : "return supAndInfHelper(that, true);",
      "info" : "ReturnStatement[14212-14247]:ReturnStatement[14212-14247]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14313-14359]:Block[14313-14359]"
    }, {
      "left" : "return supAndInfHelper(that, false);",
      "right" : "return supAndInfHelper(that, false);",
      "info" : "ReturnStatement[14319-14355]:ReturnStatement[14319-14355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14427-16702]:Block[14427-16702]"
    }, {
      "left" : "if (isFunctionType() && that.isFunctionType())",
      "right" : "if (isFunctionType() && that.isFunctionType())",
      "info" : "IfStatement[15204-16593]:IfStatement[15204-16593]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15251-16593]:Block[15251-16593]"
    }, {
      "left" : "if (isEquivalentTo(that))",
      "right" : "if (isEquivalentTo(that))",
      "info" : "IfStatement[15259-15315]:IfStatement[15259-15315]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15285-15315]:Block[15285-15315]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[15295-15307]:ReturnStatement[15295-15307]"
    }, {
      "left" : "if (isOrdinaryFunction() && that.isOrdinaryFunction() &&\n          that instanceof FunctionType)",
      "right" : "if (isOrdinaryFunction() && that.isOrdinaryFunction() &&\n          that instanceof FunctionType)",
      "info" : "IfStatement[15513-16123]:IfStatement[15513-16123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15610-16123]:Block[15610-16123]"
    }, {
      "left" : "FunctionType other = (FunctionType) that;",
      "right" : "FunctionType other = (FunctionType) that;",
      "info" : "VariableDeclarationStatement[15620-15661]:VariableDeclarationStatement[15620-15661]"
    }, {
      "left" : "if (call.hasEqualParameters(other.call) &&\n            isEquivalent(typeOfThis, other.typeOfThis))",
      "right" : "if (call.hasEqualParameters(other.call) &&\n            isEquivalent(typeOfThis, other.typeOfThis))",
      "info" : "IfStatement[15670-16115]:IfStatement[15670-16115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15769-16115]:Block[15769-16115]"
    }, {
      "left" : "JSType newReturnType = leastSuper ?\n              call.returnType.getLeastSupertype(other.call.returnType) :\n              call.returnType.getGreatestSubtype(other.call.returnType);",
      "right" : "JSType newReturnType = leastSuper ?\n              call.returnType.getLeastSupertype(other.call.returnType) :\n              call.returnType.getGreatestSubtype(other.call.returnType);",
      "info" : "VariableDeclarationStatement[15781-15962]:VariableDeclarationStatement[15781-15962]"
    }, {
      "left" : "return cloneWithNewReturnType(\n              newReturnType,\n              call.returnTypeInferred || other.call.returnTypeInferred);",
      "right" : "return cloneWithNewReturnType(\n              newReturnType,\n              call.returnTypeInferred || other.call.returnTypeInferred);",
      "info" : "ReturnStatement[15973-16105]:ReturnStatement[15973-16105]"
    }, {
      "left" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
      "right" : "JSType functionInstance = registry.getNativeType(\n          JSTypeNative.FUNCTION_INSTANCE_TYPE);",
      "info" : "VariableDeclarationStatement[16131-16228]:VariableDeclarationStatement[16131-16228]"
    }, {
      "left" : "if (functionInstance.isEquivalentTo(that))",
      "right" : "if (functionInstance.isEquivalentTo(that))",
      "info" : "IfStatement[16235-16427]:IfStatement[16235-16427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16278-16328]:Block[16278-16328]"
    }, {
      "left" : "return leastSuper ? that : this;",
      "right" : "return leastSuper ? that : this;",
      "info" : "ReturnStatement[16288-16320]:ReturnStatement[16288-16320]"
    }, {
      "left" : "if (functionInstance.isEquivalentTo(this))",
      "right" : "if (functionInstance.isEquivalentTo(this))",
      "info" : "IfStatement[16334-16427]:IfStatement[16334-16427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16377-16427]:Block[16377-16427]"
    }, {
      "left" : "return leastSuper ? this : that;",
      "right" : "return leastSuper ? this : that;",
      "info" : "ReturnStatement[16387-16419]:ReturnStatement[16387-16419]"
    }, {
      "left" : "return leastSuper ?\n          registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) :\n          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
      "right" : "return leastSuper ?\n          registry.getNativeType(JSTypeNative.U2U_CONSTRUCTOR_TYPE) :\n          registry.getNativeType(JSTypeNative.NO_OBJECT_TYPE);",
      "info" : "ReturnStatement[16435-16587]:ReturnStatement[16435-16587]"
    }, {
      "left" : "return leastSuper ?\n        super.getLeastSupertype(that) :\n        super.getGreatestSubtype(that);",
      "right" : "return leastSuper ?\n        super.getLeastSupertype(that) :\n        super.getGreatestSubtype(that);",
      "info" : "ReturnStatement[16599-16698]:ReturnStatement[16599-16698]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16782-16975]:Block[16782-16977]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17153-17423]:Block[17155-17425]"
    }, {
      "left" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "right" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[17159-17221]:ExpressionStatement[17161-17223]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType = getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[17226-17300]:VariableDeclarationStatement[17228-17302]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[17305-17367]:IfStatement[17307-17369]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17341-17367]:Block[17343-17369]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[17349-17361]:ReturnStatement[17351-17363]"
    }, {
      "left" : "return maybeSuperInstanceType.getConstructor();",
      "right" : "return maybeSuperInstanceType.getConstructor();",
      "info" : "ReturnStatement[17372-17419]:ReturnStatement[17374-17421]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17598-18354]:Block[17600-18356]"
    }, {
      "left" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "right" : "Preconditions.checkArgument(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[17604-17666]:ExpressionStatement[17606-17668]"
    }, {
      "left" : "Preconditions.checkArgument(!this.isUnknownType());",
      "right" : "Preconditions.checkArgument(!this.isUnknownType());",
      "info" : "ExpressionStatement[17671-17722]:ExpressionStatement[17673-17724]"
    }, {
      "left" : "FunctionType ctor = this;",
      "right" : "FunctionType ctor = this;",
      "info" : "VariableDeclarationStatement[17863-17888]:VariableDeclarationStatement[17865-17890]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[17893-18350]:WhileStatement[17895-18352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17906-18350]:Block[17908-18352]"
    }, {
      "left" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "right" : "ObjectType maybeSuperInstanceType =\n          ctor.getPrototype().getImplicitPrototype();",
      "info" : "VariableDeclarationStatement[17914-18003]:VariableDeclarationStatement[17916-18005]"
    }, {
      "left" : "if (maybeSuperInstanceType == null)",
      "right" : "if (maybeSuperInstanceType == null)",
      "info" : "IfStatement[18010-18077]:IfStatement[18012-18079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18046-18077]:Block[18048-18079]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18056-18069]:ReturnStatement[18058-18071]"
    }, {
      "left" : "if (maybeSuperInstanceType.isUnknownType())",
      "right" : "if (maybeSuperInstanceType.isUnknownType())",
      "info" : "IfStatement[18084-18158]:IfStatement[18086-18160]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18128-18158]:Block[18130-18160]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18138-18150]:ReturnStatement[18140-18152]"
    }, {
      "left" : "ctor = maybeSuperInstanceType.getConstructor();",
      "right" : "ctor = maybeSuperInstanceType.getConstructor();",
      "info" : "ExpressionStatement[18165-18212]:ExpressionStatement[18167-18214]"
    }, {
      "left" : "if (ctor == null)",
      "right" : "if (ctor == null)",
      "info" : "IfStatement[18219-18268]:IfStatement[18221-18270]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18237-18268]:Block[18239-18270]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[18247-18260]:ReturnStatement[18249-18262]"
    }, {
      "left" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "right" : "Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());",
      "info" : "ExpressionStatement[18275-18344]:ExpressionStatement[18277-18346]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18590-19000]:Block[18592-19002]"
    }, {
      "left" : "Preconditions.checkState(isConstructor() || isInterface());",
      "right" : "Preconditions.checkState(isConstructor() || isInterface());",
      "info" : "ExpressionStatement[18596-18655]:ExpressionStatement[18598-18657]"
    }, {
      "left" : "Preconditions.checkArgument(getPrototype().hasProperty(propertyName));",
      "right" : "Preconditions.checkArgument(getPrototype().hasProperty(propertyName));",
      "info" : "ExpressionStatement[18660-18730]:ExpressionStatement[18662-18732]"
    }, {
      "left" : "FunctionType ctor = this;",
      "right" : "FunctionType ctor = this;",
      "info" : "VariableDeclarationStatement[18735-18760]:VariableDeclarationStatement[18737-18762]"
    }, {
      "left" : "JSType topInstanceType;",
      "right" : "JSType topInstanceType;",
      "info" : "VariableDeclarationStatement[18765-18788]:VariableDeclarationStatement[18767-18790]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[18793-18968]:DoStatement[18795-18970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18796-18897]:Block[18798-18899]"
    }, {
      "left" : "topInstanceType = ctor.getInstanceType();",
      "right" : "topInstanceType = ctor.getInstanceType();",
      "info" : "ExpressionStatement[18804-18845]:ExpressionStatement[18806-18847]"
    }, {
      "left" : "ctor = ctor.getSuperClassConstructor();",
      "right" : "ctor = ctor.getSuperClassConstructor();",
      "info" : "ExpressionStatement[18852-18891]:ExpressionStatement[18854-18893]"
    }, {
      "left" : "return topInstanceType;",
      "right" : "return topInstanceType;",
      "info" : "ReturnStatement[18973-18996]:ReturnStatement[18975-18998]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19223-19872]:Block[19225-19874]"
    }, {
      "left" : "if (!(otherType instanceof FunctionType))",
      "right" : "if (!(otherType instanceof FunctionType))",
      "info" : "IfStatement[19229-19298]:IfStatement[19231-19300]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19271-19298]:Block[19273-19300]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19279-19292]:ReturnStatement[19281-19294]"
    }, {
      "left" : "FunctionType that = (FunctionType) otherType;",
      "right" : "FunctionType that = (FunctionType) otherType;",
      "info" : "VariableDeclarationStatement[19303-19348]:VariableDeclarationStatement[19305-19350]"
    }, {
      "left" : "if (!that.isFunctionType())",
      "right" : "if (!that.isFunctionType())",
      "info" : "IfStatement[19353-19408]:IfStatement[19355-19410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19381-19408]:Block[19383-19410]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19389-19402]:ReturnStatement[19391-19404]"
    }, {
      "left" : "if (this.isConstructor())",
      "right" : "if (this.isConstructor())",
      "info" : "IfStatement[19413-19537]:IfStatement[19415-19539]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19439-19537]:Block[19441-19539]"
    }, {
      "left" : "if (that.isConstructor())",
      "right" : "if (that.isConstructor())",
      "info" : "IfStatement[19447-19511]:IfStatement[19449-19513]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19473-19511]:Block[19475-19513]"
    }, {
      "left" : "return this == that;",
      "right" : "return this == that;",
      "info" : "ReturnStatement[19483-19503]:ReturnStatement[19485-19505]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19518-19531]:ReturnStatement[19520-19533]"
    }, {
      "left" : "if (this.isInterface())",
      "right" : "if (this.isInterface())",
      "info" : "IfStatement[19542-19705]:IfStatement[19544-19707]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19566-19705]:Block[19568-19707]"
    }, {
      "left" : "if (that.isInterface())",
      "right" : "if (that.isInterface())",
      "info" : "IfStatement[19574-19679]:IfStatement[19576-19681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19598-19679]:Block[19600-19681]"
    }, {
      "left" : "return this.getReferenceName().equals(that.getReferenceName());",
      "right" : "return this.getReferenceName().equals(that.getReferenceName());",
      "info" : "ReturnStatement[19608-19671]:ReturnStatement[19610-19673]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19686-19699]:ReturnStatement[19688-19701]"
    }, {
      "left" : "if (that.isInterface())",
      "right" : "if (that.isInterface())",
      "info" : "IfStatement[19710-19761]:IfStatement[19712-19763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19734-19761]:Block[19736-19763]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[19742-19755]:ReturnStatement[19744-19757]"
    }, {
      "left" : "return this.typeOfThis.isEquivalentTo(that.typeOfThis) &&\n        this.call.isEquivalentTo(that.call);",
      "right" : "return this.typeOfThis.isEquivalentTo(that.typeOfThis) &&\n        this.call.isEquivalentTo(that.call);",
      "info" : "ReturnStatement[19766-19868]:ReturnStatement[19768-19870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19910-19991]:Block[19912-19993]"
    }, {
      "left" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
      "right" : "return isInterface() ? getReferenceName().hashCode() : call.hashCode();",
      "info" : "ReturnStatement[19916-19987]:ReturnStatement[19918-19989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20051-20109]:Block[20053-20111]"
    }, {
      "left" : "return this.call.isEquivalentTo(otherType.call);",
      "right" : "return this.call.isEquivalentTo(otherType.call);",
      "info" : "ReturnStatement[20057-20105]:ReturnStatement[20059-20107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20422-21442]:Block[20424-21444]"
    }, {
      "left" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "right" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "info" : "IfStatement[20428-20533]:IfStatement[20430-20535]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20501-20533]:Block[20503-20535]"
    }, {
      "left" : "return \"Function\";",
      "right" : "return \"Function\";",
      "info" : "ReturnStatement[20509-20527]:ReturnStatement[20511-20529]"
    }, {
      "left" : "StringBuilder b = new StringBuilder(32);",
      "right" : "StringBuilder b = new StringBuilder(32);",
      "info" : "VariableDeclarationStatement[20539-20579]:VariableDeclarationStatement[20541-20581]"
    }, {
      "left" : "b.append(\"function (\");",
      "right" : "b.append(\"function (\");",
      "info" : "ExpressionStatement[20584-20607]:ExpressionStatement[20586-20609]"
    }, {
      "left" : "int paramNum = call.parameters.getChildCount();",
      "right" : "int paramNum = call.parameters.getChildCount();",
      "info" : "VariableDeclarationStatement[20612-20659]:VariableDeclarationStatement[20614-20661]"
    }, {
      "left" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "right" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "info" : "VariableDeclarationStatement[20664-20721]:VariableDeclarationStatement[20666-20723]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[20726-20821]:IfStatement[20728-20823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20750-20821]:Block[20752-20823]"
    }, {
      "left" : "b.append(\"this:\");",
      "right" : "b.append(\"this:\");",
      "info" : "ExpressionStatement[20758-20776]:ExpressionStatement[20760-20778]"
    }, {
      "left" : "b.append(typeOfThis.toString());",
      "right" : "b.append(typeOfThis.toString());",
      "info" : "ExpressionStatement[20783-20815]:ExpressionStatement[20785-20817]"
    }, {
      "left" : "if (paramNum > 0)",
      "right" : "if (paramNum > 0)",
      "info" : "IfStatement[20826-21361]:IfStatement[20828-21363]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20844-21361]:Block[20846-21363]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[20852-20909]:IfStatement[20854-20911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20876-20909]:Block[20878-20911]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[20886-20901]:ExpressionStatement[20888-20903]"
    }, {
      "left" : "Node p = call.parameters.getFirstChild();",
      "right" : "Node p = call.parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[20916-20957]:VariableDeclarationStatement[20918-20959]"
    }, {
      "left" : "if (p.isVarArgs())",
      "right" : "if (p.isVarArgs())",
      "info" : "IfStatement[20964-21098]:IfStatement[20966-21100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20983-21039]:Block[20985-21041]"
    }, {
      "left" : "appendVarArgsString(b, p.getJSType());",
      "right" : "appendVarArgsString(b, p.getJSType());",
      "info" : "ExpressionStatement[20993-21031]:ExpressionStatement[20995-21033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21045-21098]:Block[21047-21100]"
    }, {
      "left" : "b.append(p.getJSType().toString());",
      "right" : "b.append(p.getJSType().toString());",
      "info" : "ExpressionStatement[21055-21090]:ExpressionStatement[21057-21092]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[21105-21121]:ExpressionStatement[21107-21123]"
    }, {
      "left" : "while (p != null)",
      "right" : "while (p != null)",
      "info" : "WhileStatement[21128-21355]:WhileStatement[21130-21357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21146-21355]:Block[21148-21357]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[21156-21171]:ExpressionStatement[21158-21173]"
    }, {
      "left" : "if (p.isVarArgs())",
      "right" : "if (p.isVarArgs())",
      "info" : "IfStatement[21180-21322]:IfStatement[21182-21324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21199-21259]:Block[21201-21261]"
    }, {
      "left" : "appendVarArgsString(b, p.getJSType());",
      "right" : "appendVarArgsString(b, p.getJSType());",
      "info" : "ExpressionStatement[21211-21249]:ExpressionStatement[21213-21251]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21265-21322]:Block[21267-21324]"
    }, {
      "left" : "b.append(p.getJSType().toString());",
      "right" : "b.append(p.getJSType().toString());",
      "info" : "ExpressionStatement[21277-21312]:ExpressionStatement[21279-21314]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[21331-21347]:ExpressionStatement[21333-21349]"
    }, {
      "left" : "b.append(\"): \");",
      "right" : "b.append(\"): \");",
      "info" : "ExpressionStatement[21366-21382]:ExpressionStatement[21368-21384]"
    }, {
      "left" : "b.append(call.returnType);",
      "right" : "b.append(call.returnType);",
      "info" : "ExpressionStatement[21387-21413]:ExpressionStatement[21389-21415]"
    }, {
      "left" : "return b.toString();",
      "right" : "return b.toString();",
      "info" : "ReturnStatement[21418-21438]:ReturnStatement[21420-21440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21581-21868]:Block[21583-21870]"
    }, {
      "left" : "if (paramType.isUnionType())",
      "right" : "if (paramType.isUnionType())",
      "info" : "IfStatement[21587-21795]:IfStatement[21589-21797]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21616-21795]:Block[21618-21797]"
    }, {
      "left" : "paramType = ((UnionType) paramType).getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
      "right" : "paramType = ((UnionType) paramType).getRestrictedUnion(\n          registry.getNativeType(JSTypeNative.VOID_TYPE));",
      "info" : "ExpressionStatement[21675-21789]:ExpressionStatement[21677-21791]"
    }, {
      "left" : "builder.append(\"...[\").append(paramType.toString()).append(\"]\");",
      "right" : "builder.append(\"...[\").append(paramType.toString()).append(\"]\");",
      "info" : "ExpressionStatement[21800-21864]:ExpressionStatement[21802-21866]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22114-23518]:Block[22116-23520]"
    }, {
      "left" : "if (this.isEquivalentTo(that))",
      "right" : "if (this.isEquivalentTo(that))",
      "info" : "IfStatement[22120-22177]:IfStatement[22122-22179]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22151-22177]:Block[22153-22179]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22159-22171]:ReturnStatement[22161-22173]"
    }, {
      "left" : "if (that.isFunctionType())",
      "right" : "if (that.isFunctionType())",
      "info" : "IfStatement[22182-23226]:IfStatement[22184-23228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22209-23226]:Block[22211-23228]"
    }, {
      "left" : "if (((FunctionType) that).isInterface())",
      "right" : "if (((FunctionType) that).isInterface())",
      "info" : "IfStatement[22217-22354]:IfStatement[22219-22356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22258-22354]:Block[22260-22356]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22334-22346]:ReturnStatement[22336-22348]"
    }, {
      "left" : "if (this.isInterface())",
      "right" : "if (this.isInterface())",
      "info" : "IfStatement[22361-22481]:IfStatement[22363-22483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22385-22481]:Block[22387-22483]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22460-22473]:ReturnStatement[22462-22475]"
    }, {
      "left" : "FunctionType other = (FunctionType) that;",
      "right" : "FunctionType other = (FunctionType) that;",
      "info" : "VariableDeclarationStatement[22950-22991]:VariableDeclarationStatement[22952-22993]"
    }, {
      "left" : "return (this.isConstructor() || other.isConstructor() ||\n              other.typeOfThis.isSubtype(this.typeOfThis) ||\n              this.typeOfThis.isSubtype(other.typeOfThis)) &&\n          this.call.isSubtype(other.call);",
      "right" : "return (this.isConstructor() || other.isConstructor() ||\n              other.typeOfThis.isSubtype(this.typeOfThis) ||\n              this.typeOfThis.isSubtype(other.typeOfThis)) &&\n          this.call.isSubtype(other.call);",
      "info" : "ReturnStatement[22998-23220]:ReturnStatement[23000-23222]"
    }, {
      "left" : "if (that instanceof UnionType)",
      "right" : "if (that instanceof UnionType)",
      "info" : "IfStatement[23231-23439]:IfStatement[23233-23441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23262-23439]:Block[23264-23441]"
    }, {
      "left" : "UnionType union = (UnionType) that;",
      "right" : "UnionType union = (UnionType) that;",
      "info" : "VariableDeclarationStatement[23270-23305]:VariableDeclarationStatement[23272-23307]"
    }, {
      "left" : "for (JSType element : union.alternates)",
      "right" : "for (JSType element : union.alternates)",
      "info" : "EnhancedForStatement[23312-23433]:EnhancedForStatement[23314-23435]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23352-23433]:Block[23354-23435]"
    }, {
      "left" : "if (this.isSubtype(element))",
      "right" : "if (this.isSubtype(element))",
      "info" : "IfStatement[23362-23425]:IfStatement[23364-23427]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23391-23425]:Block[23393-23427]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23403-23415]:ReturnStatement[23405-23417]"
    }, {
      "left" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
      "right" : "return getNativeType(JSTypeNative.FUNCTION_PROTOTYPE).isSubtype(that);",
      "info" : "ReturnStatement[23444-23514]:ReturnStatement[23446-23516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23573-23621]:Block[23575-23623]"
    }, {
      "left" : "return visitor.caseFunctionType(this);",
      "right" : "return visitor.caseFunctionType(this);",
      "info" : "ReturnStatement[23579-23617]:ReturnStatement[23581-23619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23840-23917]:Block[23842-23919]"
    }, {
      "left" : "Preconditions.checkState(hasInstanceType());",
      "right" : "Preconditions.checkState(hasInstanceType());",
      "info" : "ExpressionStatement[23846-23890]:ExpressionStatement[23848-23892]"
    }, {
      "left" : "return typeOfThis;",
      "right" : "return typeOfThis;",
      "info" : "ReturnStatement[23895-23913]:ReturnStatement[23897-23915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24051-24087]:Block[24053-24089]"
    }, {
      "left" : "typeOfThis = instanceType;",
      "right" : "typeOfThis = instanceType;",
      "info" : "ExpressionStatement[24057-24083]:ExpressionStatement[24059-24085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24198-24248]:Block[24200-24250]"
    }, {
      "left" : "return isConstructor() || isInterface();",
      "right" : "return isConstructor() || isInterface();",
      "info" : "ReturnStatement[24204-24244]:ReturnStatement[24206-24246]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24351-24474]:Block[24353-24476]"
    }, {
      "left" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;",
      "right" : "return typeOfThis.isNoObjectType() ?\n        registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE) : typeOfThis;",
      "info" : "ReturnStatement[24357-24470]:ReturnStatement[24359-24472]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24580-24604]:Block[24582-24606]"
    }, {
      "left" : "return source;",
      "right" : "return source;",
      "info" : "ReturnStatement[24586-24600]:ReturnStatement[24588-24602]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24682-24713]:Block[24684-24715]"
    }, {
      "left" : "this.source = source;",
      "right" : "this.source = source;",
      "info" : "ExpressionStatement[24688-24709]:ExpressionStatement[24690-24711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24823-24928]:Block[24825-24930]"
    }, {
      "left" : "if (subTypes == null)",
      "right" : "if (subTypes == null)",
      "info" : "IfStatement[24829-24897]:IfStatement[24831-24899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24851-24897]:Block[24853-24899]"
    }, {
      "left" : "subTypes = Lists.newArrayList();",
      "right" : "subTypes = Lists.newArrayList();",
      "info" : "ExpressionStatement[24859-24891]:ExpressionStatement[24861-24893]"
    }, {
      "left" : "subTypes.add(subType);",
      "right" : "subTypes.add(subType);",
      "info" : "ExpressionStatement[24902-24924]:ExpressionStatement[24904-24926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25173-25199]:Block[25175-25201]"
    }, {
      "left" : "return subTypes;",
      "right" : "return subTypes;",
      "info" : "ReturnStatement[25179-25195]:ReturnStatement[25181-25197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25248-25310]:Block[25250-25312]"
    }, {
      "left" : "return prototype != null || super.hasCachedValues();",
      "right" : "return prototype != null || super.hasCachedValues();",
      "info" : "ReturnStatement[25254-25306]:ReturnStatement[25256-25308]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25396-25430]:Block[25398-25432]"
    }, {
      "left" : "return templateTypeName;",
      "right" : "return templateTypeName;",
      "info" : "ReturnStatement[25402-25426]:ReturnStatement[25404-25428]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25513-26381]:Block[25515-26383]"
    }, {
      "left" : "setResolvedTypeInternal(this);",
      "right" : "setResolvedTypeInternal(this);",
      "info" : "ExpressionStatement[25519-25549]:ExpressionStatement[25521-25551]"
    }, {
      "left" : "call = (ArrowType) safeResolve(call, t, scope);",
      "right" : "call = (ArrowType) safeResolve(call, t, scope);",
      "info" : "ExpressionStatement[25555-25602]:ExpressionStatement[25557-25604]"
    }, {
      "left" : "prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);",
      "right" : "prototype = (FunctionPrototypeType) safeResolve(prototype, t, scope);",
      "info" : "ExpressionStatement[25607-25676]:ExpressionStatement[25609-25678]"
    }, {
      "left" : "typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);",
      "right" : "typeOfThis = (ObjectType) safeResolve(typeOfThis, t, scope);",
      "info" : "ExpressionStatement[25681-25741]:ExpressionStatement[25683-25743]"
    }, {
      "left" : "boolean changed = false;",
      "right" : "boolean changed = false;",
      "info" : "VariableDeclarationStatement[25747-25771]:VariableDeclarationStatement[25749-25773]"
    }, {
      "left" : "ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();",
      "right" : "ImmutableList.Builder<ObjectType> resolvedInterfaces =\n        ImmutableList.builder();",
      "info" : "VariableDeclarationStatement[25776-25863]:VariableDeclarationStatement[25778-25865]"
    }, {
      "left" : "for (ObjectType iface : implementedInterfaces)",
      "right" : "for (ObjectType iface : implementedInterfaces)",
      "info" : "EnhancedForStatement[25868-26081]:EnhancedForStatement[25870-26083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25915-26081]:Block[25917-26083]"
    }, {
      "left" : "ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);",
      "right" : "ObjectType resolvedIface = (ObjectType) iface.resolve(t, scope);",
      "info" : "VariableDeclarationStatement[25923-25987]:VariableDeclarationStatement[25925-25989]"
    }, {
      "left" : "resolvedInterfaces.add(resolvedIface);",
      "right" : "resolvedInterfaces.add(resolvedIface);",
      "info" : "ExpressionStatement[25994-26032]:ExpressionStatement[25996-26034]"
    }, {
      "left" : "changed |= (resolvedIface != iface);",
      "right" : "changed |= (resolvedIface != iface);",
      "info" : "ExpressionStatement[26039-26075]:ExpressionStatement[26041-26077]"
    }, {
      "left" : "if (changed)",
      "right" : "if (changed)",
      "info" : "IfStatement[26086-26164]:IfStatement[26088-26166]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26099-26164]:Block[26101-26166]"
    }, {
      "left" : "implementedInterfaces = resolvedInterfaces.build();",
      "right" : "implementedInterfaces = resolvedInterfaces.build();",
      "info" : "ExpressionStatement[26107-26158]:ExpressionStatement[26109-26160]"
    }, {
      "left" : "if (subTypes != null)",
      "right" : "if (subTypes != null)",
      "info" : "IfStatement[26170-26332]:IfStatement[26172-26334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26192-26332]:Block[26194-26334]"
    }, {
      "left" : "for (int i = 0; i < subTypes.size(); i++)",
      "right" : "for (int i = 0; i < subTypes.size(); i++)",
      "info" : "ForStatement[26200-26326]:ForStatement[26202-26328]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26242-26326]:Block[26244-26328]"
    }, {
      "left" : "subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));",
      "right" : "subTypes.set(i, (FunctionType) subTypes.get(i).resolve(t, scope));",
      "info" : "ExpressionStatement[26252-26318]:ExpressionStatement[26254-26320]"
    }, {
      "left" : "return super.resolveInternal(t, scope);",
      "right" : "return super.resolveInternal(t, scope);",
      "info" : "ReturnStatement[26338-26377]:ReturnStatement[26340-26379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26435-27357]:Block[26437-27359]"
    }, {
      "left" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "right" : "if (this == registry.getNativeType(JSTypeNative.FUNCTION_INSTANCE_TYPE))",
      "info" : "IfStatement[26441-26565]:IfStatement[26443-26567]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26514-26565]:Block[26516-26567]"
    }, {
      "left" : "return super.toDebugHashCodeString();",
      "right" : "return super.toDebugHashCodeString();",
      "info" : "ReturnStatement[26522-26559]:ReturnStatement[26524-26561]"
    }, {
      "left" : "StringBuilder b = new StringBuilder(32);",
      "right" : "StringBuilder b = new StringBuilder(32);",
      "info" : "VariableDeclarationStatement[26571-26611]:VariableDeclarationStatement[26573-26613]"
    }, {
      "left" : "b.append(\"function (\");",
      "right" : "b.append(\"function (\");",
      "info" : "ExpressionStatement[26616-26639]:ExpressionStatement[26618-26641]"
    }, {
      "left" : "int paramNum = call.parameters.getChildCount();",
      "right" : "int paramNum = call.parameters.getChildCount();",
      "info" : "VariableDeclarationStatement[26644-26691]:VariableDeclarationStatement[26646-26693]"
    }, {
      "left" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "right" : "boolean hasKnownTypeOfThis = !typeOfThis.isUnknownType();",
      "info" : "VariableDeclarationStatement[26696-26753]:VariableDeclarationStatement[26698-26755]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[26758-26868]:IfStatement[26760-26870]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26782-26868]:Block[26784-26870]"
    }, {
      "left" : "b.append(\"this:\");",
      "right" : "b.append(\"this:\");",
      "info" : "ExpressionStatement[26790-26808]:ExpressionStatement[26792-26810]"
    }, {
      "left" : "b.append(getDebugHashCodeStringOf(typeOfThis));",
      "right" : "b.append(getDebugHashCodeStringOf(typeOfThis));",
      "info" : "ExpressionStatement[26815-26862]:ExpressionStatement[26817-26864]"
    }, {
      "left" : "if (paramNum > 0)",
      "right" : "if (paramNum > 0)",
      "info" : "IfStatement[26873-27232]:IfStatement[26875-27234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26891-27232]:Block[26893-27234]"
    }, {
      "left" : "if (hasKnownTypeOfThis)",
      "right" : "if (hasKnownTypeOfThis)",
      "info" : "IfStatement[26899-26956]:IfStatement[26901-26958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26923-26956]:Block[26925-26958]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[26933-26948]:ExpressionStatement[26935-26950]"
    }, {
      "left" : "Node p = call.parameters.getFirstChild();",
      "right" : "Node p = call.parameters.getFirstChild();",
      "info" : "VariableDeclarationStatement[26963-27004]:VariableDeclarationStatement[26965-27006]"
    }, {
      "left" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
      "right" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
      "info" : "ExpressionStatement[27011-27061]:ExpressionStatement[27013-27063]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[27068-27084]:ExpressionStatement[27070-27086]"
    }, {
      "left" : "while (p != null)",
      "right" : "while (p != null)",
      "info" : "WhileStatement[27091-27226]:WhileStatement[27093-27228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27109-27226]:Block[27111-27228]"
    }, {
      "left" : "b.append(\", \");",
      "right" : "b.append(\", \");",
      "info" : "ExpressionStatement[27119-27134]:ExpressionStatement[27121-27136]"
    }, {
      "left" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
      "right" : "b.append(getDebugHashCodeStringOf(p.getJSType()));",
      "info" : "ExpressionStatement[27143-27193]:ExpressionStatement[27145-27195]"
    }, {
      "left" : "p = p.getNext();",
      "right" : "p = p.getNext();",
      "info" : "ExpressionStatement[27202-27218]:ExpressionStatement[27204-27220]"
    }, {
      "left" : "b.append(\")\");",
      "right" : "b.append(\")\");",
      "info" : "ExpressionStatement[27237-27251]:ExpressionStatement[27239-27253]"
    }, {
      "left" : "b.append(\": \");",
      "right" : "b.append(\": \");",
      "info" : "ExpressionStatement[27256-27271]:ExpressionStatement[27258-27273]"
    }, {
      "left" : "b.append(getDebugHashCodeStringOf(call.returnType));",
      "right" : "b.append(getDebugHashCodeStringOf(call.returnType));",
      "info" : "ExpressionStatement[27276-27328]:ExpressionStatement[27278-27330]"
    }, {
      "left" : "return b.toString();",
      "right" : "return b.toString();",
      "info" : "ReturnStatement[27333-27353]:ReturnStatement[27335-27355]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27414-27524]:Block[27416-27526]"
    }, {
      "left" : "if (type == this)",
      "right" : "if (type == this)",
      "info" : "IfStatement[27420-27520]:IfStatement[27422-27522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27438-27464]:Block[27440-27466]"
    }, {
      "left" : "return \"me\";",
      "right" : "return \"me\";",
      "info" : "ReturnStatement[27446-27458]:ReturnStatement[27448-27460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27470-27520]:Block[27472-27522]"
    }, {
      "left" : "return type.toDebugHashCodeString();",
      "right" : "return type.toDebugHashCodeString();",
      "info" : "ReturnStatement[27478-27514]:ReturnStatement[27480-27516]"
    } ]
  },
  "interFileMappings" : { }
}