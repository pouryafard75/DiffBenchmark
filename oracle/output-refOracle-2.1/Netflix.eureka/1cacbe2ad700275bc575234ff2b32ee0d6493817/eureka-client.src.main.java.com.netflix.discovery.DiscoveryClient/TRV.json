{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private static final Logger logger = LoggerFactory.getLogger(DiscoveryClient.class);",
      "right" : "private static final Logger logger = LoggerFactory.getLogger(DiscoveryClient.class);",
      "info" : "FieldDeclaration[4108-4192]:FieldDeclaration[4108-4192]"
    }, {
      "left" : "private static final DynamicPropertyFactory configInstance = DynamicPropertyFactory.getInstance();",
      "right" : "private static final DynamicPropertyFactory configInstance = DynamicPropertyFactory.getInstance();",
      "info" : "FieldDeclaration[4197-4295]:FieldDeclaration[4197-4295]"
    }, {
      "left" : "public static final int MAX_FOLLOWED_REDIRECTS = 10;",
      "right" : "public static final int MAX_FOLLOWED_REDIRECTS = 10;",
      "info" : "FieldDeclaration[4318-4370]:FieldDeclaration[4318-4370]"
    }, {
      "left" : "public static final String HTTP_X_DISCOVERY_ALLOW_REDIRECT = \"X-Discovery-AllowRedirect\";",
      "right" : "public static final String HTTP_X_DISCOVERY_ALLOW_REDIRECT = \"X-Discovery-AllowRedirect\";",
      "info" : "FieldDeclaration[4375-4464]:FieldDeclaration[4375-4464]"
    }, {
      "left" : "private static final String VALUE_DELIMITER = \",\";",
      "right" : "private static final String VALUE_DELIMITER = \",\";",
      "info" : "FieldDeclaration[4470-4520]:FieldDeclaration[4470-4520]"
    }, {
      "left" : "private static final String COMMA_STRING = VALUE_DELIMITER;",
      "right" : "private static final String COMMA_STRING = VALUE_DELIMITER;",
      "info" : "FieldDeclaration[4525-4584]:FieldDeclaration[4525-4584]"
    }, {
      "left" : "private static final String DISCOVERY_APPID = \"DISCOVERY\";",
      "right" : "private static final String DISCOVERY_APPID = \"DISCOVERY\";",
      "info" : "FieldDeclaration[4589-4647]:FieldDeclaration[4589-4647]"
    }, {
      "left" : "private static final String UNKNOWN = \"UNKNOWN\";",
      "right" : "private static final String UNKNOWN = \"UNKNOWN\";",
      "info" : "FieldDeclaration[4652-4700]:FieldDeclaration[4652-4700]"
    }, {
      "left" : "private static final Pattern REDIRECT_PATH_REGEX = Pattern.compile(\"(.*/v2/)apps(/.*)?$\");",
      "right" : "private static final Pattern REDIRECT_PATH_REGEX = Pattern.compile(\"(.*/v2/)apps(/.*)?$\");",
      "info" : "FieldDeclaration[4706-4796]:FieldDeclaration[4706-4796]"
    }, {
      "left" : "private static final String PREFIX = \"DiscoveryClient_\";",
      "right" : "private static final String PREFIX = \"DiscoveryClient_\";",
      "info" : "FieldDeclaration[4816-4872]:FieldDeclaration[4816-4872]"
    }, {
      "left" : "private final com.netflix.servo.monitor.Timer GET_SERVICE_URLS_DNS_TIMER = Monitors\n            .newTimer(PREFIX + \"GetServiceUrlsFromDNS\");",
      "right" : "private final com.netflix.servo.monitor.Timer GET_SERVICE_URLS_DNS_TIMER = Monitors\n            .newTimer(PREFIX + \"GetServiceUrlsFromDNS\");",
      "info" : "FieldDeclaration[4877-5017]:FieldDeclaration[4877-5017]"
    }, {
      "left" : "private final com.netflix.servo.monitor.Timer REGISTER_TIMER = Monitors\n            .newTimer(PREFIX + \"Register\");",
      "right" : "private final com.netflix.servo.monitor.Timer REGISTER_TIMER = Monitors\n            .newTimer(PREFIX + \"Register\");",
      "info" : "FieldDeclaration[5022-5137]:FieldDeclaration[5022-5137]"
    }, {
      "left" : "private final com.netflix.servo.monitor.Timer REFRESH_TIMER = Monitors\n            .newTimer(PREFIX + \"Refresh\");",
      "right" : "private final com.netflix.servo.monitor.Timer REFRESH_TIMER = Monitors\n            .newTimer(PREFIX + \"Refresh\");",
      "info" : "FieldDeclaration[5142-5255]:FieldDeclaration[5142-5255]"
    }, {
      "left" : "private final com.netflix.servo.monitor.Timer REFRESH_DELTA_TIMER = Monitors\n            .newTimer(PREFIX + \"RefreshDelta\");",
      "right" : "private final com.netflix.servo.monitor.Timer REFRESH_DELTA_TIMER = Monitors\n            .newTimer(PREFIX + \"RefreshDelta\");",
      "info" : "FieldDeclaration[5260-5384]:FieldDeclaration[5260-5384]"
    }, {
      "left" : "private final com.netflix.servo.monitor.Timer RENEW_TIMER = Monitors\n            .newTimer(PREFIX + \"Renew\");",
      "right" : "private final com.netflix.servo.monitor.Timer RENEW_TIMER = Monitors\n            .newTimer(PREFIX + \"Renew\");",
      "info" : "FieldDeclaration[5389-5498]:FieldDeclaration[5389-5498]"
    }, {
      "left" : "private final com.netflix.servo.monitor.Timer CANCEL_TIMER = Monitors\n            .newTimer(PREFIX + \"Cancel\");",
      "right" : "private final com.netflix.servo.monitor.Timer CANCEL_TIMER = Monitors\n            .newTimer(PREFIX + \"Cancel\");",
      "info" : "FieldDeclaration[5503-5614]:FieldDeclaration[5503-5614]"
    }, {
      "left" : "private final com.netflix.servo.monitor.Timer FETCH_REGISTRY_TIMER = Monitors\n            .newTimer(PREFIX + \"FetchRegistry\");",
      "right" : "private final com.netflix.servo.monitor.Timer FETCH_REGISTRY_TIMER = Monitors\n            .newTimer(PREFIX + \"FetchRegistry\");",
      "info" : "FieldDeclaration[5619-5745]:FieldDeclaration[5619-5745]"
    }, {
      "left" : "private final Counter SERVER_RETRY_COUNTER = Monitors.newCounter(PREFIX\n            + \"Retry\");",
      "right" : "private final Counter SERVER_RETRY_COUNTER = Monitors.newCounter(PREFIX\n            + \"Retry\");",
      "info" : "FieldDeclaration[5750-5845]:FieldDeclaration[5750-5845]"
    }, {
      "left" : "private final Counter ALL_SERVER_FAILURE_COUNT = Monitors.newCounter(PREFIX\n            + \"Failed\");",
      "right" : "private final Counter ALL_SERVER_FAILURE_COUNT = Monitors.newCounter(PREFIX\n            + \"Failed\");",
      "info" : "FieldDeclaration[5850-5950]:FieldDeclaration[5850-5950]"
    }, {
      "left" : "private final Counter REREGISTER_COUNTER = Monitors.newCounter(PREFIX\n            + \"Reregister\");",
      "right" : "private final Counter REREGISTER_COUNTER = Monitors.newCounter(PREFIX\n            + \"Reregister\");",
      "info" : "FieldDeclaration[5955-6053]:FieldDeclaration[5955-6053]"
    }, {
      "left" : "private final Provider<BackupRegistry> backupRegistryProvider;",
      "right" : "private final Provider<BackupRegistry> backupRegistryProvider;",
      "info" : "FieldDeclaration[6059-6121]:FieldDeclaration[6059-6121]"
    }, {
      "left" : "private volatile HealthCheckHandler healthCheckHandler;",
      "right" : "private volatile HealthCheckHandler healthCheckHandler;",
      "info" : "FieldDeclaration[6153-6208]:FieldDeclaration[6153-6208]"
    }, {
      "left" : "private final Provider<HealthCheckHandler> healthCheckHandlerProvider;",
      "right" : "private final Provider<HealthCheckHandler> healthCheckHandlerProvider;",
      "info" : "FieldDeclaration[6213-6283]:FieldDeclaration[6213-6283]"
    }, {
      "left" : "private final Provider<HealthCheckCallback> healthCheckCallbackProvider;",
      "right" : "private final Provider<HealthCheckCallback> healthCheckCallbackProvider;",
      "info" : "FieldDeclaration[6288-6360]:FieldDeclaration[6288-6360]"
    }, {
      "left" : "private final AtomicReference<List<String>> eurekaServiceUrls = new AtomicReference<List<String>>();",
      "right" : "private final AtomicReference<List<String>> eurekaServiceUrls = new AtomicReference<List<String>>();",
      "info" : "FieldDeclaration[6365-6465]:FieldDeclaration[6365-6465]"
    }, {
      "left" : "private final AtomicReference<Applications> localRegionApps = new AtomicReference<Applications>();",
      "right" : "private final AtomicReference<Applications> localRegionApps = new AtomicReference<Applications>();",
      "info" : "FieldDeclaration[6470-6568]:FieldDeclaration[6470-6568]"
    }, {
      "left" : "private volatile Map<String, Applications> remoteRegionVsApps = new ConcurrentHashMap<String, Applications>();",
      "right" : "private volatile Map<String, Applications> remoteRegionVsApps = new ConcurrentHashMap<String, Applications>();",
      "info" : "FieldDeclaration[6573-6683]:FieldDeclaration[6573-6683]"
    }, {
      "left" : "private final Lock fetchRegistryUpdateLock = new ReentrantLock();",
      "right" : "private final Lock fetchRegistryUpdateLock = new ReentrantLock();",
      "info" : "FieldDeclaration[6688-6753]:FieldDeclaration[6688-6753]"
    }, {
      "left" : "private final AtomicLong fetchRegistryGeneration;",
      "right" : "private final AtomicLong fetchRegistryGeneration;",
      "info" : "FieldDeclaration[6875-6924]:FieldDeclaration[6875-6924]"
    }, {
      "left" : "private final InstanceInfo instanceInfo;",
      "right" : "private final InstanceInfo instanceInfo;",
      "info" : "FieldDeclaration[6930-6970]:FieldDeclaration[6930-6970]"
    }, {
      "left" : "private String appPathIdentifier;",
      "right" : "private String appPathIdentifier;",
      "info" : "FieldDeclaration[6975-7008]:FieldDeclaration[6975-7008]"
    }, {
      "left" : "private boolean isRegisteredWithDiscovery = false;",
      "right" : "private boolean isRegisteredWithDiscovery = false;",
      "info" : "FieldDeclaration[7013-7063]:FieldDeclaration[7013-7063]"
    }, {
      "left" : "private JerseyClient discoveryJerseyClient;",
      "right" : "private JerseyClient discoveryJerseyClient;",
      "info" : "FieldDeclaration[7068-7111]:FieldDeclaration[7068-7111]"
    }, {
      "left" : "private AtomicReference<String> lastQueryRedirect = new AtomicReference<String>();",
      "right" : "private AtomicReference<String> lastQueryRedirect = new AtomicReference<String>();",
      "info" : "FieldDeclaration[7116-7198]:FieldDeclaration[7116-7198]"
    }, {
      "left" : "private AtomicReference<String> lastRegisterRedirect = new AtomicReference<String>();",
      "right" : "private AtomicReference<String> lastRegisterRedirect = new AtomicReference<String>();",
      "info" : "FieldDeclaration[7203-7288]:FieldDeclaration[7203-7288]"
    }, {
      "left" : "private ApacheHttpClient4 discoveryApacheClient;",
      "right" : "private ApacheHttpClient4 discoveryApacheClient;",
      "info" : "FieldDeclaration[7293-7341]:FieldDeclaration[7293-7341]"
    }, {
      "left" : "protected static EurekaClientConfig clientConfig;",
      "right" : "protected static EurekaClientConfig clientConfig;",
      "info" : "FieldDeclaration[7346-7395]:FieldDeclaration[7346-7395]"
    }, {
      "left" : "private final AtomicReference<String> remoteRegionsToFetch;",
      "right" : "private final AtomicReference<String> remoteRegionsToFetch;",
      "info" : "FieldDeclaration[7400-7459]:FieldDeclaration[7400-7459]"
    }, {
      "left" : "private final InstanceRegionChecker instanceRegionChecker;",
      "right" : "private final InstanceRegionChecker instanceRegionChecker;",
      "info" : "FieldDeclaration[7464-7522]:FieldDeclaration[7464-7522]"
    }, {
      "left" : "private volatile InstanceInfo.InstanceStatus lastRemoteInstanceStatus = InstanceInfo.InstanceStatus.UNKNOWN;",
      "right" : "private volatile InstanceInfo.InstanceStatus lastRemoteInstanceStatus = InstanceInfo.InstanceStatus.UNKNOWN;",
      "info" : "FieldDeclaration[7527-7635]:FieldDeclaration[7527-7635]"
    }, {
      "left" : "private ApplicationInfoManager.StatusChangeListener statusChangeListener;",
      "right" : "private ApplicationInfoManager.StatusChangeListener statusChangeListener;",
      "info" : "FieldDeclaration[7641-7714]:FieldDeclaration[7641-7714]"
    }, {
      "left" : "enum : Action",
      "right" : "enum : Action",
      "info" : "EnumDeclaration[7720-7803]:EnumDeclaration[7720-7803]"
    }, {
      "left" : "private final ScheduledExecutorService scheduler;",
      "right" : "private final ScheduledExecutorService scheduler;",
      "info" : "FieldDeclaration[7809-8004]:FieldDeclaration[7809-8004]"
    }, {
      "left" : "private InstanceInfoReplicator instanceInfoReplicator;",
      "right" : "private InstanceInfoReplicator instanceInfoReplicator;",
      "info" : "FieldDeclaration[8010-8064]:FieldDeclaration[8010-8064]"
    }, {
      "left" : "private final ThreadPoolExecutor heartbeatExecutor;",
      "right" : "private final ThreadPoolExecutor heartbeatExecutor;",
      "info" : "FieldDeclaration[8144-8195]:FieldDeclaration[8144-8195]"
    }, {
      "left" : "private final ThreadPoolExecutor cacheRefreshExecutor;",
      "right" : "private final ThreadPoolExecutor cacheRefreshExecutor;",
      "info" : "FieldDeclaration[8200-8254]:FieldDeclaration[8200-8254]"
    }, {
      "left" : "private final EventBus eventBus;",
      "right" : "private final EventBus eventBus;",
      "info" : "FieldDeclaration[8260-8292]:FieldDeclaration[8260-8292]"
    }, {
      "left" : "DiscoveryClientOptionalArgs",
      "right" : "DiscoveryClientOptionalArgs",
      "info" : "TypeDeclaration[8298-8637]:TypeDeclaration[8298-8637]"
    }, {
      "left" : "@Inject(optional = true)\n        private EventBus eventBus;",
      "right" : "@Inject(optional = true)\n        private EventBus eventBus;",
      "info" : "FieldDeclaration[8356-8415]:FieldDeclaration[8356-8415]"
    }, {
      "left" : "@Inject(optional = true)\n        private Provider<HealthCheckCallback> healthCheckCallbackProvider;",
      "right" : "@Inject(optional = true)\n        private Provider<HealthCheckCallback> healthCheckCallbackProvider;",
      "info" : "FieldDeclaration[8425-8524]:FieldDeclaration[8425-8524]"
    }, {
      "left" : "@Inject(optional = true)\n        private Provider<HealthCheckHandler> healthCheckHandlerProvider;",
      "right" : "@Inject(optional = true)\n        private Provider<HealthCheckHandler> healthCheckHandlerProvider;",
      "info" : "FieldDeclaration[8534-8631]:FieldDeclaration[8534-8631]"
    }, {
      "left" : "public DiscoveryClient(InstanceInfo myInfo, EurekaClientConfig config)",
      "right" : "public DiscoveryClient(InstanceInfo myInfo, EurekaClientConfig config)",
      "info" : "MethodDeclaration[8643-8757]:MethodDeclaration[8643-8757]"
    }, {
      "left" : "public DiscoveryClient(InstanceInfo myInfo, EurekaClientConfig config, DiscoveryClientOptionalArgs args)",
      "right" : "public DiscoveryClient(InstanceInfo myInfo, EurekaClientConfig config, DiscoveryClientOptionalArgs args)",
      "info" : "MethodDeclaration[8763-9917]:MethodDeclaration[8763-9917]"
    }, {
      "left" : "public BackupRegistry get()",
      "right" : "public BackupRegistry get()",
      "info" : "MethodDeclaration[8950-9899]:MethodDeclaration[8950-9899]"
    }, {
      "left" : "DiscoveryClient(InstanceInfo myInfo, EurekaClientConfig config, DiscoveryClientOptionalArgs args,\n                    Provider<BackupRegistry> backupRegistryProvider)",
      "right" : "DiscoveryClient(InstanceInfo myInfo, EurekaClientConfig config, DiscoveryClientOptionalArgs args,\n                    Provider<BackupRegistry> backupRegistryProvider)",
      "info" : "MethodDeclaration[9923-16359]:MethodDeclaration[9923-16359]"
    }, {
      "left" : "public Application getApplication(String appName)",
      "right" : "public Application getApplication(String appName)",
      "info" : "MethodDeclaration[16489-16629]:MethodDeclaration[16489-16629]"
    }, {
      "left" : "public Applications getApplications()",
      "right" : "public Applications getApplications()",
      "info" : "MethodDeclaration[16751-16848]:MethodDeclaration[16751-16848]"
    }, {
      "left" : "public Applications getApplicationsForARegion(@Nullable String region)",
      "right" : "public Applications getApplicationsForARegion(@Nullable String region)",
      "info" : "MethodDeclaration[16854-17125]:MethodDeclaration[16854-17125]"
    }, {
      "left" : "public Set<String> getAllKnownRegions()",
      "right" : "public Set<String> getAllKnownRegions()",
      "info" : "MethodDeclaration[17131-17570]:MethodDeclaration[17131-17570]"
    }, {
      "left" : "public List<InstanceInfo> getInstancesById(String id)",
      "right" : "public List<InstanceInfo> getInstancesById(String id)",
      "info" : "MethodDeclaration[17702-18161]:MethodDeclaration[17702-18161]"
    }, {
      "left" : "public void registerHealthCheckCallback(HealthCheckCallback callback)",
      "right" : "public void registerHealthCheckCallback(HealthCheckCallback callback)",
      "info" : "MethodDeclaration[18167-18912]:MethodDeclaration[18167-18912]"
    }, {
      "left" : "public void registerHealthCheck(HealthCheckHandler healthCheckHandler)",
      "right" : "public void registerHealthCheck(HealthCheckHandler healthCheckHandler)",
      "info" : "MethodDeclaration[18918-19261]:MethodDeclaration[18918-19261]"
    }, {
      "left" : "public List<InstanceInfo> getInstancesByVipAddress(String vipAddress, boolean secure)",
      "right" : "public List<InstanceInfo> getInstancesByVipAddress(String vipAddress, boolean secure)",
      "info" : "MethodDeclaration[19267-19826]:MethodDeclaration[19267-19826]"
    }, {
      "left" : "public List<InstanceInfo> getInstancesByVipAddress(String vipAddress, boolean secure,\n                                                       @Nullable String region)",
      "right" : "public List<InstanceInfo> getInstancesByVipAddress(String vipAddress, boolean secure,\n                                                       @Nullable String region)",
      "info" : "MethodDeclaration[19832-21423]:MethodDeclaration[19832-21423]"
    }, {
      "left" : "public List<InstanceInfo> getInstancesByVipAddressAndAppName(\n            String vipAddress, String appName, boolean secure)",
      "right" : "public List<InstanceInfo> getInstancesByVipAddressAndAppName(\n            String vipAddress, String appName, boolean secure)",
      "info" : "MethodDeclaration[21429-24091]:MethodDeclaration[21429-24091]"
    }, {
      "left" : "public InstanceInfo getNextServerFromEureka(String virtualHostname, boolean secure)",
      "right" : "public InstanceInfo getNextServerFromEureka(String virtualHostname, boolean secure)",
      "info" : "MethodDeclaration[24261-24942]:MethodDeclaration[24261-24942]"
    }, {
      "left" : "public Applications getApplications(String serviceUrl)",
      "right" : "public Applications getApplications(String serviceUrl)",
      "info" : "MethodDeclaration[24948-26001]:MethodDeclaration[24948-26001]"
    }, {
      "left" : "private boolean shouldRegister(InstanceInfo myInfo)",
      "right" : "private boolean shouldRegister(InstanceInfo myInfo)",
      "info" : "MethodDeclaration[26007-26440]:MethodDeclaration[26007-26440]"
    }, {
      "left" : "void register() throws Throwable",
      "right" : "void register() throws Throwable",
      "info" : "MethodDeclaration[26446-27244]:MethodDeclaration[26446-27244]"
    }, {
      "left" : "void renew()",
      "right" : "void renew()",
      "info" : "MethodDeclaration[27250-28193]:MethodDeclaration[27250-28193]"
    }, {
      "left" : "public List<String> getServiceUrlsFromConfig(String instanceZone, boolean preferSameZone)",
      "right" : "public List<String> getServiceUrlsFromConfig(String instanceZone, boolean preferSameZone)",
      "info" : "MethodDeclaration[28199-30205]:MethodDeclaration[28199-30205]"
    }, {
      "left" : "public static List<String> getEurekaServiceUrlsFromConfig(String instanceZone, boolean preferSameZone)",
      "right" : "public static List<String> getEurekaServiceUrlsFromConfig(String instanceZone, boolean preferSameZone)",
      "info" : "MethodDeclaration[30211-31958]:MethodDeclaration[30211-31958]"
    }, {
      "left" : "public void shutdown()",
      "right" : "public void shutdown()",
      "info" : "MethodDeclaration[31964-32645]:MethodDeclaration[31964-32645]"
    }, {
      "left" : "void unregister()",
      "right" : "void unregister()",
      "info" : "MethodDeclaration[32651-33336]:MethodDeclaration[32651-33336]"
    }, {
      "left" : "private boolean fetchRegistry(boolean forceFullRegistryFetch)",
      "right" : "private boolean fetchRegistry(boolean forceFullRegistryFetch)",
      "info" : "MethodDeclaration[33342-36224]:MethodDeclaration[33342-36224]"
    }, {
      "left" : "private synchronized void updateInstanceRemoteStatus()",
      "right" : "private synchronized void updateInstanceRemoteStatus()",
      "info" : "MethodDeclaration[36230-37283]:MethodDeclaration[36230-37283]"
    }, {
      "left" : "public InstanceInfo.InstanceStatus getInstanceRemoteStatus()",
      "right" : "public InstanceInfo.InstanceStatus getInstanceRemoteStatus()",
      "info" : "MethodDeclaration[37289-37507]:MethodDeclaration[37289-37507]"
    }, {
      "left" : "private String getReconcileHashCode(Applications applications)",
      "right" : "private String getReconcileHashCode(Applications applications)",
      "info" : "MethodDeclaration[37513-38029]:MethodDeclaration[37513-38029]"
    }, {
      "left" : "private ClientResponse getAndStoreFullRegistry() throws Throwable",
      "right" : "private ClientResponse getAndStoreFullRegistry() throws Throwable",
      "info" : "MethodDeclaration[38035-39447]:MethodDeclaration[38035-39447]"
    }, {
      "left" : "private ClientResponse getAndUpdateDelta(Applications applications) throws Throwable",
      "right" : "private ClientResponse getAndUpdateDelta(Applications applications) throws Throwable",
      "info" : "MethodDeclaration[39453-41749]:MethodDeclaration[39453-41749]"
    }, {
      "left" : "private void logTotalInstances()",
      "right" : "private void logTotalInstances()",
      "info" : "MethodDeclaration[41755-42184]:MethodDeclaration[41755-42184]"
    }, {
      "left" : "private ClientResponse reconcileAndLogDifference(ClientResponse response,\n                                                     Applications delta, String reconcileHashCode) throws Throwable",
      "right" : "private ClientResponse reconcileAndLogDifference(ClientResponse response,\n                                                     Applications delta, String reconcileHashCode) throws Throwable",
      "info" : "MethodDeclaration[42190-45056]:MethodDeclaration[42190-45056]"
    }, {
      "left" : "private void updateDelta(Applications delta)",
      "right" : "private void updateDelta(Applications delta)",
      "info" : "MethodDeclaration[45062-48530]:MethodDeclaration[45062-48530]"
    }, {
      "left" : "private ClientResponse makeRemoteCall(Action action) throws Throwable",
      "right" : "private ClientResponse makeRemoteCall(Action action) throws Throwable",
      "info" : "MethodDeclaration[48536-49296]:MethodDeclaration[48536-49296]"
    }, {
      "left" : "private ClientResponse makeRemoteCallToRedirectedServer(AtomicReference<String> lastRedirect, Action action)",
      "right" : "private ClientResponse makeRemoteCallToRedirectedServer(AtomicReference<String> lastRedirect, Action action)",
      "info" : "MethodDeclaration[49302-50228]:MethodDeclaration[49302-50228]"
    }, {
      "left" : "private static boolean isQueryAction(Action action)",
      "right" : "private static boolean isQueryAction(Action action)",
      "info" : "MethodDeclaration[50234-50368]:MethodDeclaration[50234-50368]"
    }, {
      "left" : "private ClientResponse makeRemoteCall(Action action, int serviceUrlIndex) throws Throwable",
      "right" : "private ClientResponse makeRemoteCall(Action action, int serviceUrlIndex) throws Throwable",
      "info" : "MethodDeclaration[50374-51621]:MethodDeclaration[50374-51621]"
    }, {
      "left" : "private ClientResponse makeRemoteCallWithFollowRedirect(Action action, String serviceUrl) throws Throwable",
      "right" : "private ClientResponse makeRemoteCallWithFollowRedirect(Action action, String serviceUrl) throws Throwable",
      "info" : "MethodDeclaration[51627-52781]:MethodDeclaration[51627-52781]"
    }, {
      "left" : "private static URI getRedirectBaseUri(URI targetUrl)",
      "right" : "private static URI getRedirectBaseUri(URI targetUrl)",
      "info" : "MethodDeclaration[52787-53296]:MethodDeclaration[52787-53296]"
    }, {
      "left" : "private ClientResponse makeRemoteCall(Action action, String serviceUrl) throws Throwable",
      "right" : "private ClientResponse makeRemoteCall(Action action, String serviceUrl) throws Throwable",
      "info" : "MethodDeclaration[53302-58080]:MethodDeclaration[53302-58080]"
    }, {
      "left" : "private void closeResponse(ClientResponse response)",
      "right" : "private void closeResponse(ClientResponse response)",
      "info" : "MethodDeclaration[58086-58515]:MethodDeclaration[58086-58515]"
    }, {
      "left" : "private void initScheduledTasks()",
      "right" : "private void initScheduledTasks()",
      "info" : "MethodDeclaration[58521-61461]:MethodDeclaration[58521-61461]"
    }, {
      "left" : "public String getId()",
      "right" : "public String getId()",
      "info" : "MethodDeclaration[60651-60769]:MethodDeclaration[60651-60769]"
    }, {
      "left" : "public void notify(StatusChangeEvent statusChangeEvent)",
      "right" : "public void notify(StatusChangeEvent statusChangeEvent)",
      "info" : "MethodDeclaration[60787-61037]:MethodDeclaration[60787-61037]"
    }, {
      "left" : "private void cancelScheduledTasks()",
      "right" : "private void cancelScheduledTasks()",
      "info" : "MethodDeclaration[61467-61727]:MethodDeclaration[61467-61727]"
    }, {
      "left" : "public List<String> getServiceUrlsFromDNS(String instanceZone, boolean preferSameZone)",
      "right" : "public List<String> getServiceUrlsFromDNS(String instanceZone, boolean preferSameZone)",
      "info" : "MethodDeclaration[61733-65942]:MethodDeclaration[61733-65942]"
    }, {
      "left" : "public List<String> getDiscoveryServiceUrls(String zone)",
      "right" : "public List<String> getDiscoveryServiceUrls(String zone)",
      "info" : "MethodDeclaration[65948-66327]:MethodDeclaration[65948-66327]"
    }, {
      "left" : "enum : DiscoveryUrlType",
      "right" : "enum : DiscoveryUrlType",
      "info" : "EnumDeclaration[66333-66386]:EnumDeclaration[66333-66386]"
    }, {
      "left" : "public static String getZone(InstanceInfo myInfo)",
      "right" : "public static String getZone(InstanceInfo myInfo)",
      "info" : "MethodDeclaration[66392-66966]:MethodDeclaration[66392-66966]"
    }, {
      "left" : "public static String getRegion()",
      "right" : "public static String getRegion()",
      "info" : "MethodDeclaration[66972-67358]:MethodDeclaration[66972-67358]"
    }, {
      "left" : "static Map<String, List<String>> getZoneBasedDiscoveryUrlsFromRegion(\n            String region)",
      "right" : "static Map<String, List<String>> getZoneBasedDiscoveryUrlsFromRegion(\n            String region)",
      "info" : "MethodDeclaration[67364-69532]:MethodDeclaration[67364-69532]"
    }, {
      "left" : "private static boolean isEC2Url(String zoneCname)",
      "right" : "private static boolean isEC2Url(String zoneCname)",
      "info" : "MethodDeclaration[69538-69639]:MethodDeclaration[69538-69639]"
    }, {
      "left" : "public static Set<String> getEC2DiscoveryUrlsFromZone(String dnsName,\n                                                          DiscoveryUrlType type)",
      "right" : "public static Set<String> getEC2DiscoveryUrlsFromZone(String dnsName,\n                                                          DiscoveryUrlType type)",
      "info" : "MethodDeclaration[69645-71572]:MethodDeclaration[69645-71572]"
    }, {
      "left" : "private static int getZoneOffset(String myZone, boolean preferSameZone,\n                                     String[] availZones)",
      "right" : "private static int getZoneOffset(String myZone, boolean preferSameZone,\n                                     String[] availZones)",
      "info" : "MethodDeclaration[71578-72260]:MethodDeclaration[71578-72260]"
    }, {
      "left" : "private boolean isOk(Action action, int httpStatus)",
      "right" : "private boolean isOk(Action action, int httpStatus)",
      "info" : "MethodDeclaration[72266-72801]:MethodDeclaration[72266-72801]"
    }, {
      "left" : "private InstanceInfo getCoordinatingServer()",
      "right" : "private InstanceInfo getCoordinatingServer()",
      "info" : "MethodDeclaration[72807-73654]:MethodDeclaration[72807-73654]"
    }, {
      "left" : "private ClientResponse getUrl(String fullServiceUrl)",
      "right" : "private ClientResponse getUrl(String fullServiceUrl)",
      "info" : "MethodDeclaration[73660-73916]:MethodDeclaration[73660-73916]"
    }, {
      "left" : "void refreshInstanceInfo()",
      "right" : "void refreshInstanceInfo()",
      "info" : "MethodDeclaration[73922-74614]:MethodDeclaration[73922-74614]"
    }, {
      "left" : "HeartbeatThread",
      "right" : "HeartbeatThread",
      "info" : "TypeDeclaration[74620-74826]:TypeDeclaration[74620-74826]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[74770-74820]:MethodDeclaration[74770-74820]"
    }, {
      "left" : "InstanceInfoReplicator getInstanceInfoReplicator()",
      "right" : "InstanceInfoReplicator getInstanceInfoReplicator()",
      "info" : "MethodDeclaration[74832-74952]:MethodDeclaration[74832-74952]"
    }, {
      "left" : "InstanceInfo getInstanceInfo()",
      "right" : "InstanceInfo getInstanceInfo()",
      "info" : "MethodDeclaration[74958-75048]:MethodDeclaration[74958-75048]"
    }, {
      "left" : "public HealthCheckHandler getHealthCheckHandler()",
      "right" : "public HealthCheckHandler getHealthCheckHandler()",
      "info" : "MethodDeclaration[75054-75670]:MethodDeclaration[75054-75670]"
    }, {
      "left" : "CacheRefreshThread",
      "right" : "CacheRefreshThread",
      "info" : "TypeDeclaration[75676-78753]:TypeDeclaration[75676-78753]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[75832-78747]:MethodDeclaration[75832-78747]"
    }, {
      "left" : "private void fetchRegistryFromBackup()",
      "right" : "private void fetchRegistryFromBackup()",
      "info" : "MethodDeclaration[78759-80489]:MethodDeclaration[78759-80489]"
    }, {
      "left" : "protected BackupRegistry newBackupRegistryInstance()\n            throws ClassNotFoundException, IllegalAccessException, InstantiationException",
      "right" : "protected BackupRegistry newBackupRegistryInstance()\n            throws ClassNotFoundException, IllegalAccessException, InstantiationException",
      "info" : "MethodDeclaration[80495-80795]:MethodDeclaration[80495-80795]"
    }, {
      "left" : "private TimerTask getServiceUrlUpdateTask(final String zone)",
      "right" : "private TimerTask getServiceUrlUpdateTask(final String zone)",
      "info" : "MethodDeclaration[80801-82150]:MethodDeclaration[80801-82150]"
    }, {
      "left" : "public void run()",
      "right" : "public void run()",
      "info" : "MethodDeclaration[81151-82133]:MethodDeclaration[81151-82133]"
    }, {
      "left" : "private Applications filterAndShuffle(Applications apps)",
      "right" : "private Applications filterAndShuffle(Applications apps)",
      "info" : "MethodDeclaration[82156-83544]:MethodDeclaration[82156-83544]"
    }, {
      "left" : "private boolean isFetchingRemoteRegionRegistries()",
      "right" : "private boolean isFetchingRemoteRegionRegistries()",
      "info" : "MethodDeclaration[83550-83659]:MethodDeclaration[83550-83659]"
    }, {
      "left" : "private void arrangeListBasedonHostname(List<String> list)",
      "right" : "private void arrangeListBasedonHostname(List<String> list)",
      "info" : "MethodDeclaration[83666-84440]:MethodDeclaration[83666-84440]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8714-8757]:Block[8714-8757]"
    }, {
      "left" : "this(myInfo, config, null);",
      "right" : "this(myInfo, config, null);",
      "info" : "ConstructorInvocation[8724-8751]:ConstructorInvocation[8724-8751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8868-9917]:Block[8868-9917]"
    }, {
      "left" : "this(myInfo, config, args, new Provider<BackupRegistry>() {\n            @Override\n            public BackupRegistry get() {\n                String backupRegistryClassName = clientConfig.getBackupRegistryImpl();\n                if (null != backupRegistryClassName) {\n                    try {\n                        return (BackupRegistry) Class.forName(backupRegistryClassName).newInstance();\n                    } catch (InstantiationException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    } catch (IllegalAccessException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    } catch (ClassNotFoundException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    }\n                }\n\n                logger.warn(\"Using default backup registry implementation which does not do anything.\");\n                return new NotImplementedRegistryImpl();\n            }\n        });",
      "right" : "this(myInfo, config, args, new Provider<BackupRegistry>() {\n            @Override\n            public BackupRegistry get() {\n                String backupRegistryClassName = clientConfig.getBackupRegistryImpl();\n                if (null != backupRegistryClassName) {\n                    try {\n                        return (BackupRegistry) Class.forName(backupRegistryClassName).newInstance();\n                    } catch (InstantiationException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    } catch (IllegalAccessException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    } catch (ClassNotFoundException e) {\n                        logger.error(\"Error instantiating BackupRegistry.\", e);\n                    }\n                }\n\n                logger.warn(\"Using default backup registry implementation which does not do anything.\");\n                return new NotImplementedRegistryImpl();\n            }\n        });",
      "info" : "ConstructorInvocation[8878-9911]:ConstructorInvocation[8878-9911]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9000-9899]:Block[9000-9899]"
    }, {
      "left" : "String backupRegistryClassName = clientConfig.getBackupRegistryImpl();",
      "right" : "String backupRegistryClassName = clientConfig.getBackupRegistryImpl();",
      "info" : "VariableDeclarationStatement[9018-9088]:VariableDeclarationStatement[9018-9088]"
    }, {
      "left" : "if (null != backupRegistryClassName)",
      "right" : "if (null != backupRegistryClassName)",
      "info" : "IfStatement[9105-9722]:IfStatement[9105-9722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9142-9722]:Block[9142-9722]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[9164-9704]:TryStatement[9164-9704]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9168-9293]:Block[9168-9293]"
    }, {
      "left" : "return (BackupRegistry) Class.forName(backupRegistryClassName).newInstance();",
      "right" : "return (BackupRegistry) Class.forName(backupRegistryClassName).newInstance();",
      "info" : "ReturnStatement[9194-9271]:ReturnStatement[9194-9271]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9327-9430]:Block[9327-9430]"
    }, {
      "left" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
      "right" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
      "info" : "ExpressionStatement[9353-9408]:ExpressionStatement[9353-9408]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9464-9567]:Block[9464-9567]"
    }, {
      "left" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
      "right" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
      "info" : "ExpressionStatement[9490-9545]:ExpressionStatement[9490-9545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9601-9704]:Block[9601-9704]"
    }, {
      "left" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
      "right" : "logger.error(\"Error instantiating BackupRegistry.\", e);",
      "info" : "ExpressionStatement[9627-9682]:ExpressionStatement[9627-9682]"
    }, {
      "left" : "logger.warn(\"Using default backup registry implementation which does not do anything.\");",
      "right" : "logger.warn(\"Using default backup registry implementation which does not do anything.\");",
      "info" : "ExpressionStatement[9740-9828]:ExpressionStatement[9740-9828]"
    }, {
      "left" : "return new NotImplementedRegistryImpl();",
      "right" : "return new NotImplementedRegistryImpl();",
      "info" : "ReturnStatement[9845-9885]:ReturnStatement[9845-9885]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10102-16359]:Block[10102-16359]"
    }, {
      "left" : "if (args != null)",
      "right" : "if (args != null)",
      "info" : "IfStatement[10112-10470]:IfStatement[10112-10470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10130-10329]:Block[10130-10329]"
    }, {
      "left" : "healthCheckHandlerProvider = args.healthCheckHandlerProvider;",
      "right" : "healthCheckHandlerProvider = args.healthCheckHandlerProvider;",
      "info" : "ExpressionStatement[10144-10205]:ExpressionStatement[10144-10205]"
    }, {
      "left" : "healthCheckCallbackProvider = args.healthCheckCallbackProvider;",
      "right" : "healthCheckCallbackProvider = args.healthCheckCallbackProvider;",
      "info" : "ExpressionStatement[10218-10281]:ExpressionStatement[10218-10281]"
    }, {
      "left" : "eventBus = args.eventBus;",
      "right" : "eventBus = args.eventBus;",
      "info" : "ExpressionStatement[10294-10319]:ExpressionStatement[10294-10319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10335-10470]:Block[10335-10470]"
    }, {
      "left" : "healthCheckCallbackProvider = null;",
      "right" : "healthCheckCallbackProvider = null;",
      "info" : "ExpressionStatement[10349-10384]:ExpressionStatement[10349-10384]"
    }, {
      "left" : "healthCheckHandlerProvider = null;",
      "right" : "healthCheckHandlerProvider = null;",
      "info" : "ExpressionStatement[10397-10431]:ExpressionStatement[10397-10431]"
    }, {
      "left" : "eventBus = null;",
      "right" : "eventBus = null;",
      "info" : "ExpressionStatement[10444-10460]:ExpressionStatement[10444-10460]"
    }, {
      "left" : "this.backupRegistryProvider = backupRegistryProvider;",
      "right" : "this.backupRegistryProvider = backupRegistryProvider;",
      "info" : "ExpressionStatement[10480-10533]:ExpressionStatement[10480-10533]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[10543-15767]:TryStatement[10543-15767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10547-15651]:Block[10547-15651]"
    }, {
      "left" : "scheduler = Executors.newScheduledThreadPool(3,\n                    new ThreadFactoryBuilder()\n                            .setNameFormat(\"DiscoveryClient-%d\")\n                            .setDaemon(true)\n                            .build());",
      "right" : "scheduler = Executors.newScheduledThreadPool(3,\n                    new ThreadFactoryBuilder()\n                            .setNameFormat(\"DiscoveryClient-%d\")\n                            .setDaemon(true)\n                            .build());",
      "info" : "ExpressionStatement[10561-10804]:ExpressionStatement[10561-10804]"
    }, {
      "left" : "clientConfig = config;",
      "right" : "clientConfig = config;",
      "info" : "ExpressionStatement[10817-10839]:ExpressionStatement[10817-10839]"
    }, {
      "left" : "final String zone = getZone(myInfo);",
      "right" : "final String zone = getZone(myInfo);",
      "info" : "VariableDeclarationStatement[10852-10888]:VariableDeclarationStatement[10852-10888]"
    }, {
      "left" : "eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));",
      "right" : "eurekaServiceUrls.set(getDiscoveryServiceUrls(zone));",
      "info" : "ExpressionStatement[10901-10954]:ExpressionStatement[10901-10954]"
    }, {
      "left" : "scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),\n                    clientConfig.getEurekaServiceUrlPollIntervalSeconds(),\n                    clientConfig.getEurekaServiceUrlPollIntervalSeconds(), TimeUnit.SECONDS);",
      "right" : "scheduler.scheduleWithFixedDelay(getServiceUrlUpdateTask(zone),\n                    clientConfig.getEurekaServiceUrlPollIntervalSeconds(),\n                    clientConfig.getEurekaServiceUrlPollIntervalSeconds(), TimeUnit.SECONDS);",
      "info" : "ExpressionStatement[10967-11199]:ExpressionStatement[10967-11199]"
    }, {
      "left" : "localRegionApps.set(new Applications());",
      "right" : "localRegionApps.set(new Applications());",
      "info" : "ExpressionStatement[11212-11252]:ExpressionStatement[11212-11252]"
    }, {
      "left" : "heartbeatExecutor = new ThreadPoolExecutor(\n                    1, clientConfig.getHeartbeatExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,\n                    new SynchronousQueue<Runnable>());",
      "right" : "heartbeatExecutor = new ThreadPoolExecutor(\n                    1, clientConfig.getHeartbeatExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,\n                    new SynchronousQueue<Runnable>());",
      "info" : "ExpressionStatement[11266-11459]:ExpressionStatement[11266-11459]"
    }, {
      "left" : "cacheRefreshExecutor = new ThreadPoolExecutor(\n                    1, clientConfig.getCacheRefreshExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,\n                    new SynchronousQueue<Runnable>());",
      "right" : "cacheRefreshExecutor = new ThreadPoolExecutor(\n                    1, clientConfig.getCacheRefreshExecutorThreadPoolSize(), 0, TimeUnit.SECONDS,\n                    new SynchronousQueue<Runnable>());",
      "info" : "ExpressionStatement[11496-11695]:ExpressionStatement[11496-11695]"
    }, {
      "left" : "fetchRegistryGeneration = new AtomicLong(0);",
      "right" : "fetchRegistryGeneration = new AtomicLong(0);",
      "info" : "ExpressionStatement[11732-11776]:ExpressionStatement[11732-11776]"
    }, {
      "left" : "instanceInfo = myInfo;",
      "right" : "instanceInfo = myInfo;",
      "info" : "ExpressionStatement[11790-11812]:ExpressionStatement[11790-11812]"
    }, {
      "left" : "if (myInfo != null)",
      "right" : "if (myInfo != null)",
      "info" : "IfStatement[11825-12076]:IfStatement[11825-12076]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11845-11976]:Block[11845-11976]"
    }, {
      "left" : "appPathIdentifier = instanceInfo.getAppName() + \"/\"\n                        + instanceInfo.getId();",
      "right" : "appPathIdentifier = instanceInfo.getAppName() + \"/\"\n                        + instanceInfo.getId();",
      "info" : "ExpressionStatement[11863-11962]:ExpressionStatement[11863-11962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11982-12076]:Block[11982-12076]"
    }, {
      "left" : "logger.warn(\"Setting instanceInfo to a passed in null value\");",
      "right" : "logger.warn(\"Setting instanceInfo to a passed in null value\");",
      "info" : "ExpressionStatement[12000-12062]:ExpressionStatement[12000-12062]"
    }, {
      "left" : "if (eurekaServiceUrls.get().get(0).startsWith(\"https://\") &&\n                    \"true\".equals(System.getProperty(\"com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory\")))",
      "right" : "if (eurekaServiceUrls.get().get(0).startsWith(\"https://\") &&\n                    \"true\".equals(System.getProperty(\"com.netflix.eureka.shouldSSLConnectionsUseSystemSocketFactory\")))",
      "info" : "IfStatement[12090-14116]:IfStatement[12090-14116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12271-12805]:Block[12271-12805]"
    }, {
      "left" : "discoveryJerseyClient = EurekaJerseyClient.createSystemSSLJerseyClient(\"DiscoveryClient-HTTPClient-System\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds());",
      "right" : "discoveryJerseyClient = EurekaJerseyClient.createSystemSSLJerseyClient(\"DiscoveryClient-HTTPClient-System\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds());",
      "info" : "ExpressionStatement[12289-12791]:ExpressionStatement[12289-12791]"
    }, {
      "left" : "if (clientConfig.getProxyHost() != null && clientConfig.getProxyPort() != null)",
      "right" : "if (clientConfig.getProxyHost() != null && clientConfig.getProxyPort() != null)",
      "info" : "IfStatement[12811-14116]:IfStatement[12811-14116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12891-13592]:Block[12891-13592]"
    }, {
      "left" : "discoveryJerseyClient = EurekaJerseyClient.createProxyJerseyClient(\"Proxy-DiscoveryClient-HTTPClient\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds(),\n                        clientConfig.getProxyHost(), clientConfig.getProxyPort(),\n                        clientConfig.getProxyUserName(), clientConfig.getProxyPassword());",
      "right" : "discoveryJerseyClient = EurekaJerseyClient.createProxyJerseyClient(\"Proxy-DiscoveryClient-HTTPClient\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds(),\n                        clientConfig.getProxyHost(), clientConfig.getProxyPort(),\n                        clientConfig.getProxyUserName(), clientConfig.getProxyPassword());",
      "info" : "ExpressionStatement[12909-13578]:ExpressionStatement[12909-13578]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13598-14116]:Block[13598-14116]"
    }, {
      "left" : "discoveryJerseyClient = EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds());",
      "right" : "discoveryJerseyClient = EurekaJerseyClient.createJerseyClient(\"DiscoveryClient-HTTPClient\",\n                        clientConfig.getEurekaServerConnectTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerReadTimeoutSeconds() * 1000,\n                        clientConfig.getEurekaServerTotalConnectionsPerHost(),\n                        clientConfig.getEurekaServerTotalConnections(),\n                        clientConfig.getEurekaConnectionIdleTimeoutSeconds());",
      "info" : "ExpressionStatement[13616-14102]:ExpressionStatement[13616-14102]"
    }, {
      "left" : "discoveryApacheClient = discoveryJerseyClient.getClient();",
      "right" : "discoveryApacheClient = discoveryJerseyClient.getClient();",
      "info" : "ExpressionStatement[14129-14187]:ExpressionStatement[14129-14187]"
    }, {
      "left" : "remoteRegionsToFetch = new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());",
      "right" : "remoteRegionsToFetch = new AtomicReference<String>(clientConfig.fetchRegistryForRemoteRegions());",
      "info" : "ExpressionStatement[14200-14297]:ExpressionStatement[14200-14297]"
    }, {
      "left" : "AzToRegionMapper azToRegionMapper;",
      "right" : "AzToRegionMapper azToRegionMapper;",
      "info" : "VariableDeclarationStatement[14310-14344]:VariableDeclarationStatement[14310-14344]"
    }, {
      "left" : "if (clientConfig.shouldUseDnsForFetchingServiceUrls())",
      "right" : "if (clientConfig.shouldUseDnsForFetchingServiceUrls())",
      "info" : "IfStatement[14357-14599]:IfStatement[14357-14599]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14412-14494]:Block[14412-14494]"
    }, {
      "left" : "azToRegionMapper = new DNSBasedAzToRegionMapper();",
      "right" : "azToRegionMapper = new DNSBasedAzToRegionMapper();",
      "info" : "ExpressionStatement[14430-14480]:ExpressionStatement[14430-14480]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14500-14599]:Block[14500-14599]"
    }, {
      "left" : "azToRegionMapper = new PropertyBasedAzToRegionMapper(clientConfig);",
      "right" : "azToRegionMapper = new PropertyBasedAzToRegionMapper(clientConfig);",
      "info" : "ExpressionStatement[14518-14585]:ExpressionStatement[14518-14585]"
    }, {
      "left" : "if (null != remoteRegionsToFetch.get())",
      "right" : "if (null != remoteRegionsToFetch.get())",
      "info" : "IfStatement[14612-14758]:IfStatement[14612-14758]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14652-14758]:Block[14652-14758]"
    }, {
      "left" : "azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));",
      "right" : "azToRegionMapper.setRegionsToFetch(remoteRegionsToFetch.get().split(\",\"));",
      "info" : "ExpressionStatement[14670-14744]:ExpressionStatement[14670-14744]"
    }, {
      "left" : "instanceRegionChecker = new InstanceRegionChecker(azToRegionMapper, clientConfig.getRegion());",
      "right" : "instanceRegionChecker = new InstanceRegionChecker(azToRegionMapper, clientConfig.getRegion());",
      "info" : "ExpressionStatement[14771-14865]:ExpressionStatement[14771-14865]"
    }, {
      "left" : "boolean enableGZIPContentEncodingFilter = config.shouldGZipContent();",
      "right" : "boolean enableGZIPContentEncodingFilter = config.shouldGZipContent();",
      "info" : "VariableDeclarationStatement[14878-14947]:VariableDeclarationStatement[14878-14947]"
    }, {
      "left" : "if (enableGZIPContentEncodingFilter)",
      "right" : "if (enableGZIPContentEncodingFilter)",
      "info" : "IfStatement[15061-15345]:IfStatement[15061-15345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15098-15345]:Block[15098-15345]"
    }, {
      "left" : "discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(\n                        false));",
      "right" : "discoveryApacheClient.addFilter(new GZIPContentEncodingFilter(\n                        false));",
      "info" : "ExpressionStatement[15236-15331]:ExpressionStatement[15236-15331]"
    }, {
      "left" : "String ip = instanceInfo == null ? null : instanceInfo.getIPAddr();",
      "right" : "String ip = instanceInfo == null ? null : instanceInfo.getIPAddr();",
      "info" : "VariableDeclarationStatement[15412-15479]:VariableDeclarationStatement[15412-15479]"
    }, {
      "left" : "EurekaClientIdentity identity = new EurekaClientIdentity(ip);",
      "right" : "EurekaClientIdentity identity = new EurekaClientIdentity(ip);",
      "info" : "VariableDeclarationStatement[15492-15553]:VariableDeclarationStatement[15492-15553]"
    }, {
      "left" : "discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));",
      "right" : "discoveryApacheClient.addFilter(new EurekaIdentityHeaderFilter(identity));",
      "info" : "ExpressionStatement[15566-15640]:ExpressionStatement[15566-15640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15672-15767]:Block[15672-15767]"
    }, {
      "left" : "throw new RuntimeException(\"Failed to initialize DiscoveryClient!\", e);",
      "right" : "throw new RuntimeException(\"Failed to initialize DiscoveryClient!\", e);",
      "info" : "ThrowStatement[15686-15757]:ThrowStatement[15686-15757]"
    }, {
      "left" : "if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false))",
      "right" : "if (clientConfig.shouldFetchRegistry() && !fetchRegistry(false))",
      "info" : "IfStatement[15776-15891]:IfStatement[15776-15891]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15841-15891]:Block[15841-15891]"
    }, {
      "left" : "fetchRegistryFromBackup();",
      "right" : "fetchRegistryFromBackup();",
      "info" : "ExpressionStatement[15855-15881]:ExpressionStatement[15855-15881]"
    }, {
      "left" : "initScheduledTasks();",
      "right" : "initScheduledTasks();",
      "info" : "ExpressionStatement[15901-15922]:ExpressionStatement[15901-15922]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[15931-16075]:TryStatement[15931-16075]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15935-15989]:Block[15935-15989]"
    }, {
      "left" : "Monitors.registerObject(this);",
      "right" : "Monitors.registerObject(this);",
      "info" : "ExpressionStatement[15949-15979]:ExpressionStatement[15949-15979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16010-16075]:Block[16010-16075]"
    }, {
      "left" : "logger.warn(\"Cannot register timers\", e);",
      "right" : "logger.warn(\"Cannot register timers\", e);",
      "info" : "ExpressionStatement[16024-16065]:ExpressionStatement[16024-16065]"
    }, {
      "left" : "DiscoveryManager.getInstance().setDiscoveryClient(this);",
      "right" : "DiscoveryManager.getInstance().setDiscoveryClient(this);",
      "info" : "ExpressionStatement[16227-16283]:ExpressionStatement[16227-16283]"
    }, {
      "left" : "DiscoveryManager.getInstance().setEurekaClientConfig(config);",
      "right" : "DiscoveryManager.getInstance().setEurekaClientConfig(config);",
      "info" : "ExpressionStatement[16292-16353]:ExpressionStatement[16292-16353]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16553-16629]:Block[16553-16629]"
    }, {
      "left" : "return getApplications().getRegisteredApplications(appName);",
      "right" : "return getApplications().getRegisteredApplications(appName);",
      "info" : "ReturnStatement[16563-16623]:ReturnStatement[16563-16623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16803-16848]:Block[16803-16848]"
    }, {
      "left" : "return localRegionApps.get();",
      "right" : "return localRegionApps.get();",
      "info" : "ReturnStatement[16813-16842]:ReturnStatement[16813-16842]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16939-17125]:Block[16939-17125]"
    }, {
      "left" : "if (instanceRegionChecker.isLocalRegion(region))",
      "right" : "if (instanceRegionChecker.isLocalRegion(region))",
      "info" : "IfStatement[16949-17119]:IfStatement[16949-17119]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16998-17051]:Block[16998-17051]"
    }, {
      "left" : "return localRegionApps.get();",
      "right" : "return localRegionApps.get();",
      "info" : "ReturnStatement[17012-17041]:ReturnStatement[17012-17041]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17057-17119]:Block[17057-17119]"
    }, {
      "left" : "return remoteRegionVsApps.get(region);",
      "right" : "return remoteRegionVsApps.get(region);",
      "info" : "ReturnStatement[17071-17109]:ReturnStatement[17071-17109]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17171-17570]:Block[17171-17570]"
    }, {
      "left" : "String localRegion = instanceRegionChecker.getLocalRegion();",
      "right" : "String localRegion = instanceRegionChecker.getLocalRegion();",
      "info" : "VariableDeclarationStatement[17181-17241]:VariableDeclarationStatement[17181-17241]"
    }, {
      "left" : "if (!remoteRegionVsApps.isEmpty())",
      "right" : "if (!remoteRegionVsApps.isEmpty())",
      "info" : "IfStatement[17250-17564]:IfStatement[17250-17564]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17285-17492]:Block[17285-17492]"
    }, {
      "left" : "Set<String> regions = remoteRegionVsApps.keySet();",
      "right" : "Set<String> regions = remoteRegionVsApps.keySet();",
      "info" : "VariableDeclarationStatement[17299-17349]:VariableDeclarationStatement[17299-17349]"
    }, {
      "left" : "Set<String> toReturn = new HashSet<String>(regions);",
      "right" : "Set<String> toReturn = new HashSet<String>(regions);",
      "info" : "VariableDeclarationStatement[17362-17414]:VariableDeclarationStatement[17362-17414]"
    }, {
      "left" : "toReturn.add(localRegion);",
      "right" : "toReturn.add(localRegion);",
      "info" : "ExpressionStatement[17427-17453]:ExpressionStatement[17427-17453]"
    }, {
      "left" : "return toReturn;",
      "right" : "return toReturn;",
      "info" : "ReturnStatement[17466-17482]:ReturnStatement[17466-17482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17498-17564]:Block[17498-17564]"
    }, {
      "left" : "return Collections.singleton(localRegion);",
      "right" : "return Collections.singleton(localRegion);",
      "info" : "ReturnStatement[17512-17554]:ReturnStatement[17512-17554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17770-18161]:Block[17770-18161]"
    }, {
      "left" : "List<InstanceInfo> instancesList = new ArrayList<InstanceInfo>();",
      "right" : "List<InstanceInfo> instancesList = new ArrayList<InstanceInfo>();",
      "info" : "VariableDeclarationStatement[17780-17845]:VariableDeclarationStatement[17780-17845]"
    }, {
      "left" : "for (Application app : this.getApplications()\n                .getRegisteredApplications())",
      "right" : "for (Application app : this.getApplications()\n                .getRegisteredApplications())",
      "info" : "EnhancedForStatement[17854-18125]:EnhancedForStatement[17854-18125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17946-18125]:Block[17946-18125]"
    }, {
      "left" : "InstanceInfo instanceInfo = app.getByInstanceId(id);",
      "right" : "InstanceInfo instanceInfo = app.getByInstanceId(id);",
      "info" : "VariableDeclarationStatement[17960-18012]:VariableDeclarationStatement[17960-18012]"
    }, {
      "left" : "if (instanceInfo != null)",
      "right" : "if (instanceInfo != null)",
      "info" : "IfStatement[18025-18115]:IfStatement[18025-18115]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18051-18115]:Block[18051-18115]"
    }, {
      "left" : "instancesList.add(instanceInfo);",
      "right" : "instancesList.add(instanceInfo);",
      "info" : "ExpressionStatement[18069-18101]:ExpressionStatement[18069-18101]"
    }, {
      "left" : "return instancesList;",
      "right" : "return instancesList;",
      "info" : "ReturnStatement[18134-18155]:ReturnStatement[18134-18155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18642-18912]:Block[18642-18912]"
    }, {
      "left" : "if (instanceInfo == null)",
      "right" : "if (instanceInfo == null)",
      "info" : "IfStatement[18652-18781]:IfStatement[18652-18781]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18678-18781]:Block[18678-18781]"
    }, {
      "left" : "logger.error(\"Cannot register a listener for instance info since it is null!\");",
      "right" : "logger.error(\"Cannot register a listener for instance info since it is null!\");",
      "info" : "ExpressionStatement[18692-18771]:ExpressionStatement[18692-18771]"
    }, {
      "left" : "if (callback != null)",
      "right" : "if (callback != null)",
      "info" : "IfStatement[18790-18906]:IfStatement[18790-18906]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18812-18906]:Block[18812-18906]"
    }, {
      "left" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(callback);",
      "right" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(callback);",
      "info" : "ExpressionStatement[18826-18896]:ExpressionStatement[18826-18896]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19003-19261]:Block[19003-19261]"
    }, {
      "left" : "if (instanceInfo == null)",
      "right" : "if (instanceInfo == null)",
      "info" : "IfStatement[19013-19145]:IfStatement[19013-19145]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19039-19145]:Block[19039-19145]"
    }, {
      "left" : "logger.error(\"Cannot register a healthcheck handler when instance info is null!\");",
      "right" : "logger.error(\"Cannot register a healthcheck handler when instance info is null!\");",
      "info" : "ExpressionStatement[19053-19135]:ExpressionStatement[19053-19135]"
    }, {
      "left" : "if (healthCheckHandler != null)",
      "right" : "if (healthCheckHandler != null)",
      "info" : "IfStatement[19154-19255]:IfStatement[19154-19255]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19186-19255]:Block[19186-19255]"
    }, {
      "left" : "this.healthCheckHandler = healthCheckHandler;",
      "right" : "this.healthCheckHandler = healthCheckHandler;",
      "info" : "ExpressionStatement[19200-19245]:ExpressionStatement[19200-19245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19718-19826]:Block[19718-19826]"
    }, {
      "left" : "return getInstancesByVipAddress(vipAddress, secure, instanceRegionChecker.getLocalRegion());",
      "right" : "return getInstancesByVipAddress(vipAddress, secure, instanceRegionChecker.getLocalRegion());",
      "info" : "ReturnStatement[19728-19820]:ReturnStatement[19728-19820]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20537-21423]:Block[20537-21423]"
    }, {
      "left" : "if (vipAddress == null)",
      "right" : "if (vipAddress == null)",
      "info" : "IfStatement[20547-20690]:IfStatement[20547-20690]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20571-20690]:Block[20571-20690]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Supplied VIP Address cannot be null\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Supplied VIP Address cannot be null\");",
      "info" : "ThrowStatement[20585-20680]:ThrowStatement[20585-20680]"
    }, {
      "left" : "Applications applications;",
      "right" : "Applications applications;",
      "info" : "VariableDeclarationStatement[20699-20725]:VariableDeclarationStatement[20699-20725]"
    }, {
      "left" : "if (instanceRegionChecker.isLocalRegion(region))",
      "right" : "if (instanceRegionChecker.isLocalRegion(region))",
      "info" : "IfStatement[20734-21208]:IfStatement[20734-21208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20783-20849]:Block[20783-20849]"
    }, {
      "left" : "applications = this.localRegionApps.get();",
      "right" : "applications = this.localRegionApps.get();",
      "info" : "ExpressionStatement[20797-20839]:ExpressionStatement[20797-20839]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20855-21208]:Block[20855-21208]"
    }, {
      "left" : "applications = remoteRegionVsApps.get(region);",
      "right" : "applications = remoteRegionVsApps.get(region);",
      "info" : "ExpressionStatement[20869-20915]:ExpressionStatement[20869-20915]"
    }, {
      "left" : "if (null == applications)",
      "right" : "if (null == applications)",
      "info" : "IfStatement[20928-21198]:IfStatement[20928-21198]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20954-21198]:Block[20954-21198]"
    }, {
      "left" : "logger.debug(\"No applications are defined for region {}, so returning an empty instance list for vip \"\n                        + \"address {}.\", region, vipAddress);",
      "right" : "logger.debug(\"No applications are defined for region {}, so returning an empty instance list for vip \"\n                        + \"address {}.\", region, vipAddress);",
      "info" : "ExpressionStatement[20972-21136]:ExpressionStatement[20972-21136]"
    }, {
      "left" : "return Collections.emptyList();",
      "right" : "return Collections.emptyList();",
      "info" : "ReturnStatement[21153-21184]:ReturnStatement[21153-21184]"
    }, {
      "left" : "if (!secure)",
      "right" : "if (!secure)",
      "info" : "IfStatement[21218-21416]:IfStatement[21218-21416]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21231-21317]:Block[21231-21317]"
    }, {
      "left" : "return applications.getInstancesByVirtualHostName(vipAddress);",
      "right" : "return applications.getInstancesByVirtualHostName(vipAddress);",
      "info" : "ReturnStatement[21245-21307]:ReturnStatement[21245-21307]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21323-21416]:Block[21323-21416]"
    }, {
      "left" : "return applications.getInstancesBySecureVirtualHostName(vipAddress);",
      "right" : "return applications.getInstancesBySecureVirtualHostName(vipAddress);",
      "info" : "ReturnStatement[21337-21405]:ReturnStatement[21337-21405]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22175-24091]:Block[22175-24091]"
    }, {
      "left" : "List<InstanceInfo> result = new ArrayList<InstanceInfo>();",
      "right" : "List<InstanceInfo> result = new ArrayList<InstanceInfo>();",
      "info" : "VariableDeclarationStatement[22186-22244]:VariableDeclarationStatement[22186-22244]"
    }, {
      "left" : "if (vipAddress == null && appName == null)",
      "right" : "if (vipAddress == null && appName == null)",
      "info" : "IfStatement[22253-22822]:IfStatement[22253-22822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22296-22441]:Block[22296-22441]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"Supplied VIP Address and application name cannot both be null\");",
      "right" : "throw new IllegalArgumentException(\n                    \"Supplied VIP Address and application name cannot both be null\");",
      "info" : "ThrowStatement[22310-22431]:ThrowStatement[22310-22431]"
    }, {
      "left" : "if (vipAddress != null && appName == null)",
      "right" : "if (vipAddress != null && appName == null)",
      "info" : "IfStatement[22447-22822]:IfStatement[22447-22822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22490-22566]:Block[22490-22566]"
    }, {
      "left" : "return getInstancesByVipAddress(vipAddress, secure);",
      "right" : "return getInstancesByVipAddress(vipAddress, secure);",
      "info" : "ReturnStatement[22504-22556]:ReturnStatement[22504-22556]"
    }, {
      "left" : "if (vipAddress == null && appName != null)",
      "right" : "if (vipAddress == null && appName != null)",
      "info" : "IfStatement[22572-22822]:IfStatement[22572-22822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22615-22822]:Block[22615-22822]"
    }, {
      "left" : "Application application = getApplication(appName);",
      "right" : "Application application = getApplication(appName);",
      "info" : "VariableDeclarationStatement[22629-22679]:VariableDeclarationStatement[22629-22679]"
    }, {
      "left" : "if (application != null)",
      "right" : "if (application != null)",
      "info" : "IfStatement[22692-22785]:IfStatement[22692-22785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22717-22785]:Block[22717-22785]"
    }, {
      "left" : "result = application.getInstances();",
      "right" : "result = application.getInstances();",
      "info" : "ExpressionStatement[22735-22771]:ExpressionStatement[22735-22771]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[22798-22812]:ReturnStatement[22798-22812]"
    }, {
      "left" : "String instanceVipAddress;",
      "right" : "String instanceVipAddress;",
      "info" : "VariableDeclarationStatement[22832-22858]:VariableDeclarationStatement[22832-22858]"
    }, {
      "left" : "for (Application app : getApplications().getRegisteredApplications())",
      "right" : "for (Application app : getApplications().getRegisteredApplications())",
      "info" : "EnhancedForStatement[22867-24062]:EnhancedForStatement[22867-24062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22937-24062]:Block[22937-24062]"
    }, {
      "left" : "for (InstanceInfo instance : app.getInstances())",
      "right" : "for (InstanceInfo instance : app.getInstances())",
      "info" : "EnhancedForStatement[22951-24052]:EnhancedForStatement[22951-24052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23000-24052]:Block[23000-24052]"
    }, {
      "left" : "if (secure)",
      "right" : "if (secure)",
      "info" : "IfStatement[23018-23214]:IfStatement[23018-23214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23030-23122]:Block[23030-23122]"
    }, {
      "left" : "instanceVipAddress = instance.getSecureVipAddress();",
      "right" : "instanceVipAddress = instance.getSecureVipAddress();",
      "info" : "ExpressionStatement[23052-23104]:ExpressionStatement[23052-23104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23128-23214]:Block[23128-23214]"
    }, {
      "left" : "instanceVipAddress = instance.getVIPAddress();",
      "right" : "instanceVipAddress = instance.getVIPAddress();",
      "info" : "ExpressionStatement[23150-23196]:ExpressionStatement[23150-23196]"
    }, {
      "left" : "if (instanceVipAddress == null)",
      "right" : "if (instanceVipAddress == null)",
      "info" : "IfStatement[23231-23312]:IfStatement[23231-23312]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23263-23312]:Block[23263-23312]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[23285-23294]:ContinueStatement[23285-23294]"
    }, {
      "left" : "String[] instanceVipAddresses = instanceVipAddress\n                        .split(COMMA_STRING);",
      "right" : "String[] instanceVipAddresses = instanceVipAddress\n                        .split(COMMA_STRING);",
      "info" : "VariableDeclarationStatement[23329-23425]:VariableDeclarationStatement[23329-23425]"
    }, {
      "left" : "for (String vipAddressFromList : instanceVipAddresses)",
      "right" : "for (String vipAddressFromList : instanceVipAddresses)",
      "info" : "EnhancedForStatement[23704-24038]:EnhancedForStatement[23704-24038]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23759-24038]:Block[23759-24038]"
    }, {
      "left" : "if (vipAddress.equalsIgnoreCase(vipAddressFromList.trim())\n                            && appName.equalsIgnoreCase(instance.getAppName()))",
      "right" : "if (vipAddress.equalsIgnoreCase(vipAddressFromList.trim())\n                            && appName.equalsIgnoreCase(instance.getAppName()))",
      "info" : "IfStatement[23781-24020]:IfStatement[23781-24020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23920-24020]:Block[23920-24020]"
    }, {
      "left" : "result.add(instance);",
      "right" : "result.add(instance);",
      "info" : "ExpressionStatement[23946-23967]:ExpressionStatement[23946-23967]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[23992-23998]:BreakStatement[23992-23998]"
    }, {
      "left" : "return result;",
      "right" : "return result;",
      "info" : "ReturnStatement[24071-24085]:ReturnStatement[24071-24085]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24359-24942]:Block[24359-24942]"
    }, {
      "left" : "List<InstanceInfo> instanceInfoList = this.getInstancesByVipAddress(\n                virtualHostname, secure);",
      "right" : "List<InstanceInfo> instanceInfoList = this.getInstancesByVipAddress(\n                virtualHostname, secure);",
      "info" : "VariableDeclarationStatement[24369-24479]:VariableDeclarationStatement[24369-24479]"
    }, {
      "left" : "if (instanceInfoList == null || instanceInfoList.isEmpty())",
      "right" : "if (instanceInfoList == null || instanceInfoList.isEmpty())",
      "info" : "IfStatement[24488-24679]:IfStatement[24488-24679]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24548-24679]:Block[24548-24679]"
    }, {
      "left" : "throw new RuntimeException(\"No matches for the virtual host name :\"\n                    + virtualHostname);",
      "right" : "throw new RuntimeException(\"No matches for the virtual host name :\"\n                    + virtualHostname);",
      "info" : "ThrowStatement[24562-24669]:ThrowStatement[24562-24669]"
    }, {
      "left" : "Applications apps = this.localRegionApps.get();",
      "right" : "Applications apps = this.localRegionApps.get();",
      "info" : "VariableDeclarationStatement[24688-24735]:VariableDeclarationStatement[24688-24735]"
    }, {
      "left" : "int index = (int) (apps.getNextIndex(virtualHostname.toUpperCase(Locale.ROOT),\n                secure).incrementAndGet() % instanceInfoList.size());",
      "right" : "int index = (int) (apps.getNextIndex(virtualHostname.toUpperCase(Locale.ROOT),\n                secure).incrementAndGet() % instanceInfoList.size());",
      "info" : "VariableDeclarationStatement[24744-24892]:VariableDeclarationStatement[24744-24892]"
    }, {
      "left" : "return instanceInfoList.get(index);",
      "right" : "return instanceInfoList.get(index);",
      "info" : "ReturnStatement[24901-24936]:ReturnStatement[24901-24936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25273-26001]:Block[25273-26001]"
    }, {
      "left" : "ClientResponse response = null;",
      "right" : "ClientResponse response = null;",
      "info" : "VariableDeclarationStatement[25283-25314]:VariableDeclarationStatement[25283-25314]"
    }, {
      "left" : "Applications apps = null;",
      "right" : "Applications apps = null;",
      "info" : "VariableDeclarationStatement[25323-25348]:VariableDeclarationStatement[25323-25348]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[25357-25974]:TryStatement[25357-25974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25361-25633]:Block[25361-25633]"
    }, {
      "left" : "response = makeRemoteCall(Action.Refresh);",
      "right" : "response = makeRemoteCall(Action.Refresh);",
      "info" : "ExpressionStatement[25375-25417]:ExpressionStatement[25375-25417]"
    }, {
      "left" : "apps = response.getEntity(Applications.class);",
      "right" : "apps = response.getEntity(Applications.class);",
      "info" : "ExpressionStatement[25430-25476]:ExpressionStatement[25430-25476]"
    }, {
      "left" : "logger.debug(PREFIX + appPathIdentifier + \" -  refresh status: \"\n                    + response.getStatus());",
      "right" : "logger.debug(PREFIX + appPathIdentifier + \" -  refresh status: \"\n                    + response.getStatus());",
      "info" : "ExpressionStatement[25489-25598]:ExpressionStatement[25489-25598]"
    }, {
      "left" : "return apps;",
      "right" : "return apps;",
      "info" : "ReturnStatement[25611-25623]:ReturnStatement[25611-25623]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25655-25870]:Block[25655-25870]"
    }, {
      "left" : "logger.error(\n                    PREFIX + appPathIdentifier\n                            + \" - was unable to refresh its cache! status = \"\n                            + th.getMessage(), th);",
      "right" : "logger.error(\n                    PREFIX + appPathIdentifier\n                            + \" - was unable to refresh its cache! status = \"\n                            + th.getMessage(), th);",
      "info" : "ExpressionStatement[25669-25859]:ExpressionStatement[25669-25859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25879-25974]:Block[25879-25974]"
    }, {
      "left" : "if (response != null)",
      "right" : "if (response != null)",
      "info" : "IfStatement[25893-25964]:IfStatement[25893-25964]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25915-25964]:Block[25915-25964]"
    }, {
      "left" : "response.close();",
      "right" : "response.close();",
      "info" : "ExpressionStatement[25933-25950]:ExpressionStatement[25933-25950]"
    }, {
      "left" : "return apps;",
      "right" : "return apps;",
      "info" : "ReturnStatement[25983-25995]:ReturnStatement[25983-25995]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26319-26440]:Block[26319-26440]"
    }, {
      "left" : "if (!clientConfig.shouldRegisterWithEureka())",
      "right" : "if (!clientConfig.shouldRegisterWithEureka())",
      "info" : "IfStatement[26329-26412]:IfStatement[26329-26412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26375-26412]:Block[26375-26412]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[26389-26402]:ReturnStatement[26389-26402]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[26422-26434]:ReturnStatement[26422-26434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26572-27244]:Block[26572-27244]"
    }, {
      "left" : "logger.info(PREFIX + appPathIdentifier + \": registering service...\");",
      "right" : "logger.info(PREFIX + appPathIdentifier + \": registering service...\");",
      "info" : "ExpressionStatement[26582-26651]:ExpressionStatement[26582-26651]"
    }, {
      "left" : "ClientResponse response = null;",
      "right" : "ClientResponse response = null;",
      "info" : "VariableDeclarationStatement[26660-26691]:VariableDeclarationStatement[26660-26691]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[26700-27238]:TryStatement[26700-27238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26704-26978]:Block[26704-26978]"
    }, {
      "left" : "response = makeRemoteCall(Action.Register);",
      "right" : "response = makeRemoteCall(Action.Register);",
      "info" : "ExpressionStatement[26718-26761]:ExpressionStatement[26718-26761]"
    }, {
      "left" : "isRegisteredWithDiscovery = true;",
      "right" : "isRegisteredWithDiscovery = true;",
      "info" : "ExpressionStatement[26774-26807]:ExpressionStatement[26774-26807]"
    }, {
      "left" : "logger.info(\"{} - registration status: {}\", PREFIX + appPathIdentifier,\n                    (response != null ? response.getStatus() : \"not sent\"));",
      "right" : "logger.info(\"{} - registration status: {}\", PREFIX + appPathIdentifier,\n                    (response != null ? response.getStatus() : \"not sent\"));",
      "info" : "ExpressionStatement[26820-26968]:ExpressionStatement[26820-26968]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26999-27134]:Block[26999-27134]"
    }, {
      "left" : "logger.warn(\"{} - registration failed {}\", PREFIX + appPathIdentifier, e.getMessage(), e);",
      "right" : "logger.warn(\"{} - registration failed {}\", PREFIX + appPathIdentifier, e.getMessage(), e);",
      "info" : "ExpressionStatement[27013-27103]:ExpressionStatement[27013-27103]"
    }, {
      "left" : "throw e;",
      "right" : "throw e;",
      "info" : "ThrowStatement[27116-27124]:ThrowStatement[27116-27124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27143-27238]:Block[27143-27238]"
    }, {
      "left" : "if (response != null)",
      "right" : "if (response != null)",
      "info" : "IfStatement[27157-27228]:IfStatement[27157-27228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27179-27228]:Block[27179-27228]"
    }, {
      "left" : "response.close();",
      "right" : "response.close();",
      "info" : "ExpressionStatement[27197-27214]:ExpressionStatement[27197-27214]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27352-28193]:Block[27352-28193]"
    }, {
      "left" : "ClientResponse response = null;",
      "right" : "ClientResponse response = null;",
      "info" : "VariableDeclarationStatement[27362-27393]:VariableDeclarationStatement[27362-27393]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[27402-28186]:TryStatement[27402-28186]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27406-27955]:Block[27406-27955]"
    }, {
      "left" : "response = makeRemoteCall(Action.Renew);",
      "right" : "response = makeRemoteCall(Action.Renew);",
      "info" : "ExpressionStatement[27420-27460]:ExpressionStatement[27420-27460]"
    }, {
      "left" : "logger.debug(\"{} - Heartbeat status: {}\", PREFIX + appPathIdentifier,\n                    (response != null ? response.getStatus() : \"not sent\"));",
      "right" : "logger.debug(\"{} - Heartbeat status: {}\", PREFIX + appPathIdentifier,\n                    (response != null ? response.getStatus() : \"not sent\"));",
      "info" : "ExpressionStatement[27473-27619]:ExpressionStatement[27473-27619]"
    }, {
      "left" : "if (response == null)",
      "right" : "if (response == null)",
      "info" : "IfStatement[27632-27693]:IfStatement[27632-27693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27654-27693]:Block[27654-27693]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[27672-27679]:ReturnStatement[27672-27679]"
    }, {
      "left" : "if (response.getStatus() == 404)",
      "right" : "if (response.getStatus() == 404)",
      "info" : "IfStatement[27706-27945]:IfStatement[27706-27945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27739-27945]:Block[27739-27945]"
    }, {
      "left" : "REREGISTER_COUNTER.increment();",
      "right" : "REREGISTER_COUNTER.increment();",
      "info" : "ExpressionStatement[27757-27788]:ExpressionStatement[27757-27788]"
    }, {
      "left" : "logger.info(\"{} - Re-registering apps/{}\", PREFIX + appPathIdentifier, instanceInfo.getAppName());",
      "right" : "logger.info(\"{} - Re-registering apps/{}\", PREFIX + appPathIdentifier, instanceInfo.getAppName());",
      "info" : "ExpressionStatement[27805-27903]:ExpressionStatement[27805-27903]"
    }, {
      "left" : "register();",
      "right" : "register();",
      "info" : "ExpressionStatement[27920-27931]:ExpressionStatement[27920-27931]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27976-28082]:Block[27976-28082]"
    }, {
      "left" : "logger.error(\"{} - was unable to send heartbeat!\", PREFIX + appPathIdentifier, e);",
      "right" : "logger.error(\"{} - was unable to send heartbeat!\", PREFIX + appPathIdentifier, e);",
      "info" : "ExpressionStatement[27990-28072]:ExpressionStatement[27990-28072]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28091-28186]:Block[28091-28186]"
    }, {
      "left" : "if (response != null)",
      "right" : "if (response != null)",
      "info" : "IfStatement[28105-28176]:IfStatement[28105-28176]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28127-28176]:Block[28127-28176]"
    }, {
      "left" : "response.close();",
      "right" : "response.close();",
      "info" : "ExpressionStatement[28145-28162]:ExpressionStatement[28145-28162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28676-30205]:Block[28676-30205]"
    }, {
      "left" : "List<String> orderedUrls = new ArrayList<String>();",
      "right" : "List<String> orderedUrls = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[28686-28737]:VariableDeclarationStatement[28686-28737]"
    }, {
      "left" : "String region = getRegion();",
      "right" : "String region = getRegion();",
      "info" : "VariableDeclarationStatement[28746-28774]:VariableDeclarationStatement[28746-28774]"
    }, {
      "left" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
      "right" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
      "info" : "VariableDeclarationStatement[28783-28865]:VariableDeclarationStatement[28783-28865]"
    }, {
      "left" : "if (availZones == null || availZones.length == 0)",
      "right" : "if (availZones == null || availZones.length == 0)",
      "info" : "IfStatement[28874-29014]:IfStatement[28874-29014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28924-29014]:Block[28924-29014]"
    }, {
      "left" : "availZones = new String[1];",
      "right" : "availZones = new String[1];",
      "info" : "ExpressionStatement[28938-28965]:ExpressionStatement[28938-28965]"
    }, {
      "left" : "availZones[0] = \"default\";",
      "right" : "availZones[0] = \"default\";",
      "info" : "ExpressionStatement[28978-29004]:ExpressionStatement[28978-29004]"
    }, {
      "left" : "logger.debug(\"The availability zone for the given region {} are {}\",\n                region, Arrays.toString(availZones));",
      "right" : "logger.debug(\"The availability zone for the given region {} are {}\",\n                region, Arrays.toString(availZones));",
      "info" : "ExpressionStatement[29023-29145]:ExpressionStatement[29023-29145]"
    }, {
      "left" : "int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,\n                availZones);",
      "right" : "int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,\n                availZones);",
      "info" : "VariableDeclarationStatement[29154-29245]:VariableDeclarationStatement[29154-29245]"
    }, {
      "left" : "List<String> serviceUrls = clientConfig\n                .getEurekaServerServiceUrls(availZones[myZoneOffset]);",
      "right" : "List<String> serviceUrls = clientConfig\n                .getEurekaServerServiceUrls(availZones[myZoneOffset]);",
      "info" : "VariableDeclarationStatement[29255-29365]:VariableDeclarationStatement[29255-29365]"
    }, {
      "left" : "if (serviceUrls != null)",
      "right" : "if (serviceUrls != null)",
      "info" : "IfStatement[29374-29455]:IfStatement[29374-29455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29399-29455]:Block[29399-29455]"
    }, {
      "left" : "orderedUrls.addAll(serviceUrls);",
      "right" : "orderedUrls.addAll(serviceUrls);",
      "info" : "ExpressionStatement[29413-29445]:ExpressionStatement[29413-29445]"
    }, {
      "left" : "int currentOffset = myZoneOffset == (availZones.length - 1) ? 0\n                : (myZoneOffset + 1);",
      "right" : "int currentOffset = myZoneOffset == (availZones.length - 1) ? 0\n                : (myZoneOffset + 1);",
      "info" : "VariableDeclarationStatement[29464-29565]:VariableDeclarationStatement[29464-29565]"
    }, {
      "left" : "while (currentOffset != myZoneOffset)",
      "right" : "while (currentOffset != myZoneOffset)",
      "info" : "WhileStatement[29574-30003]:WhileStatement[29574-30003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29612-30003]:Block[29612-30003]"
    }, {
      "left" : "serviceUrls = clientConfig\n                    .getEurekaServerServiceUrls(availZones[currentOffset]);",
      "right" : "serviceUrls = clientConfig\n                    .getEurekaServerServiceUrls(availZones[currentOffset]);",
      "info" : "ExpressionStatement[29626-29728]:ExpressionStatement[29626-29728]"
    }, {
      "left" : "if (serviceUrls != null)",
      "right" : "if (serviceUrls != null)",
      "info" : "IfStatement[29741-29830]:IfStatement[29741-29830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29766-29830]:Block[29766-29830]"
    }, {
      "left" : "orderedUrls.addAll(serviceUrls);",
      "right" : "orderedUrls.addAll(serviceUrls);",
      "info" : "ExpressionStatement[29784-29816]:ExpressionStatement[29784-29816]"
    }, {
      "left" : "if (currentOffset == (availZones.length - 1))",
      "right" : "if (currentOffset == (availZones.length - 1))",
      "info" : "IfStatement[29843-29993]:IfStatement[29843-29993]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29889-29939]:Block[29889-29939]"
    }, {
      "left" : "currentOffset = 0;",
      "right" : "currentOffset = 0;",
      "info" : "ExpressionStatement[29907-29925]:ExpressionStatement[29907-29925]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29945-29993]:Block[29945-29993]"
    }, {
      "left" : "currentOffset++;",
      "right" : "currentOffset++;",
      "info" : "ExpressionStatement[29963-29979]:ExpressionStatement[29963-29979]"
    }, {
      "left" : "if (orderedUrls.size() < 1)",
      "right" : "if (orderedUrls.size() < 1)",
      "info" : "IfStatement[30013-30171]:IfStatement[30013-30171]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30041-30171]:Block[30041-30171]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"DiscoveryClient: invalid serviceUrl specified!\");",
      "right" : "throw new IllegalArgumentException(\n                    \"DiscoveryClient: invalid serviceUrl specified!\");",
      "info" : "ThrowStatement[30055-30161]:ThrowStatement[30055-30161]"
    }, {
      "left" : "return orderedUrls;",
      "right" : "return orderedUrls;",
      "info" : "ReturnStatement[30180-30199]:ReturnStatement[30180-30199]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30429-31958]:Block[30429-31958]"
    }, {
      "left" : "List<String> orderedUrls = new ArrayList<String>();",
      "right" : "List<String> orderedUrls = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[30439-30490]:VariableDeclarationStatement[30439-30490]"
    }, {
      "left" : "String region = getRegion();",
      "right" : "String region = getRegion();",
      "info" : "VariableDeclarationStatement[30499-30527]:VariableDeclarationStatement[30499-30527]"
    }, {
      "left" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
      "right" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
      "info" : "VariableDeclarationStatement[30536-30618]:VariableDeclarationStatement[30536-30618]"
    }, {
      "left" : "if (availZones == null || availZones.length == 0)",
      "right" : "if (availZones == null || availZones.length == 0)",
      "info" : "IfStatement[30627-30767]:IfStatement[30627-30767]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30677-30767]:Block[30677-30767]"
    }, {
      "left" : "availZones = new String[1];",
      "right" : "availZones = new String[1];",
      "info" : "ExpressionStatement[30691-30718]:ExpressionStatement[30691-30718]"
    }, {
      "left" : "availZones[0] = \"default\";",
      "right" : "availZones[0] = \"default\";",
      "info" : "ExpressionStatement[30731-30757]:ExpressionStatement[30731-30757]"
    }, {
      "left" : "logger.debug(\"The availability zone for the given region {} are {}\",\n                region, Arrays.toString(availZones));",
      "right" : "logger.debug(\"The availability zone for the given region {} are {}\",\n                region, Arrays.toString(availZones));",
      "info" : "ExpressionStatement[30776-30898]:ExpressionStatement[30776-30898]"
    }, {
      "left" : "int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,\n                availZones);",
      "right" : "int myZoneOffset = getZoneOffset(instanceZone, preferSameZone,\n                availZones);",
      "info" : "VariableDeclarationStatement[30907-30998]:VariableDeclarationStatement[30907-30998]"
    }, {
      "left" : "List<String> serviceUrls = clientConfig\n                .getEurekaServerServiceUrls(availZones[myZoneOffset]);",
      "right" : "List<String> serviceUrls = clientConfig\n                .getEurekaServerServiceUrls(availZones[myZoneOffset]);",
      "info" : "VariableDeclarationStatement[31008-31118]:VariableDeclarationStatement[31008-31118]"
    }, {
      "left" : "if (serviceUrls != null)",
      "right" : "if (serviceUrls != null)",
      "info" : "IfStatement[31127-31208]:IfStatement[31127-31208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31152-31208]:Block[31152-31208]"
    }, {
      "left" : "orderedUrls.addAll(serviceUrls);",
      "right" : "orderedUrls.addAll(serviceUrls);",
      "info" : "ExpressionStatement[31166-31198]:ExpressionStatement[31166-31198]"
    }, {
      "left" : "int currentOffset = myZoneOffset == (availZones.length - 1) ? 0\n                : (myZoneOffset + 1);",
      "right" : "int currentOffset = myZoneOffset == (availZones.length - 1) ? 0\n                : (myZoneOffset + 1);",
      "info" : "VariableDeclarationStatement[31217-31318]:VariableDeclarationStatement[31217-31318]"
    }, {
      "left" : "while (currentOffset != myZoneOffset)",
      "right" : "while (currentOffset != myZoneOffset)",
      "info" : "WhileStatement[31327-31756]:WhileStatement[31327-31756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31365-31756]:Block[31365-31756]"
    }, {
      "left" : "serviceUrls = clientConfig\n                    .getEurekaServerServiceUrls(availZones[currentOffset]);",
      "right" : "serviceUrls = clientConfig\n                    .getEurekaServerServiceUrls(availZones[currentOffset]);",
      "info" : "ExpressionStatement[31379-31481]:ExpressionStatement[31379-31481]"
    }, {
      "left" : "if (serviceUrls != null)",
      "right" : "if (serviceUrls != null)",
      "info" : "IfStatement[31494-31583]:IfStatement[31494-31583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31519-31583]:Block[31519-31583]"
    }, {
      "left" : "orderedUrls.addAll(serviceUrls);",
      "right" : "orderedUrls.addAll(serviceUrls);",
      "info" : "ExpressionStatement[31537-31569]:ExpressionStatement[31537-31569]"
    }, {
      "left" : "if (currentOffset == (availZones.length - 1))",
      "right" : "if (currentOffset == (availZones.length - 1))",
      "info" : "IfStatement[31596-31746]:IfStatement[31596-31746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31642-31692]:Block[31642-31692]"
    }, {
      "left" : "currentOffset = 0;",
      "right" : "currentOffset = 0;",
      "info" : "ExpressionStatement[31660-31678]:ExpressionStatement[31660-31678]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31698-31746]:Block[31698-31746]"
    }, {
      "left" : "currentOffset++;",
      "right" : "currentOffset++;",
      "info" : "ExpressionStatement[31716-31732]:ExpressionStatement[31716-31732]"
    }, {
      "left" : "if (orderedUrls.size() < 1)",
      "right" : "if (orderedUrls.size() < 1)",
      "info" : "IfStatement[31766-31924]:IfStatement[31766-31924]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31794-31924]:Block[31794-31924]"
    }, {
      "left" : "throw new IllegalArgumentException(\n                    \"DiscoveryClient: invalid serviceUrl specified!\");",
      "right" : "throw new IllegalArgumentException(\n                    \"DiscoveryClient: invalid serviceUrl specified!\");",
      "info" : "ThrowStatement[31808-31914]:ThrowStatement[31808-31914]"
    }, {
      "left" : "return orderedUrls;",
      "right" : "return orderedUrls;",
      "info" : "ReturnStatement[31933-31952]:ReturnStatement[31933-31952]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32131-32645]:Block[32131-32645]"
    }, {
      "left" : "if (statusChangeListener != null)",
      "right" : "if (statusChangeListener != null)",
      "info" : "IfStatement[32141-32297]:IfStatement[32141-32297]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32175-32297]:Block[32175-32297]"
    }, {
      "left" : "ApplicationInfoManager.getInstance().unregisterStatusChangeListener(statusChangeListener.getId());",
      "right" : "ApplicationInfoManager.getInstance().unregisterStatusChangeListener(statusChangeListener.getId());",
      "info" : "ExpressionStatement[32189-32287]:ExpressionStatement[32189-32287]"
    }, {
      "left" : "cancelScheduledTasks();",
      "right" : "cancelScheduledTasks();",
      "info" : "ExpressionStatement[32307-32330]:ExpressionStatement[32307-32330]"
    }, {
      "left" : "if (instanceInfo != null && shouldRegister(instanceInfo))",
      "right" : "if (instanceInfo != null && shouldRegister(instanceInfo))",
      "info" : "IfStatement[32377-32529]:IfStatement[32377-32529]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32435-32529]:Block[32435-32529]"
    }, {
      "left" : "instanceInfo.setStatus(InstanceStatus.DOWN);",
      "right" : "instanceInfo.setStatus(InstanceStatus.DOWN);",
      "info" : "ExpressionStatement[32449-32493]:ExpressionStatement[32449-32493]"
    }, {
      "left" : "unregister();",
      "right" : "unregister();",
      "info" : "ExpressionStatement[32506-32519]:ExpressionStatement[32506-32519]"
    }, {
      "left" : "if (discoveryJerseyClient != null)",
      "right" : "if (discoveryJerseyClient != null)",
      "info" : "IfStatement[32539-32639]:IfStatement[32539-32639]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32574-32639]:Block[32574-32639]"
    }, {
      "left" : "discoveryJerseyClient.destroyResources();",
      "right" : "discoveryJerseyClient.destroyResources();",
      "info" : "ExpressionStatement[32588-32629]:ExpressionStatement[32588-32629]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32726-33336]:Block[32726-33336]"
    }, {
      "left" : "ClientResponse response = null;",
      "right" : "ClientResponse response = null;",
      "info" : "VariableDeclarationStatement[32736-32767]:VariableDeclarationStatement[32736-32767]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[32776-33330]:TryStatement[32776-33330]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32780-33070]:Block[32780-33070]"
    }, {
      "left" : "response = makeRemoteCall(Action.Cancel);",
      "right" : "response = makeRemoteCall(Action.Cancel);",
      "info" : "ExpressionStatement[32794-32835]:ExpressionStatement[32794-32835]"
    }, {
      "left" : "logger.info(PREFIX\n                    + appPathIdentifier\n                    + \" - deregister  status: \"\n                    + (response != null ? response.getStatus()\n                    : \"not registered\"));",
      "right" : "logger.info(PREFIX\n                    + appPathIdentifier\n                    + \" - deregister  status: \"\n                    + (response != null ? response.getStatus()\n                    : \"not registered\"));",
      "info" : "ExpressionStatement[32849-33060]:ExpressionStatement[32849-33060]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33091-33226]:Block[33091-33226]"
    }, {
      "left" : "logger.error(PREFIX + appPathIdentifier\n                    + \" - de-registration failed\" + e.getMessage(), e);",
      "right" : "logger.error(PREFIX + appPathIdentifier\n                    + \" - de-registration failed\" + e.getMessage(), e);",
      "info" : "ExpressionStatement[33105-33216]:ExpressionStatement[33105-33216]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33235-33330]:Block[33235-33330]"
    }, {
      "left" : "if (response != null)",
      "right" : "if (response != null)",
      "info" : "IfStatement[33249-33320]:IfStatement[33249-33320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33271-33320]:Block[33271-33320]"
    }, {
      "left" : "response.close();",
      "right" : "response.close();",
      "info" : "ExpressionStatement[33289-33306]:ExpressionStatement[33289-33306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33780-36224]:Block[33780-36224]"
    }, {
      "left" : "ClientResponse response = null;",
      "right" : "ClientResponse response = null;",
      "info" : "VariableDeclarationStatement[33790-33821]:VariableDeclarationStatement[33790-33821]"
    }, {
      "left" : "Stopwatch tracer = FETCH_REGISTRY_TIMER.start();",
      "right" : "Stopwatch tracer = FETCH_REGISTRY_TIMER.start();",
      "info" : "VariableDeclarationStatement[33830-33878]:VariableDeclarationStatement[33830-33878]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[33888-36197]:TryStatement[33888-36197]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33892-35802]:Block[33892-35802]"
    }, {
      "left" : "Applications applications = getApplications();",
      "right" : "Applications applications = getApplications();",
      "info" : "VariableDeclarationStatement[34010-34056]:VariableDeclarationStatement[34010-34056]"
    }, {
      "left" : "if (clientConfig.shouldDisableDelta()\n                    || (!Strings.isNullOrEmpty(clientConfig.getRegistryRefreshSingleVipAddress()))\n                    || forceFullRegistryFetch\n                    || (applications == null)\n                    || (applications.getRegisteredApplications().size() == 0)\n                    || (applications.getVersion() == -1))",
      "right" : "if (clientConfig.shouldDisableDelta()\n                    || (!Strings.isNullOrEmpty(clientConfig.getRegistryRefreshSingleVipAddress()))\n                    || forceFullRegistryFetch\n                    || (applications == null)\n                    || (applications.getRegisteredApplications().size() == 0)\n                    || (applications.getVersion() == -1))",
      "info" : "IfStatement[34070-35303]:IfStatement[34070-35303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34514-35222]:Block[34514-35222]"
    }, {
      "left" : "logger.info(\"Disable delta property : {}\", clientConfig.shouldDisableDelta());",
      "right" : "logger.info(\"Disable delta property : {}\", clientConfig.shouldDisableDelta());",
      "info" : "ExpressionStatement[34532-34610]:ExpressionStatement[34532-34610]"
    }, {
      "left" : "logger.info(\"Single vip registry refresh property : {}\", clientConfig.getRegistryRefreshSingleVipAddress());",
      "right" : "logger.info(\"Single vip registry refresh property : {}\", clientConfig.getRegistryRefreshSingleVipAddress());",
      "info" : "ExpressionStatement[34627-34735]:ExpressionStatement[34627-34735]"
    }, {
      "left" : "logger.info(\"Force full registry fetch : {}\", forceFullRegistryFetch);",
      "right" : "logger.info(\"Force full registry fetch : {}\", forceFullRegistryFetch);",
      "info" : "ExpressionStatement[34752-34822]:ExpressionStatement[34752-34822]"
    }, {
      "left" : "logger.info(\"Application is null : {}\", (applications == null));",
      "right" : "logger.info(\"Application is null : {}\", (applications == null));",
      "info" : "ExpressionStatement[34839-34903]:ExpressionStatement[34839-34903]"
    }, {
      "left" : "logger.info(\"Registered Applications size is zero : {}\",\n                        (applications.getRegisteredApplications().size() == 0));",
      "right" : "logger.info(\"Registered Applications size is zero : {}\",\n                        (applications.getRegisteredApplications().size() == 0));",
      "info" : "ExpressionStatement[34920-35057]:ExpressionStatement[34920-35057]"
    }, {
      "left" : "logger.info(\"Application version is -1: {}\", (applications.getVersion() == -1));",
      "right" : "logger.info(\"Application version is -1: {}\", (applications.getVersion() == -1));",
      "info" : "ExpressionStatement[35074-35154]:ExpressionStatement[35074-35154]"
    }, {
      "left" : "response = getAndStoreFullRegistry();",
      "right" : "response = getAndStoreFullRegistry();",
      "info" : "ExpressionStatement[35171-35208]:ExpressionStatement[35171-35208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35228-35303]:Block[35228-35303]"
    }, {
      "left" : "response = getAndUpdateDelta(applications);",
      "right" : "response = getAndUpdateDelta(applications);",
      "info" : "ExpressionStatement[35246-35289]:ExpressionStatement[35246-35289]"
    }, {
      "left" : "applications.setAppsHashCode(applications.getReconcileHashCode());",
      "right" : "applications.setAppsHashCode(applications.getReconcileHashCode());",
      "info" : "ExpressionStatement[35316-35382]:ExpressionStatement[35316-35382]"
    }, {
      "left" : "logTotalInstances();",
      "right" : "logTotalInstances();",
      "info" : "ExpressionStatement[35395-35415]:ExpressionStatement[35395-35415]"
    }, {
      "left" : "logger.debug(PREFIX + appPathIdentifier + \" -  refresh status: \"\n                    + response.getStatus());",
      "right" : "logger.debug(PREFIX + appPathIdentifier + \" -  refresh status: \"\n                    + response.getStatus());",
      "info" : "ExpressionStatement[35429-35538]:ExpressionStatement[35429-35538]"
    }, {
      "left" : "onCacheRefreshed();",
      "right" : "onCacheRefreshed();",
      "info" : "ExpressionStatement[35639-35658]:ExpressionStatement[35639-35658]"
    }, {
      "left" : "updateInstanceRemoteStatus();",
      "right" : "updateInstanceRemoteStatus();",
      "info" : "ExpressionStatement[35762-35791]:ExpressionStatement[35762-35791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[35823-36061]:Block[35823-36061]"
    }, {
      "left" : "logger.error(\n                    PREFIX + appPathIdentifier\n                            + \" - was unable to refresh its cache! status = \"\n                            + e.getMessage(), e);",
      "right" : "logger.error(\n                    PREFIX + appPathIdentifier\n                            + \" - was unable to refresh its cache! status = \"\n                            + e.getMessage(), e);",
      "info" : "ExpressionStatement[35837-36025]:ExpressionStatement[35837-36025]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[36038-36051]:ReturnStatement[36038-36051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36070-36197]:Block[36070-36197]"
    }, {
      "left" : "if (tracer != null)",
      "right" : "if (tracer != null)",
      "info" : "IfStatement[36084-36150]:IfStatement[36084-36150]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36104-36150]:Block[36104-36150]"
    }, {
      "left" : "tracer.stop();",
      "right" : "tracer.stop();",
      "info" : "ExpressionStatement[36122-36136]:ExpressionStatement[36122-36136]"
    }, {
      "left" : "closeResponse(response);",
      "right" : "closeResponse(response);",
      "info" : "ExpressionStatement[36163-36187]:ExpressionStatement[36163-36187]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[36206-36218]:ReturnStatement[36206-36218]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36285-37283]:Block[36285-37283]"
    }, {
      "left" : "InstanceInfo.InstanceStatus currentRemoteInstanceStatus = null;",
      "right" : "InstanceInfo.InstanceStatus currentRemoteInstanceStatus = null;",
      "info" : "VariableDeclarationStatement[36384-36447]:VariableDeclarationStatement[36384-36447]"
    }, {
      "left" : "if (instanceInfo.getAppName() != null)",
      "right" : "if (instanceInfo.getAppName() != null)",
      "info" : "IfStatement[36456-36867]:IfStatement[36456-36867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36495-36867]:Block[36495-36867]"
    }, {
      "left" : "Application app = getApplication(instanceInfo.getAppName());",
      "right" : "Application app = getApplication(instanceInfo.getAppName());",
      "info" : "VariableDeclarationStatement[36509-36569]:VariableDeclarationStatement[36509-36569]"
    }, {
      "left" : "if (app != null)",
      "right" : "if (app != null)",
      "info" : "IfStatement[36582-36857]:IfStatement[36582-36857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36599-36857]:Block[36599-36857]"
    }, {
      "left" : "InstanceInfo remoteInstanceInfo = app.getByInstanceId(instanceInfo.getId());",
      "right" : "InstanceInfo remoteInstanceInfo = app.getByInstanceId(instanceInfo.getId());",
      "info" : "VariableDeclarationStatement[36617-36693]:VariableDeclarationStatement[36617-36693]"
    }, {
      "left" : "if (remoteInstanceInfo != null)",
      "right" : "if (remoteInstanceInfo != null)",
      "info" : "IfStatement[36710-36843]:IfStatement[36710-36843]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36742-36843]:Block[36742-36843]"
    }, {
      "left" : "currentRemoteInstanceStatus = remoteInstanceInfo.getStatus();",
      "right" : "currentRemoteInstanceStatus = remoteInstanceInfo.getStatus();",
      "info" : "ExpressionStatement[36764-36825]:ExpressionStatement[36764-36825]"
    }, {
      "left" : "if (currentRemoteInstanceStatus == null)",
      "right" : "if (currentRemoteInstanceStatus == null)",
      "info" : "IfStatement[36876-37007]:IfStatement[36876-37007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[36917-37007]:Block[36917-37007]"
    }, {
      "left" : "currentRemoteInstanceStatus = InstanceInfo.InstanceStatus.UNKNOWN;",
      "right" : "currentRemoteInstanceStatus = InstanceInfo.InstanceStatus.UNKNOWN;",
      "info" : "ExpressionStatement[36931-36997]:ExpressionStatement[36931-36997]"
    }, {
      "left" : "if (lastRemoteInstanceStatus != currentRemoteInstanceStatus)",
      "right" : "if (lastRemoteInstanceStatus != currentRemoteInstanceStatus)",
      "info" : "IfStatement[37053-37277]:IfStatement[37053-37277]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37114-37277]:Block[37114-37277]"
    }, {
      "left" : "onRemoteStatusChanged(lastRemoteInstanceStatus, currentRemoteInstanceStatus);",
      "right" : "onRemoteStatusChanged(lastRemoteInstanceStatus, currentRemoteInstanceStatus);",
      "info" : "ExpressionStatement[37125-37202]:ExpressionStatement[37125-37202]"
    }, {
      "left" : "lastRemoteInstanceStatus = currentRemoteInstanceStatus;",
      "right" : "lastRemoteInstanceStatus = currentRemoteInstanceStatus;",
      "info" : "ExpressionStatement[37212-37267]:ExpressionStatement[37212-37267]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37459-37507]:Block[37459-37507]"
    }, {
      "left" : "return lastRemoteInstanceStatus;",
      "right" : "return lastRemoteInstanceStatus;",
      "info" : "ReturnStatement[37469-37501]:ReturnStatement[37469-37501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37576-38029]:Block[37576-38029]"
    }, {
      "left" : "TreeMap<String, AtomicInteger> instanceCountMap = new TreeMap<String, AtomicInteger>();",
      "right" : "TreeMap<String, AtomicInteger> instanceCountMap = new TreeMap<String, AtomicInteger>();",
      "info" : "VariableDeclarationStatement[37586-37673]:VariableDeclarationStatement[37586-37673]"
    }, {
      "left" : "if (isFetchingRemoteRegionRegistries())",
      "right" : "if (isFetchingRemoteRegionRegistries())",
      "info" : "IfStatement[37682-37890]:IfStatement[37682-37890]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37722-37890]:Block[37722-37890]"
    }, {
      "left" : "for (Applications remoteApp : remoteRegionVsApps.values())",
      "right" : "for (Applications remoteApp : remoteRegionVsApps.values())",
      "info" : "EnhancedForStatement[37736-37880]:EnhancedForStatement[37736-37880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[37795-37880]:Block[37795-37880]"
    }, {
      "left" : "remoteApp.populateInstanceCountMap(instanceCountMap);",
      "right" : "remoteApp.populateInstanceCountMap(instanceCountMap);",
      "info" : "ExpressionStatement[37813-37866]:ExpressionStatement[37813-37866]"
    }, {
      "left" : "applications.populateInstanceCountMap(instanceCountMap);",
      "right" : "applications.populateInstanceCountMap(instanceCountMap);",
      "info" : "ExpressionStatement[37899-37955]:ExpressionStatement[37899-37955]"
    }, {
      "left" : "return Applications.getReconcileHashCode(instanceCountMap);",
      "right" : "return Applications.getReconcileHashCode(instanceCountMap);",
      "info" : "ReturnStatement[37964-38023]:ReturnStatement[37964-38023]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38530-39447]:Block[38530-39447]"
    }, {
      "left" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
      "right" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
      "info" : "VariableDeclarationStatement[38540-38601]:VariableDeclarationStatement[38540-38601]"
    }, {
      "left" : "ClientResponse response = makeRemoteCall(Action.Refresh);",
      "right" : "ClientResponse response = makeRemoteCall(Action.Refresh);",
      "info" : "VariableDeclarationStatement[38610-38667]:VariableDeclarationStatement[38610-38667]"
    }, {
      "left" : "logger.info(\"Getting all instance registry info from the eureka server\");",
      "right" : "logger.info(\"Getting all instance registry info from the eureka server\");",
      "info" : "ExpressionStatement[38676-38749]:ExpressionStatement[38676-38749]"
    }, {
      "left" : "Applications apps = null;",
      "right" : "Applications apps = null;",
      "info" : "VariableDeclarationStatement[38759-38784]:VariableDeclarationStatement[38759-38784]"
    }, {
      "left" : "if (response.getStatus() == Status.OK.getStatusCode())",
      "right" : "if (response.getStatus() == Status.OK.getStatusCode())",
      "info" : "IfStatement[38793-38918]:IfStatement[38793-38918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38848-38918]:Block[38848-38918]"
    }, {
      "left" : "apps = response.getEntity(Applications.class);",
      "right" : "apps = response.getEntity(Applications.class);",
      "info" : "ExpressionStatement[38862-38908]:ExpressionStatement[38862-38908]"
    }, {
      "left" : "if (apps == null)",
      "right" : "if (apps == null)",
      "info" : "IfStatement[38928-39344]:IfStatement[38928-39344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[38946-39056]:Block[38946-39056]"
    }, {
      "left" : "logger.error(\"The application is null for some reason. Not storing this information\");",
      "right" : "logger.error(\"The application is null for some reason. Not storing this information\");",
      "info" : "ExpressionStatement[38960-39046]:ExpressionStatement[38960-39046]"
    }, {
      "left" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
      "right" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
      "info" : "IfStatement[39062-39344]:IfStatement[39062-39344]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39159-39232]:Block[39159-39232]"
    }, {
      "left" : "localRegionApps.set(this.filterAndShuffle(apps));",
      "right" : "localRegionApps.set(this.filterAndShuffle(apps));",
      "info" : "ExpressionStatement[39173-39222]:ExpressionStatement[39173-39222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[39238-39344]:Block[39238-39344]"
    }, {
      "left" : "logger.warn(\"Not updating applications as another thread is updating it already\");",
      "right" : "logger.warn(\"Not updating applications as another thread is updating it already\");",
      "info" : "ExpressionStatement[39252-39334]:ExpressionStatement[39252-39334]"
    }, {
      "left" : "logger.info(\"The response status is {}\", response.getStatus());",
      "right" : "logger.info(\"The response status is {}\", response.getStatus());",
      "info" : "ExpressionStatement[39353-39416]:ExpressionStatement[39353-39416]"
    }, {
      "left" : "return response;",
      "right" : "return response;",
      "info" : "ReturnStatement[39425-39441]:ReturnStatement[39425-39441]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40056-41749]:Block[40056-41749]"
    }, {
      "left" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
      "right" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
      "info" : "VariableDeclarationStatement[40066-40127]:VariableDeclarationStatement[40066-40127]"
    }, {
      "left" : "ClientResponse response = makeRemoteCall(Action.Refresh_Delta);",
      "right" : "ClientResponse response = makeRemoteCall(Action.Refresh_Delta);",
      "info" : "VariableDeclarationStatement[40136-40199]:VariableDeclarationStatement[40136-40199]"
    }, {
      "left" : "Applications delta = null;",
      "right" : "Applications delta = null;",
      "info" : "VariableDeclarationStatement[40209-40235]:VariableDeclarationStatement[40209-40235]"
    }, {
      "left" : "if (response.getStatus() == Status.OK.getStatusCode())",
      "right" : "if (response.getStatus() == Status.OK.getStatusCode())",
      "info" : "IfStatement[40244-40370]:IfStatement[40244-40370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40299-40370]:Block[40299-40370]"
    }, {
      "left" : "delta = response.getEntity(Applications.class);",
      "right" : "delta = response.getEntity(Applications.class);",
      "info" : "ExpressionStatement[40313-40360]:ExpressionStatement[40313-40360]"
    }, {
      "left" : "if (delta == null)",
      "right" : "if (delta == null)",
      "info" : "IfStatement[40379-41717]:IfStatement[40379-41717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40398-40666]:Block[40398-40666]"
    }, {
      "left" : "logger.warn(\"The server does not allow the delta revision to be applied because it is not safe. \"\n                    + \"Hence got the full registry.\");",
      "right" : "logger.warn(\"The server does not allow the delta revision to be applied because it is not safe. \"\n                    + \"Hence got the full registry.\");",
      "info" : "ExpressionStatement[40412-40564]:ExpressionStatement[40412-40564]"
    }, {
      "left" : "this.closeResponse(response);",
      "right" : "this.closeResponse(response);",
      "info" : "ExpressionStatement[40577-40606]:ExpressionStatement[40577-40606]"
    }, {
      "left" : "response = getAndStoreFullRegistry();",
      "right" : "response = getAndStoreFullRegistry();",
      "info" : "ExpressionStatement[40619-40656]:ExpressionStatement[40619-40656]"
    }, {
      "left" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
      "right" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
      "info" : "IfStatement[40672-41717]:IfStatement[40672-41717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40769-41600]:Block[40769-41600]"
    }, {
      "left" : "String reconcileHashCode = \"\";",
      "right" : "String reconcileHashCode = \"\";",
      "info" : "VariableDeclarationStatement[40783-40813]:VariableDeclarationStatement[40783-40813]"
    }, {
      "left" : "if (fetchRegistryUpdateLock.tryLock())",
      "right" : "if (fetchRegistryUpdateLock.tryLock())",
      "info" : "IfStatement[40826-41259]:IfStatement[40826-41259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40865-41118]:Block[40865-41118]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[40883-41104]:TryStatement[40883-41104]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[40887-41022]:Block[40887-41022]"
    }, {
      "left" : "updateDelta(delta);",
      "right" : "updateDelta(delta);",
      "info" : "ExpressionStatement[40909-40928]:ExpressionStatement[40909-40928]"
    }, {
      "left" : "reconcileHashCode = getReconcileHashCode(applications);",
      "right" : "reconcileHashCode = getReconcileHashCode(applications);",
      "info" : "ExpressionStatement[40949-41004]:ExpressionStatement[40949-41004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41031-41104]:Block[41031-41104]"
    }, {
      "left" : "fetchRegistryUpdateLock.unlock();",
      "right" : "fetchRegistryUpdateLock.unlock();",
      "info" : "ExpressionStatement[41053-41086]:ExpressionStatement[41053-41086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41124-41259]:Block[41124-41259]"
    }, {
      "left" : "logger.warn(\"Cannot acquire update lock, aborting getAndUpdateDelta\");",
      "right" : "logger.warn(\"Cannot acquire update lock, aborting getAndUpdateDelta\");",
      "info" : "ExpressionStatement[41142-41212]:ExpressionStatement[41142-41212]"
    }, {
      "left" : "return response;",
      "right" : "return response;",
      "info" : "ReturnStatement[41229-41245]:ReturnStatement[41229-41245]"
    }, {
      "left" : "if ((!reconcileHashCode.equals(delta.getAppsHashCode()))\n                    || clientConfig.shouldLogDeltaDiff())",
      "right" : "if ((!reconcileHashCode.equals(delta.getAppsHashCode()))\n                    || clientConfig.shouldLogDeltaDiff())",
      "info" : "IfStatement[41342-41590]:IfStatement[41342-41590]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41457-41590]:Block[41457-41590]"
    }, {
      "left" : "response = reconcileAndLogDifference(response, delta, reconcileHashCode);",
      "right" : "response = reconcileAndLogDifference(response, delta, reconcileHashCode);",
      "info" : "ExpressionStatement[41475-41548]:ExpressionStatement[41475-41548]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41606-41717]:Block[41606-41717]"
    }, {
      "left" : "logger.warn(\"Not updating application delta as another thread is updating it already\");",
      "right" : "logger.warn(\"Not updating application delta as another thread is updating it already\");",
      "info" : "ExpressionStatement[41620-41707]:ExpressionStatement[41620-41707]"
    }, {
      "left" : "return response;",
      "right" : "return response;",
      "info" : "ReturnStatement[41727-41743]:ReturnStatement[41727-41743]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41875-42184]:Block[41875-42184]"
    }, {
      "left" : "int totInstances = 0;",
      "right" : "int totInstances = 0;",
      "info" : "VariableDeclarationStatement[41885-41906]:VariableDeclarationStatement[41885-41906]"
    }, {
      "left" : "for (Application application : getApplications().getRegisteredApplications())",
      "right" : "for (Application application : getApplications().getRegisteredApplications())",
      "info" : "EnhancedForStatement[41915-42081]:EnhancedForStatement[41915-42081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[41993-42081]:Block[41993-42081]"
    }, {
      "left" : "totInstances += application.getInstancesAsIsFromEureka().size();",
      "right" : "totInstances += application.getInstancesAsIsFromEureka().size();",
      "info" : "ExpressionStatement[42007-42071]:ExpressionStatement[42007-42071]"
    }, {
      "left" : "logger.debug(\"The total number of all instances in the client now is {}\", totInstances);",
      "right" : "logger.debug(\"The total number of all instances in the client now is {}\", totInstances);",
      "info" : "ExpressionStatement[42090-42178]:ExpressionStatement[42090-42178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43243-45056]:Block[43243-45056]"
    }, {
      "left" : "logger.warn(\n                \"The Reconcile hashcodes do not match, client : {}, server : {}. Getting the full registry\",\n                reconcileHashCode, delta.getAppsHashCode());",
      "right" : "logger.warn(\n                \"The Reconcile hashcodes do not match, client : {}, server : {}. Getting the full registry\",\n                reconcileHashCode, delta.getAppsHashCode());",
      "info" : "ExpressionStatement[43253-43435]:ExpressionStatement[43253-43435]"
    }, {
      "left" : "this.closeResponse(response);",
      "right" : "this.closeResponse(response);",
      "info" : "ExpressionStatement[43445-43474]:ExpressionStatement[43445-43474]"
    }, {
      "left" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
      "right" : "long currentUpdateGeneration = fetchRegistryGeneration.get();",
      "info" : "VariableDeclarationStatement[43484-43545]:VariableDeclarationStatement[43484-43545]"
    }, {
      "left" : "response = makeRemoteCall(Action.Refresh);",
      "right" : "response = makeRemoteCall(Action.Refresh);",
      "info" : "ExpressionStatement[43554-43596]:ExpressionStatement[43554-43596]"
    }, {
      "left" : "Applications serverApps = response.getEntity(Applications.class);",
      "right" : "Applications serverApps = response.getEntity(Applications.class);",
      "info" : "VariableDeclarationStatement[43605-43670]:VariableDeclarationStatement[43605-43670]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[43680-44415]:TryStatement[43680-44415]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43684-44313]:Block[43684-44313]"
    }, {
      "left" : "Map<String, List<String>> reconcileDiffMap = getApplications().getReconcileMapDiff(serverApps);",
      "right" : "Map<String, List<String>> reconcileDiffMap = getApplications().getReconcileMapDiff(serverApps);",
      "info" : "VariableDeclarationStatement[43698-43793]:VariableDeclarationStatement[43698-43793]"
    }, {
      "left" : "String reconcileString = \"\";",
      "right" : "String reconcileString = \"\";",
      "info" : "VariableDeclarationStatement[43806-43834]:VariableDeclarationStatement[43806-43834]"
    }, {
      "left" : "for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap.entrySet())",
      "right" : "for (Map.Entry<String, List<String>> mapEntry : reconcileDiffMap.entrySet())",
      "info" : "EnhancedForStatement[43847-44231]:EnhancedForStatement[43847-44231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[43924-44231]:Block[43924-44231]"
    }, {
      "left" : "reconcileString = reconcileString + mapEntry.getKey() + \": \";",
      "right" : "reconcileString = reconcileString + mapEntry.getKey() + \": \";",
      "info" : "ExpressionStatement[43942-44003]:ExpressionStatement[43942-44003]"
    }, {
      "left" : "for (String displayString : mapEntry.getValue())",
      "right" : "for (String displayString : mapEntry.getValue())",
      "info" : "EnhancedForStatement[44020-44159]:EnhancedForStatement[44020-44159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44069-44159]:Block[44069-44159]"
    }, {
      "left" : "reconcileString = reconcileString + displayString;",
      "right" : "reconcileString = reconcileString + displayString;",
      "info" : "ExpressionStatement[44091-44141]:ExpressionStatement[44091-44141]"
    }, {
      "left" : "reconcileString = reconcileString + \"\\n\";",
      "right" : "reconcileString = reconcileString + \"\\n\";",
      "info" : "ExpressionStatement[44176-44217]:ExpressionStatement[44176-44217]"
    }, {
      "left" : "logger.warn(\"The reconcile string is {}\", reconcileString);",
      "right" : "logger.warn(\"The reconcile string is {}\", reconcileString);",
      "info" : "ExpressionStatement[44244-44303]:ExpressionStatement[44244-44303]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44334-44415]:Block[44334-44415]"
    }, {
      "left" : "logger.error(\"Could not calculate reconcile string \", e);",
      "right" : "logger.error(\"Could not calculate reconcile string \", e);",
      "info" : "ExpressionStatement[44348-44405]:ExpressionStatement[44348-44405]"
    }, {
      "left" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
      "right" : "if (fetchRegistryGeneration.compareAndSet(currentUpdateGeneration, currentUpdateGeneration + 1))",
      "info" : "IfStatement[44425-45024]:IfStatement[44425-45024]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44522-44893]:Block[44522-44893]"
    }, {
      "left" : "localRegionApps.set(this.filterAndShuffle(serverApps));",
      "right" : "localRegionApps.set(this.filterAndShuffle(serverApps));",
      "info" : "ExpressionStatement[44536-44591]:ExpressionStatement[44536-44591]"
    }, {
      "left" : "getApplications().setVersion(delta.getVersion());",
      "right" : "getApplications().setVersion(delta.getVersion());",
      "info" : "ExpressionStatement[44604-44653]:ExpressionStatement[44604-44653]"
    }, {
      "left" : "logger.warn(\n                    \"The Reconcile hashcodes after complete sync up, client : {}, server : {}.\",\n                    getApplications().getReconcileHashCode(),\n                    delta.getAppsHashCode());",
      "right" : "logger.warn(\n                    \"The Reconcile hashcodes after complete sync up, client : {}, server : {}.\",\n                    getApplications().getReconcileHashCode(),\n                    delta.getAppsHashCode());",
      "info" : "ExpressionStatement[44666-44883]:ExpressionStatement[44666-44883]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[44899-45024]:Block[44899-45024]"
    }, {
      "left" : "logger.warn(\"Not setting the applications map as another thread has advanced the update generation\");",
      "right" : "logger.warn(\"Not setting the applications map as another thread has advanced the update generation\");",
      "info" : "ExpressionStatement[44913-45014]:ExpressionStatement[44913-45014]"
    }, {
      "left" : "return response;",
      "right" : "return response;",
      "info" : "ReturnStatement[45034-45050]:ReturnStatement[45034-45050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45357-48530]:Block[45357-48530]"
    }, {
      "left" : "int deltaCount = 0;",
      "right" : "int deltaCount = 0;",
      "info" : "VariableDeclarationStatement[45367-45386]:VariableDeclarationStatement[45367-45386]"
    }, {
      "left" : "for (Application app : delta.getRegisteredApplications())",
      "right" : "for (Application app : delta.getRegisteredApplications())",
      "info" : "EnhancedForStatement[45395-48014]:EnhancedForStatement[45395-48014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45453-48014]:Block[45453-48014]"
    }, {
      "left" : "for (InstanceInfo instance : app.getInstances())",
      "right" : "for (InstanceInfo instance : app.getInstances())",
      "info" : "EnhancedForStatement[45467-48004]:EnhancedForStatement[45467-48004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45516-48004]:Block[45516-48004]"
    }, {
      "left" : "Applications applications = getApplications();",
      "right" : "Applications applications = getApplications();",
      "info" : "VariableDeclarationStatement[45534-45580]:VariableDeclarationStatement[45534-45580]"
    }, {
      "left" : "String instanceRegion = instanceRegionChecker.getInstanceRegion(instance);",
      "right" : "String instanceRegion = instanceRegionChecker.getInstanceRegion(instance);",
      "info" : "VariableDeclarationStatement[45597-45671]:VariableDeclarationStatement[45597-45671]"
    }, {
      "left" : "if (!instanceRegionChecker.isLocalRegion(instanceRegion))",
      "right" : "if (!instanceRegionChecker.isLocalRegion(instanceRegion))",
      "info" : "IfStatement[45688-46099]:IfStatement[45688-46099]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45746-46099]:Block[45746-46099]"
    }, {
      "left" : "Applications remoteApps = remoteRegionVsApps.get(instanceRegion);",
      "right" : "Applications remoteApps = remoteRegionVsApps.get(instanceRegion);",
      "info" : "VariableDeclarationStatement[45768-45833]:VariableDeclarationStatement[45768-45833]"
    }, {
      "left" : "if (null == remoteApps)",
      "right" : "if (null == remoteApps)",
      "info" : "IfStatement[45854-46034]:IfStatement[45854-46034]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[45878-46034]:Block[45878-46034]"
    }, {
      "left" : "remoteApps = new Applications();",
      "right" : "remoteApps = new Applications();",
      "info" : "ExpressionStatement[45904-45936]:ExpressionStatement[45904-45936]"
    }, {
      "left" : "remoteRegionVsApps.put(instanceRegion, remoteApps);",
      "right" : "remoteRegionVsApps.put(instanceRegion, remoteApps);",
      "info" : "ExpressionStatement[45961-46012]:ExpressionStatement[45961-46012]"
    }, {
      "left" : "applications = remoteApps;",
      "right" : "applications = remoteApps;",
      "info" : "ExpressionStatement[46055-46081]:ExpressionStatement[46055-46081]"
    }, {
      "left" : "++deltaCount;",
      "right" : "++deltaCount;",
      "info" : "ExpressionStatement[46117-46130]:ExpressionStatement[46117-46130]"
    }, {
      "left" : "if (ActionType.ADDED.equals(instance.getActionType()))",
      "right" : "if (ActionType.ADDED.equals(instance.getActionType()))",
      "info" : "IfStatement[46147-47990]:IfStatement[46147-47990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46202-46771]:Block[46202-46771]"
    }, {
      "left" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
      "right" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
      "info" : "VariableDeclarationStatement[46224-46341]:VariableDeclarationStatement[46224-46341]"
    }, {
      "left" : "if (existingApp == null)",
      "right" : "if (existingApp == null)",
      "info" : "IfStatement[46362-46468]:IfStatement[46362-46468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46387-46468]:Block[46387-46468]"
    }, {
      "left" : "applications.addApplication(app);",
      "right" : "applications.addApplication(app);",
      "info" : "ExpressionStatement[46413-46446]:ExpressionStatement[46413-46446]"
    }, {
      "left" : "logger.debug(\"Added instance {} to the existing apps in region {}\",\n                            instance.getId(), instanceRegion);",
      "right" : "logger.debug(\"Added instance {} to the existing apps in region {}\",\n                            instance.getId(), instanceRegion);",
      "info" : "ExpressionStatement[46489-46619]:ExpressionStatement[46489-46619]"
    }, {
      "left" : "applications.getRegisteredApplications(\n                            instance.getAppName()).addInstance(instance);",
      "right" : "applications.getRegisteredApplications(\n                            instance.getAppName()).addInstance(instance);",
      "info" : "ExpressionStatement[46640-46753]:ExpressionStatement[46640-46753]"
    }, {
      "left" : "if (ActionType.MODIFIED.equals(instance.getActionType()))",
      "right" : "if (ActionType.MODIFIED.equals(instance.getActionType()))",
      "info" : "IfStatement[46777-47990]:IfStatement[46777-47990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[46835-47381]:Block[46835-47381]"
    }, {
      "left" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
      "right" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
      "info" : "VariableDeclarationStatement[46857-46974]:VariableDeclarationStatement[46857-46974]"
    }, {
      "left" : "if (existingApp == null)",
      "right" : "if (existingApp == null)",
      "info" : "IfStatement[46995-47101]:IfStatement[46995-47101]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47020-47101]:Block[47020-47101]"
    }, {
      "left" : "applications.addApplication(app);",
      "right" : "applications.addApplication(app);",
      "info" : "ExpressionStatement[47046-47079]:ExpressionStatement[47046-47079]"
    }, {
      "left" : "logger.debug(\"Modified instance {} to the existing apps \",\n                            instance.getId());",
      "right" : "logger.debug(\"Modified instance {} to the existing apps \",\n                            instance.getId());",
      "info" : "ExpressionStatement[47122-47227]:ExpressionStatement[47122-47227]"
    }, {
      "left" : "applications.getRegisteredApplications(\n                            instance.getAppName()).addInstance(instance);",
      "right" : "applications.getRegisteredApplications(\n                            instance.getAppName()).addInstance(instance);",
      "info" : "ExpressionStatement[47249-47362]:ExpressionStatement[47249-47362]"
    }, {
      "left" : "if (ActionType.DELETED.equals(instance.getActionType()))",
      "right" : "if (ActionType.DELETED.equals(instance.getActionType()))",
      "info" : "IfStatement[47387-47990]:IfStatement[47387-47990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47444-47990]:Block[47444-47990]"
    }, {
      "left" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
      "right" : "Application existingApp = applications\n                            .getRegisteredApplications(instance.getAppName());",
      "info" : "VariableDeclarationStatement[47466-47583]:VariableDeclarationStatement[47466-47583]"
    }, {
      "left" : "if (existingApp == null)",
      "right" : "if (existingApp == null)",
      "info" : "IfStatement[47604-47710]:IfStatement[47604-47710]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[47629-47710]:Block[47629-47710]"
    }, {
      "left" : "applications.addApplication(app);",
      "right" : "applications.addApplication(app);",
      "info" : "ExpressionStatement[47655-47688]:ExpressionStatement[47655-47688]"
    }, {
      "left" : "logger.debug(\"Deleted instance {} to the existing apps \",\n                            instance.getId());",
      "right" : "logger.debug(\"Deleted instance {} to the existing apps \",\n                            instance.getId());",
      "info" : "ExpressionStatement[47731-47835]:ExpressionStatement[47731-47835]"
    }, {
      "left" : "applications.getRegisteredApplications(\n                            instance.getAppName()).removeInstance(instance);",
      "right" : "applications.getRegisteredApplications(\n                            instance.getAppName()).removeInstance(instance);",
      "info" : "ExpressionStatement[47856-47972]:ExpressionStatement[47856-47972]"
    }, {
      "left" : "logger.debug(\n                \"The total number of instances fetched by the delta processor : {}\",\n                deltaCount);",
      "right" : "logger.debug(\n                \"The total number of instances fetched by the delta processor : {}\",\n                deltaCount);",
      "info" : "ExpressionStatement[48023-48150]:ExpressionStatement[48023-48150]"
    }, {
      "left" : "getApplications().setVersion(delta.getVersion());",
      "right" : "getApplications().setVersion(delta.getVersion());",
      "info" : "ExpressionStatement[48160-48209]:ExpressionStatement[48160-48209]"
    }, {
      "left" : "getApplications().shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
      "right" : "getApplications().shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
      "info" : "ExpressionStatement[48218-48297]:ExpressionStatement[48218-48297]"
    }, {
      "left" : "for (Applications applications : remoteRegionVsApps.values())",
      "right" : "for (Applications applications : remoteRegionVsApps.values())",
      "info" : "EnhancedForStatement[48307-48524]:EnhancedForStatement[48307-48524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48369-48524]:Block[48369-48524]"
    }, {
      "left" : "applications.setVersion(delta.getVersion());",
      "right" : "applications.setVersion(delta.getVersion());",
      "info" : "ExpressionStatement[48383-48427]:ExpressionStatement[48383-48427]"
    }, {
      "left" : "applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
      "right" : "applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
      "info" : "ExpressionStatement[48440-48514]:ExpressionStatement[48440-48514]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48904-49296]:Block[48904-49296]"
    }, {
      "left" : "ClientResponse response;",
      "right" : "ClientResponse response;",
      "info" : "VariableDeclarationStatement[48914-48938]:VariableDeclarationStatement[48914-48938]"
    }, {
      "left" : "if (isQueryAction(action))",
      "right" : "if (isQueryAction(action))",
      "info" : "IfStatement[48947-49173]:IfStatement[48947-49173]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[48974-49069]:Block[48974-49069]"
    }, {
      "left" : "response = makeRemoteCallToRedirectedServer(lastQueryRedirect, action);",
      "right" : "response = makeRemoteCallToRedirectedServer(lastQueryRedirect, action);",
      "info" : "ExpressionStatement[48988-49059]:ExpressionStatement[48988-49059]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49075-49173]:Block[49075-49173]"
    }, {
      "left" : "response = makeRemoteCallToRedirectedServer(lastRegisterRedirect, action);",
      "right" : "response = makeRemoteCallToRedirectedServer(lastRegisterRedirect, action);",
      "info" : "ExpressionStatement[49089-49163]:ExpressionStatement[49089-49163]"
    }, {
      "left" : "if (response == null)",
      "right" : "if (response == null)",
      "info" : "IfStatement[49182-49265]:IfStatement[49182-49265]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49204-49265]:Block[49204-49265]"
    }, {
      "left" : "response = makeRemoteCall(action, 0);",
      "right" : "response = makeRemoteCall(action, 0);",
      "info" : "ExpressionStatement[49218-49255]:ExpressionStatement[49218-49255]"
    }, {
      "left" : "return response;",
      "right" : "return response;",
      "info" : "ReturnStatement[49274-49290]:ReturnStatement[49274-49290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49411-50228]:Block[49411-50228]"
    }, {
      "left" : "String lastRedirectUrl = lastRedirect.get();",
      "right" : "String lastRedirectUrl = lastRedirect.get();",
      "info" : "VariableDeclarationStatement[49421-49465]:VariableDeclarationStatement[49421-49465]"
    }, {
      "left" : "if (lastRedirectUrl != null)",
      "right" : "if (lastRedirectUrl != null)",
      "info" : "IfStatement[49474-50201]:IfStatement[49474-50201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49503-50201]:Block[49503-50201]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[49517-50191]:TryStatement[49517-50191]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49521-49913]:Block[49521-49913]"
    }, {
      "left" : "ClientResponse clientResponse = makeRemoteCall(action, lastRedirectUrl);",
      "right" : "ClientResponse clientResponse = makeRemoteCall(action, lastRedirectUrl);",
      "info" : "VariableDeclarationStatement[49539-49611]:VariableDeclarationStatement[49539-49611]"
    }, {
      "left" : "int status = clientResponse.getStatus();",
      "right" : "int status = clientResponse.getStatus();",
      "info" : "VariableDeclarationStatement[49628-49668]:VariableDeclarationStatement[49628-49668]"
    }, {
      "left" : "if (status >= 200 && status < 300)",
      "right" : "if (status >= 200 && status < 300)",
      "info" : "IfStatement[49685-49782]:IfStatement[49685-49782]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49720-49782]:Block[49720-49782]"
    }, {
      "left" : "return clientResponse;",
      "right" : "return clientResponse;",
      "info" : "ReturnStatement[49742-49764]:ReturnStatement[49742-49764]"
    }, {
      "left" : "SERVER_RETRY_COUNTER.increment();",
      "right" : "SERVER_RETRY_COUNTER.increment();",
      "info" : "ExpressionStatement[49799-49832]:ExpressionStatement[49799-49832]"
    }, {
      "left" : "lastRedirect.compareAndSet(lastRedirectUrl, null);",
      "right" : "lastRedirect.compareAndSet(lastRedirectUrl, null);",
      "info" : "ExpressionStatement[49849-49899]:ExpressionStatement[49849-49899]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[49940-50191]:Block[49940-50191]"
    }, {
      "left" : "logger.warn(\"Remote call to last redirect address failed; retrying from configured service URL list\");",
      "right" : "logger.warn(\"Remote call to last redirect address failed; retrying from configured service URL list\");",
      "info" : "ExpressionStatement[49958-50060]:ExpressionStatement[49958-50060]"
    }, {
      "left" : "SERVER_RETRY_COUNTER.increment();",
      "right" : "SERVER_RETRY_COUNTER.increment();",
      "info" : "ExpressionStatement[50077-50110]:ExpressionStatement[50077-50110]"
    }, {
      "left" : "lastRedirect.compareAndSet(lastRedirectUrl, null);",
      "right" : "lastRedirect.compareAndSet(lastRedirectUrl, null);",
      "info" : "ExpressionStatement[50127-50177]:ExpressionStatement[50127-50177]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[50210-50222]:ReturnStatement[50210-50222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50286-50368]:Block[50286-50368]"
    }, {
      "left" : "return action == Action.Refresh || action == Action.Refresh_Delta;",
      "right" : "return action == Action.Refresh || action == Action.Refresh_Delta;",
      "info" : "ReturnStatement[50296-50362]:ReturnStatement[50296-50362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50892-51621]:Block[50892-51621]"
    }, {
      "left" : "String serviceUrl;",
      "right" : "String serviceUrl;",
      "info" : "VariableDeclarationStatement[50902-50920]:VariableDeclarationStatement[50902-50920]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[50929-51615]:TryStatement[50929-51615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[50933-51088]:Block[50933-51088]"
    }, {
      "left" : "serviceUrl = eurekaServiceUrls.get().get(serviceUrlIndex);",
      "right" : "serviceUrl = eurekaServiceUrls.get().get(serviceUrlIndex);",
      "info" : "ExpressionStatement[50947-51005]:ExpressionStatement[50947-51005]"
    }, {
      "left" : "return makeRemoteCallWithFollowRedirect(action, serviceUrl);",
      "right" : "return makeRemoteCallWithFollowRedirect(action, serviceUrl);",
      "info" : "ReturnStatement[51018-51078]:ReturnStatement[51018-51078]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51109-51615]:Block[51109-51615]"
    }, {
      "left" : "if (eurekaServiceUrls.get().size() > ++serviceUrlIndex)",
      "right" : "if (eurekaServiceUrls.get().size() > ++serviceUrlIndex)",
      "info" : "IfStatement[51123-51605]:IfStatement[51123-51605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51179-51403]:Block[51179-51403]"
    }, {
      "left" : "logger.warn(\"Trying backup: \" + eurekaServiceUrls.get().get(serviceUrlIndex));",
      "right" : "logger.warn(\"Trying backup: \" + eurekaServiceUrls.get().get(serviceUrlIndex));",
      "info" : "ExpressionStatement[51197-51275]:ExpressionStatement[51197-51275]"
    }, {
      "left" : "SERVER_RETRY_COUNTER.increment();",
      "right" : "SERVER_RETRY_COUNTER.increment();",
      "info" : "ExpressionStatement[51292-51325]:ExpressionStatement[51292-51325]"
    }, {
      "left" : "return makeRemoteCall(action, serviceUrlIndex);",
      "right" : "return makeRemoteCall(action, serviceUrlIndex);",
      "info" : "ReturnStatement[51342-51389]:ReturnStatement[51342-51389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51409-51605]:Block[51409-51605]"
    }, {
      "left" : "ALL_SERVER_FAILURE_COUNT.increment();",
      "right" : "ALL_SERVER_FAILURE_COUNT.increment();",
      "info" : "ExpressionStatement[51427-51464]:ExpressionStatement[51427-51464]"
    }, {
      "left" : "logger.error(\"Can't contact any eureka nodes - possibly a security group issue?\", t);",
      "right" : "logger.error(\"Can't contact any eureka nodes - possibly a security group issue?\", t);",
      "info" : "ExpressionStatement[51481-51566]:ExpressionStatement[51481-51566]"
    }, {
      "left" : "throw t;",
      "right" : "throw t;",
      "info" : "ThrowStatement[51583-51591]:ThrowStatement[51583-51591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51734-52781]:Block[51734-52781]"
    }, {
      "left" : "URI targetUrl = new URI(serviceUrl);",
      "right" : "URI targetUrl = new URI(serviceUrl);",
      "info" : "VariableDeclarationStatement[51744-51780]:VariableDeclarationStatement[51744-51780]"
    }, {
      "left" : "for (int followRedirectCount = 0; followRedirectCount < MAX_FOLLOWED_REDIRECTS; followRedirectCount++)",
      "right" : "for (int followRedirectCount = 0; followRedirectCount < MAX_FOLLOWED_REDIRECTS; followRedirectCount++)",
      "info" : "ForStatement[51789-52625]:ForStatement[51789-52625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[51892-52625]:Block[51892-52625]"
    }, {
      "left" : "ClientResponse clientResponse = makeRemoteCall(action, targetUrl.toString());",
      "right" : "ClientResponse clientResponse = makeRemoteCall(action, targetUrl.toString());",
      "info" : "VariableDeclarationStatement[51906-51983]:VariableDeclarationStatement[51906-51983]"
    }, {
      "left" : "if (clientResponse.getStatus() != 302)",
      "right" : "if (clientResponse.getStatus() != 302)",
      "info" : "IfStatement[51996-52395]:IfStatement[51996-52395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52035-52395]:Block[52035-52395]"
    }, {
      "left" : "if (followRedirectCount > 0)",
      "right" : "if (followRedirectCount > 0)",
      "info" : "IfStatement[52053-52342]:IfStatement[52053-52342]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52082-52342]:Block[52082-52342]"
    }, {
      "left" : "if (isQueryAction(action))",
      "right" : "if (isQueryAction(action))",
      "info" : "IfStatement[52104-52324]:IfStatement[52104-52324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52131-52223]:Block[52131-52223]"
    }, {
      "left" : "lastQueryRedirect.set(targetUrl.toString());",
      "right" : "lastQueryRedirect.set(targetUrl.toString());",
      "info" : "ExpressionStatement[52157-52201]:ExpressionStatement[52157-52201]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52229-52324]:Block[52229-52324]"
    }, {
      "left" : "lastRegisterRedirect.set(targetUrl.toString());",
      "right" : "lastRegisterRedirect.set(targetUrl.toString());",
      "info" : "ExpressionStatement[52255-52302]:ExpressionStatement[52255-52302]"
    }, {
      "left" : "return clientResponse;",
      "right" : "return clientResponse;",
      "info" : "ReturnStatement[52359-52381]:ReturnStatement[52359-52381]"
    }, {
      "left" : "targetUrl = getRedirectBaseUri(clientResponse.getLocation());",
      "right" : "targetUrl = getRedirectBaseUri(clientResponse.getLocation());",
      "info" : "ExpressionStatement[52408-52469]:ExpressionStatement[52408-52469]"
    }, {
      "left" : "if (targetUrl == null)",
      "right" : "if (targetUrl == null)",
      "info" : "IfStatement[52482-52615]:IfStatement[52482-52615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52505-52615]:Block[52505-52615]"
    }, {
      "left" : "throw new IOException(\"Invalid redirect URL \" + clientResponse.getLocation());",
      "right" : "throw new IOException(\"Invalid redirect URL \" + clientResponse.getLocation());",
      "info" : "ThrowStatement[52523-52601]:ThrowStatement[52523-52601]"
    }, {
      "left" : "String message = \"Follow redirect limit crossed for URI \" + serviceUrl;",
      "right" : "String message = \"Follow redirect limit crossed for URI \" + serviceUrl;",
      "info" : "VariableDeclarationStatement[52634-52705]:VariableDeclarationStatement[52634-52705]"
    }, {
      "left" : "logger.warn(message);",
      "right" : "logger.warn(message);",
      "info" : "ExpressionStatement[52714-52735]:ExpressionStatement[52714-52735]"
    }, {
      "left" : "throw new IOException(message);",
      "right" : "throw new IOException(message);",
      "info" : "ThrowStatement[52744-52775]:ThrowStatement[52744-52775]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52840-53296]:Block[52840-53296]"
    }, {
      "left" : "Matcher pathMatcher = REDIRECT_PATH_REGEX.matcher(targetUrl.getPath());",
      "right" : "Matcher pathMatcher = REDIRECT_PATH_REGEX.matcher(targetUrl.getPath());",
      "info" : "VariableDeclarationStatement[52850-52921]:VariableDeclarationStatement[52850-52921]"
    }, {
      "left" : "if (pathMatcher.matches())",
      "right" : "if (pathMatcher.matches())",
      "info" : "IfStatement[52930-53210]:IfStatement[52930-53210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[52957-53210]:Block[52957-53210]"
    }, {
      "left" : "return UriBuilder.fromUri(targetUrl)\n                    .host(DnsResolver.resolve(targetUrl.getHost()))\n                    .replacePath(pathMatcher.group(1))\n                    .replaceQuery(null)\n                    .build();",
      "right" : "return UriBuilder.fromUri(targetUrl)\n                    .host(DnsResolver.resolve(targetUrl.getHost()))\n                    .replacePath(pathMatcher.group(1))\n                    .replaceQuery(null)\n                    .build();",
      "info" : "ReturnStatement[52971-53200]:ReturnStatement[52971-53200]"
    }, {
      "left" : "logger.warn(\"Invalid redirect URL {}\", targetUrl);",
      "right" : "logger.warn(\"Invalid redirect URL {}\", targetUrl);",
      "info" : "ExpressionStatement[53219-53269]:ExpressionStatement[53219-53269]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[53278-53290]:ReturnStatement[53278-53290]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53696-58080]:Block[53696-58080]"
    }, {
      "left" : "String urlPath = null;",
      "right" : "String urlPath = null;",
      "info" : "VariableDeclarationStatement[53706-53728]:VariableDeclarationStatement[53706-53728]"
    }, {
      "left" : "Stopwatch tracer = null;",
      "right" : "Stopwatch tracer = null;",
      "info" : "VariableDeclarationStatement[53737-53761]:VariableDeclarationStatement[53737-53761]"
    }, {
      "left" : "ClientResponse response = null;",
      "right" : "ClientResponse response = null;",
      "info" : "VariableDeclarationStatement[53770-53801]:VariableDeclarationStatement[53770-53801]"
    }, {
      "left" : "logger.debug(\"Discovery Client talking to the server {}\", serviceUrl);",
      "right" : "logger.debug(\"Discovery Client talking to the server {}\", serviceUrl);",
      "info" : "ExpressionStatement[53810-53880]:ExpressionStatement[53810-53880]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[53889-58074]:TryStatement[53889-58074]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[53893-57804]:Block[53893-57804]"
    }, {
      "left" : "if ((UNKNOWN.equals(instanceInfo.getAppName())\n                    && (!Action.Refresh.equals(action)) && (!Action.Refresh_Delta\n                    .equals(action))))",
      "right" : "if ((UNKNOWN.equals(instanceInfo.getAppName())\n                    && (!Action.Refresh.equals(action)) && (!Action.Refresh_Delta\n                    .equals(action))))",
      "info" : "IfStatement[54008-54220]:IfStatement[54008-54220]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54176-54220]:Block[54176-54220]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[54194-54206]:ReturnStatement[54194-54206]"
    }, {
      "left" : "WebResource r = discoveryApacheClient.resource(serviceUrl);",
      "right" : "WebResource r = discoveryApacheClient.resource(serviceUrl);",
      "info" : "VariableDeclarationStatement[54233-54292]:VariableDeclarationStatement[54233-54292]"
    }, {
      "left" : "if (clientConfig.allowRedirects())",
      "right" : "if (clientConfig.allowRedirects())",
      "info" : "IfStatement[54305-54422]:IfStatement[54305-54422]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[54340-54422]:Block[54340-54422]"
    }, {
      "left" : "r.header(HTTP_X_DISCOVERY_ALLOW_REDIRECT, \"true\");",
      "right" : "r.header(HTTP_X_DISCOVERY_ALLOW_REDIRECT, \"true\");",
      "info" : "ExpressionStatement[54358-54408]:ExpressionStatement[54358-54408]"
    }, {
      "left" : "String remoteRegionsToFetchStr;",
      "right" : "String remoteRegionsToFetchStr;",
      "info" : "VariableDeclarationStatement[54435-54466]:VariableDeclarationStatement[54435-54466]"
    }, {
      "left" : "switch (action) {\n                case Renew:\n                    tracer = RENEW_TIMER.start();\n                    urlPath = \"apps/\" + appPathIdentifier;\n                    response = r\n                            .path(urlPath)\n                            .queryParam(\"status\",\n                                    instanceInfo.getStatus().toString())\n                            .queryParam(\"lastDirtyTimestamp\",\n                                    instanceInfo.getLastDirtyTimestamp().toString())\n                            .put(ClientResponse.class);\n                    break;\n                case Refresh:\n                    tracer = REFRESH_TIMER.start();\n                    final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();\n                    urlPath = vipAddress == null ? \"apps/\" : \"vips/\" + vipAddress;\n                    remoteRegionsToFetchStr = remoteRegionsToFetch.get();\n                    if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr)) {\n                        urlPath += \"?regions=\" + remoteRegionsToFetchStr;\n                    }\n                    response = getUrl(serviceUrl + urlPath);\n                    break;\n                case Refresh_Delta:\n                    tracer = REFRESH_DELTA_TIMER.start();\n                    urlPath = \"apps/delta\";\n                    remoteRegionsToFetchStr = remoteRegionsToFetch.get();\n                    if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr)) {\n                        urlPath += \"?regions=\" + remoteRegionsToFetchStr;\n                    }\n                    response = getUrl(serviceUrl + urlPath);\n                    break;\n                case Register:\n                    tracer = REGISTER_TIMER.start();\n                    urlPath = \"apps/\" + instanceInfo.getAppName();\n                    response = r.path(urlPath)\n                            .type(MediaType.APPLICATION_JSON_TYPE)\n                            .post(ClientResponse.class, instanceInfo);\n                    break;\n                case Cancel:\n                    tracer = CANCEL_TIMER.start();\n                    urlPath = \"apps/\" + appPathIdentifier;\n                    response = r.path(urlPath).delete(ClientResponse.class);\n                    // Return without during de-registration if it is not registered\n                    // already and if we get a 404\n                    if ((!isRegisteredWithDiscovery)\n                            && (response.getStatus() == Status.NOT_FOUND\n                            .getStatusCode())) {\n                        return response;\n                    }\n                    break;\n            }",
      "right" : "switch (action) {\n                case Renew:\n                    tracer = RENEW_TIMER.start();\n                    urlPath = \"apps/\" + appPathIdentifier;\n                    response = r\n                            .path(urlPath)\n                            .queryParam(\"status\",\n                                    instanceInfo.getStatus().toString())\n                            .queryParam(\"lastDirtyTimestamp\",\n                                    instanceInfo.getLastDirtyTimestamp().toString())\n                            .put(ClientResponse.class);\n                    break;\n                case Refresh:\n                    tracer = REFRESH_TIMER.start();\n                    final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();\n                    urlPath = vipAddress == null ? \"apps/\" : \"vips/\" + vipAddress;\n                    remoteRegionsToFetchStr = remoteRegionsToFetch.get();\n                    if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr)) {\n                        urlPath += \"?regions=\" + remoteRegionsToFetchStr;\n                    }\n                    response = getUrl(serviceUrl + urlPath);\n                    break;\n                case Refresh_Delta:\n                    tracer = REFRESH_DELTA_TIMER.start();\n                    urlPath = \"apps/delta\";\n                    remoteRegionsToFetchStr = remoteRegionsToFetch.get();\n                    if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr)) {\n                        urlPath += \"?regions=\" + remoteRegionsToFetchStr;\n                    }\n                    response = getUrl(serviceUrl + urlPath);\n                    break;\n                case Register:\n                    tracer = REGISTER_TIMER.start();\n                    urlPath = \"apps/\" + instanceInfo.getAppName();\n                    response = r.path(urlPath)\n                            .type(MediaType.APPLICATION_JSON_TYPE)\n                            .post(ClientResponse.class, instanceInfo);\n                    break;\n                case Cancel:\n                    tracer = CANCEL_TIMER.start();\n                    urlPath = \"apps/\" + appPathIdentifier;\n                    response = r.path(urlPath).delete(ClientResponse.class);\n                    // Return without during de-registration if it is not registered\n                    // already and if we get a 404\n                    if ((!isRegisteredWithDiscovery)\n                            && (response.getStatus() == Status.NOT_FOUND\n                            .getStatusCode())) {\n                        return response;\n                    }\n                    break;\n            }",
      "info" : "SwitchStatement[54479-57122]:SwitchStatement[54479-57122]"
    }, {
      "left" : "case Renew:",
      "right" : "case Renew:",
      "info" : "SwitchCase[54513-54524]:SwitchCase[54513-54524]"
    }, {
      "left" : "tracer = RENEW_TIMER.start();",
      "right" : "tracer = RENEW_TIMER.start();",
      "info" : "ExpressionStatement[54545-54574]:ExpressionStatement[54545-54574]"
    }, {
      "left" : "urlPath = \"apps/\" + appPathIdentifier;",
      "right" : "urlPath = \"apps/\" + appPathIdentifier;",
      "info" : "ExpressionStatement[54595-54633]:ExpressionStatement[54595-54633]"
    }, {
      "left" : "response = r\n                            .path(urlPath)\n                            .queryParam(\"status\",\n                                    instanceInfo.getStatus().toString())\n                            .queryParam(\"lastDirtyTimestamp\",\n                                    instanceInfo.getLastDirtyTimestamp().toString())\n                            .put(ClientResponse.class);",
      "right" : "response = r\n                            .path(urlPath)\n                            .queryParam(\"status\",\n                                    instanceInfo.getStatus().toString())\n                            .queryParam(\"lastDirtyTimestamp\",\n                                    instanceInfo.getLastDirtyTimestamp().toString())\n                            .put(ClientResponse.class);",
      "info" : "ExpressionStatement[54654-55035]:ExpressionStatement[54654-55035]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55056-55062]:BreakStatement[55056-55062]"
    }, {
      "left" : "case Refresh:",
      "right" : "case Refresh:",
      "info" : "SwitchCase[55079-55092]:SwitchCase[55079-55092]"
    }, {
      "left" : "tracer = REFRESH_TIMER.start();",
      "right" : "tracer = REFRESH_TIMER.start();",
      "info" : "ExpressionStatement[55113-55144]:ExpressionStatement[55113-55144]"
    }, {
      "left" : "final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();",
      "right" : "final String vipAddress = clientConfig.getRegistryRefreshSingleVipAddress();",
      "info" : "VariableDeclarationStatement[55165-55241]:VariableDeclarationStatement[55165-55241]"
    }, {
      "left" : "urlPath = vipAddress == null ? \"apps/\" : \"vips/\" + vipAddress;",
      "right" : "urlPath = vipAddress == null ? \"apps/\" : \"vips/\" + vipAddress;",
      "info" : "ExpressionStatement[55262-55324]:ExpressionStatement[55262-55324]"
    }, {
      "left" : "remoteRegionsToFetchStr = remoteRegionsToFetch.get();",
      "right" : "remoteRegionsToFetchStr = remoteRegionsToFetch.get();",
      "info" : "ExpressionStatement[55345-55398]:ExpressionStatement[55345-55398]"
    }, {
      "left" : "if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr))",
      "right" : "if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr))",
      "info" : "IfStatement[55419-55569]:IfStatement[55419-55569]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55472-55569]:Block[55472-55569]"
    }, {
      "left" : "urlPath += \"?regions=\" + remoteRegionsToFetchStr;",
      "right" : "urlPath += \"?regions=\" + remoteRegionsToFetchStr;",
      "info" : "ExpressionStatement[55498-55547]:ExpressionStatement[55498-55547]"
    }, {
      "left" : "response = getUrl(serviceUrl + urlPath);",
      "right" : "response = getUrl(serviceUrl + urlPath);",
      "info" : "ExpressionStatement[55590-55630]:ExpressionStatement[55590-55630]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[55651-55657]:BreakStatement[55651-55657]"
    }, {
      "left" : "case Refresh_Delta:",
      "right" : "case Refresh_Delta:",
      "info" : "SwitchCase[55674-55693]:SwitchCase[55674-55693]"
    }, {
      "left" : "tracer = REFRESH_DELTA_TIMER.start();",
      "right" : "tracer = REFRESH_DELTA_TIMER.start();",
      "info" : "ExpressionStatement[55714-55751]:ExpressionStatement[55714-55751]"
    }, {
      "left" : "urlPath = \"apps/delta\";",
      "right" : "urlPath = \"apps/delta\";",
      "info" : "ExpressionStatement[55772-55795]:ExpressionStatement[55772-55795]"
    }, {
      "left" : "remoteRegionsToFetchStr = remoteRegionsToFetch.get();",
      "right" : "remoteRegionsToFetchStr = remoteRegionsToFetch.get();",
      "info" : "ExpressionStatement[55816-55869]:ExpressionStatement[55816-55869]"
    }, {
      "left" : "if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr))",
      "right" : "if (!Strings.isNullOrEmpty(remoteRegionsToFetchStr))",
      "info" : "IfStatement[55890-56040]:IfStatement[55890-56040]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[55943-56040]:Block[55943-56040]"
    }, {
      "left" : "urlPath += \"?regions=\" + remoteRegionsToFetchStr;",
      "right" : "urlPath += \"?regions=\" + remoteRegionsToFetchStr;",
      "info" : "ExpressionStatement[55969-56018]:ExpressionStatement[55969-56018]"
    }, {
      "left" : "response = getUrl(serviceUrl + urlPath);",
      "right" : "response = getUrl(serviceUrl + urlPath);",
      "info" : "ExpressionStatement[56061-56101]:ExpressionStatement[56061-56101]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56122-56128]:BreakStatement[56122-56128]"
    }, {
      "left" : "case Register:",
      "right" : "case Register:",
      "info" : "SwitchCase[56145-56159]:SwitchCase[56145-56159]"
    }, {
      "left" : "tracer = REGISTER_TIMER.start();",
      "right" : "tracer = REGISTER_TIMER.start();",
      "info" : "ExpressionStatement[56180-56212]:ExpressionStatement[56180-56212]"
    }, {
      "left" : "urlPath = \"apps/\" + instanceInfo.getAppName();",
      "right" : "urlPath = \"apps/\" + instanceInfo.getAppName();",
      "info" : "ExpressionStatement[56233-56279]:ExpressionStatement[56233-56279]"
    }, {
      "left" : "response = r.path(urlPath)\n                            .type(MediaType.APPLICATION_JSON_TYPE)\n                            .post(ClientResponse.class, instanceInfo);",
      "right" : "response = r.path(urlPath)\n                            .type(MediaType.APPLICATION_JSON_TYPE)\n                            .post(ClientResponse.class, instanceInfo);",
      "info" : "ExpressionStatement[56300-56464]:ExpressionStatement[56300-56464]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[56485-56491]:BreakStatement[56485-56491]"
    }, {
      "left" : "case Cancel:",
      "right" : "case Cancel:",
      "info" : "SwitchCase[56508-56520]:SwitchCase[56508-56520]"
    }, {
      "left" : "tracer = CANCEL_TIMER.start();",
      "right" : "tracer = CANCEL_TIMER.start();",
      "info" : "ExpressionStatement[56541-56571]:ExpressionStatement[56541-56571]"
    }, {
      "left" : "urlPath = \"apps/\" + appPathIdentifier;",
      "right" : "urlPath = \"apps/\" + appPathIdentifier;",
      "info" : "ExpressionStatement[56592-56630]:ExpressionStatement[56592-56630]"
    }, {
      "left" : "response = r.path(urlPath).delete(ClientResponse.class);",
      "right" : "response = r.path(urlPath).delete(ClientResponse.class);",
      "info" : "ExpressionStatement[56651-56707]:ExpressionStatement[56651-56707]"
    }, {
      "left" : "if ((!isRegisteredWithDiscovery)\n                            && (response.getStatus() == Status.NOT_FOUND\n                            .getStatusCode()))",
      "right" : "if ((!isRegisteredWithDiscovery)\n                            && (response.getStatus() == Status.NOT_FOUND\n                            .getStatusCode()))",
      "info" : "IfStatement[56864-57081]:IfStatement[56864-57081]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57017-57081]:Block[57017-57081]"
    }, {
      "left" : "return response;",
      "right" : "return response;",
      "info" : "ReturnStatement[57043-57059]:ReturnStatement[57043-57059]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[57102-57108]:BreakStatement[57102-57108]"
    }, {
      "left" : "if (logger.isDebugEnabled())",
      "right" : "if (logger.isDebugEnabled())",
      "info" : "IfStatement[57136-57381]:IfStatement[57136-57381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57165-57381]:Block[57165-57381]"
    }, {
      "left" : "logger.debug(\"Finished a call to service url {} and url path {} with status code {}.\",\n                        new String[]{serviceUrl, urlPath, String.valueOf(response.getStatus())});",
      "right" : "logger.debug(\"Finished a call to service url {} and url path {} with status code {}.\",\n                        new String[]{serviceUrl, urlPath, String.valueOf(response.getStatus())});",
      "info" : "ExpressionStatement[57183-57367]:ExpressionStatement[57183-57367]"
    }, {
      "left" : "if (isOk(action, response.getStatus()))",
      "right" : "if (isOk(action, response.getStatus()))",
      "info" : "IfStatement[57394-57794]:IfStatement[57394-57794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57434-57482]:Block[57434-57482]"
    }, {
      "left" : "return response;",
      "right" : "return response;",
      "info" : "ReturnStatement[57452-57468]:ReturnStatement[57452-57468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57488-57794]:Block[57488-57794]"
    }, {
      "left" : "logger.warn(\"Action: \" + action + \"  => returned status of \"\n                        + response.getStatus() + \" from \" + serviceUrl\n                        + urlPath);",
      "right" : "logger.warn(\"Action: \" + action + \"  => returned status of \"\n                        + response.getStatus() + \" from \" + serviceUrl\n                        + urlPath);",
      "info" : "ExpressionStatement[57506-57673]:ExpressionStatement[57506-57673]"
    }, {
      "left" : "throw new RuntimeException(\"Bad status: \"\n                        + response.getStatus());",
      "right" : "throw new RuntimeException(\"Bad status: \"\n                        + response.getStatus());",
      "info" : "ThrowStatement[57690-57780]:ThrowStatement[57690-57780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57825-57975]:Block[57825-57975]"
    }, {
      "left" : "closeResponse(response);",
      "right" : "closeResponse(response);",
      "info" : "ExpressionStatement[57839-57863]:ExpressionStatement[57839-57863]"
    }, {
      "left" : "logger.warn(\"Can't get a response from \" + serviceUrl + urlPath, t);",
      "right" : "logger.warn(\"Can't get a response from \" + serviceUrl + urlPath, t);",
      "info" : "ExpressionStatement[57876-57944]:ExpressionStatement[57876-57944]"
    }, {
      "left" : "throw t;",
      "right" : "throw t;",
      "info" : "ThrowStatement[57957-57965]:ThrowStatement[57957-57965]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[57984-58074]:Block[57984-58074]"
    }, {
      "left" : "if (tracer != null)",
      "right" : "if (tracer != null)",
      "info" : "IfStatement[57998-58064]:IfStatement[57998-58064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58018-58064]:Block[58018-58064]"
    }, {
      "left" : "tracer.stop();",
      "right" : "tracer.stop();",
      "info" : "ExpressionStatement[58036-58050]:ExpressionStatement[58036-58050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58291-58515]:Block[58291-58515]"
    }, {
      "left" : "if (response != null)",
      "right" : "if (response != null)",
      "info" : "IfStatement[58301-58509]:IfStatement[58301-58509]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58323-58509]:Block[58323-58509]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[58337-58499]:TryStatement[58337-58499]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58341-58390]:Block[58341-58390]"
    }, {
      "left" : "response.close();",
      "right" : "response.close();",
      "info" : "ExpressionStatement[58359-58376]:ExpressionStatement[58359-58376]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58412-58499]:Block[58412-58499]"
    }, {
      "left" : "logger.error(\"Cannot release response resource :\", th);",
      "right" : "logger.error(\"Cannot release response resource :\", th);",
      "info" : "ExpressionStatement[58430-58485]:ExpressionStatement[58430-58485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58611-61461]:Block[58611-61461]"
    }, {
      "left" : "if (clientConfig.shouldFetchRegistry())",
      "right" : "if (clientConfig.shouldFetchRegistry())",
      "info" : "IfStatement[58621-59412]:IfStatement[58621-59412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[58661-59412]:Block[58661-59412]"
    }, {
      "left" : "int registryFetchIntervalSeconds = clientConfig.getRegistryFetchIntervalSeconds();",
      "right" : "int registryFetchIntervalSeconds = clientConfig.getRegistryFetchIntervalSeconds();",
      "info" : "VariableDeclarationStatement[58719-58801]:VariableDeclarationStatement[58719-58801]"
    }, {
      "left" : "int expBackOffBound = clientConfig.getCacheRefreshExecutorExponentialBackOffBound();",
      "right" : "int expBackOffBound = clientConfig.getCacheRefreshExecutorExponentialBackOffBound();",
      "info" : "VariableDeclarationStatement[58814-58898]:VariableDeclarationStatement[58814-58898]"
    }, {
      "left" : "scheduler.schedule(\n                    new TimedSupervisorTask(\n                            \"cacheRefresh\",\n                            scheduler,\n                            cacheRefreshExecutor,\n                            registryFetchIntervalSeconds,\n                            TimeUnit.SECONDS,\n                            expBackOffBound,\n                            new CacheRefreshThread()\n                    ),\n                    registryFetchIntervalSeconds, TimeUnit.SECONDS);",
      "right" : "scheduler.schedule(\n                    new TimedSupervisorTask(\n                            \"cacheRefresh\",\n                            scheduler,\n                            cacheRefreshExecutor,\n                            registryFetchIntervalSeconds,\n                            TimeUnit.SECONDS,\n                            expBackOffBound,\n                            new CacheRefreshThread()\n                    ),\n                    registryFetchIntervalSeconds, TimeUnit.SECONDS);",
      "info" : "ExpressionStatement[58911-59402]:ExpressionStatement[58911-59402]"
    }, {
      "left" : "if (shouldRegister(instanceInfo))",
      "right" : "if (shouldRegister(instanceInfo))",
      "info" : "IfStatement[59422-61455]:IfStatement[59422-61455]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[59456-61357]:Block[59456-61357]"
    }, {
      "left" : "int renewalIntervalInSecs = instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();",
      "right" : "int renewalIntervalInSecs = instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();",
      "info" : "VariableDeclarationStatement[59470-59553]:VariableDeclarationStatement[59470-59553]"
    }, {
      "left" : "int expBackOffBound = clientConfig.getHeartbeatExecutorExponentialBackOffBound();",
      "right" : "int expBackOffBound = clientConfig.getHeartbeatExecutorExponentialBackOffBound();",
      "info" : "VariableDeclarationStatement[59566-59647]:VariableDeclarationStatement[59566-59647]"
    }, {
      "left" : "logger.info(\"Starting heartbeat executor: \" + \"renew interval is: \" + renewalIntervalInSecs);",
      "right" : "logger.info(\"Starting heartbeat executor: \" + \"renew interval is: \" + renewalIntervalInSecs);",
      "info" : "ExpressionStatement[59660-59753]:ExpressionStatement[59660-59753]"
    }, {
      "left" : "scheduler.schedule(\n                    new TimedSupervisorTask(\n                            \"heartbeat\",\n                            scheduler,\n                            heartbeatExecutor,\n                            renewalIntervalInSecs,\n                            TimeUnit.SECONDS,\n                            expBackOffBound,\n                            new HeartbeatThread()\n                    ),\n                    renewalIntervalInSecs, TimeUnit.SECONDS);",
      "right" : "scheduler.schedule(\n                    new TimedSupervisorTask(\n                            \"heartbeat\",\n                            scheduler,\n                            heartbeatExecutor,\n                            renewalIntervalInSecs,\n                            TimeUnit.SECONDS,\n                            expBackOffBound,\n                            new HeartbeatThread()\n                    ),\n                    renewalIntervalInSecs, TimeUnit.SECONDS);",
      "info" : "ExpressionStatement[59798-60266]:ExpressionStatement[59798-60266]"
    }, {
      "left" : "instanceInfoReplicator = new InstanceInfoReplicator(\n                    this,\n                    instanceInfo,\n                    clientConfig.getInstanceInfoReplicationIntervalSeconds(),\n                    2);",
      "right" : "instanceInfoReplicator = new InstanceInfoReplicator(\n                    this,\n                    instanceInfo,\n                    clientConfig.getInstanceInfoReplicationIntervalSeconds(),\n                    2);",
      "info" : "ExpressionStatement[60319-60533]:ExpressionStatement[60319-60533]"
    }, {
      "left" : "statusChangeListener = new ApplicationInfoManager.StatusChangeListener() {\n                @Override\n                public String getId() {\n                    return \"statusChangeListener\";\n                }\n\n                @Override\n                public void notify(StatusChangeEvent statusChangeEvent) {\n                    logger.info(\"Saw local status change event {}\", statusChangeEvent);\n                    instanceInfoReplicator.onDemandUpdate();\n                }\n            };",
      "right" : "statusChangeListener = new ApplicationInfoManager.StatusChangeListener() {\n                @Override\n                public String getId() {\n                    return \"statusChangeListener\";\n                }\n\n                @Override\n                public void notify(StatusChangeEvent statusChangeEvent) {\n                    logger.info(\"Saw local status change event {}\", statusChangeEvent);\n                    instanceInfoReplicator.onDemandUpdate();\n                }\n            };",
      "info" : "ExpressionStatement[60560-61052]:ExpressionStatement[60560-61052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60699-60769]:Block[60699-60769]"
    }, {
      "left" : "return \"statusChangeListener\";",
      "right" : "return \"statusChangeListener\";",
      "info" : "ReturnStatement[60721-60751]:ReturnStatement[60721-60751]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[60869-61037]:Block[60869-61037]"
    }, {
      "left" : "logger.info(\"Saw local status change event {}\", statusChangeEvent);",
      "right" : "logger.info(\"Saw local status change event {}\", statusChangeEvent);",
      "info" : "ExpressionStatement[60891-60958]:ExpressionStatement[60891-60958]"
    }, {
      "left" : "instanceInfoReplicator.onDemandUpdate();",
      "right" : "instanceInfoReplicator.onDemandUpdate();",
      "info" : "ExpressionStatement[60979-61019]:ExpressionStatement[60979-61019]"
    }, {
      "left" : "if (clientConfig.shouldOnDemandUpdateStatusChange())",
      "right" : "if (clientConfig.shouldOnDemandUpdateStatusChange())",
      "info" : "IfStatement[61066-61239]:IfStatement[61066-61239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61119-61239]:Block[61119-61239]"
    }, {
      "left" : "ApplicationInfoManager.getInstance().registerStatusChangeListener(statusChangeListener);",
      "right" : "ApplicationInfoManager.getInstance().registerStatusChangeListener(statusChangeListener);",
      "info" : "ExpressionStatement[61137-61225]:ExpressionStatement[61137-61225]"
    }, {
      "left" : "instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());",
      "right" : "instanceInfoReplicator.start(clientConfig.getInitialInstanceInfoReplicationIntervalSeconds());",
      "info" : "ExpressionStatement[61253-61347]:ExpressionStatement[61253-61347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61363-61455]:Block[61363-61455]"
    }, {
      "left" : "logger.info(\"Not registering with Eureka server per configuration\");",
      "right" : "logger.info(\"Not registering with Eureka server per configuration\");",
      "info" : "ExpressionStatement[61377-61445]:ExpressionStatement[61377-61445]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61503-61727]:Block[61503-61727]"
    }, {
      "left" : "if (instanceInfoReplicator != null)",
      "right" : "if (instanceInfoReplicator != null)",
      "info" : "IfStatement[61513-61603]:IfStatement[61513-61603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[61549-61603]:Block[61549-61603]"
    }, {
      "left" : "instanceInfoReplicator.stop();",
      "right" : "instanceInfoReplicator.stop();",
      "info" : "ExpressionStatement[61563-61593]:ExpressionStatement[61563-61593]"
    }, {
      "left" : "heartbeatExecutor.shutdownNow();",
      "right" : "heartbeatExecutor.shutdownNow();",
      "info" : "ExpressionStatement[61612-61644]:ExpressionStatement[61612-61644]"
    }, {
      "left" : "cacheRefreshExecutor.shutdownNow();",
      "right" : "cacheRefreshExecutor.shutdownNow();",
      "info" : "ExpressionStatement[61653-61688]:ExpressionStatement[61653-61688]"
    }, {
      "left" : "scheduler.shutdownNow();",
      "right" : "scheduler.shutdownNow();",
      "info" : "ExpressionStatement[61697-61721]:ExpressionStatement[61697-61721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62470-65942]:Block[62470-65942]"
    }, {
      "left" : "Stopwatch t = GET_SERVICE_URLS_DNS_TIMER.start();",
      "right" : "Stopwatch t = GET_SERVICE_URLS_DNS_TIMER.start();",
      "info" : "VariableDeclarationStatement[62480-62529]:VariableDeclarationStatement[62480-62529]"
    }, {
      "left" : "String region = getRegion();",
      "right" : "String region = getRegion();",
      "info" : "VariableDeclarationStatement[62538-62566]:VariableDeclarationStatement[62538-62566]"
    }, {
      "left" : "Map<String, List<String>> zoneDnsNamesMap = getZoneBasedDiscoveryUrlsFromRegion(region);",
      "right" : "Map<String, List<String>> zoneDnsNamesMap = getZoneBasedDiscoveryUrlsFromRegion(region);",
      "info" : "VariableDeclarationStatement[62691-62779]:VariableDeclarationStatement[62691-62779]"
    }, {
      "left" : "Set<String> availableZones = zoneDnsNamesMap.keySet();",
      "right" : "Set<String> availableZones = zoneDnsNamesMap.keySet();",
      "info" : "VariableDeclarationStatement[62788-62842]:VariableDeclarationStatement[62788-62842]"
    }, {
      "left" : "List<String> zones = new ArrayList<String>(availableZones);",
      "right" : "List<String> zones = new ArrayList<String>(availableZones);",
      "info" : "VariableDeclarationStatement[62851-62910]:VariableDeclarationStatement[62851-62910]"
    }, {
      "left" : "if (zones.isEmpty())",
      "right" : "if (zones.isEmpty())",
      "info" : "IfStatement[62919-63061]:IfStatement[62919-63061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[62940-63061]:Block[62940-63061]"
    }, {
      "left" : "throw new RuntimeException(\"No available zones configured for the instanceZone \" + instanceZone);",
      "right" : "throw new RuntimeException(\"No available zones configured for the instanceZone \" + instanceZone);",
      "info" : "ThrowStatement[62954-63051]:ThrowStatement[62954-63051]"
    }, {
      "left" : "int zoneIndex = 0;",
      "right" : "int zoneIndex = 0;",
      "info" : "VariableDeclarationStatement[63070-63088]:VariableDeclarationStatement[63070-63088]"
    }, {
      "left" : "boolean zoneFound = false;",
      "right" : "boolean zoneFound = false;",
      "info" : "VariableDeclarationStatement[63097-63123]:VariableDeclarationStatement[63097-63123]"
    }, {
      "left" : "for (String zone : zones)",
      "right" : "for (String zone : zones)",
      "info" : "EnhancedForStatement[63132-63945]:EnhancedForStatement[63132-63945]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63158-63945]:Block[63158-63945]"
    }, {
      "left" : "logger.debug(\n                    \"Checking if the instance zone {} is the same as the zone from DNS {}\",\n                    instanceZone, zone);",
      "right" : "logger.debug(\n                    \"Checking if the instance zone {} is the same as the zone from DNS {}\",\n                    instanceZone, zone);",
      "info" : "ExpressionStatement[63172-63318]:ExpressionStatement[63172-63318]"
    }, {
      "left" : "if (preferSameZone)",
      "right" : "if (preferSameZone)",
      "info" : "IfStatement[63331-63618]:IfStatement[63331-63618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63351-63481]:Block[63351-63481]"
    }, {
      "left" : "if (instanceZone.equalsIgnoreCase(zone))",
      "right" : "if (instanceZone.equalsIgnoreCase(zone))",
      "info" : "IfStatement[63369-63467]:IfStatement[63369-63467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63410-63467]:Block[63410-63467]"
    }, {
      "left" : "zoneFound = true;",
      "right" : "zoneFound = true;",
      "info" : "ExpressionStatement[63432-63449]:ExpressionStatement[63432-63449]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63487-63618]:Block[63487-63618]"
    }, {
      "left" : "if (!instanceZone.equalsIgnoreCase(zone))",
      "right" : "if (!instanceZone.equalsIgnoreCase(zone))",
      "info" : "IfStatement[63505-63604]:IfStatement[63505-63604]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63547-63604]:Block[63547-63604]"
    }, {
      "left" : "zoneFound = true;",
      "right" : "zoneFound = true;",
      "info" : "ExpressionStatement[63569-63586]:ExpressionStatement[63569-63586]"
    }, {
      "left" : "if (zoneFound)",
      "right" : "if (zoneFound)",
      "info" : "IfStatement[63631-63910]:IfStatement[63631-63910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63646-63910]:Block[63646-63910]"
    }, {
      "left" : "Object[] args = {zones, instanceZone, zoneIndex};",
      "right" : "Object[] args = {zones, instanceZone, zoneIndex};",
      "info" : "VariableDeclarationStatement[63664-63713]:VariableDeclarationStatement[63664-63713]"
    }, {
      "left" : "logger.debug(\n                        \"The zone index from the list {} that matches the instance zone {} is {}\",\n                        args);",
      "right" : "logger.debug(\n                        \"The zone index from the list {} that matches the instance zone {} is {}\",\n                        args);",
      "info" : "ExpressionStatement[63730-63873]:ExpressionStatement[63730-63873]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[63890-63896]:BreakStatement[63890-63896]"
    }, {
      "left" : "zoneIndex++;",
      "right" : "zoneIndex++;",
      "info" : "ExpressionStatement[63923-63935]:ExpressionStatement[63923-63935]"
    }, {
      "left" : "if (zoneIndex >= zones.size())",
      "right" : "if (zoneIndex >= zones.size())",
      "info" : "IfStatement[63954-64397]:IfStatement[63954-64397]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[63985-64172]:Block[63985-64172]"
    }, {
      "left" : "logger.warn(\n                    \"No match for the zone {} in the list of available zones {}\",\n                    instanceZone, Arrays.toString(zones.toArray()));",
      "right" : "logger.warn(\n                    \"No match for the zone {} in the list of available zones {}\",\n                    instanceZone, Arrays.toString(zones.toArray()));",
      "info" : "ExpressionStatement[63999-64162]:ExpressionStatement[63999-64162]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64178-64397]:Block[64178-64397]"
    }, {
      "left" : "for (int i = 0; i < zoneIndex; i++)",
      "right" : "for (int i = 0; i < zoneIndex; i++)",
      "info" : "ForStatement[64256-64387]:ForStatement[64256-64387]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64292-64387]:Block[64292-64387]"
    }, {
      "left" : "String zone = zones.remove(0);",
      "right" : "String zone = zones.remove(0);",
      "info" : "VariableDeclarationStatement[64310-64340]:VariableDeclarationStatement[64310-64340]"
    }, {
      "left" : "zones.add(zone);",
      "right" : "zones.add(zone);",
      "info" : "ExpressionStatement[64357-64373]:ExpressionStatement[64357-64373]"
    }, {
      "left" : "List<String> serviceUrls = new ArrayList<String>();",
      "right" : "List<String> serviceUrls = new ArrayList<String>();",
      "info" : "VariableDeclarationStatement[64487-64538]:VariableDeclarationStatement[64487-64538]"
    }, {
      "left" : "for (String zone : zones)",
      "right" : "for (String zone : zones)",
      "info" : "EnhancedForStatement[64547-65501]:EnhancedForStatement[64547-65501]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64573-65501]:Block[64573-65501]"
    }, {
      "left" : "for (String zoneCname : zoneDnsNamesMap.get(zone))",
      "right" : "for (String zoneCname : zoneDnsNamesMap.get(zone))",
      "info" : "EnhancedForStatement[64587-65491]:EnhancedForStatement[64587-65491]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64638-65491]:Block[64638-65491]"
    }, {
      "left" : "List<String> ec2Urls = new ArrayList<String>(\n                        getEC2DiscoveryUrlsFromZone(zoneCname,\n                                DiscoveryUrlType.CNAME));",
      "right" : "List<String> ec2Urls = new ArrayList<String>(\n                        getEC2DiscoveryUrlsFromZone(zoneCname,\n                                DiscoveryUrlType.CNAME));",
      "info" : "VariableDeclarationStatement[64656-64822]:VariableDeclarationStatement[64656-64822]"
    }, {
      "left" : "if (ec2Urls.size() > 1)",
      "right" : "if (ec2Urls.size() > 1)",
      "info" : "IfStatement[64947-65052]:IfStatement[64947-65052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[64971-65052]:Block[64971-65052]"
    }, {
      "left" : "this.arrangeListBasedonHostname(ec2Urls);",
      "right" : "this.arrangeListBasedonHostname(ec2Urls);",
      "info" : "ExpressionStatement[64993-65034]:ExpressionStatement[64993-65034]"
    }, {
      "left" : "for (String ec2Url : ec2Urls)",
      "right" : "for (String ec2Url : ec2Urls)",
      "info" : "EnhancedForStatement[65069-65477]:EnhancedForStatement[65069-65477]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[65099-65477]:Block[65099-65477]"
    }, {
      "left" : "String serviceUrl = \"http://\" + ec2Url + \":\"\n                            + clientConfig.getEurekaServerPort()\n\n                            + \"/\" + clientConfig.getEurekaServerURLContext()\n                            + \"/\";",
      "right" : "String serviceUrl = \"http://\" + ec2Url + \":\"\n                            + clientConfig.getEurekaServerPort()\n\n                            + \"/\" + clientConfig.getEurekaServerURLContext()\n                            + \"/\";",
      "info" : "VariableDeclarationStatement[65121-65343]:VariableDeclarationStatement[65121-65343]"
    }, {
      "left" : "logger.debug(\"The EC2 url is {}\", serviceUrl);",
      "right" : "logger.debug(\"The EC2 url is {}\", serviceUrl);",
      "info" : "ExpressionStatement[65364-65410]:ExpressionStatement[65364-65410]"
    }, {
      "left" : "serviceUrls.add(serviceUrl);",
      "right" : "serviceUrls.add(serviceUrl);",
      "info" : "ExpressionStatement[65431-65459]:ExpressionStatement[65431-65459]"
    }, {
      "left" : "String primaryServiceUrl = serviceUrls.remove(0);",
      "right" : "String primaryServiceUrl = serviceUrls.remove(0);",
      "info" : "VariableDeclarationStatement[65580-65629]:VariableDeclarationStatement[65580-65629]"
    }, {
      "left" : "arrangeListBasedonHostname(serviceUrls);",
      "right" : "arrangeListBasedonHostname(serviceUrls);",
      "info" : "ExpressionStatement[65638-65678]:ExpressionStatement[65638-65678]"
    }, {
      "left" : "serviceUrls.add(0, primaryServiceUrl);",
      "right" : "serviceUrls.add(0, primaryServiceUrl);",
      "info" : "ExpressionStatement[65687-65725]:ExpressionStatement[65687-65725]"
    }, {
      "left" : "logger.debug(\n                \"This client will talk to the following serviceUrls in order : {} \",\n                Arrays.toString(serviceUrls.toArray()));",
      "right" : "logger.debug(\n                \"This client will talk to the following serviceUrls in order : {} \",\n                Arrays.toString(serviceUrls.toArray()));",
      "info" : "ExpressionStatement[65735-65890]:ExpressionStatement[65735-65890]"
    }, {
      "left" : "t.stop();",
      "right" : "t.stop();",
      "info" : "ExpressionStatement[65899-65908]:ExpressionStatement[65899-65908]"
    }, {
      "left" : "return serviceUrls;",
      "right" : "return serviceUrls;",
      "info" : "ReturnStatement[65917-65936]:ReturnStatement[65917-65936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66019-66327]:Block[66019-66327]"
    }, {
      "left" : "boolean shouldUseDns = clientConfig.shouldUseDnsForFetchingServiceUrls();",
      "right" : "boolean shouldUseDns = clientConfig.shouldUseDnsForFetchingServiceUrls();",
      "info" : "VariableDeclarationStatement[66029-66102]:VariableDeclarationStatement[66029-66102]"
    }, {
      "left" : "if (shouldUseDns)",
      "right" : "if (shouldUseDns)",
      "info" : "IfStatement[66111-66231]:IfStatement[66111-66231]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66129-66231]:Block[66129-66231]"
    }, {
      "left" : "return getServiceUrlsFromDNS(zone, clientConfig.shouldPreferSameZoneEureka());",
      "right" : "return getServiceUrlsFromDNS(zone, clientConfig.shouldPreferSameZoneEureka());",
      "info" : "ReturnStatement[66143-66221]:ReturnStatement[66143-66221]"
    }, {
      "left" : "return getServiceUrlsFromConfig(zone, clientConfig.shouldPreferSameZoneEureka());",
      "right" : "return getServiceUrlsFromConfig(zone, clientConfig.shouldPreferSameZoneEureka());",
      "info" : "ReturnStatement[66240-66321]:ReturnStatement[66240-66321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[66811-66966]:Block[66811-66966]"
    }, {
      "left" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
      "right" : "String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());",
      "info" : "VariableDeclarationStatement[66821-66903]:VariableDeclarationStatement[66821-66903]"
    }, {
      "left" : "return InstanceInfo.getZone(availZones, myInfo);",
      "right" : "return InstanceInfo.getZone(availZones, myInfo);",
      "info" : "ReturnStatement[66912-66960]:ReturnStatement[66912-66960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67160-67358]:Block[67160-67358]"
    }, {
      "left" : "String region = clientConfig.getRegion();",
      "right" : "String region = clientConfig.getRegion();",
      "info" : "VariableDeclarationStatement[67170-67211]:VariableDeclarationStatement[67170-67211]"
    }, {
      "left" : "if (region == null)",
      "right" : "if (region == null)",
      "info" : "IfStatement[67220-67283]:IfStatement[67220-67283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67240-67283]:Block[67240-67283]"
    }, {
      "left" : "region = \"default\";",
      "right" : "region = \"default\";",
      "info" : "ExpressionStatement[67254-67273]:ExpressionStatement[67254-67273]"
    }, {
      "left" : "region = region.trim().toLowerCase();",
      "right" : "region = region.trim().toLowerCase();",
      "info" : "ExpressionStatement[67292-67329]:ExpressionStatement[67292-67329]"
    }, {
      "left" : "return region;",
      "right" : "return region;",
      "info" : "ReturnStatement[67338-67352]:ReturnStatement[67338-67352]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67751-69532]:Block[67751-69532]"
    }, {
      "left" : "String discoveryDnsName = null;",
      "right" : "String discoveryDnsName = null;",
      "info" : "VariableDeclarationStatement[67761-67792]:VariableDeclarationStatement[67761-67792]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[67801-69526]:TryStatement[67801-69526]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[67805-69370]:Block[67805-69370]"
    }, {
      "left" : "discoveryDnsName = \"txt.\" + region + \".\"\n                    + clientConfig.getEurekaServerDNSName();",
      "right" : "discoveryDnsName = \"txt.\" + region + \".\"\n                    + clientConfig.getEurekaServerDNSName();",
      "info" : "ExpressionStatement[67819-67920]:ExpressionStatement[67819-67920]"
    }, {
      "left" : "logger.debug(\"The region url to be looked up is {} :\",\n                    discoveryDnsName);",
      "right" : "logger.debug(\"The region url to be looked up is {} :\",\n                    discoveryDnsName);",
      "info" : "ExpressionStatement[67934-68027]:ExpressionStatement[67934-68027]"
    }, {
      "left" : "Set<String> zoneCnamesForRegion = new TreeSet<String>(\n                    DnsResolver.getCNamesFromTxtRecord(discoveryDnsName));",
      "right" : "Set<String> zoneCnamesForRegion = new TreeSet<String>(\n                    DnsResolver.getCNamesFromTxtRecord(discoveryDnsName));",
      "info" : "VariableDeclarationStatement[68040-68169]:VariableDeclarationStatement[68040-68169]"
    }, {
      "left" : "Map<String, List<String>> zoneCnameMapForRegion = new TreeMap<String, List<String>>();",
      "right" : "Map<String, List<String>> zoneCnameMapForRegion = new TreeMap<String, List<String>>();",
      "info" : "VariableDeclarationStatement[68182-68268]:VariableDeclarationStatement[68182-68268]"
    }, {
      "left" : "for (String zoneCname : zoneCnamesForRegion)",
      "right" : "for (String zoneCname : zoneCnamesForRegion)",
      "info" : "EnhancedForStatement[68281-69318]:EnhancedForStatement[68281-69318]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68326-69318]:Block[68326-69318]"
    }, {
      "left" : "String zone = null;",
      "right" : "String zone = null;",
      "info" : "VariableDeclarationStatement[68344-68363]:VariableDeclarationStatement[68344-68363]"
    }, {
      "left" : "if (isEC2Url(zoneCname))",
      "right" : "if (isEC2Url(zoneCname))",
      "info" : "IfStatement[68380-68988]:IfStatement[68380-68988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68405-68735]:Block[68405-68735]"
    }, {
      "left" : "throw new RuntimeException(\n                            \"Cannot find the right DNS entry for \"\n                                    + discoveryDnsName\n                                    + \". \"\n                                    + \"Expected mapping of the format <aws_zone>.<domain_name>\");",
      "right" : "throw new RuntimeException(\n                            \"Cannot find the right DNS entry for \"\n                                    + discoveryDnsName\n                                    + \". \"\n                                    + \"Expected mapping of the format <aws_zone>.<domain_name>\");",
      "info" : "ThrowStatement[68427-68717]:ThrowStatement[68427-68717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[68741-68988]:Block[68741-68988]"
    }, {
      "left" : "String[] cnameTokens = zoneCname.split(\"\\\\.\");",
      "right" : "String[] cnameTokens = zoneCname.split(\"\\\\.\");",
      "info" : "VariableDeclarationStatement[68763-68809]:VariableDeclarationStatement[68763-68809]"
    }, {
      "left" : "zone = cnameTokens[0];",
      "right" : "zone = cnameTokens[0];",
      "info" : "ExpressionStatement[68830-68852]:ExpressionStatement[68830-68852]"
    }, {
      "left" : "logger.debug(\"The zoneName mapped to region {} is {}\",\n                            region, zone);",
      "right" : "logger.debug(\"The zoneName mapped to region {} is {}\",\n                            region, zone);",
      "info" : "ExpressionStatement[68873-68970]:ExpressionStatement[68873-68970]"
    }, {
      "left" : "List<String> zoneCnamesSet = zoneCnameMapForRegion.get(zone);",
      "right" : "List<String> zoneCnamesSet = zoneCnameMapForRegion.get(zone);",
      "info" : "VariableDeclarationStatement[69005-69066]:VariableDeclarationStatement[69005-69066]"
    }, {
      "left" : "if (zoneCnamesSet == null)",
      "right" : "if (zoneCnamesSet == null)",
      "info" : "IfStatement[69083-69258]:IfStatement[69083-69258]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69110-69258]:Block[69110-69258]"
    }, {
      "left" : "zoneCnamesSet = new ArrayList<String>();",
      "right" : "zoneCnamesSet = new ArrayList<String>();",
      "info" : "ExpressionStatement[69132-69172]:ExpressionStatement[69132-69172]"
    }, {
      "left" : "zoneCnameMapForRegion.put(zone, zoneCnamesSet);",
      "right" : "zoneCnameMapForRegion.put(zone, zoneCnamesSet);",
      "info" : "ExpressionStatement[69193-69240]:ExpressionStatement[69193-69240]"
    }, {
      "left" : "zoneCnamesSet.add(zoneCname);",
      "right" : "zoneCnamesSet.add(zoneCname);",
      "info" : "ExpressionStatement[69275-69304]:ExpressionStatement[69275-69304]"
    }, {
      "left" : "return zoneCnameMapForRegion;",
      "right" : "return zoneCnameMapForRegion;",
      "info" : "ReturnStatement[69331-69360]:ReturnStatement[69331-69360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69391-69526]:Block[69391-69526]"
    }, {
      "left" : "throw new RuntimeException(\"Cannot get cnames bound to the region:\"\n                    + discoveryDnsName, e);",
      "right" : "throw new RuntimeException(\"Cannot get cnames bound to the region:\"\n                    + discoveryDnsName, e);",
      "info" : "ThrowStatement[69405-69516]:ThrowStatement[69405-69516]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[69588-69639]:Block[69588-69639]"
    }, {
      "left" : "return zoneCname.startsWith(\"ec2\");",
      "right" : "return zoneCname.startsWith(\"ec2\");",
      "info" : "ReturnStatement[69598-69633]:ReturnStatement[69598-69633]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70100-71572]:Block[70100-71572]"
    }, {
      "left" : "Set<String> eipsForZone = null;",
      "right" : "Set<String> eipsForZone = null;",
      "info" : "VariableDeclarationStatement[70110-70141]:VariableDeclarationStatement[70110-70141]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[70150-71538]:TryStatement[70150-71538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70154-71391]:Block[70154-71391]"
    }, {
      "left" : "dnsName = \"txt.\" + dnsName;",
      "right" : "dnsName = \"txt.\" + dnsName;",
      "info" : "ExpressionStatement[70168-70195]:ExpressionStatement[70168-70195]"
    }, {
      "left" : "logger.debug(\"The zone url to be looked up is {} :\", dnsName);",
      "right" : "logger.debug(\"The zone url to be looked up is {} :\", dnsName);",
      "info" : "ExpressionStatement[70208-70270]:ExpressionStatement[70208-70270]"
    }, {
      "left" : "Set<String> ec2UrlsForZone = DnsResolver.getCNamesFromTxtRecord(dnsName);",
      "right" : "Set<String> ec2UrlsForZone = DnsResolver.getCNamesFromTxtRecord(dnsName);",
      "info" : "VariableDeclarationStatement[70283-70356]:VariableDeclarationStatement[70283-70356]"
    }, {
      "left" : "for (String ec2Url : ec2UrlsForZone)",
      "right" : "for (String ec2Url : ec2UrlsForZone)",
      "info" : "EnhancedForStatement[70369-70580]:EnhancedForStatement[70369-70580]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70406-70580]:Block[70406-70580]"
    }, {
      "left" : "logger.debug(\"The eureka url for the dns name {} is {}\",\n                        dnsName, ec2Url);",
      "right" : "logger.debug(\"The eureka url for the dns name {} is {}\",\n                        dnsName, ec2Url);",
      "info" : "ExpressionStatement[70424-70522]:ExpressionStatement[70424-70522]"
    }, {
      "left" : "ec2UrlsForZone.add(ec2Url);",
      "right" : "ec2UrlsForZone.add(ec2Url);",
      "info" : "ExpressionStatement[70539-70566]:ExpressionStatement[70539-70566]"
    }, {
      "left" : "if (DiscoveryUrlType.CNAME.equals(type))",
      "right" : "if (DiscoveryUrlType.CNAME.equals(type))",
      "info" : "IfStatement[70593-70688]:IfStatement[70593-70688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70634-70688]:Block[70634-70688]"
    }, {
      "left" : "return ec2UrlsForZone;",
      "right" : "return ec2UrlsForZone;",
      "info" : "ReturnStatement[70652-70674]:ReturnStatement[70652-70674]"
    }, {
      "left" : "eipsForZone = new TreeSet<String>();",
      "right" : "eipsForZone = new TreeSet<String>();",
      "info" : "ExpressionStatement[70701-70737]:ExpressionStatement[70701-70737]"
    }, {
      "left" : "for (String cname : ec2UrlsForZone)",
      "right" : "for (String cname : ec2UrlsForZone)",
      "info" : "EnhancedForStatement[70750-71306]:EnhancedForStatement[70750-71306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[70786-71306]:Block[70786-71306]"
    }, {
      "left" : "String[] tokens = cname.split(\"\\\\.\");",
      "right" : "String[] tokens = cname.split(\"\\\\.\");",
      "info" : "VariableDeclarationStatement[70804-70841]:VariableDeclarationStatement[70804-70841]"
    }, {
      "left" : "String ec2HostName = tokens[0];",
      "right" : "String ec2HostName = tokens[0];",
      "info" : "VariableDeclarationStatement[70858-70889]:VariableDeclarationStatement[70858-70889]"
    }, {
      "left" : "String[] ips = ec2HostName.split(\"-\");",
      "right" : "String[] ips = ec2HostName.split(\"-\");",
      "info" : "VariableDeclarationStatement[70906-70944]:VariableDeclarationStatement[70906-70944]"
    }, {
      "left" : "StringBuffer eipBuffer = new StringBuffer();",
      "right" : "StringBuffer eipBuffer = new StringBuffer();",
      "info" : "VariableDeclarationStatement[70961-71005]:VariableDeclarationStatement[70961-71005]"
    }, {
      "left" : "for (int ipCtr = 1; ipCtr < 5; ipCtr++)",
      "right" : "for (int ipCtr = 1; ipCtr < 5; ipCtr++)",
      "info" : "ForStatement[71022-71237]:ForStatement[71022-71237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71062-71237]:Block[71062-71237]"
    }, {
      "left" : "eipBuffer.append(ips[ipCtr]);",
      "right" : "eipBuffer.append(ips[ipCtr]);",
      "info" : "ExpressionStatement[71084-71113]:ExpressionStatement[71084-71113]"
    }, {
      "left" : "if (ipCtr < 4)",
      "right" : "if (ipCtr < 4)",
      "info" : "IfStatement[71134-71219]:IfStatement[71134-71219]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71149-71219]:Block[71149-71219]"
    }, {
      "left" : "eipBuffer.append(\".\");",
      "right" : "eipBuffer.append(\".\");",
      "info" : "ExpressionStatement[71175-71197]:ExpressionStatement[71175-71197]"
    }, {
      "left" : "eipsForZone.add(eipBuffer.toString());",
      "right" : "eipsForZone.add(eipBuffer.toString());",
      "info" : "ExpressionStatement[71254-71292]:ExpressionStatement[71254-71292]"
    }, {
      "left" : "logger.debug(\"The EIPS for {} is {} :\", dnsName, eipsForZone);",
      "right" : "logger.debug(\"The EIPS for {} is {} :\", dnsName, eipsForZone);",
      "info" : "ExpressionStatement[71319-71381]:ExpressionStatement[71319-71381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71412-71538]:Block[71412-71538]"
    }, {
      "left" : "throw new RuntimeException(\"Cannot get cnames bound to the region:\"\n                    + dnsName, e);",
      "right" : "throw new RuntimeException(\"Cannot get cnames bound to the region:\"\n                    + dnsName, e);",
      "info" : "ThrowStatement[71426-71528]:ThrowStatement[71426-71528]"
    }, {
      "left" : "return eipsForZone;",
      "right" : "return eipsForZone;",
      "info" : "ReturnStatement[71547-71566]:ReturnStatement[71547-71566]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71782-72260]:Block[71782-72260]"
    }, {
      "left" : "for (int i = 0; i < availZones.length; i++)",
      "right" : "for (int i = 0; i < availZones.length; i++)",
      "info" : "ForStatement[71792-72010]:ForStatement[71792-72010]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71836-72010]:Block[71836-72010]"
    }, {
      "left" : "if (myZone != null\n                    && (availZones[i].equalsIgnoreCase(myZone.trim()) == preferSameZone))",
      "right" : "if (myZone != null\n                    && (availZones[i].equalsIgnoreCase(myZone.trim()) == preferSameZone))",
      "info" : "IfStatement[71850-72000]:IfStatement[71850-72000]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[71959-72000]:Block[71959-72000]"
    }, {
      "left" : "return i;",
      "right" : "return i;",
      "info" : "ReturnStatement[71977-71986]:ReturnStatement[71977-71986]"
    }, {
      "left" : "logger.warn(\n                \"DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - {}, preferSameZone- {}. \"\n                        + \"Defaulting to \" + availZones[0], myZone, preferSameZone);",
      "right" : "logger.warn(\n                \"DISCOVERY: Could not pick a zone based on preferred zone settings. My zone - {}, preferSameZone- {}. \"\n                        + \"Defaulting to \" + availZones[0], myZone, preferSameZone);",
      "info" : "ExpressionStatement[72019-72236]:ExpressionStatement[72019-72236]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[72245-72254]:ReturnStatement[72245-72254]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72413-72801]:Block[72413-72801]"
    }, {
      "left" : "if (httpStatus >= 200 && httpStatus < 300 || httpStatus == 302)",
      "right" : "if (httpStatus >= 200 && httpStatus < 300 || httpStatus == 302)",
      "info" : "IfStatement[72423-72795]:IfStatement[72423-72795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72487-72523]:Block[72487-72523]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[72501-72513]:ReturnStatement[72501-72513]"
    }, {
      "left" : "if (Action.Renew == action && httpStatus == 404)",
      "right" : "if (Action.Renew == action && httpStatus == 404)",
      "info" : "IfStatement[72529-72795]:IfStatement[72529-72795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72578-72614]:Block[72578-72614]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[72592-72604]:ReturnStatement[72592-72604]"
    }, {
      "left" : "if (Action.Refresh_Delta == action\n                && (httpStatus == 403 || httpStatus == 404))",
      "right" : "if (Action.Refresh_Delta == action\n                && (httpStatus == 403 || httpStatus == 404))",
      "info" : "IfStatement[72620-72795]:IfStatement[72620-72795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72716-72752]:Block[72716-72752]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[72730-72742]:ReturnStatement[72730-72742]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[72758-72795]:Block[72758-72795]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[72772-72785]:ReturnStatement[72772-72785]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73028-73654]:Block[73028-73654]"
    }, {
      "left" : "Application app = getApplication(DISCOVERY_APPID);",
      "right" : "Application app = getApplication(DISCOVERY_APPID);",
      "info" : "VariableDeclarationStatement[73038-73088]:VariableDeclarationStatement[73038-73088]"
    }, {
      "left" : "List<InstanceInfo> discoveryInstances = null;",
      "right" : "List<InstanceInfo> discoveryInstances = null;",
      "info" : "VariableDeclarationStatement[73097-73142]:VariableDeclarationStatement[73097-73142]"
    }, {
      "left" : "InstanceInfo instanceToReturn = null;",
      "right" : "InstanceInfo instanceToReturn = null;",
      "info" : "VariableDeclarationStatement[73151-73188]:VariableDeclarationStatement[73151-73188]"
    }, {
      "left" : "if (app != null)",
      "right" : "if (app != null)",
      "info" : "IfStatement[73198-73279]:IfStatement[73198-73279]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73215-73279]:Block[73215-73279]"
    }, {
      "left" : "discoveryInstances = app.getInstances();",
      "right" : "discoveryInstances = app.getInstances();",
      "info" : "ExpressionStatement[73229-73269]:ExpressionStatement[73229-73269]"
    }, {
      "left" : "if (discoveryInstances != null)",
      "right" : "if (discoveryInstances != null)",
      "info" : "IfStatement[73289-73615]:IfStatement[73289-73615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73321-73615]:Block[73321-73615]"
    }, {
      "left" : "for (InstanceInfo instance : discoveryInstances)",
      "right" : "for (InstanceInfo instance : discoveryInstances)",
      "info" : "EnhancedForStatement[73335-73605]:EnhancedForStatement[73335-73605]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73384-73605]:Block[73384-73605]"
    }, {
      "left" : "if ((instance != null)\n                        && (instance.isCoordinatingDiscoveryServer()))",
      "right" : "if ((instance != null)\n                        && (instance.isCoordinatingDiscoveryServer()))",
      "info" : "IfStatement[73402-73591]:IfStatement[73402-73591]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73496-73591]:Block[73496-73591]"
    }, {
      "left" : "instanceToReturn = instance;",
      "right" : "instanceToReturn = instance;",
      "info" : "ExpressionStatement[73518-73546]:ExpressionStatement[73518-73546]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[73567-73573]:BreakStatement[73567-73573]"
    }, {
      "left" : "return instanceToReturn;",
      "right" : "return instanceToReturn;",
      "info" : "ReturnStatement[73624-73648]:ReturnStatement[73624-73648]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[73713-73916]:Block[73713-73916]"
    }, {
      "left" : "ClientResponse cr = discoveryApacheClient.resource(fullServiceUrl)\n                .accept(MediaType.APPLICATION_JSON_TYPE)\n                .get(ClientResponse.class);",
      "right" : "ClientResponse cr = discoveryApacheClient.resource(fullServiceUrl)\n                .accept(MediaType.APPLICATION_JSON_TYPE)\n                .get(ClientResponse.class);",
      "info" : "VariableDeclarationStatement[73723-73890]:VariableDeclarationStatement[73723-73890]"
    }, {
      "left" : "return cr;",
      "right" : "return cr;",
      "info" : "ReturnStatement[73900-73910]:ReturnStatement[73900-73910]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74131-74614]:Block[74131-74614]"
    }, {
      "left" : "ApplicationInfoManager.getInstance().refreshDataCenterInfoIfRequired();",
      "right" : "ApplicationInfoManager.getInstance().refreshDataCenterInfoIfRequired();",
      "info" : "ExpressionStatement[74141-74212]:ExpressionStatement[74141-74212]"
    }, {
      "left" : "InstanceStatus status;",
      "right" : "InstanceStatus status;",
      "info" : "VariableDeclarationStatement[74222-74244]:VariableDeclarationStatement[74222-74244]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[74253-74523]:TryStatement[74253-74523]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74257-74350]:Block[74257-74350]"
    }, {
      "left" : "status = getHealthCheckHandler().getStatus(instanceInfo.getStatus());",
      "right" : "status = getHealthCheckHandler().getStatus(instanceInfo.getStatus());",
      "info" : "ExpressionStatement[74271-74340]:ExpressionStatement[74271-74340]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74371-74523]:Block[74371-74523]"
    }, {
      "left" : "logger.warn(\"Exception from healthcheckHandler.getStatus, setting status to DOWN\", e);",
      "right" : "logger.warn(\"Exception from healthcheckHandler.getStatus, setting status to DOWN\", e);",
      "info" : "ExpressionStatement[74385-74471]:ExpressionStatement[74385-74471]"
    }, {
      "left" : "status = InstanceStatus.DOWN;",
      "right" : "status = InstanceStatus.DOWN;",
      "info" : "ExpressionStatement[74484-74513]:ExpressionStatement[74484-74513]"
    }, {
      "left" : "if (null != status)",
      "right" : "if (null != status)",
      "info" : "IfStatement[74533-74608]:IfStatement[74533-74608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74553-74608]:Block[74553-74608]"
    }, {
      "left" : "instanceInfo.setStatus(status);",
      "right" : "instanceInfo.setStatus(status);",
      "info" : "ExpressionStatement[74567-74598]:ExpressionStatement[74567-74598]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74788-74820]:Block[74788-74820]"
    }, {
      "left" : "renew();",
      "right" : "renew();",
      "info" : "ExpressionStatement[74802-74810]:ExpressionStatement[74802-74810]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[74906-74952]:Block[74906-74952]"
    }, {
      "left" : "return instanceInfoReplicator;",
      "right" : "return instanceInfoReplicator;",
      "info" : "ReturnStatement[74916-74946]:ReturnStatement[74916-74946]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75012-75048]:Block[75012-75048]"
    }, {
      "left" : "return instanceInfo;",
      "right" : "return instanceInfo;",
      "info" : "ReturnStatement[75022-75042]:ReturnStatement[75022-75042]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75118-75670]:Block[75118-75670]"
    }, {
      "left" : "if (healthCheckHandler == null)",
      "right" : "if (healthCheckHandler == null)",
      "info" : "IfStatement[75128-75628]:IfStatement[75128-75628]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75160-75628]:Block[75160-75628]"
    }, {
      "left" : "if (null != healthCheckHandlerProvider)",
      "right" : "if (null != healthCheckHandlerProvider)",
      "info" : "IfStatement[75174-75474]:IfStatement[75174-75474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75214-75300]:Block[75214-75300]"
    }, {
      "left" : "healthCheckHandler = healthCheckHandlerProvider.get();",
      "right" : "healthCheckHandler = healthCheckHandlerProvider.get();",
      "info" : "ExpressionStatement[75232-75286]:ExpressionStatement[75232-75286]"
    }, {
      "left" : "if (null != healthCheckCallbackProvider)",
      "right" : "if (null != healthCheckCallbackProvider)",
      "info" : "IfStatement[75306-75474]:IfStatement[75306-75474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75347-75474]:Block[75347-75474]"
    }, {
      "left" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(healthCheckCallbackProvider.get());",
      "right" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(healthCheckCallbackProvider.get());",
      "info" : "ExpressionStatement[75365-75460]:ExpressionStatement[75365-75460]"
    }, {
      "left" : "if (null == healthCheckHandler)",
      "right" : "if (null == healthCheckHandler)",
      "info" : "IfStatement[75488-75618]:IfStatement[75488-75618]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75520-75618]:Block[75520-75618]"
    }, {
      "left" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(null);",
      "right" : "healthCheckHandler = new HealthCheckCallbackToHandlerBridge(null);",
      "info" : "ExpressionStatement[75538-75604]:ExpressionStatement[75538-75604]"
    }, {
      "left" : "return healthCheckHandler;",
      "right" : "return healthCheckHandler;",
      "info" : "ReturnStatement[75638-75664]:ReturnStatement[75638-75664]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75850-78747]:Block[75850-78747]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[75864-78737]:TryStatement[75864-78737]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[75868-78629]:Block[75868-78629]"
    }, {
      "left" : "boolean isFetchingRemoteRegionRegistries = isFetchingRemoteRegionRegistries();",
      "right" : "boolean isFetchingRemoteRegionRegistries = isFetchingRemoteRegionRegistries();",
      "info" : "VariableDeclarationStatement[75886-75964]:VariableDeclarationStatement[75886-75964]"
    }, {
      "left" : "boolean remoteRegionsModified = false;",
      "right" : "boolean remoteRegionsModified = false;",
      "info" : "VariableDeclarationStatement[75982-76020]:VariableDeclarationStatement[75982-76020]"
    }, {
      "left" : "String latestRemoteRegions = clientConfig.fetchRegistryForRemoteRegions();",
      "right" : "String latestRemoteRegions = clientConfig.fetchRegistryForRemoteRegions();",
      "info" : "VariableDeclarationStatement[76133-76207]:VariableDeclarationStatement[76133-76207]"
    }, {
      "left" : "if (null != latestRemoteRegions)",
      "right" : "if (null != latestRemoteRegions)",
      "info" : "IfStatement[76224-77524]:IfStatement[76224-77524]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76257-77524]:Block[76257-77524]"
    }, {
      "left" : "String currentRemoteRegions = remoteRegionsToFetch.get();",
      "right" : "String currentRemoteRegions = remoteRegionsToFetch.get();",
      "info" : "VariableDeclarationStatement[76279-76336]:VariableDeclarationStatement[76279-76336]"
    }, {
      "left" : "if (!latestRemoteRegions.equals(currentRemoteRegions))",
      "right" : "if (!latestRemoteRegions.equals(currentRemoteRegions))",
      "info" : "IfStatement[76357-77506]:IfStatement[76357-77506]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76412-77308]:Block[76412-77308]"
    }, {
      "left" : "synchronized (instanceRegionChecker.getAzToRegionMapper()) {\n                            if (remoteRegionsToFetch.compareAndSet(currentRemoteRegions, latestRemoteRegions)) {\n                                String[] remoteRegions = latestRemoteRegions.split(\",\");\n                                instanceRegionChecker.getAzToRegionMapper().setRegionsToFetch(remoteRegions);\n                                remoteRegionsModified = true;\n                            } else {\n                                logger.info(\"Remote regions to fetch modified concurrently,\" +\n                                        \" ignoring change from {} to {}\", currentRemoteRegions, latestRemoteRegions);\n                            }\n                        }",
      "right" : "synchronized (instanceRegionChecker.getAzToRegionMapper()) {\n                            if (remoteRegionsToFetch.compareAndSet(currentRemoteRegions, latestRemoteRegions)) {\n                                String[] remoteRegions = latestRemoteRegions.split(\",\");\n                                instanceRegionChecker.getAzToRegionMapper().setRegionsToFetch(remoteRegions);\n                                remoteRegionsModified = true;\n                            } else {\n                                logger.info(\"Remote regions to fetch modified concurrently,\" +\n                                        \" ignoring change from {} to {}\", currentRemoteRegions, latestRemoteRegions);\n                            }\n                        }",
      "info" : "SynchronizedStatement[76546-77286]:SynchronizedStatement[76546-77286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76605-77286]:Block[76605-77286]"
    }, {
      "left" : "if (remoteRegionsToFetch.compareAndSet(currentRemoteRegions, latestRemoteRegions))",
      "right" : "if (remoteRegionsToFetch.compareAndSet(currentRemoteRegions, latestRemoteRegions))",
      "info" : "IfStatement[76635-77260]:IfStatement[76635-77260]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[76718-77010]:Block[76718-77010]"
    }, {
      "left" : "String[] remoteRegions = latestRemoteRegions.split(\",\");",
      "right" : "String[] remoteRegions = latestRemoteRegions.split(\",\");",
      "info" : "VariableDeclarationStatement[76752-76808]:VariableDeclarationStatement[76752-76808]"
    }, {
      "left" : "instanceRegionChecker.getAzToRegionMapper().setRegionsToFetch(remoteRegions);",
      "right" : "instanceRegionChecker.getAzToRegionMapper().setRegionsToFetch(remoteRegions);",
      "info" : "ExpressionStatement[76841-76918]:ExpressionStatement[76841-76918]"
    }, {
      "left" : "remoteRegionsModified = true;",
      "right" : "remoteRegionsModified = true;",
      "info" : "ExpressionStatement[76951-76980]:ExpressionStatement[76951-76980]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77016-77260]:Block[77016-77260]"
    }, {
      "left" : "logger.info(\"Remote regions to fetch modified concurrently,\" +\n                                        \" ignoring change from {} to {}\", currentRemoteRegions, latestRemoteRegions);",
      "right" : "logger.info(\"Remote regions to fetch modified concurrently,\" +\n                                        \" ignoring change from {} to {}\", currentRemoteRegions, latestRemoteRegions);",
      "info" : "ExpressionStatement[77050-77230]:ExpressionStatement[77050-77230]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77314-77506]:Block[77314-77506]"
    }, {
      "left" : "instanceRegionChecker.getAzToRegionMapper().refreshMapping();",
      "right" : "instanceRegionChecker.getAzToRegionMapper().refreshMapping();",
      "info" : "ExpressionStatement[77423-77484]:ExpressionStatement[77423-77484]"
    }, {
      "left" : "fetchRegistry(remoteRegionsModified);",
      "right" : "fetchRegistry(remoteRegionsModified);",
      "info" : "ExpressionStatement[77542-77579]:ExpressionStatement[77542-77579]"
    }, {
      "left" : "if (logger.isDebugEnabled())",
      "right" : "if (logger.isDebugEnabled())",
      "info" : "IfStatement[77597-78615]:IfStatement[77597-78615]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[77626-78615]:Block[77626-78615]"
    }, {
      "left" : "StringBuilder allAppsHashCodes = new StringBuilder();",
      "right" : "StringBuilder allAppsHashCodes = new StringBuilder();",
      "info" : "VariableDeclarationStatement[77648-77701]:VariableDeclarationStatement[77648-77701]"
    }, {
      "left" : "allAppsHashCodes.append(\"Local region apps hashcode: \");",
      "right" : "allAppsHashCodes.append(\"Local region apps hashcode: \");",
      "info" : "ExpressionStatement[77722-77778]:ExpressionStatement[77722-77778]"
    }, {
      "left" : "allAppsHashCodes.append(localRegionApps.get().getAppsHashCode());",
      "right" : "allAppsHashCodes.append(localRegionApps.get().getAppsHashCode());",
      "info" : "ExpressionStatement[77799-77864]:ExpressionStatement[77799-77864]"
    }, {
      "left" : "allAppsHashCodes.append(\", is fetching remote regions? \");",
      "right" : "allAppsHashCodes.append(\", is fetching remote regions? \");",
      "info" : "ExpressionStatement[77885-77943]:ExpressionStatement[77885-77943]"
    }, {
      "left" : "allAppsHashCodes.append(isFetchingRemoteRegionRegistries);",
      "right" : "allAppsHashCodes.append(isFetchingRemoteRegionRegistries);",
      "info" : "ExpressionStatement[77964-78022]:ExpressionStatement[77964-78022]"
    }, {
      "left" : "for (Map.Entry<String, Applications> entry : remoteRegionVsApps.entrySet())",
      "right" : "for (Map.Entry<String, Applications> entry : remoteRegionVsApps.entrySet())",
      "info" : "EnhancedForStatement[78043-78433]:EnhancedForStatement[78043-78433]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78119-78433]:Block[78119-78433]"
    }, {
      "left" : "allAppsHashCodes.append(\", Remote region: \");",
      "right" : "allAppsHashCodes.append(\", Remote region: \");",
      "info" : "ExpressionStatement[78145-78190]:ExpressionStatement[78145-78190]"
    }, {
      "left" : "allAppsHashCodes.append(entry.getKey());",
      "right" : "allAppsHashCodes.append(entry.getKey());",
      "info" : "ExpressionStatement[78215-78255]:ExpressionStatement[78215-78255]"
    }, {
      "left" : "allAppsHashCodes.append(\" , apps hashcode: \");",
      "right" : "allAppsHashCodes.append(\" , apps hashcode: \");",
      "info" : "ExpressionStatement[78280-78326]:ExpressionStatement[78280-78326]"
    }, {
      "left" : "allAppsHashCodes.append(entry.getValue().getAppsHashCode());",
      "right" : "allAppsHashCodes.append(entry.getValue().getAppsHashCode());",
      "info" : "ExpressionStatement[78351-78411]:ExpressionStatement[78351-78411]"
    }, {
      "left" : "logger.debug(\"Completed cache refresh task for discovery. All Apps hash code is {} \",\n                            allAppsHashCodes.toString());",
      "right" : "logger.debug(\"Completed cache refresh task for discovery. All Apps hash code is {} \",\n                            allAppsHashCodes.toString());",
      "info" : "ExpressionStatement[78454-78597]:ExpressionStatement[78454-78597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78651-78737]:Block[78651-78737]"
    }, {
      "left" : "logger.error(\"Cannot fetch registry from server\", th);",
      "right" : "logger.error(\"Cannot fetch registry from server\", th);",
      "info" : "ExpressionStatement[78669-78723]:ExpressionStatement[78669-78723]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78924-80489]:Block[78924-80489]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[78934-80483]:TryStatement[78934-80483]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[78938-80345]:Block[78938-80345]"
    }, {
      "left" : "@SuppressWarnings(\"deprecation\")\n            BackupRegistry backupRegistryInstance = newBackupRegistryInstance();",
      "right" : "@SuppressWarnings(\"deprecation\")\n            BackupRegistry backupRegistryInstance = newBackupRegistryInstance();",
      "info" : "VariableDeclarationStatement[78952-79065]:VariableDeclarationStatement[78952-79065]"
    }, {
      "left" : "if (null == backupRegistryInstance)",
      "right" : "if (null == backupRegistryInstance)",
      "info" : "IfStatement[79078-79283]:IfStatement[79078-79283]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79114-79283]:Block[79114-79283]"
    }, {
      "left" : "backupRegistryInstance = backupRegistryProvider.get();",
      "right" : "backupRegistryInstance = backupRegistryProvider.get();",
      "info" : "ExpressionStatement[79215-79269]:ExpressionStatement[79215-79269]"
    }, {
      "left" : "if (null != backupRegistryInstance)",
      "right" : "if (null != backupRegistryInstance)",
      "info" : "IfStatement[79297-80335]:IfStatement[79297-80335]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79333-80206]:Block[79333-80206]"
    }, {
      "left" : "Applications apps = null;",
      "right" : "Applications apps = null;",
      "info" : "VariableDeclarationStatement[79351-79376]:VariableDeclarationStatement[79351-79376]"
    }, {
      "left" : "if (isFetchingRemoteRegionRegistries())",
      "right" : "if (isFetchingRemoteRegionRegistries())",
      "info" : "IfStatement[79393-79790]:IfStatement[79393-79790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79433-79698]:Block[79433-79698]"
    }, {
      "left" : "String remoteRegionsStr = remoteRegionsToFetch.get();",
      "right" : "String remoteRegionsStr = remoteRegionsToFetch.get();",
      "info" : "VariableDeclarationStatement[79455-79508]:VariableDeclarationStatement[79455-79508]"
    }, {
      "left" : "if (null != remoteRegionsStr)",
      "right" : "if (null != remoteRegionsStr)",
      "info" : "IfStatement[79529-79680]:IfStatement[79529-79680]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79559-79680]:Block[79559-79680]"
    }, {
      "left" : "apps = backupRegistryInstance.fetchRegistry(remoteRegionsStr.split(\",\"));",
      "right" : "apps = backupRegistryInstance.fetchRegistry(remoteRegionsStr.split(\",\"));",
      "info" : "ExpressionStatement[79585-79658]:ExpressionStatement[79585-79658]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79704-79790]:Block[79704-79790]"
    }, {
      "left" : "apps = backupRegistryInstance.fetchRegistry();",
      "right" : "apps = backupRegistryInstance.fetchRegistry();",
      "info" : "ExpressionStatement[79726-79772]:ExpressionStatement[79726-79772]"
    }, {
      "left" : "if (apps != null)",
      "right" : "if (apps != null)",
      "info" : "IfStatement[79807-80192]:IfStatement[79807-80192]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[79825-80192]:Block[79825-80192]"
    }, {
      "left" : "final Applications applications = this.filterAndShuffle(apps);",
      "right" : "final Applications applications = this.filterAndShuffle(apps);",
      "info" : "VariableDeclarationStatement[79847-79909]:VariableDeclarationStatement[79847-79909]"
    }, {
      "left" : "applications.setAppsHashCode(applications.getReconcileHashCode());",
      "right" : "applications.setAppsHashCode(applications.getReconcileHashCode());",
      "info" : "ExpressionStatement[79930-79996]:ExpressionStatement[79930-79996]"
    }, {
      "left" : "localRegionApps.set(applications);",
      "right" : "localRegionApps.set(applications);",
      "info" : "ExpressionStatement[80017-80051]:ExpressionStatement[80017-80051]"
    }, {
      "left" : "logTotalInstances();",
      "right" : "logTotalInstances();",
      "info" : "ExpressionStatement[80072-80092]:ExpressionStatement[80072-80092]"
    }, {
      "left" : "logger.info(\"Fetched registry successfully from the backup\");",
      "right" : "logger.info(\"Fetched registry successfully from the backup\");",
      "info" : "ExpressionStatement[80113-80174]:ExpressionStatement[80113-80174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80212-80335]:Block[80212-80335]"
    }, {
      "left" : "logger.warn(\"No backup registry instance defined & unable to find any discovery servers.\");",
      "right" : "logger.warn(\"No backup registry instance defined & unable to find any discovery servers.\");",
      "info" : "ExpressionStatement[80230-80321]:ExpressionStatement[80230-80321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80366-80483]:Block[80366-80483]"
    }, {
      "left" : "logger.warn(\"Cannot fetch applications from apps although backup registry was specified\", e);",
      "right" : "logger.warn(\"Cannot fetch applications from apps although backup registry was specified\", e);",
      "info" : "ExpressionStatement[80380-80473]:ExpressionStatement[80380-80473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[80767-80795]:Block[80767-80795]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[80777-80789]:ReturnStatement[80777-80789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81104-82150]:Block[81104-82150]"
    }, {
      "left" : "return new TimerTask() {\n            @Override\n            public void run() {\n                try {\n                    List<String> serviceUrlList = getDiscoveryServiceUrls(zone);\n                    if (serviceUrlList.isEmpty()) {\n                        logger.warn(\"The service url list is empty\");\n                        return;\n                    }\n                    if (!serviceUrlList.equals(eurekaServiceUrls.get())) {\n                        logger.info(\n                                \"Updating the serviceUrls as they seem to have changed from {} to {} \",\n                                Arrays.toString(eurekaServiceUrls.get()\n                                        .toArray()), Arrays\n                                        .toString(serviceUrlList.toArray()));\n\n                        eurekaServiceUrls.set(serviceUrlList);\n                    }\n                } catch (Throwable e) {\n                    logger.error(\"Cannot get the eureka service urls :\", e);\n                }\n\n            }\n        };",
      "right" : "return new TimerTask() {\n            @Override\n            public void run() {\n                try {\n                    List<String> serviceUrlList = getDiscoveryServiceUrls(zone);\n                    if (serviceUrlList.isEmpty()) {\n                        logger.warn(\"The service url list is empty\");\n                        return;\n                    }\n                    if (!serviceUrlList.equals(eurekaServiceUrls.get())) {\n                        logger.info(\n                                \"Updating the serviceUrls as they seem to have changed from {} to {} \",\n                                Arrays.toString(eurekaServiceUrls.get()\n                                        .toArray()), Arrays\n                                        .toString(serviceUrlList.toArray()));\n\n                        eurekaServiceUrls.set(serviceUrlList);\n                    }\n                } catch (Throwable e) {\n                    logger.error(\"Cannot get the eureka service urls :\", e);\n                }\n\n            }\n        };",
      "info" : "ReturnStatement[81114-82144]:ReturnStatement[81114-82144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81191-82133]:Block[81191-82133]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[81209-82118]:TryStatement[81209-82118]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81213-82001]:Block[81213-82001]"
    }, {
      "left" : "List<String> serviceUrlList = getDiscoveryServiceUrls(zone);",
      "right" : "List<String> serviceUrlList = getDiscoveryServiceUrls(zone);",
      "info" : "VariableDeclarationStatement[81235-81295]:VariableDeclarationStatement[81235-81295]"
    }, {
      "left" : "if (serviceUrlList.isEmpty())",
      "right" : "if (serviceUrlList.isEmpty())",
      "info" : "IfStatement[81316-81471]:IfStatement[81316-81471]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81346-81471]:Block[81346-81471]"
    }, {
      "left" : "logger.warn(\"The service url list is empty\");",
      "right" : "logger.warn(\"The service url list is empty\");",
      "info" : "ExpressionStatement[81372-81417]:ExpressionStatement[81372-81417]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[81442-81449]:ReturnStatement[81442-81449]"
    }, {
      "left" : "if (!serviceUrlList.equals(eurekaServiceUrls.get()))",
      "right" : "if (!serviceUrlList.equals(eurekaServiceUrls.get()))",
      "info" : "IfStatement[81492-81983]:IfStatement[81492-81983]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[81545-81983]:Block[81545-81983]"
    }, {
      "left" : "logger.info(\n                                \"Updating the serviceUrls as they seem to have changed from {} to {} \",\n                                Arrays.toString(eurekaServiceUrls.get()\n                                        .toArray()), Arrays\n                                        .toString(serviceUrlList.toArray()));",
      "right" : "logger.info(\n                                \"Updating the serviceUrls as they seem to have changed from {} to {} \",\n                                Arrays.toString(eurekaServiceUrls.get()\n                                        .toArray()), Arrays\n                                        .toString(serviceUrlList.toArray()));",
      "info" : "ExpressionStatement[81571-81897]:ExpressionStatement[81571-81897]"
    }, {
      "left" : "eurekaServiceUrls.set(serviceUrlList);",
      "right" : "eurekaServiceUrls.set(serviceUrlList);",
      "info" : "ExpressionStatement[81923-81961]:ExpressionStatement[81923-81961]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82022-82118]:Block[82022-82118]"
    }, {
      "left" : "logger.error(\"Cannot get the eureka service urls :\", e);",
      "right" : "logger.error(\"Cannot get the eureka service urls :\", e);",
      "info" : "ExpressionStatement[82044-82100]:ExpressionStatement[82044-82100]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82837-83544]:Block[82837-83544]"
    }, {
      "left" : "if (apps != null)",
      "right" : "if (apps != null)",
      "info" : "IfStatement[82847-83517]:IfStatement[82847-83517]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82865-83517]:Block[82865-83517]"
    }, {
      "left" : "if (isFetchingRemoteRegionRegistries())",
      "right" : "if (isFetchingRemoteRegionRegistries())",
      "info" : "IfStatement[82879-83507]:IfStatement[82879-83507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[82919-83403]:Block[82919-83403]"
    }, {
      "left" : "Map<String, Applications> remoteRegionVsApps = new ConcurrentHashMap<String, Applications>();",
      "right" : "Map<String, Applications> remoteRegionVsApps = new ConcurrentHashMap<String, Applications>();",
      "info" : "VariableDeclarationStatement[82937-83030]:VariableDeclarationStatement[82937-83030]"
    }, {
      "left" : "apps.shuffleAndIndexInstances(remoteRegionVsApps, clientConfig, instanceRegionChecker);",
      "right" : "apps.shuffleAndIndexInstances(remoteRegionVsApps, clientConfig, instanceRegionChecker);",
      "info" : "ExpressionStatement[83047-83134]:ExpressionStatement[83047-83134]"
    }, {
      "left" : "for (Applications applications : remoteRegionVsApps.values())",
      "right" : "for (Applications applications : remoteRegionVsApps.values())",
      "info" : "EnhancedForStatement[83151-83327]:EnhancedForStatement[83151-83327]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83213-83327]:Block[83213-83327]"
    }, {
      "left" : "applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
      "right" : "applications.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
      "info" : "ExpressionStatement[83235-83309]:ExpressionStatement[83235-83309]"
    }, {
      "left" : "this.remoteRegionVsApps = remoteRegionVsApps;",
      "right" : "this.remoteRegionVsApps = remoteRegionVsApps;",
      "info" : "ExpressionStatement[83344-83389]:ExpressionStatement[83344-83389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83409-83507]:Block[83409-83507]"
    }, {
      "left" : "apps.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
      "right" : "apps.shuffleInstances(clientConfig.shouldFilterOnlyUpInstances());",
      "info" : "ExpressionStatement[83427-83493]:ExpressionStatement[83427-83493]"
    }, {
      "left" : "return apps;",
      "right" : "return apps;",
      "info" : "ReturnStatement[83526-83538]:ReturnStatement[83526-83538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83601-83659]:Block[83601-83659]"
    }, {
      "left" : "return null != remoteRegionsToFetch.get();",
      "right" : "return null != remoteRegionsToFetch.get();",
      "info" : "ReturnStatement[83611-83653]:ReturnStatement[83611-83653]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83725-84440]:Block[83725-84440]"
    }, {
      "left" : "int listSize = 0;",
      "right" : "int listSize = 0;",
      "info" : "VariableDeclarationStatement[83735-83752]:VariableDeclarationStatement[83735-83752]"
    }, {
      "left" : "if (list != null)",
      "right" : "if (list != null)",
      "info" : "IfStatement[83761-83826]:IfStatement[83761-83826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83779-83826]:Block[83779-83826]"
    }, {
      "left" : "listSize = list.size();",
      "right" : "listSize = list.size();",
      "info" : "ExpressionStatement[83793-83816]:ExpressionStatement[83793-83816]"
    }, {
      "left" : "if ((this.instanceInfo == null) || (listSize == 0))",
      "right" : "if ((this.instanceInfo == null) || (listSize == 0))",
      "info" : "IfStatement[83835-83918]:IfStatement[83835-83918]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[83887-83918]:Block[83887-83918]"
    }, {
      "left" : "return;",
      "right" : "return;",
      "info" : "ReturnStatement[83901-83908]:ReturnStatement[83901-83908]"
    }, {
      "left" : "int instanceHashcode = this.instanceInfo.getHostName().hashCode();",
      "right" : "int instanceHashcode = this.instanceInfo.getHostName().hashCode();",
      "info" : "VariableDeclarationStatement[84079-84145]:VariableDeclarationStatement[84079-84145]"
    }, {
      "left" : "if (instanceHashcode < 0)",
      "right" : "if (instanceHashcode < 0)",
      "info" : "IfStatement[84154-84245]:IfStatement[84154-84245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84180-84245]:Block[84180-84245]"
    }, {
      "left" : "instanceHashcode = instanceHashcode * -1;",
      "right" : "instanceHashcode = instanceHashcode * -1;",
      "info" : "ExpressionStatement[84194-84235]:ExpressionStatement[84194-84235]"
    }, {
      "left" : "int backupInstance = instanceHashcode % listSize;",
      "right" : "int backupInstance = instanceHashcode % listSize;",
      "info" : "VariableDeclarationStatement[84254-84303]:VariableDeclarationStatement[84254-84303]"
    }, {
      "left" : "for (int i = 0; i < backupInstance; i++)",
      "right" : "for (int i = 0; i < backupInstance; i++)",
      "info" : "ForStatement[84312-84434]:ForStatement[84312-84434]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[84353-84434]:Block[84353-84434]"
    }, {
      "left" : "String zone = list.remove(0);",
      "right" : "String zone = list.remove(0);",
      "info" : "VariableDeclarationStatement[84367-84396]:VariableDeclarationStatement[84367-84396]"
    }, {
      "left" : "list.add(zone);",
      "right" : "list.add(zone);",
      "info" : "ExpressionStatement[84409-84424]:ExpressionStatement[84409-84424]"
    } ]
  },
  "interFileMappings" : { }
}