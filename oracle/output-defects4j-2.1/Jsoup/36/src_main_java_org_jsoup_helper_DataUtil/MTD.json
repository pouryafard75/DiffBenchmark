{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "DataUtil",
      "right" : "DataUtil",
      "info" : "TypeDeclaration[294-7248]:TypeDeclaration[347-8051]"
    }, {
      "left" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*\\\"?([^\\\\s;\\\"]*)\");",
      "right" : "private static final Pattern charsetPattern = Pattern.compile(\"(?i)\\\\bcharset=\\\\s*(?:\\\"|')?([^\\\\s,;\\\"']*)\");",
      "info" : "FieldDeclaration[381-481]:FieldDeclaration[434-542]"
    }, {
      "left" : "static final String defaultCharset = \"UTF-8\";",
      "right" : "static final String defaultCharset = \"UTF-8\";",
      "info" : "FieldDeclaration[486-531]:FieldDeclaration[547-592]"
    }, {
      "left" : "private static final int bufferSize = 0x20000;",
      "right" : "private static final int bufferSize = 0x20000;",
      "info" : "FieldDeclaration[583-629]:FieldDeclaration[644-690]"
    }, {
      "left" : "private DataUtil()",
      "right" : "private DataUtil()",
      "info" : "MethodDeclaration[645-666]:MethodDeclaration[706-727]"
    }, {
      "left" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(File in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[672-1392]:MethodDeclaration[733-1453]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri) throws IOException",
      "info" : "MethodDeclaration[1398-1958]:MethodDeclaration[1459-2019]"
    }, {
      "left" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "right" : "public static Document load(InputStream in, String charsetName, String baseUri, Parser parser) throws IOException",
      "info" : "MethodDeclaration[1964-2626]:MethodDeclaration[2025-2687]"
    }, {
      "left" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
      "right" : "static Document parseByteData(ByteBuffer byteData, String charsetName, String baseUri, Parser parser)",
      "info" : "MethodDeclaration[2828-5022]:MethodDeclaration[2889-5607]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream, int maxSize) throws IOException",
      "info" : "MethodDeclaration[5028-6244]:MethodDeclaration[5613-6829]"
    }, {
      "left" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "right" : "static ByteBuffer readToByteBuffer(InputStream inStream) throws IOException",
      "info" : "MethodDeclaration[6250-6379]:MethodDeclaration[6835-6964]"
    }, {
      "left" : "static String getCharsetFromContentType(String contentType)",
      "right" : "static String getCharsetFromContentType(String contentType)",
      "info" : "MethodDeclaration[6385-7236]:MethodDeclaration[6970-8039]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[664-666]:Block[725-727]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1035-1392]:Block[1096-1453]"
    }, {
      "left" : "FileInputStream inStream = null;",
      "right" : "FileInputStream inStream = null;",
      "info" : "VariableDeclarationStatement[1045-1077]:VariableDeclarationStatement[1106-1138]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[1086-1386]:TryStatement[1147-1447]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1090-1298]:Block[1151-1359]"
    }, {
      "left" : "inStream = new FileInputStream(in);",
      "right" : "inStream = new FileInputStream(in);",
      "info" : "ExpressionStatement[1104-1139]:ExpressionStatement[1165-1200]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(inStream);",
      "right" : "ByteBuffer byteData = readToByteBuffer(inStream);",
      "info" : "VariableDeclarationStatement[1152-1201]:VariableDeclarationStatement[1213-1262]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1214-1288]:ReturnStatement[1275-1349]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1307-1386]:Block[1368-1447]"
    }, {
      "left" : "if (inStream != null)",
      "right" : "if (inStream != null)",
      "info" : "IfStatement[1321-1376]:IfStatement[1382-1437]"
    }, {
      "left" : "inStream.close();",
      "right" : "inStream.close();",
      "info" : "ExpressionStatement[1359-1376]:ExpressionStatement[1420-1437]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1816-1958]:Block[1877-2019]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[1826-1869]:VariableDeclarationStatement[1887-1930]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "right" : "return parseByteData(byteData, charsetName, baseUri, Parser.htmlParser());",
      "info" : "ReturnStatement[1878-1952]:ReturnStatement[1939-2013]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2497-2626]:Block[2558-2687]"
    }, {
      "left" : "ByteBuffer byteData = readToByteBuffer(in);",
      "right" : "ByteBuffer byteData = readToByteBuffer(in);",
      "info" : "VariableDeclarationStatement[2507-2550]:VariableDeclarationStatement[2568-2611]"
    }, {
      "left" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "right" : "return parseByteData(byteData, charsetName, baseUri, parser);",
      "info" : "ReturnStatement[2559-2620]:ReturnStatement[2620-2681]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2930-5022]:Block[2991-5607]"
    }, {
      "left" : "String docData;",
      "right" : "String docData;",
      "info" : "VariableDeclarationStatement[2940-2955]:VariableDeclarationStatement[3001-3016]"
    }, {
      "left" : "Document doc = null;",
      "right" : "Document doc = null;",
      "info" : "VariableDeclarationStatement[2964-2984]:VariableDeclarationStatement[3025-3045]"
    }, {
      "left" : "if (charsetName == null)",
      "right" : "if (charsetName == null)",
      "info" : "IfStatement[2993-4465]:IfStatement[3054-5050]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3018-4160]:Block[3079-4745]"
    }, {
      "left" : "docData = Charset.forName(defaultCharset).decode(byteData).toString();",
      "right" : "docData = Charset.forName(defaultCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[3201-3271]:ExpressionStatement[3262-3332]"
    }, {
      "left" : "doc = parser.parseInput(docData, baseUri);",
      "right" : "doc = parser.parseInput(docData, baseUri);",
      "info" : "ExpressionStatement[3284-3326]:ExpressionStatement[3345-3387]"
    }, {
      "left" : "Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();",
      "right" : "Element meta = doc.select(\"meta[http-equiv=content-type], meta[charset]\").first();",
      "info" : "VariableDeclarationStatement[3339-3421]:VariableDeclarationStatement[3400-3482]"
    }, {
      "left" : "if (meta != null)",
      "right" : "if (meta != null)",
      "info" : "IfStatement[3434-4150]:IfStatement[3495-4735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3452-4150]:Block[3513-4735]"
    }, {
      "left" : "String foundCharset;",
      "right" : "String foundCharset;",
      "info" : "VariableDeclarationStatement[3520-3540]:VariableDeclarationStatement[3581-3601]"
    }, {
      "left" : "if (meta.hasAttr(\"http-equiv\"))",
      "right" : "if (meta.hasAttr(\"http-equiv\"))",
      "info" : "IfStatement[3557-3774]:IfStatement[3618-4279]"
    }, {
      "left" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "right" : "foundCharset = getCharsetFromContentType(meta.attr(\"content\"));",
      "info" : "ExpressionStatement[3611-3674]:ExpressionStatement[3672-3735]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3698-3774]:Block[3916-4016]"
    }, {
      "left" : "foundCharset = meta.attr(\"charset\");",
      "right" : "foundCharset = meta.attr(\"charset\");",
      "info" : "ExpressionStatement[3720-3756]:ExpressionStatement[3950-3986]"
    }, {
      "left" : "if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset))",
      "right" : "if (foundCharset != null && foundCharset.length() != 0 && !foundCharset.equals(defaultCharset))",
      "info" : "IfStatement[3792-4136]:IfStatement[4297-4721]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3888-4136]:Block[4393-4721]"
    }, {
      "left" : "charsetName = foundCharset;",
      "right" : "charsetName = foundCharset;",
      "info" : "ExpressionStatement[3931-3958]:ExpressionStatement[4516-4543]"
    }, {
      "left" : "byteData.rewind();",
      "right" : "byteData.rewind();",
      "info" : "ExpressionStatement[3979-3997]:ExpressionStatement[4564-4582]"
    }, {
      "left" : "docData = Charset.forName(foundCharset).decode(byteData).toString();",
      "right" : "docData = Charset.forName(foundCharset).decode(byteData).toString();",
      "info" : "ExpressionStatement[4018-4086]:ExpressionStatement[4603-4671]"
    }, {
      "left" : "doc = null;",
      "right" : "doc = null;",
      "info" : "ExpressionStatement[4107-4118]:ExpressionStatement[4692-4703]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4166-4465]:Block[4751-5050]"
    }, {
      "left" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "right" : "Validate.notEmpty(charsetName, \"Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML\");",
      "info" : "ExpressionStatement[4242-4375]:ExpressionStatement[4827-4960]"
    }, {
      "left" : "docData = Charset.forName(charsetName).decode(byteData).toString();",
      "right" : "docData = Charset.forName(charsetName).decode(byteData).toString();",
      "info" : "ExpressionStatement[4388-4455]:ExpressionStatement[4973-5040]"
    }, {
      "left" : "if (doc == null)",
      "right" : "if (doc == null)",
      "info" : "IfStatement[4474-4996]:IfStatement[5059-5581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4491-4996]:Block[5076-5581]"
    }, {
      "left" : "if (docData.length() > 0 && docData.charAt(0) == 65279)",
      "right" : "if (docData.length() > 0 && docData.charAt(0) == 65279)",
      "info" : "IfStatement[4772-4875]:IfStatement[5357-5460]"
    }, {
      "left" : "docData = docData.substring(1);",
      "right" : "docData = docData.substring(1);",
      "info" : "ExpressionStatement[4844-4875]:ExpressionStatement[5429-5460]"
    }, {
      "left" : "doc = parser.parseInput(docData, baseUri);",
      "right" : "doc = parser.parseInput(docData, baseUri);",
      "info" : "ExpressionStatement[4889-4931]:ExpressionStatement[5474-5516]"
    }, {
      "left" : "doc.outputSettings().charset(charsetName);",
      "right" : "doc.outputSettings().charset(charsetName);",
      "info" : "ExpressionStatement[4944-4986]:ExpressionStatement[5529-5571]"
    }, {
      "left" : "return doc;",
      "right" : "return doc;",
      "info" : "ReturnStatement[5005-5016]:ReturnStatement[5590-5601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5460-6244]:Block[6045-6829]"
    }, {
      "left" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "right" : "Validate.isTrue(maxSize >= 0, \"maxSize must be 0 (unlimited) or larger\");",
      "info" : "ExpressionStatement[5470-5543]:ExpressionStatement[6055-6128]"
    }, {
      "left" : "final boolean capped = maxSize > 0;",
      "right" : "final boolean capped = maxSize > 0;",
      "info" : "VariableDeclarationStatement[5552-5587]:VariableDeclarationStatement[6137-6172]"
    }, {
      "left" : "byte[] buffer = new byte[bufferSize];",
      "right" : "byte[] buffer = new byte[bufferSize];",
      "info" : "VariableDeclarationStatement[5596-5633]:VariableDeclarationStatement[6181-6218]"
    }, {
      "left" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "right" : "ByteArrayOutputStream outStream = new ByteArrayOutputStream(bufferSize);",
      "info" : "VariableDeclarationStatement[5642-5714]:VariableDeclarationStatement[6227-6299]"
    }, {
      "left" : "int read;",
      "right" : "int read;",
      "info" : "VariableDeclarationStatement[5723-5732]:VariableDeclarationStatement[6308-6317]"
    }, {
      "left" : "int remaining = maxSize;",
      "right" : "int remaining = maxSize;",
      "info" : "VariableDeclarationStatement[5741-5765]:VariableDeclarationStatement[6326-6350]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[5775-6141]:WhileStatement[6360-6726]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5788-6141]:Block[6373-6726]"
    }, {
      "left" : "read = inStream.read(buffer);",
      "right" : "read = inStream.read(buffer);",
      "info" : "ExpressionStatement[5802-5831]:ExpressionStatement[6387-6416]"
    }, {
      "left" : "if (read == -1)",
      "right" : "if (read == -1)",
      "info" : "IfStatement[5844-5866]:IfStatement[6429-6451]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[5860-5866]:BreakStatement[6445-6451]"
    }, {
      "left" : "if (capped)",
      "right" : "if (capped)",
      "info" : "IfStatement[5879-6085]:IfStatement[6464-6670]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5891-6085]:Block[6476-6670]"
    }, {
      "left" : "if (read > remaining)",
      "right" : "if (read > remaining)",
      "info" : "IfStatement[5909-6036]:IfStatement[6494-6621]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5931-6036]:Block[6516-6621]"
    }, {
      "left" : "outStream.write(buffer, 0, remaining);",
      "right" : "outStream.write(buffer, 0, remaining);",
      "info" : "ExpressionStatement[5953-5991]:ExpressionStatement[6538-6576]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[6012-6018]:BreakStatement[6597-6603]"
    }, {
      "left" : "remaining -= read;",
      "right" : "remaining -= read;",
      "info" : "ExpressionStatement[6053-6071]:ExpressionStatement[6638-6656]"
    }, {
      "left" : "outStream.write(buffer, 0, read);",
      "right" : "outStream.write(buffer, 0, read);",
      "info" : "ExpressionStatement[6098-6131]:ExpressionStatement[6683-6716]"
    }, {
      "left" : "ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());",
      "right" : "ByteBuffer byteData = ByteBuffer.wrap(outStream.toByteArray());",
      "info" : "VariableDeclarationStatement[6150-6213]:VariableDeclarationStatement[6735-6798]"
    }, {
      "left" : "return byteData;",
      "right" : "return byteData;",
      "info" : "ReturnStatement[6222-6238]:ReturnStatement[6807-6823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6326-6379]:Block[6911-6964]"
    }, {
      "left" : "return readToByteBuffer(inStream, 0);",
      "right" : "return readToByteBuffer(inStream, 0);",
      "info" : "ReturnStatement[6336-6373]:ReturnStatement[6921-6958]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6741-7236]:Block[7326-8039]"
    }, {
      "left" : "if (contentType == null)",
      "right" : "if (contentType == null)",
      "info" : "IfStatement[6751-6788]:IfStatement[7336-7373]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[6776-6788]:ReturnStatement[7361-7373]"
    }, {
      "left" : "Matcher m = charsetPattern.matcher(contentType);",
      "right" : "Matcher m = charsetPattern.matcher(contentType);",
      "info" : "VariableDeclarationStatement[6797-6845]:VariableDeclarationStatement[7382-7430]"
    }, {
      "left" : "if (m.find())",
      "right" : "if (m.find())",
      "info" : "IfStatement[6854-7209]:IfStatement[7439-8012]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6868-7209]:Block[7453-8012]"
    }, {
      "left" : "String charset = m.group(1).trim();",
      "right" : "String charset = m.group(1).trim();",
      "info" : "VariableDeclarationStatement[6882-6917]:VariableDeclarationStatement[7467-7502]"
    }, {
      "left" : "if (Charset.isSupported(charset))",
      "right" : "if (Charset.isSupported(charset))",
      "info" : "IfStatement[6934-6983]:IfStatement[7640-7689]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[6968-6983]:ReturnStatement[7674-7689]"
    }, {
      "left" : "charset = charset.toUpperCase(Locale.ENGLISH);",
      "right" : "charset = charset.toUpperCase(Locale.ENGLISH);",
      "info" : "ExpressionStatement[7000-7046]:ExpressionStatement[7706-7752]"
    }, {
      "left" : "if (Charset.isSupported(charset))",
      "right" : "if (Charset.isSupported(charset))",
      "info" : "IfStatement[7063-7112]:IfStatement[7769-7818]"
    }, {
      "left" : "return charset;",
      "right" : "return charset;",
      "info" : "ReturnStatement[7097-7112]:ReturnStatement[7803-7818]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[7218-7230]:ReturnStatement[8021-8033]"
    } ]
  },
  "interFileMappings" : { }
}