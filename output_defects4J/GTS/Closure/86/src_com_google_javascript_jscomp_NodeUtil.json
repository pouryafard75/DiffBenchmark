{
  "matchedElements" : [
 {
    "left" : "class : NodeUtil",
    "right" : "class : NodeUtil",
    "info" : "TypeDeclaration[1314-75860]:TypeDeclaration[1314-75861]"
  }, {
    "left" : "JSC_PROPERTY_NAME_FN",
    "right" : "JSC_PROPERTY_NAME_FN",
    "info" : "FieldDeclaration[1431-1502]:FieldDeclaration[1431-1502]"
  }, {
    "left" : "CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
    "right" : "CONSTRUCTORS_WITHOUT_SIDE_EFFECTS",
    "info" : "FieldDeclaration[1639-1933]:FieldDeclaration[1639-1933]"
  }, {
    "left" : "private NodeUtil()",
    "right" : "private NodeUtil()",
    "info" : "MethodDeclaration[1977-1998]:MethodDeclaration[1977-1998]"
  }, {
    "left" : "package getExpressionBooleanValue(n ) : ",
    "right" : "package getExpressionBooleanValue(n ) : ",
    "info" : "MethodDeclaration[2002-3491]:MethodDeclaration[2002-3491]"
  }, {
    "left" : "package getBooleanValue(n ) : ",
    "right" : "package getBooleanValue(n ) : ",
    "info" : "MethodDeclaration[3495-4629]:MethodDeclaration[3495-4629]"
  }, {
    "left" : "package getStringValue(n ) : ",
    "right" : "package getStringValue(n ) : ",
    "info" : "MethodDeclaration[4634-5767]:MethodDeclaration[4634-5767]"
  }, {
    "left" : "package getNumberValue(n ) : ",
    "right" : "package getNumberValue(n ) : ",
    "info" : "MethodDeclaration[5771-6626]:MethodDeclaration[5771-6626]"
  }, {
    "left" : "package getFunctionName(n ) : ",
    "right" : "package getFunctionName(n ) : ",
    "info" : "MethodDeclaration[6630-7834]:MethodDeclaration[6630-7834]"
  }, {
    "left" : "package getNearestFunctionName(n ) : ",
    "right" : "package getNearestFunctionName(n ) : ",
    "info" : "MethodDeclaration[7838-8830]:MethodDeclaration[7838-8830]"
  }, {
    "left" : "package isImmutableValue(n ) : boolean",
    "right" : "package isImmutableValue(n ) : boolean",
    "info" : "MethodDeclaration[8835-9549]:MethodDeclaration[8835-9549]"
  }, {
    "left" : "package isLiteralValue(n , includeFunctions boolean) : boolean",
    "right" : "package isLiteralValue(n , includeFunctions boolean) : boolean",
    "info" : "MethodDeclaration[9553-11367]:MethodDeclaration[9553-11367]"
  }, {
    "left" : "package isValidDefineValue(val , defines ...) : boolean",
    "right" : "package isValidDefineValue(val , defines ...) : boolean",
    "info" : "MethodDeclaration[11371-12861]:MethodDeclaration[11371-12861]"
  }, {
    "left" : "package isEmptyBlock(block ) : boolean",
    "right" : "package isEmptyBlock(block ) : boolean",
    "info" : "MethodDeclaration[12865-13245]:MethodDeclaration[12865-13245]"
  }, {
    "left" : "package isSimpleOperator(n ) : boolean",
    "right" : "package isSimpleOperator(n ) : boolean",
    "info" : "MethodDeclaration[13249-13340]:MethodDeclaration[13249-13340]"
  }, {
    "left" : "package isSimpleOperatorType(type int) : boolean",
    "right" : "package isSimpleOperatorType(type int) : boolean",
    "info" : "MethodDeclaration[13344-14321]:MethodDeclaration[13344-14321]"
  }, {
    "left" : "public newExpr(child ) : ",
    "right" : "public newExpr(child ) : ",
    "info" : "MethodDeclaration[14325-14631]:MethodDeclaration[14325-14631]"
  }, {
    "left" : "package mayEffectMutableState(n ) : boolean",
    "right" : "package mayEffectMutableState(n ) : boolean",
    "info" : "MethodDeclaration[14635-14898]:MethodDeclaration[14635-14898]"
  }, {
    "left" : "package mayEffectMutableState(n , compiler ) : boolean",
    "right" : "package mayEffectMutableState(n , compiler ) : boolean",
    "info" : "MethodDeclaration[14902-15036]:MethodDeclaration[14902-15036]"
  }, {
    "left" : "package mayHaveSideEffects(n ) : boolean",
    "right" : "package mayHaveSideEffects(n ) : boolean",
    "info" : "MethodDeclaration[15040-15212]:MethodDeclaration[15040-15212]"
  }, {
    "left" : "package mayHaveSideEffects(n , compiler ) : boolean",
    "right" : "package mayHaveSideEffects(n , compiler ) : boolean",
    "info" : "MethodDeclaration[15216-15348]:MethodDeclaration[15216-15348]"
  }, {
    "left" : "private checkForStateChangeHelper(n , checkForNewObjects boolean, compiler ) : boolean",
    "right" : "private checkForStateChangeHelper(n , checkForNewObjects boolean, compiler ) : boolean",
    "info" : "MethodDeclaration[15352-20193]:MethodDeclaration[15352-20193]"
  }, {
    "left" : "package constructorCallHasSideEffects(callNode ) : boolean",
    "right" : "package constructorCallHasSideEffects(callNode ) : boolean",
    "info" : "MethodDeclaration[20197-20434]:MethodDeclaration[20197-20434]"
  }, {
    "left" : "package constructorCallHasSideEffects(callNode , compiler ) : boolean",
    "right" : "package constructorCallHasSideEffects(callNode , compiler ) : boolean",
    "info" : "MethodDeclaration[20438-20976]:MethodDeclaration[20438-20976]"
  }, {
    "left" : "BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
    "right" : "BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS",
    "info" : "FieldDeclaration[21189-21364]:FieldDeclaration[21189-21364]"
  }, {
    "left" : "OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
    "right" : "OBJECT_METHODS_WITHOUT_SIDEEFFECTS",
    "info" : "FieldDeclaration[21367-21482]:FieldDeclaration[21367-21482]"
  }, {
    "left" : "REGEXP_METHODS",
    "right" : "REGEXP_METHODS",
    "info" : "FieldDeclaration[21485-21573]:FieldDeclaration[21485-21573]"
  }, {
    "left" : "STRING_REGEXP_METHODS",
    "right" : "STRING_REGEXP_METHODS",
    "info" : "FieldDeclaration[21576-21694]:FieldDeclaration[21576-21694]"
  }, {
    "left" : "package functionCallHasSideEffects(callNode ) : boolean",
    "right" : "package functionCallHasSideEffects(callNode ) : boolean",
    "info" : "MethodDeclaration[21698-21944]:MethodDeclaration[21698-21944]"
  }, {
    "left" : "package functionCallHasSideEffects(callNode , compiler ) : boolean",
    "right" : "package functionCallHasSideEffects(callNode , compiler ) : boolean",
    "info" : "MethodDeclaration[21948-24113]:MethodDeclaration[21948-24113]"
  }, {
    "left" : "package callHasLocalResult(n ) : boolean",
    "right" : "package callHasLocalResult(n ) : boolean",
    "info" : "MethodDeclaration[24117-24350]:MethodDeclaration[24117-24350]"
  }, {
    "left" : "package nodeTypeMayHaveSideEffects(n ) : boolean",
    "right" : "package nodeTypeMayHaveSideEffects(n ) : boolean",
    "info" : "MethodDeclaration[24354-24726]:MethodDeclaration[24354-24726]"
  }, {
    "left" : "package nodeTypeMayHaveSideEffects(n , compiler ) : boolean",
    "right" : "package nodeTypeMayHaveSideEffects(n , compiler ) : boolean",
    "info" : "MethodDeclaration[24730-25318]:MethodDeclaration[24730-25318]"
  }, {
    "left" : "package canBeSideEffected(n ) : boolean",
    "right" : "package canBeSideEffected(n ) : boolean",
    "info" : "MethodDeclaration[25322-25562]:MethodDeclaration[25322-25562]"
  }, {
    "left" : "package canBeSideEffected(n , knownConstants ...) : boolean",
    "right" : "package canBeSideEffected(n , knownConstants ...) : boolean",
    "info" : "MethodDeclaration[25566-26901]:MethodDeclaration[25566-26901]"
  }, {
    "left" : "package precedence(type int) : int",
    "right" : "package precedence(type int) : int",
    "info" : "MethodDeclaration[27338-29393]:MethodDeclaration[27338-29393]"
  }, {
    "left" : "package isAssociative(type int) : boolean",
    "right" : "package isAssociative(type int) : boolean",
    "info" : "MethodDeclaration[29397-29864]:MethodDeclaration[29397-29864]"
  }, {
    "left" : "package isCommutative(type int) : boolean",
    "right" : "package isCommutative(type int) : boolean",
    "info" : "MethodDeclaration[29868-30371]:MethodDeclaration[29868-30371]"
  }, {
    "left" : "package isAssignmentOp(n ) : boolean",
    "right" : "package isAssignmentOp(n ) : boolean",
    "info" : "MethodDeclaration[30375-30842]:MethodDeclaration[30375-30842]"
  }, {
    "left" : "package getOpFromAssignmentOp(n ) : int",
    "right" : "package getOpFromAssignmentOp(n ) : int",
    "info" : "MethodDeclaration[30846-31609]:MethodDeclaration[30846-31609]"
  }, {
    "left" : "package isExpressionNode(n ) : boolean",
    "right" : "package isExpressionNode(n ) : boolean",
    "info" : "MethodDeclaration[31613-31703]:MethodDeclaration[31613-31703]"
  }, {
    "left" : "package containsFunction(n ) : boolean",
    "right" : "package containsFunction(n ) : boolean",
    "info" : "MethodDeclaration[31707-31901]:MethodDeclaration[31707-31901]"
  }, {
    "left" : "package referencesThis(n ) : boolean",
    "right" : "package referencesThis(n ) : boolean",
    "info" : "MethodDeclaration[31905-32101]:MethodDeclaration[31905-32101]"
  }, {
    "left" : "package isGet(n ) : boolean",
    "right" : "package isGet(n ) : boolean",
    "info" : "MethodDeclaration[32105-32272]:MethodDeclaration[32105-32272]"
  }, {
    "left" : "package isGetProp(n ) : boolean",
    "right" : "package isGetProp(n ) : boolean",
    "info" : "MethodDeclaration[32276-32396]:MethodDeclaration[32276-32396]"
  }, {
    "left" : "package isName(n ) : boolean",
    "right" : "package isName(n ) : boolean",
    "info" : "MethodDeclaration[32400-32511]:MethodDeclaration[32400-32511]"
  }, {
    "left" : "package isNew(n ) : boolean",
    "right" : "package isNew(n ) : boolean",
    "info" : "MethodDeclaration[32515-32623]:MethodDeclaration[32515-32623]"
  }, {
    "left" : "package isVar(n ) : boolean",
    "right" : "package isVar(n ) : boolean",
    "info" : "MethodDeclaration[32627-32735]:MethodDeclaration[32627-32735]"
  }, {
    "left" : "package isVarDeclaration(n ) : boolean",
    "right" : "package isVarDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[32739-33148]:MethodDeclaration[32739-33148]"
  }, {
    "left" : "package getAssignedValue(n ) : ",
    "right" : "package getAssignedValue(n ) : ",
    "info" : "MethodDeclaration[33152-33594]:MethodDeclaration[33152-33594]"
  }, {
    "left" : "package isString(n ) : boolean",
    "right" : "package isString(n ) : boolean",
    "info" : "MethodDeclaration[33598-33715]:MethodDeclaration[33598-33715]"
  }, {
    "left" : "package isExprAssign(n ) : boolean",
    "right" : "package isExprAssign(n ) : boolean",
    "info" : "MethodDeclaration[33719-34047]:MethodDeclaration[33719-34047]"
  }, {
    "left" : "package isAssign(n ) : boolean",
    "right" : "package isAssign(n ) : boolean",
    "info" : "MethodDeclaration[34051-34169]:MethodDeclaration[34051-34169]"
  }, {
    "left" : "package isExprCall(n ) : boolean",
    "right" : "package isExprCall(n ) : boolean",
    "info" : "MethodDeclaration[34173-34488]:MethodDeclaration[34173-34488]"
  }, {
    "left" : "package isForIn(n ) : boolean",
    "right" : "package isForIn(n ) : boolean",
    "info" : "MethodDeclaration[34492-34667]:MethodDeclaration[34492-34667]"
  }, {
    "left" : "package isLoopStructure(n ) : boolean",
    "right" : "package isLoopStructure(n ) : boolean",
    "info" : "MethodDeclaration[34671-34953]:MethodDeclaration[34671-34953]"
  }, {
    "left" : "package getLoopCodeBlock(n ) : ",
    "right" : "package getLoopCodeBlock(n ) : ",
    "info" : "MethodDeclaration[34957-35360]:MethodDeclaration[34957-35360]"
  }, {
    "left" : "package isWithinLoop(n ) : boolean",
    "right" : "package isWithinLoop(n ) : boolean",
    "info" : "MethodDeclaration[35364-35721]:MethodDeclaration[35364-35721]"
  }, {
    "left" : "package isControlStructure(n ) : boolean",
    "right" : "package isControlStructure(n ) : boolean",
    "info" : "MethodDeclaration[35725-36208]:MethodDeclaration[35725-36208]"
  }, {
    "left" : "package isControlStructureCodeBlock(parent , n ) : boolean",
    "right" : "package isControlStructureCodeBlock(parent , n ) : boolean",
    "info" : "MethodDeclaration[36212-37093]:MethodDeclaration[36212-37093]"
  }, {
    "left" : "package getConditionExpression(n ) : ",
    "right" : "package getConditionExpression(n ) : ",
    "info" : "MethodDeclaration[37097-37897]:MethodDeclaration[37097-37897]"
  }, {
    "left" : "package isStatementBlock(n ) : boolean",
    "right" : "package isStatementBlock(n ) : boolean",
    "info" : "MethodDeclaration[37901-38102]:MethodDeclaration[37901-38102]"
  }, {
    "left" : "package isStatement(n ) : boolean",
    "right" : "package isStatement(n ) : boolean",
    "info" : "MethodDeclaration[38106-38655]:MethodDeclaration[38106-38655]"
  }, {
    "left" : "package isSwitchCase(n ) : boolean",
    "right" : "package isSwitchCase(n ) : boolean",
    "info" : "MethodDeclaration[38659-38827]:MethodDeclaration[38659-38827]"
  }, {
    "left" : "package isReferenceName(n ) : boolean",
    "right" : "package isReferenceName(n ) : boolean",
    "info" : "MethodDeclaration[38831-39090]:MethodDeclaration[38831-39090]"
  }, {
    "left" : "package isLabelName(n ) : boolean",
    "right" : "package isLabelName(n ) : boolean",
    "info" : "MethodDeclaration[39094-39244]:MethodDeclaration[39094-39244]"
  }, {
    "left" : "package isTryFinallyNode(parent , child ) : boolean",
    "right" : "package isTryFinallyNode(parent , child ) : boolean",
    "info" : "MethodDeclaration[39248-39488]:MethodDeclaration[39248-39488]"
  }, {
    "left" : "package removeChild(parent , node ) : void",
    "right" : "package removeChild(parent , node ) : void",
    "info" : "MethodDeclaration[39492-41158]:MethodDeclaration[39492-41158]"
  }, {
    "left" : "package tryMergeBlock(block ) : boolean",
    "right" : "package tryMergeBlock(block ) : boolean",
    "info" : "MethodDeclaration[41162-41851]:MethodDeclaration[41162-41851]"
  }, {
    "left" : "package isCall(n ) : boolean",
    "right" : "package isCall(n ) : boolean",
    "info" : "MethodDeclaration[41855-41966]:MethodDeclaration[41855-41966]"
  }, {
    "left" : "package isCallOrNew(node ) : boolean",
    "right" : "package isCallOrNew(node ) : boolean",
    "info" : "MethodDeclaration[41970-42160]:MethodDeclaration[41970-42160]"
  }, {
    "left" : "package isFunction(n ) : boolean",
    "right" : "package isFunction(n ) : boolean",
    "info" : "MethodDeclaration[42164-42287]:MethodDeclaration[42164-42287]"
  }, {
    "left" : "package getFunctionBody(fn ) : ",
    "right" : "package getFunctionBody(fn ) : ",
    "info" : "MethodDeclaration[42291-42478]:MethodDeclaration[42291-42478]"
  }, {
    "left" : "package isThis(node ) : boolean",
    "right" : "package isThis(node ) : boolean",
    "info" : "MethodDeclaration[42482-42599]:MethodDeclaration[42482-42599]"
  }, {
    "left" : "package containsCall(n ) : boolean",
    "right" : "package containsCall(n ) : boolean",
    "info" : "MethodDeclaration[42603-42745]:MethodDeclaration[42603-42745]"
  }, {
    "left" : "package isFunctionDeclaration(n ) : boolean",
    "right" : "package isFunctionDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[42749-43098]:MethodDeclaration[42749-43098]"
  }, {
    "left" : "package isHoistedFunctionDeclaration(n ) : boolean",
    "right" : "package isHoistedFunctionDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[43102-43504]:MethodDeclaration[43102-43504]"
  }, {
    "left" : "package isFunctionExpression(n ) : boolean",
    "right" : "package isFunctionExpression(n ) : boolean",
    "info" : "MethodDeclaration[43508-44274]:MethodDeclaration[43508-44274]"
  }, {
    "left" : "package isEmptyFunctionExpression(node ) : boolean",
    "right" : "package isEmptyFunctionExpression(node ) : boolean",
    "info" : "MethodDeclaration[44278-44602]:MethodDeclaration[44278-44602]"
  }, {
    "left" : "package isVarArgsFunction(function ) : boolean",
    "right" : "package isVarArgsFunction(function ) : boolean",
    "info" : "MethodDeclaration[44606-44976]:MethodDeclaration[44606-44976]"
  }, {
    "left" : "package isObjectCallMethod(callNode , methodName ) : boolean",
    "right" : "package isObjectCallMethod(callNode , methodName ) : boolean",
    "info" : "MethodDeclaration[44980-45583]:MethodDeclaration[44980-45583]"
  }, {
    "left" : "package isFunctionObjectCall(callNode ) : boolean",
    "right" : "package isFunctionObjectCall(callNode ) : boolean",
    "info" : "MethodDeclaration[45588-45823]:MethodDeclaration[45588-45823]"
  }, {
    "left" : "package isFunctionObjectApply(callNode ) : boolean",
    "right" : "package isFunctionObjectApply(callNode ) : boolean",
    "info" : "MethodDeclaration[45827-46066]:MethodDeclaration[45827-46066]"
  }, {
    "left" : "package isFunctionObjectCallOrApply(callNode ) : boolean",
    "right" : "package isFunctionObjectCallOrApply(callNode ) : boolean",
    "info" : "MethodDeclaration[46070-46395]:MethodDeclaration[46070-46395]"
  }, {
    "left" : "package isSimpleFunctionObjectCall(callNode ) : boolean",
    "right" : "package isSimpleFunctionObjectCall(callNode ) : boolean",
    "info" : "MethodDeclaration[46399-46794]:MethodDeclaration[46399-46794]"
  }, {
    "left" : "package isLhs(n , parent ) : boolean",
    "right" : "package isLhs(n , parent ) : boolean",
    "info" : "MethodDeclaration[46798-47316]:MethodDeclaration[46798-47316]"
  }, {
    "left" : "package isObjectLitKey(node , parent ) : boolean",
    "right" : "package isObjectLitKey(node , parent ) : boolean",
    "info" : "MethodDeclaration[47320-47792]:MethodDeclaration[47320-47792]"
  }, {
    "left" : "package isGetOrSetKey(node ) : boolean",
    "right" : "package isGetOrSetKey(node ) : boolean",
    "info" : "MethodDeclaration[47796-48127]:MethodDeclaration[47796-48127]"
  }, {
    "left" : "package opToStr(operator int) : ",
    "right" : "package opToStr(operator int) : ",
    "info" : "MethodDeclaration[48131-50044]:MethodDeclaration[48131-50044]"
  }, {
    "left" : "package opToStrNoFail(operator int) : ",
    "right" : "package opToStrNoFail(operator int) : ",
    "info" : "MethodDeclaration[50048-50551]:MethodDeclaration[50048-50551]"
  }, {
    "left" : "package containsType(node , type int, traverseChildrenPred ) : boolean",
    "right" : "package containsType(node , type int, traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[50555-50860]:MethodDeclaration[50555-50860]"
  }, {
    "left" : "package containsType(node , type int) : boolean",
    "right" : "package containsType(node , type int) : boolean",
    "info" : "MethodDeclaration[50864-51070]:MethodDeclaration[50864-51070]"
  }, {
    "left" : "package redeclareVarsInsideBranch(branch ) : void",
    "right" : "package redeclareVarsInsideBranch(branch ) : void",
    "info" : "MethodDeclaration[51075-51822]:MethodDeclaration[51075-51822]"
  }, {
    "left" : "package copyNameAnnotations(source , destination ) : void",
    "right" : "package copyNameAnnotations(source , destination ) : void",
    "info" : "MethodDeclaration[51826-52127]:MethodDeclaration[51826-52127]"
  }, {
    "left" : "private getAddingRoot(n ) : ",
    "right" : "private getAddingRoot(n ) : ",
    "info" : "MethodDeclaration[52131-52953]:MethodDeclaration[52131-52953]"
  }, {
    "left" : "public newFunctionNode(name , params , body , lineno int, charno int) : ",
    "right" : "public newFunctionNode(name , params , body , lineno int, charno int) : ",
    "info" : "MethodDeclaration[52957-53534]:MethodDeclaration[52957-53534]"
  }, {
    "left" : "public newQualifiedNameNode(convention , name , lineno int, charno int) : ",
    "right" : "public newQualifiedNameNode(convention , name , lineno int, charno int) : ",
    "info" : "MethodDeclaration[53538-54693]:MethodDeclaration[53538-54693]"
  }, {
    "left" : "package newQualifiedNameNode(convention , name , basisNode , originalName ) : ",
    "right" : "package newQualifiedNameNode(convention , name , basisNode , originalName ) : ",
    "info" : "MethodDeclaration[54697-55491]:MethodDeclaration[54697-55491]"
  }, {
    "left" : "package getRootOfQualifiedName(qName ) : ",
    "right" : "package getRootOfQualifiedName(qName ) : ",
    "info" : "MethodDeclaration[55495-55899]:MethodDeclaration[55495-55899]"
  }, {
    "left" : "package setDebugInformation(node , basisNode , originalName ) : void",
    "right" : "package setDebugInformation(node , basisNode , originalName ) : void",
    "info" : "MethodDeclaration[55903-56434]:MethodDeclaration[55903-56434]"
  }, {
    "left" : "private newName(convention , name , lineno int, charno int) : ",
    "right" : "private newName(convention , name , lineno int, charno int) : ",
    "info" : "MethodDeclaration[56438-56740]:MethodDeclaration[56438-56740]"
  }, {
    "left" : "package newName(convention , name , basisNode ) : ",
    "right" : "package newName(convention , name , basisNode ) : ",
    "info" : "MethodDeclaration[56744-57388]:MethodDeclaration[56744-57388]"
  }, {
    "left" : "package newName(convention , name , basisNode , originalName ) : ",
    "right" : "package newName(convention , name , basisNode , originalName ) : ",
    "info" : "MethodDeclaration[57392-58161]:MethodDeclaration[57392-58161]"
  }, {
    "left" : "package isLatin(s ...) : boolean",
    "right" : "package isLatin(s ...) : boolean",
    "info" : "MethodDeclaration[58165-59032]:MethodDeclaration[58165-59032]"
  }, {
    "left" : "package isValidPropertyName(name ) : boolean",
    "right" : "package isValidPropertyName(name ) : boolean",
    "info" : "MethodDeclaration[59036-59697]:MethodDeclaration[59036-59697]"
  }, {
    "left" : "class : VarCollector",
    "right" : "class : VarCollector",
    "info" : "TypeDeclaration[59701-60138]:TypeDeclaration[59701-60138]"
  }, {
    "left" : "vars",
    "right" : "vars",
    "info" : "FieldDeclaration[59760-59815]:FieldDeclaration[59760-59815]"
  }, {
    "left" : "public visit(n ) : void",
    "right" : "public visit(n ) : void",
    "info" : "MethodDeclaration[59821-60134]:MethodDeclaration[59821-60134]"
  }, {
    "left" : "public getVarsDeclaredInBranch(root ) : ",
    "right" : "public getVarsDeclaredInBranch(root ) : ",
    "info" : "MethodDeclaration[60142-60476]:MethodDeclaration[60142-60476]"
  }, {
    "left" : "package isPrototypePropertyDeclaration(n ) : boolean",
    "right" : "package isPrototypePropertyDeclaration(n ) : boolean",
    "info" : "MethodDeclaration[60480-60778]:MethodDeclaration[60480-60778]"
  }, {
    "left" : "package isPrototypeProperty(n ) : boolean",
    "right" : "package isPrototypeProperty(n ) : boolean",
    "info" : "MethodDeclaration[60782-61018]:MethodDeclaration[60782-61018]"
  }, {
    "left" : "package getPrototypeClassName(qName ) : ",
    "right" : "package getPrototypeClassName(qName ) : ",
    "info" : "MethodDeclaration[61022-61381]:MethodDeclaration[61022-61381]"
  }, {
    "left" : "package getPrototypePropertyName(qName ) : ",
    "right" : "package getPrototypePropertyName(qName ) : ",
    "info" : "MethodDeclaration[61385-61743]:MethodDeclaration[61385-61743]"
  }, {
    "left" : "package newUndefinedNode(srcReferenceNode ) : ",
    "right" : "package newUndefinedNode(srcReferenceNode ) : ",
    "info" : "MethodDeclaration[61747-62130]:MethodDeclaration[61747-62130]"
  }, {
    "left" : "package newVarNode(name , value ) : ",
    "right" : "package newVarNode(name , value ) : ",
    "info" : "MethodDeclaration[62134-62603]:MethodDeclaration[62134-62603]"
  }, {
    "left" : "class : MatchNameNode",
    "right" : "class : MatchNameNode",
    "info" : "TypeDeclaration[62607-62959]:TypeDeclaration[62607-62959]"
  }, {
    "left" : "name",
    "right" : "name",
    "info" : "FieldDeclaration[62752-62770]:FieldDeclaration[62752-62770]"
  }, {
    "left" : "package MatchNameNode(name )",
    "right" : "package MatchNameNode(name )",
    "info" : "MethodDeclaration[62776-62833]:MethodDeclaration[62776-62833]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[62839-62955]:MethodDeclaration[62839-62955]"
  }, {
    "left" : "class : MatchNodeType",
    "right" : "class : MatchNodeType",
    "info" : "TypeDeclaration[62963-63250]:TypeDeclaration[62963-63250]"
  }, {
    "left" : "type",
    "right" : "type",
    "info" : "FieldDeclaration[63095-63110]:FieldDeclaration[63095-63110]"
  }, {
    "left" : "package MatchNodeType(type int)",
    "right" : "package MatchNodeType(type int)",
    "info" : "MethodDeclaration[63116-63170]:MethodDeclaration[63116-63170]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[63176-63246]:MethodDeclaration[63176-63246]"
  }, {
    "left" : "class : MatchDeclaration",
    "right" : "class : MatchDeclaration",
    "info" : "TypeDeclaration[63255-63497]:TypeDeclaration[63255-63497]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[63390-63493]:MethodDeclaration[63390-63493]"
  }, {
    "left" : "class : MatchNotFunction",
    "right" : "class : MatchNotFunction",
    "info" : "TypeDeclaration[63501-63706]:TypeDeclaration[63501-63706]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[63637-63702]:MethodDeclaration[63637-63702]"
  }, {
    "left" : "class : MatchShallowStatement",
    "right" : "class : MatchShallowStatement",
    "info" : "TypeDeclaration[63710-64117]:TypeDeclaration[63710-64117]"
  }, {
    "left" : "public apply(n ) : boolean",
    "right" : "public apply(n ) : boolean",
    "info" : "MethodDeclaration[63865-64113]:MethodDeclaration[63865-64113]"
  }, {
    "left" : "package getNodeTypeReferenceCount(node , type int, traverseChildrenPred ) : int",
    "right" : "package getNodeTypeReferenceCount(node , type int, traverseChildrenPred ) : int",
    "info" : "MethodDeclaration[64121-64389]:MethodDeclaration[64121-64389]"
  }, {
    "left" : "package isNameReferenced(node , name , traverseChildrenPred ) : boolean",
    "right" : "package isNameReferenced(node , name , traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[64393-64704]:MethodDeclaration[64393-64704]"
  }, {
    "left" : "package isNameReferenced(node , name ) : boolean",
    "right" : "package isNameReferenced(node , name ) : boolean",
    "info" : "MethodDeclaration[64708-64916]:MethodDeclaration[64708-64916]"
  }, {
    "left" : "package getNameReferenceCount(node , name ) : int",
    "right" : "package getNameReferenceCount(node , name ) : int",
    "info" : "MethodDeclaration[64920-65167]:MethodDeclaration[64920-65167]"
  }, {
    "left" : "package has(node , pred , traverseChildrenPred ) : boolean",
    "right" : "package has(node , pred , traverseChildrenPred ) : boolean",
    "info" : "MethodDeclaration[65171-65698]:MethodDeclaration[65171-65698]"
  }, {
    "left" : "package getCount(n , pred , traverseChildrenPred ) : int",
    "right" : "package getCount(n , pred , traverseChildrenPred ) : int",
    "info" : "MethodDeclaration[65702-66183]:MethodDeclaration[65702-66183]"
  }, {
    "left" : "interface : Visitor",
    "right" : "interface : Visitor",
    "info" : "TypeDeclaration[66187-66319]:TypeDeclaration[66187-66319]"
  }, {
    "left" : "public visit(node ) : void",
    "right" : "public visit(node ) : void",
    "info" : "MethodDeclaration[66293-66315]:MethodDeclaration[66293-66315]"
  }, {
    "left" : "package visitPreOrder(node , vistor , traverseChildrenPred ) : void",
    "right" : "package visitPreOrder(node , vistor , traverseChildrenPred ) : void",
    "info" : "MethodDeclaration[66323-66777]:MethodDeclaration[66323-66777]"
  }, {
    "left" : "package visitPostOrder(node , vistor , traverseChildrenPred ) : void",
    "right" : "package visitPostOrder(node , vistor , traverseChildrenPred ) : void",
    "info" : "MethodDeclaration[66781-67238]:MethodDeclaration[66781-67238]"
  }, {
    "left" : "package hasFinally(n ) : boolean",
    "right" : "package hasFinally(n ) : boolean",
    "info" : "MethodDeclaration[67242-67440]:MethodDeclaration[67242-67440]"
  }, {
    "left" : "package getCatchBlock(n ) : ",
    "right" : "package getCatchBlock(n ) : ",
    "info" : "MethodDeclaration[67444-67672]:MethodDeclaration[67444-67672]"
  }, {
    "left" : "package hasCatchHandler(n ) : boolean",
    "right" : "package hasCatchHandler(n ) : boolean",
    "info" : "MethodDeclaration[67676-67963]:MethodDeclaration[67676-67963]"
  }, {
    "left" : "package getFnParameters(fnNode ) : ",
    "right" : "package getFnParameters(fnNode ) : ",
    "info" : "MethodDeclaration[67967-68296]:MethodDeclaration[67967-68296]"
  }, {
    "left" : "package isConstantName(node ) : boolean",
    "right" : "package isConstantName(node ) : boolean",
    "info" : "MethodDeclaration[68300-69103]:MethodDeclaration[68300-69103]"
  }, {
    "left" : "package isConstantByConvention(convention , node , parent ) : boolean",
    "right" : "package isConstantByConvention(convention , node , parent ) : boolean",
    "info" : "MethodDeclaration[69107-69596]:MethodDeclaration[69107-69596]"
  }, {
    "left" : "package getInfoForNameNode(nameNode ) : ",
    "right" : "package getInfoForNameNode(nameNode ) : ",
    "info" : "MethodDeclaration[69600-70125]:MethodDeclaration[69600-70125]"
  }, {
    "left" : "package getFunctionInfo(n ) : ",
    "right" : "package getFunctionInfo(n ) : ",
    "info" : "MethodDeclaration[70129-70757]:MethodDeclaration[70129-70757]"
  }, {
    "left" : "package getSourceName(n ) : ",
    "right" : "package getSourceName(n ) : ",
    "info" : "MethodDeclaration[70761-71097]:MethodDeclaration[70761-71097]"
  }, {
    "left" : "package newCallNode(callTarget , ) : ",
    "right" : "package newCallNode(callTarget , ) : ",
    "info" : "MethodDeclaration[71101-71496]:MethodDeclaration[71101-71496]"
  }, {
    "left" : "package evaluatesToLocalValue(value ) : boolean",
    "right" : "package evaluatesToLocalValue(value ) : boolean",
    "info" : "MethodDeclaration[71500-71731]:MethodDeclaration[71500-71731]"
  }, {
    "left" : "package evaluatesToLocalValue(value , locals ...) : boolean",
    "right" : "package evaluatesToLocalValue(value , locals ...) : boolean",
    "info" : "MethodDeclaration[71735-74543]:MethodDeclaration[71735-74544]"
  }, {
    "left" : "private getNthSibling(first , index int) : ",
    "right" : "private getNthSibling(first , index int) : ",
    "info" : "MethodDeclaration[74547-74945]:MethodDeclaration[74548-74946]"
  }, {
    "left" : "package getArgumentForFunction(function , index int) : ",
    "right" : "package getArgumentForFunction(function , index int) : ",
    "info" : "MethodDeclaration[74949-75270]:MethodDeclaration[74950-75271]"
  }, {
    "left" : "package getArgumentForCallOrNew(call , index int) : ",
    "right" : "package getArgumentForCallOrNew(call , index int) : ",
    "info" : "MethodDeclaration[75274-75581]:MethodDeclaration[75275-75582]"
  }, {
    "left" : "private isToStringMethodCall(call ) : boolean",
    "right" : "private isToStringMethodCall(call ) : boolean",
    "info" : "MethodDeclaration[75585-75858]:MethodDeclaration[75586-75859]"
  } ],
  "mappings" : [
 {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[1398-1404]:Modifier[1398-1404]"
  }, {
    "left" : "final",
    "right" : "final",
    "info" : "Modifier[1405-1410]:Modifier[1405-1410]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[1411-1416]:TYPE_DECLARATION_KIND[1411-1416]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[1977-1984]:Modifier[1977-1984]"
  }, {
    "left" : "NodeUtil",
    "right" : "NodeUtil",
    "info" : "SimpleName[1985-1993]:SimpleName[1985-1993]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[1996-1998]:Block[1996-1998]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[2285-2291]:Modifier[2285-2291]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[2292-2304]:SimpleType[2292-2304]"
  }, {
    "left" : "getExpressionBooleanValue",
    "right" : "getExpressionBooleanValue",
    "info" : "SimpleName[2305-2330]:SimpleName[2305-2330]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[2331-2337]:SingleVariableDeclaration[2331-2337]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2339-3491]:Block[2339-3491]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getExpressionBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getExpressionBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      default:\n        return getBooleanValue(n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ASSIGN:\n      case Token.COMMA:\n        // For ASSIGN and COMMA the value is the value of the RHS.\n        return getExpressionBooleanValue(n.getLastChild());\n      case Token.NOT:\n        TernaryValue value = getExpressionBooleanValue(n.getLastChild());\n        return value.not();\n      case Token.AND: {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.and(rhs);\n      }\n      case Token.OR:  {\n        TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());\n        TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());\n        return lhs.or(rhs);\n      }\n      case Token.HOOK:  {\n        TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());\n        TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());\n        if (trueValue.equals(falseValue)) {\n          return trueValue;\n        } else {\n          return TernaryValue.UNKNOWN;\n        }\n      }\n      default:\n        return getBooleanValue(n);\n    }",
    "info" : "SwitchStatement[2345-3487]:SwitchStatement[2345-3487]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[2374-2392]:SwitchCase[2374-2392]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[2399-2416]:SwitchCase[2399-2416]"
  }, {
    "left" : "return getExpressionBooleanValue(n.getLastChild());",
    "right" : "return getExpressionBooleanValue(n.getLastChild());",
    "info" : "ReturnStatement[2492-2543]:ReturnStatement[2492-2543]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[2550-2565]:SwitchCase[2550-2565]"
  }, {
    "left" : "TernaryValue value = getExpressionBooleanValue(n.getLastChild());",
    "right" : "TernaryValue value = getExpressionBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[2574-2639]:VariableDeclarationStatement[2574-2639]"
  }, {
    "left" : "return value.not();",
    "right" : "return value.not();",
    "info" : "ReturnStatement[2648-2667]:ReturnStatement[2648-2667]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[2674-2689]:SwitchCase[2674-2689]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2690-2873]:Block[2690-2873]"
  }, {
    "left" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[2700-2764]:VariableDeclarationStatement[2700-2764]"
  }, {
    "left" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
    "right" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[2773-2836]:VariableDeclarationStatement[2773-2836]"
  }, {
    "left" : "return lhs.and(rhs);",
    "right" : "return lhs.and(rhs);",
    "info" : "ReturnStatement[2845-2865]:ReturnStatement[2845-2865]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[2880-2894]:SwitchCase[2880-2894]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[2896-3078]:Block[2896-3078]"
  }, {
    "left" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
    "right" : "TernaryValue lhs = getExpressionBooleanValue(n.getFirstChild());",
    "info" : "VariableDeclarationStatement[2906-2970]:VariableDeclarationStatement[2906-2970]"
  }, {
    "left" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
    "right" : "TernaryValue rhs = getExpressionBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[2979-3042]:VariableDeclarationStatement[2979-3042]"
  }, {
    "left" : "return lhs.or(rhs);",
    "right" : "return lhs.or(rhs);",
    "info" : "ReturnStatement[3051-3070]:ReturnStatement[3051-3070]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[3085-3101]:SwitchCase[3085-3101]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3103-3431]:Block[3103-3431]"
  }, {
    "left" : "TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());",
    "right" : "TernaryValue trueValue = getExpressionBooleanValue(\n            n.getFirstChild().getNext());",
    "info" : "VariableDeclarationStatement[3113-3206]:VariableDeclarationStatement[3113-3206]"
  }, {
    "left" : "TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());",
    "right" : "TernaryValue falseValue = getExpressionBooleanValue(n.getLastChild());",
    "info" : "VariableDeclarationStatement[3215-3285]:VariableDeclarationStatement[3215-3285]"
  }, {
    "left" : "if (trueValue.equals(falseValue))",
    "right" : "if (trueValue.equals(falseValue))",
    "info" : "IfStatement[3294-3423]:IfStatement[3294-3423]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3328-3367]:Block[3328-3367]"
  }, {
    "left" : "return trueValue;",
    "right" : "return trueValue;",
    "info" : "ReturnStatement[3340-3357]:ReturnStatement[3340-3357]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3373-3423]:Block[3373-3423]"
  }, {
    "left" : "return TernaryValue.UNKNOWN;",
    "right" : "return TernaryValue.UNKNOWN;",
    "info" : "ReturnStatement[3385-3413]:ReturnStatement[3385-3413]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[3438-3446]:SwitchCase[3438-3446]"
  }, {
    "left" : "return getBooleanValue(n);",
    "right" : "return getBooleanValue(n);",
    "info" : "ReturnStatement[3455-3481]:ReturnStatement[3455-3481]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[3663-3669]:Modifier[3663-3669]"
  }, {
    "left" : "TernaryValue",
    "right" : "TernaryValue",
    "info" : "SimpleType[3670-3682]:SimpleType[3670-3682]"
  }, {
    "left" : "getBooleanValue",
    "right" : "getBooleanValue",
    "info" : "SimpleName[3683-3698]:SimpleName[3683-3698]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[3699-3705]:SingleVariableDeclaration[3699-3705]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[3707-4629]:Block[3707-4629]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return TernaryValue.forBoolean(n.getString().length() > 0);\n\n      case Token.NUMBER:\n        return TernaryValue.forBoolean(n.getDouble() != 0);\n\n      case Token.NULL:\n      case Token.FALSE:\n      case Token.VOID:\n        return TernaryValue.FALSE;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"NaN\".equals(name)) {\n          // We assume here that programs don't change the value of the keyword\n          // undefined to something other than the value undefined.\n          return TernaryValue.FALSE;\n        } else if (\"Infinity\".equals(name)) {\n          return TernaryValue.TRUE;\n        }\n        break;\n\n      case Token.TRUE:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n        return TernaryValue.TRUE;\n    }",
    "info" : "SwitchStatement[3713-4591]:SwitchStatement[3713-4591]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[3742-3760]:SwitchCase[3742-3760]"
  }, {
    "left" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
    "right" : "return TernaryValue.forBoolean(n.getString().length() > 0);",
    "info" : "ReturnStatement[3769-3828]:ReturnStatement[3769-3828]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[3836-3854]:SwitchCase[3836-3854]"
  }, {
    "left" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
    "right" : "return TernaryValue.forBoolean(n.getDouble() != 0);",
    "info" : "ReturnStatement[3863-3914]:ReturnStatement[3863-3914]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[3922-3938]:SwitchCase[3922-3938]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[3945-3962]:SwitchCase[3945-3962]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[3969-3985]:SwitchCase[3969-3985]"
  }, {
    "left" : "return TernaryValue.FALSE;",
    "right" : "return TernaryValue.FALSE;",
    "info" : "ReturnStatement[3994-4020]:ReturnStatement[3994-4020]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[4028-4044]:SwitchCase[4028-4044]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[4053-4081]:VariableDeclarationStatement[4053-4081]"
  }, {
    "left" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
    "right" : "if (\"undefined\".equals(name)\n            || \"NaN\".equals(name))",
    "info" : "IfStatement[4090-4432]:IfStatement[4090-4432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4154-4350]:Block[4154-4350]"
  }, {
    "left" : "return TernaryValue.FALSE;",
    "right" : "return TernaryValue.FALSE;",
    "info" : "ReturnStatement[4314-4340]:ReturnStatement[4314-4340]"
  }, {
    "left" : "if (\"Infinity\".equals(name))",
    "right" : "if (\"Infinity\".equals(name))",
    "info" : "IfStatement[4356-4432]:IfStatement[4356-4432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4385-4432]:Block[4385-4432]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[4397-4422]:ReturnStatement[4397-4422]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[4441-4447]:BreakStatement[4441-4447]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[4455-4471]:SwitchCase[4455-4471]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[4478-4498]:SwitchCase[4478-4498]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[4505-4526]:SwitchCase[4505-4526]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[4533-4551]:SwitchCase[4533-4551]"
  }, {
    "left" : "return TernaryValue.TRUE;",
    "right" : "return TernaryValue.TRUE;",
    "info" : "ReturnStatement[4560-4585]:ReturnStatement[4560-4585]"
  }, {
    "left" : "return TernaryValue.UNKNOWN;",
    "right" : "return TernaryValue.UNKNOWN;",
    "info" : "ReturnStatement[4597-4625]:ReturnStatement[4597-4625]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[4854-4860]:Modifier[4854-4860]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[4861-4867]:SimpleType[4861-4867]"
  }, {
    "left" : "getStringValue",
    "right" : "getStringValue",
    "info" : "SimpleName[4868-4882]:SimpleName[4868-4882]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[4883-4889]:SingleVariableDeclaration[4883-4889]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[4891-5767]:Block[4891-5767]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n        return n.getString();\n\n      case Token.NAME:\n        String name = n.getString();\n        if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name)) {\n          return name;\n        }\n        break;\n\n      case Token.NUMBER:\n        double value = n.getDouble();\n        long longValue = (long) value;\n\n        // Return \"1\" instead of \"1.0\"\n        if (longValue == value) {\n          return Long.toString(longValue);\n        } else {\n          return Double.toString(n.getDouble());\n        }\n\n      case Token.FALSE:\n      case Token.TRUE:\n      case Token.NULL:\n        return Node.tokenToName(n.getType());\n\n      case Token.VOID:\n        return \"undefined\";\n    }",
    "info" : "SwitchStatement[4976-5746]:SwitchStatement[4976-5746]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[5005-5023]:SwitchCase[5005-5023]"
  }, {
    "left" : "return n.getString();",
    "right" : "return n.getString();",
    "info" : "ReturnStatement[5032-5053]:ReturnStatement[5032-5053]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[5061-5077]:SwitchCase[5061-5077]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[5086-5114]:VariableDeclarationStatement[5086-5114]"
  }, {
    "left" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
    "right" : "if (\"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name))",
    "info" : "IfStatement[5123-5260]:IfStatement[5123-5260]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5226-5260]:Block[5226-5260]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[5238-5250]:ReturnStatement[5238-5250]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[5269-5275]:BreakStatement[5269-5275]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[5283-5301]:SwitchCase[5283-5301]"
  }, {
    "left" : "double value = n.getDouble();",
    "right" : "double value = n.getDouble();",
    "info" : "VariableDeclarationStatement[5310-5339]:VariableDeclarationStatement[5310-5339]"
  }, {
    "left" : "long longValue = (long) value;",
    "right" : "long longValue = (long) value;",
    "info" : "VariableDeclarationStatement[5348-5378]:VariableDeclarationStatement[5348-5378]"
  }, {
    "left" : "if (longValue == value)",
    "right" : "if (longValue == value)",
    "info" : "IfStatement[5427-5571]:IfStatement[5427-5571]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5451-5505]:Block[5451-5505]"
  }, {
    "left" : "return Long.toString(longValue);",
    "right" : "return Long.toString(longValue);",
    "info" : "ReturnStatement[5463-5495]:ReturnStatement[5463-5495]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[5511-5571]:Block[5511-5571]"
  }, {
    "left" : "return Double.toString(n.getDouble());",
    "right" : "return Double.toString(n.getDouble());",
    "info" : "ReturnStatement[5523-5561]:ReturnStatement[5523-5561]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[5579-5596]:SwitchCase[5579-5596]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[5603-5619]:SwitchCase[5603-5619]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[5626-5642]:SwitchCase[5626-5642]"
  }, {
    "left" : "return Node.tokenToName(n.getType());",
    "right" : "return Node.tokenToName(n.getType());",
    "info" : "ReturnStatement[5651-5688]:ReturnStatement[5651-5688]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[5696-5712]:SwitchCase[5696-5712]"
  }, {
    "left" : "return \"undefined\";",
    "right" : "return \"undefined\";",
    "info" : "ReturnStatement[5721-5740]:ReturnStatement[5721-5740]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[5751-5763]:ReturnStatement[5751-5763]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[5991-5997]:Modifier[5991-5997]"
  }, {
    "left" : "Double",
    "right" : "Double",
    "info" : "SimpleType[5998-6004]:SimpleType[5998-6004]"
  }, {
    "left" : "getNumberValue",
    "right" : "getNumberValue",
    "info" : "SimpleName[6005-6019]:SimpleName[6005-6019]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[6020-6026]:SingleVariableDeclaration[6020-6026]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6028-6626]:Block[6028-6626]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        return Double.NaN;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.TRUE:\n        return 1.0;\n      case Token.FALSE:\n      case Token.NULL:\n        return 0.0;\n\n      case Token.NUMBER:\n        return n.getDouble();\n\n      case Token.VOID:\n        return Double.NaN;\n\n      case Token.NAME:\n        String name = n.getString();\n        if (name.equals(\"undefined\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"NaN\")) {\n          return Double.NaN;\n        }\n        if (name.equals(\"Infinity\")) {\n          return Double.POSITIVE_INFINITY;\n        }\n        return null;\n    }",
    "info" : "SwitchStatement[6034-6605]:SwitchStatement[6034-6605]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[6063-6079]:SwitchCase[6063-6079]"
  }, {
    "left" : "return 1.0;",
    "right" : "return 1.0;",
    "info" : "ReturnStatement[6088-6099]:ReturnStatement[6088-6099]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[6106-6123]:SwitchCase[6106-6123]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[6130-6146]:SwitchCase[6130-6146]"
  }, {
    "left" : "return 0.0;",
    "right" : "return 0.0;",
    "info" : "ReturnStatement[6155-6166]:ReturnStatement[6155-6166]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[6174-6192]:SwitchCase[6174-6192]"
  }, {
    "left" : "return n.getDouble();",
    "right" : "return n.getDouble();",
    "info" : "ReturnStatement[6201-6222]:ReturnStatement[6201-6222]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[6230-6246]:SwitchCase[6230-6246]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[6255-6273]:ReturnStatement[6255-6273]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[6281-6297]:SwitchCase[6281-6297]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[6306-6334]:VariableDeclarationStatement[6306-6334]"
  }, {
    "left" : "if (name.equals(\"undefined\"))",
    "right" : "if (name.equals(\"undefined\"))",
    "info" : "IfStatement[6343-6413]:IfStatement[6343-6413]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6373-6413]:Block[6373-6413]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[6385-6403]:ReturnStatement[6385-6403]"
  }, {
    "left" : "if (name.equals(\"NaN\"))",
    "right" : "if (name.equals(\"NaN\"))",
    "info" : "IfStatement[6422-6486]:IfStatement[6422-6486]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6446-6486]:Block[6446-6486]"
  }, {
    "left" : "return Double.NaN;",
    "right" : "return Double.NaN;",
    "info" : "ReturnStatement[6458-6476]:ReturnStatement[6458-6476]"
  }, {
    "left" : "if (name.equals(\"Infinity\"))",
    "right" : "if (name.equals(\"Infinity\"))",
    "info" : "IfStatement[6495-6578]:IfStatement[6495-6578]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[6524-6578]:Block[6524-6578]"
  }, {
    "left" : "return Double.POSITIVE_INFINITY;",
    "right" : "return Double.POSITIVE_INFINITY;",
    "info" : "ReturnStatement[6536-6568]:ReturnStatement[6536-6568]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6587-6599]:ReturnStatement[6587-6599]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[6610-6622]:ReturnStatement[6610-6622]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[7243-7249]:Modifier[7243-7249]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[7250-7256]:SimpleType[7250-7256]"
  }, {
    "left" : "getFunctionName",
    "right" : "getFunctionName",
    "info" : "SimpleName[7257-7272]:SimpleName[7257-7272]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[7273-7279]:SingleVariableDeclaration[7273-7279]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[7281-7834]:Block[7281-7834]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[7287-7315]:VariableDeclarationStatement[7287-7315]"
  }, {
    "left" : "String name = n.getFirstChild().getString();",
    "right" : "String name = n.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[7320-7364]:VariableDeclarationStatement[7320-7364]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.NAME:\n        // var name = function() ...\n        // var name2 = function name1() ...\n        return parent.getString();\n\n      case Token.ASSIGN:\n        // qualified.name = function() ...\n        // qualified.name2 = function name1() ...\n        return parent.getFirstChild().getQualifiedName();\n\n      default:\n        // function name() ...\n        return name != null && name.length() != 0 ? name : null;\n    }",
    "info" : "SwitchStatement[7369-7830]:SwitchStatement[7369-7830]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[7403-7419]:SwitchCase[7403-7419]"
  }, {
    "left" : "return parent.getString();",
    "right" : "return parent.getString();",
    "info" : "ReturnStatement[7509-7535]:ReturnStatement[7509-7535]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[7543-7561]:SwitchCase[7543-7561]"
  }, {
    "left" : "return parent.getFirstChild().getQualifiedName();",
    "right" : "return parent.getFirstChild().getQualifiedName();",
    "info" : "ReturnStatement[7663-7712]:ReturnStatement[7663-7712]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[7720-7728]:SwitchCase[7720-7728]"
  }, {
    "left" : "return name != null && name.length() != 0 ? name : null;",
    "right" : "return name != null && name.length() != 0 ? name : null;",
    "info" : "ReturnStatement[7768-7824]:ReturnStatement[7768-7824]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8439-8445]:Modifier[8439-8445]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[8446-8452]:SimpleType[8446-8452]"
  }, {
    "left" : "getNearestFunctionName",
    "right" : "getNearestFunctionName",
    "info" : "SimpleName[8453-8475]:SimpleName[8453-8475]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8476-8482]:SingleVariableDeclaration[8476-8482]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8484-8830]:Block[8484-8830]"
  }, {
    "left" : "String name = getFunctionName(n);",
    "right" : "String name = getFunctionName(n);",
    "info" : "VariableDeclarationStatement[8490-8523]:VariableDeclarationStatement[8490-8523]"
  }, {
    "left" : "if (name != null)",
    "right" : "if (name != null)",
    "info" : "IfStatement[8528-8572]:IfStatement[8528-8572]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8546-8572]:Block[8546-8572]"
  }, {
    "left" : "return name;",
    "right" : "return name;",
    "info" : "ReturnStatement[8554-8566]:ReturnStatement[8554-8566]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[8629-8657]:VariableDeclarationStatement[8629-8657]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return getStringValue(parent);\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.STRING:\n        // Return the name of the literal's key.\n        return getStringValue(parent);\n    }",
    "info" : "SwitchStatement[8662-8808]:SwitchStatement[8662-8808]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[8696-8714]:SwitchCase[8696-8714]"
  }, {
    "left" : "return getStringValue(parent);",
    "right" : "return getStringValue(parent);",
    "info" : "ReturnStatement[8772-8802]:ReturnStatement[8772-8802]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[8814-8826]:ReturnStatement[8814-8826]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[8896-8902]:Modifier[8896-8902]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[8903-8910]:PrimitiveType[8903-8910]"
  }, {
    "left" : "isImmutableValue",
    "right" : "isImmutableValue",
    "info" : "SimpleName[8911-8927]:SimpleName[8911-8927]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[8928-8934]:SingleVariableDeclaration[8928-8934]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[8936-9549]:Block[8936-9549]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.NULL:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n      case Token.VOID:\n      case Token.NEG:\n        return isImmutableValue(n.getFirstChild());\n      case Token.NAME:\n        String name = n.getString();\n        // We assume here that programs don't change the value of the keyword\n        // undefined to something other than the value undefined.\n        return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);\n    }",
    "info" : "SwitchStatement[8942-9526]:SwitchStatement[8942-9526]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[8971-8989]:SwitchCase[8971-8989]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[8996-9014]:SwitchCase[8996-9014]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[9021-9037]:SwitchCase[9021-9037]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[9044-9060]:SwitchCase[9044-9060]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[9067-9084]:SwitchCase[9067-9084]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[9093-9105]:ReturnStatement[9093-9105]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[9112-9128]:SwitchCase[9112-9128]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[9135-9150]:SwitchCase[9135-9150]"
  }, {
    "left" : "return isImmutableValue(n.getFirstChild());",
    "right" : "return isImmutableValue(n.getFirstChild());",
    "info" : "ReturnStatement[9159-9202]:ReturnStatement[9159-9202]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[9209-9225]:SwitchCase[9209-9225]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[9234-9262]:VariableDeclarationStatement[9234-9262]"
  }, {
    "left" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
    "right" : "return \"undefined\".equals(name)\n            || \"Infinity\".equals(name)\n            || \"NaN\".equals(name);",
    "info" : "ReturnStatement[9415-9520]:ReturnStatement[9415-9520]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[9532-9545]:ReturnStatement[9532-9545]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[10455-10461]:Modifier[10455-10461]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[10462-10469]:PrimitiveType[10462-10469]"
  }, {
    "left" : "isLiteralValue",
    "right" : "isLiteralValue",
    "info" : "SimpleName[10470-10484]:SimpleName[10470-10484]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[10485-10491]:SingleVariableDeclaration[10485-10491]"
  }, {
    "left" : "boolean includeFunctions",
    "right" : "boolean includeFunctions",
    "info" : "SingleVariableDeclaration[10493-10517]:SingleVariableDeclaration[10493-10517]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10519-11367]:Block[10519-11367]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
    "right" : "switch (n.getType()) {\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        // Return true only if all children are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child, includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.OBJECTLIT:\n        // Return true only if all values are const.\n        for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext()) {\n          if (!isLiteralValue(child.getFirstChild(), includeFunctions)) {\n            return false;\n          }\n        }\n        return true;\n\n      case Token.FUNCTION:\n        return includeFunctions && !NodeUtil.isFunctionDeclaration(n);\n\n      default:\n        return isImmutableValue(n);\n    }",
    "info" : "SwitchStatement[10525-11363]:SwitchStatement[10525-11363]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[10554-10574]:SwitchCase[10554-10574]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[10581-10599]:SwitchCase[10581-10599]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "info" : "ForStatement[10663-10860]:ForStatement[10663-10860]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10753-10860]:Block[10753-10860]"
  }, {
    "left" : "if (!isLiteralValue(child, includeFunctions))",
    "right" : "if (!isLiteralValue(child, includeFunctions))",
    "info" : "IfStatement[10765-10850]:IfStatement[10765-10850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[10811-10850]:Block[10811-10850]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[10825-10838]:ReturnStatement[10825-10838]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[10869-10881]:ReturnStatement[10869-10881]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[10889-10910]:SwitchCase[10889-10910]"
  }, {
    "left" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "right" : "for (Node child = n.getFirstChild(); child != null;\n             child = child.getNext())",
    "info" : "ForStatement[10972-11185]:ForStatement[10972-11185]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11062-11185]:Block[11062-11185]"
  }, {
    "left" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
    "right" : "if (!isLiteralValue(child.getFirstChild(), includeFunctions))",
    "info" : "IfStatement[11074-11175]:IfStatement[11074-11175]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11136-11175]:Block[11136-11175]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[11150-11163]:ReturnStatement[11150-11163]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11194-11206]:ReturnStatement[11194-11206]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[11214-11234]:SwitchCase[11214-11234]"
  }, {
    "left" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
    "right" : "return includeFunctions && !NodeUtil.isFunctionDeclaration(n);",
    "info" : "ReturnStatement[11243-11305]:ReturnStatement[11243-11305]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[11313-11321]:SwitchCase[11313-11321]"
  }, {
    "left" : "return isImmutableValue(n);",
    "right" : "return isImmutableValue(n);",
    "info" : "ReturnStatement[11330-11357]:ReturnStatement[11330-11357]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[11558-11564]:Modifier[11558-11564]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[11565-11572]:PrimitiveType[11565-11572]"
  }, {
    "left" : "isValidDefineValue",
    "right" : "isValidDefineValue",
    "info" : "SimpleName[11573-11591]:SimpleName[11573-11591]"
  }, {
    "left" : "Node val",
    "right" : "Node val",
    "info" : "SingleVariableDeclaration[11592-11600]:SingleVariableDeclaration[11592-11600]"
  }, {
    "left" : "Set<String> defines",
    "right" : "Set<String> defines",
    "info" : "SingleVariableDeclaration[11602-11621]:SingleVariableDeclaration[11602-11621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[11623-12861]:Block[11623-12861]"
  }, {
    "left" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
    "right" : "switch (val.getType()) {\n      case Token.STRING:\n      case Token.NUMBER:\n      case Token.TRUE:\n      case Token.FALSE:\n        return true;\n\n      // Binary operators are only valid if both children are valid.\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GT:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.URSH:\n        return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);\n\n      // Uniary operators are valid if the child is valid.\n      case Token.NOT:\n      case Token.NEG:\n      case Token.POS:\n        return isValidDefineValue(val.getFirstChild(), defines);\n\n      // Names are valid if and only if they are defines themselves.\n      case Token.NAME:\n      case Token.GETPROP:\n        if (val.isQualifiedName()) {\n          return defines.contains(val.getQualifiedName());\n        }\n    }",
    "info" : "SwitchStatement[11629-12839]:SwitchStatement[11629-12839]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[11660-11678]:SwitchCase[11660-11678]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[11685-11703]:SwitchCase[11685-11703]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[11710-11726]:SwitchCase[11710-11726]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[11733-11750]:SwitchCase[11733-11750]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[11759-11771]:ReturnStatement[11759-11771]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[11848-11863]:SwitchCase[11848-11863]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[11870-11888]:SwitchCase[11870-11888]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[11895-11913]:SwitchCase[11895-11913]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[11920-11937]:SwitchCase[11920-11937]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[11944-11962]:SwitchCase[11944-11962]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[11969-11984]:SwitchCase[11969-11984]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[11991-12005]:SwitchCase[11991-12005]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[12012-12026]:SwitchCase[12012-12026]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[12033-12047]:SwitchCase[12033-12047]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[12054-12068]:SwitchCase[12054-12068]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[12075-12090]:SwitchCase[12075-12090]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[12097-12111]:SwitchCase[12097-12111]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[12118-12133]:SwitchCase[12118-12133]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[12140-12155]:SwitchCase[12140-12155]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[12162-12176]:SwitchCase[12162-12176]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[12183-12198]:SwitchCase[12183-12198]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[12205-12221]:SwitchCase[12205-12221]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[12228-12244]:SwitchCase[12228-12244]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[12251-12266]:SwitchCase[12251-12266]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[12273-12289]:SwitchCase[12273-12289]"
  }, {
    "left" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
    "right" : "return isValidDefineValue(val.getFirstChild(), defines)\n            && isValidDefineValue(val.getLastChild(), defines);",
    "info" : "ReturnStatement[12298-12417]:ReturnStatement[12298-12417]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[12484-12499]:SwitchCase[12484-12499]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[12506-12521]:SwitchCase[12506-12521]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[12528-12543]:SwitchCase[12528-12543]"
  }, {
    "left" : "return isValidDefineValue(val.getFirstChild(), defines);",
    "right" : "return isValidDefineValue(val.getFirstChild(), defines);",
    "info" : "ReturnStatement[12552-12608]:ReturnStatement[12552-12608]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[12685-12701]:SwitchCase[12685-12701]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[12708-12727]:SwitchCase[12708-12727]"
  }, {
    "left" : "if (val.isQualifiedName())",
    "right" : "if (val.isQualifiedName())",
    "info" : "IfStatement[12736-12833]:IfStatement[12736-12833]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[12763-12833]:Block[12763-12833]"
  }, {
    "left" : "return defines.contains(val.getQualifiedName());",
    "right" : "return defines.contains(val.getQualifiedName());",
    "info" : "ReturnStatement[12775-12823]:ReturnStatement[12775-12823]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[12844-12857]:ReturnStatement[12844-12857]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[12967-12973]:Modifier[12967-12973]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[12974-12981]:PrimitiveType[12974-12981]"
  }, {
    "left" : "isEmptyBlock",
    "right" : "isEmptyBlock",
    "info" : "SimpleName[12982-12994]:SimpleName[12982-12994]"
  }, {
    "left" : "Node block",
    "right" : "Node block",
    "info" : "SingleVariableDeclaration[12995-13005]:SingleVariableDeclaration[12995-13005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13007-13245]:Block[13007-13245]"
  }, {
    "left" : "if (block.getType() != Token.BLOCK)",
    "right" : "if (block.getType() != Token.BLOCK)",
    "info" : "IfStatement[13013-13076]:IfStatement[13013-13076]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13049-13076]:Block[13049-13076]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13057-13070]:ReturnStatement[13057-13070]"
  }, {
    "left" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
    "right" : "for (Node n = block.getFirstChild(); n != null; n = n.getNext())",
    "info" : "ForStatement[13082-13224]:ForStatement[13082-13224]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13147-13224]:Block[13147-13224]"
  }, {
    "left" : "if (n.getType() != Token.EMPTY)",
    "right" : "if (n.getType() != Token.EMPTY)",
    "info" : "IfStatement[13155-13218]:IfStatement[13155-13218]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13187-13218]:Block[13187-13218]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[13197-13210]:ReturnStatement[13197-13210]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[13229-13241]:ReturnStatement[13229-13241]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13249-13255]:Modifier[13249-13255]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13256-13263]:PrimitiveType[13256-13263]"
  }, {
    "left" : "isSimpleOperator",
    "right" : "isSimpleOperator",
    "info" : "SimpleName[13264-13280]:SimpleName[13264-13280]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[13281-13287]:SingleVariableDeclaration[13281-13287]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13289-13340]:Block[13289-13340]"
  }, {
    "left" : "return isSimpleOperatorType(n.getType());",
    "right" : "return isSimpleOperatorType(n.getType());",
    "info" : "ReturnStatement[13295-13336]:ReturnStatement[13295-13336]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[13518-13524]:Modifier[13518-13524]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[13525-13532]:PrimitiveType[13525-13532]"
  }, {
    "left" : "isSimpleOperatorType",
    "right" : "isSimpleOperatorType",
    "info" : "SimpleName[13533-13553]:SimpleName[13533-13553]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[13554-13562]:SingleVariableDeclaration[13554-13562]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[13564-14321]:Block[13564-14321]"
  }, {
    "left" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.ADD:\n      case Token.BITAND:\n      case Token.BITNOT:\n      case Token.BITOR:\n      case Token.BITXOR:\n      case Token.COMMA:\n      case Token.DIV:\n      case Token.EQ:\n      case Token.GE:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GT:\n      case Token.INSTANCEOF:\n      case Token.LE:\n      case Token.LSH:\n      case Token.LT:\n      case Token.MOD:\n      case Token.MUL:\n      case Token.NE:\n      case Token.NOT:\n      case Token.RSH:\n      case Token.SHEQ:\n      case Token.SHNE:\n      case Token.SUB:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.POS:\n      case Token.NEG:\n      case Token.URSH:\n        return true;\n\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[13570-14317]:SwitchStatement[13570-14317]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[13592-13607]:SwitchCase[13592-13607]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[13614-13632]:SwitchCase[13614-13632]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[13639-13657]:SwitchCase[13639-13657]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[13664-13681]:SwitchCase[13664-13681]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[13688-13706]:SwitchCase[13688-13706]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[13713-13730]:SwitchCase[13713-13730]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[13737-13752]:SwitchCase[13737-13752]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[13759-13773]:SwitchCase[13759-13773]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[13780-13794]:SwitchCase[13780-13794]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[13801-13820]:SwitchCase[13801-13820]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[13827-13846]:SwitchCase[13827-13846]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[13853-13867]:SwitchCase[13853-13867]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[13874-13896]:SwitchCase[13874-13896]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[13903-13917]:SwitchCase[13903-13917]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[13924-13939]:SwitchCase[13924-13939]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[13946-13960]:SwitchCase[13946-13960]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[13967-13982]:SwitchCase[13967-13982]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[13989-14004]:SwitchCase[13989-14004]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[14011-14025]:SwitchCase[14011-14025]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[14032-14047]:SwitchCase[14032-14047]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[14054-14069]:SwitchCase[14054-14069]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[14076-14092]:SwitchCase[14076-14092]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[14099-14115]:SwitchCase[14099-14115]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[14122-14137]:SwitchCase[14122-14137]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[14144-14162]:SwitchCase[14144-14162]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[14169-14185]:SwitchCase[14169-14185]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[14192-14207]:SwitchCase[14192-14207]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[14214-14229]:SwitchCase[14214-14229]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[14236-14252]:SwitchCase[14236-14252]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[14261-14273]:ReturnStatement[14261-14273]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[14281-14289]:SwitchCase[14281-14289]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[14298-14311]:ReturnStatement[14298-14311]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[14482-14488]:Modifier[14482-14488]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14489-14495]:Modifier[14489-14495]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[14496-14500]:SimpleType[14496-14500]"
  }, {
    "left" : "newExpr",
    "right" : "newExpr",
    "info" : "SimpleName[14501-14508]:SimpleName[14501-14508]"
  }, {
    "left" : "Node child",
    "right" : "Node child",
    "info" : "SingleVariableDeclaration[14509-14519]:SingleVariableDeclaration[14509-14519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14521-14631]:Block[14521-14631]"
  }, {
    "left" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
    "right" : "Node expr = new Node(Token.EXPR_RESULT, child)\n        .copyInformationFrom(child);",
    "info" : "VariableDeclarationStatement[14527-14610]:VariableDeclarationStatement[14527-14610]"
  }, {
    "left" : "return expr;",
    "right" : "return expr;",
    "info" : "ReturnStatement[14615-14627]:ReturnStatement[14615-14627]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14805-14811]:Modifier[14805-14811]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14812-14819]:PrimitiveType[14812-14819]"
  }, {
    "left" : "mayEffectMutableState",
    "right" : "mayEffectMutableState",
    "info" : "SimpleName[14820-14841]:SimpleName[14820-14841]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14842-14848]:SingleVariableDeclaration[14842-14848]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14850-14898]:Block[14850-14898]"
  }, {
    "left" : "return mayEffectMutableState(n, null);",
    "right" : "return mayEffectMutableState(n, null);",
    "info" : "ReturnStatement[14856-14894]:ReturnStatement[14856-14894]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[14902-14908]:Modifier[14902-14908]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[14909-14916]:PrimitiveType[14909-14916]"
  }, {
    "left" : "mayEffectMutableState",
    "right" : "mayEffectMutableState",
    "info" : "SimpleName[14917-14938]:SimpleName[14917-14938]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[14939-14945]:SingleVariableDeclaration[14939-14945]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[14947-14972]:SingleVariableDeclaration[14947-14972]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[14974-15036]:Block[14974-15036]"
  }, {
    "left" : "return checkForStateChangeHelper(n, true, compiler);",
    "right" : "return checkForStateChangeHelper(n, true, compiler);",
    "info" : "ReturnStatement[14980-15032]:ReturnStatement[14980-15032]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15125-15131]:Modifier[15125-15131]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15132-15139]:PrimitiveType[15132-15139]"
  }, {
    "left" : "mayHaveSideEffects",
    "right" : "mayHaveSideEffects",
    "info" : "SimpleName[15140-15158]:SimpleName[15140-15158]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15159-15165]:SingleVariableDeclaration[15159-15165]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15167-15212]:Block[15167-15212]"
  }, {
    "left" : "return mayHaveSideEffects(n, null);",
    "right" : "return mayHaveSideEffects(n, null);",
    "info" : "ReturnStatement[15173-15208]:ReturnStatement[15173-15208]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15216-15222]:Modifier[15216-15222]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15223-15230]:PrimitiveType[15223-15230]"
  }, {
    "left" : "mayHaveSideEffects",
    "right" : "mayHaveSideEffects",
    "info" : "SimpleName[15231-15249]:SimpleName[15231-15249]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15250-15256]:SingleVariableDeclaration[15250-15256]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[15258-15283]:SingleVariableDeclaration[15258-15283]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15285-15348]:Block[15285-15348]"
  }, {
    "left" : "return checkForStateChangeHelper(n, false, compiler);",
    "right" : "return checkForStateChangeHelper(n, false, compiler);",
    "info" : "ReturnStatement[15291-15344]:ReturnStatement[15291-15344]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[15626-15633]:Modifier[15626-15633]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[15634-15640]:Modifier[15634-15640]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[15641-15648]:PrimitiveType[15641-15648]"
  }, {
    "left" : "checkForStateChangeHelper",
    "right" : "checkForStateChangeHelper",
    "info" : "SimpleName[15649-15674]:SimpleName[15649-15674]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[15682-15688]:SingleVariableDeclaration[15682-15688]"
  }, {
    "left" : "boolean checkForNewObjects",
    "right" : "boolean checkForNewObjects",
    "info" : "SingleVariableDeclaration[15690-15716]:SingleVariableDeclaration[15690-15716]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[15718-15743]:SingleVariableDeclaration[15718-15743]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[15745-20193]:Block[15745-20193]"
  }, {
    "left" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
    "right" : "switch (n.getType()) {\n      // other side-effect free statements and expressions\n      case Token.AND:\n      case Token.BLOCK:\n      case Token.EXPR_RESULT:\n      case Token.HOOK:\n      case Token.IF:\n      case Token.IN:\n      case Token.LP:\n      case Token.NUMBER:\n      case Token.OR:\n      case Token.THIS:\n      case Token.TRUE:\n      case Token.FALSE:\n      case Token.NULL:\n      case Token.STRING:\n      case Token.SWITCH:\n      case Token.TRY:\n      case Token.EMPTY:\n        break;\n\n      // Throws are by definition side effects\n      case Token.THROW:\n        return true;\n\n      case Token.OBJECTLIT:\n        if (checkForNewObjects) {\n          return true;\n        }\n        for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {\n          if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n        }\n        return false;\n\n      case Token.ARRAYLIT:\n      case Token.REGEXP:\n        if (checkForNewObjects) {\n          return true;\n        }\n        break;\n\n      case Token.VAR:    // empty var statement (no declaration)\n      case Token.NAME:   // variable by itself\n        if (n.getFirstChild() != null) {\n          return true;\n        }\n        break;\n\n      case Token.FUNCTION:\n        // Function expressions don't have side-effects, but function\n        // declarations change the namespace. Either way, we don't need to\n        // check the children, since they aren't executed at declaration time.\n        return checkForNewObjects || !isFunctionExpression(n);\n\n      case Token.NEW:\n        if (checkForNewObjects) {\n          return true;\n        }\n\n        if (!constructorCallHasSideEffects(n)) {\n          // loop below will see if the constructor parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      case Token.CALL:\n        // calls to functions that have no side effects have the no\n        // side effect property set.\n        if (!functionCallHasSideEffects(n, compiler)) {\n          // loop below will see if the function parameters have\n          // side-effects\n          break;\n        }\n        return true;\n\n      default:\n        if (isSimpleOperatorType(n.getType())) {\n          break;\n        }\n\n        if (isAssignmentOp(n)) {\n          Node assignTarget = n.getFirstChild();\n          if (isName(assignTarget)) {\n            return true;\n          }\n\n          // Assignments will have side effects if\n          // a) The RHS has side effects, or\n          // b) The LHS has side effects, or\n          // c) A name on the LHS will exist beyond the life of this statement.\n          if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler)) {\n            return true;\n          }\n\n          if (isGet(assignTarget)) {\n            // If the object being assigned to is a local object, don't\n            // consider this a side-effect as it can't be referenced\n            // elsewhere.  Don't do this recursively as the property might\n            // be an alias of another object, unlike a literal below.\n            Node current = assignTarget.getFirstChild();\n            if (evaluatesToLocalValue(current)) {\n              return false;\n            }\n\n            // A literal value as defined by \"isLiteralValue\" is guaranteed\n            // not to be an alias, or any components which are aliases of\n            // other objects.\n            // If the root object is a literal don't consider this a\n            // side-effect.\n            while (isGet(current)) {\n              current = current.getFirstChild();\n            }\n\n            return !isLiteralValue(current, true);\n          } else {\n            // TODO(johnlenz): remove this code and make this an exception. This\n            // is here only for legacy reasons, the AST is not valid but\n            // preserve existing behavior.\n            return !isLiteralValue(assignTarget, true);\n          }\n        }\n\n        return true;\n    }",
    "info" : "SwitchStatement[15849-19995]:SwitchStatement[15849-19995]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[15937-15952]:SwitchCase[15937-15952]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[15959-15976]:SwitchCase[15959-15976]"
  }, {
    "left" : "case Token.EXPR_RESULT:",
    "right" : "case Token.EXPR_RESULT:",
    "info" : "SwitchCase[15983-16006]:SwitchCase[15983-16006]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[16013-16029]:SwitchCase[16013-16029]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[16036-16050]:SwitchCase[16036-16050]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[16057-16071]:SwitchCase[16057-16071]"
  }, {
    "left" : "case Token.LP:",
    "right" : "case Token.LP:",
    "info" : "SwitchCase[16078-16092]:SwitchCase[16078-16092]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[16099-16117]:SwitchCase[16099-16117]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[16124-16138]:SwitchCase[16124-16138]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[16145-16161]:SwitchCase[16145-16161]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[16168-16184]:SwitchCase[16168-16184]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[16191-16208]:SwitchCase[16191-16208]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[16215-16231]:SwitchCase[16215-16231]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[16238-16256]:SwitchCase[16238-16256]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[16263-16281]:SwitchCase[16263-16281]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[16288-16303]:SwitchCase[16288-16303]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[16310-16327]:SwitchCase[16310-16327]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16336-16342]:BreakStatement[16336-16342]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[16397-16414]:SwitchCase[16397-16414]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16423-16435]:ReturnStatement[16423-16435]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[16443-16464]:SwitchCase[16443-16464]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[16473-16531]:IfStatement[16473-16531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16497-16531]:Block[16497-16531]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16509-16521]:ReturnStatement[16509-16521]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[16540-16760]:ForStatement[16540-16760]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16601-16760]:Block[16601-16760]"
  }, {
    "left" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(\n                  c.getFirstChild(), checkForNewObjects, compiler))",
    "info" : "IfStatement[16613-16750]:IfStatement[16613-16750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16712-16750]:Block[16712-16750]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16726-16738]:ReturnStatement[16726-16738]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[16769-16782]:ReturnStatement[16769-16782]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[16790-16810]:SwitchCase[16790-16810]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[16817-16835]:SwitchCase[16817-16835]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[16844-16902]:IfStatement[16844-16902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[16868-16902]:Block[16868-16902]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[16880-16892]:ReturnStatement[16880-16892]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[16911-16917]:BreakStatement[16911-16917]"
  }, {
    "left" : "case Token.VAR:",
    "right" : "case Token.VAR:",
    "info" : "SwitchCase[16925-16940]:SwitchCase[16925-16940]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[16990-17006]:SwitchCase[16990-17006]"
  }, {
    "left" : "if (n.getFirstChild() != null)",
    "right" : "if (n.getFirstChild() != null)",
    "info" : "IfStatement[17039-17104]:IfStatement[17039-17104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17070-17104]:Block[17070-17104]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17082-17094]:ReturnStatement[17082-17094]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17113-17119]:BreakStatement[17113-17119]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[17127-17147]:SwitchCase[17127-17147]"
  }, {
    "left" : "return checkForNewObjects || !isFunctionExpression(n);",
    "right" : "return checkForNewObjects || !isFunctionExpression(n);",
    "info" : "ReturnStatement[17380-17434]:ReturnStatement[17380-17434]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[17442-17457]:SwitchCase[17442-17457]"
  }, {
    "left" : "if (checkForNewObjects)",
    "right" : "if (checkForNewObjects)",
    "info" : "IfStatement[17466-17524]:IfStatement[17466-17524]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17490-17524]:Block[17490-17524]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17502-17514]:ReturnStatement[17502-17514]"
  }, {
    "left" : "if (!constructorCallHasSideEffects(n))",
    "right" : "if (!constructorCallHasSideEffects(n))",
    "info" : "IfStatement[17534-17695]:IfStatement[17534-17695]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17573-17695]:Block[17573-17695]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[17679-17685]:BreakStatement[17679-17685]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[17704-17716]:ReturnStatement[17704-17716]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[17724-17740]:SwitchCase[17724-17740]"
  }, {
    "left" : "if (!functionCallHasSideEffects(n, compiler))",
    "right" : "if (!functionCallHasSideEffects(n, compiler))",
    "info" : "IfStatement[17854-18019]:IfStatement[17854-18019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[17900-18019]:Block[17900-18019]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18003-18009]:BreakStatement[18003-18009]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18028-18040]:ReturnStatement[18028-18040]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[18048-18056]:SwitchCase[18048-18056]"
  }, {
    "left" : "if (isSimpleOperatorType(n.getType()))",
    "right" : "if (isSimpleOperatorType(n.getType()))",
    "info" : "IfStatement[18065-18132]:IfStatement[18065-18132]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18104-18132]:Block[18104-18132]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[18116-18122]:BreakStatement[18116-18122]"
  }, {
    "left" : "if (isAssignmentOp(n))",
    "right" : "if (isAssignmentOp(n))",
    "info" : "IfStatement[18142-19967]:IfStatement[18142-19967]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18165-19967]:Block[18165-19967]"
  }, {
    "left" : "Node assignTarget = n.getFirstChild();",
    "right" : "Node assignTarget = n.getFirstChild();",
    "info" : "VariableDeclarationStatement[18177-18215]:VariableDeclarationStatement[18177-18215]"
  }, {
    "left" : "if (isName(assignTarget))",
    "right" : "if (isName(assignTarget))",
    "info" : "IfStatement[18226-18290]:IfStatement[18226-18290]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18252-18290]:Block[18252-18290]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18266-18278]:ReturnStatement[18266-18278]"
  }, {
    "left" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(\n                  n.getFirstChild(), checkForNewObjects, compiler) ||\n              checkForStateChangeHelper(\n                  n.getLastChild(), checkForNewObjects, compiler))",
    "info" : "IfStatement[18523-18770]:IfStatement[18523-18770]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18732-18770]:Block[18732-18770]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[18746-18758]:ReturnStatement[18746-18758]"
  }, {
    "left" : "if (isGet(assignTarget))",
    "right" : "if (isGet(assignTarget))",
    "info" : "IfStatement[18782-19957]:IfStatement[18782-19957]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[18807-19685]:Block[18807-19685]"
  }, {
    "left" : "Node current = assignTarget.getFirstChild();",
    "right" : "Node current = assignTarget.getFirstChild();",
    "info" : "VariableDeclarationStatement[19107-19151]:VariableDeclarationStatement[19107-19151]"
  }, {
    "left" : "if (evaluatesToLocalValue(current))",
    "right" : "if (evaluatesToLocalValue(current))",
    "info" : "IfStatement[19164-19243]:IfStatement[19164-19243]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19200-19243]:Block[19200-19243]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[19216-19229]:ReturnStatement[19216-19229]"
  }, {
    "left" : "while (isGet(current))",
    "right" : "while (isGet(current))",
    "info" : "WhileStatement[19534-19621]:WhileStatement[19534-19621]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19557-19621]:Block[19557-19621]"
  }, {
    "left" : "current = current.getFirstChild();",
    "right" : "current = current.getFirstChild();",
    "info" : "ExpressionStatement[19573-19607]:ExpressionStatement[19573-19607]"
  }, {
    "left" : "return !isLiteralValue(current, true);",
    "right" : "return !isLiteralValue(current, true);",
    "info" : "ReturnStatement[19635-19673]:ReturnStatement[19635-19673]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[19691-19957]:Block[19691-19957]"
  }, {
    "left" : "return !isLiteralValue(assignTarget, true);",
    "right" : "return !isLiteralValue(assignTarget, true);",
    "info" : "ReturnStatement[19902-19945]:ReturnStatement[19902-19945]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[19977-19989]:ReturnStatement[19977-19989]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[20001-20170]:ForStatement[20001-20170]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20062-20170]:Block[20062-20170]"
  }, {
    "left" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
    "right" : "if (checkForStateChangeHelper(c, checkForNewObjects, compiler))",
    "info" : "IfStatement[20070-20164]:IfStatement[20070-20164]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20134-20164]:Block[20134-20164]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[20144-20156]:ReturnStatement[20144-20156]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[20176-20189]:ReturnStatement[20176-20189]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20311-20317]:Modifier[20311-20317]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20318-20325]:PrimitiveType[20318-20325]"
  }, {
    "left" : "constructorCallHasSideEffects",
    "right" : "constructorCallHasSideEffects",
    "info" : "SimpleName[20326-20355]:SimpleName[20326-20355]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[20356-20369]:SingleVariableDeclaration[20356-20369]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20371-20434]:Block[20371-20434]"
  }, {
    "left" : "return constructorCallHasSideEffects(callNode, null);",
    "right" : "return constructorCallHasSideEffects(callNode, null);",
    "info" : "ReturnStatement[20377-20430]:ReturnStatement[20377-20430]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[20438-20444]:Modifier[20438-20444]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[20445-20452]:PrimitiveType[20445-20452]"
  }, {
    "left" : "constructorCallHasSideEffects",
    "right" : "constructorCallHasSideEffects",
    "info" : "SimpleName[20453-20482]:SimpleName[20453-20482]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[20490-20503]:SingleVariableDeclaration[20490-20503]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[20505-20530]:SingleVariableDeclaration[20505-20530]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20532-20976]:Block[20532-20976]"
  }, {
    "left" : "if (callNode.getType() != Token.NEW)",
    "right" : "if (callNode.getType() != Token.NEW)",
    "info" : "IfStatement[20538-20692]:IfStatement[20538-20692]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20575-20692]:Block[20575-20692]"
  }, {
    "left" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
    "right" : "throw new IllegalStateException(\n          \"Expected NEW node, got \" + Token.name(callNode.getType()));",
    "info" : "ThrowStatement[20583-20686]:ThrowStatement[20583-20686]"
  }, {
    "left" : "if (callNode.isNoSideEffectsCall())",
    "right" : "if (callNode.isNoSideEffectsCall())",
    "info" : "IfStatement[20698-20761]:IfStatement[20698-20761]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20734-20761]:Block[20734-20761]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[20742-20755]:ReturnStatement[20742-20755]"
  }, {
    "left" : "Node nameNode = callNode.getFirstChild();",
    "right" : "Node nameNode = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[20767-20808]:VariableDeclarationStatement[20767-20808]"
  }, {
    "left" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
    "right" : "if (nameNode.getType() == Token.NAME &&\n        CONSTRUCTORS_WITHOUT_SIDE_EFFECTS.contains(nameNode.getString()))",
    "info" : "IfStatement[20813-20954]:IfStatement[20813-20954]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[20927-20954]:Block[20927-20954]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[20935-20948]:ReturnStatement[20935-20948]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[20960-20972]:ReturnStatement[20960-20972]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[21820-21826]:Modifier[21820-21826]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[21827-21834]:PrimitiveType[21827-21834]"
  }, {
    "left" : "functionCallHasSideEffects",
    "right" : "functionCallHasSideEffects",
    "info" : "SimpleName[21835-21861]:SimpleName[21835-21861]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[21869-21882]:SingleVariableDeclaration[21869-21882]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[21884-21944]:Block[21884-21944]"
  }, {
    "left" : "return functionCallHasSideEffects(callNode, null);",
    "right" : "return functionCallHasSideEffects(callNode, null);",
    "info" : "ReturnStatement[21890-21940]:ReturnStatement[21890-21940]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[22193-22199]:Modifier[22193-22199]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[22200-22207]:PrimitiveType[22200-22207]"
  }, {
    "left" : "functionCallHasSideEffects",
    "right" : "functionCallHasSideEffects",
    "info" : "SimpleName[22208-22234]:SimpleName[22208-22234]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[22242-22255]:SingleVariableDeclaration[22242-22255]"
  }, {
    "left" : "@Nullable AbstractCompiler compiler",
    "right" : "@Nullable AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[22257-22292]:SingleVariableDeclaration[22257-22292]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22294-24113]:Block[22294-24113]"
  }, {
    "left" : "if (callNode.getType() != Token.CALL)",
    "right" : "if (callNode.getType() != Token.CALL)",
    "info" : "IfStatement[22300-22456]:IfStatement[22300-22456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22338-22456]:Block[22338-22456]"
  }, {
    "left" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
    "right" : "throw new IllegalStateException(\n          \"Expected CALL node, got \" + Token.name(callNode.getType()));",
    "info" : "ThrowStatement[22346-22450]:ThrowStatement[22346-22450]"
  }, {
    "left" : "if (callNode.isNoSideEffectsCall())",
    "right" : "if (callNode.isNoSideEffectsCall())",
    "info" : "IfStatement[22462-22525]:IfStatement[22462-22525]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22498-22525]:Block[22498-22525]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22506-22519]:ReturnStatement[22506-22519]"
  }, {
    "left" : "Node nameNode = callNode.getFirstChild();",
    "right" : "Node nameNode = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[22531-22572]:VariableDeclarationStatement[22531-22572]"
  }, {
    "left" : "if (nameNode.getType() == Token.NAME)",
    "right" : "if (nameNode.getType() == Token.NAME)",
    "info" : "IfStatement[22626-24091]:IfStatement[22626-24091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22664-22809]:Block[22664-22809]"
  }, {
    "left" : "String name = nameNode.getString();",
    "right" : "String name = nameNode.getString();",
    "info" : "VariableDeclarationStatement[22672-22707]:VariableDeclarationStatement[22672-22707]"
  }, {
    "left" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
    "right" : "if (BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS.contains(name))",
    "info" : "IfStatement[22714-22803]:IfStatement[22714-22803]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22772-22803]:Block[22772-22803]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[22782-22795]:ReturnStatement[22782-22795]"
  }, {
    "left" : "if (nameNode.getType() == Token.GETPROP)",
    "right" : "if (nameNode.getType() == Token.GETPROP)",
    "info" : "IfStatement[22815-24091]:IfStatement[22815-24091]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[22856-24091]:Block[22856-24091]"
  }, {
    "left" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
    "right" : "if (callNode.hasOneChild()\n          && OBJECT_METHODS_WITHOUT_SIDEEFFECTS.contains(\n                nameNode.getLastChild().getString()))",
    "info" : "IfStatement[22864-23034]:IfStatement[22864-23034]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23003-23034]:Block[23003-23034]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[23013-23026]:ReturnStatement[23013-23026]"
  }, {
    "left" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
    "right" : "if (callNode.isOnlyModifiesThisCall()\n          && evaluatesToLocalValue(nameNode.getFirstChild()))",
    "info" : "IfStatement[23042-23173]:IfStatement[23042-23173]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23142-23173]:Block[23142-23173]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[23152-23165]:ReturnStatement[23152-23165]"
  }, {
    "left" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
    "right" : "if (nameNode.getFirstChild().getType() == Token.NAME)",
    "info" : "IfStatement[23246-23456]:IfStatement[23246-23456]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23300-23456]:Block[23300-23456]"
  }, {
    "left" : "String namespaceName = nameNode.getFirstChild().getString();",
    "right" : "String namespaceName = nameNode.getFirstChild().getString();",
    "info" : "VariableDeclarationStatement[23310-23370]:VariableDeclarationStatement[23310-23370]"
  }, {
    "left" : "if (namespaceName.equals(\"Math\"))",
    "right" : "if (namespaceName.equals(\"Math\"))",
    "info" : "IfStatement[23379-23448]:IfStatement[23379-23448]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23413-23448]:Block[23413-23448]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[23425-23438]:ReturnStatement[23425-23438]"
  }, {
    "left" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
    "right" : "if (compiler != null && !compiler.hasRegExpGlobalReferences())",
    "info" : "IfStatement[23464-24085]:IfStatement[23464-24085]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23527-24085]:Block[23527-24085]"
  }, {
    "left" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
    "right" : "if (nameNode.getFirstChild().getType() == Token.REGEXP\n            && REGEXP_METHODS.contains(nameNode.getLastChild().getString()))",
    "info" : "IfStatement[23537-24077]:IfStatement[23537-24077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23669-23704]:Block[23669-23704]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[23681-23694]:ReturnStatement[23681-23694]"
  }, {
    "left" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
    "right" : "if (nameNode.getFirstChild().getType() == Token.STRING\n            && STRING_REGEXP_METHODS.contains(\n                nameNode.getLastChild().getString()))",
    "info" : "IfStatement[23710-24077]:IfStatement[23710-24077]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[23866-24077]:Block[23866-24077]"
  }, {
    "left" : "Node param = nameNode.getNext();",
    "right" : "Node param = nameNode.getNext();",
    "info" : "VariableDeclarationStatement[23878-23910]:VariableDeclarationStatement[23878-23910]"
  }, {
    "left" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
    "right" : "if (param != null &&\n              (param.getType() == Token.STRING\n                  || param.getType() == Token.REGEXP))",
    "info" : "IfStatement[23921-24067]:IfStatement[23921-24067]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[24054-24067]:ReturnStatement[24054-24067]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[24097-24109]:ReturnStatement[24097-24109]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24179-24185]:Modifier[24179-24185]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24186-24193]:PrimitiveType[24186-24193]"
  }, {
    "left" : "callHasLocalResult",
    "right" : "callHasLocalResult",
    "info" : "SimpleName[24194-24212]:SimpleName[24194-24212]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24213-24219]:SingleVariableDeclaration[24213-24219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24221-24350]:Block[24221-24350]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.CALL);",
    "right" : "Preconditions.checkState(n.getType() == Token.CALL);",
    "info" : "ExpressionStatement[24227-24279]:ExpressionStatement[24227-24279]"
  }, {
    "left" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
    "right" : "return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;",
    "info" : "ReturnStatement[24284-24346]:ReturnStatement[24284-24346]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24623-24629]:Modifier[24623-24629]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24630-24637]:PrimitiveType[24630-24637]"
  }, {
    "left" : "nodeTypeMayHaveSideEffects",
    "right" : "nodeTypeMayHaveSideEffects",
    "info" : "SimpleName[24638-24664]:SimpleName[24638-24664]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24665-24671]:SingleVariableDeclaration[24665-24671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24673-24726]:Block[24673-24726]"
  }, {
    "left" : "return nodeTypeMayHaveSideEffects(n, null);",
    "right" : "return nodeTypeMayHaveSideEffects(n, null);",
    "info" : "ReturnStatement[24679-24722]:ReturnStatement[24679-24722]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[24730-24736]:Modifier[24730-24736]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[24737-24744]:PrimitiveType[24737-24744]"
  }, {
    "left" : "nodeTypeMayHaveSideEffects",
    "right" : "nodeTypeMayHaveSideEffects",
    "info" : "SimpleName[24745-24771]:SimpleName[24745-24771]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[24772-24778]:SingleVariableDeclaration[24772-24778]"
  }, {
    "left" : "AbstractCompiler compiler",
    "right" : "AbstractCompiler compiler",
    "info" : "SingleVariableDeclaration[24780-24805]:SingleVariableDeclaration[24780-24805]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24807-25318]:Block[24807-25318]"
  }, {
    "left" : "if (isAssignmentOp(n))",
    "right" : "if (isAssignmentOp(n))",
    "info" : "IfStatement[24813-24862]:IfStatement[24813-24862]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[24836-24862]:Block[24836-24862]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[24844-24856]:ReturnStatement[24844-24856]"
  }, {
    "left" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
    "right" : "switch(n.getType()) {\n      case Token.DELPROP:\n      case Token.DEC:\n      case Token.INC:\n      case Token.THROW:\n        return true;\n      case Token.CALL:\n        return NodeUtil.functionCallHasSideEffects(n, compiler);\n      case Token.NEW:\n        return NodeUtil.constructorCallHasSideEffects(n, compiler);\n      case Token.NAME:\n        // A variable definition.\n        return n.hasChildren();\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[24868-25314]:SwitchStatement[24868-25314]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[24896-24915]:SwitchCase[24896-24915]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[24922-24937]:SwitchCase[24922-24937]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[24944-24959]:SwitchCase[24944-24959]"
  }, {
    "left" : "case Token.THROW:",
    "right" : "case Token.THROW:",
    "info" : "SwitchCase[24966-24983]:SwitchCase[24966-24983]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[24992-25004]:ReturnStatement[24992-25004]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[25011-25027]:SwitchCase[25011-25027]"
  }, {
    "left" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
    "right" : "return NodeUtil.functionCallHasSideEffects(n, compiler);",
    "info" : "ReturnStatement[25036-25092]:ReturnStatement[25036-25092]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[25099-25114]:SwitchCase[25099-25114]"
  }, {
    "left" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
    "right" : "return NodeUtil.constructorCallHasSideEffects(n, compiler);",
    "info" : "ReturnStatement[25123-25182]:ReturnStatement[25123-25182]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[25189-25205]:SwitchCase[25189-25205]"
  }, {
    "left" : "return n.hasChildren();",
    "right" : "return n.hasChildren();",
    "info" : "ReturnStatement[25248-25271]:ReturnStatement[25248-25271]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[25278-25286]:SwitchCase[25278-25286]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[25295-25308]:ReturnStatement[25295-25308]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25422-25428]:Modifier[25422-25428]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25429-25436]:PrimitiveType[25429-25436]"
  }, {
    "left" : "canBeSideEffected",
    "right" : "canBeSideEffected",
    "info" : "SimpleName[25437-25454]:SimpleName[25437-25454]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25455-25461]:SingleVariableDeclaration[25455-25461]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25463-25562]:Block[25463-25562]"
  }, {
    "left" : "Set<String> emptySet = Collections.emptySet();",
    "right" : "Set<String> emptySet = Collections.emptySet();",
    "info" : "VariableDeclarationStatement[25469-25515]:VariableDeclarationStatement[25469-25515]"
  }, {
    "left" : "return canBeSideEffected(n, emptySet);",
    "right" : "return canBeSideEffected(n, emptySet);",
    "info" : "ReturnStatement[25520-25558]:ReturnStatement[25520-25558]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[25813-25819]:Modifier[25813-25819]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[25820-25827]:PrimitiveType[25820-25827]"
  }, {
    "left" : "canBeSideEffected",
    "right" : "canBeSideEffected",
    "info" : "SimpleName[25828-25845]:SimpleName[25828-25845]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[25846-25852]:SingleVariableDeclaration[25846-25852]"
  }, {
    "left" : "Set<String> knownConstants",
    "right" : "Set<String> knownConstants",
    "info" : "SingleVariableDeclaration[25854-25880]:SingleVariableDeclaration[25854-25880]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[25882-26901]:Block[25882-26901]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.CALL:\n      case Token.NEW:\n        // Function calls or constructor can reference changed values.\n        // TODO(johnlenz): Add some mechanism for determining that functions\n        // are unaffected by side effects.\n        return true;\n      case Token.NAME:\n        // Non-constant names values may have been changed.\n        return !isConstantName(n)\n            && !knownConstants.contains(n.getString());\n\n      // Properties on constant NAMEs can still be side-effected.\n      case Token.GETPROP:\n      case Token.GETELEM:\n        return true;\n\n      case Token.FUNCTION:\n        // Function expression are not changed by side-effects,\n        // and function declarations are not part of expressions.\n        Preconditions.checkState(isFunctionExpression(n));\n        return false;\n    }",
    "info" : "SwitchStatement[25888-26725]:SwitchStatement[25888-26725]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[25917-25933]:SwitchCase[25917-25933]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[25940-25955]:SwitchCase[25940-25955]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26155-26167]:ReturnStatement[26155-26167]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[26174-26190]:SwitchCase[26174-26190]"
  }, {
    "left" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
    "right" : "return !isConstantName(n)\n            && !knownConstants.contains(n.getString());",
    "info" : "ReturnStatement[26259-26340]:ReturnStatement[26259-26340]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[26414-26433]:SwitchCase[26414-26433]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[26440-26459]:SwitchCase[26440-26459]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26468-26480]:ReturnStatement[26468-26480]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[26488-26508]:SwitchCase[26488-26508]"
  }, {
    "left" : "Preconditions.checkState(isFunctionExpression(n));",
    "right" : "Preconditions.checkState(isFunctionExpression(n));",
    "info" : "ExpressionStatement[26647-26697]:ExpressionStatement[26647-26697]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26706-26719]:ReturnStatement[26706-26719]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[26731-26878]:ForStatement[26731-26878]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26792-26878]:Block[26792-26878]"
  }, {
    "left" : "if (canBeSideEffected(c, knownConstants))",
    "right" : "if (canBeSideEffected(c, knownConstants))",
    "info" : "IfStatement[26800-26872]:IfStatement[26800-26872]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[26842-26872]:Block[26842-26872]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[26852-26864]:ReturnStatement[26852-26864]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[26884-26897]:ReturnStatement[26884-26897]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[27338-27344]:Modifier[27338-27344]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[27345-27348]:PrimitiveType[27345-27348]"
  }, {
    "left" : "precedence",
    "right" : "precedence",
    "info" : "SimpleName[27349-27359]:SimpleName[27349-27359]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[27360-27368]:SingleVariableDeclaration[27360-27368]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[27370-29393]:Block[27370-29393]"
  }, {
    "left" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
    "right" : "switch (type) {\n      case Token.COMMA:  return 0;\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n      case Token.ASSIGN: return 1;\n      case Token.HOOK:   return 2;  // ?: operator\n      case Token.OR:     return 3;\n      case Token.AND:    return 4;\n      case Token.BITOR:  return 5;\n      case Token.BITXOR: return 6;\n      case Token.BITAND: return 7;\n      case Token.EQ:\n      case Token.NE:\n      case Token.SHEQ:\n      case Token.SHNE:   return 8;\n      case Token.LT:\n      case Token.GT:\n      case Token.LE:\n      case Token.GE:\n      case Token.INSTANCEOF:\n      case Token.IN:     return 9;\n      case Token.LSH:\n      case Token.RSH:\n      case Token.URSH:   return 10;\n      case Token.SUB:\n      case Token.ADD:    return 11;\n      case Token.MUL:\n      case Token.MOD:\n      case Token.DIV:    return 12;\n      case Token.INC:\n      case Token.DEC:\n      case Token.NEW:\n      case Token.DELPROP:\n      case Token.TYPEOF:\n      case Token.VOID:\n      case Token.NOT:\n      case Token.BITNOT:\n      case Token.POS:\n      case Token.NEG:    return 13;\n\n      case Token.ARRAYLIT:\n      case Token.CALL:\n      case Token.EMPTY:\n      case Token.FALSE:\n      case Token.FUNCTION:\n      case Token.GETELEM:\n      case Token.GETPROP:\n      case Token.GET_REF:\n      case Token.IF:\n      case Token.LP:\n      case Token.NAME:\n      case Token.NULL:\n      case Token.NUMBER:\n      case Token.OBJECTLIT:\n      case Token.REGEXP:\n      case Token.RETURN:\n      case Token.STRING:\n      case Token.THIS:\n      case Token.TRUE:\n        return 15;\n\n      default: throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");\n    }",
    "info" : "SwitchStatement[27376-29389]:SwitchStatement[27376-29389]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[27398-27415]:SwitchCase[27398-27415]"
  }, {
    "left" : "return 0;",
    "right" : "return 0;",
    "info" : "ReturnStatement[27417-27426]:ReturnStatement[27417-27426]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[27433-27457]:SwitchCase[27433-27457]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[27464-27489]:SwitchCase[27464-27489]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[27496-27521]:SwitchCase[27496-27521]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[27528-27550]:SwitchCase[27528-27550]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[27557-27579]:SwitchCase[27557-27579]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[27586-27609]:SwitchCase[27586-27609]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[27616-27638]:SwitchCase[27616-27638]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[27645-27667]:SwitchCase[27645-27667]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[27674-27696]:SwitchCase[27674-27696]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[27703-27725]:SwitchCase[27703-27725]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[27732-27754]:SwitchCase[27732-27754]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[27761-27779]:SwitchCase[27761-27779]"
  }, {
    "left" : "return 1;",
    "right" : "return 1;",
    "info" : "ReturnStatement[27780-27789]:ReturnStatement[27780-27789]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[27796-27812]:SwitchCase[27796-27812]"
  }, {
    "left" : "return 2;",
    "right" : "return 2;",
    "info" : "ReturnStatement[27815-27824]:ReturnStatement[27815-27824]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[27847-27861]:SwitchCase[27847-27861]"
  }, {
    "left" : "return 3;",
    "right" : "return 3;",
    "info" : "ReturnStatement[27866-27875]:ReturnStatement[27866-27875]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[27882-27897]:SwitchCase[27882-27897]"
  }, {
    "left" : "return 4;",
    "right" : "return 4;",
    "info" : "ReturnStatement[27901-27910]:ReturnStatement[27901-27910]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[27917-27934]:SwitchCase[27917-27934]"
  }, {
    "left" : "return 5;",
    "right" : "return 5;",
    "info" : "ReturnStatement[27936-27945]:ReturnStatement[27936-27945]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[27952-27970]:SwitchCase[27952-27970]"
  }, {
    "left" : "return 6;",
    "right" : "return 6;",
    "info" : "ReturnStatement[27971-27980]:ReturnStatement[27971-27980]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[27987-28005]:SwitchCase[27987-28005]"
  }, {
    "left" : "return 7;",
    "right" : "return 7;",
    "info" : "ReturnStatement[28006-28015]:ReturnStatement[28006-28015]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[28022-28036]:SwitchCase[28022-28036]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[28043-28057]:SwitchCase[28043-28057]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[28064-28080]:SwitchCase[28064-28080]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[28087-28103]:SwitchCase[28087-28103]"
  }, {
    "left" : "return 8;",
    "right" : "return 8;",
    "info" : "ReturnStatement[28106-28115]:ReturnStatement[28106-28115]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[28122-28136]:SwitchCase[28122-28136]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[28143-28157]:SwitchCase[28143-28157]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[28164-28178]:SwitchCase[28164-28178]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[28185-28199]:SwitchCase[28185-28199]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[28206-28228]:SwitchCase[28206-28228]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[28235-28249]:SwitchCase[28235-28249]"
  }, {
    "left" : "return 9;",
    "right" : "return 9;",
    "info" : "ReturnStatement[28254-28263]:ReturnStatement[28254-28263]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[28270-28285]:SwitchCase[28270-28285]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[28292-28307]:SwitchCase[28292-28307]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[28314-28330]:SwitchCase[28314-28330]"
  }, {
    "left" : "return 10;",
    "right" : "return 10;",
    "info" : "ReturnStatement[28333-28343]:ReturnStatement[28333-28343]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[28350-28365]:SwitchCase[28350-28365]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[28372-28387]:SwitchCase[28372-28387]"
  }, {
    "left" : "return 11;",
    "right" : "return 11;",
    "info" : "ReturnStatement[28391-28401]:ReturnStatement[28391-28401]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[28408-28423]:SwitchCase[28408-28423]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[28430-28445]:SwitchCase[28430-28445]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[28452-28467]:SwitchCase[28452-28467]"
  }, {
    "left" : "return 12;",
    "right" : "return 12;",
    "info" : "ReturnStatement[28471-28481]:ReturnStatement[28471-28481]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[28488-28503]:SwitchCase[28488-28503]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[28510-28525]:SwitchCase[28510-28525]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[28532-28547]:SwitchCase[28532-28547]"
  }, {
    "left" : "case Token.DELPROP:",
    "right" : "case Token.DELPROP:",
    "info" : "SwitchCase[28554-28573]:SwitchCase[28554-28573]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[28580-28598]:SwitchCase[28580-28598]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[28605-28621]:SwitchCase[28605-28621]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[28628-28643]:SwitchCase[28628-28643]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[28650-28668]:SwitchCase[28650-28668]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[28675-28690]:SwitchCase[28675-28690]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[28697-28712]:SwitchCase[28697-28712]"
  }, {
    "left" : "return 13;",
    "right" : "return 13;",
    "info" : "ReturnStatement[28716-28726]:ReturnStatement[28716-28726]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[28734-28754]:SwitchCase[28734-28754]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[28761-28777]:SwitchCase[28761-28777]"
  }, {
    "left" : "case Token.EMPTY:",
    "right" : "case Token.EMPTY:",
    "info" : "SwitchCase[28784-28801]:SwitchCase[28784-28801]"
  }, {
    "left" : "case Token.FALSE:",
    "right" : "case Token.FALSE:",
    "info" : "SwitchCase[28808-28825]:SwitchCase[28808-28825]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[28832-28852]:SwitchCase[28832-28852]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[28859-28878]:SwitchCase[28859-28878]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[28885-28904]:SwitchCase[28885-28904]"
  }, {
    "left" : "case Token.GET_REF:",
    "right" : "case Token.GET_REF:",
    "info" : "SwitchCase[28911-28930]:SwitchCase[28911-28930]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[28937-28951]:SwitchCase[28937-28951]"
  }, {
    "left" : "case Token.LP:",
    "right" : "case Token.LP:",
    "info" : "SwitchCase[28958-28972]:SwitchCase[28958-28972]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[28979-28995]:SwitchCase[28979-28995]"
  }, {
    "left" : "case Token.NULL:",
    "right" : "case Token.NULL:",
    "info" : "SwitchCase[29002-29018]:SwitchCase[29002-29018]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[29025-29043]:SwitchCase[29025-29043]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[29050-29071]:SwitchCase[29050-29071]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[29078-29096]:SwitchCase[29078-29096]"
  }, {
    "left" : "case Token.RETURN:",
    "right" : "case Token.RETURN:",
    "info" : "SwitchCase[29103-29121]:SwitchCase[29103-29121]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[29128-29146]:SwitchCase[29128-29146]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[29153-29169]:SwitchCase[29153-29169]"
  }, {
    "left" : "case Token.TRUE:",
    "right" : "case Token.TRUE:",
    "info" : "SwitchCase[29176-29192]:SwitchCase[29176-29192]"
  }, {
    "left" : "return 15;",
    "right" : "return 15;",
    "info" : "ReturnStatement[29201-29211]:ReturnStatement[29201-29211]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[29219-29227]:SwitchCase[29219-29227]"
  }, {
    "left" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
    "right" : "throw new Error(\"Unknown precedence for \" +\n                               Node.tokenToName(type) +\n                               \" (type \" + type + \")\");",
    "info" : "ThrowStatement[29228-29383]:ThrowStatement[29228-29383]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[29622-29628]:Modifier[29622-29628]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[29629-29636]:PrimitiveType[29629-29636]"
  }, {
    "left" : "isAssociative",
    "right" : "isAssociative",
    "info" : "SimpleName[29637-29650]:SimpleName[29637-29650]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[29651-29659]:SingleVariableDeclaration[29651-29659]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[29661-29864]:Block[29661-29864]"
  }, {
    "left" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.MUL:\n      case Token.AND:\n      case Token.OR:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[29667-29860]:SwitchStatement[29667-29860]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[29689-29704]:SwitchCase[29689-29704]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[29711-29726]:SwitchCase[29711-29726]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[29733-29747]:SwitchCase[29733-29747]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[29754-29771]:SwitchCase[29754-29771]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[29778-29796]:SwitchCase[29778-29796]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[29805-29817]:ReturnStatement[29805-29817]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[29824-29832]:SwitchCase[29824-29832]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[29841-29854]:ReturnStatement[29841-29854]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30172-30178]:Modifier[30172-30178]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30179-30186]:PrimitiveType[30179-30186]"
  }, {
    "left" : "isCommutative",
    "right" : "isCommutative",
    "info" : "SimpleName[30187-30200]:SimpleName[30187-30200]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[30201-30209]:SingleVariableDeclaration[30201-30209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30211-30371]:Block[30211-30371]"
  }, {
    "left" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (type) {\n      case Token.MUL:\n      case Token.BITOR:\n      case Token.BITAND:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[30217-30367]:SwitchStatement[30217-30367]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[30239-30254]:SwitchCase[30239-30254]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[30261-30278]:SwitchCase[30261-30278]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[30285-30303]:SwitchCase[30285-30303]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30312-30324]:ReturnStatement[30312-30324]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[30331-30339]:SwitchCase[30331-30339]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30348-30361]:ReturnStatement[30348-30361]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30375-30381]:Modifier[30375-30381]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[30382-30389]:PrimitiveType[30382-30389]"
  }, {
    "left" : "isAssignmentOp",
    "right" : "isAssignmentOp",
    "info" : "SimpleName[30390-30404]:SimpleName[30390-30404]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[30405-30411]:SingleVariableDeclaration[30405-30411]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30413-30842]:Block[30413-30842]"
  }, {
    "left" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
    "right" : "switch (n.getType()){\n      case Token.ASSIGN:\n      case Token.ASSIGN_BITOR:\n      case Token.ASSIGN_BITXOR:\n      case Token.ASSIGN_BITAND:\n      case Token.ASSIGN_LSH:\n      case Token.ASSIGN_RSH:\n      case Token.ASSIGN_URSH:\n      case Token.ASSIGN_ADD:\n      case Token.ASSIGN_SUB:\n      case Token.ASSIGN_MUL:\n      case Token.ASSIGN_DIV:\n      case Token.ASSIGN_MOD:\n        return true;\n    }",
    "info" : "SwitchStatement[30419-30820]:SwitchStatement[30419-30820]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[30447-30465]:SwitchCase[30447-30465]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[30472-30496]:SwitchCase[30472-30496]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[30503-30528]:SwitchCase[30503-30528]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[30535-30560]:SwitchCase[30535-30560]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[30567-30589]:SwitchCase[30567-30589]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[30596-30618]:SwitchCase[30596-30618]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[30625-30648]:SwitchCase[30625-30648]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[30655-30677]:SwitchCase[30655-30677]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[30684-30706]:SwitchCase[30684-30706]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[30713-30735]:SwitchCase[30713-30735]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[30742-30764]:SwitchCase[30742-30764]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[30771-30793]:SwitchCase[30771-30793]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[30802-30814]:ReturnStatement[30802-30814]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[30825-30838]:ReturnStatement[30825-30838]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[30846-30852]:Modifier[30846-30852]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[30853-30856]:PrimitiveType[30853-30856]"
  }, {
    "left" : "getOpFromAssignmentOp",
    "right" : "getOpFromAssignmentOp",
    "info" : "SimpleName[30857-30878]:SimpleName[30857-30878]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[30879-30885]:SingleVariableDeclaration[30879-30885]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[30887-31609]:Block[30887-31609]"
  }, {
    "left" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
    "right" : "switch (n.getType()){\n      case Token.ASSIGN_BITOR:\n        return Token.BITOR;\n      case Token.ASSIGN_BITXOR:\n        return Token.BITXOR;\n      case Token.ASSIGN_BITAND:\n        return Token.BITAND;\n      case Token.ASSIGN_LSH:\n        return Token.LSH;\n      case Token.ASSIGN_RSH:\n        return Token.RSH;\n      case Token.ASSIGN_URSH:\n        return Token.URSH;\n      case Token.ASSIGN_ADD:\n        return Token.ADD;\n      case Token.ASSIGN_SUB:\n        return Token.SUB;\n      case Token.ASSIGN_MUL:\n        return Token.MUL;\n      case Token.ASSIGN_DIV:\n        return Token.DIV;\n      case Token.ASSIGN_MOD:\n        return Token.MOD;\n    }",
    "info" : "SwitchStatement[30893-31543]:SwitchStatement[30893-31543]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[30921-30945]:SwitchCase[30921-30945]"
  }, {
    "left" : "return Token.BITOR;",
    "right" : "return Token.BITOR;",
    "info" : "ReturnStatement[30954-30973]:ReturnStatement[30954-30973]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[30980-31005]:SwitchCase[30980-31005]"
  }, {
    "left" : "return Token.BITXOR;",
    "right" : "return Token.BITXOR;",
    "info" : "ReturnStatement[31014-31034]:ReturnStatement[31014-31034]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[31041-31066]:SwitchCase[31041-31066]"
  }, {
    "left" : "return Token.BITAND;",
    "right" : "return Token.BITAND;",
    "info" : "ReturnStatement[31075-31095]:ReturnStatement[31075-31095]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[31102-31124]:SwitchCase[31102-31124]"
  }, {
    "left" : "return Token.LSH;",
    "right" : "return Token.LSH;",
    "info" : "ReturnStatement[31133-31150]:ReturnStatement[31133-31150]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[31157-31179]:SwitchCase[31157-31179]"
  }, {
    "left" : "return Token.RSH;",
    "right" : "return Token.RSH;",
    "info" : "ReturnStatement[31188-31205]:ReturnStatement[31188-31205]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[31212-31235]:SwitchCase[31212-31235]"
  }, {
    "left" : "return Token.URSH;",
    "right" : "return Token.URSH;",
    "info" : "ReturnStatement[31244-31262]:ReturnStatement[31244-31262]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[31269-31291]:SwitchCase[31269-31291]"
  }, {
    "left" : "return Token.ADD;",
    "right" : "return Token.ADD;",
    "info" : "ReturnStatement[31300-31317]:ReturnStatement[31300-31317]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[31324-31346]:SwitchCase[31324-31346]"
  }, {
    "left" : "return Token.SUB;",
    "right" : "return Token.SUB;",
    "info" : "ReturnStatement[31355-31372]:ReturnStatement[31355-31372]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[31379-31401]:SwitchCase[31379-31401]"
  }, {
    "left" : "return Token.MUL;",
    "right" : "return Token.MUL;",
    "info" : "ReturnStatement[31410-31427]:ReturnStatement[31410-31427]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[31434-31456]:SwitchCase[31434-31456]"
  }, {
    "left" : "return Token.DIV;",
    "right" : "return Token.DIV;",
    "info" : "ReturnStatement[31465-31482]:ReturnStatement[31465-31482]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[31489-31511]:SwitchCase[31489-31511]"
  }, {
    "left" : "return Token.MOD;",
    "right" : "return Token.MOD;",
    "info" : "ReturnStatement[31520-31537]:ReturnStatement[31520-31537]"
  }, {
    "left" : "throw new IllegalArgumentException(\"Not an assiment op\");",
    "right" : "throw new IllegalArgumentException(\"Not an assiment op\");",
    "info" : "ThrowStatement[31548-31605]:ThrowStatement[31548-31605]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31613-31619]:Modifier[31613-31619]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[31620-31627]:PrimitiveType[31620-31627]"
  }, {
    "left" : "isExpressionNode",
    "right" : "isExpressionNode",
    "info" : "SimpleName[31628-31644]:SimpleName[31628-31644]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[31645-31651]:SingleVariableDeclaration[31645-31651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31653-31703]:Block[31653-31703]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT;",
    "right" : "return n.getType() == Token.EXPR_RESULT;",
    "info" : "ReturnStatement[31659-31699]:ReturnStatement[31659-31699]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31812-31818]:Modifier[31812-31818]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[31819-31826]:PrimitiveType[31819-31826]"
  }, {
    "left" : "containsFunction",
    "right" : "containsFunction",
    "info" : "SimpleName[31827-31843]:SimpleName[31827-31843]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[31844-31850]:SingleVariableDeclaration[31844-31850]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[31852-31901]:Block[31852-31901]"
  }, {
    "left" : "return containsType(n, Token.FUNCTION);",
    "right" : "return containsType(n, Token.FUNCTION);",
    "info" : "ReturnStatement[31858-31897]:ReturnStatement[31858-31897]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[31994-32000]:Modifier[31994-32000]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32001-32008]:PrimitiveType[32001-32008]"
  }, {
    "left" : "referencesThis",
    "right" : "referencesThis",
    "info" : "SimpleName[32009-32023]:SimpleName[32009-32023]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32024-32030]:SingleVariableDeclaration[32024-32030]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32032-32101]:Block[32032-32101]"
  }, {
    "left" : "return containsType(n, Token.THIS, new MatchNotFunction());",
    "right" : "return containsType(n, Token.THIS, new MatchNotFunction());",
    "info" : "ReturnStatement[32038-32097]:ReturnStatement[32038-32097]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32157-32163]:Modifier[32157-32163]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32164-32171]:PrimitiveType[32164-32171]"
  }, {
    "left" : "isGet",
    "right" : "isGet",
    "info" : "SimpleName[32172-32177]:SimpleName[32172-32177]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32178-32184]:SingleVariableDeclaration[32178-32184]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32186-32272]:Block[32186-32272]"
  }, {
    "left" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
    "right" : "return n.getType() == Token.GETPROP\n        || n.getType() == Token.GETELEM;",
    "info" : "ReturnStatement[32192-32268]:ReturnStatement[32192-32268]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32317-32323]:Modifier[32317-32323]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32324-32331]:PrimitiveType[32324-32331]"
  }, {
    "left" : "isGetProp",
    "right" : "isGetProp",
    "info" : "SimpleName[32332-32341]:SimpleName[32332-32341]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32342-32348]:SingleVariableDeclaration[32342-32348]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32350-32396]:Block[32350-32396]"
  }, {
    "left" : "return n.getType() == Token.GETPROP;",
    "right" : "return n.getType() == Token.GETPROP;",
    "info" : "ReturnStatement[32356-32392]:ReturnStatement[32356-32392]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32438-32444]:Modifier[32438-32444]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32445-32452]:PrimitiveType[32445-32452]"
  }, {
    "left" : "isName",
    "right" : "isName",
    "info" : "SimpleName[32453-32459]:SimpleName[32453-32459]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32460-32466]:SingleVariableDeclaration[32460-32466]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32468-32511]:Block[32468-32511]"
  }, {
    "left" : "return n.getType() == Token.NAME;",
    "right" : "return n.getType() == Token.NAME;",
    "info" : "ReturnStatement[32474-32507]:ReturnStatement[32474-32507]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32552-32558]:Modifier[32552-32558]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32559-32566]:PrimitiveType[32559-32566]"
  }, {
    "left" : "isNew",
    "right" : "isNew",
    "info" : "SimpleName[32567-32572]:SimpleName[32567-32572]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32573-32579]:SingleVariableDeclaration[32573-32579]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32581-32623]:Block[32581-32623]"
  }, {
    "left" : "return n.getType() == Token.NEW;",
    "right" : "return n.getType() == Token.NEW;",
    "info" : "ReturnStatement[32587-32619]:ReturnStatement[32587-32619]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32664-32670]:Modifier[32664-32670]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32671-32678]:PrimitiveType[32671-32678]"
  }, {
    "left" : "isVar",
    "right" : "isVar",
    "info" : "SimpleName[32679-32684]:SimpleName[32679-32684]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32685-32691]:SingleVariableDeclaration[32685-32691]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32693-32735]:Block[32693-32735]"
  }, {
    "left" : "return n.getType() == Token.VAR;",
    "right" : "return n.getType() == Token.VAR;",
    "info" : "ReturnStatement[32699-32731]:ReturnStatement[32699-32731]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[32901-32907]:Modifier[32901-32907]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[32908-32915]:PrimitiveType[32908-32915]"
  }, {
    "left" : "isVarDeclaration",
    "right" : "isVarDeclaration",
    "info" : "SimpleName[32916-32932]:SimpleName[32916-32932]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[32933-32939]:SingleVariableDeclaration[32933-32939]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[32941-33148]:Block[32941-33148]"
  }, {
    "left" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
    "right" : "return n.getType() == Token.NAME && n.getParent().getType() == Token.VAR;",
    "info" : "ReturnStatement[33071-33144]:ReturnStatement[33071-33144]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33291-33297]:Modifier[33291-33297]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[33298-33302]:SimpleType[33298-33302]"
  }, {
    "left" : "getAssignedValue",
    "right" : "getAssignedValue",
    "info" : "SimpleName[33303-33319]:SimpleName[33303-33319]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33320-33326]:SingleVariableDeclaration[33320-33326]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33328-33594]:Block[33328-33594]"
  }, {
    "left" : "Preconditions.checkState(isName(n));",
    "right" : "Preconditions.checkState(isName(n));",
    "info" : "ExpressionStatement[33334-33370]:ExpressionStatement[33334-33370]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[33375-33403]:VariableDeclarationStatement[33375-33403]"
  }, {
    "left" : "if (isVar(parent))",
    "right" : "if (isVar(parent))",
    "info" : "IfStatement[33408-33590]:IfStatement[33408-33590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33427-33466]:Block[33427-33466]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[33435-33460]:ReturnStatement[33435-33460]"
  }, {
    "left" : "if (isAssign(parent) && parent.getFirstChild() == n)",
    "right" : "if (isAssign(parent) && parent.getFirstChild() == n)",
    "info" : "IfStatement[33472-33590]:IfStatement[33472-33590]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33525-33558]:Block[33525-33558]"
  }, {
    "left" : "return n.getNext();",
    "right" : "return n.getNext();",
    "info" : "ReturnStatement[33533-33552]:ReturnStatement[33533-33552]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33564-33590]:Block[33564-33590]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[33572-33584]:ReturnStatement[33572-33584]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33638-33644]:Modifier[33638-33644]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33645-33652]:PrimitiveType[33645-33652]"
  }, {
    "left" : "isString",
    "right" : "isString",
    "info" : "SimpleName[33653-33661]:SimpleName[33653-33661]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33662-33668]:SingleVariableDeclaration[33662-33668]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33670-33715]:Block[33670-33715]"
  }, {
    "left" : "return n.getType() == Token.STRING;",
    "right" : "return n.getType() == Token.STRING;",
    "info" : "ReturnStatement[33676-33711]:ReturnStatement[33676-33711]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[33906-33912]:Modifier[33906-33912]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[33913-33920]:PrimitiveType[33913-33920]"
  }, {
    "left" : "isExprAssign",
    "right" : "isExprAssign",
    "info" : "SimpleName[33921-33933]:SimpleName[33921-33933]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[33934-33940]:SingleVariableDeclaration[33934-33940]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[33942-34047]:Block[33942-34047]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
    "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.ASSIGN;",
    "info" : "ReturnStatement[33948-34043]:ReturnStatement[33948-34043]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34092-34098]:Modifier[34092-34098]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[34099-34106]:PrimitiveType[34099-34106]"
  }, {
    "left" : "isAssign",
    "right" : "isAssign",
    "info" : "SimpleName[34107-34115]:SimpleName[34107-34115]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34116-34122]:SingleVariableDeclaration[34116-34122]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34124-34169]:Block[34124-34169]"
  }, {
    "left" : "return n.getType() == Token.ASSIGN;",
    "right" : "return n.getType() == Token.ASSIGN;",
    "info" : "ReturnStatement[34130-34165]:ReturnStatement[34130-34165]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34351-34357]:Modifier[34351-34357]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[34358-34365]:PrimitiveType[34358-34365]"
  }, {
    "left" : "isExprCall",
    "right" : "isExprCall",
    "info" : "SimpleName[34366-34376]:SimpleName[34366-34376]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34377-34383]:SingleVariableDeclaration[34377-34383]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34385-34488]:Block[34385-34488]"
  }, {
    "left" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
    "right" : "return n.getType() == Token.EXPR_RESULT\n        && n.getFirstChild().getType() == Token.CALL;",
    "info" : "ReturnStatement[34391-34484]:ReturnStatement[34391-34484]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34560-34566]:Modifier[34560-34566]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[34567-34574]:PrimitiveType[34567-34574]"
  }, {
    "left" : "isForIn",
    "right" : "isForIn",
    "info" : "SimpleName[34575-34582]:SimpleName[34575-34582]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34583-34589]:SingleVariableDeclaration[34583-34589]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34591-34667]:Block[34591-34667]"
  }, {
    "left" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
    "right" : "return n.getType() == Token.FOR\n        && n.getChildCount() == 3;",
    "info" : "ReturnStatement[34597-34663]:ReturnStatement[34597-34663]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[34751-34757]:Modifier[34751-34757]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[34758-34765]:PrimitiveType[34758-34765]"
  }, {
    "left" : "isLoopStructure",
    "right" : "isLoopStructure",
    "info" : "SimpleName[34766-34781]:SimpleName[34766-34781]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[34782-34788]:SingleVariableDeclaration[34782-34788]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[34790-34953]:Block[34790-34953]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[34796-34949]:SwitchStatement[34796-34949]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[34825-34840]:SwitchCase[34825-34840]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[34847-34861]:SwitchCase[34847-34861]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[34868-34885]:SwitchCase[34868-34885]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[34894-34906]:ReturnStatement[34894-34906]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[34913-34921]:SwitchCase[34913-34921]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[34930-34943]:ReturnStatement[34930-34943]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35115-35121]:Modifier[35115-35121]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[35122-35126]:SimpleType[35122-35126]"
  }, {
    "left" : "getLoopCodeBlock",
    "right" : "getLoopCodeBlock",
    "info" : "SimpleName[35127-35143]:SimpleName[35127-35143]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35144-35150]:SingleVariableDeclaration[35144-35150]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35152-35360]:Block[35152-35360]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n        return n.getLastChild();\n      case Token.DO:\n        return n.getFirstChild();\n      default:\n        return null;\n    }",
    "info" : "SwitchStatement[35158-35356]:SwitchStatement[35158-35356]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[35187-35202]:SwitchCase[35187-35202]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[35209-35226]:SwitchCase[35209-35226]"
  }, {
    "left" : "return n.getLastChild();",
    "right" : "return n.getLastChild();",
    "info" : "ReturnStatement[35235-35259]:ReturnStatement[35235-35259]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[35266-35280]:SwitchCase[35266-35280]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[35289-35314]:ReturnStatement[35289-35314]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[35321-35329]:SwitchCase[35321-35329]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[35338-35350]:ReturnStatement[35338-35350]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35473-35479]:Modifier[35473-35479]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35480-35487]:PrimitiveType[35480-35487]"
  }, {
    "left" : "isWithinLoop",
    "right" : "isWithinLoop",
    "info" : "SimpleName[35488-35500]:SimpleName[35488-35500]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35501-35507]:SingleVariableDeclaration[35501-35507]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35509-35721]:Block[35509-35721]"
  }, {
    "left" : "for (Node parent : n.getAncestors())",
    "right" : "for (Node parent : n.getAncestors())",
    "info" : "EnhancedForStatement[35515-35699]:EnhancedForStatement[35515-35699]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35552-35699]:Block[35552-35699]"
  }, {
    "left" : "if (NodeUtil.isLoopStructure(parent))",
    "right" : "if (NodeUtil.isLoopStructure(parent))",
    "info" : "IfStatement[35560-35628]:IfStatement[35560-35628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35598-35628]:Block[35598-35628]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[35608-35620]:ReturnStatement[35608-35620]"
  }, {
    "left" : "if (NodeUtil.isFunction(parent))",
    "right" : "if (NodeUtil.isFunction(parent))",
    "info" : "IfStatement[35636-35693]:IfStatement[35636-35693]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35669-35693]:Block[35669-35693]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[35679-35685]:BreakStatement[35679-35685]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[35704-35717]:ReturnStatement[35704-35717]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[35815-35821]:Modifier[35815-35821]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[35822-35829]:PrimitiveType[35822-35829]"
  }, {
    "left" : "isControlStructure",
    "right" : "isControlStructure",
    "info" : "SimpleName[35830-35848]:SimpleName[35830-35848]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[35849-35855]:SingleVariableDeclaration[35849-35855]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[35857-36208]:Block[35857-36208]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.FOR:\n      case Token.DO:\n      case Token.WHILE:\n      case Token.WITH:\n      case Token.IF:\n      case Token.LABEL:\n      case Token.TRY:\n      case Token.CATCH:\n      case Token.SWITCH:\n      case Token.CASE:\n      case Token.DEFAULT:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[35863-36204]:SwitchStatement[35863-36204]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[35892-35907]:SwitchCase[35892-35907]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[35914-35928]:SwitchCase[35914-35928]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[35935-35952]:SwitchCase[35935-35952]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[35959-35975]:SwitchCase[35959-35975]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[35982-35996]:SwitchCase[35982-35996]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[36003-36020]:SwitchCase[36003-36020]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[36027-36042]:SwitchCase[36027-36042]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[36049-36066]:SwitchCase[36049-36066]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[36073-36091]:SwitchCase[36073-36091]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[36098-36114]:SwitchCase[36098-36114]"
  }, {
    "left" : "case Token.DEFAULT:",
    "right" : "case Token.DEFAULT:",
    "info" : "SwitchCase[36121-36140]:SwitchCase[36121-36140]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[36149-36161]:ReturnStatement[36149-36161]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[36168-36176]:SwitchCase[36168-36176]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[36185-36198]:ReturnStatement[36185-36198]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[36319-36325]:Modifier[36319-36325]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[36326-36333]:PrimitiveType[36326-36333]"
  }, {
    "left" : "isControlStructureCodeBlock",
    "right" : "isControlStructureCodeBlock",
    "info" : "SimpleName[36334-36361]:SimpleName[36334-36361]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[36362-36373]:SingleVariableDeclaration[36362-36373]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[36375-36381]:SingleVariableDeclaration[36375-36381]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[36383-37093]:Block[36383-37093]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.FOR:\n      case Token.WHILE:\n      case Token.LABEL:\n      case Token.WITH:\n        return parent.getLastChild() == n;\n      case Token.DO:\n        return parent.getFirstChild() == n;\n      case Token.IF:\n        return parent.getFirstChild() != n;\n      case Token.TRY:\n        return parent.getFirstChild() == n || parent.getLastChild() == n;\n      case Token.CATCH:\n        return parent.getLastChild() == n;\n      case Token.SWITCH:\n      case Token.CASE:\n        return parent.getFirstChild() != n;\n      case Token.DEFAULT:\n        return true;\n      default:\n        Preconditions.checkState(isControlStructure(parent));\n        return false;\n    }",
    "info" : "SwitchStatement[36389-37089]:SwitchStatement[36389-37089]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[36423-36438]:SwitchCase[36423-36438]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[36445-36462]:SwitchCase[36445-36462]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[36469-36486]:SwitchCase[36469-36486]"
  }, {
    "left" : "case Token.WITH:",
    "right" : "case Token.WITH:",
    "info" : "SwitchCase[36493-36509]:SwitchCase[36493-36509]"
  }, {
    "left" : "return parent.getLastChild() == n;",
    "right" : "return parent.getLastChild() == n;",
    "info" : "ReturnStatement[36518-36552]:ReturnStatement[36518-36552]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[36559-36573]:SwitchCase[36559-36573]"
  }, {
    "left" : "return parent.getFirstChild() == n;",
    "right" : "return parent.getFirstChild() == n;",
    "info" : "ReturnStatement[36582-36617]:ReturnStatement[36582-36617]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[36624-36638]:SwitchCase[36624-36638]"
  }, {
    "left" : "return parent.getFirstChild() != n;",
    "right" : "return parent.getFirstChild() != n;",
    "info" : "ReturnStatement[36647-36682]:ReturnStatement[36647-36682]"
  }, {
    "left" : "case Token.TRY:",
    "right" : "case Token.TRY:",
    "info" : "SwitchCase[36689-36704]:SwitchCase[36689-36704]"
  }, {
    "left" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
    "right" : "return parent.getFirstChild() == n || parent.getLastChild() == n;",
    "info" : "ReturnStatement[36713-36778]:ReturnStatement[36713-36778]"
  }, {
    "left" : "case Token.CATCH:",
    "right" : "case Token.CATCH:",
    "info" : "SwitchCase[36785-36802]:SwitchCase[36785-36802]"
  }, {
    "left" : "return parent.getLastChild() == n;",
    "right" : "return parent.getLastChild() == n;",
    "info" : "ReturnStatement[36811-36845]:ReturnStatement[36811-36845]"
  }, {
    "left" : "case Token.SWITCH:",
    "right" : "case Token.SWITCH:",
    "info" : "SwitchCase[36852-36870]:SwitchCase[36852-36870]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[36877-36893]:SwitchCase[36877-36893]"
  }, {
    "left" : "return parent.getFirstChild() != n;",
    "right" : "return parent.getFirstChild() != n;",
    "info" : "ReturnStatement[36902-36937]:ReturnStatement[36902-36937]"
  }, {
    "left" : "case Token.DEFAULT:",
    "right" : "case Token.DEFAULT:",
    "info" : "SwitchCase[36944-36963]:SwitchCase[36944-36963]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[36972-36984]:ReturnStatement[36972-36984]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[36991-36999]:SwitchCase[36991-36999]"
  }, {
    "left" : "Preconditions.checkState(isControlStructure(parent));",
    "right" : "Preconditions.checkState(isControlStructure(parent));",
    "info" : "ExpressionStatement[37008-37061]:ExpressionStatement[37008-37061]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[37070-37083]:ReturnStatement[37070-37083]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37308-37314]:Modifier[37308-37314]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[37315-37319]:SimpleType[37315-37319]"
  }, {
    "left" : "getConditionExpression",
    "right" : "getConditionExpression",
    "info" : "SimpleName[37320-37342]:SimpleName[37320-37342]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[37343-37349]:SingleVariableDeclaration[37343-37349]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[37351-37897]:Block[37351-37897]"
  }, {
    "left" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
    "right" : "switch (n.getType()) {\n      case Token.IF:\n      case Token.WHILE:\n        return n.getFirstChild();\n      case Token.DO:\n        return n.getLastChild();\n      case Token.FOR:\n        switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }\n        throw new IllegalArgumentException(\"malformed 'for' statement \" + n);\n      case Token.CASE:\n        return null;\n    }",
    "info" : "SwitchStatement[37357-37818]:SwitchStatement[37357-37818]"
  }, {
    "left" : "case Token.IF:",
    "right" : "case Token.IF:",
    "info" : "SwitchCase[37386-37400]:SwitchCase[37386-37400]"
  }, {
    "left" : "case Token.WHILE:",
    "right" : "case Token.WHILE:",
    "info" : "SwitchCase[37407-37424]:SwitchCase[37407-37424]"
  }, {
    "left" : "return n.getFirstChild();",
    "right" : "return n.getFirstChild();",
    "info" : "ReturnStatement[37433-37458]:ReturnStatement[37433-37458]"
  }, {
    "left" : "case Token.DO:",
    "right" : "case Token.DO:",
    "info" : "SwitchCase[37465-37479]:SwitchCase[37465-37479]"
  }, {
    "left" : "return n.getLastChild();",
    "right" : "return n.getLastChild();",
    "info" : "ReturnStatement[37488-37512]:ReturnStatement[37488-37512]"
  }, {
    "left" : "case Token.FOR:",
    "right" : "case Token.FOR:",
    "info" : "SwitchCase[37519-37534]:SwitchCase[37519-37534]"
  }, {
    "left" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
    "right" : "switch (n.getChildCount()) {\n          case 3:\n            return null;\n          case 4:\n            return n.getFirstChild().getNext();\n        }",
    "info" : "SwitchStatement[37543-37690]:SwitchStatement[37543-37690]"
  }, {
    "left" : "case 3:",
    "right" : "case 3:",
    "info" : "SwitchCase[37582-37589]:SwitchCase[37582-37589]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[37602-37614]:ReturnStatement[37602-37614]"
  }, {
    "left" : "case 4:",
    "right" : "case 4:",
    "info" : "SwitchCase[37625-37632]:SwitchCase[37625-37632]"
  }, {
    "left" : "return n.getFirstChild().getNext();",
    "right" : "return n.getFirstChild().getNext();",
    "info" : "ReturnStatement[37645-37680]:ReturnStatement[37645-37680]"
  }, {
    "left" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
    "right" : "throw new IllegalArgumentException(\"malformed 'for' statement \" + n);",
    "info" : "ThrowStatement[37699-37768]:ThrowStatement[37699-37768]"
  }, {
    "left" : "case Token.CASE:",
    "right" : "case Token.CASE:",
    "info" : "SwitchCase[37775-37791]:SwitchCase[37775-37791]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[37800-37812]:ReturnStatement[37800-37812]"
  }, {
    "left" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
    "right" : "throw new IllegalArgumentException(n + \" does not have a condition.\");",
    "info" : "ThrowStatement[37823-37893]:ThrowStatement[37823-37893]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[37987-37993]:Modifier[37987-37993]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[37994-38001]:PrimitiveType[37994-38001]"
  }, {
    "left" : "isStatementBlock",
    "right" : "isStatementBlock",
    "info" : "SimpleName[38002-38018]:SimpleName[38002-38018]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38019-38025]:SingleVariableDeclaration[38019-38025]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38027-38102]:Block[38027-38102]"
  }, {
    "left" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
    "right" : "return n.getType() == Token.SCRIPT || n.getType() == Token.BLOCK;",
    "info" : "ReturnStatement[38033-38098]:ReturnStatement[38033-38098]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38172-38178]:Modifier[38172-38178]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38179-38186]:PrimitiveType[38179-38186]"
  }, {
    "left" : "isStatement",
    "right" : "isStatement",
    "info" : "SimpleName[38187-38198]:SimpleName[38187-38198]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38199-38205]:SingleVariableDeclaration[38199-38205]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38207-38655]:Block[38207-38655]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[38213-38241]:VariableDeclarationStatement[38213-38241]"
  }, {
    "left" : "Preconditions.checkState(parent != null);",
    "right" : "Preconditions.checkState(parent != null);",
    "info" : "ExpressionStatement[38441-38482]:ExpressionStatement[38441-38482]"
  }, {
    "left" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
    "right" : "switch (parent.getType()) {\n      case Token.SCRIPT:\n      case Token.BLOCK:\n      case Token.LABEL:\n        return true;\n      default:\n        return false;\n    }",
    "info" : "SwitchStatement[38487-38651]:SwitchStatement[38487-38651]"
  }, {
    "left" : "case Token.SCRIPT:",
    "right" : "case Token.SCRIPT:",
    "info" : "SwitchCase[38521-38539]:SwitchCase[38521-38539]"
  }, {
    "left" : "case Token.BLOCK:",
    "right" : "case Token.BLOCK:",
    "info" : "SwitchCase[38546-38563]:SwitchCase[38546-38563]"
  }, {
    "left" : "case Token.LABEL:",
    "right" : "case Token.LABEL:",
    "info" : "SwitchCase[38570-38587]:SwitchCase[38570-38587]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[38596-38608]:ReturnStatement[38596-38608]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[38615-38623]:SwitchCase[38615-38623]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[38632-38645]:ReturnStatement[38632-38645]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38716-38722]:Modifier[38716-38722]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[38723-38730]:PrimitiveType[38723-38730]"
  }, {
    "left" : "isSwitchCase",
    "right" : "isSwitchCase",
    "info" : "SimpleName[38731-38743]:SimpleName[38731-38743]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[38744-38750]:SingleVariableDeclaration[38744-38750]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[38752-38827]:Block[38752-38827]"
  }, {
    "left" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
    "right" : "return n.getType() == Token.CASE || n.getType() == Token.DEFAULT;",
    "info" : "ReturnStatement[38758-38823]:ReturnStatement[38758-38823]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[38996-39002]:Modifier[38996-39002]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39003-39010]:PrimitiveType[39003-39010]"
  }, {
    "left" : "isReferenceName",
    "right" : "isReferenceName",
    "info" : "SimpleName[39011-39026]:SimpleName[39011-39026]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[39027-39033]:SingleVariableDeclaration[39027-39033]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39035-39090]:Block[39035-39090]"
  }, {
    "left" : "return isName(n) && !n.getString().isEmpty();",
    "right" : "return isName(n) && !n.getString().isEmpty();",
    "info" : "ReturnStatement[39041-39086]:ReturnStatement[39041-39086]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39145-39151]:Modifier[39145-39151]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39152-39159]:PrimitiveType[39152-39159]"
  }, {
    "left" : "isLabelName",
    "right" : "isLabelName",
    "info" : "SimpleName[39160-39171]:SimpleName[39160-39171]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[39172-39178]:SingleVariableDeclaration[39172-39178]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39180-39244]:Block[39180-39244]"
  }, {
    "left" : "return (n != null && n.getType() == Token.LABEL_NAME);",
    "right" : "return (n != null && n.getType() == Token.LABEL_NAME);",
    "info" : "ReturnStatement[39186-39240]:ReturnStatement[39186-39240]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39311-39317]:Modifier[39311-39317]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[39318-39325]:PrimitiveType[39318-39325]"
  }, {
    "left" : "isTryFinallyNode",
    "right" : "isTryFinallyNode",
    "info" : "SimpleName[39326-39342]:SimpleName[39326-39342]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[39343-39354]:SingleVariableDeclaration[39343-39354]"
  }, {
    "left" : "Node child",
    "right" : "Node child",
    "info" : "SingleVariableDeclaration[39356-39366]:SingleVariableDeclaration[39356-39366]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39368-39488]:Block[39368-39488]"
  }, {
    "left" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
    "right" : "return parent.getType() == Token.TRY && parent.getChildCount() == 3\n        && child == parent.getLastChild();",
    "info" : "ReturnStatement[39374-39484]:ReturnStatement[39374-39484]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[39566-39572]:Modifier[39566-39572]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[39573-39577]:PrimitiveType[39573-39577]"
  }, {
    "left" : "removeChild",
    "right" : "removeChild",
    "info" : "SimpleName[39578-39589]:SimpleName[39578-39589]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[39590-39601]:SingleVariableDeclaration[39590-39601]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[39603-39612]:SingleVariableDeclaration[39603-39612]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39614-41158]:Block[39614-41158]"
  }, {
    "left" : "if (isStatementBlock(parent)\n        || isSwitchCase(node)\n        || isTryFinallyNode(parent, node))",
    "right" : "if (isStatementBlock(parent)\n        || isSwitchCase(node)\n        || isTryFinallyNode(parent, node))",
    "info" : "IfStatement[39659-41154]:IfStatement[39659-41154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39761-39855]:Block[39761-39855]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[39824-39849]:ExpressionStatement[39824-39849]"
  }, {
    "left" : "if (parent.getType() == Token.VAR)",
    "right" : "if (parent.getType() == Token.VAR)",
    "info" : "IfStatement[39861-41154]:IfStatement[39861-41154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39896-40215]:Block[39896-40215]"
  }, {
    "left" : "if (parent.hasMoreThanOneChild())",
    "right" : "if (parent.hasMoreThanOneChild())",
    "info" : "IfStatement[39904-40209]:IfStatement[39904-40209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39938-39981]:Block[39938-39981]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[39948-39973]:ExpressionStatement[39948-39973]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[39987-40209]:Block[39987-40209]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[40062-40087]:ExpressionStatement[40062-40087]"
  }, {
    "left" : "removeChild(parent.getParent(), parent);",
    "right" : "removeChild(parent.getParent(), parent);",
    "info" : "ExpressionStatement[40161-40201]:ExpressionStatement[40161-40201]"
  }, {
    "left" : "if (node.getType() == Token.BLOCK)",
    "right" : "if (node.getType() == Token.BLOCK)",
    "info" : "IfStatement[40221-41154]:IfStatement[40221-41154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40256-40388]:Block[40256-40388]"
  }, {
    "left" : "node.detachChildren();",
    "right" : "node.detachChildren();",
    "info" : "ExpressionStatement[40360-40382]:ExpressionStatement[40360-40382]"
  }, {
    "left" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
    "right" : "if (parent.getType() == Token.LABEL\n        && node == parent.getLastChild())",
    "info" : "IfStatement[40394-41154]:IfStatement[40394-41154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40472-40690]:Block[40472-40690]"
  }, {
    "left" : "parent.removeChild(node);",
    "right" : "parent.removeChild(node);",
    "info" : "ExpressionStatement[40543-40568]:ExpressionStatement[40543-40568]"
  }, {
    "left" : "removeChild(parent.getParent(), parent);",
    "right" : "removeChild(parent.getParent(), parent);",
    "info" : "ExpressionStatement[40644-40684]:ExpressionStatement[40644-40684]"
  }, {
    "left" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
    "right" : "if (parent.getType() == Token.FOR\n        && parent.getChildCount() == 4)",
    "info" : "IfStatement[40696-41154]:IfStatement[40696-41154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[40770-41010]:Block[40770-41010]"
  }, {
    "left" : "parent.replaceChild(node, new Node(Token.EMPTY));",
    "right" : "parent.replaceChild(node, new Node(Token.EMPTY));",
    "info" : "ExpressionStatement[40955-41004]:ExpressionStatement[40955-41004]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41016-41154]:Block[41016-41154]"
  }, {
    "left" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
    "right" : "throw new IllegalStateException(\"Invalid attempt to remove node: \" +\n          node.toString() + \" of \"+ parent.toString());",
    "info" : "ThrowStatement[41024-41148]:ThrowStatement[41024-41148]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41260-41266]:Modifier[41260-41266]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41267-41274]:PrimitiveType[41267-41274]"
  }, {
    "left" : "tryMergeBlock",
    "right" : "tryMergeBlock",
    "info" : "SimpleName[41275-41288]:SimpleName[41275-41288]"
  }, {
    "left" : "Node block",
    "right" : "Node block",
    "info" : "SingleVariableDeclaration[41289-41299]:SingleVariableDeclaration[41289-41299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41301-41851]:Block[41301-41851]"
  }, {
    "left" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
    "right" : "Preconditions.checkState(block.getType() == Token.BLOCK);",
    "info" : "ExpressionStatement[41307-41364]:ExpressionStatement[41307-41364]"
  }, {
    "left" : "Node parent = block.getParent();",
    "right" : "Node parent = block.getParent();",
    "info" : "VariableDeclarationStatement[41369-41401]:VariableDeclarationStatement[41369-41401]"
  }, {
    "left" : "if (isStatementBlock(parent))",
    "right" : "if (isStatementBlock(parent))",
    "info" : "IfStatement[41532-41847]:IfStatement[41532-41847]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41562-41814]:Block[41562-41814]"
  }, {
    "left" : "Node previous = block;",
    "right" : "Node previous = block;",
    "info" : "VariableDeclarationStatement[41570-41592]:VariableDeclarationStatement[41570-41592]"
  }, {
    "left" : "while (block.hasChildren())",
    "right" : "while (block.hasChildren())",
    "info" : "WhileStatement[41599-41756]:WhileStatement[41599-41756]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41627-41756]:Block[41627-41756]"
  }, {
    "left" : "Node child = block.removeFirstChild();",
    "right" : "Node child = block.removeFirstChild();",
    "info" : "VariableDeclarationStatement[41637-41675]:VariableDeclarationStatement[41637-41675]"
  }, {
    "left" : "parent.addChildAfter(child, previous);",
    "right" : "parent.addChildAfter(child, previous);",
    "info" : "ExpressionStatement[41684-41722]:ExpressionStatement[41684-41722]"
  }, {
    "left" : "previous = child;",
    "right" : "previous = child;",
    "info" : "ExpressionStatement[41731-41748]:ExpressionStatement[41731-41748]"
  }, {
    "left" : "parent.removeChild(block);",
    "right" : "parent.removeChild(block);",
    "info" : "ExpressionStatement[41763-41789]:ExpressionStatement[41763-41789]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[41796-41808]:ReturnStatement[41796-41808]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41820-41847]:Block[41820-41847]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[41828-41841]:ReturnStatement[41828-41841]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[41893-41899]:Modifier[41893-41899]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[41900-41907]:PrimitiveType[41900-41907]"
  }, {
    "left" : "isCall",
    "right" : "isCall",
    "info" : "SimpleName[41908-41914]:SimpleName[41908-41914]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[41915-41921]:SingleVariableDeclaration[41915-41921]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[41923-41966]:Block[41923-41966]"
  }, {
    "left" : "return n.getType() == Token.CALL;",
    "right" : "return n.getType() == Token.CALL;",
    "info" : "ReturnStatement[41929-41962]:ReturnStatement[41929-41962]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42059-42065]:Modifier[42059-42065]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42066-42073]:PrimitiveType[42066-42073]"
  }, {
    "left" : "isCallOrNew",
    "right" : "isCallOrNew",
    "info" : "SimpleName[42074-42085]:SimpleName[42074-42085]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[42086-42095]:SingleVariableDeclaration[42086-42095]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42097-42160]:Block[42097-42160]"
  }, {
    "left" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
    "right" : "return NodeUtil.isCall(node) || NodeUtil.isNew(node);",
    "info" : "ReturnStatement[42103-42156]:ReturnStatement[42103-42156]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42206-42212]:Modifier[42206-42212]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42213-42220]:PrimitiveType[42213-42220]"
  }, {
    "left" : "isFunction",
    "right" : "isFunction",
    "info" : "SimpleName[42221-42231]:SimpleName[42221-42231]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42232-42238]:SingleVariableDeclaration[42232-42238]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42240-42287]:Block[42240-42287]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION;",
    "right" : "return n.getType() == Token.FUNCTION;",
    "info" : "ReturnStatement[42246-42283]:ReturnStatement[42246-42283]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42357-42363]:Modifier[42357-42363]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[42364-42368]:SimpleType[42364-42368]"
  }, {
    "left" : "getFunctionBody",
    "right" : "getFunctionBody",
    "info" : "SimpleName[42369-42384]:SimpleName[42369-42384]"
  }, {
    "left" : "Node fn",
    "right" : "Node fn",
    "info" : "SingleVariableDeclaration[42385-42392]:SingleVariableDeclaration[42385-42392]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42394-42478]:Block[42394-42478]"
  }, {
    "left" : "Preconditions.checkArgument(isFunction(fn));",
    "right" : "Preconditions.checkArgument(isFunction(fn));",
    "info" : "ExpressionStatement[42400-42444]:ExpressionStatement[42400-42444]"
  }, {
    "left" : "return fn.getLastChild();",
    "right" : "return fn.getLastChild();",
    "info" : "ReturnStatement[42449-42474]:ReturnStatement[42449-42474]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42520-42526]:Modifier[42520-42526]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42527-42534]:PrimitiveType[42527-42534]"
  }, {
    "left" : "isThis",
    "right" : "isThis",
    "info" : "SimpleName[42535-42541]:SimpleName[42535-42541]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[42542-42551]:SingleVariableDeclaration[42542-42551]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42553-42599]:Block[42553-42599]"
  }, {
    "left" : "return node.getType() == Token.THIS;",
    "right" : "return node.getType() == Token.THIS;",
    "info" : "ReturnStatement[42559-42595]:ReturnStatement[42559-42595]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42664-42670]:Modifier[42664-42670]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42671-42678]:PrimitiveType[42671-42678]"
  }, {
    "left" : "containsCall",
    "right" : "containsCall",
    "info" : "SimpleName[42679-42691]:SimpleName[42679-42691]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[42692-42698]:SingleVariableDeclaration[42692-42698]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[42700-42745]:Block[42700-42745]"
  }, {
    "left" : "return containsType(n, Token.CALL);",
    "right" : "return containsType(n, Token.CALL);",
    "info" : "ReturnStatement[42706-42741]:ReturnStatement[42706-42741]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[42988-42994]:Modifier[42988-42994]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[42995-43002]:PrimitiveType[42995-43002]"
  }, {
    "left" : "isFunctionDeclaration",
    "right" : "isFunctionDeclaration",
    "info" : "SimpleName[43003-43024]:SimpleName[43003-43024]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43025-43031]:SingleVariableDeclaration[43025-43031]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43033-43098]:Block[43033-43098]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION && isStatement(n);",
    "right" : "return n.getType() == Token.FUNCTION && isStatement(n);",
    "info" : "ReturnStatement[43039-43094]:ReturnStatement[43039-43094]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[43288-43294]:Modifier[43288-43294]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[43295-43302]:PrimitiveType[43295-43302]"
  }, {
    "left" : "isHoistedFunctionDeclaration",
    "right" : "isHoistedFunctionDeclaration",
    "info" : "SimpleName[43303-43331]:SimpleName[43303-43331]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[43332-43338]:SingleVariableDeclaration[43332-43338]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[43340-43504]:Block[43340-43504]"
  }, {
    "left" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
    "right" : "return isFunctionDeclaration(n)\n        && (n.getParent().getType() == Token.SCRIPT\n            || n.getParent().getParent().getType() == Token.FUNCTION);",
    "info" : "ReturnStatement[43346-43500]:ReturnStatement[43346-43500]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44164-44170]:Modifier[44164-44170]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44171-44178]:PrimitiveType[44171-44178]"
  }, {
    "left" : "isFunctionExpression",
    "right" : "isFunctionExpression",
    "info" : "SimpleName[44179-44199]:SimpleName[44179-44199]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[44200-44206]:SingleVariableDeclaration[44200-44206]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44208-44274]:Block[44208-44274]"
  }, {
    "left" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
    "right" : "return n.getType() == Token.FUNCTION && !isStatement(n);",
    "info" : "ReturnStatement[44214-44270]:ReturnStatement[44214-44270]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44469-44475]:Modifier[44469-44475]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44476-44483]:PrimitiveType[44476-44483]"
  }, {
    "left" : "isEmptyFunctionExpression",
    "right" : "isEmptyFunctionExpression",
    "info" : "SimpleName[44484-44509]:SimpleName[44484-44509]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[44510-44519]:SingleVariableDeclaration[44510-44519]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44521-44602]:Block[44521-44602]"
  }, {
    "left" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
    "right" : "return isFunctionExpression(node) && isEmptyBlock(node.getLastChild());",
    "info" : "ReturnStatement[44527-44598]:ReturnStatement[44527-44598]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[44752-44758]:Modifier[44752-44758]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[44759-44766]:PrimitiveType[44759-44766]"
  }, {
    "left" : "isVarArgsFunction",
    "right" : "isVarArgsFunction",
    "info" : "SimpleName[44767-44784]:SimpleName[44767-44784]"
  }, {
    "left" : "Node function",
    "right" : "Node function",
    "info" : "SingleVariableDeclaration[44785-44798]:SingleVariableDeclaration[44785-44798]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[44800-44976]:Block[44800-44976]"
  }, {
    "left" : "Preconditions.checkArgument(isFunction(function));",
    "right" : "Preconditions.checkArgument(isFunction(function));",
    "info" : "ExpressionStatement[44806-44856]:ExpressionStatement[44806-44856]"
  }, {
    "left" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
    "right" : "return isNameReferenced(\n        function.getLastChild(),\n        \"arguments\",\n        new MatchNotFunction());",
    "info" : "ReturnStatement[44861-44972]:ReturnStatement[44861-44972]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45080-45086]:Modifier[45080-45086]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45087-45094]:PrimitiveType[45087-45094]"
  }, {
    "left" : "isObjectCallMethod",
    "right" : "isObjectCallMethod",
    "info" : "SimpleName[45095-45113]:SimpleName[45095-45113]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[45114-45127]:SingleVariableDeclaration[45114-45127]"
  }, {
    "left" : "String methodName",
    "right" : "String methodName",
    "info" : "SingleVariableDeclaration[45129-45146]:SingleVariableDeclaration[45129-45146]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45148-45583]:Block[45148-45583]"
  }, {
    "left" : "if (callNode.getType() == Token.CALL)",
    "right" : "if (callNode.getType() == Token.CALL)",
    "info" : "IfStatement[45154-45561]:IfStatement[45154-45561]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45192-45561]:Block[45192-45561]"
  }, {
    "left" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
    "right" : "Node functionIndentifyingExpression = callNode.getFirstChild();",
    "info" : "VariableDeclarationStatement[45200-45263]:VariableDeclarationStatement[45200-45263]"
  }, {
    "left" : "if (isGet(functionIndentifyingExpression))",
    "right" : "if (isGet(functionIndentifyingExpression))",
    "info" : "IfStatement[45270-45555]:IfStatement[45270-45555]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45313-45555]:Block[45313-45555]"
  }, {
    "left" : "Node last = functionIndentifyingExpression.getLastChild();",
    "right" : "Node last = functionIndentifyingExpression.getLastChild();",
    "info" : "VariableDeclarationStatement[45323-45381]:VariableDeclarationStatement[45323-45381]"
  }, {
    "left" : "if (last != null && last.getType() == Token.STRING)",
    "right" : "if (last != null && last.getType() == Token.STRING)",
    "info" : "IfStatement[45390-45547]:IfStatement[45390-45547]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45442-45547]:Block[45442-45547]"
  }, {
    "left" : "String propName = last.getString();",
    "right" : "String propName = last.getString();",
    "info" : "VariableDeclarationStatement[45454-45489]:VariableDeclarationStatement[45454-45489]"
  }, {
    "left" : "return (propName.equals(methodName));",
    "right" : "return (propName.equals(methodName));",
    "info" : "ReturnStatement[45500-45537]:ReturnStatement[45500-45537]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[45566-45579]:ReturnStatement[45566-45579]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45718-45724]:Modifier[45718-45724]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45725-45732]:PrimitiveType[45725-45732]"
  }, {
    "left" : "isFunctionObjectCall",
    "right" : "isFunctionObjectCall",
    "info" : "SimpleName[45733-45753]:SimpleName[45733-45753]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[45754-45767]:SingleVariableDeclaration[45754-45767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[45769-45823]:Block[45769-45823]"
  }, {
    "left" : "return isObjectCallMethod(callNode, \"call\");",
    "right" : "return isObjectCallMethod(callNode, \"call\");",
    "info" : "ReturnStatement[45775-45819]:ReturnStatement[45775-45819]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[45959-45965]:Modifier[45959-45965]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[45966-45973]:PrimitiveType[45966-45973]"
  }, {
    "left" : "isFunctionObjectApply",
    "right" : "isFunctionObjectApply",
    "info" : "SimpleName[45974-45995]:SimpleName[45974-45995]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[45996-46009]:SingleVariableDeclaration[45996-46009]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46011-46066]:Block[46011-46066]"
  }, {
    "left" : "return isObjectCallMethod(callNode, \"apply\");",
    "right" : "return isObjectCallMethod(callNode, \"apply\");",
    "info" : "ReturnStatement[46017-46062]:ReturnStatement[46017-46062]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46254-46260]:Modifier[46254-46260]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[46261-46268]:PrimitiveType[46261-46268]"
  }, {
    "left" : "isFunctionObjectCallOrApply",
    "right" : "isFunctionObjectCallOrApply",
    "info" : "SimpleName[46269-46296]:SimpleName[46269-46296]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[46297-46310]:SingleVariableDeclaration[46297-46310]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46312-46395]:Block[46312-46395]"
  }, {
    "left" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
    "right" : "return isFunctionObjectCall(callNode) || isFunctionObjectApply(callNode);",
    "info" : "ReturnStatement[46318-46391]:ReturnStatement[46318-46391]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[46558-46564]:Modifier[46558-46564]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[46565-46572]:PrimitiveType[46565-46572]"
  }, {
    "left" : "isSimpleFunctionObjectCall",
    "right" : "isSimpleFunctionObjectCall",
    "info" : "SimpleName[46573-46599]:SimpleName[46573-46599]"
  }, {
    "left" : "Node callNode",
    "right" : "Node callNode",
    "info" : "SingleVariableDeclaration[46600-46613]:SingleVariableDeclaration[46600-46613]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46615-46794]:Block[46615-46794]"
  }, {
    "left" : "if (isFunctionObjectCall(callNode))",
    "right" : "if (isFunctionObjectCall(callNode))",
    "info" : "IfStatement[46621-46771]:IfStatement[46621-46771]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46657-46771]:Block[46657-46771]"
  }, {
    "left" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
    "right" : "if (callNode.getFirstChild().getFirstChild().getType() == Token.NAME)",
    "info" : "IfStatement[46665-46765]:IfStatement[46665-46765]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[46735-46765]:Block[46735-46765]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[46745-46757]:ReturnStatement[46745-46757]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[46777-46790]:ReturnStatement[46777-46790]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47147-47153]:Modifier[47147-47153]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47154-47161]:PrimitiveType[47154-47161]"
  }, {
    "left" : "isLhs",
    "right" : "isLhs",
    "info" : "SimpleName[47162-47167]:SimpleName[47162-47167]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[47168-47174]:SingleVariableDeclaration[47168-47174]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[47176-47187]:SingleVariableDeclaration[47176-47187]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47189-47316]:Block[47189-47316]"
  }, {
    "left" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
    "right" : "return (parent.getType() == Token.ASSIGN && parent.getFirstChild() == n) ||\n           parent.getType() == Token.VAR;",
    "info" : "ReturnStatement[47195-47312]:ReturnStatement[47195-47312]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47512-47518]:Modifier[47512-47518]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47519-47526]:PrimitiveType[47519-47526]"
  }, {
    "left" : "isObjectLitKey",
    "right" : "isObjectLitKey",
    "info" : "SimpleName[47527-47541]:SimpleName[47527-47541]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[47542-47551]:SingleVariableDeclaration[47542-47551]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[47553-47564]:SingleVariableDeclaration[47553-47564]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[47566-47792]:Block[47566-47792]"
  }, {
    "left" : "switch (node.getType()) {\n      case Token.NUMBER:\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "right" : "switch (node.getType()) {\n      case Token.NUMBER:\n      case Token.STRING:\n        return parent.getType() == Token.OBJECTLIT;\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "info" : "SwitchStatement[47572-47770]:SwitchStatement[47572-47770]"
  }, {
    "left" : "case Token.NUMBER:",
    "right" : "case Token.NUMBER:",
    "info" : "SwitchCase[47604-47622]:SwitchCase[47604-47622]"
  }, {
    "left" : "case Token.STRING:",
    "right" : "case Token.STRING:",
    "info" : "SwitchCase[47629-47647]:SwitchCase[47629-47647]"
  }, {
    "left" : "return parent.getType() == Token.OBJECTLIT;",
    "right" : "return parent.getType() == Token.OBJECTLIT;",
    "info" : "ReturnStatement[47656-47699]:ReturnStatement[47656-47699]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[47706-47721]:SwitchCase[47706-47721]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[47728-47743]:SwitchCase[47728-47743]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[47752-47764]:ReturnStatement[47752-47764]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[47775-47788]:ReturnStatement[47775-47788]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[47963-47969]:Modifier[47963-47969]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[47970-47977]:PrimitiveType[47970-47977]"
  }, {
    "left" : "isGetOrSetKey",
    "right" : "isGetOrSetKey",
    "info" : "SimpleName[47978-47991]:SimpleName[47978-47991]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[47992-48001]:SingleVariableDeclaration[47992-48001]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48003-48127]:Block[48003-48127]"
  }, {
    "left" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "right" : "switch (node.getType()) {\n      case Token.GET:\n      case Token.SET:\n        return true;\n    }",
    "info" : "SwitchStatement[48009-48105]:SwitchStatement[48009-48105]"
  }, {
    "left" : "case Token.GET:",
    "right" : "case Token.GET:",
    "info" : "SwitchCase[48041-48056]:SwitchCase[48041-48056]"
  }, {
    "left" : "case Token.SET:",
    "right" : "case Token.SET:",
    "info" : "SwitchCase[48063-48078]:SwitchCase[48063-48078]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[48087-48099]:ReturnStatement[48087-48099]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[48110-48123]:ReturnStatement[48110-48123]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[48398-48404]:Modifier[48398-48404]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[48405-48411]:SimpleType[48405-48411]"
  }, {
    "left" : "opToStr",
    "right" : "opToStr",
    "info" : "SimpleName[48412-48419]:SimpleName[48412-48419]"
  }, {
    "left" : "int operator",
    "right" : "int operator",
    "info" : "SingleVariableDeclaration[48420-48432]:SingleVariableDeclaration[48420-48432]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[48434-50044]:Block[48434-50044]"
  }, {
    "left" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
    "right" : "switch (operator) {\n      case Token.BITOR: return \"|\";\n      case Token.OR: return \"||\";\n      case Token.BITXOR: return \"^\";\n      case Token.AND: return \"&&\";\n      case Token.BITAND: return \"&\";\n      case Token.SHEQ: return \"===\";\n      case Token.EQ: return \"==\";\n      case Token.NOT: return \"!\";\n      case Token.NE: return \"!=\";\n      case Token.SHNE: return \"!==\";\n      case Token.LSH: return \"<<\";\n      case Token.IN: return \"in\";\n      case Token.LE: return \"<=\";\n      case Token.LT: return \"<\";\n      case Token.URSH: return \">>>\";\n      case Token.RSH: return \">>\";\n      case Token.GE: return \">=\";\n      case Token.GT: return \">\";\n      case Token.MUL: return \"*\";\n      case Token.DIV: return \"/\";\n      case Token.MOD: return \"%\";\n      case Token.BITNOT: return \"~\";\n      case Token.ADD: return \"+\";\n      case Token.SUB: return \"-\";\n      case Token.POS: return \"+\";\n      case Token.NEG: return \"-\";\n      case Token.ASSIGN: return \"=\";\n      case Token.ASSIGN_BITOR: return \"|=\";\n      case Token.ASSIGN_BITXOR: return \"^=\";\n      case Token.ASSIGN_BITAND: return \"&=\";\n      case Token.ASSIGN_LSH: return \"<<=\";\n      case Token.ASSIGN_RSH: return \">>=\";\n      case Token.ASSIGN_URSH: return \">>>=\";\n      case Token.ASSIGN_ADD: return \"+=\";\n      case Token.ASSIGN_SUB: return \"-=\";\n      case Token.ASSIGN_MUL: return \"*=\";\n      case Token.ASSIGN_DIV: return \"/=\";\n      case Token.ASSIGN_MOD: return \"%=\";\n      case Token.VOID: return \"void\";\n      case Token.TYPEOF: return \"typeof\";\n      case Token.INSTANCEOF: return \"instanceof\";\n      default: return null;\n    }",
    "info" : "SwitchStatement[48440-50040]:SwitchStatement[48440-50040]"
  }, {
    "left" : "case Token.BITOR:",
    "right" : "case Token.BITOR:",
    "info" : "SwitchCase[48466-48483]:SwitchCase[48466-48483]"
  }, {
    "left" : "return \"|\";",
    "right" : "return \"|\";",
    "info" : "ReturnStatement[48484-48495]:ReturnStatement[48484-48495]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[48502-48516]:SwitchCase[48502-48516]"
  }, {
    "left" : "return \"||\";",
    "right" : "return \"||\";",
    "info" : "ReturnStatement[48517-48529]:ReturnStatement[48517-48529]"
  }, {
    "left" : "case Token.BITXOR:",
    "right" : "case Token.BITXOR:",
    "info" : "SwitchCase[48536-48554]:SwitchCase[48536-48554]"
  }, {
    "left" : "return \"^\";",
    "right" : "return \"^\";",
    "info" : "ReturnStatement[48555-48566]:ReturnStatement[48555-48566]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[48573-48588]:SwitchCase[48573-48588]"
  }, {
    "left" : "return \"&&\";",
    "right" : "return \"&&\";",
    "info" : "ReturnStatement[48589-48601]:ReturnStatement[48589-48601]"
  }, {
    "left" : "case Token.BITAND:",
    "right" : "case Token.BITAND:",
    "info" : "SwitchCase[48608-48626]:SwitchCase[48608-48626]"
  }, {
    "left" : "return \"&\";",
    "right" : "return \"&\";",
    "info" : "ReturnStatement[48627-48638]:ReturnStatement[48627-48638]"
  }, {
    "left" : "case Token.SHEQ:",
    "right" : "case Token.SHEQ:",
    "info" : "SwitchCase[48645-48661]:SwitchCase[48645-48661]"
  }, {
    "left" : "return \"===\";",
    "right" : "return \"===\";",
    "info" : "ReturnStatement[48662-48675]:ReturnStatement[48662-48675]"
  }, {
    "left" : "case Token.EQ:",
    "right" : "case Token.EQ:",
    "info" : "SwitchCase[48682-48696]:SwitchCase[48682-48696]"
  }, {
    "left" : "return \"==\";",
    "right" : "return \"==\";",
    "info" : "ReturnStatement[48697-48709]:ReturnStatement[48697-48709]"
  }, {
    "left" : "case Token.NOT:",
    "right" : "case Token.NOT:",
    "info" : "SwitchCase[48716-48731]:SwitchCase[48716-48731]"
  }, {
    "left" : "return \"!\";",
    "right" : "return \"!\";",
    "info" : "ReturnStatement[48732-48743]:ReturnStatement[48732-48743]"
  }, {
    "left" : "case Token.NE:",
    "right" : "case Token.NE:",
    "info" : "SwitchCase[48750-48764]:SwitchCase[48750-48764]"
  }, {
    "left" : "return \"!=\";",
    "right" : "return \"!=\";",
    "info" : "ReturnStatement[48765-48777]:ReturnStatement[48765-48777]"
  }, {
    "left" : "case Token.SHNE:",
    "right" : "case Token.SHNE:",
    "info" : "SwitchCase[48784-48800]:SwitchCase[48784-48800]"
  }, {
    "left" : "return \"!==\";",
    "right" : "return \"!==\";",
    "info" : "ReturnStatement[48801-48814]:ReturnStatement[48801-48814]"
  }, {
    "left" : "case Token.LSH:",
    "right" : "case Token.LSH:",
    "info" : "SwitchCase[48821-48836]:SwitchCase[48821-48836]"
  }, {
    "left" : "return \"<<\";",
    "right" : "return \"<<\";",
    "info" : "ReturnStatement[48837-48849]:ReturnStatement[48837-48849]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[48856-48870]:SwitchCase[48856-48870]"
  }, {
    "left" : "return \"in\";",
    "right" : "return \"in\";",
    "info" : "ReturnStatement[48871-48883]:ReturnStatement[48871-48883]"
  }, {
    "left" : "case Token.LE:",
    "right" : "case Token.LE:",
    "info" : "SwitchCase[48890-48904]:SwitchCase[48890-48904]"
  }, {
    "left" : "return \"<=\";",
    "right" : "return \"<=\";",
    "info" : "ReturnStatement[48905-48917]:ReturnStatement[48905-48917]"
  }, {
    "left" : "case Token.LT:",
    "right" : "case Token.LT:",
    "info" : "SwitchCase[48924-48938]:SwitchCase[48924-48938]"
  }, {
    "left" : "return \"<\";",
    "right" : "return \"<\";",
    "info" : "ReturnStatement[48939-48950]:ReturnStatement[48939-48950]"
  }, {
    "left" : "case Token.URSH:",
    "right" : "case Token.URSH:",
    "info" : "SwitchCase[48957-48973]:SwitchCase[48957-48973]"
  }, {
    "left" : "return \">>>\";",
    "right" : "return \">>>\";",
    "info" : "ReturnStatement[48974-48987]:ReturnStatement[48974-48987]"
  }, {
    "left" : "case Token.RSH:",
    "right" : "case Token.RSH:",
    "info" : "SwitchCase[48994-49009]:SwitchCase[48994-49009]"
  }, {
    "left" : "return \">>\";",
    "right" : "return \">>\";",
    "info" : "ReturnStatement[49010-49022]:ReturnStatement[49010-49022]"
  }, {
    "left" : "case Token.GE:",
    "right" : "case Token.GE:",
    "info" : "SwitchCase[49029-49043]:SwitchCase[49029-49043]"
  }, {
    "left" : "return \">=\";",
    "right" : "return \">=\";",
    "info" : "ReturnStatement[49044-49056]:ReturnStatement[49044-49056]"
  }, {
    "left" : "case Token.GT:",
    "right" : "case Token.GT:",
    "info" : "SwitchCase[49063-49077]:SwitchCase[49063-49077]"
  }, {
    "left" : "return \">\";",
    "right" : "return \">\";",
    "info" : "ReturnStatement[49078-49089]:ReturnStatement[49078-49089]"
  }, {
    "left" : "case Token.MUL:",
    "right" : "case Token.MUL:",
    "info" : "SwitchCase[49096-49111]:SwitchCase[49096-49111]"
  }, {
    "left" : "return \"*\";",
    "right" : "return \"*\";",
    "info" : "ReturnStatement[49112-49123]:ReturnStatement[49112-49123]"
  }, {
    "left" : "case Token.DIV:",
    "right" : "case Token.DIV:",
    "info" : "SwitchCase[49130-49145]:SwitchCase[49130-49145]"
  }, {
    "left" : "return \"/\";",
    "right" : "return \"/\";",
    "info" : "ReturnStatement[49146-49157]:ReturnStatement[49146-49157]"
  }, {
    "left" : "case Token.MOD:",
    "right" : "case Token.MOD:",
    "info" : "SwitchCase[49164-49179]:SwitchCase[49164-49179]"
  }, {
    "left" : "return \"%\";",
    "right" : "return \"%\";",
    "info" : "ReturnStatement[49180-49191]:ReturnStatement[49180-49191]"
  }, {
    "left" : "case Token.BITNOT:",
    "right" : "case Token.BITNOT:",
    "info" : "SwitchCase[49198-49216]:SwitchCase[49198-49216]"
  }, {
    "left" : "return \"~\";",
    "right" : "return \"~\";",
    "info" : "ReturnStatement[49217-49228]:ReturnStatement[49217-49228]"
  }, {
    "left" : "case Token.ADD:",
    "right" : "case Token.ADD:",
    "info" : "SwitchCase[49235-49250]:SwitchCase[49235-49250]"
  }, {
    "left" : "return \"+\";",
    "right" : "return \"+\";",
    "info" : "ReturnStatement[49251-49262]:ReturnStatement[49251-49262]"
  }, {
    "left" : "case Token.SUB:",
    "right" : "case Token.SUB:",
    "info" : "SwitchCase[49269-49284]:SwitchCase[49269-49284]"
  }, {
    "left" : "return \"-\";",
    "right" : "return \"-\";",
    "info" : "ReturnStatement[49285-49296]:ReturnStatement[49285-49296]"
  }, {
    "left" : "case Token.POS:",
    "right" : "case Token.POS:",
    "info" : "SwitchCase[49303-49318]:SwitchCase[49303-49318]"
  }, {
    "left" : "return \"+\";",
    "right" : "return \"+\";",
    "info" : "ReturnStatement[49319-49330]:ReturnStatement[49319-49330]"
  }, {
    "left" : "case Token.NEG:",
    "right" : "case Token.NEG:",
    "info" : "SwitchCase[49337-49352]:SwitchCase[49337-49352]"
  }, {
    "left" : "return \"-\";",
    "right" : "return \"-\";",
    "info" : "ReturnStatement[49353-49364]:ReturnStatement[49353-49364]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[49371-49389]:SwitchCase[49371-49389]"
  }, {
    "left" : "return \"=\";",
    "right" : "return \"=\";",
    "info" : "ReturnStatement[49390-49401]:ReturnStatement[49390-49401]"
  }, {
    "left" : "case Token.ASSIGN_BITOR:",
    "right" : "case Token.ASSIGN_BITOR:",
    "info" : "SwitchCase[49408-49432]:SwitchCase[49408-49432]"
  }, {
    "left" : "return \"|=\";",
    "right" : "return \"|=\";",
    "info" : "ReturnStatement[49433-49445]:ReturnStatement[49433-49445]"
  }, {
    "left" : "case Token.ASSIGN_BITXOR:",
    "right" : "case Token.ASSIGN_BITXOR:",
    "info" : "SwitchCase[49452-49477]:SwitchCase[49452-49477]"
  }, {
    "left" : "return \"^=\";",
    "right" : "return \"^=\";",
    "info" : "ReturnStatement[49478-49490]:ReturnStatement[49478-49490]"
  }, {
    "left" : "case Token.ASSIGN_BITAND:",
    "right" : "case Token.ASSIGN_BITAND:",
    "info" : "SwitchCase[49497-49522]:SwitchCase[49497-49522]"
  }, {
    "left" : "return \"&=\";",
    "right" : "return \"&=\";",
    "info" : "ReturnStatement[49523-49535]:ReturnStatement[49523-49535]"
  }, {
    "left" : "case Token.ASSIGN_LSH:",
    "right" : "case Token.ASSIGN_LSH:",
    "info" : "SwitchCase[49542-49564]:SwitchCase[49542-49564]"
  }, {
    "left" : "return \"<<=\";",
    "right" : "return \"<<=\";",
    "info" : "ReturnStatement[49565-49578]:ReturnStatement[49565-49578]"
  }, {
    "left" : "case Token.ASSIGN_RSH:",
    "right" : "case Token.ASSIGN_RSH:",
    "info" : "SwitchCase[49585-49607]:SwitchCase[49585-49607]"
  }, {
    "left" : "return \">>=\";",
    "right" : "return \">>=\";",
    "info" : "ReturnStatement[49608-49621]:ReturnStatement[49608-49621]"
  }, {
    "left" : "case Token.ASSIGN_URSH:",
    "right" : "case Token.ASSIGN_URSH:",
    "info" : "SwitchCase[49628-49651]:SwitchCase[49628-49651]"
  }, {
    "left" : "return \">>>=\";",
    "right" : "return \">>>=\";",
    "info" : "ReturnStatement[49652-49666]:ReturnStatement[49652-49666]"
  }, {
    "left" : "case Token.ASSIGN_ADD:",
    "right" : "case Token.ASSIGN_ADD:",
    "info" : "SwitchCase[49673-49695]:SwitchCase[49673-49695]"
  }, {
    "left" : "return \"+=\";",
    "right" : "return \"+=\";",
    "info" : "ReturnStatement[49696-49708]:ReturnStatement[49696-49708]"
  }, {
    "left" : "case Token.ASSIGN_SUB:",
    "right" : "case Token.ASSIGN_SUB:",
    "info" : "SwitchCase[49715-49737]:SwitchCase[49715-49737]"
  }, {
    "left" : "return \"-=\";",
    "right" : "return \"-=\";",
    "info" : "ReturnStatement[49738-49750]:ReturnStatement[49738-49750]"
  }, {
    "left" : "case Token.ASSIGN_MUL:",
    "right" : "case Token.ASSIGN_MUL:",
    "info" : "SwitchCase[49757-49779]:SwitchCase[49757-49779]"
  }, {
    "left" : "return \"*=\";",
    "right" : "return \"*=\";",
    "info" : "ReturnStatement[49780-49792]:ReturnStatement[49780-49792]"
  }, {
    "left" : "case Token.ASSIGN_DIV:",
    "right" : "case Token.ASSIGN_DIV:",
    "info" : "SwitchCase[49799-49821]:SwitchCase[49799-49821]"
  }, {
    "left" : "return \"/=\";",
    "right" : "return \"/=\";",
    "info" : "ReturnStatement[49822-49834]:ReturnStatement[49822-49834]"
  }, {
    "left" : "case Token.ASSIGN_MOD:",
    "right" : "case Token.ASSIGN_MOD:",
    "info" : "SwitchCase[49841-49863]:SwitchCase[49841-49863]"
  }, {
    "left" : "return \"%=\";",
    "right" : "return \"%=\";",
    "info" : "ReturnStatement[49864-49876]:ReturnStatement[49864-49876]"
  }, {
    "left" : "case Token.VOID:",
    "right" : "case Token.VOID:",
    "info" : "SwitchCase[49883-49899]:SwitchCase[49883-49899]"
  }, {
    "left" : "return \"void\";",
    "right" : "return \"void\";",
    "info" : "ReturnStatement[49900-49914]:ReturnStatement[49900-49914]"
  }, {
    "left" : "case Token.TYPEOF:",
    "right" : "case Token.TYPEOF:",
    "info" : "SwitchCase[49921-49939]:SwitchCase[49921-49939]"
  }, {
    "left" : "return \"typeof\";",
    "right" : "return \"typeof\";",
    "info" : "ReturnStatement[49940-49956]:ReturnStatement[49940-49956]"
  }, {
    "left" : "case Token.INSTANCEOF:",
    "right" : "case Token.INSTANCEOF:",
    "info" : "SwitchCase[49963-49985]:SwitchCase[49963-49985]"
  }, {
    "left" : "return \"instanceof\";",
    "right" : "return \"instanceof\";",
    "info" : "ReturnStatement[49986-50006]:ReturnStatement[49986-50006]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[50013-50021]:SwitchCase[50013-50021]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[50022-50034]:ReturnStatement[50022-50034]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50322-50328]:Modifier[50322-50328]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[50329-50335]:SimpleType[50329-50335]"
  }, {
    "left" : "opToStrNoFail",
    "right" : "opToStrNoFail",
    "info" : "SimpleName[50336-50349]:SimpleName[50336-50349]"
  }, {
    "left" : "int operator",
    "right" : "int operator",
    "info" : "SingleVariableDeclaration[50350-50362]:SingleVariableDeclaration[50350-50362]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50364-50551]:Block[50364-50551]"
  }, {
    "left" : "String res = opToStr(operator);",
    "right" : "String res = opToStr(operator);",
    "info" : "VariableDeclarationStatement[50370-50401]:VariableDeclarationStatement[50370-50401]"
  }, {
    "left" : "if (res == null)",
    "right" : "if (res == null)",
    "info" : "IfStatement[50406-50531]:IfStatement[50406-50531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50423-50531]:Block[50423-50531]"
  }, {
    "left" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
    "right" : "throw new Error(\"Unknown op \" + operator + \": \" +\n                      Token.name(operator));",
    "info" : "ThrowStatement[50431-50525]:ThrowStatement[50431-50525]"
  }, {
    "left" : "return res;",
    "right" : "return res;",
    "info" : "ReturnStatement[50536-50547]:ReturnStatement[50536-50547]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50639-50645]:Modifier[50639-50645]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[50646-50653]:PrimitiveType[50646-50653]"
  }, {
    "left" : "containsType",
    "right" : "containsType",
    "info" : "SimpleName[50654-50666]:SimpleName[50654-50666]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[50667-50676]:SingleVariableDeclaration[50667-50676]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[50708-50716]:SingleVariableDeclaration[50708-50716]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[50748-50784]:SingleVariableDeclaration[50748-50784]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50786-50860]:Block[50786-50860]"
  }, {
    "left" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
    "right" : "return has(node, new MatchNodeType(type), traverseChildrenPred);",
    "info" : "ReturnStatement[50792-50856]:ReturnStatement[50792-50856]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[50948-50954]:Modifier[50948-50954]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[50955-50962]:PrimitiveType[50955-50962]"
  }, {
    "left" : "containsType",
    "right" : "containsType",
    "info" : "SimpleName[50963-50975]:SimpleName[50963-50975]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[50976-50985]:SingleVariableDeclaration[50976-50985]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[50987-50995]:SingleVariableDeclaration[50987-50995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[50997-51070]:Block[50997-51070]"
  }, {
    "left" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
    "right" : "return containsType(node, type, Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[51003-51066]:ReturnStatement[51003-51066]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51290-51296]:Modifier[51290-51296]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[51297-51301]:PrimitiveType[51297-51301]"
  }, {
    "left" : "redeclareVarsInsideBranch",
    "right" : "redeclareVarsInsideBranch",
    "info" : "SimpleName[51302-51327]:SimpleName[51302-51327]"
  }, {
    "left" : "Node branch",
    "right" : "Node branch",
    "info" : "SingleVariableDeclaration[51328-51339]:SingleVariableDeclaration[51328-51339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51341-51822]:Block[51341-51822]"
  }, {
    "left" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
    "right" : "Collection<Node> vars = getVarsDeclaredInBranch(branch);",
    "info" : "VariableDeclarationStatement[51347-51403]:VariableDeclarationStatement[51347-51403]"
  }, {
    "left" : "if (vars.isEmpty())",
    "right" : "if (vars.isEmpty())",
    "info" : "IfStatement[51408-51449]:IfStatement[51408-51449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51428-51449]:Block[51428-51449]"
  }, {
    "left" : "return;",
    "right" : "return;",
    "info" : "ReturnStatement[51436-51443]:ReturnStatement[51436-51443]"
  }, {
    "left" : "Node parent = getAddingRoot(branch);",
    "right" : "Node parent = getAddingRoot(branch);",
    "info" : "VariableDeclarationStatement[51455-51491]:VariableDeclarationStatement[51455-51491]"
  }, {
    "left" : "for (Node nameNode : vars)",
    "right" : "for (Node nameNode : vars)",
    "info" : "EnhancedForStatement[51496-51818]:EnhancedForStatement[51496-51818]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51523-51818]:Block[51523-51818]"
  }, {
    "left" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
    "right" : "Node var = new Node(\n          Token.VAR,\n          Node.newString(Token.NAME, nameNode.getString())\n              .copyInformationFrom(nameNode))\n          .copyInformationFrom(nameNode);",
    "info" : "VariableDeclarationStatement[51531-51719]:VariableDeclarationStatement[51531-51719]"
  }, {
    "left" : "copyNameAnnotations(nameNode, var.getFirstChild());",
    "right" : "copyNameAnnotations(nameNode, var.getFirstChild());",
    "info" : "ExpressionStatement[51726-51777]:ExpressionStatement[51726-51777]"
  }, {
    "left" : "parent.addChildToFront(var);",
    "right" : "parent.addChildToFront(var);",
    "info" : "ExpressionStatement[51784-51812]:ExpressionStatement[51784-51812]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[51934-51940]:Modifier[51934-51940]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[51941-51945]:PrimitiveType[51941-51945]"
  }, {
    "left" : "copyNameAnnotations",
    "right" : "copyNameAnnotations",
    "info" : "SimpleName[51946-51965]:SimpleName[51946-51965]"
  }, {
    "left" : "Node source",
    "right" : "Node source",
    "info" : "SingleVariableDeclaration[51966-51977]:SingleVariableDeclaration[51966-51977]"
  }, {
    "left" : "Node destination",
    "right" : "Node destination",
    "info" : "SingleVariableDeclaration[51979-51995]:SingleVariableDeclaration[51979-51995]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[51997-52127]:Block[51997-52127]"
  }, {
    "left" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
    "right" : "if (source.getBooleanProp(Node.IS_CONSTANT_NAME))",
    "info" : "IfStatement[52003-52123]:IfStatement[52003-52123]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52053-52123]:Block[52053-52123]"
  }, {
    "left" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "destination.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[52061-52117]:ExpressionStatement[52061-52117]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[52248-52255]:Modifier[52248-52255]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[52256-52262]:Modifier[52256-52262]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[52263-52267]:SimpleType[52263-52267]"
  }, {
    "left" : "getAddingRoot",
    "right" : "getAddingRoot",
    "info" : "SimpleName[52268-52281]:SimpleName[52268-52281]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[52282-52288]:SingleVariableDeclaration[52282-52288]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52290-52953]:Block[52290-52953]"
  }, {
    "left" : "Node addingRoot = null;",
    "right" : "Node addingRoot = null;",
    "info" : "VariableDeclarationStatement[52296-52319]:VariableDeclarationStatement[52296-52319]"
  }, {
    "left" : "Node ancestor = n;",
    "right" : "Node ancestor = n;",
    "info" : "VariableDeclarationStatement[52324-52342]:VariableDeclarationStatement[52324-52342]"
  }, {
    "left" : "while (null != (ancestor = ancestor.getParent()))",
    "right" : "while (null != (ancestor = ancestor.getParent()))",
    "info" : "WhileStatement[52347-52633]:WhileStatement[52347-52633]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52397-52633]:Block[52397-52633]"
  }, {
    "left" : "int type = ancestor.getType();",
    "right" : "int type = ancestor.getType();",
    "info" : "VariableDeclarationStatement[52405-52435]:VariableDeclarationStatement[52405-52435]"
  }, {
    "left" : "if (type == Token.SCRIPT)",
    "right" : "if (type == Token.SCRIPT)",
    "info" : "IfStatement[52442-52627]:IfStatement[52442-52627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52468-52523]:Block[52468-52523]"
  }, {
    "left" : "addingRoot = ancestor;",
    "right" : "addingRoot = ancestor;",
    "info" : "ExpressionStatement[52478-52500]:ExpressionStatement[52478-52500]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[52509-52515]:BreakStatement[52509-52515]"
  }, {
    "left" : "if (type == Token.FUNCTION)",
    "right" : "if (type == Token.FUNCTION)",
    "info" : "IfStatement[52529-52627]:IfStatement[52529-52627]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[52557-52627]:Block[52557-52627]"
  }, {
    "left" : "addingRoot = ancestor.getLastChild();",
    "right" : "addingRoot = ancestor.getLastChild();",
    "info" : "ExpressionStatement[52567-52604]:ExpressionStatement[52567-52604]"
  }, {
    "left" : "break;",
    "right" : "break;",
    "info" : "BreakStatement[52613-52619]:BreakStatement[52613-52619]"
  }, {
    "left" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
    "right" : "Preconditions.checkState(addingRoot.getType() == Token.BLOCK ||\n        addingRoot.getType() == Token.SCRIPT);",
    "info" : "ExpressionStatement[52686-52796]:ExpressionStatement[52686-52796]"
  }, {
    "left" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
    "right" : "Preconditions.checkState(addingRoot.getFirstChild() == null ||\n        addingRoot.getFirstChild().getType() != Token.SCRIPT);",
    "info" : "ExpressionStatement[52801-52926]:ExpressionStatement[52801-52926]"
  }, {
    "left" : "return addingRoot;",
    "right" : "return addingRoot;",
    "info" : "ReturnStatement[52931-52949]:ReturnStatement[52931-52949]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[53023-53029]:Modifier[53023-53029]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53030-53036]:Modifier[53030-53036]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[53037-53041]:SimpleType[53037-53041]"
  }, {
    "left" : "newFunctionNode",
    "right" : "newFunctionNode",
    "info" : "SimpleName[53042-53057]:SimpleName[53042-53057]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[53058-53069]:SingleVariableDeclaration[53058-53069]"
  }, {
    "left" : "List<Node> params",
    "right" : "List<Node> params",
    "info" : "SingleVariableDeclaration[53071-53088]:SingleVariableDeclaration[53071-53088]"
  }, {
    "left" : "Node body",
    "right" : "Node body",
    "info" : "SingleVariableDeclaration[53096-53105]:SingleVariableDeclaration[53096-53105]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[53107-53117]:SingleVariableDeclaration[53107-53117]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[53119-53129]:SingleVariableDeclaration[53119-53129]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53131-53534]:Block[53131-53534]"
  }, {
    "left" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
    "right" : "Node parameterParen = new Node(Token.LP, lineno, charno);",
    "info" : "VariableDeclarationStatement[53137-53194]:VariableDeclarationStatement[53137-53194]"
  }, {
    "left" : "for (Node param : params)",
    "right" : "for (Node param : params)",
    "info" : "EnhancedForStatement[53199-53276]:EnhancedForStatement[53199-53276]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53225-53276]:Block[53225-53276]"
  }, {
    "left" : "parameterParen.addChildToBack(param);",
    "right" : "parameterParen.addChildToBack(param);",
    "info" : "ExpressionStatement[53233-53270]:ExpressionStatement[53233-53270]"
  }, {
    "left" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
    "right" : "Node function = new Node(Token.FUNCTION, lineno, charno);",
    "info" : "VariableDeclarationStatement[53281-53338]:VariableDeclarationStatement[53281-53338]"
  }, {
    "left" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
    "right" : "function.addChildrenToBack(\n        Node.newString(Token.NAME, name, lineno, charno));",
    "info" : "ExpressionStatement[53343-53429]:ExpressionStatement[53343-53429]"
  }, {
    "left" : "function.addChildToBack(parameterParen);",
    "right" : "function.addChildToBack(parameterParen);",
    "info" : "ExpressionStatement[53434-53474]:ExpressionStatement[53434-53474]"
  }, {
    "left" : "function.addChildToBack(body);",
    "right" : "function.addChildToBack(body);",
    "info" : "ExpressionStatement[53479-53509]:ExpressionStatement[53479-53509]"
  }, {
    "left" : "return function;",
    "right" : "return function;",
    "info" : "ReturnStatement[53514-53530]:ReturnStatement[53514-53530]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[53820-53826]:Modifier[53820-53826]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[53827-53833]:Modifier[53827-53833]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[53834-53838]:SimpleType[53834-53838]"
  }, {
    "left" : "newQualifiedNameNode",
    "right" : "newQualifiedNameNode",
    "info" : "SimpleName[53839-53859]:SimpleName[53839-53859]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[53867-53894]:SingleVariableDeclaration[53867-53894]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[53896-53907]:SingleVariableDeclaration[53896-53907]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[53909-53919]:SingleVariableDeclaration[53909-53919]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[53921-53931]:SingleVariableDeclaration[53921-53931]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53933-54693]:Block[53933-54693]"
  }, {
    "left" : "int endPos = name.indexOf('.');",
    "right" : "int endPos = name.indexOf('.');",
    "info" : "VariableDeclarationStatement[53939-53970]:VariableDeclarationStatement[53939-53970]"
  }, {
    "left" : "if (endPos == -1)",
    "right" : "if (endPos == -1)",
    "info" : "IfStatement[53975-54056]:IfStatement[53975-54056]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[53993-54056]:Block[53993-54056]"
  }, {
    "left" : "return newName(convention, name, lineno, charno);",
    "right" : "return newName(convention, name, lineno, charno);",
    "info" : "ReturnStatement[54001-54050]:ReturnStatement[54001-54050]"
  }, {
    "left" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
    "right" : "Node node = newName(\n        convention, name.substring(0, endPos), lineno, charno);",
    "info" : "VariableDeclarationStatement[54061-54145]:VariableDeclarationStatement[54061-54145]"
  }, {
    "left" : "int startPos;",
    "right" : "int startPos;",
    "info" : "VariableDeclarationStatement[54150-54163]:VariableDeclarationStatement[54150-54163]"
  }, {
    "left" : "do{...}",
    "right" : "do{...}",
    "info" : "DoStatement[54168-54671]:DoStatement[54168-54671]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54171-54649]:Block[54171-54649]"
  }, {
    "left" : "startPos = endPos + 1;",
    "right" : "startPos = endPos + 1;",
    "info" : "ExpressionStatement[54179-54201]:ExpressionStatement[54179-54201]"
  }, {
    "left" : "endPos = name.indexOf('.', startPos);",
    "right" : "endPos = name.indexOf('.', startPos);",
    "info" : "ExpressionStatement[54208-54245]:ExpressionStatement[54208-54245]"
  }, {
    "left" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
    "right" : "String part = (endPos == -1\n                     ? name.substring(startPos)\n                     : name.substring(startPos, endPos));",
    "info" : "VariableDeclarationStatement[54252-54385]:VariableDeclarationStatement[54252-54385]"
  }, {
    "left" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
    "right" : "Node propNode = Node.newString(Token.STRING, part, lineno, charno);",
    "info" : "VariableDeclarationStatement[54392-54459]:VariableDeclarationStatement[54392-54459]"
  }, {
    "left" : "if (convention.isConstantKey(part))",
    "right" : "if (convention.isConstantKey(part))",
    "info" : "IfStatement[54466-54573]:IfStatement[54466-54573]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[54502-54573]:Block[54502-54573]"
  }, {
    "left" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "propNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[54512-54565]:ExpressionStatement[54512-54565]"
  }, {
    "left" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
    "right" : "node = new Node(Token.GETPROP, node, propNode, lineno, charno);",
    "info" : "ExpressionStatement[54580-54643]:ExpressionStatement[54580-54643]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[54677-54689]:ReturnStatement[54677-54689]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55224-55230]:Modifier[55224-55230]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[55231-55235]:SimpleType[55231-55235]"
  }, {
    "left" : "newQualifiedNameNode",
    "right" : "newQualifiedNameNode",
    "info" : "SimpleName[55236-55256]:SimpleName[55236-55256]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[55264-55291]:SingleVariableDeclaration[55264-55291]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[55293-55304]:SingleVariableDeclaration[55293-55304]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[55306-55320]:SingleVariableDeclaration[55306-55320]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[55328-55347]:SingleVariableDeclaration[55328-55347]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55349-55491]:Block[55349-55491]"
  }, {
    "left" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
    "right" : "Node node = newQualifiedNameNode(convention, name, -1, -1);",
    "info" : "VariableDeclarationStatement[55355-55414]:VariableDeclarationStatement[55355-55414]"
  }, {
    "left" : "setDebugInformation(node, basisNode, originalName);",
    "right" : "setDebugInformation(node, basisNode, originalName);",
    "info" : "ExpressionStatement[55419-55470]:ExpressionStatement[55419-55470]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[55475-55487]:ReturnStatement[55475-55487]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[55581-55587]:Modifier[55581-55587]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[55588-55592]:SimpleType[55588-55592]"
  }, {
    "left" : "getRootOfQualifiedName",
    "right" : "getRootOfQualifiedName",
    "info" : "SimpleName[55593-55615]:SimpleName[55593-55615]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[55616-55626]:SingleVariableDeclaration[55616-55626]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55628-55899]:Block[55628-55899]"
  }, {
    "left" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
    "right" : "for (Node current = qName; true;\n         current = current.getFirstChild())",
    "info" : "ForStatement[55634-55895]:ForStatement[55634-55895]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55711-55895]:Block[55711-55895]"
  }, {
    "left" : "int type = current.getType();",
    "right" : "int type = current.getType();",
    "info" : "VariableDeclarationStatement[55719-55748]:VariableDeclarationStatement[55719-55748]"
  }, {
    "left" : "if (type == Token.NAME || type == Token.THIS)",
    "right" : "if (type == Token.NAME || type == Token.THIS)",
    "info" : "IfStatement[55755-55834]:IfStatement[55755-55834]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[55801-55834]:Block[55801-55834]"
  }, {
    "left" : "return current;",
    "right" : "return current;",
    "info" : "ReturnStatement[55811-55826]:ReturnStatement[55811-55826]"
  }, {
    "left" : "Preconditions.checkState(type == Token.GETPROP);",
    "right" : "Preconditions.checkState(type == Token.GETPROP);",
    "info" : "ExpressionStatement[55841-55889]:ExpressionStatement[55841-55889]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[56211-56217]:Modifier[56211-56217]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[56218-56222]:PrimitiveType[56218-56222]"
  }, {
    "left" : "setDebugInformation",
    "right" : "setDebugInformation",
    "info" : "SimpleName[56223-56242]:SimpleName[56223-56242]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[56243-56252]:SingleVariableDeclaration[56243-56252]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[56254-56268]:SingleVariableDeclaration[56254-56268]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[56304-56323]:SingleVariableDeclaration[56304-56323]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56325-56434]:Block[56325-56434]"
  }, {
    "left" : "node.copyInformationFromForTree(basisNode);",
    "right" : "node.copyInformationFromForTree(basisNode);",
    "info" : "ExpressionStatement[56331-56374]:ExpressionStatement[56331-56374]"
  }, {
    "left" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "right" : "node.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "info" : "ExpressionStatement[56379-56430]:ExpressionStatement[56379-56430]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[56438-56445]:Modifier[56438-56445]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[56446-56452]:Modifier[56446-56452]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[56453-56457]:SimpleType[56453-56457]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[56458-56465]:SimpleName[56458-56465]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[56473-56500]:SingleVariableDeclaration[56473-56500]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[56502-56513]:SingleVariableDeclaration[56502-56513]"
  }, {
    "left" : "int lineno",
    "right" : "int lineno",
    "info" : "SingleVariableDeclaration[56515-56525]:SingleVariableDeclaration[56515-56525]"
  }, {
    "left" : "int charno",
    "right" : "int charno",
    "info" : "SingleVariableDeclaration[56527-56537]:SingleVariableDeclaration[56527-56537]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56539-56740]:Block[56539-56740]"
  }, {
    "left" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
    "right" : "Node nameNode = Node.newString(Token.NAME, name, lineno, charno);",
    "info" : "VariableDeclarationStatement[56545-56610]:VariableDeclarationStatement[56545-56610]"
  }, {
    "left" : "if (convention.isConstant(name))",
    "right" : "if (convention.isConstant(name))",
    "info" : "IfStatement[56615-56715]:IfStatement[56615-56715]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[56648-56715]:Block[56648-56715]"
  }, {
    "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[56656-56709]:ExpressionStatement[56656-56709]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[56720-56736]:ReturnStatement[56720-56736]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[57070-57076]:Modifier[57070-57076]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[57077-57081]:SimpleType[57077-57081]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[57082-57089]:SimpleName[57082-57089]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[57097-57124]:SingleVariableDeclaration[57097-57124]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[57126-57137]:SingleVariableDeclaration[57126-57137]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[57139-57153]:SingleVariableDeclaration[57139-57153]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57155-57388]:Block[57155-57388]"
  }, {
    "left" : "Node nameNode = Node.newString(Token.NAME, name);",
    "right" : "Node nameNode = Node.newString(Token.NAME, name);",
    "info" : "VariableDeclarationStatement[57161-57210]:VariableDeclarationStatement[57161-57210]"
  }, {
    "left" : "if (convention.isConstantKey(name))",
    "right" : "if (convention.isConstantKey(name))",
    "info" : "IfStatement[57215-57318]:IfStatement[57215-57318]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[57251-57318]:Block[57251-57318]"
  }, {
    "left" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "right" : "nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);",
    "info" : "ExpressionStatement[57259-57312]:ExpressionStatement[57259-57312]"
  }, {
    "left" : "nameNode.copyInformationFrom(basisNode);",
    "right" : "nameNode.copyInformationFrom(basisNode);",
    "info" : "ExpressionStatement[57323-57363]:ExpressionStatement[57323-57363]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[57368-57384]:ReturnStatement[57368-57384]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[57905-57911]:Modifier[57905-57911]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[57912-57916]:SimpleType[57912-57916]"
  }, {
    "left" : "newName",
    "right" : "newName",
    "info" : "SimpleName[57917-57924]:SimpleName[57917-57924]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[57932-57959]:SingleVariableDeclaration[57932-57959]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[57961-57972]:SingleVariableDeclaration[57961-57972]"
  }, {
    "left" : "Node basisNode",
    "right" : "Node basisNode",
    "info" : "SingleVariableDeclaration[57980-57994]:SingleVariableDeclaration[57980-57994]"
  }, {
    "left" : "String originalName",
    "right" : "String originalName",
    "info" : "SingleVariableDeclaration[57996-58015]:SingleVariableDeclaration[57996-58015]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58017-58161]:Block[58017-58161]"
  }, {
    "left" : "Node nameNode = newName(convention, name, basisNode);",
    "right" : "Node nameNode = newName(convention, name, basisNode);",
    "info" : "VariableDeclarationStatement[58023-58076]:VariableDeclarationStatement[58023-58076]"
  }, {
    "left" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "right" : "nameNode.putProp(Node.ORIGINALNAME_PROP, originalName);",
    "info" : "ExpressionStatement[58081-58136]:ExpressionStatement[58081-58136]"
  }, {
    "left" : "return nameNode;",
    "right" : "return nameNode;",
    "info" : "ReturnStatement[58141-58157]:ReturnStatement[58141-58157]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[58761-58767]:Modifier[58761-58767]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[58768-58775]:PrimitiveType[58768-58775]"
  }, {
    "left" : "isLatin",
    "right" : "isLatin",
    "info" : "SimpleName[58776-58783]:SimpleName[58776-58783]"
  }, {
    "left" : "String s",
    "right" : "String s",
    "info" : "SingleVariableDeclaration[58784-58792]:SingleVariableDeclaration[58784-58792]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58794-59032]:Block[58794-59032]"
  }, {
    "left" : "char LARGEST_BASIC_LATIN = 0x7f;",
    "right" : "char LARGEST_BASIC_LATIN = 0x7f;",
    "info" : "VariableDeclarationStatement[58800-58832]:VariableDeclarationStatement[58800-58832]"
  }, {
    "left" : "int len = s.length();",
    "right" : "int len = s.length();",
    "info" : "VariableDeclarationStatement[58837-58858]:VariableDeclarationStatement[58837-58858]"
  }, {
    "left" : "for (int index = 0; index < len; index++)",
    "right" : "for (int index = 0; index < len; index++)",
    "info" : "ForStatement[58863-59011]:ForStatement[58863-59011]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58905-59011]:Block[58905-59011]"
  }, {
    "left" : "char c = s.charAt(index);",
    "right" : "char c = s.charAt(index);",
    "info" : "VariableDeclarationStatement[58913-58938]:VariableDeclarationStatement[58913-58938]"
  }, {
    "left" : "if (c > LARGEST_BASIC_LATIN)",
    "right" : "if (c > LARGEST_BASIC_LATIN)",
    "info" : "IfStatement[58945-59005]:IfStatement[58945-59005]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[58974-59005]:Block[58974-59005]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[58984-58997]:ReturnStatement[58984-58997]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[59016-59028]:ReturnStatement[59016-59028]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[59188-59194]:Modifier[59188-59194]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[59195-59202]:PrimitiveType[59195-59202]"
  }, {
    "left" : "isValidPropertyName",
    "right" : "isValidPropertyName",
    "info" : "SimpleName[59203-59222]:SimpleName[59203-59222]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[59223-59234]:SingleVariableDeclaration[59223-59234]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59236-59697]:Block[59236-59697]"
  }, {
    "left" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
    "right" : "return TokenStream.isJSIdentifier(name) &&\n        !TokenStream.isKeyword(name) &&\n        // no Unicode escaped characters - some browsers are less tolerant\n        // of Unicode characters that might be valid according to the\n        // language spec.\n        // Note that by this point, unicode escapes have been converted\n        // to UTF-16 characters, so we're only searching for character\n        // values, not escapes.\n        isLatin(name);",
    "info" : "ReturnStatement[59242-59693]:ReturnStatement[59242-59693]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[59701-59708]:Modifier[59701-59708]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[59709-59715]:Modifier[59709-59715]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[59716-59721]:TYPE_DECLARATION_KIND[59716-59721]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[59821-59827]:Modifier[59821-59827]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[59828-59832]:PrimitiveType[59828-59832]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[59833-59838]:SimpleName[59833-59838]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[59839-59845]:SingleVariableDeclaration[59839-59845]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59847-60134]:Block[59847-60134]"
  }, {
    "left" : "if (n.getType() == Token.NAME)",
    "right" : "if (n.getType() == Token.NAME)",
    "info" : "IfStatement[59855-60128]:IfStatement[59855-60128]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59886-60128]:Block[59886-60128]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[59896-59924]:VariableDeclarationStatement[59896-59924]"
  }, {
    "left" : "if (parent != null && parent.getType() == Token.VAR)",
    "right" : "if (parent != null && parent.getType() == Token.VAR)",
    "info" : "IfStatement[59933-60120]:IfStatement[59933-60120]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[59986-60120]:Block[59986-60120]"
  }, {
    "left" : "String name = n.getString();",
    "right" : "String name = n.getString();",
    "info" : "VariableDeclarationStatement[59998-60026]:VariableDeclarationStatement[59998-60026]"
  }, {
    "left" : "if (!vars.containsKey(name))",
    "right" : "if (!vars.containsKey(name))",
    "info" : "IfStatement[60037-60110]:IfStatement[60037-60110]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60066-60110]:Block[60066-60110]"
  }, {
    "left" : "vars.put(name, n);",
    "right" : "vars.put(name, n);",
    "info" : "ExpressionStatement[60080-60098]:ExpressionStatement[60080-60098]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[60235-60241]:Modifier[60235-60241]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[60242-60248]:Modifier[60242-60248]"
  }, {
    "left" : "Collection<Node>",
    "right" : "Collection<Node>",
    "info" : "ParameterizedType[60249-60265]:ParameterizedType[60249-60265]"
  }, {
    "left" : "getVarsDeclaredInBranch",
    "right" : "getVarsDeclaredInBranch",
    "info" : "SimpleName[60266-60289]:SimpleName[60266-60289]"
  }, {
    "left" : "Node root",
    "right" : "Node root",
    "info" : "SingleVariableDeclaration[60290-60299]:SingleVariableDeclaration[60290-60299]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60301-60476]:Block[60301-60476]"
  }, {
    "left" : "VarCollector collector = new VarCollector();",
    "right" : "VarCollector collector = new VarCollector();",
    "info" : "VariableDeclarationStatement[60307-60351]:VariableDeclarationStatement[60307-60351]"
  }, {
    "left" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
    "right" : "visitPreOrder(\n        root,\n        collector,\n        new MatchNotFunction());",
    "info" : "ExpressionStatement[60356-60436]:ExpressionStatement[60356-60436]"
  }, {
    "left" : "return collector.vars.values();",
    "right" : "return collector.vars.values();",
    "info" : "ReturnStatement[60441-60472]:ReturnStatement[60441-60472]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[60598-60604]:Modifier[60598-60604]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[60605-60612]:PrimitiveType[60605-60612]"
  }, {
    "left" : "isPrototypePropertyDeclaration",
    "right" : "isPrototypePropertyDeclaration",
    "info" : "SimpleName[60613-60643]:SimpleName[60613-60643]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[60644-60650]:SingleVariableDeclaration[60644-60650]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60652-60778]:Block[60652-60778]"
  }, {
    "left" : "if (!isExprAssign(n))",
    "right" : "if (!isExprAssign(n))",
    "info" : "IfStatement[60658-60707]:IfStatement[60658-60707]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60680-60707]:Block[60680-60707]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[60688-60701]:ReturnStatement[60688-60701]"
  }, {
    "left" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
    "right" : "return isPrototypeProperty(n.getFirstChild().getFirstChild());",
    "info" : "ReturnStatement[60712-60774]:ReturnStatement[60712-60774]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[60782-60788]:Modifier[60782-60788]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[60789-60796]:PrimitiveType[60789-60796]"
  }, {
    "left" : "isPrototypeProperty",
    "right" : "isPrototypeProperty",
    "info" : "SimpleName[60797-60816]:SimpleName[60797-60816]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[60817-60823]:SingleVariableDeclaration[60817-60823]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60825-61018]:Block[60825-61018]"
  }, {
    "left" : "String lhsString = n.getQualifiedName();",
    "right" : "String lhsString = n.getQualifiedName();",
    "info" : "VariableDeclarationStatement[60831-60871]:VariableDeclarationStatement[60831-60871]"
  }, {
    "left" : "if (lhsString == null)",
    "right" : "if (lhsString == null)",
    "info" : "IfStatement[60876-60926]:IfStatement[60876-60926]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[60899-60926]:Block[60899-60926]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[60907-60920]:ReturnStatement[60907-60920]"
  }, {
    "left" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
    "right" : "int prototypeIdx = lhsString.indexOf(\".prototype.\");",
    "info" : "VariableDeclarationStatement[60931-60983]:VariableDeclarationStatement[60931-60983]"
  }, {
    "left" : "return prototypeIdx != -1;",
    "right" : "return prototypeIdx != -1;",
    "info" : "ReturnStatement[60988-61014]:ReturnStatement[60988-61014]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[61098-61104]:Modifier[61098-61104]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[61105-61109]:SimpleType[61105-61109]"
  }, {
    "left" : "getPrototypeClassName",
    "right" : "getPrototypeClassName",
    "info" : "SimpleName[61110-61131]:SimpleName[61110-61131]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[61132-61142]:SingleVariableDeclaration[61132-61142]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61144-61381]:Block[61144-61381]"
  }, {
    "left" : "Node cur = qName;",
    "right" : "Node cur = qName;",
    "info" : "VariableDeclarationStatement[61150-61167]:VariableDeclarationStatement[61150-61167]"
  }, {
    "left" : "while (isGetProp(cur))",
    "right" : "while (isGetProp(cur))",
    "info" : "WhileStatement[61172-61360]:WhileStatement[61172-61360]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61195-61360]:Block[61195-61360]"
  }, {
    "left" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
    "right" : "if (cur.getLastChild().getString().equals(\"prototype\"))",
    "info" : "IfStatement[61203-61354]:IfStatement[61203-61354]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61259-61304]:Block[61259-61304]"
  }, {
    "left" : "return cur.getFirstChild();",
    "right" : "return cur.getFirstChild();",
    "info" : "ReturnStatement[61269-61296]:ReturnStatement[61269-61296]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61310-61354]:Block[61310-61354]"
  }, {
    "left" : "cur = cur.getFirstChild();",
    "right" : "cur = cur.getFirstChild();",
    "info" : "ExpressionStatement[61320-61346]:ExpressionStatement[61320-61346]"
  }, {
    "left" : "return null;",
    "right" : "return null;",
    "info" : "ReturnStatement[61365-61377]:ReturnStatement[61365-61377]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[61471-61477]:Modifier[61471-61477]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[61478-61484]:SimpleType[61478-61484]"
  }, {
    "left" : "getPrototypePropertyName",
    "right" : "getPrototypePropertyName",
    "info" : "SimpleName[61485-61509]:SimpleName[61485-61509]"
  }, {
    "left" : "Node qName",
    "right" : "Node qName",
    "info" : "SingleVariableDeclaration[61510-61520]:SingleVariableDeclaration[61510-61520]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61522-61743]:Block[61522-61743]"
  }, {
    "left" : "String qNameStr = qName.getQualifiedName();",
    "right" : "String qNameStr = qName.getQualifiedName();",
    "info" : "VariableDeclarationStatement[61528-61571]:VariableDeclarationStatement[61528-61571]"
  }, {
    "left" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
    "right" : "int prototypeIdx = qNameStr.lastIndexOf(\".prototype.\");",
    "info" : "VariableDeclarationStatement[61576-61631]:VariableDeclarationStatement[61576-61631]"
  }, {
    "left" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
    "right" : "int memberIndex = prototypeIdx + \".prototype\".length() + 1;",
    "info" : "VariableDeclarationStatement[61636-61695]:VariableDeclarationStatement[61636-61695]"
  }, {
    "left" : "return qNameStr.substring(memberIndex);",
    "right" : "return qNameStr.substring(memberIndex);",
    "info" : "ReturnStatement[61700-61739]:ReturnStatement[61700-61739]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[61826-61832]:Modifier[61826-61832]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[61833-61837]:SimpleType[61833-61837]"
  }, {
    "left" : "newUndefinedNode",
    "right" : "newUndefinedNode",
    "info" : "SimpleName[61838-61854]:SimpleName[61838-61854]"
  }, {
    "left" : "Node srcReferenceNode",
    "right" : "Node srcReferenceNode",
    "info" : "SingleVariableDeclaration[61855-61876]:SingleVariableDeclaration[61855-61876]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[61878-62130]:Block[61878-62130]"
  }, {
    "left" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
    "right" : "Node node = new Node(Token.VOID, Node.newNumber(0));",
    "info" : "VariableDeclarationStatement[61956-62008]:VariableDeclarationStatement[61956-62008]"
  }, {
    "left" : "if (srcReferenceNode != null)",
    "right" : "if (srcReferenceNode != null)",
    "info" : "IfStatement[62013-62109]:IfStatement[62013-62109]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62043-62109]:Block[62043-62109]"
  }, {
    "left" : "node.copyInformationFromForTree(srcReferenceNode);",
    "right" : "node.copyInformationFromForTree(srcReferenceNode);",
    "info" : "ExpressionStatement[62053-62103]:ExpressionStatement[62053-62103]"
  }, {
    "left" : "return node;",
    "right" : "return node;",
    "info" : "ReturnStatement[62114-62126]:ReturnStatement[62114-62126]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[62225-62231]:Modifier[62225-62231]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[62232-62236]:SimpleType[62232-62236]"
  }, {
    "left" : "newVarNode",
    "right" : "newVarNode",
    "info" : "SimpleName[62237-62247]:SimpleName[62237-62247]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[62248-62259]:SingleVariableDeclaration[62248-62259]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[62261-62271]:SingleVariableDeclaration[62261-62271]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62273-62603]:Block[62273-62603]"
  }, {
    "left" : "Node nodeName = Node.newString(Token.NAME, name);",
    "right" : "Node nodeName = Node.newString(Token.NAME, name);",
    "info" : "VariableDeclarationStatement[62279-62328]:VariableDeclarationStatement[62279-62328]"
  }, {
    "left" : "if (value != null)",
    "right" : "if (value != null)",
    "info" : "IfStatement[62333-62497]:IfStatement[62333-62497]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62352-62497]:Block[62352-62497]"
  }, {
    "left" : "Preconditions.checkState(value.getNext() == null);",
    "right" : "Preconditions.checkState(value.getNext() == null);",
    "info" : "ExpressionStatement[62360-62410]:ExpressionStatement[62360-62410]"
  }, {
    "left" : "nodeName.addChildToBack(value);",
    "right" : "nodeName.addChildToBack(value);",
    "info" : "ExpressionStatement[62417-62448]:ExpressionStatement[62417-62448]"
  }, {
    "left" : "nodeName.copyInformationFrom(value);",
    "right" : "nodeName.copyInformationFrom(value);",
    "info" : "ExpressionStatement[62455-62491]:ExpressionStatement[62455-62491]"
  }, {
    "left" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
    "right" : "Node var = new Node(Token.VAR, nodeName)\n        .copyInformationFrom(nodeName);",
    "info" : "VariableDeclarationStatement[62502-62582]:VariableDeclarationStatement[62502-62582]"
  }, {
    "left" : "return var;",
    "right" : "return var;",
    "info" : "ReturnStatement[62588-62599]:ReturnStatement[62588-62599]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[62685-62692]:Modifier[62685-62692]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[62693-62699]:Modifier[62693-62699]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[62700-62705]:TYPE_DECLARATION_KIND[62700-62705]"
  }, {
    "left" : "MatchNameNode",
    "right" : "MatchNameNode",
    "info" : "SimpleName[62776-62789]:SimpleName[62776-62789]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[62790-62801]:SingleVariableDeclaration[62790-62801]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62802-62833]:Block[62802-62833]"
  }, {
    "left" : "this.name = name;",
    "right" : "this.name = name;",
    "info" : "ExpressionStatement[62810-62827]:ExpressionStatement[62810-62827]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[62839-62845]:Modifier[62839-62845]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[62846-62853]:PrimitiveType[62846-62853]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[62854-62859]:SimpleName[62854-62859]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[62860-62866]:SingleVariableDeclaration[62860-62866]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[62868-62955]:Block[62868-62955]"
  }, {
    "left" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
    "right" : "return n.getType() == Token.NAME\n          && n.getString().equals(name);",
    "info" : "ReturnStatement[62876-62949]:ReturnStatement[62876-62949]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[63036-63042]:Modifier[63036-63042]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[63043-63048]:TYPE_DECLARATION_KIND[63043-63048]"
  }, {
    "left" : "MatchNodeType",
    "right" : "MatchNodeType",
    "info" : "SimpleName[63116-63129]:SimpleName[63116-63129]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[63130-63138]:SingleVariableDeclaration[63130-63138]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63139-63170]:Block[63139-63170]"
  }, {
    "left" : "this.type = type;",
    "right" : "this.type = type;",
    "info" : "ExpressionStatement[63147-63164]:ExpressionStatement[63147-63164]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63176-63182]:Modifier[63176-63182]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63183-63190]:PrimitiveType[63183-63190]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[63191-63196]:SimpleName[63191-63196]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[63197-63203]:SingleVariableDeclaration[63197-63203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63205-63246]:Block[63205-63246]"
  }, {
    "left" : "return n.getType() == type;",
    "right" : "return n.getType() == type;",
    "info" : "ReturnStatement[63213-63240]:ReturnStatement[63213-63240]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[63327-63333]:Modifier[63327-63333]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[63334-63339]:TYPE_DECLARATION_KIND[63334-63339]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63390-63396]:Modifier[63390-63396]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63397-63404]:PrimitiveType[63397-63404]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[63405-63410]:SimpleName[63405-63410]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[63411-63417]:SingleVariableDeclaration[63411-63417]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63419-63493]:Block[63419-63493]"
  }, {
    "left" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
    "right" : "return isFunctionDeclaration(n) || n.getType() == Token.VAR;",
    "info" : "ReturnStatement[63427-63487]:ReturnStatement[63427-63487]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[63575-63581]:Modifier[63575-63581]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[63582-63587]:TYPE_DECLARATION_KIND[63582-63587]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63637-63643]:Modifier[63637-63643]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63644-63651]:PrimitiveType[63644-63651]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[63652-63657]:SimpleName[63652-63657]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[63658-63664]:SingleVariableDeclaration[63658-63664]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63666-63702]:Block[63666-63702]"
  }, {
    "left" : "return !isFunction(n);",
    "right" : "return !isFunction(n);",
    "info" : "ReturnStatement[63674-63696]:ReturnStatement[63674-63696]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[63798-63804]:Modifier[63798-63804]"
  }, {
    "left" : "class",
    "right" : "class",
    "info" : "TYPE_DECLARATION_KIND[63805-63810]:TYPE_DECLARATION_KIND[63805-63810]"
  }, {
    "left" : "public",
    "right" : "public",
    "info" : "Modifier[63865-63871]:Modifier[63865-63871]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[63872-63879]:PrimitiveType[63872-63879]"
  }, {
    "left" : "apply",
    "right" : "apply",
    "info" : "SimpleName[63880-63885]:SimpleName[63880-63885]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[63886-63892]:SingleVariableDeclaration[63886-63892]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[63894-64113]:Block[63894-64113]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[63902-63930]:VariableDeclarationStatement[63902-63930]"
  }, {
    "left" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
    "right" : "return n.getType() == Token.BLOCK\n          || (!isFunction(n) && (parent == null\n              || isControlStructure(parent)\n              || isStatementBlock(parent)));",
    "info" : "ReturnStatement[63937-64107]:ReturnStatement[63937-64107]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64207-64213]:Modifier[64207-64213]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[64214-64217]:PrimitiveType[64214-64217]"
  }, {
    "left" : "getNodeTypeReferenceCount",
    "right" : "getNodeTypeReferenceCount",
    "info" : "SimpleName[64218-64243]:SimpleName[64218-64243]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[64251-64260]:SingleVariableDeclaration[64251-64260]"
  }, {
    "left" : "int type",
    "right" : "int type",
    "info" : "SingleVariableDeclaration[64262-64270]:SingleVariableDeclaration[64262-64270]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[64272-64308]:SingleVariableDeclaration[64272-64308]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64310-64389]:Block[64310-64389]"
  }, {
    "left" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
    "right" : "return getCount(node, new MatchNodeType(type), traverseChildrenPred);",
    "info" : "ReturnStatement[64316-64385]:ReturnStatement[64316-64385]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64468-64474]:Modifier[64468-64474]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[64475-64482]:PrimitiveType[64475-64482]"
  }, {
    "left" : "isNameReferenced",
    "right" : "isNameReferenced",
    "info" : "SimpleName[64483-64499]:SimpleName[64483-64499]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[64500-64509]:SingleVariableDeclaration[64500-64509]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[64545-64556]:SingleVariableDeclaration[64545-64556]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[64592-64628]:SingleVariableDeclaration[64592-64628]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64630-64704]:Block[64630-64704]"
  }, {
    "left" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
    "right" : "return has(node, new MatchNameNode(name), traverseChildrenPred);",
    "info" : "ReturnStatement[64636-64700]:ReturnStatement[64636-64700]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[64783-64789]:Modifier[64783-64789]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[64790-64797]:PrimitiveType[64790-64797]"
  }, {
    "left" : "isNameReferenced",
    "right" : "isNameReferenced",
    "info" : "SimpleName[64798-64814]:SimpleName[64798-64814]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[64815-64824]:SingleVariableDeclaration[64815-64824]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[64826-64837]:SingleVariableDeclaration[64826-64837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[64839-64916]:Block[64839-64916]"
  }, {
    "left" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
    "right" : "return isNameReferenced(node, name, Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[64845-64912]:ReturnStatement[64845-64912]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[65013-65019]:Modifier[65013-65019]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[65020-65023]:PrimitiveType[65020-65023]"
  }, {
    "left" : "getNameReferenceCount",
    "right" : "getNameReferenceCount",
    "info" : "SimpleName[65024-65045]:SimpleName[65024-65045]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[65046-65055]:SingleVariableDeclaration[65046-65055]"
  }, {
    "left" : "String name",
    "right" : "String name",
    "info" : "SingleVariableDeclaration[65057-65068]:SingleVariableDeclaration[65057-65068]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65070-65167]:Block[65070-65167]"
  }, {
    "left" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
    "right" : "return getCount(\n        node, new MatchNameNode(name), Predicates.<Node>alwaysTrue());",
    "info" : "ReturnStatement[65076-65163]:ReturnStatement[65076-65163]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[65263-65269]:Modifier[65263-65269]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[65270-65277]:PrimitiveType[65270-65277]"
  }, {
    "left" : "has",
    "right" : "has",
    "info" : "SimpleName[65278-65281]:SimpleName[65278-65281]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[65282-65291]:SingleVariableDeclaration[65282-65291]"
  }, {
    "left" : "Predicate<Node> pred",
    "right" : "Predicate<Node> pred",
    "info" : "SingleVariableDeclaration[65314-65334]:SingleVariableDeclaration[65314-65334]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[65357-65393]:SingleVariableDeclaration[65357-65393]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65395-65698]:Block[65395-65698]"
  }, {
    "left" : "if (pred.apply(node))",
    "right" : "if (pred.apply(node))",
    "info" : "IfStatement[65401-65449]:IfStatement[65401-65449]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65423-65449]:Block[65423-65449]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[65431-65443]:ReturnStatement[65431-65443]"
  }, {
    "left" : "if (!traverseChildrenPred.apply(node))",
    "right" : "if (!traverseChildrenPred.apply(node))",
    "info" : "IfStatement[65455-65521]:IfStatement[65455-65521]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65494-65521]:Block[65494-65521]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[65502-65515]:ReturnStatement[65502-65515]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[65527-65675]:ForStatement[65527-65675]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65591-65675]:Block[65591-65675]"
  }, {
    "left" : "if (has(c, pred, traverseChildrenPred))",
    "right" : "if (has(c, pred, traverseChildrenPred))",
    "info" : "IfStatement[65599-65669]:IfStatement[65599-65669]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65639-65669]:Block[65639-65669]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[65649-65661]:ReturnStatement[65649-65661]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[65681-65694]:ReturnStatement[65681-65694]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[65815-65821]:Modifier[65815-65821]"
  }, {
    "left" : "int",
    "right" : "int",
    "info" : "PrimitiveType[65822-65825]:PrimitiveType[65822-65825]"
  }, {
    "left" : "getCount",
    "right" : "getCount",
    "info" : "SimpleName[65826-65834]:SimpleName[65826-65834]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[65842-65848]:SingleVariableDeclaration[65842-65848]"
  }, {
    "left" : "Predicate<Node> pred",
    "right" : "Predicate<Node> pred",
    "info" : "SingleVariableDeclaration[65850-65870]:SingleVariableDeclaration[65850-65870]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[65872-65908]:SingleVariableDeclaration[65872-65908]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65910-66183]:Block[65910-66183]"
  }, {
    "left" : "int total = 0;",
    "right" : "int total = 0;",
    "info" : "VariableDeclarationStatement[65916-65930]:VariableDeclarationStatement[65916-65930]"
  }, {
    "left" : "if (pred.apply(n))",
    "right" : "if (pred.apply(n))",
    "info" : "IfStatement[65936-65977]:IfStatement[65936-65977]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[65955-65977]:Block[65955-65977]"
  }, {
    "left" : "total++;",
    "right" : "total++;",
    "info" : "ExpressionStatement[65963-65971]:ExpressionStatement[65963-65971]"
  }, {
    "left" : "if (traverseChildrenPred.apply(n))",
    "right" : "if (traverseChildrenPred.apply(n))",
    "info" : "IfStatement[65983-66160]:IfStatement[65983-66160]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66018-66160]:Block[66018-66160]"
  }, {
    "left" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = n.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[66026-66154]:ForStatement[66026-66154]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66087-66154]:Block[66087-66154]"
  }, {
    "left" : "total += getCount(c, pred, traverseChildrenPred);",
    "right" : "total += getCount(c, pred, traverseChildrenPred);",
    "info" : "ExpressionStatement[66097-66146]:ExpressionStatement[66097-66146]"
  }, {
    "left" : "return total;",
    "right" : "return total;",
    "info" : "ReturnStatement[66166-66179]:ReturnStatement[66166-66179]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[66262-66268]:Modifier[66262-66268]"
  }, {
    "left" : "interface",
    "right" : "interface",
    "info" : "TYPE_DECLARATION_KIND[66269-66278]:TYPE_DECLARATION_KIND[66269-66278]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[66293-66297]:PrimitiveType[66293-66297]"
  }, {
    "left" : "visit",
    "right" : "visit",
    "info" : "SimpleName[66298-66303]:SimpleName[66298-66303]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[66304-66313]:SingleVariableDeclaration[66304-66313]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[66428-66434]:Modifier[66428-66434]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[66435-66439]:PrimitiveType[66435-66439]"
  }, {
    "left" : "visitPreOrder",
    "right" : "visitPreOrder",
    "info" : "SimpleName[66440-66453]:SimpleName[66440-66453]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[66454-66463]:SingleVariableDeclaration[66454-66463]"
  }, {
    "left" : "Visitor vistor",
    "right" : "Visitor vistor",
    "info" : "SingleVariableDeclaration[66486-66500]:SingleVariableDeclaration[66486-66500]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[66523-66559]:SingleVariableDeclaration[66523-66559]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66561-66777]:Block[66561-66777]"
  }, {
    "left" : "vistor.visit(node);",
    "right" : "vistor.visit(node);",
    "info" : "ExpressionStatement[66567-66586]:ExpressionStatement[66567-66586]"
  }, {
    "left" : "if (traverseChildrenPred.apply(node))",
    "right" : "if (traverseChildrenPred.apply(node))",
    "info" : "IfStatement[66592-66773]:IfStatement[66592-66773]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66630-66773]:Block[66630-66773]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[66638-66767]:ForStatement[66638-66767]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[66702-66767]:Block[66702-66767]"
  }, {
    "left" : "visitPreOrder(c, vistor, traverseChildrenPred);",
    "right" : "visitPreOrder(c, vistor, traverseChildrenPred);",
    "info" : "ExpressionStatement[66712-66759]:ExpressionStatement[66712-66759]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[66887-66893]:Modifier[66887-66893]"
  }, {
    "left" : "void",
    "right" : "void",
    "info" : "PrimitiveType[66894-66898]:PrimitiveType[66894-66898]"
  }, {
    "left" : "visitPostOrder",
    "right" : "visitPostOrder",
    "info" : "SimpleName[66899-66913]:SimpleName[66899-66913]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[66914-66923]:SingleVariableDeclaration[66914-66923]"
  }, {
    "left" : "Visitor vistor",
    "right" : "Visitor vistor",
    "info" : "SingleVariableDeclaration[66946-66960]:SingleVariableDeclaration[66946-66960]"
  }, {
    "left" : "Predicate<Node> traverseChildrenPred",
    "right" : "Predicate<Node> traverseChildrenPred",
    "info" : "SingleVariableDeclaration[66983-67019]:SingleVariableDeclaration[66983-67019]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67021-67238]:Block[67021-67238]"
  }, {
    "left" : "if (traverseChildrenPred.apply(node))",
    "right" : "if (traverseChildrenPred.apply(node))",
    "info" : "IfStatement[67027-67209]:IfStatement[67027-67209]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67065-67209]:Block[67065-67209]"
  }, {
    "left" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "right" : "for (Node c = node.getFirstChild(); c != null; c = c.getNext())",
    "info" : "ForStatement[67073-67203]:ForStatement[67073-67203]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67137-67203]:Block[67137-67203]"
  }, {
    "left" : "visitPostOrder(c, vistor, traverseChildrenPred);",
    "right" : "visitPostOrder(c, vistor, traverseChildrenPred);",
    "info" : "ExpressionStatement[67147-67195]:ExpressionStatement[67147-67195]"
  }, {
    "left" : "vistor.visit(node);",
    "right" : "vistor.visit(node);",
    "info" : "ExpressionStatement[67215-67234]:ExpressionStatement[67215-67234]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67307-67313]:Modifier[67307-67313]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67314-67321]:PrimitiveType[67314-67321]"
  }, {
    "left" : "hasFinally",
    "right" : "hasFinally",
    "info" : "SimpleName[67322-67332]:SimpleName[67322-67332]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[67333-67339]:SingleVariableDeclaration[67333-67339]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67341-67440]:Block[67341-67440]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "info" : "ExpressionStatement[67347-67401]:ExpressionStatement[67347-67401]"
  }, {
    "left" : "return n.getChildCount() == 3;",
    "right" : "return n.getChildCount() == 3;",
    "info" : "ReturnStatement[67406-67436]:ReturnStatement[67406-67436]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67534-67540]:Modifier[67534-67540]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[67541-67545]:SimpleType[67541-67545]"
  }, {
    "left" : "getCatchBlock",
    "right" : "getCatchBlock",
    "info" : "SimpleName[67546-67559]:SimpleName[67546-67559]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[67560-67566]:SingleVariableDeclaration[67560-67566]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67568-67672]:Block[67568-67672]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.TRY);",
    "info" : "ExpressionStatement[67574-67628]:ExpressionStatement[67574-67628]"
  }, {
    "left" : "return n.getFirstChild().getNext();",
    "right" : "return n.getFirstChild().getNext();",
    "info" : "ReturnStatement[67633-67668]:ReturnStatement[67633-67668]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[67784-67790]:Modifier[67784-67790]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[67791-67798]:PrimitiveType[67791-67798]"
  }, {
    "left" : "hasCatchHandler",
    "right" : "hasCatchHandler",
    "info" : "SimpleName[67799-67814]:SimpleName[67799-67814]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[67815-67821]:SingleVariableDeclaration[67815-67821]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[67823-67963]:Block[67823-67963]"
  }, {
    "left" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
    "right" : "Preconditions.checkArgument(n.getType() == Token.BLOCK);",
    "info" : "ExpressionStatement[67829-67885]:ExpressionStatement[67829-67885]"
  }, {
    "left" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
    "right" : "return n.hasChildren() && n.getFirstChild().getType() == Token.CATCH;",
    "info" : "ReturnStatement[67890-67959]:ReturnStatement[67890-67959]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[68073-68079]:Modifier[68073-68079]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[68080-68084]:SimpleType[68080-68084]"
  }, {
    "left" : "getFnParameters",
    "right" : "getFnParameters",
    "info" : "SimpleName[68085-68100]:SimpleName[68085-68100]"
  }, {
    "left" : "Node fnNode",
    "right" : "Node fnNode",
    "info" : "SingleVariableDeclaration[68101-68112]:SingleVariableDeclaration[68101-68112]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[68114-68296]:Block[68114-68296]"
  }, {
    "left" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
    "right" : "Preconditions.checkArgument(fnNode.getType() == Token.FUNCTION);",
    "info" : "ExpressionStatement[68184-68248]:ExpressionStatement[68184-68248]"
  }, {
    "left" : "return fnNode.getFirstChild().getNext();",
    "right" : "return fnNode.getFirstChild().getNext();",
    "info" : "ReturnStatement[68252-68292]:ReturnStatement[68252-68292]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69002-69008]:Modifier[69002-69008]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[69009-69016]:PrimitiveType[69009-69016]"
  }, {
    "left" : "isConstantName",
    "right" : "isConstantName",
    "info" : "SimpleName[69017-69031]:SimpleName[69017-69031]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[69032-69041]:SingleVariableDeclaration[69032-69041]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69043-69103]:Block[69043-69103]"
  }, {
    "left" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
    "right" : "return node.getBooleanProp(Node.IS_CONSTANT_NAME);",
    "info" : "ReturnStatement[69049-69099]:ReturnStatement[69049-69099]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69173-69179]:Modifier[69173-69179]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[69180-69187]:PrimitiveType[69180-69187]"
  }, {
    "left" : "isConstantByConvention",
    "right" : "isConstantByConvention",
    "info" : "SimpleName[69188-69210]:SimpleName[69188-69210]"
  }, {
    "left" : "CodingConvention convention",
    "right" : "CodingConvention convention",
    "info" : "SingleVariableDeclaration[69218-69245]:SingleVariableDeclaration[69218-69245]"
  }, {
    "left" : "Node node",
    "right" : "Node node",
    "info" : "SingleVariableDeclaration[69247-69256]:SingleVariableDeclaration[69247-69256]"
  }, {
    "left" : "Node parent",
    "right" : "Node parent",
    "info" : "SingleVariableDeclaration[69258-69269]:SingleVariableDeclaration[69258-69269]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69271-69596]:Block[69271-69596]"
  }, {
    "left" : "String name = node.getString();",
    "right" : "String name = node.getString();",
    "info" : "VariableDeclarationStatement[69277-69308]:VariableDeclarationStatement[69277-69308]"
  }, {
    "left" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
    "right" : "if (parent.getType() == Token.GETPROP &&\n        node == parent.getLastChild())",
    "info" : "IfStatement[69313-69592]:IfStatement[69313-69592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69393-69445]:Block[69393-69445]"
  }, {
    "left" : "return convention.isConstantKey(name);",
    "right" : "return convention.isConstantKey(name);",
    "info" : "ReturnStatement[69401-69439]:ReturnStatement[69401-69439]"
  }, {
    "left" : "if (isObjectLitKey(node, parent))",
    "right" : "if (isObjectLitKey(node, parent))",
    "info" : "IfStatement[69451-69592]:IfStatement[69451-69592]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69485-69537]:Block[69485-69537]"
  }, {
    "left" : "return convention.isConstantKey(name);",
    "right" : "return convention.isConstantKey(name);",
    "info" : "ReturnStatement[69493-69531]:ReturnStatement[69493-69531]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69543-69592]:Block[69543-69592]"
  }, {
    "left" : "return convention.isConstant(name);",
    "right" : "return convention.isConstant(name);",
    "info" : "ReturnStatement[69551-69586]:ReturnStatement[69551-69586]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[69690-69696]:Modifier[69690-69696]"
  }, {
    "left" : "JSDocInfo",
    "right" : "JSDocInfo",
    "info" : "SimpleType[69697-69706]:SimpleType[69697-69706]"
  }, {
    "left" : "getInfoForNameNode",
    "right" : "getInfoForNameNode",
    "info" : "SimpleName[69707-69725]:SimpleName[69707-69725]"
  }, {
    "left" : "Node nameNode",
    "right" : "Node nameNode",
    "info" : "SingleVariableDeclaration[69726-69739]:SingleVariableDeclaration[69726-69739]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69741-70125]:Block[69741-70125]"
  }, {
    "left" : "JSDocInfo info = null;",
    "right" : "JSDocInfo info = null;",
    "info" : "VariableDeclarationStatement[69747-69769]:VariableDeclarationStatement[69747-69769]"
  }, {
    "left" : "Node parent = null;",
    "right" : "Node parent = null;",
    "info" : "VariableDeclarationStatement[69774-69793]:VariableDeclarationStatement[69774-69793]"
  }, {
    "left" : "if (nameNode != null)",
    "right" : "if (nameNode != null)",
    "info" : "IfStatement[69798-69902]:IfStatement[69798-69902]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[69820-69902]:Block[69820-69902]"
  }, {
    "left" : "info = nameNode.getJSDocInfo();",
    "right" : "info = nameNode.getJSDocInfo();",
    "info" : "ExpressionStatement[69828-69859]:ExpressionStatement[69828-69859]"
  }, {
    "left" : "parent = nameNode.getParent();",
    "right" : "parent = nameNode.getParent();",
    "info" : "ExpressionStatement[69866-69896]:ExpressionStatement[69866-69896]"
  }, {
    "left" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
    "right" : "if (info == null && parent != null &&\n        ((parent.getType() == Token.VAR && parent.hasOneChild()) ||\n          parent.getType() == Token.FUNCTION))",
    "info" : "IfStatement[69908-70104]:IfStatement[69908-70104]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70061-70104]:Block[70061-70104]"
  }, {
    "left" : "info = parent.getJSDocInfo();",
    "right" : "info = parent.getJSDocInfo();",
    "info" : "ExpressionStatement[70069-70098]:ExpressionStatement[70069-70098]"
  }, {
    "left" : "return info;",
    "right" : "return info;",
    "info" : "ReturnStatement[70109-70121]:ReturnStatement[70109-70121]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[70180-70186]:Modifier[70180-70186]"
  }, {
    "left" : "JSDocInfo",
    "right" : "JSDocInfo",
    "info" : "SimpleType[70187-70196]:SimpleType[70187-70196]"
  }, {
    "left" : "getFunctionInfo",
    "right" : "getFunctionInfo",
    "info" : "SimpleName[70197-70212]:SimpleName[70197-70212]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[70213-70219]:SingleVariableDeclaration[70213-70219]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70221-70757]:Block[70221-70757]"
  }, {
    "left" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
    "right" : "Preconditions.checkState(n.getType() == Token.FUNCTION);",
    "info" : "ExpressionStatement[70227-70283]:ExpressionStatement[70227-70283]"
  }, {
    "left" : "JSDocInfo fnInfo = n.getJSDocInfo();",
    "right" : "JSDocInfo fnInfo = n.getJSDocInfo();",
    "info" : "VariableDeclarationStatement[70288-70324]:VariableDeclarationStatement[70288-70324]"
  }, {
    "left" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
    "right" : "if (fnInfo == null && NodeUtil.isFunctionExpression(n))",
    "info" : "IfStatement[70329-70734]:IfStatement[70329-70734]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70385-70734]:Block[70385-70734]"
  }, {
    "left" : "Node parent = n.getParent();",
    "right" : "Node parent = n.getParent();",
    "info" : "VariableDeclarationStatement[70436-70464]:VariableDeclarationStatement[70436-70464]"
  }, {
    "left" : "if (parent.getType() == Token.ASSIGN)",
    "right" : "if (parent.getType() == Token.ASSIGN)",
    "info" : "IfStatement[70471-70728]:IfStatement[70471-70728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70509-70580]:Block[70509-70580]"
  }, {
    "left" : "fnInfo = parent.getJSDocInfo();",
    "right" : "fnInfo = parent.getJSDocInfo();",
    "info" : "ExpressionStatement[70541-70572]:ExpressionStatement[70541-70572]"
  }, {
    "left" : "if (parent.getType() == Token.NAME)",
    "right" : "if (parent.getType() == Token.NAME)",
    "info" : "IfStatement[70586-70728]:IfStatement[70586-70728]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70622-70728]:Block[70622-70728]"
  }, {
    "left" : "fnInfo = parent.getParent().getJSDocInfo();",
    "right" : "fnInfo = parent.getParent().getJSDocInfo();",
    "info" : "ExpressionStatement[70677-70720]:ExpressionStatement[70677-70720]"
  }, {
    "left" : "return fnInfo;",
    "right" : "return fnInfo;",
    "info" : "ReturnStatement[70739-70753]:ReturnStatement[70739-70753]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[70865-70871]:Modifier[70865-70871]"
  }, {
    "left" : "String",
    "right" : "String",
    "info" : "SimpleType[70872-70878]:SimpleType[70872-70878]"
  }, {
    "left" : "getSourceName",
    "right" : "getSourceName",
    "info" : "SimpleName[70879-70892]:SimpleName[70879-70892]"
  }, {
    "left" : "Node n",
    "right" : "Node n",
    "info" : "SingleVariableDeclaration[70893-70899]:SingleVariableDeclaration[70893-70899]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70901-71097]:Block[70901-71097]"
  }, {
    "left" : "String sourceName = null;",
    "right" : "String sourceName = null;",
    "info" : "VariableDeclarationStatement[70907-70932]:VariableDeclarationStatement[70907-70932]"
  }, {
    "left" : "while (sourceName == null && n != null)",
    "right" : "while (sourceName == null && n != null)",
    "info" : "WhileStatement[70937-71070]:WhileStatement[70937-71070]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[70977-71070]:Block[70977-71070]"
  }, {
    "left" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
    "right" : "sourceName = (String) n.getProp(Node.SOURCENAME_PROP);",
    "info" : "ExpressionStatement[70985-71039]:ExpressionStatement[70985-71039]"
  }, {
    "left" : "n = n.getParent();",
    "right" : "n = n.getParent();",
    "info" : "ExpressionStatement[71046-71064]:ExpressionStatement[71046-71064]"
  }, {
    "left" : "return sourceName;",
    "right" : "return sourceName;",
    "info" : "ReturnStatement[71075-71093]:ReturnStatement[71075-71093]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[71181-71187]:Modifier[71181-71187]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[71188-71192]:SimpleType[71188-71192]"
  }, {
    "left" : "newCallNode",
    "right" : "newCallNode",
    "info" : "SimpleName[71193-71204]:SimpleName[71193-71204]"
  }, {
    "left" : "Node callTarget",
    "right" : "Node callTarget",
    "info" : "SingleVariableDeclaration[71205-71220]:SingleVariableDeclaration[71205-71220]"
  }, {
    "left" : "Node... parameters",
    "right" : "Node... parameters",
    "info" : "SingleVariableDeclaration[71222-71240]:SingleVariableDeclaration[71222-71240]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71242-71496]:Block[71242-71496]"
  }, {
    "left" : "boolean isFreeCall = isName(callTarget);",
    "right" : "boolean isFreeCall = isName(callTarget);",
    "info" : "VariableDeclarationStatement[71248-71288]:VariableDeclarationStatement[71248-71288]"
  }, {
    "left" : "Node call = new Node(Token.CALL, callTarget);",
    "right" : "Node call = new Node(Token.CALL, callTarget);",
    "info" : "VariableDeclarationStatement[71293-71338]:VariableDeclarationStatement[71293-71338]"
  }, {
    "left" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
    "right" : "call.putBooleanProp(Node.FREE_CALL, isFreeCall);",
    "info" : "ExpressionStatement[71343-71391]:ExpressionStatement[71343-71391]"
  }, {
    "left" : "for (Node parameter : parameters)",
    "right" : "for (Node parameter : parameters)",
    "info" : "EnhancedForStatement[71396-71475]:EnhancedForStatement[71396-71475]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71430-71475]:Block[71430-71475]"
  }, {
    "left" : "call.addChildToBack(parameter);",
    "right" : "call.addChildToBack(parameter);",
    "info" : "ExpressionStatement[71438-71469]:ExpressionStatement[71438-71469]"
  }, {
    "left" : "return call;",
    "right" : "return call;",
    "info" : "ReturnStatement[71480-71492]:ReturnStatement[71480-71492]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[71604-71610]:Modifier[71604-71610]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[71611-71618]:PrimitiveType[71611-71618]"
  }, {
    "left" : "evaluatesToLocalValue",
    "right" : "evaluatesToLocalValue",
    "info" : "SimpleName[71619-71640]:SimpleName[71619-71640]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[71641-71651]:SingleVariableDeclaration[71641-71651]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[71653-71731]:Block[71653-71731]"
  }, {
    "left" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
    "right" : "return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());",
    "info" : "ReturnStatement[71659-71727]:ReturnStatement[71659-71727]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[71928-71934]:Modifier[71928-71934]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[71935-71942]:PrimitiveType[71935-71942]"
  }, {
    "left" : "evaluatesToLocalValue",
    "right" : "evaluatesToLocalValue",
    "info" : "SimpleName[71943-71964]:SimpleName[71943-71964]"
  }, {
    "left" : "Node value",
    "right" : "Node value",
    "info" : "SingleVariableDeclaration[71965-71975]:SingleVariableDeclaration[71965-71975]"
  }, {
    "left" : "Predicate<Node> locals",
    "right" : "Predicate<Node> locals",
    "info" : "SingleVariableDeclaration[71977-71999]:SingleVariableDeclaration[71977-71999]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72001-74543]:Block[72001-74544]"
  }, {
    "left" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        return true;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
    "right" : "switch (value.getType()) {\n      case Token.ASSIGN:\n        // A result that is aliased by a non-local name, is the effectively the\n        // same as returning a non-local name, but this doesn't matter if the\n        // value is immutable.\n        return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));\n      case Token.COMMA:\n        return evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.AND:\n      case Token.OR:\n        return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.HOOK:\n        return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);\n      case Token.INC:\n      case Token.DEC:\n        if (value.getBooleanProp(Node.INCRDECR_PROP)) {\n          return evaluatesToLocalValue(value.getFirstChild(), locals);\n        } else {\n          return true;\n        }\n      case Token.THIS:\n        return locals.apply(value);\n      case Token.NAME:\n        return isImmutableValue(value) || locals.apply(value);\n      case Token.GETELEM:\n      case Token.GETPROP:\n        // There is no information about the locality of object properties.\n        return locals.apply(value);\n      case Token.CALL:\n        return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);\n      case Token.NEW:\n        // TODO(nicksantos): This needs to be changed so that it\n        // returns true iff we're sure the value was never aliased from inside\n        // the constructor (similar to callHasLocalResult)\n        return false;\n      case Token.FUNCTION:\n      case Token.REGEXP:\n      case Token.ARRAYLIT:\n      case Token.OBJECTLIT:\n        // Literals objects with non-literal children are allowed.\n        return true;\n      case Token.IN:\n        // TODO(johnlenz): should IN operator be included in #isSimpleOperator?\n        return true;\n      default:\n        // Other op force a local value:\n        //  x = '' + g (x is now an local string)\n        //  x -= g (x is now an local number)\n        if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value)) {\n          return true;\n        }\n\n        throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());\n    }",
    "info" : "SwitchStatement[72007-74539]:SwitchStatement[72007-74540]"
  }, {
    "left" : "case Token.ASSIGN:",
    "right" : "case Token.ASSIGN:",
    "info" : "SwitchCase[72040-72058]:SwitchCase[72040-72058]"
  }, {
    "left" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
    "right" : "return NodeUtil.isImmutableValue(value.getLastChild())\n            || (locals.apply(value)\n                && evaluatesToLocalValue(value.getLastChild(), locals));",
    "info" : "ReturnStatement[72256-72419]:ReturnStatement[72256-72419]"
  }, {
    "left" : "case Token.COMMA:",
    "right" : "case Token.COMMA:",
    "info" : "SwitchCase[72426-72443]:SwitchCase[72426-72443]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[72452-72511]:ReturnStatement[72452-72511]"
  }, {
    "left" : "case Token.AND:",
    "right" : "case Token.AND:",
    "info" : "SwitchCase[72518-72533]:SwitchCase[72518-72533]"
  }, {
    "left" : "case Token.OR:",
    "right" : "case Token.OR:",
    "info" : "SwitchCase[72540-72554]:SwitchCase[72540-72554]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[72563-72689]:ReturnStatement[72563-72689]"
  }, {
    "left" : "case Token.HOOK:",
    "right" : "case Token.HOOK:",
    "info" : "SwitchCase[72696-72712]:SwitchCase[72696-72712]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)\n           && evaluatesToLocalValue(value.getLastChild(), locals);",
    "info" : "ReturnStatement[72721-72857]:ReturnStatement[72721-72857]"
  }, {
    "left" : "case Token.INC:",
    "right" : "case Token.INC:",
    "info" : "SwitchCase[72864-72879]:SwitchCase[72864-72879]"
  }, {
    "left" : "case Token.DEC:",
    "right" : "case Token.DEC:",
    "info" : "SwitchCase[72886-72901]:SwitchCase[72886-72901]"
  }, {
    "left" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
    "right" : "if (value.getBooleanProp(Node.INCRDECR_PROP))",
    "info" : "IfStatement[72910-73078]:IfStatement[72910-73078]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[72956-73038]:Block[72956-73038]"
  }, {
    "left" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
    "right" : "return evaluatesToLocalValue(value.getFirstChild(), locals);",
    "info" : "ReturnStatement[72968-73028]:ReturnStatement[72968-73028]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[73044-73078]:Block[73044-73078]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[73056-73068]:ReturnStatement[73056-73068]"
  }, {
    "left" : "case Token.THIS:",
    "right" : "case Token.THIS:",
    "info" : "SwitchCase[73085-73101]:SwitchCase[73085-73101]"
  }, {
    "left" : "return locals.apply(value);",
    "right" : "return locals.apply(value);",
    "info" : "ReturnStatement[73110-73137]:ReturnStatement[73110-73137]"
  }, {
    "left" : "case Token.NAME:",
    "right" : "case Token.NAME:",
    "info" : "SwitchCase[73144-73160]:SwitchCase[73144-73160]"
  }, {
    "left" : "return isImmutableValue(value) || locals.apply(value);",
    "right" : "return isImmutableValue(value) || locals.apply(value);",
    "info" : "ReturnStatement[73169-73223]:ReturnStatement[73169-73223]"
  }, {
    "left" : "case Token.GETELEM:",
    "right" : "case Token.GETELEM:",
    "info" : "SwitchCase[73230-73249]:SwitchCase[73230-73249]"
  }, {
    "left" : "case Token.GETPROP:",
    "right" : "case Token.GETPROP:",
    "info" : "SwitchCase[73256-73275]:SwitchCase[73256-73275]"
  }, {
    "left" : "return locals.apply(value);",
    "right" : "return locals.apply(value);",
    "info" : "ReturnStatement[73360-73387]:ReturnStatement[73360-73387]"
  }, {
    "left" : "case Token.CALL:",
    "right" : "case Token.CALL:",
    "info" : "SwitchCase[73394-73410]:SwitchCase[73394-73410]"
  }, {
    "left" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
    "right" : "return callHasLocalResult(value)\n            || isToStringMethodCall(value)\n            || locals.apply(value);",
    "info" : "ReturnStatement[73419-73530]:ReturnStatement[73419-73530]"
  }, {
    "left" : "case Token.NEW:",
    "right" : "case Token.NEW:",
    "info" : "SwitchCase[73537-73552]:SwitchCase[73537-73552]"
  }, {
    "left" : "return true;",
    "right" : "return false;",
    "info" : "ReturnStatement[73764-73776]:ReturnStatement[73764-73777]"
  }, {
    "left" : "true",
    "right" : "false",
    "info" : "BooleanLiteral[73771-73775]:BooleanLiteral[73771-73776]"
  }, {
    "left" : "case Token.FUNCTION:",
    "right" : "case Token.FUNCTION:",
    "info" : "SwitchCase[73783-73803]:SwitchCase[73784-73804]"
  }, {
    "left" : "case Token.REGEXP:",
    "right" : "case Token.REGEXP:",
    "info" : "SwitchCase[73810-73828]:SwitchCase[73811-73829]"
  }, {
    "left" : "case Token.ARRAYLIT:",
    "right" : "case Token.ARRAYLIT:",
    "info" : "SwitchCase[73835-73855]:SwitchCase[73836-73856]"
  }, {
    "left" : "case Token.OBJECTLIT:",
    "right" : "case Token.OBJECTLIT:",
    "info" : "SwitchCase[73862-73883]:SwitchCase[73863-73884]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[73959-73971]:ReturnStatement[73960-73972]"
  }, {
    "left" : "case Token.IN:",
    "right" : "case Token.IN:",
    "info" : "SwitchCase[73978-73992]:SwitchCase[73979-73993]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[74081-74093]:ReturnStatement[74082-74094]"
  }, {
    "left" : "default:",
    "right" : "default:",
    "info" : "SwitchCase[74100-74108]:SwitchCase[74101-74109]"
  }, {
    "left" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
    "right" : "if (isAssignmentOp(value)\n            || isSimpleOperator(value)\n            || isImmutableValue(value))",
    "info" : "IfStatement[74254-74393]:IfStatement[74255-74394]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74359-74393]:Block[74360-74394]"
  }, {
    "left" : "return true;",
    "right" : "return true;",
    "info" : "ReturnStatement[74371-74383]:ReturnStatement[74372-74384]"
  }, {
    "left" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
    "right" : "throw new IllegalStateException(\n            \"Unexpected expression node\" + value +\n            \"\\n parent:\" + value.getParent());",
    "info" : "ThrowStatement[74403-74533]:ThrowStatement[74404-74534]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[74737-74744]:Modifier[74738-74745]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[74745-74751]:Modifier[74746-74752]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[74752-74756]:SimpleType[74753-74757]"
  }, {
    "left" : "getNthSibling",
    "right" : "getNthSibling",
    "info" : "SimpleName[74757-74770]:SimpleName[74758-74771]"
  }, {
    "left" : "Node first",
    "right" : "Node first",
    "info" : "SingleVariableDeclaration[74771-74781]:SingleVariableDeclaration[74772-74782]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[74783-74792]:SingleVariableDeclaration[74784-74793]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74794-74945]:Block[74795-74946]"
  }, {
    "left" : "Node sibling = first;",
    "right" : "Node sibling = first;",
    "info" : "VariableDeclarationStatement[74800-74821]:VariableDeclarationStatement[74801-74822]"
  }, {
    "left" : "while (index != 0 && sibling != null)",
    "right" : "while (index != 0 && sibling != null)",
    "info" : "WhileStatement[74826-74921]:WhileStatement[74827-74922]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[74864-74921]:Block[74865-74922]"
  }, {
    "left" : "sibling = sibling.getNext();",
    "right" : "sibling = sibling.getNext();",
    "info" : "ExpressionStatement[74872-74900]:ExpressionStatement[74873-74901]"
  }, {
    "left" : "index--;",
    "right" : "index--;",
    "info" : "ExpressionStatement[74907-74915]:ExpressionStatement[74908-74916]"
  }, {
    "left" : "return sibling;",
    "right" : "return sibling;",
    "info" : "ReturnStatement[74926-74941]:ReturnStatement[74927-74942]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75058-75064]:Modifier[75059-75065]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[75065-75069]:SimpleType[75066-75070]"
  }, {
    "left" : "getArgumentForFunction",
    "right" : "getArgumentForFunction",
    "info" : "SimpleName[75070-75092]:SimpleName[75071-75093]"
  }, {
    "left" : "Node function",
    "right" : "Node function",
    "info" : "SingleVariableDeclaration[75093-75106]:SingleVariableDeclaration[75094-75107]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[75108-75117]:SingleVariableDeclaration[75109-75118]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75119-75270]:Block[75120-75271]"
  }, {
    "left" : "Preconditions.checkState(isFunction(function));",
    "right" : "Preconditions.checkState(isFunction(function));",
    "info" : "ExpressionStatement[75125-75172]:ExpressionStatement[75126-75173]"
  }, {
    "left" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
    "right" : "return getNthSibling(\n        function.getFirstChild().getNext().getFirstChild(), index);",
    "info" : "ReturnStatement[75177-75266]:ReturnStatement[75178-75267]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75397-75403]:Modifier[75398-75404]"
  }, {
    "left" : "Node",
    "right" : "Node",
    "info" : "SimpleType[75404-75408]:SimpleType[75405-75409]"
  }, {
    "left" : "getArgumentForCallOrNew",
    "right" : "getArgumentForCallOrNew",
    "info" : "SimpleName[75409-75432]:SimpleName[75410-75433]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[75433-75442]:SingleVariableDeclaration[75434-75443]"
  }, {
    "left" : "int index",
    "right" : "int index",
    "info" : "SingleVariableDeclaration[75444-75453]:SingleVariableDeclaration[75445-75454]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75455-75581]:Block[75456-75582]"
  }, {
    "left" : "Preconditions.checkState(isCallOrNew(call));",
    "right" : "Preconditions.checkState(isCallOrNew(call));",
    "info" : "ExpressionStatement[75461-75505]:ExpressionStatement[75462-75506]"
  }, {
    "left" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
    "right" : "return getNthSibling(\n      call.getFirstChild().getNext(), index);",
    "info" : "ReturnStatement[75510-75577]:ReturnStatement[75511-75578]"
  }, {
    "left" : "private",
    "right" : "private",
    "info" : "Modifier[75585-75592]:Modifier[75586-75593]"
  }, {
    "left" : "static",
    "right" : "static",
    "info" : "Modifier[75593-75599]:Modifier[75594-75600]"
  }, {
    "left" : "boolean",
    "right" : "boolean",
    "info" : "PrimitiveType[75600-75607]:PrimitiveType[75601-75608]"
  }, {
    "left" : "isToStringMethodCall",
    "right" : "isToStringMethodCall",
    "info" : "SimpleName[75608-75628]:SimpleName[75609-75629]"
  }, {
    "left" : "Node call",
    "right" : "Node call",
    "info" : "SingleVariableDeclaration[75629-75638]:SingleVariableDeclaration[75630-75639]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75640-75858]:Block[75641-75859]"
  }, {
    "left" : "Node getNode = call.getFirstChild();",
    "right" : "Node getNode = call.getFirstChild();",
    "info" : "VariableDeclarationStatement[75646-75682]:VariableDeclarationStatement[75647-75683]"
  }, {
    "left" : "if (isGet(getNode))",
    "right" : "if (isGet(getNode))",
    "info" : "IfStatement[75687-75836]:IfStatement[75688-75837]"
  }, {
    "left" : "{}",
    "right" : "{}",
    "info" : "Block[75707-75836]:Block[75708-75837]"
  }, {
    "left" : "Node propNode = getNode.getLastChild();",
    "right" : "Node propNode = getNode.getLastChild();",
    "info" : "VariableDeclarationStatement[75715-75754]:VariableDeclarationStatement[75716-75755]"
  }, {
    "left" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
    "right" : "return isString(propNode) && \"toString\".equals(propNode.getString());",
    "info" : "ReturnStatement[75761-75830]:ReturnStatement[75762-75831]"
  }, {
    "left" : "return false;",
    "right" : "return false;",
    "info" : "ReturnStatement[75841-75854]:ReturnStatement[75842-75855]"
  } ]
}