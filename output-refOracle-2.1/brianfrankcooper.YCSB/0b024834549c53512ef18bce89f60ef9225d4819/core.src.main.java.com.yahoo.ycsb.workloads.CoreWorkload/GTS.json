{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CoreWorkload",
      "right" : "CoreWorkload",
      "info" : "TypeDeclaration[1609-25592]:TypeDeclaration[1609-25621]"
    }, {
      "left" : "public static final String TABLENAME_PROPERTY=\"table\";",
      "right" : "public static final String TABLENAME_PROPERTY=\"table\";",
      "info" : "FieldDeclaration[3420-3543]:FieldDeclaration[3420-3543]"
    }, {
      "left" : "public static final String TABLENAME_PROPERTY_DEFAULT=\"usertable\";",
      "right" : "public static final String TABLENAME_PROPERTY_DEFAULT=\"usertable\";",
      "info" : "FieldDeclaration[3546-3689]:FieldDeclaration[3546-3689]"
    }, {
      "left" : "public static String table;",
      "right" : "public static String table;",
      "info" : "FieldDeclaration[3692-3719]:FieldDeclaration[3692-3719]"
    }, {
      "left" : "public static final String FIELD_COUNT_PROPERTY=\"fieldcount\";",
      "right" : "public static final String FIELD_COUNT_PROPERTY=\"fieldcount\";",
      "info" : "FieldDeclaration[3723-3861]:FieldDeclaration[3723-3861]"
    }, {
      "left" : "public static final String FIELD_COUNT_PROPERTY_DEFAULT=\"10\";",
      "right" : "public static final String FIELD_COUNT_PROPERTY_DEFAULT=\"10\";",
      "info" : "FieldDeclaration[3865-3978]:FieldDeclaration[3865-3978]"
    }, {
      "left" : "int fieldcount;",
      "right" : "int fieldcount;",
      "info" : "FieldDeclaration[3981-3996]:FieldDeclaration[3981-3996]"
    }, {
      "left" : "private List<String> fieldnames;",
      "right" : "private List<String> fieldnames;",
      "info" : "FieldDeclaration[3999-4031]:FieldDeclaration[3999-4031]"
    }, {
      "left" : "public static final String FIELD_LENGTH_DISTRIBUTION_PROPERTY=\"fieldlengthdistribution\";",
      "right" : "public static final String FIELD_LENGTH_DISTRIBUTION_PROPERTY=\"fieldlengthdistribution\";",
      "info" : "FieldDeclaration[4034-4530]:FieldDeclaration[4034-4530]"
    }, {
      "left" : "public static final String FIELD_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT = \"constant\";",
      "right" : "public static final String FIELD_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT = \"constant\";",
      "info" : "FieldDeclaration[4532-4668]:FieldDeclaration[4532-4668]"
    }, {
      "left" : "public static final String FIELD_LENGTH_PROPERTY=\"fieldlength\";",
      "right" : "public static final String FIELD_LENGTH_PROPERTY=\"fieldlength\";",
      "info" : "FieldDeclaration[4671-4809]:FieldDeclaration[4671-4809]"
    }, {
      "left" : "public static final String FIELD_LENGTH_PROPERTY_DEFAULT=\"100\";",
      "right" : "public static final String FIELD_LENGTH_PROPERTY_DEFAULT=\"100\";",
      "info" : "FieldDeclaration[4811-4936]:FieldDeclaration[4811-4936]"
    }, {
      "left" : "public static final String FIELD_LENGTH_HISTOGRAM_FILE_PROPERTY = \"fieldlengthhistogram\";",
      "right" : "public static final String FIELD_LENGTH_HISTOGRAM_FILE_PROPERTY = \"fieldlengthhistogram\";",
      "info" : "FieldDeclaration[4939-5186]:FieldDeclaration[4939-5186]"
    }, {
      "left" : "public static final String FIELD_LENGTH_HISTOGRAM_FILE_PROPERTY_DEFAULT = \"hist.txt\";",
      "right" : "public static final String FIELD_LENGTH_HISTOGRAM_FILE_PROPERTY_DEFAULT = \"hist.txt\";",
      "info" : "FieldDeclaration[5188-5345]:FieldDeclaration[5188-5345]"
    }, {
      "left" : "IntegerGenerator fieldlengthgenerator;",
      "right" : "IntegerGenerator fieldlengthgenerator;",
      "info" : "FieldDeclaration[5348-5524]:FieldDeclaration[5348-5524]"
    }, {
      "left" : "public static final String READ_ALL_FIELDS_PROPERTY=\"readallfields\";",
      "right" : "public static final String READ_ALL_FIELDS_PROPERTY=\"readallfields\";",
      "info" : "FieldDeclaration[5528-5716]:FieldDeclaration[5528-5716]"
    }, {
      "left" : "public static final String READ_ALL_FIELDS_PROPERTY_DEFAULT=\"true\";",
      "right" : "public static final String READ_ALL_FIELDS_PROPERTY_DEFAULT=\"true\";",
      "info" : "FieldDeclaration[5720-5851]:FieldDeclaration[5720-5851]"
    }, {
      "left" : "boolean readallfields;",
      "right" : "boolean readallfields;",
      "info" : "FieldDeclaration[5854-5876]:FieldDeclaration[5854-5876]"
    }, {
      "left" : "public static final String WRITE_ALL_FIELDS_PROPERTY=\"writeallfields\";",
      "right" : "public static final String WRITE_ALL_FIELDS_PROPERTY=\"writeallfields\";",
      "info" : "FieldDeclaration[5879-6070]:FieldDeclaration[5879-6070]"
    }, {
      "left" : "public static final String WRITE_ALL_FIELDS_PROPERTY_DEFAULT=\"false\";",
      "right" : "public static final String WRITE_ALL_FIELDS_PROPERTY_DEFAULT=\"false\";",
      "info" : "FieldDeclaration[6074-6208]:FieldDeclaration[6074-6208]"
    }, {
      "left" : "boolean writeallfields;",
      "right" : "boolean writeallfields;",
      "info" : "FieldDeclaration[6211-6234]:FieldDeclaration[6211-6234]"
    }, {
      "left" : "public static final String DATA_INTEGRITY_PROPERTY = \"dataintegrity\";",
      "right" : "public static final String DATA_INTEGRITY_PROPERTY = \"dataintegrity\";",
      "info" : "FieldDeclaration[6239-6460]:FieldDeclaration[6239-6460]"
    }, {
      "left" : "public static final String DATA_INTEGRITY_PROPERTY_DEFAULT = \"false\";",
      "right" : "public static final String DATA_INTEGRITY_PROPERTY_DEFAULT = \"false\";",
      "info" : "FieldDeclaration[6466-6602]:FieldDeclaration[6466-6602]"
    }, {
      "left" : "private boolean dataintegrity;",
      "right" : "private boolean dataintegrity;",
      "info" : "FieldDeclaration[6606-6768]:FieldDeclaration[6606-6768]"
    }, {
      "left" : "private final int DATA_INT_MATCH = 0;",
      "right" : "private final int DATA_INT_MATCH = 0;",
      "info" : "FieldDeclaration[6772-6978]:FieldDeclaration[6772-6978]"
    }, {
      "left" : "private final int DATA_INT_DEVIATE = 1000;",
      "right" : "private final int DATA_INT_DEVIATE = 1000;",
      "info" : "FieldDeclaration[6981-7023]:FieldDeclaration[6981-7023]"
    }, {
      "left" : "private final int DATA_INT_UNEXPECTED_NULL = 2000;",
      "right" : "private final int DATA_INT_UNEXPECTED_NULL = 2000;",
      "info" : "FieldDeclaration[7026-7076]:FieldDeclaration[7026-7076]"
    }, {
      "left" : "public static final String READ_PROPORTION_PROPERTY=\"readproportion\";",
      "right" : "public static final String READ_PROPORTION_PROPERTY=\"readproportion\";",
      "info" : "FieldDeclaration[7080-7239]:FieldDeclaration[7080-7239]"
    }, {
      "left" : "public static final String READ_PROPORTION_PROPERTY_DEFAULT=\"0.95\";",
      "right" : "public static final String READ_PROPORTION_PROPERTY_DEFAULT=\"0.95\";",
      "info" : "FieldDeclaration[7243-7380]:FieldDeclaration[7243-7380]"
    }, {
      "left" : "public static final String UPDATE_PROPORTION_PROPERTY=\"updateproportion\";",
      "right" : "public static final String UPDATE_PROPORTION_PROPERTY=\"updateproportion\";",
      "info" : "FieldDeclaration[7383-7548]:FieldDeclaration[7383-7548]"
    }, {
      "left" : "public static final String UPDATE_PROPORTION_PROPERTY_DEFAULT=\"0.05\";",
      "right" : "public static final String UPDATE_PROPORTION_PROPERTY_DEFAULT=\"0.05\";",
      "info" : "FieldDeclaration[7552-7692]:FieldDeclaration[7552-7692]"
    }, {
      "left" : "public static final String INSERT_PROPORTION_PROPERTY=\"insertproportion\";",
      "right" : "public static final String INSERT_PROPORTION_PROPERTY=\"insertproportion\";",
      "info" : "FieldDeclaration[7695-7860]:FieldDeclaration[7695-7860]"
    }, {
      "left" : "public static final String INSERT_PROPORTION_PROPERTY_DEFAULT=\"0.0\";",
      "right" : "public static final String INSERT_PROPORTION_PROPERTY_DEFAULT=\"0.0\";",
      "info" : "FieldDeclaration[7864-8003]:FieldDeclaration[7864-8003]"
    }, {
      "left" : "public static final String SCAN_PROPORTION_PROPERTY=\"scanproportion\";",
      "right" : "public static final String SCAN_PROPORTION_PROPERTY=\"scanproportion\";",
      "info" : "FieldDeclaration[8006-8165]:FieldDeclaration[8006-8165]"
    }, {
      "left" : "public static final String SCAN_PROPORTION_PROPERTY_DEFAULT=\"0.0\";",
      "right" : "public static final String SCAN_PROPORTION_PROPERTY_DEFAULT=\"0.0\";",
      "info" : "FieldDeclaration[8169-8304]:FieldDeclaration[8169-8304]"
    }, {
      "left" : "public static final String READMODIFYWRITE_PROPORTION_PROPERTY=\"readmodifywriteproportion\";",
      "right" : "public static final String READMODIFYWRITE_PROPORTION_PROPERTY=\"readmodifywriteproportion\";",
      "info" : "FieldDeclaration[8308-8501]:FieldDeclaration[8308-8501]"
    }, {
      "left" : "public static final String READMODIFYWRITE_PROPORTION_PROPERTY_DEFAULT=\"0.0\";",
      "right" : "public static final String READMODIFYWRITE_PROPORTION_PROPERTY_DEFAULT=\"0.0\";",
      "info" : "FieldDeclaration[8505-8651]:FieldDeclaration[8505-8651]"
    }, {
      "left" : "public static final String REQUEST_DISTRIBUTION_PROPERTY=\"requestdistribution\";",
      "right" : "public static final String REQUEST_DISTRIBUTION_PROPERTY=\"requestdistribution\";",
      "info" : "FieldDeclaration[8655-8877]:FieldDeclaration[8655-8877]"
    }, {
      "left" : "public static final String REQUEST_DISTRIBUTION_PROPERTY_DEFAULT=\"uniform\";",
      "right" : "public static final String REQUEST_DISTRIBUTION_PROPERTY_DEFAULT=\"uniform\";",
      "info" : "FieldDeclaration[8881-9027]:FieldDeclaration[8881-9027]"
    }, {
      "left" : "public static final String MAX_SCAN_LENGTH_PROPERTY=\"maxscanlength\";",
      "right" : "public static final String MAX_SCAN_LENGTH_PROPERTY=\"maxscanlength\";",
      "info" : "FieldDeclaration[9030-9181]:FieldDeclaration[9030-9181]"
    }, {
      "left" : "public static final String MAX_SCAN_LENGTH_PROPERTY_DEFAULT=\"1000\";",
      "right" : "public static final String MAX_SCAN_LENGTH_PROPERTY_DEFAULT=\"1000\";",
      "info" : "FieldDeclaration[9185-9295]:FieldDeclaration[9185-9295]"
    }, {
      "left" : "public static final String SCAN_LENGTH_DISTRIBUTION_PROPERTY=\"scanlengthdistribution\";",
      "right" : "public static final String SCAN_LENGTH_DISTRIBUTION_PROPERTY=\"scanlengthdistribution\";",
      "info" : "FieldDeclaration[9299-9517]:FieldDeclaration[9299-9517]"
    }, {
      "left" : "public static final String SCAN_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT=\"uniform\";",
      "right" : "public static final String SCAN_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT=\"uniform\";",
      "info" : "FieldDeclaration[9521-9643]:FieldDeclaration[9521-9643]"
    }, {
      "left" : "public static final String INSERT_ORDER_PROPERTY=\"insertorder\";",
      "right" : "public static final String INSERT_ORDER_PROPERTY=\"insertorder\";",
      "info" : "FieldDeclaration[9647-9816]:FieldDeclaration[9647-9816]"
    }, {
      "left" : "public static final String INSERT_ORDER_PROPERTY_DEFAULT=\"hashed\";",
      "right" : "public static final String INSERT_ORDER_PROPERTY_DEFAULT=\"hashed\";",
      "info" : "FieldDeclaration[9820-9922]:FieldDeclaration[9820-9922]"
    }, {
      "left" : "public static final String HOTSPOT_DATA_FRACTION = \"hotspotdatafraction\";",
      "right" : "public static final String HOTSPOT_DATA_FRACTION = \"hotspotdatafraction\";",
      "info" : "FieldDeclaration[9926-10067]:FieldDeclaration[9926-10067]"
    }, {
      "left" : "public static final String HOTSPOT_DATA_FRACTION_DEFAULT = \"0.2\";",
      "right" : "public static final String HOTSPOT_DATA_FRACTION_DEFAULT = \"0.2\";",
      "info" : "FieldDeclaration[10073-10197]:FieldDeclaration[10073-10197]"
    }, {
      "left" : "public static final String HOTSPOT_OPN_FRACTION = \"hotspotopnfraction\";",
      "right" : "public static final String HOTSPOT_OPN_FRACTION = \"hotspotopnfraction\";",
      "info" : "FieldDeclaration[10203-10338]:FieldDeclaration[10203-10338]"
    }, {
      "left" : "public static final String HOTSPOT_OPN_FRACTION_DEFAULT = \"0.8\";",
      "right" : "public static final String HOTSPOT_OPN_FRACTION_DEFAULT = \"0.8\";",
      "info" : "FieldDeclaration[10344-10491]:FieldDeclaration[10344-10491]"
    }, {
      "left" : "IntegerGenerator keysequence;",
      "right" : "IntegerGenerator keysequence;",
      "info" : "FieldDeclaration[10495-10524]:FieldDeclaration[10495-10524]"
    }, {
      "left" : "DiscreteGenerator operationchooser;",
      "right" : "DiscreteGenerator operationchooser;",
      "info" : "FieldDeclaration[10527-10562]:FieldDeclaration[10527-10562]"
    }, {
      "left" : "IntegerGenerator keychooser;",
      "right" : "IntegerGenerator keychooser;",
      "info" : "FieldDeclaration[10565-10593]:FieldDeclaration[10565-10593]"
    }, {
      "left" : "Generator fieldchooser;",
      "right" : "Generator fieldchooser;",
      "info" : "FieldDeclaration[10596-10619]:FieldDeclaration[10596-10619]"
    }, {
      "left" : "CounterGenerator transactioninsertkeysequence;",
      "right" : "CounterGenerator transactioninsertkeysequence;",
      "info" : "FieldDeclaration[10622-10668]:FieldDeclaration[10622-10668]"
    }, {
      "left" : "IntegerGenerator scanlength;",
      "right" : "IntegerGenerator scanlength;",
      "info" : "FieldDeclaration[10672-10700]:FieldDeclaration[10672-10700]"
    }, {
      "left" : "boolean orderedinserts;",
      "right" : "boolean orderedinserts;",
      "info" : "FieldDeclaration[10704-10727]:FieldDeclaration[10704-10727]"
    }, {
      "left" : "int recordcount;",
      "right" : "int recordcount;",
      "info" : "FieldDeclaration[10730-10746]:FieldDeclaration[10730-10746]"
    }, {
      "left" : "protected static IntegerGenerator getFieldLengthGenerator(Properties p) throws WorkloadExceptio",
      "right" : "protected static IntegerGenerator getFieldLengthGenerator(Properties p) throws WorkloadExceptio",
      "info" : "MethodDeclaration[10750-12082]:MethodDeclaration[10750-12082]"
    }, {
      "left" : "public void init(Properties p) throws WorkloadException",
      "right" : "public void init(Properties p) throws WorkloadException",
      "info" : "MethodDeclaration[12086-18223]:MethodDeclaration[12086-18252]"
    }, {
      "left" : "public String buildKeyName(long keynum)",
      "right" : "public String buildKeyName(long keynum)",
      "info" : "MethodDeclaration[18226-18359]:MethodDeclaration[18255-18388]"
    }, {
      "left" : "private HashMap<String, ByteIterator> buildSingleValue(String key)",
      "right" : "private HashMap<String, ByteIterator> buildSingleValue(String key)",
      "info" : "MethodDeclaration[18364-18954]:MethodDeclaration[18393-18983]"
    }, {
      "left" : "private HashMap<String, ByteIterator> buildValues(String key)",
      "right" : "private HashMap<String, ByteIterator> buildValues(String key)",
      "info" : "MethodDeclaration[18958-19515]:MethodDeclaration[18987-19544]"
    }, {
      "left" : "private String buildDeterministicValue(String key, String fieldkey)",
      "right" : "private String buildDeterministicValue(String key, String fieldkey)",
      "info" : "MethodDeclaration[19519-19979]:MethodDeclaration[19548-20008]"
    }, {
      "left" : "public boolean doInsert(DB db, Object threadstate)",
      "right" : "public boolean doInsert(DB db, Object threadstate)",
      "info" : "MethodDeclaration[19982-20625]:MethodDeclaration[20011-20654]"
    }, {
      "left" : "public boolean doTransaction(DB db, Object threadstate)",
      "right" : "public boolean doTransaction(DB db, Object threadstate)",
      "info" : "MethodDeclaration[20628-21460]:MethodDeclaration[20657-21489]"
    }, {
      "left" : "protected void verifyRow(String key, HashMap<String,ByteIterator> cells)",
      "right" : "protected void verifyRow(String key, HashMap<String,ByteIterator> cells)",
      "info" : "MethodDeclaration[21464-22329]:MethodDeclaration[21493-22358]"
    }, {
      "left" : "int nextKeynum()",
      "right" : "int nextKeynum()",
      "info" : "MethodDeclaration[22335-22827]:MethodDeclaration[22364-22856]"
    }, {
      "left" : "public void doTransactionRead(DB db)",
      "right" : "public void doTransactionRead(DB db)",
      "info" : "MethodDeclaration[22830-23392]:MethodDeclaration[22859-23421]"
    }, {
      "left" : "public void doTransactionReadModifyWrite(DB db)",
      "right" : "public void doTransactionReadModifyWrite(DB db)",
      "info" : "MethodDeclaration[23396-24398]:MethodDeclaration[23425-24427]"
    }, {
      "left" : "public void doTransactionScan(DB db)",
      "right" : "public void doTransactionScan(DB db)",
      "info" : "MethodDeclaration[24402-24928]:MethodDeclaration[24431-24957]"
    }, {
      "left" : "public void doTransactionUpdate(DB db)",
      "right" : "public void doTransactionUpdate(DB db)",
      "info" : "MethodDeclaration[24931-25331]:MethodDeclaration[24960-25360]"
    }, {
      "left" : "public void doTransactionInsert(DB db)",
      "right" : "public void doTransactionInsert(DB db)",
      "info" : "MethodDeclaration[25334-25590]:MethodDeclaration[25363-25619]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10846-12082]:Block[10846-12082]"
    }, {
      "left" : "IntegerGenerator fieldlengthgenerator;",
      "right" : "IntegerGenerator fieldlengthgenerator;",
      "info" : "VariableDeclarationStatement[10850-10888]:VariableDeclarationStatement[10850-10888]"
    }, {
      "left" : "String fieldlengthdistribution = p.getProperty(FIELD_LENGTH_DISTRIBUTION_PROPERTY, FIELD_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT);",
      "right" : "String fieldlengthdistribution = p.getProperty(FIELD_LENGTH_DISTRIBUTION_PROPERTY, FIELD_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT);",
      "info" : "VariableDeclarationStatement[10891-11018]:VariableDeclarationStatement[10891-11018]"
    }, {
      "left" : "int fieldlength=Integer.parseInt(p.getProperty(FIELD_LENGTH_PROPERTY,FIELD_LENGTH_PROPERTY_DEFAULT));",
      "right" : "int fieldlength=Integer.parseInt(p.getProperty(FIELD_LENGTH_PROPERTY,FIELD_LENGTH_PROPERTY_DEFAULT));",
      "info" : "VariableDeclarationStatement[11021-11122]:VariableDeclarationStatement[11021-11122]"
    }, {
      "left" : "String fieldlengthhistogram = p.getProperty(FIELD_LENGTH_HISTOGRAM_FILE_PROPERTY, FIELD_LENGTH_HISTOGRAM_FILE_PROPERTY_DEFAULT);",
      "right" : "String fieldlengthhistogram = p.getProperty(FIELD_LENGTH_HISTOGRAM_FILE_PROPERTY, FIELD_LENGTH_HISTOGRAM_FILE_PROPERTY_DEFAULT);",
      "info" : "VariableDeclarationStatement[11125-11253]:VariableDeclarationStatement[11125-11253]"
    }, {
      "left" : "if(fieldlengthdistribution.compareTo(\"constant\") == 0)",
      "right" : "if(fieldlengthdistribution.compareTo(\"constant\") == 0)",
      "info" : "IfStatement[11256-12048]:IfStatement[11256-12048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11311-11385]:Block[11311-11385]"
    }, {
      "left" : "fieldlengthgenerator = new ConstantIntegerGenerator(fieldlength);",
      "right" : "fieldlengthgenerator = new ConstantIntegerGenerator(fieldlength);",
      "info" : "ExpressionStatement[11316-11381]:ExpressionStatement[11316-11381]"
    }, {
      "left" : "if(fieldlengthdistribution.compareTo(\"uniform\") == 0)",
      "right" : "if(fieldlengthdistribution.compareTo(\"uniform\") == 0)",
      "info" : "IfStatement[11391-12048]:IfStatement[11391-12048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11445-11521]:Block[11445-11521]"
    }, {
      "left" : "fieldlengthgenerator = new UniformIntegerGenerator(1, fieldlength);",
      "right" : "fieldlengthgenerator = new UniformIntegerGenerator(1, fieldlength);",
      "info" : "ExpressionStatement[11450-11517]:ExpressionStatement[11450-11517]"
    }, {
      "left" : "if(fieldlengthdistribution.compareTo(\"zipfian\") == 0)",
      "right" : "if(fieldlengthdistribution.compareTo(\"zipfian\") == 0)",
      "info" : "IfStatement[11527-12048]:IfStatement[11527-12048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11581-11650]:Block[11581-11650]"
    }, {
      "left" : "fieldlengthgenerator = new ZipfianGenerator(1, fieldlength);",
      "right" : "fieldlengthgenerator = new ZipfianGenerator(1, fieldlength);",
      "info" : "ExpressionStatement[11586-11646]:ExpressionStatement[11586-11646]"
    }, {
      "left" : "if(fieldlengthdistribution.compareTo(\"histogram\") == 0)",
      "right" : "if(fieldlengthdistribution.compareTo(\"histogram\") == 0)",
      "info" : "IfStatement[11656-12048]:IfStatement[11656-12048]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11712-11936]:Block[11712-11936]"
    }, {
      "left" : "try{...}",
      "right" : "try{...}",
      "info" : "TryStatement[11717-11932]:TryStatement[11717-11932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11721-11800]:Block[11721-11800]"
    }, {
      "left" : "fieldlengthgenerator = new HistogramGenerator(fieldlengthhistogram);",
      "right" : "fieldlengthgenerator = new HistogramGenerator(fieldlengthhistogram);",
      "info" : "ExpressionStatement[11727-11795]:ExpressionStatement[11727-11795]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11822-11932]:Block[11822-11932]"
    }, {
      "left" : "throw new WorkloadException(\"Couldn't read field length histogram file: \"+fieldlengthhistogram, e);",
      "right" : "throw new WorkloadException(\"Couldn't read field length histogram file: \"+fieldlengthhistogram, e);",
      "info" : "ThrowStatement[11828-11927]:ThrowStatement[11828-11927]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11942-12048]:Block[11942-12048]"
    }, {
      "left" : "throw new WorkloadException(\"Unknown field length distribution \\\"\"+fieldlengthdistribution+\"\\\"\");",
      "right" : "throw new WorkloadException(\"Unknown field length distribution \\\"\"+fieldlengthdistribution+\"\\\"\");",
      "info" : "ThrowStatement[11947-12044]:ThrowStatement[11947-12044]"
    }, {
      "left" : "return fieldlengthgenerator;",
      "right" : "return fieldlengthgenerator;",
      "info" : "ReturnStatement[12051-12079]:ReturnStatement[12051-12079]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12262-18223]:Block[12262-18252]"
    }, {
      "left" : "table = p.getProperty(TABLENAME_PROPERTY,TABLENAME_PROPERTY_DEFAULT);",
      "right" : "table = p.getProperty(TABLENAME_PROPERTY,TABLENAME_PROPERTY_DEFAULT);",
      "info" : "ExpressionStatement[12266-12335]:ExpressionStatement[12266-12335]"
    }, {
      "left" : "fieldcount=Integer.parseInt(p.getProperty(FIELD_COUNT_PROPERTY,FIELD_COUNT_PROPERTY_DEFAULT));",
      "right" : "fieldcount=Integer.parseInt(p.getProperty(FIELD_COUNT_PROPERTY,FIELD_COUNT_PROPERTY_DEFAULT));",
      "info" : "ExpressionStatement[12341-12435]:ExpressionStatement[12341-12435]"
    }, {
      "left" : "fieldnames = new ArrayList<String>();",
      "right" : "fieldnames = new ArrayList<String>();",
      "info" : "ExpressionStatement[12440-12477]:ExpressionStatement[12440-12477]"
    }, {
      "left" : "for (int i = 0; i < fieldcount; i++)",
      "right" : "for (int i = 0; i < fieldcount; i++)",
      "info" : "ForStatement[12482-12563]:ForStatement[12482-12563]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12519-12563]:Block[12519-12563]"
    }, {
      "left" : "fieldnames.add(\"field\" + i);",
      "right" : "fieldnames.add(\"field\" + i);",
      "info" : "ExpressionStatement[12529-12557]:ExpressionStatement[12529-12557]"
    }, {
      "left" : "fieldlengthgenerator = CoreWorkload.getFieldLengthGenerator(p);",
      "right" : "fieldlengthgenerator = CoreWorkload.getFieldLengthGenerator(p);",
      "info" : "ExpressionStatement[12566-12629]:ExpressionStatement[12566-12629]"
    }, {
      "left" : "double readproportion=Double.parseDouble(p.getProperty(READ_PROPORTION_PROPERTY,READ_PROPORTION_PROPERTY_DEFAULT));",
      "right" : "double readproportion=Double.parseDouble(p.getProperty(READ_PROPORTION_PROPERTY,READ_PROPORTION_PROPERTY_DEFAULT));",
      "info" : "VariableDeclarationStatement[12635-12750]:VariableDeclarationStatement[12635-12750]"
    }, {
      "left" : "double updateproportion=Double.parseDouble(p.getProperty(UPDATE_PROPORTION_PROPERTY,UPDATE_PROPORTION_PROPERTY_DEFAULT));",
      "right" : "double updateproportion=Double.parseDouble(p.getProperty(UPDATE_PROPORTION_PROPERTY,UPDATE_PROPORTION_PROPERTY_DEFAULT));",
      "info" : "VariableDeclarationStatement[12753-12874]:VariableDeclarationStatement[12753-12874]"
    }, {
      "left" : "double insertproportion=Double.parseDouble(p.getProperty(INSERT_PROPORTION_PROPERTY,INSERT_PROPORTION_PROPERTY_DEFAULT));",
      "right" : "double insertproportion=Double.parseDouble(p.getProperty(INSERT_PROPORTION_PROPERTY,INSERT_PROPORTION_PROPERTY_DEFAULT));",
      "info" : "VariableDeclarationStatement[12877-12998]:VariableDeclarationStatement[12877-12998]"
    }, {
      "left" : "double scanproportion=Double.parseDouble(p.getProperty(SCAN_PROPORTION_PROPERTY,SCAN_PROPORTION_PROPERTY_DEFAULT));",
      "right" : "double scanproportion=Double.parseDouble(p.getProperty(SCAN_PROPORTION_PROPERTY,SCAN_PROPORTION_PROPERTY_DEFAULT));",
      "info" : "VariableDeclarationStatement[13001-13116]:VariableDeclarationStatement[13001-13116]"
    }, {
      "left" : "double readmodifywriteproportion=Double.parseDouble(p.getProperty(READMODIFYWRITE_PROPORTION_PROPERTY,READMODIFYWRITE_PROPORTION_PROPERTY_DEFAULT));",
      "right" : "double readmodifywriteproportion=Double.parseDouble(p.getProperty(READMODIFYWRITE_PROPORTION_PROPERTY,READMODIFYWRITE_PROPORTION_PROPERTY_DEFAULT));",
      "info" : "VariableDeclarationStatement[13119-13267]:VariableDeclarationStatement[13119-13267]"
    }, {
      "left" : "recordcount=Integer.parseInt(p.getProperty(Client.RECORD_COUNT_PROPERTY));",
      "right" : "recordcount=Integer.parseInt(p.getProperty(Client.RECORD_COUNT_PROPERTY, Client.DEFAULT_RECORD_COUNT));",
      "info" : "ExpressionStatement[13270-13344]:ExpressionStatement[13270-13373]"
    }, {
      "left" : "String requestdistrib=p.getProperty(REQUEST_DISTRIBUTION_PROPERTY,REQUEST_DISTRIBUTION_PROPERTY_DEFAULT);",
      "right" : "String requestdistrib=p.getProperty(REQUEST_DISTRIBUTION_PROPERTY,REQUEST_DISTRIBUTION_PROPERTY_DEFAULT);",
      "info" : "VariableDeclarationStatement[13347-13452]:VariableDeclarationStatement[13376-13481]"
    }, {
      "left" : "int maxscanlength=Integer.parseInt(p.getProperty(MAX_SCAN_LENGTH_PROPERTY,MAX_SCAN_LENGTH_PROPERTY_DEFAULT));",
      "right" : "int maxscanlength=Integer.parseInt(p.getProperty(MAX_SCAN_LENGTH_PROPERTY,MAX_SCAN_LENGTH_PROPERTY_DEFAULT));",
      "info" : "VariableDeclarationStatement[13455-13564]:VariableDeclarationStatement[13484-13593]"
    }, {
      "left" : "String scanlengthdistrib=p.getProperty(SCAN_LENGTH_DISTRIBUTION_PROPERTY,SCAN_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT);",
      "right" : "String scanlengthdistrib=p.getProperty(SCAN_LENGTH_DISTRIBUTION_PROPERTY,SCAN_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT);",
      "info" : "VariableDeclarationStatement[13567-13683]:VariableDeclarationStatement[13596-13712]"
    }, {
      "left" : "int insertstart=Integer.parseInt(p.getProperty(INSERT_START_PROPERTY,INSERT_START_PROPERTY_DEFAULT));",
      "right" : "int insertstart=Integer.parseInt(p.getProperty(INSERT_START_PROPERTY,INSERT_START_PROPERTY_DEFAULT));",
      "info" : "VariableDeclarationStatement[13689-13790]:VariableDeclarationStatement[13718-13819]"
    }, {
      "left" : "readallfields=Boolean.parseBoolean(p.getProperty(READ_ALL_FIELDS_PROPERTY,READ_ALL_FIELDS_PROPERTY_DEFAULT));",
      "right" : "readallfields=Boolean.parseBoolean(p.getProperty(READ_ALL_FIELDS_PROPERTY,READ_ALL_FIELDS_PROPERTY_DEFAULT));",
      "info" : "ExpressionStatement[13796-13905]:ExpressionStatement[13825-13934]"
    }, {
      "left" : "writeallfields=Boolean.parseBoolean(p.getProperty(WRITE_ALL_FIELDS_PROPERTY,WRITE_ALL_FIELDS_PROPERTY_DEFAULT));",
      "right" : "writeallfields=Boolean.parseBoolean(p.getProperty(WRITE_ALL_FIELDS_PROPERTY,WRITE_ALL_FIELDS_PROPERTY_DEFAULT));",
      "info" : "ExpressionStatement[13908-14020]:ExpressionStatement[13937-14049]"
    }, {
      "left" : "dataintegrity = Boolean.parseBoolean(p.getProperty(DATA_INTEGRITY_PROPERTY, DATA_INTEGRITY_PROPERTY_DEFAULT));",
      "right" : "dataintegrity = Boolean.parseBoolean(p.getProperty(DATA_INTEGRITY_PROPERTY, DATA_INTEGRITY_PROPERTY_DEFAULT));",
      "info" : "ExpressionStatement[14028-14138]:ExpressionStatement[14057-14167]"
    }, {
      "left" : "if (dataintegrity && !(p.getProperty(FIELD_LENGTH_DISTRIBUTION_PROPERTY, FIELD_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT)).equals(\"constant\"))",
      "right" : "if (dataintegrity && !(p.getProperty(FIELD_LENGTH_DISTRIBUTION_PROPERTY, FIELD_LENGTH_DISTRIBUTION_PROPERTY_DEFAULT)).equals(\"constant\"))",
      "info" : "IfStatement[14243-14499]:IfStatement[14272-14528]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14385-14499]:Block[14414-14528]"
    }, {
      "left" : "System.err.println(\"Must have constant field size to check data integrity.\");",
      "right" : "System.err.println(\"Must have constant field size to check data integrity.\");",
      "info" : "ExpressionStatement[14393-14470]:ExpressionStatement[14422-14499]"
    }, {
      "left" : "System.exit(-1);",
      "right" : "System.exit(-1);",
      "info" : "ExpressionStatement[14477-14493]:ExpressionStatement[14506-14522]"
    }, {
      "left" : "if (p.getProperty(INSERT_ORDER_PROPERTY,INSERT_ORDER_PROPERTY_DEFAULT).compareTo(\"hashed\")==0)",
      "right" : "if (p.getProperty(INSERT_ORDER_PROPERTY,INSERT_ORDER_PROPERTY_DEFAULT).compareTo(\"hashed\")==0)",
      "info" : "IfStatement[14503-15319]:IfStatement[14532-15348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14600-14630]:Block[14629-14659]"
    }, {
      "left" : "orderedinserts=false;",
      "right" : "orderedinserts=false;",
      "info" : "ExpressionStatement[14605-14626]:ExpressionStatement[14634-14655]"
    }, {
      "left" : "if (requestdistrib.compareTo(\"exponential\")==0)",
      "right" : "if (requestdistrib.compareTo(\"exponential\")==0)",
      "info" : "IfStatement[14638-15319]:IfStatement[14667-15348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14688-15280]:Block[14717-15309]"
    }, {
      "left" : "double percentile = Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_PERCENTILE_PROPERTY,\n                                                                         ExponentialGenerator.EXPONENTIAL_PERCENTILE_DEFAULT));",
      "right" : "double percentile = Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_PERCENTILE_PROPERTY,\n                                                                         ExponentialGenerator.EXPONENTIAL_PERCENTILE_DEFAULT));",
      "info" : "VariableDeclarationStatement[14710-14944]:VariableDeclarationStatement[14739-14973]"
    }, {
      "left" : "double frac       = Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_FRAC_PROPERTY,\n                                                                         ExponentialGenerator.EXPONENTIAL_FRAC_DEFAULT));",
      "right" : "double frac       = Double.parseDouble(p.getProperty(ExponentialGenerator.EXPONENTIAL_FRAC_PROPERTY,\n                                                                         ExponentialGenerator.EXPONENTIAL_FRAC_DEFAULT));",
      "info" : "VariableDeclarationStatement[14965-15187]:VariableDeclarationStatement[14994-15216]"
    }, {
      "left" : "keychooser = new ExponentialGenerator(percentile, recordcount*frac);",
      "right" : "keychooser = new ExponentialGenerator(percentile, recordcount*frac);",
      "info" : "ExpressionStatement[15208-15276]:ExpressionStatement[15237-15305]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15290-15319]:Block[15319-15348]"
    }, {
      "left" : "orderedinserts=true;",
      "right" : "orderedinserts=true;",
      "info" : "ExpressionStatement[15295-15315]:ExpressionStatement[15324-15344]"
    }, {
      "left" : "keysequence=new CounterGenerator(insertstart);",
      "right" : "keysequence=new CounterGenerator(insertstart);",
      "info" : "ExpressionStatement[15323-15369]:ExpressionStatement[15352-15398]"
    }, {
      "left" : "operationchooser=new DiscreteGenerator();",
      "right" : "operationchooser=new DiscreteGenerator();",
      "info" : "ExpressionStatement[15372-15413]:ExpressionStatement[15401-15442]"
    }, {
      "left" : "if (readproportion>0)",
      "right" : "if (readproportion>0)",
      "info" : "IfStatement[15416-15498]:IfStatement[15445-15527]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15440-15498]:Block[15469-15527]"
    }, {
      "left" : "operationchooser.addValue(readproportion,\"READ\");",
      "right" : "operationchooser.addValue(readproportion,\"READ\");",
      "info" : "ExpressionStatement[15445-15494]:ExpressionStatement[15474-15523]"
    }, {
      "left" : "if (updateproportion>0)",
      "right" : "if (updateproportion>0)",
      "info" : "IfStatement[15502-15590]:IfStatement[15531-15619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15528-15590]:Block[15557-15619]"
    }, {
      "left" : "operationchooser.addValue(updateproportion,\"UPDATE\");",
      "right" : "operationchooser.addValue(updateproportion,\"UPDATE\");",
      "info" : "ExpressionStatement[15533-15586]:ExpressionStatement[15562-15615]"
    }, {
      "left" : "if (insertproportion>0)",
      "right" : "if (insertproportion>0)",
      "info" : "IfStatement[15594-15682]:IfStatement[15623-15711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15620-15682]:Block[15649-15711]"
    }, {
      "left" : "operationchooser.addValue(insertproportion,\"INSERT\");",
      "right" : "operationchooser.addValue(insertproportion,\"INSERT\");",
      "info" : "ExpressionStatement[15625-15678]:ExpressionStatement[15654-15707]"
    }, {
      "left" : "if (scanproportion>0)",
      "right" : "if (scanproportion>0)",
      "info" : "IfStatement[15688-15770]:IfStatement[15717-15799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15712-15770]:Block[15741-15799]"
    }, {
      "left" : "operationchooser.addValue(scanproportion,\"SCAN\");",
      "right" : "operationchooser.addValue(scanproportion,\"SCAN\");",
      "info" : "ExpressionStatement[15717-15766]:ExpressionStatement[15746-15795]"
    }, {
      "left" : "if (readmodifywriteproportion>0)",
      "right" : "if (readmodifywriteproportion>0)",
      "info" : "IfStatement[15776-15891]:IfStatement[15805-15920]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15811-15891]:Block[15840-15920]"
    }, {
      "left" : "operationchooser.addValue(readmodifywriteproportion,\"READMODIFYWRITE\");",
      "right" : "operationchooser.addValue(readmodifywriteproportion,\"READMODIFYWRITE\");",
      "info" : "ExpressionStatement[15816-15887]:ExpressionStatement[15845-15916]"
    }, {
      "left" : "transactioninsertkeysequence=new CounterGenerator(recordcount);",
      "right" : "transactioninsertkeysequence=new CounterGenerator(recordcount);",
      "info" : "ExpressionStatement[15895-15958]:ExpressionStatement[15924-15987]"
    }, {
      "left" : "if (requestdistrib.compareTo(\"uniform\")==0)",
      "right" : "if (requestdistrib.compareTo(\"uniform\")==0)",
      "info" : "IfStatement[15961-17807]:IfStatement[15990-17836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16007-16072]:Block[16036-16101]"
    }, {
      "left" : "keychooser=new UniformIntegerGenerator(0,recordcount-1);",
      "right" : "keychooser=new UniformIntegerGenerator(0,recordcount-1);",
      "info" : "ExpressionStatement[16012-16068]:ExpressionStatement[16041-16097]"
    }, {
      "left" : "if (requestdistrib.compareTo(\"zipfian\")==0)",
      "right" : "if (requestdistrib.compareTo(\"zipfian\")==0)",
      "info" : "IfStatement[16080-17807]:IfStatement[16109-17836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16126-17151]:Block[16155-17180]"
    }, {
      "left" : "int opcount=Integer.parseInt(p.getProperty(Client.OPERATION_COUNT_PROPERTY));",
      "right" : "int opcount=Integer.parseInt(p.getProperty(Client.OPERATION_COUNT_PROPERTY));",
      "info" : "VariableDeclarationStatement[16902-16979]:VariableDeclarationStatement[16931-17008]"
    }, {
      "left" : "int expectednewkeys=(int)(((double)opcount)*insertproportion*2.0);",
      "right" : "int expectednewkeys=(int)(((double)opcount)*insertproportion*2.0);",
      "info" : "VariableDeclarationStatement[16983-17049]:VariableDeclarationStatement[17012-17078]"
    }, {
      "left" : "keychooser=new ScrambledZipfianGenerator(recordcount+expectednewkeys);",
      "right" : "keychooser=new ScrambledZipfianGenerator(recordcount+expectednewkeys);",
      "info" : "ExpressionStatement[17077-17147]:ExpressionStatement[17106-17176]"
    }, {
      "left" : "if (requestdistrib.compareTo(\"latest\")==0)",
      "right" : "if (requestdistrib.compareTo(\"latest\")==0)",
      "info" : "IfStatement[17159-17807]:IfStatement[17188-17836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17204-17280]:Block[17233-17309]"
    }, {
      "left" : "keychooser=new SkewedLatestGenerator(transactioninsertkeysequence);",
      "right" : "keychooser=new SkewedLatestGenerator(transactioninsertkeysequence);",
      "info" : "ExpressionStatement[17209-17276]:ExpressionStatement[17238-17305]"
    }, {
      "left" : "if (requestdistrib.equals(\"hotspot\"))",
      "right" : "if (requestdistrib.equals(\"hotspot\"))",
      "info" : "IfStatement[17288-17807]:IfStatement[17317-17836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17329-17705]:Block[17358-17734]"
    }, {
      "left" : "double hotsetfraction = Double.parseDouble(p.getProperty(\n          HOTSPOT_DATA_FRACTION, HOTSPOT_DATA_FRACTION_DEFAULT));",
      "right" : "double hotsetfraction = Double.parseDouble(p.getProperty(\n          HOTSPOT_DATA_FRACTION, HOTSPOT_DATA_FRACTION_DEFAULT));",
      "info" : "VariableDeclarationStatement[17337-17460]:VariableDeclarationStatement[17366-17489]"
    }, {
      "left" : "double hotopnfraction = Double.parseDouble(p.getProperty(\n          HOTSPOT_OPN_FRACTION, HOTSPOT_OPN_FRACTION_DEFAULT));",
      "right" : "double hotopnfraction = Double.parseDouble(p.getProperty(\n          HOTSPOT_OPN_FRACTION, HOTSPOT_OPN_FRACTION_DEFAULT));",
      "info" : "VariableDeclarationStatement[17467-17588]:VariableDeclarationStatement[17496-17617]"
    }, {
      "left" : "keychooser = new HotspotIntegerGenerator(0, recordcount - 1, \n          hotsetfraction, hotopnfraction);",
      "right" : "keychooser = new HotspotIntegerGenerator(0, recordcount - 1, \n          hotsetfraction, hotopnfraction);",
      "info" : "ExpressionStatement[17595-17699]:ExpressionStatement[17624-17728]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17715-17807]:Block[17744-17836]"
    }, {
      "left" : "throw new WorkloadException(\"Unknown request distribution \\\"\"+requestdistrib+\"\\\"\");",
      "right" : "throw new WorkloadException(\"Unknown request distribution \\\"\"+requestdistrib+\"\\\"\");",
      "info" : "ThrowStatement[17720-17803]:ThrowStatement[17749-17832]"
    }, {
      "left" : "fieldchooser=new UniformIntegerGenerator(0,fieldcount-1);",
      "right" : "fieldchooser=new UniformIntegerGenerator(0,fieldcount-1);",
      "info" : "ExpressionStatement[17811-17868]:ExpressionStatement[17840-17897]"
    }, {
      "left" : "if (scanlengthdistrib.compareTo(\"uniform\")==0)",
      "right" : "if (scanlengthdistrib.compareTo(\"uniform\")==0)",
      "info" : "IfStatement[17874-18220]:IfStatement[17903-18249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17923-17988]:Block[17952-18017]"
    }, {
      "left" : "scanlength=new UniformIntegerGenerator(1,maxscanlength);",
      "right" : "scanlength=new UniformIntegerGenerator(1,maxscanlength);",
      "info" : "ExpressionStatement[17928-17984]:ExpressionStatement[17957-18013]"
    }, {
      "left" : "if (scanlengthdistrib.compareTo(\"zipfian\")==0)",
      "right" : "if (scanlengthdistrib.compareTo(\"zipfian\")==0)",
      "info" : "IfStatement[17996-18220]:IfStatement[18025-18249]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18045-18103]:Block[18074-18132]"
    }, {
      "left" : "scanlength=new ZipfianGenerator(1,maxscanlength);",
      "right" : "scanlength=new ZipfianGenerator(1,maxscanlength);",
      "info" : "ExpressionStatement[18050-18099]:ExpressionStatement[18079-18128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18113-18220]:Block[18142-18249]"
    }, {
      "left" : "throw new WorkloadException(\"Distribution \\\"\"+scanlengthdistrib+\"\\\" not allowed for scan length\");",
      "right" : "throw new WorkloadException(\"Distribution \\\"\"+scanlengthdistrib+\"\\\" not allowed for scan length\");",
      "info" : "ThrowStatement[18118-18216]:ThrowStatement[18147-18245]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18266-18359]:Block[18295-18388]"
    }, {
      "left" : "if (!orderedinserts)",
      "right" : "if (!orderedinserts)",
      "info" : "IfStatement[18271-18332]:IfStatement[18300-18361]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18295-18332]:Block[18324-18361]"
    }, {
      "left" : "keynum=Utils.hash(keynum);",
      "right" : "keynum=Utils.hash(keynum);",
      "info" : "ExpressionStatement[18301-18327]:ExpressionStatement[18330-18356]"
    }, {
      "left" : "return \"user\"+keynum;",
      "right" : "return \"user\"+keynum;",
      "info" : "ReturnStatement[18335-18356]:ReturnStatement[18364-18385]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18492-18954]:Block[18521-18983]"
    }, {
      "left" : "HashMap<String,ByteIterator> value = new HashMap<String,ByteIterator>();",
      "right" : "HashMap<String,ByteIterator> value = new HashMap<String,ByteIterator>();",
      "info" : "VariableDeclarationStatement[18498-18570]:VariableDeclarationStatement[18527-18599]"
    }, {
      "left" : "String fieldkey = fieldnames.get(Integer.parseInt(fieldchooser.nextString()));",
      "right" : "String fieldkey = fieldnames.get(Integer.parseInt(fieldchooser.nextString()));",
      "info" : "VariableDeclarationStatement[18576-18654]:VariableDeclarationStatement[18605-18683]"
    }, {
      "left" : "ByteIterator data;",
      "right" : "ByteIterator data;",
      "info" : "VariableDeclarationStatement[18659-18677]:VariableDeclarationStatement[18688-18706]"
    }, {
      "left" : "if (dataintegrity)",
      "right" : "if (dataintegrity)",
      "info" : "IfStatement[18682-18897]:IfStatement[18711-18926]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18701-18785]:Block[18730-18814]"
    }, {
      "left" : "data = new StringByteIterator(buildDeterministicValue(key, fieldkey));",
      "right" : "data = new StringByteIterator(buildDeterministicValue(key, fieldkey));",
      "info" : "ExpressionStatement[18709-18779]:ExpressionStatement[18738-18808]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18791-18897]:Block[18820-18926]"
    }, {
      "left" : "data = new RandomByteIterator(fieldlengthgenerator.nextInt());",
      "right" : "data = new RandomByteIterator(fieldlengthgenerator.nextInt());",
      "info" : "ExpressionStatement[18829-18891]:ExpressionStatement[18858-18920]"
    }, {
      "left" : "value.put(fieldkey,data);",
      "right" : "value.put(fieldkey,data);",
      "info" : "ExpressionStatement[18902-18927]:ExpressionStatement[18931-18956]"
    }, {
      "left" : "return value;",
      "right" : "return value;",
      "info" : "ReturnStatement[18933-18946]:ReturnStatement[18962-18975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19067-19515]:Block[19096-19544]"
    }, {
      "left" : "HashMap<String,ByteIterator> values = new HashMap<String,ByteIterator>();",
      "right" : "HashMap<String,ByteIterator> values = new HashMap<String,ByteIterator>();",
      "info" : "VariableDeclarationStatement[19081-19154]:VariableDeclarationStatement[19110-19183]"
    }, {
      "left" : "for (String fieldkey : fieldnames)",
      "right" : "for (String fieldkey : fieldnames)",
      "info" : "EnhancedForStatement[19160-19492]:EnhancedForStatement[19189-19521]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19195-19492]:Block[19224-19521]"
    }, {
      "left" : "ByteIterator data;",
      "right" : "ByteIterator data;",
      "info" : "VariableDeclarationStatement[19203-19221]:VariableDeclarationStatement[19232-19250]"
    }, {
      "left" : "if (dataintegrity)",
      "right" : "if (dataintegrity)",
      "info" : "IfStatement[19228-19453]:IfStatement[19257-19482]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19247-19335]:Block[19276-19364]"
    }, {
      "left" : "data = new StringByteIterator(buildDeterministicValue(key, fieldkey));",
      "right" : "data = new StringByteIterator(buildDeterministicValue(key, fieldkey));",
      "info" : "ExpressionStatement[19257-19327]:ExpressionStatement[19286-19356]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19341-19453]:Block[19370-19482]"
    }, {
      "left" : "data = new RandomByteIterator(fieldlengthgenerator.nextInt());",
      "right" : "data = new RandomByteIterator(fieldlengthgenerator.nextInt());",
      "info" : "ExpressionStatement[19383-19445]:ExpressionStatement[19412-19474]"
    }, {
      "left" : "values.put(fieldkey,data);",
      "right" : "values.put(fieldkey,data);",
      "info" : "ExpressionStatement[19460-19486]:ExpressionStatement[19489-19515]"
    }, {
      "left" : "return values;",
      "right" : "return values;",
      "info" : "ReturnStatement[19497-19511]:ReturnStatement[19526-19540]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19659-19979]:Block[19688-20008]"
    }, {
      "left" : "int size = fieldlengthgenerator.nextInt();",
      "right" : "int size = fieldlengthgenerator.nextInt();",
      "info" : "VariableDeclarationStatement[19665-19707]:VariableDeclarationStatement[19694-19736]"
    }, {
      "left" : "StringBuilder sb = new StringBuilder(size);",
      "right" : "StringBuilder sb = new StringBuilder(size);",
      "info" : "VariableDeclarationStatement[19712-19755]:VariableDeclarationStatement[19741-19784]"
    }, {
      "left" : "sb.append(key);",
      "right" : "sb.append(key);",
      "info" : "ExpressionStatement[19760-19775]:ExpressionStatement[19789-19804]"
    }, {
      "left" : "sb.append(':');",
      "right" : "sb.append(':');",
      "info" : "ExpressionStatement[19780-19795]:ExpressionStatement[19809-19824]"
    }, {
      "left" : "sb.append(fieldkey);",
      "right" : "sb.append(fieldkey);",
      "info" : "ExpressionStatement[19800-19820]:ExpressionStatement[19829-19849]"
    }, {
      "left" : "while (sb.length() < size)",
      "right" : "while (sb.length() < size)",
      "info" : "WhileStatement[19825-19924]:WhileStatement[19854-19953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19852-19924]:Block[19881-19953]"
    }, {
      "left" : "sb.append(':');",
      "right" : "sb.append(':');",
      "info" : "ExpressionStatement[19860-19875]:ExpressionStatement[19889-19904]"
    }, {
      "left" : "sb.append(sb.toString().hashCode());",
      "right" : "sb.append(sb.toString().hashCode());",
      "info" : "ExpressionStatement[19882-19918]:ExpressionStatement[19911-19947]"
    }, {
      "left" : "sb.setLength(size);",
      "right" : "sb.setLength(size);",
      "info" : "ExpressionStatement[19929-19948]:ExpressionStatement[19958-19977]"
    }, {
      "left" : "return sb.toString();",
      "right" : "return sb.toString();",
      "info" : "ReturnStatement[19954-19975]:ReturnStatement[19983-20004]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20403-20625]:Block[20432-20654]"
    }, {
      "left" : "int keynum=keysequence.nextInt();",
      "right" : "int keynum=keysequence.nextInt();",
      "info" : "VariableDeclarationStatement[20407-20440]:VariableDeclarationStatement[20436-20469]"
    }, {
      "left" : "String dbkey = buildKeyName(keynum);",
      "right" : "String dbkey = buildKeyName(keynum);",
      "info" : "VariableDeclarationStatement[20443-20479]:VariableDeclarationStatement[20472-20508]"
    }, {
      "left" : "HashMap<String, ByteIterator> values = buildValues(dbkey);",
      "right" : "HashMap<String, ByteIterator> values = buildValues(dbkey);",
      "info" : "VariableDeclarationStatement[20482-20540]:VariableDeclarationStatement[20511-20569]"
    }, {
      "left" : "if (db.insert(table,dbkey,values) == 0)",
      "right" : "if (db.insert(table,dbkey,values) == 0)",
      "info" : "IfStatement[20543-20622]:IfStatement[20572-20651]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[20586-20598]:ReturnStatement[20615-20627]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[20609-20622]:ReturnStatement[20638-20651]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21059-21460]:Block[21088-21489]"
    }, {
      "left" : "String op=operationchooser.nextString();",
      "right" : "String op=operationchooser.nextString();",
      "info" : "VariableDeclarationStatement[21063-21103]:VariableDeclarationStatement[21092-21132]"
    }, {
      "left" : "if (op.compareTo(\"READ\")==0)",
      "right" : "if (op.compareTo(\"READ\")==0)",
      "info" : "IfStatement[21107-21439]:IfStatement[21136-21468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21138-21169]:Block[21167-21198]"
    }, {
      "left" : "doTransactionRead(db);",
      "right" : "doTransactionRead(db);",
      "info" : "ExpressionStatement[21143-21165]:ExpressionStatement[21172-21194]"
    }, {
      "left" : "if (op.compareTo(\"UPDATE\")==0)",
      "right" : "if (op.compareTo(\"UPDATE\")==0)",
      "info" : "IfStatement[21177-21439]:IfStatement[21206-21468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21210-21243]:Block[21239-21272]"
    }, {
      "left" : "doTransactionUpdate(db);",
      "right" : "doTransactionUpdate(db);",
      "info" : "ExpressionStatement[21215-21239]:ExpressionStatement[21244-21268]"
    }, {
      "left" : "if (op.compareTo(\"INSERT\")==0)",
      "right" : "if (op.compareTo(\"INSERT\")==0)",
      "info" : "IfStatement[21251-21439]:IfStatement[21280-21468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21284-21317]:Block[21313-21346]"
    }, {
      "left" : "doTransactionInsert(db);",
      "right" : "doTransactionInsert(db);",
      "info" : "ExpressionStatement[21289-21313]:ExpressionStatement[21318-21342]"
    }, {
      "left" : "if (op.compareTo(\"SCAN\")==0)",
      "right" : "if (op.compareTo(\"SCAN\")==0)",
      "info" : "IfStatement[21325-21439]:IfStatement[21354-21468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21356-21387]:Block[21385-21416]"
    }, {
      "left" : "doTransactionScan(db);",
      "right" : "doTransactionScan(db);",
      "info" : "ExpressionStatement[21361-21383]:ExpressionStatement[21390-21412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21397-21439]:Block[21426-21468]"
    }, {
      "left" : "doTransactionReadModifyWrite(db);",
      "right" : "doTransactionReadModifyWrite(db);",
      "info" : "ExpressionStatement[21402-21435]:ExpressionStatement[21431-21464]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[21445-21457]:ReturnStatement[21474-21486]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21825-22329]:Block[21854-22358]"
    }, {
      "left" : "int matchType = DATA_INT_MATCH;",
      "right" : "int matchType = DATA_INT_MATCH;",
      "info" : "VariableDeclarationStatement[21831-21862]:VariableDeclarationStatement[21860-21891]"
    }, {
      "left" : "if (!cells.isEmpty())",
      "right" : "if (!cells.isEmpty())",
      "info" : "IfStatement[21867-22260]:IfStatement[21896-22289]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21889-22152]:Block[21918-22181]"
    }, {
      "left" : "for (Map.Entry<String, ByteIterator> entry : cells.entrySet())",
      "right" : "for (Map.Entry<String, ByteIterator> entry : cells.entrySet())",
      "info" : "EnhancedForStatement[21897-22146]:EnhancedForStatement[21926-22175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21960-22146]:Block[21989-22175]"
    }, {
      "left" : "if (!entry.getValue().toString().equals(\n            buildDeterministicValue(key, entry.getKey())))",
      "right" : "if (!entry.getValue().toString().equals(\n            buildDeterministicValue(key, entry.getKey())))",
      "info" : "IfStatement[21970-22138]:IfStatement[21999-22167]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22070-22138]:Block[22099-22167]"
    }, {
      "left" : "matchType = DATA_INT_DEVIATE;",
      "right" : "matchType = DATA_INT_DEVIATE;",
      "info" : "ExpressionStatement[22082-22111]:ExpressionStatement[22111-22140]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22122-22128]:BreakStatement[22151-22157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22158-22260]:Block[22187-22289]"
    }, {
      "left" : "matchType = DATA_INT_UNEXPECTED_NULL;",
      "right" : "matchType = DATA_INT_UNEXPECTED_NULL;",
      "info" : "ExpressionStatement[22217-22254]:ExpressionStatement[22246-22283]"
    }, {
      "left" : "Measurements.getMeasurements().measure(\"VERIFY\", matchType);",
      "right" : "Measurements.getMeasurements().measure(\"VERIFY\", matchType);",
      "info" : "ExpressionStatement[22265-22325]:ExpressionStatement[22294-22354]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22352-22827]:Block[22381-22856]"
    }, {
      "left" : "int keynum;",
      "right" : "int keynum;",
      "info" : "VariableDeclarationStatement[22362-22373]:VariableDeclarationStatement[22391-22402]"
    }, {
      "left" : "if(keychooser instanceof ExponentialGenerator)",
      "right" : "if(keychooser instanceof ExponentialGenerator)",
      "info" : "IfStatement[22382-22798]:IfStatement[22411-22827]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22429-22612]:Block[22458-22641]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[22443-22602]:DoStatement[22472-22631]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22462-22571]:Block[22491-22600]"
    }, {
      "left" : "keynum=transactioninsertkeysequence.lastInt() - keychooser.nextInt();",
      "right" : "keynum=transactioninsertkeysequence.lastInt() - keychooser.nextInt();",
      "info" : "ExpressionStatement[22484-22553]:ExpressionStatement[22513-22582]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22618-22798]:Block[22647-22827]"
    }, {
      "left" : "do{...}",
      "right" : "do{...}",
      "info" : "DoStatement[22632-22788]:DoStatement[22661-22817]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22651-22719]:Block[22680-22748]"
    }, {
      "left" : "keynum=keychooser.nextInt();",
      "right" : "keynum=keychooser.nextInt();",
      "info" : "ExpressionStatement[22673-22701]:ExpressionStatement[22702-22730]"
    }, {
      "left" : "return keynum;",
      "right" : "return keynum;",
      "info" : "ReturnStatement[22807-22821]:ReturnStatement[22836-22850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22868-23392]:Block[22897-23421]"
    }, {
      "left" : "int keynum = nextKeynum();",
      "right" : "int keynum = nextKeynum();",
      "info" : "VariableDeclarationStatement[22896-22922]:VariableDeclarationStatement[22925-22951]"
    }, {
      "left" : "String keyname = buildKeyName(keynum);",
      "right" : "String keyname = buildKeyName(keynum);",
      "info" : "VariableDeclarationStatement[22928-22966]:VariableDeclarationStatement[22957-22995]"
    }, {
      "left" : "HashSet<String> fields=null;",
      "right" : "HashSet<String> fields=null;",
      "info" : "VariableDeclarationStatement[22972-23000]:VariableDeclarationStatement[23001-23029]"
    }, {
      "left" : "if (!readallfields)",
      "right" : "if (!readallfields)",
      "info" : "IfStatement[23004-23199]:IfStatement[23033-23228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23026-23199]:Block[23055-23228]"
    }, {
      "left" : "String fieldname=fieldnames.get(Integer.parseInt(fieldchooser.nextString()));",
      "right" : "String fieldname=fieldnames.get(Integer.parseInt(fieldchooser.nextString()));",
      "info" : "VariableDeclarationStatement[23058-23135]:VariableDeclarationStatement[23087-23164]"
    }, {
      "left" : "fields=new HashSet<String>();",
      "right" : "fields=new HashSet<String>();",
      "info" : "ExpressionStatement[23140-23169]:ExpressionStatement[23169-23198]"
    }, {
      "left" : "fields.add(fieldname);",
      "right" : "fields.add(fieldname);",
      "info" : "ExpressionStatement[23173-23195]:ExpressionStatement[23202-23224]"
    }, {
      "left" : "HashMap<String,ByteIterator> cells =\n        new HashMap<String,ByteIterator>();",
      "right" : "HashMap<String,ByteIterator> cells =\n        new HashMap<String,ByteIterator>();",
      "info" : "VariableDeclarationStatement[23205-23285]:VariableDeclarationStatement[23234-23314]"
    }, {
      "left" : "db.read(table,keyname,fields,cells);",
      "right" : "db.read(table,keyname,fields,cells);",
      "info" : "ExpressionStatement[23288-23324]:ExpressionStatement[23317-23353]"
    }, {
      "left" : "if (dataintegrity)",
      "right" : "if (dataintegrity)",
      "info" : "IfStatement[23330-23389]:IfStatement[23359-23418]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23349-23389]:Block[23378-23418]"
    }, {
      "left" : "verifyRow(keyname, cells);",
      "right" : "verifyRow(keyname, cells);",
      "info" : "ExpressionStatement[23357-23383]:ExpressionStatement[23386-23412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23445-24398]:Block[23474-24427]"
    }, {
      "left" : "int keynum = nextKeynum();",
      "right" : "int keynum = nextKeynum();",
      "info" : "VariableDeclarationStatement[23473-23499]:VariableDeclarationStatement[23502-23528]"
    }, {
      "left" : "String keyname = buildKeyName(keynum);",
      "right" : "String keyname = buildKeyName(keynum);",
      "info" : "VariableDeclarationStatement[23503-23541]:VariableDeclarationStatement[23532-23570]"
    }, {
      "left" : "HashSet<String> fields=null;",
      "right" : "HashSet<String> fields=null;",
      "info" : "VariableDeclarationStatement[23545-23573]:VariableDeclarationStatement[23574-23602]"
    }, {
      "left" : "if (!readallfields)",
      "right" : "if (!readallfields)",
      "info" : "IfStatement[23577-23772]:IfStatement[23606-23801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23599-23772]:Block[23628-23801]"
    }, {
      "left" : "String fieldname=fieldnames.get(Integer.parseInt(fieldchooser.nextString()));",
      "right" : "String fieldname=fieldnames.get(Integer.parseInt(fieldchooser.nextString()));",
      "info" : "VariableDeclarationStatement[23631-23708]:VariableDeclarationStatement[23660-23737]"
    }, {
      "left" : "fields=new HashSet<String>();",
      "right" : "fields=new HashSet<String>();",
      "info" : "ExpressionStatement[23713-23742]:ExpressionStatement[23742-23771]"
    }, {
      "left" : "fields.add(fieldname);",
      "right" : "fields.add(fieldname);",
      "info" : "ExpressionStatement[23746-23768]:ExpressionStatement[23775-23797]"
    }, {
      "left" : "HashMap<String,ByteIterator> values;",
      "right" : "HashMap<String,ByteIterator> values;",
      "info" : "VariableDeclarationStatement[23778-23814]:VariableDeclarationStatement[23807-23843]"
    }, {
      "left" : "if (writeallfields)",
      "right" : "if (writeallfields)",
      "info" : "IfStatement[23818-24001]:IfStatement[23847-24030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23840-23916]:Block[23869-23945]"
    }, {
      "left" : "values = buildValues(keyname);",
      "right" : "values = buildValues(keyname);",
      "info" : "ExpressionStatement[23882-23912]:ExpressionStatement[23911-23941]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23926-24001]:Block[23955-24030]"
    }, {
      "left" : "values = buildSingleValue(keyname);",
      "right" : "values = buildSingleValue(keyname);",
      "info" : "ExpressionStatement[23962-23997]:ExpressionStatement[23991-24026]"
    }, {
      "left" : "HashMap<String,ByteIterator> cells =\n\t\t    new HashMap<String,ByteIterator>();",
      "right" : "HashMap<String,ByteIterator> cells =\n\t\t    new HashMap<String,ByteIterator>();",
      "info" : "VariableDeclarationStatement[24029-24107]:VariableDeclarationStatement[24058-24136]"
    }, {
      "left" : "long st=System.nanoTime();",
      "right" : "long st=System.nanoTime();",
      "info" : "VariableDeclarationStatement[24111-24137]:VariableDeclarationStatement[24140-24166]"
    }, {
      "left" : "db.read(table,keyname,fields,cells);",
      "right" : "db.read(table,keyname,fields,cells);",
      "info" : "ExpressionStatement[24141-24177]:ExpressionStatement[24170-24206]"
    }, {
      "left" : "db.update(table,keyname,values);",
      "right" : "db.update(table,keyname,values);",
      "info" : "ExpressionStatement[24183-24215]:ExpressionStatement[24212-24244]"
    }, {
      "left" : "long en=System.nanoTime();",
      "right" : "long en=System.nanoTime();",
      "info" : "VariableDeclarationStatement[24219-24245]:VariableDeclarationStatement[24248-24274]"
    }, {
      "left" : "if (dataintegrity)",
      "right" : "if (dataintegrity)",
      "info" : "IfStatement[24251-24310]:IfStatement[24280-24339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24270-24310]:Block[24299-24339]"
    }, {
      "left" : "verifyRow(keyname, cells);",
      "right" : "verifyRow(keyname, cells);",
      "info" : "ExpressionStatement[24278-24304]:ExpressionStatement[24307-24333]"
    }, {
      "left" : "Measurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)((en-st)/1000));",
      "right" : "Measurements.getMeasurements().measure(\"READ-MODIFY-WRITE\", (int)((en-st)/1000));",
      "info" : "ExpressionStatement[24314-24395]:ExpressionStatement[24343-24424]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24440-24928]:Block[24469-24957]"
    }, {
      "left" : "int keynum = nextKeynum();",
      "right" : "int keynum = nextKeynum();",
      "info" : "VariableDeclarationStatement[24468-24494]:VariableDeclarationStatement[24497-24523]"
    }, {
      "left" : "String startkeyname = buildKeyName(keynum);",
      "right" : "String startkeyname = buildKeyName(keynum);",
      "info" : "VariableDeclarationStatement[24498-24541]:VariableDeclarationStatement[24527-24570]"
    }, {
      "left" : "int len=scanlength.nextInt();",
      "right" : "int len=scanlength.nextInt();",
      "info" : "VariableDeclarationStatement[24579-24608]:VariableDeclarationStatement[24608-24637]"
    }, {
      "left" : "HashSet<String> fields=null;",
      "right" : "HashSet<String> fields=null;",
      "info" : "VariableDeclarationStatement[24612-24640]:VariableDeclarationStatement[24641-24669]"
    }, {
      "left" : "if (!readallfields)",
      "right" : "if (!readallfields)",
      "info" : "IfStatement[24644-24839]:IfStatement[24673-24868]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24666-24839]:Block[24695-24868]"
    }, {
      "left" : "String fieldname=fieldnames.get(Integer.parseInt(fieldchooser.nextString()));",
      "right" : "String fieldname=fieldnames.get(Integer.parseInt(fieldchooser.nextString()));",
      "info" : "VariableDeclarationStatement[24698-24775]:VariableDeclarationStatement[24727-24804]"
    }, {
      "left" : "fields=new HashSet<String>();",
      "right" : "fields=new HashSet<String>();",
      "info" : "ExpressionStatement[24780-24809]:ExpressionStatement[24809-24838]"
    }, {
      "left" : "fields.add(fieldname);",
      "right" : "fields.add(fieldname);",
      "info" : "ExpressionStatement[24813-24835]:ExpressionStatement[24842-24864]"
    }, {
      "left" : "db.scan(table,startkeyname,len,fields,new Vector<HashMap<String,ByteIterator>>());",
      "right" : "db.scan(table,startkeyname,len,fields,new Vector<HashMap<String,ByteIterator>>());",
      "info" : "ExpressionStatement[24843-24925]:ExpressionStatement[24872-24954]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24971-25331]:Block[25000-25360]"
    }, {
      "left" : "int keynum = nextKeynum();",
      "right" : "int keynum = nextKeynum();",
      "info" : "VariableDeclarationStatement[24999-25025]:VariableDeclarationStatement[25028-25054]"
    }, {
      "left" : "String keyname=buildKeyName(keynum);",
      "right" : "String keyname=buildKeyName(keynum);",
      "info" : "VariableDeclarationStatement[25029-25065]:VariableDeclarationStatement[25058-25094]"
    }, {
      "left" : "HashMap<String,ByteIterator> values;",
      "right" : "HashMap<String,ByteIterator> values;",
      "info" : "VariableDeclarationStatement[25069-25105]:VariableDeclarationStatement[25098-25134]"
    }, {
      "left" : "if (writeallfields)",
      "right" : "if (writeallfields)",
      "info" : "IfStatement[25109-25292]:IfStatement[25138-25321]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25131-25207]:Block[25160-25236]"
    }, {
      "left" : "values = buildValues(keyname);",
      "right" : "values = buildValues(keyname);",
      "info" : "ExpressionStatement[25173-25203]:ExpressionStatement[25202-25232]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25217-25292]:Block[25246-25321]"
    }, {
      "left" : "values = buildSingleValue(keyname);",
      "right" : "values = buildSingleValue(keyname);",
      "info" : "ExpressionStatement[25253-25288]:ExpressionStatement[25282-25317]"
    }, {
      "left" : "db.update(table,keyname,values);",
      "right" : "db.update(table,keyname,values);",
      "info" : "ExpressionStatement[25296-25328]:ExpressionStatement[25325-25357]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25374-25590]:Block[25403-25619]"
    }, {
      "left" : "int keynum=transactioninsertkeysequence.nextInt();",
      "right" : "int keynum=transactioninsertkeysequence.nextInt();",
      "info" : "VariableDeclarationStatement[25402-25452]:VariableDeclarationStatement[25431-25481]"
    }, {
      "left" : "String dbkey = buildKeyName(keynum);",
      "right" : "String dbkey = buildKeyName(keynum);",
      "info" : "VariableDeclarationStatement[25456-25492]:VariableDeclarationStatement[25485-25521]"
    }, {
      "left" : "HashMap<String, ByteIterator> values = buildValues(dbkey);",
      "right" : "HashMap<String, ByteIterator> values = buildValues(dbkey);",
      "info" : "VariableDeclarationStatement[25496-25554]:VariableDeclarationStatement[25525-25583]"
    }, {
      "left" : "db.insert(table,dbkey,values);",
      "right" : "db.insert(table,dbkey,values);",
      "info" : "ExpressionStatement[25557-25587]:ExpressionStatement[25586-25616]"
    } ]
  },
  "interFileMappings" : { }
}