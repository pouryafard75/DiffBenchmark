{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "private final AbstractCompiler compiler;",
      "right" : "private final AbstractCompiler compiler;",
      "info" : "FieldDeclaration[2201-2241]:FieldDeclaration[2201-2241]"
    }, {
      "left" : "enum : Mode",
      "right" : "enum : Mode",
      "info" : "EnumDeclaration[2245-2381]:EnumDeclaration[2245-2381]"
    }, {
      "left" : "private final Mode mode;",
      "right" : "private final Mode mode;",
      "info" : "FieldDeclaration[2385-2409]:FieldDeclaration[2385-2409]"
    }, {
      "left" : "private final boolean inlineAllStrings;",
      "right" : "private final boolean inlineAllStrings;",
      "info" : "FieldDeclaration[2493-2532]:FieldDeclaration[2493-2532]"
    }, {
      "left" : "private final IdentifyConstants identifyConstants = new IdentifyConstants();",
      "right" : "private final IdentifyConstants identifyConstants = new IdentifyConstants();",
      "info" : "FieldDeclaration[2536-2612]:FieldDeclaration[2536-2612]"
    }, {
      "left" : "InlineVariables(\n      AbstractCompiler compiler,\n      Mode mode,\n      boolean inlineAllStrings)",
      "right" : "InlineVariables(\n      AbstractCompiler compiler,\n      Mode mode,\n      boolean inlineAllStrings)",
      "info" : "MethodDeclaration[2616-2818]:MethodDeclaration[2616-2818]"
    }, {
      "left" : "public void process(Node externs, Node root)",
      "right" : "public void process(Node externs, Node root)",
      "info" : "MethodDeclaration[2822-3060]:MethodDeclaration[2822-3060]"
    }, {
      "left" : "private Predicate<Var> getFilterForMode()",
      "right" : "private Predicate<Var> getFilterForMode()",
      "info" : "MethodDeclaration[3064-3384]:MethodDeclaration[3064-3384]"
    }, {
      "left" : "IdentifyConstants",
      "right" : "IdentifyConstants",
      "info" : "TypeDeclaration[3388-3870]:TypeDeclaration[3388-3870]"
    }, {
      "left" : "public boolean apply(Var var)",
      "right" : "public boolean apply(Var var)",
      "info" : "MethodDeclaration[3787-3866]:MethodDeclaration[3787-3866]"
    }, {
      "left" : "IdentifyLocals",
      "right" : "IdentifyLocals",
      "info" : "TypeDeclaration[3874-4071]:TypeDeclaration[3874-4071]"
    }, {
      "left" : "public boolean apply(Var var)",
      "right" : "public boolean apply(Var var)",
      "info" : "MethodDeclaration[3982-4067]:MethodDeclaration[3982-4067]"
    }, {
      "left" : "AliasCandidate",
      "right" : "AliasCandidate",
      "info" : "TypeDeclaration[4075-4316]:TypeDeclaration[4075-4316]"
    }, {
      "left" : "private final Var alias;",
      "right" : "private final Var alias;",
      "info" : "FieldDeclaration[4117-4141]:FieldDeclaration[4117-4141]"
    }, {
      "left" : "private final ReferenceCollection refInfo;",
      "right" : "private final ReferenceCollection refInfo;",
      "info" : "FieldDeclaration[4146-4188]:FieldDeclaration[4146-4188]"
    }, {
      "left" : "AliasCandidate(Var alias, ReferenceCollection refInfo)",
      "right" : "AliasCandidate(Var alias, ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[4194-4312]:MethodDeclaration[4194-4312]"
    }, {
      "left" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "right" : "private final Set<Var> staleVars = Sets.newHashSet();",
      "info" : "FieldDeclaration[4545-4754]:FieldDeclaration[4545-4754]"
    }, {
      "left" : "final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
      "right" : "final Map<Node, AliasCandidate> aliasCandidates = Maps.newHashMap();",
      "info" : "FieldDeclaration[4760-5027]:FieldDeclaration[4760-5027]"
    }, {
      "left" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "right" : "public void afterExitScope(NodeTraversal t, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[5033-5214]:MethodDeclaration[5033-5214]"
    }, {
      "left" : "private void collectAliasCandidates(NodeTraversal t,\n        ReferenceMap referenceMap)",
      "right" : "private void collectAliasCandidates(NodeTraversal t,\n        ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[5220-6374]:MethodDeclaration[5220-6374]"
    }, {
      "left" : "private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap)",
      "right" : "private void doInlinesForScope(NodeTraversal t, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[6380-7835]:MethodDeclaration[6380-7835]"
    }, {
      "left" : "private boolean maybeEscapedOrModifiedArguments(\n        Scope scope, ReferenceMap referenceMap)",
      "right" : "private boolean maybeEscapedOrModifiedArguments(\n        Scope scope, ReferenceMap referenceMap)",
      "info" : "MethodDeclaration[7841-8666]:MethodDeclaration[7841-8666]"
    }, {
      "left" : "private boolean isLValue(Node n)",
      "right" : "private boolean isLValue(Node n)",
      "info" : "MethodDeclaration[8672-8894]:MethodDeclaration[8672-8894]"
    }, {
      "left" : "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments)",
      "right" : "private void inlineNonConstants(\n        Var v, ReferenceCollection referenceInfo,\n        boolean maybeModifiedArguments)",
      "info" : "MethodDeclaration[8900-12057]:MethodDeclaration[8900-12057]"
    }, {
      "left" : "private void blacklistVarReferencesInTree(Node root, Scope scope)",
      "right" : "private void blacklistVarReferencesInTree(Node root, Scope scope)",
      "info" : "MethodDeclaration[12063-12517]:MethodDeclaration[12063-12517]"
    }, {
      "left" : "private boolean isVarInlineForbidden(Var var)",
      "right" : "private boolean isVarInlineForbidden(Var var)",
      "info" : "MethodDeclaration[12523-13235]:MethodDeclaration[12523-13235]"
    }, {
      "left" : "private void inline(Var v, Reference declaration,\n                        Reference init, Reference reference)",
      "right" : "private void inline(Var v, Reference declaration,\n                        Reference init, Reference reference)",
      "info" : "MethodDeclaration[13241-14189]:MethodDeclaration[13241-14189]"
    }, {
      "left" : "private void inlineWellDefinedVariable(Var v, Node value,\n        List<Reference> refSet)",
      "right" : "private void inlineWellDefinedVariable(Var v, Node value,\n        List<Reference> refSet)",
      "info" : "MethodDeclaration[14195-14555]:MethodDeclaration[14195-14555]"
    }, {
      "left" : "private void inlineDeclaredConstant(Var v, Node value,\n        List<Reference> refSet)",
      "right" : "private void inlineDeclaredConstant(Var v, Node value,\n        List<Reference> refSet)",
      "info" : "MethodDeclaration[14561-15008]:MethodDeclaration[14561-15008]"
    }, {
      "left" : "private void removeDeclaration(Reference declaration)",
      "right" : "private void removeDeclaration(Reference declaration)",
      "info" : "MethodDeclaration[15014-15502]:MethodDeclaration[15014-15502]"
    }, {
      "left" : "private void inlineValue(Var v, Reference ref, Node value)",
      "right" : "private void inlineValue(Var v, Reference ref, Node value)",
      "info" : "MethodDeclaration[15508-16180]:MethodDeclaration[15508-16180]"
    }, {
      "left" : "private boolean isInlineableDeclaredConstant(Var var,\n        ReferenceCollection refInfo)",
      "right" : "private boolean isInlineableDeclaredConstant(Var var,\n        ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[16186-17272]:MethodDeclaration[16186-17272]"
    }, {
      "left" : "private boolean isStringWorthInlining(Var var, List<Reference> refs)",
      "right" : "private boolean isStringWorthInlining(Var var, List<Reference> refs)",
      "info" : "MethodDeclaration[17278-18340]:MethodDeclaration[17278-18340]"
    }, {
      "left" : "private boolean canMoveAggressively(Node value)",
      "right" : "private boolean canMoveAggressively(Node value)",
      "info" : "MethodDeclaration[20741-21075]:MethodDeclaration[20853-21187]"
    }, {
      "left" : "private boolean canMoveModerately(\n        Reference initialization,\n        Reference reference)",
      "right" : "private boolean canMoveModerately(\n        Reference initialization,\n        Reference reference)",
      "info" : "MethodDeclaration[21081-22623]:MethodDeclaration[21193-22735]"
    }, {
      "left" : "private boolean isValidDeclaration(Reference declaration)",
      "right" : "private boolean isValidDeclaration(Reference declaration)",
      "info" : "MethodDeclaration[22629-22956]:MethodDeclaration[22741-23068]"
    }, {
      "left" : "private boolean isValidInitialization(Reference initialization)",
      "right" : "private boolean isValidInitialization(Reference initialization)",
      "info" : "MethodDeclaration[22962-23674]:MethodDeclaration[23074-23786]"
    }, {
      "left" : "private boolean isValidReference(Reference reference)",
      "right" : "private boolean isValidReference(Reference reference)",
      "info" : "MethodDeclaration[23680-23888]:MethodDeclaration[23792-24000]"
    }, {
      "left" : "private boolean isImmutableAndWellDefinedVariable(Var v,\n        ReferenceCollection refInfo)",
      "right" : "private boolean isImmutableAndWellDefinedVariable(Var v,\n        ReferenceCollection refInfo)",
      "info" : "MethodDeclaration[23894-25634]:MethodDeclaration[24006-25746]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2715-2818]:Block[2715-2818]"
    }, {
      "left" : "this.compiler = compiler;",
      "right" : "this.compiler = compiler;",
      "info" : "ExpressionStatement[2721-2746]:ExpressionStatement[2721-2746]"
    }, {
      "left" : "this.mode = mode;",
      "right" : "this.mode = mode;",
      "info" : "ExpressionStatement[2751-2768]:ExpressionStatement[2751-2768]"
    }, {
      "left" : "this.inlineAllStrings = inlineAllStrings;",
      "right" : "this.inlineAllStrings = inlineAllStrings;",
      "info" : "ExpressionStatement[2773-2814]:ExpressionStatement[2773-2814]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2879-3060]:Block[2879-3060]"
    }, {
      "left" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior(), getFilterForMode());",
      "right" : "ReferenceCollectingCallback callback = new ReferenceCollectingCallback(\n        compiler, new InliningBehavior(), getFilterForMode());",
      "info" : "VariableDeclarationStatement[2885-3019]:VariableDeclarationStatement[2885-3019]"
    }, {
      "left" : "callback.process(externs, root);",
      "right" : "callback.process(externs, root);",
      "info" : "ExpressionStatement[3024-3056]:ExpressionStatement[3024-3056]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3106-3384]:Block[3106-3384]"
    }, {
      "left" : "switch (mode) {\n      case ALL:\n        return Predicates.<Var>alwaysTrue();\n      case LOCALS_ONLY:\n        return new IdentifyLocals();\n      case CONSTANTS_ONLY:\n        return new IdentifyConstants();\n      default:\n        throw new IllegalStateException();\n    }",
      "right" : "switch (mode) {\n      case ALL:\n        return Predicates.<Var>alwaysTrue();\n      case LOCALS_ONLY:\n        return new IdentifyLocals();\n      case CONSTANTS_ONLY:\n        return new IdentifyConstants();\n      default:\n        throw new IllegalStateException();\n    }",
      "info" : "SwitchStatement[3112-3380]:SwitchStatement[3112-3380]"
    }, {
      "left" : "case ALL:",
      "right" : "case ALL:",
      "info" : "SwitchCase[3134-3143]:SwitchCase[3134-3143]"
    }, {
      "left" : "return Predicates.<Var>alwaysTrue();",
      "right" : "return Predicates.<Var>alwaysTrue();",
      "info" : "ReturnStatement[3152-3188]:ReturnStatement[3152-3188]"
    }, {
      "left" : "case LOCALS_ONLY:",
      "right" : "case LOCALS_ONLY:",
      "info" : "SwitchCase[3195-3212]:SwitchCase[3195-3212]"
    }, {
      "left" : "return new IdentifyLocals();",
      "right" : "return new IdentifyLocals();",
      "info" : "ReturnStatement[3221-3249]:ReturnStatement[3221-3249]"
    }, {
      "left" : "case CONSTANTS_ONLY:",
      "right" : "case CONSTANTS_ONLY:",
      "info" : "SwitchCase[3256-3276]:SwitchCase[3256-3276]"
    }, {
      "left" : "return new IdentifyConstants();",
      "right" : "return new IdentifyConstants();",
      "info" : "ReturnStatement[3285-3316]:ReturnStatement[3285-3316]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[3323-3331]:SwitchCase[3323-3331]"
    }, {
      "left" : "throw new IllegalStateException();",
      "right" : "throw new IllegalStateException();",
      "info" : "ThrowStatement[3340-3374]:ThrowStatement[3340-3374]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3831-3866]:Block[3831-3866]"
    }, {
      "left" : "return var.isConst();",
      "right" : "return var.isConst();",
      "info" : "ReturnStatement[3839-3860]:ReturnStatement[3839-3860]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4026-4067]:Block[4026-4067]"
    }, {
      "left" : "return var.scope.isLocal();",
      "right" : "return var.scope.isLocal();",
      "info" : "ReturnStatement[4034-4061]:ReturnStatement[4034-4061]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4249-4312]:Block[4249-4312]"
    }, {
      "left" : "this.alias = alias;",
      "right" : "this.alias = alias;",
      "info" : "ExpressionStatement[4257-4276]:ExpressionStatement[4257-4276]"
    }, {
      "left" : "this.refInfo = refInfo;",
      "right" : "this.refInfo = refInfo;",
      "info" : "ExpressionStatement[4283-4306]:ExpressionStatement[4283-4306]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5118-5214]:Block[5118-5214]"
    }, {
      "left" : "collectAliasCandidates(t, referenceMap);",
      "right" : "collectAliasCandidates(t, referenceMap);",
      "info" : "ExpressionStatement[5126-5166]:ExpressionStatement[5126-5166]"
    }, {
      "left" : "doInlinesForScope(t, referenceMap);",
      "right" : "doInlinesForScope(t, referenceMap);",
      "info" : "ExpressionStatement[5173-5208]:ExpressionStatement[5173-5208]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5440-6374]:Block[5440-6374]"
    }, {
      "left" : "if (mode != Mode.CONSTANTS_ONLY)",
      "right" : "if (mode != Mode.CONSTANTS_ONLY)",
      "info" : "IfStatement[5448-6368]:IfStatement[5448-6368]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5481-6368]:Block[5481-6368]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[5491-6360]:ForStatement[5491-6360]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5554-6360]:Block[5554-6360]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[5566-5584]:VariableDeclarationStatement[5566-5584]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "info" : "VariableDeclarationStatement[5595-5661]:VariableDeclarationStatement[5595-5661]"
    }, {
      "left" : "if (referenceInfo != null && referenceInfo.references.size() >= 2 &&\n              referenceInfo.isWellDefined() &&\n              referenceInfo.isAssignedOnceInLifetime())",
      "right" : "if (referenceInfo != null && referenceInfo.references.size() >= 2 &&\n              referenceInfo.isWellDefined() &&\n              referenceInfo.isAssignedOnceInLifetime())",
      "info" : "IfStatement[5899-6350]:IfStatement[5899-6350]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6071-6350]:Block[6071-6350]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[6085-6143]:VariableDeclarationStatement[6085-6143]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[6156-6193]:VariableDeclarationStatement[6156-6193]"
    }, {
      "left" : "if (value != null && value.isName())",
      "right" : "if (value != null && value.isName())",
      "info" : "IfStatement[6206-6338]:IfStatement[6206-6338]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6243-6338]:Block[6243-6338]"
    }, {
      "left" : "aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));",
      "right" : "aliasCandidates.put(value, new AliasCandidate(v, referenceInfo));",
      "info" : "ExpressionStatement[6259-6324]:ExpressionStatement[6259-6324]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6590-7835]:Block[6590-7835]"
    }, {
      "left" : "boolean maybeModifiedArguments =\n          maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);",
      "right" : "boolean maybeModifiedArguments =\n          maybeEscapedOrModifiedArguments(t.getScope(), referenceMap);",
      "info" : "VariableDeclarationStatement[6599-6702]:VariableDeclarationStatement[6599-6702]"
    }, {
      "left" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "right" : "for (Iterator<Var> it = t.getScope().getVars(); it.hasNext())",
      "info" : "ForStatement[6709-7829]:ForStatement[6709-7829]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6772-7829]:Block[6772-7829]"
    }, {
      "left" : "Var v = it.next();",
      "right" : "Var v = it.next();",
      "info" : "VariableDeclarationStatement[6782-6800]:VariableDeclarationStatement[6782-6800]"
    }, {
      "left" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "right" : "ReferenceCollection referenceInfo = referenceMap.getReferences(v);",
      "info" : "VariableDeclarationStatement[6810-6876]:VariableDeclarationStatement[6810-6876]"
    }, {
      "left" : "if (referenceInfo == null || isVarInlineForbidden(v))",
      "right" : "if (referenceInfo == null || isVarInlineForbidden(v))",
      "info" : "IfStatement[7003-7821]:IfStatement[7003-7821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7057-7235]:Block[7057-7235]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7216-7225]:ContinueStatement[7216-7225]"
    }, {
      "left" : "if (isInlineableDeclaredConstant(v, referenceInfo))",
      "right" : "if (isInlineableDeclaredConstant(v, referenceInfo))",
      "info" : "IfStatement[7241-7821]:IfStatement[7241-7821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7293-7531]:Block[7293-7531]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReferenceForConstants();",
      "right" : "Reference init = referenceInfo.getInitializingReferenceForConstants();",
      "info" : "VariableDeclarationStatement[7305-7375]:VariableDeclarationStatement[7305-7375]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[7386-7423]:VariableDeclarationStatement[7386-7423]"
    }, {
      "left" : "inlineDeclaredConstant(v, value, referenceInfo.references);",
      "right" : "inlineDeclaredConstant(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[7434-7493]:ExpressionStatement[7434-7493]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[7504-7521]:ExpressionStatement[7504-7521]"
    }, {
      "left" : "if (mode == Mode.CONSTANTS_ONLY)",
      "right" : "if (mode == Mode.CONSTANTS_ONLY)",
      "info" : "IfStatement[7537-7821]:IfStatement[7537-7821]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7570-7732]:Block[7570-7732]"
    }, {
      "left" : "continue;",
      "right" : "continue;",
      "info" : "ContinueStatement[7713-7722]:ContinueStatement[7713-7722]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7738-7821]:Block[7738-7821]"
    }, {
      "left" : "inlineNonConstants(v, referenceInfo, maybeModifiedArguments);",
      "right" : "inlineNonConstants(v, referenceInfo, maybeModifiedArguments);",
      "info" : "ExpressionStatement[7750-7811]:ExpressionStatement[7750-7811]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7938-8666]:Block[7938-8666]"
    }, {
      "left" : "if (scope.isLocal())",
      "right" : "if (scope.isLocal())",
      "info" : "IfStatement[7946-8640]:IfStatement[7946-8640]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7967-8640]:Block[7967-8640]"
    }, {
      "left" : "Var arguments = scope.getArgumentsVar();",
      "right" : "Var arguments = scope.getArgumentsVar();",
      "info" : "VariableDeclarationStatement[7977-8017]:VariableDeclarationStatement[7977-8017]"
    }, {
      "left" : "ReferenceCollection refs = referenceMap.getReferences(arguments);",
      "right" : "ReferenceCollection refs = referenceMap.getReferences(arguments);",
      "info" : "VariableDeclarationStatement[8026-8091]:VariableDeclarationStatement[8026-8091]"
    }, {
      "left" : "if (refs != null && !refs.references.isEmpty())",
      "right" : "if (refs != null && !refs.references.isEmpty())",
      "info" : "IfStatement[8100-8632]:IfStatement[8100-8632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8148-8632]:Block[8148-8632]"
    }, {
      "left" : "for (Reference ref : refs.references)",
      "right" : "for (Reference ref : refs.references)",
      "info" : "EnhancedForStatement[8160-8622]:EnhancedForStatement[8160-8622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8198-8622]:Block[8198-8622]"
    }, {
      "left" : "Node refNode = ref.getNode();",
      "right" : "Node refNode = ref.getNode();",
      "info" : "VariableDeclarationStatement[8212-8241]:VariableDeclarationStatement[8212-8241]"
    }, {
      "left" : "Node refParent = ref.getParent();",
      "right" : "Node refParent = ref.getParent();",
      "info" : "VariableDeclarationStatement[8254-8287]:VariableDeclarationStatement[8254-8287]"
    }, {
      "left" : "if (!(NodeUtil.isGet(refParent)\n                && refNode == ref.getParent().getFirstChild()\n                && !isLValue(refParent)))",
      "right" : "if (!(NodeUtil.isGet(refParent)\n                && refNode == ref.getParent().getFirstChild()\n                && !isLValue(refParent)))",
      "info" : "IfStatement[8432-8610]:IfStatement[8432-8610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8568-8610]:Block[8568-8610]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[8584-8596]:ReturnStatement[8584-8596]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[8647-8660]:ReturnStatement[8647-8660]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8705-8894]:Block[8705-8894]"
    }, {
      "left" : "Node parent = n.getParent();",
      "right" : "Node parent = n.getParent();",
      "info" : "VariableDeclarationStatement[8713-8741]:VariableDeclarationStatement[8713-8741]"
    }, {
      "left" : "return (parent.isInc()\n          || parent.isDec()\n          || (NodeUtil.isAssignmentOp(parent)\n          && parent.getFirstChild() == n));",
      "right" : "return (parent.isInc()\n          || parent.isDec()\n          || (NodeUtil.isAssignmentOp(parent)\n          && parent.getFirstChild() == n));",
      "info" : "ReturnStatement[8748-8888]:ReturnStatement[8748-8888]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9023-12057]:Block[9023-12057]"
    }, {
      "left" : "int refCount = referenceInfo.references.size();",
      "right" : "int refCount = referenceInfo.references.size();",
      "info" : "VariableDeclarationStatement[9031-9078]:VariableDeclarationStatement[9031-9078]"
    }, {
      "left" : "Reference declaration = referenceInfo.references.get(0);",
      "right" : "Reference declaration = referenceInfo.references.get(0);",
      "info" : "VariableDeclarationStatement[9085-9141]:VariableDeclarationStatement[9085-9141]"
    }, {
      "left" : "Reference init = referenceInfo.getInitializingReference();",
      "right" : "Reference init = referenceInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[9148-9206]:VariableDeclarationStatement[9148-9206]"
    }, {
      "left" : "int firstRefAfterInit = (declaration == init) ? 2 : 3;",
      "right" : "int firstRefAfterInit = (declaration == init) ? 2 : 3;",
      "info" : "VariableDeclarationStatement[9213-9267]:VariableDeclarationStatement[9213-9267]"
    }, {
      "left" : "if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo))",
      "right" : "if (refCount > 1 &&\n          isImmutableAndWellDefinedVariable(v, referenceInfo))",
      "info" : "IfStatement[9275-10801]:IfStatement[9275-10801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9358-9951]:Block[9358-9951]"
    }, {
      "left" : "Node value;",
      "right" : "Node value;",
      "info" : "VariableDeclarationStatement[9513-9524]:VariableDeclarationStatement[9513-9524]"
    }, {
      "left" : "if (init != null)",
      "right" : "if (init != null)",
      "info" : "IfStatement[9533-9803]:IfStatement[9533-9803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9551-9605]:Block[9551-9605]"
    }, {
      "left" : "value = init.getAssignedValue();",
      "right" : "value = init.getAssignedValue();",
      "info" : "ExpressionStatement[9563-9595]:ExpressionStatement[9563-9595]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9611-9803]:Block[9611-9803]"
    }, {
      "left" : "Node srcLocation = declaration.getNode();",
      "right" : "Node srcLocation = declaration.getNode();",
      "info" : "VariableDeclarationStatement[9694-9735]:VariableDeclarationStatement[9694-9735]"
    }, {
      "left" : "value = NodeUtil.newUndefinedNode(srcLocation);",
      "right" : "value = NodeUtil.newUndefinedNode(srcLocation);",
      "info" : "ExpressionStatement[9746-9793]:ExpressionStatement[9746-9793]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[9812-9846]:ExpressionStatement[9812-9846]"
    }, {
      "left" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "right" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[9855-9917]:ExpressionStatement[9855-9917]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[9926-9943]:ExpressionStatement[9926-9943]"
    }, {
      "left" : "if (refCount == firstRefAfterInit)",
      "right" : "if (refCount == firstRefAfterInit)",
      "info" : "IfStatement[9957-10801]:IfStatement[9957-10801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9992-10342]:Block[9992-10342]"
    }, {
      "left" : "Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);",
      "right" : "Reference reference = referenceInfo.references.get(\n            firstRefAfterInit - 1);",
      "info" : "VariableDeclarationStatement[10103-10190]:VariableDeclarationStatement[10103-10190]"
    }, {
      "left" : "if (canInline(declaration, init, reference))",
      "right" : "if (canInline(declaration, init, reference))",
      "info" : "IfStatement[10199-10334]:IfStatement[10199-10334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10244-10334]:Block[10244-10334]"
    }, {
      "left" : "inline(v, declaration, init, reference);",
      "right" : "inline(v, declaration, init, reference);",
      "info" : "ExpressionStatement[10256-10296]:ExpressionStatement[10256-10296]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[10307-10324]:ExpressionStatement[10307-10324]"
    }, {
      "left" : "if (declaration != init && refCount == 2)",
      "right" : "if (declaration != init && refCount == 2)",
      "info" : "IfStatement[10348-10801]:IfStatement[10348-10801]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10390-10801]:Block[10390-10801]"
    }, {
      "left" : "if (isValidDeclaration(declaration) && isValidInitialization(init))",
      "right" : "if (isValidDeclaration(declaration) && isValidInitialization(init))",
      "info" : "IfStatement[10400-10793]:IfStatement[10400-10793]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10468-10793]:Block[10468-10793]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[10600-10637]:VariableDeclarationStatement[10600-10637]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[10648-10682]:ExpressionStatement[10648-10682]"
    }, {
      "left" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "right" : "inlineWellDefinedVariable(v, value, referenceInfo.references);",
      "info" : "ExpressionStatement[10693-10755]:ExpressionStatement[10693-10755]"
    }, {
      "left" : "staleVars.add(v);",
      "right" : "staleVars.add(v);",
      "info" : "ExpressionStatement[10766-10783]:ExpressionStatement[10766-10783]"
    }, {
      "left" : "if (!maybeModifiedArguments &&\n          !staleVars.contains(v) && referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime())",
      "right" : "if (!maybeModifiedArguments &&\n          !staleVars.contains(v) && referenceInfo.isWellDefined() &&\n          referenceInfo.isAssignedOnceInLifetime())",
      "info" : "IfStatement[11047-12051]:IfStatement[11047-12051]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11199-12051]:Block[11199-12051]"
    }, {
      "left" : "List<Reference> refs = referenceInfo.references;",
      "right" : "List<Reference> refs = referenceInfo.references;",
      "info" : "VariableDeclarationStatement[11209-11257]:VariableDeclarationStatement[11209-11257]"
    }, {
      "left" : "for (int i = 1 /* start from a read */; i < refs.size(); i++)",
      "right" : "for (int i = 1 /* start from a read */; i < refs.size(); i++)",
      "info" : "ForStatement[11266-12043]:ForStatement[11266-12043]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11328-12043]:Block[11328-12043]"
    }, {
      "left" : "Node nameNode = refs.get(i).getNode();",
      "right" : "Node nameNode = refs.get(i).getNode();",
      "info" : "VariableDeclarationStatement[11340-11378]:VariableDeclarationStatement[11340-11378]"
    }, {
      "left" : "if (aliasCandidates.containsKey(nameNode))",
      "right" : "if (aliasCandidates.containsKey(nameNode))",
      "info" : "IfStatement[11389-12033]:IfStatement[11389-12033]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11432-12033]:Block[11432-12033]"
    }, {
      "left" : "AliasCandidate candidate = aliasCandidates.get(nameNode);",
      "right" : "AliasCandidate candidate = aliasCandidates.get(nameNode);",
      "info" : "VariableDeclarationStatement[11446-11503]:VariableDeclarationStatement[11446-11503]"
    }, {
      "left" : "if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias))",
      "right" : "if (!staleVars.contains(candidate.alias) &&\n                !isVarInlineForbidden(candidate.alias))",
      "info" : "IfStatement[11516-12021]:IfStatement[11516-12021]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11616-12021]:Block[11616-12021]"
    }, {
      "left" : "Reference aliasInit;",
      "right" : "Reference aliasInit;",
      "info" : "VariableDeclarationStatement[11632-11652]:VariableDeclarationStatement[11632-11652]"
    }, {
      "left" : "aliasInit = candidate.refInfo.getInitializingReference();",
      "right" : "aliasInit = candidate.refInfo.getInitializingReference();",
      "info" : "ExpressionStatement[11667-11724]:ExpressionStatement[11667-11724]"
    }, {
      "left" : "Node value = aliasInit.getAssignedValue();",
      "right" : "Node value = aliasInit.getAssignedValue();",
      "info" : "VariableDeclarationStatement[11739-11781]:VariableDeclarationStatement[11739-11781]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[11796-11830]:ExpressionStatement[11796-11830]"
    }, {
      "left" : "inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);",
      "right" : "inlineWellDefinedVariable(candidate.alias,\n                  value,\n                  candidate.refInfo.references);",
      "info" : "ExpressionStatement[11845-11961]:ExpressionStatement[11845-11961]"
    }, {
      "left" : "staleVars.add(candidate.alias);",
      "right" : "staleVars.add(candidate.alias);",
      "info" : "ExpressionStatement[11976-12007]:ExpressionStatement[11976-12007]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12291-12517]:Block[12291-12517]"
    }, {
      "left" : "for (Node c = root.getFirstChild(); c != null; c = c.getNext())",
      "right" : "for (Node c = root.getFirstChild(); c != null; c = c.getNext())",
      "info" : "ForStatement[12299-12420]:ForStatement[12299-12420]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12363-12420]:Block[12363-12420]"
    }, {
      "left" : "blacklistVarReferencesInTree(c, scope);",
      "right" : "blacklistVarReferencesInTree(c, scope);",
      "info" : "ExpressionStatement[12373-12412]:ExpressionStatement[12373-12412]"
    }, {
      "left" : "if (root.isName())",
      "right" : "if (root.isName())",
      "info" : "IfStatement[12428-12511]:IfStatement[12428-12511]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12447-12511]:Block[12447-12511]"
    }, {
      "left" : "staleVars.add(scope.getVar(root.getString()));",
      "right" : "staleVars.add(scope.getVar(root.getString()));",
      "info" : "ExpressionStatement[12457-12503]:ExpressionStatement[12457-12503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12652-13235]:Block[12652-13235]"
    }, {
      "left" : "return var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "right" : "return var.isExtern()\n          || compiler.getCodingConvention().isExported(var.name)\n          || RenameProperties.RENAME_PROPERTY_FUNCTION_NAME.equals(var.name)\n          || staleVars.contains(var);",
      "info" : "ReturnStatement[13028-13229]:ReturnStatement[13028-13229]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13459-14189]:Block[13459-14189]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[13467-13504]:VariableDeclarationStatement[13467-13504]"
    }, {
      "left" : "Preconditions.checkState(value != null);",
      "right" : "Preconditions.checkState(value != null);",
      "info" : "ExpressionStatement[13511-13551]:ExpressionStatement[13511-13551]"
    }, {
      "left" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);",
      "right" : "boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(value);",
      "info" : "VariableDeclarationStatement[13637-13707]:VariableDeclarationStatement[13637-13707]"
    }, {
      "left" : "inlineValue(v, reference, value.detachFromParent());",
      "right" : "inlineValue(v, reference, value.detachFromParent());",
      "info" : "ExpressionStatement[13715-13767]:ExpressionStatement[13715-13767]"
    }, {
      "left" : "if (declaration != init)",
      "right" : "if (declaration != init)",
      "info" : "IfStatement[13774-13988]:IfStatement[13774-13988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13799-13988]:Block[13799-13988]"
    }, {
      "left" : "Node expressRoot = init.getGrandparent();",
      "right" : "Node expressRoot = init.getGrandparent();",
      "info" : "VariableDeclarationStatement[13809-13850]:VariableDeclarationStatement[13809-13850]"
    }, {
      "left" : "Preconditions.checkState(expressRoot.isExprResult());",
      "right" : "Preconditions.checkState(expressRoot.isExprResult());",
      "info" : "ExpressionStatement[13859-13912]:ExpressionStatement[13859-13912]"
    }, {
      "left" : "NodeUtil.removeChild(expressRoot.getParent(), expressRoot);",
      "right" : "NodeUtil.removeChild(expressRoot.getParent(), expressRoot);",
      "info" : "ExpressionStatement[13921-13980]:ExpressionStatement[13921-13980]"
    }, {
      "left" : "if (!isFunctionDeclaration)",
      "right" : "if (!isFunctionDeclaration)",
      "info" : "IfStatement[14054-14183]:IfStatement[14054-14183]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14082-14131]:Block[14082-14131]"
    }, {
      "left" : "removeDeclaration(declaration);",
      "right" : "removeDeclaration(declaration);",
      "info" : "ExpressionStatement[14092-14123]:ExpressionStatement[14092-14123]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14137-14183]:Block[14137-14183]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[14147-14175]:ExpressionStatement[14147-14175]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14365-14555]:Block[14365-14555]"
    }, {
      "left" : "Reference decl = refSet.get(0);",
      "right" : "Reference decl = refSet.get(0);",
      "info" : "VariableDeclarationStatement[14373-14404]:VariableDeclarationStatement[14373-14404]"
    }, {
      "left" : "for (int i = 1; i < refSet.size(); i++)",
      "right" : "for (int i = 1; i < refSet.size(); i++)",
      "info" : "ForStatement[14411-14518]:ForStatement[14411-14518]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14451-14518]:Block[14451-14518]"
    }, {
      "left" : "inlineValue(v, refSet.get(i), value.cloneTree());",
      "right" : "inlineValue(v, refSet.get(i), value.cloneTree());",
      "info" : "ExpressionStatement[14461-14510]:ExpressionStatement[14461-14510]"
    }, {
      "left" : "removeDeclaration(decl);",
      "right" : "removeDeclaration(decl);",
      "info" : "ExpressionStatement[14525-14549]:ExpressionStatement[14525-14549]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14699-15008]:Block[14699-15008]"
    }, {
      "left" : "Reference decl = null;",
      "right" : "Reference decl = null;",
      "info" : "VariableDeclarationStatement[14763-14785]:VariableDeclarationStatement[14763-14785]"
    }, {
      "left" : "for (Reference r : refSet)",
      "right" : "for (Reference r : refSet)",
      "info" : "EnhancedForStatement[14793-14970]:EnhancedForStatement[14793-14970]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14820-14970]:Block[14820-14970]"
    }, {
      "left" : "if (r.getNode() == v.getNameNode())",
      "right" : "if (r.getNode() == v.getNameNode())",
      "info" : "IfStatement[14830-14962]:IfStatement[14830-14962]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14866-14897]:Block[14866-14897]"
    }, {
      "left" : "decl = r;",
      "right" : "decl = r;",
      "info" : "ExpressionStatement[14878-14887]:ExpressionStatement[14878-14887]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14903-14962]:Block[14903-14962]"
    }, {
      "left" : "inlineValue(v, r, value.cloneTree());",
      "right" : "inlineValue(v, r, value.cloneTree());",
      "info" : "ExpressionStatement[14915-14952]:ExpressionStatement[14915-14952]"
    }, {
      "left" : "removeDeclaration(decl);",
      "right" : "removeDeclaration(decl);",
      "info" : "ExpressionStatement[14978-15002]:ExpressionStatement[14978-15002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15125-15502]:Block[15125-15502]"
    }, {
      "left" : "Node varNode = declaration.getParent();",
      "right" : "Node varNode = declaration.getParent();",
      "info" : "VariableDeclarationStatement[15133-15172]:VariableDeclarationStatement[15133-15172]"
    }, {
      "left" : "Node grandparent = declaration.getGrandparent();",
      "right" : "Node grandparent = declaration.getGrandparent();",
      "info" : "VariableDeclarationStatement[15179-15227]:VariableDeclarationStatement[15179-15227]"
    }, {
      "left" : "varNode.removeChild(declaration.getNode());",
      "right" : "varNode.removeChild(declaration.getNode());",
      "info" : "ExpressionStatement[15235-15278]:ExpressionStatement[15235-15278]"
    }, {
      "left" : "if (!varNode.hasChildren())",
      "right" : "if (!varNode.hasChildren())",
      "info" : "IfStatement[15320-15460]:IfStatement[15320-15460]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15348-15460]:Block[15348-15460]"
    }, {
      "left" : "Preconditions.checkState(varNode.isVar());",
      "right" : "Preconditions.checkState(varNode.isVar());",
      "info" : "ExpressionStatement[15358-15400]:ExpressionStatement[15358-15400]"
    }, {
      "left" : "NodeUtil.removeChild(grandparent, varNode);",
      "right" : "NodeUtil.removeChild(grandparent, varNode);",
      "info" : "ExpressionStatement[15409-15452]:ExpressionStatement[15409-15452]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[15468-15496]:ExpressionStatement[15468-15496]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15848-16180]:Block[15848-16180]"
    }, {
      "left" : "if (ref.isSimpleAssignmentToName())",
      "right" : "if (ref.isSimpleAssignmentToName())",
      "info" : "IfStatement[15856-16086]:IfStatement[15856-16086]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15892-16011]:Block[15892-16011]"
    }, {
      "left" : "ref.getGrandparent().replaceChild(ref.getParent(), value);",
      "right" : "ref.getGrandparent().replaceChild(ref.getParent(), value);",
      "info" : "ExpressionStatement[15945-16003]:ExpressionStatement[15945-16003]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16017-16086]:Block[16017-16086]"
    }, {
      "left" : "ref.getParent().replaceChild(ref.getNode(), value);",
      "right" : "ref.getParent().replaceChild(ref.getNode(), value);",
      "info" : "ExpressionStatement[16027-16078]:ExpressionStatement[16027-16078]"
    }, {
      "left" : "blacklistVarReferencesInTree(value, v.scope);",
      "right" : "blacklistVarReferencesInTree(value, v.scope);",
      "info" : "ExpressionStatement[16094-16139]:ExpressionStatement[16094-16139]"
    }, {
      "left" : "compiler.reportCodeChange();",
      "right" : "compiler.reportCodeChange();",
      "info" : "ExpressionStatement[16146-16174]:ExpressionStatement[16146-16174]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16391-17272]:Block[16391-17272]"
    }, {
      "left" : "if (!identifyConstants.apply(var))",
      "right" : "if (!identifyConstants.apply(var))",
      "info" : "IfStatement[16399-16465]:IfStatement[16399-16465]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16434-16465]:Block[16434-16465]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16444-16457]:ReturnStatement[16444-16457]"
    }, {
      "left" : "if (!refInfo.isAssignedOnceInLifetime())",
      "right" : "if (!refInfo.isAssignedOnceInLifetime())",
      "info" : "IfStatement[16473-16545]:IfStatement[16473-16545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16514-16545]:Block[16514-16545]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16524-16537]:ReturnStatement[16524-16537]"
    }, {
      "left" : "Reference init = refInfo.getInitializingReferenceForConstants();",
      "right" : "Reference init = refInfo.getInitializingReferenceForConstants();",
      "info" : "VariableDeclarationStatement[16553-16617]:VariableDeclarationStatement[16553-16617]"
    }, {
      "left" : "if (init == null)",
      "right" : "if (init == null)",
      "info" : "IfStatement[16624-16673]:IfStatement[16624-16673]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16642-16673]:Block[16642-16673]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16652-16665]:ReturnStatement[16652-16665]"
    }, {
      "left" : "Node value = init.getAssignedValue();",
      "right" : "Node value = init.getAssignedValue();",
      "info" : "VariableDeclarationStatement[16681-16718]:VariableDeclarationStatement[16681-16718]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[16725-16988]:IfStatement[16725-16988]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16744-16988]:Block[16744-16988]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[16967-16980]:ReturnStatement[16967-16980]"
    }, {
      "left" : "if (!NodeUtil.isImmutableValue(value))",
      "right" : "if (!NodeUtil.isImmutableValue(value))",
      "info" : "IfStatement[17040-17110]:IfStatement[17040-17110]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17079-17110]:Block[17079-17110]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[17089-17102]:ReturnStatement[17089-17102]"
    }, {
      "left" : "return !value.isString() ||\n          isStringWorthInlining(var, refInfo.references);",
      "right" : "return !value.isString() ||\n          isStringWorthInlining(var, refInfo.references);",
      "info" : "ReturnStatement[17181-17266]:ReturnStatement[17181-17266]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17422-18340]:Block[17422-18340]"
    }, {
      "left" : "if (!inlineAllStrings && !var.isDefine())",
      "right" : "if (!inlineAllStrings && !var.isDefine())",
      "info" : "IfStatement[17430-18314]:IfStatement[17430-18314]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17472-18314]:Block[17472-18314]"
    }, {
      "left" : "int len = var.getInitialValue().getString().length() + \"''\".length();",
      "right" : "int len = var.getInitialValue().getString().length() + \"''\".length();",
      "info" : "VariableDeclarationStatement[17482-17551]:VariableDeclarationStatement[17482-17551]"
    }, {
      "left" : "int noInlineBytes = \"var xx=;\".length() + len +\n                            4 * (refs.size() - 1);",
      "right" : "int noInlineBytes = \"var xx=;\".length() + len +\n                            4 * (refs.size() - 1);",
      "info" : "VariableDeclarationStatement[17803-17901]:VariableDeclarationStatement[17803-17901]"
    }, {
      "left" : "int inlineBytes = (len - 1) * (refs.size() - 1);",
      "right" : "int inlineBytes = (len - 1) * (refs.size() - 1);",
      "info" : "VariableDeclarationStatement[18113-18161]:VariableDeclarationStatement[18113-18161]"
    }, {
      "left" : "return noInlineBytes >= inlineBytes;",
      "right" : "return noInlineBytes >= inlineBytes;",
      "info" : "ReturnStatement[18270-18306]:ReturnStatement[18270-18306]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[18322-18334]:ReturnStatement[18322-18334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20882-21075]:Block[20994-21187]"
    }, {
      "left" : "return NodeUtil.isLiteralValue(value, true)\n          || value.isFunction();",
      "right" : "return NodeUtil.isLiteralValue(value, true)\n          || value.isFunction();",
      "info" : "ReturnStatement[20993-21069]:ReturnStatement[21105-21181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21413-22623]:Block[21525-22735]"
    }, {
      "left" : "Iterator<Node> it;",
      "right" : "Iterator<Node> it;",
      "info" : "VariableDeclarationStatement[21522-21540]:VariableDeclarationStatement[21634-21652]"
    }, {
      "left" : "if (initialization.getParent().isVar())",
      "right" : "if (initialization.getParent().isVar())",
      "info" : "IfStatement[21547-22410]:IfStatement[21659-22522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21587-21812]:Block[21699-21924]"
    }, {
      "left" : "it = NodeIterators.LocalVarMotion.forVar(\n            initialization.getNode(),     // NAME\n            initialization.getParent(),       // VAR\n            initialization.getGrandparent());",
      "right" : "it = NodeIterators.LocalVarMotion.forVar(\n            initialization.getNode(),     // NAME\n            initialization.getParent(),       // VAR\n            initialization.getGrandparent());",
      "info" : "ExpressionStatement[21597-21787]:ExpressionStatement[21709-21899]"
    }, {
      "left" : "if (initialization.getParent().isAssign())",
      "right" : "if (initialization.getParent().isAssign())",
      "info" : "IfStatement[21818-22410]:IfStatement[21930-22522]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21861-22261]:Block[21973-22373]"
    }, {
      "left" : "Preconditions.checkState(\n            initialization.getGrandparent().isExprResult());",
      "right" : "Preconditions.checkState(\n            initialization.getGrandparent().isExprResult());",
      "info" : "ExpressionStatement[21871-21957]:ExpressionStatement[21983-22069]"
    }, {
      "left" : "it = NodeIterators.LocalVarMotion.forAssign(\n            initialization.getNode(),     // NAME\n            initialization.getParent(),       // ASSIGN\n            initialization.getGrandparent(),  // EXPR_RESULT\n            initialization.getGrandparent().getParent());",
      "right" : "it = NodeIterators.LocalVarMotion.forAssign(\n            initialization.getNode(),     // NAME\n            initialization.getParent(),       // ASSIGN\n            initialization.getGrandparent(),  // EXPR_RESULT\n            initialization.getGrandparent().getParent());",
      "info" : "ExpressionStatement[21966-22235]:ExpressionStatement[22078-22347]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22267-22410]:Block[22379-22522]"
    }, {
      "left" : "throw new IllegalStateException(\"Unexpected initialization parent \" +\n            initialization.getParent().toStringTree());",
      "right" : "throw new IllegalStateException(\"Unexpected initialization parent \" +\n            initialization.getParent().toStringTree());",
      "info" : "ThrowStatement[22277-22402]:ThrowStatement[22389-22514]"
    }, {
      "left" : "Node targetName = reference.getNode();",
      "right" : "Node targetName = reference.getNode();",
      "info" : "VariableDeclarationStatement[22417-22455]:VariableDeclarationStatement[22529-22567]"
    }, {
      "left" : "while (it.hasNext())",
      "right" : "while (it.hasNext())",
      "info" : "WhileStatement[22462-22596]:WhileStatement[22574-22708]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22483-22596]:Block[22595-22708]"
    }, {
      "left" : "Node curNode = it.next();",
      "right" : "Node curNode = it.next();",
      "info" : "VariableDeclarationStatement[22493-22518]:VariableDeclarationStatement[22605-22630]"
    }, {
      "left" : "if (curNode == targetName)",
      "right" : "if (curNode == targetName)",
      "info" : "IfStatement[22527-22588]:IfStatement[22639-22700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22554-22588]:Block[22666-22700]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[22566-22578]:ReturnStatement[22678-22690]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[22604-22617]:ReturnStatement[22716-22729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22781-22956]:Block[22893-23068]"
    }, {
      "left" : "return (declaration.getParent().isVar()\n          && !declaration.getGrandparent().isFor())\n          || NodeUtil.isFunctionDeclaration(declaration.getParent());",
      "right" : "return (declaration.getParent().isVar()\n          && !declaration.getGrandparent().isFor())\n          || NodeUtil.isFunctionDeclaration(declaration.getParent());",
      "info" : "ReturnStatement[22789-22950]:ReturnStatement[22901-23062]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23091-23674]:Block[23203-23786]"
    }, {
      "left" : "if (initialization == null)",
      "right" : "if (initialization == null)",
      "info" : "IfStatement[23099-23668]:IfStatement[23211-23780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23127-23158]:Block[23239-23270]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[23137-23150]:ReturnStatement[23249-23262]"
    }, {
      "left" : "if (initialization.isDeclaration())",
      "right" : "if (initialization.isDeclaration())",
      "info" : "IfStatement[23164-23668]:IfStatement[23276-23780]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23200-23450]:Block[23312-23562]"
    }, {
      "left" : "return NodeUtil.isFunctionDeclaration(initialization.getParent())\n            || initialization.getNode().getFirstChild() != null;",
      "right" : "return NodeUtil.isFunctionDeclaration(initialization.getParent())\n            || initialization.getNode().getFirstChild() != null;",
      "info" : "ReturnStatement[23312-23442]:ReturnStatement[23424-23554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23456-23668]:Block[23568-23780]"
    }, {
      "left" : "Node parent = initialization.getParent();",
      "right" : "Node parent = initialization.getParent();",
      "info" : "VariableDeclarationStatement[23466-23507]:VariableDeclarationStatement[23578-23619]"
    }, {
      "left" : "Preconditions.checkState(\n            parent.isAssign()\n            && parent.getFirstChild() == initialization.getNode());",
      "right" : "Preconditions.checkState(\n            parent.isAssign()\n            && parent.getFirstChild() == initialization.getNode());",
      "info" : "ExpressionStatement[23516-23639]:ExpressionStatement[23628-23751]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[23648-23660]:ReturnStatement[23760-23772]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23815-23888]:Block[23927-24000]"
    }, {
      "left" : "return !reference.isDeclaration() && !reference.isLvalue();",
      "right" : "return !reference.isDeclaration() && !reference.isLvalue();",
      "info" : "ReturnStatement[23823-23882]:ReturnStatement[23935-23994]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24185-25634]:Block[24297-25746]"
    }, {
      "left" : "List<Reference> refSet = refInfo.references;",
      "right" : "List<Reference> refSet = refInfo.references;",
      "info" : "VariableDeclarationStatement[24193-24237]:VariableDeclarationStatement[24305-24349]"
    }, {
      "left" : "int startingReadRef = 1;",
      "right" : "int startingReadRef = 1;",
      "info" : "VariableDeclarationStatement[24244-24268]:VariableDeclarationStatement[24356-24380]"
    }, {
      "left" : "Reference refDecl = refSet.get(0);",
      "right" : "Reference refDecl = refSet.get(0);",
      "info" : "VariableDeclarationStatement[24275-24309]:VariableDeclarationStatement[24387-24421]"
    }, {
      "left" : "if (!isValidDeclaration(refDecl))",
      "right" : "if (!isValidDeclaration(refDecl))",
      "info" : "IfStatement[24316-24381]:IfStatement[24428-24493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24350-24381]:Block[24462-24493]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24360-24373]:ReturnStatement[24472-24485]"
    }, {
      "left" : "boolean isNeverAssigned = refInfo.isNeverAssigned();",
      "right" : "boolean isNeverAssigned = refInfo.isNeverAssigned();",
      "info" : "VariableDeclarationStatement[24389-24441]:VariableDeclarationStatement[24501-24553]"
    }, {
      "left" : "if (!isNeverAssigned)",
      "right" : "if (!isNeverAssigned)",
      "info" : "IfStatement[24542-25426]:IfStatement[24654-25538]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24564-25426]:Block[24676-25538]"
    }, {
      "left" : "Reference refInit = refInfo.getInitializingReference();",
      "right" : "Reference refInit = refInfo.getInitializingReference();",
      "info" : "VariableDeclarationStatement[24574-24629]:VariableDeclarationStatement[24686-24741]"
    }, {
      "left" : "if (!isValidInitialization(refInit))",
      "right" : "if (!isValidInitialization(refInit))",
      "info" : "IfStatement[24638-24710]:IfStatement[24750-24822]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24675-24710]:Block[24787-24822]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24687-24700]:ReturnStatement[24799-24812]"
    }, {
      "left" : "if (refDecl != refInit)",
      "right" : "if (refDecl != refInit)",
      "info" : "IfStatement[24720-24848]:IfStatement[24832-24960]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24744-24848]:Block[24856-24960]"
    }, {
      "left" : "Preconditions.checkState(refInit == refSet.get(1));",
      "right" : "Preconditions.checkState(refInit == refSet.get(1));",
      "info" : "ExpressionStatement[24756-24807]:ExpressionStatement[24868-24919]"
    }, {
      "left" : "startingReadRef = 2;",
      "right" : "startingReadRef = 2;",
      "info" : "ExpressionStatement[24818-24838]:ExpressionStatement[24930-24950]"
    }, {
      "left" : "if (!refInfo.isWellDefined())",
      "right" : "if (!refInfo.isWellDefined())",
      "info" : "IfStatement[24858-24923]:IfStatement[24970-25035]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24888-24923]:Block[25000-25035]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[24900-24913]:ReturnStatement[25012-25025]"
    }, {
      "left" : "Node value = refInit.getAssignedValue();",
      "right" : "Node value = refInit.getAssignedValue();",
      "info" : "VariableDeclarationStatement[24933-24973]:VariableDeclarationStatement[25045-25085]"
    }, {
      "left" : "Preconditions.checkNotNull(value);",
      "right" : "Preconditions.checkNotNull(value);",
      "info" : "ExpressionStatement[24982-25016]:ExpressionStatement[25094-25128]"
    }, {
      "left" : "boolean isImmutableValueWorthInlining =\n            NodeUtil.isImmutableValue(value) &&\n            (!value.isString() ||\n                isStringWorthInlining(v, refInfo.references));",
      "right" : "boolean isImmutableValueWorthInlining =\n            NodeUtil.isImmutableValue(value) &&\n            (!value.isString() ||\n                isStringWorthInlining(v, refInfo.references));",
      "info" : "VariableDeclarationStatement[25026-25210]:VariableDeclarationStatement[25138-25322]"
    }, {
      "left" : "boolean isInlinableThisAlias =\n            value.isThis() &&\n            !refInfo.isEscaped();",
      "right" : "boolean isInlinableThisAlias =\n            value.isThis() &&\n            !refInfo.isEscaped();",
      "info" : "VariableDeclarationStatement[25219-25313]:VariableDeclarationStatement[25331-25425]"
    }, {
      "left" : "if (!isImmutableValueWorthInlining && !isInlinableThisAlias)",
      "right" : "if (!isImmutableValueWorthInlining && !isInlinableThisAlias)",
      "info" : "IfStatement[25322-25418]:IfStatement[25434-25530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25383-25418]:Block[25495-25530]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25395-25408]:ReturnStatement[25507-25520]"
    }, {
      "left" : "for (int i = startingReadRef; i < refSet.size(); i++)",
      "right" : "for (int i = startingReadRef; i < refSet.size(); i++)",
      "info" : "ForStatement[25434-25608]:ForStatement[25546-25720]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25488-25608]:Block[25600-25720]"
    }, {
      "left" : "Reference ref = refSet.get(i);",
      "right" : "Reference ref = refSet.get(i);",
      "info" : "VariableDeclarationStatement[25498-25528]:VariableDeclarationStatement[25610-25640]"
    }, {
      "left" : "if (!isValidReference(ref))",
      "right" : "if (!isValidReference(ref))",
      "info" : "IfStatement[25537-25600]:IfStatement[25649-25712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25565-25600]:Block[25677-25712]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[25577-25590]:ReturnStatement[25689-25702]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[25616-25628]:ReturnStatement[25728-25740]"
    } ]
  },
  "interFileMappings" : { }
}