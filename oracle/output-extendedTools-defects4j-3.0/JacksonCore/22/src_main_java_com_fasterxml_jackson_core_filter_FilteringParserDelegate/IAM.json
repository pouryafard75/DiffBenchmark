{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "FilteringParserDelegate",
      "right" : "FilteringParserDelegate",
      "info" : "TypeDeclaration[314-34404]:TypeDeclaration[314-34938]"
    }, {
      "left" : "protected TokenFilter rootFilter;",
      "right" : "protected TokenFilter rootFilter;",
      "info" : "FieldDeclaration[727-890]:FieldDeclaration[727-890]"
    }, {
      "left" : "protected boolean _allowMultipleMatches;",
      "right" : "protected boolean _allowMultipleMatches;",
      "info" : "FieldDeclaration[896-1289]:FieldDeclaration[896-1289]"
    }, {
      "left" : "protected boolean _includePath;",
      "right" : "protected boolean _includePath;",
      "info" : "FieldDeclaration[1295-1649]:FieldDeclaration[1295-1649]"
    }, {
      "left" : "@Deprecated\n    protected boolean _includeImmediateParent;",
      "right" : "@Deprecated\n    protected boolean _includeImmediateParent;",
      "info" : "FieldDeclaration[2053-2111]:FieldDeclaration[2053-2111]"
    }, {
      "left" : "protected JsonToken _currToken;",
      "right" : "protected JsonToken _currToken;",
      "info" : "FieldDeclaration[2278-2503]:FieldDeclaration[2278-2503]"
    }, {
      "left" : "protected JsonToken _lastClearedToken;",
      "right" : "protected JsonToken _lastClearedToken;",
      "info" : "FieldDeclaration[2509-2683]:FieldDeclaration[2509-2683]"
    }, {
      "left" : "protected TokenFilterContext _headContext;",
      "right" : "protected TokenFilterContext _headContext;",
      "info" : "FieldDeclaration[2693-2957]:FieldDeclaration[2693-2957]"
    }, {
      "left" : "protected TokenFilterContext _exposedContext;",
      "right" : "protected TokenFilterContext _exposedContext;",
      "info" : "FieldDeclaration[2963-3259]:FieldDeclaration[2963-3259]"
    }, {
      "left" : "protected TokenFilter _itemFilter;",
      "right" : "protected TokenFilter _itemFilter;",
      "info" : "FieldDeclaration[3265-3520]:FieldDeclaration[3265-3520]"
    }, {
      "left" : "protected int _matchCount;",
      "right" : "protected int _matchCount;",
      "info" : "FieldDeclaration[3530-3664]:FieldDeclaration[3530-3664]"
    }, {
      "left" : "public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)",
      "right" : "public FilteringParserDelegate(JsonParser p, TokenFilter f,\n            boolean includePath, boolean allowMultipleMatches)",
      "info" : "MethodDeclaration[3850-4272]:MethodDeclaration[3850-4272]"
    }, {
      "left" : "public TokenFilter getFilter()",
      "right" : "public TokenFilter getFilter()",
      "info" : "MethodDeclaration[4442-4495]:MethodDeclaration[4442-4495]"
    }, {
      "left" : "public int getMatchCount()",
      "right" : "public int getMatchCount()",
      "info" : "MethodDeclaration[4501-4709]:MethodDeclaration[4501-4709]"
    }, {
      "left" : "public JsonToken getCurrentToken()",
      "right" : "public JsonToken getCurrentToken()",
      "info" : "MethodDeclaration[4894-4961]:MethodDeclaration[4894-4961]"
    }, {
      "left" : "public JsonToken currentToken()",
      "right" : "public JsonToken currentToken()",
      "info" : "MethodDeclaration[4966-5030]:MethodDeclaration[4966-5030]"
    }, {
      "left" : "public final int getCurrentTokenId()",
      "right" : "public final int getCurrentTokenId()",
      "info" : "MethodDeclaration[5036-5193]:MethodDeclaration[5036-5193]"
    }, {
      "left" : "public final int currentTokenId()",
      "right" : "public final int currentTokenId()",
      "info" : "MethodDeclaration[5198-5352]:MethodDeclaration[5198-5352]"
    }, {
      "left" : "public boolean hasCurrentToken()",
      "right" : "public boolean hasCurrentToken()",
      "info" : "MethodDeclaration[5358-5431]:MethodDeclaration[5358-5431]"
    }, {
      "left" : "public boolean hasTokenId(int id)",
      "right" : "public boolean hasTokenId(int id)",
      "info" : "MethodDeclaration[5436-5643]:MethodDeclaration[5436-5643]"
    }, {
      "left" : "public final boolean hasToken(JsonToken t)",
      "right" : "public final boolean hasToken(JsonToken t)",
      "info" : "MethodDeclaration[5649-5743]:MethodDeclaration[5649-5743]"
    }, {
      "left" : "public boolean isExpectedStartArrayToken()",
      "right" : "public boolean isExpectedStartArrayToken()",
      "info" : "MethodDeclaration[5753-5853]:MethodDeclaration[5753-5853]"
    }, {
      "left" : "public boolean isExpectedStartObjectToken()",
      "right" : "public boolean isExpectedStartObjectToken()",
      "info" : "MethodDeclaration[5858-5960]:MethodDeclaration[5858-5960]"
    }, {
      "left" : "public JsonLocation getCurrentLocation()",
      "right" : "public JsonLocation getCurrentLocation()",
      "info" : "MethodDeclaration[5966-6058]:MethodDeclaration[5966-6058]"
    }, {
      "left" : "public JsonStreamContext getParsingContext()",
      "right" : "public JsonStreamContext getParsingContext()",
      "info" : "MethodDeclaration[6064-6163]:MethodDeclaration[6064-6163]"
    }, {
      "left" : "public String getCurrentName() throws IOException",
      "right" : "public String getCurrentName() throws IOException",
      "info" : "MethodDeclaration[6257-6645]:MethodDeclaration[6257-6645]"
    }, {
      "left" : "public void clearCurrentToken()",
      "right" : "public void clearCurrentToken()",
      "info" : "MethodDeclaration[6836-7008]:MethodDeclaration[6836-7008]"
    }, {
      "left" : "public JsonToken getLastClearedToken()",
      "right" : "public JsonToken getLastClearedToken()",
      "info" : "MethodDeclaration[7014-7096]:MethodDeclaration[7014-7096]"
    }, {
      "left" : "public void overrideCurrentName(String name)",
      "right" : "public void overrideCurrentName(String name)",
      "info" : "MethodDeclaration[7102-7485]:MethodDeclaration[7102-7485]"
    }, {
      "left" : "public JsonToken nextToken() throws IOException",
      "right" : "public JsonToken nextToken() throws IOException",
      "info" : "MethodDeclaration[7664-16221]:MethodDeclaration[7664-16321]"
    }, {
      "left" : "protected final JsonToken _nextToken2() throws IOException",
      "right" : "protected final JsonToken _nextToken2() throws IOException",
      "info" : "MethodDeclaration[16227-22411]:MethodDeclaration[16327-22619]"
    }, {
      "left" : "protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException",
      "right" : "protected final JsonToken _nextTokenWithBuffering(final TokenFilterContext buffRoot)\n        throws IOException",
      "info" : "MethodDeclaration[22417-27638]:MethodDeclaration[22625-27954]"
    }, {
      "left" : "private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException",
      "right" : "private JsonToken _nextBuffered(TokenFilterContext buffRoot) throws IOException",
      "info" : "MethodDeclaration[27644-28679]:MethodDeclaration[27960-28995]"
    }, {
      "left" : "public JsonToken nextValue() throws IOException",
      "right" : "public JsonToken nextValue() throws IOException",
      "info" : "MethodDeclaration[28686-28941]:MethodDeclaration[29220-29475]"
    }, {
      "left" : "public JsonParser skipChildren() throws IOException",
      "right" : "public JsonParser skipChildren() throws IOException",
      "info" : "MethodDeclaration[28947-29891]:MethodDeclaration[29481-30425]"
    }, {
      "left" : "public String getText() throws IOException",
      "right" : "public String getText() throws IOException",
      "info" : "MethodDeclaration[30098-30182]:MethodDeclaration[30632-30716]"
    }, {
      "left" : "public boolean hasTextCharacters()",
      "right" : "public boolean hasTextCharacters()",
      "info" : "MethodDeclaration[30187-30272]:MethodDeclaration[30721-30806]"
    }, {
      "left" : "public char[] getTextCharacters() throws IOException",
      "right" : "public char[] getTextCharacters() throws IOException",
      "info" : "MethodDeclaration[30277-30380]:MethodDeclaration[30811-30914]"
    }, {
      "left" : "public int getTextLength() throws IOException",
      "right" : "public int getTextLength() throws IOException",
      "info" : "MethodDeclaration[30385-30477]:MethodDeclaration[30919-31011]"
    }, {
      "left" : "public int getTextOffset() throws IOException",
      "right" : "public int getTextOffset() throws IOException",
      "info" : "MethodDeclaration[30482-30574]:MethodDeclaration[31016-31108]"
    }, {
      "left" : "public BigInteger getBigIntegerValue() throws IOException",
      "right" : "public BigInteger getBigIntegerValue() throws IOException",
      "info" : "MethodDeclaration[30784-30897]:MethodDeclaration[31318-31431]"
    }, {
      "left" : "public boolean getBooleanValue() throws IOException",
      "right" : "public boolean getBooleanValue() throws IOException",
      "info" : "MethodDeclaration[30903-31007]:MethodDeclaration[31437-31541]"
    }, {
      "left" : "public byte getByteValue() throws IOException",
      "right" : "public byte getByteValue() throws IOException",
      "info" : "MethodDeclaration[31017-31112]:MethodDeclaration[31551-31646]"
    }, {
      "left" : "public short getShortValue() throws IOException",
      "right" : "public short getShortValue() throws IOException",
      "info" : "MethodDeclaration[31118-31216]:MethodDeclaration[31652-31750]"
    }, {
      "left" : "public BigDecimal getDecimalValue() throws IOException",
      "right" : "public BigDecimal getDecimalValue() throws IOException",
      "info" : "MethodDeclaration[31222-31329]:MethodDeclaration[31756-31863]"
    }, {
      "left" : "public double getDoubleValue() throws IOException",
      "right" : "public double getDoubleValue() throws IOException",
      "info" : "MethodDeclaration[31335-31436]:MethodDeclaration[31869-31970]"
    }, {
      "left" : "public float getFloatValue() throws IOException",
      "right" : "public float getFloatValue() throws IOException",
      "info" : "MethodDeclaration[31442-31540]:MethodDeclaration[31976-32074]"
    }, {
      "left" : "public int getIntValue() throws IOException",
      "right" : "public int getIntValue() throws IOException",
      "info" : "MethodDeclaration[31546-31638]:MethodDeclaration[32080-32172]"
    }, {
      "left" : "public long getLongValue() throws IOException",
      "right" : "public long getLongValue() throws IOException",
      "info" : "MethodDeclaration[31644-31739]:MethodDeclaration[32178-32273]"
    }, {
      "left" : "public NumberType getNumberType() throws IOException",
      "right" : "public NumberType getNumberType() throws IOException",
      "info" : "MethodDeclaration[31745-31848]:MethodDeclaration[32279-32382]"
    }, {
      "left" : "public Number getNumberValue() throws IOException",
      "right" : "public Number getNumberValue() throws IOException",
      "info" : "MethodDeclaration[31854-31955]:MethodDeclaration[32388-32489]"
    }, {
      "left" : "public int getValueAsInt() throws IOException",
      "right" : "public int getValueAsInt() throws IOException",
      "info" : "MethodDeclaration[32177-32269]:MethodDeclaration[32711-32803]"
    }, {
      "left" : "public int getValueAsInt(int defaultValue) throws IOException",
      "right" : "public int getValueAsInt(int defaultValue) throws IOException",
      "info" : "MethodDeclaration[32274-32394]:MethodDeclaration[32808-32928]"
    }, {
      "left" : "public long getValueAsLong() throws IOException",
      "right" : "public long getValueAsLong() throws IOException",
      "info" : "MethodDeclaration[32399-32494]:MethodDeclaration[32933-33028]"
    }, {
      "left" : "public long getValueAsLong(long defaultValue) throws IOException",
      "right" : "public long getValueAsLong(long defaultValue) throws IOException",
      "info" : "MethodDeclaration[32499-32623]:MethodDeclaration[33033-33157]"
    }, {
      "left" : "public double getValueAsDouble() throws IOException",
      "right" : "public double getValueAsDouble() throws IOException",
      "info" : "MethodDeclaration[32628-32729]:MethodDeclaration[33162-33263]"
    }, {
      "left" : "public double getValueAsDouble(double defaultValue) throws IOException",
      "right" : "public double getValueAsDouble(double defaultValue) throws IOException",
      "info" : "MethodDeclaration[32734-32866]:MethodDeclaration[33268-33400]"
    }, {
      "left" : "public boolean getValueAsBoolean() throws IOException",
      "right" : "public boolean getValueAsBoolean() throws IOException",
      "info" : "MethodDeclaration[32871-32975]:MethodDeclaration[33405-33509]"
    }, {
      "left" : "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
      "right" : "public boolean getValueAsBoolean(boolean defaultValue) throws IOException",
      "info" : "MethodDeclaration[32980-33116]:MethodDeclaration[33514-33650]"
    }, {
      "left" : "public String getValueAsString() throws IOException",
      "right" : "public String getValueAsString() throws IOException",
      "info" : "MethodDeclaration[33121-33222]:MethodDeclaration[33655-33756]"
    }, {
      "left" : "public String getValueAsString(String defaultValue) throws IOException",
      "right" : "public String getValueAsString(String defaultValue) throws IOException",
      "info" : "MethodDeclaration[33227-33359]:MethodDeclaration[33761-33893]"
    }, {
      "left" : "public Object getEmbeddedObject() throws IOException",
      "right" : "public Object getEmbeddedObject() throws IOException",
      "info" : "MethodDeclaration[33562-33665]:MethodDeclaration[34096-34199]"
    }, {
      "left" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "right" : "public byte[] getBinaryValue(Base64Variant b64variant) throws IOException",
      "info" : "MethodDeclaration[33670-33801]:MethodDeclaration[34204-34335]"
    }, {
      "left" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "right" : "public int readBinaryValue(Base64Variant b64variant, OutputStream out) throws IOException",
      "info" : "MethodDeclaration[33806-33959]:MethodDeclaration[34340-34493]"
    }, {
      "left" : "public JsonLocation getTokenLocation()",
      "right" : "public JsonLocation getTokenLocation()",
      "info" : "MethodDeclaration[33964-34052]:MethodDeclaration[34498-34586]"
    }, {
      "left" : "protected JsonStreamContext _filterContext()",
      "right" : "protected JsonStreamContext _filterContext()",
      "info" : "MethodDeclaration[34233-34399]:MethodDeclaration[34767-34933]"
    } ],
    "mappings" : [
 {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[488-494]:Modifier[488-494]"
    }, {
      "left" : "class",
      "right" : "class",
      "info" : "TYPE_DECLARATION_KIND[495-500]:TYPE_DECLARATION_KIND[495-500]"
    }, {
      "left" : "FilteringParserDelegate",
      "right" : "FilteringParserDelegate",
      "info" : "SimpleName[501-524]:SimpleName[501-524]"
    }, {
      "left" : "JsonParserDelegate",
      "right" : "JsonParserDelegate",
      "info" : "SimpleType[533-551]:SimpleType[533-551]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[3850-3856]:Modifier[3850-3856]"
    }, {
      "left" : "FilteringParserDelegate",
      "right" : "FilteringParserDelegate",
      "info" : "SimpleName[3857-3880]:SimpleName[3857-3880]"
    }, {
      "left" : "JsonParser p",
      "right" : "JsonParser p",
      "info" : "SingleVariableDeclaration[3881-3893]:SingleVariableDeclaration[3881-3893]"
    }, {
      "left" : "TokenFilter f",
      "right" : "TokenFilter f",
      "info" : "SingleVariableDeclaration[3895-3908]:SingleVariableDeclaration[3895-3908]"
    }, {
      "left" : "boolean includePath",
      "right" : "boolean includePath",
      "info" : "SingleVariableDeclaration[3922-3941]:SingleVariableDeclaration[3922-3941]"
    }, {
      "left" : "boolean allowMultipleMatches",
      "right" : "boolean allowMultipleMatches",
      "info" : "SingleVariableDeclaration[3943-3971]:SingleVariableDeclaration[3943-3971]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[3977-4272]:Block[3977-4272]"
    }, {
      "left" : "super(p);",
      "right" : "super(p);",
      "info" : "SuperConstructorInvocation[3987-3996]:SuperConstructorInvocation[3987-3996]"
    }, {
      "left" : "rootFilter = f;",
      "right" : "rootFilter = f;",
      "info" : "ExpressionStatement[4005-4020]:ExpressionStatement[4005-4020]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[4096-4112]:ExpressionStatement[4096-4112]"
    }, {
      "left" : "_headContext = TokenFilterContext.createRootContext(f);",
      "right" : "_headContext = TokenFilterContext.createRootContext(f);",
      "info" : "ExpressionStatement[4121-4176]:ExpressionStatement[4121-4176]"
    }, {
      "left" : "_includePath = includePath;",
      "right" : "_includePath = includePath;",
      "info" : "ExpressionStatement[4185-4212]:ExpressionStatement[4185-4212]"
    }, {
      "left" : "_allowMultipleMatches = allowMultipleMatches;",
      "right" : "_allowMultipleMatches = allowMultipleMatches;",
      "info" : "ExpressionStatement[4221-4266]:ExpressionStatement[4221-4266]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4442-4448]:Modifier[4442-4448]"
    }, {
      "left" : "TokenFilter",
      "right" : "TokenFilter",
      "info" : "SimpleType[4449-4460]:SimpleType[4449-4460]"
    }, {
      "left" : "getFilter",
      "right" : "getFilter",
      "info" : "SimpleName[4461-4470]:SimpleName[4461-4470]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4473-4495]:Block[4473-4495]"
    }, {
      "left" : "return rootFilter;",
      "right" : "return rootFilter;",
      "info" : "ReturnStatement[4475-4493]:ReturnStatement[4475-4493]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4647-4653]:Modifier[4647-4653]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[4654-4657]:PrimitiveType[4654-4657]"
    }, {
      "left" : "getMatchCount",
      "right" : "getMatchCount",
      "info" : "SimpleName[4658-4671]:SimpleName[4658-4671]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4674-4709]:Block[4674-4709]"
    }, {
      "left" : "return _matchCount;",
      "right" : "return _matchCount;",
      "info" : "ReturnStatement[4684-4703]:ReturnStatement[4684-4703]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4894-4903]:MarkerAnnotation[4894-4903]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4904-4910]:Modifier[4904-4910]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[4911-4920]:SimpleType[4911-4920]"
    }, {
      "left" : "getCurrentToken",
      "right" : "getCurrentToken",
      "info" : "SimpleName[4921-4936]:SimpleName[4921-4936]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4939-4961]:Block[4939-4961]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[4941-4959]:ReturnStatement[4941-4959]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[4966-4975]:MarkerAnnotation[4966-4975]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[4976-4982]:Modifier[4976-4982]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[4983-4992]:SimpleType[4983-4992]"
    }, {
      "left" : "currentToken",
      "right" : "currentToken",
      "info" : "SimpleName[4993-5005]:SimpleName[4993-5005]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5008-5030]:Block[5008-5030]"
    }, {
      "left" : "return _currToken;",
      "right" : "return _currToken;",
      "info" : "ReturnStatement[5010-5028]:ReturnStatement[5010-5028]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5036-5045]:MarkerAnnotation[5036-5045]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5046-5052]:Modifier[5046-5052]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5053-5058]:Modifier[5053-5058]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5059-5062]:PrimitiveType[5059-5062]"
    }, {
      "left" : "getCurrentTokenId",
      "right" : "getCurrentTokenId",
      "info" : "SimpleName[5063-5080]:SimpleName[5063-5080]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5083-5193]:Block[5083-5193]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[5093-5124]:VariableDeclarationStatement[5093-5124]"
    }, {
      "left" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "right" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "info" : "ReturnStatement[5133-5187]:ReturnStatement[5133-5187]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5198-5207]:MarkerAnnotation[5198-5207]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5208-5214]:Modifier[5208-5214]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5215-5220]:Modifier[5215-5220]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[5221-5224]:PrimitiveType[5221-5224]"
    }, {
      "left" : "currentTokenId",
      "right" : "currentTokenId",
      "info" : "SimpleName[5225-5239]:SimpleName[5225-5239]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5242-5352]:Block[5242-5352]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[5252-5283]:VariableDeclarationStatement[5252-5283]"
    }, {
      "left" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "right" : "return (t == null) ? JsonTokenId.ID_NO_TOKEN : t.id();",
      "info" : "ReturnStatement[5292-5346]:ReturnStatement[5292-5346]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5358-5367]:MarkerAnnotation[5358-5367]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5368-5374]:Modifier[5368-5374]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5375-5382]:PrimitiveType[5375-5382]"
    }, {
      "left" : "hasCurrentToken",
      "right" : "hasCurrentToken",
      "info" : "SimpleName[5383-5398]:SimpleName[5383-5398]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5401-5431]:Block[5401-5431]"
    }, {
      "left" : "return _currToken != null;",
      "right" : "return _currToken != null;",
      "info" : "ReturnStatement[5403-5429]:ReturnStatement[5403-5429]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5436-5445]:MarkerAnnotation[5436-5445]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5446-5452]:Modifier[5446-5452]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5453-5460]:PrimitiveType[5453-5460]"
    }, {
      "left" : "hasTokenId",
      "right" : "hasTokenId",
      "info" : "SimpleName[5461-5471]:SimpleName[5461-5471]"
    }, {
      "left" : "int id",
      "right" : "int id",
      "info" : "SingleVariableDeclaration[5472-5478]:SingleVariableDeclaration[5472-5478]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5480-5643]:Block[5480-5643]"
    }, {
      "left" : "final JsonToken t = _currToken;",
      "right" : "final JsonToken t = _currToken;",
      "info" : "VariableDeclarationStatement[5490-5521]:VariableDeclarationStatement[5490-5521]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[5530-5608]:IfStatement[5530-5608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5545-5608]:Block[5545-5608]"
    }, {
      "left" : "return (JsonTokenId.ID_NO_TOKEN == id);",
      "right" : "return (JsonTokenId.ID_NO_TOKEN == id);",
      "info" : "ReturnStatement[5559-5598]:ReturnStatement[5559-5598]"
    }, {
      "left" : "return t.id() == id;",
      "right" : "return t.id() == id;",
      "info" : "ReturnStatement[5617-5637]:ReturnStatement[5617-5637]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5649-5658]:MarkerAnnotation[5649-5658]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5659-5665]:Modifier[5659-5665]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[5666-5671]:Modifier[5666-5671]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5672-5679]:PrimitiveType[5672-5679]"
    }, {
      "left" : "hasToken",
      "right" : "hasToken",
      "info" : "SimpleName[5680-5688]:SimpleName[5680-5688]"
    }, {
      "left" : "JsonToken t",
      "right" : "JsonToken t",
      "info" : "SingleVariableDeclaration[5689-5700]:SingleVariableDeclaration[5689-5700]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5702-5743]:Block[5702-5743]"
    }, {
      "left" : "return (_currToken == t);",
      "right" : "return (_currToken == t);",
      "info" : "ReturnStatement[5712-5737]:ReturnStatement[5712-5737]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5753-5762]:MarkerAnnotation[5753-5762]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5763-5769]:Modifier[5763-5769]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5770-5777]:PrimitiveType[5770-5777]"
    }, {
      "left" : "isExpectedStartArrayToken",
      "right" : "isExpectedStartArrayToken",
      "info" : "SimpleName[5778-5803]:SimpleName[5778-5803]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5806-5853]:Block[5806-5853]"
    }, {
      "left" : "return _currToken == JsonToken.START_ARRAY;",
      "right" : "return _currToken == JsonToken.START_ARRAY;",
      "info" : "ReturnStatement[5808-5851]:ReturnStatement[5808-5851]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5858-5867]:MarkerAnnotation[5858-5867]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5868-5874]:Modifier[5868-5874]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[5875-5882]:PrimitiveType[5875-5882]"
    }, {
      "left" : "isExpectedStartObjectToken",
      "right" : "isExpectedStartObjectToken",
      "info" : "SimpleName[5883-5909]:SimpleName[5883-5909]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5912-5960]:Block[5912-5960]"
    }, {
      "left" : "return _currToken == JsonToken.START_OBJECT;",
      "right" : "return _currToken == JsonToken.START_OBJECT;",
      "info" : "ReturnStatement[5914-5958]:ReturnStatement[5914-5958]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[5966-5975]:MarkerAnnotation[5966-5975]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[5976-5982]:Modifier[5976-5982]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[5983-5995]:SimpleType[5983-5995]"
    }, {
      "left" : "getCurrentLocation",
      "right" : "getCurrentLocation",
      "info" : "SimpleName[5996-6014]:SimpleName[5996-6014]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6017-6058]:Block[6017-6058]"
    }, {
      "left" : "return delegate.getCurrentLocation();",
      "right" : "return delegate.getCurrentLocation();",
      "info" : "ReturnStatement[6019-6056]:ReturnStatement[6019-6056]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6064-6073]:MarkerAnnotation[6064-6073]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6078-6084]:Modifier[6078-6084]"
    }, {
      "left" : "JsonStreamContext",
      "right" : "JsonStreamContext",
      "info" : "SimpleType[6085-6102]:SimpleType[6085-6102]"
    }, {
      "left" : "getParsingContext",
      "right" : "getParsingContext",
      "info" : "SimpleName[6103-6120]:SimpleName[6103-6120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6123-6163]:Block[6123-6163]"
    }, {
      "left" : "return _filterContext();",
      "right" : "return _filterContext();",
      "info" : "ReturnStatement[6133-6157]:ReturnStatement[6133-6157]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6257-6266]:MarkerAnnotation[6257-6266]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6271-6277]:Modifier[6271-6277]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[6278-6284]:SimpleType[6278-6284]"
    }, {
      "left" : "getCurrentName",
      "right" : "getCurrentName",
      "info" : "SimpleName[6285-6299]:SimpleName[6285-6299]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[6309-6320]:SimpleType[6309-6320]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6321-6645]:Block[6321-6645]"
    }, {
      "left" : "JsonStreamContext ctxt = _filterContext();",
      "right" : "JsonStreamContext ctxt = _filterContext();",
      "info" : "VariableDeclarationStatement[6331-6373]:VariableDeclarationStatement[6331-6373]"
    }, {
      "left" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "right" : "if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY)",
      "info" : "IfStatement[6382-6601]:IfStatement[6382-6601]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6463-6601]:Block[6463-6601]"
    }, {
      "left" : "JsonStreamContext parent = ctxt.getParent();",
      "right" : "JsonStreamContext parent = ctxt.getParent();",
      "info" : "VariableDeclarationStatement[6477-6521]:VariableDeclarationStatement[6477-6521]"
    }, {
      "left" : "return (parent == null) ? null : parent.getCurrentName();",
      "right" : "return (parent == null) ? null : parent.getCurrentName();",
      "info" : "ReturnStatement[6534-6591]:ReturnStatement[6534-6591]"
    }, {
      "left" : "return ctxt.getCurrentName();",
      "right" : "return ctxt.getCurrentName();",
      "info" : "ReturnStatement[6610-6639]:ReturnStatement[6610-6639]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[6836-6845]:MarkerAnnotation[6836-6845]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[6850-6856]:Modifier[6850-6856]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[6857-6861]:PrimitiveType[6857-6861]"
    }, {
      "left" : "clearCurrentToken",
      "right" : "clearCurrentToken",
      "info" : "SimpleName[6862-6879]:SimpleName[6862-6879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6882-7008]:Block[6882-7008]"
    }, {
      "left" : "if (_currToken != null)",
      "right" : "if (_currToken != null)",
      "info" : "IfStatement[6892-7002]:IfStatement[6892-7002]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6916-7002]:Block[6916-7002]"
    }, {
      "left" : "_lastClearedToken = _currToken;",
      "right" : "_lastClearedToken = _currToken;",
      "info" : "ExpressionStatement[6930-6961]:ExpressionStatement[6930-6961]"
    }, {
      "left" : "_currToken = null;",
      "right" : "_currToken = null;",
      "info" : "ExpressionStatement[6974-6992]:ExpressionStatement[6974-6992]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7014-7023]:MarkerAnnotation[7014-7023]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7028-7034]:Modifier[7028-7034]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[7035-7044]:SimpleType[7035-7044]"
    }, {
      "left" : "getLastClearedToken",
      "right" : "getLastClearedToken",
      "info" : "SimpleName[7045-7064]:SimpleName[7045-7064]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7067-7096]:Block[7067-7096]"
    }, {
      "left" : "return _lastClearedToken;",
      "right" : "return _lastClearedToken;",
      "info" : "ReturnStatement[7069-7094]:ReturnStatement[7069-7094]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7102-7111]:MarkerAnnotation[7102-7111]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7116-7122]:Modifier[7116-7122]"
    }, {
      "left" : "void",
      "right" : "void",
      "info" : "PrimitiveType[7123-7127]:PrimitiveType[7123-7127]"
    }, {
      "left" : "overrideCurrentName",
      "right" : "overrideCurrentName",
      "info" : "SimpleName[7128-7147]:SimpleName[7128-7147]"
    }, {
      "left" : "String name",
      "right" : "String name",
      "info" : "SingleVariableDeclaration[7148-7159]:SingleVariableDeclaration[7148-7159]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7161-7485]:Block[7161-7485]"
    }, {
      "left" : "throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");",
      "right" : "throw new UnsupportedOperationException(\"Can not currently override name during filtering read\");",
      "info" : "ThrowStatement[7382-7479]:ThrowStatement[7382-7479]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[7664-7673]:MarkerAnnotation[7664-7673]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[7678-7684]:Modifier[7678-7684]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[7685-7694]:SimpleType[7685-7694]"
    }, {
      "left" : "nextToken",
      "right" : "nextToken",
      "info" : "SimpleName[7695-7704]:SimpleName[7695-7704]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[7714-7725]:SimpleType[7714-7725]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7730-16221]:Block[7730-16321]"
    }, {
      "left" : "if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null))",
      "right" : "if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null))",
      "info" : "IfStatement[8264-8711]:IfStatement[8264-8711]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8345-8711]:Block[8345-8711]"
    }, {
      "left" : "if (_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath\n                    && (_itemFilter == TokenFilter.INCLUDE_ALL))",
      "right" : "if (_currToken.isScalarValue() && !_headContext.isStartHandled() && !_includePath\n                    && (_itemFilter == TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[8495-8701]:IfStatement[8495-8701]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8642-8701]:Block[8642-8701]"
    }, {
      "left" : "return (_currToken = null);",
      "right" : "return (_currToken = null);",
      "info" : "ReturnStatement[8660-8687]:ReturnStatement[8660-8687]"
    }, {
      "left" : "TokenFilterContext ctxt = _exposedContext;",
      "right" : "TokenFilterContext ctxt = _exposedContext;",
      "info" : "VariableDeclarationStatement[8750-8792]:VariableDeclarationStatement[8750-8792]"
    }, {
      "left" : "if (ctxt != null)",
      "right" : "if (ctxt != null)",
      "info" : "IfStatement[8802-10234]:IfStatement[8802-10234]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8820-10234]:Block[8820-10234]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[8834-10224]:WhileStatement[8834-10224]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8847-10224]:Block[8847-10224]"
    }, {
      "left" : "JsonToken t = ctxt.nextTokenToRead();",
      "right" : "JsonToken t = ctxt.nextTokenToRead();",
      "info" : "VariableDeclarationStatement[8865-8902]:VariableDeclarationStatement[8865-8902]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[8919-9019]:IfStatement[8919-9019]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[8934-9019]:Block[8934-9019]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[8956-8971]:ExpressionStatement[8956-8971]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[8992-9001]:ReturnStatement[8992-9001]"
    }, {
      "left" : "if (ctxt == _headContext)",
      "right" : "if (ctxt == _headContext)",
      "info" : "IfStatement[9085-9881]:IfStatement[9085-9881]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9111-9881]:Block[9111-9881]"
    }, {
      "left" : "_exposedContext = null;",
      "right" : "_exposedContext = null;",
      "info" : "ExpressionStatement[9133-9156]:ExpressionStatement[9133-9156]"
    }, {
      "left" : "if (ctxt.inArray())",
      "right" : "if (ctxt.inArray())",
      "info" : "IfStatement[9177-9464]:IfStatement[9177-9464]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[9197-9464]:Block[9197-9464]"
    }, {
      "left" : "t = delegate.getCurrentToken();",
      "right" : "t = delegate.getCurrentToken();",
      "info" : "ExpressionStatement[9223-9254]:ExpressionStatement[9223-9254]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[9393-9408]:ExpressionStatement[9393-9408]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[9433-9442]:ReturnStatement[9433-9442]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[9857-9863]:BreakStatement[9857-9863]"
    }, {
      "left" : "ctxt = _headContext.findChildOf(ctxt);",
      "right" : "ctxt = _headContext.findChildOf(ctxt);",
      "info" : "ExpressionStatement[9957-9995]:ExpressionStatement[9957-9995]"
    }, {
      "left" : "_exposedContext = ctxt;",
      "right" : "_exposedContext = ctxt;",
      "info" : "ExpressionStatement[10012-10035]:ExpressionStatement[10012-10035]"
    }, {
      "left" : "if (ctxt == null)",
      "right" : "if (ctxt == null)",
      "info" : "IfStatement[10052-10210]:IfStatement[10052-10210]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10070-10210]:Block[10070-10210]"
    }, {
      "left" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "right" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "info" : "ThrowStatement[10114-10192]:ThrowStatement[10114-10192]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[10297-10332]:VariableDeclarationStatement[10297-10332]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[10341-10485]:IfStatement[10341-10485]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10356-10485]:Block[10356-10485]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[10438-10453]:ExpressionStatement[10438-10453]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[10466-10475]:ReturnStatement[10466-10475]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[10538-10552]:VariableDeclarationStatement[10538-10552]"
    }, {
      "left" : "switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                        return (_currToken = t);\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }",
      "right" : "switch (t.id()) {\n        case ID_START_ARRAY:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartArray();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildArrayContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildArrayContext(f, false);\n            \n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            break;\n\n        case ID_START_OBJECT:\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            if (f == null) { // does this occur?\n                delegate.skipChildren();\n                break;\n            }\n            // Otherwise still iffy, need to check\n            f = _headContext.checkValue(f);\n            if (f == null) {\n                delegate.skipChildren();\n                break;\n            }\n            if (f != TokenFilter.INCLUDE_ALL) {\n                f = f.filterStartObject();\n            }\n            _itemFilter = f;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                _headContext = _headContext.createChildObjectContext(f, true);\n                return (_currToken = t);\n            }\n            _headContext = _headContext.createChildObjectContext(f, false);\n            // Also: only need buffering if parent path to be included\n            if (_includePath) {\n                t = _nextTokenWithBuffering(_headContext);\n                if (t != null) {\n                    _currToken = t;\n                    return t;\n                }\n            }\n            // note: inclusion of surrounding Object handled separately via\n            // FIELD_NAME\n            break;\n\n        case ID_END_ARRAY:\n        case ID_END_OBJECT:\n            {\n                boolean returnEnd = _headContext.isStartHandled();\n                f = _headContext.getFilter();\n                if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                    f.filterFinishArray();\n                }\n                _headContext = _headContext.getParent();\n                _itemFilter = _headContext.getFilter();\n                if (returnEnd) {\n                    return (_currToken = t);\n                }\n            }\n            break;\n\n        case ID_FIELD_NAME:\n            {\n                final String name = delegate.getCurrentName();\n                // note: this will also set 'needToHandleName'\n                f = _headContext.setFieldName(name);\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _itemFilter = f;\n                    if (!_includePath) {\n                        // Minor twist here: if parent NOT included, may need to induce output of\n                        // surrounding START_OBJECT/END_OBJECT\n                        if (_includeImmediateParent && !_headContext.isStartHandled()) {\n                            t = _headContext.nextTokenToRead(); // returns START_OBJECT but also marks it handled\n                            _exposedContext = _headContext;\n                        }\n                    }\n                    return (_currToken = t);\n                }\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                f = f.includeProperty(name);\n                if (f == null) {\n                    delegate.nextToken();\n                    delegate.skipChildren();\n                    break;\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    if (_verifyAllowedMatches() && _includePath) {\n                        return (_currToken = t);\n                    }\n                }\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                break;\n            }\n\n        default: // scalar value\n            f = _itemFilter;\n            if (f == TokenFilter.INCLUDE_ALL) {\n                return (_currToken = t);\n            }\n            if (f != null) {\n                f = _headContext.checkValue(f);\n                if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate))) {\n                    if (_verifyAllowedMatches()) {\n                        return (_currToken = t);\n                    }\n                }\n            }\n            // Otherwise not included (leaves must be explicitly included)\n            break;\n        }",
      "info" : "SwitchStatement[10570-16115]:SwitchStatement[10570-16215]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[10596-10616]:SwitchCase[10596-10616]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[10629-10645]:ExpressionStatement[10629-10645]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[10658-10826]:IfStatement[10658-10826]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10692-10826]:Block[10692-10826]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[10710-10771]:ExpressionStatement[10710-10771]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[10788-10812]:ReturnStatement[10788-10812]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[10839-10953]:IfStatement[10839-10953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10854-10953]:Block[10854-10953]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[10892-10916]:ExpressionStatement[10892-10916]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[10933-10939]:BreakStatement[10933-10939]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[11017-11048]:ExpressionStatement[11017-11048]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[11061-11155]:IfStatement[11061-11155]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11076-11155]:Block[11076-11155]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[11094-11118]:ExpressionStatement[11094-11118]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11135-11141]:BreakStatement[11135-11141]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[11168-11259]:IfStatement[11168-11259]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11202-11259]:Block[11202-11259]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[11220-11245]:ExpressionStatement[11220-11245]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[11272-11288]:ExpressionStatement[11272-11288]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[11301-11469]:IfStatement[11301-11469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11335-11469]:Block[11335-11469]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[11353-11414]:ExpressionStatement[11353-11414]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[11431-11455]:ReturnStatement[11431-11455]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[11482-11544]:ExpressionStatement[11482-11544]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[11641-11850]:IfStatement[11641-11850]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11659-11850]:Block[11659-11850]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[11677-11719]:ExpressionStatement[11677-11719]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[11736-11836]:IfStatement[11736-11836]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11751-11836]:Block[11751-11836]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[11773-11788]:ExpressionStatement[11773-11788]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[11809-11818]:ReturnStatement[11809-11818]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[11863-11869]:BreakStatement[11863-11869]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[11879-11900]:SwitchCase[11879-11900]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[11913-11929]:ExpressionStatement[11913-11929]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[11942-12111]:IfStatement[11942-12111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11976-12111]:Block[11976-12111]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[11994-12056]:ExpressionStatement[11994-12056]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[12073-12097]:ReturnStatement[12073-12097]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[12124-12238]:IfStatement[12124-12238]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12139-12238]:Block[12139-12238]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[12177-12201]:ExpressionStatement[12177-12201]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12218-12224]:BreakStatement[12218-12224]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[12302-12333]:ExpressionStatement[12302-12333]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[12346-12440]:IfStatement[12346-12440]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12361-12440]:Block[12361-12440]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[12379-12403]:ExpressionStatement[12379-12403]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[12420-12426]:BreakStatement[12420-12426]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[12453-12545]:IfStatement[12453-12545]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12487-12545]:Block[12487-12545]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[12505-12531]:ExpressionStatement[12505-12531]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[12558-12574]:ExpressionStatement[12558-12574]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[12587-12756]:IfStatement[12587-12756]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12621-12756]:Block[12621-12756]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[12639-12701]:ExpressionStatement[12639-12701]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[12718-12742]:ReturnStatement[12718-12742]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[12769-12832]:ExpressionStatement[12769-12832]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[12916-13125]:IfStatement[12916-13125]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12934-13125]:Block[12934-13125]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[12952-12994]:ExpressionStatement[12952-12994]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[13011-13111]:IfStatement[13011-13111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13026-13111]:Block[13026-13111]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[13048-13063]:ExpressionStatement[13048-13063]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[13084-13093]:ReturnStatement[13084-13093]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13240-13246]:BreakStatement[13240-13246]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[13256-13274]:SwitchCase[13256-13274]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[13283-13302]:SwitchCase[13283-13302]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13315-13782]:Block[13315-13782]"
    }, {
      "left" : "boolean returnEnd = _headContext.isStartHandled();",
      "right" : "boolean returnEnd = _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[13333-13383]:VariableDeclarationStatement[13333-13383]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[13400-13429]:ExpressionStatement[13400-13429]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[13446-13559]:IfStatement[13446-13559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13497-13559]:Block[13497-13559]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[13519-13541]:ExpressionStatement[13519-13541]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[13576-13616]:ExpressionStatement[13576-13616]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[13633-13672]:ExpressionStatement[13633-13672]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[13689-13768]:IfStatement[13689-13768]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13704-13768]:Block[13704-13768]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[13726-13750]:ReturnStatement[13726-13750]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[13795-13801]:BreakStatement[13795-13801]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[13811-13830]:SwitchCase[13811-13830]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13843-15564]:Block[13843-15591]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[13861-13907]:VariableDeclarationStatement[13861-13907]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[13987-14023]:ExpressionStatement[13987-14023]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[14040-14688]:IfStatement[14040-14688]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14074-14688]:Block[14074-14688]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[14096-14112]:ExpressionStatement[14096-14112]"
    }, {
      "left" : "if (!_includePath)",
      "right" : "if (!_includePath)",
      "info" : "IfStatement[14133-14625]:IfStatement[14133-14625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14152-14625]:Block[14152-14625]"
    }, {
      "left" : "if (_includeImmediateParent && !_headContext.isStartHandled())",
      "right" : "if (_includeImmediateParent && !_headContext.isStartHandled())",
      "info" : "IfStatement[14339-14603]:IfStatement[14339-14603]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14402-14603]:Block[14402-14603]"
    }, {
      "left" : "t = _headContext.nextTokenToRead();",
      "right" : "t = _headContext.nextTokenToRead();",
      "info" : "ExpressionStatement[14432-14467]:ExpressionStatement[14432-14467]"
    }, {
      "left" : "_exposedContext = _headContext;",
      "right" : "_exposedContext = _headContext;",
      "info" : "ExpressionStatement[14546-14577]:ExpressionStatement[14546-14577]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[14646-14670]:ReturnStatement[14646-14670]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[14705-14853]:IfStatement[14705-14853]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14720-14853]:Block[14720-14853]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[14742-14763]:ExpressionStatement[14742-14763]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[14784-14808]:ExpressionStatement[14784-14808]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[14829-14835]:BreakStatement[14829-14835]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[14870-14898]:ExpressionStatement[14870-14898]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[14915-15063]:IfStatement[14915-15063]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14930-15063]:Block[14930-15063]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[14952-14973]:ExpressionStatement[14952-14973]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[14994-15018]:ExpressionStatement[14994-15018]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15039-15045]:BreakStatement[15039-15045]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[15080-15096]:ExpressionStatement[15080-15096]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[15113-15277]:IfStatement[15113-15304]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15147-15277]:Block[15147-15304]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_verifyAllowedMatches() && _includePath)",
      "info" : "IfStatement[15169-15259]:IfStatement[15169-15286]"
    }, {
      "left" : "_includePath",
      "right" : "_includePath",
      "info" : "SimpleName[15173-15185]:SimpleName[15200-15212]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15187-15259]:Block[15214-15286]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[15213-15237]:ReturnStatement[15240-15264]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[15294-15527]:IfStatement[15321-15554]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15312-15527]:Block[15339-15554]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[15334-15376]:ExpressionStatement[15361-15403]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[15397-15509]:IfStatement[15424-15536]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15412-15509]:Block[15439-15536]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[15438-15453]:ExpressionStatement[15465-15480]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[15478-15487]:ReturnStatement[15505-15514]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[15544-15550]:BreakStatement[15571-15577]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[15574-15582]:SwitchCase[15601-15609]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[15611-15627]:ExpressionStatement[15638-15654]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[15640-15730]:IfStatement[15667-15757]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15674-15730]:Block[15701-15757]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[15692-15716]:ReturnStatement[15719-15743]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[15743-16011]:IfStatement[15770-16111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15758-16011]:Block[15785-16111]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[15776-15807]:ExpressionStatement[15803-15834]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                        || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[15824-15997]:IfStatement[15851-16097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15929-15997]:Block[15956-16097]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[15955-15979]:ReturnStatement[16033-16057]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[16099-16105]:BreakStatement[16199-16205]"
    }, {
      "left" : "return _nextToken2();",
      "right" : "return _nextToken2();",
      "info" : "ReturnStatement[16194-16215]:ReturnStatement[16294-16315]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[16479-16488]:Modifier[16579-16588]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[16489-16494]:Modifier[16589-16594]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[16495-16504]:SimpleType[16595-16604]"
    }, {
      "left" : "_nextToken2",
      "right" : "_nextToken2",
      "info" : "SimpleName[16505-16516]:SimpleName[16605-16616]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[16526-16537]:SimpleType[16626-16637]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16542-22411]:Block[16642-22619]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                _currToken = t;\n                return t;\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                            return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                _currToken = t;\n                return t;\n            }\n            TokenFilter f;\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_verifyAllowedMatches() && _includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        if (_verifyAllowedMatches()) {\n                            return (_currToken = t);\n                        }\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }\n        }",
      "info" : "LabeledStatement[16552-22405]:LabeledStatement[16652-22613]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[16571-22405]:WhileStatement[16671-22613]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16584-22405]:Block[16684-22613]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[16598-16633]:VariableDeclarationStatement[16698-16733]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[16646-16757]:IfStatement[16746-16857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16661-16757]:Block[16761-16857]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[16702-16717]:ExpressionStatement[16802-16817]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[16734-16743]:ReturnStatement[16834-16843]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[16770-16784]:VariableDeclarationStatement[16870-16884]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                            return (_currToken = t);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }",
      "right" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                // but if we didn't figure it out yet, need to buffer possible events\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return (_currToken = t);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                if (_includePath) {\n                    t = _nextTokenWithBuffering(_headContext);\n                    if (t != null) {\n                        _currToken = t;\n                        return t;\n                    }\n                }\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    boolean returnEnd = _headContext.isStartHandled();\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n                    if (returnEnd) {\n                        return (_currToken = t);\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return (_currToken = t);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        if (_verifyAllowedMatches() && _includePath) {\n                            return (_currToken = t);\n                        }\n//                        if (_includeImmediateParent) { ...\n                        continue main_loop;\n                    }\n                    if (_includePath) {\n                        t = _nextTokenWithBuffering(_headContext);\n                        if (t != null) {\n                            _currToken = t;\n                            return t;\n                        }\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return (_currToken = t);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        if (_verifyAllowedMatches()) {\n                            return (_currToken = t);\n                        }\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                break;\n            }",
      "info" : "SwitchStatement[16798-22395]:SwitchStatement[16898-22603]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[16828-16848]:SwitchCase[16928-16948]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[16865-16881]:ExpressionStatement[16965-16981]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[16898-17078]:IfStatement[16998-17178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16932-17078]:Block[17032-17178]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[16954-17015]:ExpressionStatement[17054-17115]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[17036-17060]:ReturnStatement[17136-17160]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[17095-17234]:IfStatement[17195-17334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17110-17234]:Block[17210-17334]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[17152-17176]:ExpressionStatement[17252-17276]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[17197-17216]:ContinueStatement[17297-17316]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[17306-17337]:ExpressionStatement[17406-17437]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[17354-17473]:IfStatement[17454-17573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17369-17473]:Block[17469-17573]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[17391-17415]:ExpressionStatement[17491-17515]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[17436-17455]:ContinueStatement[17536-17555]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[17490-17589]:IfStatement[17590-17689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17524-17589]:Block[17624-17689]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[17546-17571]:ExpressionStatement[17646-17671]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[17606-17622]:ExpressionStatement[17706-17722]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[17639-17819]:IfStatement[17739-17919]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17673-17819]:Block[17773-17919]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[17695-17756]:ExpressionStatement[17795-17856]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[17777-17801]:ReturnStatement[17877-17901]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[17836-17898]:ExpressionStatement[17936-17998]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[18001-18234]:IfStatement[18101-18334]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18019-18234]:Block[18119-18334]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[18041-18083]:ExpressionStatement[18141-18183]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[18104-18216]:IfStatement[18204-18316]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18119-18216]:Block[18219-18316]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[18145-18160]:ExpressionStatement[18245-18260]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[18185-18194]:ReturnStatement[18285-18294]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[18251-18270]:ContinueStatement[18351-18370]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[18284-18305]:SwitchCase[18384-18405]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[18322-18338]:ExpressionStatement[18422-18438]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[18355-18536]:IfStatement[18455-18636]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18389-18536]:Block[18489-18636]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[18411-18473]:ExpressionStatement[18511-18573]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[18494-18518]:ReturnStatement[18594-18618]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[18553-18692]:IfStatement[18653-18792]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18568-18692]:Block[18668-18792]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[18610-18634]:ExpressionStatement[18710-18734]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[18655-18674]:ContinueStatement[18755-18774]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[18764-18795]:ExpressionStatement[18864-18895]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[18812-18931]:IfStatement[18912-19031]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18827-18931]:Block[18927-19031]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[18849-18873]:ExpressionStatement[18949-18973]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[18894-18913]:ContinueStatement[18994-19013]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[18948-19048]:IfStatement[19048-19148]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18982-19048]:Block[19082-19148]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[19004-19030]:ExpressionStatement[19104-19130]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[19065-19081]:ExpressionStatement[19165-19181]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[19098-19279]:IfStatement[19198-19379]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19132-19279]:Block[19232-19379]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[19154-19216]:ExpressionStatement[19254-19316]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[19237-19261]:ReturnStatement[19337-19361]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[19296-19359]:ExpressionStatement[19396-19459]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[19376-19609]:IfStatement[19476-19709]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19394-19609]:Block[19494-19709]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[19416-19458]:ExpressionStatement[19516-19558]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[19479-19591]:IfStatement[19579-19691]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19494-19591]:Block[19594-19691]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[19520-19535]:ExpressionStatement[19620-19635]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[19560-19569]:ReturnStatement[19660-19669]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[19626-19645]:ContinueStatement[19726-19745]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[19659-19677]:SwitchCase[19759-19777]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[19690-19709]:SwitchCase[19790-19809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19726-20237]:Block[19826-20337]"
    }, {
      "left" : "boolean returnEnd = _headContext.isStartHandled();",
      "right" : "boolean returnEnd = _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[19748-19798]:VariableDeclarationStatement[19848-19898]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[19819-19848]:ExpressionStatement[19919-19948]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[19869-19990]:IfStatement[19969-20090]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19920-19990]:Block[20020-20090]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[19946-19968]:ExpressionStatement[20046-20068]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[20011-20051]:ExpressionStatement[20111-20151]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[20072-20111]:ExpressionStatement[20172-20211]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[20132-20219]:IfStatement[20232-20319]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20147-20219]:Block[20247-20319]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[20173-20197]:ReturnStatement[20273-20297]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[20254-20273]:ContinueStatement[20354-20373]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[20287-20306]:SwitchCase[20387-20406]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20323-21748]:Block[20423-21875]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[20345-20391]:VariableDeclarationStatement[20445-20491]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[20412-20448]:ExpressionStatement[20512-20548]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[20469-20616]:IfStatement[20569-20716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20503-20616]:Block[20603-20716]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[20529-20545]:ExpressionStatement[20629-20645]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[20570-20594]:ReturnStatement[20670-20694]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[20637-20838]:IfStatement[20737-20938]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20652-20838]:Block[20752-20938]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[20702-20723]:ExpressionStatement[20802-20823]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[20748-20772]:ExpressionStatement[20848-20872]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[20797-20816]:ContinueStatement[20897-20916]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[20859-20887]:ExpressionStatement[20959-20987]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[20908-21109]:IfStatement[21008-21209]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20923-21109]:Block[21023-21209]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[20973-20994]:ExpressionStatement[21073-21094]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[21019-21043]:ExpressionStatement[21119-21143]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[21068-21087]:ContinueStatement[21168-21187]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[21130-21146]:ExpressionStatement[21230-21246]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[21167-21452]:IfStatement[21267-21579]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21201-21452]:Block[21301-21579]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_verifyAllowedMatches() && _includePath)",
      "info" : "IfStatement[21227-21325]:IfStatement[21327-21452]"
    }, {
      "left" : "_includePath",
      "right" : "_includePath",
      "info" : "SimpleName[21231-21243]:SimpleName[21358-21370]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21245-21325]:Block[21372-21452]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[21275-21299]:ReturnStatement[21402-21426]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[21411-21430]:ContinueStatement[21538-21557]"
    }, {
      "left" : "if (_includePath)",
      "right" : "if (_includePath)",
      "info" : "IfStatement[21473-21730]:IfStatement[21600-21857]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21491-21730]:Block[21618-21857]"
    }, {
      "left" : "t = _nextTokenWithBuffering(_headContext);",
      "right" : "t = _nextTokenWithBuffering(_headContext);",
      "info" : "ExpressionStatement[21517-21559]:ExpressionStatement[21644-21686]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[21584-21708]:IfStatement[21711-21835]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21599-21708]:Block[21726-21835]"
    }, {
      "left" : "_currToken = t;",
      "right" : "_currToken = t;",
      "info" : "ExpressionStatement[21629-21644]:ExpressionStatement[21756-21771]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[21673-21682]:ReturnStatement[21800-21809]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[21765-21784]:ContinueStatement[21892-21911]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[21798-21806]:SwitchCase[21925-21933]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[21839-21855]:ExpressionStatement[21966-21982]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[21872-21970]:IfStatement[21999-22097]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21906-21970]:Block[22033-22097]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[21928-21952]:ReturnStatement[22055-22079]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[21987-22279]:IfStatement[22114-22487]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22002-22279]:Block[22129-22487]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[22024-22055]:ExpressionStatement[22151-22182]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[22076-22261]:IfStatement[22203-22469]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22185-22261]:Block[22312-22469]"
    }, {
      "left" : "return (_currToken = t);",
      "right" : "return (_currToken = t);",
      "info" : "ReturnStatement[22215-22239]:ReturnStatement[22397-22421]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[22375-22381]:BreakStatement[22583-22589]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[22504-22513]:Modifier[22712-22721]"
    }, {
      "left" : "final",
      "right" : "final",
      "info" : "Modifier[22514-22519]:Modifier[22722-22727]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[22520-22529]:SimpleType[22728-22737]"
    }, {
      "left" : "_nextTokenWithBuffering",
      "right" : "_nextTokenWithBuffering",
      "info" : "SimpleName[22530-22553]:SimpleName[22738-22761]"
    }, {
      "left" : "final TokenFilterContext buffRoot",
      "right" : "final TokenFilterContext buffRoot",
      "info" : "SingleVariableDeclaration[22554-22587]:SingleVariableDeclaration[22762-22795]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[22604-22615]:SimpleType[22812-22823]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22620-27638]:Block[22828-27954]"
    }, {
      "left" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                            return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }",
      "right" : "main_loop:\n        while (true) {\n            JsonToken t = delegate.nextToken();\n            if (t == null) { // is this even legal?\n                return t;\n            }\n            TokenFilter f;\n\n            // One simplification here: we know for a fact that the item filter is\n            // neither null nor 'include all', for most cases; the only exception\n            // being FIELD_NAME handling\n\n            switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        if (_verifyAllowedMatches()) {\n                            return _nextBuffered(buffRoot);\n                        }\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }\n        }",
      "info" : "LabeledStatement[22630-27632]:LabeledStatement[22838-27948]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[22649-27632]:WhileStatement[22857-27948]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22662-27632]:Block[22870-27948]"
    }, {
      "left" : "JsonToken t = delegate.nextToken();",
      "right" : "JsonToken t = delegate.nextToken();",
      "info" : "VariableDeclarationStatement[22676-22711]:VariableDeclarationStatement[22884-22919]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[22724-22803]:IfStatement[22932-23011]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22739-22803]:Block[22947-23011]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[22780-22789]:ReturnStatement[22988-22997]"
    }, {
      "left" : "TokenFilter f;",
      "right" : "TokenFilter f;",
      "info" : "VariableDeclarationStatement[22816-22830]:VariableDeclarationStatement[23024-23038]"
    }, {
      "left" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                            return _nextBuffered(buffRoot);\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }",
      "right" : "switch (t.id()) {\n            case ID_START_ARRAY:\n                f = _headContext.checkValue(_itemFilter);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartArray();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildArrayContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildArrayContext(f, false);\n                continue main_loop;\n\n            case ID_START_OBJECT:\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return t;\n                }\n                if (f == null) { // does this occur?\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                // Otherwise still iffy, need to check\n                f = _headContext.checkValue(f);\n                if (f == null) {\n                    delegate.skipChildren();\n                    continue main_loop;\n                }\n                if (f != TokenFilter.INCLUDE_ALL) {\n                    f = f.filterStartObject();\n                }\n                _itemFilter = f;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    _headContext = _headContext.createChildObjectContext(f, true);\n                    return _nextBuffered(buffRoot);\n                }\n                _headContext = _headContext.createChildObjectContext(f, false);\n                continue main_loop;\n\n            case ID_END_ARRAY:\n            case ID_END_OBJECT:\n                {\n                    // Unlike with other loops, here we know that content was NOT\n                    // included (won't get this far otherwise)\n                    f = _headContext.getFilter();\n                    if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {\n                        f.filterFinishArray();\n                    }\n                    boolean gotEnd = (_headContext == buffRoot);\n                    boolean returnEnd = gotEnd && _headContext.isStartHandled();\n\n                    _headContext = _headContext.getParent();\n                    _itemFilter = _headContext.getFilter();\n\n                    if (returnEnd) {\n                        return t;\n                    }\n                    // Hmmh. Do we need both checks, or should above suffice?\n                    if (gotEnd || (_headContext == buffRoot)) {\n                        return null;\n                    }\n                }\n                continue main_loop;\n\n            case ID_FIELD_NAME:\n                {\n                    final String name = delegate.getCurrentName();\n                    f = _headContext.setFieldName(name);\n                    if (f == TokenFilter.INCLUDE_ALL) {\n                        _itemFilter = f;\n                        return _nextBuffered(buffRoot);\n                    }\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    f = f.includeProperty(name);\n                    if (f == null) { // filter out the value\n                        delegate.nextToken();\n                        delegate.skipChildren();\n                        continue main_loop;\n                    }\n                    _itemFilter = f;\n                    if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches()) {\n                        return _nextBuffered(buffRoot);\n                    }\n                }\n                continue main_loop;\n\n            default: // scalar value\n                f = _itemFilter;\n                if (f == TokenFilter.INCLUDE_ALL) {\n                    return _nextBuffered(buffRoot);\n                }\n                if (f != null) {\n                    f = _headContext.checkValue(f);\n                    if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate))) {\n                        if (_verifyAllowedMatches()) {\n                            return _nextBuffered(buffRoot);\n                        }\n                    }\n                }\n                // Otherwise not included (leaves must be explicitly included)\n                continue main_loop;\n            }",
      "info" : "SwitchStatement[23051-27622]:SwitchStatement[23259-27938]"
    }, {
      "left" : "case ID_START_ARRAY:",
      "right" : "case ID_START_ARRAY:",
      "info" : "SwitchCase[23081-23101]:SwitchCase[23289-23309]"
    }, {
      "left" : "f = _headContext.checkValue(_itemFilter);",
      "right" : "f = _headContext.checkValue(_itemFilter);",
      "info" : "ExpressionStatement[23118-23159]:ExpressionStatement[23326-23367]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[23176-23295]:IfStatement[23384-23503]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23191-23295]:Block[23399-23503]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[23213-23237]:ExpressionStatement[23421-23445]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[23258-23277]:ContinueStatement[23466-23485]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[23312-23411]:IfStatement[23520-23619]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23346-23411]:Block[23554-23619]"
    }, {
      "left" : "f = f.filterStartArray();",
      "right" : "f = f.filterStartArray();",
      "info" : "ExpressionStatement[23368-23393]:ExpressionStatement[23576-23601]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[23428-23444]:ExpressionStatement[23636-23652]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[23461-23648]:IfStatement[23669-23856]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23495-23648]:Block[23703-23856]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, true);",
      "info" : "ExpressionStatement[23517-23578]:ExpressionStatement[23725-23786]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[23599-23630]:ReturnStatement[23807-23838]"
    }, {
      "left" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "right" : "_headContext = _headContext.createChildArrayContext(f, false);",
      "info" : "ExpressionStatement[23665-23727]:ExpressionStatement[23873-23935]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[23744-23763]:ContinueStatement[23952-23971]"
    }, {
      "left" : "case ID_START_OBJECT:",
      "right" : "case ID_START_OBJECT:",
      "info" : "SwitchCase[23777-23798]:SwitchCase[23985-24006]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[23815-23831]:ExpressionStatement[24023-24039]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[23848-24014]:IfStatement[24056-24222]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23882-24014]:Block[24090-24222]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[23904-23966]:ExpressionStatement[24112-24174]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[23987-23996]:ReturnStatement[24195-24204]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[24031-24170]:IfStatement[24239-24378]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24046-24170]:Block[24254-24378]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[24088-24112]:ExpressionStatement[24296-24320]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[24133-24152]:ContinueStatement[24341-24360]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[24242-24273]:ExpressionStatement[24450-24481]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[24290-24409]:IfStatement[24498-24617]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24305-24409]:Block[24513-24617]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[24327-24351]:ExpressionStatement[24535-24559]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[24372-24391]:ContinueStatement[24580-24599]"
    }, {
      "left" : "if (f != TokenFilter.INCLUDE_ALL)",
      "right" : "if (f != TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[24426-24526]:IfStatement[24634-24734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24460-24526]:Block[24668-24734]"
    }, {
      "left" : "f = f.filterStartObject();",
      "right" : "f = f.filterStartObject();",
      "info" : "ExpressionStatement[24482-24508]:ExpressionStatement[24690-24716]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[24543-24559]:ExpressionStatement[24751-24767]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[24576-24764]:IfStatement[24784-24972]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24610-24764]:Block[24818-24972]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, true);",
      "info" : "ExpressionStatement[24632-24694]:ExpressionStatement[24840-24902]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[24715-24746]:ReturnStatement[24923-24954]"
    }, {
      "left" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "right" : "_headContext = _headContext.createChildObjectContext(f, false);",
      "info" : "ExpressionStatement[24781-24844]:ExpressionStatement[24989-25052]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[24861-24880]:ContinueStatement[25069-25088]"
    }, {
      "left" : "case ID_END_ARRAY:",
      "right" : "case ID_END_ARRAY:",
      "info" : "SwitchCase[24894-24912]:SwitchCase[25102-25120]"
    }, {
      "left" : "case ID_END_OBJECT:",
      "right" : "case ID_END_OBJECT:",
      "info" : "SwitchCase[24925-24944]:SwitchCase[25133-25152]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24961-25880]:Block[25169-26088]"
    }, {
      "left" : "f = _headContext.getFilter();",
      "right" : "f = _headContext.getFilter();",
      "info" : "ExpressionStatement[25128-25157]:ExpressionStatement[25336-25365]"
    }, {
      "left" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "right" : "if ((f != null) && (f != TokenFilter.INCLUDE_ALL))",
      "info" : "IfStatement[25178-25299]:IfStatement[25386-25507]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25229-25299]:Block[25437-25507]"
    }, {
      "left" : "f.filterFinishArray();",
      "right" : "f.filterFinishArray();",
      "info" : "ExpressionStatement[25255-25277]:ExpressionStatement[25463-25485]"
    }, {
      "left" : "boolean gotEnd = (_headContext == buffRoot);",
      "right" : "boolean gotEnd = (_headContext == buffRoot);",
      "info" : "VariableDeclarationStatement[25320-25364]:VariableDeclarationStatement[25528-25572]"
    }, {
      "left" : "boolean returnEnd = gotEnd && _headContext.isStartHandled();",
      "right" : "boolean returnEnd = gotEnd && _headContext.isStartHandled();",
      "info" : "VariableDeclarationStatement[25385-25445]:VariableDeclarationStatement[25593-25653]"
    }, {
      "left" : "_headContext = _headContext.getParent();",
      "right" : "_headContext = _headContext.getParent();",
      "info" : "ExpressionStatement[25467-25507]:ExpressionStatement[25675-25715]"
    }, {
      "left" : "_itemFilter = _headContext.getFilter();",
      "right" : "_itemFilter = _headContext.getFilter();",
      "info" : "ExpressionStatement[25528-25567]:ExpressionStatement[25736-25775]"
    }, {
      "left" : "if (returnEnd)",
      "right" : "if (returnEnd)",
      "info" : "IfStatement[25589-25661]:IfStatement[25797-25869]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25604-25661]:Block[25812-25869]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[25630-25639]:ReturnStatement[25838-25847]"
    }, {
      "left" : "if (gotEnd || (_headContext == buffRoot))",
      "right" : "if (gotEnd || (_headContext == buffRoot))",
      "info" : "IfStatement[25760-25862]:IfStatement[25968-26070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25802-25862]:Block[26010-26070]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[25828-25840]:ReturnStatement[26036-26048]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[25897-25916]:ContinueStatement[26105-26124]"
    }, {
      "left" : "case ID_FIELD_NAME:",
      "right" : "case ID_FIELD_NAME:",
      "info" : "SwitchCase[25930-25949]:SwitchCase[26138-26157]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[25966-26948]:Block[26174-27183]"
    }, {
      "left" : "final String name = delegate.getCurrentName();",
      "right" : "final String name = delegate.getCurrentName();",
      "info" : "VariableDeclarationStatement[25988-26034]:VariableDeclarationStatement[26196-26242]"
    }, {
      "left" : "f = _headContext.setFieldName(name);",
      "right" : "f = _headContext.setFieldName(name);",
      "info" : "ExpressionStatement[26055-26091]:ExpressionStatement[26263-26299]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[26112-26266]:IfStatement[26320-26474]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26146-26266]:Block[26354-26474]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[26172-26188]:ExpressionStatement[26380-26396]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[26213-26244]:ReturnStatement[26421-26452]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[26287-26488]:IfStatement[26495-26696]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26302-26488]:Block[26510-26696]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[26352-26373]:ExpressionStatement[26560-26581]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[26398-26422]:ExpressionStatement[26606-26630]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[26447-26466]:ContinueStatement[26655-26674]"
    }, {
      "left" : "f = f.includeProperty(name);",
      "right" : "f = f.includeProperty(name);",
      "info" : "ExpressionStatement[26509-26537]:ExpressionStatement[26717-26745]"
    }, {
      "left" : "if (f == null)",
      "right" : "if (f == null)",
      "info" : "IfStatement[26558-26759]:IfStatement[26766-26967]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26573-26759]:Block[26781-26967]"
    }, {
      "left" : "delegate.nextToken();",
      "right" : "delegate.nextToken();",
      "info" : "ExpressionStatement[26623-26644]:ExpressionStatement[26831-26852]"
    }, {
      "left" : "delegate.skipChildren();",
      "right" : "delegate.skipChildren();",
      "info" : "ExpressionStatement[26669-26693]:ExpressionStatement[26877-26901]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[26718-26737]:ContinueStatement[26926-26945]"
    }, {
      "left" : "_itemFilter = f;",
      "right" : "_itemFilter = f;",
      "info" : "ExpressionStatement[26780-26796]:ExpressionStatement[26988-27004]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL && _verifyAllowedMatches())",
      "info" : "IfStatement[26817-26930]:IfStatement[27025-27165]"
    }, {
      "left" : "f == TokenFilter.INCLUDE_ALL",
      "right" : "f == TokenFilter.INCLUDE_ALL",
      "info" : "InfixExpression[26821-26849]:InfixExpression[27029-27057]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[26851-26930]:Block[27086-27165]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[26877-26908]:ReturnStatement[27112-27143]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[26965-26984]:ContinueStatement[27200-27219]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[26998-27006]:SwitchCase[27233-27241]"
    }, {
      "left" : "f = _itemFilter;",
      "right" : "f = _itemFilter;",
      "info" : "ExpressionStatement[27039-27055]:ExpressionStatement[27274-27290]"
    }, {
      "left" : "if (f == TokenFilter.INCLUDE_ALL)",
      "right" : "if (f == TokenFilter.INCLUDE_ALL)",
      "info" : "IfStatement[27072-27177]:IfStatement[27307-27412]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27106-27177]:Block[27341-27412]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[27128-27159]:ReturnStatement[27363-27394]"
    }, {
      "left" : "if (f != null)",
      "right" : "if (f != null)",
      "info" : "IfStatement[27194-27493]:IfStatement[27429-27809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27209-27493]:Block[27444-27809]"
    }, {
      "left" : "f = _headContext.checkValue(f);",
      "right" : "f = _headContext.checkValue(f);",
      "info" : "ExpressionStatement[27231-27262]:ExpressionStatement[27466-27497]"
    }, {
      "left" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "right" : "if ((f == TokenFilter.INCLUDE_ALL)\n                            || ((f != null) && f.includeValue(delegate)))",
      "info" : "IfStatement[27283-27475]:IfStatement[27518-27791]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27392-27475]:Block[27627-27791]"
    }, {
      "left" : "return _nextBuffered(buffRoot);",
      "right" : "return _nextBuffered(buffRoot);",
      "info" : "ReturnStatement[27422-27453]:ReturnStatement[27712-27743]"
    }, {
      "left" : "continue main_loop;",
      "right" : "continue main_loop;",
      "info" : "ContinueStatement[27589-27608]:ContinueStatement[27905-27924]"
    }, {
      "left" : "private",
      "right" : "private",
      "info" : "Modifier[27644-27651]:Modifier[27960-27967]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[27652-27661]:SimpleType[27968-27977]"
    }, {
      "left" : "_nextBuffered",
      "right" : "_nextBuffered",
      "info" : "SimpleName[27662-27675]:SimpleName[27978-27991]"
    }, {
      "left" : "TokenFilterContext buffRoot",
      "right" : "TokenFilterContext buffRoot",
      "info" : "SingleVariableDeclaration[27676-27703]:SingleVariableDeclaration[27992-28019]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[27712-27723]:SimpleType[28028-28039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27728-28679]:Block[28044-28995]"
    }, {
      "left" : "_exposedContext = buffRoot;",
      "right" : "_exposedContext = buffRoot;",
      "info" : "ExpressionStatement[27738-27765]:ExpressionStatement[28054-28081]"
    }, {
      "left" : "TokenFilterContext ctxt = buffRoot;",
      "right" : "TokenFilterContext ctxt = buffRoot;",
      "info" : "VariableDeclarationStatement[27774-27809]:VariableDeclarationStatement[28090-28125]"
    }, {
      "left" : "JsonToken t = ctxt.nextTokenToRead();",
      "right" : "JsonToken t = ctxt.nextTokenToRead();",
      "info" : "VariableDeclarationStatement[27818-27855]:VariableDeclarationStatement[28134-28171]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[27864-27912]:IfStatement[28180-28228]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27879-27912]:Block[28195-28228]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[27893-27902]:ReturnStatement[28209-28218]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[27921-28673]:WhileStatement[28237-28989]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[27934-28673]:Block[28250-28989]"
    }, {
      "left" : "if (ctxt == _headContext)",
      "right" : "if (ctxt == _headContext)",
      "info" : "IfStatement[27993-28235]:IfStatement[28309-28551]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28019-28235]:Block[28335-28551]"
    }, {
      "left" : "throw _constructError(\"Internal error: failed to locate expected buffered tokens\");",
      "right" : "throw _constructError(\"Internal error: failed to locate expected buffered tokens\");",
      "info" : "ThrowStatement[28037-28120]:ThrowStatement[28353-28436]"
    }, {
      "left" : "ctxt = _exposedContext.findChildOf(ctxt);",
      "right" : "ctxt = _exposedContext.findChildOf(ctxt);",
      "info" : "ExpressionStatement[28303-28344]:ExpressionStatement[28619-28660]"
    }, {
      "left" : "_exposedContext = ctxt;",
      "right" : "_exposedContext = ctxt;",
      "info" : "ExpressionStatement[28357-28380]:ExpressionStatement[28673-28696]"
    }, {
      "left" : "if (ctxt == null)",
      "right" : "if (ctxt == null)",
      "info" : "IfStatement[28393-28543]:IfStatement[28709-28859]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28411-28543]:Block[28727-28859]"
    }, {
      "left" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "right" : "throw _constructError(\"Unexpected problem: chain of filtered context broken\");",
      "info" : "ThrowStatement[28451-28529]:ThrowStatement[28767-28845]"
    }, {
      "left" : "t = _exposedContext.nextTokenToRead();",
      "right" : "t = _exposedContext.nextTokenToRead();",
      "info" : "ExpressionStatement[28556-28594]:ExpressionStatement[28872-28910]"
    }, {
      "left" : "if (t != null)",
      "right" : "if (t != null)",
      "info" : "IfStatement[28607-28663]:IfStatement[28923-28979]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28622-28663]:Block[28938-28979]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[28640-28649]:ReturnStatement[28956-28965]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[28686-28695]:MarkerAnnotation[29220-29229]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[28700-28706]:Modifier[29234-29240]"
    }, {
      "left" : "JsonToken",
      "right" : "JsonToken",
      "info" : "SimpleType[28707-28716]:SimpleType[29241-29250]"
    }, {
      "left" : "nextValue",
      "right" : "nextValue",
      "info" : "SimpleName[28717-28726]:SimpleName[29251-29260]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[28736-28747]:SimpleType[29270-29281]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28748-28941]:Block[29282-29475]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[28811-28837]:VariableDeclarationStatement[29345-29371]"
    }, {
      "left" : "if (t == JsonToken.FIELD_NAME)",
      "right" : "if (t == JsonToken.FIELD_NAME)",
      "info" : "IfStatement[28846-28917]:IfStatement[29380-29451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[28877-28917]:Block[29411-29451]"
    }, {
      "left" : "t = nextToken();",
      "right" : "t = nextToken();",
      "info" : "ExpressionStatement[28891-28907]:ExpressionStatement[29425-29441]"
    }, {
      "left" : "return t;",
      "right" : "return t;",
      "info" : "ReturnStatement[28926-28935]:ReturnStatement[29460-29469]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[29135-29144]:MarkerAnnotation[29669-29678]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[29149-29155]:Modifier[29683-29689]"
    }, {
      "left" : "JsonParser",
      "right" : "JsonParser",
      "info" : "SimpleType[29156-29166]:SimpleType[29690-29700]"
    }, {
      "left" : "skipChildren",
      "right" : "skipChildren",
      "info" : "SimpleName[29167-29179]:SimpleName[29701-29713]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[29189-29200]:SimpleType[29723-29734]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29205-29891]:Block[29739-30425]"
    }, {
      "left" : "if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY))",
      "right" : "if ((_currToken != JsonToken.START_OBJECT)\n            && (_currToken != JsonToken.START_ARRAY))",
      "info" : "IfStatement[29215-29348]:IfStatement[29749-29882]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29312-29348]:Block[29846-29882]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[29326-29338]:ReturnStatement[29860-29872]"
    }, {
      "left" : "int open = 1;",
      "right" : "int open = 1;",
      "info" : "VariableDeclarationStatement[29357-29370]:VariableDeclarationStatement[29891-29904]"
    }, {
      "left" : "while (true)",
      "right" : "while (true)",
      "info" : "WhileStatement[29509-29885]:WhileStatement[30043-30419]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29522-29885]:Block[30056-30419]"
    }, {
      "left" : "JsonToken t = nextToken();",
      "right" : "JsonToken t = nextToken();",
      "info" : "VariableDeclarationStatement[29536-29562]:VariableDeclarationStatement[30070-30096]"
    }, {
      "left" : "if (t == null)",
      "right" : "if (t == null)",
      "info" : "IfStatement[29575-29672]:IfStatement[30109-30206]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29590-29672]:Block[30124-30206]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[29646-29658]:ReturnStatement[30180-30192]"
    }, {
      "left" : "if (t.isStructStart())",
      "right" : "if (t.isStructStart())",
      "info" : "IfStatement[29685-29875]:IfStatement[30219-30409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29708-29747]:Block[30242-30281]"
    }, {
      "left" : "++open;",
      "right" : "++open;",
      "info" : "ExpressionStatement[29726-29733]:ExpressionStatement[30260-30267]"
    }, {
      "left" : "if (t.isStructEnd())",
      "right" : "if (t.isStructEnd())",
      "info" : "IfStatement[29753-29875]:IfStatement[30287-30409]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29774-29875]:Block[30308-30409]"
    }, {
      "left" : "if (--open == 0)",
      "right" : "if (--open == 0)",
      "info" : "IfStatement[29792-29861]:IfStatement[30326-30395]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[29809-29861]:Block[30343-30395]"
    }, {
      "left" : "return this;",
      "right" : "return this;",
      "info" : "ReturnStatement[29831-29843]:ReturnStatement[30365-30377]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30098-30107]:MarkerAnnotation[30632-30641]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30108-30114]:Modifier[30642-30648]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[30115-30121]:SimpleType[30649-30655]"
    }, {
      "left" : "getText",
      "right" : "getText",
      "info" : "SimpleName[30122-30129]:SimpleName[30656-30663]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30139-30150]:SimpleType[30673-30684]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30151-30182]:Block[30685-30716]"
    }, {
      "left" : "return delegate.getText();",
      "right" : "return delegate.getText();",
      "info" : "ReturnStatement[30153-30179]:ReturnStatement[30687-30713]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30187-30196]:MarkerAnnotation[30721-30730]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30197-30203]:Modifier[30731-30737]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30204-30211]:PrimitiveType[30738-30745]"
    }, {
      "left" : "hasTextCharacters",
      "right" : "hasTextCharacters",
      "info" : "SimpleName[30212-30229]:SimpleName[30746-30763]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30232-30272]:Block[30766-30806]"
    }, {
      "left" : "return delegate.hasTextCharacters();",
      "right" : "return delegate.hasTextCharacters();",
      "info" : "ReturnStatement[30234-30270]:ReturnStatement[30768-30804]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30277-30286]:MarkerAnnotation[30811-30820]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30287-30293]:Modifier[30821-30827]"
    }, {
      "left" : "char[]",
      "right" : "char[]",
      "info" : "ArrayType[30294-30300]:ArrayType[30828-30834]"
    }, {
      "left" : "getTextCharacters",
      "right" : "getTextCharacters",
      "info" : "SimpleName[30301-30318]:SimpleName[30835-30852]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30328-30339]:SimpleType[30862-30873]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30340-30380]:Block[30874-30914]"
    }, {
      "left" : "return delegate.getTextCharacters();",
      "right" : "return delegate.getTextCharacters();",
      "info" : "ReturnStatement[30342-30378]:ReturnStatement[30876-30912]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30385-30394]:MarkerAnnotation[30919-30928]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30395-30401]:Modifier[30929-30935]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30402-30405]:PrimitiveType[30936-30939]"
    }, {
      "left" : "getTextLength",
      "right" : "getTextLength",
      "info" : "SimpleName[30406-30419]:SimpleName[30940-30953]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30429-30440]:SimpleType[30963-30974]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30441-30477]:Block[30975-31011]"
    }, {
      "left" : "return delegate.getTextLength();",
      "right" : "return delegate.getTextLength();",
      "info" : "ReturnStatement[30443-30475]:ReturnStatement[30977-31009]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30482-30491]:MarkerAnnotation[31016-31025]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30492-30498]:Modifier[31026-31032]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[30499-30502]:PrimitiveType[31033-31036]"
    }, {
      "left" : "getTextOffset",
      "right" : "getTextOffset",
      "info" : "SimpleName[30503-30516]:SimpleName[31037-31050]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30526-30537]:SimpleType[31060-31071]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30538-30574]:Block[31072-31108]"
    }, {
      "left" : "return delegate.getTextOffset();",
      "right" : "return delegate.getTextOffset();",
      "info" : "ReturnStatement[30540-30572]:ReturnStatement[31074-31106]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30784-30793]:MarkerAnnotation[31318-31327]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30798-30804]:Modifier[31332-31338]"
    }, {
      "left" : "BigInteger",
      "right" : "BigInteger",
      "info" : "SimpleType[30805-30815]:SimpleType[31339-31349]"
    }, {
      "left" : "getBigIntegerValue",
      "right" : "getBigIntegerValue",
      "info" : "SimpleName[30816-30834]:SimpleName[31350-31368]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30844-30855]:SimpleType[31378-31389]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30856-30897]:Block[31390-31431]"
    }, {
      "left" : "return delegate.getBigIntegerValue();",
      "right" : "return delegate.getBigIntegerValue();",
      "info" : "ReturnStatement[30858-30895]:ReturnStatement[31392-31429]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[30903-30912]:MarkerAnnotation[31437-31446]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[30917-30923]:Modifier[31451-31457]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[30924-30931]:PrimitiveType[31458-31465]"
    }, {
      "left" : "getBooleanValue",
      "right" : "getBooleanValue",
      "info" : "SimpleName[30932-30947]:SimpleName[31466-31481]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[30957-30968]:SimpleType[31491-31502]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[30969-31007]:Block[31503-31541]"
    }, {
      "left" : "return delegate.getBooleanValue();",
      "right" : "return delegate.getBooleanValue();",
      "info" : "ReturnStatement[30971-31005]:ReturnStatement[31505-31539]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31017-31026]:MarkerAnnotation[31551-31560]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31031-31037]:Modifier[31565-31571]"
    }, {
      "left" : "byte",
      "right" : "byte",
      "info" : "PrimitiveType[31038-31042]:PrimitiveType[31572-31576]"
    }, {
      "left" : "getByteValue",
      "right" : "getByteValue",
      "info" : "SimpleName[31043-31055]:SimpleName[31577-31589]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31065-31076]:SimpleType[31599-31610]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31077-31112]:Block[31611-31646]"
    }, {
      "left" : "return delegate.getByteValue();",
      "right" : "return delegate.getByteValue();",
      "info" : "ReturnStatement[31079-31110]:ReturnStatement[31613-31644]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31118-31127]:MarkerAnnotation[31652-31661]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31132-31138]:Modifier[31666-31672]"
    }, {
      "left" : "short",
      "right" : "short",
      "info" : "PrimitiveType[31139-31144]:PrimitiveType[31673-31678]"
    }, {
      "left" : "getShortValue",
      "right" : "getShortValue",
      "info" : "SimpleName[31145-31158]:SimpleName[31679-31692]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31168-31179]:SimpleType[31702-31713]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31180-31216]:Block[31714-31750]"
    }, {
      "left" : "return delegate.getShortValue();",
      "right" : "return delegate.getShortValue();",
      "info" : "ReturnStatement[31182-31214]:ReturnStatement[31716-31748]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31222-31231]:MarkerAnnotation[31756-31765]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31236-31242]:Modifier[31770-31776]"
    }, {
      "left" : "BigDecimal",
      "right" : "BigDecimal",
      "info" : "SimpleType[31243-31253]:SimpleType[31777-31787]"
    }, {
      "left" : "getDecimalValue",
      "right" : "getDecimalValue",
      "info" : "SimpleName[31254-31269]:SimpleName[31788-31803]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31279-31290]:SimpleType[31813-31824]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31291-31329]:Block[31825-31863]"
    }, {
      "left" : "return delegate.getDecimalValue();",
      "right" : "return delegate.getDecimalValue();",
      "info" : "ReturnStatement[31293-31327]:ReturnStatement[31827-31861]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31335-31344]:MarkerAnnotation[31869-31878]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31349-31355]:Modifier[31883-31889]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[31356-31362]:PrimitiveType[31890-31896]"
    }, {
      "left" : "getDoubleValue",
      "right" : "getDoubleValue",
      "info" : "SimpleName[31363-31377]:SimpleName[31897-31911]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31387-31398]:SimpleType[31921-31932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31399-31436]:Block[31933-31970]"
    }, {
      "left" : "return delegate.getDoubleValue();",
      "right" : "return delegate.getDoubleValue();",
      "info" : "ReturnStatement[31401-31434]:ReturnStatement[31935-31968]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31442-31451]:MarkerAnnotation[31976-31985]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31456-31462]:Modifier[31990-31996]"
    }, {
      "left" : "float",
      "right" : "float",
      "info" : "PrimitiveType[31463-31468]:PrimitiveType[31997-32002]"
    }, {
      "left" : "getFloatValue",
      "right" : "getFloatValue",
      "info" : "SimpleName[31469-31482]:SimpleName[32003-32016]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31492-31503]:SimpleType[32026-32037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31504-31540]:Block[32038-32074]"
    }, {
      "left" : "return delegate.getFloatValue();",
      "right" : "return delegate.getFloatValue();",
      "info" : "ReturnStatement[31506-31538]:ReturnStatement[32040-32072]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31546-31555]:MarkerAnnotation[32080-32089]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31560-31566]:Modifier[32094-32100]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[31567-31570]:PrimitiveType[32101-32104]"
    }, {
      "left" : "getIntValue",
      "right" : "getIntValue",
      "info" : "SimpleName[31571-31582]:SimpleName[32105-32116]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31592-31603]:SimpleType[32126-32137]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31604-31638]:Block[32138-32172]"
    }, {
      "left" : "return delegate.getIntValue();",
      "right" : "return delegate.getIntValue();",
      "info" : "ReturnStatement[31606-31636]:ReturnStatement[32140-32170]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31644-31653]:MarkerAnnotation[32178-32187]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31658-31664]:Modifier[32192-32198]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[31665-31669]:PrimitiveType[32199-32203]"
    }, {
      "left" : "getLongValue",
      "right" : "getLongValue",
      "info" : "SimpleName[31670-31682]:SimpleName[32204-32216]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31692-31703]:SimpleType[32226-32237]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31704-31739]:Block[32238-32273]"
    }, {
      "left" : "return delegate.getLongValue();",
      "right" : "return delegate.getLongValue();",
      "info" : "ReturnStatement[31706-31737]:ReturnStatement[32240-32271]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31745-31754]:MarkerAnnotation[32279-32288]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31759-31765]:Modifier[32293-32299]"
    }, {
      "left" : "NumberType",
      "right" : "NumberType",
      "info" : "SimpleType[31766-31776]:SimpleType[32300-32310]"
    }, {
      "left" : "getNumberType",
      "right" : "getNumberType",
      "info" : "SimpleName[31777-31790]:SimpleName[32311-32324]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31800-31811]:SimpleType[32334-32345]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31812-31848]:Block[32346-32382]"
    }, {
      "left" : "return delegate.getNumberType();",
      "right" : "return delegate.getNumberType();",
      "info" : "ReturnStatement[31814-31846]:ReturnStatement[32348-32380]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[31854-31863]:MarkerAnnotation[32388-32397]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[31868-31874]:Modifier[32402-32408]"
    }, {
      "left" : "Number",
      "right" : "Number",
      "info" : "SimpleType[31875-31881]:SimpleType[32409-32415]"
    }, {
      "left" : "getNumberValue",
      "right" : "getNumberValue",
      "info" : "SimpleName[31882-31896]:SimpleName[32416-32430]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[31906-31917]:SimpleType[32440-32451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[31918-31955]:Block[32452-32489]"
    }, {
      "left" : "return delegate.getNumberValue();",
      "right" : "return delegate.getNumberValue();",
      "info" : "ReturnStatement[31920-31953]:ReturnStatement[32454-32487]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32177-32186]:MarkerAnnotation[32711-32720]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32187-32193]:Modifier[32721-32727]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32194-32197]:PrimitiveType[32728-32731]"
    }, {
      "left" : "getValueAsInt",
      "right" : "getValueAsInt",
      "info" : "SimpleName[32198-32211]:SimpleName[32732-32745]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32221-32232]:SimpleType[32755-32766]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32233-32269]:Block[32767-32803]"
    }, {
      "left" : "return delegate.getValueAsInt();",
      "right" : "return delegate.getValueAsInt();",
      "info" : "ReturnStatement[32235-32267]:ReturnStatement[32769-32801]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32274-32283]:MarkerAnnotation[32808-32817]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32284-32290]:Modifier[32818-32824]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[32291-32294]:PrimitiveType[32825-32828]"
    }, {
      "left" : "getValueAsInt",
      "right" : "getValueAsInt",
      "info" : "SimpleName[32295-32308]:SimpleName[32829-32842]"
    }, {
      "left" : "int defaultValue",
      "right" : "int defaultValue",
      "info" : "SingleVariableDeclaration[32309-32325]:SingleVariableDeclaration[32843-32859]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32334-32345]:SimpleType[32868-32879]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32346-32394]:Block[32880-32928]"
    }, {
      "left" : "return delegate.getValueAsInt(defaultValue);",
      "right" : "return delegate.getValueAsInt(defaultValue);",
      "info" : "ReturnStatement[32348-32392]:ReturnStatement[32882-32926]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32399-32408]:MarkerAnnotation[32933-32942]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32409-32415]:Modifier[32943-32949]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[32416-32420]:PrimitiveType[32950-32954]"
    }, {
      "left" : "getValueAsLong",
      "right" : "getValueAsLong",
      "info" : "SimpleName[32421-32435]:SimpleName[32955-32969]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32445-32456]:SimpleType[32979-32990]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32457-32494]:Block[32991-33028]"
    }, {
      "left" : "return delegate.getValueAsLong();",
      "right" : "return delegate.getValueAsLong();",
      "info" : "ReturnStatement[32459-32492]:ReturnStatement[32993-33026]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32499-32508]:MarkerAnnotation[33033-33042]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32509-32515]:Modifier[33043-33049]"
    }, {
      "left" : "long",
      "right" : "long",
      "info" : "PrimitiveType[32516-32520]:PrimitiveType[33050-33054]"
    }, {
      "left" : "getValueAsLong",
      "right" : "getValueAsLong",
      "info" : "SimpleName[32521-32535]:SimpleName[33055-33069]"
    }, {
      "left" : "long defaultValue",
      "right" : "long defaultValue",
      "info" : "SingleVariableDeclaration[32536-32553]:SingleVariableDeclaration[33070-33087]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32562-32573]:SimpleType[33096-33107]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32574-32623]:Block[33108-33157]"
    }, {
      "left" : "return delegate.getValueAsLong(defaultValue);",
      "right" : "return delegate.getValueAsLong(defaultValue);",
      "info" : "ReturnStatement[32576-32621]:ReturnStatement[33110-33155]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32628-32637]:MarkerAnnotation[33162-33171]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32638-32644]:Modifier[33172-33178]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[32645-32651]:PrimitiveType[33179-33185]"
    }, {
      "left" : "getValueAsDouble",
      "right" : "getValueAsDouble",
      "info" : "SimpleName[32652-32668]:SimpleName[33186-33202]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32678-32689]:SimpleType[33212-33223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32690-32729]:Block[33224-33263]"
    }, {
      "left" : "return delegate.getValueAsDouble();",
      "right" : "return delegate.getValueAsDouble();",
      "info" : "ReturnStatement[32692-32727]:ReturnStatement[33226-33261]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32734-32743]:MarkerAnnotation[33268-33277]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32744-32750]:Modifier[33278-33284]"
    }, {
      "left" : "double",
      "right" : "double",
      "info" : "PrimitiveType[32751-32757]:PrimitiveType[33285-33291]"
    }, {
      "left" : "getValueAsDouble",
      "right" : "getValueAsDouble",
      "info" : "SimpleName[32758-32774]:SimpleName[33292-33308]"
    }, {
      "left" : "double defaultValue",
      "right" : "double defaultValue",
      "info" : "SingleVariableDeclaration[32775-32794]:SingleVariableDeclaration[33309-33328]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32803-32814]:SimpleType[33337-33348]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32815-32866]:Block[33349-33400]"
    }, {
      "left" : "return delegate.getValueAsDouble(defaultValue);",
      "right" : "return delegate.getValueAsDouble(defaultValue);",
      "info" : "ReturnStatement[32817-32864]:ReturnStatement[33351-33398]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32871-32880]:MarkerAnnotation[33405-33414]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32881-32887]:Modifier[33415-33421]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32888-32895]:PrimitiveType[33422-33429]"
    }, {
      "left" : "getValueAsBoolean",
      "right" : "getValueAsBoolean",
      "info" : "SimpleName[32896-32913]:SimpleName[33430-33447]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[32923-32934]:SimpleType[33457-33468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[32935-32975]:Block[33469-33509]"
    }, {
      "left" : "return delegate.getValueAsBoolean();",
      "right" : "return delegate.getValueAsBoolean();",
      "info" : "ReturnStatement[32937-32973]:ReturnStatement[33471-33507]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[32980-32989]:MarkerAnnotation[33514-33523]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[32990-32996]:Modifier[33524-33530]"
    }, {
      "left" : "boolean",
      "right" : "boolean",
      "info" : "PrimitiveType[32997-33004]:PrimitiveType[33531-33538]"
    }, {
      "left" : "getValueAsBoolean",
      "right" : "getValueAsBoolean",
      "info" : "SimpleName[33005-33022]:SimpleName[33539-33556]"
    }, {
      "left" : "boolean defaultValue",
      "right" : "boolean defaultValue",
      "info" : "SingleVariableDeclaration[33023-33043]:SingleVariableDeclaration[33557-33577]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33052-33063]:SimpleType[33586-33597]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33064-33116]:Block[33598-33650]"
    }, {
      "left" : "return delegate.getValueAsBoolean(defaultValue);",
      "right" : "return delegate.getValueAsBoolean(defaultValue);",
      "info" : "ReturnStatement[33066-33114]:ReturnStatement[33600-33648]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33121-33130]:MarkerAnnotation[33655-33664]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33131-33137]:Modifier[33665-33671]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33138-33144]:SimpleType[33672-33678]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[33145-33161]:SimpleName[33679-33695]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33171-33182]:SimpleType[33705-33716]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33183-33222]:Block[33717-33756]"
    }, {
      "left" : "return delegate.getValueAsString();",
      "right" : "return delegate.getValueAsString();",
      "info" : "ReturnStatement[33185-33220]:ReturnStatement[33719-33754]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33227-33236]:MarkerAnnotation[33761-33770]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33237-33243]:Modifier[33771-33777]"
    }, {
      "left" : "String",
      "right" : "String",
      "info" : "SimpleType[33244-33250]:SimpleType[33778-33784]"
    }, {
      "left" : "getValueAsString",
      "right" : "getValueAsString",
      "info" : "SimpleName[33251-33267]:SimpleName[33785-33801]"
    }, {
      "left" : "String defaultValue",
      "right" : "String defaultValue",
      "info" : "SingleVariableDeclaration[33268-33287]:SingleVariableDeclaration[33802-33821]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33296-33307]:SimpleType[33830-33841]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33308-33359]:Block[33842-33893]"
    }, {
      "left" : "return delegate.getValueAsString(defaultValue);",
      "right" : "return delegate.getValueAsString(defaultValue);",
      "info" : "ReturnStatement[33310-33357]:ReturnStatement[33844-33891]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33562-33571]:MarkerAnnotation[34096-34105]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33572-33578]:Modifier[34106-34112]"
    }, {
      "left" : "Object",
      "right" : "Object",
      "info" : "SimpleType[33579-33585]:SimpleType[34113-34119]"
    }, {
      "left" : "getEmbeddedObject",
      "right" : "getEmbeddedObject",
      "info" : "SimpleName[33586-33603]:SimpleName[34120-34137]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33613-33624]:SimpleType[34147-34158]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33625-33665]:Block[34159-34199]"
    }, {
      "left" : "return delegate.getEmbeddedObject();",
      "right" : "return delegate.getEmbeddedObject();",
      "info" : "ReturnStatement[33627-33663]:ReturnStatement[34161-34197]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33670-33679]:MarkerAnnotation[34204-34213]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33680-33686]:Modifier[34214-34220]"
    }, {
      "left" : "byte[]",
      "right" : "byte[]",
      "info" : "ArrayType[33687-33693]:ArrayType[34221-34227]"
    }, {
      "left" : "getBinaryValue",
      "right" : "getBinaryValue",
      "info" : "SimpleName[33694-33708]:SimpleName[34228-34242]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[33709-33733]:SingleVariableDeclaration[34243-34267]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33742-33753]:SimpleType[34276-34287]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33754-33801]:Block[34288-34335]"
    }, {
      "left" : "return delegate.getBinaryValue(b64variant);",
      "right" : "return delegate.getBinaryValue(b64variant);",
      "info" : "ReturnStatement[33756-33799]:ReturnStatement[34290-34333]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33806-33815]:MarkerAnnotation[34340-34349]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33816-33822]:Modifier[34350-34356]"
    }, {
      "left" : "int",
      "right" : "int",
      "info" : "PrimitiveType[33823-33826]:PrimitiveType[34357-34360]"
    }, {
      "left" : "readBinaryValue",
      "right" : "readBinaryValue",
      "info" : "SimpleName[33827-33842]:SimpleName[34361-34376]"
    }, {
      "left" : "Base64Variant b64variant",
      "right" : "Base64Variant b64variant",
      "info" : "SingleVariableDeclaration[33843-33867]:SingleVariableDeclaration[34377-34401]"
    }, {
      "left" : "OutputStream out",
      "right" : "OutputStream out",
      "info" : "SingleVariableDeclaration[33869-33885]:SingleVariableDeclaration[34403-34419]"
    }, {
      "left" : "IOException",
      "right" : "IOException",
      "info" : "SimpleType[33894-33905]:SimpleType[34428-34439]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[33906-33959]:Block[34440-34493]"
    }, {
      "left" : "return delegate.readBinaryValue(b64variant, out);",
      "right" : "return delegate.readBinaryValue(b64variant, out);",
      "info" : "ReturnStatement[33908-33957]:ReturnStatement[34442-34491]"
    }, {
      "left" : "@Override",
      "right" : "@Override",
      "info" : "MarkerAnnotation[33964-33973]:MarkerAnnotation[34498-34507]"
    }, {
      "left" : "public",
      "right" : "public",
      "info" : "Modifier[33974-33980]:Modifier[34508-34514]"
    }, {
      "left" : "JsonLocation",
      "right" : "JsonLocation",
      "info" : "SimpleType[33981-33993]:SimpleType[34515-34527]"
    }, {
      "left" : "getTokenLocation",
      "right" : "getTokenLocation",
      "info" : "SimpleName[33994-34010]:SimpleName[34528-34544]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34013-34052]:Block[34547-34586]"
    }, {
      "left" : "return delegate.getTokenLocation();",
      "right" : "return delegate.getTokenLocation();",
      "info" : "ReturnStatement[34015-34050]:ReturnStatement[34549-34584]"
    }, {
      "left" : "protected",
      "right" : "protected",
      "info" : "Modifier[34233-34242]:Modifier[34767-34776]"
    }, {
      "left" : "JsonStreamContext",
      "right" : "JsonStreamContext",
      "info" : "SimpleType[34243-34260]:SimpleType[34777-34794]"
    }, {
      "left" : "_filterContext",
      "right" : "_filterContext",
      "info" : "SimpleName[34261-34275]:SimpleName[34795-34809]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34278-34399]:Block[34812-34933]"
    }, {
      "left" : "if (_exposedContext != null)",
      "right" : "if (_exposedContext != null)",
      "info" : "IfStatement[34288-34364]:IfStatement[34822-34898]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[34317-34364]:Block[34851-34898]"
    }, {
      "left" : "return _exposedContext;",
      "right" : "return _exposedContext;",
      "info" : "ReturnStatement[34331-34354]:ReturnStatement[34865-34888]"
    }, {
      "left" : "return _headContext;",
      "right" : "return _headContext;",
      "info" : "ReturnStatement[34373-34393]:ReturnStatement[34907-34927]"
    } ]
  },
  "interFileMappings" : { }
}