{
  "intraFileMappings" : {
    "matchedElements" : [
 {
      "left" : "CoreFunction",
      "right" : "CoreFunction",
      "info" : "TypeDeclaration[1514-24844]:TypeDeclaration[1514-25132]"
    }, {
      "left" : "private static final Double ZERO = new Double(0);",
      "right" : "private static final Double ZERO = new Double(0);",
      "info" : "FieldDeclaration[1743-1792]:FieldDeclaration[1743-1792]"
    }, {
      "left" : "private int functionCode;",
      "right" : "private int functionCode;",
      "info" : "FieldDeclaration[1797-1822]:FieldDeclaration[1797-1822]"
    }, {
      "left" : "public CoreFunction(int functionCode, Expression args[])",
      "right" : "public CoreFunction(int functionCode, Expression args[])",
      "info" : "MethodDeclaration[1828-1955]:MethodDeclaration[1828-1955]"
    }, {
      "left" : "public int getFunctionCode()",
      "right" : "public int getFunctionCode()",
      "info" : "MethodDeclaration[1961-2026]:MethodDeclaration[1961-2026]"
    }, {
      "left" : "protected String getFunctionName()",
      "right" : "protected String getFunctionName()",
      "info" : "MethodDeclaration[2036-4498]:MethodDeclaration[2036-4498]"
    }, {
      "left" : "public Expression getArg1()",
      "right" : "public Expression getArg1()",
      "info" : "MethodDeclaration[4504-4563]:MethodDeclaration[4504-4563]"
    }, {
      "left" : "public Expression getArg2()",
      "right" : "public Expression getArg2()",
      "info" : "MethodDeclaration[4569-4628]:MethodDeclaration[4569-4628]"
    }, {
      "left" : "public Expression getArg3()",
      "right" : "public Expression getArg3()",
      "info" : "MethodDeclaration[4634-4693]:MethodDeclaration[4634-4693]"
    }, {
      "left" : "public int getArgumentCount()",
      "right" : "public int getArgumentCount()",
      "info" : "MethodDeclaration[4699-4824]:MethodDeclaration[4699-4824]"
    }, {
      "left" : "public boolean computeContextDependent()",
      "right" : "public boolean computeContextDependent()",
      "info" : "MethodDeclaration[4830-6688]:MethodDeclaration[4830-6688]"
    }, {
      "left" : "public String toString()",
      "right" : "public String toString()",
      "info" : "MethodDeclaration[6694-7184]:MethodDeclaration[6694-7184]"
    }, {
      "left" : "public Object compute(EvalContext context)",
      "right" : "public Object compute(EvalContext context)",
      "info" : "MethodDeclaration[7190-7278]:MethodDeclaration[7190-7278]"
    }, {
      "left" : "public Object computeValue(EvalContext context)",
      "right" : "public Object computeValue(EvalContext context)",
      "info" : "MethodDeclaration[7284-10292]:MethodDeclaration[7284-10292]"
    }, {
      "left" : "protected Object functionLast(EvalContext context)",
      "right" : "protected Object functionLast(EvalContext context)",
      "info" : "MethodDeclaration[10298-10800]:MethodDeclaration[10298-10800]"
    }, {
      "left" : "protected Object functionPosition(EvalContext context)",
      "right" : "protected Object functionPosition(EvalContext context)",
      "info" : "MethodDeclaration[10806-10953]:MethodDeclaration[10806-10953]"
    }, {
      "left" : "protected Object functionCount(EvalContext context)",
      "right" : "protected Object functionCount(EvalContext context)",
      "info" : "MethodDeclaration[10959-11723]:MethodDeclaration[10959-11723]"
    }, {
      "left" : "protected Object functionLang(EvalContext context)",
      "right" : "protected Object functionLang(EvalContext context)",
      "info" : "MethodDeclaration[11729-12117]:MethodDeclaration[11729-12117]"
    }, {
      "left" : "protected Object functionID(EvalContext context)",
      "right" : "protected Object functionID(EvalContext context)",
      "info" : "MethodDeclaration[12123-12487]:MethodDeclaration[12123-12487]"
    }, {
      "left" : "protected Object functionKey(EvalContext context)",
      "right" : "protected Object functionKey(EvalContext context)",
      "info" : "MethodDeclaration[12493-13571]:MethodDeclaration[12493-13571]"
    }, {
      "left" : "protected Object functionNamespaceURI(EvalContext context)",
      "right" : "protected Object functionNamespaceURI(EvalContext context)",
      "info" : "MethodDeclaration[13577-14248]:MethodDeclaration[13577-14248]"
    }, {
      "left" : "protected Object functionLocalName(EvalContext context)",
      "right" : "protected Object functionLocalName(EvalContext context)",
      "info" : "MethodDeclaration[14254-14824]:MethodDeclaration[14254-14824]"
    }, {
      "left" : "protected Object functionName(EvalContext context)",
      "right" : "protected Object functionName(EvalContext context)",
      "info" : "MethodDeclaration[14830-15397]:MethodDeclaration[14830-15397]"
    }, {
      "left" : "protected Object functionString(EvalContext context)",
      "right" : "protected Object functionString(EvalContext context)",
      "info" : "MethodDeclaration[15403-15689]:MethodDeclaration[15403-15689]"
    }, {
      "left" : "protected Object functionConcat(EvalContext context)",
      "right" : "protected Object functionConcat(EvalContext context)",
      "info" : "MethodDeclaration[15695-16098]:MethodDeclaration[15695-16098]"
    }, {
      "left" : "protected Object functionStartsWith(EvalContext context)",
      "right" : "protected Object functionStartsWith(EvalContext context)",
      "info" : "MethodDeclaration[16104-16416]:MethodDeclaration[16104-16416]"
    }, {
      "left" : "protected Object functionContains(EvalContext context)",
      "right" : "protected Object functionContains(EvalContext context)",
      "info" : "MethodDeclaration[16422-16735]:MethodDeclaration[16422-16735]"
    }, {
      "left" : "protected Object functionSubstringBefore(EvalContext context)",
      "right" : "protected Object functionSubstringBefore(EvalContext context)",
      "info" : "MethodDeclaration[16741-17128]:MethodDeclaration[16741-17128]"
    }, {
      "left" : "protected Object functionSubstringAfter(EvalContext context)",
      "right" : "protected Object functionSubstringAfter(EvalContext context)",
      "info" : "MethodDeclaration[17134-17531]:MethodDeclaration[17134-17531]"
    }, {
      "left" : "protected Object functionSubstring(EvalContext context)",
      "right" : "protected Object functionSubstring(EvalContext context)",
      "info" : "MethodDeclaration[17537-18756]:MethodDeclaration[17537-18756]"
    }, {
      "left" : "protected Object functionStringLength(EvalContext context)",
      "right" : "protected Object functionStringLength(EvalContext context)",
      "info" : "MethodDeclaration[18762-19138]:MethodDeclaration[18762-19138]"
    }, {
      "left" : "protected Object functionNormalizeSpace(EvalContext context)",
      "right" : "protected Object functionNormalizeSpace(EvalContext context)",
      "info" : "MethodDeclaration[19144-20118]:MethodDeclaration[19144-20118]"
    }, {
      "left" : "protected Object functionTranslate(EvalContext context)",
      "right" : "protected Object functionTranslate(EvalContext context)",
      "info" : "MethodDeclaration[20124-20903]:MethodDeclaration[20124-20903]"
    }, {
      "left" : "protected Object functionBoolean(EvalContext context)",
      "right" : "protected Object functionBoolean(EvalContext context)",
      "info" : "MethodDeclaration[20909-21126]:MethodDeclaration[20909-21126]"
    }, {
      "left" : "protected Object functionNot(EvalContext context)",
      "right" : "protected Object functionNot(EvalContext context)",
      "info" : "MethodDeclaration[21132-21345]:MethodDeclaration[21132-21345]"
    }, {
      "left" : "protected Object functionTrue(EvalContext context)",
      "right" : "protected Object functionTrue(EvalContext context)",
      "info" : "MethodDeclaration[21351-21465]:MethodDeclaration[21351-21465]"
    }, {
      "left" : "protected Object functionFalse(EvalContext context)",
      "right" : "protected Object functionFalse(EvalContext context)",
      "info" : "MethodDeclaration[21471-21587]:MethodDeclaration[21471-21587]"
    }, {
      "left" : "protected Object functionNull(EvalContext context)",
      "right" : "protected Object functionNull(EvalContext context)",
      "info" : "MethodDeclaration[21593-21699]:MethodDeclaration[21593-21699]"
    }, {
      "left" : "protected Object functionNumber(EvalContext context)",
      "right" : "protected Object functionNumber(EvalContext context)",
      "info" : "MethodDeclaration[21705-21981]:MethodDeclaration[21705-21981]"
    }, {
      "left" : "protected Object functionSum(EvalContext context)",
      "right" : "protected Object functionSum(EvalContext context)",
      "info" : "MethodDeclaration[21987-22614]:MethodDeclaration[21987-22614]"
    }, {
      "left" : "protected Object functionFloor(EvalContext context)",
      "right" : "protected Object functionFloor(EvalContext context)",
      "info" : "MethodDeclaration[22620-22825]:MethodDeclaration[22620-22921]"
    }, {
      "left" : "protected Object functionCeiling(EvalContext context)",
      "right" : "protected Object functionCeiling(EvalContext context)",
      "info" : "MethodDeclaration[22831-23037]:MethodDeclaration[22927-23229]"
    }, {
      "left" : "protected Object functionRound(EvalContext context)",
      "right" : "protected Object functionRound(EvalContext context)",
      "info" : "MethodDeclaration[23043-23248]:MethodDeclaration[23235-23536]"
    }, {
      "left" : "private Object functionFormatNumber(EvalContext context)",
      "right" : "private Object functionFormatNumber(EvalContext context)",
      "info" : "MethodDeclaration[23254-24495]:MethodDeclaration[23542-24783]"
    }, {
      "left" : "private void assertArgCount(int count)",
      "right" : "private void assertArgCount(int count)",
      "info" : "MethodDeclaration[24501-24585]:MethodDeclaration[24789-24873]"
    }, {
      "left" : "private void assertArgRange(int min, int max)",
      "right" : "private void assertArgRange(int min, int max)",
      "info" : "MethodDeclaration[24591-24842]:MethodDeclaration[24879-25130]"
    } ],
    "mappings" : [
 {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1885-1955]:Block[1885-1955]"
    }, {
      "left" : "super(args);",
      "right" : "super(args);",
      "info" : "SuperConstructorInvocation[1895-1907]:SuperConstructorInvocation[1895-1907]"
    }, {
      "left" : "this.functionCode = functionCode;",
      "right" : "this.functionCode = functionCode;",
      "info" : "ExpressionStatement[1916-1949]:ExpressionStatement[1916-1949]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[1990-2026]:Block[1990-2026]"
    }, {
      "left" : "return functionCode;",
      "right" : "return functionCode;",
      "info" : "ReturnStatement[2000-2020]:ReturnStatement[2000-2020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[2071-4498]:Block[2071-4498]"
    }, {
      "left" : "switch (functionCode) {\n            case Compiler.FUNCTION_LAST :\n                return \"last\";\n            case Compiler.FUNCTION_POSITION :\n                return \"position\";\n            case Compiler.FUNCTION_COUNT :\n                return \"count\";\n            case Compiler.FUNCTION_ID :\n                return \"id\";\n            case Compiler.FUNCTION_LOCAL_NAME :\n                return \"local-name\";\n            case Compiler.FUNCTION_NAMESPACE_URI :\n                return \"namespace-uri\";\n            case Compiler.FUNCTION_NAME :\n                return \"name\";\n            case Compiler.FUNCTION_STRING :\n                return \"string\";\n            case Compiler.FUNCTION_CONCAT :\n                return \"concat\";\n            case Compiler.FUNCTION_STARTS_WITH :\n                return \"starts-with\";\n            case Compiler.FUNCTION_CONTAINS :\n                return \"contains\";\n            case Compiler.FUNCTION_SUBSTRING_BEFORE :\n                return \"substring-before\";\n            case Compiler.FUNCTION_SUBSTRING_AFTER :\n                return \"substring-after\";\n            case Compiler.FUNCTION_SUBSTRING :\n                return \"substring\";\n            case Compiler.FUNCTION_STRING_LENGTH :\n                return \"string-length\";\n            case Compiler.FUNCTION_NORMALIZE_SPACE :\n                return \"normalize-space\";\n            case Compiler.FUNCTION_TRANSLATE :\n                return \"translate\";\n            case Compiler.FUNCTION_BOOLEAN :\n                return \"boolean\";\n            case Compiler.FUNCTION_NOT :\n                return \"not\";\n            case Compiler.FUNCTION_TRUE :\n                return \"true\";\n            case Compiler.FUNCTION_FALSE :\n                return \"false\";\n            case Compiler.FUNCTION_LANG :\n                return \"lang\";\n            case Compiler.FUNCTION_NUMBER :\n                return \"number\";\n            case Compiler.FUNCTION_SUM :\n                return \"sum\";\n            case Compiler.FUNCTION_FLOOR :\n                return \"floor\";\n            case Compiler.FUNCTION_CEILING :\n                return \"ceiling\";\n            case Compiler.FUNCTION_ROUND :\n                return \"round\";\n            case Compiler.FUNCTION_KEY :\n                return \"key\";\n            case Compiler.FUNCTION_FORMAT_NUMBER:\n                return \"format-number\";\n        }",
      "right" : "switch (functionCode) {\n            case Compiler.FUNCTION_LAST :\n                return \"last\";\n            case Compiler.FUNCTION_POSITION :\n                return \"position\";\n            case Compiler.FUNCTION_COUNT :\n                return \"count\";\n            case Compiler.FUNCTION_ID :\n                return \"id\";\n            case Compiler.FUNCTION_LOCAL_NAME :\n                return \"local-name\";\n            case Compiler.FUNCTION_NAMESPACE_URI :\n                return \"namespace-uri\";\n            case Compiler.FUNCTION_NAME :\n                return \"name\";\n            case Compiler.FUNCTION_STRING :\n                return \"string\";\n            case Compiler.FUNCTION_CONCAT :\n                return \"concat\";\n            case Compiler.FUNCTION_STARTS_WITH :\n                return \"starts-with\";\n            case Compiler.FUNCTION_CONTAINS :\n                return \"contains\";\n            case Compiler.FUNCTION_SUBSTRING_BEFORE :\n                return \"substring-before\";\n            case Compiler.FUNCTION_SUBSTRING_AFTER :\n                return \"substring-after\";\n            case Compiler.FUNCTION_SUBSTRING :\n                return \"substring\";\n            case Compiler.FUNCTION_STRING_LENGTH :\n                return \"string-length\";\n            case Compiler.FUNCTION_NORMALIZE_SPACE :\n                return \"normalize-space\";\n            case Compiler.FUNCTION_TRANSLATE :\n                return \"translate\";\n            case Compiler.FUNCTION_BOOLEAN :\n                return \"boolean\";\n            case Compiler.FUNCTION_NOT :\n                return \"not\";\n            case Compiler.FUNCTION_TRUE :\n                return \"true\";\n            case Compiler.FUNCTION_FALSE :\n                return \"false\";\n            case Compiler.FUNCTION_LANG :\n                return \"lang\";\n            case Compiler.FUNCTION_NUMBER :\n                return \"number\";\n            case Compiler.FUNCTION_SUM :\n                return \"sum\";\n            case Compiler.FUNCTION_FLOOR :\n                return \"floor\";\n            case Compiler.FUNCTION_CEILING :\n                return \"ceiling\";\n            case Compiler.FUNCTION_ROUND :\n                return \"round\";\n            case Compiler.FUNCTION_KEY :\n                return \"key\";\n            case Compiler.FUNCTION_FORMAT_NUMBER:\n                return \"format-number\";\n        }",
      "info" : "SwitchStatement[2081-4436]:SwitchStatement[2081-4436]"
    }, {
      "left" : "case Compiler.FUNCTION_LAST :",
      "right" : "case Compiler.FUNCTION_LAST :",
      "info" : "SwitchCase[2117-2146]:SwitchCase[2117-2146]"
    }, {
      "left" : "return \"last\";",
      "right" : "return \"last\";",
      "info" : "ReturnStatement[2163-2177]:ReturnStatement[2163-2177]"
    }, {
      "left" : "case Compiler.FUNCTION_POSITION :",
      "right" : "case Compiler.FUNCTION_POSITION :",
      "info" : "SwitchCase[2190-2223]:SwitchCase[2190-2223]"
    }, {
      "left" : "return \"position\";",
      "right" : "return \"position\";",
      "info" : "ReturnStatement[2240-2258]:ReturnStatement[2240-2258]"
    }, {
      "left" : "case Compiler.FUNCTION_COUNT :",
      "right" : "case Compiler.FUNCTION_COUNT :",
      "info" : "SwitchCase[2271-2301]:SwitchCase[2271-2301]"
    }, {
      "left" : "return \"count\";",
      "right" : "return \"count\";",
      "info" : "ReturnStatement[2318-2333]:ReturnStatement[2318-2333]"
    }, {
      "left" : "case Compiler.FUNCTION_ID :",
      "right" : "case Compiler.FUNCTION_ID :",
      "info" : "SwitchCase[2346-2373]:SwitchCase[2346-2373]"
    }, {
      "left" : "return \"id\";",
      "right" : "return \"id\";",
      "info" : "ReturnStatement[2390-2402]:ReturnStatement[2390-2402]"
    }, {
      "left" : "case Compiler.FUNCTION_LOCAL_NAME :",
      "right" : "case Compiler.FUNCTION_LOCAL_NAME :",
      "info" : "SwitchCase[2415-2450]:SwitchCase[2415-2450]"
    }, {
      "left" : "return \"local-name\";",
      "right" : "return \"local-name\";",
      "info" : "ReturnStatement[2467-2487]:ReturnStatement[2467-2487]"
    }, {
      "left" : "case Compiler.FUNCTION_NAMESPACE_URI :",
      "right" : "case Compiler.FUNCTION_NAMESPACE_URI :",
      "info" : "SwitchCase[2500-2538]:SwitchCase[2500-2538]"
    }, {
      "left" : "return \"namespace-uri\";",
      "right" : "return \"namespace-uri\";",
      "info" : "ReturnStatement[2555-2578]:ReturnStatement[2555-2578]"
    }, {
      "left" : "case Compiler.FUNCTION_NAME :",
      "right" : "case Compiler.FUNCTION_NAME :",
      "info" : "SwitchCase[2591-2620]:SwitchCase[2591-2620]"
    }, {
      "left" : "return \"name\";",
      "right" : "return \"name\";",
      "info" : "ReturnStatement[2637-2651]:ReturnStatement[2637-2651]"
    }, {
      "left" : "case Compiler.FUNCTION_STRING :",
      "right" : "case Compiler.FUNCTION_STRING :",
      "info" : "SwitchCase[2664-2695]:SwitchCase[2664-2695]"
    }, {
      "left" : "return \"string\";",
      "right" : "return \"string\";",
      "info" : "ReturnStatement[2712-2728]:ReturnStatement[2712-2728]"
    }, {
      "left" : "case Compiler.FUNCTION_CONCAT :",
      "right" : "case Compiler.FUNCTION_CONCAT :",
      "info" : "SwitchCase[2741-2772]:SwitchCase[2741-2772]"
    }, {
      "left" : "return \"concat\";",
      "right" : "return \"concat\";",
      "info" : "ReturnStatement[2789-2805]:ReturnStatement[2789-2805]"
    }, {
      "left" : "case Compiler.FUNCTION_STARTS_WITH :",
      "right" : "case Compiler.FUNCTION_STARTS_WITH :",
      "info" : "SwitchCase[2818-2854]:SwitchCase[2818-2854]"
    }, {
      "left" : "return \"starts-with\";",
      "right" : "return \"starts-with\";",
      "info" : "ReturnStatement[2871-2892]:ReturnStatement[2871-2892]"
    }, {
      "left" : "case Compiler.FUNCTION_CONTAINS :",
      "right" : "case Compiler.FUNCTION_CONTAINS :",
      "info" : "SwitchCase[2905-2938]:SwitchCase[2905-2938]"
    }, {
      "left" : "return \"contains\";",
      "right" : "return \"contains\";",
      "info" : "ReturnStatement[2955-2973]:ReturnStatement[2955-2973]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING_BEFORE :",
      "right" : "case Compiler.FUNCTION_SUBSTRING_BEFORE :",
      "info" : "SwitchCase[2986-3027]:SwitchCase[2986-3027]"
    }, {
      "left" : "return \"substring-before\";",
      "right" : "return \"substring-before\";",
      "info" : "ReturnStatement[3044-3070]:ReturnStatement[3044-3070]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING_AFTER :",
      "right" : "case Compiler.FUNCTION_SUBSTRING_AFTER :",
      "info" : "SwitchCase[3083-3123]:SwitchCase[3083-3123]"
    }, {
      "left" : "return \"substring-after\";",
      "right" : "return \"substring-after\";",
      "info" : "ReturnStatement[3140-3165]:ReturnStatement[3140-3165]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING :",
      "right" : "case Compiler.FUNCTION_SUBSTRING :",
      "info" : "SwitchCase[3178-3212]:SwitchCase[3178-3212]"
    }, {
      "left" : "return \"substring\";",
      "right" : "return \"substring\";",
      "info" : "ReturnStatement[3229-3248]:ReturnStatement[3229-3248]"
    }, {
      "left" : "case Compiler.FUNCTION_STRING_LENGTH :",
      "right" : "case Compiler.FUNCTION_STRING_LENGTH :",
      "info" : "SwitchCase[3261-3299]:SwitchCase[3261-3299]"
    }, {
      "left" : "return \"string-length\";",
      "right" : "return \"string-length\";",
      "info" : "ReturnStatement[3316-3339]:ReturnStatement[3316-3339]"
    }, {
      "left" : "case Compiler.FUNCTION_NORMALIZE_SPACE :",
      "right" : "case Compiler.FUNCTION_NORMALIZE_SPACE :",
      "info" : "SwitchCase[3352-3392]:SwitchCase[3352-3392]"
    }, {
      "left" : "return \"normalize-space\";",
      "right" : "return \"normalize-space\";",
      "info" : "ReturnStatement[3409-3434]:ReturnStatement[3409-3434]"
    }, {
      "left" : "case Compiler.FUNCTION_TRANSLATE :",
      "right" : "case Compiler.FUNCTION_TRANSLATE :",
      "info" : "SwitchCase[3447-3481]:SwitchCase[3447-3481]"
    }, {
      "left" : "return \"translate\";",
      "right" : "return \"translate\";",
      "info" : "ReturnStatement[3498-3517]:ReturnStatement[3498-3517]"
    }, {
      "left" : "case Compiler.FUNCTION_BOOLEAN :",
      "right" : "case Compiler.FUNCTION_BOOLEAN :",
      "info" : "SwitchCase[3530-3562]:SwitchCase[3530-3562]"
    }, {
      "left" : "return \"boolean\";",
      "right" : "return \"boolean\";",
      "info" : "ReturnStatement[3579-3596]:ReturnStatement[3579-3596]"
    }, {
      "left" : "case Compiler.FUNCTION_NOT :",
      "right" : "case Compiler.FUNCTION_NOT :",
      "info" : "SwitchCase[3609-3637]:SwitchCase[3609-3637]"
    }, {
      "left" : "return \"not\";",
      "right" : "return \"not\";",
      "info" : "ReturnStatement[3654-3667]:ReturnStatement[3654-3667]"
    }, {
      "left" : "case Compiler.FUNCTION_TRUE :",
      "right" : "case Compiler.FUNCTION_TRUE :",
      "info" : "SwitchCase[3680-3709]:SwitchCase[3680-3709]"
    }, {
      "left" : "return \"true\";",
      "right" : "return \"true\";",
      "info" : "ReturnStatement[3726-3740]:ReturnStatement[3726-3740]"
    }, {
      "left" : "case Compiler.FUNCTION_FALSE :",
      "right" : "case Compiler.FUNCTION_FALSE :",
      "info" : "SwitchCase[3753-3783]:SwitchCase[3753-3783]"
    }, {
      "left" : "return \"false\";",
      "right" : "return \"false\";",
      "info" : "ReturnStatement[3800-3815]:ReturnStatement[3800-3815]"
    }, {
      "left" : "case Compiler.FUNCTION_LANG :",
      "right" : "case Compiler.FUNCTION_LANG :",
      "info" : "SwitchCase[3828-3857]:SwitchCase[3828-3857]"
    }, {
      "left" : "return \"lang\";",
      "right" : "return \"lang\";",
      "info" : "ReturnStatement[3874-3888]:ReturnStatement[3874-3888]"
    }, {
      "left" : "case Compiler.FUNCTION_NUMBER :",
      "right" : "case Compiler.FUNCTION_NUMBER :",
      "info" : "SwitchCase[3901-3932]:SwitchCase[3901-3932]"
    }, {
      "left" : "return \"number\";",
      "right" : "return \"number\";",
      "info" : "ReturnStatement[3949-3965]:ReturnStatement[3949-3965]"
    }, {
      "left" : "case Compiler.FUNCTION_SUM :",
      "right" : "case Compiler.FUNCTION_SUM :",
      "info" : "SwitchCase[3978-4006]:SwitchCase[3978-4006]"
    }, {
      "left" : "return \"sum\";",
      "right" : "return \"sum\";",
      "info" : "ReturnStatement[4023-4036]:ReturnStatement[4023-4036]"
    }, {
      "left" : "case Compiler.FUNCTION_FLOOR :",
      "right" : "case Compiler.FUNCTION_FLOOR :",
      "info" : "SwitchCase[4049-4079]:SwitchCase[4049-4079]"
    }, {
      "left" : "return \"floor\";",
      "right" : "return \"floor\";",
      "info" : "ReturnStatement[4096-4111]:ReturnStatement[4096-4111]"
    }, {
      "left" : "case Compiler.FUNCTION_CEILING :",
      "right" : "case Compiler.FUNCTION_CEILING :",
      "info" : "SwitchCase[4124-4156]:SwitchCase[4124-4156]"
    }, {
      "left" : "return \"ceiling\";",
      "right" : "return \"ceiling\";",
      "info" : "ReturnStatement[4173-4190]:ReturnStatement[4173-4190]"
    }, {
      "left" : "case Compiler.FUNCTION_ROUND :",
      "right" : "case Compiler.FUNCTION_ROUND :",
      "info" : "SwitchCase[4203-4233]:SwitchCase[4203-4233]"
    }, {
      "left" : "return \"round\";",
      "right" : "return \"round\";",
      "info" : "ReturnStatement[4250-4265]:ReturnStatement[4250-4265]"
    }, {
      "left" : "case Compiler.FUNCTION_KEY :",
      "right" : "case Compiler.FUNCTION_KEY :",
      "info" : "SwitchCase[4278-4306]:SwitchCase[4278-4306]"
    }, {
      "left" : "return \"key\";",
      "right" : "return \"key\";",
      "info" : "ReturnStatement[4323-4336]:ReturnStatement[4323-4336]"
    }, {
      "left" : "case Compiler.FUNCTION_FORMAT_NUMBER:",
      "right" : "case Compiler.FUNCTION_FORMAT_NUMBER:",
      "info" : "SwitchCase[4349-4386]:SwitchCase[4349-4386]"
    }, {
      "left" : "return \"format-number\";",
      "right" : "return \"format-number\";",
      "info" : "ReturnStatement[4403-4426]:ReturnStatement[4403-4426]"
    }, {
      "left" : "return \"unknownFunction\" + functionCode + \"()\";",
      "right" : "return \"unknownFunction\" + functionCode + \"()\";",
      "info" : "ReturnStatement[4445-4492]:ReturnStatement[4445-4492]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4532-4563]:Block[4532-4563]"
    }, {
      "left" : "return args[0];",
      "right" : "return args[0];",
      "info" : "ReturnStatement[4542-4557]:ReturnStatement[4542-4557]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4597-4628]:Block[4597-4628]"
    }, {
      "left" : "return args[1];",
      "right" : "return args[1];",
      "info" : "ReturnStatement[4607-4622]:ReturnStatement[4607-4622]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4662-4693]:Block[4662-4693]"
    }, {
      "left" : "return args[2];",
      "right" : "return args[2];",
      "info" : "ReturnStatement[4672-4687]:ReturnStatement[4672-4687]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4729-4824]:Block[4729-4824]"
    }, {
      "left" : "if (args == null)",
      "right" : "if (args == null)",
      "info" : "IfStatement[4739-4790]:IfStatement[4739-4790]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[4757-4790]:Block[4757-4790]"
    }, {
      "left" : "return 0;",
      "right" : "return 0;",
      "info" : "ReturnStatement[4771-4780]:ReturnStatement[4771-4780]"
    }, {
      "left" : "return args.length;",
      "right" : "return args.length;",
      "info" : "ReturnStatement[4799-4818]:ReturnStatement[4799-4818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5061-6688]:Block[5061-6688]"
    }, {
      "left" : "if (super.computeContextDependent())",
      "right" : "if (super.computeContextDependent())",
      "info" : "IfStatement[5071-5144]:IfStatement[5071-5144]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[5108-5144]:Block[5108-5144]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5122-5134]:ReturnStatement[5122-5134]"
    }, {
      "left" : "switch(functionCode) {\n            case Compiler.FUNCTION_LAST:\n            case Compiler.FUNCTION_POSITION:\n                return true;\n\n            case Compiler.FUNCTION_BOOLEAN:\n            case Compiler.FUNCTION_LOCAL_NAME:\n            case Compiler.FUNCTION_NAME:\n            case Compiler.FUNCTION_NAMESPACE_URI:\n            case Compiler.FUNCTION_STRING:\n            case Compiler.FUNCTION_LANG:\n            case Compiler.FUNCTION_NUMBER:\n                return args == null || args.length == 0;\n\n            case Compiler.FUNCTION_COUNT:\n            case Compiler.FUNCTION_ID:\n            case Compiler.FUNCTION_CONCAT:\n            case Compiler.FUNCTION_STARTS_WITH:\n            case Compiler.FUNCTION_CONTAINS:\n            case Compiler.FUNCTION_SUBSTRING_BEFORE:\n            case Compiler.FUNCTION_SUBSTRING_AFTER:\n            case Compiler.FUNCTION_SUBSTRING:\n            case Compiler.FUNCTION_STRING_LENGTH:\n            case Compiler.FUNCTION_NORMALIZE_SPACE:\n            case Compiler.FUNCTION_TRANSLATE:\n            case Compiler.FUNCTION_NOT:\n            case Compiler.FUNCTION_TRUE:\n            case Compiler.FUNCTION_FALSE:\n            case Compiler.FUNCTION_SUM:\n            case Compiler.FUNCTION_FLOOR:\n            case Compiler.FUNCTION_CEILING:\n            case Compiler.FUNCTION_ROUND:\n                return false;\n                \n            case Compiler.FUNCTION_FORMAT_NUMBER:\n                return args != null && args.length == 2;                             \n        }",
      "right" : "switch(functionCode) {\n            case Compiler.FUNCTION_LAST:\n            case Compiler.FUNCTION_POSITION:\n                return true;\n\n            case Compiler.FUNCTION_BOOLEAN:\n            case Compiler.FUNCTION_LOCAL_NAME:\n            case Compiler.FUNCTION_NAME:\n            case Compiler.FUNCTION_NAMESPACE_URI:\n            case Compiler.FUNCTION_STRING:\n            case Compiler.FUNCTION_LANG:\n            case Compiler.FUNCTION_NUMBER:\n                return args == null || args.length == 0;\n\n            case Compiler.FUNCTION_COUNT:\n            case Compiler.FUNCTION_ID:\n            case Compiler.FUNCTION_CONCAT:\n            case Compiler.FUNCTION_STARTS_WITH:\n            case Compiler.FUNCTION_CONTAINS:\n            case Compiler.FUNCTION_SUBSTRING_BEFORE:\n            case Compiler.FUNCTION_SUBSTRING_AFTER:\n            case Compiler.FUNCTION_SUBSTRING:\n            case Compiler.FUNCTION_STRING_LENGTH:\n            case Compiler.FUNCTION_NORMALIZE_SPACE:\n            case Compiler.FUNCTION_TRANSLATE:\n            case Compiler.FUNCTION_NOT:\n            case Compiler.FUNCTION_TRUE:\n            case Compiler.FUNCTION_FALSE:\n            case Compiler.FUNCTION_SUM:\n            case Compiler.FUNCTION_FLOOR:\n            case Compiler.FUNCTION_CEILING:\n            case Compiler.FUNCTION_ROUND:\n                return false;\n                \n            case Compiler.FUNCTION_FORMAT_NUMBER:\n                return args != null && args.length == 2;                             \n        }",
      "info" : "SwitchStatement[5154-6659]:SwitchStatement[5154-6659]"
    }, {
      "left" : "case Compiler.FUNCTION_LAST:",
      "right" : "case Compiler.FUNCTION_LAST:",
      "info" : "SwitchCase[5189-5217]:SwitchCase[5189-5217]"
    }, {
      "left" : "case Compiler.FUNCTION_POSITION:",
      "right" : "case Compiler.FUNCTION_POSITION:",
      "info" : "SwitchCase[5230-5262]:SwitchCase[5230-5262]"
    }, {
      "left" : "return true;",
      "right" : "return true;",
      "info" : "ReturnStatement[5279-5291]:ReturnStatement[5279-5291]"
    }, {
      "left" : "case Compiler.FUNCTION_BOOLEAN:",
      "right" : "case Compiler.FUNCTION_BOOLEAN:",
      "info" : "SwitchCase[5305-5336]:SwitchCase[5305-5336]"
    }, {
      "left" : "case Compiler.FUNCTION_LOCAL_NAME:",
      "right" : "case Compiler.FUNCTION_LOCAL_NAME:",
      "info" : "SwitchCase[5349-5383]:SwitchCase[5349-5383]"
    }, {
      "left" : "case Compiler.FUNCTION_NAME:",
      "right" : "case Compiler.FUNCTION_NAME:",
      "info" : "SwitchCase[5396-5424]:SwitchCase[5396-5424]"
    }, {
      "left" : "case Compiler.FUNCTION_NAMESPACE_URI:",
      "right" : "case Compiler.FUNCTION_NAMESPACE_URI:",
      "info" : "SwitchCase[5437-5474]:SwitchCase[5437-5474]"
    }, {
      "left" : "case Compiler.FUNCTION_STRING:",
      "right" : "case Compiler.FUNCTION_STRING:",
      "info" : "SwitchCase[5487-5517]:SwitchCase[5487-5517]"
    }, {
      "left" : "case Compiler.FUNCTION_LANG:",
      "right" : "case Compiler.FUNCTION_LANG:",
      "info" : "SwitchCase[5530-5558]:SwitchCase[5530-5558]"
    }, {
      "left" : "case Compiler.FUNCTION_NUMBER:",
      "right" : "case Compiler.FUNCTION_NUMBER:",
      "info" : "SwitchCase[5571-5601]:SwitchCase[5571-5601]"
    }, {
      "left" : "return args == null || args.length == 0;",
      "right" : "return args == null || args.length == 0;",
      "info" : "ReturnStatement[5618-5658]:ReturnStatement[5618-5658]"
    }, {
      "left" : "case Compiler.FUNCTION_COUNT:",
      "right" : "case Compiler.FUNCTION_COUNT:",
      "info" : "SwitchCase[5672-5701]:SwitchCase[5672-5701]"
    }, {
      "left" : "case Compiler.FUNCTION_ID:",
      "right" : "case Compiler.FUNCTION_ID:",
      "info" : "SwitchCase[5714-5740]:SwitchCase[5714-5740]"
    }, {
      "left" : "case Compiler.FUNCTION_CONCAT:",
      "right" : "case Compiler.FUNCTION_CONCAT:",
      "info" : "SwitchCase[5753-5783]:SwitchCase[5753-5783]"
    }, {
      "left" : "case Compiler.FUNCTION_STARTS_WITH:",
      "right" : "case Compiler.FUNCTION_STARTS_WITH:",
      "info" : "SwitchCase[5796-5831]:SwitchCase[5796-5831]"
    }, {
      "left" : "case Compiler.FUNCTION_CONTAINS:",
      "right" : "case Compiler.FUNCTION_CONTAINS:",
      "info" : "SwitchCase[5844-5876]:SwitchCase[5844-5876]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING_BEFORE:",
      "right" : "case Compiler.FUNCTION_SUBSTRING_BEFORE:",
      "info" : "SwitchCase[5889-5929]:SwitchCase[5889-5929]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING_AFTER:",
      "right" : "case Compiler.FUNCTION_SUBSTRING_AFTER:",
      "info" : "SwitchCase[5942-5981]:SwitchCase[5942-5981]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING:",
      "right" : "case Compiler.FUNCTION_SUBSTRING:",
      "info" : "SwitchCase[5994-6027]:SwitchCase[5994-6027]"
    }, {
      "left" : "case Compiler.FUNCTION_STRING_LENGTH:",
      "right" : "case Compiler.FUNCTION_STRING_LENGTH:",
      "info" : "SwitchCase[6040-6077]:SwitchCase[6040-6077]"
    }, {
      "left" : "case Compiler.FUNCTION_NORMALIZE_SPACE:",
      "right" : "case Compiler.FUNCTION_NORMALIZE_SPACE:",
      "info" : "SwitchCase[6090-6129]:SwitchCase[6090-6129]"
    }, {
      "left" : "case Compiler.FUNCTION_TRANSLATE:",
      "right" : "case Compiler.FUNCTION_TRANSLATE:",
      "info" : "SwitchCase[6142-6175]:SwitchCase[6142-6175]"
    }, {
      "left" : "case Compiler.FUNCTION_NOT:",
      "right" : "case Compiler.FUNCTION_NOT:",
      "info" : "SwitchCase[6188-6215]:SwitchCase[6188-6215]"
    }, {
      "left" : "case Compiler.FUNCTION_TRUE:",
      "right" : "case Compiler.FUNCTION_TRUE:",
      "info" : "SwitchCase[6228-6256]:SwitchCase[6228-6256]"
    }, {
      "left" : "case Compiler.FUNCTION_FALSE:",
      "right" : "case Compiler.FUNCTION_FALSE:",
      "info" : "SwitchCase[6269-6298]:SwitchCase[6269-6298]"
    }, {
      "left" : "case Compiler.FUNCTION_SUM:",
      "right" : "case Compiler.FUNCTION_SUM:",
      "info" : "SwitchCase[6311-6338]:SwitchCase[6311-6338]"
    }, {
      "left" : "case Compiler.FUNCTION_FLOOR:",
      "right" : "case Compiler.FUNCTION_FLOOR:",
      "info" : "SwitchCase[6351-6380]:SwitchCase[6351-6380]"
    }, {
      "left" : "case Compiler.FUNCTION_CEILING:",
      "right" : "case Compiler.FUNCTION_CEILING:",
      "info" : "SwitchCase[6393-6424]:SwitchCase[6393-6424]"
    }, {
      "left" : "case Compiler.FUNCTION_ROUND:",
      "right" : "case Compiler.FUNCTION_ROUND:",
      "info" : "SwitchCase[6437-6466]:SwitchCase[6437-6466]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6483-6496]:ReturnStatement[6483-6496]"
    }, {
      "left" : "case Compiler.FUNCTION_FORMAT_NUMBER:",
      "right" : "case Compiler.FUNCTION_FORMAT_NUMBER:",
      "info" : "SwitchCase[6526-6563]:SwitchCase[6526-6563]"
    }, {
      "left" : "return args != null && args.length == 2;",
      "right" : "return args != null && args.length == 2;",
      "info" : "ReturnStatement[6580-6620]:ReturnStatement[6580-6620]"
    }, {
      "left" : "return false;",
      "right" : "return false;",
      "info" : "ReturnStatement[6669-6682]:ReturnStatement[6669-6682]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6719-7184]:Block[6719-7184]"
    }, {
      "left" : "StringBuffer buffer = new StringBuffer();",
      "right" : "StringBuffer buffer = new StringBuffer();",
      "info" : "VariableDeclarationStatement[6729-6770]:VariableDeclarationStatement[6729-6770]"
    }, {
      "left" : "buffer.append(getFunctionName());",
      "right" : "buffer.append(getFunctionName());",
      "info" : "ExpressionStatement[6779-6812]:ExpressionStatement[6779-6812]"
    }, {
      "left" : "buffer.append('(');",
      "right" : "buffer.append('(');",
      "info" : "ExpressionStatement[6821-6840]:ExpressionStatement[6821-6840]"
    }, {
      "left" : "Expression args[] = getArguments();",
      "right" : "Expression args[] = getArguments();",
      "info" : "VariableDeclarationStatement[6849-6884]:VariableDeclarationStatement[6849-6884]"
    }, {
      "left" : "if (args != null)",
      "right" : "if (args != null)",
      "info" : "IfStatement[6893-7116]:IfStatement[6893-7116]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6911-7116]:Block[6911-7116]"
    }, {
      "left" : "for (int i = 0; i < args.length; i++)",
      "right" : "for (int i = 0; i < args.length; i++)",
      "info" : "ForStatement[6925-7106]:ForStatement[6925-7106]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6963-7106]:Block[6963-7106]"
    }, {
      "left" : "if (i > 0)",
      "right" : "if (i > 0)",
      "info" : "IfStatement[6981-7052]:IfStatement[6981-7052]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[6992-7052]:Block[6992-7052]"
    }, {
      "left" : "buffer.append(\", \");",
      "right" : "buffer.append(\", \");",
      "info" : "ExpressionStatement[7014-7034]:ExpressionStatement[7014-7034]"
    }, {
      "left" : "buffer.append(args[i]);",
      "right" : "buffer.append(args[i]);",
      "info" : "ExpressionStatement[7069-7092]:ExpressionStatement[7069-7092]"
    }, {
      "left" : "buffer.append(')');",
      "right" : "buffer.append(')');",
      "info" : "ExpressionStatement[7125-7144]:ExpressionStatement[7125-7144]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[7153-7178]:ReturnStatement[7153-7178]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7233-7278]:Block[7233-7278]"
    }, {
      "left" : "return computeValue(context);",
      "right" : "return computeValue(context);",
      "info" : "ReturnStatement[7243-7272]:ReturnStatement[7243-7272]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[7384-10292]:Block[7384-10292]"
    }, {
      "left" : "switch (functionCode) {\n            case Compiler.FUNCTION_LAST :\n                return functionLast(context);\n            case Compiler.FUNCTION_POSITION :\n                return functionPosition(context);\n            case Compiler.FUNCTION_COUNT :\n                return functionCount(context);\n            case Compiler.FUNCTION_LANG :\n                return functionLang(context);\n            case Compiler.FUNCTION_ID :\n                return functionID(context);\n            case Compiler.FUNCTION_LOCAL_NAME :\n                return functionLocalName(context);\n            case Compiler.FUNCTION_NAMESPACE_URI :\n                return functionNamespaceURI(context);\n            case Compiler.FUNCTION_NAME :\n                return functionName(context);\n            case Compiler.FUNCTION_STRING :\n                return functionString(context);\n            case Compiler.FUNCTION_CONCAT :\n                return functionConcat(context);\n            case Compiler.FUNCTION_STARTS_WITH :\n                return functionStartsWith(context);\n            case Compiler.FUNCTION_CONTAINS :\n                return functionContains(context);\n            case Compiler.FUNCTION_SUBSTRING_BEFORE :\n                return functionSubstringBefore(context);\n            case Compiler.FUNCTION_SUBSTRING_AFTER :\n                return functionSubstringAfter(context);\n            case Compiler.FUNCTION_SUBSTRING :\n                return functionSubstring(context);\n            case Compiler.FUNCTION_STRING_LENGTH :\n                return functionStringLength(context);\n            case Compiler.FUNCTION_NORMALIZE_SPACE :\n                return functionNormalizeSpace(context);\n            case Compiler.FUNCTION_TRANSLATE :\n                return functionTranslate(context);\n            case Compiler.FUNCTION_BOOLEAN :\n                return functionBoolean(context);\n            case Compiler.FUNCTION_NOT :\n                return functionNot(context);\n            case Compiler.FUNCTION_TRUE :\n                return functionTrue(context);\n            case Compiler.FUNCTION_FALSE :\n                return functionFalse(context);\n            case Compiler.FUNCTION_NULL :\n                return functionNull(context);\n            case Compiler.FUNCTION_NUMBER :\n                return functionNumber(context);\n            case Compiler.FUNCTION_SUM :\n                return functionSum(context);\n            case Compiler.FUNCTION_FLOOR :\n                return functionFloor(context);\n            case Compiler.FUNCTION_CEILING :\n                return functionCeiling(context);\n            case Compiler.FUNCTION_ROUND :\n                return functionRound(context);\n            case Compiler.FUNCTION_KEY :\n                return functionKey(context);\n            case Compiler.FUNCTION_FORMAT_NUMBER :\n                return functionFormatNumber(context);\n        }",
      "right" : "switch (functionCode) {\n            case Compiler.FUNCTION_LAST :\n                return functionLast(context);\n            case Compiler.FUNCTION_POSITION :\n                return functionPosition(context);\n            case Compiler.FUNCTION_COUNT :\n                return functionCount(context);\n            case Compiler.FUNCTION_LANG :\n                return functionLang(context);\n            case Compiler.FUNCTION_ID :\n                return functionID(context);\n            case Compiler.FUNCTION_LOCAL_NAME :\n                return functionLocalName(context);\n            case Compiler.FUNCTION_NAMESPACE_URI :\n                return functionNamespaceURI(context);\n            case Compiler.FUNCTION_NAME :\n                return functionName(context);\n            case Compiler.FUNCTION_STRING :\n                return functionString(context);\n            case Compiler.FUNCTION_CONCAT :\n                return functionConcat(context);\n            case Compiler.FUNCTION_STARTS_WITH :\n                return functionStartsWith(context);\n            case Compiler.FUNCTION_CONTAINS :\n                return functionContains(context);\n            case Compiler.FUNCTION_SUBSTRING_BEFORE :\n                return functionSubstringBefore(context);\n            case Compiler.FUNCTION_SUBSTRING_AFTER :\n                return functionSubstringAfter(context);\n            case Compiler.FUNCTION_SUBSTRING :\n                return functionSubstring(context);\n            case Compiler.FUNCTION_STRING_LENGTH :\n                return functionStringLength(context);\n            case Compiler.FUNCTION_NORMALIZE_SPACE :\n                return functionNormalizeSpace(context);\n            case Compiler.FUNCTION_TRANSLATE :\n                return functionTranslate(context);\n            case Compiler.FUNCTION_BOOLEAN :\n                return functionBoolean(context);\n            case Compiler.FUNCTION_NOT :\n                return functionNot(context);\n            case Compiler.FUNCTION_TRUE :\n                return functionTrue(context);\n            case Compiler.FUNCTION_FALSE :\n                return functionFalse(context);\n            case Compiler.FUNCTION_NULL :\n                return functionNull(context);\n            case Compiler.FUNCTION_NUMBER :\n                return functionNumber(context);\n            case Compiler.FUNCTION_SUM :\n                return functionSum(context);\n            case Compiler.FUNCTION_FLOOR :\n                return functionFloor(context);\n            case Compiler.FUNCTION_CEILING :\n                return functionCeiling(context);\n            case Compiler.FUNCTION_ROUND :\n                return functionRound(context);\n            case Compiler.FUNCTION_KEY :\n                return functionKey(context);\n            case Compiler.FUNCTION_FORMAT_NUMBER :\n                return functionFormatNumber(context);\n        }",
      "info" : "SwitchStatement[7394-10265]:SwitchStatement[7394-10265]"
    }, {
      "left" : "case Compiler.FUNCTION_LAST :",
      "right" : "case Compiler.FUNCTION_LAST :",
      "info" : "SwitchCase[7430-7459]:SwitchCase[7430-7459]"
    }, {
      "left" : "return functionLast(context);",
      "right" : "return functionLast(context);",
      "info" : "ReturnStatement[7476-7505]:ReturnStatement[7476-7505]"
    }, {
      "left" : "case Compiler.FUNCTION_POSITION :",
      "right" : "case Compiler.FUNCTION_POSITION :",
      "info" : "SwitchCase[7518-7551]:SwitchCase[7518-7551]"
    }, {
      "left" : "return functionPosition(context);",
      "right" : "return functionPosition(context);",
      "info" : "ReturnStatement[7568-7601]:ReturnStatement[7568-7601]"
    }, {
      "left" : "case Compiler.FUNCTION_COUNT :",
      "right" : "case Compiler.FUNCTION_COUNT :",
      "info" : "SwitchCase[7614-7644]:SwitchCase[7614-7644]"
    }, {
      "left" : "return functionCount(context);",
      "right" : "return functionCount(context);",
      "info" : "ReturnStatement[7661-7691]:ReturnStatement[7661-7691]"
    }, {
      "left" : "case Compiler.FUNCTION_LANG :",
      "right" : "case Compiler.FUNCTION_LANG :",
      "info" : "SwitchCase[7704-7733]:SwitchCase[7704-7733]"
    }, {
      "left" : "return functionLang(context);",
      "right" : "return functionLang(context);",
      "info" : "ReturnStatement[7750-7779]:ReturnStatement[7750-7779]"
    }, {
      "left" : "case Compiler.FUNCTION_ID :",
      "right" : "case Compiler.FUNCTION_ID :",
      "info" : "SwitchCase[7792-7819]:SwitchCase[7792-7819]"
    }, {
      "left" : "return functionID(context);",
      "right" : "return functionID(context);",
      "info" : "ReturnStatement[7836-7863]:ReturnStatement[7836-7863]"
    }, {
      "left" : "case Compiler.FUNCTION_LOCAL_NAME :",
      "right" : "case Compiler.FUNCTION_LOCAL_NAME :",
      "info" : "SwitchCase[7876-7911]:SwitchCase[7876-7911]"
    }, {
      "left" : "return functionLocalName(context);",
      "right" : "return functionLocalName(context);",
      "info" : "ReturnStatement[7928-7962]:ReturnStatement[7928-7962]"
    }, {
      "left" : "case Compiler.FUNCTION_NAMESPACE_URI :",
      "right" : "case Compiler.FUNCTION_NAMESPACE_URI :",
      "info" : "SwitchCase[7975-8013]:SwitchCase[7975-8013]"
    }, {
      "left" : "return functionNamespaceURI(context);",
      "right" : "return functionNamespaceURI(context);",
      "info" : "ReturnStatement[8030-8067]:ReturnStatement[8030-8067]"
    }, {
      "left" : "case Compiler.FUNCTION_NAME :",
      "right" : "case Compiler.FUNCTION_NAME :",
      "info" : "SwitchCase[8080-8109]:SwitchCase[8080-8109]"
    }, {
      "left" : "return functionName(context);",
      "right" : "return functionName(context);",
      "info" : "ReturnStatement[8126-8155]:ReturnStatement[8126-8155]"
    }, {
      "left" : "case Compiler.FUNCTION_STRING :",
      "right" : "case Compiler.FUNCTION_STRING :",
      "info" : "SwitchCase[8168-8199]:SwitchCase[8168-8199]"
    }, {
      "left" : "return functionString(context);",
      "right" : "return functionString(context);",
      "info" : "ReturnStatement[8216-8247]:ReturnStatement[8216-8247]"
    }, {
      "left" : "case Compiler.FUNCTION_CONCAT :",
      "right" : "case Compiler.FUNCTION_CONCAT :",
      "info" : "SwitchCase[8260-8291]:SwitchCase[8260-8291]"
    }, {
      "left" : "return functionConcat(context);",
      "right" : "return functionConcat(context);",
      "info" : "ReturnStatement[8308-8339]:ReturnStatement[8308-8339]"
    }, {
      "left" : "case Compiler.FUNCTION_STARTS_WITH :",
      "right" : "case Compiler.FUNCTION_STARTS_WITH :",
      "info" : "SwitchCase[8352-8388]:SwitchCase[8352-8388]"
    }, {
      "left" : "return functionStartsWith(context);",
      "right" : "return functionStartsWith(context);",
      "info" : "ReturnStatement[8405-8440]:ReturnStatement[8405-8440]"
    }, {
      "left" : "case Compiler.FUNCTION_CONTAINS :",
      "right" : "case Compiler.FUNCTION_CONTAINS :",
      "info" : "SwitchCase[8453-8486]:SwitchCase[8453-8486]"
    }, {
      "left" : "return functionContains(context);",
      "right" : "return functionContains(context);",
      "info" : "ReturnStatement[8503-8536]:ReturnStatement[8503-8536]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING_BEFORE :",
      "right" : "case Compiler.FUNCTION_SUBSTRING_BEFORE :",
      "info" : "SwitchCase[8549-8590]:SwitchCase[8549-8590]"
    }, {
      "left" : "return functionSubstringBefore(context);",
      "right" : "return functionSubstringBefore(context);",
      "info" : "ReturnStatement[8607-8647]:ReturnStatement[8607-8647]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING_AFTER :",
      "right" : "case Compiler.FUNCTION_SUBSTRING_AFTER :",
      "info" : "SwitchCase[8660-8700]:SwitchCase[8660-8700]"
    }, {
      "left" : "return functionSubstringAfter(context);",
      "right" : "return functionSubstringAfter(context);",
      "info" : "ReturnStatement[8717-8756]:ReturnStatement[8717-8756]"
    }, {
      "left" : "case Compiler.FUNCTION_SUBSTRING :",
      "right" : "case Compiler.FUNCTION_SUBSTRING :",
      "info" : "SwitchCase[8769-8803]:SwitchCase[8769-8803]"
    }, {
      "left" : "return functionSubstring(context);",
      "right" : "return functionSubstring(context);",
      "info" : "ReturnStatement[8820-8854]:ReturnStatement[8820-8854]"
    }, {
      "left" : "case Compiler.FUNCTION_STRING_LENGTH :",
      "right" : "case Compiler.FUNCTION_STRING_LENGTH :",
      "info" : "SwitchCase[8867-8905]:SwitchCase[8867-8905]"
    }, {
      "left" : "return functionStringLength(context);",
      "right" : "return functionStringLength(context);",
      "info" : "ReturnStatement[8922-8959]:ReturnStatement[8922-8959]"
    }, {
      "left" : "case Compiler.FUNCTION_NORMALIZE_SPACE :",
      "right" : "case Compiler.FUNCTION_NORMALIZE_SPACE :",
      "info" : "SwitchCase[8972-9012]:SwitchCase[8972-9012]"
    }, {
      "left" : "return functionNormalizeSpace(context);",
      "right" : "return functionNormalizeSpace(context);",
      "info" : "ReturnStatement[9029-9068]:ReturnStatement[9029-9068]"
    }, {
      "left" : "case Compiler.FUNCTION_TRANSLATE :",
      "right" : "case Compiler.FUNCTION_TRANSLATE :",
      "info" : "SwitchCase[9081-9115]:SwitchCase[9081-9115]"
    }, {
      "left" : "return functionTranslate(context);",
      "right" : "return functionTranslate(context);",
      "info" : "ReturnStatement[9132-9166]:ReturnStatement[9132-9166]"
    }, {
      "left" : "case Compiler.FUNCTION_BOOLEAN :",
      "right" : "case Compiler.FUNCTION_BOOLEAN :",
      "info" : "SwitchCase[9179-9211]:SwitchCase[9179-9211]"
    }, {
      "left" : "return functionBoolean(context);",
      "right" : "return functionBoolean(context);",
      "info" : "ReturnStatement[9228-9260]:ReturnStatement[9228-9260]"
    }, {
      "left" : "case Compiler.FUNCTION_NOT :",
      "right" : "case Compiler.FUNCTION_NOT :",
      "info" : "SwitchCase[9273-9301]:SwitchCase[9273-9301]"
    }, {
      "left" : "return functionNot(context);",
      "right" : "return functionNot(context);",
      "info" : "ReturnStatement[9318-9346]:ReturnStatement[9318-9346]"
    }, {
      "left" : "case Compiler.FUNCTION_TRUE :",
      "right" : "case Compiler.FUNCTION_TRUE :",
      "info" : "SwitchCase[9359-9388]:SwitchCase[9359-9388]"
    }, {
      "left" : "return functionTrue(context);",
      "right" : "return functionTrue(context);",
      "info" : "ReturnStatement[9405-9434]:ReturnStatement[9405-9434]"
    }, {
      "left" : "case Compiler.FUNCTION_FALSE :",
      "right" : "case Compiler.FUNCTION_FALSE :",
      "info" : "SwitchCase[9447-9477]:SwitchCase[9447-9477]"
    }, {
      "left" : "return functionFalse(context);",
      "right" : "return functionFalse(context);",
      "info" : "ReturnStatement[9494-9524]:ReturnStatement[9494-9524]"
    }, {
      "left" : "case Compiler.FUNCTION_NULL :",
      "right" : "case Compiler.FUNCTION_NULL :",
      "info" : "SwitchCase[9537-9566]:SwitchCase[9537-9566]"
    }, {
      "left" : "return functionNull(context);",
      "right" : "return functionNull(context);",
      "info" : "ReturnStatement[9583-9612]:ReturnStatement[9583-9612]"
    }, {
      "left" : "case Compiler.FUNCTION_NUMBER :",
      "right" : "case Compiler.FUNCTION_NUMBER :",
      "info" : "SwitchCase[9625-9656]:SwitchCase[9625-9656]"
    }, {
      "left" : "return functionNumber(context);",
      "right" : "return functionNumber(context);",
      "info" : "ReturnStatement[9673-9704]:ReturnStatement[9673-9704]"
    }, {
      "left" : "case Compiler.FUNCTION_SUM :",
      "right" : "case Compiler.FUNCTION_SUM :",
      "info" : "SwitchCase[9717-9745]:SwitchCase[9717-9745]"
    }, {
      "left" : "return functionSum(context);",
      "right" : "return functionSum(context);",
      "info" : "ReturnStatement[9762-9790]:ReturnStatement[9762-9790]"
    }, {
      "left" : "case Compiler.FUNCTION_FLOOR :",
      "right" : "case Compiler.FUNCTION_FLOOR :",
      "info" : "SwitchCase[9803-9833]:SwitchCase[9803-9833]"
    }, {
      "left" : "return functionFloor(context);",
      "right" : "return functionFloor(context);",
      "info" : "ReturnStatement[9850-9880]:ReturnStatement[9850-9880]"
    }, {
      "left" : "case Compiler.FUNCTION_CEILING :",
      "right" : "case Compiler.FUNCTION_CEILING :",
      "info" : "SwitchCase[9893-9925]:SwitchCase[9893-9925]"
    }, {
      "left" : "return functionCeiling(context);",
      "right" : "return functionCeiling(context);",
      "info" : "ReturnStatement[9942-9974]:ReturnStatement[9942-9974]"
    }, {
      "left" : "case Compiler.FUNCTION_ROUND :",
      "right" : "case Compiler.FUNCTION_ROUND :",
      "info" : "SwitchCase[9987-10017]:SwitchCase[9987-10017]"
    }, {
      "left" : "return functionRound(context);",
      "right" : "return functionRound(context);",
      "info" : "ReturnStatement[10034-10064]:ReturnStatement[10034-10064]"
    }, {
      "left" : "case Compiler.FUNCTION_KEY :",
      "right" : "case Compiler.FUNCTION_KEY :",
      "info" : "SwitchCase[10077-10105]:SwitchCase[10077-10105]"
    }, {
      "left" : "return functionKey(context);",
      "right" : "return functionKey(context);",
      "info" : "ReturnStatement[10122-10150]:ReturnStatement[10122-10150]"
    }, {
      "left" : "case Compiler.FUNCTION_FORMAT_NUMBER :",
      "right" : "case Compiler.FUNCTION_FORMAT_NUMBER :",
      "info" : "SwitchCase[10163-10201]:SwitchCase[10163-10201]"
    }, {
      "left" : "return functionFormatNumber(context);",
      "right" : "return functionFormatNumber(context);",
      "info" : "ReturnStatement[10218-10255]:ReturnStatement[10218-10255]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[10274-10286]:ReturnStatement[10274-10286]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10349-10800]:Block[10349-10800]"
    }, {
      "left" : "assertArgCount(0);",
      "right" : "assertArgCount(0);",
      "info" : "ExpressionStatement[10359-10377]:ExpressionStatement[10359-10377]"
    }, {
      "left" : "int old = context.getCurrentPosition();",
      "right" : "int old = context.getCurrentPosition();",
      "info" : "VariableDeclarationStatement[10491-10530]:VariableDeclarationStatement[10491-10530]"
    }, {
      "left" : "context.reset();",
      "right" : "context.reset();",
      "info" : "ExpressionStatement[10539-10555]:ExpressionStatement[10539-10555]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[10564-10578]:VariableDeclarationStatement[10564-10578]"
    }, {
      "left" : "while (context.nextNode())",
      "right" : "while (context.nextNode())",
      "info" : "WhileStatement[10587-10646]:WhileStatement[10587-10646]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10614-10646]:Block[10614-10646]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[10628-10636]:ExpressionStatement[10628-10636]"
    }, {
      "left" : "if (old != 0)",
      "right" : "if (old != 0)",
      "info" : "IfStatement[10697-10760]:IfStatement[10697-10760]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10711-10760]:Block[10711-10760]"
    }, {
      "left" : "context.setPosition(old);",
      "right" : "context.setPosition(old);",
      "info" : "ExpressionStatement[10725-10750]:ExpressionStatement[10725-10750]"
    }, {
      "left" : "return new Double(count);",
      "right" : "return new Double(count);",
      "info" : "ReturnStatement[10769-10794]:ReturnStatement[10769-10794]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[10861-10953]:Block[10861-10953]"
    }, {
      "left" : "assertArgCount(0);",
      "right" : "assertArgCount(0);",
      "info" : "ExpressionStatement[10871-10889]:ExpressionStatement[10871-10889]"
    }, {
      "left" : "return new Integer(context.getCurrentPosition());",
      "right" : "return new Integer(context.getCurrentPosition());",
      "info" : "ReturnStatement[10898-10947]:ReturnStatement[10898-10947]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11011-11723]:Block[11011-11723]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[11021-11039]:ExpressionStatement[11021-11039]"
    }, {
      "left" : "Expression arg1 = getArg1();",
      "right" : "Expression arg1 = getArg1();",
      "info" : "VariableDeclarationStatement[11048-11076]:VariableDeclarationStatement[11048-11076]"
    }, {
      "left" : "int count = 0;",
      "right" : "int count = 0;",
      "info" : "VariableDeclarationStatement[11085-11099]:VariableDeclarationStatement[11085-11099]"
    }, {
      "left" : "Object value = arg1.compute(context);",
      "right" : "Object value = arg1.compute(context);",
      "info" : "VariableDeclarationStatement[11108-11145]:VariableDeclarationStatement[11108-11145]"
    }, {
      "left" : "if (value instanceof NodePointer)",
      "right" : "if (value instanceof NodePointer)",
      "info" : "IfStatement[11154-11253]:IfStatement[11154-11253]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11188-11253]:Block[11188-11253]"
    }, {
      "left" : "value = ((NodePointer) value).getValue();",
      "right" : "value = ((NodePointer) value).getValue();",
      "info" : "ExpressionStatement[11202-11243]:ExpressionStatement[11202-11243]"
    }, {
      "left" : "if (value instanceof EvalContext)",
      "right" : "if (value instanceof EvalContext)",
      "info" : "IfStatement[11262-11683]:IfStatement[11262-11683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11296-11461]:Block[11296-11461]"
    }, {
      "left" : "EvalContext ctx = (EvalContext) value;",
      "right" : "EvalContext ctx = (EvalContext) value;",
      "info" : "VariableDeclarationStatement[11310-11348]:VariableDeclarationStatement[11310-11348]"
    }, {
      "left" : "while (ctx.hasNext())",
      "right" : "while (ctx.hasNext())",
      "info" : "WhileStatement[11361-11451]:WhileStatement[11361-11451]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11383-11451]:Block[11383-11451]"
    }, {
      "left" : "ctx.next();",
      "right" : "ctx.next();",
      "info" : "ExpressionStatement[11401-11412]:ExpressionStatement[11401-11412]"
    }, {
      "left" : "count++;",
      "right" : "count++;",
      "info" : "ExpressionStatement[11429-11437]:ExpressionStatement[11429-11437]"
    }, {
      "left" : "if (value instanceof Collection)",
      "right" : "if (value instanceof Collection)",
      "info" : "IfStatement[11475-11683]:IfStatement[11475-11683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11508-11568]:Block[11508-11568]"
    }, {
      "left" : "count = ((Collection) value).size();",
      "right" : "count = ((Collection) value).size();",
      "info" : "ExpressionStatement[11522-11558]:ExpressionStatement[11522-11558]"
    }, {
      "left" : "if (value == null)",
      "right" : "if (value == null)",
      "info" : "IfStatement[11582-11683]:IfStatement[11582-11683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11601-11635]:Block[11601-11635]"
    }, {
      "left" : "count = 0;",
      "right" : "count = 0;",
      "info" : "ExpressionStatement[11615-11625]:ExpressionStatement[11615-11625]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11649-11683]:Block[11649-11683]"
    }, {
      "left" : "count = 1;",
      "right" : "count = 1;",
      "info" : "ExpressionStatement[11663-11673]:ExpressionStatement[11663-11673]"
    }, {
      "left" : "return new Double(count);",
      "right" : "return new Double(count);",
      "info" : "ReturnStatement[11692-11717]:ReturnStatement[11692-11717]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11780-12117]:Block[11780-12117]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[11790-11808]:ExpressionStatement[11790-11808]"
    }, {
      "left" : "String lang = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String lang = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[11817-11888]:VariableDeclarationStatement[11817-11888]"
    }, {
      "left" : "NodePointer pointer = (NodePointer) context.getSingleNodePointer();",
      "right" : "NodePointer pointer = (NodePointer) context.getSingleNodePointer();",
      "info" : "VariableDeclarationStatement[11897-11964]:VariableDeclarationStatement[11897-11964]"
    }, {
      "left" : "if (pointer == null)",
      "right" : "if (pointer == null)",
      "info" : "IfStatement[11973-12039]:IfStatement[11973-12039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[11994-12039]:Block[11994-12039]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[12008-12029]:ReturnStatement[12008-12029]"
    }, {
      "left" : "return pointer.isLanguage(lang) ? Boolean.TRUE : Boolean.FALSE;",
      "right" : "return pointer.isLanguage(lang) ? Boolean.TRUE : Boolean.FALSE;",
      "info" : "ReturnStatement[12048-12111]:ReturnStatement[12048-12111]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12172-12487]:Block[12172-12487]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[12182-12200]:ExpressionStatement[12182-12200]"
    }, {
      "left" : "String id = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String id = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[12209-12278]:VariableDeclarationStatement[12209-12278]"
    }, {
      "left" : "JXPathContext jxpathContext = context.getJXPathContext();",
      "right" : "JXPathContext jxpathContext = context.getJXPathContext();",
      "info" : "VariableDeclarationStatement[12287-12344]:VariableDeclarationStatement[12287-12344]"
    }, {
      "left" : "NodePointer pointer = (NodePointer) jxpathContext.getContextPointer();",
      "right" : "NodePointer pointer = (NodePointer) jxpathContext.getContextPointer();",
      "info" : "VariableDeclarationStatement[12353-12423]:VariableDeclarationStatement[12353-12423]"
    }, {
      "left" : "return pointer.getPointerByID(jxpathContext, id);",
      "right" : "return pointer.getPointerByID(jxpathContext, id);",
      "info" : "ReturnStatement[12432-12481]:ReturnStatement[12432-12481]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12543-13571]:Block[12543-13571]"
    }, {
      "left" : "assertArgCount(2);",
      "right" : "assertArgCount(2);",
      "info" : "ExpressionStatement[12553-12571]:ExpressionStatement[12553-12571]"
    }, {
      "left" : "String key = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String key = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[12580-12650]:VariableDeclarationStatement[12580-12650]"
    }, {
      "left" : "Object value = getArg2().compute(context);",
      "right" : "Object value = getArg2().compute(context);",
      "info" : "VariableDeclarationStatement[12659-12701]:VariableDeclarationStatement[12659-12701]"
    }, {
      "left" : "EvalContext ec = null;",
      "right" : "EvalContext ec = null;",
      "info" : "VariableDeclarationStatement[12710-12732]:VariableDeclarationStatement[12710-12732]"
    }, {
      "left" : "if (value instanceof EvalContext)",
      "right" : "if (value instanceof EvalContext)",
      "info" : "IfStatement[12741-13030]:IfStatement[12741-13030]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12775-13030]:Block[12775-13030]"
    }, {
      "left" : "ec = (EvalContext) value;",
      "right" : "ec = (EvalContext) value;",
      "info" : "ExpressionStatement[12789-12814]:ExpressionStatement[12789-12814]"
    }, {
      "left" : "if (ec.hasNext())",
      "right" : "if (ec.hasNext())",
      "info" : "IfStatement[12827-13020]:IfStatement[12827-13020]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12845-12922]:Block[12845-12922]"
    }, {
      "left" : "value = ((NodePointer) ec.next()).getValue();",
      "right" : "value = ((NodePointer) ec.next()).getValue();",
      "info" : "ExpressionStatement[12863-12908]:ExpressionStatement[12863-12908]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[12928-13020]:Block[12928-13020]"
    }, {
      "left" : "return new BasicNodeSet();",
      "right" : "return new BasicNodeSet();",
      "info" : "ReturnStatement[12980-13006]:ReturnStatement[12980-13006]"
    }, {
      "left" : "JXPathContext jxpathContext = context.getJXPathContext();",
      "right" : "JXPathContext jxpathContext = context.getJXPathContext();",
      "info" : "VariableDeclarationStatement[13039-13096]:VariableDeclarationStatement[13039-13096]"
    }, {
      "left" : "NodeSet nodeSet = jxpathContext.getNodeSetByKey(key, value);",
      "right" : "NodeSet nodeSet = jxpathContext.getNodeSetByKey(key, value);",
      "info" : "VariableDeclarationStatement[13105-13165]:VariableDeclarationStatement[13105-13165]"
    }, {
      "left" : "if (ec != null && ec.hasNext())",
      "right" : "if (ec != null && ec.hasNext())",
      "info" : "IfStatement[13174-13512]:IfStatement[13174-13512]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13206-13512]:Block[13206-13512]"
    }, {
      "left" : "BasicNodeSet accum = new BasicNodeSet();",
      "right" : "BasicNodeSet accum = new BasicNodeSet();",
      "info" : "VariableDeclarationStatement[13220-13260]:VariableDeclarationStatement[13220-13260]"
    }, {
      "left" : "accum.add(nodeSet);",
      "right" : "accum.add(nodeSet);",
      "info" : "ExpressionStatement[13273-13292]:ExpressionStatement[13273-13292]"
    }, {
      "left" : "while (ec.hasNext())",
      "right" : "while (ec.hasNext())",
      "info" : "WhileStatement[13305-13473]:WhileStatement[13305-13473]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13326-13473]:Block[13326-13473]"
    }, {
      "left" : "value = ((NodePointer) ec.next()).getValue();",
      "right" : "value = ((NodePointer) ec.next()).getValue();",
      "info" : "ExpressionStatement[13344-13389]:ExpressionStatement[13344-13389]"
    }, {
      "left" : "accum.add(jxpathContext.getNodeSetByKey(key, value));",
      "right" : "accum.add(jxpathContext.getNodeSetByKey(key, value));",
      "info" : "ExpressionStatement[13406-13459]:ExpressionStatement[13406-13459]"
    }, {
      "left" : "nodeSet = accum;",
      "right" : "nodeSet = accum;",
      "info" : "ExpressionStatement[13486-13502]:ExpressionStatement[13486-13502]"
    }, {
      "left" : "return new NodeSetContext(context, nodeSet);",
      "right" : "return new NodeSetContext(context, nodeSet);",
      "info" : "ReturnStatement[13521-13565]:ReturnStatement[13521-13565]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13636-14248]:Block[13636-14248]"
    }, {
      "left" : "if (getArgumentCount() == 0)",
      "right" : "if (getArgumentCount() == 0)",
      "info" : "IfStatement[13646-13840]:IfStatement[13646-13840]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13675-13840]:Block[13675-13840]"
    }, {
      "left" : "NodePointer ptr = context.getCurrentNodePointer();",
      "right" : "NodePointer ptr = context.getCurrentNodePointer();",
      "info" : "VariableDeclarationStatement[13689-13739]:VariableDeclarationStatement[13689-13739]"
    }, {
      "left" : "String str = ptr.getNamespaceURI();",
      "right" : "String str = ptr.getNamespaceURI();",
      "info" : "VariableDeclarationStatement[13752-13787]:VariableDeclarationStatement[13752-13787]"
    }, {
      "left" : "return str == null ? \"\" : str;",
      "right" : "return str == null ? \"\" : str;",
      "info" : "ReturnStatement[13800-13830]:ReturnStatement[13800-13830]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[13849-13867]:ExpressionStatement[13849-13867]"
    }, {
      "left" : "Object set = getArg1().compute(context);",
      "right" : "Object set = getArg1().compute(context);",
      "info" : "VariableDeclarationStatement[13876-13916]:VariableDeclarationStatement[13876-13916]"
    }, {
      "left" : "if (set instanceof EvalContext)",
      "right" : "if (set instanceof EvalContext)",
      "info" : "IfStatement[13925-14223]:IfStatement[13925-14223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[13957-14223]:Block[13957-14223]"
    }, {
      "left" : "EvalContext ctx = (EvalContext) set;",
      "right" : "EvalContext ctx = (EvalContext) set;",
      "info" : "VariableDeclarationStatement[13971-14007]:VariableDeclarationStatement[13971-14007]"
    }, {
      "left" : "if (ctx.hasNext())",
      "right" : "if (ctx.hasNext())",
      "info" : "IfStatement[14020-14213]:IfStatement[14020-14213]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14039-14213]:Block[14039-14213]"
    }, {
      "left" : "NodePointer ptr = (NodePointer) ctx.next();",
      "right" : "NodePointer ptr = (NodePointer) ctx.next();",
      "info" : "VariableDeclarationStatement[14057-14100]:VariableDeclarationStatement[14057-14100]"
    }, {
      "left" : "String str = ptr.getNamespaceURI();",
      "right" : "String str = ptr.getNamespaceURI();",
      "info" : "VariableDeclarationStatement[14117-14152]:VariableDeclarationStatement[14117-14152]"
    }, {
      "left" : "return str == null ? \"\" : str;",
      "right" : "return str == null ? \"\" : str;",
      "info" : "ReturnStatement[14169-14199]:ReturnStatement[14169-14199]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[14232-14242]:ReturnStatement[14232-14242]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14310-14824]:Block[14310-14824]"
    }, {
      "left" : "if (getArgumentCount() == 0)",
      "right" : "if (getArgumentCount() == 0)",
      "info" : "IfStatement[14320-14467]:IfStatement[14320-14467]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14349-14467]:Block[14349-14467]"
    }, {
      "left" : "NodePointer ptr = context.getCurrentNodePointer();",
      "right" : "NodePointer ptr = context.getCurrentNodePointer();",
      "info" : "VariableDeclarationStatement[14363-14413]:VariableDeclarationStatement[14363-14413]"
    }, {
      "left" : "return ptr.getName().getName();",
      "right" : "return ptr.getName().getName();",
      "info" : "ReturnStatement[14426-14457]:ReturnStatement[14426-14457]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[14476-14494]:ExpressionStatement[14476-14494]"
    }, {
      "left" : "Object set = getArg1().compute(context);",
      "right" : "Object set = getArg1().compute(context);",
      "info" : "VariableDeclarationStatement[14503-14543]:VariableDeclarationStatement[14503-14543]"
    }, {
      "left" : "if (set instanceof EvalContext)",
      "right" : "if (set instanceof EvalContext)",
      "info" : "IfStatement[14552-14799]:IfStatement[14552-14799]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14584-14799]:Block[14584-14799]"
    }, {
      "left" : "EvalContext ctx = (EvalContext) set;",
      "right" : "EvalContext ctx = (EvalContext) set;",
      "info" : "VariableDeclarationStatement[14598-14634]:VariableDeclarationStatement[14598-14634]"
    }, {
      "left" : "if (ctx.hasNext())",
      "right" : "if (ctx.hasNext())",
      "info" : "IfStatement[14647-14789]:IfStatement[14647-14789]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14666-14789]:Block[14666-14789]"
    }, {
      "left" : "NodePointer ptr = (NodePointer) ctx.next();",
      "right" : "NodePointer ptr = (NodePointer) ctx.next();",
      "info" : "VariableDeclarationStatement[14684-14727]:VariableDeclarationStatement[14684-14727]"
    }, {
      "left" : "return ptr.getName().getName();",
      "right" : "return ptr.getName().getName();",
      "info" : "ReturnStatement[14744-14775]:ReturnStatement[14744-14775]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[14808-14818]:ReturnStatement[14808-14818]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14881-15397]:Block[14881-15397]"
    }, {
      "left" : "if (getArgumentCount() == 0)",
      "right" : "if (getArgumentCount() == 0)",
      "info" : "IfStatement[14891-15039]:IfStatement[14891-15039]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[14920-15039]:Block[14920-15039]"
    }, {
      "left" : "NodePointer ptr = context.getCurrentNodePointer();",
      "right" : "NodePointer ptr = context.getCurrentNodePointer();",
      "info" : "VariableDeclarationStatement[14934-14984]:VariableDeclarationStatement[14934-14984]"
    }, {
      "left" : "return ptr.getName().toString();",
      "right" : "return ptr.getName().toString();",
      "info" : "ReturnStatement[14997-15029]:ReturnStatement[14997-15029]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[15048-15066]:ExpressionStatement[15048-15066]"
    }, {
      "left" : "Object set = getArg1().compute(context);",
      "right" : "Object set = getArg1().compute(context);",
      "info" : "VariableDeclarationStatement[15075-15115]:VariableDeclarationStatement[15075-15115]"
    }, {
      "left" : "if (set instanceof EvalContext)",
      "right" : "if (set instanceof EvalContext)",
      "info" : "IfStatement[15124-15372]:IfStatement[15124-15372]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15156-15372]:Block[15156-15372]"
    }, {
      "left" : "EvalContext ctx = (EvalContext) set;",
      "right" : "EvalContext ctx = (EvalContext) set;",
      "info" : "VariableDeclarationStatement[15170-15206]:VariableDeclarationStatement[15170-15206]"
    }, {
      "left" : "if (ctx.hasNext())",
      "right" : "if (ctx.hasNext())",
      "info" : "IfStatement[15219-15362]:IfStatement[15219-15362]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15238-15362]:Block[15238-15362]"
    }, {
      "left" : "NodePointer ptr = (NodePointer) ctx.next();",
      "right" : "NodePointer ptr = (NodePointer) ctx.next();",
      "info" : "VariableDeclarationStatement[15256-15299]:VariableDeclarationStatement[15256-15299]"
    }, {
      "left" : "return ptr.getName().toString();",
      "right" : "return ptr.getName().toString();",
      "info" : "ReturnStatement[15316-15348]:ReturnStatement[15316-15348]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[15381-15391]:ReturnStatement[15381-15391]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15456-15689]:Block[15456-15689]"
    }, {
      "left" : "if (getArgumentCount() == 0)",
      "right" : "if (getArgumentCount() == 0)",
      "info" : "IfStatement[15466-15583]:IfStatement[15466-15583]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15495-15583]:Block[15495-15583]"
    }, {
      "left" : "return InfoSetUtil.stringValue(context.getCurrentNodePointer());",
      "right" : "return InfoSetUtil.stringValue(context.getCurrentNodePointer());",
      "info" : "ReturnStatement[15509-15573]:ReturnStatement[15509-15573]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[15592-15610]:ExpressionStatement[15592-15610]"
    }, {
      "left" : "return InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "return InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "ReturnStatement[15619-15683]:ReturnStatement[15619-15683]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15748-16098]:Block[15748-16098]"
    }, {
      "left" : "if (getArgumentCount() < 2)",
      "right" : "if (getArgumentCount() < 2)",
      "info" : "IfStatement[15758-15828]:IfStatement[15758-15828]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15786-15828]:Block[15786-15828]"
    }, {
      "left" : "assertArgCount(2);",
      "right" : "assertArgCount(2);",
      "info" : "ExpressionStatement[15800-15818]:ExpressionStatement[15800-15818]"
    }, {
      "left" : "StringBuffer buffer = new StringBuffer();",
      "right" : "StringBuffer buffer = new StringBuffer();",
      "info" : "VariableDeclarationStatement[15837-15878]:VariableDeclarationStatement[15837-15878]"
    }, {
      "left" : "Expression args[] = getArguments();",
      "right" : "Expression args[] = getArguments();",
      "info" : "VariableDeclarationStatement[15887-15922]:VariableDeclarationStatement[15887-15922]"
    }, {
      "left" : "for (int i = 0; i < args.length; i++)",
      "right" : "for (int i = 0; i < args.length; i++)",
      "info" : "ForStatement[15931-16058]:ForStatement[15931-16058]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[15969-16058]:Block[15969-16058]"
    }, {
      "left" : "buffer.append(InfoSetUtil.stringValue(args[i].compute(context)));",
      "right" : "buffer.append(InfoSetUtil.stringValue(args[i].compute(context)));",
      "info" : "ExpressionStatement[15983-16048]:ExpressionStatement[15983-16048]"
    }, {
      "left" : "return buffer.toString();",
      "right" : "return buffer.toString();",
      "info" : "ReturnStatement[16067-16092]:ReturnStatement[16067-16092]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16161-16416]:Block[16161-16416]"
    }, {
      "left" : "assertArgCount(2);",
      "right" : "assertArgCount(2);",
      "info" : "ExpressionStatement[16171-16189]:ExpressionStatement[16171-16189]"
    }, {
      "left" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[16198-16267]:VariableDeclarationStatement[16198-16267]"
    }, {
      "left" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "right" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "info" : "VariableDeclarationStatement[16276-16345]:VariableDeclarationStatement[16276-16345]"
    }, {
      "left" : "return s1.startsWith(s2) ? Boolean.TRUE : Boolean.FALSE;",
      "right" : "return s1.startsWith(s2) ? Boolean.TRUE : Boolean.FALSE;",
      "info" : "ReturnStatement[16354-16410]:ReturnStatement[16354-16410]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16477-16735]:Block[16477-16735]"
    }, {
      "left" : "assertArgCount(2);",
      "right" : "assertArgCount(2);",
      "info" : "ExpressionStatement[16487-16505]:ExpressionStatement[16487-16505]"
    }, {
      "left" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[16514-16583]:VariableDeclarationStatement[16514-16583]"
    }, {
      "left" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "right" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "info" : "VariableDeclarationStatement[16592-16661]:VariableDeclarationStatement[16592-16661]"
    }, {
      "left" : "return s1.indexOf(s2) != -1 ? Boolean.TRUE : Boolean.FALSE;",
      "right" : "return s1.indexOf(s2) != -1 ? Boolean.TRUE : Boolean.FALSE;",
      "info" : "ReturnStatement[16670-16729]:ReturnStatement[16670-16729]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[16803-17128]:Block[16803-17128]"
    }, {
      "left" : "assertArgCount(2);",
      "right" : "assertArgCount(2);",
      "info" : "ExpressionStatement[16813-16831]:ExpressionStatement[16813-16831]"
    }, {
      "left" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[16840-16909]:VariableDeclarationStatement[16840-16909]"
    }, {
      "left" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "right" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "info" : "VariableDeclarationStatement[16918-16987]:VariableDeclarationStatement[16918-16987]"
    }, {
      "left" : "int index = s1.indexOf(s2);",
      "right" : "int index = s1.indexOf(s2);",
      "info" : "VariableDeclarationStatement[16996-17023]:VariableDeclarationStatement[16996-17023]"
    }, {
      "left" : "if (index == -1)",
      "right" : "if (index == -1)",
      "info" : "IfStatement[17032-17083]:IfStatement[17032-17083]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17049-17083]:Block[17049-17083]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[17063-17073]:ReturnStatement[17063-17073]"
    }, {
      "left" : "return s1.substring(0, index);",
      "right" : "return s1.substring(0, index);",
      "info" : "ReturnStatement[17092-17122]:ReturnStatement[17092-17122]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17195-17531]:Block[17195-17531]"
    }, {
      "left" : "assertArgCount(2);",
      "right" : "assertArgCount(2);",
      "info" : "ExpressionStatement[17205-17223]:ExpressionStatement[17205-17223]"
    }, {
      "left" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[17232-17301]:VariableDeclarationStatement[17232-17301]"
    }, {
      "left" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "right" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "info" : "VariableDeclarationStatement[17310-17379]:VariableDeclarationStatement[17310-17379]"
    }, {
      "left" : "int index = s1.indexOf(s2);",
      "right" : "int index = s1.indexOf(s2);",
      "info" : "VariableDeclarationStatement[17388-17415]:VariableDeclarationStatement[17388-17415]"
    }, {
      "left" : "if (index == -1)",
      "right" : "if (index == -1)",
      "info" : "IfStatement[17424-17475]:IfStatement[17424-17475]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17441-17475]:Block[17441-17475]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[17455-17465]:ReturnStatement[17455-17465]"
    }, {
      "left" : "return s1.substring(index + s2.length());",
      "right" : "return s1.substring(index + s2.length());",
      "info" : "ReturnStatement[17484-17525]:ReturnStatement[17484-17525]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17593-18756]:Block[17593-18756]"
    }, {
      "left" : "int ac = getArgumentCount();",
      "right" : "int ac = getArgumentCount();",
      "info" : "VariableDeclarationStatement[17603-17631]:VariableDeclarationStatement[17603-17631]"
    }, {
      "left" : "if (ac != 2 && ac != 3)",
      "right" : "if (ac != 2 && ac != 3)",
      "info" : "IfStatement[17640-17706]:IfStatement[17640-17706]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17664-17706]:Block[17664-17706]"
    }, {
      "left" : "assertArgCount(2);",
      "right" : "assertArgCount(2);",
      "info" : "ExpressionStatement[17678-17696]:ExpressionStatement[17678-17696]"
    }, {
      "left" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[17716-17785]:VariableDeclarationStatement[17716-17785]"
    }, {
      "left" : "double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));",
      "right" : "double from = InfoSetUtil.doubleValue(getArg2().computeValue(context));",
      "info" : "VariableDeclarationStatement[17794-17865]:VariableDeclarationStatement[17794-17865]"
    }, {
      "left" : "if (Double.isNaN(from))",
      "right" : "if (Double.isNaN(from))",
      "info" : "IfStatement[17874-17932]:IfStatement[17874-17932]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[17898-17932]:Block[17898-17932]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[17912-17922]:ReturnStatement[17912-17922]"
    }, {
      "left" : "from = Math.round(from);",
      "right" : "from = Math.round(from);",
      "info" : "ExpressionStatement[17942-17966]:ExpressionStatement[17942-17966]"
    }, {
      "left" : "if (from > s1.length() + 1)",
      "right" : "if (from > s1.length() + 1)",
      "info" : "IfStatement[17975-18037]:IfStatement[17975-18037]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18003-18037]:Block[18003-18037]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[18017-18027]:ReturnStatement[18017-18027]"
    }, {
      "left" : "if (ac == 2)",
      "right" : "if (ac == 2)",
      "info" : "IfStatement[18046-18187]:IfStatement[18046-18187]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18059-18187]:Block[18059-18187]"
    }, {
      "left" : "if (from < 1)",
      "right" : "if (from < 1)",
      "info" : "IfStatement[18073-18128]:IfStatement[18073-18128]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18087-18128]:Block[18087-18128]"
    }, {
      "left" : "from = 1;",
      "right" : "from = 1;",
      "info" : "ExpressionStatement[18105-18114]:ExpressionStatement[18105-18114]"
    }, {
      "left" : "return s1.substring((int) from - 1);",
      "right" : "return s1.substring((int) from - 1);",
      "info" : "ReturnStatement[18141-18177]:ReturnStatement[18141-18177]"
    }, {
      "left" : "double length =\n            InfoSetUtil.doubleValue(getArg3().computeValue(context));",
      "right" : "double length =\n            InfoSetUtil.doubleValue(getArg3().computeValue(context));",
      "info" : "VariableDeclarationStatement[18196-18281]:VariableDeclarationStatement[18196-18281]"
    }, {
      "left" : "length = Math.round(length);",
      "right" : "length = Math.round(length);",
      "info" : "ExpressionStatement[18290-18318]:ExpressionStatement[18290-18318]"
    }, {
      "left" : "if (length < 0)",
      "right" : "if (length < 0)",
      "info" : "IfStatement[18327-18377]:IfStatement[18327-18377]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18343-18377]:Block[18343-18377]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[18357-18367]:ReturnStatement[18357-18367]"
    }, {
      "left" : "double to = from + length;",
      "right" : "double to = from + length;",
      "info" : "VariableDeclarationStatement[18387-18413]:VariableDeclarationStatement[18387-18413]"
    }, {
      "left" : "if (to < 1)",
      "right" : "if (to < 1)",
      "info" : "IfStatement[18422-18468]:IfStatement[18422-18468]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18434-18468]:Block[18434-18468]"
    }, {
      "left" : "return \"\";",
      "right" : "return \"\";",
      "info" : "ReturnStatement[18448-18458]:ReturnStatement[18448-18458]"
    }, {
      "left" : "if (to > s1.length() + 1)",
      "right" : "if (to > s1.length() + 1)",
      "info" : "IfStatement[18478-18632]:IfStatement[18478-18632]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18504-18632]:Block[18504-18632]"
    }, {
      "left" : "if (from < 1)",
      "right" : "if (from < 1)",
      "info" : "IfStatement[18518-18573]:IfStatement[18518-18573]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18532-18573]:Block[18532-18573]"
    }, {
      "left" : "from = 1;",
      "right" : "from = 1;",
      "info" : "ExpressionStatement[18550-18559]:ExpressionStatement[18550-18559]"
    }, {
      "left" : "return s1.substring((int) from - 1);",
      "right" : "return s1.substring((int) from - 1);",
      "info" : "ReturnStatement[18586-18622]:ReturnStatement[18586-18622]"
    }, {
      "left" : "if (from < 1)",
      "right" : "if (from < 1)",
      "info" : "IfStatement[18642-18689]:IfStatement[18642-18689]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18656-18689]:Block[18656-18689]"
    }, {
      "left" : "from = 1;",
      "right" : "from = 1;",
      "info" : "ExpressionStatement[18670-18679]:ExpressionStatement[18670-18679]"
    }, {
      "left" : "return s1.substring((int) from - 1, (int) (to - 1));",
      "right" : "return s1.substring((int) from - 1, (int) (to - 1));",
      "info" : "ReturnStatement[18698-18750]:ReturnStatement[18698-18750]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18821-19138]:Block[18821-19138]"
    }, {
      "left" : "String s;",
      "right" : "String s;",
      "info" : "VariableDeclarationStatement[18831-18840]:VariableDeclarationStatement[18831-18840]"
    }, {
      "left" : "if (getArgumentCount() == 0)",
      "right" : "if (getArgumentCount() == 0)",
      "info" : "IfStatement[18849-19093]:IfStatement[18849-19093]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18878-18963]:Block[18878-18963]"
    }, {
      "left" : "s = InfoSetUtil.stringValue(context.getCurrentNodePointer());",
      "right" : "s = InfoSetUtil.stringValue(context.getCurrentNodePointer());",
      "info" : "ExpressionStatement[18892-18953]:ExpressionStatement[18892-18953]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[18977-19093]:Block[18977-19093]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[18991-19009]:ExpressionStatement[18991-19009]"
    }, {
      "left" : "s = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "s = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "ExpressionStatement[19022-19083]:ExpressionStatement[19022-19083]"
    }, {
      "left" : "return new Double(s.length());",
      "right" : "return new Double(s.length());",
      "info" : "ReturnStatement[19102-19132]:ReturnStatement[19102-19132]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19205-20118]:Block[19205-20118]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[19215-19233]:ExpressionStatement[19215-19233]"
    }, {
      "left" : "String s = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String s = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[19242-19310]:VariableDeclarationStatement[19242-19310]"
    }, {
      "left" : "char chars[] = s.toCharArray();",
      "right" : "char chars[] = s.toCharArray();",
      "info" : "VariableDeclarationStatement[19319-19350]:VariableDeclarationStatement[19319-19350]"
    }, {
      "left" : "int out = 0;",
      "right" : "int out = 0;",
      "info" : "VariableDeclarationStatement[19359-19371]:VariableDeclarationStatement[19359-19371]"
    }, {
      "left" : "int phase = 0;",
      "right" : "int phase = 0;",
      "info" : "VariableDeclarationStatement[19380-19394]:VariableDeclarationStatement[19380-19394]"
    }, {
      "left" : "for (int in = 0; in < chars.length; in++)",
      "right" : "for (int in = 0; in < chars.length; in++)",
      "info" : "ForStatement[19403-19997]:ForStatement[19403-19997]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19445-19997]:Block[19445-19997]"
    }, {
      "left" : "switch(chars[in]) {\n                case 0x20:\n                case 0x9:\n                case 0xD:\n                case 0xA:\n                    if (phase == 0) {      // beginning\n                        ;\n                    }\n                    else if (phase == 1) { // non-space\n                        phase = 2;\n                        chars[out++] = ' ';\n                    }\n                    break;\n                default:\n                    chars[out++] = chars[in];\n                    phase = 1;\n            }",
      "right" : "switch(chars[in]) {\n                case 0x20:\n                case 0x9:\n                case 0xD:\n                case 0xA:\n                    if (phase == 0) {      // beginning\n                        ;\n                    }\n                    else if (phase == 1) { // non-space\n                        phase = 2;\n                        chars[out++] = ' ';\n                    }\n                    break;\n                default:\n                    chars[out++] = chars[in];\n                    phase = 1;\n            }",
      "info" : "SwitchStatement[19459-19987]:SwitchStatement[19459-19987]"
    }, {
      "left" : "case 0x20:",
      "right" : "case 0x20:",
      "info" : "SwitchCase[19495-19505]:SwitchCase[19495-19505]"
    }, {
      "left" : "case 0x9:",
      "right" : "case 0x9:",
      "info" : "SwitchCase[19522-19531]:SwitchCase[19522-19531]"
    }, {
      "left" : "case 0xD:",
      "right" : "case 0xD:",
      "info" : "SwitchCase[19548-19557]:SwitchCase[19548-19557]"
    }, {
      "left" : "case 0xA:",
      "right" : "case 0xA:",
      "info" : "SwitchCase[19574-19583]:SwitchCase[19574-19583]"
    }, {
      "left" : "if (phase == 0)",
      "right" : "if (phase == 0)",
      "info" : "IfStatement[19604-19844]:IfStatement[19604-19844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19620-19687]:Block[19620-19687]"
    }, {
      "left" : ";",
      "right" : ";",
      "info" : "EmptyStatement[19664-19665]:EmptyStatement[19664-19665]"
    }, {
      "left" : "if (phase == 1)",
      "right" : "if (phase == 1)",
      "info" : "IfStatement[19713-19844]:IfStatement[19713-19844]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[19729-19844]:Block[19729-19844]"
    }, {
      "left" : "phase = 2;",
      "right" : "phase = 2;",
      "info" : "ExpressionStatement[19768-19778]:ExpressionStatement[19768-19778]"
    }, {
      "left" : "chars[out++] = ' ';",
      "right" : "chars[out++] = ' ';",
      "info" : "ExpressionStatement[19803-19822]:ExpressionStatement[19803-19822]"
    }, {
      "left" : "break;",
      "right" : "break;",
      "info" : "BreakStatement[19865-19871]:BreakStatement[19865-19871]"
    }, {
      "left" : "default:",
      "right" : "default:",
      "info" : "SwitchCase[19888-19896]:SwitchCase[19888-19896]"
    }, {
      "left" : "chars[out++] = chars[in];",
      "right" : "chars[out++] = chars[in];",
      "info" : "ExpressionStatement[19917-19942]:ExpressionStatement[19917-19942]"
    }, {
      "left" : "phase = 1;",
      "right" : "phase = 1;",
      "info" : "ExpressionStatement[19963-19973]:ExpressionStatement[19963-19973]"
    }, {
      "left" : "if (phase == 2)",
      "right" : "if (phase == 2)",
      "info" : "IfStatement[20006-20070]:IfStatement[20006-20070]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20022-20070]:Block[20022-20070]"
    }, {
      "left" : "out--;",
      "right" : "out--;",
      "info" : "ExpressionStatement[20054-20060]:ExpressionStatement[20054-20060]"
    }, {
      "left" : "return new String(chars, 0, out);",
      "right" : "return new String(chars, 0, out);",
      "info" : "ReturnStatement[20079-20112]:ReturnStatement[20079-20112]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20180-20903]:Block[20180-20903]"
    }, {
      "left" : "assertArgCount(3);",
      "right" : "assertArgCount(3);",
      "info" : "ExpressionStatement[20190-20208]:ExpressionStatement[20190-20208]"
    }, {
      "left" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "right" : "String s1 = InfoSetUtil.stringValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[20217-20286]:VariableDeclarationStatement[20217-20286]"
    }, {
      "left" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "right" : "String s2 = InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "info" : "VariableDeclarationStatement[20295-20364]:VariableDeclarationStatement[20295-20364]"
    }, {
      "left" : "String s3 = InfoSetUtil.stringValue(getArg3().computeValue(context));",
      "right" : "String s3 = InfoSetUtil.stringValue(getArg3().computeValue(context));",
      "info" : "VariableDeclarationStatement[20373-20442]:VariableDeclarationStatement[20373-20442]"
    }, {
      "left" : "char chars[] = s1.toCharArray();",
      "right" : "char chars[] = s1.toCharArray();",
      "info" : "VariableDeclarationStatement[20451-20483]:VariableDeclarationStatement[20451-20483]"
    }, {
      "left" : "int out = 0;",
      "right" : "int out = 0;",
      "info" : "VariableDeclarationStatement[20492-20504]:VariableDeclarationStatement[20492-20504]"
    }, {
      "left" : "for (int in = 0; in < chars.length; in++)",
      "right" : "for (int in = 0; in < chars.length; in++)",
      "info" : "ForStatement[20513-20855]:ForStatement[20513-20855]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20555-20855]:Block[20555-20855]"
    }, {
      "left" : "char c = chars[in];",
      "right" : "char c = chars[in];",
      "info" : "VariableDeclarationStatement[20569-20588]:VariableDeclarationStatement[20569-20588]"
    }, {
      "left" : "int inx = s2.indexOf(c);",
      "right" : "int inx = s2.indexOf(c);",
      "info" : "VariableDeclarationStatement[20601-20625]:VariableDeclarationStatement[20601-20625]"
    }, {
      "left" : "if (inx != -1)",
      "right" : "if (inx != -1)",
      "info" : "IfStatement[20638-20845]:IfStatement[20638-20845]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20653-20778]:Block[20653-20778]"
    }, {
      "left" : "if (inx < s3.length())",
      "right" : "if (inx < s3.length())",
      "info" : "IfStatement[20671-20764]:IfStatement[20671-20764]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20694-20764]:Block[20694-20764]"
    }, {
      "left" : "chars[out++] = s3.charAt(inx);",
      "right" : "chars[out++] = s3.charAt(inx);",
      "info" : "ExpressionStatement[20716-20746]:ExpressionStatement[20716-20746]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20796-20845]:Block[20796-20845]"
    }, {
      "left" : "chars[out++] = c;",
      "right" : "chars[out++] = c;",
      "info" : "ExpressionStatement[20814-20831]:ExpressionStatement[20814-20831]"
    }, {
      "left" : "return new String(chars, 0, out);",
      "right" : "return new String(chars, 0, out);",
      "info" : "ReturnStatement[20864-20897]:ReturnStatement[20864-20897]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[20963-21126]:Block[20963-21126]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[20973-20991]:ExpressionStatement[20973-20991]"
    }, {
      "left" : "return InfoSetUtil.booleanValue(getArg1().computeValue(context))\n            ? Boolean.TRUE\n            : Boolean.FALSE;",
      "right" : "return InfoSetUtil.booleanValue(getArg1().computeValue(context))\n            ? Boolean.TRUE\n            : Boolean.FALSE;",
      "info" : "ReturnStatement[21000-21120]:ReturnStatement[21000-21120]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21182-21345]:Block[21182-21345]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[21192-21210]:ExpressionStatement[21192-21210]"
    }, {
      "left" : "return InfoSetUtil.booleanValue(getArg1().computeValue(context))\n            ? Boolean.FALSE\n            : Boolean.TRUE;",
      "right" : "return InfoSetUtil.booleanValue(getArg1().computeValue(context))\n            ? Boolean.FALSE\n            : Boolean.TRUE;",
      "info" : "ReturnStatement[21219-21339]:ReturnStatement[21219-21339]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21402-21465]:Block[21402-21465]"
    }, {
      "left" : "assertArgCount(0);",
      "right" : "assertArgCount(0);",
      "info" : "ExpressionStatement[21412-21430]:ExpressionStatement[21412-21430]"
    }, {
      "left" : "return Boolean.TRUE;",
      "right" : "return Boolean.TRUE;",
      "info" : "ReturnStatement[21439-21459]:ReturnStatement[21439-21459]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21523-21587]:Block[21523-21587]"
    }, {
      "left" : "assertArgCount(0);",
      "right" : "assertArgCount(0);",
      "info" : "ExpressionStatement[21533-21551]:ExpressionStatement[21533-21551]"
    }, {
      "left" : "return Boolean.FALSE;",
      "right" : "return Boolean.FALSE;",
      "info" : "ReturnStatement[21560-21581]:ReturnStatement[21560-21581]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21644-21699]:Block[21644-21699]"
    }, {
      "left" : "assertArgCount(0);",
      "right" : "assertArgCount(0);",
      "info" : "ExpressionStatement[21654-21672]:ExpressionStatement[21654-21672]"
    }, {
      "left" : "return null;",
      "right" : "return null;",
      "info" : "ReturnStatement[21681-21693]:ReturnStatement[21681-21693]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21758-21981]:Block[21758-21981]"
    }, {
      "left" : "if (getArgumentCount() == 0)",
      "right" : "if (getArgumentCount() == 0)",
      "info" : "IfStatement[21768-21880]:IfStatement[21768-21880]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[21797-21880]:Block[21797-21880]"
    }, {
      "left" : "return InfoSetUtil.number(context.getCurrentNodePointer());",
      "right" : "return InfoSetUtil.number(context.getCurrentNodePointer());",
      "info" : "ReturnStatement[21811-21870]:ReturnStatement[21811-21870]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[21889-21907]:ExpressionStatement[21889-21907]"
    }, {
      "left" : "return InfoSetUtil.number(getArg1().computeValue(context));",
      "right" : "return InfoSetUtil.number(getArg1().computeValue(context));",
      "info" : "ReturnStatement[21916-21975]:ReturnStatement[21916-21975]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22037-22614]:Block[22037-22614]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[22047-22065]:ExpressionStatement[22047-22065]"
    }, {
      "left" : "Object v = getArg1().compute(context);",
      "right" : "Object v = getArg1().compute(context);",
      "info" : "VariableDeclarationStatement[22074-22112]:VariableDeclarationStatement[22074-22112]"
    }, {
      "left" : "if (v == null)",
      "right" : "if (v == null)",
      "info" : "IfStatement[22121-22172]:IfStatement[22121-22172]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22136-22172]:Block[22136-22172]"
    }, {
      "left" : "return ZERO;",
      "right" : "return ZERO;",
      "info" : "ReturnStatement[22150-22162]:ReturnStatement[22150-22162]"
    }, {
      "left" : "if (v instanceof EvalContext)",
      "right" : "if (v instanceof EvalContext)",
      "info" : "IfStatement[22181-22498]:IfStatement[22181-22498]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22211-22498]:Block[22211-22498]"
    }, {
      "left" : "double sum = 0.0;",
      "right" : "double sum = 0.0;",
      "info" : "VariableDeclarationStatement[22225-22242]:VariableDeclarationStatement[22225-22242]"
    }, {
      "left" : "EvalContext ctx = (EvalContext) v;",
      "right" : "EvalContext ctx = (EvalContext) v;",
      "info" : "VariableDeclarationStatement[22255-22289]:VariableDeclarationStatement[22255-22289]"
    }, {
      "left" : "while (ctx.hasNext())",
      "right" : "while (ctx.hasNext())",
      "info" : "WhileStatement[22302-22452]:WhileStatement[22302-22452]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22324-22452]:Block[22324-22452]"
    }, {
      "left" : "NodePointer ptr = (NodePointer) ctx.next();",
      "right" : "NodePointer ptr = (NodePointer) ctx.next();",
      "info" : "VariableDeclarationStatement[22342-22385]:VariableDeclarationStatement[22342-22385]"
    }, {
      "left" : "sum += InfoSetUtil.doubleValue(ptr);",
      "right" : "sum += InfoSetUtil.doubleValue(ptr);",
      "info" : "ExpressionStatement[22402-22438]:ExpressionStatement[22402-22438]"
    }, {
      "left" : "return new Double(sum);",
      "right" : "return new Double(sum);",
      "info" : "ReturnStatement[22465-22488]:ReturnStatement[22465-22488]"
    }, {
      "left" : "throw new JXPathException(\n            \"Invalid argument type for 'sum': \" + v.getClass().getName());",
      "right" : "throw new JXPathException(\n            \"Invalid argument type for 'sum': \" + v.getClass().getName());",
      "info" : "ThrowStatement[22507-22608]:ThrowStatement[22507-22608]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22672-22825]:Block[22672-22921]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[22682-22700]:ExpressionStatement[22682-22700]"
    }, {
      "left" : "double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));",
      "right" : "double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[22709-22777]:VariableDeclarationStatement[22709-22777]"
    }, {
      "left" : "return new Double(Math.floor(v));",
      "right" : "return new Double(Math.floor(v));",
      "info" : "ReturnStatement[22786-22819]:ReturnStatement[22882-22915]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[22885-23037]:Block[22981-23229]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[22895-22913]:ExpressionStatement[22991-23009]"
    }, {
      "left" : "double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));",
      "right" : "double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[22922-22990]:VariableDeclarationStatement[23018-23086]"
    }, {
      "left" : "return new Double(Math.ceil(v));",
      "right" : "return new Double(Math.ceil(v));",
      "info" : "ReturnStatement[22999-23031]:ReturnStatement[23191-23223]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23095-23248]:Block[23287-23536]"
    }, {
      "left" : "assertArgCount(1);",
      "right" : "assertArgCount(1);",
      "info" : "ExpressionStatement[23105-23123]:ExpressionStatement[23297-23315]"
    }, {
      "left" : "double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));",
      "right" : "double v = InfoSetUtil.doubleValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[23132-23200]:VariableDeclarationStatement[23324-23392]"
    }, {
      "left" : "return new Double(Math.round(v));",
      "right" : "return new Double(Math.round(v));",
      "info" : "ReturnStatement[23209-23242]:ReturnStatement[23497-23530]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23311-24495]:Block[23599-24783]"
    }, {
      "left" : "int ac = getArgumentCount();",
      "right" : "int ac = getArgumentCount();",
      "info" : "VariableDeclarationStatement[23321-23349]:VariableDeclarationStatement[23609-23637]"
    }, {
      "left" : "if (ac != 2 && ac != 3)",
      "right" : "if (ac != 2 && ac != 3)",
      "info" : "IfStatement[23358-23424]:IfStatement[23646-23712]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23382-23424]:Block[23670-23712]"
    }, {
      "left" : "assertArgCount(2);",
      "right" : "assertArgCount(2);",
      "info" : "ExpressionStatement[23396-23414]:ExpressionStatement[23684-23702]"
    }, {
      "left" : "double number =\n            InfoSetUtil.doubleValue(getArg1().computeValue(context));",
      "right" : "double number =\n            InfoSetUtil.doubleValue(getArg1().computeValue(context));",
      "info" : "VariableDeclarationStatement[23434-23519]:VariableDeclarationStatement[23722-23807]"
    }, {
      "left" : "String pattern =\n            InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "right" : "String pattern =\n            InfoSetUtil.stringValue(getArg2().computeValue(context));",
      "info" : "VariableDeclarationStatement[23528-23614]:VariableDeclarationStatement[23816-23902]"
    }, {
      "left" : "DecimalFormatSymbols symbols = null;",
      "right" : "DecimalFormatSymbols symbols = null;",
      "info" : "VariableDeclarationStatement[23624-23660]:VariableDeclarationStatement[23912-23948]"
    }, {
      "left" : "if (ac == 3)",
      "right" : "if (ac == 3)",
      "info" : "IfStatement[23669-24271]:IfStatement[23957-24559]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23682-23903]:Block[23970-24191]"
    }, {
      "left" : "String symbolsName =\n                InfoSetUtil.stringValue(getArg3().computeValue(context));",
      "right" : "String symbolsName =\n                InfoSetUtil.stringValue(getArg3().computeValue(context));",
      "info" : "VariableDeclarationStatement[23696-23790]:VariableDeclarationStatement[23984-24078]"
    }, {
      "left" : "symbols =\n                context.getJXPathContext().getDecimalFormatSymbols(symbolsName);",
      "right" : "symbols =\n                context.getJXPathContext().getDecimalFormatSymbols(symbolsName);",
      "info" : "ExpressionStatement[23803-23893]:ExpressionStatement[24091-24181]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[23917-24271]:Block[24205-24559]"
    }, {
      "left" : "NodePointer pointer = context.getCurrentNodePointer();",
      "right" : "NodePointer pointer = context.getCurrentNodePointer();",
      "info" : "VariableDeclarationStatement[23931-23985]:VariableDeclarationStatement[24219-24273]"
    }, {
      "left" : "Locale locale;",
      "right" : "Locale locale;",
      "info" : "VariableDeclarationStatement[23998-24012]:VariableDeclarationStatement[24286-24300]"
    }, {
      "left" : "if (pointer != null)",
      "right" : "if (pointer != null)",
      "info" : "IfStatement[24025-24205]:IfStatement[24313-24493]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24046-24107]:Block[24334-24395]"
    }, {
      "left" : "locale = pointer.getLocale();",
      "right" : "locale = pointer.getLocale();",
      "info" : "ExpressionStatement[24064-24093]:ExpressionStatement[24352-24381]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24125-24205]:Block[24413-24493]"
    }, {
      "left" : "locale = context.getJXPathContext().getLocale();",
      "right" : "locale = context.getJXPathContext().getLocale();",
      "info" : "ExpressionStatement[24143-24191]:ExpressionStatement[24431-24479]"
    }, {
      "left" : "symbols = new DecimalFormatSymbols(locale);",
      "right" : "symbols = new DecimalFormatSymbols(locale);",
      "info" : "ExpressionStatement[24218-24261]:ExpressionStatement[24506-24549]"
    }, {
      "left" : "DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();",
      "right" : "DecimalFormat format = (DecimalFormat) NumberFormat.getInstance();",
      "info" : "VariableDeclarationStatement[24289-24355]:VariableDeclarationStatement[24577-24643]"
    }, {
      "left" : "format.setDecimalFormatSymbols(symbols);",
      "right" : "format.setDecimalFormatSymbols(symbols);",
      "info" : "ExpressionStatement[24364-24404]:ExpressionStatement[24652-24692]"
    }, {
      "left" : "format.applyLocalizedPattern(pattern);",
      "right" : "format.applyLocalizedPattern(pattern);",
      "info" : "ExpressionStatement[24413-24451]:ExpressionStatement[24701-24739]"
    }, {
      "left" : "return format.format(number);",
      "right" : "return format.format(number);",
      "info" : "ReturnStatement[24460-24489]:ReturnStatement[24748-24777]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24540-24585]:Block[24828-24873]"
    }, {
      "left" : "assertArgRange(count, count);",
      "right" : "assertArgRange(count, count);",
      "info" : "ExpressionStatement[24550-24579]:ExpressionStatement[24838-24867]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24637-24842]:Block[24925-25130]"
    }, {
      "left" : "int ct = getArgumentCount();",
      "right" : "int ct = getArgumentCount();",
      "info" : "VariableDeclarationStatement[24647-24675]:VariableDeclarationStatement[24935-24963]"
    }, {
      "left" : "if (ct < min || ct > max)",
      "right" : "if (ct < min || ct > max)",
      "info" : "IfStatement[24684-24836]:IfStatement[24972-25124]"
    }, {
      "left" : "{}",
      "right" : "{}",
      "info" : "Block[24710-24836]:Block[24998-25124]"
    }, {
      "left" : "throw new JXPathInvalidSyntaxException(\n                    \"Incorrect number of arguments: \" + this);",
      "right" : "throw new JXPathInvalidSyntaxException(\n                    \"Incorrect number of arguments: \" + this);",
      "info" : "ThrowStatement[24724-24826]:ThrowStatement[25012-25114]"
    } ]
  },
  "interFileMappings" : { }
}